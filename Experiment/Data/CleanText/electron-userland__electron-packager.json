{
    "maxogden": "this will have to get resolved for windows support https://github.com/maxogden/atom-shell-packager/blob/d254289a156c00c4d40a9898cafdee9cebf5d17b/index.js#L94\nupdate: nevermind, this was fixed :) uses fs.rename now\n. @dboshardy The goal of atom-shell-packager is to be a simple standalone CLI tool for building app executables. If you check out the code in the repo now you'll see that the process of building the mac app is pretty straightforward -- it just uses the provided mac app from Atom Shell and renames things/copies your files into it.\nI haven't looked into creating a windows .exe, or a linux distributable app. I heard that there might be some code for creating windows .exes somewhere deep inside https://github.com/atom/atom-shell-starter. \nI'd start by figuring out how to package atom-shell apps as a windows .exe, and then see how hard it would be to implement. If you figure that out, then we can figure out a good way to merge it into this repo w/o making the existing code too complex\n. basic windows support just landed in 3.4.0: https://github.com/maxogden/electron-packager/pull/20\nthe electron-boilerplate has an implementation of generating an installer. would be nice if it was in a standalone CLI tool like this. maybe we can port their implementation to this repo and add ourselves as a dependency in their boilerplate\n. great idea, it could even run it after it copied the app into the App folder so its non-destructive to the source folder\nit might be worth using https://github.com/datproject/gasket for automating the multi-process step stuff if this gets more complex, e.g. https://github.com/meandavejustice/gh-pages-deploy/blob/master/index.js\n. @remixz kewl thanks. I did some slight code reorganizing in https://github.com/maxogden/atom-shell-packager/commit/cbc585393bdc256f509ba1070c0ed42662e98f51 (hoisting and separation of concerns)\n. released 2.0.0 which uses require.resolve to find atom-shell instead of downloading a new one. this is also nicer IMO as atom-shell is a kind of big download\n. done in 3.0.0\n. patch welcome :)\n. this seems like a problem not specific to this module, so a generic solution would be preferred, e.g. the ability for the user to run a pre-package script that did whatever they want, and then someone can make a 'strip-non-essential-files' CLI module that can be used there\n. sweet. published in 3.1.0 and added you as a collaborator\n. excellent!\n. released as 3.2.0 and added @malept to COLLABORATORS.md. @malept this means you now have the ability to merge PRs, close issues, commit to master etc. Here are the rules we use: https://github.com/Level/levelup/blob/master/CONTRIBUTING.md\n. @malept I just pushed a pretty major change (4.0.0). Would you mind making sure I didn't break your linux support? I verified it can build a linux app still but I dunno if its a valid app or not\n. WOOT\nOn Sun, May 10, 2015 at 2:45 PM, Mark Lee notifications@github.com wrote:\n\n@maxogden https://github.com/maxogden I tested 4.0.0 with my app on\nLinux (x64). Works just fine.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/maxogden/electron-packager/pull/17#issuecomment-100704578\n.\n. published\n\nOn Wed, May 6, 2015 at 6:50 AM, Mathias Buus notifications@github.com\nwrote:\n\nHmm it seems i don't have publish rights. I already bumped the version so\nas soon as @maxogden https://github.com/maxogden wakes up I can publish\nthis to npm.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/maxogden/electron-packager/pull/18#issuecomment-99467925\n.\n. i'm not 100% sure on this but try an .icns file rather than a .ico\n. YER A WIZARD HARRY!\n. released as 3.4.0\n. also added @jden as a collaborator. this means you can npm publish and manage issues/merge PRs (use your best judgment)\n. @jden I just pushed a pretty major change (4.0.0). Would you mind making sure I didn't break your windows support? I verified it can build a windows app still but I dunno if its a valid app or not\n. atom has both a AtomSetup.exe and a atom-windows.zip. Im on slow internet and cant download both to check em out, but I wonder what the diff is\n\nhttps://github.com/atom/atom/releases/tag/v0.196.0\n. is the .zip in option 1 a zip that has e.g. App.exe inside it that users can double click to run the app? If so I think thats a good place to start (since it is the simplest option)\n. @Ivshti +1 that is a great point about scope\nOn Sun, May 10, 2015 at 1:34 AM, Ivo Georgiev notifications@github.com\nwrote:\n\nI am for an option between zip and raw folder. An installer doesn't make\nsense, I think it's out of the scope for electron-packager. Maybe a new\ntool that creates an installer for Windows and a dmg for OS X?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/maxogden/electron-packager/issues/21#issuecomment-100601419\n.\n. thanks for the feedback everyone, I'm gonna close this for now but open a new issue to specifically discuss app packaging\n. ok new issue to discuss installers is here: https://github.com/maxogden/electron-packager/issues/33\n. thx. also you are an owner now\n. @rv2358 right now electron-packager doesnt have an option for using a different source app than the one that is distributed inside the official electron releases, so it would take modifications to the code to support that. However, if you are just modifying the name and icon you can do that by specifying the correct command line options to electron-packager\n. @jrudio I dont fully know the reasons why you need to use a custom version of the electron zipfile that you modified, but if you are sure you have a good reason to require a custom extracted + modified version of electron (which you downloaded from the same place that electron-packager downloads its releases), then it shouldn't be too much work if you have experience doing work on node.js modules. You would basically need to add a new command-line option that lets a user specify the electron template folder, e.g. --electron-template=./MyCustomElectron/ and then change the code to use that directory instead of the default method (which is to download a zip from electron and unzip it).\n\nThe tricky part of this is that we recently added linux and windows support, and you'd have to make sure your change works with those systems as well, which could be tricky given the project is currently moving pretty quickly.\n. @jrudio glad you were able to sort it out, and thanks\n. fixed what @jden mentioned and published as 4.0.2\n. agreed, if anyone wants to PR this it would be much appreciated!\n. sweet. i also added you as a collaborator in this repo, so you can merge PRs and push to NPM in emergencies\n. @jrudio i'm not a windows expert, but a quick google suggests it might be because you are trying to write to a different device than your C:\\ drive (http://stackoverflow.com/questions/21071303/node-js-exdev-rename-error), is that possible?\nOtherwise maybe @jden has some ideas\n. @jrudio I just published a new version of electron-download (a dependency of electron-packager) that uses the mv module that @jden mentioned. Can you give that version a try? Just delete your electron-packager installation and re-install it from npm and you should get electron-download@1.0.4\n. @jrudio cool I think thats enough info to know we fixed it. thanks for testing\n. nice. what else does this need beyond what you have now?\n. gonna merge for now\n. published as 4.1.0\n. @stefanjudis i'd rather have the installer code live in another tool, and not make this module any bigger (its already getting bloated). but sharing your code would be much appreciated :)\n. +1, though I use camelCase in the rest of the code .I'll merge and fix\n. published as 4.0.3\n. i had seen a lot of open issues involving asar on the electron repo since it's relatively new. but if we think its bug-free now then i'm good with it\n. if you pass the --prune flag to electron-packager it prunes for you in its tmpdir copy, which doesnt affect your source folder\n. if any thing we should default to require('os').arch, but even there it's\na little confusing UX wise\n. there are a good percentage of 32 bit linux users still, so im on the fence\nabout this, seems like it could make it more confusing for linux 32/\nwindows users\nOn Mon, May 18, 2015 at 3:38 PM, Sindre Sorhus notifications@github.com\nwrote:\n\nI think defaulting to the system arch would be weird as we're talking\nabout packaging the app, not running. You'd want it to be predictable\nbetween computers.\nI just want less config. And having x64 as default means I wouldn't have\nto spell it out on my OS X and Linux targets.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/maxogden/electron-packager/issues/36#issuecomment-103237565\n.\n. @sindresorhus its just that adding a mac/linux centric default for no good reason just feels weird to me personally, i'd rather fix your problem of not wanting to have to specify complex config with other options like https://github.com/maxogden/electron-packager/issues/40\n. I fixed the Linux inconsistency today in https://github.com/maxogden/electron-packager/commit/86edff69d80d2d761877c476fa621ad67bba1935, but leaving this open as there are some other good suggestions we can think about in the future\n. instead of specifically passing dereference we should just have a way to pass a custom ncp options object in, that way we can just support 100% of ncp options\n. @jden good point, +1\n. +1, they are included in the default electron zip that gets downloaded from the electron releases and we never remove them\n. cc @sindresorhus\n\nOn Monday, June 1, 2015, iamdriz notifications@github.com wrote:\n\nI have the following options for my grunt task:\nwindowsBuild: {\n    options: {\n        name: 'Cameron',\n        dir: 'app',\n        out: 'dist',\n        version: '0.25.3',\n        platform: 'win32',\n        arch: 'ia32',\n        icon: 'icon.ico'\n    }\n}\nbut the icon isn't applied to the final dist app... I just get the default\nElectron icon. The ico file is valid at at the specified location!\nTried on Windows 7.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/maxogden/electron-packager/issues/53.\n\n\nSent from my phone\n. @iamdriz you need it on any platform. I assumed it came with windows but I am probably mistaken (I don't test on windows, I rely on windows to fix issues like that). Can you see if you have rcedit.exe on your machine? If not, we'll have to add instructions on how to install it on windows to the readme\n. ah ok I figured it was some sort of minimal polyfill for non windows sytems\nOn Mon, Jun 1, 2015 at 3:14 PM, jden notifications@github.com wrote:\n\n@maxogden https://github.com/maxogden rcedit.exe is a tool made by the\nelectron team for editing Windows executables... it does not come with\nWindows. We should update the readme!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/maxogden/electron-packager/issues/53#issuecomment-107733477\n.\n. @johnmuhl can you provide this info so we can help triage? https://github.com/maxogden/electron-packager/blob/master/CONTRIBUTING.md\n. excellent thanks, will try and reproduce. we've seen similar issues on\nWindows so I wasn't sure if it was a Windows issue\n\nOn Tue, Jun 9, 2015 at 6:47 PM, John Muhl notifications@github.com wrote:\n\n\nWhich version of electron-packager are you using?\n\n4.1.2\n  - What cli arguments are you passing?\nelectron-packager ./ MyApp --platform=darwin --arch=x64 --version=0.27.3\n  - What platform are you running electron-packager on? What platform(s)\n    are you building for?\nMac OS X 10.9.5\n  - Is there a stack trace in the error message you're seeing?\nThe complete output of the command above is:\nPackaging app for platform darwin x64 using electron v0.27.3\nEXDEV: cross-device link not permitted, rename '/var/folders/vv/54sdz8qj3b93zdkd8dchc5v00000gp/T/electron-packager-mac/MyApp.app' -> '/Volumes/home/jm/Source/johnmuhl/MyApp/MyApp.app'\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/maxogden/electron-packager/issues/60#issuecomment-110554867\n.\n. lgtm!\n. @kfranqueiro thanks for the feedback. we definitely need tests to catch regressions. this is currently the low priority side project of a handful of folks so nobody has taken the time to do a proper test suite yet. I'll open an issue for that! Also I could see us using https://www.npmjs.com/package/run-series in a few spots to improve readability and encapsulation as well.\n. Hi, can you answer these questions to help us triage your issue? https://github.com/maxogden/electron-packager/blob/master/CONTRIBUTING.md\n. I was merging pull requests today at an airport and ended up writing a very basic test suite: https://github.com/maxogden/electron-packager/blob/master/test/test.js\n\n@kfranqueiro I had forgotten about your comment above + your fork until just now coming here to comment. I am happy to work with you on merging what I just did with what you have in the works.\n. @krainboltgreene ahh good point... you might have to still use a filter, but make it a positive filter rather than a negative one. maybe we should just expose the filter to the user in a better way.\n. thanks for the bug report! heres the line of code we're calling in the implementation for reference https://github.com/maxogden/electron-packager/blob/554f3b735483319450c2ad8d0e0cba90e041ebe2/common.js#L10, it's pretty weird the asar file that you get is empty. \nI or another maintainer will try and reproduce when we get a chance\n. sorry, fixed now\n. closing this as there are lots of existing ignore related issues\n. EPIC\n. published as 5.0.0 and added @kfranqueiro as a collaborator. thanks a ton for this!\n. hmm very weird, the only 2 requirements are currently met: https://github.com/maxogden/electron-packager/blob/dcf1da5d1afb3a06afac0b3723c34bdba327ced4/package.json#L7 https://github.com/maxogden/electron-packager/blob/dcf1da5d1afb3a06afac0b3723c34bdba327ced4/cli.js#L1\n. @rahatarmanahmed other than the 1 comment I made above this looks good to me. Inferring name and version seems like a good user friendly idea. My only concern would be making it too 'magic' but this seems OK since if your app doesnt turn out how you want you can just go back and specify the name and version later.\n. Sorry I've been swamped lately, if any of the other maintainers wanna review, merge and publish this and the other PRs feel free :) Otherwise I'll get to it eventually\n. If someone is able to write a failing test for this it would be super helpful\n. nice catch, thanks. published as 5.0.1\n. released as 5.1.0\n. +1\n. i think the arch name needs to be more specific than arm, because there are different non-compatible arm architectures out there e.g. armv6, armv7, armv8 and also armhf vs armel. I'm guessing the electron build is for armv7 but I dont think they specify anywhere...\n. @malept nice find\niojs uses the format armv7l and armv6l https://iojs.org/dist/v2.4.0/\n. @JamesKyburz im guessing this is oversight on part of Electron, i'll open an issue there\n. ok opened issue: https://github.com/atom/electron/issues/2343. i'd be curious to see what they say\n. OK looks like we got a thumsbup https://github.com/atom/electron/issues/2343 but they havent switched over to the new system yet.\n. I agree a test is needed here so that we can catch regressions in the future\n. upstream issue https://github.com/maxogden/extract-zip/issues/6\n. fixed in 1.1.0 of extract-zip\n. It's difficult to reproduce this issue because of missing information requested here: https://github.com/maxogden/electron-packager/blob/master/CONTRIBUTING.md\nThe original issue is about building a Mac app on Linux with electron-packager 5.0.1 and electron 0.30.1. Every commenter after has been using different settings or hasn't included the necessary information to reproduce.\nIf someone can reliably reproduce this and wants to look into it, please do. If you are having this issue, leave as detailed as info as possible so that others can try to reproduce.\n. Heres the usage:\n--protocol-name=\\\"MyApp URL\\\" --protocol=\\\"myapp\\\"\nThis will cause your app.on('open-url') fn to fire when myapp:// links are opened from e.g. Chrome\n. @krishnaIndia looks like there are some style issues with the PR that made travis fail, check https://travis-ci.org/maxogden/electron-packager/builds/77451881 or run npm test locally\n. @RIAEvangelist I would guess that a module that did icns, ico, png and svg conversion would be pretty heavy. I think the simplest thing we could do is have e.g. --mac-icon, --linux-icon, --win-icon flags (or maybe using the platform name so --darwin-icon etc)\n. LGTM, gonna merge (I don't mind commit noise :P)\n. released as 5.1.0\n. @lipis you can easily install herrmannplatz's fork using npm and use that immediately\n. Ah we should probably mention in the readme then that linux dock icons aren't supported at this time\n. Oh I got that backwards, it won't work in the file manager but it will work in the dock.\n. @malept ahhh excellent thanks!\n. @fscherwi could you say more about why asar needs upgrading, e.g. does it fix an open issue?\n. Crazy! I have no idea personally, someone else might\n. I'm pretty confident this wouldn't be any code in electron-packager, the only difference would be how the process is spawned. It's possible that it's spawned somehow differently from the CLI as opposed to when you run it from an EXE, but I'm not sure how to go about debugging that.\n. Ahh thanks for the insight @kfranqueiro, that makes sense. I wonder if the best solution would be to ask Electron to disable that menu in the default app, that way it won't set the false expectation\n. in this case the breakage was my fault, I only tested on Mac OS. in the future i'll be sure to test on windows and linux before upgrading dependencies. most of the time having ^ saves a lot of time and frustration so I'm keeping them, and will put in place better testing infrastructure to prevent issues here in the future.\n. By the way, if anyone here wants to help with the extract-zip module by improving its test suite I opened an issue for adding the electron zips to the extract-zip test suite here: https://github.com/maxogden/extract-zip/issues/11\n. should be fixed now (with extract-zip 1.1.1). sorry about that, tested with the MacOS zips but not the Linux ones, will do so in the future\n. @dylang my general feedback on the idea is that this sounds like something that should be solved outside of this module first, and we can support an API for doing this that someone else can maintain :)\n. @dylang ah sorry, I was talking about the latter part -- the specific info.plist configuration stuff\n. a simple workaround to avoid a complex solution is to put your app in a subfolder with its own package.json\n. hey thats pretty cool, feel free to send a PR adding it to the readme at the bottom :D\n. we should switch to using https://www.npmjs.com/package/tar-fs: tarfs.pack().pipe(tarfs.extract()), its like JSON.parse(JSON.stringify(obj)) but for filesystems :)\n. I wrote this\u00a0for something else just now, its 12 lines: https://github.com/maxogden/cptar\n. If someone has a concrete requirement for something we need to support then feel free to open another issue, but I'm closing this as it's not clear theres anything we need to do here.\nAll this module does is package up an app in the formats Electron supports, so if someone has a new idea for a format that Electron can support that lets you obfuscate your source code, and we don't support that format, then open an issue.\n. @jacobvalenta theres nothing built in to electron to do that, so we don't support anything like that (since we only support what electron supports). you would have to implement that in your own module and run it on your code before using electron-packager\n. I'd rather try and fix this with docs first. The readme formatting could use some love, e.g. the usage section is currently a big wall of unicode text\n. @pyro2927 thanks for getting this rolling!\nMy two cents is that the var ignore optimization isn't relevant, stuff like that only matters for hot code paths, of which there are none in this module (e.g. there are no things getting called millions of times and/or sharing an event loop with a highly concurrent network server). Probably best to just ignore stuff like that and focus on the functionality of the PR in the future.\n. Not sure about a solution, but a workaround would probably be to zip up your thing on windows, and extract it to an actual linux fs, and then package it\n. Here's the current asar flag in the code https://github.com/maxogden/electron-packager/blob/437bb530570186a6141c55b2a967615180c5259a/common.js#L94\nWe could try overloading it. It's currently a boolean, so if it was a string we could try and read an asar file at the path in the string. if it's a boolean we would do what we do now. This might introduce some bugs with CLI parsing so we would have to be sure our CLI parser always turns --asar=true into true and not 'true'.\nThe other option is to add another flag, e.g. --asar-file=foo.asar\n. @thomasdarimont if I'm understanding your use case correctly I think this would live in a module that creates installers, e.g. https://www.npmjs.com/package/electron-builder\n. Is there any way we can do all that stuff with another module? i'd like to keep this one as simple as possible\n. @kfranqueiro yea the first two items wouldn't be that much of a code change probably (though it would be nice some day to move all the plist stuff out of here). I was mostly talking about the entitlements/capabilities stuff which would be a lot of new code\n. @fourpixels See if you can get the test suite to run on your Windows machine, just run npm test. If that works, maybe write a test that fails on windows?\n. I'm not good at Windows stuff, but wanted to mention it would be really helpful to know if we have tests for the reported bugs here. Even better, if we don't have any tests, if we could get some failing tests then that would be super amazing.\n. Try doing console.log('file://' + __dirname + '/templates/index.html') and make sure the path is correct\n. Need a failing test case from someone first\n. Have you considered using a separate subfolder for your electron modules? E.g.\n- /myproject/package.json - put your dev dependencies in here\n- /myproject/app/package.json - put your electron app dependencies in here\nThat way when you package your app you can just include everything in /myproject/app without having to worry about complex filtering.\nIf that doesn't work for you, another thing you can do now is implement your own app folder preparation logic, e.g. copy the folders you want into a 'build' folder and then use the programmatic API's dir option to point at that folder. This way you don't even need to use the ignore option.\n. For downloading Electronbinaries it uses http://github.com/maxogden/electron-download\nTo use it on Windows you can use either the command-line or JS APIs mentioned in the readme\n. meta note, for windows only features we should probably have a section in the readme that is like 'these are all windows only sorry'\n. oh yea looks like we havent published in 2 months, oops. looking into it now\n. 5.2.0 is out!\np.s. if any other collaborators want npm publish access, lemme know\n. my guess would be the docker virtual file system is slow. you could try running electron-packager with DEBUG=extract-zip to monitor unzip progress, maybe thats the culprit?\n. Random guess but I bet it's related to folder copying (https://github.com/maxogden/electron-packager/issues/151)\n. The best way to bring this to a speedy resolution would be to make a reproducible test case, e.g. code someone else can run that makes electron-packager hang at the same step during the build. It's very likely that it is something about the electron application being packaged that is causing the issue, as all of our test cases and existing users haven't hit this problem with other applications.\nBasically we can't do anything to fix it without being able to reproduce the issue.\n. @Davidaredding I'm not really sure what might cause the issue. Maybe a huge number of files? All electron-packager really does is copy files from a source location into a destination and rename some stuff.\n. The electron-packager module doesn't do anything special to help you compile native modules, thats totally up to the maintainer to compile and is outside the scope of this module. However, if someone has a concrete proposal (e.g. an API proposal) that could make the packaging part easier that integrates with something else that handles compilation then I would be all ears.\n. It's most likely that your module is not getting found by node/npm. I have some docs on how this works here: https://github.com/maxogden/art-of-node#how-require-works. Keep trying until it works, I don't think anyone has reported this particular issue before so it's likely something with your setup.\n. OK i'll try and cut a new release\n. ok 5.2.1 is out\n. :)\n. Here's my opinion:\n- Looks pretty solid + straightforward, however:\n- I think there needs to be some mention somewhere in the readme that mas means \"Mac App Store\" just to help user friendliness\n- The fact that we're adding a bunch of code signing specific code with no tests makes me really nervous. I would really prefer it at this point if all the codesigning stuff got moved into a separate\u00a0standalone module that we could depend on. This kind of patch is a big red flag to me\n. > The problem I have is that I don't know what a reasonable way to programatically test this looks like.\nAgreed, it's a hard one. I think in place of proper tests the next best thing would be to put all the signing code into a new module, e.g. electron-sign, and then at least it can have a dedicated issue tracker, version number, external API, and maintainers. \nIs anyone up for writing + maintaining a electron-sign module?\n. @sethlu Wow!! Amazing work. That looks really good so far. I looked at the code and didn't see any obvious problems. It's great that you have a test suite and standard hooked up too :)\nWhen you are ready, do you want to ~~make a PR to electron-packager that~~ update this PR to integrate with electron-sign? I can also add you to the electron-packager collaborators so you can help maintain the integration in the future.\n. @cjb is there any existing code for that? if if's not too hairy maybe it could live in electron-sign too?\n. @sethlu excellent, sounds good, thanks!\n. protip, if you use npm install --save some-dependency then npm will automatically add it to the dependencies in package.json and alphabetize it for you :)\n. nice!  :+1: \n. Originally I was thinking stdout would be used for a zip output stream etc, so I used stderr for status messages and reserved use of stdout in the future. I don't have strong feelings on whether or not we should be using stdout or stderr for status messages, but making a breaking change now for trivial thing like this probably wouldn't be worth it when you can reliably use the process exit code in a programmatic setting.\n. If its just an extra one liner in the code for backwards compat it's worth it to support the old one, just mark it as deprecated in the docs.\n. nice, we should update https://github.com/openopensource/openopensource.github.io\n. Wow very odd. Thank you for the detailed debugging information. I am not sure how to proceed either, but perhaps someone else has an idea\n. Best place to ask it is actually in this repo http://github.com/atom/electron, they are the ones who actually create the .app in the first place, we just unzip it from the zip they upload in their releases and modify it\n. @jiahaog Hi and thanks for the PR. I am OK with this, but it would be nice if there were tests for this feature so we could catch regressions in the future in case something breaks this.\n. lgtm! only nit is that name is a reserved keyword so I normally don't use it, but it probably doesn't matter here\n. I must confess I read this thread and am confused about what is actually being proposed. IMO we should just make the folder name random to support parallel builds, I think that's a valid use case. It will be a one line fix also.\n. @kfranqueiro ah good points, I guess it is non-trivial to support parallel builds in the tmpdir.\nTo answer your question, the tmpdir is just a staging area so that the unzip -> rename -> modify cycle can happen somewhere that won't leave an inconsistent state in the users directory in the case of a crash. E.g. if the unzip fails halfway through, or the packager crashes halfway through. If we leave the tmpdir in an inconsistent state it doesnt matter, we can just delete it. Maybe that isn't an actual concern people have, but it seemed like a good idea at the time.\nNow it seems like the simplest option would be to allow the staging directory to be specified, and default it to tmpdir\n. @kfranqueiro Ah ok, just grokked the convo here. I am still +1 to a staging area. I'd rather have the failure state of electron-packager be to not leave a bunch of in-progress files all over a directory.\nAlso, good point re: the --tmpdir option, that fixes the parallel builds issue (this is the first time parallel builds have been requested). I don't think it's a hack to specify different --tmpdirs, seems perfectly reasonable to me.\nSo basically that judgment that needs to be made here is if its worth it to add an option that touches a lot of existing code so that @develar can avoid a copy operation in his test suite. I would personally rank the importance of a feature like this pretty low since it's a lot of effort for very little upside, but if this PR got some tests added to it then I would be OK merging it now since most of the work is already done at this point anyway.\n. Heres where the array comes from https://github.com/AvianFlu/ncp/blob/6820b0fbe3f7400fdb283c741ef88b6d8e2d4994/lib/ncp.js#L255 Kinda weird they do that IMO when arrs.length === 1. \n. agreed :) shouldn't even be that hard, tar-fs is a great replacement.\njust haven't had time\nOn Thu, Feb 4, 2016 at 7:30 PM, Mark Lee notifications@github.com wrote:\n\nSeems like yet another reason to replace ncp.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/maxogden/electron-packager/issues/252#issuecomment-180175513\n.\n. I don't see anything wrong this this PR @erkyrath, thanks for making it and adding tests.\n\nHowever, on a meta note, I really feel like this module is doing too much plist specific stuff that ideally would live externally. If I could do it over again I would defer all plist operations to the user and have them require plist parsing code etc. I'd be interested to hear if anyone has thoughts on a better overall solution to working with plists that doesn't involve implementing lots and lots of code in this module (hence making it hard to maintain)\n. my 2 cents is we should focus efforts on making the module smaller, since\nthat simplifies everything. but if the coverage stuff is easy to maintain\n(e.g. no complex config files etc) then I'm +1\nOn Saturday, February 6, 2016, Mark Lee notifications@github.com wrote:\n\nI was curious and decided to see how well covered the package is with\ntestcases. I used nyc https://github.com/bcoe/nyc to do it - it's\nactually pretty good, ~96% (ignoring cli.js).\n------------|----------|----------|----------|----------|----------------|\nFile        |  % Stmts | % Branch |  % Funcs |  % Lines |Uncovered Lines |\n------------|----------|----------|----------|----------|----------------|\n root/  |    91.37 |    78.47 |    98.72 |    96.13 |                |\n  common.js |    93.75 |    73.53 |      100 |    98.65 |             57 |\n  index.js  |    90.16 |    80.65 |      100 |    94.34 |... 171,189,190 |\n  linux.js  |    81.82 |       50 |      100 |      100 |                |\n  mac.js    |    92.65 |    83.33 |    93.33 |    95.38 |       64,65,86 |\n  win32.js  |    90.63 |       80 |      100 |    96.67 |             41 |\n------------|----------|----------|----------|----------|----------------|\nAll files   |    91.37 |    78.47 |    98.72 |    96.13 |                |\n------------|----------|----------|----------|----------|----------------|\nDo we want to use a code coverage service to monitor this (particularly\nfor incoming pull requests), and if so, which one? I'm familiar with\ncoveralls and codeclimate.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/maxogden/electron-packager/issues/256.\n\n\nSent from my phone\n. nice, lgtm\n. cool +1\n. :thumbsup:\nOn Sun, Feb 28, 2016 at 6:19 PM, Mark Lee notifications@github.com wrote:\n\nI'm going to go with 6.0.0 - a backwards incompatible change has been made\nto both --platform=all and --all.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/electron-userland/electron-packager/issues/266#issuecomment-190002397\n.\n. Done :)\n\nOn Tue, Mar 8, 2016 at 8:34 AM, Mark Lee notifications@github.com wrote:\n\nOK, I've merged everything I wanted to for 6.0.0. I finally made an NPM\naccount last night, so @maxogden https://github.com/maxogden could you\nadd me to the list of collaborators there? It's the same username as here.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/electron-userland/electron-packager/issues/266#issuecomment-193852140\n.\n. hah, great minds think alike. I went ahead and committed one first, but\nfeel free to edit\n\nOn Wednesday, February 17, 2016, Mark Lee notifications@github.com wrote:\n\nSee: dear-github/dear-github#125\nhttps://github.com/dear-github/dear-github/issues/125\nI have ideas for how to write these in a way that aren't specific to one\nclass of issue/PR or user, I will populate this issue with them later.\n(Others, feel free to chime in with your opinions.)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/maxogden/electron-packager/issues/267.\n\n\nSent from my phone\n. basically \"we can only help you if you provide us with something we can run to reproduce your problem\"\n. Seems like a good idea, but my concerns would be:\n- how much code it would add here\n- if we can add an api to let people define third party packaging steps\n- can it be implemented in a third party that uses o/\n. Cool sounds good!\nOn Sun, Feb 21, 2016 at 3:00 PM, Cole Diffin notifications@github.com\nwrote:\n\nI don't imagine that much code would be added here. Although, I do like\nthe idea of extending the build process to 3rd party apps. This would\npotentially open up quite a big customisation opportunity.\nI'll have a think about how this can be implemented, and try do a code\ndive to figure out the where and how.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/maxogden/electron-packager/issues/270#issuecomment-186939424\n.\n. IMO the API should integrate with anywhere we use run-series: https://github.com/maxogden/electron-packager/blob/f2de30b92481a02c473236775fc7ff7239a52f29/index.js#L9. For example it would be easy to allow user defined functions inside series like this one https://github.com/maxogden/electron-packager/blob/f2de30b92481a02c473236775fc7ff7239a52f29/index.js#L81-L91\n\nThat way we can just use callbacks which is consistent with all the existing code and works everywhere.\nThe only question is which points do we need to expose the ability for the user to add their own functions. \nI could imagine it being as simple as functions in the options, e.g.\n```\nopts.afterExtract = function (done) {}\nopts.beforeMove = function done() {}\npackager(opts)\n```\nE.g. afterExtract would go after this and beforeMove would go before this\n. @malept thanks :)\nMe and @mafintosh moved this, electron-download and electron-prebuilt to a new org electron-userland. I also now mention open open source more prominently in the readme, and on the org page. We'll still be around to help but won't be as involved on a daily basis. Cheers!\n. @develar the electronjs org was created by GitHub, and isn't following the open open source governance model. I'd rather have these live in a neutral org\n. sorry, you are now :)\nOn Sunday, February 28, 2016, Mark Lee notifications@github.com wrote:\n\n@sethlu https://github.com/sethlu I would do something about that\nmyself, but I am not an owner in the org.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/electron-userland/electron-packager/issues/272#issuecomment-190041949\n.\n\n\nSent from my phone\n. Sorry, can you please describe this issue? I'm confused.\n. Still a bit confused, sorry. In some of the screenshots it shows 'Electron Framework.framework' and in others it shows 'Electron Framework', are these the same absolute path in actuality?\nAlso, all electron-packager does is copy your files into app.asar, it shouldn't be touching any other files (besides plist files maybe). So if it is changing Electron Framework.framework that would be really weird.\n. hahahah\n. Just wanted to point out this doesnt close https://github.com/electron-userland/electron-packager/issues/151, that issue is about using tar-fs, which IMO is a lot more dependable performance wise than fs-extra/ncp.\n. @kaepora whoa just realized cryptocat is using this, awesome!\n. I think you need a return here\n. also just to clarify, is the idea to change the CLI API from electron-packager <sourcedir> to e.g. electron-packager --files=foo/bar.js --files=foo/baz.js where you specify each individual file on the CLI?\n. Oh I see, you are reading the files field of the package.json and using that as the list of files to include. I like that approach but not all package.jsons will have the files field populated, so I think we should maybe show the user an error or warning if the packager can't find any files to include.\nAlso is there a way to specify the files using flags like in my comment above? From reading the code it looks like it only pulls from package.json\n. Also in general (sorry for the deluge of comments) I am open to the 'positive' approach taken here, but I'm not sure we should remove the old way of doing it (where you filter stuff out). I think before making any breaking changes it would be a good idea to open a discussion issue to get feedback from the other maintainers/users on what we think a good set of APIs would be.\n. I would prefer to use https://www.npmjs.com/package/resolve instead of this function\n. maybe we should have an example here just to hammer it home to people\n. maybe have a real world example in addition to the template form, so its somewhat copy-pasteable (will also hopefully illustrate to people correct usage with --version)\n. This line seems like an accident :)\n. Oh read the commit, it's a test case? I think a programmatic test should be added then\n. I'd rather handle this by setting the boolean flag for this argument in the minimist options (cli.js)\n. can you use === here? just for consistency\n. can you use === here? just for consistency\n. ",
    "dboshardy": "I'm very curious about getting involved and to help with this.  What in general needs porting? And does my not knowing what needs to be done preclude my ability of helping with this?\n. ",
    "junosuarez": "I'mma take a stab at this sometime in the next few days. If someone else comes along and wants to work on it too, awesome! But here's an announcement of general intention.\n. :+1: for copying the npm ignore algorithm:\nwhitelist files in package.json || blacklist .npmignore || blacklist .gitignore || *\n. @sindresorhus is there anything else in this issue that was not addressed by #24? Can it be closed?\n. lemme fix the standard style things... 1 sec\n. @marwanhilmi see the discussion I raised in #21 \n. :+1: works for me on win32-x64 building on Windows 8.1 x64.\n. In the zip option, users would have to unzip it to a directory somewhere and then run the .exe from that location\n. @englercj \n\natom-shell-installer doesn't work with a folder output from this tool \n\nCould you please open an issue and include the specific error message? Thanks!\n. Hi, thanks for this, @jrudio ! Can you provide more information?\nwhich version of electron-packager are you using?\nwhat cli arguments are you passing?\nIs there a stack trace in the error message you're seeing?\n@maxogden indeed, that's my suspicion - which is what mv is supposed to be helping with\n. Cross-referencing those issues:\n- https://github.com/atom/rcedit/issues/2\n- https://github.com/mllrsohn/node-webkit-builder/issues/44\n. I found this wrapper to resourcehacker, which is probably the most robust solution for modifying compilied Windows executables https://github.com/felicienfrancois/node-resourcehacker\nWe may be able to swap out rcedit for this instead.\n. @Rameshv after looking at that repo again, it doesn't appear to be a properly licensed redistribution of resourcehacker... indeed, it's not published on npm. We might be able to make a version of that which downloaded the resourcehacker exe via an npm postinstall script from the original distribution point \n. @Rameshv do you have this work in a repo somewhere? We'll be happy to work with you to review it and integrate it with electron-packager as cleanly as possible. We're currently not using grunt, and I'd like to avoid introducing large new dependencies like that if we don't need to.\n. :+1: all around :ocean: \n. I support both of these as defaults\n. aside: as someone who just had to leave their computer on overnight copying over a large ~/dev directory full of hundreds of thousands of files from node_modules directory trees on a faulty SSD, I kinda wish a certain software platform would move to archive-based dependencies, too :)\n. It's not clear to me that this is the best default. It's not the broadest compatibility-speaking. If you're building for your own machine, then it should default to whatever your current arch is (granted, in 2015, it's likely x64, but I digress). If you're running electron-packager to cross-build for a different target arch, then it could be anything that electron supports.\n. In conjunction with #40, I think the output folder should default to a combination of ./$APP_NAME-$PLATFORM-$ARCH\n. It would be great to do these multiple builds in parallel, too!\n. Great idea! Please check that this passes npm test and then rebase against master\n. Actually, what about just passing dereference by default? If you're packaging up an electron app, presumably you're going to distribute it somewhere, and that system probably doesn't care about your symlinks. Copying the files is the only logical thing you would want to do when packaging them.\nAs for exposing all of ncp options, I'm -1, because I don't think that implementation detail should be exposed.\n. /cc @maxogden based on the thread in #42, go ahead and merge this when you're ready :cat2: \n. For the sake of documenting the rationale for this PR in this thread, could you describe where the filter is being processed and why regexes are necessary?\n. @zaggino thanks for your efforts in investigating & PRing  these issues, especially cross-platform. Can you think of any ways of meaningfully testing this to avoid introducing subtle breaking changes in the future?\n. Wonderful- thanks a ton!\n. Oops, you're right - those certainly shouldn't be there. Thanks for filing this issue, @orderedlist! Just to confirm, what version of electron-packager are you using, what OS are you running it on, and what OS are you building for?\nThanks!\n. Looks good to me! Could you please rebase and squash your commits & then it can be merged.\n. Thanks!\n. @maxogden rcedit.exe is a tool made by the electron team for editing Windows executables... it does not come with Windows. We should update the readme!\n. @iamdriz when you npm install electron-packager, you should have (relative to the package path) node_modules/rcedit/bin/rcedit.exe\n. Yes, it is distributed in the rcedit npm package\n. Windows shortcut icons default to the default app icon, but they can also be set to any icon resource, e.g., another icon resource embedded in the target executable or an icon resource in a dll. I know there are ways to change this programmatically, a super quick search brings up  https://blogs.technet.microsoft.com/heyscriptingguy/2005/08/12/how-can-i-change-the-icon-for-an-existing-shortcut/ - hope this helps point in the right direction!\n. The strategy in #55 of not matching --ignore patterns against the cwd works, but it seems like it should ignore the <sourcedir> instead, which may or may not be the cwd\n. Please update the PR to fix the failing build & squash the commits :)\n. @malept thanks! Fixed typo on feature branch\n. The npm package for node-rcedit comes with the bin/rcedit.exe - this is the best way for us to distribute it. When building from non-Windows platforms, it runs under wine, as we mention in our readme.\n. Closing this issue, as no additional step should be necessary for rcedit as a dependency beyond npm install\n. I started making progress on this front in https://www.npmjs.com/package/register-protocol-handler - would be grateful for help as I don't have a lot of time to spare for the next few weeks due to work\n. @mafintosh ^\n. @Ivshti agree, the primary functionality shouldn't be built in electron-packager, but whatever the strategy for registering applications as protocol handlers is on each particular platform, electron-packager should use that to make it easier for people to build protocol handler applications with electron\n. @lvshti agree. In Windows, it would have to be done by an installer, which was previously decided to be out of scope\n. Thanks for posting the resolution!\n. Hmm, it's not working on my machine:\n\nelectron-packager @ d2a2f0547610632\nwin32 8.1 x64\n. Also: how do we want to handle platform-specific options? Are there any of these properties which overlap on other platforms so we can avoid duplicate config? /cc @maxogden \n. This seems related to my question in https://github.com/maxogden/electron-packager/pull/63#issuecomment-112503269\n@kfranqueiro if you'd like, we'd be willing to accept a pull request for this.\n. @kfranqueiro your point is well made - having cleaner code makes it easier for others to understand & contribute to a project, which I think is a goal all of the current contributors share. As @maxogden said, this is a small module that grew to include cross-platform support and additional features which resulted in more complicated code structure. If you're interested in helping, that would be awesome!\n. Confirmed, I can reproduce this in my environment (win 8.1, electron-packager 4.1.2). It works when I run the packager script from within the electron-packager directory (e.g., var packager = require('./');) but not when electron-packager is an external dependency under node_modules. I can dig into this further later.\n. published as electron-packager@4.1.3\n. we're using the node nomenclature for platform and architecture, so 64 bit windows would be win32-x64. I think it would be a good idea to include architecture in output directory names.\nRelated discussion: https://github.com/maxogden/electron-packager/issues/38\n. @Stephn-R to clarify, are you building on a mac as well?\n. Ah, looks like a cross-device error which we've run into before. @normmcgarry is there a stack trace or a line number associated with that?\n. @tengyifei could you please rebase and squash into one commit?\n. yes, yes, yes!\n. mv is used to prevent EXDEV errors when moving a file across physical drives on some platforms, especially win32. fs.rename should not be used.\n. attn @maxogden \n. @rahatarmanahmed can you please rebase & squash the PR into one commit? Thanks :)\n. :+1: lgtm\n. Ah, I think I see the problem: instead of src, the source directory property on the options object should be dir. It's documented here in the readme, but I think it could be clearer. In the CLI, we check for it as a required argument.\nI'd welcome a pull request adding options validation for this for programmatic usage.\n. :cat2: :3\n. ",
    "veloxy": "Could look at this for reference, looks like it has some solid support for major operating systems https://github.com/szwacz/electron-boilerplate\n. ",
    "ingro": "Another reference could be https://github.com/atom/grunt-electron-installer which use Squirrel\n. ",
    "fritx": ":+1:\n. Oh it's awesome that i'm just viewing  another issue opened by you.. quite a coincidence!\n. @malept cool\n. cool\n. @malept thanks for your time, great answer!. ",
    "malept": "I'm not sure if this is still relevant.\n. I don't think this is relevant anymore, both electron(-prebuilt) and electron-packager both use electron-download, which caches Electron zips. I'm reasonably sure the same Electron version+platform+arch zip won't get downloaded twice beause of this.\n. electron-packager currently ignores node_modules/electron-packager, node_modules/electron-prebuilt, and .git by default, which means the issue title is now a reality (and then some). Please file any further enhancements to the ignore logic in separate issues.\n. Looks like it.\n. Squashed.\n. @maxogden I tested 4.0.0 with my app on Linux (x64). Works just fine.\n. Closing since #63 was merged.\n. It would be nice if the installer creation could be run from one OS (as is currently the case with electron-packager), then one could use CI to automatically generate them for releases. Unfortunately, after searching for cross-platform support for creating .dmgs, it appears that results are mixed.\n. > Guys, could anyone clarify, what's the recommended way right now?\nA link to electron-builder was added to the README a couple of months ago. Take that as you will. electron-builder also uses appdmg to create .dmg files.\n\nShould we use same OS as a target? I mean windows to make windows installer, mac - for mac.\n\nDMG creation does not currently work on any other OS than OSX. (See: LinusU/node-appdmg#14.) Otherwise, a Windows installer can be created on any (supported) platform. (See electron-builder's README.)\n. @havenchyk it depends on what you mean by \"recommended\". I personally use electron-builder for Windows installers. Need to figure out how to generate OSX DMGs with it too, even though I don't personally have a copy of OSX.\nIn fact, since electron-builder exists and is mentioned in the README, I'm going to close this issue. Per @maxogden, providing installers is outside the scope of electron-packager.\n. The current recommended way to build installers (which also happens to use Electron Packager) is Electron Forge.. There are several reasons for recommending Electron Forge:\n\nIt's a better option for developers starting out or creating new Electron apps (just run electron-forge init and it will create a new skeleton Electron app).\nYou can import existing Electron apps and it will convert it to the best of its ability (electron-forge import).\nElectron Forge has more than one co-maintainer (bus factor), some of whom are quite prolific in the Electron community.\nGiven that this is an issue in the Electron Packager repository: Electron Forge uses Electron Packager, electron-builder has not for quite some time.\nIn addition to Electron Packager, Electron Forge uses several community-created modules to accomplish much of its tasks, and works with upstream to handle any relevant features/bugs reported in the Forge issue tracker. This also means that the surface area of Forge is much smaller than electron-builder.\n\nThere's a bunch of other reasons but they're not particularly relevant to this issue.. @englishextra Electron Packager is fine to use by itself still, but if you need to create installers then Electron Forge is a good, ergonomic option. Particularly if you don't want to glue all the pieces together yourself.\nTo be clear, Electron Packager is not going anywhere. I'm still maintaining it (I just made a PR this week). It's a pretty significant dependency of Electron Forge. And it's going to stay outside of Electron Forge because, to repeat something I mentioned in a Forge ticket:\n\nWe're adhering to the Node community/UNIX convention where modules should ideally be created for one particular concept, and then meshed together in higher-level modules.. @jits have you looked at https://github.com/electron/electron/issues/797 ?\n. @jits you can bypass the default ignores by setting the ignore parameter to be a Function. Obviously, you cannot do this in the CLI - it is only available if you use the API.\n. I have no problem with making prune default to true.\n\nThe main problem I have with making asar default to true is that as soon as that gets released, there is going to be an influx of issues filed on electron-packager with \"module not found\" errors when people use native extensions. Or really, any exception listed in the Electron docs.\n. I mentioned this issue in Electron's Slack channel a few weeks ago. Paul Betts mentioned that the way to handle my concerns about making asar true by default is to make sure that all shared libraries (.dll, .so, .dylib, .node) are backlisted from being packed by default. If someone implements that plus writes the appropriate amount of documentation (we may have to start a docs/faq.md), then I think I will be :+1: with moving forward.\n. I would rather default to whatever the arch is of the host (which, admittedly, is likely to be x64).\n. Defaulting to the host arch has the added benefit of less config when your Electron app requires native modules.\n. Either Linux is the odd one out or Windows is. OS X is a special exception because of how Mac apps work. I'd argue that Windows is being weird - why does it need to be in a subfolder of the args.out folder?\n. It makes sense to default to ./App-linux, so that it doesn't pollute the current directory. If args.out is always appended by /$APP_NAME-linux, that will make #33 more complex (i.e., having to rename that folder before packaging it up).\n. > FWIW, I noticed that the linux module seems to actually move the user's app files into default_app.\nThat was the only way I could figure out how to get my app to run correctly on Linux.\n. If someone wants to submit a PR for this change, they should feel free to do so - assuming it's been tested on all platforms.\n. I haven't found time to test #206.\n. Thanks for filing a bug. There's actually already one open about this (#30), so you should subscribe to that one to get updates about its implementation.\n. @mhkeller I think your problem is different, this is Windows-specific. The OSX app requires an icns file.\n. It's been a while since I've dealt with Windows, but I thought desktop shortcuts defaulted to the icon of the .exe. It shouldn't affect other desktop shortcuts or especially the original executable's icon. Perhaps some weird icon caching was happening?\n. No objections, so closing.\n. :+1:\n. What version of electron-packager is this?\n. @Paxa did https://github.com/electron-userland/electron-packager/blob/master/docs/api.md#protocol and https://github.com/electron-userland/electron-packager/blob/master/docs/api.md#protocol-name not work for you?\n. I believe this (roughly) will solve it: https://github.com/atom/scandal/pull/13/files\nI can file a pull request to adapt that code, but there's a pull request before this that I'd like to make first (namely, reducing duplicated code).\n. I fixed the naming convention problem - if there are no further objections, I'll merge this by this weekend.\n. You're going to want to rebase this into one commit.\n. It sounds like you need to ignore the output directories for previously generated packages. For example, add --ignore=MyApp.app.\n. @kylebrowning this is a different problem.\n\nspawn wine ENOENT\n\nThis means that you do not have Wine installed.\n. This issue hasn't had any further information in over a year, so I'm closing it.\nIF YOU HAVE THIS PROBLEM\nPlease make a minimal testcase based on electron-quick-start and post the link here, along with very specific reproduction steps you used to package the app and as much debugging information as possible (please read the bug reporting documentation for details).\n. It sounds like you need to ignore the output directories for previously generated packages. For example, add --ignore=releases.\n. Is #37 what you're looking for?\nRegarding your original problem, I think the hard thing about adding the output directory to the ignore filter is when people decide to create packages in the current directory instead of a subdirectory.\n. I've created a new bug for your original problem.\n. Yep, thanks for reminding me.\n. Looks like #60. I'll file a PR later today.\n. @s-a whose problem is the same as yours?\n. Since @kfranqueiro added the warning message when symlinks cannot be copied, it \"fixes\" the original bug of there not being any output when building on Windows for the target OSX platform. I don't know what else we want to do here, other than perhaps close this and create a new bug that adds docs about building on Windows for OSX.\n. We need a community member who uses Windows to debug this. I don't believe any of the current maintainers has consistent access to a Windows development environment.\n. This might be worth documenting somewhere, either in the readme or as a runtime warning.\n. It probably has something to do with the fact that your app directory is on one drive and the temp directory is on the other. Also, it's --out, not -out.. At this point, the current recommended way is to use electron-rebuild and build the extensions on the same platform/arch that you're targeting. This is because as far as I can tell, Node (or rather, the node-gyp ecosystem) does not currently handle cross-compilation.\n. It works the same as atom/scandal#13, which does not seem to have any cleanup code.\n. Now uses mv instead, per discussion in #78.\n. Does mv work between folders? fs.rename does not (see #60).\n. I was wondering whether I can replace the PR in #74 with just using mv.\n. OK, I'll update my PR later today to use mv. I'm closing this issue since we're going to keep using mv.\n. >  I would think that if anything, this needs to be set to true when the host platform (i.e. os.platform()) is win32, not the target platform.\nPerhaps. It was originally only added to win32.js (via #46), so when I refactored, I didn't want to change that behavior.\n. Yeah, sorry about that. Give me a second to revert the behavior.\n. @masom #73 is not quite right in the Mac code, it adds an extra folder.\n@Enkows please test 178b3d4 with a Mac build, it reverted the behavior to what it was before my refactoring.\n. That sounds like something an installer (#33) would handle.\n. Is this Unity?\n. I don't understand where you're trying to see the icon. Perhaps you could give a screenshot?\n. Have you set the icon of the BrowserWindow in your Electron app, per http://electron.atom.io/docs/v0.28.0/api/browser-window/ ?\n. I would imagine that using a .ico as the file format would not work with Unity.\n. @strongant check the application bundle and make sure the icon path you specify is relative to the JavaScript file you're calling it from.\n. @strongant I mean in the dist directory that you specified in --out, and please respond in the other GitHub issue that you created.\n. Is this version 5?\n. Is the behavior consistent with the outcome of #38?\n. --out and its default behavior changed when #38 was closed (particularly with regards to Linux). Is what the discussion in that issue, plus what Max did in 86edff6 consistent with the the output directory behavior that you're seeing?\n. Thanks for the contribution, but I'm more inclined to take #127 instead, as it points out the differences between the two version keys, and also contains doc/test changes.\n. The only comment I have is that it would be useful to add a test for the directory traversing part of getNameAndVersion. Apart from that, :+1:\n. Thanks for working on this again!\n\nAs far as testing getNameAndVersion, perhaps it'd be best to put that kind of logic in a separate module with tests ? (i've seen the light RE: small module philosophy.) I'm thinking a get-package-info module that will traverse parent package.json's as in this PR, returning requested properties.\n\nNo objections from me.\n\nI don't know if there was a reason for the timeout being 15s. \n\nI'm not aware of a particular reason.\n. I'm testing your branch with my own app, and the docs you added indicate that omitting appname will make electron-packager choose either productName or name from package.json. I have both keys in my package.json, and when I run electron-packager, the name is used. I would have thought that productName would be preferred.\n. Never mind, I forgot to save package.json :sheep: \nWorks great for me!\n. > I think, this issue can be closed.\nSeems reasonable.\n. Not being able to create symlinks on Windows as a non-admin is a known limitation - code was added early on to check whether a given host can create symlinks and responds with the \"Cannot create symlinks\" error message if it can't. I've committed https://github.com/electron-userland/electron-packager/commit/fb8c181b3d772ba1fc6b761f3da542c317561c5d to add a reason why it cannot create symlinks in the error message.\nAs for building an macOS target on a Linux host, I cannot currently reproduce this behavior. It may have been an issue with the Electron version used.\n. Actually, see #223.\n. In the future, since you had a PR ready to go as well, just filing the PR (instead of an additional issue) is sufficient - discussion can go there.\n. We're still blocked on #107 (and by extension, https://github.com/electron/electron/issues/2343).\n. ARM builds are only available starting with Electron 0.29.0. Do we want to restrict building that OS/arch combination with --all if the app requires a lower version?\n. The commit message should be more descriptive.\n. @JamesKyburz that seems like reasonable behavior to me.\n. Looks like armv7 (hard float): https://github.com/atom/electron/blob/8f06bd6f3e217dd9d636525dcb91cab86459081a/toolchain.gypi#L13\n. We're still waiting on a volunteer to submit a change for electron/electron#2343.\n. Could you rebase your commits as appropriate?\n. Is it possible to add a test for this?\nApart from that (and a further rebase), it seems like this can be merged.\n. It's been over 6 months since there's been any activity on this PR and it's very out-of-date. I still don't have any objections to adding this feature, however the following things need to be done before it's ready for review:\n- Rebase the commits on master\n- Instead of opts['asar-package'], there is now a merged asar set of options (as of #417) so it should be moved into opts.asar.package.\n- Add at least one test\nI'm closing this PR until someone volunteers to pick it up again.\n. I can't reproduce this on Linux. Which version of electron-packager are you using?\n. This is a pretty old bug without is not reproducible, so I'm closing it. If someone can reproduce it (with detailed steps so that others can also reproduce it), I would be happy to reopen.\n. Definitely needs some docs.\n. Seems reasonable to me. We could use it to speed up the Travis tests, too.\n. @kevinsawicki by which you mean --asar.unpack \ud83d\ude04 \n. Electron.app is for OSX.\nTo run the app in Linux:\n1. Open up a terminal, cd to the output directory of your app.\n2. Run: ./Electron (though, I think the name of the executable should have changed to $appname.)\n. Does MyAppName exist in the output directory?\n. You might have to build your app inside a Linux VM to do so. (You can build Electron-based apps for all platforms on Linux.)\n. I don't know how to fix this on Windows hosts. This would be a good bug for someone in the community to research and see if a fix is even possible (hence the help wanted label).. This sounds like the question has been answered. If it is not the case, the original reporter is free to reopen the issue.\n. Since there's no reproducible test case that doesn't involve remote shares (which is a filesystem-level bug, not an Electron Packager bug), I'm closing this. If someone can provide a minimal testcase as outlined in an earlier comment, I'll be happy to reopen.\n. How did you copy the built Mac app from Windows to Mac?. This feature was merged in #255.\n. You may be interested in PR #94.\n. #94 has been merged, it defaults to the Electron version specified by package.json.\n. I've added something that looks like parallel builds when more than one target is selected at a time, in the form of Promise.all support. That's about the extent to which Electron Packager will natively support parallelization. In my opinion, anything more should be done in an external module (which could utilize the cluster module as referenced above).. A few things:\n- The rest of the flags are hyphen-delimited, not underscore-delimited (for example, --asar-unpack)\n- Would it be possible to add tests for this feature?\n- The new flags should be documented in readme.md and usage.txt.\n. @RIAEvangelist it's a little bit more complicated than that. In my app, I generate .icns and .ico files from a .svg file, and found that the PNG :arrow_right: ICNS tool depends on what the build OS is.\n. @kfranqueiro ...I did not know that. That should be documented :smile: \n. Linux just needs a .png, and it doesn't need to be set in --icon, per my comments in https://github.com/maxogden/electron-packager/issues/90#issuecomment-117808176.\n. @jlord I think I need some clarification on the behavior you're expecting. AFAIK, in Linux file managers, you can't embed an icon in the executable and have it show up when it's in the executable list. The BrowserWindow setting is required to show the icon in the window list (unlike, IIRC, OS X).\n. The commits should be rebased into one commit. Apart from that, I don't have any opinions on this PR (I don't use the asar functionality at the moment). Does any other contributor have comments?\n. Personally, I don't mind commit noise either. There are certain other contributors who do :grin:\n. Speaking as someone who doesn't know much about the OS X developer ecosystem, is it appropriate if CFBundleVersion defaults to app-version, if build-version is not specified?\n. @lipis I would be more comfortable merging this if a contributor who is more familiar with building apps for OSX than I am were to comment on it. It looks fine, purely from a code perspective.\n. Thanks, @jaanus.\n@herrmannplatz, once you rebase and the tests pass, I'll merge.\n. It's not going to show up in the file manager, because I don't think there's a(n XDG) standard for icons in binaries.\nCould you try it again after fixing the directory name typo here?\n. FYI, I've tried to make the section on icons & Linux clearer (with an extra note about file extensions in general, per @kfranqueiro) in 9ed594c.\n. Per the icon parameter docs, for Linux you need to set the icon argument when you make a BrowserWindow. Make sure you set it to a NativeImage that points to a valid PNG.\n. This is an example of mine that I know works, because I use Xfce (although it's CoffeeScript, not JavaScript): https://github.com/malept/gmusicprocurator-app/blob/master/src/main.coffee#L14-L21\n. I did say it was in CoffeeScript, which has a different syntax from JavaScript and will not execute in Node unless it's transpiled into JavaScript.\nIn your code, you want to do the following:\n``` javascript\n// Put this line at the top\nNativeImage = require('native-image');\n// [...more of your code before the snippet you pasted...]\n// Create the browser window.\nmainWindow = new BrowserWindow ({'width': 1200, 'height': 900, icon: NativeImage.createFromPath(__dirname + '/icon.ico')});\n// [...the rest of the snippet of code you pasted...]\n```\n. It is bundled with Electron.\n. I missed it before,  you need to set a PNG, not an ICO.\n. @spinico could you create a pull request with this change?\n. A similar change was introduced in #174.\n. I wonder if this happens on Linux...\n(Obviously, it wouldn't happen on OSX because of the fixed menu bar.)\n. Could you perhaps try just locking the extract-zip dependency locally and see if that fixes the problem? @maxogden updated that yesterday.\n. Closing, since this is a duplicate.\n. electron-packager depends on the extract-zip package, which should have fixed this bug this morning (PDT). Which version of extract-zip is installed? The affected version is 1.1.0, the fixed version is 1.1.1.\n. Re: protocols documentation, there is an issue at #121.\n. Since #253 has been merged, I'm closing this issue.\n. --version refers to the Electron version, not the application version.\n. Could you explain what \"socket hang up\" means?\n. @Rustem is there any terminal output?\n. This looks more like a problem with your internet connection, not with electron-packager.\n. @jingweno this is a different problem, you do not have Wine installed. Please see the README for creating windows builds with a custom app icon.\n. Have you tried adding --ignore=dist ?\n. --electron-version was never implemented. --version is now an optional parameter, it will be inferred from the version of electron-prebuilt that you have installed if you do not specify it.\n. Also, the --app-version parameter was added in the same release (5.2.1).\n. @spinico why did you close this? Apart from adding a test and then rebasing your commits, this looks fine to me.\n. ~100MB is about right. I just checked my app (Electron 0.26.0):\n$ du -xcsh *\n8.7M    content_shell.pak\n53M AppFormerlyKnownAsElectron\n9.8M    icudtl.dat\n2.5M    libffmpegsumo.so\n508K    libgcrypt.so.11\n16M libnode.so\n32K libnotify.so.4\n404K    natives_blob.bin\n2.4M    resources\n908K    snapshot_blob.bin\n93M total\n. @coreybruce You're likely not ignoring files/directories that should be ignored when building the final product, or maybe there's a symlink to another directory that's large, or it could be some other problem. It's hard to tell without an example. If you go to one of the community sites, they'll be more people to help you with your problem.. I would add a test/win.js, just like there's a test/mac.js.\n. Yeah, wine needs to be installed first: https://github.com/malept/gmusicprocurator-app/blob/master/.travis.yml#L14\n. I'm not very well-versed in the npm ecosystem, but isn't npm start used for development? I suppose the question is, what do you expect the behavior to be?\n. Just to be clear, you want npm start to generate the (presumably Windows) build for you, and then run that executable?\n. OK, so you don't currently generate the app using electron-packager, and you wish to generate it?\n. Could you please answer the questions in CONTRIBUTING.md?\n. If you think there's an issue here, could you please provide clear steps on how to reproduce the undesired behavior?\n. I can't seem to reproduce this on Linux. Here's what I did:\nsh\ncd /tmp\ngit clone https://github.com/malept/gmusicprocurator-app.git app\ncd app\nnpm install\nmake dist-linux-x64 # Only needed because of some pre-packaging steps\ncd ..\napp/node_modules/.bin/electron-packager app TestApp --platform=linux --arch=x64 --version=0.26.1 --out=/tmp/app-out --ignore=dist/\ncd /tmp/app-out/TestApp-linux-x64\n./TestApp\nThe app runs as expected.\n. Please try the latest unreleased version (i.e., git master). electron-packager no longer copies the default app (per #206).\n. This issue has kind of turned into a catch-all, so I'm going to close it.\nIF YOU HAVE THIS PROBLEM\n\nRead our docs on filing bugs and see if your specific problem already has another issue created for it (whether it's open or closed)\nIf you believe you have a different set of problems, file a new issue and follow the directions in the GitHub issue template.\n. @kumarom1203 this question is not relevant to this issue. I refer you to https://github.com/electron/asar/issues/46 instead, which is more relevant.. If/when this is implemented, it would need to be compatible with earlier versions of npm (i.e., the 2.x series).\n. Not sure what you're saying here. Are you advocating that we require users to install npm >= 3.0?\n. I just wanted to make sure that if this is implemented, electron-packager still works with npm 2.x.\n. This request the same as either #198 or #235, depending on how you look at it.\n. Per the issue reporting instructions:\n\n\nWhat [command line] arguments are you passing?\n\nAdditionally, have you tried using the latest version of electron-packager?\n. Based on some information I got from #149, which seems to be a similar problem, I have some followup questions. Given all of the files that electron-packager is failing on,\n- Do they exist?\n- If they exist, are they symlinks?\n. Since the original issue reporter has not responded to the request for additional information in several months, I'm going to assume that they either found the answer in another manner or decided not to pursue this issue. If I'm incorrect, they can respond with answers to the questions posed, and I'll reopen.\n. Your commits look a bit odd. All you really need is the first commit. Otherwise, :+1:\n. It's probably similar to #146. Given all of the files it's erroring on:\n- Do they exist?\n- If they exist, are they symlinks?\n. Could you try running electron-packager with this additional argument?\n--ignore \"node_modules/\\.bin\"\n. spawn wine ENOENT is a different error: https://github.com/maxogden/electron-packager/issues/138#issuecomment-142944815\n. I think it's a problem, but I'd like to see if #146 is related before we decide what to do with this GitHub issue (i.e., mark this as duplicate).\n. FYI, I've created a PR (#186) that adds node_modules/.bin to the default ignores.\n. @PierBover this is a different error than the original problem. Make sure wine exists in your PATH.\n. @riccitensor this is a completely different problem than this issue. What likely happened is that you downloaded a corrupted prebuilt Electron. Delete the ~/.electron folder and try again.. Can you bisect which released version of electron-packager is the last one that works for you?\n. Could you try specifying an --out directory?\nOtherwise, I think we're going to need reproduction steps on a minimal Electron app.\n. Hmm. Very odd. I noticed that Travis CI only tests under Node 0.12. Let me add some more Node versions, and see if that surfaces anything.\n. Possibly, but that's a really vague bug report with no follow-up.\n. We should open a new issue for that.\n. @natew Probably not. tar-fs is the transfer mechanism, it doesn't change the way the JavaScript is stored on disk.. I've been testing this enhancement off and on over the past week. The amount of code that has to change isn't bad, however there is a consistent performance decrease that I've noticed. It adds about a minute to the testsuite when I run it locally.. For reference: any replacement of fs-extra.copy has to have, at minimum, support for optionally dereferencing symlinks and a user-configurable filter.. I'm closing this due to the performance drop I saw.. Does the asar format meet your needs?\n. There's not currently another way to merge all of the source files into one file using electron-packager. A library to do what you propose would be welcome to be integrated into electron-packager, the same as asar currently is.\n. It sounds like you might want to file an issue with either asar or electron to have this implemented in one of those places first.\n. I'm not going to add built-in support for this, but if someone in the community wants to write a plugin for this, I would be happy to link to it in the README. Although the package you link to seems to be meant to be run after Electron Packager is run.. --version refers to the Electron version, not the application version.\n. I figured as much. I just wanted to get this idea out there and documented.\nI'll take a crack at making the README friendlier tonight, if I have some time.\nClosing for now.\n. I'm reopening this. No amount of docs has fixed this so far. In my opinion, this option violates the principle of least astonishment.\nHere's the specification for how this should work:\n1. [X] Write a pull request to add electronVersion to the API, and --electron-version to the CLI arguments. Deprecate the --version argument. Make it really clear in the docs and when it's used (instead of electronVersion) that the --version argument is deprecated.\n2. [X] Maintainer releases a minor version with this change.\n3. [ ] Write a pull request to remove --version and associated deprecation warnings.\n4. [ ] Maintainer releases a major version with this change.\n. Thanks for taking a crack at this. Could you add a test?\n. Here is where I believe the status of this PR is:\n- [ ] Add tests - one of them should test the current working directory case\n- [ ] Rebase and squash commits\nThis also happens to fix #68.\n. Thanks!\n. Added detailed CLI example and an example Electron version number.\n. I'll rebase and merge this tomorrow unless there are any objections.\n. Yes, please see the section Building Windows apps from non-Windows platforms in the readme for why this is the case.\n. What do you mean by \"tile image\"?\n. If tile images are supported, it would most likely be in the Electron documentation.\n. Seems reasonable.\n. Given the current state of the asar code, adding a new sub-property to asar would be best.\nif asar.filename is specified, it should bypass the asar creation code and just copy the specified asar file to app.asar.\nAs always, please make sure that there are appropriate docs and tests added.\n. @jsg2021 I would be more than happy to review a PR to add this feature. If you need any more guidance than what I described in https://github.com/electron-userland/electron-packager/issues/161#issuecomment-252740910 (the code has changed a lot since then), please let me know.. FYI, PR #223 has some additional discussion and a call for help directed at those interested in seeing this feature integrated into electron-packager (which I assume is most of those who are subscribed to this issue).\n. I don't think any of the current active contributors have a Windows-based development environment, so a community contribution would be most appreciated.\n. Basically, the workaround is to build packages targeted for OS X on non-Windows host platforms.\n. @johnroper100 Per the \"help wanted\" label, we're looking for someone from the community to try to fix this problem. Otherwise, the workaround mentioned above is your best bet.\n. @marckris Could you please describe in more detail what you mean by \"crash\"? I personally have not had any problems building an OS X app on a Linux host platform, so I would like to know the circumstances under which you built the packaged app. In particular:\n\n\nConsole output when you run electron-packager with the environment variable DEBUG=electron-packager.\n\n\nIf there is a stacktrace when you run the packaged app (if that's what you meant by \"crashes\"), please paste it here.\n\n\nWhat command line arguments are you passing? Alternatively, if you are using the API, what\nparameters are you passing to the packager() function?\n\n\nA failing minimal testcase (with code) or detailed steps would be very helpful in order to reproduce your problem. Using electron-quick-start is a good starting point.. One more question: have you tried copying the app off of the NTFS drive, then running it? Or using another method other than an NTFS drive to copy it to the Macbook? It's a long shot, but maybe the app's files lose certain metadata when it's moved to an NTFS-formatted partition.. I don't remember if file metadata changes show up using diff. (They do with git diff, at least permission changes.)\n\n\nAt any rate, this is a bit offtopic for a Windows host issue.. deref-symlinks only works on symlinks inside the app code, not the files from the prebuilt Electron zip. This is by design.\nI'm beginning to think that we should just recommend packaging where the target platform is the same as the host platform. It's really difficult to debug the various FS-related issues otherwise.. #561 has been created to address ambiguities in the deref-symlinks docs. . I've come to the conclusion that it will be a bit less painful for Electron app developers if the host and target platforms are the same. That is, build Windows bundles on Windows, macOS bundles on Macs, and Linux bundles on Linux. (Which is actually how Electron Forge, an Electron build tool that uses Packager, is designed.). @NoahAndrews Regarding reported bugs, there's #357 (building Windows targeted bundles on non-Windows host platforms), other problems with symlinks on Windows (another problem with building Mac targeted builds on Windows host platforms), and #115 (problems with permissions when building Linux targeted bundles on Windows).\nAnd then there's the problem of building DMGs on non-Mac host platforms (it's non-trivial on Linux and I don't think it's possible on Windows), you can't create builds for the Mac App Store on non-macOS host platforms, you can't create appx (Windows Store) builds on non-Windows host platforms, you can't create flatpak (Linux packaging format) on non-Linux host platforms... I could go on.. My point was that there are a lot of cross-operating-system packaging bugs, so my default stance is to suggest to people that they don't use it unless they can't build on multiple OSes, and they're willing to deal with bugs such as this one, because I can't debug them and no one in the community with this problem has gone into a deep dive to figure out the root cause. (I do appreciate it a lot when community members do this, for example what has transpired in the past week regarding #544.). Per the contributing instructions, which version of electron-packager are you using?\n. This is a duplicate of #129.\n. Could you please test the change in #143 and report back in that PR?\n. Look up how to set your electron-packager dependency in package.json to a github repo + specific branch.\n. The the first bullet point is #129/#143. Could you please test the change in #143 and report back in that PR?\n. I assume that myCompany--platform=win32 in your command is a typo only in the issue text and not when it is run?\nI've updated the issue title to reflect that this GitHub issue is only about the second bullet point now.\n. I'm not a big fan of omnibus issues - it makes it more difficult to figure out what the issue's current status is. I'd rather there be a separate issue for the ProductVersion problem.\n. @nithinc989 this is probably an issue with NPM and not Electron Packager, if it works correctly when you run the command directly.. @nithinc989 Since Electron Packager doesn't create installers, there's no need for it to add the certificate. I suggest either using electron-winstaller, or import your Electron app project to Electron Forge (which uses both Packager and -winstaller internally).. Have you also set the icon option in the BrowserWindow contructor?\n. According to the docs, it only supports JPEG/PNG formats for that option. Try setting it to a 512x512 PNG and see what happens.\n. What version of electron-packager are you using?\n. In the command, it appears you misspelled platform.\n. IMO this should be a cross-platform option - in fact, there is both a FileVersion and ProductVersion attribute in Windows. We should replace the version-string sub-options with the appropriate cross-platform top-level options.\n. From what I can tell, we pass the unpack option directly to the asar library. I believe you need to file an issue upstream first to get this functionality, then we can see what we need to do in order to support it.\n. I took a quick look at the problem - it appears to be the same problem as #129, but with a different key. If I have some time today, I'll write a failing test for this.\n. I was specifically looking at this line of the node-rcedit README.\n. That's what I meant by \"write a failing test\". I don't have a Windows environment handy at the moment, so writing a test similar to the one in #143 and seeing what happens is the easiest way for me to attempt to solve the problem.\n. 1. This feels like it's an upstream problem - see: atom/node-rcedit#7\n2. I would wait until there's a public release of that Windows 10 version - there may be changes between now and the release date which would fix this.\nFrom #173:\n\nrcedit doesn't seem to support setting the ProductVersion to value 1. If I try setting it to 0.9 or 1.1 or any other value, the ProductVersion is properly set, if I use 1 (or 1.0) the ProductVersion is not set.\nSo, conclusion: the fixes for FileVersion/ProductVersion work, but there is another issue in rcedit\n\nThis should be an issue filed in atom/node-rcedit.\n. @p-bakker could you test this fix to see if it fixes your specific case?\n(It's still a good change to merge, regardless.)\n. @sleman could you test this PR to see if it does what you're asking for in #171?\n. @hokein thanks for the PR. Unfortunately, I just merged another PR which causes a merge conflict with this one. Could you please rebase, after adding an entry about asar-unpack-dir to the APi section of the README?\n. Thanks for your contribution, and your patience.\n. In terms of describing asar, something concise and then a link to the Electron docs should be sufficient.\n. Odd. I wonder why the test passes.\n. Does this also happen when you set --platform=win32?\nPer the contribution instructions,\n\nWhat platform are you running electron-packager on?\n. I'm closing this as \"can't reproduce\", then.\n. Have you tried setting one or more of the --version-string options?\n. I think the problem is that when we copy the source directory (including node_modules/.bin), we dereference all symlinks. npm doesn't like that when we call npm prune --production.\n\nThe workaround is to add --ignore=node_modules/\\.bin to your command line. This is similar to #149. I don't know what the ramifications of adding that path to the default ignores is.\n. FYI, I've created a PR (#186) that adds node_modules/.bin to the default ignores.\n. I would argue that version-string.FileVersion didn't actually work prior to 5.1.1 (see #129), so the meaning of \"backwards compatible\" is unclear.\n. Since there hasn't been a response to the question(s) asked for a few months, I'm going to close this PR. That doesn't mean that we won't accept the change, but we need more information before we can make a decision, and this will likely need a test so that we can detect any regressions of this issue.\n. It seems that we're going to need someone to debug this for us.\n. @willwh I agree with @kfranqueiro, because last month I helped troubleshoot a similar environment variable problem on OSX. If you look at https://github.com/maxogden/electron-packager/issues/232#issuecomment-170225945, you will note that the PATH variable differs between opening it via Finder and via the terminal. In particular, the /usr/local/{bin,sbin} paths are added to PATH in the terminal. If the Drupal Console docs are any indication, drupal is likely installed in /usr/local/bin on your system. If this is the case, you should add /usr/local/bin to PATH before running which.\n. For your app, the short-term fix is to append /usr/local/bin to process.env['PATH'] before you call which('drupal'). For a longer-term fix, I suggest creating a configuration option to set how you execute it, given that the docs I linked earlier say that it only exists in /usr/local/bin if you want to be able to execute it system-wide.\n. The only advice I can give at this point is to start putting console.log statements everywhere.\n. > I can't use console.log() to check things from the main process, so I am not sure what to do here.\nI believe you can if you open the DevTools Window. (Look at the tutorial and search for DevTools.) You may have to do some IPC to get the data where you want it, though. I haven't tested.\n. I meant, send the contents of process.env.PATH (for example) over IPC (over, for example, a debug channel) so you can console.log() and see it in the DevTools window.\n. This issue has kind of turned into a catch-all, so I'm going to close it.\nIF YOU HAVE THIS PROBLEM\n\nRead our docs on filing bugs and see if your specific problem already has another issue created for it (whether it's open or closed)\nIf you believe you have a different set of problems, file a new issue and follow the directions in the GitHub issue template.\n. FWIW, a user contributed a PR to allow the ignore parameter to take a function (#247). Admittedly, you'd have to do the inverse of what you want since it's still ignore and not only-include.\n. I have no objection to that.\n. If there aren't any further comments/objections, I'll merge this within a few days.\n. If you run your own local mirror (via a simple file-serving HTTP server), electron-download provides a way to do this via environment variables.\n\nApart from that, I'm not sure what the advantage of not using the cache parameter is.\n. FYI, you can download via the electron-download CLI instead of downloading manually via the releases page.\n. @craxal it should work if you pin your Electron version to an exact version (that already exists) and create one or more zip files (depending on which targets you're packaging for) that are formatted and named the same as the official releases. I just tried it with electron-quick-start, with a zipped electron file named electron-v1.2.0-linux-x64.zip and using Electron Packager with a custom download.cache directory I specified with said custom zip ran without errors. You may be interested in a similar issue in electron-prebuilt: https://github.com/electron-userland/electron-prebuilt/issues/192\n. @craxal Run Electron Packager with DEBUG=electron-download. One of the debug lines is \"zip exists\" with the full path to the cached zip file, if it uses a cached zip file.\n. @craxal Set process.env.DEBUG = 'electron-download' before you require('electron-packager'), I think. This seems related: https://github.com/visionmedia/debug/issues/275\n. I don't think there are any download-specific changes between 8.5.1 and 8.7.1, you can check the NEWS file.\nYou need to set the checksum file as well in the cache directory, though.. It's by design. It assumes that if the checksum doesn't match, the download is corrupt and should be deleted so that it can be re-downloaded.\nPerhaps what should happen is that someone should provide a pull request to completely bypass electron-download, but in that case you would only be able to package one platform/arch at one time, so it may be a bit too complex to be added.. Electron Packager works better when a team provides a download mirror that \"looks\" like the official Electron download location (i.e., zipped binaries plus checksum files) instead of trying to pre-seed a cache without checksum files.\nI'm not saying that I won't accept a change to allow local electron binaries (which is why this issue isn't closed), but I haven't seen a good proposal for it that doesn't require a lot of complexity to be added to Electron Packager (nor have I come up with one yet).. @craxal a \"cache-only\" feature sounds like what you want, but it's more of a feature request for electron-download, because that handles cache management.. Does your app close in the way you expect when you use the first code snippet and run it Electron directly? (That is, without using electron-packager.)\n. That's correct. It's usually only needed for OS X, because it has a different concept of window management vs. app management.\n. Since the original issue reporter has not responded to the request for additional information in about two weeks, I'm going to assume that they either found the answer in another manner or decided not to pursue this issue. Additionally, this isn't really an electron-packager question, but more of an Electron question. So, I'm going to close this issue.\n. Seems like you want --asar-unpack-dir, which is currently only in master.\n. Is it possible to create a minimal testcase app in a gist that reproduces the bug?\n. I haven't had a chance to try to reproduce it. I imagine the workaround is to just not use the asar feature, but I'm not particularly familiar with it.\n. > why the fuck did you bother to help me in the first place if you don't know a lot about asar?\nBecause getting as much information about the issue (including how to reproduce it reliably) is important, especially if it turns out to be a bug. It will help anyone who decides to figure out what the problem is.\n\nCan you forward this issue to someone who's more familiar with asar?\n\nThe asar feature (like everything in electron-packager, really) is 100% community driven. If you can't wait for someone with an interest in this feature to take a look at this issue, perhaps try some other places in the Electron community?\n\nOr can you tell me at least where to look, so I can try to fix it my self?\n\nThis is quite literally how I would start: https://github.com/maxogden/electron-packager/search?l=javascript&q=asar&utf8=%E2%9C%93\n\nThe least you can do is setting the asar dependency version to '0.8.3' (the latest), you'r currently using '0.6.1'...\n\nI assumed you had the latest version of asar since you said you already tried --asar-unpack-dir per https://github.com/maxogden/electron-packager/issues/189#issuecomment-155112592. (The asar version change is here: https://github.com/maxogden/electron-packager/pull/174/files#diff-b9cfc7f2cdf78a7f4b91a753d10865a2L20)\n. As I mentioned earlier, the --unpack-asar-dir feature has not been released on NPM yet. Are you able to reproduce your problem by setting a git URL as the electron-packager source in your package.json?\n. FYI, there is now a released version of electron-packager with --unpack-asar-dir (5.2.0).\n. Since there hasn't been a response to whether --unpack-asar-dir solved the issue in some time, I'm closing it. If the problem still exists, please feel free to reopen.\n. I assume this happens when it tries to download the prebuilt electron binaries?\n. Did you try setting the --cache parameter?\n. Just to be thorough, I assume the file electron-v0.34.0-win32-x64.zip exists in that cache directory?\n. Thanks!\n. Perhaps it's because you don't have the appropriate icon size for the file explorer in your icon file?\n. I don't know offhand, I would look in the MSDN documentation. Personally, I just generate a whole bunch of common icon sizes in order to create the ICO and ICNS files for my app.\n. @imns there is a PR to fix this (#244) that needs some tests written before we can merge it.\n. To confirm, it sounds like if someone wanted to modify Electron's manifest, they would need to run mt.exe on a Windows machine with the Windows SDK?\n. OK, I added the appropriate labels and changed the title. Is the new title more appropriate for the feature enhancement request?\n. This is all theoretical (and I am not going to implement it myself, since I do not own a Windows machine), but shouldn't you be able to add a win32-manifest=path/to/manifest parameter, which if set, runs mt.exe probably close to the end of building an Electron app for Windows?\n. That is a good point. the optional arguments section should be divided into \"all platforms\" / \"Windows Only\" / \"OS X only\" (and then alphabetized within each subsection). But that's for another GitHub issue.\n(ETA: issue filed: #237)\n. Now that I've added support for CI in a Windows environment (#326), this seems more doable from a \"write tests for this\" perspective. I think a person who develops apps for Windows targets, on Windows hosts would be a good fit to work on this.\n. If I understand your question correctly, you should assume that the user already has the Windows SDK (and thus mt.exe) installed (and possibly in PATH, I'm not sure. This is one of the reasons why I'm not working on it myself). \"Getting\" mt.exe is not possible, as when I researched this issue when it was filed, the Windows SDK did not appear to be redistributable.\nI don't know which version of mt.exe to require - I would look at how Electron is compiled on Windows for hints.\n. Thanks for the feature request, this is a duplicate of #35 (making --prune default).\n. (I edited the issues so that the comment from #35 is here, as that's where it's relevant.)\n\nI don't think these are the same issues. [...]\n\nFair enough. I can't think of a good reason to not ignore devDependencies. Feel free to create a PR to change the behavior. You may have some trouble now that NPM 3 has a flat node_modules folder.\n. See also: #235\n. I saw a really poor implementation of this the other day. I believe the correct way to do it is something like this (pseudocode):\n``` javascript\nlet package = require('./package.json');\n// calculateDependencyTree returns a flat list of versioned dependencies, including\n// sub-dependencies, for a given list of packages.\ndependenciesToExclude() {\n  let dependencies = calculateDependencyTree(package.dependencies);\n  let devDependencies = calculateDependencyTree(package.devDependencies);\n  return devDependencies - dependencies;\n}\n```\nIdeally, this implementation does not depend on npm proper, because there have been at least two feature requests to be able to use alternative package managers.\n. I just ran into this, and I think electron-packager is doing the right thing. (Though, I don't actually think electron-packager is doing anything to hide the menu...) What you need to do is specify menus via the Menu API.\n. Thanks for the contribution. Could you add some docs to usage.txt, and add a test for this new option?\n. @plrthink :+1: looks good. Last thing is to rebase & squash the commits, and I'll merge.\n. I just realized that the docs are in the wrong place (it's ordered by the parameter name, alphabetically), but I'll fix that post-merge, since I should have seen that earlier.\nThanks for your contribution!\n. The failure message should come from one of our upstream libraries, I think in this case it's ncp. However, we've found that there are several edge cases that it triggers, probably including the one you found. #151 proposes to replace that library.\nIt shouldn't be hard to change electron-packager to make the base temporary location a configurable option. Search for references to temp or tmp in index.js.\n. @eugirdor https://github.com/maxogden/electron-packager/issues/203#issuecomment-158686024 mentions three environment variables that you can set in your build script in the meantime.\n. @eugirdor setting process.env.TMPDIR, for example, did not work for you?\n. >  Should electron-packager have warned me about this?\nIMO, no. That would require electron-packager to scan your source code (and possibly, any of your dependencies) for references to require('electron'), which is a very difficult problem to solve with many edge cases.\n. According to the 0.35.0 release notes (linked above), it was added in 0.35.0. Electron apps using earlier versions of Electron do not use the require()d module named electron. Instead, the modules such as app had to be require()d separately. Compare the main.js code in the Electron 0.34.0 tutorial with the equivalent code in the Electron 0.35.0 documentation.\n. > So, user error? I was looking at a doc version (with stock main.js) different than my installed version?\nYeah, basically. It's one of the hazards of using a pre-1.0 library/application that uses semantic versioning. I'm specifically referring to Electron, but it also applies to electron-packager.\n\nI'm at a loss here for how we could have prevented this whole thing.\n\nSo, we could do what you suggest and add a feature to detect whether you can use a certain API structure with a given Electron version. If we ignore how complex a solution would be, I don't think it fits within electron-packager. I think it would be more of an \"electron-lint\" sort of project. If that doesn't make any sense, I'm talking about a hypothetical tool in the style of eslint that would tell you problems about your Electron-specific code, given a target Electron version. Perhaps since eslint has the concept of \"pluggable rules\", it would make sense to write an eslint rule for this.\n. @reach2jeyan since this is a 2+ year old issue, you're better off asking your question (with a small, clear, reproducible testcase) in one of the community forums.. I need to set aside some time to test this with my app (since I'm the one who's asserted that a packaged app didn't run on Linux unless you use the default_app folder), but could you add a quick test to assert that the default_app folder indeed does not get included?\n. > Is it OK to include it with the default tests?\nYep, that's fine.\nAlso, thanks for your research on Electron load order!\n. Finally found some time to check this with my app, it works fine.\n. Is it possible to \"attach\" a Dockerfile so that someone can try to reproduce it themselves?\nAlso, forgive the possibly obvious question, but perhaps you ran out of room in your Docker image?\n. @dennyferra it looks like you need to ignore your out directory for some reason.\n. @bgrayburn Ignore the folder where the app bundles are being written.\n. Could you please provide us with more information about your environment and steps to reproduce, per the contributing docs? It will help with figuring out what the issue may be.\nWith the given information, I cannot reproduce this (electron-packager 5.1.1 running on Linux) using this command line:\nsh\nnode_modules/.bin/electron-packager src Test --platform=darwin --arch=all --out=/tmp/test --version=0.35.0\n. :+1: Thanks for your contribution!\n. You need to distribute the license (in some form), per the terms of Electron's license.\nI don't know about version, it's helpful for debugging purposes. I am not aware of a technical reason to distribute it.\n. > The above copyright notice and this permission notice shall be\n\nincluded in all copies or substantial portions of the Software.\n\nFrom: https://github.com/atom/electron/blob/f176b2c58f0a65f796053c2a25250ab17dfd3649/LICENSE#L11-L12\n. Electron is built on Chromium, so I imagine so.\n. I'm not sure what electron-packager can do in this situation - this seems to be a problem with the interaction between the babel and asar modules.\n. Thanks for submitting a feature request, but there are already a couple of issues filed for this. Please see #106, which is blocked by #107, which is blocked by atom/electron#2343. If you would like to help with getting this feature into electron-packager, I would encourage you to work on the associated Electron issue. \n. Per the contributing document:\n\nWhat platform are you running electron-packager on?\n\nAs to your question:\n\nHow can I debug this? \n\nYou can set the DEBUG environment variable to the value electron-download,extract-zip, to see if the problem lies with either of those dependencies.\n. @Davidaredding does using the DEBUG environment variable as described above produce any output in the terminal?\n. @Davidaredding Is that the default OSX shell? Shouldn't you be using export and not set?\n. @Davidaredding I think that means that it's hanging in the Mac-specific code. What happens if you try to build an app for another OS, like linux-x64?\n. Try building on Linux. From what I can read on the other related bugs, I haven't seen any confirmation of this behavior on non-OSX machines.\n. That was building on Linux, for any target platform?\n(Side note: The electron-packager docs, including CONTRIBUTING.md, should be better at differentiating between build platforms and target platforms.)\n. That's what I'm trying to ascertain. I've never had this problem, and I run exclusively Linux.\nBuilding on a (Vagrant) VM or (Docker) container would be sufficient testing, if you're comfortable with either technology and don't want to dedicate an entire physical box.\n. > agree that moving away from ncp is probably a good idea. Even if it doesn't fix the issue at hand, ncp is almost totally unmaintained. \nAt this point, we're looking for a community member to provide a pull request to resolve #151.\n. Per our contributing instructions:\n\nPlease provide all of the following information:\n- Which version of electron-packager are you using?\n- What cli arguments are you passing?\n- What platform are you running electron-packager on?\n- Is there a stack trace in the error message you're seeing?\n- If possible, please provide instructions to reproduce your problem\n\nThanks!\n. Perhaps someone with better knowledge of the node ecosystem can answer how to cross-compile native node modules for packaging.\n. See also: https://github.com/nodejs/node-gyp/issues/829\n. I think at this point, the solution is to use multi-OS CI services plus electron-rebuild to deal with this problem. There's nothing Electron Packager can do, and even if cross-compilation was supported by node-gyp, I think that the code itself would live in an electron-rebuild hook (like #359).. I'm not sure how this is different from #213.\n. I'd rather not have multiple issues open about the same problem. Feel free to continue commenting on #213 if you have further information to share (for example, investigating whether Max's guess is accurate or not).\n. If his guess proves to be accurate, then we at least have a reason why it's happening. That will go a long way towards a solution. (Indeed, #151 would be one potential solution.)\nAnyway, as I said in my earlier comment, that was just one example.\n. Could the people who have this problem please do the following:\n- fork https://github.com/atom/electron-quick-start\n- make the minimal amount of changes to the fork to get the problem to occur and commit the changes\n- post the minimal testcase repository link here so someone in the community can see if they can reproduce the issue themselves.\n. @rodhoward if you'd like to request that, you probably want to do so at that repository - you'll likely get a better answer there.\n. OK, I've gathered enough information about this issue. For a lot of people commenting, the problem lies in using the asar feature with native extensions. This is a known limitation with asar. To work around this, there are a few options: \n- Use asar.unpack and asar.unpackDir. The Electron packaging guide suggests doing --asar.unpack=\"*.node\", but you may need to do some experimentation to make the asar options work for your specific use case.\n- do what @leshow suggests\n- don't use asar (although there have been at least two issues filed arguing that asar should be on by default).\n. If https://github.com/electron-userland/electron-packager/issues/217#issuecomment-232376957 does not help your issue, please follow the instructions in https://github.com/electron-userland/electron-packager/issues/217#issuecomment-197969870. Otherwise, it's very difficult to figure out what your specific problem may be.\n. Git shouldn't be necessary unless your package.json file has a git reference in dependencies or devDependencies.\nIf an executable is called from Node and scnnot be found, there should be an ENOENT exception thrown, so I'm confused as to why that didn't happen in your case.\n. This sounds like a problem with one of your dependencies - it should be bundling that DLL with a binary Node module, and then any of the solutions from my 7/13 comment should work.\n. Please note that adding comments that say \"same here\" or \"+1\" or similar are not particularly helpful and just sends unnecessary notifications to everyone subscribed to the issue. \nWhat would be more helpful is providing a minimal testcase to reproduce your problem. Using the electron-quick-start repository as a base,  create a minimal Electron app that illustrates the issue you described, and post a link to it here. This makes it easier for the community to figure out what the specific cause might be.\n. I'm not sure why you're using nightmare with packaging an Electron app, it looks like something that you'd only use for tests.\n\nand how to use the extraResources option, any doc or tutorial would be helpful.\n\nYou mean extra-resource? Like the API docs say, you specify one or more paths to files that you wish to include, e.g., --extra-resource=/path/to/file1 --extra-resource=/path/to/file2. But that's outside the scope of this issue.\n. It doesn't feel right to have to run another Electron instance just to scrape data from a site. However, there seems to be problems with using a single Electron binary. But again, this is offtopic for this issue.\nAs I said earlier, a minimal testcase would be greatly appreciated.\n. @pilar1347 this is a different error than the issue this one is about, could you please file a separate issue? (Making sure you read our docs on filing bugs and follow the directions in the GitHub issue template) It would be much appreciated.\n. I think I'm going to close this particular issue because there's already one major answer in here and there are way too many different kinds of problems to get a coherent answer for all of them.\nIF YOU HAVE THIS PROBLEM\n\nRead our docs on filing bugs and see if your specific problem already has another issue created for it (whether it's open or closed)\nIf you believe you have a different set of problems, file a new issue and follow the directions in the GitHub issue template.\n. @idododu \n\nFrom the README:\n\nBe careful not to include node_modules you don't want into your final app. If you put them in the devDependencies section of package.json, by default none of the modules related to those dependencies will be copied in the app bundles. (This behavior can be turned off with the --no-prune flag.)\n. > By default, nothing in your node_modules folder will be copied to your final package.\n\nThis is not true. I'm not sure how you arrived at this conclusion. You contradict this statement in your next sentence.\n\nI have no idea why this is not mentioned anywhere in the packaging docs, as it seems to me to be the most important piece of information.\n\nIt's implied in the example in the README:\n\nLet's assume that you have made an app [...] and that the following is true:\n[...]\n- npm install for the Foo Bar app has been run at least once\n\nIf you think this is not explicit enough, I am happy to review pull requests to make it more obvious.\n. Could you please answer the questions in the issue reporting documentation so that we may better help you with your problem?\n. What's the exact console output when you run the electron-packager command?\n. I have never seen that error before. Have you tried building a package for OS X instead? (I want to know if it's specific to Windows as the target platform.)\n. @drakmail this is a different error, you need to either add the electron-prebuilt module as a dependency in package.json or specify the Electron version as a parameter. (See readme for details)\n. @gvzq I have a comment and a question:\n- Per the docs, --ignore=node_modules/electron-prebuilt --ignore=node_modules/electron-packager is already ignored by default.\n- Are you saying that you need to type ./ and not .  to correctly specify the app's source directory?\n. @gvzq this is a different error than this GitHub issue, could you please file a separate issue? (Making sure you read our docs on filing bugs and follow the directions in the GitHub issue template) It would be much appreciated.\n. I'm inclined to close this since this is a dependency bug, then. And there are a bunch of other unrelated issues included in this issue.\n. I'm guessing it's not reasonable to have a test case for this?\nCould someone more familiar with how Mac apps work take a look at the PR and associated research that @fasterthanlime did?\n. OK, I'm inclined to merge this and wait for any further bug reports to be filed. :smile: \n. > [...] that fix fixes it for us and our users (22K mac downloads & counting) 100% of the time.\nGood enough for me.\n. Thanks for the bugfix and the associated research!\n. Please update the rest of the \"darwin platform only\" references to be \"darwin/mas platforms only\".\n. This would solve #163 (or at least part of it). I'm going to wait on @maxogden's opinion on this before merging, as he had some concerns in the linked issue.\nIf someone with a Mac could test this, it would be appreciated.\n. > I think there needs to be some mention somewhere in the readme that mas means \"Mac App Store\" just to help user friendliness\n:+1: - also, linking to the Electron docs would be helpful.\n\nThe fact that we're adding a bunch of code signing specific code with no tests makes me really nervous.\n\nYeah, me too. The problem I have is that I don't know what a reasonable way to programatically test this looks like.\n\nI would really prefer it at this point if all the codesigning stuff got moved into a separate standalone module that we could depend on. This kind of patch is a big red flag to me\n\n:+1:\n. Regarding signing packages on Windows: #32\n. Here is what I think the status of this PR is:\n- [x] Rebase on master\n- [ ] Needs docs updated (ref) - I can help with that, if you like.\n- [x] Reduce the amount of duplicated code between test/mac.js and test/mas.js. A good chunk of that can be put into a separate common module (test/common-mac.js?).\n- [ ] Squash commits\nOnce these are all done, I think we're good to merge.\n. @marbemac in this package, with signing in (one or more) separate modules.\n. Could you add tests for your fixes to #261 (asserting that the files are named correctly)?\n. @sethlu could you add a test for eb2e4ff (if you aren't doing so already)?\n. I've made some documentation changes from a fork of this PR, which hopefully clarifies what MAS is and perhaps the difference between mas and darwin.\n@sethlu if the doc changes look reasonable, feel free to git cherry-pick the commit into this PR.\n. Once we resolve the documentation situation and the commits are squashed appropriately (see the end of the new section of the contributing docs for for more details), I will happily merge this PR.\n. Er, don't squash my readme commit.\n. @sethlu here's a better squash/rebase (took me two tries to get it in this state): https://github.com/maxogden/electron-packager/compare/master...malept:mas-squashed\nWhat is left in terms of readme and usage changes?\n. > Do you think it's worth noting somewhere/somehow that --platform=all is now going to end up including mas?\nYes, this is actually a good impetus for creating a NEWS.md in the spirit of http://keepachangelog.com/ (after this PR is merged). \n\nnot sure if this should also mean a major version bump\n\nI'm not sure either. At minimum, we need to clarify that --all and --platform=all means that all supported platforms are going to be built (and similar for --arch=all, I don't want to have the same conversation whenever it is we're unblocked on the arm7 PR). I would like to do this after this PR is merged.\n. Sorry, misclicked.\n. > Just added in the rest of the documentation, and separated your commit for the basic Mac App Store docs in this PR.\nThe PR says there are still merge conflicts (and the GitHub diff is very messy). I suggest:\n1. check out https://github.com/malept/electron-packager/tree/mas-squashed\n2. add your commit to add additional documentation\n3. force push onto https://github.com/sethlu/electron-packager/tree/master\n. The docs don't match what the code does: the code says the option name is app-human-readable-copyright while the docs say it's app-copyright.\nCould you please refrain from adding more features to this PR? It's getting pretty difficult to see what your new changes are. I've also been holding off on merging other PRs because this one touches so much code.\n. > It's getting pretty difficult to see what your new changes are.\nThis is also why in my rebase/squash branch of your PR, I split out your MAS changes from your \"filter special characters in bundle ID\" changes.\n. Once the app-copyright docs are updated, I'm going to merge this. (Unless one of the other contributors raises concerns soon - @kfranqueiro's concern about whether adding this feature constitutes a major or minor version bump will be addressed in #266. Hopefully I didn't miss anything.)\n. Excellent, I'm going to merge this later today.\n\nI'm not sure but there's really quite a lot of working in changing the plist properties from my commits.\n\nYes, @maxogden had a similar observation in a different PR: https://github.com/maxogden/electron-packager/pull/253#issuecomment-180172918\n. Oops, forgot to merge this last night. I will do so now.\nThanks @sethlu for all the work you've done on this pull request!\n. My guess is that --version-string.FileVersion=\"FileVersion\" is the problem, but I am not sure, since Windows development is not my area of expertise.\n. @IceApriler In order to help you with your problem, we're going to need more information about it. In particular:\n\n\nConsole output when you run electron-packager with the environment variable DEBUG=electron-packager. Please include the stack trace if one exists.\n\n\nWhat command line arguments are you passing? Alternatively, if you are using the API, what\nparameters are you passing to the packager() function?\n\n\nPlease provide either a failing minimal testcase (with code) or detailed steps to reproduce your\nproblem. Using electron-quick-start is a good starting point.\n\n\n\nMy guess without knowing anything about your problem is because you're trying to pass in a version into app-version or build-version that doesn't look like a version that you would normally put in the version field of package.json.. Before you require('electron-packager'), set process.env.DEBUG = 'electron-packager'. \nAlso, please post the contents of your package.json.  . The v at the start of your version in package.json is incompatible with win32 (and probably macOS), remove it and it should work.. > I think that it will be cool if electron-packager will check such errors and report\nI would like to note that if electron-packager were to do that, I would prefer to see the icon checker code for that in a separate module (because that's certainly not an electron-packager specific function), and then we would integrate that module into the current icon code.\n. Since the original issue reporter has not responded to the request for additional information in over two months, I'm going to assume that they either found the answer in another manner or decided not to pursue this issue. If I'm incorrect, they can respond with answers to the questions posed, and I'll reopen.\n. > In my tests I check process error output and throws error if there is one.\nOut of curiosity, why not check the exit code? (I assume you're using the CLI.)\n\nI suppose, it is a typo.\n\nRegarding the PR itself, the current behavior has existed since version 2.0.0 or so. It doesn't appear to be a typo - console.error seems to have been used pretty consistently for messages. @maxogden do you happen to remember what the reasoning was behind using console.error vs. console.log?\n. Closing, given Max's comments.\n. I would have to think about whether the zip output stream idea is still feasible given the current state of Electron Packager.\n. > If its just an extra one liner in the code for backwards compat it's worth it to support the old one, just mark it as deprecated in the docs.\n:+1: Yeah, it's two lines per argument (plus a bunch of lines for tests). I've added the deprecation language to the readme and usage docs.\n. Thanks for the PR! Perhaps add a test to make sure the option works as expected?\n. That particular test intermittently fails (and I don't know why). Don't worry about it.\n. Would you mind rebasing and squashing the commits after you fix the minor docs issue?\n. Thanks!\n. It seems like an encoding error of some sort (for example, the LC_ALL environment variable gets set to C, which if I remember correctly means ASCII). Apart from testing whether setting various locale-related environment variables to the appropriate value changes the behavior, I'm not sure how to proceed either.\n. It seems to me that what you want is the environment that calls unrar to inherit from the parent environment. See if you can pass in process.env (I think that's the name in Node) as an env(ironment) parameter to child_process or one of its functions. If that works, then it's not really a bug in electron-packager.\n. How are you executing the packaged app? Double-clicking it in Finder, or executing it on the command line?\n. I think what's happening is that the OSX non-terminal environment is not setting the environment variables that you need for unrar to display properly. You're going to have to figure out how to determine the correct language some other way (another node package?) and then set them yourself as you did in https://github.com/maxogden/electron-packager/issues/232#issuecomment-169980736.\nGiven that, I don't think this is a bug in electron-packager.\n. I'm kind of surprised standard doesn't check indentation.\n. In addition to the style fix, perhaps a test can be added to assert the expected behavior?\n. This feature was added in #293 and released in electron-packager 6.0.0.\n. Try without the asar parameter to see if the dotfiles get copied to the out directory. If they do, it seems like a bug in the asar module (or electron-packager's code dealing with asar).\n. > Maybe we should consider defaulting this to true in the next major version?\nNo objections from me.\nWe should probably start keeping a changelog.md (or news.md) for these sorts of breaking changes. (See: http://keepachangelog.com/)\n. (See also: part of #35)\n. Per the parameter documentation:\n\nversion - String\nElectron version (without the 'v') - for example, 0.33.9. See Electron releases for valid versions.\n\nYou specified --version=0.1, and there isn't an Electron release tagged 0.1. What you probably want is --app-version=0.1. (You still have to specify which Electron version you want to build with.)\n. Gonna wait on this one until #223 is merged.\n. I believe it runs the default app because you need to specify the app directory in the second command.\n. Good question. It's actually more obvious in builds that are not targeted for OS X. When you target for Windows, there is a node.dll file in the package. When you target for Linux, there is a libnode.so in the package.\nSo the answer is, Electron is not packaged with a node executable. It is prebuilt, linked to a node library (I guess, statically, in the case of OS X).\n. To your other question (how can I get the node version from a script), my guess is that you'll have to provide that functionality yourself via your app (and argument parsing).\n. > So on OSX, the node lib is MyApp.app/Contents/Frameworks/Electron Framework.framework/Libraries/libnode.dylib\nAh, OK. I thought that was weird that only OS X was linked statically. All I did was a quick find on my app's out directory.\n. I wonder if this might be a more relevant question for https://github.com/mafintosh/electron-prebuilt.\n. Apart from the style nit, I have the same comments as Max.\n. You would create a new (barebones) test fixture, without electron-prebuilt in the dependencies or devDependencies of the fixture's package.json.\n. As in, without using an application shortcut, or is that OK?\n. When you double-click on the .exe file, is it required that the flags be set? Or is it OK if, for example, you click on the app's entry in the Start Menu (or whatever it's called these days), the flags are set? Another example of the latter is a desktop shortcut.\n. I point out a difference because with a shortcut, you can specify parameters when you specify which .exe it points to.\nThat being said, I don't know if either method works. I would have to do a bit of testing in order to figure that out (similar to how #238 was worked through).\n. I'm marking this as an answered question because I have no idea how we would integrate support for this. My opinion is that it should be handled in something like electron-builder (link in readme), where shortcuts for the application can, in theory, be generated.\n. 10 minutes of searching in the Electron issue tracker for \"js-flags\" led me to this undocumented feature (which was released after this question was asked): https://github.com/electron/electron/pull/4447. Try that and let me know how it works.\n. I found this while searching for \"harmony\" in the Electron repo: https://github.com/electron/electron/issues/10400\nAlthough at this point, I'm curious what you'd need from the --harmony flag when Electron 2.0 uses Node 8.9.x.. This seems reasonable, and an easy issue for a new contributor to take on.\n. Fixed by #250.\n. This is not currently a feature of electron-packager. (Even for Mac apps, they're not technically \"self contained executables\", it's a special folder.)\nThat being said, if someone creates a Node module that transforms an Electron-based app into a self-contained executable, we would be open to a pull request that adds integration via an optional parameter.\n. Here's the answer the Electron people gave a while ago: https://github.com/atom/electron/issues/914\n. No.. Thank you for your contribution!\nCould you add a unit test for your change, to make sure there are no regressions in the future?\nAdditionally, please note that the continuous integration check failed, in that your change does not conform to our coding standards. That will also need to be fixed before this can be merged.\n. @florian the following needs to happen in order for this to be merged:\n- [ ] Coding standards need to be followed\n- [ ] A unit test needs to be added so we can prevent regressions of this behavior in the future\n- [ ] The PR needs to be rebased on master\nSince this hasn't been updated in over a month, feel free to fork this PR and work on it yourself (provided you follow all of the pull request guidelines in our documentation.\n. electron-packager does not currently have signing support for Windows packages (see #32). However, we are more than happy to review and merge a pull request to add this feature.\n. @MarshallOfSound \nCould you please explain what you mean by \"include\"?  In any event, the better choice for this would be to write a Windows signing node module and then create a pull request for electron-packager to integrate with it (similar to how OSX signing is being developed in #223).\n. Have you tried an older version? (I want to see if this is a regression.)\n. Thanks for the PR! I have no objections to this new feature, does any other contributor have any constructive criticism?\n(@paulcbetts, once there's a consensus, could you please squash your commits?)\n. Per the issue reporting guidelines in CONTRIBUTING.md:\n\n\nWhich version of electron-packager are you using?\nWhat platform are you running electron-packager on?\n. What does the folder structure of D:\\Projects\\ElectronApps\\testApp\\electron-quick-start\\testApp-win32-x64 look like?\n. I'm more interested in resources\\app. Does it look like the source dir?\n. Hmmm. Try building with either the git master version of electron-packager or an older version. Perhaps that will fix the error?\n. Does it work with an older version of Electron?\n. Just to be thorough, have you also syntax-checked your JavaScript files? (You can do so by running node -c $javascript_file.)\n. Hmm. What version of node are you using? It might have been added in a more recent version. (I'm currently running v5.5.0.)\n. According to the Node.js documentation, ES6 modules are not a \"stable\" feature of V8 (the JavaScript engine that currently powers Node.js), so I don't think you can use that syntax currently.\n\n\nClosing, as this issue is not specific to electron-packager.\n. My educated guess is by using babel.\n. Thanks for the PR! Could you add a test?\n. Also, once this is approved to be merged, could you squash the commits?\n. Minor nit: you don't really need the last two lines in your commit, even though they came from the original unsquashed commits. Apart from that, :+1:\n. I think I'm missing something - what is the downside to specifying opts.tempdir for each test to be run (probably via whatever Node's equivalent of mktmpdir is)?\nFYI, If we want to move forward with this PR after more information is gathered:\n- existing tests need to be fixed - this probably means that the new behavior shouldn't be default. (This is my guess as to why the failures happen, after skimming the build output.)\n- tests specific to the new behavior need to be written.\n- docs need to be updated to mention the new special value for opts.tempdir.\n. I think I'm going to defer to one of the other maintainers as to whether this should be merged (pending the test/doc fixes).\n. Could you extract the out change into a separate PR? It needs its own tests. (Which was the main problem with #155...)\n. If you would like to finish #155, even better!\n. Just noting that this PR is now blocked on #255.\n. A new PR would be good.\n. Seems like this could be fixed one of two ways:\n1. Fix the documentation so that it says the type of err varies depending on what threw it\n2. Normalize all of the thrown errors\nI'm more inclined towards 1.\n. Seems like yet another reason to replace ncp.\n. That would be #151.\n. Thinking out loud, perhaps a separate node module that provides a nice API to merge plist files?\n. We just merged a new feature, which unfortunately means that your PR now has merge conflicts. Could you please rebase?\n. Hmm. It looks like you did git merge instead of git rebase?\n. I might have some time to take a crack at it this weekend.\n. > (Or I could just force-discard that last commit entirely)\nDid a quick check to see if I could rebase easily, looks like the answer is no. When I try this weekend, I'm likely going to branch master, cherry-pick your commit, and hand-merge any conflicts (yay for a pretty comprehensive testsuite).\n. According to the Electron release notes, the electron module was introduced in version 0.35.0. You should use at least that version to package Electron (though, I would suggest using the most recent version since you're just starting out).\n. I would prefer that since you're building on #155, that you rebase + squash that branch so that the original author is still attributed to their changes, and then an additional commit is for you adding the tests and docs requested.\n. Could you add one more test for the new ignore functionality when you don't specify an out? (That's what I meant in the other PR for a \"current working directory case\".\n. Sorry, I've been holding off reviewing/merging other PRs because #223 is bigger than the others. Hopefully in the next couple of days.\n. Yep, I figured that you would need to rebase after I merged the PR I mentioned earlier.\n. > my 2 cents is we should focus efforts on making the module smaller, since that simplifies everything.\nMakes sense. I'll make sure to add that to CONTRIBUTING.md (#231).\n\nbut if the coverage stuff is easy to maintain (e.g. no complex config files etc) then I'm +1\n\nNo complex config files. It's a pretty simple set of changes, I'll file a PR shortly.\n. Example: https://coveralls.io/jobs/11820242\n(Note the check added to the PR as well.)\n. I'm going to assume that everyone is OK with this :grin:\n. Just so I'm clear, the person who packages the app sets an environment variable, and then every person who installs it runs the app with that environment variable set to the exact value that the packager set?\n. Does it have to be an environment variable?\n- If so, in your packaging script, write a JavaScript file (into a location that will get picked up by electron-packager) that sets process.env.GOOGLE_APP_CLIENT. Then require said file.\n- If not, write a text file with the value and make your app read that file.\n. For example, in the same location as your main.js. Somewhere where you can call require.\n. Given an app that looks like this:\nmain.js\npackage.json\nAnd a package.json that looks like this:\njson\n{\n  \"name\": \"MyApp\",\n  \"main\": \"main.js\",\n  \"devDependencies\": {\n    \"electron-packager\": \"^5.2.1\",\n    \"electon-prebuilt\": \"^0.36.0\"\n  }\n}\nI would have a main.js that starts like this:\njavascript\nrequire('frozenenv');\n...and a shell script build.sh:\n``` sh\n!/bin/bash\nnpm install\necho \"process.env.FOOBAR = '$FOOBAR';\" > frozenenv.js\nelectron-packager . --out ../packages --all\n```\nWhat it amounts to is a different way of creating a config file. I am not aware of any other method of configuring a packaged app that involves \"freezing\" environment variables that doesn't look something like this.\n. Hi, thanks for filing an issue. This is actually a duplicate of #163, which has a partially-complete pull request in #223.\n. Would #253 solve this problem?\n. Evidently the author of #223 noticed this bug and is going to fix it.\n. Fixed in #223.\n. Thanks for catching this!\n. I added GitHub compare links to the version names, but for whatever reason, the diffs aren't quite right.\n. I'm going to go with 6.0.0 - a backwards incompatible change has been made to both --platform=all and --all.\n. OK, I've merged everything I wanted to for 6.0.0. I finally made an NPM account last night, so @maxogden could you add me to the list of collaborators there? It's the same username as here.\n. @havenchyk a complication came up, which I think merits a release delay. See the discussion in #285.\n.  test \nIt appears that HTML comments are allowed in GFM (there is one at the top of this comment). We should use them to our advantage in the issue/PR templates.\n. Should figure out how to word something along the lines of \"If possible, a GitHub gist with a failing testcase (preferred), or steps to reliably reproduce the problem\"\n. > We need a codepen analog that supports node modules!! How cool would that be?\nThat kind of exists with Travis CI. Doesn't really help with OSX specific problems because Travis doesn't currently support Node on their OSX machines without a bit of contortion.\n. https://github.com/maxogden/electron-packager/commit/f2de30b92481a02c473236775fc7ff7239a52f29 has some updated formatting, uses HTML comments, and changes the wording a bit.\n. Given #251, I think the pull request template should mention that WIP PRs should have their titles prepended with [WIP].\n. Need to add \"What version of Node and NPM are you running?\" - see #348\n. I'll merge this tomorrow unless there are any objections.\n. Brief searching indicates that generators have been in Node since ~0.11. Is this correct?\n. Hmm. I'm not sure if that's allowable, then.\n. If that's the case and we add code that uses generators, we're going to have to specify a newer Node requirement. I believe the current minimum is 0.12.\n. I'd want to know how many users use Node 0.12 vs newer versions. Does NPM's website give those sorts of statistics?\n. In theory, NPM would send what version of Node it's using when it fetches a package. This is basically how it works in the Python packaging ecosystem, and the team that manages that publishes stats every so often about which Python versions are being used to download packages.\n. I'm closing this because it looks like @MarshallOfSound has implemented it as a plugin for electron-packager: https://www.npmjs.com/package/electron-packager-plugin-non-proprietary-codecs-ffmpeg\n. @MarshallOfSound Added it to the \"related\" section of the readme: https://github.com/electron-userland/electron-packager/commit/48b112650f8c36128d90b98bc4b1b5de8664d068\n. Which version of Electron are you building packages with?\n. I'm going to add it to the issue template, too.\nRegarding your problem, I think @sethlu mentioned in #223 that he recommended Electron 0.35.x. If you're not dependent on a feature in 0.36.x, could you try that?\n. Looks like he's documented this in electron-osx-sign: https://github.com/sethlu/electron-osx-sign/wiki/2.-Electron-Compatibility\n. @maxogden, if I haven't said it already, many thanks for creating this module.\nMy suggestion is to set up an organization for this repository. I don't suppose we can set up Travis to publish to NPM when a release tag is created?\nAlso, we need to make the open open source governance method a bit more prominent in the docs. I think I've only seen it mentioned in issues.\n. @develar that's more of a question for @maxogden, not me.\n. @maxogden perhaps we should invite @sethlu and ask to move https://github.com/sethlu/electron-osx-sign into the org (if you haven't done so already).\nAlso, I'm trying to fix the Coveralls integration. (Coveralls apparently does not like it when repositories move.)\n. @sethlu I'm not sure what you're asking regarding the license. The license for both electron-packager and electron-osx-sign look the same to me. The author line would obviously be different since there are different contributors.\n. @sethlu you're fine.\n. @sethlu I would do something about that myself, but I am not an owner in the org.\n. @sethlu you should be able to transfer now :smile: \n. FYI, I've left this issue open mostly because we are lacking a maintainer who can solve issues relating to building on the Windows host platform.\n. I can't help with debugging this particular problem (@sethlu would be a better person to help), but I had a question on one thing:\n\nversion: 'v0.35.6',\n\nDo you have electron-prebuilt in package.json? I ask because specifying a version with a leading v should not work.\n. As of 5.2.1, you don't need to set that explicitly if you have electron-prebuilt in your package.json. But that's not likely relevant to the problem you're seeing.\n. @sethlu looks like it. Admittedly, I am not well versed in how the asar feature works.\n. Blocked by #278.\n. Is this ready for review now? I don't want to merge this before you're ready (again).\n. :+1:\n. According to this line:\n\n43 verbose cwd /home/zoio/Downloads/electron-packager\n\nYou're trying to run npm install electron-packager inside of this cloned git repository, which NPM does not want you to do. If you're trying to install electron-packager from the repository you cloned onto your local machine, look at the npm install docs, specifically the details around npm install <folder>.\n. Thanks for the contribution! Could you please add an entry to usage.txt?\n. Hmm. Try moving the description to the next line.\nAlso, un-capitalize \"The\", it's inconsistent with the rest of the argument descriptions.\n. Looks good. Squash the commits and I'll merge.\n. Thanks!\n. I'm not sure we want to depend on a beta version of electron-osx-sign.\nCC: @sethlu \n. Additionally, according to Travis, upgrading to this version breaks compatibility with Node 0.12.\n. You'd be surprised how infrequently build servers get updated (unless there's a security fix required).\n. My point in mentioning it was to get @sethlu's comment.\n. @mcfedr please update with new non-beta version of electron-osx-sign (which also fixes the Node version problem I mentioned).\n. Looks good. Please squash the commits (per the pull request instructions) and I'll merge.\n. How long does it take for electron-packager to run?\n. Thanks for filing an issue! This was answered in another related issue (#152).\nThe short answer is that you need to either find or create a module that does this for you. As I understand it, asar is meant to bundle all of your source code, not the Electron binaries. We would be happy to consider a pull request to integrate a module that bundles the Electron binaries.\n. FWIW, on apps built for the Linux target platform I don't need to add the --. I tested on a 64-bit Linux app using Electron 0.36.2.\nDoes the Windows behavior still occur when you run the app without packaging it? If it does, then this is a bug in Electron itself, not electron-packager.\n. I can confirm that your app needs the extra -- but mine still doesn't after upgrading to 0.36.10.\nWhat happens if you set asar to false?\n. I don't think this is an Electron Packager specific issue. You'll have better luck getting support from one of the community forums: https://electronjs.org/community. In theory, you can build native node modules via Wine. However, this assumes that the following also runs without problems in Wine:\n- Node.js\n- electron-packager\n- Either the command line Microsoft's C++ compiler, GCC's g++, or LLVM's clang\nThis is because, as far as I know, there is no way to cross-compile native node modules. You would need to recreate a build environment entirely in Wine.\n. I don't have any reason to be against the feature in general. I'd call it osx-binaries.\nHowever, I'm beginning to think there needs to be a better way to pass arguments to electron-osx-sign. That would be the fourth argument that just passes information to that module. Perhaps it should be named sign-options, and function like how version-string works for Windows targets. I would even be willing to delay releasing 6.0.0 (that I was going to release today) if it meant saner parameters moving forward.\nCC: @sethlu\n. That seems reasonable - then for the hypothetical Windows version, you would have windows-sign.\nIf I were to work on this, I would reorganize the docs first, then implement.\n. @sethlu here is an example of a set of options that are grouped together already, that's Windows-specific: https://github.com/electron-userland/electron-packager/blob/c2dd6c26c19223fff6e1ef0a411e3a7ce8e94ffe/usage.txt#L48-L59\n. Moving the grouping discussion to #286.\n. Per discussion in #286, this is getting pushed to post-6.0.0. Any binaries related questions should move back here.\n. @sethlu do we still want to support this option in electron-packager?\n. OK, I will prepare a PR soon to prevent binaries from being passed via the osx-sign option.\n. For the moment, I want to get a consensus on what the API/CLI params should look like, so I did the docs first.\n@positlabs per https://github.com/electron-userland/electron-packager/issues/285#issuecomment-194389616, I don't know what bundle-identifier is. That doesn't seem like the same as identity?\n. > Do we then feed the osx-sign object into electron-osx-sign?\nThat was the plan, yes.\n\nAlso, we could try the same mechanism for modifying the various plists' items in OS X builds?\n\nThat sounds good too, but that should wait until after 6.0.0 is released.\n. > I think ideally we would copy the whole osx-sign object and pass it to electron-osx-sign without modification. Maybe this warrants an update to osx-electron-sign?\n:+1: Keeping the logic in electron-packager minimal is a goal of the project.\n. I'm not a fan of having parameters be more than one type, but we've already got a precedent with tmpdir. As with tmpdir, there would need to be special handling of the argument in cli.js (because minimist can't handle an argument that's more than one type).\n. I updated the description of osx-sign in both the CLI and API docs. Let me know if those changes don't accurately reflect the discussion.\n. ...yeah, why not. It's not too much effort. I really want to feature freeze master so 6.0.0 can get out the door.\n. @positlabs do you mind writing the docs here (or in a branch of this branch)? I won't be able to get to it until tomorrow at the earliest.\n. This is how I'd do it:\ngit clone https://github.com/electron-userland/electron-packager\ngit checkout osx-sign-single-param\n. I would prefer it if we have an abbreviated version electron-osx-sign docs (don't say what the defaults are, for example) and make it obvious that for more information, you need to look at the other module's docs. I think I already did that in the readme.\n. > However, we are not taking into account that a mas distribution needs signing before going submitted.\nWe should address this before this gets merged.\nRe: the verbose flag: I think your DEBUG change will be sufficient, I don't think we need to pass that in explicitly.\n. @positlabs I'll merge it tomorrow. Looks good so far. Do you want to put your initial implementation in there as well?\n. > Would there be any reason to allow the user to override platform or app if those options are included in osx-sign? Should we throw a warning/error if they attempt to? Or should we add logic to allow it? I vote we warn. If they want to really fiddle with the options, they can use electron-osx-sign directly.\nA warning would be sufficient.\n\nSo I think what I want to do now is let @positlabs work on their branch (based off of mine), and when they're done, I'll merge that into this branch in a separate PR, then rebase + merge the whole thing into master.\nYep, I know it's pretty convoluted.\n. I think it's just another warning.\n. I assume you mean https://github.com/positlabs/electron-packager/tree/osx-sign-single-param\nYou may want to run $(npm bin)/standard.\n\nIs there a way we can run this copy op before signing?\n\nI don't see why not, from a conceptual standpoint. Try it and see if any tests fail.\n. @positlabs is the binaries signing option the only thing holding up your branch? If so, I'd like to defer that to another PR.\n. > I can add a warning against it, and comment it out of the docs. I agree it shouldn't hold up v6 any more.\n:+1: Thanks for doing that. I'm going to (probably tomorrow) merge your branch into mine, squash your commits, and do some documentation fixes before merging this PR into master, and finally release v6.0.0.\n. In addition to documentation tweaks, I had to revert some syntax/API that didn't exist in Node 0.12, and added some testcases.\n. According to your CLI arguments, you're building for Electron 0.34.1, not 0.36.8.\nThere's no other message than \"A Javascript error occured in main process\"?\nCan you build and run a Linux app?\nAs an aside, have you gotten any Electron-based app (like Atom) running under Wine? I've tried unsuccessfully a few times.\n. > Atom said that he wants windows vista or later.\nRight, you can set up Wine so that it declares itself, as, for example, Windows 7.\n. If Linux 64bit works, 32bit will likely work as well.\nI can't test in a non-Wine Windows environment for several hours.\n. Just so that I understand you correctly (and so I can reproduce this when I have access to a Windows environment), I have to:\n1. git clone https://github.com/atom/electron-quick-start\n2. npm install\n3. npm install electron-packager --save-dev\n4. Add other_file.js and require('other_file') it (without a relative path?) in main.js\n5. electron-packager ./ QuickStart --platform=win32 --arch=x64\n6. Run app in Windows environment\n. Until 6.0.0 is released (subscribe to #266 for updates), you need to install electron-packager from its git repository. For instructions on how to do that, please see the npm install documentation for packages using a \"git remote url\".\n. Thanks for the pull request! My thought is that instead of more examples, that we provide a tutorial, linked from the readme (because the readme is far too long as it is), which builds off of the Electron tutorial - that would be a better fit for your changes. Let me know what you think of this proposal.\n. Adding more example lines to the readme just to illustrate that there is more than value for a parameter seems a little excessive to me. Why not add two more examples for the different arches for Windows/Linux as well?\n. if you want to deal with the common use case, the most obvious one is to just have one example showing --all. I imagine more people want to build for all platforms/arches rather than a specific one.\n. Yes, I am worried about space.\n\nI didn't know there even was an --all option!\n\nThat you didn't know about --all (it's documented in the readme, probably about halfway down) illustrates my assertion that the readme is too long. See also: #275.\n. I decided to go a different way with the readme. Thanks for reminding me that I needed to update the CLI example.\n. Definitely do not bump electron-packager's version. The next version is 6.0.0 (see #266 for status).\n. Looks good! Per the pull request guidelines, please squash the commits and I'll merge.\n. Could you write a failing testcase for this? It would help whoever works on fixing this bug.\n. If that's the answer, then I'm changing this from a bug to a (solved) question.\n. As of version 8.0.0 it should look something like\nelectron-packager . BTCPlus --asar.unpack=\"/node_modules/node-notifier/vendor/**\"\nPlease keep in mind that an issue that was last commented on 2 years ago may not be accurate anymore since the major version of Electron Packager has changed several times.. > Im looking at their npm page, It says --unpack-dir but thats not working either\nWhat NPM page?\n\nDid not work.\n\nI mistyped, I think you need to remove the leading slash:\nelectron-packager . BTCPlus --asar.unpack=\"node_modules/node-notifier/vendor/**\"\nIf you need more assistance, please use one of the community forums. The issue tracker is primarily used for bug reports and feature requests.. It seems like it's because asar uses absolute paths. This works:\nelectron-packager . BTCPlus --asar.unpack=\"**/node_modules/node-notifier/vendor/**\". If you need more assistance, please use one of the community forums. Support for node-notifier is outside the scope of this issue tracker.. Thanks for updating #244!\nI need to remember to add both PRs to the NEWS file before the next release.\n. I don't like calling it \"changelog\" because it has different meanings to different people. I'd rather keep it as \"news\" or call it \"release notes\".\n. It's not that unusual. Compared to other projects, which use History.txt and RELEASES.md, among other filenames, NEWS is one of the more common naming schemes.\n\nYou might consider linking from the readme so its findable.\n\nYep, that's the plan.\n. Thanks for reporting!\n. I'm not clear on what you're asking. Could you please write some explicit steps to reproduce the behavior you're seeing (vs. what you expect)?\nThis is what I did:\nshell\ngit clone https://github.com/atom/electron-quick-start && cd electron-quick-start\n$EDITOR package.json # Added `\"productName\": \"Electron Quick Start\",` (minus the backticks) under the \"name\" key\nnpm install\nnpm install --save-dev electron-packager\n$(npm bin)/electron-packager . --all\nExpected: CFBundleName and CFBundleDisplayName are set to Electron Quick Start, not electron-quick-start.\nActual: In Electron Quick Start-darwin-x64/Electron Quick Start.app/Contents/Info.plist, the relevant key-value pairs look like this:\nxml\n    <key>CFBundleDisplayName</key>\n    <string>Electron Quick Start</string>\n    <key>CFBundleName</key>\n    <string>Electron Quick Start</string>\n. One of the things that we could do is strip out any non-word-or-whitespace character from generated filenames.\nWhat I'm trying to avoid is a pages-long list of parameters and/or possible package.json keys. It's bad enough already.\n. I am not opposed to this idea, but it will require a major version bump.\n. To be clear, I was not endorsing forcing Mac .app folders to always be set to package.json's name. I do forsee bugs being filed in the future about how certain names cannot be generated because the filesystem is not Unicode-based.\n. > And also, a name that includes spaces of an executable file may make problem.\nWhen would spaces in an executable name be a problem?\n. It's more likely that /path/to/Electron, Quick, and Start.exe would be the options, but when would you be using a shell in Windows (or any other OS) and not know to quote arguments with spaces?\n(By the way, the version of electron-builder I'm using generates installer files for Windows that are named $APP_NAME Setup.exe, which wouldn't surprise me if that was the default for NSIS.)\n. > Nearly all Mac apps are not meant to be started up from the command line. If you're building one that is, I think it's in your lap to either not use spaces or document for your users how to quote spaces.\nAgreed.\n. FYI, there's a different bug to strip special path characters from generated filenames: #308\n. @z-ax See: https://github.com/electron-userland/electron-packager/blob/master/docs/api.md#version-string\n. We've just added a 0.37.4 fixture via #301. Would you mind adding a testcase using that test project to make sure that default_app.asar is deleted from an Electron release where it initially exists?\nOnce that's done, I'd like to merge this PR and release 6.0.1.\n. @kevinsawicki the basic tests run against 0.35.4 or so, I believe due to the Mac App Store target platform.\n. I would rather have a test for Electron versions both before and after 0.37.4, to ensure both cases are covered.\n. I want #298 to be merged before a new release (because it suffers from the same problem).\n. Two workarounds exist, until 6.0.1 is released:\n- Install electron-packager using the GitHub syntax (see npm install --help)\n- Package your Electron app using a version of Electron earlier than 0.37.4, for example 0.37.3.\n. I suggest creating a new (separate) test fixture project just for test/mac.js that has the Electron version set to 0.37.4, then add a testcase for the new .icns behavior.\n. It looks like you didn't specify which target platform(s) you're building for. Take a look at our guide to using electron-packager from the command line to see how to specify that.\n. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n-  Which version of electron-packager are you using?\n- What CLI arguments are you passing? Alternatively, if you are using the API, what parameters are you passing to the packager() function?\n- What version of Electron are you building with? (The value of the version parameter, or the specific version of electron-prebuilt in package.json)\n- What is the host platform are you running electron-packager on? Please supply name, version, and architecture.\n- What target platform(s)/architecture(s) are you building for?\n- Is there a stack trace in the error message you're seeing? If so, please paste it (preferably in a preformatted block).\n- Please provide either a failing testcase or detailed steps to reproduce your problem.\n. Since that starter is several months old, it may not be compatible with a recent version of electron-packager. As I asked above, which version of Electron are you building with?\n. In the exception, there's no reference to app code, and you're using an old version of Electron, so I don't think this is an electron-packager problem.\n. The version behavior is described in a few locations:\n- the command line usage\n- the example\n- the API docs\nThat being said, I would happily review a PR that clarifies the docs. I don't see a need for this particular PR.\n. That may be valid, but setting the version to a blank string is a really bad idea.\nPlease rename the PR and write a testcase for this change, and I will reopen this issue.\n. Thanks for filing an issue! This bug has already been fixed in master, via #301. We're waiting for another fix related to the Electron 0.37.4 release to upload a new version of electron-packager to NPM (see: https://github.com/electron-userland/electron-packager/milestones/6.0.1). Until that happens, install electron-packager using the Git URL.\n. Oddly enough, Electron 0.37.4 made a bunch of backward-incompatible changes relative to electron-packager (and we hope to get a release out soon that is compatible with it, see the 6.0.1 milestone for details). Does it work with Electron 0.37.3?\n. FWIW, I can't reproduce this with electron-packager 6.0.0, host platform linux, with the same command line.\n. I assume the path in your error message is your temporary directory? When you run electron-packager to build with Electron 0.37.4 and it fails with the win32/x64 target, are there any .exe files in /var/folders/sd/nllql7z51k73kttbnbfz26q95ppffy/T/electron-packager/win32-x64/App-win32-x64/? If so, what are they?\n. I wonder if it has something to do with async + the order in which files are copied? (This is just a guess at this point.)\nI don't have a Mac on which to debug this problem, can another community member look into this? At minimum, I'd like to know if someone else can reproduce the behavior (on OSX or otherwise).\n. My suggestion is for someone to file a bug in the Electron project to ask for checksums on their files when they generate releases.\nSee also: https://github.com/electron-userland/electron-prebuilt/issues/51\n. See also: https://github.com/electron-userland/electron-download/issues/19\n. As a workaround, you should set productName in package.json to test-project (or something without a slash).\n. The options for fixing this bug are:\n- Filter out special path characters (e.g., : and \\ on Windows, / on OSX/Linux) when constructing paths with appname\n- Remove special path characters when constructing paths with appname\n. sanitize-filename looks like a good choice to integrate into electron-packager.\n. I made a first cut at fixing this in #455. It's a bit more involved than you'd think, particularly since there are a lot of files that use the Electron app's name. (And I want to have unit tests for as much of it as possible.)\n. Thanks for filing an issue on this. It's been fixed in master (#300/#301), but we're waiting for another pull request (#298) to get merged, which is also affected by Electron >= 0.37.4.\nTwo workarounds exist, until 6.0.1 is released:\n- Install electron-packager using the GitHub syntax (see npm install --help)\n- Package your Electron app using a version of Electron earlier than 0.37.4, for example 0.37.3.\n. @liuhong1happy this is a different problem than this issue describes, please read the section in our documentation on building Windows apps from non-Windows platforms.\n. @tkambler It should work for both Electron >= 0.37.4 and Electron <= 0.37.3 (there are unit tests for both), as of the released electron-packager 6.0.1.\nA small, reproducible testcase is requested (you can use a fork of electron-quick-start) so that someone can debug the issue with a reliable way to make it fail.\nOnce you do that, please open a new issue, following the issue template directions.\n. @MarshallOfSound What CLI arguments are you passing? Alternatively, if you are using the API, what parameters are you passing to the packager() function?\n. @MarshallOfSound What version of electron-packager are you using? I cannot reproduce this, host platform is Linux, running electron-packager from git master, building with Electron 0.37.4. (I don't have access to a Mac on which to test.) I have verified via sha256sum that my icns is the same as $APPNAME.app/Contents/Resources/electron.icns.\nThe testcase comment I made earlier applies here as well.\n. > The project is here: https://github.com/MarshallOfSound/Google-Play-Music-Desktop-Player-UNOFFICIAL-\nHaha, I knew that username looked familiar.\nCould you see if sha1sum src/assets/icons/main.icns and sha1sum \"dist/Google Play Music Desktop Player-darwin-x64/Google Play Music Desktop Player.app/Contents/Resources/electron.icns\" yield the same checksum?\n. I want to say I've seen a report of this before (and it was some sort of icon caching problem), but I can't seem to find the GitHub issue at the moment.\n. Thanks for filing an issue on this. It's been fixed in master (#300/#301), but we're waiting for another pull request (#298) to get merged, which is also affected by Electron >= 0.37.4.\nTwo workarounds exist, until 6.0.1 is released:\n- Install electron-packager using the GitHub syntax (see npm install --help)\n- Package your Electron app using a version of Electron earlier than 0.37.4, for example 0.37.3.\n. You're really lucky I hadn't published 6.0.1 yet. :smile:\n. Yep. I documented that in the readme, see the new paragraph under Building Windows apps from non-Windows platforms. I'll add a note to NEWS as well.\n. Looks like this means that we don't have to force users to install MSVCP120.dll anymore. (Even though that wasn't quite clear in the linked PR, sigh.)\n. Thanks for filing a pull request! Per our contribution guidelines for pull requests, since you're adding a new option, it needs to be documented in both docs/api.md and usage.txt.\nThat being said, I'm beginning to think that we should have a --download flag that works like the --osx-sign or --version-string. cache, mirror, and strictSSL would be sub-options.\n. > That being said, I'm beginning to think that we should have a --download flag [...]\nIt bugged me enough that I wrote a PR for it this weekend: #320\n. node-rcedit 0.4.0 required a certain DLL to also be installed, see the readme for more details.  However, in 0.5.0 it seems that they reverted this (https://github.com/atom/rcedit/pull/11). I'll release 6.0.2 shortly to update that dependency.\n. The pull request that should fix this is #315.\n. Perhaps the problem is that you're running wine as root (I hope, because you're running in a docker container). We run rcedit in our own Travis CI tests (and in my personal app's Travis CI tests), and I haven't seen that particular error.\n. I am waiting for tests to pass before I release 6.0.2 - in the meantime you are free to npm install electron-packager from git and see if that works for you.\n. @develar I looked into how fs-extra implemented copy, because you didn't change any of the options passed. It turns out that it's just a wrapper for ncp. Could you explain how this change would fix all the issues you mention?\n. Hm. I just realized that it uses a forked copy of ncp. But just because it may have some fixes in it, doesn't necessarily mean that all of those issues are resolved. We also don't have any tests for #150 or #213. If you want to assert that those are resolved, please write testcases for them.\n. By the way, it might be better to squash your commits when the PR has been approved. It makes it easier for reviewers to see what changed, especially now that GitHub has added features to the pull request UI.\n. I'm not so sure the ncp issue you mention is fixed in fs-extra. If it is, it wasn't obvious from the commit log. My reading of his comment was more along the lines of \"here's a maintained version of ncp\".\n. @jprichardson the issue I'm unsure that it fixes is https://github.com/AvianFlu/ncp/issues/98. Another look through the history (GitHub does not make that easy due to the multiple renames) indicates that it may be the same as https://github.com/jprichardson/node-fs-extra/issues/98 (coincidentally enough)?\n. @jprichardson @develar OK, sounds good to me. At minimum, it gets rid of an extra dependency (I've already gotten rid of direct production dependencies on mv, rimraf, and mkdirp in favor of fs-extra since this PR was filed).\n@develar once you rebase, LGTM.\n. @develar FYI your build failed, seems you missed some ncp references.\n. It's been a while since we've supported 0.10 officially. I think I had to remove support for it in Travis CI for some feature, and to my knowledge there have been no complaints. At any rate, I filed a PR the other day that definitely removes support for Node < 4.0. So we're OK :smile:\n. Removed #151 from the issue summary.\n. @develar squash and fix the commit message to omit #151 and I will merge.\n. That \"squash and merge\" feature in GitHub's UI is pretty great. Won't work all the time, but worked well in this instance.\n. I'll merge this in a couple of days (after I obviously fix some merge conflicts and squash) if there are no objections.\n. The next release will be 7.0.0.\n. This is in a better spot to be reviewed now, using the normal UI.\n. Without knowing what your package.json file looks like, my guess is that you should be doing two things:\n1. ignore uses JavaScript's regular expression syntax - what you're doing looks like a mix of regular expressions and glob syntax.\n2. I think instead of all of the node_modules items in your ignore parameter, you want to use the prune parameter instead.\n. > I don't really want to install all the needed deps again before coding after making a release.\nI doublechecked the code. Unless you disabled tmpdir (and even then I'm not sure of that case), that shouldn't happen.\n. It works most likely because, for example, node-modules/eslint-foo is matched by node_modules/eslint.\nThe electron one should not be necessary, per the docs:\n\nThe out directory is ignored by default, along with the electron-prebuilt and electron-packager Node modules, the .git directory, and node_modules/.bin.\n\nRegarding:\n\nI even saw a merged PR that fixes the slashes on Windows for ignore.\n\nI believe you're referring to this?\n. My point was that the ignores you have that end in * don't actually work, other ignores in your list are doing their job. But that is tangential to the Windows problem.\nWhen I get some time, I need to set up Windows-based CI.\n. Seems odd. It is literally running npm prune --production in the staging area for the package.\n. If npm prune --production isn't working, I think he has bigger problems than the ignore parameter.\nI think I'm going to close this since this seems to be a problem with npm, not electron-packager.\n. Both PRs have been merged.\n. I don't know how this should be resolved. There were a fair number of users who wanted #195 resolved, so I'm not currently inclined to revert it.\n. OK, since there's nothing to do on this end, I'm going to close the issue (and hope that users who have this issue can search for it).\n. If anyone wants to implement this, keep in mind that you likely can't create symlinks on Windows.\n. This is a reasonable request. Something to note for the person who decides to work on this: while camelCased identifiers are idiomatic for JavaScript APIs, they are not for the CLI flags. So, in cli.js there would need to be either a mapping or a function which consistently converted between the two styles. (The latter of which would obviously need unit tests.)\nThe other note I would make is that there should be a period of time where both versions of the converted APIs/flags are supported, and the old parameters noted as deprecated in the NEWS file.\n. Another thing I am reminded of as I clean up some code is that a lot of the options / sub-options (such as version-string) are passthroughs to other modules. So in addition to this issue, I would suggest also filing issues in other repositories, for example, node-rcedit (to continue with the example).\n. #410 reminded me of this issue. A quick search pointed me at camelize.\n. Coveralls doesn't seem to work with Appveyor PR builds, so I'm going to disable that particular feature.\n. > But you can have also access rights here. :)\n@stefanjudis yeah, that's fine. I was just trying to have as little permissions as possible.\n. Hmm, I could have sworn I saw that electron-builder had an Appveyor URL with electron-userland in it. I must have been seeing things.\n. @stefanjudis I've got it. I had to create a new account :disappointed: \n. Sigh. Not really. I'll work on it a bit more tomorrow.\n. @stefanjudis so what I did was I just created a new electron-packager project. If you want to save your existing build results and change their URL, we'd have to ask Appveyor support to move it. Otherwise I can just create a new electron-builder project in the electron-userland account. In theory you should be able to see and administrate the electron-packager project (and if so, you'd also be able to do so for the moved/new electron-builder project), but I've been having problems with the two accounts, since they're both associated with my GitHub account, so I can't verify that.\n. @develar why are you adding additional CI services to electron-builder? Are you replacing Travis CI?\nI didn't approve them because I didn't know what they were going to be used for.\nI didn't see an issue in electron-builder about it.\n. I just don't like adding services without a reason. That can get rather dangerous.\n. Since it's already done, I just want to point out that it would be better if you used a fork of electron-builder to experiment with new CI providers before asking to add new applications to the org.\n. @develar yes, I understood what \"experiment\" means, my point was that you can experiment on your own fork of electron-builder before deciding which CI providers to use on the main repository (which is what I did with electron-packager + AppVeyor).\n. Weird. All of the bug reports I've seen where wine wasn't installed threw an ENOENT related exception.\nRegardless, I would be happy to review a PR that makes the exception a bit more user-friendly.\n. Would you mind trying running the git master version of electron-packager? There are some refactored areas of code which may affect this. (Although this is a bit of a long shot.)\n. Hmmm. Would you mind doing some console.log based debugging to see where it stops executing code? I don't have a Mac on which to reproduce this.\n. - Does node.dll exist in the same folder as abe.exe, when you create the app bundle on OSX?\n- Does node.dll exist in the same folder as abe.exe, after you copy the app bundle folder to Windows?\n. It is not self-contained - according to the Electron developers in https://github.com/electron/electron/issues/914, this is not currently possible.\n. I've got it.\n. I also added some clarifying text to your advisory (underlined) because the download cache is configurable.\n. @feross I ran the command and am attempting to verify it:\n``` shell\nmkdir /tmp/testcase\ncd /tmp/testcase\nnpm init .\n[...a bunch of user input...]\nnpm install electron-packager@6.0.2\n```\nI should get a warning message with the issue URL, right? (I am not.)\n. I have to be AFK for a bit, @feross I've (re?)added you to the npm list so you can figure out what's going on here.\n@montogeek that is helpful for future testcases, but my question still stands.\n. Does npm deprecate give any output? I ran it twice, each time it took ~a dozen seconds to run and then exited.\n. It's been a few weeks, so closing. I think the deprecation notice is sufficient.\n. Apparently you can, I searched the Electron documentation and there is a programmatic way to set it, please read http://electron.atom.io/docs/v0.37.6/api/chrome-command-line-switches/.\nIf you want your users to pass a proxy flag, you're going to have to parse the arguments yourself and add it to Chrome using the method described in the Electron docs.\n(Strictly speaking, this is not an electron-packager specific question.)\n. I don't understand. This documentation seems to be for the asar script, not using electron-packager directly.\n. I think this a bit too verbose. A sentence that states that you can use glob syntax to specify multiple directories (and perhaps one example of this) is sufficient.\n. That's better, thanks.\nRegarding **/{sub_dir1/sub_sub_dir,sub_dir2}/*:\n- Is the trailing /* necessary?\n- Would this pattern also match /<dir>/parent_dir/sub_dir2?\n. As it currently stands, this PR has too many unrelated changes to it, so I'm not inclined to merge it until just the glob syntax changes remain. For more information on our pull request policy, please see: https://github.com/electron-userland/electron-packager/blob/master/CONTRIBUTING.md#filing-pull-requests\n. electron-packager doesn't do anything to change the menu behavior. I looked upstream at Electron's issues, and according to https://github.com/electron/electron/issues/3787#issuecomment-164334741 this is by design.\n. See also: https://github.com/electron/electron/issues/4227\n. If someone could link to an Apple developer page that specifies what the valid characters are for that key, that would be helpful for whoever fixes this.\n. I'm closing this issue then.\n. Any particular reason why?\n. I'm aware of how semantic versioning works. I'm pretty sure the last time I looked at npm list for electron-packager, there were several packages with multiple versions installed.\nSo the only reason is to have it be the same version as electron-builder?\n. Fair enough. In the future, putting that in the PR summary would be recommended. (I still need to figure out the best thing to put in the pull_request_template.md.)\n. This is blocked on #340.\n. I'm not sure about the Windows change. If it's only a problem with Squirrel.Windows shortcuts, can't electron-builder deal with that?\n. @develar By the way, I found out last night (via node.green) that you don't need 'use strict' to use const.\n. @develar you should look at http://node.green/\n. Oh, I read node, not v8.\n. CC: @feross (since there's an obvious connection there)\n. I was thinking of using the custom .eslintrc just so I don't have to install standard globally. I already have eslint installed globally for other projects.\n. Editor integration is easier that way.\n. > Unexpected comment inline with code.\nI have no problem with this one.\n\n'cb' is already declared in the upper scope.\n\nThis one is reasonable. We should avoid shadowed variables.\n\nUse the global form of 'use strict'.\n\nFor some reason, I couldn't get this one to show up when I was messing with it last night.\nThe rest we should disable.\n. I decided to go with DependencyCI because it's based off of the open source libraries.io.. Ha, nice. :+1:\n. I ran electron-packager 7.0.1 on Debian 8.4 and I cannot reproduce your results exactly. This is what I get:\nContents/Frameworks/Electron Framework.framework/Electron Framework -> Versions/Current/Electron Framework\nContents/Frameworks/Electron Framework.framework/Versions/A/Electron Framework\nContents/Frameworks/Electron Framework.framework/Versions/Current/Electron Framework\nThe first entry is a symlink (as denoted by the arrow). There would need to be some more investigation, but it looks like there's only two copies of the framework.\n. Hmm. Now I wrote a testcase for this and I can't replicate any of it.\n. I'm going to close it, since I wrote a testcase that does not fail.\n. Which version of electron-packager previously worked for you?\nCould you try running the following in your test-electron directory and paste the output here?\nbash\n$(npm bin)/electron-packager . --out=dist --prune --asar --overwrite --all\n. One of two things may be happening:\n1. app-version does not like 0.0.0 as the app version for some reason (that would be a \"bug\" in code outside of electron-packager, most likely)\n2. There's a bug in generator-electron.\n. Try running the same command, but with --app-version=0.0.0 at the end.\n. @gaccawi OK, that makes sense. app-version for win32 targets requires node-rcedit, which the readme states requires wine installed on OSX/Linux. That's probably the error you got when you ran npm build, but the stderr error output wasn't printed. I suggest seeing if the generator-electron project can fix the output problem.\n. I think I know what the problem is. What version of Node are you using?\n. That would be why. We do not support Node 0.10 or 0.12, only 4.0 and above (as of 7.0.0). We've documented this in both the readme and package.json, in addition to the NEWS file.\nI would advise setting the engine-strict NPM config option to avoid problems like this.\n. Thanks for filing an issue. The problem you describe has been fixed in version 7.0.1, released on 2016-04-21.\n. I can reproduce this.\n. For any future commenters: yes, we know it's reproducible, we're just waiting on a fix now.\n. The download being slow is a different issue and unlikely to be related to electron-packager. I would suggest troubleshooting your network connection, in particular to github.com & its CDN.\n. This sounds like a duplicate of https://github.com/electron-userland/electron-packager/issues/323.\n. I'm closing this as a duplicate, then.\n. Added note to the 6.0.0 release notes.\n. @develar I took a small break from reviewing PRs. I'll try to get to it this week.\n. Sorry for the delay, work and real life got in the way.\n. I've never heard of --dev-region. You probably want to use extend-info.\n. > The asar readme doesn't mention this option\n\ud83d\ude1e Someone should fix that.\nAs a general comment to this PR, I am not opposed to this (given that there are docs added and possibly tests), but I'd rather have all of the asar options work like version-string, osx-sign, and now download, that is, grouped as sub-parameters. Obviously this would mean a major version bump, since there would be a breaking parameter change to asar.\n. It would be nice if asar-options was merged into asar - that is, asar can be either true or an object of options.\nAlso,  you should keep the existing asar-unpack* documentation and mark it deprecated (as I've done for strict-ssl, etc.)\n. There should also be tests to make sure that asar options override the deprecated asar-unpack, etc. options.\n. Continued in #417.\n. Looks good, I think this just needs at least one unit test.\n. The test logic looks OK at a glance (I'll look at it in more detail tomorrow), but I'd prefer if it had its own test instead of tacking it onto another test.\n. Sorry about the delay, work & real life got in the way.\nI had merged #351 before this one, so if you could take care of the strict changes in test/hooks.js, I'll merge.\n. Amusingly enough, this morning I did something similar. The only difference is that the require statements are const:\nhttps://github.com/electron-userland/electron-packager/tree/after-extract-hook\n. I added a PR for my branch (#403). I'll wait for CI to run and then merge it.\n. Your package.json differs from your output. scripts.build says it should run electron-packager . --all but according to your log it ran electron-packager . --version=0.36.9. The latter will not work because you need to specify either --platform and --arch (both require values), or --all.\nIf you run the command like so:\nshell\n$(npm bin)/electron-packager . --version=0.36.9\nIt should tell you that it's missing the parameters I mentioned above. I don't know why running npm run commands don't show that.\n. In other issues I have seen references to the electron-rebuild node module. Perhaps looking into that will help?\n. I think it's a node_modules require path problem. See #217.\n. I'm out of ideas then. Perhaps someone else can help.\n. It would help others if you had a minimal testcase (perhaps based on https://github.com/electron/electron-quick-start) with detailed instructions for how to reproduce this problem.\n. Since the original issue reporter has not responded to the request for additional information in over two months, I'm going to assume that they either found the answer in another manner or decided not to pursue this issue. If I'm incorrect, they can respond with a minimal testcase as mentioned in an earlier comment, and I'll reopen.\n. Would this only be for --all, or would this behavior happen for --platform=all and/or --platform=win32?\n. I'm inclined to agree with @develar on this one - I would prefer it if someone contributed a patch to show a better warning when Wine is not installed.\n. I think the correct approach might be to skip these builds (with warning messages) but still fail at the end (process.exit(1) or however you do it in Node) to make it obvious that it didn't fully complete. Then the user (or the script) can decide what to do. I'm less sure of a better way to handle that in the API case.\n. I've added a better error message, but I couldn't figure out a good way to do the \"keep going if wine isn't found but error at the end\", given that wine is called so late in the win32 transform code.\nOf course, others are welcome to try. There might end up being a refactor.\n. That is an interesting idea, however we infer app-version from the Electron app's package.json, so there will very nearly always be some metadata to update the app's executable with.. My opinion is that the way that Electron Packager is currently designed prevents us from implementing \"warn instead of fail\". If it was completely refactored to use Promises instead of the run-series module, then I think this would work.. @rahatarmanahmed I'll think about it. I'm currently considering this an edge case, because\n\nI've come around to the opinion that it's generally better to run tools like Packager (and Electron Forge, for that matter) where host platform == target platform\nthere's a very, very small percentage of Packager users who wouldn't want their Windows Electron executable customized for their app\n\nI'm concerned about adding increased complexity. @rahatarmanahmed do you mind adding caveats to the readme for that package, like:\n\n\nThe icon will not be set\n\nthe application metadata will not be changed from the Electron defaults\n\nBasically, I can just imagine tickets being filed here saying \"I used electron-packager-dummy-wine and my icon isn't showing up\". I think I'm going to close this. There's a workaround by using electron-packager-dummy-wine.. Is create-windows-installer something you made or part of another module?\nIs there a log file or debug output that you can enable?\n. Could you run the electron-packager command manually and paste the output?\n. It sounds like this is not a bug in electron-packager, so I'm closing this issue.\n. This doesn't cross-compile native modules, right? I'm worried that users will imply that feature exists.\n. Just to be clear, I am against reimplementing electron-rebuild inside electron-packager just to avoid dependencies on nslog and babel-runtime - on the other hand, they are free to reimplement in their own (maintained) module and then submit a PR here to integrate with that.\n. @MarshallOfSound is this now \"Request: plugin for electron-rebuild support\", now that #448 is merged?\n. Releases are feature-driven. Here's the plan for the next release: https://github.com/electron-userland/electron-packager/milestones/7.6.0\nHopefully by the end of the week? (As always, no promises.)\n. For reference, this should be closed when the electron-rebuild pull request has been merged & released, and a link added under \"Related\" in the README, preferably directly to a description of the plugin.\n. @deepak FYI, @MarshallOfSound has an active branch to refactor electron-rebuild to minimize the number of dependencies that is required. This code is based on Electron Forge's implementation, which also only rebuilds the native modules that are required by dependencies in package.json. We recommend using Electron Forge, particularly if you're currently using Electron Packager (we are also working on a migration path from other Electron build tools).. Update: electron-rebuild 1.5.0 has been released with an afterCopy hook for Electron Packager. I'll close this issue once there's instructions on how to use it in the rebuild README.. @unindented I was hoping @MarshallOfSound would write it \ud83d\ude04 . @unindented I didn't realize he'd already made a PR, here's my update of it: https://github.com/electron/electron-rebuild/pull/152. Merged! https://github.com/electron/electron-rebuild#how-can-i-integrate-this-into-electron-packager. To quote @kfranqueiro in https://github.com/electron-userland/electron-packager/issues/164#issuecomment-154578802: \n\nFrom what I recall when I tested this (I run Windows 8 and tested on a win7 VM), you normally cannot even run electron-packager targeting darwin without admin privileges due to symlinks (which electron-packager detects and skips), and if you do run with admin privileges, yes, I've found it impossible to archive correctly without running into errors. I'm not sure if there's a way around it besides packaging for OS X on OS X or Linux.\n. Thanks for filing an issue. An example GitHub repository (possibly based off of electron-quick-start) would be helpful for someone who wants to diagnose what the problem is.\n. > why does electron-packager dereference symlinks when copying app code?\n\nI followed the git blame trail and found the reason: https://github.com/electron-userland/electron-packager/pull/42\n\nis there a known workaround I could use other than using a post build script to reinstate dereferenced symlinks? \n\nThat's currently the only way to do it. I would be happy to review a PR that adds an app copy option, per https://github.com/electron-userland/electron-packager/pull/42#issuecomment-103987791 (that defaults dereference to true, doesn't override ignore, etc...).\n. This should definitely be an option, given that there are two different cases for this. To avoid breaking backward compatibility, I would prefer that it would default to true. If there's enough support for it in the future, it can default to false.\n. You're running Node < 4.0.\nNode 4.0 or greater is required as of electron-packager 7.0.0, per:\n- the NEWS file\n- the installation instructions\n- the engines section of package.json\n. A few general notes:\n- This requires a major version bump.\n- I don't think this sets either parameter by default for the CLI.\n- This will conflict with #353. (And I want to take that one first because it should only require a minor version bump.)\n. Also looks like there's at least one failing test.\n. I've voiced my concerns about changing the asar default in #35.\n. The first thing you should do is use the latest version of electron-packager (at the time of this comment, that is 7.0.1).\nPer the issue template that is shown when you create a new issue:\n\nWhat is the host platform are you running electron-packager on?\n\nI assume it's OSX?\n. @davidferguson perhaps it has something to do with https://github.com/electron-userland/electron-packager/issues/323 ?\nThough that wouldn't explain the original reporter's problems.\n. I wasn't aware that Mac apps couldn't have hyphens in the name.\n. @davidferguson yes, I think your problem is different from @mashhoodr's problem.\n. electron-quick-start only has devDependencies. You can remove those quite easily from the bundled app by adding the --prune parameter when running electron-packager.\n. You're running Node < 4.0.\nNode 4.0 or greater is required as of electron-packager 7.0.0, per:\n- the NEWS file\n- the installation instructions\n- the engines section of package.json\n. As @develar mentioned, this is not an electron-packager bug, but rather an upstream Electron bug. However, I'm going to keep this open until Electron releases a new version.\n. Electron 1.1.1 was released 6 days ago, so I'm closing this.\n. Nope. Electron bundles have always needed package.json. Not sure why you added it to the ignore parameter.\n. Let's start with the basics, since you didn't provide an example (so there's not much to go off of):\nDoes your project have a package.json?\nIf so, is it in the same directory that you're running electron-packager in?\n. Since the original issue reporter has not responded to the request for additional information in about two weeks, I'm going to assume that they either found the answer in another manner or decided not to pursue this issue. If I'm incorrect, they can respond with answers to the questions posed, and I'll reopen.\n. I think this would be more suited for electron-osx-sign. Never mind, you have to add something to the plist, huh.\n. @sethlu Hmmm. Just so I understand correctly, is the team ID only needed for signing? If so, since you're already using plist to read from Info.plist, perhaps we should add team ID as an option to osx-sign and let electron-osx-sign handle all of it.\n. @develar avoiding writing to the plist twice just means you would pass the file pointer.\n. :+1: for more automation. How much do beginners actually need to know about the signing process?\n. @sethlu I like the idea that electron-packager sends the Electron version that it's going to package and electron-osx-sign will \"just work\". If you can make that work without too much effort on your end, that would be excellent.\n. You may want to read the CLI usage documentation. Your build command is electron-packager main.js main - main.js is not a source directory and you're missing which platforms/architectures you are targeting to build application bundles.\n. If I had to guess (since there's not much for me to go on), it's probably related to the module not being in one of the places it looks for modules. See https://github.com/electron-userland/electron-packager/issues/217\n. I'm not opposed to adding this feature in principle. Per the contributing document, it needs tests and documentation. In fact, I think the change broke at least one existing test.\nOn the other hand, I'm a bit hesitant because I think the documentation for specifying the Electron version is going to get fairly complicated.\n. If this PR is no longer wanted by the submitter, that would be good to know. I'm going off of what @develar is inferring, though.\n. I seriously doubt that electron-packager is going to support a top-level build key to package.json (@develar even linked to the reason why above). However, I would not be opposed to a discussion about adding a sub-key to config (e.g., config.electronPackager) which basically looks like the parameters for packager(). It would be wise to discuss that option before this PR gets merged.\n. Since there are outstanding problems with this pull request, and the original submitter has stated that they don't have time to work on it, I'm going to close this for now.\n. Just for posterity, someone else will need to debug this, as I don't own a Mac and my knowledge of OSX is limited.\nIt would be interesting to know if it happens on OSX 10.10 or earlier, or, for that matter, the new macOS.\n. Unfortunately, the first paragraph of my last comment is still true. Still looking for a member of the community to debug this for me.. Could we please refrain from \"me too\" comments? Please use the issue reactions on the issue summary instead, so that there are less (email) notifications generated.. Pretty sure this is https://github.com/jprichardson/node-fs-extra/issues/492.. The upstream bug seems to have been fixed in fs-extra 6, which was released with Electron Packager 13.. What do you think about adding a key to package.json instead? I know I don't want to deal with the idea of more dotfiles in my repositories if I don't have to. See: https://docs.npmjs.com/files/package.json#config\n. >  Is it somewhat standard for these builds to fail?\nDepends on the test. The tests that shell out to other programs (wine, OSX signing) have a tendency to time out and I don't know why. I need to fix the OSX errors (I hadn't seen that before, looks like Travis updated their OSX image?), but the Linux failures look legit (see my comment about the test).\n. @develar good to know, I'll mess with different OSX images on a branch (when I have time) and see what the execution times are.\n. @jasonfill I would suggest this:\njavascript\n{\n// ...\n  \"config\": {\n    \"electron-packager\": {\n      \"ignore\": [\"foo\", \"bar\"]\n    }\n  }\n// ...\n}\n. I don't want to have both options because of my reason in https://github.com/electron-userland/electron-packager/pull/376#issuecomment-221579694, and more importantly, because it's not obvious which option takes precedence if both methods are used, and will violate the principle of least astonishment either way. \n. Please tell me if this is correct: you're not able to set the icon using Electron 1.1.2 (but it works on 1.0.2 with the same electron-packager version). You're building for the Windows x64 target on a Windows x64 host.\nAdditionally, you have an appccs.ico file in the same directory as your appccs.png file.\nIf all of what I stated is true, it sounds like a bug in Electron rather than electron-packager. You should see if there's a bug filed there.\n. I'm going to mark this as invalid (since it is an Electron bug rather than an electron-packager bug).\n. It is really odd that the same version of electron-packager would produce different results with different Electron versions. I think a minimal testcase would be appreciated for someone with a Windows machine handy to confirm this issue.\n. @paulcbetts Perhaps it has something to do with the Windows toolchain change in Electron?\n. I guess I'm going to close this again, then.\n. I am unsure what you're asking. Perhaps it's related to #359?\n. Since the original issue reporter has not responded to the request for additional information in more than two weeks, I'm going to assume that they either found the answer in another manner or decided not to pursue this issue. If I'm incorrect, they can respond with answers to the questions posed, and I'll reopen.\n. This is a good issue to provide a minimal testcase (an easy way to do so is to base it off of electron-quick-start) so that other people can see if they can reproduce it.\nThat being said, I'm not convinced that we should be allowing Mac apps to be built on Windows...it only works under very specific conditions.\n. It's allowed. In the past two years since this bug was opened, I didn't disable cross-platform building. However, due to weird interactions with things like permissions, it may not work the way you'd expect when the host is Windows and the target is not Windows. To my knowledge, you should be able to build for all platforms on Linux hosts.\nExamples of problems building non-Windows targets on Windows hosts: #115, #164, #431\nPlease note that all of this is predicated on the condition that you are not using any native modules. If your Electron app requires native modules to run, due to Node limitations, you must have the same host and target platforms (and possibly arch, I can't remember at the moment) the same (i.e., build Windows targets on Windows hosts, Mac targets on Mac hosts, Linux targets on Linux hosts).. Unfortunately I don't own a Mac, so I can't debug this issue. What I would suggest is building the same Mac target app on both a Windows host and a Mac host, and look at the differences on a Mac.. Thanks for filing an issue, but there's not enough information here to see what the problem is. Could you provide a minimal testcase (you can use electron-quick-start as a base) so that someone can reproduce your problem?\n. Since the original issue reporter has not responded to the request for additional information in more than two weeks, I'm going to assume that they either found the answer in another manner or decided not to pursue this issue. If I'm incorrect, they can respond with answers to the questions posed, and I'll reopen.\n. Thanks!\n. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n-  Which version of electron-packager are you using?\n- What output do you get when you follow the \"Debugging\" section of our CONTRIBUTING document (linked when you filed an issue)?\nPlease also try removing the --ignore parameter, as it's probably not what you wanted anyway. It uses regular expression syntax, not shell glob syntax.\n. Does this just happen when you build a Windows bundle? Does it happen when you build a bundle for OSX or Linux?\n. In order to debug your problem further, we need a minimal testcase to reproduce your problem. Using the electron-quick-start repository as a base, could you please create a minimal Electron app that illustrates the issue you described, and post a link to it here?\n. Since the original issue reporter has not reported any further status update in over two weeks, I'm going to assume that they either found the answer in another manner or decided not to pursue this issue. If I'm incorrect, they can respond with a status update, and I'll reopen.\n. That's not the only answer. You can use the asar option to \"conceal your source code from cursory inspection\" (as it says in the application packaging tutorial for Electron).\n. The osx-sign tests need to be updated, since you added the version parameter.\n. @sethlu when do you expect to release a non-beta release of electron-osx-sign?\n. Looks like the osx-sign.binaries test needs to be updated, too.\n. @sethlu if you don't have any time to fix the test, could you check \"allow edits from maintainers\" (bottom right of the PR UI)?\n. @sethlu thanks!\n. @willin for your first problem, you specified the --out parameter without the path that you want your application bundles to be created in.\nFor your second problem, please see https://github.com/electron-userland/electron-packager#building-windows-apps-from-non-windows-platforms\n. @sethlu I think he just used --out which made opts.out evaluate to true, which explains the error:\n\nTypeError: Path must be a string. Received true\n. This doesn't fix #385.\n. This is by design. What is your reason for overriding that key with a value other than the app name provided to electron-packager?\n. @JimiC When you omit the name from the packager() options, it uses either productName or name keys in package.json. Perhaps what you want is a more robust version of specifying productName. If so, I will be happy to review a pull request to add this feature, as long as fallbacks (e.g., what happens if productName is not specified but name is) are clearly documented and tested.\n. I'll put my thoughts in more detail later, but I'd rather have a separate parameter specifically for productName as I think that can be a good cross-platform parameter that encompasses version-string.productName and CFBundleDisplayName.\n. GIven the current title of the issue summary, I'm resolving this as \"by design\". I think there should be a separate productName option that sets a human-readable name in the appropriate places.\n. I think you have two options:\n- Run a non-blocking subprocess of node that runs the express app\n- Spawn a thread that runs the express app - the main thread handles the Electron UI.\n. Not offhand, sorry.\n. Does the app work without packaging?\n. How do you start the packaged app? Double-clicking it in explorer?\n. Try running it via the command line and see if there is any output.\n. Can you try packaging electron-quick-start and see if that does the same thing?\n. It seems that there's something specific about your app that causes it to fail. You should create a minimal testcase (using the electron-quick-start app that you tested with as a base) to figure out what that is.\n. electron-packager uses a blacklist to determine what files get copied. Basically so long as your file doesn't match any of the regular expression patterns in the blacklist and it's in the application directory, it should be copied into your application bundle.\n. @paula23andrea since you're using a native module, you need to run electron-packager (and electron-rebuild) in Windows to build a bundle for Windows.. You need to specify the Electron version, either in the command line (--version) or in package.json (usually found in devDependencies as electron-prebuilt). The error message should be clearer about that.\n. > I guess the resolve dir being wrong is caused by node-resolve searching the pdw, not finding version in the package.json there, and then moving to parent and failing there (thus the dir sent to err.message is the parent dir)?\n\nThat is correct.\n. --version refers to the Electron version, not the application version (or the electron-packager version). For the application version, use --app-version.\n. Could you run that command outside of npm and post the output? NPM likes to hide the useful output.\n. You already have it installed, run node_modules\\.bin\\electron-packager . --all\n. You need to specify the Electron version either via --version in the command line or in your package.json, adding electron-prebuilt (with a version) to the devDependencies.\n. You want to clear your temporary directory (it failed halfway so it probably didn't clean up after itself correctly).\n. You want to look at asar, not electron-packager. This application only deals with packing (via asar, incidentally), not unpacking.\n. I'm not sure where you're getting 3.9.5 - that Electron version hasn't come out yet.\n. Are you trying to use a custom version of FFmpeg, as opposed to the built-in version?\n. I should be more specific, how are you using ffmpeg? Via some Node module? (If so, which one?)\n. Evidently, 3.9.5 is your NPM version.\n. The executable, as in ffmpeg.exe?\n. Without being able to see the code, and assuming that ffmpeg.exe exists in the output folder, my guess is that you need to figure out a way to reference ffmpeg.exe relative to the file that you're calling it from, as opposed to assuming it's always in the same place.\n. See https://github.com/electron-userland/electron-packager/issues/90#issuecomment-225498415 and reply here.\n. According to the BrowserWindow documentation, the icon argument needs to be a NativeImage, not a path string.\nSince this question isn't related to electron-packager, I'm marking it as invalid and closing it.\n. Creating a .desktop file shouldn't be necessary for setting an icon - it certainly doesn't for GNOME3. If it's required for Unity, I would be surprised.\n. Thanks for prompting me. I reworded it a bit to match the other entries and added some more caveats in https://github.com/electron-userland/electron-packager/commit/8e340292604e7709c7973ea208faaca2d3241198.\n. Clean out your output directories and try again. It seems you're hitting a copy recursion loop.\n. I mean, remove the app-darwin-x64 directory.\nAfter you do that, perhaps you should try to utilize the --out parameter (consult the docs for details).\n. I would have to look to be sure, but I believe that you're specifying an Electron version that does not define the electron module. (In older versions, you had to require many features separately.) Look through the Electron release notes to see when they added the electron module, and then specify a valid version greater than or equal to that as the value of --version.\n. It's Electron 0.35.0 that introduces the electron module.\nDon't modify the modules in node_modules unless you know exactly what the consequences are.  It's more than likely that will cause unexpected behavior that is difficult to debug.\n. I would avoid naming your main file electron.js, because that's the same name as the module you're requiring.\nWhat do you mean when you say it does not package for Darwin? Are you referring to your question in https://stackoverflow.com/questions/37561851/electron-packaging-with-electron-packager ?\n. The folders are there, they are just not shown in Finder. In OS X (or I guess as it's now called, macOS), when a folder has the suffix .app, it is considered to be a special folder that can be \"executed\" when you double-click it in Finder. If you want to see the contents of the app, either:\n- use the command line, or\n- in Finder, right-click (or hold down control and click) the application and select \"Show Package Contents\".\n. In order to assess the problem further, it would be very helpful to have a minimal testcase to reproduce the recursion bug and test potential fixes. Using the electron-quick-start repository as a base, could someone please create a minimal Electron app that illustrates the issue as described, and post a link to it here? (With the appropriate steps to reproduce, of course.)\n. I finally found some time to look into this. I believe the problem is because the Docker image links /tmp to the same directory as your docker-compose.yml file. Since that is the same directory as your source files, it will recurse over the temporary directory that Electron Packager creates, /tmp/electron-packager, in an infinite loop until the ENAMETOOLONG error is hit.\nTo avoid this problem, I suggest setting --tmpdir=false whenever you use Electron Packager in a Docker container, which disables using the temporary directory as a staging ground.. > It could add the temp directory in the working directory and automatically ignore it?\nI think the heuristics for that are a bit convoluted. I think I would rather see someone submit a pull request to detect if they're in a (Docker?) container, and if that is the case (and tmpdir is not explicitly set), set tmpdir to false. There would need to be extensive tests written so that it doesn't affect non-container (and possibly non-Docker, if this is a Docker-specific behavior) usage.. I also thought that pseudocode would work when I was investigating your example, except that it looks like Docker doesn't appear to do a hard link - I think it's a aufs mount or something. So it looks like a regular /tmp directory, but it's really the source directory. This is what I meant by convoluted heuristics.. FWIW I managed to figure out a non-hacky solution to this problem, and it is in the 8.5.2 release.. electron-packager does not currently support armhf mostly because we've been waiting for Electron upstream to update their build system to say precisely which ARM architecture they support (for example, what happens when they add support for ARM v8?). This has been tracked in #107 and https://github.com/electron/electron/issues/2343\n. I see you're also packaging for OSX. Does that work?\n. Is there any output if you try running the .exe in a console?\n. I can't debug this at the moment, but I would suggest putting console.log statements all over main.js to see what code did or did not get run.\n. Could you try moving your icon so that it's in the same folder as main.js? Also, I'm not sure the icon parameter of BrowserWindow accepts a .ico file.\n. I can't reproduce this. I just built my app with Electron 1.2.3, and in Foo.app/Contents/Info.plist, the value of CFBundleIconFile is electron.icns, and Foo/Contents/Resources/electron.icns exists as the file I passed in as the icon. Perhaps you did not save the .icns file with the correct image sizes?\n. Try changing the version in package.json from 0.0.0 to 0.0.1.\n. I can't reproduce either error.\n- Host platform/arch: Linux x86_64\n- Target platform/arch: Windows x64\n- electron-packager version: 7.0.4\n- Electron version: 1.2.3\n- Wine version: 1.8.2 (32-bit)\n- App versions tried: 0.0.0, 0.0.1, 0.0.2\nThis error also doesn't occur in our CI tests, which we have for all three platforms.\nThe error message comes from rcedit. The definition of the version string parser indicates that it should work.\n@simonroth does the error occur when you build for Windows x64? Are you sure $npm_package_version has a value in it?\n@adamweeks Perhaps make sure that your version only contains ASCII? I'm at a loss as to what else to recommend trying here. (I'm assuming you're getting the exact same Unable to parse version string error.)\n. I'm closing this issue then, as the original problem has to do with NPM and not electron-packager.\n. I wonder if this is related to #375, despite not being on OSX?\nCC: @jprichardson\n. Try an earlier version of electron-packager?\n. There are sometimes timeout related failures (which can be ignored), I'm not sure why.\n. You have to distribute the entire folder. There are related projects which create Windows installers for you (see the bottom of the readme for an example of one).\n. Per the README, on non-Windows host platforms such as OS X and Linux, Wine needs to be installed in order for the icon and other application metadata to be set on the Electron app executable.\n. Ah, I somehow missed the first line. Make sure wine is installed in a folder that's in your PATH. The error means that wine was not found in any of the folders listed in PATH.\n. @amtrek \nWe're going to need more information about your setup to help you, in particular:\n- What image sizes are included in your .ico file?\n. @matiastucci have you tried different and/or multiple sizes?\n. > Also, should I do --icon=icon.ico (without the quotes)?\nShouldn't matter.\n. (I assume you mean OSX.) If that is the case, it sounds like a bug with using rcedit under Wine, not electron-packager.\n. Since the original issue reporter has not responded to the request for additional information in over two weeks, I'm going to assume that they either found the answer in another manner or decided not to pursue this issue. If I'm incorrect, they can respond with answers to the questions posed, and I'll reopen.\n. Crap, thanks. I meant to do that last night.\n. I really wish there was a reasonable way to publish NPM from Travis.\n. Done.\n. I'm not sure why electron-packager would know about Windows.Squirrel delta packages. This seems like a question better suited for the electron-winstaller project.\n. What do you mean by \"old css\"? Does it shows the index.html page that's bundled with electron-quick-start, or an old revision of a CSS file that's on bar.dev? If it's the second one, I'm unsure how that's a bug specific to electron-packager.\n. Thanks! Could you add a test or two?\n. Also, a NEWS entry would be excellent! (In the \"unreleased\" section)\n. I'm :+1: for this PR in general, but my concern with it is an overall problem that we have in electron-packager (#325): we have two interfaces:\n- The command line\n- The API\nIt looks weird if command line flags are camelCased instead of hyphen-delimited, and it's not good if object parameters require you to use the hash syntax because there's a hyphen in the name. If it's OK, I'd like to use this PR as a model for how new parameters should be created going forward:\n- In the CLI, use --deref-symlinks=false\n- In the API, use derefSymlinks: false\nYou'd only have to worry about this new parameter - a more general solution will come later.\n. > It looks like the Travis OS X builds have been failing for a while.\nYeah :disappointed: - Running Wine on Travis CI's OSX instances is more difficult than I thought it would be.\n. @develar I'm afraid I don't understand your objection to this PR.\n. The current default is fine so that we can preserve backwards compatibility. In the future we can switch the default (and major version bump appropriately).\n. @joshaber thanks for working with me on the naming problem!\n. It appears that you're running Node < 4.0.\nNode 4.0 or greater is required as of electron-packager 7.0.0, per:\n- the NEWS file\n- the installation instructions\n- the engines section of package.json\n. There are two answers to this question:\n1. The prune option removes all node_modules that are (directly or indirectly) part of devDependencies but not dependencies in package.json.\n2. For additional ignore capabilities, there is a pull request (albeit getting stale) to add an .electronignore file, but per the conversation in that PR, I would rather add ignores to package.json: #376\n. > I assume this is because Wine 1.6 works in headless mode with rcedit 0.5.1?\nMy suspicion is that there's a missing implemented function / DLL in Wine 1.4 and the window that pops up is saying that it can't find something. You'd have to run Linux with X and Wine 1.4 to know for sure, though.\n\nIs there any particular feature / bugfix in rcedit@0.5.1 that is required for electron-packager\n\nYeah, this seems fairly important: https://github.com/atom/rcedit/issues/17. Pinning the version was always going to be a temporary measure.\nI would suggest using the Trusty CI environment. I personally haven't found any significant performance difference between the Precise containers and the Trusty dist.\n. Thanks for the contribution, but the wording of mas was deliberate there, as that's the name of one of the possible platform targets. (That's why the other one is called darwin instead of osx, for example.)\n. Thanks for the contribution! Per the contributing document, could you add a test for this change so that we can make sure future changes do not result in a regression?\n. Also, either this PR or #416 is going to have a merge conflict, depending on which gets merged first.\n. Never mind about the merge conflict, I misread where the change was.\n. Now there's a merge conflict (because I refactored the Mac target code).\n. Another thought I had: this bug should affect the Windows and Linux app bundles as well, so they should be changed too. (Also with tests.)\n. The method in question now uses fs.rename instead of fs.move, so after a little testing on the Linux host platform, the error stated doesn't seem to happen anymore.\n. Yeah, I'll write one shortly. It seems that it's not obvious how to create fixtures (I've gotten that comment a lot), so I'll add some notes to CONTRIBUTING.md about that, as well.\n. Docs added in https://github.com/electron-userland/electron-packager/commit/283f77d020e8929eb6fdb42fb02b6e589367af49, test added in https://github.com/electron-userland/electron-packager/commit/21ec6ece76111abe15ff234c4c1d3d9f7fad83b5.\n. Hmmm. I understand what you're trying to do here, but I don't know whether that's a good assumption to be making. I think I might defer to a developer that's better at the fs module than I am.\nCC: @jprichardson\n. Also, it appears that there is not a test for this change. But I guess hold off on writing that.\n. I'm basically worried about using fs.rename between different filesystems, volumes, and things like that. There have been several bugs filed in this project similar to that.\n. The temporary directory may not be used, but it doesn't mean that the out param does not point to a different filesystem.\n. Macs can have different filesystems too.\n. Argh, I need to refactor this file. A 150-line method is a horrible idea.\n@develar sorry, I'm in the middle of refactoring another part of the code and got confused. You're right.\n@joshaber sorry for the confusion, do what @develar suggests and just use rename here. No extra test (or tmpdir check) necessary.\n. Also, either this PR or #415 is going to have a merge conflict, depending on which gets merged first.\n. Thanks @joshaber!\n. Assuming the OSX tests ever finish, I'll merge this weekend unless there are any objections.\n. Have you tried http://electron.atom.io/docs/api/chrome-command-line-switches/ ?\n. I don't know what to tell you, there's a bunch of projects that seem to use it: https://github.com/search?q=electron+disable-gpu&type=Code&utf8=%E2%9C%93\n. It looks like you're building with Electron 1.0.0, not 1.2.4.\nCould you please show the osx-sign parameter that you're using as well?\nCC: @sethlu \n. Since the original issue reporter has not responded to the request for additional information in over two weeks, I'm going to assume that they either found the answer in another manner or decided not to pursue this issue. If I'm incorrect, they can respond with answers to the questions posed, and I'll reopen.\n. I think you need to use either the asar-unpack or asar-unpack-dir parameters on the folders containing native modules.\n. Looks like it only takes one string, see the API docs for asar-unpack-dir for glob examples.\n(The one string limitation appears to be an asar module limitation, if you think it should work as an array, you'd need to file an issue in their repository.)\n. It would help to know what your repository's directory/file tree looks like.\n. A couple of other things:\n- If you use prune: true, you don't need to ignore the node_modules you specified.\n- This is the ignore regex I currently use in my personal project to ignore files/directories, and works well. I should change it to have multiple ignore parameters.\n. The docs say that the API requires an array of RegExp objects, you have an array of strings. Try converting that last electronignore array into RegExps.\n. They're still strings. Try, for example:\njavascript\n{\n  electronignore: [\n    /\\b(\\.idea|ci|ClientSide|typings)/,\n    // etc.\n  ]\n}\n. There's probably something weird to do with word boundaries and a literal . in RegExps. You'd have to do some testing there.\n. The ignore option is basically a wrapper around the filter parameter of node-fs-extra's copy method. Both electron-packager and fs-extra.copy resolve paths to be absolute.\nSo in your example,\njavascript\n/^ci$/\nshould be written as:\njavascript\n/\\/ci$/\nand it should ignore any directory that ends in /ci. This is based on reading how copy works.\n. That being said, I would not be opposed to reviewing a pull request that changes the ignore option to only deal with relative file names. This would require:\n- Making sure that both the RegExp mode and the callback Function mode of ignore utilize relative paths\n- Making sure that the tests still pass (and adding some tests to make sure that absolute paths aren't matching)\n- documentation changes making it explicit that ignore matches on relative paths instead of absolute paths (NEWS entry as well as API/CLI docs)\n- a major version bump, as this breaks backwards compatibility, particularly for the users who use the callback Function mode (I'd handle this part)\nLet me know if you want to do this, I want to rearrange some code related to this and I don't want to cause any unnecessary merge conflicts.\n\nI've updated the docs to be more explicit about how ignore works.\n. > What would you suggest is a good way to ramp up on this stuff for a newbie like myself?\nIn general, there's a bunch of \"getting started with open source contributing\" blog posts all over the Internet.\nIn the context of this project, I wrote up a paragraph about that in the contributing document. Out of the list of issues mentioned, I would look for the ones that look the easiest. I think the easiest one at the moment is #121.\n. Thanks for the contribution, but like #107, this is blocked on https://github.com/electron/electron/issues/2343. Also the tests are probably going to fail.\n. Superceded by #474.\n. @develar it's pretty obvious from the link that this person uses electron-packager, not electron-builder.\n@codehz if you use asar, you need to whitelist native extensions like sharp (they do not work, see the Electron docs for why). Check out the --asar.unpack parameter. According to another section in the same Electron docs, try --asar.unpack=*.node (I have not tested it though). \n. Try electron-packager 7.2.0 and use --asar-unpack instead of --asar.unpack. There was a change to asar options in 7.3.0 but it shouldn't have impacted functionality.\n. Also, with electron-packager 7.3.0, don't specify --asar=true and --asar.unpack=*.node at the same time.\n. I'm not seeing a difference between the second and third command.\n. Yes, for electron-packager 7.2.0 and below, it is required to use --asar if you want asar support.\nThis seems like a problem with the asar module. Electron Packager does not transform the options that are passed to the asar module at all.\n. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n-  Which version of electron-packager are you using?\n- What are the exact CLI arguments that you are passing?\n. By CLI argument, I meant the exact command you ran (which you provided). What architecture are you trying to run on? I noticed you are building for the ia32 architecture.\n. If you run the created executable in cmd.exe, is there any output?\n. I don't know whether loadURL can handle /../ (up one directory), I think you need to make it an absolute path. Also I'm not sure if you can set an .ico file in BrowserWindow.\n. If I remember correctly, when you use the asar archive, it accesses the file in a different way. That's why using a relative path may not work correctly.\nHave you tried omitting the /../ part of the URL and using an \"absolute\" path?\n. Since this question isn't specific to electron-packager (but to using Electron and asar together), I modified the labels accordingly. \n. Are you running electron-packager inside cygwin?\n. My suspicion is that there's something wrong with the electron-1.2.5-win32-ia32.zip file that electron-download retrieved (perhaps it didn't download completely, or something). I suggest clearing the electron-download cache directory and trying again. (I'd normally give more complete instructions but I'm not currently in a place to look up information easily, check the electron-download repository for where the cache directory defaults to on Windows.)\n. If you run the electron-packager command without using \"npm run\", you should get an appropriate error message. In this case, you're not specifying your application directory.\n. Similar to #33, providing installers (or OS-specific packages in this case) is outside the scope of electron-packager.\n. In my opinion, the main problem with your argument is that upstream Electron already provides an Electron.app template for us to customize for your app, so all we're doing is replacing values (and files, for example the icon). This is true of all of the platform/architecture combinations. The only extra processing step that we do is create ASAR archives, and even that is outsourced to the asar module.\n(Also, we don't create .dmg files, electron-builder does, but I suspect that was just a typo on your part.)\nAdding AppImage support just doesn't make sense given the current architecture of Electron Packager.\n. It's probably a limitation of the Windows executable metadata - it probably expects the application version to be in the format N.N.N or similar.\n. Try having different relative paths based on whether it's packaged or not? I imagine relative paths work differently because the source code is in different places depending on whether the app is packaged or not, so __dirname won't be the same. But I don't know what your spawnSync call looks like.\nOut of curiosity, does an async spawn work the way you expect?\n. Since the original issue reporter has not responded to the request for additional information in about two weeks, I'm going to assume that they either found the answer in another manner or decided not to pursue this issue. If I'm incorrect, they can respond with answers to the questions posed, and I'll reopen.\n. That is really weird. Can you reproduce this on another (host) operating system?\n\nThe exact same config was working a few days ago so perhaps something has changed in the dependency tree?\n\nThat seems possible.\n. @MarshallOfSound Shouldn't have. Tests run successfully on Windows x64 (7.3.0 test run). Admittedly there are certain tests which do not run on our Windows CI, but I think they're all Mac related so it wouldn't be relevant to your particular problem.\n. Out of curiosity, did you test on non-Windows with Node 4.x?\n. @MarshallOfSound I can't reproduce this with electron-quick-start. Repro instructions (tested on x64 Debian):\n1. nodeenv --prebuilt --node 4.4.7 /tmp/node4 && source /tmp/node4/bin/activate\n2. git clone $electron_quick_start_url && cd electron-quick-start\n3. npm install --save-dev electron-packager\n4. node_modules/.bin/electron-packager --asar --app-version=1.0.0 . --platform=win32 --arch=ia32 --out=dist --overwrite --prune\nThe folder dist/electron-quick-start-win32-ia32/ exists with what appears to be the correct contents.\n. Well that's weird.\nCC: @jprichardson\n. I don't know why 7.3.0 would be the max version. The only filesystem related change was upgrading fs-extra to 0.28 to 0.30, and that didn't really change anything related to Packager.. A couple of things:\n- Per the docs for ignore, electron-prebuilt is ignored by default.\n- Your regex for Markdown files is incorrect, it should be \\.md$ (remove the * since this is a regex and not a glob)\n. Also, instead of using | with one regular expression, specifying --ignore multiple times might work out better.\n. Hmm. You shouldn't need to escape / but it's worth trying.\n. Hi, thanks for filing an issue. Unfortunately, I can't reproduce this. These are the steps I used:\n1. git clone https://github.com/electron/electron-quick-start && cd electron-quick-start\n2. npm install --save-dev electron-packager\n3. wget https://github.com/electron-userland/electron-packager/raw/master/test/fixtures/monochrome.icns\n4. $(npm bin)/electron-packager . --icon=monochrome.icns --out=/tmp/test-icon\n5. To make sure that CFBundleIconFile points to electron.icns: grep -r --binary-files=without-match -A1 CFBundleIconFile /tmp/test-icon\n6. To make sure that monochrome.icns and electron.icns are the same: md5sum monochrome.icns /tmp/test-icon/electron-quick-start-darwin-x64/electron-quick-start.app/Contents/Resources/electron.icns (the two 32 character hex strings should be the same)\nCould you please provide a minimal testcase and command line that reliably reproduces this problem?\n. Since the original issue reporter has not responded to the request for additional information in about two weeks, I'm going to assume that they either found the answer in another manner or decided not to pursue this issue. If I'm incorrect, they can respond with answers to the questions posed, and I'll reopen.\n. You could probably minimize the new electron fixture.\n. > Happy to squash commits if that is still the convention here.\nYup, see https://github.com/electron-userland/electron-packager/blob/master/CONTRIBUTING.md#filing-pull-requests (last bullet point)\nI will try to review later tonight. (Though I just noticed that somehow test coverage decreased with this PR...hopefully it's because CI isn't done yet.)\n. Hmmm. The tests no longer hit the \"unable to find app name/electron version\" code? Also, the test failure on Linux/Node 6 is troubling, but I'm not sure why it's happening (I reran the test run on Travis with the same result).\n. I have not been thrilled with this project's test runner (or tests, for that matter). Any suggestions/improvements would be greatly appreciated.\n. I'm :+1: except for that one new infer test, which I'd like to see fixed before merging.\n\nLet's defer on improving the test suite for another PR.\n\nAgreed.\n. It's mostly duplicate code from the other test (pretty much everything except 3 lines).\n. @zeke Thanks! Please release \ud83d\ude04 \n. @SimulatedGREG I'm in the middle of releasing a fix (see #439 and #440).\n. It basically means we need help with a better testsuite.\n. (I clarified the question because we're not going to disable building pushes to master, and also we use AppVeyor for Windows builds.)\nI don't have an opinion either way. If we decide to do so, we (probably meaning I) need to make sure that AppVeyor also follows that convention.\n. Could you please provide the purpose of this pull request? Also, you're missing documentation.\n. If it is, I'd want it to also affect the Windows metadata as well.\n. I'm a little confused, are you suggesting that version-string.FileDescription is equivalent to CFBundleDisplayName or are you just giving an example?\nI would like to have a new parameter that sets CFBundleDisplayName on OS X and whatever the equivalent in version-string is, for Windows.\n. Since there are outstanding technical problems with this pull request, and I don't think this is the correct way to address the problem conceptually, I'm going to close this.\n. Thanks for the fix! Could you add a test for this so we don't have a regression in the future?\n. @jhen0409 I assume the test fails without your fix?\n. @jhen0409 Hmmm, the test seems to fail with the fix too. (You should run npm test before you commit.)\n. If someone could make sure that the test fails without the fix applied, I would appreciate it. Otherwise I'll test it later today (or tomorrow depending on how much time I have available).\n. @jhen0409 thanks!\n. @SimulatedGREG Could you please file a PR (with a testcase)? I will review as soon as I can.\n. @SimulatedGREG Hmmm. Now that I think about it, doesn't that change give the current working directory priority over the specified opts.dir? That seems counterintuitive.\n. I am also not opposed to putting get-package-info back, assuming someone fixes the issue that @zeke mentioned here: https://github.com/electron-userland/electron-packager/pull/435#issuecomment-237157032\n\nI can make a PR later today, but not comfortable with doing tests so I'll try my best.\n\n@SimulatedGREG The important part about the test is creating a minimal fixture that exemplifies the problem that you're seeing. I can help with the code part.\n. Reversing the OR statement would be a problem because process.cwd() is never null/false, so it would never short-circuit.\nI would prefer re-adding get-package-info over hardcoding looking at a parent directory's possible package.json.\n. The other alternative is to fix https://github.com/rahatarmanahmed/get-package-info/issues/2.\n. I took a couple of minutes to look into it this morning. Here's how I reliably reproduced the problem:\n1. Switch to Node 4 environment (I used nodeenv)\n2. Take an existing checkout of electron-packager (<= 7.4.0) and run git pull && npm install\n3. Run node test/basic.js, not npm test\nThis intermittent error may have actually been an indicator for the problem in #439, but I'll need to see what CI says about that. In the meantime, I committed https://github.com/electron-userland/electron-packager/commit/bcc7cace97e17acbb03cc5d10e16e732532f1687 which at least gives a better exception.\n. :disappointed: still happening: https://travis-ci.org/electron-userland/electron-packager/jobs/150300592#L273\nI'm dropping it from the 7.5.1 milestone but I'd still like this to get fixed ASAP.\n. If I've learned anything from debugging intermittent test failures in general, it's that running a test in a testsuite vs. a single file has a tendency to be different, if a) your test runner does not isolate your tests properly, or b) you don't write your setup/teardown functions to isolate your tests properly.\nMy suspicion is that the failure will happen more often when running npm test rather than node test/basic.js.\n. I don't consider this fixed (because it still happens intermittently), so I'm reopening.\n. Regarding the reproduction steps in https://github.com/electron-userland/electron-packager/issues/441#issuecomment-238031674 - they reliably reproduced the error until after https://github.com/electron-userland/electron-packager/commit/bcc7cace97e17acbb03cc5d10e16e732532f1687 was committed. Now it's just an intermittent error.\nTo assist in debugging this issue, I removed the use of tap-spec, which I suspect is hiding the real reason why it's failing.\n. Well, that's significantly more helpful:\nhttps://travis-ci.org/electron-userland/electron-packager/jobs/151815017#L252-L283\n. Sounds good.\n. Have you tried using electron-packager 7.5.1 (released yesterday)? That version should fix the exception you're seeing.\n. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n- Console output when you run electron-packager for the win32 target platform and the ia32 target architecture, with the environment variable DEBUG=electron-packager.\n- What command line arguments are you passing?\n- Please provide either a failing minimal testcase (with code) or detailed steps to reproduce your\n  problem. Using electron-quick-start is a good starting point.\n. Could you run SET DEBUG=electron-packager before running epi?\nAlso, have you tried earlier or later versions of Electron?\n. It sounds like you're running an old version of electron-packager. What is the output when you run npm ls -g electron-packager ?\n\nNo I have not tried the earlier version or later one... should I?\n\nI ask because there are newer releases of Electron than 1.2.2. Try 1.2.8 or 1.3.2.\n\nhow to do if I have to install the later/earlier version of electron?\n\nSpecify a different Electron version when electron-packager-interactive asks for \"Electron version release\".\n. It looks like you need to adjust \"ignore\".\nCould you find out which version of electron-packager you have installed? The command to find out is in an earlier comment.\n. Please run this and paste the output:\nnpm ls -g electron-packager\n. That's not what I mean by \"ignore\". There is a parameter in electron-packager that lets you avoid the nesting that you saw in https://github.com/electron-userland/electron-packager/issues/444#issuecomment-238267842. But that's not important at the moment.\n. The main problem is that I need to set up a Windows 7 + 32 bit environment and I haven't found the time to do so yet. The other problem is that I need a very small example project to use to reproduce the problem. That would be very helpful to use to debug.\n. That part you already gave, the part that I'm missing is the application code that you're using.\n. Can you install the electron node module onto the windows 7 32-bit machine and try to run the app that way?\n. No. (Not directly.)\n. I finally got a virtual machine of 32-bit Windows 7 running. I cannot reproduce this problem.\nDetailed reproduction steps:\n1. Load Windows 7\n2. Install latest version of Node 4 (4.4.7 at the time of this comment)\n3. Download zip of electron-quick-start (mostly because I didn't feel like trying to install Git)\n4. Unzip electron-quick-start\n5. Open a cmd.exe window\n6. cd to your unzipped electron-quick-start\n7. Run npm install\n8. Run node_modules\\.bin\\electron . (the final space then period is important) - an Electron window should show up with Node/Chromium/Electron versions and a devtools pane.\n9. Close that window.\n10. Run npm install --save-dev electron-packager\n11. Run SET DEBUG=electron-packager\n12. Run node_modules\\.bin\\electron-packager . --platform=win32 --arch=ia32 --app-version=0.0.1 --out=dist (the --app-version=0.0.1 flag isn't necessary, but it was in your screenshot)\n13. Run explorer dist\\electron-quick-start-win32-ia32. It should open up a new folder view of your bundled example app.\n14. Double click on electron-quick-start (possibly electron-quick-start.exe depending on your folder settings). You should see the same thing as in step 8.\nI'm not using electron-packager-interactive here because this isn't a bug for that.\n. > But if it works then it means that we will have to perform all the above steps on every win32 based machine.\nThat was to prove that I can create 32-bit Windows executables successfully in general.\nFor completeness, here is a detailed set of reproduction steps without having to install Node or Electron onto Windows 7:\n1. Load Linux machine with Node and Git installed\n2. Open a command line prompt and run the commands in steps 3 through 7, in order:\n3. git clone https://github.com/electron/electron-quick-start && cd electron-quick-start\n4. npm install --save-dev electron-packager\n5. DEBUG=electron-packager $(npm bin)/electron-packager . --platform=win32 --arch=ia32 --app-version=0.0.1 --out=dist\n6. cd dist/electron-quick-start-win32-ia32\n7. zip -r ../test-app-win32-ia32.zip .\n8. Transfer test-app-win32-ia32.zip to Windows machine\n9. In Windows, right-click test-app-win32-ia32.zip and Select Extract All...\n10. Pick a folder to extract to and make sure \"Show extracted files when complete\" is selected\n11. In the newly open, uncompressed folder, double-click electron-quick-start (or electron-quick-start.exe, depending on your folder settings). You should see the window described in Step 8 of the original reproduction steps.\nUsing these steps, I still cannot reproduce your problem.\n. For building on a Windows 7 64 bit machine, it's the same as the original reproduction steps, except after step 12:\n1. Compress the electron-quick-start-win32-ia32 into a ZIP file\n2. Follow steps 8 through 11 of the second set of reproduction steps\n. instead of $(npm bin)/electron-packager, use node_modules/.bin/electron-packager. It seems your npm isn't configured correctly for whatever reason on what I hope is a Docker container.\n. Perhaps it's not a good idea to use the Linux reproduction steps if you're not familiar with Linux. .bin is a hidden directory because it starts with a ..\n. You're in the wrong directory. You are in /electron-quick-start/node_modules/electron-packager, you need to be in /electron-quick-start.\n. It appears that you're running Node < 4.0.\nNode 4.0 or greater is required as of electron-packager 7.0.0, per:\n- the NEWS file\n- the installation instructions\n- the engines section of package.json\n\nI don't have any more time today to debug this. I strongly suggest trying the Windows reproduction steps (either 32-bit or 64-bit).\n. >  I was avoiding it because I thought maybe this project needed to work on older versions of node. But no!\nYep. And I'm paying for that decision because you can't actually enforce a Node engine version as far as I know. :cry:\n. Sounds good. Just needs a NEWS entry and some rebasing. \n. There's that error again :disappointed: \n. Argh https://travis-ci.org/electron-userland/electron-packager/jobs/151351051\n. Doesn't really fix #441 then, right?\n. @MarshallOfSound I would, but I think I get a SyntaxError before that can be executed.\n. As far as I can tell, it's always been with that specific test, though. Which is really what #441 is about.\n. Sure. The only thing I object to in this PR is the assertion that it fixes #441.\n. \"kebab-case\" parameters are allowed in a JavaScript object, you just need to write them as strings, for example:\njavascript\n{\n  \"version-string\": {\n    ProductName: \"My Product\",\n    // etc.\n  }\n}\nChanging version-string to be more Object-friendly has been reported in #325 (and also #331).\n. This needs a NEWS entry but if I add one, I'll cause a merge conflict with some of the other PRs...so I'll wait.\n. I added the docs-needed tag because I think this needs to be mentioned in at least docs/api.md. Not sure if it needs to be mentioned in the readme.\n. The consistent CI failures on OSX remind me why I didn't implement this feature myself - I couldn't figure out a way to get Wine to cooperate on Travis CI's OSX workers, so I just disabled those tests. Might have to do the same thing here.\n. I think I'm going to drop this for the 7.6.0 release and save it for a future non-patch release (which will cause a merge conflict in NEWS.md).\n. Nice! The question becomes, is it consistent, or will tests time out sometimes? The inconsistent timeouts were why I had to stop installing wine on Travis OSX in the first place.\n. Not that I want to drag this PR out any longer, but should we have a test for the case where no app-version is specified and (for some reason) there is no version in any of the package.json files found?\n. I asked:\n\n[...] should we have a test [...]\n\nWe talked about it this morning - I believe where we ended up is that it would be nice but it would take a lot of effort to handle this case, because you'd have to either:\n- Copy a fixture to a temporary directory (so that the electron-packager package.json doesn't get detected by get-package-info) - and even then, there could be inconsistent failures on dev machines where someone puts a package.json in their root temporary directory\n- Refactor that code to stop at the first package.json - I'm generally in favor of this method, but the concern was that it would break existing code (even though that wasn't an explicit feature)\n@kevinsawicki please correct me if I'm misremembering.\nMy inclination is for the second option to happen, but not in this PR. It would also obviously be a breaking change that requires a major version bump.\n. Feel free to release 7.7.0 (or I can do it sometime after this afternoon). I need to add a couple of steps to the release docs for after running git push:\n- Create a new GitHub release from the pushed tag with the contents of NEWS for that version\n- Close the milestone associated with the version if one is open\n. Needs some docs in usage.txt.\n. That is a bit odd conceptually, but if it works, it works.\n. > It could just handle the errors explicitly and do a manual process.exit when downloading Electron or npm installing fails if you think that is a better approach.\nI like that better.\n. Hmm, this seems bad: https://travis-ci.org/electron-userland/electron-packager/jobs/151845468#L2066-L2083\nI wonder if it has something to do with #441.\n. I think that will be fixed if we run npm install --no-bin-links in that test setup function.\n. It doesn't look like the issue reporter was using the osx-sign option to sign the app, but rather calling codesign directly.\n. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n- Console output when you run the electron-packager command you specified with the environment variable DEBUG=electron-packager set. Please paste it in the block in your issue summary where it says \"Put the console output here\".\n. You want to put DEBUG=electron-packager on the same line as your electron-packager command.\n. Yes, but you seem to be using an older version of electron-packager. Please use the newest version.\n. Since the original issue reporter has not responded to the request for additional information in about two months, I'm going to assume that they either found the answer in another manner or decided not to pursue this issue. If I'm incorrect, they can respond with answers to the questions posed, and I'll reopen.\n. Thanks!\n. Thanks for filing a bug! This is the same issue as #375.\n. That's because, according to the ignore documentation, one of the paths that is ignored by default is \"the directory specified by the out parameter\". My suggestion is to set a different --out directory from the one that you create your bundle.js in.\n. One of the things we should consider when we redo the getMetadata method (and related) is to move it to common.js, so it can be unit tested without needing to run the whole packager workflow.\n. @rahatarmanahmed there have been odd results on Windows, see #497.\n. There have been a couple of pull requests that make adding electron (FKA electron-prebuilt) not required to be set in dependencies or devDependencies, nor set via --version (although no one's actually finished any of the PRs). I'm a bit conflicted about whether that is a good default. Offhand, it seems dangerous, given that basically defaults the dependency to \"electron\": \"*\".\n. @kevinsawicki @jlord @zeke any comments/concerns you have on either the concept or the changes would be much appreciated. This one is likely going to be a fairly controversial change.\n. My  rationale for making both defaults the same as the host is that it is easier for the developer to test. (I should have put that in the PR summary.)\nI believe that Windows 32-bit executables will run on 64-bit machines (maybe? I could be wrong) but in order for Linux 32-bit executables to run, the whole 32-bit glibc/etc stack also needs to be installed (e.g., dpkg --add-architecture i386), unless for some reason Electron is statically linked to musl or similar :smile:\n. > One question, if I am on 32-bit Linux and Windows, and I request to build for macOS with no arch specified, will it still build a 64-bit version of mac since their is no 32-bit, or would it error about 32-bit mac being unavailable?\nIt will currently error. It would also error if #106 is fixed and you only specify --arch=armv7l on OSX/Windows.\n. Yup!\n. Per the release notes for 7.7.0, app-version is now inferred from your app's version in package.json. In your CI, you now need to install Wine (unless you remove version from your package.json file).\n. :+1: assuming that tests pass.\nSide note, you should use the PR template, if only to provide a good example for potential contributors :smile:\n. This would have been a good PR to select \"squash and merge\" on.\n. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n- Console output when you run electron-packager with the environment variable DEBUG=electron-packager.\n- Please verify that it works with version 7.0.4. This problem sounds odd to me, mostly because there wasn't a change in the signing code around 7.1.0.\n. @ErikBoesen I appreciate the +1, but using the GitHub reactions feature is preferred to more GitHub notifications than is necessary.\n. Another question: a DMG is produced? I assume that's not related to this (considering that electron-packager does not generate DMG files).\n. @ErikBoesen I'm not sure what you're referring to.\n. @0x00A I take it the latest version of electron-packager doesn't work for you either?\n. @ErikBoesen the failing build is unrelated to this issue and is being investigated in #468.\n. @0x00A Could you please run electron-packager with the DEBUG environment variable set to electron-osx-sign and paste the output?\nCC: @sethlu \n. OK, hopefully this debug information will help @sethlu figure out what the problem is (he is the maintainer of electron-osx-sign which what signs apps for electron-packager).\n. Which version of electron-osx-sign is being used by Electron Packager when it doesn't work?\n. Here is every single code change between 7.1.0 and 7.2.0. As you can see, nothing changed with regards to OSX signing changed in that release.\nYou mentioned that you use electron-osx-sign separately from Electron Packager? What happens when you use Electron Packager 8.0.0 and electron-osx-sign 0.4.0-beta4 separately?\n. @TheMSB which version of Electron Packager is this?. @babyChou A few things, in addition to the questions asked above:\n- Don't do steps 5 and 6. electron and electron-prebuilt are the same thing, and electron-prebuilt is deprecated (see the Electron blog for details).\n- For that matter, it is unnecessary to install electron both globally and locally.\n- You don't need to specify --version if you install the electron module.\n- Per the ignore documentation:\n  - The ignore option you specified is unnecessary because by default it ignores the electron, electron-prebuilt, and electron-packager module directories.\n  - If you choose to keep that option, you need to fix the syntax - ignore uses regular expression syntax, not glob syntax.\n- Before step 7, run: SET DEBUG=electron-packager. There should be more output to determine why it's not working for you.\n. Oops, I should have been more specific. I should have said:\n\nYou don't need to specify --version if you install the electron module locally.\n\nIf you install it locally (with --save-dev), it will read the Electron version from package.json.\n\n[...] and just hang here\n\nThat is an interesting problem. Can you run SET DEBUG=electron-download,electron-packager,extract-zip and rerun the electron-packager command?\n. Yeah, at this point I'm not sure what the problem is. For some reason your installation of electron-packager is not making it to the \"downloading Electron\" stage. In the next release there will be some more debug statements that might help figure out what's wrong. If you would like to try it before we release the next version (I'm not quite sure when that will be), you should be able to run:\nshell\nnpm install -g electron-userland/electron-packager\nand then rerun the SET and electron-packager commands from earlier.\n. It did in the previous commit (note the checkmark), I skipped it in the latest one because it was just a doc change. That's some interesting UX implications in the GitHub PR UI :smiley: \n. Yup!\n. Per the API docs about the version option, you need to omit the v.\n. You likely either do not have the version in package.json set at all, or it does not follow the semantic versioning format.\n. What is the value of the version key of package.json? (The app version)\n. Nope, I can't continue work until they actually release a new version, including backporting the old 1.0+ versions per the description of the blocking PR. This is why I amended the PR description earlier this morning to add \"the release of\", which is different from merging.\n. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n- Console output when you run electron-packager with the environment variable DEBUG=electron-packager. Please include the stack trace if one exists.\n- What command line arguments are you passing? Alternatively, if you are using the API, what\n  parameters are you passing to the packager() function?\n. My suspicion is that you have an old version of Electron Packager installed, that's why I asked for more details.\n. Strange. Please run DEBUG=electron-packager electron-packager ./ --platform=win32 --arch=x64 and paste the output. The debug output should be useful in figuring out what your problem is.\n. I find it highly odd that you're not getting any debug output. Could you please run the following commands, and paste the output of each?\n- npm list electron-packager\n- npm list -g electron-packager\n. I've never liked the fact that --version doesn't give the electron-packager version. I think in a future major version I'm going to change it so it's more like other command line tools (I've reopened #154 as a result).\n. Electron does not currently support PowerPC architectures. If you would like Electron to support that architecture, you would be better off filing a feature request on Electron's issue tracker.\nFor future reference, Electron Packager only supports the target platforms and architectures that Electron supports.\n. Thanks for the pull request, but the newlines are intentional. In this repository, I try to make Markdown lines wrap at around 100 characters.\n. Thank you for the pull request, but could you be more specific about the impact of the change? How does this make for better error reporting? Please give an example of how the logging changes.\n. Additionally, in the future, making sure that all of the questions in the pull request template are answered would cut down on the amount of notification spam generated by your pull request.\n. Right now I don't think this is the correct solution to the problem. Adding those entries causes unnecessary checking via the get-package-info module. I believe that the correct fix is the one described in https://github.com/electron-userland/electron-packager/issues/461.\nIn the meantime, does the documentation in https://github.com/electron-userland/electron-packager/blob/master/docs/api.md#version need to be updated to be clearer?\n. > For a little while I mistook the version in package.json as the \"version\" it was referring to\nThis kind of reaction is why I never liked the electron version option named \"version\". I think it should be named electronVersion (or --electron-version on the command line).\n. FWIW I'd like to move productName to a more standard place like https://docs.npmjs.com/files/package.json#config. I'd also like the ability to configure all (most?) of Electron Packager via the config section of package.json, but that would require more thought.\n. > This kind of reaction is why I never liked the electron version option named \"version\". I think it should be named electronVersion (or --electron-version on the command line).\nI've reopened #154 as a result.\n. My suggestion is to add the flags --ignore=__pycache__ --ignore='\\.py[co]$'. My suspicion is that you're bundling an old Python bytecode file.\n. In order to debug your problem further, we need a minimal testcase to reproduce your problem. Using the electron-quick-start repository as a base, could you please create a minimal Electron app that illustrates the issue you described, and post a link to it here?\n. Yeah, it sounds like you need to specify a more specific path to your script. The current working directory is different when you run exec() from npm start vs running a packaged Electron app.\n. My suggestion is to poke around the filesystem inside your Electron app, then use that path when you're using the packaged version. (That is pretty much what I would do to find the answer.)\n. I'm not aware of another solution. Perhaps if you ask in the greater Electron community,  you'll get a better answer.\n. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n- Console output when you run electron-packager with the environment variable DEBUG=electron-packager.\n- What command line arguments are you passing? Alternatively, if you are using the API, what\n  parameters are you passing to the packager() function?\n- Please provide either a failing minimal testcase (with code) or detailed steps to reproduce your\n  problem. Using electron-quick-start is a good starting point.\n. Thanks for filing a pull request. Per our CONTRIBUTING instructions:\n\nUnless it's impractical, please write tests for your changes. This will help us so that we can spot regressions much easier.\n. Also, it appears that the changes don't conform to our coding standard (also documented in the CONTRIBUTING instructions). In the future, this can be avoided by running the tests locally before submitting a pull request.\n. Thanks for the suggestion, but this isn't an enhancement that Electron Packager can make. What you're generating is fundamentally two different applications that runs identical web application code.\n\nIf you want to synchronize data between all of the copies of your application, you're going to need to have a separate web app that runs on a server that does the syncing. This is how bookmark/extension synchronization works in web browsers like Firefox and Chrome.\n. You could do that.\nSince this isn't an Electron Packager specific question, I suggest asking it in the greater Electron community, where you'll probably get a better answer.\n. Out of curiosity, is there a reason why you're specifying it that way instead of as an Array?\nWhether it would get accepted depends on a couple of things:\n- what you mean by \"sanitized\"\n- you write tests for your changes\n. I think I would rather have it split on the regular expression /, */ than trim each value. But other than that, it sounds fine.\n. The only way to do that currently is to move the files after the packager has finished running, for example in your package.json:\njson\n{\n  \"scripts\": {\n    \"win\": \"electron-packager --platform=win32 --arch=x64 --out=dist && mv dist/app-win32-x64 dist/win\"\n  }\n}\n(I'm not actually sure if that works when the host platform is Windows, I've forgotten how to move files on the command line there...)\n. Could you please fill out the information so we know what your issue is about?\n. Yeah, that sounds like the best way to do it.\n. The others start with a slash because they indicate a folder name. This indicates a file extension.\n. @englishextra Unlikely, it appears he's using a pretty old version of electron-prebuilt, not the electron NPM package.\n@TracyGJG there are a few things that are inconsistent in your example:\n- You're using Electron 0.25.2, which does not have support for the electron module (that was added in 0.35.0, but you should use the newest Electron release if possible).\n- When you run npm start, you're running main.js, but when you run the packaged app, you're running index.js because Electron runs the script in the main section of package.json (see Electron docs)\n- Your ignore flag is incorrect (it is a regular expression, not a glob expression, see the API docs) and unnecessary because by default, Electron Packager removes all packages in devDependencies.\nThat being said, this doesn't appear to be an Electron Packager specific problem at this time. You may get better help from the greater Electron community.\n. Ha, you got to it before me \ud83d\ude03\n. Dammit, I jumped the gun on this:\nhttps://travis-ci.org/electron-userland/electron-packager/jobs/161196771#L815-L833\nI have no idea what could cause this, unless babel is making the build completely memory hungry.\n. Interestingly enough, this only happens on the OSX workers.\n. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n- Console output running electron-packager after you run SET DEBUG=electron-packager in your command line window. This will tell us a number of things about your system that will be helpful to people trying to debug your problem.\n. This feels like a problem with npm prune rather than Electron Packager. Try running npm prune --production on  your app and see if you get the same error.\n. What does your app's file/folder structure look like?\n. Since the original issue reporter has not responded to the request for additional information in about two weeks, I'm going to assume that they either found the answer in another manner or decided not to pursue this issue. If I'm incorrect, they can respond with answers to the questions posed, and I'll reopen.\n. I don't know what settings is.\nTypically what people do is use a relative path from __dirname (the directory of the current JS file), so you'd do something like path.resolve(__dirname, '../../../static/html/main-window.html'). (Note that the number of ../s might be different, it's hard to tell from a screenshot.). I would suggest setting DEBUG to * (SET DEBUG=* per the debug module docs) which will turn on debug logging for all dependent modules which support it, and then analyzing the logs.\n. @ragFOEX Is there something special about the location of the source code in the affected systems? Perhaps the drive is mounted in a non-standard way or something like that?\nCC: @zeke\n. Perhaps different permissions on the folder? Or for some reason is there a package.json in the C: root directory?\n. Could you make sure get-package-info is at 0.1.1 and re-run electron-packager with DEBUG=*? @rahatarmanahmed released a new version of get-package-info with debug support.\n. There is a new version of Electron Packager (8.2.0) that might have solved your problem. Please upgrade and follow the instructions in https://github.com/electron-userland/electron-packager/issues/497#issuecomment-253326507 if it still doesn't work.\n. Since the original issue reporter has not responded to the request for additional information in about two weeks, I'm going to assume that they either found the answer in another manner or decided not to pursue this issue. If I'm incorrect, they can respond with answers to the questions posed, and I'll reopen.\n. I don't have a problem with adding this feature.\n. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n- Console output when you run electron-packager with the environment variable DEBUG=electron-packager. Please include the stack trace if one exists.\n- Please provide either a failing minimal testcase (with code) or detailed steps to reproduce your\n  problem. Using electron-quick-start is a good starting point.\n. Try running the following commands in the same directory as you run electron-packager and paste the output in this issue:\n- npm prune\n- which npm\n- type npm\n. Since the original issue reporter has not responded to the request for additional information in about two weeks, I'm going to assume that they either found the answer in another manner or decided not to pursue this issue. If I'm incorrect, they can respond with answers to the questions posed, and I'll reopen.\n. Thanks for filing an issue. This is a duplicate of a feature request filed in #187, so you should subscribe to that for updates. (It's mostly waiting for someone to write a pull request for the feature.) There are also workarounds described there.\n. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n- Console output when you run electron-packager with the environment variable DEBUG=electron-packager. On Windows, run SET DEBUG=electron-packager before running your electron-packager command.\n. Since the original issue reporter has not responded to the request for additional information in about two weeks, I'm going to assume that they either found the answer in another manner or decided not to pursue this issue. If I'm incorrect, they can respond with answers to the questions posed, and I'll reopen.\n. @transfluxus You need to run npm install --save-dev electron so that Electron Packager can infer the version from package.json.. @voltrevo why are you putting Electron into optionalDependencies?. @voltrevo \n\nAlternatively, is there a way to specify the electron version as the error message suggests?\n\nRunning electron-packager . --electron-version=1.4.15 when electron is not in package.json works for me.. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n- Console output when you run electron-packager with the environment variable DEBUG=electron-packager. This will tell us debug information about the system you are using to create the app bundle.\n- What command line arguments are you passing? Alternatively, if you are using the API, what\n  parameters are you passing to the packager() function?\n- How are you moving the app between Linux machines? Are you compressing the app bundle beforehand? If, so, with which command?\n- Please provide either a failing minimal testcase (with code) or detailed steps to reproduce your\n  problem. Using electron-quick-start is a good starting point.\n. Does the protocol for your network mount (SMB, NFS, SSHFS ???) preserve file permissions?\nI believe you can test this by placing test.py in the same folder as your app:\n``` python\n!/usr/bin/env python\nprint('hello world')\n```\nRun chmod +x test.py on the computer you ran electron-packager on, and then on the command line on the computer with the network mount, cd to that folder and run ls -l test.py; ./test.py. Paste the output here.\n. Since the original issue reporter has not responded to the request for additional information in about two weeks, I'm going to assume that they either found the answer in another manner or decided not to pursue this issue. If I'm incorrect, they can respond with answers to the questions posed, and I'll reopen.\n. @michaelsogos if you could answer all of the questions I posed to the original reporter, that would help.. I'm OK with you implementing option 1 in the way you describe.\n. > Also highly doubtful that this module should be used at all.\nWhy is that? Do you have an alternative proposal?\n. > Tests seem to be failing due to some eslint peerdependency business, tho... :disappointed:\nWTF. I wanted to add Node 7 to CI anyway, I guess I need to mess with other dependencies too.\n. Can't upgrade CI to use Node 7 until next week (blocked on AppVeyor). However, I upgraded eslint-plugin-promise on master and CI all passed the npm install portion.\n. Thanks for your question, but the behavior you described is implemented in the asar module. The developers there would be more knowledgeable about how to answer your question, so it would be better to ask it in their issue tracker.\n. Looks like you misspelled \"platform\".\n. It's still misspelled. Switch around the r and the o.\n. @ljoli please run the electron-packager command outside of the NPM scripts feature and paste the console output. NPM scripts do not provide sufficient debug information.\n. @englishextra I don't know what you're referring to, the npm output indicates that the user is running Node 6.8.1.\n. @ljoli that is normal.\nYou can use npm scripts mode, it just won't tell you the error message.\nDid you get an error message when you ran electron-packager manually?\n. Please run DEBUG=electron-packager electron-packager . --platform=linux --arch=x64 MyApp and paste the output here, preferably in a preformatted block.\n. Delete the folder MyApp-linux-x64 in your app directory and also /tmp/electron-packager and try again.\n. @englishextra the terminal command has been given multiple times.\n. @englishextra I believe it will help. There seems to be a recursion problem when copying the app.\n. @englishextra see also line 4 of the debug output.\n. If deleting the output app bundle directory doesn't work, I suspect there is a bad symlink somewhere.\n. Looks like it worked to me.\n. It seems like the problem got resolved, so I'm going to close this.\n. In order to debug your problem further, we need a minimal testcase to reproduce your problem. Using the electron-quick-start repository as a base, could you please create a minimal Electron app that illustrates the issue you described, and post a link to it here?\n. Do you have one or two package.json files?\n. I would not be opposed to reviewing a PR to add more callbacks like the ones you're describing.\nDo you mind filing a separate issue for the logging?\n. FYI, I implemented the quiet option and it's been released in 8.4.0.. After seeing how Forge works with ora, I'm probably less inclined to have a progress callback. Also, similar to the current hooks, it should (only?) accept an array of functions returning Promises, which are executed using Promise.all (in \"parallel\", not series).. @kwolfy I've updated the docs based on your new feature. Let me know if it's accurate or it needs to be clarified.\n. Thanks!\n. This is a limitation of the Node ecosystem rather than Electron Packager. In order to build Electron apps with native module dependencies, you need to be able to build the native module for the target platform/arch. Node (and by which I usually mean node-gyp) does not currently support cross compilation at the time of writing this comment. The workaround is to build apps on the same host platform as the target platform.\n. Does cnpm prune --production exist? If so, if  you modify Electron Packager to use that command instead of npm prune --production, does it still hang?\n. Electron Packager needs to be changed to be able to specify a custom command as the package manager, in order to run the \"prune devDependencies\" command. (And also an npm install command in the testsuite.)\nIt should be called packageManager in the API, and --package-manager in the CLI. The default value should be npm. It should fail with a nice error message if the specified package manager either does not exist or is not an executable file.\nI am happy to review pull requests that implement this (and, obviously, follow the contributing guidelines).\n. I am having a really difficult time getting cnpm to be called correctly on Windows, for some reason. This is the error I keep getting from both child_process.exec and spawn-rx.spawnPromise, despite running npm install -g cnpm and verifying that it creates a cnpm.cmd file:\nError: The filename, directory name, or volume label syntax is incorrect.\nSince Windows is not my area of expertise, I'm inclined to only implement cnpm support for Linux/macOS and wait for someone to file a PR to get this working correctly on Windows. It will raise an error if cnpm is selected on Windows in the meantime.. This isn't a problem specific to Electron Packager. Apache Cordova has a similar problem, see: https://stackoverflow.com/questions/16995314/google-sign-in-from-javascript-invalid-parameter-value-for-origin/23316449\nYou're more likely to get a better answer by either seeing how Cordova/Phonegap applications solve the problem, or by asking the Electron community at large.\n. Could you try the changes to package.js in https://github.com/chentsulin/electron-react-boilerplate/pull/371/files, and also try setting derefSymlinks to false?\n. This is why you have the lodash problem: https://gist.github.com/barbalex/43100d47b5438549a3754006e86f09e5#file-log-L30\nIt's a problem with your boilerplate. Try removing this line: https://github.com/barbalex/kapla2/blob/540e82e97ddbcf801cb37a72d0e7498536b85a0d/package.js#L58\n. > https://gist.github.com/barbalex/88d03ac08246102370d152cba69bacdd\n\nrepeated probably a few hundred times.\n\nWhat console output immediately precedes the start of that?\n. > this here: https://gist.github.com/barbalex/51164bf76250a6283d3dd5c9a2b4f624\nIs that with DEBUG=electron-packager set?\nUnrelated: why are you running it as root?\n. > But I get this new error:\n\n[...] Error: Can't create config, layout not yet initialisedtoConfig [...]\n\nWithout knowing more about your app (I can't debug it right now) you should probably look into seeing where the config is being created and whether you have permissions to write it there.\n. I have no idea why you would get ENAMETOOLONG only when DEBUG is not set.\n. > > Unrelated: why are you running it as root?\n\nHm. How do you see that?\n\nhttps://gist.github.com/barbalex/51164bf76250a6283d3dd5c9a2b4f624#file-log_on_macos-L1\n\nOn Windows my Account has administrator rights. Could that be the reason?\n\nProbably not. It was just just something odd that I saw. You shouldn't need to run as root unless there's a very specific reason you're doing so.\n\nHaving removed .concat(depsExternal), could it be that some dependencies like goldenlayout have not been correctly built?\n...or are these only the dependencies that I've set as external in webpack.config.base.js ?\n\nThe latter, I think.\n. > Oh, I forgot: You mentioned it was a problem of the boilerplate. And the lines I removed to solve the problem do come from it. Shall I create an issue at https://github.com/chentsulin/electron-react-boilerplate?\nSure. Fair warning, they may tell you you're doing something wrong. I'm not very familiar with how webpack/react works, I just know how to stop the error you were seeing \ud83d\ude04 \n. That's preventing yarn completely replacing npm, sure. In the meantime you should be able to symlink npm to yarn and in theory it should \"just work\".\n. Then it sounds like yarn support specifically is blocked on prune --production being added. That is an important part of how we package Electron apps.\n. The above yarn issue relates to prune. This one relates to --no-bin-links: https://github.com/yarnpkg/yarn/issues/929\nThose two issues block proper yarn support. However, I have spec'd out how to implement generic NPM-compatible package manager support in https://github.com/electron-userland/electron-packager/issues/515#issuecomment-257167905, and I am happy to review pull requests that implement this (and, obviously, follow the contributing guidelines).\n. If you symlink wine64 to wine, does it work?\n. Try removing (or moving, if you have apps/data in there that you need) the $HOME/.wine directory and try again.\nThe hardcoded wine call isn't in Electron Packager but rather in node-rcedit. I suggest filing a bug there if you want to be able to use the wine64 executable without symlinking.\n. Good to know that that is not a valid workaround. The options at this point are:\n- Wait for node-rcedit to be changed\n- Install 32-bit wine\n. Since this is a node-rcedit bug that I just filed there, I'm closing this bug.\n. CC: @MarshallOfSound since he has more experience with electron-rebuild.\n. This is not currently possible. I gave a more detailed answer in #243.\n. I appreciate the suggestion, however the arch param corresponds to a subset of Node's arch identifiers used in their binary downloads, rather than the possible values of process.arch. I think that the Atom packaging script should be fixed to handle ARM host builds better. If we take the change that you're suggesting, it's going to get pretty ugly in Electron Packager once Electron supports ARMv8. (This was why I was against allowing arm as a valid arch in the first place.)\n. I'm saying that if this is how process.arch works, then it's not the best way to set the arch parameter for Electron Packager. Your suggestion only works when both the host and target arch is ARMv7, and that makes documenting how the parameter works much more complex. (I would also be concerned about figuring out a way to write a test for this case.)\n. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n- Console output when you run electron-packager with the environment variable DEBUG=electron-packager.\nFWIW, I tried it on Linux x64 and aside from there not being an app.dock to hide, a file dialog opened for me.\n. I think someone with a Mac is needed to debug this one, since I can't reproduce this behavior on Linux.\n. No one's come forward to reproduce and debug this problem (I can't, I don't own a Mac), so I'm going to close it. I will be happy to reopen it if someone in the community wants to look into it.. Snaps are not in the scope of Electron Packager. However, the electron-installer-snap module uses the output of Electron Packager to create snaps. Alternatively, Electron Forge (as of v5.0.0) uses both Electron Packager and electron-installer-snap internally to build snaps, and also has support to publish them to the Snap Store.. You can probably get some inspiration from https://github.com/azu/electron-zip-packager, but you're better off asking this question in the greater Electron community.\n. It's probably worth looking at the contents of your .app (since it's really just a fancy folder). Check to see if there's a node_modules folder, and if so, see if bunyan is there.\n. That is unsettling. Perhaps try running Electron Packager outside of the gulp workflow and see what happens? My current hypothesis is that one of your other gulp tasks is interfering with Electron Packager.\n. OK. I won't have time to debug this for a while, so I'm just going to ask some questions in the meantime. The only ones I have at the moment are:\n- before you package the Electron app, in the node_modules folder that's in the same directory as package.json, does it have bunyan and jquery?\n- What version of NPM are you using?\n. Oh, I see. You are copying the app to build/dist first. Does node_modules (and those packages) exist in that directory?\n. Either copy it or run npm install in build/dist before running Electron Packager. A symlink might not work the way you think.\n. @neil-mcglennon-sp it would help if you provided your package.json.. The easiest thing to do is reinstall Electron Packager.. @eladc898 \nIn order to debug your problem further, we need a minimal testcase to reproduce your problem. Using the electron-quick-start repository as a base, could you please create a minimal Electron app that illustrates the issue you described, and post a link to it here?. > but the install says that they do not provide support for this pre-release version.\nWhich install are you referring to? How are you installing wine, and what is the precise console output when you do so?\n. Looks like you need to upgrade Homebrew: https://github.com/Homebrew/homebrew-core/issues/6359 (https://github.com/Homebrew/brew/pull/1384 was merged almost 3 weeks ago).\n. The icon path must be a local path. In your build process, you should download the icon locally first.\nI have clarified this in the documentation in https://github.com/electron-userland/electron-packager/commit/d6130917c352a63caeadb00e73a4da9ec7b5ed2d.\n. I haven't really commented on this because I don't have a Mac to test this on. I did test with notify-send on Linux based on your code snippet, by putting it in renderer.js in electron-quick-start:\n```javascript\nvar childProcess = require('child_process');\nvar myScript = \"notify-send 'Electron is creating a \\\"hello world\\\" notification' 'This is in the body of the notification'\";\nchildProcess.exec(myScript, function(error, stdout, stderr) {\n    console.log('stdout: ' + stdout);\n    console.log('stderr: ' + stderr);\n    if (error !== null) {\n        console.log('exec error: ' + error);\n    }\n});\n```\nThis worked for me. Since I can't figure out how to reproduce, I would suggest to either put your script in a separate file, or try using the osascript node package.. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n- Console output when you run electron-packager with the environment variable DEBUG=electron-packager. Please include the stack trace if one exists.\n- What command line arguments are you passing? Alternatively, if you are using the API, what\n  parameters are you passing to the packager() function?\n- Please provide either a failing minimal testcase (with code) or detailed steps to reproduce your\n  problem. Using electron-quick-start is a good starting point.\n. Ah yes, you need to set the \"main\" key in package.json. I suggest taking a look at http://electron.atom.io/docs/tutorial/quick-start/#main-process.\n. It's a problem that there are two different package.json files. We recommend only having one if you want to use Electron Packager. I recommend doing some experimentation in order to merge the two and have your app build properly. I'm not familiar with the photon project so I'm not comfortable saying how difficult it would be to modify it.\n. This seems like a meteor question rather than an Electron Packager question.. Yes, it sounds like an issue for the electrify repository. I don't see how Electron Packager has anything to do with setting a port number.. 64 is not a valid arch. You probably want x64. That being said, there should be a better error for type errors.. As of Electron Packager version 8.0.0, the armv7l architecture is supported. However, due to the way that ARM architectures identify themselves, you need to explicitly specify the arch parameter yourself.. What is armv7a?. It's confusing because my Raspberry Pi 3 is running a stable Raspbian image, and when I run uname -a on it, it reports armv7l. However, according to Wikipedia it runs https://en.wikipedia.org/wiki/ARM_Cortex-A53 which is armv8, which is not currently supported by Electron.\nThe only architectures that Electron Packager supports is a subset of the architectures that Electron supports. All of the \"Electron does not build/ for some version of ARM\" issues seem to be getting merged into https://github.com/electron/electron/issues/259.. Sorry, uname -a shows everything. I specifically meant uname -m, which should show just the system architecture.. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n\n\nConsole output when you run electron-packager with the environment variable DEBUG=electron-packager. Please include the stack trace of the error.\n\n\nWhat command line arguments are you passing? Alternatively, if you are using the API, what\nparameters are you passing to the packager() function?\n\n\nPlease provide either a failing minimal testcase (with code) or detailed steps to reproduce your\nproblem. Using electron-quick-start is a good starting point.. A few additional questions:\n\n\nYou must be getting the error as a popup, since it's not in your console output. Is this correct? If so, can you copy/paste all of the stack trace from it (or screenshot the popup, but that's not ideal).\n\n\nCan you pinpoint exactly which version of Electron (by which I mean electron-prebuilt) where it starts to fail for you? For example, does 1.2.1 work?. A few things to help you debug:\n\n\nThe stacktrace is in your screenshot. Windows appears to cut it off horizontally (note the ... near the end of three of the lines), try making the error popup wider before screenshotting it, so you can see exactly which file is being referenced.\n\nYou can optionally set --version=1.2.1 or whatever (valid) Electron version you want in the package.json script args. There are versions between 1.0.2 and 1.2.2 (see Electron releases), but I don't recall why there weren't electron-prebuilt releases made for them.\n--debug=electron-packager is not a valid flag for Electron Packager. You have to run SET DEBUG=electron-packager in Windows before running  npm run-script build-win.. There is no difference between electron and electron-prebuilt, except for the name and that electron-prebuilt will no longer have Electron releases published to it at the end of this year.. Interestingly enough, I built your app on Linux and the error gets printed to the console, rather than a popup. Hope this helps:\n\nA JavaScript error occurred in the main process\nUncaught Exception:\nTypeError: Path must be a string. Received undefined\n    at assertPath (path.js:7:11)\n    at basename (path.js:1355:5)\n    at Command.parse (/tmp/tunein-music-wrapper/build/musicwrapper-linux-x64/resources/app/node_modules/commander/index.js:446:30)\n    at Object.exports.parse (/tmp/tunein-music-wrapper/build/musicwrapper-linux-x64/resources/app/lib/cli-parser.js:46:11)\n    at Object.<anonymous> (/tmp/tunein-music-wrapper/build/musicwrapper-linux-x64/resources/app/lib/google-music-electron.js:22:39)\n    at Module._compile (module.js:541:32)\n    at Object.Module._extensions..js (module.js:550:10)\n    at Module.load (module.js:456:32)\n    at tryModuleLoad (module.js:415:12)\n    at Function.Module._load (module.js:407:3)\n(At first glance it appears that you need to modify the CLI parser to not require at least one argument - I ran musicwrapper something and it ran fine.). I'm not saying I reject your changes. I'm saying that if you're going to have OS-specific instructions, we need to give \"equal time\" to all of the host platforms that we support. Preferably a free (non-web), open source alternative on Windows.. I was thinking about it this morning - this might be better off either in the Electron application distribution guide, or Electron Packager needs a guide of its own.. I'm closing this since I think this sort of documentation should really go into the Electron docs (and it should cover all major OSes, not just macOS). I've seen people ask about .icns files not in the context of Electron Packager, in the Electron community forums. I will be happy to link to the Electron docs that cover this, though.. Electron Forge actually could use this.. I have a pull request in https://github.com/electron-userland/electron-packager/pull/541.. This sounds like an electron-packager-interactive bug to me.. Yep, we added optional arch support in 8.0.0, as of the writing of this comment, -interactive is pinned to 7.x.. For what it's worth, I filed a pull request: https://github.com/Urucas/electron-packager-interactive/pull/18. @miftari0 you have two workaround options:\n\nUse the existing released electron-packager-interactive and specify a target architecture (do not leave it blank) until the maintainer of electron-packager-interactive merges my pull request to update its dependency of Electron Packager (not Electron) to version 8.x.\nInstall my branch of electron-packager-interactive  that is the basis for the pull request. This requires you to install an NPM module from a git branch, the instructions for which can be found at the NPM website.. Could you add a regression test for this?. Since the original issue reporter has not responded to the request for changes in about a month, I'm going to assume that they either don't have the time to work on this or decided not to pursue this PR. If I'm incorrect, they can respond with an updated pull request, and I'll reopen.. I don't suggest using NPM and Bower in the same Electron app. If you decide that you must, you'll probably need to adjust Node's module search path to look in your bower_components folder so that require works the way you want it to.. It would help if you provided an example repo that contained your problem.. @ssjzhong without any more context, my guess is that you'd probably need to run npm install --production inside of the electron folder that you copied to dist, before running electron-packager dist.\n\nFor future reference, it's probably better to go to the community forums rather than old issues, because I have limited time to help troubleshoot users' problems (in addition to maintaining the project itself), and there are more people looking at the community sites.\n. > Do you have any plan to support getting the node_module from the parent path.\nNo, the cost (new complex code that needs to be maintained) outweighs the benefits (a use case for a small fraction of the userbase).. > I've tried specifying them by name in the unpack argument, but it seems it accepts only one file name.\nunpack also takes a glob expression, perhaps try that.\n\nPS: As an aside, quick question if you'll permit me: Is there some way to pack into asar only one specific folder, and have the rest unpacked?\n\nDoesn't look like it. I believe the only way to do it is to specify all of the folders you want unpacked via a glob in unpackDir, otherwise the folder structure may not be preserved. You may have to change the asar module if you don't want to use the workaround. (All of the asar options/operations are passed through to that module.). Hrm. Try setting DEBUG=*and then pasting the Electron Packager output in a gist (because that's the ultra verbose setting).. That is extremely strange. The last two debug lines should be flipped, for one.\nIt looks like your temporary directory is on a different drive than your app's working directory. Could you try having your working directory on the same drive as your temporary directory? (It shouldn't matter, but I have a bad feeling about this.). I still think this is Windows-specific. Is it possible to try with a different host platform? (keep the target the same). Fair warning, since this appears to be a Windows-specific issue, it may be a while before I find the time to boot up a Windows VM and debug this.\nIf you would to try debugging this yourself, this is what I'm going to do: put a bunch of debug statements in the initializeApp and win32 code and see which function call it runs before it stops.. Yeah, I imagine it's Windows-internals-specific.\nI still haven't found time to debug this and would appreciate someone else who's motivated to follow the instructions in my earlier comment and post the results here.. @mmmmeng3 \n\n--version=electronVersion\n\nThat's not what that deprecation message means. Use --electron-version instead of --version. This will be clearer in the next release.\nI still need a volunteer to debug this.. It would really help if someone could make a minimal testcase that reproduces the problem. Using the electron-quick-start repository as a base, could someone please create a minimal Electron app that illustrates this issue, and post a link to it here? The repository linked in the issue summary has far too many dependencies to figure out which in the dependency tree might be causing this.. @englishextra that doesn't actually reproduce the problem. You need to modify electron-quick-start to be packageable.. To be clear to future commenters: this only affects Windows.\n@arekkas thank you for the log.\nThis confirms my suspicion from my earlier comment. Someone who has this problem, please try the following: put a bunch of debug statements in the initializeApp function (inside common.js) and win32.js file and see which function call it runs before it stops.. @arekkas, I appreciate you taking the time to look at this. This is the first operation. This is the second. I take it you're saying it's the second (because 0-based indexes)?. @arekkas Nope, I haven't even released that yet :smile:. @arekkas just for completeness's sake, could you try with Electron Packager master? I want to make sure it's still a problem in the latest fs-extra before I go asking that you escalate this to the upstream module's issue tracker.. I think you can just say npm install $GIT_URL.. @arekkas thanks for filing the issue, it is greatly appreciated.. Evidently, try the latest Node 7. . I'm going to close this, since there's a workaround and it appears to be a Node problem, not an Electron Packager problem.. Could you see if it's just My App Helper that crashes, or if it's My AppHelper that also crashes?\nI can review a pull request that checks the application name (not just productName) to see if it ends in \"Helper\" (or whatever the earlier investigation turns up). (I don't really have time to write it myself this week.)\nI think you should also report this upstream (electron/electron). I have no idea if this is fixable there, but it would be nice to know either way.. I think the whole build should fail, because you're going to need to rename the app anyway (and having an app named differently on different platforms is not ideal).. What exactly is the message when you use homebrew? Because I don't want to link to a specific Wine version announcement unless it's necessary.. There's a really long thread about it here: https://github.com/electron-userland/electron-packager/issues/396\nTL;DR: I know about the bug, I just don't know about a good way of fixing it. I feel like just adding /electron-packager/ to the default ignore list is a bit heavy-handed.. Electron Packager does not create Windows installer files, it only customizes your app and prepares it for packaging into an installer. What you want is Electron Forge, and the windows installer configuration details is here.. Please file a bug in the Electron Forge project (I think it has to do with the version of Electron you're using). With regards to your Electron Packager problem, my suspicion is that you're not setting main in package.json to an appropriate value.. Yup, I've notified the maintainer of electron-prebuilt-compile.. Use 1.4.12 temporarily.. I think the relevant thread is https://github.com/electron-userland/electron-forge/issues/66#issuecomment-270547794.. Unfortunately, this error comes from rcedit, not Electron Packager. Could you please file a bug in the rcedit issue tracker? (And link it here, if you could.)\nWe can't do anything actionable on this bug (other than possibly version bumping node-rcedit when that gets released, if it ends up being a minor release instead of a patch release), so I'm closing it.. Mac App Store apps aren't my area of expertise, but there's something about app sandboxes in Electron's Mac App Store Submission Guide.. My guess is that it's probably a caching issue. Try copying the already built EXE to a different machine.. Just so I'm clear, when I say \"caching issue\", I mean some sort of built-in Windows icon cache.\nMy inclination is that this problem does not originate with Electron Packager. This is because Electron Packager passes all of the win32 target icon information verbatim to the node-rcedit module. If it doesn't have to do with the Windows icon cache, then it's a bug either there or in rcedit.. @englishextra I'm not sure that's what the problem is.. My inclination is that this is either an Electron or a general OSX issue. There's nothing in Electron Packager specifically that would limit access to the locale depending on the method of opening the app.. The only thing I can think of is that something in one of the .plist files is the culprit. For OSX builds we do not modify the binary, only rename it. Unfortunately, my area of expertise is not OSX apps (and I do not own a Mac), so I can't really debug this.. It occurs to me that open ./electron-quick-start-darwin-x64/electron-quick-start.app/Contents/MacOS/electron-quick-start and open ./node_modules/electron/dist/Electron.app . are comparing apples and oranges. If it was comparing open Electron.app . vs open electron-quick-start.app or open [...]/Contents/MacOS/Electron . and open [...]/Contents/MacOS/electron-quick-start, it would make more sense.\nAt any rate, no one's stepped forward to look at this, so my opinion is still the same as my earlier comment. As a result, I'm closing this due to lack of data, but if there's new evidence, I will be happy to consider reopening.. PR filed: #560. Thanks for the suggestion! I'd rather give warnings than errors.. Thanks for reporting, this is a duplicate of #544. @bartbouten please run SET DEBUG=\"*\", re-run your electron-packager command, and please paste the output in that issue.. Have you tried using the derefSymlinks option? (--deref-symlinks if you're using the CLI). Since the original issue reporter has not responded to the request for additional information in over two weeks, I'm going to assume that they either found the answer in another manner or decided not to pursue this issue. If I'm incorrect, they can respond with answers to the questions posed, and I'll reopen.. Thanks for the pull request, but I'm opting to just modify just one line in the readme: fe5b35b7145710fc16ef00c3362ff0927adf6771. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n\nConsole output when you run electron-packager with the environment variable DEBUG=electron-packager. If you are using npm run to execute electron-packager, run the electron-packager command without using npm run and make a note of the output, because npm run does not print out error messages when a script errors. Please include the stack trace if one exists.\n. Since the original issue reporter has not responded to the request for additional information in about two weeks, I'm going to assume that they either found the answer in another manner or decided not to pursue this issue. If I'm incorrect, they can respond with answers to the questions posed, and I'll reopen.. The word \"output\" does exist exactly once in the API docs, in the docs right below the out parameter. The word \"directory\" is in the description of the out parameter twice.\n\nThat being said, it is a fair point that the documentation for out could be better, and I would welcome someone submitting a PR to reword it (and also add some explanation that the out parameter becomes part of the ignored directories, if it's not the same as the application directory).. Pardon the obvious question, but does your app have a package.json file in the directory where you're running Electron Packager from?. In order to debug your problem further, we need a minimal testcase to reproduce your problem. Using the electron-quick-start repository as a base, could you please create a minimal Electron app that illustrates the issue you described, and post a link to it here?. @kasperfred this is a different problem that what the issue reporter is describing. You are definitely running Node 0.12, from your npm run-script build output:\nnpm ERR! Windows_NT 6.3.9600\nnpm ERR! argv \"C:\\\\Program Files (x86)\\\\nodejs\\\\\\\\node.exe\" \"C:\\\\Program Files (x86)\\\\nodejs\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js\" \"run-script\" \"build\"\nnpm ERR! node v0.12.2\nnpm ERR! npm  v2.7.4\nElectron itself I think runs Node 6.. > electron-packager needs your global Node 4.0 or above to package your app\nAnd electron comes with its own nodejs which is important for your app, and not for packager.\n@englishextra did I not say that in my comment?\nI don't think he needs to show his package.json, it's pretty clear that he needs to upgrade Node on his system.. @englishextra\n\n5 error install Couldn't read dependencies\n\nIt's pretty clear what that error means from the successive error messages:\n15 error package.json ENOENT, open 'C:\\Users\\Kasper\\Desktop\\test\\package.json'\n15 error package.json This is most likely not a problem with npm itself.\n15 error package.json npm can't find a package.json file in your current directory.. You shouldn't need to ignore my-app-darwin-x64 manually. If you do, that's a bug.. Could you please run your gulp command with the environment variable DEBUG=electron-packager and paste the output here?. Just so I'm clear, somewhere in /Users/rico345100/Desktop/work/aladdin-wallet-pc/aladdin-wallet-pc-darwin-x64 there's a node_modules directory with a bunch of babel modules in it? If that's the case, what is the absolute path of that directory?. Thanks for the contribution, I think we'd want a better theme though. And possibly have a better index page, that was basically a mirror of the readme. (I have no idea how to do that.)\n@MarshallOfSound we should probably figure out what a \"Userland\" theme is and apply it to both Packager and Forge websites.. > Which theme would be better?\nSee my comment to @MarshallOfSound - basically it would be something similar (but I don't think it should be quite the same) to https://beta.electronforge.io/.. Hmmm. I think you should add\n```\n[ci skip]\n```\nTo your commits until they get squashed. I don't think this PR should trigger CI for now.. Oh, that's much nicer.. Is renaming the readme really necessary?. Also, sorry about the merge conflict. I was messing with the GitHub Pages settings and I didn't realize that it would commit to the repository.. I know it's a bit more work (and I might do it if you decline, which is a completely fine decision), but I'm thinking that Travis should (re)create the gh-pages branch on every master commit, similar to how travis-cargo works for Rust projects. That also means that we can use a custom theme.. In order to debug your problem further, we need a minimal testcase to reproduce your problem. Using the electron-quick-start repository as a base, could you please create a minimal Electron app that illustrates the issue you described, and post a link to it here?. Since the original issue reporter has not responded to the request for additional information in about two weeks, I'm going to assume that they either found the answer in another manner or decided not to pursue this issue. If I'm incorrect, they can respond with answers to the questions posed, and I'll reopen.. This is offtopic for Electron Packager, because it doesn't handle creating installers.\nHowever, with Electron Forge (which uses Electron Packager), you can build installers/packages that handle dependencies. Specifically for Windows, it looks like you should be using https://github.com/mongodb-js/electron-squirrel-startup. I haven't used it myself, so if you have questions about it, please feel free to ask in one of the Electron community forums.. @englishextra This project follows the Electron community's code of conduct, I would ask you to please be more respectful and empathetic towards issue reporters.. @englishextra it does. This issue reporter did not violate the code of conduct.. @englishextra what you said in https://github.com/electron-userland/electron-packager/issues/577#issuecomment-277915907 can be interpreted by a reasonable person like you're scolding the issue reporter for not being able to state their question fully-formed and using the issue reactions in possibly a different way than you do.\nFrom the code of conduct, comments should strive to be (picking the relevant ones in this case):\n\n\nUsing welcoming and inclusive language\nBeing respectful of differing viewpoints and experiences\nShowing empathy towards other community members\n\n\nEnglish might not be your first language, so I'm going to give you the benefit of the doubt and assume that you did not mean your comment to have malicious intent. However, I would ask you in the future to reread comments before you post to make sure that what you say cannot reasonably be interpreted in a negative way.\nThis is the last comment I'm going to post on this matter.. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n\nWhat version of Windows are  you using? Which architecture is it? (32-bit, 64-bit, ARM?)\nHow did you install Electron Packager?\nHow are you trying to run Electron Packager? Assuming you're using a console, which console program are you using? cmd.exe? powershell? cygwin? Something else? (I'm mostly confused as to what a cmdlet is.). Have you tried running it through an NPM script?. So what you're saying is that npm build doesn't work. If that is the case, try uninstalling Electron Packager globally and add it as one of the devDependencies.. FYI, it is not recommended to install the electron module globally. That just introduces more problems down the road.. @j-f1 It looks like there's a problem in win32.js, take a look at the test output.\n\nAlso, what part of the testsuite is not running locally?. Could you also add a NEWS entry? (An entry under both \"Changed\" and \"Deprecated\".). > The problem doesn\u2019t make sense. Presumably, the files are minified somehow\nI think this is an artifact of the code coverage module.. I'm going to leave this open for a week or so to gather any comments from the community.. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\nIn your cmd.exe command prompt, run SET DEBUG=electron-packager, then run your electron-packager command and paste the output here.. Oh, I see what the problem is. You set the first argument as the path to the main script. Per the documentation, the first argument is sourcedir:\nsourcedir          the base directory of the application source. @MarshallOfSound FYI, it's win32metadata \ud83d\ude01 . Additionally, this is not an error, this is a warning message.. My first instinct is that the main key in package.json is set to index.js but you named the entry point script something else.. In order to debug your problem further, we need a minimal testcase to reproduce your problem. Using the electron-quick-start repository as a base, could you please create a minimal Electron app that illustrates the issue you described, and post a link to it here?. You may be better off using Electron Forge instead of hand-rolling your own Electron app build system using webpack and Electron Packager. At the time of this comment, there's really only one reason to use webpack with Electron apps, it's documented here.. That doesn't make any sense to me. Here are the changes between 7.6.0 and 7.7.0: https://github.com/electron-userland/electron-packager/compare/v7.6.0...v7.7.0\nHere's the error message in the rcedit.exe source: https://github.com/electron/rcedit/blob/1c9920ac153e6d4cd2d63ddb4148a323e4b94d2e/src/main.cc#L107-L108\nI am not a Windows dev, so I would suggest filing a bug in the rcedit issue tracker and seeing if someone responds.\n. @hlfshell I think I know what the problem is. Could you link a gist of your package.json file?. @hlfshell FYI, you should remove electron-prebuilt and put electron in your devDependencies. But that's not relevant to your issue.\nHmmm. So I figured the problem was that in 7.7.0, we started using version in package.json to set ProductVersion and FileVersion in the Windows app executable. I haven't tested this, but try setting --app-version= (blank) and see what happens.. @hlfshell oh, leave it as --app-version=, don't set a value if possible. It's probable that it might not actually work, though.. @hlfshell Do you happen to have access to a different machine? It can have the same antivirus or whatever.. Just searching for a difference. Also, If you have access to a Mac/Linux machine, I think that would solve your problem. (assuming you install Wine, etc.). I found this, it might be related: https://github.com/electron/node-rcedit/issues/6#issuecomment-157574430. I was more referring to the comment that it supposedly doesn't work with Node, but does if you invoke rcedit directly.. @JAA17 The EPERM error is a different error, please file a different issue.. At this point I would suggest trying to use Electron Packager with the network shut off (assuming you already have prebuilt Electron cached on the machine), given your network antivirus comment.. @mikezila has it ever worked for you? Is it possible to try using a real Windows machine, a Windows VM, or an earlier version of Wine?. There are a few problems with the command line for your build script:\n\nYou have two .s, that makes it so that the name of your app is ., which I assume is incorrect.\nYou specified both --all and a specific arch/platform combination. They are meant to be mutually exclusive.\n--platform-win32 and --arch-x64 are not valid parameters. Assuming you remove --all, they should be --platform=win32 and --arch=x64, respectively. Please note that the hyphen was replaced with an equals sign.. By the way, in the future, you should run the command outside of npm run to see what error messages are printed out the next time you have this kind of problem, because npm run does not show any of those errors. (It is a really annoying limitation of NPM.). Could you please give an example of what you mean by bracket? People have a tendency to call different characters brackets.\n\nAnyway, the ignore syntax is just regular expression syntax.. FWIW, () are generally called parentheses.\nBoth of those kinds of brackets are considered to be special characters in regular expression syntax (which I linked to earlier). You need to escape them with backslashes (\\). Depending on how particular NPM is, you may have to use multiple backslashes to get it working.. I don't know how backslashes interact with NPM + CMD on Windows. If you want to avoid trying to debug that, I suggest either replacing the electron-packager command with a Node script that uses the Electron Packager API, or use Electron Forge (it's built on top of Packager, and you can import existing Electron projects).. Another possible solution is to rename the folder so that there's no parentheses/brackets.. @Judzhin Since ignore values from the command line are regular expressions, that suggestion can be problematic if one of the files in your app (such as a necessary file in your dependencies) contains the string dev.. The only failure is a consistent one on Node 5/OSX. Very strange and doesn't seem to be related. I'm inclined to merge this PR and ignore that build on master.. Is this the path in the error verbatim?\n\nc:\\Users\\Jon\\Desktop\\Test\\distwin32a\\mytest1-win32-x64\\resources\\app\\node_modues\n\nI ask because normally it's named node_modules.. Just so I'm clear, does the folder actually exist? If so, what are the permissions on it?. What happens when you remove --overwrite and get rid of the out directories manually?. So you can only reproduce the EPERM error when you use --overwrite?. I have updated the issue summary accordingly.. Just for completeness's sake, could you provide full backtrace when you run electron-packager . --electron-version 1.4.15 --tmpdir=false --platform win32 --icon ./assets/icon.ico --out ./distwin32a --overwrite without using npm run build-win32. An example of a backtrace is in the issue summary of #598, after the line that says Error: ENOENT: no such file or directory. I suspect this line is the problem: https://github.com/electron-userland/electron-packager/blob/16752bdbb5fe987a9a9f15e120b85f3863168144/index.js#L201\nIf that is the case, the problem is most likely in the fs-extra  module, which defines fs.remove.. OK, so this isn't about --overwrite, it's about --prune. According to your output, npm prune --production can't complete (which removes devDependencies from your bundled Electron app). Could you please try removing the node_modules folder from C:\\Users\\Jon\\Desktop\\Test, running npm install as a normal user (not Administrator), and try running the electron-packager command again?. If you only have one account, then are you running npm install with elevated permissions or something similar? I'm trying to figure out why you're getting that error. In any event, wipe out node_modules and reinstall it.. Could you check the permissions of the folder C:\\Users\\Jon\\Desktop\\Test\\distwin32a\\mytest1-win32-x64\\resources\\app\\node_modules? Is there anything special about it?\nAlso, This has become more of an NPM problem than an Electron Packager problem, I think. Could you search in the NPM issue tracker for EPERM and npm prune on Windows?. In order to debug your problem further, we need a minimal testcase to reproduce your problem. Using the electron-quick-start repository as a base, could you please create a minimal Electron app that illustrates the issue you described, and post a link to it here?. I can't reproduce this on Linux. I've run both build-linux and build-osx repeatedly using your zipped app and did not get the rmdir error you experienced. I don't have a Windows environment, so this is difficult for me to debug further.. If you want to try using yarn instead, there's some instructions here (it involves editing the Electron Packager code): https://github.com/electron-userland/electron-packager/pull/614#issuecomment-285174521. Since the original issue reporter has not responded to the request for additional information about whether yarn works in over two months, I'm going to assume that they either found the answer in another manner or decided not to pursue this issue. If I'm incorrect, they can respond with answers to the questions posed, and I'll reopen.. Evidently this doesn't happen all of the time \ud83d\ude15 \nhttps://travis-ci.org/electron-userland/electron-packager/jobs/205659321. I haven't seen this in over a month, so I'm inclined to revert #599 and close this.. Just so I'm clear about the feature you're requesting, you could like Electron Packager to update the version field of the Electron app's package.json if, for example, --app-version=1.2.3 is specified on the command line? If this is accurate, what is the use case for this feature?. I'm not inclined to add this functionality to Electron Packager, partly because I don't see a broader use case for it, and partly because I think it will make the code base messier than it already is.\nHowever, you can implement it for your app by using an afterCopy hook with the packager API:\n```javascript\nconst packager = require('electron-packager');\nconst packagerOptions = {\n  // ...\n  afterCopy: (buildPath, electronVersion, platform, arch, callback) => {\n    // read package.json from buildPath\n    // modify deserialized package.json\n    // write new package.json contents\n    callback();\n  }\n  // ...\n};\npackager(packagerOptions, (err, appPaths) => { / ... / });\n```. I'm confused, I don't see a FreeBSD build in the Electron GitHub releases.. @jbenden thank you for the pull request, however, the Electron project does not support FreeBSD-specific builds. Electron Packager only supports target platforms and architectures that upstream Electron supports. You should be able to use Linux builds using FreeBSD's Linux binary compatibility feature. If you would like to have native FreeBSD builds of Electron, please file an issue at the Electron issue tracker.. I will be happy to reopen when upstream Electron provides official support for prebuilt FreeBSD binaries. Until then, I can't accept this PR as these changes will lack test coverage, and more importantly, Packager will incorrectly advertise that it supports creating native FreeBSD bundles.. When this PR is ready again, it would be much appreciated if you could fill out the pull request template and insert it into the PR summary.. Thanks for the PR! The test needs fixing, too.. Why are you trying to run your packaged Electron app as root?. Also, could you please explain the difference between \"command line mode\" and \"gui mode\"? Electron is a GUI-based application framework, it doesn't make any sense if you're trying to run an Electron without an X11 (or I guess Wayland) environment running.. >> Why are you trying to run your packaged Electron app as root?\n\nI do not understand your question\n\nIn your first screenshot, you're running your test Electron app as the root user. That's generally a bad idea.. > If not root operation, it should be what users to run? I do not know much about linux.\nYou would run as an unprivileged user.\n\nYes, I am very strange to do so. In fact, my project wants to run on the window, mac platform, so need gui. But I now want him to run on the linux platform, but the linux platform is generally command line mode\nIf you do not need gui, electron is not necessary.\n\nAccording to my tests, you cannot run Electron apps in \"command line mode\" (meaning, not inside an X or Wayland environment like your latest screenshot). Here's how I tested it:\n\ngit clone https://github.com/electron/electron-quick-start && cd electron-quick-start\nRun npm install\nReplace the contents of main.js with:\n\njavascript\nconsole.log('This will not run');\n\nRun DISPLAY=:nonexistent $(npm bin)/electron .; echo $?\n\nThis only prints out 1 (the exit code), which means that Electron could not start up correctly and had to exit.\nIt sounds like you're going to have to figure out another way to support non-GUI users (for example, a separate app without using Electron), or reconsider supporting them all together.. This appears to be a problem with electron-machine-id: https://github.com/automation-stack/node-machine-id/issues/9. Hey, I've merged #612. The downside is that you need to resolve a merge conflict. The upside is that it should be easier to write unit tests for your feature.. Do you mind rebasing? GitHub's diff has gotten rather messy.. Hmm. Your rebase caused the GitHub diff to be really weird. In any event it's probably not worth rebasing until the other two PRs are dealt with.. Still blocked on the other two PRs.. I'm going to rebase this PR this weekend and see what's left, because I've forgotten. The PRs that were blocking this are now merged/released. From CI, it looks like there's at least linting failures. And the docs still need to be updated.. I like this, I've been waiting for someone who has a Windows machine to write something that I can understand for sensible defaults for the metadata fields \ud83d\ude05 \nAbout CompanyName: per https://github.com/electron-userland/electron-forge/issues/160 we should probably be more specific about this, since it can be an Object.. @jacobq I think this one doesn't absolutely require Windows instances, but if you're volunteering them, a) seeing if you can reproduce #590 and/or #597 and b) figuring out what's going on in either would be greatly appreciated \ud83d\ude05 . > About CompanyName: per electron-userland/electron-forge#160 we should probably be more specific about this, since it can be an Object.\nThe person who implements this should use the parse-author module like in electron-userland/electron-forge#161.. FYI, running node test/win32 goes from 1m14s (master) to 10s (PR).. Sounds like you need to check the owner of the /home/corey/.wine folder and modify it to be, I assume, corey.. If you have to use sudo to run Electron Packager, there's something odd about the permissions in your filesystem. Do you do anything strange like use NFS or some other network-based file system?. In order to help you with your problem, we're going to need more information about it. In particular:\n\n\nWhat version of Electron Packager were you using when this worked successfully? What version of Electron Packager are you using now?\n\n\nWhat command line arguments are you passing? Alternatively, if you are using the API, what\nparameters are you passing to the packager() function?. I assume you would use version control plus npm list | grep electron-packager to find the Packager version that last worked for you. . Thanks for the pull request. I'm worried that this is a pretty small edge case that will make using prune (and Electron Packager) more confusing.\n\n\nInstead, could you try to install yarn and replace npm prune --production with yarn install --production in the code? I want to see if using an alternate package manager solves this problem for you.. I would rather have a pull request that implements https://github.com/electron-userland/electron-packager/issues/518 (and https://github.com/electron-userland/electron-packager/issues/515 - the spec for both is in https://github.com/electron-userland/electron-packager/issues/515#issuecomment-257167905). Are you interested?. Does this error occur during the prune step?. This code in rcedit causes the error: https://github.com/electron/rcedit/blob/b80739978f2fa3b0244784c21920aa72403563af/src/rescle.cc#L429-L433\nIt looks like the exe gets corrupted somehow?. That is pretty likely. I'm closing this issue in that case.. You need to either:\n run npm install --save-dev electron\n add --electron-version=1.6.2 to the electron-packager command (Electron 1.6.2 is just the latest stable version at the time of this comment - any version will do)\nI suggest the first option.. > i have the electron prbuilt instaled and my code with node modules are 184 mb now i gon install and the electon and my code is gona be 230 mb that is problem ???\nI'm not sure what you're asking. Yes, it's going to be pretty big when you package it. That is the downside to building Electron apps (instead of, for example, writing a native desktop application). I did a quick analysis of Electron 1.3.x in another issue - it was ~100MB just for the 32-bit Windows runtime.\n\nmy package.json is like this were to put the --electron-version ??\n\nYou either needed to do one or the other, not both. You don't need to add the --electron-version flag since you added electron to devDependencies.. For tests, I think what I'd like to do is have Travis/AppVeyor download Yarn/cnpm and make sure they work correctly with pruning.\nThe test reference to NPM should probably be configurable via an environment variable.. I've refactored this PR so that it also works with cnpm, and added docs/tests.\n\nThe test reference to NPM should probably be configurable via an environment variable.\n\nI decided against this. I'm OK with having people working on tests needing to have NPM installed.. Need to fix calling cnpm on Windows (per CI failure) and also add a NEWS entry.. I'm no longer calling cnpm on Windows (see: https://github.com/electron-userland/electron-packager/issues/515#issuecomment-297604044). I just need to squash my commits, and I think I'll merge.. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n\n\nConsole output when you run electron-packager with the environment variable DEBUG=electron-packager.\n\n\nPlease provide either a failing minimal testcase (with code) or detailed steps to reproduce your\nproblem. Using electron-quick-start is a good starting point.. Since the original issue reporter has not responded to the request for additional information in over two weeks, I'm going to assume that they either found the answer in another manner or decided not to pursue this issue. If I'm incorrect, they can respond with answers to the questions posed, and I'll reopen.. > I cant understand what do you mean by [debug instructions]\n\n\nRun SET DEBUG=electron-packager before running the command on Windows.. Please don't paste output of npm run commands, they do not capture the command's stderr/stdout. (This is a long-standing NPM bug.)\n\nFatal error: Unable to set icon\n\nIf it's unable to set the icon, then one of the following is true:\n\nThe icon doesn't exist\nThe icon is corrupted\nThe icon isn't the correct dimensions\nThere's a bug in rcedit. If everything you say is accurate, then I'm inclined to believe that it's a bug in rcedit. Packager doesn't do anything except pass the icon path to rcedit, and it modifies the executable accordingly.. I'm not inclined to reopen this issue. This should not be a catch-all for a generic error message by rcedit (which needs to be more specific when possible). For the issue described by @positlabs, it would help to see what the electron-packager debug says is being passed to the rcedit module.. See also: https://github.com/electron/rcedit/pull/74, which is now in 1.1.0 of the rcedit module.. I'm not seeing a solution there.. s is probably because I'm not good at C++ :disappointed:\n\nRegarding the actual error, it appears to be a file that rcedit doesn't consider to be an ICO file  that it can use.. Honest question: Are the docs for the icon option incomplete? https://github.com/electron-userland/electron-packager/blob/v12.1.0/docs/api.md#icon\nIf so, do people have suggestions for improving it?. > It's difficult to find the documentation that you need when working with things like electron-forge.\nHmmm. It's linked in the README... Which Forge docs were you using?. The electronWinstallerConfig section wasn't what I was talking about. Additionally, the rcedit errors were updated recently. Were you getting errors like this? https://github.com/electron-userland/electron-packager/issues/621#issuecomment-389590753. You can't run Electron Packager on a machine without Node, as it's written with Node and not a compiled language.\nYour workflow should look like this:\n\nAccess a machine with Node installed\nInstall Electron Packager using the instructions in the readme\nRun Electron Packager on your Electron app\nCopy the output directory for the given platform/arch onto the machine without Node that you wish to run your Electron app\nRun your Electron app. Are you trying to run it from a FAT32 formatted drive? It sounds like the executable doesn't actually have executable permissions.. There's a way to do this listed in the API docs:\n\n\nAlternatively, [the ignore parameter] can be a predicate function that, given an absolute file path, returns true if the file should be ignored, or false if the file should be kept. This does not use any of the default ignored directories listed above.\n\nObviously, you can't do this on the command line. If you don't want to write our own build script, you can use Electron Forge (which uses Electron Packager), and then use the JS file config method listed in the Forge docs.. Since the original issue reporter has not responded to the request for additional information in about two weeks, I'm going to assume that they either found the answer in another manner or decided not to pursue this issue. If I'm incorrect, they can respond with answers to the questions posed, and I'll reopen.. You can do one of two things:\n\nspecify --ignore more than once: --ignore='browserify-cache\\.json' --ignore='embedded\\.js'\nUse regular expression syntax: --ignore='browserify-cache\\.json|embedded\\.js'\n\nIt should be noted in the CLI help that you can specify certain parameters multiple times.. It's kind of a big undertaking to convert the entire project to do so. In the meantime, you can use the pify module, which is what Electron Forge uses to interact with Packager.. This would also be a breaking change and thus require a major version bump.. This is a breaking change because other users might rely on the existing behavior. fs-extra recently underwent a major version bump to do the same thing.. > Dos this mean that to distribute the executable, I'd have to send two files, hello and libnode.so?\nIn order to distribute an Electron app, you need to distribute all of the files in the out directory. You can't really change that sort of thing in Electron Packager. If that were to happen, and that's a big if, this would need to happen in the upstream Electron project.. You would zip up the myApp.app \"app\" (it's really a folder) inside the myApp-darwin-x64 out directory and then attach that zip file.. I'm not a macOS expert, but if I had to guess, it's one of two things:\n\nYou're trying to run an app directly from the email, instead of saving it somewhere first. I can't imagine macOS lets you do that.\nmacOS sandboxing is preventing you from doing that.. Thanks for the PR, but it's purposefully invalid JSON.. What does your package.json look like?. So you're using a two-package.json solution? That's not a recommended way of packaging. You'll probably have issues with the main key.. That shouldn't be an intermittent error. It indicates that the main script pointed at in your packaged package.json does not exist anymore. My only suggestion at this point is to look at  your app code to see if the main script gets deleted somehow.. Run DEBUG=electron-packager ~/Desktop/out/electron-packager ~/code/electron-quick-start/ QuantumPilot --platform=all --icns=\"~/Desktop/QuantumPilot.icns\". Oops. I copy/pasted incorrectly. You shouldn't use ~/Desktop in the icon parameter - the ~ won't be expanded (and the parameter name should be spelled correctly). Try using:\n\nelectron-packager ~/code/electron-quick-start/ QuantumPilot --platform=all --icon=/Users/quantum/Desktop/QuantumPilot.icns\nBy the way, that is a pretty old version of Electron  you're using.. Update the Electron version in package.json. Please keep in mind that this may change the Chromium and/or Node version if the major/minor versions change, so you may need to modify your app accordingly.. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n\n\nConsole output when you run electron-packager with the environment variable DEBUG=electron-packager, for example DEBUG=electron-packager electron-packager ./ Client --platform=win32 --icon=icon.ico on macOS or Linux.\n\n\nPlease provide either a failing minimal testcase (with code) or detailed steps to reproduce your\nproblem. Using electron-quick-start is a good starting point. Alternatively, please provide your package.json file.. Since the original issue reporter has not responded to the request for additional information in about two weeks, I'm going to assume that they either found the answer in another manner or decided not to pursue this issue. If I'm incorrect, they can respond with answers to the questions posed, and I'll reopen.. Thanks for filing a bug, but this flag is not used when you are building for Linux targets. From the API docs for --icon:\n\n\n\nthis option is not required, as the dock/window list icon is set via the icon option in the BrowserWindow constructor. Please note that you need to use a PNG, and not the OS X or Windows icon formats, in order for it to show up in the dock/window list. Setting the icon in the file manager is not currently supported.. It doesn't actually do anything, though. What you're seeing with electron-installer-debian is that you're loading the Electron app via a .desktop file and the window manager is using the icon referenced there. If the icon doesn't show up when you don't use the .desktop file, I would consider that a bug in Electron, not Electron Packager.. Without looking at your code, I would guess that in the constructor, you're using a relative icon path instead of a path joined against __dirname.. I would see what the path returned with app.getAppPath is and then see if the path you created for the icon actually exists.. The app directory that you specify in Electron Packager is assumed to have the package.json at its root. Seems like what you want is to copy package.json into your build directory at the same time you generate your webpack bundles (although I'm not sure why you'd want to use webpack for an Electron app...).. Per the documentation, it has only been implemented for the darwin/mas targets. I would happily review a pull request to add this functionality to Windows (and Linux) targets, assuming that the request also includes documentation and sufficient tests.. Also, it's quite odd that --extraResource worked.. It sounds like the Raspberry Pi 3 (or at least yours) doesn't have enough memory to build an Electron app. I suggest building it on a different computer (any of Windows/macOS/Linux on x86/x64 architectures), and just specify the target platform as linux and the target arch the same as you're doing right now.. There's something pretty wrong here:\n\n{ dir: '/Users/torbenpoulsen/github',\nname: '',\nI'm assuming your package.json file is in /Users/torbenpoulsen/github/eApp/package.json. I would file a bug in the electron-packager-interactive project. I say this because it's passing a blank string to name, and the wrong directory to dir (which should be the directory where your package.json is), even though  you specified the source directory.. I don't see an error on your side, although I'm not too familiar with how electron-packager-interactive works. As I suggested in my earlier comment, you should file an issue in that repository.. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n\n\nWhat does your package.json look like? Does the file referenced in the main key exist?\n\n\nPlease provide either a failing minimal testcase (with code) or detailed steps to reproduce your\nproblem. Using electron-quick-start is a good starting point.. It looks like you did modify it if your source directory is in ./app as your packager command indicates.\n\n\nIs there an app/package.json? Does main.js exist or is it in app/main.js?. Your source directory needs to be ., not ./app. The main.js file isn't being packaged, that's why it's not working.. First, you should probably ask whether you actually need to use express. I don't think there are that many use cases where you wouldn't be able to use Node code directly. (Insert caveats about security here.)\nIf you do decide to use it, you'll need to fork the express process yourself when you run the Electron app. I'm not entirely clear on how to do it personally, but I'm sure if you ask your question in one of the Electron community forums, you'll get an answer.. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n\n\nConsole output when you run electron-packager with the environment variable DEBUG=electron-packager.\n\n\nPlease provide either a failing minimal testcase (with code) or detailed steps to reproduce your\nproblem. Using electron-quick-start is a good starting point.. As I mentioned in my previous comment, it would be helpful if someone provided a minimal testcase, instead of a full app, which produces the same result. That way it's easier to pinpoint what's causing the problem.. I'm thinking this has something to do with https://github.com/electron/electron/issues/9323, because this hasn't been a problem before yesterday.. Yep, I just released extract-zip 1.6.5, and I can no longer reproduce this.. I will gladly review a proposal to unify the protocol options. However, it needs to work with the CLI without a lot of hackery, because that is not a maintainable solution. I do not want to have to maintain two different docs just for specifying protocols between API and CLI.\n\n\nThis will obviously also require a major version bump, due to the API change.. Sigh. Apparently the programmatic API has used protocols for a while now.. The dependency extract-zip changed over the weekend, which broke Electron Packager in a couple of ways. If you want to continue to use --tmpdir, you have two options:\n\nUpgrade to the unreleased 8.7.0 (master as of https://github.com/electron-userland/electron-packager/commit/a699abe3f531f6f7876618f4729a144057609917), which should fix --tmpdir=tmp in addition to --tmpdir=false (I just only noticed the latter failed the tests). I am trying to release 8.7.0 sometime within the next 24 hours, although I can't guarantee anything.\nLock extract-zip to version 1.6.0.. That's a problem with upstream, if they had adhered to semver correctly there wouldn't have been a problem.. We are not taking major version updates without explicitly updating the version number in package.json. Please give a specific example of a dependency that changed major versions, without the version number changing in package.json.. OK, let's test your assertion. Please tell me what versions of rcedit and fs-extra your Electron Packager is running. Also, which version of NPM are you running?. As you've mentioned, Electron Packager requires extract-zip 1.x.x, which would normally be fine, because according to semver, minor versions should only have feature additions that do not contain breaking changes. However, there was a change between extract-zip versions 1.6.0 and 1.6.1 (a patch version, mind you) which caused the breakage. So in this case, even limiting to patch version upgrades wouldn't have prevented this.\n\nWhat I would suggest that you do is either use npm-shrinkwrap or switch to Yarn, with its yarn.lock file.. I don't plan on backporting bugfixes to previous major/minor versions of Electron Packager. That's a lot of effort given that I don't get paid to work on this. My position on the current situation is that shrinkwrap/yarn exist to lock dependencies for apps which need to have deterministic builds, regardless of whether upstream developers make mistakes with semver.. Please do not open multiple issues. We can discuss it in the other one.. I do not endorse the idea of starting an Electron app as root. Starting up a web browser engine with administrator access is a large security risk. What you should do instead is run it as an unprivileged user, and then use a module like sudo-prompt to call the app again with a Node script that contains all the logic that requires superuser privileges, but with the ELECTRON_RUN_AS_NODE variable set in the child environment.. An unattended desktop capture sounds dubious. Anyway, try setting win32metadata.requested-execution-level. If that doesn't work, ask in one of the community forums.. There's nothing special about Electron in this sense. I would suggest looking up how to do what you're looking for in a standard Windows application.\nIf you require more assistance than that, please ask in one of the community forums. More people look at those websites that could help you.. I used a search engine to look for \"Electron UAC\" and got http://layer0.authentise.com/electron-and-uac-on-windows.html\nTry using requireAdministrator instead of highestAvailable.\nIf you require more assistance than that, please ask in one of the community forums. More people look at those websites that could help you.. Macs are not my area of expertise, so my guess is that one of a few things could be happening:\n\nYour build/icon.icns needs more/different icon sizes embedded in it for it to work in Launchpad.\nYou aren't specifying an icon when you create a new BrowserWindow (zh-CN docs)\nThe icon is being cached incorrectly by macOS. Search for how to flush the system icon cache.. Per the API docs, set derefSymlinks to false.. macOS sandboxing is probably preventing you from creating/writing to a file within the app. You shoud put your SQLite database in the user config folder, see app.getPath().. Use electron-rebuild, or Electron Forge (which uses both Packager and electron-rebuild under the hood).. You're better off asking in one of the Electron community forums. electron-rebuild is outside the scope of this project.. According to the Electron documentation, Electron releases are built with an Ubuntu 12.04 image.\n\nI don't know whether you're referring to \"SUSE Linux Enterprise 11.4\" or \"openSUSE 11.4\", but if it's the second one, it will probably not work because it's too old (released in March 2011).\nAt any rate, platform compatibility questions like this are more suited for the upstream Electron issue tracker, because Electron Packager doesn't control what the platform requirements are, it just takes the existing upstream binary and customizes it.. Is this 64-bit wine?. 64-bit wine is not currently supported by node-rcedit, see: https://github.com/electron/node-rcedit/issues/22. Yes.. No, you can certainly build Windows packages on non-Windows, 64-bit host platforms. In fact, the CI for this project does just that on both macOS and (Ubuntu 14.04) Linux. On Debian/Ubuntu-derived Linux distributions, if you only have wine64 installed, it prints the following instructions to help you install the 32-bit version of wine:\nit looks like multiarch needs to be enabled.  as root, please\nexecute \"dpkg --add-architecture i386 && apt-get update &&\napt-get install wine32\"\nIf you need instructions on how to do this for CentOS, I would suggest looking in CentOS-specific support channels.. Thanks for filing an issue, but this is not an Electron Packager issue. Packager does not currently handle signing on Windows (or proxy it to another module). The other issue you filed in the electron-winstaller project is a better place for this.. This isn't a use case that I want to support, as the percentage of users in this situation is too low for the amount of code that will need to be written and maintained.\nHowever, you can do this yourself by using the afterCopy hook, with something like:\n```js\nconst path = require('path');\nconst pruneModules = require('electron-packager/prune').pruneModules;\nelectronPackagerOptions.afterExtract = [\n  (buildPath, electronVersion, platform, arch, callback) => {\n    for (const subdir of ['dir1', 'dir2']) {\n      pruneModules(electronPackagerOptions, path.join(buildPath, subdir), (err) => {\n        // ...\n      })\n    }\n  }\n];\n```\n(Code is meant to illustrate, not be the actual solution - it's not quite right. I'd do something like pify + Promise.all.). All of the docs are based on the current state of master. If you want the docs for the released version, you'll need to look at the docs for a given version's tag.\nI have about 3 more breaking changes to do before I release, and I do all of this work in my spare time, so I don't have an ETA, sorry.. Thanks for the feature request, but this already exists in Electron Packager, in the form of the debug module. This is referenced in the CONTRIBUTING documentation.. Since this PR has been out of date for a while and also needs a lot of work, I'm closing it in favor of #711.. Since the original issue reporter has not responded to the request for additional information in about two weeks, I'm going to assume that they either found the answer in another manner or decided not to pursue this issue. If I'm incorrect, they can respond with answers to the questions posed, and I'll reopen.. Get rid of $npm_package_productName from the command. Electron Packager has inferred the app name from the package.json file for a while.\nTangentially, --prune=true has also been the default for a while now.. Oh, you can't rebuild native node modules when the host platform is not the target platform.. The one AppVeyor error is just a network failure.. If there aren't any more concerns about this PR, I'll merge it.. What version of Electron are you using? atom.asar is pretty old.. > I'm using version 1.6.10\nI'm not sure about that.\nIn order to help you with your problem, we're going to need more information about it. In particular:\n\nConsole output when you run electron-packager with the environment variable DEBUG=electron-packager.. See the debugging section of the CONTRIBUTING document that was linked when you created a new issue.. It's because your package.json is using a really old version of Electron, whereas you have a globally installed version of Electron (you should uninstall that).\n\nIf you can upgrade your version of Electron, do so by modifying your electron entry in package.json. If you are unable to do that, you should use electron-compile to compile your JavaScript into something that your version of Electron can understand.. That comes with the prebuilt binary, Electron Packager doesn't create that file.\nBecause of this, I don't see where in the Electron Packager documentation this would go, because we don't describe all of the files that come with Electron itself. Perhaps this should go in the documentation for Electron?. > To me, it would make more sense that this file contains the appVersion or buildVersion, as I see these strings are added in descriptors for OSX X or Windows, but not in Linux.\nThis is because as far as I know, there's no Linux metadata standard that needs things like appVersion, apart from creating distro packages (which is handled by other packages, like electron-installer-debian).. I think that it should be up to the app to implement that, either as a command line argument (--version) or an \"about\" dialog box.. @unindented probably either this weekend or next weekend. I've made several fairly large changes and I've been seeing what happens if I update certain repos that use Packager directly or indirectly.. @unindented in the meantime, if you could use master and see if extraResource breaks for you, I'd appreciate the feedback.. The . is not necessary because your app is packaged. It is necessary when you run node_modules/.bin/electron because it needs to know where your app lives.. I've backported & released this as 8.7.2. I'll rebase & fix up the NEWS entry, then merge onto master.. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n\n\nConsole output when you run electron-packager with the environment variable DEBUG=electron-packager. Please include the stack trace if one exists.\n\n\nPlease provide either a failing minimal testcase (with code) or detailed steps to reproduce your\nproblem. Using electron-quick-start is a good starting point.. Since the original issue reporter has not responded to the request for additional information in about two weeks, I'm going to assume that they either found the answer in another manner or decided not to pursue this issue. If I'm incorrect, they can respond with answers to the questions posed, and I'll reopen.. What are the implications of increasing the limit? Does it increase the amount of memory Packager allocates? (I don't have time to look into it right now and would appreciate it if someone else could.). Reopening since there's a potential solution in #734.. I'm actually considering replacing this code entirely so that Packager doesn't call any package managers to prune, so this is not very high on my list of things to fix.. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n\n\nConsole output when you run electron-packager with the environment variable DEBUG=electron-packager.\n\n\nWhat command line arguments are you passing? Alternatively, if you are using the API, what\nparameters are you passing to the packager() function?\n\n\nPlease provide either a failing minimal testcase (with code) or detailed steps to reproduce your\nproblem. Using electron-quick-start is a good starting point.. If prune was your problem, then you shouldn't put any module that is required when you  run your app in the devDependencies section of package.json.. Try running with the DEBUG=electron-osx-sign environment variable. Apart from that, I would look at the docs for electron-osx-sign, which handles all of the Mac app signing for Electron Packager.. You should file an issue in the electron-osx-sign issue tracker so that @sethlu can review the changes you want to make to the wiki documentation... I would rather have approximate sizes for all of the different targets in a table, so I don't keep getting PRs for this kind of thing.\n\n\nAlso, the test failure is likely due to tests timing out.. I decided on pointing to the Electron releases page(s) instead, as the sizes of the zips there are approximately the same as zipped, minimal Electron apps (for a given platform/arch/Electron version).. Perhaps that's how npm@5 works. All Electron Packager does is run npm prune --production.. Not sure which win32metadata key it is, but you should set ProductName, InternalName, OriginalFilename, and FileDescription to qianbao. They will all have reasonable defaults in version 9 (when it is released).. Could you please see if there's an issue for this in NPM's issue tracker?. That's probably a permissions problem, but it's not something I can help with, you may have better luck on a general Node forum.. @dougludlow your error is a known NPM bug: https://github.com/npm/npm/issues/18380. A workaround is to set packageManager: false in the Packager API, or --no-package-manager with the Packager CLI.. Per the NPM bug, delete any lock files you may have, wipe your NPM cache and re-run npm install before attempting to run Electron Packager again.. You set the Electron version to 1.0.0 when you set --version=1.0.0. According to https://github.com/electron/electron/pull/7898 it was added in Electron 1.4.7.. Either install Electron Packager globally, as described in the readme, or install it locally as @MarshallOfSound mentioned. On Windows, instead of ./node_modules/.bin/electron-packager, I believe it's node_modules\\.bin\\electron-packager.. There should probably be a test added too.. @MarshallOfSound pruner itself is not Node 4 compatible: https://travis-ci.org/electron-userland/electron-packager/jobs/257800435#L2470. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n\nConsole output when you run electron-packager with the environment variable DEBUG=electron-packager. Please include the stack trace if one exists.\n\nIt's possible that the OS X icon cache is corrupt. Have you tried on more than one machine?\nI would also check to see if the electron.icns in the packaged app is the same as the one you're specifying in the command line.\nA couple of things unrelated:\n\n--mac isn't a flag, look into --platform and --arch (although it defaults to whatever the host computer's platform/arch is)\n\n--prune=true has been default for a while now.. Could you check builds/Glimpse-darwin-x64/Glimpse.app/Contents/Resources/electron.icns to see if it's the same icon?. Well, the debug info says it was copied. Is assets/icons/mac/icon.icns a symlink or something? Can you try a different version of Node?. That's probably the OS X icon cache.. I'm pretty sure that this is now an OS X problem, so I'm closing this issue.. That's correct, assuming they don't have the old app that doesn't have the custom icon.. @mlb5000 please file a new issue and fill in the issue template where appropriate.. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n\n\nConsole output when you run electron-packager with the environment variable DEBUG=electron-packager. Please include the stack trace if one exists. Make sure to run the electron-packager command without using npm run and make a note of the output, because npm run does not print out error messages when a script errors.\n\n\nPlease note that:\n\nYou're specifying --electron-version=1.0.0, which is a very old version.\nYou're using NPM 5.3.0, which has known issues with pruning. Please try NPM 5.1.x or 5.2.x (or 5.4.x, when it's released).. Since the original issue reporter has not responded to the request for additional information in about two weeks, I'm going to assume that they either found the answer in another manner or decided not to pursue this issue. If I'm incorrect, they can respond with answers to the questions posed, and I'll reopen.. See: https://github.com/unindented/electron-installer-debian/blob/13b9de71940eb42f4ac720fdccb988f14aa1f198/src/installer.js#L142-L153 for a list.\n\nI would use either electron-installer-debian or Electron Forge (which uses both Packager and electron-installer-debian internally) to create .deb files so you don't have to figure out dependencies yourself.. Could you provide screenshots of the expected and actual behavior? I tried this on my Linux machine and they look the same to me.\nThe block itself is 16x16, but the text is 21x16 and it's overflowing outside of the container.. Can you try a different version of Electron, like the latest stable version? I can't reproduce it here.. Unfortunately, I can't think of a reason why Electron Packager itself would have this effect on the application, as it doesn't modify the Electron binary aside from metadata. It might have something to do with how the default_app behaves (which is what happens when you run electron path/to/app) versus a packaged app. You will probably have better luck looking through the Electron issue tracker, with issues such as https://github.com/electron/electron/issues/9417. In any event, if you can't find the issue already raised, you should file a new one there. They'll be able to help you better.. Due to how minimist works (the command line argument parser we use), you need to specify --no-asar instead of --asar=false (which makes it think the value of the argument is the string \"false\").. Well, there's --no-prune. There's an issue in minimist about documenting --no-.\nThe API docs are written with the JS API in mind.. > [...] sometimes it aids clarity to set parameters explicitly.\nI would suggest instead of using the CLI, instead use the JavaScript API and enumerate all of the Packager options in a build.js file. Otherwise, you're going to hit \"command too long\" problems.. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n\nConsole output when you run electron-packager with the environment variable DEBUG=electron-packager.\n\nAdditionally, -all is not a flag, it needs two dashes, like --all.. A suggestion: try installing Yarn, and using the flag --package-manager=yarn (make sure you're using Electron Packager 8.7.0 or greater). This sounds like something that was reported in https://github.com/electron-userland/electron-packager/pull/614.. Thanks for reporting this, @bengotow. When I have some time I'll look to see what version of OS X I'm running Travis with.\nYou may want to report this at electron-osx-sign as well.. I would first delete your outputted package directories and determine how many files/folders are in your app directory. Copying time is proportional to the number of files/folders. Pruning time is proportional to the total number of modules in devDependencies+dependencies installed, including sub-dependencies.. One quick note while I'm still investigating: electron-packager should not be in dependencies unless you're using it inside your app (as opposed to just packaging your app, like 98% of users).. > copy the folder from temporary location to the dist location.\nThat's slow because you're copying between drives. You might want to set your tmpdir to somewhere on your D: drive.\nI tested moving electron-packager from dependencies to devDependencies and pruning went from 6s to 2s.\nThose two things should change the execution time of Packager noticably.. Another thing you can try is installing yarn and then using --package-manager=yarn.. There is an flag in Packager called --tmpdir.. Also, if you end up running Electron Packager via JS, you probably want to use the JS API instead.. * What command did you use to zip it?\n How, exactly, did you copy it to a Mac?\n What does \"Renamed to RuleWizard1.0-darwin-x64.app\" mean? Did you unzip it first?. I think the answer here is what @MarshallOfSound said, create a Windows installer using one of the methods described above.. I should note that Electron Forge uses both Packager and electron-winstaller under the hood, plus it has an import feature that lets you import an existing Electron project.\nElectron Packager does not generate EXE files that prompts you to unpack files (unless you wrote your app to do that), so I don't know what's going on there. Perhaps if you got him to create a screencast of him opening up your app with that behavior, that would help you figure out what's happening.. First, ignoring node_modules will likely cause your app to not work, because that's where everything in  your dependencies section of package.json is installed. By default, all of your devDependencies are removed when preparing your app.\nSecond, to ignore multiple things, you have two options:\n\nUse the --ignore parameter multiple times\n\nUse the | feature of regular expressions, because as stated in the docs, ignore takes a regular expression.. A few things:\n\n\nPrune is enabled by default, you only have to specify it if you're disabling the feature.\n\nI still don't understand why you insist on ignoring the node_modules directory.\nYou're putting all of your app's dependencies in devDependencies for some reason, which would result in your app not working when prune is enabled. See the NPM docs for when you should use devDependencies: https://docs.npmjs.com/files/package.json#devdependencies. Thanks for filing an issue, but as it currently stands, the problem is much too vague. The reason could be any number of problems, several of them unrelated to Packager itself. I'm going to close this for now because the testcase you've provided is too complicated right now to debug. If you can condense the problem into a minimal testcase, then it will be easier for I or another developer to pinpoint what the issue is, and I will reopen this issue.. Take a look at the docs for electron-compile.. electron-compile is a direct dependency of electron-prebuilt-compile.. Electron Packager does not support Babel directly. You should use either electron-compile or Electron Forge, which uses both Packager and electron-compile internally.. @ynevet check the electron-compile docs to see how to configure Babel.\n\nIf you need more assistance, please visit one of the  community sites, as this issue tracker is for bug reports and feature requests only.. This is a duplicate of #708, see also: https://github.com/npm/npm/issues/17781\nAt this point we're waiting for NPM to release a new version.. Have you tried console.log-style debugging (i.e., figure out where in your app code it's not printing anything)?\nIf that doesn't work, could you perhaps try a different version of Electron?. Putting a console.log(...) statement at the very top of your main script would tell you whether the main script is even running.. Are you using WSL or Cygwin to run Electron Packager?. I haven't seen this before, so try the following things:\n --prune=false doesn't work, either omit it or use --no-prune (per --help)\n make sure NPM is not version 5.3.0 (5.4.0 or 4.x)\n use a different Node version (such as 6.x)\n use cmd instead of git bash. Could you try a different version of Node, like 6, or figure out exactly which dependency is causing the segfault? Right now there's too many variables to pinpoint any one cause.. Since the original issue reporter has not responded to the request for additional information in about two weeks, I'm going to assume that they either found the answer in another manner or decided not to pursue this issue. If I'm incorrect, they can respond with answers to the questions posed, and I'll reopen.. Node 8.5.0 was released today, can you try that? If that doesn't work, can you downgrade to Node 6?. Since the original issue reporter has not responded to the request for additional information in about two weeks, I'm going to assume that they either found the answer in another manner or decided not to pursue this issue. If I'm incorrect, they can respond with answers to the questions posed, and I'll reopen.. ~What are the version numbers referring to? There has never been an Electron Packager 8.8.1.~ Never mind, this is referring to Node.. This issue is for electron-builder, not Electron Packager.. Thanks for filing an issue, but D3D renderer issues are not within the scope of Electron Packager, but rather Electron itself. Please search the Electron issue tracker for a similar issue, and if you can't find it, create a new issue.\nI would suggest before filing a new issue, that you create a minimal testcase so that it's easier for the Electron developers to help you.. Fix released in 9.0.1.. You should use an absolute path instead of a relative path, e.g.\njavascript\nconst path = require('path');\nconst pathToPythonScript = path.join(__dirname, 'script.py');\n// I don't know what python-shell's API looks like\nrunPython(pathToPythonScript);. Does this only happen when you run npm run package-win?\nCould you post the full error (with backtrace, etc.)?. > Could you post the full error (with backtrace, etc.)?\nThe message \"npm ERR! Cannot read property '0' of undefined)\" isn't enough context to be able to help.. > Command failed: npm prune --production\nWhat version of NPM is this? There is a known bug in NPM when you use NPM 5.3.0.\n\nA complete log of this run can be found in:\n\nCould you attach the logs to this issue?. Try 5.4.0. If that doesn't work, try 4.x.. > How could I turn on debug mode in window ?\nhttps://github.com/visionmedia/debug#windows-note. Do you have large files in your app directory?. How much free memory (RAM) do you have when you run Electron Packager?. If you ignore node_modules you will lose any third party modules you've added to your Electron app.. There are several things you can do:\n\nIf possible, use Node 8 or higher. Those versions of Node have a more efficient way to copy files.\nMake sure you're using the latest version of Electron Packager.\nMake sure that only the dependencies that you need for your app to run are in the dependencies section of package.json. Anything relating to packaging/testing/etc., including electron, need to be in the devDependencies section.\nWipe out node_modules and reinstall it, just to make sure that there's no extraneous dependencies.\nMake sure that the free space on the drive that you're creating the package is at least the same size as the app.. For future reference, support questions are better off at one of the community sites, as there are more people looking at those sites than this issue tracker.\n\nRegarding your question, I would suggest doing something like creating a virtualenv that your Electron app operates in, so that you can avoid system-installed Python conflicts. (Questions about virtualenv itself are off-topic for this issue tracker, though.). If you put copydata.db into extraResource, it's in the resources directory, not the app directory, per the docs. The resources directory is usually one folder above the packaged base app directory, if I remember correctly.. This seems less like a question about Electron Packager and more a question about Windows custom protocols. I just made a quick app with electron-quick-start that proves that a packaged app can access its process.argv (note: these instructions work for Linux/macOS, porting to Windows is an exercise for the reader):\n\ngit clone https://github.com/electron/electron-quick-start\ncd electron-quick-start\nnpm install --save-dev electron-packager\necho 'console.log(process.argv)' > main.js\n$(npm bin)/electron-packager .\nelectron-quick-start-linux-x64/electron-quick-start --arg1 --arg2 (packaged directory name varies based on host platform/arch)\n\nOutput for me on Linux:\nGtk-Message: Failed to load module \"canberra-gtk-module\"\n[ '/path/to/packaged/electron-quick-start',\n  '--arg1',\n  '--arg2' ]\nYou'll probably have better luck with your question in one of the community forums, where more people are around that might have the knowledge to answer your question.. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n\n\nConsole output when you run electron-packager with the environment variable DEBUG=electron-packager. Please include the stack trace if one exists.\n\n\nPlease provide either a failing minimal testcase (with code) or detailed steps to reproduce your\nproblem. Using electron-quick-start is a good starting point.. Since the original issue reporter has not responded to the request for additional information in about two weeks, I'm going to assume that they either found the answer in another manner or decided not to pursue this issue. If I'm incorrect, they can respond with answers to the questions posed, and I'll reopen.\n\n\nYou can mitigate excessive memory usage by setting packageManager: false in API or --no-package-manager, because package managers use a fair amount of memory to prune.. I can't reproduce this behavior on Linux. Here's my minimal testcase: https://github.com/malept/electron-quick-start/tree/electron-packager-730\nInstructions:\n\ngit clone https://github.com/malept/electron-quick-start\ncd electron-quick-start && git checkout electron-packager-730\nnpm install\nnpm start (should pop up an alert with a JSON value)\nnpm package\nelectron-quick-start-linux-x64/electron-quick-start (obviously the folder name differs based on your host platform and arch, on Windows it would be something like electron-quick-start-win32-x64\\electron-quick-start) - this should have the same behavior as step 4.\n\nCould  you please see if this testcase produces the same errors as your app? If not, could you please create a minimal testcase that does reproduce the behavior?. Yeah, that's what I meant for step 5.. More FAQs will be added on an as-needed basis.. Regarding your prune bug, this is a known bug in NPM 5.3.0. Please upgrade to NPM 5.4.2.\nRegarding your asar bug:\nIn order to debug your problem further, we need a minimal testcase to reproduce your problem. Using the electron-quick-start repository as a base, could you please create a minimal Electron app that illustrates the issue you described, and post a link to it here?. > But in the end, it appears that running with DEBUG=electron-packager actually effects the execution path of electron-packager significantly. Should I file a bug on that?\nI wouldn't even know where to start debugging that. There's exactly one conditional where it checks whether debug is enabled, and it has nothing to do with pruning. Pruning is slated to be refactored soon, so I don't think it's worth filing a new bug.\nI'd still like a minimal testcase for the asar bug. It might end up that the bug needs to be upstreamed to the asar module.. I think it has to do with something in the contents of your project, rather than the config.. Since the original issue reporter has not responded to the request for additional information in about two weeks, I'm going to assume that they worked around issue. If I'm incorrect, they can respond with a minimal testcase, and I'll reopen.. Just use this issue, please.. My guess without a minimal testcase would be that there are either way too many nested folders in at least one of the node modules that you're unpacking, or there's some sort of recursive symlink somewhere.. Perhaps make a diff between the original electron-quick-start and yours, upload the diff as a gist, and then later apply the diff and git push it outside of the IT-restricted PC.. Works fine for me on Linux (I edited the gulpfile.js to remove platform and arch so that it uses the host platform/arch). I'm actually having more trouble with running electron-rebuild on libxml-xsd. Strange C++ linking errors that look like these: https://github.com/albanm/node-libxml-xsd/issues/24. I don't have a Windows machine to test on, so the only advice I can give is to either set tmpdir: false (which is a longshot) or just disable ASAR support. I'm inclined to believe that this is more of an issue with the asar module than Electron Packager.. Hmmm, tmpdir: false may no longer be a viable option, with fs-extra v5.\nPerhaps set tmpdir to a custom directory?\nThe asar repository is here: https://github.com/electron/asar. I would be surprised if this were specifically an Electron Packager issue.. I've pinged one of the maintainers, but that's not guaranteed to have a response in the time frame you might desire, as they are very busy.. The PR mentioned above has been released in asar 0.14.1, so I'm closing this bug.. @corvinrok \nHere is the line from the package.json dependencies in 10.1.2:\nhttps://github.com/electron-userland/electron-packager/blob/a39231997303bc0e253e26d8827710e9662dfb35/package.json#L20\nThe ^ means that it will install the latest 0.14.x version of asar, and as of this comment, that is 0.14.1. So, run npm update (or whatever the equivalent is on yarn, if you use yarn) and it will update the asar dependency accordingly.. Thanks for filing an issue, but this duplicates #679.. Yes, it is possible. Set platform to darwin.. @develar that is not relevant information, please do not do this.\n@gozzoo According to the Electron Versioning guide:\n\nDue to its dependency on Node and Chromium, it is not possible for the Electron project to adhere to a SemVer policy. You should therefore always reference a specific version of Electron.\n[...]\nWe recommend that you set a fixed version when installing Electron from npm:\nnpm install electron --save-exact --save-dev\nThe --save-exact flag will add electron to your package.json file without using a ^ or ~, e.g. 1.6.2 instead of ^1.6.2. This practice ensures that all upgrades of Electron are a manual operation made by you, the developer.\nAlternatively, you can use the ~ prefix in your SemVer range, like ~1.6.2. This will lock your major and minor version, but allow new patch versions to be installed.\n\nThis versioning policy may change in the future for newer Electron versions, but for now this is the recommended way of handling Electron versions.. Could you please run the command outside of npm scripts? NPM doesn't output stderr output which is crucial in diagnosing your problem.. I meant, don't invoke npm run from gradle. It looks like you're running npm run package-win from inside gradle, instead invoke electron-packager directly in gradle.. If it only fails when you use npm run, I would suggest not using that level of indirection. I would need to have a minimal testcase and detailed repro instructions to even begin to debug this.. Since the original issue reporter has not responded to the request for a minimal testcase in about two weeks, I'm going to assume that they either found the answer in another manner or decided not to pursue this issue. If I'm incorrect, they can respond with a minimal testcase, and I'll reopen.. In order to debug your problem further, we need a minimal testcase to reproduce your problem. Using the electron-quick-start repository as a base, could you please create a minimal Electron app that illustrates the issue you described, and post a link to it here?. I'd prefer it if it was not a \"large app\", because then it eliminates as many variables as possible. I don't have much time these days to experiment with figuring out how to make minimal testcases out of issue reporters' descriptions, so if you could provide one, that would make it faster to debug and fix.. > I can submit a PR that attempts to use cpx rather than fs.copy that may be easier.\nI don't particularly want to go that route yet. I'd like to avoid adding more dependencies if I can help it.. I don't know how to use that repo, there aren't any instructions in the README. Am I supposed to do something in the top level dir first?. I took a look at cpx, it's not feasible as a replacement because it doesn't have the filter functionality that fs-extra.copy has.. @walleXD I can build a bundled Electron app from your repository if I make these changes to it:\ndiff\ndiff --git a/packages/desktop/package.json b/packages/desktop/package.json\nindex 22fea07..9323cf9 100644\n--- a/packages/desktop/package.json\n+++ b/packages/desktop/package.json\n@@ -31,8 +31,8 @@\n         ]\n       },\n       \"electronPackagerConfig\": {\n-        \"packageManager\": \"yarn\",\n-        \"deferSymlinks\": false\n+        \"packageManager\": false,\n+        \"derefSymlinks\": true\n       },\n       \"electronWinstallerConfig\": {\n         \"name\": \"desktop\"\nI also have to wipe out the ignores (you'd need to move the Forge config to a JavaScript file, per its README, and set electronPackagerConfig.ignore to file => false), because there's an interesting bug with the pruner module and the default set of ignores.. > After some investigation, I found that the following option doesn't seem to be working out:\n\n'extend-info': {'ElectronTeamID': '12345678'},\n\nSince it looks like you're using the JavaScript API, it should be noted that one of the changes between 8.x and 9.x was that hyphenated option names were replaced with more idiomatic camelCased names. The hyphenated names were deprecated in 8.6.0.\nSo, if you use extendInfo: { ... } instead of 'extend-info': { ... }, it should work.. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n\n\nConsole output when you run electron-packager with the environment variable DEBUG=electron-packager. Please include the stack trace if one exists.\n\n\nWhat command line arguments are you passing? Alternatively, if you are using the API, what\nparameters are you passing to the packager() function?\n\n\nWhat does your package.json look like?\n\n\nPlease provide either a failing minimal testcase (with code) or detailed steps to reproduce your\nproblem. Using electron-quick-start is a good starting point.. This is a known issue with asar and native modules, and also why I hesitate to make asar default to true.. Delete the electron-packager folder from your toplevel app folder and try again.. Add --ignore=electron-packager to your command line, then. It seems your temporary directory is set strangely (or you're in a Docker container).. According to the NEWS file, it has since v6.0.0:\n\n\nhttps://github.com/electron-userland/electron-packager/blob/60aa780e054022f03338d28a829143d109c66f77/ignore.js#L35-L50\nIs it not working for your application? If so, we're going to need more information about it. In particular:\n\n\nConsole output when you run electron-packager with the environment variable DEBUG=electron-packager. Please include the stack trace if one exists.\n\n\nWhat command line arguments are you passing? Alternatively, if you are using the API, what\nparameters are you passing to the packager() function?\n\n\nPlease provide either a failing minimal testcase (with code) or detailed steps to reproduce your\nproblem. Using electron-quick-start is a good starting point.. You can use the afterCopy hook to manipulate the package.json file that will be packaged. Please note that you will need to use the API, rather than the command line, to use the hook.. package.json should be in path.join(buildPath, 'package.json').. Thanks for filing an issue, but building ZIP files is outside the scope of Electron Packager. You should be using electron-installer-zip or Electron Forge instead.. Thanks for filing an issue, but this behavior is by design - there are use cases where this is desired. Please see https://github.com/electron-userland/electron-packager/issues/37 where the feature was first discussed, and https://github.com/electron-userland/electron-packager/pull/94 where the initial implementation was discussed.. It should only select a given package.json if electron is found in either dependencies or devDependencies. Why does your top-level package.json have electron as a dependency if it's not an Electron app?. You may be better off using an internal (private) module that contains common dependencies, rather than a top-level package.json.. Unfortunately, Electron Packager doesn't know that information, all of that logic is delegated to get-package-info.. I'm assuming that main.js is used when you run your Electron app in development mode? If that's the case, you can use the afterCopy hook to manipulate the package.json file that will be packaged. Please note that you will need to use the API, rather than the command line, to use the hook.. I'd need some time to write it up. Basically in the afterCopy hook, read + parse the package.json file, set main to the relative location of more.js, and then write the serialized changes back to the same package.json file.. I have limited time for F/OSS maintaining these days, I'm not sure when I'm going to get around to writing up a full code example. Is my description not enough to start with?. I like the feature request as a concept. However, implementing this feature would require a significant reworking of how we infer Electron versions - we delegate to another module traversing directories and querying any package.json files it finds. Additionally, it would also incur a significant I/O performance cost, because we'd have to traverse the node_modules tree for each package.json directory we traverse to find the correct electron. One of the reasons why we would have to traverse (instead of just searching for ./node_modules/electron/package.json) is because when you use electron-prebuilt-compile (which depends on electron), the installation of electron is actually in node_modules/electron-prebuilt-compile/node_modules/electron.\n\n\nGiven that the implementation/maintenance cost is high, a very small percentage of the userbase will use this feature, and that there's a workaround in the form of querying node_modules/electron/package.json yourself and using the JS API to call Electron Packager, I'm not inclined to implement this.\n. Thanks for the PR, but I'm actually more inclined to delete the file and point to the GitHub contributors URL in the readme.. I did a quick check with electron-quick-start. If you use Electron 1.6.15, the output directory is 123MB.\nIn order to debug your problem further, we need a minimal testcase to reproduce your problem. Using the electron-quick-start repository as a base, could you please create a minimal Electron app that illustrates the issue you described, and post a link to it here?. I can't reproduce this. Here are my steps, with truncated output:\n```shell\n$ git clone https://github.com/electron/electron-quick-start\n[... git output ...]\n$ cd electron-quick-start\n$ npm install\n[...]\n$ npm install --save-dev electron-packager\n[...]\n$ $(npm bin)/electron-packager . --overwrite --out=pack\nPackaging app for platform linux x64 using electron v1.6.15\nWrote new app to pack/electron-quick-start-linux-x64\n$ du -sh\n123M    pack\n```\nMy guess is that you have some lingering extra packaged application somewhere in your app directory that needs to get deleted before you package.. I would set ignore to be a Function, per https://github.com/electron-userland/electron-packager/blob/master/docs/api.md#ignore\nPseudocode example:\n```javascript\nimport packager from 'electron-packager';\nconst targetPlatform = 'win32';\nconst packagerOptions = {\n  // ...\n  platform: targetPlatform\n  ignore: path => {\n    if (targetPlatform !== 'win32' && path.ends_with?('.exe')) {\n      return true;\n    } // etc.\nreturn false;\n\n},\n  // ...\n};\npackager(packagerOptions);\n``. macOS is not my area of expertise, so I would need to know what file types are allowed for [CFBundleIconFile`](https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102043), which is what we're using to set the icon.. Also, it's not obvious to me that you can use multiple files.. Bad no-response bot.... Right, it seems that the deprecation is only for iOS/watchOS, not macOS. Perhaps Apple is calling macOS legacy (which wouldn't surprise me since I remember hearing that they absorbed the macOS dev team into the iOS team...).\nIt would help to know what the resulting Info.plist looks like when you use multiple .pngs in a macOS project.. Given the lack of evidence, I'm going to close this issue. If someone can show me a proof-of-concept minimal bundled Electron app that can have multiple PNG files instead of an ICNS file on macOS, I will gladly reopen this issue so we can figure out how to integrate that into Electron Packager.. You misspelled derefSymlinks. Perhaps try that?. I think this is a duplicate of #738 (which I need help with).. Thanks for catching that. In the future, it would be nice if the summary was filled in so it's more obvious why the changes are warranted.. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n\nPlease provide either a failing minimal testcase (with code) or detailed steps to reproduce your\nproblem. Using electron-quick-start is a good starting point.. It would help to know what distro, distro version, and desktop environment you're running on your Raspberry Pi 3, along with the output of uname -m to make sure that the arch is correct.\n\nAlso, is there any console output if you try to run the Electron app via a terminal window?. Why are you trying to run it via sudo?\nIt would help to know what distro, distro version, and desktop environment you're running on your Raspberry Pi 3.. Your problem is that Electron requires an X11 session running on Linux.. CCing @sethlu because this is signing-specific.. > there's a little incompatibility with pumping the opts to electron-osx-sign I think... Calling electron-packager --osx-sign.some-thing could result in osxSign.someThing. Would it be better for electron-osx-sign to follow a similar format or to adjust electron-packager's argument parsing?\n@sethlu Darn, I was hoping that my argument parser changes didn't create side effects like that. It would be nice if you could add support for that, but if you don't I understand and will have to figure out how to fix that.. Try --no-tmpdir. Otherwise I'm not really sure what would cause an increase in memory usage.. It would help to know what version of Electron Packager worked vs the version you're currently using.. > I'm having luck moving the large multimedia content directory into place after packager's done its thing. Should there be any consequences to doing that?\nThere may be consequences if you're building for darwin or mas and signing your app via --osx-sign.. > Potentially the fs changes we made switched from streams to buffers behind the scenes at some point.\n@MarshallOfSound in fs-extra?. @bitwombat see https://github.com/electron-userland/electron-packager/issues/762#issuecomment-347064544. @MarshallOfSound fs-extra appears to use streams, not buffers:\nhttps://github.com/jprichardson/node-fs-extra/blob/f934357bb6a933fc47138e31492b1507bc026ff4/lib/copy/ncp.js#L97-L99\n@bitwombat fs-extra (the module that we use for copying folders) is going to use a native copyFile function (introduced in Node 8) in its next major release (v5). I've made a branch of Electron Packager in my personal fork that brings in those changes. Perhaps you can try using the latest Node 8 LTS and this branch? It seems like  you're using a globally installed CLI, so here are some instructions on how to install this without disturbing your existing install:\n\nOpen a new terminal\nInstall nodeenv\nRun nodeenv --node=8.9.1 /path/to/electron-packager-node8-test to install Node 8.9.1 locally\nRun source /path/to/electron-packager-node8-test/bin/activate so the terminal will prefer your newly installed Node over the system Node\nRun npm install -g https://github.com/malept/electron-packager#fs-extra-v5-experimental to install the modified Electron Packager\n\nRun your Electron Packager command - it should pick the newly installed one. @natew it's not required. Wouldn't hurt to try with/without, if you're so inclined.. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n\n\nPlease provide either a failing minimal testcase (with code) or detailed steps to reproduce your\nproblem. Using electron-quick-start is a good starting point.. In this case, it would be preferable to have a failing minimal testcase that reproduces this error, because the problem space is currently too large.. Given the information I have, the only reason I can think of as to why it doesn't work is because for some reason, main.js is not being copied correctly into the app. This can be checked by looking in the TestApp.app/Contents/Resources/app folder.. What sort of permission issues? What were the permissions on main.js in the package? What is the permissions on main.js in the source repo?. This doesn't sound like a bug in Electron Packager to me. I was looking at the source code of the copy method in fs-extra the other day (for an unrelated reason), and it copies the permissions of the original file in addition to its contents.. Thanks for catching this. FYI, I'm likely going to drop the --package-manager flag in the next major release (within the next several weeks) so even if I add --no-lockfile in the meantime, it's not going to hang around for much longer.. What does your package.json look like?. I can't reproduce this on Linux/Node 6 and Node 9/Electron Packager 10.1.0. My steps:\n\n\ngit clone https://github.com/electron/electron-quick-start && cd electron-quick-start\n\nnpm install && npm install --save-dev electron-packager && npm install --save @turf/turf\n$(npm bin)/electron-packager .\nls electron-quick-start-linux-x64/resources/app/node_modules/@turf/turf/\n\nStep 4 produces for me:\nindex.d.ts  index.js  LICENSE  main.js  package.json  README.md  turf.js  turf.min.js. I think this would be better off being a plugin for Electron Packager, similar to how electron-packager-plugin-non-proprietary-codecs-ffmpeg uses the afterExtract hook. I would be happy to link to the node module once it's published.\nMy concerns about adding it to the core are the number of people who will use the feature vs. its complexity and its maintenance cost. How would the API option look? How would the CLI argument work?. I'm OK with having this be effectively an API-only feature. It's the same if you need to change ffmpeg or use native modules. (Although, if you use Electron Forge, I think you don't need to use its JavaScript config with these kinds of packager hooks.)\nI would gladly link to the plugin in the readme.. I can't reproduce this behavior on Linux. Make sure lodash.capitalize is in the dependencies in your package.json, and if it's there, perhaps try electron-packager . --package-manager=yarn?. I still can't reproduce this on Linux, after I switched to Node 9.\nshell\n$ node --version\nv9.2.0\n$ yarn --version\n1.3.2\n$ git clone https://github.com/electron/electron-quick-start\n$ cd electron-quick-start\n$ yarn add lodash.capitalize\n$ git diff\ndiff --git a/package.json b/package.json\nindex 4386fec..c99174e 100644\n--- a/package.json\n+++ b/package.json\n@@ -18,5 +18,8 @@\n   \"license\": \"CC0-1.0\",\n   \"devDependencies\": {\n     \"electron\": \"~1.7.8\"\n+  },\n+  \"dependencies\": {\n+    \"lodash.capitalize\": \"^4.2.1\"\n   }\n }\n$ yarn add -D electron-packager\n$ $(npm bin)/electron-packager . --package-manager=yarn --platform=darwin\nPackaging app for platform darwin x64 using electron v1.7.9\nWrote new app to electron-quick-start/electron-quick-start-darwin-x64\n$ ls electron-quick-start-darwin-x64/electron-quick-start.app/Contents/Resources/app/node_modules/ -A\nlodash.capitalize  .yarn-integrity. Only some macOS platforms. For example, all Packager tests run on Linux, macOS, and Windows. There's at least one test that checks that folders in the packaged node_modules exist.. Thanks for filing an issue but there's nothing we can do on the Electron Packager side about this, we have to wait until rcedit and node-rcedit are updated.. You can retrieve the symbols file by either going to the respective Electron release, or using electron-download by passing symbols: true.. I changed the link, its location & its copy.. You should use an absolute path, not a relative path. Please see the following FAQ entry:\nhttps://github.com/electron-userland/electron-packager/blob/master/docs/faq.md#why-isnt-the-relative-path-in-my-app-code-working. In order to debug your problem further, we need a minimal testcase to reproduce your problem. Using the electron-quick-start repository as a base, could you please create a minimal Electron app that illustrates the issue you described, and post a link to it here?. @martijnthe what sort of changes are you proposing?\nI wonder if the best way to fix this is to have an Electron Packager plugin that runs yarn install --production in an afterCopy hook, so that node_modules is populated in the app. I'm hesitant to have the functionality I propose in the core app because it's specific to yarn, and I've already had bad experiences trying to accommodate multiple package managers.. @brtthomp you have a different use case than the issue summary.\n\nOtherwise I am force to either run npm install or copy the modules folder over on each build.\n\nYes, those are your two options, given the current state of your build system.\nI think that traversing parent directories to find a node_modules folder would add a lot of complexity to Electron Packager for the benefit of a very small percentage of users.. I'm going to close this since I described a workaround in https://github.com/electron-userland/electron-packager/issues/774#issuecomment-354694049.. The big problem with this solution is that the tests fail. Frankly, I'm not sure it's the correct solution.. I'm going to close this due to the rationale I laid out in https://github.com/atom/atom/pull/15431#issuecomment-353712740 - in the near future, I'll add explicit unit tests for hostArch() and validateListFromOptions() regarding armv7l detection.. This is a common error when packaging apps, please see the FAQ: https://github.com/electron-userland/electron-packager/blob/master/docs/faq.md#why-isnt-the-relative-path-in-my-app-code-working. Please don't open new issues for the same question (#776).\nThe JSON parse error means that it's invalid JSON (not an Electron Packager error), so it at least found the file. I would suggest looking for a JSON validator.\nIn the future, I suggest you ask in one of Electron's support channels. I say this because I have limited time these days to tend to the issue tracker, and you'd get a faster response from more people.. Does this happen in any other target platform/arch, or just armv7l?. This doesn't sound like an Electron Packager specific problem, but rather an issue with Electron proper, because it's a rendering issue on a specific platform/arch. I would suggest seeing if anyone else in the Electron community has this problem, and if necessary, filing a bug in the Electron issue tracker.. Thanks for filing an issue, but it's not the responsibility of Electron Packager to provide (library) dependency management for your Electron app. I suggest using Electron Forge to build .deb, .rpm, or .flatpak files (more coming in the future), all of which handle dependency management via their respective packaging systems.. Your config appears to be for electron-builder, not Electron Packager. You should file an issue there, instead.. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n\n\nConsole output when you run electron-packager with the environment variable DEBUG=electron-packager. Please include the stack trace if one exists.\n\n\nWhat version of NPM is this?\n\n\nTry running electron-packager . --no-package-manager.. @cinder92 Just so people who come across this issue know, which version of NPM did you have installed before you upgraded?. Sounds like a bug fixed in NPM 5.4.1.. I can't reproduce this on Linux. When I run the packaged app, I get the same screen as in the screenshot in your repo's README. Here's how I did it:\n\n\nshell\n$ git clone https://github.com/onmyway133/PushNotifications\n$ cd PushNotifications\n$ yarn\n$ yarn run release\n$ PushNotifications-linux-x64/PushNotifications\nMy yarn is also at 1.3.2.\nCan you try with a fresh git checkout of your repo?. Can you try building on another computer or in a Linux VM? I'm concerned that your environment is incorrectly configured somehow.. @pixelkritzel this issue is a yarn specific bug.. Try using --no-package-manager.. Makes sense.. I looked into it a bit more. The application's license is already copied into the app directory, along with the application code. It would be more work and code than I'd like to have to maintain in Packager, particularly considering that developers don't all name their license files the same.\nYou can achieve the same thing by creating an Electron Packager plugin that uses the afterExtract and afterCopy hooks. The afterExtract hook would rename the Electron license file, and the afterCopy hook would move the app license file to the same directory as the Electron/Chromium licenses.\nIf you choose to create the plugin and open source it, I would be happy to link to it in the Packager README.. In order to debug your problem further, we need a minimal testcase to reproduce your problem. Using the electron-quick-start repository as a base, could you please create a minimal Electron app that illustrates the issue you described, and post a link to it here?. Could you please provide a minimal testcase in code? Screenshots don't help with determining the root cause.. > is applicable to use cases where e.g you need to pick one certain DLL from within devDependencies to your resource folder.\nI'm not understanding why this is a use case. Normally you'd want to prune devDependencies, and even if you don't for some reason, you'd want to put the DLL in the same folder as the Electron binary. In that case, you'd want to use the afterExtract hook to copy the file into that folder, instead of using extraResource (which copies it into the resources folder).. I think this functionality would be better suited for an Electron Packager plugin. I would prefer to avoid making extraResource more complicated to understand.\nTo make into a plugin, you would write an afterCopy hook to derive the resources path from the buildPath, and then copy your files to that folder as you see fit.. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n\n\nConsole output when you run electron-packager with the environment variable DEBUG=electron-packager. Please include the stack trace if one exists.\n\n\nWhat command line arguments are you passing? Alternatively, if you are using the API, what\nparameters are you passing to the packager() function?\n\n\nPlease provide either a failing minimal testcase (with code) or detailed steps to reproduce your\nproblem. Using electron-quick-start is a good starting point.. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n\n\nConsole output when you run electron-packager with the environment variable DEBUG=electron-packager. Please include the stack trace if one exists.\n\n\nWhat command line arguments are you passing? Alternatively, if you are using the API, what\nparameters are you passing to the packager() function?\n\n\nPlease provide either a failing minimal testcase (with code) or detailed steps to reproduce your\nproblem. Using electron-quick-start is a good starting point.. The error is:\n\n\nEEXIST: file already exists, link '/tmp/electron-packager/linux-x64/electron-quick-start-linux-x64' -> 'dir/electron-quick-start-linux-x64'. Sure, but you'd have to do it in an afterCopy hook (requires use of the JavaScript API instead of the command line), and delete the files from the build path, so that the packager process doesn't put the main.asar files also in app.asar. You'd also have to invoke the asar module yourself both in the afterCopy hook and in your Electron app, so it knows to create and use main.asar, respectively.. I can't reproduce this. My steps:\nshell\ngit clone electron-quick-start\ncd electron-quick-start\nnpm install\nnpm install --save-dev electron-packager\nnpm install --save 'github:trickpattyFH20/hoxy#forkrelease'\n$(npm bin)/electron-packager .\nls electron-quick-start-linux-x64/resources/app/node_modules/hoxy\nIn order to help you with your problem, we're going to need more information about it. In particular:\n\n\nConsole output when you run electron-packager with the environment variable DEBUG=electron-packager. Please include the stack trace if one exists.\n\n\nWhat command line arguments are you passing? Alternatively, if you are using the API, what\nparameters are you passing to the packager() function?\n\n\nPlease provide either a failing minimal testcase (with code) or detailed steps to reproduce your\nproblem. Using electron-quick-start is a good starting point.. The other workaround is to use another package manager setting.\n\n\nFortunately, pruning via package manager will be removed in a future major version.. ~~I assume you mean when --prune is set, because npm prune isn't run when --no-prune is set.~ Never mind, saying \"when --no-prune is not set\" confused me, because of double negatives.\nSigh. This is why I'm dropping all support for npm and yarn when pruning.. The current workaround is to set --no-package-manager.. Thanks for filing an issue, but this is outside of the scope of Electron Packager. If you'd like a splash screen during installation, you'll want to configure this sort of thing in, for example on Windows, electron-winstaller.. Given that there isn't very much information about your setup, I can only guess as to what's the problem. The best I can come up with is that your ignore settings ignored the file that's specified in your main key in package.json.\nIf you require more assistance, you'll likely be able to get more people to help you at one of the community sites. There aren't that many people looking at this issue tracker to answer questions.. Unfortunately, I can't know what's wrong without more information about your application. You're better off utilizing one of the community-driven forums, where there are more people around to answer your questions and provide feedback in a timely manner.. This will be fixed when a new version of node-rcedit is released.\nAlso, you're using electron-builder, not Electron Packager.. That's my understanding. If it's not, please file a bug in the node-rcedit issue tracker rather than here.. FYI, the file extension is optional. It's derived from the target platform.. I don't know why codecov thinks there's less code coverage when the file changed isn't covered at all, but \ud83e\udd37\u200d\u2642\ufe0f :shipit: \ud83d\ude80 . I recently wrote the electron-installer-snap module and am co-maintainer of a couple of the other Linux distributable creating modules for Electron, so I can answer the question about how they work.\nelectron-installer-debian, electron-installer-redhat, electron-installer-flatpak, and electron-installer-snap work by taking the output of Electron Packager (this repo), doing some transformations to get it in the right filesystem format, and generating the correct metadata. The binary that creates the distributable is then spawned.\nTo take electron-installer-debian as an example, it:\n gathers default options\n merges in the user-specified options (e.g., src is the packaged directory path, dest is the path to the created .deb)\n creates a temporary directory to stage the package\n creates the metadata (like debian/control) and the .desktop file in the staging directory\n copies the application into the staging directory\n runs dpkg to create the package\n* moves the .deb to dest\nFrom a technical perspective, ideally, to integrate with Electron Forge, which uses Packager and all of the modules mentioned above internally, the module would return a Promise that would eventually return the path(s) to the created distributable(s).\nUnfortunately, my free time is limited and I don't wish to take on yet another project to create another installer module, particularly for a distribution that I don't use. (In fact, the only reason the Snap module came about was because Canonical sponsored the work.) But I would be happy to help other people create it. It appears that for pacman, you'd be wrapping the makepkg command.. @TobiasSN just to be clear, you'd want to link a module to Electron Forge, not Electron Packager. Electron Packager is distributable-agnostic.. @TobiasSN What I described regarding how electron-installer-debian works in https://github.com/electron-userland/electron-packager/issues/806#issuecomment-367744862 would be the way to go if you still wanted to write your own module. Writing a separate module would have the advantage of having users who do not necessarily want to use electron-builder (or Electron Forge) and want to handle their build system themselves.. In order to debug your problem further, we need a minimal testcase to reproduce your problem. Using the electron-quick-start repository as a base, could you please create a minimal Electron app that illustrates the issue you described, and post a link to it here?. I have some additional questions:\n\nWhat command line arguments are you passing?\nWhat directory are you running electron-packager from?\nWhy are there two package.json files?. The problem is that Electron Packager reads the package.json file inside of electron-app, so it prunes away any module that's not specified in electron-app/package.json. If you need to keep instascan, you need to add it to that package.json.. I ran (cd electron-app && npm install --save instascan) and it did this:\n\ndiff\ndiff --git a/electron-app/package.json b/electron-app/package.json\nindex 8392c12..ccffd28 100644\n--- a/electron-app/package.json\n+++ b/electron-app/package.json\n@@ -15,5 +15,8 @@\n     \"demo\"\n   ],\n   \"author\": \"GitHub\",\n-  \"license\": \"CC0-1.0\"\n+  \"license\": \"CC0-1.0\",\n+  \"dependencies\": {\n+    \"instascan\": \"^1.0.0\"\n+  }\n }\nThen I ran electron-packager electron-app, and then electron-quick-start-linux-x64/electron-quick-start. I didn't get an error about instascan or mykey.\nIn fact, I verified in the open devtools console that window.mykey contained Instascan.. At this point, I think you should make your webapp into a (private) module and add that into dependencies in electron-app/package.json. I suggest looking at yarn workspaces to make sure that there's only one yarn.lock, etc. (Although there is currently a bug with workspaces and pruning at the moment.). How would it know about those folders? You've specified that the app resides in electron-app, not its parent directory. Electron Packager doesn't copy anything in the app's parent directory.. I'm not inclined to do this within Electron Packager proper, because there are unresolved questions about whether the config file takes precedence over the command line arguments (I don't think there's a clear answer there), and I don't think the maintenance cost / feature benefit ratio is worth it. I encourage anyone who needs this feature to either:\n\nuse Electron Forge, which is a complete development workflow for Electron apps (which uses Electron Packager internally) that puts its configuration either in package.json or a separate JavaScript file, or\ncreate a new Node module which wraps Electron Packager to provide this functionality (in the same way that electron-packager-interactive and grunt-electron have done), in which case I will happily link to it in the readme under related packages.. I'm not too familiar with how PyInstaller works, but could you try without the --asar flag?. Can you try without the --asar=true flag?. In order to debug your problem further, we need a minimal testcase to reproduce your problem. Using the electron-quick-start repository as a base, could you please create a minimal Electron app that illustrates the issue you described, and post a link to it here?. I can't help you if I can't reproduce the problem myself. The issue description is not enough to go on to create a minimal testcase, and I don't have time to experiment to create a set of steps to reproduce the problem on my own.. It could be any number of things. Incrementally add small parts of your codebase to the quick start app until the behavior you describe happens with the packaged app. One possible reason is documented in this FAQ entry.. I appreciate the effort you made in this PR, however, I'm unlikely to revert the feature change to the hooks. As a counterproposal, I've written #814, which I hope addresses your concerns.. Specifically, in the case of Electron Packager, we use the rcedit module (a wrapper for rcedit.exe) to modify the metadata.. Thanks for filing an issue. This question is not specific to Electron Packager, so you'll have more luck with asking in one of the community sites, where there are more people around to respond.. I'm just going to take this. I made a few changes that differentiates the two links.. Your repro instructions don't save mysql in the dependencies section of package.json, can you try when running npm install --save mysql instead?. Could you rerun Packager with DEBUG=electron-packager,flora-colossus and post the output? . This should be fixed with https://github.com/MarshallOfSound/flora-colossus/pull/3. You can update the modules for Packager (specifically, flora-colossus and galactus) and this bug will be fixed.. @averissimo can you please create a minimal testcase and link it here?. A minimal testcase would be starting with a fork of https://github.com/electron/electron-quick-start and then making the minimal number of changes necessary to reproduce the behavior you're seeing. I'm sure your repository has that problem, but there's a lot of dependencies defined.. Also, this does not seem to be related to this particular bug (it's related to optional dependencies), when you do create a minimal testcase, can you please file a new bug and follow the issue template?. I can't reproduce this on Linux. What do you get when you run npm list galactus?. In order to help you with your problem, we're going to need more information about it. In particular, the console output when you first execute SET DEBUG=electron-packager, and then execute npm run package.. There's nothing we can do to help if there's not more information given, so I'm going to go and close this issue.. I'm also a little worried about the drop in code coverage, but let's see what it looks like after the latest changes go through CI.. The docs should be updated to note the asar, afterCopy, and afterPrune incompatibilities.. That's probably not going to happen. However if there are modules in your package.json's dependencies section which are missing after packaging, that is a bug and it would be much appreciated if there were steps to reproduce this behavior.. Since the original issue reporter has not responded to the request for additional information in about three weeks, I'm going to assume that they either found the answer in another manner or decided not to pursue the described bug. If I'm incorrect, they can respond with answers to the questions posed, and I'll reopen.. This seems more like a question about usage with grunt and I'm not very familiar with that integration. You would more likely get an answer if you ask on one of the community-driven sites.. That's a warning, not an error. Could you provide the dependencies as well?. electron should be under devDependencies, not dependencies.. @pushkin- Electron Packager bundles Electron into your app, so you don't need the NPM dependency.. There was an attempt at an electronignore file in https://github.com/electron-userland/electron-packager/pull/376 but I was not a fan of it. I said that I would rather see a way to specify all config options in the package.json. Now I'm hesitant to do that because it adds a lot of complexity for a small percentage of users. I would instead suggest that people either use Electron Forge (which has that feature, and why I know how much work it is to do that correctly), or that someone write a thin wrapper around Electron Packager's API. If someone does end up doing that, they should take inspiration from how Electron Forge does it, because you'd also have to remove the config from the copied package.json for security purposes.\n\nRegarding your problem, instead of a bunch of |s, I would either just have multiple --ignore params, or run a script that uses the Packager API instead of invoking the Packager CLI.. Paths given to extraResource should be relative to whatever directory you're calling the script from that invokes the Electron Packager API, but definitely absolute paths should work. All it does is call fs.copy().\nIn order to debug your problem further, we need a minimal testcase to reproduce your problem. Using the electron-quick-start repository as a base, could you please create a minimal Electron app that illustrates the issue you described, and post a link to it here?. This is not a problem with Electron Packager 12 and above, it does not call out to NPM to prune.. Thanks for your patience, a fix has been released in 12.0.2.. @psharneja I cannot reproduce this. My steps (on Linux):\n```\nstep 0: install nodeenv https://github.com/ekalinin/nodeenv\nnodeenv -n 10.2.1 node10\nsource node10/bin/activate\ngit clone https://github.com/electron-userland/electron-packager\ncd electron-packager\nnpm install\n./cli.js --version\nMy output:\nElectron Packager 12.1.0\nNode v10.2.1\nHost Operating system: linux (x64)\n``. @jsejcksn if you runnpm run package -- --versionand it doesn't immediately print out the Electron Packager version and exit, you don't have Electron Packager 12.1.0 installed. In that case, runnpm update`.. > I see that you are also a member of the electron-api-demos repo.\nI am a member but not an active contributor.\n\nPerhaps you can address this issue there by changing the ^ to >=?\n\nThat seems like a bad idea, because when I increment the major version number, I do so deliberately - per the semantic versioning spec, that's when command line flags can get removed, which can break someone's usage of the CLI. It would be better if someone just version bumped Electron Packager in package.json.. You should just file a pull request instead of contacting someone.. I don't know the answer to that without looking at the project.. @lukyanov You have an old version installed globally, that's what's running when you just run electron-packager. Try node_modules/.bin/electron-packager instead, which will run the version installed relative to  your Node app (assuming you're in the root directory of your Node app). (You should uninstall the globally installed version so you're not confused.). @dogancelik see https://github.com/electron-userland/electron-packager/issues/831#issuecomment-425117995. @rmraya \nFirst, the version bundled with Electron has no bearing on the version of Node that is required by Electron Packager to run, unless for some bizarre reason you're using Electron itself to run Electron Packager.\nSecond, as I mentioned several times in this issue: the bug has been fixed in 12.0.2 and above.\nI'm locking this issue because this is becoming unproductive for me.\nTo reiterate for users who think they cannot run Electron Packager with the latest version of Electron Packager:\nIf you installed Electron Packager in your project (recommended over installing globally):\n\nOn Windows, in your project directory, run node_modules\\.bin\\electron-packager --version\nOn all other platforms, in your project directory, run node_modules/.bin/electron-packager --version\n\nIf that command doesn't print out the version number of Electron Packager, your globally installed version of Electron Packager is too old.\nIf you installed Electron Packager globally: run electron-packager --version. If that doesn't print out the version number of Electron Packager, your globally installed version of Electron Packager is too old.\nIf you still run into this and you have double-checked that all versions of Electron Packager on your system and projects are 12.0.2 or greater, please file a new issue, making sure to fill out the issue template, and mention the Electron Packager version you installed. \n. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n\n\nConsole output when you run electron-packager with the environment variable DEBUG=electron-packager. Please include the stack trace if one exists.\n\n\nWhat command line arguments are you passing? Alternatively, if you are using the API, what\nparameters are you passing to the packager() function?\n\n\nPlease provide either a failing minimal testcase (with code) or detailed steps to reproduce your\nproblem. Using electron-quick-start is a good starting point.. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n\n\nConsole output when you run electron-packager with the environment variable DEBUG=electron-packager. Please include the stack trace if one exists.\n\n\nWhat command line arguments are you passing? Alternatively, if you are using the API, what\nparameters are you passing to the packager() function?\n\n\nPlease provide either a failing minimal testcase (with code) or detailed steps to reproduce your\nproblem. Using electron-quick-start is a good starting point.\n\n\nAdditionally, it would be very helpful if it was translated into English. The maintainers of this module cannot read Chinese, and don't really want to rely on automated translation tools to try to understand your issue, because it may not be accurate.. Can you please paste the full package.json?. You need to add electron to your devDependencies, for example npm install --save-dev electron. Otherwise there is no way for Electron Packager to know what Electron version you wish to use.\nIf you have more questions about usage, I encourage you to read the frequently asked questions, and visit one of the several community-driven sites, which will have more people available to answer your questions.. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n\n\nConsole output when you run electron-packager with the environment variable DEBUG=electron-packager. Please include the stack trace if one exists.\n\n\nWhat command line arguments are you passing? Alternatively, if you are using the API, what\nparameters are you passing to the packager() function?\n\n\nPlease provide either a failing minimal testcase (with code) or detailed steps to reproduce your\nproblem. Using electron-quick-start is a good starting point.. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n\n\nConsole output when you run electron-packager with the environment variable DEBUG=electron-packager. (You will need to export it.) Please include the stack trace if one exists.\n\n\nPlease provide either a failing minimal testcase (with code) or detailed steps to reproduce your\nproblem. Using electron-quick-start is a good starting point.. @tzvetelin-vassilev usb is a native module, so:\n\n\nyou should be using electron-rebuild if you aren't already\n\nYou can't use asar with native modules, so you'll need to either blacklist the module directories (see the asar sub-options for details) or not use asar at all\n\n@inukshuk I'm pretty sure galactus doesn't look for package.json files unless they're in node_modules/name_of_module/package.json. It would help if you also gave a minimal testcase.. galactus removes entire NPM modules if it is found to not be a production dependency. Of course, I just realized that it is probably a bug in Electron Packager itself. Could you file a separate bug? This is not related to the original issue.. Given the minimal testcase of the original issue submitter, I'm fairly confident that the answer I gave in https://github.com/electron-userland/electron-packager/issues/844#issuecomment-389582609 is the reason why the package wasn't working, so I'm closing this issue.. I cannot reproduce this with your test scenario plus using electron-rebuild. I can successfully retrieve the USB device list on a packaged Linux Electron app. I can upload the code later today.. Repro steps:\n```shell\ngit clone https://github.com/malept/electron-quick-start\ncd electron-quick-start\ngit checkout electron-packager-issue-844\nnpm install\nnpm run package\nRun packaged app, varies based on target platform/arch\n```. That's fine, but I still can't reproduce your problem.\nIn order to debug your problem further, we need a minimal testcase to reproduce your problem. Using the electron-quick-start repository as a base, could you please create a minimal Electron app that illustrates the issue you described, upload it to a GitHub repository, and post a link to it here?. I don't get that error, on the other hand the non-electron-rebuild script you have doesn't seem to work for me either.\nAlso, I don't see what calls that process-nexick-args module or what depends on it.. In the future, it would help if you used the \"syntax highlighting\" GitHub Markdown syntax, it's easier to copy/paste your code that way.\nWith your changes, I still can't reproduce your error on Linux.\n. If you insist on not using electron-rebuild (as I did in my example), I would suggest asking in one of the community forums, as there are more people watching those websites who could possibly help you. Rebuilding native modules falls outside of the responsibilities of Electron Packager.. Have you tried the repro steps in https://github.com/electron-userland/electron-packager/issues/844#issuecomment-390096316 ?. It's a solution, not a workaround. The packaging code in the repro steps is essentially how Electron Forge works.. What likely happened is that something in npm prune did something related to your native module. As of version 12, Electron Packager no longer shells out to an external tool to prune devDependencies (nor will that change any time soon, for several reasons).\nYou are free to continue to use Electron Packager 11.x, if 12 is not working for you. Alternatively, if you can figure out a way to change Electron Packager so that it works with your workflow (without adding a new command line option or reintroducing npm prune), I'd be happy to review a pull request.. It's because of this line:\nhttps://github.com/electron-userland/electron-packager/blob/b3c610cd13de72b9b0f22b72c99fb73aa5b53bdb/prune.js#L61\nThat line needs to be changed so that the check basename(dirname(pathToCheck)) == 'node_modules' is added, along with a regression test.. Fix in #847.. I would strongly urge you to figure out a better way to deal with your use case. Having two copies of Electron in an Electron app seems like a really bad idea. Additionally, you'd have to figure out how to dynamically download the correct prebuilt Electron binary if you want to use your app on more than one platform/arch combination.\nIf you do decide to go through with this and write all of the supporting code necessary for this to work, you should run Electron Packager via the JavaScript API, disable pruning (prune: false), and write your own ignore function (see the ignore documentation for how the function should be declared).. Thanks for filing an issue. This was fixed in https://github.com/electron-userland/electron-packager/pull/843 and will be released when I get some time to do so. In the meantime, the workaround is to not use --all or --platform=linux --arch=all.. The fix has been released in version 12.1.0.. According to https://github.com/electron/electron/issues/9456 (which links to a Chromium bug), it sounds like Chromium doesn't support Windows on ARM yet. This would be a blocker for Electron, which is transitively a blocker for Electron Packager. So there is currently no way to bundle an Electron app for win32/arm.. I'm not going to be adding this feature request. Adding a new flag for this would make the renaming code more complicated for the benefit of a small fraction of the users. You can rename the .app folder yourself after Electron Packager has completed running in package:osx.. For updating, you should look at the Updating Applications guide. For differentiating between installer versions on macOS, you should build DMGs making sure that the --dmgPath is set to the name + version of  your app. Having different application names is probably not what you want.. In order to debug your problem further, we need a minimal testcase to reproduce your problem. Using the electron-quick-start repository as a base, could you please create a minimal Electron app that illustrates the issue you described, and post a link to it here?. Since you didn't provide an example application that I requested in my last comment, I can only guess as to what the problem is. Your command:\nelectron-packager ./dist UTANTOOL --platform=win32 --arch=x64 --out ./pro/UTAN4TOOLss --electron-version 2.0.2 --overwrite --DEBUG=electron-packager\nhas a couple of issues with it:\n\n--DEBUG=electron-packager is not a valid flag. DEBUG is an environment variable. In an NPM script, you'd want to use cross-env.\n\nYou have set the appdir to ./dist. You need to make sure that directory has a package.json, otherwise when you try to start your application, it will complain that it is \"Unable to find a valid app\".. Your dist folder needs a main.js, or your appdir needs to be tool-frontend and the main key in the package.json needs to be a JavaScript file that exists. Please see the Electron tutorial (which has been translated into zh-CN, see the language selector at the top right) for how this works.. I think instead of more arbitrary hooks, I would prefer if someone implemented #509.. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n\n\nConsole output when you run electron-packager with the environment variable DEBUG=electron-packager. Please include the stack trace if one exists.\n\n\nWhat command line arguments are you passing? Alternatively, if you are using the API, what\nparameters are you passing to the packager() function?\n\n\nPlease provide either a failing minimal testcase (with code) or detailed steps to reproduce your\nproblem. Using electron-quick-start is a good starting point.. Based on the version, you're probably using electron-builder (and also I have no idea what blockmap is). You should file a bug in their issue tracker.. This is an issue with electron-builder, not Electron Packager. Please file this issue in that project's issue tracker.. Unfortunately, this is not an Electron Packager specific problem but rather an issue with how your app code is written. For assistance with app code, please visit one of the community forums, as more people will be able to help you there.. I don't have time to debug your code, but if I had to guess, it's probably related to this Frequently Asked Question.. Please read the answer in my previous comment which has a link that you should also read.\n\n\nThis is not a bug in Electron Packager.. > new Worker('./js/uploader.js');\nThis uses a relative path. It should instead be an absolute path.. Please do not file multiple issues for the same thing.\nDuplicate of #858.. I don't think this is a bug in Electron Packager. If you search for this error elsewhere, you get https://github.com/Microsoft/vscode/issues/25577, and I think VSCode has its own build system that they use to bundle their app instead of Packager. Unfortunately since I'm not particularly familiar with that error, I don't know where you'd go to investigate it in more depth.. For completeness, this was fixed in version 12.0.2. (Electron Packager does not come with NPM.). Can you make sure what version of Electron Packager you're running? if electron-packager --version doesn't print out version numbers, it's too old.. Also, --appname is not a valid parameter.. I just realized that you're using --version to specify the Electron version. This hasn't been the way to specify that parameter since it was deprecated in 8.5.0 and replaced in version 9. You need to use --electron-version. Check out --help for details.. GUI programs (including Electron apps) don't read your shell initialization files because you're not in a shell, you're running it from the macOS window manager. Use fix-path to get around this limitation.. This is normal. From the README:\n\nNote that packaged Electron applications can be relatively large. A zipped, minimal Electron\napplication is approximately the same size as the zipped prebuilt binary for a given target\nplatform, target arch, and Electron version\n(files named electron-v${version}-${platform}-${arch}.zip).. Thanks for filing an issue, but the question nor the answer have anything to do with Electron Packager. You're referring to electron-winstaller in the script, and Packager doesn't use the NODE_ENV environment variable.. Making MSI files is outside the scope of Electron Packager. If you need help using electron-winstaller (one of the Electron tool packages that creates MSIs), ask for help on one of the community websites.. According to the code, CFBundleDisplayName corresponds to the executableName (--executable-name in the CLI) and CFBundleName corresponds to the application name.. This is better asked in one of the community websites since it's not Electron Packager specific and there are more people watching those sites.\n\nThat being said, you probably want to start by using a path relative to app.getAppPath().. > An unhandled error occurred inside electron-rebuild\nThe first line of your error indicates that it's more likely an error in electron-rebuild than Electron Packager. From past experience, my guess is that it's some problem with node-gyp, as it has issues with special characters in the path on Windows.. In order to debug your problem further, we need a minimal testcase to reproduce your problem. Using the electron-quick-start repository as a base, could you please create a minimal Electron app that illustrates the issue you described, and post a link to it here?. @LudiscapeXApi I cannot reproduce this on Linux with your zip file. The packaged app runs normally.\nWhy are you specifying prune: false?. Sorry, I don't think this is a bug with Electron Packager, but rather a question about some behavior that happens when an Electron app is bundled. This issue tracker is for bugs with and feature requests for Packager only. Help with using Electron when packaged should be asked in one of the community-driven sites.. Regarding the first issue, my guess is that you're running your macOS app by double-clicking your .app file, instead of opening it in the terminal. You generally cannot access shell environment variables from your app without some workarounds (this is not an Electron-specific problem).\nIn order to debug your second problem further, we need a minimal testcase to reproduce it. Using the electron-quick-start repository as a base, could you please create a minimal Electron app that illustrates the issue you described, and post a link to it here?\nPlease also indicate the version of Windows and the permission level of the user (normal, admin, etc.).. In order to debug your problem further, we need a minimal testcase to reproduce your problem. Using the electron-quick-start repository as a base, could you please create a minimal Electron app that illustrates the issue you described, and post a link to it here?. In order to debug your problem further, we need a minimal testcase to reproduce your problem. Using the electron-quick-start repository as a base, could you please create a minimal Electron app that illustrates the issue you described, and post a link to it here?. If you're not using webpack (or whatever bundler), the problem is that you're ignoring node_modules, which contains all of your dependencies.\nIf you happen to be using webpack (or whatever bundler), you need to run the bundler first, then package with Electron Packager, making sure that you're not ignoring your resulting built JavaScript file, and that your main JavaScript file from package.json refers to it.\nIf you need more assistance with this, please ask in one of the community forums, as there are far more people looking there than here.. Without any other context, I can't answer your question other than referring you to the icon option documentation.. In order to debug your problem further, we need a minimal testcase to reproduce your problem. Using the electron-quick-start repository as a base, could you please create a minimal Electron app that illustrates the issue you described, and post a link to it here?. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n\n\nConsole output when you run electron-packager with the environment variable DEBUG=electron-packager (notes for doing so on Windows). Please include the stack trace if one exists.\n\n\nWhat command line arguments are you passing? Alternatively, if you are using the API, what\nparameters are you passing to the packager() function?\n\n\nPlease provide either a failing minimal testcase (with code) or detailed steps to reproduce your\nproblem. Using electron-quick-start is a good starting point.. Unfortunately, this is not a bug specific to Electron Packager. To get assistance with your problem, please ask in one of the community websites.. Electron Packager supports both ia32 and x64 on Windows, see the arch option.. Thanks for filing an issue, but Electron Packager does not support NW.js.. Have you tried setting tmpdir to some other directory?\n\n\nIs it possible to try using a different Windows machine?. Thanks for the detailed bug report! I have a fix in #889.. I don't see how this is relevant to Electron Packager. The only Electron-related message in that very verbose Java output is Error: Cannot find module 'electron', which could be caused by any number of things, without any context.\nI'm closing this issue until there is a detailed set of steps produced that can consistently cause this error without needing Java installed.. Can you please file a bug upstream in the asar repository, if asar is broken? I cannot reproduce this on Linux:\n\ngit clone https://github.com/electron/electron-quick-start && cd electron-quick-start\nnpm install && npm install --save-dev electron-packager\n$(npm bin)/electron-packager . --asar. Perhaps it's a Windows-only problem in asar then?. To people affected by this:\n\nThis is a confirmed bug with the asar module on Windows. Per the original post, there is a workaround to pin the asar version to the last known good version.\nIt would be appreciated if people refrained from saying \"I ran into the same issue, the workaround worked\", as it causes unnecessary notifications for people subscribing to this issue. Instead, use the reaction emoji.\n~~It would also be appreciated if someone could file a detailed bug report at the asar repository so its developers know about the regression.~~ I have filed https://github.com/electron/asar/issues/158.. This should be fixed in asar 0.14.5. Please let upstream developers know if it still doesn't work, after you've verified that asar has indeed been updated to >= 0.14.5 for the Electron Packager installation you're using. A common mistake is updating the Packager dependencies for the project-specific installation, and then running the globally-installed Packager.. Also, this should be in usage.txt for the CLI, right?. The AppVeyor failure is https://github.com/electron-userland/electron-packager/issues/892. I don't know why codecov asserts that your PR loses coverage.. The best advice I can give you is to adapt some of Electron Packager's own tests into your testsuite, since it checks that various files exist and have certain state.. That being said, it would be interesting if someone wrote a module that did basic Electron app sanity checks, such as \"app directory exists OR app.asar exists\", \"bundled app contains package.json\", \"bundled app's package.json points to valid main JS file\", etc.. Notarization support has been added in Electron Packager 13.0.0.. The best way to learn about how to use any part of the Electron Packager options is to look at the API docs. Here is a direct link to the v13.0.0 docs for osxNotarize.. I think you need to provide a minimal electron-packager command that reproduces the problem with electron-quick-start, as you noted in a previous comment. You shouldn't need to run electron-osx-sign by itself, you should be able to use --osx-sign.suboption-name-style commands. (Note: it was very difficult to determine that your command was actually two commands.)\nIt sounds like if there's an Electron crash, it's not a bug in Electron Packager, but in Electron itself.. @MarshallOfSound this PR is dependent upon #900 due to the version of Node electron-notarize targets.. > no CI system is updated to a high enough macOS / Xcode version to run tests :laughing:\nWhat are the minimum macOS/Xcode versions? Travis added Xcode 10.1 recently.. @MarshallOfSound I added tests (and moved some code around in the process). Could you take a look to see that the tests are the expected behavior?. Thanks for filing an issue! Unfortunately, I cannot reproduce your problem with the information provided. My steps (on a Linux host, for a Linux target):\n```\ngit clone https://github.com/electron/electron-quick-start && cd electron-quick-start\nedit package.json to use exactly electron-4.0.0-beta.5\nnpm install\nnpm install --save-dev electron-packager\n$(npm bin)/electron-packager .\n./electron-quick-start-linux-x64/electron-quick-start\n```\nMy Electron Packager version:\n$ $(npm bin)/electron-packager --version\nElectron Packager 12.2.0\nNode v10.2.1\nHost Operating system: linux (x64)\nIn order to help you with your problem, we're going to need more information about it. In particular:\n\n\nConsole output when you run electron-packager with the environment variable DEBUG=electron-packager (instructions for Windows and non-Windows). Please include the stack trace if one exists.\n\n\nWhat command line arguments are you passing? Alternatively, if you are using the API, what\nparameters are you passing to the packager() function?\n\n\nPlease provide either a failing minimal testcase (with code) or detailed steps to reproduce your\nproblem. Using electron-quick-start is a good starting point.. It's runnable from the command line (which is why I was unable to reproduce in the first place), but I can reproduce the behavior of trying to run it from Nautilus and getting the error message `There is no application installed for \"shared library\" files.\" Screenshot:\n\n\n\nUnfortunately, this is a bug in Electron itself, not Electron Packager. Upstream changed their build process for 4.0 and this may have been one of the unintended side effects. Can you please file a bug in the Electron issue tracker so those developers are made aware?\nFor a workaround, you can try using electron-installer-debian to create an installable .deb file (with .desktop launcher shortcut) or electron-installer-snap to create a snap file.. Without any context as to how you're using Electron Packager, there could be one of two problems:\n\nYou're using the asar functionality with the executables. My understanding is that Windows cannot execute machine code that is in asar files.\nYou're referencing files with relative paths instead of absolute paths.\n\nFor further assistance, please consult the community forums. This issue tracker is meant for bugs and feature requests.. For some reason, rcedit can't find your icon file. Perhaps set the icon parameter to an absolute path. There's a bug in rcedit where it will only print the first character of the icon path given to rcedit (the i in these cases).. This is already a feature, please see the out option.. It's not actually in the app.asar file. There is an entry in the asar file for the file in its metadata, but the contents are not actually there. To verify this, you can run:\nshell\ngrep aaaaa hello-electron-000-darwin-x64/hello-electron-000.app/Contents/Resources/app.asar\nOn my machine, it cannot find the contents of unpack/test.txt.. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n\n\nConsole output when you run electron-packager with the environment variable DEBUG=electron-packager (instructions for Windows and non-Windows). Please include the stack trace if one exists.\n\n\nWhat command line arguments are you passing? Alternatively, if you are using the API, what\nparameters are you passing to the packager() function?\n\n\nPlease provide either a failing minimal testcase (with code) or detailed steps to reproduce your\nproblem. Using electron-quick-start is a good starting point.\n\n\n\nAbout \"... and 1 more\": https://github.com/electron-userland/electron-packager/issues/218#issuecomment-240582651. In order to help you with your problem, we're going to need more information about it. In particular:\n\nConsole output when you run electron-packager with the environment variable DEBUG=electron-packager (instructions for Windows).. 1. Maximize your command prompt window\nRun SET DEBUG=electron-packager\nRun electron-packager . checking --platform=win32 --out ../testApp-win --arch=x64 --electron-version=2.0.9 --icon=icons/dev.ico --overwrite\n\nCopy/paste the output here.. It seems that rcedit (the dependency Electron Packager uses to customize the Windows executable) does not think that you're passing in a proper ICO file.. This doesn't sound like a bug with Electron Packager. If you're using Node 11 and Electron 4 beta, there was an issue there that has since been fixed. Otherwise, this sounds like an NPM problem. You can find more assistance with NPM at their community support forum.. Yes there is, in the Electron documentation. This is linked to in the Packager API documentation, which details most of the pertinent ASAR options.. > Why can't the code in infer.js's getVersion be replaced with the following? This would make it much easier to use a fork of electron-prebuilt-compile (which is frequently several versions behind the latest electron release).\n\njs\nconst electronVersion = require('electron-prebuilt-compile/package.json').version\n\nThat's because it won't work if you're using the global version of Electron Packager, as opposed to the one installed in a project via devDependencies.\n\nThere's a comment saying\n\nelectron-prebuilt-compile cannot be resolved because main does not point to a valid JS file.\n\nbut I'm not sure what that's supposed to mean. Applying the above change in a fork of this seems to work fine.\n\nSee: https://github.com/electron-userland/electron-packager/pull/608. I'd rather not. I have an idea which I may get to this weekend.. FYI, I've pinged the maintainer of electron-prebuilt-compile and he's released 3.0.10.. This is not a bug or feature request about Electron Packager, but rather a general question about Electron. You should ask your question at one of the community forums instead.. This sounds like a problem with your installation of Wine, as opposed to anything Electron Packager related. You'll have more luck on the WineHQ forums.. I suspect that this is related to https://github.com/electron/rcedit/issues/79 (Electron Packager delegates Windows icon support to this program).. This issue is related to the Windows-specific problem. I don't really see why you need to use Electron Packager to build an AppImage. It would help if you provided more detailed repro steps.. In order to debug your problem further, we need a minimal testcase to reproduce your problem. Using the electron-quick-start repository as a base, could you please create a minimal Electron app that illustrates the issue you described, and post a link to it here? You can use a public GitHub repo (but using the SSH git repo URL) for the dependency.\nIf this is reproducible, I suspect it may be related to the pruning feature.. The best advice I have is to use BrowserWindow.loadFile instead of loadURL, but make sure the path is an absolute path, for example path.join(__dirname, 'debug.html'). This is somewhat covered in the Electron Packager FAQ.\nIf you need more support, please ask in one of the community forums, as this is a general Electron packaging question and not specific to Electron Packager.. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n\n\nConsole output when you run electron-packager with the environment variable DEBUG=electron-packager (instructions for Windows and non-Windows). Please include the stack trace if one exists.. Unfortunately, I cannot reproduce your issue on Linux with the information given. In order to debug your problem further, we need a minimal testcase to reproduce your problem. Using the electron-quick-start repository as a base, could you please create a minimal Electron app that illustrates the issue you described, and post a link to it here?. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n\n\nConsole output when you run electron-packager with the environment variable DEBUG=electron-packager (instructions for Windows and non-Windows). Please include the stack trace if one exists. A screenshot of the error might also be helpful.\n\n\nWhat command line arguments are you passing? Alternatively, if you are using the API, what\nparameters are you passing to the packager() function?\n\n\nPlease provide either a failing minimal testcase (with code) or detailed steps to reproduce your\nproblem. Using electron-quick-start is a good starting point.. Also, are you using Puppeteer? Searching for that error on the Internet indicates that that error is Puppeteer-specific.. Is this an existing web app, or is this actually just a Node app you want packaged? If it's the second option, you probably want to use pkg instead. This is because with Electron, not only will you be packaging Electron's version of Chromium, but also Puppeteer has its own version that it's trying (and failing) to download. Unfortunately, you'll find the same error there.. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n\n\nConsole output when you run electron-packager with the environment variable DEBUG=electron-packager (instructions for Windows and non-Windows). Please include the stack trace if one exists.\n\n\nPlease provide either a failing minimal testcase (with code) or detailed steps to reproduce your\nproblem. Using electron-quick-start is a good starting point.. Check out the Application Debugging section of the official Electron docs. There's nothing specific to Electron Packager about debugging.. You have asked the exact same question in multiple projects. Please do not do this. This question is better asked in one of the community forums.\n\n\nElectron Packager does not handle dependency tracking.. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n\n\nConsole output when you run electron-packager with the environment variable DEBUG=electron-packager (instructions for Windows and non-Windows). Please include the stack trace if one exists.\n\n\nWhat command line arguments are you passing? Alternatively, if you are using the API, what\nparameters are you passing to the packager() function?\n\n\nPlease provide either a failing minimal testcase (with code) or detailed steps to reproduce your\nproblem. Using electron-quick-start is a good starting point.. In order to debug your problem further, we need a minimal testcase to reproduce your problem. Using the electron-quick-start repository as a base, could you please create a minimal Electron app that illustrates the issue you described, and post a link to it here?. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n\n\nConsole output when you run electron-packager with the environment variable DEBUG=electron-packager (instructions for Windows and non-Windows). Please include the stack trace if one exists.\n\n\nWhat command line arguments are you passing? Alternatively, if you are using the API, what\nparameters are you passing to the packager() function?\n\n\nPlease provide either a failing minimal testcase (with code) or detailed steps to reproduce your\nproblem. Using electron-quick-start is a good starting point.. Without more information (specifically, a minimal testcase as I asked for in my previous comment), I cannot answer this question. I can only speculate as to what the problem could be. I can think of two things offhand:\n\n\nIf your user does not have Python installed (as is the case for most Windows users), this app will not work. Installing Python itself is outside the scope of Electron Packager.\n\nElectron may not be able to find Python because it's not in the PATH environment variable when you open it via the file manager. This may be fixed by using the fix-path module.\n\nSince this question is not Electron Packager specific, you may have more luck at one of the community forums.. Please check out the FAQ entry about relative paths.. Upgrade electron-packager to 11.2.1, this bug was fixed yesterday in the 11.2 series for Electron Forge 5.. Don't add electron-packager to your devDependencies. You still have an electron-packager that doesn't have the fix: https://github.com/RailRunner166/MyRPC/blob/508101facbb41f199a1c00888a77f190fd091327/yarn.lock#L2785-L2807. https://yarnpkg.com/lang/en/docs/cli/upgrade-interactive/ perhaps?\nI can't really help very much with how to use Yarn itself, unfortunately.. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n\n\nConsole output when you run electron-packager with the environment variable DEBUG=electron-packager (instructions for Windows and non-Windows). Please include the stack trace if one exists.\n\n\nWhat command line arguments are you passing? Alternatively, if you are using the API, what\nparameters are you passing to the packager() function?\n\n\nPlease provide either a failing minimal testcase (with code) or detailed steps to reproduce your\nproblem. Using electron-quick-start is a good starting point.\n\n\n\nAlso, read https://github.com/electron-userland/electron-packager/blob/master/docs/faq.md#why-isnt-the-relative-path-in-my-app-code-working. It's pretty likely that whatever resolution the small icon is, it is corrupted. All Electron Packager does is copy the icon file, bit-for-bit, to the location that macOS expects in the customized Electron.app directory. I would inspect all resolutions of your ICNS file to make sure that they are not corrupted.\nIf you need more assistance, asking in a website where people build macOS applications would be the best, as they would know more about the ICNS format than I would.. I suspect this is because on Windows, you need to have administrative permissions to deal with symlinks. \nEither run Electron Packager with an administrative account, or use WSL (Windows Subsystem for Linux) to run Electron Packager.. > Linux and windows worked well, only mac make this issue.\nYes, that's because the macOS Electron distribution is the only one with symlinks in it.\nIf WSL doesn't work, your only options are to either use CI services (such as Travis CI/Circle CI) or a VM. There's not really anything Electron Packager can do, my understanding is that it's an OS-specific problem with the Electron distribution that we can't change due to how macOS apps are designed.. This sounds like a bug in rcedit, not Electron Packager itself. You should file a bug in the rcedit issue tracker.. Linux icons work differently from other target platforms: https://github.com/electron-userland/electron-packager/blob/v13.0.1/docs/faq.md#how-do-i-set-an-icon-on-linux\nYou will not see an icon in your file manager because Linux file managers do not support that functionality.. Per the icon docs, make sure your icon for macOS is in ICNS format. It's important to note that macOS has an app icon cache, so during development it may not show up until that cache evicts the entry for your app. (Use StackOverflow or similar to find out how to clear that cache.). Unfortunately, I don't have time to run/debug your app to see why it's not working, as I work on this in my spare time. However, from a cursory glance, this may be a relative path issue.\nIf you need more assistance, please use one of the community forums.. > Would you prefer I make an barebones example of the issue using electron-quick-start?\nThis would be helpful.. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n\n\nConsole output when you run electron-packager with the environment variable DEBUG=electron-packager (instructions for Windows and non-Windows). Please include the stack trace if one exists.\n\n\nPlease provide either a failing minimal testcase (with code) or detailed steps to reproduce your\nproblem. Using electron-quick-start is a good starting point.. Thanks for reporting. This is a bug in the documentation - serialHooks only takes Promises, not callback-style functions. I fixed the docs in https://github.com/electron-userland/electron-packager/commit/f30456924dc649187025948a752bd4102021b7f7.. Sorry about the unclear documentation. I've updated it in https://github.com/electron-userland/electron-packager/commit/0eaa8cc687b0b9ca35fd58a7e0c1a28284ee1014.\n\n\nIf you'd like to overwrite the Electron LICENSE file:\n\nMake sure that you're respecting Electron's license and including it somewhere in your app so users can find it, per the terms of the license\nCopy over the file after Electron Packager is finished. For example:\n\n```js\nconst fs = require('fs-extra')\nconst packager = require('electron-packager')\nconst appAndElectronLicensePath = '/path/to/merged/license'\nconst options = { / Your options / }\nconst appPaths = await packager(options);\nfor (const appPath of appPaths) {\n  const licensePath = path.join(appPath, 'LICENSE')\n  await fs.copy(appAndElectronLicensePath, licensePath)\n}\n``. Unfortunately, I can't do anything about this in Electron Packager itself. Asnpm auditstates, this is a dependency ofmksnapshot, and I can't seem to find the current repository for it.. The Electron maintainers have decided to drop the dependency onnode-mksnapshot, see https://github.com/electron/asar/pull/165. In order to debug your problem further, we need a minimal testcase to reproduce your problem. Using the [electron-quick-start`](https://github.com/electron/electron-quick-start) repository as a base, could you please create a minimal Electron app that illustrates the issue you described, and post a link to it here?. Unfortunately, due to the limited amount of time of the maintainers and the limited amount of information present in this issue, we cannot help debug your app at this time. Instead, you should consider use one of the community forums, as there are more people there available to answer questions.. Unfortunately, due to the limited amount of time of the maintainers and the limited amount of information present in this issue, we cannot help debug your app at this time. Instead, you should make sure your issue is not already covered in the Frequently Asked Questions document, and consider using one of the community forums, as there are more people there available to answer questions.. Unfortunately, due to the limited amount of time of the maintainers and the limited amount of information present in this issue, we cannot help debug your app at this time. Instead, you should make sure your issue is not already answered in our Frequently Asked Questions document, and consider using one of the community forums, as there are more people there available to answer questions.. This is not a bug in Electron Packager itself. The behavior you describe is how Electron works internally.\nTo recap, when your Electron app's main script consists of only:\njavascript\nconsole.log(process.argv)\nIn development mode (npm start in the electron-quick-start repo), it prints out:\njavascript\n[ '/tmp/electron-quick-start/node_modules/electron/dist/electron', '.' ]\nWhen it's packaged, it prints out:\njavascript\n[ '/tmp/electron-quick-start/electron-quick-start-linux-x64/electron-quick-start' ]\nThis is because npm start runs electron .. What you should do is use app.isPackaged to determine whether you need to change process.argv before passing it to commander.. Since this issue refers to electron-builder and not Electron Packager, I'm closing this. The previous comment is correct about more appropriate support.. Thanks for filing an issue! In order to help you with your problem, we're going to need more information about it. In particular:\n\n\nConsole output when you run electron-packager with the environment variable DEBUG=electron-packager (instructions for Windows and non-Windows). Please include the stack trace if one exists.\n\n\nWhat command line arguments are you passing? Alternatively, if you are using the API, what\nparameters are you passing to the packager() function?\n\n\nPlease provide either a failing minimal testcase (with code) or detailed steps to reproduce your\nproblem. Using electron-quick-start is a good starting point.. Without having any context, I would suggest upgrading to Electron 4.0.4 or greater, and electron-rebuild 1.8.3 or greater. It probably has nothing to do with Electron Packager.. In recent versions of Electron:\n\n\n```javascript\nconst { app } = require('electron')\nif (app.isPackaged) {\n  process.env.NODE_ENV = 'production'\n}\n```\nDocs for app.isPackaged\nIf you need more assistance, please use one of the community forums, as this question isn't Electron Packager specific.. Yes, I was part of getting asar to 1.0.0. I plan on doing it when I have some free time.. Also, I plan on adding dependabot to this repository, so for future reference to visitors to this repository, issues asking for dependency version updates are not necessary.. You're not actually setting an icon to something valid. It looks like the icon is set to the value --prune=true.. If you're going to edit the comment, please consider using the issue template instead of deleting it. It makes it easier for us to diagnose your problem.. I appreciate the idea, but this is getting to be a slippery slope. Why not add .*.sw? for Vim, .nyc_output for nyc, and a whole other host of files? I would much rather have something like ignore-by-default that I don't have to manage. (But not that, because ignoring node_modules would be bad.). While I'm thinking about it, I'd probably want to avoid adding .gitignore-style ignore file support, because users would have a tendency to do something like --ignore.file=.gitignore, which will end very badly for them, because it would then ignore node_modules.. Electron (and by extension, Electron Packager), for the most part, uses the same architecture names as Node.js. These are different from the architecture names you'd find on your operating system.\nTo some extent, the supported architectures are also described on the Electron Support page in the official Electron docs.. It would be great if someone had a proposal that included what the API option would look like and what the CLI option would look like.. In order to debug your problem further, we need a minimal testcase to reproduce your problem. Using the electron-quick-start repository as a base, could you please create a minimal Electron app that illustrates the issue you described, and post a link to it here?. I would prefer not, because I don't have time to debug a full Electron app. I work on this package in my spare time.. Is it package.json or Package.json?. > Command I used: electron-packager main.js REM the main file, when I run electron-packager ., it return s following error:\nThe error means that you did not run npm install after presumably adding it to package.json via a text editor. But you're not supposed to provide a JavaScript file to electron-packager, you're supposed to provide the folder where the package.json of your app is.\nUnfortunately, due to the lack of additional information (namely, a minimal testcase with instructions to reliably reproduce the problem), I can't help any further. If you provide this information, I might be able to see what's wrong. I'm closing this issue until that happens.. No, it's electron-packager /path/to/folder.. All platform/arch decisions are up to the Electron group in charge of releases, Electron Packager only follows their direction.\nIn this case, I'm probably going to revert this PR and release a new version. My understanding is that a warning will be emitted from electron-download when 32-bit Linux builds >= 4.0.0 are downloaded, so it's at the developer's risk to use them. (They may or may not work.). Is this necessary?\n. electron-packager is the name of the package, I think it's OK to not capitalize it.\n. electron-packager\n. More consistent description, IMO:\n\nshould contain a hash of the application metadata to be embedded into the executable (Windows only). Keys supported:\n\nOpinions on whether the keys should be prefixed with * or - to visually indicate a list?\n. javascript\nif (err) return cb(err)\n...for consistency.\n. Might as well mention what the file format is for all platforms.\n. (And that you don't need to set this if you're just building for Linux, see #90.)\n. Please don't add trailing whitespace.\n. process.platform === 'darwin' is not the same as process.platform !== 'win32'.\n. Is it possible to run these tests via wine (particularly on Linux, so we can integrate them into the repository's continuous integration)?\n. :+1:\n. :+1: I think what I want to do is a sub-section with an example command, which would also explain exactly what would happen. Output directory name, abbreviated tree, etc. Make it painfully obvious.\n. Does this option also work with a regex? If so, the wording should be similar to asar-unpack, that is, unpacks the dirs to app.asar.unpacked directory whose names regex .match this string\n. @hokein per #175, could you give a description here as well?\n. If I'm reading the asar PR that you linked correctly, the value of asar-unpack-dir needs to exactly match the beginning of the path of the archived file/directory?\n. Er, I meant the beginning of the relative path, not the absolute path.\n. This would read better as:\n\nFor example, asar-unpack-dir=sub_dir will unpack the directory /<dir>/sub_dir.\n. coffee-script happens to be a node package with zero dependencies, so it didn't make the tests time out.\n\nIn terms of making it programmatic, the only way I can think of doing that is copying the basic app fixture and inserting the dependency in there. Is there another way you were thinking of?\n. tape was actually my first attempt. It has many dependencies which caused several tests to time out.\n. ncp doesn't have any dependencies, that'll work.\n. This is the only command line parameter that's camel cased. Is it possible for it to be hyphenated instead?\n. How's this?\n\nThe application category type, as shown in the Finder via View -> Arrange by Application Category when viewing the Applications directory (OS X only).\nFor example, appCategoryType=public.app-category.developer-tools will set the application category to Developer Tools.\nValid values are listed in Apple's documentation.\n. I think this line needs to be updated since you updated the CLI parameter name.\n. Add a period at the end, for consistency.\n. See: https://github.com/maxogden/electron-packager/pull/202/files#r46084226\n. The parameter alignment is off by one space.\n. Could you please add some documentation about this new parameter here?\n. Capitalize \"Electron\", and this should probably be reworded to not say strict-ssl in the description.\n. I probably should have caught this first, but how are you supposed to call this on the command line? I think this is the first boolean flag in electron-packager that defaults to true.\n. I anticipate getting questions about that, so it would be best to put that in usage.txt. (Alternatively, the flag should be named --disable-strict-ssl.)\n. This map should be sorted alphabetically.\n. This line and the previous line should be merged together.\n. Please add a description of the parameter here.\n. javascript\n// Windows skips packaging for OS X (darwin + mas), and OS X only has 64-bit releases\n. It feels like the three codesign calls could be DRY'd up a bit.\n. Please keep the dependency list alphabetized.\n. Minor nit - this is the wrong indentation. There should be no spaces between the beginning of the line and the option name. The description's indentation is fine.\n. Why did this indentation change?\n. In what case will this value be Electron? (The bigger question I'm asking is, is the conditional necessary?)\n. This should probably be named differently.\n. I'm not thrilled at having two ternary statements in a row here.\n. I would move supportedArchs and supportedPlatforms in index.js to common.js and use those instead. Otherwise, that will make PRs like #107 and #223 more complex than they need to be.\n. In my opinion, this makes it a bit more difficult to understand what's going on.\n. At the very least, please don't use single-letter variables here. Please also keep in mind that there is a PR to add the Mac App Store (MAS) platform (#223) which currently also uses the mac.js file.\n. I think with your current code, the MAS change will look like this:\n\njavascript\nresult[platform] = './' + (['darwin', 'mas'].indexOf(platform) !== -1 ? 'mac' : platform)\nIt's not great.\n. Seems like you may as well do either option for darwin as well and get rid of the ternary operator. (Though I'm not convinced that the second option actually works.)\n. I'm OK with ternary operators when all parts of the statement are simple.\n. I keep seeing variations on this idiom in the code and part of me wants to refactor it to\njavascript\nif (platform_is_mac(opts.platform)) {\n. Use util.isPlatformMac\n. Use util.isPlatformMac\n. Yeah, that's better. I should have looked a bit more closely at where it was defined.\n. Opinions on whether to actually link the PRs? I kind of wish GitHub would automatically do so.\n. I propose we do both. This way the person tagging the release is not on the hook to gather the release notes, it should be gathered as changes are added.\n. > Just have to be careful not to prematurely click the big green button on the page (why do they have to always have tempting big green buttons?!)\nYeah, today I already accidentally clicked the \"close PR\" button.\nThe nice thing about the NEWS.md approach is that a user can tell what's unreleased - using just GitHub Releases doesn't really help with that use case. I have needed to figure out if feature X has been released or not when responding to issues.\n. \"copyright\", not \"copyrights string\". I'll fix this post-merge. (I'm doing #265 anyway.)\n. Should add a comment that minimist doesn't do this for us. I almost forgot why this conditional was added.\n. Could you extract the ternary statement into a separate variable + if/else statement? It makes this line easier to read.\n. Please also add documentation to readme.md and usage.txt about this new functionality to tmpdir. Though you may want to hold off on that until #275 is merged.\n. It would read better as:\njavascript\n// minimist doesn't support multiple types for a single argument (in this case, `String` or `false`)\n. For consistency:\n\nDefaults to system temp directory, use --tmpdir=false to disable functionality.\n. >  tmpdir - String or false\n. Perhaps:\nSpecify --tmpdir=false to disable use of a temporary directory.\n. Well, I was trying to avoid having it say some variant of \"temp directory\" three times in three sentences - I guess that didn't work out. (I am open to suggestions.)\n. This is a more accurate link: https://www.npmjs.com/package/electron-osx-sign#opts\n. Also, you should add the same caveat as sign-entitlements:\n(Currently limited to Mac App Store distribution.)\n.  @sethlu thanks for the correction. I guess the caveat needs to be removed from the entitlements docs, then. That can happen outside of this PR.\n. What does the callback function signature look like?\n. It doesn't need to download all of the Electron zips for 0.37.4, just the OSX ones.\n. Never mind, there's more special changes in this release (see #298).\n. Fixed in https://github.com/electron-userland/electron-packager/pull/296/commits/68413f8e3948cef759321510aef5f9eeccad6ea7.\n. Does copy actually create an Array on erroring? Because that would be very unfortunate.\n. Do you mind removing these dependency updates from this PR?\n. I added this particular dependency to test #186. If you remove it, please replace it with a module (with zero dependencies) that creates a file in node_modules/.bin.\n. I answered my own question below.\n. That is a really unfortunate way to annotate JSON files.\n. We should probably update all of the copy calls to use that (in a separate PR). Having err be potentially more than one type is problematic for users.\n. This actually fixes a bug with strict-ssl :cry:\n. Given the way that Windows file locks work, I would be surprised if anyone tried running the tests on Windows lately and had them all pass.\n. All versions or just 6.x?\n. > This should probably use the alias feature of minimist, so the two values are always in sync. Otherwise, the other default might overwrite the user setting.\n\nHmm. I'll have to look into that, thanks.\n. Can we discuss doing 'use strict' in another PR?\n. It's more of a consistency and standards issue. You're only putting it in some of the files. In terms of standards, I found some interesting GitHub issues around it, but it's irrelevant to this PR.\n. Yeah, I'd rather get everything in one pass.\n. exe sounds awfully Windows-centric. sanitizeExecutableFilename?\nCould you also write some tests for this function? (That don't involve running packager().)\n. use strict conversation moved to #342.\n. I don't agree with putting verbose examples in usage.txt - it's supposed to be a brief description of how to use the electron-packager CLI. Changing the description of the flag (and leaving the original example) to the following would be a more succinct way of doing it:\n\n \n. I was reading last night that you can also put eslint config in package.json - perhaps we should do that.\n. I know this is necessary for the strict rule to work correctly, but I don't think it's accurate - most of the files are modules, right?\n. @develar per http://eslint.org/docs/user-guide/configuring#configuration-file-formats, eslint supports package.json - if some editor only supports .eslintrc, then it needs to be fixed.\n. > [...]whose names glob pattern or exactly match [...]\n. I think the callback you defined for extract should be another function in the series.\n. Should probably read\nArray of _Function_s\n. Minor nit: the rest of the file has standardized on - for list items.\n. > five parameters\n\n(Insert Spanish Inquisition meme here)\n. I was thinking more along the lines of\njavascript\nfunction (cb) {\n  extract(zipPath, {dir: buildDir}, cb)\n},\nfunction (cb) {\n  if (opts.afterExtract exists and is not array) {\n    return error\n  }\n  // etc.\n}\n...that got pseudocode-y, fast.\n. You should put that in your global .gitignore instead.\n. Don't put a new version number here, just the \"Added\"  section is sufficient.\nThis would be a minor version bump, anyway.\n. Don't bump the version number.\n. Should be named differently from the other test.\n. Also you should use another filename for this test, otherwise I believe it will create a false positive for the other ignore tests.\n. I didn't really want to add another dotfile but it seems that eslint has technical reasons to keep this one: https://github.com/eslint/eslint/issues/4261\n(The \"cascading\" reason is a bit silly IMO though. The execution one is quite reasonable.)\n. > There is no technical reason to not support specifying ignore in the package.json, but eslint doesn't support it.\nFrom the comment right above the one you posted in the linked issue:\n\nThere's also a problem with timing, we need ignore files before we start traversing and we only find config files while we are traversing.\n\nThat's what I meant by execution reason.\n. Keep in mind when you refactor your code to also add a test for the platform-specific ignores as well.\n. Sorry, I just woke up. I meant to say, to fully fix #385, replace if (opts.out) with\njavascript\nif (typeof(opts.out) === 'string')\n. It would probably be better if it printed a warning in the case where typeof(opts.out) not in ['undefined', 'string'] (to use pseudocode).\n. Should probably update the comment, too.\n. I don't think this is the warning we want to send if opts.out isn't specified.\n. Needs a test, but yes, that's the approach I'd use.\n. :scissors: \"Add\" - I should get better about that myself, it's redundant.\n. This should go above download (alphabetical order)\n. My suspicion is that this test will need to be disabled when running on Windows, but AppVeyor CI will tell us for sure.\n. If you're adding this, I assume you're going to handle releasing a new version as soon as  you merge. Otherwise, I suggest leaving it off and then the release will happen when it happens (mostly so the date is accurate).\n. > Support for the new electron package name (#435)\nI'm trying not to be redundant with the header name. (Doesn't always happen, sadly)\n. > If you're using a Debian/Ubuntu-derived distribution of Linux:\n. The convention is to avoid periods at the end of items and put GitHub issue numbers in parentheses.\n. Seems like another chance to DRY up some code.\n. Since we keep adding these, might as well genericize it.\n(Note to self: add optional part about adding npm install to test fixtures docs)\n. It feels like this code can be DRY'd with the electron code above.\n. Also for Linux, that script is specifically for x86_64 architectures (since Travis only provides those machines). Not sure if it will error if you try to run it on an x86 architecture (mostly because I haven't tried it).\n. Also, add a link comparing 7.4.0 to 7.5.0 like the other versions (including 7.4.0 which I just fixed in c4809e109bd467bd6ceaf7b07ee3cd3f962e74c2)\n. Parentheses around the issue number, please (for consistency)\n. I still think this can be \"merged\" with the other test.\n. Wouldn't it also error if both productName and name were missing?\n. Use backticks\n. Use backticks (not sure how I missed that last time)\n. \u2702\ufe0f \n. :scissors:\n. electron is preferred over electron-prebuilt (the former is the eventual replacement for the latter).\n. shouldn't that be ignored in test/work?\n. Can we name this appVersion in preparation for fixing #325?\n. Add GitHub PR # so you get credit \ud83d\ude04 \n. This is currently written more CLI-centric than API-centric (although it's a little too verbose for usage.txt). s/argument/option/g and remove the flag prefix from protocol-name.\n. Should be\n\nArray of Strings\n. > The URL protocol scheme\n\nscheme(s)\n. > This option can be specified multiple times to register multiple protocol schemes with the app.\n:scissors: \n. Last thing, I swear:\n\nFor example, specifying myapp [...]\n. FYI, the last time I tried this I had to do some weird things so that the OSX CI builds didn't take forever to run and used a relatively recent version of Wine: https://github.com/electron-userland/electron-packager/blob/v7.1.0/test/ci/before_install.sh#L6-L11\n. Tests involving rcedit kept timing out.\n. I think this change may be too heavy-handed - I believe it changes the name shown in the OSX metadata too. I'll have to write a (failing?) test for this.\n\nThis is the main reason why I tagged this PR as [WIP].\n. OK, now that I've committed https://github.com/electron-userland/electron-packager/pull/455/commits/7cdec7df85e207e476af497c671fd10bef7e01a5 I feel a bit better about the completeness of this PR, and removed the [WIP]. Reviews are much appreciated.\n. NPM can install everything, I guess...\n. This seems like it would make all of the tests that don't specify app-version explicitly slower.\n. :facepalm:\n. Sure, so long as it's temporary.\n. The only thing I ask is that a debug call be added that prints the options before they start getting mutated, since you're in there.\n. Pedantically speaking, either truthy or undefined.\n. Yep!\n. :+1: thanks\n. app/build versions\n. Looks like you need to add a test for this conditional.\n. It would be nice if these error messages could be DRY'd up somehow.\n. app-version isn't required. From docs/api.md:\n\nIf neither [app-version option nor version from package.json] are provided, the version of Electron will be used.\n. > original error message\n\nThe one that's sent by get-package-info? If so, perhaps it should be printed in a debug() message.\n. Can we make this debug statement more specific now with result.source?\n. Can we make this debug statement more specific now with result.source?\n. let\n. Use let + fat arrow syntax here?\n. Didn't you already do this earlier when declaring missingProps?\n. Can we make this debug statement more specific now with result.source?\n. > I've made an issue on the fs-extra repo\nFor reference: https://github.com/jprichardson/node-fs-extra/issues/287\n. This function has gotten rather large. Can it be split up?\n. Would an IO error include an invalid package.json? Just trying to think of ways to test this line.\n. let (I need to add ES6 rules to eslint...)\n. Should use fat arrow function syntax when possible.\n. I'd extract the conditional into a method for readability (and also lets you get rid of the comment.\n. Perhaps extract the map function into a top-level function named errorMessageForProperty?\n. The comment should still be updated.\n. My concern with having the readme be a symlink is that IIRC symlinks do not work on Windows.. Not at the moment, unfortunately.. I would prefer it if this was a full-fledged if statement.. Also, it should be mentioned that the old property is going to be removed in the next major version.. > Options previously formatted in kebab-case (i.e., with hyphens) are now available in camelCase, per JavaScript naming standards (#580). Options currently formatted in kebab-case (i.e., with hyphens) are deprecated in favor of their camelCase variants, per JavaScript naming standards (#580). For the docs, what I typically do when I'm renaming an option is add an entry for the old name with the type and a deprecated message (for example: version-string). There's no point in camel-casing version-string, it's deprecated.. This is incorrect, rcOpts is for the rcedit module. I take it you did a global search/replace?. Revert the opts.versionString change, please.. Please keep the options alphabetized, so probably place the deprecated options somewhere above their respective new names.. Unnecessary whitespace. This never existed as a JavaScript API option.. I agree with @MarshallOfSound (on both comments).. This wouldn't be a patch level change anyway.. That depends: what other manifest options might be useful to set in the future (via future rcedit features)?. Electron apps on Windows have a .NET assembly?\nThose other settings sound like things that Electron should already set, but supportedOS might be useful if the app depends on another exe with a higher Windows requirement.... If we're going to have a new option, I'd want to have tests for it.. Misspelled again :smile:. > The tests that I've seen only really test if the options actually get set, rather than test that the option setting did anything.\nYeah, I'd prefer these tests. There are too many integration tests as it is, which is why the testsuite takes so long to run. I just want tests that assert that the default and custom values get set appropriately.. I've talked to @MarshallOfSound about this, we've come to the conclusion that it should go into win32metadata, despite it being not quite metadata. I'd like the property to be called requestedExecutionLevel since that's the name of the manifest property (according to that blog post. (The other properties are the case-sensitive property names set by rcedit.). Isn't this the default?. Sounds reasonable.. per the spec:\n\nIt should be called packageManager in the API. There's a better way to structure this:\n\n```javascript\nopts.packageManager ||= 'npm'\nswitch (packageManager) {\n  case 'npm':\n    // do stuff\n  case 'yarn':\n    // do stuff\n  default:\n    throw error;\n}\n```. This should come back in some form or another. We need to be able to see when the prune operation occurs and with what package manager. It's pretty helpful for debugging user problems.. Please add a new NEWS entry instead of modifying historical NEWS entries.. Same as above.. Please put back the \"and\".. Please don't add this.\nAdd .idea to your global .gitignore.. Packager is Node 4-compatible :smile:. In other places, we use or (instead of |).. I didn't. Explanation is here: https://github.com/electron-userland/electron-packager/pull/228#issuecomment-168066128. :+1: https://github.com/electron-userland/electron-packager/pull/814/commits/9dcc68c1d0232382c3bd00d65602eca93d4213f5. If we're going to add this, it should be in a separate PR.. Could you please adjust this to conform to the Keep a Changelog format?. I don't think there needs to be an example for this, it should be self-explanatory.. The description should start with \"A path to\", like ordering below it.. This should be in a different PR.. This test should check that the copied asar is the same as the input asar. There is a utility function to assert this, I believe.. The description needs to be updated.. I think that if there are other asarOptions other than filename and filename is set, it should warn that the other options won't be used.. I think for efficiency purposes, if asar.filename is set, we shouldn't even copy the app directory in the first place. Then we can get rid of this fs.remove call.. Could you explain how target is determined? Shouldn't target always be dest?. There should only be one item in devDependencies, and it should be \"electron\": \"1.3.1\". Every time we add a new Electron version to the tests, it takes longer to run the tests due to downloading prebuilt binaries.. It should happen here. If it happens in argument parsing, people who use the JS API (such as users of Electron Forge or ember-electron) will not get the warning.. It's not clear from the docs that you can specify a directory for asar.filename. Although even if it did, I would disagree with it because the name of the option makes that choice not obvious. I think the value of asar.filename should only be an ASAR file.. Minor nit, remove the period and add (#823) at the end.. This is kind of redundant. Let me think about a better way to word this.. At this point asarOptions should be an instance variable, no need to calculate it twice.. I would rather have a real if statement than a multi-line ternary statement.. I don't know whether afterPrune and afterCopy hooks should be run, since neither of those operations actually took place, and this.originalResourcesAppDir doesn't actually exist.. This can be:\njs\n      }).then(exists => t.false(exists, 'app subdirectory should NOT exist when app.asar is built')). This should have a test.. I don't think returning early is the right solution... we may have to adjust the hook signature so that it's either the path to the resources app directory, or the path to the app.asar file (which would be a breaking change).\n@MarshallOfSound since you have dealt with a lot of code relating to the hooks, you might have some insight here.. Test that it warns. This is an example of doing that (although it should probably be genericized into a function):\nhttps://github.com/electron-userland/electron-packager/blob/a7437b908e68e97b288173759d0538efe7798c82/test/mas.js#L18-L33. This needs a test.. > A path to a pre-built asar file (this will circumvent asar generation).. Shouldn't this be wrapped in t.true()?. > path to a pre-built asar file (this will circumvent asar generation). \u2702\ufe0f  debug line. Should be !args.derefSymlinks. This should be outside of the CLI argument parsing, as I mentioned yesterday, because it will not give warnings to consumers of the JavaScript API.. The lines are unnecessary.. I'd get rid of , or any option related to the copy processes. Also, it's a little too verbose in general, but I need some time to think of a better way to word it.. You should just be able to throw new Error.. I think if we're going to do that, it should be in a separate PR.. Add whatever macOS version is equivalent to Mojave?. app's. Apple\nPeriod at the end. suggestion\n* macOS (formerly known as OS X). ",
    "freeall": ":+1: \n. ",
    "mafintosh": "This should already be supported if you add the --prune flag (https://github.com/maxogden/atom-shell-packager/blob/master/index.js#L94-L101)\n. @malept like @shama said we need to call the callback for module support\n. Hmm it seems i don't have publish rights. I already bumped the version so as soon as @maxogden wakes up I can publish this to npm.\n. PR would be great. What would be even better was to make a new module that would handle setting up protocol handlers for all the different platforms and use that here.\n. @jden nice - will take a look later\n. ",
    "TJkrusinski": "Ah, perfect, thanks!\n. ",
    "zckrs": ":+1: \n. :clap:\n. ",
    "cheeaun": ":+1: \n. ",
    "remixz": "If you have those dependencies in your devDependencies, you can pass --prune, and it'll remove those from the bundle, along with any other devDependencies.\nIn any case though, :+1: to that, would be a good default.\n. ",
    "sindresorhus": "Should also exclude the .git folder by default.\n. Or like npm, either use the whitelisting files array in package.json or the .npmignore blacklist.\n. @maxogden Not optimal as the user probably don't want those files deleted, only ignored from the packaged app, and the script would have no knowledge of how electron-packager packages the apps. The ignore logic could of course be a separate module electron-packager depends on.\n@jden When we have an agreement on the above.\n. :+1: \n. I don't think it's bug free, but it's pretty stable now, and Atom is using it so any issue will be fixed fast.\n. I think defaulting to the system arch would be weird as we're talking about packaging the app, not running. You'd want it to be predictable between computers.\nI just want less config. And having x64 as default means I wouldn't have to spell it out on my OS X and Linux targets.\n. I don't see what's confusing. It's just about a documented default. If you want to compile for 32bit too you just then add the --arch option.\n. Still makes sense. Not everyone can use the --all option and without, electron-packager requires a lot of config that could have good defaults. But I switched to electron-builder, so I don't really care anymore.\n. Yes, indeed.\n. I think it's Linux, because if I don't specify a --out the content ends up in ./App-linux/.\n. :+1: Hah, I was just about to open an issue about this.\n. :+1: what @jden said.\n. Give the pull request and commit a proper title.\n. But it does come with the node module rcedit that electron-packager depend on https://github.com/atom/node-rcedit/blob/master/bin/rcedit.exe\nWe should make sure everything is correct here: https://github.com/maxogden/electron-packager/blob/ac8aea014e04fa65a234f7398aca864f0524fecc/win32.js#L109 But I have a strong feeling it's something with rcedit.\n. There's also cpy.\n. Closing this. I'm now using electron-builder which has asar: true by default. And I don't have the time to finish this PR.\n. atom-shell is no more, so find a better example module.\nAnd can be simplified to:\n--ignore=\"node_modules/(atom-shell|node-gyp)\"\n. don't introduce whitespace\n. should be a . at the end.\n. ",
    "stefanbuck": "Maybe should get the ignores from the .gitignore\n. @maxogden Thanks for adding me as a collaborator. If I find time I'll give windows support a spin.\n. Thanks for adding Linux support and also for splitting code into several files :+1: \nI've tested your code on Mac and it works. Can you please squash the 'Fix test failure` into 'Add basic Linux support'.\n. ",
    "englercj": ":+1: For using the npm algorithm but I don't think that is enough to fix the need I have with choosing the right node_modules. I won't put \"node_modules/...\" in my package.json files array, because I wouldn't want them in my npm tgz, but there are like 2 modules that need to be included in the electron package.\nI have a bunch of normal dependencies that are used at runtime, but are compiled into the renderer code (browserify). I only have like 1 or 2 modules of my \"dependencies\" that I want to include in the output package that are used by the app code. I need a way to whitelist modules instead of only allowing blacklisting.\n. Just to throw in my two cents, I'm using this for creating packages currently and I love it.\nI agree with @Ivshti that installers are out of scope of this tool, but the only tool I am aware of (https://github.com/domderen/atom-shell-installer) doesn't work with a folder output from this tool (some complaint about name in the nuget packing process). So really looking for a CLI tool like this one that can create installer/dmg files for these apps for distribution.\n. +1 Just hit this today, I like using platform/arch in the output folder. I agree with @jenslind I think ./out-folder/$PLATFORM/$ARCH/... is best, and ./out-folder/$PLATFORM-$ARCH/... is good.\n. ",
    "jenslind": "This would be great! Could the use of a custom field like buildFiles instead of files be an option? Just to not interfere with npm.\n. Some input, I'm not too familiar with codesign. Also wondering if there should be a verification of the sign afterwards but i guess its not needed because it should throw an error if it fails anyway.\nBut yeah, what's in the commit works.\n. Existing tools for .dmg creation:\nhttps://github.com/andreyvit/create-dmg\nhttps://github.com/LinusU/node-appdmg\n. @sbruchmann no, electron-gh-releases is not a dev-dependencie and therefor it's needed in the packaged app.\n. I would prefer: ./out-folder/$PLATFORM/$ARCH/foo.app or ./out-folder/$PLATFORM-$ARCH/foo.app especially when running with --all\n. +1\n. Hmm, I can't reproduce this issue on Mac. Does your linux and mac builds work as expected?\n. Closing this, seemed to be an issue with my dev environment. Sorry.\n. ",
    "kfranqueiro": "Should this be closed given that --sign is implemented?\n. I think searching upwards seems like a good plan regardless, but here are a couple of off-the-cuff ideas in terms of where to start searching:\n- Start with opts.dir and look upwards, since there may be a package.json there (e.g. to specify main)\n  - Possible disadvantage: if you have a more fully-populated package.json higher up your tree\n- Start from ../.. relative to __dirname of electron-packager's main modules (i.e. above the node_modules folder containing it) - this would likely coincide with process.cwd() in common cases, but wouldn't break if people ran it from elsewhere\n  - Possible disadvantage: if you use electron-packager globally-installed?\nMy brain cells are limited at the moment so feel free to point out if I am overlooking something dumb :)\n. Regarding which one is the odd one out, I'd also say it's Linux, for a couple of reasons:\n- It doesn't use os.tmpdir() to do its work first like Win/Mac\n- Whereas the Win/Mac scripts effectively do path.join(opts.out || process.cwd(), ...), the Linux script does opts.out || path.join(process.cwd(), ...)\n. It occurs to me that we'd have to answer the question regarding how to structure subfolders to accommodate this, as has been discussed on #38.\nCurrently, electron-packager already effectively creates one level of subfolder with the OS name for Windows (and inconsistently only if --out is not specified for Linux).  Mac only gets a \"subfolder\" by virtue of how .apps are structured to begin with.\nI would be inclined to suggest always packaging into a name-<os>-<arch> subfolder (even for Mac - the .app would be inside that folder).  This has the following benefits:\n- Always follows the same pattern whether --all is specified or not\n- Isn't too onerous in cases where --all is not specified (as opposed to os/arch/name or os-arch/name - the subdirectories would seem kind of silly if you're only building for one at a time)\n- Potentially provides a nice pattern for releases as-is (whereas if you used subfolders, you'd likely want to rename the individual \"leaf folders\" to include your app name otherwise)\n- Never risks dumping a ton of files into the current directory or a parent directory of what the user expected\nMeanwhile, how about also supporting --platform=all, so you could build for all platforms but only one arch if you wanted?  (I presume --all would build all platforms for all architectures.)\n. FYI I started working on implementing this: https://github.com/kfranqueiro/electron-packager/commits/all\nEnsuring unique directories per-architecture isn't done yet.  Also, something odd is happening with --all where it doesn't build win32 x64; I am wondering if something is silently failing in the linux module to cause that - maybe something that'll be resolved when I tackle the part that's not done yet anyway (edit: confirmed working after unique directories are ensured).\nIt uses run-series, so it doesn't run in parallel as someone here suggested; that could potentially be arranged if we used run-parallel I suppose, but I'm wary of doing that primarily because I suspect it'd throw a wrench in the works of electron-download console output.\n. It occurs to me that --all might be incompatible with --icon as it is currently implemented, since AFAIK Windows and OS X accept different icon formats.  I suppose we might be able to get around that by taking the basename of whatever's passed and looking for .icns and .ico for each respective platform...\n. Based on the description and what I'm seeing, it sounds like this PR is now redundant of a combination of refactoring that's already been merged and #55 (which ironically the refactoring clobbered).  I think the cleanup/fixes in #88 will cover this.\n. @zaggino, can you have a try with 5.0.0 and confirm if this is already resolved there?  Thanks!\n. FWIW, I noticed that the linux module seems to actually move the user's app files into default_app.  The other two modules don't do this.  Wonder if that's a safe thing to do and if we could do it everywhere...\n. > That was the only way I could figure out how to get my app to run correctly on Linux.\nHuh, that's peculiar.  It's working for me on Linux from app or app.asar on my refactored branch.\n. This was never closed even though #55 was merged.  However, it has resurfaced (see #84).  I will be including a fix to reinstate this fix in the branch I am planning to PR shortly.\n. Now that #88 is merged, this should again be resolved (in 5.0.0).  Any objections to closing this?\n. Is this supposed to be usable via command-line arguments?  If it requires a hash, I'm not sure how that's possible...\n. I noticed this as well, and was wondering if it's actually an issue with rcedit.\n. I've submitted PR #76.\nYou probably don't want to hear this because chances are your minds are already made up, but I am compelled to mention that this probably could have taken half the time it took me if this code were more well-structured (dare I say even using a promises library - though I imagine at least async could still offer an improvement).  It took me a while just to figure out where it was safe to add this without breaking something and without making it even harder to maintain (originally looking inside the moveApp function).\n. Thanks for the replies.  I might be interested, but I suspect that we might want to get a few PRs merged beforehand to avoid needing ugly rebases.  Meanwhile I was inclined to maybe think about starting a stab at #77 this weekend or something to start with, which would likely give me a leg in to bring in run-series anyway.\n. I think this sounds like the same thing as #71, but if that's the case, @jden's comment has me kind of perplexed.\n. I\"ve noticed more along the lines of what the original comment in this issue states, as well - even running on the OS drive of a Windows machine, if I tell electron to build for darwin, it seems to immediately exit after saying \"Packaging app for platform darwin x64\".  No error is output whatsoever in this case.  I'm hoping to trace through later today to see how far it's actually getting.\n. I'm finding that the process is dying silently in extract-zip when running with --platform=darwin on Windows.  The call to extract never fires its callback.  I'm wondering if this could have something to do with the OS X .app having symlinks in it?\n. Yep...pretty sure it's the symlinks doing it.  Just tested again on a Windows VM running as administrator, and it completes successfully there.  (AFAIK Windows inexplicably requires elevation to create symlinks, yet doesn't to create junctions.)\n. The fs.symlink callback in writeSymlink in extract-zip/index.js reports an error, but that error is never properly passed to the callback passed to extract in electron-packager/index.js, so it gets entirely lost.\n. It occurs to me that even if you manage to get past the symlink issue when running electron-packager, I'm not sure you have too many options for actually packing the application up into a zip or anything either, because Windows trips on the symlinks there too (even with admin permissions).\n. I have access to Windows and I'm who added the \"skip\" workaround to begin with.  Windows requires elevation to create symlinks, but even then, I haven't managed to properly create archives out of builds that would seem to retain symlinks the same way they're retained on other platforms.  So I've been at a loss as to whether there's really a real \"solution\" to this other than \"build for OS X on OS X or Linux\".\n(Also, even though I do have a couple of machines running Windows, I've also done Electron app testing in a modern.ie VM on a MBP, which is something anyone can do.)\n. I have not tested this yet and I'm not entirely clear on how the fallback works, but wouldn't it perform a copy rather than a move?  Should we be cleaning up after it?\n. It should probably have been noted that this PR never touched the windows platform code path...\nI will have this resolved for all 3 centrally in index.js (and in usage.txt and the readme) on the branch that I PR once I figure out rebasing it.\nEdit: I just noticed the note in the initial description.  I suppose this is only addressing the errors that occur normally if you try to package into an output folder that already exists.  In the process of working on --all, though, it made more sense to me to make it explicitly skip or overwrite depending on whether the flag is set.  (I could've sworn I saw it cause errors regardless of target platform.)\n. My work to support --all eventually led me on a quest to refactor a bunch of things that should have been written in one place but instead were written in 3 places, sometimes inconsistently.  I have completed my refactoring but I figure I have a bunch of regression testing to do as a result, and am hoping to put some thought into automated tests at the same time.\nMy current work-in-progress is here.  I realize this might be springing a rather large surprise, but I do hope it can make things generally more consistent, and perhaps even work in fixes to a few other issues that are out there.  Let me know if you want to talk about it or anything (I'm kgf on freenode).\n. Just poking in to say I'm not quite dead yet and haven't forgotten about this.  I have one unit test left to write on my refactor branch, then I need to make sure I document all the things, catch-up against master, and clean up the history.\nFurther update: apparently mv can be flaky on Windows 8 - at least, it was flaking out on me particularly when running multiple builds, so I've switched to using ncp for the final push to the output directory, which is working everywhere.  Readme is updated, just need to better document the commits themselves now that this is nearly done and issue a PR.\n. Heh, yeah just noticed some e-mails telling me things got merged, I have some rebasing to do again tomorrow :P also looks like you took care of one of the things my refactor was taking care of anyway.\nI'll figure out what to do with my branch, I think I am covering some of the same bases so in some cases it will basically result in code being moved around.  I will probably still essentially replace what's in the tests folder on master, since I am kicking things a lot more exhaustively already.\n. AFAICT, the one use of mv is simply renaming within the same folder: https://github.com/maxogden/electron-packager/blob/v4.1.3/win32.js#L25\nI was under the impression #60 was more specifically related to trying to move a folder with symlinks across drives.  I'm not sure whether mv can accommodate that, but the PR for it doesn't rely on mv either way.\n. I get the whole cross-device thing, which is what #74 is about, so using mv makes sense there, yeah.  The only place that is currently using mv is a rename of a single file within the same directory it's already in, and other occurrences of that (e.g. in linux.js) use rename, which is why I originally flagged this.\nNot sure if we want to do something to make other rename uses more consistent ultimately, but I agree to mv staying if it can be used for #74.\n. I've been manually testing everything I can think of and ignore is one of the last things left on my list, so hopefully I'll hit that sometime in the coming week to confirm this.\n. I've confirmed tonight that this is indeed wrong - for example, --ignore='ignore/this' will ignore correctly for windows builds on windows, but not linux/mac builds on windows.  The check should be detecting against the host platform, not the platform being targeted.  (Or perhaps look at path.sep and if it's not already /, replace based on it.)\nI should be able to come up with a PR for this.\n. This sounds like a similar problem to what #73 is trying to solve.  Apparently it's an issue on more than a single platform.  It certainly looks as if mac.js is already adding Resources to the path, and then asarApp is adding resources again, which is wrong.\n. The Mac code should be fine now, as it already adds Resources on its side of the code.\nEdit: ah, sorry, now I see what you were referring to in the original PR.\n. Thanks!\n. I just noticed that #54 seems to be discussing something like this.  It also points to #55 which was supposedly merged which appears to do exactly what I'm suggesting here, but that is definitely not what is happening on master.  Could this have been accidentally trampled on in a previous refactor?\n. Looking at https://github.com/maxogden/electron-packager/commit/16b2feb39f848667c512a2ca9cca3b283a1869e4 I don't see any traces of #55 at all.  I suspect that a couple of merges happened at the same time without a proper resolution of merge conflicts...in which case this is a compatibility-breaking regression that has gone uncaught for a few weeks.\n. This sounds like #81 and #73 which have been resolved on master (but not in a release yet).\nEdit: now available in 4.2.0.\n. I believe this is fixed in 4.2.0 and 5.0.0 so I'm closing this.  Let us know if you still experience this issue after updating.  Thanks!\n. Are you essentially referring to ignoring devDependencies?  There is already a --prune option that effectively achieves the same result, though it ends up copying the files first and then running npm prune --production, so I suppose avoiding copying them in the first place would be better.\n. I've run the tests on OS X 10.10, Xubuntu, Windows 7, and Windows 8, and verified they passed before submitting this PR.\n. Awesome!  Thanks for accepting it.  Glad my OCD paid off :)\n. Thanks for pointing this out.  @maxogden if you'd like I can incorporate this cleanly into my refactor branch for #88 (as a separate commit with the author preserved).\n. Looking at this again, it occurs to me that those particular lines of the readme generally only include the required arguments.  What do you think of this update instead?  I'd be happy to attribute it to you if you'd like, since you provided the information.\n. This change has to do with --all (and support for building multiple platforms/archs from one command) being added.  For consistency's sake, all builds now result in a top-level directory whose name includes the platform and arch.\nThis does result in extra nesting of the Mac app, which I realize could be considered a bit awkward, but the same process is now being followed for all platforms, and results in consistent naming of output folders when building multiple platforms at once (e.g. myapp-darwin-x64, myapp-linux-x64, myapp-win32-x64).\n. This is neat, but I have a few concerns about the approach of relying on npm + semver:\n- This just hangs if you try to run it without an internet connection\n- Adding npm as a dependency increases the payload of this repository's dependencies by 17MB\n- If you use a version range, you may unwittingly end up packaging with a different version than you've been testing with in development (for example, if you used ~0.28.2, never updated your dependencies, but then ran packager after 0.28.3 released)\nI am wondering if it would be more appropriate, once you find reference of electron-prebuilt in a package.json, to then inspect node_modules/electron-prebuilt/package.json relative to the directory where you found it specified as a dependency, and used the version that is already installed.  This would avoid the caveats above.\n(I am wondering if I am potentially overlooking any caveats with regard to npm deduplication, though...)\n. I'm not sure this approach would work in the case of native modules.  Have you seen electron-rebuild?\n. That message is due to electron-packager working around #71 (which I see you've also commented on); without the workaround, electron-packager would just silently bail out in this situation.\nYou can try running as administrator on Windows to get around this, but even then, I'm not sure there's a safe way to zip up the OS X app - I tried Windows' built-in compressed folder and 7-zip and both trip up on the symlinks.\nI'm inclined to close this and continue tracking #71.\n. No problem.  I'll close this then.\n. Can you provide this information?\nThe only way I can reproduce this issue is by building on Windows, which is likely trashing permissions from the Linux distributions of Electron. :/  On OS X and Linux the Linux executables seem to have proper permissions.\n. I was wondering all along whether I should need to rename those other apps as well, but I hadn't encountered any issues like this.\nWhat should I need to do to reproduce this error message?\n. Thanks for the info, and sorry for the inconvenience.  I will take a look at this.\n. It seems like either the --ignore or --prune option in electron-packager would allow you to do what you want.  --ignore allows you to specify patterns that won't be copied into the releases to begin with (and thus won't be included in app.asar either), and --prune will run npm prune --production on the copied application.\n. @maxogden, any objections to me landing this and then maybe tagging a 5.0.2?\n. Thanks!\n. opts.version < '0.29.0' isn't actually going to do what you think it is, is it?  You'd need semver for that.\nAll you should need to do to update the version of Electron used for tests is bump it in config.json.  We will have to update the --all tests' expected conditions in terms of how many builds are expected to exist.\n(I didn't entertain the thought of testing multiple versions in one run because that would take a lot of time to run...)\n. This should ideally include updates to the rest of the README to indicate that either dir or asar-package is now required.  (Currently it lists dir as required.)\nThe part of the README that is the same as usage.txt should also be updated.\n. What platform did you actually run electron-packager on?  IIRC, Windows eats the proper permissioning of the Linux binary which should be executable.  If you do ls -l and see no x bits on MyAppName, that's your problem.\n. app.asar probably shouldn't actually be 50MB, though I suppose it depends on how much you have in the way of production dependencies for the application.\nWhat does your directory structure and configuration look like?  Are you sure you aren't neglecting to ignore some things you should be?\n. That does seem like a large difference.  Is the directory you're outputting to under the directory you're packaging, and if so, have you told electron-packager to ignore it?\n. I've been under the impression all along that electron-packager is far more HDD-intensive than CPU-intensive (most of the time is spent extracting/copying files), so I'm not sure whether parallelization will actually improve anything if the bottleneck is the hard drive.  Maybe there's room for improvement where SSDs are concerned...\n. Currently the icon option automatically strips the extension of the filename and looks for icns for Mac and ico for Windows.\n. It was implemented as part of #88, since otherwise --all with --icon didn't make a whole lot of sense.  Looking at how it's doc'd (or not), yeah, I should've thought to expand on it.  I was probably not sure of how much I should touch docs at the time.\n. Assuming you are referring to the default menu bar, this sounds similar to an issue I have seen a couple of people ask in #atom-shell, and it's more a result of packaging your app and running it directly, than of electron-packager specifically (it just happens to be a tool that facilitates that).\nWhen you run your app in development, you are probably running electron my-app-dir.  This ends up running Electron's default app, then loading your app through that.  The default app is what sets up that menu.  When you package your app, you are going to be running your app directly, not through the default app, so no menu.\nIf you have a specific use for menus, I would generally expect that you'd be configuring your own menu within your app anyway, in which case this issue should become moot.\n. This sounds like the same thing as #137.  The value of --version is the electron version you want to use, not your app's version.\n. I'm going to guess you have the same problem as #139, that you've ended up including your output folder in subsequent electron-packager runs.  Try adding it to --ignore.\n. Hm.  Are you sure you aren't also accidentally including an electron directory from development?  Electron itself is usually ~40-50MB I think...\n. Usually if you get the default \"welcome to electron\" app after packaging, it's because main isn't configured correctly in package.json to point to where your app's entry point is.  I see you've configured main but are you sure it's pointing at the right module (and one that exists), and that your package.json is also making it into the packaged application?\n. Well, if you look at Visual Studio Code, for example, they don't even pack up an asar - you can plainly see the contents of the resources/app folder.  The JavaScript is minified, and there is a lot of it, but technically someone who is really persistent (and perhaps really bored and really needs other hobbies) could try to piece together what it's doing.\nAs the OP points out, even combining the data with the executable doesn't make the source completely inaccessible, it just further obscures it.  Ultimately, you can arrive at some level of \"security through obscurity\", but that's as far as you're going to get.  (This is arguably true of other languages as well to varying extents, e.g. using Java decompilers.)\n. This approach seems a bit naive, since it's completely possible for someone to reference a relative directory without ./ in front at all.  Would using path.resolve on the output directory and the cwd and comparing the two be a better idea?\nI also suspect it may be possible to normalize this into ignore up-front rather than every single time the filter runs, which could be a lot.\n. @pyro2927 Yes, I think so.  However, it occurs to me that we might need to do some substitution for cwd in Windows (since the filename being compared has all backslashes replaced with forward slashes immediately below, but cwd will similarly have backslashes on Windows).\nMeanwhile, point taken with how you moved up ignore being set, I missed that before (and forgot userIgnoreFilter returns a function, and isn't actually the filter function itself).  To @maxogden's point, I suppose we'd have to time a run with a significant number of files under the source directory to see whether the difference is even noticeable, but if it's noticeable at all it seems worth avoiding the performance regression, since the filter function runs on each filename under the source directory, and I'd only expect applications to get bigger...\n. I'm a little confused at where electron-packager does or should draw the line, since doesn't it already modify some plist entries?\n. From what I recall when I tested this (I run Windows 8 and tested on a win7 VM), you normally cannot even run electron-packager targeting darwin without admin privileges due to symlinks (which electron-packager detects and skips), and if you do run with admin privileges, yes, I've found it impossible to archive correctly without running into errors.  I'm not sure if there's a way around it besides packaging for OS X on OS X or Linux.\nTo be clear, electron-packager itself shouldn't be resulting in an error AFAIK.\n. Can you explain a case where this failure occurs?  appPath shouldn't need to be created - it should already exist once the template is copied.  (It's a concatenation of tempPath and appRelativePath, the latter being the path that app is found within the electron distribution for the respective OS.)\nHave there been any changes to the organization of the electron distributions lately?\n. After poking around with your app, it appears that running your app via doubleclicking in Finder does not run with nearly the same PATH that running from a terminal does, so depending on where the drupal command ends up installed in your case, it could be that it ends up not finding it when run that way?\nI'm not sure if the other users reporting this issue are in the same boat - do they use shelljs or child_process.exec/etc. in their apps?  Is there a difference running the packaged app via terminal vs. Finder for them?\n. @erkyrath in my testing, both have the same effect (both work, as opposed to opening directly from Finder).\n. You said you tried setting shell.env.PATH, but AFAIK shell is not a thing that exists...  Did you try setting process.env.PATH as @malept said?  That works for me.\n. Isn't this normally solved by specifying the main property in package.json?\n. I'm pretty sure blame only lists me because I touched that (and a lot in general) when refactoring for what became 5.0.0.  As far as I can tell, this logic even pre-dates that, and it might even pre-date who touched it last at that point too.\nMac bundles are mostly a mystery to me.  Your research sounds plausible but I don't have any other knowledge to confirm/deny it.\n. Just leave off the file extension in the option and it'll resolve it for you, per-platform.\nFrom the README:\n\nIf the file extension is omitted, it is auto-completed to the correct extension based on the platform, including when --platform=all is in effect.\n. Do you think it's worth noting somewhere/somehow that --platform=all is now going to end up including mas?  (i.e. if people want to continue building for the targets that all used to mean, they'd have to use --platform=darwin,linux,win32 instead; not sure if this should also mean a major version bump)\n. rename (line 11) is at 0 spaces. its body (line 12) is at 4 (should be 2) and its end brace (line 13) is at 2 (should be 0), because the location you moved it from was already inside another function.\n. My one concern is that specifying ignore as a function, but then requiring it to return false to ignore, feels kind of backwards.  (This is primarily awkward because previously the function was internal whereas now it's directly exposed.)  I realize the doc update explains that, but I figure it's still apt to throw people.\n\nGiven that the code calls the ignore function within the function it actually passes to filter anyway, could we throw ! in front of that call so that ignore as a function could be implemented to return true to ignore instead?\n. Also, it seems as if the added test failed on CI?\n. Your code looks like it was written against Electron 0.35+ (which is what added the centralized electron module), but you're telling electron-packager to build using 0.33.\n. In addition to @malept's thought about specifying a unique tmpdir for each run, I'm curious what your package does that requires performing multiple runs in parallel. If the reason is simply to run builds for multiple architectures, electron-packager already generally allows you to do that via a single command, though it still runs them in series at the moment; we could look into changing that, but the hard disk is likely going to be the bottleneck either way so I'm not sure it is of much consequence.\nI might be able to fathom a performance argument for this (since it presumably avoids one set of copy operations), but I can't really see a functionality argument, or whether it's worth the complexity it adds in terms of code paths.\nI suppose one question I should be asking (cc @maxogden?) is, historically, what was the main motivation for copying to tmp first to begin with? I wouldn't want to be opening a can of worms that specifically avoided.\nAdditionally:\n- I see no tests added for the new behavior\n- If the 'false' to false coersion is intended for CLI use, it might make more sense in cli.js before the packager call (I presume it couldn't be marked as a boolean to minimist since tmpdir can still be a string... unless we made this flag a separate option altogether)\n- Admittedly I've only had a few minutes to look over this, but can you explain the if (opts.tmpdir === false && file === opts.out) check added to the filter function?\n. It would be more than a one-line change. IIRC right now we are only actually deleting the tmp directory on the start of the next run, which won't know the value from the previous run. We could presumably solve that either by deleting it at the end of a run (both in cases of success and failure) or by globbing for a common prefix we'd expect to use for all tmp folders.\nGiven that part of the reasoning for this PR is to just allow less file copying altogether, though, my previous question of \"why does electron-packager use a tmpdir to begin with and would not using one be bad\" also stands.\n. I agree RE avoiding an inconsistent state, which is probably why I vaguely recall leaving tmpdir cleanup at the beginning of the process when I refactored stuff in #88.\n\nNow it seems like the simplest option would be to allow the staging directory to be specified, and default it to tmpdir\n\nIsn't that what the tmpdir option now allows? Or did you mean more like what is being proposed here, which is allow there to optionally not be a staging area at all?\n. +1 IMO. Sorry, I'd looked at it last week and somehow neglected to comment.\n. It's listed as being included with no flags required at this point (though it's unclear to me whether this list pertains to both 4.x and 5.x): https://nodejs.org/en/docs/es6/\n. Yeah, I just ran a quick test and it's fine with Node 4 but needs the flag on 0.12.\n. I guess I'm kind of wondering what it'd look like with vs. without generators and whether it's worth introducing them for this one thing.\n. > I imagine more people want to build for all platforms/arches rather than a specific one.\nAt least in my own personal use-cases, this is likely to become less of the case in 6.0.0, since I have no desire to tangle with MAS shenanigans (and is mainly why I wondered if adding that warranted the major bump).\n\nI didn't know there was an --all option because I didn't read the readme and rarely do.\n\nI don't mean to sound snarky, but it seems a little funny to be suggesting a change to the readme if you're not going to actually read the readme...  but as @malept has said, perhaps some restructuring can also help.\n. At least on OS X, .apps very often have title-cased names.  I'd be wary of electron-packager suddenly becoming magically opinionated about that.\n. Does this mean the next tagged version would end up being 7.0.0, or are you thinking of allowing this to go into a minor release (presumably not patch)?\n. Oh hey look at that milestone over there.  In that case, sounds good to me.\n. I can kind of see @develar's point too, but at the same time, on the other hand, we skip packaging for Mac OS X on Windows in cases where we know that will cause problems due to Windows permissions and symlinks (see https://github.com/electron-userland/electron-packager/issues/71#issuecomment-113945576).\nSo while I can see the \"you're telling it to build all these things, if one fails, it didn't do what you want\" argument, I could also see a \"well, it'll build all it can anyway\" argument.\n. Doesn't cli.js exit with an error code based on the actual API resulting in an error anyway?\nCurrently skipped platforms resolve to an undefined value which ends up pruned from the appPaths array at the end of index.js; maybe for the case of skips caused by environment issues we keep track of that separately so we can decide whether to in fact call cb with an error at the end instead?\n. --icon works for me on Windows 8, at least testing via https://github.com/kfranqueiro/electron-dojo-boilerplate (updating the electron-packager version in package.json and the electron version in Gruntfile.js).\nAre you sure the icon is valid?\n. From the docs:\n\nthe url must contain the protocol prefix, e.g. the http:// or file://\n\nI might vaguely recall having made this mistake once before and it happened to work on one OS but not another.\n. Don't we already have several dependencies (e.g. asar, extract-zip, mkdirp...) and devDependencies (tape) that add to .bin?  Still seems unnecessary.\n. You'll need to reduce the indentation of the body of this function since you moved it out of moveHelpers.\n. I commented related to this earlier; I suspect using the boolean flag is unsafe because tmpdir is normally a string (the location of the staging area); it is being overloaded basically to have false treated as a special value so that the staging area can be disabled.\n. If we were to use GitHub's releases feature instead of add a file to the repo ourselves, it automatically links issues there.\n. FWIW, any contributor is able to create or edit a release draft on github at any time to keep track of release notes ahead of an actual release; e.g. with dgrid I try to keep a draft updated as each thing gets merged. Just have to be careful not to prematurely click the big green button on the page (why do they have to always have tempting big green buttons?!)\nNot sure if that influences your thought of doing both a NEWS.md and github release notes.\n. The callback receives an array, since 5.0.0.  (I guess I missed updating something in the readme back when I did #88?)\n. This should be updated to an array of strings, and Paths to the newly created applications.  (Same as my note above, commenting here as well so we don't miss it)\n. It's still error-object-first, it's just (err, appPaths) now rather than singular appPath.\n. ",
    "oleander": "That solved the problem. Thanks. I used this online tool to convert the icon. https://iconverticons.com/online/\n. ",
    "marwanhilmi": "I'm working with Electron + Windows and can give this a test run. Thanks @jden!\n@maxogden @jden Are you interested in adding installer support as well (ie. creating a Setup.exe)? \n. atom-windows.zip is a simply a .zip of the output folder as described in Option 1.\nAtomSetup.exe is an installer created with Squirrel for Windows which does a few things:\n- installs to user's home directory in AppData/Local\n- creates entry in Add/Remove programs\n- allows for auto-updating to work (whereas the zip version does not support it)\nNaturally the simple option is .zip support.\nIt is also pretty straight forward to create a basic installer with a MakeNSIS configuration file (see example here: https://github.com/Aluxian/Facebook-Messenger-Desktop/blob/master/assets-windows/) but note that wouldn't give the auto-updating functionality found in the solution Atom uses.\nMy current use case calls for using Squirrel (because I need the auto-updater and don't want to roll my own). We would need to either bundle or download a handful of the Squirrel binaries. You can see how Atom uses Squirrel to generate the installer here: https://github.com/atom/grunt-electron-installer\n. Yeah that's what it looks like, an exe file along with a handful of other dlls and misc files.\n-rwxr-xr-x@   1 mhilmi  staff      1055 Apr 30 20:42 LICENSE\n-rwxr-xr-x@   1 mhilmi  staff   1492992 Apr 30 20:44 Update.exe\n-rwxr-xr-x@   1 mhilmi  staff   7214344 Apr 30 20:46 atom.exe\ndrwxr-xr-x@   4 mhilmi  staff       136 Apr 30 20:42 chromedriver\n-rwxr-xr-x@   1 mhilmi  staff  56402432 Apr 30 20:42 chromiumcontent.dll\n-rwxr-xr-x@   1 mhilmi  staff    252859 Apr 30 20:42 content_resources_200_percent.pak\n-rwxr-xr-x@   1 mhilmi  staff   8457212 Apr 30 20:42 content_shell.pak\n-rwxr-xr-x@   1 mhilmi  staff   3466856 Apr 30 20:42 d3dcompiler_47.dll\n-rwxr-xr-x@   1 mhilmi  staff   1686016 Apr 30 20:42 ffmpegsumo.dll\n-rwxr-xr-x@   1 mhilmi  staff  10457856 Apr 30 20:42 icudtl.dat\n-rwxr-xr-x@   1 mhilmi  staff     10752 Apr 30 20:42 libEGL.dll\n-rwxr-xr-x@   1 mhilmi  staff   1512960 Apr 30 20:42 libGLESv2.dll\ndrwxr-xr-x@  55 mhilmi  staff      1870 Apr 30 20:42 locales\n-rwxr-xr-x@   1 mhilmi  staff    455328 Apr 30 20:42 msvcp120.dll\n-rwxr-xr-x@   1 mhilmi  staff    970912 Apr 30 20:42 msvcr120.dll\n-rwxr-xr-x@   1 mhilmi  staff    413533 Apr 30 20:42 natives_blob.bin\ndrwxr-xr-x@   8 mhilmi  staff       272 Apr 30 20:44 resources\n-rwxr-xr-x@   1 mhilmi  staff    742500 Apr 30 20:42 snapshot_blob.bin\n-rwxr-xr-x@   1 mhilmi  staff    199302 Apr 30 20:42 ui_resources_200_percent.pak\n-rwxr-xr-x@   1 mhilmi  staff    247984 Apr 30 20:42 vccorlib120.dll\n-rwxr-xr-x@   1 mhilmi  staff         7 Apr 30 20:42 version\n-rwxr-xr-x@   1 mhilmi  staff     81768 Apr 30 20:42 xinput1_3.dll\n. ",
    "Ivshti": "@maxogden can this be merged?\n. I am for an option between zip and raw folder. An installer doesn't make sense, I think it's out of the scope for electron-packager. This is a job for a new tool that creates an installer for Windows and a dmg for OS X? \n. @englercj this is a tough thing. I've been packaging my app for almost a year now, and there are a few challenges I couldn't automate\n1) DMG - setting OS X folder options for a background and icon size programatically; couldn't find a way to do that. You can still use a template DMG and build from there\n2) Windows - finding a quality self-extracting installer that allows building from any platform (I Use OS X for building / dev); Paquet Builder is terrific but also paid (IMO deservingly so) and can be used programatically. Unfortunately I don't know if Wine can run it so that we can build from any platform.\nMy 2 cents, unless you're pushing new versions out every day, do the final step manually. It takes like 3 actions on OS X (replacing .app in the DMG) and 2-3 on Windows (pressing build on your installer creator). \nI am not trying to discourage you from automation though, I am just saying it's a nasty process to automate. For OS X - sure. For windows - if there's a way to build quality SFX installers under any platform - sure, but I haven't been able to find that.\n. Awesome, thanks.\n. That sounds good but I couldn't quite imagine it totally elegant from an architecture point of view.\nMaybe something in like\n``` javascript\n// Both return a plist format, but not the full plist, just an object with sub-properties CFBundleDocumentTypes / CFBundleURLTypes\n// Use by extending plist object with it \n.mac.supportedFiles([ { extension: \"mp4\" / and more info about the type / }]);\n.mac.supportedProtocols(/ same format as currently supported /); \n// Both return a string in .reg format\n.win.supportedFiles(plistHandle, [ { extension: \"mp4\" / and more info about the type / }]);\n.win.supportedProtocols(plistHandle, / same format as currently supported /);\n```\nThat sounds reasonable.\n. @jden Great job! \nThis has to be run at runtime or install time. This isn't bad, but on OS X it has to happen when building the package, also on Linux (*.desktop files), so we shouldn't integrate it into electron-packager\n. @jden @mafintosh I think we can consider this closed, and just link @jden's module somewhere. Since we cannot do it on building the app (electron-packager), the best approach would be that developers call it on first init.\n. Can we please bump & publish when this is merged? :)\n. @malept  Done.\n. Thanks for the tip, updated the documentation\n. ",
    "lmatteis": "@Ivshti how do you actually \"press build on your installer creator\"? Where do you find this option? I'd like to deliver a single .exe rather than a .zip with a bunch of dll's inside.\n. ",
    "jrudio": "Hi @maxogden, \n  This seems to be relatively easy right? I would like to use electron-packager in my meteor package, but as you have said it uses the npm pre-built binary, whereas I would need it to use the unzipped version of electron.So I would just need to add a way to supply the path to of my unzipped electron to electron-packager?\n. Haha I thank you for pointing it out. You convinced me I do not need to use the zipped up version. I guess I was stuck on that idea because of a boilerplate I ran across that used the zipped version, and I believed that it was the best solution. So, yeah, my idea was flawed. Thanks for the response, and good stuff on the windows support!\n. Yeah, I was trying to package up an app that was on my second hdd. I just tried it on my primary hdd and it's working fine. Although, I tried this after I had re-downloaded the electron-packager so I wasn't able to test it on the other version.\n. No problem, and thanks for the quick answers! Even though I should have just googled it, lol.\n. ",
    "rv2358": "Thanks for the response.\n. ",
    "Rameshv": "@jden +1 for https://github.com/felicienfrancois/node-resourcehacker sounds like a good alternative.  is anybody working on that..??\n. @jden yep thats my concern too. I made a quick fix by implementing the npm postinstall hook asyou suggested. You can see the PR here https://github.com/felicienfrancois/node-resourcehacker/pull/3. Waiting for the response from the author on this. \nLet me know if this works.\n. ah cool, thanks @felicienfrancois . yep rcedit works just fine with the version string info.. thanks for the hint.. it saved my day\n. hi @Ivshti , with this https://github.com/maxogden/electron-packager/pull/63 merge, you can do this now.. check the readme for more info\n. I have too many issues with https://github.com/atom/grunt-electron-installer for creating installers and code signing. I can't get this even compile in my local/build servers. \nSo i went ahead and implemented my own app installer creation (using inno setup https://github.com/jrsoftware/issrc instead the atom squirrel) and code signing with signtool.. it works perfect... its currently a bit messy. \nIts a set of separate grunt tasks now.  If you are looking to go this way, let me know..  i ll integrate with electron-package (along with this https://github.com/maxogden/electron-packager/issues/30) and make a pull request soon \n. @jden thats a good point, i am up for having the deference as a default option.. so https://github.com/maxogden/electron-packager/pull/43 is a right way to go \n. Done @malept \n. Companion pr made to the grunt-electron https://github.com/sindresorhus/grunt-electron/pull/2 with updated readme on how to use the version-string in grunt config\n. hey @jden i think i got the issue. if there is no icon specified, it skips the entire rcedit call.\nif (!opts.icon) {\n        return cb(null, finalPath)\n      }\ni ll fix it and push in few..\n. hi @kfranqueiro it is possible to use this with command line arguments too. packager uses minimist which parses the hashes too. You can do this way\n```\nelectron-packager|versionedit \u2717\u21d2 \nnode example.js --name=Test --dir='out' --version-string.CompanyName=pocketworks --version-string.LegalCopyright='Copyright 2015 Pocketworks UK. All rights reserved.'\n{ _: [],\n  name: 'Test',\n  dir: 'out',\n  'version-string': \n   { CompanyName: 'pocketworks',\n     LegalCopyright: 'Copyright 2015 Pocketworks UK. All rights reserved.' } }\n``\n. @alexwarren @kfranqueiroFileVersionis the correct property metadata name. I just verified it in an exe  with the resource hacker. Yep it seems like the issue is with rcedit\n. @kfranqueiro yep, no problems. feel free to do it :)\n. Yep @malept your message is more appropriate.  And i think-` is suitable for list. \nAlso i can make a pull to https://github.com/sindresorhus/grunt-electron on how to specify the hash. That will be easier \n. ",
    "felicienfrancois": "rcedit works pretty well and can do that (I use grunt-rcedit on my electron app).\nThis is not well documented but all thoose strings are \"version-strings\".\n$ rcedit \"path-to-exe\" --set-version-string \"CompanyName\" \"MyCompany\"\n$ rcedit \"path-to-exe\" --set-version-string \"FileDescription\" \"This is an exe\"\n$ rcedit \"path-to-exe\" --set-version-string \"LegalCopyright\" \"Copyright whatever\"\n$ rcedit \"path-to-exe\" --set-version-string \"ProductName\" \"MyAwesomeProduct\"\nTo get all the possible keys, you can open the exe with a gui program like resourcehacker or winresourcer\nPS: I found this on the grunt-rcedit doc\n. @alexwarren @s-a \nWindows title is handled by electron runtime.\nIt means that you have to set the title in your code when creating a BrowserWindow\nhttps://github.com/atom/electron/blob/master/docs/api/browser-window.md#new-browserwindowoptions\nSame for the icon, you have to set the runtime icon (ie window titlebar and runtime taskbar icon) when creating a BrowserWindow\n. @s-a ok sorry.\nIt seems the name in the taskbar depends if it have been pined and how:\n- If not pined, it depends on the runtime. Seems to be not consistant across electron versions. Maybe the undocumented \"productName\" entry of package.json could do the trick.\n- If pined by dragging a shortcut, it keeps the name of the shortcut\n- If pined by dragging the exe, it keeps the name of the exe\n- If pined by right click > Pin when the program was running, it keeps the name at this time.\nIt may also depends on the OS. Windows 10 has changed things. there is an open issue regarding pining on windows 10 https://github.com/atom/electron/issues/1954\n. ",
    "alexwarren": "We can now change the version info in resources successfully, but this does not affect the name that appears when you right-click the app in the task bar. It still shows up as \"Electron\" there even if you change all the resource names.\n. Looks like FileVersion is being ignored? It's not updating for me, and I can see in the screenshot for this PR that it's not updated there either.\n. @malept Not sure I understand the question, what does Unity have to do with electron-packager? It's not something I'm using.\n. Oh I see Unity is the name of a graphical shell. Well... I dunno, I'm just using whatever Ubuntu's default is.\n. This is the icon that appears in the app launcher on the left when the app is running:\n\n. Ah, fantastic, didn't realise that needed to be set there (as it works without it on Windows and OS X). Thanks!\n. ",
    "s-a": "This is true. Any ideas regarding @alexwarren 's problem? Maybe this one should be a new issue?\n. @felicienfrancois this is not what we mean. BrowserWindow setup is the same as when I set document.title. We talk about the Windows task bar menu item caption. \n\n. Same Problem here...\n. @malept same as Stephn r. I am on Windows too. I See you are on there. Just wrote a message to paticipate this issue and receive updates about this topic.\n. \"build:macos\": \"npm run clean:macos && electron-packager ./app \\\"fileSharp\\\" --out=dist/macos --platform=darwin --arch=x64 --version=0.25.3 --icon=assets/macos/icon.icns\"\nOutputs nothing and fails silent.  \n\"build:macos\": \"npm run clean:macos && electron-packager ./app \\\"fileSharp\\\" --out=dist/macos --platform=darwin --arch=ia32 --version=0.25.3 --icon=assets/macos/icon.icns\",\nreturns  \n```\n\nnpm run clean:macos && electron-packager ./app \"fileSharp\" --out=dist/macos --platform=darwin --arch=ia32 --version=0.25.3 --icon=assets/macos/icon.icns\nfileSharp@0.1.0 clean:macos C:\\git\\fileSharp\nrm -rf ./dist/macos\n\nDownloading electron-v0.25.3-darwin-ia32.zip\nError: GET https://github.com/atom/electron/releases/download/v0.25.3/electron-v0.25.3-darwin-ia32.zip returned 404\n[ [Error: GET https://github.com/atom/electron/releases/download/v0.25.3/electron-v0.25.3-darwin-ia32.zip returned 404] ] undefined\n```\nlet me know if I can test something out\n. @Stephn-R Thanks for this info . osx is not my world :smile: \n. Please check #95 and tell me what you think :eyes: \n. Regarding to this and #72 :\nI wrote a code that can handle package management from within compiled app. Unfortunately this requires a node.js installation on the target machine. Regarding to native extensions the target machine will need a compiler system unless there is no way available to distribute pre-compiled binaries.\n- npmc.js\n- npm-test.js\nMaybe this is interesting for any one out there. :dog: \nAny chance to distribute NPM runtime libs with electron compiled package?\n. It works running cmd.exe as admin. Strange. I am always logged in as administrator! Anyway ty for help!\n. Just in case any one else having trouble to copy symlinks on windows for :apple:  distribution \nxcopy /b /Y /E . c:\\dist-osx\\\n. @kfranqueiro you are right. Far away from easy to distribute. Cannot zip and cannot add symlinks to git repo :/\n. Sorry! This happens after grunt contrib copy job.\n. ",
    "coclav": "I am using electron-boilerplate but I trust the logic would be the same here. I sign my app twice. First the \"app.exe\" and then the \"app_installer.exe\" \n```\nvar sign = childProcess.spawn(resourcesDir.path(\"signtool\"),\n    [\n        'sign',\n        '/f',\n        resourcesDir.path(\"MyCertificate.p12\"),\n        '/p',\n        'APassword',\n        '/t',\n        'http://timestamp.verisign.com/scripts/timstamp.dll',\n        readyAppDir.path(manifest.productName + '.exe')\n    ],\n    {\n            stdio: 'inherit'\n    });\nsign.on('error', function (err) {\n      if (err) {\n          throw \"sign error \" + err;\n      } else {\n          throw err;\n      }\n  });\n  sign.on('close', function () {\n      gulpUtil.log('Sign done!');\n      deferred.resolve();\n  });\n```\nAnd then this is the \"packaged\" into the installer, that I will sign the same way.\n. I have been struggling all day long with this issue without success. Once I had fixed the MSVCP100.dll issue, the next one was The application was unable to start correctly (0xc000007b)\n\nand I gave up at this stage :(\nI went for Resource Hacker which seemed to work so fare\nhere is my script. Do that before signing and putting it in installer \n[FILENAMES]\n     Exe=    \"c:\\path\\to\\exe\\before\\yourElectronApp.exe\"\n     SaveAs= \"c:\\bla\\bla\\YourElectronAPpWithCoolIcons.exe\"\n[COMMANDS]\n     -addoverwrite \"path\\to\\icon.ico\", ICONGROUP,1,\n. ",
    "eveningkid": "+1, such a tool would be appreciated. \n. I'll look forward, then. Thank you stefan!\n. ",
    "nickdesaulniers": "One of the ways I did this manually was from here.  These installers are much more user friendly.  Would love to be able to generate a .dmg or .msi file.\n. In OSX, diskutil can be run from the command line, so we could write a wrapper that shells out the commands.  Unfortunately, this approach wont be portable to Win/Linux.\n. > if wished.\nI can haz?\n. electron-installer\nelectron-installer-generator\nelectron-distributor\nelectron-bundler\nelectron-builder\nelectron-emitter\nelectron-beam-cannon\n. ",
    "stefanjudis": "We wrote automated installer generators for windows and macos last week.\nCan probably provide a PR at the weekend, if wished. :bowtie: \n. @maxogden \nFair enough. Currently it's in a private company repo. But we sure'ly can transfer it.\nAny name suggestions for the project then? I see electron-packager is already taken. :)\n. Here we go. Will ping you guys on the weekend. :)\n~~https://github.com/stefanjudis/electron-builder~~\nMade in company working hours so it will be placed here. :) \n-> https://github.com/loopline-systems/electron-builder\n. Will tackle it tomorrow. :)\nArnaud notifications@github.com schrieb am So., 24. Mai 2015 01:50:\n\nI'll look forward, then. Thank you stefan!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/maxogden/electron-packager/issues/33#issuecomment-104955654\n.\n. Ouch. :(\n\n@develar Why not contributing to electron-builder? \n. > that I need squirrel-windows installer \nThis will be implemented soon when this https://github.com/electronjs/windows-installer is officially released and we already have a filed issue for that.\nLinux installers are also included now.\nThe only thing that makes me sad, is the creation of a concurrent project which has several contributors and already gained some traction. \nContributing to an existent project doesn't increase noise for users ( like the confusion for windows installers - where I had to scan 5 projects that do the same ), reduces number of concurrent projects and helps existent projects.\nAs we'll implement the official squirrel thingy we'll end up with two similar projects. :(\nNever the less. Good luck with that one.\n. @develar \nThanks for clarification and I'd love to collaborate. :) Let's move the discussion over to our projects to not create more noise here. :)\n. The correct way for this would be to use npm shrinkwrap, or?\n. > shrinkwrap fixes to latest possible minor versions (which is the problem here as they are currently broken)\nNope, it fixes the installed versions recursively down the whole dependency tree. Means a shrinkwrap file of a working version sets the versions of the whole tree.\nSetting only direct dependencies to a specific version does not help, when the dependencies of the dependencies go with ^ or ~ ( which probably most of them do ).\n. > bundling the updating entire shrinkwrap file inside this repo would be a big burden for the developer..\nFor safety - I'd say this is better than going with a half-defence. :)\n@maxogden for sure has a strong opinion on that. \nAnd sorry for jumping in - this topic is really interesting for me. ;)\n. > electron-builder's Appveyor tests run under the electron-userland org. Can I get access? (To the Appveyor org, not electron-builder.)\n@malept Uhm, are you sure I can invite you in AppVeyor without giving you access here?\nI think it fetches according to Github permissions.\nBut you can have also access rights here. :)\n. >  didn't find a way to configure for org (it seems it is AppVeour bug, right?)\nThat's right... And unter permissions in AppVeyour I can't do much... \n\nGiving you access in a few min. @malept \n. Whooot?! But all good now?\n. @develar @malept I just did it ( hopefully fine for malept ). :) But don't tell anyone that I'm reading mails in my holidays. ;)\n. Fair point @malept. Apology from my side. \n. ",
    "sbruchmann": "@stefanjudis Definitely. ;)\n. Although electron-gh-releases is quite unpopular compared to electron-prebuilt and electron-packager, it is a related module. Would it make sense to ignore that too?\n. @jenslind Ah, yes. I\u2019ve missed that one.\n. There\u2019s also productName, which is a bit more suitable for this task.\n. @MathijsvVelde Work on your attitude towards people who are trying to help you before working on code. It will come in handy in future conversations.\n. AFAIK the version parameter is optional as long as you\u2019ve added electron-prebuilt to your devDependencies, because it will use its version.\nChecking the README confirms my thoughts:\n\n\ndownload all supported target platforms and arches of Electron using the installed electron-prebuilt version (and cache the downloads in ~/.electron)\n\n\nMaybe this behaviour should be better documented.\n. ",
    "LinusU": "Hi,\nI have built appdmg in Node.js which produces lovely looking dmg-images. We are currently tracking cross-platform here: https://github.com/LinusU/node-appdmg/issues/14#issuecomment-29070031\nI think it certainly possible to get it working but there will be a lot of man hours behind it. We do create the .DS_Store files from scratch instead of using Apple Script which most other solutions do. The only large thing that is left is replacing hdiutil, for that we need something that writes an HFS+ file system which might be a bit complicated, although there are open source solutions in the wold.\nappdmg is used as such from Node:\n``` javascript\nvar appdmg = require('appdmg');\nvar ee = appdmg({ source: 'test/appdmg.json', target: 'test.dmg' });\nee.on('progress', function (info) {\n// info.current is the current step\n  // info.total is the total number of steps\n  // info.type is on of 'step-begin', 'step-end'\n// 'step-begin'\n  // info.title is the title of the current step\n// 'step-end'\n  // info.status is one of 'ok', 'skip', 'fail'\n});\nee.on('finish', function () {\n  // There now is a test.dmg file\n});\nee.on('error', function (err) {\n  // An error occurred\n});\n```\nInstead of passing source: 'file-path' you can also pass basename: 'dirname', specification: { ... } so it should be good to go :+1: \n. ",
    "havenchyk": "Guys, could anyone clarify, what's the recommended way right now?\nAFAIK, for windows it's better to use grunt-electron-installer (official?)\nfor mac is it ok to use appdmg?\nAnother question:\nShould we use same OS as a target? I mean windows to make windows installer, mac - for mac.\n@maxogden could you please share your thoughts?\n@stefanjudis do you use in electron-builder the same way to make windows build as grunt-electron-installer?\n. @malept but is there any recommended way?  sorry if it's offtop\n. @malept sure, thanks for your answers here. If electron-builder is in the readme, it's enough for me\n. @malept why not electron-builder? is there any explanation?. @malept well, while init and import options are pretty interesting, I still can't see the reason why you have created new product from the scratch. electron-builder is pretty mature and yes, @develar is the only maintainer, but he made this product as awesome as possible.\nIf TypeScript was a problem, project could be rewritten to ES2015+ in a couple days, btw @develar already solved a lot of problems in electron-builder and provided pretty interested solutions.\nSorry for this, I know that my comment doesn't relate to electron-packager and issue, but to me this situation looks terrible. Facebook hunted a lot of developers from other concurented products to allow them to do awesome thing inside Facebook, but electron community just killing electron-builder. To my mind you and other developers from community ignored the problem with building application for a quite long time (It was painful experience before electron-builder, really), now you decided to kill electron-builder or provide \"choice\" (here should go image about 14 standards), it's unacceptable, IMO.. @MarshallOfSound don't get me wrong.\nI really appreciate all your and community work on forge and even thank you for so well explained answer.\nThere is no any concern about creating new package with \"electron way\", it's completely fine for OSS.\nMy main concern was that you came up with new solution (forge) and marked it as a \"recommended\" way. Because with that you can kill another good product.\nAnyway I see your and @malept points, so good luck with it and again thanks for your work.\nI think this dicussion can be closed \ud83d\ude04 \n. Hey, it there any updates here?\n. @malept when can we expect 6.0? Do you need any help?\n. ",
    "develar": "electron-complete-buidler can produce installers (auto-update ready, including Linux deb package), sign it on CI server and publish to GitHub releases.\n. @stefanjudis Originally, electron-builder was used under the hood.\nBut then I realized, that I need squirrel-windows installer to build auto-update ready windows app. So, now I use windows-installer to produce windows artefact. It is the main reason why electron-builder is not used.\nSo, electron-builder was used only to produce DMG. But... why I should use electron-builder if appdmg does the same? So, in the end, electron-builder was removed.\n. @stefanjudis To be clear \u2014 electron-complete-builder is not yet another tool to produce installers, but tool to combine all existing tools to \"just publish my electron app\".\n\nAs we'll implement the official squirrel thingy\n\nIn this case I will just switch back to use electron-builder again as before.\nDo you want to integrate https://github.com/develar/electron-complete-builder#code-signing, https://github.com/develar/electron-complete-builder#build-version-management and https://github.com/develar/electron-complete-builder/wiki/Publishing-artifacts into electron-builder?\nI ready to create pull requests and do so (e.g. #251, #255). But I think we should follow Unix Philosophy \u2014 Do one thing and do it well.\nDo you agree with me or I am wrong? Sorry, but I don't want to have gigantic package.json as you suggest \u2014 https://www.npmjs.com/package/electron-builder#how-we-use-it-so-far See my app \u2014 https://github.com/develar/onshape-desktop-shell/blob/master/package.json Only one line \"release\": \"npm run compile && build\" and app published to GitHub releases.\n. @havenchyk electron-builder provides a lot of features that are not covered by forge or any other module. And unlikely will be covered. And targets. And can be used to just pack into distributable format already packed app.  Forge is just another user module, not official electron tool. \nStar trend and download counts show what user wants to use. In any case such situation is good for user \u2014 competition.\nIn any case electron-builder is going to be splitted  into several packages (it is not required for users, because electron-builder is a lightweight and no need to reduce external npm deps (only archiver that is used only for squirrel.windows)).. Obsolete since #155 ?\n. Please see https://github.com/EvolveLabs/electron-updater#note So, I think, this issue can be closed. Also, see https://github.com/electron/electron/blob/master/docs/api/auto-updater.md\n. Hi @pyro2927 Do you have time to add tests or I can do it (since it is required for #251)?\n. Building OS X app on windows has very limited scope. Because you cannot sign it (and unsigned app is forbidden by default) and cannot build DMG.\nAnyway \u2014 I think this issue is out of electron-packager scope. Do not archive resulting directory using regular non-aware system tool \u2014 even on OS X it requires knowledge about --symlinks. If you need to get zipped artifact \u2014 use electron-builder. Currently, electron-builder creates zip for squirrel.mac (using 7za \u2014 compression is better, but it is still standard zip) and it supported only on OS X (because dmg is supported only on OS X), but if this issue is still actual for you \u2014 file issue to electron-builder (in any case in the future it will be added (zip, sfx, 7z, xz targets)).\n. If you really need to pack mac not on mac machine and you don't care of code signing \u2014 and if you don't want to use Linux machine or VM, you can use Docker for Windows (only Docker for Windows, Docker Toolbox doesn't work) and electron-builder docker image to build (set mac.target to zip or tar.gz or dir or to any other of supported targets (except pkg and dmg).  Please see https://github.com/electron-userland/electron-builder/wiki/Docker\n. @craxal Issue marked as help-wanted :) You can try to use electron-builder electronDist .\n. > I looked into it, but the macOS only caveat is a serious deterrent.\nWindows and Linux are supported now (contributed) in the electron-builder and this functionally is used by users. You can use electron-builder 19.2.7 (recently some bug in this area was fixed).. @towertop electron-builder calls rebuild. But cross-compilation is not supported. And it is not electron-packager/electron-builder task \u2014 instead, authors of such modules should use https://www.npmjs.com/package/node-pre-gyp and simplify developers life. Maybe someday electron-builder will support it (precompile, upload to bintray, and use it in the all next builds).\n. @choffmeister Just use https://www.npmjs.com/package/prebuild for your native module or send corresponding PR to use it in the used native module. It is not electron-packager/electron-builder issue.. @RilRil Are you going to use electron-packager directly or electron-builder, is your project answer to https://github.com/electron-userland/electron-builder/issues/598#issuecomment-233408351 ?\nIf you still use electron-builder, \"and it just doesn't wok\" \u2014 on Surface or on your machine?\n. It seems your ICNS is invalid or your icns app maker is not good. My source icon is 1024 and it works on retina and non-retina iMac. Consider using http://www.img2icnsapp.com app.\nCould you please send me or attach here your ICNS files? So I can check it and add validation? (I am electron-builder maintainer and I think that it will be cool if electron-packager will check such errors and report).\n. > Out of curiosity, why not check the exit code?\nWell, reasonable question. Because it was easy to check that no error output (https://gist.github.com/develar/c274d4f5898e8119bb68)\nIf you are not going to fix it, well, I leave my current workaround and will check exit code also.\n@maxogden IDE (JetBrains products at least) show error output in a different color (red by default) and, so, using \"error\" instead of \"info\" is a source of misunderstandings.\n. @danielehrhardt You can use portable target in the electron-builder.. @musocrat Not quite understand \u2014 what was changed to fix? If name should be somehow normalised \u2014 it should be done by tool :)\n. @AlicanC Thanks, it will be investigated and fixed in the electron-builder as part of https://github.com/electron-userland/electron-builder/issues/288\n. The issue is  \u2014 rimraf(tempBase, cb) is called after each packager() call. So, if you run linux/mac/win tests in parallel (or electron-complete-builder will call it in parallel), base temp dir will be deleted after each test. So, other tests will be failed (because build directory was deleted).\nYes, as a workaround, I can specify tmpdir for each packager() call. But it will be a dirty hack and in this case I should fix it on electron-packager side. But since temp dir on electron-packager side is not required fro me, I want just disable this behaviour.\nOriginally, I was not aware of tmpdir option (it is a new option and I have discovered it only after fix was implemented (I forgot to update my fork)).\nexisting tests need to be fixed\nFixed.\nI will add test and doc.\n. > In addition to @malept's thought about specifying a unique tmpdir for each run\nFrom my point of view, it smells bad. Because instead of fixing issue in the lib (electron-packager) I fix issue on my side. i. e. \"I don't want to improve underlying library\".\n\nI'm curious what your package does that requires performing multiple runs in parallel.\n\nCurrently, only tests does so. Because:\n- Multiple architectures cannot be build in parallel due to native dependencies (electron-complete-builder supports native deps compilation \u2014 there is only one node_modules directory, so, to build in parallel you have to copy project directory to temp directory \u2014 but it adds unnecessary complexity (caching and so on)).\n- On CI you likely build artifacts only for one platform (again, due to native deps \u2014 appveyor to build windows artifacts and travis to build OS X artifacts).\nSo, yes, the question is why I still ask you ability to disable temp dir usage? It is described in the \"Why\" section in my first comment. Currently, temp dir is not required for me at all and just adds complexity.\n\nIf the 'false' to false coersion is intended for CLI use, it might make more sense in cli.js\n\nThanks, fixed (will be pushed in a few minutes after test).\n\ncan you explain the if (opts.tmpdir === false && file === opts.out) check added to the filter function?\n\nBecause \nncp(opts.dir, appPath, {filter: userIgnoreFilter(opts), dereference: true}, cb)\nmeans: copy opts.dir (~/myProject) to appPath (i.e. out dir \u2014 ~/myProject/dist/${appRelativePath}). \nSo, we must exclude outDir because destination folder inside source folder if we don't use temp directory (it leads to cryptic errors \"filename too long\" if we don't exclude it). \n. @malept My change is under check \"opts.tmpdir === false \" to avoid regression. Ok, I will finish #155 (add test).\n. Since #255 is merged (thanks), I continue work on this PR. But Github doesn't add my new commit Should I open new pull request or you can somehow fix it?\n. Sorry for noise, I created pull request too early (realized, that my test is not correct). I will add comment when it will be ready. Yeah, writing tests is not easy.\n. Strange. Tests passed locally, but not on Travis. And in your build (https://travis-ci.org/maxogden/electron-packager/jobs/107157456) I see the same error. I will start build again in a few hours.\n. > so that the original author is still attributed to their changes\nFixed, I set author to pyro2927 <joseph@pintozzi.com>.\n. I don't see what's wrong in my code. And Travis build passed. (I see that another unrelated build also blinking).\nMaybe, it will be better to test such functionality only for current platform (not for all platforms) to speedup tests, but I used standard util.testAllPlatforms.\n. > Could you add one more test for the new ignore functionality when you don't specify an out\nIt is required to fix #64 I don't like it, but as a tool we cannot teach users, ok. Current solution is not complete, thanks for pointing.\n. Tests failed due to critical error in all tests \u2014 \n1) you pass combination to test and then call Object.create.\n2) Created opts has combination as a prototype.\n3) createInferTest calls delete combination.version directly on original combination instance and... yes, version deleted from prototype and all tests now could be broken.\nAs part of this pull request I will fix it (we must pass copied combination object to test to avoid manual Object.create and to avoid such problems in the future).\n. > I would move supportedArchs and supportedPlatforms in index.js to common.js\nSorry, tried to minimise, but it is stupid, yes. Fixed.\n. Should I fix something or you just haven't yet time to review it?\n. @malept I missed your quick reply, sorry. I have rebased.\n. @malept What about https://github.com/electronjs (I don't know anything, just ask) as an organization?\n. I suppose #251 was closed automatically because was rebased to the same commits as #255 by GitHub, not by you.\nYes, please review.\n. Related: https://github.com/electron-userland/electron-builder/pull/204\nI don't see anything wrong in the current electron-packager behaviour. \nelectron-packager packs your app and produce one artefact. App file. If you specify product name, you expect that it will used in all places. As @tmm1 said and I am agree. \nelectron-builder produces nupkg, deb/rpm/etc and other deployment artefacts (in a distributable format). Publish to GitHub releases. In this case we must use only name and it is expected. Also, for example, electron-builder uses name in the icon path on Linux instead of product name to avoid unsafe chars (because icon layout is under the hood and is not visible to end user).  \nSo, I don't think we should change current behaviour. Option to change exe name may be added (but I don't like it \u2014 yet another option + \"Nearly all Mac apps are not meant to be started up from the command line\" + it is ok to use Google Chrome/App Store/LEGO Digital Designer on OS X).\n. > As actual example, \"Microsoft Office Word\" is specified as product name to WINWORD.EXE\nAnd what? Do you start MS Office using terminal (cmd)? Or using Spotlight (I mean poor windows alternative Cortana/Start)? How does it affect end user? In any case you should create desktop shortcuts on Windows and do not distribute electron-packager result (instead, you should create Squirrel.windows app file using electron-builder or tool like that). \n. Why do you use scoped name \u2014 do you need to publish package to npm?\n. @mafrost But electron app is not published to npm or internal registry, right? So, why do you use scoped name?\n. @malept I believe that in this particular case we should just remove prefix @mycompany/ (npm package scope name). But it is not clear for me why scoped name is required here.\n. > but I fail to see how it's relevant\n@mafrost It is an open source. Should be a good motivation, reasons to do something :) Sometimes it is better to help user and suggest a good solution instead of dirty workaround.\n\nhave a internal registry through Artefactory \n\nGood to know, thanks.\n@malept I will send PR to remove scope from name and escape name using sanitise-filename  tomorrow.\n. @malept Your activity was signal to me to hurry up :)\n. There is a comment https://github.com/AvianFlu/ncp/issues/98#issuecomment-173273082 so, I think, it is definitely fixed in the fs-extra. I don't see any particular file sets in the #150 and #213 so, I am not sure how I can test it. May be we can trust @jprichardson and existing fs-extra tests?\n. > it might be better to squash your commits\nOk, I will not amend commits anymore.\n. Sorry, fixed.\n. > which IMO is a lot more dependable performance wise than fs-extra/ncp.\nIt is a bit illogical for me. How does tar work \u2014 read file and append content to resulting (total) file. And then we will read total file and split it to destination files.\nSo, why it will be faster? copy operation just transfer bytes from one file to another.\nOr do you mean that copy is not reliable? Well... if nobody can write reliable copy implementation on node platform... But I don't think so \u2014 I have tried 3 different implementations and only fs-extra copy works for me (electron-builder tests \u2014 copying test fixtures). And recently windows-installer got rid of jetpack and switched to fs-extra.\nSo, #151 was mentioned not by mistake.\n. Apart of this, I am going to get rid of copy phase (copy app files) at all :) Because if prune is not specified, we can build asar archive directly, without intermediate copy (asar is default in the electron-builder, so, it is important for me).\n. Just use two package.json structure and forget about ignoring.\n. > electron-builder's Appveyor tests run under the electron-userland org. Can I get access? (To the Appveyor org, not electron-builder.)\ncc @stefanjudis \n. @malept @stefanjudis As far I see, electron-builder AppVeour URL is https://ci.appveyor.com/project/stefanjudis/electron-builder/build/1.0.85 \u2014 because @stefanjudis didn't find a way to configure for org (it seems it is AppVeour bug, right?).  So, @malept  can just use AppVeour for his username.  But it is very strange and will be nice to configure AppVeour properly for both projects :)\n. @malept Sorry for offtopc, @stefanjudis on holiday, I don't want to disturb him. Could you please approve circleci/codeship apps access to electron-userland org? Otherwise I cannot add project electron-builder to circleci/codeship (I am member of electron-userland org, but not admin, only admin can approve access https://help.github.com/articles/about-third-party-application-restrictions/).\n. > why are you adding additional CI services to electron-builder? Are you replacing Travis CI?\nTravis CI was down for one day (13 may). Now often builds hangs (OS X, well, no Travis alternative yet) or DNS issues.\nAlso, it is very tricky to set up apt-cache on Travis \u2014 before wine: 2-4 minutes. after wine: 10-30 minutes.\nSo, I want to experiment with Docker containers. And add new CI providers to be sure that if tests failed, it is definitely our issue. \nIf I understand correctly, this permission in any case is not enough to add service to any electron-userland repo (if you are not org admin or repo admin/contributor, of course).\n. \"experiment\" means \u2014 will be it faster than Travis or not. In any case it will be used as an additional independend CI provider to check that tests failed not because of Travis agent issues (since you cannot really trust your local machine).\n. @malept Cannot find any info. But since this issue is critical, I fixed it (#341). Also, Squirrel.Windows bug fixed as well (https://github.com/electron-userland/electron-builder/issues/339).\n. Because 0 in the version means that 0.27 and 0.28 versions are not meet current range. Since electron-builder uses 0.28, user gets two copy of fs-extra.\nYou can check it using http://semver.npmjs.com\n. > So the only reason is to have it be the same version as electron-builder?\nYes, no strong reasons. Just keep deps up to date to avoid issues like https://github.com/electron/node-mksnapshot/pull/7 \n. > can't electron-builder deal with that?\nYes, it can be fixed on electron-builder side. But I think it will be useful in the electron-packager. \nOn the other hand \u2014 yes, we should avoid unnecessary escaping. I will revert. \n. The fix is not really correct \u2014 app LEGO Digital Designer works for me. Executable is LEGO Digital Designer. Hmm... I will investigate.\n. OS X \u2014 it is OS bug.\nWindows \u2014 fixed in Squirrel.Windows.\nAbout strict \u2014 I will prepare PR to use ES6 in my other PRs.\n. @malept In the recent V8 VM (part of nodejs 6?), yes, strict mode is not required to use let/const. But we should support nodejs 4/5.\n. @malept http://v8project.blogspot.de/2016/01/v8-release-49.html \"Release 4.9 also makes block level constructs such as class and let available outside of strict mode\"\n. @malept Not quite understand what do you mean.\nI see \"is block-scoped (strict mode)\" i.e. strict mode is required.\nfunction test() {\n  let foo = 22;\n}\n```\n/Users/develar/Documents/electron-packager/foo.js:2\n  let foo = 22;\n  ^^^\nSyntaxError: Block-scoped declarations (let, const, function, class) not yet supported outside strict mode\n    at exports.runInThisContext (vm.js:53:16)\n    at Module._compile (module.js:387:25)\n    at Object.Module._extensions..js (module.js:422:10)\n    at Module.load (module.js:357:32)\n    at Function.Module._load (module.js:314:12)\n    at Function.Module.runMain (module.js:447:10)\n    at startup (node.js:148:18)\n    at node.js:405:3\n. `strict-standard` is too strict. It is not easy (and no sense, I think) to use it. Since we already have file `.eslintrc`, I just add required rules to it.\n.\nstrict-standard: Strict Standard (https://github.com/denis-sokolov/strict-standard) \n  /Users/develar/Documents/electron-packager/cli.js:14:3: Unexpected console statement.\n  /Users/develar/Documents/electron-packager/cli.js:15:3: Don't use process.exit(); throw an error instead.\n  /Users/develar/Documents/electron-packager/cli.js:20:22: Unexpected console statement.\n  /Users/develar/Documents/electron-packager/cli.js:21:10: Unexpected console statement.\n  /Users/develar/Documents/electron-packager/cli.js:22:5: Don't use process.exit(); throw an error instead.\n  /Users/develar/Documents/electron-packager/cli.js:25:28: Unexpected console statement.\n  /Users/develar/Documents/electron-packager/cli.js:26:35: Unexpected console statement.\n  /Users/develar/Documents/electron-packager/common.js:1:1: Use the global form of 'use strict'.\n  /Users/develar/Documents/electron-packager/common.js:12:1: Expected a function expression.\n  /Users/develar/Documents/electron-packager/common.js:54:1: Expected a function expression.\n  /Users/develar/Documents/electron-packager/common.js:59:30: 'err' is already declared in the upper scope.\n  /Users/develar/Documents/electron-packager/common.js:66:1: Expected a function expression.\n  /Users/develar/Documents/electron-packager/common.js:70:1: Expected a function expression.\n  /Users/develar/Documents/electron-packager/common.js:74:1: Expected a function expression.\n  /Users/develar/Documents/electron-packager/common.js:76:5: Unexpected console statement.\n  /Users/develar/Documents/electron-packager/common.js:81:1: Expected a function expression.\n  /Users/develar/Documents/electron-packager/common.js:143:7: Unexpected console statement.\n  /Users/develar/Documents/electron-packager/common.js:147:7: Unexpected console statement.\n  /Users/develar/Documents/electron-packager/index.js:22:17: Unexpected comment inline with code.\n  /Users/develar/Documents/electron-packager/index.js:26:1: Expected a function expression.\n  /Users/develar/Documents/electron-packager/index.js:43:1: Expected a function expression.\n  /Users/develar/Documents/electron-packager/index.js:58:20: 'err' is already declared in the upper scope.\n  /Users/develar/Documents/electron-packager/index.js:69:1: Expected a function expression.\n  /Users/develar/Documents/electron-packager/index.js:72:3: Expected a function expression.\n  /Users/develar/Documents/electron-packager/index.js:77:17: 'cb' is already declared in the upper scope.\n  /Users/develar/Documents/electron-packager/index.js:80:17: 'cb' is already declared in the upper scope.\n  /Users/develar/Documents/electron-packager/index.js:86:20: Unexpected comment inline with code.\n  /Users/develar/Documents/electron-packager/index.js:116:9: Expected a function expression.\n  /Users/develar/Documents/electron-packager/index.js:124:11: Unexpected console statement.\n  /Users/develar/Documents/electron-packager/index.js:147:9: Expected a function expression.\n  /Users/develar/Documents/electron-packager/index.js:156:17: Unexpected console statement.\n  /Users/develar/Documents/electron-packager/index.js:169:13: Unexpected console statement.\n  /Users/develar/Documents/electron-packager/index.js:200:60: 'err' is already declared in the upper scope.\n  /Users/develar/Documents/electron-packager/linux.js:11:90: 'err' is already declared in the upper scope.\n  /Users/develar/Documents/electron-packager/mac.js:10:1: Expected a function expression.\n  /Users/develar/Documents/electron-packager/mac.js:14:1: Expected a function expression.\n  /Users/develar/Documents/electron-packager/mac.js:29:1: Expected a function expression.\n  /Users/develar/Documents/electron-packager/mac.js:35:1: Expected a function expression.\n  /Users/develar/Documents/electron-packager/mac.js:46:5: Unexpected console statement.\n  /Users/develar/Documents/electron-packager/mac.js:183:88: Unexpected use of undefined.\n  /Users/develar/Documents/electron-packager/mac.js:184:9: Unexpected console statement.\n  /Users/develar/Documents/electron-packager/mac.js:189:89: 'err' is already declared in the upper scope.\n  /Users/develar/Documents/electron-packager/mac.js:192:15: Unexpected console statement.\n  /Users/develar/Documents/electron-packager/mac.js:199:36: 'err' is already declared in the upper scope.\n  /Users/develar/Documents/electron-packager/test/basic.js:1:1: Use the global form of 'use strict'.\n  /Users/develar/Documents/electron-packager/test/basic.js:11:1: Expected a function expression.\n  /Users/develar/Documents/electron-packager/test/basic.js:22:1: Expected a function expression.\n  /Users/develar/Documents/electron-packager/test/basic.js:84:1: Expected a function expression.\n  /Users/develar/Documents/electron-packager/test/basic.js:110:1: Expected a function expression.\n  /Users/develar/Documents/electron-packager/test/basic.js:141:1: Expected a function expression.\n  /Users/develar/Documents/electron-packager/test/basic.js:185:1: Expected a function expression.\n  /Users/develar/Documents/electron-packager/test/basic.js:222:1: Expected a function expression.\n  /Users/develar/Documents/electron-packager/test/basic.js:251:1: Expected a function expression.\n  /Users/develar/Documents/electron-packager/test/basic.js:253:40: Unexpected comment inline with code.\n  /Users/develar/Documents/electron-packager/test/basic.js:294:1: Expected a function expression.\n  /Users/develar/Documents/electron-packager/test/basic.js:336:1: Expected a function expression.\n  /Users/develar/Documents/electron-packager/test/basic.js:361:1: Expected a function expression.\n  /Users/develar/Documents/electron-packager/test/basic.js:386:1: Expected a function expression.\n  /Users/develar/Documents/electron-packager/test/basic.js:430:1: Expected a function expression.\n  /Users/develar/Documents/electron-packager/test/basic.js:485:115: Unexpected use of undefined.\n  /Users/develar/Documents/electron-packager/test/basic.js:499:83: Unexpected use of undefined.\n  /Users/develar/Documents/electron-packager/test/basic.js:514:83: Unexpected use of undefined.\n  /Users/develar/Documents/electron-packager/test/basic.js:514:105: Unexpected use of undefined.\n  /Users/develar/Documents/electron-packager/test/basic.js:573:13: Unexpected use of undefined.\n  /Users/develar/Documents/electron-packager/test/basic.js:590:13: Unexpected use of undefined.\n  /Users/develar/Documents/electron-packager/test/basic.js:607:13: Unexpected use of undefined.\n  /Users/develar/Documents/electron-packager/test/darwin.js:1:1: Use the global form of 'use strict'.\n  /Users/develar/Documents/electron-packager/test/fixtures/el-0374/main.js:7:1: Parsing error: Unexpected token app\n  /Users/develar/Documents/electron-packager/test/index.js:13:5: Unexpected console statement.\n  /Users/develar/Documents/electron-packager/test/index.js:16:5: Unexpected console statement.\n  /Users/develar/Documents/electron-packager/test/index.js:19:5: Unexpected console statement.\n  /Users/develar/Documents/electron-packager/test/index.js:22:5: Unexpected console statement.\n  /Users/develar/Documents/electron-packager/test/index.js:26:3: Unexpected console statement.\n  /Users/develar/Documents/electron-packager/test/mac.js:14:1: Expected a function expression.\n  /Users/develar/Documents/electron-packager/test/mac.js:50:1: Expected a function expression.\n  /Users/develar/Documents/electron-packager/test/mac.js:81:1: Expected a function expression.\n  /Users/develar/Documents/electron-packager/test/mac.js:117:1: Expected a function expression.\n  /Users/develar/Documents/electron-packager/test/mac.js:157:1: Expected a function expression.\n  /Users/develar/Documents/electron-packager/test/mac.js:192:1: Expected a function expression.\n  /Users/develar/Documents/electron-packager/test/mac.js:220:1: Expected a function expression.\n  /Users/develar/Documents/electron-packager/test/mac.js:258:1: Expected a function expression.\n  /Users/develar/Documents/electron-packager/test/mac.js:286:1: Expected a function expression.\n  /Users/develar/Documents/electron-packager/test/mac.js:361:1: Expected a function expression.\n  /Users/develar/Documents/electron-packager/test/mac.js:395:5: Expected a function expression.\n  /Users/develar/Documents/electron-packager/test/mac.js:529:21: Unexpected console statement.\n  /Users/develar/Documents/electron-packager/test/multitarget.js:13:1: Expected a function expression.\n  /Users/develar/Documents/electron-packager/test/multitarget.js:29:38: Unexpected comment inline with code.\n  /Users/develar/Documents/electron-packager/test/multitarget.js:70:38: Unexpected comment inline with code.\n  /Users/develar/Documents/electron-packager/test/multitarget.js:98:38: Unexpected comment inline with code.\n  /Users/develar/Documents/electron-packager/test/multitarget.js:124:1: Expected a function expression.\n  /Users/develar/Documents/electron-packager/test/util.js:88:76: Unexpected comment inline with code.\n  /Users/develar/Documents/electron-packager/test/win32.js:20:1: Expected a function expression.\n  /Users/develar/Documents/electron-packager/test/win32.js:55:1: Expected a function expression.\n  /Users/develar/Documents/electron-packager/test/win32.js:63:1: Expected a function expression.\n  /Users/develar/Documents/electron-packager/test/win32.js:71:1: Expected a function expression.\n  /Users/develar/Documents/electron-packager/test/win32.js:79:1: Expected a function expression.\n```\nFor me, most of these errors are ridiculous. \n. > This one is reasonable. We should avoid shadowed variables.\nThis warning about function parameters. Not about local variables. Currently, we have callback hell. In my fork I use Promises. But anyway it is incorrect \u2014 it is ok and legal to shadow top-level function parameter. Real solution \u2014 use Promise/await cannot be done in \"fix style\" commit.  Easy fix \u2014 just rename param \u2014 not acceptable, I think. Modern languages, like Kotlin, allows me to shadow top-level member.\nBTW, I want to use strict exactly because I want to use let instead of var.\n. > Expected a function expression.\nIt is the most annoying warning \u2014 you have to write \"var foo = function() {\". It is ridiculous. http://eslint.org/docs/rules/func-style#expression\n. > The rest we should disable.\nThe problem that we cannot customize rules. As @feross  suggested, in my upcoming PR I use eslint-config-standard.\n. @malept Friendly ping :)\n. In my fork I use promises \u2014 see mac.js for example https://github.com/develar/electron-packager/blob/master/mac.js We don't use sync methods anymore, and code a little bit simplified. It is why I prepare this PR because otherwise I cannot create PR about promises ;)\n. In my fork I use promises \u2014 see mac.js for example https://github.com/develar/electron-packager/blob/master/mac.js We don't use sync methods anymore, and code a little bit simplified. It is why I prepare this PR because otherwise I cannot create PR about promises ;)\n. I don't like it. If you specify all \u2014 you expect all. If something goes wrong \u2014 build should be failed. (Travis will not notify you if there is a warning in the output because it is just a warning). platform allows you to specify a comma-delimited string or array of strings. So, if you don't want to install wine, just explicitly set platform to supported platform list.\n. > someone contributed a patch to show a better warning when Wine is not installed.\nIn the electron-builder we check wine version (must be 1.8+) \u2014 https://github.com/electron-userland/electron-builder/blob/master/src/packager.ts#L225 and show user-friendly error message (I didn't contribute to electron-packager because this check is not part of platform package step and originally was specific for Squirrel.Windows (wine < 1.8 is broken)).\n. BTW, electron-builder handle native deps (if two-package.json structure is used).\nAlso, it is not good to depends on electron-rebuild (see nslog and babel-runtime).\n. > on each is just weird IMO\nThat's why electron-builder provides install-app-deps bin script :) \"postinstall\": \"install-app-dept\", in the scripts. So, you don't need to call install in both places.\nAnyway \u2013 you don't need to use electron-rebuild if you decide that this feature should be a part of electron-packager (well, prune is here) \u2014 see https://github.com/electron-userland/electron-builder/blob/master/src/util.ts#L26 method installDependencies. Code is very easy and you don't need to depends on  electron-rebuild.\n. > This doesn't cross-compile native modules, right\nNo, it is not possible, AFAIK.\n. @MarshallOfSound electron-rebuild does the same \u2014 call npm rebuild (https://github.com/electron/electron-rebuild/blob/master/src/main.js#L105 command='rebuild'). \nNo magic here. Plain old npm rebuild (BE AWARE \u2014 npm install is broken in this aspect \u2014 native module will be not rebuild if arch changed) and special environment.\nWhy electron-rebuild looks bloated? Because it is a CLI tool ;)\n. @reconbot Yep! It is what user expected, not rebuild, but precompiled binary. Unfortunately, most of the native modules doesn't provide it (e.g. https://github.com/atom/node-keytar/issues/27). \n. @deepak Unnecessary dependency. Also, now, I see that it also depends on npm (heavyweight dependency). In any case you can use electron-builder \u2014 native production (only production) deps will be automatically rebuild.. \ud83d\udc4d asar is already default in the electron-builder. And it should be default because Window IO is very poor and asar helps a lot on Windows platform.\nBut please note \u2014 https://github.com/electron-userland/electron-builder/issues/351 (anyway, it is electron-builder responsibility to deal with it).\nprune is not default in the electron-builder because we recommend to use two-package.json structure. But if it will be enabled in the electron-packager by default \u2014 I don't mind, will not set it to false. \n. @sindresorhus In the next upcoming electron-builder 5 prune will be enabled by default if not two-package.json project structure is used.\n. https://github.com/electron/electron/pull/5538 1.1.0 electron is broken.\n. @malept electorn-osx-sign only sign app, it seems our mac.js is a right place to add this string.\n. @sethlu And https://github.com/electron/electron/commit/5d906c0e4ed60512396c865f50dda89505d9ad88\nSo... if I understand correctly, electron-packager must require Team ID and add \n<plist version=\"1.0\">\n<dict>\n  ...\n  <key>ElectronTeamID</key>\n  <string>TEAM_ID</string>\n</dict>\n</plist>\nto Info.plist.\nelectron-osx-sign must change entitlements according to docs. Right?\n. @sethlu Thanks, so I will prepare PR here to add teamId option and modifying Info.plist. (@malept will be cool to accept my PR #351 to avoid merge conflicts :(\n. @malept I want to avoid double write, so, it is better to add this entry in the electron-packager (since it is required in any case).\n. As @malept said, it is not electron-packager responsibility to implement sign \u2014 this logic goes to electron-osx-sign (and param  team ID to https://github.com/electron-userland/electron-packager/blob/master/docs/api.md#osx-sign). \nIn my PR I am going to pass parsed Info.plist to electron-osx-sign (electron-osx-sign will analyze/modify and save it). Anyway, it is better to discuss in the PR ;) I hope, I will find time tomorrow to do it.\n. > I could parse out the team id from the identity and automate both Info.plist and the entitlements file.\nSorry, I haven't yet investigate what is team id is. I am slowpoke. If team id is a part of certificate common name Developer ID Application: Vladimir Krivosheev (X8C9Z9L4HW) \u2014 X8C9Z9L4HW, than we should not add new option. \nYou cannot get team id from the identity in all cases (it can be specified just as \"Developer Name\"), in this case we can use openssl to extract common name from cert \u2014 https://github.com/electron-userland/electron-builder/blob/master/src/codeSign.ts#L117 (as electron-builder does on CI server). Or maybe using some security command.\n. @sethlu I like your solution. \n- In the electron-builder we sign app on our side (because code signing on CI server is supported) (i.e. don't use electron-packager to sign).\n- electron-buildernow automatically finds appropriate certificate without any configuration and identity name passed to electron-osx-sign is always qualified (i.e. with team id) (on CI server we use openssl to extract common name) . So, logic \"find team id\" is not relevant for us.\nSo, in the end, nothing is required to do on electron-builder/electron-packager side, right ;) (except that we should now pass electron version)?\n. @mcfedr What do you use during development? Or you just not specify electron-prebuilt dependency but install it manually?\nAs far I understand, --production flag is not a solution because we need to install babel/compiler/etc.\nI think, we should not reinvent the wheel and introduce new non-standard field in package.json. Instead, we should use config.\n\"config\": {\n    \"electron-version\": \"\"\n  },\n. >  I didnt get to the electron stage, and saved all that time downloading\nI don't think that it worth. \n- electron don't want to distribute using normal compression \u2014 https://github.com/electron/electron/issues/5455 Well, because in the modern world 50 vs 25 mb means nothing.\n- Travis supports cache on OS X now, so, just configure cache. https://github.com/electron-userland/electron-builder/blob/master/.travis.yml#L22 Or circleci \u2014 https://github.com/develar/electron-builder/blob/builder/circle.yml#L7\nSo, nothing to save. It is downloaded only once. It is not unreliable and slow npm, it is downloaded quickly :)\n. @mzmousa If you use electron-builder please use build.electronVersion \u2014 https://github.com/electron-userland/electron-builder/pull/418#issuecomment-221798404 \nIf I understand correctly, @mcfedr created PR here by mistake, because electron-builder in any case use electron-builder in a way that prevent any such configuration.\n. @mcfedr electron-builder forbids most of the electron-packager options to avoid misconfiguration. https://github.com/electron-userland/electron-packager/blob/master/docs/api.md#version is forbidden as well (yes \u2014 you will get build error). \nelectron-packager currently doesn't support configuration via package.json. If you want to set electron version \u2014 you have to use CLI param version or programmatic API.\n\ni think the feature makes sense for both projects, builder and packager.\n\nMy previous suggestion is wrong \u2014 config is not suitable here because there is an obvious question \u2014 why I can specify electron version using package.json, but other options only using CLI?\nAnd so, another question is \u2014 should electron-packager introduce build as electron-builder does?\nI have no answers. For me electron-packager is a low-level tool and electron-builder is an orchestration tool. And in any case, even if electron-packager maintainers will decide to introduce build, electron-builder in any case will not support all options \u2014 but forbid it (e.g. arch).\n. @malept xcode7.3 is broken and slow (or often hangs). electron-builder switched back to xcode7 (I haven't yet time to contact Travis support).\n. @malept FYI: https://blog.travis-ci.com/2016-04-27-xcode73-performance\n. Obviously icon must be valid ICO file and has size at least 256x256. But not PNG (appccs.png). Consider using electron-builder \u2014 icon file is validated prior to pass to electron-packager (electron-packager is a little bit low level tool).\n. Please see https://github.com/electron-userland/electron-packager#related \u2014 https://github.com/electron-userland/electron-builder\n. Use electron-builder to build deb/rpm/etc for Linux \u2014 icons will be installed according to https://developer.gnome.org/integration-guide/stable/desktop-files.html.en\n. Possible workaround: use asar: true.\nPossible, because electron-packager still doesn't create asar directly from app, but copies and only then creates asar archive.\n. Problem is that electron-packager doesn't create asar archive directly from application files, but copies to temp directory. electron-builder creates asar archive directly and, so, no issues with symlinks on Windows (sorry, this functionality is not yet merged into the electron-packager because it is tight to another code in the electron-builder (so, not easy to prepare PR and in any case I wanted to test it at first and only then create PR)).\n. @malept I don't against, just note that it will be better to enable it by default (but as stated, it depends on #364 and custom filter logic instead of npm prune). Less configuration is better.\nWell, yes, I like this new option, but you know, user have to find such option and discover issue (most users can just miss abnormal app size). Ok, ok, I should just send PR.\n. rename works in the electron-builder for a long time, no issues (only from fs-extra, not from native node fs, of course) :+1: \n. Rename doesn't work across file systems, so, must be used with care. Here checked, that temp dir is not used, so, it is ok.\n. @malept Sorry, I misunderstood place of this change. It is not common.js, it is mac.js \u2014 \nvar finalAppPath = path.join(tempPath, `${opts.name}.app`)\nvar contentsPath = path.join(tempPath, 'Electron.app', 'Contents')\nSo, we don't ever need to check is it temp or not. It is always in the same temp fs.\nIn my fork I use rename in this place in any case \u2014 https://github.com/develar/electron-packager/blob/master/mac.js#L164\n. @malept It is mac.js, not common.js \u2014 please see first arg of path.join \u2014 tempPath In this file both vars finalAppPath and contentsPath are located in the same temp dir. It is not final application out.\n. @jptillman app.disableHardwareAcceleration() https://github.com/electron/electron/blob/master/docs/api/app.md#appdisablehardwareacceleration. So... do you use electron-builder or electron-packager \u2014 https://github.com/electron-userland/electron-builder/issues/580 ? It seems it is your app issue, not packaging tool issue.\n. Duplicates #33 ? https://github.com/electron-userland/electron-packager/issues/33#issuecomment-163365713\n. - AppImage is a distributable format, electron-packager produces only non-distributable formats.\n- \"the main problem with your argument is that upstream Electron already provides an Electron.app template\" electron-packager just package.\n- In any case, when user wants to build in distributable format, he will use or custom build scripts, or electron-builder.\n. > So you are saying one can use a combination of Electron Packager and electron-builder\nYes. Please see https://github.com/electron-userland/electron-builder#pack-only-in-a-distributable-format\n\nelectron-forge does use -packager internally and can use the AppImage target from -builder if\n\nUsing electron-forge-maker-appimage.. What problem do you have? Long build time without success or just long time? You can try to use electron-builder \u2014 asar is enabled by default and files copied to app archive directly without intermediate copy.\nObviously, during development, you can \n- set some env to path to assets and use it in the app if defined.\n- add ignore rules for dev build (but why you need to build if you can just use electron-prebuilt to test?)\n. Planned and will be supported this year. Please see https://github.com/electron-userland/electron-builder/issues/509 \nAppImage is already supported and recommended instead of deb.\nIn the electron-builder, not electron-packager because of #33.\nJFYI \u2014 if understand correctly, it is possible to build Snaps only on Linux.\n. @peteruithoven If you somehow related to Snaps dev team, it will be cool to provide some info about multi-platform status \u2014 is it possible to build Snaps not only on Linux (I am aware of Docker and electron-builder even provides Docker images (https://github.com/electron-userland/electron-builder/wiki/Docker).\n. As of #33, please use https://github.com/electron-userland/electron-builder to build or nsis installer (/S) or Squirrel.Windows installer (--silent (https://github.com/Squirrel/Squirrel.Windows/pull/187)). Or https://github.com/electron/windows-installer. @rico345100 electron-builder allows you to use convenient glob \u2014 https://github.com/electron-userland/electron-builder/wiki/Options#Config-files Maybe it is a solution for you. Also, consider to use yarn instead of npm to use yarn clean (electron-builder excludes npm-debug/.vscode by default, but https://yarnpkg.com/en/docs/cli/clean is much better).. Where is your project located? In your home directory? Have you tried to disable MS Defender or another antivirus?. electron-builder for such use case supports --extraMetadata \u2014 ability to inject/modify package.json (e.g. https://github.com/electron-userland/electron-builder/issues/639#issuecomment-237545651). Because in general such options should be inferred from package.json, not vice versa.. electron-builder produces appimage for Linux and it works on FreeBSD. So, not clear for me too.. Asar file cannot be signed using windows tool. File format doesn't support it simply. Electron should support it, because it is not possible to implement check on application side (since asar files can be changed).\nGood news is that on macOS it is possible to fix without Electron team \u2014 https://stackoverflow.com/questions/35013006/where-does-codesign-store-the-signature-for-a-signed-text-file-on-osx I will file PR to electron-osx-sign soon (cc @sethlu).. @MarshallOfSound thanks for summary. (To be clear, here we are talking only about code validation, not source code protection or app licensing).\n\n\nBut app is cracked using cracked license servers / license generation. Not using simple hex editing of exe file. Or I am wrong? Anyway \u2014 codesign on Windows doesn't work. Because not enabled by default (blocking unsigned code), easy way to bypass UAC (e.g. NSA exploit).\n\n\n\nYes \u2014 https://stackoverflow.com/a/4716079/1910191 I doubt that Electron or node check DLL signature.\n\n\n\nhow app can be replaced? You need to have private key to sign. Sha2 not yet broken to produce the same hash. Access \u2014 due to easy auto update, nsis/Squirrel both install app by default to user directory.. @drjasonharrison Let's discuss in the https://github.com/electron/asar/issues/123. > Perhaps it's worth reconsidering that default, not sure why but everyone else seems to be doing it\n\n\nBecause on bloody windows FileDescription is used as app name in the process view. And if you will use description instead of name \u2014 you will get user reports. Details \u2014 https://github.com/electron-userland/electron-builder/pull/965. Be aware that you must normalise version string according to *** MS Windows requirements, otherwise Squirrel.Windows will be not happy and it can lead to crash \u2014 https://github.com/electron-userland/electron-builder/issues/1101#issuecomment-272644202 . @bengotow Thanks a lot. electron-builder fully supports code signing on macOS Sierra, including CI support. But I was not aware that we also need set-key-partition-list (all tests green, no user reports). But I saw this UI pop-up once, so, fixed.. @MarshallOfSound Randomly or always? As far I know, only list-keychains is required on macOS Sierra Travis CI (osx_image: xcode8.3). I don't see user reports about it and it works for me (app and tests). Ok, in any case yet another command doesn't harm.. If you use electron-builder \u2014 electron-builder prefers to use locally installed Electron version to match what do you get during development. So, if you use npm, please remove node_modules and install it again. If you use reliable and recommended yarn, just yarn.. @gozzoo Better to use AppImage for Linux and portable for Windows \u2014 electron-builder can produce it (info how to use electron-packager with electron-builder).. @TobiasSN electron-builder is able to produce pacman packages and supports both electron-packager and electron-forge.. electron provides completed executable binary and electron-packager/electron-builder only modifies resources (icons, file properties).\nInstallers produced by Squirrel.Windows or NSIS (external modules, not part of electron-packager).. We cannot use == for null in most cases. It is the reason why standard doesn't warn me about it (I suppose) and check was passed. Because== null means === null ||  === undefined. In any case I will rewrite code to avoid \"I'm not thrilled at having two ternary statements\".\n. Yes, cannot be marked as \"boolean\". If you don't like this handling, maybe it will be better to add additional option use-temp-dir (default value: true) (but tmpdir and use-temp-dir are mutually exclusive, so, I think, it is better to allow specify false)?\n. I also prefer to use for of instead of magic function style. But I see forEach in existing code.\nDo you want to convert it to\njs\nvar supportedPlatforms = {}\nfor (var platform in common.platforms) {\n  supportedPlatforms[platform] = './' + (platform === 'darwin' ? 'mac' : platform)\n}\n?\n. Variables renamed. I don't want to pollute file scope, but cannot use let, so, still use reduce instead of for in (for of es6).\nMac App Store (MAS) platform can be added as before \u2014 directly to supportedPlatforms (or inside reduce function \u2014 in any case we check is equal to darwin?).\n. Why? Simple line after:\nsupportedPlatforms.mas = './mac'\n. Or \nvar supportedPlatforms = common.platforms.reduce(function (result, platform) {\n   result[platform] = './' + (platform === 'darwin' ? 'mac' : platform)\n   return result\n }, {\n  mas: './mac'\n})\n. It seems, you don't like  ternary operator :)\nOk, my code saves only 2 lines (linux and windows). Maybe we can rename mac.js to darwin.js to consolidate, but I don't think that it is an acceptable solution.\nSo, I reverted this block to previous.\n. Travis build passed, please review.\n. fs-extra handles EPERM on windows correctly. We don't need to use mkdirp/ncp here explicitly.\n. Commend added.\n. Using fs-extra was approved on first iteration (no negative comments), so, I have decided to cleanup \u2014 no need to to use mkdirp/rimraf explicitly if we use fs-exra\n. Fixed, thanks.\n\nOn Mar 1, 2016, at 8:22 AM, Mark Lee notifications@github.com wrote:\nIn\u00a0cli.js\n:\n\n@@ -22,6 +22,11 @@ if (!args.dir || (!args.all && (!args.platform || !args.arch))) {\n   process.exit(1)\n }\n+// minimist doesn't support to specify several types (string|boolean)\nIt would read better as:\n\n// minimist doesn't support multiple types for a single argument (in this case, String or false)\n\u2014\nReply to this email directly or\u00a0view it on GitHub\n.\n. Docs added.\n. Changed, but don't quite agree that \"to disable functionality.\" is clear \u2014 because result of \"disable functionality.\" is not clear. Opposite to \"to write to out directly without temp\".\n. I feel a little stupid compared to you :) Changed.\n. Strictly speaking, it is an unrelated change, so, sorry, I will remove and address in a separate PR.\n. We can pass stopOnError: true to stop on first error.\n. reverted and comment added.\n. reverted.\n. Yes, but npm doesn't support other ways (e.g. typescript supports comments in the tsconfig.json) :(\n. Well, since electron-packager requires nodejs 4.0, we just can use it (i.e. nothing to discuss here), if you insist, I can remove it.\n. In my change I need to add new variables. I decided to use const. And I cannot use const/let without use strict.  It was a reason why I use use strict here.  \n\nShould I revert it and use only var?\n. Yes, I also want it. But I see that you use some editor integration \u2014 \"Editor integration is easier that way.\" If your editor supports eslintrc in the package.json, we definitely should get rid of yet another file and move configuration to package.json\n. The issue \u2014 standard config is not correct. See https://github.com/feross/eslint-config-standard/blob/master/eslintrc.json#L8 \n@feross Could you please comment why it is so? \nhttps://github.com/eslint/eslint/issues/5301#issuecomment-184720161 is quite clear. We should not set module \u2014 we don't use ES6.\n\nmost of the files are modules, right?\n\nIf I understand correctly, module here means only ES6 module. It is not nodejs module.\n. There is no technical reason to not support specifying ignore in the package.json, but eslint doesn't support it.\n\nThe execution one is quite reasonable\n\nFor config file yes, but we specify config in the package.json \n. ",
    "MarshallOfSound": "@havenchyk In the entire time I have contributed to Open Source I have never seen a project have to defend the reason for its existence.  That said, unfortunately based on where you seem to be taking this discussion, this will be the first.\n\nI still can't see the reason why you have created new product from the scratch.\n\nThis is not the case, as @malept said in his original response we use community maintained modules to provide most if not all of forges functionality.  All forge actually does is wire everything up in an easy to use way.  Actually we even explain this in one of the first lines of our README.\nElectron Forge unifies the existing (and well maintained) build tools for Electron\ndevelopment into a simple, easy to use package so that anyone can jump right in\nto Electron development.\n\nTo my mind you and other developers from community ignored the problem with building application for a quite long time\n\nI'm not sure how to respond to this, are you somehow under the impression that @malept or I or any other community member was under an obligation of some kind to provide a tool such as -builder or -forge because to clarify, we were not.  The original methods for building an Electron application worked and weren't actually too difficult to understand, lots of the issues people were having were either due to out of date guides (Electron tools moves very quickly) or simply a lack of experience with node.js in general.  While I can agree that -builder simplifies the process for many people it does so in a way that people (@malept and I included) do not feel is the best way for the Electron community and we were sure that we could improve on it in a new tool; as such we created -forge.\n\nit's unacceptable, IMO.\n\nI'm confused as to what you think is unacceptable, the fact that we made -forge or the fact we didn't provide a solution to the building problem for a long time.  These two issues you raise actually contradict each other.  I would however like to point out the Electron CoC in particular.\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\nWe are of the firm belief that electron-forge is the best direction for the electron-packager and electron community. We understand that some people will disagree with our ideas, opinions or even our code but we sincerely hope that you can accept our reasons and possibly even see what we are trying to achieve with -forge.. This should be possible soon https://github.com/MarshallOfSound/pruner/pull/1. @maxogden If electron-packager had an option that automatically ran https://github.com/electronjs/electron-rebuild with the correct options present it would greatly simplify native module workflows.\n. @malept In regards to a PR adding this feature, how do you feel about including the \"signtool\" binary like electron-installer-windows have?\n. https://github.com/electron-userland/electron-packager/pull/354 adds the afterExtract option.  Then you just need a small function that requests the patent free FFMPEG from the url in the format\njs\n`https://github.com/electron/electron/releases/download/v${electronVersion}/ffmpeg-v${electronVersion}-${platform}-${arch}.zip`\n. New PR --> #403\n. @malept Could it be worth adding that package to the docs?  Possibly a list of plugins (if others start being made)\n. @malept I am trying to use the icon option on electron 0.37.5 and it does not appear to be working\n. @malept I am using the programmatic API.\nAs part of my settings object I have\n``` js\n{\n    ...\nicon: './build/assets/img/main',\n...\n\n}\n```\nThe file ./build/assets/img/main.icns exists\n. I am running electron-packager 6.0.2 and using electron-prebuilt 0.37.6.\nHost platform is OS X\nThe project is here: https://github.com/MarshallOfSound/Google-Play-Music-Desktop-Player-UNOFFICIAL-\nI have only updated the electron-packager dependency locally though.\n. @malept I also just deleted the node_modules directory.  Downgraded to 0.37.4 and tried again, same issue, the icon does not update.\n. @malept Interestingly enough, the shasum of those two files are identical...  But the icon when opening and when looking in finder are completely different\n. @malept OK, I am thoroughly confused now.  I went through and cleaned out this folder\n/var/folders/qf/96gzcfwd7yz1tws3q0mnk3tm0000gp/T/electron-packager/darwin-x64/Google Play Music Desktop Player-darwin-x64\nAnd now the icon is working....\n. @malept Not too familiar with the testing framework here but I added some tests :+1: \n. @malept I've moved the logic to it's own test and moved it to a new file called \"hooks\" so that if in the future we add more of these hooks we have a place for them to go :+1: \n. @malept Talk about delay \ud83d\ude06 \nI finally got around to adding use strict \ud83d\ude01 \n. @malept So who's do we use \ud83d\ude06 \n. > BTW, electron-builder does it (if two-package.json structure is used).\n@develar Yeah, I saw that electron-builder supports it but I have a fundamental issue with the two-package.json structure.  It's a discussion for another place, but personally it complicates the development of electron apps and makes introducing new developers very tricky.  The concept that instead of having two sections in a package.json dependencies and devDependencies you have two completely separate files in different directories that call npm install on each is just weird IMO  Especially when you can achieve the same results with the standard package.json structure.\nBut yeah, that's a discussion for a different place :laughing: \nBack on topic though\n\nAlso, it is not good to depends on electron-rebuild (see nslog and babel-runtime).\n\nYeah, nslog causes a LOT of issues, maybe this would be better served as functionality implemented in a hook such as the one I implemented here #354 and just put in this repo as a documented code sample.  But I still feel it would be a great option to add assuming we can document or handle nslog tricks internally.\n. @malept No it doesn't, I don't think that is fundamentally possible at all.  It would definitely have to throw errors or at least warnings on an attempt to cross-compile\n. @develar Yeah, I was just reading through the way the electron-builder does it.  Do you know of any limitations of that technique.  There must be a reason why electron-rebuild does things the way it does :confused: \n. @malept Yep, thanks for merging.  I'll update the title of the issue and start work on the magical electron-rebuild plugin \ud83d\udc4d \nTbh, it should be relatively straightforward \ud83d\udc4d \n. @malept Do you have a timeline on the next electron-packager release, using npm link is depressing \ud83d\ude06 \n. Progress currently blocked by: https://github.com/electron/electron-rebuild/pull/98\n. Unblocked \ud83d\udc4d \nPR is up to electron-rebuild.  https://github.com/electron/electron-rebuild/pull/120\n. If I understand what you want correctly something like this might work (this code is untested)\njson\nscripts: {\n     \"package\": \"electron-packager . --icon=appccs.ico --arch=x64 --version=1.1.2 --overwrite --prune\",\n}\nbash\nnpm run package -- --platform=win32\nnpm run package -- --platform=linux\n. @malept The travis failure appears to be unrelated to the change, do these tests fail randomly sometimes?\n. @probonopd This is from me not @malept but I see Electron Packager and targets such as AppImage, MSI, EXE and other such build results as separate goals.  Electron Packager's only goal is taking your code and packaging it into a generic folder that will run on the given platform.  Supporting targets like AppImage is the role of tools such as electron-installer-* modules, electron-builder or electron-forge.  It is separation of concerns IMO \ud83d\udc4d . Tbh what @malept said is pretty much on point\n\nSimilar to #33, providing installers (or OS-specific packages in this case) is outside the scope of electron-packager.. @probonopd electron-builder made the decision a long time ago to stop using electron-packager internally (wasn't really paying attention when that happened so not sure why).  But electron-forge does use -packager internally and can use the AppImage target from -builder if that's the user preference.\n\nAnd I believe you can use -packager and -builder together using the Electron Builder \"pre-packaged\" target.\nBasically there are options for everyone \ud83d\udc4d . @malept It successfully builds on OSX with mono and wine and such installed.  It's really strange, no errors, no crashes.  The process just dies.\nI'm trying to console log my way to the crash now.\n. @malept Isolated the cause as being 2 different versions of node.  It succeeds on node 6.x and fails on node 4.x.  This coincides with us dropping a dependency on babel-register.\nHas a bit of unsupported ES6 syntax slipped in somewhere?\n. @malept Yep and it failed silently like on the windows agent.  Reintroducing babel-register fixed the issue but I'd love to know the root cause\n. @hugolpz That appears to be a completely different issue\n. @ahallicks When I and others had this issue we saw no errors at all, not the ELIFECYCLE you are seeing.  That error normally means node gave up running the script for some reason, potentially out of disk space or out of memory.  You might want to check you don't have weird recursive symlinks or something \ud83e\udd37\u200d\u2642\ufe0f ?. > Yep. And I'm paying for that decision because you can't actually enforce a Node engine version as far as I know. \n@malept You can be really mean and do something like this in index.js\njs\nif (parseInt(process.versions.node[0], 10) < 4) {\n  throw new BigNastyError('Get a better node version plz')\n}\n. >  Coverage increased (+0.04%) to 97.122%\nOooohh yeaaahh.  A whole extra 0.04% \ud83d\ude06 \n. @yourfavorite On macOS I launch the app with a command like\nmyApp.app/Contents/MacOS/myApp\nOr something like that, I can't remember the path to the executable off the top of my head\n. @robogen I had to do some interesting things to get electron_rebuild working from within a JS script.  Basically two things come to mind when I think back to how I made it work.\n1. Use spawn not exec\n2. Ensure you set the cwd value correctly, it has to be the folder that contains your project (not a sub-folder but the top level)\nFor an example see --> https://github.com/MarshallOfSound/Google-Play-Music-Desktop-Player-UNOFFICIAL-/blob/master/vendor/rebuild.js#L24\nIn the latest electron-rebuild you can get extended output (and see what is actually happening) by using the --log argument\n. @robogen Can you see the modules actually rebuild in the logs.  If not something is wrong with your rebuild command.  I'd suggest removing the -w are and values.\n. > And why did it work before while it wasn't packaged but broke once it was?\nYou'll be packaging for a different arch than your node install\n\ngyp ERR! stack Error: EPERM: operation not permitted, unlink 'C:\\Users\\Documents\\GitHub\\node_modules\\nslog\\build\\Release\\nslog.node'\n\nYeah, nslog is a nightmare.  On windows I have rmdir /Q /S nslog\\build 2>nul before I run the rebuild.\n. Folks arriving here recently you are all experiencing https://github.com/electron-userland/electron-packager/issues/820\nIf reinstall your node modules you should get an updated version of Galactus that fixes this issue \ud83d\udc4d . @cballantyne \n\nnpm version - 5.6.0\n\nYou need to delete your package-lock.json file as well to get newer modules \ud83d\udc4d . Haha, that monkeypatch makes me cry every time I look at it \ud83d\ude06 . You almost certainly need to use the Docker / strange linux agent work around that I use here\nhttps://github.com/MarshallOfSound/Google-Play-Music-Desktop-Player-UNOFFICIAL-/blob/master/gulpfile.babel.js#L58\nBasically ignore /electron-packager/ when packaging, not sure why it's required or what causes it, but it fixes the infinite recursion issue \ud83d\udc4d . If you're having issues with using Angular 2 with Electron I'd recommend using electron-forge. \nIt has built in support for Angular 2 (thanks to electron-compile), you can see an example here\nhttps://github.com/electron-userland/forge-examples/tree/master/angular2\nIt should handle all your troubles for you while still using electron-packager under the hood \ud83d\udc4d \nelectron-forge import should go most of the way to getting your app working with forge as well \ud83d\ude04 . I'm happy to keep following up in https://github.com/electron-userland/electron-forge/issues/66#issuecomment-270547794 as it seems to be the kind of thing that should be documented for Angular users in Electron Compile.  But this is definitely not a electron-packager issue \ud83d\udc4d . > Why are application menus removed when packaged? \nThey are not, when you are running in \"development\" mode you are using the default_app from Electron which then simply requires your app's main entry point.\nWhen packaged Electron is launching your entry point directly.  The menu that you see before you package the app is provided by the default_app.\nYou need to provide your own menu if you want a menu to appear once your app is packaged.. @AhadCove Which electron version is this?. @AhadCove I believe a version that old is running on node.js version 4.x where as the error message says in order to use some ES6 features you need to add\njs\n'use strict';\nto the top of all your files.  You should probably just upgrade to Electron 1.4.x which uses node.js v6 and doesn't have this requirement.\nThis issue was probably a raised issue with Electron back when 0.36 came out and no longer affects up to date Electron versions.. @tobiasrm\nelectron and electron-prebuilt are actually the same package, you should only be using the electron package as of 1st Jan 2017.\nIn order to use jQuery in Electron you need to either\n\nDisable nodeIntegration on your BrowserWindow\nOr, install jquery locally and use window.$ = window.jQuery = require('jquery');\n\nThis is not an Electron or Electron Packager issue.  If you have any questions regarding using of Electron I would recommend directing them to the community or to the Slack Channel.. @dannystaple Check out the docs for the CLI\nYou can use --out to specify the output directory.\nhttps://github.com/electron-userland/electron-packager/blob/master/usage.txt#L50\nOr if you are using the JS API you can use the out property\nhttps://github.com/electron-userland/electron-packager/blob/master/docs/api.md#out. @rico345100 If you don't want a node_module to be included in production, just set it as a devDepednency and it will be pruned automatically. Move mqtt to devDependencies if you want to ignore it?. @rico345100 Can you explain your current issue more precisely then please.  Your initial issue indicated you  wanted to ignore mgtt if that is not the case what exactly are you trying to acheive?\nTo summarize so far:\n\nTo ignore modules from your packaged app add them as devDependencies instead of dependencies. @rico345100 \n\nUntested but this regexp should do what you want\nbash\n--ignore=\"^\\/(.vscode|gulpfile.js|userdata.json|npm-debug.log|my-app-darwin-x64)\"\nBasically add things that you want to ignore inside those brackets.  The key bit to that regexp is ^\\/ which forces the match to be at the start of the path \ud83d\udc4d . It's strongly based on this super custom regexp setup I have\nhttps://github.com/MarshallOfSound/Google-Play-Music-Desktop-Player-UNOFFICIAL-/blob/master/gulpfile.babel.js#L78\nYou might find regexps a bit easier to work with as well if you use the node API instead of the CLI (just my opinion). @rico345100 Those modules will be dependencies of or sub-dependencies of your dependencies (mqtt and node-notifier). @TheNoim Your problem is you are ignoring the src/ pattern.  This is matching that src folder in your node_modules directory.\nYou need a more explicity regexp / pattern that only matches at the start of the tested path.. Well I use this magic\nhttps://github.com/MarshallOfSound/Google-Play-Music-Desktop-Player-UNOFFICIAL-/blob/master/gulpfile.babel.js#L56\nBut that's just me \ud83d\ude06 Basically you just need a stricter ignore pattern \ud83d\udc4d . Chromium itself only supports version 10.9 and higher as does Electron.\n\nonly option is to upgrade mac os?\n\n^^ that is your only viable path \ud83d\udc4d . @Riokai To set the meta data for your application on windows, you need to use the win32Metadata option when using the API.\nSee https://github.com/electron-userland/electron-packager/blob/master/docs/api.md#win32metadata. @Arcath electron-packager does not generate MSI files?  Perhaps you meant to raise this on https://github.com/electron/windows-installer?. @choxi Your issue is your usage of relative paths.\njs\n./configA.json\nRelative paths in node.js are by default resolved relative to your current working directory.  In dev mode this is normally where you would expect (root of your app).  In prod mode it is not.  You should always use __dirname to resolve file paths relative to the current files location.  E.g.\n```js\nconst path = require('path');\nconst pathToFile = path.resolve(__dirname, 'configA.json')\n```. @caishengmao \nThe solution is in the message\n\nuse electronVersion (or --electron-version in the CLI) instead. Because the syntax was changed in a recent PR to be less confusing \"--version\" usually returns the version of the CLI tool you are using.  This change makes it more logical. @caishengmao Please replace --version with --electron-version as the message states.. @caishengmao Literally just change it in the \"build\" script of your package.json?. See #586  Please do not raise duplicate issues. @caishengmao Please stop raising duplicate issues, please follow up in your original issue #586\n\nFurther duplicates will be considered (at least in my opinion) against the Electron Community CoC.. This depends entirely on the way electron-packager was used to package the application and for the \"obscurity is the best security\" idea I don't want to start giving out pointers on how to code dive a packaged and released Electron app \ud83d\ude06 \nIf you can perhaps share what you are trying to achieve I can try to help out. GUI apps not launched from the Command Line do not inherit the system path.  You either need an absolute path to the executable you want to spawn.\nOr use a tool like https://www.npmjs.com/package/fix-path to get your system path.. @akcorp2003 I do not believe so, always good to test though \ud83d\udc4d \nGlad your issue is solved \ud83d\ude04 . @Mathi05 This is because you are using a relative path to get your keyfile.json.  Relative paths are relative to the CWD of the process that launched Electron.  In development this is normally where you expect (the root of your app) but in a packaged app this could be anywhere.\nAll paths in your app should use path.resolve(__dirname, 'relative', 'path') to determine the path to another file.  Your code should become.\n```js\nconst path = require('path');\nvar gcs = storage_google({\nprojectId: 'test-account',\nkeyFilename: path.resolve(__dirname, 'keyfile.json'),\n});\n``. @Sindcs Can you post your package.json file here please. @AlyxMoon Can you share your electron package config \ud83d\udc4d . @AlyxMoon Either the object you pass to the Electron Packager API or the CLI args you pass to it. @AlyxMoon I'm like 99% sure you've just got a rogue ignore \ud83d\udc4d In particular this one--ignore=src` will ignore all src directories in the tree, not just your top level one \ud83d\udc4d \nYou probably need a more precise ignore regexp.  Try removing all your ignores and seeing if the app works \ud83d\udc4d . @spyshow phantomjs works by spawning an executable, putting your files in an ASAR breaks this spawning technique.  You need to add it to asar.unpacked or disable ASAR entirely as you found out :\n. @Bharwcb That error is because on newer version of macOS gatekeeper launches your app in a virtual read only file system area.  So you can't write to __dirname or app.getPath() or anything like that.  All files should be written to os.tmpdir() or you get that error \ud83d\udc4d . @tkggusraqk Can you post your package.json file \ud83d\udc4d . > \"serial-number\": \"^1.3.0\",\nYour dependency is in devDependencies so it will be removed automatically in production.  Move it to the dependencies section and it will persist during production packaging. Don't have it in both, you only want it in dependencies\nFor more info check out the package.json spec https://docs.npmjs.com/files/package.json. @tkggusraqk Just changing the package.json won't fix it for you, you will need to rerun npm install and npm run packager. @tkggusraqk Are you by any chance using a two package json structure?. @quantumproducer Try using a .icns file instead of a raw iconset \ud83d\udc4d . http://stackoverflow.com/questions/12306223/how-to-manually-create-icns-files-using-iconutil. @quantumproducer Can you try an absolute path to the icns file, just to be 100% accurate \ud83d\udc4d . The structure you have described can easily be achieved with the current options.\nYou want to set the \"main\" value in your package.json file to point at the generated entry point (your DIST folder) then set up the --ignore CLI argument or the ignore option in the API to ignore all files in the original src directory \ud83d\udc4d . GitHub issues are for feature requests and bug reports, questions about using Electron should be directed to the community or to the Slack Channel.. That said you packager script has this --version=0.34.0 which is a really old electron version, update that version and it should start working \ud83d\udc4d . This is a known npm@4.x bug where npm prune --production doesn't work if the version in your package.json is not a semver range.  In this case the value is \"next\", set it to be an actual version range and this will work correctly \ud83d\udc4d . Run ./node_modules/.bin/electron-packager. @gameslayer I'm not sure what the combination of problems you are experiencing is but I'll just cover a few things quickly\n\nHmm why do I have to do that now?\n\nThe electron-packager command will not be added to your path unless either\na) You install it globally with npm i -g electron-packager\nb) You have a magical path setup that puts the node_modules/.bin folder in your path\n\nthey really need to standarize this and stop changing things so much..\n\nThis hasn't changed ever and almost certainly never will\n\nit needs sudo permission to put files into tmp\n\nThis is because from the sounds of it you have run sudo npm install .... this will create files with root only access / write permissions so everything from then on will also require sudo permissions, you should avoid using sudo unlesss it is actually required.\n\nthis whole thing with electron is a complete mess...\n\n\ud83e\udd37\u200d\u2642\ufe0f idk, everyone works great where I'm sitting \ud83d\ude06 \nAll this said, it sounds like you got your packager command working now \ud83d\udc4d . @gameslayer If at any point it worked from your command line with no relative path to the installed executable you must have installed it globally at some point with npm i -g electron.\nClosing out as the original issue has been solved \ud83d\udc4d (packager can now be executed). > really annoying how things keep changing.\nFor the record, I literally can't say this enough nothing has changed regarding how you execute electron-packager, it is literally impossible for the following to be possible\nbash\nnpm i electron-packager\nelectron-packager\nThat will always throw a command not found error, that's how NPM has always installed binaries and that hasn't and won't change \ud83d\udc4d . @develar @malept @drjasonharrison I've done quite a bit of research into code signing ASAR files to protect against source code injection in Electron applications and I've got a few things to say here.\n\n\nUnless the OS is doing the verification there is always a way around internal signiture verification, it might be a lot harder but it will always be possible to bypass an application that self-validates for the obvious reason that you could modify the bit of the program that does the self-validation.  Just look at game DRM where companies spend years trying to make their game uncrackable, it always gets cracked eventually \ud83d\ude06 \n\n\nmacOS doesn't verify static assets at runtime, you can codesign any files you want in the app but only what apple considers \"runtime code\" will be validated, this means the Electron binary and the Electron Helper binaries will be validated but static assets like .asar files and other such files will not be validated\n\n\nWindows doesn't do any signature validation on anything that isn't an .exe or .dll and even then it will sometimes still launch invalid or unsigned files \ud83d\udc4f \n\n\nThis is the big one for me, in order to actually exploit this (changing an ASAR file) the malicious program / attacker needs physical access / to be already running in a privileged state on your users machine at which point they can do whatever they want anyway, including replacing your application completely with a fake one with a valid signature that looks the same \ud83d\ude06 Once the user has lost control of their own machine there is little we can do as developers to protect them. \n\n\nAll this said I would love if someone could prove me wrong and come up with a foolproof way to sign and validate static resources cross-platform (or even just one platform would be impressive) but I'm pretty sure it's not possible and I don't believe the teams stance on source code protection has changed.. @develar Yeah, validating code has the same limitations as mentioned before though \ud83d\ude1e \n\nCracking license servers is only useful for getting the game for free, also talking about modding the content of the game which is more on-parr with this topic.  The best metaphor I saw for describing this went something like this\n\n\nImagine you have a box and you want to keep it's content safe, but you have to store the key to the box with the box itself or at least within easy reach of the box.  You can see how you could hide the key, put decoy keys all over the place.  But eventually someone would find the correct key and the whole charade would be pointless\n\n\n\nYeah, but that's still self-validation \ud83d\ude04 Change the core code for the application and there goes the validation because windows doesn't enforce validation of signatures at an OS level it's basically a catch-22.\n\n\nWell I mean on macOS replacing the app is as easy as executing a bit of bash\n\n\nbash\nrm -rf /Application/MyApp.app\nmv /path/to/fake/app.app /Applcations/MyApp.app\nIt's a technique I've seen used before, if the app has a similar UI (possibly even a slightly modified version of the original app) and the same icon / name the user won't notice a thing and as long as the new app is signed with a valid cert, macOS won't complain either \ud83d\ude22 . resources is a folder required by Electron in order to locate your app or app.asar file which contains your actual app code.\nWhat exactly do you wish to specify?. You need to run your native modules through electron-rebuild before packaging for an architecture that isn't your current platforms architecture.\nSee https://github.com/electron/electron/blob/master/docs/tutorial/using-native-node-modules.md. Was reading through this before you even summoned my review \ud83d\udc4d LGTM \ud83d\udea2 . Actually hold up a second, just checking something. After a quick check of 30 of my installed applications on my Windows machine 27 of them set FileDescription to be the same as ProductName and the other 3 are close just missing some symbols / spacing.\nPerhaps it's worth reconsidering that default, not sure why but everyone else seems to be doing it \ud83d\ude15\n(Even I'm doing it in GPMDP) . Haha, thanks @develar \nThat actually reminds me when I had that problem before...  That's windows for ya...  @malept should probably change it to be productName || name then \ud83d\ude04 . https://github.com/electron-userland/electron-packager/blob/master/docs/api.md#appcopyright. @zackshapiro electron-packager has no concept of webpack, if you want to do something specific while packaging you should check out the afterCopy hooks in the API.. Can you please post your package.json file. Please move electron to the devDependencies section. npm@5 will restore missing prod deps I believe when running prune production.  So even though we ignore it, npm puts it back. bash\nnpm i electron-packager\n./node_modules/.bin/electron-packager. > Please describe your issue:\nYou missed this bit out, not sure what your actual issue is here. @dmos62 The promise PR was merged after the latest release.  I.e. The promise return value has not been released yet.\nYou'll need to wait for the next packager release. @malept Changed the tsc target and it should be v4 compatible now \ud83d\udc4d . @malept The failure here look unrelated to the code changes, is it gtg?. Electron is distributed under the [MIT License](https://github.com/electron/electron/blob/master/LICENSE and pretty much everyone changes those values already.  Interpret that how you will.\nI'm being deliberately vague here because none of us are lawyers and anytime someone asks \"is something legal\" I've got to simply put the boilerplate answer.\n\nWe are not lawyers, if you have legal questions, ask an attorney, not developers \ud83d\udc4d . Going to prefix by saying this is extremely unlikely if you have checked the zoom values as you say.  Can you provide a repro case for this?. Please do not raise multiple issues across repositories.  (RE https://github.com/electron/electron/issues/10255)\n\nYou may need to use a mirror to download Electron. This is something I noticed a while ago when running on newer travis CI boxes.\nhttps://github.com/MarshallOfSound/Google-Play-Music-Desktop-Player-UNOFFICIAL-/blob/master/sig/import.sh#L21\nJust need to run that command on CI \ud83d\ude04 . @develar It was failing 100% of the time for me, not sure about others, currently using 8.1 image\nhttps://github.com/MarshallOfSound/Google-Play-Music-Desktop-Player-UNOFFICIAL-/blob/master/.travis.yml#L3. @peskic93 Not sure if it's the issue but would recommend using double quotes not single quotes on the command line. Can you try that?. @zackshapiro Sounds like you sent them a zip file or something and they're trying to run the .exe file from within that zip folder.. I don't see the issue here (am I missing something).  You sent them a zip file, which took a long time to extract, and then they ran the .exe file successfully?. electron-packager does not make a single .exe file for you, it packages your app's code into a folder with all the electron bits and pieces in it.  If you want to create an installer (a single .exe file). I'd recommend checking out electron-winstaller or the simpler approach electron-forge.\nThose dll files are all required for Electron apps to run.\n\nit asked if they wanted to 'extract files'\n\nThis sounds like a bit of miscommunication, Electron will never ask to \"extract files\", that string doesn't even exist anywhere in the Electron or Packager repositories.  Can you double check where exactly in the process that message appears.\nThat said, raising an issue for a third party makes this a pretty difficult communication channel.  Without a repro or a first hand recording or something there is basically nothing we can do here.. @eminoda The issue is with your ignore command.\n--ignore=src\nThis will ignore all src folders including the ones in your node_modules folder (node_modules/debug/src).  You need a more exact ignore command or you will be ignoring things by accident that shouldn't be ignored \ud83d\ude04 . @bimohxh What version of node are you running?. Looks like the new 8.4.0 version of nodejs has some issues, see #714 as well.  Might want to raise this upstream in the node repo. Can you post your package.json in both cases. @caishengmao What version of npm are you using?. @caishengmao Please update to 5.4.0, this is a known issue with npm@5.3.0. Whenever you try to load a path in node.js through the fs API's, if you provide a non-absolute path it is resolved relative the the CWD of your application.  In dev this is the root of your app, in pacakged this is wherever your exe or .app file is.\nYou need to resolve absolute paths yourself using path.resolve(__dirname, 'data.json'). @Devhercule Please keep Electron issues to the Electron repo.  We'll discuss the logs you posted there --> https://github.com/electron/electron/issues/10689. @malept Potentially the fs changes we made switched from streams to buffers behind the scenes at some point.  (So all this multimedia is being loaded into memory instead of being streamed). @jessegavin Can you post the DEBUG output when using --package-manager=yarn. Try upgrading yarn (what version are you running now). I'm somewhat confused as to the difference between this and the officially maintained (and already linked) electron-winstaller?  Can you explain the differences?. My main concern here is I know electron-winstaller, I know that we update it and I know that the binaries that electron-winstaller use are generated by the maintainer of Squirrel.Windows and PR'ed in personally.\nI would personally be more OK (and it would be more in line with the spirit of Open Source) if whatever issues that electron-windows-installer fixed could be PR'ed into electron-winstaller.  Even if lots of the code base was effectively rewritten I'd be down to review a PR like that if it maintained backward compatibility \ud83d\udc4d . > In my package.json file the 'electron-store' is listed in the \"devDependencies\".\nThis is your problem, a \"devDependency\" is a dependency that is only needed during development, this means when you package your app for production the dependency is removed.  Use --save instead of --save-dev and everything will work fine. It needs to only be in dependencies and not present in devDependencies. Does this directory exist in your development environment?\n\nnode_modules\\_read-pkg-up@2.0.0@read-pkg-up. RE the hooks issue I believe the operation should throw an error if afterCopy or afterPune hooks are provided and a prebuilt ASAR file is provided , these are incompatible options.\n\nAlso I don't think this option should go into the options.asar option.  That object is typically sent pretty much through to the ASAR module.  This goes nowhere near the ASAR module, I'd prefer this if it was something like options.prebuiltAsar.  This should also throw errors if that option is used in conjunction with any other ASAR option.\nAlso @malept we should just make forge error out instantly if this option is used \ud83d\ude04 . > I have created test scenario.\nCan we lose some of the dependencies there, I'm down to fix this if it's a bug but I'm not going to go traipsing through 25+ deps to find the one causing the issue.  If anyone can provide a minimal test case (quick-start with one or two extra deps) I'll take a look . @BruceAn1978 Just a quick warning, raising this duplicate issue in direct contradiction to the process @malept ran you through in #858 especially after he gave you a direct link to the FAQ that solves your problem is tantamount to harassment under the Electron Code of Conduct.\nI would ask that in the future you follow the standard issue process and if a maintainer closes your issue they are almost certainly correct in doing so.. @vaidyaanand The error log you posted comes from nothing to do with electron-packager, without conclusive proof that this is a packager issue this appears to be an issue with some other dependency in your build / installation logic.. @vaidyaanand You literally posted a Squirrel.Windows error log, zero ways to reproduce on the electron-packager issue tracker (wrong project) without even filling in the issue template completely.  Open source is not free support, we provide this package and help people out where we can.  You seem to be under the misimpression that you are somehow entitled to support and that switching packagers will somehow make us come back begging to help you.\nIt won't\nI do hope that you solve your issue and that in the future you communicate with open source projects in a nicer more mutually respectful way. https://github.com/electron-userland/electron-packager/blob/master/docs/api.md#executablename. npm doesn't pass spare args through by default, use npm run build -- --overwrite. Answered here --> https://github.com/electron/electron/issues/14794\nPlease do not raise issues in multiple repos and please follow the issue template for given repositories.  \"why?\" is not very helpful \ud83d\ude04 . @poojas2288 I'm working on notarization support for the Electron packaging workflow this week.  Luckily I think the bit you need just landed inside electron-osx-sign.\nThere is a new hardenedRuntime flag for electron-osx-sign that does what you need. \n See the README of https://github.com/electron-userland/electron-osx-sign\nI'm also working on electron-notarize which will automate the whole process of notarizing an Electron app.  (There isn't actually much Electron specific stuff, it'd work for any .app file really).\nClosing this out as notarization is being brought to the table by that module not electron-packager itself.\n. @poojas2288 Can you provide a minimal sample app that reproduces that issue? If hardened runtime is causing Electron to crash that's something we can look at, but only if there's a minimal repro for the crash \ud83d\udc4d . @malept Seems legit to me, thanks for picking that up \ud83d\udc4d . > I'm wondering whether there's a way to change the value of the TMPDIR environment variable on an electron-packager build?\nThat's not how environment variables work, they aren't set in an application, they are read from the environment at runtime.  You're best bet as a workaround is probably something like this in your main file.\njs\nconst expectedTmpDirValue = resolveThingy('$XDG_RUNTIME_DIR/$APP_ID/')\nif (process.env.TMPDIR !== expectedTmpDirValue) {\n  childProcess.spawn(process.execPath, process.argv, {\n    env: {\n      ...process.env,\n      TMPDIR: expectedTmpDirValue\n    },\n    detached: true,\n  });\n  process.exit(0);\n}\nThat should (untested) restart your app quickly at runtime with the env var you want.. yarn upgrade electron-forge will make yarn update all deps of forge. Are you suggesting then that we should do\njs\nseries([extract(zipPath, {dir: buildDir})].concat(newFunctions))\n. My counting skillz are amazing :+1: \n. Ah got it :+1: \nDone\n. Don't bump this version yourself \ud83d\udc4d . This option should probably go inside win32metadata IMO. Can we use this in the above test as well. If this helper takes in the timeout as well we can remove more code duplication below for the hooks that instantly resolve. This is now in the wrong place. ",
    "englishextra": "@havenchyk electron-builder kamikadzed itself. Orchestrating turned out not to be enough. NSIS was rejected. Couldn't build IOS installers on Windows machines (I remember lots of issues notifying me via email subscription), and RPM's had to be rpmbuilt manually on Linux. So what it was for then.\n@MarshallOfSound electron-packager is condemned, and sooner or later I should and need to learn the -forge tool?\nGood luck, At least, thanks for electron-packager doing its work, as for installers, I could make it on my own.\n. @malept electron-packager is my only concern. The rest will be worked out. Yeah-yeah I wouldn't be happy if it is absorbed by some -forge monster. Thanks for your work. Good tool.. Why switching the issue into symlinks discussion?\nI have same failure building for darwin x64 \nThe electron-v0.35.0-darwin-x64.zip has been downloaded succefully and then cmd on win 10 exits.\n. I would like to hear from anyone who managed to build darwin on win. I failed on win xp 32 win 8.1 64bit and on win 10. This is not that way as it seems from the first glance. If you follow all the issues from electron userland you will get the answer to your question. There are lots of ambitions out there fighting there, and you as a dev get just some of it what has been promised. As an example - electron-builder is a complete misunderstanding. Just dont use it, and you will save time. When you build an app that is to be compatible between browsers and electron and nwjs and adobe phonegap you will see what it costs. So every time I read an issue about building darwin, I know the answer would be. Just dont take the answers of the devs of electron to close. Test it on your own.\nBasically, the workaround is to build packages targeted for OS X on non-Windows host platforms.\nWhy should they.\n. .electronignore filename isnt obvoius whether its for running or building \n. @yeganehaym It would be useful to see what fixes made your app finally start\n. @yeganehaym Thanks for describing your fix. I just use electron-packager and plan to update from older version. That's why I asked you to share your experience.\n. @malept @neonhomer I had the same issue today - no error and no compiling (after having compiled with 1.4.10) - cmd stayed opened. When manually cleaned windows temp dir, installed 1.4.13, cleaned the\nC:\\Users\\<...>\\AppData\\Local\\Temp\nit worked.\n8.4.0\n1.4.13\nBut at the end of each compilation the cmd wont close and you have to manually clean the above mantioned temp dir - ...\\Temp\\electron-packager, then the cmd closes. So the bug is not gone.\nThe 13 number?. @SimplyAhmazing \nJust to share, this is how I handle the ignore regexp:\nelectron-packager ./www englishextra-app --out=./.dist --ignore=\"(\\/fonts\\/englishextra-ui-icons-fontfacekit\\/demo\\.css|\\/fonts\\/englishextra-ui-icons-fontfacekit\\/fontface\\.css|\\/fonts\\/englishextra-ui-icons-fontfacekit\\/demo\\.html|\\/fonts\\/englishextra-ui-icons-fontfacekit\\/demo\\.js|\\/libs\\/koala-config\\.json|\\/libs\\/englishextra-ui\\/css\\/bundle\\.css|\\/libs\\/englishextra-ui\\/js\\/bundle\\.js|\\/libs\\/contents\\/css\\/bundle\\.css|\\/libs\\/contents\\/img\\/contents-banner-aids-640x336\\.svg|\\/libs\\/contents\\/img\\/contents-banner-articles-640x336\\.svg|\\/libs\\/contents\\/img\\/contents-banner-cup-640x336\\.svg|\\/libs\\/contents\\/img\\/contents-banner-ege-640x336\\.svg|\\/libs\\/contents\\/img\\/contents-banner-gg-640x336\\.svg|\\/libs\\/contents\\/img\\/contents-banner-gia-640x336\\.svg|\\/libs\\/contents\\/img\\/contents-banner-grammar-640x336\\.svg|\\/libs\\/contents\\/img\\/contents-banner-irrverbsscr-640x336\\.svg|\\/libs\\/contents\\/img\\/contents-banner-languagelink-640x336\\.svg|\\/libs\\/contents\\/img\\/contents-banner-more-640x336\\.svg|\\/libs\\/contents\\/img\\/contents-banner-oup-640x336\\.svg|\\/libs\\/contents\\/img\\/contents-banner-reading-640x336\\.svg|\\/libs\\/contents\\/img\\/contents-banner-rosolymp-640x336\\.svg|\\/libs\\/contents\\/img\\/contents-banner-tests-640x336\\.svg|\\/libs\\/contents\\/img\\/contents-banner-transcripts-640x336\\.svg|\\/libs\\/contents\\/img\\/sprite\\.fw\\.png|\\/libs\\/contents\\/img\\/\\.mogrify\\.bat|\\/libs\\/contents\\/js\\/bundle\\.js|\\/libs\\/print\\/css\\/print\\.css|\\/res|\\.dir\\.bat|\\.dir\\.txt|\\.remove-modules\\.sh|\\/config\\.xml|\\/favicon\\.ico|\\/icon\\.icns|\\/icon\\.png)\" --overwrite --prune --platform=win32 --arch=x64 --download.cache=./.electron --icon=./www/favicon.ico --version=1.2.2\n. @malept escaping /\u2014 just a useful habbit\n. Huh. So building a dummy app didn't help?\n. @develar Stop that. I wouldn't recommend electron-builder tool at all. Why? The authors are following trends and politics - not the user expectations.\n. Can this be of help https://github.com/electron/electron/issues/3708\nALso \n--ignore=node_modules/electron-*\nshouldn't that be a regexp?\n. @malept thanks for clarification. Also it seems some module has incompatible checking environment Js wrapper.\n. yeah-yeah build\": \"electron-packager . --platefrom=linux --arch=x64 MyApp\"\n. Gosh\nFor Drawing Number 2.\nFrom 9 o'clock in the\nmorning until 11 o'clock...\n... the lower lawns of the house...\n... including the formal\ngarden will be kept clear.\nNo window in the upper part\nof the house will be opened...\n... closed or otherwise disturbed.\n. This module requires Node.js 4.0 or higher to run.\nhttps://github.com/electron-userland/electron-packager\nand the log says\nnpm ERR! npm v3.10.8\n. aha then it says Make sure you have the latest version of node.js and npm installed.\n. Can you provide the full line of your command in terminal\n. Would be nice to see (the repo) what you are building to further investigate.\n. What is your command in terminal. The line, please\n. malpert this wont help\n. are you reffering to \"electron-packager . --platefrom=linux --arch=x64 MyApp\"\n. thanks I believe it's because neither you nor me have a clear view of what the source structure of the app is\n. This looks like a recreating on and on. weird.\n. Yeah, malept, a recursion is obvoius, you are right\n. @malept \nI cloned electron-quick-start on windows 10 desktop. \nhttps://github.com/electron/electron-quick-start\nThen in cmd:\nnpm install\n```\nC:\\Users\\serguei\\Desktop\\electron-quick-start>npm install\n\nelectron@1.4.15 postinstall C:\\Users\\serguei\\Desktop\\electron-quick-start\\node_modules\\electron\nnode install.js\n\nelectron-quick-start@1.0.0 C:\\Users\\serguei\\Desktop\\electron-quick-start\n-- electron@1.4.15\n  +-- electron-download@3.2.0\n  | +-- debug@2.6.0\n  | |-- ms@0.7.2\n  | +-- fs-extra@0.30.0\n  | | +-- graceful-fs@4.1.11\n  | | +-- jsonfile@2.4.0\n  | | +-- klaw@1.3.1\n  | | +-- path-is-absolute@1.0.1\n  | | -- rimraf@2.5.4\n  | |-- glob@7.1.1\n  | |     +-- fs.realpath@1.0.0\n  | |     +-- inflight@1.0.6\n  | |     | -- wrappy@1.0.2\n  | |     +-- minimatch@3.0.3\n  | |     |-- brace-expansion@1.1.6\n  | |     |   +-- balanced-match@0.4.2\n  | |     |   -- concat-map@0.0.1\n  | |-- once@1.4.0\n  | +-- home-path@1.0.3\n  | +-- minimist@1.2.0\n  | +-- nugget@2.0.1\n  | | +-- pretty-bytes@1.0.4\n  | | | +-- get-stdin@4.0.1\n  | | | -- meow@3.7.0\n  | | |   +-- camelcase-keys@2.1.0\n  | | |   |-- camelcase@2.1.1\n  | | |   +-- decamelize@1.2.0\n  | | |   +-- loud-rejection@1.6.0\n  | | |   | +-- currently-unhandled@0.4.1\n  | | |   | | -- array-find-index@1.0.2\n  | | |   |-- signal-exit@3.0.2\n  | | |   +-- map-obj@1.0.1\n  | | |   +-- normalize-package-data@2.3.5\n  | | |   | +-- hosted-git-info@2.1.5\n  | | |   | +-- is-builtin-module@1.0.0\n  | | |   | | -- builtin-modules@1.1.1\n  | | |   |-- validate-npm-package-license@3.0.1\n  | | |   |   +-- spdx-correct@1.0.2\n  | | |   |   | -- spdx-license-ids@1.2.2\n  | | |   |-- spdx-expression-parse@1.0.4\n  | | |   +-- object-assign@4.1.1\n  | | |   +-- read-pkg-up@1.0.1\n  | | |   | +-- find-up@1.1.2\n  | | |   | -- read-pkg@1.1.0\n  | | |   |   +-- load-json-file@1.1.0\n  | | |   |   | +-- parse-json@2.2.0\n  | | |   |   | |-- error-ex@1.3.0\n  | | |   |   | |   -- is-arrayish@0.2.1\n  | | |   |   | +-- pify@2.3.0\n  | | |   |   |-- strip-bom@2.0.0\n  | | |   |   |   -- is-utf8@0.2.1\n  | | |   |-- path-type@1.1.0\n  | | |   +-- redent@1.0.0\n  | | |   | +-- indent-string@2.1.0\n  | | |   | | -- repeating@2.0.1\n  | | |   | |-- is-finite@1.0.2\n  | | |   | -- strip-indent@1.0.1\n  | | |-- trim-newlines@1.0.0\n  | | +-- progress-stream@1.2.0\n  | | | +-- speedometer@0.1.4\n  | | | -- through2@0.2.3\n  | | |   +-- readable-stream@1.1.14\n  | | |   |-- isarray@0.0.1\n  | | |   -- xtend@2.1.2\n  | | |-- object-keys@0.4.0\n  | | +-- request@2.79.0\n  | | | +-- aws-sign2@0.6.0\n  | | | +-- aws4@1.5.0\n  | | | +-- caseless@0.11.0\n  | | | +-- combined-stream@1.0.5\n  | | | | -- delayed-stream@1.0.0\n  | | | +-- extend@3.0.0\n  | | | +-- forever-agent@0.6.1\n  | | | +-- form-data@2.1.2\n  | | | |-- asynckit@0.4.0\n  | | | +-- har-validator@2.0.6\n  | | | | +-- chalk@1.1.3\n  | | | | | +-- ansi-styles@2.2.1\n  | | | | | +-- escape-string-regexp@1.0.5\n  | | | | | +-- has-ansi@2.0.0\n  | | | | | -- supports-color@2.0.0\n  | | | | +-- commander@2.9.0\n  | | | | |-- graceful-readlink@1.0.1\n  | | | | -- is-my-json-valid@2.15.0\n  | | | |   +-- generate-function@2.0.0\n  | | | |   +-- generate-object-property@1.2.0\n  | | | |   |-- is-property@1.0.2\n  | | | |   +-- jsonpointer@4.0.1\n  | | | |   -- xtend@4.0.1\n  | | | +-- hawk@3.1.3\n  | | | | +-- boom@2.10.1\n  | | | | +-- cryptiles@2.0.5\n  | | | | +-- hoek@2.16.3\n  | | | |-- sntp@1.0.9\n  | | | +-- http-signature@1.1.1\n  | | | | +-- assert-plus@0.2.0\n  | | | | +-- jsprim@1.3.1\n  | | | | | +-- extsprintf@1.0.2\n  | | | | | +-- json-schema@0.2.3\n  | | | | | -- verror@1.3.6\n  | | | |-- sshpk@1.10.2\n  | | | |   +-- asn1@0.2.3\n  | | | |   +-- assert-plus@1.0.0\n  | | | |   +-- bcrypt-pbkdf@1.0.0\n  | | | |   +-- dashdash@1.14.1\n  | | | |   | -- assert-plus@1.0.0\n  | | | |   +-- ecc-jsbn@0.1.1\n  | | | |   +-- getpass@0.1.6\n  | | | |   |-- assert-plus@1.0.0\n  | | | |   +-- jodid25519@1.0.2\n  | | | |   +-- jsbn@0.1.0\n  | | | |   -- tweetnacl@0.14.5\n  | | | +-- is-typedarray@1.0.0\n  | | | +-- isstream@0.1.2\n  | | | +-- json-stringify-safe@5.0.1\n  | | | +-- mime-types@2.1.14\n  | | | |-- mime-db@1.26.0\n  | | | +-- oauth-sign@0.8.2\n  | | | +-- qs@6.3.0\n  | | | +-- stringstream@0.0.5\n  | | | +-- tough-cookie@2.3.2\n  | | | | -- punycode@1.4.1\n  | | | +-- tunnel-agent@0.4.3\n  | | |-- uuid@3.0.1\n  | | +-- single-line-log@1.1.2\n  | | | -- string-width@1.0.2\n  | | |   +-- code-point-at@1.1.0\n  | | |   +-- is-fullwidth-code-point@1.0.0\n  | | |   |-- number-is-nan@1.0.1\n  | | |   -- strip-ansi@3.0.1\n  | | |-- ansi-regex@2.1.1\n  | | -- throttleit@0.0.2\n  | +-- path-exists@2.1.0\n  | |-- pinkie-promise@2.0.1\n  | |   -- pinkie@2.0.4\n  | +-- rc@1.1.6\n  | | +-- deep-extend@0.4.1\n  | | +-- ini@1.3.4\n  | |-- strip-json-comments@1.0.4\n  | +-- semver@5.3.0\n  | -- sumchecker@1.3.0\n  |-- es6-promise@4.0.5\n  -- extract-zip@1.6.0\n    +-- concat-stream@1.5.0\n    | +-- inherits@2.0.3\n    | +-- readable-stream@2.0.6\n    | | +-- core-util-is@1.0.2\n    | | +-- isarray@1.0.0\n    | | +-- process-nextick-args@1.0.7\n    | | +-- string_decoder@0.10.31\n    | |-- util-deprecate@1.0.2\n    | -- typedarray@0.0.6\n    +-- debug@0.7.4\n    +-- mkdirp@0.5.0\n    |-- minimist@0.0.8\n    -- yauzl@2.4.1-- fd-slicer@1.0.1\n        `-- pend@1.2.0\nC:\\Users\\serguei\\Desktop\\electron-quick-start>\n\nnpm start\n```\n. @malept I was not going to reproduce the problem. I just confirmed that quick start works and placed the log of cmd for you to see the deps so that you can have the picture. The case is particular so the dev only knows where to dig into.. @AhadCove \nuse .ico not .png for windows\napp.on(\"ready\", function () {\n    // create the window\n    mainWindow = new BrowserWindow({\n            width : 844,\n            height : 640,\n            icon : \"favicon.ico\",\n            title : \"My app\"\n        });`\nIf you launch electron ./index.js higher when www folder\nand iindex.js says to launch\nmainWindow.loadURL(\"file://\" + __dirname + \"/www/index.html\");\nyou should have two same .ico:\n./favicon.ico\n./www/favicon.ico\non windows for nwjs use .png icon, not .ico\nThat's for development\n. @malept It's not clear \n- is it already installed electron-packaged app\n- or is it only compiled not packed into installer\nAlso clear C:\\Users...\\AppData\\Local\\IconCache.db\nAnd drag compiled exe to desktop to see if default electron icon changes to that of yours. @bartbouten I guess that's because of multiple  --ignore. @Leonardonline you need to specify --download.cache=your_cache_folder_path and have already packaged all platforms you need so that you should have electron zip files in that folder, then you can copy that folder to non connection machine's project folder. @kasperfred electron-packager needs your global Node 4.0 or above to package your app\nAnd electron comes with its own nodejs which is important for your app, and not for packager.\nSo, I guess the package.json should be demonstrated here.\n@malept Do I miss smth?. @malept Pretty sure you got me wrong, the same I did say above - it's global Node needs updating.\nAs for package.json I asked to have a look at\u2014that's because:\n5 error install Couldn't read dependencies\nBTW - I have two projects dependant on electron-packager \u2014one is of my customer and the other one is of my own\u2014a testing platform. So I react only in cases that are sensible in my workflow.\nThere are other stuff that I am worried about. So.... yeah.. @malept You're right - I didn't notice the last lines. I should learn to read debug-logs.\nThanks.. https://sourceforge.net/projects/sox/files/sox/14.4.2/\nI need to install them with Electron App\nHow do you mean \u2018with Electron App\u2019?. @askucher Learn to formulate what you want to achieve, when come and here pose your question. You didn't specify what is your app about to do, and what is it in aid of. And You come here and say something unspecified and downvote people who try to assist you.. @malept Hope this applies to issuereporters as well.. >>This issue reporter did not violate the code of conduct.\nWhich I didn't either. It was me who got arrogance here. Let's face it. I am here to share my experience and nothing else.. @malept  Thanks.\nI guess, This is not about the code of conduct, it's about the Electron project spirit.\nThis is the last comment I'm going to post on this matter.\nNever say never.. Can  you send the exact error message in CMD\nYou should also install electron itself locally:\nnpm install electron --save-dev\nIt seems that you sytem path variable is dirty.\nWhat is the output of $env:PSModulePath in PS, and are all paths well escaped and delimited\nAnd why are you  building from PS as admin, and not as local user from cmd or with .bat file, just  curious?. There are lots of things that can cause such an error, For instance you have a space in your project folder name and you are sending command from PS. Broken global path variable, which you have to debug by yourself, etc. There's nothing I can do about it. It's your app, and your workflow, so it is you who is to provide full info of your paltform and your project repo. Not in the manner like patient examined by the doctor.\nBTW I tested electron-packager globally and locally with cmd and PS as admin and as user, and it worked. My machine is Windows 10 x64.. Why do you use PS. Go to your project folder in cmd.exe and send commnd\nelectron-packager . --all --electron-version=1.4.15\nAre you debugging your PS, or trying to figure out why electron-packager is not recognized?\nLocalized Windows 7 x64 and with PowerShell is a tricky tool for development.\n$PSVersionTable.PSVersion on Windows 10 x64:\n```\nMajor  Minor  Build  Revision\n\n5      0      10586  494\n. Install electron and electron-packager globally:\nnpm install -g electron electron-packager\n```\nThis will install electron 1.4.15 and electron-packager 8.5.1 into your user folder, not in project folder:\nC:\\Users\\Administrador\\AppData\\Roaming\\npm\nor it can be some Documents and Settings, anyway you dont have to bother about this folder and touch anything there.\nDelete if present node_modules folder in your project folder.\ngo in cmd. exe to your project folder:\nelectron-packager . --all --electron-version=1.4.15\nDont use PS, use cmd.exe. --electron-version=1.4.15\nsome other (ie., first two) args can be wrong in your line\nusage.txt. usage.txt check the order of the arguments at the top of the usage.txt\nUPD And the whole usage.txt, If I may say so.. I'd suggest to download this example and use it as a template for a starter:\nelectron-quick-start\nThis is my current project CLI command:\nelectron-packager ./www englishextra-app --out=./.dist --ignore=\"(\\/\\.dir\\.bat|\\/\\.dir\\.txt|\\/\\.npm-install\\.bat|\\/\\.npm-remove-local-modules\\.bat|\\/\\.npm-remove-local-modules\\.sh|\\/\\.npm-start\\.bat|\\/cordova\\.js|\\/cdn\\/\\.dir\\.bat|\\/cdn\\/\\.dir\\.txt|\\/libs\\/koala-config\\.json|\\/libs\\/englishextra-app\\/\\.autoprefixer\\.bat|\\/libs\\/englishextra-app\\/\\.babel\\.bat|\\/libs\\/englishextra-app\\/\\.beautify-css\\.bat|\\/libs\\/englishextra-app\\/\\.cleancss\\.bat|\\/libs\\/englishextra-app\\/\\.closure-compiler\\.bat|\\/libs\\/englishextra-app\\/\\.compile\\.bat|\\/libs\\/englishextra-app\\/\\.node-sass\\.bat|\\/libs\\/englishextra-app\\/\\.uglifyjs\\.bat|\\/libs\\/englishextra-app\\/css\\/bundle\\.css|\\/libs\\/englishextra-app\\/css\\/bundle\\.min\\.css\\.map|\\/libs\\/englishextra-app\\/js\\/bundle\\.js|\\/libs\\/englishextra-app\\/js\\/bundle\\.min\\.js\\.map|\\/libs\\/englishextra-app\\/img\\/\\.mogrify\\.bat|\\/libs\\/englishextra-app\\/img\\/contents-banner-aids-640x336\\.svg|\\/libs\\/englishextra-app\\/img\\/contents-banner-articles-640x336\\.svg|\\/libs\\/englishextra-app\\/img\\/contents-banner-cup-640x336\\.svg|\\/libs\\/englishextra-app\\/img\\/contents-banner-ege-640x336\\.svg|\\/libs\\/englishextra-app\\/img\\/contents-banner-gg-640x336\\.svg|\\/libs\\/englishextra-app\\/img\\/contents-banner-gia-640x336\\.svg|\\/libs\\/englishextra-app\\/img\\/contents-banner-grammar-640x336\\.svg|\\/libs\\/englishextra-app\\/img\\/contents-banner-irrverbsscr-640x336\\.svg|\\/libs\\/englishextra-app\\/img\\/contents-banner-languagelink-640x336\\.svg|\\/libs\\/englishextra-app\\/img\\/contents-banner-more-640x336\\.svg|\\/libs\\/englishextra-app\\/img\\/contents-banner-oup-640x336\\.svg|\\/libs\\/englishextra-app\\/img\\/contents-banner-reading-640x336\\.svg|\\/libs\\/englishextra-app\\/img\\/contents-banner-rosolymp-640x336\\.svg|\\/libs\\/englishextra-app\\/img\\/contents-banner-tests-640x336\\.svg|\\/libs\\/englishextra-app\\/img\\/contents-banner-transcripts-640x336\\.svg|\\/libs\\/englishextra-app\\/img\\/sprite\\.fw\\.png|\\/libs\\/englishextra-app\\/scss|\\/res|\\/config\\.xml|\\/favicon\\.ico|\\/icon\\.icns|\\/icon\\.png)\" --overwrite --prune --platform=win32 --arch=ia32 --download.cache=./.electron --icon=./www/favicon.ico --electron-version=1.4.15\nMost of the args are optional. You are free to tune the packaging process.\n\nEDIT: I checked for path error, so i tried to write a bad path and electron-packager give me a not such file error, so i think the 2 first args are good\n - First should be a source dir path, and you have a scriptfile path \n - app.exe - becomes your app name, which is not what you intended, do you?\n - The rest seem to be OK. \n",
    "jits": "Is there a way to explicitly include electron-prebuilt as a dependency in my built app? I'm using child_process to spawn worker processes for data processing, by calling on the electron executable (via electron = require('electron-prebuilt')). Which fails in my built app.\nAlternatively is there a better way to spawn child processes that run a simple NodeJS script?\n. @malept \u2013 thanks for the suggestion. I have considered Web Workers, but was having trouble getting any decent results (running 10K+ jobs) with them (possibly due to my lack of awareness of how it all fits). Also, I'm relying on some node modules that may not easily run in the browser, and using electron.remote is not possible in workers (and could be a major performance blocker anyway).\nAs for IPC'ing + spawning BrowserWindows \u2013 another reasonable option, but also may not be performant enough. More importantly, I want to avoid writing my own job management library and instead rely on something that works within the community. So, using https://github.com/bjrmatos/electron-workers works really well for my use case\u2026 except for the built app. Under the hood it does electron = require('electron-prebuilt') or looks for a system level electron (is it possible to install that?)\nAny more suggestions to allow my app to call on an electron executable are greatly appreciated!\n. Thanks @malept \u2013 good to know. Alas I'm currently using the CLI. May wrap this in a gulp task or something.\n. ",
    "ccorcos": "Only bad part of this is you'll have to re-install when you prune. Here's what I'm doing:\n``` sh\nmake a regex of node_modules to ignore\nignores=npm ls --dev --parseable\nget the package name\nignores=$(echo $ignores | sed -e 's@.*/@@')\nskip the first line\nignores=echo $ignores | awk '{if(NR > 1) print $0}'\njoin with a pipe\nignores=${ignores//$'\\n'/'|'}\nbuild mac distibutable app\n./node_modules/.bin/electron-packager . \"Dev Tool\" \\\n  --platform=darwin --arch=x64 --version=0.35.6 \\\n  --ignore=\\\"$ignores\\\" \\\n  --app-bundle-id \"com.dev-too.appl\" --app-version 0.1.0 \\\n  --out ./built\n``\n.zsh: command too long` :(\n. well then there we go!\n. ",
    "zeke": "It seems like the best option is use a default that will work for all users. It looks like the --all option shipped in #40 may have allayed some of the config frustration. @sindresorhus are you cool with closing this?\n. This is an issue with edge. You may want to look into using a specific Electron version. See https://www.npmjs.com/package/edge-atom-shell\n. EROFS means you're trying to install on a read-only filesystem. It's not possible to address this in electron-packager. Gonna close this out.\n. I have a fix in place and the test suite is passing for me locally but CI is failing.\nI removed get-package-info because I was hitting an issue described right in its readme: \n\nThis is an error from resolve that means it was not able to find all the requested props. It would be nice to have a more descriptive error but there's no way to do that until this PR is merged.\n\nI changed that code to just require the package.json file in the given directory, then use lodash.get to go spelunking for deep properties.\nI will dig into the CI failures tomorrow.\n. Okay this is ready for review.\nThe previous push passed on 5 of 6 CI boxes; hopefully we'll see all green this time. (CI takes about an hour)\n. Happy to squash commits if that is still the convention here.\n. Thanks for all the feedback, @malept. I pushed up some changes to the docs and DRY'd things a bit.\nI feel like the npm install stuff can live without being optimized for now.\nAs for the CI, the tests definitely seem flaky. I keep seeing 5/6 passed builds, but the failing environment is not consistently the same. Let's see what happens on this go around.\n. Travis results from three recent pushes (without meaningful code changes):\n\n\n\n. Squashed it all down into a single commit. Pretty sure this is ready to go. Let's defer on improving the test suite for another PR.\n. >  except for that one new infer test\nWhat's wrong with it?\n. Simplified the test in https://github.com/electron-userland/electron-packager/pull/435/commits/61ba66c627216f240f5d2b9367f39359b60b2d7e (good call), and re-squashed commits.\n. Thanks for helping out, @malept. Landed in 7.5.0\n. Thanks, @malept \n. Reached out to @substack to see about getting that upstream-upstream resolve thing fixed. If not, we could update get-package-info to depend on a fork of resolve...\n. short term fix: https://github.com/electron-userland/electron-packager/pull/445\n. ack. investigating.\n. Following these steps:\nn 4.4.7\ngit checkout tags/v7.4.0\nrm -rf node_modules\nnpm i\nnode test/basic.js\nI have run the tests several times and am not able to produce an error.\n. Thanks for the help getting this fixed.\n. Now using ES6 string interpolation. I was avoiding it because I thought maybe this project needed to work on older versions of node. But no!\n\"engines\": {\n    \"node\": \">= 4.0\"\n  }\n. Thanks for the patch, @rahatarmanahmed. I merged #446. If this passes CI, let's ship it!\n. Added news, squashed. Last CI run passed on all six builds. This is ready. :fingers_crossed:\n. Rerunning that build. Pretty sure this is just more flakiness.\n. > Doesn't really fix #441 then, right?\nThe flakiness on Travis has not been unique to Node 4. I was seeing it on all node versions and platforms. I think this is ready to \ud83d\udea2 \n. @malept what do you say we ship this since it is definitely an improvement to a known bug in the latest release? We can address the flakiness if it turns out to be an issue.\n. \ud83c\udf89 \n. We put electron-prebuilt in dependencies and devDependencies in that fixture to ensure that electron will always take precedence, regardless of how electron-prebuilt is installed. But if that is causing issues we can't get around, we should probably just use electron-prebuilt once in the package.json file.\n. @rahatarmanahmed I recall merging your PR and then have to back out the changes. I forget the exact details but I think this was the reason:\n\nSee https://github.com/electron-userland/electron-packager/pull/445#r73960207\n. @rahatarmanahmed not sure what happened then. Feel free to bring back changes as you see fit. If the build passes, I won't object. :)\n. Nice! Are you planning to land this in 8.0.0?\n. How come CI is not running on this PR?\n. Cool. Is this ready to ship, then?\n. Looks like I'm late to the party, but why does this new regex start with a backslash? All the others start with a slash...\n'\\\\.o(bj)?$'\n. got it. thanks.\n. > looking at parent package.json's is a required feature for project structures where app code is in a subdirectory with its own package.json.\n\u261d\ufe0f great point.\n\nI'm OK with you implementing option 1 in the way you describe.\n\n\ud83d\udc4d \n. Thanks for persevering, @rahatarmanahmed \ud83d\udc4a \n. Cool. Will fix it once I get CI passing.\n. Pushing all of them into the same props array was what I started with, but then we don't know if the resulting version was derived from electron or electron-prebuilt. Hence the separation.\n. Because resolve needs a path:\njs\nresolve(packageName, {\n  basedir: path.dirname(result.source[`dependencies.${packageName}`].src)\n}\n. Why did you end up taking the brew installation out?\n. truthy?\n. ",
    "klaemo": "app-version could be inferred from the package.json version field as well, I think. That way building a correctly version app would be as simple as npm version patch|minor|major && npm run build (assuming npm run build does the right thing).\n. ",
    "rahatarmanahmed": "+1, I might take a stab at this. Should it check for package.json in the cwd? Or search upwards?\nAlso most likely electron-packager will be in devDependencies, but should it also try and fallback to dependencies if it can't find that?\n. A good way to avoid the problem in the first way is to keep looking in higher in the tree if the first package.json you find doesn't have an electron-prebuilt dependency or name.\n. Do you mean to include dependencies in the build or to use the electron-prebuilt version in dependencies?\n. We already have --prune, so if node_modules is in your src path, you can use that to ignore devDependencies.\n. I haven't yet added tests or documentation changes yet because I want to be sure these defaults are okay, first.\n. Someone brought to my attention that some more options could be inferred from package.json, like \"os\" and \"cpu\". I'll probably leave that for someone else to implement, as I don't need it right now, and trying to figure out how to resolve the whitelist/blacklist of those properties is non-trivial.\n. I initially did it this way because I thought it would be \"more correct\", but you bring up good points. I'll look into npm dedupe behavior (especially what's coming in npm@3), but if everything checks out I'll change it to grab the version from electron-prebuilt's package.json.\n. I think one way to avoid the npm dedupe issue is to use the same code I used to search upwards for package.json to also search for node_modules/electron-prebuilt/package.json. The idea being that even if electron-prebuilt is deduped and is installed in a parent directory, the search will be guaranteed to find it?\nFrom my understanding of deduping, that should work. But it's late so I might be missing something obvious.\n. Alright, changes have been made as described above. Works fine for me, tests still pass. Later I'll add tests and documentation after some eyes have checked it.\n. Added tests and documentation, rebased everything into one commit. This PR should be ready now if no one has issues with it.\n. @maxogden ah, didn't think to look for a package for that! Made the change and the code is much simpler now.\n. Done.\n. Sorry, I didn't notice that last comment! I'm rebasing this PR with the latest master and making sure tests pass.\nAs far as testing getNameAndVersion, perhaps it'd be best to put that kind of logic in a separate module with tests ? (i've seen the light RE: small module philosophy.)  I'm thinking a get-package-info module that will traverse parent package.json's as in this PR, returning requested properties. \n. @maxogden @malept are the tests currently passing on master? Strange to see travis failing on node 0.12 and 5, but not 4.x. Seems like previous documentation only PRs have had failing tests, too?\n. Ah, looks like the issue is that tests are timing out before they can finish. Raising the timeout fixed that on my end but I don't know if there was a reason for the timeout being 15s. \n. Tests are passing, hooray!\n- Refactored out some of the logic into a separate, well-tested module get-package-info.\n- Increased timeout to 30 seconds so tests don't fail prematurely\n- Fixed a small annoyance where stopping tests mid-test will leave files in test/work and screw up future tests. Now it runs rimraf test/work before starting a test.\n. Is the productName from the same package.json as name? I have a test in get-package-info to make sure it behaves this way:\nhttps://github.com/rahatarmanahmed/get-package-info/blob/master/test/node_modules/we/need/to/go/deeper/package.json\nhttps://github.com/rahatarmanahmed/get-package-info/blob/master/test/test.js#L49-L50\nI've tested my own app and it prefers productName over name. Maybe link to your package.json?\n. @malept what's your opinion on having a flag like --no-rcedit like @matix2267 suggests? Currently hitting a wall w/ my ops team because they can't/won't get wine on our Jenkins servers, and we're not using any options that require rcedit other than the inferred app-version. It's a whole lot of pain for our small internal tool.. @matix2267 oh wow that's a real nice way to handle this edge case. I put this in a package so anyone else who doesn't want to use wine can just have this in their package.json (if they use npm scripts).. @malept sure, done!. I'd be happy to accept a PR for https://github.com/rahatarmanahmed/get-package-info/issues/2, I think that's the better, more immediately fixable solution than getting substack to merge the resolve PR.\n. Have there been unpredictable results? AFAIK the only issue I've heard of is the unhelpful error that is returned in that case where the version can't be found in any package.json files. That is something that can be addressed in https://github.com/rahatarmanahmed/get-package-info/issues/21\n. @malept I've just added debug messages so we can use  DEBUG=get-package-info for more info on what files are being checked. It's a patch release so should be included in new installs.\nI'm working on knocking the error msg issue out by using read-pkg-up package instead of resolve.\n. Ok, published 1.0.0 of get-package-info, which now returns a better error that lets us know when props can't be found.\nFrom the README:\n\nIf all the properties cannot be found in parent package.json files, then getPackageInfo() will reject it's promise (or callback with err argument) with an Error. err.missingProps will have an array of the properties that it could not find, and err.result will contain all the props that were found.\nIf any other error occurs(like I/O or runtime errors), getPackageInfo() will reject with that error itself.\n\nI'll work on a PR using this new info later tonight.\n. @zeke I'm noticing that my changes back from https://github.com/electron-userland/electron-packager/pull/446/files removing the 2nd call to getPackageInfo didn't end up in master. Was it lost in the rebase or was there a reason to keep the 2nd call?\n. @zeke I did add info to the response as to which prop/package it comes from, so that should have been correct.\n. Cool cool. Another question: seems like y'all never did get to writing a test for if both --app-version and version in package.json are not available. What is supposed to be the behavior for that case? I think currently it exits w/ an error. If it's not a required option, it should now be possible to continue the build even if it fails to find version. Is that something we want?\n. Made changes from code review input. Looked into the test coverage, and it looks like the issue is stemming from the reason why @zeke opened #461 in the first place: it's picking up values from electron-packager's own package.json.\n@malept's suggestions:\n\n\nCopy a fixture to a temporary directory (so that the electron-packager package.json doesn't get detected by get-package-info) - and even then, there could be inconsistent failures on dev machines where someone puts a package.json in their root temporary directory\nRefactor that code to stop at the first package.json - I'm generally in favor of this method, but the concern was that it would break existing code (even though that wasn't an explicit feature)\n\n\nThe issue with option 2 is that the feature of looking at parent package.json's is a required feature for project structures where app code is in a subdirectory with its own package.json. The idea is that the app package.json would have the productName, and the parent package.json would have a devDependency on electron. Not sure what best practice is nowadays, but I imagine a good number of projects do it this way.\nI'm not so sure the issue in option 1 of having a package.json above the temp directory is going to be a huge issue. That seems like it'd be an extremely rare occurrence. If we need to, we can explicitly check if there is a stray package.json and fail the test w/ an informative error msg.\n. love too have tests fail at random on CI\nI've run the failing tests on loop on my laptop but I can't figure out what's causing those rare failures. Otherwise, the code is ready to be re-reviewed. Hopefully something pops out during review that tells us about the failures.\n. If you wanna move the logic from get-package-info into electron-packager, that's fine by me. I initially made it a separate package so it wouldn't muck up the code here, and could be unit tested as well as tested thru electron-packager's integration tests.\n(Also I could have sworn the tests were failing before? I don't know how to avoid the coverage decrease, since it's the line that's triggered on some kind of I/O failure looking for package.jsons.\n. @malept moved the electron package.json reading into its own function, lmk if you have any better ideas on how to break it up even more.\nGood call on the invalid package.json. Added a test for that. Should cover that line.\nTests seem to be failing due to some eslint peerdependency business, tho... \ud83d\ude1e \n. greeeeeeeeen \ud83e\udd11 \n. Ah, standard yelled at me for not having braces, I didn't realize you could do this. Fixed.\n. Is electron different from electron-prebuilt? If they're the same, you can just do props.push(['dependencies.electron', 'dependencies.electron-prebuilt', 'devDependencies.electron', 'devDependencies.electron-prebuilt']), which will resolve to whichever it finds first. \n. Then it would be props.push(['dependencies.electron', 'devDependencies.electron', 'dependencies.electron-prebuilt', 'devDependencies.electron-prebuilt']). Either way, you can avoid a 2nd getPackageInfo call. I think that's all that was needed to add support for infering from electron.\n. Why do we need to know which package it came from?\n. Oh, d'oh. I forgot about that. In that case it might be better to make a trivial PR to get-package-info that can add the property name to result.source here\n. I went ahead and did that myself. Working on a PR for this branch to clean it up accordingly.\n. May want to hide original error message, since the message we add should be descriptive enough without it?\n. Assuming app-version is not a required option.\n. whoops. i really shouldn't make PRs at midnight on a work day\n. This is weird b/c fs.emptyDir doesn't return a consistent # of arguments, depending on whether the directory already exists or not. I've made an issue on the fs-extra repo but this is the workaround for now.\n. ",
    "Mingling94": "Request: This should infer to package the dependencies but not the devDependencies \n. ^The former, not your pr.\ndependencies mean the electron app needs the package to run, right? devDependencies are not needed. If one uses the package.json as per npm philosophy, ALL the dependencies should be in node_modules and included in the packaged product.\ngets off soapbox\n. Ah, I see!\n. Correct me if I'm wrong, but atom.asar is required, but default_app should be removed since no one should be trying to use electron via command line when you're sending out a release of your app. electron-packager should remove the default_app folder by default\n. ",
    "tengyifei": "+1\n. +1 Would also like to know if there is any convenient way of downloading and packaging native extensions.\n. Done.\n. Any update on when this could get merged?\n. ",
    "defaltd": ":+1: \n. Thank you @jden \n. Version: 4.1.3\nCLI Arguments:\n    - Platform: Darwin\n    - Arch: x64\n    - Version: 0.28.1\n    - Out: /dist\nPlatform: Building for Mac\nThere was no stack trace.\n. no I am building on a windows machine\n. Thank you @kfranqueiro for the confirmation. I can also confirm that building my app on OSX with the same command had no issues\n. @s-a The Darwin v0.25.3 ia32 package does not exist. Selected versions and architectures should match those that exist in the Electron releases.\nRef: Electron Releases\n. ",
    "Flet": "Wrote this for friends which accomplishes this via shelljs:\nhttps://github.com/moose-team/friends/blob/master/pkg.js\nBut I too came here to see if it made sense to add a build all flag here or to do it in a higher level module.\n. Indeed, this is also reflected in the pkg.js script above :)\n' --ignore=pkg' // ignore the pkg directory or hilarity will ensue\n. Just for verification, rcedit.exe is available and in the path?\nhttps://github.com/maxogden/electron-packager#building-windows-apps-from-non-windows-platforms\n. ",
    "mixmatch": "Related to this is an issue i experienced recently, packaged for one platform, then another and the first platform package folder was included in the next package platform...would be nice if default 'out' was inside of a dist folder that is ignored by default when packaging...\n. Somehow missed your script Flet. Thanks!\n. ",
    "zaggino": "Can you please try the repo above? https://github.com/zaggino/brackets-electron\nnpm run bundle-mac doesn't even copy the app files into the Contents/Resources/app folder for some reason (it does copy on Windows but ignores excludes)\n. Nevermind, found one issue, going to submit a PR\n. PR for Mac is up, I'll check what's wrong on Windows too\n. PR for Windows is up too.\n. @maxogden another issue with 4.1.1:\nI have this in my shell script:\nelectron-packager . Bracketron --platform=$1 --arch=$2 --version=$3 --ignore='/node_modules/electron-rebuild($|/)'\nbut minimist will convert this to:\nC:/Program Files (x86)/Git/node_modules/electron-rebuild($|/)\nI've put console.log here: https://github.com/maxogden/electron-packager/blob/master/cli.js#L4\n. Actually this is done even before it reaches minimist for some reason, sorry. I need to check why.\n. Ok, I actually need to do\n--ignore='./node_modules/electron-rebuild$'\nto make it work without resolving the first / to C:/Program Files (x86)/Git/\nBut it excludes correctly now. You can close this or make some notes based on my findings into the README if you wish. Thanks for merging the PRs.\n. Ah, I'm spamming here but still not good. I need to exlude a folder tools from my app but I don't want to exclude a folder something/tools too. Excludes should only be matched against the root of the app.\n. They're processed here: https://github.com/maxogden/electron-packager/blob/master/mac.js#L71-L80\nif (file.match(ignore[i])) { with ignore being .git will match even folders like /github or mygitapp\n. btw README doesn't say that --ignore are processed as regular expressions, but according to code they are for all three platforms\n. Sure, we could put together some test basic hello world project in this repo and run assertions after it's packaged through node's fs.\nBut that'd test only the ignores, I'm not sure if everything else would be testable. I haven't really digged through other code than the ignore parts.\n. I don't work at the project I used to before at the time being, but it seems this can be closed.\n. ",
    "orderedlist": "Hmm, some experimentation seems to show that, at least as of right now, removing those files causes Electron to do weird things. atom.asar seems to be required, and removing default_app means you can't run the Electron command line and pass in a path argument to use that folder. This seems pretty buggy, so I might dig into Electron and see if it's any requirements there we can fix.\n. ",
    "unindented": "@kfranqueiro Now that your branch has been merged, do you think it would be safe to remove default_app?\n. @malept could you add instructions on how to make the two packages work together nicely?. @malept Any idea of when you'll release a version to npm with this fix?. Ok cool. Thank you for your work!. Tried using master and everything worked fine. Files appear correctly in the resources folder on Windows, and in the Resources folder on macOS. Our app is not trivial, so you should feel a bit more confident. \ud83d\ude01. ",
    "romaincointepas": "Hey, any update on this?\nhttps://github.com/szwacz/electron-boilerplate seems to be removing default_app and atom.icns:\nhttps://github.com/szwacz/electron-boilerplate/blob/master/tasks/release_osx.js#L29-L33\n. ",
    "seanzer": "I agree that no one should be trying to use the packaged electron on the command line. Especially once it's been renamed, which electron-packager allows for, so I don't think many people would miss default_app. Though, I don't understand why it's required on Linux.\n. ",
    "jasonhinkle": "made the suggested updates.  hope this might help someone as it took me a while to figure out the syntax.\n. ok I think its ready to go\n. Fantastic work guys!\n. Going in a little deeper, the Bundle Name and Executable properties need to be updated as well in order to be accepted to the Mac App Store.  Here's an example of the NP plist that works and was accepted to the app store.\n\n. The extra info would probably work but really the packager already has the information it needs and is already renaming the helper files. So it seems like the default would be to put those values into the plist files. As is, the plist files are technically invalid, though it only comes into play when you try to submit to the app store.\n. I've compiled a custom version of ffmpeg but I haven't tried submitting it yet, once I do that (this week with luck) if it gets accepted I'll post instructions.  I don't really know what side-effects my changes will have as well, it may crash depending on what ffmpeg features you use!\n. I have not done that yet myself but when I was reading about it my impression is that the sandbox exception entitlement requires that the user's file selection has to be done through a native file open/save dialog. Perhaps this page would be helpful? http://www.mylifeforthecode.com/getting-started-with-standard-dialogs-in-electron/\n. @positlabs Hey, sorry I didn't get around to submitting due to other stuff coming up. I have a custom build that you can grab which I believe has the private API calls removed - however it also is missing some bits as well hopefully would not affect your app. ffmpeg here as of today https://github.com/jasonhinkle/Tube-DL/tree/master/assets/bin/osx is my custom build.\nIf you would like to try using that and re-submit your app, i'd be curious to see if it is accepted.\n. Hmm what feature are you using of ffmpeg? I basically commented out the offending code and throw an error if that function is called. I only use ffmpeg for file conversions so my app never hits that part of the code.\nIt seems to be code that is validating an SSL cert, which indicates probably an http call. To actually re-implement it without the private API call looks like a tricky job.\n. ",
    "iamdriz": "But I'm on a windows platform... That article says for building windows apps on non windows platforms.\nSent from my iPhone\n\nOn 1 Jun 2015, at 22:04, Dan Flettre notifications@github.com wrote:\nJust for verification, rcedit.exe is available and in the path?\nhttps://github.com/maxogden/electron-packager#building-windows-apps-from-non-windows-platforms\n\u2014\nReply to this email directly or view it on GitHub.\n. Where should rcedit.exe live in relation to the Gruntfile.js? I've tried it at the same level but doesn't seem to have fixed the issue with the icon.\n. And where does this come from? And by relative you mean it's a node module inside the electron-packager folder.\n\nSent from my iPhone\n\nOn 2 Jun 2015, at 17:31, jden notifications@github.com wrote:\n@iamdriz when you npm install electron-packager, you should have (relative to the package path) node_modules/rcedit/bin/rcedit.exe\n\u2014\nReply to this email directly or view it on GitHub.\n. Okay I installed rcedit next to electron-packager but the icon is only viewable in the Windows Explorer preview bar and not on the window itself, the taskbar, or the actual file. Manually running rcedit and grunt-rcedit solves this and correctly applies the icon. So it seems that the packager isn't running rcedit properly nor does it use the other built-in features as changing copyright info etc.\n. Yeah this would awesome! As I have just had an issue where we were building from old versions of Electron as we had the versions hard-coded in the gruntfiles. So to have it default to latest version if none is specified would be perfect.\n. \n",
    "mhkeller": "I'm also running into an issue of the icon not being set but I'm on os x. Here's the command I'm running:\nelectron-packager ./ NewsLynx --platform=darwin --arch=x64 --version=0.28.1 --icon=merlynne.ico --prune\nWhen it builds, it seems to flash to the default Electron icon from another state. This could be the custom icon or the default \"Paper and pencils\" os x icon.\nAre there any file size / type / dimension restrictions to be aware of? I've tried it with png, ico and icns.\n. ",
    "IronGeek": "Hi,\nJust trying to share my experience here as I just had the same issue today with a fresh Windows 8.1 64-bit installation. \nThe electron-packager does not throw any error, everything seems fine, yet the icon is not applied to final output. But when I try to run the rcedit directly... well, That's when I was greeted with this error message:\n\nIt seems rcedit require VC++ 2010 redistributable components to run, Visual C++ 2010 Redistributable Package (x86) to be exact. I installed the x64 version first and learn it the hard way... :tired_face:\n. ",
    "kethinov": ":+1: thanks @IronGeek I was seeing the same error when manually running rcedit.exe as well, however even after installing the VC++ dependency, rcedit still does not correctly apply the icon to my app.\nWhen I run the same command to build my app for Windows from an OS X dev environment, rcedit runs correctly, so there is obviously still something screwy going on on my Windows dev env... \ud83d\ude15\n. Looks like --version-string.FileDescription is the one that does it. Thanks.\n. ",
    "wearhere": "Some details about my failing environment and I how I fixed it, largely confirming @IronGeek's and @kethinov's posts:\n- I'm running electron-packager in Windows 8. Here, I was seeing electron-packager silently fail to edit the icon\n  - though I was seeing rcedit errors when trying to run grunt-electron-installer.\n- When running electron-packager in OS X 10.10.5 (with Wine), it succeeded in editing the icon.\n- When I installed the VC++ 2010 components linked by @IronGeek, then electron-packager succeeded in editing the icon in Windows 8.\n- My coworker was able to successfully edit the icon without installing anything in Windows 10.\nSo, perhaps this is just fixed by updating to the latest VC++ toolchain? Though I know that didn't quite work for @kethinov.\n. Ok, thanks!\n. @malept would you be able to point me to where \n\nYou need to distribute the license (in some form), per the terms of Electron's license.\n\nis stated? I don't see it noted in their distribution docs, README, or LICENSE.\n. Ah I see. I was a bit confused about whether that needed to be shown to the enduser or just included in the source\u2026 What about the Chromium licenses? I also see a LICENSES.chromium.html in the output directory.\n. :ok_hand: \n. ",
    "dhildebrandt": "I am very grateful for this thread, which walked me all the way through up to getting the application having our customized icon.  For reference:\n- Running Windows 10\n- Added RCEDIT into the path\n- installed VC+2010 components\nNow I'm working on why the desktop shortcut that points to the correctly iconified application is still itself Electron's icon.  If I figure it out I'll report back to this thread.\n. In the Properties of the shortcut, one can select the icon from among those in the exe.  n.b. this is the Windows dialog.  I changed it to the one my app presented (the customized one).  I changed no code. In future runs of rebuilds of the installer, the shortcut was installed with the correct customized icon.  Registry madness?\n. I have an earlier snapshot of the VM I am using; perhaps I can fork the VM from there and see if I can replicate the issue.\n. ",
    "chentsulin": "Is it appropriate if I use path.resolve(opts.dir) instead of process.cwd()?\n. ",
    "davej": "4.1.2\n. Managed to figure this out. I had a broken symlink to atom-shell in my .bin directory.\n. I believe I was using 5.1.0 when it worked before... I tried moving back to an earlier version anyway but it still didn't work. Could this be something related to something in my app code base (I see symlink issues are mentioned a lot, I have symlinked modules).\n. Still isn't working with --out.\nI'm doing a bit of debugging, seems to be failing here, the callback function (cb) is never fired.\n. Possibly related to https://github.com/AvianFlu/ncp/issues/98?\n. Yup.\nFYI, tried a couple of other node versions, I'm getting the same issue with Node-v0.12.2 and iojs-v2.0.1.\n. The actual copying of files works fine by the way, all the files are copied correctly, it's just that the callback isn't fired.\nI put the callback in a setTimeout just to get it working and the app packaged itself correctly and runs as expected.\njavascript\n  var ncpCallbackFired = false\n  ncp(opts.dir, appPath, {filter: userIgnoreFilter(opts), dereference: true}, function(err) {\n    ncpCallbackFired = true;\n    cb(err);\n  });\n  // callback above isn't being fired by ncp for some reason,\n  // so call it synthetically after 20 secs if it hasn't been fired.\n  // https://github.com/maxogden/electron-packager/issues/150\n  setTimeout(function() {\n    if (!ncpCallbackFired) {\n      cb(null);\n    }\n  }, 20000);\n. Just want to mention that a number of people have found ncp inconsistent and buggy, also it isn't being actively maintained anymore: https://github.com/AvianFlu/ncp/issues/100\nI also noticed that the fs-extra module dropped ncp because of bugs surrounding non-firing/double-firing of callbacks.\n. ",
    "Paxa": "You can make extra .plist file with changes and set it to extend-info key, electron-packager will merge content from extra file to result file.\nWorked for me like this:\njs\nvar opts = {\n  version: '1.4.3',\n  dir: '.',\n  arch: 'x64',\n  platform: 'darwin',\n  'app-bundle-id': 'com.postbird',\n  icon: 'build_files/icon.icns',\n  'extend-info': 'build_files/Info.plist',\n  ...\n};\nbuild_files/Info.plist (register sql extension and postgres:// protocol)\nxml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n  <key>CFBundleDocumentTypes</key>\n  <array>\n    <dict>\n      <key>CFBundleTypeExtensions</key>\n      <array>\n        <string>sql</string>\n      </array>\n      <key>CFBundleTypeIconFile</key>\n      <string>SQL.icns</string>\n      <key>CFBundleTypeName</key>\n      <string>SQL File</string>\n      <key>CFBundleTypeOSTypes</key>\n      <array>\n        <string>sqlt</string>\n      </array>\n      <key>CFBundleTypeRole</key>\n      <string>Editor</string>\n      <key>NSDocumentClass</key>\n      <string>SPDocumentController</string>\n    </dict>\n  </array>\n  <key>CFBundleURLTypes</key>\n  <array>\n    <dict>\n      <key>CFBundleURLName</key>\n      <string>Postgres Database</string>\n      <key>CFBundleURLSchemes</key>\n      <array>\n        <string>postgres</string>\n      </array>\n    </dict>\n  </array>\n</dict>\n</plist>\n. ",
    "tympanix": "I've created a package to handle writing to the windows registry at https://github.com/Tympanix/electron-regedit. ",
    "johnmuhl": "\n\nWhich version of electron-packager are you using?\n\n\n4.1.2\n\n\nWhat cli arguments are you passing?\n\n\nelectron-packager ./ MyApp --platform=darwin --arch=x64 --version=0.27.3\n\n\nWhat platform are you running electron-packager on? What platform(s) are you building for?\n\n\nMac OS X 10.9.5\n\n\nIs there a stack trace in the error message you're seeing?\n\n\nThe complete output of the command above is:\nPackaging app for platform darwin x64 using electron v0.27.3\nEXDEV: cross-device link not permitted, rename '/var/folders/vv/54sdz8qj3b93zdkd8dchc5v00000gp/T/electron-packager-mac/MyApp.app' -> '/Volumes/home/jm/Source/johnmuhl/MyApp/MyApp.app'\n. Does vue.js happen to put the require-able files in dist? If so the --ignore=dist may be causing your trouble.\n. ",
    "krainboltgreene": "Looks like the issue ended up being that while I had a package.json in the root directory of the project you also need a package.json in the directory you keep the application code.\nThis seems largely a benign issue, but for those of us who don't want to mix the project scaffold with the application code it can be annoying.\n. Yep, this absolutely solved my problem. Any chance we can get some of these config pieces read from packager.json?\n. Yes, #37 is basically what I'm talking about.\n. There are no tests so I'm not sure what I've broken yet. I'm going to try and use my own fork to test my application.\n. Ugh, just ran into an issue where I discovered node-ncp doesn't take an Array for the source argument. Thoughts?\n. Okay, so good point, one of the big reasons I'm doing this is because I'm\nhaving issues with file names and regular expressions.\nMaybe if we pass the files through a regexp escaper?\nOn Sat, Jun 20, 2015 at 1:09 PM, maxogden notifications@github.com wrote:\n\n@krainboltgreene https://github.com/krainboltgreene ahh good point...\nyou might have to still use a filter, but make it a positive filter rather\nthan a negative one. maybe we should just expose the filter to the user in\na better way.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/maxogden/electron-packager/pull/80#issuecomment-113797821\n.\n\n\nKurtis Rainbolt-Greene, Hacker\nSoftware Developer\n1631 8th St.\nNew Orleans, LA\n70115\n. I'm about to just rewrite this PR, so don't depend on anything here yet.\nOn Sat, Jun 20, 2015 at 1:12 PM, Kurtis Rainbolt-Greene \nme@kurtisrainboltgreene.name wrote:\n\nOkay, so good point, one of the big reasons I'm doing this is because I'm\nhaving issues with file names and regular expressions.\nMaybe if we pass the files through a regexp escaper?\nOn Sat, Jun 20, 2015 at 1:09 PM, maxogden notifications@github.com\nwrote:\n\n@krainboltgreene https://github.com/krainboltgreene ahh good point...\nyou might have to still use a filter, but make it a positive filter rather\nthan a negative one. maybe we should just expose the filter to the user in\na better way.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/maxogden/electron-packager/pull/80#issuecomment-113797821\n.\n\n\nKurtis Rainbolt-Greene, Hacker\nSoftware Developer\n1631 8th St.\nNew Orleans, LA\n70115\n\n\nKurtis Rainbolt-Greene, Hacker\nSoftware Developer\n1631 8th St.\nNew Orleans, LA\n70115\n. So I've decided to not continue this as I'm having a rather frustrating time with Node. I'm going to try my hand at a Ruby version. Thanks for looking into this.\n. Yes, we're tracking master.\n. Seems to work fine when inside a npm package.json scripts key.\n. I think it was just a fluke.\n. Also I just notice that the linux build folder and mac build folder are now different.\n. I don't understand @malept.\n. @maxogden Sorry, so here's the issue:\nWith --prune and --asar my application is 64mb, but Electron Framework.framework is somehow 328mb?! More mysteriously when I remove babel it drops significantly.\nSomehow that part of the .app file is related to node_modules/ size and yet appears unphased by --prune.\n. Yes, so the path looks like this:\n.\n\u251c\u2500\u2500 [1.0K]  \"LICENSE\"\n\u251c\u2500\u2500 [928K]  \"LICENSES.chromium.html\"\n\u251c\u2500\u2500 [172M]  \"NAME.app\"/\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 [172M]  \"Contents\"/\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 [106M]  \"Frameworks\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 [104M]  \"Electron Framework.framework\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 [  35]  \"Electron Framework\" -> \"Versions/Current/Electron Framework\"*\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 [104M]  \"Versions\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 [104M]  \"A\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 [ 63M]  \"Electron Framework\"*\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 [ 20M]  \"Libraries\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [2.5M]  \"libffmpeg.dylib\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u2514\u2500\u2500 [ 17M]  \"libnode.dylib\"*\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 [ 21M]  \"Resources\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [ 758]  \"Info.plist\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [1.8K]  \"MainMenu.nib\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [6.0K]  \"am.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [5.9K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [5.7K]  \"ar.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [5.6K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [6.6K]  \"bg.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [6.5K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [8.5K]  \"bn.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [8.4K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [4.1K]  \"ca.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [4.0K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [9.0M]  \"content_shell.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [970K]  \"crashpad_handler\"*\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [3.9K]  \"cs.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [3.8K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [3.6K]  \"da.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [3.5K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [4.0K]  \"de.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [3.9K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [7.1K]  \"el.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [7.0K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [3.5K]  \"en.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [3.4K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [3.5K]  \"en_GB.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [3.4K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [4.4K]  \"es.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [4.3K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [4.2K]  \"es_419.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [4.1K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [3.7K]  \"et.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [3.6K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [5.6K]  \"fa.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [5.5K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [3.8K]  \"fi.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [3.7K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [4.3K]  \"fil.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [4.2K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [4.4K]  \"fr.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [4.3K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [8.0K]  \"gu.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [7.9K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [4.5K]  \"he.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [4.4K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [7.6K]  \"hi.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [7.5K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [4.0K]  \"hr.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [3.9K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [4.3K]  \"hu.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [4.2K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [9.7M]  \"icudtl.dat\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [3.6K]  \"id.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [3.5K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [4.1K]  \"it.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [4.0K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [4.8K]  \"ja.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [4.7K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [9.1K]  \"kn.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [9.0K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [3.9K]  \"ko.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [3.8K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [4.1K]  \"lt.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [4.0K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [4.3K]  \"lv.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [4.2K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [10.0K]  \"ml.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [9.9K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [7.8K]  \"mr.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [7.7K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [3.7K]  \"ms.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [3.6K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [402K]  \"natives_blob.bin\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [3.5K]  \"nb.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [3.4K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [3.8K]  \"nl.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [3.7K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [3.9K]  \"pl.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [3.8K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [3.9K]  \"pt_BR.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [3.8K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [4.0K]  \"pt_PT.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [3.9K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [4.3K]  \"ro.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [4.2K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [6.1K]  \"ru.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [6.0K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [4.0K]  \"sk.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [3.9K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [3.9K]  \"sl.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [3.8K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [604K]  \"snapshot_blob.bin\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [6.2K]  \"sr.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [6.1K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [3.5K]  \"sv.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [3.4K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [4.0K]  \"sw.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [3.9K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [9.9K]  \"ta.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [9.8K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [9.5K]  \"te.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [9.4K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [7.7K]  \"th.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [7.6K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [3.8K]  \"tr.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [3.7K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [6.3K]  \"uk.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [6.2K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [4.6K]  \"vi.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [4.5K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 [3.5K]  \"zh_CN.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [3.4K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2514\u2500\u2500 [3.5K]  \"zh_TW.lproj\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0                 \u2514\u2500\u2500 [3.4K]  \"locale.pak\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 [9.8K]  \"NAME Helper EH.app\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 [9.7K]  \"Contents\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 [ 933]  \"Info.plist\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 [8.6K]  \"MacOS\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 [8.5K]  \"NAME Helper EH\"*\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 [   8]  \"PkgInfo\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 [9.8K]  \"NAME Helper NP.app\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 [9.7K]  \"Contents\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 [ 933]  \"Info.plist\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 [8.6K]  \"MacOS\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 [8.5K]  \"NAME Helper NP\"*\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 [   8]  \"PkgInfo\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 [9.8K]  \"NAME Helper.app\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 [9.7K]  \"Contents\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 [ 914]  \"Info.plist\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 [8.6K]  \"MacOS\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 [8.5K]  \"NAME Helper\"*\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 [   8]  \"PkgInfo\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 [189K]  \"Mantle.framework\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 [  23]  \"Mantle\" -> \"Versions/Current/Mantle\"*\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 [188K]  \"Versions\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 [188K]  \"A\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 [ 36K]  \"Headers\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [7.0K]  \"MTLJSONAdapter.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [9.2K]  \"MTLManagedObjectAdapter.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [5.4K]  \"MTLModel+NSCoding.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [5.4K]  \"MTLModel.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 991]  \"MTLValueTransformer.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 832]  \"Mantle.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 873]  \"NSArray+MTLManipulationAdditions.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 807]  \"NSDictionary+MTLManipulationAdditions.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 406]  \"NSObject+MTLComparisonAdditions.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 553]  \"NSValueTransformer+MTLInversionAdditions.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u2514\u2500\u2500 [3.9K]  \"NSValueTransformer+MTLPredefinedTransformerAdditions.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 [151K]  \"Mantle\"*\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 [ 195]  \"Modules\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u2514\u2500\u2500 [  93]  \"module.modulemap\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 [1.3K]  \"Resources\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2514\u2500\u2500 [1.2K]  \"Info.plist\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 [1021K]  \"ReactiveCocoa.framework\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 [  30]  \"ReactiveCocoa\" -> \"Versions/Current/ReactiveCocoa\"*\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 [1020K]  \"Versions\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 [1020K]  \"A\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 [170K]  \"Headers\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [2.3K]  \"EXTKeyPathCoding.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [4.1K]  \"EXTScope.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 486]  \"NSArray+RACSequenceAdditions.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 560]  \"NSControl+RACCommandSupport.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 568]  \"NSControl+RACTextSignalSupport.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 536]  \"NSData+RACSupport.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [1.0K]  \"NSDictionary+RACSequenceAdditions.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 479]  \"NSEnumerator+RACSequenceAdditions.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 384]  \"NSFileHandle+RACSupport.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 523]  \"NSIndexSet+RACSequenceAdditions.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 419]  \"NSNotificationCenter+RACSupport.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [1.7K]  \"NSObject+RACAppKitBindings.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [1022]  \"NSObject+RACDeallocating.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [2.6K]  \"NSObject+RACLifting.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [4.9K]  \"NSObject+RACPropertySubscribing.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [3.5K]  \"NSObject+RACSelectorSignal.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 496]  \"NSOrderedSet+RACSequenceAdditions.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 482]  \"NSSet+RACSequenceAdditions.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 547]  \"NSString+RACSequenceAdditions.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 608]  \"NSString+RACSupport.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 400]  \"NSText+RACSignalSupport.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 730]  \"NSURLConnection+RACSupport.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 817]  \"NSUserDefaults+RACSupport.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [2.8K]  \"RACBacktrace.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 517]  \"RACBehaviorSubject.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [2.7K]  \"RACChannel.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [5.1K]  \"RACCommand.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [1.7K]  \"RACCompoundDisposable.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 941]  \"RACDisposable.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [1.6K]  \"RACEvent.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 427]  \"RACGroupedSignal.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [4.1K]  \"RACKVOChannel.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [1.7K]  \"RACMulticastConnection.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [1.1K]  \"RACQueueScheduler+Subclass.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 521]  \"RACQueueScheduler.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 656]  \"RACReplaySubject.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 939]  \"RACScheduler+Subclass.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [6.6K]  \"RACScheduler.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 486]  \"RACScopedDisposable.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [6.2K]  \"RACSequence.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [1.6K]  \"RACSerialDisposable.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 32K]  \"RACSignal+Operations.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [9.4K]  \"RACSignal.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 13K]  \"RACStream.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 548]  \"RACSubject.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [1.6K]  \"RACSubscriber.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [2.0K]  \"RACSubscriptingAssignmentTrampoline.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 706]  \"RACTargetQueueScheduler.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [1.3K]  \"RACTestScheduler.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [5.4K]  \"RACTuple.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 390]  \"RACUnit.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 [3.8K]  \"ReactiveCocoa.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u2514\u2500\u2500 [ 30K]  \"metamacros.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 [ 209]  \"Modules\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u2514\u2500\u2500 [ 107]  \"module.modulemap\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 [848K]  \"ReactiveCocoa\"*\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 [1.4K]  \"Resources\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2514\u2500\u2500 [1.3K]  \"Info.plist\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 [886K]  \"Squirrel.framework\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0     \u251c\u2500\u2500 [  25]  \"Squirrel\" -> \"Versions/Current/Squirrel\"*\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0     \u2514\u2500\u2500 [885K]  \"Versions\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0         \u2514\u2500\u2500 [885K]  \"A\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0             \u251c\u2500\u2500 [9.0K]  \"Headers\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 560]  \"NSBundle+SQRLVersionExtensions.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 424]  \"NSProcessInfo+SQRLVersionExtensions.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 963]  \"SQRLDownloadedUpdate.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 972]  \"SQRLUpdate.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 [5.3K]  \"SQRLUpdater.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [ 587]  \"Squirrel.h\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0             \u251c\u2500\u2500 [ 199]  \"Modules\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [  97]  \"module.modulemap\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0             \u251c\u2500\u2500 [689K]  \"Resources\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 [1.2K]  \"Info.plist\"\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 [688K]  \"ShipIt\"*\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0             \u2514\u2500\u2500 [186K]  \"Squirrel\"*\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 [1.4K]  \"Info.plist\"\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 [8.6K]  \"MacOS\"/\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 [8.5K]  \"NAME\"*\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 [   8]  \"PkgInfo\"\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 [ 66M]  \"Resources\"/\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 [ 65M]  \"app.asar\"\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 [174K]  \"atom.icns\"\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 [ 12K]  \"default_app.asar\"\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 [162K]  \"electron.asar\"\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 [1.1M]  \"electron.icns\"\n\u2514\u2500\u2500 [   7]  \"version\"\n. Okay that's...weird, here it's reporting 175mb.\n. Holy shit, I think part of this is Dropbox not working with symlinks!\n. Okay well, so now I get it. Basically Electron Framework.framework contains my app, it's symlinked 4 times, 30mb + 64mb * 5: 350mb. Great.\n. Yeah, I'm finding a lot of errors just by running things in my env. I'll\nupdate this PR as the day goes.\nOn Sat, Jun 20, 2015 at 12:11 PM, maxogden notifications@github.com wrote:\n\nIn index.js\nhttps://github.com/maxogden/electron-packager/pull/80#discussion_r32886107\n:\n\n@@ -31,10 +35,11 @@ module.exports = function packager (opts, cb) {\n     default: return cb(new Error('Unsupported platform. Must be either darwin, linux, or win32'))\n   }\n-  // Ignore this and related modules by default\n-  var defaultIgnores = ['/node_modules/electron-prebuilt($|/)', '/node_modules/electron-packager($|/)', '/.git($|/)']\n-  if (opts.ignore && !Array.isArray(opts.ignore)) opts.ignore = [opts.ignore]\n-  opts.ignore = (opts.ignore) ? opts.ignore.concat(defaultIgnores) : defaultIgnores\n-  // Only include files specified\n-  var defaultFiles = ['package.json']\n-  opts.files = (defaultFiles + config.files).map(function (item) {\n-    path.join(opts.dir, item)\n\nI think you need a return here\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/maxogden/electron-packager/pull/80/files#r32886107.\n\n\nKurtis Rainbolt-Greene, Hacker\nSoftware Developer\n1631 8th St.\nNew Orleans, LA\n70115\n. Yes, I ultimately want this PR to encompass that change.\nOn Sat, Jun 20, 2015 at 12:12 PM, maxogden notifications@github.com wrote:\n\nIn index.js\nhttps://github.com/maxogden/electron-packager/pull/80#discussion_r32886121\n:\n\n@@ -31,10 +35,11 @@ module.exports = function packager (opts, cb) {\n     default: return cb(new Error('Unsupported platform. Must be either darwin, linux, or win32'))\n   }\n-  // Ignore this and related modules by default\n-  var defaultIgnores = ['/node_modules/electron-prebuilt($|/)', '/node_modules/electron-packager($|/)', '/.git($|/)']\n-  if (opts.ignore && !Array.isArray(opts.ignore)) opts.ignore = [opts.ignore]\n-  opts.ignore = (opts.ignore) ? opts.ignore.concat(defaultIgnores) : defaultIgnores\n-  // Only include files specified\n-  var defaultFiles = ['package.json']\n-  opts.files = (defaultFiles + config.files).map(function (item) {\n-    path.join(opts.dir, item)\n\nalso just to clarify, is the idea to change the CLI API from electron-packager\n to e.g. electron-packager --files=foo/bar.js\n--files=foo/baz.js where you specify each individual file on the CLI?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/maxogden/electron-packager/pull/80/files#r32886121.\n\n\nKurtis Rainbolt-Greene, Hacker\nSoftware Developer\n1631 8th St.\nNew Orleans, LA\n70115\n. I'm currently working on that now.\nOn Sat, Jun 20, 2015 at 12:16 PM, maxogden notifications@github.com wrote:\n\nIn index.js\nhttps://github.com/maxogden/electron-packager/pull/80#discussion_r32886167\n:\n\n@@ -31,10 +35,11 @@ module.exports = function packager (opts, cb) {\n     default: return cb(new Error('Unsupported platform. Must be either darwin, linux, or win32'))\n   }\n-  // Ignore this and related modules by default\n-  var defaultIgnores = ['/node_modules/electron-prebuilt($|/)', '/node_modules/electron-packager($|/)', '/.git($|/)']\n-  if (opts.ignore && !Array.isArray(opts.ignore)) opts.ignore = [opts.ignore]\n-  opts.ignore = (opts.ignore) ? opts.ignore.concat(defaultIgnores) : defaultIgnores\n-  // Only include files specified\n-  var defaultFiles = ['package.json']\n-  opts.files = (defaultFiles + config.files).map(function (item) {\n-    path.join(opts.dir, item)\n\nOh I see, you are reading the files field of the package.json and using\nthat as the list of files to include. I like that approach but not all\npackage.jsons will have the files field populated, so I think we should\nmaybe show the user an error or warning if the packager can't find any\nfiles to include.\nAlso is there a way to specify the files using flags like in my comment\nabove? From reading the code it looks like it only pulls from package.json\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/maxogden/electron-packager/pull/80/files#r32886167.\n\n\nKurtis Rainbolt-Greene, Hacker\nSoftware Developer\n1631 8th St.\nNew Orleans, LA\n70115\n. :+1:\n. ",
    "grofit": "I think I have just been caught by this, as I have my *.asar in another folder which is packaged...\n. I do not get an icon in the filesystem even with an icon set, just to confirm should the format of the icon be an image format, i.e. icon: \"my-icon.png\" or an ico file icon: \"my-file.ico\" as I am using the latter and it works fine in windows, but linux shows nothing.\n. LOL I cannot believe it is that, I scanned the options many times and didnt pick up on it.. I guess it was my gulp brain expecting everything to be src.\n. I tried doing this but I just get \"Command not found\", in reality the actual output is MyAppName not Electron but if I were to do ./MyAppName it just gives the error above.\n. Yeah, Here is a screenshot:\nhttps://dl.dropboxusercontent.com/u/98595151/ShareX/EMBERSOFT1/electron-linux.jpg\nIt shows the folder structure as well as the contents and the call to it in the terminal (although I had to sudo for some reason to run it).\n. I ran it via grunt with these settings:\nelectron: {\n    windows: {\n        // Lets not care about this\n    },\n    linux: {\n        options: {\n            dir: \"./app\",\n            name: \"MyAppName\",\n            platform: \"linux\",\n            arch: \"all\",\n            asar: true,\n            overwrite: true,\n            version: \"0.30.2\",\n            icon: \"resources/my-app-icon.ico\",\n            out: \"_packages/raw\",\n            \"app-version\": appPkg.version   // appPkg is just a reference to the package.json\n        }\n    }\n},\nUsing windows 10, latest Grunt (as of like a week ago) and latest version of this lib. Is there a way to get windows to set the file permissions in another build step? (I assume the permissions will not cause the main issue of the MyAppName not running though will it?)\nAlso the ls -l outputs:\n```\nleep@leep-virtual-machine:~/Documents/MyAppName-linux-x64$ ls -l\ntotal 93024\n-rw-rw-r-- 1 leep leep  9442207 Aug 10  2015 content_shell.pak\n-rw-rw-r-- 1 leep leep 10207504 Aug 10  2015 icudtl.dat\n-rw-rw-r-- 1 leep leep  2554248 Aug 10  2015 libffmpegsumo.so\n-rw-rw-r-- 1 leep leep   520152 Aug 10  2015 libgcrypt.so.11\n-rw-rw-r-- 1 leep leep 16237312 Aug 10  2015 libnode.so\n-rw-rw-r-- 1 leep leep    31256 Aug 10  2015 libnotify.so.4\n-rw-rw-r-- 1 leep leep     1055 Aug 10  2015 LICENSE\ndrwxrwxr-x 2 leep leep     4096 Aug 10  2015 locales\n-rw-rw-r-- 1 leep leep 55240416 Aug 10  2015 MyAppName\n-rw-rw-r-- 1 leep leep   410937 Aug 10  2015 natives_blob.bin\ndrwxrwxr-x 2 leep leep     4096 Aug 10  2015 resources\n-rw-rw-r-- 1 leep leep   569580 Aug 10  2015 snapshot_blob.bin\n-rw-rw-r-- 1 leep leep        7 Aug 10  2015 version\n```\n. HUZZAH! ok so if I right click there is a check box \"Allow Running As Executable\", clicked that and boom runs like it should do.\nSo I guess the next question is as briefly mentioned above, is there a way to preset these permissions?\n. Yeah, I just didnt want to have to start hopping between O/S to build stuff, although I heard somewhere that I would need to do that for Mac OS anyway, as apparently you can only sign stuff with XCode.\n. Actually maybe thats right... I have a dependency on mermaid and mathjax, both of which are like 25mb a pop, then its just normal small files etc. I was just surprised as the windows installer comes out at 50mb (ish) and the linux zip file comes out at 150mb ish, just seemed 100mb was a large difference.\n. the packaging is happening in unique folders the layout is:\n_packages\n|- raw\n   |- windows-ia32\n   |- windows-x64\n   |- linux-ia32\n   |- linux-x64\n|- installers\nThe raw folders are passed in to other processes, so in this instance windows ones go to squirrel the linux ones go to a zip file processor for each arch type, then are dumped in installers.\nLike I say upon reflection the app.asar may be legitimately 50mb if no compression is done on it. I assume the Electron/.exe file is 50mb as it contains the chromium browser within it, and the other so files seem normal.\nSo maybe its all just normal, and the windows installer super zips it all up or something...\n. ",
    "delvedor": "It works, thank you!\n. The ls -l inside node_modules/.bin folder gives me this:\ndelvedor$ ls -l\ntotal 120\nlrwxr-xr-x  1 delvedor  staff  16 Sep 28 19:38 asar -> ../asar/bin/asar\nlrwxr-xr-x  1 delvedor  staff  27 Oct  3 16:06 electron -> ../electron-prebuilt/cli.js\nlrwxr-xr-x  1 delvedor  staff  26 Oct  3 16:08 electron-builder -> ../electron-builder/cli.js\nlrwxr-xr-x  1 delvedor  staff  27 Sep 28 19:38 electron-download -> ../electron-download/cli.js\nlrwxr-xr-x  1 delvedor  staff  27 Oct  3 16:07 electron-packager -> ../electron-packager/cli.js\nlrwxr-xr-x  1 delvedor  staff  21 Sep 28 19:38 extract-zip -> ../extract-zip/cli.js\nlrwxr-xr-x  1 delvedor  staff  34 Sep 28 19:38 har-validator -> ../har-validator/bin/har-validator\nlrwxr-xr-x  1 delvedor  staff  23 Sep 28 19:38 indent-string -> ../indent-string/cli.js\nlrwxr-xr-x  1 delvedor  staff  20 Sep 28 19:38 mkdirp -> ../mkdirp/bin/cmd.js\nlrwxr-xr-x  1 delvedor  staff  14 Sep 28 19:38 ncp -> ../ncp/bin/ncp\nlrwxr-xr-x  1 delvedor  staff  16 Sep 28 19:38 nugget -> ../nugget/bin.js\nlrwxr-xr-x  1 delvedor  staff  22 Sep 28 19:38 pretty-bytes -> ../pretty-bytes/cli.js\nlrwxr-xr-x  1 delvedor  staff  19 Sep 28 19:38 repeating -> ../repeating/cli.js\nlrwxr-xr-x  1 delvedor  staff  16 Sep 28 19:38 rimraf -> ../rimraf/bin.js\nlrwxr-xr-x  1 delvedor  staff  21 Sep 28 19:38 uuid -> ../node-uuid/bin/uuid\n. Sure, this is the result:\nPackaging app for platform win32 x64 using electron v0.33.4\nspawn wine ENOEN\n...\n...\n. After I've installed wine all works perfectly.\nBut if I remove node_modules/\\.bin from the ignore list, the build fails with the same initial error.\nIs this a problem/issue?\n. ",
    "kylebrowning": "@malept This is still broken if you add an icon file!\n```\nelectron-packager ./ Report --platform=all --arch=x64 --version=0.31.1 --ignore=Report.app --overwrite --out=app --icon=docicon.icns\nPackaging app for platform darwin x64 using electron v0.31.1\nPackaging app for platform linux x64 using electron v0.31.1\nPackaging app for platform win32 x64 using electron v0.31.1\nspawn wine ENOENT\nelectron-packager ./ Report --platform=all --arch=x64 --version=0.31.1 --ignore=app --overwrite --out=app --icon=docicon.icns\nPackaging app for platform darwin x64 using electron v0.31.1\nPackaging app for platform linux x64 using electron v0.31.1\nPackaging app for platform win32 x64 using electron v0.31.1\nspawn wine ENOENT\n```\n. Same thing as before, just using the command originally in this ticket and adding my icon file.\nelectron-packager ./ MyApp --platform=win32 --arch=ia32 --version=0.28.1 --ignore=MyApp.app --overwrite --icon=docicon.icns\nPackaging app for platform win32 ia32 using electron v0.28.1\nspawn wine ENOENT\n. cc @maxogden \n. @malept Thanks for clarification.\n. ",
    "normmcgarry": "+1 same issue, building mac on Windows. same params.\nWhen running it with node, I get this error in the callback:\njavascript\n{ [Error: EXDEV, rename 'C:\\Users\\User\\AppData\\Local\\Temp\\electron-packager-mac\\\nAppName.app']\nerrno: 52,\ncode: 'EXDEV',\npath: 'C:\\\\Users\\\\User\\\\AppData\\\\Local\\\\Temp\\\\electron-packager-mac\\\\AppName.app' }`\n. Looks like electron-packager\\mac.js:83:27\njavascript\nTrace: { [Error: EXDEV, rename 'C:\\Users\\User\\AppData\\Local\\Temp\\electron-packag\ner-mac\\AppName.app']\n  errno: 52,\n  code: 'EXDEV',\n  path: 'C:\\\\Users\\\\User\\\\AppData\\\\Local\\\\Temp\\\\electron-packager-mac\\\\AppName.app' }\n    at s:\\path-to-app\\app\\index.js:19:15\n    at moved (s:\\path-to-app\\app\\node_modules\\electron-packager\\mac.js:83:27)\n    at Object.oncomplete (fs.js:107:15)\n. ",
    "mccxiv": "Sorry for being that guy but... Any update or workaround for this? \nBuilding for darwin does absolutely nothing :crying_cat_face: \n\n. ",
    "dogancelik": "Electron-packager fails when building for Darwin (on Windows host).\nI used to create Mac packages successfully on version 8.7.2.\nI'm running cmd.exe as Admin.\nSimilar issues: #164 and my comment from 2016 (symlink was working)\n```\nnpx electron-packager --version\nElectron Packager 13.0.1\nNode v11.3.0\nHost Operating system: win32 (x64)\nnpx electron-packager . --platform=win32 --arch=x64 --electron-version=4.0.0\nPackaging app for platform win32 x64 using electron v4.0.0\nWrote new app to d:\\Projects\\Public\\atomic-tweetdeck\\master\\Atomic TweetDeck-win32-x64\nnpx electron-packager . --platform=linux --arch=x64 --electron-version=4.0.0\nPackaging app for platform linux x64 using electron v4.0.0\nWrote new app to d:\\Projects\\Public\\atomic-tweetdeck\\master\\Atomic TweetDeck-linux-x64\nnpx electron-packager . --platform=darwin --arch=x64 --electron-version=4.0.0\nPackaging app for platform darwin x64 using electron v4.0.0\nEPERM: operation not permitted, stat 'C:\\Users\\dogan\\AppData\\Local\\Temp\\electron-packager\\darwin-x64\\Atomic TweetDeck-darwin-x64\\Atomic TweetDeck.app\\Contents\\Frameworks\\Squirrel.framework\\Versions\\Current'\nnpx electron-packager . --platform=darwin --arch=x64 --electron-version=4.0.0 --no-tmpdir\nPackaging app for platform darwin x64 using electron v4.0.0\nCannot copy '.' to a subdirectory of itself, 'd:\\Projects\\Public\\atomic-tweetdeck\\master\\Atomic TweetDeck-darwin-x64\\Electron.app\\Contents\\Resources\\app'.\nnpx electron-packager . --platform=darwin --arch=x64 --electron-version=4.0.0 --no-tmpdir -out=build\nPackaging app for platform darwin x64 using electron v4.0.0\nCannot copy '.' to a subdirectory of itself, 'd:\\Projects\\Public\\atomic-tweetdeck\\master\\Atomic TweetDeck-darwin-x64\\Electron.app\\Contents\\Resources\\app'.\nI set a parent directory as build folder: \"..\\build\"\nnpx electron-packager . --platform=darwin --arch=x64 --electron-version=4.0.0 --no-tmpdir -out=..\\build\nPackaging app for platform darwin x64 using electron v4.0.0\nCannot copy '.' to a subdirectory of itself, 'd:\\Projects\\Public\\atomic-tweetdeck\\master\\Atomic TweetDeck-darwin-x64\\Electron.app\\Contents\\Resources\\app'.\n```. #### This does NOT work\nsh\nelectron-packager . %npm_package_productName% --platform=all --arch=x64 --version=%npm_package_electronVersion% --out=build --ignore=\\\"(build|node_modules)\\\" --overwrite\nIn package.json\njson\n{\n  \"productName\": \"MyApp\",\n  \"electronVersion\": \"0.36.7\"\n}\nOutput\nsh\n$ electron-packager . MyApp --platform=all --arch=x64 --version=0.36.7 --out=build --ignore=\"(build|node_modules)\" --overwrite\nCannot create symlinks; skipping darwin platform\nPackaging app for platform linux x64 using electron v0.36.7\nPackaging app for platform win32 x64 using electron v0.36.7\nWrote new apps to:\nbuild\\MyApp-linux-x64\nbuild\\MyApp-win32-x64\nWindows 8, npm 3.3.2, node 5.3.0, electron-packager 5.2.1\nUpdate\nCreating symlink:\n- works with ConEmu (run as admin)\n- works with Command Prompt (run as admin)\n- does not work with Git Bash\n- does not work with Command Prompt\n. Is Node 11 going to be supported soon? (It was released 3 months ago)\nCANNOT RUN WITH NODE 11.3.0\nElectron Packager requires Node 4.0 or above.. ",
    "masom": "@kfranqueiro yep. On windows the app is packaged at /path/to/app/resources but electron-packager adds another resources path component. This probably happened by porting the os x code to windows. The OS X app generates the resources folder under the MyApp.app/Resources which does not exists on windows.\n. Seems like problems got introduced in https://github.com/maxogden/electron-packager/commit/81340093eea627e854f0a674e5356552e237d265\n. https://github.com/maxogden/electron-packager/commit/81340093eea627e854f0a674e5356552e237d265#diff-a16e9b0497c5d6579f17c2c139cb3abaL140 was modified to append resources but some file operations did not take this into considerations.\n. @malept #73 should fix it.\n. @malept 178b3d4 works for us on both windows and OS X\n. ",
    "enkows": "@malept @masom \nhttps://github.com/maxogden/electron-packager/commit/178b3d4cd3332773338e33fc1e45681f80fdfb28 fixed the path issue, but the app.asar still has a problem.\n```\n$ cp electron/Electron.app/Contents/Resources/app.asar app.asar\n$ asar list app.asar\n/app.asar\n$ asar extract app.asar app/app.asar\n$ asar list app/app.asar\n/package.json\n/index.html\n/main.js\n```\nIt seems like the .asar file packaged twice.\nUPDATE:\nIt's works fine now!\nI wrote some scripts to solve the path problem before. After I remove those scripts, it works fine. \nThanks!\n. ",
    "strongant": "var iconPath = __dirname + '/app/assets/img/appledisk.png';\nfunction createWindow() {\n  mainWindow = new BrowserWindow({\n    width: 1000,\n    height: 1000,\n    icon: iconPath\n  });\nwhen electron start, i see nothing. \n\n. electron-packager . DiskClone --platform linux --arch x64 --prune  --out=dist/ --overwrite  --icon =app/assets/img/appledisk.png --prune  --ignore=node_modules/electron-prebuilt --ignore=node_modules/electron-packager --ignore =.git\n. \n. why?\n. ",
    "jestersimpps": "a global install solved it for me: npm install electron-packager -g\n. ",
    "okunokentaro": ":+1:\nWe also needed.\n. ",
    "uiureo": "+1\n. ",
    "johansatge": "Thanks for your comment!\nIndeed @herrmannplatz's solution in #127 makes more sense.\n. ",
    "toolness": "Another option here is to use Docker with a named volume, which is essentially a shortcut for doing the whole packaging step in a linux VM.  For an example, see https://github.com/toolness/walden-journal-extractor/commit/f5191c98ae420f2405024c96dfd43c1fd781c1cc.\nObviously it's still far from ideal, though.. ",
    "dorian-marchal": "Same issue here :+1:\n. ",
    "KrisSiegel": "Same problem; attempting to package up an application for Darwin fails due to\nbash\nCannot create symlinks; skipping darwin platform\n. ",
    "neal-morgansolar": "Also having this issue - is there still no way to build osx apps on non-osx systems?\n. ",
    "johnsusi": "As far as I can tell <webview> is the one triggering the error for me. Here is a small example:\npackage.json\n{\n  \"name\": \"MyApp\",\n  \"version\": \"0.0.1\",\n  \"main\": \"main.js\",\n  \"scripts\": {\n    \"package\": \"electron-packager . MyApp --platform=darwin --arch=x64 --version=0.29.2\"\n  },\n  \"devDependencies\": {\n    \"electron-packager\": \"*\"\n  }\n}\nmain.js\n```\nvar app           = require('app');\nvar BrowserWindow = require('browser-window');\nvar mainWindow = null;\napp.on('window-all-closed', function() {\n  if (process.platform != 'darwin') { app.quit(); }\n});\napp.on('ready', function() {\nmainWindow = new BrowserWindow({width: 800, height: 600});\nmainWindow.loadUrl('file://' + __dirname + '/index.html');\nmainWindow.on('closed', function() { mainWindow = null; });\n});\n```\nindex.html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello World!</title>\n  </head>\n  <body>\n    <webview src=\"index2.html\"></webview>\n    We are using io.js <script>document.write(process.version)</script>\n    and Electron <script>document.write(process.versions['electron'])</script>.\n  </body>\n</html>\nindex2.html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello World!</title>\n  </head>\n  <body>\n    <p>Hello world</p>\n  </body>\n</html>\nnom run package && MyApp-darwin-x64/MyApp.app/Contents/MacOS/Electron outputs \n[33817:0708/150323:INFO:renderer_main.cc(200)] Renderer process started\nLaunchProcess: failed to execvp:\n/Users/john/rename-helper/MyApp-darwin-x64/MyApp.app/Contents/Frameworks/MyApp Helper EH.app/Contents/MacOS/MyApp Helper EH\nLaunchProcess: failed to execvp:\n/Users/john/rename-helper/MyApp-darwin-x64/MyApp.app/Contents/Frameworks/MyApp Helper EH.app/Contents/MacOS/MyApp Helper EH\nLaunchProcess: failed to execvp:\n/Users/john/rename-helper/MyApp-darwin-x64/MyApp.app/Contents/Frameworks/MyApp Helper EH.app/Contents/MacOS/MyApp Helper EH\nLaunchProcess: failed to execvp:\n/Users/john/rename-helper/MyApp-darwin-x64/MyApp.app/Contents/Frameworks/MyApp Helper EH.app/Contents/MacOS/MyApp Helper EH\nLaunchProcess: failed to execvp:\n/Users/john/rename-helper/MyApp-darwin-x64/MyApp.app/Contents/Frameworks/MyApp Helper EH.app/Contents/MacOS/MyApp Helper EH\nLaunchProcess: failed to execvp:\n/Users/john/rename-helper/MyApp-darwin-x64/MyApp.app/Contents/Frameworks/MyApp Helper EH.app/Contents/MacOS/MyApp Helper EH\nLaunchProcess: failed to execvp:\n/Users/john/rename-helper/MyApp-darwin-x64/MyApp.app/Contents/Frameworks/MyApp Helper EH.app/Contents/MacOS/MyApp Helper EH\nLaunchProcess: failed to execvp:\n/Users/john/rename-helper/MyApp-darwin-x64/MyApp.app/Contents/Frameworks/MyApp Helper EH.app/Contents/MacOS/MyApp Helper EH\nLaunchProcess: failed to execvp:\n/Users/john/rename-helper/MyApp-darwin-x64/MyApp.app/Contents/Frameworks/MyApp Helper EH.app/Contents/MacOS/MyApp Helper EH\nLaunchProcess: failed to execvp:\n/Users/john/rename-helper/MyApp-darwin-x64/MyApp.app/Contents/Frameworks/MyApp Helper EH.app/Contents/MacOS/MyApp Helper EH\nLaunchProcess: failed to execvp:\n/Users/john/rename-helper/MyApp-darwin-x64/MyApp.app/Contents/Frameworks/MyApp Helper EH.app/Contents/MacOS/MyApp Helper EH\nLaunchProcess: failed to execvp:\n/Users/john/rename-helper/MyApp-darwin-x64/MyApp.app/Contents/Frameworks/MyApp Helper EH.app/Contents/MacOS/MyApp Helper EH\n[33830:0708/150323:INFO:renderer_main.cc(200)] Renderer process started\nThere is also some info on the electron site http://electron.atom.io/docs/v0.28.0/tutorial/application-distribution/  under 'Rebranding with downloaded binaries'\nHope this helps. \n. ",
    "hankbao": "The --unpack argument of asar prevents the specific files from been packing into the archive but still put  them in an app.asar.unpacked folder. Then you can ship that folder together with the app.asar. This is important because currently electron can not require a native addon in an asar archive directly. Electron has to unpack the addon into tmp and load it from there. However this kind of behavior is in disfavor with anti-virus software. I believe that both --ignore and --prune doesn't perform like --unpack.\nFor the detail, please check: http://electron.atom.io/docs/v0.29.0/tutorial/application-packaging/\n. :+1:  Thanks\n. :+1:\n. +1 for a new --platform flag. Currently we have to pack our MAS build manually.\n. ",
    "ssreekanth": "+1\n. ",
    "mkscrg": "@kfranqueiro @maxogden I ran into #100 tonight. Is a 5.0.2 release imminent?\nPS thanks for working on this\u2014huge timesaver :grin:\n. Thanks!\n. ",
    "erkyrath": "See https://github.com/maxogden/electron-packager/pull/253\n. See https://github.com/maxogden/electron-packager/pull/253\n. Normal zip packaging turns symlinked files into duplicates, which both makes the app larger and breaks code-signing.\nThe /usr/bin/zip that comes installed on MacOS has a --symlinks argument which preserves links. If that's available, use it.\nIf not, try packaging the Mac app as a DMG file. That format preserves symlinks as well.\n. Normally you'd run the app by typing open /Applications/dcapp.app, not /Applications/dcapp.app/Contents/MacOS/Electron.\n. Test and squash. Enjoy.\n. Yeah, I can see it's getting messy. But if this logic didn't live here, it would have to live somewhere.\nIf a \"user\" is an app developer (e.g. me), then the user doesn't want to handle it all. The package.json for my app is at https://github.com/erkyrath/lectrote/blob/master/package.json . As you see, the scripts section isn't short, but it's tidy, and it's all I need to package my thing.\n(I chose to have five separate script lines rather than using \"all\". That's on me.)\n. I'll take a look tonight.\n. Sorry, the merge message got duplicated there. I tried to fix it and it got worse, so I'm not touching it any more.\n. I did a rebase, and then git told me that origin had a new commit that I had to pull, so I did, then I rebased that, then git told me that origin had a new commit... then I realized I was stuck in a time loop so I gave up.\n. The code is right (and the pull didn't change it). Feel free to rearrange the commits however you like.\n. (Or I could just force-discard that last commit entirely)\n. I tried git reset --hard HEAD^, git push -f and I think it worked. Sorry about the mess. I am not one of nature's rebasers.\n. Yah, I don't know. Travis checks just succeeded on exactly the same code as the checks that just failed. Looks like a timeout error? A transient problem? I hope so because it's bedtime here. :/\n. What went wrong when you had the writeFileSync lines?\n(Those calls are not me; it's been writeFileSync for many releases, looks like.)\n. Someone could file a bug like that today.\nI agree that it's desirable to permit (not require) a split between human-readable name fields (CFBundleName, CFBundleDisplayName) and filesystem names (CFBundleExecutable). And I'd rather do it with an additional (optional) option than have the packager try to transform my input into a \"safe\" format. \n. Nearly all Mac apps are not meant to be started up from the command line. If you're building one that is, I think it's in your lap to either not use spaces or document for your users how to quote spaces.\n. Okay, added fixture and test as described.\n. I ran into this, and found that the error went away if I dragged the old version of the app to the trash (via the Finder) before installing the new version. (I don't know if this works for everybody.)\n. Speaking as the person who added extend-info in the first place... we have a bunch of ways to name the app. The name field from package.json is the default; you can override this with the name argument.\nSince the name winds up being used in a bunch of places (including Info.plist and various filenames in the package), it is best for electron-packager to know the name and set it everywhere. (Rather than allowing extend-info to change it behind the packager's back.) This is the plan behind the original design, anyhow.\nIt sounds like you want to set the name argument to a PascalCase string.\n. You're talking about the title attribute of the BrowserWindow? That cannot affect the app name in the menu bar, because an Electron app can run without any BrowserWindows open. Or you could have an app with several BrowserWindows, each with a different title.\n(I do this. My app, Lectrote, is an IF interpreter. You can have several IF games open in different windows; each window has the game name for a window title. But the menu bar name (and the dock icon name) is always \"Lectrote\".)\n. @ JimiC: I think you are confusing the window title name (which appears in the Window taskbar, and also above the menu options) with the app title name (which appears in the Mac menu bar and also in the Mac dock). When you set the name option, the app title will never appear as \"Electron\", but window titles still default to \"Electron\".\n. In any case, it sounds like your objection is not the \"Electron\" column in the above comment, but the use of productName versus name for... hm. I'm still not sure.\nMy basic position here is \"You should use the name argument to set CFBundleDisplayName; that's what it's for.\" You don't want to do that because the name also appears as the containing folder? Do you mean the one that winds up as NAME-darwin-x64?\n. Is this addressing https://github.com/electron-userland/electron-packager/issues/387 ? \n. ",
    "JamesKyburz": "@malept will do.\n. @malept Sorry about the commit message. I have now added a description :)\nHow about only excluding arm for versions < 0.29.0 when using the --all flag.\nThat way when building with --all flag prior to version 0.29.0 no arm build will be attempted.\nAnd an explicit build of --platform linux --arch arm will fail with 404 if used in combination with an unsupported version.\n. @malept I will update the pull request and let you know when it is ready to check.\n. @jden I had a look at the tests. It seems at present all the tests run using electron version 0.28.3.\nShall I add a new file that tests both < 0.29.0 and latest?\n. I have now updated the pull request and added tests.\nThe default version for tests is now the now the latest version (0.30.1) of electron, I hope this is ok?\nPlus I added 0.29.0, 0.28.3 to test/multitarget.js testing when arm is and isn't available.\n@maxogden I haven't changed the name of arm to armv7l yet...\nI agree that the name should match the architecture and arm is too vague.\nHowever even though electron only supports armv7l it's download file suffix is linux-arm not as iojs :(\nEither way we will have to change something if electron supports more that one arm architecture.\nShall I leave be or change to armv7l?\n. @maxogden nice!\nIdeally if electron adopt the iojs way, it would be nice if they could also add the armv7l files retrospectively.\nWill wait and see!\n. ",
    "robertely": "I was just hunting around seeing if i needed to do this my self. Thanks James!\n. ",
    "ebonet": "What's the status on this? Trying to build for raspberry pi 2, even though electron supports arm the packager doesn't.\n. ",
    "miladsajjadi": "is there any update for this issue?\n. ",
    "quicksnap": "Looking at code, probably fine to just add the key--if it's undefined it won't affect electron-download\n. I can add those, but LMK if you'd accept something like this first =)\n. Also, for context, I desire this because we'll be rolling a customized electron build, and overriding the cache would make things easier for me.\n. Cool--I'll write up changes tomorrow.\n. Updated PR with documentation and adjustment to the implementation\n. Any update? Good to merge? =)\n. @malept With asar set to false, it does copy the dotfile.\n. I ran a test with NCP and that seems not to be the problem. I'll experiment with the asar module.\n. I ran a minimal test with electron-packager and I think this is my own bug somehow. I'll check more things on my end. Sorry for taking up your time! Thanks, though.\n. Ok! This simply bumps electron-download now\n. Roger! All done. Thanks!\n. ",
    "subblue": "I was having issues with Flash not working until I added 'web-preferences': {'plugins': true} to the new BrowserWindow() options. This was with version 0.31.0\n. ",
    "wolfflow": "Thanks, but I have this flag set already.\nhttps://github.com/hokein/electron-sample-apps/blob/master/pepper-flash-plugin/main.js#L35\n. atom/electron#2457\n. ",
    "asual": "I'm hitting this only when using the \"--asar\" option.\n. ",
    "FrancisVarga": "Hi i have the same issue and i actually remove the --asar flag already still flash plugin can't be detected\n. @jespermjonsson i'm using:\n\"electron-packager\": \"^5.1.0\",\n. ",
    "jespermjonsson": "I had the same issue, but after upgrading electron packager from 4.2.0 to 5.1.0 the \"X Helper EH.app\" was named with the correct application name and \"navigator.plugins\" is now populated (even with --asar flag).\n. ",
    "hokein": "Verified it works on electron-package v5.1.0 with  https://github.com/hokein/electron-sample-apps/tree/master/pepper-flash-plugin sample:\nelectron-packager ./ flash --asar --platform=darwin --arch=x64 --version=0.34.0\nBut it won't work with --asar option.\n. @malept  sure, done.\n. > Could you rename dir1 to something like subdir_name, to make it less similar to dir?\nDone now.\n. No, this option won't work with a regex.\n. Not totally. The value of asar-unpack-dir not need to match the beginning of the absolute file path of sourcedir. It assumes it is under the sourcedir.\nFor example:\nelectron-packager /your/path/to/app app_name --asar-unpack-dir=dir1\nThis will unpack the /your/path/to/app/dir1 directory.\n. Done. \n. Oh, yes. \n. Fixed :+1: \n. ",
    "patricksebastien": "@hokein My app is working when using npm start, but not when packaging the app. Do I have to copy PepperFlashPlayer.plugin after packaging my app? I tried many folders in Contents... Did you want to say that it is working only without the --asar option?\nWhat should the path be:\napp.commandLine.appendSwitch('ppapi-flash-path', 'PepperFlashPlayer.plugin');\nor\napp.commandLine.appendSwitch('ppapi-flash-path', './PepperFlashPlayer.plugin');\n. @positlabs Yes did that but how to call the plugin, I tried:\napp.commandLine.appendSwitch('ppapi-flash-path', __dirname + '/../app.asar.unpacked/PepperFlashPlayer.plugin');\nnot working...\n. ",
    "positlabs": "@patricksebastien I've found that binaries can't be run from inside of an asar package. Try moving the plugin to asar-unpacked dir.\n. This is how I determine the path to a bin in app.asar.unpacked: __dirname.replace('app.asar', 'app.asar.unpacked') + '/gifsicle'\n. @sethlu @malept, if you're ever in Oakland, CA, I owe you a beer!\n. Nice, thanks!\n. We need a codepen analog that supports node modules!! How cool would that be?\n. v0.36.8. I'll add as a comment in the original post, too\n. Tried adding this key to entitlements, but I'm still seeing the error.\n<key>com.apple.security.temporary-exception.files.absolute-path.read-write</key>\nAlso attempted a build using Electron v0.35.6, to no effect.\nI'm using ffmpeg v2.8.6 via prebuilt binaries. It works fine just running electron directly, but fails in the signed app.\nI suppose i could lose this feature of having a cached output directory (instead, write to one of the specific document folders that is allowed), but it seems silly that it's not allowed. \n. That did it! Thanks @sethlu!\nI think i remember reading something about apple not liking when apps use that entitlement, though. Seems like it's just a convenient way to circumvent their file i/o security model. I will try submitting to mac app store and see what they say!\n. @sethlu what is the reason behind using v0.35.6 for mas builds? \n. Hmm. I'm not seeing that issue when i build with v0.36.8, but I will follow your recommendation, @sethlu.\n. Is that an issue in regards to sandboxing? Or acceptance to the app store?\nI'm a web dev, by trade. Not too familiar with native dev stuff. Jumping hurdles as they come :)\n. @jasonhinkle let me know how it goes! I'm going to try submitting by the end of the week.\n. First attempt: REJECTED!\n\nI tried using app-scope bookmarks since the docs describe the exact issue I'm trying to solve.\n\nSecurity-Scoped Bookmarks and Persistent Resource Access\nYour app\u2019s access to file-system locations outside of its container\u2014as granted to your app by way of user intent, such as through Powerbox\u2014does not automatically persist across app launches or system restarts. When your app reopens, you have to start over. (The one exception to this is for files open at the time that your app terminates, which remain in your sandbox thanks to the OS X Resume feature).\nStarting in OS X v10.7.3, you can retain access to file-system resources by employing a security mechanism, known as security-scoped bookmarks, that preserves user intent. Here are a few examples of app features that can benefit from this:\n- A user-selected download, processing, or output folder\n- An image browser library file, which points to user-specified images at arbitrary locations\n- A complex document format that supports embedded media stored in other locations\n\nhttps://developer.apple.com/library/mac/documentation/Security/Conceptual/AppSandboxDesignGuide/AppSandboxInDepth/AppSandboxInDepth.html#//apple_ref/doc/uid/TP40011183-CH3-SW16\n@sethlu It seems like this is probably an issue with Electron mas builds. What do you think? Should I file this issue over at https://github.com/atom/electron ?\n. I am using the dialog module to let the user select an output directory. That works as expected, and the files are saved out with no problem. The problem is that this permission isn't persisting across sessions. I think I need a way to store this path as a bookmark.\nThis article describes the process of storing bookmarked paths. It seems like some logic will need to be added to Electron before this works automatically.\n. @jasonhinkle any luck on submitting that custom ffmpeg build? I've tried submitting without customizing and apple flagged it immediately.\n\nthe use of non-public APIs can lead to a poor user experience should these APIs change in the future, and is therefore not permitted. The app includes ': SecIdentityCreate' from the framework '/System/Library/Frameworks/Security.framework/Versions/A/Security'.\n. I'm going to close this since it will be resolved by https://github.com/atom/electron/issues/4637\n. Awesome! I'll give it a shot and let you know if it works.\n. @jasonhinkle when I try using that build of ffmpeg in my app (even non-packaged, unsandboxed), it dies. \nError: ffmpeg was killed with signal SIGTRAP\n. Sorry, I copy/pasted the version without thinking. It's actually being pulled straight from the electron-prebuilt package.json. \n\nversion: require('./node_modules/electron-prebuilt/package.json').version,\n. I was requiring electron-packager in a non-standard way, and I think it was causing some issues. I've npm installed it like a responsible adult, and now the first error is resolved. \nThe last error in that list is unrelated to asar. It's only there after signing/packaging. Probably another issue with sandboxing.\nI suppose I'll ignore it for now since it seems harmless. Wish me luck on the next submission! Thanks for your help!\n. See #35 and related issues.\n. You could always sign manually, as described here: http://electron.atom.io/docs/v0.36.8/tutorial/mac-app-store-submission-guide/#sign-your-app\n. Agreed. Makes sense to group them. \nI'm imagining something like this:\n'osx-sign': {\n  'identity': {String},\n  'entitlements': {path},\n  'entitlements-inherit': {path},\n  'binaries': {Array of paths}\n}\n. I'm pretty busy this week, but I can pick it up this weekend.\n. @malept, sorry, I meant identity, not bundle-identifier.\nI kind of started working on this. Here is my progress, in case it helps: https://github.com/positlabs/electron-packager/blob/master/mac.js#L162-L166\nThere is some extra logic for handling identifier. I think ideally we would copy the whole osx-sign object and pass it to electron-osx-sign without modification. Maybe this warrants an update to osx-electron-sign?\n. Do you think this would work? I want to use the whole osx-sign object so it can serve as a passthrough to electron-osx-sign\n```\n      var signOpts = opts['osx-sign']\n  // --osx-sign from CLI or osx-sign: true from API \n  if(signOpts === true){\n    signOpts = {\n      identity: true\n    }\n  }\n\n  // assign additional options from main opts\n  if(typeof signOpts === Object){\n    signOpts.app = finalAppPath\n    signOpts.platform = opts.platform\n  }\n\n``\n. Looks good. Should we add docs forbinariesandverbose? \n. Sure, I can do that now\n. I can't figure out how to grab this branch. Maybe I have to be an org member? Anyway, here's a snippet from theelectron-osx-sign` docs.\n``binaries` - Array\nPath to additional binaries that will be signed along with built-ins of Electron. Default to null.\nverbose - Boolean\nVerbose flag, to display logs. \n```\n. Huh, deleting the repo and re-cloning did the trick.\nFor the sake of brevity, and the fact that these options are documented elsewhere, I think we should only add docs for binaries.\n. I have added a few lines here, but I'm unsure of how to merge into this PR.\n\n(However, we are not taking into account that a mas distribution needs signing before going submitted.)\n\n@sethlu I think we can allow mas builds to be unsigned in case the user wants to implement their own solution\n. @sethlu is there a reason to sign darwin with entitlements? From what I understand, entitlements are only needed for mas builds, right? \n@malept I can start working on implementation. Likely push tomorrow morning\n. Oh, I hadn't considered that! \nI have some changes here. I tested building my app, and code signing is successful according to spctl.\nWould there be any reason to allow the user to override platform or app if those options are included in osx-sign? Should we throw a warning/error if they attempt to? Or should we add logic to allow it? I vote we warn. If they want to really fiddle with the options, they can use electron-osx-sign directly.\n. @malept, thanks. I'll add that warning. \nBack to @sethlu's comment on mas distributions...\n\n(However, we are not taking into account that a mas distribution needs signing before going submitted.)\n\nShould this be handled in a separate PR? I'm not sure how to address it.\n. I made a noob mistake and assumed npm install would pull in my local version of electron-packager even though version hadn't changed. My previous test was invalid.\nosx-sign is borking on binaries because they are not done copying before it runs. I'm copying a binaries folder with the asar-unpack-dir option. Is there a way we can run this copy op before signing?\nI added some warnings, and my code is here https://github.com/positlabs/electron-packager\n. @malet, yep, on that branch.\nI've realized that the issue is that the files are actually in the temp build directory, and not the final path. \nOne solution would be to resolve the binaries paths to the temp dir. This adds more logic, but I'm not sure of any other way.\n@sethlu do you have any ideas?\n. I swear I remember needing to sign these binaries for some reason, but maybe not. Using unsigned binaries in asar-unpacked doesn't seem to affect the .pkg or the .app during runtime, but I will try submitting a test build.\nI'm using a lib, node-fluent-ffmpeg, which uses child_process.spawn(), which requires the binaries to live in the asar-unpacked dir according to this. \nI suppose I could go without asar, but I think this is an issue worth solving. I just submitted a test build with unsigned asar-unpacked binaries, and no errors came up in the upload process. I think that means the code signing was successful.\nIs there ever a reason to sign extra binaries? \n. @malept, yeah that's all. It just doesn't work because of temp dir path. I'm not even sure if it's really needed, but @sethlu might know more.\nI can add a warning against it, and comment it out of the docs. I agree it shouldn't hold up v6 any more.\nhttps://github.com/positlabs/electron-packager/tree/osx-sign-single-param\n. FWIW, I was seeing this same error when I tried building without an .ico file in the same directory as the .png specified in the config.\n  \"electronPackagerConfig\": {\n    \"packageManager\": \"npm\",\n    \"icon\": \"./src/assets/imgs/icon-1024.png\"\n  },\n\n\n. ",
    "kevinsawicki": "Closing this out, the specified path to the flash plugin must in the app.asar.unpacked folder if are using the --asar option to packager. You can use the --asar.unpack options of packager to make that happen.\nRefs https://github.com/electron/electron/issues/1802\n. The ... and 1 more message is a bug in nugget, the library used to download Electron, https://github.com/maxogden/nugget/issues/16\nIf you make your terminal window bigger then you should see more output about the download and packaging happening.\n. This looks like a path require issue with the app code itself, not related to electron packager. You may want to inspect the __dirname value in the dev tools Console to check the directory path that relative paths will be resolved against from your app's main module.\nPlease comment if you are still able to reproduce this, and if so, please provide a sample app that reproduces the issue, thanks.\n. Electron 0.37.4 is now out so default_app.asar is now present in that release.\n. @malept What Electron version do the basic tests run against by default? Is the current test in this pull request not sufficient?\n. Thanks for adding the spec :+1: \n. Can this be closed now? It doesn't seem to be happening once #452 was merged with the npm install --no-bin-links change.\n. Got specs passing on Travis CI using wine, https://travis-ci.org/electron-userland/electron-packager/builds/153046665\n. > The question becomes, is it consistent, or will tests time out sometimes?\nYeah, since this PR causes way more tests to call rcedit via wine and the build passed on all 3 macs in the matrix configuration, I'm optimistic that things will be consistent given the new way wine is being installed and configured.\nI haven't seen any failures on https://travis-ci.org/kevinsawicki/wine-darwin once the WINEDLLOVERRIDES env var was set which is also set now in this PR.\n. @malept I've updated usage.txt, thanks for the review \ud83d\udc4d \n. > That is a bit odd conceptually, but if it works, it works.\nYeah, agreed, it seemed to kind of mesh with the setup/teardown as tap tests used elsewhere.\nIt could just handle the errors explicitly and do a manual process.exit when downloading Electron or npm installing fails if you think that is a better approach.\n. > I like that better.\nUpdated \ud83d\udc4d \n. @malept Looks like the latest round of builds all pass, \ud83d\udea2 \u2754 \n. >  any comments/concerns you have on either the concept or the changes would be much appreciated.\nMy instinct is to keep 32-bit as the default arch instead of the host arch (which is presumably 64-bit since developers commonly use 64-bit machines). When unspecified, I'm assuming the person wants a package that will work on the most machines possible, and 32-bit will work more places than 64-bit.\nFor platform though, the host platform sounds like a great default that people will expect \ud83d\udc4d \n. > I believe that Windows 32-bit executables will run on 64-bit machines \nYup, that is my understanding as well.\n\nbut in order for Linux 32-bit executables to run, the whole 32-bit glibc/etc stack also needs to be installed (e.g., dpkg --add-architecture i386)\n\nOh, interesting, didn't realize this.\nSince it seems like the better default on Linux is the host arch, and their is no 32-bit on macOS, the host arch is the better default.\nOne question, if I am on 32-bit Linux and Windows, and I request to build for macOS with no arch specified, will it still build a 64-bit version of mac since their is no 32-bit, or would it error about 32-bit mac being unavailable?\n. > Side note, you should use the PR template, if only to provide a good example for potential contributors \nThanks for mentioning that, will do in the future \ud83d\udc4d \n. > This would have been a good PR to select \"squash and merge\" on.\nSorry about that, will do in the future, thanks for mentioning it \ud83d\udc4d \n. > do you see any potential issues with adding this regex to the default ignore list?\nLooks good to me \ud83d\udc4d \nSomewhat related, here are the native module build folder ignore patterns Atom uses:\nhttps://github.com/atom/atom/blob/c45b978816c111837753dbc4fe9f762e522a2c24/script/lib/include-path-in-packaged-app.js#L43-L49\n. > Interestingly enough, this only happens on the OSX workers.\nLooking into this now, I think it is possibly related to the nugget upgrade in electron-download which seems to have some bug or issue on macOS Travis workers where the download progress bar runs out of memory.\n. @malept this pull request addresses the crashes and gets the specs running again on the Mac workers, still seeing some unrelated flakiness though :(\nYou good with this change?\n. That would make is a little confusing to me, since that would then have both a dasherized app-version and camelcased appVersion in the opts object.\nIt would seem better to fix them all as a group via #325\n. Yeah, this was just an attempt to see what could be causing it to fail on CI, will revert after investigating more.\n. :fire:\n. @malept are you okay enabling this on Travis to help debug this flakiness? I haven't been successful in getting a failure in this pull request, so I'd like to enable this temporarily on master until we figure things out.\nIt will make the output more verbose in the Travis reporter, but should hopefully give more insights in to where/when the failures are happening.\n. Are you okay with the other changes in this pull request, the added debug calls? If so, I'll merge this if the build passes.\n. Good call, added it, I put it behind a debug.enabled check though just to ensure calling JSON.stringify on the opts wouldn't negatively impact performance or throw an error unless DEBUG is set.\n. Do you think this should this go after ignore now to keep things alphabetical?\n. ",
    "heruputra": "Any update of this?. ",
    "jhbsk": "I can also confirm this issue is happening with me when building for electron version 0.34.1 with electron-packager. Windows and Linux (both 32bit and 64bit) are working fine - only Mac64bit is having this issue.\nWhich version of electron-packager are you using?\n^5.0.0\nWhat cli arguments are you passing?\nelectron-packager ./ $APPNAME --platform=all --arch=all --version=0.34.1 --out=$OUT --icon=./resources/icon.png --app-bundle-id=$APPNAME --app-version=$VERSION --version-string.CompanyName=\"$APPNAME\" --version-string.ProductName=\"$APPNAME\" --version-string.ProductVersion=\"$VERSION\" --prune --overwrite --asar --ignore=\"platforms|hooks|plugins|node_modules|desktop/(locales|.dat|electron|.so|.bin|version|license|lib)\nWhat platform are you running electron-packager on? What platform(s) are you building for?\nRunning electron-packager on platform Ubuntu 14.04 LTS (64 Bit)\nBuilding for Windows, Linux and Mac. Only Mac 64 bit has the issue\nIs there a stack trace in the error message you're seeing?\nNo error message, everything builds fine\nIf possible, please provide instructions to reproduce your problem\nNo specific instructions, except running the cli arguments on the command-line/Terminal, then trying to run the app on Mac Yosemite\n. ",
    "matthiasg": "ok .. i currently dont have time to investigate any further, but the issue seems to be in the calls made to fs.symlink from somewhere inside the code. It tries to e.g link to inside the downloaded darwin electron release, but that the path is actually resolved incorrectly. e.g instead of downloading and unzipping electron-v0.35.0-darwin-x64.zip and then creating actual junction (or file/dir) symlinks what gets created are paths relative to the current working directory. \n. the links created arent real sym-links though (just shortcuts), so even if you pack the resulting folder with admin privileges it doesnt work on osx then.\n. It also seems to be the case that the fs.symlink calls are setup incorrectly. e.g when dumping the calls i get the following args:\n[ 'c:\\\\Development\\\\Test\\\\electron\\\\Versions\\\\Current\\\\Mantle\\\\',\n  'c:\\\\Development\\\\Test\\\\electron\\\\Giftnotruf-darwin-x64\\\\Giftnotruf.app\\\\Contents\\\\Frameworks\\\\Mantle.framework\\\\Mantle',\n  [Function] ]\n[ 'c:\\\\Development\\\\Test\\\\electron\\\\A\\\\',\n  'c:\\\\Development\\\\Test\\\\electron\\\\Giftnotruf-darwin-x64\\\\Giftnotruf.app\\\\Contents\\\\Frameworks\\\\ReactiveCocoa.framework\\\\Versions\\\\Current',\n  [Function] ]\nwhere c:\\\\Development\\\\Test is my current working directory. The first parameter is the path to target to link to but those target folders dont exist. Even when i inject 'junction' into the parameters now (as would be helpful for windows (see https://nodejs.org/docs/latest/api/fs.html#fs_fs_symlink_destination_path_type_callback) it wont help obviously.\nWhere are these target folders supposed to be ? e.g Versions\\Current\\Mantle\n. this would seem to be related to https://github.com/maxogden/electron-packager/issues/117\n. ",
    "bitwombat": "This is happening with 5.1.1 as well.  Quite a show-stopper.  Can you suggest any workarounds for us to try until you have time to look at it?\n. I'm happy to try to create a testcase .  I think the hope by bug originators sometimes is that the error will be obvious to someone who knows the platform better than we do and we can avoid the hours it might take to create a reasonably simple testcase.\nMy info is very close to that posted above by jasdeepkhalsa \nHere it is in total.  Testcase to follow.\n- Which version of electron-packager are you using?\n  5.1.1\n- What cli arguments are you passing?\n  electron-packager . UF --platform=darwin --arch=x64 --version=0.34.2 --overwrite\n- What platform are you running electron-packager on? \n  Ubuntu 14.04.01 LTS (32-bit)\n- What platform(s) are you building for?\n  OSX 10.10.5\n- Is there a stack trace in the error message you're seeing?\n  No error on run of electron-packager.\n  Error when launching application on OSX: \nDyld Error Message:\n  Library not loaded: @rpath/Electron Framework.framework/Electron Framework\n  Referenced from: /Users/USER/Desktop/*/UF.app/Contents/MacOS/Electron\n  Reason: image not found\nI should note there's also a bug filed with electron https://github.com/atom/atom/issues/9114 (probably because neither originator was sure where the bug lay).\n. I'm petrified to report that OSX's connection to SMB shares is pathetically buggy.  I can't copy 2 GB folders from the share to my desktop without illogical errors (\"File Exists\" in the middle of the copy.  Reported by others since 2009).\nAnd, I can't run electron apps that reside on shares.  If I move them locally, they're fine.  So, OSX bug.  Disappointing!\nIf I zip up the app, move it local to the mac, unzip it, and run it, I have a different problem:  https://github.com/maxogden/electron-packager/issues/205\n. Oops - my /tmp is tmpfs so isn't very big.  electron-packager was running out of disk space on that file system.\nCan this location be settable, please?  And a nice failure message?\nI'm finding that a symlink pointing /tmp/electron-packager to /somewhere-bigger/electron-packager is getting blown away.  So I'm still stuck, even though I know the reason why.\n. Oh, beautiful.\nelectron-packager uses os.tmpdir() which, if I look at /usr/lib/nodejs/os.js I can see is:\nexports.tmpdir = function() {\n  return process.env.TMPDIR ||\n         process.env.TMP ||\n         process.env.TEMP ||\n         (process.platform === 'win32' ? 'c:\\\\windows\\\\temp' : '/tmp');\n};\nSo all I need to do is set TMPDIR (or TMP or TEMP) in my shell's environment before calling node-packager.  Long live open source!\n. Upgrading did the trick.  Thanks.  Should electron-packager have warned me about this?\n. But doesn't everything that electron-packager packages require electron?  I'm a n00b here, so excuse the ignorance.\n. Right, so I guess my point is that electron-packager could have saved me all the head-scratching, testcase generation, and debug, and saved both of us this conversation by saying \"You don't want to be using that version, dumbass\".\nInstead I had an app that worked fine with electron, but not fine once packaged.  Think of it from the 'dumb user' standpoint here.\n. Wait, what happened is that my main.js, copied from the docs, is what's requiring electron.... so, I'm at a loss here for how we could have prevented this whole thing.\nSo, user error?  I was looking at a doc version (with stock main.js) different than my installed version?\n. Thanks @maxogden.  I'm going to drum up a simple testcase.  I discovered module.paths.push, but it was crunch time and my approach was a lot of spray n' pray.  Back to you soon.\n. So where is the request module actually, relative to your application, and which of those module.paths.push is the one finding it?\nI think this information will help the devs.\n. I'm having luck moving the large multimedia content directory into place after packager's done its thing.  Should there be any consequences to doing that?\n\nIt would help to know what version of Electron Packager worked vs the version you're currently using\n\nAgreed, unfortunately I tried and somehow failed to save off my old node_modules so that I could fall back to it.  Apparently electron-packager was installed somewhere else.\n\nTry --no-tmpdir. \n\nWill try.. No difference with --no-tmpdir.\nIs moving the 32GB of files into the app dir after the fact OK?. Oops, sorry @malept.  Am building for darwin, but not signing.. Thanks for the branch and instructions @MarshallOfSound .  I've got a reasonable workaround and don't have time on this project to experiment further.  I'm happy if you guys are convinced this won't be a problem in the near future.. ",
    "Jmales": "I'm having the exact same problem, read the whole thread and can't figure out what's the solution. Anyone knows?. ",
    "eminoda": "````\nProcess:               electron-quick-start [4512]\nPath:                  /Volumes/VOLUME/*/electron-quick-start.app/Contents/MacOS/electron-quick-start\nIdentifier:            com.electron.electron-quick-start\nVersion:               1.0.0 (1.0.0)\nCode Type:             X86-64 (Native)\nParent Process:        ??? [1]\nResponsible:           electron-quick-start [4512]\nUser ID:               501\nDate/Time:             2017-08-16 10:54:46.411 +0800\nOS Version:            Mac OS X 10.12.5 (16F73)\nReport Version:        12\nAnonymous UUID:        566A3EB1-5328-E549-E60C-1D5D75EDADFA\nDyld Error Message:\n  Library not loaded: @rpath/Electron Framework.framework/Electron Framework\n  Referenced from: /Volumes/VOLUME/*/electron-quick-start.app/Contents/MacOS/electron-quick-start\n  Reason: no suitable image found.  Did find:\n    /private/var/folders/q5/s2_05hcn0tz5j4bvdhbp0s9m0000gn/T/AppTranslocation/957472A0-9C27-4A39-9C19-99671AAD07CB/d/electron-quick-start.app/Contents/MacOS/../Frameworks/Electron Framework.framework/Electron Framework: file too short\n````\n\"electron\": \"^1.7.5\"\npackage on window10 64bit\uff0ccannot run on Mac\uff08when use \u2018electron-packager . --prune=true --overwrite --platform=darwin --arch=x64 --out=out --asar --icon=./favicon.ico\u2019\uff09. @malept  tks for your reply\u3002\nlooked the api\uff0cu say prune can ignore node-module\u3002\nbut in \u2018electron quick start demo\u2019 didnt work\uff1f\ni tryed this way:\n\"scripts\": {\n    \"start\": \"electron .\",\n    \"win\": \"electron-packager . --prune=true --ignore=src --ignore=e2e --overwrite --platform=win32 --arch=ia32 --out=out --icon=favicon.ico\"  \n}\nbut in out node-modules still have logger\nmy package.json\uff1a\nhttp://chuantu.biz/t6/13/1503216794x1700615998.png\nresult\uff1a\nhttp://chuantu.biz/t6/13/1503216941x2918527080.png. here is my sample:git@github.com:eminoda/angular4-electron.git\nnpm run win\nout/xx/node_modules,have another modules,i just think there are logger &log4js in node_modules. thanks a lot. thanks. u are my god  @MarshallOfSound . but i want to ignore src in root dir.how can i do\uff1f\ni try this '--ignore=src --ignore=^node_modules/debug/src'\nbut this result is 'src' all ignore @MarshallOfSound . ",
    "Almenon": "I had this error when building on Windows and trying to open in mac.  Building on Mac fixed it.\n\nElectron version: ^1.8.1\nElectron-packager version: 9.1.0\nArguments: electron-packager . --overwrite --platform=darwin \n\nhttps://github.com/Almenon/AREPL/issues/46. ",
    "kevlened": "I fixed the issue. There was some confusion about how to define the protocols. The scheme defines what is recognized as the custom protocol, not the name.\noptions: {\n        name: 'MyApp',\n        dir: 'app',\n        out: 'dist',\n        version: '0.25.3',\n        platform: 'darwin',\n        protocols: [{\n            name: 'MyApp',\n            schemes: ['myapp']\n        }],\n        arch: 'x64',\n        overwrite: true\n    }\n. ",
    "sheerun": "+1\n. ",
    "pyro2927": ":+1: Would love to see this as well.  We've had build-sizes compound a few times before realizing it wasn't ignoring --out in between builds.\n. > I also suspect it may be possible to normalize this into ignore up-front rather than every single time the filter runs, which could be a lot.\nMy JS-fu is definitely not as good as my ruby-fu, but isn't that what is happening now?  Previously var ignore = ... was being run each time the filter function was called, and now that's only being hit once (as well as the adding in of the ignore dir).  Do you want it normalized in a different spot?\n\nWould using path.resolve on the output directory and the cwd and comparing the two be a better idea?\n\nIt would be.  I may be able to redo it with that method.\n\nCould you add a test?\n\nI can try.  I've been writing JS tests for about two days, so I can't promise greatness.\n. Sadly I don't have time for tests. My current job is keeping me incredibly busy.\n. ",
    "buddingmonkey": ":+1: \n. @dylang Protocols are a good start, but also file handlers would be nice. Even if we can't use a custom info.plist file, maybe we could specify additional parameters. This would allow for generic additions to the plist.\n. ",
    "sleepygarden": "I've written a little build.js script which doesn't rely on npm as a module (sort of, it uses the global npm cli) and can pinpoint both the local and latest version and handle timeouts.\n``` js\nfunction run_cmd(cmd, args, callBack ) {\n    var spawn = require('child_process').spawn;\n    var child = spawn(cmd, args);\n    var resp = \"\";\nchild.stdout.on('data', function (buffer) { resp += buffer.toString() });\nchild.stdout.on('end', function() { callBack (resp) });\nreturn child;\n\n}\nfunction latestElectronVersion(versionCallback){\n    var proc, timeout;\n    console.log('Looking up latest Electron version...');\n    var proc = run_cmd('npm',['view','electron-prebuilt','version'],function(versionString){\n        versionCallback(versionString.trim());\n        clearTimeout(timeout);\n    });\n    timeout = setTimeout(function() {\n        console.error('Latest Electron version lookup timed out');\n        proc.kill();\n        process.exit(1);\n    }, 1000 * 10); // 10s\n}\nfunction localElectronVersion(versionCallback){\n    console.log('Looking up local Electron version...');\n    run_cmd('npm',['list', 'electron-prebuilt', '--json'], function(json){\n        versionCallback(JSON.parse(json).dependencies['electron-prebuilt'].version);\n    });\n}\n```\nI use this as part of my build script, and I plan on moving more build options to my package.json to help center my configs:\njs\nvar package = require('./package.json');\nlatestElectronVersion(function(version){\n    build({\n        'platform': 'darwin',\n        'arch': 'x64',\n        'version': version,\n        'name': package.name,\n        'app-version': package.version,\n        'dir': './',\n        'out': './build',\n        'ignore': '\\.\\/build',\n        'overwrite': true,\n        'icon': 'Icon.icns',\n        'prune' : true\n    });\n});\nbut I think it'd make more send to have  --version=local and --version=latest options and default to local when none is provided. \n. ",
    "remexre": "It looks like I'm able to get a two-fold speedup on my system. I've got an SSD on /, and an HDD on /home. I'm performing the build in /home/tmp/<whatever>, but I'm not sure if this uses system directories.\nall\n[01:42:34] Starting 'package'...\nPackaging app for platform linux ia32 using electron v0.31.0\nPackaging app for platform win32 ia32 using electron v0.31.0\nPackaging app for platform darwin x64 using electron v0.31.0\nPackaging app for platform linux x64 using electron v0.31.0\nPackaging app for platform win32 x64 using electron v0.31.0\n[01:42:48] Finished 'package' after 14 s\n[ \"darwin-x64\", \"linux-ia32\", \"linux-x64\", \"win32-ia32\", \"win32-x64\" ]\n[01:39:41] Starting 'package'...\n[01:39:41] Starting 'package:darwin-x64'...\n[01:39:41] Starting 'package:linux-ia32'...\n[01:39:41] Starting 'package:linux-x64'...\n[01:39:41] Starting 'package:win32-ia32'...\n[01:39:41] Starting 'package:win32-x64'...\n[01:39:41] Finished 'package' after 7.93 ms\nPackaging app for platform linux ia32 using electron v0.31.0\nPackaging app for platform linux x64 using electron v0.31.0\nPackaging app for platform win32 ia32 using electron v0.31.0\nPackaging app for platform win32 x64 using electron v0.31.0\nPackaging app for platform darwin x64 using electron v0.31.0\n[01:39:48] Finished 'package:win32-ia32' after 6.89 s\n[01:39:48] Finished 'package:linux-x64' after 6.93 s\n[01:39:48] Finished 'package:linux-ia32' after 6.97 s\n[01:39:49] Finished 'package:darwin-x64' after 7.63 s\n[01:39:49] Finished 'package:win32-x64' after 7.73 s\n. Oh, because it's relevant: ~/tmp isn't a tmpfs, it's a normal directory.\n. ",
    "krishnaIndia": "Cheers @maxogden! I have fixed the style issue\n. Makes sense @malept. I will try to make those changes and push again.\n. Closing this. A new PR is raised for the same https://github.com/maxogden/electron-packager/pull/126\n. asar-unpack usage is added to usage.txt and readme.md\n. ",
    "RIAEvangelist": "Do we have to do a special build with  the .icns format just for OSX or can we still do a build for all platforms with that format? If a special build is needed it would make sense to add a conversion tool, like png to icns to support uniform implementation when the 'all' member is set to true, or non OSX builds are mixed with OSX builds.\n. Wow @kfranqueiro ! Sweet knowledge share there! That is indeed very important to be documented.\n. @jlord  Here's a snippit from my video player its in main.js :\n```\napp.on(\n    'ready',\n    function() {\n        player = new BrowserWindow(\n            {\n                title:'Electron Video Player',\n                'accept-first-mouse':true,\n                width: 640,\n                height: 480,\n                'min-width': 640,\n                'min-height': 480,\n                frame:false,\n                icon:__dirname+'/img/logo-256.png',\n                'text-areas-are-resizable':false\n            }\n        );\n    player.loadUrl('file://' + __dirname + '/player.html');\n\n    //player.openDevTools();\n\n    player.on(\n        'closed',\n        function() {\n            player = null;\n        }\n    );\n}\n\n);\n```\nyou can see where I set the linux icon.\n. agree @ mention file format.\nOh yeah, I forgot #90 is how I got my linux apps to work. Does this work on all platforms as well? I know it wont update the binary logo on those systems, but it would be smart to always do that if so.\n. ",
    "jlord": "I updated the PR to have a list stating the OS X and Windows filetypes. \nI have no idea how Linux is supposed to be done? Do users need a .desktop file? \n. @malept Hmm. I read that thread but it wasn't clear to me and I had tried with a .png. But I will try again not passing in --icon at all and just relying on the png in BrowserWindow .\n. @malept the thing I'm testing/trying for is an app icon in the file manager and dock on Ubuntu.\n. @RIAEvangelist Hmm, really not sure what I'm doing differently but that doesn't work for me. I'll open another issue for this specifically so we can clear it up and add it to the docs.\nOtherwise @maxogden this PR is good to go for at least specifying the filetypes for OS X and Windows. \n. > directory name typo\nGahhhh :relaxed: Ok, works in dock now :100: Thank you!\n\nIt's not going to show up in the file manager, because I don't think there's a(n XDG) standard for icons in binaries.\n\n~~Hmm. I don't know much (anything) about this as of yet, but if Atom has it then everyone should be able to have it :smile: so I'll try and dig into it this week at work.~~ Just kidding! Atom doesn't have it either. All is fine as it was :+1: \n. Looks like this was intended to be closed in #150. \n. Since the updates in #247 allow you to effectively do both default and inverse (as suggested here) and there have not been additional updates to this thread, I think this may be safe to close? \n. @malept Oh yeah, of course! Our oversight. I'll add that \ud83d\udc4d \n. ",
    "lipis": "+1\n. @malept any chance we can merge that rather sooner than later?!\n. @jaanus Maybe you can help us?\n. @maxogden we might do that eventually if that PR is going to take some time (because it will get messy with more people working on the same project).. \n. :100:\n. Thanks.. I'll check it out\n. ",
    "herrmannplatz": "I don't know if its appropriate. Maybe there are good reasons for doing that. But personally i use hockeyapp and their recommended way for creating versions, in order to distribute beta builds. In this case release version and build version are completely different.\n. I updated my PR. It now set app-version and build version to the same value if no build-version specified\n. Should be fine now\n. I also had to add other properties than the ones that electron packager provides and ended up forking electron-packager to add options. But this doesn't scale.\nI kind of like the idea of specifying a custom plist, since it gives you the best control of what to add, without having to change the packager for every property. So instead of creating the plist on the fly, you would just copy this into the app folder.\n. If i don't get it wrong, i would suggest to do the following:\nnpm install electron-packager --save\nThen define the package script: \n\"scripts\" : {\n  \"start\": \"electron-packager . dist --platform=win32 --arch=x64 --version=0.33.3\",\n},\nI would also suggest to have npm start (electron .) for dev and npm package(electron-packager . ...) to bundle the app. \n. Having the full control over what to put into the plist would solve step 1 anyway. And as electron-packager already changes the Electron Helper, it would be just straightforward to do it also for the rest.\nI agree that especially the signing could be done in a different place. This is what i am doing right now.\n. That is strange since app-version should set the CFBundleVersionShortString. But in your case it sets the CFBundleVersion. I use electron-packager on a daily basis and it works fine. But i am not using it via command line.\n. Tried to reproduce it, but works fine in my case\nelectron-packager@5.1.0\n...\nelectron-packager ./ VersionTest --platform=darwin --arch=x64 --version=0.33.9 --app-version=0.0.4\n\n. I think electron module was introduces in version 0.35.0\n. ",
    "jaanus": "Hey guys, I\u2019ve been working a lot on iOS/OSX apps and also have dealt a lot with the version numbering questions. Yes, what @herrmannplatz says is appropriate about them \u2014 CFBundleVersion should be an increasing number, and CFBundleShortVersionString should be the \u201cactual release version\u201d, which also matches how Hockey describes their usage. And\u2026\n\nis it appropriate if CFBundleVersion defaults to app-version, if build-version is not specified?\n\nYes, it\u2019s fine. These two can be set to the same string if you don\u2019t wish/bother to specify a separate build-version.\n. ",
    "coreybruce": "I am still having the same issue but on Xubuntu, I had it showing a icon at one point but now its not and I used the --icon= option and still not working.\n. @malept can you please give a example on how to do it on the BrowserWindow\nThis is a snippet of my code \n });\n  // Create the browser window.\n  mainWindow = new BrowserWindow ({'width':1200,'height':900,icon: __dirname + '/icon.ico'});\n  // and load the index.html of the app.\n  mainWindow.loadUrl('examplewebsite.com');\n  mainWindow.setMenu(null);\n  // Emitted when the window is closed.\n  mainWindow.on('closed', function() {\n    // Remove mainWindow.on('closed', function() { if you want the menu back\n    // Dereference the window object, usually you would store windows\n    // in an array if your app supports multi windows, this is the time\n    // when you should delete the corresponding element.\n    mainWindow = null;\n  });\n});\n. @malept I tried adding in \nicon = NativeImage.createFromPath(\"#{__dirname}/icon-48.png\")\n  options =\n    icon: icon\n    width: 1280\n    height: 720\nso my code looks like this \napp.on('ready', function() {\n  icon = NativeImage.createFromPath(\"#{__dirname}/node_modules/icon.png\")\n  options =\n    icon: icon\n    width: 1280\n    height: 720\n  app.on('browser-window-created',function(e,window) {\n        window.setMenu(null);\n    });\n  // Create the browser window.\n  mainWindow = new BrowserWindow ({'width':1200,'height':900,icon: __dirname + '/icon.ico'});\n  // and load the index.html of the app.\n  mainWindow.loadUrl('http://examplewebsite.com');\n  mainWindow.setMenu(null);\n  // Emitted when the window is closed.\n  mainWindow.on('closed', function() {\n    // Remove mainWindow.on('closed', function() { if you want the menu back\n    // Dereference the window object, usually you would store windows\n    // in an array if your app supports multi windows, this is the time\n    // when you should delete the corresponding element.\n    mainWindow = null;\n  });\n});\nwhat do I do or do wrong?\n. Ah right I see and I also see now I need another dependency  \"NativeImage\" how do I get this?\n. I added it and NativeImage = require('native-image'); above it but the icon still hasn't come up, I even changed '/icon.ico')}); to '/node_modules/icon.ico')});\nThis is my code \napp.on('ready', function() {\n  app.on('browser-window-created',function(e,window) {\n        window.setMenu(null);\n    });\n  // Create the browser window.\n  NativeImage = require('native-image');\n  mainWindow = new BrowserWindow ({'width':1200,'height':900, icon: NativeImage.createFromPath(__dirname + '/node_modules/icon.ico')});\n  // and load the index.html of the app.\n  mainWindow.loadUrl('https://examplewebsite.com');\n  mainWindow.setMenu(null);\n  // Emitted when the window is closed.\n  mainWindow.on('closed', function() {\n    // Remove mainWindow.on('closed', function() { if you want the menu back\n    // Dereference the window object, usually you would store windows\n    // in an array if your app supports multi windows, this is the time\n    // when you should delete the corresponding element.\n    mainWindow = null;\n  });\n});\n. ok ill try that\n. Awesome that worked thanks so much!\n. WTF why is my Electron application 4.5 GB in size!??. I think I fixed it but that thanks for the heads up.. Nope the permissions are mine and didn't start happening until updates to Electron, Wine works fine also..\n\n. I also noticed after changing the rule from --all to --platform=all actually allows it to build the rest of the platforms besides Win32 & Win64 as well as it trying to build in /tmp and giving me permission errors forcing me to run my build script with sudo to build in the selected folder... No I don't use NFS or anything with my file system it's been the same it's a Electron bug from the updated version while before the update everything was fine when building my electron apps.. Um not sure on what the last version was but I am using the current version of electron-packager for electron v1.6.1, how would I check?\nthe script I am currently using to build is this once I have cd into the folder:\nelectron-packager . --platform=all  --icon=node_modules/icon.png --overwrite ExampleApplication. I figured out a fix by saving my files for the application, deleting node_modules, uninstalling nodejs and completely reinstalling nodejs and electron fixed the issue and can sucessfully build all version tho another minor bug is is none of the builds save any of the files I put into it for the application to work for example index.html, png files for icon ect but placing all the files in there make it's it run properly. Hmm why do I have to do that now? I use to just run electron-packager . exampleapplication --all --icon=icon.png --overwrite and it would build now I have to change it again and it needs sudo permission to put files into tmp? they really need to standarize this and stop changing things so much... Damn it I can't build the windows version again because of npm issues... this whole thing with electron is a complete mess.... Not trying to fight with you but it has changed because I just to do that command like that to build directly from the and it worked fine and shouldn't need to use sudo to build only to install software either npm or apt... fixed it by install electron-packager globally, weird tho I had installed in the node-modules folder in the application and it use to work fine on the older version, really annoying how things keep changing.. Also thank you that command does fix both issues :D. Okay thanks again for helping me. @malept I am using Electron 4.0.0 beta on Xubuntu 18.04 LTS with Node v10.12.0\nHere is what it looks like when compiled \nhttp://i.imgur.com/ezYmJKe.png\nMeanwhile using Electron 3.0.6 works just fine and compiles properly with electron-packager as you can see here\nhttp://i.imgur.com/Iu93L78.png. @malept It is runable yes bug yes. but it isn't correctly compiling. I will make a bug report on Electron to get this fixed.\nThank you for the help.. ",
    "Autre31415": "I've done some testing on this and found out icons can work under certain conditions (Without using native images) which I detail at:\nhttps://github.com/electron/electron/issues/6205\n. ",
    "spinico": "rcedit.exe command line has the --set-file-version \"1.2.3\" that should be used for this (instead of --set-version-string \"FileVersion\" \"1.2.3\" as the other property are defined).\nThe following added before the require('rcedit')(newExePath, rcOpts, cb) in win32.js should do it :\nif (opts['version-string'].FileVersion) {\n        rcOpts['file-version'] = opts['version-string'].FileVersion;\n}\n. Sorry about that, I'm trying to figure out where to put the test, should there be a win.js test file for this?\n. Added test file are required only on win32 platform. It uses native win32 functionalities to retrieve exe file metadata. For this, I needed to add a new dev dependency (rcinfo) to package.json.\n. For now the CI build fails when attempting to use wine to run the win32 tests. Is there something to setup on travis for this to work?\n. Ok, I'll revert that change.\n. I'll have a look, should be possible.\n. Sorry about that.\n. ",
    "alexanderhawley": "I should have mentioned it is the default menu bar, not a custom menu bar. Could it be that the packager detects that and automatically disables it, assuming non-debug mode?\n. @kfranqueiro, thanks for the breakdown. It still seems quite unexpected, and not well documented. I'll close this issue.\n. ",
    "soygul": "shrinkwrap fixes to latest possible minor versions due to the use of ^xxx convention (which is the problem here as they are currently broken)\n. I was talking about a clean build agent for instance: git clone ... npm install ... npm shrinkwrap and you have latest broken deps of ^ line. Fixing the first layer of dependencies at least provides basic defense.\n. Bundling and updating entire shrinkwrap file inside this repo would be a big burden for the developer..\n. Might be the problem: https://github.com/maxogden/extract-zip/issues/10\nDidn't try myself though, already using my own fork atm with the fixed deps.\n. :+1: \n. ",
    "tsur": "tested with 1.1.1 and works, nice job, thanks!\n. ",
    "ducky427": "This is the same issue as #133 \n. ",
    "jamen": "Yup, appears to work in the fixed version. :)\n. Oh wait, silly me...\nI could use --ignore=\"node_modules\" then use npm install --production on the generated package.\nEDIT:\nI also noticed there is already a --prune option...  Wow...\n. ",
    "dylang": "what about an optional handler that would pass the info.plist generated by electron-packager as a javascript object which we can modify and pass back?\npsedocode:\njs\npackager({\n...\nplist: function(plist) {\n  plist.CFBundleURLTypes = [{\n    CFBundleURLName: 'OpenHelper',\n    CFBundleURLSchemes: [ 'custom' ]\n  }];\n  return plist;\n}\n...\n}, cb);\nNote: I don't know enough about info.plist to know if it can easily be expressed as a javascript object and then translated back to xml.\n. @maxogden Do you mean like plist? I didn't realize you were already using it.  I should have looked, very nice. It looks like it's making managing the plist much easier.\nOr do you mean a module with an api specific to the available info.plist parameters? That seems like a lot more work, definitely a separate module, but a nice-to-have for the original purpose of this issue.\n. @buddingmonkey @herrmannplatz I just realized the feature I wanted, protocols (custom url handlers) already exists, it's just not yet documented (and possibly not officially supported):\nhttps://github.com/maxogden/electron-packager/blob/master/mac.js#L62-#L69\nExample usage:\njs\npackager({\n    ....\n    protocols: [{\n        name: 'Some Name',\n        schemes: ['foo']  //foo://google.com will launch your app\n    }]\n), cb);\nHope that might help unblock you.\n. ",
    "dvcrn": "I think the custom info.plist parameters are definitely a good start. It would cover future changes to properties (including new properties) on apples side without having to change electron-packager. \nhttps://developer.apple.com/library/mac/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html\n. ",
    "Rustem": "@malept Yes, of course. As I understood electron-download tries to download the specified version of electron if it is not present. In my case it tries to download electron-v0.29.2-win32-x64.zip release. The same problem goes with later and even latest  (v0.33.0) releases.\n. For example below is the log while I am trying to build under electron 0.33\n. Thank you. I think that's closed issue.\n. ",
    "jingweno": "It didn't hang for me. But I'm getting:\nPackaging app for platform win32 x64 using electron v0.31.2\nspawn wine ENOENT\n. @malept Cool thanks. Installing wine makes it work!!\n. ",
    "hardywu": "Oops. Thanks for pointing out.\n. ",
    "amitpatil321": "Renaming --version to --electron-version atleast removed that 404 error. Now the package is downloading. Will update here is this solution fixed it completely or not\n. ",
    "bitomule": "That worked @kfranqueiro !\nNow al the build sizes are close to 100MB, any way to reduce that?\n. Thanks @malept !\n. I think it was some kind of error in my setup. Removed node_modules folder and installed again. That fixed it.\n. ",
    "burakkp": "\nHm. Are you sure you aren't also accidentally including an electron directory from development? Electron itself is usually ~40-50MB I think...\n\nhttps://github.com/electron-webapps/meteor-electron/issues/97. ",
    "webarchymeta": "I works for me\n. 5.1.0\n. I had no knowledge of how to do it here on github under such a scenario. If you could get me started on it, I will test it, thanks.\n. ",
    "FliiFe": "Haha, you're right, but then how can I achieve that ? I want the app to start when I start the generated .exe file. Instead it starts the \"default\" electron app (with \"drag you app here ..\")\n. Nope. I have an app, that I currently run with electron . (which is stored in \"start\" command) . I want to pack everything. So what I want to achieve is that when the user clicks the generated app, it starts the app as expected. But it doesn't\n. I did generate it, but the resulting file was starting the default app (\n```\nWelcome to Electron\nTo run your app with Electron, execute the following command under your Console (or Terminal):\npath_to_generated path-to-your-app\nThe path-to-your-app should be the path to your own Electron app, you can read the quick start guide in Electron's docs on how to write one.\nOr you can just drag your app here to run it:\n``\n. **_Which version of electron-packager are you using?**_\nI'm using 5.1.0\n**_What cli arguments are you passing?**_\nelectron-packager SourceDir OutDir --platform=win32 --arch=x64 --version=0.33.3\n**_What platform are you running electron-packager on? What platform(s) are you building for?**_\nRunning on Windows 10 x64 (in VirtualBox), building for the same.\n**_Is there a stack trace in the error message you're seeing?**_\nThis is not an error.\n**_If possible, please provide instructions to reproduce your problem**_\nSimply make a new electron project, then use electron packager with above arguments.\n. What do you mean by \"module\" ?mainpoints to the main js file to be executed\n. Okay, I got it to work. I just had to run it from **_inside**_ the directory with.as path. I think this can be considered as an issue...\n. ### How to reproduce ?\n- Create an electron project, with package.js correctly made\n- Assuming project's directory is namedproj`, from the parent directory, run \nelectron-packager proj out --platform=win32 --arch=x64 --version=0.33.3\nExpected behavior :\nApp generates in out/ directory. When launching out*.exe, it launches the app\nCurrent behavior :\nApp generates in out/ directory. When launching out*.exe, it launches the _default electron app_ \nUpdate : This behavior was observed using Windows 10 x64 in a virtual machine. Didn't test on Linux yet\n. ",
    "runlevelsix": "I've been experiencing the same issue as @FliiFe when using electron-packager on Yosemite. I have essentially the exact same error report as his previous comment.\nHere's my command: ./node_modules/.bin/electron-packager ./dist MyApp --all --version=0.33.4 --asar --overwrite. I didn't install electron-packager globally.\nThe result of the command is a successful build, but when I try to open the MyApp.app, I get the \"welcome to electron\" message shown in previous comments. The MyApp.app/Contents/Resources/ directory shows both an app.asar and atom.asar file, so I assumed they were built correctly. If I change the  of my command to . (the root directory of my git project), electron-packager runs and builds a working app, but the files weigh in at around 3-4 GB, depending on platform target.\nWhen running the app with just electron (./node_modules/.bin/electron .), it works as expected (but not with ./node_modules/.bin/electron ./dist - The electron error states that the directory is not an electron app).\nI haven't been able to address my issue yet, but I suspect that having my electron app in a ./dist directory with my main file running outside that directory is the source of the error.\nAre there any recommendations for running an app from dist? I've currently got a simple Express app running in my package.json's main script (airbalancer.js), which is outside of the dist directory. Should I be putting that inside my dist and a package.json inside dist that reflects only the bare minimum needed for an electron app?\n. ",
    "niftylettuce": "I got this same issue on OS X 10.9 Mavericks.  I don't even define a main entry point.  For reference, try running electron-packager on the Menubar project.  It doesn't work for me.\n. I get the default per this comment https://github.com/maxogden/electron-packager/issues/144#issuecomment-143804447.  Not sure why it isn't just launching the app/menubar.\n. ",
    "florian": "\nPlease try the latest unreleased version (i.e., git master). electron-packager no longer copies the default app (per #206).\n\n@malept: I got a similar problem. My app consists of a single window that's hidden by default. But when I package it and open the app, the default Electron app opens, as well as the hidden window of my app.\nI tried updating to the newest electron packager version using NPM:\n$ npm install -g https://github.com/electron-userland/electron-packager\nAnd I package my app like this:\n$ electron-packager . appname --platform=darwin --arch=x64 --version=0.36.11 --asar --overwrite\nWhat else can I try? I should be using the newst electron-packager version and the default Electron app is still there.\n. So I found out what caused this in my app: I had some AppleScript code that gives focus to the last window when the app's window is hidden (to get OS X spotlight behaviour). So when the app is launched and I directly hide the main window, then it'll give focus to the last focused window, which apparently is the Electron default app. I fixed this by just checking the app name before giving focus.\nBut either way, I either didn't manage to really install the newest electron-packager, or the default app is still being copied.\n. Any updates on this? It's a pretty annoying bug\n. ",
    "kumarom1203": "Hi everyone,\nIs any way to protect ASAR file from unpackaging(generated by electron atom) so other can not able to modify my code.\nIf any one has any idea or other option to protect my code please suggest\nThanx in advance. ",
    "nlhkh": "You can try installing the latest npm. I did it accidentally by running npm update -g. Then you can try npm install with your package.json.\n\nOn Sep 29, 2015, at 11:20 PM, Mark Lee notifications@github.com wrote:\nIf/when this is implemented, it would need to be compatible with earlier versions of npm (i.e., the 2.x series).\n\u2014\nReply to this email directly or view it on GitHub https://github.com/maxogden/electron-packager/issues/145#issuecomment-144109496.\n. I don't know why you mention the \"compatible with earlier versions of npm\".\n\nEverything still works fine with npm 3. The difference is that let's say you have 30 items in your dependencies and devDependencies in your package.json file. What you will find in your node_modules directory is not 30 npm modules, but rather about 530 modules. With NPM 3, they flat out the dependencies instead of leaving them nested like before. Check this article, and this one, and look for the keyword \"flat\".\nWith this flat structure, I would have to figure out the modules only used for development, which was not only those listed under devDependencies, to add them to the --ignore flag.\nSo I am saying that it would be nice if electron-packager can figure out all the packages under devDependencies recursively and ignore them. This would also help with using NPM 2, where I no longer have to use --ignore flag often (for webpack and loaders).\nLastly, I am not advocating the use of npm >= 3.0. I would not use it as of now because figuring out all the modules to put under --ignore is a nightmare. However, there are readings that say NPM 2 is still around  as LTS, and it will be depreciated.\n. ",
    "mitsuhiko": "For what it's worth the way the packaging of node modules currently works is quite problematic for larger apps.  I ended up with so many issues that I just ended up using webpack for everything but native extension, then ignore the entire mode_modules folder and copy over the few items that are native dependencies.\nAt present I can't even get my built dylibs into the final artifact when not manually copying it over (not sure why).\nSo what I want to propose is to make electron-packager aware of node a bit and understand how the modules work and the non-dev dependencies over.\n. The core of the issue is that anything that uses webpack will have dependencies that are in node modules that you do not want in the shipped build but some others you do want.\n(The reason the regex does not really work is because of nested node modules and it being really hard to say: only ignore this folder if toplevel for instance).\nAt least in my case it's a lot more complex than that anyways and I have since stopped using electron-packager for the moment.  Right now it's actually easier for me to just manually package up electron as I'm changing a lot of other things anyways from a makefile.\n. If you are curious what this looks like to get an idea of the setup, the project is here: https://github.com/mitsuhiko/lektor/blob/a1abd505f637adec4bca663630b693b8c67251b3/gui/Makefile#L37-L77\n. ",
    "eu81273": "I also had this problem and solved this problem with maxogden's way. I think that maxogden's idea is best approach to solve this problem.\n. ",
    "varghesethomase": "To check if I had extract zip i did the grep. \nnpm list | grep extract-zip\n\u2502 \u251c\u2500\u252c extract-zip@1.0.3\n\u2502 \u2514\u2500\u252c extract-zip@1.0.\nHere is the output.\n. The electron-packager version is electron-packager@4.2.0\nI use the packager function with arguments\nvar DEFAULT_OPTS = {\n  dir: './',\n  name: appName,\n  asar: shouldUseAsar,\n  ignore: [\n    '/test($|/)',\n    '/tools($|/)',\n    '/release($|/)'\n  ].concat(devDeps.map(function(name) { return '/node_modules/' + name + '($|/)' }))\n}\nvar opts = assign({}, DEFAULT_OPTS, {\n    platform: plat,\n    arch: arch,\n    out: 'release/' + plat + '-' + arch,\n    overwrite: true\n  })\npackager(opts, cb)\n. ",
    "vrunoa": "Cool @maxogden, just created a PR.\n. ok @malept , i'll squash them into one. \n. :+1:  @maxogden @malept \n. ",
    "datnordstrom": "1+\n. ",
    "PierBover": "I'm getting the error too.\n\nspawn wine ENOENT\n\nI've installed wine using homebrew. I had to install xquartz and a bunch of other dependencies.\nI get no other errors...\nMy build command is:\n\nelectron-packager /Volumes/Data/Projects/Github/xxx/app --platform=win32 --arch=ia32 --version=1.2.2 --out=/Users/pier/Desktop --icon=/Volumes/Data/Projects/Github/xxx/icon.icns\n. Thanks @malept you were right. Wine wasn't properly installed.\n. Ok, I'm closing this one then.\n. \n",
    "riccitensor": "I am packaging an electron app for Windows x64.\n```\nPackaging app for platform win32 x64 using electron v1.2.2\nfs.js:898\n  return binding.stat(pathModule._makeLong(path));\n                 ^\nError: ENOENT: no such file or directory, stat '/private/tmp/electron-packager/win32-x64/beauty/resources/app/build/elec_as_node/node'\n    at Object.fs.statSync (fs.js:898:18)\n    at Object.realpathSync (fs.js:1544:12)\n```\nInstalled wine, just in case. Also run like this\nsudo epi --ignore \"node_modules/\\.bin\". ",
    "natew": "Wondering if this would fix an issue I'm having...\nWhen I run packager I get errors across a few apps. Chrome quits itself most fo the time and won't re-open without crashing until after packager runs. And then VSCode complains of too many open file references.\nGuessing this is due to large amounts of node_modules. Currently am able to build most of the app into webpack bundles which may be the way to go.\nJust realized this is a couple years old.... I managed to fix it by using cpx rather than fs.copy in the common.js file, so that sort of patch should work.\nIf I get a chance I'll spend the time to create a large app with lerna and custom scoped modules, but I think the problem/solution is well defined here.\n. I understand. What I'm explaining is the issue is pretty simple and completely isolated, it's just making a test-case is a bit harder because you have to symlink a scoped package, which means lerna, etc.\nI can submit a PR that attempts to use cpx rather than fs.copy that may be easier.. For the record this is a legit one. I am still working around with cpx as it seems to copy deep symlinks better.. @malept would the experimental branch still need the --no-tmpdir option?. Yea this seems a function of running it inside the directory that has the electron version. I'll add it to a parent package.json just to trigger it to save, perhaps I'm using it wrong.. ",
    "medemi68": "It does, but it can be extracted. I've tried bundling the asar with the exe using the same method above (with copy /B) but it doesn't work.\nI honestly like electron far better than nw.js, but this is the deal-breaker. If you can't package applications, then what's the point?\n. I mean it's technically possible to do, but it would mean changing the source of electron itself.\nYou can already drag .asar archives into the .exe file. And also run the .asar files with electron.exe (in cmd)..\nSo maybe there is a way we could get it work that way?\n. ",
    "louy2": "I wonder how the closed source apps in https://github.com/sindresorhus/awesome-electron packaged their apps.\n. ",
    "jacobvalenta": "@maxogden Is there any sort of source validation that takes place (like hashes)? Because as it stands, what stops someone from editing source and running the application?\nThat would be far more important to me then hiding the source.\n. ",
    "dcrystalj": "@maxogden Since this issue was closed, javascript obfuscators became very powerful, and useful enough for majority who want to protect their code. I found a package doing it, but would be very convenient to have option in this packager already.\nhttps://github.com/timedotcc/asar-package-obfuscator. lool, spent one hour for this. Thank you\nalso Linux should not be capitalised! :-1: . ",
    "ValentinCreative": "Finally found the issue. \nWhen compiling for windows the argument \"--icon\" causes this error. \n. @jinpark Ok thanks, i'll check that out\n@malept this images in the start menu \n\n. ",
    "byenow": "@ValentinCreative \nYou are right, when I remove the \"--icon\", it works !\n. ",
    "jinpark": "It says in the readme\n\nBuilding windows apps from non-windows platforms\nIf you run this on windows and you want to set the icon for your app using the --icon option, it requires running a thing called rcedit.exe (via this), which means you will need to install wine and have it available in your path. To do this on Mac OS you can brew install wine.\n. \n",
    "kurisubrooks": "The option to specify the file/file's directory would be very useful.\n. ",
    "jsg2021": "any movement on this? :) . I updated the usage.txt.  . None of this is breaking existing configurations. Without adding the asar.filename option, nothing changes.\nThe whole point of this option is to take control of the app bundle generation... the hooks can be external to this once the filename is used... if something is needed to be done to the app package, a more general hook can be added?. ~the after prune hook still needs to be called since its unrelated to copy.~\nNever mind, I think I understand those hooks now. With a pre-built asar, you don't need the afterCopy/Prune  hooks... all processing has already happened when the asar was generated outside of this tool.  I can't think of anything you would need to hook for when specifying your own asar... so I'm sticking with my last comment. Just add a new  pre-finalize hook called near the end before signing to allow last minute changes... . I think I got all the suggestions implemented.. I've updated to use your suggested initialize(). looks like a transient error caused the signing test to fail for one of the jobs... but the rest seem to be passing. I haven't looked further into it, since its outside the scope of my changes and it has been passing.. Anything I should change?. @malept Would you like anything else? or do you think this is good?. I rebased from your current master. I hope all is well? Is this still wanted?. I rebased again, let me know if any docs need touch ups.. @malpet is there reservations for merging this?. Your cleanup looks way better than my changes. :) I didn't want to change too much without fully comprehending the codebase. Sorry if I misunderstood your requests. Hope this gets merged \ud83d\udc4d . I've been using this branch to bundle my apps, the flag works well. Hope we can merge soon.. Is this blocked by something? Anything I could help with?. \ud83c\udf89 . sorry about that, I didn't mean to add that. I was trying to follow the current style and that file made my editor honor it.. if the user specified a directory (containing their app.asar and additional resources) fs-extra's copy requires the dest to be a directory... if the src is a file, it requires dest to be a file.. should that happen here? or in the argument parsing?. I started to go down that route, but tried to keep the change minimal. I'll short circuit that.. Yeah, I didn't know what those hooks were for... I've changed it to just return early.. what do you mean? Test that it warns? or test that the other options are ignored? If the later, how should that be done?. done.. ok. done. sorry, i\u2019ve been in jest land for a while, i assumed sinon made the assertion.  i\u2019ll update. . done. done. done. I thought it was a nice visual grouping. I'll drop them.. This isn't an async function, I was trying to make as little of a splash as possible. I hadn't looked to see if the callers were setup to handle thrown exceptions and not just promise rejections. I'll make it throw instead.. If you want to check if the version is greater than some specific semver in the future, I would require semver and use its comparison method... inequality checks on arrays convert to strings ... so [4,2,0] > [4,10,0] == true but should be false when comparing two versions.  \nBut, if all this cares about is the major version, then this approach is sufficient.. ah, should be fixed now. ",
    "thomasdarimont": "Thanks for the hint, I'm still pretty new to the electron toolchain - it seems that electron-builder is what I need :) I think this issue can be closed then.\n. ",
    "elronalds": "Is this issue going to involve adding the mas build to the --platform flag?  So the options would be linux, win32, darwin, mas.  Since Electron v0.34.0 introduced the new separate Mac App Store binary.\n. ",
    "ex3ndr": "+1\n. ",
    "jfurneaux": "+1\n. ",
    "mawie81": "I added a new mas platform on https://github.com/mawie81/electron-packager/commit/c0af8213c4c9dbba7b1808bd9083d7276b78bc3b Tests are looking good as well (the ones that require wine failed for me because I dont have it installed currently).\nTried to handle all the plist stuff in a not so repetitive manner. Could create a PR if wanted.\nAfter manual signing and packaging the Application Loader app gave no errors and and I could upload my test app.\nMaybe step 3 could be solved by adding two new entitlements parameters to pass in the child.plist and parent.plist?\n. ",
    "marbemac": "Huge +1 - @mawie81 was your app accepted in the end?\n. Would love to see this! Was the decision in the end to include mas functionality in this package, or a separate one?\n. ",
    "hacksalot": "+1. We ran into this issue a few weeks back and have been packaging OS X builds from an OS X build machine as a workaround. Access is denied seems to indicate an access or authorization issue but I suspect the root cause here is file/archive corruption caused by cross-building assets.\n. ",
    "fourpixels": "I would love to do something about it, but I'll need some help as I don't know where to start from :) Any ideas or recommendations?\n. ",
    "lukeapage": "@matthiasg I am confused as to how it works on mac - the code used to unzip is extract-zip, which is JS only and therefore should be running the same on mac as on windows?\nI don't know much about symlinking, so I experimented with some changes to extract-zip, but didn't get anywhere constructive..\n- you are right about junction - because isDir is always false for the symlinks and one of them is a file and the other are directories\n- One of the problems appears to me to be the paths - the link path is relative to the zip, but no opts.dir is joined on to it, so I don't see how link will ever be right\n- Another problem is that the directories the symlinks are created in do not exist, so it needs to make those directories\nI get this output:\ncreating symlink - \"C:\\test\\build\\macos\\Electron.app\\Contents\\Frameworks\\Electron Framework.framework\\Electron Framework\" to \"C:\\test\\build\\macos\\Versions\\Current\\Electron Framework\"\ncreating symlink - \"C:\\test\\build\\macos\\Electron.app\\Contents\\Frameworks\\Electron Framework.framework\\Libraries\" to \"C:\\test\\build\\macos\\Versions\\Current\\Libraries\"\ncreating symlink - \"C:\\test\\build\\macos\\Electron.app\\Contents\\Frameworks\\Electron Framework.framework\\Resources\" to \"C:\\test\\build\\macos\\Versions\\Current\\Resources\"\ncreating symlink - \"C:\\test\\build\\macos\\Electron.app\\Contents\\Frameworks\\Electron Framework.framework\\Versions\\Current\" to \"C:\\test\\build\\macos\\A\"\ncreating symlink - \"C:\\test\\build\\macos\\Electron.app\\Contents\\Frameworks\\Mantle.framework\\Headers\" to \"C:\\test\\build\\macos\\Versions\\Current\\Headers\"\ncreating symlink - \"C:\\test\\build\\macos\\Electron.app\\Contents\\Frameworks\\Mantle.framework\\Mantle\" to \"C:\\test\\build\\macos\\Versions\\Current\\Mantle\"\ncreating symlink - \"C:\\test\\build\\macos\\Electron.app\\Contents\\Frameworks\\Mantle.framework\\Modules\" to \"C:\\test\\build\\macos\\Versions\\Current\\Modules\"\ncreating symlink - \"C:\\test\\build\\macos\\Electron.app\\Contents\\Frameworks\\Mantle.framework\\Resources\" to \"C:\\test\\build\\macos\\Versions\\Current\\Resources\"\ncreating symlink - \"C:\\test\\build\\macos\\Electron.app\\Contents\\Frameworks\\Mantle.framework\\Versions\\Current\" to \"C:\\test\\build\\macos\\A\"\ncreating symlink - \"C:\\test\\build\\macos\\Electron.app\\Contents\\Frameworks\\ReactiveCocoa.framework\\Headers\" to \"C:\\test\\build\\macos\\Versions\\Current\\Headers\"\ncreating symlink - \"C:\\test\\build\\macos\\Electron.app\\Contents\\Frameworks\\ReactiveCocoa.framework\\Modules\" to \"C:\\test\\build\\macos\\Versions\\Current\\Modules\"\ncreating symlink - \"C:\\test\\build\\macos\\Electron.app\\Contents\\Frameworks\\ReactiveCocoa.framework\\ReactiveCocoa\" to \"C:\\test\\build\\macos\\Versions\\Current\\ReactiveCocoa\"\ncreating symlink - \"C:\\test\\build\\macos\\Electron.app\\Contents\\Frameworks\\ReactiveCocoa.framework\\Resources\" to \"C:\\test\\build\\macos\\Versions\\Current\\Resources\"\ncreating symlink - \"C:\\test\\build\\macos\\Electron.app\\Contents\\Frameworks\\ReactiveCocoa.framework\\Versions\\Current\" to \"C:\\test\\build\\macos\\A\"\ncreating symlink - \"C:\\test\\build\\macos\\Electron.app\\Contents\\Frameworks\\Squirrel.framework\\Headers\" to \"C:\\test\\build\\macos\\Versions\\Current\\Headers\"\ncreating symlink - \"C:\\test\\build\\macos\\Electron.app\\Contents\\Frameworks\\Squirrel.framework\\Modules\" to \"C:\\test\\build\\macos\\Versions\\Current\\Modules\"\ncreating symlink - \"C:\\test\\build\\macos\\Electron.app\\Contents\\Frameworks\\Squirrel.framework\\Resources\" to \"C:\\test\\build\\macos\\Versions\\Current\\Resources\"\ncreating symlink - \"C:\\test\\build\\macos\\Electron.app\\Contents\\Frameworks\\Squirrel.framework\\Squirrel\" to \"C:\\test\\build\\macos\\Versions\\Current\\Squirrel\"\ncreating symlink - \"C:\\test\\build\\macos\\Electron.app\\Contents\\Frameworks\\Squirrel.framework\\Versions\\Current\" to \"C:\\test\\build\\macos\\A\"\nfrom the following code changes\n// AFAICT the content of the symlink file itself is the symlink target filename string\n            function writeSymlink () {\n              readStream.pipe(concat(function (data) {\n                var link = data.toString()\n                link = path.resolve('C:\\\\test', path.join(opts.dir, link));\n                dest = path.resolve('C:\\\\test', dest);\n                var destDir = path.dirname(link);\n                mkdirp(destDir, function() {\n                    debug('creating symlink - \"' + dest + '\" to \"' + link + '\"')\n                    fs.symlink(link, dest, 'junction', function (err) {\n                      if (err) {\n                          debug(err);\n                          cancelled = true\n                      }\n                      done(err)\n                    })\n                });\n              }))\n            }\n          })\nthe arguments to fs.symlink are destination, path\nit seems that the 2nd argument e.g. path is the symlink location and the 1st argument is the one that it points to. \nso to pick one example\n\"C:\\test\\build\\macos\\Electron.app\\Contents\\Frameworks\\Squirrel.framework\\Resources\" should be a symlink to \"C:\\test\\build\\macos\\Versions\\Current\\Resources\"\nwhich makes sense because multiple things link to Versions\\Current\\Resources.\nI assume that the only way it could work is when I write a file to the symlink folder, mac creates the destination path if it doesn't exist.\nMy code doesn't work, not sure yet why.\n. Looking at the very first entry, it writes the file and then creates a symlink in the location the file is at.. preusmably mac must copy the file to the symlinked location and then link to it.\nI think all this symlinking quirks would have to be handled for us to get a mac distrib and even after we have done it, there is no guarentee that packaging up the windows symlinks will create an archive with the right format for mac :(\nanyone else have any input or thoughts?\n. I ammended the commit with the changes you have suggested.\n. I've expanded the usage to include an example\n. thankyou.. any chance of a release soon?\n. Ok fine, its just unusual. You might consider linking from the readme so its findable.\n. you have to use =false,  minimalist handles it.\n. ",
    "Jevirs": "I'm running into the same problem too,the output folder cann't be zipped and not work on OS X\n. ",
    "jhovgaard": "Any news on this? I'm also stuck not able to get my app out for OSX? Is there any workaround?\n. I haven't found a solution, but I've found a way to make my life a bit easier:\nBuild a package using Mac. For your next releases you can use WinRAR or similar to update the source/asar. \n. ",
    "quantumproducer": "I'm curious if this is related to the output of electron-packager creating folders on OSX that you can't move as Sudo?\n. Hi malept, do you mean\nDEBUG=electron-packager\nelectron-packager . QuantumPilot --platform=win32 --arch=all\nThe output is\nPackaging app for platform win32 ia32 using electron v0.36.11\nPackaging app for platform win32 x64 using electron v0.36.11\nWrote new apps to:\n/Users/quantum/code/electron-quick-start/QuantumPilot-win32-ia32\n/Users/quantum/code/electron-quick-start/QuantumPilot-win32-x64\nIf this is the correct way of running with the debug set, I will put into the main post.\n. Like this?\n~/code/electron-quick-start:.DEBUG=electron-packager electron-packager . QuantumPilot --platform=win32 --arch=all\nPackaging app for platform win32 ia32 using electron v0.36.11\nPackaging app for platform win32 x64 using electron v0.36.11\nWrote new apps to:\n/Users/quantum/code/electron-quick-start/QuantumPilot-win32-ia32\n/Users/quantum/code/electron-quick-start/QuantumPilot-win32-x64\n~/code/electron-quick-start:.\n. @MarshallOfSound I created QuantumPilot.icns  which has the 10 icon files (if I open with Preview). So I tried\n/Desktop/out/electron-packager ~/code/electron-quick-start/ QuantumPilot --platform=all --icns=\"~/Desktop/QuantumPilot.icns\"\nwith and without the quotes on the last argument, but no dice.. @MarshallOfSound same issue.. how can I check y electron-packager version?. ```\n~/cd Desktop/out\n~/Desktop/out/ls\nQuantumPilot-darwin-x64 QuantumPilot-mas-x64\nQuantumPilot-linux-x64  QuantumPilot-win32-x64\n~/Desktop/out/rm -rf QuantumPilot-*\n~/Desktop/out/DEBUG=electron-packager ~/Desktop/out/electron-packager ~/code/electron-quick-start/ QuantumPilot --platform=all --icns=\"~/Desktop/QuantumPilot.icns\"\n-bash: /Users/quantum/Desktop/out/electron-packager: No such file or directory\n~/Desktop/out/$DEBUG=electron-packager ~/Desktop/out/electron-packager ~/code/electron-quick-start/ QuantumPilot --platform=all --icns=\"~/Desktop/QuantumPilot.icns\"\n-bash: =electron-packager: command not found\n~/Desktop/out/electron-packager\nUsage: electron-packager   [options...]\nRequired options\nsourcedir          the base directory of the application source\nExamples:        electron-packager ./\n                   electron-packager ./ --all\nOptional options\nappname            the name of the app, if it needs to be different from the \"productName\" or \"name\"\n                   in the nearest package.json\n\nAll platforms *\n\nall                equivalent to --platform=all --arch=all\napp-copyright      human-readable copyright line for the app\napp-version        release version to set for the app\narch               all, or one or more of: ia32, x64, armv7l (comma-delimited if multiple). Defaults\n                   to the host arch\nasar               whether to package the source code within your app into an archive. You can either\n                   pass --asar by itself to use the default configuration, OR use dot notation to\n                   configure a list of sub-properties, e.g. --asar.unpackDir=sub_dir - do not use\n                   --asar and its sub-properties simultaneously.\n               Properties supported:\n               - ordering: path to an ordering file for file packing\n               - unpack: unpacks the files to the app.asar.unpacked directory whose filenames\n                 regex .match this string\n               - unpackDir: unpacks the dir to the app.asar.unpacked directory whose names glob\n                 pattern or exactly match this string. It's relative to the <sourcedir>.\n\nbuild-version      build version to set for the app\nderef-symlinks     whether symlinks should be dereferenced. Defaults to true.\ndownload           a list of sub-options to pass to electron-download. They are specified via dot\n                   notation, e.g., --download.cache=/tmp/cache\n                   Properties supported:\n                   - cache: directory of cached Electron downloads. Defaults to $HOME/.electron\n                   - mirror: alternate URL to download Electron zips\n                   - strictSSL: whether SSL certs are required to be valid when downloading\n                     Electron. Defaults to true, use --download.strictSSL=false to disable checks.\nicon               the icon file to use as the icon for the app. Note: Format depends on platform.\nignore             do not copy files into app whose filenames regex .match this string. See also:\n                   https://github.com/electron-userland/electron-packager/blob/master/docs/api.md#ignore\n                   and --no-prune.\nno-prune           do not run npm prune --production on the app\nout                the dir to put the app into at the end. defaults to current working dir\noverwrite          if output directory for a platform already exists, replaces it rather than\n                   skipping it\nplatform           all, or one or more of: darwin, linux, mas, win32 (comma-delimited if multiple).\n                   Defaults to the host platform\ntmpdir             temp directory. Defaults to system temp directory, use --tmpdir=false to disable\n                   use of a temporary directory.\nversion            the version of Electron that is being packaged, see\n                   https://github.com/electron/electron/releases\n\ndarwin/mas target platforms only *\n\napp-bundle-id      bundle identifier to use in the app plist\napp-category-type  the application category type\n                   For example, app-category-type=public.app-category.developer-tools will set the\n                   application category to 'Developer Tools'.\nextend-info        a plist file to append to the app plist\nextra-resource     a file to copy into the app's Contents/Resources\nhelper-bundle-id   bundle identifier to use in the app helper plist\nosx-sign           (OSX host platform only) Whether to sign the OSX app packages. You can either\n                   pass --osx-sign by itself to use the default configuration, or use dot notation\n                   to configure a list of sub-properties, e.g. --osx-sign.identity=\"My Name\"\n                   Properties supported:\n                   - identity: should contain the identity to be used when running codesign\n                   - entitlements: the path to entitlements used in signing\n                   - entitlements-inherit: the path to the 'child' entitlements\nprotocol           URL protocol scheme to register the app as an opener of.\n                   For example, --protocol=myapp would register the app to open\n                   URLs such as myapp://path. This argument requires a --protocol-name\n                   argument to also be specified.\nprotocol-name      Descriptive name of URL protocol scheme specified via --protocol\n\nwin32 target platform only *\n\nversion-string     an alias for win32metadata (deprecated)\nwin32metadata      a list of sub-properties used to set the application metadata embedded into\n                   the executable. They are specified via dot notation,\n                   e.g. --win32metadata.CompanyName=\"Company Inc.\"\n                   or --win32metadata.ProductName=\"Product\"\n                   Properties supported:\n                   - CompanyName\n                   - FileDescription\n                   - OriginalFilename\n                   - ProductName\n                   - InternalName\n~/Desktop/out/$DEBUG=electron-packager electron-packager ~/code/electron-quick-start/ QuantumPilot --platform=all --icns=\"~/Desktop/QuantumPilot.icns\"\n-bash: =electron-packager: command not found\n~/Desktop/out/DEBUG=electron-packager electron-packager ~/code/electron-quick-start/ QuantumPilot --platform=all --icns=\"~/Desktop/QuantumPilot.icns\"\n  electron-packager Electron Packager 8.0.0 +0ms\n  electron-packager Node v6.9.4 +3ms\n  electron-packager Host Operating system: darwin (x64) +1ms\n  electron-packager Packager Options: {\"_\":[\"/Users/quantum/code/electron-quick-start/\",\"QuantumPilot\"],\"all\":false,\"deref-symlinks\":true,\"download\":{\"strictSSL\":true},\"overwrite\":false,\"prune\":true,\"platform\":\"all\",\"icns\":\"~/Desktop/QuantumPilot.icns\",\"dir\":\"/Users/quantum/code/electron-quick-start/\",\"name\":\"QuantumPilot\",\"protocols\":[]} +0ms\n  electron-packager Target Platforms: darwin, linux, mas, win32 +0ms\n  electron-packager Target Architectures: x64 +0ms\n  electron-packager Inferring app-version from version in package.json +13ms\n  electron-packager Inferring target Electron version from electron-prebuilt dependency or devDependency in package.json +2ms\n  electron-packager Application name: QuantumPilot +0ms\n  electron-packager Target Electron version: 0.36.11 +0ms\n  electron-packager Ignored path regular expressions: +0ms [ '/node_modules/electron($|/)',\n  '/node_modules/electron-prebuilt($|/)',\n  '/node_modules/electron-packager($|/)',\n  '/\\.git($|/)',\n  '/node_modules/\\.bin($|/)' ]\n  electron-packager Downloading Electron with options {\"strictSSL\":true,\"platform\":\"darwin\",\"arch\":\"x64\",\"version\":\"0.36.11\"} +5ms\nPackaging app for platform darwin x64 using electron v0.36.11\n  electron-packager Creating /var/folders/zq/87m8hhn908b8pwtnnmmjq73h0000gn/T/electron-packager/darwin-x64-template +7ms\n  electron-packager Extracting /Users/quantum/.electron/electron-v0.36.11-darwin-x64.zip to /var/folders/zq/87m8hhn908b8pwtnnmmjq73h0000gn/T/electron-packager/darwin-x64-template +1ms\n  electron-packager Initializing app in /var/folders/zq/87m8hhn908b8pwtnnmmjq73h0000gn/T/electron-packager/darwin-x64/QuantumPilot-darwin-x64 from /var/folders/zq/87m8hhn908b8pwtnnmmjq73h0000gn/T/electron-packager/darwin-x64-template template +963ms\n  electron-packager Ignored paths based on the out param: +1ms [ '/Users/quantum/Desktop/out/QuantumPilot-darwin-ia32',\n  '/Users/quantum/Desktop/out/QuantumPilot-darwin-x64',\n  '/Users/quantum/Desktop/out/QuantumPilot-darwin-armv7l',\n  '/Users/quantum/Desktop/out/QuantumPilot-linux-ia32',\n  '/Users/quantum/Desktop/out/QuantumPilot-linux-x64',\n  '/Users/quantum/Desktop/out/QuantumPilot-linux-armv7l',\n  '/Users/quantum/Desktop/out/QuantumPilot-mas-ia32',\n  '/Users/quantum/Desktop/out/QuantumPilot-mas-x64',\n  '/Users/quantum/Desktop/out/QuantumPilot-mas-armv7l',\n  '/Users/quantum/Desktop/out/QuantumPilot-win32-ia32',\n  '/Users/quantum/Desktop/out/QuantumPilot-win32-x64',\n  '/Users/quantum/Desktop/out/QuantumPilot-win32-armv7l' ]\n  electron-packager Running npm prune --production +617ms\n  electron-packager Renaming Electron to QuantumPilot in /var/folders/zq/87m8hhn908b8pwtnnmmjq73h0000gn/T/electron-packager/darwin-x64/QuantumPilot-darwin-x64/Electron.app/Contents/MacOS +3s\n  electron-packager Renaming Electron Helper to QuantumPilot Helper in /var/folders/zq/87m8hhn908b8pwtnnmmjq73h0000gn/T/electron-packager/darwin-x64/QuantumPilot-darwin-x64/Electron.app/Contents/Frameworks/Electron Helper.app/Contents/MacOS +1ms\n  electron-packager Renaming Electron Helper.app to QuantumPilot Helper.app in /var/folders/zq/87m8hhn908b8pwtnnmmjq73h0000gn/T/electron-packager/darwin-x64/QuantumPilot-darwin-x64/Electron.app/Contents/Frameworks +0ms\n  electron-packager Renaming Electron Helper EH to QuantumPilot Helper EH in /var/folders/zq/87m8hhn908b8pwtnnmmjq73h0000gn/T/electron-packager/darwin-x64/QuantumPilot-darwin-x64/Electron.app/Contents/Frameworks/Electron Helper EH.app/Contents/MacOS +0ms\n  electron-packager Renaming Electron Helper EH.app to QuantumPilot Helper EH.app in /var/folders/zq/87m8hhn908b8pwtnnmmjq73h0000gn/T/electron-packager/darwin-x64/QuantumPilot-darwin-x64/Electron.app/Contents/Frameworks +0ms\n  electron-packager Renaming Electron Helper NP to QuantumPilot Helper NP in /var/folders/zq/87m8hhn908b8pwtnnmmjq73h0000gn/T/electron-packager/darwin-x64/QuantumPilot-darwin-x64/Electron.app/Contents/Frameworks/Electron Helper NP.app/Contents/MacOS +1ms\n  electron-packager Renaming Electron Helper NP.app to QuantumPilot Helper NP.app in /var/folders/zq/87m8hhn908b8pwtnnmmjq73h0000gn/T/electron-packager/darwin-x64/QuantumPilot-darwin-x64/Electron.app/Contents/Frameworks +0ms\n  electron-packager Moving /var/folders/zq/87m8hhn908b8pwtnnmmjq73h0000gn/T/electron-packager/darwin-x64/QuantumPilot-darwin-x64 to /Users/quantum/Desktop/out/QuantumPilot-darwin-x64 +0ms\n  electron-packager Downloading Electron with options {\"strictSSL\":true,\"platform\":\"linux\",\"arch\":\"x64\",\"version\":\"0.36.11\"} +1ms\nPackaging app for platform linux x64 using electron v0.36.11\n  electron-packager Creating /var/folders/zq/87m8hhn908b8pwtnnmmjq73h0000gn/T/electron-packager/linux-x64-template +2ms\n  electron-packager Extracting /Users/quantum/.electron/electron-v0.36.11-linux-x64.zip to /var/folders/zq/87m8hhn908b8pwtnnmmjq73h0000gn/T/electron-packager/linux-x64-template +0ms\n  electron-packager Initializing app in /var/folders/zq/87m8hhn908b8pwtnnmmjq73h0000gn/T/electron-packager/linux-x64/QuantumPilot-linux-x64 from /var/folders/zq/87m8hhn908b8pwtnnmmjq73h0000gn/T/electron-packager/linux-x64-template template +748ms\n  electron-packager Ignored paths based on the out param: +1ms [ '/Users/quantum/Desktop/out/QuantumPilot-darwin-ia32',\n  '/Users/quantum/Desktop/out/QuantumPilot-darwin-x64',\n  '/Users/quantum/Desktop/out/QuantumPilot-darwin-armv7l',\n  '/Users/quantum/Desktop/out/QuantumPilot-linux-ia32',\n  '/Users/quantum/Desktop/out/QuantumPilot-linux-x64',\n  '/Users/quantum/Desktop/out/QuantumPilot-linux-armv7l',\n  '/Users/quantum/Desktop/out/QuantumPilot-mas-ia32',\n  '/Users/quantum/Desktop/out/QuantumPilot-mas-x64',\n  '/Users/quantum/Desktop/out/QuantumPilot-mas-armv7l',\n  '/Users/quantum/Desktop/out/QuantumPilot-win32-ia32',\n  '/Users/quantum/Desktop/out/QuantumPilot-win32-x64',\n  '/Users/quantum/Desktop/out/QuantumPilot-win32-armv7l' ]\n  electron-packager Running npm prune --production +624ms\n  electron-packager Renaming electron to QuantumPilot in /var/folders/zq/87m8hhn908b8pwtnnmmjq73h0000gn/T/electron-packager/linux-x64/QuantumPilot-linux-x64 +2s\n  electron-packager Moving /var/folders/zq/87m8hhn908b8pwtnnmmjq73h0000gn/T/electron-packager/linux-x64/QuantumPilot-linux-x64 to /Users/quantum/Desktop/out/QuantumPilot-linux-x64 +1ms\n  electron-packager Downloading Electron with options {\"strictSSL\":true,\"platform\":\"mas\",\"arch\":\"x64\",\"version\":\"0.36.11\"} +1ms\nPackaging app for platform mas x64 using electron v0.36.11\n  electron-packager Creating /var/folders/zq/87m8hhn908b8pwtnnmmjq73h0000gn/T/electron-packager/mas-x64-template +3ms\n  electron-packager Extracting /Users/quantum/.electron/electron-v0.36.11-mas-x64.zip to /var/folders/zq/87m8hhn908b8pwtnnmmjq73h0000gn/T/electron-packager/mas-x64-template +1ms\n  electron-packager Initializing app in /var/folders/zq/87m8hhn908b8pwtnnmmjq73h0000gn/T/electron-packager/mas-x64/QuantumPilot-mas-x64 from /var/folders/zq/87m8hhn908b8pwtnnmmjq73h0000gn/T/electron-packager/mas-x64-template template +773ms\n  electron-packager Ignored paths based on the out param: +2ms [ '/Users/quantum/Desktop/out/QuantumPilot-darwin-ia32',\n  '/Users/quantum/Desktop/out/QuantumPilot-darwin-x64',\n  '/Users/quantum/Desktop/out/QuantumPilot-darwin-armv7l',\n  '/Users/quantum/Desktop/out/QuantumPilot-linux-ia32',\n  '/Users/quantum/Desktop/out/QuantumPilot-linux-x64',\n  '/Users/quantum/Desktop/out/QuantumPilot-linux-armv7l',\n  '/Users/quantum/Desktop/out/QuantumPilot-mas-ia32',\n  '/Users/quantum/Desktop/out/QuantumPilot-mas-x64',\n  '/Users/quantum/Desktop/out/QuantumPilot-mas-armv7l',\n  '/Users/quantum/Desktop/out/QuantumPilot-win32-ia32',\n  '/Users/quantum/Desktop/out/QuantumPilot-win32-x64',\n  '/Users/quantum/Desktop/out/QuantumPilot-win32-armv7l' ]\n  electron-packager Running npm prune --production +599ms\nWARNING: signing is required for mas builds. Provide the osx-sign option, or manually sign the app later.\n  electron-packager Renaming Electron to QuantumPilot in /var/folders/zq/87m8hhn908b8pwtnnmmjq73h0000gn/T/electron-packager/mas-x64/QuantumPilot-mas-x64/Electron.app/Contents/MacOS +2s\n  electron-packager Renaming Electron Helper to QuantumPilot Helper in /var/folders/zq/87m8hhn908b8pwtnnmmjq73h0000gn/T/electron-packager/mas-x64/QuantumPilot-mas-x64/Electron.app/Contents/Frameworks/Electron Helper.app/Contents/MacOS +0ms\n  electron-packager Renaming Electron Helper.app to QuantumPilot Helper.app in /var/folders/zq/87m8hhn908b8pwtnnmmjq73h0000gn/T/electron-packager/mas-x64/QuantumPilot-mas-x64/Electron.app/Contents/Frameworks +1ms\n  electron-packager Renaming Electron Helper EH to QuantumPilot Helper EH in /var/folders/zq/87m8hhn908b8pwtnnmmjq73h0000gn/T/electron-packager/mas-x64/QuantumPilot-mas-x64/Electron.app/Contents/Frameworks/Electron Helper EH.app/Contents/MacOS +0ms\n  electron-packager Renaming Electron Helper EH.app to QuantumPilot Helper EH.app in /var/folders/zq/87m8hhn908b8pwtnnmmjq73h0000gn/T/electron-packager/mas-x64/QuantumPilot-mas-x64/Electron.app/Contents/Frameworks +0ms\n  electron-packager Renaming Electron Helper NP to QuantumPilot Helper NP in /var/folders/zq/87m8hhn908b8pwtnnmmjq73h0000gn/T/electron-packager/mas-x64/QuantumPilot-mas-x64/Electron.app/Contents/Frameworks/Electron Helper NP.app/Contents/MacOS +0ms\n  electron-packager Renaming Electron Helper NP.app to QuantumPilot Helper NP.app in /var/folders/zq/87m8hhn908b8pwtnnmmjq73h0000gn/T/electron-packager/mas-x64/QuantumPilot-mas-x64/Electron.app/Contents/Frameworks +0ms\n  electron-packager Moving /var/folders/zq/87m8hhn908b8pwtnnmmjq73h0000gn/T/electron-packager/mas-x64/QuantumPilot-mas-x64 to /Users/quantum/Desktop/out/QuantumPilot-mas-x64 +1ms\n  electron-packager Downloading Electron with options {\"strictSSL\":true,\"platform\":\"win32\",\"arch\":\"x64\",\"version\":\"0.36.11\"} +1ms\nPackaging app for platform win32 x64 using electron v0.36.11\n  electron-packager Creating /var/folders/zq/87m8hhn908b8pwtnnmmjq73h0000gn/T/electron-packager/win32-x64-template +1ms\n  electron-packager Extracting /Users/quantum/.electron/electron-v0.36.11-win32-x64.zip to /var/folders/zq/87m8hhn908b8pwtnnmmjq73h0000gn/T/electron-packager/win32-x64-template +1ms\n  electron-packager Initializing app in /var/folders/zq/87m8hhn908b8pwtnnmmjq73h0000gn/T/electron-packager/win32-x64/QuantumPilot-win32-x64 from /var/folders/zq/87m8hhn908b8pwtnnmmjq73h0000gn/T/electron-packager/win32-x64-template template +926ms\n  electron-packager Ignored paths based on the out param: +1ms [ '/Users/quantum/Desktop/out/QuantumPilot-darwin-ia32',\n  '/Users/quantum/Desktop/out/QuantumPilot-darwin-x64',\n  '/Users/quantum/Desktop/out/QuantumPilot-darwin-armv7l',\n  '/Users/quantum/Desktop/out/QuantumPilot-linux-ia32',\n  '/Users/quantum/Desktop/out/QuantumPilot-linux-x64',\n  '/Users/quantum/Desktop/out/QuantumPilot-linux-armv7l',\n  '/Users/quantum/Desktop/out/QuantumPilot-mas-ia32',\n  '/Users/quantum/Desktop/out/QuantumPilot-mas-x64',\n  '/Users/quantum/Desktop/out/QuantumPilot-mas-armv7l',\n  '/Users/quantum/Desktop/out/QuantumPilot-win32-ia32',\n  '/Users/quantum/Desktop/out/QuantumPilot-win32-x64',\n  '/Users/quantum/Desktop/out/QuantumPilot-win32-armv7l' ]\n  electron-packager Running npm prune --production +591ms\n  electron-packager Renaming electron.exe to QuantumPilot.exe in /var/folders/zq/87m8hhn908b8pwtnnmmjq73h0000gn/T/electron-packager/win32-x64/QuantumPilot-win32-x64 +2s\n  electron-packager Running rcedit with the options {\"version-string\":{},\"product-version\":\"1.0.0\"} +0ms\n  electron-packager Moving /var/folders/zq/87m8hhn908b8pwtnnmmjq73h0000gn/T/electron-packager/win32-x64/QuantumPilot-win32-x64 to /Users/quantum/Desktop/out/QuantumPilot-win32-x64 +6s\nWrote new apps to:\n/Users/quantum/Desktop/out/QuantumPilot-darwin-x64\n/Users/quantum/Desktop/out/QuantumPilot-linux-x64\n/Users/quantum/Desktop/out/Quantu\n```\n\n. How do I update electron? @malept . This worked btw! On OSX at least.. The windows icon still shows  a brown \"EXE\" picture but I think that's just because of mac. ",
    "johnroper100": "Could this be changed to work?\n. Ok, thanks. Trying on Linux now. It would just be so much easier on me.\n. ",
    "errozero": "Has anyone found a way to build a darwin version on Windows? \n. @jhovgaard Thanks, that's a good suggestion. I have now created a mac build, using a borrowed mac, I'll try and update it this way.\n. ",
    "marckris": "I don't know whether this might help, but this is what I did.\nUsing Node 6.9.2, Electron 1.4.10, electron-packager 8.3.0.\nWorking on Ubuntu 16.04. Used electron-packager to package my app for Linux, Windows and Mac. The app works perfectly on Linux and Windows. I tried the app on a MacBook with OS X 10.9 and it crashes.\nSo I built it on that MacBook, using the same versions for all, and it works.. ```\nSorry, I have to hide the name of my app as xxxxx.\nPlease note that I am not a Mac user so I have a bare minimum knowledge.\nOn Linux\n\n\nRun from terminal\n    electron-packager ./ xxxxx --app-version=2.0 --platform=darwin --version=1.4.10 --arch=x64 --build-version=20 --asar --icon=icon.icns --out=/xxxxx/package --overwrite\n\n\nConsole ouput (after set DEBUG=electron-packager)\n    Packaging app for platform darwin x64 using electron v1.4.10\n    Wrote new app to /xxxxx/package/xxxxx-darwin-x64\n\n\nCopy /xxxxx/package/xxxxx-darwin-x64 to my NTFS drive\n\n\nOn MacBook\n\nOpen my NTFS drive on MacBook\nRun xxxxx.app by double-clicking\n\nStacktrace:\nI don't know how to do this.\nThis is the only output I got (in a dialog window).\nxxxxx can not be opened because of a problem.\nCheck with the developer to make sure xxxxx works with this version of OS X. You may need to reinstall the application. Be sure to install any available\nupdates for the application and OS X.\nThis report will be sent to Apple automatically.\nProblem Details and System Configuration\nProcess:         xxxxx [47158]\nPath:            /Volumes/VOLUME/*/xxxxx.app/Contents/MacOS/xxxxx\nIdentifier:      com.electron.xxxxx\nVersion:         ???\nCode Type:       X86-64 (Native)\nParent Process:  launchd [134]\nResponsible:     xxxxx [47158]\nUser ID:         501\nDate/Time:       2016-12-07 14:29:25.804 +0700\nOS Version:      Mac OS X 10.9.5 (13F34)\nReport Version:  11\nAnonymous UUID:  B253151A-0A5E-70A8-BDEB-C69DBE24302D\nSleep/Wake UUID: 939C3E08-AE67-48A3-B1B6-0B7489D2DAAF\nCrashed Thread:  0\nException Type:  EXC_BREAKPOINT (SIGTRAP)\nException Codes: 0x0000000000000002, 0x0000000000000000\nApplication Specific Information:\ndyld: launch, loading dependent libraries\nDyld Error Message:\n  Library not loaded: @rpath/Electron Framework.framework/Electron Framework\n  Referenced from: /Volumes/VOLUME/*/xxxxx.app/Contents/MacOS/xxxxx\n  Reason: no suitable image found.  Did find:\n    /Volumes/MarcNTFS/xxxxx-darwin-x64/xxxxx.app/Contents/MacOS/../Frameworks/Electron Framework.framework/Electron Framework: file too short\nBinary Images:\n    0x7fff643a4000 -     0x7fff643d7817  dyld (239.4) <7AD43B9B-5CEA-3C7E-9836-A06909F9CA56> /usr/lib/dyld\nModel: MacBook6,1, BootROM MB61.00C8.B00, 2 processors, Intel Core 2 Duo, 2.26 GHz, 4 GB, SMC 1.51f53\n```. They only way I know how to do this on Linux is use diff.\ndiff --no-ignore-file-name-case --text --recursive /home/xxxxx-darwin-x64/ /media/marc/MyNTFS/xxxxx-darwin-x64/\ndiff reports no difference. I also tried a number of different flags, just in case I miss something, but the result is the same.\nI have done this kind of thing on many occasions although never for an Electron app, but it should work fine, I think.\nOn MacBook I simply double clicked the app directly from the NTFS drive.\nI also tried to copy the whole directory from the NTFS drive to a local working directory with Finder copy/paste, then use that directory instead. Result is the same.\nSide note: I use https://github.com/thefanclub/ntfs-write/tree/master/DMG if I have to write to an NTFS drive but in this case I didn't use it.. I think you are right. If I copy the package result from MacBook to my NTFS and compare it with the package result on Linux, symbolic links are not correctly copied. I suspect the other way around was also true.\nYes, not Windows, but at least I have learned not to just copy the result from Linux to Mac unless you have a bulletproof NTFS software that give you the exact same copy.\nBTW I also tried it via a burn to a CD with K3b with the same result. Now I have to figure out how to burn the damn thing properly because this is suppose to be an app distributed on a CD. Damn those symlinks!\nWell, at any rate. My bad. I should have known this.. Just my closing note for anyone who encounters the same \"issue\". The problem was definitely because symbolic links were not copied properly. I just finished burning a CD with the appropriate settings and use a proper NTFS software and now everything works perfectly. Thus confirming that you can use electron-packager on Linux to package your app for Windows, Mac and, of course, Linux itself. Thank you all and especially those who created this great app! You practically saved my neck :). ",
    "russsaidwords": "@marckris What \"proper NTFS software\" are you using?\nI've had luck in simply not copying symlinks at all for the darwin version of my test project, but this tends to approximately double the size of the resulting copy on disk. I'm writing the project from a VirtualBox with Ubuntu 16.04 installed in an ext3/ext4 file system, to a USB drive. The USB drive is currently formatted to exFAT, but I suspect that FAT32 would work as well. NTFS proved to be problematic on our test Mac.\nI use \"cp -rL source/ dest/\". This dereferences the symlinks. The packaged project size goes from 112.9 MB to 340.3 MB, and this is for a very basic test app that only includes index.js, index.html, and package.json files. I just discovered the --deref-symlinks option, but this appears to not have worked as I expected, and still created symlinks that \"cp -r source/ dest/\" alone tripped over when attempting to copy.\nSo my crude beginner's process for packaging is as follows:\nruss@russ-VirtualBox: ~/Desktop/electron$ ll\ntotal 20\ndrwxrwxr-x 2 russ russ 4096 Jan 17 09:50 ./\ndrwxr-xr-x 4 russ russ 4096 Jan 17 10:05 ../\n-rwxrwxrwx 1 russ russ  340 Jan 17 10:14 index.html\n-rwxrwxrwx 1 russ russ 1717 Jan 17 09:20 index.js\n-rwxrwxrwx 1 russ russ  267 Jan 17 09:20 package.json*\nruss@russ-VirtualBox: ~/Desktop/electron$ electron-packager . --platform=darwin --electron-version=1.4.14 --out=/home/russ/Desktop/electron-mac\nruss@russ-VirtualBox: ~/Desktop/electron$ cp -rL /home/russ/Desktop/electron-mac/electron-test1-darwin-x64 /media/russ/exFAT/electron-test1-darwin-x64\n\nOnly relevant lines were reproduced in the above.\n\nSo it is possible to package for Mac on Linux, but it took some interesting contortions to get there. Now I just need to actually build my app! :-). ",
    "NoahAndrews": "Has anyone figured out how to delete the blocked folder that this issue was originally about? (Besides the obvious use of a Linux live CD or similar, which I don't think is even an option for me because I'm using Bitlocker.). @malept But this is the only case where it doesn't work, right? I might agree with you if we didn't have something that already mostly works. \nI'm fine with recommending doing things that way, but I think the project should continue to support cross OS packaging as well as possible. . I think maybe I misunderstood the point you were trying to make. I took your original comment as implying you wanted to stop supporting cross OS packaging in electron-packager, as opposed to just suggesting that I and others build on the target platform. I certainly agree that doing things that way is best, if you're able to.\nThe things in your second paragraph are true of course, but I really like that electron-packager doesn't try to do them, and as a result we get (some) cross OS packaging support. We have electron-forge and electron-builder to do the more complicated things that require a particular host OS.\nAs an aside, I'd still like to know how to delete the mac folder :)\n. Yes, but it would only update the version of package.json located in the temp directory for packaging. The main source code would be unchanged.\nMy use case for this feature is to have a script that uses electron-packager to make a test version of the app. The electron-packager name option would include the word \"test\". The packaged test app would then be able to check for the word test and modify its behavior as discussed here.. OK, thanks for reminding me about afterCopy. That should do nicely. . ",
    "Bobavince": "For me, I just fix the problem by compressing it to a 7Zip archive (.7zip) and then uncompress it somewhere else. \nNote that compressing in a zip archive (.zip) with 7zip doesn't work (same access problem).. ",
    "producerism": "@Bobavince I can't believe that actually works. Thank you.. ",
    "p-bakker": "I had already seen that one and tried to manually make the same code changes as in that case, but that didn't solve the issue for me.\nI manually tried calling rcedit on my exe and was able to alter the ProductVersion using the set-version-string syntax of rcedit, and that worked. \nSo the fact that it doesn't work from electron-builder makes me assume that there is something else going wrong, which might also be why the manually added codechanges from #129/#143 didn't help\n. I might not have expressed myself clearly in my previous comment: I think the fix for #129 is valid, just that for me other things are going wrong due to which the File version still isn't set after applying the code changes from #129 manually\n. The third bullet item might not be specific to electron-packager, but to electron itself: I've now tested running plain electron and I also see duplicated icons there once you pin the app. Maybe need to reopen https://github.com/atom/electron/issues/1954\n. For the third bullet item: see https://github.com/atom/electron/issues/1954. It might be a Windows 10 and/or Electron issue, so not something specific to the electron-packager\n. yeah, that was just a typo, edited it now.\nI don't think it is correct to dismiss the first item just yet: The first item is still an issue and not covered by #129. While the cause of #129 would explain the FileVersion not being set properly, it doesn't explain the ProductVersion not being set.\nAs for the second bullet: I've located the .lnk file that shows on the TaskBar and it is named Electron, hence it shows as Electron. Don't know if it is named Electron because is shows as Electron or that it shows as Electron because it is named Electron, but anyway: it shouldn't be Electron\n. ok, no problem: I've added them all in here originally, because they were all Windows 'branding' related issues and I had no idea how they related to each other.\nI've created #172 for the issues described under the first bullet item\n. For sake of completeness: the third bullet item seems to be a Windows 10 bug, scheduled to be fixed in the next Windows 10 update: https://github.com/atom/electron/issues/1954#issuecomment-150959890\n. And again for the sake of completeness: the first bullet item was/is a combination of #129 and https://github.com/atom/node-rcedit/issues/10\n. Updated Windows 10 yesterday: the proper name now shows when right-clicking the icon on the taskbar, so seems to have been a Windows 10 issue, resolved in Win10 update \"Threshold 2\"\n. I'm not so sure about that: while rcedit docs suggest you need to use --set-product-version \"10.7\", if you use --set-version-string \"ProductVersion\" \"10.7\" this also works, which is what electron-packager does.\nI've tried the '--set-version-string \"ProductVersion\" \"10.7\"' option with the rcedit that electron-packager downloads and it set the 'Product version\" attribute of the generated .exe just fine.\nAlso note that I did make the same code changes as #129 did locally and that didn't result in the FileVersion being set, so imho something else is going on... Just don't know what\n. I know that is what the docs say, but just give it a try with --set-version-string \"ProductVersion\" \"10.7\"\nFor me that works just as well, which means that modifying the code to use --set-product-version \"10.7\" instead probably won't solve my issue\n. k\nNot trying to add more confusion, but for testing #1954 I setup a VM with the latest Insider built of Win10. While there the issue of duplicate icons is gone (which #1954 is about), I saw that none of the file attributes were set. And if I ran the generated .exe, it launched, but with the Electron icon and I wasn't able to pin it at all: right-clicking the icon in the TaksBar showed a popup menu, but the menuitem to pin the app was completely missing...\n. I've tested some more regarding my previous comment that a lot more stuff doesn't work with the latest insider build.\nWhat I found is that rcedit threw an exception, because some Windows dll's were not available and thus the attributes/icon/.exe name weren't updated.\nI've fixed the dll issues and after that all the stuff rcedit takes care of worked again.\nBut right-clicking the app in the TaskBar after launching the .exe only shows the option 'Close Window', not the App itself, nor the option to pin it.\nSo to me there are now 2 new issues to create:\n1: exceptions thrown by rcedit don't result in logging/failing in electron-packager\n2: In upcoming Windows 10 version (or at least the current build for it) the .exe is not pinnable anymore\nAgree these two cases belong under electron-packager? Regarding the second: I tested with plain electron for https://github.com/atom/electron/issues/1954#issuecomment-150959890 and that I was able to pin crrectly\n. Tested it: at first seemed to have no effect at all. Debugged a bit and I figured out I wasn't updating the right electron-packager copy (duh...)\nSo, after I corrected that mistake, the FileVersion started working, but not the ProductVersion.\nDebugged that a bit more and found the issue: rcedit doesn't seem to support setting the ProductVersion to value 1. If I try setting it to 0.9 or 1.1 or any other value, the ProductVersion is properly set, if I use 1 (or 1.0) the ProductVersion is not set.\nSo, conclusion: the fixes for FileVersion/ProductVersion work, but there is another issue in rcedit\n. ",
    "nithinc989": "\"elpackage\":  \"electron-packager ./ MYCompany --platform=win32 --arch=x64 --overwrite --icon=./MYCompany.ico --win32metadata.CompanyName='MYCompany Inc.' --win32metadata.ProductName=myName --win32metadata.FileDescription='MY Company' --appCopyright='Copyright \u00a9 2015 MYCompany Inc. All rights reserved.'\"\nabove is a line from my package.json.\nwhen I run the command npm run elpackage   i am getting the FileDescription in my exe just MY, the part after the space is not accounted, It should actually be MY Company and similarly with appCopyright in my exe I got just Copyright instead of Copyright \u00a9 2015 MYCompany Inc. All rights reserved.\nWhen I run the command directly everything is alright and I get the name and copyright correctly.\nIs this an issue with the electron-packager or the way I am using it?\nCan someone help please?\nThanks in advance\n. Thanks for the reply,\nI figured out now that it was not an issue with npm, I had to use double quotes escaped and not single quotes. That solved my problem. In case anyone is facing similar issue they can use it as shown below.\n\"elpackage\": \"electron-packager ./ MYCompany --platform=win32 --arch=x64 --overwrite --icon=./MYCompany.ico --win32metadata.CompanyName=\\\"MYCompany Inc.\\\" --win32metadata.ProductName=myName --win32metadata.FileDescription=\\\"MY Company\\\" --appCopyright=\\\"Copyright \u00a9 2015 MYCompany Inc. All rights reserved.\\\"\"\n@malept It would be great if you could add certificate adding option in the electron packager itself.\nNow for adding the certificate I need to create a bundled exe using electron-winstaller. I don't know if that is possible with packager but its just something that would be good to have if it can be done. :) .\nIf it is already there could you please point me in the right direction.. @malept \nThanks for the reply and clarification and the suggestions,\nElectron winstaller is what I am trying to use currently but which is giving me path too long errors because of sqlite3's chained dependency so I was thinking if I could add the certificate to the exe that packager creates then I no longer have to worry about work around for sqlite3 issue. \nWas Just looking for a shortcut..:p\n. ",
    "craxal": "I seem to be encountering this issue as well, only I'm using a custom-built Electron based on 1.7.2 and the programmatic API to run the packager. I'm using electron-packager@7.7.0 (later versions don't seem to work with custom-built Electron.\nMy logs show I'm passing the correct values for CompanyName, LegalCopyright, ProductName, FileDescription, and OriginalFilename to the packager. However, none of these values are correct when I examine them in the .exe Properties window.. What if I don't want to use one of the official releases? What if you want to use your own build of Electron? electron-packager (or perhaps electron-download) doesn't appear to handle this at all. I've tried putting a prebuilt package in various places mentioned above (which won't work in distributed build systems) and setting the cache option, but it always hits the electron repository and ignores my local package.\n. @develar I looked into it, but the macOS only caveat is a serious deterrent.\n@malept How can I tell if electron-packager is in fact using my local .zip (which is, in fact, named exactly the way an official Electron package is named)?\n. @malept OK, it seems to work for a Linux machine, at least. It can see the .zip, and I saw no download progress bar.\n. I need to revisit this issue. There must have been some significant changes between 8.5.1 and 8.7.1, because my builds are now failing checksums against custom Electron builds.\n```\nTue, 13 Jun 2017 22:34:07 GMT electron-download info { cache: 'E:\\A',\n  filename: 'electron-v1.7.2-win32-ia32.zip',\n  url: 'https://github.com/electron/electron/releases/download/v1.7.2/electron-v1.7.2-win32-ia32.zip' }\nTue, 13 Jun 2017 22:34:07 GMT electron-download zip exists E:\\A\\electron-v1.7.2-win32-ia32.zip\nTue, 13 Jun 2017 22:34:07 GMT electron-download Verifying zip with checksum\nE:\\A_work\\8\\s\\src\\Standalone\\gulp\\gulpfile.package.js:222\n            throw (err);\n            ^\nError: Generated checksum for \"electron-v1.7.2-win32-ia32.zip\" did not match expected checksum.\n```\nBy the way, I'm now using a custom build based on Electron 1.7.2, which I think is still in beta.\nAlso, electron-packager also appears to be obliterating my local cached copy of the package after it fails the checksum. In it's place, there's a SHASUMS256.txt-1.7.2 file.. Yeah, just tried it again with 8.5.1, and I still have the same problem.\nHow do I set the cache file location? I don't see any documentation on how to do that. Also, I don't have a checksum file for 1.7.2. I assume that if the checksum file isn't specified, electron-download tries to pull it from the publicly available one with the matching version. Since this Electron version isn't out yet, I'd rather skip the checksum step.\nEither way, this should not be deleting my cache if the checksum fails! This sounds like a very bad bug to me.\n. That would be ok if electron-download was actually downloading something. In this case, I'm just telling it to look somewhere. It shouldn't delete things from someone's machine that it didn't put there on its own.\nIt seems electron-packager is not well suited for custom Electron builds, which is something a lot of teams require. Since this sounds like a different issue than the one listed here, should I open a new issue?. @malept Sorry, not to sound picky, but if cache is set, I'd rather electron-packager not default to downloading from the default URL.\n@develar Something to consider, but not an option for us at the moment.. ",
    "MoonScript": "@malept no, but I'll give that a try right now!\n. @malept I just added the icon option (using my same *.icns file) in my BrowserWindow call, and it had the same behavior as soon as I called setProgressBar the first time.  I'm using an *.icns file with the following icon sizes embedded in it: 32x32, 64x64, 256x256, 512x512 and 1024x1024.\n. @malept I received that *.icns file from one of our designers and I think it was not created properly (for Mac to understand).  I just followed this tutorial and recreated my *.icns file, and now the icon stays the proper size in the dock!\n\nSorry for taking up your time on this, and thanks for talking through it with me.\n. ",
    "marsinvasion": "electron-packager@5.1.0\n. If I replace app.asar with the app folder it works fine. I'm ok with that workaround. Thanks\n. Rebuilt today and it works fine with asar file\n. ",
    "jaumard": "That's an easy one lol ^^ need some sleep sorry about this :) thanks a lot \n. ",
    "varemenos": "Also:\n- ignore - RegExp\n- out - String\n- overwrite - Boolean\n- prune - Boolean\n- sign - String\n- version-string - Object\n. ",
    "rmcshane": "I figured out my problem.  electron-packager command had been set to use a previous version.  I removed older versions, set it to 5.1.0 and now everything is fine again.\nI apologize for the waste of time here, and thank you for the responses!\n. ",
    "cyrillzadra": "Its running on windows 10.  After running it once with --platform=win32 it worked. And it's even working when I switch back to all. So probably I did something wrong. I can't reproduce it anymore. Sorry for that.\n. ",
    "seriema": "Ok that workaround worked, thanks. My app seems to work too.\nI'll keep this issue open until the workaround isn't needed.\n. ",
    "MrSurly": "You mean ... it didn't work at all?  Hmm.  That could be.  We certainly weren't relying on it being any particular value, nor did we check to see if it was set correctly.  The present \"fix\" is to simply not specify that option.\n. ",
    "chrisburgin95": "The correct file path is returned. The application runs correctly when use electron . just not when compiled. \n. ",
    "gillyb": "I have the same problem... Would like some help...\nAlso running on mac, and the directory exists. When i run with electron, my app opens, but when packaging it starts a blank screen with no error.\n. ",
    "mspoulsen": "I have the exact same problem as gillyb running electron-packager 5.2.1 and using this command:\nelectron-packager . myapp --ignore=\"node_modules/(electron-packager|electron-prebuilt)\" --platform=win32 --arch=ia32 --version=0.36.3 --overwrite --asar=false\n. ",
    "sethlu": "Mind having a look at Console on OS X and see if any messages appear when the app launches?\n. Putting the codesign into a separated module for building and testing could be a nice track, as testing online proves hard for signing with certificates, needing manual help after all. I'll see if I could start a module integrating the OS X codesign command later.\nHere's a list of things I guess might be confusing for those packing the mac apps:\n- The certificates for packing an app for distributing outside/in the Mac App Store are different.\n- Distributing outside the Mac App Store doesn't necessarily need the entitlements, as they are for sandboxing as the main purpose (to my perspective).\n- From my reading online, I found code signing each file in the project is recommended(?) by Apple as Xcode does so, with --deep ignored.\n- For distribution within the Mac App Store, an installer package should be required for uploading the app to iTunesConnect for reviewing (so I may put up a electron-sign with installer)\n. Here's what I've got from today: https://github.com/sethlu/electron-sign\nTbh, only those with the dev program could have the code tested.\n. @maxogden @cjb I've renamed the project to electron-osx-sign and it should avoid some issues with understanding from simply reading the command, as it is OS X only now. Seems that there is as well some sorts of code signing with Windows, but I wouldn't get into that too much now for Electron as distribution to OS X's a bit more complex in following the steps, and it's quite needing.\nAn updated repo: https://github.com/sethlu/electron-osx-sign\nI'll see how I could have my electron-packager fork updated with code-sign and make several tests before doing anything further.\n. I'm not quite sure about the code signing for the Windows platform as I do most of my work on my Mac.\nI haven't replaced the testing procedures for codesign around test/mac.js:181, not sure if to remove it as the code signing's been moved to a separate module.\n. @maxogden Wow, thanks! I'll have it a try the next time I need to have the package description sorted.\nOn the travis build, I'm thinking about pulling the timeout longer for testing as it frequently does.\n. Oops, sorry I accidentally closed this.\n. Hi, I've merged some pull requests for the signing module, as previously some parts within the framework were not covered for codesign. With further testing on this additional module, I could start fine-tune some updates for the MAS distribution packing.\n. Hi, I've just found my issue reported to electron mentioned in the documentation as a known bug here https://github.com/atom/electron/blob/master/docs/tutorial/mac-app-store-submission-guide.md. Thus I'll currently recommend MAS builds before 0.36.0.\nI'll be posting some updates later today, which may include fixes for https://github.com/sethlu/electron-osx-sign/issues/4 & https://github.com/maxogden/electron-packager/issues/261 that will keep a consistency in the renaming of helper applications.\n. So far I've done the following:\n- Rebased on master\n- Squashed test/mac.js and test/mas.js to a common and generalized testing script test/mac.js, which will be called inside test/darwin.js and test/mas.js with different baseOpts.\n. @d-schloss-mvg I think this is an issue with electron-osx-sign.\nI've already added in the support for special characters in binaries and other paths.\n. @d-schloss-mvg I'll have a test with bundle ids with special characters. Sorry I thought this is about the signing; it now appears to be with the plists that are modified.\nAnyway, the signing of apps with special characters in names should now be fixed.\n. @d-schloss-mvg Great. I guess replacing those special characters with standard characters, like mapping \u00e4 to a should be quite pleasant. Or could replace/remove all of them.\nI'm not sure which of the two may be better? The second definitely comes easier with ~~.replace(/[^a-zA-Z0-9.-]/, '')~~.replace(/[^a-zA-Z0-9.-]/g, ''), but may cause some slight issue with reading. (Again I guess no one actually reads them anyway as they are packed for distribution.)\n. @d-schloss-mvg In my latest commit, all special characters will be removed for the CFBundleIdentifiers in all plists.\n. @malept just rebased on electron-packager/master, not sure if it's correct.\nI'll still have to amend a few usage/readme notes before eventually closing this.\n. @malept Just added in the rest of the documentation, and separated your commit for the basic Mac App Store docs in this PR. (all tests passed: https://travis-ci.org/sethlu/electron-packager/builds/109253191) Not sure why Travis CI stops showing beside the commits.\nI guess the --platform=all option might now mean to add platform mas into what were previously included, the darwin, linux and win32. As the version check for mas is not currently included in the script, an error message will be thrown when someone wants to have --platform=all with Electron earlier than v0.34.0. Otherwise, we could have mas separated, remaining the all option as it is now; so going for --platform=all will yield darwin, linux and win32. And if wanting another mas build together as well, they could do --platform=mas?\n. @malept Just found that I previously rebased on your branch. Now it's done again on maxogden/electron-packager master. (Now it turns out that Travis comes back again, which is great.)\nI'll have a check with the code and readme/usage notes first and then git cherry-pick your added docs.\n. @malept The diffs except test/mac.js should be quite neat. As I have to reduce the amount of testing script written for darwin and mas, the test/mac.js thus becomes a script shared by test/darwin.js and test/mas.js, each line with an indentation starting from the first testing function.\nAlso, the NSHumanReadableCopyright had earlier been added, with --app-copyright as the option, which fixes part of https://github.com/maxogden/electron-packager/issues/163 (1).\n. @malept Just separated the commits to make each change clearer. Mind having another check?\n. @malept The readme.md has been updated with app-copyright.\nI'm not sure but there's really quite a lot of working in changing the plist properties from my commits.\n. @malept cool! After this I could join their discussions on plists, just to minimize the amount of code based on file modifications.\n. @positlabs Actually, this looks to me like a folder permission error. If you'd like to add one other item in your parent.list the temporary exception of file read and write, not sure if this could be resolved.\nAlso, the Electron v0.36.8 darwin build should be fine with packing/signing, entitlements being quite unecessary as it being meant for outside the Mac App Store. And yea, like @malept mentioned, I would recommend Electron v0.35.6 as the latest version for packing/signing for distribution inside the Mac App Store.\nApple Docs: https://developer.apple.com/library/ios/documentation/Miscellaneous/Reference/EntitlementKeyReference/Chapters/AppSandboxTemporaryExceptionEntitlements.html\nP.S.: May I ask which ffmpeg are you using? I'm not quite sure about the effect due to an addition of libffmpeg.dylib to Electron v0.36.8 because @jasonhinkle has made some trials with building ffmpeg, I guess different from libffmpeg, by himself. Thanks!\n. Is the entitlements done like the following?\n<key>com.apple.security.temporary-exception.files.absolute-path.read-write</key>\n<array>\n    <string>/</string>\n</array>\n. @positlabs Great it works! The reason I'm saying v0.35.6 may be the best compatible mas build for distribution is that when sandboxed, there is an issue in rendering the graphics with Electron (at least on my machine :confused:), of which reason I'm not totally sure about. However, I guess when they upgrade their Chromium (PR: https://github.com/atom/libchromiumcontent/pull/175), the glitch could ease a bit. As the darwin builds don't really need to get sandboxed, they should be fine.\nP.S.: I'll keep the my list updated for future updates of Electron.\n. On the ffmpeg, @jasonhinkle has tried to upload one of his apps to the App Store with his self-built binary. However, it seems that ffmpeg calls some of Apple's private APIs. Not sure if libffmpeg.dylib's doing the same.\n. I see the security concerns with com.apple.security.temporary-exception.files.absolute-path.read-write; however, if to try any of the other ways with which file open/save could be realized, there should be some kind of methods for user input, in order to be granted with file access.\nThe app-scope bookmarks actually looks like a nice solution, but (from App Sandbox In Depth):\n\nAn app-scoped bookmark provides your sandboxed app with persistent access to a user-specified file or folder.\nFor example, if your app employs a download or processing folder that is outside of the app container, obtain initial access by presenting an NSOpenPanel dialog to obtain the user\u2019s intent to use a specific folder. Then, create an app-scoped bookmark for that folder and store it as part of the app\u2019s configuration (perhaps in a property list file or using the NSUserDefaults class). With the app-scoped bookmark, your app can obtain future access to the folder.\n\nI'm not sure about a way to prompt for any file open/save from Electron right now... Perhaps there have already been an implementation to open/save any file from the web app embedded? The file object seems helpful but looks like some work. Also, if it gives the same result as from NSOpenPanel which gives access to the file/folder. I may look further into that.\nI guess forwarding this to https://github.com/atom/electron may give us some better answers. Let me take a look at the Atom source code and see how they get around with this. (Probably it'll malfunction after sandboxed.)\nFrom StackOverflow: Mac OS In App Sandbox Entitlements Directory Read Issue\n. All that I can say from Atom (https://github.com/atom/atom/blob/7aab88c4f62eb671bdfb9c036d1f0733f913109d/src/browser/atom-application.coffee) is that there's a dialog object from Electron which may prompt the user for a path.\n. Yea, I guess the dialog should do the trick... From Electron (https://github.com/atom/electron/blob/8aced2c31eb796df291ef336a099e82b870c1396/atom/browser/ui/file_dialog_mac.mm), they seem to use NSOpenPanel for file access.\nSo if there's a way from Node to get something like (in Coffee) {dialog} = require 'electron', then we may have a chance to use the native way to have access to files, and with app-scoped bookmarks.\n. I believe the same was mentioned in https://github.com/electron-userland/electron-osx-sign/issues/5.\n. Sounds good! :+1: One question from me is if there be any change of license from BSD-2-Clause? I could move electron-osx-sign later today.\n. @malept I'm just slightly unsure if to switch to another license as moving it to an org. I'll be keeping it like that for now.\n. @malept Just tried to move my repo to electron-userland; it seems that I may have to be an admin before completing the transfer: https://help.github.com/articles/transferring-a-repository/#transferring-from-a-user-to-an-organization.\n. @malept @maxogden Great, thanks! Just transferred the repo. I'll be updating the authors etc. later.\n. Here are some immediate thoughts I have:\n- Never mind the sandboxd logs: There have been trials by others trying to get Chromium more compliant with the Mac App Store. However, the serials in the end of org.chronium.Chronium.rohitfork.* and org.chronium.Chronium.iosurfacemgr.*, due to ipc, are going to stay there until better fixes are made. It should not matter much on the overall performance.\n- The log from Finder looks extremely long and there seems to be 5 apps, one inside another?\n- I haven't tried much with asar unpacking. The final line looks related to that setting I suppose? @malept \n. @malept I'll be releasing electron-osx-sign v3.0 later today after adding the signing with entitlements for darwin builds with default entitlements file following @jasonhinkle's comment on https://github.com/electron-userland/electron-osx-sign/issues/15 yesterday, and some extra manual tests. The only limitation with the current beta is that some binaries are not detected. This should be resolved with the release that'll be out very soon.\n. It's a good point to group those options; however, we may need some extra lines of code for this to work with the command line as we are trying to put several arguments into one object like electron-packager ... --osx-sign? But this looks like a neat solution to cross-platform support.\nI'm thinking about the integration of opts.all: If we're separating the different platforms' opts then someone using it should specify for each of the platforms the different params. Would it be better just to attach some prefixes so they still work with the command line arguments while keeping from nesting objects in opts? And then docs could be categorized for the various platforms.\n@jasonhinkle and I have briefly discussed in https://github.com/electron-userland/electron-osx-sign/issues/13 on signing on the Windows platform.\n. Hi @malept, sorry I've been traveling lately. I guess we could ignore opts.binaries because electron-osx-sign should discover this files by default. However, if anyone really encounters such issue where binaries are not addressed automatically, they could file it under electron-osx-sign... We should be able to resolve it then.\n. @malept Do we then feed the osx-sign object into electron-osx-sign? That could work quite nicely when put together.\nAlso, we could try the same mechanism for modifying the various plists' items in OS X builds?\n. On https://github.com/positlabs/electron-packager/blob/master/mac.js#L166, I think we may go with\n~~identity: signOpts.identity || true,~~\nidentity: signOpts.identity,\nso when signing from CLI, we could simply use --osx-sign to trigger auto discovery of settings? ~~Now we may need --osx-sign.identity instead.~~\nPreviously this line both triggers code-signing and checks whether opts.sign to be a flag or not. As we now have opts['osx-sign'] instead as a flag signaling the code-sign, I think those lines may need changing to:\njs\nidentity: signOpts.identity || undefined,\nentitlements: signOpts['entitlements'] || undefined,\n'entitlements-inherit': signOpts['entitlements-inherit'] || undefined,\nbinaries: signOpts.binaries || undefined\nThen --osx-sign could enable code-signing of packaged app or --osx-sign.identity, as well, enables signing but specifies the cert used at the same time? opts['osx-sign'] may be either a bool or an object.\n. I'm thinking if we need to here distinguish darwin and mas as the signing identities are different for the two if both specified from osx-sign (and I'll have a think on how to put it more naturally if to have these two settings separated).\nAlso, once we have the params consolidated, I could have these pages on https://github.com/electron-userland/electron-osx-sign/wiki updated.\n. Here's my interpretation of this current discussion: (Please correct me if any's misunderstood.)\n- If to codesign an app with electron-packager, then a flag --osx-sign should be expected. (However, we are not taking into account that a mas distribution needs signing before going submitted.)\n- If to codesign an app with electron-packager, however, with custom identity, then (without an explicit --osx-sign flag) --osx-sign.identity will call codesign with the identity plugged in.\nOn the verbose flag, I think it could go with --verbose, so opts.verbose; with a verbose flag given for electron-packager (if it eventually is going to have something like it), the same should apply for electron-osx-sign.\n. > Re: the verbose flag: I think your DEBUG change will be sufficient, I don't think we need to pass that in explicitly.\n@malept nice. I should be able to have https://github.com/electron-userland/electron-osx-sign/pull/24 merged so DEBUG could be supported in a later release.\n\n@sethlu I think we can allow mas builds to be unsigned in case the user wants to implement their own solution\n\n@positlabs I don' know, because the entitlements specified should be different as well. :confused: \n. @positlabs It's not required to sign darwin with entitlements. However, as the same script is used for packaging mas and darwin builds, --osx-sign may be acknowledged for mas and darwin if to package for all platforms at a same time.\n. @positlabs On the asar-unpack-dir option, I'd just recommend not to use the asar option so all unpacked binaries that come with one app could be completely signed individually and ready for shipping.\nHowever, as you mentioned that the binaries are packed in asar packages. I can't really tell if those packed executables are permitted to run in a sandbox environment. (I'm not sure if codesign alters the internal structure of executables/binaries, or just stores a hash for testing data integrity.)\n\nExtra Unpacking on Some APIs\nMost fs APIs can read a file or get a file\u2019s information from asar archives without unpacking, but for some APIs that rely on passing the real file path to underlying system calls, Electron will extract the needed file into a temporary file and pass the path of the temporary file to the APIs to make them work. This adds a little overhead for those APIs.\nFrom: http://electron.atom.io/docs/v0.36.3/tutorial/application-packaging/#extra-unpacking-on-some-apis\n\nIf those executables are unpacked to a temp dir, those binaries unsigned, it could be possible that they work without sandbox. I'll have a check on this now.\n. Just found https://github.com/electron/electron/blob/master/docs/tutorial/application-packaging.md#adding-unpacked-files-in-asar-archive. @positlabs I'll have a check later to see if some binaries present in the asar.unpacked dir will be auto-signed.\n. Hi @kasik96, please check https://github.com/electron-userland/electron-packager/issues/266. Platform mas should be supported in the next release of module.\n. @develar @develar hmm, I think it's partially to do with https://github.com/electron-userland/electron-osx-sign. We'll see how the testing goes first I think?\nAnd if that works out nicely, a patch either to create an entitlements file (during packing as an optional output... or be piped to electron-osx-sign) or to have electron-osx-sign recognize the entry in Info.plist and makes one up (during signing) should work.\n(https://github.com/electron-userland/electron-osx-sign/issues/41)\n. @develar yup, I think if electron-packager allows a team-id-ish param and tweaks the Info.plist according and electron-osx-sign (1) reads the team-id and does the change from a template entitlements file (2) or gets piped a team-id just as electron-packager, it could probably function.\n. @mmm117 As I haven't created a new app since earlier this year, I don't think I may do any tests with submission to iTC. Following the guide, the app should be able to pass the MAS review I think; more updates are available from https://github.com/electron/electron/pull/5584.\n. @mmm117 Well, with previous versions (before the team id was introduced) we could, using electron-packager to finish a app. However, for now, I should recommend the following:\n``` sh\n1. Package the app\nelectron-packager path/to/my/app.app # [--everything same as before excluding osx-sign]\n2. Modify the team id (with the following script or manually do it)\nplutil -insert ElectronTeamID -string \"TEAM_ID\" path/to/my.app/Contents/Info.plist\n3. Also... Create a custom entitlements file for the app as electron-osx-sign hasn't yet supported a template for the feature (and save it at path/to/my/entitlements.plist). Only need to do it once though.\n4. Then sign the app with...\nelectron-osx-sign path/to/my/app.app --entitlements path/to/my/entitlements.plist\n5. If wish to submit to MAS, use the following to create a flat package (nb: electron-osx-flat comes with electron-osx-sign). It should create a package at path/to/my/app.pkg\nelectron-osx-flat path/to/my/app.app\n```\nA sample entitlements file with team id should be like (ref to https://github.com/electron/electron/blob/d6ab81c1da4630e88f8996dc79c3bb3dda264832/docs/tutorial/mac-app-store-submission-guide.md):\nplist\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n  <dict>\n    <key>com.apple.security.app-sandbox</key>\n    <true/>\n    <key>com.apple.security.application-groups</key>\n    <string>TEAM_ID.your.bundle.id</string>\n  </dict>\n</plist>\n. @malept I've just updated https://github.com/electron-userland/electron-osx-sign/pull/44, which follows the requirement from the Electron docs. \ud83d\ude38 After merged, electron-osx-sign will acknowledge the ElectronTeamID within Info.plist and adjust the entitlements file accordingly (generating a temp file). This should leave electron-packager with not too much work other than adding in the plist the extra key only. What do you think?\n. @mmm117 No need I think, the child.plist could follow the default file https://github.com/electron-userland/electron-osx-sign/blob/master/default.mas.inherit.entitlements.\n. @malept I think ElectronTeamID needs to be in Info.plist before calling codesign. So if Info.plist could provide this entry electron-osx-sign could read from it.\nI'm thinking that electron-osx-sign could probably react to app bundles with ElectronTeamID the ones which require the additional com.apple.security.application-groups in the entitlements file. Now we're only writing the Info.plist once, from electron-packager. The other temp file created is just for generating a new entitlements plist for codesign (because com.apple.security.application-groups is correspondingly added).\nLet me know what you think \ud83d\ude09 \n. @develar Thanks for clarifying \ud83d\ude38 I was quite confused just now. (This addition to me's something sitting in between packaging and signing honestly.)\nIf we're doing it this way, we don't necessarily need to have an extra option, unless the user's team id's different from what's on his identity(, but I doubt if this'll ever be possible)... I could parse out the team id from the identity and automate both Info.plist and the entitlements file.\n. @develar yea I agree. It's possible that someone inputs just his/her name. What about introducing a routine check for the identity name? It matches the input against the keychain contents and finds the corresponding item with a full team id.\n. Hi @malept @develar, with https://github.com/electron-userland/electron-osx-sign/pull/44 soon merged, the entitlements file and Info.plist could be automated by electron-osx-sign. Two notable changes are that (1) opts['pre-auto-entitlements-app-group'] flags the automation so with earlier version nothing's affected, and (2) opts.version specifics the Electron version; for all >= 1.1.1, opts['pre-auto-entitlements-app-group'] is enabled by default. It's not possible to disable it with some flag after enabling it though.\nThen, signing an app may be like:\nsh\nelectron-osx-sign path/to/my.app --version=1.1.1\nelectron-osx-sign path/to/my.app --version=1.2.0\nSo far, the two commands above are equivalent to what shows below:\nsh\nelectron-osx-sign path/to/my.app --pre-auto-entitlements-app-group\nas version >= 1.1.1 triggers --pre-auto-entitlements-app-group. I'm not sure if this mechanism may be slightly confusing to beginners... What do you think? The opts are still very flexible/open to changes.\nAdd:\nIt's still fine to use:\nsh\nelectron-osx-sign path/to/my.app\n... Just the user needs to prepare the correct entitlements file with com.apple.security.application-groups and the item ElectronTeamID in Info.plist.\n. So I think to sign everything by default, electron-osx-sign path/to/my.app should work.\nHowever, with Electron version v1.1.1, electron-osx-sign path/to/my.app --version=1.1.1 should work. And with v1.2.0, electron-osx-sign path/to/my.app --version=1.2.0 works.\nHowever, going to more customizations, someone may have already added ElectronTeamID following the Electron docs, --pre-auto-entitlements-app-group will recognize the setting and will not update the Info.plist. Also, if com.apple.security.application-groups is already declared in the entitlements, --pre-auto-entitlements-app-group will not affect the setting in entitlements.\nThe only time that someone needs looking at Apple docs is when adding their entitlements keys, but not necessarily com.apple.security.application-groups because it is taken care of by the automation process. Those like com.apple.security.network.client should be added manually and with path to entitlements file specified to electron-osx-sign (like what happens with all previous versions).\nJust to clarify: --pre-auto-entitlements-app-group will use either the default entitlements or the user input entitlements as the base to apply any new changes.\nSo literally all someone needs to know, when signing with the automation introduced, is the version of Electron used (which is put to electron-packager) and the path to the application bundle. Some cases custom entitlements file needs extra work.\n--pre-auto-entitlements-app-group only lessens some work with changing Info.plist every time after packaging and inserting the correct entitlements for com.apple.security.application-groups.\n. Oh @malept I just thought that it may be better to assume the user's handling the latest version of Electron... So for every version >= v1.1.1, it's fine to use electron-osx-sign path/to/my.app However, for versions earlier electron-osx-sign path/to/my.app --version=0.36.8 for example handles those cases.\nAlso, if --pre-auto-entitlements-app-group is slightly too much work, I am thinking about reducing this option so all cases are handled with version. Or it's quite troublesome to think about that much.\n. @malept I've now trying to have opts.version only, however, turning opts.pre-auto-entitlements-app-group to opts.no-pre-auto-entitlements-app-group so automation could be disabled if enabled for specific version by default. The logic's slightly better to follow this way I think.\n. @malept Just updated the logic... So it goes like this now:\nUse the following for the latest version of Electron:\nsh\nelectron-osx-sign path/to/my.app\nHowever, use the following for better compatibility with earlier versions:\nsh\nelectron-osx-sign path/to/my.app --version=1.1.1 # for example\nIt's nothing wrong to specify the additional version because it's just there for convenience.\nNow if someone wants to use the latest release of Electron, and, however, doesn't walk the full features provided by electron-osx-sign for signing... These include the entitlements automation; the following command is used:\n``` sh\nEITHER\nelectron-osx-sign path/to/my.app --no-pre-auto-entitlements\nOR\nelectron-osx-sign path/to/my.app --pre-auto-entitlements=false\n```\nSo the pre-auto-entitlements acts like a feature which may be disabled for specific Electron versions. And with the debug log displayed, it's quite clear to know if any features are turned on by default:\nelectron-osx-sign Pre-sign operation enabled for entitlements automation with versions >= `1.1.1`; disable by setting `pre-auto-entitlements` to `false`. +484ms\n  electron-osx-sign Automating entitlement app group... +0ms\n  electron-osx-sign `ElectronTeamID` found in `Info.plist`: XXXXXXXXXX +16ms\n  electron-osx-sign:warn `com.apple.security.application-groups` not found in entitlements file, new inserted: XXXXXXXXXX.com.electron +1ms\nWhat do you think? This should help slightly with understanding the introduced feat here in a next release. And it's quite easy to set up as the command electron-osx-sign path/to/my.app doesn't change though having a bump.\n. @develar great! And yes, there's nothing pending for updates on electron-packager and electron-builder... The operations on Info.plist and entitlements file are here on electron-osx-sign. \ud83d\ude38 \n. @maisui99 Probably you may replace the default npm with the Taobao mirror so that it doesn't go as slow for various services.\n. Hi @malept sorry for my late reply. I've just updated electron-osx-sign@0.4.0 on npm; however, a minor update will soon be released (in 1/2 days) following solutions to little code inconsistency. A stabler electron-osx-sign@0.4.1 will be out later this week yet @0.4.0 is already workable enough with general cases.\nThe release note of @0.4.0 will be published on GitHub later today/tomorrow.\n. @malept sure, I'll have a look on that part tomorrow. \ud83d\ude38\nAlso, I have just updated electron-osx-sign@0.4.1 as a small patch to @0.4.0 where npmjs now reflects the latest version: https://www.npmjs.com/package/electron-osx-sign\n. Hi @willin, thanks for filing this issue. \ud83d\udc4d It should be resolved in #386.\n. @malept I think that @willin used the following for packaging:\nsh\nelectron-packager . --asar --overwrite --platform=darwin --arch=x64 --prune=true --out=out --osx-sign.identity='Developer ID Application: GitHub' --ignore=node_modules\nSo out is specified to out. But yea I agree; there should be some extra considerations in #386.\n. @malept That makes sense as well. However, the restriction to --out now only accepting strings should be quite handy.\n. @malept This typecasting method is a neat & clever solution with CLI.\n. Hi @0x00A and @malept, I think the code signing process is carried out successfully; the app is correctly signed. However, would you try the following command and let us know the results?\ncodesign --verbose=4 --deep --strict /path/to.app\nRef: http://tech.byreach.com/node/2594 (in Chinese)\n. @0x00A I guess your app is signed alright... Usually with that command codesign tells where in the app is there something missing.\nWould you try remove your signing certs from Keychain and retrieve a new download/copy from Apple Developer? Additionally, mind trying the following command?\ncodesign --display --verbose=4 /path/to.app\n. @0x00A sorry for my late reply. I tried to investigate a bit further on this issue but have thus far found no luck with previous cases. \ud83d\ude22 I would recommend your issue to Apple Developer and staff there may have a more comprehensive view on this?\n. @malept @TheMSB The darwin build should be signed with Developer ID Application rather than 3rd Party Mac Developer Application because the latter will be rejected by Gatekeeper.\n@TheMSB would you try to codesign your app again with Developer ID Application instead and see if it works?. @quadrophobiac also, the electron-osx-sign guide was drafted last year to work as a config generator for electron-packager and electron-osx-sign here if you haven't checked out yet. Hi @armandn, electron-osx-sign automatically adds com.apple.developer.team-identifier to the entitlements file following the code signing workflow for a typical app built from Xcode, which will cause an app code signed for MAS distribution to crash at launch locally. So what you're experiencing is an expected behavior.\nI'd recommend checking out electron-osx-sign guide to have your app running locally before submitting to iTunes Connect for review.. @armandn if you prefer to manually adjust the settings, you may adjust your entitlements file to include com.apple.security.application-groups and call electron-osx-sign --no-pre-auto-entitlements to skip the automation.\n@malept there's a little incompatibility with pumping the opts to electron-osx-sign I think... Calling electron-packager --osx-sign.some-thing could result in osxSign.someThing. Would it be better for electron-osx-sign to follow a similar format or to adjust electron-packager's argument parsing?. @malept I think I can update electron-osx-sign some time to allow either forms of arguments... In the mean time users may interact with electron-osx-sign for the full customizations.\nBy the way I just posted some notes around codesigning for local testing and the expected failing behavior due to com.apple.developer.team-identifier following the Xcode workflow: https://github.com/electron-userland/electron-osx-sign/commit/1ca1ea269331ada9325bfb0b982348dc7c184cff. @armandn did Apple send back with some details regarding the crashing at reviewing? I'm wondering if the version signed for development works locally?\nIf you don't mind sharing a debug log with export DEBUG=electron-osx-sign* printed from electron-osx-sign I can help debug what may have caused the issue. \ud83d\ude3a Feel free to either open an issue under electron-osx-sign or continue the discussion here.\nAlso recently I've compiled some FAQ's regarding code signing here for reference: https://github.com/electron-userland/electron-osx-sign/wiki/FAQ. @usergit I think one way to test the app's behavior is to test run a development-signed version on a different machine so dependency issues may be investigated, if that's what's causing the crash?. As util.js is only included during testing, I'll write another isPlatformMac in index.js instead of requiring test/util?\n. @malept The signing with entitlements should now work fine with darwin builds in the latest electron-osx-sign v0.3.0.\n. @malept That may be better I think.\nI'll find a way to explain the entitlements for darwin builds as they, apart from sandboxing an app, do not actually do much except interacting with iCloud services, iAP or things like that. It's pretty hard to access some of these Apple services with current builds of Electron, so basically entitlements could be ignored for darwin. The default entitlements for darwin is blank: If a darwin build is sandboxed, it should not also really function properly in the presence of frameworks like Squirrel.framework.\n. 0.4.0-beta3 introduces entitlements check so issue similar to #385 won't appear again in electron-osx-sign.\n. Wait for me to have a think.\n. @malept What do think about throwing an error if a wrong data type for --out is used?\n. Sure, I'll try to implement a test based on this new setting.\n. Addressed in amendment\n. ",
    "willwh": "Hi guys,\nI'm running in to something similar too.\nI'm using using shelljs in my main process (and sending data using ipc) \nWhen I start the app from a terminal:\n/Applications/dcapp.app/Contents/MacOS  ./Electron\n\nIf I started the application from a launcher - it seems either ipc or shelljs is not working, which seems strange. Any pointers appreciated :)\nI can provide more code if needed, take a peek: willwh/dcapp. The packaged linux version of my app works fine :)\nelectron-packager /Users/willwh/dcapp dcapp --platform=all --arch=x64 --icon=img/ico/drupal-console --ignore=\"node_modules/(electron-packager|electron-prebuilt)\" --overwrite\n. I don't think this is a path issue. The which command should return the location of the arg you pass, if it's in your PATH..... Running my code with npm start works, and from the terminal. Thanks guys for taking a peek at this, I'll be back to poking at it tomorrow.\n@erkyrath thx, I'm not that familiar with OSX :)\n. @kfranqueiro @malept thanks for sticking with me and explaining that!\nOf course I had the binary for this aliased in my .zshrc.\nalias=~/DrupalConsole/bin/drupal\nHowever, after removing this (and source ~/.zshrc) - when I run which drupal in my terminal, I see the correct path: `/usr/local/bin/drupal' - although drupal console still doesn't seem to be working in my packaged app.\nIDo you have any other advice here? :)\nThank you once again!\nJust for completeness, here is the echo $PATH from the system I have the osx app installled on:\n/Users/willwh/.composer/vendor/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\n. @malept thanks so much for the advice :)\nI tried just setting shell.env.PATH += shell.sep + '/usr/local/bin'; in my main,js but still the same problem. \nThe app works when I run open /Applications/dcapp.app, just not when opened from finder.\nAny other ideas on how I might debug what's going on?\n. @kfranqueiro thank you, sorry typo late at night :)\nThe interesting thing is, that still doesn't work for me, and indeed, if I drop some console.log(process.env.PATH) before and after that - I end up with /usr/local/bin in my $PATH twice (if I run open /Applications/dcapp.app\ni.e. \nfunction createWindow () {\n  // Create the browser window.\n  mainWindow = new BrowserWindow({width: 800, height: 600});\n  console.log(process.env.PATH);\n  process.env.PATH += '/usr/local/bin';\n  console.log(process.env.PATH);\nResults in /usr/local/bin in my path twice.\nI can't use console.log() to check things from the main process, so I am not sure what to do here.\n@kfranqueiro when you say that \"works for me\" - you're able to open dcapp.app from finder / launch from the Applications directory by double clicking and it shows a desktop notification and the version of Drupal Console?\n. This is what I am doing now :)\nThe interesting thing is, I have the following:\nmainWindow.loadURL('file://' + __dirname + '/index.html');\nmainWindow.webContents.openDevTools();\nand I am trying to use IPC to send data between the main and renderer process.\nipcRenderer code\nipcMain code\nAs I've said, this works when opening the application from a terminal using open /Applications/dcapp.app - but not when run from finder.\nSo now I am thoroughly confused :)\nI really appreciate your help.\n. @malept something like this? https://github.com/willwh/dcapp/commit/a758d9e66e768ca635dc7df27ff92a8e5b0a8f38\nI get nothing in the DevTools window. I wonder if this is an issue with my implementation of the IPC stuff.\n. Thanks guys for all of your help here. I got IPC stuff working correctly now, and this indeed a path issue.\n@malept I actually misread your first note; re: /usr/local/{bin,sbin}\nSo when launched from Finder, or the Icon, my path is /usr/local/{bin,sbin}\nI tried adding the following inside my createWindow() function; process.env.PATH = ['/usr/local/bin', process.env.PATH].join(':') - but that doesn't seem to work.\nOnce I figure out where I should be setting the process.env.PATH in my code, I think I'll be able to call this done :)\n(Just for testing purposes: sudo ln -s /usr/local/bin/drupal /usr/bin/drupal and my app works as expected, I am not sure why setting the process.env.PATH like above is not working.\nI thought this might save my bacon: https://github.com/sindresorhus/fix-path\nSimply in your main process:\nvar fixPath = require('fix-path');\nfixPath();\nAlthough that does seem to get /usr/local/bin in to my path, still no success. I'm going to stop updating this issue, and create one myself against atom/electron once I understand all of this a little better.\nApologies for all the noise, and thank you for your help folks!\n. ",
    "onmyway133": "Not sure if this is related to your problem, but please check Console it shows some errors log if any strange things occur. Mine is because of Uncaught Error https://github.com/onmyway133/blog/issues/145. @malept @jprichardson Hi, I'm new to electron and have this problem as well. Let me know if there's thing I can look into to fix this. I'm willing to make PR. I run npm install -g npm to update npm to 5.6.0, and the problem is fixed. @MarshallOfSound Hi, this problem happens before and after I update yarn. My current version is v1.3.2. @malept I tried a fresh git clone, and still the problem \ud83d\ude22 . @malept I tried running npm run release but still the problem. So it shouldn't be because of yarn ?. When I run in debug mode DEBUG=electron-packager npm run release, I get\n```\n\nPushNotifications@1.2.2 release /Users/khoa/XcodeProject2/PushNotifications\nelectron-packager . --icon=Icon/Icon.icns\n\nelectron-packager Electron Packager 10.1.1 +0ms\n  electron-packager Node v8.4.0 +2ms\n  electron-packager Host Operating system: darwin (x64) +0ms\n  electron-packager Packager Options: {\"_\":[\".\"],\"all\":false,\"deref-symlinks\":true,\"derefSymlinks\":true,\"download\":{\"strictSSL\":true},\"overwrite\":false,\"prune\":true,\"quiet\":false,\"icon\":\"Icon/Icon.icns\",\"dir\":\".\",\"protocols\":[]} +0ms\n  electron-packager Target Platforms: darwin +0ms\n  electron-packager Target Architectures: x64 +0ms\n  electron-packager Inferring application name from productName in /Users/khoa/XcodeProject2/PushNotifications/package.json +0ms\n  electron-packager Inferring appVersion from version in /Users/khoa/XcodeProject2/PushNotifications/package.json +0ms\n  electron-packager Inferring target Electron version from electron in /Users/khoa/XcodeProject2/PushNotifications/package.json +11ms\n  electron-packager Application name: PushNotifications +23ms\n  electron-packager Target Electron version: 1.7.10 +0ms\n  electron-packager Ignored path regular expressions: [ '/node_modules/electron($|/)',\n  '/node_modules/electron-prebuilt(-compile)?($|/)',\n  '/node_modules/electron-packager($|/)',\n  '/\\.git($|/)',\n  '/node_modules/\\.bin($|/)',\n  '\\.o(bj)?$' ] +0ms\n  electron-packager Downloading Electron with options {\"strictSSL\":true,\"platform\":\"darwin\",\"arch\":\"x64\",\"version\":\"1.7.10\"} +0ms\nPackaging app for platform darwin x64 using electron v1.7.10\n  electron-packager Creating /var/folders/wq/4p3h9g5d4v53gkz0k7xl11dr0000gn/T/electron-packager/darwin-x64-template +227ms\n  electron-packager Extracting /Users/khoa/.electron/electron-v1.7.10-darwin-x64.zip to /var/folders/wq/4p3h9g5d4v53gkz0k7xl11dr0000gn/T/electron-packager/darwin-x64-template +0ms\n  electron-packager Initializing app in /var/folders/wq/4p3h9g5d4v53gkz0k7xl11dr0000gn/T/electron-packager/darwin-x64/PushNotifications-darwin-x64 from /var/folders/wq/4p3h9g5d4v53gkz0k7xl11dr0000gn/T/electron-packager/darwin-x64-template template +0ms\n  electron-packager Ignored paths based on the out param: [ '/Users/khoa/XcodeProject2/PushNotifications/PushNotifications-darwin-x64',\n  '/Users/khoa/XcodeProject2/PushNotifications/PushNotifications-linux-ia32',\n  '/Users/khoa/XcodeProject2/PushNotifications/PushNotifications-linux-x64',\n  '/Users/khoa/XcodeProject2/PushNotifications/PushNotifications-linux-armv7l',\n  '/Users/khoa/XcodeProject2/PushNotifications/PushNotifications-linux-arm64',\n  '/Users/khoa/XcodeProject2/PushNotifications/PushNotifications-mas-x64',\n  '/Users/khoa/XcodeProject2/PushNotifications/PushNotifications-win32-ia32',\n  '/Users/khoa/XcodeProject2/PushNotifications/PushNotifications-win32-x64' ] +2s\n  electron-packager Pruning modules via: npm prune --production +0ms\nCommand failed: npm prune --production\nnpm ERR! May not delete: /private/var/folders/wq/4p3h9g5d4v53gkz0k7xl11dr0000gn/T/electron-packager/darwin-x64/PushNotifications-darwin-x64/Electron.app/Contents/Resources/app/node_modules/.bin\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /Users/khoa/.npm/_logs/2018-01-17T14_43_41_288Z-debug.log\nnpm ERR! code ELIFECYCLE\nnpm ERR! errno 1\nnpm ERR! PushNotifications@1.2.2 release: electron-packager . --icon=Icon/Icon.icns\nnpm ERR! Exit status 1\nnpm ERR!\nnpm ERR! Failed at the PushNotifications@1.2.2 release script.\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /Users/khoa/.npm/_logs/2018-01-17T14_43_41_339Z-debug.log\n```\nIt says\n\nCommand failed: npm prune --production\n\nSo maybe it's related to https://github.com/electron-userland/electron-packager/issues/686. Here is my story https://github.com/onmyway133/blog/issues/145. Hope it helps someone. I think I get this same problem, but on Linux build https://github.com/onmyway133/IconGenerator/issues/4. Any help would be appreciated. ",
    "Liam-Ryan": "Update - I've moved index.html and index.js to the root of my project and now the packaged app is running fine, I'd like to keep this issue open to see if it's feasible to have an option for the path to the entry point of the electron app\n. Sorry I haven't had time to test this, real life interference the last few days. I'll close if it works for me when I get a chance\n. ",
    "Akamaozu": "Tested this. \nSetting package.json main prop as entry file solves this problem :)\n. ",
    "vitorgalvao": "No objection from me. I\u2019ve been bit by this today, so it\u2019s good to see a solution is really close.\n. ",
    "Silvercast": "+1\nI know we can use cache option but maybe it's better to have ability to specify where to download electron files\n. ",
    "Mauricio3000": "You can copy the binary file to /home/user/.electron and electron-packager will use that file, as long as it's the latest version. I assume you can direct it to use an older cached file if you specify the version and it finds that version in the cache directory (/home/user/.electron)\nIt's the default behavior of electron-download. You'll notice once you download, it will use the .zip in /home/user/.electron afterwards as it stores it there\nI had same concern so I could work/build offline.\nYou can get latest builds from: https://github.com/electron/electron/releases\nInfo for electron-download, used by electron-packager, here: https://www.npmjs.com/package/electron-download\n. I'm having similar issue. ENAMETOOLONG error.\nI run these commands:\ngit clone electron-quick-start\ncd electron-quick-start\nnpm install\nnpm install electron-packager --save-dev\nnpm run-script pack\nwhich runs:\nelectron-packager . MyApp --platform=linux --arch=x64 --prune\nWhen in vagrant, as user vagrant, it works.\nWhen I run it in vagrant, as root, it fails with ENAMETOOLONG error.\nWhen I run in Docker container, as root, it fails the same way as well.\nProblem is my CI, buildbot, runs as root.\nvagrant path: PATH=/usr/local/sbin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin:/opt/node-v6.4.0-linux-x64/bin\nroot path: /usr/lib64/qt-3.3/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin:/opt/node-v6.4.0-linux-x64/bin\nI've tried using --out=dist --ignore=dist but that doesn't work. \n@byF recommends to specify what to package, but I don't see how to do that.\nSuccessful run as user vagrant\n electron-quick-start@1.0.0 pack /home/vagrant/electron-quick-start\n electron-packager . MyApp --platform=linux --arch=x64 --prune\nPackaging app for platform linux x64 using electron v1.3.4\nWrote new app to /home/vagrant/electron-quick-start/MyApp-linux-x64\nError run as user root\n electron-quick-start@1.0.0 pack /root/electron-quick-start\n electron-packager . MyApp --platform=linux --arch=x64 --prune\nPackaging app for platform linux x64 using electron v1.3.4\n[ { Error: ENAMETOOLONG: name too long, unlink '/root/electron-quick-start/electron-packager/linux-x64/MyApp-linux-x64/resources/app/electron-packager/linux-x64/MyApp-linux-x64/resources...(Alot of repetition)...MyApp-linux-x64/blink_image_resources_200_percent.pak'\n      at Error (native)\n    errno: -36,\n    code: 'ENAMETOOLONG',\n    syscall: 'unlink',\nSeveral screens full of similar error, but different file names at end, finally:\nnpm ERR! Linux 3.10.0-327.18.2.el7.x86_64\nnpm ERR! argv \"/opt/node-v6.4.0-linux-x64/bin/node\" \"/bin/npm\" \"run-script\" \"pack\"\nnpm ERR! node v6.4.0\nnpm ERR! npm  v3.10.6\nnpm ERR! code ELIFECYCLE\nnpm ERR! electron-quick-start@1.0.0 pack: electron-packager . MyApp --platform=linux --arch=x64 --prune\nnpm ERR! Exit status 1\nPosted question to Stack Overflow as well: question\n. Haven't found fix for this problem, but worked around it by provisioning my VM with sudo only when needed, not for pip install buildbot-slave etc. So Buildbot worker running as vagrant now and all is well.\n. ",
    "ahgan84": "I have tried using the below:\napp.on('window-all-closed', function() {\n if (process.platform != 'win32') {\n     app.quit();\n   }\n});\nBut have no effect.\n. Hi there, I have successfully close the app by using the below:\napp.on('window-all-closed', function() {\n  if (process.platform != 'darwin') {\n      app.quit();\n    }\n });\nI'm using windows platform.\n. I think the first code snippet is not for app in windows right?\n. The icon changed after restarting my machine. Seems like there's delay in changing the icon.\n. ",
    "MathijsvVelde": "I already tried that and it does not work either, sorry :disappointed:\n. like this\n. any luck testing?\n. How is it going?\nCan you give me a workaround in the meantime?\n. Okay, I'm sorry to say this but, why the fuck did you bother to help me in the first place if you don't know a lot about asar?\nCan you forward this issue to someone who's more familiar with asar?\nOr can you tell me at least where to look, so I can try to fix it my self?\nThe least you can do is setting the asar dependency version to '0.8.3' (the latest), you'r currently using '0.6.1'...\nThere is a great chance that will help...\n. I apologize for my attitude, @sbruchmann and @malept!\nIt appears to be something wrong with your npm package...\non npm un electron-packager; npm i electron-packager\nshell\n\u2514\u2500\u252c electron-packager@5.1.1 \n  \u251c\u2500\u252c asar@0.6.1 \n  \u2502 \u2514\u2500\u2500 minimatch@2.0.4 \n  \u251c\u2500\u252c plist@1.2.0 \n  \u2502 \u251c\u2500\u2500 base64-js@0.0.8 \n  \u2502 \u251c\u2500\u252c xmlbuilder@4.0.0 \n  \u2502 \u2502 \u2514\u2500\u2500 lodash@3.10.1 \n  \u2502 \u2514\u2500\u2500 xmldom@0.1.19 \n  \u251c\u2500\u2500 rcedit@0.3.0 \n  \u2514\u2500\u2500 run-series@1.1.4\nIt is still using asar@0.6.1 and the files aren't updated\nit looks like NPM has not been updated yet.\n. :+1:\n. Sorry about that.\nIs this better?\n. there, Better?\n. It's even worse due to how asar works at this moment.\nI'm gonna make a PR to fix that later.\nasar-unpack-dir\nString\nUnpacks the dir to app.asar.unpacked directory whose names exactly or pattern match this string. The asar-unpack-dir is relative to dir.\nSome examples:\n- asar-unpack-dir=sub_dir will unpack the directory /<dir>/sub_dir\n- asar-unpack-dir=**/{sub_dir1/sub_sub_dir,sub_dir2}/* will unpack the directories /<dir>/sub_dir1/sub_sub_dir and /<dir>/sub_dir2, but it will note include their subdirectories.\n- asar-unpack-dir=**/{sub_dir1/sub_sub_dir,sub_dir2}/** will unpack the subdirectories of the directories /<dir>/sub_dir1/sub_sub_dir and /<dir>/sub_dir2.\n- asar-unpack-dir=**/{sub_dir1/sub_sub_dir,sub_dir2}/**/* will unpack the directories /<dir>/sub_dir1/sub_sub_dir and /<dir>/sub_dir2 and their subdirectories.\n. I made a new pull request: https://github.com/electron-userland/electron-packager/pull/347\n. ... ok, sorry\n. ",
    "ngreco": "That's what it looks like. I have prebuilt binaries downloaded already, which I'd love to point to instead of it trying to download them anyway.\n. I tried that and I get the same problem with the self-signed certificate in chain.\nI am calling electron-packager as such:\nelectron-packager . RedBook --platform=win32 --arch=x64 --version=0.34.0 --cache=\"c:\\users\\greco\\documents\\electron0.34.0\"\n. It is unzipped there. It should be still in .zip form?\n. Pointed cache to the folder containing the .zip file. It now works without the self signed certificate errors.\nThank you for your help! That list of flags was a little confusing.\n. ",
    "photex": "Ok, please disregard, I discovered that this was related to an incorrect ignore regex.\n. ",
    "jviotti": "@malept Sounds like that's the problem. Turns out my icon size is 16x16. What's the expected size? I can't find any documentation on the README.\n. I have a multi-layered ico with the following sizes that still doesn't work:\n- 16x16\n- 32x32\n- 48x48\n- 64x64\n- 128x128\n- 256x256\n. I did two things and one of them solved the issue, but not sure which one:\n- I had a 1024x1024 *.png icon that I passed to BrowserWindow. I resized to 256x256.\n- Pass --asar to electron-packager.\n. @malept Thank you very much to the link!\n. ",
    "imns": "I'm also having the same issue.  It ignores the <appname> and names it Electron.app.\n. ",
    "sapioit": "Thanks!\n. ",
    "codisart": "Hi,\nI solved this problem.\nSo first thing to know is that an external manifest won't count if an embedded manifest is already present. (see answer to http://superuser.com/questions/905103/what-does-it-mean-to-enable-windows-to-prioritise-external-manifests)\nAnd as it turns out, the electron.exe has already a manifest embedded and the package done with electron-packager is mostly a rename of the electron executable.\nSo in order to embed a new manifest with the right privileges needed, I took the manifest in the electron repo (https://github.com/atom/electron/blob/master/atom/browser/resources/win/atom.manifest), edited the security section and used the mt.exe tool to add the new manifest (https://msdn.microsoft.com/en-us/library/aa375649%28v=vs.85%29.aspx)\nAnd tadaa !\n. Exactly.\n. It seems very fine to me !\nBut I don't see an easy way to implement this feature.\n. I could be interested to help, but if we follow your suggestion \n\nThis is all theoretical (and I am not going to implement it myself, since I do not own a Windows machine), but shouldn't you be able to add a win32-manifest=path/to/manifest parameter, which if set, runs mt.exe probably close to the end of building an Electron app for Windows?\n\nWhat version of mt.exe should we get and where sould we put it ?\n. ",
    "JimiC": "For future reference Windows 10 SDK download.\n. Problem lies with mac.js line 78~85. I believe that that code-block needs to be moved right at the end of the assignments (line 139). So if the user wants to override any info the packager will respect them. \nP.S.: I've done so on my dev machine and the packager now produces the desired package.\n. Sorry for the late reply but I was gathering the info in order to make my case.\nI understand that the extend-info is intended to \"extend\" the Info.plist but bare with me.\nLet's assume that we are developing a cross-platform Electron app and we want to distribute it in all major platforms (Windows, Mac OS, Linux).\nAssume that: \n- The 'name' attribute in package.json has been set to 'lowercase' \n- The 'title' attribute in the Browser Window has been set to 'PascalCase'.\nThe packager currently produces (according to the options in  the OP):\n| OS | Executable Name | Process Name | Menubar  Name | Taskbar / Dock  Name |\n| --- | --- | --- | --- | --- |\n| Windows | lowercase (depends on 'name' attribute) | lowercase  (depends on FileDescription) | PascalCase (depends on 'title' attribute) | PascalCase (depends on 'title' attribute) |\n| OS X | lowercase (depends on 'name' attribute bound to CFBundleDisplayName) | lowercase (depends on 'name' attribute bound to CFBundleDisplayName) | lowercase (depends on 'name' attribute bound to CFBundleName) | lowercase (depends on 'name' attribute bound to CFBundleDisplayName) |\n| Linux | lowercase (depends on 'name' attribute) | lowercase (depends on 'name' attribute) | PascalCase (depends on 'title' attribute) | PascalCase (depends on 'title' attribute) |\nNotice the inconsistency with the Menubar  Name and Dock Name in OS X.\nNow, I know that there is no way to align all platforms to use the same pattern, simply because OS X uses CFBundleDisplayName for the Dock Name and this breaks the pattern.\nSo this issue arise the need to override/assign the CFBundleName in Info.plist differently than it's set from the packager.\nI see two solution for this:\n1. Move the extend-info assignment at the end of the procedure.\n2.  Add assignment attributes for OS X like it does with Windows.\nNote 1: If OS X used CFBundleName for the Dock Name we would only need to override/assign that attribute, but it doesn't.\nNote 2: This issue also relates to #297.\n. @erkyrath The problem doesn't lie with the name but with the \"title\" that OSX doesn't respect.\nAnd yes, I could set name to PascalCase and everything will line up, same as if I set \"title\" to lowercase.\nBut that's not what I want, am I?\n. @erkyrath No offence, but I'm afraid you are looking at the tree and missing the forest.\nYes, Electron can run without any BrowserWindow but what's the point in doing that on a desktop app. Never mind that.\nLet's assume that we are not setting a \"title\" in the BrowserWindow. Here is the result:\n| OS | Executable Name | Process Name | Menubar  Name | Taskbar / Dock  Name |\n| --- | --- | --- | --- | --- |\n| Windows | \"name\" | \"version-string.FileDescription\" | Electron | Electron |\n| OS X | \"name\" | \"name\" | \"name\" | \"name\" |\n| Linux | \"name\" | \"name\" | Electron | Electron |\nNote: Let me explain what I mean with \"Menubar\". On Linux/OSX it's the bar on top of the desktop window where the menu options appear. On Windows it's the bar on top of the app window above the menu options.\nAgain, spot the inconsistency across the platforms.\nNow, I have to agree that using extend-info to override the CFBundleName is not a good choice. Come to think of it again, it's a design \"no-no\".\nWhat can be done though, is to provide the tool with a version-string like option parameter for OSX CFBundleName/CFBundleDisplayName.\n@malept If you feel like not taking any action on this issue, feel free to close it. I can always hack the tool to produce me the desired result, something I rather not prefer doing but if I have no other choice, I will. \n. @malept \nAs you can see in the OP in package.json I declare name and productName (which is used in declaring version-string.ProductName)\nIf I omit the name then productName gets used but it messes up the containing folder naming, and my O.C.D. doesn't allow that. Just because Apple likes to deviate from what most do, doesn't mean we have to settle for that. (Not saying that Apple does it wrong, I'm saying it does it differently). \n\nPerhaps what you want is a more robust version of specifying productName.\n\nIn my case productName is what I want to use for CFBundleName.\nI'll try to provide a PR and test it out, in order to meet everyone's liking.\nAre you OK if I use the version-string and add OS specific options?\nSomething like:\n'version-string': {\n    win32: {\n        CompanyName: packageJson.author.name,\n        FileDescription: packageJson.name,\n        ProductName: packageJson.productName,\n        OriginalFilename: packageJson.name + '.exe'\n    },\n    darwin: {\n        CFBundleName: packageJson.productName\n    }\n}\nIn this case if the user doesn't specify the CFBundleName the name will be used.\nThis structure allows future usage of other attributes. \nHow does that sounds like?\n. @erkyrath That's the thing on Windows and Linux I can set that to use either name or productName (aka title) but on OSX I'm stuck with using name only.\nI want to be able to set CFBundleName to productName.\nCFBundleDisplayName using name is just fine for me, but who knows who would like to change that.\nWhat I'm proposing is to add flexibility in setting those attributes on OSX.\nYes, by containing folder I mean NAME-darwin-x64.\n. And btw a great example is VS Code which has CFBundleName set to \"Code\" and CFBundleDisplayName set to \"Visual Studio Code\". Clear separation of name and productName.\n. @malept \nCombing through the issues I found #331. My proposal is a good candidate to address that issue too.\nWe could rename version-string to metadata and have OS specific properties.\nThoughts?\n. According to Apple Developer Docs we should support the assignment of both CFBundleDisplayName and CFBundleName in case of localization.\n. @malept Coming back at this. Would you consider using the displayName first and fallback to name for CFBundleDisplayName and CFBundleName?\n. ",
    "yani-": "We've encountered this issue recently and wrote an article on how to update the manifest of electron using mt.exe. Not all mt versions will work: http://layer0.authentise.com/electron-and-uac-on-windows.html\n. ",
    "mhagmajer": "@malept, I don't think these are the same issues. The problem that I have is that electron-packager looks at all the modules that are in my devDependencies which take a lot of time given their size. Adding --prune flag doesn't help it. I was only able to mitigate that problem by adding the ignore flag mentoned above.\n. ",
    "plrthink": "It seems like something wrong with vs2015, after I changing to vs2013 as electron docs says it works fine.\n. #200\n. @malept Sure, I would do that shortly.\n. @malept added a test and docs to usage\n. and upload this image to show it sets the application category type to Developer Tools\n\n. @malept check again~\n. @malept Ok, I would do this ASAP.\n. @malept Please check again~\n. :+1: \n. @malept  Sure, sorry for breaking the code style... I would change that.\n. ",
    "SamvelRaja": "Still for me the icon is not changing in windows build. I am passing the option through cmd line as --icon\nIs there any condition for the location of icon?\n. ",
    "mattkenefick": "+1\n. ",
    "eugirdor": "I would find being able to specify a custom temp build directory helpful as well.  I am trying to run multiple builds in parallel, but it fails because they all try to write into the same temp directory.\n. @malept I am using that for now, but it only works when using the command line (or via spawn).\nI have not found a workaround if you are using the programmatic interface:\nvar packager = require('electron-packager')\n. @malept The problem is that is global, so all parallel builds will end up using the last set value.  I should have a pull request soon that adds the configurable switch.  Just testing it out now.\n. @malept Any idea what might have caused the one test to fail?  Doesn't seem related to my changes.\n. Alright, thanks.  I'll add a test in a bit and push again.\n. @malept Test added\n. @malept Whitespace fixed and commits squashed\n. ",
    "EragonJ": "If you need any help, feel free to tag me by the way ! \n. :+1: \n. ",
    "tsamsonbm": "This seems like a really simple, useful fix.  I was jut about to put in a ticket for asar-unpack-dir not working.\n. ",
    "reach2jeyan": "I am using the electron version 4.0.2 in the package.json and it would still throw me the same error on npm start . The same would work on windows which is why I am kinda hesitant to do any change to the code. What issue is this?. ",
    "inukshuk": "Yes, I should have added a test in the first place, sorry. Is it OK to include it with the default tests? Seeing as this is the default behaviour that's where I put it.\nAlso made this work for the Mac version (where the resource path is different).\nFor what it's worth, I use this on Linux with no problems whatsoever (not packaging default_app that is).\nLet me know if I can do anything else!\n. Out of curiosity I followed up on this and it turns out that Electron actually looks for app, app.asar and default_app in that order.\nWhen you run electron with another directory, what actually happens is that main.js in default app is executed which then loads your app... in other words, if you experiment with deleting the default_app folder and then try to run outside of the resources directory, it won't work (this is what may have happened during your testing). Having said that, since we're packaging the app and therefore know that either app or app.asar is present it is definitely fine to remove the default app.\nAnyway, thought I'd post this in case any of it saves some time.\n. I just ran into a similar issue. In my case the new pruning method removes a folder in a module that contains only a package.json file. I don't know if this is the same problem as the OP but the resulting error in both cases is that a require fails, because the packaged app is missing a module. I guess this is a galactus issue?. @MarshallOfSound is galactus supposed to remove contents within a (direct) dependency? Because that's what is happening in my case. I have a direct dependency redux-saga; after installing the module there is a ./node_modules/redux-saga/effects/package.json (nothing else in that folder, its main pointing to a different folder); what's more, effects is not automatically loaded if you require just redux-saga (so it would be easy to miss if modules are being trimmed by default). After running electron-compile with prune enabled, redux-saga is included in the target, but the effects folder is missing. Is this something that could be caused by galactus or should I look elsewhere?\nThanks for your awesome work!. Is galactus supposed to trim the contents of modules? To repeat, in my case the required module is redux-saga; this module survives the pruning just fine, but one of its sub-folders is gone. In this specific case, the folder contains a package.json but for all intents and purposes it could be an arbitrary .json file. Again, I'm not talking about a full NPM module that's gone missing, but a single folder in a module. I was under the impression that the prune option is supposed to filter out only development dependencies and does not try to further optimize the contents production dependencies.\nHere is my test case:\n$ mkdir tmp\n$ cd tmp\n$ npm init\n$ npm i electron electron-packager --save-dev\n$ npm i redux-saga\n$ $(npm bin)/electron-packager . test --platform=linux\n\nAnd then:\n$ ls -l node_modules/redux-saga/effects/package.json\n$ ls -l test-linux-x64/resources/app/node_modules/redux-saga/\n\nAnd note that the effects folder is missing.. Will do, thanks for taking a look at it!. ",
    "byF": "There is no actual Dockerfile written by me, it uses the official Node image https://hub.docker.com/_/node/ and it is run as mentioned in the previous post.\nOur build.sh script contains a few npm commands - install, rebuild and running scripts defined in package.json; one of those scripts is executing electron-packager in the form mentioned in my previous post.\nThe space should not be issue - the container operates over that volume which is actually the folder on host system (you can notice that $(pwd)). I'm also not aware of any default resource constraints in Docker...\nImportant thing to mention - it works well outside of container (i.e. when I execute build.sh script on my machine); however there are reasons why we want to use Docker container for build (we don't have control over our CI server)\n. I tried aforementioned DEBUG as well, however in the end there was a weird problem with recursion. The fix was to precisely specify what is supposed to be packaged. I still consider this a bug, since the packaging worked outside of Docker container with exactly the same settings, however I'm closing it because I was not able to figure out what exactly is causing this.\n. @madebysid we ended up putting into the container as few files as possible. That fixed the recursion issue.\n. ",
    "mmahalwy": "@maxogden as per your suggestion, I am stuck here:\nMon, 08 Feb 2016 08:33:23 GMT extract-zip zipfile entry Electron.app/Contents/Resources/uk.lproj/\nMon, 08 Feb 2016 08:33:23 GMT extract-zip extracting entry { filename: 'Electron.app/Contents/Resources/uk.lproj/',\n  isDir: true,\n  isSymlink: false }\nMon, 08 Feb 2016 08:33:23 GMT extract-zip mkdirp { dir: '/chill/electron-packager/darwin-x64-template/Electron.app/Contents/Resources/uk.lproj/' }\nMon, 08 Feb 2016 08:33:23 GMT extract-zip finished processing Electron.app/Contents/Resources/uk.lproj/\nMon, 08 Feb 2016 08:33:23 GMT extract-zip zipfile entry Electron.app/Contents/Resources/vi.lproj/\nMon, 08 Feb 2016 08:33:23 GMT extract-zip extracting entry { filename: 'Electron.app/Contents/Resources/vi.lproj/',\n  isDir: true,\n  isSymlink: false }\nMon, 08 Feb 2016 08:33:23 GMT extract-zip mkdirp { dir: '/chill/electron-packager/darwin-x64-template/Electron.app/Contents/Resources/vi.lproj/' }\nMon, 08 Feb 2016 08:33:23 GMT extract-zip finished processing Electron.app/Contents/Resources/vi.lproj/\nMon, 08 Feb 2016 08:33:23 GMT extract-zip zipfile entry Electron.app/Contents/Resources/zh_CN.lproj/\nMon, 08 Feb 2016 08:33:23 GMT extract-zip extracting entry { filename: 'Electron.app/Contents/Resources/zh_CN.lproj/',\n  isDir: true,\n  isSymlink: false }\nMon, 08 Feb 2016 08:33:23 GMT extract-zip mkdirp { dir: '/chill/electron-packager/darwin-x64-template/Electron.app/Contents/Resources/zh_CN.lproj/' }\nMon, 08 Feb 2016 08:33:23 GMT extract-zip finished processing Electron.app/Contents/Resources/zh_CN.lproj/\nMon, 08 Feb 2016 08:33:23 GMT extract-zip zipfile entry Electron.app/Contents/Resources/zh_TW.lproj/\nMon, 08 Feb 2016 08:33:23 GMT extract-zip extracting entry { filename: 'Electron.app/Contents/Resources/zh_TW.lproj/',\n  isDir: true,\n  isSymlink: false }\nMon, 08 Feb 2016 08:33:23 GMT extract-zip mkdirp { dir: '/chill/electron-packager/darwin-x64-template/Electron.app/Contents/Resources/zh_TW.lproj/' }\nMon, 08 Feb 2016 08:33:23 GMT extract-zip finished processing Electron.app/Contents/Resources/zh_TW.lproj/\nMon, 08 Feb 2016 08:33:23 GMT extract-zip zip extraction complete\n. How can I debug this? \n. @Davidaredding have you had any luck with this? Doing electron was experimental for me and I hoped this would get me up and running really quickly, but decided to put electron on the side for now. I will be revisiting in a week. Hopefully this is working? \n. @xaph i have the same problem now with Docker. Did you get a fix?\n. @malept correct! The whole is for the packager to set env variables that will be consistent amongst all downloaded versions. This is used for setting variables like Google client keys, etc. If you have better solutions, I am certainly open to setting secret api keys, etc. in the app. I'd prefer that over process envs\n. @malept sorry, what do you mean by will get picked up by electron-packager? \n. @malept i am having some trouble with this actually in doing it in an elegant way. There is no way to tell Electron what env it is on after packaged and on opening the application such that it uses some env variables and not others. My only solution is creating and deleting files on packaging or developing which is not elegant in any way.\n. @malept i ended up using jsonfile to write json then erase it later.\n. ",
    "madebysid": "@byF Could you elaborate how you fixed this? I've stumbled across the same issue, the packager works fine locally, but fails with an ENAMETOOLONG on Docker\n. ",
    "dennyferra": "This is happening to me without use of Docker on an OSX 10.10 Mac Mini build machine. It works fine on my local machine (OSX 10.11) but on the mini every build fails with multiple ENAMETOOLONG:\n\nerrno: -63,\ncode: 'ENAMETOOLONG',\nsyscall: 'unlink',\npath: '/Users/cruisecontrol/cni-bulk/electron-packager/darwin-x64/cni-darwin-x64/Electron.app/Contents/Resources/app/electron-packager/darwin-x64/cni-darwin-x64/Electron.app/Contents/Resources/app/electron-packager/darwin-x64/cni-darwin-x64/Electron.app/Contents/Resources/app/electron-packager/darwin-x64/cni-darwin-x64/Electron.app/Contents/Resources/app/electron-packager/darwin-x64/cni-darwin-x64/Electron.app/Contents/Resources/app/electron-packager/darwin-x64/cni-darwin-x64/Electron.app/Contents/Resources/app/electron-packager/darwin-x64/cni-darwin-x64/Electron.app/Contents/Resources/app/electron-packager/darwin-x64/cni-darwin-x64/Electron.app/Contents/Resources/app/electron-packager/darwin-x64/cni-darwin-x64/Electron.app/Contents/Resources/app/electron-packager/darwin-x64/cni-darwin-x64/Electron.app/Contents/Resources/app/electron-packager/darwin-x64/cni-darwin-x64/Electron.app/Contents/Resources/app/node_modules/react-json-tree/node_modules/core-js/library/fn/string/virtual/trim.js' },\n\nNode 5.10.1, npm 3.8.3, electron-packager 6.0.2\n. @malept Thanks that resolved it\n. ",
    "bgrayburn": "@malept I'm having the same problem as @dennyferra but aren't sure what you mean by ignore your out folder. Could you elaborate?\n. ",
    "sebastianrosik": "I've had similar problem (also ENAMETOOLONG on Docker/OSX). In my case moving the output to tmp did not help. What was the problem? My project had a structure where there was a directory \"app/resources\" which caused all the havok, renaming it to something like \"app/files\" resolved the issue. The \"resources\" directory in my project was in conflict with the \"resources\" directory used by electron-packager.\n. ",
    "Iliyass": "i had the same issue, I just ignored electron-packager and it works, add --ignore=electron-packager \n. ",
    "otakustay": "I tried to simplify the problem and finally find out that babel-register causes the issue, these are what I get in uncaughtException event:\nError: Couldn't find preset \"es2015\" relative to directory \"/Users/otakustay/Dev/icarus/releases/icarus-darwin-x64/icarus.app/Contents/Resources/atom.asar/browser/api/lib\"\nI'm not quite experienced in .asar format but its weired for babel to resolve presets there, when I run electron ./app manually this line of code would never be executed\n. Currently I tell babel to ignore any modules in any .asar files and it runs correctly, maybe this is the best solution?\n. Thanks @malept , it is actually the case of locale, I tried to change command to:\nshell\nexport LC_ALL=zh_CN.UTF-8 && export LANG=zh_CN.UTF-8 && unrar lb Archive.rar\nThen the app runs perfectly\nSo it seems to be an issue with electron itself? or just the problem of electron-packager that did not package an app with the same locale of running os? If problem belongs to electron, we can close this issue :)\n. The minimum command is:\nshell\nexport LANG=zh_CN && unbar lb Archive.rar\nin which zh_CN is my system locale\nThe default output of locale in packaged app is:\nshell\nLANG=\nLC_COLLATE=\"C\"\nLC_CTYPE=\"C\"\nLC_MESSAGES=\"C\"\nLC_MONETARY=\"C\"\nLC_NUMERIC=\"C\"\nLC_TIME=\"C\"\nLC_ALL=\n. Just use {env: process.env} as options parameter of execSync function do not resolve this issue:\njs\n// Still with problem\nlet s = require('child_process').execSync('unrar lb Archive.rar', {env: process.env});\nHere is a dump of process.env object:\njson\n{\n    \"TMPDIR\": \"/var/folders/pw/yfdnt2s136l9s6_w2kwghzqm0000gn/T/\",\n    \"__CF_USER_TEXT_ENCODING\": \"0x1F5:0x19:0x34\",\n    \"SHELL\": \"/bin/zsh\",\n    \"HOME\": \"/Users/otakustay\",\n    \"Apple_PubSub_Socket_Render\": \"/private/tmp/com.apple.launchd.vveKMvObNq/Render\",\n    \"SSH_AUTH_SOCK\": \"/private/tmp/com.apple.launchd.9NUkEfFeYR/Listeners\",\n    \"PATH\": \"/usr/bin:/bin:/usr/sbin:/sbin\",\n    \"LOGNAME\": \"otakustay\",\n    \"XPC_SERVICE_NAME\": \"0\",\n    \"USER\": \"otakustay\",\n    \"XPC_FLAGS\": \"0x0\",\n    \"GOOGLE_API_KEY\": \"***\"\n}\nSeems no locale related properties there, compared to the one when app is started with electron .:\nson\n{\n    \"PATH\": \"/usr/local/bin:/usr/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin\",\n    \"TMPDIR\": \"/var/folders/pw/yfdnt2s136l9s6_w2kwghzqm0000gn/T/\",\n    \"LOGNAME\": \"otakustay\",\n    \"XPC_FLAGS\": \"0x0\",\n    \"HOME\": \"/Users/otakustay\",\n    \"Apple_PubSub_Socket_Render\": \"/private/tmp/com.apple.launchd.vveKMvObNq/Render\",\n    \"LANG\": \"zh_CN.UTF-8\",\n    \"COLORFGBG\": \"7;0\",\n    \"USER\": \"otakustay\",\n    \"SSH_AUTH_SOCK\": \"/private/tmp/com.apple.launchd.9NUkEfFeYR/Listeners\",\n    \"TERM\": \"xterm-256color\",\n    \"ITERM_PROFILE\": \"Hotkey Window\",\n    \"TERM_PROGRAM\": \"iTerm.app\",\n    \"XPC_SERVICE_NAME\": \"0\",\n    \"SHELL\": \"/bin/zsh\",\n    \"ITERM_SESSION_ID\": \"w0t2p1:E2B1EE5A-8296-451D-913E-AF33A18F8A11\",\n    \"PWD\": \"/Users/otakustay/Dev/electron-bug\",\n    \"__CF_USER_TEXT_ENCODING\": \"0x1F5:0x19:0x34\",\n    \"SHLVL\": \"1\",\n    \"OLDPWD\": \"/Users/otakustay/Dev\",\n    \"ZSH\": \"/Users/otakustay/.oh-my-zsh\",\n    \"PAGER\": \"less\",\n    \"LESS\": \"-R\",\n    \"LC_CTYPE\": \"zh_CN.UTF-8\",\n    \"LSCOLORS\": \"Gxfxcxdxbxegedabagacad\",\n    \"AUTOJUMP_SOURCED\": \"1\",\n    \"AUTOJUMP_ERROR_PATH\": \"/Users/otakustay/Library/autojump/errors.log\",\n    \"_\": \"/usr/local/bin/electron\",\n    \"GOOGLE_API_KEY\": \"***\"\n}\nMany things are missing in packaged app.\n. By double-clicking it\n. OK, I'll try to determine system env variables, thanks for hints, closing this:)\n. ",
    "Davidaredding": "Having the same issue, identical command running on OSX 10.11.1\n. Unfortunately it doesn't :(\nDavids-MacBook-Pro:SDE David$ set DEBUG=electron-download,extract-zip\nDavids-MacBook-Pro:SDE David$ electron-packager . FooBar --platform=darwin --arch=x64 --version=0.35.0\nPackaging app for platform darwin x64 using electron v0.35.0\nAnd there it sits.\n. Doh'  You are correct! Sorry about that.  I do see quite a bit being written to the console now.  This seems to be the where it stops\nextract-zip mkdirp +0ms { dir: '/var/folders/k7/tqx9n0_j53v2z5y2dz1nk0vm0000gn/T/electron-packager/darwin-x64-template/Electron.app/Contents/Resources/zh_TW.lproj/' }\n  extract-zip finished processing +0ms Electron.app/Contents/Resources/zh_TW.lproj/ { err: undefined }\n  extract-zip zip extraction complete +0ms\n. seems to stop here\nextract-zip mkdirp +0ms { dir: '/var/folders/k7/tqx9n0_j53v2z5y2dz1nk0vm0000gn/T/electron-packager/linux-x64-template/locales' }\n  extract-zip opening read stream +0ms /var/folders/k7/tqx9n0_j53v2z5y2dz1nk0vm0000gn/T/electron-packager/linux-x64-template/locales/ta.pak\n  extract-zip finished processing +1ms locales/ta.pak { err: undefined }\n  extract-zip zip extraction complete +0ms\n. @mmahalwy;  Were you able to get this working?\n. @maxogden If this is related, what would be the potential work around?\n. Also, what additional information is needed for this issue?  Happy to provide anything that will bring a speedy resolution.\n. I have,  About 5 comments up.\n. ah sorry, no not on linux, i misread your comment.  However I don't have the resources to setup a linux machine to build my project.  Is this issue strictly related to (and reproducible on) OSX?\n. @malept ;  Unfortunately i'm not very well versed in either technology.  \n@maxogden I will attempt to reproduce it with a bare-bones electron application.  In the meantime, are there any parts of an electron application that electron-packager is dependent on that would cause this issue (or any issue) that i should look for? or this this likeliness just a shot in the dark?\n. It's not, but that thread is dead waiting on op to deliver More Information.\n. I'm not sure how his guess helps find a solution or work around.\n. ",
    "Ryanmtate": "EDIT: .DS_Store actually does not appear to be the issue. Still hangs.\nstill troubleshooting.\n// original post\nI recently encountered the same problem when working on a shared repository and building on an OS X machine.\nThe solution was removing the .DS_Store file from the application directory root before building.\nsee: https://en.wikipedia.org/wiki/.DS_Store#Problems\n. Issue ultimately ended up being too many files in a bower component..\nI might suggest avoid using material-design-icons bower package in electron... \n. ",
    "xaph": "I'm trying to build an electron app on docker with root user but it seems my build stucks also.\nI'm using ubuntu 14.04 on docker.\nIs there any problem on running electron-packager by root?\n. ",
    "ide": "I hit this issue too with electron-packager 5.2.1 on OS X El Capitan. Adding console.log statements showed that the problem was one of the ncp calls here: https://github.com/electron-userland/electron-packager/blob/85410316daa219d7e08b0d3d6fb4af7ff1259efa/common.js#L83.\nRestarting my computer didn't help, and I was able to build successfully with this version of electron-packager before. The two things that changed before things broke were that I had run git clean -dfx and npm installed again, and I updated some npm dependencies (moved from babel-polyfill to babel-runtime... should be innocuous).\nI upgraded to electron-packager 6.0.0 and the issue went away for now... agree that moving away from ncp is probably a good idea. Even if it doesn't fix the issue at hand, ncp is almost totally unmaintained. \n. ",
    "stoufa88": "I still have an issue on osx El Capitan when packaging for Darwin. \nIn fact, packager creates a directory called electron-packager, in which it runs infinite file creation loops. For example, app will have an app which also have an app... \nThis only happens when packaging on osx, because it works perfectly when packaging for osx from Linux.\n. ",
    "averissimo": "@mmahalwy @xaph did you guys get a fix with the docker image?. @malept thanks for adding the message, it would be awesome to fail after building everything possible, but the message alone helps.. I'm having the problem right now with 12.1.2 and flora-colossus v1.0.0 and galactus v0.2.1\nnote: chai is a dev-dependency as seen in package.json\n```\nError: Failed to locate module \"chai\" from \"/home/averissimo/work/github/yakyak/app\"\n    This normally means that either you have deleted this package already somehow (check your ignore settings if using electron-packager).  Or your module installation failed.\nat Walker.<anonymous> (/home/averissimo/work/github/yakyak/node_modules/flora-colossus/lib/Walker.js:109:35)\nat step (/home/averissimo/work/github/yakyak/node_modules/flora-colossus/lib/Walker.js:32:23)\nat Object.next (/home/averissimo/work/github/yakyak/node_modules/flora-colossus/lib/Walker.js:13:53)\nat fulfilled (/home/averissimo/work/github/yakyak/node_modules/flora-colossus/lib/Walker.js:4:58)\n\n```. I'm not sure how to setup a minimal testcase, below is a reproducible case:\nyakyak/yakyak#Dodenis-upgrade-electron with electron-packager v12.* fails to build a package due to missing chai module (a dev depedency for tests).\nWhere using v11.* works without problems.\n$ git clone https://github.com/yakyak/yakyak\n$ cd yakyak\n$ git checkout Dodenis-upgrade-electron\n$ sed -i 's/\"electron-packager\": \"^11.2.0\"/\"electron-packager\": \"^12.1.2\"/g' package.json\n$ npm install\n$ DEBUG=electron-packager npm run deploy:linux. ",
    "xionglun": "Sorry, I have found out the problem.\nMy app's node_modules folder has some broken links, it cause an error:\n\nError: ENOENT: no such file or directory\nerrno: -2\ncode: 'ENOENT'\nsyscall: 'stat'\npath: '/Users/***/app/node_modules/.bin/envify'\n. \n",
    "buunguyen": "+1. Would love to know the answer for this. It is a pain to have to run packager on every platform that needs supporting as opposed to running it once. Sort of the defeating the platform: 'all' option .\n. ",
    "rishson": "@malept @buunguyen to build platform specific modules with node, you use node-gyp to standardise the build process and build on the target OS (so you have the correct compiler and libs). TMK there is no current way of compiling a node module with native extensions on an OS that is different to the target OS of the extension.\nThe only support that electron-packager could reasonably give here is API support to grab pre-compiled platform specific binaries from a specified location and incorporate into the build - similar to what electron-prebuilt does for electron itself. Grabbing binaries from the wild is rightly frowned upon - hence platform specific builds.\n. @aekeus what does spctl give for your electron app:\nspctl --verbose=4 --assess --type execute myApp\nDoes this pass but a check of the Electron Framework fail?\n. @malept yep - makes sense. However, I'm trying to get to the underlying node executable directly. I guess my question could also be phrased as \"Where is the node executable in a packaged Electron app?\" :-)\n. @malept thanks for your help on this.\nSo on OSX, the node lib is MyApp.app/Contents/Frameworks/Electron Framework.framework/Libraries/libnode.dylib - equivalent to the node.dll on Win32 and libnode.so on Linux. \n. thanks @maxogden - I'll raise there.\n. Actually @maxogden, the following works fine:\n```\n\nnpm i electron-prebuilt\nELECTRON_RUN_AS_NODE=1 node_modules/electron-prebuilt/dist/Electron.app/Contents/MacOS/Electron -v\n```\n\nSo if the actual .app is fine, then it must be something that happens after download.\nI've tried performing the stuff my build does such as removal of default_app etc, but Electron still works as expected.\nThe only time that the env vars are ignored, is when running against the .app after running electron-packager.\nWill keep digging - and thanks for the quick response.\nFYI - I'm running electron-packager via grunt-electron\n. Quick update - I think I have found the issue. There seemed to be an issue in earlier versions of electron. Anyway, using electron 0.36.4 and all works fine now.\n@maxogden feel free to close this issue now - thanks.\n. ",
    "towertop": "@MarshallOfSound \nSeems electron-rebuild is to fix the native modules broken between different node version, for Electron's node version differ to the node when npm installing.\nBut electron-rebuild cannot fix this issue, at least not completely. The problem here is some native modules get broken across platforms, like Windows and Mac. \nAnd I think a big trouble is for npm doesn't mark modules with what platform they supports. I can hardly pick out the portable modules that can be relied on after distribution.\n. ",
    "choffmeister": "Any news on this? I also face the problem that my CI build (on Linux) building my electron app for OSX packages the linux bindings for sqlite instead of the OSX bindings.. ",
    "nmalcolm": "I'm facing the same issue. I have an Electron app which loads a local Express server. The page loads a single Javascript file.\n```\nvar url = require('url');\nvar querystring = require('querystring');\nvar process = require('process');\nvar path = require('path');\nmodule.paths.push(path.resolve('node_modules'));\nmodule.paths.push(path.resolve('../node_modules'));\nvar request = require('request');\n// ...\n```\nOn Ubuntu this works fine with electron . and by running the executable. On Windows running the executable fails with \"Uncaught Error: Cannot find module 'request'\". If I remove the module.paths.push() lines it fails on Ubuntu too.\nOther than the Express server everything is pretty standard. I'm only trying to load npm installed modules from the default node_modules directory.\nI should note it fails with and without asar. I'm not sure if this is a bug with Electron, Electron Packager, or I'm just doing something wrong. I'd like to think node_modules would be loaded without having to mess around with module.paths.\nAdditional info:\nElectron version: 0.36.2 (electron-prebuilt)\nElectron Packager version: 5.2.0\nNode version: 0.10.41\nNPM version: 2.14.14\nBuild command: electron-packager . app --platform=win32 --arch=x64 --version=0.36.2 --overwrite --asar=true\n. Ok, so I've done a little experimenting and this is what I've come up with:\nmodule.paths.push(path.resolve('node_modules'));\nmodule.paths.push(path.resolve('../node_modules'));\nmodule.paths.push(path.resolve(__dirname, '..', '..', '..', '..', 'resources', 'app', 'node_modules'));\nmodule.paths.push(path.resolve(__dirname, '..', '..', '..', '..', 'resources', 'app.asar', 'node_modules'));\nUbuntu (electron . and build): Works with and without asar.\nWindows (Build): Works with and without asar.\nOSX: Untested, but should work.\nThere's probably a less messy approach, but this is the only thing I've found which works.\nHope this helps someone.\n. It depends on how I'm running the app. Without the first line electron . fails, without the third/fourth lines the actual build fails (without/with asar, respectively), and I believe without the second line the build fails when running it on the command line from a parent directory (e.g. ./app/app).\nThe request module is located (when built) at app/resources/app/node_modules/request/.\n. ",
    "Lyrillind": "After I package with electron-packager, I run packaged app it tells me \"can't find module\". But if I run as \"electron .\" it works perfectly. Without asar, \"electron /path/to/packaged/app/source\" works but directly run packaged app, it fails. Don't know why...\n. ",
    "skyksandr": "Same for me. Electron 0.37.2\n. ",
    "rodhoward": "I'm also getting this issue here is a very simple example of the issue:\n https://github.com/rodhoward/electron-quick-start\nnpm -v  = 3.3.12\nnode -v = v5.4.1\nI'm running Linux mint 17.2 64-bit\nand I'm trying to install it on a windows 8 vm\n. Rather than argue about if it works or not could the electron-quick-start package be updated to include lodash and/or jquery so that we have at least one working example of imported libraries.\n. ",
    "nouh": "same error here, I'm using electron-packager 6.0 and eletron 0.37.5\n. ",
    "ManuelOverdijk": "A solution for me is to install the required node module in the same directory as the electron.js file.\n. ",
    "pushpak": "Here's what i did for electron 0.37.7 and electron-builder 3.11.0\n```\n  mainWindow.loadURL(\"file://\" + __dirname + \"/index.html\");\nmainWindow.webContents.executeJavaScript(var path = require('path');\n    module.paths.push(path.resolve('node_modules'));\n    module.paths.push(path.resolve('../node_modules'));\n    module.paths.push(path.resolve(__dirname, '..', '..', 'electron', 'node_modules'));\n    module.paths.push(path.resolve(__dirname, '..', '..', 'electron.asar', 'node_modules'));\n    module.paths.push(path.resolve(__dirname, '..', '..', 'app', 'node_modules'));\n    module.paths.push(path.resolve(__dirname, '..', '..', 'app.asar', 'node_modules'));\n    path = undefined;);\n```\nThis works on all platforms.\n. ",
    "tenKinetic": "A note for potentially confused travellers. Ensure you're not using --ignore=\"something-that-will-match-a-module-folder-name-as-well-as-what-you-meant-to-ignore\".\n. ",
    "MWalid": "I had the same issue, none of the suggestions mentioned above worked for me.\nThe solution was to package my app under a windows virtual machine running on my mac, and everything worked seamlessly.\n. ",
    "ahallicks": "I now have this issue too. It has only happened with a recent module I've installed: @paulcbetts/system-idle-time. Before I added this everything was fine.\nI extracted the created app.asar generated from running electron-packager and there is no folder @paulcbetts in the node_modules directory so I presume it is not being packaged for some reason?\nI have checked and I've not got any ignores anywhere. My app runs perfectly fine from the command line before being packaged.\n. I think I'm getting something akin to this problem on Windows 10 and the latest electron-packager. When I run my script I get the following:\nelectron-packager Electron Packager 9.1.0 +0ms\n  electron-packager Node v8.5.0 +1ms\n  electron-packager Host Operating system: win32 (x64) +0ms\n  electron-packager Packager Options: {\"appBundleId\":\"OptimusTime\",\"appCategoryType\":\"public.app-category.productivity\",\"appCopyright\":\"Copyright \u00a9 2017 A Person, All rights reserved.\",\"appVersion\":\"2.0.0\",\"arch\":\"x64\",\"asar\":false,\"buildVersion\":\"2.0.0\",\"dir\":\"C:\\\\Development\\\\OptimusTime\\\\App\",\"icon\":\"./build/icon.ico\",\"name\":\"OptimusTime\",\"out\":\"C:\\\\Path\\\\To\\\\App\\\\out\",\"overwrite\":true,\"platform\":\"win32\",\"protocol\":[\"optimus\"],\"protocolName\":[\"OptimusTime\"],\"prune\":true,\"win32metadata\":{\"CompanyName\":\"A Person\",\"FileDescription\":\"OptimusTime\",\"ProductName\":\"OptimusTime\",\"InternalName\":\"OptimusTime\"}} +1ms\n  electron-packager Target Platforms: win32 +1ms\n  electron-packager Target Architectures: x64 +1ms\n  electron-packager Inferring target Electron version from electron in C:\\Path\\To\\App\\package.json +0ms\n  electron-packager Application name: OptimusTime +25ms\n  electron-packager Target Electron version: 1.7.6 +0ms\n  electron-packager Ignored path regular expressions: [ '/node_modules/electron($|/)',\n  '/node_modules/electron-prebuilt(-compile)?($|/)',\n  '/node_modules/electron-packager($|/)',\n  '/\\\\.git($|/)',\n  '/node_modules/\\\\.bin($|/)',\n  '\\\\.o(bj)?$' ] +0ms\n  electron-packager Downloading Electron with options {\"platform\":\"win32\",\"arch\":\"x64\",\"version\":\"1.7.6\"} +0ms\nPackaging app for platform win32 x64 using electron v1.7.6\n  electron-packager Creating C:\\Users\\me\\AppData\\Local\\Temp\\electron-packager\\win32-x64-template +218ms\n  electron-packager Extracting C:\\Users\\me\\.electron\\electron-v1.7.6-win32-x64.zip to C:\\Users\\me\\AppData\\Local\\Temp\\electron-packager\\win32-x64-template +2ms\n  electron-packager Initializing app in C:\\Users\\me\\AppData\\Local\\Temp\\electron-packager\\win32-x64\\OptimusTime-win32-x64 from C:\\Users\\me\\AppData\\Local\\Temp\\electron-packager\\win32-x64-template template +2s\n  electron-packager Ignored paths based on the out param: [ 'C:\\\\Path\\\\To\\\\App\\\\out' ] +2s\nand then everything just stops before it chucks out an ELIFECYCLE error. I had to delete the Temp directory twice before I managed to get it packaging once. And I've only managed to get it working once today.. ",
    "leshow": "adding a native module, lzma-native has created this issue for me as well. \n. for those having this issue with a native module, i've had some help and am making some headway on this issue.\nit appears to be (at least, in my case) because of a dll required by the native module not being found after the application is packaged.\nI created a folder, dropped the dll in it and added it to my PATH, the asar-packed application loads fine subsequently. This is obviously not a solution that will help redistributing the application, but a step further nonetheless.\n. Update: including the dll in the base electron app dir was sufficient for electron to find it\napp/\n       electron.exe\n       msvcp120.dll\n       libEGL.dll\n       ...\n      PUT DLL HERE!\n       resources/ \n                        app.asar\n                        electron.asar\n. ",
    "maxdow": "Same for me with electron-spell-check-provider\n. ",
    "RilRil": "I have the same issue and not using asar didn't help .. \n. I tried to make a simple project here. I just added ursa native module and it just doesnt wok : A dynamic link library (DLL) initialization routine failed .\n. I'm supposed to use electron-builder, but for now even 'electron index.js' doesn't work on the sample project on my machine..\n. back to my problem, the thing that i dont understand is that the module not found (%userprofile%\\AppData\\Local\\Temp\\%randomname%.tmp.node) exists ...\nand why is it random name ?\n. Ok I made some progress, \nI run the app a first time, I get the error...\nthen I go to C:\\Users\\AppData\\  and I delete \\Local and Roaming\nI try again and it works ! \nI run my tests on a \"clean\" machine. Fresh windows install, no nodeJs, no electron, nothing.\nDoes this make sens to anyone ?\n. ok actually i've done another thing for it to work, I've installed Git for windows and I checked the \"Use git and optional Unix tools for the windows Command Prompt\" option ..\nso, it looks like the packager or the builder is using a command which does not exist on Windows ... \nedit: it comes from Mingw\n. okay actually a .dll was missing that Git adds when installing with the option! It was libeay32.dll (SSL). \nSo the solution from @leshow works, I just added the missing .dll next to the .exe and it worked.\n. ",
    "jjTudu": "Same problem here...\nMake an installer is harder than making a project....\nThere should be an easy workaround\n. i have external modules in project,\nnpm i nightmare --save\nusing through require('external modules'), in development mode it works fine, but after electron-builder process, it throw error in module.js 440 Cannot find module.\nAnd yes require is used in render processes.  what i guess is external modules are not being added in electron.asar file, but how to add? and how to use the extraResources option, any doc or tutorial would be helpful.\n. i use nightmarejs to scrap the site, and the scraped data is used for calculation.\nAlgo.\n1. user select which data is required\n2. nightmarejs fetch the data from url.(nightmarejs support click event)\n3. the data i scrap is used for calculation.\nNote: data cannot be scrap without click, or change events.\nis my approach completely wrong? and it's not only nightmarejsthrow error, other external library gives too\nand Thank you for prompt reply\n. ",
    "pilar1347": "I have an Electron app that I want to generate another Electron app. The idea is the user inputs images and text using the master app and then can press a button to generate an exe/app file to distribute.\nI've created a test case to illustrate. I've only created this for darwin x64 right now. To recreate the issue clone repo and npm install in both the root folder and the app folder. Test in development mode using command npm start. Press the button in the app and you will see in the console log that the child app has been created successfully.\nBut if you build the master app using these parameters:\nelectron-packager app test --platform=darwin --arch=all --version=1.3.3 --overwrite --out=builds\nRun that .app and press the generate button, the error Cannot find module 'electron-packager' appears. Any ideas why this is happening?\n. ",
    "idododu": "package.json won't work\n{\n    ...\n    \"devDependencies\": {\n        \"jsonfile\": \"^2.4.0\"\n    }\n    ...\n}\npackage.json works\n{\n    ...\n    \"dependencies\": {\n        \"jsonfile\": \"^2.4.0\"\n    }\n    ...\n}\nit looks like that electron-packager looks up dependencies field to pack rather than devDependencies\n. ",
    "codyborn": "I found the proper solution was to migrate the dependency I wanted to be packaged with the application to a separate \"dependencies\" node in the packages.config.  electron-packager by default will remove the modules listed in the devDependencies section.\nExample:\n\"dependencies\": {\n    \"electron-squirrel-startup\": \"^1.0.0\"\n  },\n  \"devDependencies\": {\n    \"electron\": \"^1.3.4\",\n    \"electron-squirrel-startup\": \"^1.0.0\",\n    \"electron-winstaller\": \"^2.3.4\"\n  }\nHope it helps!\n. ",
    "jasonkester": "Strange that this got closed before a solution was posted, but codyborn above hits it:\nBy default, nothing in your node_modules folder will be copied to your final package. \nYou need to add a \"dependencies\" section to your package.json that explicitly lists everything in your node_modules folder.  You also need to dig in to each of those dependencies and fish out a version number to add as well.  Like this:  \n{\n    \"name\": \"your-app\",\n    \"version\": \"0.1.0\",\n    \"main\": \"main.js\",\n    \"dependencies\": {\n        \"aws-sdk\": \"2.6.9\",\n        \"electron-json-storage\": \"2.0.3\",\n        \"ipc\": \"0.0.1\",\n        \"shell\": \"0.3.2\"\n    }\n}\nI have no idea why this is not mentioned anywhere in the packaging docs, as it seems to me to be the most important piece of information.  As this issue shows, your app simply won't work if you don't do this.\n. ",
    "dougludlow": "I ran into this issue while rebuilding edge.js for electron. Ended up that I was missing the vcruntime140.dll.\nSee Error: The specified module could not be found for more details. Thanks for the hint @leshow!. I'm getting another, seemingly related, error in 5.4.1:\n```\n Error: Command failed: npm prune --production\nmodule.js:491\n    throw err;\n    ^\nError: Cannot find module 'electron-download'\n    at Function.Module._resolveFilename (module.js:489:15)\n    at Function.Module._load (module.js:439:25)\n    at Module.require (module.js:517:17)\n    at require (internal/module.js:11:18)\n    at Object. (C:\\Users\\doug\\AppData\\Local\\Temp\\electron-packager\\win32-x64\\app-win32-x64\\resources\\app\\node_modules\\electron\\install.js:10:16)\n    at Module._compile (module.js:573:30)\n    at Object.Module._extensions..js (module.js:584:10)\n    at Module.load (module.js:507:32)\n    at tryModuleLoad (module.js:470:12)\n    at Function.Module._load (module.js:462:3)\nnpm WARN Error: EPERM: operation not permitted, unlink 'C:\\Users\\doug\\AppData\\Local\\Temp\\electron-packager\\win32-x64\\app-win32-x64\\resources\\app\\node_modules\\electron\\node_modules\\@types\\node\\package.json'\nnpm WARN  { Error: EPERM: operation not permitted, unlink 'C:\\Users\\doug\\AppData\\Local\\Temp\\electron-packager\\win32-x64\\app-win32-x64\\resources\\app\\node_modules\\electron\\node_modules\\@types\\node\\package.json'\nnpm WARN   stack: 'Error: EPERM: operation not permitted, unlink \\'C:\\Users\\doug\\AppData\\Local\\Temp\\electron-packager\\win32-x64\\app-win32-x64\\resources\\app\\node_modules\\electron\\node_modules\\@types\\node\\package.json\\'',\nnpm WARN   errno: -4048,\nnpm WARN   code: 'EPERM',\nnpm WARN   syscall: 'unlink',\nnpm WARN   path: 'C:\\Users\\doug\\AppData\\Local\\Temp\\electron-packager\\win32-x64\\app-win32-x64\\resources\\app\\node_modules\\electron\\node_modules\\@types\\node\\package.json' }\nnpm ERR! code ELIFECYCLE\nnpm ERR! errno 1\nnpm ERR! electron@1.7.6 postinstall: node install.js\nnpm ERR! Exit status 1\nnpm ERR!\nnpm ERR! Failed at the electron@1.7.6 postinstall script.\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     C:\\Users\\doug\\AppData\\Roaming\\npm-cache_logs\\2017-09-14T21_35_15_517Z-debug.log\nat ChildProcess.exithandler (child_process.js:270:12)\nat emitTwo (events.js:125:13)\nat ChildProcess.emit (events.js:213:7)\nat maybeClose (internal/child_process.js:927:16)\nat Process.ChildProcess._handle.onexit (internal/child_process.js:211:5)\n\n```. Thanks for the quick reply, @malept. Now I'm seeing the following error:\n```\nError: Failed to locate module \"electron\" from \"C:\\Users\\doug\\AppData\\Local\\Temp\\electron-packager\\win32-x64\\app-win32-x64\\resources\\app\"\n    This normally means that either you have deleted this package already somehow (check your ignore settings if using electron-packager).  Or your module installation failed.\nat Walker.<anonymous> (C:\\Users\\doug\\source\\app\\node_modules\\pruner\\lib\\Walker.js:94:35)\nat step (C:\\Users\\doug\\source\\app\\node_modules\\pruner\\lib\\Walker.js:32:23)\nat Object.next (C:\\Users\\doug\\source\\app\\node_modules\\pruner\\lib\\Walker.js:13:53)\nat fulfilled (C:\\Users\\doug\\source\\app\\node_modules\\pruner\\lib\\Walker.js:4:58)\nat <anonymous>\n\n```\nI've tried downgrading to npm@5.2, but I'm still seeing the same issue. I'm running node@8.4.0.. Yeah, idk, I'm guessing it's just some incompatibility with npm 5 and node 8. It appears to be working fine on my build server with node 7 and npm 4. I'll prolly just need to downgrade again.. ",
    "tylervick": "Had to do this to build Hain as well - surprising we don't have a better solution for this.... ",
    "MyNameIsAlaa": "@jasonkester thanks man... you saved my day!\n. ",
    "SuperStewDK": "I solved this issue by adding the dependency to the configuration file.. ",
    "ashwinmr": "I figured out the reason for my issue and the solution.\nI was installing the module with the --save-dev flag. This was making it a development dependency and it would work when the application was started using electron .. But it wouldn't worked when packaged into an application.\nThe fix was to install the module without the flag. This would make it a normal dependency.\nThis automatically configures the package.json correctly. \nHope it helps !. ",
    "rip3rs": "I encountered the same problem.\nBut I realised I was using gulp browserify and sending my app to dist/main.min.js.... then have electron.js etc on the root folder.\nWith this bundled, electron cannot find node_modules, because it does not exist. be careful of this. . ",
    "xthdraft": "Following on from codyborn's and jasonkester's comments above,  I think the docs on electron-builder and electron-packager should explicitly advise that things in node_modules that are not added to  the dependencies field in package.json will not necessarily end up in the asar file.   \n. ",
    "narayananramu": "Electron Packager - 5.1.1 \nCLI\nelectron-packager . FooBar --platform=win32 --arch=ia32 --version=0.36.0 --icon=assets/win/icon.ico\nBuilding for Windows on Mac OS X El Capitan \n. \n. For OS X it is working perfectly, is there any requirements for building windows package I mean dependencies other than Wine and rcedit for OS X ? Is there any other better documentation/tutorial for the same ?\n. ",
    "martianyi": "same error here, on OSX if using electron-packager ./ ElectronTest --out=dist --platform=darwin --arch=x64 --version=0.36.7 --asar --overwrite --ignore=node_modules/electron-prebuilt --ignore=node_modules/electron-packager it works fine, but if I use electron-packager . ElectronTest --out=dist --all --asar --overwrite --ignore=node_modules/electron-prebuilt --ignore=node_modules/electron-packager,then it shows\n```\nelectron-packager . ElectronTest --out=dist --all --asar --overwrite --ignore=node_modules/electron-prebuilt --ignore=node_modules/electron-packager\n... and 1 more\n```\nand stucks.\nI didn't install anything like Wine or rcredit though.\n. ",
    "drakmail": "Have almost same issue: \n\u279c  universal-sms electron-packager . --all\nUnable to determine application name or Electron version. Please specify an application name and Electron version.\nCannot find module 'package.json' from '/Users/drakmail/Develop/drakmail'(Properties not found yet: dependencies.electron-prebuilt,devDependencies.electron-prebuilt)\n\u279c  universal-sms pwd\n/Users/drakmail/Develop/drakmail/universal-sms\n\u279c  universal-sms ls\nbin          db.gdb       index.html   js           main.js      node_modules package.json sender.js    storage.js\n. @malept Thanks, it's really helps!\n. ",
    "gvzq": "When I followed the instructions by using: \nelectron-packager . --all \nIt didn't work! I figured I need to do it manually..\nThis works in terminal:\nelectron-packager ./ App --out=dist --platform=all --arch=all --asar --overwrite --ignore=node_modules/electron-prebuilt --ignore=node_modules/electron-packager\n. Sorry if I wasn't clear. Running electron-packager ./ --all does not execute properly due to a EISDIR error. \nelectron-app usr$ electron-packager ./ --all\nPackaging app for platform linux ia32 using electron v1.3.3\nEISDIR: illegal operation on a directory, rename '/var/folders/jk/3cmm8ls96bnc00gfys3vqky80000gn/T/electron-packager/linux-ia32/-linux-ia32/electron' -> '/var/folders/jk/3cmm8ls96bnc00gfys3vqky80000gn/T/electron-packager/linux-ia32/-linux-ia32'\n. ok @malept \n. ",
    "ggojedap": "I had the same problem with the same error \"... and 1 more\" trying to package for win32 from Mac. In my case the solution was to add Wine to PATH.. ",
    "fasterthanlime": "As per CONTRIBUTING.md:\n- electron-packager 5.1.1\n- options:\nOptions: dir=\"stage\", name=\"itch\", version=\"0.35.4\", app-version=\"0.7.2\", prune, asar, overwrite, out=\"build/v0.7.2\", platform=\"darwin\", arch=\"x64\", icon=\"app/static/images/itchio.icns\", app-bundle-id=\"io.itch.mac\", app-category-type=\"public.app-category.games\", protocols=[{\"name\":\"itch.io\",\"schemes\":[\"itchio\"]}]\n- Building on OSX, for OSX\n- No stack trace, it's a logic question\n. Looking at Google Chrome.app/Contents/Versions/47.0.2526.80/Google Chrome Helper.app/Contents/Info.plist on my machine, it doesn't seem to have the same CFBundleURLTypes that Google Chrome.app itself has.\n. Can confirm that, removing the CFBundleURLTypes from the helper, then running\nsh\n/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill\n...then running and quitting the app again (for it to register again as protocol handler), open customprotocol:// works both when the app is running and when it isn't running.\n. > I'm guessing it's not reasonable to have a test case for this?\nWell... Travis has OSX machines, and afaict testing the above doesn't require any root privileges but having a fixture mac app that handles protocol properly seems like a lot of work :unamused: \nTo me the most important question is why was it coded that way in the beginning, was it tested (even manually, once) to begin with, and does changing this break it for the person who originally added it in ?\n. I can confirm that this PR fixed it for us (in production, for http://itch.io/app), and I can't wait to switch away from our fork and back to the upstream electron-packager.\nNot sure who you'd like confirmation from \u2014 blame brings up @kfranqueiro for this line, maybe they can help?\n. > refactor\nAh, I see.\nThe research really is pretty straight-forward, even though it was annoying to do, because it involves digging up the OSX commands to reset the right cache.\nIf both apps are registered as protocol handlers, and you're out of luck, the Helper will be called to handle some of your URLs, and since the Helper really isn't meant to be opened by anything other than the main app itself.. it just doesn't do anything (fails with various negative-integer error codes)\nIf you're lucky and somehow the main app takes precedence in OSX's cache (wasn't able to pinpoint what exactly determines that..), then things work fine.\nAs far as I can tell, the helper should never have been registered as protocol handler, if it was tested once and worked it was sheer luck, and that fix fixes it for us and our users (22K mac downloads & counting) 100% of the time.\nI'm really not sure what other steps to take to move this issue forward :panda_face: \n. > OK, I'm inclined to merge this and wait for any further bug reports to be filed.\n:dancers: there's already evidence that few people actually used it: I'm the only one pushing for a fix :)\n\ndigging up the OSX commands to reset the right cache.\n\ntook me a few minutes of googling to find it again, but for the curious/posterity, the tool in question is lsregister, found at:\nbash\n/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister\nYou can call it with -kill to reset protocol associations \u2014 reopening apps directly will start to reassociate protocols.\n. :+1: thanks a bunch!\n. ",
    "rdbell": "Ah, sorry! Not sure how I missed that in the README.\nThanks!\n. ",
    "cjb": "(Maybe electron-mac-sign or something, since Windows Electron apps also require signing?)\n. ",
    "d-schloss-mvg": "I dont know if this is the correct place, but using Umlauts or special characters in the name of the application causes these to appear in the bundle-identifiers of the helpers and thus signing is failing. (Signing itself works, but verifying yields a broken signature)\n. The problem are the special characters in the bundle-identifier. Even using the command line tool codesign directly - without any node stuff - fails (so it has nothing to do with electron-osx-sign, right?) if there are these special characters in the bundle-identifier of the helpers.\nSee Apple Documentation\nQuote: \"The bundle ID string must be a uniform type identifier (UTI) that contains only alphanumeric (A-Z,a-z,0-9), hyphen (-), and period (.) characters\"\nnon alphanumeric characters like \"\u00e4,\u00f6,\u00fc,\u00e9\" are not filtered out right now if the application name has some in it.\nEdit:\nShould I open a seperate issue for this?\nalso underscores that are used to replace whitespaces are not allowed in the bundle identifier, although they seem to work, at least with codesigning?\n. Yeah, its definitley the plists. If you just (manually) edit the bundle identifiers in the plists, codesigning works again.\n. Wow, thanks for the fast solution!\n. ",
    "tbogard": "yesm i;m a moron, it was a string, not a valid fileversion number\n. I had the same problem (cannot delete the .bin folder on temp folder).... very annoying\nsolution: revert to 7.3.0, and IT WORKED. For the moment I'm not updating to the latest version of packager. 7.3.0 can build properly apps at electron 1.8.2.. ",
    "IceApriler": "How should it be solved?  @malept Can you help me?. @malept \nHmmm... I don't know what environment DEBUG = electron-packager, but I can provide information about executing packager() first.\n```js\nconst packager = require('electron-packager')\nconst buildConfig = require('./build.config')\nfunction bundleApp () {\n  console.log(\\n${chalk.yellow('buildConfig')} is...\\n ${JSON.stringify(buildConfig)})\n  packager(buildConfig, (err, appPaths) => {\n    if (err) {\n      console.log(\\n${errorLog}${chalk.yellow('electron-packager')} says...\\n)\n      console.log(err + '\\n')\n    } else {\n      console.log(\\n${doneLog}\\n)\n    }\n  })\n}\nConsole output:node\n OKAY  take it away electron-packager\nbuildConfig is...\n {\"arch\":\"x64\",\"asar\":true,\"dir\":\"/Users/april/myFile/www/electron/writer-tool/\",\"icon\":\"/Users/april/myFile/www/electron/writer-tool/build/icons/icon\",\"ignore\":{},\"out\":\"/Users/april/myFile/www/electron/writer-tool/build\",\"overwrite\":true,\"platform\":\"win32\"}\nPackaging app for platform win32 x64 using electron v1.8.7\nERROR  electron-packager says...\nError: rcedit.exe failed with exit code 1. Fatal error: Unable to parse version string for FileVersion\n``\nIs the above information useful? What else do I need to provide?.npm run build:win32`\npackage.json:\n```json\n{\n  \"name\": \"writer-tool\",\n  \"productName\": \"writerTool\",\n  \"version\": \"v0.2.0\",\n  \"author\": \"qimengjie@163.com\",\n  \"description\": \"A productivity tool for writers that supports txt reading, collecting vocabulary and bridges, inspirational shorthands, and categorizing the above and previewing them in a tree view.\",\n  \"license\": null,\n  \"main\": \"./dist/electron/main.js\",\n  \"scripts\": {\n    \"build\": \"node .electron-vue/build.js\",\n    \"build:darwin\": \"cross-env BUILD_TARGET=darwin node .electron-vue/build.js\",\n    \"build:linux\": \"cross-env BUILD_TARGET=linux node .electron-vue/build.js\",\n    \"build:mas\": \"cross-env BUILD_TARGET=mas node .electron-vue/build.js\",\n    \"build:win32\": \"cross-env BUILD_TARGET=win32 node .electron-vue/build.js\",\n    \"build:clean\": \"cross-env BUILD_TARGET=clean node .electron-vue/build.js\",\n    \"build:web\": \"cross-env BUILD_TARGET=web node .electron-vue/build.js\",\n    \"dev\": \"node .electron-vue/dev-runner.js\",\n    \"e2e\": \"npm run pack && mocha test/e2e\",\n    \"lint\": \"eslint --ext .js,.vue -f ./node_modules/eslint-friendly-formatter src test\",\n    \"lint:fix\": \"eslint --ext .js,.vue -f ./node_modules/eslint-friendly-formatter --fix src test\",\n    \"pack\": \"npm run pack:main && npm run pack:renderer\",\n    \"pack:main\": \"cross-env NODE_ENV=production webpack --progress --colors --config .electron-vue/webpack.main.config.js\",\n    \"pack:renderer\": \"cross-env NODE_ENV=production webpack --progress --colors --config .electron-vue/webpack.renderer.config.js\",\n    \"test\": \"npm run unit && npm run e2e\",\n    \"unit\": \"karma start test/unit/karma.conf.js\",\n    \"postinstall\": \"npm run lint:fix\"\n  },\n  \"dependencies\": {\n    \"axios\": \"^0.16.1\",\n    \"fs-extra\": \"^7.0.0\",\n    \"iconv-lite\": \"^0.4.23\",\n    \"iview\": \"^3.0.0\",\n    \"lodash\": \"^4.17.10\",\n    \"lowdb\": \"^1.0.0\",\n    \"shortid\": \"^2.2.12\",\n    \"vue\": \"^2.3.3\",\n    \"vue-electron\": \"^1.0.6\",\n    \"vue-router\": \"^2.5.3\",\n    \"vuex\": \"^2.3.1\"\n  },\n  \"devDependencies\": {\n    \"babel-core\": \"^6.25.0\",\n    \"babel-eslint\": \"^7.2.3\",\n    \"babel-loader\": \"^7.1.1\",\n    \"babel-plugin-istanbul\": \"^4.1.1\",\n    \"babel-plugin-transform-runtime\": \"^6.23.0\",\n    \"babel-preset-env\": \"^1.6.0\",\n    \"babel-preset-stage-0\": \"^6.24.1\",\n    \"babel-register\": \"^6.24.1\",\n    \"babili-webpack-plugin\": \"^0.1.2\",\n    \"cfonts\": \"^1.1.3\",\n    \"chai\": \"^4.0.0\",\n    \"chalk\": \"^2.1.0\",\n    \"copy-webpack-plugin\": \"^4.0.1\",\n    \"cross-env\": \"^5.0.5\",\n    \"css-loader\": \"^0.28.4\",\n    \"del\": \"^3.0.0\",\n    \"devtron\": \"^1.4.0\",\n    \"electron\": \"^1.7.5\",\n    \"electron-debug\": \"^1.4.0\",\n    \"electron-devtools-installer\": \"^2.2.0\",\n    \"electron-packager\": \"^8.5.0\",\n    \"electron-rebuild\": \"^1.1.3\",\n    \"eslint\": \"^4.4.1\",\n    \"eslint-config-standard\": \"^10.2.1\",\n    \"eslint-friendly-formatter\": \"^3.0.0\",\n    \"eslint-loader\": \"^1.9.0\",\n    \"eslint-plugin-html\": \"^3.1.1\",\n    \"eslint-plugin-import\": \"^2.7.0\",\n    \"eslint-plugin-node\": \"^5.1.1\",\n    \"eslint-plugin-promise\": \"^3.5.0\",\n    \"eslint-plugin-standard\": \"^3.0.1\",\n    \"extract-text-webpack-plugin\": \"^3.0.0\",\n    \"file-loader\": \"^0.11.2\",\n    \"html-webpack-plugin\": \"^2.30.1\",\n    \"inject-loader\": \"^3.0.0\",\n    \"karma\": \"^1.3.0\",\n    \"karma-chai\": \"^0.1.0\",\n    \"karma-coverage\": \"^1.1.1\",\n    \"karma-electron\": \"^5.1.1\",\n    \"karma-mocha\": \"^1.2.0\",\n    \"karma-sourcemap-loader\": \"^0.3.7\",\n    \"karma-spec-reporter\": \"^0.0.31\",\n    \"karma-webpack\": \"^2.0.1\",\n    \"less\": \"^3.7.1\",\n    \"less-loader\": \"^4.1.0\",\n    \"mocha\": \"^3.0.2\",\n    \"multispinner\": \"^0.2.1\",\n    \"node-loader\": \"^0.6.0\",\n    \"require-dir\": \"^0.3.0\",\n    \"spectron\": \"^3.7.1\",\n    \"style-loader\": \"^0.18.2\",\n    \"url-loader\": \"^0.5.9\",\n    \"vue-html-loader\": \"^1.2.4\",\n    \"vue-loader\": \"^13.0.5\",\n    \"vue-style-loader\": \"^3.0.1\",\n    \"vue-template-compiler\": \"^2.4.2\",\n    \"webpack\": \"^3.5.2\",\n    \"webpack-dev-server\": \"^2.9.7\",\n    \"webpack-hot-middleware\": \"^2.18.2\",\n    \"webpack-merge\": \"^4.1.0\"\n  }\n}\n```\nConsole output:\n```node\nHash: 821c67b50b42aeccd740\nVersion: webpack 3.12.0\nTime: 1304ms\n  Asset     Size  Chunks             Chunk Names\nmain.js  1.06 kB       0  [emitted]  main\n   [0] ./src/main/index.js 801 bytes {0} [built]\n   [1] external \"electron\" 42 bytes {0} [not cacheable]\n   [2] external \"path\" 42 bytes {0} [not cacheable]\n...\nOKAY  take it away electron-packager\nbuildConfig is...\n {\"arch\":\"x64\",\"asar\":true,\"dir\":\"/Users/april/myFile/www/electron/writer-tool/\",\"icon\":\"/Users/april/myFile/www/electron/writer-tool/build/icons/icon\",\"ignore\":{},\"out\":\"/Users/april/myFile/www/electron/writer-tool/build\",\"overwrite\":true,\"platform\":\"win32\"}\n  electron-packager Electron Packager 8.7.2 +0ms\n  electron-packager Node v10.6.0 +1ms\n  electron-packager Host Operating system: darwin (x64) +0ms\n  electron-packager Packager Options: {\"arch\":\"x64\",\"asar\":true,\"dir\":\"/Users/april/myFile/www/electron/writer-tool/\",\"icon\":\"/Users/april/myFile/www/electron/writer-tool/build/icons/icon\",\"ignore\":{},\"out\":\"/Users/april/myFile/www/electron/writer-tool/build\",\"overwrite\":true,\"platform\":\"win32\"} +0ms\n  electron-packager Target Platforms: win32 +0ms\n  electron-packager Target Architectures: x64 +0ms\n  electron-packager Inferring application name from productName in /Users/april/myFile/www/electron/writer-tool/package.json +4ms\n  electron-packager Inferring appVersion from version in /Users/april/myFile/www/electron/writer-tool/package.json +0ms\n  electron-packager Inferring target Electron version from electron in /Users/april/myFile/www/electron/writer-tool/package.json +3ms\n  electron-packager Application name: writerTool +0ms\n  electron-packager Target Electron version: 1.8.7 +0ms\n  electron-packager Ignored path regular expressions: [ /(^\\/(src|test|.[a-z]+|README|yarn|static|dist\\/web))|.gitkeep/,\n  '/node_modules/electron($|/)',\n  '/node_modules/electron-prebuilt(-compile)?($|/)',\n  '/node_modules/electron-packager($|/)',\n  '/\\.git($|/)',\n  '/node_modules/\\.bin($|/)',\n  '\\.o(bj)?$' ] +0ms\n  electron-packager Downloading Electron with options {\"platform\":\"win32\",\"arch\":\"x64\",\"version\":\"1.8.7\"} +24ms\nPackaging app for platform win32 x64 using electron v1.8.7\n  electron-packager Creating /var/folders/ds/s936vnv13v5g3mdgt9xc0cqr0000gn/T/electron-packager/win32-x64-template +246ms\n  electron-packager Extracting /Users/april/Library/Caches/electron/electron-v1.8.7-win32-x64.zip to /var/folders/ds/s936vnv13v5g3mdgt9xc0cqr0000gn/T/electron-packager/win32-x64-template +1ms\n  electron-packager Initializing app in /var/folders/ds/s936vnv13v5g3mdgt9xc0cqr0000gn/T/electron-packager/win32-x64/writerTool-win32-x64 from /var/folders/ds/s936vnv13v5g3mdgt9xc0cqr0000gn/T/electron-packager/win32-x64-template template +5s\n  electron-packager Ignored paths based on the out param: [ '/Users/april/myFile/www/electron/writer-tool/build' ] +1ms\n  electron-packager Pruning modules via: npm prune --production +33s\n  electron-packager Running asar with the options {} +24s\n  electron-packager Renaming electron.exe to writerTool.exe in /var/folders/ds/s936vnv13v5g3mdgt9xc0cqr0000gn/T/electron-packager/win32-x64/writerTool-win32-x64 +3s\n  electron-packager Running rcedit with the options {\"version-string\":{},\"file-version\":\"v0.2.0\",\"product-version\":\"v0.2.0\",\"icon\":\"/Users/april/myFile/www/electron/writer-tool/build/icons/icon.ico\"} +1ms\nERROR  electron-packager says...\nError: rcedit.exe failed with exit code 1. Fatal error: Unable to parse version string for FileVersion\n``\nDo i need providebuild.js?. @malept Is done! Thank u very much!\nHm......I think I will remove thev` from version in the future. Although only the win package is needed.. ",
    "btelintelo": "Wow we had the same issue and was on rabbit chase until I found this!  Our icon 1024x1024 was working on retina displays but would break on others.  Thank you for posting this.\n. Just change extension from png to icns\n\n. ",
    "kokarn": "Is this something that never will be revisited or is it open for discussion?\nI'm currently building a packaging system for an electron app and a lot of tools use stderr for errors so this is pretty inconsistent :/ \nRight now i'll have to do a dirty check for \"Packagin app for platform\" and handle that on it's own.\nAre you open for a future PR for say 9.* where I switch the .error for .log where applicable?\n. Sure, I'm just trying to bump and old discussion to get definite answers. Thanks for taking the time \ud83c\udf70 \n. So sorry about the questions! Was thinking because they didn't really add any value it was safe to remove.\nCurrently when packaging from C:\\repos\\my-app with an invalid package.json missing electron & electron-prebuild as (dev)dependency this is the output\n``` sh\n\nelectron-packager . --platform=win32 --arch=x64\n\nUnable to determine application name or Electron version. Please specify an application name and Electron version.\nFor more infomation, please see\nhttps://github.com/electron-userland/electron-packager/blob/master/docs/api.md#name or\nhttps://github.com/electron-userland/electron-packager/blob/master/docs/api.md#version\nCannot find module 'package.json' from 'C:\\repos'(Properties not found yet: dependencies.electron-prebuilt,devDependencies.electron-prebuilt)\n```\nWith the changes this is the output\n```\n\nelectron-packager . --platform=win32 --arch=x64\n\nUnable to determine application name or Electron version. Please specify an application name and Electron version.\nFor more infomation, please see\nhttps://github.com/electron-userland/electron-packager/blob/master/docs/api.md#name or\nhttps://github.com/electron-userland/electron-packager/blob/master/docs/api.md#version\nCannot find module 'package.json' from 'C:\\repos'(Properties not found yet: dependencies.electron,devDependencies.electron,dependencies.electron-prebuilt,devDependencies.electron-prebuilt)\n```\nI'm aware it's a very minimal change but I believe it would help to remove some confusion for first time adopters as it did for me.\nPS: I've filed a separate bug report for the incorrect path and ugliness of the output message\n. Yeah you are probably correct in that.\nHmm, probably not. \nFor a little while I mistook the version in package.json as the \"version\" it was referring to but that's probably just me being a bit hasty.\nLet's hope for #461 instead.\n. It's kinda of weird, yeah. \nFirst impressions is a bit all over the place. \nThe functionality is amazing but the mix & match between using custom props (productName), props with the same name (version) and default props (dependencies/devDependencies) makes it a bit confusing at first.\nI think id actually prefer a custom dotfile just for electron-packager or something like that just to make it 100% clear. \n. Great! Never heard of \"Principle of least astonishment\" but i totally agree with that sentiment. \n. ",
    "kamesh-a": "@kfranqueiro  sure.\n. @kfranqueiro Indentation looks fine to me. rename function didn't have any chains.\n. ",
    "moazam1": "My bad. I thought --version is for my app\n. ",
    "rickmed": "+1\nEG: Electron supports passing flags to the JS-engine like:\n$ electron --js-flags=\"--harmony_proxies --harmony_collections\" your-app\nIs this supported by electron-packager?\n. @malept can you please clarify?\n. On the exe itself (I assume if it is on the exe itself it will be set when calling the .exe from a shortcut)\n. @malept :+1: \n. ",
    "jiahaog": "I'm not entirely sure how should I go about writing a test for this. Based on the test app within the ./test/fixtures/basic, it's my understanding that the test script executes npm install before proceeding to package the app. In this scenario, the automatic inference of the electron version that I've written is bypassed because the packager is able to find a version of the nearest local installation of electron-prebuilt. \nCould you point me in the right direction on how to implement a test? \n. Oops sorry about that, it must have been something with my IDE that I overlooked\n. ",
    "inca": "This seems critical, b/c there is no other way to set -js-flags other than passing them to electron executable.\n. @malept Thanks for prompt reply! I'll give it a try shortly.\n. Unfortunately, after few prompt attempts I was unable to make it work with flags passed via package.json. I abandoned this in favor of few more build steps.\nAnyway, big thanks for your efforts!\n. You'll get a reasonable output if you try and run the app in terminal, e.g.:\nbash\npath/to/packaged.app/Contents/MacOS/App_name\nIn my case it's related to #241 which is, unfortunately, unanswered (I need to pass -js-flags='--harmony_async_await').\n. ",
    "damianobarbati": "Did anyone solve this? How can we pass --harmony flag to electron when building?. ",
    "danielehrhardt": "Something new here?  Is it possible to pack app in to a single .exe file. ",
    "abicorios": "Also, it is possible by electron-forge make\nSee  https://github.com/electron-userland/electron-forge\nBy default in Windows the single exe is created by squirrel. After running it is extracted in C:\\Users\\user\\AppData\\Local\\your_new_app, and rewrite it in each run. But user see alone executable, and almost all software work in a similar way.. Yes, it is possible by electron-forge make\nSee  https://github.com/electron-userland/electron-forge\nBy default in Windows the single exe is created by squirrel. After running it is extracted in C:\\Users\\user\\AppData\\Local\\your_new_app, and rewrite it in each run. But user see alone executable, and almost all software work in a similar way.. ",
    "JulsSmile": "Also looking for the answer to this question.\nAlternatively, you can pack an Electron application into an executable using a packer. For example this guide: How to pack an Electron Application into a single executable file\n. ",
    "doesdev": "I've run into a weird bug after these changes. I got it resolved, but can't for the life of me pin down the actual cause. \nI was getting The application ... can't be opened. after updating to > 6.0.0. The fix was to change options.name. At first I thought it was due to a period in the name but that wasn't it, as using the same name all lowercased works. Then I thought it was some kind of naming collision with another option, but changing things that were the same like app-bundle-id didn't fix it either.\nIt's an odd thing and I don't expect any further investigation of it as changing the name works. I really just wanted to document it here in case someone else runs into it.\n. ",
    "AlicanC": "@musocrat I can confirm. Thanks for writing the post, it saved me a good amount of time :+1:\n. @develar, the fix is using \"my app name\" instead of \"My App Name\". Capitalized names used to work on 5.1.0, but they got broken when I updated to 6.0.2 today.\n. ",
    "tevert": "Went back to 5.0.0 - now it complains about a missing required argument. Adding the --version argument kicks it off. \nGoing forward to 5.2.1 - with the version argument, it works! So I guess the only regression is how arguments are validated. \nI'm getting a crash when I try to run it (cannot read property \"name\" of null), but that's presumably an issue in my code/config. This issue is resolved; thanks!\n. ",
    "paulcbetts": "\n(@paulcbetts, once there's a consensus, could you please squash your commits?)\n\nnbd\n\nGiven that the code calls the ignore function within the function it actually passes to filter anyway, could we throw ! in front of that call so that ignore as a function could be implemented to return true to ignore instead?\n\nI'm okay with that\n\nAlso, it seems as if the added test failed on CI?\n\nYeah, I gotta fix that up\n. Can we actually fix this, instead of just documenting it? \n. @malept Awesome, into it\n. Sorry to bounce this back to you, but this has to be an electron-packager bug, Electron has no control over who calls rcedit on it to set the icon, that's entirely electron-packager's sitch\n. @coelho-extremosistemas Can you upload a sample of a file that didn't work?\n. > Of interest to @paulcbetts: I found out that the main key in electron-prebuilt-compile isn't pointing to a real file, so I can't do resolve('electron-prebuilt-compile') like I can with the others. I wonder if it's worth having resolve parity with the canonical electron module moving forward?\nI'd take that PR. hwhoops, agree\n. ",
    "tybourque": "ok so i switched so build with version 0.35.0 \nelectron-packager ./ <appName> --platform=win32 --arch=x64 --version=0.35.0\nnow there is an error saying unable to find valid app\n. electron-packager version is: 5.2.1\nand i am running on a 64bit Windows 10 machine.\nhere is the new error:\n\n. Root of that folder is: \n\nand inside the resources folder it contains:\n-app\n--- inside here looks like the root of the project itself \n-atom.asar\n. yes it looks like a mirror image of the source dir\n. Ok found the issue.\nSo i tried to build with 5.2.0 and it worked but when i ran the app it opened the default app a believe. The \"Welcome to Electron to run your app...\" so I then just tried to start it with npm start. Apparently I had a trailing comma. once i fixed this it builds fine with both 5.2.1 and 5.2.0\n. ",
    "nikhiljha": "The trailing comma is generated by npm init - which is kind of weird. The 'trailing comma' also passes the JS yaml parser - so this shouldn't be happening.\n. ",
    "Deepakchawla": "Run this command \nnpm install --save-dev electron\nFor more detials https://www.christianengvall.se/electron-packager-tutorial/. ",
    "steebchen": "I tried some versions earlier, which didn't work either.\nWith version v0.34.4, the following error occurred:\nluca@LucaPC ~/Documents/projects/EasyScreenshot/out/EasyScreenshot-linux-x64 $ ./EasyScreenshot \nA JavaScript error occurred in the main process\nUncaught Exception:\nSyntaxError: Unexpected reserved word\n    at exports.runInThisContext (vm.js:53:16)\n    at Module._compile (module.js:413:25)\n    at Object.Module._extensions..js (module.js:452:10)\n    at Module.load (module.js:355:32)\n    at Function.Module._load (module.js:310:12)\n    at Object.<anonymous> (/home/luca/Documents/projects/EasyScreenshot/out/EasyScreenshot-linux-x64/resources/atom.asar/browser/lib/init.js:125:10)\n    at Object.<anonymous> (/home/luca/Documents/projects/EasyScreenshot/out/EasyScreenshot-linux-x64/resources/atom.asar/browser/lib/init.js:127:4)\n    at Module._compile (module.js:434:26)\n    at Object.Module._extensions..js (module.js:452:10)\n    at Module.load (module.js:355:32)\nStill testing with other versions.\n. ~/Documents/projects/EasyScreenshot $ node -c app/background.js \nnode: bad option: -c\nSyntax error should not be there beacuse I'm using IntelliJ IDEA and there are no errors.\n. Ok, updated to v5.5.0, here is the output:\n```\n~/Documents/projects/MyApp $ node -c app/app.js\n/home/luca/Documents/projects/MyApp/app/app.js:7\nimport os from 'os'; // native node.js module\n^^^^^^\nSyntaxError: Unexpected token import\n    at startup (node.js:113:11)\n    at node.js:999:3\n```\nSeems like something is not working because this is ES6 code.\n. Ok, thanks for the great help. I was using a starter template where ES6 was used, found another way to compile it. \n. I don't remember anymore, but I think I simply used another starter\ntemplate. Babel would probably a solution too.\nMark Lee notifications@github.com schrieb am Di., 17. Mai 2016 15:45:\n\nMy educated guess is by using babel.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/electron-userland/electron-packager/issues/249#issuecomment-219721850\n. \n",
    "ac-opensource": "@steebchen how?\n. ",
    "adam-lynch": "I just tried this out (while trying to solve https://github.com/atom/electron/issues/4403) and weirdly, I had to change https://github.com/erkyrath/electron-packager/blob/featureplist/mac.js#L116 from using writeFileSync to writeFile (and nested all of the following code into the writeFile callback). Not sure what's up with that.\n. This PR seems good to me btw :+1: \n. > What went wrong when you had the writeFileSync lines?\nThe Info.plist didn't have my additions. I only had to change the one line I linked to, not all of the writeFileSyncs.\n\n(Those calls are not me; it's been writeFileSync for many releases, looks like.)\n\nYeah saw that.\n. ",
    "radiospiel": "Thank you for that superquick response :) From what I understand I am using \"electron-prebuilt\": \"^0.36.0\"\nI put up the entire project here: https://github.com/radiospiel/electron-quick-start and would be supergrateful if you or someone who knows more could have a look..\n. after poking around and understanding that --version describes the electron version to use and not the app version to build, I finally got it :) \n. ",
    "ghost": "The reason is that package.json is required in the sources directory.\n. not run. Thanks a million. I really appreciate it.. I'm a rookie!. ",
    "ledinhphuong": ":thumbsup: Great to know.\n. ",
    "olalonde": "Oh think that's a duplicate of https://github.com/maxogden/electron-packager/issues/264. I don't have a package.json in my ./electron dir.\n. ",
    "challenger532": "just add the option --asar\n. ",
    "arcticShadow": "I don't imagine that much code would be added here. Although, I do like the idea of extending the build process to 3rd party apps. This would potentially open up quite a big customisation opportunity. \nI'll have a think about how this can be implemented, and try do a code dive to figure out the where and how.\n. Done some digging into how this could be achieved. \nI think the best route to enable 3rd party build steps will be: \n- Plugin loader system. All plugins defined as options will be loaded during bootstrap phase. \n- add a \"PostBuild\" method to common.js (or possibly, a generic method, that takes a build step as a param, and an object/array of options)\n- In each linux/mac/win file, after the package/copy process, but before any signing or other final tasks, call the above methods from common, and pass in any relevant args. \n- 3rd party plugin makes changes, and returns to the platform specfic file to continue. \nThis feels like it could be a good use of generators. Thoughts?\n. That sounds right. It would be behind the --harmony flag though. Sometimes I forget what is and is not ES5 safe code. \n. Can't say i have seen those sort of stats.  I'm not even sure how they could be collected.\nSeems like generators will overly complicate the issue. And honestly, I was just looking for an excuse to use them.\n. Good point - i hadnt thought about other parts of our ecosystem collecting stats\n. Awww @MarshallOfSound Do you miss us so much you still want to contribute code ;-)\n. ",
    "mcfedr": "I didn't re-indent the whole file right away, it pushes everything very far to the right, what do you think @malept ?\n. ah, I even looked at the capitals and thought it should be small.\n. @malept squashed\n. I know what you mean, but its the only version that actually does the job, the previous version doesnt work\n. Its true I could sign seperately, but the point was that this tool tries to solve the whole process, and currently it doesnt because its using an old version of electron-osx-sign that is broken.\nMy curent build process uses electron-osx-sign seperately, I run them as a gulp procces\nI hadn't see that it break Node 0.12 compatibility, my only comment would be that for a build tool that is unlikely to be a problem, its not like people are trying to deploy to 'stable' server environment, I doubt its a problem for any build environments to use a more up to date version of Node.\n. I would have thought anyone using electron, which has only been around for a short time, is using a relatively new server.\nAlso, if electron-packager is unable to sign an app, you still have to use electron-osx-sign so the newer node dependancy still remains.\n. Config works for me, ill change it now.\nI current specify electron-prebuilt because it doesn't work without it, but I want to avoid it downloading when I do npm install, for example, my tests are run and fail, I didnt get to the electron stage, and saved all that time downloading\n. The other example is I am wanting to deploy my web app version of the code, that completely doesn't require electron.\n. Either way, this surely does no harm :)\nAlso right now, electron-prebuilt hasnt been updated to 1.1.1, put using this, it would be downloaded and everything would work...\n. @develar Its not a mistake here, i think the feature makes sense for both projects, builder and packager. \nAnd it would have been nice to have the same way of doing it for both, via config.electron-version, although now electron-builder has released build.electronVersion\nUnfortunately I haven't had time to update this pull request with the needed tests and docs changes.\n. ",
    "z-ax": "@malept, about 3-4s.\nJust checked with v0.36.10 - same behaviour.\nNode v5.7.1.\nForgot to tell: cached Electron is stored finely in ./cache (directory is created if doesn't exist). But no ./build dir created (and nothing built with existing dir). The tmpdir: './tmp' is also created if uncommented.\n. Hey, just checked with v6.0.0 and it's fine (except bug #300). Thanks for updates!\n. Hi. So, is it possible to set the Original filename? Now it's set as electron.exe in built *.exe Properties.\nAnd having the filename without spaces would be also sweet.\n. @malept Oops, missed \u00af(\u30c4)/\u00af. Excuses, all works as required.\nThanks for very fast reply!\n. I had once same problem, with 5.x, and it was resolved via re-downloading cache (with cleaning existing).\nWith Electron v0.37.4 at this point packager v6.0.0 only fails with the #300 for my build (on OS X host).\n. @tleunen, welcome.\nI suppose it might be a cancelled command run (like Ctrl+C), or some other kind of error where it's halted and not cleaned. I'd suggest to touch some file inside cache after download to be sure it's finished, and re-download if it doesn't exist.\n. @malept seems like I was a bit incorrect with conclusions.\nOne of Macs which had no Wine installed, just can't build successfully while other Mac with same OS and package versions builds all successfully. And it just halts without any message like this:\nPackaging app for platform darwin x64 using electron v0.37.6\nAnd that's it, last line of the output.\nBoth Wine's are installed via Brew, same version (wine --version wine-1.8.1).\nTried with both cached Electron prebuilt and clean run.\nMaybe, you have any idea?\n. Just tried, almost the same:\nThe cache parameter is deprecated, use download.cache instead\nThe cache parameter is deprecated, use download.cache instead\nThe cache parameter is deprecated, use download.cache instead\nPackaging app for platform win32 x64 using electron v0.37.6\nPackaging app for platform darwin x64 using electron v0.37.6\nMore details: I run builds from two Gulp tasks, separated platforms to osx/win.\nVia packager = require('electron-packager') and programmatic APIs.\nChecked again everything, all versions and stuff are the same. Permissions also are fine (built previously with gulp-electron, just checked - builds finely).\n. Alright! Seems like there's something with repo, or actually permissions, will check later.\nBut if you think there's something useful - surely I'll check with logs where needed.\nNow I have nice logs:\n```\n[01:53:07] Starting 'clean:app'...\n[01:53:07] Finished 'clean:app' after 23 ms\n[01:53:07] Starting 'build:osx'...\n[01:53:07] Starting 'build:win'...\nDownloading electron-v0.37.6-darwin-x64.zip\nDownloading electron-v0.37.6-win32-x64.zip\n[===============================>             ] 72.1% of 49.64 MB (413.59 kB/s)\nDMG file created: \"build/app-name-darwin-x64.dmg\"\nDownloading electron-v0.37.6-win32-x64.zip\nDownloading electron-v0.37.6-win32-ia32.zip\n[============================================>] 100.0% of 40.34 MB (1.6 MB/s)\nPackaging app for platform win32 ia32 using electron v0.37.6\nZIP archive created: \"build/app-name-win32-x64.zip\"\nZIP archive created: \"build/app-name-win32-ia32.zip\"\n[01:56:40] Finished 'build:win' after 3.53 min\n```\nP.S. I added a NPM package to actually pack dirs accordingly (in the logs). It makes DMG on OS X as well, ZIP on the rest. Approach is pretty same as gulp-electron did, but with DMG and 7z console version bundled for Windows hosts (as far as there's no console archivers AFAIK). Do you want to use it in electron-packager?\n. @gaccawi, obviously, you need to have Wine installed. Check the README.\n. ",
    "brrd": "\nI tested on a 64-bit Linux app using Electron 0.36.2\n\nI tried again on Linux 64 with an upgraded Electron (0.36.10) and I got the same behaviour than before.\n\nDoes the Windows behavior still occur when you run the app without packaging it?\n\nRunning $ ./node_modules/.bin/electron . --debug from the project directory works well (electron is installed as a dev-dependency).\n. Oh wait a minute... I tried a simple console.log(process.argv) at the very beginning of my code and it outputs the correct arguments, so the issue is obviously coming from my app. (This looks like a bug with nconf module, the module I use to parse optional arguments such as --debug here.)\nWell, this issue is probably not related to electron-packager. Sorry for this irrelevant report. \nThanks for your help indeed!\n. ",
    "zinwalin": "\nI noticed that once the app is packaged, command line arguments must be passed after a double dash: $ ./myApp -- --arg1 --arg2\nOn Windows, I even noticed that you need to add it twice: $ ./myApp.exe -- -- --arg1 --arg2\nIs there a way to avoid this behaviour in order to use a simple $ ./myApp --arg1 --arg2 instead?\n\nWhich version of electron-packager are you using?\n\n\"electron-packager\": \"^5.2.1\"\n\nWhat CLI arguments are you passing? Alternatively, if you are using the API, what parameters are\nyou passing to the packager() function?\n\nPlease see: https://github.com/brrd/Abricotine/blob/845b4016bda252ea6f58846c63cf7529c169314b/scripts/packager.js#L42\n\nWhat version of Electron are you building with?\n\n\"electron-prebuilt\": \"^0.35.0\"\n\nWhat is the host platform are you running electron-packager on?\n\nLinux Ubuntu 12.04 64 bit and Windows 7 64 bits. I could not try it on OS X.\n\nWhat target platform(s)/architecture(s) are you building for?\n\nSame as above.\n\nIs there a stack trace in the error message you're seeing?\n\nNone.\n\nPlease provide either a failing testcase or detailed steps to reproduce your problem.\n\nDownload one of the provided binaries: https://github.com/brrd/Abricotine/releases/tag/0.2.2\nAnd run:\n\n$ ./Abricotine --debug => not working\nthen $ ./Abricotine -- --debug => working (the Debug menu appears)\n\n\nAny solution for this issue? . ",
    "Enelar": "@malept, it was update. I rebuild-ed with 0.36.8 version.\nIf it would help, i will package for linux. But i ment unsatisfied dependencies. (first was libgtk-x11). Let me few minutes.\nAtom said that he wants windows vista or later.\n. @malept  lets pause wine research for the moment. my release dates are burning.\n. I were succeed to run executive at the f64, should i check i686?\nTrying to run under virtual box (windows 7)\n. OCR:\n```\nA JavaScript error occurred in the main process\nUncaught Exception:\nError: Cannot \ufb01nd module\n'C:\\Users\\USER\u2018\\Des|ctop\\testapp-win32- ia32\u2018\\resources\\app\\app\\init.js'\nat Function.Module._resohreFilename (moduleg'sz338:15)\nat Function.Module._load (moduleg'sz289:25)\nat Object.\n(C:\\Users\\USER\u2018\\Des|ctop\\testapp-win32- i332\u2018\\resources\\atom.asar\\browser\\lib\\init...:8)\nat Module._compile (moduleg'sz425z\ufb01)\nat Object.Module._extensions..js (modulejs:432:10)\nat ModuleJoad (moduleg'sz356:32)\nat Function.Module._load (moduleg'sz313:12)\nat Function.Module.runMain (moduleg'sz457:10)\nat startup (nodeJ:151:18)\nat node.js:1007:3\n```\nI saw issue without relative path require. I am using:\nelectron app/init.js\nand then\nrequire('./system')\n. 3.1 mkdir app\n3.2 Move source code there\n3.3 Change package.json start script to electron app/main.js\nI got success binary, will research what cause. At least it possible for me.\n. @kevinsawicki sorry for late responce. As i told in topic, application that refused to compile was electron-quick-start@1.0.0. \nAs far as i remember it was somehow affected by execution attempts through wine.\n. ",
    "kasik96": "So that means im not able to make Electron App version to App Store?\n. ",
    "Glench": "Well, from my perspective as a new user coming to this project for the first time, these 3 lines are literally the only lines that matter for me (besides how to install electron-packager in the first place), so I'd tend toward putting them everywhere...in the readme, in the tutorial, wherever. I would love to be able to just copy and paste them and package my project for whatever platform immediately.\n(I notice that I have a tendency in external libraries I use to skip all documentation and immediately look for an example of how to do the thing I'm trying to do. I've observed that lots of other people seem to have this tendency, too, and I'm wondering if you do.)\n. That could be done! I was just trying to show (concretely!) the most common use case so that people can basically copy and paste. I assumed the most common use case is \"I want to compile this for Windows or Mac or Linux. How do I do that? Oh, here is an example.\" And two lines are pretty cheap in terms of document-length!\nThis particular kind of ease of use comes out my own experience using this library in particular and wanting examples, and from my experience using other libraries as well. For more on this (not from me) you might check out 09-19-15 | Library Writing Realizations.\n. Ooh, I didn't know there even was an --all option! That might be good! I like having a platform-specific one for my own use, but that might be good! Are you really worried about space? It's really not that much...\n. I think your conclusion is a little off. I didn't know there was an --all option because I didn't read the readme and rarely do. I only read until I find something that is immediately useful to what I'm trying to do. My task is to make a package, and the less I have to know about this library the better!\n. > I don't mean to sound snarky, but it seems a little funny to be suggesting a change to the readme if you're not going to actually read the readme...\nOn the contrary, it seems very natural. The documentation was missing something I needed, so I added it. It's only two lines, and I would argue they're the most useful lines in the entire document.\nedit: changed the last word from \"argument\" to \"document\". writing while distracted is always a bad idea :)\n. ",
    "luisfpinto": "I forgor to set \"main\": \"main.js\" on the package json. \nFixed :smile: \n. ",
    "schneidmaster": "@stormageddon Just solved exactly this issue -- all you need to do is remove the \"./\" in the node-notifier path, i.e.\n--asar-unpack=\"node_modules/node-notifier/vendor/**\"\nnot\n--asar-unpack=\"./node_modules/node-notifier/vendor/**\"\n. ",
    "Mxdi": "Not working. Ive tried like every possible way to unpack, \n\"electron-packager . BTCPlus --asar=true --asar-unpack=\\\"/node_modules/node-notifier/vendor/**\\\"\". Yeah Im looking at their npm page, It says --unpack-dir but thats not working either, Ill give this a try.. Nope.\nelectron-packager . BTCPlus --asar.unpack=\"/node_modules/node-notifier/vendor/\"**\nDid not work.. I believe i tried every alternative, Will give that another go. I have opened the issue with asar, I appreciate the kind replies and you remaining tolerant.. And the npm page for asar.. But yes just to confirm for you, The method provided, still does not work.. Thank you so much man.. However the icon is still not appearing for node-notifier :(. Yeah IM going back to their issue, Thanks again.. ",
    "anseki": "Yes, productName is set to CFBundleName and CFBundleDisplayName, but productName is used to name of files and directories, name is ignored.\nThen Electron Quick Start.app, Electron Quick Start.exe, etc., are created.\nThese include spaces.\nProduct name might include more special characters, for example \".Net foo bar\" (a dot at first), and \u00ae is commonly used. http://unicode.org/cldr/utility/character.jsp?a=00AE\nI hope that name option or name key of package.json (e.g. electron-quick-start) is used to name of executable file and other folders, and productName (e.g. Electron Quick Start) is used to property of executable file and fields of plist such as CFBundleDisplayName.\nI can do that by name option and version-string.ProductName option for Windows (don't set productName), but I don't know a way to set to fields of plist.\n. I think that name (i.e. short lowercased name) should be used as name of files and folders, and productName (i.e. application's full capitalized name) should be set to file property or field of plist.\nFor example, the original electron executable file is named electron.exe and its Product Name property is Electron. (for Windows. but folders for OS X are named Electron.app.)\nAnyway, I can already control the name of generated files and folders by name option.\nAnd I can specify a product name by version-string.ProductName option for Windows.\nBut, specific plist fields with extend-info option for OS X are overridden by name.\nSo, I wrote a build task script that changes those fields to proper product name.\n. Ok, I understand that.\nFor the time being, I use task script.\nI think that a note should be added to document, that say: productName or name of package.json or name option should be safety string that is used to name of files and folders.\nThank you for your time :smile: \n. And also, a name that includes spaces of an executable file may make problem.\nThe important point is that we don't make productName include space and special characters when we use electron-packager. In many cases, name is safety (because that is used to repository name, directory name, etc.), but productName may include spaces.\nI think that this should be added to document.\n. Spaces in a path that is not quoted are recognized as separator according to context that starts the application.\nFor example, adding a path to an application launcher, specifying a path of favorite editor such as Atom to git, setting-up a task scheduler, and specifying a path in command line like shell (but in this case, user will find spaces), etc. Users will not perceive that in GUI operation.\npath/to/Electron Quick Start.exe is split to path/to/Electron and Quick Start.exe as two options.\n. Sorry, my English is very poor.\nDid you ask me about cases that users don't quote a path?\nFor example, some file selectors with GUI dialog box don't make user think a path, such as adding a path to an application launcher,  task scheduler, etc.\nAnyway, characters that have meaning for file system (e.g. :, \\, /, *, ?, \", space, etc.) should not be included in productName.\nI think that installer files are usually started in Windows explorer by user operation, therefore it may be not problem.\n@erkyrath, as I said, path in command line is ok, because user will find spaces.\nSome application launchers require paths of applications. Before, that threw an error about space included folder name.\nAnyway, for the time being, I use task script to fix productName. And an issue in my case is solved.\n. So, don't you think adding the information about productName to document?\nelectron-builder's document says clearly: name doesn't allow spaces and special characters, and productName allows those.\nhttps://github.com/electron-userland/electron-builder/blob/master/docs/options.md#application-packagejson\ngrunt-build-atom-shell's document also says clearly that the productName is used to name of generated files.\nhttps://github.com/paulcbetts/grunt-build-atom-shell#options\n(not package.json)\nI think that the note should be added to document, that says: productName and name of package.json or name and appname option should be safety string that doesn't include spaces, /, \\, :, . at first, etc.\nThe rule about name of package.json is defined, but since electron-packager handles productName like name, that should be shown in document.\n. Hi @develar, thank you for your advice.\nI could not understand your advice completely, but those may help me.\nAnyway, as I said, an issue in my case was already solved by task script or electron-builder.\nAnd I suggested adding the information. (https://github.com/electron-userland/electron-packager/issues/297#issuecomment-204307916) Because those unsafe characters (e.g. /, \\, :, .) often be used for product name.\np.s. I gave WINWORD.EXE as an example of the product name that differs from the executable file name. Not an example of problems. and of course I don't start MS Office from terminal.\nI say again, an issue in my case was already solved. I just thought that the information about productName may help someone. Someone might use /, \\, :, etc., for product name.\n. ",
    "goodhyun": "Another reason to strip spaces from your file name:\nMakeAppx : error: Error info: error C00CE169: App manifest validation error: The app manifest must be valid as per schema: Line 6, Column 13,\nReason: 'File Name' violates pattern constraint of '[-.A-Za-z0-9]+'.\nMakeAppx that is needed to get your app on Windows store doesn't like a filename with spaces.\nMicrosoft (R) MakeAppx Tool\nCopyright (C) 2013 Microsoft.  All rights reserved.. ",
    "carapas": "Did not see there was a pending PR.\n. ",
    "industral": "Please update npm package as well. Thanks!\n. Ok got it. Looks like it doesn't work when dependency has empty version\n. OK. But bug exists when user didn't specify version in package.json, e.g.\n\"electron-prebuilt\": \"\",\nthen empty string returns false and code stop working. Checking key in object will fix it. See last commit.\n. ",
    "phaibin": "This is a critical bug. Please release a new npm package ASAP. Thanks!\n. ",
    "feross": "LGTM\n. I would like to npm deprecate the broken versions, but I'm not an npm owner anymore. I used to be, but looks like someone removed me.\nCan a current npm owner please run the following command:\nnpm deprecate electron-packager@\"5.2.1-6.0.2\" \"Critical security bug fixed in v7.0.0 - read more at https://github.com/electron-userland/electron-packager/issues/333\"\n@maxogden @stefanbuck @jden @sindresorhus @kfranqueiro @jlord @malept \n. @malept Thank you.\n. @malept Good call.\n. Looks like the syntax was slightly off. Should be \">= 5.2.1 | <= 6.0.2\".\nI ran the command, so now everyone should be getting the warning.\n. I recommend leaving this issue open for at least a few weeks, so more users will have a chance to read this and upgrade.\n. I've never personally had the need to use 'use strict' in my code. It doesn't provide much of any safety. If it's required for const, then it can be added to\u00a0the top of all files while still using standard. standard just won't enforce it.\nI personally don't think it's worth the overhead of maintaining a custom .eslintrc file just to enforce 'use strict'. That's after all the reason standard was selected in the first place :) But I'll defer to what others want here, of course.\n. @malept Why do you need to install standard globally? You can just run npm test, right?\n. Ahh, you can also just add eslint-config-standard as a dependency to package.json, and add an .eslintrc:\njs\n{\n  \"extends\": \"standard\"\n}\n. Caught this issue with a new rule I'm considering for standard: http://eslint.org/docs/rules/no-useless-escape\n. Fixed tests.. This should probably use the alias feature of minimist, so the two values are always in sync. Otherwise, the other default might overwrite the user setting.\n. Yeah, wow. Good catch. This means that users using electron-packager v6 from the command line will accept invalid ssl certificates.\nThis is bad enough that I would recommend running npm deprecate on all older versions so users know to upgrade.\n. Unclear.\n. @develar standard always lints files as modules so that the linter will work when users use module-only syntax like exports.\n. ",
    "NanaPhil": "I have an existing app built from this starter.\nhttps://github.com/val-samonte/electron-angular-typescript\ni added installed eletron-packager globally and run electron-packager .\n--all.\nit builds the various outputs into the folders. but when i run the output\n.app file in osx . i get that error.\n\u1427\nOn Tue, Apr 5, 2016 at 2:27 PM, Mark Lee notifications@github.com wrote:\n\nThanks for filing an issue! In order to help you with your problem, we're\ngoing to need more information about it. In particular:\n-\nWhich version of electron-packager are you using?\n   -\nWhat CLI arguments are you passing? Alternatively, if you are using\n   the API, what parameters are you passing to the packager() function?\n   -\nWhat version of Electron http://electron.atom.io are you building\n   with? (The value of the version parameter, or the specific version of\n   electron-prebuilt in package.json)\n   -\nWhat is the host platform are you running electron-packager on? Please\n   supply name, version, and architecture.\n   -\nWhat target platform(s)/architecture(s) are you building for?\n   -\nIs there a stack trace in the error message you're seeing? If so,\n   please paste it (preferably in a preformatted block).\n   -\nPlease provide either a failing testcase or detailed steps to\n   reproduce your problem.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/electron-userland/electron-packager/issues/303#issuecomment-205833070\n. V0.34.2\n\u1427\n\nOn Tue, Apr 5, 2016 at 2:40 PM, Mark Lee notifications@github.com wrote:\n\nSince that starter is several months old, it may not be compatible with a\nrecent version of electron-packager. As I asked above, which version of\nElectron are you building with?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/electron-userland/electron-packager/issues/303#issuecomment-205837216\n. \n",
    "tleunen": "No issue with 0.37.3\n. The directory only has another directory called resources with app.asar inside.\n. Thanks @z-ax, I cleaned up the cache and re-downloaded the electron for every platforms and now I'm able to build my app packages for all platforms.\nNot sure what happened ine the first time during the download.\n. The zip file was there, but maybe corrupted.\n. ",
    "gliheng": "I have a similar issue on Linux, albeit with a different version of electron.\n\n~/Desktop/gf-trader-app$ electron-packager dist gf-trader --platform=linux --arch=x64 --out=release --icon=./builder/res/app.ico --version=0.35.1 --overwrite\nPackaging app for platform linux x64 using electron v0.35.1\nENOENT: no such file or directory, rename '/tmp/electron-packager/linux-x64/gf-trader-linux-x64/electron' -> '/tmp/electron-packager/linux-x64/gf-trader-linux-x64/gf-trader'\n\nand I found out that's because prebuilt package download has failed, and the template directory  /tmp/electron-packager/linux-x64-template/  is empty, thus It can not initialize an app from template. Can you remove electron-packager download cache and try again?\n. ",
    "maucrvlh": "I had this problem too. In my case, proxy caused this fail.\n. ",
    "mafrost": "@develar : I work with a very large company that has special scoping even for its internal projects\n. We have a internal registry through Artefactory but I fail to see how it's relevant. If it's an allowed package name it should work, right?\n. ",
    "philostler": "I just hit is identical issue. Any update on the state of this issue?\n. ",
    "TheVento": "thanks... you are a genious!\n. ",
    "liuhong1happy": "Me too! When I use command line ('electron-packager ./app E360Player --icon=./build/logo.ico --platform=win32 --arch=x64 --version=0.36.9') on Mac,it spawn wine ENOENT.\n``\nnpm ERR! Darwin 15.3.0\nnpm ERR! argv \"/usr/local/Cellar/node/5.3.0/bin/node\" \"/usr/local/bin/npm\" \"run\" \"pack-win32\"\nnpm ERR! node v5.3.0\nnpm ERR! npm  v3.3.12\nnpm ERR! code ELIFECYCLE\nnpm ERR! @ pack-win32:electron-packager ./app E360Player --icon=./build/logo.ico --platform=win32 --arch=ia32 --version=0.36.9`\nnpm ERR! Exit status 1\nnpm ERR! \nnpm ERR! Failed at the @ pack-win32 script 'electron-packager ./app E360Player --icon=./build/logo.ico --platform=win32 --arch=ia32 --version=0.36.9'.\nnpm ERR! Make sure you have the latest version of node.js and npm installed.\nnpm ERR! If you do, this is most likely a problem with the  package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     electron-packager ./app E360Player --icon=./build/logo.ico --platform=win32 --arch=ia32 --version=0.36.9\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls \nnpm ERR! There is likely additional logging output above.\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /Users/liuhong/workdir/electron-360player/npm-debug.log\n```\n. ",
    "tkambler": "Installed electron-packager using GitHub syntax + electron-prebuilt@0.37.3:\n$ npm i electron-userland/electron-packager electron-prebuilt@0.37.3 --save\nStill doesn't work.\n. ",
    "mitchhentges": "So, fortunately (though not for my sanity, hah), I've already looked into this issue quite a bit.\nThe command that eventually fails is rcedit.exe. It is called directly with wine on Linux, and it is the source of the error:\n```\nroot@james-build-test:~# wine rcedit.exe /root/james/electron-packager-bak/win32-ia32/James-win32-ia32/James.exe\nApplication tried to create a window, but no driver could be loaded.\nMake sure that your X server is running and that $DISPLAY is set correctly.\nroot@james-build-test:~#\n```\nThe difference in usage of rcedit between v6.0.0 and v6.0.1 is a different version: v0.3.0 and v0.4.0. There is also a v0.5.0 out, which I tested as well.\nI'm pretty sure that the bug suddenly appearing in electron-packer@6.0.1 is a race condition, and here's why: I'm able to reproduce the Application tried to create a window error for all three versions v0.3.0, v0.4.0 and v0.5.0. Additionally, the error is only thrown if there's a long enough delay between invocations of rcedit.exe.\nHere's a gif:\n\n. But even v0.5.0 dumps the error to the console:\nroot@james-build-test:~/node-rcedit# git checkout tags/v0.5.0\nHEAD is now at de6b0a2... 0.5.0\nroot@james-build-test:~/node-rcedit# wine ./bin/rcedit.exe\nApplication tried to create a window, but no driver could be loaded.\nMake sure that your X server is running and that $DISPLAY is set correctly.\nFatal error: You should specify a exe/dll file\n. See this travis log: https://travis-ci.org/james-proxy/james/builds/121987938#L950\nLooks like the missing library is part or most of it. Maybe the $DISPLAY error will be hidden if the other, more serious error isn't shown\n. Looks awesome, everything builds nicely with v6.0.2.\nI'm guessing that wine would try to pop up a dialog if it wasn't run within the last ~5s or so, and that that $DISPLAY error isn't related to anything rcedit.exe specific.\nNow that the dependency is bundled, everything is running without a hitch. Thanks!\n. ",
    "jprichardson": "\nI'm not so sure the ncp issue you mention is fixed in fs-extra. If it is, it wasn't obvious from the commit log. My reading of his comment was more along the lines of \"here's a maintained version of ncp\".\n\nTo my knowledge, I've fixed most of the outstanding issues in my forked copy of ncp. If there's anything you're unsure of, let me know and I can take a second look.\n. https://github.com/AvianFlu/ncp/issues/98 leaves out a lot of details, so it's unclear of the problem. The commenter just states that the callback is never being called with no code to reproduce. Who knows why. I put a ton of work into fixing the issues in ncp (as seen in https://github.com/jprichardson/node-fs-extra/issues/98) and others.\nAlso, I can state that I use electron-packager for my startup (http://www.exodus.io - depends upon Electron), so I'm heavily invested in the Electron ecosystem (if it matters).\n. Oh, I wanted to add one additional point. If it matters, fs-extra will be dropping support for Node v0.10 within the next few months. I wouldn't think this would be a big deal, but if you're looking to continue with Node v0.10 support (I couldn't imagine why), you'll be stuck in time with the last version of fs-extra to support Node v0.10. I don't see how this situation is any worse than the unmaintained ncp though. I just wanted to make sure you had all info up front before you make your decision.\n. > which IMO is a lot more dependable performance wise than fs-extra/ncp.\nWould love to know why so that I can improve fs-extra.\nOverall though, tar-fs, cpy, fs-extra... puh-tay-toe/puh-tah-toe. I don't care much as long as we get a better electron-packager and I'm happy to assist.\n. fs-extra author here and electron-packager user...\n\nwhen attempting to delete it, Finder asks for an admin password, but then fails with a permissions error message. However, the folder appears to be properly owned and accessible to me, and I can delete it just fine via terminal with normal user privileges.\n\nI experience this same thing, although I never attributed it to fs-extra, but it's certainly possible. I just have not taken the time to look into it. Seems weird to me that it can be deleted in the console but not the finder. Also works to delete any top level folder.\nI'm happy to make the necessary fixes.\n. Yes. Duplicate: https://github.com/electron-userland/electron-packager/issues/375\n. Yeah, I don't think this one is related to #375. Windows has some funky delete issues at times - I'm not saying that's what's going on here, but I've ran into similar strange issues in the past related to these sorts of things. \nPossibly related: https://github.com/isaacs/rimraf/issues/105. Also, not the same error, but discusses more Windows related delete issues: https://github.com/isaacs/rimraf/issues/72.\n. > I'm not sure how but the folder had been set to read-only. \nYep, so it was the pesky https://github.com/isaacs/rimraf/issues/105 then.\n. As @malept stated:\n\nI'm basically worried about using fs.rename between different filesystems, volumes, and things like that. There have been several bugs filed in this project similar to that.\n\nis an issue, but one that fs.move will handle just fine.\nSince @develar stated:\n\nSo, we don't ever need to check is it temp or not. It is always in the same temp fs.\n\nThis latest https://github.com/electron-userland/electron-packager/pull/416/commits/9a67489be0c2bcefe3b39bab38ff5bf9e6523827 looks good to me.\n. ",
    "ChrisTerBeke": "Hey, thanks for the quick reply.\nI'm using a Makefile with this line to generate the ignore:\nELECTRON_IGNORE=$(shell node -e \"console.log(require('./package.json').packageIgnore.join('|'))\")\nMy scripts are roughly based on what etcher.io does, for them it seems to work fine? Prune looks interesting, but I don't really want to install all the needed deps again before coding after making a release.\n. ok good to know. I added prune to my command to test it out, but doesn't make a difference (on Mac). On my Mac, the ignore works perfectly fine (ignoring everything in my package.json -> packageIgnore array).\n\"packageIgnore\": [\n    \"Makefile\",\n    \"bower.json\",\n    \"Gruntfile.js\",\n    \"npm-debug.log\",\n    \"logs\",\n    \"bower_components\",\n    \"node_modules/bower\",\n    \"node_modules/electron-*\",\n    \"node_modules/tmp\",\n    \"node_modules/grunt\",\n    \"node_modules/grunt-*\",\n    \"node_modules/load-grunt-tasks\",\n    \"node_modules/node-sass-import-once\",\n    \"node_modules/eslint\",\n    \"node_modules/eslint-*\"\n  ],\nwhich is then parsed by the line I posted here before. It just doesn't work on windows, although electron-packager should handle this platform independent right? I even saw a merged PR that fixes the slashes on Windows for ignore.\n. btw, the --prune works brilliantly to ignore the dev deps :) also with the new npm3 tree structure, so thanks for that suggestion!\n. It's indeed ignore some files/dirs by default. I was also referring to that issue yes. Playing around a bit more on windows now to see where the difference is when using --ignore.\n. --prune also doesn't seem to do it's job on windows. Have all the deps still in the final package.\n. Just ran npm prune --production manually and that also doesn't work on my Windows install. Something weird is going on here...\n. ",
    "gabriel": "Yeah it's a good fix to have, and I don't think it's worth reverting either. It's kind of a gnarly thing to diagnose so wanted to people to be aware of the potential issue.\n. So, we also figured out adding a symlink in Contents/MacOS is a possible workaround too.. We didn't want to break all our users on upgrade so we have for example:\n/Applications/AppName.app/Contents/MacOS/Electron symlinked to /Applications/AppName.app/Contents/MacOS/AppName and it seems to be ok...\nI don't know if it's worth patching the packager here to do the same, but it might prevent some headaches for people in the future.\n. Yeah this would be a mac only thing\n. ",
    "savanain": "sudo launchctl stop com.apple.security.syspolicy && sudo launchctl start com.apple.security.syspolicy did help for me after the name change.\n. ",
    "NikosEfthias": "wrong alarm :)\n. ",
    "rhedin": "Ricks-MacBook-Pro:electron-quick-start $ find . -name 'node.dll'\n./abe-win32-ia32/node.dll\n./abe-win32-x64/node.dll\nRicks-MacBook-Pro:electron-quick-start $ \nDuh!  I need to copy the whole directory.  Is that what you're saying?  I just copied the abe.exe file.  I thought it was self-contained. \n. Thank you very much for the info, Mark.  I will either have my user download the whole directory, or use electron-builder and make an installation program.\n. ",
    "montogeek": "@malept You can use npm init -y :)\n. I just tested it, not warning message\n``` bash\nmontogeek ~/test [09:02 PM]\u2192 \ud83d\ude1b\n\ud83d\udc49  npm install -D electron-packager@6.0.2\ntest@1.0.0 /Users/montogeek/test\n\u2514\u2500\u252c electron-packager@6.0.2\n  \u251c\u2500\u252c asar@0.11.0\n  \u2502 \u251c\u2500\u2500 chromium-pickle-js@0.1.0\n  \u2502 \u251c\u2500\u252c commander@2.9.0\n  \u2502 \u2502 \u2514\u2500\u2500 graceful-readlink@1.0.1\n  \u2502 \u251c\u2500\u2500 cuint@0.2.1\n  \u2502 \u251c\u2500\u252c glob@6.0.4\n  \u2502 \u2502 \u251c\u2500\u252c inflight@1.0.4\n  \u2502 \u2502 \u2502 \u2514\u2500\u2500 wrappy@1.0.1\n  \u2502 \u2502 \u251c\u2500\u2500 inherits@2.0.1\n  \u2502 \u2502 \u2514\u2500\u2500 once@1.3.3\n  \u2502 \u251c\u2500\u252c minimatch@3.0.0\n  \u2502 \u2502 \u2514\u2500\u252c brace-expansion@1.1.3\n  \u2502 \u2502   \u251c\u2500\u2500 balanced-match@0.3.0\n  \u2502 \u2502   \u2514\u2500\u2500 concat-map@0.0.1\n  \u2502 \u2514\u2500\u252c mksnapshot@0.3.0\n  \u2502   \u251c\u2500\u252c decompress-zip@0.3.0\n  \u2502   \u2502 \u251c\u2500\u252c binary@0.3.0\n  \u2502   \u2502 \u2502 \u251c\u2500\u2500 buffers@0.1.1\n  \u2502   \u2502 \u2502 \u2514\u2500\u252c chainsaw@0.1.0\n  \u2502   \u2502 \u2502   \u2514\u2500\u2500 traverse@0.3.9\n  \u2502   \u2502 \u251c\u2500\u2500 mkpath@0.1.0\n  \u2502   \u2502 \u251c\u2500\u252c nopt@3.0.6\n  \u2502   \u2502 \u2502 \u2514\u2500\u2500 abbrev@1.0.7\n  \u2502   \u2502 \u251c\u2500\u2500 q@1.4.1\n  \u2502   \u2502 \u251c\u2500\u252c readable-stream@1.1.14\n  \u2502   \u2502 \u2502 \u2514\u2500\u2500 isarray@0.0.1\n  \u2502   \u2502 \u2514\u2500\u252c touch@0.0.3\n  \u2502   \u2502   \u2514\u2500\u2500 nopt@1.0.10\n  \u2502   \u2514\u2500\u252c request@2.55.0\n  \u2502     \u251c\u2500\u2500 aws-sign2@0.5.0\n  \u2502     \u251c\u2500\u252c bl@0.9.5\n  \u2502     \u2502 \u2514\u2500\u2500 readable-stream@1.0.34\n  \u2502     \u251c\u2500\u2500 caseless@0.9.0\n  \u2502     \u251c\u2500\u252c combined-stream@0.0.7\n  \u2502     \u2502 \u2514\u2500\u2500 delayed-stream@0.0.5\n  \u2502     \u251c\u2500\u2500 forever-agent@0.6.1\n  \u2502     \u251c\u2500\u252c form-data@0.2.0\n  \u2502     \u2502 \u2514\u2500\u2500 async@0.9.2\n  \u2502     \u251c\u2500\u252c har-validator@1.8.0\n  \u2502     \u2502 \u251c\u2500\u2500 bluebird@2.10.2\n  \u2502     \u2502 \u251c\u2500\u252c chalk@1.1.3\n  \u2502     \u2502 \u2502 \u251c\u2500\u2500 ansi-styles@2.2.1\n  \u2502     \u2502 \u2502 \u251c\u2500\u2500 escape-string-regexp@1.0.5\n  \u2502     \u2502 \u2502 \u251c\u2500\u252c has-ansi@2.0.0\n  \u2502     \u2502 \u2502 \u2502 \u2514\u2500\u2500 ansi-regex@2.0.0\n  \u2502     \u2502 \u2502 \u251c\u2500\u2500 strip-ansi@3.0.1\n  \u2502     \u2502 \u2502 \u2514\u2500\u2500 supports-color@2.0.0\n  \u2502     \u2502 \u2514\u2500\u252c is-my-json-valid@2.13.1\n  \u2502     \u2502   \u251c\u2500\u2500 generate-function@2.0.0\n  \u2502     \u2502   \u251c\u2500\u252c generate-object-property@1.2.0\n  \u2502     \u2502   \u2502 \u2514\u2500\u2500 is-property@1.0.2\n  \u2502     \u2502   \u251c\u2500\u2500 jsonpointer@2.0.0\n  \u2502     \u2502   \u2514\u2500\u2500 xtend@4.0.1\n  \u2502     \u251c\u2500\u252c hawk@2.3.1\n  \u2502     \u2502 \u251c\u2500\u2500 boom@2.10.1\n  \u2502     \u2502 \u251c\u2500\u2500 cryptiles@2.0.5\n  \u2502     \u2502 \u251c\u2500\u2500 hoek@2.16.3\n  \u2502     \u2502 \u2514\u2500\u2500 sntp@1.0.9\n  \u2502     \u251c\u2500\u252c http-signature@0.10.1\n  \u2502     \u2502 \u251c\u2500\u2500 asn1@0.1.11\n  \u2502     \u2502 \u251c\u2500\u2500 assert-plus@0.1.5\n  \u2502     \u2502 \u2514\u2500\u2500 ctype@0.5.3\n  \u2502     \u251c\u2500\u2500 isstream@0.1.2\n  \u2502     \u251c\u2500\u2500 json-stringify-safe@5.0.1\n  \u2502     \u251c\u2500\u252c mime-types@2.0.14\n  \u2502     \u2502 \u2514\u2500\u2500 mime-db@1.12.0\n  \u2502     \u251c\u2500\u2500 node-uuid@1.4.7\n  \u2502     \u251c\u2500\u2500 oauth-sign@0.6.0\n  \u2502     \u251c\u2500\u2500 qs@2.4.2\n  \u2502     \u251c\u2500\u2500 stringstream@0.0.5\n  \u2502     \u251c\u2500\u2500 tough-cookie@2.2.2\n  \u2502     \u2514\u2500\u2500 tunnel-agent@0.4.2\n  \u251c\u2500\u252c electron-download@2.1.1\n  \u2502 \u251c\u2500\u252c debug@2.2.0\n  \u2502 \u2502 \u2514\u2500\u2500 ms@0.7.1\n  \u2502 \u251c\u2500\u2500 home-path@1.0.3\n  \u2502 \u251c\u2500\u252c nugget@1.6.2\n  \u2502 \u2502 \u251c\u2500\u252c pretty-bytes@1.0.4\n  \u2502 \u2502 \u2502 \u251c\u2500\u2500 get-stdin@4.0.1\n  \u2502 \u2502 \u2502 \u2514\u2500\u252c meow@3.7.0\n  \u2502 \u2502 \u2502   \u251c\u2500\u252c camelcase-keys@2.1.0\n  \u2502 \u2502 \u2502   \u2502 \u2514\u2500\u2500 camelcase@2.1.1\n  \u2502 \u2502 \u2502   \u251c\u2500\u2500 decamelize@1.2.0\n  \u2502 \u2502 \u2502   \u251c\u2500\u252c loud-rejection@1.3.0\n  \u2502 \u2502 \u2502   \u2502 \u251c\u2500\u2500 array-find-index@1.0.1\n  \u2502 \u2502 \u2502   \u2502 \u2514\u2500\u2500 signal-exit@2.1.2\n  \u2502 \u2502 \u2502   \u251c\u2500\u2500 map-obj@1.0.1\n  \u2502 \u2502 \u2502   \u251c\u2500\u252c normalize-package-data@2.3.5\n  \u2502 \u2502 \u2502   \u2502 \u251c\u2500\u2500 hosted-git-info@2.1.4\n  \u2502 \u2502 \u2502   \u2502 \u251c\u2500\u252c is-builtin-module@1.0.0\n  \u2502 \u2502 \u2502   \u2502 \u2502 \u2514\u2500\u2500 builtin-modules@1.1.1\n  \u2502 \u2502 \u2502   \u2502 \u251c\u2500\u2500 semver@5.1.0\n  \u2502 \u2502 \u2502   \u2502 \u2514\u2500\u252c validate-npm-package-license@3.0.1\n  \u2502 \u2502 \u2502   \u2502   \u251c\u2500\u252c spdx-correct@1.0.2\n  \u2502 \u2502 \u2502   \u2502   \u2502 \u2514\u2500\u2500 spdx-license-ids@1.2.1\n  \u2502 \u2502 \u2502   \u2502   \u2514\u2500\u252c spdx-expression-parse@1.0.2\n  \u2502 \u2502 \u2502   \u2502     \u2514\u2500\u2500 spdx-exceptions@1.0.4\n  \u2502 \u2502 \u2502   \u251c\u2500\u252c read-pkg-up@1.0.1\n  \u2502 \u2502 \u2502   \u2502 \u251c\u2500\u252c find-up@1.1.2\n  \u2502 \u2502 \u2502   \u2502 \u2502 \u251c\u2500\u2500 path-exists@2.1.0\n  \u2502 \u2502 \u2502   \u2502 \u2502 \u2514\u2500\u252c pinkie-promise@2.0.1\n  \u2502 \u2502 \u2502   \u2502 \u2502   \u2514\u2500\u2500 pinkie@2.0.4\n  \u2502 \u2502 \u2502   \u2502 \u2514\u2500\u252c read-pkg@1.1.0\n  \u2502 \u2502 \u2502   \u2502   \u251c\u2500\u252c load-json-file@1.1.0\n  \u2502 \u2502 \u2502   \u2502   \u2502 \u251c\u2500\u252c parse-json@2.2.0\n  \u2502 \u2502 \u2502   \u2502   \u2502 \u2502 \u2514\u2500\u252c error-ex@1.3.0\n  \u2502 \u2502 \u2502   \u2502   \u2502 \u2502   \u2514\u2500\u2500 is-arrayish@0.2.1\n  \u2502 \u2502 \u2502   \u2502   \u2502 \u251c\u2500\u2500 pify@2.3.0\n  \u2502 \u2502 \u2502   \u2502   \u2502 \u2514\u2500\u252c strip-bom@2.0.0\n  \u2502 \u2502 \u2502   \u2502   \u2502   \u2514\u2500\u2500 is-utf8@0.2.1\n  \u2502 \u2502 \u2502   \u2502   \u2514\u2500\u2500 path-type@1.1.0\n  \u2502 \u2502 \u2502   \u251c\u2500\u252c redent@1.0.0\n  \u2502 \u2502 \u2502   \u2502 \u251c\u2500\u252c indent-string@2.1.0\n  \u2502 \u2502 \u2502   \u2502 \u2502 \u2514\u2500\u252c repeating@2.0.1\n  \u2502 \u2502 \u2502   \u2502 \u2502   \u2514\u2500\u252c is-finite@1.0.1\n  \u2502 \u2502 \u2502   \u2502 \u2502     \u2514\u2500\u2500 number-is-nan@1.0.0\n  \u2502 \u2502 \u2502   \u2502 \u2514\u2500\u2500 strip-indent@1.0.1\n  \u2502 \u2502 \u2502   \u2514\u2500\u2500 trim-newlines@1.0.0\n  \u2502 \u2502 \u251c\u2500\u252c progress-stream@1.2.0\n  \u2502 \u2502 \u2502 \u251c\u2500\u2500 speedometer@0.1.4\n  \u2502 \u2502 \u2502 \u2514\u2500\u252c through2@0.2.3\n  \u2502 \u2502 \u2502   \u2514\u2500\u252c xtend@2.1.2\n  \u2502 \u2502 \u2502     \u2514\u2500\u2500 object-keys@0.4.0\n  \u2502 \u2502 \u251c\u2500\u2500 single-line-log@0.4.1\n  \u2502 \u2502 \u2514\u2500\u2500 throttleit@0.0.2\n  \u2502 \u251c\u2500\u2500 path-exists@1.0.0\n  \u2502 \u2514\u2500\u252c rc@1.1.6\n  \u2502   \u251c\u2500\u2500 deep-extend@0.4.1\n  \u2502   \u251c\u2500\u2500 ini@1.3.4\n  \u2502   \u2514\u2500\u2500 strip-json-comments@1.0.4\n  \u251c\u2500\u2500 electron-osx-sign@0.3.0\n  \u251c\u2500\u252c extract-zip@1.5.0\n  \u2502 \u251c\u2500\u252c concat-stream@1.5.0\n  \u2502 \u2502 \u251c\u2500\u252c readable-stream@2.0.6\n  \u2502 \u2502 \u2502 \u251c\u2500\u2500 core-util-is@1.0.2\n  \u2502 \u2502 \u2502 \u251c\u2500\u2500 isarray@1.0.0\n  \u2502 \u2502 \u2502 \u251c\u2500\u2500 process-nextick-args@1.0.6\n  \u2502 \u2502 \u2502 \u2514\u2500\u2500 string_decoder@0.10.31\n  \u2502 \u2502 \u2514\u2500\u2500 typedarray@0.0.6\n  \u2502 \u251c\u2500\u2500 debug@0.7.4\n  \u2502 \u251c\u2500\u252c mkdirp@0.5.0\n  \u2502 \u2502 \u2514\u2500\u2500 minimist@0.0.8\n  \u2502 \u2514\u2500\u252c yauzl@2.4.1\n  \u2502   \u2514\u2500\u252c fd-slicer@1.0.1\n  \u2502     \u2514\u2500\u2500 pend@1.2.0\n  \u251c\u2500\u252c fs-extra@0.26.7\n  \u2502 \u251c\u2500\u2500 graceful-fs@4.1.3\n  \u2502 \u251c\u2500\u2500 jsonfile@2.3.0\n  \u2502 \u251c\u2500\u2500 klaw@1.2.0\n  \u2502 \u2514\u2500\u2500 path-is-absolute@1.0.0\n  \u251c\u2500\u252c get-package-info@0.0.2\n  \u2502 \u251c\u2500\u2500 bluebird@3.3.5\n  \u2502 \u2514\u2500\u252c lodash.get@4.2.1\n  \u2502   \u2514\u2500\u2500 lodash._stringtopath@4.7.1\n  \u251c\u2500\u2500 minimist@1.2.0\n  \u251c\u2500\u252c mkdirp@0.5.1\n  \u2502 \u2514\u2500\u2500 minimist@0.0.8\n  \u251c\u2500\u252c mv@2.1.1\n  \u2502 \u2514\u2500\u2500 rimraf@2.4.5\n  \u251c\u2500\u2500 ncp@2.0.0\n  \u251c\u2500\u2500 object-assign@4.0.1\n  \u251c\u2500\u252c plist@1.2.0\n  \u2502 \u251c\u2500\u2500 base64-js@0.0.8\n  \u2502 \u251c\u2500\u2500 util-deprecate@1.0.2\n  \u2502 \u251c\u2500\u252c xmlbuilder@4.0.0\n  \u2502 \u2502 \u2514\u2500\u2500 lodash@3.10.1\n  \u2502 \u2514\u2500\u2500 xmldom@0.1.22\n  \u251c\u2500\u2500 rcedit@0.5.0\n  \u251c\u2500\u2500 resolve@1.1.7\n  \u251c\u2500\u252c rimraf@2.5.2\n  \u2502 \u2514\u2500\u2500 glob@7.0.3\n  \u2514\u2500\u2500 run-series@1.1.4\nnpm WARN test@1.0.0 No description\nnpm WARN test@1.0.0 No repository field.\n```\n. ",
    "ukiuni": "Thank you very much for the info, Mark. \n. ",
    "petrfelzmann": "Additional info: this bug is not presented on Windows.\n. See the comments and referenced issues. It is by design.. ",
    "feifeipan": "@petrfelzmann have you fix the problem? cause i met the problem too. The menu is missing on mac os. ",
    "FelikZ": "On your script.js:\njs\nvar path = require('path');\nvar process = require('process');\nconsole.log('cwd', process.cwd());\nprocess.chdir(__dirname);\nconsole.log('cwd', process.cwd());\n. ",
    "theflow": "Hi, sorry, looks like I jumped to conclusions on what was causing my issue. It was actually changing the app name that fixed my problem, not the spaces in it. I've raised a new issue describing the problem: https://github.com/electron-userland/electron-packager/issues/350\n. Moving the app bundle to a different folder and starting it from there also works, also after moving it back. This looks like an OS bug to me. Didn't find much when googling.\n. yeah, it is\n. might be worth putting a link to the issue in the release notes?\n. ",
    "iangcarroll": "Ah, I was running zip without --symlinks, so that might be correct. I'll see what the build produces and let you know.\n. After zipping it with --symlinks it works properly for me. I'm not really sure what happened with your result. Should I leave this open for the two duplicates you encountered or can you no longer reproduce it?\n. ",
    "gaccawi": "This resolves the issue. Now, I feel like an idiot. \ntest-electron g9a$ $(npm bin)/electron-packager . --out=dist --prune --asar --overwrite --all\nThe strict-ssl parameter is deprecated, use download.strictSSL instead\nThe strict-ssl parameter is deprecated, use download.strictSSL instead\nThe strict-ssl parameter is deprecated, use download.strictSSL instead\nThe strict-ssl parameter is deprecated, use download.strictSSL instead\nThe strict-ssl parameter is deprecated, use download.strictSSL instead\nThe strict-ssl parameter is deprecated, use download.strictSSL instead\nPackaging app for platform linux ia32 using electron v0.37.7\nPackaging app for platform win32 ia32 using electron v0.37.7\nPackaging app for platform darwin x64 using electron v0.37.7\nDownloading electron-v0.37.7-linux-x64.zip\nDownloading electron-v0.37.7-mas-x64.zip\n[============================================>] 100.0% of 40.24 MB (22.99 MB/s)\nDownloading electron-v0.37.7-win32-x64.zip\n[============================================>] 100.0% of 49.64 MB (28.37 MB/s)\nPackaging app for platform win32 x64 using electron v0.37.7\nWrote new apps to:\ndist/TestElectron-linux-ia32\ndist/TestElectron-win32-ia32\ndist/TestElectron-darwin-x64\ndist/TestElectron-linux-x64\ndist/TestElectron-mas-x64\ndist/TestElectron-win32-x64\n. Different error when I add --app-version=0.0.0 to the end:\nAnd, I did install wine (although I didn't really want to) earlier, just in case it was the problem.\ntest-electron g9a$ $(npm bin)/electron-packager . --out=dist --prune --asar --overwrite --all --app-version=0.0.0\nThe strict-ssl parameter is deprecated, use download.strictSSL instead\nThe strict-ssl parameter is deprecated, use download.strictSSL instead\nThe strict-ssl parameter is deprecated, use download.strictSSL instead\nThe strict-ssl parameter is deprecated, use download.strictSSL instead\nThe strict-ssl parameter is deprecated, use download.strictSSL instead\nThe strict-ssl parameter is deprecated, use download.strictSSL instead\nPackaging app for platform linux ia32 using electron v0.37.7\nPackaging app for platform win32 ia32 using electron v0.37.7\nspawn wine ENOENT\n. ",
    "Write-Guy": "I'm using v0.10.29\n. ",
    "jfacorro": "@malept Thank you for your quick response. I just updated electron-packager to version 7.0.1 but the warning is still there. I'm printing out the value of args in cli.js after arguments are processed by the common.parseCLIArgs function and this is what I get:\n{ _: [ 'client', 'wall-monitor-kiosk' ],\n  prune: false,\n  asar: false,\n  all: false,\n  overwrite: true,\n  download: { strictSSL: true },\n  'strict-ssl': true,\n  platform: 'win32',\n  arch: 'x64',\n  out: 'bin',\n  icon: 'client/icon.icns',\n  ignore: 'node_modules/electron-*',\n  dir: 'client',\n  name: 'wall-monitor-kiosk',\n  protocols: [] }\nAs you can see the strict-ssl option is still there and so is the warning.\n. ",
    "Bratkartoffl": "I can reproduce this.\n. ",
    "seanmangar": "Having the same issue, and the download seems to be very slow as well and even stalls.\n. ",
    "robfuscate": "The asar readme doesn't mention this option, but the changelist where it was added is here https://github.com/electron/asar/pull/52\n. By moving things to asar-options, we've essentially made it so you can pass arbitrary flags to asar. I've renamed the pull request.\n. ",
    "milktea736": "Hi @malept, \nThanks for you reply,  electron-rebuild module seems that is used to re-build the module to fit electron version. (related to NODE_MODULE_VERSION,  I'm not pretty sure.) But my addon works when I command \"electron main.js\", implies that the module version is compatible with electron. I have no idea what happened and got stuck on this for few days.\n. Hi @malept,\nI tested it, it's not a path problem(I just go through the \"can't find module\" stage few days ago). My addon was required correctly and even make a callback to print a string in developer tool window now. I also had a test on the dependency of my addon (if any required dll is missing, the electron will crash).\n. ",
    "bigmonkeyboy": "I think the approach that @malept mentions makes most sense to me... overall fail return code... but only after doing all things possible. (especially if something similar already happens on Windows.\n. ",
    "matix2267": "Maybe instead of failing or warning when wine is not present electron-packager could just skip calling rcedit if none of the win32 metadata (or icon) are specified. This way we keep best of both worlds: incomplete builds still fail (when metadata is specified but cannot be applied because wine is not installed), and it is possible to make win32 build without wine if you don't care about metadata.. Maybe try to run rcedit and if there's no wine print warning and continue build if no user-specified metadata is present, otherwise fail build. This feels a bit hacky though.\nAlternatively it should be quite simple to add a command line switch that would disable this part of processing for Windows build.. What I did as a workaround for my case (as @rahatarmanahmed) was to make a symlink bin/wine -> /bin/true and call packager with PATH=$PWD/bin:$PATH. ",
    "paul321": "create-windows-installer it's the grunt task that wraps electron-packager unfortunately  there are no logs\n. it seems the problem is from https://github.com/sindresorhus/grunt-electron\nreverted from version 4.0.0 to 2.0.1\nOn Sun, May 8, 2016 at 8:54 PM, Mark Lee notifications@github.com wrote:\n\nCould you run the electron-packager command manually and paste the output?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/electron-userland/electron-packager/issues/358#issuecomment-217736207\n. \n",
    "reconbot": "If you take a project like node-serialport, I precompile binaries for all platforms and arch's. I use node-pre-gyp to distribute them in the preinstall hook, and save them in a common location. The other major prebuilt binary package manager prebuild will do the same. Each platform would need the file replaced (not the default behavior) before the package is rebuilt.\nI'd gladly work to make the electron precompiled binaries available if they could be used with electron packager.\n. We've got an issue where the location of the precompiled binary is the same\nfor each platform. We \"upgraded\" from keeping it in a different location\nfor each platform and it caused electron users trouble.\nhttps://github.com/voodootikigod/node-serialport/issues/538#issuecomment-207714692\n\nFrancis Gulotta\nwizard@roborooter.com\nOn Tue, May 17, 2016 at 2:15 AM, Vladimir Krivosheev \nnotifications@github.com wrote:\n\n@reconbot https://github.com/reconbot Yep! It is what user expected,\nnot rebuild, but precompiled binary. Unfortunately, most of the native\nmodules doesn't provide it (e.g. atom/node-keytar#27\nhttps://github.com/atom/node-keytar/issues/27).\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/electron-userland/electron-packager/issues/359#issuecomment-219628747\n. \n",
    "deepak": "\nAlso, it is not good to depends on electron-rebuild (see nslog and babel-runtime).\n\n@develar electron noob here. what is the problem with babel-runtime ?. thanks @malept and @MarshallOfSound :-). ",
    "stegmanh": "@malept \nI built an example, and it seems to work fine. I'm now thinking the issue might be with bundling SQLite3 or some other package?\nThank you for your time \n. ",
    "guidupuy": "Not sure #43 was a good idea in the first place... There are cases where dereferencing symlinks breaks things (in my case, a native MacOSX library), and I do believe this should really be an option (defaulting to true if you think that's the most likely scenario). I'll look into it.\n. ",
    "mashhoodr": "Yes, I have its OSX 10.11.4\nI will try upgrading to 7.0.1\n. thanks @davidferguson and @malept \nturns out my issue was that the APP was named some-name.app which was causing the build to break. Changing it to somename.app works!\n. I can confirm that simply renaming the app also fixes the issue, and it does have the hyphen still. Thanks for the heads up @davidferguson \n. ",
    "davidferguson": "I've just had this issue - and as far as I can see it's down to the naming of the executable inside the .app package.\nTo fix this, you need to right-click on NAME.app, Show Package Contents.\nOpen Contents, MacOS, and rename the file in there to Electron.\nThen open Info.plist and change the value under CFBundleExecutable to Electron\nThe app should now open fine.\nTested under Mac OS X 10.11.3, Electron 1.1.0, Electron-packager 7.0.1\n. That would seem likely - running the command open myapp.app in Terminal gives the error:\nLSOpenURLsWithRole() failed with error -10810 for the file myapp.app\n. My app name doesn't have a hyphen in it's name, and still has this issue. I needed to change the name of the executable in the MacOS folder and then in Info.plist for it to work again.\n. I think that both @mashhoodr and I had the same issue as #323. It says that a fix is having the executable in a different location fixes this issue, so renaming the executable (like I did) and also renaming the .app (like @mashhoodr did) would fix the issue.\nTherefore I don't actually think this issue is any different to #323, and doesn't have anything to do with hyphens in the name.\n. ",
    "iszRoyHunag": "thanks very much malept\n. ",
    "kaepora": "@malept Wise move.\n. @maxogden :smiley: Yes, I'm very satisfied with, and a big fan of, Electron and Cryptocat is doing very well since adopting the framework.\n. ",
    "nasht00": "OK I noticed that my --ignore had package.json. Removing this seems to fix the issue.\nWas this something that changed?\n. Apparently someone else introduced this ignore while I did not notice...\nSorry, false alert.\n. ",
    "mfraiss": "Hi @Osmosis311,\nI had the same errors before. My package.json looks like this:\n{\n  \"productName\"   : \"HelloWorld\",\n  \"name\"    : \"Hello World\",\n  \"version\" : \"0.1.0\",\n  \"main\"    : \"main.js\"\n}\nAnd for me the following command line call worked:\nelectron-packager ./helloworld --platform=win32 --arch=x64\n--version=1.2.0\nIn that case, my application was in the directory \"helloworld\" inside the executing directory.\n. ",
    "mmm117": "@sethlu Sorry, I am confused.. would it work and pass the MAS review if I follow the guide here? https://github.com/electron/electron/blob/master/docs/tutorial/mac-app-store-submission-guide.md\n. @slaskis Why don't we just edit the \"info.plist\" file directly?  It seems to be simpler.. doesn't it?\n. @slaskis It can be done in single command? Including all steps here? https://github.com/electron/electron/blob/master/docs/tutorial/mac-app-store-submission-guide.md\nCould you share that command? I only know how to package the app in single command, but not the other steps..\n. @sethlu Thanks. So do I need to create the following entitlement file \"child.plist\"?\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n  <dict>\n    <key>com.apple.security.app-sandbox</key>\n    <true/>\n    <key>com.apple.security.inherit</key>\n    <true/>\n  </dict>\n</plist>\n. ",
    "slaskis": "We got our app through the review after updating Electron to 1.1.2+ (which has some MAS related patches). \nSo yeah, those instructions will let you get through the review assuming the app itself passes the apple guidelines.\nAnd until this lovely tool adds some way to inject the team-id into the Info.plist during packaging we use this command after packaging with electron-packager but before signing with electron-osx-sign to update the Info.plist as in the instructions:\n{\n  ...\n  \"inject-team-id\": \"plutil -insert ElectronTeamID -string $npm_package_osxPackaging_signIdentity dist/Example-mas-x64/Example.app/Contents/Info.plist\",\n  ...\n}\n. Well for me the process of testing the app sandbox was a bit tedious because it requires the app to be packaged and signed. It was also the first time I ever worked with the mac app sandbox thus it was a bunch of trial and error. So being able to run it in a single command kept me sane. And hopefully it will help someone else.\nOf course you can do it manually, but I guess you could say that about the electron-packager too, it's mostly convenience (and reliability to not miss any manual steps).\n. ",
    "mzmousa": "@develar @malept I'm trying to use the config solution and have added\n\"config\": {\n    \"electron-version\": \"1.2.1\"\n  },\nin my package.json. However, I'm unsure as to where I would use this config option. Do I add something after the npm script (the one that's build -o or -w or -l)? Or do I pass it into build.osx as a variable of sorts?\n. Ah, I should have just looked at the contributing document(s). Works fine for me, thanks!\n. ",
    "RedSparr0w": "you do not need electron-prebuilt as a dependency all you have to do is specify a version in the --version param\nexample:\nelectron-packager \"./\" \"My App\" --platform=win32 --arch=x64 --version=1.2.5\nwill use electron v1.2.5\n. ",
    "kaansoral": "This was super demotivating, thanks a lot for your analysis @giilby --tmpdir=false seems like a good solution\nWhenever something like this happens on OSX, it triggers my paranoia, hope this gets solved and others don't experience the same thing too, just wasted 45 minutes in anxiety until I found this issue\n. ",
    "roryashfordbentley": "I can confirm that this is still happening in MacOS 10.12 Sierra. \nSymptoms seem to be the same as @giilby described.\nFiles can be deleted using rm -r app-darwein-x64. just not through the finder GUI.\nEdit: Not sure if it is helpful but I noticed that if I delete the folder in sublime that I get a prompt that says 'There is no trash bin so this will be permanently deleted' which is different to any other folder I try to delete which has a typical 'do you want to delete?' prompt.\n. ",
    "peterkrieg": "Any updates on this?  Error happening for me on Mac OSX 10.11 (El Capitan).  I can't delete through finder or command line.  I might be stuck with this folder forever \ud83d\ude39. ",
    "alberto2000": "Same problem here, MacOS Sierra 10.12.3. Can only remove the folder using bruteforce\nsudo rm -rf [foldername]. ",
    "dscalzi": "Problem is present on Windows 10 when tmpdir=false. The issue is pretty relevant because I cannot delete the file even as an administrator, or via the command line. Still trying to figure out how I can gain permission to the generated .exe file....\nEdit: I was able to delete the file by using unlocker. It was unable to delete the file so it asked if it should try to delete it when the computer is restarted. It must have done that, as the file was gone after the reboot.. ",
    "jasonfill": "@malept All good suggestions, I will address and re-submit.  It does not look like the builds failed due to my code changes - although I could be wrong. Is it somewhat standard for these builds to fail? I would think not but wanted to ask.\n. @malept We actually ended up using the API with the ignore option and it worked perfect and a bit cleaner than this anyway. So at this point I am going to close this pull request.\n. ",
    "craigcosmo": "Why don't we have both option? We can either config in the package.json and .packagerignore file, it will be more flexible for sure.\n. Yes main.js is used for development.\nyou got an example that can share with me? . still looking forward to your example . ",
    "coelho-extremosistemas": "Yes, Mr. Malept, thanks\n. Hi @develar , I change .png to .ico, but not effect\n. I found a problem in my package.json:\nI use this:\n{\n  \"name\": \"extremo\",\n  \"version\": \"6.5.47\",\n  \"description\": \"Custom browser for Extremo Sistemas\",\n  \"main\": \"main.js\",\n  \"scripts\": {\n    \"postinstall\": \"npm rebuild --fallback-to-build --runtime=electron --target=1.1.1 --arch=x64 --dist-url=https://atom.io/download/atom-shell --build-from-source\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"package\": \"electron-packager . --ignore=\\\"(examples|LICENSE|.mk|MakeFile|.svn|.md|.gypi|.vcxproj|.tlog|build/Release/obj|.gyp|test|src|.yml|usb/libusb|ChangeLog)\\\" --icon=appccs.ico --platform=win32 --arch=x64 --version=1.1.2 --overwrite --prune\",\n    \"package_linux\": \"electron-packager . --ignore=\\\"(examples|LICENSE|.mk|Makefile|.svn|.md|.gypi|.vcxproj|.tlog|build/Release/obj|test|src|.yml|usb/libusb|ChangeLog)\\\" --icon=appccs.png --platform=linux --arch=x64 --version=1.1.2 --overwrite\"\n  },\n  \"dependencies\": {\n    \"printer\": \"^0.2.1\",\n    \"serialport\": \"^3.1.2\",\n    \"usb\": \"^1.1.2\",\n    \"usbinfo\": \"0.0.5\"\n  },\n  \"devDependencies\": {\n    \"electron-packager\": \"^7.0.2\",\n    \"electron-prebuilt\": \"^1.1.2\",\n    \"electron-rebuild\": \"^1.1.4\",\n    \"node-gyp\": \"^3.3.1\",\n    \"node-pre-gyp\": \"^0.6.28\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"http://www.consistem.com.br\"\n  },\n  \"author\": \"Marcio Jota Coelho\",\n  \"license\": \"ISC\"\n}\nThe problem. I need rebuild node-modules, with new version of Electron, But I don't change version in postinstall to 1.1.2\n. Yes.. close this, I am sorry for my fail\n. ",
    "thecoderok": "thanks, let me try to build it under mac. Will inform about result.\n. thank you, I built it on Mac and it works now!\n. ",
    "fortinmike": "@malept Are you allowing it or not? Currently (to my knowledge) nothing indicates that this scenario isn't possible. Building Windows apps on Mac is supported (with Wine), so... That's a bummer because adding additional Mac build agents to our CI server is not a workable solution for us at the moment, and I suppose that's true for others as well.\nI assumed that the Electron container was already built and linked properly and that the app was just \"dropped\" in the appropriate folder when packaging, making it work on Windows without any of the usual Mac build toolset. Am I mistaken in how this works?\nWhat are the \"very specific conditions\" required to make this work?. Thanks for the info (and the links to other relevant issues), I'll take a look at them. For the record, our app is quite simple and uses no native modules. We get the exact error mentioned by the OP (libnode.dylib).. Thanks for the suggestion, I'll see if I can find some time to do it and will report on my findings here if appropriate.. ",
    "sbekrin": "I faced same problem. This happens because of missing package.json in built app.\nSolution is dead simple, add check for empty path in ignore function:\n``` js\nignore: (path) => {\n    if (path === '') {\n        return false;\n    }\n/* Rest of checks */\n\n}\n```\nI believe this happens because ignore function first call check empty path (directory itself) and ignores everything else.\n. ",
    "maisui99": "electron-packager version is 7.0.2\nand Debugging log below \nelectron-download info +0ms { cache: '/Users/xiaohao/.electron',\n  filename: 'electron-v1.1.0-win32-x64.zip',\n  url: 'https://github.com/electron/electron/releases/download/v1.1.0/electron-v1.1.0-win32-x64.zip' }\n  electron-download zip exists +5ms /Users/xiaohao/.electron/electron-v1.1.0-win32-x64.zip\nPackaging app for platform win32 x64 using electron v1.1.0\n  extract-zip creating target directory +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template\n  extract-zip opening +1ms /Users/xiaohao/.electron/electron-v1.1.0-win32-x64.zip with opts { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template' }\n  extract-zip zipfile entry +6ms electron.exe\n  extract-zip extracting entry +0ms { filename: 'electron.exe', isDir: false, isSymlink: false }\n  extract-zip mkdirp +1ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template' }\n  extract-zip opening read stream +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/electron.exe\n  extract-zip finished processing +1s electron.exe\n  extract-zip zipfile entry +2ms content_shell.pak\n  extract-zip extracting entry +0ms { filename: 'content_shell.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +1ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template' }\n  extract-zip opening read stream +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/content_shell.pak\n  extract-zip finished processing +265ms content_shell.pak\n  extract-zip zipfile entry +1ms d3dcompiler_47.dll\n  extract-zip extracting entry +0ms { filename: 'd3dcompiler_47.dll',\n  isDir: false,\n  isSymlink: false }\n  extract-zip mkdirp +1ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template' }\n  extract-zip opening read stream +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/d3dcompiler_47.dll\n  extract-zip finished processing +86ms d3dcompiler_47.dll\n  extract-zip zipfile entry +0ms icudtl.dat\n  extract-zip extracting entry +1ms { filename: 'icudtl.dat', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template' }\n  extract-zip opening read stream +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/icudtl.dat\n  extract-zip finished processing +256ms icudtl.dat\n  extract-zip zipfile entry +1ms libEGL.dll\n  extract-zip extracting entry +0ms { filename: 'libEGL.dll', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template' }\n  extract-zip opening read stream +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/libEGL.dll\n  extract-zip finished processing +1ms libEGL.dll\n  extract-zip zipfile entry +1ms libGLESv2.dll\n  extract-zip extracting entry +0ms { filename: 'libGLESv2.dll', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template' }\n  extract-zip opening read stream +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/libGLESv2.dll\n  extract-zip finished processing +32ms libGLESv2.dll\n  extract-zip zipfile entry +2ms msvcp120.dll\n  extract-zip extracting entry +0ms { filename: 'msvcp120.dll', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template' }\n  extract-zip opening read stream +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/msvcp120.dll\n  extract-zip finished processing +9ms msvcp120.dll\n  extract-zip zipfile entry +1ms msvcr120.dll\n  extract-zip extracting entry +0ms { filename: 'msvcr120.dll', isDir: false, isSymlink: false }\n  extract-zip mkdirp +1ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template' }\n  extract-zip opening read stream +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/msvcr120.dll\n  extract-zip finished processing +20ms msvcr120.dll\n  extract-zip zipfile entry +1ms ffmpeg.dll\n  extract-zip extracting entry +1ms { filename: 'ffmpeg.dll', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template' }\n  extract-zip opening read stream +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/ffmpeg.dll\n  extract-zip finished processing +31ms ffmpeg.dll\n  extract-zip zipfile entry +1ms node.dll\n  extract-zip extracting entry +0ms { filename: 'node.dll', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template' }\n  extract-zip opening read stream +1ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/node.dll\n  extract-zip finished processing +244ms node.dll\n  extract-zip zipfile entry +1ms content_resources_200_percent.pak\n  extract-zip extracting entry +0ms { filename: 'content_resources_200_percent.pak',\n  isDir: false,\n  isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template' }\n  extract-zip opening read stream +1ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/content_resources_200_percent.pak\n  extract-zip finished processing +1ms content_resources_200_percent.pak\n  extract-zip zipfile entry +1ms ui_resources_200_percent.pak\n  extract-zip extracting entry +0ms { filename: 'ui_resources_200_percent.pak',\n  isDir: false,\n  isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template' }\n  extract-zip opening read stream +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/ui_resources_200_percent.pak\n  extract-zip finished processing +3ms ui_resources_200_percent.pak\n  extract-zip zipfile entry +0ms xinput1_3.dll\n  extract-zip extracting entry +0ms { filename: 'xinput1_3.dll', isDir: false, isSymlink: false }\n  extract-zip mkdirp +1ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template' }\n  extract-zip opening read stream +1ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/xinput1_3.dll\n  extract-zip finished processing +6ms xinput1_3.dll\n  extract-zip zipfile entry +1ms natives_blob.bin\n  extract-zip extracting entry +0ms { filename: 'natives_blob.bin', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template' }\n  extract-zip opening read stream +1ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/natives_blob.bin\n  extract-zip finished processing +4ms natives_blob.bin\n  extract-zip zipfile entry +0ms snapshot_blob.bin\n  extract-zip extracting entry +0ms { filename: 'snapshot_blob.bin', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template' }\n  extract-zip opening read stream +1ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/snapshot_blob.bin\n  extract-zip finished processing +11ms snapshot_blob.bin\n  extract-zip zipfile entry +1ms vccorlib120.dll\n  extract-zip extracting entry +0ms { filename: 'vccorlib120.dll', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template' }\n  extract-zip opening read stream +1ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/vccorlib120.dll\n  extract-zip finished processing +5ms vccorlib120.dll\n  extract-zip zipfile entry +1ms LICENSE\n  extract-zip extracting entry +0ms { filename: 'LICENSE', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template' }\n  extract-zip opening read stream +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/LICENSE\n  extract-zip finished processing +3ms LICENSE\n  extract-zip zipfile entry +0ms LICENSES.chromium.html\n  extract-zip extracting entry +0ms { filename: 'LICENSES.chromium.html',\n  isDir: false,\n  isSymlink: false }\n  extract-zip mkdirp +1ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template' }\n  extract-zip opening read stream +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/LICENSES.chromium.html\n  extract-zip finished processing +16ms LICENSES.chromium.html\n  extract-zip zipfile entry +1ms version\n  extract-zip extracting entry +0ms { filename: 'version', isDir: false, isSymlink: false }\n  extract-zip mkdirp +1ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template' }\n  extract-zip opening read stream +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/version\n  extract-zip finished processing +1ms version\n  extract-zip zipfile entry +1ms resources/default_app.asar\n  extract-zip extracting entry +0ms { filename: 'resources/default_app.asar',\n  isDir: false,\n  isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/resources' }\n  extract-zip opening read stream +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/resources/default_app.asar\n  extract-zip finished processing +1ms resources/default_app.asar\n  extract-zip zipfile entry +1ms resources/electron.asar\n  extract-zip extracting entry +0ms { filename: 'resources/electron.asar',\n  isDir: false,\n  isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/resources' }\n  extract-zip opening read stream +1ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/resources/electron.asar\n  extract-zip finished processing +3ms resources/electron.asar\n  extract-zip zipfile entry +0ms locales/am.pak\n  extract-zip extracting entry +0ms { filename: 'locales/am.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +1ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/am.pak\n  extract-zip finished processing +2ms locales/am.pak\n  extract-zip zipfile entry +0ms locales/ar.pak\n  extract-zip extracting entry +1ms { filename: 'locales/ar.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/ar.pak\n  extract-zip finished processing +2ms locales/ar.pak\n  extract-zip zipfile entry +0ms locales/bg.pak\n  extract-zip extracting entry +0ms { filename: 'locales/bg.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +1ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/bg.pak\n  extract-zip finished processing +1ms locales/bg.pak\n  extract-zip zipfile entry +1ms locales/bn.pak\n  extract-zip extracting entry +0ms { filename: 'locales/bn.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/bn.pak\n  extract-zip finished processing +1ms locales/bn.pak\n  extract-zip zipfile entry +1ms locales/ca.pak\n  extract-zip extracting entry +0ms { filename: 'locales/ca.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +1ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/ca.pak\n  extract-zip finished processing +3ms locales/ca.pak\n  extract-zip zipfile entry +1ms locales/cs.pak\n  extract-zip extracting entry +0ms { filename: 'locales/cs.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +1ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/cs.pak\n  extract-zip finished processing +1ms locales/cs.pak\n  extract-zip zipfile entry +0ms locales/da.pak\n  extract-zip extracting entry +0ms { filename: 'locales/da.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +1ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/da.pak\n  extract-zip finished processing +1ms locales/da.pak\n  extract-zip zipfile entry +0ms locales/de.pak\n  extract-zip extracting entry +0ms { filename: 'locales/de.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +1ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/de.pak\n  extract-zip finished processing +1ms locales/de.pak\n  extract-zip zipfile entry +1ms locales/el.pak\n  extract-zip extracting entry +0ms { filename: 'locales/el.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/el.pak\n  extract-zip finished processing +1ms locales/el.pak\n  extract-zip zipfile entry +1ms locales/en-GB.pak\n  extract-zip extracting entry +0ms { filename: 'locales/en-GB.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/en-GB.pak\n  extract-zip finished processing +1ms locales/en-GB.pak\n  extract-zip zipfile entry +0ms locales/en-US.pak\n  extract-zip extracting entry +0ms { filename: 'locales/en-US.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +1ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/en-US.pak\n  extract-zip finished processing +1ms locales/en-US.pak\n  extract-zip zipfile entry +0ms locales/es-419.pak\n  extract-zip extracting entry +0ms { filename: 'locales/es-419.pak',\n  isDir: false,\n  isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +1ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/es-419.pak\n  extract-zip finished processing +0ms locales/es-419.pak\n  extract-zip zipfile entry +1ms locales/es.pak\n  extract-zip extracting entry +0ms { filename: 'locales/es.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/es.pak\n  extract-zip finished processing +1ms locales/es.pak\n  extract-zip zipfile entry +0ms locales/et.pak\n  extract-zip extracting entry +0ms { filename: 'locales/et.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +1ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/et.pak\n  extract-zip finished processing +0ms locales/et.pak\n  extract-zip zipfile entry +1ms locales/fa.pak\n  extract-zip extracting entry +0ms { filename: 'locales/fa.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/fa.pak\n  extract-zip finished processing +1ms locales/fa.pak\n  extract-zip zipfile entry +0ms locales/fake-bidi.pak\n  extract-zip extracting entry +0ms { filename: 'locales/fake-bidi.pak',\n  isDir: false,\n  isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/fake-bidi.pak\n  extract-zip finished processing +1ms locales/fake-bidi.pak\n  extract-zip zipfile entry +0ms locales/fi.pak\n  extract-zip extracting entry +0ms { filename: 'locales/fi.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +1ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/fi.pak\n  extract-zip finished processing +1ms locales/fi.pak\n  extract-zip zipfile entry +0ms locales/fil.pak\n  extract-zip extracting entry +0ms { filename: 'locales/fil.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/fil.pak\n  extract-zip finished processing +2ms locales/fil.pak\n  extract-zip zipfile entry +0ms locales/fr.pak\n  extract-zip extracting entry +0ms { filename: 'locales/fr.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +1ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/fr.pak\n  extract-zip finished processing +0ms locales/fr.pak\n  extract-zip zipfile entry +0ms locales/gu.pak\n  extract-zip extracting entry +1ms { filename: 'locales/gu.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/gu.pak\n  extract-zip finished processing +1ms locales/gu.pak\n  extract-zip zipfile entry +0ms locales/he.pak\n  extract-zip extracting entry +0ms { filename: 'locales/he.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +1ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/he.pak\n  extract-zip finished processing +0ms locales/he.pak\n  extract-zip zipfile entry +0ms locales/hi.pak\n  extract-zip extracting entry +1ms { filename: 'locales/hi.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +1ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/hi.pak\n  extract-zip finished processing +0ms locales/hi.pak\n  extract-zip zipfile entry +1ms locales/hr.pak\n  extract-zip extracting entry +0ms { filename: 'locales/hr.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +1ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/hr.pak\n  extract-zip finished processing +3ms locales/hr.pak\n  extract-zip zipfile entry +0ms locales/hu.pak\n  extract-zip extracting entry +0ms { filename: 'locales/hu.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +1ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/hu.pak\n  extract-zip finished processing +1ms locales/hu.pak\n  extract-zip zipfile entry +1ms locales/id.pak\n  extract-zip extracting entry +0ms { filename: 'locales/id.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +1ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/id.pak\n  extract-zip finished processing +0ms locales/id.pak\n  extract-zip zipfile entry +1ms locales/it.pak\n  extract-zip extracting entry +0ms { filename: 'locales/it.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +1ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/it.pak\n  extract-zip finished processing +0ms locales/it.pak\n  extract-zip zipfile entry +1ms locales/ja.pak\n  extract-zip extracting entry +0ms { filename: 'locales/ja.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/ja.pak\n  extract-zip finished processing +2ms locales/ja.pak\n  extract-zip zipfile entry +0ms locales/kn.pak\n  extract-zip extracting entry +0ms { filename: 'locales/kn.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +1ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +1ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/kn.pak\n  extract-zip finished processing +4ms locales/kn.pak\n  extract-zip zipfile entry +2ms locales/ko.pak\n  extract-zip extracting entry +0ms { filename: 'locales/ko.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +1ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/ko.pak\n  extract-zip finished processing +2ms locales/ko.pak\n  extract-zip zipfile entry +0ms locales/lt.pak\n  extract-zip extracting entry +0ms { filename: 'locales/lt.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +1ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/lt.pak\n  extract-zip finished processing +2ms locales/lt.pak\n  extract-zip zipfile entry +0ms locales/lv.pak\n  extract-zip extracting entry +0ms { filename: 'locales/lv.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +1ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/lv.pak\n  extract-zip finished processing +1ms locales/lv.pak\n  extract-zip zipfile entry +0ms locales/ml.pak\n  extract-zip extracting entry +0ms { filename: 'locales/ml.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +1ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/ml.pak\n  extract-zip finished processing +1ms locales/ml.pak\n  extract-zip zipfile entry +0ms locales/mr.pak\n  extract-zip extracting entry +0ms { filename: 'locales/mr.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/mr.pak\n  extract-zip finished processing +1ms locales/mr.pak\n  extract-zip zipfile entry +0ms locales/ms.pak\n  extract-zip extracting entry +1ms { filename: 'locales/ms.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/ms.pak\n  extract-zip finished processing +1ms locales/ms.pak\n  extract-zip zipfile entry +0ms locales/nb.pak\n  extract-zip extracting entry +0ms { filename: 'locales/nb.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +1ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/nb.pak\n  extract-zip finished processing +1ms locales/nb.pak\n  extract-zip zipfile entry +0ms locales/nl.pak\n  extract-zip extracting entry +0ms { filename: 'locales/nl.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/nl.pak\n  extract-zip finished processing +1ms locales/nl.pak\n  extract-zip zipfile entry +1ms locales/pl.pak\n  extract-zip extracting entry +0ms { filename: 'locales/pl.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/pl.pak\n  extract-zip finished processing +1ms locales/pl.pak\n  extract-zip zipfile entry +0ms locales/pt-BR.pak\n  extract-zip extracting entry +0ms { filename: 'locales/pt-BR.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +1ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/pt-BR.pak\n  extract-zip finished processing +1ms locales/pt-BR.pak\n  extract-zip zipfile entry +0ms locales/pt-PT.pak\n  extract-zip extracting entry +0ms { filename: 'locales/pt-PT.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +1ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/pt-PT.pak\n  extract-zip finished processing +0ms locales/pt-PT.pak\n  extract-zip zipfile entry +1ms locales/ro.pak\n  extract-zip extracting entry +0ms { filename: 'locales/ro.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +1ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/ro.pak\n  extract-zip finished processing +0ms locales/ro.pak\n  extract-zip zipfile entry +1ms locales/ru.pak\n  extract-zip extracting entry +0ms { filename: 'locales/ru.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/ru.pak\n  extract-zip finished processing +1ms locales/ru.pak\n  extract-zip zipfile entry +1ms locales/sk.pak\n  extract-zip extracting entry +0ms { filename: 'locales/sk.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +1ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/sk.pak\n  extract-zip finished processing +0ms locales/sk.pak\n  extract-zip zipfile entry +1ms locales/sl.pak\n  extract-zip extracting entry +0ms { filename: 'locales/sl.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/sl.pak\n  extract-zip finished processing +1ms locales/sl.pak\n  extract-zip zipfile entry +0ms locales/sr.pak\n  extract-zip extracting entry +0ms { filename: 'locales/sr.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +1ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +2ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/sr.pak\n  extract-zip finished processing +0ms locales/sr.pak\n  extract-zip zipfile entry +1ms locales/sv.pak\n  extract-zip extracting entry +0ms { filename: 'locales/sv.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/sv.pak\n  extract-zip finished processing +2ms locales/sv.pak\n  extract-zip zipfile entry +1ms locales/sw.pak\n  extract-zip extracting entry +0ms { filename: 'locales/sw.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +1ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/sw.pak\n  extract-zip finished processing +1ms locales/sw.pak\n  extract-zip zipfile entry +0ms locales/ta.pak\n  extract-zip extracting entry +0ms { filename: 'locales/ta.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +1ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/ta.pak\n  extract-zip finished processing +1ms locales/ta.pak\n  extract-zip zipfile entry +0ms locales/te.pak\n  extract-zip extracting entry +0ms { filename: 'locales/te.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +1ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/te.pak\n  extract-zip finished processing +1ms locales/te.pak\n  extract-zip zipfile entry +0ms locales/th.pak\n  extract-zip extracting entry +0ms { filename: 'locales/th.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +1ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/th.pak\n  extract-zip finished processing +0ms locales/th.pak\n  extract-zip zipfile entry +1ms locales/tr.pak\n  extract-zip extracting entry +0ms { filename: 'locales/tr.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/tr.pak\n  extract-zip finished processing +1ms locales/tr.pak\n  extract-zip zipfile entry +0ms locales/uk.pak\n  extract-zip extracting entry +0ms { filename: 'locales/uk.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +1ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/uk.pak\n  extract-zip finished processing +1ms locales/uk.pak\n  extract-zip zipfile entry +0ms locales/vi.pak\n  extract-zip extracting entry +0ms { filename: 'locales/vi.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +1ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/vi.pak\n  extract-zip finished processing +1ms locales/vi.pak\n  extract-zip zipfile entry +0ms locales/zh-CN.pak\n  extract-zip extracting entry +0ms { filename: 'locales/zh-CN.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +1ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/zh-CN.pak\n  extract-zip finished processing +1ms locales/zh-CN.pak\n  extract-zip zipfile entry +0ms locales/zh-TW.pak\n  extract-zip extracting entry +1ms { filename: 'locales/zh-TW.pak', isDir: false, isSymlink: false }\n  extract-zip mkdirp +0ms { dir: '/var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales' }\n  extract-zip opening read stream +0ms /var/folders/6x/8741g5d51xq1lb71_k7hjpp00000gn/T/electron-packager/win32-x64-template/locales/zh-TW.pak\n  extract-zip finished processing +1ms locales/zh-TW.pak\n  extract-zip zip extraction complete +2ms\n/*not stop and nothing happened*/\n. it seems that something go wrong after extract-zip \n. building osx or linux bundle also have the same problem...  still stop after finished processing +1ms Electron.app/Contents/Resources/zh_TW.lproj\n. @sanqianpiao \u611f\u8c22\uff0c\u6211\u8bd5\u4e0b\u3002\n. @malept \uff0cok\uff0ci'm going to try using the solution by @sanqianpiao . if not work , i will offer one testcase :)\n. @sanqianpiao \u8fd9\u8fb9\u7528\u7684\u4e5f\u662fcnpm\uff0c\u5177\u4f53\u9700\u8981\u600e\u4e48\u8c03\u6574\uff1f\u91cd\u65b0\u7528npm\u5b89\u88c5packager?\n. ",
    "sanqianpiao": "I met the same problem, even the logs are the same!\nI'm using electron-packager 7.0.1 and electron-prebuilt 1.2.1.\n. @maisui99 \u5144\u5f1f\uff0c\u770b\u547d\u4ee4\u884c xiaohao \u8fd9\u4e2a\u7528\u6237\u540d\uff0c\u5e94\u8be5\u662f\u5929\u671d\u7684\u7a0b\u5e8f\u5458\u5427\uff1f\u6211\u521a\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002\u539f\u4f7f\u7528 cnpm\uff0c\u867d\u7136\u7f51\u901f\u5feb\uff0c\u4f46\u8fd9\u73a9\u610f\u4f7f\u7528 link \u7684\u65b9\u5f0f\u5b89\u88c5\u6587\u4ef6\u3002\u73b0\u4f7f\u7528 npm \u5373\u53ef\u3002\n. @maisui99  \u628a\u5de5\u7a0b\u4e0b\u7684 node_modules \u76ee\u5f55\u5220\u9664\u540e\uff0c\u4f7f\u7528 npm install \u5b89\u88c5\uff0c\u518d\u6267\u884c\u6253\u5305\u547d\u4ee4\u3002\n. ",
    "willin": "nice job\n. a new one\nbash\nelectron-packager . --asar  --overwrite --platform=win32 --arch=ia32 --prune=true --out=\nout --version-string.CompanyName='GitHub, Inc.'  --ignore=node_modules\nPackaging app for platform win32 ia32 using electron v1.2.0\nspawn wine ENOENT\nbash\nnpm run pack-win\n0 info it worked if it ends with ok\n1 verbose cli [ '/Users/willin/.nvm/versions/node/v6.2.0/bin/node',\n1 verbose cli   '/Users/willin/.nvm/versions/node/v6.2.0/bin/npm',\n1 verbose cli   'run',\n1 verbose cli   'pack-win' ]\n2 info using npm@3.8.9\n3 info using node@v6.2.0\n4 verbose run-script [ 'prepack-win', 'pack-win', 'postpack-win' ]\n5 info lifecycle wulian-fish-client@1.0.0~prepack-win: wulian-fish-client@1.0.0\n6 silly lifecycle wulian-fish-client@1.0.0~prepack-win: no script for prepack-win, continuing\n7 info lifecycle wulian-fish-client@1.0.0~pack-win: wulian-fish-client@1.0.0\n8 verbose lifecycle wulian-fish-client@1.0.0~pack-win: unsafe-perm in lifecycle true\n9 verbose lifecycle wulian-fish-client@1.0.0~pack-win: PATH: /Users/willin/.nvm/versions/node/v6.2.0/lib/node_modules/npm/bin/node-gyp-bin:/Users/willin/Documents/wulian/cc/fish-client/node_modules/.bin:/Users/willin/.nvm/versions/node/v6.2.0/bin:/Users/willin/.gvm/pkgsets/go1.5.1/global/bin:/Users/willin/.gvm/gos/go1.5.1/bin:/Users/willin/.gvm/pkgsets/go1.5.1/global/overlay/bin:/Users/willin/.gvm/bin:/Users/willin/.gvm/bin:/Users/willin/.nvm/versions/node/v6.2.0/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\n10 verbose lifecycle wulian-fish-client@1.0.0~pack-win: CWD: /Users/willin/Documents/wulian/cc/fish-client\n11 silly lifecycle wulian-fish-client@1.0.0~pack-win: Args: [ '-c',\n11 silly lifecycle   'electron-packager . --asar  --overwrite --platform=win32 --arch=ia32 --prune=true --out=out --version-string.CompanyName=\\'GitHub, Inc.\\'  --ignore=node_modules' ]\n12 silly lifecycle wulian-fish-client@1.0.0~pack-win: Returned: code: 1  signal: null\n13 info lifecycle wulian-fish-client@1.0.0~pack-win: Failed to exec pack-win script\n14 verbose stack Error: wulian-fish-client@1.0.0 pack-win: `electron-packager . --asar  --overwrite --platform=win32 --arch=ia32 --prune=true --out=out --version-string.CompanyName='GitHub, Inc.'  --ignore=node_modules`\n14 verbose stack Exit status 1\n14 verbose stack     at EventEmitter.<anonymous> (/Users/willin/.nvm/versions/node/v6.2.0/lib/node_modules/npm/lib/utils/lifecycle.js:245:16)\n14 verbose stack     at emitTwo (events.js:106:13)\n14 verbose stack     at EventEmitter.emit (events.js:191:7)\n14 verbose stack     at ChildProcess.<anonymous> (/Users/willin/.nvm/versions/node/v6.2.0/lib/node_modules/npm/lib/utils/spawn.js:24:14)\n14 verbose stack     at emitTwo (events.js:106:13)\n14 verbose stack     at ChildProcess.emit (events.js:191:7)\n14 verbose stack     at maybeClose (internal/child_process.js:850:16)\n14 verbose stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:215:5)\n15 verbose pkgid wulian-fish-client@1.0.0\n16 verbose cwd /Users/willin/Documents/wulian/cc/fish-client\n17 error Darwin 15.5.0\n18 error argv \"/Users/willin/.nvm/versions/node/v6.2.0/bin/node\" \"/Users/willin/.nvm/versions/node/v6.2.0/bin/npm\" \"run\" \"pack-win\"\n19 error node v6.2.0\n20 error npm  v3.8.9\n21 error code ELIFECYCLE\n22 error wulian-fish-client@1.0.0 pack-win: `electron-packager . --asar  --overwrite --platform=win32 --arch=ia32 --prune=true --out=out --version-string.CompanyName='GitHub, Inc.'  --ignore=node_modules`\n22 error Exit status 1\n23 error Failed at the wulian-fish-client@1.0.0 pack-win script 'electron-packager . --asar  --overwrite --platform=win32 --arch=ia32 --prune=true --out=out --version-string.CompanyName='GitHub, Inc.'  --ignore=node_modules'.\n23 error Make sure you have the latest version of node.js and npm installed.\n23 error If you do, this is most likely a problem with the wulian-fish-client package,\n23 error not with npm itself.\n23 error Tell the author that this fails on your system:\n23 error     electron-packager . --asar  --overwrite --platform=win32 --arch=ia32 --prune=true --out=out --version-string.CompanyName='GitHub, Inc.'  --ignore=node_modules\n23 error You can get information on how to open an issue for this project with:\n23 error     npm bugs wulian-fish-client\n23 error Or if that isn't available, you can get their info via:\n23 error     npm owner ls wulian-fish-client\n23 error There is likely additional logging output above.\n24 verbose exit [ 1, true ]\n. ",
    "durran": "This has another side effect for users who are upgrading electron applications that were built with an older version of electron-packager where the CFBundleExecutable name is set to the application name now and not Electron. (https://github.com/electron-userland/electron-packager/issues/323) If we could override these properties as well as control the name of the executable we could provide a seamless upgrade path for our users and not make them move or rename the folder. While moving the folder is trivial, many users don't read the release notes before simply draging the new .dmg in the Applications folder and automatically assume everything is corrupt. \n. ",
    "bnb": "@malept Okay, thanks. Would you happen to know of any documentation or modules to accomplish either of these?\n. ",
    "yeganehaym": "yes,its working with \"electron .\" command\n. yes, doesn't show anything on screen when i click on it\nbut task manager show the process for a second and then it's terminated\n. nothing\n. \n. i'll tell you later,\nmy net has a problem now unfortunately\n. i tested\nit worked by your example\n. solved\nthat was my bad and i wasted your time\ni have a sql.txt file and i forgot it about\nwhen the app reached to this line\nvar sqlStr=fs.readFileSync(\"./sql.txt\");\nsql.txt wasn't exist and stopped app\ni must place it on it\nis there something to pack other files in this lib?\n. @englishextra i know, we should help each other to have a useful page for someone maybe, like me\n. ",
    "paula23andrea": "Hi!!\nI found this issue and it looks like a similar problem i have.\nI am using electron-packager for generate .exe for my app.\nThe app in ubuntu runs perfect, but in Windows it crash with this error:\n\nError: Cannot find module 'C:\\my\\path\\to\\app\\resources\\app..\\node_sqlite3.node' \n\nBut the file exists in the path.\nI don't know what would be the cause of this error. I'm noobie with Electron.\nMy package.json:\n{\n  \"name\": \"tm-electron-tests\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Desktop App Time Manager\",\n  \"main\": \"main.js\",\n  \"scripts\": {\n    \"start\": \"electron .\",\n    \"package\": \"electron-packager ./ TimeManagerApp --all --version 1.3.6 --overwrite --icon=./resources/Icon.png\"\n  },\n  \"author\": \"Time Manager\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"async\": \"^2.0.1\",\n    \"bootstrap\": \"^3.3.7\",\n    \"cheerio\": \"^0.22.0\",\n    \"electron-prebuilt\": \"^1.3.6\",\n    \"electron-pug\": \"^1.5.1\",\n    \"electron-rebuild\": \"^1.2.1\",\n    \"fibers\": \"^1.0.14\",\n    \"jquery\": \"^3.1.0\",\n    \"knex\": \"^0.12.0\",\n    \"modal-dialog\": \"^1.6.3\",\n    \"moment\": \"^2.17.0\",\n    \"promise\": \"^7.1.1\",\n    \"sqlite3\": \"^3.1.4\",\n    \"yadcf-npm\": \"^0.8.9\"\n  },\n  \"devDependencies\": {\n    \"electron-packager\": \"^8.4.0\"\n  }\n}\nThank you!\n. ",
    "nihakue": "Ah, of course. Not sure if I skimmed the docs too quickly, there's info missing that should be there, or I should just be smarter, but adding electron-prebuilt to my dev dependencies solved the problem.\nI guess the resolve dir being wrong is caused by node-resolve searching the  pwd, not finding version in the package.json there, and then moving to parent and failing there (thus the dir sent to err.message is the parent dir)?\n. ",
    "ErraticFox": "When I do electron-packager . --all it still outputs the same thing though.\n. Does that mean I'd have to install the CLI version?\n. I get\nC:\\Users\\ErraticFox\\Documents\\Electron>node_modules\\.bin\\electron-packager . --all\nUnable to infer name or version. Please specify a name and version.\nCannot find module 'package.json' from 'C:\\Users\\ErraticFox\\Documents'(Properties not found yet: dependencies.electron-prebuilt,devDependencies.electron-prebuilt)\nWhat's weird is it looks like it's running in the \"Documents\" folder and not the \"Electron\" folder.\n. Alright, it runs it looks like.\nPackaging app for platform linux ia32 using electron v1.2.2\nEEXIST: file already exists, link 'C:\\Users\\ERRATI~1\\AppData\\Local\\Temp\\electron-packager\\linux-ia32\\electron-linux-ia32\\electron' -> 'C:\\Users\\ERRATI~1\\AppData\\Local\\Temp\\electron-packager\\linux-ia32\\electron-linux-ia32\\electron'\n. I meant 1.2.2. For some reason npm said that so I put it. I am unable to find any documentation with the bundled version of ffmpeg for electron.\n. No, just bundling the executable.\n. yes\n. ",
    "akashnimare": "@malept Thanks man.\n. ",
    "DanSallau": "@malept  thanks for the prompt reply. Please how do i clean my output directory ? Is there a command for that? I delete the tmp folders and the electron-packager folder all the time yet this error still persist. Please how do i clean my output dir.?\n. I now changed my command to\nelectron-packager . Myapp --out ./electron --platform=darwin --arch=x64 --version=0.34.0 --overwrite.\nThe error is now gone. However . The issue here returns http://stackoverflow.com/questions/37561851/electron-packaging-with-electron-packager . It does not pack with the node_modules . Below are the only files i see in the folder\n\nIt throws the error below when i click the icon. \n\nPlease how do i solve the issue ?\n. @malept thanks for your time sir. Have tried many versions, though couldn't find the article about the said module version. I read somewhere people where mentioning about package.js. I check my electron-prebuilt under node_modules. Inside there is package.json and i noticed something like below.\n```\n\"_args\": [\n    [\n      \"electron-prebuilt@1.2.2\",\n      \"/Users/nuru/git-repos/binary-next-gen\"\n    ]\n```\nMy electron-prebuilt is  \"electron-prebuilt\": \"^1.2.1\", though. I also notcied dependencies and devDependencies. I copied the dependencies under my main package.json unto my electron-prebuilt package.json. Still nothing change. My build returns 3 files on;y. None of y node_modules is compiled/built. I really am confused. \n. @malept below is my project tree. Before, the electron.js you can see was inside src. I now moved it out . I can see any difference though. \n\nMy electron.js is below.\n```\nconst electron = require('electron');\nconst app = electron.app;\nconst BrowserWindow = electron.BrowserWindow;  // Module to create native browser window.\nelectron.crashReporter.start({\n  productName: 'YourName',\n  companyName: 'YourCompany',\n  submitURL: 'https://your-domain.com/url-to-submit',\n  autoSubmit: true,\n});\nvar mainWindow = null;\napp.on('window-all-closed', function() {\n  if (process.platform != 'darwin') {\n    app.quit();\n  }\n});\napp.on('ready', function() {\nmainWindow = new BrowserWindow({width: 600, height: 500});\n  mainWindow.loadURL('file://' + __dirname + '/../www/index.html',{\"userAgent\":\"Mobile\"});\nmainWindow.webContents.openDevTools();\nmainWindow.on('closed', function() {\n    mainWindow = null;\n  });\n});\n```\nI read somewhere that someone suggested adding the line below \n``\n  mainWindow.webContents.executeJavaScript(\n    var path = require('path');\n    module.paths.push(path.resolve('node_modules'));\n    module.paths.push(path.resolve('../node_modules'));\n    module.paths.push(path.resolve(__dirname, '..', '..', 'electron', 'node_modules'));\n    module.paths.push(path.resolve(__dirname, '..', '..', 'electron.asar', 'node_modules'));\n    module.paths.push(path.resolve(__dirname, '..', '..', 'app', 'node_modules'));\n    module.paths.push(path.resolve(__dirname, '..', '..', 'app.asar', 'node_modules'));\n    path = undefined;\n  `);\n```\nright after mainWindow.loadURL . I tried it didn't help.  Is there anything i may be doing wrong sir ? Note , my electron.js and its location/content.\n. @malept i works and packaged well for win32 .When i changed my command to \nelectron-packager . app --out ./electron --platform=win32 --arch=x64 --version=0.35.0 --overwrite\nIt packaged everything with a whole lot bunch of folders required yet it still does not package for Darwin version \n. @malept yup. I tried platform=win32 and it package with all the necessary folders and files. Only platform=Darwin thats not working. Only darwin is failing to package with the folders.\n. @malept thanks man . Really appreciate your time.  You are right. \ud83d\udc4d \n. ",
    "Billy-": "had to explicitly set --ignore=^.*electron-packager.*$ to stop this loop happening. Was building in a docker container so I'm guessing tmp directory wasn't set (setting --tmp=/tmp didn't change anything) and so current dir was used, leading to this copy loop. If this default behaviour of using the current directory as temp, should there also be a check if it conflicts with the source directory and therefore have a counter measure, such as creating a new directory in the current directory and automatically ignoring it?\n. @malept can you comment on my logic above as to whether it might be correct and if so could this issue be re opened so you don't have to explicitly ignore this folder in order to avoid this copy recursion?\n. @malept I forked the quick start repo and just added this one commit which adds electron packager as a dev dependency, adds the packager command as an npm script, and a docker compose file: https://github.com/Billy-/electron-quick-start/commit/03ce7196f27149583b27fb7d8931f908616fe804\nYou will need docker and docker-compose. Just checkout that commit and run docker-compose up. Word of warning, this will lock up your machine. Run in a VM.\n. @malept Additionally I pushed this commit to bitbucket and ran it in bitbucket pipelines, you can view the log here: https://bitbucket.org/Billy-/electron-quick-start/addon/pipelines/home#!/results/%7B3bb09238-4a1d-485a-ad53-fdcdbf02f0a8%7D\n. @malept Would it be possible to add in functionality to detect this issue and automatically prevent this from happening? It could add the temp directory in the working directory and automatically ignore it?. You'll have to forgive me as I don't know anything about how/why the temp directory is used. But I imagine if it's there it's there for a reason; what are the implications of disabling it?\nAdditionally I think this issue has the potential to occur in any environment, if the temp directory for some reason ends up in the same directory you are copying from (this can even be explicitly set). I think the heuristic should be quite simple; in pseudo code:\nJS\nif (path_to_tmp_dir.indexOf(path_to_source_dir)) {\n    ignoreFiles += tmp_files_regex\n}\nWith this approach you don't have to worry about applying it only to one environment; it should be applied to any/all environments and it serves to prevent this issue from occurring only if it is going to occur.\nCorrect me if I'm wrong and I'll stop wasting your time \ud83d\ude1b . Ah, ok. Thanks for explaining. I will try to look into your suggestion.. ",
    "NuroDev": "Yes, the OSX packages with no error and the app runs without problems. It is just win32 packages like this\n. No. I run the executable and the the window opens, closes and the console just moved down to the next line. No error messages or any output.\n. Okay, I will run some tests and see what does and doesn't run.\n. [UPDATE] I tested packaging the app with another main.js file (Stock main.js file from Electron quick start repo) and the issue still remains.\nAssumtion now is that there is some error when packaging.\n. Okay it appears me assigning it the .ico file in my main/js appeared to be the issue.\nI've changed it to be .png instead and the app now runs perfectly.\nThanks.\n. ",
    "r1si": "hi @malept Thanks you ! \nThe problem is that I have installed an old version of electron-packager :(... \nThe last version was installed with -g arguments but my compile script still grab the local one with an old version :S \nThanks a lot !\nElia\n. ",
    "simonroth": "Possibly related to https://github.com/npm/npm/issues/8574.\n. Good morning guys. It turned out that the error occures due to different variable substitution on Windows (see https://github.com/npm/npm/issues/8574 and http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/#thewindowsproblem). When changing\n$npm_package_version to %npm_package_version%\nthe build passes without errors. It seems that it is not possible to run a build command using variable substitution cross plattform at the moment.\n. Okay, thanks.\n. ",
    "adamweeks": "I am getting the same error when building for win32 on a mac. \nelectron-packager build/ gifbar --platform=win32 --arch=x64 --overwrite --tmpdir=false --out=releases/ --app-version=0.0.2\nI do not get the error if I remove the --app-version param.\n. ",
    "jf908": "It might be related but there are few differences. It still doesn't work using tmpdir=false. Also, I can delete it as a user but not through command line which is the opposite to that issue.\nIt's been working fine up until recently but I'm not exactly sure what triggered this.\n. Thank you everyone for the help, I finally solved the issue even although I think it wasn't directly related to electron-packager.\nI'm not sure how but the folder had been set to read-only. It took a while to realize this because I've never dealt with Windows permission issues before. Everything inside the folder was writable and setting it through the properties window had no effect.\nI only found out that it was read-only by using ls in powershell and saw there was an r mode where there shouldn't be. I fixed the issue using the command  attrib -R appNameFolder.\n. Yeah looks like it was something to do with that.\n. ",
    "binaryfunt": "After getting this error, trying to repackage doesn't work (or do anything), even using --overwrite. Removing the read-only permission from the app folder as described above and deleting the %localappdata%/Temp/electron-packager/  folder then allows it to work next time. The trouble is, every time I run electron-packager, it creates a read-only folder resources/app/ and a tempdir with the same permissions, so the next time round I get the same problem again. ",
    "amtrek": "Hello, I am fairly new to this. I am pretty sure the icon is valid but I don't use the boilerplate. \nMy package json is pretty lean, the icon was specified through the command line. Is there anyway to review any error during the building ? \nPackage json\n{\n  \"name\": \"Temperature_Monitoring_Application\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A minimal application to display returned temperature\",\n  \"main\": \"main.js\",\n  \"scripts\": {\n    \"start\": \"electron main.js\"\n  },\n  \"keywords\": [\n    \"Electron\",\n    \"Temperature Monitoring\",\n  ],\n  \"author\": \"Author\",\n  \"license\": \"CC0-1.0\",\n  \"devDependencies\": {\n    \"electron-prebuilt\": \"^1.2.0\"\n  },\n  \"dependencies\": {\n    \"chokidar\": \"^1.5.1\",\n    \"jsonfile\": \"^2.3.1\",\n    \"moment\": \"^2.13.0\",\n    \"screen\": \"^0.2.10\"\n  }\n}\n. ",
    "matiastucci": "I'm having the same issue (on Windows 10). I'm passing the icon flag like this --icon=\"icon.ico\", my icon.ico is 128\u2006\u00d7\u2006128. But after ran it I'm seeing the Electron icon. Any ideas? Thanks!\n. Nope, I'll do that. Also, should I do --icon=icon.ico (without the quotes)? I tried both, just in case\n. Hmm, seems that when I ran it in windows is working. I was running the script from OS X before.\n. yeah, that was a typo.\nAh, ok. Thanks!\n. ",
    "TheMSB": "I moved the question to the electron-winstaller project, sorry about the confusion.\n. I'd like to chime in that I'm experiencing this issue too, code sign verifies that the app is signed correctly but gatekeeper still gives an 'unidentified developer' message.\nRelevant notes:\n\nYes, I am using the exact same build process that worked (at least 2 months ago)\nYes, I am using an official Apple certificate\nYes, my certificate is still valid\n\nDebug output of osx-sign\nelectron-osx-sign:warn No `entitlements` passed in arguments, will not sign with entitlements. +0ms\n     electron-osx-sign Signing application... +2ms\n     electron-osx-sign > application         /var/folders/86/kd44ssfs30z5fmv0r_6zhbmr0000gn/T/electron-packager/darwin-x64/MyApp-darwin-x64/MyApp.app +1ms\n     electron-osx-sign > platform            darwin +0ms\n     electron-osx-sign > entitlements        undefined +0ms\n     electron-osx-sign > child-entitlements  undefined +0ms\n     electron-osx-sign > additional-binaries undefined +0ms\n     electron-osx-sign > identity            3rd Party Mac Developer Application: MyIdentity +0ms\n     electron-osx-sign Signing... /var/folders/86/kd44ssfs30z5fmv0r_6zhbmr0000gn/T/electron-packager/darwin-x64/MyApp-darwin-x64/MyApp.app/Contents/Frameworks/Electron Framework.framework/Versions/A/Electron Framework +121ms\n     electron-osx-sign Signing... /var/folders/86/kd44ssfs30z5fmv0r_6zhbmr0000gn/T/electron-packager/darwin-x64/MyApp-darwin-x64/MyApp.app/Contents/Frameworks/Electron Framework.framework/Versions/A/Libraries/libffmpeg.dylib +1s\n     electron-osx-sign Signing... /var/folders/86/kd44ssfs30z5fmv0r_6zhbmr0000gn/T/electron-packager/darwin-x64/MyApp-darwin-x64/MyApp.app/Contents/Frameworks/Electron Framework.framework/Versions/A/Libraries/libnode.dylib +500ms\n     electron-osx-sign Signing... /var/folders/86/kd44ssfs30z5fmv0r_6zhbmr0000gn/T/electron-packager/darwin-x64/MyApp-darwin-x64/MyApp.app/Contents/Frameworks/Electron Framework.framework/Versions/A/Resources/crashpad_handler +653ms\n     electron-osx-sign Signing... /var/folders/86/kd44ssfs30z5fmv0r_6zhbmr0000gn/T/electron-packager/darwin-x64/MyApp-darwin-x64/MyApp.app/Contents/Frameworks/Electron Framework.framework +480ms\n     electron-osx-sign Signing... /var/folders/86/kd44ssfs30z5fmv0r_6zhbmr0000gn/T/electron-packager/darwin-x64/MyApp-darwin-x64/MyApp.app/Contents/Frameworks/MyApp Helper EH.app/Contents/MacOS/MyApp Helper EH +1s\n     electron-osx-sign Signing... /var/folders/86/kd44ssfs30z5fmv0r_6zhbmr0000gn/T/electron-packager/darwin-x64/MyApp-darwin-x64/MyApp.app/Contents/Frameworks/MyApp Helper EH.app +489ms\n     electron-osx-sign Signing... /var/folders/86/kd44ssfs30z5fmv0r_6zhbmr0000gn/T/electron-packager/darwin-x64/MyApp-darwin-x64/MyApp.app/Contents/Frameworks/MyApp Helper NP.app/Contents/MacOS/MyApp Helper NP +484ms\n     electron-osx-sign Signing... /var/folders/86/kd44ssfs30z5fmv0r_6zhbmr0000gn/T/electron-packager/darwin-x64/MyApp-darwin-x64/MyApp.app/Contents/Frameworks/MyApp Helper NP.app +475ms\n     electron-osx-sign Signing... /var/folders/86/kd44ssfs30z5fmv0r_6zhbmr0000gn/T/electron-packager/darwin-x64/MyApp-darwin-x64/MyApp.app/Contents/Frameworks/MyApp Helper.app/Contents/MacOS/MyApp Helper +477ms\n     electron-osx-sign Signing... /var/folders/86/kd44ssfs30z5fmv0r_6zhbmr0000gn/T/electron-packager/darwin-x64/MyApp-darwin-x64/MyApp.app/Contents/Frameworks/MyApp Helper.app +484ms\n     electron-osx-sign Signing... /var/folders/86/kd44ssfs30z5fmv0r_6zhbmr0000gn/T/electron-packager/darwin-x64/MyApp-darwin-x64/MyApp.app/Contents/Frameworks/Mantle.framework/Versions/A/Mantle +515ms\n     electron-osx-sign Signing... /var/folders/86/kd44ssfs30z5fmv0r_6zhbmr0000gn/T/electron-packager/darwin-x64/MyApp-darwin-x64/MyApp.app/Contents/Frameworks/Mantle.framework +514ms\n     electron-osx-sign Signing... /var/folders/86/kd44ssfs30z5fmv0r_6zhbmr0000gn/T/electron-packager/darwin-x64/MyApp-darwin-x64/MyApp.app/Contents/Frameworks/ReactiveCocoa.framework/Versions/A/ReactiveCocoa +484ms\n     electron-osx-sign Signing... /var/folders/86/kd44ssfs30z5fmv0r_6zhbmr0000gn/T/electron-packager/darwin-x64/MyApp-darwin-x64/MyApp.app/Contents/Frameworks/ReactiveCocoa.framework +481ms\n     electron-osx-sign Signing... /var/folders/86/kd44ssfs30z5fmv0r_6zhbmr0000gn/T/electron-packager/darwin-x64/MyApp-darwin-x64/MyApp.app/Contents/Frameworks/Squirrel.framework/Versions/A/Resources/ShipIt +505ms\n     electron-osx-sign Signing... /var/folders/86/kd44ssfs30z5fmv0r_6zhbmr0000gn/T/electron-packager/darwin-x64/MyApp-darwin-x64/MyApp.app/Contents/Frameworks/Squirrel.framework/Versions/A/Squirrel +475ms\n     electron-osx-sign Signing... /var/folders/86/kd44ssfs30z5fmv0r_6zhbmr0000gn/T/electron-packager/darwin-x64/MyApp-darwin-x64/MyApp.app/Contents/Frameworks/Squirrel.framework +485ms\n     electron-osx-sign Signing... /var/folders/86/kd44ssfs30z5fmv0r_6zhbmr0000gn/T/electron-packager/darwin-x64/MyApp-darwin-x64/MyApp.app/Contents/MacOS/MyApp +481ms\n     electron-osx-sign Signing... /var/folders/86/kd44ssfs30z5fmv0r_6zhbmr0000gn/T/electron-packager/darwin-x64/MyApp-darwin-x64/MyApp.app +511ms\n     electron-osx-sign Verifying sign... +510ms\nOutput of code sign \ncodesign --verbose=4 --deep --strict MyApp.app\n```\n    --prepared:/Users/developer/Documents/workspace/organization/node-organization/out/test/MyApp.app/Contents/Frameworks/MyApp Helper.app\n    --prepared:/Users/developer/Documents/workspace/organization/node-organization/out/test/MyApp.app/Contents/Frameworks/MyApp Helper NP.app\n    --prepared:/Users/developer/Documents/workspace/organization/node-organization/out/test/MyApp.app/Contents/Frameworks/MyApp Helper EH.app\n    --validated:/Users/developer/Documents/workspace/organization/node-organization/out/test/MyApp.app/Contents/Frameworks/MyApp Helper.app\n    --validated:/Users/developer/Documents/workspace/organization/node-organization/out/test/MyApp.app/Contents/Frameworks/MyApp Helper NP.app--validated:/Users/developer/Documents/workspace/organization/node-organization/out/test/MyApp.app/Contents/Frameworks/MyApp Helper EH.app\n--prepared:/Users/developer/Documents/workspace/organization/node-organization/out/test/MyApp.app/Contents/Frameworks/Mantle.framework/Versions/Current/.\n--validated:/Users/developer/Documents/workspace/organization/node-organization/out/test/MyApp.app/Contents/Frameworks/Mantle.framework/Versions/Current/.\n--prepared:/Users/developer/Documents/workspace/organization/node-organization/out/test/MyApp.app/Contents/Frameworks/Squirrel.framework/Versions/Current/.\n--validated:/Users/developer/Documents/workspace/organization/node-organization/out/test/MyApp.app/Contents/Frameworks/Squirrel.framework/Versions/Current/.\n--prepared:/Users/developer/Documents/workspace/organization/node-organization/out/test/MyApp.app/Contents/Frameworks/ReactiveCocoa.framework/Versions/Current/.\n--validated:/Users/developer/Documents/workspace/organization/node-organization/out/test/MyApp.app/Contents/Frameworks/ReactiveCocoa.framework/Versions/Current/.\n--prepared:/Users/developer/Documents/workspace/organization/node-organization/out/test/MyApp.app/Contents/Frameworks/Electron Framework.framework/Versions/Current/.\n--validated:/Users/developer/Documents/workspace/organization/node-organization/out/test/MyApp.app/Contents/Frameworks/Electron Framework.framework/Versions/Current/.\n\n```\n. @sethlu indeed, seems the build script was using the wrong certificate. Thank you for pointing that out.. ",
    "empirefx": "My bad, its a electron bug thats caches pages contents. \n. ",
    "joshaber": "Can do \ud83d\udc4d \n. Alright, I believe I got all the bases covered there.\n. It looks like the Travis OS X builds have been failing for a while. Otherwise CI looks hopeful \ud83d\ude4f \n. Looks like everything else checked out. Lemme know if there are any more changes you'd like to see.\n. My pleasure! \ud83c\udf6a \n. Even better!\nI'm happy to write a test, but given that there's no externally visible change I'm not sure what we'd test. So long as the existing tests pass!\n. Thank you!\n. ",
    "hussainb": "Oops, Thankyou\n. ",
    "myme": "Great. I have been afk quite a bit lately and currently on vacation, so I haven't had time/resources to look more into testing this. You may still want a regression test for this perhaps? I only briefly looked into the test setup, but didn't immediately get how to create a proper fixture and how to incoorporate that in a test, so I don't have anything laying around atm.\n. ",
    "Schrims": "Another title could be \"passing command line arguments to Electron app after packaging\"\n. --disable-gpu and --force-cpu-draw are not listed - but i will take a look\n. I installed electron version 1.2.6 and tested the command line switches but without any effect\n. Thanks for your answers! I will check out the found code results and maybe test it on osx instead of windows\n. ",
    "jptillman": "I can confirm that app.commandLine.appendSwitch('disable-gpu') doesn't work for me either.  In addition, neither does app.commandLine.appendArgument('disable-gpu')\nIt appears I'm out of luck at this point because --disable-gpu is necessary for my deployment.. @develar Yep, that works.  I missed that in my scan of the docs.  Thanks!. ",
    "corvinrok": "Thank you... I am still finding my way around on this stuff.. since I am using gulp (not command line), how would I use a glob pattern to list multiple directories (I think there are a couple other native modules I will need to keep unpacked). For example, practically speaking I need to do exclude 3 modules (libxml-xsd, libxmljs-mt and nslog). I am familiar with regex, but glob is new to me. How would I do something like: \n'node_modules/(libxml-xsd|libxmljs-mt|nslog)',\nor can the 'asar-unpack-dir' take an array?\n. wow. Thanks so much for the helpful response. Really appreciate that.\n. Here is the raw source tree (before I run NPM INSTALL or any buildling) : \n```\nC:\\git\\utility\n+--.idea\n|  +--inspectionProfiles\n|  --libraries\n+--ClientSide\n|  +--api\n|  |  +--files\n|  |  --folders\n|  --app\n|     +--browser\n|     +--images\n|     |  --icons\n|     +--shared\n|     --visualization\n--ServerSide\n   +--test\n   |  --testfiles\n   |     --XML_MANY_FEATURES\n   --xsdFiles\n        -here is where the files Recipe.xsd and others are matching the \"ci\" pattern\n```\n. I changed my array to be of regexes as follows. \nelectronignore: [\n            // main directories to ignore\n            '^(\\.idea|ci|ClientSide|typings)$',\n            // sub-directories to ignore\n            '^node_modules/electron-(download|osx-sign|rebuild)$',\n            // top level files to ignore\n            '^(\\.gitignore|\\.jshintrc|\\.jscsrc|gulp\\.config\\.js|gulpfile\\.js|README|tsconfig\\.json|tslint\\.json|typings\\.json|webpack\\.config\\.js)$',\n        ],\nThat fails every time on all files. If I remove the ^ and $ markers, it works for everything, but we are back to the initial problem of the files with the \"ci\" phrase being also ignored:\nelectronignore: [\n            // main directories to ignore\n            '(\\.idea|ci|ClientSide|typings)',\n            // sub-directories to ignore\n            'node_modules/electron-(download|osx-sign|rebuild)',\n            // top level files to ignore\n            '(\\.gitignore|\\.jshintrc|\\.jscsrc|gulp\\.config\\.js|gulpfile\\.js|README|tsconfig\\.json|tslint\\.json|typings\\.json|webpack\\.config\\.js)',\n        ],\nFinally, seeing how your example uses the \\b word bounding, I tried:\nelectronignore: [\n            // main directories to ignore\n            '\\b(\\.idea|ci|ClientSide|typings)',\n            // sub-directories to ignore\n            'node_modules/electron-(download|osx-sign|rebuild)',\n            // top level files to ignore\n            '\\b(\\.gitignore|\\.jshintrc|\\.jscsrc|gulp\\.config\\.js|gulpfile\\.js|README|tsconfig\\.json|tslint\\.json|typings\\.json|webpack\\.config\\.js)',\n        ],\n**But that gave me no results as well.  Basically, if these are true Regex objects then I believe it should recognize ^ or $, as well as \\b . But it appears to me that the only thing being recognized is the escape \\ for the dot . character, the pipes | for alternation and the open ( and close ) parens for grouping.\nI even tried placing it in one regex string (instead of an array) and this fails to ignore anything at all**:\nelectronignore: '\\b(\\.idea|ci|ClientSide|typings|node_modules/electron-(download|osx-sign|rebuild)|\\.gitignore|\\.jshintrc|\\.jscsrc|gulp\\.config\\.js|gulpfile\\.js|README|tsconfig\\.json|tslint\\.json|typings\\.json|webpack\\.config\\.js)',\nI'm losing my mind here :**\n. doh. you're right. I've now tried this... it works a little.. but the escape \\ does not work to just escape the . character when inside of the \\b() enclosure.**\nelectronignore: [\n            /\\b(\\.idea|ci|ClientSide|typings)/,\n            /\\b(\\.gitignore|\\.jshintrc|\\.jscsrc|gulp\\.config\\.js|gulpfile\\.js|README|tsconfig\\.json|tslint\\.json|typings\\.json|webpack\\.config\\.js)/\n        ],\nto overcome that, I had to do the following:\nelectronignore: [\n            /\\.idea/,\n            /\\b(ci|ClientSide|typings)/,\n            /(\\.gitignore|\\.jshintrc|\\.jscsrc|gulp\\.config\\.js|gulpfile\\.js|README|tsconfig\\.json|tslint\\.json|typings\\.json|webpack\\.config\\.js)/\n        ],\nwhich finally worked. However, I fear that Regex's that have a . in them  will partial match other files in the tree since they are not wrapped in a \\b() .... \n. Yes. the \\b is a word boundary, and since filenames can contain characters that are not part of the definition of a non-word boundary character , it can't be used as a reasonable pattern match for an entire file name.\nThe point I guess I am making is that this implementation of a Regex for the -ignore option appears not to be a interpreted as a true regex object, or it would take the ^ and $ characters as beginning and end markers for the data, which I have tested and it does not.\nThis is kind of crucial because if this is not supporting begin/end markers for the pattern match, then one can never be sure that a Regex pattern match will equate to the ENTIRE directory or file name, since it appears to be matching things partially as well.  This creates two issues:\n1. First, if a file name is replicated in a lower portion of the tree, then it could become a match for the pattern even though it wasn't intended (as in, you want to ignore the folder \"ignore\" at the top level, but not at the next level down).\n2. Second, without the ability to mark the beginning/end of a pattern to a string (file/directory name), then partial matches are always going to be an issue if they are on file names with non-word bound characters. For example, trying to ignore the pattern /\\b(ci)/  would work for ci but would also work for ci-component and ci.txt , which is a problem.\nThe -ignore docs here point to the reg expressions for Mozilla here which says that this implementation of regex is supposed to support begin/end markers ( ^ and $ respectively).\nUnless I am missing something, this should match a complete filename/directory called \"ci\":\n/^ci$/\nBut it currently does not.\n. Appreciate that. Since the thing I am working on is literally my first Node project (and my first venture into using open source stuff), I'd be overwhelmed trying to tackle something like this at the moment. (In fact, I had to look up what \"pull request\" meant, evidence enough that I am swimming in new waters here). I wouldn't be opposed to participating at some point, for sure. What would you suggest is a good way to ramp up on this stuff for a newbie like myself? \n. Additional note: not sure if this helps but electron-packager succeeds wonderfully and this error does not happen when running on Node 7.10.1 (running its default 4.2.0 npm) and all other variables remain as stated in the original post.. Related to npm prune, I did try running this against the 5.4.2 and found it failed still. \nAgain, I got one result with the DEBUG switch on, and a different one with it removed.\nHere is the result with the DEBUG=electron-packager set--\n```\nC:\\git\\my-application>gulp build:electron\n[16:06:28] Using gulpfile C:\\git\\my-application\\gulpfile.js\n[16:06:28] Starting 'build:electron'...\n[16:06:28] Launching task to build & package binaries for MyApplication v0.1.10\n  electron-packager Electron Packager 9.1.0 +0ms\n  electron-packager Node v8.5.0 +0ms\n  electron-packager Host Operating system: win32 (x64) +2ms\n  electron-packager Packager Options: {\"name\":\"MyApplication\",\"platform\":\"win32\",\"arch\":\"x64\",\"dir\":\"./\",\"out\":\"./edist/\",\"ignore\":[{},{},{},{},{},{},{},{},{}],\"icon\":\"./ClientSide/app/images/icons/translator.ico\",\"asar\":{\"unpackDir\":\"node_modules{libxml-xsd,libxmljs-mt,nslog}//*\"},\"overwrite\":true,\"prune\":true,\"electronVersion\":\"1.7.7\",\"appCopyright\":\"Copyright (C) My Company Technologies, Inc. All Rights Reserved\",\"appVersion\":\"0.1.10\",\"win32metadata\":{\"CompanyName\":[\"My Application Team\"],\"ProductName\":\"MyApplication\",\"FileDescription\":\"My Application Project Translator\",\"OriginalFilename\":\"MyApplication.exe\"}} +2ms\n  electron-packager Target Platforms: win32 +4ms\n  electron-packager Target Architectures: x64 +4ms\n  electron-packager Application name: MyApplication +3ms\n  electron-packager Target Electron version: 1.7.7 +2ms\n  electron-packager Ignored path regular expressions: [ /\\/.idea$/,\n  /\\/\\b(ci|ClientSide|WiXInstaller|loaders|edist|ExternalStyles)$/,\n  /\\/\\b(ServerSide\\/test)$/,\n  /(.htmlhintrc|.jscsrrc|.jshintrc|.stylelintrc|tslint.json)$/,\n  /(gulp.config.js|gulpfile.js)$/,\n  /(karma.conf.js|karmaBase.conf.js|karmaDebug.conf.js)$/,\n  /(webpack.config.js|webpack.testConfig.js|webpack.UnittestConfig.js|webpackBase.config.js)$/,\n  /(tsconfig.json)$/,\n  /(.gitignore|README.md)$/,\n  '/node_modules/electron($|/)',\n  '/node_modules/electron-prebuilt(-compile)?($|/)',\n  '/node_modules/electron-packager($|/)',\n  '/\\.git($|/)',\n  '/node_modules/\\.bin($|/)',\n  '\\.o(bj)?$' ] +0ms\n  electron-packager Downloading Electron with options {\"platform\":\"win32\",\"arch\":\"x64\",\"version\":\"1.7.7\"} +0ms\nPackaging app for platform win32 x64 using electron v1.7.7\n  electron-packager Creating C:\\Users\\MyUser\\AppData\\Local\\Temp\\electron-packager\\win32-x64-template +2s\n  electron-packager Extracting C:\\Users\\MyUser.electron\\electron-v1.7.7-win32-x64.zip to C:\\Users\\MyUser\\AppData\\Local\\Temp\\electron-packager\\win32-x64-template +3ms\n  electron-packager Initializing app in C:\\Users\\MyUser\\AppData\\Local\\Temp\\electron-packager\\win32-x64\\MyApplication-win32-x64 from C:\\Users\\MyUser\\AppData\\Local\\Temp\\electron-packager\\win32-x64-template template +2s\n  electron-packager Ignored paths based on the out param: [ 'C:\\git\\my-application\\edist' ] +3s\n  electron-packager Pruning modules via: npm prune --production +0ms\n  electron-packager Running asar with the options {\"unpackDir\":\"node_modules/{libxml-xsd,libxmljs-mt,nslog}//*\"} +1m\nC:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:33\n      return callback(error)\n             ^\nRangeError: Maximum call stack size exceeded\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:33:14)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\nC:\\git\\my-application>\n```\nHere is the result with DEBUG variable deleted--\n```\nC:\\git\\my-application>npm -v\n5.4.2\nC:\\git\\my-application>gulp build:electron\n[16:15:08] Using gulpfile C:\\git\\my-application\\gulpfile.js\n[16:15:08] Starting 'build:electron'...\n[16:15:08] Launching task to build & package binaries for MyApplication v0.1.10\nPackaging app for platform win32 x64 using electron v1.7.7\nC:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:33\n      return callback(error)\n             ^\nRangeError: Maximum call stack size exceeded\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:33:14)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\nC:\\git\\my-application>\n```\n. I am concerned that use of the DEBUG variable produces wholly different execution paths (according to the output) than when it is not there.  Of course, production environments do not normally run with that variable set.\nSince the initial error appears to be npm -prune related, I suppose that is what is at root here (when running without the debug env var).\nBut in the end, it appears that running with DEBUG=electron-packager actually effects the execution path of electron-packager significantly. Should I file a bug on that?. I'd love to recreate the issue. I haven't used electron-quick-start yet... my project is pretty complex so its a bit of a chicken/egg thing.. I might have to make a project as complex as mine to reproduce the issue, which seems like it may be easier to just post the gulp.config.js (which defines a lot of the  electron-packager option variables) contents.... @malept I will try to put together an  electron-quick-start project today. I found that of the electron projects I work on, the one that has this issue (asar \"Maximum call stack size exceeded\") has native compiled elements listed in the unpackDir exception property of  asar option on the API call.  I.E. this line in the options object:\n...\n    asar: {unpackDir: config.electroncompiled},  // compress project/modules into an asar blob\n...\nBecause our project builds both a client and server side into the app, it's complicated (for me, not an electron guru) to recreate, so it may take a while.. This issue has now reappeared, as the prune bug has been fixed in npm 5.6.0, but the RangeError: Maximum call stack size exceeded is retained whenever building (with electron-packager) where a native compiled package (in this case libxml-xsd, libxmljs-mt) is  listed in the unpackDir exception property of asar option on the API call. \nI will try to create a simple example project, but my current project fails with this API call:\n```\nvar opts = {\n    name: pkg.name,\n    platform: 'win32',\n    arch: 'ia32',                           // ia32, x64 or all\n    dir: config.root,                       // source location of app\n    out: config.electronbuild,              // destination location for app os/native binaries\n    ignore: config.electronignore,          // don't include these directories in the electron app build\n    icon: config.icon,\n    asar: {unpackDir: config.electroncompiled},  // compress project/modules into an asar blob\n    overwrite: true,\n    prune: true,\n    electronVersion: electronVersion,    // Tell the packager what version of electron to build with\n    appCopyright: pkg.copyright,         // copyright info\n    appVersion: usableBuildVersion,      // The version of the application we are building\n    win32metadata: {                     // Windows Only config data\n        CompanyName: pkg.authors,\n        ProductName: pkg.name,\n        FileDescription: pkg.description,\n        OriginalFilename: pkg.name + '.exe'\n    }\n};\ngulp.task('build:electron', function (cb) {\n$.util.log('Launching task to build & package binaries for',\n    $.util.colors.cyan(opts.name),\n    $.util.colors.magenta('v' + opts.appVersion)\n);\nopts.arch = process.arch;\npackager(opts, function (err, appPath) {\n    if (!err) {\n        $.util.log(' <- packagerDone()', err, appPath);\n        cb();\n    } else {\n        cb(err);\n    }\n});\n\n});\n```\nand produces the error previously reported:\nRangeError: Maximum call stack size exceeded\n    at writeFileListToStream (\nI will turn on the DEBUG flag and see if I can get any more details that could be helpful... @malept If you would rather, I can create a new issue since this one is closed. Or just continue the work here... whatever you prefer.. As you can see from this debug output, I am building with Node 8.9.4 (latest LTS) using the latest electron 8 (beta) available.\n```\nC:\\git\\my-application>gulp build:electron\n[11:39:48] Using gulpfile C:\\git\\my-application\\gulpfile.js\n[11:39:48] Starting 'build:electron'...\n[11:39:48] Launching task to build & package binaries for MyApplication v0.2.11\n  electron-packager Electron Packager 10.1.1 +0ms\n  electron-packager Node v8.9.4 +1ms\n  electron-packager Host Operating system: win32 (x64) +1ms\n  electron-packager Packager Options: {\"name\":\"MyApplication\",\"platform\":\"win32\",\"arch\":\"x64\",\"dir\":\"./\",\"out\":\"./edist/\",\"ignore\":[{},{},{},{},{},{},{},{},{}],\"icon\":\"./ClientSide/app/images/icons/MyApplication.ico\",\"asar\":{\"unpackDir\":\"node_modules{libxml-xsd,libxmljs-mt,nslog}//*\"},\"overwrite\":true,\"prune\":true,\"electronVersion\":\"1.8.2-beta.3\",\"appCopyright\":\"Copyright (C) My Company. All Rights Reserved\",\"appVersion\":\"0.2.11\",\"win32metadata\":{\"CompanyName\":[\"My Application Team\"],\"ProductName\":\"MyApplication\",\"FileDescription\":\"My Application Project\",\"OriginalFilename\":\"MyApplication.exe\"}} +0ms\n  electron-packager Target Platforms: win32 +2ms\n  electron-packager Target Architectures: x64 +2ms\n  electron-packager Application name: MyApplication +1ms\n  electron-packager Target Electron version: 1.8.2-beta.3 +0ms\n  electron-packager Ignored path regular expressions: [ /\\/.idea$/,\n  /\\/\\b(ci|ClientSide|WiXInstaller|loaders|edist|ExternalStyles)$/,\n  /\\/\\b(ServerSide\\/test)$/,\n  /(.htmlhintrc|.jscsrrc|.jshintrc|.stylelintrc|tslint.json)$/,\n  /(gulp.config.js|gulpfile.js)$/,\n  /(karma.conf.js|karmaBase.conf.js|karmaDebug.conf.js)$/,\n  /(webpack.config.js|webpack.testConfig.js|webpack.UnittestConfig.js|webpackBase.config.js)$/,\n  /(tsconfig.json)$/,\n  /(.gitignore|README.md)$/,\n  '/node_modules/electron($|/)',\n  '/node_modules/electron-prebuilt(-compile)?($|/)',\n  '/node_modules/electron-packager($|/)',\n  '/\\.git($|/)',\n  '/node_modules/\\.bin($|/)',\n  '\\.o(bj)?$' ] +0ms\n  electron-packager Downloading Electron with options {\"platform\":\"win32\",\"arch\":\"x64\",\"version\":\"1.8.2-beta.3\"} +0ms\nPackaging app for platform win32 x64 using electron v1.8.2-beta.3\n  electron-packager Creating C:\\Users\\joe_developer\\AppData\\Local\\Temp\\electron-packager\\win32-x64-template +16s\n  electron-packager Extracting C:\\Users\\joe_developer.electron\\electron-v1.8.2-beta.3-win32-x64.zip to C:\\Users\\joe_developer\\AppData\\Local\\Temp\\electron-packager\\win32-x64-template +5ms\n  electron-packager Initializing app in C:\\Users\\joe_developer\\AppData\\Local\\Temp\\electron-packager\\win32-x64\\MyApplication-win32-x64 from C:\\Users\\joe_developer\\AppData\\Local\\Temp\\electron-packager\\win32-x64-template template +0ms\n  electron-packager Ignored paths based on the out param: [ 'C:\\git\\my-application\\edist' ] +18s\n  electron-packager Pruning modules via: npm prune --production +0ms\n  electron-packager Running asar with the options {\"unpackDir\":\"node_modules/{libxml-xsd,libxmljs-mt,nslog}//*\"} +3m\nC:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:33\n      return callback(error)\n             ^\nRangeError: Maximum call stack size exceeded\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:33:14)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\n    at writeFileListToStream (C:\\git\\my-application\\node_modules\\asar\\lib\\disk.js:35:12)\nC:\\git\\my-application>\n```\nThis is with DEBUG=electron-packager\n  . I am building a project based on https://github.com/electron/electron-quick-start  now... and will try to reproduce the problem therein and get it back to you.... @malept Good news! I have recreated the problem using the quick start app project on node 8.9.4.\nUnfortunately, I can't push the project from my dev environment do to IT restrictions on my PC. How might I get my version of the electron-quick-start project that reproduces the bug up to a repo ?  Is there a link / guide that explains how to do this via the web rather than git push?\n. I figured it out... I made a fork of the repo, and updated it and posted it:\nhttps://github.com/corvinrok/electron-quick-start\n. @malept I had electron-rebuild failures on Windows for a while too with libxml-xsd until I upgraded to the latest  C++11 compiler (by updating my version of Visual Studio from 2013 to 2017). Of course, that is a Windows specific solution to the V8 headers compilation needs of the native module (libxml-xsd). I don't do anything on Linux, so I can't speak to the errors you mentioned.\nThat said, just to be clear- the original error I reported in this thread I have  found and verified on Windows only, and I didn't try it elsewhere (Mac or Linux). . No Windows machine? :( \nUnfortunately, I can't remove ASAR support at this point.\nSadly, the tmpdir:false workaround is also a no go. It produces the following results:\nC:\\git\\electron-quick-start>gulp build:electron\n[10:38:11] Using gulpfile C:\\git\\electron-quick-start\\gulpfile.js\n[10:38:11] Starting 'clean:electron'...\n[10:38:11] Cleaning: ./edist/\n[10:38:11] delete done\n[10:38:11] Finished 'clean:electron' after 12 ms\n[10:38:11] Starting 'build:electron'...\n[10:38:11] Launching task to build & package binaries for my-electron-app v1.1.1\n  electron-packager Electron Packager 10.1.1 +0ms\n  electron-packager Node v8.9.4 +1ms\n  electron-packager Host Operating system: win32 (x64) +0ms\n  electron-packager Packager Options: {\"name\":\"my-electron-app\",\"platform\":\"win32\",\"arch\":\"x64\",\"dir\":\"./\",\"out\":\"./edist/\",\"ignore\":[{},{},{},{},{},{},{},{},{}],\"asar\":{\"unpackDir\":\"node_modules/{libxml-xsd,libxmljs-mt,nslog}/**/*\"},\"overwrite\":tru\ne,\"prune\":true,\"tmpdir\":false,\"electronVersion\":\"1.8.2-beta.3\",\"appCopyright\":\"Copyright (C) Corvin Rok\",\"appVersion\":\"1.1.1\",\"win32metadata\":{\"CompanyName\":[\"My Electron Application Team\"],\"ProductName\":\"my-electron-app\",\"FileDescription\":\"A minima\nl Electron application\",\"OriginalFilename\":\"my-electron-app.exe\"}} +0ms\n  electron-packager Target Platforms: win32 +0ms\n  electron-packager Target Architectures: x64 +1ms\n  electron-packager Application name: my-electron-app +0ms\n  electron-packager Target Electron version: 1.8.2-beta.3 +1ms\n  electron-packager Ignored path regular expressions: [ /\\/\\.idea$/,\n  /\\/\\b(ci|ClientSide|WiXInstaller|loaders|edist|ExternalStyles)$/,\n  /\\/\\b(ServerSide\\/test)$/,\n  /(\\.htmlhintrc|\\.jscsrrc|\\.jshintrc|.stylelintrc|tslint\\.json)$/,\n  /(gulp\\.config\\.js|gulpfile\\.js)$/,\n  /(karma\\.conf\\.js|karmaBase\\.conf\\.js|karmaDebug\\.conf\\.js)$/,\n  /(webpack\\.config\\.js|webpack\\.testConfig\\.js|webpack\\.UnittestConfig\\.js|webpackBase\\.config\\.js)$/,\n  /(tsconfig\\.json)$/,\n  /(\\.gitignore|README\\.md)$/,\n  '/node_modules/electron($|/)',\n  '/node_modules/electron-prebuilt(-compile)?($|/)',\n  '/node_modules/electron-packager($|/)',\n  '/\\\\.git($|/)',\n  '/node_modules/\\\\.bin($|/)',\n  '\\\\.o(bj)?$' ] +0ms\n  electron-packager Downloading Electron with options {\"platform\":\"win32\",\"arch\":\"x64\",\"version\":\"1.8.2-beta.3\"} +0ms\nPackaging app for platform win32 x64 using electron v1.8.2-beta.3\n  electron-packager Creating C:\\git\\electron-quick-start\\edist\\win32-x64-template +218ms\n  electron-packager Extracting C:\\Users\\{user}\\.electron\\electron-v1.8.2-beta.3-win32-x64.zip to C:\\git\\electron-quick-start\\edist\\win32-x64-template +20ms\n  electron-packager Initializing app in edist\\my-electron-app-win32-x64 from C:\\git\\electron-quick-start\\edist\\win32-x64-template template +0ms\n  electron-packager Ignored paths based on the out param: [ 'C:\\\\git\\\\electron-quick-start\\\\edist' ] +2s\n[10:38:13] 'build:electron' errored after 1.79 s\n[10:38:13] Error: Cannot copy 'C:\\git\\electron-quick-start' to a subdirectory of itself, 'C:\\git\\electron-quick-start\\edist\\my-electron-app-win32-x64\\resources\\app'.\n    at checkDest (C:\\git\\electron-quick-start\\node_modules\\electron-packager\\node_modules\\fs-extra\\lib\\copy\\copy.js:141:19)\n    at fs.readlink (C:\\git\\electron-quick-start\\node_modules\\electron-packager\\node_modules\\fs-extra\\lib\\copy\\copy.js:239:41)\n    at FSReqWrap.oncomplete (fs.js:135:15)\nDo you have friends in asar that can look at my version of the sample/demo and consider this as a bug? It's currently the blocking issue for me and my current project from trying to move off of Node 7 to 8 and beyond.... This was reported to the ASAR project/team as issue 139 . I would like to have issue remain open so that the ASAR maintainers can consider the issue and investigate to determine if whether it is indeed an ASAR issue or an electron-packager issue. Once that is determined, it seems to make sense to close whichever is not the package at issue, and keep the other open for resolution.. @malept protocol question for you-- I've asked on the pull request thread (https://github.com/electron/asar/pull/140#issuecomment-360576346) if the contributors (of the ASAR package) are going to consider the fix, but it seems there is no active respondents on the project.  The contributor and pull request pages are not extant on the community page for the project so I am uncertain how to support consideration of the fix being accepted. What, if anything, is appropriate for me to do to help this fix be considered and merged? It's blocking Windows electron applications with native compiled packages move beyond Node 7, but I am uncertain how to kindly and effectively support progress towards the resolution. Any ideas?. @mmorton good reminder! thanks, trying it now.. It did work. Thank you.. @malept Doesn't the asar 0.14.1 need to be incorporated (package.json) into electron-packager for this bug to be closed?. ",
    "codehz": "@malept\nI have try to add --asar.unpack=*.node, but  Still Not Working.\nELECTRON_ASAR.js:158 Uncaught Error: The specified module could not be found.\n\\\\?\\D:\\x\\desktop\\VizMusicPlayer\\dist\\win\\Viz Music Player-win32-x64\\resources\\app.asar.unpacked\\node_modules\\sharp\\build\\Release\\sharp.node\nI think \\\\?\\ is the core problem....\\\\?\\ prefix should be delete\n. I have used below(7.3.0)\n```\n\nelectron-packager . \"Viz Music Player\" --app-version=0.0.1 --prune --out=dist/win --platform=win32 --arch=x64 --version=1.2.7 --icon=build/icon.ico --version-string.CompanyName=\"CodeHz.one\" --versio\nn-string.ProductName=\"Viz Music Player\" --version-string.FileDescription=\"Viz Music Player\" --overwrite --asar.unpack=*.node\n```\n\n(same as before)\nand now using 7.2.0 try below\n```\n\nelectron-packager . \"Viz Music Player\" --app-version=0.0.1 --prune --out=dist/win --platform=win32 --arch=x64 --version=1.2.7 --icon=build/icon.ico --version-string.CompanyName=\"CodeHz.one\" --versio\nn-string.ProductName=\"Viz Music Player\" --version-string.FileDescription=\"Viz Music Player\" --overwrite --asar=true --asar-unpack=*.node\n```\n\n(Not work, same as before)\nand this\n```\n\nelectron-packager . \"Viz Music Player\" --app-version=0.0.1 --prune --out=dist/win --platform=win32 --arch=x64 --version=1.2.7 --icon=build/icon.ico --version-string.CompanyName=\"CodeHz.one\" --versio\nn-string.ProductName=\"Viz Music Player\" --version-string.FileDescription=\"Viz Music Player\" --overwrite  --asar-unpack=*.node\n```\n\nThe last one does work, but it does not used asar...\n. Sorry, I have removed --asar , but forget to update comment.... \n. ",
    "drFabio": "I can confirm that is an Asar issue not electron-packager issue, I am using asar programatically and having the same behaviour. Also I am having this issue on windows 7 but not on windows 10\n. ",
    "vuamitom": "Please note that this same error can be thrown if dll dependencies are not found for the native node module. \nDetails are in last comment on \nelectron/asar#129\n. ",
    "Joeanca": "After much searching and reading documentation --asar.unpack=*.{node,dll} on the electron-packager cli did the trick for me. Make sure you are rebuilding sharp as required before packaging.. ",
    "Alcan-Phoenix": "first of all thanks for your replay , my electron-packager is \"version\": \"7.3.0\" , and it does not give me any CLI arrgument ,,, it just blink for less than a second, and then get closed ,, thats all , but when i remove \"../resources/app.asar\" to \"../resources/app\" it work fine , this is the commad i use to package my app: electron-packager ./ --platform=win32 --arch=ia32 --version=1.2.5 --icon=.app/icon/logo256.ico --asar=true\n. i try to make it for windows 32bit, ia32 and x64 both does the same error\n. do i need to add something in my index.js? or did i miss something on that command ? \nelectron-packager ./ --platform=win32 --arch=ia32 --version=1.2.5 --icon=.app/icon/logo256.ico --asar=true\n. i tried it , but it gives no output , maybe am just missing something in the code ,,, or i dont know :/ \n. but why it work normal when i dont use \"asar\" ? the problem is only with \".asar\" archive\n. @kfranqueiro  thank you for your replay, but i think the problem is with the \"asar\" not the protocol prefix or the web content \n. am totaly lost, maybe i should install a module, or maybe add some block of code to index.js ,,,, or maybe both ? ! \n. ummm it magicly work now, but i have no idea why, i have delet the path of the icone and i have changed the order of files ad folders,,, not sure why ,,, but it work ,\nthank you so much @malept for your help \n. ",
    "arenacheck": "I only had the same problem with the icon file. But I think it\u00b4s with everything else that got a path outside of the electron project. As example my windows line:\nstart \"\" electron-packager ./ \"PROJEKT NAME HERE\" --platform=win32 --arch=all --asar=true --icon=\"./website/images/icon.ico\" packageManager=npm\nBefore I had the icon somewhere else on my C:\\ disk and this caused the bugs. Same should be for everything else, src etc. Make sure that all files are inside of your electron project.. ",
    "zombieJ": "@malept both Cygwin & Command Line throws the same error.\nCygwin error folder path: C:\\softwares\\cygwin\\tmp\nCommand error folder path : C:\\Users\\zombieJ\\AppData\\Local\\Temp\n. @malept , thanks for your help. Clean the cache fix the issue. I think this issue can be closed.\n. ",
    "probonopd": "I think this is a misunderstanding. AppImage is not an \"installer\", rather it is the direct equivalent of an \".app.dmg\" in macOS. It is an executable file that runs directly on most Linux distributions without the need for installation.\nThe stated purpose of electron-packager is to \"Package and distribute your Electron app with OS-specific bundles (.app, .exe etc)\". AppImage is exactly such a bundle format for Linux.\nPlease reconsider.\n. > Adding AppImage support just doesn't make sense given the current architecture of Electron Packager.\nIn my experience, Electron projects either use electron-builder or Electron Packager, where the former can do AppImage and the latter can't. This makes some projects consider to switch from the former to the latter. \n@malept What exactly is it about the current architecture of Electron Packager that leads to \"Adding AppImage support just doesn't make sense\"?. @MarshallOfSound thanks for the explanation, that clarifies it for me. So you are saying one can use a combination of Electron Packager and electron-builder?. ",
    "oniseijin": "Hmm, version string was v0.1.4; fails, changing to 0.1.4 and it was fine; strange\n. ",
    "hugolpz": "(I followed malept steps above and can't reproduce this with electron-quick-start. My apologizes.)\n. ",
    "neonhomer": "We just ran into this issue where one of our Windows 10 machines would stall with no error or any information like @MarshallOfSound. After some extensive debugging we found that fs-extra was silently failing when trying to remove the tempBase folder.\nWe cleared out the C:\\Users\\USERNAME\\AppData\\Local\\Temp folder and it works fine now.\n. ",
    "mistopportunity": "I am still having this problem. It doesn't matter if I use electron forge, electron fiddle, electron packager, or electron packager interactive. I have updated node and npm to the ends of the earth and just, nothing. I got electron packager to compile once. It worked the very first time then any other subsequent times it does nothing until I manually terminate the process.\nIs there some way to debug this process?. ",
    "SimplyAhmazing": "Thanks @malept - the multiple flags ended up working! Also thanks @englishextra \n. ",
    "SimulatedGREG": "\nHmmm. The tests no longer hit the \"unable to find app name/electron version\" code? Also, the test failure on Linux/Node 6 is troubling, but I'm not sure why it's happening (I reran the test run on Travis with the same result).\n\nThe 7.5.0 update seems to have broken my setup as I keep getting [Error: must specify version] when building. I then tried installing electron-packager@7.4.0 and used same configuration with no problems.\nThe item that seems to fix this issue would be having to define the version of electron manually that I'd like to package with. Yet as of the docs I shouldn't have to.\n\nIf omitted, it will use the version of the nearest local installation of electron or electron-prebuilt, defined in package.json in either dependencies or devDependencies.\n\nCan confirm this happens with both node 5.10.0 and 6.2.0 on macOS. Here is my full error message...\nbash\nError: must specify version\n    at download (/Users/gregholguin/Desktop/testing123/node_modules/electron-download/index.js:16:27)\n    at Array.<anonymous> (/Users/gregholguin/Desktop/testing123/node_modules/electron-packager/index.js:121:7)\n    at each (/Users/gregholguin/Desktop/testing123/node_modules/run-series/index.js:17:24)\n    at next (/Users/gregholguin/Desktop/testing123/node_modules/rimraf/rimraf.js:74:7)\n    at FSReqWrap.CB [as oncomplete] (/Users/gregholguin/Desktop/testing123/node_modules/rimraf/rimraf.js:110:9)\nUPDATE: Currently using electron-prebuilt.\n. @malept was just noticing. Thanks for the awesome work! Scary how switching from get-package-info to lodash.get created such a problem \ud83d\ude01. \n. @malept \n(Updated to 7.5.1 and can confirm with npm ls electron-packager.)\nSorry to report again, but 7.5.1 did not solve my issue. It would seem that...\njs\ngetNameAndVersion(opts, path.resolve(process.cwd(), opts.dir) || process.cwd(), function (err) {\n  ...\n})\n...assumes that the package.json that contains either electron or electron-prebuilt exists inside the given dir path or inside the process.cwd() when a dir path isn't give, but fails to also check inside process.cwd()with a given dir. This is some-what common when using a 2 package.json electron setup. I believe reversing the OR statement from\njs\npath.resolve(process.cwd(), opts.dir) || process.cwd()\nto\njs\nprocess.cwd() || path.resolve(process.cwd(), opts.dir)\nshould do the trick and works for my setup as well.\n. @malept \nIt may have that effect, but like I sorta mention before, this wasn't a problem with get-package-info. \ud83d\ude15\nI can make a PR later today, but not comfortable with doing tests so I'll try my best.\n. @malept \n\n@SimulatedGREG Hmmm. Now that I think about it, doesn't that change give the current working directory priority over the specified opts.dir? That seems counterintuitive.\n\nFrom what I can see, I don't believe reversing the OR statement would be problem. Even if the current working directory had priority over opts.dir there shouldn't have a 2 package.json setup the requires electron/electron-prebuilt in both files. (But I do see your point).\nI made an adjustment in my fork which simply checks the parent directory if a electron/electron-prebuilt version isn't inferred from opts.dir's package.json, but its a little repetitive. https://github.com/SimulatedGREG/electron-packager/commit/ac53980e8e0139d5379b832d2c4e40dc70f12bcb\n. Now I see the problem better. I'll try getting get-package-info working if possible.\n. ",
    "rtrvrtg": "I've built the app successfully within a relatively short amount of time if I exclude the data directory completely, but the app fails to load data within that directory at runtime. I've tried disabling asar but that didn't seem to have any effect.\nWhat I might try and do later on is to deliberately include any data files that are explicitly loaded by fs at runtime, and separate out the image assets for compilation, to include them later at runtime.\n@englishextra: Good call, I might try and put together a dummy app.\n. @englishextra I think you put me on the right track here. I wrote a dummy app to test out the idea and it worked fine. Here's the PoC if you're interested: https://github.com/rtrvrtg/electron-asset-test\nFor now it's probably not as big a deal as I'd thought. Will probably need to be more specific about what I'm excluding from the initial build to make this work. I'll close this issue off, but I might try and write some build tools at a later stage to help handle this weird use case in a more graceful manner.\nThanks for being so helpful and patient \u2013 sorry about the hassle.\n. ",
    "zole40": "I wasn't addressing that issue, but this might be a solution for that too - I just needed something similar to version-string.FileDescription for OSX to set the Executable and the Display name independently. Sorry for not adding a description, I'm a bit new to the world of open source\n. Well, my goal was to show the same thing in TaskManager(win) and ActivityMonitor(osx), and on windows the FileDescription is shown while on osx the BundleDisplayName is shown, so in this sense, they are similar. Since I couldn't set the BundleDisplayName, I added a parameter that lets me do that, and posted it in this PR. I hope this answers your question.\n. ",
    "simonkern": "Same here on OS X. 7.4.0 is working fine for me, but 7.5.0 throws:\n```\nmodule.js:442\n    throw err;\n    ^\nError: Cannot find module 'package.json'\n    at Function.Module._resolveFilename (module.js:440:15)\n    at Function.Module._load (module.js:388:25)\n    at Module.require (module.js:468:17)\n    at require (internal/module.js:20:19)\n    at getNameAndVersion (/usr/local/lib/node_modules/electron-packager/index.js:52:13)\n    at packager (/usr/local/lib/node_modules/electron-packager/index.js:207:3)\n    at Object. (/usr/local/lib/node_modules/electron-packager/cli.js:22:1)\n    at Module._compile (module.js:541:32)\n    at Object.Module._extensions..js (module.js:550:10)\n    at Module.load (module.js:458:32)\n```\n. Might have something to do with:\nhttps://github.com/electron-userland/electron-packager/commit/c508500a7108f7c66cb29c4af9a81ad5233c1194#diff-168726dbe96b3ce427e7fedce31bb0bcL8\n. ",
    "maxkueng": "I have the same problem.\nIt looks like the path returned on index.js#52 by path.join(dir, 'package.json') is just \"package.json\" instead of \"./package.json\" even though dir equals \".\". So Node is going to look for a module called \"package.json\" in node_modules which doesn't exist.\n. @jhen0409 wow that was faster than I could save the comment!\n. ",
    "chito256": "Hi guys, I am also running the same issue. Have anyone found any temporary fix at the moment?\n\n. ",
    "MystK": "This is also still broken on Windows\nEDIT: nevermind my bad! Looks like my global electron-packager was being used instead of my local. Works great. :)\n. ",
    "jhen0409": "@malept Sorry \ud83d\ude02, it should fixed.\n. > I assume the test fails without your fix?\nThis is test fail log without my first commit:\n```\n  dir argument test: should work with relative path\nmodule.js:442\n    throw err;\n    ^\nError: Cannot find module '../fixtures/el-0374/package.json'\n    at Function.Module._resolveFilename (module.js:440:15)\n    at Function.Module._load (module.js:388:25)\n    at Module.require (module.js:468:17)\n    at require (internal/module.js:20:19)\n    at getNameAndVersion (/Users/Jhen/github/electron-packager/index.js:5:1220)\n    at packager (/Users/Jhen/github/electron-packager/index.js:11:3734)\n    at Test. (/Users/Jhen/github/electron-packager/test/basic.js:479:3)\n    at Test.bound [as _cb] (/Users/Jhen/github/electron-packager/node_modules/tape/lib/test.js:63:32)\n    at Test.run (/Users/Jhen/github/electron-packager/node_modules/tape/lib/test.js:82:10)\n    at Test.bound [as run] (/Users/Jhen/github/electron-packager/node_modules/tape/lib/test.js:63:32)\n```\n. ",
    "TopCat2": "Installing electron-packager globally, instead of as a dev dependency, allows me to build.  Curious.\nI've been working on this for three days.  I just did yet another clone of electron-quick-start and tried the build, which failed.  I then cleaned out node_modules, removed electron-packager and electron-builder from the package.json, did an npm install and tried the build.  It worked.\nI went back to my original failed directory and did the same thing.  The package worked.  So either something changed overnight or it behaves differently when installed globally.\n. I'll be darned.  It does indeed work.  Is that why the -global install worked for me, that it pulled down 7.5.1?  I'll go read the comments for this version.\nMany thanks!\n. ",
    "arifbutt1964": "Hi \nI am using the electron package interactive epi which is a wrapper for electron packager and here is the console out put for win32 & i32...\n\nThanks\nArif\n. I have already set SET DEBUG=electron-packager on command line before running the epi\nNo I have not tried the earlier version or later one... should I?\nArif\n. how to do if I have to install the later/earlier version of electron?\nArif\n. OK let me try\n. there is so deep tree of folders... which one to take?\nC:\\newver\\releases\\electron_tutorial_one-win32-ia32\\resources\\app\\releases\\electron_tutorial_one-win32-ia32\\resources\\app\\myapp.exe-win32-ia32\n. Sorry... it is producing the same ERROR\n. electron v 1.3.2\n. \n. C:\\Program Files\\nodejs>npm ls -g electron-packager\nC:\\Users\\Administrator\\AppData\\Roaming\\npm\n\u251c\u2500\u2500 electron-packager@7.0.4\n\u2514\u2500\u252c electron-packager-interactive@0.0.7\n  \u2514\u2500\u2500 electron-packager@7.3.0\n. I cannot ignore this... once I press OK button then nothing happens\n. ok so I wait for your feedback\n. Hi there, is there any update on the above issue... can we expect any resolution soon?\nRegards\nArif\n. Its very easy to regenerate just run the epi and select win32 and ia32 options with a directory specification, in my case I made c:\\newver and c:\\newver\\releases folders as the following screen:\n\nthis will generate a folder C:\\newver\\releases\\electron_tutorial_one-win32-ia32\\resources\\app\\releases\\electron_tutorial_one-win32-ia32\\resources\\app\\myapp.exe-win32-ia32\nThen simply run the myapp.exe.exe file and see the error:\nregards\nArif\n. no code just using as default\n. if u want i ca arrange ateam viewer session for u on win32 win7 machine\n. ok i will do that tomorrow... will update u then\n. will epi install electron also?\n. ok\n. OK I will try to do this ... it seems that some of the files are missing in the package and therefore it is not running once installed on new machines.\nBut if it works then it means that we will have to perform all the above steps on every win32 based machine.\nI was thinking for a more flexible workout such as only perform the prebuilt installation with installing the npm etc ...\nAnyways lets see how it goes\nRegards\nArif\n. OK, however I was actually running a Windows 7 64bit machine with Node and git installed... let me try this on Linux machine this time...\nThanks\nRegards\nArif\n. I am doing a linux based steps:\nstep 1 to 4 are done OK, but now on step 5 I am getting this error\n[root@xms /]# DEBUG=electron-packager $(npm bin)/electron-packager . --platform=win32 --arch=ia32 --app-version=0.0.1 --out=dist\n-bash: /node_modules/.bin/electron-packager: No such file or directory\n[root@xms /]#\nKindly assist\n. I see the following:\n[root@xms electron-packager]# pwd\n/electron-quick-start/node_modules/electron-packager\n[root@xms electron-packager]# cd node_modules\n[root@xms node_modules]# ls\nasar   electron-download  extract-zip  lodash.get  plist   resolve\ndebug  electron-osx-sign  fs-extra     minimist    rcedit  run-series\n. I am still getting :+1: \n[root@xms electron-packager]# node_modules/.bin/electron-packager\n-bash: node_modules/.bin/electron-packager: No such file or directory\n[root@xms electron-packager]#\n. [root@xms electron-quick-start]# pwd\n/electron-quick-start\n[root@xms electron-quick-start]# node_modules/.bin/electron-packager . --platform=win32 --arch=ia32 --app-version=0.0.1 --out=dist\n/electron-quick-start/node_modules/electron-packager/cli.js:5\nconst common = require('./common')\n^^^^^\nSyntaxError: Use of const in strict mode.\n    at Module._compile (module.js:439:25)\n    at Object.Module._extensions..js (module.js:474:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Function.Module.runMain (module.js:497:10)\n    at startup (node.js:119:16)\n    at node.js:935:3\n. OK\nthanks\n. OK I am successfully done with the windows steps... now trying the dist in windows 32 machine\n. OKAY ... running successfully ... Thanks a lot.. really appreciate it...\nRegards\nArif\n. ",
    "albertvazquezm": "It worked for me, thank you!\n. ",
    "pfrazee": "@reiberdatschi23 did you ever figure this out?\n. Yeah, I ended up solving my issues by switching to electron-builder.\n. ",
    "reiberdatschi23": "@pfrazee nope sry we have switched to use the mac codesign utility directly which works perfectly.\n. ",
    "MatthD": "My fault ! \nI was using an example of command line comming from a website =>\nelectron-packager app \\\"myApp\\\" --out=dist/win --platform=win32 --arch=ia32 --version=0.36.2 --icon\nI did not understand tht version was in fact the electron verison used (thought it was myApp version.)\n. ",
    "ErikBoesen": "Whoops. Sorry.\n. You've probably already noticed this, but you seem to have a failing build. I updated all my plugins which is what caused the crash.\n. Sorry, should have specified. In your readme, Travis CI is reporting a failing build.\n. Understood.\n. ",
    "heapwolf": "I accidentally wiped out the issue template but when i refreshed it wouldn't come back. Anyway, 7.0.4 also works just fine. A working DMG is produced by both 7.0.4 and 7.1.0. The DMG produced by anything above 7.1.0 says the following... \n\u201cvoltra.app\u201d can\u2019t be opened because the identity of the developer cannot be confirmed.\nYour security preferences allow installation of only apps from the Mac App Store and identified developers.\n. @malept ah! haha yeah, sorry, im using another module to produce the DMG. I guess that's not an important detail at all :)\n. @malept yeah, basically it appears to create the right output, it runs on my local computer just fine. The only thing wrong is just the certificate reporting as invalid on other people's computers.\n. Aside from apple spelling my name wrong, it seems to find my certificate...\n[OK] compressed Javascript\n[OK] removed temporary files\n[OK] pruned node modules directory\nMaking OSX App...\nPackaging app for platform darwin x64 using electron v1.3.3\nApp created OK\nSigning App...\n  electron-osx-sign Signing application... +0ms\n  electron-osx-sign > application         /Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app +1ms\n  electron-osx-sign > platform            darwin +1ms\n  electron-osx-sign > entitlements        undefined +0ms\n  electron-osx-sign > child-entitlements  undefined +0ms\n  electron-osx-sign > additional-binaries undefined +0ms\n  electron-osx-sign > identity            Developer ID Application: Paulo Fragomeni (3CPSKTF8W5) +0ms\n  electron-osx-sign Signing... /Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/Electron Framework.framework/Versions/A/Electron Framework +156ms\n  electron-osx-sign Signing... /Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/Electron Framework.framework/Versions/A/Libraries/libffmpeg.dylib +2s\n  electron-osx-sign Signing... /Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/Electron Framework.framework/Versions/A/Libraries/libnode.dylib +890ms\n  electron-osx-sign Signing... /Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/Electron Framework.framework/Versions/A/Resources/crashpad_handler +688ms\n  electron-osx-sign Signing... /Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/Electron Framework.framework +487ms\n  electron-osx-sign Signing... /Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/Mantle.framework/Versions/A/Mantle +2s\n  electron-osx-sign Signing... /Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/Mantle.framework +503ms\n  electron-osx-sign Signing... /Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/ReactiveCocoa.framework/Versions/A/ReactiveCocoa +485ms\n  electron-osx-sign Signing... /Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/ReactiveCocoa.framework +602ms\n  electron-osx-sign Signing... /Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/Squirrel.framework/Versions/A/Resources/ShipIt +619ms\n  electron-osx-sign Signing... /Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/Squirrel.framework/Versions/A/Squirrel +523ms\n  electron-osx-sign Signing... /Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/Squirrel.framework +707ms\n  electron-osx-sign Signing... /Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/voltra Helper EH.app/Contents/MacOS/voltra Helper EH +595ms\n  electron-osx-sign Signing... /Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/voltra Helper EH.app +518ms\n  electron-osx-sign Signing... /Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/voltra Helper NP.app/Contents/MacOS/voltra Helper NP +531ms\n  electron-osx-sign Signing... /Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/voltra Helper NP.app +496ms\n  electron-osx-sign Signing... /Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/voltra Helper.app/Contents/MacOS/voltra Helper +552ms\n  electron-osx-sign Signing... /Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/voltra Helper.app +470ms\n  electron-osx-sign Signing... /Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/MacOS/voltra +579ms\n  electron-osx-sign Signing... /Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Resources/app/node_modules/leveldown/build/Release/leveldown.node +1s\n  electron-osx-sign Signing... /Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Resources/app/node_modules/taglib2/build/Release/taglib2.node +538ms\n  electron-osx-sign Signing... /Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app +506ms\n  electron-osx-sign Verifying code sign... +1s\n  electron-osx-sign Verification displayed below:\n--prepared:/Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/Squirrel.framework/Versions/Current/.\n--prepared:/Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/Mantle.framework/Versions/Current/.\n--validated:/Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/Mantle.framework/Versions/Current/.\n--validated:/Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/Squirrel.framework/Versions/Current/.\n--prepared:/Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/ReactiveCocoa.framework/Versions/Current/.\n--validated:/Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/ReactiveCocoa.framework/Versions/Current/.\n--prepared:/Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/voltra Helper NP.app\n--validated:/Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/voltra Helper NP.app\n--prepared:/Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/voltra Helper EH.app\n--validated:/Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/voltra Helper EH.app\n--prepared:/Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/voltra Helper.app\n--validated:/Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/voltra Helper.app\n--prepared:/Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/Electron Framework.framework/Versions/Current/.\n--validated:/Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/Electron Framework.framework/Versions/Current/.\n/Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app: valid on disk\n/Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app: satisfies its Designated Requirement\n +887ms\n  electron-osx-sign Application signed. +1ms\nApp Signed OK\nCreating Image...\n1/20 Looking for target...OK\n2/20 Reading JSON Specification...SKIP\n3/20 Parsing JSON Specification...SKIP\n4/20 Validating JSON Specification...OK\n5/20 Looking for files...OK\n6/20 Calculating size of image...OK\n7/20 Creating temporary image...OK\n8/20 Mounting temporary image...OK\n9/20 Making hidden background folder...OK\n10/20 Copying background...OK\n11/20 Reading background dimensions...OK\n12/20 Copying icon...OK\n13/20 Setting icon...OK\n14/20 Creating links...OK\n15/20 Copying files...          OK\n16/20 Making all the visuals...OK\n17/20 Blessing image...OK\n18/20 Unmounting temporary image...OK\n19/20 Finalizing image...OK\n20/20 Removing temporary image...OK\nFinished OK\nApp   => /Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app\nImage => /Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.dmg\n. Hey @sethlu! Ok, here is the output from that command (the .app was produced by electron-packager 7.1.0).\n$codesign --verbose=4 --deep --strict ./pkg/1.10.2/voltra-darwin-x64/voltra.app\n--prepared:/Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/Mantle.framework/Versions/Current/.\n--prepared:/Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/Squirrel.framework/Versions/Current/.\n--validated:/Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/Mantle.framework/Versions/Current/.\n--validated:/Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/Squirrel.framework/Versions/Current/.\n--prepared:/Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/ReactiveCocoa.framework/Versions/Current/.\n--prepared:/Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/voltra Helper EH.app\n--validated:/Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/voltra Helper EH.app\n--prepared:/Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/voltra Helper NP.app\n--validated:/Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/ReactiveCocoa.framework/Versions/Current/.\n--validated:/Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/voltra Helper NP.app\n--prepared:/Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/voltra Helper.app\n--validated:/Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/voltra Helper.app\n--prepared:/Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/Electron Framework.framework/Versions/Current/.\n--validated:/Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/Frameworks/Electron Framework.framework/Versions/Current/.\n./pkg/1.10.2/voltra-darwin-x64/voltra.app: valid on disk\n./pkg/1.10.2/voltra-darwin-x64/voltra.app: satisfies its Designated Requirement\n. I suspected that perhaps my cert was corrupted or something and I already tried removing them and re-adding them, i know that keychain isn't the most reliable app. Here is the output...\nExecutable=/Users/paolofragomeni/workroot/voltraco/voltra/pkg/1.10.2/voltra-darwin-x64/voltra.app/Contents/MacOS/voltra\nIdentifier=com.electron.voltra\nFormat=app bundle with Mach-O thin (x86_64)\nCodeDirectory v=20200 size=275 flags=0x0(none) hashes=3+3 location=embedded\nHash type=sha256 size=32\nCandidateCDHash sha1=bb0f59...\nCandidateCDHash sha256=20e3bd...\nHash choices=sha1,sha256\nCDHash=20e3bd...\nSignature size=8917\nAuthority=Developer ID Application: Paulo Fragomeni (3CPSKTF8W5)\nAuthority=Developer ID Certification Authority\nAuthority=Apple Root CA\nTimestamp=Aug 22, 2016, 6:05:11 PM\nInfo.plist entries=21\nTeamIdentifier=3CPSKTF8W5\nSealed Resources version=2 rules=12 files=2638\nInternal requirements count=1 size=180\n. @sethlu here's why it's absolutely not an issue for apple support: I'm using electron-osx-sign (0.4.0-beta4) after i package everything with electron-packager (7.1.0) and it works just fine. There are no complaints about the package not being signed.\n. @malept looks electron-packager since 7.1.0, is using electron-osx-sign version ^0.3.0 (link to code). It's using that version currently (link to code). And the version that works for me uses that version too. So I'm guessing that how we're using electron-osx-sign in electron-packager has changed somehow.\n. Hmm, yeah thats interesting. when I use it separately, it works. right now this is the only way I can code sign my app.\n. ",
    "no-response[bot]": "Since the original issue reporter has not responded to the request for additional information in at least two weeks, it's assumed that they either found the answer in another manner or decided not to pursue this issue. If this is incorrect, they can respond with answers to the questions posed, and this issue can be reopened.\n. Since the original issue reporter has not responded to the request for additional information in about two weeks, it's assumed that they either found the answer in another manner or decided not to pursue this issue. If this is incorrect, they can respond with answers to the questions posed, and this issue can be reopened.\n. Since the original issue reporter has not responded to the request for additional information in about two weeks, it's assumed that they either found the answer in another manner or decided not to pursue this issue. If this is incorrect, they can respond with answers to the questions posed, and this issue can be reopened.\n. Since the original issue reporter has not responded to the request for additional information in about two weeks, it's assumed that they either found the answer in another manner or decided not to pursue this issue. If this is incorrect, they can respond with answers to the questions posed, and this issue can be reopened.\n. Since the original issue reporter has not responded to the request for additional information in about two weeks, it's assumed that they either found the answer in another manner or decided not to pursue this issue. If this is incorrect, they can respond with answers to the questions posed, and this issue can be reopened.\n. Since the original issue reporter has not responded to the request for additional information in about two weeks, it's assumed that they either found the answer in another manner or decided not to pursue this issue. If this is incorrect, they can respond with answers to the questions posed, and this issue can be reopened.\n. Since the original issue reporter has not responded to the request for additional information in about two weeks, it's assumed that they either found the answer in another manner or decided not to pursue this issue. If this is incorrect, they can respond with answers to the questions posed, and this issue can be reopened.\n. Since the original issue reporter has not responded to the request for additional information in about two weeks, it's assumed that they either found the answer in another manner or decided not to pursue this issue. If this is incorrect, they can respond with answers to the questions posed, and this issue can be reopened.\n. Since the original issue reporter has not responded to the request for additional information in about two weeks, it's assumed that they either found the answer in another manner or decided not to pursue this issue. If this is incorrect, they can respond with answers to the questions posed, and this issue can be reopened.\n. Since the original issue reporter has not responded to the request for additional information in about two weeks, it's assumed that they either found the answer in another manner or decided not to pursue this issue. If this is incorrect, they can respond with answers to the questions posed, and this issue can be reopened.\n. Since the original issue reporter has not responded to the request for additional information in about two weeks, it's assumed that they either found the answer in another manner or decided not to pursue this issue. If this is incorrect, they can respond with answers to the questions posed, and this issue can be reopened.\n. Since the original issue reporter has not responded to the request for additional information in about two weeks, it's assumed that they either found the answer in another manner or decided not to pursue this issue. If this is incorrect, they can respond with answers to the questions posed, and this issue can be reopened.\n. Since the original issue reporter has not responded to the request for additional information in about two weeks, it's assumed that they either found the answer in another manner or decided not to pursue this issue. If this is incorrect, they can respond with answers to the questions posed, and this issue can be reopened.\n. Since the original issue reporter has not responded to the request for additional information in about two weeks, it's assumed that they either found the answer in another manner or decided not to pursue this issue. If this is incorrect, they can respond with answers to the questions posed, and this issue can be reopened.\n. Since the original issue reporter has not responded to the request for additional information in about two weeks, it's assumed that they either found the answer in another manner or decided not to pursue this issue. If this is incorrect, they can respond with answers to the questions posed, and this issue can be reopened.\n. Since the original issue reporter has not responded to the request for additional information in about two weeks, it's assumed that they either found the answer in another manner or decided not to pursue this issue. If this is incorrect, they can respond with answers to the questions posed, and this issue can be reopened.\n. Since the original issue reporter has not responded to the request for additional information in about two weeks, it's assumed that they either found the answer in another manner or decided not to pursue this issue. If this is incorrect, they can respond with answers to the questions posed, and this issue can be reopened.\n. Since the original issue reporter has not responded to the request for additional information in about two weeks, it's assumed that they either found the answer in another manner or decided not to pursue this issue. If this is incorrect, they can respond with answers to the questions posed, and this issue can be reopened.\n. ",
    "bampakoa": "@babyChou What version of electron-prebuilt and electron-packager are you using?\n. @babyChou I had the same problem and I experimented by installing all versions of electron-packager after 7.4.0. After that, I gave one more try with 7.7.0 and it worked. I never figured out why it worked like that. I hope this helps.\n. ",
    "babyChou": "@bampakoa The version of electron-prebuilt is 1.3.3 and electron-packager 7.7.0\n. @malept \nI remove electron-prebuilt and run: SET DEBUG=electron-packager.\nThen I run: electron-packager . hello --platform=win32 --arch=x64 .\nThe following pictures are log. \n\nAfter this command I add --version : electron-packager . hello --platform=win32 --arch=x64 --version=1.3.3\n\nand just hang here \n. @malept \nI followed your instructions \ninstall electron locally and run SET DEBUG=electron-download,electron-packager,extract-zip\nIt still not working\n\nMaybe I set something wrong in this computer that I don't know.\nI would try another computer\n. @bampakoa \nThank you for your reply \n. @malept \nHi I try another computer and it work!!!\nthat  I use node version with v6.4.0\nthanks for your help~~~\n. ",
    "albertkim": "I had this issue just now, resolved by updating Node to the latest version. I believe I was on 6.3.x and the package step was hanging.. ",
    "matt-shine": "Just had this issue also, tried reinstalling node, different node versions, etc.\nFound it was getting stuck on fs.remove(tempBase, cb) task.\nDeleting ...\\AppData\\Local\\Temp\\electron-packager fixed it.\nEdit: Sorry - that actually got me far enough to see it getting stuck on 'npm prune --production' command, which led me to https://github.com/npm/npm/issues/17781.\nSo, for me, it was an issue with npm v5.3.0, downgrading to 5.2.0 seems to have fixed things for me.. ",
    "FelixRilling": "Thanks for the answer, I looked into the docs and adjusted my code. However, I'm still getting an error using \"1.3.4\" as version property, however only when building for windows.\nMy code now is:\n``` js\n\"use strict\";\nconst packager = require(\"electron-packager\");\nconst packageJson = require(\"./package.json\");\nconst options = {\n    \"name\": packageJson.name,\n    //\"app-version\": packageJson.version,\n    //\"build-version\": packageJson.version,\n    \"version\": \"1.3.4\",\n    \"dir\": \"./app\",\n    \"out\": \"./releases\",\n    \"all\": true,\n    //\"arch\": packageJson.build.arch,\n    //\"platform\": packageJson.build.platforms\n};\nconsole.log(options);\npackager(options, function(err, appPaths) {\n    if (err) {\n        throw err;\n    } else {\n        console.log(Built ${packageJson.name});\n    }\n});\n```\nWhich now outputs;\n``` shell\nPackaging app for platform linux ia32 using electron v1.3.4\nPackaging app for platform win32 ia32 using electron v1.3.4\nC:\\my\\path\\to\\app\\build.js:23\n        throw err;\n        ^\n Fatal error: Unable to parse version string\n```\nCould you help me with this?\n. Unless I'm missing something, the version of electron is set correctly in the package.json(which is in the same dir as the build.js)\nThe dependency section looks like this:\n``` json\n\"devDependencies\": {\n    \"babel-preset-es2016\": \"^6.11.3\",\n    \"electron-packager\": \"^7.6.0\",\n    \"gulp\": \"^3.9.1\",\n    \"gulp-babel\": \"^6.1.2\",\n    \"gulp-concat\": \"^2.6.0\",\n    \"gulp-connect\": \"^5.0.0\",\n    \"gulp-cssbeautify\": \"^0.1.3\",\n    \"gulp-filter\": \"^4.0.0\",\n    \"gulp-html-prettify\": \"0.0.1\",\n    \"gulp-pug\": \"^3.0.4\",\n    \"gulp-sass\": \"^2.3.2\",\n    \"gulp-task-loader\": \"^1.4.4\",\n    \"main-bower-files\": \"^2.13.1\"\n  },\n  \"dependencies\": {\n    \"electron\": \"1.3.4\",\n    \"electron-prebuilt\": \"1.3.4\"\n  }\n```\nI'm very sorry If I'm just being stupid, but I can't seem to figure it out.\n. Oh!\nThat was the problem, I had \"v1.7.2\" as version key, I didnt know that the electron builder takes this version too! after switching to \"1.7.2\" It worked. Thanks!\n. ",
    "Gitelaus": "Looks like electron just pulled https://github.com/electron/electron/pull/6986 so I assume this is now plausibly unblocked?\n. @malept ah okay, my apologies! I think I just got a little too excited and jumped the gun. I'll take the chance to say thanks for all the work you've put in thus far. \n. ",
    "Ir1d": "Hi. Thanks for replying.\nI can only describe what happened but I cannot run any command at the moment coz I just don't have access to a computer. QAQ\nI was running 'electron-packager ./ --platform=win32 --arch=x64' (something like that for Windows 10 packaging.... Not remembering quite clear.)\nAfter running I get the message that cannot get the version of the electron in the package.json\nSo I dig into the package.json and found that the proj included electron instead of electron-prebuilt.\nAfter I changed electron to electron-prebuilt, the package process goes as expected without errors.\nSo I guess the packager was checking electron-prebuilt but as said in the readme this name is deprecated.\nHope it helps.\n. Hmm, the latest commit was 2176894a5be5da17a362bf3f20678641a78f4b69.... Indeed an old version.\nConsole ouput with debug on.\nUnable to determine application name or Electron version. Please specify an application name and Electron version.\nCannot find module 'package.json' from '/home/ubuntu'(Properties not found yet: dependencies.electron-prebuilt,devDependencies.electron-prebuilt)\nUpgrading to @7.7.0.... Then I got this again.\nIf changing electron\": \"^1.3.4\" to \"electron-prebuilt\": \"^1.3.4\", it works.\nrepo link: https://github.com/Moeditor/Moeditor\nBut it seems that other people who package this repo aren't facing this strange thing..... Wonder why,\n. Still \n\nUnable to determine application name or Electron version. Please specify an application name and Electron version.\nCannot find module 'package.json' from '/home/ubuntu'(Properties not found yet: dependencies.electron-prebuilt,devDependencies.electron-prebuilt)\n\nI can share the c9.io environment if you offer an account.\n. :+1:\nFinally I got it from npm list -g electron-packager.\nOnly from this I learned that my version in -g is wrong( it was 7.1.0).\n:sob: Hope it will be easier to check the version in the future.(such as -v or -V)\nThank you for your help in so many days. I'm closing this issue now.\n:tada: \nedit:\nOh and btw, the output of the first is 7.7.0 and the second is 7.1.0\n. ",
    "musician2000": "Hi, thanks for the quick feedback, I just tried that with the extra flags in it, still same issue, works fine when I do npm start, but not using electron-packager and running the app?? really odd.\n. ok using the latest quick start and copying my file across I have a new issue. It now says when I load it up it cannot find the xxx.py file in the console. However when I run it using npm build it works fine. I am doing the following to load execute the python\nexec('python test1232.py -p ' + ClientName)\nhave also tried\nexec('python ./test1232.py -p ' + ClientName)\nI had a look inside the app that the electron-packager made, my .py file is in there. When calling a file that is in a built app using electron packager do I need to specify the path differently somehow? \nAs I said this code  exec('python test1232.py -p ' + ClientName) works fine when doing npm start.\n. What should the path be to pick this up from the inside the app? in the un-packaged app its in the root folder same level as index.html, main.js etc.. is there a better way to call python scripts?\n. That would mean I need one version of code for electron packager with that path in and another for running it under npm start, that's not great right? But will try out what ur suggesting if that's the final answer.\n. ",
    "Shinrai": "Disregard the issue. While it would be nice to have the version of the app when you hover over the icon. The proper use is to set it to the product version and not the file version. Electron-packager is working as it should. Windows just displays the File version over the Product version.\n. ",
    "raultrysw": "Well, i wanted to know what about if I get available my program to export the data to a json file where the information is saved and the other binary retrive that information from this file?. Is it good or is it there something better?\n. ",
    "raybooysen": "I'm specifying it as comma separated because the documentation says it supported it.  \nSanitized -> I mean simple string trimming\nTests -> Definitely\n. Just to be complete, here is the snippet from the docs: \nArbitrary combinations of individual architectures are also supported via a comma-delimited string or array of strings.\n. Sure, sounds sensible\n. ",
    "AndyMoreland": "Whoops. I have no idea how this got opened. Feel free to close it!\n. ",
    "chaegumi": "I have the same question.\n. Here is my idea.\n``` javascript\nconst path = require('path')\nconst fs = require('fs')\nconst dbPath2 = path.resolve(__dirname, 'data/test.db.sqlite')\nconst dbPath1 = path.resolve(__dirname, '../app.asar.unpacked/data/test.db.sqlite')\n// console.log(dbPath1);\nif(fs.existsSync(dbPath1)){\n    // console.log(dbPath1);\n    var sqlite3 = require('sqlite3').verbose();\n    var db = new sqlite3.Database(dbPath1, sqlite3.OPEN_READWRITE); \n}else{\n    if(fs.existsSync(dbPath2)){\n        // console.log(dbPath2);\n        var sqlite3 = require('sqlite3').verbose();\n        var db = new sqlite3.Database(dbPath2, sqlite3.OPEN_READWRITE); \n    }else{\n        console.log('do not exists database file');\n    }     \n}\n``\n. Not long ago, i run commandelectron-packager ./ --all,everything work fine to me.\nBut today when i runelectron-packager ./ --all` command,it doesn't work. \n\nBefore my package.json file content like below:\n``` javascript\n{\n  \"name\": \"electron-quick-start\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A minimal Electron application\",\n  \"main\": \"main.js\",\n  \"scripts\": {\n    \"start\": \"electron .\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/electron/electron-quick-start.git\"\n  },\n  \"keywords\": [\n    \"Electron\",\n    \"quick\",\n    \"start\",\n    \"tutorial\"\n  ],\n  \"author\": \"GitHub\",\n  \"license\": \"CC0-1.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/electron/electron-quick-start/issues\"\n  },\n  \"homepage\": \"https://github.com/electron/electron-quick-start#readme\",\n  \"devDependencies\": {\n    \"electron-prebuilt\": \"^1.2.0\"\n  },\n  \"dependencies\": {\n    \"express\": \"^4.10.2\",\n    \"node-notifier\": \"^4.6.1\",\n    \"reconnectingwebsocket\": \"^1.0.0\",\n    \"socket.io\": \"^1.4.8\"\n  }\n}\n```\nI found this commit https://github.com/electron/electron-quick-start/commit/35a725f479f28623746054be7593bfa1bd9f7d35.\nSo i change my package.json like this:\n``` javascript\n{\n  \"name\": \"electron-quick-start\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A minimal Electron application\",\n  \"main\": \"main.js\",\n  \"scripts\": {\n    \"start\": \"electron .\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/electron/electron-quick-start.git\"\n  },\n  \"keywords\": [\n    \"Electron\",\n    \"quick\",\n    \"start\",\n    \"tutorial\"\n  ],\n  \"author\": \"GitHub\",\n  \"license\": \"CC0-1.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/electron/electron-quick-start/issues\"\n  },\n  \"homepage\": \"https://github.com/electron/electron-quick-start#readme\",\n  \"devDependencies\": {\n    \"electron\": \"^1.3.4\"\n  },\n  \"dependencies\": {\n    \"express\": \"^4.10.2\",\n    \"node-notifier\": \"^4.6.1\",\n    \"reconnectingwebsocket\": \"^1.0.0\",\n    \"socket.io\": \"^1.4.8\"\n  }\n}\n```\nIt work now.\n. ",
    "TracyGJG": "\n. All working following the good advice received. \nThe GitHub repo https://github.com/TracyGJG/ElectronWindowFault has now been deleted.\n. ",
    "maciakt": "this same electron-quick-start demo does get packaged successfully on a win7 machine\n. @malept I ran npm prune --production on its own and did indeed get the same error related to \" error EINVAL: invalid argument, read\".  I will look into why npm prune is behaving badly.  Thank you for the insight and direction on why I can't get this working on my windows 10 machine.\n. UPDATE: I re-installed node.js on my win10 machine, re-ran the packager and it now works like it did on the other win7 machine I was using.  I was using NVM before to manage a node 4.x and 6.x setup and that might be what was causing the problem since C:\\Program Files\\nodejs was a symlink (via nvm) and my guess is that was what was causing the npm read error.\n. ",
    "rkpatel33": "I am having  the same issue. The app runs fine when building for development but the path seems to fail when built with electron-packager.  Here is my file structure:\n\nAnd here is the way I create the path to my html file from the main render process:\n\nThe full path build by the path.join function is:\nfile:///Users/rishi/Projects/albert/albert-support-desktop/static/html/main-window.html\nAnd this is what settings.project.root returns:\nfile:///Users/rishi/Projects/albert/albert-support-desktop\nIs there a correct way to build the path to project files?\n. settings.js exported a dict that looks like the below. I used root: path.resolve('./') with the single dot even though this file is one dir deep bc when running from npm run it seemed to resolve to where the npm command was run from, i.e. project root dir.  I guess this was causing issues in the build bc when I changed it to root: path.join(__dirname, '../'), everything worked fine.\n\nMore generally, I was wondering if there is a solution/setup where I can source everything  from paths relative to the project root dir (like require statements as well as path.join()'s) so that you don't have to worry about keeping paths  up to date if you just move a file to a diff directory. If I set up a global var and use that in a path join in a require statement like this:\nrequire(path.join(global.PROJECT_ROOT + '/' + rootPath))\nIt breaks my Eslint and VS Code IntelliSense, I guess expectedly. In a Webpack setting this is possible but just not sure if it is in an Electron project setting.\nThx.. ",
    "ragFOEX": "Output with DEBUG=* is exactly the same as above.\nAfter some trial and error I found the solution: instead of using electron-prebuilt in dependencies of my package.json I switched now to using electron and that worked as expected.\nSeems that getPackageInfo gets into some kind of endless loop when looking for dependencies.electron before falling back to look for dependencies.electron-prebuilt. See https://github.com/electron-userland/electron-packager/blob/master/index.js#L32\nMy blocking point is resolved (or rather work arounded).\n. They've tried 2 PC's. Both are standard Desktop systems, one Win7, the other Win8. Location was the C drive, so normal mounting. No blanks in directory names and so on (as can be seen in the debug output on top)\n. ",
    "sqwk": "sqwk$ electron-packager dist --darwin --out=dist --overwrite\n  electron-packager Electron Packager 8.0.0 +0ms\n  electron-packager Node v6.5.0 +3ms\n  electron-packager Host Operating system: darwin (x64) +1ms\n  electron-packager Packager Options: {\"_\":[\"dist\"],\"all\":false,\"deref-symlinks\":true,\"download\":{\"strictSSL\":true},\"overwrite\":true,\"prune\":true,\"darwin\":true,\"out\":\"dist\",\"dir\":\"dist\",\"protocols\":[]} +0ms\n  electron-packager Target Platforms: darwin +1ms\n  electron-packager Target Architectures: x64 +0ms\n  electron-packager Inferring application name from productName or name in package.json +18ms\n  electron-packager Inferring app-version from version in package.json +0ms\n  electron-packager Inferring target Electron version from electron-prebuilt dependency or devDependency in package.json +2ms\n  electron-packager Application name: test +0ms\n  electron-packager Target Electron version: 1.4.1 +0ms\n  electron-packager Ignored path regular expressions: +0ms [ '/node_modules/electron($|/)',\n      '/node_modules/electron-prebuilt($|/)',\n      '/node_modules/electron-packager($|/)',\n      '/\\\\.git($|/)',\n      '/node_modules/\\\\.bin($|/)' ]\n  electron-packager Downloading Electron with options {\"strictSSL\":true,\"platform\":\"darwin\",\"arch\":\"x64\",\"version\":\"1.4.1\"} +373ms\nPackaging app for platform darwin x64 using electron v1.4.1\n  electron-packager Creating /var/folders/tv/mlhq8zrd2wd4dt2dn13hmx440000gn/T/electron-packager/darwin-x64-template +6ms\n  electron-packager Extracting /Users/sqwk/.electron/electron-v1.4.1-darwin-x64.zip to /var/folders/tv/mlhq8zrd2wd4dt2dn13hmx440000gn/T/electron-packager/darwin-x64-template +1ms\n  electron-packager Initializing app in /var/folders/tv/mlhq8zrd2wd4dt2dn13hmx440000gn/T/electron-packager/darwin-x64/test-darwin-x64 from /var/folders/tv/mlhq8zrd2wd4dt2dn13hmx440000gn/T/electron-packager/darwin-x64-template template +2s\n  electron-packager Ignored paths based on the out param: +3ms [ '/Users/sqwk/Sites/test/dist' ]\n  electron-packager Running npm prune --production +6ms\nspawn /bin/sh ENOENT\n. ",
    "oskarkrawczyk": "Solved by updating to the newest version of electron-packager.\n. ",
    "transfluxus": "I have that issue on OSX.\nafter\nnpm install electron-packager -g\nand\nelectron-packager . coolapp --platform=win32\nor \nelectron-packager . coolapp -all\nI get that. ",
    "voltrevo": "@malept I got this error when I moved electron into optional dependencies. Could electron-packager be updated to recognise it there? Alternatively, is there a way to specify the electron version as the error message suggests? (I tried --version 1.4.15 and --electron-version 1.4.15 to no avail... if there isn't a way to do it, maybe at least that error message should be changed?). @malept \n\nwhy are you putting Electron into optionalDependencies?\n\nbecause producing an electron app is a side-thing for the project - it mainly just runs in the browser. I had problems with the electron stuff installing on Travis for the integration tests because it's linux. It may have just been the Mac app bundler package that Travis (understandably) didn't like, but to fix it I lumped all the electron related dependencies together and just made them optional.\n\nRunning electron-packager . --electron-version=1.4.15 when electron is not in package.json works for me.\n\nAhh --electron-version 1.4.15 works for me too. Not sure what I did differently before. Thanks!. ",
    "Sam747": "->   electron-packager /home/sam/Desktop/ed v5 --platform=linux --arch=x64 --asar=true\nBoth machines are 64 arch\n->   Uncompressed form sharing on Network path\n-> When I try to open app on another machine this error pop up\nCould not display \u201cvplayer\u201d.\nThere is no application installed for \u201cexecutable\u201d files. Do you want to search for an application to open this file\nWorks perfectly on the same machine\n. ",
    "michaelsogos": "Hi Sam747,\nDid you find the way to resolve this issue?. ",
    "eljefedelrodeodeljefe": "I believe landing this is necessary to fix #513\n. Also highly doubtful that this module should be used at all.\n. So using this is the higher-level of it's upstream dependencies which are already high level of try-catch-edJSON.parse(fs.readFile('package.json')) or require('package.json'). Either use its various upstream deps or those of the npm guys or just the above. This would decrease surface area of bugs. \n. To be more precise, it does this at least when the package.json is not configured right, e.g. wrong or missing version field\n. ",
    "ljoli": "Ok, I see my error !! \nBUT When I wrote correctly that does not work : \nnpm ERR! Linux 4.8.0-22-generic\nnpm ERR! argv \"/usr/bin/nodejs\" \"/usr/bin/npm\" \"run\" \"build\"\nnpm ERR! node v6.8.1\nnpm ERR! npm  v3.10.8\nnpm ERR! code ELIFECYCLE\nnpm ERR! electron-quick-start@1.0.0 build: electron-packager . --platfrom=linux --arch=x64 MyApp\nnpm ERR! Exit status 1\nnpm ERR! \nnpm ERR! Failed at the electron-quick-start@1.0.0 build script 'electron-packager . --platfrom=linux --arch=x64 MyApp'.\nnpm ERR! Make sure you have the latest version of node.js and npm installed.\nnpm ERR! If you do, this is most likely a problem with the electron-quick-start package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     electron-packager . --platfrom=linux --arch=x64 MyApp\nnpm ERR! You can get information on how to open an issue for this project with:\nnpm ERR!     npm bugs electron-quick-start\nnpm ERR! Or if that isn't available, you can get their info via:\nnpm ERR!     npm owner ls electron-quick-start\nnpm ERR! There is likely additional logging output above.\n. yes @malept :  thas is right. \nI copy the good line now, and I have an error too. \nron-packager/linux-x64/MyApp-linux-x64/resources/app/electron-packager/linux-x64/MyApp-linux-x64/resources/app/electron-packager/linux-x64/MyApp-linux-x64/resources/app/electron-packager/linux-x64/MyApp-linux-x64/resources/app/electron-packager/linux-x64/MyApp-linux-x64/resources/app/electron-packager/linux-x64/MyApp-linux-x64/resources/app/electron-packager/linux-x64/MyApp-linux-x64/resources/app/electron-packager/linux-x64/MyApp-linux-x64/resources/app/node_modules/generate-object-property/index.js' },\n  ... 1840 more items ] undefined\nnpm ERR! Linux 4.8.0-22-generic\nnpm ERR! argv \"/usr/bin/nodejs\" \"/usr/bin/npm\" \"run\" \"build\"\nnpm ERR! node v6.8.1\nnpm ERR! npm  v3.10.8\nnpm ERR! code ELIFECYCLE\nnpm ERR! electron-quick-start@1.0.0 build: electron-packager .  --platform=linux --arch=x64 MyApp\nnpm ERR! Exit status 1\nnpm ERR! \nnpm ERR! Failed at the electron-quick-start@1.0.0 build script 'electron-packager .  --platform=linux --arch=x64 MyApp'.\nnpm ERR! Make sure you have the latest version of node.js and npm installed.\nnpm ERR! If you do, this is most likely a problem with the electron-quick-start package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     electron-packager .  --platform=linux --arch=x64 MyApp\nnpm ERR! You can get information on how to open an issue for this project with:\nnpm ERR!     npm bugs electron-quick-start\nnpm ERR! Or if that isn't available, you can get their info via:\nnpm ERR!     npm owner ls electron-quick-start\nnpm ERR! There is likely additional logging output above.\n. yes @malept : you are right, my node js is above 4.0\n. OK so, I do the output command : \nelectron-packager . --platform=linux --arch=x64 MyAp\nAnd at the end : \n\u279c  electron-quick-start git:(master) \u2717 tree -L 2  /tmp/electron-packager/linux-x64\n/tmp/electron-packager/linux-x64\n\u2514\u2500\u2500 MyApp-linux-x64\n    \u251c\u2500\u2500 blink_image_resources_200_percent.pak\n    \u251c\u2500\u2500 content_resources_200_percent.pak\n    \u251c\u2500\u2500 content_shell.pak\n    \u251c\u2500\u2500 electron\n    \u251c\u2500\u2500 icudtl.dat\n    \u251c\u2500\u2500 libffmpeg.so\n    \u251c\u2500\u2500 libnode.so\n    \u251c\u2500\u2500 LICENSE\n    \u251c\u2500\u2500 LICENSES.chromium.html\n    \u251c\u2500\u2500 locales\n    \u251c\u2500\u2500 natives_blob.bin\n    \u251c\u2500\u2500 resources\n    \u251c\u2500\u2500 snapshot_blob.bin\n    \u251c\u2500\u2500 ui_resources_200_percent.pak\n    \u251c\u2500\u2500 version\n    \u2514\u2500\u2500 views_resources_200_percent.pak\n3 directories, 14 files\nis it normal to find my application in  TMP directory ?\nWhy we can't use in script mode ?\n. Yes , like i said before i use the command : \nelectron-packager . --platform=linux --arch=x64 MyApp  \n@malept : Ok, so it's better to debug with output command. \nNo, I have no error with the above command above that is strange \n. I put all log in the attached file  output.txt\noutput.txt\n. OK , I delete all MyApp-linux-x64 . And now i have an trace like : \n\u279c  electron-quick-start git:(master) \u2717 DEBUG=electron-packager electron-packager . --platform=linux --arch=x64 MyApp       \nelectron-packager Electron Packager 8.1.0 +0ms\n  electron-packager Node v6.8.1 +3ms\n  electron-packager Host Operating system: linux (x64) +1ms\n  electron-packager Packager Options: {\"_\":[\".\",\"MyApp\"],\"all\":false,\"deref-symlinks\":true,\"download\":{\"strictSSL\":true},\"overwrite\":false,\"prune\":true,\"platform\":\"linux\",\"arch\":\"x64\",\"dir\":\".\",\"name\":\"MyApp\",\"protocols\":[]} +0ms\n  electron-packager Target Platforms: linux +1ms\n  electron-packager Target Architectures: x64 +0ms\n  electron-packager Inferring app-version from version in package.json +7ms\n  electron-packager Inferring target Electron version from electron dependency or devDependency in package.json +11ms\n  electron-packager Application name: MyApp +1ms\n  electron-packager Target Electron version: 1.4.3 +0ms\n  electron-packager Ignored path regular expressions: +0ms [ '/node_modules/electron($|/)',\n  '/node_modules/electron-prebuilt($|/)',\n  '/node_modules/electron-packager($|/)',\n  '/.git($|/)',\n  '/node_modules/.bin($|/)',\n  '.o(bj)?$' ]\n  electron-packager Downloading Electron with options {\"strictSSL\":true,\"platform\":\"linux\",\"arch\":\"x64\",\"version\":\"1.4.3\"} +3m\nPackaging app for platform linux x64 using electron v1.4.3\n  electron-packager Creating /tmp/electron-packager/linux-x64-template +311ms\n  electron-packager Extracting /root/.electron/electron-v1.4.3-linux-x64.zip to /tmp/electron-packager/linux-x64-template +1ms\n  electron-packager Initializing app in /tmp/electron-packager/linux-x64/MyApp-linux-x64 from /tmp/electron-packager/linux-x64-template template +2s\n  electron-packager Ignored paths based on the out param: +2ms [ '/home/loni/Documents/test_electron/electron-quick-start/MyApp-darwin-ia32',\n  '/home/loni/Documents/test_electron/electron-quick-start/MyApp-darwin-x64',\n  '/home/loni/Documents/test_electron/electron-quick-start/MyApp-darwin-armv7l',\n  '/home/loni/Documents/test_electron/electron-quick-start/MyApp-linux-ia32',\n  '/home/loni/Documents/test_electron/electron-quick-start/MyApp-linux-x64',\n  '/home/loni/Documents/test_electron/electron-quick-start/MyApp-linux-armv7l',\n  '/home/loni/Documents/test_electron/electron-quick-start/MyApp-mas-ia32',\n  '/home/loni/Documents/test_electron/electron-quick-start/MyApp-mas-x64',\n  '/home/loni/Documents/test_electron/electron-quick-start/MyApp-mas-armv7l',\n  '/home/loni/Documents/test_electron/electron-quick-start/MyApp-win32-ia32',\n  '/home/loni/Documents/test_electron/electron-quick-start/MyApp-win32-x64',\n  '/home/loni/Documents/test_electron/electron-quick-start/MyApp-win32-armv7l' ]\n  electron-packager Running npm prune --production +1s\n  electron-packager Renaming electron to MyApp in /tmp/electron-packager/linux-x64/MyApp-linux-x64 +3s\n  electron-packager Moving /tmp/electron-packager/linux-x64/MyApp-linux-x64 to /home/loni/Documents/test_electron/electron-quick-start/MyApp-linux-x64 +1ms\nWrote new app to /home/loni/Documents/test_electron/electron-quick-start/MyApp-linux-x64\n\u279c  electron-quick-start git:(master) \u2717 ls\nindex.html  LICENSE.md  main.js  MyApp-linux-x64  node_modules  npm-debug.log  out  package.json  README.md  renderer.js\n. ",
    "XaBerr": "In electron-quick-start seems work...\nI've done (win7 x64)\n- comand stuff:\ngit clone https://github.com/electron/electron-quick-start\ncd electron-quick-start\nnpm install && npm start\nnpm install lokijs --save\nnpm install electron-packager --save-dev\n- add to my main.js\n  const loki = require('lokijs')\n- add to my package.json\n  \"compile\": \"electron-packager . e-q-s --out=releases/ --platform=win32 --arch=ia32\"\n- run in cmd:\n  npm run compile\n- I try app with double click and it work...\n  Now I don't know why quick-start works and my app not...\n. ah nailed!\nThe problem occurs when I move my sources in a build/electron type path and build/ I post a config.json like the following just for run electron build/. Now the problem is: how I solve this?\n{\n  \"name\"    : \"lightRoom\",\n  \"version\" : \"0.1.0\",\n  \"main\"    : \"./electron/main.js\"\n}\n. I had two, one real in my root folder, the second was a fake just to compile (in build/). Now I'm scerando to change the code so keep only the real!\n. Solved, just keep main package.json and change its main attribute!\n. ",
    "wagerfield": "@malept I will get my head into the code and submit a PR in due course.\nRegarding the logging, sure\u2014I'll create another issue for that.\n. ",
    "njbmartin": "As mentioned in #853, the above suggests an EventEmitter and not a lifecycle hook as intended.\nThe solution could be to create a single generic hook, similar to afterPrune or afterCopy. This can be called at each step of the process, and exposes the following events (as an example):\ninitialized\npreCopy\npostCopy\npreModifyApp\npostModifyApp\npreAsar\npostAsar\npreSigned\nso then the config could be:\n```js\nprocessHook = (hookData) => {\nconst { event, buildPath, electronVersion, platform, arch, cb } = hookData;\n  switch(event) {\n    case 'postCopy': \n      return postCopyPromise(buildPath).then(() => cb());\n    case 'preAsar': \n      return preAsarPromise(buildPath).then(() => cb());\n    default:\n      return cb();\n});\nconst config = {\n  dir: '.',\n  name: 'test',\n  hooks: [(event) => processHook(event)]\n}\n```\nI appreciate the code above may not function as intended, but you get the idea.. @malept #509 doesn't resolve the issue raise here. For one, start / complete are unnecessary as this is inferred just by it's execution, and what is suggested for progress is not an event hook, but an EventEmitter which would not allow for additional code execution between steps. The progress percentage would also be fairly arbitrary.\nEdit: I'll add a comment to that issue.. ",
    "kwolfy": "@malept Thank you, The doc is right\n. ",
    "enlight": "What OS is this on?\n. ",
    "Tribex": "I'd run the app from the terminal, say \nLinux: ./myApp\nWindows: myApp.exe\nmacOS [Installed]? (I think): open -a myApp\nThat should give you access to the main process logs.\n. ",
    "yourfavorite": "Thanks @tribex. I am on OSX and tried your open -a myApp in terminal but it just launches the app and then nothing.\n. @MarshallOfSound Thanks!\nopen myApp.app/Contents/MacOS/myApp (without the -a flag) did the trick for me!\n. ",
    "TooBug": "Yes, cnpm do has the same prune command. How can I force electron-packager to use that command?\n. ",
    "barbalex": "I tried applying these changes. With derefSymlinks false or true. But the error remains :-(\nInterestingly I get a completely different output when using DEBUG=electron-packager on my Windows machine than on macOS: https://gist.github.com/barbalex/43100d47b5438549a3754006e86f09e5\n. Nope: The output in the console when using DEBUG=electron-packager is similar on macOS and Windows.\nWhat is different is the output when not using DEBUG=electron-packager:\nWindows: \n```\nPS C:\\Users\\alex\\kapla2> npm run package\n\nKapla@1.0.0 package C:\\Users\\alex\\kapla2\ncross-env NODE_ENV=production node -r babel-register -r babel-polyfill package.js\n\nstart pack...\nPackaging app for platform win32 x64 using electron v1.4.4\nwin32-x64 finished!\n```\nmacOS:\nhttps://gist.github.com/barbalex/88d03ac08246102370d152cba69bacdd\nrepeated probably a few hundred times.\nBut the error in the console when starting the app is the same on Windows and macOS.\n. > What console output immediately precedes the start of that?\nthis here: https://gist.github.com/barbalex/51164bf76250a6283d3dd5c9a2b4f624\n. You seem to have hit the mark: After removing .concat(depsExternal) my app starts without missing lodash. And it shows the first screen.\nBut I get this new error:\njquery.js:3846jQuery.Deferred exception: Cannot read property 'componentWillUpdate' of null TypeError: Cannot read property 'componentWillUpdate' of null\n    at _render (file:///C:/Users/alex/kapla2/release/win32-x64/Kapla-win32-x64/resources/app/dist/bundle.js:48573:60)\n    at emit (file:///C:/Users/alex/kapla2/release/win32-x64/Kapla-win32-x64/resources/app/dist/bundle.js:44082:45)\n    at _$init (file:///C:/Users/alex/kapla2/release/win32-x64/Kapla-win32-x64/resources/app/dist/bundle.js:47217:19)\n    at callDownwards (file:///C:/Users/alex/kapla2/release/win32-x64/Kapla-win32-x64/resources/app/dist/bundle.js:46627:26)\n    at callDownwards (file:///C:/Users/alex/kapla2/release/win32-x64/Kapla-win32-x64/resources/app/dist/bundle.js:46630:28)\n    at callDownwards (file:///C:/Users/alex/kapla2/release/win32-x64/Kapla-win32-x64/resources/app/dist/bundle.js:46630:28)\n    at callDownwards (file:///C:/Users/alex/kapla2/release/win32-x64/Kapla-win32-x64/resources/app/dist/bundle.js:46630:28)\n    at _create (file:///C:/Users/alex/kapla2/release/win32-x64/Kapla-win32-x64/resources/app/dist/bundle.js:45183:14)\n    at init (file:///C:/Users/alex/kapla2/release/win32-x64/Kapla-win32-x64/resources/app/dist/bundle.js:44539:9)\n    at mightThrow (file:///C:/Users/alex/kapla2/release/win32-x64/Kapla-win32-x64/resources/app/dist/bundle.js:31048:30)\n    at process (file:///C:/Users/alex/kapla2/release/win32-x64/Kapla-win32-x64/resources/app/dist/bundle.js:31116:13) undefined\ngoldenlayout.js:582Uncaught Error: Can't create config, layout not yet initialisedtoConfig @ goldenlayout.js:582GeschaefteLayout._this.saveGeschaefteState @ (index):76(anonymous function) @ (index):57emit @ goldenlayout.js:254_propagateEventToLayoutManager @ goldenlayout.js:3347(anonymous function) @ goldenlayout.js:79\ngoldenlayout.js:4745Uncaught TypeError: Cannot read property 'componentWillUpdate' of null_render @ goldenlayout.js:4745emit @ goldenlayout.js:254_$init @ goldenlayout.js:3389callDownwards @ goldenlayout.js:2799callDownwards @ goldenlayout.js:2802callDownwards @ goldenlayout.js:2802callDownwards @ goldenlayout.js:2802_create @ goldenlayout.js:1355init @ goldenlayout.js:711mightThrow @ jquery.js:3570process @ jquery.js:3638\nAnd after that no new components show any more.\n. > Is that with DEBUG=electron-packager set?\nNo. With it, the output looks the same as this here from the Windows machine: https://gist.github.com/barbalex/43100d47b5438549a3754006e86f09e5\n. > Unrelated: why are you running it as root?\nHm. How do you see that? On Windows my Account has administrator rights. Could that be the reason?\n. Sorry for being a bit of a noob: Having removed .concat(depsExternal), could it be that some dependencies like goldenlayout have not been correctly built?\n. ...or are these only the dependencies that I've set as external in webpack.config.base.js ?\n. Oh, the sudo for packaging: That is because otherwise I get a permission denied error on my mac.\nWell, I guess I will try to find the remaining problem in my apps code now. I am just a little hesitant, because this error does not appear in dev mode.\nTHANKS A LOT FOR GREAT HELP!!!\n. Oh, I forgot: You mentioned it was a problem of the boilerplate. And the lines I removed to solve the problem do come from it. Shall I create an issue at https://github.com/chentsulin/electron-react-boilerplate?\n. ",
    "soredake": "yarn prune has no --production option\nyarn install has no --no-bin-links option, so just symlink is not the solution (while sed -i /npm --option/yarn --option, but it is not so convenient)\n. https://github.com/yarnpkg/yarn/issues/696#issuecomment-253031239\n. https://github.com/yarnpkg/yarn/pull/1651\n. https://github.com/yarnpkg/yarn/issues/696#issuecomment-258418656\n. ",
    "jrobeson": "--no-bin-links did finally happen, but still no resolution for the other issue.. ",
    "amelkikh": "No,\n```\ndeveloper@work-PC /media/developer/D8E27EADE27E8F8C/work/github/electron/electron-api-demos $ sudo ln -s /usr/local/bin/wine64 /usr/local/bin/wine\ndeveloper@work-PC /media/developer/D8E27EADE27E8F8C/work/github/electron/electron-api-demos $ npm run pack-win64\n\nElectronAPIDemos@1.2.0 pack-win64 /media/developer/D8E27EADE27E8F8C/work/github/electron/electron-api-demos\nelectron-packager . ElectronAPIDemos-x64 --asar --asar-unpack=protocol-link.html --overwrite --platform=win32 --arch=x64 --icon=assets/app-icon/win/app.ico --prune=true --out=out --version-string.CompanyName='GitHub, Inc.' --version-string.FileDescription='Electron API Demos' --version-string.ProductName='Electron API Demos'\n\nPackaging app for platform win32 x64 using electron v1.4.4\nrcedit.exe failed with exit code 1. wine: '/home/developer/.wine' is a 32-bit installation, it cannot support 64-bit applications.\nnpm ERR! Linux 3.19.0-32-generic\nnpm ERR! argv \"/usr/bin/nodejs\" \"/usr/bin/npm\" \"run\" \"pack-win64\"\nnpm ERR! node v6.9.1\nnpm ERR! npm  v3.10.8\nnpm ERR! code ELIFECYCLE\nnpm ERR! ElectronAPIDemos@1.2.0 pack-win64: electron-packager . ElectronAPIDemos-x64 --asar --asar-unpack=protocol-link.html --overwrite --platform=win32 --arch=x64 --icon=assets/app-icon/win/app.ico --prune=true --out=out --version-string.CompanyName='GitHub, Inc.' --version-string.FileDescription='Electron API Demos' --version-string.ProductName='Electron API Demos'\nnpm ERR! Exit status 1\nnpm ERR! \nnpm ERR! Failed at the ElectronAPIDemos@1.2.0 pack-win64 script 'electron-packager . ElectronAPIDemos-x64 --asar --asar-unpack=protocol-link.html --overwrite --platform=win32 --arch=x64 --icon=assets/app-icon/win/app.ico --prune=true --out=out --version-string.CompanyName='GitHub, Inc.' --version-string.FileDescription='Electron API Demos' --version-string.ProductName='Electron API Demos''.\nnpm ERR! Make sure you have the latest version of node.js and npm installed.\nnpm ERR! If you do, this is most likely a problem with the ElectronAPIDemos package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     electron-packager . ElectronAPIDemos-x64 --asar --asar-unpack=protocol-link.html --overwrite --platform=win32 --arch=x64 --icon=assets/app-icon/win/app.ico --prune=true --out=out --version-string.CompanyName='GitHub, Inc.' --version-string.FileDescription='Electron API Demos' --version-string.ProductName='Electron API Demos'\nnpm ERR! You can get information on how to open an issue for this project with:\nnpm ERR!     npm bugs ElectronAPIDemos\nnpm ERR! Or if that isn't available, you can get their info via:\nnpm ERR!     npm owner ls ElectronAPIDemos\nnpm ERR! There is likely additional logging output above.\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /media/developer/D8E27EADE27E8F8C/work/github/electron/electron-api-demos/npm-debug.log\n``\n. Thanks\n. I did as you suggested, but the problem persistsmv ~/.wine ~/.wine64`\n```\ndeveloper@work-PC /media/developer/D8E27EADE27E8F8C/work/github/electron/electron-api-demos $ npm run pack-win64\n\nElectronAPIDemos@1.2.0 pack-win64 /media/developer/D8E27EADE27E8F8C/work/github/electron/electron-api-demos\nelectron-packager . ElectronAPIDemos-x64 --asar --asar-unpack=protocol-link.html --overwrite --platform=win32 --arch=x64 --icon=assets/app-icon/win/app.ico --prune=true --out=out --version-string.CompanyName='GitHub, Inc.' --version-string.FileDescription='Electron API Demos' --version-string.ProductName='Electron API Demos'\n\nPackaging app for platform win32 x64 using electron v1.4.4\nrcedit.exe failed with exit code 1. wine: WINEARCH set to win32 but '/home/developer/.wine' is a 64-bit installation.\nnpm ERR! Linux 3.19.0-32-generic\nnpm ERR! argv \"/usr/bin/nodejs\" \"/usr/bin/npm\" \"run\" \"pack-win64\"\nnpm ERR! node v6.9.1\nnpm ERR! npm  v3.10.8\nnpm ERR! code ELIFECYCLE\nnpm ERR! ElectronAPIDemos@1.2.0 pack-win64: electron-packager . ElectronAPIDemos-x64 --asar --asar-unpack=protocol-link.html --overwrite --platform=win32 --arch=x64 --icon=assets/app-icon/win/app.ico --prune=true --out=out --version-string.CompanyName='GitHub, Inc.' --version-string.FileDescription='Electron API Demos' --version-string.ProductName='Electron API Demos'\nnpm ERR! Exit status 1\nnpm ERR! \nnpm ERR! Failed at the ElectronAPIDemos@1.2.0 pack-win64 script 'electron-packager . ElectronAPIDemos-x64 --asar --asar-unpack=protocol-link.html --overwrite --platform=win32 --arch=x64 --icon=assets/app-icon/win/app.ico --prune=true --out=out --version-string.CompanyName='GitHub, Inc.' --version-string.FileDescription='Electron API Demos' --version-string.ProductName='Electron API Demos''.\nnpm ERR! Make sure you have the latest version of node.js and npm installed.\nnpm ERR! If you do, this is most likely a problem with the ElectronAPIDemos package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     electron-packager . ElectronAPIDemos-x64 --asar --asar-unpack=protocol-link.html --overwrite --platform=win32 --arch=x64 --icon=assets/app-icon/win/app.ico --prune=true --out=out --version-string.CompanyName='GitHub, Inc.' --version-string.FileDescription='Electron API Demos' --version-string.ProductName='Electron API Demos'\nnpm ERR! You can get information on how to open an issue for this project with:\nnpm ERR!     npm bugs ElectronAPIDemos\nnpm ERR! Or if that isn't available, you can get their info via:\nnpm ERR!     npm owner ls ElectronAPIDemos\nnpm ERR! There is likely additional logging output above.\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /media/developer/D8E27EADE27E8F8C/work/github/electron/electron-api-demos/npm-debug.log\n```\n. ",
    "jerroddixon": "@MarshallOfSound Thank you for the help, the extra log output has helped a bit! Unfortunately, I'm still getting that 'Expected module version 50, got version 49' error when the 'diskusage' package gets called. (apologies on not posting this stack earlier!)\nError: Module version mismatch. Expected 50, got 49.\n    at Error (native)\n    at process.module.(anonymous function) [as dlopen] (ELECTRON_ASAR.js:168:20)\n    at Object.Module._extensions..node (module.js:583:18)\n    at Object.module.(anonymous function) [as .node] (ELECTRON_ASAR.js:168:20)\n    at Module.load (module.js:473:32)\n    at tryModuleLoad (module.js:432:12)\n    at Function.Module._load (module.js:424:3)\n    at Module.require (module.js:483:17)\n    at require (internal/module.js:20:19)\n    at bindings (C:\\Users\\<user>\\Documents\\GitHub\\<app>\\packageWin\\<app>-win32-x64\\resources\\app\\node_modules\\bindings\\bindings.js:76:44) <div ng-view=\"\" class=\"ng-scope\">\nThis is my new postinstall.js\n```\n!/usr/bin/env node\nconst spawn = require('child_process').spawn;\nconst ref = spawn(__dirname + '\\node_modules\\.bin\\electron-rebuild.cmd',\n                  ['-w', 'ffi', '--log'],\n                  { cwd: __dirname,\n                    env: process.env});\nconst ffi = spawn(__dirname + '\\node_modules\\.bin\\electron-rebuild.cmd',\n                  ['-w', 'ref', '--log'],\n                  { cwd: __dirname,\n                    env: process.env});\nref.stdout.on('data', (data) => {\n    console.log(refout: ${data});\n});\nref.stderr.on('data', (data) => {\n    console.log(referr: ${data});\n});\nref.on('close', (code) => {\n    if (code !== 0) {\n        console.log(ref rebuild exited with code ${code});\n    }\n});\nffi.stdout.on('data', (data) => {\n    console.log(ffiout: ${data});\n});\nffi.stderr.on('data', (data) => {\n    console.log(ffierr: ${data});\n});\nffi.on('close', (code) => {\n    if (code !== 0) {\n        console.log(ffi rebuild exited with code ${code});\n    }\n});\n```\n. @MarshallOfSound Yes, the output seems to indicate they're properly rebuilding. With the -w flag this is the output (produced on Windows)\n```\nffiout:\n\nref@1.3.2 install C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ref\nnode-gyp rebuild\n\nrefout:\n\nffi@2.2.0 install C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ffi\nnode-gyp rebuild\n\nrefout:\nC:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ffi>if\nrefout: not defined npm_config_node_gyp (node \"C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\npm\\bin\\node-gyp-bin\\....\\node_modules\\node-gyp\\bin\\node-gyp.js\" rebuild )  else (node \"\" rebuild )\nffiout:\nffiout: C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ref>if not defined npm_config_node_gyp (node \"C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\npm\\bin\\node-gyp-bin\\....\\node_modules\\node-gyp\\bin\\node-gyp.js\" rebuild )  else (node \"\" rebuild )\nrefout: Building the projects in this solution one at a time. To enable parallel build, please add the \"/m\" switch.\nffiout: Building the projects in this solution one at a time. To enable parallel build, please add the \"/m\" switch.\nrefout:   Building assembly file ......\\deps\\libffi\\src\\x86\\win64.asm\nffiout:   binding.cc\nffiout:   win_delay_load_hook.cc\nrefout:    Assembling: ......\\deps\\libffi\\src\\x86\\win64.asm\nrefout:   prep_cif.c\nrefout:   types.c\nrefout:   raw_api.c\nrefout:   java_raw_api.c\nrefout:   closures.c\nrefout:   ffi.c\nrefout:   win_delay_load_hook.cc\nrefout:   ffi.vcxproj -> C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ffi\\build\\Release\\libffi.lib\nrefout:   ffi.cc\nrefout:   callback_info.cc\n  threaded_callback_invokation.cc\nrefout:   win32-dlfcn.cc\nrefout:   win_delay_load_hook.cc\nffiout: ..\\src\\binding.cc(643): warning C4996: 'v8::Object::ForceSet': was declared deprecated [C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ref\\build\\binding.vcxproj]\nffiout:   C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\electron-rebuild\\lib\\headers.node-gyp\\iojs-1.3.8\\deps\\v8\\include\\v8.h(2687): note: see declaration of 'v8::Object::ForceSet'\nffiout: ..\\src\\binding.cc(644): warning C4996: 'v8::Object::ForceSet': was declared deprecated [C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ref\\build\\binding.vcxproj]\nffiout:   C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\electron-rebuild\\lib\\headers.node-gyp\\iojs-1.3.8\\deps\\v8\\include\\v8.h(2687): note: see declaration of 'v8::Object::ForceSet'\nffiout:      Creating library C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ref\\build\\Release\\binding.lib and object C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ref\\build\\Release\\binding.exp\nffiout:   Generating code\nrefout: ..\\src\\ffi.cc(111): warning C4996: 'v8::Object::ForceSet': was declared deprecated [C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ffi\\build\\ffi_bindings.vcxproj]\nrefout:   C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\electron-rebuild\\lib\\headers.node-gyp\\iojs-1.3.8\\deps\\v8\\include\\v8.h(2687): note: see declaration of 'v8::Object::ForceSet'\n..\\src\\ffi.cc(114): warning C4996: 'v8::Object::ForceSet': was declared deprecated [C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ffi\\build\\ffi_bindings.vcxproj]\nrefout:   C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\electron-rebuild\\lib\\headers.node-gyp\\iojs-1.3.8\\deps\\v8\\include\\v8.h(2687): note: see declaration of 'v8::Object::ForceSet'\nrefout: ..\\src\\ffi.cc(123): warning C4996: 'v8::Object::ForceSet': was declared deprecated [C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ffi\\build\\ffi_bindings.vcxproj]\nrefout:   C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\electron-rebuild\\lib\\headers.node-gyp\\iojs-1.3.8\\deps\\v8\\include\\v8.h(2687): note: see declaration of 'v8::Object::ForceSet'\nrefout: ..\\src\\ffi.cc(124): warning C4996: 'v8::Object::ForceSet': was declared deprecated [C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ffi\\build\\ffi_bindings.vcxproj]\nrefout:   C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\electron-rebuild\\lib\\headers.node-gyp\\iojs-1.3.8\\deps\\v8\\include\\v8.h(2687): note: see declaration of 'v8::Object::ForceSet'\nrefout: ..\\src\\ffi.cc(125): warning C4996: 'v8::Object::ForceSet': was declared deprecated [C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ffi\\build\\ffi_bindings.vcxproj]\nrefout:   C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\electron-rebuild\\lib\\headers.node-gyp\\iojs-1.3.8\\deps\\v8\\include\\v8.h(2687): note: see declaration of 'v8::Object::ForceSet'\nrefout: ..\\src\\ffi.cc(126): warning C4996: 'v8::Object::ForceSet': was declared deprecated [C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ffi\\build\\ffi_bindings.vcxproj]\nrefout:   C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\electron-rebuild\\lib\\headers.node-gyp\\iojs-1.3.8\\deps\\v8\\include\\v8.h(2687): note: see declaration of 'v8::Object::ForceSet'\nrefout: ..\\src\\ffi.cc(132): warning C4996: 'v8::Object::ForceSet': was declared deprecated [C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ffi\\build\\ffi_bindings.vcxproj]\nrefout:   C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\electron-rebuild\\lib\\headers.node-gyp\\iojs-1.3.8\\deps\\v8\\include\\v8.h(2687): note: see declaration of 'v8::Object::ForceSet'\nffiout:   Finished generating code\nffiout:   binding.vcxproj -> C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ref\\build\\Release\\binding.node\nffiout:   binding.vcxproj -> C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ref\\build\\Release\\binding.pdb (Full PDB)\nffiout: ref@1.3.2 C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ref\nrefout:      Creating library C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ffi\\build\\Release\\ffi_bindings.lib and object C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ffi\\build\\Release\\ffi_bindings.exp\nrefout:   Generating code\nrefout:   Finished generating code\nrefout:   ffi_bindings.vcxproj -> C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ffi\\build\\Release\\ffi_bindings.node\nrefout:   ffi_bindings.vcxproj -> C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ffi\\build\\Release\\ffi_bindings.pdb (Full PDB)\nrefout: ffi@2.2.0 C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ffi\n```\nI'll try removing the -w and seeing if that makes the difference.\n. That seems to have made the difference, though I have some new errors to deal with\n```\nffierr: npm\nffierr:  ERR! Windows_NT 6.1.7601\nnpm ERR! argv \"C:\\Program Files\\nodejs\\node.exe\" \"C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\npm\\bin\\npm-cli.js\" \"rebuild\" \"--runtime=electron\" \"--target=1.3.8\" \"--arch=x64\" \"--update-binary\"\nnpm ERR! node v6.9.1\nnpm ERR! npm  v3.10.9\nnpm ERR! path C:\\Users\\\\Documents\\GitHub\\\\\\node_modules.bin\\uuid\nnpm ERR! code ENOENT\nnpm ERR! errno -4058\nnpm ERR! syscall chmod\nnpm ERR! enoent ENOENT: no such file or directory, chmod 'C:\\Users\\\\Documents\\GitHub\\\\\\node_modules.bin\\uuid'\nnpm ERR! enoent ENOENT: no such file or directory, chmod 'C:\\Users\\\\Documents\\GitHub\\\\\\node_modules.bin\\uuid'\nnpm ERR! enoent This is most likely not a problem with npm itself\nnpm ERR! enoent and is related to npm not being able to find a file.\nnpm ERR! enoent\nffierr:\nffierr: npm ERR! Please include the following file with any support request:\nnpm ERR!     C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\npm-debug.log\nffierr: Process exited with code: 4294963238\nffierr: Error: Process exited with code: 4294963238\n    at ChildProcess. (C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\electron-rebuild\\lib\\spawn.js:55:26)\n    at emitTwo (events.js:106:13)\n    at ChildProcess.emit (events.js:191:7)\n    at maybeClose (internal/child_process.js:877:16)\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:226:5)\nffi rebuild exited with code 4294967295\nrefout:\n\nffi@2.2.0 install C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ffi\nnode-gyp rebuild\n\nrefout:\nC:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ffi>if\nrefout: not defined npm_config_node_gyp (node \"C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\npm\\bin\\node-gyp-bin\\....\\node_modules\\node-gyp\\bin\\node-gyp.js\" rebuild )  else (node \"\" rebuild )\nrefout: Building the projects in this solution one at a time. To enable parallel build, please add the \"/m\" switch.\nrefout:   Building assembly file ......\\deps\\libffi\\src\\x86\\win64.asm\nrefout:    Assembling: ......\\deps\\libffi\\src\\x86\\win64.asm\nrefout:   prep_cif.c\nrefout:   types.c\nrefout:   raw_api.c\nrefout:   java_raw_api.c\nrefout:   closures.c\nrefout:   ffi.c\nrefout:   win_delay_load_hook.cc\nrefout:   ffi.vcxproj -> C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ffi\\build\\Release\\libffi.lib\nrefout:   ffi.cc\nrefout:   callback_info.cc\nrefout:   threaded_callback_invokation.cc\nrefout:   win32-dlfcn.cc\nrefout:   win_delay_load_hook.cc\nrefout: ..\\src\\ffi.cc(111): warning C4996: 'v8::Object::ForceSet': was declared deprecated [C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ffi\\build\\ffi_bindings.vcxproj]\n  C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\electron-rebuild\\lib\\headers.node-gyp\\iojs-1.3.8\\deps\\v8\\include\\v8.h(2687): note: see declaration of 'v8::Object::ForceSet'\nrefout: ..\\src\\ffi.cc(114): warning C4996: 'v8::Object::ForceSet': was declared deprecated [C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ffi\\build\\ffi_bindings.vcxproj]\n  C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\electron-rebuild\\lib\\headers.node-gyp\\iojs-1.3.8\\deps\\v8\\include\\v8.h(2687): note: see declaration of 'v8::Object::ForceSet'\nrefout: ..\\src\\ffi.cc(123): warning C4996: 'v8::Object::ForceSet': was declared deprecated [C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ffi\\build\\ffi_bindings.vcxproj]\nrefout:   C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\electron-rebuild\\lib\\headers.node-gyp\\iojs-1.3.8\\deps\\v8\\include\\v8.h(2687): note: see declaration of 'v8::Object::ForceSet'\nrefout: ..\\src\\ffi.cc(124): warning C4996: 'v8::Object::ForceSet': was declared deprecated [C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ffi\\build\\ffi_bindings.vcxproj]\n  C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\electron-rebuild\\lib\\headers.node-gyp\\iojs-1.3.8\\deps\\v8\\include\\v8.h(2687): note: see declaration of 'v8::Object::ForceSet'\nrefout: ..\\src\\ffi.cc(125): warning C4996: 'v8::Object::ForceSet': was declared deprecated [C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ffi\\build\\ffi_bindings.vcxproj]\nrefout:   C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\electron-rebuild\\lib\\headers.node-gyp\\iojs-1.3.8\\deps\\v8\\include\\v8.h(2687): note: see declaration of 'v8::Object::ForceSet'\nrefout: ..\\src\\ffi.cc(126): warning C4996: 'v8::Object::ForceSet': was declared deprecated [C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ffi\\build\\ffi_bindings.vcxproj]\nrefout:   C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\electron-rebuild\\lib\\headers.node-gyp\\iojs-1.3.8\\deps\\v8\\include\\v8.h(2687): note: see declaration of 'v8::Object::ForceSet'\nrefout: ..\\src\\ffi.cc(132): warning C4996: 'v8::Object::ForceSet': was declared deprecated [C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ffi\\build\\ffi_bindings.vcxproj]\nrefout:   C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\electron-rebuild\\lib\\headers.node-gyp\\iojs-1.3.8\\deps\\v8\\include\\v8.h(2687): note: see declaration of 'v8::Object::ForceSet'\nrefout:      Creating library C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ffi\\build\\Release\\ffi_bindings.lib and object C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ffi\\build\\Release\\ffi_bindings.exp\nrefout:   Generating code\nrefout:   Finished generating code\nrefout:   ffi_bindings.vcxproj -> C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ffi\\build\\Release\\ffi_bindings.node\nrefout:   ffi_bindings.vcxproj -> C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ffi\\build\\Release\\ffi_bindings.pdb (Full PDB)\nrefout:\n\nref@1.3.2 install C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ref\nnode-gyp rebuild\n\nrefout:\nC:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ref>\nrefout: if not defined npm_config_node_gyp (node \"C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\npm\\bin\\node-gyp-bin\\....\\node_modules\\node-gyp\\bin\\node-gyp.js\" rebuild )  else (node \"\" rebuild )\nrefout: Building the projects in this solution one at a time. To enable parallel build, please add the \"/m\" switch.\nrefout:   binding.cc\nrefout:   win_delay_load_hook.cc\nrefout: ..\\src\\binding.cc(643): warning C4996: 'v8::Object::ForceSet': was declared deprecated [C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ref\\build\\binding.vcxproj]\nrefout:   C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\electron-rebuild\\lib\\headers.node-gyp\\iojs-1.3.8\\deps\\v8\\include\\v8.h(2687): note: see declaration of 'v8::Object::ForceSet'\nrefout: ..\\src\\binding.cc(644): warning C4996: 'v8::Object::ForceSet': was declared deprecated [C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ref\\build\\binding.vcxproj]\n  C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\electron-rebuild\\lib\\headers.node-gyp\\iojs-1.3.8\\deps\\v8\\include\\v8.h(2687): note: see declaration of 'v8::Object::ForceSet'\nrefout:      Creating library C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ref\\build\\Release\\binding.lib and object C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ref\\build\\Release\\binding.exp\nrefout:   Generating code\nrefout:   Finished generating code\nrefout:   binding.vcxproj -> C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ref\\build\\Release\\binding.node\nrefout:   binding.vcxproj -> C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\ref\\build\\Release\\binding.pdb (Full PDB)\nreferr: npm\nreferr:  WARN prefer global marked@0.3.6 should be installed with -g\nrefout:\n\nelectron-prebuilt@1.3.8 postinstall C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\electron-prebuilt\nnode install.js\n\nrefout:\n\nnslog@3.0.0 install C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\nslog\nnode-gyp rebuild\n\nrefout:\nC:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\nslog>\nrefout: if not defined npm_config_node_gyp (node \"C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\npm\\bin\\node-gyp-bin\\....\\node_modules\\node-gyp\\bin\\node-gyp.js\" rebuild )  else (node \"\" rebuild )\nreferr: gyp\nreferr:  ERR! clean error\nreferr: gyp ERR! stack Error: EPERM: operation not permitted, unlink 'C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\nslog\\build\\Release\\nslog.node'\ngyp ERR! stack     at Error (native)\ngyp ERR! System Windows_NT 6.1.7601\ngyp ERR! command \"C:\\Program Files\\nodejs\\node.exe\" \"C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js\" \"rebuild\"\ngyp ERR! cwd C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\nslog\ngyp ERR! node -v v6.9.1\ngyp ERR! node-gyp -v v3.4.0\ngyp ERR! not ok\nreferr:\nreferr: npm ERR! Windows_NT 6.1.7601\nnpm ERR!\nreferr:  argv \"C:\\Program Files\\nodejs\\node.exe\" \"C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\npm\\bin\\npm-cli.js\" \"rebuild\" \"--runtime=electron\" \"--target=1.3.8\" \"--arch=x64\" \"--update-binary\"\nnpm ERR! node v6.9.1\nnpm ERR! npm  v3.10.9\nnpm ERR! code ELIFECYCLE\nnpm ERR! nslog@3.0.0 install: node-gyp rebuild\nnpm ERR! Exit status 1\nnpm ERR!\nnpm ERR! Failed at the nslog@3.0.0 install script 'node-gyp rebuild'.\nnpm ERR! Make sure you have the latest version of node.js and npm installed.\nnpm ERR! If you do, this is most likely a problem with the nslog package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     node-gyp rebuild\nnpm ERR! You can get information on how to open an issue for this project with:\nnpm ERR!     npm bugs nslog\nnpm ERR! Or if that isn't available, you can get their info via:\nnpm ERR!     npm owner ls nslog\nnpm ERR! There is likely additional logging output above.\nreferr:\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\npm-debug.log\nreferr: Process exited with code: 1\nreferr: Error: Process exited with code: 1\n    at ChildProcess. (C:\\Users\\\\Documents\\GitHub\\\\\\node_modules\\electron-rebuild\\lib\\spawn.js:55:26)\n    at emitTwo (events.js:106:13)\n    at ChildProcess.emit (events.js:191:7)\n    at maybeClose (internal/child_process.js:877:16)\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:226:5)\n```\n. @MarshallOfSound After grabbing the packages 'uuid' and 'asar' it's now failing on \nfor ffi\nError: `C:\\Program Files (x86)\\MSBuild\\14.0\\bin\\msbuild.exe` failed with exit code: 1\nfor ref\nreferr: ERR! clean error\ngyp ERR! stack Error: EPERM: operation not permitted, unlink 'C:\\Users\\<user>\\Documents\\GitHub\\<app>\\<app>\\node_modules\\nslog\\build\\Release\\nslog.node'\nWhy does it give these error messages now though, without the -w? How does electron-rebuild handle them differently, or does it suppress warnings the first method? And why did it work before while it wasn't packaged but broke once it was?\n. @MarshallOfSound I don't think I can say thank you enough, it's finally working now! Here's the new postinstall.js\n```\n!/usr/bin/env node\nconst spawn = require('child_process').spawnSync;\nconst fs = require('fs');\nvar rebuilder = \"\";\nconst target = \"1.4.3\";\nif (process.platform == 'win32') {\n    rebuilder = \"electron-rebuild.cmd\";\n} else {\n    rebuilder = \"electron-rebuild\";\n}\n// nslog fixer\nfs.unlinkSync(__dirname + '\\node_modules\\nslog\\build\\Release\\nslog.node');\nconst ref = spawn(__dirname + '\\node_modules\\.bin\\' + rebuilder,\n                  ['--version='+target,'--log'],\n          { cwd: __dirname + '\\node_modules\\ref',\n            env: process.env,\n            shell: true });\nconsole.log('ref output: ' + ref.output);\nconsole.log('ref error: ' + ref.error);\nconst ffi = spawn(__dirname + '\\node_modules\\.bin\\' + rebuilder,\n                  ['--version='+target,'--log'],\n          { cwd: __dirname + '\\node_modules\\ffi',\n            env: process.env,\n            shell: true });\nconsole.log('ffi output: ' + ffi.output);\nconsole.log('ffi error: ' + ffi.error);\n```\nI had trouble with exec not working with your rmdir command, but I substituted it for the fs.unlinkSync command and it's working great now. A hurdle that was giving me trouble was the spawn command, I didn't realize fully at first that it was an asynchronous command. With both the ref and the ffi spawned commands running, they were both attempting to access the same files in nslog at the same time, switching them to be synchronous fixed that however. With this new script it works perfect!\nOnce again, thank you for the assistance!\n. ",
    "weituotian": "@abicorios it sounds good! but how to build exe in centos?. ",
    "ccnokes": "This is a little bit of a shot in the dark, but if angular-cli is bundling with webpack, you may need to add this to your webpack config: https://github.com/chentsulin/webpack-target-electron-renderer. Basically webpack rewrites all your requires to it's own internal version of require. Because webpack isn't bundling (nor could it) electron's modules, ipcRenderer is undefined. I think that package above makes it so that things like require('electron') aren't resolved by webpack's require function, it's left to node/Electron. \n. ",
    "juniordesenv": "put node Integration = false and worked! Thanks!\n. ",
    "Regaddi": "Not sure, if this is the right way to solve this issue.\nYou're effectively saying, that you want to outsource all the ARM version checks to every app, that might want to use electron-packager.\nThis leads imho to a forced redundancy.\nNevertheless, I try to get this fixed at atom itself.\n. Okay, got the point. In my specific case I am building for my own system from source.\nI guess that Node.js should care for the right \"output\" of the arch. Maybe by using the arch command or something similar.\n. ",
    "Overload119": "Thanks for the quick response.\nelectron-packager Electron Packager 8.2.0 +0ms\n  electron-packager Node v5.7.0 +3ms\n  electron-packager Host Operating system: darwin (x64) +2ms\n  electron-packager Packager Options: {\"_\":[\".\",\"Smilelapse\"],\"all\":false,\"deref-symlinks\":true,\"download\":{\"strictSSL\":true},\"overwrite\":true,\"prune\":true,\"dir\":\".\",\"name\":\"Smilelapse\",\"protocols\":[]} +0ms\n  electron-packager Target Platforms: darwin +0ms\n  electron-packager Target Architectures: x64 +0ms\n  electron-packager Inferring app-version from version in /Users/amirsharif/faceonion/package.json +13ms\n  electron-packager Inferring target Electron version from electron in /Users/amirsharif/faceonion/package.json +5ms\n  electron-packager Application name: Smilelapse +1ms\n  electron-packager Target Electron version: 1.4.5 +0ms\n  electron-packager Ignored path regular expressions: +0ms [ '/node_modules/electron($|/)',\n  '/node_modules/electron-prebuilt($|/)',\n  '/node_modules/electron-packager($|/)',\n  '/\\\\.git($|/)',\n  '/node_modules/\\\\.bin($|/)',\n  '\\\\.o(bj)?$' ]\n  electron-packager Downloading Electron with options {\"strictSSL\":true,\"platform\":\"darwin\",\"arch\":\"x64\",\"version\":\"1.4.5\"} +14ms\nPackaging app for platform darwin x64 using electron v1.4.5\n  electron-packager Creating /var/folders/2z/5_kcl_dx0qv1ky6b8g_j9x2r0000gn/T/electron-packager/darwin-x64-template +411ms\n  electron-packager Extracting /Users/amirsharif/.electron/electron-v1.4.5-darwin-x64.zip to /var/folders/2z/5_kcl_dx0qv1ky6b8g_j9x2r0000gn/T/electron-packager/darwin-x64-template +1ms\n  electron-packager Initializing app in /var/folders/2z/5_kcl_dx0qv1ky6b8g_j9x2r0000gn/T/electron-packager/darwin-x64/Smilelapse-darwin-x64 from /var/folders/2z/5_kcl_dx0qv1ky6b8g_j9x2r0000gn/T/electron-packager/darwin-x64-template template +2s\n  electron-packager Ignored paths based on the out param: +4ms [ '/Users/amirsharif/faceonion/Smilelapse-darwin-ia32',\n  '/Users/amirsharif/faceonion/Smilelapse-darwin-x64',\n  '/Users/amirsharif/faceonion/Smilelapse-darwin-armv7l',\n  '/Users/amirsharif/faceonion/Smilelapse-linux-ia32',\n  '/Users/amirsharif/faceonion/Smilelapse-linux-x64',\n  '/Users/amirsharif/faceonion/Smilelapse-linux-armv7l',\n  '/Users/amirsharif/faceonion/Smilelapse-mas-ia32',\n  '/Users/amirsharif/faceonion/Smilelapse-mas-x64',\n  '/Users/amirsharif/faceonion/Smilelapse-mas-armv7l',\n  '/Users/amirsharif/faceonion/Smilelapse-win32-ia32',\n  '/Users/amirsharif/faceonion/Smilelapse-win32-x64',\n  '/Users/amirsharif/faceonion/Smilelapse-win32-armv7l' ]\n  electron-packager Running npm prune --production +7s\n  electron-packager Renaming Electron to Smilelapse in /var/folders/2z/5_kcl_dx0qv1ky6b8g_j9x2r0000gn/T/electron-packager/darwin-x64/Smilelapse-darwin-x64/Electron.app/Contents/MacOS +7s\n  electron-packager Renaming Electron Helper to Smilelapse Helper in /var/folders/2z/5_kcl_dx0qv1ky6b8g_j9x2r0000gn/T/electron-packager/darwin-x64/Smilelapse-darwin-x64/Electron.app/Contents/Frameworks/Electron Helper.app/Contents/MacOS +2ms\n  electron-packager Renaming Electron Helper.app to Smilelapse Helper.app in /var/folders/2z/5_kcl_dx0qv1ky6b8g_j9x2r0000gn/T/electron-packager/darwin-x64/Smilelapse-darwin-x64/Electron.app/Contents/Frameworks +1ms\n  electron-packager Renaming Electron Helper EH to Smilelapse Helper EH in /var/folders/2z/5_kcl_dx0qv1ky6b8g_j9x2r0000gn/T/electron-packager/darwin-x64/Smilelapse-darwin-x64/Electron.app/Contents/Frameworks/Electron Helper EH.app/Contents/MacOS +0ms\n  electron-packager Renaming Electron Helper EH.app to Smilelapse Helper EH.app in /var/folders/2z/5_kcl_dx0qv1ky6b8g_j9x2r0000gn/T/electron-packager/darwin-x64/Smilelapse-darwin-x64/Electron.app/Contents/Frameworks +0ms\n  electron-packager Renaming Electron Helper NP to Smilelapse Helper NP in /var/folders/2z/5_kcl_dx0qv1ky6b8g_j9x2r0000gn/T/electron-packager/darwin-x64/Smilelapse-darwin-x64/Electron.app/Contents/Frameworks/Electron Helper NP.app/Contents/MacOS +1ms\n  electron-packager Renaming Electron Helper NP.app to Smilelapse Helper NP.app in /var/folders/2z/5_kcl_dx0qv1ky6b8g_j9x2r0000gn/T/electron-packager/darwin-x64/Smilelapse-darwin-x64/Electron.app/Contents/Frameworks +0ms\n  electron-packager Moving /var/folders/2z/5_kcl_dx0qv1ky6b8g_j9x2r0000gn/T/electron-packager/darwin-x64/Smilelapse-darwin-x64 to /Users/amirsharif/faceonion/Smilelapse-darwin-x64 +1ms\nWrote new app to /Users/amirsharif/faceonion/Smilelapse-darwin-x64\nInterestingly, I found that I get an error (although it has since gone away). \nI managed to get it to popup once on load, but the error seems to be with this line:\ntray = new Tray('./media/wink 20x20Template.png');\nIt said something along the lines of failure to convert.\n. ",
    "peteruithoven": "Thanks for pointing me into the right direction, I searched in this and the Electron repo on snap, snaps and snappy but there was no pointer to that one. I guess now there is. \n. I'm afraid I'm just a user, but I'll do a little digging. \n. @fcole90 Thanks! \n. ",
    "fcole90": "I think it should be possible, please check docker/snapcraft and tell me if it's what you were looking for.\n. This link should provide more infromation.\n. ",
    "DrSensor": "Any progress for this? . ",
    "zacharyabresch": "BTW, when I run the .app that's generated I get the following error in Electron:\nUncaught Exception:\nError: Cannot find module 'bunyan'\n    at Module._resolveFilename (module.js:455:15)\n    at Function.Module._resolveFilename (/Users/zabresch/Documents/8x8/scratching/build-with-native-modules/build/bundle/build-with-native-modules-darwin-x64/build-with-native-modules.app/Contents/Resources/electron.asar/common/reset-search-paths.js:35:12)\n    at Function.Module._load (module.js:403:25)\n    at Module.require (module.js:483:17)\n    at require (internal/module.js:20:19)\n    at Object.<anonymous> (/Users/zabresch/Documents/8x8/scratching/build-with-native-modules/build/bundle/build-with-native-modules-darwin-x64/build-with-native-modules.app/Contents/Resources/app/el/main.js:13:15)\n    at Module._compile (module.js:556:32)\n    at Object.Module._extensions..js (module.js:565:10)\n    at Module.load (module.js:473:32)\n    at tryModuleLoad (module.js:432:12)\n. ## main.js\n```\nimport { app, BrowserWindow, ipcMain } from 'electron';\nimport path from 'path';\nimport url from 'url';\nimport bunyan from 'bunyan';\nconst log = bunyan.createLogger({ name: 'build-with-native-modules' });\nlet win;\nfunction createWindow() {\n  win = new BrowserWindow({ width: 600, height: 800 });\nwin.loadURL(url.format({\n    pathname: path.resolve(__dirname, '../ui/index.html'),\n    protocol: 'file',\n    slashes: true,\n  }));\nwin.openDevTools();\nwin.on('closed', () => {\n    win = null;\n  });\nipcMain.on('trigger-clicked', (event, msg) => {\n    log.info(trigger confirmation from electron: ${msg});\n  });\n}\napp.on('ready', createWindow);\napp.on('windows-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit();\n  }\n});\napp.on('activate', () => {\n  if (win === null) {\n    createWindow();\n  }\n});\n``\n. Yeah, did that and, no, thenode_modulesfolder is _not_ there. I tried it withasar: falsetoo just to see if theappfolder would contain it. No luck.\n. I was under the impression thatelectron-packagerwould bundle anything listed independenciesinpackage.json. Do I need to manually copynode_modulessomewhere? If so, is there a clean way to do that with _just_ the dependencies?\n. Okay. I ran this:./node_modules/.bin/electron-packager ./build/dist build-with-native-modules --platform=darwin --arch=x64 --out=./build/sa_packager --overwrite=true` and it ran without errors.\nDid it in DEBUG too:\nDEBUG=electron-packager ./node_modules/.bin/electron-packager ./build/dist build-with-native-modules --platform=darwin --arch=x64 --out=./build/sa_packager --overwrite=true\n  electron-packager Electron Packager 8.2.0 +0ms\n  electron-packager Node v5.2.0 +2ms\n  electron-packager Host Operating system: darwin (x64) +2ms\n  electron-packager Packager Options: {\"_\":[\"./build/dist\",\"build-with-native-modules\"],\"all\":false,\"deref-symlinks\":true,\"download\":{\"strictSSL\":true},\"overwrite\":true,\"prune\":true,\"platform\":\"darwin\",\"arch\":\"x64\",\"out\":\"./build/sa_packager\",\"dir\":\"./build/dist\",\"name\":\"build-with-native-modules\",\"protocols\":[]} +1ms\n  electron-packager Target Platforms: darwin +0ms\n  electron-packager Target Architectures: x64 +0ms\n  electron-packager Inferring app-version from version in /Users/zabresch/Documents/8x8/scratching/build-with-native-modules/build/dist/package.json +9ms\n  electron-packager Inferring target Electron version from electron in /Users/zabresch/Documents/8x8/scratching/build-with-native-modules/build/dist/package.json +4ms\n  electron-packager Application name: build-with-native-modules +0ms\n  electron-packager Target Electron version: 1.4.6 +0ms\n  electron-packager Ignored path regular expressions: [ '/node_modules/electron($|/)',\n  '/node_modules/electron-prebuilt($|/)',\n  '/node_modules/electron-packager($|/)',\n  '/\\\\.git($|/)',\n  '/node_modules/\\\\.bin($|/)',\n  '\\\\.o(bj)?$' ] +0ms\n  electron-packager Downloading Electron with options {\"strictSSL\":true,\"platform\":\"darwin\",\"arch\":\"x64\",\"version\":\"1.4.6\"} +8ms\nPackaging app for platform darwin x64 using electron v1.4.6\n  electron-packager Creating /var/folders/zx/m4gltph949j450_vsv_pt4mjzphjyg/T/electron-packager/darwin-x64-template +278ms\n  electron-packager Extracting /Users/zabresch/.electron/electron-v1.4.6-darwin-x64.zip to /var/folders/zx/m4gltph949j450_vsv_pt4mjzphjyg/T/electron-packager/darwin-x64-template +0ms\n  electron-packager Initializing app in /var/folders/zx/m4gltph949j450_vsv_pt4mjzphjyg/T/electron-packager/darwin-x64/build-with-native-modules-darwin-x64 from /var/folders/zx/m4gltph949j450_vsv_pt4mjzphjyg/T/electron-packager/darwin-x64-template template +1s\n  electron-packager Ignored paths based on the out param: [ '/Users/zabresch/Documents/8x8/scratching/build-with-native-modules/build/sa_packager' ] +2ms\n  electron-packager Running npm prune --production +10ms\n  electron-packager Renaming Electron to build-with-native-modules in /var/folders/zx/m4gltph949j450_vsv_pt4mjzphjyg/T/electron-packager/darwin-x64/build-with-native-modules-darwin-x64/Electron.app/Contents/MacOS +409ms\n  electron-packager Renaming Electron Helper to build-with-native-modules Helper in /var/folders/zx/m4gltph949j450_vsv_pt4mjzphjyg/T/electron-packager/darwin-x64/build-with-native-modules-darwin-x64/Electron.app/Contents/Frameworks/Electron Helper.app/Contents/MacOS +1ms\n  electron-packager Renaming Electron Helper.app to build-with-native-modules Helper.app in /var/folders/zx/m4gltph949j450_vsv_pt4mjzphjyg/T/electron-packager/darwin-x64/build-with-native-modules-darwin-x64/Electron.app/Contents/Frameworks +0ms\n  electron-packager Renaming Electron Helper EH to build-with-native-modules Helper EH in /var/folders/zx/m4gltph949j450_vsv_pt4mjzphjyg/T/electron-packager/darwin-x64/build-with-native-modules-darwin-x64/Electron.app/Contents/Frameworks/Electron Helper EH.app/Contents/MacOS +1ms\n  electron-packager Renaming Electron Helper EH.app to build-with-native-modules Helper EH.app in /var/folders/zx/m4gltph949j450_vsv_pt4mjzphjyg/T/electron-packager/darwin-x64/build-with-native-modules-darwin-x64/Electron.app/Contents/Frameworks +0ms\n  electron-packager Renaming Electron Helper NP to build-with-native-modules Helper NP in /var/folders/zx/m4gltph949j450_vsv_pt4mjzphjyg/T/electron-packager/darwin-x64/build-with-native-modules-darwin-x64/Electron.app/Contents/Frameworks/Electron Helper NP.app/Contents/MacOS +0ms\n  electron-packager Renaming Electron Helper NP.app to build-with-native-modules Helper NP.app in /var/folders/zx/m4gltph949j450_vsv_pt4mjzphjyg/T/electron-packager/darwin-x64/build-with-native-modules-darwin-x64/Electron.app/Contents/Frameworks +1ms\n  electron-packager Moving /var/folders/zx/m4gltph949j450_vsv_pt4mjzphjyg/T/electron-packager/darwin-x64/build-with-native-modules-darwin-x64 to build/sa_packager/build-with-native-modules-darwin-x64 +1ms\nWrote new app to build/sa_packager/build-with-native-modules-darwin-x64\nAgain, there is no node_modules folder in the app directory after packaging. I'm going to put my proof-of-concept up on GH. One sec.\n. kk. Here's the app I'm using for testing. https://github.com/zacharyabresch/build-with-native-modules\n. Any help is awesome. Thanks for your time.\n- Yes, those packages exist in ./node_modules\n- npm version: 3.3.12\nI have had some random issues with npm lately. Is there a version you'd recommend?\n. No, but package.json does ... it gets moved there prior to webpack and babel to ./build/dist. Should I copy node_modules to there? Would a symlink work?\n. Okay ... after a bit of digging I was able to figure out how to run npm i in build/dist. Here's the gulp task that got it done:\n// Installs dependencies into build folder\ngulp.task('run:npm-install', shell.task([\n  'npm --prefix ./build/dist install ./build/dist --production',\n  './node_modules/.bin/electron-rebuild -m ./build/dist/node_modules',\n]));\nThe --production option is key since that only installs dependencies in package.json. Thank you so much for your help on this!\n. ",
    "18steps": "I was experiencing the same issue, but I wasn't using Gulp loaders, so that couldn't be it.\nFor me, the problem was that main.js was located in ./src/app, which does not contain the node_modules folder.\nmain.js has to be in the root folder along with package.json and node_modules, that solves the problem.\nI was starting from this angular-electron starter which had the file placed there.. ",
    "martijnthe": "@malept I'm also running into this. It seems like electron-packager doesn't play well with npm packages that have been hoisted to a node_modules parent folder. Is that by design?\nWe're using yarn workspaces and npm packages get hoisted automatically to the root of the mono repo.. Related ticket on yarn's issue tracker: https://github.com/yarnpkg/yarn/issues/4070. @malept done!. @malept that could work, will try. Thanks.. ",
    "neil-mcglennon-sp": "I am seeing the same with electron-packager.  I am not using yarn or gulp or any other build tool.  When I run electron-packager . --overwrite --platform=darwin --arch=x64 --icon=assets/icons/mac/icon.icns --overwrite=true --out=release-builds to build and run the build, I get the same error about things not in the package.  However when I run electron . it runs fine in development.  I've looked in the .app package contents from the generated stuff and I don't see everything in node_modules.. ",
    "tophermade": "I too am having this issue. To verify it's not my app I snagged the Electron Quick Start, and added a single new package dependency. Runs fine with npm, but fails after packing with the \"Cannot Find Module\" error.\nNo modules are in resources/app/node_modules/, only one folder @types which is empty.\nWindows 10\nNode 6.11.5\nElectron Packager v1.8.4\n```\n{\n  \"name\": \"electron-quick-start\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A minimal Electron application\",\n  \"main\": \"main.js\",\n  \"scripts\": {\n    \"start\": \"electron .\"\n  },\n  \"repository\": \"https://github.com/electron/electron-quick-start\",\n  \"keywords\": [\n    \"Electron\",\n    \"quick\",\n    \"start\",\n    \"tutorial\",\n    \"demo\"\n  ],\n  \"author\": \"GitHub\",\n  \"license\": \"CC0-1.0\",\n  \"devDependencies\": {\n    \"electron\": \"^1.8.4\"\n  },\n  \"dependencies\": {\n    \"line-by-line\": \"^0.1.6\"\n  }\n}\n```. ",
    "JohnDeved": "@tophermade @neil-mcglennon-sp experiencing the same issue here. the app seems to work fine when im using electron-packager-interactive to build the app. but not if i build the app with electron-packager api or cli\npackage.json:\n{\n  \"name\": \"imgursnap\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"main.js\",\n  \"dependencies\": {\n    \"blob-to-buffer\": \"^1.2.7\",\n    \"jimp\": \"^0.2.28\",\n    \"jquery\": \"^3.3.1\",\n    \"opn\": \"^5.3.0\",\n    \"request\": \"^2.85.0\"\n  },\n  \"devDependencies\": {\n    \"electron\": \"^1.8.4\",\n    \"electron-packager\": \"^12.0.0\",\n    \"electron-packager-interactive\": \"^0.1.3\"\n  },\n  \"scripts\": {\n    \"start\": \"electron .\",\n    \"build\": \"node build/dist\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\nconst packager = require('electron-packager')\nconst options = {\n  platform: ['win32', 'linux'],\n  arch: 'x64',\n  name: 'imgurSnap',\n  icon: './view/images/imgurSnap',\n  dir: '.',\n  ignore: ['build'],\n  out: './build/releases',\n  overwrite: true,\n  asar: true,\n  prune: true\n}\npackager(options, (error, path) => {\n  if (error) {\n    return (\n      console.log(Error: ${error})\n    )\n  }\nconsole.log(Package created, path: ${path})\n})\n``. after removing package-lock.json and then runningnpm update`, im still having the same issue . @malept thanks it works now. i was just beeing a dumbass. ",
    "cballantyne": "I am getting same problem as well. :-(\n@MarshallOfSound - Sorry I am new to Electron and Node dev. Do you mean try running npm install after deleting the node_modules folder? That doesn't work for me. Still seeing only empty @types folder under node_modules in generated folder.\nnpm version - 5.6.0\nwindows 8\nelectron 1.8.4.\n. Thank you. I think reinstalling Electron Packager did the trick as it was still not working after only removing node modules and package-lock.son and then doing npm install.. ",
    "eladc898": "Hi , i'm having the same issue .\ntried all of the above and still it doesn't work.\nsomeone have some other idea?. ",
    "peerbolte": "So the issue that I had was due to using src in the ignore option in the building config object. I had the following ignore regex (which was the default for https://github.com/SimulatedGREG/electron-vue) \nbuilding: {\n    ignore: /\\b(src|index\\.ejs|icons)\\b/,`\n} \nHowever this also ignores src folders in node_modules that have to be copied. One npm module that I had issues with was the debug module https://github.com/visionmedia/debug#readme. As you can see there is a src folder in the module which is needed for the module to function. However, because it's ignored, it will throw an error on launch.\nSolution: I have renamed my src folder to sourcecode and changed the regex string to /\\b(sourcecode|index\\.ejs|icons)\\b/ (and all references to it) now it runs fine in production. . ",
    "dgabrielli76": "The install in question is the wine install. \nI install wine using homebrew with this command:\nbrew install wine\nAnd this command gives this console output: \nWarning: You are using OS X 10.12.\nWe do not provide support for this pre-release version.\nYou may encounter build failures or other breakages.\nPlease create pull-requests instead of filing issues.\nI understand that the problem is coming from wine and not from you, but I don't know how to build my app for windows without this installation...\nThanks for your help!\n. Thanks for your help it works!\nSorry for this issue that is not really linked to you...\nThank you again!\n. ",
    "kcampion": "Same problem with node-osascript and ttab.. ",
    "ShahNewazKhan": "Hi malept,\nThe project I used was the  photon source code package with some changes to the /dist/app.js file.\nHere is the console output for my cmd arguments electron-packager . --platform=win32 :\nPS C:\\Users\\i841069\\Desktop\\projects\\electron\\blinkr> electron-packager . --platform=win32 --asar=false --overwrite\n  electron-packager Electron Packager 8.3.0 +0ms\n  electron-packager Node v4.4.7 +4ms\n  electron-packager Host Operating system: win32 (x64) +3ms\n  electron-packager Packager Options: {\"_\":[\".\"],\"all\":false,\"deref-symlinks\":true,\"download\":{\"strictSSL\":true},\"overwrite\":true,\"pru\nne\":true,\"platform\":\"win32\",\"asar\":\"false\",\"dir\":\".\",\"protocols\":[]} +1ms\n  electron-packager Target Platforms: win32 +4ms\n  electron-packager Target Architectures: x64 +1ms\n  electron-packager Inferring application name from productName in C:\\Users\\i841069\\Desktop\\projects\\electron\\blinkr\\package.json +206\nms\n  electron-packager Inferring app-version from version in C:\\Users\\i841069\\Desktop\\projects\\electron\\blinkr\\package.json +6ms\n  electron-packager Inferring target Electron version from electron-prebuilt in C:\\Users\\i841069\\Desktop\\projects\\electron\\blinkr\\pack\nage.json +22ms\n  electron-packager Application name: Blinkr +10ms\n  electron-packager Target Electron version: 0.33.9 +4ms\n  electron-packager Ignored path regular expressions: [ '/node_modules/electron($|/)',\n  '/node_modules/electron-prebuilt($|/)',\n  '/node_modules/electron-packager($|/)',\n  '/.git($|/)',\n  '/node_modules/.bin($|/)',\n  '.o(bj)?$' ] +5ms\n  electron-packager Downloading Electron with options {\"strictSSL\":true,\"platform\":\"win32\",\"arch\":\"x64\",\"version\":\"0.33.9\"} +1s\nPackaging app for platform win32 x64 using electron v0.33.9\n  electron-packager Creating C:\\Users\\i841069\\AppData\\Local\\Temp\\electron-packager\\win32-x64-template +616ms\n  electron-packager Extracting C:\\Users\\i841069.electron\\electron-v0.33.9-win32-x64.zip to C:\\Users\\i841069\\AppData\\Local\\Temp\\electr\non-packager\\win32-x64-template +12ms\n  electron-packager Initializing app in C:\\Users\\i841069\\AppData\\Local\\Temp\\electron-packager\\win32-x64\\Blinkr-win32-x64 from C:\\Users\n\\i841069\\AppData\\Local\\Temp\\electron-packager\\win32-x64-template template +2s\nasar parameter set to an invalid value (false), ignoring and disabling asar\n  electron-packager Ignored paths based on the out param: [ 'C:\\Users\\i841069\\Desktop\\projects\\electron\\blinkr\\Blinkr-darwin-ia\n32',\n  'C:\\Users\\i841069\\Desktop\\projects\\electron\\blinkr\\Blinkr-darwin-x64',\n  'C:\\Users\\i841069\\Desktop\\projects\\electron\\blinkr\\Blinkr-darwin-armv7l',\n  'C:\\Users\\i841069\\Desktop\\projects\\electron\\blinkr\\Blinkr-linux-ia32',\n  'C:\\Users\\i841069\\Desktop\\projects\\electron\\blinkr\\Blinkr-linux-x64',\n  'C:\\Users\\i841069\\Desktop\\projects\\electron\\blinkr\\Blinkr-linux-armv7l',\n  'C:\\Users\\i841069\\Desktop\\projects\\electron\\blinkr\\Blinkr-mas-ia32',\n  'C:\\Users\\i841069\\Desktop\\projects\\electron\\blinkr\\Blinkr-mas-x64',\n  'C:\\Users\\i841069\\Desktop\\projects\\electron\\blinkr\\Blinkr-mas-armv7l',\n  'C:\\Users\\i841069\\Desktop\\projects\\electron\\blinkr\\Blinkr-win32-ia32',\n  'C:\\Users\\i841069\\Desktop\\projects\\electron\\blinkr\\Blinkr-win32-x64',\n  'C:\\Users\\i841069\\Desktop\\projects\\electron\\blinkr\\Blinkr-win32-armv7l' ] +14ms\n  electron-packager Running npm prune --production +31s\n  electron-packager Renaming electron.exe to Blinkr.exe in C:\\Users\\i841069\\AppData\\Local\\Temp\\electron-packager\\win32-x64\\Blinkr-win3\n2-x64 +10s\n  electron-packager Running rcedit with the options {\"version-string\":{},\"file-version\":\"0.1.2\",\"product-version\":\"0.1.2\"} +35ms\n  electron-packager Moving C:\\Users\\i841069\\AppData\\Local\\Temp\\electron-packager\\win32-x64\\Blinkr-win32-x64 to C:\\Users\\i841069\\Deskto\np\\projects\\electron\\blinkr\\Blinkr-win32-x64 +604ms\nWrote new app to C:\\Users\\i841069\\Desktop\\projects\\electron\\blinkr\\Blinkr-win32-x64`\n. Thanks for the insight, do I need to set the main in the package.json in the / of the photon app or in the /dist/tempalte-app folder?\n. ",
    "mertyildiran": "@malept No, only the package I have created with electron-packager has this issue. Actually I realised that it's running on http://localhost:11237 but I want to run my app on http://localhost:3000/. How can I change the port to 3000.. @malept Could it be related with electrify because I'm generating electron app from meteor using electrify.. ",
    "manukondaraju": "Yes I have seen armv7l architecture is supported . But Raspberry Pi 3 is raising an error that architecture not found when I specify the --arch=armv7a . And if I compile it using armv7l I am unable to run the application created. . It the processor present in Raspberry Pi 3 Model B which we are using. Is there any difference it shows for the both armv7a and armv7l. I don't know exactly.. On my raspberry pi 3 running on New Raspbian Pixel desktop when I run uname -a it shows Linux. \n. ",
    "delebash": "package.json script args\n\n\"build-win\": \"electron-packager . musicwrapper --debug=electron-packager --platform=win32 --arch=ia32 --version=1.2.2 --overwrite --out ./build/win\",\n\nIf --version=1.0.2 with corresponding electron-prebuilt it works.  Using the above --version=1.2.2 it does not.\nCompile command npm run-script build-win\nI do not get the above error when running the executable in debug mode. the app runs as expected. \nHere is the console output\n\n\u03bb 2016-12-03T18:24:14.388Z - info: Logger initialized. Writing info/warnings/errors to stdout. Writing all logs to \"C:\\Users\\Daniel\\AppData\\Roaming\\google-music-electron\\verbose.log\"\n2016-12-03T18:24:14.426Z - info: App ready. Opening Google Music window nodeIntegration=false, webSecurity=true, height=698, icon=F:\\Development\\GitHub\\delebash\\Electron\\google-music-electron-master\\build\\win\\musicwrapper-win32-ia32\\resources\\app\\lib\\assets/icon-32.png, preload=F:\\Development\\GitHub\\delebash\\Electron\\google-music-electron-master\\build\\win\\musicwrapper-win32-ia32\\resources\\app\\lib/browser.js, skip-taskbar=undefined, width=1024, x=109, y=null, http_parser=2.7.0, node=6.1.0, v8=5.1.281.59, uv=1.9.0, zlib=1.2.8, ares=1.10.1-DEV, modules=48, openssl=1.0.2h, electron=1.2.2, atom-shell=1.2.2, chrome=51.0.2704.84, version=2.13.0\n\nLink to project\nhttps://github.com/delebash/tunein-music-wrapper.git\n. electron-prebuilt releases jump from 1.0.2 to 1.2.2 nothing in-beween\nhttps://github.com/electron-userland/electron-prebuilt/releases?after=v1.2.3\n\nI see if I can get a stack trace.\nThanks. Thanks for the info on how to use the DEBUG setting.\nI can't resize the popup\nI will get back to you on the exact version # of electron that it fails on.  My confusion was about the difference between electron-prebuilt and electron. I will just use electron instead of electron-prebuilt and let you know.\nI am not trying to get you to debug my app, it is just that the app runs fine if I just run it via electron .  verses compiled. I am happy to track down the error myself but I am just not familiar with debugging a compiled exe.  My code is in phpstorm so I guess I would install VS, move my code over there, compile it and attach to the running exe.  I will research this some more.\nI am ok with compiling it on a lower version that works.  I just thought there where security fixes that would make it better to compile it using the latest stable release.\nThanks for the help.\nHere is the console output\n\n\ngoogle-music-electron@2.13.0 build-win F:\\Development\\GitHub\\delebash\\Electron\\google-music-electron-master                                          \nelectron-packager . musicwrapper --debug=electron-packager --platform=win32 --arch=ia32 --version=1.2.2 --overwrite --out ./build/win                  \n\nelectron-packager Electron Packager 8.3.0 +0ms                                                                                                       \n  electron-packager Node v6.1.0 +2ms                                                                                                                   \n  electron-packager Host Operating system: win32 (x64) +1ms                                                                                            \n  electron-packager Packager Options: {\"_\":[\".\",\"musicwrapper\"],\"all\":false,\"deref-symlinks\":true,\"download\":{\"strictSSL\":true},\"overwrite\":true,\"prune\":\ntrue,\"debug\":\"electron-packager\",\"platform\":\"win32\",\"arch\":\"ia32\",\"version\":\"1.2.2\",\"out\":\"./build/win\",\"dir\":\".\",\"name\":\"musicwrapper\",\"protocols\":[]} +\n1ms                                                                                                                                                    \n  electron-packager Target Platforms: win32 +0ms                                                                                                       \n  electron-packager Target Architectures: ia32 +0ms                                                                                                    \n  electron-packager Inferring app-version from version in F:\\Development\\GitHub\\delebash\\Electron\\google-music-electron-master\\package.json +11ms      \n  electron-packager Application name: musicwrapper +1ms                                                                                                \n  electron-packager Target Electron version: 1.2.2 +0ms                                                                                                \n  electron-packager Ignored path regular expressions: [ '/node_modules/electron($|/)',                                                                 \n  '/node_modules/electron-prebuilt($|/)',                                                                                                              \n  '/node_modules/electron-packager($|/)',                                                                                                              \n  '/\\.git($|/)',                                                                                                                                      \n  '/node_modules/\\.bin($|/)',                                                                                                                         \n  '\\.o(bj)?$' ] +0ms                                                                                                                                  \n  electron-packager Downloading Electron with options {\"strictSSL\":true,\"platform\":\"win32\",\"arch\":\"ia32\",\"version\":\"1.2.2\"} +102ms                     \nPackaging app for platform win32 ia32 using electron v1.2.2                                                                                            \n  electron-packager Creating C:\\Users\\Daniel\\AppData\\Local\\Temp\\electron-packager\\win32-ia32-template +3ms                                             \n  electron-packager Extracting C:\\Users\\Daniel.electron\\electron-v1.2.2-win32-ia32.zip to C:\\Users\\Daniel\\AppData\\Local\\Temp\\electron-packager\\win32-ia3\n2-template +1ms                                                                                                                                        \n  electron-packager Initializing app in C:\\Users\\Daniel\\AppData\\Local\\Temp\\electron-packager\\win32-ia32\\musicwrapper-win32-ia32 from C:\\Users\\Daniel\\AppD\nata\\Local\\Temp\\electron-packager\\win32-ia32-template template +946ms                                                                                   \n  electron-packager Ignored paths based on the out param: [ 'F:\\Development\\GitHub\\delebash\\Electron\\google-music-electron-master\\build\\win' ] +22\nms                                                                                                                                                     \n  electron-packager Running npm prune --production +4s                                                                                                 \n  electron-packager Renaming electron.exe to musicwrapper.exe in C:\\Users\\Daniel\\AppData\\Local\\Temp\\electron-packager\\win32-ia32\\musicwrapper-win32-ia32 \n+6s                                                                                                                                                    \n  electron-packager Running rcedit with the options {\"version-string\":{},\"file-version\":\"2.13.0\",\"product-version\":\"2.13.0\"} +3ms                      \n  electron-packager Moving C:\\Users\\Daniel\\AppData\\Local\\Temp\\electron-packager\\win32-ia32\\musicwrapper-win32-ia32 to build\\win\\musicwrapper-win32-ia32 +\n263ms                                                                                                                                                  \nWrote new app to build\\win\\musicwrapper-win32-ia32                                                                                                       . \n",
    "briandk": "I had forgotten about building a Mac app from other OSes. \nI understand wanting to avoid os-specific instructions, but I think we shouldn't force users to fend for themselves on things we know the answers to. \nFor example, on windows OR Mac one can use this: https://iconverticons.com/online/\nFree for online use, $5 to get the app for Windows/Linux. ",
    "jisensee": "Awesome, thanks a lot!. ",
    "miftari0": "How can i update electron to 8.0.0\n@malept . ",
    "kuworking": "If I create the folder node_modules in the resources folder (inside .exe folder), and copy there the highcharts folder, then it works.\nIs it the way it is supposed to work??. I have changed the app and installed everything fresh (on a new computer) without bower, but I am facing the same problem which is: no dependencies are installed in the .exe package.\nI can solve that by manually creating a node-modules folder into the resources folder, but I'd say this is not the expected behavior.\nMy package.json\n{\n  \"name\": \"test\",\n  \"license\": \"GPL-3.0\",\n  \"productName\": \"test_electron\",\n  \"version\": \"1.0.0\",\n  \"author\": \"test\",\n  \"description\": \"test\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/username/repository.git\"\n  },\n  \"devDependencies\": {\n    \"electron\": \"^1.4.12\",\n    \"electron-packager\": \"^8.4.0\"\n  },\n  \"dependencies\": {\n    \"angular\": \"^1.6.0\",\n    \"angular-resource\": \"^1.6.0\",\n    \"angular-route\": \"^1.6.0\",\n    \"angular-sanitize\": \"^1.6.0\",\n    \"highcharts\": \"^5.0.6\"\n  },\n  \"scripts\": {\n    \"start\": \"./node_modules/.bin/electron app\",\n    \"package\": \"electron-packager ./app test_test --platform=win32 --arch=x64  --asar=true\",\n  }\n}\n. Now I have understood. My problem was that I was mixing \"folders\". Since I had the app in the /app folder, these modules should have been installed under the /app folder and not under the main / folder. Once done, the node-module requirements are well packaged.\nThanks!. ",
    "xiaoweibaniu": "I have same problem. I don't understood your solution.Can you be in detail?. ",
    "ssjzhong": "@malept thanks for your project, It's great.\nWe meet the similar issue, can you help? \nWe have one Angular 2+ app and hosted in Electron. Below are the code structure:\n--dist\n--node_modules\n--src\n   --app(Here are source code of Angular 2+)\n   --electron\n        - package.json(for electron)\n        - electron.js(electron entry will import some 3rd party JS like **electron-log**)\n--angular-cli.json\n--package.json(For angular 2+ app)\nFirst, we build the Angular project using web-pack to dist folder and copy the electron source code to dist  folder. \nThen we can run electron-packager on the path .\\dist.\nThe question is that the packager won't install the 3rd party JS module which defined in ./src/electron/package.json. \nIf I copy the packages to the dist folder manully, It works.\nSo can you please advice a correctly way to use electron packager for this case?\n. @malept Thank you very much.  \nThanks for your advice, will got to community.\nA quick question here, for the sub-folder, Running npm install --production is the best way? Do you have any plan to support getting the node_module from the parent path.. ",
    "ZoolWay": "Thanks @malept , did not know about DEBUG=*.\nHere is the gist: https://gist.github.com/ZoolWay/bee85209aacc45e4114de155b78919f5\nTo me looks like it is just stopping in the middle of things.. I updated the gist using the tmpdir option to use D:\\tmp - so everything should be on drive D:. No success.\nAlso I moved the folder directly under D:\\ to have no space in the path and a shorter name. Still no success.\n. I have now tried a different machine but I only got Win 10 machines here. The same result.\nAlso note that the same command line works for the electron-quickstart project (cloned, npm installed, packaged) - so I am not sure.\nFailing the packaging without any error, thats really strange.\nI might be able to test it in a Linux VM but not before Sunday. But you could try with my repo by yourself if you got a minute to spare ( https://github.com/ZoolWay/electron-typescript-aurelia-starter ).\nOtherwise I will come back after a Linux test. Let me know if I can try something else or make it more verbose in any way.. Ok, found an old VM with Ubuntu and installed nodejs, etc. plus wine.\nBuilding the linux package works and building the win32-x86 package works there too. I updated the gist with the log (DEBUG=*) from the latter in case it helps.. I tried --ignore=node_modules too and at least I get a package now. Have to verify if the others errors are mine or by packager.. ",
    "dougestey": "Interestingly, this also fails using https://github.com/Microsoft/BashOnWindows. ",
    "mmmmeng3": "```\n\ngamempire@1.0.0 package C:\\Users\\Jiaqin Meng\\GamempireApp\\client\nelectron-packager ./ Gamempire --overwrite --app-version=1.0.0 --platform=win32 --arch=all --out=../demo --version=electronVersion\n\nThe version parameter is deprecated, use electronVersion instead\nPackaging app for platform win32 ia32 using electron v1.4.13`\n```\nthen it is crashed for no reason and no error log appears.i am looking for a solution to package \n. i dont know if this help. i add flag with --ignore=node_,modules. it solves all my problem.. ",
    "aeneasr": "I am experiencing the same problem on Windows 10 64 bit. Packaging the same project works fine on OSX.\nHere is my log: https://gist.github.com/arekkas/bee174bac37357a8910f48693fd5a1b7. My suspicion is a long path issue in one of the node modules. Nothing concrete yet though.. @malept so apparently we make it past the last statement in common.js:\njs\ninitializeApp()\n// ...\n    series(operations, function (err) {\n      console.log('cb err', err) // this is never being called\n      if (err) return callback(err)\n      callback(null, tempPath)\n    })\n    console.log('end') // this gets executed\n  },\nbut we're not making it in the callback in win32.js:\njs\n  createApp: function createApp (opts, templatePath, callback) {\n    common.initializeApp(opts, templatePath, path.join('resources', 'app'), function buildWinApp (err, tempPath) {\n      console.log('init cb') // we don't make it until here. I've tried this hack to debug which operation is causing the trouble, it seems like it's operation 1:\njs\n    series(operations.map((o, k) => (args) => {\n      console.log('operation', k) // prints \"operation 0\", \"operation 1\"\n      return o(args)\n    }), function (err) {\n      if (err) return callback(err)\n      callback(null, tempPath)\n    }). @malept yes, it's the second. although it seems that we're finishing that one too. my guess is that fs.copy is not calling the callback. I tried wrapping it in a try/catch block which doesn't say anything either. I'm currently investigating if it's a path issue or something.. ~ok, now it threw an error:~\nEPERM: operation not permitted, open 'D:\\Temp\\electron-packager\\win32-x64\\ORY Sites App-win32-x64\\resources\\app\\.git\\objects\\05\\f8aed8fed644d5c291c1a73b90366152964b24'\n. Ah, scrap my last comment. It was caused by me removing the options from fs.copy(opts.dir, appPath, {filter: ignore.userIgnoreFilter(opts), dereference: shouldDeref}, cb): fs.copy(opts.dir, appPath, cb). When I add it, same thing happens (it just quits) without any notice.. Could this be the cause?. Ok, damnit. :D \nSo I just tried this:\njs\n        try {\n          fs.copy(opts.dir, appPath, {filter: ignore.userIgnoreFilter(opts), dereference: shouldDeref}, () => {\n            console.log('GOT CALLED BACK')\n          })\n        } catch (e) {\n          console.error(e)\n        }\nwhich yields...nothing. So I guess it's something with the copy task that doesn't call the callback properly.. how does that work, npm i electron-packager@master?. I investigated if the issue is with spaces in the path (D:\\Temp\\electron-packager\\win32-x64\\ORY Sites App-win32-x64\\resources\\app) but it's not. I used the electron template with the same name and packaging that worked. One more indicator that this could be a long filename issue (it's in fs.copy, it's not reproducible with the boilerplate app, it's not the tmp path). Adding \"electron-packager\": \"git+https://github.com/electron-userland/electron-packager.git\", in the package.json did the trick. :)\nUnfortunately, the issue persists on the master branch.. upstream: https://github.com/jprichardson/node-fs-extra/issues/358\nLet's see what they say.. Thank you for being so responsive, not a lot of maintainers are!. Try upgrading to node 7.6.0. It seems to be working with that one!. ",
    "lauriebonete": "Any leads on this one? I'm stuck with the same issue for one of my projects. But my another project for win32 is completing without any issue.. I updated to Node 7.7.2 and it is now working as expected. Now that's a relief.\nThanks!. ",
    "C0ZEN": "I don't know why but --ignore=node_modules fixed my problem, thanks to @mmmmeng3.\nWithout it, the only thing I get from the run was :\nPackaging app for platform win32 x64 using electron v1.6.8.\nWith it :\nPackaging app for platform win32 x64 using electron v1.6.8\nWrote new app to release-app\\cogeo-app-win32-x64\n. ",
    "apexearth": "Adding --ignore=node_modules fixed my build issue, though I needed a package in there.\nDeleting my node_modules folder and then reinstalling with npm i fixed my problems.. ",
    "schrockwell": "The crash only occurs if the last full word is Helper, i.e. My AppHelper does not crash, but My App Helper does.\nWhat should happen if the string is found in the application name \u2013 just a console warning, or should the whole build fail?. ",
    "AhadCove": "I just attempted electron-forge import, but it failed when trying to install electron-prebuilt-compile, not sure if I should continue messing with it or not. ```\nAn unhandled error has occurred inside Forge:\nFailed to install modules: [\"electron-prebuilt-compile@1.4.13\"]\nWith output: npm ERR! Darwin 16.3.0\nnpm ERR! argv \"/usr/local/bin/node\" \"/usr/local/bin/npm\" \"install\" \"electron-prebuilt-compile@1.4.13\" \"--save-exact\" \"--save\"\nnpm ERR! node v7.4.0\nnpm ERR! npm  v4.0.5\nnpm ERR! code ETARGET\n```. Okay so should I continue to use this module or...??\n. Well I ran into the same problem using forge, for now I just want to get it working using the normal packager\n. This is version 0.36.7. I will try this now, I stayed away at first because I didn't understand the whole script thing. Thank you I will let you know how it goes. Yeah @dmitrykurochka \nMake a parent entitlement and a child entitlement:\nparent.plist\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n\n\ncom.apple.security.app-sandbox\n\ncom.apple.security.network.server\n\ncom.apple.security.network.client\n\n\n\n```\nchild.plist\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n\n\ncom.apple.security.app-sandbox\n\ncom.apple.security.inherit\n\n\n\n```\nWhen you're building the app refer to the entitlements with the flag\n--entitlements=parent.plist --entitlements-inherit=child.plist. Yeah, thats what I am thinking also. Okay I will try that. ",
    "dmitrykurochka": "@AhadCove Have you resolved an issue?\nBecause I faced the same issue. ",
    "soundar78": "@AhadCove, by this \n\nWhen you're building the app refer to the entitlements with the flag\n\nyou mean referring the entitlements here?\ncodesign -s \"$APP_KEY\" -f --entitlements \"$CHILD_PLIST\" \"$FRAMEWORKS_PATH/Electron Framework.framework/Versions/A/Electron Framework\"\ncos i tried this\ncodesign -s \"$APP_KEY\" -f --entitlements \"$PARENT_PLIST\" --entitlements-inherit \"$CHILD_PLIST\" \"$FRAMEWORKS_PATH/Electron Framework.framework/Versions/A/Electron Framework\" \nand still ran into that error.\nif possible, could you please guide me like where exactly i should refer the entitlements with a example?\n. ",
    "domenkozar": "I also can't get it to work, it's always electron app icon.. ",
    "Sandon": "using .ico when instantiating a BrowserWindow works for me. Thanks, @englishextra . ",
    "joews": "Thanks. I also thought that, but I see different results when running Electron.app. (v1.4.14).\nI realised that I can also repro the issue by opening bundles with open from the terminal. \nThe Electron Packager-built app reproduces the bug:\n```\nopen ./electron-quick-start-darwin-x64/electron-quick-start.app/Contents/MacOS/electron-quick-start\nlogs empty app.locale\n```\nElectron.app does not:\n```\nopen ./node_modules/electron/dist/Electron.app .\nlogs en-GB\n```. ",
    "seiyria": "A warning would be fantastic too. Anything to let me know that I'm doing something dumb is better than silence!. ",
    "tobiasrm": "Works perfectly fine. Thanks a lot for your professional help.. ",
    "Leonardonline": "@englishextra I took advantage of the lunch break to try to download as you suggested and ...it works! \nTHANK YOU\n. ",
    "patricknelson": "Took me a while to find this. I, like most people, am quite lazy and usually just CTRL+F to find the option. Maybe we could sprinkle in \"directory\" and/or \"output\" or even \"destination\" into that part of the document? Right now none of those words trigger and you'd have to find it from a ticket like this due to the keywords, or, actually being forced to read (gasp).. Right @malept  I see. Yes it does exist, however I suppose the problem is just that it's under a different option. Plus the formatting is not very easy to read. While that's not the main reason why I didn't find this option, it did contribute. Also note that this is coming from a relatively new user, so I may not be the only person who may encounter the same difficulty.. ",
    "KamyarGhajar": "Your welcome @malept and thanks for the answer.\nYes it does. As I've said it was working before, on the same project, but now it's not...even I did npm init again to setup the package.json file and then added the dependecies to the json file to install them again...but the error persistes. I have made a build folder and from there I run the command for the parent directory that has the package.json file and is the project's root folder.. @malept I've setup everything from ground-up (npm, project, packager,...) and it works fine now with mkdir a build folder in the project and in that directory I run: \nelectron-packager .. --all\nnot:\nelectron-packager . --all. BTW i'm running windows on Parallels 12 on macOS Sierra...maybe require() has a problem with path addresses on Parallels?!. Thanks @stroborobo . ",
    "kasperfred": "@malept I have a similar problem.\nAs requested, I setup a small Electron app based on the quick start. The steps I took were as following:\nI installed the electron-quick-start using its guide:\n```\nClone this repository\ngit clone https://github.com/electron/electron-quick-start\nGo into the repository\ncd electron-quick-start\nInstall dependencies\nnpm install\nRun the app\nnpm start\n```\nThen I installed electron-packager:\nnpm install --save-dev electron-packager\nWhile installing, it complained about using an outdated node.js version:\nnpm WARN engine electron-packager@8.5.1: wanted: {\"node\":\">= 4.0\"} (current: {\"node\":\"0.12.2\",\"npm\":\"2.7.4\"})\nnpm WARN engine get-package-info@1.0.0: wanted: {\"node\":\">= 4.0\"} (current: {\"node\":\"0.12.2\",\"npm\":\"2.7.4\"})\nnpm WARN engine read-pkg-up@2.0.0: wanted: {\"node\":\">=4\"} (current: {\"node\":\"0.12.2\",\"npm\":\"2.7.4\"})\nnpm WARN engine find-up@2.1.0: wanted: {\"node\":\">=4\"} (current: {\"node\":\"0.12.2\",\"npm\":\"2.7.4\"})\nnpm WARN engine read-pkg@2.0.0: wanted: {\"node\":\">=4\"} (current: {\"node\":\"0.12.2\",\"npm\":\"2.7.4\"})\nnpm WARN engine request@2.79.0: wanted: {\"node\":\">= 4\"} (current: {\"node\":\"0.12.2\",\"npm\":\"2.7.4\"})\nnpm WARN engine locate-path@2.0.0: wanted: {\"node\":\">=4\"} (current: {\"node\":\"0.12.2\",\"npm\":\"2.7.4\"})\nnpm WARN engine load-json-file@2.0.0: wanted: {\"node\":\">=4\"} (current: {\"node\":\"0.12.2\",\"npm\":\"2.7.4\"})\nnpm WARN engine path-type@2.0.0: wanted: {\"node\":\">=4\"} (current: {\"node\":\"0.12.2\",\"npm\":\"2.7.4\"})\nnpm WARN engine path-exists@3.0.0: wanted: {\"node\":\">=4\"} (current: {\"node\":\"0.12.2\",\"npm\":\"2.7.4\"})\nnpm WARN engine p-locate@2.0.0: wanted: {\"node\":\">=4\"} (current: {\"node\":\"0.12.2\",\"npm\":\"2.7.4\"})\nnpm WARN engine strip-bom@3.0.0: wanted: {\"node\":\">=4\"} (current: {\"node\":\"0.12.2\",\"npm\":\"2.7.4\"})\nnpm WARN engine p-limit@1.1.0: wanted: {\"node\":\">=4\"} (current: {\"node\":\"0.12.2\",\"npm\":\"2.7.4\"})\nnpm WARN deprecated node-uuid@1.4.7: use uuid module instead\nnpm WARN engine xmlbuilder@8.2.2: wanted: {\"node\":\">=4.0\"} (current: {\"node\":\"0.12.2\",\"npm\":\"2.7.4\"})\nNevertheless, the installation was successful and when I ran npm start, the welcome window opened saying I was running node 6 - something.\nI then edited the package.json file by adding \"build\": \"electron-packager . -all\" in the scripts section after \"start\". \nI then ran npm run-script build where it failed, again, complaining about the node version:\n```\n\nelectron-packager . -all\n\nCANNOT RUN WITH NODE 0.12.2\nElectron Packager requires Node 4.0 or above.\nnpm ERR! Windows_NT 6.3.9600\nnpm ERR! argv \"C:\\Program Files (x86)\\nodejs\\\\node.exe\" \"C:\\Program Files (x86)\\nodejs\\node_modules\\npm\\bin\\npm-cli.js\" \"run-script\" \"build\"\nnpm ERR! node v0.12.2\nnpm ERR! npm  v2.7.4\nnpm ERR! code ELIFECYCLE\nnpm ERR! electron-quick-start@0.1.0 build: electron-packager . -all\nnpm ERR! Exit status 1\nnpm ERR!\nnpm ERR! Failed at the electron-quick-start@0.1.0 build script 'electron-packager . -all'.\nnpm ERR! This is most likely a problem with the electron-quick-start package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     electron-packager . -all\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls electron-quick-start\nnpm ERR! There is likely additional logging output above.\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     C:\\Users\\Kasper\\Desktop\\test\\electron-quick-start\\npm-debug.log\n```\nThe npm-debug.log file is attached to this comment if it's any help. \nnpm-debug.txt\nEdit:\nI just grabbed the latest LTS release of node.js, and installed it to see if it would resolve the issue. It didn't. \n. ",
    "rico345100": "I already did, but with --ignore option, it's not working. This is my package.json:\n```json\n{\n  ...\n  \"devDependencies\": {\n    \"aliasify\": \"^2.1.0\",\n    \"babel-plugin-syntax-async-functions\": \"^6.13.0\",\n    \"babel-plugin-transform-class-properties\": \"^6.19.0\",\n    \"babel-plugin-transform-regenerator\": \"^6.20.0\",\n    \"babel-polyfill\": \"^6.20.0\",\n    \"babel-preset-es2015\": \"^6.18.0\",\n    \"babel-preset-react\": \"^6.16.0\",\n    \"babelify\": \"^7.3.0\",\n    \"browserify\": \"^13.1.1\",\n    \"browserify-css\": \"^0.9.2\",\n    \"electron-prebuilt\": \"^1.4.13\",\n    \"eslint\": \"^3.13.1\",\n    \"eslint-plugin-react\": \"^6.9.0\",\n    \"envify\": \"^4.0.0\",\n    \"gulp\": \"^3.9.1\",\n    \"gulp-cssnano\": \"^2.1.2\",\n    \"gulp-htmlmin\": \"^3.0.0\",\n    \"gulp-rename\": \"^1.2.2\",\n    \"gulp-sass\": \"^3.0.0\",\n    \"gulp-uglify\": \"^2.0.0\",\n    \"gulp-util\": \"^3.0.7\",\n    \"isomorphic-fetch\": \"^2.2.1\",\n    \"merge-stream\": \"^1.0.1\",\n    \"moment\": \"^2.17.1\",\n    \"persistify\": \"^1.1.1\",\n    \"react\": \"^15.4.1\",\n    \"react-copy-to-clipboard\": \"^4.2.3\",\n    \"react-dom\": \"^15.4.1\",\n    \"react-motion-ui-pack\": \"^0.10.2\",\n    \"react-qr\": \"0.0.2\",\n    \"react-redux\": \"^5.0.1\",\n    \"react-router\": \"^3.0.0\",\n    \"react-router-redux\": \"^4.0.7\",\n    \"react-router-transition\": \"0.0.6\",\n    \"redux\": \"^3.6.0\",\n    \"scssify\": \"^2.2.0\",\n    \"stringify\": \"^5.1.0\",\n    \"vinyl-buffer\": \"^1.0.0\",\n    \"vinyl-source-stream\": \"^1.1.0\",\n    \"watchify\": \"^3.8.0\",\n    \"yargs\": \"^6.5.0\"\n  },\n  \"dependencies\": {\n    \"mqtt\": \"^2.1.3\",\n    \"node-notifier\": \"^4.6.1\"\n  }\n}\n```. @MarshallOfSound No, I don't want to ignore mqtt and node-notifier. Those are I want to put inside of packaged app. So that's why I'm asking here.. My issue is same from first, I want to put the only specific node modules inside of packaged app, and they are 'mqtt' and 'node-notifier', with using '--ignore' option.\nI understood that electron-packager not includes node_modules, .vscode, npm-debug by default, but in my case, I have more files to exclude from package that I didn't mentioned it.\nFor instance, files that contain user configuration data created by node.js, and it shouldn't be included in packaged app. So basically, my problem wasn't solved just not using --ignore option.\nThese are actually I want to ignore from the packaged app, most of related development environment.\n- my-app-darwin-x64: packaged app for osx\n- my-app-win32-x64: packaged app for windows(ignoring these 2 packaged apps are for preventing including them self, like packaging them together with single command line)\n- userdata: User generated data\n- npm-debug\n- .vscode\n- gulpfile.js\n- gulpTasks: Seperated gulp scripts.\nMy question is simple: how do I include only \"specific\" node_modules, with using --ignore option? I don't wanna ignore mqtt, from the first to now, I never said like that.\nI think you just little confused from my --ignore option that I tried:\n--ignode='npm-debug|gulpfile.js|.vscode|^((?!node_modules/mqtt).)$'\nThe regex ^((?!node_modules/mqtt).)$ is for exclude every node modules, without node_modules/mqtt, not mqtt itself. There is no somekind of negate operator inside of RegExp, so I googgled for that, and that is just what am I tried from the post that I found, so that's not meaning that ignore mqtt, actually it's totally opposite.\nI told you already my regex was wrong, so please understand that I'm not good at regex. I just want to know that using --ignore option to \"not ignore\" mqtt and node-notifier modules.. @MarshallOfSound I checked your code, and I'm integrated with gulp now(I didn't knew that there was programatic API). But still, my problem is same, not resolved at all.\nI tried this: http://regexr.com/3f6c9\nInto my code:\n``javascript\nfunction buildExec(platform, done) {\n    if(!{ DARWIN: 1, WIN32: 1 }[platform]) {\n        throw new Error(Unsupported platform ${platform}.`);\n    }\nlet icon = { DARWIN: 'icon-osx.icns', WIN32: 'icon-win.ico' }[platform];\n\npackager({\n    asar: false,\n    arch: 'x64',\n    dir: global.__base,\n    icon: icon,\n    ignore: [\n        () => /^((?!node_modules\\/mqtt).)*$/g\n    ],\n    platform: platform.toLowerCase(),\n}, (err, appPaths) => {\n    if(err) {\n        throw new Error(err);\n    }\n\n    console.log(appPaths);\n});\n\n}\n```\nStill all node_modules in my packaged app. In my electron project, there a hundreds of node_modules for development(especially babel related), so I can't ignore the modules one by one, there are still hundreds of modules are inside of node_modules, even not listed on packaged.json!\n\nLook at this photo, you can see that how many dev-related modules are in my node_modules, I just want to ignore them all, not only mqtt and node-notifier, they are needed.. bash\n  electron-packager Electron Packager 8.5.1 +0ms\n  electron-packager Node v6.9.2 +0ms\n  electron-packager Host Operating system: darwin (x64) +1ms\n  electron-packager Packager Options: {\"asar\":false,\"arch\":\"x64\",\"dir\":\"/Users/rico345100/Desktop/work/aladdin-wallet-pc\",\"icon\":\"icon-osx.icns\",\"ignore\":[null],\"platform\":\"darwin\"} +0ms\n  electron-packager Target Platforms: darwin +0ms\n  electron-packager Target Architectures: x64 +0ms\n  electron-packager Inferring application name from name in /Users/rico345100/Desktop/work/aladdin-wallet-pc/package.json +9ms\n  electron-packager Inferring app-version from version in /Users/rico345100/Desktop/work/aladdin-wallet-pc/package.json +0ms\n  electron-packager Inferring target Electron version from electron-prebuilt in /Users/rico345100/Desktop/work/aladdin-wallet-pc/package.json +3ms\n  electron-packager Application name: aladdin-wallet-pc +0ms\n  electron-packager Target Electron version: 1.4.13 +0ms\n  electron-packager Ignored path regular expressions: [ [Function],\n  '/node_modules/electron($|/)',\n  '/node_modules/electron-prebuilt($|/)',\n  '/node_modules/electron-packager($|/)',\n  '/\\\\.git($|/)',\n  '/node_modules/\\\\.bin($|/)',\n  '\\\\.o(bj)?$' ] +0ms\n  electron-packager Downloading Electron with options {\"platform\":\"darwin\",\"arch\":\"x64\",\"version\":\"1.4.13\"} +5ms\nPackaging app for platform darwin x64 using electron v1.4.13\n  electron-packager Creating /var/folders/ch/ynbfklxj0ys670qqb93g79840000gn/T/electron-packager/darwin-x64-template +229ms\n  electron-packager Extracting /Users/rico345100/.electron/electron-v1.4.13-darwin-x64.zip to /var/folders/ch/ynbfklxj0ys670qqb93g79840000gn/T/electron-packager/darwin-x64-template +0ms\n  electron-packager Initializing app in /var/folders/ch/ynbfklxj0ys670qqb93g79840000gn/T/electron-packager/darwin-x64/aladdin-wallet-pc-darwin-x64 from /var/folders/ch/ynbfklxj0ys670qqb93g79840000gn/T/electron-packager/darwin-x64-template template +992ms\n  electron-packager Ignored paths based on the out param: [ '/Users/rico345100/Desktop/work/aladdin-wallet-pc/aladdin-wallet-pc-darwin-ia32',\n  '/Users/rico345100/Desktop/work/aladdin-wallet-pc/aladdin-wallet-pc-darwin-x64',\n  '/Users/rico345100/Desktop/work/aladdin-wallet-pc/aladdin-wallet-pc-darwin-armv7l',\n  '/Users/rico345100/Desktop/work/aladdin-wallet-pc/aladdin-wallet-pc-linux-ia32',\n  '/Users/rico345100/Desktop/work/aladdin-wallet-pc/aladdin-wallet-pc-linux-x64',\n  '/Users/rico345100/Desktop/work/aladdin-wallet-pc/aladdin-wallet-pc-linux-armv7l',\n  '/Users/rico345100/Desktop/work/aladdin-wallet-pc/aladdin-wallet-pc-mas-ia32',\n  '/Users/rico345100/Desktop/work/aladdin-wallet-pc/aladdin-wallet-pc-mas-x64',\n  '/Users/rico345100/Desktop/work/aladdin-wallet-pc/aladdin-wallet-pc-mas-armv7l',\n  '/Users/rico345100/Desktop/work/aladdin-wallet-pc/aladdin-wallet-pc-win32-ia32',\n  '/Users/rico345100/Desktop/work/aladdin-wallet-pc/aladdin-wallet-pc-win32-x64',\n  '/Users/rico345100/Desktop/work/aladdin-wallet-pc/aladdin-wallet-pc-win32-armv7l' ] +2ms\n  electron-packager Running npm prune --production +6s\n  electron-packager Copying icon \"icon-osx.icns\" to app's Resources as \"electron.icns\" +7s\n  electron-packager Renaming Electron to aladdin-wallet-pc in /var/folders/ch/ynbfklxj0ys670qqb93g79840000gn/T/electron-packager/darwin-x64/aladdin-wallet-pc-darwin-x64/Electron.app/Contents/MacOS +2ms\n  electron-packager Renaming Electron Helper to aladdin-wallet-pc Helper in /var/folders/ch/ynbfklxj0ys670qqb93g79840000gn/T/electron-packager/darwin-x64/aladdin-wallet-pc-darwin-x64/Electron.app/Contents/Frameworks/Electron Helper.app/Contents/MacOS +1ms\n  electron-packager Renaming Electron Helper.app to aladdin-wallet-pc Helper.app in /var/folders/ch/ynbfklxj0ys670qqb93g79840000gn/T/electron-packager/darwin-x64/aladdin-wallet-pc-darwin-x64/Electron.app/Contents/Frameworks +0ms\n  electron-packager Renaming Electron Helper EH to aladdin-wallet-pc Helper EH in /var/folders/ch/ynbfklxj0ys670qqb93g79840000gn/T/electron-packager/darwin-x64/aladdin-wallet-pc-darwin-x64/Electron.app/Contents/Frameworks/Electron Helper EH.app/Contents/MacOS +0ms\n  electron-packager Renaming Electron Helper EH.app to aladdin-wallet-pc Helper EH.app in /var/folders/ch/ynbfklxj0ys670qqb93g79840000gn/T/electron-packager/darwin-x64/aladdin-wallet-pc-darwin-x64/Electron.app/Contents/Frameworks +0ms\n  electron-packager Renaming Electron Helper NP to aladdin-wallet-pc Helper NP in /var/folders/ch/ynbfklxj0ys670qqb93g79840000gn/T/electron-packager/darwin-x64/aladdin-wallet-pc-darwin-x64/Electron.app/Contents/Frameworks/Electron Helper NP.app/Contents/MacOS +1ms\n  electron-packager Renaming Electron Helper NP.app to aladdin-wallet-pc Helper NP.app in /var/folders/ch/ynbfklxj0ys670qqb93g79840000gn/T/electron-packager/darwin-x64/aladdin-wallet-pc-darwin-x64/Electron.app/Contents/Frameworks +0ms\n  electron-packager Moving /var/folders/ch/ynbfklxj0ys670qqb93g79840000gn/T/electron-packager/darwin-x64/aladdin-wallet-pc-darwin-x64 to /Users/rico345100/Desktop/work/aladdin-wallet-pc/aladdin-wallet-pc-darwin-x64 +0ms\n[ '/Users/rico345100/Desktop/work/aladdin-wallet-pc/aladdin-wallet-pc-darwin-x64' ]. Well, I don't know what was the problem, I rerun the packaging task, and it's now no dev related modules inside of it.\nBut still I have lots of not dependency modules in the packaged app:\n\nThose modules doesn't take much spaces, but total files almost 1000. Are they needed to run Electron? Why are they inside of package?. Well then, I think it's resolved, but I still don't know what was the problem. Anyway thank you for helping me, I'm closing this issue now. Thanks again!. ",
    "TheNoim": "@MarshallOfSound damit, you are right. What could i use to prevent this ?. ",
    "j-f1": "Which theme would be better?\nI could probably change index.md to be a symlink to the readme, but I don\u2019t know if that would work.. Thanks!. @malept No, I\u2019ll revert that. I emailed GitHub support, and they told me that the only way to have http://electron-userland.github.io/electron-packager/ be the readme would be to have GitHub Pages target the root of the master branch or the gh-pages branch.. @malept How would you like to go forward? We can:\n Move anything that should be public on the web to the gh-pages branch, or\n Make the entire master branch be on GitHub pages.. I\u2019m closing this until I figure out the auto-generation. I\u2019ll reopen when I\u2019m ready for review.. @malept  Sorry for the delay. I\u2019ve added the changes requested.\nThe problem doesn\u2019t make sense. Presumably, the files are minified somehow (see this line).\nWhen I try to run the test locally, it downloads Electron, then nothing happens.\nI\u2019m also not exactly sure what to test for camelCase.. I tried having the symlink go the other way, but then GitHub Pages wouldn\u2019t build. Do you have any suggestions for how to make it work on Windows and GH Pages?. @malept Should I place the deprecated names right underneath the new one, or should I group them at the bottom?. You might want to add an HTML comment indicating how to check the boxes.. ",
    "stroborobo": "@malept @KamyarGhajar This is an issue with Parallels' shared folders, if you copy the output to local disk it'll work. Visual Studio for example also has some problems if you're working in shared folders, so this is not an electron-packager issue.. ",
    "askucher": "@englishextra Some npm packages require to do:  \nsudo apt-get install something\nSo, the question is how to do that with Electron Packager?\nBut looks like Electron Forge is close to answer. ",
    "FinnProjects": "I use WIndows 7 Ultimate, x64 version\nI installed using \"npm install electron-packager -g\"\nI've tried using:\n\"electron-packager mydirhere myappname --all\" and \"electron-packager . --all\"\nI tried using \"CMD\" and \"PowerShell\", both result in the same error.. I use \"npm build\":\n \"scripts\": {\n    \"start\": \"electron .\",\n    \"build\" : \"electron-packager . --all\"\n  }. I used devDependencies, not work\nUsed npm install electron-packager --save-dev for install\nResult: npm build\nscreenshot (http://prntscr.com/e4m5ui)\nMy Package.json\n```\n{\n  \"name\": \"electron-quick-start\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A minimal Electron application\",\n  \"main\": \"main.js\",\n  \"scripts\": {\n    \"start\": \"electron .\",\n    \"build\": \"electron-packager . --all\"\n  },\n  \"repository\": \"https://github.com/electron/electron-quick-start\",\n  \"keywords\": [\n    \"Electron\",\n    \"quick\",\n    \"start\",\n    \"tutorial\",\n    \"demo\"\n  ],\n  \"author\": \"GitHub\",\n  \"license\": \"CC0-1.0\",\n  \"devDependencies\": {\n    \"electron\": \"^1.4.1\",\n    \"electron-packager\": \"^8.5.1\"\n  }\n}\n```. Error Message\nO termo 'electron-packager' n\u00e3o \u00e9 reconhecido como nome de cmdlet, fun\u00e7\u00e3o, arquivo de script ou programa oper\u00e1vel. Veri\nfique a grafia do nome ou, se um caminho tiver sido inclu\u00eddo, veja se o caminho est\u00e1 correto e tente novamente.\nEm linha:1 caractere:18\n+ electron-packager <<<<\n    + CategoryInfo          : ObjectNotFound: (electron-packager:String) [], CommandNotFoundException\n    + FullyQualifiedErrorId : CommandNotFoundException\nEnglish:\nThe term 'electron-packager' is not recognized as a cmdlet name, function, script file, or operating program. Veri\nIf you are looking for a friend or a friend, click here.\nOnline: 1 character: 18\n+ Electron Packer <<<<\n+ CategoryInfo: ObjectNotFound: (electron-packager: String) [], CommandNotFoundException\n+ FullyQualifiedErrorId: CommandNotFoundException\nPS Module Patch\nC:\\Users\\Administrador\\Documents\\WindowsPowerShell\\Modules;C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\\nI used npm install electron --save-dev\n\nAnd why are you building from PS as admin, and not the local user from cmd or with .bat file, just curious?\n\nI am using Administrator Account. What's your $PSVersionTable.PSVersion?\nI'm using\n```\nMajor 2\nMinor 0\nBuild -1\nRevision -1\n```. screenshot (http://prntscr.com/e4sxce)\n'electron-packager' n\u00e3o \u00e9 reconhecido como um comando in\nou externo, um programa oper\u00e1vel ou um arquivo em lotes.\nEnglish:\n'electron-packager' is not recognized as a command in or external, an operational program or a batch file.. worked perfectly, I had followed tutorial videos (youtube) but it did not work, followed his steps worked!\nThank you very much :). ",
    "nshukla6": "npm install electron-packager -g\nnpm install electron-packager --save-dev\nInstall both locally as well as globally will solve the issue. ",
    "Akronae": "Sorry i forgot \"=\". But electron-packager give me the same output ^^. I have read all the .txt.. and i may be dumb but it's what i did.. :/\n```\nelectron-packager   [options...]\nelectron-packager ./client/main.js app.exe --platform=win32 --arch=ia32 --electron-version=1.4.15\n```\nSo i read the whole file, and i place the arguments in the reading order\nelectron-packager ./client/main.js app.exe --arch=ia32 --platform=win32 --electron-version=1.4.15\nAnd it still the same output.. :(\nEDIT: I checked for path error, so i tried to write a bad path and electron-packager give me a not such file error, so i think the 2 first args are good\n. When i do\n```\ncd client\nelectron-packager ./ app.exe --arch=ia32 --platform=win32 --electron-version=1.4.15\n``\nindeed ofelectron-packager ./client/main.js app.exe --arch=ia32 --platform=win32 --electron-version=1.4.15\n`\nIt's works fine !\nI will output debug log for that you can fixe this issue. sh*t, sorry i skipped the 1st grade... ",
    "Riokai": "Got it, Thanks!. ",
    "Arcath": "I did yes! Sorry about that. I made my build script ages ago and haven't touched it since.. ",
    "choxi": "Thank you for the quick response! You were right, specifically I started o use Electron's app.getAppPath function to construct the path to my config file and it works fine.. ",
    "caishengmao": "why?. @malept \nthis is error massage,run 'npm run build' Can't pack.\nD:\\wamp\\hfx_mac\\app>npm run build\n\nmacIm@1.0.0 build D:\\wamp\\hfx_mac\\app\nelectron-packager . fetion_0215_1 --platform=win32 --arch=ia32 --overwrite --i\ncon=./imgs/icon-ott-pc.ico --out=../dist --ignore=.git --version 1.2.4\n\nThe version parameter is deprecated, use electronVersion (or --electron-version\nin the CLI) instead\nUnable to determine Electron version. Please specify an Electron version\nFor more information, please see\nhttps://github.com/electron-userland/electron-packager/blob/master/docs/api.md#v\nersion\nnpm ERR! Windows_NT 6.1.7601\nnpm ERR! argv \"D:\\Program Files (x86)\\nodejs\\node.exe\" \"D:\\Program Files (x8\n6)\\nodejs\\node_modules\\npm\\bin\\npm-cli.js\" \"run\" \"build\"\nnpm ERR! node v6.9.0\nnpm ERR! npm  v3.10.8\nnpm ERR! code ELIFECYCLE\nnpm ERR! macIm@1.0.0 build: electron-packager . fetion_0215_1 --platform=win32\n--arch=ia32 --overwrite --icon=./imgs/icon-ott-pc.ico --out=../dist --ignore=.gi\nt --version 1.2.4\nnpm ERR! Exit status 1\nnpm ERR!\nnpm ERR! Failed at the macIm@1.0.0 build script 'electron-packager . fetion_0215\n_1 --platform=win32 --arch=ia32 --overwrite --icon=./imgs/icon-ott-pc.ico --out=\n../dist --ignore=.git --version 1.2.4'.\nnpm ERR! Make sure you have the latest version of node.js and npm installed.\nnpm ERR! If you do, this is most likely a problem with the macIm package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     electron-packager . fetion_0215_1 --platform=win32 --arch=ia32 --ov\nerwrite --icon=./imgs/icon-ott-pc.ico --out=../dist --ignore=.git --version 1.2.\n4\nnpm ERR! You can get information on how to open an issue for this project with:\nnpm ERR!     npm bugs macIm\nnpm ERR! Or if that isn't available, you can get their info via:\nnpm ERR!     npm owner ls macIm\nnpm ERR! There is likely additional logging output above.\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     D:\\wamp\\hfx_mac\\app\\npm-debug.log\n. @MarshallOfSound   hi, I use the \nelectron version: 1.2.4\nnode version: 6.9.0\nelectron-packager:5.8.0 \nCan you tell me how to replace --electron-version? Thank you!\n\n. @MarshallOfSound  no. You mean is not defined  electron version  in the 'build' scriptof the package.json ?. @MarshallOfSound  Finally solved,Thank you for your guidance.. @MarshallOfSound Didn't find a solution.. year,sorry!. @MarshallOfSound   npm version 5.3.0. ",
    "vonch": "\u4f60\u7684\u89e3\u51b3\u4e86\u5417\uff1f\u534a\u5929\u6211\u4e5f\u6ca1\u770b\u61c2\u5565\u610f\u601d. the project is yours electron-quick-start \nI dont modify anything.\n\"packsge.json\"\n{\n  \"name\": \"your-app\",\n  \"version\": \"0.1.0\",\n  \"main\": \"main.js\",\n  \"scripts\": {\n    \"start\": \"electron .\",\n    \"packager\": \"electron-packager ./app HelloWorld --all --out ./OutApp --electron-version 1.6.6 --overwrite --icon=./logo.ico --download.mirror=https://npm.taobao.org/mirrors/electron/\"\n  },\n  \"devDependencies\": {\n    \"electron-packager\": \"^8.6.0\",\n    \"electron-prebuilt\": \"^1.4.13\"\n  }\n}\n. main.js\nconst {app, BrowserWindow} = require('electron')\nconst path = require('path')\nconst url = require('url')\n// \u4fdd\u6301\u4e00\u4e2a\u5bf9\u4e8e window \u5bf9\u8c61\u7684\u5168\u5c40\u5f15\u7528\uff0c\u5982\u679c\u4f60\u4e0d\u8fd9\u6837\u505a\uff0c\n// \u5f53 JavaScript \u5bf9\u8c61\u88ab\u5783\u573e\u56de\u6536\uff0c window \u4f1a\u88ab\u81ea\u52a8\u5730\u5173\u95ed\nlet win\nfunction createWindow () {\n  // \u521b\u5efa\u6d4f\u89c8\u5668\u7a97\u53e3\u3002\n  win = new BrowserWindow({width: 800, height: 600})\n// \u52a0\u8f7d\u5e94\u7528\u7684 index.html\u3002\n  win.loadURL(url.format({\n    pathname: path.join(__dirname, 'index.html'),\n    protocol: 'file:',\n    slashes: true\n  }))\n// \u6253\u5f00\u5f00\u53d1\u8005\u5de5\u5177\u3002\n  // win.webContents.openDevTools()\n// \u5f53 window \u88ab\u5173\u95ed\uff0c\u8fd9\u4e2a\u4e8b\u4ef6\u4f1a\u88ab\u89e6\u53d1\u3002\n  win.on('closed', () => {\n    // \u53d6\u6d88\u5f15\u7528 window \u5bf9\u8c61\uff0c\u5982\u679c\u4f60\u7684\u5e94\u7528\u652f\u6301\u591a\u7a97\u53e3\u7684\u8bdd\uff0c\n    // \u901a\u5e38\u4f1a\u628a\u591a\u4e2a window \u5bf9\u8c61\u5b58\u653e\u5728\u4e00\u4e2a\u6570\u7ec4\u91cc\u9762\uff0c\n    // \u4e0e\u6b64\u540c\u65f6\uff0c\u4f60\u5e94\u8be5\u5220\u9664\u76f8\u5e94\u7684\u5143\u7d20\u3002\n    win = null\n  })\n}\n// Electron \u4f1a\u5728\u521d\u59cb\u5316\u540e\u5e76\u51c6\u5907\n// \u521b\u5efa\u6d4f\u89c8\u5668\u7a97\u53e3\u65f6\uff0c\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u3002\n// \u90e8\u5206 API \u5728 ready \u4e8b\u4ef6\u89e6\u53d1\u540e\u624d\u80fd\u4f7f\u7528\u3002\napp.on('ready', createWindow)\n// \u5f53\u5168\u90e8\u7a97\u53e3\u5173\u95ed\u65f6\u9000\u51fa\u3002\napp.on('window-all-closed', () => {\n  // \u5728 macOS \u4e0a\uff0c\u9664\u975e\u7528\u6237\u7528 Cmd + Q \u786e\u5b9a\u5730\u9000\u51fa\uff0c\n  // \u5426\u5219\u7edd\u5927\u90e8\u5206\u5e94\u7528\u53ca\u5176\u83dc\u5355\u680f\u4f1a\u4fdd\u6301\u6fc0\u6d3b\u3002\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\napp.on('activate', () => {\n  // \u5728\u8fd9\u6587\u4ef6\uff0c\u4f60\u53ef\u4ee5\u7eed\u5199\u5e94\u7528\u5269\u4e0b\u4e3b\u8fdb\u7a0b\u4ee3\u7801\u3002\n  // \u4e5f\u53ef\u4ee5\u62c6\u5206\u6210\u51e0\u4e2a\u6587\u4ef6\uff0c\u7136\u540e\u7528 require \u5bfc\u5165\u3002\n  if (win === null) {\n    createWindow()\n  }\n})\n// \u5728\u8fd9\u6587\u4ef6\uff0c\u4f60\u53ef\u4ee5\u7eed\u5199\u5e94\u7528\u5269\u4e0b\u4e3b\u8fdb\u7a0b\u4ee3\u7801\u3002\n// \u4e5f\u53ef\u4ee5\u62c6\u5206\u6210\u51e0\u4e2a\u6587\u4ef6\uff0c\u7136\u540e\u7528 require \u5bfc\u5165\u3002\nand\n\n. ",
    "sreekumari": "its running as a electron app without packaging.but when packaged we are getting the error\n. thanks for your suggession.my file name for electron was main.js .while\npackaging with webpack.it was packaged into an internal directory.copied it\nto root and then addded main into package.json as\"main\":\"main.js\".solved\nthe problem.\nOne suggestion seen was while packaging electron and angular Keep angular\nrelated contents in the root.main.js and angular stuff into some src etc..\nOn Feb 16, 2017 10:13 PM, \"Mark Lee\" notifications@github.com wrote:\nIn order to debug your problem further, we need a minimal testcase to\nreproduce your problem. Using the electron-quick-start\nhttps://github.com/electron/electron-quick-start repository as a base,\ncould you please create a minimal Electron app that illustrates the issue\nyou described, and post a link to it here?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/electron-userland/electron-packager/issues/588#issuecomment-280385896,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AS7vUh3_5PfBQii6LtYFSjh9PzD1_QFyks5rdHybgaJpZM4MCnNa\n.\n. ",
    "hlfshell": "On a hunch I rolled back to electron-packager 7.0.0. The build works fine, though it errors out on an lstat, the resulting app.exe is still there with no performance issues. I will try and locate when this issue was initially brought in.. The issue was introduced in release 7.7.0 - version 7.6.0 does the build fine as previously stated.. Agreed, I was just looking through commits between tags 7.6.0 and 7.7.0 and it seems to be minimal changes. BUT I just removed 7.6.0 and re-installed 7.7.0 - same result, albeit different presentation than the latest version.\n\u03bb electron-packager . app --platform=win32 --arch=x64\nPackaging app for platform win32 x64 using electron v1.4.13\nFatal error: Unable to commit changes\n undefined\nrcedit is brought in through node-rcedit - is there a difference in the version being pulled down between 7.7.0 and 7.6.0 that I'm not seeing to narrow down the problem in rcedit?. ....and the answer is no, both request ^0.5.1.\nMy 7.7.0 install install and 7.6.0 install also have 0.5.1 rcedit in their node_modules, so its not a problem with versioning of rcedit. I've also confirmed that 7.6.0 will build where 7.7.0 does not. I'm at a loss.. > Where is your project located? In your home directory? Have you tried to disable MS Defender or another antivirus?\nI'm on a company computer, so there is antivirus via Cylance. I can try building the project tonight on a personal computer without the antivirus to see if there's a difference.\nI'm performing the build in C:\\Users\\myuser\\project-folder\\\n\n@hlfshell I think I know what the problem is. Could you link a gist of your package.json file?\n\nHere you go!\n{\n  \"name\": \"radio-distance-tester\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Tester app for featherwing LoRa radio devices\",\n  \"main\": \"main.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": {\n    \"email\": \"my@email.com\",\n    \"name\": \"my name\"\n  },\n  \"license\": \"Private\",\n  \"dependencies\": {\n    \"electron-prebuilt\": \"^1.4.13\",\n    \"serialport\": \"^4.0.7\"\n  },\n  \"devDependencies\": {\n    \"electron-rebuild\": \"^1.5.7\"\n  }\n}\nI HAVE done the electron-rebuild process for serialport, though not every time. Could that be a cause?. @malept Unfortunately that's a no-go. Re-installed v7.7.0:\n\u03bb electron-packager . app --platform=win32 --arch=x64 --app-version=0.0.1\nPackaging app for platform win32 x64 using electron v1.4.13\nFatal error: Unable to commit changes\n undefined. Sorry, my mistake. Re-ran:\n\u03bb electron-packager . app --platform=win32 --arch=x64 --app-version=\nPackaging app for platform win32 x64 using electron v1.4.13\nFatal error: Unable to commit changes\n undefined\nSame result, I'm afraid.. Yes, I will try to build elsewhere and will report back. Searching for a difference or do you have an idea in mind?. Afraid the only Linux boxes I have are raspberry pis, so that would prove difficult to build from.\nWill report back with a different machine in a bit.. I found that earlier, and created a .ico using an online convereter in case it was as simple as not providing an icon. But let's give it a try with everything else we've done so far. Using v7.7.0:\nPackaging app for platform win32 x64 using electron v1.4.13\nFatal error: Unable to commit changes\n undefined\nNo-go I'm afraid.. We've re-imaged our systems due to a company buyout, and the problem magically went away.\nI've confirmed now on two other systems that this does not occur in Windows 10. This leads me to believe that something locally in our company caused the issue. Not sure why, since there was no difference in the rcedit executables between our versions.\nLet's close this issue unless someone else ever runs into it.\nThanks for the help everyone!. ",
    "JAA17": "I am having a similar problem. I have just started with electron-packager and am a new member here at Github. If this is different, let me know and I will start a new issue.\nI sometimes get the error above, but also get the more frequent error:\nERR! Error: EPERM: operation not permitted, rmdir c:\\Users\\Jon\\Desktop\\Test\\distwin32a\\mytest1-win32-x64\\resources\\app\\node_modues\nMy script is:\n\"build-win32\": \"electron-packager . --electron-version 1.4.15 --tmpdir=false --platform win32 --icon ./assets/icon.ico --out ./distwin32a --overwrite\"\nMy package is:\n{\n  \"name\": \"mytest1\",\n  \"version\": \"1.0.0\",\n  \"description\": \"MyTest2\",\n  \"main\": \"main.js\",\n  \"scripts\": {\n    \"start\": \"electron main.js\",\n    \"build-all\": \"electron-packager . --electron-version 1.4.15 --tmpdir=false --platform all --icon ./assets/icon --out ./dist\",\n    \"build-win32\": \"electron-packager . --electron-version 1.4.15 --tmpdir=false --platform win32 --icon ./assets/icon.ico --out ./distwin32a --overwrite\",\n    \"build-linux\": \"electron-packager . --electron-version 1.4.15 --tmpdir=false --platform linux --icon ./assets/background.png --out ./distlinux --overwrite\",\n    \"build-osx\": \"electron-packager . --electron-version 1.4.15 --tmpdir=false --platform darwin --icon ./assets/icon.icns --out ./distdarwin --overwrite\"\n  },\n  \"private\": true,\n  \"build\": {\n    \"appId\": \"mycomany.myproduct\"\n  },\n  \"keywords\": [\n    \"Stuff\",\n    \"Stuff\"\n  ],\n  \"author\": \"JAA17\",\n  \"license\": \"SEE LICENSE IN LICENSE.TXT\",\n  \"devDependencies\": {\n    \"electron-packager\": \"^8.5.1\"\n  }\n}\nThe only thing I have in the background is Visual Studio where I do my code editing.\n. Sorry, you are right it is node_modules. I will correct the original post.\n. Everything exists up to:\nc:\\Users\\Jon\\Desktop\\Test\\distwin32a\\mytest1-win32-x64\\resources\\app\\\nThe node_modules does not exist in that folder. c:\\Users\\Jon\\Desktop\\Test\\distwin32a\\mytest1-win32-x64\\resources\\app\\ appears to have everything else from my c:\\Users\\Jon\\Desktop\\Test\\ folder where I execute the command line npm run build-win32.\nBUT, in c:\\Users\\Jon\\Desktop\\Test\\ I also have node_modules. So it appears node_modules should be copied from c:\\Users\\Jon\\Desktop\\Test\\ to c:\\Users\\Jon\\Desktop\\Test\\distwin32a\\mytest1-win32-x64\\resources\\app\\, but does not actually do it. So maybe when it thinks it has to delete node_modules in c:\\Users\\Jon\\Desktop\\Test\\distwin32a\\mytest1-win32-x64\\resources\\app\\ it cannot find it to delete? I am just guessing.\n. Hi, sorry for the delay. I am on UK time.\nI have done what you have asked and there is still a problem, but a different one. It is the one that the other guy had in the other thread where I originally raised this issue.\nSo I deleted c:\\Users\\Jon\\Desktop\\Test\\distwin32a manually in Windows File Manager and removed it from the Recycle Bin. I then removed --overwrite from the script resulting in the script being:\n\"build-win32a\": \"electron-packager . --electron-version 1.4.15 --tmpdir=false --platform win32 --icon ./assets/icon.ico --out ./distwin32a\"\nThe Error is now:\nPackaging app for platform win32 x64 using electron v1.4.15 rcedit.exe failed with exit code 1. Fatal error: Unable to commit changes\n. Hi malept. I have been trying what you asked this morning (Midday UK time) for the past half hour and am getting different results.\nAt present it always fails when I have the --overwrite argument with an EPERM error of some sort. Mostly it is EPERM rmdir, however I rarely I also get a EPERM lstaterror.\nAt the moment when I remove --overwrite there are two results.\nIt WORKS when I manually remove the distwin32 directory before I run npm run build-win32.\nIt IS PRESENTLY WORKING (but FAILED about half hour ago) when I do not manually remove the `distwin32' directory.. I have not touched this since I last heard from you. The first time I ran the command, I did not check to see if the distribution files were there or not. I got the unusual error.\n\nI do not know if the distribution directories were there or not and ran the command: electron-packager . --electron-version 1.4.15 --tmpdir=false --platform win32 --icon ./assets/icon.ico --out ./distwin32a --overwrite\n\nI got the following rare lstat error:\n```\nPackaging app for platform win32 x64 using electron v1.4.15\nCommand failed: npm prune --production\nnpm ERR! Windows_NT 10.0.14393\nnpm ERR! argv \"C:\\Program Files\\nodejs\\node.exe\" \"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js\" \"prune\" \"--production\"\nnpm ERR! node v6.9.5\nnpm ERR! npm  v3.10.10\nnpm ERR! path C:\\Users\\Jon\\Desktop\\Test\\distwin32a\\mytest1-win32-x64\\resources\\app\\node_modules\nnpm ERR! code EPERM\nnpm ERR! errno -4048\nnpm ERR! syscall lstat\nnpm ERR! Error: EPERM: operation not permitted, lstat 'C:\\Users\\Jon\\Desktop\\Test\\distwin32a\\mytest1-win32-x64\\resources\\app\\node_modules'\nnpm ERR!     at Error (native)\nnpm ERR!  { Error: EPERM: operation not permitted, lstat 'C:\\Users\\Jon\\Desktop\\Test\\distwin32a\\mytest1-win32-x64\\resources\\app\\node_modules'\nnpm ERR!     at Error (native)\nnpm ERR!   errno: -4048,\nnpm ERR!   code: 'EPERM',\nnpm ERR!   syscall: 'lstat',\nnpm ERR!   path: 'C:\\Users\\Jon\\Desktop\\Test\\distwin32a\\mytest1-win32-x64\\resources\\app\\node_modules' }\nnpm ERR!\nnpm ERR! Please try running this command again as root/Administrator.\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     C:\\Users\\Jon\\Desktop\\Test\\distwin32a\\mytest1-win32-x64\\resources\\app\\npm-debug.log\n```\n\nDoing absolutely nothing, just running the command again: electron-packager . --electron-version 1.4.15 --tmpdir=false --platform win32 --icon ./assets/icon.ico --out ./distwin32a --overwrite\n\nI got a success!!!:\nPackaging app for platform win32 x64 using electron v1.4.15\nWrote new app to distwin32a\\mytest1-win32-x64\n\nI manually deleted the distribution directories (in File Manager) and ran your requested command: electron-packager . --electron-version 1.4.15 --tmpdir=false --platform win32 --icon ./assets/icon.ico --out ./distwin32a --overwrite\n\nI get the error:\n```\nPackaging app for platform win32 x64 using electron v1.4.15\nCommand failed: npm prune --production\nnpm ERR! Windows_NT 10.0.14393\nnpm ERR! argv \"C:\\Program Files\\nodejs\\node.exe\" \"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js\" \"prune\" \"--production\"\nnpm ERR! node v6.9.5\nnpm ERR! npm  v3.10.10\nnpm ERR! path C:\\Users\\Jon\\Desktop\\Test\\distwin32a\\mytest1-win32-x64\\resources\\app\\node_modules\nnpm ERR! code EPERM\nnpm ERR! errno -4048\nnpm ERR! syscall rmdir\nnpm ERR! Error: EPERM: operation not permitted, rmdir 'C:\\Users\\Jon\\Desktop\\Test\\distwin32a\\mytest1-win32-x64\\resources\\app\\node_modules'\nnpm ERR!     at Error (native)\nnpm ERR!  { Error: EPERM: operation not permitted, rmdir 'C:\\Users\\Jon\\Desktop\\Test\\distwin32a\\mytest1-win32-x64\\resources\\app\\node_modules'\nnpm ERR!     at Error (native)\nnpm ERR!   errno: -4048,\nnpm ERR!   code: 'EPERM',\nnpm ERR!   syscall: 'rmdir',\nnpm ERR!   path: 'C:\\Users\\Jon\\Desktop\\Test\\distwin32a\\mytest1-win32-x64\\resources\\app\\node_modules' }\nnpm ERR!\nnpm ERR! Please try running this command again as root/Administrator.\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     C:\\Users\\Jon\\Desktop\\Test\\distwin32a\\mytest1-win32-x64\\resources\\app\\npm-debug.log\n```\n\nI then did NOT delete the distribution directories and ran the same command: : electron-packager . --electron-version 1.4.15 --tmpdir=false --platform win32 --icon ./assets/icon.ico --out ./distwin32a --overwrite\n\nI get the error:\n```\nPackaging app for platform win32 x64 using electron v1.4.15\nCommand failed: npm prune --production\nnpm ERR! Windows_NT 10.0.14393\nnpm ERR! argv \"C:\\Program Files\\nodejs\\node.exe\" \"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js\" \"prune\" \"--production\"\nnpm ERR! node v6.9.5\nnpm ERR! npm  v3.10.10\nnpm ERR! path C:\\Users\\Jon\\Desktop\\Test\\distwin32a\\mytest1-win32-x64\\resources\\app\\node_modules\nnpm ERR! code EPERM\nnpm ERR! errno -4048\nnpm ERR! syscall rmdir\nnpm ERR! Error: EPERM: operation not permitted, rmdir 'C:\\Users\\Jon\\Desktop\\Test\\distwin32a\\mytest1-win32-x64\\resources\\app\\node_modules'\nnpm ERR!     at Error (native)\nnpm ERR!  { Error: EPERM: operation not permitted, rmdir 'C:\\Users\\Jon\\Desktop\\Test\\distwin32a\\mytest1-win32-x64\\resources\\app\\node_modules'\nnpm ERR!     at Error (native)\nnpm ERR!   errno: -4048,\nnpm ERR!   code: 'EPERM',\nnpm ERR!   syscall: 'rmdir',\nnpm ERR!   path: 'C:\\Users\\Jon\\Desktop\\Test\\distwin32a\\mytest1-win32-x64\\resources\\app\\node_modules' }\nnpm ERR!\nnpm ERR! Please try running this command again as root/Administrator.\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     C:\\Users\\Jon\\Desktop\\Test\\distwin32a\\mytest1-win32-x64\\resources\\app\\npm-debug.log\n```\nI hope this helps. I am sorry the results do not seem to have a great deal of consistency.\n. > Could you please try removing the node_modules folder from C:\\Users\\Jon\\Desktop\\Test, running npm install as a normal user (not Administrator), and try running the electron-packager command again?\nI have only one account on this PC, which obviously is admin. I do not want to create another account as I did so when I first got the pc and ultimately had to do a reinstall when it would not fully delete the non-admin account.\nIs there any way of doing this without creating a new non-admin account?. OK, I have done the following in my only account on my PC.\n\n\nI delete the distribution folder and the node_modules in C:\\Users\\Jon\\Desktop\\Test\n\n\nI ran npm install in the command prompt in my directory C:\\Users\\Jon\\Desktop\\Test which created the node_modules again.\n\n\nI ran electron-packager . --electron-version 1.4.15 --tmpdir=false --platform win32 --icon ./assets/icon.ico --out ./distwin32a --overwrite in the command prompt in C:\\Users\\Jon\\Desktop\\Test and got the following error:\n\n\n```\nPackaging app for platform win32 x64 using electron v1.4.15\nCommand failed: npm prune --production\nnpm ERR! Windows_NT 10.0.14393\nnpm ERR! argv \"C:\\Program Files\\nodejs\\node.exe\" \"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js\" \"prune\" \"--production\"\nnpm ERR! node v6.9.5\nnpm ERR! npm  v3.10.10\nnpm ERR! path C:\\Users\\Jon\\Desktop\\Test\\distwin32a\\mytest1-win32-x64\\resources\\app\\node_modules\nnpm ERR! code EPERM\nnpm ERR! errno -4048\nnpm ERR! syscall rmdir\nnpm ERR! Error: EPERM: operation not permitted, rmdir 'C:\\Users\\Jon\\Desktop\\Test\\distwin32a\\mytest1-win32-x64\\resources\\app\\node_modules'\nnpm ERR!     at Error (native)\nnpm ERR!  { Error: EPERM: operation not permitted, rmdir 'C:\\Users\\Jon\\Desktop\\Test\\distwin32a\\mytest1-win32-x64\\resources\\app\\node_modules'\nnpm ERR!     at Error (native)\nnpm ERR!   errno: -4048,\nnpm ERR!   code: 'EPERM',\nnpm ERR!   syscall: 'rmdir',\nnpm ERR!   path: 'C:\\Users\\Jon\\Desktop\\Test\\distwin32a\\mytest1-win32-x64\\resources\\app\\node_modules' }\nnpm ERR!\nnpm ERR! Please try running this command again as root/Administrator.\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     C:\\Users\\Jon\\Desktop\\Test\\distwin32a\\mytest1-win32-x64\\resources\\app\\npm-debug.log\n```\n\n\nI had a look in C:\\Users\\Jon\\Desktop\\Test\\distwin32a\\mytest1-win32-x64. An executable was there with a default name, but it did not have my icon attached to it. The program  ran correctly showing my hello world program.\n\n\nWithout doing anything else, keeping both node_modules and the distributable directories in place I again ran 'I ran electron-packager . --electron-version 1.4.15 --tmpdir=false --platform win32 --icon ./assets/icon.ico --out ./distwin32a --overwrite in the command prompt in C:\\Users\\Jon\\Desktop\\Test.\n\n\nThis time it succeeded.\n\n\nI looked in the distributable directories and found mytest1.exe was there with the correct icon attached to it.\n\n\nWithout doing anything I then ran  electron-packager . --electron-version 1.4.15 --tmpdir=false --platform win32 --icon ./assets/icon.ico --out ./distwin32a --overwrite in the command prompt in C:\\Users\\Jon\\Desktop\\Test again.\n\n\nThis time it failed with the error:\n```\nPackaging app for platform win32 x64 using electron v1.4.15\nCommand failed: npm prune --production\nnpm ERR! Windows_NT 10.0.14393\nnpm ERR! argv \"C:\\Program Files\\nodejs\\node.exe\" \"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js\" \"prune\" \"--production\"\nnpm ERR! node v6.9.5\nnpm ERR! npm  v3.10.10\nnpm ERR! path C:\\Users\\Jon\\Desktop\\Test\\distwin32a\\mytest1-win32-x64\\resources\\app\\node_modules\nnpm ERR! code EPERM\nnpm ERR! errno -4048\nnpm ERR! syscall rmdir\nnpm ERR! Error: EPERM: operation not permitted, rmdir 'C:\\Users\\Jon\\Desktop\\Test\\distwin32a\\mytest1-win32-x64\\resources\\app\\node_modules'\nnpm ERR!     at Error (native)\nnpm ERR!  { Error: EPERM: operation not permitted, rmdir 'C:\\Users\\Jon\\Desktop\\Test\\distwin32a\\mytest1-win32-x64\\resources\\app\\node_modules'\nnpm ERR!     at Error (native)\nnpm ERR!   errno: -4048,\nnpm ERR!   code: 'EPERM',\nnpm ERR!   syscall: 'rmdir',\nnpm ERR!   path: 'C:\\Users\\Jon\\Desktop\\Test\\distwin32a\\mytest1-win32-x64\\resources\\app\\node_modules' }\nnpm ERR!\nnpm ERR! Please try running this command again as root/Administrator.\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     C:\\Users\\Jon\\Desktop\\Test\\distwin32a\\mytest1-win32-x64\\resources\\app\\npm-debug.log\n```\n\n\nI repeated 7 exactly the same, but this time it succeeded.\n\n\nI manually deleted the distributable directory in C:\\Users\\Jon\\Desktop\\Test' and ranelectron-packager . --electron-version 1.4.15 --tmpdir=false --platform win32 --icon ./assets/icon.ico --out ./distwin32a --overwritein the command prompt inC:\\Users\\Jon\\Desktop\\Test` again.\n\n\nThis time it succeeded.\n\nWithout doing anything I immediately ran  C:\\Users\\Jon\\Desktop\\Test' and ranelectron-packager . --electron-version 1.4.15 --tmpdir=false --platform win32 --icon ./assets/icon.ico --out ./distwin32a --overwritein the command prompt inC:\\Users\\Jon\\Desktop\\Test` again.\n\nIt succeeded once more.\n\n\nI repeated 9. It succeeded again.\n\n\nI repeated 10. It succeeded again.\n\n\n(Note: there was about a 45 minute gap between steps 7 and 8 - I had my tea.)\n. When the error occurs node_modulesdoes not exist. Is it trying to delete something that is not there? Is it deleting it first time correctly, then trying to delete it again when it is not there so throwing an error?\nI have had a look in the NPM issue tracker and cannot see anything on these lines.\n. A zip file: \nHelloWorld.zip\n. ",
    "dexo568": "Just wanted to comment that I also encountered this error and rolling back also solved the issue for me. I work with @hlfshell and another, third coworker just ran into this problem, so at this point it's safe to say this has something to do with our dev setup. Cylance (network antivirus) seems like a likely culprit to me.. ",
    "mikezila": "I'm having this same issue on macOS 10.12.4.  I'm using wine v2.0.1 from homebrew, electron v1.6.6 and electron-packager v8.6.0 from npm.\npennies > electron-packager . pennies --platform=win32 --arch=x64\nPackaging app for platform win32 x64 using electron v1.6.6\nrcedit.exe failed with exit code 1. Fatal error: Unable to commit changes\nBuilding for macOS works fine.  I tried the above suggestion of using --app-version= but the result is the same.  There are no antivirus or security programs running to interfere.. Trying it on a Windows 7 vm with a 100% fresh install of node and friends seems to work fine.\nI was previously using wine 2.0.1, when I used homebrew to swap to an earlier version (2.0) it seemed to work fine, but still failed once I swapped back to 2.0.1.  Doing a brew info wine it looked like the latest version (2.0.1) was installed twice somehow.  Doing brew uninstall --force wine to remove them all and then just doing brew install wine to get the latest again seems to have fixed it.  If future internet travelers find this I suggest giving the above a try.  Wine was otherwise working fine, but doing a forced uninstall and reinstall fixed it regardless.\nThanks for you reply.. ",
    "segsalerty2013": "@mikezila , how did you get to finally fix packaging win32 on your mac? I am facing this issue. packaging for macOS works fine. This used to work smoothly on my previous machine before i did a time-machine backup and restored into another mac just last week. I have tried out all tips i have found on the internet. \nI ran a brew info wine after installing a fresh one. I noticed this: \n==> Dependencies\nBuild: pkg-config \u2718, cmake \u2718, makedepend \u2718\nlooks like these dependencies are missing. could this have caused my challenges packaging for windows ?\nPls, help. thanks.\n. ",
    "gangajj": "Just restart your machine. It is due to Windows permission issue. I tried to set permission for that folder. But  I was not able to. \nThen restarted machine The issue got resolved. :). ",
    "ronnyek": "I'm seeing this come up at least 3 times a day on my CI machines, where rebooting 3 times a day isn't really  all that realistic. Can anyone clarify which files or folders windows is supposedly taking a lock on or having permissions problems with? Is there anything I can do to make the whole process a bit more robust so that I can have some dependable builds again?. ",
    "jremi": "@ronnyek  did u solve this? same thing here.. ",
    "merijnv": "I do experience the same thing, it worked once and after that it doesn't work. Removing the dist folder manually did not work either.. ",
    "navono": "+1.\nBuild multiple times, and error happens occasionally. Totally don't know why.. Disabling the Antivirus worked for me too!. ",
    "garymcm": "Got the same error: \nrcedit.exe failed with exit code 1. Fatal error: Unable to commit changes\n\nDisabled McAfee's real-time scanning and it worked. \nAdded rcedit.exe to McAfee's Excluded Files, re-enabled RT Scan and it worked.\n\nHope this helps someone. \n. ",
    "nihalmpatel": "Disabling the Antivirus worked for me!. ",
    "Daniel15": "\nIf you can perhaps share what you are trying to achieve I can try to help out\n\nMainly to ensure that any Electron apps I'm using don't contain any malicious code, given some of them don't have signed installers. That and peeking into other apps to see exactly what they're doing. Basically the same reasons you'd use a dissasembler or decompiler for compiled languages.\nAnyways, I worked out that the app is just in an asar file in the resources directory. I initially thought it was directly embedded in the .text section of the executable.. ",
    "atishagrawal": "I got an electron app developed Linux from a freelancer. He gave me a compiled app which is running fine on Linux 64 bit. But it is not running on Linux 32 Bit. On asking him, he said he cannot do it.\nI need your help in this, can you please tell me a way by which I can decompile the 64Bit app and recompile it for 32 bit?. ",
    "mecake": "Sure. This brackets:\n--ignore=(dev)\nSquare brackets are crashing node too.\n--ignore=[dev]\nI've also tried to escape brackets with backslashes, but no success.\nBy the way this commands are written in package.json:\n\"scripts\": {\n    \"pack\": \"electron-packager . --all --out=build/ --ignore=.bat --ignore=(dev)\"\n}\n. Escaping does not solve the problem.\n--ignore=\\(dev\\)\n= Error\n--ignore=\\\\(dev\\\\)\n= Error\nAnd even this\n--ignore=\\\\\\\\\\\\\\\\(dev\\\\\\\\\\\\\\\\)\n= Error\nThe fun part is when I'm run this command\nelectron-packager . --all --out=build/ --ignore=.bat --ignore=(dev)\ndirectly through Windows CMD, app packs as expected. \nBut when the same command runs through\nnode run pack\nthen comes an error.\nStrange sh*t.... ",
    "Judzhin": "--ignore=dev\nor\n--ignore=\"dev\". ",
    "jacobq": "@JAA17 I downloaded the HelloWorld.zip you provided and tried building it on a Windows 10 Pro system using node 6.x. I tried using git/bash shell as well as cmd.exe shell both as my normal user and running with elevated / administrator privileges. I tried deleting the files using Windows Explorer and leaving them there. In all cases the build succeeded without any errors. Are you still experiencing the problem? If so, I suspect it may be a system-specific problem, which would require a bit more detailed troubleshooting (e.g. using Process Monitor, looking through installed software and/or Windows settings, etc.), and furthermore it's probably more related to node/npm than to electron-packager. You might want to try some of the solutions others have discussed for similar errors, such as with node-xmpp-server and with npm. Alternatively, you could try installing the packages using yarn, which is supposed to be completely compatible with npm though I have not tried this with your test files. . I have Windows instances available so let me know if I can be any help.. Would it be acceptable to try to read it from node_modules like this first and fallback to the way it currently is if that fails?. OK. The problem I'm actually trying to solve is to be able to specify my own repo for electron-prebuilt-compile in an ember-electron (electron-forge 5.x) project. I've got it hacked together right now with a couple forks & yarn resolutions, and those can go away when electron-prebuilt-compile ships 3.0.10, but this isn't the first time I've had to do something like this, and I always wish there was a more orthodox way to do it.. ",
    "akcorp2003": "It seems like it's working on the Mac!\nDo you know if this issue exists on a Windows machine?. As a follow up, there's no problem with spawning on a Windows system.. ",
    "jbenden": "Not so fast, please. I am in progress of getting everything (all NPMs and related) building and functioning on FreeBSD. As part of this process, I really need the change accepted - please.\nThank you.. Ok, I appreciate your kind explanation. I also accept that explanation! ;)\nThank you for your time and patience.... ",
    "milu2003": "@malept \nI do not understand your question, do you want to ask why you want to run in the command line mode?. @malept \nYes, I am very strange to do so. In fact, my project wants to run on the window, mac platform, so need gui. But I now want him to run on the linux platform, but the linux platform is generally command line mode\nIf you do not need gui, electron is not necessary. So, I have a program can choose, is the nodejs project packaged into a separate program. There is a project that can do this. Is nexe.\nBut this project is not mature enough, can not meet my requirements.\nSo I can only use electron-packager\n. @malept \n\nIn your first screenshot, you're running your test Electron app as the root user. That's generally a bad idea.\n\nIf not root operation, it should be what users to run? I do not know much about linux.\n. \nI said the gui model refers to this\uff1a\n\nUse the command \ninit 5\n to switch\nand  command line\nUse the command \ninit 3\n to switch\n. ok\u3002There is a project that can be done \uff1anexe, but not so mature. no solution anymore\nthanks. ",
    "dmascord": "No worries, will write the test first, and then rebase. Rebased my changes (sorry for the delay). Maybe create a new pull ?. The manifest (http://msdn2.microsoft.com/en-us/library/1w45z383.aspx) changes are not metadata (http://msdn2.microsoft.com/en-us/library/ms404430.aspx) changes, so it would be a bit counter-intuitive to overload that option.\nWould a new option, win32manifest.requestedExecutionLevel or similar be more appropriate here ?. Potentially we would want to be able to Strong Name the assembly: https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/strong-name-signing.md\nThere are also a few settings, such as dpiAware, and supportedOS that we may want to insert into the manifest.. How do you want the tests handled?  The tests that I've seen only really test if the options actually get set, rather than test that the option setting did anything.    There are functional tests in node-rcedit now, are these adequate or do you need something else ? . gah! My brain tells my fingers the wrong thing somehow! :)  Will fix now. I've decided to remove the default, and by default don't modify the assembly.   Whatever upstream wants to put as the default in the electron.exe should probably stay as the default.. ",
    "debelop13": "How it goes? Thanks!. ",
    "hrkt": "Thank you for kind advice.\nI tried editing common.js.\nWhile\n        // child.exec('npm prune --production', {cwd: appPath}, cb)\nfails in my case (app size > 400MB), \n        child.exec('yarn install --production', {cwd: appPath}, cb)\nworks like a charm.\n. I read the #515, #518. The proposed idea of the packager option seems useful.\nI'll try making new PR in this weekend.. Thank you, @malept for the review. I'll fix it in this week.\n. ",
    "sfyfe31": "Sorry, I'm using ember-electron and just realised they're using custom commands for packaging, I thought they were using electron-packager underneath. I will close this issue and raise it against ember-electron.. ",
    "GianlucaBortoli": "I had a look ad that portion too, but I cannot think about a way that the exe gets corrupted. I recently changed the VM where the builds are run to achieve better I/O performances and the problem automagically disappeared (or at least none of the builds failed due to this in 10 days).\nProbably the VMWare ESX hypervisor, which sometimes provided very low I/O speeds on disks, was the real problem.\nCan this explain the problem I was seeing before?. ",
    "George35mk": "1 min before i just typ npm install electron --save-dev insted of npm install --save-dev electron\ni have the electron prbuilt instaled and my code with node modules are 184 mb now i gon install and the electon and my code is gona be 230 mb that is problem ???. my package.json is like this were to put the --electron-version ??\n{\n  \"name\": \"app_test\",\n  \"version\": \"1.0.0\",\n  \"description\": \"makari na doulepsi\",\n  \"main\": \"main.js\",\n  \"scripts\": {\n    \"start\": \"electron main.js\"\n  },\n  \"author\": \"George\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"firebase\": \"^3.7.0\"\n  },\n  \"devDependencies\": {\n    \"electron\": \"^1.3.4\"\n  }\n}\n. ok thnx worked. ",
    "biomade": "oops, close this, it is in the wrong repo. Sorry about that. ",
    "Mathi05": "@MarshallOfSound  \nThank you, dude. Working fine!. ",
    "Ghost---Shadow": "System\nWindows 10 64bit \n\"asar\": \"^0.13.0\",\n\"electron\": \"^1.7.5\",\n\"electron-packager\": \"^8.7.2\"\nProblem\nSame problem here. I cant understand what do you mean by\n\nConsole output when you run electron-packager with the environment variable DEBUG=electron-packager.\n\nAnyway, here are all the logs.\nrunning npm run build when \"build\": \"electron-packager . --out=dist/win --platform=win32 --arch=x64 --icon=favicon.ico --asar=true --overwrite\"\ngives\n``\n0 info it worked if it ends with ok\n1 verbose cli [ 'C:\\\\Program Files\\\\nodejs\\\\node.exe',\n1 verbose cli   'C:\\\\Program Files\\\\nodejs\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js',\n1 verbose cli   'run',\n1 verbose cli   'build' ]\n2 info using npm@3.10.10\n3 info using node@v6.9.4\n4 verbose run-script [ 'prebuild', 'build', 'postbuild' ]\n5 info lifecycle electron-tutorial@1.0.0~prebuild: electron-tutorial@1.0.0\n6 silly lifecycle electron-tutorial@1.0.0~prebuild: no script for prebuild, continuing\n7 info lifecycle electron-tutorial@1.0.0~build: electron-tutorial@1.0.0\n8 verbose lifecycle electron-tutorial@1.0.0~build: unsafe-perm in lifecycle true\n9 verbose lifecycle electron-tutorial@1.0.0~build: PATH: C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\node-gyp-bin;E:\\ElectronTutorial\\node_modules\\.bin;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\bin;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\libnvvp;C:\\ProgramData\\Oracle\\Java\\javapath;C:\\Program Files (x86)\\Intel\\iCLS Client\\;C:\\Program Files\\Intel\\iCLS Client\\;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;C:\\Users\\windows\\.dnx\\bin;C:\\Program Files\\Microsoft DNX\\Dnvm\\;C:\\Program Files\\Microsoft SQL Server\\130\\Tools\\Binn\\;C:\\Program Files (x86)\\Windows Kits\\8.1\\Windows Performance Toolkit\\;C:\\Program Files\\Git\\cmd;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\GtkSharp\\2.12\\bin;C:\\Program Files\\nodejs\\;C:\\Program Files\\MiKTeX 2.9\\miktex\\bin\\x64\\;C:\\Program Files\\Java\\jdk1.8.0_73\\bin;C:\\OpenCV-3.3.0-vc14\\opencv\\build\\x64\\vc14\\bin;C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\bin;C:\\Program Files\\CMake\\bin;C:\\Ruby24-x64\\bin;C:\\Users\\windows\\AppData\\Local\\Programs\\Python\\Python35\\Scripts\\;C:\\Users\\windows\\AppData\\Local\\Programs\\Python\\Python35\\;C:\\Program Files (x86)\\Microsoft VS Code\\bin;C:\\cuDNN;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\extras\\CUPTI\\libx64;C:\\Program Files\\Docker Toolbox;C:\\Users\\windows\\AppData\\Roaming\\npm;C:\\Program Files\\MongoDB\\Server\\3.2\\bin\n10 verbose lifecycle electron-tutorial@1.0.0~build: CWD: E:\\ElectronTutorial\n11 silly lifecycle electron-tutorial@1.0.0~build: Args: [ '/d /s /c',\n11 silly lifecycle   'electron-packager . --out=dist/win --platform=win32 --arch=x64 --icon=favicon.ico --asar=true --overwrite' ]\n12 silly lifecycle electron-tutorial@1.0.0~build: Returned: code: 1  signal: null\n13 info lifecycle electron-tutorial@1.0.0~build: Failed to exec build script\n14 verbose stack Error: electron-tutorial@1.0.0 build:electron-packager . --out=dist/win --platform=win32 --arch=x64 --icon=favicon.ico --asar=true --overwrite14 verbose stack Exit status 1\n14 verbose stack     at EventEmitter.<anonymous> (C:\\Program Files\\nodejs\\node_modules\\npm\\lib\\utils\\lifecycle.js:255:16)\n14 verbose stack     at emitTwo (events.js:106:13)\n14 verbose stack     at EventEmitter.emit (events.js:191:7)\n14 verbose stack     at ChildProcess.<anonymous> (C:\\Program Files\\nodejs\\node_modules\\npm\\lib\\utils\\spawn.js:40:14)\n14 verbose stack     at emitTwo (events.js:106:13)\n14 verbose stack     at ChildProcess.emit (events.js:191:7)\n14 verbose stack     at maybeClose (internal/child_process.js:877:16)\n14 verbose stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:226:5)\n15 verbose pkgid electron-tutorial@1.0.0\n16 verbose cwd E:\\ElectronTutorial\n17 error Windows_NT 10.0.10240\n18 error argv \"C:\\\\Program Files\\\\nodejs\\\\node.exe\" \"C:\\\\Program Files\\\\nodejs\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js\" \"run\" \"build\"\n19 error node v6.9.4\n20 error npm  v3.10.10\n21 error code ELIFECYCLE\n22 error electron-tutorial@1.0.0 build:electron-packager . --out=dist/win --platform=win32 --arch=x64 --icon=favicon.ico --asar=true --overwrite`\n22 error Exit status 1\n23 error Failed at the electron-tutorial@1.0.0 build script 'electron-packager . --out=dist/win --platform=win32 --arch=x64 --icon=favicon.ico --asar=true --overwrite'.\n23 error Make sure you have the latest version of node.js and npm installed.\n23 error If you do, this is most likely a problem with the electron-tutorial package,\n23 error not with npm itself.\n23 error Tell the author that this fails on your system:\n23 error     electron-packager . --out=dist/win --platform=win32 --arch=x64 --icon=favicon.ico --asar=true --overwrite\n23 error You can get information on how to open an issue for this project with:\n23 error     npm bugs electron-tutorial\n23 error Or if that isn't available, you can get their info via:\n23 error     npm owner ls electron-tutorial\n23 error There is likely additional logging output above.\n24 verbose exit [ 1, true ]\n``\nHowever runningelectron-packager . --out=dist/win --platform=win32 --arch=x64 --asar=true --overwrite` works absolutely fine.\nE:\\ElectronTutorial>electron-packager . --out=dist/win --platform=win32 --arch=x64 --icon=favicon.ico --asar=true --overwrite\nPackaging app for platform win32 x64 using electron v1.7.5\nrcedit.exe failed with exit code 1. Fatal error: Unable to set icon. I dont think this would be helpful but here you go.\nfavicon.ico is 256x256, it opens fine with MS paint, same folder as package.json\n```\nE:\\ElectronTutorial>SET DEBUG=electron-packager\nE:\\ElectronTutorial>electron-packager . --out=dist/win --platform=win32 --arch=x64 --icon=favicon.ico --asar=true --overwrite\n  electron-packager Electron Packager 8.7.2 +0ms\n  electron-packager Node v6.9.4 +4ms\n  electron-packager Host Operating system: win32 (x64) +3ms\n  electron-packager Packager Options: {\"_\":[\".\"],\"all\":false,\"deref-symlinks\":true,\"download\":{\"strictSSL\":true},\"overwrite\":true,\"prune\":true,\"quiet\":false,\"out\":\"dist/win\",\"platform\":\"win32\",\"arch\":\"x64\",\"icon\":\"favicon.ico\",\"asar\":true,\"dir\":\".\",\"protocols\":[]} +1ms\n  electron-packager Target Platforms: win32 +4ms\n  electron-packager Target Architectures: x64 +1ms\n  electron-packager Inferring application name from name in E:\\ElectronTutorial\\package.json +14ms\n  electron-packager Inferring appVersion from version in E:\\ElectronTutorial\\package.json +3ms\n  electron-packager Inferring target Electron version from electron in E:\\ElectronTutorial\\package.json +5ms\n  electron-packager Application name: electron-tutorial +1ms\n  electron-packager Target Electron version: 1.7.5 +2ms\n  electron-packager Ignored path regular expressions: [ '/node_modules/electron($|/)',\n  '/node_modules/electron-prebuilt(-compile)?($|/)',\n  '/node_modules/electron-packager($|/)',\n  '/\\.git($|/)',\n  '/node_modules/\\.bin($|/)',\n  '\\.o(bj)?$' ] +3ms\n  electron-packager Downloading Electron with options {\"strictSSL\":true,\"platform\":\"win32\",\"arch\":\"x64\",\"version\":\"1.7.5\"} +62ms\nPackaging app for platform win32 x64 using electron v1.7.5\n  electron-packager Creating C:\\Users\\windows\\AppData\\Local\\Temp\\electron-packager\\win32-x64-template +299ms\n  electron-packager Extracting C:\\Users\\windows.electron\\electron-v1.7.5-win32-x64.zip to C:\\Users\\windows\\AppData\\Local\\Temp\\electron-packager\\win32-x64-template +18ms\n  electron-packager Initializing app in C:\\Users\\windows\\AppData\\Local\\Temp\\electron-packager\\win32-x64\\electron-tutorial-win32-x64 from C:\\Users\\windows\\AppData\\Local\\Temp\\electron-packager\\win32-x64-template template +2s\n  electron-packager Ignored paths based on the out param: [ 'E:\\ElectronTutorial\\dist\\win' ] +4ms\n  electron-packager Pruning modules via: npm prune --production +2s\n  electron-packager Running asar with the options {} +5s\n  electron-packager Renaming electron.exe to electron-tutorial.exe in C:\\Users\\windows\\AppData\\Local\\Temp\\electron-packager\\win32-x64\\electron-tutorial-win32-x64 +16ms\n  electron-packager Running rcedit with the options {\"version-string\":{},\"file-version\":\"1.0.0\",\"product-version\":\"1.0.0\",\"icon\":\"favicon.ico\"} +15ms\nrcedit.exe failed with exit code 1. Fatal error: Unable to set icon\n```. Reopen the thread maybe? . ",
    "TekSiDoT": "Related to https://github.com/electron/node-rcedit/issues/6. ",
    "hkrware": "I confirm @positlabs's solution works.. it's more of a workaround, sorry.. ",
    "davclark": "I'm not getting the exact same problem, but it seems pretty close. It's reported from electron forge:\nAn unhandled rejection has occurred inside Forge:\nrcedit.exe failed with exit code 1. Cannot open icon file 's'\nNot sure why the file is called 's'. When I try @positlabs' workaround (with an ico file that opens fine in paint at least, I get rcedit.exe failed with exit code 1. Reserved header is not 0 or image type is not icon for 's'. \nWe can build for windows on a mac, just not on windows due to the above. Does this seem like the same error? Or is it something else?. ",
    "Jaaromy": "This is how I resolved the issue.\nI had an macOS icon file named icons.icns and a Windows icon file named icon.ico. This was my packagerConfig:\n\"electronPackagerConfig\": {\n    \"packageManager\": \"npm\",\n    \"icon\": \"./src/assets/images/icons.icns\",\n    \"asar\": true\n},\n\nNo matter what I specified in my electronWinstallerConfig I was still getting this error, even if I removed the icon key from it. I finally tracked down the issue by finding my globally installed electron-forge and adding a console.log to the rcedit.js file. It turns out that rcedit was taking the the path from electronPackagerConfig and ignoring the electronWinstallerConfig, then just renaming the extension to .ico. So rcedit couldn't find ./src/assets/images/icons.ico because it didn't exist.\nLong story short: rename your icon files to have the same base name and in the same folder. In my case I now have these:\nsrc/assets/images/icons.icns\nsrc/assets/images/icons.ico\nAnd everything works.. ",
    "itzsaga": "Following what @jaaromy did. I fixed mine with a config that looks like this:\njavascript\nelectronPackagerConfig: {\n  icon: \"src/assets/images/logo-icon.icns\"\n},\nelectronWinstallerConfig: {\n  iconUrl: \"src/assets/images/logo-icon.ico\"\n},. @malept I know I got here from working with electron-forge. It's difficult to find the documentation that you need when working with things like electron-forge. Now, from your link, I see this which I would've loved to know many, many hours ago.\n\nIf the file extension is omitted, it is auto-completed to the correct extension based on the platform\n\nHowever, an example showing how a Windows and MacOS icon would be set up would be helpful IMO.. I ended up here: https://github.com/electron/windows-installer#usage from the link in the Make section of the README. My electron-forge package was working but electron-forge make was failing at the time. It didn't help that I could do everything successfully on MacOS but things were failing on Windows. A more explicit error when using a platform specific icon extension might be helpful.. Yeah, I understood what you were speaking of. I was trying to give insight into how I ended up where I was to hopefully help prevent others from ending up there the same way. I think while we hope all documentation is read thoroughly it almost never is. So I got that error you linked #621 and searched for it. Which led me here. Which led me to Jaaromy who spoke of electronWinstallerConfig which took me to those docs, which led to my comment. Hope this helps.. ",
    "miguelsmuller": "That's exactly what I did. However, on the machine that needs to run the app, the following error occurs.\n\nAs the text is in pt-br translated it would look something like this:\n\nIt was not possible to display \"centro-de-estudos\".\nThere is no application installed for the executable files.\nDo you want to search for an application that can open these files?. Yes. It was permission problem. Thanks a lot for the help @malept.. \n",
    "AlyxMoon": "I think I'm running into a similar issue here. My problem is that I have a nested dependency being left out when I package my app. I've only noticed one so far however.\nThe module causing problems is request, once packaged it is missing its dependency form-data. As far as I've been able to tell, no other dependencies by anything else are being left out, just this.\nDependencies listed in my package.json:\n\"devDependencies\": {\n    \"babel-core\": \"^6.14.0\",\n    \"babel-loader\": \"^6.4.1\",\n    \"babel-preset-es2015\": \"^6.14.0\",\n    \"babel-preset-react\": \"^6.23.0\",\n    \"chai\": \"^3.5.0\",\n    \"chai-immutable\": \"^1.6.0\",\n    \"css-loader\": \"^0.27.3\",\n    \"electron\": \"^1.6.2\",\n    \"electron-packager\": \"^7.4.0\",\n    \"ignore-styles\": \"^5.0.1\",\n    \"jsdom\": \"^9.12.0\",\n    \"mocha\": \"^3.2.0\",\n    \"mocha-standard\": \"^1.0.0\",\n    \"node-sass\": \"^4.5.1\",\n    \"react-addons-test-utils\": \"^15.4.2\",\n    \"sass-loader\": \"^6.0.3\",\n    \"sinon\": \"^2.0.0\",\n    \"standard\": \"^9.0.2\",\n    \"style-loader\": \"^0.16.0\",\n    \"webpack\": \"^2.3.1\",\n    \"webpack-dev-server\": \"^2.4.2\"\n  },\n  \"dependencies\": {\n    \"immutable\": \"^3.8.1\",\n    \"electron-json-storage\": \"^3.0.4\",\n    \"jszip\": \"^3.1.1\",\n    \"moment\": \"^2.18.1\",\n    \"react\": \"^15.4.2\",\n    \"react-addons-pure-render-mixin\": \"^15.4.2\",\n    \"react-bootstrap\": \"^0.30.8\",\n    \"react-dom\": \"^15.4.2\",\n    \"react-redux\": \"^5.0.3\",\n    \"react-router\": \"^4.0.0\",\n    \"react-router-dom\": \"^4.0.0\",\n    \"redux\": \"^3.6.0\",\n    \"request\": \"^2.74.0\"\n  }\nMy script to package (I have one for each OS where only platform flag is different. All OS packages are being affected):\nelectron-packager . --overwrite --prune=true --platform=win32 --arch=all --out=dist --icon=assets/icons/icon.ico --ignore=assets --ignore=test --ignore=src --ignore=data/* --ignore=.gitignore --ignore=README.md\nIf relevant, here are the dependencies listed in the request module, while form-data is indeed listed its being left out in the package:\n\"aws-sign2\": \"~0.6.0\",\n    \"aws4\": \"^1.2.1\",\n    \"caseless\": \"~0.12.0\",\n    \"combined-stream\": \"~1.0.5\",\n    \"extend\": \"~3.0.0\",\n    \"forever-agent\": \"~0.6.1\",\n    \"form-data\": \"~2.1.1\",\n    \"har-validator\": \"~4.2.1\",\n    \"hawk\": \"~3.1.3\",\n    \"http-signature\": \"~1.1.0\",\n    \"is-typedarray\": \"~1.0.0\",\n    \"isstream\": \"~0.1.2\",\n    \"json-stringify-safe\": \"~5.0.1\",\n    \"mime-types\": \"~2.1.7\",\n    \"oauth-sign\": \"~0.8.1\",\n    \"performance-now\": \"^0.2.0\",\n    \"qs\": \"~6.4.0\",\n    \"safe-buffer\": \"^5.0.1\",\n    \"stringstream\": \"~0.0.4\",\n    \"tough-cookie\": \"~2.3.0\",\n    \"tunnel-agent\": \"^0.6.0\",\n    \"uuid\": \"^3.0.0\"\n. @MarshallOfSound Sorry I'm not entirely sure what you mean by that, can you clarify?. @MarshallOfSound  Sure, I run it as a script through npm.\n\"package:win\": \"electron-packager . --overwrite --prune=true --platform=win32 --arch=all --out=dist --icon=assets/icons/icon.ico --ignore=assets --ignore=test --ignore=src --ignore=data/* --ignore=.gitignore --ignore=README.md\". @MarshallOfSound Indeed that did the trick.\nWell, sorry for butting in on this thread then. I don't know if this is what was causing OP's problem, but overzealous ignores was causing the issue for me, I hadn't considered that the ignore flag would cause problems with things in node_modules.. ",
    "ccpwcn": "I have this error too.\nSay it again: In development mode, it's running well, after electron-packager packaged, cannot find module sqlite3. ",
    "louh": "Got it - thanks!. ",
    "jimmywarting": "It doesn't have to be a breaking change if there is no callback return a promise instead of calling the callback so you can do both. ",
    "Bharwcb": "Thanks @malept .. really appreciate it.  . Actually @malept, do you have any experience in errors after sending a packaged electron app?\nI'm getting the error: EROFS: read-only file system, mkdir '/private/var/folders/.../myApp.app/Contents/Resources/app' at Object.fs.mkdirSync\nSo something about sending the packaged app does not allow the mkdirSync function to run.\n. ",
    "mynetx": "app package.json:\njson\n{\n  \"dependencies\": {\n    \"electron\": \"^1.4.11\",\n    \"electron-machine-id\": \"^1.0.9\"\n  },\n  \"devDependencies\": {\n    \"less\": \"^2.7.1\",\n    \"less-plugin-clean-css\": \"^1.5.1\",\n    \"less-plugin-glob\": \"^1.1.1\",\n    \"watch\": \"^1.0.1\"\n  },\n  \"id\": \"name_like_this_here\",\n  \"name\": \"name_like_this_here\",\n  \"author\": \"COMPANY NAME HERE <EMAIL HERE>\",\n  \"version\": \"1.1.1\",\n  \"main\": \"app.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"start\": \"electron .\",\n    \"build:css\": \"lessc --glob --clean-css styles/less/styles.less styles/styles.min.css\",\n    \"build\": \"npm run build:css\",\n    \"build:watch\": \"node_modules/watch/cli.js 'npm run build:css' styles/less\"\n  },\n  \"keywords\": [],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"GIT URL HERE\"\n  },\n  \"description\": \"APP DESCRIPTION HERE\",\n  \"license\": \"UNLICENSED\"\n}\nInstaller package.json:\njson\n{\n  \"name\": \"name-like-this-here-installer\",\n  \"version\": \"1.0.0\",\n  \"devDependencies\": {\n    \"electron-packager\": \"^8.4.0\",\n    \"electron-winstaller\": \"^2.5.0\"\n  },\n  \"main\": \"installer.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"prepackage\": \"cd ..\\\\app && npm install --production && cd ..\\\\installer\",\n    \"package\": \"electron-packager ../app --platform=win32 --arch=ia32 --asar --overwrite --app-copyright=\\\"Copyright (c) 2016 COMPANY NAME HERE. All rights reserved.\\\" --icon app.ico --ignore=\\\"styles/less\\\" --ignore=\\\"\\\\.DS_Store\\\" --win32metadata.CompanyName=\\\"ANOTHER COMPANY NAME HERE\\\" --win32metadata.ProductName=\\\"PRODUCT NAME HERE\\\" --win32metadata.FileDescription=\\\"PRODUCT NAME HERE\\\" --win32metadata.OriginalFilename=\\\"name_like_this_here.exe\\\"\",\n    \"postpackage\": \"signtool\\\\signtool sign /f F24.pfx /p APasswordHere /t http://timestamp.verisign.com/scripts/timstamp.dll name_like_this_here-win32-ia32\\\\name_like_this_here.exe\",\n    \"installer\": \"node installer.js\",\n    \"build\": \"npm run package && npm run installer\"\n  },\n  \"keywords\": [],\n  \"author\": \"Jublo Solutions <support@jublo.net>\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"GIT URL HERE\"\n  },\n  \"description\": \"PRODUCT NAME HERE\",\n  \"license\": \"UNLICENSED\"\n}\n. On packaging and delivery, everything works fine. The errors on the photo appeared by random weeks later \u2013 ideas?. ",
    "tkggusraqk": "@MarshallOfSound \n{\n  \"name\": \"weichat\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"main.js\",\n  \"directories\": {\n    \"test\": \"test\"\n  },\n  \"scripts\": {\n    \"start\": \"electron .\",\n    \"packager\": \"electron-packager ./app WKF --platform=win32 --out=./Outapp --version 1.0.0 --asar=true --prune=false --overwrite --icon=./app/logo.ico\"\n  },\n  \"author\": \"cxj\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"asar\": \"^0.13.0\",\n    \"electron\": \"^1.6.2\",\n    \"electron-packager\": \"^8.6.0\",\n    \"gulp\": \"^3.9.1\",\n    \"serial-number\": \"^1.3.0\",\n    \"getmac\": \"^1.2.1\"\n  }\n}\nAbove the hyperlink also, the first is. @MarshallOfSound \n{\n  \"name\": \"weichat\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"main.js\",\n  \"directories\": {\n    \"test\": \"test\"\n  },\n  \"scripts\": {\n    \"start\": \"electron .\",\n    \"packager\": \"electron-packager ./app WKF --platform=win32 --out=./Outapp --version 1.0.0 --asar=true --prune=false --overwrite --icon=./app/logo.ico\"\n  },\n  \"author\": \"cxj\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"asar\": \"^0.13.0\",\n    \"electron\": \"^1.6.2\",\n    \"electron-packager\": \"^8.6.0\",\n    \"gulp\": \"^3.9.1\",\n    \"serial-number\": \"^1.3.0\",\n    \"getmac\": \"^1.2.1\"\n  },\n  \"dependencies\":{\n    \"serial-number\": \"^1.3.0\",\n    \"getmac\": \"^1.2.1\"\n  }\n}\nIs that right? But it is not right. @MarshallOfSound \n{\n  \"name\": \"weichat\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"main.js\",\n  \"directories\": {\n    \"test\": \"test\"\n  },\n  \"scripts\": {\n    \"start\": \"electron .\",\n    \"packager\": \"electron-packager ./app WKF --platform=win32 --out=./Outapp --version 1.0.0 --asar=true --overwrite --icon=./app/logo.ico\"\n  },\n  \"author\": \"cxj\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"asar\": \"^0.13.0\",\n    \"electron\": \"^1.6.2\",\n    \"electron-packager\": \"^8.6.0\",\n    \"gulp\": \"^3.9.1\" \n  },\n  \"dependencies\":{\n    \"serial-number\": \"1.3.0\",\n    \"getmac\": \"1.2.1\"\n  }\n}\nBut still not. @MarshallOfSound \nNpm install do not understand, modify I re-run the npm run-script packager. @MarshallOfSound \n{\n  \"name\": \"weichat\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"main.js\",\n  \"directories\": {\n    \"test\": \"test\"\n  },\n  \"scripts\": {\n    \"start\": \"electron .\",\n    \"packager\": \"electron-packager ./app WKF --platform=win32 --out=./Outapp --version 1.0.0 --asar=true --overwrite --icon=./app/logo.ico --ignore=node_modules/electron-* --ignore=node_modules/.bin --ignore=.git --ignore=dist --prune\"\n  },\n  \"author\": \"cxj\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"asar\": \"^0.13.0\",\n    \"electron\": \"^1.6.2\",\n    \"electron-packager\": \"^8.6.0\",\n    \"gulp\": \"^3.9.1\"\n  },\n  \"dependencies\": {\n    \"getmac\": \"^1.2.1\",\n    \"serial-number\": \"1.3.0\"\n  }\n}\nNot too understand what you mean, and now the configuration is correct, how can we do the following package into the package\nthank you very much. ",
    "JohannBlake": "The default icon still shows when I launch the app during development. I'm not using a package installer at this stage. I'm just running npm start from the command line. Changing the app icon use to work but this morning I upgraded Electron to the latest version (1.7.9) and the default always shows. I'm running this on a Mac.\nI simply replaced the electron.icns file with my custom icon. This file is located under:\n/usr/local/lib/node_modules/electron/dist/Electron.app/Contents/Resources/electron.icns\nRestarting the app or my computer didn't help either. Interestingly, if I click on:\n/usr/local/lib/node_modules/electron/dist/Electron.app\nthe icon shows in Finder's preview pane although the default icon is showing in the left pane next to the app's executable. My custom icon also shows if you bring up the Info pane for the app.\nUPDATE:\nI was able to solve this. When I converted my png file to icns, my png was 512 x 512. I then increased the size to 1024 x 1024 and then converted it to icns. It appears that something changed in electron since my previous version of electron that now requires a higher resolution image.. ",
    "pugthelouie": "Will do. The testcase is something i cannot provide, due to my computer causing the error, and yours wouldn't be able to replicate.. ",
    "DavisDevelopment": "I've since discovered that the icon does work once the app is installed via an installer created using electron-installer-debian, so I guess the issue is of low priority to me. Regardless, it does still seem to be a problem. Yes, I found that in the docs, which lead me to remove the flag. However, it's only when using electron-packager that my app's icon doesn't show up. This would indicate a problem, no?. Ah, I didn't even think about the .desktop file. The icon, however, does show up when run with electron directly. It only fails after the app has been packaged. Nope, the path is absolute, joined against the path retrieved from app.getAppPath. ",
    "zxdong262": "same issue, solved with --icon option,  \njs\nexec(`${bin}/electron-installer-debian --src ${dir}/${name}-linux-x64 --dest ${dir}/installers/ --arch amd64 --icon ${dir}/${name}-linux-x64/resources/app/static/images/electerm-round-128.png`)\nand I have set the icon option too, but without the --icon option will not work.\njs\n  // Create the browser window.\n  win = new BrowserWindow({\n    width,\n    height,\n    fullscreenable: true,\n    //fullscreen: true,\n    icon: resolve(__dirname, 'static/images/electerm-round-128.png')\n  })\njs\n    \"electron\": \"1.7.8\",\n    \"electron-builder\": \"19.22.1\",\n. ",
    "asterikx": "Hi, my folder structure differs slightly from the one outlined by @igloo15.\nelectron/main.js represents the entry point to the electron-apps. main.js loads my index.html that in turn includes the bundle.js. \n|-root\n     |-native\n     |-web\n          |-public\n               |-index.html\n               |-bundle.js\n     |-electron\n         |-package.json\n         |-main.js\n         |-out\n               |-<generated electron app>\n     |-src\n         |-<source code>\n     |-package.json\nThis works fine when running electron locally.\nHowever with electron-packager, index.htmland bundle.js (in fact the whole web/ folder) are not getting included into the generated app, and are hence not resolvable at runtime:\nNot allowed to load local resource: file:///<PROJECT_ROOT>/electron/out/MyApp.io-darwin-x64/MyApp.io.app/Contents/Resources/web/public/index.html\nIs there a way to solve this without having to move/duplicate my index and bundle files into the electron folder? Are there some configurations that I'm missing?\nThanks a lot. ",
    "dland512": "@MarshallOfSound, I'm having this exact same problem but I can't quite figure out how to implement your suggestion. Would you mind maybe listing out the full CLI command with the folder structure from @igloo15 or mine, which is\n|-root\n     |-build\n          |-main.bundle.js\n          |-renderer.bundle.js\n          |-index.html\n     |-node_modules\n     |-app\n         |-<source code>\n     |-webpack.js\n     |-package.json\nMy package.json contains\n\"main\": \"build/main.bundle.js\"\n\nI tried running this\nelectron-packager build --ignore='\\.\\/app\\/*\\.*'\n\nbut I get the error about not being able to find the package.json file:\n\nnpm ERR! enoent ENOENT: no such file or directory, open '/private/var/folders/2k/pgyx4y5s0kxghmdmkbcj5xqw0000gn/T/electron-packager/darwin-x64/slot-compass-darwin-x64/Electron.app/Contents/Resources/app/package.json'\n\nLike @igloo15 said, if I copy the package.json file into the build folder it works.\n. Got it, thanks.. Got it, thank you for the suggestions.. ",
    "devildant": "i look your sources code electron-packager/win32.js and i don't see the extra resource option. \nI temporarily added this command to solve the problem\ncp -r aria2 compiledBinary/win/*/resources/. ",
    "toebber": "Hi Malept. \nThanks for answer.\nYes my package.json is in specified folder.\nCan't it be because i have installed the app wrong or something. I am very new to programming, so i always assume error is on my side? :). ",
    "tomasantunes": "I have the same problem.\nI ran this command and the executable doesn't launch.\nelectron-packager . AppName --overwrite --platform=win32 --arch=x64 --icon=./img/logo.ico. I just tested with the electron-quick-start app and the result is the same.. ",
    "vincentdchan": "Same issue, I am building my project MDE with branch release-v0.1.2 on Windows 10 Creators Update\nBuilding output:\nPS C:\\Users\\cdzos\\Documents\\MyProjects> electron-packager.cmd .\\MDE MDE --overwrite --platform=win32 --arch=x64 --icon=./MDE/build_resources/icon.ico\n  electron-packager Electron Packager 8.6.0 +0ms\n  electron-packager Node v7.9.0 +3ms\n  electron-packager Host Operating system: win32 (x64) +2ms\n  electron-packager Packager Options: {\"_\":[\".\\\\MDE\",\"MDE\"],\"all\":false,\"deref-symlinks\":true,\"download\":{\"strictSSL\":true},\"overwrite\":true,\"prune\":true,\"quiet\":false,\"platform\":\"\n\"x64\",\"icon\":\"./MDE/build_resources/icon.ico\",\"dir\":\".\\\\MDE\",\"name\":\"MDE\",\"protocols\":[]} +0ms\n  electron-packager Target Platforms: win32 +1ms\n  electron-packager Target Architectures: x64 +1ms\n  electron-packager Inferring appVersion from version in C:\\Users\\cdzos\\Documents\\MyProjects\\MDE\\package.json +19ms\n  electron-packager Inferring target Electron version from electron in C:\\Users\\cdzos\\Documents\\MyProjects\\MDE\\package.json +11ms\n  electron-packager Application name: MDE +2ms\n  electron-packager Target Electron version: 1.6.6 +3ms\n  electron-packager Ignored path regular expressions: [ '/node_modules/electron($|/)',\n  '/node_modules/electron-prebuilt(-compile)?($|/)',\n  '/node_modules/electron-packager($|/)',\n  '/\\\\.git($|/)',\n  '/node_modules/\\\\.bin($|/)',\n  '\\\\.o(bj)?$' ] +1ms\n  electron-packager Downloading Electron with options {\"strictSSL\":true,\"platform\":\"win32\",\"arch\":\"x64\",\"version\":\"1.6.6\"} +11ms\nPackaging app for platform win32 x64 using electron v1.6.6\n  electron-packager Creating C:\\Users\\cdzos\\AppData\\Local\\Temp\\electron-packager\\win32-x64-template +1s\n  electron-packager Extracting C:\\Users\\cdzos\\.electron\\electron-v1.6.6-win32-x64.zip to C:\\Users\\cdzos\\AppData\\Local\\Temp\\electron-packager\\win32-x64-template +8ms\n  electron-packager Initializing app in C:\\Users\\cdzos\\AppData\\Local\\Temp\\electron-packager\\win32-x64\\MDE-win32-x64 from C:\\Users\\cdzos\\AppData\\Local\\Temp\\electron-packager\\win32-x\nmplate +4s\n  electron-packager Ignored paths based on the out param: [ 'C:\\\\Users\\\\cdzos\\\\Documents\\\\MyProjects\\\\MDE-darwin-ia32',\n  'C:\\\\Users\\\\cdzos\\\\Documents\\\\MyProjects\\\\MDE-darwin-x64',\n  'C:\\\\Users\\\\cdzos\\\\Documents\\\\MyProjects\\\\MDE-darwin-armv7l',\n  'C:\\\\Users\\\\cdzos\\\\Documents\\\\MyProjects\\\\MDE-linux-ia32',\n  'C:\\\\Users\\\\cdzos\\\\Documents\\\\MyProjects\\\\MDE-linux-x64',\n  'C:\\\\Users\\\\cdzos\\\\Documents\\\\MyProjects\\\\MDE-linux-armv7l',\n  'C:\\\\Users\\\\cdzos\\\\Documents\\\\MyProjects\\\\MDE-mas-ia32',\n  'C:\\\\Users\\\\cdzos\\\\Documents\\\\MyProjects\\\\MDE-mas-x64',\n  'C:\\\\Users\\\\cdzos\\\\Documents\\\\MyProjects\\\\MDE-mas-armv7l',\n  'C:\\\\Users\\\\cdzos\\\\Documents\\\\MyProjects\\\\MDE-win32-ia32',\n  'C:\\\\Users\\\\cdzos\\\\Documents\\\\MyProjects\\\\MDE-win32-x64',\n  'C:\\\\Users\\\\cdzos\\\\Documents\\\\MyProjects\\\\MDE-win32-armv7l' ] +29ms\n  electron-packager Running npm prune --production +54s\n  electron-packager Renaming electron.exe to MDE.exe in C:\\Users\\cdzos\\AppData\\Local\\Temp\\electron-packager\\win32-x64\\MDE-win32-x64 +17s\n  electron-packager Running rcedit with the options {\"version-string\":{},\"file-version\":\"0.1.2\",\"product-version\":\"0.1.2\",\"icon\":\"./MDE/build_resources/icon.ico\"} +7ms\n  electron-packager Moving C:\\Users\\cdzos\\AppData\\Local\\Temp\\electron-packager\\win32-x64\\MDE-win32-x64 to C:\\Users\\cdzos\\Documents\\MyProjects\\MDE-win32-x64 +976ms\nBut when I run the exe, no window appears, nothing show in the Terminal, I don't know what happens.. ",
    "avoidwork": "When I remove --tmpdir...\n```console\n\nelectron-packager ./build \"Adobe Hub\" --out=dist/osx --platform=darwin --arch=x64 --version=1.4.16 --icon=assets/icons/adobehub.icns --app-version=$npm_package_version\n\nPackaging app for platform darwin x64 using electron v1.4.16\nWrote new app to dist/osx/Adobe Hub-darwin-x64\n```. @malept I think you misunderstand; your package.json files are seriously flawed for builds. If every dep is ^ then* versioning electron-packager has no real impact other than adding or removing deps.\n7.0.4 should not be using the same deps as 8.x, that's a major version difference (breaking change).. @malept no, that's a problem in your package.json because you're not locking to minor updates, and instead are taking major updates. you're doing semver wrong via these keys:\n\"dependencies\": {\n    \"asar\": \"^0.13.0\",\n    \"debug\": \"^2.2.0\",\n    \"electron-download\": \"^4.0.0\",\n    \"electron-osx-sign\": \"^0.4.1\",\n    \"extract-zip\": \"^1.0.3\",\n    \"fs-extra\": \"^2.0.0\",\n    \"get-package-info\": \"^1.0.0\",\n    \"minimist\": \"^1.1.1\",\n    \"plist\": \"^2.0.0\",\n    \"rcedit\": \"^0.8.0\",\n    \"resolve\": \"^1.1.6\",\n    \"run-series\": \"^1.1.1\",\n    \"sanitize-filename\": \"^1.6.0\",\n    \"semver\": \"^5.3.0\"\n  },\n  \"devDependencies\": {\n    \"buffer-equal\": \"^1.0.0\",\n    \"coveralls\": \"^2.11.6\",\n    \"eslint\": \"^3.2.0\",\n    \"eslint-config-standard\": \"^7.0.0\",\n    \"eslint-plugin-promise\": \"^3.0.0\",\n    \"eslint-plugin-standard\": \"^2.0.0\",\n    \"eslint-plugin-tape\": \"^1.1.0\",\n    \"nyc\": \"^10.0.0\",\n    \"pkg-up\": \"^1.0.0\",\n    \"rimraf\": \"^2.3.2\",\n    \"run-waterfall\": \"^1.1.1\",\n    \"tape\": \"^4.0.0\",\n    \"which\": \"^1.2.14\"\n  },\n^ that's this project. you're taking breaking changes spanning major versions of electron-packager.. I don't think you understand semver or npm; your package.json takes the latest version of every dep/dev dep regardless of your intention. Nothing is locked to a minor, via ~ so if tape released 6.0.0 tomorrow both 7.x & 8.x of electron-packager would install tape 6.0.0 on next npm install\nThis means that my CI pipeline is changing each build. That's not how you use semver.. I explained it wrong, ^ is up to the next major version so your assertion is true; the issue is in the extract-zip which is equal in both 7 & 8 fresh installs.\nrcedit is 0.5.4 in 7.0.4 & 0.7.0 in 8.0.0\nfs-extra is 0.28.0 in 7.0.4 & 0.30.0 in 8.0.0\nextra-zip is 1.6.5 in both. however, i remain firm that ^ is not the ideal operator to rely on from a deterministic pov. taking unknown new features is not ideal for an enterprise app; using ~ limits it to patches which is ideal.\nif 7.x was using it, i wouldn't have encountered the bug in extra-zip on saturday and my builds would still be functional today; instead I have to rework my builds to today's modules :(. @malept yes, except in this case 7.0.4 of electron-packager could've been using extra-zip 1.0.x instead of 1.x.x which would have avoided the problem entirely; based on the issues of extra-zip it looks like 7.x of electron-packager will be broken unless release 7.0.5 putting ^ to ~; that'd solve my build problems.\nPlease consider this change going forward, as the impact on enterprise apps can be significant compared to small projects someone might spin up in their spare time.. ",
    "wende60": "This was left over, and not updated with the electron install, thanks for the hint, it works :). ",
    "miguelmota": "@malept cool, thanks!. If someone is curious, neither sudo-prompt or electron-sudo worked for me. I ended up using a custom osascript for my electron app on mac\n```js\nvar cmd = '/usr/bin/osascript -e \\'do shell script \"echo some_command\" with administrator privileges\\''\nvar proc = exec(cmd)\n```. @jorangreef I can't remember what the exact issue was but I think it was getting stuck at some point and not returning a response which was halting my application.\nIf you're wondering here's my code where it's using a custom script for sudo prompt\nhttps://github.com/miguelmota/global-keypress/blob/master/index.js. ",
    "jorangreef": "@miguelmota I am the author of sudo-prompt, which uses essentially the same osascript (but with support for status code, stdout, stderr and an application icon in the Mac prompt) as well as cross-platform support. How could sudo-prompt be improved to work better for you?. Thanks @miguelmota, if you ever encounter that again just let me know and I will open an issue so we can resolve it.. ",
    "matteoannibali": "Hi Guys,\nI have many problems to run my Electron App using \u201csystem\u201d privileges.\nI need to run it with \u201csystem\u201d privileges in order to view UAC messages.\nI'm using desktopCapturer and navigator.mediaDevices.getUserMedia and i need to make remote connection \"unattended\".\nThanks in advance!\nMatteo. Hi malept.\nIf you want create a remote Desktop App with Electron you need to control and awake from sleep your remote pc. If you can't do it, your remote desktop app is absoluting useless.. Hi, someone can help me? :). Electron base app is made by 2/3 executables. Main process run other render processes.\nI need that render processes run with \"system privileges\" but seems not possible at all...\nDo you have some useful resources where i can find something about?. Hi, \nI included my Manifest.xml file using electron-packager using this parameters:\nrequestedExecutionLevel level=\"highestAvailable\"\n uiAccess=\"false\"\nUsing psexec with my exe electron i have this: (exe running but no user privileges)\nIf i change my uiAccess=\"true\" and trying to run my exe using psexec with Administrator privileges i get an error:\nThe requested operation requires elevation.\nHow i can run my electron exe with system privileges in order to catch Windows UAC?\nIt's possible to do ?\nThanks!\nMatteo\n. Hi,\nI tried change manifest.xml...but nothing happened.\nMaybe it's for Electron Architecture?\nI try everything..it's possible to run Electron processes with System Privileges ?? :(\nThanks for you help....i'm near to give up.. ",
    "AdamMikacich": "What was your solution?. I am using electron-rebuild. I am getting a similar error to above. Here is my log: https://pastebin.com/B6WjDEXP However, I believe my issue is being caused by node serialport. Do you have any idea for a solution?. ",
    "RobiFerentz": "Thanks soooooooooo much. I did not know of this bug and lost half a day because of it!\n. ",
    "dipenpatel235": "Yes.\nOn May 25, 2017 11:36 AM, \"Mark Lee\" notifications@github.com wrote:\n\nIs this 64-bit wine?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/electron-userland/electron-packager/issues/654#issuecomment-303930960,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AHwhuVpW27MtoFGIPCYyFBp92UlEdmuFks5r9RpGgaJpZM4Nl_5w\n.\n. Ok...so I need to install wine 32bit in 64bit systems right ?\n\nOn May 25, 2017 11:40 AM, \"Mark Lee\" notifications@github.com wrote:\n64-bit wine is not currently supported by node-rcedit, see:\nelectron/node-rcedit#22 https://github.com/electron/node-rcedit/issues/22\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/electron-userland/electron-packager/issues/654#issuecomment-303931591,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AHwhudwpokP5ZGA0FPMm630UWRX2xXb8ks5r9RtagaJpZM4Nl_5w\n.\n. Okey..thanks.\nI will check it\nOn May 25, 2017 11:42 AM, \"Mark Lee\" notifications@github.com wrote:\n\nYes.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/electron-userland/electron-packager/issues/654#issuecomment-303931826,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AHwhuct3lp1FUDZPyUJq3i9io618bLVAks5r9RvBgaJpZM4Nl_5w\n.\n. So I cant build package for 64 bit os right ?\n\nOn May 25, 2017 11:47 AM, \"Dipen Patel\" dipen.ec2010@gmail.com wrote:\n\nOkey..thanks.\nI will check it\nOn May 25, 2017 11:42 AM, \"Mark Lee\" notifications@github.com wrote:\n\nYes.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/electron-userland/electron-packager/issues/654#issuecomment-303931826,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AHwhuct3lp1FUDZPyUJq3i9io618bLVAks5r9RvBgaJpZM4Nl_5w\n.\n\n\n. \n",
    "drjasonharrison": "Yes, sadly Windows went fully for the \"sign only the executables\" where the definition of \"executables\" has become increasingly out of date. It sounds like the electron/asar library would need to be extended, or a detached signature for the resource/*.asar files be embedded in the electron-builder output.\nAnd as in my situation, the signing would need to be able to be performed by a third party tool.\nI'm some what surprised that this issue hasn't already been raised by any of the other electron application users. I've filed https://github.com/electron/asar/issues/123. Another option is to put all static assets in a native library file. .asar becomes .dll or .so/.a. @MarshallOfSound this isn't a source code protection issue. It's a cover-my-ass issue. \nRelease checklist:\n- [ ] installer is signed with corporate derived certificate\n- [ ] post-installation, all executable components are signed with corporate derived certificate\n- [ ] etc. ",
    "DutchKevv": "Understand, thanks for the code example! \nI'm using electron builder but it doesn't seem to support the afterCopy param (yet)\n. ",
    "Jmclerck": "I assume from looking at the release notes for the most recent versions of electron-packager this change hasn't been released yet? If not the Docs are a little confusing as it suggests that the Promisified versions of the API should already work when in fact they don't.\nIs there an ETA on a release containing these changes?\nThanks!. Hi @malept thanks for the clarification and quick reply. No problem about the ETA, I just wanted to check in case you had any idea.\nThanks for all your work on this, it is appreciated!. ",
    "burakkilic": "I did that with the command \n./node_modules/.bin/electron-rebuild node_modules --arch=x64 --platform=win32\n\nand it is not working on MacOSX. I exported again with:\n \"electron-packager . $npm_package_productName --out=dist/win --platform=win32 --arch=x64 --icon=assets/icons/win/finedine.ico --overwrite --asar=true --prune=true\",\n\nalso gave me the same error.. Ok. Tried again but got the same problem. I'm almost sure it's because of the rebuild. I'll try with a windows computer.. ",
    "resurge": "I'm sorry, it seems I didn't read well enough.\nI had found this very similar issue: https://github.com/electron-userland/electron-packager/issues/527\nBut it mentioned the node_modules folder being entirely missing from the packaging output, but this was not the case with me so I assumed this was a different issue.\nI then tried building my app not in a separate folder, but straight in the project root and then everything seems to work.\nI guess this one can be closed right away.\nSorry for the hassle.. ",
    "yrahul3910": "I'm using version 1.6.10. Is there an option to do that? Sorry, I'm new to the tool.. Okay, I did npm install debug, then DEBUG=electron-packager, and then ran the electron-packager command. The output wasn't different from without this configuration, but here it is:\nPackaging app for platform linux ia32 using electron v0.35.6\nPackaging app for platform linux x64 using electron v0.35.6\nPackaging app for platform linux armv7l using electron v0.35.6\nWrote new apps to:\n/home/rahul/Desktop/Electron/Journal (copy)/Journal-linux-ia32\n/home/rahul/Desktop/Electron/Journal (copy)/Journal-linux-x64\n/home/rahul/Desktop/Electron/Journal (copy)/Journal-linux-armv7l\nI'm not sure why it says it's using the older Electron, though, running electron -v gave v1.6.10.. I see. Thanks :). ",
    "emmanuelgeoffray": "OK, thanks for the prompt reply and the right answers @malept !. If I add this feature in electron-packager, would you add it to master? Or would you think it is too specific?\nI feel that it is a missing feature in Linux.\nI find it convenient that in windows and os x, appVersion and buildVersion are both used and user can inspect the build to find out what version he is running. \nThe feature would be to add a file named buildVersion containing the buildVersion string and add a file named appVersion containing the appVersion string.\nWhat do you think?\nBest,\nEmmanuel\n. ok. thank you for your prompt reply.. ",
    "bengotow": "Hey folks I just ran into this as well and it's making it difficult for me to diagnose the underlying issue. It seems that when you call child_process.exec there's an implicit limit to the amount of output that the exec'd process can emit - by default 200kb (https://stackoverflow.com/questions/23429499/stdout-buffer-issue-using-node-child-process).\nThis happened after I enabled verbose logging on a bunch of stuff by setting DEBUG=electron-download,electron-packager,extract-zip.\nIn my case, it looks like npm prune --production is the command that is emitting more than 200kb of log output.. ",
    "Nowaker": "Reported again in https://github.com/electron-userland/electron-packager/issues/734.. From #734:\nNon-code workaround:\n\nexport NPM_CONFIG_LOGLEVEL=info before calling electron-packager. This reduces the output of npm commands significantly. \n\nA better code-based workaround / provisional fix:\n\nThe one proposed in a PR that was recently rejected: https://github.com/electron-userland/electron-packager/pull/614\n\nProper fix:\n\nspawn should be used for executing any commands. Otherwise, if the output is too long, packaging will always be prone to an error like stdout maxBuffer exceeded or stderr maxBuffer exceeded.\n. @malept I'm getting a similar error:\n\nFri, 29 Sep 2017 16:17:43 GMT electron-packager Pruning modules via: npm prune --production\nstderr maxBuffer exceeded\nThis is really a problem electron-packager doesn't execute commands properly, that is, using spawn rather than exec.\nEDIT: Reported again in #734.. ",
    "Matheus-Ribeiro95": "Thanks for the help!\nIssue solved using flag \"--no-prune\" in CLI.. I did it first, then i changed correctly, but even so the packager was not doing it correctly.\nSo i deleted \"package-lock.json\" then installed modules again and now its working.\nThanks.. ",
    "quadrophobiac": "Thanks @malept , that helped things out. I arrived at this conundrum via https://github.com/electron-userland/electron-osx-sign/wiki/3.-App-Sandbox-and-Entitlements which contains some outdated instructions - if I copy in the updated commands here would you be able to add them to that wiki documentation? (i'm documenting my process as I go and want to be able to improve existing documentation if possible). ",
    "awvalenti": "How can a README.md change make travis build fail?. ",
    "angrykoala": "json\n  \"dependencies\": {\n    \"electron\": \"^1.6.7\",\n    \"jquery\": \"^3.1.1\",\n    \"materialize-css\": \"^0.98.2\",\n    \"vue\": \"^2.0.8\",\n    \"yerbamate\": \"^2.0.0\"\n  },\n  \"devDependencies\": {\n    \"chai\": \"^4.0.2\",\n    \"electron-packager\": \"^8.3.0\",\n    \"istanbul\": \"^0.4.5\",\n    \"jshint\": \"^2.9.4\",\n    \"mocha\": \"^3.2.0\",\n    \"sinon\": \"^2.0.0\"\n  }. It builds properly with electron as a devDependency and a package-lock.json\n@MarshallOfSound Is there a reason for it being ignored from dependencies when no package-lock file is present but changing this behavior when it exists?. ",
    "gerges": "@malept, apologies, I should have checked there first! https://github.com/npm/npm/issues/17781. ",
    "ghjdegithub": "npm ERR! May not delete\nnpm install -g npm@5.2.0. ",
    "joshuapinter": "For ease of others landing here, this was fixed in npm 5.4.0 so just update your npm with:\nbash\nnpm update -g npm\nAnd you should be good to go.. Just stumbling on this a year later and thought I would chime in for anybody else landing here with this issue. I'm also a Mac user and have been building an Electron app for Windows, testing it on a VMWare installation of Windows 10.\nWhat it sounds like is that your cofounder was opening up the .zip file (preview) and double clicking the .exe. When you double click a .zip file in Windows it lets you preview the contents but it looks exactly like a regular explorer window so you wouldn't know that you first need to extract the files from the .zip. If you don't extract the files first, double clicking the .exe in that preview window prompts Windows to ask you to unpack the .zip file. This extracts the .zip file contents to a different folder.\nYou say that you've got multiple binaries in the same zip file, not just the one for your co-founders platform (i.e. win64). First off, that must be a massive zip file, likely greater than 1 GB, which I would avoid. Secondly, it might be causing confusion with unzipping, etc. \nI would zip just the win64 or win32 package and send that, get them to right click on it to extract all contents first and then open up the directory it extracted everything into. That should solve any confusion.. For ease of others landing here, this was fixed in npm 5.4.0 so just update your npm with:\nbash\nnpm update -g npm\nAnd you should be good to go.. ",
    "xn": "@dougludlow I ran into this problem because one of the other devs added \"electron\": \"^1.8.4\" to dependencies, because ember electron was failing for one reason or another and that fixed their problem. Running make with DEBUG=electron-packager uncovered the culprit: \nelectron-packager Ignored path regular expressions: [ '/node_modules/electron($|/)',\n  '/node_modules/electron-prebuilt(-compile)?($|/)',\n  '/node_modules/electron-packager($|/)',\n  '/\\\\.git($|/)',\n  '/node_modules/\\\\.bin($|/)',\n  '\\\\.o(bj)?$' ] +0ms\nI hope this helps anyone else running into this.... ",
    "hitesh-soni": "can you describe your answer @MarshallOfSound . ",
    "dmos62": "@MarshallOfSound I added a description, and simplified the example a bit.. ",
    "zackshapiro": "I haven't tried on more than one machine, no.\nThe icon hasn't changed, the path hasn't changed. It worked last week and now it doesn't. Unclear as to why.\nHere's the stack trace\n```\n\nDEBUG=electron-packager electron-packager ./ --platform=darwin --arch=x64 --icon='./assets/icons/mac/icon.icns' --out=./builds --overwrite\n\nelectron-packager Electron Packager 8.7.2 +0ms\n  electron-packager Node v7.4.0 +2ms\n  electron-packager Host Operating system: darwin (x64) +1ms\n  electron-packager Packager Options: {\"_\":[\"./\"],\"all\":false,\"deref-symlinks\":true,\"download\":{\"strictSSL\":true},\"overwrite\":true,\"prune\":true,\"quiet\":false,\"platform\":\"darwin\",\"arch\":\"x64\",\"icon\":\"./assets/icons/mac/icon.icns\",\"out\":\"./builds\",\"dir\":\"./\",\"protocols\":[]} +0ms\n  electron-packager Target Platforms: darwin +0ms\n  electron-packager Target Architectures: x64 +0ms\n  electron-packager Inferring application name from productName in /Users/zackshapiro/dev/glimpse-electron/package.json +11ms\n  electron-packager Inferring appVersion from version in /Users/zackshapiro/dev/glimpse-electron/package.json +1ms\n  electron-packager Inferring target Electron version from electron in /Users/zackshapiro/dev/glimpse-electron/package.json +3ms\n  electron-packager Application name: Glimpse +0ms\n  electron-packager Target Electron version: 1.7.5 +0ms\n  electron-packager Ignored path regular expressions: [ '/node_modules/electron($|/)',\n  '/node_modules/electron-prebuilt(-compile)?($|/)',\n  '/node_modules/electron-packager($|/)',\n  '/\\.git($|/)',\n  '/node_modules/\\.bin($|/)',\n  '\\.o(bj)?$' ] +1ms\n  electron-packager Downloading Electron with options {\"strictSSL\":true,\"platform\":\"darwin\",\"arch\":\"x64\",\"version\":\"1.7.5\"} +5ms\nPackaging app for platform darwin x64 using electron v1.7.5\n  electron-packager Creating /var/folders/6n/9v3vtsss3pxd279s989x5t7w0000gn/T/electron-packager/darwin-x64-template +251ms\n  electron-packager Extracting /Users/zackshapiro/.electron/electron-v1.7.5-darwin-x64.zip to /var/folders/6n/9v3vtsss3pxd279s989x5t7w0000gn/T/electron-packager/darwin-x64-template +1ms\n  electron-packager Initializing app in /var/folders/6n/9v3vtsss3pxd279s989x5t7w0000gn/T/electron-packager/darwin-x64/Glimpse-darwin-x64 from /var/folders/6n/9v3vtsss3pxd279s989x5t7w0000gn/T/electron-packager/darwin-x64-template template +1s\n  electron-packager Ignored paths based on the out param: [ '/Users/zackshapiro/dev/glimpse-electron/builds' ] +2ms\n  electron-packager Pruning modules via: npm prune --production +4s\n  electron-packager Copying icon \"./assets/icons/mac/icon.icns\" to app's Resources as \"electron.icns\" +8s\n  electron-packager Renaming Electron to Glimpse in /var/folders/6n/9v3vtsss3pxd279s989x5t7w0000gn/T/electron-packager/darwin-x64/Glimpse-darwin-x64/Electron.app/Contents/MacOS +3ms\n  electron-packager Renaming Electron Helper to Glimpse Helper in /var/folders/6n/9v3vtsss3pxd279s989x5t7w0000gn/T/electron-packager/darwin-x64/Glimpse-darwin-x64/Electron.app/Contents/Frameworks/Electron Helper.app/Contents/MacOS +1ms\n  electron-packager Renaming Electron Helper.app to Glimpse Helper.app in /var/folders/6n/9v3vtsss3pxd279s989x5t7w0000gn/T/electron-packager/darwin-x64/Glimpse-darwin-x64/Electron.app/Contents/Frameworks +0ms\n  electron-packager Renaming Electron Helper EH to Glimpse Helper EH in /var/folders/6n/9v3vtsss3pxd279s989x5t7w0000gn/T/electron-packager/darwin-x64/Glimpse-darwin-x64/Electron.app/Contents/Frameworks/Electron Helper EH.app/Contents/MacOS +1ms\n  electron-packager Renaming Electron Helper EH.app to Glimpse Helper EH.app in /var/folders/6n/9v3vtsss3pxd279s989x5t7w0000gn/T/electron-packager/darwin-x64/Glimpse-darwin-x64/Electron.app/Contents/Frameworks +0ms\n  electron-packager Renaming Electron Helper NP to Glimpse Helper NP in /var/folders/6n/9v3vtsss3pxd279s989x5t7w0000gn/T/electron-packager/darwin-x64/Glimpse-darwin-x64/Electron.app/Contents/Frameworks/Electron Helper NP.app/Contents/MacOS +0ms\n  electron-packager Renaming Electron Helper NP.app to Glimpse Helper NP.app in /var/folders/6n/9v3vtsss3pxd279s989x5t7w0000gn/T/electron-packager/darwin-x64/Glimpse-darwin-x64/Electron.app/Contents/Frameworks +0ms\n  electron-packager Moving /var/folders/6n/9v3vtsss3pxd279s989x5t7w0000gn/T/electron-packager/darwin-x64/Glimpse-darwin-x64 to builds/Glimpse-darwin-x64 +1ms\nWrote new app to builds/Glimpse-darwin-x64\n``. There is noelectron.icnsfile inbuilds/Glimpse-darwin-x64/Glimpse.app/Contents/Resources/`\n. It's not a symlink. It's a file right in my project. It was working fine last week, not sure what happened. I also tried downloading that .icns file from GH and replacing the image in my project. No luck\nI'm using Node v7.4.0. I tried again wrapping the icon route in single quotes: \"package-mac\": \"DEBUG=electron-packager electron-packager ./ --platform=darwin --arch=x64 --icon='./assets/icons/mac/icon.icns' --out=./builds --overwrite\",\nAnd now I have an electron.icns file in /Contents/Resources but the file icon in the build that it put out is still the icon-less Mac app icon\n\n. I tried clearing the cache using a variety of the methods in here: https://gist.github.com/fabiofl/5873100#gistcomment-1887437 with no luck, unfortunately. . Thanks for your help @malept. Quick (hopefully) last question: if it was a caching issue, wouldn't my test users that I send the app to see the icon rather than the icon-less-app icon? i.e., the problem is on my computer and mine only. Confirmed with my friend that they have the custom icon correctly on their machine. So it must be a local caching issue. Thanks @malept, appreciate your time and your work on this library!. They unzipped the folder which had 3 builds in it, a Mac build and 2 windows builds. They started with the x64 build, opening that folder and running the exe. . They were able to unzip the 3 builds but when they went to run the .exe, it asked if they wanted to 'extract files' which took 10+ minutes to do. Unclear if they were able to run the .exe successfully. Waiting to hear back. The fact that I haven't yet leads me to believe that no, they haven't.\nSeems like they should just be able to open the x64 build folder, run the exe and be good to go. Not sure why they're seeing dozens of .dll files and being asked about an extraction\n. . Gotcha re: all the files it generates and alternatives to electron-packager\nI appreciate you helping me on behalf of a third party. I know not ideal, he's non-technical so I'm trying to debug this as best I can. \nThe process he described is as follows:\n1) Download a .zip file with all 3 builds in it\n2) Unzip (quickly) and go into the Windows x64 build\n3) Click on the .exe file and was prompted to unpack files (which took ~10 mins)\n4) Once that was done, he was able to run the .exe file successfully.\nNot sure what's going on in the third step. Just to follow up on this, I had a chance to see what my cofounder was seeing the other day.\nAfter running the .exe file for the first time, windows prompts you to 'unpack' files and references .dll files that need to be unpacked. That takes ~5 mins or so and then the .exe file can run . ",
    "mlb5000": "With package 10.1.0\nI'm having this issue as well. My .icns file appears to be fine, but the one that gets pulled into the Mac .app bundle is not\n\n\nI package using the Programmatic API\n```\nconst packager = require('electron-packager');\nconst rebuild = require('electron-rebuild');\nconst zip = require('electron-installer-zip');\nconst createDmg = require('electron-installer-dmg');\nconst pmjson = require('./package.json');\nconst winstaller = require('electron-winstaller');\npackager({\n  dir: '.',\n  platform: 'all',\n  arch: 'x64',\n  electronVersion: '1.7.9',\n  prune: true,\n  overwrite: false,\n  icon: \"app\",\n  out: \"electron_build\",\n  // \u2026 other options\n  afterCopy: [(buildPath, electronVersion, platform, arch, callback) => {\n    rebuild.rebuild({ buildPath, electronVersion, arch })\n      .then(() => callback())\n      .catch((error) => callback(error));\n  }],\n  // \u2026 other options\n}, function(err, appPaths) {\n  if (err) {\n    console.error(err);\n    process.exit(1);\n  }\nvar version = pmjson.version;\nfor (var i = 0; i < appPaths.length; i++) {\n    var appPath = appPaths[i];\n    console.log('App Path: ' + appPath);\nif (appPath.indexOf('darwin') !== -1) {\n  console.log('creating OS X DMG');\n  createDmg({\n    appPath: appPath + '/plugin-manager.app',\n    name: \"SoftwarePM_v\" + version,\n    //out: 'electron_dist/',\n    overwrite: true,\n    icon: 'IconTemplate@2x.png'\n  }, function(err) {\n    if (err) {\n      console.log('Error creating DMG: ' + err);\n    } else {\n      console.log('Successfully created DMG');\n    }\n  });\n} else if (appPath.indexOf('win32') !== -1) {\n\n}\n\n}\n});\n```. ",
    "phpfs": "I fixed it by using your method of installing wine instead of homebrew!\nI created this repo for everybody having the same problem:\nhttps://github.com/phpfs/electron-packager-macos. ",
    "fmilke": "I have this issue with the current version of my repos (https://github.com/Apfelclonk/nanoMill). But it's quite complex. I'll build test project and see if that problem persists.. This is pretty much a default setup, just with a few glyphs in it, but gives the same result. The packed one seems to be zoomed in over the unpacked one.\ntestCase.zip\nActually even the windows have different size (in the test case they are fixed to 800x600 on startup).\n. This is how they appear right after startup. I did not changed their size in any way. The left one is the unpackaged one, the right one is the one build with the packager. The 32bit and 64bit version behave the same in that aspect.\n\n. I've tried 1.6.11 and 1.6.12 with the same result. Actually I've just found that link on my own, after searching for several hours. But thank you very much for you time, that fixed it for me.. ",
    "XuluWarrior": "Is the option --no-asar or your use of minimist syntax documented anywhere?  I can't find it in usage.txt or api.md\nIn fact api.md states\n\nasar\nBoolean or Object (default: false). \n",
    "yyhan": "\u5728\u8fd9\u4e00\u6b65 Downloading tmp-5756-0-electron-v1.6.2-win32-x64.zip \u65e0\u6cd5\u4e0b\u8f7d\u6216\u8005\u4e0b\u8f7d\u7f13\u6162\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u65b9\u5f0f\u5904\u7406\uff1a\n``` sh\n\u6307\u5b9aELECTRON_MIRROR\u4f7f\u7528\u6dd8\u5b9d\u955c\u50cf\uff0c\u6700\u540e\u7684'/'\u662f\u5fc5\u987b\u7684\nnpm config set ELECTRON_MIRROR \"https://npm.taobao.org/mirrors/electron/\"\n```. ",
    "Panhaiwei": "thank;. ",
    "mailtokartik1": "@bengotow you saved me today! Thank you so much mate!!. ",
    "fzyzcjy": "Thank you for your reply!\nThe dir tree:\n node_modules: ~150MB\n others: ~100KB\n(PS. the outputted dir(we-screen-win32-x64) is ~130MB)\nThe package.json: \n{\n  \"name\": \"we-screen\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"main.js\",\n  \"scripts\": {\n    \"start\": \"electron .\"\n  },\n  \"devDependencies\": {\n    \"electron\": \"~1.6.2\",\n    \"gulp\": \"^3.9.1\",\n    \"rimraf\": \"^2.6.1\"\n  },\n  \"dependencies\": {\n    \"electron-packager\": \"^8.7.2\",\n    \"hammerjs\": \"^2.0.8\",\n    \"jquery\": \"^3.2.1\",\n    \"node-notifier\": \"^5.1.2\"\n  }\n}\nThis is a small project and has less than 1K lines of code. I have a quick SSD. I don't think the number of my dependencies is quite big...\nI am hoping to hearing from you and much appreciation to your kind help!\nRegards\nTurtle. @malept \nHi,\n\nThat's slow because you're copying between drives. \n\nThank you! I have copied the working dir to C:\\ and it is a bit faster now.\n\nmoving electron-packager from dependencies to devDependencies\n\nSorry, but that doesn't work for me. After removal, it still takes ~1.5min (with 100%CPU, 1~2G RAM)... This is almost the same as before.\n\ndue to moving between drives and lots of dependencies\n\nEr, I wonder whether it has really a lot of dependencies? Most of them are just pure js packages like jquery and hammerjs.\n\nmalept closed this an hour ago\n\nSorry, but this issue has not been solved yet... It is still very slow... :(\nPS. My computer: CPU i5-7200U, RAM 8G DDR4 2133MHz, with 256G SSD. I think that is not a extremely slow computer? And your compile speed (2s) is just really fast. Is it because you have a super powerful computer? :D\nSo I wonder how can I make it faster...\nThank you for your quick reply!\nRegards,\nTurtle. It works like a charm!!! Thanks!!! You are so great!!! Now it only takes 7 seconds!!!. Here is my code for changing TEMP dir automatically:\nvar currentDriver = process.cwd().substr(0,1);\nvar cmd = 'set TEMP='+currentDriver+':\\\\Temp && set DEBUG=electron-packager && '+\n        'electron-packager ./ MiaoZhi --arch=x64 --platform=win32 --package-manager=yarn --overwrite';\nexec(cmd);. Thank you!.\n",
    "mbrodersen": "I tried to unzip first and now it works. Thanks for the comment malept! It pointed me in the right direction :-). ",
    "NathanBilleau": "I got news ! The packaged app seems not to be compiled (es6, babel...) so the code isn't readable in chromium, is there a specific thing to configure to fix that ?. i already use electron-prebuilt-compile but it doesn't work. ",
    "yeahdongcn": "I have the same issue here, it seems the js using react doesn't get compiled.\n@NathanBilleau have you resolved this issue?. ",
    "HaythemJ": "Just found that there is a similar issue solved here https://github.com/electron-userland/electron-forge/issues/266\nI am currently using npm 5.30 so I downgraded my npm using this command:\nnpm install -g npm@4\n. ",
    "ynevet": "@dland512 @malept \nHi David,\nCan you please share with us how eventually you resolved the issue?\nThank you!\nPlease see my related question at SO: https://stackoverflow.com/questions/49556041/es6-is-not-supported-after-electron-packaging. @malept \nHow can I use the electron-compile package in order to resolve this issue? please suggest.\nthank you!. ",
    "tahazn": "I dont know how i can use console.log to find out what's wrong in this case. the app is finished and tested and works perfectly in the x64 build and doesnt even launch in the ia32 build.\nI have the latest version of electron but ill try older ones since im desperate for a solution.. Hello!\nSo, what I ended up doing is installing node 32bit and Electron 32bit and rebuilding everything and it worked.\nProblem solved, I guess.. ",
    "kmsheng": "@malept I use git bash to run Electron Packager.. I think it's probably not related to git bash environment, cause I can build electron-quick-starter successfully via git bash.\nI was able to reproduce this issue on electron-quick-starter by the following things:\n - Add my own dependencies and devDependencies to electron-quick-starter's package.json ( https://github.com/karmapa17/garchen-panel/blob/dev/package.json )\n- run npm i\n- run electron-packager . --no-prune --overwrite, the reason I tend to skip pruning is because of https://github.com/npm/npm/issues/18277\nI tried many times it always throws the segmentation on my company's ASUS laptop, but I was able to workaround this by removing some of the devDependencies.\nI still don't know which dependency cause the problem or maybe it has too many dependencies to cause the problem.\nI provide some more details here:\nASUS X402C Series laptop\nWindows 8.1\nIntel(R) Pentium(R) CPU 2117U @ 1.80GHz 1.80 GHz\n4G RAM\nwindows 8.1 x64 \nVisual Studio Community 2017\nNode.js 8.4.0\nnpm 5.4.0. ",
    "bimohxh": "@MarshallOfSound  node version is 8.4.0, but this node version can run in windows with no error. ",
    "ericboehs": "This seemed to be an issue with Node 8.4.x and 8.5.x. I upgraded to 8.8.1 and this error went away.. ",
    "ozooner": "\\<censored>, wrong repo :/. ",
    "MonkeyChap": "Awesome - ta. I'd tried __dirname+\"/script.py\" - didn't realise I needed to use path.join..   \"name\": \"config-app\",\n  \"produceName\": \"config app\",\n  \"version\": \"0.1\",\n  \"description\": \"config tool\",\n  \"main\": \"main.js\",\n  \"scripts\": {\n    \"start\": \"electron .\",\n    \"package-mac\": \"electron-packager . --overwrite --icon=./icons/i256.icns\",\n    \"package-win\": \"electron-packager . --overwrite --asar=true --icon=./icons/i256.ico --prune=true \",\n    \"package-linux\" : \"electron-packager . --overwrite --platform=linux --icon=./icons/i256.png \"\n  },\n  \"repository\": \"\",\n  \"keywords\": [\n    \"illumr\",\n    \"quick\",\n    \"start\",\n    \"tutorial\",\n    \"demo\"\n  ],\n  \"author\": \"Ian\",\n  \"license\": \"commercial\",\n  \"devDependencies\": {\n    \"electron\": \"~1.6.2\",\n    \"guid\": \"\",\n    \"path\": \"\",\n    \"python-shell\": \"\",\n    \"xml\": \"\",\n    \"xml-formatter\": \"*\"\n  }\n}\nor\n\"name\": \"config-app\",\n  \"produceName\": \"config app\",\n  \"version\": \"0.0.1\",\n  \"description\": \"config tool\",\n  \"main\": \"main.js\",\n  \"scripts\": {\n    \"start\": \"electron .\",\n    \"package-mac\": \"electron-packager . --overwrite --icon=./icons/i256.icns\",\n    \"package-win\": \"electron-packager . --overwrite --asar=true --icon=./icons/i256.ico --prune=true \",\n    \"package-linux\" : \"electron-packager . --overwrite --platform=linux --icon=./icons/i256.png \"\n  },\n  \"repository\": \"\",\n  \"keywords\": [\n    \"illumr\",\n    \"quick\",\n    \"start\",\n    \"tutorial\",\n    \"demo\"\n  ],\n  \"author\": \"Ian\",\n  \"license\": \"commercial\",\n  \"devDependencies\": {\n    \"electron\": \"~1.6.2\",\n    \"guid\": \"\",\n    \"path\": \"\",\n    \"python-shell\": \"\",\n    \"xml\": \"\",\n    \"xml-formatter\": \"*\"\n  }\n}\n. npm start doesn't like 2 digit version\nelectron-packager . --overwrite --icon=./icons/i256.icns\n... doesn't like 3 digit ones.\nnpm run package-mac just doesn't work, and I've given up the will to live trying to figure out why, when the command prompt alternative does.\n . Packaging app for platform darwin x64 using electron v1.6.12\nCommand failed: npm prune --production\nnpm WARN config-app@0.0.1 No repository field.\nnpm WARN config-app@0.0.1 license should be a valid SPDX license expression\nnpm ERR! Cannot read property '0' of undefined\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /Users/ian/.npm/_logs/2017-09-02T16_37_17_178Z-debug.log\nIans-MacBook-Pro-2:config-current ian$ electron-packager . --overwrite --icon=./icons/i256.icns\nPackaging app for platform darwin x64 using electron v1.6.12\nWrote new app to /Users/ian/Documents/Development/config-current/config-app-darwin-x64\n. npm start\nnpm ERR! Invalid version: \"0.1\"\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /Users/ian/.npm/_logs/2017-09-02T16_41_13_821Z-debug.log\n. It is indeed 5.3.0 !\nAny suggestion on a better version to run ?\n. Thanks !. Thanks - I'd tried that. I'll pursue the community sites approach though.. ",
    "EduardoSantos7": "Thanks, It works! . ",
    "ochukai": "System info\uff1a\n\n. How could I turn on debug mode in window ?. Thank you, I resolve this problem by ignore node_modules, ^.^  @malept . I change the build command to\nelectron-packager ./ Weiwei --all --out=./out --prune --overwrite --ignore=src/* --ignore=node_modules/*. ",
    "NAIVEddd": "I think --ignore=node_modules should added by default.\nIt's so helpful, thanks.. You are right. But how to fix it? My computer don't have enough memory for electron-packager. The node_modules size is 3 GB ~. ",
    "Jarmahent": "@MarshallOfSound Setting Absolute path is not working for me, I have a db file in a directory and I added it to my build file as:\njson\n\"extraResources\": [\n      \"app/clipboarddb/copydata.db\",\n    ]\nWhen I look at the packaged apps resources I see the file, but in the Handler I have:\nconst dbPath = path.resolve(__dirname, 'copydata.db')\nThe DB file is in the same directory as the Handler\nAnd I still get Error:\nCannot open Database because the directory does not exist\n. ",
    "abdurrahmanekr": "Full error: \n```bash\nPackaging app for platform darwin x64 using electron v1.6.13\n<--- Last few GCs --->\n317738 ms: Mark-sweep 1292.5 (1439.4) -> 1292.4 (1439.4) MB, 1413.9 / 1.4 ms [allocation failure] [GC in old space requested].\n  319152 ms: Mark-sweep 1292.4 (1439.4) -> 1292.4 (1439.4) MB, 1413.2 / 1.5 ms [allocation failure] [GC in old space requested].\n  320635 ms: Mark-sweep 1292.4 (1439.4) -> 1300.5 (1423.4) MB, 1482.0 / 1.7 ms [last resort gc].\n  322130 ms: Mark-sweep 1300.5 (1423.4) -> 1308.5 (1423.4) MB, 1495.0 / 1.5 ms [last resort gc].\n<--- JS stacktrace --->\n==== JS stack trace =========================================\n2: arguments adaptor frame: 1->2\n\nSecurity context: 0x193b667cfb39 \n    3: oncomplete [fs.js:123] [pc=0x58a56e0d46f] (this=0x231fda938be1 )\n    4: arguments adaptor frame: 1->0\n==== Details ================================================\n[2]: arguments adaptor frame: 1->2 {\n  // actual arguments\n  [00] : 0xed01727d899 \n}\n[3]: oncomplete [fs.js:123] [...\nFATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - JavaScript heap out of memory\n 1: node::Abort() [/usr/local/bin/node]\n 2: node::FatalException(v8::Isolate, v8::Local, v8::Local) [/usr/local/bin/node]\n 3: v8::internal::V8::FatalProcessOutOfMemory(char const, bool) [/usr/local/bin/node]\n 4: v8::internal::Factory::NewFixedArray(int, v8::internal::PretenureFlag) [/usr/local/bin/node]\n 5: v8::internal::TypeFeedbackVector::New(v8::internal::Isolate, v8::internal::Handle) [/usr/local/bin/node]\n 6: v8::internal::(anonymous namespace)::EnsureFeedbackVector(v8::internal::CompilationInfo) [/usr/local/bin/node]\n 7: v8::internal::(anonymous namespace)::GenerateBaselineCode(v8::internal::CompilationInfo) [/usr/local/bin/node]\n 8: v8::internal::(anonymous namespace)::GetUnoptimizedCodeCommon(v8::internal::CompilationInfo) [/usr/local/bin/node]\n 9: v8::internal::Compiler::Compile(v8::internal::Handle, v8::internal::Compiler::ClearExceptionFlag) [/usr/local/bin/node]\n10: v8::internal::Runtime_CompileLazy(int, v8::internal::Object*, v8::internal::Isolate) [/usr/local/bin/node]\n11: 0x58a569092a7\n12: 0x58a56934338\n13: 0x58a56909895\n14: 0x58a56e0d46f\n15: 0x58a56909895\n16: 0x58a5693b7a3\nAbort trap: 6\n```. I resolve the problem by deleting and reinstalling the node_modules folder. I guess I was doing a lot of work on the computer at that time and the memory was being used. I could not catch that error again. But if it happens again I will share it here.. ",
    "WhoAteDaCake": "Having similar issue where usage goes up to 1.6GB RAM. ",
    "puremana": "Link to source, may help https://github.com/puremana/IOU-Helper-2.0/blob/master/render.js\nLine 14 -> 28. You meantnpm run package for 5. correct?\nI followed your example and it worked. After various attempts at trying to understand why my project was then not working, I reinstalled nodejs and it finally packaged. Thanks.. ",
    "mmorton": "I have a potential fix for this here: https://github.com/electron/asar/pull/140.  \nWe've used this in our environment, with a temporarily forked electron-packager and asar, and it does seem to do the trick, both with our own app, as well as the electron-quick-start reproduction above.. @corvinrok You can try our temporary fork, which uses a forked asar, to see if it fixes the issue for you: https://www.npmjs.com/package/@ryverapp/electron-packager.. ",
    "Devhercule": "doing this, I have this error : \n```\n<<<< VTVideoEncoderSelection >>>> VTSelectAndCreateVideoEncoderInstanceInternal: no video encoder found for 'avc1'\n[10:22:51.406] VTSelectAndCreateVideoEncoderInstanceInternal signalled err=-12908 (err) (Video encoder not available) at /SourceCache/CoreMedia_frameworks/CoreMedia-1562.238/Sources/VideoToolbox/VTVideoEncoderSelection.c line 1245\n[10:22:51.407] VTCompressionSessionCreate signalled err=-12908 (err) (Could not select and open encoder instance) at /SourceCache/CoreMedia_frameworks/CoreMedia-1562.238/Sources/VideoToolbox/VTCompressionSession.c line 946\n```. Ok thanks. electron-packager ./ --platform=win32 --arch=x64 --ignore=file --overwrite --icon=logo.ico. ",
    "mcorniquet-dalet": "It works when run from command or from npm - but fails with gradle:\nPlease see attached for STDERR\nhttps://github.com/electron-userland/electron-packager/files/1367395/gradle.KO.log. It works with: gradle testExec\ntask testExec(type:Exec) {\n  commandLine \"electron-packager.cmd\", \".\", \"--electron-version=1.8.1\", \"--overwrite\", \"--asar\", \"--platform=win32\", \"--arch=x64\", \"--icon=img/icons/ABCD wxyz.png\", \"--no-prune\", \"--out=release-builds\", \"--version-string.CompanyName=ABCD\"\n}\nNo print it's silent but package built.. ",
    "walleXD": "@malept can you use the repo I am working with? The electron app is in the desktop folder inside the package. Its a monorepo created with lerna. So, you need to globally install lerna and then in the root directory run lerna bootstrap to install all dependencies. Then you can run yarn scripts inside the desktop folder. So, yarn package will run electron-packager and should throw the error associated with missing @react-universal/component package. Ooops..... So, just tried to rebuild with \"derefSymlinks\": false but still get the same issue. ",
    "JackieLs": "Sorry, so late to provide these info.\nthe config.\nmodule.exports = {\n    appVersion: pkg.version,\n    arch: ['x64'], // ia32, x64, armv7l, all\n    asar: true,\n    dir: path.join(__dirname, '../app'),\n    icon: path.join(__dirname, '../app/icons/icon'),\n    ignore: /renderer/,\n    out: path.join(__dirname, '../builds'),\n    overwrite: true,\n    platform: process.env.PLATFORM_TARGET,\n    extraResource: [ \n        path.join(__dirname, '../app/mind/mind_darwin'), \n        path.join(__dirname, '../app/mind/mind_win32.exe')\n    ]\n}\nAnd I solved this problem after I remove the asar: true (default: false) opt on Windows.\nI've read a lot of issue. Maybe this should not be the electron-packager's duty.\nI'm not sure.But Windows is really confusing.\nThx. @malept . \ncontent's width: 819px\n\nthe window's width: 754\nI don't under stand this.. Sorry this is not your issue.This is the electron's. ",
    "devarshjoshi": "I have been doing that to no avail :( . @malept awesome that helped!! thanks.. ",
    "umairfarooq44": "@malept  can you please give example to use aftercopy hook and how to give package.json path. Thanks a lot. I solved my issue by giving my directory in \"dir\" option and manually coping my package.json to that directory. ",
    "welcome[bot]": "\ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. Thanks for opening a pull request!\nHere are some highlighted action items that will help get it across the finish line, from the\npull request guidelines:\n- Follow the JavaScript coding style.\n- Run npm run lint locally to catch formatting errors earlier.\n- Document any user-facing changes in NEWS.md and other docs.\n- Include tests when adding/changing behavior.\nDevelopment and triage is community-driven, so please be patient and we will get back to you as soon as we can.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. Thanks for opening a pull request!\nHere are some highlighted action items that will help get it across the finish line, from the\npull request guidelines:\n- Follow the JavaScript coding style.\n- Run npm run lint locally to catch formatting errors earlier.\n- Document any user-facing changes in NEWS.md and other docs.\n- Include tests when adding/changing behavior.\nDevelopment and triage is community-driven, so please be patient and we will get back to you as soon as we can.\n. Thanks for your contribution! \ud83c\udf89\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. Thanks for opening a pull request!\nHere are some highlighted action items that will help get it across the finish line, from the\npull request guidelines:\n- Follow the JavaScript coding style.\n- Run npm run lint locally to catch formatting errors earlier.\n- Document any user-facing changes in NEWS.md and other docs.\n- Include tests when adding/changing behavior.\nDevelopment and triage is community-driven, so please be patient and we will get back to you as soon as we can.\n. Thanks for your contribution! \ud83c\udf89\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. Thanks for opening a pull request!\nHere are some highlighted action items that will help get it across the finish line, from the\npull request guidelines:\n- Follow the JavaScript coding style.\n- Run npm run lint locally to catch formatting errors earlier.\n- Document any user-facing changes in NEWS.md and other docs.\n- Include tests when adding/changing behavior.\nDevelopment and triage is community-driven, so please be patient and we will get back to you as soon as we can.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. Thanks for opening a pull request!\nHere are some highlighted action items that will help get it across the finish line, from the\npull request guidelines:\n- Follow the JavaScript coding style.\n- Run npm run lint locally to catch formatting errors earlier.\n- Document any user-facing changes in NEWS.md and other docs.\n- Include tests when adding/changing behavior.\nDevelopment and triage is community-driven, so please be patient and we will get back to you as soon as we can.\n. Thanks for your contribution! \ud83c\udf89\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. Thanks for opening a pull request!\nHere are some highlighted action items that will help get it across the finish line, from the\npull request guidelines:\n- Follow the JavaScript coding style.\n- Run npm run lint locally to catch formatting errors earlier.\n- Document any user-facing changes in NEWS.md and other docs.\n- Include tests when adding/changing behavior.\nDevelopment and triage is community-driven, so please be patient and we will get back to you as soon as we can.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. Thanks for opening a pull request!\nHere are some highlighted action items that will help get it across the finish line, from the\npull request guidelines:\n- Follow the JavaScript coding style.\n- Run npm run lint locally to catch formatting errors earlier.\n- Document any user-facing changes in NEWS.md and other docs.\n- Include tests when adding/changing behavior.\nDevelopment and triage is community-driven, so please be patient and we will get back to you as soon as we can.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. Thanks for your contribution! \ud83c\udf89\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. Thanks for opening a pull request!\nHere are some highlighted action items that will help get it across the finish line, from the\npull request guidelines:\n- Follow the JavaScript coding style.\n- Run npm run lint locally to catch formatting errors earlier.\n- Document any user-facing changes in NEWS.md and other docs.\n- Include tests when adding/changing behavior.\nDevelopment and triage is community-driven, so please be patient and we will get back to you as soon as we can.\n. Thanks for your contribution! \ud83c\udf89\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. Thanks for opening a pull request!\nHere are some highlighted action items that will help get it across the finish line, from the\npull request guidelines:\n- Follow the JavaScript coding style.\n- Run npm run lint locally to catch formatting errors earlier.\n- Document any user-facing changes in NEWS.md and other docs.\n- Include tests when adding/changing behavior.\nDevelopment and triage is community-driven, so please be patient and we will get back to you as soon as we can.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. Thanks for opening a pull request!\nHere are some highlighted action items that will help get it across the finish line, from the\npull request guidelines:\n- Follow the JavaScript coding style.\n- Run npm run lint locally to catch formatting errors earlier.\n- Document any user-facing changes in NEWS.md and other docs.\n- Include tests when adding/changing behavior.\nDevelopment and triage is community-driven, so please be patient and we will get back to you as soon as we can.\n. Thanks for your contribution! \ud83c\udf89\n. \ud83d\udc4b Thanks for opening your first issue here! If you have a question about using Electron Packager, read the support docs. If you're reporting a \ud83d\udc1e bug, please make sure you include steps to reproduce it. Development and issue triage is community-driven, so please be patient and we will get back to you as soon as we can.\nTo help make it easier for us to investigate your issue, please follow the contributing guidelines.\n. ",
    "bonzzy": "in #37 I see that the problem was configuring package.json in too many places.\nBut I am not sure why would electron-packager even try to build wrong path where package.json is found.\nCurrent project structure is something like this: apps/app1, apps/app2\nApps folder has package.json and I am trying to build app1. Since electron-packager is recursively trying to find package.json it thinks that it needs to build apps folder, not apps/app1. So it doesn't build my app, but builds somehow apps folder which creates executable file which is errored.\nI am worried that this kind of behaviour could be misleading.. Because in apps folder there are many similar electron applications which share the same package.json. In this case it doesn't make sense to separately init npm in all applications, so we use apps folder for this.. Thank you for advice. \nI would propose that if package.json is not found in source directory than electron-packager should at least output a warning in console saying something like\n\npackage.json not found in source dir, searching recursively. \n\nJust for information for user.. ",
    "valoricDe": "Another idea is\n\"start\": \"NODE_ENV=development electron .\" in package.json\nand in main.js\nconst main = process.NODE_ENV == 'development' ? require('development.js') : require('production.js');. ",
    "Triple-Z": "@malept electron-quick-start app indicates that my node.js version is 7.9.0, chromium version is 58.0 and electron version is 1.7.9.\n\n\n. This is the package.json.\njson\n{\n    \"name\": \"electron-quick-start\",\n    \"version\": \"1.0.0\",\n    \"description\": \"A minimal Electron application\",\n    \"main\": \"main.js\",\n    \"scripts\": {\n        \"start\": \"electron .\",\n        \"dist\": \"electron-packager . --platform=linux --arch=x64 --overwrite --out=pack\"\n    },\n    \"repository\": \"https://github.com/electron/electron-quick-start\",\n    \"keywords\": [\n        \"Electron\",\n        \"quick\",\n        \"start\",\n        \"tutorial\",\n        \"demo\"\n    ],\n    \"author\": \"GitHub\",\n    \"license\": \"CC0-1.0\",\n    \"dependencies\": {\n        \"electron\": \"~1.7.8\"\n    },\n    \"devDependencies\": {\n        \"electron-packager\": \"^9.1.0\"\n    }\n}. \nAnd I still got 270MB after changing electron version to 1.6.15.. @malept  It's like a magic! I have tried your method, and its size is reduced to 141 MB .\nIf I use the --asar option, it would reduce to 136 MB.\nAnd I find the differents between these methods is I have put electron into devDependencies instead of dependencies in package.json.\n- If I put electron into dependencies, the final package size will be 265 MB;\n- If I put electron into devDependencies, the final package size will be reduced to 136 MB, this size is close to yours.\nI wonder what's the main difference between dependencies and devDependencies.... Another interesting result: if I use cnpm instead of npm to install packages, the distribution app will be much larger than before. I test it by npm with the same way, it produce 365 MB directory.\n```bash\n$ git clone https://github.com/electron/electron-quick-start.git\n$ cd electron-quick-start \n$ cnpm install\n\u2714 Installed 1 packages\n\u2714 Linked 146 latest versions\n\u2714 Run 1 scripts\n\u2714 All packages installed (152 packages installed from npm registry, used 3s, speed 73.77kB/s, json 147(239.46kB), tarball 0B)\n$ electron-packager . --out=pack --overwrite\nPackaging app for platform linux x64 using electron v1.7.9\nWrote new app to pack/electron-quick-start-linux-x64\n$ du -sh pack\n365M    pack\n```\nMaybe this is related to the structure of the node_modules which generated by npm or cnpm.. ",
    "barinali": "CFBundleIconFile is marked as legacy here.\n\nDon't provide app icons in ICNS or JPEG format. Add de-interlaced PNG files in the app icon fields of your Xcode project's asset catalogue.\n\nThe quote above is mentioned in this page\nIn Xcode, we have a section for AppIcon (Assets.xcassets). Here, we can add multiple png files. I've attached a screenshot of the screen. But as far as I see, this section doesn't create a .icns file as a result. So I believe we should improve the way that we're using to add app icons.\nBut since also I'm not an expert about this, I don't have any way to achieve this through electron.\nBesides that, there is another thing confusing me. CFBundleIconFile is mentioned with an additional info which is \"Use the CFBundleIcons or CFBundleIconFiles keys instead. See CFBundleIconFile for details.\". The confusing part is that they don't seem supporting MacOS as a platform. Are we supposed to use them still!?\nAppIcon section;\n\n. I couldn't find anything related to that in Info.plist. We have ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon; as a build setting in project.pbxproj. AppIcon is a folder name and its path is <projectRoot>/Assets.xcassets/AppIcon.appiconset.. That feature as a plugin sounds not bad. But then, the projects which are using electron-packager via CLI would need to change their approaches. That could be my concern here.\nI guess I can't say anything about the number. But in my opinion, developers who are developing MacOS application and using electron-packager should be aware of the languages and should be able to manage them. They may have i18n support in their applications, but not for all languages probably. Its maintenance cost shouldn't be that much. Those language file/folders are not frequently changing. I think once we develop the feature, it would go for a long while if there is nothing wrong. For CLI argument, we may accept inline comma separated string or a .json file. So it may look like one of these;\n\nelectron-packager . Sample --languages=en,en_GB,de\nelectron-packager . Sample --languages=./languages.json\n\nThen languages.json would look like; [\"en\", en_GB\", \"de\"].\nAnyway, I need this and would prepare a solution. Would you like to see that plugin in README here if I develop it?. Hello again @malept, I've created a plugin to meet this need. Here is the repository URL and the NPM package. What is gonna happen to this issue is up to you. :)\nIf there is anything missing that you see, let me know. . ",
    "dotku": "Anyone have successfully generate the icns icon? I can't make it either :(\nHere is what I have done\nelectron-packager . --platform=darwin --overwrite --icon=build/icon.icns --purne=true. ",
    "nakvic": "Its armv7l. No console output at all :( so I could not identify an issue. I have neither electron nor nodejs, chromium installed on the machine as I think, they all are packed to the release, don't they?\nI packed all these on MAC OS and just copied to raspberry. I'm not sure, what am I doing wrong and googling did not give too much. The goal is to pack the app on MAC OS and deploy the release to raspberry with other dependency to be deployed.\nHere is console output:\nusername@RB05:~/electron/assistant-linux-armv7l $ ls -l\ntotal 95444\n-rw-r--r-- 1 username raspberry     1060 Nov 20 22:26 LICENSE\n-rw-r--r-- 1 username raspberry  1775951 Nov 20 22:27 LICENSES.chromium.html\n-rwxr-xr-x 1 username raspberry 55462456 Nov 20 22:26 assistant\n-rw-r--r-- 1 username raspberry    24844 Nov 20 22:27 blink_image_resources_200_percent.pak\n-rw-r--r-- 1 username raspberry       15 Nov 20 22:26 content_resources_200_percent.pak\n-rw-r--r-- 1 username raspberry 12032534 Nov 20 22:26 content_shell.pak\n-rw-r--r-- 1 username raspberry 10130560 Nov 20 22:27 icudtl.dat\n-rw-r--r-- 1 username raspberry  2002296 Nov 20 22:27 libffmpeg.so\n-rwxr-xr-x 1 username raspberry 14323560 Nov 20 22:26 libnode.so\ndrwxr-xr-x 2 username raspberry     4096 Nov 20 22:27 locales\n-rw-r--r-- 1 username raspberry   262947 Nov 20 22:27 natives_blob.bin\n-rw-r--r-- 1 username raspberry   140979 Nov 20 22:27 pdf_viewer_resources.pak\ndrwxr-xr-x 3 username raspberry     4096 Nov 20 22:27 resources\n-rw-r--r-- 1 username raspberry  1315500 Nov 20 22:27 snapshot_blob.bin\n-rw-r--r-- 1 username raspberry   151829 Nov 20 22:26 ui_resources_200_percent.pak\n-rw-r--r-- 1 username raspberry        6 Nov 20 22:27 version\n-rw-r--r-- 1 username raspberry    57761 Nov 20 22:26 views_resources_200_percent.pak\nusername@RB05:~/electron/assistant-linux-armv7l $ \nusername@RB05:~/electron/assistant-linux-armv7l $ \nusername@RB05:~/electron/assistant-linux-armv7l $ uname -m\narmv7l\nusername@RB05:~/electron/assistant-linux-armv7l $ sudo ./assistant \nusername@RB05:~/electron/assistant-linux-armv7l $ \n. Its actually no matter, \"sudo\" or not. it does not run either.\nI have no desktop environment, just CLI. No GUI.\nHere is all other info:\nusername@RB05:~/electron/assistant-linux-armv7l $ ./assistant \nusername@RB05:~/electron/assistant-linux-armv7l $ cat /etc/os-release\nPRETTY_NAME=\"Raspbian GNU/Linux 8 (jessie)\"\nNAME=\"Raspbian GNU/Linux\"\nVERSION_ID=\"8\"\nVERSION=\"8 (jessie)\"\nID=raspbian\nID_LIKE=debian\nHOME_URL=\"http://www.raspbian.org/\"\nSUPPORT_URL=\"http://www.raspbian.org/RaspbianForums\"\nBUG_REPORT_URL=\"http://www.raspbian.org/RaspbianBugs\"\nusername@RB05:~/electron/assistant-linux-armv7l $ lsb_release -a\nNo LSB modules are available.\nDistributor ID: Raspbian\nDescription:    Raspbian GNU/Linux 8.0 (jessie)\nRelease:    8.0\nCodename:   jessie\nusername@RB05:~/electron/assistant-linux-armv7l $ uname -a\nLinux RB05 4.9.35-v7+ #1014 SMP Fri Jun 30 14:47:43 BST 2017 armv7l GNU/Linux\nusername@RB05:~/electron/assistant-linux-armv7l $ uname -r\n4.9.35-v7+\nusername@RB05:~/electron/assistant-linux-armv7l $ uname -a\nLinux RB05 4.9.35-v7+ #1014 SMP Fri Jun 30 14:47:43 BST 2017 armv7l GNU/Linux\nVictor. ",
    "armandn": "Thanks for the responses.\n\nwhich will cause an app code signed for MAS distribution to crash at launch locally. So what you're experiencing is an expected behavior.\n\nI saw that in the guide. However, the signed app is also crashing at launch for the reviewers, resulting in it being rejected!\nAlso, in my experience with NWjs (and Flash/AIR before that) the signed app would be rejected by Gatekeeper, but wouldn't crash outright.\nI'll experiment with electron-osx-sign and see what happens.... Apple says this:\n\nSpecifically, App does not launch. After momentarily the icon appeared on Dock, app quits. No crash log generated. \n\nI'll investigate further.. ",
    "usergit": "@armandn did you solve the problem, I am experiencing the same rejection from the app store reviewers. ",
    "frankangelone": "To reproduce the problem, I built the application using the CLI arguments provided above.  I then used electron-installer-dmg to create an installer for the application.  The user then double clicked the DMG, copied the .app to the Applications folder on their Mac and double clicked the .app file to launch it.  Upon trying to launch the application, that's when the error provided occurred for the user.\nHowever, as mentioned, when I follow these steps, the error does not occur for me.  If you would prefer to have me have the user post a comment here about their exact steps that triggered the error, I can reach out to them.  . Just checked in ../Contents/Resources/app and I saw the main.js file was copied successfully into the folder.  I'm going to touch base with the user to see if they have any additional steps to provide that's causing the error.  . The latest update I was provided was that there were permission issues on the application contents.  The application permissions had to be manually reset and repackaged.. For both main.js in the package and source repo, the permissions were read only for everyone.  Only my development machine has read and write access to the main.js file.\nThe user reporting the permission issues handles the rolling out of our applications to our user base.  It appears the issue occurred when he tried to take the package and roll it into the most recent changes.  That's when he had to manually reset all of the application permissions and repackage.  I was told everything worked after that.  It may have been local to his machine when rolling in the new changes of the application where the permission issues occurred.  \nWe are going to test more to make sure the error message won't pop up now that it's been confirmed it's working.. ",
    "kochizufan": "Like this:\n{\n  \"name\": \"MaplatEditor\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"lib/main.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"@turf/turf\": \"^4.6.1\",\n    \"argv\": \"0.0.2\",\n    \"async\": \"^2.5.0\",\n    \"child_process\": \"^1.0.2\",\n    \"electron-json-storage\": \"^3.2.0\",\n    \"file-url\": \"^2.0.2\",\n    \"fs-extra\": \"^3.0.1\",\n    \"imagemagick\": \"^0.1.3\",\n    \"mapshaper\": \"^0.4.31\",\n    \"path\": \"^0.12.7\",\n    \"wellknown\": \"^0.5.0\"\n  }\n}. Sorry I forgot about this thread...\nIn my case, I updated @turf module for latest version, then electron-packager worked well.\nI don't know why, but it looks not the issue of electron-packager...\n. ",
    "jessegavin": "@kochizufan do the dependencies that do not start with a @ get copied to the node_modules folder?\nI am having a similar issue except NONE of my dependencies are being copied.. Here's my package.json\n{\n  \"name\": \"electron-quick-start\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A minimal Electron application\",\n  \"main\": \"main.js\",\n  \"scripts\": {\n    \"start\": \"electron .\"\n  },\n  \"repository\": \"https://github.com/electron/electron-quick-start\",\n  \"keywords\": [\n    \"Electron\",\n    \"quick\",\n    \"start\",\n    \"tutorial\",\n    \"demo\"\n  ],\n  \"author\": \"GitHub\",\n  \"license\": \"CC0-1.0\",\n  \"devDependencies\": {\n    \"electron\": \"~1.7.8\"\n  },\n  \"dependencies\": {\n    \"lodash.capitalize\": \"^4.2.1\"\n  }\n}\nI tried electron-packager . --package-manager=yarn. I get the same result.\nIt doesn't matter which dependencies I have, they never end up in the /Contents/Resources/app/node_modules/ directory unless I do --prune=false which is not desirable.. Weird, so it seems like a Mac OS issue?. I ran the following and the dependencies were copied over to the node_modules directory as expected!\nDEBUG=electron-packager electron-packager . electron-packager . --package-manager=yarn\nThe last time I tried the --package-manager=yarn option I did not see the same result.\nThinking about this further, it might be due to the fact that sometimes the tree-structure in vscode (which I was using) is not 100% in sync with files on disk.  I wonder if I would have seen it show up if I had hit the \"refresh\" button after running it the first time with the --package-manager=yarn option.\nSorry, this is definitely a user-error. I didn't know about the --package-manager=yarn option before posting this issue.\nThanks for your help. \n. ",
    "dancinglone": "i came across with the same issue V_V. ",
    "brtthomp": "I am having a similar issue but without yarn.\nIn my instance I am using stylus and pug (which are css and html pre-processors).   I use gulp to build each of these into a dist folder as well as copy the package.json file into the dist as well.  The reason I do this is because there are different builds that need to be done.  When I run electron-packager and point it to dist it will build without the node_modules folder thus causing problems.\nMy proposal would be that electron-packager looks up in parent directories to find a node_modules folder if one does not exist.  Otherwise I am force to either run npm install or copy the modules folder over on each build.. @malept \nI must have misunderstood the summary and read too much into the original title.  Sorry about that.\nThanks for the update.. ",
    "mathuin": "That's fine -- the intent was to share with you the code that ran on my system in the hopes that you would be able to make a proper patch.  Like I mentioned in the other issue, I don't know the language and certainly don't understand the codebase.  It's okay if you want to close the PR -- I just wanted you to see the code that worked here.. ",
    "ZenoFox": "Okay, so I've now edited the code and it looks like this:\nconst path = require('path');\nvar settings = path.resolve(__dirname, 'settings.json');\nvar billing = path.resolve(__dirname, 'billing.json');\nI still get the error.\nI've also tried leaving out the \"__dirname\" and some other combinations.\nThe directory of the app looks like this:\nhttps://imgur.com/a/8R0VP\nCan't use \"const\" instead of \"var\", because that results in another error, also I want my app to be able to change the .json files.\nI'd really appreciate if you help.\nSorry, it's probably just a very simple problem, I'm new to node.js and all that kind of stuff.\n. Also tried \"var settings = path.resolve(__dirname, 'settings.json');\" etc., nothing worked.. ",
    "patriciovergaratobar": "only happens in armv7l. ",
    "cinder92": "Thanks for answering, at this time i fixed the issue updating my npm ;) thanks!. 5.4.0 then updated to latest one 5.6.0. ",
    "pixelkritzel": "I had this problem with another dependency. I kind of solved by using npm@3 instead of npm@5. It seems there is a bug in npm@5 prune command. Sorry, my bad.. ",
    "arximboldi": "\nYou can achieve the same thing by creating an Electron Packager plugin\nthat uses the afterExtract and afterCopy hooks. The afterExtract\nhook would rename the Electron license file, and the afterCopy hook\nwould move the app license file to the same directory as the\nElectron/Chromium licenses.\n\nThanks Mark.  I was not aware of that plugin API, that is good enough.\nCheers!\nJP\n-- \n\u223f\u223f\u223f  https://sinusoid.al\n\u223f\u223f\u223f  https://sinusoid.es\n. ",
    "Hammster": "@malept we use this to select the electron version specific DLL of electron-edge-js on mac builds previously we used electron-builder where the option extraResources / extraFiles allow for individual file parsing into content and resources.\nBut maybe the use case is not well chosen, let's say you want to keep a folder structure when copying resources then this option will help you archiving that. Even though it would have been nice if I added glob support too, bad sadly I did not have the time to do it.. ",
    "BOOMER74": "@malept I'm using API with options:\njs\nconst options = {\n    appCopyright: \"...\",\n    asar: true,\n    dir: `${__dirname}/src/`,\n    icon: `${__dirname}/src/logo.ico`,\n    ignore: [/\\.gitignore/],\n    name: \"...\",\n    out: \"out/\",\n    overwrite: true,\n    win32metadata: {\n        CompanyName: \"...\",\n        FileDescription: \"...\",\n        InternalName: \"...\",\n        OriginalFilename: \"...\",\n        ProductName: \"...\"\n    }\n};\nand additional with arch and platform if this arguments passed to script (if they passed, all work fine). No special project required, just start packager script without setup arch and platform.\nConsole output have only one difference (with passed arguments):\nelectron-packager Packager Options: { ..., \"arch\":\"x64\",\"platform\":\"win32\" }\nFull log (without arguments):\nelectron-packager Electron Packager 10.1.1 +0ms\n  electron-packager Node v9.4.0 +2ms\n  electron-packager Host Operating system: win32 (x64) +1ms\n  electron-packager Packager Options: {\"appCopyright\":\"...\",\"asar\":true,\"dir\":\"src/\",\"icon\":\"src/logo.ico\",\"ignore\":[{},{},{},{}],\"name\":\"...\",\"out\":\".../out/\",\"overwrite\":true,\"win32metadata\":{\"CompanyName\":\"...\",\"FileDescription\":\"...\",\"InternalName\":\"...\",\"OriginalFilename\":\"...\",\"ProductName\":\"...\"}} +0ms\n  electron-packager Target Platforms: win32 +0ms\n  electron-packager Target Architectures: x64 +0ms\n  electron-packager Inferring appVersion from version in ...\\src\\package.json +0ms\n  electron-packager Inferring target Electron version from electron in ...\\package.json +4ms\n  electron-packager Application name: ... +33ms\n  electron-packager Target Electron version: 1.8.2-beta.3 +0ms\n  electron-packager Ignored path regular expressions: [ /\\.gitignore/,\n  '/node_modules/electron($|/)',\n  '/node_modules/electron-prebuilt(-compile)?($|/)',\n  '/node_modules/electron-packager($|/)',\n  '/\\\\.git($|/)',\n  '/node_modules/\\\\.bin($|/)',\n  '\\\\.o(bj)?$' ] +0ms\n  electron-packager Downloading Electron with options {\"platform\":\"win32\",\"arch\":\"x64\",\"version\":\"1.8.2-beta.3\"} +0ms\nPackaging app for platform win32 x64 using electron v1.8.2-beta.3\n  electron-packager Creating ...\\Temp\\electron-packager\\win32-x64-template +356ms\n  electron-packager Extracting ...\\.electron\\electron-v1.8.2-beta.3-win32-x64.zip to ...\\Temp\\electron-packager\\win32-x64-template +3ms\n  electron-packager Initializing app in ...\\Temp\\electron-packager\\win32-x64\\...-win32-x64 from ...\\Temp\\electron-packager\\win32-x64-template template +0ms\n  electron-packager Ignored paths based on the out param: [ '...\\\\out' ] +3s\n  electron-packager Pruning modules via: npm prune --production +0ms\n  electron-packager Running asar with the options {} +46s\n  electron-packager Renaming electron.exe to ....exe in ...\\Temp\\electron-packager\\win32-x64\\...-win32-x64 +5s\n  electron-packager Running rcedit with the options {\"version-string\":{\"FileDescription\":\"...\",\"InternalName\":\"...\",\"OriginalFilename\":\"...\",\"ProductName\":\"...\",\"CompanyName\":\"...\",\"LegalCopyright\":\"...\"},\"file-version\":\"...\",\"product-version\":\"...\",\"icon\":\"src/images/logo.ico\"} +0ms\n  electron-packager Moving ...\\Temp\\electron-packager\\win32-x64\\...-win32-x64 to ...\\out\\...-win32-x64 +628ms. ",
    "codecov-io": "Codecov Report\n\n:exclamation: No coverage uploaded for pull request base (master@a392319). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster   #795   +/-\n=======================================\n  Coverage          ?   100%         \n=======================================\n  Files             ?     11         \n  Lines             ?    574         \n  Branches          ?      0         \n=======================================\n  Hits              ?    574         \n  Misses            ?      0         \n  Partials          ?      0\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ignore.js | 100% <\u00f8> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a392319...928ca03. Read the comment docs.\n. \n",
    "trickpattyFH20": "Hey @malept thanks for the response\nHere are the steps that I am able to reproduce this with:\nUsing nodejs versions (8.9.x and 9.x) - macOS 10.13.1\ngit clone https://github.com/electron/electron-quick-start.git\ncd electron-quick-start\nnpm i\nnpm i --save-dev electron-packager\nnpm i --save 'github:trickpattyFH20/hoxy#forkrelease'\necho \"const hoxy = require('hoxy')\" >> ./main.js\n$(npm bin)/electron-packager . --overwrite --asar=false\nLinux test\nls electron-quick-start-linux-x64/resources/app/node_modules/hoxy\nor\n./electron-quick-start-linux-x64/electron-quick-start\nmacOS test\nopen ./electron-quick-start-darwin-x64/electron-quick-start.app\n. I noticed that electron-packager runs npm prune --production when compiling.\nlooks like this issue relates to another one here: https://github.com/npm/npm/issues/19356 \na temp workaround can be to install github dependencies using the tarball url rather than the .git url\nso instead of:\nnpm i --save github:trickpattyFH20/hoxy#forkrelease\nuse:\nnpm i --save https://github.com/trickpattyFH20/hoxy/tarball/forkrelease. ",
    "jean-emmanuel": "Indeed !\nEdit: haha I think I got confused too !. Thanks !. ",
    "TongDaDa": "@malept  thanks a lot , very very very good... sure enough is this problem.. ",
    "codecov[bot]": "Codecov Report\n\nMerging #800 into master will increase coverage by 5.05%.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff            @@\nmaster   #800      +/-\n========================================\n+ Coverage   94.94%   100%   +5.05%   \n========================================\n  Files          11     11            \n  Lines         574    579       +5   \n========================================\n+ Hits          545    579      +34   \n+ Misses         29      0      -29\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| targets.js | 100% <100%> (\u00f8) | :arrow_up: |\n| ignore.js | 100% <0%> (+2.63%) | :arrow_up: |\n| mac.js | 100% <0%> (+23.72%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f09ac9e...b6e4082. Read the comment docs.\n. # Codecov Report\nMerging #804 into master will decrease coverage by 5%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #804      +/-\n==========================================\n- Coverage     100%   94.99%   -5.01%   \n==========================================\n  Files          11       11            \n  Lines         579      579            \n==========================================\n- Hits          579      550      -29   \n- Misses          0       29      +29\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| mac.js | 76.27% <0%> (-23.73%) | :arrow_down: |\n| ignore.js | 97.36% <0%> (-2.64%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 68c99e2...1b39cd7. Read the comment docs.\n. # Codecov Report\nMerging #805 into master will decrease coverage by 5%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #805      +/-\n==========================================\n- Coverage     100%   94.99%   -5.01%   \n==========================================\n  Files          11       11            \n  Lines         579      579            \n==========================================\n- Hits          579      550      -29   \n- Misses          0       29      +29\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| mac.js | 76.27% <0%> (-23.73%) | :arrow_down: |\n| ignore.js | 97.36% <0%> (-2.64%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 197ab5c...9b99e15. Read the comment docs.\n. # Codecov Report\nMerging #807 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster   #807   +/-\n=====================================\n  Coverage     100%   100%         \n=====================================\n  Files          11     11         \n  Lines         579    597   +18   \n=====================================\n+ Hits          579    597   +18\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| mac.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cdd6709...c82cc36. Read the comment docs.\n. # Codecov Report\nMerging #814 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster   #814   +/-\n=====================================\n  Coverage     100%   100%         \n=====================================\n  Files          11     12    +1   \n  Lines         597    607   +10   \n=====================================\n+ Hits          597    607   +10\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| common.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| hooks.js | 100% <100%> (\u00f8) | |\n| platform.js | 100% <100%> (\u00f8) | :arrow_up: |\n| index.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a02ccc0...9dcc68c. Read the comment docs.\n. # Codecov Report\nMerging #817 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster   #817   +/-\n=====================================\n  Coverage     100%   100%         \n=====================================\n  Files          11     11         \n  Lines         597    597         \n=====================================\n  Hits          597    597\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a02ccc0...f9abe04. Read the comment docs.\n. # Codecov Report\nMerging #819 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster   #819   +/-\n=====================================\n  Coverage     100%   100%         \n=====================================\n  Files          12     12         \n  Lines         607    623   +16   \n=====================================\n+ Hits          607    623   +16\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ignore.js | 100% <100%> (\u00f8) | :arrow_up: |\n| platform.js | 100% <100%> (\u00f8) | :arrow_up: |\n| prune.js | 100% <100%> (\u00f8) | :arrow_up: |\n| common.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6a23f79...dff1fb2. Read the comment docs.\n. # Codecov Report\nMerging #823 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster   #823   +/-\n=====================================\n  Coverage     100%   100%         \n=====================================\n  Files          12     12         \n  Lines         622    643   +21   \n=====================================\n+ Hits          622    643   +21\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ignore.js | 100% <100%> (\u00f8) | :arrow_up: |\n| platform.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a5e0f62...2183e42. Read the comment docs.\n. # Codecov Report\nMerging #832 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster   #832   +/-\n=====================================\n  Coverage     100%   100%         \n=====================================\n  Files          12     12         \n  Lines         621    621         \n=====================================\n  Hits          621    621\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2155cab...a9b1675. Read the comment docs.\n. # Codecov Report\nMerging #835 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster   #835   +/-\n=====================================\n  Coverage     100%   100%         \n=====================================\n  Files          12     12         \n  Lines         621    621         \n=====================================\n  Hits          621    621\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2155cab...155631e. Read the comment docs.\n. # Codecov Report\nMerging #837 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster   #837   +/-\n=====================================\n  Coverage     100%   100%         \n=====================================\n  Files          12     12         \n  Lines         621    622    +1   \n=====================================\n+ Hits          621    622    +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| index.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 28d9dde...c8a2644. Read the comment docs.\n. # Codecov Report\nMerging #841 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster   #841   +/-\n=====================================\n  Coverage     100%   100%         \n=====================================\n  Files          12     12         \n  Lines         622    621    -1   \n=====================================\n- Hits          622    621    -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| index.js | 100% <100%> (\u00f8) | :arrow_up: |\n| common.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b7b06d9...3ba8d69. Read the comment docs.\n. # Codecov Report\nMerging #843 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster   #843   +/-\n=====================================\n  Coverage     100%   100%         \n=====================================\n  Files          12     12         \n  Lines         621    621         \n=====================================\n  Hits          621    621\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| targets.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a7af94d...3010573. Read the comment docs.\n. # Codecov Report\nMerging #847 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster   #847   +/-\n=====================================\n  Coverage     100%   100%         \n=====================================\n  Files          12     12         \n  Lines         621    622    +1   \n=====================================\n+ Hits          621    622    +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| prune.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b3c610c...69ad04b. Read the comment docs.\n. # Codecov Report\nMerging #889 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster   #889   +/-\n=====================================\n  Coverage     100%   100%         \n=====================================\n  Files          12     12         \n  Lines         616    617    +1   \n=====================================\n+ Hits          616    617    +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| prune.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a49c08d...9506805. Read the comment docs.\n. # Codecov Report\nMerging #893 into master will decrease coverage by 0.13%.\nThe diff coverage is 66.66%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #893      +/-\n==========================================\n- Coverage   94.48%   94.35%   -0.14%   \n==========================================\n  Files          12       12            \n  Lines         617      620       +3   \n==========================================\n+ Hits          583      585       +2   \n- Misses         34       35       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| mac.js | 75.53% <66.66%> (-0.2%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 76ca0e9...a837d84. Read the comment docs.\n. # Codecov Report\nMerging #894 into master will increase coverage by 5.51%.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff            @@\nmaster   #894      +/-\n========================================\n+ Coverage   94.48%   100%   +5.51%   \n========================================\n  Files          12     12            \n  Lines         617    619       +2   \n========================================\n+ Hits          583    619      +36   \n+ Misses         34      0      -34\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| mac.js | 100% <100%> (+24.26%) | :arrow_up: |\n| ignore.js | 100% <0%> (+2.32%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 76ca0e9...7f04d47. Read the comment docs.\n. # Codecov Report\nMerging #896 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster   #896   +/-\n=====================================\n  Coverage     100%   100%         \n=====================================\n  Files          12     12         \n  Lines         622    622         \n=====================================\n  Hits          622    622\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e3f18ec...3e9bfea. Read the comment docs.\n. # Codecov Report\nMerging #899 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster   #899   +/-\n=====================================\n  Coverage     100%   100%         \n=====================================\n  Files          12     12         \n  Lines         641    671   +30   \n=====================================\n+ Hits          641    671   +30\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| common.js | 100% <100%> (\u00f8) | :arrow_up: |\n| mac.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3366253...229c69f. Read the comment docs.\n. # Codecov Report\nMerging #900 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster   #900   +/-\n=====================================\n  Coverage     100%   100%         \n=====================================\n  Files          12     12         \n  Lines         643    641    -2   \n=====================================\n- Hits          643    641    -2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| mac.js | 100% <100%> (\u00f8) | :arrow_up: |\n| ignore.js | 100% <100%> (\u00f8) | :arrow_up: |\n| infer.js | 100% <100%> (\u00f8) | :arrow_up: |\n| platform.js | 100% <100%> (\u00f8) | :arrow_up: |\n| win32.js | 100% <100%> (\u00f8) | :arrow_up: |\n| common.js | 100% <100%> (\u00f8) | :arrow_up: |\n| targets.js | 100% <100%> (\u00f8) | :arrow_up: |\n| prune.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b487df2...8ea94db. Read the comment docs.\n. # Codecov Report\nMerging #915 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster   #915   +/-\n=====================================\n  Coverage     100%   100%         \n=====================================\n  Files          12     12         \n  Lines         671    671         \n=====================================\n  Hits          671    671\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| targets.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 41bf218...d61bb11. Read the comment docs.\n. # Codecov Report\nMerging #916 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster   #916   +/-\n=====================================\n  Coverage     100%   100%         \n=====================================\n  Files          12     12         \n  Lines         671    668    -3   \n=====================================\n- Hits          671    668    -3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| index.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 41bf218...6b7579b. Read the comment docs.\n. # Codecov Report\nMerging #916 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster   #916   +/-\n=====================================\n  Coverage     100%   100%         \n=====================================\n  Files          12     12         \n  Lines         671    668    -3   \n=====================================\n- Hits          671    668    -3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| index.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 41bf218...6b7579b. Read the comment docs.\n. # Codecov Report\nMerging #917 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster   #917   +/-\n=====================================\n  Coverage     100%   100%         \n=====================================\n  Files          12     12         \n  Lines         668    668         \n=====================================\n  Hits          668    668\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a533d5f...ddf9574. Read the comment docs.\n. # Codecov Report\nMerging #919 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster   #919   +/-\n=====================================\n  Coverage     100%   100%         \n=====================================\n  Files          12     12         \n  Lines         668    669    +1   \n=====================================\n+ Hits          668    669    +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ignore.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5e8526a...06ea093. Read the comment docs.\n. # Codecov Report\nMerging #930 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster   #930   +/-\n=====================================\n  Coverage     100%   100%         \n=====================================\n  Files          12     12         \n  Lines         669    669         \n=====================================\n  Hits          669    669\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a576ed1...b8d279d. Read the comment docs.\n. # Codecov Report\nMerging #931 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster   #931   +/-\n=====================================\n  Coverage     100%   100%         \n=====================================\n  Files          12     12         \n  Lines         669    669         \n=====================================\n  Hits          669    669\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| infer.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0382494...61ec156. Read the comment docs.\n. # Codecov Report\nMerging #932 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster   #932   +/-\n=====================================\n  Coverage     100%   100%         \n=====================================\n  Files          12     12         \n  Lines         669    672    +3   \n=====================================\n+ Hits          669    672    +3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| infer.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e686383...6fafbc6. Read the comment docs.\n. # Codecov Report\nMerging #952 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster   #952   +/-\n=====================================\n  Coverage     100%   100%         \n=====================================\n  Files          12     12         \n  Lines         672    671    -1   \n=====================================\n- Hits          672    671    -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| platform.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f304569...30c2160. Read the comment docs.\n. # Codecov Report\nMerging #957 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster   #957   +/-\n=====================================\n  Coverage     100%   100%         \n=====================================\n  Files          12     12         \n  Lines         671    671         \n=====================================\n  Hits          671    671\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| targets.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fd237af...0b28ef6. Read the comment docs.\n. # Codecov Report\nMerging #958 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster   #958   +/-\n=====================================\n  Coverage     100%   100%         \n=====================================\n  Files          12     12         \n  Lines         671    671         \n=====================================\n  Hits          671    671\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| common.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 841812c...144b2c2. Read the comment docs.\n. \n",
    "nh2": "Thanks!. ",
    "RockGuitarist1": "Was this node-rcedit fix included in the 11.0.1 update? I still seem to be getting this issue. I saw this, but didn't know if it was included:\nrcedit module updated to 1.0.0, which fixes some bugs (#804). This has been fixed in their update. Those who are having this issue, make sure you are trying to set an .ico and using this format: electron-packager . Electron-App --icon=src/assets/images/icon.ico.. ",
    "TobiasSN": "I think you misunderstood me there. I am well aware of how to make pacman packages. What I wanted to know is how to link up a module to electron-packager, as I want to contribute the code to this repo, for the purpose of making it easier for me and other people to just add something like \"pacman\" to their config file (If they use Electron Forge), instead of hassling with some new stuff that they never used before.. Ah. Thanks!. ",
    "navdeepio": "@malept https://github.com/navdeepio/electron-quick-start\nTry packaging the app in electron-app folder and running it. electron-packager electron-app/ from electron-quick-start/ folder\n\nTwo package.json files are there for testing, but feel free to remove the one inside electron-app/. @malept tried that too, still not working. Please open it after verifying. ok, that's the point - instascan is installed and available in the parent directory(electron-quick-start). So to not have two yarn.lock files(one in parent dir and one in electron-app/) I've removed electron-app/node_modules, which I request you to remove yourself. @malept  I agree. But out of curiosity, shouldn't electron-packager be able to resolve the module from node_modules that's one dir up? Especially since module.path contains electron-quick-start/node_modules or ../node_modules? . \n",
    "mase5": "That was it :) . ",
    "kurisukun": "Already tested and it does not change anything, I get the same issue.\n. I'm not sure what you're telling me to do:\n-using electron-packager with electron-quick-strart and see if I encounter the issue I got?\n-using electron-quick-start as a base and rewrite my code with it?\nThe first option seems not that necessary, in fact, as I said, I tested it on an other programm I got and I didn't get any problem with it.\nBtw thanks for helping. Ok so I downloaded electron-quick-start and packaged it with electron-packager. Everything is ok as expected. The file .exe executes correctly and opens the browser. I tested it with the command window. \nWhat can I do now?. ",
    "benlancaster": "Yeah that's great, thank you. . This is great \ud83d\udc4d . What's the right way to do this without the spread operator?. In fact it looks like Node 4 will be EOL at the end of April, so I guess this could stay in if this gets accepted and released after that. ",
    "fcastilloec": "electron-winstaller is only partially maintained, they only update Squirrel once in a while. There are no test suites, they are not using the latest version of Nuget and it doesn't work on Linux/OSX systems using mono/wine.\nAlso, in a project I was contributing, electron-winstaller installers were creating errors on installation (see https://github.com/headsetapp/headset-electron/issues/129) which I could replicate with other projects.\nOn the other hand, electron-installer-windows has tests, works in all OSs without any problems (signing the installer is only supported on Windows), it has a CLI, and it has a familiar form, similar to the already used electron-installer-debian, electron-installer-redhat, etc.\nI think it's better to provide users more alternatives, especially if the new alternative works better and in all OSs.\nI understand if there's a motivation to only keep one option, or to advertise a specific module, feel free to close this PR.. electron-winstaller doesn't work for me and a lot of other people according to the issues' page. This is especially true if using Linux or OSX, even all testing for Travis-CI has been removed.\nI completely understand why not trusting a project that includes compiled binaries, you might not know where they come from. I'm familiar with electron-installer-windows so I'm probably going to push a PR there that downloads the .zip directly from Github releases when installing with npm. That way users are always sure where things come from. You should consider doing the same for electron-winstaller.\nI love contributing to projects, but sometimes I need things to \"just work\". I had so much trouble with electorn-winstaller, I actually did try to debug the problem but wasn't getting anywhere as you can see on the link I previously posted. It was taking too much of my time so I switched to electron-installer-windows. I would love to try to fix the issues but it will require a lot of time that currently, I don't have. Perhaps in the future.\nI think I'll rest my case and like I mentioned originally, feel free to close this PR if you think it's better that way. I really don't mind.. ",
    "moroine": ":+1: \nI've spent 2 days trying to make electron-winstaller working on Linux. Creating the installer was ok, but I got an error on install without any log...\nI've been relieved when I end up looking at the issues / PRs and finding this one. I tried electron-installer-windows and works perfectly!\nI think it would be nice to add electron-installer-windows as an alternative.. ",
    "jon-ryan": "sorry, but that didn't work. There is no entry in dependencies being generated, as it was the case in devDependencies. Even if I add the line \"electron-store\": \"^1.3.0\" manually to the section \"dependencies\" it doesn't work.\n. didn't work\n. I fixed it. Had some issues with my directory. I put the index.js and the index.html in the root directory.\nAlso I copied the dependencies listed in \"DevDependencies\" myself into \"Dependencies\" which weren't added yet.. ",
    "peterw": "What was the issues specifically if you don't mind me asking?\nI'm having the same issues as you were @jon-ryan.. ",
    "revington": "new versions of npm save by default. Anyway, I did it as you told, double checked my package.json, run electron-packager again  and faced the same problem. Here is my package.json\n{\n  \"name\": \"electron-quick-start\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A minimal Electron application\",\n  \"main\": \"main.js\",\n  \"scripts\": {\n    \"start\": \"electron .\"\n  },\n  \"repository\": \"https://github.com/electron/electron-quick-start\",\n  \"keywords\": [\n    \"Electron\",\n    \"quick\",\n    \"start\",\n    \"tutorial\",\n    \"demo\"\n  ],\n  \"author\": \"GitHub\",\n  \"license\": \"CC0-1.0\",\n  \"devDependencies\": {\n    \"electron\": \"^1.8.4\",\n    \"electron-packager\": \"^12.0.0\"\n  },\n  \"dependencies\": {\n    \"mysql\": \"^2.15.0\"\n  }\n}. Yep\n2018-04-07T14:37:19.315Z electron-packager Electron Packager 12.0.0\n2018-04-07T14:37:19.316Z electron-packager Node v9.11.1\n2018-04-07T14:37:19.316Z electron-packager Host Operating system: linux (x64)\n2018-04-07T14:37:19.316Z electron-packager Packager Options: {\"_\":[\".\"],\"all\":false,\"deref-symlinks\":true,\"derefSymlinks\":true,\"download\":{\"strictSSL\":true},\"overwrite\":true,\"prune\":true,\"quiet\":false,\"dir\":\".\",\"protocols\":[]}\n2018-04-07T14:37:19.316Z electron-packager Target Platforms: linux\n2018-04-07T14:37:19.316Z electron-packager Target Architectures: x64\n2018-04-07T14:37:19.338Z electron-packager Inferring application name from name in /tmp/electron-quick-start/package.json\n2018-04-07T14:37:19.338Z electron-packager Inferring appVersion from version in /tmp/electron-quick-start/package.json\n2018-04-07T14:37:19.341Z electron-packager Inferring target Electron version from electron in /tmp/electron-quick-start/package.json\n2018-04-07T14:37:19.341Z electron-packager Application name: electron-quick-start\n2018-04-07T14:37:19.341Z electron-packager Target Electron version: 1.8.4\n2018-04-07T14:37:19.341Z electron-packager Ignored path regular expressions: [ '/\\\\.git($|/)',\n  '/node_modules/\\\\.bin($|/)',\n  '\\\\.o(bj)?$',\n  '/tmp/electron-packager' ]\n2018-04-07T14:37:19.345Z electron-packager Downloading Electron with options {\"strictSSL\":true,\"platform\":\"linux\",\"arch\":\"x64\",\"version\":\"1.8.4\"}\n2018-04-07T14:37:19.570Z electron-packager Removing /tmp/electron-quick-start/electron-quick-start-linux-x64 due to setting overwrite: true\nPackaging app for platform linux x64 using electron v1.8.4\n2018-04-07T14:37:19.580Z electron-packager Creating /tmp/electron-packager/linux-x64-template\n2018-04-07T14:37:19.581Z electron-packager Extracting /home/pedro/.electron/electron-v1.8.4-linux-x64.zip to /tmp/electron-packager/linux-x64-template\n2018-04-07T14:37:21.625Z electron-packager Initializing app in /tmp/electron-packager/linux-x64/electron-quick-start-linux-x64 from /tmp/electron-packager/linux-x64-template template\n2018-04-07T14:37:21.626Z electron-packager Ignored paths based on the out param: [ '/tmp/electron-quick-start/electron-quick-start-darwin-x64',\n  '/tmp/electron-quick-start/electron-quick-start-linux-ia32',\n  '/tmp/electron-quick-start/electron-quick-start-linux-x64',\n  '/tmp/electron-quick-start/electron-quick-start-linux-armv7l',\n  '/tmp/electron-quick-start/electron-quick-start-linux-arm64',\n  '/tmp/electron-quick-start/electron-quick-start-linux-mips64el',\n  '/tmp/electron-quick-start/electron-quick-start-mas-x64',\n  '/tmp/electron-quick-start/electron-quick-start-win32-ia32',\n  '/tmp/electron-quick-start/electron-quick-start-win32-x64' ]\n2018-04-07T14:37:21.627Z flora-colossus creating walker with rootModule=.\n2018-04-07T14:37:21.632Z flora-colossus starting tree walk\n2018-04-07T14:37:21.633Z flora-colossus walk reached: .  Type is: ROOT\n2018-04-07T14:37:21.634Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/mysql  Type is: PROD\n2018-04-07T14:37:21.635Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/bignumber.js  Type is: PROD\n2018-04-07T14:37:21.635Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/mysql/node_modules/readable-stream  Type is: PROD\n2018-04-07T14:37:21.636Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/core-util-is  Type is: PROD\n2018-04-07T14:37:21.636Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/inherits  Type is: PROD\n2018-04-07T14:37:21.637Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/mysql/node_modules/isarray  Type is: PROD\n2018-04-07T14:37:21.637Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/mysql/node_modules/process-nextick-args  Type is: PROD\n2018-04-07T14:37:21.637Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/safe-buffer  Type is: PROD\n2018-04-07T14:37:21.638Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/mysql/node_modules/string_decoder  Type is: PROD\n2018-04-07T14:37:21.638Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/safe-buffer  Type is: PROD\n2018-04-07T14:37:21.638Z flora-colossus already walked this route\n2018-04-07T14:37:21.638Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/util-deprecate  Type is: PROD\n2018-04-07T14:37:21.639Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/safe-buffer  Type is: PROD\n2018-04-07T14:37:21.639Z flora-colossus already walked this route\n2018-04-07T14:37:21.639Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/sqlstring  Type is: PROD\n2018-04-07T14:37:21.639Z flora-colossus we're still at the beginning, walking down the dev route\n2018-04-07T14:37:21.639Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/electron  Type is: DEV\n2018-04-07T14:37:21.640Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/@types/node  Type is: DEV\n2018-04-07T14:37:21.640Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/electron-download  Type is: DEV\n2018-04-07T14:37:21.640Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/debug  Type is: DEV\n2018-04-07T14:37:21.641Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/ms  Type is: DEV\n2018-04-07T14:37:21.641Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/fs-extra  Type is: DEV\n2018-04-07T14:37:21.641Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/graceful-fs  Type is: DEV\n2018-04-07T14:37:21.642Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/jsonfile  Type is: DEV\n2018-04-07T14:37:21.642Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/graceful-fs  Type is: DEV\n2018-04-07T14:37:21.642Z flora-colossus already walked this route\n2018-04-07T14:37:21.642Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/graceful-fs  Type is: DEV\n2018-04-07T14:37:21.642Z flora-colossus already walked this route\n2018-04-07T14:37:21.642Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/klaw  Type is: DEV\n2018-04-07T14:37:21.642Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/graceful-fs  Type is: DEV\n2018-04-07T14:37:21.642Z flora-colossus already walked this route\n2018-04-07T14:37:21.643Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/graceful-fs  Type is: DEV\n2018-04-07T14:37:21.643Z flora-colossus already walked this route\n2018-04-07T14:37:21.643Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/path-is-absolute  Type is: DEV\n2018-04-07T14:37:21.643Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/rimraf  Type is: DEV\n2018-04-07T14:37:21.643Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/glob  Type is: DEV\n2018-04-07T14:37:21.644Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/fs.realpath  Type is: DEV\n2018-04-07T14:37:21.644Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/inflight  Type is: DEV\n2018-04-07T14:37:21.644Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/once  Type is: DEV\n2018-04-07T14:37:21.644Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/wrappy  Type is: DEV\n2018-04-07T14:37:21.645Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/wrappy  Type is: DEV\n2018-04-07T14:37:21.645Z flora-colossus already walked this route\n2018-04-07T14:37:21.645Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/inherits  Type is: DEV\n2018-04-07T14:37:21.645Z flora-colossus already walked this route\n2018-04-07T14:37:21.645Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/minimatch  Type is: DEV\n2018-04-07T14:37:21.645Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/brace-expansion  Type is: DEV\n2018-04-07T14:37:21.646Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/balanced-match  Type is: DEV\n2018-04-07T14:37:21.646Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/concat-map  Type is: DEV\n2018-04-07T14:37:21.646Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/once  Type is: DEV\n2018-04-07T14:37:21.646Z flora-colossus already walked this route\n2018-04-07T14:37:21.646Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/path-is-absolute  Type is: DEV\n2018-04-07T14:37:21.646Z flora-colossus already walked this route\n2018-04-07T14:37:21.646Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/home-path  Type is: DEV\n2018-04-07T14:37:21.647Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/minimist  Type is: DEV\n2018-04-07T14:37:21.647Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/nugget  Type is: DEV\n2018-04-07T14:37:21.647Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/debug  Type is: DEV\n2018-04-07T14:37:21.647Z flora-colossus already walked this route\n2018-04-07T14:37:21.648Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/minimist  Type is: DEV\n2018-04-07T14:37:21.648Z flora-colossus already walked this route\n2018-04-07T14:37:21.648Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/pretty-bytes  Type is: DEV\n2018-04-07T14:37:21.648Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/get-stdin  Type is: DEV\n2018-04-07T14:37:21.648Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/meow  Type is: DEV\n2018-04-07T14:37:21.649Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/camelcase-keys  Type is: DEV\n2018-04-07T14:37:21.649Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/camelcase  Type is: DEV\n2018-04-07T14:37:21.649Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/map-obj  Type is: DEV\n2018-04-07T14:37:21.650Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/decamelize  Type is: DEV\n2018-04-07T14:37:21.650Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/loud-rejection  Type is: DEV\n2018-04-07T14:37:21.650Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/currently-unhandled  Type is: DEV\n2018-04-07T14:37:21.650Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/array-find-index  Type is: DEV\n2018-04-07T14:37:21.651Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/signal-exit  Type is: DEV\n2018-04-07T14:37:21.651Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/map-obj  Type is: DEV\n2018-04-07T14:37:21.651Z flora-colossus already walked this route\n2018-04-07T14:37:21.651Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/minimist  Type is: DEV\n2018-04-07T14:37:21.651Z flora-colossus already walked this route\n2018-04-07T14:37:21.651Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/normalize-package-data  Type is: DEV\n2018-04-07T14:37:21.652Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/hosted-git-info  Type is: DEV\n2018-04-07T14:37:21.652Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/is-builtin-module  Type is: DEV\n2018-04-07T14:37:21.652Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/builtin-modules  Type is: DEV\n2018-04-07T14:37:21.653Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/semver  Type is: DEV\n2018-04-07T14:37:21.653Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/validate-npm-package-license  Type is: DEV\n2018-04-07T14:37:21.653Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/spdx-correct  Type is: DEV\n2018-04-07T14:37:21.653Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/spdx-expression-parse  Type is: DEV\n2018-04-07T14:37:21.654Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/spdx-exceptions  Type is: DEV\n2018-04-07T14:37:21.654Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/spdx-license-ids  Type is: DEV\n2018-04-07T14:37:21.656Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/spdx-license-ids  Type is: DEV\n2018-04-07T14:37:21.656Z flora-colossus already walked this route\n2018-04-07T14:37:21.656Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/spdx-expression-parse  Type is: DEV\n2018-04-07T14:37:21.656Z flora-colossus already walked this route\n2018-04-07T14:37:21.656Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/object-assign  Type is: DEV\n2018-04-07T14:37:21.657Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/read-pkg-up  Type is: DEV\n2018-04-07T14:37:21.657Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/find-up  Type is: DEV\n2018-04-07T14:37:21.657Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/path-exists  Type is: DEV\n2018-04-07T14:37:21.657Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/pinkie-promise  Type is: DEV\n2018-04-07T14:37:21.658Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/pinkie  Type is: DEV\n2018-04-07T14:37:21.658Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/pinkie-promise  Type is: DEV\n2018-04-07T14:37:21.658Z flora-colossus already walked this route\n2018-04-07T14:37:21.658Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/read-pkg  Type is: DEV\n2018-04-07T14:37:21.658Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/load-json-file  Type is: DEV\n2018-04-07T14:37:21.659Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/graceful-fs  Type is: DEV\n2018-04-07T14:37:21.659Z flora-colossus already walked this route\n2018-04-07T14:37:21.659Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/parse-json  Type is: DEV\n2018-04-07T14:37:21.659Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/error-ex  Type is: DEV\n2018-04-07T14:37:21.659Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/is-arrayish  Type is: DEV\n2018-04-07T14:37:21.660Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/pify  Type is: DEV\n2018-04-07T14:37:21.660Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/pinkie-promise  Type is: DEV\n2018-04-07T14:37:21.660Z flora-colossus already walked this route\n2018-04-07T14:37:21.660Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/strip-bom  Type is: DEV\n2018-04-07T14:37:21.660Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/is-utf8  Type is: DEV\n2018-04-07T14:37:21.661Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/normalize-package-data  Type is: DEV\n2018-04-07T14:37:21.661Z flora-colossus already walked this route\n2018-04-07T14:37:21.661Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/path-type  Type is: DEV\n2018-04-07T14:37:21.661Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/graceful-fs  Type is: DEV\n2018-04-07T14:37:21.661Z flora-colossus already walked this route\n2018-04-07T14:37:21.661Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/pify  Type is: DEV\n2018-04-07T14:37:21.661Z flora-colossus already walked this route\n2018-04-07T14:37:21.661Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/pinkie-promise  Type is: DEV\n2018-04-07T14:37:21.661Z flora-colossus already walked this route\n2018-04-07T14:37:21.662Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/redent  Type is: DEV\n2018-04-07T14:37:21.662Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/indent-string  Type is: DEV\n2018-04-07T14:37:21.662Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/repeating  Type is: DEV\n2018-04-07T14:37:21.662Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/is-finite  Type is: DEV\n2018-04-07T14:37:21.663Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/number-is-nan  Type is: DEV\n2018-04-07T14:37:21.663Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/strip-indent  Type is: DEV\n2018-04-07T14:37:21.663Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/get-stdin  Type is: DEV\n2018-04-07T14:37:21.663Z flora-colossus already walked this route\n2018-04-07T14:37:21.663Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/trim-newlines  Type is: DEV\n2018-04-07T14:37:21.664Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/progress-stream  Type is: DEV\n2018-04-07T14:37:21.664Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/speedometer  Type is: DEV\n2018-04-07T14:37:21.664Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/through2  Type is: DEV\n2018-04-07T14:37:21.664Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/readable-stream  Type is: DEV\n2018-04-07T14:37:21.665Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/core-util-is  Type is: DEV\n2018-04-07T14:37:21.665Z flora-colossus already walked this route\n2018-04-07T14:37:21.665Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/inherits  Type is: DEV\n2018-04-07T14:37:21.665Z flora-colossus already walked this route\n2018-04-07T14:37:21.665Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/isarray  Type is: DEV\n2018-04-07T14:37:21.665Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/string_decoder  Type is: DEV\n2018-04-07T14:37:21.665Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/xtend  Type is: DEV\n2018-04-07T14:37:21.666Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/object-keys  Type is: DEV\n2018-04-07T14:37:21.666Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/request  Type is: DEV\n2018-04-07T14:37:21.666Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/aws-sign2  Type is: DEV\n2018-04-07T14:37:21.667Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/aws4  Type is: DEV\n2018-04-07T14:37:21.667Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/caseless  Type is: DEV\n2018-04-07T14:37:21.667Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/combined-stream  Type is: DEV\n2018-04-07T14:37:21.668Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/delayed-stream  Type is: DEV\n2018-04-07T14:37:21.668Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/extend  Type is: DEV\n2018-04-07T14:37:21.668Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/forever-agent  Type is: DEV\n2018-04-07T14:37:21.668Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/form-data  Type is: DEV\n2018-04-07T14:37:21.669Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/asynckit  Type is: DEV\n2018-04-07T14:37:21.670Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/combined-stream  Type is: DEV\n2018-04-07T14:37:21.670Z flora-colossus already walked this route\n2018-04-07T14:37:21.670Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/mime-types  Type is: DEV\n2018-04-07T14:37:21.670Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/mime-db  Type is: DEV\n2018-04-07T14:37:21.670Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/har-validator  Type is: DEV\n2018-04-07T14:37:21.671Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/ajv  Type is: DEV\n2018-04-07T14:37:21.671Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/co  Type is: DEV\n2018-04-07T14:37:21.671Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/fast-deep-equal  Type is: DEV\n2018-04-07T14:37:21.672Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/fast-json-stable-stringify  Type is: DEV\n2018-04-07T14:37:21.672Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/json-schema-traverse  Type is: DEV\n2018-04-07T14:37:21.672Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/har-schema  Type is: DEV\n2018-04-07T14:37:21.673Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/hawk  Type is: DEV\n2018-04-07T14:37:21.673Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/boom  Type is: DEV\n2018-04-07T14:37:21.674Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/hoek  Type is: DEV\n2018-04-07T14:37:21.674Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/cryptiles  Type is: DEV\n2018-04-07T14:37:21.674Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/cryptiles/node_modules/boom  Type is: DEV\n2018-04-07T14:37:21.674Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/hoek  Type is: DEV\n2018-04-07T14:37:21.674Z flora-colossus already walked this route\n2018-04-07T14:37:21.675Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/hoek  Type is: DEV\n2018-04-07T14:37:21.675Z flora-colossus already walked this route\n2018-04-07T14:37:21.675Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/sntp  Type is: DEV\n2018-04-07T14:37:21.675Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/hoek  Type is: DEV\n2018-04-07T14:37:21.675Z flora-colossus already walked this route\n2018-04-07T14:37:21.675Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/http-signature  Type is: DEV\n2018-04-07T14:37:21.675Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/assert-plus  Type is: DEV\n2018-04-07T14:37:21.676Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/jsprim  Type is: DEV\n2018-04-07T14:37:21.676Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/assert-plus  Type is: DEV\n2018-04-07T14:37:21.676Z flora-colossus already walked this route\n2018-04-07T14:37:21.676Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/extsprintf  Type is: DEV\n2018-04-07T14:37:21.677Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/json-schema  Type is: DEV\n2018-04-07T14:37:21.677Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/verror  Type is: DEV\n2018-04-07T14:37:21.677Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/assert-plus  Type is: DEV\n2018-04-07T14:37:21.677Z flora-colossus already walked this route\n2018-04-07T14:37:21.677Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/core-util-is  Type is: DEV\n2018-04-07T14:37:21.677Z flora-colossus already walked this route\n2018-04-07T14:37:21.677Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/extsprintf  Type is: DEV\n2018-04-07T14:37:21.677Z flora-colossus already walked this route\n2018-04-07T14:37:21.678Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/sshpk  Type is: DEV\n2018-04-07T14:37:21.678Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/asn1  Type is: DEV\n2018-04-07T14:37:21.678Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/assert-plus  Type is: DEV\n2018-04-07T14:37:21.678Z flora-colossus already walked this route\n2018-04-07T14:37:21.678Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/bcrypt-pbkdf  Type is: DEV\n2018-04-07T14:37:21.679Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/tweetnacl  Type is: DEV\n2018-04-07T14:37:21.679Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/dashdash  Type is: DEV\n2018-04-07T14:37:21.679Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/assert-plus  Type is: DEV\n2018-04-07T14:37:21.679Z flora-colossus already walked this route\n2018-04-07T14:37:21.679Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/ecc-jsbn  Type is: DEV\n2018-04-07T14:37:21.680Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/jsbn  Type is: DEV\n2018-04-07T14:37:21.680Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/getpass  Type is: DEV\n2018-04-07T14:37:21.680Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/assert-plus  Type is: DEV\n2018-04-07T14:37:21.680Z flora-colossus already walked this route\n2018-04-07T14:37:21.681Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/jsbn  Type is: DEV\n2018-04-07T14:37:21.681Z flora-colossus already walked this route\n2018-04-07T14:37:21.681Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/tweetnacl  Type is: DEV\n2018-04-07T14:37:21.681Z flora-colossus already walked this route\n2018-04-07T14:37:21.681Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/bcrypt-pbkdf  Type is: DEV\n2018-04-07T14:37:21.681Z flora-colossus already walked this route\n2018-04-07T14:37:21.681Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/ecc-jsbn  Type is: DEV\n2018-04-07T14:37:21.681Z flora-colossus already walked this route\n2018-04-07T14:37:21.681Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/jsbn  Type is: DEV\n2018-04-07T14:37:21.681Z flora-colossus already walked this route\n2018-04-07T14:37:21.681Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/tweetnacl  Type is: DEV\n2018-04-07T14:37:21.681Z flora-colossus already walked this route\n2018-04-07T14:37:21.681Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/is-typedarray  Type is: DEV\n2018-04-07T14:37:21.682Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/isstream  Type is: DEV\n2018-04-07T14:37:21.682Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/json-stringify-safe  Type is: DEV\n2018-04-07T14:37:21.682Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/mime-types  Type is: DEV\n2018-04-07T14:37:21.682Z flora-colossus already walked this route\n2018-04-07T14:37:21.682Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/oauth-sign  Type is: DEV\n2018-04-07T14:37:21.683Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/performance-now  Type is: DEV\n2018-04-07T14:37:21.683Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/qs  Type is: DEV\n2018-04-07T14:37:21.683Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/safe-buffer  Type is: DEV\n2018-04-07T14:37:21.683Z flora-colossus already walked this route\n2018-04-07T14:37:21.684Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/stringstream  Type is: DEV\n2018-04-07T14:37:21.684Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/tough-cookie  Type is: DEV\n2018-04-07T14:37:21.684Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/punycode  Type is: DEV\n2018-04-07T14:37:21.685Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/tunnel-agent  Type is: DEV\n2018-04-07T14:37:21.685Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/safe-buffer  Type is: DEV\n2018-04-07T14:37:21.685Z flora-colossus already walked this route\n2018-04-07T14:37:21.685Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/uuid  Type is: DEV\n2018-04-07T14:37:21.685Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/single-line-log  Type is: DEV\n2018-04-07T14:37:21.686Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/string-width  Type is: DEV\n2018-04-07T14:37:21.686Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/code-point-at  Type is: DEV\n2018-04-07T14:37:21.686Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/is-fullwidth-code-point  Type is: DEV\n2018-04-07T14:37:21.686Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/number-is-nan  Type is: DEV\n2018-04-07T14:37:21.687Z flora-colossus already walked this route\n2018-04-07T14:37:21.687Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/strip-ansi  Type is: DEV\n2018-04-07T14:37:21.687Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/ansi-regex  Type is: DEV\n2018-04-07T14:37:21.687Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/throttleit  Type is: DEV\n2018-04-07T14:37:21.688Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/path-exists  Type is: DEV\n2018-04-07T14:37:21.688Z flora-colossus already walked this route\n2018-04-07T14:37:21.688Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/rc  Type is: DEV\n2018-04-07T14:37:21.688Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/deep-extend  Type is: DEV\n2018-04-07T14:37:21.688Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/ini  Type is: DEV\n2018-04-07T14:37:21.689Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/minimist  Type is: DEV\n2018-04-07T14:37:21.689Z flora-colossus already walked this route\n2018-04-07T14:37:21.689Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/strip-json-comments  Type is: DEV\n2018-04-07T14:37:21.689Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/semver  Type is: DEV\n2018-04-07T14:37:21.689Z flora-colossus already walked this route\n2018-04-07T14:37:21.689Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/sumchecker  Type is: DEV\n2018-04-07T14:37:21.690Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/debug  Type is: DEV\n2018-04-07T14:37:21.690Z flora-colossus already walked this route\n2018-04-07T14:37:21.690Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/es6-promise  Type is: DEV\n2018-04-07T14:37:21.690Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/extract-zip  Type is: DEV\n2018-04-07T14:37:21.690Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/concat-stream  Type is: DEV\n2018-04-07T14:37:21.691Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/inherits  Type is: DEV\n2018-04-07T14:37:21.691Z flora-colossus already walked this route\n2018-04-07T14:37:21.691Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/concat-stream/node_modules/readable-stream  Type is: DEV\n2018-04-07T14:37:21.691Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/core-util-is  Type is: DEV\n2018-04-07T14:37:21.691Z flora-colossus already walked this route\n2018-04-07T14:37:21.691Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/inherits  Type is: DEV\n2018-04-07T14:37:21.691Z flora-colossus already walked this route\n2018-04-07T14:37:21.692Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/concat-stream/node_modules/isarray  Type is: DEV\n2018-04-07T14:37:21.692Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/process-nextick-args  Type is: DEV\n2018-04-07T14:37:21.692Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/safe-buffer  Type is: DEV\n2018-04-07T14:37:21.692Z flora-colossus already walked this route\n2018-04-07T14:37:21.692Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/concat-stream/node_modules/string_decoder  Type is: DEV\n2018-04-07T14:37:21.693Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/safe-buffer  Type is: DEV\n2018-04-07T14:37:21.693Z flora-colossus already walked this route\n2018-04-07T14:37:21.693Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/util-deprecate  Type is: DEV\n2018-04-07T14:37:21.693Z flora-colossus already walked this route\n2018-04-07T14:37:21.693Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/typedarray  Type is: DEV\n2018-04-07T14:37:21.694Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/debug  Type is: DEV\n2018-04-07T14:37:21.694Z flora-colossus already walked this route\n2018-04-07T14:37:21.694Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/mkdirp  Type is: DEV\n2018-04-07T14:37:21.694Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/mkdirp/node_modules/minimist  Type is: DEV\n2018-04-07T14:37:21.694Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/yauzl  Type is: DEV\n2018-04-07T14:37:21.694Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/fd-slicer  Type is: DEV\n2018-04-07T14:37:21.695Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/pend  Type is: DEV\n2018-04-07T14:37:21.695Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/electron-packager  Type is: DEV\n2018-04-07T14:37:21.695Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/asar  Type is: DEV\n2018-04-07T14:37:21.696Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/chromium-pickle-js  Type is: DEV\n2018-04-07T14:37:21.696Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/commander  Type is: DEV\n2018-04-07T14:37:21.696Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/cuint  Type is: DEV\n2018-04-07T14:37:21.696Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/asar/node_modules/glob  Type is: DEV\n2018-04-07T14:37:21.697Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/inflight  Type is: DEV\n2018-04-07T14:37:21.697Z flora-colossus already walked this route\n2018-04-07T14:37:21.697Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/inherits  Type is: DEV\n2018-04-07T14:37:21.697Z flora-colossus already walked this route\n2018-04-07T14:37:21.697Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/minimatch  Type is: DEV\n2018-04-07T14:37:21.697Z flora-colossus already walked this route\n2018-04-07T14:37:21.697Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/once  Type is: DEV\n2018-04-07T14:37:21.697Z flora-colossus already walked this route\n2018-04-07T14:37:21.697Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/path-is-absolute  Type is: DEV\n2018-04-07T14:37:21.697Z flora-colossus already walked this route\n2018-04-07T14:37:21.698Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/minimatch  Type is: DEV\n2018-04-07T14:37:21.698Z flora-colossus already walked this route\n2018-04-07T14:37:21.698Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/mkdirp  Type is: DEV\n2018-04-07T14:37:21.698Z flora-colossus already walked this route\n2018-04-07T14:37:21.698Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/mksnapshot  Type is: DEV\n2018-04-07T14:37:21.698Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/decompress-zip  Type is: DEV\n2018-04-07T14:37:21.698Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/binary  Type is: DEV\n2018-04-07T14:37:21.699Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/buffers  Type is: DEV\n2018-04-07T14:37:21.699Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/chainsaw  Type is: DEV\n2018-04-07T14:37:21.699Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/traverse  Type is: DEV\n2018-04-07T14:37:21.700Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/graceful-fs  Type is: DEV\n2018-04-07T14:37:21.700Z flora-colossus already walked this route\n2018-04-07T14:37:21.700Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/mkpath  Type is: DEV\n2018-04-07T14:37:21.700Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/nopt  Type is: DEV\n2018-04-07T14:37:21.700Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/abbrev  Type is: DEV\n2018-04-07T14:37:21.701Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/q  Type is: DEV\n2018-04-07T14:37:21.701Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/readable-stream  Type is: DEV\n2018-04-07T14:37:21.701Z flora-colossus already walked this route\n2018-04-07T14:37:21.701Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/touch  Type is: DEV\n2018-04-07T14:37:21.701Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/touch/node_modules/nopt  Type is: DEV\n2018-04-07T14:37:21.702Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/abbrev  Type is: DEV\n2018-04-07T14:37:21.702Z flora-colossus already walked this route\n2018-04-07T14:37:21.702Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/mksnapshot/node_modules/fs-extra  Type is: DEV\n2018-04-07T14:37:21.702Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/graceful-fs  Type is: DEV\n2018-04-07T14:37:21.702Z flora-colossus already walked this route\n2018-04-07T14:37:21.702Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/jsonfile  Type is: DEV\n2018-04-07T14:37:21.702Z flora-colossus already walked this route\n2018-04-07T14:37:21.702Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/klaw  Type is: DEV\n2018-04-07T14:37:21.702Z flora-colossus already walked this route\n2018-04-07T14:37:21.703Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/path-is-absolute  Type is: DEV\n2018-04-07T14:37:21.703Z flora-colossus already walked this route\n2018-04-07T14:37:21.703Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/rimraf  Type is: DEV\n2018-04-07T14:37:21.703Z flora-colossus already walked this route\n2018-04-07T14:37:21.703Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/request  Type is: DEV\n2018-04-07T14:37:21.703Z flora-colossus already walked this route\n2018-04-07T14:37:21.703Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/tmp  Type is: DEV\n2018-04-07T14:37:21.703Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/os-tmpdir  Type is: DEV\n2018-04-07T14:37:21.704Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/electron-packager/node_modules/debug  Type is: DEV\n2018-04-07T14:37:21.706Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/ms  Type is: DEV\n2018-04-07T14:37:21.706Z flora-colossus already walked this route\n2018-04-07T14:37:21.706Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/electron-packager/node_modules/electron-download  Type is: DEV\n2018-04-07T14:37:21.706Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/electron-packager/node_modules/electron-download/node_modules/debug  Type is: DEV\n2018-04-07T14:37:21.707Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/ms  Type is: DEV\n2018-04-07T14:37:21.707Z flora-colossus already walked this route\n2018-04-07T14:37:21.707Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/env-paths  Type is: DEV\n2018-04-07T14:37:21.707Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/electron-packager/node_modules/electron-download/node_modules/fs-extra  Type is: DEV\n2018-04-07T14:37:21.708Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/graceful-fs  Type is: DEV\n2018-04-07T14:37:21.708Z flora-colossus already walked this route\n2018-04-07T14:37:21.708Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/jsonfile  Type is: DEV\n2018-04-07T14:37:21.708Z flora-colossus already walked this route\n2018-04-07T14:37:21.708Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/minimist  Type is: DEV\n2018-04-07T14:37:21.708Z flora-colossus already walked this route\n2018-04-07T14:37:21.708Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/nugget  Type is: DEV\n2018-04-07T14:37:21.708Z flora-colossus already walked this route\n2018-04-07T14:37:21.709Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/electron-packager/node_modules/path-exists  Type is: DEV\n2018-04-07T14:37:21.709Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/rc  Type is: DEV\n2018-04-07T14:37:21.709Z flora-colossus already walked this route\n2018-04-07T14:37:21.709Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/semver  Type is: DEV\n2018-04-07T14:37:21.709Z flora-colossus already walked this route\n2018-04-07T14:37:21.709Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/electron-packager/node_modules/sumchecker  Type is: DEV\n2018-04-07T14:37:21.709Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/electron-packager/node_modules/sumchecker/node_modules/debug  Type is: DEV\n2018-04-07T14:37:21.710Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/ms  Type is: DEV\n2018-04-07T14:37:21.710Z flora-colossus already walked this route\n2018-04-07T14:37:21.710Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/electron-osx-sign  Type is: DEV\n2018-04-07T14:37:21.710Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/bluebird  Type is: DEV\n2018-04-07T14:37:21.711Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/compare-version  Type is: DEV\n2018-04-07T14:37:21.711Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/debug  Type is: DEV\n2018-04-07T14:37:21.711Z flora-colossus already walked this route\n2018-04-07T14:37:21.711Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/isbinaryfile  Type is: DEV\n2018-04-07T14:37:21.711Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/minimist  Type is: DEV\n2018-04-07T14:37:21.711Z flora-colossus already walked this route\n2018-04-07T14:37:21.712Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/plist  Type is: DEV\n2018-04-07T14:37:21.712Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/base64-js  Type is: DEV\n2018-04-07T14:37:21.712Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/xmlbuilder  Type is: DEV\n2018-04-07T14:37:21.712Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/xmldom  Type is: DEV\n2018-04-07T14:37:21.713Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/extract-zip  Type is: DEV\n2018-04-07T14:37:21.713Z flora-colossus already walked this route\n2018-04-07T14:37:21.713Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/electron-packager/node_modules/fs-extra  Type is: DEV\n2018-04-07T14:37:21.713Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/graceful-fs  Type is: DEV\n2018-04-07T14:37:21.713Z flora-colossus already walked this route\n2018-04-07T14:37:21.713Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/electron-packager/node_modules/fs-extra/node_modules/jsonfile  Type is: DEV\n2018-04-07T14:37:21.714Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/graceful-fs  Type is: DEV\n2018-04-07T14:37:21.714Z flora-colossus already walked this route\n2018-04-07T14:37:21.714Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/graceful-fs  Type is: DEV\n2018-04-07T14:37:21.714Z flora-colossus already walked this route\n2018-04-07T14:37:21.714Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/universalify  Type is: DEV\n2018-04-07T14:37:21.714Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/galactus  Type is: DEV\n2018-04-07T14:37:21.715Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/galactus/node_modules/debug  Type is: DEV\n2018-04-07T14:37:21.715Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/ms  Type is: DEV\n2018-04-07T14:37:21.715Z flora-colossus already walked this route\n2018-04-07T14:37:21.715Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/flora-colossus  Type is: DEV\n2018-04-07T14:37:21.715Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/flora-colossus/node_modules/debug  Type is: DEV\n2018-04-07T14:37:21.716Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/ms  Type is: DEV\n2018-04-07T14:37:21.716Z flora-colossus already walked this route\n2018-04-07T14:37:21.716Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/flora-colossus/node_modules/fs-extra  Type is: DEV\n2018-04-07T14:37:21.716Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/graceful-fs  Type is: DEV\n2018-04-07T14:37:21.716Z flora-colossus already walked this route\n2018-04-07T14:37:21.716Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/flora-colossus/node_modules/jsonfile  Type is: DEV\n2018-04-07T14:37:21.717Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/graceful-fs  Type is: DEV\n2018-04-07T14:37:21.717Z flora-colossus already walked this route\n2018-04-07T14:37:21.717Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/graceful-fs  Type is: DEV\n2018-04-07T14:37:21.717Z flora-colossus already walked this route\n2018-04-07T14:37:21.717Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/universalify  Type is: DEV\n2018-04-07T14:37:21.717Z flora-colossus already walked this route\n2018-04-07T14:37:21.717Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/galactus/node_modules/fs-extra  Type is: DEV\n2018-04-07T14:37:21.717Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/graceful-fs  Type is: DEV\n2018-04-07T14:37:21.717Z flora-colossus already walked this route\n2018-04-07T14:37:21.717Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/galactus/node_modules/jsonfile  Type is: DEV\n2018-04-07T14:37:21.718Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/graceful-fs  Type is: DEV\n2018-04-07T14:37:21.718Z flora-colossus already walked this route\n2018-04-07T14:37:21.718Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/graceful-fs  Type is: DEV\n2018-04-07T14:37:21.718Z flora-colossus already walked this route\n2018-04-07T14:37:21.718Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/universalify  Type is: DEV\n2018-04-07T14:37:21.718Z flora-colossus already walked this route\n2018-04-07T14:37:21.718Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/get-package-info  Type is: DEV\n2018-04-07T14:37:21.719Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/bluebird  Type is: DEV\n2018-04-07T14:37:21.719Z flora-colossus already walked this route\n2018-04-07T14:37:21.719Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/debug  Type is: DEV\n2018-04-07T14:37:21.719Z flora-colossus already walked this route\n2018-04-07T14:37:21.719Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/lodash.get  Type is: DEV\n2018-04-07T14:37:21.719Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/get-package-info/node_modules/read-pkg-up  Type is: DEV\n2018-04-07T14:37:21.719Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/get-package-info/node_modules/find-up  Type is: DEV\n2018-04-07T14:37:21.720Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/locate-path  Type is: DEV\n2018-04-07T14:37:21.720Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/p-locate  Type is: DEV\n2018-04-07T14:37:21.720Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/p-limit  Type is: DEV\n2018-04-07T14:37:21.720Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/p-try  Type is: DEV\n2018-04-07T14:37:21.721Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/locate-path/node_modules/path-exists  Type is: DEV\n2018-04-07T14:37:21.721Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/get-package-info/node_modules/read-pkg  Type is: DEV\n2018-04-07T14:37:21.721Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/get-package-info/node_modules/load-json-file  Type is: DEV\n2018-04-07T14:37:21.722Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/graceful-fs  Type is: DEV\n2018-04-07T14:37:21.722Z flora-colossus already walked this route\n2018-04-07T14:37:21.722Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/parse-json  Type is: DEV\n2018-04-07T14:37:21.722Z flora-colossus already walked this route\n2018-04-07T14:37:21.722Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/pify  Type is: DEV\n2018-04-07T14:37:21.722Z flora-colossus already walked this route\n2018-04-07T14:37:21.722Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/get-package-info/node_modules/strip-bom  Type is: DEV\n2018-04-07T14:37:21.722Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/normalize-package-data  Type is: DEV\n2018-04-07T14:37:21.722Z flora-colossus already walked this route\n2018-04-07T14:37:21.723Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/get-package-info/node_modules/path-type  Type is: DEV\n2018-04-07T14:37:21.723Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/pify  Type is: DEV\n2018-04-07T14:37:21.723Z flora-colossus already walked this route\n2018-04-07T14:37:21.723Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/nodeify  Type is: DEV\n2018-04-07T14:37:21.723Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/is-promise  Type is: DEV\n2018-04-07T14:37:21.724Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/promise  Type is: DEV\n2018-04-07T14:37:21.724Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/is-promise  Type is: DEV\n2018-04-07T14:37:21.724Z flora-colossus already walked this route\n2018-04-07T14:37:21.724Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/parse-author  Type is: DEV\n2018-04-07T14:37:21.724Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/author-regex  Type is: DEV\n2018-04-07T14:37:21.725Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/electron-packager/node_modules/pify  Type is: DEV\n2018-04-07T14:37:21.725Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/plist  Type is: DEV\n2018-04-07T14:37:21.725Z flora-colossus already walked this route\n2018-04-07T14:37:21.725Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/rcedit  Type is: DEV\n2018-04-07T14:37:21.725Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/resolve  Type is: DEV\n2018-04-07T14:37:21.726Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/path-parse  Type is: DEV\n2018-04-07T14:37:21.726Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/sanitize-filename  Type is: DEV\n2018-04-07T14:37:21.726Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/truncate-utf8-bytes  Type is: DEV\n2018-04-07T14:37:21.726Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/utf8-byte-length  Type is: DEV\n2018-04-07T14:37:21.727Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/semver  Type is: DEV\n2018-04-07T14:37:21.727Z flora-colossus already walked this route\n2018-04-07T14:37:21.727Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/yargs-parser  Type is: DEV\n2018-04-07T14:37:21.727Z flora-colossus walk reached: /tmp/electron-quick-start/node_modules/yargs-parser/node_modules/camelcase  Type is: DEV\n2018-04-07T14:37:21.738Z electron-packager Renaming electron to electron-quick-start in /tmp/electron-packager/linux-x64/electron-quick-start-linux-x64\n2018-04-07T14:37:21.739Z electron-packager Moving /tmp/electron-packager/linux-x64/electron-quick-start-linux-x64 to /tmp/electron-quick-start/electron-quick-start-linux-x64\nWrote new app to /tmp/electron-quick-start/electron-quick-start-linux-x64. Also, if  I run $tree electron-quick-start-linux-x64/resources on the \nresources I get:\n```\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 LICENSE.md\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 README.md\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.js\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 node_modules\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 @types\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 package-lock.json\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 package.json\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 renderer.js\n\u2514\u2500\u2500 electron.asar\n3 directories, 8 files\n```. ",
    "dgolovin": "Original failure is happening here https://github.com/MarshallOfSound/flora-colossus/blob/9fef3a6c3224c133c4175b92626d41f4e66b9325/src/Walker.ts#L70.. ",
    "Dec-F": "@MarshallOfSound Yes, it exists. @malept \nbash\nPS D:\\Project\\vkit> npm list galactus\nvkit@0.1.0 D:\\Project\\vkit\n`-- (empty)\nSuddenly it was possible to run today. It may be that I restarted windows.\nBut now there is another problem. The packaging has been running, but it has not been completed. It took more than ten minutes.\n```bash\nPS D:\\Project\\vkit> npm run package\n\nvkit@0.1.0 package D:\\Project\\vkit\nelectron-packager . app\n\nPackaging app for platform win32 x64 using electron v1.8.4\n``\n. @malept @MarshallOfSound \nMy project is at [GitHub](https://github.com/Dec-F/vkit). @malept I ran this command and nothing was output. However, after restarting windows, it can be packaged once. I hate windows, thank you very much for your help. @malept Packaged again and running but not completed, I decided to develop on the virtual machine. I don't know what causes it,node -v8.9.4,windows 10 1709`, running on the VM is fine.. ",
    "Shaya-pnc": "Nothing to do with electron, but I had the same issue when trying to run vue ui.\nSolved by manually navigating to the relevant node_modules parent folder and running:\nnpm install read-pkg\nDunno why windows didn't install it in the first place, but after manually installing it - everything worked fine.. ",
    "zeronickname": "really sorry about this... was opened accidently. ",
    "pushkin-": "@malept I get the same warning and my dependencies are:\n\"electron\": \"2.0.0\",\n\"find-process\": \"1.1.1\",\n\"request\": \"2.86.0\",\n\"url-join\": \"4.0.0\"\n\nAdditionally, I don't understand the warning. Why should electron be a devDependency? Shouldn't it be a regular dependency?. @malept Why is that? Isn't electron required at runtime?. ",
    "preethamsridhar": "Thank you. I had the same issue. Solved it now.. ",
    "Joni4Games": "Any solution yet? Do we have to downgrade to node 4.x?. ",
    "Triforcey": "@Joni4Games It is patched. Just use the latest 9.x release until the fix is published.. On my system the issue also appears to be fixed in 12.1.0.. ",
    "psharneja": "well, i'm using version 12.1.0 and issue remains the same. ",
    "jsejcksn": "I am beginning to learn about Electron through the electron-api-demos app. When trying to run npm run-script package I also get this error.\nI am running the following versions:\n - Node: 10.4.1\n - electron-packager: 12.1.0\n - macOS 10.13.5. Hi @malept: Thanks for responding. Running your example command produces an error:\n```\n$ npm run-script package -- --version\n\nElectronAPIDemos@1.3.0 package /path/to/electron-api-demos\nnpm-run-all package:* \"--version\"\n\nERROR: Invalid Option: --version\n```\nI thought I was running v 12.1.0 of electron-packager because of the output of npm view electron-packager version. However, I realized my mistake\u2014that it is showing me the info for the package at the npm registry and not my local package. I then ran npm list electron-packager, which produced\nElectronAPIDemos@1.3.0 /path/to/electron-api-demos\n\u2514\u2500\u2500 electron-packager@8.7.2\nRunning npm update or npm update electron-packager will not increase the installed version of electron-packager because of the use of the ^ in package.json. The caret prohibits updating it beyond the major version number, in this case, 8.x.x.\nI see that you are also a member of the electron-api-demos repo. Perhaps you can address this issue there by changing the ^ to >=? As it stands, users cannot install and test packaging the app when running the latest version of Node.. @malept I agree about semver practices, however, there may be another internal reason (unknown to me) not to bump the required major version, which is why I suggested a different operator instead. Which member do you suggest I contact about this since you are unable to address it?. @malept So there are no reasons the package is still set to major version 8? Nothing would prohibit the team from accepting a PR to bump it to 12?. ",
    "lukyanov": "Issue still persists:\n```\n$ node --version\nv10.11.0\n$ npm list electron-packager\nbuymeapie@ /Users/snaky/Dev/baton/baton.web.app.git\n\u2514\u2500\u2500 electron-packager@12.1.2\n$ electron-packager \nCANNOT RUN WITH NODE 10.11.0\nElectron Packager requires Node 4.0 or above.\n```\nMacOs 10.13.6\nNode is installed with brew.. ",
    "rmraya": "Still broken with node 10.11.0 which is the official version used by electron 4.0.0. ",
    "chhh": "There's already another PR with semver: https://github.com/electron-userland/electron-packager/pull/835\nPlease somebody accept it!. ",
    "alex1504": "Solve it by change root path for building like:\n\"electron-packager ./ electron-roll-tool --win --out ../electron-roll-tool-dist --arch=x64 --version=0.0.1 --overwrite --electron-version=1.8.4\". ",
    "lukejagodzinski": "I solved my problem. In the dist directory there need to be package.json file too.. ",
    "crane168": "@lukejagodzinski  Hello, I have the same problem with you, but there is package. Json in my dist directory, error is still reported.. ",
    "schwiet": "I had the same issue too and I had a package.json present. Running:\nelectron-packager ./dist --out=./dist/ would result in no app/ in the package (i.e. my app was silently not being packaged). If I instead first changed into ./dist, all is well again:\ncd dist\nelectron-packager .. ",
    "silbo": "Ok just had to clean up and start over. Deleted the parts folder and it worked again :+1: . ",
    "BruceAn1978": "package.json\n\"scripts\":\n  {\n    \"start\": \"electron .\",\n    \"package\": \"electron-packager ./ FileAssistant --all --out ./target --version 3.0.0 --overwrite --icon=./app/img/forp.ico --DEBUG=electron-packager\"\n  },\nCommand\nnpm run-script package\nConsole\n`PS F:\\electron\\large-file-assistant> npm run-script package\n\nlarge-file-assistant@3.0.0 package F:\\electron\\large-file-assistant\nelectron-packager ./ FileAssistant --all --out ./target --version 3.0.0 --overwrite --icon=./app/img/app.ico --DEBUG=electron-packager\n\nUnable to determine Electron version. Please specify an Electron version\nFor more information, please see\nhttps://github.com/electron-userland/electron-packager/blob/master/docs/api.md#electronversion\nnpm ERR! code ELIFECYCLE\nnpm ERR! errno 1\nnpm ERR! large-file-assistant@3.0.0 package: electron-packager ./ FileAssistant --all --out ./target --version 3.0.0 --overwrite --icon=./app/img/app.ico --DEBUG=electron-packager\nnpm ERR! Exit status 1\nnpm ERR!npm ERR! Failed at the large-file-assistant@3.0.0 package script.\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     C:\\Users\\Bruce\\AppData\\Roaming\\npm-cache_logs\\2018-05-13T00_01_40_586Z-debug.log. package.json{\n  \"name\": \"large-file-assistant\",\n  \"version\": \"3.0.0\",\n  \"description\": \"Large File Assistant\",\n  \"main\": \"main.js\",\n  \"scripts\":\n  {\n    \"start\": \"electron .\",\n    \"package\": \"electron-packager ./ FileAssistant --all --out ./target --version 3.0.0 --overwrite --icon=./app/img/forp.ico --DEBUG=electron-packager\"\n  },\n  \"author\": \"Bruce\",\n  \"license\": \"ISC\",\n  \"dependencies\":\n  {\n    \"nconf\": \"^0.10.0\"\n  },\n  \"devDependencies\":\n  {\n    \"electron-packager\": \"^12.0.2\"\n  }\n}\n`. Thanks!\nLet me have a trying.. I have installed electron 2.0 to project location by npm install --save-dev electron.\nIt still can not work,Here are some errors:\n`PS F:\\electron\\large-file-assistant> npm run-script package\n\nlarge-file-assistant@3.0.0 package F:\\electron\\large-file-assistant\nelectron-packager ./ FileAssistant --all --out ./target --version 3.0.0 --overwrite --icon=./app/img/app.ico --DEBUG=electron-packager\n\n... and 1 more\nFailed to find Electron v2.0.0 for linux-mips64el at https://github.com/electron/electron/releases/download/v2.0.0/electron-v2.0.0-linux-mips64el.zip\nnpm ERR! code ELIFECYCLE\nnpm ERR! errno 1\nnpm ERR! large-file-assistant@3.0.0 package: electron-packager ./ FileAssistant --all --out ./target --version 3.0.0 --overwrite --icon=./app/img/app.ico --DEBUG=electron-packager\nnpm ERR! Exit status 1\nnpm ERR!\nnpm ERR! Failed at the large-file-assistant@3.0.0 package script.\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     C:\\Users\\Bruce\\AppData\\Roaming\\npm-cache_logs\\2018-05-13T11_38_10_002Z-debug.log`. It's not the package's problem, but electron v2.0.\nI packaged success for only window's platform. It seems no file found for mac or linux platform by electron v2.0. Is there any other parameters to solve this problem?\nor some extra parameters for electron platform to solve this problem?. Don't close the issue carelessly!!!\nI can reduce this problem by the code above: It works well in vs code dev environment, but no any response after packaged.\nSo I don't think this is a problem of code is written.. \nfont{\n    line-height: 1.6;\n}\nul,ol{\n    padding-left: 20px;\n    list-style-position: inside;\n}\n\nThanks for this mesage.the\u00a0Frequently Asked Question\u00a0page has few docs and I could not find my solution.                \nOn 6/11/2018 12:00\uff0cMark Lee<notifications@github.com> wrote\uff1a\n\nI don't have time to debug your code, but if I had to guess, it's probably related to this Frequently Asked Question.\n\u2014You are receiving this because you authored the thread.Reply to this email directly, view it on GitHub, or mute the thread.\n    a#ntes-pcmail-signature-default:hover {\n        text-decoration: underline;\n        color: #199cff;\n        cursor: pointer;\n    }\n    a#ntes-pcmail-signature-default:active {\n        text-decoration: underline;\n        color: #246fce;\n        cursor: pointer;\n    }. Thanks a lot.\n\nI will have a try.. It's the problem of absolute path.\nThanks.. Don't close the issue carelessly!!!\nI can reduce this problem by the code above: It works well in vs code dev environment, but no any response after packaged.. So I don't think this is a problem of code is written.. ",
    "tzvetelin-vassilev": "Output from packager:\nelectron-packager .. --overwrite --asar --ignore=\"app-scripts|test\" --icon=../app-icon/mac/app.icns --out=../../out\nelectron-packager Electron Packager 12.0.2 +0ms\n  electron-packager Node v8.4.0 +1ms\n  electron-packager Host Operating system: darwin (x64) +0ms\n  electron-packager Packager Options: {\"_\":[\"..\"],\"deref-symlinks\":true,\"derefSymlinks\":true,\"download\":{\"strictSSL\":true},\"prune\":true,\"overwrite\":true,\"asar\":true,\"ignore\":\"app-scripts|test\",\"icon\":\"../app-icon/mac/app.icns\",\"out\":\"../../out\",\"dir\":\"..\",\"protocols\":[]} +0ms\n  electron-packager Target Platforms: darwin +0ms\n  electron-packager Target Architectures: x64 +0ms\n  electron-packager Inferring application name from productName in /Users/vassilev/Projects/mate-desktop/package.json +0ms\n  electron-packager Inferring appVersion from version in /Users/vassilev/Projects/mate-desktop/package.json +3ms\n  electron-packager Inferring target Electron version from electron in /Users/vassilev/Projects/mate-desktop/package.json +10ms\n  electron-packager Application name: Wacom Inkspace App +28ms\n  electron-packager Target Electron version: 2.0.0 +0ms\n  electron-packager Ignored path regular expressions: [ 'app-scripts|test',\n  '/\\.git($|/)',\n  '/node_modules/\\.bin($|/)',\n  '\\.o(bj)?$' ] +0ms\n  electron-packager Downloading Electron with options {\"strictSSL\":true,\"platform\":\"darwin\",\"arch\":\"x64\",\"version\":\"2.0.0\"} +0ms\nPackaging app for platform darwin x64 using electron v2.0.0\n  electron-packager Creating /var/folders/wd/kpjczcbd28q_sbq6njl38zrw0000gn/T/electron-packager/darwin-x64-template +2s\n  electron-packager Extracting /Users/vassilev/.electron/electron-v2.0.0-darwin-x64.zip to /var/folders/wd/kpjczcbd28q_sbq6njl38zrw0000gn/T/electron-packager/darwin-x64-template +0ms\n  electron-packager Initializing app in /var/folders/wd/kpjczcbd28q_sbq6njl38zrw0000gn/T/electron-packager/darwin-x64/Wacom Inkspace App-darwin-x64 from /var/folders/wd/kpjczcbd28q_sbq6njl38zrw0000gn/T/electron-packager/darwin-x64-template template +0ms\n  electron-packager Ignored paths based on the out param: [ '/Users/vassilev/Projects/out' ] +4s\n  electron-packager Running asar with the options {} +4m\n  electron-packager Copying icon \"../app-icon/mac/app.icns\" to app's Resources as \"electron.icns\" +0ms\n  electron-packager Renaming Electron to Wacom Inkspace App in /var/folders/wd/kpjczcbd28q_sbq6njl38zrw0000gn/T/electron-packager/darwin-x64/Wacom Inkspace App-darwin-x64/Electron.app/Contents/MacOS +7s\n  electron-packager Renaming Electron Helper to Wacom Inkspace App Helper in /var/folders/wd/kpjczcbd28q_sbq6njl38zrw0000gn/T/electron-packager/darwin-x64/Wacom Inkspace App-darwin-x64/Electron.app/Contents/Frameworks/Electron Helper.app/Contents/MacOS +1ms\n  electron-packager Renaming Electron Helper EH to Wacom Inkspace App Helper EH in /var/folders/wd/kpjczcbd28q_sbq6njl38zrw0000gn/T/electron-packager/darwin-x64/Wacom Inkspace App-darwin-x64/Electron.app/Contents/Frameworks/Electron Helper EH.app/Contents/MacOS +1ms\n  electron-packager Renaming Electron Helper NP to Wacom Inkspace App Helper NP in /var/folders/wd/kpjczcbd28q_sbq6njl38zrw0000gn/T/electron-packager/darwin-x64/Wacom Inkspace App-darwin-x64/Electron.app/Contents/Frameworks/Electron Helper NP.app/Contents/MacOS +0ms\n  electron-packager Renaming Electron Helper.app to Wacom Inkspace App Helper.app in /var/folders/wd/kpjczcbd28q_sbq6njl38zrw0000gn/T/electron-packager/darwin-x64/Wacom Inkspace App-darwin-x64/Electron.app/Contents/Frameworks +1ms\n  electron-packager Renaming Electron Helper EH.app to Wacom Inkspace App Helper EH.app in /var/folders/wd/kpjczcbd28q_sbq6njl38zrw0000gn/T/electron-packager/darwin-x64/Wacom Inkspace App-darwin-x64/Electron.app/Contents/Frameworks +0ms\n  electron-packager Renaming Electron Helper NP.app to Wacom Inkspace App Helper NP.app in /var/folders/wd/kpjczcbd28q_sbq6njl38zrw0000gn/T/electron-packager/darwin-x64/Wacom Inkspace App-darwin-x64/Electron.app/Contents/Frameworks +0ms\n  electron-packager Moving /var/folders/wd/kpjczcbd28q_sbq6njl38zrw0000gn/T/electron-packager/darwin-x64/Wacom Inkspace App-darwin-x64 to ../../out/Wacom Inkspace App-darwin-x64 +2ms\nWrote new app to ../../out/Wacom Inkspace App-darwin-x64. I have created test scenario.\nget  electron-quick-start\nedit render.js\nconst usb = require(\"usb\");\nlet list = usb.getDeviceList();\nconsole.log(list)\nupdate package.json \n\"devDependencies\": {\n    \"babel-core\": \"^6.26.3\",\n    \"babel-loader\": \"^7.1.4\",\n    \"babel-plugin-inline-react-svg\": \"^0.5.2\",\n    \"babel-plugin-transform-remove-strict-mode\": \"0.0.2\",\n    \"babel-preset-env\": \"^1.7.0\",\n    \"babel-preset-react\": \"^6.24.1\",\n    \"babel-preset-react-optimize\": \"^1.0.1\",\n    \"babel-preset-stage-0\": \"^6.24.1\",\n    \"clean-webpack-plugin\": \"^0.1.19\",\n    \"concurrently\": \"^3.5.1\",\n    \"cross-env\": \"^5.1.5\",\n    \"css-loader\": \"^0.28.11\",\n    \"electron\": \"^2.0.0\",\n    \"electron-devtools-installer\": \"^2.2.4\",\n    \"extract-text-webpack-plugin\": \"^3.0.2\",\n    \"file-loader\": \"^1.1.11\",\n    \"html-loader\": \"^0.5.5\",\n    \"ignore-loader\": \"^0.1.2\",\n    \"style-loader\": \"^0.21.0\",\n    \"webpack\": \"^3.11.0\"\n  },\n  \"dependencies\": {\n    \"ag-psd\": \"^1.2.2\",\n    \"glob\": \"^7.1.2\",\n    \"immutable\": \"^3.8.2\",\n    \"jpeg-js\": \"^0.3.4\",\n    \"jwt-js\": \"^0.5.0\",\n    \"pngjs\": \"^3.3.3\",\n    \"prop-types\": \"^15.6.1\",\n    \"rc-slider\": \"^8.6.1\",\n    \"rc-tooltip\": \"^3.7.2\",\n    \"react\": \"^16.3.2\",\n    \"react-dom\": \"^16.3.2\",\n    \"react-intl\": \"^2.4.0\",\n    \"react-intl-redux\": \"^0.7.0\",\n    \"react-list\": \"^0.8.7\",\n    \"react-loader\": \"^2.4.5\",\n    \"react-notification\": \"^6.8.2\",\n    \"react-redux\": \"^5.0.7\",\n    \"react-router\": \"^4.2.0\",\n    \"react-router-dom\": \"^4.2.2\",\n    \"react-router-redux\": \"^4.0.8\",\n    \"react-scrollbar\": \"^0.5.4\",\n    \"react-tabs\": \"^2.2.2\",\n    \"redux\": \"^4.0.0\",\n    \"redux-thunk\": \"^2.2.0\",\n    \"threads\": \"^0.11.0\",\n    \"universal-analytics\": \"^0.4.16\",\n    \"uuid\": \"^3.2.1\"\n  },\n  \"optionalDependencies\": {\n    \"bluetooth-serial-port\": \"^2.1.6\",\n    \"node-bluetooth\": \"^1.2.2\",\n    \"gl\": \"^4.0.4\",\n    \"leveldown\": \"^1.8.0\",\n    \"levelup\": \"^1.3.9\",\n    \"noble\": \"^1.9.1\",\n    \"serialport\": \"^6.1.1\",\n    \"usb\": \"^1.3.1\"\n  }\nelectron-packager . --asar. OK minified package.json\n\"devDependencies\": {\n    \"electron\": \"^2.0.0\"\n  },\n  \"optionalDependencies\": {\n    \"usb\": \"^1.3.1\"\n  }. I'm not pretty sure that asar arg fix the problem. Under Windows I don't use asar at all because squirrel problem and i have the same issue there. Also under Mac i have removed asar and package test case without any args - now i recieve 'Cannot find process-nextick-args'. node_modules is here and problem also. Of course i'm rebuilding native modules. Without this app is not able to start at all.. Well, in fact I'm using script that eliminates need for rebuild. Here it is:\nElectron's version.\nexport npm_config_target=$ELECTRON_VERSION\nexport npm_config_abi=$ELECTRON_ABI\nThe architecture of Electron, can be ia32 or x64.\nexport npm_config_arch=x64\nDownload headers for Electron.\nexport npm_config_disturl=https://atom.io/download/atom-shell\nTell node-pre-gyp that we are building for Electron.\nexport npm_config_runtime=electron\nTell node-pre-gyp to build module from source code.\nexport npm_config_build_from_source=true\nInstall all dependencies, and store cache to ~/.electron-gyp.\nHOME=~/.electron-gyp npm install\n. This is the minimal testcase as I described.\n\"devDependencies\": {\n    \"electron\": \"^2.0.1\"\n  },\n  \"optionalDependencies\": {\n    \"usb\": \"^1.3.1\"\n  }\n--- render.js\nconst usb = require(\"usb\");\nlet list = usb.getDeviceList();\nconsole.log(list)\n--- render.js\n./install.sh\nelectron-packager .\nelectron-packager 12.0.2\nNode.js 8.9.3, Chromium 61.0.3163.100, and Electron 2.0.1\n'process-nextick-args' module is not found. process-nextick-args is dependency of readable-stream.\nPlease extend render.js with:\n---  render.js\nconst usb = require(\"usb\");\nlet list = usb.getDeviceList();\nconsole.log(list)\nlet device = list[0];\ndevice.open();\nconsole.log(device.deviceDescriptor.iSerialNumber)\ndevice.getStringDescriptor(device.deviceDescriptor.iSerialNumber, (error, serial) => {\n    try {\n        device.close();\n    }\n    catch(error) {\n        console.warn(error);\n    }\nconsole.log(serial);\n\n});\n---  render.js\nIs serial accessible?\nWith electron-packager@11.2.0 packaged content with asar works fine.. Hi @malept ,\nI have made installation on windows and linux either.\nIn both platforms starting of packaged app fails with the same error.\nSome suggestions how to proceed?. I don't have troubles with electron-rebuild but I really can't make it works. So let's try again:\n12.1.0 is latest version of electron-packager with supposed fix I believe. If I'm wrong please correct me. With this steps it should be works:\n\nnpm install\nelectron-rebuild usb\nelectron-packager .\n\nWith this steps I still have the same problems. Where I'm wrong?. Yes, with your demo works, but it looks like workaround, not like a solution.\n   install -> rebuild -> package = this should works\nWith your demo sequence is: \n   install -> rebuild -> package (rebuild one more time)\nPackaging process looses some dependencies and rebuilt recovers them. It looks creepy.\nReal resolution cannot impact such dependency.. I still don't understand how you neglate the fact that everything works fine before version 12.0.0 of electron-packager. Anyhow Electron Forge now works in different way - fine. \n\"electron-packager .\" executed under command line is not working. Not working for reasons that I still don't understand, but this is command line app and packager.js script proves that could work. 'afterCopy' step is nice but if this rebuilt is really needed could be command line argument or always to happens when electron-packager needs that.. ",
    "lieutandat": "Thank you, I just want to automatic generate file which has version number in that for easier detect with old version. Maybe, I have to do this manual :D. Thank for your advise. I will try this. ",
    "cornwang": "\"packager\": \"electron-packager ./dist UTANTOOL  --platform=win32 --arch=x64  --out ./pro/UTAN4TOOLss  --electron-version 2.0.2  --overwrite --DEBUG=electron-packager\" ,\nwhen i npm run packager \n`D:\\code\\tool-frontend>npm run packager\n\nreact-pc-seed@1.0.0 packager D:\\code\\tool-frontend\nelectron-packager ./dist UTANTOOL  --platform=win32 --arch=x64  --out ./pro/UTAN4TOOLss  --electron-version 2.0.2  --overwrite --DEBUG=electron-packager\n\nPackaging app for platform win32 x64 using electron v2.0.2\nWrote new app to pro\\UTAN4TOOLss\\UTANTOOL-win32-x64`\n\nwhen i doubleClick exe -> ERROR :unable to find va valid app\n@malept . @malept Thanks\n1. When i addpackage.json to ./dist\n\n2. Then  npm run package  , when it finish ,i doubleClick exe\n\nI have a question, this electron-package package can be used after the build process? Or directly generate the root directory of the file?\n. @malept Thanks\ni addmain.js and package.json to dist,then it can be run . ",
    "vaidyaanand": "https://github.com/electron-userland/electron-builder/issues/552\nPlease check above URL. As asar is true in my case, it is something related to the electron-packager itself. I have searched a lot. There is no tutorial for it in your plugin.. @MarshallOfSound I think, you are just ignoring the issue. Nothing else. Well, thanks for comments. It's a time to change my packager now.. ",
    "redplane": "I can open the developer command by using mainWindow.webContents.openDevTools();. Previously I didn't notice that I had just opened dev console in development mode. The problem is about sqlite3. \nTherefore, I'll create another question. \nThis issue can be closed.. ",
    "Wohlstand": "Just now I made analysis of existing code, and I have found that next thing (copied from cli.js):\n```js\nvar curVer = [4, 0, 0];\nvar nodeVersionInfo = process.versions.node.split('.').map(function (n) { return Number(n) })\nif (nodeVersionInfo < curVer) {\n    console.error(nodeVersionInfo + \" is smaller than \" + curVer);\n} else {\n    console.error(nodeVersionInfo + \" is greater than \" + curVer);\n}\n```\nit prints me next:\n$ node check.js\n10,5,0 is smaller than 4,0,0\nSo, it's needed a totally different check of this, it's wrong logic as I see.\nAs temporary workaround for me, I have commented this wrong check, and electron-packager work fine now. For correctness, I'll try to write better and more accurate version check for this.... Okay, I have made the better check which is completely resolves this issue:\n```js\nvar curVer = [4, 0, 0];\nfunction versionOlder(current, needed)\n{\n    for(var i = 0; i < current.length && i < needed.length; i++)\n    {\n        if(current[i] == needed[i])\n            continue;\n        return current[i] < needed[i];\n    }\n    return false;\n}\nvar nodeVersionInfo = process.versions.node.split('.').map(function (n) { return Number(n) })\nif (versionOlder(nodeVersionInfo, curVer)) {\n    console.error(nodeVersionInfo + \" is smaller than \" + curVer);\n} else {\n    console.error(nodeVersionInfo + \" is greater than \" + curVer);\n}\nAnd output now\n$ node check.js\n10,5,0 is greater than 4,0,0\n. And the final code:js\nfunction versionOlder(current, needed) {\n  for (var i = 0; i < current.length && i < needed.length; i++) {\n    if (current[i] == needed[i])\n      continue;\n    return current[i] < needed[i];\n  }\n  return false;\n}\nvar nodeVersionInfo = process.versions.node.split('.').map(function (n) { return Number(n) });\nif (versionOlder(nodeVersionInfo, [4, 0, 0])) {\n  console.error('CANNOT RUN WITH NODE ' + process.versions.node)\n  console.error('Electron Packager requires Node 4.0 or above.')\n  process.exit(1)\n}\n``. Okay, just now I checked yourmasterbranch, and I see you have already fixed it by usingsemverthing. Version of electron packager at me is8.7.2` came with npm installation. So, everything must be fine. Sorry for disturbing.. ",
    "obendesmond": "You could also update your electron package to 3.0.8 and electron package manager to 12.1.0.\n. ",
    "pranayreddy123": "try to change \"electron-packager\": to \"^12.1.0\" in package,json\nand run gradle info build.. so that you can see exact issue. ",
    "Levente0xFFFF": "OK, it was totally my mistake. I omitted the --asar and had a look what is there. I forgot a zipped file in the source files' directory. So that's it. If somebody encounters the same mistake, I hope they will find this issue.. ",
    "storm-factory": "Strange, when I run npm list it shows the version as 12.1.0, but electron-packager --version returns nothing. looks like a dependency issue on my end thanks. Yeah, thanks again, uninstalled/installed the package and it's all working correctly now. Thanks again, obviously i've been using this for a couple years and appreciate what ya'll do!. ",
    "gasparyanyur": "Solved! \nHave changed process.env.NODE_ENV to production\nJust run export NODE_ENV=production in your cmd. ",
    "LudiscapeXApi": "I have the same problem with electron-packager on Win 10: \nSame resut with a new app create with the electron-quick-start as a base\nPackaging app for platform win32 ia32 using electron v2.0.6\nUnhandled rejection Error: Invalid package C:\\Users\\suppo\\AppData\\Local\\Temp\\electron-packager\\win32-ia32-template\\resources\\default_app.asar\n    at invalidArchiveError (ELECTRON_ASAR.js:153:19)\n    at Object.module.(anonymous function) [as open] (ELECTRON_ASAR.js:209:16)\n    at WriteStream.open (fs.js:2158:6)\n    at new WriteStream (fs.js:2144:10)\n    at Object.fs.createWriteStream (fs.js:2106:10)\n    at writeStream (C:\\Electron\\open-grid\\node_modules\\extract-zip\\index.js:175:36)\n    at C:\\Electron\\open-grid\\node_modules\\extract-zip\\index.js:172:18\n    at C:\\Electron\\open-grid\\node_modules\\yauzl\\index.js:439:7\n    at C:\\Electron\\open-grid\\node_modules\\yauzl\\index.js:473:5\n    at C:\\Electron\\open-grid\\node_modules\\fd-slicer\\index.js:32:7\n    at FSReqWrap.wrapper [as oncomplete] (fs.js:658:17)\nBut If i extract manualy the package \nC:\\Users\\suppo\\AppData\\Local\\electron\\Cache\\electron-v2.0.0-win32-ia32.zip\n into\nC:\\Users\\suppo\\AppData\\Local\\Temp\\electron-packager\nA new error is show : \n`Unhandled rejection Error: ENOTEMPTY: directory not empty, rmdir 'C:\\Users\\suppo\\AppData\\Local\\Temp\\electron-packager\\win32-ia32-template\\resources'\nelectron-quick-start.zip\n`. I cannot reproduce this on Ubuntu 18 too. Only on Win 10.\nprune false/true same result : \nPackaging app for platform win32 ia32 using electron v2.0.6\nUnhandled rejection Error: Invalid package C:\\Users\\suppo\\AppData\\Local\\Temp\\electron-packager\\win32-ia32-template\\resources\\default_app.asar\n    at invalidArchiveError (ELECTRON_ASAR.js:153:19)\n    at Object.module.(anonymous function) [as open] (ELECTRON_ASAR.js:209:16)\nand next :\nUnhandled rejection Error: ENOTEMPTY: directory not empty, rmdir C:\\Users\\suppo\\AppData\\Local\\Temp\\electron-packager\\win32-ia32-template\\resources. I found a solution :\nTurn off the asar functionality and then run it.\nprocess.noAsar = true;\n. ",
    "shinken008": "@LudiscapeXApi @malept thank you guys.I set process.noAsar = true.The packaged app runs normally.. ",
    "tigierrei": "Thank you for the quick reply. I will try everything you listed and I will inform you. For the first error I tried executing the app using open <path to the app file> but it gave me the same error. On windows 10 it works.\nFor the second error, the folder is set up like this:\n\nelectron/Electron.app/Contents/Resources/app/\n  \u251c\u2500\u2500 package.json\n  \u2514\u2500\u2500 index.js\n\n\n@malept \nEDIT\nI think I have bad explained myself in the previous post. Tu sum up, if I build the app on windows and I run it on windows it works, I build the app on windows and try to run it on macOS it gives me the second error. If I build the app on macOs and I try to run it on the same os it gives me the first error.. ",
    "shavenwalrus": "It was a silly error on my part, please disregard and sorry for the inconvenience.. ",
    "nrxszvo": "doh!  Stupid mistake.  I was using a VC system that I normally don't use in which all files are read-only by default.  I just needed to check everything out.  Sorry!. ",
    "markmcdowell": "Sure, the same commands you ran on Linux fails on Windows.. ",
    "Appuls": "\nAs a quick fix I fixed the version of asar:\nnpm i asar@0.14.3 -D\n\nI just ran into the same problem on Windows and your quick fix worked for me. Thanks!. ",
    "mrthorne": "Also ran into the same issue with Asar 0.14.4; forcing version 0.14.3 allows us to work around for now as well.\n\n. ",
    "diogo-raphael-cravo": "Just found a similar issue, sorry: https://github.com/electron-userland/electron-packager/issues/892. ",
    "poojas2288": "HI @MarshallOfSound \nI tried using hardenedRuntime for electron-osx-sign, used the certificate  - Developer ID Application:\nBut when I launch my app, it crashes with the exception type message as \"Code signature invalid\"\nNOTE -I am using target as \"mas\" when I package my app using electron-packager.\nThe same certificate works fine when I use electron-builder to b uild Mac app.. Is there any other way to enable runtime flag, where we can avoid the signing process because the main app, which includes this electron app, will already be signed later along with the bundled component ?. HI @MarshallOfSound \nIs there any update on my comments above ?. HI @MarshallOfSound \nIs there any update on my issue above ?. Thanks @malept \nCan you please let me know where can I find the usage example for this ?. Hi @malept \nI went through this notarize process.\nThe only thing they are doing is calling the Apple stuff to upload. I've used the sample and the following commands:\nelectron-packager . --overwrite --platform=darwin --arch=x64 --icon=group.icns --prune=true --out=release-builds --app-bundle-id=bundleId --electron-version=4.0.0-beta.8 electron-osx-sign ./release-builds/ElectronSigning-darwin-x64/ElectronSigning.app --platform=darwin --identity=\"Developer ID Application: certificateName\" --type=distribution --entitlements=../ent.entitlements --entitlements-inherit=../inherit.entitlements --hardenedRuntime (electron-packager updated to 13.0)\nI've tried with and without entitlements, I've tried with and without sandboxing. But I always get the same result. Without the '--hardenedRuntime' parameter, the sample app launches just fine. As soon as I include the parameter, the app crashes. \nI've attached a report with the latest electron beta. It also crashes with older/stable versions.\nCrashHardenedRuntime.txt\n. Hi @MarshallOfSound \nThis was the app I've used, it is the Electron quick start app from https://electronjs.org/\nClone the Quick Start repository\n$ git clone https://github.com/electron/electron-quick-start\nGo into the repository\n$ cd electron-quick-start\nInstall the dependencies and run\n$ npm install && npm start\nThe most basic electron app.. Hi @MarshallOfSound \nIs there any update on this ?\nThanks\nPooja. ",
    "HeroicosHM": "Thank you for your quick response.. For the record, the references with relative paths was the problem, and it works in the asar format as well.. ",
    "nilliu": "just in case somebody encounter same problem like I did, \nmy case was built failed with exactly same error in electron-vue,\nafter I comment out the icon attr in ./electron-vue/build.config.js,\ncan successfully build now. . ",
    "drdevelop": "@malept this is my code: \"electron-packager . checking --platform=win32 --out ../testApp-win --arch=x64 --electron-version=2.0.9 --icon=icons/dev.ico --overwrite\", \nI am executing this statement in the build command of the script field of package.json\nBut my npm run build is finished, the command line shows... and 1 more there is no reaction.. @malept this is Console all output \n\nelectron-packager . checking --platform=win32 --out ../testApp-win --arch=x64 --electron-version=2.0.9 --icon=icons/dev.ico --overwrite\n\n... and 1 more. @malept Is this the way to write \"build\": \"DEBUG=electron-packager&&electron-packager . checking --platform=win32 --out ./dist --arch=x64 --electron-version=2.0.9 --icon=icons /dev.ico --overwrite\", but if you write this, the packaging app for platform win32 x64 using electron v2.0.9 appears, and then nothing happens. Because i am use it in package.json\n. finally, show error \"rcedit.exe failed with exit code 1. Reserved header is not 0 or image type is not icon for 'i'\nFatal error: Unable to set icon\". @malept I found the problem with the icon icon, but my icon icon format is ico, the size is also 256*256, what is the reason? If the icon icon is not set, it can be packaged into an exe package.. ",
    "allexzander": "@malept You are right. I probably need to create issue in electron-builder repo. Removed my comment. Thx.. ",
    "rafaelcastrocouto": "Thanks for the advice. It all worked after changing to loadFile and a few changes in some paths.\nCheers!. ",
    "chenluu": "Hiya, please see below of the console output\n```\nc:\\code\\myapp>npm run package-win\n--\nmyapp@0.0.2 package-win c:\\code\\myapp\n electron-packager . myapp --overwrite --platform=win32 --asar --arch=ia32 --icon=assets/icons/win/icon.ico --prune=true --out=release-builds --version-string.CompanyName=BE --version-string.FileDescription=myapp --version-string.ProductName=\"myapp\"\nelectron-packager Electron Packager 13.0.0\n  electron-packager Node v8.9.4\n  electron-packager Host Operating system: win32 (x64) +0ms\n  electron-packager Packager Options: {\"_\":[\".\",\"myapp\"],\"deref-symlinks\":true,\"derefSymlinks\":true,\"download\":{\"strictSSL\":true,\"strict-ssl\":true},\"prune\":true,\"overwrite\":true,\"platform\":\"win32\",\"asar\":true,\"arch\":\"ia32\",\"icon\":\"assets/icons/win/icon.ico\",\"out\":\"release-builds\",\"version-string\":{\"CompanyName\":\"BE\",\"FileDescription\":\"myapp\",\"ProductName\":\"myapp\"},\"versionString\":{\"companyName\":\"BE\",\"fileDescription\":\"myapp\",\"productName\":\"myapp\"},\"dir\":\".\",\"name\":\"myapp\",\"protocols\":[]} +3ms\n  electron-packager Target Platforms: win32 +0ms\n  electron-packager Target Architectures: ia32 +0ms\n  electron-packager Inferring appVersion from version in c:\\code\\myapp\\package.json +0ms\n  electron-packager Inferring win32metadata.CompanyName from author in c:\\code\\myapp\\package.json +1ms\n  electron-packager Inferring target Electron version from electron in c:\\code\\myapp\\package.json +5ms\n  electron-packager Application name: myapp +27ms\n  electron-packager Target Electron version: 3.0.10 +0ms\n  electron-packager Ignored path regular expressions: [ '/\\.git($|/)', '/node_modules/\\.bin($|/)', '\\.o(bj)?$' ] +0ms\n  electron-packager Downloading Electron with options {\"strictSSL\":true,\"strict-ssl\":true,\"platform\":\"win32\",\"arch\":\"ia32\",\"version\":\"3.0.10\"} +0ms\n  electron-packager Removing release-builds\\myapp-win32-ia32 due to settingoverwrite: true +219ms Packaging app for platform win32 ia32 using electron v3.0.10\n  electron-packager Creating C:\\Users\\user\\AppData\\Local\\Temp\\electron-packager\\win32-ia32-template +49ms\n  electron-packager Extracting C:\\Users\\user\\AppData\\Local\\electron\\Cache\\electron-v3.0.10-win32-ia32.zip to C:\\Users\\user\\AppData\\Local\\Temp\\electron-packager\\win32-ia32-template +3ms\n  electron-packager Initializing app in C:\\Users\\user\\AppData\\Local\\Temp\\electron-packager\\win32-ia32\\myapp-win32-ia32 from C:\\Users\\user\\AppData\\Local\\Temp\\electron-packager\\win32-ia32-template template +0ms\n  electron-packager Ignored paths based on the out param: [ 'c:\\code\\myapp\\release-builds' ] +1s\n  electron-packager Running asar with the options {} +2s\n  electron-packager Renaming electron.exe to myapp.exe in C:\\Users\\user\\AppData\\Local\\Temp\\electron-packager\\win32-ia32\\myapp-win32-ia32 +1s\n  electron-packager Running rcedit with the options {\"version-string\":{\"FileDescription\":\"myapp\",\"InternalName\":\"myapp\",\"OriginalFilename\":\"myapp.exe\",\"ProductName\":\"myapp\",\"CompanyName\":\"BE\"},\"file-version\":\"0.0.2\",\"product-version\":\"0.0.2\",\"icon\":\"assets/icons/win/icon.ico\"} +0ms\n  electron-packager Moving C:\\Users\\user\\AppData\\Local\\Temp\\electron-packager\\win32-ia32\\myapp-win32-ia32 to release-builds\\myapp-win32-ia32 +552ms\n  Wrote new app to release-builds\\user-win32-ia32\n```. Hi, \nhere you go, just a plain app with nothing added using the electron-quick-start base.\nhttps://github.com/chenluu/testapp\nSee start scripts in package.json for the commands I'm running eg. npm run package-win, npm run package-mac\nSame issue. The first build is fine because the folder is empty, but then when i go to build for another OS it still includes the release builds folder.\nAt first I was wondering why each build for a different OS was getting incrementally (and ridiculously) larger. So then I ran the build without the --asar switch and saw the release-builds folder as part of the app.. ",
    "raviregina": "yes, i'm using puppeteer.\n\n\nI want instructions for windows and linux\n\n\nBut in OS X, the executable file working correctly\n. \n\n\ni got this error. \n\n",
    "skykingit": "hi ,here is the my command line:\nelectron-packager ./ name --platform=darwin --out ./app --app-version 1.0.1 --overwrite --icon=public/img/logo.hqx \nand the console log is :\n$ electron-packager ./ pwallet --platform=darwin --out ./app --app-version 1.0.1 --overwrite --icon=public/img/logo.hqx  DEBUG=electron-packager\nPackaging app for platform darwin x64 using electron v3.0.0\nWrote new app to app/pwallet-darwin-x64\n\u2728  Done in 15.43s.\nno error is here ,but when i open the app ,some css and javascript file is missing\ni open the app's package contents ,i found the missing files is empty file\n. sorry to bother you guys. \ni fixed the problem, the reason is the MAC's file permission Issue.\ni set 777 for the project files, everything is ok.\nbeacuse no error log show before , i miss the basic question, thanks again. ",
    "KSahithyan": "I bundled up the project with electron-packager .. This command didn't throw any errors. It bundled up the project, project is opening, js working good, html, css working good, but python is not working.\nI included python-shell module in the project too. I tried in a windows pc without python installed. it doesn't run python in the app.\nthen I tried in my ubuntu pc with python installed. it doesn't run python too.\nI am trying fix-path module. thank you for the information\nCan you give me the code for fix-path module?\nhow should I use that?. Uncaught PythonShellError: python3: can't open file 'python/factor.py': [Errno 2] No such file or directory\nat PythonShell.parseError (/home/sahith/Documents/Programming/Math/Math-linux-x64/resources/app/node_modules/python-shell/index.js:240:21)\nat terminateIfNeeded (/home/sahith/Documents/Programming/Math/Math-linux-x64/resources/app/node_modules/python-shell/index.js:121:32)\nat ChildProcess.<anonymous> (/home/sahith/Documents/Programming/Math/Math-linux-x64/resources/app/node_modules/python-shell/index.js:113:13)\nat ChildProcess.emit (events.js:182:13)\nat Process.ChildProcess._handle.onexit (internal/child_process.js:237:12)\n\nThese lines have been logged in console when running after build. ",
    "RailRunner166": "ah, thanks \ud83d\ude04 . also, that was really quick, thanks man :D. Is there a way i can re-open this, i upgraded to 11.2.1, and it continues to fail on the same step. \ud83d\ude1e \nLatest Build:\nhttps://travis-ci.org/RailRunner166/MyRPC/jobs/474518677. oof how do i upgrade it then?. i tried yarn upgrade... that didn't work\nwhat d i do? upgrade forge?. i can understand that, i'll look at that page. thanks! you guys are awesome, btw, i love what you guys do ;). ",
    "crashbdx": "Thanks for the reply.\nTried both, an administrator account and run \"electron-packager . --overwrite --platform=darwin --arch=x64 --icon=assets/build/mac/icon.icns --prune=true --out=release-builds\" from WSL but get the same error, here on WSL:\n`\nelectron-packager . --overwrite --platform=darwin --arch=x64 --icon=assets/build/mac/icon.icns --prune=true --out=release-builds\nPackaging app for platform darwin x64 using electron v3.0.7\nEPERM: operation not permitted, stat 'C:\\Users\\chris\\AppData\\Local\\Temp\\electron-packager\\darwin-x64\\signature-chain-darwin-x64\\chain.app\\Contents\\Frameworks\\Squirrel.framework\\Versions\\Current'\nWill try on another PC tomorow and see if it change something or else maybe an option is try a VM linux on windows to compile linux and mac, would this work ?. Linux and windows worked well, only mac make this issue.. Thanks for the help, will try VM ubuntu and see how it goes from there :). Getting a similare error with VM Ubuntu\nEROFS: read-only file system, symlink 'A' -> '/home/christophe/wallet/release-builds/chain-darwin-x64/chain.app/Contents/Frameworks/Squirrel.framework/Versions/Current'. Hum ok, seem that shared folder of virtualbox dont allow symlink, will try in non shared folder then. Ok thanks, if this is normal then all good. . Sorry to bother again, juste quick question, is it same on macos ? or im suppose to have the icon on macos ? Getting this for now: https://imgur.com/caxF5vn. ",
    "starsoccer": "@malept I understand that, I wasnt really expecting you to fully run it, more just to see the code as the guidelines say to provide some code. Would you prefer I make an barebones example of the issue using electron-quick-start?\nIve looking into the relative path issue a bit prior to posting this. The reason I dont think this is the issue is because the other css files Im using/referencing are loaded fine. So if it was path related I assume none of my css files would load not just font awesome. Upon further testing it seems the issue was not with relative path but was actually with a regex I was using to ignore .ts(typescript) files. For some reason it was I assume, breaking something related to font awesome. I am still not sure exactly what the issue was but upon removing the regex it works fine so I will just play around with it a bit more and see if I can get a work around.. ",
    "djbreen7": "Thanks @malept I'll give that a shot tonight.. Thanks again for the help @malept. That appears to be doing the trick. ",
    "ThadHouse": "mksnapshot is located at https://github.com/electron-archive/node-mksnapshot, which apparently in the electron archives. @malept can you take another look at this? I don't know who works in that org, but maybe someone in the electron group does. With it using a fixed version, this is a big problem, and if that dependency cannot be upgraded it should be removed.. ",
    "harish0507": "Worked after doing a clean npm install by removing node_modules and package-lock.json. ",
    "tonton-pixel": "Your package.jsonfile appears to make reference to \"electron-builder\", not \"electron-packager\". You'll probably get more appropriate answers by opening an issue in the relevant electron-userland/electron-builder repository, although the error message you're getting ('package.json' not found ?) may suggest a problem at a different level.... ",
    "jakobolsen618": "Sorry, I think I copied that as I was changing locations, will edit it. . ",
    "brandonhorst": "Seems reasonable to me! . ",
    "CoderSudaWuda": "Can I just create a repo of my app and send the link to you?. There is only one window, with 4 files. Package.json, startingPoint.js, mainWindow.html, and scriptForHTML.js. package.json ; sorry I was using phone. I initialized it with npm init. Ah ok, Ill do electron-packager package.json. If it doesnt work, Ill make a repo.. ",
    "Nikeron": "Linux only? Win32 will be alive? Are you seriously? \ud83d\udc4f. ",
    "spasma": "Github Shortcuts + an unconfigured yubico nano did this \ud83d\ude05. ",
    "shama": "I thought so as it didn't seem to call cb() which for the cli probably doesn't matter but if someone was using it as a lib they would want to know when the cb() was called.\n. ",
    "psxjpc": "True that :)\n. ",
    "dantwinkler": "Fixed.. Reverted this until the PR is accepted.. Did the maintainers of the electron project discuss give any timeline for arm64 support?. ",
    "MatthewTeolis": "@malept Is there a reason you chose console.error instead of console.info/console.log?\nWhen running in Maven and Jenkins, console.error creates a misleading error message (also displayed in red):\n[ERROR] Packaging app for platform win32 x64 using electron v1.6.10\nThis makes it look like the packager failed to package the app. "
}