{
    "tj": "mwahahha who is fixing readmes now!\n. LGTM\n. this is just my ocd but msg = msg || 'explicit failure' would be fine, doubt anyone will pass '0' etc\n. ",
    "rauchg": "Thanks Stephen\n. I wonder if we should do instead:\ndeep.equal ?\n. Are you talking about .equal ?\n. js\nexpect([1, 2]).to.eql([1, 2])\n. Is this something that you need for a lot of different projects/situations ?\n. I decided this would be best served by an expect.js extension: expect-almostEqual.js\nYou can simply extend Assertion by accessing it through expect#Assertion:\njs\nexpect.Assertion.prototype.almostEqual = function () {\n  // \u2026\n};\nThe main motivation is to only provide the minimum amount of utilities that can easily be remembered in the expect.js core.\nThanks a lot for the contribution!\n. How about:\njs\nexpect(fn).to.throwException(function (e) {\n  expect(e.message).to.match(/my message/);\n});\nThe idea is to be able to now get access to the exception object, but leverage the full set of expect.js utilities. The main reason behind this is that you don't need to learn lots of different possible syntaxes for a specific utility, in this case throwException.\nFor example, in addition to supporting the object/property validation like you suggested, we would also need to support regular expressions:\njs\nexpect(fn).to.throwException({ message: /test/ });\nBut then again you might want to check both the constructor and the message with a regular expression, and calling the function twice could mean changing state that renders the test useless.\njs\nexpect(fn).to.throwException(function (e) {\n  expect(e).to.be.an(RandomException);\n  expect(e.message).to.match(/test/);\n});\naddresses both use cases.\nFinally, since in my opinion checking message is what's most useful (in fact, we do that a lot in the should.js/expect.js tests), there's value to supporting:\njs\nexpect(fn).to.throwException(/test/);\n. I think this is useful consider the lack of Object.keys in IE, but potentially a little confusing, since we treat plain objects differently based on the presence of a numeric length key. Adding\n. Closed by d1a9689ea1af7502914638c9fe95a545fbde292b\n. Sorry, I literally just fixed this in accordance to my comment here:\nhttps://github.com/LearnBoost/expect.js/issues/9#issuecomment-3812714\nThanks for the pull!\n. See e73b50cebd09f02f674ee89e2eedbf5a9ecabda8\n. How about or? Would that make sense?\nexpect(result).to.be(3).or('incorrect result')\n. expect(result).to.be(3, 'incorrect result') or expect(result, 'incorrect result').to.be(3) ?\n. Ok in that case we just simply need to add it as a parameter to all the methods of the Assertion object.\n. I'm down. And docs\n. Thanks!\n. Thanks a lot @paulmillr \n. sorry about that @amasad \n. That eql thing sux.\n. Like, it depends on JSON. \n. \n. 0.2.0 out, thanks a lot @satazor \n```\n0.2.0 / 2012-10-19\n==================\n\nfix isRegExp bug in some edge cases\nadd closure to all assertion messages deferring costly inspects\n    until there is actually a failure\nfix make test for recent mochas\nadd inspect() case for DOM elements\nrelax failure msg null check\nadd explicit failure through expect().fail()\nclarified all empty functionality in README example\nadded docs for throwException fn/regexp signatures\n``\n. Fixed through another PR\n. See: https://github.com/LearnBoost/expect.js/pull/92\n. Thanks @hotchemi can you please rebase so that I can merge?\n. ![image](https://f.cloud.github.com/assets/13041/639430/f427d6ba-d2d2-11e2-80fa-130589fd331d.png)\n. Thanks a lot @hotchemi \n. I like it. MaybewithArgsthough?\n. @timshadel flawless \u2013 thanks a lot\n. +1\n. I like solution #1.\n. I do have to go through the pull requests but the key is that commit activity has nothing to do with the reliability of a testing helper. The only issue that caught my eye lately is #55. Please let me know which ones you need the most.\n. Down forthrowalias.\n. Duplicate\n. It is a function\n. +1\n. Fixed in 0.3.1\n. +1\n. I'm down for keeping the number of passed assertions around, but not theconsole.log. Switched toindex.js.componentshould fallback to readingpackage.jsonand assumingindex.jsis the main script. Most modules should only have one file anyways, so declaring a list of scripts forcomponentshould be the exception, not the rule.\n.0.3.0` out.\n. Not really \u2013 I don't think expect.js is the right solution to the problem anymore. Will do a writeup soon to announce my new take on this problem.\n. I'll post it here so stay subscribed\n. I don't get why we need to have a return value if the way assertion libraries work is by throwing in the case of an error.\n\nFor reference in node core:\n```\n\nrequire('assert')(true)\nundefined\n``\n. I think this would add a lot of complexity to the codebase, and ultimately be too magical and confusing for a testing library.\n. What are the main bugs you'd like to see fixed? We use this for socket.io and engine.io and never run into issues.\n. http://www.devthought.com/2014/02/26/the-modular-approach-to-testing/\n. \"exist\" seems hard to define in JS. Arguably the only thing that doesn't _exist_ isundefined.\n. Fixed by a different PR\n. +1. Thanks! Please rebase.\n. Nothing in the name (property) implies loose equality checks :\\ For situations like this you can just useeqland pass thevalmanually.\n. Also the fact that we can pass, val` is kinda weird anyways.\n. Fixed\n. remove please\n. ?\n. \n",
    "malkomalko": "I think .eql by default should be a deep equal..  this has bitten me a number of times in tests.\nchai currently has this setup for deep equality through their eql matcher.\nthoughts?\n. I'm saying I like chai's approach. equal is strict equality and eql is deep equality.  I can't remember the last time I cared about loose equality.\nThat's just my opinion I guess, but I'm wondering your thoughts.\n. foot in mouth\nI'll be darned.. I could've sworn I tested this just the other day and eql wasn't working for deeply nested objects.  Sorry!\n. ",
    "skeggse": "Agree with @guille on .deep.equal.\n. That sounds good to me.\n. > Furthermore I think it would be more readable to write\n\nexpect(fn).to.throwException(SyntaxError)\n\n@jhnns this syntax adds ambiguity, as it's not clear if this should check if fn throws a SyntaxError or another error which inherits from SyntaxError. That said, it is a much nicer syntax than dealing with a function or a regex for the error message.\nAlso suggest adding a syntax to specify the exact expected error message.\njs\nexpect(function() {\n  throw new Error('This should fail');\n}).to.throwException('This should fail');\nRelates to #63.\n. The problem I see with the approach of adding a msg function to the toolkit is that it would have to come before the final clause to work intuitively.\njs\n// when equal() is called, if the assertion fails it will throw an error\n// immediately, meaning that msg() will never evaluate\nexpect(43).to.equal(42).msg('43 is not the answer');\nThat said, the syntax is rather nice. It seems like adding a message parameter to all of the assertion methods would work well, and falls in line with other assertion toolkits.\n. > The problem I see is that you'd have to manually reset it if you hadn't used it in a few test cases. Where you are using separate assertion and test libraries, I think a better way of monitoring the number of times a callback is called is with a counter in the callback, or with a decent mocking framework.\nYep. Another option would be to integrate a lightweight spy, like in Jasmine or Sinon. Personally, I like this option better, because it gives you more control.\n. @piuccio how about adding an expect().to.have.properties() assertion? This follows from expect().to.have.property(name, [value]), just with the ability to provide an object to properties().\n. @abbakym could you squash these commits? It's pretty straightforward.\nMore info about git and rebasing/squashing:\n- https://help.github.com/articles/interactive-rebase\n- http://stackoverflow.com/questions/5189560/\n. Expect.js is based upon Should.js, while Chai is its own thing.\n. How exactly would you like it to fail?\n. To my knowledge, Expect.js is designed to be used in unit tests. Generally, those unit tests are not included in the actual code, but in separate files that vary with project structure, and if that is the case then you should just not include the tests in your production packaged code. This doesn't really seem like a good feature for Expect.js.\n. Checking for cyclic data equality would be difficult and likely expensive, but absolutely useful.\n. The first API is pretty nice, I'd go for that. The second I'm not so sure about, given how Expect.js works internally. It would require a fairly major restructuring of the codebase, and wouldn't add a whole lot.\n. Kinda.  It works in all use cases I've found.  Properties of objects seem to be exempt from certain rules.\n. Just look at should.js.  It includes throw in its api, but aliases it as throwError for those running jshint in strict mode.\n. LGTM, though would it not make more sense to test the function throwing in the opposite order?\njs\nexpect(function () { throw 'foo'; }).to.be.a('function').and.to.throwError();\nIf the object is not a function, it would just fail when attempting to invoke it, no?\n. Yeah, I got that, but I'm not sure what real use-case it has. It seems to me like you'd verify the function meets other expectations before you invoke it. Not saying this shouldn't be added, it looks like a nice addition.\n. > However, I think API self-consistency is sufficient justification for a change like this; I don't think one needs to come up with a good use case for said consistency. It's the opposite\u2014it is the inconsistencies within an API\u2014that need justification through concrete examples.\nHa! Well said :smiley: \n. That is correct. However, it feels like expect should support swapping have and only.\n. LGTM, though it does sorta ruin the original syntactic style (no personal preference).\n. A regex works fine in many cases, but sometimes I need to programmatically check the start or end of a string, rather than checking the string against a constant regular expression.\n. ",
    "magwo": "Yes, for me it is used in data-driven UIs of grid types that are zoomable and so on. Also, game or graphics projects often have scenarios involving a lot of floating-point calculations, where a test typically will use these almostEqual assertions.\n. ",
    "TooTallNate": "I like the idea actually. @guille, if you look at the tests on the main app, we did something similar, but more ghetto. This is nice and explicit though.\n. hahahah\n. ",
    "fschwiet": "It took me awhile to process Guille's response, so more explicitly this is what people need to add in order to use expect(a).to.be.almostEqual(b [, delta])\n```\n expect.Assertion.prototype.almostEqual = function (obj, maxDiff) {\n var allowedDiff = maxDiff;\n if(typeof(allowedDiff)==\"undefined\") {\n     allowedDiff = 0.0001;\n }\n allowedDiff = Math.abs(allowedDiff);\n\n return this.within(obj - allowedDiff, obj + allowedDiff);\n\n};\n```\nI think this the preferable way to validate floating point calculations compared to .within(), so I'd prefer this to be in expect.js.\n. ",
    "vlazzle": "bump :)\n. ",
    "satazor": "Maybe something like:\nthrowError() <- standard, will catch Error\nthrowError(ReferenceError) <- will catch only ReferenceErrors\nthrowError({ type: ReferenceError, message: 'Some Message', code: 'some_code' });\nWhen using an object literal, everything is optional:\n- type defaults to Error\n- message defaults no null (all messages will be caught)\n- code defaults to null (all codes will be caught)\nBoth message and code can be a string or a regex, so it gives us the possibility to catch more dynamic errors as mentioned above.\nIf you guys agree with this syntax, I will be glad to implement it myself and make a pull request.\n. Totally agree on that one.\n. //cc @guille @visionmedia\n. Thanks @guille !\n. @guille can you bump the package version in npm?\n. ",
    "weepy": "Understood. It's more useful to be able to check if an object is empty than an array, since you can already check that .length is zero.\nAlternatively you could add expect(obj).keys.to.be.empty()\n. ",
    "paulmillr": "/cc @guille \n. lol, nice.\nno problem\n. Fixed by my #31.\n. closing issue as invalid\n. @guille review please. Chai merged the change in chaijs/chai#92\n. ",
    "jhnns": "Furthermore I think it would be more readable to write\njavascript\nexpect(fn).to.throwException(SyntaxError)\n. +1\n. :+1:\n. Since mocha is a popular test runner, this should really be part of expect.js. I'm tired of starring at the console to find the difference.\n. Awesome, thx! :+1: \n. ",
    "tricknotes": "Fixed in db0f8904973e880d8e59422e56d9de123147df92.\n. ",
    "abrkn": "+1\n. +1\n. ",
    "aseemk": "+1\n. Would love this too, and as an extra parameter to the assertion method makes sense to me too.\nNot sure how you would be able to chain after the assertion -- the assertion would fail, but it wouldn't be able to throw right away since it doesn't know the message yet. When would it throw then? On msg()? But what if msg() is never called? Etc.\n. @guille, I might be able to whip up a PR to add an extra message param to all assertion methods in the next couple of weeks. Would you like me to?\n. Sorry, I never got around to this. FYI though that the version of expect in Chai.js supports custom messages \u2014\u00a0and in a useful way (i.e. with the assertion message too):\nhttp://chaijs.com/guide/styles/#expect\n\nExpect also allows you to include arbitrary messages to prepend to any failed assertions that might occur.\n``` js\nvar answer = 43;\n// AssertionError: expected 43 to equal 42.\nexpect(answer).to.equal(42); \n// AssertionError: topic [answer]: expected 43 to equal 42.\nexpect(answer, 'topic [answer]').to.equal(42);\n```\n\nThe only thing I don't like about Chai's expect is that its simple assertions (e.g. .ok, .truthy, etc.) are properties rather than methods. That's a major bummer in my mind, but alas.\nEdit: that has been fixed in recent versions of Chai \u2014\u00a0those things can be called as methods now!\n. @guileen: I moved to Chai, which already supports this. See https://github.com/Automattic/expect.js/issues/18#issuecomment-27189362. =)\n. +1\n. +1\n. Yep, we use both Chai and expect.js in our app. (We'd like to consolidate on one, but several of the APIs are different, so we haven't prioritized updating all of our existing tests.)\n. Love your suggestion, @dkillebrew. +1 from me.\n. Sorry, I didn't mean to do this. I used GitHub's online editor; it must have done this automatically.\n. ",
    "wnr": "+1\n. I would like to see this functionality also. Trying to compare two objects that contain functions will fail right now with the loose equality checking. It would be nicer to be able to skip functions while checking objects, or even better as your proposed function equality checking.\n. ",
    "JamesMGreene": "+1 for the .msg(\"custom message\") chain on the end, if it's possible \u2014 I'm thinking it may have to be put into the assertion function call instead but I haven't verified in the code.  That said, I think I would probably prefer that the custom message gets added to the existing message that expect.js already formulates for us.\nThis is actually somewhat of a pain point for me in terms of not being able to convey enough useful information when tests fail while in a loop \u2014 usually I note the index or item being iterated over in my custom failure messages.  It makes reproducing it take a bit longer as I have to either add console logging or step through it with a debugger to find the point of failure.\n. Seems confusing to me. It makes me think of logical OR, such that it would be doing the following:\nresult === 3 || result === 'incorrect result'\n. Agreed, at the end IF it can't be chained as a separate .msg(...) function at the very end. Understandable if it cannot be chained.\n. ",
    "thejohnfreeman": "My preference is for the message at the end, as a parameter to the final chained flag.\n. ",
    "jamesshore": "+1\n. Chai's a great tool, but it doesn't work in IE 8\u2014that's why I use expect.js. :-)\n. ",
    "eddyystop": "+1\n. ",
    "sophietk": "+1 expect(that).to.be.ok().msg(\"oh well\"); would be helpful:\n- when you read again the test, and try to understand it\n- when you run the tests, and see the results in console: message could turn red in case of error\n. ",
    "onedayitwillmake": "+1 - Right now if you check for example a jquery object for being empty, you get this giant bomb in your console window. This would so be the right solve for that.\nI mean we're throwing errors so having an error msg makes sense\n. Currently I'm using this to disable expect.js on production. It's working well for my needs, in case any one wants to use it.\n```\n/*\n * Makes all expect.js calls a noop\n * This is used on production\n /\ndisableExpectjs: function(){\nwindow.expect = function(){ return window.expect; }\n  var flags = {\n    not: ['to', 'be', 'have', 'include', 'only', 'equal']\n    , to: ['be', 'have', 'include', 'only', 'not']\n    , only: ['have']\n    , have: ['own', 'property']\n    , be: ['an', 'ok', 'empty', 'a']\n  };\nfor(var key in flags ) {\n    if( !flags.hasOwnProperty( key ) ) continue;\n    window.expect[key] = window.expect;\n    for(var i = 0; i < flags[key].length;i++) {\n      window.expect[ key] [ flags[key][i] ] = window.expect;\n    }\n  }\n},\n```\n. ",
    "wachunga": "+1\n. ",
    "KyleGobel": "this was brought up a year go, any progress on anything?  I wouldn't even care if i had to do \nexpect.errorMessage(\"x object didn't exist\");\nexpect(x).to.be.ok();\nexpect.errorMessage().clear();\nor something, I don't care if it even makes sense, i just want some sort of functionality to add information to failing tests.\n. ",
    "djuretic": "+1\n. ",
    "machineghost": ":+1: \n. BTW, if anyone out there is tired of waiting for an official implementation (it has been 2+ years ...), this feature is pretty easy to add yourself.  Just ...\n!) Run the following code anywhere after you load expect.js (but before running your tests):\nexpect.Assertion.prototype.withMessage = function (message) {\n        this.message = this.to.message = message;\n        return this;\n    }\n    expect.Assertion.prototype.assert = function (truth, msg, error) {\n        var msg = this.message  || this.flags.not ? error.call(this) : msg.call(this),\n            ok = this.flags.not ? !truth : truth;\n        if (!ok) {\n            throw new Error(this.message);\n        }\n        this.and = new expect.Assertion(this.obj);\n    };\n2) Add a call to \"withMessage\" (passing in your message) before the assertion part of your expect statement.  For instance:\nexpect(false).withMessage('foo').be(true);\nHope that helps someone.\nP.S. expect.js developers, I'd be happy to submit a pull request if you'd like to add this code officially.\n. ",
    "holic": ":+1: \n. ",
    "jifeon": "@rauchg Any news here? It would be great feature!\n. ",
    "guileen": "@aseemk :+1:  Any news?\n. ",
    "guy-mograbi-at-gigaspaces": "+1 - we really need it. we have multiple expects in a single it, and we're using browserify - so the line number changes.. \nit is nearly impossible to understand what failed.. we really need this feature. currently using the work around suggested above. If this is so simple to implement I can't understand what's the hold up. \n. FYI - we found we need to tweak the code above. this is our version. \n// add custom message to expect.js\n// https://github.com/Automattic/expect.js/issues/18\nexpect.Assertion.prototype.withMessage = function (message) {\n    this.message = message;\n    return this;\n};\nexpect.Assertion.prototype.origAssert = expect.Assertion.prototype.assert;\nexpect.Assertion.prototype.assert = function (truth, msg, error, expected) {\n    try {\n        this.origAssert( truth, msg, error, expected);\n    }catch(e){\n        if ( this.message ){\n            throw new Error(this.message);\n        }\n        throw e;\n    }\n};\nHowever this is not a pull request level code, but it works. \nfor example expect(1+1).to.withMessage('wrong result').be(3); - with message must come before the last once in the chain. not as pretty as we'd like. \n. @rafis try: to.withMessage('message').be.ok() - not as clean, but works for us so far. \n. ",
    "rikurb8": "Would be real nice :+1:\n. ",
    "rafis": "@guy-mograbi-at-gigaspaces, doesn't work with .withMessage('message').to.be.ok() and .withMessage('message').to.be.an(Object) and similiar.\nMeanwhile you can use:\ntry {\n  expect(obj).to.be.an(Object);\n} catch(err) {\n  expect().fail('My custom error message ' + expect.stringify(obj));\n}\n. Another variant:\njavascript\nexpect.Assertion.prototype.stringOrArrayOfStrings = function() {\n    var ok;\n    if (typeof this.obj == 'string') {\n        ok = true;\n    } else if (this.obj instanceof Array) {\n        ok = true;\n        for(var i = 0; i < this.obj.length; ++i) {\n            if (typeof this.obj[i] != 'string') {\n                ok = false;\n                break;\n            }\n        }\n    } else {\n        ok = false;\n    }\n    this.assert(ok, function() {\n        return 'expected ' + expect.stringify(this.obj) + ' to be a string or an array of strings';\n    }, function() {\n        return 'expected ' + expect.stringify(this.obj) + ' to not be a string or an array of strings';\n    });\n};\nexpect(config.session.secret).to.be.stringOrArrayOfStrings();\n. ",
    "StreetStrider": ":+1: for .msg().\nThe workaround to achieve this functionality is quite ugly.\n. ",
    "SCLeoX": "+10\nSince +1 not work well\n. ",
    "tortila": ":+1: \n. ",
    "truongsinh": "@tmont  What Chrome version were you using? I cannot reproduce the error with your test case. It's been 2 years anyway!\n. Please add unit test case(s) for this feature.\n. @abbakym  What browser and version were you using? I cannot reproduce the error with your test case\n. \"for some reason\" is that you should change https://raw2.github.com/LearnBoost/expect.js/master/index.js to https://rawgithub.com/LearnBoost/expect.js/master/index.js . Long story short, security mime. After that it works fine on Chrome. I'll try FF in a minute.\n. Some thing todo with objEquiv, which is taken from Nodejs' util i guess\n. Please add your unit test case(s). Anyway, I think that \"plugin\" interface (like Chai's) is a better approach for the problem your are trying to solve.\n. @jkroso fixed at 2f085fe\n. @skeggse skeggse I agree that there should be \"throw\" alias, as the only environment where throw (or try, catch, finally, as in Q promise) does not work is EcmaScript 3, i.e 8.\nHowever, can you add a test case for this (please refer to https://github.com/truongsinh/expect , Section contribution, article 1)\n. @gabalafou I agree that this should be documented. I think it is not about the API self-consistency, but good habit. The lib makes developer do the good way;  .ok and .throwException should be terminal flag\n. https://github.com/truongsinh/expect/blob/master/README.md Should it be in core or in a plugin?\n. You don't have to use closure for normal functions, just use withArgs. However, closure is a must for methods. Should we have a plugin for this? \n. Can you please add a test case for this bug?\n. Instead of using \"startWith\" and \"endWith\", why don't we use regex for more general cases?\n. https://github.com/truongsinh/expect/ in this fork I pumb version to 0.3.0-dev, as we have more APIs and are about to implement plugin mechanism.\n. you probably mean\n-    expect(obj).to.eql(obj);\n+    expect(three).to.eql(four);\n. Fixed at 9d3485a\n. related to https://github.com/LearnBoost/expect.js/pull/45 , I merged and change to bower.json\n. related to https://github.com/LearnBoost/expect.js/pull/87 , I pumped version to 0.3.0-dev\n. modified and landed f1f1d82\n. Duplicated of https://github.com/LearnBoost/expect.js/pull/84, which landed at 0211496\n. +1, i'm waiting for opinion on https://github.com/LearnBoost/expect.js/issues/98 , otherwise in 24 hours I'll decide on my own and begin to contact other PR authors to call for a take over.\n. @HarryPehkonen true! the only reason I don't use chai is because it only support IE9+\n. https://github.com/truongsinh/expect I have been lately working on this fork. Please read \"read me\" and history.md for more info, as there are breaking changes. I will now start asking for npm and bower package name.\n. @guille are you asking me or others? For others, as said, this codebase has been abandoned for 8 months, until hours ago (thanks for getting back after my email, though), however there are still open 14 PRs, most of which are fixes, with test case provided. For I myself, I found it is hard to extend expect, because of its structure, you can take a look @ my fork's Readme.\nAnyway, I'm happy that you come back.\n. @guille ping, any write up? You said in another issue that you believed expect.js is no longer the solution. However, I and many people here find this the only one supporting IE8 (by scarifying the extendability, like of chaijs's, but I rewrite it in my fork).\n. ",
    "tmont": "I have no idea what Chrome version I was using. Whatever it was two years ago :)\n. ",
    "whastings": "I ran into a similar situation today when testing a method that returns a HTMLElement which happens to have a form with a hidden input as a sibling:\nError: Failed to read the 'selectionDirection' property from 'HTMLInputElement': The input element's type ('hidden') does not support selection. at Error (native) at http://172.21.88.61:2013/temp/test/1/lib/expect.js:634:34 at Array.map (native) at map (http://172.21.88.61:2013/temp/test/1/lib/expect.js:739:34) at format (http://172.21.88.61:2013/temp/test/1/lib/expect.js:615:20) at http://172.21.88.61:2013/temp/test/1/lib/expect.js:638:21 at Array.map (native) at map (http://172.21.88.61:2013/temp/test/1/lib/expect.js:739:34) at format (http://172.21.88.61:2013/temp/test/1/lib/expect.js:615:20) at http://172.21.88.61:2013/temp/test/1/lib/expect.js:638:21\nI think expect's i() inspecting function loops recursively through the element its passed, eventually reaching the hidden input, which as an own property selectionDirection. But when it tries to read this property, the browser throws an error.\nYou can reproduce this in the browser console:\nvar test = document.createElement('input');\ntest.setAttribute('type', 'hidden');\ntest.selectionDirection;\nUncaught DOMException: Failed to read the 'selectionDirection' property from 'HTMLInputElement': The input element's type ('hidden') does not support selection.\nI'm using Chrome 38 and expect 0.1.2.\n. Seems like this won't be an issue anymore if I upgrade, since newer versions handle inspecting HTMLElements specially.\n. ",
    "nathanmacinnes": "Like this:\njavascript\nexpect (o).to.exist();\n. The problem I see is that you'd have to manually reset it if you hadn't used it in a few test cases. Where you are using separate assertion and test libraries, I think a better way of monitoring the number of times a callback is called is with a counter in the callback, or with a decent mocking framework.\n. Apologies for double-post. See issue #29.\n. My expectation is the current behaviour, but I can see an argument for either. I have submitted pull request #123 which allows syntax like this:\njs\nexpect(object).to.have.property(key).which.eql(value);\nBut I think the original author has ceased development on this project. I'm considering my own fork.\n. ",
    "amasad": "Is this project dead?\n. finally! #23 was sitting there for two months. tweeting, emailing etc. \n. ",
    "EvanHahn": "I forked this project and created Expecting.js, which has this feature. See my comment on #86 for more.\n. #136 had the same question, and I agree with it.\nI made a fork called expecting.js which should fix this problem, if you're interested. I realize it's a few years too late, but maybe it'll help!\n. Because this module wasn't being updated, I forked this and created Expecting.js which I intend to maintain. I added this functionality, so these two lines are equivalent:\njs\nexpect(1).to.be.between(0, 10)\nexpect(1).to.be.within(0, 10)\nIt's years late but I hope it can help!\n. I forked this and created Expecting.js which I intend to maintain.\n. This project wasn't being maintained so I forked this project and made expecting.js, which supports what you're asking for:\n``` js\nexpect(1).to.be.greaterThanOrEqualTo(2)\nexpect(1).to.be.greaterThanOrEqualTo(1)\nexpect(2).to.be.lessThanOrEqualTo(3)\nexpect(2).to.be.lessThanOrEqualTo(2)\n```\nI realize it's over a year late, but I hope this can help.\n. This project wasn't being maintained so I forked this project and created expecting.js. It supports this kind of thing fully:\njs\nexpect(file).to.be.a(Buffer)\nHope this can help!\n. My fork Expecting.js has this change, if you're interested.\n. That's what I assumed, too\u2014seems a bit odd.\nI made a fork called expecting.js which should fix this problem, if you're interested.\n. I forked this project and created expecting.js. It has support for Sets, if you're interested.\nHope this can help!\n. I forked this and created Expecting.js which I intend to maintain.\n. ",
    "piuccio": "+1\nI'd be nice to have\n``` js\nvar resp = {\n  one : 1,\n  two : 2,\n  three : 3\n};\nexpect(resp).to.contain({\n  one: 1,\n  two : 2\n});  // true\nexpect(resp).not.to.contain({\n  three: \"not a number\"\n});  // true (.not)\n```\nIt's a more readable way of saying\njs\nexpect(resp).to.have.keys(\"one\", \"two\");\nexpect(resp.one).to.be(1);\nexpect(resp.two).to.be(2);\n. Are you calling\njs\nthrow AbstractMethodError();\ninstead of \njs\nthrow new AbstractMethodError();\n?\nIt's definitely something related to the value of this inside the message contructor\n. :cry: that's what I believe too.\n. ",
    "doctyper": "+1\n. ",
    "hurrymaplelad": "+1\n. ",
    "millermedeiros": "was about to make a very similar pull request but instead of passing a 4th argument I added a new private property to the Assertion - this._expected = obj;\n. just to document my changes (which are simpler BTW):\n``` diff\ndiff --git a/expect.js b/expect.js\nindex 58c7049..8c08191 100644\n--- a/expect.js\n+++ b/expect.js\n@@ -96,7 +96,12 @@\n       , ok = this.flags.not ? !truth : truth;\n if (!ok) {\n\n\nthrow new Error(msg.call(this));\nvar err = new Error(msg.call(this));\nif ('_expected' in this) {\nerr.expected = this._expected;\nerr.actual = this.obj;\n}\n\nthrow err;\n     }\nthis.and = new Assertion(this.obj);\n@@ -197,6 +202,7 @@\n\n\nAssertion.prototype.be =\n   Assertion.prototype.equal = function (obj) {\n+    this._expected = obj;\n     this.assert(\n         obj === this.obj\n       , function(){ return 'expected ' + i(this.obj) + ' to equal ' + i(obj) }\n@@ -211,6 +217,7 @@\n    */\nAssertion.prototype.eql = function (obj) {\n+    this._expected = obj;\n     this.assert(\n         expect.eql(obj, this.obj)\n       , function(){ return 'expected ' + i(this.obj) + ' to sort of equal ' + i(obj) }\n@@ -1251,3 +1258,4 @@\n   , 'undefined' != typeof module ? module : {}\n   , 'undefined' != typeof exports ? exports : {}\n );\n+\n```\n. any news about this issue?\nI ended up monkey-patching expect.js before running any of the tests, that way I avoid maintaining my own fork and make clear that I edited the code:\n``` js\n// monkey-patch expect.js for better diffs on mocha\n// see: https://github.com/LearnBoost/expect.js/pull/34\nvar expect = require('expect.js');\nvar origBe = expect.Assertion.prototype.be;\nexpect.Assertion.prototype.be =\nexpect.Assertion.prototype.equal = function(obj){\n    this._expected = obj;\n    origBe.call(this, obj);\n};\nexpect.Assertion.prototype.assert = function (truth, msg, error) {\n    msg = this.flags.not ? error : msg;\n    var ok = this.flags.not ? !truth : truth;\n    if (!ok) {\n        var err = new Error(msg.call(this));\n        if ('_expected' in this) {\n            err.expected = this._expected;\n            err.actual = this.obj;\n        }\n        throw err;\n    }\n    this.and = new expect.Assertion(this.obj);\n};\n```\n. ",
    "switz": "+1\n. ",
    "givankin": "@skeggse done, thanks!\n. @truongsinh, I see this with latest expect.js in all modern browsers (re-checked in FF just now, Chrome and IE choke on the Fiddle for some reason). See http://jsfiddle.net/Hq8eK/1/. Just open the console and see:\nError: expected [ {}, {} ] to sort of not equal [ <c></c>, <d></d> ]\nNote that the test in my initial comment will pass, but it shouldn't do so. Maybe this confused you.\n. ",
    "aearly": "Also running into this issue.  Currently working around it by passing a function to .fail()\n. Even simpler workaround:\njavascript\nthrow new Error(\"Custom failure message\");\n//...\n...or in an async function, for example:\njavascript\nsomeAsyncFunc(function (err, result) {\n  if (err) { throw err; }\n  //...\n}\nI just realized that the fail() function is actually superfluous.\n. ",
    "pghalliday": "@aearly that may be a workaround but what I'm submitting here is a fix. It may be true that the fail function is superfluous but the unit tests don't pass last time I checked which I see as a bigger problem\n. This constitutes the whole fix, tbh - the other changes are just to get the tests to run on windows (which was required for me to validate the fix)\n. ",
    "Rob--W": "Please accept this PR, or correct the documentation. The inconsistency between code and documentation causes time to be wasted.\n. ",
    "acjay": "@guille Which PR? I just ran into the same issue in the latest version I pulled from NPM\n. ",
    "pocesar": "yup, still not working. it's passing a string to the assert function trying to make a msg.call in there. expect.js seem abandoned. \n. @LearnBoost ping\n. npm allows you to install from a git repo, although not ideal\njson\n{\n  \"devDependencies\": {\n    \"expect.js\":\"git://github.com/LearnBoost/expect.js.git#master\"\n  }\n}\n. ",
    "popomore": "ea6792e Just for reference problem when $flags has two functions and more\n. ",
    "nfroidure": "Having the same issue here https://github.com/nfroidure/gulp-insert/blob/master/test/gulp-insert-test.js\n```\n  \u2716 1 of 4 tests failed:\n1) Append appends the string onto the file:\n     Error: global leak detected: opts\n      at Runner.checkGlobals (/usr/local/lib/node_modules/mocha/lib/runner.js:169:21)\n      at Runner. (/usr/local/lib/node_modules/mocha/lib/runner.js:58:44)\n```\nThere is no opts symbol in the whole project so i assume it comes from expect.js\n. Finally it looks like the leak came from readable-stream. Sorry for the noise.\n. ",
    "semperos": "Haven't touched or looked at this in a long time, closing.\n. ",
    "scips": "+1\n. ",
    "robdodson": "OK so yeah this was user error. I didn't realize that chai's version of expect and the one hosted here have different APIs. Is there a relationship between the two libraries? Or is chai just running its own fork of expect?\n. ",
    "jaredly": "+1\n. +1\n. Actually, it looks like they just haven't made a new release since it was added ... 3 months ago.\n. ",
    "marcelklehr": "+1\n. please just pull this. It would make my life a little easier, right now :)\n. ",
    "dominicbarnes": "Any chance we can get this merged in?\n. ",
    "NotMyself": "Blah, please disregard. Name of module is expect.js nto expect...\n. ",
    "adi2412": "Hi, how did you resolve this issue? I gave the absolute path and have tried just writing expect.js but it gives the error in both cases.\n. ",
    "stripathi": "I have installed the expect and  still getting the error when testing through mocha (with abs path and also by using the expect and expect.js).\n/node_modules/expect/expect.js:17\n  expect.version = '0.0.2';\n. ",
    "qidonna": "I had the same the problem and fixed it by installing expect by \"npm install expect.js\" instead of \"npm install expect\", then require the module from local\n. ",
    "monolithed": "+1\n. ",
    "marcandre": "Came here looking for just that.\nWould a good PR for this feature be accepted?\nMmm. No commit for years. Time to look for another lib \u2639\ufe0f . ",
    "hotchemi": "Sorry, I rebased it.\n. OK?\n. Sorry, fixed.\n. I thank you, too!\n. fixed it.\n. ",
    "timshadel": "Done. Updated README.md, expect.js, and test/expect.js to all use withArgs. All squashed to keep the history clean, and rebased on the current master. Let me know if you'd like anything else.\nThanks!\n. Fantastic. Thanks!! :-)\n. ",
    "ELLIOTTCABLE": "To boot, there's literally no way of doing this in CoffeeScript (see: jashkenas/coffee-script#1693) that isn't half-a-line-long, as it compiles == into ===, and provides no coercive operator at all.\nThis is completely unacceptable:\nexpect( (new String 'foo').valueOf() == 'foo' ).to.be.ok()\n. ",
    "calvino": "I agree. I just ran into this problem today and it's really unacceptable that CoffeeScript can't handle boxed type comparisons and also completely removed type coercion. At the very least, double equals in CoffeeScript should treat a new String as a 'string.'\n. ",
    "twpayne": "Thanks for the info. Is there any plan to merge or close the open pull requests? Some of them have been open for over a year with no comments.\n. ",
    "rtlong": "throw is a reserved word in JS.\n. ",
    "gabalafou": "No, because that does not demonstrate that .throwError now allows chaining. You need to have .throwError().and\nBoth additions to the unit test code that I made were to demonstrate that chaining now works after invocations to .throwError and .ok\n. I added chaining to .throwError because I had written a test that utilized such chaining for some real world code where I work. However, I don't remember what that test line looked like, nor if it was actually a good use case. :-)\nHowever, I think API self-consistency is sufficient justification for a change like this; I don't think one needs to come up with a good use case for said consistency. It's the opposite\u2014it is the inconsistencies within an API\u2014that need justification through concrete examples. \nAnd in expect.js, every other Assertion method is chainable because every other Assertion method returns this. If .throwError and .ok are going to break from this pattern, then there should be a really good reason for it, and it ought to be documented.\n. Why should .ok, .throw, .empty, and .fail be terminal? Why is that good habit?\n. ",
    "badray": "I also have this issue with expect.js installed from npm.\nVersion from npm seems to be defective. I look into source and there is no withArgs declaration. The repo version has it. I've just downloaded expect.js file from this repo, replaced it and it works, so this is temporary solution.\nMD5 (repo version) = 747992059c95f27351039870e30d7634\nMD5 (npm version) = 3f43d4cfa0c5cb5301f15d8191e23276\n. ",
    "danactive": "Agreed npm needs updating. Please publish withArgs public method\n. +1\n. ",
    "ama-ch": "+1\n. ",
    "superkhau": "^\n. doesn't work for me, getting some npm error. tried your way too.\n\"expect.js\": \"https://github.com/LearnBoost/expect.js.git#master\"\n. That makes no sense. I want loose equality so I'm using .eql instead of be/equal. According to the README:\nbe / equal: asserts === equality\neql: asserts loose equality that works with objects\nUnless I'm reading the README wrong, eql asserts LOOSE equality.  Try plain Javascript without expect. null == undefined // true\n. ^\n. thanks for the update, looking forward to your new writeup\n. ",
    "anko": "What documentation do you mean? README.md gives these examples:\nexpect({ a: 'b' }).to.have.key('a');\nexpect({ a: 'b', c: 'd' }).to.only.have.keys('a', 'c');\nexpect({ a: 'b', c: 'd' }).to.only.have.keys(['a', 'c']);\nexpect({ a: 'b', c: 'd' }).to.not.only.have.key('a');\nIt makes no mention of .to.have.only.\nI haven't checked whether the documentation has changed since this issue though.\n. ",
    "jshemas": "+1\n. +1\n. ",
    "ForbesLindesay": "I've submitted #91 which maintains the original (slightly wacky) style.\n. ",
    "laurelnaiad": "That's what's in the source file.  Granted -- it looks like it is a mistake (in the file, not the npm registration) -- but is it stopping npm from fetching the version that has the features you want?\n. I guess there are two problems, then?\n- withArgs() is in the master branch which has exports.version = 0.1.2 and a package.json version of 0.2.0;\n- npm has a different version registered that claims to be 0.2.0 and doesn't have withArgs() in it?\n. ",
    "deepwell": "Yes it is, that's the problem. When I do npm install to get the latest or specify version 0.2.0, I always get express.js 0.1.2. It's not possible for me to get 0.2.0 without hacking the system.\n. Yes that is correct.\nExpect.js NPM module was last updated 11 months ago, but I see now the withArgs changes were merged to master 4 months ago.\nSo so I see now that I'm really asking for a new NPM release from master, that includes all the latest code changes + fixing exports.version to be the current version (to remove confusion).\n. FYI the exports.version mis-labelled issue is actually Issue #42 \n. ",
    "mileskin": "@truongsinh first of all, thanks for taking over the project!\nI really don't have any strong opinions regarding your question. Let's say core :-P At least containAll and containEql are pretty general. Would you like to keep the core as minimal as possible?\n. ",
    "moretti": "If you look at the source code you can see that eql is using the strict equal operator (===), so this is an expected behavior.\n. ",
    "mikeobrien": "The author agreed to remove the ambiguous NPM package.\n. ",
    "christianalfoni": "Aha, sorry, added test now :-)\nDo I have to create a new pull request or can you just grab it?\n. ",
    "calendee": "Well, now I am getting my tests to work properly.  I'm not sure why there was a problem to begin with .  Consider this closed.\n. ",
    "KenanY": "45\n. ",
    "fatso83": "Seriously annoying that this hasn't been fixed. Was wondering why tests using withArgs failed when using karma to run my tests, since I could see it used version 1.2, exactly the same as the version cloned from github. \nThey should have a build script that automatically updates the version numbers based on package.json\n. wohoo, first activity in eight months. I guess forking code is the best way to get attention :)\n. That would be great - any clues on where this write up might be found (when and if it is ready)? As in your blog, in the README (or linked from it), ...? Looking forward to it as well.\n. ",
    "sunesimonsen": "Thanks\n. ",
    "tdumitrescu": "yes please. npm WARN package.json expect.js@0.2.0 No repository field.\n. ",
    "eugeneiiim": "+1\n. ",
    "jb55": "I think component prefers to avoid the extra request, considering one of the focuses is speed. If component fell back to package.json it would be:\n- confusing for newbies, thinking they can just install any node module\n- confusing for everyone, you wouldn't know if it really had browser support\nI don't mind forking this but it would be nice not to have to. Component needs a good browser compatible bdd assert lib...\n. ",
    "ekryski": "Can't get this baby to install via component. @guille If component has package.json support I didn't see it in the docs or the wiki. Any suggestions on how to install this via component without me having to fork it and add a component.json file?\n. ",
    "ashclarke": "Is there any news on this?\n. ",
    "spalger": "Thanks!\n. @truongsinh was confused by your comment, didn't realize you were referring to a fork.\nAre you planning to publish your fork to npm? Please consider it\n. ",
    "andrew-luhring": "@LearnBoost @behrad @guille \nThoughts?\n. ",
    "georgemillo": "Having this same issue, is there any news?\n. ",
    "ananthakumaran": "+1\n. ",
    "HarryPehkonen": "Please leave a link here if there is any kind of organized take-over on this.  I'm apprehensive about using expect.js because of lack of maintenance, but there aren't many libraries like this that run on ie8.\n. I see @aseemk opened an issue with Chai.js with the same symptom:\nhttps://github.com/chaijs/chai/issues/254\nShould be careful with any changes in behaviour here.  Especially if they will differ from other libraries.\n. ",
    "shime": "is this package still maintained? \nif you're looking for maintainers, please add that to the readme. if not, please add it to the readme.\n. :+1:\n. @janmarek check this out\n. You can, this will throw error\njs\nvar expect = require('expect.js')\nexpect(null).to.be.a('function')\n. This is already supported, checks like this are used internally inside the codebase.\n. ",
    "jugglinmike": "I've updated the code style to match the the patch that was recently merged into Node core.\n. ",
    "maximilianschmitt": "I spent the last half hour searching for a bug in my code and tests because of this behavior. Your explanation makes sense on why the behavior is logical but unintuitive. Thanks for that!\n. ",
    "matthewlucock": "+1\n. ",
    "dkillebrew": "I ran into this recently. I would say the current implementation violates the principle of least surprise.  It's clear that the current API is unclear and a source of bugs for some subset of users.\nMy suggestion is to add 2 new flags that are only relevant when checking keys, 'any' and 'all'.\nexpect(obj).to.not.have.any.keys('password', 'secret', 'token');\nor\nexpect(obj).to.not.have.all.keys('password', 'secret', 'token');\nThe first is what some people (including my team and I) want. It is an error if any of the keys are present in obj.\nThe second is the current behavior. It is an error if all of the keys are present in obj.\nWith the new flags, the behavior of both is obvious (to me, at least).\nTo avoid breaking API changes, we can leave the current behavior alone, i.e. if you don't specify 'any' or 'all', the 'all' behavior is used. I think it would be wise to deprecate not using either of the flags, and require a flag at some future date.\n. ",
    "janmarek": "This is javascript. You can NEVER pass object.method somewhere and expect it will be called with object as \"this\" argument.\n. @shime How is it relevant?\nImagine the expect function receiving a parameter. How would you know inside the function if user passed function () { ... } or object.method or object.getSomething().getSomethingElse().method? Without this information you don't know what object can be set as \"this\" argument of call or apply.\n. Yes please.\n. I have forked this library https://www.npmjs.org/package/expect2\n. This has been very useful for me.\njs\nexpect(fn).to.throwException('exactly matches the exception message');\n. It was, many times.\n. I have forked it for my needs.\n- https://github.com/janmarek/expect2\n- https://www.npmjs.org/package/expect2 \n. Try expect(5).to.be.a('number'). Numbers and strings are special and you can't use instanceof check on them.\n. @rauchg First commit after almost one year. Great to see that ;) Can you please fix the tests? https://github.com/janmarek/expect2/commit/0b6ab560015f8045be065a6458552c72740e1ff5\n. What about\njs\nexpect(value === 1 || value === 'abcd').to.be(true);\n?\n. not really\n. ",
    "stephenprater": "I'm not arguing with the implementation - I get why it's like that - it's that the documentation doesn't really provide an example of this assertion being used the way you're likely to want to use it - and the behavior of javascript in this instance isn't super-obvious.  I'm pretty sure I made this error report in frustration after beating my head against it for a while, and thought some body else might benefit from my suffering.\n. ",
    "quarterto": "expect(file).to.be.a(Buffer)\n. ",
    "jasonkarns": "Yep. It was changed here: https://github.com/Automattic/expect.js/commit/fc222ebb46958819dd46e13990956a0d00fdfa83\n. PR #104 addresses this\n. dupe of #101 \n. i disagree:\n```\ntypeof new String(\"foo\")\n\n\"object\"\n```\n\nFurther, as proper duck-typists, we don't actually care that the type is a string. Only that the RegExp constructor accepts it. Of course, at the moment, that only applies to strings and other regexes. But as a design decision, we shouldn't be adding that arbitrary limitation.\nFurther, we don't actually care that regexp is a regular expression. Only that we can invoke exec. A consumer is more than capable of passing in a custom object that has an exec method that does something appropriate to their custom class.\nTechnically, I would consider it even more bulletproof if we did: if (!regexp.exec) regexp = new RegExp(regexp.toString()); This way we ensure that RegExp is given a string, (as is it's current contract) but also allows consumers to provide custom objects that have an appropriate toString implementation.\n. > I would argue the new\n\nString cases are a) uncommon b) not as important as cases such as {exec: 1}\n\nAgree that new String is uncommon. Which is really besides the point since my objection is primarily on the duck-typing grounds.\n\nDoesn't new RegExp call toString implicitly\n\nYep, I guess it does (chrome anyway):\nnew RegExp({toString: function(){ return \"HI\" }})\n/HI/\nSo that means RegExp(regexp.toString()) is definitely out. Leaving us back to the original form?\n. ",
    "javidjamae": "@rauchg other libraries like Chai seem to do it very similarly (i.e. not null, not undefined): https://github.com/chaijs/chai/blob/e088727baba03f3787586974888fa2a4e2f7b817/lib/chai/core/assertions.js#L370-L394\nBased on the comments here, it seems like a bunch of people are looking for this functionality: \nhttps://github.com/Automattic/expect.js/pull/22\nCould you perhaps give better feedback on why it was closed and what you would expect of a correct PR that would be accepted?\n. ",
    "ripter": "+1\n. ",
    "atian25": "any plan at this ?\n. ",
    "ricardofbarros": "Cool,\n I didn't test it I just read the documentation and  lib/index.js, since I didn't found anything I decided to open a issue. Thank you :+1: \n. ",
    "Rauno56": "Cool. I quess you are right. Thank you.\nI just now discovered how stale the repo really is. Well, I already did the PR so... whatever, @guille.\n. Lol... the repo seemed quiet so I didn't event think to check if it has been PRed already. My bad.\n. Can we do anything? Does somebody manage a more active fork?\n. ",
    "frankcash": "relevant stack overflow\n. ",
    "rase-": "By fixed, meaning that the example was removed. Use expect(5).to.be.a('number') instead.\n. ",
    "derwok": "I second this and add the following use scenario: For example for multiple very similar checks the time & coding effort is reduced by checking with multiple expect() in one test case like this:\n``` javascript\n        browser.setValue('input[id=\"id_meetingproject\"]', \"\");  // empty input\n        browser.setValue('input[id=\"id_meetingname\"]', \"\");     // empty input\n        browser.click(\"#btnMeetingSeriesSave\");     // try to save\n        expect(browser.isVisible(\"#btnMeetingSeriesSave\")).to.be.true;  // dialog still open!\n    browser.setValue('input[id=\"id_meetingproject\"]', \"XXX\");\n    browser.setValue('input[id=\"id_meetingname\"]', \"\");     // empty input\n    browser.click(\"#btnMeetingSeriesSave\");     // try to save\n    expect(browser.isVisible(\"#btnMeetingSeriesSave\")).to.be.true;  // dialog still open!\n\n    browser.setValue('input[id=\"id_meetingproject\"]', \"\");  // empty input\n    browser.setValue('input[id=\"id_meetingname\"]', \"XXX\");\n    browser.click(\"#btnMeetingSeriesSave\");     // try to save\n    expect(browser.isVisible(\"#btnMeetingSeriesSave\")).to.be.true;  // dialog still open!\n\n```\nIf one of these expect() fails, you only see this in the console:\nUncaught AssertionError: expected true to be false\nIt would be great to find out which expect() did fail with a small message...\n. Sorry - i was using \"chai\" expect() and was thinking I use this exepct() package.\nWith chai I can add a descriptive message to any expect().\nPlus some more cool fetures (like ommiting the parantheses behind any .to.be.true etc.)\nSo for me the issue is solved.   ;-)\n. ",
    "FlorianWendelborn": "@derwok does that example currently work? I'm kind of surprised that to.be.true is able to do anything without ().\n. @derwok still surprised that chai manages to execute the command without ().\n. Regarding the last part, wouldn't you need a Math.abs() for that?\n. ",
    "vipuldelwadia": "I think this is fixed in 0.3.1: https://github.com/Automattic/expect.js/commit/688c4561dbab8a86e068d849306b4f63d8398443\n. ",
    "famousgarkin": "+1, same issue\n. ",
    "alanjames1987": "I know I can use a ternary to select the correct value before giving it to expect, but that seems sloppy to me if expect supports this already.\n. In my tests I have currently written something like that, but the logical operator was in the .be(...) area.\njs\nexpect(actualValue).to.be(testValue === 1 || testValue === 'abcd');\nThis works but it was ugly. I was looking for something better.\n. ",
    "panstav": "I usually declare variables for each such option, especially when I have >= 3 of those. So for example you could write:\n```\nvar first = testValue === 1;\nvar second = testValue === 'abcd';\nexpect(actual).to.be(first || second);\n```\n. ",
    "ghost": "expect([1, 'abcd']).to.contain(actualValue)\n. ",
    "JakeChampion": "I've ran into this myself just now. I decided to create a separate compare Arrays function.\n. ",
    "nopnop": "@mtrajano Thanks for your implementation ! I added some review above.\nMaybe your PR is related to #98 by @truongsinh, and that mean that a merge is very unlikely as @rauchg said. Although, I definitely believe that Promise support could be expected in expect.js... (now that Promise is a standard ES spec)\n. ",
    "robbie-c": "Create PR https://github.com/Automattic/expect.js/pull/144\n. ",
    "russmatney": "+1 any status/opinion on this? ran into it just now, would definitely benefit from containEql().\n. ",
    "alexei-lexx": "@russmatney  I've created the npm package with some extra features\nhttps://www.npmjs.com/package/expect.js-extra\n. ",
    "markmssd": "+1 \ud83c\udf89 . ",
    "chrisbwall": "+1: having the same issue any time I pass anything that isn't a strict primitive to expect()\n. ",
    "zwhitchcox": "+1 same. ",
    "larsgw": "+1: Same issue, but for all assertions. Seems to be caused by 'use strict'.\n\nA possible workaround for Babel/Babelify usage is including expect.js on its own, without Babel or Babelify parsing, as that adds a 'use strict'. This can be done, in the case of Babelify, by making a separate bundle without babelify specifically for expect.js, and then including both in your page:\n```js\nbrowserify()\n  .require('expect.js')\n  .bundle()\n  .pipe(fs.createWriteStream(path.join(__dirname, '../build/expect.js')))\nbrowserify()\n  .exclude(['expect.js'])\n  .add('./test/*.js')\n  .transform(babelify)\n  .bundle()\n  .pipe(fs.createWriteStream(path.join(__dirname, '../build/test.js')))\n```\nI can't get the Babelify ignore option to work (see https://github.com/babel/babelify/issues/265), but that is probably a good option too.. js\nexpect([]).to.eql({})\nThis passes as well, although that may be intended behaviour.. ",
    "zry656565": "Whoops, that's because of my buggy codes, sorry!\n. ",
    "missingdays": "@dodekeract Yes, of course. Thanks for pointing that!\n. ",
    "pomle": "Was there a test for this in expect that used eql()?\n. ",
    "Kequc": "javascript\nexpect({ a: '1' }).to.eql({ a: 1 })\nThis also passes. I understand it's because the two values loosely equal one another but maybe there could be a separate method for comparing objects?. ",
    "FilmKnurd": "This fixed the issue for me\n. ",
    "megawac": "typeof regexp === 'string' is a better check\n. Doesn't new RegExp call toString implicitly and I would argue the new\nString cases are a) uncommon b) not as important as cases such as {exec: 1}\nOn Mon, Apr 20, 2015 at 10:17 PM, Jason Karns notifications@github.com\nwrote:\n\nIn index.js\nhttps://github.com/Automattic/expect.js/pull/132#discussion_r28745609:\n\n@@ -326,6 +326,7 @@\n    */\nAssertion.prototype.match = function (regexp) {\n-    if (!regexp.exec) regexp = new RegExp(regexp);\n\ni disagree:\ntypeof new String(\"foo\")\n\n\"object\"\n\nFurther, as proper duck-typists, we don't actually care that the type is a\nstring. Only that the RegExp constructor accepts it. Of course, at the\nmoment, that only applies to strings and other regexes. But as a design\ndecision, we shouldn't be adding that arbitrary limitation.\nFurther, we don't actually care that regexp is a regular expression. Only\nthat we can invoke exec. A consumer is more than capable of passing in a\ncustom object that has an exec method that does something appropriate to\ntheir custom class.\nTechnically, I would consider it even more bulletproof if we did: if\n(!regexp.exec) regexp = new RegExp(regexp.toString()); This way we ensure\nthat RegExp is given a string, (as is it's current contract) but also\nallows consumers to provide custom objects that have an appropriate\ntoString implementation.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Automattic/expect.js/pull/132/files#r28745609.\n. \n"
}