{
    "jpillora": "It's possible however I'm not sure if it would make sense. Currently, chisel client ... basically does an ssh -L local port forward (opens a new TCP server on the client). Whereas a -R remote port would open a new TCP server on the server. The purpose of chisel is to overcome firewalls by running all traffic over HTTP, so one would need to send this traffic over HTTP. With -L the local server performs this encapsulation, though with -R we have no client to perform this encapsulation. So it only makes sense to open up normal ssh -R port forward, in which case, I'd just suggest you use ssh.\n. Have you tried tunneling to the SSH server via chisel, then do your normal SSH from there?\n. See #3 for a better solution to this - will close as it covers this use case. If I'm mistake, feel free to re-open\n. No, you are correct, chisel does not yet support a http proxy. I have not\nlooked into this yet though I know it definitely could work however I\nbelieve it could be complicated by the fact chisel relies on WebSockets,\nneeds some research\nOn Wed, Jul 15, 2015 at 6:41 PM, nonoderclown notifications@github.com\nwrote:\n\nI use Chisel Client in Windows 7. Internet connection of our company runs\nthrough a proxy.\nChisel Client does not seem to support a http proxy (I tried to set\nHTTP_PROXY in ENV).\nDid I miss a point ? Do you see a possibility to get it working ?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jpillora/chisel/issues/2.\n. I've been thinking about this, would be cool, though it's a lot of work. I probably won't have time to give this a shot for a long time, though I'll leave this open incase you or anyone else wants to try.\n. I had a look into what it would take to achieve this:\n- The TUN interface (tunnel - psuedo-IP interface) would only be needed on the client\n- The TUN interface would be used to achieve chisel client <endpoint> all, where the special all remote would redirect all traffic to the TUN interface\n- Creation of TUN interface\n  - Go libraries\n    - https://github.com/liudanking/tuntap\n    - https://github.com/songgao/water\n  - Linux natively supported\n  - OSX needs tuntap k(ernel) ext(ension)s\n    - Could add an option to auto-install by embedding the .pkg (58KB) and using the installer -pkg <pathToPackage> command?\n    - Contribute OSX interface creation back to songgao/water\n  - Windows ???\n- Give the TUN interface an unused ip/subnet\n- On startup insert a default route via the TUN interface, remove it on shutdown\n- Then, in a loop\n  - chisel client will:\n    - Read packets off the interface\n    - Parse each for TCP and UDP, drop the rest\n    - Encapsulate and send to the chisel server\n    - Received server packets are then written to the interface and will land in the OS network stack\n  - chisel server will:\n    - Receive cliented packets are decapsulated\n    - Split into sessions\n    - For each session tunnel packets to that endpoint (on-demand remote endpoints :+1:)\n    - Received remote packets are then tunneled back and the client\n- En[de]capsulation\n  - Packets will be in the form [ip => dst ip][tcp or udp => dst port][payload] the client should extract the destination ip, tcp or udp, port and payload from each and binary encode them\n  - Custom encapsulation saves bandwidth since we only send the payload, we should only take what's necessary to establish a session and also allows for chisel fields to be added later\n\nReferences\n- https://github.com/meshbird/meshbird\n- https://github.com/stargrave/govpn\n. In the meantime, for anyone looking for a simple private VPN solution, checkout Zero Tier https://www.zerotier.com/ It's like a free Hamachi.. It is not possible since chisel is a TCP proxy, not an HTTP proxy. 2015! Sorry about the lack of comment. Thanks for the PR! though I think this introduces too many dependencies, adds too much complexity for the small portion of chisel+consul users.. chisel now has SOCKS5 support in 1.2.0, please update, see chisel server --help, test it out and let me know if there are any issues. Chisel isn't suited for server to client connections yet. I would recommend\ntinc. I've got tinc on my raspberry pi and wherever it is, it'll join my\nprivate tinc network and I can reach it.\nOn Sun, 17 Jan 2016 at 2:05 PM jow blew notifications@github.com wrote:\n\ni have a situation where i have some embedded devices out in the field and\nthey are all in NAT environment They can only call upstream on 80 and 443\nSo i am hoping i could use this to connect to them via a public static in\nbetween server, using Chisel\nBut i am not sure Can you let me know what you think\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jpillora/chisel/issues/8.\n. interesting, a pure go solution would be nice. looks like there's still a some work to do though to get it working dockerless though\n. It'd be better to make a --max-backoff command-line option\n. You can make a users.json file, see example dir\nOn Thu, 24 Mar 2016 at 8:07 PM netroby notifications@github.com wrote:\nDose chisel client support --authfile ?\nI would prefer chisel read configure file from disk. and do not want other\nuser view the password .\nThe current -auth put username and password on command line argument. when\nusing ps -aux | grep chisel , you will see the password.\nIt might be not safe\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/jpillora/chisel/issues/11\n. Ah you're looking for an authfile on the client, not the server. Not implemented, though it wouldn't be too hard to add.\n. chisel client now checks the AUTH env variable in 1.2.0, so you can set AUTH in your service file. please update, see chisel client --help, test it out and let me know if there are any issues. See https://github.com/jpillora/chisel#install, will put your guide up as a wiki page\n\nEdit: https://github.com/jpillora/chisel/wiki/Docker\n. Left out reconnects from the title since chisel should already perform reconnects\n. Will try to get this merged soon, just need to find time to test. chisel now has HTTP CONNECT support in 1.2.0, please update, see chisel client --help, test it out and let me know if there are any issues\ninstead of implementing a custom HTTP CONNECT client like this PR does, I swapped the websockets package to use gorilla which has proxy support built in. No worries, thanks for the PR :)\n. Seems to be up for me\n$ chisel client --keepalive 30s https://chisel-demo.herokuapp.com 4300:3000\n2016/06/30 13:26:50 client: Connecting to wss://chisel-demo.herokuapp.com:443\n2016/06/30 13:26:52 client: Fingerprint 66:0c:73:a3:4d:5f:ef:e4:1d:aa:b1:15:1a:2d:2d:5e\n2016/06/30 13:26:53 client: Connected (Latency 280.462653ms)\n(edit: keep alive and listening port 4300 are optional)\n. Hmmm alternatively put the amd64 Linux binary in /usr/local/bin and make it\nexecutable\nOn Tue, 30 Aug 2016 at 6:45 AM septs notifications@github.com wrote:\n\nvultr ~ # wget https://github.com/jpillora/chisel/releases/download/1.1.3/chisel_1.1.3_amd64.deb\nvultr ~ # sudo dpkg -i chisel_1.1.3_amd64.deb\n(Reading database ... 94889 files and directories currently installed.)\nPreparing to unpack chisel_1.1.3_amd64.deb ...\nUnpacking chisel (1.1.3) ...\ndpkg: error processing archive chisel_1.1.3_amd64.deb (--install):\n trying to overwrite '/usr/bin/test', which is also in package coreutils 8.25-2ubuntu2\ndpkg-deb: error: subprocess paste was killed by signal (Broken pipe)\nErrors were encountered while processing:\n chisel_1.1.3_amd64.deb\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/jpillora/chisel/issues/18, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAmr8-RHofOKnZtdpGoqph5qQm5YNuP_ks5qk0TNgaJpZM4Jv4OP\n.\n. True, it would work with TCP, I added HTTP and WebSockets to get through\nHTTP Proxies/Firewalls. Specifically, I wanted to put it on Heroku, which\nmust go through their HTTP proxy/router.\n\nOn Mon, Jan 9, 2017 at 5:48 PM Brian Geffon notifications@github.com\nwrote:\n\nHi, this is a really neat project you've hacked together. Just out of\ncuriosity, if you're controlling clients and servers on both ends why don't\nyou just tunnel tcp via a tls channel and be done with it? Why do you need\nHTTP in there at all?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/jpillora/chisel/issues/19, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAmr86PaE7yUW1w5hkmMQoAWGCxXg9e3ks5rQdhCgaJpZM4Ld-iX\n.\n. The .deb releases were made by now-unsupported tool. Replacing /usr/bin/test is bad so I think I'll just remove all deb releases. I just released 1.1.4 https://github.com/jpillora/chisel/releases download the linux amd64 binary and place it in /usr/local/bin/chisel and make it executable\n\nOr you can use curl https://i.jpillora.com/chisel! | bash which does this. Thanks\n. I think it's about the download speed, can you retest with rate-limited requests?. Can't reproduce, if able - please reopen with more information. Thanks, added that link to https://github.com/jpillora/chisel#known-issues. This would be nice to have though would result in quite a large. There's a PR for using an unauthenticated HTTP CONNECT proxy #14 which you could try. Looks like its been deleted, though the file changes still exist. chisel now has HTTP CONNECT support in 1.2.0, please update, see chisel client --help, test it out and let me know if there are any issues. Thanks for the PR! I was thinking of adding TLS, though decided not to for now.\nJust a side note, see tls.Config, InsecureSkipVerify disables all checks, not just parent certificates. With this enabled, TLS will encrypt though provide no authentication, so the only real point of doing this would be to pass through a TLS-only firewall. If we wanted to go down this path, we may as well generate a TLS certificate and hold it in memory (like I'm doing for the SSH certificates).\nPut my thoughts on adding TLS here https://github.com/jpillora/chisel/issues/28\n. In the meantime, for easy TLS, use Caddy with:\nhttps://chisel.mydomain.com {\n    tls \"webmaster@mydomain.com\"\n    log / stdout \"[{when}] {method} {host}{uri} => [{status}] {size}b {latency} ({remote})\"\n    proxy / http://localhost:4444 {\n        websocket\n    }\n}\nRun your chisel server on port 4444. Point chisel.mydomain.com at your server. Run caddy with this Caddyfile and it will use Let's Encrypt to automatically setup HTTPS.. Thanks, updated above. So this would make the server listen/accept connections and the client terminate them? I have another plan to allow clients to make connections https://github.com/jpillora/chisel/issues/9 though since it's quite a large change I decided not to include it in the 1.2 release. No, internally, I use the SSH protocol. The SSH program implements it, so chisel would also need to implement it.. I plan on merging this fork https://github.com/mcbernie/chisel at some point (supports using clients as proxy endpoints) and then with the chisel server also acting as a client (server can also provide remotes), then it would result in this functionality.. #72 has been merged. @mcbernie's implementation (https://github.com/mcbernie/chisel) looks good though I haven't tested it. It could still be merged one day still though for now, I chose @sunshineco's implementation for its simplicity. chisel now implements remote forwarding like SSH. Search \"reverse\" in the README for more info, in short:\nWhen the chisel server has --reverse enabled, remotes can\n    be prefixed with R to denote that they are reversed. That\n    is, the server will listen and accept connections, and they\n    will be proxied through the client which specified the remote.. I think a poll every 5 seconds would be simplest. It's not a huge change, would you willing to send a PR?\nThese lines from server.go, can be moved into a function\ngo\n        users, err := chshare.ParseUsers(config.AuthFile)\n        if err != nil {\n            return nil, err\n        }\n        s.Users = users\nThe function can run in a loop on a timer, it will need to be guarded with file change detection, and s.Users will need a sync.Mutex protecting it. Option 3.  has been implemented in 1.2.4. Fixed this last week, update to 1.2 and you'll see messages like:\n2017/04/14 13:12:43 client: tunnel#1 127.0.0.1:1080=>socks: listen tcp4 127.0.0.1:1080: bind: address already in use\nEdit: It does not exit, though it does show the error. I'll consider it \ud83d\udc4d  though forcing an exit on failed port binding would be a breaking change (i.e. existing use cases may count on this).. Point being, it's not silent. Though agreed, it should exit. Since it's mostly a CLI app, I'll just change the behavior I think :+1:. Ah that's strange, chisel should break the connection-retry loop on this\nline https://github.com/jpillora/chisel/blob/master/client/client.go#L198 and\nthen exit. Can you reliably reproduce?\nOn Thu, 11 May 2017 at 18:54 Colin GILLE notifications@github.com wrote:\n\nDuring chisel's normal operation, I had this error:\nssh: handshake failed: websocket: close 1006 (abnormal closure): unexpected EOF\nThe client is on a bad network so that's probably what caused the error.\nThe problem is that the tunnel went down for good and chisel didn't stop\nether.\nIf this kind of fatal error occurs, can you either:\n\ntry / catch and retry to open the tunnel\nexit the process with a non-null exit code so that it may be\n   restarted\n\nCan it be related to this code ?\nhttps://github.com/jpillora/chisel/blob/master/client/client.go#L160\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/jpillora/chisel/issues/32, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAmr86hl7HQEzu7ZwY7y6XCSur5l2oLzks5r4syngaJpZM4NXssD\n.\n. Currently you can't, though you can get a real certificate from let's\nencrypt. One way is to use caddy instead of nginx (\nhttps://github.com/jpillora/chisel/issues/28#issuecomment-292696574),\nthey're quite similar though I think caddy is much better - single binary,\nauto HTTPS and more\n\nOn Fri, 26 May 2017 at 2:15 pm kmlxk notifications@github.com wrote:\n\nJust now I sniffed chisel https request and get this message:\nTLSv1.2 61 Alert (Level: Fatal, Description: Bad Certificate)\nHow to disable SSL certification verify?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/jpillora/chisel/issues/34#issuecomment-304186729, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAmr864jeDq5EgBIvKDJEr_UWXB6cpZsks5r9lHNgaJpZM4NnJFx\n.\n. Awesome :)\n\nIt's not possible to move existing connections into a new process. Each connection has significant state which couldn't be carried forward by a different process. chisel clients perform automatic reconnects on any disconnection so a deploy strategy of replacing the chisel server's binary and performing a restart would cause chisel clients to reconnect almost instantly.\nHowever, this short chisel-to-chisel disconnection would also disconnect any user connections (e.g. SSH connections). I have thought of hiding any short chisel-to-chisel disconnections from the user, by buffering user data though this would result in complex edge cases, like, where a user program might think it has successfully transmitted data when it hasn't, and then this data is lost. Also, even if implemented, this would not work through a chisel upgrade.\nHappy to hear of any other ideas. Yeah that sounds reasonable\nOn Wed, 13 Dec 2017 at 8:22 am Vaidas Jablonskis notifications@github.com\nwrote:\n\n@jpillora https://github.com/jpillora I assume running multiple chisel\nservers behind a TCP load balancer wouldn't work either, would it?\nIf hot-swapping chisel binary without bringing existing connections down\nis not an option, would you consider a feature that watches auth-file for\nchanges?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/jpillora/chisel/issues/36#issuecomment-351198583, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAmr8_zPUF-b8H-pLLqFaqqvFaXFB6mUks5s_u6CgaJpZM4ODZN-\n.\n. Thanks for the PR! Are you able to provide any metrics for reconnection times, with and without this change? . Happy to look at this again with the metrics. Please reopen when ready. This is a good idea :) I'm thinking in addition to a socks remote, we can also add an http remote. This package https://github.com/elazarl/goproxy provides a simple API (uses a http.Handler). I haven't looked too deeply into https://github.com/google/martian yet.. What's port 9312? Are you binding to $PORT?. Can you enable verbose logging on the server and post logs?. Yep this is a good suggestion, will update the readme at some point :). Implemented in 1.2.4. --socks5, forgot the dashes\n\nOn Thu, 26 Oct 2017 at 11:40 pm Matej Kovacic notifications@github.com\nwrote:\n\nOn a server I said:\nchisel server --port 8080 socks5\nOpenVPN config on server has line:\nsocks-proxy 127.0.0.1 1080\nOn a client side I run:\nchisel client http://myserver.org:8080 socks\nAnd then run OpenVPN client, which has:\nsocks-proxy 127.0.0.1 1080\nin its config.\nHowever, chisel on a client side says:\n2017/10/26 14:35:28 client: Connected (Latency 2.21344ms)\n2017/10/26 14:36:24 client: tunnel#1 127.0.0.1:1080=>socks: conn#1: Stream error: ssh: rejected: administratively prohibited (SOCKS5 is not enabled on the server)\nWhat am I doing wrong?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/jpillora/chisel/issues/46#issuecomment-339652549, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAmr8ya5JWZEcHc2XeCx98KlIKtT-wLQks5swH3FgaJpZM4QHd4m\n.\n. > Is there any option to make fingerprint persistent?\n\n```\nchisel server --help\n....\n--key, An optional string to seed the generation of a ECDSA public\nand private key pair. All commications will be secured using this\nkey pair. Share the subsequent fingerprint with clients to enable detection\nof man-in-the-middle attacks (defaults to the CHISEL_KEY environment\nvariable, otherwise a new key is generate each run).\n\n``. Sorry, I'm not very familiar with OpenVPN. Thanks! See commits for changes. Yep, chisel should support both directions. TODO!. https://github.com/jpillora/chisel/releases/tag/1.2.3 released \ud83d\udc4d . Interesting, are you finding thatGo-http-client/1.1` is blocked?. Instead of SSHing over webterm, use chisel to tunnel port 22, and then use normal SSH. Then you can use SCP as normal since it runs over SSH.. Thanks @saswatp . Thanks for the PR! Will review soon. Will try to remember for the next release. released 1.2.4 with win32. Possible though outside of the scope of this project, would be a new\nproject with deeper hooks into the OS with much more OS specific code\nOn Mon, 26 Mar 2018 at 1:12 pm shashankmjain notifications@github.com\nwrote:\n\nIs there an option to use the tun/tap devices with ssh to have a vpn\nimplemented over chisel instead of doing port forwarding?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/jpillora/chisel/issues/58, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAmr8_Xej03s1hTCkcMGQ6fmDAF5oAedks5tiE6fgaJpZM4S6bSt\n.\n. I've started this. It's definitely going to be a new project. Currently it's closed source and not ready for public use.. Will close as dupe of #3. Thanks @jainsm though I think this is out of scope, as it would result in too big of a change. Pulls in requirements around routing and ip address management. Indeed, this would be nice to have. The server option --proxy does this. --port ?. There's a PR for this https://github.com/jpillora/chisel/pull/47. I just need to merge it.. This would be nice to have, but probably out of scope for this project. I'm working on a closed source VPN which could do this, though unfortunately it's not ready yet.. I originally did this, and to get to multiplex streams I used https://github.com/hashicorp/yamux, however I also wanted to support secure connections plain http, and SSH provides both. Also, didn't really notice any performance issues when I swapped.. Open to alternatives if they can provide\u00a0any benefits. Use the keep alive option\n\nOn Tue, 24 Jul 2018 at 15:56 wangyi2005 notifications@github.com wrote:\n\n2018/07/24 20:00:32 client: Connecting to wss://#########.\nherokuapp.com:443\n2018/07/24 20:00:32 client: tunnel#1 127.0.0.1:1080=>socks: Listening\n2018/07/24 20:00:51 client: Fingerprint\n25:00:8b:b5:0f:fa:55:e6:c2:d2:ce:55:87:d9:e1:da\n2018/07/24 20:00:52 client: Connected (Latency 321.5073ms)\n2018/07/24 20:36:14 client: Retrying in 100ms...\n2018/07/24 20:36:29 client: Fingerprint c8:57\ud83c\udde9\ud83c\uddea\n07:33:ce:2d:6a:50:63:50:86:eb\ud83c\udd8e6c:a1\n2018/07/24 20:36:30 client: Connected (Latency 310.4464ms)\n2018/07/24 21:11:59 client: Retrying in 100ms...\n2018/07/24 21:12:08 client: Retrying in 200ms...\n2018/07/24 21:12:27 client: Fingerprint\nca:6e:9f:be:c5:ce:12:31:01:d6:3f:65:17:ad:0f:77\n2018/07/24 21:12:29 client: Connected (Latency 320.8896ms)\n2018/07/24 21:46:07 client: Retrying in 100ms...\n2018/07/24 21:46:28 client: Fingerprint\n50:a7:05:e8:bb:2d:a4:f8:d7:ad:42:89:1a:ea:c5:f8\n2018/07/24 21:46:29 client: Connected (Latency 322.6522ms)\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/jpillora/chisel/issues/66, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAmr8-bcEOQezgPszIsqB0jZGsr8Dr6hks5uJyd2gaJpZM4VcykV\n.\n. I run chisel on a few heroku servers of mine, haven't seen that issue before.. Try using a keep alive of 25s. Thanks! Hopefully will find some time soon to test. Hi, sorry for the delay! I haven't been able to test yet, though thought I'd check first: what was the crypto/ssh handshake issue?. Interesting I wonder if it's related to\n\nhttps://stackoverflow.com/a/44269276\nOn Fri, 19 Oct 2018 at 9:17 am Qiang Li notifications@github.com wrote:\n\nIt could be related to golang/go#21941\nhttps://github.com/golang/go/issues/21941\nI never had time to debug deeper as it works with a lower commit. Here are\nthe steps to reproduce:\n\ncheck out this pull request anywhere on your local machine (as it\n   uses modules and does not need to reside in $GOPATH/src)\nupgrade crypto/ssh in go.mod with: go get golang.org/x/crypto, you\n   should see changes similar to the following:\n\n-\n golang.org/x/crypto v0.0.0-_20170825_220121-81e90905daef\n\n-\n golang.org/x/crypto v0.0.0-**20181015**023909-0c41d7ab0a0e\n\n\ndo a build: go build and run\n   ./chisel server\n   ./chisel client -v http://localhost:8080 localhost:6022:localhost:22\n   (client will hang at: client: Handshaking...)\n\nand\nssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -p 6022\n$USER@localhost\nwill fail with the following error:\nssh_exchange_identification: Connection closed by remote host\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/jpillora/chisel/pull/67#issuecomment-431182949, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAmr8_UzYA5pe2R877hdv-ik7tcy2hauks5umP38gaJpZM4W0iSQ\n.\n. Oh wait, I think chisel sets the host key callback. Will investigate\n\nOn Fri, 19 Oct 2018 at 9:28 am Jaime Pillora jpillora@gmail.com wrote:\n\nInteresting I wonder if it's related to\nhttps://stackoverflow.com/a/44269276\nOn Fri, 19 Oct 2018 at 9:17 am Qiang Li notifications@github.com wrote:\n\nIt could be related to golang/go#21941\nhttps://github.com/golang/go/issues/21941\nI never had time to debug deeper as it works with a lower commit. Here\nare the steps to reproduce:\n\ncheck out this pull request anywhere on your local machine (as it\n   uses modules and does not need to reside in $GOPATH/src)\nupgrade crypto/ssh in go.mod with: go get golang.org/x/crypto, you\n   should see changes similar to the following:\n\n-\n golang.org/x/crypto v0.0.0-_20170825_220121-81e90905daef\n\n-\n golang.org/x/crypto v0.0.0-**20181015**023909-0c41d7ab0a0e\n\n\ndo a build: go build and run\n   ./chisel server\n   ./chisel client -v http://localhost:8080 localhost:6022:localhost:22\n   (client will hang at: client: Handshaking...)\n\nand\nssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -p 6022\n$USER@localhost\nwill fail with the following error:\nssh_exchange_identification: Connection closed by remote host\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/jpillora/chisel/pull/67#issuecomment-431182949, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAmr8_UzYA5pe2R877hdv-ik7tcy2hauks5umP38gaJpZM4W0iSQ\n.\n\n\n. Found it\n\nhttps://github.com/golang/crypto/commit/5f55bce93ad2c89f411e009659bb1fd83da36e7b#diff-97976acd222484d4e11fa2a89268d611R354\nNow, the SSH version string must contain SSH- otherwise handshake hangs. Did a full re vendor to get all the updates. So I didn't end up using your commit, though thanks for debugging and the PR! Checkout the 1.2.4 release!. Possible, but not supported currently.\nOn Fri, 12 Oct 2018 at 17:29 saintdev2 notifications@github.com wrote:\n\nCan we be able to transport UDP traffic between android/ios client and\nserver to bypass voip censorship?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/jpillora/chisel/issues/68, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAmr8878oSGN0fpWQpcRtIizLUD1IQMKks5ukDbEgaJpZM4XY3kt\n.\n. Same way that TCP proxying works. You'd need a UDP listener on the client, new UDP remote definition, then UDP proxying on the server.. Actually, this is quite a bit harder than just adding a UDP listener since SSH relies on TCP and chisel is fully dependant on the SSH protocol.\n\nYou could use https://github.com/xtaci/kcp-go to create a TCP-like connection over UDP, then add chisel on top of that. Though in your case, I'd recommend just using https://github.com/xtaci/kcptun instead of chisel.. Ah yes! Will republish. Will look into template tagging now hub supports it\nOn Sun, 21 Oct 2018 at 2:04 am Colin GILLE notifications@github.com wrote:\n\nI switched to the latest chisel version & docker image, and I can't\nestablish connections toward https enabled server anymore (Let's encrypt\ncertificate).\nRunning apk add ca-certificates within the new docker image before\nrunning chisel client solves the problem.\nCould you add ca-certificates in the published docker image ?\nBTW, it would be nice to tag the docker image by version, to allow quick\nrollbacks ;).\nThanks for your great work !\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/jpillora/chisel/issues/69, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAmr86Fc7-GjERTRAMJKX-KSZJLjvqx0ks5umzuGgaJpZM4Xx-Hr\n.\n. Republished as latest, I think future releases should also get tagged release-<version>. Do you want to use it in the terminal? Download the binary and ./chisel --help\n\nDo you want to run it as a service? Download the binary and follow https://medium.com/@chetcorcos/a-simple-launchd-tutorial-9fecfcf2dbb3. Yeah there were ssh protocol updates, I could release 1.2.4 again with a\nproper error message though I couldn't make it work unfortunately\nOn Thu, 15 Nov 2018 at 8:05 pm David \u0160m\u00edd notifications@github.com wrote:\n\nWhen the newest client 1.2.4 tries to connect server 1.2.2 it gets this\nerror:\n2018/11/15 09:31:07 client: ssh: handshake failed: ssh: overflow reading\nversion string\nOn the other hand, when an older client (version < 1.2.4) tries to connect\nserver 1.2.4 it gets this error instead:\n2018/11/15 09:57:33 client: ssh: handshake failed: websocket: close 1006\n(abnormal closure): unexpected EOF\nClient < 1.2.4 vs Server < 1.2.4 and Client 1.2.4 vs Server 1.2.4 works\nfine.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/jpillora/chisel/issues/71, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAmr860Q9KS_SDnkC2i4-_e3MNSdz2-4ks5uvS5ogaJpZM4YfXML\n.\n. This is fixed in 1.2.5 and 1.3.0 (auto-release in progress), didn't want to re-release 1.2.4 since its been out for a while. Merged :) Thanks @sunshineco, I do indeed prefer this PR over the other ones for its simplicity. There's still room to add client --name <id> and @client-id remotes, though I'd want a good chunk of time to merge existing implementations / rewrite it.\n\nRE: Leaking go routine: So you run chisel via the Go API, and call client.Start a lot?. You can change the protocol version in share/version.go, and then recompile\nOn Sun, 6 Jan 2019 at 8:06 am 0xjohn notifications@github.com wrote:\n\nI want to set custom string for upgrader parameter instead of Upgrade:\nwebsocket in client request body.\nfor example I want to set upgrade string to Upgrade: websc , can you help\nme to do this?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/jpillora/chisel/issues/73, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAmr87R0bYqEhSL4ArNz5wrxDDdfS-zwks5vARPogaJpZM4ZyF19\n.\n. Merged @patrick-othmer's fix, released 1.3.1. Thanks!. Thanks! Sorry for the slow merge. Will make a new release now.. Released 1.3.1. Thanks for the PR! I think a better user experience would be for it to work like the server's socks endpoint (e.g. socks, converts to localhost:1080:localhost:socks). So maybe R:socks should try to listen on the server's 1080 and forward through the clients internal socks handler (does not need to be listening, use ServeConn instead, see chisel server usage).. Awesome, no rush!\n\nOn Tue, 12 Feb 2019 at 2:00 pm aus notifications@github.com wrote:\n\nThanks for the feedback! I did originally consider something like you've\nsuggested, but this was a quick solution to a problem. I'll consider\nimplementing as you've suggested, but it may take some more time for me to\nunderstand the code (and more of golang).\nI do prefer the R:socks design better. And if multiple clients connect,\nthen the subsequent client can simply specify a free port to listen on\n(e.g. R:1081:socks).\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/jpillora/chisel/pull/78#issuecomment-462595968, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAmr87kj-ITyEPfXrmC-9AZxRLv2RdObks5vMi5RgaJpZM4ayr3B\n.\n. Sorry! You right in not needing the socks option. I should have clarified,\nan attacker can send any \"ExtraData\" and could crash the client with a nil\npointer exception when the *socksServer is under. So the check would be for\nif socksServer == nil, then reject\n\nOn Mon, 25 Feb 2019 at 2:53 am aus notifications@github.com wrote:\n\n@aus commented on this pull request.\nIn client/client.go\nhttps://github.com/jpillora/chisel/pull/78#discussion_r259626921:\n\n@@ -272,13 +286,19 @@ func (c *Client) Close() error {\n\nfunc (c *Client) connectStreams(chans <-chan ssh.NewChannel) {\nfor ch := range chans {\n  remote := string(ch.ExtraData())\n\n\nsocks := remote == \"socks\"\n\nThanks for the feedback! I guess I'm a bit confused. My understanding of\nthe linked code block is that it essentially checks whether the --socks5\nserver option was enabled. Are you saying that the --socks5 server option\nshould be checked and enabled in order for client socks remotes R:socks\nto work? Or are you saying there should be a client option of --socks5?\nOr neither? \ud83d\ude04\nIn my original commit, I had added the client option --socks5 to enable\nthe client socks server. However after your suggestions, I've concluded\nthat the client --socks5 option is redundant if the client is also\nspecifying socks in the reverse remote R:socks.\nI understand the security reasoning for having the server --socks5\noption. Since the client specifies the remote, the server should not allow\nclients with free network access unless explicitly enabled. But for client\nsocks, I don't really see any risk where neither the server nor client\nwould need to enable the --socks5 option. And the --reverse server option\nalready permits or denies the server-side risk.\nHopefully you can clarify things for me. Thanks!\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/jpillora/chisel/pull/78#discussion_r259626921, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAmr89lQpmh3r3yYG8tAfsvq8Z04-TAOks5vQrVlgaJpZM4ayr3B\n.\n. LGTM \ud83d\udc4d thanks for the PR, just need to get around to testing this and I'll get it merged :). In the following, where do you need a socks proxy?\n\nuser-app -> chisel-client -> chisel-server -> user-endpoint. Are both sides running the same version?\nOn Thu, 28 Feb 2019 at 3:19 am Gowtham Venkat notifications@github.com\nwrote:\n\nI am using the latest chisel binaries released on January, trying to\nconnect to Predix database without any proxy. It throws up connection error\nand keeps retrying though it fails every single time. The system I tried is\nMac with High Sierra OS.\nHowever, the client runs fine on Windows machine and I am able to connect\nto the same database without any issues.\nError logs:\n2019/02/27 21:46:46 client: Connecting to wss://\npredix-chisel-postgres-theosophic-madam.run.aws-usw02-pr.ice.predix.io:443\n2019/02/27 21:46:46 client: proxy#1:0.0.0.0:4006=>db-ac-***:5432:\nListening\n2019/02/27 21:46:47 client: Connection error: websocket: bad handshake\n2019/02/27 21:46:47 client: Retrying in 100ms...\n2019/02/27 21:46:50 client: Connection error: websocket: bad handshake\n(Attempt: 1)\n2019/02/27 21:46:50 client: Retrying in 200ms...\n2019/02/27 21:46:51 client: Connection error: websocket: bad handshake\n(Attempt: 2)\n2019/02/27 21:46:51 client: Retrying in 400ms...\n2019/02/27 21:46:53 client: Connection error: websocket: bad handshake\n(Attempt: 3)\n2019/02/27 21:46:53 client: Retrying in 800ms...\n2019/02/27 21:46:55 client: Connection error: websocket: bad handshake\n(Attempt: 4)\n2019/02/27 21:46:55 client: Retrying in 1.6s...\n2019/02/27 21:46:59 client: Connection error: websocket: bad handshake\n(Attempt: 5)\n2019/02/27 21:46:59 client: Retrying in 3.2s...\n2019/02/27 21:47:04 client: Connection error: websocket: bad handshake\n(Attempt: 6)\n2019/02/27 21:47:04 client: Retrying in 6.4s...\n2019/02/27 21:47:11 client: Connection error: websocket: bad handshake\n(Attempt: 7)\n2019/02/27 21:47:11 client: Retrying in 12.8s...\n2019/02/27 21:47:25 client: Connection error: websocket: bad handshake\n(Attempt: 8)\n2019/02/27 21:47:25 client: Retrying in 25.6s...\n2019/02/27 21:47:52 client: Connection error: websocket: bad handshake\n(Attempt: 9)\n2019/02/27 21:47:52 client: Retrying in 51.2s...\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/jpillora/chisel/issues/82, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAmr8yAeOjyWgDJWGZ9T8vvCieuvGrohks5vRrAKgaJpZM4bU6VZ\n.\n. No, this functionality would need to be added\n\nOn Thu, 7 Mar 2019 at 05:38, berkant ipek notifications@github.com wrote:\n\nI ran across chisel today and had some spare time to try it on Heroku.\nI have 100 dynos running with different IPs but when I connect my app via\nHeroku Router with chisel client, it simply establishes a conn with a\nrandom dyno. I want to take advantage of multiple IPs attached to my dynos.\nIs there a way to instruct chisel to establish a new conn whenever a req\nhits the local socks, in a multitenant environment?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/jpillora/chisel/issues/83, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAmr88Ff5y3F21KBkvotuiuyV8roseF2ks5vUAtBgaJpZM4bhjYI\n.\n. It doesn't listen. It creates an internal chisel endpoint to a socks5\nconnection handler.\n\nOn Mon, 18 Mar 2019 at 5:36 am vetch101 notifications@github.com wrote:\n\nIs there a way to get the Chisel socks5 proxy to listen on any IP other\nthan 127.0.0.1?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/jpillora/chisel/pull/85#issuecomment-473696291, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAmr86PcadoYr-L6IpAD4tdz5tp69W-lks5vXosggaJpZM4blcER\n.\n. I'd suggest having your own logic do a health check against remote log\nserver, and toggle a switch to stop sending logs (or do whatever happens\nwhen the log endpoint, chisel in this case, goes down)\n\nOn Mon, 18 Mar 2019 at 8:47 am vetch101 notifications@github.com wrote:\n\nThanks for the reply.\nI'm really enjoying using chisel, it's great! Thank you!\nI've got a setup where I'm using it with a deployment where I'm using it\nfor log forwarding over the tunnel.\nThe situation is:\napplication node (filebeat) log forwarder --> remote chisel client\n----------->\n----> local chisel server --> local log (logstash) pipeline\nThis works great when the tunnel is up and the logstash server is up, or\nwhen the tunnel is down, but when the logstash server is down and the\ntunnel is up, the log forwarder floods the network with logs as it sees the\nchisel connection, but (obviously) can't reach the end point.\nI thought that I might be able to get it to work by authenticating the\nconnection with SSL certs, and the filebeat log forwarder backs off the\ntunnel when it's up and the logstash is down, but it also backs off when\nthe logstash server is up as it can't authenticate...\nI tried using it with socks5 proxy - and it all works fine with no SSL\n(although it has the same problem with the log forwarder flooding the\nnetwork when it can see chisel, but not the logstash endpoint)... and when\nI try with SSL, I get the same outcome as with the other situation...\nThat's why I thought it might be helpful to be able to listen on a\nnon-loopback address; but from your reply, it sounds like that isn't\npossible.\nAre there any other ways that you could suggest that might be viable?\nMany thanks!\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/jpillora/chisel/pull/85#issuecomment-473718292, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAmr82HvqxnjyWhcLY8PFs_qGdxWRtnaks5vXrgAgaJpZM4blcER\n.\n. An Android app developer would need to develop an app using chisel\n\nOn Wed, 13 Mar 2019 at 18:25, simonho234 notifications@github.com wrote:\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/jpillora/chisel/issues/86, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAmr8xCES0bzheCeG4FOLbLwXr3GAwWVks5vWKflgaJpZM4bsj3f\n.\n. Changes to lines 92,99 are unnecessary, though this looks good to me!\n. What duration is this intended to be? b.Duration increments the backoff timer, though it's already being incremented when there's an error.. Hi, sorry it's been a while! Does this work on Windows?. This line needs this https://github.com/aus/chisel/blob/client-socks/server/handler.go#L166-L170  check afterwards. \n",
    "xoox": "Indeed we are facing a very strict firewall only HTTP and HTTPS are allowed. Any other links include ssh are unstable and unusable usually.\nBefore jump into chisel using websocket, the following solution has been used, but it is too tricky and has no good performance. It also breaks the normal HTTP server deployments.\nclient             |                 | server          /----------> HTTP server\nautossh -> stunnel ----->FIREWALL----->stunnel->sslh--+-------> ssh server\nThe local traffic are encapsulated and forwarded by ssh -L. Also, when running autossh a -R is added to open a remote port forwarding to the local client side. The remote port forwarding is used to do some settings to the local client host, which is impossible without remote port forwarding capability when you are outside the firewall.\nThe ssh -R alike option would be added to chisel client side instead of server side. The remote forwarded ports would only be opened by the requests of authenticated clients.\nIn conclusion, chisel server is more like the sshd daemon, while chisel client behaves more like the ssh client. They communicate via the HTTP/HTTPS(WS/WSS) linkage.\nThe -R options would and should only be added to the chisel client side. Something like:\nchisel client [options] <server> <remote> [remote] [remote] [-R [bind_address:]port:host:hostport] [-R [bind_address:]port:host:hostport]...\n. It surely works tunneling to the SSH server via chisel. That results in a multiple-layer tunnel.\nSSH remote port forwarding is tunneled via ssh, which is tunneled through chisel, then websocket and TLS.\nIf chisel can do remote port forwarding, the 4-layer tunnel could be simplified to three layer.\n. ",
    "chromicant": "I've got a version working with an HTTP proxy. My setup is a bit odd, so the code may be a bit hackish. It works with a HTTP proxy on the client side, and the chisel  server is behind a NGINX server.\nCode is in #14 \n. ",
    "joeblew99": "Ok just had a quick read on tinc.\nIt does mesh networking.\nIt sounds very much like weave, a golang project. You know it ?\n. Starting point :)https://groups.google.com/a/weave.works/forum/m/#!msg/weave-users/VPdMCcVWVjc/n9PovgNmCAAJ\n. Solvedhttps://github.com/weaveworks/weave/issues/1566\n. ",
    "sheerun": "I initially thought that's what chisel for. Is it hard to implement?. How about using https://github.com/ginuerzh/gost as a way to transport ssh packets?. ",
    "mcbernie": "My current fork implements the Feature of using a client as an endpoint proxy.\ncurrently im on heavy testing and hope that all works well.. ",
    "smerschjohann": "@mcbernie this looks nice but why did you fork it instead of trying to integrate it into this codebase and do a PR?\n. How is the status about this plan? Can I help with something?. ",
    "h3ku": "I initially thought that's what chisel for too, something like RPIVOT https://github.com/wi-fi-analyzer/rpivot.\nAny update on the progress?. ",
    "ghost": "Hi.Check you dev@jpillora.com\n. Ok so the real problem here is that we are passing the --host $OPENSHIFT_GO_IP but chisel doesn't really use it when creating a HTTP server. It will always use the default 0.0.0.0 host. OpenShift is expecting us to pass the gear ip instead of 0.0.0.0 and that causes bind: address already in use. I have created a pull request #16 to fix this.\n. Removed unnecessary changes. Sorry I'm new to Go. I'm still learning the language.\n. ",
    "netroby": "Sorry, i can not see --authfile argument for client.\nhttps://github.com/jpillora/chisel/blob/master/client/client.go\nthere no --authfile read and parser\n. see #39 \nping @jpillora . ",
    "neutrinus": "Is there any reason why it's still not merged? I would like to use chisel with proxy... Thank you.\n. ",
    "gonsalez-ru": "Yes, issue is actual.. ",
    "bgaff": "I forgot to mention if it's a TLS tunnel on port 443 you get the same result without the application layer overhead of http.. Oh I see, they are terminating TLS for you in front of your frontend server, I assumed it was TLS all the way to your frontend. Thanks for the clarification!. ",
    "geneticgrabbag": "My pleasure!. ",
    "joshuaquek": "Yeah this is a great idea man. Would love to see this too.. ",
    "Arno0x": "I can't seem to be able to git clone this PR since it's from \"unknown repository\" ... ?. ",
    "testcaoy7": "You need to add a keywork \"websocket\" in your Caddyfile.. ",
    "penguinpowernz": "How to extend the remote spec to signal remote port forward? Prefix with an R? Make the centre colon an equals sign?. Oh I'm thinking SSH protocol... perhaps I misunderstood the SSH related lines in your code.\nInternally do you use SSH to do the local port forwards?  If so we could simply use that to enact remote port forwards.. Yea mate, I'll take a stab at it. Cheers. ",
    "abraiante": "I second this. Initially I thought this was what Chisel did, but when setting it up I noticed it was the other way around.\nMy use case:\nI have a local (like in the client) HTTP service, that I want to expose to the internet. Chisel is running on the server and I would to set-up a reverse tunnel, so issuing for instance, in the server a \nwget http://localhost:8080\nwould open a connection to a port in the client where the HTTP service is offered.\nThe reverse tunnel would be set-up when Chisel clients connects to the server, and as @penguinpowernz mentioned it could be described in the command-line with something like the thing SSH client uses:\n```\n-L [bind_address:]port:host:hostport\n             Specifies that the given port on the local (client) host is to be forwarded to the given host and port on the remote side.  This works by allocating a socket\n             to listen to port on the local side, optionally bound to the specified bind_address.  Whenever a connection is made to this port, the connection is forwarded\n             over the secure channel, and a connection is made to host port hostport from the remote machine.\n-R [bind_address:]port:host:hostport\n             Specifies that the given port on the remote (server) host is to be forwarded to the given host and port on the local side.  This works by allocating a socket\n             to listen to port on the remote side, and whenever a connection is made to this port, the connection is forwarded over the secure channel, and a connection is\n             made to host port hostport from the local machine.\n```\nThis would make chisel one of the most versatile hole-punching firewall tools I know.. ",
    "vizv": "\nInitially I thought this was what Chisel did, but when setting it up I noticed it was the other way around.\n\nThat's exactly what I thought... After I setup the server, I found it's impossible to do the reverse tunneling.\nAdding reverse tunnel support will be nice.. ",
    "hanscees": "Same here. This means the project page could use soms user scenario samples.  . However, if I read this : http://www.thegeekstuff.com/2013/11/reverse-ssh-tunnel/ \nOne should be able to tunnel a shell from a lan behind a firewall to internet over 443 or 80.\nFirst layer would be to use a reverse ssh tunnel to a remote server, that is just sitting there waiting\nUsing ssh -fN -R 7000:localhost:22 username@yourMachine-ipaddress\nas explained in the url above\nSecond layer would be to tunnel the port 22 traffic over chisel using port 80 or 443\nThat would result in a host on internet, you can use to get a shell on a desktop/server in a network behind a firewall.\n1- server on lan (machine A) connects to internet over ssh, over http, to an internet ssh host (machine B) \n2- from your home (machine C) you connect to machine B. There you can connect to machine A.\nVoila. But could that work? \n. If you jpillora can confirm this could work, I can built and document it and write a blog on it.\nAll you have to do than is make a link.. ",
    "gedw99": "Me too. Did this get merged ?. There is one around by the Rightscale / Goa design developer\ncheck It out to see if you like it.\nhttps://github.com/rightscale/wstunnel\nOn Sat, 4 Aug 2018, 15:24 Isaac Aymerich, notifications@github.com wrote:\n\nvery robust and stable, but we need reverse tunneling.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/jpillora/chisel/issues/29#issuecomment-410449294, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ATuCwuAEIfaSBp1GoAjv6HU-v1AXEhGxks5uNaCggaJpZM4M6P5f\n.\n. \n",
    "steom": "we who love the holes are all eagerly waiting. ",
    "neculaesei": "hey, is there any update on when/if this will land in chisel?. ",
    "segator": "very robust and stable, but we need reverse tunneling.. ",
    "sunshineco": "Pull request #72 implements reverse port forwarding.. > Add also support for dynamic remote port allocation like in SSH? (eg. port 0 and then print out the dynamically allocated port in log)\nIt looks like this could be done without major surgery since the server spins up the reverse-port-forwarding proxies before shipping its reply back to the client upon connection establishment, which means that the server can report all the dynamically-allocated ports to the client without changing the protocol (i.e. adding another client/server exchange). One small issue is that the client presently interprets any payload shipped back as an error and aborts the connection attempt. This will need to change to allow the server to ship back dynamically-allocated port numbers as non-error payload. Not a big deal, but something to take into consideration.\nAnyhow, such functionality can be implemented atop the current pull request rather than re-rolling (though, I may take a stab at re-rolling this one if it is not merged in a timely fashion).. > RE: Leaking go routine: So you run chisel via the Go API, and call client.Start a lot?\nNo, not yet, but I had it in mind to use chisel as a library, was glad to see it was already structured as such (with main.go just a thin wrapper over the libified client and server code), so when I saw the leak, I plugged it.\n. ",
    "gurjeet": "Yes, I am aware of that message; it's on line 2 of the output of the snippet I posted. But it's a violation of POLA.\nCan you at least add a new flag, which is off by default to support existing users, that implements this behaviour?. ",
    "Congelli501": "No, the error is too sparse to reproduce (it happened once on 9 clients during a month).\nI create multiple tunnels in a single process. Can other, still running tunnel block the process from exiting (I don't know if the ssl handshake is shared along multiple tunnel of a single process) ?. I haven't seen this issue for a while.\nIn the meantime, I updated chisel and my https reverse proxy, so the issue seems to be resolved.. ",
    "connesc": "Note that eliminating the DNS query has no security benefit since the hostname is always sent as clear text anyway (either HTTP headers or SNI for HTTPS).\nAlso, for the other point, I guess that this is a rather unusual use case. I would suggest to either configure custom entries in /etc/hosts or setup a local DNS server like dnsmasq.. This sounds like a good idea.\nWhat's more, this setup allows to actually hide your chisel endpoints by adding SSL/TLS. \ud83d\ude09. ",
    "undirectlookable": "Thanks for the reply. My case is really unusual, and I can use different location to proxy to different chisel backend in nginx config. Maybe It's better to keep the tool simple and easy. \ud83d\ude42. same as #33 . ",
    "shellster": "An alternative reason for this feature would be to support Domain-Fronting as a way to evade detection by certain countries (China).. ",
    "kmlxk": "Just now I sniffed chisel https request and get this message:\nTLSv1.2 61  Alert (Level: Fatal, Description: Bad Certificate)\nHow to disable SSL certification verify?. @jpillora Thank you very much. \nNginx SSL reverse proxy can redirect by domain correctly.\nSo I tried to modified the following file to ignore SSL certification error .\nFile: chisel-master\\src\\github.com\\jpillora\\chisel\\vendor\\github.com\\gorilla\\websocket\\client.go\nLine: 302\nAdd code: cfg.InsecureSkipVerify = true\nIt works for me. Hope this would help others.\nTHANK YOU again for this great tool!. ",
    "vaijab": "@jpillora I assume running multiple chisel servers behind a TCP load balancer wouldn't work either, would it?\nIf hot-swapping chisel binary without bringing existing connections down is not an option, would you consider a feature that watches auth-file for changes? Just noticed that there is a feature request for this at #30 . ",
    "abh1kg": "@jpillora Can CRIU work here with the tcp-connection-established flag? https://criu.org/Main_Page. ",
    "MilitaryRiotLab": "I cannot reproduce your issue. The files integrity are passed. \n$ gunzip -vt chisel_darwin_386.gz chisel_darwin_amd64.gz chisel_linux_386.gz chisel_linux_amd64.gz chisel_linux_arm.gz chisel_windows_amd64.exe.gz\nchisel_darwin_386.gz:    OK\nchisel_darwin_amd64.gz:  OK\nchisel_linux_386.gz:     OK\nchisel_linux_amd64.gz:   OK\nchisel_linux_arm.gz:     OK\nchisel_windows_amd64.exe.gz:     OK\nTry to verify the checksum of your files against mine. If they don't match, try download them again.\n$ sha256sum chisel_darwin_386.gz chisel_darwin_amd64.gz chisel_linux_386.gz chisel_linux_amd64.gz chisel_linux_arm.gz chisel_windows_amd64.exe.gz\nd1fb14a96b35b807b6b2315bc198b778f0ced472685c708d757a5219ae06bba1  chisel_darwin_386.gz\n651095e7885df539f9cf20ded168c9097051bc99bcaa5cb5442d21267e14317e  chisel_darwin_amd64.gz\nd2f0e9bf854c80b08a355e367d8f8eefb6defc64c0c42e3a970bbd0aa9abfb8d  chisel_linux_386.gz\n8a5d969cab714560a2c7109d7a70bf653d860b846929d2db55782f4ec2604597  chisel_linux_amd64.gz\n5b4300844bcd004ff1d5415a81dde48c9b3505338e8ff1b8bdaeb5f89c415b46  chisel_linux_arm.gz\na0520b0aa5b53fc9f4f2257be26377776ed65ad998a2b515e62b28a8065554f3  chisel_windows_amd64.exe.gz. ",
    "kamakuba": "Seems it's a winrar 5.40 problem...\ni've check under linux box - all fine.\nThanks for fast response!!!. ",
    "cat24max": "This issue appears on every release with WinRAR :). ",
    "AlekSi": "@netroby ping. ",
    "lexesv": "No, but if\nserver\nchisel server --port $PORT --socks5 -v --proxy http://google.com\nclient \nThe connection falls off after the request in the browser through the proxy (14:49:13, 14:50:33 )\n./chisel_linux_amd64 client --keepalive 10s  https://boiling-peak-73284.herokuapp.com 1080:socks\n2017/08/28 14:48:40 client: Connecting to wss://boiling-peak-73284.herokuapp.com:443\n2017/08/28 14:48:40 client: tunnel#1 127.0.0.1:1080=>socks: Listening\n2017/08/28 14:48:41 client: Fingerprint df:79:f4:ac:27:18:be:1c:c9:ed:7e:41:0e:95:ba:78\n2017/08/28 14:48:42 client: Connected (Latency 148.673529ms)\n2017/08/28 14:49:13 client: Retrying in 100ms...\n^C\n./chisel_linux_amd64 client --keepalive 10s  https://boiling-peak-73284.herokuapp.com 1080:socks\n2017/08/28 14:49:33 client: Connecting to wss://boiling-peak-73284.herokuapp.com:443\n2017/08/28 14:49:33 client: tunnel#1 127.0.0.1:1080=>socks: Listening\n2017/08/28 14:49:34 client: Fingerprint 50:3a:e4:2b:4e:95:b8:ab:75:39:d6:9e:f4:46:95:05\n2017/08/28 14:49:35 client: Connected (Latency 142.639984ms)\n2017/08/28 14:50:33 client: Retrying in 100ms...\n2017/08/28 14:50:39 client: Retrying in 200ms...\n2017/08/28 14:50:40 client: Retrying in 400ms...\n2017/08/28 14:50:41 client: Retrying in 800ms...\n. ",
    "MatejKovacic": "I tried chisel and (client) installation is really easy. Also, the idea is awesome. However, I would like to use it on my own server. And on my server I already have HTTPS website.\nAs I understand, for chisel server you have to define host and port. But on my host (let's say myhost.org) at port 443 I already have a webserver running. So as I understand, I cannot run chisel on the same port as my webserver is already running. Is that true?\nAnyway, I see that chisel server has an option --proxy.\nMy next question is then: how I can perform the proxying? Because I have an HTTPS-only website, this means all HTTP requests are redirected to HTTPS automatically.\nSo one option would be:\n1. run chisel on port 80 with proxy set to localhost:8080.\n2. run Nginx on localhost:8080 with auto redirection to 443\n3. run Nginx also on 443.\nIn that case:\n if user come to HTTPS with web browser, he will get HTTPS website;\n if user come to HTTP with web browser, he will be redirected to HTTPS website;\n* if user come to HTTP with chisel, he will get connection to chisel server.\nBut could there been another option?\n1. run Nginx on port 80 with auto redirection to 443\n2. run Nginx also on localhost:4443.\n3. run chisel on 443 with proxy set to Nginx on localhost:4443\nIn that case:\n if user come to HTTP with web browser, he will be redirected to 443 port;\n if user come to 443 port with web browser, he will be proxyed to 4443 port and will get HTTPS website;\n* if user come to 443 port with chisel, he will get connection to chisel server.\nSo, my question is, is that scenario possible?\nAn my next question is... Nginx can be used as a WebSocket proxy. In that case, Nginx \"creates\" a tunnel between a client and a backend server. Is it possible that backend server would be chisel? That would mean that client should connect to a specific URL, for instance https://myserver/websocket and from this location there will be tunnel established to let's say localhost:8080, where chisel would be listening.\nThat is possible?. On a server I said:\nchisel server --port 8080 socks5\nOpenVPN config on server has line:\nsocks-proxy 127.0.0.1 1080\nOn a client side I run:\nchisel client http://myserver.org:8080 socks\nAnd then run OpenVPN client, which has:\nsocks-proxy 127.0.0.1 1080\nin its config.\nHowever, chisel on a client side says:\n2017/10/26 14:35:28 client: Connected (Latency 2.21344ms)\n2017/10/26 14:36:24 client: tunnel#1 127.0.0.1:1080=>socks: conn#1: Stream error: ssh: rejected: administratively prohibited (SOCKS5 is not enabled on the server)\nWhat am I doing wrong?. Thanks.\nAnyway, another question... I noticed that every time I run chisel server I get different fingerprint. This is not handy if you plan to autostart chisel in server mode on remote server.\nIs there any option to make fingerprint persistent?. OK, here is my setup now...\nOn the server (Debian 9):\n1. First I run OpenVPN server:\nsudo systemctl start openvpn@MyVPN_WS.service\nMyVPN_WS.conf has:\n...\nlocal XX.XX.XX.XXX\nport 8081\n...\n\nThen I run Chisel:\nchisel server --port 8080 --auth me:mypasswd --socks5 &\n\n[1] 30289\nroot@vpn:/etc/openvpn# 2017/10/26 22:00:14 server: SOCKS5 Enabled\n2017/10/26 22:00:14 server: Fingerprint b8:ad:8e:15:60:8f:f7:e0:f6:e8:ce:56:e4:85:d3:c5\n2017/10/26 22:00:14 server: User authenication enabled\n2017/10/26 22:00:14 server: Listening on 8080...\nOn the client (Ubuntu 17.04):\n1. First I run Chisel:\nchisel client  --auth me:mypasswd http://myvpnserver.com:8080 socks\n2017/10/26 22:01:48 client: Connecting to ws://myvpnserver.com:8080\n2017/10/26 22:01:48 client: tunnel#1 127.0.0.1:1080=>socks: Listening\n2017/10/26 22:01:58 client: Retrying in 100ms...\n2017/10/26 22:02:09 client: Retrying in 200ms...\n2017/10/26 22:02:19 client: Fingerprint b8:ad:8e:15:60:8f:f7:e0:f6:e8:ce:56:e4:85:d3:c5\n2017/10/26 22:02:19 client: Connected (Latency 37.582275ms)\n\nThen I run my OpenVPN client:\nopenvpn --config MyVPN.conf\n\nMyVPN_WS.conf has:\n...\nremote XX.XX.XX.XXX 8081\nsocks-proxy 127.0.0.1 1080\n...\nOpenVPN connection seems successful. If I type ifconfig into the terminal, I can see tun0 device with correct \"local\" (VPN) IP.\nHowever, I cannot ping my VPN server and IP forwarding does not work (but it is enabled and routing is done correctly with iptables).\nAny idea what could be wrong?. ",
    "aus": "If you are using a HTTP proxy in chisel client, the User-Agent Go-http-client/1.1 will still be exposed during the initial CONNECT request to the proxy. Unfortunately, it seems that it is not possible to customize the CONNECT request header with gorilla/websockets. I've opened an issue here.. Thanks for the feedback! I did originally consider something like you've suggested, but this was a quick solution to a problem. I'll consider implementing as you've suggested, but it may take some more time for me to understand the code (and more of golang).\nI do prefer the R:socks design better. And if multiple clients connect, then the subsequent client can simply specify a free port to listen on (e.g. R:1081:socks).\n. Reworked the code to support the R:socks remote syntax. Let me know what you think. Thanks!. Thanks for the clarification. And good catch. I've add the nil check as suggested. \n(if you got an email notification on  my previous comment, please ignore. I realized I did not have the --socks5 server option on when testing.). For those following along at home, the current syntax works like this:\nroot@server:~$ chisel server --reverse\n2019/02/28 20:13:06 server: Reverse tunnelling enabled\n2019/02/28 20:13:06 server: Fingerprint 60:12:73:13:4a:ad:29:f5:51:f9:4c:05:62:e8:13:2c\n2019/02/28 20:13:06 server: Listening on 0.0.0.0:8080...\n2019/02/28 20:13:22 server: proxy#1:R:127.0.0.1:1080=>socks: Listening\nroot@client:~$ chisel client http://example.com:8080 R:socks\n2019/02/28 20:13:22 client: Connecting to ws://example.com:8080\n2019/02/28 20:13:22 client: Fingerprint 60:12:73:13:4a:ad:29:f5:51:f9:4c:05:62:e8:13:2c\n2019/02/28 20:13:22 client: Connected (Latency 999.8\u00b5s)\nFrom the chisel server (example.com), you can access a SOCKS server on 127.0.0.1:1080 that will originate from the client chisel (12.34.56.78).\nroot@server:~$ curl -x socks5h://localhost:1080 http://icanhazip.com\n12.34.56.78\nThen we see this in the server log:\n2019/03/01 02:23:46 server: proxy#1:R:127.0.0.1:1080=>socks: conn#1: Open\n2019/03/01 02:23:46 server: proxy#1:R:127.0.0.1:1080=>socks: conn#1: Close (sent 101B received 425B)\n. Thanks again for the feedback! I guess I'm a bit confused. My understanding of the linked code block is that it essentially checks whether the --socks5 server option was enabled. Are you saying that the --socks5 server option should be checked and enabled in order for client socks remotes R:socks to work? Or are you saying there should be a client option of --socks5? Or neither? \ud83d\ude04 \nIn my original commit, I had added the client option --socks5 to enable the client socks server. However after your suggestions, I've concluded that the client --socks5 option is redundant if the client is also specifying socks in the reverse remote R:socks.\nI understand the security reasoning for having the server --socks5 option. Since the client specifies the remote, the server should not allow clients with free network access unless explicitly enabled.  But for client socks, I don't really see any risk where neither the server nor client would need to enable a --socks5 option. And the --reverse server option already permits or denies the server-side risk in R:socks remotes.\nHopefully you can clarify things for me. Thanks!  \n. ",
    "circuitry2": "Do I need to set chisel up as a reverse proxy?. ",
    "saswatp": "Let's assume\n-  IP address of box A is 20.20.20.20.  You can replace this with your IP address. \n- Web service running on box A runs on port 80\n- The example below assumes your web server binds to all hosts including localhost.\n\nOn machine A,  host chisel server with the following command \"sudo chisel server -v --port 8080 &\"\nOn machine B (behind firewall) , run chisel client \"chisel client -v 20.20.20.20:8080 localhost:80 &\" \nRun a curl command from your client curl http://localhost/<> . You should see content from the webserver you're hosting in box A\n\n. ",
    "gambol99": "addresses feature request https://github.com/jpillora/chisel/issues/30. ",
    "shashankmjain": "Ok. Thanks. Would be good to have anyways\nOn Mon, Mar 26, 2018 at 10:03 AM, Jaime Pillora notifications@github.com\nwrote:\n\nPossible though outside of the scope of this project, would be a new\nproject with deeper hooks into the OS with much more OS specific code\nOn Mon, 26 Mar 2018 at 1:12 pm shashankmjain notifications@github.com\nwrote:\n\nIs there an option to use the tun/tap devices with ssh to have a vpn\nimplemented over chisel instead of doing port forwarding?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/jpillora/chisel/issues/58, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAmr8_\nXej03s1hTCkcMGQ6fmDAF5oAedks5tiE6fgaJpZM4S6bSt\n.\n\n\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/jpillora/chisel/issues/58#issuecomment-376043695, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ADzK1ik0EtnIp-9iXZLr1dOfx6cO1cKhks5tiG-jgaJpZM4S6bSt\n.\n. \n",
    "jainsm": "Thanks. Let us know if you need any contribution?\n. ",
    "fipso": "how ?. ",
    "schulzh": "@jpillora As far as I can see, this is not the same feature request. The #47 is providing a way to customize the maximum retry interval from the currently hardcoded 5 minutes. I am asking for a timeout limit, after which chisel should give up and exit with an error.. ",
    "nijave": "Have you tried ssh over socks proxy? https://superuser.com/questions/454210/how-can-i-use-ssh-with-a-socks-5-proxy\nI usually just setup a tunnel to a host on the network and use that as a jumphost. ",
    "rgl": "ah I see! thx for historical reference!\nI was thinking about running this on environments that only support inbound https; but maybe I can run the chisel server behind an https reverse proxy? and use a https connection between the chisel client and the chisel server?\nalso, in this https only environment, doing double encrypting seems wasteful, but I don't really known the impact of it. but maybe, can chisel use null ssh encryption?. ",
    "novboy": "sorry, it works fine with ipv6. ",
    "wangyi2005": "chisel.exe client  --keepalive 60s --auth user:pass  https://######.herokuapp.com:443 socks\n2018/07/25 13:20:50 client: Connecting to wss://######.herokuapp.com:443\n2018/07/25 13:20:50 client: tunnel#1 127.0.0.1:1080=>socks: Listening\n2018/07/25 13:20:52 client: Fingerprint db:3d:78:e8:5b:27:b5:9f:ab:06:6f:f7:0c:6c:7f:2e\n2018/07/25 13:20:53 client: Connected (Latency 228.4157ms)\n2018/07/25 13:38:01 client: Retrying in 100ms...\n2018/07/25 13:38:03 client: Fingerprint db:3d:78:e8:5b:27:b5:9f:ab:06:6f:f7:0c:6c:7f:2e\n2018/07/25 13:38:04 client: Connected (Latency 258.4338ms)\n2018/07/25 14:20:33 client: tunnel#1 127.0.0.1:1080=>socks: conn#25: Stream error: ssh: unexpected packet in response to channel open: \n2018/07/25 14:20:33 client: Retrying in 100ms...\n2018/07/25 14:20:33 client: tunnel#1 127.0.0.1:1080=>socks: conn#27: Stream error: ssh: unexpected packet in response to channel open: \n2018/07/25 14:20:33 client: tunnel#1 127.0.0.1:1080=>socks: conn#28: Stream error: ssh: unexpected packet in response to channel open: \n2018/07/25 14:20:33 client: tunnel#1 127.0.0.1:1080=>socks: conn#29: Stream error: ssh: unexpected packet in response to channel open: \n2018/07/25 14:20:33 client: tunnel#1 127.0.0.1:1080=>socks: conn#30: Stream error: ssh: unexpected packet in response to channel open: \n2018/07/25 14:20:33 client: tunnel#1 127.0.0.1:1080=>socks: conn#31: Stream error: ssh: unexpected packet in response to channel open: \n2018/07/25 14:20:33 client: tunnel#1 127.0.0.1:1080=>socks: conn#32: Stream error: ssh: unexpected packet in response to channel open: \n2018/07/25 14:20:33 client: tunnel#1 127.0.0.1:1080=>socks: conn#33: Stream error: ssh: unexpected packet in response to channel open: \n2018/07/25 14:20:33 client: tunnel#1 127.0.0.1:1080=>socks: conn#26: Stream error: ssh: unexpected packet in response to channel open: \n2018/07/25 14:21:13 client: Fingerprint bd:e0:b7:10:1f:63:9a:43:5d:dc:50:cb:40:70:ee:0e\n2018/07/25 14:21:14 client: Connected (Latency 253.8532ms). ",
    "qiangli": "It could be related to https://github.com/golang/go/issues/21941\nI never had time to debug deeper as it works with a lower commit. Here are the steps to reproduce:\n1. check out this pull request anywhere on your local machine (as it uses modules and does not need to reside in $GOPATH/src)\n2. upgrade crypto/ssh in go.mod with: go get golang.org/x/crypto, you should see changes similar to the following:\n-       golang.org/x/crypto v0.0.0-_20170825_220121-81e90905daef\n+       golang.org/x/crypto v0.0.0-20181015023909-0c41d7ab0a0e\n3. do a build: go build and run \n./chisel server\n./chisel client -v  http://localhost:8080 localhost:6022:localhost:22\n(client will hang at:  client: Handshaking...)\nand\nssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -p 6022 $USER@localhost\nwill fail with the following error:\nssh_exchange_identification: Connection closed by remote host\n. Cool, now that you have identified the root problem. Thanks for your great work!. ",
    "saintdev2": "can you please let me know what needs to be done or how it can be achieved plz. Your reply will be highly appreciated. Thanks. ",
    "dsmid": "Descriptive and helpful error messages would be nice.\nThere's no problem in upgrading both sides of the tunnel, the problem was I hadn't got the slightest idea what was going on and what went wrong.. ",
    "matti": "Add also support for dynamic remote port allocation like in SSH? (eg. port 0 and then print out the dynamically allocated port in log). ",
    "tijme": "I would love to see dynamic reverse port forwarding. Maybe I'll take a shot at it myself. \ud83d\ude04 \nNice pull request @sunshineco! . ",
    "patrick-othmer": "Fix: https://github.com/jpillora/chisel/pull/77. ",
    "BlakeMScurr": "These are clearly very minor changes, I hope they're somewhat worthwhile but I don't think they're really worth a maintainer's time! \nMy script is supposed add the function name to the start of the comment and it also does some basic formatting and capitalisation fix ups. If it can't add the function name smoothly it shouldn't make a change. But apparently if it sees grammar/formatting fixes but doesn't know how to add the function name smoothly it makes the grammar change anyway.. ",
    "wen-long": "@jpillora \nuser-app -> chisel-client -> chisel-server -> socks5 proxy -> user-endpoint\n. ",
    "GVRGowtham": "I'm not sure of that. Its the chisel commonly used across the developers to connect to Predix database. Thanks @jpillora I redeployed the chisel using the latest binaries to my server. Thanks, it works now \ud83d\udc4d . ",
    "0xbkt": "@jpillora Do you have any tip for me to do it myself? Where should I start?. ",
    "vetch101": "Is there a way to get the Chisel socks5 proxy to listen on any IP other than 127.0.0.1? . Thanks for the reply.\nI'm really enjoying using chisel, it's great! Thank you!\nI've got a setup where I'm using it with a deployment where I'm using it for log forwarding over the tunnel.\nThe situation is:\napplication node (filebeat) log forwarder --> remote chisel client -----------> \n----> local chisel server --> local log (logstash) pipeline \nThis works great when the tunnel is up and the logstash server is up, or when the tunnel is down, but when the logstash server is down and the tunnel is up, the log forwarder floods the network with logs as it sees the chisel connection, but (obviously) can't reach the end point.\nI thought that I might be able to get it to work by authenticating the connection with SSL certs, and the filebeat log forwarder backs off the tunnel when it's up and the logstash is down, but it also backs off when the logstash server is up as it can't authenticate...\nI tried using it with socks5 proxy - and it all works fine with no SSL (although it has the same problem with the log forwarder flooding the network when it can see chisel, but not the logstash endpoint)... and when I try with SSL, I get the same outcome as with the other situation...\nThat's why I thought it might be helpful to be able to listen on a non-loopback address; but from your reply, it sounds like that isn't possible.\nAre there any other ways that you could suggest that might be viable?\nMany thanks!. Makes sense - thank you!. ",
    "iineva": "I use the same backoff timer for convenient. And logic is ok. Should we add another backoff timer to control HandshakeTimeout?. "
}