{
    "mattetti": "Thanks Jeff\n. thanks!\n. welcome to the gem's contributor, you know have commit rights.\n. Thx you know have commit access to this repo.\nWelcome to the team!\n. That sounds like a good idea, my only question is when do you mutate the\nparams object? We need to make sure that's safe, can't be exploited and\nwon't mess up with the params verification.\nSorry still traveling and not giving all your great work enough attention,\nbut please know I'm really grateful for all you've done so far.\nOn May 9, 2013 2:03 PM, \"Jack Chu\" notifications@github.com wrote:\n\nI would use HTTP Accept headers, I have a wd-sinatra branchhttps://github.com/kamui/wd-sinatra/commit/5afb5f227ae24dbb6c28ddb9e5d5361c838a456dthat will read the accept header and pass the format to\nparams[:format]. So you just set the Accept header to application/xml or\napplication/json and the params[:format] will come back with :json or :xmland then you in your service implementation you can check params[:format]\nand serialize or render different objects accordingly.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/mattetti/Weasel-Diesel/issues/6#issuecomment-17660965\n.\n. The first thing I should do when getting online is to make you a\ncontributor.\nFor things like accept params I think we should use the env instead of the\nparams.\nOn May 9, 2013 3:18 PM, \"Jack Chu\" notifications@github.com wrote:\nYep, I agree with not mutating params. I also questioned it on this issuehttps://github.com/mattetti/wd-sinatra/issues/14.\nI mostly did it because the branch was sort of a proof of concept for using\nthe Accept header and rack-accept and I knew params would get passed from\nmiddleware to the service implementation.\nRe: Traveling, no problem. I've been building an API in Sinatra over the\nlast year and while I enjoyed it, there were some pain points and I liked\nthe direction you went with WD. I really want to use it for my next API\nplatform, so anything I can do to help out and make it more usable.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/mattetti/Weasel-Diesel/issues/6#issuecomment-17663640\n.\n. Sounds perfect\nOn May 10, 2013 12:00 AM, \"Jack Chu\" notifications@github.com wrote:\nSounds good [image: :thumbsup:]\nenv works for me, what should the key be? Maybe wd.content_type?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/mattetti/Weasel-Diesel/issues/6#issuecomment-17692720\n.\n. This was a 1.9 bug, I fixed it and added a spec in this commit: 52d9f379b9100192b3244c473403f8abcca73e48\nTravis is running the specs on (almost) all rubies so I'm pretty confident that this is now fixed.\n. It looks great, I'll merge and since now that we have the CI working, we'll see if that causes an issue. I will update the examples to reflect this change.\nI will however, add a spec to make sure that the old format stays supported.\n. Actually, the doc isn't copied over to api.doc.params_doc where api is a service object. To be more consistent, I'll fix that.\n. wow, I'm just tired, I was in the process of implementing what I said wasn't working when I realized it was actually working. There is however, a problem with namespaces, but that's not directly related.\n. I fully agree, thanks a lot\n. That's a good question, are you talking about for instance a special error code or a specific json structure?\n\nMy experience with web services is that we have a default way to report the error and that doesn't need to be documented in each service.\nI'm open to extend the API to support, for instance @aeden was asking about explicitly specify the status code (201 instead of 200 for instance). I usually do that in the overall description but if we find a nice way to do that in the API, why not.\n. That's a great idea. I'm not quite sure where that should live tho and that's probably why I was only providing end point specific documentation. Do you have a suggestion to provide more global documentation?\n. This is an interesting problem that I \"solved\" by simply adding the :null => true option. So if a response attribute depends on the input, I add all possible response attributes and mark the optional as nullable and explain in the documentation when they are available.\nI'm absolutely open to something more flexible, maybe an enum element type might work tho. I'm absolutely open to extending the DSL to support these use cases. \n. That's a good point, the rake generation task only exists in wd_sinatra and that's why you are saying the error about missing implementation block. The task could probably be ported over to WD itself and require a source path for the API descriptions and an output path for the documentation.\nI don't quite have time for that at the moment, but patches are welcome if you want that done ASAP.\n. That looks like a bug due to the XML/JSON semantic difference, try:\nruby\nservice.response do |response|\n    response.object do |obj|\n      obj.string :status, :doc => \"Response status either OK or ERROR\"\n      obj.string :message, :doc => \"The error message if an error occur\", :null => true\n      obj.object :payload do |payload|\n        payload.string :id, :doc => \"Resource id\"\n        payload.string :name, :doc => \"Resource name\"\n        payload.string :path, :doc => \"Resource full path\"\n        payload.object :metadata, :doc => \"Resource metadata\"\n        payload.array :tags, :doc => \"Resource list of tags\"\n        payload.datetime :created_at, :doc => \"Created at timestamp\"\n        payload.datetime :updated_at, :doc => \"Resource updated at timestamp\"\n      end\n    end\n  end\nI replaced your use of element with name by object I'm not quite sure why metadata is doubled tho.\nLet me know if that fixes your problem and we can look in the problem.\n. There is something definitely wrong in the JSON representation, probably in https://github.com/mattetti/Weasel-Diesel/blob/master/lib/response.rb#L340-L356 \nThe API usage seems fine so it's probably an issue in the representation. I'll try to reproduce the issue and fix it locally. I know that this part of the code is probably the weakest and it's a shame. Do you use the rake task to generate the doc and that's how you see the json structure?\n. Unfortunately, I don't :(\nOn Wed, Jan 8, 2014 at 1:48 PM, The Crab notifications@github.com wrote:\n\n@mattetti https://github.com/mattetti any idea why this is a bug?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/mattetti/Weasel-Diesel/issues/19#issuecomment-31881280\n.\n. Some people have started looking into using the DSL with Rails but I haven't personally. An easy way would be to use wd_sinatra https://github.com/mattetti/wd-sinatra and to mount your app inside Rails. It would also have for benefit to let you easily extract it later on if needs be.\n. are you asking if a specific endpoint can have multiple urls?  Each service can only have one url endpoint, however, an endpoint can internally forward to another one.\n. absolutely, these would be two different endpoints (2 different files), but the service verb would be different. \n. Cool, I really should take the time to look into how that's done, document it and show how to use the param verification as a before filter in Rails.\n. WD works like other Ruby frameworks, if when loading the user code, some code can't be evaluated, an exception is raised and the program exits with an explanation.\n\nWe \"could\" change that behavior and ignore the fact that your code didn't load and keep on running the app but now some endpoints wouldn't work without you potentially noticing.\nI don't think that would be wise to do that, but if you want to try it, you can monkey patch the app loader and change the code you mentioned to something like that:\nruby\nDir.glob(File.join(root_path, \"api\", \"**\", \"*.rb\")).each do |api|\n  begin\n    require api\n  rescue => e\n    puts \"WD couldn't load #{api}, error: #{e.inspect}\"\n  end\nend\n. Agreed\nOn May 11, 2013 1:26 AM, \"Robert Payne\" notifications@github.com wrote:\n\nTake the below input JSON example:\n{\n  'text': 'This is an awesome text post!',\n  'attachment': null\n}\n{\n  'text': 'This is an awesome image post!',\n  'attachment': {\n    'type': 'image',\n    'url': 'myawesomeimage.jpg',\n  }\n}\nI'd love for my API to be able to validate against it but allow\n\"attachment\" to be completely optional. If attachment is non-nil though I'd\nwant to ensure that type and url are both valid strings and part of the API\nspec.\nSomething like this could be really handle allowing it to be null and if\nso skip over the nested validators.\nservice.params.namespace :attachment, :null => true do |attachment|\n  attachment.string :type, :required => true\n  attachment.string :url, :required => true\nend\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/mattetti/Weasel-Diesel/issues/23\n.\n. Patch welcome ;)  I think we all agree this feature needs to get in, nobody\nhad time to write it yet tho.\n\nOn Thu, Jun 20, 2013 at 3:15 AM, Peter Heino notifications@github.comwrote:\n\nI vote for this [image: :+1:]\nI also have the use case for accepting an array of name-spaced objects\nthat would be nice to have a min required if present or completely optional\n{\n  \"name\" : \"My Name\",\n   \"inner-objects\" : [ {}, {}, {}]}\n{\n  \"name\" : \"My Name\"}\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/mattetti/Weasel-Diesel/issues/23#issuecomment-19734521\n.\n. With @kamui PR in, this should solve both @pheino and @robertjpayne problems. I'll close this issue for now, feel free to comment if you think that the provided solution isn't good enough,\n. I HATE accept headers for versioning, this is for me a big no-no. They are\na pain to debug, you don't see anything in the logs and API users get\nconfused. Having the version part of the path is the simplest, easiest way\nand I guarantee you that it works very well :p\n\nOn Fri, May 31, 2013 at 1:04 AM, Jack Chu notifications@github.com wrote:\n\n@mattetti https://github.com/mattetti @raul https://github.com/raul\nOne of the major issues with API frameworks is how versioning is handled.\nI was wondering what your thoughts were about dealing with versioning in WD.\nAs far as I can tell this probably needs a separate issue in wd_sinatra.\nIn WD, we'll need to decide what the DSL will look like for\ndefining/namespacing different versions of services.\nIn wd-sinatra, we'll need to decide how to implement it and how to detect\na specific version. IE.\n1. Accept Header accept-extension: application/json;q=1;v=3\n2. Accept Header custom media type: application/vnd.example.v3+json\n3. URL Path: GET /v1/hello_world\n4. Accept-Version - grape, node-restify use this, it's not part of RFC\n   2616\nI prefer 1, but have heard a decent case for 2 as well.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/mattetti/Weasel-Diesel/issues/24\n.\n. Yes, very simple: we don't add built in support for header versioning :)\nIf people want it, they can add it via a gem\nOn May 31, 2013 7:33 PM, \"raul murciano\" notifications@github.com wrote:\nI don't have strong feelings on this, but I see many people do. Do you\nthink we can implement this with an opinionated default that users can\neasily override (so it doesn't get overwritten with every wd_sinatra\nupdate)?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/mattetti/Weasel-Diesel/issues/24#issuecomment-18759517\n.\n. > so why not also handle versioning with content negotiation?\nBecause it's hidden, it's not a convention and I think it's a terrible idea\n:p\nAs far as logging, you could always log the accept header\nI use WD on APIs with really high throughput, we don't log things at the\napplication layer unless we really have to. We are looking at web server\nlogs and ou don't get to parse custom headers so that's not really an\noption.\nI don't see how they'll figure out how to set the correct media type.\nMedia types aren't frequently used in big APIs, most APIs only return a\ntype and that's fine.\nAs a matter of fact when you run a public API, you sees lots of client not\neven settings these headers. In my mind, unless you decide to enforce them\nyourselves, they shouldn't be required. KISS\nBut aside from the versioning method, don't we need to define how to set\na version in the WD DSL?\nYes, for many years I did it by simply duplicating the service and changing\nthe url. This works beautifully because you aren't changing the existing\nAPIs by accident and you get proper and simpler isolation.\nSo if you use versioning in your routes, you don't have v1-v3\ndocumentation all mixed together.\nThat seems like a bad argument to me, we are just talking about\ndocumentation generation, organizing the documentation based on the url\nversion isn't hard ;) I would also not want to see all the versions of an\nend point documentation. I would pick the version I use and read the doc :)\nI kind of think we should handle versioning like grape does it.\nI think there is room for a plugin/gem to do that, but I don't want WD to\nturn into Rails. I really think that we should only add features that are\ncritical.\n\nOn Fri, May 31, 2013 at 8:32 PM, Jack Chu notifications@github.com wrote:\n\nHa, I'm on the other side of this. I really don't think versioning belongs\nin the route. Also, because content type is now set via accept header, you\nneed to deal with it anyhow, so why not also handle versioning with content\nnegotiation? As far as logging, you could always log the accept header, or\nthe pieces you want logged in Sinatra. If API users get confused by the\naccept header, I don't see how they'll figure out how to set the correct\nmedia type.\nBut aside from the versioning method, don't we need to define how to set a\nversion in the WD DSL? If anything so when you generate documentation, the\ntwo versions are split up. So if you use versioning in your routes, you\ndon't have v1-v3 documentation all mixed together. I think if you're using\nv3, you only want to see v3 documentation.\nI kind of think we should handle versioning like grape does it. Support\ndifferent methods of versioning, which work off of one DSL.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/mattetti/Weasel-Diesel/issues/24#issuecomment-18763203\n.\n. @pheino The reasons why I prefer to split the various versions of an API into different implementations is \n- because if you create a new version the logic changes, possibly the contract.\n- because you shouldn't have much of any real logic in your implementation, which is why it's a block forcing people to keep the code simple.\n\nCode duplication is only a problem if the logic is duplicated, here we have 2 versions of the logic, therefore it's not a duplication it's a safe branching of the logic. This way you know you don't introduce regressions.\n. Sorry I totally missed this PR. It looks good to me, the change of method name might break a few things tho, but that's also easily fixable and the new name is actually better.\n. I'm willing to keep WS active but would def. need some help maintaining the project.\nFor my own startup i'm using Rails for the frontend and Go for the API so I'm using WS for this specific project.\n. I'm planning on writing a book but that won't happen until my startup is\nlaunched :)\nOn Tue, Aug 20, 2013 at 4:44 PM, Jack Chu notifications@github.com wrote:\n\nSince reading some of your tweets and Go articles I've also been\nconsidering trying out Go to build an API. Planning any posts about your\nexperiences building your API in Go?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/mattetti/Weasel-Diesel/pull/25#issuecomment-22986259\n.\n. I'm confused, do you want me to release master as a new gem? I thought I didn't release the top level array response error yet.\n. If master doesn't currently work for you, I'm afraid I won't be able to add\ntop level array response right away since I'm in the process of launching\nmy startup :(\nIf you just want me to cut a gem, I'd be glad to do so. Otherwise I'm\nafraid without a PR I won't be able to get that feature in any time soon.\n\nOn Mon, Aug 19, 2013 at 8:35 PM, Dave Shapiro notifications@github.comwrote:\n\nHey, thanks for taking the time.\nI was interested in seeing if you could release a new version of this gem,\nto include the top level array response ability. I am avoiding the error\nbeing thrown in my tests by not calling assert_api_response.\nIf you don't want to release it, what time line could one expect for a new\nrelease that includes the top level arrays supported in the json validation?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/mattetti/Weasel-Diesel/issues/26#issuecomment-22920479\n.\n. Thanks @kamui please do update the doc and wd-sinatra :)\n. Will do and I will add you to the list of maintainers on rubygems.\nOn Aug 22, 2013 5:02 PM, \"Jack Chu\" notifications@github.com wrote:\n@mattetti https://github.com/mattetti Also, if you get a chance, can\nyou cut a new version? I'd like to require that version in wd_sinatrasince it'll depend on this new version of WD for the namespace class for\ndoc gen.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/mattetti/Weasel-Diesel/pull/27#issuecomment-23135345\n.\n. Gem released, waiting for Jack's email address to add him as a gem owner.\n\nOn Thu, Aug 22, 2013 at 8:21 PM, Jack Chu notifications@github.com wrote:\n\n[image: :+1:]\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/mattetti/Weasel-Diesel/pull/27#issuecomment-23141196\n.\n. Seems good to me as long as we can wrap that up in WD Sinatra to make a\nsimple call to generate the doc (passing the path isn't great user\nexperience)\n\nOn Mon, Aug 26, 2013 at 8:34 PM, Jack Chu notifications@github.com wrote:\n\nHere's a screenshothttp://cl.ly/R2Oo/Screen%20Shot%202013-08-26%20at%2011.32.19%20PM.pngof the theme I created with Bootstrap 3.0. I also managed to fix some\nquirks with the documentation template.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/mattetti/Weasel-Diesel/pull/30#issuecomment-23311114\n.\n. go for it\n\nOn Mon, Aug 26, 2013 at 10:10 PM, Jack Chu notifications@github.com wrote:\n\nI think this can be merged now, unless anyone sees any issues. I have\ncommits for wd_sinatra ready to push once this is merged.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/mattetti/Weasel-Diesel/pull/30#issuecomment-23313406\n.\n. This is a tricky one since describing services is the core feature of WD and having to namespace the method call ends up making things more annoying. That said we could take the approach I took for BubbleWrap and create an WD alias for WeaselDiesel and therefore reduce the amount of code to type on each service description.\n. Agreed\nOn Sep 12, 2013 2:27 AM, \"Jack Chu\" notifications@github.com wrote:\nI think most of those specs revolve around controller_dispatch which\nappears to be deprecated. So it might even make sense to remove those specs\nand the framework_ext code.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/mattetti/Weasel-Diesel/pull/32#issuecomment-24297583\n.\n. correct\n\nOn Fri, Sep 13, 2013 at 7:49 AM, Jack Chu notifications@github.com wrote:\n\nI'm not 100% sure, but I think :controller_name, :controller, and :action\nmight also have been specific to the controller_dispatch feature.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/mattetti/Weasel-Diesel/pull/33#issuecomment-24389279\n.\n. I would have preferred you to use || instead of or, but it's just a small detail ;)  Thanks a lot fo this fix.\n. \n",
    "kamui": "I would use HTTP Accept headers, I have a wd-sinatra branch that will read the accept header and pass the format to params[:format]. So you just set the Accept header to application/xml or application/json and the params[:format] will come back with :json or :xml and then you in your service implementation you can check params[:format] and serialize or render different objects accordingly.\n. Yep, I agree with not mutating params. I also questioned it on this issue. I mostly did it because the branch was sort of a proof of concept for using the Accept header and rack-accept and I knew params would get passed from middleware to the service implementation.\nRe: Traveling, no problem. I've been building an API in Sinatra over the last year and while I enjoyed it, there were some pain points and I liked the direction you went with WD. I really want to use it for my next API platform, so anything I can do to help out and make it more usable.\n. Sounds good :thumbsup:\nenv works for me, what should the key be? Maybe wd.format?\n. @pheino: I don't think you can list errors by the status code, because each user might handle these differently. For form validation errors, some people prefer to return a 400, some return 422, some return 403, so merely describing a 422 in the DSL doesn't explain what the code is being used for.\nFor default errors, such as form validation errors, malformed request errors, etc. I'd suggest something like this:\n``` ruby\nWeaselDiesel.describe_error :malformed_params do |error|\n  error.status 400\nerror.documentation do |doc|\n    doc.overall \"Sending invalid JSON will result in a 400 Bad Request response.\"\n    doc.example \"Some example of malformed input\"\n  end\nerror.response do |response|\n    response.object :error do |e|\n      e.string :name => :message\n    end\n  end\nend\nWeaselDiesel.describe_error :input_validation_error do |error|\n  error.status 422\nerror.documentation do |doc|\n    doc.overall \"Sending invalid fields will result in a 422 Unprocessable Entity response.\"\n    doc.example \"Some example of invalid input values\"\n  end\nerror.response do |response|\n    response.object :error do |e|\n      e.string :name => :message\n      e.array :errors do |node|\n        node.string :name\n        node.string :message\n      end\n    end\n  end\nend\n```\nThey could be stored internally as a hash since they are named. The purpose of the name is so that generators like wd_sinatra could reference them when they need to know what to do in case of these errors.\nCurrently in wd_sinatra, say you had invalid input on a POST request, well right now wd_sinatra returns a 400 with an error message. You can define a hook method that could run in it's place, but if you're going to define it anyway in the WD DSL, you might as well have wd_sinatra describe default errors in this DSL, and then wd_sinatra could call those implementations by the error name. Then the user could override those definitions with their own definitions if they don't like the defaults.\nI'm not sure about per service errors, I'll have to think about that, but @raul came up with this proposal.\n. #30 closes this. To generate docs:\nbash\n$ weasel_diesel generate_doc <path to ruby source files>\n. I think I fixed both issues.\n1. When calling to_hash, the vectors are totally ignored, which is why arrays are not generated in the response. This was easy to fix, just concat vectors and elements.\n2. As far as I could tell, when invoking to_hash the current element isn't aware of it's parent node. You only need to  wrap the element with a key when the element is named and when it's the root node. So I added an optional arg to to_hash called root_node, by default it's true, the recursive calls to to_hash pass false so it's not treated as the root node. This works, but I'm not sure if you would rather link elements together or perhaps there's someway to do this that I missed.\n. I no longer get an exception here, but the first array is ignored. This will fixed by #18.\n. Ha, I'm on the other side of this. I really don't think versioning belongs in the route. Also, because content type is now set via accept header, you need to deal with it anyhow, so why not also handle versioning with content negotiation? As far as logging, you could always log the accept header, or the pieces you want logged in Sinatra. If API users get confused by the accept header, I don't see how they'll figure out how to set the correct media type.\nBut aside from the versioning method, don't we need to define how to set a version in the WD DSL? If anything so when you generate documentation, the two versions are split up. So if you use versioning in your routes, you don't have v1-v3 documentation all mixed together. I think if you're using v3, you only want to see v3 documentation.\nI kind of think we should handle versioning like grape does it. Support different methods of versioning, which work off of one DSL.\n. Since reading some of your tweets and Go articles I've also been considering trying out Go to build an API. Planning any posts about your experiences building your API in Go?\n. Maybe he's referring to #25? It looks like @raul added a PR for top level array response support.\n. I don't have commit access to WD, so here's my commit for documentation for optional namespaces:\nhttps://github.com/kamui/Weasel-Diesel/commit/4b64a64e70c01c5859ae92aac1a6f3ca4b862624\nI'm not sure this feature needs any explanation. Input params can have :null => true and it seems intuitive what this means, I'm assuming this is true for namespaces, so I just added an example of it to the README.\n. @mattetti Also, if you get a chance, can you cut a new version? I'd like to require that version in wd_sinatra since it'll depend on this new version of WD for the namespace class for doc gen.\n. :+1: \n. Here's a sample of the theme I created with Bootstrap 3.0. I also managed to fix some quirks with the documentation template.\n. I agree, but it's necessary for WD to generate documentation since there's no telling where the user might put the ruby files.\nI extracted the cli class from the bin. wd_sinatra will wrap that thor function and supply a source path (api). Then you can generate docs from wd_sinatra without a source path like:\nbash\nthor :generate_doc\n. I think this can be merged now, unless anyone sees any issues. I have commits for wd_sinatra ready to push once this is merged.\n. That's fine by me. It's up to you, I don't mind too much either way, but the WD alias sounds reasonable to me.\nEither way, I think we can merge this PR, since it just extracts the DSL into it's own class and makes describe_service only available within main.\n. I believe the sinatra framework extensions in there are only used by the testing harness in the library. Last time I checked, I don't think wd-sinatra made use of any of that.\n. I think most of those specs revolve around controller_dispatch which appears to be deprecated. So it might even make sense to remove those specs and the framework_ext code.\n. Thanks for this PR @mikesea.\nI'm not sure if params_verification should be required from weasel_diesel. It's more of a utility module there for generator implementations to use and weasel_diesel doesn't really use it internally for documentation generation. wd_sinatra requires it explicitly, but if you're using weasel_diesel just for the documentation aspect, you really don't need params_verification to be pulled in.\n. :+1: \n. I'm not 100% sure, but I think :controller_name, :controller, and :action might also have been specific to the controller_dispatch feature.\n. ",
    "ryfow": "I'm going to try this again after a rebase\n. ",
    "pheino": "I'm finding the need to specify the http status code (200, 201, 202, 422, 400 etc) in order to get proper documentation and more importantly leaving it up to the API implementation to decide.    \nI like the idea of defining the expected response codes for success and failure.  That would probably help with automated testing too. You could make sure the API properly returns http 202 Accepted.  I think if your writing APIs that usually you want to respond with HTTP 400/404/422 in an error case.  \nOne idea is to define http status codes for success and failure:\nRuby\ndescribe_service \"helloworld.json\" do |service|\n  service.formats   :json\n  service.http_verb :get\n  service.success 201\n  service.error 422\n  # OR\n  service.response.success 201\n  service.response.error 422\nend\nThe error response structure I would agree and rather leave at a higher level. I think it still make sense to define it as part of the DSL. \nMaybe a top level configuration block?\n``` Ruby\nWeaselDiesel.error do |error|\n  error.status 422\n  error.response do |resp|\n    resp.object do |e|\n      e.array |item|\n        item.attribute :message => :string\n      end\n    end\n  end\nend\nor API level\nservice.error do |error|\n  error.status 422\n  error.response do |resp|\n  end\nend\nservice.response do |response|\n  response.status 201\n  response.object :object do |obj|\n  end\nend\nservice.implementation do\n  if @obj,save\n    [201, {}, @object.to_json]\n  else\n    [422, {}, @object.errors.full_messages.to_json]\n  end\nend\n```\n. I vote for this :+1: \nI also have the use case for accepting an array of name-spaced objects that would be nice to have a min required if present or completely optional\n``` JAVASCRIPT\n{\n  \"name\" : \"My Name\",\n   \"inner-objects\" : [ {}, {}, {}]\n}\n{\n  \"name\" : \"My Name\"\n}\n```\n. I'm finding the need to support a version-ed API thru the DSL\nI agree about the header thing Matt ;)\nTho I don't like the idea of making a new service just because I hate code duplication of any sort.\nI'm most likely going to implement an API like this \"/v1/hello_world\", but looking for a little help from the DSL\n@kumal - If you want the header support just write a rack middleware to parse the header and modify it to set param[:version] ;)\nThen define your service spec\n``` RUBY\ndescribe_service \":version/hello_world\" do |service|\n  service.formats   :json\n  service.http_verb :get\nservice.params do |p|\n    p.string :version, :required => true, :options => ['v1']\n  end\nend\n```\nHere some other rack version gems \nhttp://tomdmaguire.wordpress.com/2011/11/12/creating-a-restful-versioned-api-using-sinatra/\nTwitter documentation is by version. :) I think picking your version and then looking at those specific docs is the most logical and expected approach.\n@mattetti - do you think using the same service for each version of an API tends to lead to more problems than its solving?  I guess it probably depends if your modifying the contract of the API itself whether it warrants a new version of the API.\n``` RUBY\ndescribe_service \":version/hello_world\" do |service|\n  service.implementation do\n    if params[:version] == 'v1'\n    else\n    end\n  end\nend\ndescribe_service \"v1/hello_world\" do |service|\nend\ndescribe_service \"v2/hello_world\" do |service|\nend\n```\n. ",
    "gsbucks": "Thanks, Matt. I think using :null => true will work well enough for what we need right now. If I find out later we need it to be more flexible I'll come back with a pull request you can look at.\n. ",
    "jarias": "Actually I paste the response declaration I was just trying to see if that error would still show up.\nThis is the correct one:\nruby\n  service.response do |response|\n    response.object do |obj|\n      obj.object :payload do |payload|\n        payload.string :id, :doc => \"Resource id\"\n        payload.string :name, :doc => \"Resource name\"\n        payload.string :path, :doc => \"Resource full path\"\n        payload.object :metadata, :doc => \"Resource metadata\"\n        payload.array :tags, :doc => \"Resource list of tags\"\n        payload.datetime :created_at, :doc => \"Created at timestamp\"\n        payload.datetime :updated_at, :doc => \"Resource updated at timestamp\"\n      end\n    end\n  end\nAnd payload and metadata are still duplicated.\n. That is correct I'm using the rake task\n. I also found another JSON error I was going to log it as a separate ticket.\nruby\n  service.response do |response|\n    response.object do |obj|\n      obj.array :payload do |node|\n        node.string :id, :doc => \"Resource id\"\n        node.string :name, :doc => \"Resource name\"\n        node.string :path, :doc => \"Resource full path\"\n        node.object :metadata, :doc => \"Resource metadata\"\n        node.array :tags, :doc => \"Resource list of tags\"\n        node.datetime :created_at, :doc => \"Created at timestamp\"\n        node.datetime :updated_at, :doc => \"Resource updated at timestamp\"\n      end\n    end\n  end\nRenders:\njson\n{}\n:grimacing:\n. ",
    "deepj": "I have the same problem. No attribute in array is converted to json.\n. For example, this example from README doesn't work properly at all...\n``` ruby\n      # OUTPUT\n      # the response contains a list of player creation ratings each object in the list \n      service.response do |response|\n        response.element(:name => \"player_creation_ratings\") do |e|\n          e.attribute  :id          => :integer, :doc => \"id doc\"\n          e.attribute  :is_accepted => :boolean, :doc => \"is accepted doc\"\n          e.attribute  :name        => :string,  :doc => \"name doc\"\n      e.array :name => 'player_creation_rating', :type => 'PlayerCreationRating' do |a|\n        a.attribute :comments  => :string,  :doc => \"comments doc\"\n        a.attribute :player_id => :integer, :doc => \"player_id doc\"\n        a.attribute :rating    => :integer, :doc => \"rating doc\"\n        a.attribute :username  => :string,  :doc => \"username doc\"\n      end\n    end\n  end\n\n```\n. ",
    "theCrab": "@mattetti any idea why this is a bug?\n. I am thinking it's down to the service.response block.\n. I like @mattetti's approach. \n. @mattetti after looking at your example, I see what's messing my object.\nAny tips on how the INPUT  service.params section of a json_list service looks like? Ex. below\nruby\ndescribe_service \"/json_list\" do |service|\n      service.formats  :json\n      service.response do |response|\n        response.array :people do |node|\n          node.integer :id\n          node.boolean :online\n          node.datetime :created_at\n          node.object :team do |team|\n            team.integer :id\n            team.float :score, :null => true\n          end\n        end\n      end\n    end\n. ",
    "dsshap": "@theCrab were you able to figure this out?\n. I am also using a forked version of wd-sinatra, needed to set a version on minitest\n. Hey, thanks for taking the time.\nI was interested in seeing if you could release a new version of this gem, to include the top level array response ability. I am avoiding the error being thrown in my tests by not calling assert_api_response. \nIf you don't want to release it, what time line could one expect for a new release that includes the top level arrays supported in the json validation?\n. ",
    "timuckun": "Thanks for the quick reply.\nLooking at the rails example app on github the author seems to be using it only for documentation.  I think I might start with that approach. \nThanks again.\n. BTW.\nIs there a way to specify multiple actions /get /get/:id /post etc...\n. No what I meant was if there is a GET and a POST to the same URL but the functionality is different for the two methods.\n. Great Thanks.\nBTW I was able to wire it up to rails but only as a documentation engine. I think that its very useful for this purpose.\n. ",
    "filemon": "code snippet causing issues -> https://gist.github.com/filemon/5309833\n. ",
    "raul": "I don't have strong feelings on this, but I see many people do. Do you think we can implement this with an opinionated default that users can easily override (so it doesn't get overwritten with every wd_sinatra update)?\n. Thanks @mattetti \u2013 are you willing to keep WS active or are you more focused on Go-based APIs these days? :) Since I read your post I'm really tempted to learn Go and use it instead of Ruby for any small API that I need to work on.\n. Can you please sign me up as a beta reader? :)\n. ",
    "safarista": "How do you implement an index list service that doesn't need any params past to it?\n. ",
    "qnm": "@bf4 Looks like this was added recently in https://github.com/mattetti/Weasel-Diesel/commit/835754b80b780b9d321ea74694372ef7458c258d\n. ",
    "bf4": "Awesome, thanks! :rainbow: \n. ",
    "mikesea": "@kamui well, then I'll leave it up to you whether to merge this or not. :) At present, it's an untested method that is not used by the testing harness. I'd vote to just remove it, or move the framework extensions into the spec library to better highlight that they're only used by the tests.\n. I'll send a PR for that then.\n. After more thinking, moving around params_verification is outside the scope of this PR. Considering that and @kamui's comments above, I'm removing that particular commit.\n. "
}