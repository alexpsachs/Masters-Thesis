{
    "camspiers": "@sebastianbergmann ping\n. Hi @sebastianbergmann that makes sense, i definitely understand the motivation for keeping the library small.\nWhat about the rounding code? Currently this library doesn't provide a rounding strategy for multiplication, it just errors when the multiplication factor does not result in an integer amount. Is this the desired behaviour?\nAlso, if multiplication is supported, should division also be?\n. Ah, yes I see what you mean about division.\n. Be aware that:\n9223372036854775806 + 2 > 9223372036854775807\n= false\nI don't know why this is, if you know why this is we can cover this case too.\n. @sebastianbergmann ping :)\n. @sebastianbergmann Is there anything else I need to do to get this merged in? I would love this to get in before the next tagged release (which I would also love). I have a big project using this library and this is a fairly critical feature that the project depends on.\nRegards\n. Thanks heaps. Appreciate it.\n. ",
    "sebastianbergmann": "Thank you for your contribution. As I want to keep the focus of this component narrow, I have to decline your pull request.\n. I would definitely consider a pull request for rounding. The allocateToTargets() and allocateByRatios() methods implement \"division\".\n. This is a generated file that will be removed soon.\n. There is no need for divide(). Use allocateToTargets() (or allocateByRatios()) instead.\n. To be honest, a value object such as Money does not need extension points. That is why the internal API is private and not just protected. The only useful extension IMHO is currency-specific subclasses such as EUR.\n. Currency conversion should be implemented in a separate class.\n. These are lightweight value objects. And singletons are an anti pattern. Won't merge, sorry.\n. I do not like methods with an option like that. Please send a pull request for a separate method. Thanks!\n. This project does not use Composer to manage dependencies (it does not have any). Thus there is no vendor directory to ignore.\n. Already exists at build/phpunit.xml.\n. Closing in favor of 8135f656720662cce41c5f3b57a664d0011cc072\n. This is a so-called marker interface.\n. - https://github.com/sebastianbergmann/money/blob/master/src/exceptions/InvalidArgumentException.php#L23\n- https://github.com/sebastianbergmann/money/blob/master/src/exceptions/OverflowException.php\n. In this case the Money's components exception classes are marked, using the marker interface, as \"belonging to\" or \"coming from\" the Money component. This can be useful for type declarations used in catch statements.\n. I want to go into a different direction and make the constructor non-public and only offer named constructors.\n. Thank you for the time and effort you are investing in this project, Andrew. Once again, though, this is a change that I won't merge. While this pull request solves a real problem I prefer another solution, one that I unfortunately don't have the time to explain or implement at the moment.\n. The right solution to the problem you describe would be to split the part of this component that requires ext/intl into a separate component that depends on this component and is suggested by this component.\nI am not convinced, though, that the problem you describe exists or should be solved. ext/intl is a standard extension of PHP and provided by all relevant Linux distributions. And the functionality of this component that ext/intl is used for is essential and not optional, IMHO.\n. I do not see the need for this, sorry.\n. Merged manually, thanks.\n. Please stop sending pointless pull requests like this.. This component is no longer maintained.. ",
    "GrahamCampbell": "Sure.\n. ",
    "shabushabu": "Cheers! Appreciate it.\n. Hmm, yeah, didn't think of that. What about making setting private methods/properties to protected. Would you consider that?\n. ",
    "hkdobrev": "@sebastianbergmann I somewhat agree with you about the private vs. protected method here. However what would you suggest for extending the Money class with functionality for converting between two currencies. E.g.:\n``` php\n<?php\n$eur = new EUR(100);\n$gbp = $eur->convertTo(new Currency('GBP'));\n```\nIf the Money class keeps its private nature this would not be possible and you would need to create some kind of a wrapper which would accept the money instance as an argument. From object-oriented point of view this kind of extension should stay as an instance method.\nP.S. This is an implementation of a currency conversion wrapper which needs to accept a Money object as an argument: https://github.com/clippings/currency-convert/blob/59eee7fd73c805b71792d34db346ba6a7e07c5e8/src/Converter.php#L68-L80\n. Of course the actual currency conversion, the exchange rates and everything related to that should be in a separate class. But it would be a nice extension of the Money class to add a convert method which would use the separate converter class and return a new Money instance.\n. @sebastianbergmann Any input on this? Thanks!\n. @browner12 I am directing my suggestion to userland, but at the moment a user must do tricks like these to get the list of currencies.\n. FWIW I thought it was intentionally left like that as it is the package name they use on Composer/Packagist.\n. ",
    "ojhaujjwal": "Okay, I know that singletons are an anti pattern.\nBut, with this PR, we can still do:\nphp\n$currency = new SebastianBergmann\\Money\\Currency('NPR');\nWe do not necessarily need to do:\nphp\n$currency = new SebastianBergmann\\Money\\Currency::getInstance('NPR');\n. Okay fine, don`t merge it. I understand These are lightweight value objects.\n. ",
    "browner12": "i'm not following why you're referencing the generate-child-classes.php class. isn't your commit aimed at userland? while that file creates specific currency class files like USD.php and EUR.php.\n. sorry, didn't mean to include the .gitignore commit with this PR. i thought i could sync it to my fork and then submit another PR for it alone, but apparently it automatically added it to this one.\n. i'm going to close this PR for 2 reasons. \n- i accidentally added an extra unrelated commit to it, and i'm not sure how to undo that\n- also i'm trying to merge from master, which I just read is a frowned upon practice\n. the reason I added this is then it allows us to run a composer install, and utilize the composer autoloader. this would also mean you could remove your autoload.php in your src directory and switch your phpunit.xml file in the build directory to utilize the composer autoloader.\nthoughts?\n. i saw that in the comments and was doing some research on them, since I hadn't heard of them previously. while it seems debated whether they are a good practice or not, I could not find actual use of the marker throughout the code. is there a spot it is actually being used?\n. yah, saw those. still just don't really understand the point. from my (very) brief intro into marker interfaces, my understanding is that it allows you to check that some class implements the marker interface. so something like:\nphp\nif($someClass instanceof Exception)\nbut I don't see that anywhere.  would it be better to simply use the built in php exception that all exceptions are extending from?\nphp\nif($someClass instanceof \\Exception)\nif you do need to check for that?\n. hmm.. okay. that's interesting and I can see the use there. thanks for clearing that up for me.  the only other thing I'd say about it then is I think it would be much clearer if you make the name more explicit. For example, call the interface MoneyException. this will help avoid confusion and naming collision, because I'm sure the base \\Exception is used quite often.\n. care to elaborate? I'd love to contribute if possible.\n. sounds good. i figured this one would be a tough sell. I'll keep trying, though, if i find other problems.\nif you ever need some help implementing any of the updates feel free to send me a message.\n. while I agree you're right, I don't see any real need for this, as it's basic composer knowledge.\nagain, fine either way, but IMHO unnecessary.\n. ",
    "TomasVotruba": ":+1: \n. ",
    "clphillips": "The problem arises when you consider that this library is in use in distributed applications that are installed on consumer hardware. Hosting companies and control panels love to disable extensions that are enabled by default. It took cPanel years to enable PDO support by default despite the fact that it was enabled in PHP by default.\nI don't understand why you feel ext/intl is essential, when it's quite obvious from the design that its usage is optional and replaceable (it's only used in IntlFormatter, and IntlFormatter implements Formatter). I love ext/intl, but I don't think the adoption rate is what it should be.\nI'll document for others in a similar situation, that you can set the platform option in composer as a work around. So that's likely what we'll need to do for now, at least until we can gauge the adoption rate of ext/intl from our users.\n. ",
    "royopa": "Hi @browner12 , please read the article, he has some goods justification for using composer via command line:  http://www.sitepoint.com/mastering-composer-tips-tricks/\n. ",
    "whatthefrog": "Sorry, could this PR be closed\n. ",
    "koenpunt": "That I found out about later, but still is confusing, so they're probably better of renaming the package on packagist?\n. ",
    "rikh42": "This looks wrong\n. "
}