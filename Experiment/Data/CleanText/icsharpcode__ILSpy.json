{
    "dgrunwald": "I don't think there's a need to cache the context menu; can you just return a new one from GetContextMenu()? That makes the code simpler (and more concentrated in one location).\n. Sorry, but storing a context menu per tree node is not an option. Tree nodes are supposed to be light-weight (there can be many thousands of them in memory!), they shouldn't reference any WPF objects.\nCreating context menus on demand (on right click) works fine in SharpDevelop (it's used in many places), so if it doesn't work with SharpTreeView, that's a bug that needs fixing.\n. Fixed in fd0250dc701666bf1f5daa5a48ee2983a71149d6\n. Implemented in cfe8df597a5edaf126c761e8ad726d5289aeff3e; but this currently works only when you select a type - if you select just the individual constructor, then there's no field to which the initializer could be moved.\n. Add pattern for \"for\" loops. Closed by d5dcfea7e2800579a283271276eb7132c007fe1f.\n. Fixed in f333ed1e58bccd5654e88b7009b72783d3c7787c\n. Add support for starg, box and unbox instructions. Closed by a9416f2f316a62e4ac71b2f65208c027c1cbce64.\n. Add support for the using statement. Closed by 221781f8f1f03eebcbe428de9278ffcf084f8aff.\n. Add comparisons with 0 or null if necessary. Closed by 798d156670d101a61a4c38fcaf82e2da66bcf415.\n. Remove CFG debugging code - ILSpy doesn't use the CFG as shown in the graph. Closed by 758f18c73f2667591014666e73ee139fe449c022.\n. Closed by 758f18c73f2667591014666e73ee139fe449c022\n. Should be fixed in 2c2801eab8b7f4aa8b4d1d0c99774a9520c13aa4\n. This also occurs when decompiling ILSpy itself (mainwindow.baml or openfromgacdialog.baml)\n. Add foreach pattern. Closed by e7efab1f5b36139fe897ae2ef0dc39117aadb569.\n. I implemented the foreach pattern for the original \"for (;;;) if (MoveNext) break;\", it stopped working when David changed loop detection to use while loops. I'll have to adjust the pattern.\n. Fix foreach pattern. Closed by 3177b969e5e5f28872663ab3071bfa3962153c23.\n. These flag variables are introduced by the C# compiler (in debug builds only).\nThe scoping should be fixed starting with build 349; but we'll still have to get rid of those variables, as they prevent the decompiler from detecting the for or foreach patterns correctly.\n. Output type parameters on type and method declarations. Closed by 5b8600192eb735c073e44e01eae479c8989f6ffe.\n. This was fixed in a61a4c2245b3c531398786519ca4ab275393b34e (Infer types for the temporary variables introduced in ILAst)\n. Use extern modifier for non-abstract methods that don't have a body. Closed by d758ba1ef76f50f69f15f4109255dafb8689efcb.\n. Add support for the stind and ldind opcodes. Closed by eeaabc3c4e4de99f6839d8be1c48a85e830667f2.\n. This is a duplicate of #29.\n. Fix test runner diff output. Closed by 64b116cf94506798f1b3c4a120b074cd23f081bb.\n. This affects more than just 'null' - for example, take two method signatures (string, object) and (object, string), and a call (\"Hello\", \"World\") - the decompiler will have to detect that overload resolution would not produce the desired result, and then insert casts where necessary.\n. NRefactory already implements applicability testing, \"betterness\" (see OverloadResolution.BetterFunctionMember) and reports ambiguities.\nWe just need to translate from the Cecil type system to the NRefactory type system and reuse that implementation.\nNRefactory even implements type inference, so we can avoid explicitly specifying type arguments when it's not necessary.\n. Fixed in f0fc66bff6e2ce9376b5a1e8f77f86cb9025ca0c\n. Add support for initobj, ldobj and stobj. Closed by 254b10b6e308ca602a6191cdfa740b2c33886077.\n. Add support for calling indexers. Closed by b9808b13bbed6fdcfb2c5c0674c29fddc01af484.\n. Replace 'i += 1' with 'i++'. Closed by e8f9febcc0855004ff173e630137711ab9a0e5d5.\n. This question of style; we prefer nested classes to be first.\nThe visual forms designer only requires the form to be the first top-level class. It does not care about the order of nested classes.\n. Don't use the 256x256 icon on Windows XP. Closed by 04cca17e3b06f4cf312e0ff61f6ca9b6bc7fdc7a.\n. It worked fine for me on Windows XP SP2; but I've seen Google produced enough reports about this so that I fixed it anyways.\n. Fix bugs in type analysis. Closed by e8f3e14102137461b7e0b9cd159528b7f074ae73.\n. The folding state is now preserved on the navigation stack (commit bc6e2ddaca1843a8c3346e43001e96edc977a912).\nThanks to Artur Zgodzi\u0144ski for the patch!\n. We won't use your code as that fixes only a special case. I am working on a more general solution that ensures C# overload resolution will pick the overload that was actually called (not only with null literals).\nBut that will take a while, so this is won't fix for ILSpy 1.0.\n. Does this still occur with the latest version? If so, please post the complete IL code of that method.\n. Assign names to parameters. Closed by 892996f07907f5fb57e94502fb1c41d6b140674c, #81.\n. I added array initializer support in 7de3cf9bc4b78794ff093c585f92511b66284178 and 8f8c2ea28019176d94e723f34104e8a0a850360b.\n. Add support for decimal literals. Closed by 27ff71ada3d3109e134e22f47a18eedb3daa6f01.\n. Fix exception in type substitution when accessing multidimensional arrays that have a type parameter as element type. Closed by 680d7a413e04b9c67272816fd904af4f59360ec4.\n. Yes we are interested in it; please create a pull request when you think your code is ready to be integrated.\n. Added in b16ca101285f2ee533b58039ff43d874de23aff5 (ILSpy 1.0.0.467)\n. Which ILSpy version are you using?\nThe current versions (starting with build 0.1.0.406) should work fine behind a proxy.\n. Please reopen if this issue occurs again (in 1.0.0.824 or later). I've never used the .NET proxy stuff before, so I don't exactly know what I'm doing here ;)\n. I cannot reproduce this problem. I tried both a manually configured proxy and using a configuration script; and ILSpy correctly uses the proxy in both cases.\n. Won't fix for 1.0; simply because I can't reproduce this on my machine.\nI'm happy to hear about any ideas on how to fix this.\n. Can you try this again with version 2.0.0.1370?\nI hope this time it'll work correctly with proxies requiring authentication. I tested it without proxy and with a proxy configuration script (but my proxy server doesn't require authentication).\n. Handle ldelem.any. Closed by db44cd1d3ba78672fa8db1088f11fe3290b74281.\n. Add support for unsafe code. Closed by 7b2c444181837a5a81a152826c0a9c1984b72af2.\n. Sorry but these are way more than just minor modifications.\n.NET 3.5 doesn't have Task; so all the multi-threading in the GUI needs to be rewritten.\n.NET 3.5 doesn't have System.Xaml.dll; so the BAML decompiler won't be available.\n. Sorry, we don't have Gallio/MBUnit on the build server and I'm not too happy about yet another testing framework (we use NUnit in SharpDevelop). Can you get rid of those references - either change it to NUnit, or just make the Tests a simple console app.\n. Thanks; merged in with b16ca101285f2ee533b58039ff43d874de23aff5.\n. Fixed in a55f0218e6f6f32a6a142a9d3bf4c5a1bda7301a.\nWe now use 'double.NaN', 'double.PositiveInfinity' and 'double.NegativeInfinity' for decompiling double literals with those special values. This will produce correct and good-looking code in all cases except for the definition of those constants themselves.\n. Fixed by the introduction of copy propagation (5ee3d87388fa7b58d10bc86489837cb81038f5bc and b6b31514de1822550c225c1a62109609b85df98b)\n. Use 'out' instead of 'ref' when calling a method with an out-parameter. Closed by b84ba59c686ccd9dbb4e1923d23cf29b00509c4f.\n. This is by design. The closure classes get decompiled into anonymous methods and thus disappear from the tree view.\nThe goal of ILSpy is to show something as close to the original C# as possible; so we don't show all the compiler-generated stuff.\n. Thanks for the suggestion, I have added options (View>Options) for controlling the decompilation of anonymous methods/lambdas.\n. Are you sure you viewed C# (not C#-no transforms)?\nThe DelegateConstruction transform step should take care of this.\n. Fix references to nested classes within generic types. Closed by 2af007d34c060dbaab8a54c7481cc16f7f1f5966.\n. I have implemented a flat list of search results, separate from the tree view.\nI'm still not completely happy with it, as now the assembly information is missing, and there isn't really enough room for three columns.\nI'll experiment a bit with ListView grouping, maybe that can help showing the assembly names without introducing another tree.\n. I think this is better fixed using ILInlining.InlineInto() as part of the return duplication step.\n. This is fixed now that inlining is performed after goto removal. (efd04b31d8f85902c18772fa2d967a8669f9bb8c)\n. Fix NullReferenceException when viewing assembly that targets .NET 1. Closed by 3908426db010264d744788a69385a5d8c5caff0e.\n. Handle calls to value type constructors. Closed by 5078d2ef89ad965cdeb46c5781adbba8dfda42fe.\n. This seems to be a bug in the WPF TextSearch: WPF always searches from the start of the list, whereas the normal Windows ListView searches starting at the currently selected item.\nI don't see any way to fix this without writing our own TextSearch implementation.\n. Fix decompiling iterator blocks in debug builds when there is no try-finally block and the \"ret(0)\" is reached by fall-through (instead of by a jump instruction). Closed by 9421c4591a2a9da1b6222dd03c82f072a657a640.\n. Don't show compiler-generated code for automatic properties. Closed by 41d6c3f6ebf18c54933c14d36629b4167b4f05c9.\n. I think we don't need an option for this - I don't see why anyone would uncheck it, as the generated code is so trivial.\nMaybe we can combine it with the option for automatic events, once those are implemented.\n. Thanks; merged into ILSpy 1.0.0.541.\n. How can I reproduce this error?\nThat code looks strange, why would a compiler-generated iterator.Dispose() method contain a stfld instruction?\nYieldAnalysisFailedException just indicates that we found some unknown code that the yield-return decompiler doesn't know about. Release builds will handle the exception and just skip decompiling the 'yield return'; only debugs builds leave the exception unhandled (so that problems with the patterns expected by YieldReturnDecompiler immediately get noticed during debugging).\n. Wait a minute, you manually wrote [CompilerGenerated] code? Because as far a I know, the C# compiler's yield-transform will never produce such finally blocks. It would always place the finally blocks into a helper method which is called from both the MoveNext() and Dispose() method.\nIf you wrote that code manually and it's not actually compiler-generated, then the YieldAnalysisFailedException is the expected behavior.\n. But that's just hard-coding your specific case. Any other content in finally block still wouldn't work.\nThe yield-return analysis relies on the assumption that the finally body is within a separate method \"this.$Finally1();\". If that's not the case, it won't work. Hacking special cases for specific contents of the finally body is not a solution.\nThe whole try-finally analysis needs a rewrite to handle this mapping without depending on the finally body to be in a separate method. But I'm not going to do that unless you can show me a compiler that produces this kind of code.\n. Add support for destructors. Closed by dbbd5d872b5d72c976d1b45d16eae45a09fa3d57.\n. Which ILSpy version are you using? The copy propagation introduced yesterday should have fixed this.\n. Fixed in b6b31514de1822550c225c1a62109609b85df98b\n. Implemented post-increment operator. Closed by 4c7a896a844c6f78f9f15c5bb694abbd16cd0bf6.\n. Transform 'try { try {} catch {} } finally {}' to 'try {} catch {} finally {}'. Closed by bf6e4bbfd95d87e1da64137fbcb5c12f4df79754.\n. Fix creation of attribute argument for [MarshalAs]. Closed by 93d1a30ebd6e7adaf79387e6b235ed7240ee4afd.\n. I think this is caused by the pattern expecting the first statement above the while loop to be a variable declaration, not a simple assignment.\nI'm currently redesigning the whole way variable declarations are introduced; I will probably move them later in the pipeline so that patterns don't have to deal with them.\n. The new variable declaration logic was added in c7bbdcd0cb81c182318f188a1ef4e077ed0f403f; for statements now should work even if the variable is declared outside the for statement.\n. Fix \"Missing variable name in created C# code\". Closed by 2601a4901ab2c768f7f59f8afe1bddd631775843.\n. Fix decompilation of arrays as attribute arguments. Closed by c4335dd2ef30f85de556451dfc6ed034113a94a0.\n. For fields/methods on generic classes, the IL code does not directly refer to the FieldDefinition/MethodDefinition, but uses a field/method reference in order to provide the type arguments for the declaring GenericInstanceType.\nYou will have to also adjust the names of all references to the elements you are renaming.\n. I'm not sure how to do that - I suggest you ask on the Mono.Cecil mailing list.\nOr maybe take a look at what a Cecil-based obfuscator (http://code.google.com/p/obfuscar/) is doing to rename members.\n. Yes, I've been thinking about how to do this best. I think the initial IL->C# transformation should only annotate the C# operators with the desired overflow checking mode; and a later step would then insert the minimally required checked/unchecked blocks.\nFinding the absolutely minimal set of required blocks sounds like an interesting problem - it reminds me of the stuff I did for the International Olympiad in Informatics ;)\nJust from looking over your problem description, it seems that this should be easily solvable in linear time using dynamic programming.\n. Hmm interesting, that is a completely different solution than I was thinking of. But I don't see how it would work. It seems that you are introducing only 'checked' blocks/expressions, no 'unchecked' ones? That won't produce correct results, as sometimes it is required to use 'unchecked' expressions even if the compiler setting is to use unchecked by default (and sometimes 'unchecked' blocks help you use a lower total number of blocks than with only 'checked' blocks).\nTake, for example, \"M(a * (b + 1))\", where the multiplication is checked, but the addition is unchecked.\nAnd it is possible that the optimal solution means you have to enclose a whole \"for\" statement in a checked block (e.g. because the initializer, condition and iterator all use checked arithmetic), but then use unchecked blocks within the loop body. Using checked+unchecked you need only two blocks, using checked only you would need at least 3 blocks.\nMy idea would be to treat this as an optimization problem with the following goals:\n1. Use minimum number of checked blocks+expressions\n2. Prefer checked expressions over checked blocks\n3. Make the scope of checked expressions as small as possible\n4. Make the scope of checked blocks as large as possible\n(where 1. has the highest priority)\nSo each assignment of checked/unchecked blocks/expressions has a cost of form (#b+#e), where #b is the number of blocks, and #e is the number of expressions. The optimization would look for the lowest cost, where the sorting criteria is (#b+#e, #b).\nThe algorithm would recursively visit all AST nodes, and compute two versions for each node: one where the parent is expected to provide a closing 'checked' block, and one where it is expected to provide a closing 'unchecked' block.\nReasons for the optimization rules:\nRule 1 is obvious, keep the number of blocks/expressions down.\nRule 2 and 3 mean that 'M(checked(a * 1), checked(a * 2), a + 3);' is preferrable over 'checked { M(a * 1, a * 2, unchecked(a + 3); }'. This is done so that the checked/unchecked keywords are as close to the affected operation as possible.\nRule 4 exists so that the checked blocks include any instructions that don't have any arithmetic at all. This is done so that 'checked { int x = a * 1; int y = a * 2; return y; }' is preferred over 'int y; checked { int x = a * 1; y = a * 2; } return y;'\n. Implemented in 942131b06d30f80e16a71ed379510abe9ea055f6\n. Can you post reproduction steps for this issue?\n. Thanks for reporting this; commit 8770d54506c43280efa60ff1725575207b50923a will avoid using 'checked' for top-level expressions.\nI'll have to think about how to best handle such casts. I don't want to leave them out entirely, as sometimes they are required (e.g. \"object x = (long)someInteger;\"). Maybe just always keep those casts, but don't mark them as unchecked?\n. Closed as duplicate of #89\n. It's not a bug; it's a feature. ;)\nILSpy is removing unused variables because otherwise you'd see lots of compiler-introduced variables left over after some of ILSpy's other transforms. Also, in release builds the C# compiler itself will remove unused variables.\nThen in another step, ILSpy will remove any instructions that don't have side-effects - because instructions such as 'void MyMethod() { 1; \"a\"; }' are not valid C#.\n. Fixed type substitution for arrays. Closed by 8cb85826fc28d0fdc4566d33aedd6ae0a3578f98.\n. Duplicate of #89\n. ReplaceMethodCallsWithOperators already performs this transformation.\nDo you have any example where the existing transformation does not work correctly?\n. The decompiler output is not ordered at all - it uses the metadata order, which usually is the same order as the original C# code. The tree view uses simple alphabetical order so that it is easier to find a specific member.\nAnd the best sorting order is a coding style issue - I'd prefer separating static fields from instance fields; I don't think separating by const/readonly makes sense.\n. Use operator syntax when decompiling operator methods. Closed by 2e4f0411cddec98d20309cceec4014597e7e116e.\n. I've implemented this myself in 2e4f0411cddec98d20309cceec4014597e7e116e by converting the MethodDeclaration into an OperatorDeclaration - this avoids a bit of code duplication.\n. Did you draw those icons yourself, or where did you get them from?\nThey look extremely similar to the VS icons, and I don't think we can use those (for copyright reasons).\nSplitting the icons into multiple layers is a good idea.\nHere are the original SharpDevelop icons that I used for ILSpy: https://github.com/icsharpcode/SharpDevelop/tree/master/data/resources/image/BitmapResources/ClassBrowserIcons\nThe .xcf files (Gimp) have multiple layers, you could use those to extract individual .png files for the layers in the SharpDevelop icon style.\n. Thanks.\nMerged in 603a64e85c443d30cefd6d7f8ca89c4ba75ef9f2.\nYou seem to have rebased Artur's commits on top of yours (instead of just merging), so I merged only the first commits (up to 0fab78c) and then cherry-picked the remaining changes, to avoid having commits duplicated in the history.\n. Duplicate of #14\n. Fixed in 63e11492a6682ee1c03e28a14c1f29451d311283\n. This is by design - those nodes are visible only in IL view, not in C# view.\n. Closed as duplicate of #89\n. As part of IsIndexer(), you are using Resolve(). Resolving a type might cause ILSpy to load additional assemblies.\nThat's OK as part of decompilation, but not for retrieving a property from a tree node - since loading another assembly changes the tree, this might lead to some unexpected reentrancy in the UI.\nAlso, on the HasParameters change: did you submit a bug report for upstream Cecil?\n. Can you elaborate a bit more?\nWhat exception?\nAnd the code above does not compile, so which IL code are you trying to decompile???\n. I think VB creates IL code that uses uninitialized variables when you use the implicit return variable:\nFunction F(x As Boolean) As Integer\n    If x Then\n        F = 1\n    End If\nEnd Function\nAs VB uses the 'init' flag on the local variable section, the CLR will initialize all locals to 0/null.\n. I've talked to some people who used the new (commercial) Reflector version - most of them didn't like the new tabbed interface.\nAt least for the 1.0 release, ILSpy will stay SDI.\n. Should actually fix this, or just call this a feature, not a bug?\nThe decompiled code without the useless instruction was correct: an assignment to a variable that is never used can be deleted without changing the meaning of the program.\nAnd code without useless instructions is certainly more readable; so what exactly is the advantage of fixing this?\n. It's not because \"flag\" is always true; it's because the else block is doing nothing useful!\nIf you add \"return str;\" at the end of the method, then the else block will be decompiled correctly. It's only left out because it's completely useless code.\n. ILSpy performs several classical code optimizations (copy propagation, dead code removal, dead store removal) in order to elimate the noise caused by the stuff the C# compiler injects into debug builds in order to help the debugger.\nThis is an example of \"dead store removal\".\nWe try to be careful to apply optimizations only when they don't make the code less readable (i.e. we perform copy propagation only in some specific cases), but I don't see a good reason to insert special logic in this case. Code doesn't get less readable if you remove the useless portions.\n. We found that this fix causes new bugs (useless compiled-generated variables are visible in decompiled code), so I'll revert this.\nThis issue will NOT be fixed - a dead store is useless and can be left out without changing the semantics of the code; and I'm not willing to invest time into developing a heuristic that could distinguish between compiler-generated and programmer-generated useless code.\n. Thanks, implemented in commit 51c2321a92457a8ce8d0457b345f6ab8aff3bb73. I also added an option to disable the use of .pdb files.\n. Implemented in 1255f87696d3b9229c66f8d0b8f77452d27df104\n. Thanks, merged in with commit 905927274bb35bca20e9edbd311042e9506e4fec.\n. We still need to search other assemblies even if a member is internal; because the .NET BCL frequently makes use of the InternalsVisibleToAttribute.\nAs for the memory consumption, maybe we should patch Cecil to allow unloading the decoded objects?\n. Your fix introduces another problem: when navigating the tree using the keyboard (up/down arrows), the navigation history becomes polluted with all the entries that were navigated over.\nLooking at what Reflector does, they seem to store the selected node in the history when clicking a node, but not when selecting it using the keyboard.\nBut I still found the selection behavior in Reflector annoying:\nI would look at method A, then follow some link (to another class). Then I would look at several methods in that class (often navigating back and fourth between them) to understand that class. And then I wanted to go back to method A. Now in Reflector, that means I had to press 'Back' as often as I navigated within the class (often >20 times).\nThis is why I came up with the current approach that the navigation history only stores when following a link. But I agree that the 'altering history' part is strange.\nNew suggestion:\na) If both the current navigation action and the previous one were done using the keyboard, do not store it in the navigation history.\nThis means when you navigate A -> B => C => D -> E, where \"=>\" is keyboard navigation and \"->\" is clicking a node/link, pressing back would take you E -> D -> B -> A.\nb) Every node is stored at most once in the history. So when you navigate A->B->C->B->C->B->C, pressing back would take you C->B->A.\n. Looks good; I like using the 0.5s for this.\nI think comparing just the nodes is fine - it would be a bit strange to have the node twice in the history just because the scroll offset changed.\n. I cannot reproduce this issue. assemblyFileName (=module.FullyQualifiedName) is always set correctly.\nDo you have any reproduction steps?\n. I'm closing this issue for lack of reproduction steps.\n. There still is knowledge about \"IsPublicNode\" in SharpTreeView's XAML.\nI think it might be better to just give SharpTreeNode a ForegroundBrush property.\n. Thanks, this really improves the quality of the generated code in some cases.\nUnfortunately, it's not correct in general.\nFor example, take this method:\n    public static ValueTypes.S OnlyChangeTheCopy(S p)\n    {\n        S s = p;\n        s.SetField();\n        return p;\n    }\nYour code will inline the 's' variable, and thus change the code's semantics: the modified struct will be returned. We need to be careful to ensure that we inline the variable only in cases where any modifications done by the method will be thrown away - I guess this means the inlined expression must be a calculation or method call; and can't be any of the instructions that have an address-loading 'partner' instruction.\nAlso, your change leads to an inconsistency in the type system: the method call expects a reference, but the inlined instruction only provides a value. I have introduced a pseudo-instruction \"AddressOf\" to handle this problem.\nI'll fix the correctness issue myself, so that I can commit the AddressOf-changes I've already done for this\n. Also, this breaks the ForEachOverNonGenericEnumerableWithAutomaticCast unit test - I don't have a solution for that yet; we would somehow have to make sure that we don't inline the loop variable of a foreach loop. Or make the foreach transformations clever enough to reintroduce loop variables when necessary.\n. This is already possible; you can drag assemblies into the tree view from Windows Explorer.\n. Committed as b4e7a7196c780c46c47531ca266ba641c83d192e\n. I'll remove the mention of X11 - we use the MIT license as defined by OSI.\nThe headers of the source files refer to \"doc/license.txt\", but that doesn't exist. Oops.\nI'll fix that and I'll also convert the license names on the about page into hyperlinks.\n. Fixed in d900a171fa7c8ef1185f15cf0a7eed0aa9de945b\n. I think this was fixed long ago with 680a3730d1c78603aebe3e356644390535c43437 (ILSpy 1.0.0.757)\n. Yes, formatting is changed. It was hexadecimal before, with your changes it's decimal.\nAlso, you seriously want to optimize the ToString() implementation that's used for debugging purposes only????\nOnly very few of your changes are called by the decompiler in release builds at all, and most of those aren't on critical code paths anyways. I'd be surprised if you can even show a 0.1% improvement in performance.\n. There isn't any interest in a Silverlight client from our side.\n. Implementation idea: Replace call site delegate invocations with special IL instructions.\nCreate a bunch of new types of IL instructions, one for each method in the Microsoft.CSharp.RuntimeBinder.Binder class:\n  * DynamicBinaryOperation\n  * DynamicConvert\n  * DynamicGetIndex\n  * DynamicGetMember\n  * DynamicInvoke\n  * DynamicInvokeConstructor\n  * DynamicInvokeMember\n  * DynamicIsEvent\n  * DynamicSetIndex\n  * DynamicSetMember\n  * DynamicUnaryOperation\nThese instructions would contain the information from the dynamic call-site, and have child-instructions for the arguments passed to the delegate call.\nFor example, class DynamicBinaryOperation would have fields:\nCSharpBinderFlags flags;\nExpressionType operation;\nIType context;\nDynamicArgumentInfo leftArgumentInfo;\nILInstruction left;\nDynamicArgumentInfo rightArgumentInfo;\nILInstruction right;\nAll the dynamic instruction types should probably derive from a common base class (DynamicInstruction?), and the flags member might be stored in that base class.\nCreate a new ILAst transform that detects the if (cachedCallSite == null) { ... } pattern and replaces cachedCallSite.Target delegate invocations with the new ILInstructions.\nDue to interactions with short-circuiting operators &&/||, this transform should run before ConditionDetection. Maybe somewhere around the switch transforms?\nThe transform should probably not expect the call site initialization to be directly before the target delegate invocation -- while this assumption held true in all our tests so far, I wouldn't count on it; and it's easy to keep the transform flexible in this regard.\nExtend the C# ExpressionBuilder to translate the new ILAst instructions into the corresponding C# expressions. It's important to cast all input operands to the exact expected type -- either the static type stored in the call-site, or to dynamic (also, mind special cases such as the null literal).\nNow, some instructions (e.g. DynamicIsEvent or DynamicUnaryOperation with operator false don't have a direct C# equivalent). Instead, they are part of a higher-level pattern made up of multiple ILAst instructions (so far, we've identified \"dynamic compound assignments\" and \"dynamic short-circuiting operators\" as separate high-level patterns, but there might be more).\nWe'll handle these in a separate transform. But I think we can ignore them for the first implementation, as there are plenty uses of dynamic that won't encounter these special cases.. I have implemented filtering for types or members. Default is just searching for types, no way to have multiple filters at once.\nI'm not sure if it's useful to allow searching for both types and members - usually you know up ahead which one you are looking for. And the most common usecase seems to be searching for types; showing members by default would just make the types hard to see.\n. I'm closing this issue; we currently have no intentions of changing this.\n. ECMA-335 \u00a712.4.2.8.1 Control flow restrictions on protected blocks / Fall Through\n\"Entry to filters or handlers can only be accomplished through the CLI exception system; that is, it is not valid \nfor control to fall through into such blocks. This means filters and handlers cannot appear at the beginning of a \nmethod, or immediately following any instruction that can cause control flow to fall through.\"\nHowever, the .NET runtime does not seem to validate this requirement. In fact, it seems like it allows code to violate pretty much any of the control-flow restrictions.\n```\n.method public hidebysig static void  Main(string[] args) cil managed\n{\n    .entrypoint\n    .maxstack  8\nldstr \"Before try\"\ncall void [mscorlib]System.Console::WriteLine(string)\n.try\n{\n    .try {\n        ldstr \"In try\"\n        call void [mscorlib]System.Console::WriteLine(string)\n    } catch [mscorlib]System.InvalidOperationException {\n        pop\n        ldstr \"In catch\"\n        call void [mscorlib]System.Console::WriteLine(string)\n    }\n} finally {\n    ldstr \"In finally\"\n    call void [mscorlib]System.Console::WriteLine(string)\n}\nldstr \"After try\"\ncall void [mscorlib]System.Console::WriteLine(string)\nret\n\n}\n```\nThis program executes successfully and outputs\nBefore try\nIn try\nIn catch\nIn finally\nAfter try\nSo the catch handler gets to run even though no exception is thrown! There's no way to decompile such a thing to valid C# code. I suppose the best we could do is:\nConsole.WriteLine(\"Before try\");\ntry {\n    try {\n        Console.WriteLine(\"In try\");\n        goto lbl;\n    } catch (InvalidOperationException) {\n        lbl:\n        Console.WriteLine(\"In catch\");\n    }\n} finally {\n    Console.WriteLine(\"In finally\");\n}\n. Expression tree lambdas are not supported yet - that's one the few C# features we won't have in ILSpy 1.0 (but hopefully soon after).\n. Those are delegate lambdas, not expression trees.\nEnumerable.Where takes Func<T, bool>, but Queryable.Where takes Expression<Func<T, bool>>.\n. I'm working on this, but this isn't trivial at all; since ILSpy directly uses Mono.Cecil for the type system, but our overload resolution implementation in NRefactory uses NR's type system.\n. The newdecompiler branch fixes this issue.. I think this was fixed long ago with 680a3730d1c78603aebe3e356644390535c43437 (ILSpy 1.0.0.757)\n. What kind of invalid character?\nI thought I fixed this in a1205d40e9d7d5f091a08b42c46a9a0dc96e7989, are there any other characters that cannot be represented in XML?\nI tested with an assembly containing \\x02 and \\x03.\n. That was a mistake, should be fixed now.\n. Please list some reproduction steps.\nI tried an interface with [InterfaceType(ComInterfaceType.InterfaceIsIDispatch)], and the attribute decompiled correctly.\n. That also works for me.\nI'm closing this issue due to lack of reproduction steps.\n. I gave this a try, and found some issues:\n1. V1Loader.ImportSpan in AvalonEdit:\nspan.Multiline = !(element.GetBoolAttribute(\"stopateol\") ?? false);\ngets decompiled to\nxshdSpan.Multiline = (((element.GetBoolAttribute(\"stopateol\") ? 1 : 0) ?? 0) == 0);\n1. The \"is\" operator breaks:\n   ICSharpCode.Decompiler, IntroduceQueryExpressions.IsDegenerateQuery:\nreturn !(lastClause is QuerySelectClause || lastClause is QueryGroupClause);\n\nbecomes\nreturn !(queryClause is QuerySelectClause) && queryClause as QueryGroupClause <= null;\nAlso, I'm not really happy about the use of Wrap and ParenthesisExpression to prevent a comparison operator from being negated. I think an annotation would work better.\n. I just tried to decompile some BCL assemblies using your patch, and got an exception in System.Globalization.DateTimeFormatInfoScanner.ScanDateWord (mscorlib):\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\n   at static void System.ThrowHelper.ThrowArgumentOutOfRangeException()\n   at VariableInfo System.Collections.Generic.List1[ICSharpCode.Decompiler.ILAst.ILAstBuilder+VariableInfo].get_Item(Int32 index)\n   at void ICSharpCode.Decompiler.ILAst.ILAstBuilder.ConvertLocalVariables(List1 body) in c:\\work\\ILSpy\\ICSharpCode.Decompiler\\ILAst\\ILAstBuilder.cs:line 588\n   at List1 ICSharpCode.Decompiler.ILAst.ILAstBuilder.StackAnalysis(MethodDefinition methodDef) in c:\\work\\ILSpy\\ICSharpCode.Decompiler\\ILAst\\ILAstBuilder.cs:line 488\n   at List1 ICSharpCode.Decompiler.ILAst.ILAstBuilder.Build(MethodDefinition methodDef, Boolean optimize, DecompilerContext context) in c:\\work\\ILSpy\\ICSharpCode.Decompiler\\ILAst\\ILAstBuilder.cs:line 237\n   at BlockStatement ICSharpCode.Decompiler.Ast.AstMethodBodyBuilder.CreateMethodBody(IEnumerable1 parameters, ConcurrentDictionary2 localVariables) in c:\\work\\ILSpy\\ICSharpCode.Decompiler\\Ast\\AstMethodBodyBuilder.cs:line 98\n...\nDebug builds of ILSpy have command \"File > DEBUG -- decompile all\", which will decompile all currently loaded assemblies. Very useful for testing (and then looking at decompiled diffs). I'm running that command on all .NET 4.0 System.* assemblies.\n. This is our coding style guideline: http://sharpdevelop.net/TechNotes/SharpDevelopCodingStyle03.pdf\nBut we aren't religious about the coding style, so when some contributors sent us patches with the default VS coding style ('{' on separate line), we accepted them as-is.\nOn line endings: we use LF in the git repository, but CRLF on check-out using git's autocrlf feature. We just fixed a bug in SharpDevelop's git integration a few days ago that caused mixed line endings when reverting parts of a file using the editor's change margin. It's likely that some files in ILSpy were messed up by that bug.\n. Finally merged into ILSpy master. :)\nThanks for your work!\n. I don't know; but I looked at the diffs decompiling ILSpy with the old version, and with this branch merged; and did not see a single change where the decompiled code was wrong.\nI did see some regressions where the inlining now got a bit too aggressive (but still producing correct code), but those were quite rare, certainly less frequent than the cases where inlining wasn't aggressive enough in the old version.\nI also looked at portions of the diffs of a couple BCLs assemblies and didn't see any newly introduced bugs there, either.\nBut of course just because it's correct for code produced by the C# compiler doesn't mean it's correct for any IL code.\n. Obfuscated assemblies are not officially supported in ILSpy; this feature is quite unlikely to be implemented.\nYou might want to look at de4dot instead.\n. We've decided this is out-of-scope for ILSpy.. I cannot reproduce this issue.\nI can't make the search pad larger as long as the analyzer pad has maximum size; but making the analyzer pad smaller is possible.\n. The second column isn't unaligned - it's right-aligned.\nI did this because I thought it uses the available space more efficiently, and it also was easier than actually using columns.\nBut it seems to introduce as many problems as it solves, and looks badly.\nStill, not a bug, but a feature change.\n. What is \"Everything\"?\nI want to add a search for (string) constants as well, but \"everything\" then isn't very useful. Maybe a \"types and members\" option?\n. Here is a multi module assembly example: https://github.com/zippy1981/XmlVisualizerv2/tree/netModule_experiment\n. Which ILSpy version are you using?\nCan you post the IL code of the method that is failing to decompile?\n. It's working fine for me. Note that the BAML decompiler was moved into its own plugin - make sure you have ILSpy.BamlDecompiler.Plugin.dll in the same directory as ILSpy.exe.\n. Just to clarify, you need a proxy for internet access and cannot connect without proxy?\nIssue #46 is about ILSpy failing to use the system proxy settings, although all the reported errors so far are about proxy authentication problems, not failure to use the proxy settings.\n. Fixed in 4c9e0bd07c158d63b5ce8eec1cf7c0114ed333dc\n. /navigateTo is already restricted to the assemblies specified on the command line.\nI think this makes sense as a new feature \"/navigateTo:N:ICSharpCode.ILSpy\"\n. I think the code completion logic is not the best choice here.\nI would look into MonoDevelop's \"Navigate to\" feature.\nSee http://mjhutchinson.com/journal/2011/02/monodevelop_tips_navigate_files_and_types\nAnd while I agree that this kind of filtering is useful, I'm not sure that ordering based on match quality makes sense.\n. I don't think this is a bug - the ContextSwitchDeadlock MDA is well known for a high rate of false positives.\nILSpy is not performing any long-running actions on the main thread, and is not using any WPF/COM objects on the background threads.\n. This was fixed with pull request #240.\n. The cause of this seems to be that I was lazy when initially implementing type analysis, and hard-coded the shift opcodes to work on int32 operands.\n. The tests for decimal.MinValue and decimal.MaxValue don't belong in the OutputVisitor - it's supposed to output the AST as it is, parsing+printing code should not change anything.\nAlso, I'm not sure about that forward-scan thing. You could end up skipping any number of instructions (even branch instructions) and pick up an InitializeArray call that wouldn't actually happen at runtime. With the ILAst transforms, you have to be pretty careful to match only a specific pattern so that the transformation preserves program semantics.\nOther than that, the patch looks fine.\nWhat changes to ArrayCreateExpression are you thinking of? ILSpy uses a completely new version of NRefactory which isn't used anywhere else yet. MonoDevelop is currently migrating to it, and SharpDevelop will follow later this year.\n. There's no valid float literal for PositiveInfinity/NegativeInfinity/NaN, so the output visitor has to use the constants - the alternative would be to crash.\nBut for MinValue/MaxValue, there are perfectly valid literals.\nForward scanning: Yes it's only a basic block, but the code could still use the array before initializing it:\nint[] a = new int[10];\nint zero = a[0];\nRuntimeHelpers.InitializeArray(a, token);\nYour transformation would cause the value of the 'zero' variable to change. Or think of method calls that throw exceptions - single basic block, but still a (hidden) control flow edge.\nI still don't see exactly why this forward scanning is necessary. Nested single-dimensional arrays were working fine without forward scanning. The trick is that the ILAst transforms run in a big loop (do{}while(modified);), so the innermost array initializers get transformed first, and once they are all converted to single expressions, the outer array initializers can be transformed without having to skip over any instructions.\nIt is perfectly fine to keep the InitializeArray call as it is if it doesn't directly follow the array creation.\nArrayCreateExpression: Yes, that's a problem with the AST. But for parsed ASTs, we require that all child nodes must have locations within their parent node, and must not overlap. If we always put the top-level specifier in the ArraySpecifiers collection, the arguments would overlap with the top-level array specifier. I'll have to discuss this problem with Mike.\n. Yes, I would expect that C# never outputs such code. But optimizers/obfuscators might reorder code and cause such constructs.\nMinValue/MaxValue: just change the test to use literals. Using the MinValue/MaxValue constants where possible would be a nice feature (not just for decimal), but that's for another pull request.\nnew int[,] { { 0, 1 }, { 2, 3 } } currently causes the resulting ArrayCreateExpression to have neither Arguments nor AdditionalArraySpecifiers, so we will have to change something about that.\n. I merged the changes to 1.0 (ed6380077f355f16da85e3b614a6c4a030cca0f2..8dcea0b27b6c9b542cf64c4738b0931f86f7331d).\nI'll take a look at ArrayCreateExpression-Normalize later.\n. C# also promotes calculations with small types to int (just as any C-based language), so that nicely matches the VES semantics. This numeric promotion is missing from type analysis, which does cause a problem when decompiling code such as:\npublic byte AddBytes(byte a, byte b)\n{\n    return (byte)(a + b);\n}\nDue to missing numeric promotion, ILSpy doesn't realize that the cast to byte is necessary for the code to compile.\nBut that's not the cause of this bug, and also not the cause of #239.\nTo fix this bug, I made sure that ldc.i4 only infers small integer types when doing so does not cause the value to be truncated. (this should match the C# rules about implcit conversion of integer literals to small types)\n. We have now decided on how to represent such ArrayCreateExpressions: when there are no arguments, the AdditionalArraySpecifiers collection will also contain the 'main' specifier of the array being created.\n. The leak might have been caused by the search and analyzer pads retaining references to the loaded assemblies - this was fixed with #230.\n. 5c2f3633a087a0f001c237ad054eed636f6a7203: we now avoid using the compiler-generated variable name if it contains invalid characters.\n. This is fixed on the newdecompiler branch.. The syntax used is the same as in XML documentation files, described in appendix A of the C# specification (\"A.3.1 ID string format\").\nSo it is\nSystem.Collections.Generic.IArraySortHelper`1.BinarySearch(`0[],System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})\n/navigateTo:M:ICSharpCode.ILSpy.GacInterop.#cctor\nBut there seems to be a bug that causes navigation to fail with static constructors.\n. Fixed in f5f1522cfcf18607f8708788c67d55b7d0f8cfd3\n. I re-read the specification and I think all dots in member names are supposed to be replaced with # (currently we do this only for constructors).\n. Your patch adds a 'module' node to the tree view, thus moving all nodes within the module one level down.\nBut multi-module assemblies are rare; so I think we shouldn't show the module node for assemblies that contain only a single module.\n. I have added support for opening secondary modules in commit b813092cfeda27f1e8d6350d438eea68c0f166cb.\nThat patch makes an ILSpy LoadedAssembly refer to a single module; so for multi-module assemblies, the user will have to open each module individually.\n. AvalonEdit 4.2 has a built-in search; we'll merge the changes over to ILSpy for the 2.0 release.\n. This was done long ago (09b0db5cd497e663536599faba30ecb2956408c5).\n. This was fixed as part of #225 in 4c9e0bd07c158d63b5ce8eec1cf7c0114ed333dc\n. Output of ILSpy 3.0-preview2:\nint? nully = new int?(3);\n    float? nullyFloat = new float?(5f);\n    nullyFloat = (float?)nully;\nThere's still a problem with redundant casts, but the core problem with lifted conversion operators is fixed.. The IconBar is back with commit cb02344e528c5a244d79becb098d9e63dfc21175.\n. I think this issue can be closed now that #286 is applied?\n. Thanks for your test cases!\nYour fix also prevents checked/unchecked from being inserted in some valid locations (e.g. \"new int[checked(a+b)]\").\nIt's better to check the role instead of the parent node type.\nI fixed this in 70d1693e917e896351ea2007aed2144630d52cbf.\nAlso if you submit more patches in the future: please use tabs instead of spaces.\n. This will execute the one-shot action when the next decompilation finished - which might be a different one than the decompilation triggered by the jump. Decompilation runs can be cancelled, and a DecompiledFinished event is pretty much useless if it doesn't tell which decompilation has finished.\nIt would be better to pass the callback into the decompilation operation itself (so that it doesn't get called if the decompilation is cancelled), or provide a Task object that can be used to get notified when the decompilation completes.\n. Apart from the DecompilationFinished problems (which I just fixed by adding a JumpToReferenceAsync method), this PR has another problem: it does not necessarily highlight the correct references. For example, if the referenced symbol is in another assembly, it is not highlighted.\nThis is because the MarkReferences implementation was written only for local variables; and does see a type reference and a type definition as equal even if they point to the same type.\n. It's a bit difficult to see what's wrong here, looks like HTML ate your generics.\nI think this is the same issue as #293.\n. I cannot reproduce the bug.\nThe DeclareVariables step takes the unchecked block into account and places the variable declaration accordingly (outside the unchecked block).\nBut the AddCheckedBlocks step doesn't take variables into account and could move a variable declaration into a scope so that it's not visible to all usages.\nSo the correct order is to first run AddCheckedBlocks and then DeclareVariables.\n. I fixed this in 2e74e3f762e2ea9b88c9743157f4b7bf8a2540ff by changing the AddCheckedBlocks heuristic from \"Make the scope of checked blocks as large as possible\" to \"Open checked blocks as late as possible, and close checked blocks as late as possible\".\nThis should ensure that variable declarations (which at that stage are always at the beginning of a block) are not moved into the checked block.\nThe DeclareVariables step will then move the variable to the correct location.\n. We currently do not have any logic that detects whether the type arguments can be inferred by the C# compiler or must be specified explicitly.\nTo avoid having tons of redundant type arguments when using LINQ methods, we currently drop type arguments whenever an extension method (with at least one parameter) is called.\n. Fixed in NRefactory 858d4cc.\n. The ILSpy debugger was cancelled, use SharpDevelop 5 instead.\n. Applied in bbe06cbe7a393369a78122891614bce9de18e1a8\n. Merged in fd72ef15b0f590e72d3b6aee02f3495201ea7374.\n. Did you test this with 120dpi settings?\nI think Window.Left/Top is in WPF coordinates, but Screen expects pixels. The two coordinate systems are the same only on the default 96dpi setting.\n. The validation here acts a bit strange as it only checks the top-left corner of the window. The window can be almost invisible and isn't moved into the view if it's in the bottom right corner of the screen, but moving the window only slightly outside the screen on the left will cause it to reset.\nI'm still not sure on the 120 DPI issue. The patch assumes pixels are WPF coordinates, which might make the screen appear slightly larger than it really is.\n. I fixed #225 in 4c9e0bd07c158d63b5ce8eec1cf7c0114ed333dc without requiring /navigateTo:A, just specifying the assembly on the command line is sufficient.\nI improved the error message for 'Cannot find' as you suggested.\n. Simple Assembly Explorer is using the decompiler library (ICSharpCode.Decompiler) directly, not the ILSpy-specific ILanguage implementations. In fact, SAE does not contain ICSharpCode.NRefactory.VB at all; they only include the C# decompiler.\nSo this is a problem with the SAE ILSpy integration; not a problem with ILSpy itself.\n. These are actually two separate features missing from the decompiler:\n1. We do not support detecting switch statements that get compiled to a series of if (we only detect switch statements using the switch IL opcode).\n2. We never use goto case and use goto+label instead.\n. I cannot reproduce this issue.\nWhich ILSpy version did you use?\nWhich C# compiler settings? (/debug, /optimize etc.)\n. So which ILSpy version did you use? Could you try with the latest build from http://build.sharpdevelop.net/BuildArtefacts/ ?\n. Default/Cancel buttons can specified using IsDefault=\"True\"/IsCancel=\"True\". No need to do it with input bindings.\nI've added IsDefault/IsCancel and fixed window resizing in c00078033899854cb0fefe676e72b87b4dc3bd81.\n. The ILSpy debugger was cancelled, use SharpDevelop 5 instead.\n. Good idea, this should make the code a bit easier to read. It'll still be invalid C#, though.\n(and I discovered a SharpDevelop bug while testing this, SD-1895)\n. This is hard to fix currently - we're using the Cecil typesystem which misses a 'is subtype of' operation.\nI think the correct solution for type inference here would be to apply the C# rules (result type is the input type so that the input type is a subtype), and if that fails, use the expected type.\nFixing this bug will have to wait until we port the decompiler to the NRefactory typesystem.\n. newdecompiler now generates:\nConsole.WriteLine(flag ? ((object)new A()) : ((object)new B()));\n\nIf the target method expects type Base, the operands are still cast to object, and then the whole ternary expression is cast back to Base. Which is not wrong, but also not pretty, so I'm keeping this bug open.. The only bug that I can see here is the position of the IL_9C label (it should be in front of the 'try {').}\nI don't see a better way to represent this control flow using if statements; we would have to detect this kind of construct as a switch statement to create more readable code.\n(the control flow looks correct, invert the condition and reverse the then and else blocks to see what it's doing)\nThe transform for switch over strings is currently quite fragile, runs way too late (it's a C# transform) and works only when the IL was using a switch opcode. We'll have to rewrite that to run as a ILAst transform and detect if-goto-sequences as well as switch opcodes.\n. This was fixed in the new decompiler engine (which just landed on the master branch) -- it no longer uses labels in the ILAst, and guarantees that branches never jump into nested blocks.. The Clone() method already clones the annotations, so all your patch does is to duplicate them. Did you mean to copy the annotations from mre instead?\n. Clone() copies all annotations - annotations that implement ICloneable are cloned, others are copied by reference.\nmre.ReplaceWith(replacement.Clone().CopyAnnotationsFrom(replacement)); does not make sense as the annotations from replacement are included twice; mre.ReplaceWith(replacement.Clone().CopyAnnotationsFrom(mre)); would make more sense. I don't think there's any ILVariable on the mre though, only the FieldReference.\n. Yes this is correct, the expected type is the type expected for the field assignment. The difference between inferred type and expected type means that there is a cast from Battlestar<T>.Galactica to Battlestar<T>. As this is an implicit downcast, it's ignored when generating C# code.\n. ILSpy already has 'View > Show internal types and members' which toggles the member visibility in the tree view.\nI don't think it makes sense to decompile a complete class but hide non-public members - when you're decompiling, you need to see implementation details.\n. OK I thought the semantics of nullableof/valueof/wrap were weird before I started implementing nullable lifting for the new decompiler...\nBut now that I've handled most of the cases, I have to agree they were super, super weird. Lots of magic happening there, with operators on bool? behaving different from those on int?, etc.\nI hope my new representation of lifted operators for the new ILAst is more sane.\nAnyway, I've tested your code with the new implementation and it handles all the lifted operators correctly, without any GetValueOrDefault() calls.. This was fixed in the new decompiler engine (which just landed on the master branch).. This was fixed in the new decompiler engine (which just landed on the master branch).. I don't think this is still a problem with the NR-based type system; all type references should be resolved in a context where the true type parameter is available.. Can you post the IL code of the method that failed to decompile?\n. This was likely fixed in the new decompiler engine (which just landed on the master branch).. This was likely fixed in the new decompiler engine (which just landed on the master branch).. This was likely fixed in the new decompiler engine (which just landed on the master branch).. What should happen here is that the whole switch-on-string-pattern should not be applied if the labels aren't constants. So the code would keep using an explicit dictionary and switch over integers.\n. This was likely fixed in the new decompiler engine (which just landed on the master branch).. The new decompiler engine (which just landed on the master branch) should be better at control-flow reconstruction. Please reopen if there are still issues.. Looks like ILSpy didn't detect that those get/set methods belong to a property.\nMaybe ILSpy couldn't find the assembly defining those properties? Check that all the dependencies are loaded into ILSpy.\n. > At present whenever I see an expected type that does not match an inferred type, I treat it as a cast, because in most cases that is what it seems to mean in ILAST.\nThat is indeed the intention behind the ILAST. Unfortunately the implementation doesn't match the intention; in fact it's broken in several horrible ways. I've given up fixing type inference issues in ILSpy for now; that code needs a complete rewrite and I don't have the time for that.\nThese are the two major problems:\n1) IL type analysis and C# type analysis are mixed.\n IL type (e.g. 'is this add instruction dealing with floats' or 'is this comparison a reference comparison'?) is a different thing than decompiler type analysis (which C# type is best for this IL type?). Currently the same code tries to do both things at the same time, and that's making some stuff more difficult (e.g. #338).\n2) We don't actually have a type system.\nThe code just can't tell whether B or I is the more specific type; we don't have any 'is subtype of' (as I told you in #326). All the type analysis asks for deciding which type is more specific is \"which type has more information, given TypeAnalysis.GetInformationAmount()? This works out for primitive types, but not for any other types.\nTo fix this, we'd have to rewrite the code using NRefactory.TypeSystem instead of Cecil.TypeReference.\nSuch a rewrite could then also use NRefactory's ability to analyze C# code, to make sure the C# and IL semantics match up. This would allow us to ensure the decompiled code uses the correct overload of a method.\nThe following issues are all dealing with the same underlying problem: #40 #180 #217 #250 #287 #293 \n. The newdecompiler branch no longer has expected types (or any C# types at all) in the ILAst, so I'm closing this issue.\nIf you are still maintaining JSIL, you should take a look at that branch. We've made significant progress in decompiler correctness, to the point where we can decompile libraries like Mono.Cecil or NRefactory.CSharp, recompile them from the decompiled project, and have them pass their original test suites.\nThe downside is that the newdecompiler does not yet support all detecting all the high-level C# constructs that were previously supported.. Runtime version != target framework version.\nIf we wanted to display the target framework; we'd also have to detect .NET 3.0/3.5.\n. This was likely fixed in the new decompiler engine (which just landed on the master branch) -- at least because we know escape invalid identifiers.. Which assembly does the Query property come from? ILSpy needs to load the assembly with the property definition in order to detect that the setter method belongs to a property.\nIf that assembly isn't in the same directory as the assembly you are decompiling, you will need to load it manually.\n. I've implemented this in AvalonEdit 5.0.\nILSpy will update when AvalonEdit 5.0 is officially released.\n. This was likely fixed in the new decompiler engine (which just landed on the master branch).. We cannot accept this pull request -- ILSpy uses the MIT license, but Levensthein.cs is GPL.\n. This was likely fixed in the new decompiler engine (which just landed on the master branch).\nStack underflows should no longer crash the decompiler, but generate an \"invalid instruction\" opcode.. This sounds like an issue with NRefactory, not ILSpy. The NRefactory library is a separate project, and the version included with ILSpy is outdated. Try the latest NRefactory version; I know that several bugs related to preprocessor directives were already fixed.\n. This is fixed in the new implementation of nullables in ILSpy 3.0.. This was likely fixed in the new decompiler engine (which just landed on the master branch).. This was likely fixed in the new decompiler engine (which just landed on the master branch).. Those \"nodes\" are still WPF tree nodes. Pretty much all the code in ILSpy is WPF-dependent UI code.\nThe decompiler logic itself is already in a separate assembly: ICSharpCode.Decompiler.\nMonoDevelop already uses ICSharpCode.Decompiler on OS X and Linux.\n. @jeremymeng: The non-UI-related code is already extracted into ICSharpCode.Decompiler.dll. The main class you're supposed to use is CSharpDecompiler or WholeProjectDecompiler.\nCSharpLanguage was never meant to be the entry point for using the decompiler API, it's just the class that corresponds to the \"C#\" choice in ILSpy's language dropdown.. If you're running into decompiler crashes, please report them so that we can fix them.\nWe won't add a mode that ignores errors.. The new decompiler engine (which just landed on the master branch) uses a new Cecil version (0.10), which fixes many problems loading .PDBs.\nI'm closing this issue on the assumption that this fixes the problem; please re-open if there is still an issue.. This was likely fixed in the new decompiler engine (which just landed on the master branch).. Can you try with the new decompiler engine (which just landed on the master branch)?. I'll assume that this was something similar to #631, so the performance issue is likely fixed with the new decompiler.. It's wrong if there are multiple overloads, and leaving the cast implicit causes C# overload resolution to select a different overload.\nWe don't have any logic in ILSpy that detects whether implicit casts are redundant. In fact, we don't even have a proper type system (see #381).\n. This was fixed in the new decompiler engine (which just landed on the master branch).. The \"obj\" directories are for temporary files while compiling; you're not meant to run ILSpy from there. The actual build output is in ILSpy/bin/release/.\n. This indicates that ILSpy didn't find the definition of the get_property method (so it couldn't see that the method belongs to a property). Same with enums: if the enum definition isn't found, ILSpy cannot find the name for a value.\nIf the .dll defining the method and enum is in a different directory than the .exe, you need to manually open that .dll in ILSpy so that the decompiler can find it.\n. The decompiled code looks correct to me. Note that the second break is only reachable through the first break, so those do the same as the original return.\nI'm not sure how we could get ILSpy to find a more readable representation of this control flow.\n. Triage: the newdecompiler makes this worse and emits a jump to a non-existant label :(. I don't think this is a bug, the parameter name is just a space.\nILSpy doesn't try to undo obfuscations -- doing so would create an endless amount of work for us as new obfuscators are released.\n. This was likely fixed in the new decompiler engine (which just landed on the master branch).. Missing casts for overload resolution should be fixed on the newdecompiler branch.. ILSpy cannot run on Mono, as it uses WPF which Mono lacks. You can use MonoDevelop instead, it includes the decompiler from ILSpy.\n. Fixed in f538d20de525695733114a1e81d49bfa7d1ee0cd.\n. Also, I don't really like the idea that we'd have to pull in a NuGet package for the test case -- especially since NuGet isn't set up (yet?) as part of the automatic build, so the test case would cause a build failure.\n. The fix for #365 looks OK, so I've cherry-picked that: db1d106379826f864e79761c5a4923d16909e0dd\nThanks!\n. You can already search in a specific namespace by including the namespace in the search term, e.g. generic.list.. This is fixed on the newdecompiler branch: we now avoid moving code into nested blocks if it's referenced by a goto.. I'm closing this as by-design; because the save-to-disk decompilation now can produce slightly different code from the normal decompilation (due to escaping invalid identifiers).\nHowever, hopefully the new decompiler engine (which just landed on master) solves the \"spend some minutes waiting\" problem by being faster.. ILSpy has a step for decompiling switch on strings, but that only handles Dictionary<string, int>, not Hashtable.\n. It's TransformSwitchOnString in PatternStatementTransform.cs.\nUnfortunately it's currently implemented as a C# transform which tries to detect a specific pattern with the if (dict.TryGetValue()) call. This is a problem in certain scenarios, as control flow analysis / goto-removal sometimes produces different patterns. It would be better to do this step earlier in the decompilation pipeline (in the ILAst, before the control flow transformations), but we haven't had the time to re-implement this step for the ILAst.\n. I cannot reproduce this. marshal() is a special IL-level attribute; and as far as I can tell, we've been translating it to the enum reference ever since we had support for P/Invoke declarations.\nHere's the current test case.. Duplicate of #221. I don't think we'll ever support this special case.. Names like arg_##_# indicate that there was no variable in the IL code, but ILSpy created a variable to represent a slot of the IL evaluation stack.\n. The new decompiler engine (which just landed on the master branch) adds Roslyn support for all language features supported so far (see #829 details).. This was fixed in the new decompiler engine (which just landed on the master branch).. On the newdecompiler branch, we now have two categories of test:\n\n\n\"pretty tests\" use .il + .cs files. If the .il files do not exist yet, they are automatically created from the .cs file the first time the test is run. But we commit these files to version control to be robust to future compiler changes.\n\n\n\"correctness tests\" just have a .cs file (or sometimes: just a .il file). Here, we don't compare the decompiled source code, but instead the runtime output (thus, these tests need lots of Console.WriteLine calls to ensure the test can detect differences in runtime behavior).\nThese tests don't care if we end up introducing lots of temporary variables or even goto statements, as long as the decompiled code still produces the same output.. I don't have System.Windows.Forms.WindowsCE.asmmeta.dll handy for testing, but the new decompiler should handle stack underflows more gracefully.. Duplicate of #217, which is fixed on the newdecompiler branch.. This was likely fixed in the new decompiler engine (which just landed on the master branch).. ILSpy 3 now has an option \"Show info from debug symbols, if avaiable\". If this is checked, the IL view (and the \"IL with C#\" view) will show sequence points from the .pdb.. I think the ILSpy sequence points solve this issue.. Related issue for the event analyzers: #199. Triage: newdecompiler added the CharSet enum link on the rhs; all the other links are still missing.. Value propagation got tweaked in the new decompiler engine (which just landed on the master branch).\n\n\nWhile still not optimal, these examples are now looking better than before:\nstring[] S_30 = new string[5];\n        int num = (int)options;\n        S_30[0] = num.ToString(NumberFormatInfo.InvariantInfo);\n        S_30[1] = \":\";\n        S_30[2] = text;\n        S_30[3] = \":\";\n        S_30[4] = pattern;\n        string key = string.Concat(S_30);\nif (!this._dependencyProperty.IsValidValueInternal(currentPropertyValue))\n        {\n            object[] S_33 = new object[2];\n            S_33[0] = this._dependencyProperty.Name;\n            throw new System.InvalidOperationException(SR.Get(\"Animation_CalculatedValueIsInvalidForProperty\", S_33));\n        }. newdecompiler removed both type inference nor goto labels at the ILAst level, so these exceptions can't happen anymore.. This was fixed in the new decompiler engine (which just landed on the master branch).. Triage: newdecompiler didn't change anything here; this is still an issue.. Seems to be fixed on the newdecompiler branch.. Wait, were you decompiling IL all the way back to C# just to re-compile to C++?\nOr did you use our intermediate representation (ILAst)? Your use case sounds like a good fit for the ILAst -- it gives you high-level control flow and expression-oriented code, but is otherwise much closer to IL than C# (especially with the new decompiler). It should also be easier to consume as an input language than C#.\nAnd if you're not going via C#, you can disable most of the decompiler transforms (which is good both for performance and bug count).. Fixed on the newdecompiler branch.. The customizations aren't heavy, they're extremely minor. The bigger problem is that ILSpy is stuck on an extremely outdated version of NRefactory. (2012-08-23)\nI'm looking into merging the customizations back to NRefactory, and bringing ILSpy up to date.\n. @SamB: We already merged those some time ago; we just forgot to close this issue.\nSee https://www.nuget.org/packages/ICSharpCode.Decompiler\n. This change doesn't belong into NRefactory. If the AST uses a single AttributeSection, the output should also be a single AttributeSection.\n. Triage: still an issue with the new decompiler engine:\npublic void Method()\n    {\n        Dictionary<ushort, ushort> S_1 = this.dictionary1;\n        ushort num = this.ushort1;\n        this.ushort1 = (ushort)(num + 1);\n        S_1.Add(num, this.ushort2);\n    }. Ensure that the assembly that containing 'Orientation' property is also loaded in ILSpy.\n. ILSpy will correctly decompile the usage of properties if it can find the property definition. If the property definition is unavailable because the assembly defining the property cannot be found, it is impossible to tell the difference between property setters and normal methods.\n. Fixed on the newdecompiler branch.. Whoa, good find @0xd4d.\nA control in a container with Visibility=Collapsed still gets animated? I'd call that a WPF bug.\nSetting IsEnabled=false doesn't help, the progress bar still causes WPF to render at 60 FPS. Setting IsIndeterminate = false while the progress bar is invisible solves the problem: the frame rate goes down to 2 FPS (if the caret is blinking) or 0 FPS if the editor doesn't have the focus.\n. By the way, the \"WPF Performance Suite\" (wpfperf.exe, part of the Windows SDK I think) can be used to debug this kind of issue -- the option \"Show dirty-region update overlay\" clearly shows the progress bar as culprit.\n. OpenAssembly is called in a lot of places, are you sure all of those should re-load the assembly?\n. System.CodeDOM cannot represent many C# constructs; it's not really usable for anything except simple code generators.\nICSharpCode.Decompiler can give you an ICSharpCode.NRefactory.CSharp.SyntaxTree for the decompiled code. But note that ILSpy's decompiler isn't perfect, and sometimes produces invalid C# or C# with slightly different semantics. For instrumentation, it's probably best to directly modify the IL code (e.g. using Mono.Cecil).\n. This feature should be added to the decompiler, not to the NRefactory library.\nIf you really need to change NRefactory, submit to the upstream repository first: https://github.com/icsharpcode/NRefactory\nWhen https://github.com/jbevain/cecil/pull/214 lands, we're going to delete the copies of Cecil and NRefactory in the ILSpy repository and use the NuGet packages instead.\n. There's no float literal in C# for PositiveInfinity, so NRefactory has the choice between using the constant and throwing an exception. The former makes life easier for code generators, so that's why we support those constants there.\nHowever, the situation is very different here: NRefactory is not just used for code generation, but also for transformations.\nYour code would make ParseExpression(\"255\").ToString() result in byte.MaxValue. Consider the \"extract method\" refactoring -- would you expect your IDE to replace all occurrences of 255 with byte.MaxValue when extracting code into a new method?\nAlso consider that byte.MaxValue has type byte, not int, so the refactoring would end up changing the semantics of the code!\n. Please provide a description of what the pull request is changing. Don't make huge pull requests with tons of unrelated changes.\nThe debugger is broken and unmaintained, please don't add it back.\n. This was fixed in the new decompiler engine (which just landed on the master branch).. Nice catch!\nThanks for the patch.\n. Ctrl+A, Del ?\nYou can also create delete the whole assembly lists in File > Open List.\n. That seems like a bit too much for a tooltip -- wouldn't it be better to show this as a comment when decompiling the assembly node? (in fact, the IL disassembly already does this; it's just missing in the C# view)\nThat would also allow the user to copy the public key without using a special context menu action.\n. Maybe the installer could add an explorer context menu item \"Open with ILSpy\" to .dll and .exe files?\nAs it is, I don't really see an advantage of the installer over the binary .zip file.\n. ILSpy doesn't have any status bar; and I don't think we should add one.\nThe decompiler already starts the code fragment with a comment containing the full class name (so that users don't have to look at the tree to see the namespace); maybe we should just use the assembly qualified name in that comment?\n. See also: #274. Fixed in 75dfa785d71c97c140f7911e2243c21614b2be54.\n. I think this bug is fixed in the ILSpy master branch; gotos into nested blocks should not happen anymore with the \"newdecompiler\" architecture.\nI tried testing your IL snippet, but it's a bit complicated to get running given that it's missing the types for the parameters and local variables.... Good news: In the new decompiler, the first few steps of the decompilation pipeline seem to handle this huge method just fine now.\nIt doesn't take too long to get through the early passes, and only takes about 400 MB of memory. But then there seems to be some performance problem in the block transform stage. It doesn't seem to be making any progress even if I let it run for 10+ minutes.\nEdit: turns out to be a simple infinite transform loop due to a useless ternary (b ? 1 : 1).\nWith that fixed, the method gets decompiled (into 34212 lines of C# code) in acceptable time. I'll push the fix tomorrow.. A release build with the fix decompiles the AI() method in 45 seconds.\nThere still seem to be a few unnecessarily quadratic algorithms making up the majority of this runtime.. > I think most of their work is on the new decompiler branch\nI have some experimental ideas on that branch, but I'm no longer working on them.\n. The newdecompiler branch was merged to master recently.\nIt fixes this bug, and in general should handle Roslyn codegen just as well as pre-Roslyn. (we run our testcases with both compilers).. This was fixed in the new decompiler engine (which just landed on the master branch) -- the Roslyn lock() pattern is now supported.. This was fixed in the new decompiler engine (which just landed on the master branch).. There are no hard-coded paths in ILSpy (certainly not \"C:\\Utils\").\nMy guess is that you opened an assembly list created by a previous version of ILSpy that was installed in that path.\n. This seems fixed in ILSpy 3, I'm getting if ((uint)c >= 97u && (uint)c <= 122u).. Instead of looking at the modifier name; shouldn't GetTypeCode just ignore modifiers and get the type code of the underlying modified type instead?\n. I've fixed GetTypeCode by using the element type instead.\n. You can't delete ICSharpCode.Decompiler -- there isn't any other repository for it; the ILSpy repository is the main repository for ICSharpCode.Decompiler!\nAlso, the latest NRefactory NuGet release is missing some critical bugfixes for ILSpy, so you can't use that either.\nI would accept this PR if you replaced only Mono.Cecil (and maybe also AvalonEdit).\n. This was fixed in the new decompiler engine (which just landed on the master branch).. Compared with ildasm, the ILSpy IL output is missing the bytearray definition:\n.data cil I_000edeb8 = bytearray (\n   ...\n). It's highly annoying to try to reassembly an IL fragment where the types of local variables and parameters are missing, so I'm not going to try this... but I'm pretty sure that this got fixed when we merged the newdecompiler branch.\nThe ILAst now keeps track of the original initlocals store, and the C# translation should declare the variable as = default(T) where necessary.\nAlthough this test case looks more like variable splitting incorrectly thought the stores in the try would not be visible in the finally. That's probably also fixed, as we completely reimplemented that part of the decompiler.. Does the standard WPF tree view do multiple selection?\nAlso we use:\n * drag'n'drop to reorder\n * potentially extremely deep nesting (esp. in the analyzer) -- afaik the WPF treeview crashes once you get to ca. 130 nesting levels. I remember running into this problem a long time back (not sure if .NET 4.0 or even earlier). Maybe it's fixed by now.\nhttps://social.msdn.microsoft.com/Forums/vstudio/en-US/e64aba77-aeb5-4980-bf37-a37018865b6e/layout-recursion-reached-allowed-limit-to-avoid-stack-overflow-255?forum=wpf\nIf I remember correctly, WPF TreeView was using 2 nested UIElements per tree level, so the overall limit on the tree nesting depth came out to around 120.\nSharpTreeView was created mostly to work around that limitation, because we were trying to display a tree of stack traces (in a profiler) and that often was deep enough to trigger the exception.\nWith the ILSpy analyzer it's theoretically possible to keep expanding infinitely, so I kept using the control we already had.\nThe post indicates that .NET 4.0 increased the limit to 4096; so I guess it's not as pressing a problem anymore. Still, in the context of an infinite tree (as with the ILSpy analyzer), all it takes is for the user to keep pressing the right arrow key for a while, and eventually a WPF TreeView would cause an exception (and not in a place where it could be easily caught; so always bringing down the whole application). The new decompiler engine (which just landed on master) will now escape invalid identifiers when saving a project to disk; so that the code can be recompiled.\nMoreover, it adds support for various code patterns generated by the Roslyn (VS2015+) C# compiler.. 1. Please don't change tabs to spaces; the unnecessary indentation changes make the patch hard to read.\n2. Your changes seem to include much more than fixes to lambda decompilation.\n   Can you describe those changes? What's varIndex.txt about?\n3. Your branch fails to compile. (see AppVeyor build log) Can you fix that?\n. I don't quite understand what these fixes are about. Can you add some test cases?\nAlso, we're currently rewriting pretty much the whole decompiler on the newdecompiler branch. We'll pretty much going to have to throw your work on the master branch away once that lands.\n. newdecompiler: the current goal is to get a decompiler that produces correct code (that is, code with the same semantics as the underlying IL). The ILSpy master branch isn't very good at maintaining semantics -- the ILAst doesn't properly distinguish signed and unsigned comparisons, mistreats float comparisons, doesn't always perform integer operations with the correct bitwidth, sometimes calls the wrong method overload, etc... basically, a lot of casts that are implicit in IL are missing from the decompiled code.\nTo fix that, we've completely redesigned the ILAst. We're still fixing a few correctness bugs at the moment, and once the newdecompiler is good enough to decompile itself (incl. its libraries like Mono.Cecil) and the result still works, we'll start adding back the transformations that detect high-level C# constructs and produce nice-looking code.\n. Differences between tests and directly in ILSpy are usually due to the compiler settings used when compiling the tests (optimization, old csc vs. Rolsyn).\nFor now I'm closing pull requests for the decompiler engine on master -- there probably won't be any ILSpy release before the newdecompiler is branch is merged, and that branch has a different implementation of DelegateConstruction (running not as a C# transform,but on the ILAst).. Some measure of 'fitness' would be nice, but I don't think the fraction term.Length / (float)text.Length is useful for this purpose.\nThe search terms are the same for all results of a search; so the numerator is always the same, and the denominator is always text.Length.\nSo isn't this just an overly complicated and inefficient way of sorting by text.Length?\n. F# using is broken once again, @siegfriedpammer: please re-enable the F# test case.\nIf there are any other problems, please create new issues.. What if the disposable variable is still used later (after the finally-block)?\nYou're changing semantics by effectively removing the variable assignment.\nTransformUsings already checks that ident is not used after the try-catch statement (the IsVariableValueUnused call); you'll need to add the same check for the disposable variable.\n. When running the tests locally on my machine, the F# tests fail with two F# compiler errors:\n<startup (1,1)-(1,81) parameter error Could not resolve this reference. Could not locate the assembly \"FSharp.Core, Version=4.4.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\". Check to make sure the assembly exists on disk. If this reference is required by your code, you may get compilation errors. (Code=MSB3245)>,\n<startup (1,1)-(1,81) parse error internal error: BuildFrameworkTcImports: no resolution of 'FSharp.Core, Version=4.4.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'>\nInstead of running various compilers as part of our tests, perhaps we should commit disassembled binaries as .il files and re-assemble them in the tests?\n. Those assembly references are conditional ('$(BuildNuGetPackage)' == 'True') and are used when building the ICSharpCode.Decompiler NuGet package.\nDoes VS2012 not support conditional references?\n. Won't Fix: there's just too many options one could consider here.\nInstead, the \"IL with C#\" view can be used to see what's going on under the hood.. This was fixed a short while ago: ILSpy master branch will introduce casts as necessary for picking the correct overload.. It's hard to tell without a reproducer; but given that all the code in ILAstOptimizer.HandlePointerArithmetic no longer exists in the new decompiler engine, this is likely fixed.. The new decompiler (ILSpy 3) should emit correct code in these cases... (no more strange ??).\nHowever, it certainly doesn't produce readable code... it tends to introduce an integer variable for the stack slot, leading to code like this:\nint num = int.Parse(Console.ReadLine());\n    int num2 = (num >= 1000) ? 1 : 0;\n    if (num2 == 0)\n    {\n        num2 = ((num < 2) ? 1 : 0);\n    }\nI'm not sure if we want to add a pattern to detect this type of code as && or || operator; but at least we should figure out that the newly introduced variable should have type bool.. You can you put XmlDoc comments on the sample and have the C# compiler generate the .xml file to see what the correct name is.\nI'm getting System.Int32[0:,0:] from the C# compiler.\n. It would be incredibly hard to hit the splitter if it the hitbox was as small as it is visually.\n. This is fixed on the newdecompiler branch.. Every increase of the required .NET version will cause problems for some of our users who don't have the latest .NET version installed. Going to 4.5 also means giving up support for Windows XP. (which shouldn't be a problem in 2016...)\nI don't have any objections going to .NET 4.5 since that does offer us major advantages (async/await, MEF2, other portable libraries), but I wouldn't increase the .NET requirement further without a compelling reason.\n. IL code can be invalid in a large number of ways; we can't guard against all of them in ILSpy.\nIf the .NET runtime refuses to JIT-compile the method, don't expect ILSpy to decompile it.\n. What settings were the tests using before you changed them to use VarKeywordUsage.Never?\nI find this test failure interesting:\n 49      (-)        int firstByte = secondByte;\n 49 (+)         var firstByte = secondByte\nWhy would the code use 'var' if the tests were running in the default mode of WhenTypeIsEvidentOrLong?\n. I think \"evident\" should just be cases where the type name is obvious given the same code line. (casts, ... as $type, new $type)\nReplacing int with var is a bit too aggressive for my liking.\n. This PR is no longer compatible now that we've merged the newdecompiler branch.\nFeel free to re-submit for the new decompiler engine.\nAlso, make sure to only change to var if doing so doesn't change the type of the variable -- e.g. with object x = new SomeStruct(); it's critical that we don't remove the boxing conversion.. Closing this PR to master; we'll take #734 on the newdecompiler branch instead.. The newdecompiler branch does a better job introducing a default: case, which should fix this problem.. It's very hard to write an auto updater that isn't a huge security vulnerability. Your PR seems to tick the usual boxes:\n[X] no authentication that the update isn't provided by a random MitM\n[X] no verification that the .zip doesn't overwrite files other than intended (possibly even outside the intended target directory, if Ionic.Zip isn't forbidding relative paths)\nThe current 'update process' is already vulnerable enough even with a human user in the loop. It needs to be secured before there's any point in creating an auto updater.\n. Duplicate of #209. We're not interested in an auto-updater at the moment; see #730 for the reasoning.. Closed due to lack of information.. I think the patterns might be a bit too permissive.\nE.g. the pattern would match: get { return SomeCall().field; }\nOr in the constructor: someOtherObject.field = value;. This is fixed on the newdecompiler branch.. The & operator in VB is indeed the string concatenation operator. Bitwise And in VB would be the And operator.\nThe decompiled code with the Conversions.ToString calls looks like a correct translation of the original VB code to C#.\n. Thanks!\n. What do you mean by \u00ab'base' Node on Any Assembly\u00bb ???. This is fixed on the newdecompiler branch -- there we always make casts explicit. In the future we'll likely use NRefactory to check whether the casts are necessary in order to select the correct overload.. The newdecompiler branch just got merged to master.. We should probably have an option to show all members in C# view, the same way we do in IL view.\nThis would then also include the compiler-generated members.. We've updated cecil on the newdecompiler branch.. Sorry it took so long.. As far as I can tell, 76e942e is the only relevant commit in this PR?\n\nThe ToString() implementation for the searchModeComboBox is not required; this can be done more cleanly by setting TextSearch.TextPath=\"Name\".\nWas the whole point of the MyPreviewKeyDown method to override AvalonEdit's handling of the Tab key? I think this is better solved by removing the InputBinding+CommandBinding for EditingCommands.TabForward+TabBackward.. I merged the remaining changes as 82ca308a3b8825a1bcbe4c5c50d0329a76e96015.\n\nUnfortunately I didn't notice before pushing that removing the redundant MyPreviewKeyDown+ComboBoxItem changes from the commit reset the author information :(. Can you post the IL code for the problematic method?\nI'm wondering if some compiler generates weird conv instructions during delegate creation.... I think the build server deletes old builds, even if there is no newer build available due to a period of inactivity.\n@christophwille: can we get this fixed? this happens quite frequently.... This was fixed in the new decompiler engine (which just landed on the master branch).. I don't think it's a good idea for us to start an arms race with obfuscators. But I'm open to the possibility of allowing plugins to add passes to the decompiler pipeline.. I can already open a whole directory by using the normal \"Open...\" command, browsing to the directory, and pressing Ctrl+A followed by Enter. (and I think doing this might be easier than using the pre-Vista folder browser...). I'm not sure what your problem was; but yield return decompilation is supported; and the new decompiler engine (which just landed on the master branch) also supports it for assemblies compiled using the Roslyn compiler.. I just updated the newdecompiler branch to the current Mono.Cecil version; and no longer needs ICSharpCode.NRefactory (the necessary portions of NRefactory are now part of the ICSharpCode.Decompiler project).. Unfortunately this is not easy to fix with the old decompiler engine. Type inference there is basically guesswork, as we don't extract the necessary information from the IL code.\nThis is fixed in the newdecompiler branch. But that's a completely new decompiler engine, so it might be tricky to port JSIL to that.. This should be fixed in the new decompiler engine (which just landed on the master branch).. There are plenty of assemblies where the assembly name is not a prefix of the namespace names (e.g. most of the Microsoft System.* assemblies).\nI don't think this a good idea to use the short folder name for some but not all namespaces in an assembly.. The newdecompiler branch should have better detection of switch statements. And even if it gets it wrong and produces unnecessary gotos, those should now always be valid (never jump into blocks).. I recently updated the newdecompiler branch to the latest Cecil version, which seems to have fixed this issue.. ILSpy cannot tell whether the method get_Property1 belongs to a property unless the assembly defining that property is loaded.. The decompiler should probably complain about missing assembly references more visibly (e.g. as comment in decompiled code?). Missing information affects not only properties, but also enum literals and some other constructs.\nFor properties, we could possibly also use the typical naming schema (get_ and set_) to make a guess when there's no accurate information available.. Agreed, going to definition is not very useful for fields.. Note that #668 added a new option Display > Sort results by fitness, which needs to be enabled.\nWe'll enable it by default after it got some more testing.. This should be fixed in the new decompiler engine (which just landed on the master branch).. This was likely fixed in the new decompiler engine (which just landed on the master branch).. This was likely fixed in the new decompiler engine (which just landed on the master branch).. This was likely fixed in the new decompiler engine (which just landed on the master branch).. Done.. We just landed a new decompiler engine, which does not support VB at the moment.\nIf we add back VB support in the future, it'll likely be a completely new implementation, so closing all VB-related issues.. This was likely fixed in the new decompiler engine (which just landed on the master branch).. This was fixed in the new decompiler engine (which just landed on the master branch).. This was likely fixed in the new decompiler engine (which just landed on the master branch).. The whole logic for inserting casts was completely rewritten; and tested on various randomly-generated IL fragments.\nI didn't test your specific case, but I think it's very likely fixed. Feel free to reopen if it isn't.. The new decompiler engine (which just landed on the master branch) uses an updated Cecil version.. newdecompiler got updated to a newer Cecil; and is now merged to master.\nCan you check if your portable PDBs are now working correctly?. The new decompiler produces this code:\nprivate void X(IEnumerable e)\n    {\n        IEnumerator enumerator = e.GetEnumerator();\n        try\n        {\n            if (enumerator.MoveNext())\n            {\n                object _ = enumerator.Current;\n            }\n        }\n        finally\n        {\n            IDisposable disposable = enumerator as IDisposable;\n            if (disposable != null)\n            {\n                disposable.Dispose();\n            }\n        }\n    }\nThis is correct (compiles and has the same semantics), even if it's not as short as the original.\nILSpy currently can only detect foreach if there's a loop in the IL code. I don't think it's worth the effort to add a special case for this code construct.. I promise we won't keep newdecompiler hanging for another 3 years.\nThere's only a few major features missing compared to the old decompiler. I'd guess the merge to master will happen next month.. Comparisons ignoring signedness is a known issue in the old decompiler engine.\nOn your code, the newdecompiler branch produces:\npublic static bool IsGood(Example example)\n{\n    if ((uint)(example - 2) <= 3u)\n    {\n        return true;\n    }\n    return false;\n}. This was fixed in the new decompiler engine (which just landed on the master branch).. No idea what those options are.\nAFAIK rebracer just saves all of the VS options, even if they weren't changed from the default options. I don't think we customized much more than the braces-on-same-line.. I don't think there is a format change to attributes. It's just that the constructor parameter types must be available in order to correctly decode attribute blobs.. That's not possible through the CSharpLanguage API; you'll have to use the decompiler API directly (now that newdecompiler landed on the master branch: ICSharpCode.Decompiler.CSharp.CSharpDecompiler).\nThere, DecompileTypes() will give you namespace definitions, while Decompile() will just decompile the type/member itself.. We switched over the C# decompiler to the NR type system, but we don't want to rewrite everything else (IL disassembler, ILSpy tree view, search, analyser, ...). So we've intentionally kept using Cecil for C#'s ITextOutput.\nBut looks like we've forgotten a spot (WriteIdentifier/GetCurrentDefinition) and some NR types slip through.... Not sure. For the \"go to definition\" logic we need cecil types at the moment.\nOn the other hand, our NR->conversion only works on type definitions, so we lose type arguments which we need for the tooltips.\nWriteDefinition/WriteReference was originally meant for the highlighting when clicking a local variable (which highlight the other usages of the variable). That only requires GetHashCode()/Equals(), hence the object type.\nWhat are you trying to use this information for?\nAlso, long-term I'm not sure if we want to keep maintaining the NR type system as C# 7 (tuples) and C# 8 (non-nullable references) make some major changes in that area. Maybe we should migrate to the Roslyn type system instead... although that would almost certainly mean forking Roslyn, as we'd need access to the internals (e.g. directly interacting with the overload resolution algorithm, before we even have a SyntaxTree).. ITextOutput is meant to be the language-independent interface in ILSpy, so it's somewhat restricted in the amount of information it is carrying.\nWouldn't changes to the generated code be better done on the SyntaxTree instead of in the text stream? If you do need text-level changes, consider working at the TokenWriter-level instead. You could derive from TextTokenWriter (or TextWriterTokenWriter if you don't need ITextOutput); or wrap it using a DecoratingTokenWriter. You can access the syntax tree (via StartNode/EndNode), and the associated semantics (via the ResolveResult and ILInstruction annotations).\nAnd if there's a problem with the decompiler, feel free to report a bug or submit a fix instead of adding a workaround in post-processing.. Hmm, for renaming there's indeed quite a few different cases to consider in the syntax tree:\n VariableInitializer -- used for fields and most local variables (definitions only)\n EntityDeclaration -- for method and property definitions\n IdentifierExpression -- used for references to variables\n MemberReferenceExpression -- used for field and method references\n* ForeachStatement -- for the foreach variable\nand I'm probably forgetting some special cases.\nWhat the TextTokenWriter does is that it maintains a Stack<AstNode> nodeStack (via StartNode/EndNode), and thus can discover the parent node for any identifier being written.\nBut there too are various special cases for how to discover the correct node that holds the reference to the target symbol.\nFor now, I guess I'll change the TextTokenWriter to consistently use cecil references for non-local definitions and references. Local variables will keep using ILVariable.. Strange, github closed this issue when I pushed my commit, but didn't link to the commit: c2898905c84e117b0a8db6c6216d895aee53ea4e. If you want to modify the syntax tree, just do so before you start the OutputVisitor.\nTypically you'll want to use something like: foreach (var varDecl in syntaxTree.Descendants.OfType<VariableDeclarationStatement>()) ...\nInheriting from TokenWriter is useful when you want to customize how the syntax tree is converted into text; it's not a good place to modify the syntax tree.\nTo get a better understanding of the syntax tree, you can use the demo application in the NRefactory repository.. Yes this is a bug, we should consistently use ILVariableResolveResult.\n(vi.Annotation<ILVariable>() is currently non-null in only two special cases: fixed and using statements). The first two test cases were fixed in @siegfriedpammer's foreach update.\nIn the third test case, the code generated by Roslyn in release is similar to what non-Roslyn would generate if you had an early return within the loop. The decompiler eliminates what it believes to be a compiler-generated return variable, thus turning the program into one with an early return within the loop (which is affected by #861).\nBut I think we could tell that this isn't a true return variable (because there are stores not immediately followed by a return statement) and avoid replacing the \"break;\" with an early return.. That test is indeed too simple: after compilation, it no longer contains any loop at all! (the loop backedge was unreachable due to the return, and got optimized out by the C# compiler)\nWe could add a whole new special transform for the \"foreach that doesn't actually loop\" case, but I doubt that's worth the effort.. What's happening here is that loop detection will pick a \"preferred loop exit point\" very early in the decompilation pipeline. In this case, the loop doesn't have an obvious exit point because all code reachable from the loop is also dominated by the loop. In this case we currently use a simple heuristic that tries to move as much code as possible out of the loop, thus preferring the more-complex return statement as \"exit point\".\nThis means it ends up picking \"return d.Condition;\" as loop exit point (thus putting that statement outside the loop, and the other return statement within).\nOnce that decision's been done, there's no way to recover i < 2 as loop condition, as the i >= 2 case doesn't lead to the already-picked loop exit point.\nA simple way of fixing this might be to tweak the heuristics to pick a better exit point. The C# compiler tends to generate IL code in source order, so simply picking the last of the possible exit points might work well.\nAnother approach could be to initially only include the natural loop within the loop container, then perform the usual block transforms (building up if-else-structures etc.), and only later pick the single loop exit point.. Your new test case is different: the exit point is obvious with break; and return; being equivalent; here the problem is merely that the if-condition is inverted. I think the best solution might be to just make the for-loop-pattern slightly more flexible.. @mmusu3 I cannot reproduce the problem with Test2.\nWhich compiler was that code built with? I don't remember fixing anything like this.... ref locals are our fallback solution when we couldn't detect the proper high-level pattern.\nIt doesn't make a sense to provide an option to disable them, because that would only leave you with an \"unable to decompile code\" error message. We'll instead need to fix all the different cases where high-level constructs are not detected correctly, so that ref locals become unnecessary.. We don't yet have any code handling these helper methods for protected calls.\nThis probably happens for any case where the C# compiler generates nested helpers classes -- not just async, but also yield return and lambdas.. ref on readonly is possible (performs an implicit copy) if the reference is the target of the method call.\nConsider a call like Guid.Empty.ToString().\nThat's what IsGeneratedValueTypeTemporary is checking -- this type of inlining happens only for read-only fields (and other cases where the C# compiler introduced implicit copies in normal calls).\nI think the bug is within IsGeneratedValueTypeTemporary -- it's supposed to be checking that the call is to an instance method, but doesn't do so due to an early return true; for readonly fields.. Fixed in 46e36f7e9a4fb1c33e3a0a476f15a4d395a1e4ce.. That looks like a bug in Mono.Cecil.\nAs a workaround, you can disable \"Use variable names from debug symbols\" and then reload the assembly list (to reload the assemblies with debug symbols disabled).. ILSpy2.x uses an older version of Mono.Cecil, maybe this is a new bug? Pretty much all the debug symbol support got updated in the new Mono.Cecil.. I just managed to reproduce this problem with the ICSharpCode.Decompiler.Tests.exe assembly. The whole assembly can be disassembled/decompiled without issues, so this is indeed specific to the analyzers.\nThe analyzers use cecil from multiple threads. (multi-threaded decompilation when decompiling a whole project does the same; but there the cecil accesses only make up a small portion of the runtime, so races are less likely)\nMaybe some parts of the new debug symbol stuff are not thread-safe?\nWe used to maintain our own thread-safe cecil branch, but that eventually got merged into cecil master. Maybe the changes in cecil 0.10 introduced new threading issues? cc @jbevain. Thanks!\nOn NuGet: the console version was originally just for testing the NuGet release. I'll change it to a normal project reference now that it lives in the main repository.. I tried the exact same thing you did; but as you can see, for some reason it's breaking the build...\nI'm not familiar with the .NET core stuff, so no idea what's wrong here.. I think in this case it's the original indentation that was wrong.\nThe tidy.py script isn't checking the ICSharpCode.Decompiler.Console directory, and the console app was originally created in a different repo without our .editorconfig in place.. I'm not so sure we actually want this as a feature. It very much seems like it's something that could be left to find | xargs (though the separate output directories might be tricky in a shell script).. catch-when: just ignoring everything except for the leave instruction seems wrong.\nIf you post the ILAst that was left over after the transforms, we could give you a hint of how to transform that further.\nIn general, to properly decompile catch-when, we need to be able to collapse the IL code back into a single C# expression.\ngit: You'll need to use a separate git branch for each pull request. If you have some unwanted commits on the branch, you can use interactive rebase to clean those up: git rebase -i upstream/master. I don't see a problem there. The semantics of Data data = GetData(); data.Condition = false; and GetData().Condition = false; are identical if the data variable is not used elsewhere.\nThe C# compiler tends to optimize out such local variables in release builds, so we can't tell what the original code looked like.. We currently use an IL-level analysis for definite assignment. This doesn't distinguish between ref and out parameters, so it creates the default value just to be safe.\nFor your first example, we'll probably end up generating out int i once that feature is implemented.\nFor the second example, this requires the full C# definite assignment analysis including structs. This probably won't happen, except maybe if somehow can re-use the existing analysis from Roslyn.. This is probably due to icsharpcode/AvalonEdit#87. This only works if there's no overloading and no generics involved; otherwise it's more tricky to write reflection code that picks the correct overload.. A decompiled call to Type.GetMethod(string) will throw an AmbiguousMatchException on overloaded methods, even though the original code wasn't doing any such thing. It also searches only for public methods, while the token has no such restriction.\nAnd generic methods are their own can of worms. You'll have to emit MakeGenericMethod calls there; but I'm not sure how you would even pick the correct overload among the generic methods -- the Reflection API doesn't seem to take enough information to uniquely identify an overload.. A try catch doesn't help. Unless we handle ldtoken correctly, either we produce code that doesn't compile to alert the developer at compile-time; or we'll produce code with wrong runtime behavior.\nThe only place where the C# compiler emits ldtoken for methods is when creating a delegate from a method group. But in that case we decompile the whole newobj back into the appropriate C# construct, no there's no need to handle the individual ldtoken instruction. I guess if you want to create testcases for this, you'll have to write them directly in IL.. While we can fix expression trees; I doubt the general case of ldtoken can be solved correctly.\nThe Reflection API sometimes makes it extremely hard to get the correct MethodInfo object, see https://stackoverflow.com/questions/3631547/select-right-generic-method-with-reflection. I don't think the expression tree converter cares about how to represent ldtoken in C#, just that there's some expression with the correct annotation. I think the ErrorExpression we're currently using could already be sufficient with its ILInstruction annotation.. I think a possible way to translate ldtoken for now would be: new DelegateType(Method).MethodInfo.MethodHandle\nwhere DelegateType is a delegate that matches the method's signature (if there's no ref/out involved, Action<>/Func<> will do the job; otherwise the decompiler will have to declare a new delegate).\nOnly problem is if it's an instance method belonging to another class, as we need an instance for creating a delegate.\nThere's some discussion about an LdToken intrinsic in a future C# version, which would also work based on delegate creation.. I'm closing this PR; let's first figure out (on #911) what kind of code we want to generate for ldtoken.. On the syntax side of things:\n * Roslyn has better options for code formatting than our output logic.\n * Using the Roslyn Binder requires us to use the the Roslyn syntax tree for the candidate expressions.\n * We'd like a mutable AST (for our C# transforms).\n * We'd like to keep using something like NR pattern matching\n * We heavily customize the OutputVisitor/TokenWriter to get syntax+semantic highlighting, hyperlinks, ...\nExcept for the mutable AST, all of this looks like it could also done in Roslyn, but it's a lot of code churn for little benefit.. I took a look at using the Roslyn type system in the decompiler.\n  * The public API is near useless. The decompiler needs similar access to the type system as the binder in roslyn does, and that's all through an internal API (class TypeSymbol). The public interface only has small a fraction of the member we'd need.\n      * Some examples of methods the decompiler could use, but are not available in the public API: IsTupleCompatible(), IsReadOnly, IsByRefLikeType -- basically, all the new language features that are a reason to move to the Roslyn TS, are internal-only.\n      * What would really make Roslyn useful for us is if we could re-use it's overload resolution implementation. But that requires some modifications to the code (we need to perform overload resolution before we have a syntax tree!). Which means we'd use a modified copy of class OverloadResolution in our code base, but that means we need access to all internals APIs used by overload resolution...\n      * ==> The only way we could use Roslyn is by copying the source code and adding an [InternalsVisibleTo] attribute for us.\n  * At least in the near term (up to C# 7.3 inclusive), it's faster for us to re-implement the new features in our own type system than to port everything to Roslyn.\n  * Porting the decompiler to the Roslyn API takes a significant amount of boring busy-work. Given that ILSpy is a hobby project and the time we spend on it is highly influenced by how interesting the work is, our chances of ever finishing the port to Roslyn are essentially zero.\n  * By contrast, implementing the cool new features in our type system is less boring :) Also it's not one huge chunk of work, but multiple small ones (for the various new language features). This does wonders for motivation.. We should test with programs like this:\n```\n  ldarg condition\n  brtrue use_native_int\nldc.i4.m1\n  br after_if\nuse_native_int:\n  ldc.i4.m1\n  conv.u\nafter_if:\n  ldc.i4.1\n  add.ovf.un\n  ret\n```\nDoes the addition always overflow when use_native_int==false? Or only on 32-bit systems?\nWhat if the use_native_int block is moved after the add instruction? The spec claims that stack types can be inferred in a single pass, does this mean that the behavior of add.ovf differs depending on where the use_native_int block is placed?. .method public static native int Int32OrNative(int32 val, bool use_native)\n{\n    ldarg.1\n    brtrue use_native_int\nuse_i4:\n    ldarg.0\n    br after_if\nafter_if:\n    ldc.i4.1\n    add\n    ret\nuse_native_int:\n    ldarg.0\n    conv.u\n    br after_if\n}\nResult (64-bit):\nInt32OrNative(0x7fffffff, false) = 2147483648\nInt32OrNative(0x7fffffff, true) = 2147483648\nInt32OrNative(-1, false) = 0\nInt32OrNative(-1, true) = 4294967296\nBut if I comment out the conv.u, then I get:\nInt32OrNative(0x7fffffff, false) = -2147483648\nInt32OrNative(0x7fffffff, true) = -2147483648\nInt32OrNative(-1, false) = 0\nInt32OrNative(-1, true) = 0\nThis means the presence of the conv.u can change the bit width of an addition prior to it! This means it's impossible to assign types to instructions in a single pass (which the ILReader is currently trying to do).\nEcma-335 claims:\n\nIt shall be possible, with a single forward-pass through the CIL instruction stream for any method, to infer the exact state of the evaluation stack at every instruction (where by \u201cstate\u201d we mean the number and type of each item on the evaluation stack).\n\nSo I guess this is just another case where the spec is just plain wrong.. The code in this gist demonstrates that the .NET runtime behavior depends on whether the runtime can detect a piece of code is unreachable at byte-code parse-time. (remove the comment from the stloc/ldloc pair to change the behavior of the program when executed with 64-bit .NET framework).. The fix I just pushed keeps the ILVariables for 32-bit and native-size stack slots separate even when these slots meet at a branch. Instead, we introduce a conversion instruction (\"stack type adjustment\") after every store to the smaller stack slot.\nThis fixes the Int32OrNative test case in the restricted case where type information only flows across forward branches. (reading Ecma-335 gives the impression that this restricted case is the only legal case, so hopefully there isn't any code in the wild where type information needs to flow backwards)\nHowever, the other aspects of the original issue are still a problem.. 1. Can you add a test case?\n2. Your ProxyMethodVisitor doesn't properly check that the method only performs a proxy call.\ne.g. it also matches void F() { base.F(); base.F(); } or even void F(int i) { base.F(i + 1); }.\n3. What's up with the foreach (IMethod method in inst.Method.DeclaringTypeDefinition.Methods) loop? You're effectively ignoring inst.Method and instead picking any other overload of the method.. I don't think the ProxyMethodVisitor is the right approach -- you're still allowing arbitrary combinations of the white-listed instructions. E.g. unreachable IL code might be seen as a valid proxy call: void F() { return; base.F(); }\nIt's better to just match the body exactly (i.e. check that it's a BlockContainer with 1 block, that the block has 1 or 2 instructions, and what those instructions are).\nYou should also expand the test case:\n * add a case where the method returns something other than void\n * add a case where the proxy call is not due to await, but due to yield return, or a capturing lambda\nInstead of inst.Arguments.ElementAtOrDefault(i), you can just use inst.Arguments[i], since your loop condition ensures the index is in range (and you don't handle a return value of null).\nAlso, you don't need to clone the arguments. It's valid for an ILInstruction to temporarily be in multiple places (have multiple parents), as long as after the transform is done, it is in the place that it was assigned to last.\nMore importantly, some types of ILInstruction are currently throwing NotImplementedException if you try to clone them (e.g. if one of the arguments is a lambda expression).\nAbout the build failure: the test framework currently doesn't support resolving .NET standard assembly references, so you need to recompile your test case. Even better, add the test as a C# pretty test (instead of IL pretty test). There the test runner will automatically compile the C# code file with both Roslyn and the old C# compiler. (but we still commit the IL files generated when running the tests, to avoid existing tests breaking when the C# compiler is updated). * You're only testing proxy methods that return a non-void result.\nYou'll need at least one test with void; the pattern you're matching is slightly different in that case.\n\n\nAlso your lambda test is only capturing base/this. The compiler generates significantly different code when the lambda captures a local variable or parameter, so you should also test that. (only capturing this results in a compiler-generated method in your class; additionally capturing local variables results in a compiler-generated class. AFAIK only the latter makes use of proxy methods)\n\n\nYour visitor does not recurse into the arguments of the call. I think this might lead to problems when a proxy call has more proxy calls in its arguments (e.g. yield return base.M(base.M(0).First()).First();)\n\n\nOther than that the implementation looks fine, but here's some suggestions for improvements:\n\n\nDo don't need a visitor here, finding all instructions of a type can be done with: foreach (var call in function.Descendants.OfType<CallInstruction>()).\n\n\nThe DeclaringTypeDefinition == null check is redundant now that you've removed the loop.\nAs for the why: one potential reason is that reference assemblies are missing; in that case the definition of the declaring type may be unknown. (there's also fake methods on multi-dimensional arrays; but those are converted to other instructions before your transform gets to run)\n\n\nInstead of using OpCode/Children, you can cast the instruction to a concrete type with C# 7 pattern matching, e.g.:\nif (!(function.Body is BlockContainer blockContainer))\n  return;\n// then use the strongly typed blockContainer.Blocks instead of ILInstruction.Children\n\n\nAll blocks that are directly in a BlockContainer are guaranteed to have a Nop as FinalInstruction (which is not a part of Block.Instructions, only of Block.Children), so you don't need to check that.\n\n\nMany node types have Match... methods to simplify matching against them; for example the leave check could be done in a single line using:\nif (!block.Instructions[0].MatchLeave(blockContainer, out ILInstruction returnValue))\n   return;. Thanks, the changes look good to me.\n\n\nJust a small improvement: you can match the pattern stobj(ldflda field(target), value) in a single call: block.Instructions[pos + 1].MatchStFld(out target, out field, out value).\n(Whenever you see stfld field(target, value) in the ILAst or a comment, that's just syntax sugar; the ILAst always uses stobj/ldobj+ldflda to represent field loads/stores, there's no OpCode.StFld). @tamlin-mike: Your example got boiled too much: it no longer contains any loop. There's no bug there, unless you want us to convert loop-free IL code into \"foreach\".. Let's keep this issue for the problem in the original post: foreach transform fails due the try-block containing not just the while, but also another statement that would better be placed within the loop.\nWhich has an obvious fix: use the try-block's exit point as loop exit point if the loop looks like it might be a foreach loop.. Test 1: unnecessary casts on constants were fixed recently.\nTest 2: Here the decompiler is casting to object to avoid picking up Delegate.op_Equality() instead of a reference comparison. We'll need a special case for delegates here.\nTest 3: Collection initializers currently cast to the exact target type to make sure we'll call the correct overload of the Add method. We should run overload resolution to test whether the cast is necessary.. I believe all problems here are fixed now.\nPlease open a new issue for additional casting issues, this one is getting hard to follow.. The IL code accesses Content twice: once with set_Content to assign the instance, then again with get_Content to get the instance for calling the add method.\nDepending on how the property is implemented, this might be a different instance! So it's not correct to combine the two into a single object initializer.\nWe'll instead need to check the object initializer for invalid duplicate usage of an AccessPathElement, and stop the transform if we find any. @siegfriedpammer will try to implement this check.. What are you trying to fix?\nCan you add a test case?. Thanks!. Yeah, we'll need to figure out a way to represent which overload is chosen here.\nWe need the MethodGroupResolveResult because the expression alone isn't choosing an overload, only the implicit conversion to ConsoleCancelEventHandler is. But in the current design, there's no good place to store the ResolveResult associated with the conversion.. I've added DecompilerSettings.UseImplicitMethodGroupConversion to control this behavior.. This was caused by the System.Runtime reference not being resolved. We'll need to more robust when System.Runtime is unavailable.. Here's a reduced test case (using a try-finally block instead of fixed block):\nprivate void LoopWithGotoRepeat()\n{\n    try {\n        REPEAT:\n        Console.WriteLine(\"after repeat label\");\n        while (GetBool(\"Loop condition\")) {\n            if (GetBool(\"if1\")) {\n                if (GetBool(\"if3\")) {\n                    goto REPEAT;\n                }\n                break;\n            }\n        }\n        Console.WriteLine(\"after loop\");\n    } finally {\n        Console.WriteLine(\"finally\");\n    }\n    Console.WriteLine(\"after finally\");\n}\nILAst of the try-block after the first loop has been detected:\n```\nBlockContainer {\n    Block IL_0001 (incoming: 1) {\n        br IL_0002\n    }\nBlock IL_0002 (incoming: 2) {\n    call WriteLine(ldstr \"after repeat label\")\n    br IL_0036\n}\n\nBlock IL_0036 (incoming: 1) {\n    BlockContainer (loop) {\n        Block IL_0036 (incoming: 2) {\n            if (call GetBool(ldloc this, ldstr \"Loop condition\")) br IL_0010\n            br IL_0045\n        }\n\n        Block IL_0010 (incoming: 1) {\n            if (logic.not(call GetBool(ldloc this, ldstr \"if1\"))) br IL_0036\n            br IL_0020\n        }\n\n        Block IL_0020 (incoming: 1) {\n            if (logic.not(call GetBool(ldloc this, ldstr \"if3\"))) br IL_0045\n            br IL_0002\n        }\n\n        Block IL_0045 (incoming: 2) {\n            call WriteLine(ldstr \"after loop\")\n            leave IL_0001 (nop)\n        }\n\n    }\n}\n\n}\n```\nControl flow graph of the try-block: (black edges are control flow, green edges are dominance)\n\nThere's two natural loops: { IL_0036, IL_0010 } and { IL_0002, IL_0036, IL_0010, IL_0020 }.\nNow what happens is that when the first loop is detected, it has no clear unique exit point (there's an exit out of the try-block via IL_0045, and the exit back to IL_0002), so we fall back to the heuristic, which decides to also include IL_0020 and IL_0045 in the loop.\nThen when the second (outer) loop is detected, we discover (via post-dominance) the exit point IL_0045. So everything but IL_0045 is included into the outer loop.\nBut that puts IL_0045 both within the inner loop and outside the outer loop, which is a contradiction.. As for solutions: the obvious fix is to just force all blocks that are already within nested loops to be also within the outer loop. This fixes the correctness issue no matter what decisions are made by ExtendLoop().\nBut it's unfortunate that a clear obvious decision (IL_0045 is the exit point of the outer loop) is made difficult based on the decisions a heuristic made prior to that. I guess we could remove ExtendLoopHeuristic from the loop detection, and instead run something like it in a second pass, so that it can take the decisions of loop detection for outer loops into account.. Decompiled result with the fix:\nprivate void LoopWithGotoRepeat()\n{\n    Console.WriteLine(\"LoopWithGotoRepeat:\");\n    try\n    {\n        while (true)\n        {\n            Console.WriteLine(\"after repeat label\");\n            while (true)\n            {\n                if (Loops.GetBool(\"Loop condition\"))\n                {\n                    if (!Loops.GetBool(\"if1\"))\n                    {\n                        continue;\n                    }\n                    if (Loops.GetBool(\"if3\"))\n                        break;\n                }\n                Console.WriteLine(\"after loop\");\n                goto end_IL_000c;\n            }\n        }\n        end_IL_000c:;\n    }\n    finally\n    {\n        Console.WriteLine(\"finally\");\n    }\n    Console.WriteLine(\"after finally\");\n}\nThat's not pretty (IL_0045=\"after loop\" shouldn't be within the loops); but it's correct, and I think this problem can only occur if the original code was already using goto.. I don't think extra blocks would make things easier. If anything they cause problems (hence why we remove them in an early transform if the original IL contains such redundant branches).\nAll loops in C# have exactly one entry-point (because goto can't jump into blocks), and usually also one exit-point (the block being jumped to when the loop condition is false / when a \"break;\" is executed -- we're not counting return/throw as exit point).\nWhen we're detecting natural loops, we get the entry-point (=loop head) for free.\nWe also get both lower bounds and upper bounds on the loop content (lower bound: the natural loop, i.e. the set of blocks from which a back-edge is reachable; upper bound: set of blocks dominated by the loop).\nIf there's a single exit-point, that's also easy to find: it's the common post-dominator of all blocks in the loop.\nSo the only cases where the loop contents are ambiguous are:\na) There are zero exits out of the set of blocks dominated by the loop head. Correctness-wise, we could include all the code in the loop. But we could also pick one of the self-contained subtrees and use it as exit point.\nIncluding all code in the loop makes the code more nested than necessary, so we use a heuristic (PickExitPoint) to pick a subtree that gets excluded from the loop.\nb) There is no common post-dominator, and set of blocks dominated by the loop head can be left via multiple different branches. In this case, there must be multiple different branches leaving the loop, hence the code must use goto (or additional variables) to be represented in C#. We use a different heuristic (ExtendLoopHeuristic) to try and reduce the number of gotos.\nIf I see this correctly, only the ExtendLoopHeuristic has the potential of preventing an outer loop from picking its preferred single exit-point. But given that this should only be called in cases that require goto anyway, it's probably not worth the effort to move this part into a later pass.. Actually now that I've written it out, I think there's a bug in the implementation:\nWe currently don't distinguish between\nb) There is no common post-dominator, and set of blocks dominated by the loop head can be left via multiple different branches.\nand\nc) There is no common post-dominator, because the set of blocks dominated by the loop head is left via a branch to a block outside the container that we ran dominance analysis on.\nCase c) has an obvious exit point (the block outside the container), but we currently fall back to the heuristic, which might or might not find the correct loop body.. Case c) is code like this:\ntry {\n   while (GetBool(\"condition\")) { }\n} finally {\n}\nConsole.WriteLine(\"outside exit point\");\nDominance analysis is per-BlockContainer, so the code outside the try-block is not considered for dominance analysis within the try-block.\nSo this code snippet currently triggers the ExtendLoopHeuristic even though there's no goto. Of course, the snippet is also simple enough the heuristic doesn't cause any problems.. AppVeyor has builds for multiple branches and PRs, so the \"latest build\" over all branches can be different from the \"Latest CI build\" link = latest build of the master branch.\nWe recently updated AvalonEdit to make use of this new property, looks like there's something wrong and AppVeyor continues to package the old AvalonEdit version.. NullableLiftingTransform is not involved here: there's no operator that could be lifted.\nWe need to handle these as redundant casts; probably in the same way we handle new EventHandler(this.OnClick). Yes, I think we should prefer null over default if the type is nullable or a reference type.. ILSpy.exe is not meant to be used in a non-interactive context.\nUse the command-line decompiler (ICSharpCode.Decompiler.Console) instead.. Diffing the decompiled NewtonsoftJson_pcl_debug with and without your PR reveals a bug:\nDecompiled ExpressionReflectionDelegateFactory.CreateParameterizedConstructor() without your PR:\npublic override ObjectConstructor<object> CreateParameterizedConstructor(MethodBase method)\n        {\n            ValidationUtils.ArgumentNotNull(method, \"method\");\n            Type typeFromHandle = typeof(object);\n            ParameterExpression parameterExpression = Expression.Parameter(typeof(object[]), \"args\");\n            Expression body = this.BuildMethodCall(method, typeFromHandle, null, parameterExpression);\n            LambdaExpression lambdaExpression = Expression.Lambda(typeof(ObjectConstructor<object>), body, parameterExpression);\n            return (ObjectConstructor<object>)lambdaExpression.Compile();\n        }\nDecompiled with your PR:\npublic override ObjectConstructor<object> CreateParameterizedConstructor(MethodBase method)\n        {\n            ValidationUtils.ArgumentNotNull(method, \"method\");\n            Type typeFromHandle = typeof(object);\n            ParameterExpression argsParameterExpression = Expression.Parameter(typeof(object[]), \"args\");\n            Expression body = this.BuildMethodCall(method, typeFromHandle, null, argsParameterExpression);\n            LambdaExpression lambdaExpression = Expression.Lambda(typeof(ObjectConstructor<object>), body, Expression.Parameter(typeof(object[]), \"args\"));\n            return (ObjectConstructor<object>)lambdaExpression.Compile();\n        }\nThe Expression.Parameter call got duplicated. Interestingly this only happens in the debug build of Newtonsoft.JSon, not in the release build (the difference between the both builds being whether the result of the Lambda invocation gets stored in a local or on the stack).\nThis seems to be yet another case of the rule \"Calling inst.Clone() is almost always a bug\". But this ILAst transform is admittedly a bit tricky. We need some representation that:\n preserves semantics in the ILAst (no duplicate call to Expression.Parameter when the original IL code only calls it once)\n also allows inlining everything into a single instruction (so that the other arguments [e.g. the X() call in the tests] can be inlined into operation using the lambda [the ToCode() call]\n  * this needs to work despite there being multiple uses of the ParameterExpression.\n* still can be decompiled into valid C# code in case the ExpressionTreeConverter can't handle the whole code\nFirst some points:\n * every compiled-generated ParameterExpression \"belongs\" to a single Lambda() call, where it is passed in via the ParameterExpression-array\n * the ParameterExpression can additionally be used (maybe multiple times) in the lambda's body expression\n   * at this point, the body expression must be already inlined into the Lambda() call\n   * if there's any other ParameterExpression uses, it can't be a compiled-generated one ParameterExpression, and the transform shouldn't apply\nSo what should the result of the ILAst transform be? My original idea was an inline block:\nBlock /* new block type */ {\n   stloc P_1(call Parameter(...))\n   final: call Lambda(/* body expression, may use P_1 */, Block /* array initializer */ {\n      stloc I_0(newarr ParameterExpression(...)),\n      stelem ..., ldloc P_1\n      final: ldloc I_0\n    })\n}\nThis nicely preserves the semantics (that Parameter() is called once, and when it is being called). But there's not really any way to translate the result to C# when the body expression cannot be translated into a query expression, unless we do something like this (essentially simulating the C comma operator in C# by introducing a helper method):\nOuterCall(X(), InlineBlockHelper(p1 = Expression.Parameter(...), Expression.Lambda(..., new[] { p1 })))\nAnother idea would be to move the Expression.Parameter() call to the first use (usually within the body expression):\nOuterCall(X(), Expression.Lambda(Expression.Multiply(p1 = Expression.Parameter(), p1), new[] { p1 }))\nWe'd have to take care that we don't move the assignment into conditional code, and that the arguments to the Parameter() call are free of side-effects (so that moving them does not change the semantics).\nThere's also a third, much more radical idea: don't have any intermediate representation at all; go directly from ILAst describing the Lambda call to the final C# code. That would require some form of tight integration between the C# ExpressionBuilder and the transform, which we currently don't have. The advantage would be that we could avoid inlining the parameter expression altogether if expression tree conversion fails. (downside is that it'd be a complete rewrite of the ExpressionTreeConverter; and that I don't mix the C# ExpressionBuilder into the ILAst statement transforms). ParameterExpression uses reference identity, so duplicating constructor calls ends up changing the semantics.\nOriginal Code\n```\n        static void Main(string[] args)\n        {\n            var twice = GetExpression(Expression.Constant(2)).Compile();\n            Console.WriteLine(twice(21));\n        }\n    static Expression<Func<int, int>> GetExpression(Expression factor)\n    {\n        ParameterExpression parameterExpression = Expression.Parameter(typeof(int), \"x\");\n        return Expression.Lambda<Func<int, int>>(Expression.Multiply(parameterExpression, factor), parameterExpression);\n    }\n\n```\nDecompiled\nprivate static Expression<Func<int, int>> GetExpression(Expression factor)\n{\n    return Expression.Lambda<Func<int, int>>((Expression)Expression.Multiply(Expression.Parameter(typeof(int), \"x\"), factor), new ParameterExpression[1]\n    {\n        Expression.Parameter(typeof(int), \"x\")\n    });\n}\nOriginal Output: 42\nOutput of decompiled code:\nUnhandled Exception: System.InvalidOperationException: variable 'x' of type 'System.Int32' referenced from scope '', but it is not defined\n   at System.Linq.Expressions.Compiler.VariableBinder.Reference(ParameterExpression node, VariableStorageKind storage). The problem here is that user-defined operators are handled in a post-processing step (ReplaceMethodCallsWithOperators), after the cast-inserting logic is already done. I think we'll need to handle op_Implicit calls directly within the ExpressionBuilder, probably in a manner similar to boxing conversions.. New output:\ninternal unsafe static void set_default_server(Server* srv)\n{\n    *(int*)srv = (int)(&global::<Module>.global_var);\n}. Our current IL type analysis code doesn't support mixing I4 / native int. See also #901. Pointer compound assignments were implemented on #1021.\nHowever we still need more test cases (especially for pre/post-increment), so I'm keeping this issue open.. ILSpy does honor that drop-down setting, it's just that this crash happens in the ILAst->\"C# no transforms\" step. The ILAst itself has so many substeps that we removed those from the dropdown -- instead the ILAst view has a \"Show Steps\" button.\nCurrently we're using switch (on integers) instead of a series of ifs when:\n * switch replaces more than just one 'if'\n * no single section needs more than min(50, number of ifs replaced - 1) case labels\nI guess we should add \"there's more than 1 section\" to that list.\nStill, a switch with only a \"default\" section is valid in the ILAst and in C#, so the translation to C# shouldn't crash.. Why would you expect using statements to be missing?\nIf you copied the method into a C# interactive window, you'd need the using statements.. Yeah, for script usage we'd also need an explicit import for the namespace.\nYou're not the first who finds the usings on method-level strange. But I don't really see the harm in having this extra information available (especially given that they are collapsed by default).\nNote that the usings at class level are really the same thing -- they're also out of context, as it's just the class itself without the namespace.\nNote that DecompilerSettings has bool UsingDeclarations and bool FullyQualifyAmbiguousTypeNames if you need to customize this behavior.. That might be an old version of the ILSpy GUI where the \"current namespace\" wasn't set correctly when decompiling a single method.\nThere isn't really any way to enforce the use of fully-qualified names everywhere.\nWhat do you need these full types names for? Maybe your usecase is better served by inspecting the annotations on the syntax tree (similar to what ILSpy uses for showing tooltips).. The problem was indeed Get-Location, which for some reason always returns a different (though identical-looking) value:\nPS C:\\work\\ILSpy> (Get-Location).ToString()\nC:\\work\\ILSpy\nPS C:\\work\\ILSpy> $PWD.ToString()\nC:\\work\\ILSpy\nPS C:\\work\\ILSpy> (Get-Location).GetType().FullName\nSystem.Management.Automation.PathInfo\nPS C:\\work\\ILSpy> $PWD.GetType().FullName\nSystem.Management.Automation.PathInfo\nPS C:\\work\\ILSpy> (Get-Location).GetHashCode()\n957762\nPS C:\\work\\ILSpy> (Get-Location).GetHashCode()\n62171659\nPS C:\\work\\ILSpy> (Get-Location).GetHashCode()\n44920701\nPS C:\\work\\ILSpy> (Get-Location).GetHashCode()\n2149042\nPS C:\\work\\ILSpy> $PWD.GetHashCode()\n52357250\nPS C:\\work\\ILSpy> $PWD.GetHashCode()\n52357250\nPS C:\\work\\ILSpy> $PWD.GetHashCode()\n52357250. The race condition should be fixed in b78d640abdad1470a8175fa966ce0efd97651fb9.. It seems that powershell has massive problems with paths containing [. I don't think there's any sane way we can fix this; you'll have to use a different directory name.. I just added some quotes to the post-build command. Please post the error message if there's still any problem with spaces.. Found the cause: when the awaitable implements INotifyCompletion but not ICriticalNotifyCompletion, the C# compiler ends up calling AwaitOnCompleted instead of AwaitUnsafeOnCompleted.\nThe AsyncAwaitDecompiler currently only expects AwaitUnsafeOnCompleted calls.. The class WholeProjectDecompiler is currently doing the project decompilation.\nDecompiling a whole solution would require specifying a list of input modules, and modifying the WholeProjectDecompiler to emit project references.\nBut I'm not sure how the UI would look like. Offer .sln instead of (in addition to?) .csproj when multiple assemblies are selected? Or a whole new main menu command?\nThe \"Save to disk\" logic when multiple nodes are selected is currently unsuitable for such a task.... The is syntax tends to get ugly if you need negation, especially if s is a more complex expression.\nbool IsNullTest1(SomeType s) { return (object)s != null; }\nbool IsNullTest2(SomeType s) { return !(s is null); }\nbool IsNullTest3(object obj) { return obj != null; }\nbool IsNullTest4(object obj) { return !(obj is null); } // clearly worse than IsNullTest3\nAlso, in the special case of strings being compared with a null literal, we shouldn't introduce a cast. The C# compiler normally calls System.String.op_Equality when using operator == on string, but in the special case of s == null it emits a reference comparison instead.. I don't think we'll ever use is for simple null comparisons. If there's an overloaded operator we have to avoid, we'll just keep the cast around.\nFor the special case of strings (and delegates), current ILSpy no longer generates redundant casts, so I'm considering this issue fixed.. The warnings about unknown result types is solved with #1085.\nBut the lambdas still don't decompile correctly, because Func is still an unknown type, and the whole lambda decompilation process doesn't work if we don't have the delegate type definition available.\nThe problem seems to be that we resolve mscorlib, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e, Retargetable=Yes to the .NET 2.0 corelib, which does not contain System.Func.\nThe assembly is compiled against [TargetFramework(\".NETPortable,Version=v4.0,Profile=Profile5\")], which means a portable class library in the .NET Framework 4 + Windows 8 profile.\nThe reference assembly are in C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETPortable\\v4.0\\Profile\\Profile5. mscorlib.dll there has version number 2.0.5.0 (despite being a .NET 4.0 assembly!) and contains System.Func etc.\nI guess we should resolve the portable class libraries assemblies to the .NET 4.x GAC instead of the .NET 2.0 GAC.. @siegfriedpammer fixed the assembly lookup problem in cc62002864b0f9e7bd1347d3641c9704c919fde1 and I just fixed another small problem with lambdas in generic functions.\nMaybeConvertions should now decompile correctly.. Is this even valid IL?\nTrying a similar method myself, I'm getting a peverify error:\n[offset 0x0000000D] Non-compatible types on stack depending on path.\nI've now fixed this under the assumption that the non-ref branch is implicitly converted to ref when the branches meet. I believe this should fix the assertion you're seeing.. Hopefully fixed in 930ed379730efadff51e3302ea5739fb143332f3.. The C# compiler emits multiple ret instructions for these. We've decided to keep the control flow from IL and not attempt to simplify these into short-circuiting operators.\nILSpy 5 actually has a transform that can do this (CombineExitsTransform), but it's only enabled within lambda expressions.. To be clear: this is a bug in ILSpy; the assembly resolver should not dead-lock with the UI thread.\nThe bug has been dormant for many years and only now resurfaced because we fixed another bug that prevented loading assemblies in the background.. I'm not sure if this is something we want in ILSpy itself; seems like a pretty niche use case.\nA plugin seems like the better choice.. Can you provide a more complete code example?\nI tried:\nstatic unsafe byte* Test(byte* pByte)\n        {\n            pByte += 4;\n            return pByte;\n        }\nand that gets decompiled correctly.. Ah of course, the simple local variable I tried is a special case and does not use the CompoundAssignmentInstruction in the ILAst.\nThe CompoundAssignmentInstruction->C# translation was completely missing the case for pointer types. It wasn't just incorrect casts, with struct pointers we would emit:\nstructPtr += (MyStruct*)(offset * sizeof(MyStruct));\neven though the multiplication by the element size should be removed during decompilation. This is now fixed.. The \"Error: unable to find new state assignment\" is fixed now; but the other issues remain.. Mono is not our main priority.\nWe do somewhat support mcs's 'yield return' pattern, but here this seems to be some interaction between yield and lambdas.. This is not going to happen; fully supporting mcs-generated code pattern is too much work for us.\nIt was already a lot of work to support the new Roslyn code patterns; and mcs seems to have significantly more differences from the MS compilers.. Thanks for reporting this issue.\nThis turned out to be a problem with type substitution in the \"magic array methods\" (e.g. instance void !!T[0...,0...]::.ctor(int32, int32)). Fixed now.. I fixed the handling of generics and handling of compiler-generated ref-locals.\nIf you add a class constraint (as with Test1), or if you first copy the value into a local variable (this avoids the compiler-generated ref-local):\npublic int? Test2b()\n            {\n                var it = Item2;\n                return it?.GetHashCode();\n            }\nthen the generated code pattern changes and ILSpy (with my fixes) can reconstruct the ?. operator.\nBut the combination of these two aspects (unconstrained generic + non-local target) causes this weird pattern in the generated code (what's the point of the ref-assignment???). We'd need to add a whole new ?. recognizer just for this case.\nThe new output for your example is now:\n```\npublic struct Test where T1 : class\n{\n    public T1 Item1;\n    public T2 Item2;\npublic int? Test1()\n{\n    return this.Item1?.GetHashCode();\n}\n\npublic int? Test2()\n{\n    ref T2 val = ref this.Item2;\n    T2 val2 = default(T2);\n    int? result;\n    if (val2 == null)\n    {\n        val2 = val;\n        val = ref val2; // ref local reassignment, will be valid code in a future C# version\n        if (val2 == null)\n        {\n            result = null;\n            goto IL_0043;\n        }\n    }\n    result = val.GetHashCode();\n    goto IL_0043;\n    IL_0043:\n    return result;\n}\n\n}\n``.TypeHintwas meant for cases like this. We haven't really been using it much because the conversion infrastructure can already handle most stuff.\nBut once the expected type needs to be passed into sub-expressions, that's definitely a case forTypeHint`.. I've fixed the handling of enum constants within the ternary operator.\nI can't reproduce the problem with enum comparisions -- ExpressionBuilder.TranslateCeq is calling AdjustConstantExpressionToType precisely to handle this case.. The lock pattern changed for a reason in newer C# compiler versions -- this one might leave the lock locked on a ThreadAbortException (causing deadlocks later).\nI don't think we should decompile it to the proper lock statement when it has different semantics.. You can't introduce for-loops in the PatternStatementTransform if there are continue; statements in the loop body, since that changes the target of the continue;.\nAll for-loops with continue; are already handled in the StatementBuilder (if incrementBlock.IncomingEdgeCount > 1), the PST loop transform is only there to clean up the remaining \"simple\" loops.. I think 1 is a good solution. If the returned position is at the end of line, just compare the mouse position with the line's width. This way we don't follow links/show a context menu after the end of the line.\nNote: don't be confused by IsAtEndOfLine == false -- that property only exists to disambiguate a special case in word wrapping.. Looks like the enumerator is getting boxed for the Dispose call? That's not what happens in a normal foreach loop, so ILSpy isn't decompiling the code to a foreach loop.. Looks like a Roslyn compiler update at some point changed the code pattern generated for fixed statements.\nRegenerating the .il files for our UnsafeCode test case causes them to fail with exactly this kind of error. \nFortunately it seems that the differences between old roslyn and new roslyn have little to no overlap with the differences between the legacy csc (pre-roslyn) and old roslyn, so it seems that it's sufficient to generate the roslyn .il files and we still end up testing all the code patterns.. The underlying cause here is that we don't support compound assignments with user-defined operators.\nFull reproducer:\n```\n    struct Vector3\n    {\n        public static Vector3 operator +(Vector3 a, Vector3 b) { return default(Vector3); }\n    static void Issue1082(Vector3[] vectors, int i, Vector3 offset)\n    {\n        vectors[i] += offset;\n    }\n}\n\n```\nThe method initially gets decompiled to:\nref Vector3 val = ref vectors[i];\n     val = Vector3.op_Addition(val, offset);\nand only later steps change that to val = val + offset and then val += offset, but at that point it's too late to eliminate the ref-local.\nTo get rid of the local here, we'll need ILAst-level support for compound assignments with user-defined operators.. Another option is to do what we did in ILSpy 2: eliminate ref locals by moving them to the site-of-use.\nE.g.:\nref int x = GetArray()[GetIndex()];\nDoSomething();\nUse(ref x);\ncould almost be turned into:\nvar x_arr = GetArray();\nvar x_index = GetIndex();\nDoSomething();\nUse(ref x_arr[x_index]);\nI say \"almost\" because the program behavior is now different if the index is out of bounds. But for most programs this probably doesn't matter. Not sure if such a transform is a good idea, though.. In that example, we don't know that ToString() doesn't somehow store/return the pointer to c, so eliminating the local variable could change program semantics as there are other uses of c.\nI guess we'll have to analyze method signatures and see if the this reference could someone escape through the return value or an out parameter.. \"2) Named Arguments\" is now implemented.\n3) would be easy to do now.\n1) will first require some refactoring of the CallBuilder.... A more fundamental problem is the lack of type arguments in new Stack() and new Tuple() -- the type system currently requires that a ParameterizedType has a definition, so we can't instantiate unknown types.. I did some significant changes to the type system:\n * keep track of whether an UnknownType is a reference type or value type\n * allow parametrizing UnknownTypes.\n * fix bugs in the interaction of generics with FakeMethods\nTogether these change the decompilation of Assert.All without any reference assemblies to:\npublic static void All<T>(IEnumerable<T> collection, Action<T> action)\n{\n Assert.GuardArgumentNotNull(\"collection\", collection);\n Assert.GuardArgumentNotNull(\"action\", action);\n Stack<Tuple<int, object, Exception>> val = new Stack<Tuple<int, object, Exception>>();\n T[] array = Enumerable.ToArray<T>(collection);\n for (int i = 0; i < array.Length; i++)\n {\n  try\n  {\n   action.Invoke(array[i]);\n  }\n  catch (Exception ex)\n  {\n   val.Push(new Tuple<int, object, Exception>(i, (object)array[i], ex));\n  }\n }\n if (val.get_Count() <= 0)\n {\n  return;\n }\n throw new AllException(array.Length, val.ToArray());\n}. Build failure is due a problem on master branch; I'll re-run the CI once that is fixed.. Alternative idea: translate from our syntax tree to the Roslyn SyntaxTree, and use the existing Roslyn formatters.\nOr even: write a code generator that converts the immutable Roslyn SyntaxTree into a mutable SyntaxTree, and also auto-generates a conversion function from the mutable SyntaxTree to the original Roslyn SyntaxTree. Then port the decompiler to use that newly generated SyntaxTree.\nHowever, I don't think the Roslyn syntax tree structure is quite suitable for ILSpy, e.g. we do some fancy tricks with DirectionExpression wrapping/unwrapping, so this approach might run into problems. But I do think the current syntax tree design from NRefactory is not all that great a match for ILSpy (the linked list structure is problematic, e.g. in #1202). Maybe just generate a new one using a specification in .tt file, the same way we generate the ILAst?\nLots of open questions here.... Hmm, not sure how we could display an indexed property in C# syntax.\nWe could ignore the property and display the accessor methods instead (like the VS metadata view does), but then we're missing out on the property attributes.\nOr we could display the parameter list somehow, maybe as a code comment:\nnew CodeElement CodeElement/*[vsCMElement]*/. 1. I just fixed the array.Length access. This gets rid of the unsafe and simplifies the loop condition to i < array.Length.\n2. The checked is expected here, arithmetic in VB is checked by default.\n3. The redundant store to a useless ex2 variable is really present in the IL code. By default ILSpy tries to represent such useless code in the decompiled C#; but you can enable \"Remove dead and side effect free code\" in the options.\n4. The switch/goto mess here is a case of VB's On Error Resume Next. Duplicate of #1092.. You can still get a similar effect by switching the C# language version to one which didn't have those features.\nThe problem here is that we've implemented a bunch of new language features: there's currently 17 individual options controlled by the C# language version selection, and that number will only increase in the future. Having a checkbox for each individual option is no longer viable.\nWe could still have checkboxes for the most important ones, but then how would the checkbox state interact with the language version dropdown?. We think the presets based on language version are sufficient. Fine granular options would add a lot of complexity to the UI/settings code.. ILSpy already checks whether disambiguation is necessary, and should produce fully qualified names if the short name does not resolve as expected.\nIf you have a case where this fails, please post a full example.. Fields are shown in metadata order.\nBut I agree that the missing value for Wednesday looks weird. If we have to show some values, we should probably just show all values.\nThe assertion indicates that our IL-level approximation to the set of usings was inaccurate, and we ended up inserting an unexpected using. I guess the approximation is missing support for non-custom attributes.. We prefer that crashes are reported and fixed.\nWe won't add a new UI feature just for cases where ILSpy has a bug.. Yes, there was a fix to the addin after the beta release.\nYou can find the current version on:\n  https://ci.appveyor.com/project/icsharpcode/ilspy/branch/master\nthen click \"Configuration: Release\" then \"Artifacts\"\nPlease let us know if that solves your problem.. Any 'remove temporaries' step must happen in the ILAst.\nConsider code like:\nBigInteger[] arr = { a, GetInstance().MyBigInt += b, c };\nIf the temporary representing the GetInstance() result value is not already removed when the array initializer detection runs, we can't recognize the array initializer.\nBut then there's also code like:\nGetInstance().SomeProperty += SomeFunction(new int[] { a, b, c });\nNow the get_SomeProperty and set_SomeProperty calls are separated by the array initializer, so we can only detect a compound assignment if we have already detected the array initializer.\nMany transforms depends on sub-expressions already being recognized as a single expression; but often such transforms themselves combine multiple statements into a single expression. Thus, all such transforms depend on each other, they must run in a single interleaved pass. -> StatementTransform\nSo that's where compound assignments with user-defined operators need to be detected.\nNow, I don't think it makes sense to move all of ReplaceMethodCallsWithOperators into the ILAst -- e.g. the ILAst BinaryNumericInstruction is designed for built-in operators, re-using it for user-defined operators doesn't make much sense. And the semantics of a normal user-defined operator are already perfectly captured by a normal call instructions. But compound assignment needs to be special cased in the ILAst. So maybe we need a new compound.call instruction in the ILAst (for use only with user-defined operators). Or we change the existing CompoundAssignmentInstruction to also support calls in addition to the builtin operators.. We've added ILAst support for compound assignments with user-defined operators (#1129). Your code should now decompile correctly.. We changed release plans. There likely won't be another 3.1.x; but we'll release a 3.2 from master before merging the ILSpy 4.0 System.Reflection.Metadata branch.. The (object) cast is correct, the IL code does perform a reference comparison and not a value comparison. I guess we could cast both sides to object to to avoid the warning?\nThe transformation into a switch is semi-correct; it depends on string literals being interned in the same pool as the string.IsInterned result. I'm not sure if this is always the case, I was under the impression that an assembly with [assembly: StringFreezing] that is NGEN'ed would use a different pool for its string literals. Of course, in the absence of that attribute the transformation to switch is correct.\nWe could add support for this switch pattern; but we already have quite a few different switch patterns; and I don't think it's worth the effort to add yet another one unless a popular compiler outputs this pattern. Do you know which compiler was used here? (the naming convention gives me the impression we might be in Visual Basic territory here?). I don't see why the API of ICSharpCode.Decompiler and the ILSpy UI have be related.. The current support for short-circuit operators is based on few hardcoded code patterns in ConditionDetection.HandleIfInstruction().\nIt might be that there's just a few patterns missing until the combination of patterns can handle the general case, or it might be that the current approach isn't viable and needs to be replaced altogether.... In addition to the tests, what we're usually doing with significant decompiler changes:\n We decompile a bunch of assemblies (usually the RoundtripTests, sometimes some .NET System.* assemblies) with both the old and new ILSpy code version, then take a look at the resulting diff.\n\nSubquestion: Is there any need to keep single branch blocks when transforming, or can the result of UnpackBlockContainingOnlyBranch be inserted directly as IfInstruction.TrueInst\n\nFor branch instructions there shouldn't be a difference. In general, Block { inst } differs from inst in that the block always evaluates to type void, but the instruction within the block might have a different result type (if the return value is ignored). Since ILAst if acts like the C# ?: operator when the TrueInst/FalseInst evaluate to a value, removing a block might end up changing the semantics. (it'll likely result in an assertion if the TrueInst and FalseInst produce different types). I'm not aware of any other than those you found in Loops.cs.\nI guess an easy way to find additional problematic control flow would be to decompile some assemblies and search for goto in the decompiled code (though you'll have to compare with the original C# code -- sometimes there really was a goto in there).. You can use #if in pretty tests to include a test only with certain compilers. (e.g. the names of temporaries might change with #if ROSLYN && OPT)\nSee Tester.GetPreprocessorSymbols for the full list.. This might be another manifestation of variable splitting being less than perfect due to value-type calls.\nThe nullable3.ToString() call receives the address of nullable3, so the decompiler can't easily simplify nullable3 = null; nullable4 = nullable3;, and the whole nullable transform falls apart.\nimmutableArray seems to be suffering from the same problem.. See also #1082.. Looking at the code, we're also missing a check that an index isn't used multiple times.\nOtherwise we could end up removing an instruction which might have side effects.\nAlso, we need to take care to avoid reordering side effects. So we should probably just enforce indices being initialized in ascending order.. Interesting. In C#, it's clear that it's impossible to leave the try{}finally{} construct without an exception, because any attempt at leaving the try block will enter the finally block.\nHowever in IL, the only instruction for jumping out of a try-block is leave, which requires a target to jump to, and said target must not be inside the try-finally construct. The compiler needs to put some code in this unreachable target block to make the IL valid, so it generates an infinite loop.\nILSpy now tries to eliminate the jump and use normal control flow out of the try block to reach the infinite loop -- but then notices that it just put code in an unreachable spot, and asserts.\nInstead of attempting to move the jump instruction out of the try, we need to special case this and delete the jump instruction (and its unreachable target block) altogether.. The issue with the inline ref-assignments is interesting: these occur only due to the early extra run of TransformAssignments prior to CopyPropagation. If that's disabled, then the compound assignment transform wins before the normal inline assignment transform, and we arrive at the optimal code.\nFor now I've disabled inline assignments for ref locals (mostly because we need to keep the first ref-assignment on statement level to avoid CS8174), which gives us the optimal code here.\nHowever there are more cases where the pass ordering may cause problems. I think we need to consider some major changes to CopyPropagation, as this isn't the first time it causes pass ordering issues.. All the language feature options were replaced with the \"language version\" combobox. Select C# 1.0 to disable \"yield return\" decompilation. (The combobox now controls more than 20 individual features!). I can't reproduce this anymore; I think one of the fixes on #1195 also solved this issue.. The addin in 3.2 beta is broken again; in a normal (desktop) C# console application, I can't even navigate to the Console.WriteLine in a hello world app.\nEdit: I forgot there was a fix to the addin after the beta release. The latest master build from AppVeyor works for my test project.. I haven't had time to look at the code yet; but I compared the decompiler output with a few test assemblies, and it's clear that this is a massive improvement. Thanks!\nTotal number of gotos in the roundtrip tests is down from 781 to 200.\nI'll try to get this reviewed ASAP so that we can include this in the 3.2 release.. Oh right, switch blocks can have two exits (break+continue). Currently it's using the loop logic for finding a single exit point, so that can't work correctly.\nBut whatever the chosen exit point for switch is, it can always be reached via break;, so the ConditionDetection logic based on an exit point at the end of the block doesn't apply either.\nBut the transform ordering is tricky, since a single \"continue-block\" only exists after the big BlockTransform combined multiple blocks into a single block (consider a continue block involving ?. or array initializers...).\nBut I don't think continue; within switch within a for loop occur frequently enough that we should care about this case... (the more common continue; within switch within while/foreach loops should also be possible with the current LoopDetection-based design for switch). The exceptions on invalid opcode bytes are fixed in ILSpy 4.0 (which just merged to master).. See also: #1172 and #1181.\nNote: this assertion is mostly safe to ignore. It indicates a bug in the ILAst-level approximation for the using declarations. This is only relevant in some rare cases, such as null propagation with an extension method a?.M(); when there's another extension method with the same name in the namespace the assertion is complaining about.\nWe'll likely only fix it in ILSpy 4.0, as a lot of the related infrastructure has changed.. I just had a bit of trouble reproducing this: the assertion only happens if the \"Remove dead and side effect free code\" option is turned off.\nIf you are actually trying to decompile obfuscated assemblies; I'd recommend you turn that option on, so that the decompiler doesn't have to deal with the invalid IL fragments the obfuscator puts into unreachable sections.. I doubt think saving obfuscated assemblies to disk will ever work well -- we replace invalid characters in paths with -, so in obfuscated assemblies several classes/resources will get written to the same file.. That method is completely corrupt. Somewhere around IL_0410 it stops being IL, and starts being random bytes. Microsoft ildasm gives up disassembling soon after.\nThe fix I just pushed to the srm branch solves the exceptions in IL view. I'll also try to improve the robustness of the C# decompiler, but you're never going to get useful code out of a bunch of random bytes.. With a release build, decompilation finishes within 90 seconds for me. Debug builds are significantly slower due to all the assertion checking (usually 2 or 3 times slower).\nBut the profile looks weird; I think there's a performance bug in TryConvertExpressionTree.. I fixed some places where highly nested block structures caused us to unnecessarily take quadratic time.\nThis brings the runtime down to 22s (release build).\nDebug builds can be significantly slower as they perform additional recursive tree walks when verifying the ILAst invariants -- I wouldn't be surprised if this is a case where release builds take O(N\u00b2) and debug builds need O(N\u00b3).. SharpSvn.dll now decompiles without assertions for me.. The fix is in commit c17c3c739f339563749f73f0a4f2d1d65516c797.\nIf you are using an ILSpy preview version, the first one with the fix is:\n * 3.2.0.3855 (the the 3.2.x branch) -- 3.2.0-beta and 3.2.0-rc were both affected!\n * 3.3.0.3863-alpha (for the master branch)\n * 4.0.0.4045-srm (for the 'srm' branch). There are some cases where assembly resolution seems to be different now.\nOpen the \".NET 4 (WPF)\" list and select PresentationCore.\nThere will be several attributes [assembly: Dependency(/*Could not decode attribute arguments.*/)].\nThen do the same in ILSpy 3.2, it will be able to show the attribute value. The different seems to be that ILSpy 3.2 is happy to use the 32-bit mscorlib that is part of the assembly list; but ILSpy 4.0 wants to load a 64-bit mscorlib instead. The new behavior doesn't make any sense, why would the 32-bit version of PresentationCore require the 64-bit mscorlib??. We have a high-level type system (ICSharpCode.Decompiler.TypeSystem) wrapped around SRM.\nAnytime you need Resolve(), that's a sure sign you should be working with the type system and not SRM directly. (only the type system provides a resolve implementation)\nNote: there are different options to configure the type system. The ILSpy UI is using it essentially in \"single-assembly-mode\", so it can't resolve across assembly boundaries. You can create a full type system via new DecompilerTypeSystem(...).\nUse typeSystem.MainModule.GetDefinition() to get the ITypeDefinition for a TypeDefinitionHandle. Then you can use the GetAllBaseTypeDefinitions() extension method to walk the list of basetypes.. Fixed in 99f0841dd663c.. I think it would be better to put it in the normal ExpressionTransforms. It shouldn't hurt to have it after ConditionDetection, and later on we might have better information about which expressions will be of type bool.\nBy the way, not every Comp returns bool. There's the special case of ComparisonLiftingKind.ThreeValuedLogic, which returns bool? instead.. This PR needs a rebase since you squashed #1213.. Merged via cherry-pick in 5ed5ea0e0f09166e81c89e3bc1dd62267db31e9b.. I think this was also fixed in 99f0841.. Great! I haven't looked at it in detail, but believe the bug here is in TransformExpressionTrees producing an invalid ILAst in this case.\nIf you haven't seen the ILAst yet, check out this comment.\nYou can decompile the equivalent function using a lambda instead of expression tree, to see how the ILAst should look in this situation.. I think I found the problematic code path in WholeProjectDecompiler, though I'm not sure if it was reachable in ILSpy, because ILSpy was overriding that code path in a derived class.\nCan you check if the problem is solved now?. Hmm, I'm not sure what we could do on too-long file names... but I guess the 64 char limit is a bit too aggressive. I'll increase it to 200 chars. Decompiling into a directory with a name longer than 59 chars may now fail if long path support isn't enabled.. The limit here is on a file name (for some callers, on the file name without extension).\nThe Windows MAX_PATH=260 limit is for the whole absolute path. So using 200 still leaves a bit of room for the directory path and file extension.\n200 is already a rather high limit and may require long path support... if you say we shouldn't rely on that, I'll just keep the limit at 64.. I'd like to avoid a bunch of extra logic in a security-critical function.\nAlso, not every caller of CleanUpFileName uses it for a filename in the way the resource code does; it can also be a directory name or file name without extension.. Cannot reproduce; stepping into lambdas works fine.. What's happening here is that SRM throws an exceptions on invalid metadata, where Cecil pretended that the invalid metadata didn't exist at all.\nSo strictly speaking, SRM provides us more information here than Cecil did, it's just unfortunately that we constantly have to catch exceptions.... In 3.2 we started patching the compiled ILSpy.exe to increase the default stack size. I completely forgot we were strong-naming our executable.\nI guess we'll have to re-sign in the post-build-action... and for 4.0 we should consider getting rid of the strong name, if possible. (unfortunately strong names interact with versioning for ILSpy plugins...). I think the crash was a bit of debug-mode logic that disables the exception handler when running a debug build (so that exceptions stay unhandled and break into the debugger). Release builds would have caught the exception.. We could do this in debug builds (where there's sufficient nop instructions); but it might be problematic in release builds to find a suitable instruction.\nPicking a side-effect-free portion of another instruction (e.g. ldarg.0 for an opening brace) might damage stepping on that instruction if implicit IL sequence points are used instead of the PDB sequence points.\nSo I don't think this feature would be useful in practice.. If num is a value-type, it should be inlined into the .ToString() calls. Maybe there's a problem with variable splitting, so that the decompiler doesn't see the different num uses as independent?\nFor the second code snippet, inlining could handle that case, but will only do so if num is a stack slot, or if the aggressive flag is turned on. Is the C# compiler really generating a local for the temporary, even though it never needs to take the address of that local?\nI guess we could make inlining aggressive in code that looks like it's constructing expression trees, but that feels like an ugly hack.. That commit on Aug 10 just hides the bug: the comparison is supposed to be a lifted value comparison, not a reference comparison. The ILAst is already wrong, as it indicates a lifted reference comparison (which explains trying to cast to object?). Hiding the ? made the code compile, but it's still the wrong type of comparison.. Looks good to me.\nWe might want to extend this to newobj as well while we're at it (note: newobj will need to check the DeclaringType instead of the ReturnType). I'm not quite sure whether switch body detection is even in the right place (talking about the pass order).\nI put it together with loop detection mostly because I wanted to reuse the logic for finding the body blocks.\nMaybe it really ought to be somewhere in the big interleaved transform step instead.\nSo I thought about this for a while:\nFundamental differences between the C# control flow constructs:\n\nif etc. has single entry-point, and a single \"natural\" exit point (allowing additional exits via goto/break/continue/return),\n     but don't provide targets for break/continue.\nloops have single entry-point, single-exit point (allowing additional exits only via goto/return).\n    That loop exit point also serves as target for break.\n    The target for continue is more complicated.\nswitch has single entry-point, single-exit point (allowing additional exits via goto/continue/return).\n    The switch exit point also serves as target for break.\n\nThis means:\n * finding a nice exit point for \"if\" requires knowing about break/continue, so that those can be accepted while goto is avoided.\n   This means ConditionDetection should run after loop and switch bodies are detected.\n * finding a nice exit point for \"switch\" requires knowing about continue, so that those can be accepted while goto is avoided.\n * finding a nice exit point for loops doesn't require anything knowledge about anything but return statements, so it's safe to do loops first.\nUnfortunately, the \"continue\" business is tricky and depends on the loop type.\nIn particular, for \"for\" loops, only some types of C# statements are allowed as increment statement.\nSo we need to run all our statement transforms before we can tell whether something is a valid \"increment block\".\nBasically, we gain the information about what is a valid expression/statement (for if conditions and increment-blocks) in a bottom-up manner.\nBut we also need to know about break/continue targets during this bottom-up pass constructing if statement (basically passing the \"current break/continue target\" in a top-down manner).\nWhen there's only if and loops in play, there's an easy approach: first find the loops,\nthen use the bottom-up-construction for expressions/statements and structured control flow with if.\nThough even here, we'd need to take care that candidates for increment blocks are visited before any potential continue-statement is -- otherwise it's possible that an increment block isn't detected as such (e.g. because it contains not-yet-lifted nullable operations) by the time ConditionDetection runs, thus does not consider a branch to the increment block as \"continue\" and ends up picking the wrong exit point. We don't do this yet, but it's at least plausible that we could, with some additional care in the order we visit the control flow blocks.\nBut switch adds significant complexity: the \"break\" part of switch should work as in loops (thus needing the currently implemented approach), while the \"continue\" part of switch needs a bottom-up approach similar to how \"if\" is currently handled. I don't see any way to satisfy both parts at once. Since \"continue\" is somewhat rare within switch, that means we should keep treating switch similar to loops.\nSo I think your changes here are the right way to go. It feels like a hack to use HighLevelLoopTransform.GetIncrementBlock() at this point where it isn't reliable yet because the increment block isn't transformed; but I think the reasoning above explains that it is a pretty much unavoidable hack.\nFortunately most for loops have a pretty simple i++ increment block, so it's pretty difficult to actually hit this issue with our pass ordering. You'd need a loop with non-trivial increment block containing a switch containing a continue; statement. And unless I'm mistaken, any false positives or false negatives in IsIncrementBlock() will just result in redundant gotos.. As a next step, I think we should try changing up the pass order to be:\n Loop(Body)Detection\n Switch(Head)Detection\n the other switch-head-detecting transforms\n SwitchBodyDetection\nThe guesswork about the \"continue target block\" seems unavoidable, but at least we get to avoid the guesswork about which loops contain the switch.\nMaybe we could also run switch-body-detection within the pass that detects the switch head -- so instead of the SwitchUsesGoto() heuristic, we could ask \"does switch-body-detection find a single unambiguous exit point?\", and abort constructing the switch head if it doesn't.. Well, let's keep future improvements for the future.\nI'm merging the branch as-is. It's already a huge improvement, no need to wait for the perfect solution.. The decompiler is looking for the fixed pattern that the C# compiler emits for async/await, and your assembly for some reason doesn't fit that pattern.\nThe class with the async/await implementation details is intentionally hidden in the UI, as the decompiler is supposed to reconstruct the original async method. The UI just does a quick check using attributes like [CompilerGenerated], we can't afford to test-decompile whole classes just to see if a nested class should appear in the UI. If you select a language version that does not support async/await (C# 4 or older), the UI will show the class.\nYou would need to provide us with your assembly so that we can see why it has a different MoveNext structure. Maybe it was compiled with Mono? The async/await transform only supports the csc/roslyn code patterns.. This is by design. The SyntaxTree classes are from NRefactory, which had a parser that was setting all those tokens.\nBut for code generation, ILSpy doesn't need to create token objects, so we avoid that step.\nIf we end up creating a purpose-built SyntaxTree for ILSpy. we'd leave out the token classes completely.. The decompiler shouldn't implement IDisposable. It usually doesn't own the PEFile and thus shouldn't destroy it.\nIn ILSpy 3.x the CSharpDecompiler(string) constructor was just loading the assembly into memory without locking the file; we should do the same in 4.0.. The assembly being decompiled must be the main assembly of the type system; anything else would cause the type system to misbehave.\nYes, we should throw an exception in this case. (I thought we already did so -- did this get lost in the SRM port?). ILSpy 4.0 is not compatible with ILSpy 3.x plugins (Reflexil).. I'm getting the output:\nprivate void MyMethod(ref short num)\n{\n    MyClass4 @class = new MyClass0();\n    checked\n    {\n        switch (@class.Int32_1)\n        {\n        case 1:\n            num = (short)Convert.ToUInt64(((MyClass3)@class).Enum_0);\n            break;\n        case 2:\n            num = (short)((MyClass2)@class).Int32_0;\n            break;\n        case 3:\n            num = (short)(ulong)((MyClass1)@class).Int64_0;\n            break;\n        case 4:\n            num = (short)((MyClass0)@class).Double_0;\n            break;\n        default:\n            throw new Exception();\n        }\n    }\n}\nThat's exactly the original code, except that the 4 small checked expressions were combined into one big block.\nRecompiling the ILSpy output results in exactly the same IL, so there's no way to tell which checked placement is \"better\" -- ILSpy prefers using the checked keyword as few times as possible.. Thanks! This looks great, though it took me a while to understand what the conditions in ConvertBranchAfterYieldReturn were about. I ended up refactoring that code in 5d394b7786.. The decompiler has context.TypeHint which should inform the integer literal that it's supposed to be unsigned. We'll need to check why the type hint isn't being used as it is supposed to.. I think the issue is that the lambdas in the Where() calls have multiple return statements.\nThis prevents the transform from turning them into LINQ where clauses, which in turn prevents combining queries to eliminate the transparent identifiers.\nWhile we normally prefer multiple return statements over combining everything into a huge single expression, we will need to make an exception for lambdas.. This is not about inlining.\nThe C# compiler translates a single return into multiple ret statements (when using short-circuiting operators); we lack a transform that reverses this.. The ILSpy UI uses WPF, which is Windows-only. Only the decompiler engine itself is cross-platform.\nWe have a cross-platform UI over at https://github.com/icsharpcode/AvaloniaILSpy but it's a work-in-progress. You'll find Linux binaries there.. We have some logic for at least some of these, but it's currently only used in constants (public const int x = int.MaxValue;), not in normal expressions. #1322 is trying to combine the two separate code paths for integer literals.. This change still has some issues, a quick look at the roundtrip-diff showed:\n\nit broke the context-dependent hexadecimal output (why don't we have any tests for this?)\n```\npublic bool IsFrozen => (flags & 0x200) != 0;\n\npublic bool IsFrozen => (flags & 512) != 0;\n```\n\n\nit sometimes ends up introducing redundant casts, e.g. I've seen (byte)byte.MaxValue. I'm assuming the variable used by ldloca.s 1 is of type int and not bool?\n\n\nThe IL is indeed strange.\nIf the bool.ToString() implementation modified this, the new value would be visible in the original variable of type int!\nThe correct decompilation is not a cast to bool, but rather a reference cast to ref bool. C# doesn't have reference casts, so the closest thing we can emit is a pointer cast: ((bool*)&num)->ToString(). Oh, the bug also occurs if the local variable has the type bool, because inlining removes the variable so the original type doesn't really matter (though we check that the value stored fits into the type of the variable).. We definitely need some limit to avoid emitting tons of default labels.\nI think a fixed fraction like if (explicitElementCount < length / 3 + 5) should be fine; this way the C# code size will still only grow linearly with the IL code size. (the addition of a small constant is necessary so that very small arrays ending with a default element still get to use array initializer syntax)\nThe performance issue with long initializer lists has a separate ticket: #1202. When we decompose a stelem into ldelema+stobj, we effectively change when the out-of-bounds exception happens (before or after the value-being-stored was evaluated), so we mark the ldelema as having a \"delayed exception\" (this flag might be missing in the ILAst's text representation?).\nThis is what allows the value expression to be inlined in the single-dimensional array initializer case.\nIs it an actual difference in the order of operations in the IL code between single-dimensonal and multi-dimensional initializers? Or are we just forgetting to set \"delayed exception\" mode for stores to multi-dimensional arrays?. The CSharpDecompiler(string) constructor should do this by default. Keeping the file locked is only reasonable if the user code creates the PEFile instance (as then the user code can call Dispose).. What's interesting about this case is that the compiler never resets the pinned local back to null, as is usual when control flow leaves a fixed block.\nI guess this is because the control flow never really leaves the fixed block, but instead directly returns.\nAt least in non-optimized builds, the C# compiler re-uses a single ret instruction for all returns in the method, so the decompiler tries to move the block containing the ret into the fixed blocks. However, it's not possible for control flow to enter a fixed block anywhere but at the beginning, so the two control flow edges into the shared ret block cause the transform to give up.\nThe fix seems to be as simple as changing the pass ordering so that we copy the ret blocks before the PinnedRegions transform.\nHowever there still seems to be an additional problem when compiling with Roslyn instead of the old csc.. But both independent search terms occur in the member name, so should the search still find it?. The cause seems to be await dynamicExpression;\nThe C# compiler uses a completely different code pattern here than for normal awaits, because the INotifyCompletion/ICriticalNotifyCompletion distinction now has to happen at run-time instead of compile-time.\nWe are fixing the crash, but adjusting the async/await transform is more complicated.. The following would have the correct semantics in general, except that it evaluates expr twice:\nexpr is T ? expr : null\nSo we might use this when expr has no side effects.\nOf course, in the usual case where the result is compared with null, we already simplify to expr is T.\nThe problem in this assembly is that the result is unused. I guess it's fine to use expr is T in that case as well.. If everything is working optimally, debugging release binaries with generated PDB files will still have some limitations:\n * If the assembly was originally built without debug info; it will lack a debug header and Visual Studio will never attempt to load any PDB file for it.\n * If the assembly uses [assembly: Debuggable(DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)], stepping will be unreliable. The C# compiler emits this attribute by default in some release builds (depending on the debug options in use).\n * In release builds, the C# compiler likes to optimize out local variables, using the IL evaluation stack instead. There is no way for PDB debug information to assign names to evaluation stack slots, so it will be impossible to view the values of such variables.. This is an issue with the where condition; it needs to be collapsed into a single expression in order to use a query expression.\nThe \"transparent identifier\" is compiler-generated for let in query expressions.. ILSpy has two features:\n * Decompile + save code as .csproj. You can then recompile this project to generate a new DLL with new debug symbols.\n * Generate .pdb file (with embedded sources) matching the existing DLL.\nThese are unrelated features; what exactly do you think should ILSpy do differently?\nPlease be specific about what you are doing and what kind of output you expect. Currently we have no idea which ILSpy feature you are talking about.. Some background info:\nILSpy 2.x used to have an experimental debugger; but it was too much work to maintain a debugger engine in addition to the decompiler engine, so we dropped that approach. Commit 7ce68392deaac0 was the last one before the debugger was removed.\nThe current ILSpy builds (5.x) instead generate debug symbols (.pdb files), so that you can use an existing debugger like Visual Studio.. ChildIndex is one of the properties that is assumed to be always-up-to-date, and is used internally for ReplaceWith() and similar operations. I don't see a way to defer that without making the ILAst much more error-prone to work with.\nEven if it wasn't for the child index update, the underlying list.RemoveAt() is still O(N).\nAn alternative might be to replace the instructions with a dummy Nop and then later clean that up with a single RemoveAll call (but that still needs to happen within the same transform, otherwise all other transforms would have to learn to look past those Nops).. Well I guess we could use a more clever data structure to allow RemoveAt() including child-index update in O(lg N) time (something like AvalonEdit already does when deleting a line). But that might end up running quite a bit slower for small collections (and there's lots of those!). I guess we could switch between implementations depending on the collection size... not sure if that complexity is worth it.. It turns out there was a simple win available: ILInlining.InlineAllInBlock() was working forwards, when backwards makes more sense (as with most other statement transforms).\nUnfortunately it also changed the way in which inlining fails when fully inlining is not possible, which in turn affects the named arguments transform. So I had to refactor that a bit to handle the new cases.\nFor me, this change improves performance in release builds from 85.5s to 20.5s.\nDebug builds remain slow for very large functions; this is because debug builds validate the whole function after each transform step.. We just recently moved away from targeting multiple frameworks.\nThis allowed us to get rid of a whole bunch of workarounds for various MSBuild bugs with multi-targeting.\nYou need to use at least .NET 4.6.2 to consume the current decompiler versions (ILSpy >=5).\nUse the older versions (<=4) of ICSharpCode.Decompiler on NuGet if you need to support .NET 4.5. The NuGet had separate builds of the .dll for the various framework versions; copying the .dll from an ILSpy installation won't give you the .NET 4.5 variant!. I thought we already had logic that escaped invalid identifiers?\nIt's intentionally not enabled in the ILSpy UI (there's no need for escaping there; so we only handle non-printable characters); but the whole project decompiler uses it.\nSee class EscapeInvalidIdentifiers.. This change is redundant; see the existing class EscapeInvalidIdentifiers.. We already do this for enums marked as [Flags].\nIt's more difficult for something like Keys, because we don't want to decompose Keys.R into individual bits.. Interesting. The Microsoft compilers generate\n[load address]\n    IL_0008: dup\n    IL_0009: ldobj [mscorlib]System.UInt64 /* 01000012 */\n    IL_000e: dup\n    IL_000f: stloc.1\n    IL_0010: ldc.i4.1\n    IL_0011: conv.i8\n    IL_0012: add\n    IL_0013: stobj [mscorlib]System.UInt64\n    IL_0018: ldloc.1\nfor a compound assignment, which doesn't trigger this assertion.. The decompiler engine is single-threaded, so there's no need for atomics/locking. (decompiling a whole project uses multiple instances of the engine in parallel)\nI guess this is a problem with the VS debugger if it doesn't call enumerator.Dispose(). I don't think there's anything we can do here without giving up this assertion completely, and it's far too valuable for that.. Yes, DeclareVariables has logic for exactly this case:\nCommit cad933184a13be582606ca3994699558a6466f99:  Don't introduce foreach when doing so would create a conflict with another variable of the same name as the loop variable.\nI guess that PST change was lost because back then we didn't have \"foreach over array\" logic; and all the foreach logic we had back then was moved to the ILAst. And of course the relevant test cases in that commit use IEnumerable, not arrays.. Note that simply recombining the variables in the ILAst is not possible: variables need to stay separate until DeclareVariables runs, otherwise it would be unable to declare a variable twice in different scope. (the current DeclareVariables assumes that variables are already split; unlike the ILSpy 2.x approach which had to re-run definite assignment analysis when declaring variables). We haven't quite decided whether we want internationalization.\nThere's already PR #1299 for Chinese (which already moves the existing string to a resource file).\nI guess a second translation would be a point in favor of merging that.. The cast here will crash for unknown operator types (e.g. a VB exponentiation operator)\n. Only cgt.un can be used for inequality, cle.un is not affected.\nSee footnote 2 on table 4 \"Binary Comparison or Branch Operations\" in the ECMA-335:\ncgt.un is allowed and verifiable on ObjectRefs (O). This is commonly used when comparing an \nObjectRef with null (there is no \u201ccompare-not-equal\u201d instruction, which would otherwise be a \nmore obvious solution)\n. Yes that would be a possible solution.\nThe not-simplification logic needs to look at type information anyways, as currently we perform the transformation from !(a < b) to (a >= b) for all primitive types, but that is incorrect for floats/doubles if one or both arguments are NaN.\n. This is not how you use a WebClient. Download from anything but localhost, and you're guaranteed to hit the else branch.\n. We use a local branch of this repo to also commit the decompiled code. This allows easily diffing the decompiler results after a test run to see what's changed. But we don't want to push these commits; and we certainly don't want to accidentally commit an updated submodule reference in the main ILSpy repository to point to such a 'decompiled' commit.\nIs there a way to avoid 'git commit -a' and GUI tools like TortoiseGit picking up a submodule change if after such local commits? If not, I'd prefer if we didn't add this as a submodule.. Actually, there's not really any reason why the test inputs and the decompiled test output needs to be in the same directory/repository.\nWe could eliminate ILSpy-tests altogether and commit the tests assemblies directly to the main repository (possibly using git LFS to avoid big binaries accumulating in the history); and anyone interested in diffing the outputs can 'git init' a local repo in the decompiled output directory.. We should add the KeyComparer class (back) to ILSpy, then this class could be replaced with:\nKeyComparer.Create((AssemblyNameReference r) => r.FullName). You should add a code comment like this: // The primitive types are necessary to avoid assertions in ILReader.. And in general this code needs some comments about why we have to add additional assemblies to the compilation; that it's mostly about PCL/.NET core, etc.. Does the log have to go through global state?\nWhat if I'm a user of the ICS.Decompiler library and want decompile two assemblies in parallel while keeping the logs separate?. This would be better using: char separator = System.IO.Path.PathSeparator;. Why are you calling ExpandEnvironmentVariables? I don't think PATH is allowed to contain references to further envvars.\nOn the other hand, there's no guarantee that all elements in PATH are valid paths -- programs are supposed to ignore invalid elements. Beware of Path.Combine() throwing ArgumentException when PATH contains malformed elements!. @sharwell: msbuild imports all environment variables as properties.\nThis is also the reason why our debugbuild.bat file has to explicitly specify \"/p:Platform=Any CPU\" -- on some systems, a PLATFORM envvar unrelated to msbuild is otherwise causing problems.. Instead of passing inst as a parameter, you could just return ExpressionWithResolveResult and have the caller add the ILInstruction.. The code below expects the params parameter to be the last parameter, but I'm not sure if that's guaranteed -- after all, in IL the attribute may be used on an arbitrary parameter.. Instead of *Copy, a better variable name would be to say that these are the expandedParameters and expandedArguments.. unused variable. For the logic when calling constructors, see CSharpResolver.ResolveObjectCreation(). (note that we don't need to handle delegates/dynamic in this code path; you can just copy the core loop adding the accessible constructors). Instead of testing for ErrorExpression, you can check: other is AstNode node && node.Annotation<LdMemberToken>() != null. v.LoadInstructions will give you all the LdLocs for a variable, so you don't need to search the whole function.. !(x?.Method.FullName.Equals(\"...\") ?? false)) seems to be a very convoluted way of saying x?.Method.FullName != \"...\". You only check for normal string literals.\nFormatted string literals are probably also forbidden?\nWhat about char literals?\nWhat about the ?: operator (might be problematic due to having a :)?. Oh interesting, those are a lot generated strings. And (almost?) all of them will never be used (except for debugging output).\nIs the start == 0 special case all that helpful? I would expect the values to be evenly distributed across the IL body.\nWe should try to see if we can get away with v.Name == null here and generate this default name only on-demand (when writing debug output).. Of course the fact that we generate an ILVariable object at all is already suboptimal -- if we combined the ILReader with a first (simple) round of inlining, we could probably avoid allocating at least half of these variables.. I recently switched over quite a bit of stuff from IList<T> to IReadOnlyList<T>, so we might want an extension method for that as well.. Oh right, the ILRange only gets set in ReadInstructions(), which is after the Push() call.\nThe variable name we see in debug output is that assigned by the CollectStackVariablesVisitor, after the variables from different control flow paths are unified.\nI guess that means the initial name can safely stay null, as there's no way to observe it outside of the ILReader.. When does it ever make sense to allowDynamicDispatch for a static CallInstruction?\nI'd say that dynamic dispatch should never be allowed (which in turn means we can convert dynamic arguments unconditionally before we even try OR). This transform is replacing two evaluations of target with one. It's not just sufficient that both copies are identical, they also need to be side-effect-free for the transform to be valid.. This is better done by extending ILInlining.NonAggressiveInlineInto(). RemoveDeadCode was introduced for F# (which emits much more dead code than C#).\nIt's not enabled by default, so it feels weird to have to use it in the C# tests.\nAs far as I can tell, it's only for while (true) loops compiled with legacy csc in debug mode?\nI guess it's fine to special-case this for the test case... but maybe it would be better to have a transform that removes this specific kind of dead store independent of the RemoveDeadCode configuration option.. GetIncrementBlock should be changed to return null instead of throwing an exception.. Moving instructions from the current block into a nested block is potentially problematic, because the following block transforms apply only to the current block, any nested blocks are expected to be already completely transformed.\nBut I guess it's OK in this case because it's only moving instructions that were previously inlined from another block.. After the old ConditionDetection was originally written, we strengthened the Block invariants to allow a non-Nop FinalInstruction only for the inline block types:\n branch.TargetBlock must be directly within a container (via Branch invariant)\n Any block in a container must have type ControlFlow (via BlockContainer invariant)\n* ControlFlow blocks can't have a FinalInstruction (via Block invariant)\nSo these checks are redundant now. I'll modify the code to replace them with an assertion.\nAlthough, this doesn't hold for most blocks being checked, since the ThenInst of a IfInstruction could theoretically be an expression represented by an inline block (a ? new C { ... } : ...).. Quadratic search. Could be optimized using a HashSet with a CompatibleExitInstructionComparer...\nBut I guess usually there won't be that many exits.. This function already exists: !SemanticHelper.IsPure(inst.Flags)\n(your version misses that BinaryNumericInstruction can have side effects, e.g. OverflowException or DivideByZeroException). The early return here prevents recursing into the child instructions.\nIn expression transforms, it's usually better to first call base.VisitBinaryNumericInstruction() to handle the children (thus applying transforms in post-order).. This change is not thread-safe.\nIn the rare case where multiple threads are concurrently initializing isDecimalConstant, we need accesses to be atomic.\nBut Nullable<T> is a struct and may have torn reads/writes.. Same thread-safety issues here.. I'm assuming Roslyn uses a plain sub here? You should also check the overflow flag, as-is you're also matching sub.ovf/sub.ovf.un.. The ShiftInterval logic here doesn't seem quite right to me. Is there any reason you did not use trueValues.AddOffset(sub)?\nAddOffset should be a better match for the wrap-around semantics of sub. (see also: SwitchAnalysis.AnalyzeSwitch()). This function isn't returning statements, but control flow nodes. I guess Avoids returning continue statements should be Avoids returning the target block of continue statements?\nAfter all, continue; is fine within a switch, we just don't want to move the increment block itself.. Can you comment some more on what this constructor is supposed to be doing?\nWhy is it analyzing the control flow reachable from the switch head, but stopping at loop heads?\nIs it trying to follow the control flow up from the switch through the loop back-edge (a continue; statement) to the loop head, thus discovering the outer loop containing the switch?\nIf so, doesn't that fail for the following code?\nwhile (true) {\n  switch (i) {\n     case 0:\n        while (i < 10) i++;\n        continue;\n     default:\n        return;\n  }\n}\nThe outer loop head is not reachable from the switch without going through an inner loop head, but your traversal stops at the inner loop head.. This is quite unreliable here; any non-trivial loop condition might take up multiple blocks at this point in time.\nThe \"do-while condition block\" doesn't exist until much later in the transformation pipeline. Not sure what could be done about that.... Oh, n.Dominates(contextNode) is not the typical loop-head check. My example is no problem, since there's no loop head detected for the inner loop.\nStill not quite sure which loop heads this constructor is supposed to find. All loop heads reachable from contextNode that also dominate the contextNode? It doesn't quite do that, though at least it should usually find the head of the loop that a continue; would target.\nA different approach here would be to just iterate through the nodes dominating contextNode, and check if any of them is a loop head:\nfor (ControlFlowNode n = contextNode.ImmediateDominator; n != null; n = n.ImmediateDominator) {\n   if (n.Predecessors.Any(p => n.Dominates(p))) {\n      loopHeads.Add(n);\n   }\n}\nThis should give you the heads of all loops containing contextNode, already ordered from innermost to outermost.. The problem is that we're running at a point where loop bodies haven't been detected yet. \"loops containing contextNode\" is not quite defined yet.\nCode dominated by a loop head could end up in the loop, even if there's no back-edge:\nouter_loop_head:\nwhile (...) {\n    while (...) {\n       if (...) {\n         switch (...) { ... goto outer_loop_head; }\n         return;\n       }\n   }\n}\nBut such a block dominated by the loop without back-edge could also end up outside the loop -- ultimately it's up to loop detection's decision.\nMy code snipper approximates \"heads of all loops containing contextNode\" by computing \"heads of all loops dominating contextNode\" (thus giving an upper bound). Your code seems to give a lower bound instead, so really the question is: which type of error is better here, false positive or false negative?\nMaybe we could change the pass ordering to detect loops before we start dealing with switches? I don't see a reason why SwitchDetection needs to run before LoopDetection; and loops->switches->ifs seems like it would cause less issues.. The BeginInvoke call is still there, so the comment is still relevant (only now it's the new DecompilerTypeSystem call that loads additional assemblies). I think the if (memberRef == null) code can be moved out of the if (typeHandle.Kind == HandleKind.ExportedType); only the way we construct the type system differs depending on whether we're dealing with a type forwarder.. Don't forget the return value of the base call.\nIt's theoretically possible to have a safe stackalloc that uses unsafe code in the size computation.. What's this?\nFloat literals are exact, we certainly shouldn't use a constant if the value does not match exactly.. I'm pretty sure there's quite a few doubles closer (but still not equal) to Math.PI.\nWe should add test cases with nextafter(Math.PI, +inf) and nextafter(Math.PI, -inf) (the two doubles surrounding Math.PI). And the same also at a few other scales, because an epsilon that works with numbers between 2 and 4 might not work when PI is multiplied with 180.. Oh sure, there can be multiple decimal values that get mapped to the same float.\nBut it's always well-defined which float you get, and if the IL code has a similar but different float, we can't just use a constant without changing the semantics of the program.. Are you sure the previous value was true? e.g. in nested array initializers.... Can you add a comment describing the transformation here?\nAlso, don't forget to copy the ILRange.. ",
    "dsrbecky": "Removing the base..ctor();  would change the semantics - the base constructor would be called before the field assignment so we can not remove the line untill we implement something the push the inline field initializations out of the constructor. \n. It is correct, just not nice.  It is the one the top items on my TODO list.\n. If you do not declare a constructor, C# will generate a default one for you - this is what you are seeing so it is correct.  However, we should \"optimize it away\".\n. What do you mean?  Do you know how to trigger thouse?\nThe first one would mean inconsisten stack - that is quite forbiden in CLR.  So it would mean that there is a bug in the analysis.\nThe second/third would mean that there is unreachable IL code - that is probably allowed, but again, it more likely means there is some scenario I did not htink of.\n. Oh, I see the other bug report now...\n. I do not see anything that would branch to IL_0108.  Is there some branch to that location somewhere else?  Or is the code really just plainly unreachable?  Does that come from the C# compiler?\n. Should be fixed in adfc7fc3e4c7ef7a3f920a8d2e799a26b174ba19\nPlease try it.\nI did not address if (branchTarget.StackBefore.Count != newStack.Count) // is true\nIf you can reproduce it, please open new bug report\n. Fixed in adfc7fc3e4c7ef7a3f920a8d2e799a26b174ba19\n. Fixed in 5c8f11eaab8693998ee9ad3eaddac24b115dbf7b\n. Rewritten goto removal.\nClosed by 1bc30662b00110bb5a63eeb4cddf01f26aa0412e\nClosed by 1bc30662b00110bb5a63eeb4cddf01f26aa0412e\n. Fixed analysis for prefixed bytecodes - Closed by 021b9230364a0d55615311850236a73f292cfc13\n. Reduced the complexity of short-circuit detection to polynomial time.\nClosed by 8de27deb9e1397114bbc343ddfe7dcfc4125ebfa\nClosed by 8de27deb9e1397114bbc343ddfe7dcfc4125ebfa\n. Generate switch default case.   Closed by 84d45645bd696a80280e940f014c6ba16f4a2a28\n. A simple solution would be to use casts whenever there is more then one overload.  Or whenever there is more then one one applicable overload.  I would not go as far as implementing \"betterness\".\n. Working on it - The function triggers absolutely nasty worst case in short-circuit detection.  I have to rewrite the optimization to one with polynomial complexity.\n. Reduced the complexity of short-circuit detection to polynomial time.\nClosed by 8de27deb9e1397114bbc343ddfe7dcfc4125ebfa\nClosed by 8de27deb9e1397114bbc343ddfe7dcfc4125ebfa\n. Rewritten goto removal.\nClosed by 1bc30662b00110bb5a63eeb4cddf01f26aa0412e\nClosed by 1bc30662b00110bb5a63eeb4cddf01f26aa0412e\n. Should be fixed in e2291940fb153a53160ef6ce6226cab368db83a4\n. Simplify short circuit logic in return statements.  Closed by 3d4804a695a959307a07eb60c5a3382e63972535\n. Can you try to change the IEnumerable in \"public IEnumerable Items\" to:\n1) IEnumerator\n2) IEnumerator\nReport any differences :-)\n. Elaborate\n. ILBasicBlock refactored to consist only of the body.  Removed ILComment.  Closed by ab9452a30e98f9510d8a6170be80f126f784b9f5\n. Fixed in 7ac44375ff469f69f10be39558bba39843361df3\nYour fix is correct.  However, I acutally wanted to know why it was happening so I investigated it more - it was bacause of unreachable IL code.\n. How did you create the code?  Did you compile it in C# or VB.NET?  Or did you write it by hand in IL?  If you used some normal compiler, what was the original source code?\nDoes the code even execute at runtime or does the runtime refuse to execute it?\n. What is the IL code of the method you are decompiling?\n. Huh, this is strange.  The code does not seem to do anything with stack at all:\nIL_00be: nop\n                    IL_00bf: nop\n                    IL_00c0: nop\nI do not see where the problem could be.\nDo you think you could send me the assembly to dsrbecky at gmail dot com?\n. I had a quick look.  It would seem to me that the code is invalid.\n                        IL_00c3: nop\n                } // end .try\nI believe that the try block has to end with a leave instruction and can not just fall though like this.  Do you know if the code actually executes?\n. Just to clarify - this particular method is acutally executed?  (As oppoed to the whole applicaion running, but this method never being jitted)\n. I would prefer if ILAstBuilder did not do any modifications of code.  The modification can be done just after it is finished - at the start of optimizations just before pop instructions are removed.   The approach of replacing leave with pops + leave is probably best though.\n. Only leave and leave.s have PopAll behaviour in Cecil.  So if Cecil is right, these are the only two instructions we have to worry about.\n. I have a question about the Ldloca variable splitting.  Is that a proper solution (always produces correct code) or just a hack that kind of works with most of the time?\n. What about something like this (pseudocode):\nval = 1;\nptr = &val\nval = 2;\n*ptr = 3;\nprint(val); // Should print 3\nWouldn't your algorithm separate the val into two variables and thus print 2?\n. I am pretty sure that this problem can not be solved in general, but you are along the right path.  Some specific cases can be treated as load or store depending on the following instruction.  However, if there are any unknown ldloca instructions, then the variable simply can not be split.  The first priority of ILSpy is to generate correct code.\nCan you try to limit the algorithm only to the cases where it is guaranteed to work?\n. Yes, \"types and members\" in that case\n. So what would you expect there to see?  Delegates are not supposet to have any members (other then the implicit ones).\nhttp://msdn.microsoft.com/en-us/library/ms173171%28v=vs.80%29.aspx\n. Well, at least in C#.  But it would seem strange if other languages allowed it.\n. Yes\n. Much better :-)\nAlthough my head is spinning a bit - I wonder whether there is a simpler solution.\nHowever, as long as the test diff is good, I am ok with this.\n(Closes #279)\n. Other solution would be to replace ldloca by other instructions in ILAstOptimizer (as we already do in several cases) and then do the variable splitting afterwards.  That would, of course, mean implementing the splitting on top of ILAst instead.  On the other hand, the ILAstBuilder is already doing the use-def data-flow analysis for the stack, doing the same for local variables kind of nicely fits in there.\nI would keep it as it is unless we find a case where it is insufficiently powerful.\nMaybe the ConvertLocalVariables could just be refactored so that there are \"obviously no bugs\" rather then \"no obvious bugs\".  I am thinking that the standard \"definition-use\" naming might make more sense then \"store-load\" here.  Also, having the two sets mutually exclusive would be nice.\nBy the way, what are \"ldloca of uninitialized variable\" about?  When does it happen?  Can we just do no optimizations in that case?\n. Hi, I have applied your patch and then I have refatored the code.  Would you like to take a look at it and test it?\n. Did you try the last nightbuild?\n. I have though of this one too.  Would you like to implement it? :-)\n. It would be good in #D as well \n. Is it really incorrect?  The code seems equivalent to me.\nILSpy tries to generate code without gotos and uses them only as last-resort fallback.  It has done an ok job here since it has actually reduced their count to two.\nIt unfortunately does not make any effort to nest them properly so that the code compiles.  I am not sure if that is even generally possible.  (other then turning off the loop and condition decompilation stages and keeping just basic block list)\n. ",
    "Thoemmeli": "Understood and accepted.\nThank you.\n. ",
    "DmitryFriesen": "Must be:\nprivate bool myField1 = true;\npublic MyClass()\n{\n}\n. in file ICSharpCode.Decompiler\\ILAst\\ILAstBuilder.cs\n. ILSpy_0.1.0.325_Source\nIL_00e9: ldloc.1\nIL_00ea: stloc.s 4\nIL_00ec: ldloc.s 4\nIL_00ee: brfalse.s IL_010a\nIL_00f0: ldstr \"-\"\nIL_00f5: ldloc.2\nIL_00f6: callvirt instance string [mscorlib]System.Text.StringBuilder::ToString()\nIL_00fb: callvirt instance string string::Trim()\nIL_0100: call string string::Concat(string, string)\nIL_0105: stloc.3\nIL_0106: br.s IL_011a\nIL_0108: br.s IL_0119   <----- Ln 235: byteCode.StackBefore == null \nIL_010a: nop\nIL_010b: ldloc.2\nIL_010c: callvirt instance string [mscorlib]System.Text.StringBuilder::ToString()\nIL_0111: callvirt instance string string::Trim()\nIL_0116: stloc.3\nIL_0117: br.s IL_011a\nIL_0119: nop\nIL_011a: ldloc.3\nIL_011b: ret\n. IL_0000: nop\n    IL_0001: ldarg.0\n    IL_0002: ldfld class [mscorlib]System.Collections.Generic.Dictionary`2<string, class RaceClient.clsRunningClock> class RaceClient.clsRaceClient::mRunningClocks\n    IL_0007: ldarg.1\n    IL_0008: callvirt instance bool [mscorlib]System.Collections.Generic.Dictionary`2<string, RaceClient.clsRunningClock>::ContainsKey(!0)\n    IL_000d: ldc.i4.0\n    IL_000e: ceq\n    IL_0010: stloc.1\n    IL_0011: ldloc.1\n    IL_0012: brfalse.s IL_001c\n    IL_0014: ldstr \"\"\n    IL_0019: stloc.0\n    IL_001a: br.s IL_0053\n    IL_001c: ldarg.0\n    IL_001d: ldfld class [mscorlib]System.Collections.Generic.Dictionary`2<string, class RaceClient.clsRunningClock> class RaceClient.clsRaceClient::mRunningClocks\n    IL_0022: ldarg.1\n    IL_0023: callvirt instance !1 [mscorlib]System.Collections.Generic.Dictionary`2<string, RaceClient.clsRunningClock>::get_Item(!0)\n    IL_0028: ldnull\n    IL_0029: ceq\n    IL_002b: ldc.i4.0\n    IL_002c: ceq\n    IL_002e: stloc.1\n    IL_002f: ldloc.1\n    IL_0030: brfalse.s IL_0049\n    IL_0032: ldarg.0\n    IL_0033: ldfld class [mscorlib]System.Collections.Generic.Dictionary`2<string, class RaceClient.clsRunningClock> class RaceClient.clsRaceClient::mRunningClocks\n    IL_0038: ldarg.1\n    IL_0039: callvirt instance !1 [mscorlib]System.Collections.Generic.Dictionary`2<string, RaceClient.clsRunningClock>::get_Item(!0)\n    IL_003e: ldarg.2\n    IL_003f: callvirt instance string RaceClient.clsRunningClock::get_ClockString(int32)\n    IL_0044: stloc.0\n    IL_0045: br.s IL_0053\n    IL_0047: br.s IL_0052    <---- byteCode.StackBefore == null\n    IL_0049: nop\n    IL_004a: ldstr \"\"\n    IL_004f: stloc.0\n    IL_0050: br.s IL_0053\n    IL_0052: nop\n    IL_0053: ldloc.0\n    IL_0054: ret\nThis is the real code and Reflector shows:\npublic string get_GetClock(string ClockId, [Optional, DefaultParameterValue(0)] int TimeBase)\n{\n    if (this.mRunningClocks.ContainsKey(ClockId) && (this.mRunningClocks[ClockId] != null))\n    {\n        return this.mRunningClocks[ClockId].get_ClockString(TimeBase);\n    }\n    return \"\";\n}\n. In this case, you must add the attribute '[MethodImpl (MethodImplOptions.InternalCall), SecurityCritical]'\n[MethodImpl (MethodImplOptions.InternalCall), SecurityCritical]\nprivate static extern void ChangeTypeEx(Variant result, Variant source, int lcid, IntPtr typeHandle, int cvType, short flags);\n. private static bool ProcessTerminal_HM_S_D(ref TimeSpanRawInfo raw, TimeSpanStandardStyles style, ref TimeSpanResult result)\n. Very long!!!\nin code 'ldobj' <---\n. I understand that this is a convention, but I want to adhere to certain agreements.\n. Once could not create a test. I will try to write the test.\n. ```\nclass Class3\n{\n    private List list = new List();\n    public List.Enumerator enumer;\n    private object obj;\npublic IEnumerable Items\n{\n    get\n    {\n        this.enumer = this.list.GetEnumerator();\n        while (this.enumer.MoveNext())\n        {\n            this.obj = this.enumer.Current;\n            yield return this.obj;\n        }\n        this.enumer.Dispose();\n    }\n}\n\n}\n```\nThis is not exactly what we wanted, but also not true. In [CompilerGenerated]\n code is written literally as follows:\nprivate int intField;\nprivate List enumer;\nvoid IDisposable.Dispose()\n{\n    switch (this.\u0001intField)\n    {\n        case 1:\n        case 2:\n            try\n            {\n            }\n            finally\n            {\n                this.intField = -1;\n                this.enumer.Dispose();\n            }\n            return;\n    }\n}\n. I have not figured out this is a real code. IEnumerable and CompilerGenerated wrote ILSky. Once put the \"yield return\" options, he falls.\n. public IEnumerable Items\n{\n    get\n    {\n        Class3.d__0 d__0 = new Class3.d__0(-2);\n        d__0._get_Items_d__0_object_36_1 = this;\n        return d__0;\n    }\n}\nHere's the result if all options are selected. d__0 hidden.\n. I tried to change the code as follows:\nYieldReturnDecompiler.cs\nvoid ConstructExceptionTable()\n{\n   ...\n                 int index = 0; // TODO: Fert\n    if (finallyBody.Count != 2)\n                {\n                    if (finallyBody.Count != 3) // TODO: Fert\n                        throw new YieldAnalysisFailedException();\n                    index++; // TODO: Fert\n                }\n                ILExpression call = finallyBody[index] as ILExpression; // TODO: Fert\n                if (call == null || (call.Code != ILCode.Call && call.Code != ILCode.Callvirt) || call.Arguments.Count != 1)    // TODO: Fert\n                    throw new YieldAnalysisFailedException();\n                if (call.Arguments[0].Code != ILCode.Ldarg || ((ParameterDefinition)call.Arguments[0].Operand).Index >= 0)\n                {\n                    if (call.Arguments[0].Code != ILCode.Ldflda || !(call.Arguments[0].Operand is FieldReference))  // TODO: Fert\n                        throw new YieldAnalysisFailedException();\n                }\n                if (!finallyBody[index + 1].Match(ILCode.Endfinally))   // TODO: Fert\n                    throw new YieldAnalysisFailedException();\n   ...\n}\nvoid AnalyzeMoveNext()\n{\n   ...\n                if (!faultBlock.Body[0].Match(ILCode.Call, out disposeMethodRef, out disposeArg))\n                {\n                    if (!faultBlock.Body[0].Match(ILCode.Callvirt, out disposeMethodRef, out disposeArg))   // TODO: Fert\n                        throw new YieldAnalysisFailedException();\n                }\n                if ((!faultBlock.Body[0].Match(ILCode.Callvirt) && GetMethodDefinition(disposeMethodRef) != disposeMethod) || !LoadFromArgument.This.Match(disposeArg))\n                    throw new YieldAnalysisFailedException();\n   ...\n}\nAs a result, everything worked. I do not know how correctly \"if (finallyBody.Count! = 3)\".\n. Like I said it would be better:\n                if (!finallyBody[finallyBody.Count - 1].Match(ILCode.Endfinally))\n                    throw new YieldAnalysisFailedException();\n                ILExpression call = null;\n                for (int i = finallyBody.Count - 1; i > 0;  i--)\n                {\n                    call = finallyBody[i] as ILExpression;\n                    if (call == null || (call.Code != ILCode.Call && call.Code != ILCode.Callvirt) || call.Arguments.Count != 1)\n                        continue;\n                    if (call.Arguments[0].Code != ILCode.Ldarg || ((ParameterDefinition)call.Arguments[0].Operand).Index >= 0)\n                    {\n                        if ((call.Arguments[0].Code != ILCode.Ldflda && call.Arguments[0].Code != ILCode.Ldfld) || !(call.Arguments[0].Operand is FieldReference))\n                            continue;\n                    }\n                    break;\n                }\n                if (call == null)\n                    throw new YieldAnalysisFailedException();\n. v 1.0.0.561\n. It is clear to me, but how to enumerate all the references on this \ndefinition.\n-----Original Message----- \nFrom: dgrunwald\nSent: Friday, March 18, 2011 2:00 AM\nTo: fert@sl.iae.nsk.su\nSubject: Re: [GitHub] Question on the \"generic class \" [icsharpcode/ILSpy \nGH-83]\nFor fields/methods on generic classes, the IL code does not directly refer \nto the FieldDefinition/MethodDefinition, but uses a field/method reference \nin order to provide the type arguments for the declaring \nGenericInstanceType.\nYou will have to also adjust the names of all references to the elements you \nare renaming.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/icsharpcode/ILSpy/issues/83#comment_886605\n. This is a problem Visual Basic. My.MyProject/MyForms::Create__Instance__(T)\nReflector shows the pseudocode, but it does not fall!\nI think that you need not forget Basic. Obtained from IL I do not know, but \nI want him to read.\n-----Original Message----- \nFrom: dgrunwald\nSent: Wednesday, April 06, 2011 4:29 PM\nTo: fert@sl.iae.nsk.su\nSubject: Re: [GitHub] NullReferenceException [icsharpcode/ILSpy GH-88]\nCan you post reproduction steps for this issue?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/icsharpcode/ILSpy/issues/88#comment_963254\n. In Rflector - twelfth namespase seventh type ---> NullReferenceException\n. .method public final virtual newslot flag(0200) \n    instance class Ski123.clsCISCompetitionConfig GetCompetitionConfig (\n        string RaceId\n    ) cil managed \n{\n    // Method begins at RVA 0x1ef398\n    .override Ski123.iCISService::GetCompetitionConfig\n    // Code size 2 (0x2)\n    .maxstack 1\n    .locals init (\n        [0] class Ski123.clsCISCompetitionConfig \n    )\nIL_0000: ldloc.0\nIL_0001: ret\n} // End of method CISService.GetCompetitionConfig\n. ICSharpCode.Decompiler.DecompilerException: Error decompiling Ski123.clsCISCompetitionConfig Ski123.CISService::GetCompetitionConfig(System.String)\n ---> System.Exception: Load of uninitialized variable\n   at ICSharpCode.Decompiler.ILAst.ILAstBuilder.ConvertLocalVariables(List1 body)\n   at ICSharpCode.Decompiler.ILAst.ILAstBuilder.StackAnalysis(MethodDefinition methodDef)\n   at ICSharpCode.Decompiler.ILAst.ILAstBuilder.Build(MethodDefinition methodDef, Boolean optimize)\n   at ICSharpCode.Decompiler.Ast.AstMethodBodyBuilder.CreateMethodBody(IEnumerable1 parameters)\n   at ICSharpCode.Decompiler.Ast.AstMethodBodyBuilder.CreateMethodBody(MethodDefinition methodDef, DecompilerContext context, IEnumerable1 parameters)\n   --- End of inner exception stack trace ---\n   at ICSharpCode.Decompiler.Ast.AstMethodBodyBuilder.CreateMethodBody(MethodDefinition methodDef, DecompilerContext context, IEnumerable1 parameters)\n   at ICSharpCode.Decompiler.Ast.AstBuilder.CreateMethod(MethodDefinition methodDef)\n   at ICSharpCode.Decompiler.Ast.AstBuilder.AddMethod(MethodDefinition method)\n   at ICSharpCode.ILSpy.CSharpLanguage.DecompileMethod(MethodDefinition method, ITextOutput output, DecompilationOptions options)\n   at ICSharpCode.ILSpy.TreeNodes.MethodTreeNode.Decompile(Language language, ITextOutput output, DecompilationOptions options)\n   at ICSharpCode.ILSpy.TextView.DecompilerTextView.DecompileNodes(DecompilationContext context, ITextOutput textOutput)\n   at ICSharpCode.ILSpy.TextView.DecompilerTextView.<>c__DisplayClass10.b__f()\n. The above code is taken from a real assembly. It is made \u200b\u200bin VB2010. I myself do not quite understand how it's done. But there are places in this build very much.\nPublic Class Class1\n    Sub method()\n        Dim str As String\n        Dim flag As Boolean\n        If flag Then\n            str = str & \"abc\"\n        Else\n            str = \"def\"\n        End If\n    End Sub\nEnd Class\nWarning 1 Variable 'str' is used before it has been assigned a value. A null reference exception could result at runtime.\nThe result as shown above.\n. Flag can take any value. In the example written the truth, to translate!\n. Want to see the author's code or something close to that. This is apparently the main requirement for ILSpy.\n. While I can not repeat that mistake. Just the name of the file is empty?\n. This problem occurs in the obfuscated assemblies.\n. Propose a solution:\nif (isPinned || loads.Any(b => b.VariablesBefore == null || b.VariablesBefore[variableIndex].StoredByAll || b.Code == ILCode.Ldloca)) {\n. InterfaceType(ComInterfaceType.InterfaceIsIUnknown)\n. Context menu \"Find text\" in the text editor.\n. ",
    "itaibh": "I think in that case that everything before and including the base..ctor call should be removed, so the c`tor looks like the one originally written. If we want not to hide the fields initialization information it can be added as a comment.\n. Yes, that's what I meant :-)\n. Should it now display a 'foreach' code after decompilation? I tried the same code as in the UT and this is the result:\nprivate void TestForEachString(List list)\n{\n    using (List.Enumerator enumerator = list.GetEnumerator())\n    {\n        while (enumerator.MoveNext())\n        {\n            string current = enumerator.Current;\n            current.ToLower();\n            continue;\n        }\n    }\n}\n. In build 364 seems to be OK.\n. Another thing I just thought of regarding events, is that there should be a way to find all usages of an event - that is - add, remove, raise and pass as parameter. Sometimes there are event raising methods that indirectly raises events passed to them as parameters.\n. How is event analysis more problematic than any other member analysis? if anything, than simple event raise should be easier since you only have to search inside the class it was defined in. And I don't see how usage of the event member is any different from usage of, i.e., field member.\n. I see, and you are right.\nHowever, to make things simple - suppose I want to see all the places a simple event field is used. This seems easier since there is already a way from each usage to the event field declaration; so it seems the other way would be as simple as keeping a map of all usages...\n. ",
    "jensod": "Note: I also think there should be an option to replace those special labels containing <> with some thing the compliler will eat, e.g.: underscores\n    \"<>1__state\" => \"__1__state\"\n    \"d__7\" => \"_GetDebugLanguages_d__7\"\n. Formatter converted - and + to bullets the change needed is from line1 to line2\n. ",
    "richardschneider": "I've changed the AstMethodBodyBuilder.TransformCall method to cope with this issue.  How do a send you the patch file?\nPerhaps, I made the change at too low a level.  I'll look at BetterFunctionMember.\n. fixed in https://github.com/richardschneider/ILSpy/commit/c15fdc2068b72169abfa1d06ac71f5ac2d5b4fa4\n. ",
    "letiemble": "Great !!! Works like a charm even with multiple argument checks. Thanks.\n. ",
    "fhtino": "1.0.0.417\n. 2.0.0.1370 works fine.  :)\n. ",
    "gritcsenko": "1.0.0.687\nSystem.AggregateException: One or more errors occurred. ---> System.Net.WebException: Unable to connect to the remote server ---> System.Net.Sockets.SocketException: No connection could be made because the target machine actively refused it _..231.66:80\n   at System.Net.Sockets.Socket.EndConnect(IAsyncResult asyncResult)\n   at System.Net.ServicePoint.ConnectSocketInternal(Boolean connectFailure, Socket s4, Socket s6, Socket& socket, IPAddress& address, ConnectSocketState state, IAsyncResult asyncResult, Int32 timeout, Exception& exception)\n   --- End of inner exception stack trace ---\n   at System.Net.HttpWebRequest.EndGetResponse(IAsyncResult asyncResult)\n   at System.Net.WebClient.GetWebResponse(WebRequest request, IAsyncResult result)\n   at System.Net.WebClient.DownloadBitsResponseCallback(IAsyncResult result)\n   --- End of inner exception stack trace ---\n   at System.Threading.Tasks.Task1.get_Result()\n   at ICSharpCode.ILSpy.AboutPage.<>c__DisplayClass7.<AddUpdateCheckButton>b__6(Task1 task)\n---> (Inner Exception #0) System.Net.WebException: Unable to connect to the remote server ---> System.Net.Sockets.SocketException: No connection could be made because the target machine actively refused it _..231.66:80\n   at System.Net.Sockets.Socket.EndConnect(IAsyncResult asyncResult)\n   at System.Net.ServicePoint.ConnectSocketInternal(Boolean connectFailure, Socket s4, Socket s6, Socket& socket, IPAddress& address, ConnectSocketState state, IAsyncResult asyncResult, Int32 timeout, Exception& exception)\n   --- End of inner exception stack trace ---\n   at System.Net.HttpWebRequest.EndGetResponse(IAsyncResult asyncResult)\n   at System.Net.WebClient.GetWebResponse(WebRequest request, IAsyncResult result)\n   at System.Net.WebClient.DownloadBitsResponseCallback(IAsyncResult result)<---\n. ",
    "jlkeesey": "1.0.0.737\nSame problem:\nSystem.AggregateException: One or more errors occurred. ---> System.Net.WebException: Unable to connect to the remote server ---> System.Net.Sockets.SocketException: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond 195.234.231.66:80\n   at System.Net.Sockets.Socket.EndConnect(IAsyncResult asyncResult)\n   at System.Net.ServicePoint.ConnectSocketInternal(Boolean connectFailure, Socket s4, Socket s6, Socket& socket, IPAddress& address, ConnectSocketState state, IAsyncResult asyncResult, Int32 timeout, Exception& exception)\n   --- End of inner exception stack trace ---\n   at System.Net.HttpWebRequest.EndGetResponse(IAsyncResult asyncResult)\n   at System.Net.WebClient.GetWebResponse(WebRequest request, IAsyncResult result)\n   at System.Net.WebClient.DownloadBitsResponseCallback(IAsyncResult result)\n   --- End of inner exception stack trace ---\n   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)\n   at System.Threading.Tasks.Task`1.get_Result()\n   at ICSharpCode.ILSpy.AboutPage.<>c__DisplayClass7.<AddUpdateCheckButton>b__6(Task`1 task)\n---> (Inner Exception #0) System.Net.WebException: Unable to connect to the remote server ---> System.Net.Sockets.SocketException: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond 195.234.231.66:80\n   at System.Net.Sockets.Socket.EndConnect(IAsyncResult asyncResult)\n   at System.Net.ServicePoint.ConnectSocketInternal(Boolean connectFailure, Socket s4, Socket s6, Socket& socket, IPAddress& address, ConnectSocketState state, IAsyncResult asyncResult, Int32 timeout, Exception& exception)\n   --- End of inner exception stack trace ---\n   at System.Net.HttpWebRequest.EndGetResponse(IAsyncResult asyncResult)\n   at System.Net.WebClient.GetWebResponse(WebRequest request, IAsyncResult result)\n   at System.Net.WebClient.DownloadBitsResponseCallback(IAsyncResult result)<---\n. ",
    "jonparker": "1.0.0.826\nSystem.AggregateException: One or more errors occurred. ---> System.Net.WebException: The remote server returned an error: (407) Proxy Authentication Required.\n   at System.Net.HttpWebRequest.EndGetResponse(IAsyncResult asyncResult)\n   at System.Net.WebClient.GetWebResponse(WebRequest request, IAsyncResult result)\n   at System.Net.WebClient.DownloadBitsResponseCallback(IAsyncResult result)\n   --- End of inner exception stack trace ---\n   at System.Threading.Tasks.Task1.get_Result()\n   at ICSharpCode.ILSpy.AboutPage.<>c__DisplayClass7.<AddUpdateCheckButton>b__6(Task1 task)\n---> (Inner Exception #0) System.Net.WebException: The remote server returned an error: (407) Proxy Authentication Required.\n   at System.Net.HttpWebRequest.EndGetResponse(IAsyncResult asyncResult)\n   at System.Net.WebClient.GetWebResponse(WebRequest request, IAsyncResult result)\n   at System.Net.WebClient.DownloadBitsResponseCallback(IAsyncResult result)<---\n. Reopen issue - note that I am using a proxy script not just a proxy server.\nIt should be working in .NET 2.0+ though\nhttp://msdn.microsoft.com/en-us/magazine/cc300743.aspx#S3\n. I still get the same error (I'm using version 1.0.0.826 with debugger) also checked with binary version 1.0.0.943 and same error.\nWhen I set the proxy manually it works.\nNote that my proxy settings are:\nUse configuration script checkbox is checked and the address has a URL to the proxy script in it (not just a direct link to proxy server):\nhttp://intranetserver/proxy/proxy.pac\nThe actual proxy is another server.\nstatic Task GetLatestVersionAsync()\n        {\n            var tcs = new TaskCompletionSource();\n            WebClient wc = new WebClient();\n            wc.UseDefaultCredentials = true;\n            wc.Proxy = new WebProxy\n            {\n                UseDefaultCredentials = true,\n                Address = new Uri(\"http://my-proxy:80\")\n            };\n            wc.DownloadDataCompleted += delegate(object sender, DownloadDataCompletedEventArgs e) {\n                if (e.Error != null) {\n                    tcs.SetException(e.Error);\n                } else {\n                    try {\n                        XDocument doc = XDocument.Load(new MemoryStream(e.Result));\n                        var bands = doc.Root.Elements(\"band\");\n                        var currentBand = bands.FirstOrDefault(b => (string)b.Attribute(\"id\") == \"stable\") ?? bands.First();\n                        Version version = new Version((string)currentBand.Element(\"latestVersion\"));\n                        string url = (string)currentBand.Element(\"downloadUrl\");\n                        if (!(url.StartsWith(\"http://\", StringComparison.Ordinal) || url.StartsWith(\"https://\", StringComparison.Ordinal)))\n                            url = null; // don't accept non-urls\n                        latestAvailableVersion = new AvailableVersionInfo { Version = version, DownloadUrl = url };\n                        tcs.SetResult(latestAvailableVersion);\n                    } catch (Exception ex) {\n                        tcs.SetException(ex);\n                    }\n                }\n            };\n            wc.DownloadDataAsync(UpdateUrl);\n            return tcs.Task;\n        }\n. ",
    "tomfanning": "Version 1.0.0.1000 gives the following stack trace behind Microsoft ISA Server (authenticated proxy)\nSystem.AggregateException: One or more errors occurred. ---> System.Net.WebException: The remote server returned an error: (407) Proxy Authentication Required.\n   at System.Net.HttpWebRequest.EndGetResponse(IAsyncResult asyncResult)\n   at System.Net.WebClient.GetWebResponse(WebRequest request, IAsyncResult result)\n   at System.Net.WebClient.DownloadBitsResponseCallback(IAsyncResult result)\n   --- End of inner exception stack trace ---\n   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)\n   at System.Threading.Tasks.Task`1.get_Result()\n   at ICSharpCode.ILSpy.AboutPage.<>c__DisplayClass7.<AddUpdateCheckButton>b__6(Task`1 task)\n---> (Inner Exception #0) System.Net.WebException: The remote server returned an error: (407) Proxy Authentication Required.\n   at System.Net.HttpWebRequest.EndGetResponse(IAsyncResult asyncResult)\n   at System.Net.WebClient.GetWebResponse(WebRequest request, IAsyncResult result)\n   at System.Net.WebClient.DownloadBitsResponseCallback(IAsyncResult result)<---\nPlacing the following text in a file called ILSpy.exe.config alongside ILSpy.exe fixes the issue:\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n  <system.net>\n    <defaultProxy useDefaultCredentials=\"true\" />\n  </system.net>\n</configuration>\n. Fixed in the 2.0.0.1525 nightly without the workaround above.\n. ",
    "siegfriedpammer": "added in e1e40816d133148741f2b9f991d2669ec1bc4640\n. fixed in e552ae0fa1baaf7506ff6d994b1c2513c51b488a\n. we switched to a different BAML reader - cannot reproduce this in the newest builds (> 1.0.0.904)\n. unreproducible in build 1.0.0.890\n. This was likely fixed in the new decompiler engine (which just landed on the master branch).. This was fixed in the new decompiler engine (which just landed on the master branch).. Implemented in 58c174c87d4299068f5b54792a51421f4ffd56bf. a2cbd6d3456d1e4e37daec7edebb1982c8ec6042 implements a filter \"types and members\" and makes it the default.\n. I added the BAML Decompiler AddIn based on StylesExplorer in commit 71c8fb1446e9f0dd96449fa4265d2b38ae609c3e\n. This was fixed in the new decompiler engine (which just landed on the master branch).. fixed in 01493897c7285ccfc93b59e68375ac030c99ff0e \n. we switched to a different BAML reader - fixed in the newest builds (> 1.0.0.904)\n. In 4.0 we've added the analyzers for the event backing field as children of the event analyzer. I think this should suffice for most use-cases... if there is anything you're missing, please open a new issue.. StaticResourceStart is now implemented, but a new exception occurs:\nSystem.ArgumentException: Cannot find StaticResource\nParameter name: identifier\n   at Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.GetStaticResource(Int16 identifier) in d:\\Projects\\SharpDevelop\\ILSpy\\ILSpy.BamlDecompiler\\Ricciolo.StylesExplorer.MarkupReflection\\XmlBamlReader.cs:line 1535\n   at Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.ReadPropertyWithStaticResourceIdentifier() in d:\\Projects\\SharpDevelop\\ILSpy\\ILSpy.BamlDecompiler\\Ricciolo.StylesExplorer.MarkupReflection\\XmlBamlReader.cs:line 1518\n   at Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.ProcessNext() in d:\\Projects\\SharpDevelop\\ILSpy\\ILSpy.BamlDecompiler\\Ricciolo.StylesExplorer.MarkupReflection\\XmlBamlReader.cs:line 477\n   at Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.ReadInternal() in d:\\Projects\\SharpDevelop\\ILSpy\\ILSpy.BamlDecompiler\\Ricciolo.StylesExplorer.MarkupReflection\\XmlBamlReader.cs:line 312\n   at Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.Read() in d:\\Projects\\SharpDevelop\\ILSpy\\ILSpy.BamlDecompiler\\Ricciolo.StylesExplorer.MarkupReflection\\XmlBamlReader.cs:line 291\n   at System.Xml.Linq.XContainer.ReadContentFrom(XmlReader r)\n   at System.Xml.Linq.XContainer.ReadContentFrom(XmlReader r, LoadOptions o)\n   at System.Xml.Linq.XDocument.Load(XmlReader reader, LoadOptions options)\n   at System.Xml.Linq.XDocument.Load(XmlReader reader)\n   at ILSpy.BamlDecompiler.BamlResourceEntryNode.LoadIntoDocument(IAssemblyResolver resolver, AssemblyDefinition asm, Stream stream) in d:\\Projects\\SharpDevelop\\ILSpy\\ILSpy.BamlDecompiler\\BamlResourceEntryNode.cs:line 61\n   at ILSpy.BamlDecompiler.BamlResourceEntryNode.LoadBaml(AvalonEditTextOutput output) in d:\\Projects\\SharpDevelop\\ILSpy\\ILSpy.BamlDecompiler\\BamlResourceEntryNode.cs:line 52\n   at ILSpy.BamlDecompiler.BamlResourceEntryNode.<>c__DisplayClass3.b__1() in d:\\Projects\\SharpDevelop\\ILSpy\\ILSpy.BamlDecompiler\\BamlResourceEntryNode.cs:line 36\n. fixed while rewriting key and resource handling in b515326b749294eb1a825ecef7b6d7b4fc89dbba\n. fixed while rewriting key and resource handling in b515326b749294eb1a825ecef7b6d7b4fc89dbba\n. The ListBox was replaced by a ListView in 1ba2c0537a2946d08345623c14c0ee05e2f9ff36. I consider this fixed.. What should the \"find text\" entry do?\n. not reproducible in the newest ILSpy 1.0 build\n. After fixing some threading issues in ILSpy's UI I tried to reproduce this a few times, but could not trigger the context switch deadlock MDA nor was I seeing any performance problems while loading and/or decompiling the whole GAC. Can we close this?. fixed in 80ed40e6a76f75ac88e223f5af8f3e54c22e8029\n. should be fixed in the most recent 1.0 build\n. Is this still a problem in 2017 with SSDs and faster processors?\nOn my system (Windows 10 Pro x64, notebook with SSD, 16 GB memory), starting ILSpy loading a list of all assemblies in my GAC only takes approx. 3 seconds in debug mode.. I implemented some performance improvements in 12dc70e05a1362f34af5491faccb2acc97d06704 and subsequent commits. I think this is no longer an issue. If you still face any performance problems, feel free to open a new issue.. I just tried Windows 7 Home Premium with both ILSpy 1.0.0.1000 and 2.0.0.1339. Both versions can be started without any error. Can you please give more details?\n. Seems like WPF is broken on your system. Have you installed .NET Framework 4 Client + Extended? Could you please try repairing/reinstalling the framework?\n. fixed NullReferenceException in ee0f54624c79bf770a3d92a04064d05531db9116\n. fixed in 7bf95a6f4fe9c3684c69d557696cd6bef929a34b\n. An IAnalyzer API was added in 4.0.. This was likely fixed in the new decompiler engine (which just landed on the master branch).. The debugger has been removed from ILSpy. Closing this issue...\n. This was likely fixed in the new decompiler engine (which just landed on the master branch).. We just merged the switch branch, which adds goto case support.. The debugger feature is no longer part of ILSpy and likely will not come back like this.. This seems to be talking about the debugger, which was removed. Therefore I am closing this.. This was fixed in the new decompiler engine (which just landed on the master branch).. fixed in SharpDevelop see https://github.com/icsharpcode/SharpDevelop/commit/47edcedd699106e6f3d33a555ff8caf62c3d2a06 - will be merged into ILSpy later\n. Closing due to missing feedback after 5 years. Also, this is likely fixed in the upcoming new decompiler.. Cannot reproduce this.. This was fixed in the new decompiler engine (which just landed on the master branch).. This was fixed in the new decompiler engine (which just landed on the master branch).. It's hard to see what the problem is here, because ILSpy should be fine loading assemblies generated by Reflection.Emit and written to disk. Dynamic assemblies are somewhat different. No idea how you even managed loading a dynamic assembly in ILSpy. Therefore I'll close this. If somebody has a similar issue, please add an example of how you load the assembly in ILSpy and provide an assembly for us to debug. Thank you!. This was probably fixed in the new decompiler engine (which just landed on the master branch).. This was fixed in the new decompiler (which just landed on the master branch)..     at AssemblyVisualizer.HAL.ILSpy.BrowseDependenciesContextMenuEntry.IsVisible(TextViewContext context)\nYou are using a plugin for ILSpy, please report this to the author of the plugin. If it still happens after all these years... ;-). Cannot reproduce.. Where did you get the icons from? Can you provide any source and/or license information?\n. Cannot reproduce this.. This was fixed in the new decompiler engine (which just landed on the master branch).. This was fixed in the new decompiler engine (which just landed on the master branch).. This was likely fixed in the new decompiler engine (which just landed on the master branch).. dupe of #377. Closing due to missing information. Please be a bit wordier next time.. See #849. This was fixed in the new decompiler engine (which just landed on the master branch).. This was fixed in the new decompiler engine (which just landed on the master branch).. See #849 . Cannot be reproduced with current master branch => closing.\n. Could you please add a unit test case for this fix? Thanks!\n. This was likely fixed in the new decompiler engine (which just landed on the master branch).. This was likely fixed in the new decompiler engine (which just landed on the master branch).. I just tested your patch on some BCL code and found the following problem:\n\nThe old code on the left is better than the new version, because even though it doesn't compile, it shows the default case in way a human can interpret as default case.\nSee the reference source for ColorContext here: http://referencesource.microsoft.com/#PresentationCore/src/Core/CSharp/System/Windows/Media/ColorContext.cs#202\nWould be nice, if you could work on that a little more... thanks! :)\n. Soon we'll prepare a small demo command-line application that uses the CSharpDecompiler class. You could use that as a starting point for your own ideas.. This was probably fixed in the new decompiler engine (which just landed on the master branch).. Closed due to insufficient information.\n. This was probably fixed in the new decompiler engine (which just landed on the master branch).. This was likely fixed in the new decompiler engine (which just landed on the master branch).. stray bullet?\n. @davidfowl sorry for my late response... which version of ILSpy did you use? I tried to reproduce the problem using the steps provided, but the references are read correctly using the latest version.\n. @davidfowl any updates on this?\n. Closing this, because it is no longer reproducible.\n. This is almost like: The Internet doesn't work! Sorry, closing due to insufficient information.\n. This was likely fixed in the new decompiler engine (which just landed on the master branch).. I have added your commit to our master branch... thanks for your contribution.\n. if type information is missing ILSpy cannot detect the event and thus does not produce an AddHandler/RemoveHandler expression. If there's a specific case, please post a real world example.\n. Dupe of #67. Thanks for your contributon, but we won't merge it, because we already have support for regular expressions in the search box. \"match whole word\" can easily be entered as \\\\bTextBox\\b\\.\nThank you for your understanding!\n. Thanks for your contribution, however, we won't merge it currently, as it broke some unit tests and I was unable to decompile mscorlib.dll without assertion failures and/or exceptions.\nThank you for your understanding!\n. I am closing this issue. I have implemented a workaround for your problem. The underlying problem is that System.Collections.Immutable.xml is not a valid XML file.\n. Sorry for taking so long to work on this. With the rewrite of the decompiler engine we now reimplemented switch-on-string in the ILAst. We currently can only correctly handle C# switch-string patterns that either use Dictionary<string, int> (legacy C#) or a special hash function (Roslyn).\nCould you provide a binary containing an example that uses Hashtable?. Fixed by #625. fixed by updating to AvalonEdit 5.0.2 177519e19bceb7de29f1580c1d3a444f39ecbae8\n. This was fixed in the new decompiler (which just landed on the master branch).. This was likely fixed in the new decompiler engine (which just landed on the master branch).. This is already on our list.\n. Any update on this?\n. Closing as ILSpy is now part of Visual Studio.. First of all, thanks for your interest in contributing! :+1: \nSorry, but we won't accept any pull request containing binaries or nupgks.\nOur primary reason is that the repository becomes bloated, not to mention any possible legal difficulties arising from redistributing binaries without permission.\nPlease make sure to rebase your commits so that the binaries (the packages folder) are purged from the history completely.\n. you can enable Package Restore as part of this PR :)\n. thanks a lot :+1: \n. This was likely fixed in the new decompiler engine (which just landed on the master branch).. How about using the nuget package? I saw that sdb is available as nuget as well, so I think the easiest way for you would be using the nuget package. If you need any changes, you can open an issue here.. was implemented by pull request #481\n. I am not sure what you want us to implement in your last paragraph. Could you please give an example of how it should look like... Do you want us to add \"Assigned By\" and \"Read By\" as analyzers for auto events?\n. @EdHarvey we are planning to release 2.3 by Monday next week. Any chance you might get this finished by then?\n. OK... are there any open issues, you are working on? I'd like to add them to the 2.3 Milestone so we have some documentation on what's been done in this release. I will remove this one from the 2.3 milestone.\n. @EdHarvey did you make any progress with this?. See comment https://github.com/icsharpcode/ILSpy/issues/199#issuecomment-405378919\nI consider this fixed.. I cannot reproduce this using the most recent version compiled from source.\nThe enum is decompiled as\ncsharp\npublic enum b2 : uint\n{\n    b = 3418120847u,\n    c = 1586957500u,\n    d = 2383490743u\n}\nwhich seems to be correct.\n. Seems like your installation got corrupted... have you tried redownloading and replacing the files?\nYou could try resetting your settings by deleting (or renaming) %AppData%\\ICSharpCode\\ILSpy.xml\nHope this helps!\n. I think the first issue you mention was fixed in the most recent nightly release. Can you please check a nightly build from http://build.sharpdevelop.net/BuildArtefacts/#ILSpyMaster?\n. Not sure if this will happen for the next release. The tooltip is implemented in AvalonEdit, which currently doesn't support other means of notification. Sadly I don't own a mouse with fancy buttons, so it won't be easy to reproduce the issue...\n. Thanks for providing the necessary steps. I was able to fix the issue.\n. I have reverted the changes from the pull request. Thanks for reporting.\n. Why don't you want the close button to be focusable?\n. Why Ctrl+K? I'd prefer Ctrl+F for text search and Ctrl+Shift+F for the types/members search.\n. As for the idea of toggling: I'd prefer Ctrl+F to reactivate the search panel, if it's already open, that is, keep the current behavior, which matches Firefox.\n. I am closing this, if you really think you need the other items from your list, please open separate issues.\n. Cannot reproduce this... which version of ILSpy are you using?\n. Seems this is fixed after improving the using statement decompilation.. IMHO the exceptions should not be prevented. Rather the bugs causing the exceptions should be fixed. Do you have any examples?\n. I tried reproducing this issue, but I couldn't find a binary containing that exact version of WriteLineAsync. I know I am very late on this, but do you have a link to the binary? I will try to replicate it, using similar code, but I fear that it depends on the compiler version used.. Thanks for getting back to me!\nIf you don't mind me asking: What exactly are you using ILSpy for? Would you care to post some cases where you see performance issues? Have you tried the new decompiler?. The new decompiler produces:\npublic override Task WriteLineAsync(char value)\n{\n    this.CheckState();\n    return ((DecoupledTask)(this.async_task = new DecoupledTask(this.WriteLineAsyncCore(value)))).Task;\n}\n\nwhich seems correct, as it adds the necessary parentheses and casts.\nI very well understand that you are very hesitant to update, because of very bad testing on our end. In the new decompiler we changed that and are doing our best to add tests for every special case and we are doing correctness and pretty tests, as well as roundtrip tests. The new decompiler also fixes many correctness issues and architectural deficits that were keeping us from being able to fix these issues.\nFor more information see https://github.com/icsharpcode/ILSpy/wiki/newdecompiler (note: it's already on master)\n. Seems this is no longer an issue in the latest release (>= 3.1.0.3652).. I don't think it's a good idea to use + as separator for type names in C#.\nThe namespaces in the name of explicit interface implementations are generated by the compiler. Without doing expensive analysis while loading the assembly, we cannot remove the namespace.. This was likely fixed in the new decompiler engine (which just landed on the master branch).. @sharwell \n\nI think a perfect place for this would be a toolbar at the top of the list of assemblies (not the main toolbar)\n\nI think adding a second toolbar directly below the main toolbar does not make sense. It would not look nice:\n\nUnless we add something like a header to the tree view (to separate it from the main toolbar), I think adding the command to the main toolbar is just fine. Any more thoughts?\n. This is the default behavior of the new decompiler (which just landed on the master branch).. The tooltip issue seems to be fixed long ago.. Seems like the indentation of your changes is in spaces. Can you please make sure to follow the project guidelines i.e. use tabs instead of spaces?\n. @MarekPokornyOva you are aware of the ILSpy extension provided by ILSpy? Would you mind sharing/integrating your code into the official VS Extension?. I would like to include your code directly in the extension (i.e. merge), not just distribute your executable alongside ILSpy, if that's OK with you.. With the recent fixes to the VS AddIn and our integration into Roslyn, I believe this can be closed.. This is fixed in the new decompiler engine, which recently landed on master.. ILSpy already has a way to manage assembly lists - see File > Open List...\nI have to think about grouping assemblies - I don't know if they are useful enough to justify all the work.\n. no response - closing...\n. hmm... I am not really convinced that this will be more useful than annoying. A tooltip on every node seems to be too much.\n. Cannot reproduce the exception using the most recent version. Seems it's already fixed. The shortened stacktrace you provided is not of much help, unfortunately.\n. An IAnalyzer API was added in 4.0.. thank you!\n. This no longer happens with newdecompiler now on master.. Seems this is fixed now.. The AI() method decompiles in 14 seconds on my notebook (in a release build) after fixing a performance bottle-neck in AssignVariableNames.. fixed by a6ae2e4b24241ad8a4430f3aa55f99ca934f69b3\n. After the newdecompiler landed back on master we've added ICSharpCode.Decompiler.Console.sln, it should be fullly compatible with Unix. Please give it a try!\nEdit:\nNote: PowerShell is required to get the build process working on Unix.\nGet it from here: https://github.com/PowerShell/PowerShell/releases\n. Closing, because there's nothing we could fix here.\n. I guess you are confused by the error message. It basically says that the DLL you had opened previously was located at 'C:\\Utils\\ILSpy'. It seems you had opened ILSpy in itself and the version at 'C:\\Utils\\ILSpy' got deleted/moved, thus the error message.\nYou can remove the missing DLLs from the assembly list and load them again from the new location. There are no hard-coded paths in ILSpy. You are welcome to do a full text search through the source code, if you disagree ;-)\n. Seems this is related to https://github.com/sailro/Reflexil and not ILSpy. Would be better to report it there.\n. I tried to the feature, but I could not find the menu item in the call stack context menu.\n. ah... OK... now I understand. I think this is a good \"workaround\" until we have full integration into Visual Studio.\n. The at I_ part is generated by ildasm as well. We changed our IL output to match ildasm.. As one of the (former) core members of the ILSpy team I'd like to add one last bit to the discussion. Please keep in mind that:\na) ILSpy favors keeping \"correct\" code instead of \"nice-looking\" code. So patterns that are not explicitly detected and tested, will not be transformed. \"Correct\" does not mean \"compilable\", because the compiler(s) do a lot of magic, but rather \"representing the IL as correctly as possible (with all the available information) in C#\".\nb) In some cases ILSpy cannot detect patterns, because it requires type information from other assemblies that could not be resolved. Please ensure that any referenced assemblies can be found.\nc) If you find a bug, you are welcome to report and wait (as opposed to rants) until somebody fixes it; OR: It's opensource - do it yourself! ;-)\nActually, to me this is just a rant, because you have yet to present a concrete example - possibly a unit test - where ILSpy fails. The issue number looks suspicious... :D\n. Sorry for taking sooo long to merge this. Thank you for your work!. Closing this, because basic PDB gen support is present in ILSpy 4.. information has been added to README.md\n. merged... thanks for the contribution!\n. I'm sorry, but I guess, I will have to revert this, because it causes the performance to suffer greatly if you try to open a large resources file. For example: System.resources in System.dll. This is due to the fact that virtualization is disabled as soon as you set ScrollViewer.CanContentScroll to false.\nCould you post an example? I could try to find a different solution in order to fix this, plus having virtualization.\n. Can you please post the assemblies causing the crash somewhere?\n. First of all: No, I would neither expect, nor appreciate such behavior...\nSecond: I believe it blows up as soon as you try to access assemblies you don't have write access to.\n. Can you be a bit more specific on the crash? Stacktrace or any more information available? Would be nice, if you could provide us the assembly ILSpy crashes on. Thank you very much!\n. Yes, but what is the crash? Do you have any stacktrace?\n. Closed due to inactivity.. thanks for the fix: I simplified it a bit and merged. (see 5f8ff82cfdf31626ec77646f79ca7710f3ce4ad8)\n. Thanks for your contribution! I would ask you to open a new issue for the TODO you mentioned. Thank you very much!\n. looking good so far... thanks for the contribution.\n. Removing the everything except the first line will make it compile, but it will change the semantics, which is not what we want. Can you post the C# code that results in this output when decompiled by ILSpy? If not, can you post the IL code or assembly you decompiled?\n. decompiling the mentioned event definition with ILSpy built from the recent master-branch results in\n// EdB.Interface.BooleanPreference\npublic event BooleanPreference.ValueChangedHandler ValueChanged\n{\n    [MethodImpl(MethodImplOptions.Synchronized)]\n    add\n    {\n        this.ValueChanged = (BooleanPreference.ValueChangedHandler)Delegate.Combine(this.ValueChanged, value);\n    }\n    [MethodImpl(MethodImplOptions.Synchronized)]\n    remove\n    {\n        this.ValueChanged = (BooleanPreference.ValueChangedHandler)Delegate.Remove(this.ValueChanged, value);\n    }\n}\nNote that the usages of this.ValueChanged actually refer to .field private class EdB.Interface.BooleanPreference/ValueChangedHandler ValueChanged as defined in IL. IL allows the field to have the same name as the event, because the field is loaded with a different instruction.\nActually this code should be decompiled as:\n// EdB.Interface.BooleanPreference\npublic event BooleanPreference.ValueChangedHandler ValueChanged;\nNormally auto events have a System.Runtime.CompilerServices.CompilerGeneratedAttribute attached and use a different pattern:\npublic event EventHandler MyEvent\n{\n    [CompilerGenerated]\n    add\n    {\n        EventHandler eventHandler;\n        EventHandler eventHandler2;\n        EventHandler value2;\n        eventHandler = this.MyEvent;\n        while (true)\n        {\n            eventHandler2 = eventHandler;\n            value2 = (EventHandler)Delegate.Combine(eventHandler2, value);\n            eventHandler = Interlocked.CompareExchange<EventHandler>(ref this.MyEvent, value2, eventHandler2);\n            if (eventHandler == eventHandler2)\n            {\n                break;\n            }\n        }\n    }\n    [CompilerGenerated]\n    remove\n    {\n        EventHandler eventHandler;\n        EventHandler eventHandler2;\n        EventHandler value2;\n        eventHandler = this.MyEvent;\n        while (true)\n        {\n            eventHandler2 = eventHandler;\n            value2 = (EventHandler)Delegate.Remove(eventHandler2, value);\n            eventHandler = Interlocked.CompareExchange<EventHandler>(ref this.MyEvent, value2, eventHandler2);\n            if (eventHandler == eventHandler2)\n            {\n                break;\n            }\n        }\n    }\n}\nThe ValueChanged event does use neither the CompilerGenerated nor the above pattern. Which compiler was used to compile the DLL? We might have to add another pattern to the decompiler in order to solve this issue.\n. Can you provide a sample?. @andreif Can you confirm this is fixed?. I tried to reproduce this, but could not so far. Can you provide more information on this?\n. Try updating to the latest nightly from http://build.sharpdevelop.net/BuildArtefacts/#ILSpyMaster and tell us if the problem persists. If so, the issue can be reopened.\n. duplicate of #699\n. fixed by a6ae2e4b24241ad8a4430f3aa55f99ca934f69b3\n. note to #506: merged as of now\n. Thank you very much for your contribution! Future additions are always welcome!\n. Recent nightlies can be found here: http://build.sharpdevelop.net/BuildArtefacts/#ILSpyMaster\n. What type of project do you try to open? Could you please open a new issue for that?. Looking good! Thanks for contributing!\n. I am already using C# 6 features in the code base. The language version is not connected to the framework version used. Of course, in order to compile ILSpy you have to install the framework version with the C# 6 compiler included.\n. Now targeting v4.6.1 (on newdecompiler branch).. Would you be able to provide the PMDEditor assembly? Any download links I found are blocked by the South Korean Government. (I am currently in South Korea and will stay here for the next couple of months.) Thank you!\n. I found the problem a few days ago. I will publish a fix very soon. It's just that I am very busy with other things at the moment.\n. That's an entirely different issue, but I guess it's because some references or types are missing. Pmx for example, thus ILSpy cannot detect whether the method is a getter or not.\n. a nightly build with the fix included can be found here: http://build.sharpdevelop.net/BuildArtefacts/#ILSpyMaster\n. Hi, I just tried to reproduce this with the most recent nightly build but was unable to do so. I used your code as example for testing, but it seems ILSpy produces the correct code:\n```\nusing System;\nnamespace Bug716\n{\n    public enum AppID : ulong\n    {\n        Invalid = 18446744073709551615uL\n    }\n}\n```\n. There's a command line switch: /separate\n. Will add a page in the wiki to document the command line and make it easily discoverable.\n. This was fixed in the new decompiler engine (which just landed on the master branch).. No, because we are moving away from Mono.Cecil altogether... see #1030. ILSpy 4.0 will enter alpha quality in late summer.. @AraHaan I think this is totally out of the scope of a decompiler. In this case it is easy to see, but would require a lot of semantic analysis, which is better done using a Roslyn analyzer. Thank you for your understanding.\nAlso, please stop hijacking other issues that have nothing to do with your problems or suggestions. Even more so, if they were already closed a while back. You can always open new issues. Thank you very much!. If we swallow all exceptions during loading, we need to log them, notify the user that there was a problem during symbol load, and make the logs available to the user. Otherwise we will never be able to find and fix these problems. It's not as if the symbols aren't available, thus we should try our best to be able to read them.\n. I don't see the problem with the above code. Can you elaborate on what's the problem?\n. Can you tell us what you were trying to decompile? Would make it a lot easier to fix this issue. Thanks!\n. I think \"sort by enclosing name\" is the same as \"sort by FQN\", which is a better name imho.\n. I am working on this...\n. @zvirja I am closing this, because we do not feel special sorting UI is necessary. We now have search result sorting by length as implemented by #668. If you think it is insufficient, feel free to make a pull request.. Thanks for your pull request. We will look into upgrading to a more recent version of Cecil. As ILSpy heavily depends on Cecil, lots of testing is required. As you can imagine, this will take some time.\n. Thanks for the fix!\n. This looks like strange magic, which ILSpy definitely doesn't do. I just tried your line of code in a stripped-down project and it produces this:\nI used ILSpy version 2.4.0.1964\nprivate static void Test(GridViewRowEventArgs e)\n{\n    if ((e.Row.RowState & DataControlRowState.Edit) > DataControlRowState.Normal)\n    {\n        throw new NotImplementedException();\n    }\n    throw new NotSupportedException();\n}\nCould you please post the IL code?\n. The Toggle Folding command toggles the folding that the caret currently is in. If you place the caret inside the xml documentation comment, it works as expected. Not sure if there's any benefit in adding this extra behavior.... See https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/CommandCompletion/ExtensibleCompletion.cs#L122 for the original source code.. Seems like your ILSpy install is broken, have you tried downloading a fresh copy?. This was fixed in the new decompiler engine (which just landed on the master branch).. Closing due to missing feedback. This is likely no longer an issue in 3.x.. Our old build server no longer exists. Nightly builds are now provided at https://ci.appveyor.com/project/icsharpcode/ilspy. The artifacts should stay around as long as there are no more recent builds.. See c34541ad4cf86d19bd32ec5a38ec7f9fb7ee0b33. You could try writing a plugin that does this. It could be published on the plugins page.... This was likely fixed in the new decompiler engine (which just landed on the master branch).. If anyone is interested in contributing such a feature, we'll be glad to help providing an plugin interface. But for now we are closing this.. This does not make any sense to me... using the old folder browser dialog does not offer anything that cannot be done using the current \"open\" dialog... IMHO it's a bad idea to use the old dialog. You cannot quickly browse to a completely different location. When an application only supports the old one, I feel like it's slowing me down.\nAs @dgrunwald pointed out, loading all assemblies in a folder can be accomplished by browsing to that location and pressing ctrl+A.. It would help, if you could provide a minimal example of what is failing.. Thank you very much for posting the samples, we'll take a look soon! :). I am no longer able to reproduce any of the problems with switch (the improvements in the new engine on the switch branch seem to fix those), but I will take a look at the problem with delegate construction in generateWorld.. see #849 . Please see the wiki page: https://github.com/icsharpcode/ILSpy/wiki/Command-Line-Arguments. I just merged #668 which should fix the problem you are seeing. Also you could use =Thread to find exact matches.. Fixed on the newdecompiler branch.. See my comment on #785 - This is already fixed on the newdecompiler branch.. This is not about translation of generic types but rather incomplete translation of compiler-generated code. This should be fixed in the new decompiler.. This is a horrible hack. We'll have to wait for dotnet/roslyn#16540 to be implemented and officially supported. Thank you for your effort, though.. newdecompiler is a rewrite of the ICSharpCode.Decompiler library. The reasons and goals for it are detailed on this page: newdecompiler wiki.\nThe ground work is mostly done, of course there are a lot of features missing (mostly high level constructs such as foreach, using, yield and async), but we were planning to merge it back into master, hopefully in the next two to three months. After that we will work to prepare a 3.0 release with the new decompiler.. On my system (Windows 10 Pro x64, notebook with SSD, 16 GB memory), starting ILSpy loading a list of all assemblies in my GAC only takes approx. 3 seconds in debug mode. This seems to be an AV problem.... That's strange... Windows Defender is well-behaved on my system it seems. :(. I just had an idea: did you already \"unblock\" all assemblies that are part of ILSpy?\n\nMaybe this helps to fix this issue. Also, when I tried to launch ILSpy as downloaded from the build server, Windows Defender started to show some scary prompts about ILSpy not being signed and so on, but I could not see any performance problems.. Fixed by 3bfc1fc3c27fb13bb7c8be0b688e31a1639af258. Thank you for your contribution!. Thank you for your pull request. Sorry, I completely missed it, when I implemented the automatic readonly properties a while back. I added support for property initializers in the AST as well. The property transformation part is done in PatternStatementTransform.cs (similar to your approach), but the constructor transformation part is done in ConvertConstructorCallIntoInitializer.cs. I will cherry-pick the commit about the settings.. This was likely fixed in the new decompiler engine (which just landed on the master branch).. You can use the command line argument /separate.\nSee also https://github.com/icsharpcode/ILSpy/wiki/Command-Line-Arguments. #818 was merged. Therefore closing this.. Triage: v4.0.0.4443 decompiles it as:\ncsharp\n    public bool notNull<a>(a x) where a : class\n    {\n        return x != null || 1 == 0;\n    }. I've tried to reproduce this bug, but it's working fine. If you still have this problem, you can reopen the issue and I would need more information.. Closing because it's empty.. I just tested with a small .net core project. There were no crashes and the symbols were used correctly. I guess that's fixed now.. Thanks for your contribution.. Maybe we could reuse the UI we had in SharpDevelop: http://community.sharpdevelop.net/blogs/andreasweizel/archive/2014/09/01/Walking-the-hierarchy-of-members-up-and-down.aspx\nThat is, when clcking on a abstract/virtual/overridden method call or property access show a list of possible targets.. Closing because crucial details are missing.. This was fixed in the new decompiler engine (which just landed on the master branch). Please note that we do not restore the foreach loop, but keep the try-finally-Dispose() structure and a nested if statement.. Thank you for your pull request. Currently we are working on the new decompiler engine on the newdecompiler branch and there we've already updated cecil to a more recent version. Unfortunately, we were not able to use some parts of your contribution, because of the many structural changes in the decompiler engine. We're planning to merge newdecompiler back to master as soon as it reaches a certain level of completeness.. No.. You are trying to inject an assembly reference? ILSpy is not capable of doing that. Are you using any plugins? I would ask you to directly ask the maintainer of the plugin.. Closing - no response.. Please see #833 for our final resolution, which introduces an independent project file for .netstandard. This is a workaround in order to avoid all the problems with multiple DLLs copied to the output folder and so on. Please be aware that the resulting .net std package is built, but not yet tested. The tests still use the old-style projects.\nFirst of all, migrating to .NET Standard was not as simple as it is promoted by MS. Wasted more than 20 hours on different quirks. And yes, it was very frustrating...\nAttempt no. 1:\nFirst we migrated the ICSharpCode.Decompiler.csproj to the new format and actually planned to use only that in the whole solution. We added all the necessary nuget packages and except for one small change, we could use our codebase.\nImportant: If you use AssemblyInfo.cs in your project and have some tooling attached to generate version information, I'd recommend adding <GenerateAssemblyInfo>false</GenerateAssemblyInfo> to your new .net standard project, that way you can keep using the old-style AssemblyInfo.cs.\nThe next thing was getting the unit tests to work: We followed Scott Hanselman's advice, which worked fine until we tried to actually run the unit tests in Visual Studio. We got lots of strange exceptions, like MissingMethodException or FileNotFoundException telling us that something was missing. Except it wasn't, just the .NET Standard implementation got confused it seems.\nAttempt no. 2:\nThen we migrated one project after another from good ol' .NET to the new project format, hoping that it would solve our problems. But, we couldn't quite port our unit tests, because we are doing some advanced stuff there, like compiling C#, assembling IL and running nested unit tests (We're talking about a decompiler, testing it is not simple). One strange thing was: The .NET Core Test Runner wants to inject a custom Main method and implicitly turns the project into a console app (tooling bug?), which in turn fails to compile because we use a lot of Main methods in our test cases which get compiled during tests.\nThen we added a second target using the TargetFrameworks attribute, so we just could use net461 for all the other projects. We ended up even converting our WPF UI to the new project format, despite the fact it does clearly not yet officially support WPF, using some tricks (https://stackoverflow.com/questions/43693591/how-to-migrate-wpf-projects-to-the-new-vs2017-format and https://github.com/dotnet/project-system/issues/1467). And it worked! Except for the XAML/BAML unit tests, we could not get those to compile, because the InitializeComponent methods were not recognized. But we don't understand why, because it worked with the UI project and we were using the same tricks in both project files.\nAt that point I decided to revert the XAML/BAML tests to the old project format and tried to get it to play nicely with the other projects. And in the end it worked, I had to remove some references and some code. And then I pushed my changes, to see if the build server was configured properly. And it failed...\nAttempt no. 3:\nPlease see #833. First we introduced a new project with .netstd.csproj as suffix. It resides in the same directory as the old-style Decompiler library and compiles the same source files. While trying to get it to work, we were running into the following issues:\n\nWe needed to enforce that the netstd project is built before the normal projects, because they are both sharing the same intermediate output folder (see dotnet/project-system#1935 and related issues). This involved adding a build dependency, so the old project depends on the netstd one.\nThe above issue requires us to remove the intermediate output directory after netstd is built (via plain old del command in a post build task), because otherwise the old project cannot be built any longer. We cannot do this the other way round because the project.assets.json is only generated by nuget. Any attempt of using IntermediateOutputPath, BaseIntermediateOutputPath or the new ProjectAssetsFile properties results in either one or the other project \"forgetting\" about builtin types among other things.\n\nAppVeyor/msbuild: yes, it does not respect any build dependencies properly, that's why we had to disable parallel builds, in our case this is not a big deal.. Unfortunately I killed the other attempts by resetting (push --force) everything. We'll try to set up separate branches for the other attempts as well.. @sharwell After upgrading the Mono.Cecil submodule in the repo to the latest commit, AppVeyor fails again, guess this is because Mono.Cecil now uses .NET Standard as well. On my machine this does not happen and in the ILSpy.sln file we specify net_4_0_Debug/net_4_0_Release as configurations for Cecil, but somehow msbuild/appveyor don't get it.\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\MSBuild\\Microsoft\\NuGet\\15.0\\Microsoft.NuGet.targets(178,5): error : Your project is not referencing the \".NETFramework,Version=v4.0\" framework. Add a reference to \".NETFramework,Version=v4.0\" in the \"frameworks\" section of your project.json, and then re-run NuGet restore. [C:\\projects\\ilspy\\cecil\\Mono.Cecil.csproj]. This was fixed in the new decompiler engine (which just landed on the master branch).. Thank you very much for your effort, Sam!. Good catch, seems this was never properly ported from Cecil objects to the NR type system.. This was fixed in the new decompiler engine (which just landed on the master branch).. Fixed in c34541ad4cf86d19bd32ec5a38ec7f9fb7ee0b33.. Not sure what the benefit of the first option is... 02 at the beginning already indicates, that this is row 670 of the TypeDef table... I've added the second option, but it would need some tweaking to show the containing file (instead of namespace), as the tokens are unique only per PE file.. In #1263 we've added a tooltip showing the filename for each search result. I think this fixed the last thing that was missing and this can be closed.. See #742 as well: the scripting window could implement the options requested in that issue.. See #848 . Thanks a lot!. Removing the node in StartNode will lead to imbalanced stacks and some problem further down. You could try removing the node at the end of EndNode.. If you want to rename variables, doing so in the C# AST is almost certainly the wrong place. I would suggest adding your own IILTransform, please see our implementation of AssignVariableNames in https://github.com/icsharpcode/ILSpy/blob/master/ICSharpCode.Decompiler/IL/Transforms/AssignVariableNames.cs.\n\n\nYou would have to add your transform after our AssignVariableNames transform, by calling:\ncsharpDecompiler.ILTransforms.Add(new MyRenameVariablesTransform()) before decompiling.\nThere you can easily rename variables, as shown in our implementation. If you have any more questions, please do hesitate to ask. You should probably open a new issue for future questions.\nI am curious: What are you trying to accomplish in the end? Is there some bug you are trying to work around or some feature you want to implement? If you could open an issue with your specific problem and the solution you have in mind, we might be able to help you better, instead of just trial and error.. Actually I would prefer to use ILVariableResolveResult everywhere to be consistent. Then we could add an extra overload that performs ResolveResult unpacking as you suggested.. Thanks for reporting!. This is because Roslyn is emitting an optimized foreach pattern (in release build), which does not use an extra local variable for enumerator.Current.. The last failing test case is the same as #861 . See #824 as well... earlier we've decided to not fix this issue, because it's not worth the effort.. I am closing this, as the using-if (enumerator.MoveNext()) pattern is expected.. This is due to missing references, we should not crash, though.. No, currently there is no such option. I believe, it would be difficult to implement in some cases.. Yes, but some transformations currently need to be done in every language version. In your above example, currently the decompiler needs the ref locals language feature to be able to represent the semantics of the generated code correctly. It would require more work and testing to implement every language version correctly.. In your above example, currently the decompiler needs the ref locals language feature to be able to represent the semantics of the generated code correctly. It would require more work and testing to implement every language version correctly.\nNo, it's currently not possible to turn off some transforms, because they are needed to represent semantics correctly. That's why I marked this question a feature request.. The assertions are of interest, but might be due to missing references. If you are reporting assertions, please add a dump of the IL and verify that all references were loaded correctly. ILReader.Warn is mostly harmless.. We no longer use Mono.Cecil.. A closer look at the generated code pattern revealed that instead of ldloc this the compiler uses ldobj(ldloca this) in case of async delegates. I adjusted the ReplaceDelegateTargetVisitor to take this into account.. When are you seeing those crashes? I don't think that just writing them to the console/ignoring them is a good idea.. Side note:\npython BuildTools\\tidy.py\n.\\ICSharpCode.Decompiler\\CSharp\\WholeProjectDecompiler.cs:302: Line starting with spaces. Use tabs for indentation instead!\n.\\ICSharpCode.Decompiler\\CSharp\\WholeProjectDecompiler.cs:303: Line starting with spaces. Use tabs for indentation instead!\n.\\ICSharpCode.Decompiler\\CSharp\\WholeProjectDecompiler.cs:315: Line starting with spaces. Use tabs for indentation instead!\nTidy check: failed\nCommand exited with code 1\n\nIn order to prevent such errors in future, you can add https://gist.github.com/siegfriedpammer/75700ea61609eb22714d21885e4eb084 in a file named pre-commit to \\.git\\hooks\\. This will execute the tidy.py check before committing. (Needs Python installed...). Ah, you are talking about ICSharpCode.Decompiler.Console! My bad, I assumed this was in ILSpy...\nAbout your second commit: Did you test whether it still works when WholeProjectDecompiler is used in ILSpy? If this is only a problem with the console version, I would suggest adding a customized implementation of WholeProjectDecompiler there.\nedit: i. e. derive from WholeProjectDecompiler in ICSharpCode.Decompiler.Console.. > There is some .NET Core tooling issues \nOh yes, there are! But I think, we'll find a way to get it working. I just could not take a look at it myself. ILSpy itself uses a direct reference to ICSharpCode.Decompiler without using the package, otherwise I would have given up working on this project out of frustration.. Fixed in b7f86d11b73c5172ed28aa7e4f59dde92f1091ae. Thank you for your continued interest in contributing. One note: Can you please pay more attention to keeping the whitespace intact? We'd prefer reading diffs without the ?w=1 option. Please check your files before committing and revert any whitespace-only changes.. One useful thing would be using the pre-commit hook as described in the README.md.. Ad catch-when: can you add a test-case for the bug you discovered? I am not very pleased with the foreach loop you added.. Can you please post a small test case that reproduces the error you are trying to fix?. Hmmmm... still, could you post the binary, or the IL of the method?. What's the type of the variable ex? Could we continue this review on gitter?. } catch (Exception ex) when (ex is ArgumentException || ex is IOException) {\nthat is what I came up with, but it is detected correctly without your fix. Was the assembly you are trying to decompile compiled using a C# compiler?. Thanks for reporting this! I think we need more test cases in this area. If you could provide some, this would be very nice.. See #698 \nI fixed this in af6935a46f0822e4196dac24b8ecf2fe3afa3606. ad 1. This is likely because of the empty else branch, but might need further adjustments.\nad 2. Likely the same problem as foreach currently depends on the UsingTransform\nad 3. Yes\nad 4. I don't see the point of this at all... is this dead code?. F# using is now properly decompiled again (see #900).\nThe remaining problems need some adjustments to the loop detection. @dgrunwald would be nice if you could take over from here.. Can you provide an example from a publicly available DLL? So far, I could not reproduce it. Hunting for such a rare case is wasting my time.. This was fixed by the AvalonEdit upgrade in c202b9145bbf2d348594ff570733ae4c5666f400. Please see https://github.com/icsharpcode/ILSpy/blob/master/ICSharpCode.Decompiler/CSharp/Transforms/ExpressionTreeConverter.cs. This is a transform that needs to be adapted to the new decompiler structure, as it is currently disabled.. I will be working on this.... Actually, I think the expression tree converter depends on the underlying structure... we'd need a way to represent raw ldtoken instructions in C# first.. This is due to two different ILVariables being used. Probably we'll have to unify the ILVariableResolveResult annotations as we unify ILVariables in AssignVariableNames?\nILFunction instance void Microsoft.Data.Sqlite.SqliteConnection::Open() {\n    param this : Microsoft.Data.Sqlite.SqliteConnection(Index=-1, LoadCount=8, AddressCount=0, StoreCount=1)\n    local text2 : System.String(Index=2, LoadCount=2, AddressCount=0, StoreCount=1)\n    local text : System.String(Index=0, LoadCount=6, AddressCount=0, StoreCount=3)\n    local num : System.Int32(Index=1, LoadCount=6, AddressCount=0, StoreCount=7)\n    local num : System.Int32(Index=1, LoadCount=5, AddressCount=0, StoreCount=2)\n. Closing this, because support for the attributes was added long ago. #829 will be updated accordingly as soon as we've achieved test coverage and support for most use-cases.. Can you please post either the assembly or a file containing the output from ildasm? You will have to try to decompile each class/method individually to find the offender. Otherwise this will be difficult to solve. Thank you for your support!. Afaik dnSpy uses our old decompiler engine with a few modifications, not sure if we can borrow easily from them, as we did a complete rewrite of the engine.. Fixed by #1000 . As of d04155132affcc36ede6f98b9c18a7676bedc1b0 only Test4 and Test5 use unnecessary casts.. I have created a (local) branch initializer_pretty_fix which will add some pretty tests for array, collection and object initializers and will fix the issue mentioned by @dgrunwald, and others. Therefore I will close this PR.. See https://github.com/dotnet/csharplang/issues/191. I seems you downloaded the source code. If you need the \"binaries\", you go to here.. A possible fix would be:\ncase InvocationResolveResult invocation: {\n    if (Expression is ObjectCreateExpression oce && oce.Arguments.Count == 1 && invocation.Type.IsKnownType(KnownTypeCode.NullableOfT)) {\n        return this.UnwrapChild(oce.Arguments.Single());\n    }\n    break;\n}\n\nIn TranslatedExpression.ConvertTo next to the special cases boxing conversion and method group conversion.\nHowever this only solves the first two cases. We'll have to decide on how to handle default value expressions in general:\n Is it preferable to use null instead of default(possibleReferenceType) everywhere?\n Should Nullable<T> be a special case or should we treat generic type arguments the same? E. g. where T : class, should we use null instead of default(T)?. Should be fixed in c7c3801ff12a503a18dd450a88bb80aaea884676. See https://www.f-secure.com/v-descs/false_positive.shtml. Why are there no tests for the pre-Roslyn C# compiler? Is there some problem?. @mohe2015 @dgrunwald I have moved the code to a branch in our repository, see https://github.com/icsharpcode/ILSpy/tree/expression-trees. Do you have some test case that reproduces this issue?. ad 1) Yes, this is a bug, but we currently do not support mixed mode assemblies officially.\nad 2) As far as I can see, Simple Assembly Explorer already uses ILSpy under the hood. You see, we have limited resources and many people use our decompiler engine but hardly ever contribute back.\nAs this is a feature I personally wouldn't ever need, it'll probably never be implemented without contribution. You are welcome to contribute, or just keep using the \"competitor tools\" like Simple Assembly Explorer or dnSpy.\nad 3) Can you please clarify?. What is the problem you are seeing? Could you please highlight the code that is wrong in your opinion?. It might look similar, but it is something else. I think we won't fix this, because it would require us to undo constant folding.. This is not a question of being \"correct\" or \"incorrect\". It's just that the other decompilers have a feature that recognizes and beautifies constants. ILSpy does not have this feature yet, but the code produced either way is semantically correct and does the same. This is not a bug. It's a new feature you want.. I tried Avalonia a few weeks ago, but it is still very unstable and missing a lot of components, e.g. a TreeView. I don't see ILSpy running on non-Windows platforms any time soon.. Tracking dotnet/roslyn#19127 ... are there any other issues that still need to be fixed before this works out of the box in VS?. Just added the necessary fixes to our nuget pack process, to support the new source embedding into pdb.\nWe now push CI nupkgs to https://ci.appveyor.com/nuget/ilspy-masterfeed, which you can simply add to your package sources in VS.\nStep by step walkthrough:\nImportant: This requires Visual Studio 2017 15.5 preview2 or later.\n1) Add our package source in VS:\n\n2) Open up manage packages, switch to the newly created package source and enable Include prerelease and install the package.\n\n3) Disable Just My Code in Debugging settings, this is necessary because we are publishing dlls built in release mode.\n\n4) Just step into the decompiler source code anytime you need:\n\nIf you want to add the same to your project, follow these links and add the required bits:\n Add IncludeSymbolsInPackage: https://github.com/icsharpcode/ILSpy/blob/master/ICSharpCode.Decompiler/ICSharpCode.Decompiler.csproj#L27\n Use DebugType: portable, otherwise  source embedding is not supported: https://github.com/icsharpcode/ILSpy/blob/master/ICSharpCode.Decompiler/ICSharpCode.Decompiler.csproj#L33\n* Currently MSBuild does not yet support EmbedSources as a property, thus enable the following workaround: https://github.com/icsharpcode/ILSpy/blob/master/ICSharpCode.Decompiler/ICSharpCode.Decompiler.csproj#L593\nNow MSBuild should pass the correct flags to csc and invoke nuget pack properly.\n. Please do not revive closed issues. You can open a new issue for each problem you discover. Thank you!. why not open a new issue?. Could you please post the full signature of the IL method? This would make it a lot easier to identify the problem. Thanks a lot!. I will push a fix for this in a few minutes.. What version of the nuget are you using?. Git is no longer required. We'll use dummy versions if git is not found.\n\nI don't install git, because Visual Studio 2017 can do it.\n\nPlease see https://developercommunity.visualstudio.com/content/problem/26539/vs2017-deployed-gitexe-not-usable.html ... it's stated that VS uses a stripped down version of git, which might not be working in all cases.. 1) Did you follow the steps in the README?\n2) Can you please post your PATH variable? (You could send me a PM on gitter)\n. > and clone dnSpy in vs2017, don't do anything else.\nI think you are talking about ILSpy, but how can I clone a repository in VS2017... didn't even know that you could do that...\nYour path looks fine.... Does it work with the latest fix?. Does it work for you when you comment out the content of find-git in updateassemblyinfo.ps1 except for the return false? . Could you please post the build output with\nfunction Find-Git() {\nreturn $false;\n}\nThank you! . 1. I don't think they are unnecessary.\n2. How is this possible? Do you have .NET 4.0 installed?. I have no idea... It works on our machines including the build server without any extra configuration. But, it seems it's only a minor problem. You can either force powershell to load .NET 4.0 by editing powershell.exe.config or try other solutions found online.\nAs the original problem is fixed, I will close this. Good luck!. * The code in NextToken.get looks quite good. But ParseString is not quite right... not sure if we can get rid of the gotos...\n Did not closely look for anything, but at first glance it seems quite OK...\n Yes, out variables are still not done and there are some issues to resolve:\n  * remove default initialization\n  * infer name from out parameter\n* I don't see any casts to object anymore... looks like we nailed that ;)\nIf you find any other issues, please report them :). Just tested MiniJSON.cs again... there are no more gotos and no extra variables as we now support out vars.\nNot sure if we should make this a pretty test, because it would need some work to make it conform to the usual decompiler output format.. I think, a correctness test is sufficient in this case.. Seems this was introduced in 6faa5913c52d62016e1835aa8f68709016e08e9e ... is there another alternative to $PSScriptRoot?. @tamlin-mike You can close this, if the problem has disappeared.. We are using two target framework monikers in ICSharpCode.Decompiler.csproj: net461 and netstandard2.0\nVS is executing the build for both frameworks at the same time. Because of this update-assemblyinfo.ps1 is executed in parallel, i.e., two powershell processes tried to access the file.\nThe reason for me to suspect the recent change is that I had a similar error after I changed $PSScriptRoot to Get-Location. Weird stuff.... It would probably be a good idea to integrate this feature into the Console (ICSharpCode.Decompiler.Console).. Did you try dotnet publish or dotnet run -- args?. Thanks for your research... I had suspected something like that, but didn't actually \"see\" it until reading your post...\nbug 1: Fixed\nbug 2: Fixed - replaced with additional checks for System.Environment.OSVersion.Platform == Unix\nbug 3: it's already there... see UniversalAssemblyResolver.cs#L93 and DotNetCorePathFinder.cs\nI hope this will solve this problem.\nThanks again!. @chrisdoman @tzachshabtay I just pushed a fix for this... could you try build 3375 or higher?. Actually the behavior you expect should be the default. Could you please try the latest version?\nIf it doesn't work properly, please post the IL code of the method (including the signature/header). Thank you for your help!. implemented by #988. As for the second suggestion: We're not planning to change the order of items in the near future.. I just tried to reproduce this, but I could get it to crash only once: in SharpTreeNodeView.CalculateIndent Node was null. Guess this is the same as #857.... See https://twitter.com/ilspy/status/911285196854632449\nLook for LoadedNugetPackage in the code. I guess the drag&drop support is missing, you could provide a PR. Of course we'd someday want to open a nuget package in one tree node, but that would require some refactoring of the existing code, bc it assumes that every top-level node is an assembly.. The PR was merged. Thank you very much!. Thank you for adding this feature!. This happens because the block container is empty, i.e., there is no entry-point... BlockContainer.EntryPoint is null.... I cannot reproduce this... I suspect you are missing a reference to mscorlib, which normally should be loaded automatically. Could you please post the binary, you tried to decompile?. Thanks for the report!. Where did you obtain the decompiler from? Are you using ILSpy or the decompiler nuget package? The nuget package does not contain Mono.Cecil.Pdb.dll at all.. I cannot reproduce this. 3.0.0.3375-beta3 is happily decompiling on my machine.\n\nCould you please be more specific? Thanks!. %appdata%\\ICSharpCode\\ILSpy.xml\nI still don't fully understand your problem... could you please post a screenshot? Is this a hard crash, or is it displayed in the decompiler code view?\n\n. Should be fixed now! Thanks for the report!. @sharwell did you see #998? . That's a strange exception. Could you tell me, which assembly you tried to open in ILSpy? Thanks!. It will be impossible for a decompiler to decompile the code exactly as it was written, depending on how it was compiled. So, as long as it's semantically correct and looks somewhat pretty, I'd say it's not a bug.. This is a threading issue, currently ILSpy loads references on the UI thread and your command runs on the UI thread as well, when trying to resolve the type, an assembly reference must be loaded -> UI thread dead-lock. Solution: Execute your command on a different thread using Task.Run.. Because before that the assembly resolver did not use a background thread properly and ILSpy was hanging during startup.. I am planning to fix this as soon as the AssemblyList/LoadedAssembly API is truly thread-safe.. It's not hard at all:\n        public void Execute(TextViewContext context)\n        {\n            var nodes = context.SelectedTreeNodes.OfType<AssemblyTreeNode>().ToArray();\n            Task.Run(() => Do(nodes));\n        }\n\n        void Do(AssemblyTreeNode[] nodes)\n        { \n            foreach (AssemblyTreeNode node in nodes) {\n                var module = node.LoadedAssembly.GetModuleDefinitionAsync().Result;\n                foreach (var tr in module.GetTypeReferences())\n                    tr.Resolve();\n            }\n        }. Everything that potentially needs to load an assembly cannot run on the UI as it would dead-lock.. This problem is caused by variable splitting it seems.. Thank you for you pull request, while the changes look quite good, we haven't yet decided how to deal with testing/implementing C# 7+ features, we now have to pull forward an internal architecture discussion. Please note this might take a while.\n\nNote: before accepting your PR we would ask you to add some unit tests, but as mentioned above we haven't yet decided on how we want to handle testing multiple versions of Roslyn / language versions. So, currently adding unit tests would only break the build. We will update you as soon as we've implemented proper support for testing > C# 7.0 features.. Note: I will add some unit tests and then merge your PR.. Thank you for your pull request!. Please note that it is not possible to fully decompile an assembly if a reference is missing. I think this is something we might not be able to fix. So this is not a bug, but expected behavior because we are missing information about some types.. I cannot analyze the zip file you attached because it only contains a file with the extension \".compressed\" which doesn't look like any standard compression format. Can you please use some standard format? zip, 7z, rar?. You could try to find where the embedded references are unpacked and do the unpacking yourself. Then load the unpacked files in ILSpy and it should be able to decompile everything correctly.. Yes, just write some small helper program to do the same. Then load the decompressed files in ILSpy..     using System;\n    using System.IO;\n    using System.IO.Compression;\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Decompress(@\"C:\\temp\\lib.dll\\costura.lockboxlib.dll.compressed\", @\"C:\\temp\\lib.dll\\costura.lockboxlib.dll\");\n    }\n\n    static void Decompress(string compressedFileName, string uncompressedFileName)\n    {\n        using (var compressedStream = new DeflateStream(new FileStream(compressedFileName, FileMode.Open), CompressionMode.Decompress))\n        using (var targetStream = new FileStream(uncompressedFileName, FileMode.CreateNew))\n        {\n            compressedStream.CopyTo(targetStream);\n        }\n    }\n}. See https://github.com/takeshixx/ILSpy-CosturaPlugin. Are you referring to folding?. This is because you have an assembly in the list/tree that does not exist. Try removing the tree nodes with a yellow exclamation mark icon.. I was offering a workaround. It will be fixed as soon as I get home.. This is not a blue screen. It's just that the download link is not yet very popular and thus not recognized by Windows Defender. You can just select \"More info\" and then select \"Run anyway\". ILSpy does not contain any malware, spyware or adware. It is completely clean and safe to use.\n\nAddendum: Another reason is that ILSpy is not signed, but I suspect that this would require us to pay money to get a signature, if I am not wrong. As this is open source and completely free, we cannot afford to pay for the signature.\nEdit: I found that signing would not immediately solve this problem. Apparently time will solve it as the link becomes more popular, it will be marked save in MSFTs database.. Support for VS 2015 was removed in 75c45a3 / f227f36d. I just tried this with the transparent PNGs included in ILSpy.exe and could not reproduce the problem. It would help if you could provide the assembly in question for investigation, otherwise this is not fixable.. Yes, you are very welcome to submit a pull request for this feature. Please base your pull request on the master branch and follow the guidelines for unit tests.\nIf you have any questions, feel free to ask!\nThank you for your interest in contributing to this project!. Closing this, because basic PDB gen support is present in ILSpy 4.. This is likely because the analyzers scan the raw IL instructions and the decompiler hides some of that compiler-generated code. Therefore the analyzers show results that are not visible (because they are transformed back to their C# equivalents in the tree view and decompiler view), in your case: yield state machines, you could try disabling the yield decompiler if you are interested in seeing the invocations directly...\nAs for the action parameters: Yes, this is a known issue.\nAnonStorey: Yes, because that's compiler-generated code that is hidden, same problem as described above...\nStatus/priority: low. The references are added to the syntax tree in the transformation pipeline and then added to the output in TextTokenWriter. But that is not actually the problem. The main problem is, that the Analyzers do not run on the decompiled code, but on the raw IL. The reference to the MoveNext method is hidden/removed by the YieldReturnDecompiler. There is some functionality to map references to hidden elements back to their usage location, but it is not very well implemented (see GetOriginalCodeLocation), we would have to fix/extend that mechanism or replace it by a better solution.. I am unable to reproduce this... would you be able to post the assembly that causes the problem? Thank you!. By \"assembly\" I was asking for the binary, sorry for the confiusion. As this is a pure UI issue, it is way easier to debug having the actual binary. Thank you for your help!. Which assembly are you trying to decompile? Do know which compiler was used to create it?. I was able to partially assemble the IL file. Most of the problems visible in the corresponding C# file have been fixed (probably by the PR mentioned above). However, there's still some strange interaction between lambdas and the yield FSM going on.\nFor example:\ncsharp\nprivate IEnumerator SignInToGoogleProcess(AsyncOperation op)\n{\n    EventManager.Instance.Send<DisableNewsContentEventArgs>(new DisableNewsContentEventArgs(true));\n    bool gotInternet = false;\n    yield return CoroutineHelper.RunCoroutine(SingletonMonoBehaviour<Game>.Instance.IsInternetReachableCoroutineWithRetryPrompt(delegate(bool result)\n    {\n        base.<gotInternet>__0 = result;\n    }));\nThe DelegateConstruction transform would need some info that the <gotInternet>__0 field access should be transformed to a reference to the local variable introduced by the yield transform.. There is no conflict. We just have no support for this special case generated by mcs. Normally there is a separate type generated for each lambda. In this case, however, mcs reuses the type generated for the yield state machine to store the captured variables.. Minimal repro:\n```csharp\nusing System;\nusing System.Collections;\npublic class MonoTest\n{\n    public static IEnumerator Issue1026()\n    {\n        bool captured = true;\n        yield return Test(a => captured = a);\n        if (captured) {\n            yield return 3;\n        }\n    }\npublic static object Test(Action<bool> test)\n{\n    return null;\n}\n\n}\n```\nIs decompiled as:\n```csharp\nusing System;\nusing System.Collections;\npublic class MonoTest\n{\n    public static IEnumerator Issue1026()\n    {\n        bool captured = true;\n        yield return Test(delegate(bool a)\n        {\n            base.__0 = a;\n        });\n        if (captured)\n        {\n            yield return 3;\n        }\n    }\npublic static object Test(Action<bool> test)\n{\n    return null;\n}\n\n}\n```. Would you need this change in the nuget release or would a simple patch on the 3.0.x branch suffice? @dgrunwald any objections?. @sharwell has made a PR to update the decompiler to 3.0.0.3447 (https://github.com/dotnet/roslyn/pull/24189). Would it be possible to wait for the changes MonoDevelop needs?\n@KirillOsenkov are there any other things you would need to get started with MonoDevelop? I would like to include all the necessary changes in the next nuget release.. @KirillOsenkov I have made the requested changes, please tell me if there's anything else you would need.. Thank you for the contribution!\nPlease make sure to use tabs instead of spaces in new files. Thanks!\n(If you have python installed, you can use https://gist.github.com/siegfriedpammer/75700ea61609eb22714d21885e4eb084 as .git/hooks/pre-commit to prevent this in the future.)\nOutput from the build log:\n\npython BuildTools\\tidy.py\n.\\ICSharpCode.Decompiler.Tests\\TestCases\\Pretty\\AsyncMain.cs:7: Line starting with spaces. Use tabs for indentation instead!\n.\\ICSharpCode.Decompiler.Tests\\TestCases\\Pretty\\AsyncMain.cs:13: Line starting with spaces. Use tabs for indentation instead!\nTidy check: failed\nCommand exited with code 1\n. This happens to us whenever we are adding a new file. Seems to be a bug in VS because the templates do not respect the settings in .editorconfig.. Thank you very much for your contribution to ILSpy!. I have thought about this and I think there are some points to discuss:\n\n\n\n(optional) parameter vs. property?\nI think adding a bool property would be easier to implement, as there are many different overloads that could result in the syntax tree/string containing a type definition. On the other hand: an instance of CSharpDecompiler can be used to generate multiple syntax trees and therefore should be stateless, so I think adding options as properties is not a good idea, but maybe I am overthinking this. \ud83d\ude04 \n\n\nI am not quite happy with the name decompileMethodBodies as the setting affects property getters/setters and custom events as well.\n\n\nLooking at DecompileBody: https://github.com/icsharpcode/ILSpy/blob/66d806b2d9a0a21407074d3867a81c846c900217/ICSharpCode.Decompiler/CSharp/CSharpDecompiler.cs#L780-L793\nWithout extra logic, it seems that we would not be able to remove some compiler generated attributes and add the async modifier, if we're not analyzing the method bodies at all.\nNot sure, whether one would expect to not see these attributes and/or the async modifier, when just browsing definitions.\n\n\nADDENDUM:\n* When the flag is set, should we omit initializer values of constants and fields as well?. Yes, removing the method bodies after decompilation is a possibility, albeit a bad one performance-wise. I would like to avoid generating and transforming code that is thrown away right after generation.\nI will draft up a solution in a PR.. @KirillOsenkov any thoughts on the points I mentioned?. @KirillOsenkov the PR is merged, can you tell me if there is something else to change for MonoDevelop?\n@christophwille Can we publish a new nuget?. @christophwille changes on master are mainly new features, the only changes that would make sense for a new nuget are: 1e14c8f and (possibly) 97efc7b. Do you think any of these should be cherry-picked?. Done, version is 3.0.2.3465. I have committed a slightly modified version of your changes in 1e14c8f. Not sure, when we will be able to publish a beta for 3.1 on nuget.org. In the meantime you can use our private nuget feed.. I cannot reproduce this... the update server is reachable. Maybe it was just a temporary hiccup?. Could you post either an assembly or the IL code of the class and event definition? Thanks!. Closing because this is the same as #1038 . Did the reference to the Nuget Package have a yellow triangle next to it? If that was the case, then there was some error and even VS was not able to fully resolve the package. After restarting VS the error went away on my machine... I was only able to reproduce it once.. I tried putting together a full class definition in IL, but ilasm always reports:\nInvalid Add method of event ...\n\nWould it be possible for you to post the full class, event and backing field definition employing the failing pattern? Also, I guess the original assembly references mscorlib v2, because a reference to System.Core is generated when referencing System.Action... am I right?. Thank you for posting the working sample. It helps a lot!\nAfter fixing the crash in ConvertConstructorCallIntoInitializer, it looks like this is the same as #1036.\nI was not yet able to find out which compiler is generating this pattern. Any hints?. It seems like mcs is generating code in the ctor that initializes the event with an empty delegate. I think we will have to adjust the test to match the output. Not sure if it is worth the effort to add an additional transform that removes these initializations. \nCould you try to find out what mcs generates when using plain event syntax without initialization? (it might be that the original code in your example did indeed initialize the event...). Thank you! I implemented your pattern in 659b12bdb82e8fa80ae7577cf67430df36fbe390.\nI think the other pattern you came across is similar to the one described in automaticEventPatternV2. Can you try to debug why it does not match?\nAlso, if you have larger patches, please think about making a pull request instead of pasting the patch as comment. This would make my life a little bit easier, thanks! ;-). So in order to reproduce this, I downloaded myself a copy of old old Mono 2.0 (from 2008) and compiled this code:\nusing System;\n\nclass Test {\n    public event EventHandler TestEvent;\n}\n\nusing mcs /target:library test.cs\nThis is the pattern generated:\n.class private auto ansi beforefieldinit Test\n    extends [mscorlib]System.Object\n{\n    // Fields\n    .field private class [mscorlib]System.EventHandler TestEvent\n\n    // Methods\n    .method public hidebysig specialname rtspecialname \n        instance void .ctor () cil managed \n    {\n        // Method begins at RVA 0x20ec\n        // Code size 7 (0x7)\n        .maxstack 8\n\n        IL_0000: ldarg.0\n        IL_0001: call instance void [mscorlib]System.Object::.ctor()\n        IL_0006: ret\n    } // end of method Test::.ctor\n\n    .method public hidebysig specialname \n        instance void add_TestEvent (\n            class [mscorlib]System.EventHandler 'value'\n        ) cil managed synchronized \n    {\n        // Method begins at RVA 0x20f4\n        // Code size 24 (0x18)\n        .maxstack 8\n\n        IL_0000: ldarg.0\n        IL_0001: ldarg.0\n        IL_0002: ldfld class [mscorlib]System.EventHandler Test::TestEvent\n        IL_0007: ldarg.1\n        IL_0008: call class [mscorlib]System.Delegate [mscorlib]System.Delegate::Combine(class [mscorlib]System.Delegate, class [mscorlib]System.Delegate)\n        IL_000d: castclass [mscorlib]System.EventHandler\n        IL_0012: stfld class [mscorlib]System.EventHandler Test::TestEvent\n        IL_0017: ret\n    } // end of method Test::add_TestEvent\n\n    .method public hidebysig specialname \n        instance void remove_TestEvent (\n            class [mscorlib]System.EventHandler 'value'\n        ) cil managed synchronized \n    {\n        // Method begins at RVA 0x2110\n        // Code size 24 (0x18)\n        .maxstack 8\n\n        IL_0000: ldarg.0\n        IL_0001: ldarg.0\n        IL_0002: ldfld class [mscorlib]System.EventHandler Test::TestEvent\n        IL_0007: ldarg.1\n        IL_0008: call class [mscorlib]System.Delegate [mscorlib]System.Delegate::Remove(class [mscorlib]System.Delegate, class [mscorlib]System.Delegate)\n        IL_000d: castclass [mscorlib]System.EventHandler\n        IL_0012: stfld class [mscorlib]System.EventHandler Test::TestEvent\n        IL_0017: ret\n    } // end of method Test::remove_TestEvent\n\n    // Events\n    .event [mscorlib]System.EventHandler TestEvent\n    {\n        .addon instance void Test::add_TestEvent(class [mscorlib]System.EventHandler)\n        .removeon instance void Test::remove_TestEvent(class [mscorlib]System.EventHandler)\n    }\n\n\n} // end of class Test\n\nThe only difference is that there is no dup used, but an equivalent instruction is used instead, which leads to the following raw C# ('no transforms' step):\npublic event EventHandler TestEvent\n{\n    [MethodImpl(MethodImplOptions.Synchronized)]\n    add\n    {\n        this.TestEvent = (EventHandler)Delegate.Combine(this.TestEvent, value);\n    }\n    [MethodImpl(MethodImplOptions.Synchronized)]\n    remove\n    {\n        this.TestEvent = (EventHandler)Delegate.Remove(this.TestEvent, value);\n    }\n}\n\nAnd PatternStatementTransform is perfectly able to recognize that pattern.\n. Please be aware that we match C# AST when trying to detect auto events. So castclass is already transformed to a C# cast expression.\nSee https://github.com/icsharpcode/ILSpy/blob/b2d30dc6153aebd6bd1be4e011a4c1da95cb0f30/ICSharpCode.Decompiler/CSharp/Transforms/PatternStatementTransform.cs#L576-L593\nThe cast expression on the right side of the assignment is already there (line 587).\n@tamlin-mike Not sure what's going on on your side... maybe you are missing some references? Could you provide a private link to a binary via private gitter? Would love to see the actual binary, because IL snippets are often difficult to get accepted by ilasm. Thanks!. Well... given that it's an obfuscated assembly and ILSpy by definition will not support obfuscated assemblies out of the box, I don't know if that's a useful option. If it's obfuscated, you should use a deobfuscator first. The decompiler is already quite complex as it is now, I don't want to add too many more options.... @tamlin-mike if you are interested in helping us out a bit more (than you already do... thank you!), providing unit tests is always welcome (preferably as a PR). Currently C# 7.0+ ref locals, ref returns and condition ref expressions are implemented, but not yet extensively tested.... > It would really surprise me if C#, or even CLR, held such a promise. I suspect it's more of a compiler implementation detail, where current compilers follow this convention.\nMost of the patterns the decompiler can detect are based on implementation details of the compiler, so that is not really an argument. But yes, we could do a better job and use the field name detected in the event accessor implementation.\nBut that leaves us with the problem that we would no longer be able to hide event backing fields, because these are not marked CompilerGenerated and we do not want to decompile each event, when just displaying the members in the tree-view.. cc @dgrunwald @KirillOsenkov Any comments?. Is it necessary to add this to 3.0.x?. Then, could you please rebase this to master? Thank you very much!. The build is failing because I fixed the typo you reported in #1044.. Thank you for your contribution!. >Maybe write the tree to text, then parse it back, this time filling out locations? Then we'd need a C# parser. Or, parse into a Roslyn syntax tree, and have a visitor to create an AstNode-based tree from a Roslyn syntax tree, with all locations preserved.\nWe already have functionality to do this, without parsing the text back into an AST. See this snippet:\nhttps://github.com/icsharpcode/ILSpy/blob/4cccf9fac59e20434896646025848774da02d110/ILSpy/Languages/CSharpILMixedLanguage.cs#L46-L52\n1040 is failing... is this on purpose?. > Also see my comment above regarding duplicated InsertSpecialsDecorator and InsertRequiredSpacesDecorator - you decide if it's a bug that you want to fix, I can file it if needed.\nYes, I would say this is a thing we could improve. You can file an issue for it. Thanks!. We now have a CompilerOptions.UseMcs in the Tester infrastructure. We can now add tests for mcs patterns as we see fit. (see 97b7089a). >Is there some plugin set used for testing (both for ensuring all types of parts are present, and to have a long startup time)?\nNo, there is none AFAIK.. I think it will be hard to debug this with just the control flow instructions and nops... Could you provide a more complete sample? Thank you very much!. Btw... I didn't know that ilasm would accept this kind of IL skeleton, thanks for the hint! :)\nI think the problem lies somewhere else:\n```\nILFunction ProblemMethod {\nBlockContainer {\n    Block IL_0000 (incoming: 2) {\n        BlockContainer (do-while) {\n            Block IL_0000 (incoming: 2) {\n                if (comp(invalid.expr(\"Stack underflow\") >= invalid.expr(\"Stack underflow\"))) Block IL_0006 {\n                    if (logic.not(conv unknown->i4 <invalid>(invalid.expr(\"Stack underflow\")))) leave IL_0000 (nop)\n                    leave IL_0000 (nop)\n                }\n                br IL_0014\n            }\n\n            Block IL_0014 (incoming: 1) {\n                if (logic.not(conv unknown->i4 <invalid>(invalid.expr(\"Stack underflow\")))) br IL_0000 else leave IL_0000 (nop)\n            }\n\n        }\n        if (logic.and(comp(invalid.expr(\"Stack underflow\") > invalid.expr(\"Stack underflow\")), logic.and(conv unknown->i4 <invalid>(invalid.expr(\"Stack underflow\")), logic.not(conv unknown->i4 <invalid>(invalid.expr(\"Stack underflow\")))))) leave IL_0000 (nop)\n        leave IL_0000 (nop)\n    }\n\n    Block IL_0037 (incoming: 0) {\n        br IL_0000\n    }\n\n}\n\n}\n```\nThe inner block container is correctly identified as do-while loop, whereas the outer block container cannot be a loop at all, because it is the root block container for the ILFunction and container.Kind == Normal is expected.\nThe problem is that the unreachable (!) block IL_0037 contains a br to IL_0000, and because of that the entry-point block has 2 incoming edges (one because it's the entry-point plus the additional br in the other block) which makes the decompiler think that the block container is a loop.\nNormally unreachable blocks should be removed at some point in the pipeline, i.e., BlockContainer.SortBlocks(deleteUnreachableBlocks: true) should be called at some point after another transform has run. In this case, no other higher level pattern (switch on nullables/strings, catch when, yield or async) is present and the block never gets deleted.\nAs I see it, we have two options:\n Explicitly remove unreachable blocks in the ILReader (set deleteUnreachableBlocks: true on line 437):\nhttps://github.com/icsharpcode/ILSpy/blob/4c73a771a1ad884abb40929496622853a33c6c59/ICSharpCode.Decompiler/IL/ILReader.cs#L422-L441\nBut this is a rather \"destructive\" approach, as it potentially kills off a lot of code, which might be of interest to the developer inspecting the code. Ideally, we should only delete unreachable blocks in containers that have been modified by a transform. @dgrunwald Please comment on this approach.\n Alter StatementBuilder on line 726 to check container.Kind != ContainerKind.Normal as well.\nhttps://github.com/icsharpcode/ILSpy/blob/4c73a771a1ad884abb40929496622853a33c6c59/ICSharpCode.Decompiler/CSharp/StatementBuilder.cs#L724-L736\nThis second approach is the one I will implement, because it seems to be the easiest fix for this problem. Actually, I should have added this check right from the start, when refactoring a large part of the loop detection. I am sorry!\nThank you for reporting and analyzing this!\n. @tamlin-mike Can you please verify that the test case in Issue1047.cs and Issue1047.il (in \\ICSharpCode.Decompiler.Tests\\TestCases\\ILPretty) make sense and the produced C# is correct? I don't have the original binary, so it's a lot harder for me to see.. @dgrunwald Should we remove these? They are currently not implemented.\nhttps://github.com/icsharpcode/ILSpy/blob/4c73a771a1ad884abb40929496622853a33c6c59/ICSharpCode.Decompiler/DecompilerSettings.cs#L390-L448. The build currently fails because we enforce correct indentation (we use tabs instead of spaces everywhere) by running tidy.py. If you have python installed, you can add https://gist.github.com/siegfriedpammer/75700ea61609eb22714d21885e4eb084 to your .git/hooks to prevent errors like this in the future.. Thank you for your work!\nI am not quite sure about the changes to IField and IUnresolvedField. The thing is, the \"TypeSystem\" in the decompiler models all the metadata from the high-level perspective of C#. If a feature is not supported in C#, there should be no support for it. You can always use IDecompilerTypeSystem.GetCecil to retrieve the Cecil object and access the low-level metadata, if needed.. Thank you! Sorry for taking so long to reply.\nThe thing I had in mind was: Add another transform (or modify TransformArrayInitializers accordingly) that adds the data blobs as comments. Then you would not have to modify the TypeSystemAstBuilder and CSharpAmbience, because the type system is available through the context of each transform.\nEdit: After thinking about it some more... It would also be possible to do this in CSharpDecompiler.DoDecompile(FieldDefinition, IField, ITypeResolveContext), that would be even better, I think.\nhttps://github.com/icsharpcode/ILSpy/blob/659b12bdb82e8fa80ae7577cf67430df36fbe390/ICSharpCode.Decompiler/CSharp/CSharpDecompiler.cs#L863-L876\nJust as fixed fields are implemented, you could do the same for array initializers... IMHO the shortest and cleanest solution.\nWhat do you think?. Thank you for your work!. Without providing the assembly that causes the exception, this is not fixable. Could you please provide the binary? Thank you!. I cannot reproduce this problem. It seems the problem is not in the DLL you have posted, but in some other DLL in your assembly list (which I currently do not have). Keep in mind that the analyzers work on the full assembly list, so any loaded assembly could be the culprit. Please try to find the culprit by removing other assemblies one after the other. (But make a copy of %APPDATA%\\ICSharpCode\\ILSpy.xml beforehand, so you can always go back to the erroneous state!). Thanks, I was able to reproduce it now, after some fiddling. Unfortunately, this is not fixable currently due to some inflexibility in the Analyzers because of Cecil. Please use the suggested workaround. The main problem is that the PDB file seems to be broken. This will be fixed in ILSpy 4.0.. With the move to SRM and the reimplementation of the analyzers, problems like this should disappear. If you still encounter any problems, please open a new issue.. I cannot think of a clean way to solve this currently.\nWe'd either have to \"guess\" the expected type in ExpressionBuilder.VisitIfInstruction around line 2069 (AdjustConstantExpressionToType takes care of converting 4 to StringComparison.Ordinal, which works fine in cases like cond ? variable : constant, where variable is enum-typed, but not in this case as both branches use the same type.) or \"unpack\" the cast and push the conversion \"inside\" the expression after it is converted in TranslatedExpression.ConvertTo, which is what we do in cases where explicit casts can be removed. But it seems this solution would require us to \"re-evaluate\" the expression as soon as the expected type is known.\nI am thinking about providing a type-hint (using TranslationContext.TypeHint) in cases where there is an expected type, but I think this will not solve the problem in all the cases.. Thank you very much for your contribution!. Seems like PatternStatementTransform is causing this.\n@dgrunwald Seems we need to move all loop transforms to the ILAst... what do you think?. Note: the above code is compiled in release mode. The debug version looks completely different.. Implemented in bd829882fbdcd9f907bbe96e8d7037defee6ab64.. This is a problem I discovered and tried to fix a few months ago, but I could not come up with a satisfying solution. The problem here is:\nhttps://github.com/icsharpcode/ILSpy/blob/b2d30dc6153aebd6bd1be4e011a4c1da95cb0f30/ILSpy/TextView/DecompilerTextView.cs#L747-L756\nLine 751 returns a TextViewPosition with Column == VisualColumn and IsAtEndOfLine == false, which could be seen as a bug, but the line causing the bug is actually 755. FindSegmentsContaining returns all segments matching start <= offset <= end, offset is the offset directly at the end of the line, which then returns the segment of the ldarg.0 reference.\nPossible solutions:\n1) Fix GetPositionFromMousePosition to return an \"invalid\" position in cases where the mouse position is after the end of the line.\n2) Change semantics of FindSegmentsContaining to exclude the offset after the end of the segment.\n3) The easiest fix would be to add a space before the EOL when printing instructions without arguments.\n@dgrunwald which one is the best solution?. Yes, this was fixed in 7cbcdd9f. This does not solve the problem described in #1064. For ILSpy this is not much of a problem, because if ILSpy fails you can still use a deobfuscator like de4dot, but if SRM fails, how do you process these in Visual Studio, given that Roslyn uses SRM as well?\nNote that this exception occurs simply when trying to open the assembly, not reading any method bodies, so retrieving public types and members would also fail -> no intellisense.. OK, then it is completely worthless and I think we can live with an exception in this case. Thank you for looking into this!. I have used the analyzers successfully in the latest released version. Could you provide a specific example that is failing?. I have just pushed a fix that improves assembly discovery in the \"Used by\" analyzers. Would be nice, if you could check whether the situation improved with this fix. Thank you very much! This specific fix is in https://ci.appveyor.com/project/icsharpcode/ilspy/build/3.1.1.3670 or later, if you need a nightly build for testing.. Closing because there was no feedback.. See #829 and #154...\nUnless it is contributed by someone, it will not be added to ILSpy due to limited resources. JetBrains is a big company, we are three developers. Contributions are very welcome!\nIf anyone wants to implement it, feel free to ask questions in our gitter channel.. I don't see the advantage/use of such an option... seems a bit out of scope for a decompiler.... The decompiler should not add any information to the output that was not there in the binary. This is a thing you can do after decompiling and exporting the source code.. A Visual Basic .NET switch statement? Do you know whether this is Mono or Microsoft? Thank you!. The NRE is fixed now. Please note that the C# code is still very ugly and not compilable because the original code was written in VB and contains \"On Error Resume Next\", for which there is no direct equivalent in C#.. I implemented the mcs switch pattern a few days ago... can you try the most recemt beta from our build server? See https://ci.appveyor.com/project/icsharpcode/ilspy/history.\nNote that mcs sometimes generates inefficient code. That is, it uses a Dictionary in cases with only one case, for ex.:\n            string text2 = this.method;\n            if (text2 != null)\n            {\n                if (iTween.<>f__switch$map7 == null)\n                {\n                    Dictionary<string, int> dictionary = new Dictionary<string, int>(1);\n                    dictionary.Add(\"to\", 0);\n                    iTween.<>f__switch$map7 = dictionary;\n                }\n                if (iTween.<>f__switch$map7.TryGetValue(text2, out num2) && num2 == 0)\n                {\n                    this.GenerateColorToTargets();\n                    this.apply = this.ApplyColorToTargets;\n                }\n            }\n            break;\n\nCurrently these are not translated to a simple if statement, because it would be a special case. I think this is a bug in the compiler and I am not yet sure if it's worth to add a special case for this.\nPlease report back, if the transform improves your code. Thank you!. Can you provide an example binary? Thank you!. I just tested this with the binary you provided:\nILSpy is perfectly able to decompile it:\n```\n// AdvancedSS.PermuteUtils\nusing System.Collections.Generic;\npublic static IEnumerable AllExcept(IEnumerable input, int indexToSkip)\n{\n    int index = 0;\n    foreach (T item in input)\n    {\n        if (index != indexToSkip)\n        {\n            yield return item;\n        }\n        index++;\n    }\n}\n```\nCould you please try the latest binary from the build server? Thank you!\nIf you still experience any problems, please open a new issue.. This is intentional. Some features cannot be disabled in any language version. Other examples include: Generics when decompiling to C# 1.0. They cannot be removed without changing the semantics. The language selection feature is mainly intended to reduce the number of options in the options dialog. It does not make sense to add a checkbox for each single feature, thus we decided to model the UI differently.. ad dnSpy: dnSpy uses an old version of ILSpy that did not support ref at all and did not correctly preserve semantics of value type calls in compound assignments. ILSpy 3.x does this now, but has not yet special handling for older language versions that do not support ref.\nad Reflector: As noted above, ILSpy has no special handling that simplifies ref expressions in compound assignments with value types. Reflector does handle it correctly. As always: contributions are very welcome! If you have questions, you can always ask either via gitter or in an issue.. Optional arguments are implemented as of 477633127706f66df643f41cc149840030447692. @sharwell @davkean Would you expect the decompiler to replace literals with constants everywhere? Even in constant / enum declarations?\nWhich one do you prefer? enum E : sbyte { A = 0x7F } or enum E : sbyte { A = sbyte.MaxValue }\n(Of course the definition of public const double NaN in System.Double and others would not reference itself.). We've recently published an update to the extension, can you confirm whether that fixes this bug? Thank you!. Using indexer declaration syntax is not possible, because that would declare it as default property on recompilation. Also all use sites of the property would have to use indexer syntax, which does not really work... Currently method declaration syntax plus a comment adding the property attributes seems to be the only sensible way to solve this.. Currently we do not have any plans to extend the search feature. It would be nice if somebody could contribute it. If anybody wants to give it a go, take a look at AbstractSearchStrategy.MatchName in SearchStrategies.cs. I think it would be best to add an option for this (for now default: false).\nIf you have any questions, please ask!. This is the On Error Resume Next pattern. Due to limited resources we have no plans for properly supporting all VB.NET constructs, especially abominations like On Error Resume Next. It's impossible to properly decompile them to C#. Note that we dropped support for VB.NET in ILSpy 3.x.. Note: The provided code was decompiled with ILSpy 2.x. @meirumeiru \n\nwhat I also see often is that \"nothing\" is decompiled into 10 lines of switch and if and else... and when you analyze the code generated, then you see that it's doing nothing...\n\nAre you looking at obfuscated assemblies? It's a common obfuscation technique to add unreachable blocks/instructions that do nothing, just to confuse a decompiler. You should use a deobfuscator first, and then use ILSpy. ILSpy by definition does not do deobfuscation.. I think this was fixed in #1176. . Thank you for your contribution and this idea! I cherry-picked and refactored your code in ee093267a8118b689aca3470de2b21224c00618b\nReasons:\n1) You were using the internal list of assemblies instead of the thread-safe GetAssemblies method.\n2) I think, using a foreach loop in this case is more succint.\nThank you again!. It seems there is a problem with the XmlDoc files... try unchecking View > Options > Decompiler > Show XML documentation in decompiled code. Seems like we need to add a catch handler for this exception type as well. Would you be able to take a look at the XML file? Does it look like valid XML? Thanks!. Thanks, that would be nice!. Can you provide an assembly that causes this problem? I have been unable to reproduce this. Thank you!. The problem mentioned in #1054 is a different one, but I will try to reproduce this problem with the other DLL.. The above exception has nothing to do with analyzers. It should occur while trying to decompile something. Analyzers do not decompile anything. I cannot reproduce the analyzer exception either. (See my comment in #1054). Copied from the other issue:\n\nKeep in mind that the analyzers work on the full assembly list, so any loaded assembly could be the culprit. Please try to find the culprit by removing other assemblies one after the other. (But make a copy of %APPDATA%\\ICSharpCode\\ILSpy.xml beforehand, so you can always go back to the erroneous state!). Oh... I just remembered, we are talking about debug info here... would you be able to post the pdb file as well? Downloading the latest Xenko Studio did not help me reproduce the problem. Please post the pdb in question... thank you very much!. Thanks, but still no luck :( ... Can you still reproduce the problem, if you add the dll + pdb to a separate folder and open it from there? I suspect some reference gets automatically loaded on your side.. OK... I am out of ideas.... Can you try getting the source and debugging it yourself? Otherwise we could try Skype or Teamviewer... any other options?. I suspect this is a threading issue. The only way to properly fix this seems to be switching Cecil for SRM, which will be done in ILSpy 4.0.. Can you try the latest nightly build? (Get it from here: https://ci.appveyor.com/project/icsharpcode/ilspy) Thank you!. Can you post a stack trace? Thank you!. Yes, the exception in the analyzers cannot be fixed easily... (without rewriting them) removing/renaming the broken PDB is the only workaround.\n\nThere are two separate issues:\n1) exception during decompilation (see first post of this issue) FIXED\n2) exception in the analyzer (see other posts) WONT FIX (for now). With the move to SRM and the reimplementation of the analyzers, problems like this should disappear. If you still encounter any problems, please open a new issue.. It is on our list, but has been pushed back time and again for more visible language features. Thank you for your understanding!. Could you please post the assembly that contains the dynamic code? Would love to use it for testing. Thank you!. Thank you for posting... Which method is the code you pasted above from? Can you give me a hint? Could not find it so far... Thank you!. \nThank you for your support!\nWill soon come to master (with #1165). Can you open a new issue with the errors? It might be that there are problems because of missing references... Thank you for your help!. We have removed the individual options, because with the recent increase in different language features, the list of options got way too long. And second, many options depend on each other, so a simple list of check boxes is no longer useful.\nIf you have any idea how both features, i.e., \"language versions\" and \"individual options\", could be combined, we can discuss your ideas.. > Meaning, does the switches are still present in the code, or you decided to refactor the implementation to avoid them at all?\nAll the switches are still present... there are even more now, so we tried to simplify the UI.\nThe question is about the UI only.. I think you can achieve that by unchecking \"Insert using declarations\":\n\n. Could you provide the assembly (including references!) that is not properly decompiled? Thank you very much!. Thanks! It seems this is fixed in the latest nightly build (tested with 3.1.0.3635-beta2). Can you confirm using the latest nightly build? It seems though, you provided a different assembly than used in the example above, because the first line is completely different...\n\nI guess it can't find the necessary reference. I don't know why. dnSpy finds references in the same directory, but ILSpy not. (even i ran in admin-privileges)\n\nAdmin should have no impact at all because we're not requesting write access. Also, on my machine ILSpy had no problem finding all the references.\n(the number of gotos could be reduced by reordering the blocks @dgrunwald what do you think?)\n```\n// HeyzapTest\nusing Heyzap;\nusing UnityEngine;\nprivate void InitHeyzap()\n{\n    HeyzapAds.Start(\"b8fdab463806cd00179e846212d4e544\", 0);\n    HZIncentivizedAd.AdDisplayListener displayListener = delegate(string adState, string adTag)\n    {\n        if (adState.Equals(\"show\"))\n        {\n            callBacksReceived = true;\n        }\n        if (!adState.Equals(\"hide\"))\n        {\n            goto IL_0027;\n        }\n        goto IL_0027;\n        IL_0064:\n        if (!adState.Equals(\"fetch_failed\"))\n        {\n            goto IL_0074;\n        }\n        goto IL_0074;\n        IL_0074:\n        if (adState.Equals(\"incentivized_result_complete\"))\n        {\n            Time.timeScale = 1f;\n            Debug.Log(\"Heyzap Rewarded ad incentivized_result_complete\");\n            base.Invoke(\"DelayInReward\", 1f);\n        }\n        if (adState.Equals(\"incentivized_result_incomplete\"))\n        {\n            UIManager._instance.ShowAGenericMessage(\"Something went wrong. You might have cancelled the video Ad or there was a network issue\");\n            UIManager._instance.ToggleLoadingScreen(false);\n            UIManager._instance.ToggleGameOverScreen(true);\n            UIManager._instance.gameOverScreen.noOfChancesLeftToUseContinue++;\n        }\n        if (!adState.Equals(\"audio_starting\"))\n        {\n            goto IL_0104;\n        }\n        goto IL_0104;\n        IL_0027:\n        if (!adState.Equals(\"click\"))\n        {\n            goto IL_0037;\n        }\n        goto IL_0037;\n        IL_0037:\n        if (adState.Equals(\"failed\"))\n        {\n            callBacksReceived = true;\n            ShowAdNotAvailable();\n        }\n        if (!adState.Equals(\"available\"))\n        {\n            goto IL_0064;\n        }\n        goto IL_0064;\n        IL_0104:\n        if (!adState.Equals(\"audio_finished\"))\n        {\n            return;\n        }\n    };\n    HZIncentivizedAd.SetDisplayListener(displayListener);\n    HZInterstitialAd.AdDisplayListener displayListener2 = delegate(string adState, string adTag)\n    {\n        if (!adState.Equals(\"show\"))\n        {\n            goto IL_0010;\n        }\n        goto IL_0010;\n        IL_0010:\n        if (adState.Equals(\"hide\"))\n        {\n            Time.timeScale = 1f;\n            GameManager.instance.InterstitialNotAvailableRestartGame();\n            UIManager._instance.ToggleCommericalBreakPanel(false);\n            UIManager._instance.PauseGame();\n        }\n        if (!adState.Equals(\"click\"))\n        {\n            goto IL_0059;\n        }\n        goto IL_0059;\n        IL_0098:\n        if (!adState.Equals(\"fetch_failed\"))\n        {\n            goto IL_00a8;\n        }\n        goto IL_00a8;\n        IL_00a8:\n        if (!adState.Equals(\"audio_starting\"))\n        {\n            goto IL_00b8;\n        }\n        goto IL_00b8;\n        IL_0059:\n        if (adState.Equals(\"failed\"))\n        {\n            Time.timeScale = 1f;\n            UIManager._instance.ToggleCommericalBreakPanel(false);\n            GameManager.instance.InterstitialNotAvailableRestartGame();\n        }\n        if (!adState.Equals(\"available\"))\n        {\n            goto IL_0098;\n        }\n        goto IL_0098;\n        IL_00b8:\n        if (!adState.Equals(\"audio_finished\"))\n        {\n            return;\n        }\n    };\n    HZInterstitialAd.SetDisplayListener(displayListener2);\n    HZIncentivizedAd.Fetch();\n}\n```. I can tell from your screenshot, that your are not using the latest nightly build (please get it from here: https://ci.appveyor.com/api/projects/icsharpcode/ilspy/artifacts/ILSpy_binaries.zip?branch=master&job=Configuration%3A+Release)\nThe build issue is strange... seems you added the submodules as well... which version of VS are you using?. You could try changing the project debug options, see the \"Debug\" section. There have been some breaking changes in VS 2017 (15.6), which might be related to this issue.\n\nTry changing the executable path to an absolute path.... Regarding the LdFtn issue: could you provide another example binary?. Any update on this issue? All the binaries you provided so far decompile properly on my system. Can this be closed?. You can get it from here: https://ci.appveyor.com/api/projects/icsharpcode/ilspy/artifacts/ILSpy_binaries.zip?branch=master&job=Configuration%3A+Release. \nIt is decompiled properly... no error.. Do you see a warning about unresolved references at the top? If so, could you please post the assembly load log? (Just click the \"References\" node just below the assembly node in the tree view.)\nMine looks like this:\n```\n// Referenced assemblies (in metadata order):\n// UnityEngine.CoreModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n    // Assembly reference loading information:\n    // Info: Success - Loading from: C:\\Users\\Siegfried\\Downloads\\Issue1104\\UnityEngine.CoreModule.dll\n// UnityEngine.AnimationModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n    // Assembly reference loading information:\n    // Info: Success - Loading from: C:\\Users\\Siegfried\\Downloads\\Issue1104\\UnityEngine.AnimationModule.dll\n// UnityEngine.Physics2DModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n    // Assembly reference loading information:\n    // Info: Success - Loading from: C:\\Users\\Siegfried\\Downloads\\Issue1104\\UnityEngine.Physics2DModule.dll\n// mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\n    // Assembly reference loading information:\n    // Info: Success - Loading from: C:\\Users\\Siegfried\\Downloads\\Issue1104\\mscorlib.dll\n// UnityEngine.UI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\n    // Assembly reference loading information:\n    // Info: Success - Loading from: C:\\Users\\Siegfried\\Downloads\\Issue1104\\UnityEngine.UI.dll\n// UnityEngine.TextRenderingModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n    // Assembly reference loading information:\n    // Info: Success - Loading from: C:\\Users\\Siegfried\\Downloads\\Issue1104\\UnityEngine.TextRenderingModule.dll\n// UnityEngine.Purchasing, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n    // Assembly reference loading information:\n    // Info: Success - Loading from: C:\\Users\\Siegfried\\Downloads\\Issue1104\\UnityEngine.Purchasing.dll\n// UnityEngine.AudioModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n    // Assembly reference loading information:\n    // Info: Success - Loading from: C:\\Users\\Siegfried\\Downloads\\Issue1104\\UnityEngine.AudioModule.dll\n// UnityEngine.UIModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n    // Assembly reference loading information:\n    // Info: Success - Loading from: C:\\Users\\Siegfried\\Downloads\\Issue1104\\UnityEngine.UIModule.dll\n// UnityEngine.IMGUIModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n    // Assembly reference loading information:\n    // Info: Success - Loading from: C:\\Users\\Siegfried\\Downloads\\Issue1104\\UnityEngine.IMGUIModule.dll\n// Assembly-CSharp-firstpass, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n    // Assembly reference loading information:\n    // Info: Success - Loading from: C:\\Users\\Siegfried\\Downloads\\Issue1104\\Assembly-CSharp-firstpass.dll\n// UnityEngine.ImageConversionModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n    // Assembly reference loading information:\n    // Info: Success - Loading from: C:\\Users\\Siegfried\\Downloads\\Issue1104\\UnityEngine.ImageConversionModule.dll\n// Stores, Version=1.0.6633.150, Culture=neutral, PublicKeyToken=null\n    // Assembly reference loading information:\n    // Info: Success - Loading from: C:\\Users\\Siegfried\\Downloads\\Issue1104\\Stores.dll\n// UnityEngine.UnityAnalyticsModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n    // Assembly reference loading information:\n    // Info: Success - Loading from: C:\\Users\\Siegfried\\Downloads\\Issue1104\\UnityEngine.UnityAnalyticsModule.dll\n``. The only difference I can see:Assembly-CSharp-firstpass.dll` was found in the assembly list. Please try to remove this assembly from the treeview. It will be loaded automatically by ILSpy from the correct location.\nThe delegate type HZIncentivizedAd.AdDisplayListener used for the lambda in InitHeyzap is located in Assembly-CSharp-firstpass.dll. The version of  Assembly-CSharp-firstpass.dll found in your assembly list might be from a different Unity game and thus not contain the requested type. Which makes decompilation fail, because the type was not found.\nPlease remove the Assembly-CSharp-firstpass.dll from your assembly list and refresh the decompiler view. I would advise you to remove all loaded assemblies from the list when trying to decompile a Unity game, because Unity uses the same assembly names for each game, which will confuse the assembly resolver.\nPlease note that this behavior (first looking at the loaded assemblies, if that fails try to resolve the assembly name in the local directory) is expected: It is a performance optimization, so that we avoid disk IO if an assembly is already loaded. It also makes it possible to resolve assembly resolution errors (i.e. the assembly resolver picks the wrong assembly) can be resolved by manually loading the correct assembly in ILSpy.\nHope this helps!. Addendum: I can imagine why dnSpy was decompiling the assembly correctly: Either assembly resolution works differently there or you did not have an assembly with the same name already loaded in your list.\nMystery solved! \ud83d\ude04 . I fear, this is not possible, as we would need to do a lot of guessing. And, what if one assembly works for most types, but then the decompiler discovers it's not the right one at a later stage? Would you make the decompiler start over from scratch? If we did that, I can see the decompiler end up in an infinite loop of mixing and matching assemblies and types.\nI like to have the assembly resolver as simple as possible and, of course, predictable. Otherwise this might lead to other strange bugs. I think the assembly resolver is quite complex as it is already, because it does a lot of magic to resolve .NET core assemblies or retargetable assemblies.\nI hope you can understand my reasoning.. Sorry for taking so long to get back to you!\nYour approach is definitely in the right direction. To answer your questions, I would need to properly understand what the feature your are trying to implement is supposed to do exactly. Are you interested in constants used in .data sections in IL?\n. Thanks for the clarification. The last thing is already implemented (LiteralSearchStrategy). However searching in .data sections (field init values) or attribute blobs is not implemented, but I think it should be added to the existing LiteralSearchStrategy.\nYou can start by adding:\n    protected override bool IsMatch(FieldDefinition field, Language language)\n    {\n        return IsLiteralMatch(field.Constant) /* add || IsLiteralMatch(ParseBytes(field.InitialValue)) */;\n    }\n\n            // TODO: implement object ParseBytes(byte[])\n\nFor information on how to parse these bytes, take a look at the ECMA 335 specification, look for .data sections.\nFor the attributes you can add:\n             bool IsAttributeMatch(ICustomAttributeProvider provider) { } // similar to IsLiteralMatch\n\nIt should be added for everything that allows attributes: type defs, methods, properties, fields, events, getters/setters/adders/removers, parameters, return types, etc.\nthere you can iterate over all attributes and check all the arguments...\nhope this helps...\nI am looking forward to your pull request! ;-) Thank you!. Duplicate of #1082: See the comments for an explanation of why this is currently expected behavior.. The easiest way would be to post the assembly and the full name of the method + type that's failing. Thank you for your support!. Otherwise you wouldn't use a decompiler :)... Can you send a link on gitter?. @dgrunwald Should we include this change in the 3.1-rc2 release? Would be nice if you could take a closer look. Thanks!. @pentp Out of curiosity: how do you measure allocations and speed in ILSpy? Which profiler do you use?. > I use PerfView with ETW sampling of allocations. I made a small command line program that just runs decompilation on an assembly (with a warmup run before perf. measuring).\nThanks for the info!\nThank you for your contribution!. Could you post the original C# code and the compiler used to generate the assembly? Thank you very much!. Then the problem is that you did not follow the usual naming convention for compiler-generated fields. The compiler uses <PropertyName>k__BackingField for backing fields. ILSpy is very defensive and does not replace assignments to other fields.\nCurrently I won't have time to fix this. Maybe in the next major release.... We won't fix this, because it is a niche problem. If you want the decompiler to do it's job properly, either do not modify the assembly or follow the usual naming convention as noted above.. I cannot reproduce the assertion with the latest nightly build. Also, when I try to decompile Mono's mscorlib.dll the order of enum values is as one would expect.. I was only talking about the assertion. The actual problem here is not yet fixed.. The errors you are seeing are very strange... have you followed the steps in the README?. Sorry for getting back to you this late. Were you able to resolve the issues?\nI noticed that in your list of errors there are errors related to the usage of tuples and tuple syntax. Please make sure that you use the latest version of Visual Studio 2017, although I am not sure if this will solve the issue.\nCould it be that nuget restore did not work out as planned? Seems like System.ValueTuple is missing.\nHope this helps someone.... What issues are you having with the CSharpDecompiler.Decompile(IMemberDefinition) API? You should be able to get access to the BlockStatement. Can you post an attempt of yours at using the new API?. Why are you using the IAstTransform interface at all? It is only useful when you are implementing a transform that is added to the decompiler pipeline, but there is no need for you to do this.\nAs for\ninitializer.ReplaceWith(new VariableInitializer(newName, initializer.Initializer));\nmaybe using .Detach()\ninitializer.ReplaceWith(new VariableInitializer(newName, initializer.Initializer.Detach()));\nsolves your problem?. Oh I am sorry, forgot that Detach is an internal extension method...\nyou can do the same:\n    public static T Detach<T>(this T node) where T : AstNode\n    {\n        node.Remove();\n        return node;\n    }. We no longer provide `Mono.Cecil` objects as annotations. You can use the `GetSymbol` extension method to get the symbol that is referenced by a node. To get the Cecil object you have to use `DecompilerTypeSystem.GetCecil`. Hope this helps!. The ListBox was replaced with a ListView in 1ba2c0537a2946d08345623c14c0ee05e2f9ff36.. Thank you for your contribution!\n\nI noticed that you never set the allowNonContiguousMatch field anywhere. How did you plan to activate the feature?\nPlease note that we are currently moving a lot of things around in ILSpy and that I am unable to merge this in the near future. Once we are done, I will merge and adapt your contribution to the other changes.\nSorry for the wait!. Originally I was thinking about adding a checkbox to the DisplaySettingsPanel to enable or disable the feature in general. Not sure if it's useful to have a short input sequence (like there already is t: for types or / for regex search) or control to temporarily activate the feature in the search box. To be honest, I haven't thought about that yet. Feel free to come up with a suggestion!. @TheOneAmir Any update on this?. Thank you! I don't think that the \"hiding\" of these special characters is a big problem, because a) they occur rarely and b) if you want to find some text that starts with + or - or ~ you can always use \"++\", \"+-\" and \"+~\" or regex search. If needed, we could implement some escape syntax, maybe use \"? But I don't think that this is a critical issue currently.. Thank you again for your contribution!. Thank you for your help!. Fixed in #1124 . Thank you for your contribution! Just two things:\n\nCould you please rebase this onto the 3.1.x branch, as that will be the next release.\nCould you please add some base unit tests to QualifierTests to ensure it works, even if there is a conflict?\noverridden methods calling their base method (missing base would result in infinite recursion!)\nanother method calling overridden this.A() and base.A()\nsame test using a virtual shadowed method, i.e. new void B() instead of override void B()\nsame test using a non-virtual shadowed method, i.e. new void C()\n\nIf you need additional base classes and types for testing, please add them as nested types.\nWhen modifying \"pretty tests\", please do not forget to delete (this will regenerate them on the next run) the QualifierTests.*.il files, before testing and committing!\nThank you!. You can press the \"Edit\" button at the top and change the base branch. Thank you!. These changes happen on every regeneration. It's not a problem.. Hmmm. On second thought... might be that you have a different version of ilasm installed on your system. But, I guess it will be fine anyways.... Merged. Thank you again!. > I have previously built the add-in myself (I added the \"Open code in ILSpy\" feature), and can do so again to investigate what's happening, but thought I'd ask first to see if it's just me. Thanks!\nAny help and contribution would be very welcome! Thank you!\nI have refactored the code of the addin a bit in the last release, so I hope it will be easier to work with!. Sorry for the confusion. The dependency on the C++ compiler toolkit was added last weekend, so we could use the editbin utility to artificially increase the stack used for ILSpy.exe. In d23264248905efeda5204ccee10b35731b78e28f the dependency is now optional and I added some info on this to the readme  \"How to build\" section.. Could you please open a new issue for this? The submodules should actually be entirely optional, because the only submodule we currently use is ILSpy-tests, which is only needed for a small subset of tests. Thanks!. Update: I downloaded the ILSpy source as zip file and tried it myself. I was only able to reproduce this problem once. It seems that VS 2017 got confused and was unable to restore the nuget packages automatically.\nI was able to fix it by executing nuget restore ILSpy.sln in the \"Package Manager Console\" inside VS. Unfortunately, I can no longer reproduce the problem, otherwise I would have filed a bug to VS.\nLet's hope this works for you as well.... > Is there something else that I need to install?\nNo, but there was another bug I introduced in the build script. There is a post build target in ILSpy.csproj, that copies all the missing assemblies to the \"Packages\" folder in the AddIn. That way, all the dependencies, that are somehow forgotten by msbuild are added to the VSIX:\nhttps://github.com/icsharpcode/ILSpy/blob/b5f0b8b2105a12b8b6ac585cc42167c0402e82f3/ILSpy/ILSpy.csproj#L396-L419\nAfter adding another msbuild target with the name \"PostBuild\", only the last one was executed without any warning. On my machine this problem did not surface, because I already had all the required assemblies in the \"Packages\" folder of ILSpy.AddIn.\nNow I have changed the names to something sensible and tested if that fixes the build.\nSorry again for messing this up!. Modifying variables, specially those with address usage (ref variables are address usage), should only be done in the IL Ast, because there we have the appropriate infrastructure and tools to make larger-scale changes to the code and ensure its semantic correctness. In addition, if anything goes horribly wrong you will trigger tons of assertions, that ensure the correctness of the whole tree.\nThe PrettifyAssignments step should only transform \"x = x op y\" into \"x op= y\" where possible, i.e. change a single C# expression. This is necessary, because custom operators are not yet transformed from method calls to operators in the IL Ast. In the ILAst these are represented as method calls.\nPlease take a look at ICSharpCode.Decompiler.IL.Transforms.TransformAssignment for the transforms and the decompiler pipeline in CSharpDecompiler (see GetILTransforms).\nUnfortunately, there is only little documentation on the IL Ast, so best is to use the \"debug steps\" tree view, which allows you to analyze each IL Ast transformation step / loop.\nIt can be activated by launching a debug build of ILSpy:\n\n1) Select a single method in the tree view. (Does not work with other members or types)\n2) Switch to \"ILAst\" in the languages dropdown.\n3) Press the \"Show Steps\" button.\nNow you can see a tree representing all transformations at the top:\n\nYou can manually repeat the transforms by double clicking on the steps.\nHope this helps at least a little bit to get started! If you have any other questions, feel free to ask!\nThank you for your help!\n. Closing, because SRM has this enabled by default.. Why not? From the documentation of IsInterned: \"This method looks up str in the intern pool. If str has already been interned, a reference to that instance is returned; otherwise, null is returned.\"\nAll the string constants (\"\u4ee5\u603b\u5206\u6765\u7b97\", \"\u4ee5\u6bcf\u9774\u6765\u7b97\", etc.)  in the method are loaded via ldstr, so if the value of text is equal to any of these, they are in the string pool and string.IsInterned returns a reference to that string.\nSo the comparison text != \"\u4ee5\u603b\u5206\u6765\u7b97\" can be done by reference, because either text is null or text points to a string from the string pool. In the case that the value of text equals the string constant, the reference stored in text must point to the same string.. Actually, if you test this yourself, for example the following code:\n```csharp\nprivate static void StringComparison(string a)\n{\n    if (a != \"test\")\n    {\n        Console.WriteLine(\"test\");\n    }\n}\nprivate static void StringComparison2(string a)\n{\n    a = string.IsInterned(a);\n    if (a != \"test\")\n    {\n        Console.WriteLine(\"test\");\n    }\n}\nprivate static void StringComparison2WithCast(string a)\n{\n    a = string.IsInterned(a);\n    if ((object)a != \"test\")\n    {\n        Console.WriteLine(\"test\");\n    }\n}\nprivate static void StringComparisonWithCast(string a)\n{\n    if ((object)a != \"test\")\n    {\n        Console.WriteLine(\"test\");\n    }\n}\n```\nGenerates the following IL (tested with csc, mcs and Roslyn C# compiler):\n```il\n.method private hidebysig static \n    void StringComparison (\n        string a\n    ) cil managed \n{\n    // Method begins at RVA 0x2070\n    // Code size 28 (0x1c)\n    .maxstack 2\n    .locals init (\n        [0] bool\n    )\nIL_0000: nop\nIL_0001: ldarg.0\nIL_0002: ldstr \"test\"\nIL_0007: call bool [mscorlib]System.String::op_Inequality(string, string)\nIL_000c: stloc.0\nIL_000d: ldloc.0\nIL_000e: brfalse.s IL_001b\n\nIL_0010: ldstr \"test\"\nIL_0015: call void [mscorlib]System.Console::WriteLine(string)\nIL_001a: nop\n\nIL_001b: ret\n\n} // end of method HelloWorld::StringComparison\n.method private hidebysig static \n    void StringComparison2 (\n        string a\n    ) cil managed \n{\n    // Method begins at RVA 0x2098\n    // Code size 36 (0x24)\n    .maxstack 2\n    .locals init (\n        [0] bool\n    )\nIL_0000: nop\nIL_0001: ldarg.0\nIL_0002: call string [mscorlib]System.String::IsInterned(string)\nIL_0007: starg.s a\nIL_0009: ldarg.0\nIL_000a: ldstr \"test\"\nIL_000f: call bool [mscorlib]System.String::op_Inequality(string, string)\nIL_0014: stloc.0\nIL_0015: ldloc.0\nIL_0016: brfalse.s IL_0023\n\nIL_0018: ldstr \"test\"\nIL_001d: call void [mscorlib]System.Console::WriteLine(string)\nIL_0022: nop\n\nIL_0023: ret\n\n} // end of method HelloWorld::StringComparison2\n.method private hidebysig static \n    void StringComparison2WithCast (\n        string a\n    ) cil managed \n{\n    // Method begins at RVA 0x20f0\n    // Code size 36 (0x24)\n    .maxstack 2\n    .locals init (\n        [0] bool\n    )\nIL_0000: nop\nIL_0001: ldarg.0\nIL_0002: call string [mscorlib]System.String::IsInterned(string)\nIL_0007: starg.s a\nIL_0009: ldarg.0\nIL_000a: ldstr \"test\"\nIL_000f: ceq\nIL_0011: ldc.i4.0\nIL_0012: ceq\nIL_0014: stloc.0\nIL_0015: ldloc.0\nIL_0016: brfalse.s IL_0023\n\nIL_0018: ldstr \"test\"\nIL_001d: call void [mscorlib]System.Console::WriteLine(string)\nIL_0022: nop\n\nIL_0023: ret\n\n} // end of method HelloWorld::StringComparison2WithCast\n.method private hidebysig static \n    void StringComparisonWithCast (\n        string a\n    ) cil managed \n{\n    // Method begins at RVA 0x20c8\n    // Code size 28 (0x1c)\n    .maxstack 2\n    .locals init (\n        [0] bool\n    )\nIL_0000: nop\nIL_0001: ldarg.0\nIL_0002: ldstr \"test\"\nIL_0007: ceq\nIL_0009: ldc.i4.0\nIL_000a: ceq\nIL_000c: stloc.0\nIL_000d: ldloc.0\nIL_000e: brfalse.s IL_001b\n\nIL_0010: ldstr \"test\"\nIL_0015: call void [mscorlib]System.Console::WriteLine(string)\nIL_001a: nop\n\nIL_001b: ret\n\n} // end of method HelloWorld::StringComparisonWithCast\n```\nAs you can see, in the case WITHOUT the cast (first two methods), the compiler generates a call to the custom operator op_Inequality(string, string), which equals !=. However in the other cases the compiler generates a ceq instruction which simply compares two references (in this case).\nThe beq instruction used in your example is similar to ceq + brtrue/brfalse in my example.\nI would argue that Reflector and dnSpy are not reproducing the exact semantics as ILSpy does.\nPlease note that in ILSpy 3 we worked hard to transform the semantics of the IL code as exact as possible into C#. First, we want to ensure correctness, followed by \"beauty\" later on. In this case we have to include the cast, as the IL code forces us to.\nAs for the warning: Maybe the reference comparison was intended by the original developer? The IL code makes it seem so.\nAs for the switch in Reflector's output: I am not aware of any string-switch pattern, that uses string.IsInterned when compiled to IL. In my point of view this is a very liberal interpretation of the code, far from the exact semantics. It may look beautiful, but it's not correct.. The second switch looks like a traditional C# 1.x switch on string with a hashtable. Could you please post the binary, so I can take a look and fix this? Thank you very much!. Thanks for posting the assembly. This should be fixed in 644941d25be795b6f4acd936057c76021cecf784.\nI implemented the missing C# 1.0 switch patterns. It seems that Reflector was correct in all cases, I apologize! Thanks for reporting!. You are correct from the user's point of view. But, in order to set fold markers and their initial state (collapsed/expanded) we need to tell the output layer of the decompiler during text generation to insert these markers. That's how the option landed in the DecompilationSettings class and thus in the DecompilerSettingsPanel.\nI think it would involve a bit of work to move these settings to the other panel. Currently each panel has only one settings class it deals with. Is it worth the effort? You could try to move it and contribute a pull request. But, to be honest, I cannot think of a really clean way to solve this...\nTwo ideas, both of them are breaking changes to our public APIs and will affect plugin devs:\n Extend the Language class to add an \"OutputOptions\" class to each Decompile method.\n Extend the ITextOutput interface: Add properties for options or a single property for the options class. I think this is a bad idea, because the ITextOutput interface should stay unidirectional, i.e., only be the target of invocations and not carry any additional visible state.\nI don't think this is going to happen in the 3.x version. Even if contributed, the earliest would be 4.0, due to semver constraints.. Oh, you just found another instance of \"Clone() is a bug\"... thanks for reporting!. Oh, well, ... realised you still use version 3.0.1, you should probably update to ILSpy 3.1, because there the bug is already fixed. https://github.com/icsharpcode/ILSpy/releases/tag/v3.1-final.... Yeah, I just realised that we forgot to update the auto update info to 3.1... will do that soon. Sorry for the confusion.. Ever since we added support for .NET Standard in the decompiler, we require .NET 4.6 for the ILSpy UI. This was an oversight, which is now fixed. Thanks for reporting!. Duplicate of #1137. When you select a field definition in the tree view, we have to decompile the ctors as well, to be able to display field initializers.\nThe assertion is thrown while decompiling the static ctor of the type. Could you please either post the assembly you tried to decompile or provide the IL code (if it's a simple method that can be easily reassembled)?\nThank you very much for your help!. The IL of the inner class <>c__DisplayClass2 and any other inner classes would be needed to create a full repro... Thank you very much!. A minimal example that triggers the assertion:\n```\nusing System;\nnamespace ThrowInFinally\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            try\n            {\n            }\n            finally\n            {\n                throw new Exception();\n            }\n       }\n    }\n}\n```. No, I just reassembled the IL and copied the suspicious parts into a separate project and reduced it further... :) But thanks ;-)...\n. That is because ICSharpCode.Decompiler does not yet include support for winmd files. Support for them is only included in ILSpy.. Why is this invalid? What would you expect? -501 and 0xfffffe0b have the same value, when encoded in binary and ilasm accepts both ldc.i4 -501 and ldc.i4 0xfffffe0b. It seems ildasm always uses hexadecimal notation for values < 0, but that is just a question of formatting the output value.\nldc.i4 -504 is not invalid.. Is this from some code found in the wild or is it a constructed example? Two points that make me wonder:\n1) The IL does not contain any field declaration. I find it baffling that ilasm does not issue any warning at all.\n2) The event type is EvType, which is declared as plain class. Because it is not deriving from System.Delegate in any way, the decompiler correctly adds casts to System.Delegate, when passing evType2 and value to Delegate.Combine/Delegate.Remove...\nThis is not a bug. If this is in the real code, the IL is horribly broken and cannot be translated to a C# auto event. It would not compile because of CS0066: event must be of a delegate type.\nCould you please send me the original assembly to verify this?. I have adjusted your test case and added a fix to the mcs pattern for the missing type arguments in the output of ExpressionBuilder. Can you please confirm, whether this fixes the issue?. See https://github.com/icsharpcode/ILSpy/blob/b3db47321119b8324d8851c089e01d66fbafffde/ICSharpCode.Decompiler/CSharp/Transforms/IntroduceUsingDeclarations.cs#L178-L189\nYou are welcome to step in and provide a fix! :)\nIf you need any help, please ask!. Should be fixed in c7c3801ff12a503a18dd450a88bb80aaea884676. Yes, but looking at the IL:\n```il\n.method private hidebysig static \n    void Main (\n        string[] args\n    ) cil managed \n{\n    // Method begins at RVA 0x2074\n    // Code size 38 (0x26)\n    .maxstack 2\n    .entrypoint\n    .locals init (\n        [0] class Second\n    )\nIL_0000: nop\nIL_0001: newobj instance void Second::.ctor()\nIL_0006: stloc.0\nIL_0007: ldloc.0\nIL_0008: ldstr \"hello\"\nIL_000d: callvirt instance void First::set_Info(string)\nIL_0012: nop\nIL_0013: ldloc.0\nIL_0014: call instance string Second::get_Info()\nIL_0019: call void [mscorlib]System.Console::WriteLine(string)\nIL_001e: nop\nIL_001f: call int32 [mscorlib]System.Console::Read()\nIL_0024: pop\nIL_0025: ret\n\n} // end of method Program::Main\n```\nAs you can see, the instruction at 0xd calls the setter through the declaring type First. This is expected. The instruction at 0x14 calls the getter of the Info property through the child class and uses a member reference and no method declaration token. This is a pattern, we currently do not support.\nDo you know which compiler was used to generate this assembly?. I just tested with csc and vbc for .NET 1.1... both of them do not generate such code.\nOf course we could try to be smart and use the usual naming convention to display unresolvable property/event accessors differently, but this could lead to invalid programs in some other cases. Another drawback: there would be no links on these properties, because there is no definition we could link to...\nAnyway, this is unlikely to get fixed soon, because it requires some refactoring of the CallBuilder and a few extra methods that work without having the full definition information available.. Hmmm... the code you described, always calls [other]First::get_Text() when compiled with C# >= 2.0.\nWhich leads the code to be decompiled to base.Text on every line. Because there is no other property in called Text in Second the compiler sees Text, this.Text and base.Text as a reference to the same property getter, that is: First.get_Text.\nI have some faint memory of Eric Lippert writing on his MSDN blog about a bug in the C# 1.x compiler, which was fixed in C# 2, where the compiler sometimes generates calls to base methods that would crash the run-time later on. (See https://blogs.msdn.microsoft.com/ericlippert/2010/03/29/putting-a-base-in-the-middle/ for more info.)\nIf we adapt your example to this scenario:\n```\n\n\nother.cs -> compile with csc.exe /target:library other.cs\n\n\npublic class First\n{\n    public string Text\n    {\n        get\n        {\n            return \"FIRST\";\n        }\n        set\n        {\n        }\n    }\n}\npublic class Second : First\n{\n}\n\n\n\nthis.cs -> compile with csc.exe /target:exe /r:other.dll this.cs\n\n\nusing System;\npublic class Third : Second\n{\n    public static void Main()\n    {\n        new Third().Test();\n    }\npublic void Test()\n{\n    Console.WriteLine(Text);\n    Console.WriteLine(this.Text);\n    Console.WriteLine(base.Text);\n}\n\n}\n```\nNow when you compile both sources with the C# 1.x compiler and execute this.exe, everything is fine:\n\n.\\this.exe\nFIRST\nFIRST\nFIRST\n\nNow, suppose other.dll is a third party dll and there is an update. Your customers do not know about this and update the third party, but not your application.\nchange other.cs to the following and recompile ONLY other.dll \n```\npublic class First\n{\n    public string Text\n    {\n        get\n        {\n            return \"FIRST\";\n        }\n        set\n        {\n        }\n    }\n}\npublic class Second : First\n{\n    private new string Text { // <-- yes, this is strange, but works!!!! (new only hides the warning...)\n        get {\n            return \"PRIVATE SECOND\";\n        }\n        set {}\n    }\n}\n```\nExecute this.exe again:\n\n.\\this.exe\nUnhandled Exception: System.MethodAccessException: Second.get_Text()\n  at Third.Test()\n  at Third.Main()\n\nAnd there we get a runtime error. If you recompile this.cs as well, the problem disappears, because the C# 1 compiler now discovers the new method.\nIf we do the same thing using C# 2 or newer, there is no such problem.\nI believe, we should not fix this IL level bug by decompiling it to nice-looking C#, which actually has different semantics on later versions of C#.\nAlso, adding a special case, if the language version is set to C# 1.0, is just too much work for too little gain, because C# 1.x has been dead for over 10 years now.... We no longer use Mono.Cecil objects on the C# AST level... you can only get the TypeSystem MemberResolveResult, but that will only give you the erroneous UnkownMemberResolveResult. As I said, this is not easy to fix. This problem affects different parts of the decompiler. In particular ILReader and DecompilerTypeSystem.... You can always use the GetResolveResult() extension method. But in this case you will only get an ErrorResolveResult with no information at all.. Yes, this is an oversight.. Duplicate of #1149. Thank you for providing the fix to this problem as well!\nI just noticed that your local git settings seem to be very strange. When I locally merge your pull request, I get the following entries in git log:\n```\ncommit 3e5240aa55a7044c060c8b83850da769ecf06f5a (HEAD -> CreateAndInject-master)\nAuthor: Administrator Administrator@GODOFWAR-PC\nDate:   Thu Jun 7 14:26:16 2018 +0800\nFix #1166, improve code\n\ncommit 52b9e1f85aa63d1686da0236bd7e2eefbf3a58e7\nAuthor: Administrator Administrator@GODOFWAR-PC\nDate:   Thu Jun 7 14:07:45 2018 +0800\nFix #1166, add namespaces for typeof in assembly attributes.\n\n```\nWould you mind configuring your local username to CreateAndInject or something? It would make your changes easily identifiable when inspected independently from GitHub. Thank you very much!\nPlease create a new pull request afterwards. Sorry for the trouble!. \nIt seems GitHub still does not recognize it. I think you have to use the same email address as used on your github account.\ngit log shows the following:\n```\ncommit 793be2f273cfbd3c3991e9c6ff24c4b04d2f40b6 (HEAD -> CreateAndInject-master)\nAuthor: CreateAndInject \nDate:   Thu Jun 7 15:32:03 2018 +0800\nFix named arguments\n\n```\nYou need to use an email address that is recognzed by GitHub...\n\nbut it seems only take effect in commit 3\n\nyes, you have to redo the commit. You can do a mixed git reset and then apply all changes in one single commit.\n\ngit reset --mixed 22cff129f462037765257ee0f91f54b65efa8358\n\n22cff129f462037765257ee0f91f54b65efa8358 is the latest commit your changes are based on. Then you can create a new commit.\nThank you!. NOTE: you will have to do a git push --force after resetting the commits.. https://stackoverflow.com/questions/9419814/why-github-does-not-recognize-my-username-in-my-commits.\nyou have to use a real email address. I don't know if VS2017 can do a force push... let me check.... I am afraid it is not possible...\nYou could also just create a new branch and push that branch...\nThen edit the pull request to point to the new branch or create a new pull request...\nsorry for all the trouble.... \nSeems you can enable it on git settings... but be careful... you normally should not use it.. perfect thanks!. Thank you for the report! I fear this method is difficult to reassemble without additional information. Could you please do one of the following to help us:\n1) Provide the full assembly + references as zip file for us to investigate\n2) Provide an IL file that can be reassembled with ilasm without warnings\nAnd one tip: If you want to include multiple lines of code in a GitHub issue, please use three backticks followed by a newline at the start of the block and three backticks (on their own line) at the end, thank you!. There is no method called \"ErrorReportingExceptions\" in any of the assemblies you posted... at least I  cannot find any.... Can you please show the IL?\nNormally the compiler will remove variables that are not used.\nAnd the decompiler removes variables that are not used as well, because sometimes the compiler generates temporary variables and it makes the code more readable, if we remove variables that are not used.\nThe compiler is free to optimize away local variables as it pleases, as long as they are not used as ref or out parameters. And the decompiler introduces new variables and removes others sometimes to make the code more readable.\nWhy would you want to see declarations of variables that are not used?\nThis is a decompiler, not a source code converter.. Closed. Reason: no feedback from OP.. This is fixed on the current master branch.. Can you please post the binary used to trigger the StackOverflowException?. The assertion failure seems unrelated to the stack overflow. Could you please post the assembly including all assemblies (if available) that are referenced by this one? Thank you!. The stackoverflow is fixed by our use of editbin.exe. If you still get any assertions, please open separate issues for those. Thanks!. This is similar to #828. Not sure, how we could add that to the current architecture.\nThe search currently works like this:\nThe input of search box is split into multiple search terms at every space character. If there is only one search term and it is prefixed by tm: (types and members), t: (types), m: (members), md: (methods), f: (fields), p: (properties), e: (events), c: (constants) or @ (metadata tokens), the prefix is removed and the corresponding search mode is used. If there are multiple terms - or no prefix - the selection from the combobox is used instead.\nEvery search strategy supports different ways of string-matching: + (must contain), - (should not contain), = (exact match) and currently proposed in #1119: ~ (partial substring match). / is used for the regex mode (which only applies if there is only one search term).\nNot sure, how we could separate search terms from search \"parameters\" like this or #828 suggest.\nIf we use the \"prefix with colon\" (for ex. use in: or a: or asm:) syntax, this conflicts with the search mode selection described in the second paragraph. We would have to look for \"search parameters\" before trying to parse the search terms. Any ideas?. Implementing such a feature would require to completely change the way search works. Currently it is only possible to search type definitions and members, nothing else.\nI would suggest separating AbstractSearchStrategy and its implementations from the Cecil object model and add an interface that serves as \"data source\" for the search strategies. Then the search could access multiple data sources. There could be a data source for objects from the type system (that is, type definitions and members), for references and for other things we might add in the future.\nIf you need further help, do not hesitate to ask!. Currently it is very hard to do a lot of clean-up, because we have work on other branches that introduces massive changes. Having massive changes on multiple branches of our code base is not a good idea, as it makes merging them back together hell.\nCleaning up the SearchPane/SearchStrategies.cs will have to wait until we're done with merging the srm branch back to master.\nDisclaimer: the search-related code was not written by me.\nI try to follow the \"one-class-per-file\" rule, whereever it makes sense. Sometimes classes are so small that I put them in the same file. Also I like to put many similar enums in one file, or next to the class the enum \"belongs\".\nI think moving the search-related code to its own sub folder \"Search\" and splitting up the classes into multiple files is a good idea, however currently, please don't!\n\nFor myself it is currently a bit strange to navigate trough one very large file.\n\nThe sooner you get used to it, the better, \ud83d\ude04 because sooner or later you might end up working with code that is a big mess. . If you are OK with handling a lot of merge conflicts, then I won't stop you. Thank you for stepping in and contributing!\nBefore you start, please install a git commit hook, that checks if all files use the correct indentation, quote from the README:\n\nIf you want to contribute a pull request, please add https://gist.github.com/siegfriedpammer/75700ea61609eb22714d21885e4eb084 to your .git/hooks to prevent checking in code with wrong indentation. We use tabs and not spaces. The build server runs the same script, so any pull requests using wrong indentation will fail.\n\nAlso note that there is currently one pull request #1119 that should be merged before you start moving the classes around. I hope we will get that done soon.\nProbably it's best if you start with prototyping the ISearchItemProvider and ISearchItem interfaces (names are just suggestions). But I haven't thought much about it yet, so we'll have to talk about it, once you've got something.\nThank you!. Could you please provide the assembly again for testing? Sorry for not getting to this sooner. Thank you very much!. No problem. This is not related to the PDB, as Cecil fails to read the binary.. This will be fixed in ILSpy 4.0.. We are in the process of moving to System.Reflection.Metadata... not sure if that will fix problems with obfuscated assemblies, but it will enable us to not crash on invalid IL.. Could you please provide the assembly for testing purposes? Thank you very much!. I just tested this. Seems that the Visual Studio Windows Forms designer does not like the code the decompiler generates. I will have to investigate further, but I think it will be difficult to fix this. We would have to add special cases for the InitializeComponent method of Windows Forms.. The problem is that the Forms Designer expects events to use explicit method group conversions. That is, it expects button1.Click += new EventHandler(button1_Click); instead of button1.Click += button1_Click;. This can be fixed by setting DecompilerSettings.UseImplicitMethodGroupConversion to false. The default value is true. Unfortunately, this setting cannot be modified from within ILSpy. (If you use the latest build from the build server, it can be turned off, if you switch to C# 1.0, but that is not a very good fix for this problem.). I think the best way to implement this is to extend ICSharpCode.Decompiler.IL.Transforms.ILTransformContext and ICSharpCode.Decompiler.CSharp.Transforms.TransformContext with flags like IsWinForms that can be set if the InitializeComponent method of a Form or Control is being decompiled (in CSharpDecompiler.DecompileBody). We then can use these flags to exclude some transformations and add others.. Currently we have no plans to include support for generatingpartial` classes and moving the InitializeComponent method + control member declarations to a separate file.. Could you please provide the assembly again? Sorry for not getting to this sooner. Thank you very much!. Yes, but it is not even alpha yet - we're still moving a lot of things around and that's why it's only consumable by the devs working on it. You are invited to test it once it comes back to the master branch.. This seems to fixed in the current master branch.. I have not yet been able to take a look at this, but it would help a lot, if you could provide us with the assembly. You could send it via gitter or email. Thank you very much! . I have just pushed a fix for this problem. Would you mind testing the latest CI build for master? You can get it from here: https://ci.appveyor.com/api/buildjobs/rs29q5shi7ed7vx4/artifacts/ILSpy_binaries.zip\nThanks!. Yes, the crash should be fixed now. We were passing an invalid filename to Path.ChangeExtension which is now fixed.. This is fixed on the srm branch, no assertions there.. Tested again using 4.0.0.4188. This seems to be fixed.. This was fixed in 2b5db1d0.. As of 42591a0ea0945d411571fe7f337139af15be11e1 the fix is merged to the 'srm' branch.. This is the ILSpy repository, please report the issue at the dnSpy repository (https://github.com/0xd4d/dnSpy). Thank you!. I fear, we won't be able to fix the first exception without the binary + references. Could you please provide them? Thank you very much! Unfortunately, the exception is not related to the bug in #1182.\nThe second exception: When you downloaded the latest CI build, you got a build from the SRM branch, which is in pre-alpha stage currently. Thanks for reporting the exception, it is fixed now!. This is by design: When you open an assembly and click on the assembly tree node for the first time, the referenced assemblies are not loaded automatically. Otherwise this might lead to performance problems. If any references are missing, we cannot decode attribute signature blobs in some cases.\nTo trigger assembly reference load, you need to decompile a type first or use the \"Load Dependencies\" context menu item.\nIf the referenced assemblies are loaded and this problem persists, please provide the assembly for testing. Thank you!. If you look closely, the old decompiler would simply omit the arguments. The new decompiler adds a comment alerting you of the problem.. Oh well... seems I forgot to reverse the order of bytes of the public key token after hashing them. The spec did not mention anything like this.. Because of the completely different architecture of 4.0, could you please tell us, what you are trying to achieve?. There is no Cecil ModuleDefinition anymore, we completely moved away from Cecil. You can use GetPEFileOrNull().Metadata to access the metadata tables.. See https://github.com/icsharpcode/ILSpy/wiki/srm for some more information. If you need more information, please ask. I will add the answers to that page.. We do not load method bodies in the type system, because it is metadata-only. Method bodies are stored in a different part of the binary.\nYou can take a look at the ILSpy source code. For example: https://github.com/icsharpcode/ILSpy/blob/master/ILSpy/Analyzers/IAnalyzer.cs#L65\nNote that there is no object model for instructions. You will have to do the byte parsing yourself. However there are some extension / helper methods in ICSharpCode.Decompiler.Disassembler.ILParser. Having fine-grained control over the IL byte stream is one of the reasons, we moved to SRM. You can read more about it here: https://github.com/icsharpcode/ILSpy/wiki/srm\nOne more example of why having direct access to the bytes is very useful is the Disassembler. See things like https://github.com/icsharpcode/ILSpy/issues/1179. ILSpy can reproduce the IL byte stream exactly as in the binary, so it can be easily reassembled. (Which is something, not even dnSpy can do...)\n(ILSpy now shows\n```\n        .method public hidebysig specialname rtspecialname \n        instance void .ctor () cil managed \n    {\n        // Method begins at RVA 0x2050\n        // Code size 14 (0xe)\n        .maxstack 8\n    IL_0000: br IL_0007\n\n    IL_0005: .emitbyte 0xab\n    IL_0006: .emitbyte 0xbf\n\n    IL_0007: ldarg.0\n    IL_0008: call instance void [mscorlib]System.Attribute::.ctor()\n    IL_000d: ret\n}\n\n``\nfor the method in question. Notice the use of.emitbyte`, which is a valid directive. See the issue linked above for the output of dnSpy.)\nThe analyzers (in https://github.com/icsharpcode/ILSpy/tree/master/ILSpy/Analyzers/Builtin) provide a great number of examples of how to parse byte streams using the new API.\nFor local variables you need to decode the local signature in MethodBodyBlock. For exception handlers decode the list of ExceptionRegions.\nHope this helps!. If you have further questions, please open a new issue. Thanks!. > Upd: (observation):\nwhen switching C# -> IL -> C#\na magic happens....\nwhy is that :)\nI guess, this is because, the ILLanguage implementation has a bug and it does not prevent ILSpy from loading references during first decompilation. :). Looks like we're getting the parameters wrong (in both C# and IL):\nILSpy:\n.method /* 0600014C */ public hidebysig newslot abstract virtual \n    instance void modreq([mscorlib]System.Runtime.CompilerServices.IsUdtReturn) erase (\n        class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1<!TValue>& _Where,\n        class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1<!TValue> modreq([mscorlib]System.Runtime.CompilerServices.IsByValue) ''\n    ) cil managed \n{\n} // end of method IDeque`1::erase\n```csharp\n// Microsoft.VisualC.StlClr.IDeque\nusing Microsoft.VisualC.StlClr.Generic;\nvoid erase(ref ContainerRandomAccessIterator _Where, ContainerRandomAccessIterator P_1);\n```\nildasm:\n.method public hidebysig newslot abstract virtual \n        instance void modreq([mscorlib]System.Runtime.CompilerServices.IsUdtReturn) \n        erase(class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1<!TValue>& A_1,\n              class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1<!TValue> modreq([mscorlib]System.Runtime.CompilerServices.IsByValue) _Where) cil managed\n{\n} // end of method IDeque`1::erase\nNotice that the only entry in the Param table has Sequence == 2 and is therefore assigned to the second parameter by ildasm.\nInterestingly, VS metadata-as-source does not show this method at all.. Note: according to ECMA-335, II.22.33, \"rules\" 4 and 5:\n\n\nSequence shall have a value >= 0 and <= number of parameters in owner method. A\nSequence value of 0 refers to the owner method\u2019s return type; its parameters are then\nnumbered from 1 onwards [ERROR]\nSuccessive rows of the Param table that are owned by the same method shall be\nordered by increasing Sequence value - although gaps in the sequence are allowed\n[WARNING]\n\n\nGaps are allowed, but we're currently mapping the parameter handles to the signature parameter types without handling gaps correctly.. The BaseType token of the <Module> type is 0xFFFF, which is not a valid value. Other than that the assembly seems to be fine.\n@dgrunwald how are we going to protect against such exceptions?\n@tmat @sharwell Any chance to improve SRM in this area? Also, would it be possible to allow getting the raw value of the token? Thank you!. It's obfuscated, ildasm won't process it as well.\nBut VS is able to show intellisense at least for the \"human readable\" namespaces. And metadata-as-source can display all types and members not hidden by strange names.\nAnd yes, ILSpy 3.x (Cecil) is able to process it.. I will try to make the decompiler as robust as possible.. ILSpy escapes all invalid chars in namespace names, type names and resource names with '-'.\nIn this case we have a namespace that uses some obfuscated name (with just one character), thus a directory '-' is created. Later we try to export all resources, there again is a resource with only one invalid character as name (which gets normalized to '-'). ILSpy tries to create a file with the name '-' in a directory where there already exists the directory for the namespace '-', this leads to a collision and this exception.\nI doubt that we'll ever be able to support all tricks obfuscators use. Unfortunately we cannot change the names of resources too much, because that prevents us from making the project recompilable.. Thank you for your contribution!. Note that once https://github.com/dotnet/roslyn/issues/29092 is fixed, we'll have to add more tests that use the initblk pattern.. Those are expression trees that were not detected. Could you please provide the assembly?. Can you please open new issues for these? Please describe only one problem per issue, thank you!. The problem are not the expression trees, but inlining of method calls on value types. In this case ToString() on decimal?.\nSee this example:\nCostReceYing4 costReceYing13 = costReceYing;\nList<CostReceYing2> list4 = list3;\nCostReceYing2 obj2 = new CostReceYing2\n{\n    \u5408\u540c\u7f16\u53f7 = \"\u5408\u8ba1\",\n    \u8bc4\u4f30\u8d39 = costReceYing13.\u8bc4\u4f30\u8d39,\n    \u5e94\u6536\u4ee3\u7406\u8d39 = costReceYing13.\u5e94\u6536\u4ee3\u7406\u8d39\n};\nnum = costReceYing13.\u5b9e\u6536\u4ee3\u7406\u8d39;\nobj2.\u5b9e\u6536\u4ee3\u7406\u8d39 = num.ToString();\nnum = costReceYing13.\u5b9e\u6536\u8bc4\u4f30\u8d39;\nobj2.\u5b9e\u6536\u8bc4\u4f30\u8d39 = num.ToString();\nnum = costReceYing13.\u624b\u7eed\u8d39;\nobj2.\u624b\u7eed\u8d39 = num.ToString();\nnum = costReceYing13.\u5b9e\u6536\u624b\u7eed\u8d39;\nobj2.\u5b9e\u6536\u624b\u7eed\u8d39 = num.ToString();\nlist4.Add(obj2);\n\nif num were inlined correctly, then obj2 would form a nice object initializer and then everything else would be collapsed into expressions nicely, making it possible for the ExpressionTree transform do it's thing.. @CreateAndInject Just to explain a bit more, if you're interested: A significant part of the transforms in the decompiler are \"statement transforms\", which analyze the statements in each block from the last statement to the first.. Another problem (inlining again):\nparameterExpression = Expression.Parameter(typeof(CostReceYing4), \"a\");\nMemberExpression left8 = Expression.Property(parameterExpression, (MethodInfo)MethodBase.GetMethodFromHandle((RuntimeMethodHandle)/*OpCode not supported: LdMemberToken*/));\nnum = null;\ncostReceYing12.\u5b9e\u6536\u624b\u7eed\u8d39 = source10.Sum(Expression.Lambda<Func<CostReceYing4, decimal?>>(Expression.Condition(Expression.Equal(left8, Expression.Constant(num, typeof(decimal?))), Expression.Convert(Expression.Convert(Expression.Constant(0, typeof(int)), typeof(decimal), (MethodInfo)MethodBase.GetMethodFromHandle((RuntimeMethodHandle)/*OpCode not supported: LdMemberToken*/)), typeof(decimal?)), Expression.Property(parameterExpression, (MethodInfo)MethodBase.GetMethodFromHandle((RuntimeMethodHandle)/*OpCode not supported: LdMemberToken*/))), new ParameterExpression[1]\n{\n    parameterExpression\n}));\n\nIn this case I think, num's value should be copy-propagated into the expression tree, which would enable us to detect it properly.. Yes, it seems variable splitting does not work as expected on num.\nThe num variable in the first and second snippet are both the same. First there is a default(decimal?) assignment and usage in the expression tree (the second snippet) and then there is ldloca access in the first snippet (which is executed after the second).\nSo the problem seems to be that the compiler is reusing one local variable slot for the expression tree constants and the value-type calls.. Variable splitting does not work, because SplitVariables.DetermineAddressUse returns AddressUse.Unknown for the parent callvirt ToString instruction.\n. I cannot reproduce this. Not using the current master branch and not on the pull request branch I created earlier.\nPlease be careful which version you use for testing. 4.0.0.4305-beta1 looks like a pull request build you got from AppVeyor.. AppVeyor is the correct location. However there is no separate build for master and for pull requests. They all end up in the same list. If you take a look at https://ci.appveyor.com/project/icsharpcode/ilspy/history you can see that build 4305 is a PR build. Its name ends in '-prXXXX'. I just wanted to ask you to test the latest build from master branch, which is 4302.\nCan you reproduce it with build 4302?. > To make the picture fully clean - clicking issue not present on latest released bits here - ILSpy version 4.0.0.4285-beta1\nI am sorry to disappoint you, but the released bits have this bug as well. It's just that release builds do not contain any assertions by definition. ;-)\nSo this is no regression. It cannot be, because the code never handled the special case we are running into.. I could not reproduce this. Tested with NUnit 3.9.0 and saw source code for all stack frames.. Without the source assembly this is impossible to debug. Could you please share the binary in question?\nThank you very much!. Please send it or a private link to siegfried.pammer@gmail.com. Thank you very much! Note that zip attachments are blocked by gmail so you might have to rename the file to docx or something.. Closing, because the latest master no longer produces an exception. (Test file was received via private channel on Nov. 1st., thanks again! forgot to close this here). Concerning the UI: You now can set ILSpy to show all types and members, even compiler-generated code that is transformed, if properly detected.\nRegarding the async detection bug: If you still have the executable, would you be able to provide it for further investigation? If you don't want to provide it publicly, you can send it to siegfried.pammer@gmail.com. Thank you very much!. No feedback -> close.. The cached delegate initialization pattern looks like a CachedDelegateInitializationRoslynWithLocal. The only difference is that the stack slot holding the display class instance is not copy-propagated or inlined, so the content of the if-block contains two instructions instead of the expected single instruction:\nBlock IL_00fc (incoming: 1) {\n    stloc V_5(call get_Current(ldloca V_4))\n    stloc S_61(callvirt get_Norms(ldloc V_5))\n    stloc S_63(ldfld <>9__3(ldloc V_2))\n    if (comp(ldloc S_63 != ldnull)) br IL_012d\n    br IL_0115\n}\n\nBlock IL_0115 (incoming: 1) {\n    stloc S_65(ldloc V_2)\n    stloc S_68(newobj Predicate..ctor(ldloc S_65, ldftn <DeleteNorm>b__3))\n    stloc V_6(ldloc S_68)\n    stfld <>9__3(ldloc S_65, ldloc S_68)\n    stloc S_63(ldloc V_6)\n    br IL_012d\n}\n\nS_65 / V_2 does not get inlined and is causing problems down the line.\nThe Roslyn compiler generates slightly different code in our unit tests. It does not use the stack slot (in this case S_65) twice, but instead directly loads V_2 the second time it is needed.\nShould we add detection for this pattern? Should we always copy-propagate the display class instance?. To me it seems this is a bug in the compiler, because there is no metadata for the property (i.e. no rows in the Property or PropertyMap table of TestProject.dll). I don't think that this is fixable.\nWithout that metadata the decompiler cannot decide whether a method belongs to a property/event or not.. I tried a bunch of other decompilers to see what they're producing. All of them treat this method similar to what ILSpy generates.. I doubt that we will be able to fix this. Omitting the method from the output seems to be a bad idea, because it might be needed, or might be of interest to an ILSpy user. This is unfortunate, but please deal with such cases manually. Sorry for the inconvenience!. I am unable to reproduce this. Seems there's something wrong with your .NET setup, because ILSpy uses the .NET Fusion COM interfaces for GAC traversal and that seems to be broken.. Sorry for not being clear: the issue seems to be that the Fusion COM API IAssemblyEnum.GetNextAssembly we use returns null in its second out parameter. This is unexpected and the only thing we could do is skip all items that return null instead of a proper assembly name.\nif (assemblyName == null) continue;\nis the only solution to the exception. But that would only hide the problem of a seemingly broken .NET setup.\n\nthe exception handling does not appear to check for inner exceptions \n\nThe message shows all there is. There is no inner exception, as these would be shown as it is the default in .NET. I don't see how we could improve this other than ignoring null values, as explained above.\n\nbut it is lame to point at the \u201ccheck the fusion log\u201d\n\nI never told you to \"check the fusion log\", these words do not appear in my previous comment. I just explained that the problem is not within ILSpy, but rather within Microsoft's .NET Fusion COM API.\n\nwhen ILSpy could show a failing file path\n\nExcept when ILSpy cannot do that, because there is no info besides \"the call to GetNextAssembly succeeded\" (so there is no unmanaged error info either), and \"oops, the name is null\".\nIt is hard to further analyze the problem, because I cannot replicate it at all on my machine.. @dimamatik Yes, please do create a new issue. We want to keep things clean.. What would you need the tokens for?. No, because there can be multiple methods with the same name. Of course we could provide a MethodGroupResolveResult there, but that is not implemented currently.. This feature is part of C# 7.3 and not connected to the .NET Framework version used in any way. You can simply select a lower language version from the version dropdown and the decompiler will not generate code using features from that version.\nHowever, keep in mind that among other things, the decompiler cannot remove generic types from the code when selecting C# 1.0. This is impossible.. First of all: Can you please revert all the changes in CSharpDecompiler.cs that are not necessarily part of your desired change? It seems some VS extension went berserk on that file while not honoring the settings in .editorconfig. Cosmetic changes such as indentation and brace style should not be part of the commits containing real code changes.. > Sorry, didn't realize that.\nNo problem, I just want to keep pull requests clean. :)\nAlso, wouldn't it be better to first discuss this feature in an issue? Up to now there never was a need for us to implement IDisposable on CSharpDecompiler and PEFile. PEFile is strongly tied to SRM's PEReader, which has PEStreamOptions, which can be used to implement the behavior you want.\nSee https://github.com/dotnet/corefx/blob/master/src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEStreamOptions.cs#L37. @dgrunwald what's your opinion on this issue? Thanks!. @z1c0 you can easily control this behavior by setting DecompilerSettings.LoadInMemory to true. I hope this helps. If you have more questions, do not hesitate to ask!. Our idea basically was to support multiple open documents and allow to stack them side-by-side, i.e., full-blown docking like VS. This allows comparing of versions, comparing C# and IL, looking and XAML resources while reading C# or IL, etc.. Thank you for the fix!. We've just decided that merging the changes from the SharpDevelop repository is not going to happen, because it is not an easy task due to breaking API changes and not worth the effort because ILSpy does not need any of the new features implemented in SharpDevelop's version.. The \"remove dead code\" option is not intended for normal C# code. It was added for F# and some special cases. Do not use it for standard unobfuscated C# code.. I will keep this open and take a look at the problem anyway.. Can you please provide an example? Thank you very much!. Now I understand, thank you!\n@dgrunwald Do you think we should support decompiling code from any loaded module or clarify APIs, documentation and implementations (i.e. explicit module checks and throwing exceptions) that this is not supported? AFAIK we only load metadata for modules other than the main module, so fixing this by explicitly stating that it's not possible, seems to be the best idea. I don't want to change the decompiler engine too much.. This looks like a bug in System.Reflection.Metadata or the compiler. The problem is that the Type field of the entry in the Constant table has the type code ELEMENT_TYPE_OBJECT (0x1c) instead of the expected NullReference (0x12) value from System.Reflection.Metadata.ConstantTypeCode.\n@tmat would you - by any chance - know what's going on?. @tmat Thanks for the info!\nLooks like we will have to catch these exceptions at some point.. This feature is currently not on our list. However, it can be easily added using ICSharpCode.Decompiler.Disassembler.ReflectionDisassembler. Contributions are welcome! If you want to help out and have questions, please feel free to ask!. Thank you for implementing this feature!. Which version of the decompiler engine are you using? Using the latest master and the assembly you provided, I get the following output:\n\nThis should be the desired output, I think. Also the assertion is no longer failing, because the missing using System has been added.. @mkrueger any feedback?. Thank you for the proposed fix!\nHowever, we found that your fix does not work for cases like MethodWithParams(new object[1]); which is being turned into MethodWithParams(null); which would call MethodWithParams with the array being set to null as opposed to an array with one null element.\nI implemented an alternative solution which takes overload resolution rules into account in c9b74865fc7786d415e8e64c02becd12ee93a28f.. I've analyzed method_101 and concluded that Reflector's output is incorrect.\nReflector:\ncsharp\nprivate void method_101(MemberInfo memberInfo_0)\n{\n    if (get_Boolean_1() && !this.class2_0.get_Boolean_1())\n    {\n        bool flag = false;\n        Assembly assembly = typeof(SecurityCriticalAttribute).get_Assembly();\n        for (MemberInfo info = memberInfo_0; info != null; info =\n(MemberInfo) info.get_DeclaringType())\n        {\n            object[] customAttributes = info.GetCustomAttributes(false);\n            for (int i = 0; i < customAttributes.Length; i++)\n            {\n                Type type = customAttributes[i].GetType();\n                if (type.get_Assembly() == assembly)\n                {\n                    string fullName = type.FullName;\n                    if\n(\"System.Security.SecurityCriticalAttribute\".Equals(fullName,\n(StringComparison) StringComparison.Ordinal))\n                    {\n                        flag = true;\n                        break;\n                    }\n                    if\n(\"System.Security.SecuritySafeCriticalAttribute\".Equals(fullName,\n(StringComparison) StringComparison.Ordinal))\n                    {\n                        break;\n                    }\n                }\n            }\n        }\n        if (flag)\n        {\n            if (memberInfo_0 is MethodBase)\n            {\n                string str2 = smethod_0((MethodBase) memberInfo_0);\n                throw smethod_7(this.method_142(this.class2_0), str2);\n            }\n            if (memberInfo_0 is FieldInfo)\n            {\n                Type type2 = memberInfo_0.get_DeclaringType();\n                string str3 = $\"{type2.FullName}.{memberInfo_0.Name}\";\n                throw smethod_22(this.method_142(this.class2_0), str3);\n            }\n            if (memberInfo_0 is Type)\n            {\n                string fullName = ((Type) memberInfo_0).FullName;\n                throw smethod_9(this.method_142(this.class2_0), fullName);\n            }\n            throw new SecurityException(\"A caller does not have the permissions required to access a resource.\");\n        }\n    }\n}\nILSpy:\ncsharp\nprivate void method_101(MemberInfo memberInfo_0)\n{\n    if (Boolean_1 && !class2_0.Boolean_1)\n    {\n        bool flag = false;\n        Assembly assembly = typeof(SecurityCriticalAttribute).Assembly;\n        MemberInfo memberInfo = memberInfo_0;\n        while (memberInfo != null)\n        {\n            object[] customAttributes = memberInfo.GetCustomAttributes(inherit: false);\n            for (int i = 0; i < customAttributes.Length; i++)\n            {\n                Type type = customAttributes[i].GetType();\n                if (type.Assembly == assembly)\n                {\n                    string fullName = type.FullName;\n                    if (\"System.Security.SecurityCriticalAttribute\".Equals(fullName, StringComparison.Ordinal))\n                    {\n                        flag = true;\n                        goto end_IL_008a;\n                    }\n                    if (\"System.Security.SecuritySafeCriticalAttribute\".Equals(fullName, StringComparison.Ordinal))\n                    {\n                        goto end_IL_008a;\n                    }\n                }\n            }\n            memberInfo = memberInfo.DeclaringType;\n            continue;\n            end_IL_008a:\n            break;\n        }\n        if (flag)\n        {\n            if (memberInfo_0 is MethodBase)\n            {\n                string string_ = smethod_0((MethodBase)memberInfo_0);\n                throw smethod_7(method_142(class2_0), string_);\n            }\n            if (memberInfo_0 is FieldInfo)\n            {\n                Type declaringType = memberInfo_0.DeclaringType;\n                string string_2 = $\"{declaringType.FullName}.{memberInfo_0.Name}\";\n                throw smethod_22(method_142(class2_0), string_2);\n            }\n            if (memberInfo_0 is Type)\n            {\n                string fullName2 = ((Type)memberInfo_0).FullName;\n                throw smethod_9(method_142(class2_0), fullName2);\n            }\n            throw new SecurityException(\"A caller does not have the permissions required to access a resource.\");\n        }\n    }\n}\nIf you take a look at the loops at the top, you can see that Reflector generates code that only breaks out of the inner loop. ILSpy however emits a break out of both loops. Reflector may emit code without a 'goto' here, but that's a Reflector bug. The IL code is breaking out of both loops, the Reflector-generated code continues with the outer loop. ILSpy gets this correct. I suspect this is the usual case of Reflector producing nice-looking but incorrect code.\nI haven't had a chance yet to analyze the other example.. Reflector:\ncsharp\nprivate static KeyValuePair<Type, MethodInfo> smethod_1(MethodBase methodBase_0)\n{\n    Dictionary<MethodBase, KeyValuePair<Type, MethodInfo>> dictionary\n= dictionary_0;\n    lock (dictionary)\n    {\n        if (!dictionary_0.TryGetValue(methodBase_0, out\nKeyValuePair<Type, MethodInfo> pair))\n        {\n            Type type2 = ((methodBase_0 is MethodInfo) && ((bool)(methodBase_0 as MethodInfo).get_ReturnType())) ?? GClass0.type_2;\n            bool flag = type2 != GClass0.type_2;\n            ParameterInfo[] parameters = methodBase_0.GetParameters();\n            if (parameters.Length > 9)\n            {\n                throw new Exception($\"Cannot create delegate for a method. Unsupported number of parameters: {parameters.Length}.\");\n            }\n            Type[] typeArray = new Type[parameters.Length + (flag ? 1 : 0)];\n            for (int i = 0; i < parameters.Length; i++)\n            {\n                Type type = parameters[i].get_ParameterType();\n                if (type.IsByRef || type.IsPointer)\n                {\n                    throw new Exception(\"Cannot create delegate for a method with parameters passed by reference.\");\n                }\n                typeArray[i] = type;\n            }\n            if (flag)\n            {\n                typeArray[typeArray.Length - 1] = type2;\n            }\n            Type key = flag ? smethod_2(typeArray) : smethod_3(typeArray);\n            MethodInfo method = key.GetMethod(\"Invoke\");\n            pair = new KeyValuePair<Type, MethodInfo>(key, method);\n            dictionary_0.Add(methodBase_0, pair);\n        }\n        return pair;\n    }\n}\nILSpy:\n```csharp\nprivate static KeyValuePair smethod_1(MethodBase methodBase_0)\n{\n    lock (dictionary_0)\n    {\n        if (dictionary_0.TryGetValue(methodBase_0, out KeyValuePair value))\n        {\n            return value;\n        }\n        MethodInfo obj = methodBase_0 as MethodInfo;\n        object obj2;\n        if (obj == null)\n        {\n            obj2 = null;\n        }\n        else\n        {\n            obj2 = obj.ReturnType;\n            if (obj2 != null)\n            {\n                goto IL_0041;\n            }\n        }\n        obj2 = type_2;\n        goto IL_0041;\n        IL_0041:\n        Type type = (Type)obj2;\n        bool flag = type != type_2;\n        ParameterInfo[] parameters = methodBase_0.GetParameters();\n        if (parameters.Length > 9)\n        {\n            throw new Exception($\"Cannot create delegate for a method. Unsupported number of parameters: {parameters.Length}.\");\n        }\n        Type[] array = new Type[parameters.Length + (flag ? 1 : 0)];\n        int num = 0;\n        Type obj3;\n        while (true)\n        {\n            if (num >= parameters.Length)\n            {\n                if (flag)\n                {\n                    array[array.Length - 1] = type;\n                }\n                obj3 = (flag ? smethod_2(array) : smethod_3(array));\n                break;\n            }\n            Type parameterType = parameters[num].ParameterType;\n            if (parameterType.IsByRef || parameterType.IsPointer)\n            {\n                throw new Exception(\"Cannot create delegate for a method with parameters passed by reference.\");\n            }\n            array[num] = parameterType;\n            num++;\n        }\n        Type type2 = obj3;\n        MethodInfo method = type2.GetMethod(\"Invoke\");\n        value = new KeyValuePair(type2, method);\n        dictionary_0.Add(methodBase_0, value);\n        return value;\n    }\n}\n```\nTake a look at this line from Reflector's output:\ncsharp\nType type2 = ((methodBase_0 is MethodInfo) && ((bool)(methodBase_0 as MethodInfo).get_ReturnType())) ?? GClass0.type_2;\nThis is definitely a type error: <Type> := <bool> ?? <Type> makes absolutely no sense.. I suspect this was introduced by my fix for #1265 (6da7d80). Will investigate this.. ad 1) I cannot reproduce this using ILSpy latest master and Newtonsoft.Json v11.0.0.0.\nThe code mentioned always uses as + null check as the original code did (version from 2018-10-14: https://github.com/JamesNK/Newtonsoft.Json/blob/3154a6de68f12c5c3e1576ccdba5f1177827cd9f/Src/Newtonsoft.Json/Linq/Extensions.cs#L190-L194)\nad 2) could you please provide the binary you used? There is no official download available from the link you provided.\nThank you very much for your help!. No feedback -> close. ILSpy should already handle the .nuget\\packages\\ path correctly. Do you have an example binary where it fails?. Oh, sorry, my bad! That's what you get from reviewing pull requests on your phone while travelling. A better description of the problem in the pull request might have helped. I wonder why this was never noticed up to now...\nIt's not super critical, thanks for the fix though! Sorry, for dismissing this too early!. Thank you for the fix!. This was fixed in v4.0-beta1 (see 38247fed2d229cec9e6af9e77f094f28374f67d8).. Is this a special case in ILInlining? I think we could handle this similar to exception filters and other special cases in ILInlining. What do you think?. This one is funny: CFF Explorer shows a RVA value greater than 0 for method 1.\n\nHow come System.Reflection.Metadata does not return the same value?\n\n@sharwell @tmat Would you be able to take a look at this one? Thank you very much!\n. So, when I disable the application of WinRT projections, the RVA will be reported correctly. Then the method body is displayed in <WinRT>Class1. However, as applying WinRT projections is the default, I would have expected the method body to be visible from Class1 when applying the projections.\n@tmat Thank you very much for the hint!\n@dgrunwald Do we actually ever need WinRT projections to be applied? #1127 comes to mind. I think the best way would be to add an option, so the user can decide whether they want projections applied or not.. Actually, ILSpy should support this already. Could you possibly have disabled the feature in the options dialog?\n\nIf it's not working, please provide an example binary + PDB. Thank you very much!. > Is it possible to NOT use Min/Max values in some integer arrays.\nHow would you decide in which arrays to use constants vs. literals?. Yes, we know whether we're in array initialization context or not. However, you wrote \"in some arrays\". I am not sure how to decide in which arrays we should use constants vs. literals. If you want all integer arrays to always use literals, then that's easy to implement.. There should be a hyperlink on the method name on the line // Entry point: ConsoleApp9.Program.Main, in the decompiler view after selecting the assembly node.\nIs that sufficient? If not, please explain. Thanks!. This is strange. When adding the language versions dropdown we took inspiration from this list, which explicitly mentions that VS 2010 equals C# version 4.\nTo me this looks like a limitation in Visual Studio 2010 and I don't think we have the resources to add special code to support this, unfortunately.. What's the status of this? Is this resolved?. No. 1 is fixed now.\nNo. 2 affects literals/constants of all small integer types, it seems:\nfullName = ((version.MajorRevision != (short)5) ? Path.Combine(fullName, \"2.0\") : Path.Combine(fullName, \"2.1\"));\nThe left side is short and the right side should be implicitly convertible to short.\nSee https://github.com/icsharpcode/ILSpy/blob/use-astbuilder-for-all-integer-literals/ICSharpCode.Decompiler/CSharp/ExpressionBuilder.cs#L2382:\nThe resolve result (5, System.Int16) is replaced by a different instance, but with the same values. Because of this, an explicit cast is added by ConvertTo.. Could you please tell us, what you were doing and which version of ILSpy you used? Thank you!. The \"Export assembly as project\" feature is not supposed to generate a PDB, that's what a compiler is for.. Can you please try again with the latest master?\nWould be nice if you could tell us, which method produces this exception.. @greenozon Does the exception still occur?. Could you explain, what do you want to achieve with the list of members? You only need a string representation? If you are OK with excluding things like the async modifier, then there might be an easier way than using a decompiler.. Did you try using the CSharpAmbience API? It is meant to provide exactly this functionality. See https://github.com/icsharpcode/ILSpy/blob/master/ICSharpCode.Decompiler/CSharp/OutputVisitor/CSharpAmbience.cs. would\nif (elementCount < length / 3)\n    return false;\nbe a good cutoff condition?\nILSpy 2.4 did something like this:\nFollowing condition would be placed inside the for loop of HandleSimpleArrayInitializer:\nif (index - nextMinimumIndex > 300)\n    return false;\nHowever, this would not solve the problem described in this issue, it would just revive the old cutoff behavior.\nMaybe applying both changes is best?. > To make it more fun, this is also a recursive problem, if initializing multi-dimensional arrays (something ILSpy currently struggles with, and fails, at least when the elements are non-POD).\nCould you provide an example so I can take a look at this? Thank you! (Also, what do you mean by \"POD\"?)\nI found a nice example of an initializer that makes ILSpy seem to hang: UnicodeCharacterEncoding.InitialiseNamedEntityList in System.Web.dll 4.0 in the GAC.\nHowever: the bottle neck is not the ILAst transform but rather the code that prints the generated output. 65536 items (most of them null) is a bit too much. Implementing the \"a third\" rule would solve this.\nAny other/better ideas?. > For (even large) arrays where (almost) all elements are initialized to a non-default value, I think it would be correct to place them all as initializers. For that case (or maybe aways?) perhaps the cutoff could be log2(length) relative, since array-sizes can obviously vary wildly.\nIn the case of the example I mentioned above, this would be log2(65536) =16, which would not trigger, because there are more than 16 non-default values in the list. Or, maybe I am misunderstanding how the cut-off would be implemented in case of log2.. IL Ast of the rg1 initializer (used different numbers for clarity):\n[0] stloc S_2(newarr ConsoleApp2.C+V3f(ldc.i4 3, ldc.i4 3))\n[1] stloc S_9(newobj V3f..ctor(ldc.f4 1, ldc.f4 1, ldc.f4 1))\n[2] stobj ConsoleApp2.C+V3f(ldelema ConsoleApp2.C+V3f(ldloc S_2, ldc.i4 0, ldc.i4 0), ldloc S_9)\n[3] stloc S_16(newobj V3f..ctor(ldc.f4 2, ldc.f4 2, ldc.f4 2))\n[4] stobj ConsoleApp2.C+V3f(ldelema ConsoleApp2.C+V3f(ldloc S_2, ldc.i4 0, ldc.i4 1), ldloc S_16)\n[5] stloc S_23(newobj V3f..ctor(ldc.f4 3, ldc.f4 3, ldc.f4 3))\n[6] stobj ConsoleApp2.C+V3f(ldelema ConsoleApp2.C+V3f(ldloc S_2, ldc.i4 0, ldc.i4 2), ldloc S_23)\n[7] stloc S_30(newobj V3f..ctor(ldc.f4 2, ldc.f4 2, ldc.f4 2))\n[8] stobj ConsoleApp2.C+V3f(ldelema ConsoleApp2.C+V3f(ldloc S_2, ldc.i4 1, ldc.i4 0), ldloc S_30)\n[9] stloc S_37(newobj V3f..ctor(ldc.f4 3, ldc.f4 3, ldc.f4 3))\n[10] stobj ConsoleApp2.C+V3f(ldelema ConsoleApp2.C+V3f(ldloc S_2, ldc.i4 1, ldc.i4 1), ldloc S_37)\n[11] stloc S_44(newobj V3f..ctor(ldc.f4 4, ldc.f4 4, ldc.f4 4))\n[12] stobj ConsoleApp2.C+V3f(ldelema ConsoleApp2.C+V3f(ldloc S_2, ldc.i4 1, ldc.i4 2), ldloc S_44)\n[13] stloc S_51(newobj V3f..ctor(ldc.f4 3, ldc.f4 3, ldc.f4 3))\n[14] stobj ConsoleApp2.C+V3f(ldelema ConsoleApp2.C+V3f(ldloc S_2, ldc.i4 2, ldc.i4 0), ldloc S_51)\n[15] stloc S_58(newobj V3f..ctor(ldc.f4 4, ldc.f4 4, ldc.f4 4))\n[16] stobj ConsoleApp2.C+V3f(ldelema ConsoleApp2.C+V3f(ldloc S_2, ldc.i4 2, ldc.i4 1), ldloc S_58)\n[17] stloc S_65(newobj V3f..ctor(ldc.f4 5, ldc.f4 5, ldc.f4 5))\n[18] stobj ConsoleApp2.C+V3f(ldelema ConsoleApp2.C+V3f(ldloc S_2, ldc.i4 2, ldc.i4 2), ldloc S_65)\nCurrently we're unable to build an array initializer for this because newobj cannot be moved over ldelema due to side-effects. @dgrunwald do we need a special case for this?. Thanks for clearing that up! I forgot that we had this flag. I remember discussing this a few years back, when we got started with the newdecompiler branch.\nYes, the DelayExceptions flag, was missing from the ILAst output, and ILReader did not set the flag on Get/Set methods used with arrays. Should I set the flag on instructions inside an array initializer? I think it will not be of much use anymore.. > Or, am I missing something in the API that facilitates this already?\nWhich version of the decompiler did you try to use? In 4.x you can use PEFile to achieve this.. I think this is resolved. If you have any further questions, please open a new issue. Thanks!. Can you please post the binary? Thank you very much! . No, I think that should suffice :)... thank you!. Triage: The assertions no longer trigger, however the misdetection of the fixed statement still remains for the Roslyn compiled code.. The problem was a recursive local function that was mistreated as delegate construction.\nCurrently I am unable to add a test case for this, because we have yet to fully support local functions.\nThe problem is that the compiler generates the recursive local function as a private method inside the \"display class\", which is then called from the outer method. However, calling a private method inside a nested class from the outer class is illegal in C#.. As a workaround you can set DecompilerSettings.LoadInMemory to true.. Currently there is no CSharpDecompiler(string) ctor... however we can override the LoadInMemory setting in all ctors that take a filename.. Fixed in 14f3544.. Duplicate of #1326 and/or #1327. This is strange, because there should be no mscorlib with major version == 3. Would it be possible for you to provide an example where the current implementation fails? Thank you!. Thank you for providing a pull request to fix the problem!. I have refactored your code a bit to include support for CF 2.x as well.. It seems, the assertion failure happens because a nullable transform fails, when the T of Nullable is an unknown generic type.\nGenerated code after fail: The literal 4 causes the assertion.\nLicenseState value2 = (LicenseState)(resultWithDescription.Result.IsSuccessful() ? 4 : (val.HasValue ? ((object)((Pair<LicenseState, string>*)(long)(IntPtr)(void*)val.Value)->First) : ((object)5)));\nExpected code (no assertion, with missing reference added)\nLicenseState value2 = resultWithDescription.Result.IsSuccessful() ? LicenseState.USED : (pair.HasValue ? pair.Value.First : LicenseState.NOT_APPLICABLE);\n. I cannot reproduce this in the latest version.. Fixed in 29527b8.. Fixed in #1419. There are two possible solutions:\n1) Implement the escape sequences as transformation when loading the module into the type system.\n2) Add transformations on top of the decompiler and in the UI.\nI would prefer the first, because otherwise it is easy to miss something.. Thank you for your contribution!. Currently, there are no plans to introduce nameof expressions in the decompiled output, because things can get quite complicated. For more information on which language features we are focusing on currently, see #829.. @sungam3r Oh sorry, I misunderstood. Normally people ask about decompilation quality, that's why I jumped conclusions.\n@siriak Thank you for providing a pull request.. Thank you for the contribution!\npython BuildTools\\tidy.py\n.\\ILSpy\\FilterSettings.cs:117: Line starting with spaces. Use tabs for indentation instead!\n.\\ILSpy\\FilterSettings.cs:118: Line starting with spaces. Use tabs for indentation instead!\n.\\ILSpy\\FilterSettings.cs:119: Line starting with spaces. Use tabs for indentation instead!\n.\\ILSpy\\FilterSettings.cs:120: Line starting with spaces. Use tabs for indentation instead!\nTidy check: failed\nCommand exited with code 1\nWe require all indentation to be done with tabs.. Thank you for helping out with this, but please note that the code base of ILSpy (the WPF part, not the decompiler engine) uses an older style - pre C# 5 in most parts. It is not even updated to use async-await or MVVM.\nI am not sure if one single pull request will be enough to update it all.. Is this finished and can be merged?. Thank you very much!. > Note: ILSpy v3.2 decompiles this method OK\nSeems this is caused by ReduceNestingTransform, which is new in 4.0. It's getting confused by the dead switch statement inside the loop.\nbefore:\nwhile (true)\n{\n    switch (6)\n    {\n    case 0:\n        break;\n    default:\n        c6940f2053cd2cf72c9b671a3fb8f13c8.c0283cbf620cd329b79210ae964352af7((IntPtr)(ccbdce34c09ffb6458dccd4b0d005ca07 - 10), ce68f1c75ffa7c35bce37fc743b788d45.ce968f63166e806a24af095ff8b06470d, IntPtr.Zero, (IntPtr)(void*)value, 300);\n        cf8d3be8552dfd1f5602849db7c50e532((IntPtr)(void*)value);\n        return;\n    }\n}\nafter:\nwhile (true)\n{\n    switch (6)\n    {\n    case 0:\n        continue;\n    }\n    c6940f2053cd2cf72c9b671a3fb8f13c8.c0283cbf620cd329b79210ae964352af7((IntPtr)(ccbdce34c09ffb6458dccd4b0d005ca07 - 10), ce68f1c75ffa7c35bce37fc743b788d45.ce968f63166e806a24af095ff8b06470d, IntPtr.Zero, (IntPtr)(void*)value, 300);\n    cf8d3be8552dfd1f5602849db7c50e532((IntPtr)(void*)value);\n    return;\n}. Related #1242. > Not critisizing, but from end-user older IL3.2 was more robust or so...\nFun fact, I just decompiled 147 4.0 GAC assemblies using both 3.2 and 4.0b3 and guess what, 3.2 threw a lot of assertions, and 4.0b3 threw not a single one.\nSo these perceived instabilities might be due to you decompiling C++/CLI or obfuscated assemblies, which we never said we'd officially be able to support. In terms of correctness, I believe that the decompiler engine in both 3.x and 4.x is a huge leap forward, we just cannot support every little detail yet.. Thank you very much for testing and providing bug reports! We really appreciate that!\nHave a successful year 2019 too! \ud83d\ude04 . I cannot say for sure, but it seems that the decompiler is missing some references. Without the property or event definition we cannot say for sure whether a method is a property or event accessor, that's why we cannot use property/event access syntax.\nCurrently we do not have some smart algorithm that tries to infer that information from the method name. Looking at the current code, this would take some more work to get done.. The results of analysis depend on the assemblies you have added to the current list. I am not sure how we could debug this issue without knowing which assembly causes the analyzer to fail. I could take a look at the memory dump... please send it to siegfried.pammer@gmail.com. Thank you!. Any update on this?. Thank you for sending the memory dump. Unfortunately, the relevant exception/error info is missing. However, there's good news: Just now, I was able to reproduce the exception (or a similar exception) by playing around with the beta2. Seems this was fixed in 51ab9a7b99a43ba387d82855860891335d986a76 (beta3 or newer).\nThank you for reporting this anyway! Feedback is always welcome!\n\nthanks for what you guys do!\n\nThank you for using ILSpy!. possible duplicate of #1377. Verified.. One problem:\ncsharp\npublic class Test\n{\n    public static int a = 4;\n    static Test()\n    {\n    }\n}\ngets decompiled as:\ncsharp\npublic class Test\n{\n    public static int a;\n    static Test()\n    {\n        a = 4;\n    }\n}\nThe problem is, as soon as there is a static ctor defined in a type, the beforefieldinit flag no longer is emitted. The current transform does not transform type initializers that do not have the flag set on their type.. Could it be that you uploaded the wrong test file? I cannot find ArrIniterx in the executable...\nEdit: never mind... didn't look closely. Thanks!. The problem is that the search term contains spaces, which ILSpy then interprets as two independent search terms. You can now use \" to force ILSpy to parse the search term correctly. Note that when using regular expressions you have to wrap the whole expression in \", i.e. \"/regularExpression/\". Note that closing quotes and slashes are optional.. The problem is: as soon as there are multiple search terms there is no way to activate full name search. So both search terms are only compared against the method names rather than full names.\nhttps://github.com/icsharpcode/ILSpy/blob/98261c775f4e10fe1f241e43e585c6fdb7ae6441/ILSpy/Search/AbstractSearchStrategy.cs#L29-L41\nShould I add\ncsharp\nfullNameSearch = terms.Any(t => t.Contains(\".\"));\nin the other case?. A simple test case:\n```csharp\nclass Program\n{\n    dynamic GetDynamic()\n    {\n        return null;\n    }\npublic async Task<dynamic> TestDynamicWithAsync()\n{\n    dynamic value = await GetDynamic();\n    value.UseMe();\n    return value;\n}\n\n}\n```. > Note: v3.2 rls decompiles OK\nVersion 3.2 produces the same assertion as 4.0.\nThe problem is that the isinst instruction (in C# it is used for both, expr is T and expr as T) accepts reference, nullable value types and non-nullable value types. However, in C# as with non-nullable value types is not permitted. Not sure how we should solve this, because a regular cast has different semantics.. Unfortunately, your suggestion is not possible in expression context. We'd have to use a conditional expression like expr is T x ? ... use x ... : no idea what do do here.. The one thing I came up with: we can decompile it as expr as T but add a comment // use of isinst not supported in C# or so. Of course it will never be compilable.... > By the way, what is the difference between: Show internal types and members and Show all types and members\nShow all types and members does not hide compiler-generated types and members from the tree view. Also, property and event nodes have child nodes for their accessors.. Can you please post an example binary?\nThe static constructor should only be hidden by ILSpy if it was not explicitly defined in the source code. We only hide the cctor if all statements could be moved to field initializers and if the beforefieldinit flag was set.\nTake a look at these three cases:\n``csharp\n    public class ImplicitStaticCtor\n    {\n        private static readonly string someField = \"Test\";\n        // no static ctor\n        // it is emitted by the compiler and the type is markedbeforefieldinit`\n        // see IL view.\n    }\npublic class ExplicitStaticCtor\n{\n    private static readonly string someField = \"Test\";\n\n    static ExplicitStaticCtor()\n    {\n        // no statements\n        // `beforefieldinit` flag is not emitted on the type\n    }\n}\n\npublic class ExplicitStaticCtorWithInitializer\n{\n    private static readonly string someField;\n\n    static ExplicitStaticCtorWithInitializer()\n    {\n        // moved initializers\n        someField = \"Test\";\n        // `beforefieldinit` flag is not emitted on the type\n    }\n}\n\n```\nPlease note that the decompiler cannot distinguish the case in ExplicitStaticCtor and ExplicitStaticCtorWithInitializer. It will always emit a static constructor, because the beforefieldinit flag is not set on the type.\nGenerally hiding the static constructor on a type is not wrong, because the generated IL is different if it is not explicitly declared.\nThis might be wrong in your case, however, I can only analyze your specific case, if you provide the binary for further investigation. Thank you very much!. Seems like the \"Show internal types and members\"/\"Show all types and members\" option is turned off.\n\nIf it is disabled, all private/internal code is hidden from the tree view, but still present in the code view. Static constructors are hidden, because they are always private.. LGTM, thanks!. Reactivation of \"show internal types and members\" should suffice in this case. Yes, this is a breaking change, because the setting went from bool to tri-state.. Yes, this is a breaking change, because the setting went from bool to tri-state (enum).\nI didn't want to introduce extra code to migrate the setting, because it would only be executed once.. > I write several plugins for ILSpy, but I don't want to migrate from Cecil to SRM, so I usually use ILSpy4 and old ILSpy at the same time.\nWhat exactly is missing in the decompiler type system, that makes it hard for you to update your plug-ins to version 4?. > How about checked Show internal types and members by default? I think this setting is used mostly.\nThat was the original default value of the option in version 3. I fixed the default value of the option. Sorry for the inconvenience caused!\nNote that we cannot support options of both version 3 and 4 at the same time, because the settings file usually gets overwritten. You would have to use the \"/config:\" command line option added in #1360.. >> We have a high-level type system (ICSharpCode.Decompiler.TypeSystem) wrapped around SRM. Anytime you need Resolve(), that's a sure sign you should be working with the type system and not SRM directly. (only the type system provides a resolve implementation)\n\nI find this in the wiki, what is Resolve()? Is it an extension method? Should I import some namespace to find it? Which namespace and type?\n\n\"Resolve\" refers to Cecil's \"Resolve\" methods.. I cannot reprodue this.. Can you check whether the BAML decompiler plugin is loaded by ILSpy? Maybe the plugin gets blocked?. Currently, there is no such option. You can only achieve this by creating a custom assembly list and manually clearing that before exiting ILSpy.\nWhat is your use-case for this?. Yes please, pull requests are very welcome!. Thank you very much!. I am unable to reproduce this. Could you please provide some more information? Thank you!. Sorry, but in the code you posted, what is the purpose of iterating over all type references?\nThe AssemblyRef table should return all assembly references used in the module. There can be no assembly reference used in the TypeRef table, that is not listed in the AssemblyRef table. This means that the first loop should suffice. At least that's how Microsoft specified the format in ECMA-335.\nEDIT: Sorry, I misunderstood your code. You are trying to get all transitive references used by the \"main\" assembly. I will soon provide an example.\n\nWhat is the meaning of 'Direct'?\n\nThis means that the property returns the immediate parent types of the type. For\nA : I1, I2\nB : A, I3, I4\nC : B, I5, I6\nand invoked on C this would return B, I5 and I6.\n\nBy the way, why there're so many way to get base type:\nDirectBaseTypes\nGetAllBaseTypeDefinitions\nGetAllBaseTypes\nGetNonInterfaceBaseTypes\n\nBecause they're useful extension methods:\n- GetAllBaseTypes: Traverses the inheritance hierarchy and returns all base types. For the previous example (invoked on C), this would return System.Object, A, I1, I2, B, I3, I4.\n- GetAllBaseTypeDefinitions: Same as GetAllBaseTypes, but returns ITypeDefinition instead of IType, that means, it invokes IType.GetDefinition() on all base types.\n- GetNonInterfaceBaseTypes: Same as GetAllBaseTypes, but returns base classes only. This means for the previous example it would return System.Object, A and B.\nI hope this clears things up a bit!. > Is the order determined?\nIs 'B' allways the first one invoked on C in these 4 methods?\nWhen you use DirectBaseTypes, yes, then that's the case.\nIf you use any of the other 3, then the order is defined as follows:\nFrom the documentation: (https://github.com/icsharpcode/ILSpy/blob/master/ICSharpCode.Decompiler/TypeSystem/TypeSystemExtensions.cs#L44)\n\nThe output is ordered so that base types occur before derived types.\n\nWhich means: System.Object is the first one.\n\nIf A I3 I4 is defined in one assembly, but can not found, what happened?\n\nIf a type cannot be found, an instance of the UnknownType class is returned. Note that calling GetDefinition on an UnknownType returns null, because there is no definition.\nI hope this helps!. I came up with a solution to your problem, which does not work exactly the same, but should yield similar enough results. The main problem with emulating your approach is that our type system does not provide the \"parent module\" for unknown types. @dgrunwald is there a sensible approach to including more metadata for unknown types in the TS?\nYou could of course duplicate a lot of resolver logic from MetadataModule, but that would be error-prone.\nAn alternative solution would be using the CreateCecilObjectModel extension method. \nThe following code returns all ~transitive~ references of an assembly:\ncsharp\npublic void Execute(TextViewContext context)\n{\n    if (context.SelectedTreeNodes == null)\n        return;\n    AssemblyTreeNode node = (AssemblyTreeNode)context.SelectedTreeNodes[0];\n    var asm = node.LoadedAssembly.GetPEFileOrNull();\n    if (asm != null) {\n        var compilation = new DecompilerTypeSystem(asm, node.LoadedAssembly.GetAssemblyResolver());\n        string output = string.Join(Environment.NewLine,\n            compilation.ReferencedModules\n                .Select(m => m.AssemblyName)\n                .Distinct(StringComparer.OrdinalIgnoreCase)\n        );\n        MessageBox.Show(output);\n    }\n}\nThe downside is that it includes references of B, that are not \"required\" by assembly A.. This will do what you are looking for. Note that it traverses the whole graph of references and it might return more assemblies than you might expect it to.\n(null/error checking omitted for brevity)\ncsharp\nstatic HashSet<string> GetTransitiveReferences(LoadedAssembly assembly)\n{\n    HashSet<string> refs = new HashSet<string>(StringComparer.OrdinalIgnoreCase);\n    HashSet<string> processedReferences = new HashSet<string>(StringComparer.OrdinalIgnoreCase);\n    Queue<PEFile> files = new Queue<PEFile>();\n    var resolver = assembly.GetAssemblyResolver();\n    files.Enqueue(assembly.GetPEFileOrNull());\n    while (files.Count > 0) {\n        var file = files.Dequeue();\n        if (!processedReferences.Add(file.Name))\n            continue;\n        foreach (var r in file.AssemblyReferences) {\n            refs.Add(r.Name);\n            PEFile reference = resolver.Resolve(r);\n            if (reference != null)\n                files.Enqueue(reference);\n        }\n    }\n    return refs;\n}. > Do you test it? Your code will get 11 assebmlies in my example:\nYes, I mentioned that in my previous reply.\n\nWhat I need is just how to get all type references of one assembly, and how to resolve type reference to type definition in order to know which assembly defined these types.\n\nThen use this:\nHowever: as previously explained, this will not work with references that cannot be found!\n```csharp\nstatic HashSet GetTransitiveReferences(LoadedAssembly assembly)\n{\n    HashSet refs = new HashSet(StringComparer.OrdinalIgnoreCase);\nvar genericContext = new ICSharpCode.Decompiler.TypeSystem.GenericContext();\nICompilation c = new SimpleCompilation(assembly.GetPEFileOrNull(), CollectReferencedAssemblies(assembly));\n\nforeach (var typeRefHandle in c.MainModule.PEFile.Metadata.TypeReferences) {\n    var type = ((MetadataModule)c.MainModule).ResolveType(typeRefHandle, genericContext);\n\n    foreach (var baseType in type.GetAllBaseTypeDefinitions()) {\n        refs.Add(baseType.ParentModule.AssemblyName);\n    }\n}\n\nreturn refs;\n\n}\nstatic IEnumerable CollectReferencedAssemblies(LoadedAssembly assembly)\n{\n    HashSet processedReferences = new HashSet(StringComparer.OrdinalIgnoreCase);\n    Queue files = new Queue();\n    var resolver = assembly.GetAssemblyResolver();\n    files.Enqueue(assembly.GetPEFileOrNull());\n    while (files.Count > 0) {\n        var file = files.Dequeue();\n        if (!processedReferences.Add(file.Name))\n            continue;\n        foreach (var r in file.AssemblyReferences) {\n            PEFile reference = resolver.Resolve(r);\n            if (reference != null) {\n                files.Enqueue(reference);\n                yield return reference;\n            }\n        }\n    }\n}\n```. > It doesn't work also.\n\ncall GetAllBaseType on DataTable contains 'IListSource', but it's UnknownType, so GetAllBaseTypeDefinitions doesn't contain it.\nIListSource is defined in System.dll, and ILSpy can find this dll, why is 'IListSource' UnknownType?\n\nThe DecompilerTypeSystem does not contain transitive references, that's why you have to use:\ncsharp\nICompilation c = new SimpleCompilation(assembly.GetPEFileOrNull(), CollectReferencedAssemblies(assembly));\nas posted above.. The DecompilerTypeSystem is used for decompilation and only contains information necessary for the decompiler. DecompilerTypeSystem is a specialized version of SimpleCompilation: if you need \"different\" special behavior, you should use SimpleCompilation.\nFor example: the \"single-assembly-mode\" is achieved by using\ncsharp\nnew SimpleCompilation(\n    module.WithOptions(TypeSystemOptions.Default | TypeSystemOptions.Uncached | TypeSystemOptions.KeepModifiers),\n    MinimalCorlib.Instance) // pass minimal corlib instead of references\n\nit says DecompilerTypeSystem is more powerful than SimpleCompilation\n\nthe wiki does not say that DecompilerTypeSystem is more powerful - DecompilerTypeSystem is more specialized and does resolve references at creation. Resolving the references at creation is indeed the only thing it does \"extra\". It is a small extension of SimpleCompilation.\nEDIT: you could say that DecompilerTypeSystem is \"more powerful\" than the type system used in the UI, yes.. > When call CollectReferencedAssemblies, ILSpy may load 30+ dlls(even if my program only ref to mscorlib and System.Data)\nYou could use UniversalAssemblyResolver instead of GetAssemblyResolver() so the resolver is no longer connected to the ILSpy UI (the assemblies no longer appear in the assembly list).\n\nBy the way, why the results of GetAllBaseTypes contains itself?\n\nI don't know the reason for this, maybe @dgrunwald remembers the reason.. @dgrunwald Can this be merged?. You should not rely on syntax nodes to identify a symbol. You can use the GetSymbol or GetResolveResult extension methods. For example var mrr = astNode.GetResolveResult() as MemberResolveResult; if (mrr != null) return mrr.Member.IsStatic;.\nAlso, if it's an invocation, there is the InvocationResolveResult.. Yes, that was missing. I fixed that.. ErrorResolveResult is only returned, if there's no annotation available.\nI tested the code you posted above and it returns an ILVariableResolveResult as expected.\ninvocationExpression.Target.GetResolveResult()\n{[ILVariableResolveResult System.Func`1[[System.String]]]}\n    ConstantValue: null\n    IsCompileTimeConstant: false\n    IsError: false\n    Type: {System.Func`1[[System.String]]}\n    Variable: \"f\" : {System.Func`1[[System.String]]}\n    @type: {System.Func`1[[System.String]]}\nCan you please post the code that causes this behavior? Thanks!. Yes, that is expected.\nThe information is stored on the InvocationExpression. That is because the name of the method alone is not enough to identify the method. We only could attach a MethodGroupResolveResult to the identifier, but currently we do not do this.. Do you need any other help? Can this be closed?. LGTM, thank you very much!. Thank you for the proposed fix. However, the old BAML decompiler was removed in #1419. Therefore this no longer applies.. Sorry! The wiki page did not get updated for the final release of ILSpy 4.0.\nIt is updated now. If you have further questions, feel free to ask!. Thank you for the proposed fix. However, I fixed #1412 by explicitly closing the stream before the process exits. I think it is better to handle this at the caller's side than each callee.. I just tested this and it works on my machine. I don't see why it would not work with ILSpy. We're using .NET System.IO APIs to read and write files.. See https://github.com/icsharpcode/ILSpy/issues/1328#issuecomment-447651862. Sorry, but I cannot reproduce this. It seems that your Visual Studio 2019 installation is not working correctly. Have you tried googling the error message?. This is caused by huge array initializers in CodeConvert..ctor:\n1) 41670 elements (Host2UTF_tbl)\n2) 65536 elements (EBCDIC_tbl)\n3) 65536 elements (BIG5_tbl)\nThese are expanded from RuntimeHelpers.InitializeArray, so not generating the initializer syntax is not possible. I think the main problem is the code that converts ILAst to C# code as detailed in #1202.. Decompiling the CodeConvert class is now down to 14 seconds in debug build on my machine.. Can you please provide the assembly that causes the problem? Thank you very much! . Any update on this? Thank you!. That is unfortunate. By \"dialog box\" you mean the \"wait bar\" (i.e. the \"Decompiling\" text plus the progress bar)? Or are you talking about the \"Save file\" dialog box?. Thank you for providing the file. Are you using a release or debug build of ILSpy to decompile the code? Keep in mind that a debug build is excessively slower than a release build due to a massive amount of correctness checks that are performed after each step.. A release build completes after 117,4 seconds on my machine.. Performance analysis: There are two methods that take a long time:\n CLR_Library_CS.ChineseCommercialCode.ChinaChineseCommercialCodeConverter..ctor\n CLR_Library_CS.ChineseCommercialCode.TaiwanCommercialCodeConverter..ctor\nThe majority of time is spent inside ILInlining.InlineOne at block.Instructions.RemoveAt(pos);.\n@dgrunwald is it possible to defer the update of the child indices in RemoveAt?\nThe structure of the method looks similar to a collection initializer. So there are a lot of calls to an Add method.. I've tried downgrading the decompiler codebase from 7.2 to 7.1, but we're using too many new language features in too many places. Sorry, this is not going to happen.. Yes, this is definitely the way to go. Could you explain what this feature should look like? Thank you!. > but I could not see any note from ILSpy release notes https://github.com/icsharpcode/ILSpy/releases Maybe the NuGet package should have a separate release notes to highlight such changes.\nThere is nothing written in the release notes, because ILSpy 5.x is not yet released. I don't know which version of ILSpy @GoddessLuBoYan used to copy the libraries from, but it seems to be a nightly build.. Could you post a small example I could use as unit test? I found some bugs already through our unit tests, but seems there's still more. Thank you!. Thank you very much!. Currently we do not have an option to replace invalid identifiers in output. Are you using ILSpy or a custom tool based on the decompiler engine for this task?. I have added the missing option for this. Please note, however, that lambda syntax will always be used if anonymous types are used. You will have to manually convert anonymous types to named types.. > There're asserts also in RebelBetting.Client.Forms.MainForm.\nFixed in 40b6f0c7bf7a776538efab540b82d4ec7f7fdf65.. This is no longer the case in latest master (5.0.0.4683-preview1).. Without the assembly or baml file this will be hard to fix. Could you please provide the file?\nThank you very much!. Are you looking for an option in the ILSpy UI or in the decompiler library?. > or might it \"just\" be that the VS debugger hangs on to instances of enumerators even after the quick-watching is done?\nFrom my experience it's exactly that, I think it's nothing to worry about.\nThe only known bug which triggers this assertion without the debugger being attached is #1391.. Can this be reproduced using a Microsoft compiler? If not, it would be very helpful, if you could provide a simplified version of the original IL as file. I would like to add it to our tests. Thank you very much!. Thank you for providing the IL as test case.\n@dgrunwald Do you think it would make sense to recombine ILVariables with the same name and index after the ILAst transformation is finished?\nEDIT: Recombining all variables with the same name and index would not solve the problem, because it is basically the same as the condition below. We would have to combine variables with the same name and index that will be combined into a single declaration.\nOf course we can fix this by adding the following check to the transform:\ncsharp\nif (itemVariable.Function.Variables.Any(v => v != itemVariable && v.Name == itemVariable.Name))\n    return null;\nHowever, this would prevent us from transforming two separate loops that use an \"item\" variable with the same name. Which is perfectly legal in C#.\nOr is there some logic in DeclareVariables I could reuse here? As far as I understand DeclareVariables has to solve this exact problem in order to avoid declaring multiple variables with the name num2.. The following code triggers the assertion when compiled in release mode.\n```csharp\nclass Program\n{\n    static async Task GetIntegerSumAsync()\n    {\n        await Task.Delay(100);\n        var items = GetItems();\n        int sum = 0;\n        foreach (var item in items)\n        {\n            sum += item;\n        }\n        return sum;\n    }\nprivate static IEnumerable<int> GetItems()\n{\n    throw new NotImplementedException();\n}\n\n}\n```\nThe problem is that the async transform accidentally marks the IEnumerator<T>/IEnumerable<T> variable as stack slot. Going from local to stack slot is fine, but going from stack slot to \"using local\" is not allowed.. ILAst difference: The if condition uses \"implicit\" != 0. In the second case the comp != 0 is explicit and the 0 gets converted to an enum member.\nI think (x & flag) != 0 would be more idiomatic C# like (x & flag) == flag. We will have to add a special case for this in the ExpressionBuilder.. @dgrunwald What do you think?. Is this a workaround for the tooling bug with .NET Core Test Runner, that I mentioned in my rant?. Thanks for explaining and answering my follow-up question about AutoGenerateBindingRedirects before I even posted it.. What's the reason behind this build target?. The AssemblyInfo.cs files are not generated in my fresh local test repository. It seems VS does not execute the BeforeBuild tasks anymore.\nI fixed this by using <Target Name=\"PreBuild\" BeforeTargets=\"PreBuildEvent\"> as generated by VS (added a dummy task using the UI) instead of <Target Name=\"BeforeBuild\">, however then UpdateAssemblyInfo.exe will be executed once for each target framework, which is not only unnecessary, but, due to parallel build of both target frameworks we were running into race conditions on the build server. (Seems to work on my (slow) machine.). ah, yes.... The ExpressionTreeConverter should run before IntroduceQueryExpressions, this is necessary because query expressions are sometimes compiled into expression trees.. We don't need *.playlist files checked in. Can you please remove them?. You could extract the inner loop into its own (local) method and get rid of the goto. That would make it easier to read.. You can remove this and instead call base.VisitCall(inst) at the beginning of the method, just like all the other overrides do.. Putting the logical and operator at the beginning of the line would make it easier to read the code.. I think !(v.Kind == VariableKind.Local || v.Kind == VariableKind.StackSlot) should suffice here.. I think it would be better to use call.Parent is CallInstruction parentCall instead of using the elvis operator here.. Feel free to use ToArray() to create a temporary copy.. You are using the same TypeSystemAstBuilder in all cases. This is the cause for bugs like this:\n379      (-)       ExpressionTrees.ToCode<bool>(ExpressionTrees.X(), () => new XmlReaderSettings {\n      313 (+)       ExpressionTrees.ToCode<bool>(ExpressionTrees.X(), () => new ExpressionTrees.XmlReaderSettings {\n1) You are not adding any UsingScope to the CSharpTypeResolveContext, thus the TSAB will always generate full names for items from other namespaces.\n2) context.DecompiledTypeDefinition and context.DecompiledMember are not what you think they are. When decompiling a full assembly, they both return null. See https://github.com/icsharpcode/ILSpy/blob/master/ICSharpCode.Decompiler/CSharp/Transforms/TransformContext.cs#L40\nIn order to properly handle this, you will have to do something like this: https://gist.github.com/siegfriedpammer/1d3fe34ec2d7101f63dc1b813d1efafd\nAfter fixing this, you will have to remove a lot of unnecessarily fully-qualfied names in your test cases.\n. I just tested with char literals and interpolated strings... seems fine to use them.\nAs for conditional expressions: seems they're only valid when wrapped in parentheses.. You should probably check, if the method is the entrypoint as well: method.Module.Assembly?.EntryPoint == method. Ideally we should check whether the method body matches the Main(args).GetAwaiter().GetResult(); pattern, but I think this is not easily possible in a static context.. No need to use GetCecil here... the first parameter already is the correct Cecil FieldDefinition.. Why did you replace the while loop with a for loop? A for loop without increment is a bit confusing at first sight.. Well... I guess we can leave it like it is, I don't think it's worth the time to change it back.. Actually, I think it would be much better to follow the convention and allow a prefix per searchTerm... The prefixes followed by a colon are only for the entity selection. +, - and = control the text parsing mode... I will add ~ as a new \"per search term prefix\"....  If that's OK with you... ?. Please use member.DeclaringType.IsReferenceType != false, using Value without checking HasValue will lead to exceptions.. > Float literals are exact\nThat's what I thought, until I discovered this:\n```csharp\n        const double Doubles01 = 3.1415926535897931;\n        const double Doubles02 = 3.141592653589793;\n        const double Doubles03 = 3.14159265358979;\n        const double Doubles04 = 3.1415926535897;\n        const double Doubles05 = 3.141592653589;\n        const double Doubles06 = 3.14159265358;\n        const double Doubles07 = 3.1415926535;\n        const double Doubles08 = 3.141592653;\n        const double Doubles09 = 3.14159265;\n        const double Doubles10 = 3.1415926;\n        const double Doubles11 = 3.141592;\n        const double Doubles12 = 3.14159;\n        const double Doubles13 = 3.1415;\n        const double Doubles14 = 3.141;\n        const double Doubles15 = 3.14;\n        const double Doubles16 = 3.1;\n        const double Doubles17 = 3;\n    const float Floats1 = 3.14159274f;\n    const float Floats2 = 3.1415927f;\n    const float Floats3 = 3.141592f;\n    const float Floats4 = 3.14159f;\n    const float Floats5 = 3.1415f;\n    const float Floats6 = 3.141f;\n    const float Floats7 = 3.14f;\n    const float Floats8 = 3.1f;\n    const float Floats9 = 3;\n\n```\ngets compiled to this:\n.field private static literal float64 Doubles01 = float64(3.1415926535897931) // ??\n    .field private static literal float64 Doubles02 = float64(3.1415926535897931) // ??\n    .field private static literal float64 Doubles03 = float64(3.14159265358979)\n    .field private static literal float64 Doubles04 = float64(3.1415926535897)\n    .field private static literal float64 Doubles05 = float64(3.141592653589)\n    .field private static literal float64 Doubles06 = float64(3.14159265358)\n    .field private static literal float64 Doubles07 = float64(3.1415926535)\n    .field private static literal float64 Doubles08 = float64(3.141592653)\n    .field private static literal float64 Doubles09 = float64(3.14159265)\n    .field private static literal float64 Doubles10 = float64(3.1415926)\n    .field private static literal float64 Doubles11 = float64(3.141592)\n    .field private static literal float64 Doubles12 = float64(3.14159)\n    .field private static literal float64 Doubles13 = float64(3.1415)\n    .field private static literal float64 Doubles14 = float64(3.141)\n    .field private static literal float64 Doubles15 = float64(3.14)\n    .field private static literal float64 Doubles16 = float64(3.1)\n    .field private static literal float64 Doubles17 = float64(3)\n    .field private static literal float32 Floats1 = float32(3.14159274) // ??\n    .field private static literal float32 Floats2 = float32(3.14159274) // ??\n    .field private static literal float32 Floats3 = float32(3.141592)\n    .field private static literal float32 Floats4 = float32(3.14159)\n    .field private static literal float32 Floats5 = float32(3.1415)\n    .field private static literal float32 Floats6 = float32(3.141)\n    .field private static literal float32 Floats7 = float32(3.14)\n    .field private static literal float32 Floats8 = float32(3.1)\n    .field private static literal float32 Floats9 = float32(3)\nNot sure what's causing this.... About ILRanges: I am not quite sure which ILRange I should use for the final leave instruction. The original code contains two ret instructions. Which offset makes more sense for the combined leave?. ",
    "christophwille": "I am against this for a reason: it effectively doubles the testing effort - every commit has to be tested (not only built) against two framework versions.\n. @mkrueger prepared a demo project for our SharpDevelop Developer Days in November outlining how a multi-targetting project could look like.\nWe are leaning towards WPF for Windows, and having one head for Mac/Linux. But note that the core team is working on vNext of the underlying decompiler architecture, so it is a good time to chime in if you have xplat chops especially with xwt.. So far, even /newdecompiler isn't netstandard2 (might work though). When/if that lands, xplat UI should be a lot easier to pull off - re:VSCode, haven't ever looked into what it would take to implement a rather complex UI (in terms of interaction between JS and .NET, think memory, think the left-hand-side tree). \nIf anyone has infos (eg a \"similar\" existing extension), that would be welcome. What I found so far and might pertain to an implementation is\nhttps://github.com/Microsoft/vscode-mssql/wiki/architecture. We are working hard on netstandard 2.0 (/newdecompiler branch) and it should land very, very soon. That should allow .NET Core and make this a lot more streamlined across platforms (haven't checked what mssql extension is doing - Mono too?).\nRelated https://github.com/icsharpcode/ILSpy/issues/831. @PoroCYon we are definitely not targeting low-end machines, neither on Windows (net461 will be the future min fw) nor for any other platform we might support (.NET Core itself has some requirements). The \"average\" ILSpy customer does have an above-average computer (as compared to Joe Average).. Like I said, ILSpy is not a one-size-fits-all app. However, there is no reason why multiple frontends couldn't be built, including a command line version (also interesting for automation scenarios btw).. Please read https://github.com/icsharpcode/ILSpy/issues/831#issuecomment-326868618 Again, the package is intended for those that want to get started with xplat netcoreapp support. @jeremymeng please test, and @andreif if you want to test for console, that would be great.. We have updated https://github.com/christophwille/ilspy-console-netcoreapp/ to \"wean everyone off of CSharpLanguage\". As you can see in the animated GIF, it can run as a self-contained executable on Mac + it decompiles itself (being a netcoreapp this is new, something that wasn't possible last week). Self-contained deployment (scd) is the farthest we will go at the moment (remember: the cmd line uses the -alpha2 package and we haven't yet reached the functionality level of the decompiler for master merge) - there are bigger fish to fry. Having said that: the future might be https://github.com/dotnet/corert. Please note that the ilspycmd project is now officially supported in our main repo:\nhttps://github.com/icsharpcode/ILSpy/tree/master/ICSharpCode.Decompiler.Console\n@jeremymeng Command line and VS \"proper\" addin are already part of our main repo - definitely something we'd like for a VS Code addin too.. @jeremymeng thanks. (side note: ILSpy core devs will meet for the weekend of October 12th in Bad Ischl at our annual developer days). https://chocolatey.org/packages/ilspy - we are not the package maintainers.\n. No, this is not a similar command. \"View in\" implies that the user does not leave VS. Whereas \"Open in\" denotes that a separate app will execute the action.\n. One more thing I'd like document for consideration for gotodef: http://www.symbolsource.org/Public\nThis could be a useful addition (although not strictly decompilation) for assemblies that originated from Nuget and have related symbols. This was you could navigate to the \"real\" source code instead of the decompiled approximation.\n. Can we make both ilspy and ref12 play nicely together?\n. Won't implement because the addin now supports Open in ILSpy in source code window (aside from opening output and references). No longer needed to integrate with Object Browser.. Linked https://github.com/icsharpcode/ILSpy/issues/669. We are currently implementing (Portable) PDB generation; directly integrating with the VS debugger (F11 Step Into) would (probably) mean requiring a lot of help from the VS debugger team. \nClosing this issue because we implement PDB support.. In the current v2 this would only be possible if we package \"everything\" because v2 uses a heavily customized version of NRefactory. That also would mean using decompiler + \"vanilla\" NRefactory would not be possible.\n. ics.decompiler.console now is this sample. If this is the default behavior, we're good - but I think we have never actually tested it.\n. For the WPF client, yes, feel free to work on this (no one is working on that atm).. I personally don't think this to be a feature that many dev's would expect or like.\n. The new version is uploaded to the gallery, please give it a try (and thanks for digging up the necessary changes)\n. I for one have no problem going 4.5+ @siegfriedpammer @dgrunwald  any objections from you?\n. XP definitely should not be part of our considerations any more. It is dead security-wise.\n. Related https://github.com/icsharpcode/ILSpy/issues/831. The executable was never signed, that is not new behavior.\n. You happen to be aware of (just as an example btw) https://github.com/synhershko/NAppUpdate?\nAuto-updating is not as easy as you might think.\n. Closing because no feedback was provided.. This is the default behavior implemented via a dead-simple (and extremely old) batch script\nc:\\tools\\fileremover.exe 5 ILSpy. c:\\BuildArtefacts\nWould need to write an entirely new one to account for \"leave at least one set of build artefacts behind\" (currently does not care how many exe/msi/zip comprise one \"build\"). Get-ChildItem ILSpy_. | sort LastWriteTime -Descending | select -skip 3 | Remove-Item\nThat's a PS script that would the job specifically for ILSpy build artefacts.. Related https://github.com/icsharpcode/ILSpy/issues/831. The 3.x nugets (alpha packages) are now available.. Related: https://github.com/icsharpcode/ILSpy/issues/831. Oh, you didn't follow #831 - it states that we have updated Nuget packages, plus a sample (now even as part of the main repository, ics.d.console). As this is no longer an issue of \"ILSpy-slowness\" (ie our code), I am closing this issue.. You are using the VSIX available via the Releases tab? Because on the marketplace, it is still the old version (we push only release versions to the marketplace). @sharwell I luckily had copied the directory to the side from yesterday's attempt 2. The branch for you is https://github.com/icsharpcode/ILSpy/commits/netstandard-build-troubles - the last commit was us trying to get AppVeyor to work.\nIf I remember correctly: on the first build in VS, it doesn't find Longset private member (although AssemblyInfo.cs has the necessary definition). Right-click, build ics.decompiler and it is fine. From then on, VS locally is fine (except for a rare race condition on Clean for Cecil).\nAppVeyor was more stubborn: never found Longset and totally didn't understand RevisionClass from AssemblyInfo.cs. The pertaining ci link: https://ci.appveyor.com/project/icsharpcode/ilspy/build/1.0.405. @siegfriedpammer running the commands Appveyor uses (dotnet restore ilspy.sln, msbuild \"ILSpy.sln\" /verbosity:minimal ) exhibits the same problem. So it is definitely a msbuild tooling problem.. Built from commit 949790d126f35c866f2be4580e712ff68d587574 I have uploaded a test Nuget package for testing purposes (Nuget, xplat): https://www.nuget.org/packages/ICSharpCode.Decompiler/3.0.0-alpha1 Please note the language support at https://github.com/icsharpcode/ILSpy/issues/829 - this package has less decompilation support than the officially released one.. Super-small sample https://github.com/christophwille/ilspy-console-netcoreapp but please see https://github.com/icsharpcode/ILSpy/issues/845. Do you by any chance have repro steps for us?. Was the VSIX installed from the VS Gallery / Marketplace or the build server?. I have put together a quick spike (ignoring all error handling, packaging, useful output types for foreach):\nhttps://github.com/christophwille/ilspy-pscore/blob/master/src/Tests.ps1\nNote that it also prototypes #931 . See #945 . .Console.sln is now Frontends.sln. The frontends are always built against the NuGet packages.. This is now checked in at https://github.com/icsharpcode/ILSpy-vscode. Repo & marketplace now referenced in readme https://github.com/icsharpcode/ILSpy/commit/851dcf0a5fa2ed4d5a0fdebee41b03dec65e59b6. The main issue with switching away from WPF is AvalonEdit for displaying decompiled source, navigation from symbol to source et cetera. We had prototypes already (eg https://github.com/mkrueger/ILSpy/tree/xwt), but it is simply too much work for us.\nCurrent focus is on making it possible to create xplat UIs - netstandard2.0 was our work item this regard, and now we try to get #931 off the ground plus hope someone would want to join in making #941 a reality (I personally think VSCode is the best way forward for xplat UIs because it has all the necessary infrastructure, especially editor-wise). At the moment (never say never, though), switching from WPF to anything else isn't even remotely going to make it to our backlog. That's why I am closing the issue - but not adding a \"Won't fix\" label, because contributions are welcome.. Milestone 3.0 intentionally removed - it is implemented, but via workarounds. We will keep this issue open to keep tracking the related issues. Will close once we can remove the workarounds.. Also see https://github.com/NuGet/NuGet.Client/pull/1971. Thanks for validating. Closing the issue (if the problem reappears, please open a new issue as point out by Siegi). On Mac, new CSharpDecompiler fails (again...) with the following error message. Maybe this is related to Xamarin Workbooks being Mono?\nArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\nat void System.ThrowHelper.ThrowArgumentOutOfRange_IndexException ()\nat T System.Collections.Generic.List<T>.Item { get; set; }\nat AssemblyDefinition ICSharpCode.Decompiler.UniversalAssemblyResolver.GetAssemblyInNetGac (AssemblyNameReference reference, ReaderParameters parameters) in C:\\projects\\ilspy\\ICSharpCode.Decompiler\\DotNetCore\\UniversalAssemblyResolver.cs:314\nat AssemblyDefinition ICSharpCode.Decompiler.UniversalAssemblyResolver.GetAssemblyInGac (AssemblyNameReference reference, ReaderParameters parameters) in C:\\projects\\ilspy\\ICSharpCode.Decompiler\\DotNetCore\\UniversalAssemblyResolver.cs:292\nat AssemblyDefinition ICSharpCode.Decompiler.UniversalAssemblyResolver.ResolveInternal (AssemblyNameReference name, ReaderParameters parameters) in C:\\projects\\ilspy\\ICSharpCode.Decompiler\\DotNetCore\\UniversalAssemblyResolver.cs:132\nat AssemblyDefinition ICSharpCode.Decompiler.UniversalAssemblyResolver.Resolve (AssemblyNameReference name, ReaderParameters parameters) in C:\\projects\\ilspy\\ICSharpCode.Decompiler\\DotNetCore\\UniversalAssemblyResolver.cs:92\nat AssemblyDefinition ICSharpCode.Decompiler.UniversalAssemblyResolver.Resolve (AssemblyNameReference name) in C:\\projects\\ilspy\\ICSharpCode.Decompiler\\DotNetCore\\UniversalAssemblyResolver.cs:67\nat ICSharpCode.Decompiler.TypeSystem.DecompilerTypeSystem..ctor (ModuleDefinition moduleDefinition) in C:\\projects\\ilspy\\ICSharpCode.Decompiler\\TypeSystem\\DecompilerTypeSystem.cs:56\nat ICSharpCode.Decompiler.CSharp.CSharpDecompiler..ctor (ModuleDefinition module, DecompilerSettings settings) in C:\\projects\\ilspy\\ICSharpCode.Decompiler\\CSharp\\CSharpDecompiler.cs:183\nat ICSharpCode.Decompiler.CSharp.CSharpDecompiler..ctor (string fileName, DecompilerSettings settings) in C:\\projects\\ilspy\\ICSharpCode.Decompiler\\CSharp\\CSharpDecompiler.cs:178\nat void <<Initialize>>d__0.MoveNext ()\nat void System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw ()\nat void System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification (Task task)\nat void Xamarin.Interactive.Compilation.CompilationExecutionContext<TScriptResult>.<RunAsync>d__12.MoveNext ()\nat void System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw ()\nat void System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification (Task task)\nat void Xamarin.Interactive.Repl.ReplExecutionContext.<RunAsync>d__9.MoveNext () in ReplExecutionContext.cs:121. Screenshot of the current workbook in action\n. As of Nuget 3382 (from build server atm) it works now on Mac too.. Yes. We are relying on the command line version of git for our build tasks (we have a base commit hash for ..1 and we calculate the current revision based on the delta of commit numbers). The ilspy.net Homepage points to https://github.com/icsharpcode/ILSpy/releases/download/v2.4/ILSpy_Master_2.4.0.1963_Binaries.zip for the \"binaries\" download link - it contains all the files that are supposed to be in this zip archive.. This sounds similar to https://github.com/icsharpcode/ILSpy/issues/964#issuecomment-341368991 (Note that at that time cmdline & ps worked on Mac, but not in the context of Xamarin workbooks). Because there was no further response, I am closing this issue.\nFor FileLoadException & netstandard NuGets in general, check out https://github.com/dotnet/standard/issues/481. Sample from frontends.sln (right click on Console project, Open output in ILSpy):\n// D:\\GitWorkspace\\ILSpy\\ICSharpCode.Decompiler.Console\\obj\\Debug\\netcoreapp2.0\\ilspycmd.dll\nwhich has no deps file in obj (and thus fails to load assemblies), whereas in \n// D:\\GitWorkspace\\ILSpy\\ICSharpCode.Decompiler.Console\\bin\\Debug\\netcoreapp2.0\\ilspycmd.dll\nit works as expected. If someone with VS2015 could actually look into the issue this would be great, because we are short of VS2015 installations.. Do you have any samples you can share? (ie reproducible with OSS NuGet packages). No further information has been provided, closing.. Please submit the file to virustotal.com to verify.\nThis is my URL (just grabbed it again from the Releases):\nhttps://www.virustotal.com/#/file/26c904e30bb7cea8eaa50a92895c4f830364196e501db2e1901569b2a18949e3/detection\n  . No, absolutely no idea why Defender would think it is a Trojan... especially because on virustotal.com, it says ok for the MS av engine.. @hyspace could you provide your Defender definition version?. Native libraries are not managed code, so this is by definition impossible.. see https://github.com/icsharpcode/ILSpy/commit/e91ad3915cbecdc3fcc4947fdcf7d4e2bf05a67c. Our focus currently is on modern language features for modern platforms (think \"Roslyn compilers\"). We always try to strive for reach, and currently we are missing important language constructs such as tuples. Those definitely have priority over other more \"niche\" problems - and sorry to say, this is a niche problem. \nHaving said all that - we do absolutely welcome contributions in such areas.. @sharwell I have uploaded 3.0.1.3460 that includes the requested fix (currently validating).. @siegfriedpammer please set the version to 3.0.2. Also, should we merge something from master?. Yes, I was thinking about the TFM for net45. . Please see https://github.com/icsharpcode/ILSpy/releases/tag/3.0.2. We have switched fw's specifically for Roslyn integration. We are not planning on changing this targetting.. Why didn't you go with netstandard2.0;net46;net45? three tfm, three dlls in the nupkg.. There isn't a \"huge\" list of plugins (https://github.com/icsharpcode/ILSpy/wiki/Plugins reminds me that this list isn't exactly current for 3.0). Can you please also verify the asmviz from Denis?. @siegfriedpammer please review @Zastai please note this will take some time because Siegfried is on holidays. Yes, it has been renamed, and actually also changed in such a way that ics.d is no longer a project reference but a NuGet package reference.\nI haven't recently tested it (only Mac anyways), but you would need the .NET Core tooling, not Mono.. https://github.com/icsharpcode/ILSpy/releases the binaries in this case are the actual nupkg files (the Nuget package). If you look through the Assets lists, it is not included for download - that's why there is the reference to NuGet. \nThe WPF UI was not released for 3.0.2 simply because none of the changes were relevant.. Wouldn't that be more like a custom tool than ran on top of source code? (using Roslyn). @mkrueger did you get a chance to try this with https://github.com/icsharpcode/ILSpy/releases/tag/v3.1-final because it was released post @siegfriedpammer comment of \"can't repro with current builds\". Thanks.. As ILSpy itself only reads from a DLL, it is most likely Reflexil - you might want to ask in the Reflexil repo https://github.com/sailro/Reflexil/issues. Yes, this will have to wait until 3.2 is released as final version.. Given that Windows Forms will get another lease of life (netcore3) it might be a good idea to consider this.. Yes, master is now 4.x and definitely needs testing before we push binaries for -alpha1 to /releases. Please go ahead and grab integration builds. Thanks!. We intentionally decided to use the official library used by the official .NET tooling. This makes us more or less \"bug-compatible\" when it comes to assemblies ILSpy can accept with ones that VS et al accept. Note that on purpose we do not venture into \"overcoming security measures intended to make decompiling impossible\".. You downloaded the source, not the precompiled binaries. You are looking for eg https://github.com/icsharpcode/ILSpy/releases/download/v4.0-alpha1/ILSpy_binaries_4.0.0.4226-alpha1.zip. No. The reason it is not implemented or has any urgency is that pdbgen itself is nowhere near complete (it is a hard problem).. Start of -d command line option https://github.com/icsharpcode/ILSpy/commit/2ff111c964c42f76eb91ac03d988e83275580d68. See tl;dr in https://natemcmaster.com/blog/2017/11/11/msbuild-task-with-dependencies/ why we will include this in the dotnet tool instead of an MSBuild task (\"Use exec to create pdb during build with ilspycmd\").. Please note that @siegfriedpammer is on vacation so you might not get technical feedback for some time. Just wanted to let you know so you don't feel \"ignored\".. This does not implement the standard Dispose pattern https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/dispose-pattern. We currently are (and have been for quite a while) discussing \"future directions of the UI\". We want to go cross platform, and we definitely want to take that opportunity to modernize the UX: current thinking is MDI, which would get us a lot of the requested functionality - like SxS-viewing of decompilation results (think comparing different versions of a codebase). Maybe @siegfriedpammer could chime in with some of the UX ideas.. What exact version of Visual Studio are you using?. Can you please try the 4.0 Beta extension?. After checking with @siegfriedpammer \"Please don't force arbitrary code styles on our code base. The core team makes the rules, not some random tool.\". Also https://github.com/icsharpcode/ILSpy/tree/master/ICSharpCode.Decompiler.Console is xplat.. I'll keep updating this comment with \"What have we been doing\" at our dev meeting:\n\nhttps://github.com/icsharpcode/ILSpy/issues/1416 We dropped support for all TFMs except netstandard2.0\nBAML decompiler branch merged (was completed before Stuttgart) https://github.com/icsharpcode/ILSpy/commit/9fa3759a890e44e2fe81bf8e1733a3434aa77794\nImplement https://github.com/icsharpcode/ILSpy/issues/1359 (obfuscated names support)\nWork started on C# 8.0 nullable reference types https://github.com/icsharpcode/ILSpy/pull/1425\nSubjective performance https://github.com/icsharpcode/ILSpy/commit/0c132a87e71bed6da89e873179c269117496084d (assembly loading w. treeview restore)\nPDB support work, see status issue https://github.com/icsharpcode/ILSpy/issues/1422\nDEBUG-only command for Pdb2Xml https://github.com/icsharpcode/ILSpy/commit/e7da8bc3053a84cc33f63e1799cb21f05acc3c36 and https://github.com/icsharpcode/ILSpy/commit/1719115eaba9717a16823c153deb6a4e29e52486 (impl)\nilspycmd is being updated to support build-time scenarios such as https://github.com/christophwille/ilspycmd-pdbgen-demo/blob/4027cce59d1f9bd4b9f35e6b762f5333cfff6702/src/DemoApp/DemoApp.csproj#L14 (-d not available yet)\nBecause of breaking changes (API, NuGet TFMs) we will do a major version on next release https://github.com/icsharpcode/ILSpy/commit/b5c4342fb2d6d2b78b0b9786d78f6fabe57c90bd\n\nDiscussions\n\nCFF Explorer proved useful on SRM porting work, metadata info feature under consideration for future.\nRework of tooltips under consideration (richer presentation like SD5). I have added support for VS2019 by following Mads' guidelines and on first testing, it works as expected. Please note that this checkin is post-Beta3, therefore you'd have to build yourself atm.\n\n\n. You can give these build artefacts a try https://ci.appveyor.com/project/icsharpcode/ilspy/builds/21043323/job/n20o4qatmbmwlcr6/artifacts. I gave the following a try: I decompiled Beta 2 ics.d with Beta 2 of ILSpy (worked). I tried decompiling Beta 3 ics.d with Beta 3 of ILSpy (crashed). Then took Beta 2 of ILSpy and decompiled Beta 3 of ics.d (crashed). So there seems to be something \"new\" in in ics.d Beta 3 that produces this crash.. This is related to https://github.com/icsharpcode/ILSpy/commit/0905cf74ac68bb2aecfea1412eebc67cafbc7d61 - on publishing Beta 3, I got the deprecation notice and fixed the nuspec. \nNote that you need a vCurrent of NuGet. Potentially the easiest way is to install .NET Core 2.2 SDK.. As soon as the test cases for C# 8.0 nullable reference types is checked in, VS 2019 will be required for building the solution - and it comes with the correct latest tooling.. ILSpy is WPF, so this here applies: \nhttps://docs.microsoft.com/en-us/dotnet/api/microsoft.win32.openfiledialog?view=netframework-4.7.2. Same here with unable to repro - and given that File/Open is such a basic (and often used) command I don't think it is ILSpy that is acting up. Much more likely that it is that specific machine.. A note when opening the ilspy.zip file for the first time: please see https://stackoverflow.com/questions/47184230/large-number-of-assemblies-in-net461-output-folder-when-building-net-framework\nWe intentionally only stepped up to 4.6.2 (and not 4.7.1 https://en.wikipedia.org/wiki/.NET_Framework_version_history#.NET_Framework_4.7.1 which adds full netstandard2.0 support - released mid-October 2017) to be cognizant of machines with older frameworks only. The zip file size is only minimally bigger.\nThe addin is not affected because it runs only in VS greater/equal 2017 (and VS 2017 installs 4.7.x). Tested with the following minimal set of package references:\n```\n  \n\n\n\n\n\n\n\n\n\n```\n(yes, seemingly the other two project references aren't needed anymore either). You mean when you save an assembly as C# project? Well, all we create is C# files, you'd have to compile that to get a PDB (or use the Generate PDB feature instead).. Sorry I don't follow.. That isn't listed in https://github.com/icsharpcode/ILSpy/wiki/Plugins - where would you have gotten that from? (if it is from an old ILSpy version, nope, that shouldn't work). Can you elaborate why you would need that? (it doesn't get more side-loadable than the current zip file). ok, centralized distribution of ILSpy is somewhat a first when it comes to feature requests.\nI am not sure that MSIX would work nicely with ILSpy in one specific regard: addins are supposed to be copied into the directory where ilspy.exe lives.. https://docs.microsoft.com/en-us/windows/uwp/porting/desktop-to-uwp-prepare\nTechnically, that might actually work now because in v5 we are targetting net462 (and have removed a few multi-targetting hacks). However, according to https://docs.microsoft.com/en-us/windows/uwp/porting/desktop-to-uwp-packaging-dot-net that would mean adding a project that depends on the Windows 10 SDK (just verified because my machine's VS doesn't have UWP development tools installed, the packaging project template is missing). That, however, might not fly with the team.. ",
    "ghost": "Manual testing maybe, unit tests would be identical.\nDoes your testing strategy afford all-out manual testing anyway?\n. [Need Help] How can i remove \"goto\" after using ILSpy? It's too much :'(\n. The hardcoded path is the name of the folder ILSpy, the working directory\nof the executable. Please see the screen shot attached\nOn Wed, 30 Sep 2015 12:42 pm Daniel Grunwald notifications@github.com\nwrote:\n\nThere are no hard-coded paths in ILSpy (certainly not \"C:\\Utils\").\nMy guess is that you opened an assembly list created by a previous version\nof ILSpy that was installed in that path.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/icsharpcode/ILSpy/issues/647#issuecomment-144328936.\n. Agreed, theming options would be a welcome addition\n. \n",
    "arturek": "I've prepared version that uses NUnit. Test files are also compatible with ILSpy's TestRunner, too. The updated version is available from the WithNUnit branch (arturek/ILSpy@f25904a47432767797ef). Should I create another pull request (and close this one)?\n. Maybe the solution is to temporarily suspend ability to load new assemblies by the Resolve()? In such rare cases the indexer name formatting code would work no worse than it does now (by treating an AssemblyLoadingDisabledException exception thrown by IsIndex() as false). But usually the correct indexer name would be shown.\nI wonder whether LookupReferencedAssembly() shouldn't by default deny requests to load new assemblies when called on UI thread? An additional parameter could enable loading when it is expected behavior.\nI have not submitted a bug to Cecil yet. I have not even thought about it. Thanks for this suggestion.\n. Could you tell more about their views? What features of SDI do they miss in tabbed UI? Why they do not like tabs? What could be changed to make tabbed UI better? Or maybe they have an idea of UI that is not based on tabs but fixes shortcomings of the current SDI?\nFrom my point of view tabbed UI is just an extension of SDI. As long as certain commands are not used (e.g. middle-mouse-click or \u201cOpen in New Document\u201d) tabbed UI behaves the same way as SDI. So people who like single document UI do not lose anything. They can simply ignore (or disable?) new features and use the product the way they always did. But others can use tabbed UI to see more code at once or to make navigation between different parts of the code much easier (by switching documents instead of relying on navigation history).\nAnother nice feature of tabbed UI is support for multiple tool windows and ability to place them anywhere. Current fixed layout can show at most one tool window - Analyzer view. This makes implementing some kinds of ILSpy extensions difficult. Even current version of Analyzer view has its own problems originating from the fixed window layout - e.g. sharing vertical space by Analyzer and Decompiler views sometimes forces a user to scroll one or both of them  extensively (especially on smaller screens).\n. This should be fixed in build 1.0.0.757.\n. ",
    "tacvek": "It would be nice to offer the option of not hiding the compiler generated classes, even when you have in-lined the original. As it is now, one can see those classes in IL view, but for those curious, they cannot see the C# equivalent (without using a debug build) while .NET Reflector does allow them.\nI will admit that I was pleasantly surprised at how easy it is to create a debug build. It only requires having the Full (not client profile) .NET Framework 4 installed, and running the supplied batch file. Rather nice of Microsoft to permit development without any SDK (either the full Windows SDK, or the stripped down SDK that ships as part of Visual Studio).\n. Without checking that looks like a pattern match failure. The code is correct, but suboptimal.\nHowever should the original decompile back into the original, or is it better to decompile to the following?\n    for (i=0; i<2; j--, i++)\n    {\n    }\n. The problem here is that it is not possible to represent that method properly in C#. That is because it uses a formal parameter that lacks a name. The parameter name is effectively part of the function signature in C# 4, because of the support for optional parameters and named arguments. I say effectively since for many purposes, like overload selection, it is ignored.\nRegardless formal parameter names have always been part of the API of any assembly, since the names are clearly visible in Intellisense or similar features, and existing code comments may reference them by name for documentation purposes.\nTherefore inserting an arbitrary name is probably the best that can be done here, but even then the recompiled function would not have the same API. (Admittedly, adding a parameter name is not a breaking change, so all existing Code would still work.)\n. Being curious I tried to merge these changes to a local branch for testing. I noticed a few minor merge conflicts, but they were no big deal. However, the displaying non-public nodes as gray did not seem to work for me. Could you try merging in the latest version of trunk, and see if you can get that behavior working again?\nSince there is a feature freeze, I imagine that this change will not be pulled until after ILSpy 1.0 final is released, or at least until ILSpy 1.0 has a separate branch.\nMy personal feelings are that a splash screen should not be needed, but that for reasons unclear to me, ILSpy sometimes takes long enough to load that having a splash screen would be nice. Ideally whatever causes the slow start-up would be fixed, but I have no object to a splash screen until that occurs.\n(Disclaimer: I am not part of the ILSpy team, just a contributor).\n. Ok. That does work. I think I may have had some other code merged into that branch, which must have broken that. \nAs for the functionality, should protected members be in gray? They are not \"public\", but they are a part of a class's public API. By that logic .Net Reflector's similar coloring feature left protected members in black.\n. ",
    "stienessen": "While you are on the search experience, how about a simple Ctrl-F find function that searches text within the current view too - that would be nice when you have the whole class open - preferably this would search the collapsed blocks of code too.\n. ",
    "AlexZeitler": "Thanks - this by far better now.\nWhy not just having a label below the listview showing more details on the currently selected item?\nIn case you using the listview grouping it would be nice if the currently selected item would expand on selection so no additional click on a expand button is neccessary.\n. My intention behind this issue was to save time by not having to click anywhere or activate something to be able to search.\nWhen implemented the way you described I'll always have to delete the text entered in the search bar to get rid of the additional elements - thus I'm losing time.\n. this sounds ok to me - especially the ESC key.\n. In a certain other application I dislike it also ;-)\n. ",
    "bamboo": "Great!\n. Ok. I'm not using ReplaceMehtodCallsWithOperators that's why.\n. ",
    "KevinCathcart": "Based on how lambda and iterator expressions have been handled, once support for automatic properties has been added, the default will be to hide the backing field, as show the property in the form public string TheProperty {get; set;}  with variations as appropriate. An option would be added to the new options window to allow showing the generated code.\nI would imagine this would be far easier to support than the more complicated compiler generated constructs like iterator expressions and anonymous methods/lambdas, but those had higher priority because support for them is required to get reasonably readable code, while automatic properties do not hurt code readability nearly as much.\n. I would agree that the generated code is trivial, but since the results are methods with names that can conflict with user's methods (unlike most other compiler generated methods) it would be worthwhile to be able to see the generated code.\nHowever, to prevent option proliferation combining it with similar features such as automatic events seems quite reasonable.\n. I had indeed fogotten about cases where a checked expression would need an unchecked expression inside. If it were not for that, it would have worked just fine. I deleted it, since it would only confuse anybody who came back to read this bug report.\n. A suggestion on a quick and easy way of dealing with this problem.\nAs far as I can tell, there are only 3 instructions that empty the execution stack. They are leave (and the leave.s variant), endfinally, and throw. Since throw actually use the top item from the stack, I will ignore it, assuming it handles side effects of the other stack items correctly.\nThe others have exactly the same semantics as having an appropriate number of pop intructions before the instruction in question. So to fix this issue, in ILAstBuilder::StackAnalysis you could simply insert the correct number of pop instructions, before the leave instruction. Then you could never be discarding side effects in GotoRemoval, since the leave node will have no arguments.\nThat change would also help with my suggested solution for Issue #232, since then all endfinally nodes could be merged without needing to worry about argument side effects.\n. Fair enough, although I believe it does currently modify code, specifically removal of dead code (at least according to the comment). Nevertheless keeping the changes to the absolute minimum required to create the AST does make sense.\nNot being familiar enough with the code, I was not entirely sure how difficult doing that conversion after the initial conversion to AST would be. If it is feasible then that does seem to be the cleaner approach.\n. Analysis:\nThe pattern match failure is no big deal, but it cannot be fixed until the second issue is fixed.\nThe second issue is a bit more serious. The ILAst after the last ILAst transform is as follows:\n```\nfinally {\n    stloc:IDisposable(var_2_2F, isinst:IDisposable([mscorlib]System.IDisposable, ldloc:IEnumerator(var_1)))\n    if (logicnot(ldloc:IDisposableexp:bool)) {\n        endfinally()\n    } else {\n    }\ncallvirt:void(IDisposable::Dispose, ldloc:IDisposable(var_2_2F))\nendfinally()\n\n}\n```\nThat code is technically correct, but it cannot easily be transformed into a C# AST without introducing an unnecessary goto, since C# provides no mechanism for leaving a finally block other than by falling through the bottom.\nI tested some other code, and have found that pretty much every case involving more than one endfinally in a finally block can cause similar problems. I have further checked the code, and endfinally is simply dropped on conversion to the C# AST, which is only valid if it is the last statement in the finally block.\nWith that in mind, the best fix that I can see is to create a special basic block consisting of only a label and an endfinally(), and replace the endfinally() calls in other basic blocks with a branch to this block. (Do not forget that endfinally() can take arguments with side effects which may need to become stand-alone expressions). The new endfinally basic block cannot be incorporated into a loop or conditional structure, and must be the very last basic block merged into the flattened block. This is to ensure that it will be the last instruction in the finally block so that the C# code has execution just fall out the bottom of the finally block.\nThe above would not need to be done with any finally block that does not contain an endfinally, which is permissible if it always either does not terminate or throws an exception. \n(All of this would also apply to fault blocks.)\n. That could be done, although that is still very much non-optimal. It could perhaps be used as a temporary fix, but there are still potential issues, like how to deal with an endfinally that is inside an existing loop.\nFurthermore, I'm quite sure people would report bugs if they ever saw a do{...}while(false); block in the generated output.\nSo I still think the best fix is to merge the tryfinally statements and pin them to the end of the fault block. The only tricky parts of that are how to prevent the basic block with tryfinally from being incorporated into loops or conditionals, or from being moved to  a non-last position.\n. Since I'm not a member of the core development team, the following is just some food for thought.\nAs a test of performance I loaded 1088 distinct assemblies into ILSpy, and tested some searches for members. The speed was not an issue, with the first results appearing instantly, and the last results appearing in under 5 seconds. \nThe only thing that felt missing was some indication of when the search was complete. With small numbers of assemblies that does not matter much, but it still would be nice. Of course, that same problem exists even without your patch, but if you have any good ideas for indicating that, that may be worth adding to your patch.\nThe basic idea of this patch seems reasonable. However I worry that it might close off some changes I would like to see in search. \nReflector allows searches for types to include the namespace, and for members to include the namespace and class. It also allows multiple terms separated by spaces. Thus searching for \"System.Xml Attributes\" returns all the custom attributes defined in the System.Xml namespace (or sub-namespaces).\nIt is not immediately obvious how to permit such things in ILSpy search if we are ordering based on the code completion match quality, although I'm sure there is some way to do that. Again if you have any good ideas for doing such a thing, It may be worth adding.\n. That does seem possible. Here is a more in depth view of this issue, in case it helps with the other one.\nAs you probably know, the VES has no integer types smaller than a 32 bit integer. The various operations that deal with smaller values push a 32 bit version onto the execution stack, sign extended or not depending on the original source type.\nSubtract then runs against the two 32 bit values, resulting in a 32 bit version of the desired result. It can then be loaded back into the desired datatype, silently dropping leading bits. If the operation was supposed to be overflow-checked, that is accomplished via the conv.ovf.* instructions.\nIgnoring the overflow checking case, that indicates that type inference should really be based not on the type of the other operand, but on the type of destination. (For the overflow checking case, it should be based on the type used there).\nThere is a problem with that though. Even type inference based on the destination can be a problem, since via the dup instruction a single operation can have multiple different destinations, potentially with different types, so the largest such type must be used for type inference, and the other locations would need a cast down to the smaller integer type.\n. I'm not an ILspy team member, just a fellow user, (I did file Issue #221, which this patch fixes).\nA few comments:\n\nI am seeing some crashes when testing this. I am testing this using https://github.com/zippy1981/XmlVisualizerv2/tree/netModule_experiment. (To build this you must have Fiddler2 installed.) I cloned that repository, then built the Debug NetModule configuration, and then the Debug configuration. (The Debug configuration will not build unless you have built Debug NetModule first).\nI navigated to the TestDebugVisualizer\\bin\\Debug folder and opened the DebugVisualizer.dll assembly. I try to decompile the XmlVisualizer.AboutForm class from the secondary module (VisualizerControl.netmodule), but I get an exception instead.\nThe exception I get is Mono.Cecil.AssemblyResolutionException: Failed to resolve assembly: 'ICSharpCode.TextEditor, Version=3.2.1.6466, Culture=neutral, PublicKeyToken=4d61825e8dd49f1a'.\nI'm not entirely sure why this happens since that assembly is in the very same folder as the netmodule. That warrants further investigation.\n\nIf I try disassembling a method to IL, I also get an exception, this time a NullReferenceException.\nIt appears that Mono.Cecil is not filling in the the Assembly property of the secondary modules, thus lines like if (method.DeclaringType.Module.Assembly.EntryPoint == method) don't work as expected. Either we are using Mono.Cecil incorrectly, or this is a Mono.Cecil bug, since standard reflection has no problem with that line.\n\nFor saving an assembly containing multiple modules, it would probably be better to save a solution, rather than just one project, since a solution could contain a project for each module, specified to compile the secondary modules as modules rather than full assemblies. (This might reasonably be considered outside the scope of the current patch)\n\nFor IL mode module-level declarations (such as .module, .corflags, and .class external, as well as any module level custom attributes) should be changed to appear when the module is selected in ILSpy, rather than having the information for the main module appear when the assembly is selected.\n\nFor C# mode/VB Mode Module level attributes (if any) should appear when the module is selected.\n. ",
    "hsteinhilber": "This looks like a duplicate of issue #14.\n. ",
    "ReneDeLaGarza": "check pull request \nhttps://github.com/icsharpcode/ILSpy/pull/101\n. Sorry, i closed it by mistake\n. ",
    "GertG": "Oops. Same problem seems to have already been reported in issue 89 and 88 and 91 probably have the same cause too.\n. ",
    "eusebiu": "Duplicates https://github.com/icsharpcode/ILSpy/pull/101\n. I also think that a tabbed UI would be useful... at least from debugger point of view. Some pads (like in SD) can exist in ILSpy (with debugger), like CallStack and Breakpoints (maybe others :) ). Of course, making an extension point for the pads using MEF (just like the menus or options pages) is necessary.\n. Properties and events can also be non-public.\n. Any constructive remarks are welcome and we really appreciate them. So, don't take the feedback personal. :)\n. I would implement this feature like this:\n- when open ILSpy, the Search bar is visible and the panel have the same height as the search bar.\n- when the Search menu is activated, the search bar gets focus\n- when results were found, a nice roll effect - down - would change the height of the search panel, showing the list of results\n- when removing the text form search bar, the roll effect reversed - up.\nWhat do you think?\n. I understand your intention but you can activate/focus the search bar using F3.\nIf you want to delete the text, we can think of one key (like Escape) to remove the text from the search bar. Also, there are no additional elements. The list will still be present; the only thing that will be changed is the way to show/hide it to/from the user.\n. I've implemented locally the context menu (only for the tree) for navigation and it does not look very nice + the navigation buttons are close to the tree (could be useful in editor's context menu).\nOn the other hand, the keyboard shortcuts (I used CTRL + Left/Right arrows) are very useful when opening items using only the keyboard.\nSo, I vote only for the keyboard shortcuts (CTRL + Left/Right arrows).\n. Yes, pentp, you are right; ALT + arrows work and also mouse special buttons.\n. Does this solve the issue http://community.sharpdevelop.net/forums/p/13184/35642.aspx ?\n. What font do you propose?\nOr... are you saying to create some configuration setting for editor font?\n. Maybe you can make a MEF plug-in... :)\n. closed by 23227b3526547173e0a6\n. Any enhancements are welcome! :)\nThere are some UI issues:\n0. Put a separator between different options (this is done automatically using the metadata information of the command).\n1. When moving between the type and the method where the BP actually is, the text marker (the red one) disappears.\n2. I don't think the CurrentLineBookmark should be showed in BP pad (is this useful?)\n3. Maybe you can show the argument names and the argument values in call stack :D\n4. When stepping, the CurrentLineBookmark gets under the pads and one cannot see where it is. I think you should call the ScrollTo method of the editor.\n5. BP are not saved - this would be very cool.\nOther than these UI issues, the features are very nice! But I'd like these UI issues solved so I can merge your commits. :)\n. There's been some changes on the Decompiler API and we will have to come with a solution for this issue also.\n. I think it is better to move this to ILSpyTreeNode since SharpTreeNode has nothing to do with access modifiers.\n. ",
    "EdHarvey": "Ahhh, OK.  The developers of the assemblies I examined must have followed a particular coding standard...\nNever mind then, I'll close this issue.\n. Yup, the first option in your second comment would be neater...\n. It's a mix; some are self-drawn, others are from (or based on) the VS2010 Image Library.\nWe should be OK to use the VS library icons. The following is from the VS eula,\n\nYou may copy and distribute images and animations\nin the Image Library as described in the software documentation.\nYou may also modify that content.  If you modify the content, it must be \nfor use that is consistent with the permitted use of the unmodified content.\n\nThe conditions \"as described in the software documentation\" state that you must use images in a manner consistent with the MS supplied description of the intended icon meaning (which I have).\nSadly, the original SharpDevelop icons have not aged well. This is not very surprising given that they were probably created a decade ago. If required, I could use the SharpDevelop icons as a base and redraw them to fit the 'modern' style, but I suspect that's a lot of unnecessary work given the fairly liberal terms of the VS image library. After all the stated purpose of the library was to help developers make applications consistent with the MS look :)\n. I'd also note that other icons in ILSpy are from the image library. For example, the FileOpen and navigation buttons...\n. Makes sense - once you know what's happening :)\nI was testing the new icon set, and couldn't figure out why they were not there...\nIn a related question, have you decided how Analyze is to be implemented on Properties?\n. closed\n. The current implementation is very crude; I will need to prototype and do performance testing to determine if it is worthwhile creating a more sophisticated accessibility model.  \nI also intend to do some refactoring to reduce code duplication and allow the search constraints to be used in other analysis nodes...\n. Yes, I remembered the InternalsVisibleToAttribute earlier today, although it's not much of a problem and can easily be accounted for. I'll commit those changes tomorrow (it's nearly 2am local time here in Sydney, and I'm off to bed :) )\nReducing the search scope is still important. Consider the case of analyzing a public method in a user-written assembly; we do not want to scan the body of every method in (for example) mscorelib, when there is no possibility that a reference could be found. The same applies to private members that can only be referenced in their defining type.\nProviding a means to unload objects could be useful from the memory usage standpoint, but it could also adversely impact performance. Decoding method bodies is relatively expensive, but in the current system that cost is amortized across all subsequent analysis requests involving the same data set.\n. You spotted that little omission then... :)\nAt the moment it does not consider interfaces, but it will be enhanced in my next code drop (I'm still working on some edges cases).\nThere's still a lot of work to be done on the analysis functionality; I've got a load more stuff coded, but I need some time to do the testing.\n. Good catch, thanks. \nYou are correct - I meant to include the IsAbstract test - but I also wanted to include the alternative code pattern which I often see in older codebases. Although they are not true static classes they behave the same way...\nThis dates back to early days of C# when there was no 'static' keyword. Sadly, that pattern persisted for quite a long time after v2 was released; It was probably overlooked by many developers in the mad rush to use and understand generics.\n. The assembly I was testing with had a horrible mixture of stuff in the 0xE-0x1F range... your commit seems to handle it ok :)\nThe indenting / formating of the ILSpy.xml file seems to be a bit screwed-up, but that is just cosmetics and users won't be looking at that file much anyway, so it's of little consequence. \n. A thought just occurred to me; shouldn't we be storing the ILSpy.xml file in the LocalApplicationData folder?\nThe assembly list details contains local path names, and the LastSuccessfulUpdateCheck is probably machine specific as well...\n. yes that would be useful, but is unlikely to be included in the first release as it would require a lot more analysis than the ones currently included. Maybe in version 2 :)\n. I've added a very rudimentary event 'raised-by' analyzer. \nIt only works for 'standard' events, that is events without custom add/remove accessors. \nIt is also limited to actual implementations, so interface events cannot be analyzed; however one can do it indirectly by using the \"Implemented by\" analysis to find each implementation and then analyzing those...\n. The scope of the search is largely irrelevant. The problem with event analysis is that the raise is performed by a call to the Invoke method of an event handler, and this handler has no fixed correlation to the event definition in the assembly's metadata. \nFor normal, boring, events declared using just the 'event' keyword this is not a significant problem as the event handler is stored in a field which is named using a simple, obvious, naming scheme. Unfortunately events can also follow another coding pattern that is far more complex and problematic. \nSometimes a class will exposed a considerable number of events, but under normal usage only a small number will be used. Using 'standard' events requires a field to be allocated for each event handler, whether it is used or not. To reduce object memory requirements it is possible to allocate and store the event handlers only as needed. \nMSDN has an example here http://msdn.microsoft.com/en-us/library/z4ka55h8.aspx .\n[Note: WinForms uses a similar, but not identical, technique to reduce memory consumption]\nOnce someone implements custom add/remove accessors and handler storage, life becomes considerably more complicated! It is not to difficult to find a call to Invoke on the event's event handler type, but determining which event is being raised is a harder proposition. \n. For example, consider the following code (from the msdn example above)\n```\npublic event EventHandler1 Event1\n {\n     add\n     {\n         lock (eventTable)\n         {\n             eventTable[\"Event1\"] = (EventHandler1)eventTable[\"Event1\"] + value;\n         }\n     }\n     remove\n     {\n         lock (eventTable)\n         {\n             eventTable[\"Event1\"] = (EventHandler1)eventTable[\"Event1\"] - value;\n         }\n     }\n }\ninternal void RaiseEvent1(int i)\n {\n     EventHandler1 handler1;\n     if (null != (handler1 = (EventHandler1)eventTable[\"Event1\"]))\n     {\n         handler1(i);\n     }\n }\n```\nHere we would need to perform a complete flow analysis of code in order to correlate handler1 to eventTable[\"Event1\"], and combine that with an analysis of the add accessors to correlate eventTable[\"Event1\"] to the actual event Event1.\n. > Sometimes there are event raising methods that indirectly raises events passed to them as parameters\nAnd that just makes life even harder! ;)\n. I agree, the View menu entry is redundant. I will treat that as a bug & fix for v1 rtm.\nI think we should keep the \"Analyze\", if for no other reason than that is term used in Reflector and so will be familiar to many...\n. fixed 8ba9cba66591e1740821\n. Navigating to a namespace is not, in the general case, possible. \nNamespaces are a useful shortcut for programmers but do not actually exist within an assembly's metadata. A namespace is simply a convenient grouping of type name prefixes. Therefor, a namespace can exist in multiple assemblies simultaneously.\nThis poses the following problem; If you wish to navigate to a namespace, and that namespace occurs in more than one assembly, which node do you navigate to?\n. When you say 'missing' image, is that completely missing or is the access incorrectly marked?\nDo you have a test case in C# that I can use to investigate (or a small test assembly) ?\n. I'd like to add this edge-case to my test suite, but I am unsure under what conditions it occurs... :)\n. Aha! codegen... That explains why I never caught that omission before :)\nAs you mentioned, MethodAttributes.CompilerControlled is the correct test. \nI suspect this bug may lurk in other TreeNodes as well. So tomorrow (it's 2am, and I need sleep), I'll also go through those before I do a commit.\n. See #294 for resolution\n. I've implemented a minimal solution for this feature.\nThere probably needs to be a discussion on the visual/operational aspects of this feature...\nFor example, \n- I'm not 100% happy with the blue highlighting of AutoLoaded assembles (but it was the best I could come up with at the time!)\n- Is the 'Add To Main List' context menu command useful? Should it be renamed?\nAt present, the list does not automatically enforce the manual/auto-load divide - I will investigate how to do that, but at first glace it looks like it will be messy/painful to implement given the current internal design :worried: \n. Overriding methods were not shown because the base method was marked\n'internal' and so would normally only be visible within its own\nassembly.\nHowever the assembly had a InternalsVisibleToAttribute specified which\nallowed access from the assembly containing the derived types....\n. I've been working on a solution to the event<->delegate mapping as part of some general enhancements to the analysis functions.\nI should have \"Assigned By\" and \"Read By\" finished within the next couple of days....\n. Doubtful... I'm a bit pressed on available time over the next week, and I have some higher priority stuff that I'd like to get finished before 2.3\n. Interesting case: The class has no public constructor, but is instantiated by its static members...\nThe original test for the \"Instantiated By\" node visibility excluded any class without a public constructor because this was the code pattern used for 'static' classes in Net v1. \n. ok, how does one create a link to a commit in the title of an issue?...\n. reverse Github auto-close\n. Analyze should now be ok.\nI'll leave the tooltip issue to someone more qualified :smiley: \n. I am currently working on a major restructuring/upgrade of the Analyzer to\n- Reduce dependencies between the Analyzer and ILSpy/Decompiler\n- Make it easier to enhance/maintain the Analyzer in the future.\n- Allow third-party use of Analyser functionality (for example, add-ins)\n- Allow add-in extensions to the Analyzer.\nThe final two items will probably require functionality from \"MEF2\", introduced in .Net 4.5\n. > I don't have any objections going to .NET 4.5 since that does offer us major advantages (async/await, MEF2, other portable libraries), but I wouldn't increase the .NET requirement further without a compelling reason.\nI agree, but 4.5.2 seems to be the best candidate to me, as it's the earliest version still supported by Microsoft...\nI would, however, be very amenable to allowing C# 6 features into the codebase. \nIt's been nearly a year since it was released, and I really want to be able to use the 'null conditional' operator (it's become second nature now, and I hate having to shift mental gears to go back and rewrite code to be C#5 compliant :unamused:)\n. ",
    "pentp": "type.Fields.OrderByDescending(m => m.IsLiteral).ThenByDescending(m => m.IsInitOnly).ThenBy(m => m.Name)\nThis would be more compact, straightforward and maintainable. Using linq instead could make it even more readable:\nfrom m in type.Fields orderby m.IsLiteral descending, m.IsInitOnly descending, m.Name select m\n. Another alternative without the use of descending:\ntype.Fields.OrderBy(m => !m.IsLiteral).ThenBy(m => !m.IsInitOnly).ThenBy(m => m.Name)\nor\nfrom m in type.Fields orderby !m.IsLiteral, !m.IsInitOnly, m.Name select m\n. Most of the ILSpy startup time comes from jitting the code - after using ngen it starts up almost instantaneously. If a splash screen is required then it should be displayed only after a delay of maybe 0.5 or 1 seconds. Also, using windows forms is a bad idea because it requires several dll's that must be loaded from disk and that waste memory since ILSpy doesn't use windows forms anywhere else.\n. Some of these optimizations also change the semantics - for example the formatting of numbers is changed in ControlFlowNode.cs\n. I think searching for types is a reasonable default. A certain other application also defaults to types only.\n. I think the convention for back/forward keyboard shortcuts is ALT + left/right arrow and it's already supported by ILSpy. mouse and special keyboard back/forward buttons should work also.\n. I added Ldloca opcode support for the variable splitting logic in ILAstBuilder so that the test cases pass again. C# debug builds apparently re-use generated variables as much as possible and variable inlining needs those variables split to independent temporary variables. Also started working on math operators, but that's still a work in progress.\n. I fixed both decompilation errors, added test cases to reasonably cover all lifted operators and tested it on two fairly large LOB web applications + AvalonEdit, NRefactory, Decompiler and ILSpy projects.\nTesting was done by saving entire projects using the modified version and the baseline version and then diffing the result. I didn't notice any regressions in the changed parts, although there is certainly room for further improvement.\n\nI used ParenthesisExpression because it felt quite natural, the resulting code is still correct, ParenthesisExpression isn't used anywhere else and required only 10 lines of code. To avoid potential future problems I could add an annotation to mark redundant ParenthesisExpressions so that only these are removed during AST transforms?\nI don't see a problem with ILCode.Wrap because outside of its definition in ILCodes.cs and use in NullableOperators.cs, there are only two places where it's used and both are one-liners and extremely robust. ILExpression doesn't have support for annotations and even if it had it would still require modifying all the other transforms so that they don't transform code accross the boundary currently defined by ILCode.Wrap.\n. I replaced the ParenthesisExpression with an annotation, as suggested and improved compound assignment decompilation and fixed a type analysis regression.\nI've thoroughly compared the decompilation result of the baseline and this version on the same projects (2 LOB web apps + AvalonEdit, NRefactory, Decompiler and ILSpy) and didn't find any regressions so this pull request should be ready for general use.\n\nI tried to follow a code formatting style consistent with the rest of the project but there are at least two different styles used in the ICSharpCode.Decompiler project so I used the most common one. Is there a general guideline somewhere for contributions to ILSpy?\nSimilarly to code formatting, the line ending convention used by code files also seems to be inconsistent - some files even have both unix and windows style line endings in the same file that makes editing them quite a pain in the ass (AstMethodBodyBuilder.cs for example).\n. The first solution I came up with was done in somewhat wrong places and looked like a hack. However the version that went in to the master branch should be quite robust. It basically treats every ldloca as a load+store with two exceptions - ldloca;initobj and ldloca on an uninitialized variable are considered just a store. Initobj only stores a value and the second case can be thought of as a load default + store and the default doesn't depend on the value of the variable (just like regular ldloc on an uninitialized variable). It's a conservative approach so it should produce correct code all the time.\nThis whole thing has been a great learning experience for me and most of the changes not directly related to lifted variables were done on an as-needed basis so I'm not sure if they were done in the most appropriate way.\n. That too aggressive inlining regression is probably caused by while (--pos >= 0 && inlining.InlineIfPossible(body, ref pos)) ; after lifted operator simplification. I think I tried it with a limitation of two passes but that didn't always work and since the current variant doesn't produce incorrect code I left it at that.\nAnother thing that wasn't really resolved is the case of SimplifyLogicNot/PushNegation on floats/doubles and reference types (cgt.un). I started looking into it but it turned out to be somewhat more complex than expected. Cgt.un on reference types should probably be converted to cne virtual opcode sometime after the first type analysis and cgt/cge/clt/cle should only be transformed if the type is known (both in SimplifyLogicNot and PushNegation).\n. Yeah, that doesn't quite work. Although the resulting code looks correct the variable splitting is too aggressive in that case. It only works at the moment because those variables aren't inlined :|\n. I'm not entirely sure this is the best way to do it since it kind of emulates the decompilation passes that follow it. Ideally, the code that determines if a variable ref obatined by a ldloca instruction is used in a deterministic way would run in the main ILAstOptimizer loop, but then it's too late to do variable splitting.\n. I've got the flu, so I can't test anything before the weekend probably :/\n. I use PerfView with ETW sampling of allocations. I made a small command line program that just runs decompilation on an assembly (with a warmup run before perf. measuring).. I added this because SimplifyLogicNot can change a logicnot(cgt.un) to cle.un, which in turn is needed to keep the number of different patterns recognized by SimplifyLiftedOperators somewhat reasonable. I could probably change SimplifyLogicNot to not touch cgt.un on reference types or transform it into an cne opcode instead.\n. I'm not sure why but when I tested this then ILRange.Start was always 0. Maybe there is something wrong elsewhere.\nI agree that a lot of these ILVariables are unnecessary and a more general solution (like inlining or using null) works better here.\nI started with some optimization work mainly to get familiar with the codebase again.. Adding IReadOnlyList<T> methods causes overload resolution failures for collections that implement both interfaces.. It's more compact and the loop variable is better scoped, but it's a matter of taste. Should I change it back?. ",
    "bprg": "Please Fix Bug :(\nThanks For Excellent dotnet dissasembler.\n. Do not the solution ?!\nPlease Decompile File Send My Email.\nThanks dgrunwald.\n. I am using the latest version of ILSpy (ILSpy Master 2.2.0.1814), Please look this sample.\nhttps://www.dropbox.com/s/92himwg60qd807a/ILSpyBug.zip?dl=0\n. Yes.\n. Original Code\nuint value = 2147483648u;\nDecompile Code\nuint value = -2147483648;\n. This project is private, I send privately, What's your e-mail? Thank you for your support!\n. It seems this Method is obfuscated So it can not decompile.. ILSpy decompile integer value instead of Enum Field.\nOriginal Code\nprotected virtual ShapeDrawType GetContentRendererLayers(ShapesToolChanges changes)\n        {\n            ShapeDrawType shapeDrawType = (ShapeDrawType)0;\n            if ((changes.ShapeDrawType & ShapeDrawType.Interior) == ShapeDrawType.Interior)\n            {\n                shapeDrawType |= ShapeDrawType.Interior;\n            }\n            if ((changes.ShapeDrawType & ShapeDrawType.Outline) == ShapeDrawType.Outline)\n            {\n                shapeDrawType |= ShapeDrawType.Outline;\n            }\n            return shapeDrawType;\n        }\nDecompile Code\nprotected virtual PaintDotNet.ShapeDrawType GetContentRendererLayers(PaintDotNet.Tools.Shapes.ShapesToolChanges changes)\n{\n    PaintDotNet.ShapeDrawType shapeDrawType = (PaintDotNet.ShapeDrawType)0;\n    if (((int)changes.ShapeDrawType & 2) == 2)\n    {\n        shapeDrawType = (PaintDotNet.ShapeDrawType)((int)shapeDrawType | 2);\n    }\n    if (((int)changes.ShapeDrawType & 1) == 1)\n    {\n        shapeDrawType = (PaintDotNet.ShapeDrawType)((int)shapeDrawType | 1);\n    }\n    return shapeDrawType;\n}. A similar bug.\nCode\n```\n        private enum Enum1\n        {\n            const_0 = 1,\n            const_1 = 2,\n            const_2 = 4,\n            const_3 = 8,\n        }\n    private static readonly List<Enum1> list = new List<Enum1>()\n    {\n        Enum1.const_1 | Enum1.const_2,\n        Enum1.const_0 | Enum1.const_3,\n        Enum1.const_2 | Enum1.const_1 | Enum1.const_2,\n        Enum1.const_3 | Enum1.const_1\n    };\n\n**Decompile**\n    private enum Enum1\n    {\n        const_0 = 1,\n        const_1,\n        const_2 = 4,\n        const_3 = 8\n    }\nprivate static readonly List<Enum1> list = new List<Enum1>\n{\n    (Enum1)6,\n    (Enum1)9,\n    (Enum1)6,\n    (Enum1)10\n};\n\n. I tried another decompiler (Reflector, dotPeek, JustDecompiler) properly decompile.. Yes, I enable folding in options but don't work.. Please try the following code, Thanks for your support.\n        public static unsafe void Test(ref byte* ptr)\n        {\n            ptr += 4;\n        }\n```. Duplicate : https://github.com/icsharpcode/ILSpy/issues/1013. You're right, But if added hexadecimal value in comment like dotPeek decompiler is great.\nIL_0000: ldc.i4 -501 //0xfffffe0b. Another issue with enum.\nCode\n```\nMyEnum value = MyEnum.Val2;\nif (value - MyEnum.Val1 <= 4)\n{\n   Console.WriteLine(value - MyEnum.Val1);\n}\nenum MyEnum : uint\n{\n   Val1 = 0xfffffe0b,\n   Val2 = 0xfffffe0f\n}\n```\nDecompile result\nMyEnum myEnum = MyEnum.Val2;\nif ((uint)((int)myEnum - -501) <= 4u)\n{\n   Console.WriteLine((uint)((int)myEnum - -501));\n}. Yes you are right.. This issue is still there please check with latest version.. ",
    "jbevain": "The Cecil issue is fixed in master. Thanks for finding this!\n. Ccing myself.\n. Using the tip of master, for this code:\n``` csharp\nusing System;\nstatic class VariablesOutsideCheckedBlock\n{\n    static void Test3(int i)\n    {\n        checked\n        {\n            var num1 = 42i;\n            Console.WriteLine(num1);\n            var num2 = 42 * i;\n            Console.WriteLine(num2);\n        }\n        unchecked\n        {\n            var num3 = 42i;\n            Console.WriteLine(num3);\n        }\n    }\n}\n```\nCompiled with csc 4, with and without /debug+, we get:\n``` csharp\n// VariablesOutsideCheckedBlock\nprivate static void Test3(int i)\n{\n    checked\n    {\n        int num = 42 * i;\n        Console.WriteLine(num);\n        int num2 = 42 * i;\n        Console.WriteLine(num2);\n    }\n    num3 = 42 * i;\n    Console.WriteLine(num3);\n}\n```\nWhere num3 is indeed undeclared.\n. I've had a quick look at the issue tonight. The issue is obvious when we see the code between AddCheckedBlocks and DeclareVariables:\ncsharp\nprivate static void Test3(int i)\n{\n    checked\n    {\n        int value;\n        int value2;\n        int value3;\n        value = 42 * i;\n        Console.WriteLine(value);\n        value2 = 42 * i;\n        Console.WriteLine(value2);\n    }\n    value3 = 42 * i;\n    Console.WriteLine(value3);\n}\nAddCheckedBlocks moved all the variables in the checked block. DeclareVariables, when processing the checked block, finds that value3 is not used.\nMoving AddCheckedBlocks fixed the issue for us, but there may be issues we don't take into account. @dgrunwald how do you suggest we move to fix that?\n. Indeed, privatescope maps to CompilerControlled, and is a particular kind of visibility.\n. I also used the opportunity to fix the following case:\ncsharp\nenum Foo { Bar, Baz }\nclass Test {\n    static Foo[] foos = new Foo[] { Foo.Bar, Foo.Baz, ... };\n}\nWhere gmcs 2.10 emits a InitializeArray call as well.\n. In this case, the MemberReferenceExpression has only one annotation, a ILVariable. As it's not ICloneable, the ILVariable is not cloned by Clone().\n. Although it does look weird, my issue was that replacement.Clone() was not cloning its sole ILVariable annotation. Maybe it's fixed now.\n. Cecil 0.10 has a bunch of breaking changes against 0.9. They're documented on the development log.. Also the newdecompiler branch should update to a newer Cecil, they're at 0.10-beta5 and a lot of work has been done on improving the ppdb support.. It's indeed possible that we regressed here :(\nOn Sun, Sep 24, 2017 at 5:54 AM, Daniel Grunwald notifications@github.com\nwrote:\n\nI just managed to reproduce this problem with the\nICSharpCode.Decompiler.Tests.exe assembly. The whole assembly can be\ndisassembled/decompiled without issues, so this is indeed specific to the\nanalyzers.\nThe analyzers use cecil from multiple threads. (multi-threaded\ndecompilation when decompiling a whole project does the same; but there the\ncecil accesses only make up a small portion of the runtime, so races are\nless likely)\nMaybe some parts of the new debug symbol stuff are not thread-safe?\nWe used to maintain our own thread-safe cecil branch, but that eventually\ngot merged into cecil master. Maybe the changes in cecil 0.10 introduced\nnew threading issues? cc @jbevain https://github.com/jbevain\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/icsharpcode/ILSpy/issues/872#issuecomment-331708248,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAE1tAqB3vmw4KnYMlBiFW6yYEQbsmFWks5sllEjgaJpZM4Ph2L5\n.\n. If I get a hand on the assembly, I try to make Cecil not crash.. \n",
    "chillitom": "I see this too on trunk 53ea9503ec9a81b3f253e72f87a813bde0bfe9a7\n. ",
    "Matthew-Bonner": "Please add tabs, this issue has been open since 2011 when tabs where not widely implemented, they are now, and people are used to tabs, please provide the option to either have a new window or a new tab as at present you cannot open multiple tabs at the same time. The reason the .NET Reflector UI has problems with tabs is because you don't get the option to open in a new tab by middle-clicking the mouse. In order to provide tabs you should have a context menu to open in a new tab, middle click on function references and the option to turn tabs on or off and then there won't be any issues.\n. ",
    "migig": "+1 tabs would make it so much more useful\n. ",
    "Verser": "+1\nThis is a very big thing. In general, some UI features could be incredibly helpful. Tabs, Favorite/bookmarks, Projects/Groups (to throw specific parts of assemblies together, like making a link to grouped buggy code).\nI know some of this is on the roadmap, but as someone who uses it almost every day to make obfuscation checks, IL reading, and version differentials, it would be incredibly helpful to have these features. \n. ",
    "kg": "This is a nice improvement to disassembled code quality, but having PDBs enabled seems to break the DeclareVariables AST transform somehow. I'm still trying to figure out how changing variable names could even break anything...\nEDIT: I found the problem. \nIn the original implementation of AssignNamesToVariables, the expression nv.GenerateNameForVariable(varDef, methodBody) does not just generate a name; it updates the table of used names to avoid name collisions. When directly using names from the original symbols, you fail to update that name table correctly and later code can end up producing a collision if the automatic name generation creates a name that collides with a name from the symbols. This is easiest to produce with loop variables named things like 'i'.\nIf you pull the last stage of GenerateNameForVariable into a helper method, like so:\n\n  string EvaluateProposedName (string proposedName) {\n            if (!typeNames.ContainsKey(proposedName)) {\n                typeNames.Add(proposedName, 0);\n            }\n            int count = ++typeNames[proposedName];\n            if (count > 1) {\n                return proposedName + count.ToString();\n            } else {\n                return proposedName;\n            }\n        }\n\nAnd then use it like this:\n\n                        varDef.Name = nv.EvaluateProposedName(varDef.OriginalVariable.Name);\n\nThen the collisions are avoided.\nI have a fixed version in my fork:\nhttps://github.com/kevingadd/ILSpy/commit/818b53234f3bc39aec1c04d595561b0169f145c8\nI don't have an isolated test case, but I can provide the sample application that caused the bug to reproduce for me.\n. This seems to work correctly for me, regardless of whether yield return decompiling is turned on. (With it on, they have their original names; with it off, they have the proper mangled names). It might rely on having the PDBs available.\n. I have a partial implementation of this in https://github.com/kevingadd/ILSpy/commit/f65f90be219e93704f46cd0e0085c17a7b0681ae . I may never finish it, since it currently provides all the metadata I need (I use ILAst instead of C# AST), but if anyone wants to own finishing this I'd be glad to help you out.\n. You could potentially emulate this without a goto using a construct like this:\ncsharp\nfinally {\n  do {\n    ...\n  } while (false);\n}\nAnd use 'break' as your equivalent of endfinally. Messy, though.\n. Reflector decompiles one of the fields like this in IL mode:\nmsil\n.field assembly static valuetype <PrivateImplementationDetails>{34C7E1EC-A9EF-4BEB-AA94-C238F254E77B}/__StaticArrayInitTypeSize=64 $$method0x6000001-1 = ((00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 01 00 00 00 01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00))\nAnd in C# mode, the field looks like this:\ncsharp\ninternal static __StaticArrayInitTypeSize=64 $$method0x6000001-1; // data size: 64 bytes\nReflector seems to use the decompiled field data to reconstruct the array initializer:\ncsharp\npublic static void Main(string[] args)\n{\n    int[][,] array = new int[][,] { new int[,] { { 0, 0, 0, 0 }, { 1, 1, 1, 1 }, { 0, 0, 0, 0 }, { 0, 0, 0, 0 } }, new int[,] { { 0, 0, 1, 0 }, { 0, 0, 1, 0 }, { 0, 0, 1, 0 }, { 0, 0, 1, 0 } }, new int[,] { { 0, 0, 0, 0 }, { 1, 1, 1, 1 }, { 0, 0, 0, 0 }, { 0, 0, 0, 0 } }, new int[,] { { 0, 0, 1, 0 }, { 0, 0, 1, 0 }, { 0, 0, 1, 0 }, { 0, 0, 1, 0 } } };\n    Console.WriteLine(array.Length);\n}\nThe necessary data appears to live in the FieldDefinition.InitialValue property, so it looks like Cecil is loading the data correctly.\n. I don't use C# AST, so I can't do any verification beyond the example case I provided you. I use ILAst; I merely noticed that ILSpy was missing this feature so I filed a bug with the test case I used for my own implementation. Sorry if I misled you into thinking I needed this!\n. I'm not totally clear on the structure of your fix, but is it possible to avoid the forward scan by doing a backwards fixup instead?\nFor example:\nUpon hitting a call to RuntimeHelpers.InitializeArray, scan backwards for the declaration of that variable, and move that declaration from its previous location into the location of the InitializeArray call. After moving it, hoist the declaration from the InitializeArray call into the newly moved declaration and remove the call. This would change:\ncsharp\nint[] a;\nif (false) {\n  RuntimeHelpers.InitializeArray(a, ...);\n}\ninto\ncsharp\nif (false) {\n  int[] a = ...;\n}\nWhich preserves semantics.\nTo handle nested array initialization, those individual inlined declarations could then be inlined into the declaration of the parent array by a later optimization pass, since they have become constant expressions as a result of removing the RuntimeHelpers call(s).\n. Understandable. Let me know if I can do anything to help.\n. An ILAst level switch transform would be super useful for me as well. Let me know if I can do anything to help with that (it'd let me remove JSIL's version of the switch transform). I'd offer to implement it myself but dominators and SSA both make my head hurt because I don't understand academic CS :)\n. Actually, stepping through the code, this might be correct due to the field assignment. I'm not totally sure.\n. I wasn't entirely sure if the expected type should have propagated down to the newobj expression, but that explanation makes sense. Sorry for the false alarm :)\n. After further investigation it looks like the ILAst is okay - the semantics for nullableof/valueof/wrap are just super, super weird. So the only problem here is the GetValueOrDefault calls - mostly cosmetic.\n. Oh, I see... !0 is different from !!0, so I think that's a positional reference to a type parameter... so that means the first type parameter for the enclosing type, which would be T. Is this just a failure to expand the !0 to T?\nEdit: Digging through the ECMA MSIL spec suggests this is the case. I've never seen the !0 form before this, though, so I assume it's intended for it not to be exposed.\n. I see, thanks for the clarification. I will keep an eye out for opportunities to try and improve on this in the ILSpy part of things. I had forgotten about #326, unfortunately :)\n. Thanks, that's great to hear! I'll look into the new branch at some point, and it sounds like since it's simpler it should be easier to contribute fixes for.. Here is a fix:\nhttps://github.com/kg/ILSpy/commit/461f6f10930299943c6ecdc63defe516eab985cb\n. The output C# doesn't necessarily look wrong, but the ILAst is wrong.\n. Looks like it works here on Windows; I'll get you a binary from mcs next time I'm at work.\n. Didn't stash the dll anywhere on this machine and I can't reproduce it anymore since I put in a workaround. :/\nFor reference, the problem seemed to be in type inference. I checked the dll with mono's disassembler and it was using the proper types, but the ILAst had float expected types. Not sure how it happened; can't see any code in ILSpy that would do this either.\n. ",
    "pgourlain": "you right, i will remove it from SharpTreeNode\n. Hi,\ndgrunwald: ok, Your comment helps me better understand the architecture of ilspy (the separation of concerns). I'll fix it\npentp : of course ngen can be used, but elevated privileges is needed to use it. I wanted to use the windows forms because I thought (wrongly) that will appear most quickly than wpf windows at startup. I'll fix it too. \n. i merged with the latest version, and for me it works fine.\n. yes you right, i implemented a \"stupid\" alogrithm that check only 'IsPublic' property from cecil definition.\ni will fix it\n. the second commit is to resolve this problem : I have a plugin that manage bookmarks, and to select in the treeview i use FindTreeNode. When the user want to keep a bookmark on resource node, the findtreeNode return null. I add a case in the \"switch/case\".\n. actually you can be right. I will propose an alternative solution.\nwhat do you think about a kind of \"breacrumb\" ('fil d'ariane' in French) in status bar  for selected item ?\n. ",
    "ALyman": "I managed to completely destroy my github repo right there.  Thankfully, I have .patch files for everything I've done, so I'll just re-fork and re-submit this :P\n. (a) Not sure if it makes sense to have a difference between keyboard and mouse nav, but I do see your point about the scrolling-through-the-list-with-a-keyboard-shouldn't-create-50k-items-in-the-history thing.  How's this for the compromise: if, when navigating, the previous item was on-screen for < .5s (or so, we can tune to taste), just replace it in the history (from your example, this would be what happened from C => D).\n(b) I like it.  One question, though: in your mind, is it the nodes that make it different, or both the nodes and the state?  I'll play with both thoughts, and see what happens.\n. Ok, I've added some commits that match my thoughts on what you've said.  Let me know if anything else seems off on it,\n. I have some thoughts on how to do this, but I don't have enough working knowledge of the NRefactory pattern-matching stuffs to make a production-ready push on it.  I'll hack something together as a POC, and maybe somebody can sync up with me on how to make it maintainable/pretty.\nBasically, the \"__StaticArrayInitTypeSize=64\" is a red-herring -- the FieldDefinition itself contains the data (see the InitialValue property) -- its just a matter of finding the statements and then decoding the binary data into the proper AST.\n. Kevin,\nThis is fixed and in master as of f4d0f7f81a36c06db2bf.  Can you verify that your particular use case is now functioning as expected?\n. Just looked into this one a bit -- surprisingly enough, the first cast is technically correct (even though it doesn't look it on first glance) -- its really behind-the-scenes dropping the higher 32 bits off.  The second is a bit more problematic: this one is coming out of the type inference from the outer cast -- I'm not quite sure how to go about fixing this.\n. My gut says that this and #241 are related, possibly so much so that the fix for one will probably fix the other.\n. decimal.MinValue/MaxValue: I copied the pattern that is just below if, for float.PositiveInfinity/NegativeInfinity/NaN.  I could push it up to a higher level easily (my initial look at it, I thought AstMethodBodyBuilder.TransformByteCode//ILCode.Ldc_Decimal was a good spot for it), but if thats the case, then the float/double values should probably be moved as well.\nAs for forward scanning, it's the only way to pick them all up -- there can be a variable number of instructions between the variable declaration and the actual call to RuntimeHelpers.InitializeArray (the number depends on the number of levels of arrays-of-array-of-arrays that is being initialized).  From usage (at that point in the execution), it seems to me that ILBlock contains only the single basic block, so it should be safe to ignore branches/jumps/returns.  If that is not the case, then some logic should be added to do stop the scan on branch.  Worst-to-worst, InitializeArray() could be translated as multiple assignments (\"array[0] = ...; array[1] = ...;\"), but that loses round-tripping and it destroys the InitializeArray() semantic of atomicity.\nArrayCreateExpression: I'd change AdditionalArraySpecifiers to be just ArraySpecifiers, and include the top-level specifier.  Right now, the rank of the top-level specifier is inferred based on the Arguments array, which causes some semantic weirdness when you need a certain rank, but don't want to assign them lengths.  The current patch uses EmptyExpression as a work-around, but this is less than ideal, as it gives a node where there logically isn't one.  This is the primary cause of the weird spacing issue.\n. I'll ponder a bit more on the forward-scanning thing, try to come at it from a different angle as kevingadd suggests. Unfortunately, it looks like the pattern might be a bit misunderstood: if you were to translate what's happening at the IL level into C#, it would be a bit like this: \"new int[] /* do some other stuff here */ { 0, 1, 0 }\"\nAt the point where InitializeArray gets called, the \"a\" in kevingadd's example doesn't \"exist\" yet.\n. I can't seem to find a decent test-case for the \"do some other stuff here\" part, so it's possible that C# itself doesn't generate code that way.  The spec says its kosher, though, so I'd assume that it is.  In the mean time, I'll remove the loop on the forward scan, so it does just check the next instruction.\nFor the MinValue/MaxValue thing: you think I should move it, or change the test to include constant-literals instead?\n. Oh!  ArrayCreateExpression: I'd suggest not having the top-level specifier at all: push it all the way down into the Specifiers collection and be done with it.  This might lend itself to moving the expressions down to the specifier level as well.\nOut of curiosity, from the parsing perspective, how would a multi-dimensional array initializer parse?  i.e.: new int[,] { { 0, 1 }, { 2, 3 } }?  AFAICT, the length-less multi-dimensional can't be represented in the current Ast without resorting to EmptyExpression, but if I'm wrong, whatever it parses to is probably cleaner all-around.\n. I noodled a bit on the ArrayCreateExpression stuff, and I've hacked up the changes I'm thinking.  Not sure if I should attach to this same pull request (I'm guessing not), but it does build on top of it, soo... thoughts?\nMy only issue is that I have no idea how to test the CSharpParser (I made what I think are correct changes to it, but I don't know if they \"work\").  And hints/tips?\nHere's the branch: https://github.com/ALyman/ILSpy/tree/ArrayCreateExpression-Normalize\n. My gut says that this and #239 are related, possibly so much so that the fix for one will probably fix the other.\n. ",
    "extesy": "Still reproduces in 1.0.0.822.\n. This is for version 1.0.0.822\n. Here's the code: http://pastebin.com/KFGa2XYv\n. I have sent you this assembly few days ago, hopefully it helps.\n. Yes, it works fine. Maybe .net framework treats this situation as a special case to avoid crashing?\n. Yes, I can confirm that this particular method is executed.\n. I agree, using explicit 'goto' statements looks like the best way to represent such scenario.\n. ",
    "RKlier": "This pull request is obsolete since a sort method was already added to ILSpy/AssemblyList.cs. UI elements could be integrated through a plugin assembly.\n. The additional commits fix the problems listed by Eusebiu.\nSome remarks:\n2. Showing the CurrentLineBookmark is a good way to jump to the current line while debugging without need to open the callstack panel. I added an option to enable/disable this behaviour on the debugger options page.\n3. Showing module name, argument names and values could be switched via context menu in callstack panel\n5. I think this should be done as a seperate step. It is independant from the contents of this pull request. There are some points to be considerd too:\n- Breakpoints are just special bookmarks. Save should include all bookmarks which want to be saved (e.g. it's sense less to store CurrentLineBookmark).\n- Since ILSpy has support for different assembly lists, the bookmarks should be stored per list. Otherwise the lists get mixed through loading of bookmarks.\n. You're right. I changed the code so that the callback is passed to the decompilation and only called if it succeeds (no exception occured). The DecompilationFinished event is now decorated with language and decompiled tree nodes.\nBy the way: The cancellation of the decompile process results in an exception stack trace being shown. I think there should be a special handling, perhaps like for OutputLengthExceededException or at least a simple message.\n. Hi, \nI tried to reproduce your scenario, but without success.\nSo could you please provide some more information, e.g.:\n- Did you use a debug or release build of ILSpy / your test application?\n- Against which .Net framework is the test application build?\n- Best would be a callstack for ILSpy in the freeze.\n. OK, so the best solution would be to check for known operator type before calling CreateOperator and to call CreateMethod for unknown operators. Or just ommit the cast for unknown operators?\n. ",
    "justinmchase": "For example:\nusing System;\nusing System.Collections.Generic;\nnamespace ConsoleApplication1\n{\n  public interface Foo<T> where T : class\n  {\n    IEnumerable<T> GetItems();\n  }\n}\nCorresponding IL:\n.class interface public auto ansi abstract Foo`1\n{\n  // Methods\n  .method public virtual hidebysig abstract newslot \n    instance class [mscorlib]System.Collections.Generic.IEnumerable`1<T> GetItems () cil managed \n} // End of class ConsoleApplication1.Foo`1\n. So it is... somehow I was unable to do it yesterday for .exe's or .dll's. If I find out how to reproduce that I will file a new bug. Seems to be working now though. Go figure.\n. Perfect! Thanks.\n. Yes, this is being used inside a network where proxy usage is required. Other apps can use the proxy settings correctly, obviously but to be honest the above stack trace is all I actually know about the nature of the problem. I am not sure if it has to do with detecting the settings or failing to authenticate or anything else. If you need further information or for me to run some tests feel free to ask.\n. ",
    "KrisVandermotten": "Looking 1.0.0.816, I notice that the \"Extension Methods\" type analysis only shows extention methods that directly extend the type, not those that indirectly extend it. For example, in analyzing System.Collections.Generic.List, you don't get to see the extension methods defined on IEnumerble in System.Linq.Enumerable (but you do see them when analysing System.Collections.Generic.Enumerable). Intentional or bug?\nThis topic is closed, hopefully someone is still reading it.\n. Formatting numbers is not changed. \nBy calling .ToString() on the integers, we can avoid the boxing operation. note that the .ToString() method would be called anyway on the boxed int.\nOr maybe I don't understand exactly what you mean. In that case, please explain.\n. Like I said, they're micro-optimizations found by automated static analysis tools. Some of them probably don't help a lot, but also don't hurt (with the exception of the first one in ControlFlowNode - well spotted pentp - my mistake - sorry).\nSome of these do help. All of the LINQ to Objects optimizations are in this category, including the ones in GotoRemoval, ILAstBuilder, ILAstTypes and LoopsAndConditions. They do make the program faster, and they make it use less memory (which I believe to be important as well). They don't make the program any less maintainable, so why not?\nI never claimed this to be a big thing. I'm just trying to help here. This was my first step, mainly intended to get to know the process and GitHub (I'm used to TFS).\n. I'm closing this pull request, as I no longer feel it should or believe it will be pulled.\n. I agree with eusebiu about F3: there really is no need to change anything.\nHowever, if we're dreaming about the ultimate user experience, ideally a small search box should always be visible, right aligned in the toolbar. And it should look and behave more or less like the search box in FireFox or IE8.\n. I haven't checked you're code, so this may just be a misunderstanding. But a static class is not a sealed class with no public constructor. It's a sealed abstract class.\n. The problem is that classes with only private contructors may still have useable instance members, as the private constructor may be called in a public static factory method, or even via reflection. Only classes that are both sealed and abstract are truely \"static\". In fact, one could argue that they should also inherit from System.Object directly.\nIn my mind, two things hold true:\n- classes must decompile only as static, if that decompiled code can be compiled by a C# compiler, and yield the same metadata and equivalent IL (i.e. it's not the use of the keyword static that makes it fail compilation, for example because instance methods exist).\n- an icon for a static class should be used only on classes that decompile as static classes.\nPS. I noticed you added an additional commit. I haven't checked it, but assume it now implements this corretly. This is just chatting.\n. this is related to issue #167.\n. It's probably true that this is a \"false positive\", in the sense that no COM is involved. However, in the scenario above, my i7 quad-core with hyperthreading and 8 GB RAM could not service the windows message queue on the main thread. The application was effectively not responding.\nI have reported this as a matter of principle: I report everything. But I do agree that the scenario of opening such a large quantity of assemblies at once is asking for trouble. You probably have other priorities and I am absolutely fine with that.\n. Why an option? You could do this as soon as you have three or more calls, always.\n. What exactly do you mean when you say \"not decompiled correctly\"? That output looks correct to me.. ",
    "ivanjh": "Example C# code:\nint i=0; \nMethod(i++);\nMethod(i++);\nILAstOptimizer.IntroducePostIncrementForVariables should recognise these two postincrements:\nstloc:int32(var_0_02, ldc.i4:int32(0))\nstloc:int32(expr_04, ldloc:int32(var_0_02))                       <- 1st\nstloc:int32(var_0_07, add:int32(expr_04:int32, ldc.i4:int32(1)))  <- 1st\ncall:void(Class::Method, expr_04:int32)\nstloc:int32(expr_0F, ldloc:int32(var_0_07))                       <- 2nd\nstloc:int32(var_0_12, add:int32(expr_0F:int32, ldc.i4:int32(1)))  <- 2nd\ncall:void(Class::Method, expr_0F:int32)\nBut variable splitting has created var_0_2 & var_0_07 and var_0_07 & var_0_12 (all come from the same original variable), and so they aren't recognised as being the same.\nIf we simply check if the original variables are the same, with something like:\n((ILVariable) exprInit.Operand).OriginalVariable == ((ILVariable) nextExpr.Operand).OriginalVariable\nThen the post-increments are recognised:\nstloc:int32(var_0_02, ldc.i4:int32(0))\nstloc:int32(expr_04, postincrement(1, ldloca:int32(var_0_02)))  <- 1st\ncall:void(Class::Method, expr_04:int32)\nstloc:int32(expr_0F, postincrement(1, ldloca:int32(var_0_07)))  <- 2nd\ncall:void(Class::Method, expr_0F:int32)\nBUT we've broken the flow, as we've removed initial assignment references to the split variables, and others may remain.\nBUT By luck, RecombineVariables collapses these back to a single variable:\nstloc:int32(var_0_02, ldc.i4:int32(0))\ncall:void(Class::Method, postincrement(1, ldloca:int32(var_0_02)))\ncall:void(Class::Method, postincrement(1, ldloca:int32(var_0_02)))\nSo, it may appear to work, but would cause problems with any processing of the dozen or so steps between IntroducePostIncrement & RecombineVariables.\nThe only solution that makes sense to me, is recombining the variables involved once a post-increment (based on OriginalVariable) is recognised.\n. Fix proposed in: http://github.com/icsharpcode/ILSpy/pull/166\n. Yeah... that's completely disabled the debugger.\n. ",
    "CodesInChaos": "I agree with Kris. The search input should be in the right part of the toolbar and be always visible. Once you search the current panel is shown.\n. ",
    "liviuu": "That is indeed strange, because ILspy is able to decompile correctly the following:\npublic void Linq1()\n{\nint[] numbers = new int[]\n{\n    5, \n    4, \n    1, \n    3, \n    9, \n    8, \n    6, \n    7, \n    2, \n    0\n};\nIEnumerable<int> lowNums = \n    from num in numbers\n    where num < 5\n    select num;\nConsole.WriteLine(\"Numbers < 5:\");\nforeach (int x in lowNums)\n{\n    Console.WriteLine(x);\n}\n}\n. ahhh, sorry, it was obvious...\n. Yes, a configuration setting would be perfect.\n. I forgot to mention that :) . AvalonEdit comes with Sharpdevelop default\ncolor scheme, which is a little unusual for anybody that uses mostly Visual\nStudio.\nOn Tue, May 10, 2011 at 2:05 PM, manunt \nreply@reply.github.comwrote:\n\nOne more useful thing would be color themes for C# code. SharpDevelop\nhighlighting looks unusual for people that are using different IDEs.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/icsharpcode/ILSpy/issues/176#comment_1130275\n. I know that these are esthetic issues that and you guys are focused more on core functionality.\nMaybe i would help implement them if it's no problem ;)\n. Ok.\nI am mostly interested in ILSpy core features and much more in the\nprogrammatical use of ILSpy. I have the feeling that the coding was not\nreally done with this in mind.\nFor example, a great use for ILSpy could be to programmatically analyze\nassemblies and detect some high level anti patterns that are specific to\neach project's codebase ( Continous integration post build checks)\n\nI used nrefactory on the source code but ILspy could offer more typed\ncontext and i it would be far easier than building FxCop rules.\nRegards\nOn Tue, May 10, 2011 at 2:15 PM, eusebiu \nreply@reply.github.comwrote:\n\nMaybe you can make a MEF plug-in... :)\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/icsharpcode/ILSpy/issues/176#comment_1130304\n. \n",
    "denismarkelov": "One more useful thing would be color themes for C# code. SharpDevelop highlighting looks unusual for people that are using different IDEs.\n. ",
    "pepri": "Sorry for the duplicate, now I have found that this should be resolved (https://github.com/icsharpcode/ILSpy/issues/46).\n. ",
    "ncave": "Should also help fix #149 NullReferenceException trying to decompile a class in a silverlight assembly, as it is probably the same issue.\n. ",
    "Pondidum": "One thing I forgot to mention is that I used two random icons from the existing ones for the two buttons I added, as I wasn't sure on where you get your icons from.\n. ",
    "mcknell": "+1\n. ",
    "PumaOmaR": "The biggest problem is that if you check for null inside the == overload, it will make an infinite loop.\nFor example:\npublic static bool operator ==(XQName x, XQName y)\n{\n    if (object.ReferenceEquals((object) x, (object) y))\n        return true;\n    if ((object)x == null || (object)y == null || !(x.Name == y.Name))\n        return false;\n    if (x.Namespace != null && y.Namespace != null)\n        return x.Namespace == y.Namespace;\n    else\n        return true;\n}\nwill be converted to something similar to:\npublic static bool operator ==(XQName x, XQName y)\n{\n    return object.ReferenceEquals(x, y) || (x != null && y != null && x.Name == y.Name && (x.Namespace == null || y.Namespace == null || x.Namespace == y.Namespace));\n}\nAnd here we lost the object cast and it results in an infinite loop.\n. ",
    "tomrus88": "I'm using latest development snapshot. Method IL code: http://pastebin.com/Uup8fng1\n. ",
    "uno007": "Strange, that file was present but it did not work.\nI deleted all ILSpy files, redownloaded and unzipped the beta and now it works again.\n. Indeed, it works now in build 1.0.0.970. :)\n. ",
    "DickvdBrink": "Hi,\nThe /navigateTo can be used like this:\n ILSpy.exe /navigateTo:T:ICSharpCode.ILSpy.ILSpySettings\nThis way it will open the class ILSpySettings right away.\nThere are different options depending on what you want.\n'T': Type\n'F': Fields\n'P': Properties\n'E': Events\n'M': Methods\nI dont think there is a way (currently) to navigate to an assembly right away.\n. when you put this in the NavigateTo command it wil find it:\n/navigateTo:M:ICSharpCode.ILSpy.MainWindow.OpenFiles(System.String[],System.Boolean)\nI like your suggestion that it should find the method even without parameters, but what should it do in cases with method overloading?\n. If you delete all lists, they will be recreated ;p\nI created the Assembly list feature, it works but it needs some improvement for usability.\nWhen I have time, I will add a reset button, but I currently don't know where to place it because there isn't much space left on the dialog. \nDo you have any suggestions where to place the button or maybe some other usability improvements?\n. ",
    "timhe": "I see your point.  Optimally, only modules on the command line would be searched, and the first occurance of would be the node navigated to..  \nBut, this has the possibility of being inconsistant.. This was really just my attempt to workaround bug #225\n. Ahh. Thank you.   I tried /navigateTo:M:ICSharpCode.ILSpy.MainWindow.OpenFiles(string[]) Like it shows up in the ILSpy tree, but it needed /navigateTo:M:ICSharpCode.ILSpy.MainWindow.OpenFiles(System.String[]).\nNavigate should take you to the first instance it finds. If you want to get more specific with the NavigateTo Switch, specifying the parameters should take care of that.\nExample:\n3 methods:\nOpenFiles(System.String[], System.Boolean);\nOpenFiles(System.String[]. System.Object);\nOpenFiles(System.Object);\nSpecifying no paramters, would take you to the first one in the list.\nSpecifying System.String[] would take you to the first overload that contained System.String[]\nSpecifying System.Object would take you to the last overload (as it was an exact match)\n. I hope something like this gets implemented.  So far i have only been able to implement /NavigateTo:M: if i detect the Method has no paramaters.\nI dont think i would be able to figure out how to programmatically(or even manually) navigate to a LINQ method, or even something simpler like this\nSystem.Collections.Generic.IarraySortHelper.BinarySearch(TKey[],int,int,TKey,IComparer)\nAlso, some methods, even with no paramaters seem unnavigatable:\nie\n/navigateTo:M:ICSharpCode.ILSpy.GacInterop..cctor\n. Looks like you are correct:\n\u2022 The second part of the string is the fully qualified name of the element, starting at the root of the namespace. The name of the element, its enclosing type(s), and namespace are separated by periods. If the name of the item itself has periods, they are replaced by # (U+0023) characters. (It is assumed that no element has this character in its name.\nI will submit a patch that fixes this correctly when i get home in about 8 hours\n. Thanks eric.  I think this would close out #225 as well.\n. ",
    "Kha": "Thanks for your elaborate feedback and sorry for the late response!\n@KevinCathcart: Here's my try at a progress bar for the search pane: 36173cc3eb12949ed99f5e0b08cb06254b4b6285. (/edit: Actually, as you mentioned, this separate feature should probably be split off into a new pull request)\nRegarding the search for multiple terms - wow, never noticed that in Reflector :) . One way to merge these two features would be to order by the first term only. That way a search for \"datagrid controls\" should push the WPF DataGrid class to the top; looks like a pretty interesting combination of features to me!\n@dgrunwald: Originally I had two completely separate features in mind: pushing exact results to the top and enabling camel case search. Only when I looked at the code completion implementation, I realized I could kill those two with one stone.\nHowever I now see ordering by those 6 priority levels could be a bit overkill, disturbing the \"natural\" sorting by assemblies/namespaces. Maybe the original code completion logic - simply focusing the best match - wouldn't be so bad after all?\n. ",
    "GregBrant": "I'm on Windows 7 Home Premium (6.1 build 7601), logged in as a non-admin user.\nI double click the exe, the task appears in task manager for a few moments then disappears. When I try running the app with elevated privileges, the same happens.\nI get three entries in the Windows Application Log.\nEntry 1\nApplication: ILSpy.exe\nFramework Version: v4.0.30319\nDescription: The process was terminated due to an unhandled exception.\nException Info: System.TypeLoadException\nStack:\n   at System.Xaml.XamlNodeQueue..ctor(System.Xaml.XamlSchemaContext)\n   at System.Windows.Baml2006.Baml2006Reader.Initialize(System.IO.Stream, System.Windows.Baml2006.Baml2006SchemaContext, System.Windows.Baml2006.Baml2006ReaderSettings)\n   at System.Windows.Baml2006.Baml2006Reader..ctor(System.IO.Stream, System.Windows.Baml2006.Baml2006SchemaContext, System.Windows.Baml2006.Baml2006ReaderSettings, System.Object)\n   at System.Windows.Markup.XamlReader.LoadBaml(System.IO.Stream, System.Windows.Markup.ParserContext, System.Object, Boolean)\n   at System.Windows.Application.LoadComponent(System.Object, System.Uri)\n   at ICSharpCode.ILSpy.App..ctor()\n   at ICSharpCode.ILSpy.App.Main()\nEntry 2\nFaulting application name: ILSpy.exe, version: 1.0.0.1000, time stamp: 0x4e21c133\nFaulting module name: KERNELBASE.dll, version: 6.1.7601.17625, time stamp: 0x4de88429\nException code: 0xe0434352\nFault offset: 0x000000000000cacd\nFaulting process id: 0x1fd8\nFaulting application start time: 0x01cc4911120380ed\nFaulting application path: C:\\Users\\Greg\\Downloads\\ILSpy_1.0.0.1000_Binaries\\ILSpy.exe\nFaulting module path: C:\\Windows\\system32\\KERNELBASE.dll\nReport Id: 54580a1a-b504-11e0-8d5c-1c7508007ab6 \nEntry 3\nFault bucket 2161284752, type 5\nEvent Name: CLR20r3\nResponse: Not available\nCab Id: 0\nProblem signature:\nP1: ilspy.exe\nP2: 1.0.0.1000\nP3: 4e21c133\nP4: PresentationFramework\nP5: 4.0.0.0\nP6: 4d5367fc\nP7: 68ff\nP8: 21\nP9: System.TypeLoadException\nP10: \nAttached files:\nC:\\Users\\Greg\\AppData\\Local\\Temp\\WER3515.tmp.WERInternalMetadata.xml\nThese files may be available here:\nC:\\Users\\Greg\\AppData\\Local\\Microsoft\\Windows\\WER\\ReportArchive\\AppCrash_ilspy.exe_614b3bc5cce3831383a7534f73bae733422de44f_1862533f\nAnalysis symbol: \nRechecking for solution: 0\nReport Id: 54580a1a-b504-11e0-8d5c-1c7508007ab6\nReport Status: 0\nIf you provide me with the means, I can send you the error report attachment from the last Log entry. \n. Yep,\nUninstalled .NET 4.0 Client and 4.0 Extended and reinstalled the full framework from (http://www.microsoft.com/download/en/confirmation.aspx?id=17851) and it fixed it.\nThanks \n. ",
    "lumimies": "I've found some small and minimally different test cases, I hope this helps\ncsharp\nstatic class Foo {\n    public static void Test0() { // fail\n        TestHelp(new { x = 0, l = 0 },n => checked(new { x = n.x+1,l =n.l+1}));\n    }\n    public static void Test1() { // pass\n        TestHelp(new { x = 0 },n => checked(new { x = n.x+1}));\n    }\n    public static void Test2() { // pass\n        TestHelp(new { x = 0, l = 0 },n => new { x = checked(n.x+1),l =n.l+1});\n    }\n    public static void Test3() { // pass\n        TestHelp(new { x = 0, l = 0 },n => new { x = n.x+1,l =checked(n.l+1)});\n    }\n    public static void Test4() { // fail\n        TestHelp(new { x = 0, l = 0 },n => new { x = checked(n.x+1),l =checked(n.l+1)});\n    }\n    public static T TestHelp<T>(T t, Func<T,T> f) {\n        return f(t);\n    }\n}\n. ",
    "95ulisse": "First of all, sorry for the late response, but I had no time to work on it yesterday.\nAnyway, I must thank you for your suggestions and advices: you are perfectly right, and I tried to add the missing features you pointed out.\nHere's what I did:\n\nThe AssemblyResolutionException seemed to be caused by the wrong propagation of the AssemblyResolver from the \n    original AssemblyDefinition (and its main module) to the secondary modules \n    (ILSpy, in fact, doesn't use the Cecil's default AssemblyResolver). Commit \n    b71bda5c6bbbe9774508cb5e6200f24d143e07d6\nFor the NullReferenceException it's about the same thing: Mono.Cecil doesn't fill the Assembly property of the secondary modules, so I added some lines to \n        mantain a reference to the parent assembly, even in the secondary modules. I had \n        already discovered this \"strange\" behaviour in the class ILSpy.TreeNodes.AssemblyListTreeNode, \n        but with a little workaround I solved the problem; since now the Assembly \n        property is always filled in, I removed that workaround. Commit \n        81737f676fe9ba98197169ecbacef88d7ca3cef1Note: I don't like changing \n        Mono.Cecil's sources, but I haven't found a better way to achieve the same \n        result. Have you got other ideas?\nTo allow the exporting of a multi-module assembly as a solution, I added a \n        new filter in the SaveFileDialog which allows to save multi-module assemblies as \n        a Visual Studio 2010 solution (*.sln), and changed the saving behaviour: I \n        created a directory for each module and in each of them I saved the project \n        containing only the types of the associated module. The secondary module \n        projects are compiled as NetModule and the primary one as a full assembly \n        referencing the other modules. In the end, the solution is created to put all \n        the assemblies together. Commits 2e53661f8a7dd0c8a819495b8be58f31ce0ac0ac (for \n        C#) and c61d3701c87750d6d8edacde411120a7ac60963d (for VB).Note: I haven't \n        been able to manually specify the startup project, but I played with the build \n        order to make the solution compile anyway.\nTo move the module-level declarations in the module tree nodes I changed the \n        base Language class to allow decompilation of modules, and I moved the code \n        responsible of that decompilation to the new method DecompileModule. (only for \n        the IL language) Commit ee23840400d2747b9895287dca557be079818651\nFor the C# and VB languages, I first moved the attributes like runtime or \n        architecture and then I modified the AstBuilder and the languages to move the custom attributes.\n        Commits 9fe9a4f429aaed6759827cf4d790e15031be6a9a and 367a0425a75d5d1bf6bff4588571ad7306892b50\n\nI hope these changes are useful, but if you want to point out something else, you're welcome!\n. You're perfectly right: a secondary module has no relationships with any assembly.\nI've undone the modification, and fixed various exceptions.\nThis is what happens when you're lazy, but I'm going to remove the laziness from my todo list!\n. First of all, I apologize for the delay in reply, but the school was started and the first weeks are always a bit \"dramatic\"!\nI fully agree with your observation, I know that multi-module assemblies are very rare, and I propose an alternative solution: in the case of single-module assemblies, the module node is directly displayed expanded, while in the rare case of multi-module, module nodes will be collapsed.\nI think it's still appropriate to leave the module nodes visible, since some of their aspects are separated from the assembly (i.e.: module-level attributes, type forwarders, ...), and having two different nodes (one for the assembly, and another for the module) might help separating the concepts.\nTell me what you think, so I can apply the changes.\n. ",
    "zippy1981": "Was this ever applied? I had a similar issue once.\n. ",
    "alexrp": "Ping. This is a showstopper for using ICSharpCode.Decompiler in projects using strongly named assemblies.\n. ",
    "leppie": "Imfamous Reflector issue, and the reason I stopped using it :)\n. It would be better to use MethodAttributes.CompilerControlled.\n. Ed, see the patch. \nYou can see the attributes used here: https://github.com/leppie/IronScheme/blob/master/IronScheme/Microsoft.Scripting/Generation/TypeGen.cs#L155.\n. It goes through that switch, then fails with the exception, and a gazillion popups!\n. Thanks Ed :)\n. ",
    "aspark": "thank you, i just run the latest build. the problem is solved.\n. ",
    "jcdickinson": "Some more info:\n- It only happens with the release build.\n- All the assemblies in the directory have been NGen'd.\n  - I uninstalled the native images and the issue persists; but becomes more intermittent.\n- It has become intermittent (but rarely doesn't freeze) - running the application a second time is now guaranteeing the freeze.\n- I have VS11 on my machine - it seems to be affecting the FX4.0 runtime/RCW (I am using VS10 to debug):\n\ntext\n    // Marshal.FinalReleaseComObject(obj);\n    Debugger.Core.dll!Debugger.Interop.TrackedComObjects.ReleaseAll()   C#\n    Debugger.Core.dll!Debugger.NDebugger.TerminateDebugger()    C#\n    Debugger.Core.dll!Debugger.MTA2STA.EnqueueCall.AnonymousMethod__1() C#\n    Debugger.Core.dll!Debugger.MTA2STA.PerformCall()    C#\n    Debugger.Core.dll!Debugger.MTA2STA.PerformAllCalls()    C#\nI tried the following workaround:\n``` C#\n    public static int ReleaseAll()\n    {\n        lock(objects) {\n            int count = 0;\n            foreach(WeakReference weakRef in objects) {\n                object obj = weakRef.Target;\n                if (obj != null && weakRef.IsAlive) {\n                    // This could leak memory like a beast.\n                    Timeoutize(() => Marshal.FinalReleaseComObject(obj), 100, false);\n                    count++;\n                }\n            }\n            objects.Clear();\n            objects.TrimExcess();\n            return count;\n        }\n    }\nstatic void Timeoutize(Action action, int millisecondsTimeout, bool throwException)\n{\n    if (action == null)\n        throw new ArgumentNullException(\"action\");\n    var ar = action.BeginInvoke(null, null);\n    if (!ar.IsCompleted) {\n        if (!ar.AsyncWaitHandle.WaitOne(millisecondsTimeout) && throwException)\n            throw new TimeoutException();\n    }\n    action.EndInvoke(ar);\n}\n\n```\nThe freeze persists - so it looks like something is going badly wrong with the COM interop.\n. d'oh. I am using 2.0.0.1564 from 2012/02/19.\n. ",
    "miloush": "+1. Couldn't the type arguments be visible in the tooltip for example?\n. ",
    "rebulanyum": "Okay! I found my own way to get baml files to convert xaml files:\n1. Add System.Activities.Presentation reference to the ILSpy.BamlDecompiler project references.\n2. In the KnownInfo.cs make the following changes:\n    a. In the void LoadKnownAssemblies40() method:\n        KnownAssemblyTable = new string[5]; -> KnownAssemblyTable = new string[6];\n        KnownAssemblyTable[5] = \"System.Activities.Presentation, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\";\n    b. In the public KnownInfo(ITypeResolver resolver) method:\n        KnownTypeTable = new TypeDeclaration[760]; -> KnownTypeTable = new TypeDeclaration[762];\n        KnownTypeTable[0x2f8] = new TypeDeclaration(resolver, \"ActivityDesigner\", \"System.Activities.Presentation\", 5);\n        KnownTypeTable[0x2f9] = new TypeDeclaration(resolver, \"WorkflowViewElement\", \"System.Activities.Presentation\", 5);\nThis should be enough though; however, it will still not going to work for xaml files containing \"Grid\"; because it gives the following error:\nSystem.Xml.XmlException: 'Name' is a duplicate attribute name.\n   at System.Xml.XmlWellFormedWriter.AddAttribute(String prefix, String localName, String namespaceName)\n   at System.Xml.XmlWellFormedWriter.WriteStartAttribute(String prefix, String localName, String namespaceName)\n   at System.Xml.Linq.ElementWriter.WriteStartElement(XElement e)\n   at System.Xml.Linq.ElementWriter.WriteElement(XElement e)\n   at System.Xml.Linq.XElement.WriteTo(XmlWriter writer)\n   at System.Xml.Linq.XContainer.WriteContentTo(XmlWriter writer)\n   at System.Xml.Linq.XNode.GetXmlString(SaveOptions o)\n   at System.Xml.Linq.XNode.ToString()\n   at ILSpy.BamlDecompiler.BamlResourceEntryNode.LoadBaml(AvalonEditTextOutput output) in G:\\BTAKADEMI\\PortableApplications\\IL Spy Source Code\\ILSpy.BamlDecompiler\\BamlResourceEntryNode.cs:line 68\n   at ILSpy.BamlDecompiler.BamlResourceEntryNode.<>c__DisplayClass3.b__1() in G:\\BTAKADEMI\\PortableApplications\\IL Spy Source Code\\ILSpy.BamlDecompiler\\BamlResourceEntryNode.cs:line 36\nIf you get this error then you should also do the following;\n1. In the BamlResourceEntryNode.cs file change the \"bool LoadBaml(AvalonEditTextOutput output)\" method as below:\nbool LoadBaml(AvalonEditTextOutput output)\n        {\n            var asm = this.Ancestors().OfType().FirstOrDefault().LoadedAssembly;\n            Data.Position = 0;\n            XDocument xamlDocument = LoadIntoDocument(asm.GetAssemblyResolver(), asm.AssemblyDefinition, Data);\n            if (asm.AssemblyDefinition.FullName == \"System.Activities.Core.Presentation, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\")\n            {\n                XmlReader reader = xamlDocument.CreateReader();\n                reader.Settings.ValidationType = ValidationType.None;\n                //You may change the file name \"aaa.xaml\" as you like...\n                XmlTextWriter writer = new XmlTextWriter(\"aaa.xaml\", System.Text.Encoding.UTF8);\n                writer.Formatting = Formatting.Indented;\n                while (reader.Read())\n                {\n                    writer.WriteNode(reader, true);\n                }\n                writer.Flush();\n                writer.Close();\n                reader.Close();\n            }\n            output.Write(xamlDocument.ToString());\n            return true;\n        }\nFinally this is definately working B~).\n. ",
    "Duikmeester": "Same happens within a for loop:\nfor (ShortcutKeys shortcutKeys = ShortcutKeys.NumPad0; shortcutKeys <= ShortcutKeys.NumPad9; shortcutKeys += 1)\ndecompiles into:\nfor (ShortcutKeys shortcutKeys = ShortcutKeys.NumPad0; shortcutKeys <= ShortcutKeys.NumPad9; shortcutKeys += ShortcutKeys.LButton)\nUsing build of 3 days ago...\n. That is the problem most of the code is gone and also the one produce the program.\n. Ok this build works perfect. Most locks and events rebuild.\nThe original build I used was 1.0. Then I tried with a source build with the latest NR merged in.\n. Would love so, making my first steps into MSIL world...\n. ",
    "danjones": "Yes, successfully tested with 120dpi settings. Produced the same results.\n. ",
    "qwertie": "I noticed this bug when decompiling List<T>. Code is\nIL_0001: ldarg.0\nIL_0002: ldfld int32 class System.Collections.Generic.List`1<!T>::_size\nIL_0007: blt.un.s IL_000e\nbut the C# version says\npublic T this[int index]\n{\n    [__DynamicallyInvokable, TargetedPatchingOptOut(\"Performance critical to inline across NGen image boundaries\")]\n    get\n    {\n        if (index >= this._size)\n        {\n            ThrowHelper.ThrowArgumentOutOfRangeException();\n        }\n        return this._items[index];\n    }\nOriginally this caused me to make an incorrect statement while discussing List<T> on a web page, but later I thought... wait a minute, surely list[-1] throws ArgumentOutOfRange and not IndexOutOfRange!\n. Thank you!. ",
    "linquize": "This fix, at least, make current ILSpy work. Although there is a todo.\n. Any comments?\n. @kant2002 @4lab Today, some pull requests you wanted are merged to master:\n422 #420 #423\n. Any response?\n. Any response?\n. Any response?\n. Any response?\n. Any response?\n. Any response?\n. Currently, mono WPF does not work?\n. How this relates to ILSpy?\n. What is your problem? Do you mean high CPU usage during idle time?\n. Which ILSpy version?\nHow many, what assemblies did you visit?\nWhat else did you do in ILSpy?\n. Is it doing network operation?\n. How do you attach the profiler?\n. System.CodeDOM is OK for 2.0 syntax, but fails to evolve to newer C# versions.\n. Why do you add debugger?\nIt was cancelled 2 years ago\nsee 10e7f4710b18d6f64bcc6ef39edeea492eab3e17\n. A tooltip should not contains long information\n. Note: dnSpy is a fork of ILSpy.\nI have tried dnSpy. It is a lot of improvements over ILSpy.\nHowever, dnSpy is licensed under GPL but ILSpy is licensed under MIT.\ndnSpy can merge from ILSpy but not vice-versa.\n. What is your mono version?\n. ILSpy version?\nCould you give example code?\n. ",
    "yunfei9731": "the right decompile code should be:\n            foreach (FieldBuilder fieldBuilder in list)\n            {\n                if (fieldBuilder.FieldType == typeof(string))\n                {\n                    iLGenerator3.Emit(OpCodes.Ldarg_0);\n                    iLGenerator3.Emit(OpCodes.Ldstr, \"\");\n                    iLGenerator3.Emit(OpCodes.Stfld, fieldBuilder);\n                }\n            }\n. ",
    "whut": "Looks like this is implemented now in ILSpy version 2.3.1.1855!\nI believe this behavior should be optional (IMO opt-in, not opt-out), as I initially considered it a bug: \"why does ILSpy forgets to load some assemblies after restart\"  :confused: \nI also believed that the blue highlight is just a indicator of newly loaded assembly, not of \"this assembly will disappear after ILSpy close\". Also the \"Add to Main List\" does not convey any meaning - before finding this issue I had no clue what it does.\n. I used F3 shortcut to search long before ILSpy was created, in the days of free Reflector. Probably not only for me it is a surprise to see it is not working in v2.3.But after reading this issue, I finally understand why F3 sometimes didn't work before 2.3, so big thanks for fixing it by introducing a different shortcut.\nBTW: \"Find\" could also use Ctrl + , (comma) like Visual Studio \"find symbol\".\n. ",
    "amyhickman": "Same issue when analyzing log4net.Core.LevelMap.\n. ",
    "lextm": "I can provide more information as I just received a detailed report for Obfuscar. A patch is required to fix this issue. I might send a pull request soon,\n```\ndiff --git a/ILSpy.BamlDecompiler/CecilTypeResolver.cs b/ILSpy.BamlDecompiler/CecilTypeResolver.cs\nindex 9768472..b6d1320 100644\n--- a/ILSpy.BamlDecompiler/CecilTypeResolver.cs\n+++ b/ILSpy.BamlDecompiler/CecilTypeResolver.cs\n@@ -37,7 +37,13 @@ namespace ILSpy.BamlDecompiler\n    public IType GetTypeByAssemblyQualifiedName(string name)\n    {\n\n\nint comma = name.IndexOf(',');\nint bracket = name.LastIndexOf(']');\nint comma = bracket > -1 ? name.IndexOf(',', bracket) : name.IndexOf(',');    if (comma == -1)\n        throw new ArgumentException(\"invalid name\");\n\n```\n\n\nThe cause is that for generics types, the name can be very complex, such as \nSystem.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1[[System.Windows.Controls.DataVisualization.Charting.ColumnDataPoint, System.Windows.Controls.DataVisualization.Toolkit, Version=3.5.40128.1, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], System.Windows.Controls.DataVisualization.Toolkit, Version=3.5.40128.1, Culture=neutral, PublicKeyToken=31bf3856ad364e35\n. After some research I think it is better to detect .NET 4.5 from \n.custom instance void [mscorlib]System.Runtime.Versioning.TargetFrameworkAttribute::.ctor(string) = (\n        01 00 1a 2e 4e 45 54 46 72 61 6d 65 77 6f 72 6b\n        2c 56 65 72 73 69 6f 6e 3d 76 34 2e 35 01 00 54\n        0e 14 46 72 61 6d 65 77 6f 72 6b 44 69 73 70 6c\n        61 79 4e 61 6d 65 12 2e 4e 45 54 20 46 72 61 6d\n        65 77 6f 72 6b 20 34 2e 35\n    )\n. Sent a pull request. Close this item now.\n. Unless you can provide test assemblies somewhere publicly, I think this bug report is useless. \nObfuscation and de-obfuscation process can heavily change the MSIL of an assembly, and sometimes abnormal instructions might appear which can break ILSpy.\nOnly when you provide reproducible steps, others can investigate further and see how to get it fixed.\n. I am a Mono user, but I don't think ILSpy should attempt to support Mono, because\n- It is obvious that Mono's WPF won't come soon.\n- ILSpy is built on WPF and highly related to SharpDevelop, which is also Windows only.\nThe core of ILSpy is highly portable, and dependencies such as Mono.Cecil, NRefactory, and ICSharpCode.Decompiler are already Mono compatible.\nI think the efforts should be focused on bringing the portable parts to Mono and integrated with MonoDevelop/Xamarin Studio where you can get assistance from a huge group of users. That should be more of a joy ride.\n. @jeremymeng at least JetBrains Rider runs ReSharper code on Mono on non-Windows platforms. So in your case, your VSCode extension can run some ILSpy code on Mono.. It has told you clearly by throwing FileNotFoundException so if you do some debugging you will see the cause.\n. Several possible ways to debug,\n1. Build ILSpy from source code and then use Visual Studio or SharpDevelop to debug. That's recommended for most developers.\n2. Directly debug using WinDbg and SOS. That's for advanced developers.\n. Just uploaded the test case and the final patch. The test case fails due to another bug in the BAML reader, so I won't fix it in this pull request.\n. Created issue #470 to record the culprit of the test case failure.\n. Also fixed #470.\n. The escape sequence is documented in http://msdn.microsoft.com/en-us/library/ms744986(v=vs.110).aspx\n. Why not send a pull request?\n. @exyi, how to fix? Step in and contribute your efforts if you do think that's an easy task.\n. You could simply debug into the HandlePointerArithmetic method to see what's wrong,\nhttps://github.com/icsharpcode/ILSpy/blob/b33b5ca9bfce4e211b765a07f36d8ea218eddfdb/ICSharpCode.Decompiler/ILAst/ILAstOptimizer.cs#L671\nWithout your assemblies, it would be difficult for others to reproduce the crash.\n. Duplicate to #416 \n. @bbi-yoyo the build server locates somewhere in Europe :) so it would be your \"tomorrow\". Thanks for adding this nice feature.\n. WhenTypeIsEvident seems to match .NET Core Coding Style, if that's intentional.\n. There are also other approaches, such as Squirrel for Windows.\n. @siegfriedpammer if possible, there should be an issue template to guide users.\n. SharpTreeView was developed as part of SharpDevelop, so you should go to that repo to check its demo project,\nhttps://github.com/icsharpcode/SharpDevelop/tree/master/src/Libraries/SharpTreeView/ICSharpCode.TreeView.Demo\n. I like this PR, but more if it can use the Vista style folder browser dialog, http://www.ookii.org/software/dialogs/\n. You might use dnEditor which is based on ILSpy and dnlib. It can work for obfuscated assemblies.\nAs the other comment indicates, Cecil and ILSpy's goal is not to support such assemblies.\n. https://github.com/icsharpcode/ILSpy/pull/608\nClearly it has been abandoned.\n. There is already a new decompiler engine, so you might try that, https://github.com/icsharpcode/ILSpy/tree/newdecompiler. SuperWebSocket? That's clearly another project.. Duplicate to #789 as they all require latest Cecil.. Related to #779 .\nThe newdecompiler branch already contains the fix. Not sure when that branch would be merged to master.. There is some .NET Core tooling issues preventing projects with multiple target frameworks (ICSharpCode.Decompiler.csproj targets both net461 andnetstandard2.0`) from being properly consumed via project referencing. \nI think you should leave package referencing untouched, which is the most reliable approach right now.. Usually you can run de4dot before opening the assembly in ILSpy, https://github.com/0xd4d/de4dot IMHO ILSpy shouldn't attempt to do anything special for obfuscated assemblies.. The call stack points to CCI https://github.com/Microsoft/cci/issues. The decompiler project file only targets .NET Standard 2.0,\n<TargetFramework>netstandard2.0</TargetFramework>\nso that .NET Framework 4.5.x/4.6.0 projects cannot consume it. Ideally it should target more platforms like,\n<TargetFrameworks>netstandard2.0;net45</TargetFrameworks>. @dgrunwald Such is acceptable (as most guys should be on 4.6.1 and above), but I could not see any note from ILSpy release notes https://github.com/icsharpcode/ILSpy/releases Maybe the NuGet package should have a separate release notes to highlight such changes.. ",
    "WildGenie": "Licanse information:\nhttp://download.microsoft.com/download/0/6/0/0607D8EA-9BB7-440B-A36A-A24EB8C9C67E/Visual%20Studio%202012%20Image%20Library%20EULA.docx\nhttp://social.technet.microsoft.com/wiki/contents/articles/17794.how-to-get-high-quality-icons-using-visual-studio-image-library.aspx\nhttps://connect.microsoft.com/VisualStudio/feedback/details/629031/visual-studio-image-library-license\n. ",
    "Orvid": "The code your working with was obfuscated, and it encrypted the strings that would normally be loaded to populate the dictionary for a switch-case statement on a string, invoking a method isn't a valid way to get a condition for a case statement in C#... It would probably show up a bit better if you were to first decrypt the strings in the assembly before you tried to decompile it.\n. It certainly wouldn't be unreasonable, but I'm not sure if the current API would allow for it without breaking changes, because, if it isn't currently this way, case statements would need to be representable by an arbitrary expression rather than just a constant value (which is all that's valid in C#).\n. It appears that it's failing to properly decompile a switch statement that is done on a string.\n. You are correct, it is an issue. Perhaps it has something to do with the particular compiler used to create the original code, one which uses a different pattern for switches on strings? \n. ",
    "dilijev": "At any rate, would it be unreasonable to display what the code might have been, in obfuscated form, and display a warning that the disassembly for the file is not valid and cannot be compiled (along with suggestion to de-obfuscate or similar)?\n. Oh yeah, it would make more sense if it generated equivalent code (and there obviously must be) which actually works, even if it's not a switch.\n. ",
    "senglory": "Anyway, I'd rather consider this as an issue.\n. The original DLL was built with MS C# 3.5 SP1 compiler\n. ",
    "sugengnn": "here is dll .http://filesave.me/file/26254/App-Web-bf-rar.html\n. here is dll .http://filesave.me/file/26254/App-Web-bf-rar.html\n. ",
    "JLarue": "Actually they are Getters and Setters on Types from within the same assembly.\n. It turns out the issue was related to missing dependency assembly an the base type. I no longer see that issue. I am stymied on some obfuscated code though, not sure if you'd be interested in helping me work through that but I'd sure appreciate the help.\n. ",
    "Kerrash": "I have seen this issue a lot of times and I am eager to patch it if possible.\nAny advice on where to start looking?\n. I did a bit of digging through the source and found that most of the issue I saw were related to base dependacies loading. Manually loading the missing assemblies didn't help. Do they need to be loaded in order?\nILSpy didn't prompt me to find them before decompiling?\n. Not sure if this issue is still relevant in the current version. I shall attempt to repro ASAP. ",
    "jackpoz": "I'd suggest https://github.com/0xd4d/de4dot first\n. 7e8d010db27debd75ab71514beb868391e8fec53 causes the same exception as on 2.3.0 .\nLocally merging https://github.com/icsharpcode/ILSpy/pull/569 correctly decompiles the method .\n. ",
    "leidegre": "OK, now, I don't mind rewriting the algorithms so that you can licenses them as you set fit, or possibly find another algorithm. The point behind this was to show that it can be done differently with better outcome. If you take a closer look at the way the search is hooked into everything else you'll also notice that's it broken, or at least incomplete in feature but it does compile and it does show search results that are more relevant. At the very least, before you close this, test it out!\n. ",
    "antgraf": "ICSharpCode.Decompiler.DecompilerException: Error decompiling System.Void Game.Camera::.ctor()\n ---> System.NullReferenceException: Object reference not set to an instance of an object.\n   at ICSharpCode.Decompiler.CecilExtensions.GetPopDelta(Instruction instruction, MethodDefinition methodDef)\n   at ICSharpCode.Decompiler.ILAst.ILAstBuilder.StackAnalysis(MethodDefinition methodDef)\n   at ICSharpCode.Decompiler.ILAst.ILAstBuilder.Build(MethodDefinition methodDef, Boolean optimize, DecompilerContext context)\n   at ICSharpCode.Decompiler.Ast.AstMethodBodyBuilder.CreateMethodBody(IEnumerable1 parameters)\n   at ICSharpCode.Decompiler.Ast.AstMethodBodyBuilder.CreateMethodBody(MethodDefinition methodDef, DecompilerContext context, IEnumerable1 parameters)\n   --- End of inner exception stack trace ---\n   at ICSharpCode.Decompiler.Ast.AstMethodBodyBuilder.CreateMethodBody(MethodDefinition methodDef, DecompilerContext context, IEnumerable1 parameters)\n   at ICSharpCode.Decompiler.Ast.AstBuilder.CreateConstructor(MethodDefinition methodDef)\n   at ICSharpCode.Decompiler.Ast.AstBuilder.AddMethod(MethodDefinition method)\n   at ICSharpCode.ILSpy.CSharpLanguage.AddFieldsAndCtors(AstBuilder codeDomBuilder, TypeDefinition declaringType, Boolean isStatic)\n   at ICSharpCode.ILSpy.CSharpLanguage.DecompileMethod(MethodDefinition method, ITextOutput output, DecompilationOptions options)\n   at ICSharpCode.ILSpy.TextView.DecompilerTextView.DecompileNodes(DecompilationContext context, ITextOutput textOutput)\n   at ICSharpCode.ILSpy.TextView.DecompilerTextView.<>c__DisplayClass17.<DecompileAsync>b__16()\n. ICSharpCode.Decompiler.DecompilerException: Error decompiling System.Void Game.GameEntity::CastLight(System.Int32)\n ---> System.NullReferenceException: Object reference not set to an instance of an object.\n   at ICSharpCode.Decompiler.CecilExtensions.GetPopDelta(Instruction instruction, MethodDefinition methodDef)\n   at ICSharpCode.Decompiler.ILAst.ILAstBuilder.StackAnalysis(MethodDefinition methodDef)\n   at ICSharpCode.Decompiler.ILAst.ILAstBuilder.Build(MethodDefinition methodDef, Boolean optimize, DecompilerContext context)\n   at ICSharpCode.Decompiler.Ast.AstMethodBodyBuilder.CreateMethodBody(IEnumerable1 parameters)\n   at ICSharpCode.Decompiler.Ast.AstMethodBodyBuilder.CreateMethodBody(MethodDefinition methodDef, DecompilerContext context, IEnumerable1 parameters)\n   --- End of inner exception stack trace ---\n   at ICSharpCode.Decompiler.Ast.AstMethodBodyBuilder.CreateMethodBody(MethodDefinition methodDef, DecompilerContext context, IEnumerable1 parameters)\n   at ICSharpCode.Decompiler.Ast.AstBuilder.CreateMethod(MethodDefinition methodDef)\n   at ICSharpCode.Decompiler.Ast.AstBuilder.AddMethod(MethodDefinition method)\n   at ICSharpCode.ILSpy.CSharpLanguage.DecompileMethod(MethodDefinition method, ITextOutput output, DecompilationOptions options)\n   at ICSharpCode.ILSpy.TextView.DecompilerTextView.DecompileNodes(DecompilationContext context, ITextOutput textOutput)\n   at ICSharpCode.ILSpy.TextView.DecompilerTextView.<>c__DisplayClass17.b__16()\n. Thank you for quick response.\nUnfortunately, this module cannot be posted publicly. But I could send it to interested developer for review.\n. ",
    "Fulborg": "Also got the same error. Here is the link for decompiled file: https://www.dropbox.com/s/49fb11jg3a8g0ma/1012_newlauncherlate.exe?dl=0\n. ",
    "vwoodzell": "I wasn't able to reproduce the problem in any xaml that I wrote.  Also, I noticed that there's no way to tell, from the baml, whether a complex property was formatted as a markup extension or as a nested element.  Therefore, I think that the property in the baml which did exhibit the problem must have been a nested element in the original xaml.  This means that the problem is one not of attribute ordering, but of incorrectly converting a nested element to a markup extension.  Currently ILSpy always formats properties as markup extensions when they're eligible.\nI've added a new commit which undoes my original change, and instead leaves markup extensions as nested elements if they occur following other nested elements.  This way they appear properly in the output.  There's a unit test case as well.\n. ",
    "michaelgwelch": "I tried to reproduce this as it seemed like it would be easy to fix. I cannot reproduce the issue.\nHere is the code I used to try to reproduce:\n```\nusing System;\nnamespace TestIL\n{\npublic abstract class C1\n{\n    public abstract int M1();\n}\n\npublic class C2 : C1\n{\n    public override int M1()\n    {\n        throw new NotImplementedException();\n    }\n}\n\npublic interface I1\n{\n    int M2(string x);\n}\n\npublic class C3 : I1\n{\n    int I1.M2(string x)\n    {\n        return 3;\n    }\n}\n\n}\n```\nThis is the VB code that was generated for the Overrides test case\n```\nImports System\nNamespace TestIL\n    Public Class C2\n        Inherits C1\n    Public Overrides Function M1() As Integer\n        Throw New NotImplementedException()\n    End Function\nEnd Class\n\nEnd Namespace\n```\nThis is the VB code that was generated for the Implements test case\n```\nImports System\nNamespace TestIL\n    Public Class C3\n        Implements I1\n    Function M2(x As String) As Integer Implements I1.M2\n        Return 3\n    End Function\nEnd Class\n\nEnd Namespace\n```\nI was using the very latest code (commit: 10e7f4710b18d6f64bcc6ef39edeea492eab3e17)\nPerhaps this was fixed already?\n. I'm not actually a developer on this project. Just thought it would be interesting to have a look and see if I could be of any help.\n@TheUnknownProgrammer , if you have Visual Studio or even msbuild installed then this project appears to be very easy to compile. You may want to just download the source.\n. ",
    "Washi1337": "Hmm could be yes indeed. On the about page of ILSpy it says I have the latest version of the program (ILSpy version 2.1.0.1603). This however can be the latest official release and not the latest commit. I guess this can be closed then if this issue has already been solved in the code itself. I just have to wait for the next official release. \n. ",
    "andreif": "Could you recommend a strategy to make a cli application for OS X? I don't need GUI, just a tool to decompile .Net dll and it feels possible with today's code.\n. From what I see, one would need to exclude AvalonEdit and run DecompileNodes with proper arguments. Am I on the right track?\n. I have not found a sane way to decompile a large library to source files in MonoDevelop/Xamarin. If you know how, please tell. Otherwise it's just infinite manual copy-pasting from GUI to text files.\n. What about CSharpLanguage.DecompileAssembly?\nEdit 1: \n``` cs\n// ICSharpCode.ILSpy.AssemblyList\npublic LoadedAssembly OpenAssembly(string file, bool isAutoLoaded=false);\n// ICSharpCode.ILSpy.CSharpLanguage\npublic override void DecompileAssembly(LoadedAssembly assembly, ITextOutput output, \n                                       DecompilationOptions options);\n```\nDecompileAllCommand gives a nice example.\n. Well, I am slowly getting further. There is no fusion.dll on OS X, so the libs has to be collected manually as I see. Not sure if I have enough time and interest to get it done though. I'll keep posting here for now.\n. Ok, so I got it to decompile a library without references (it fails for mscorlib.dll though). I'll try to find some way to include the refs as well whenever I can dedicate more time for it.\n. It seems to work well now. I have modified few source files to get it through and now curious if I can avoid modifying the original sources. I'll try to find some time for testing it.\n. I made a quick-n-dirty project to build for OS X but I guess it should work for Linux too, see https://github.com/andreif/ILSpyMono\n. Just found one more CLI project https://github.com/aerror2/ILSpy-For-MacOSX\nDid anyone try it?. It's called ILSpy for Mac OS X ,Linux and any mono supported platform. I got it to build for OS X as a CLI app with https://github.com/andreif/ILSpyMono\n. Hm, not sure if you could decompile it without other libs, but an example of such events is at https://github.com/RimWorldMods/EdB-ColonistBar/blob/master/Assemblies/EdBColonistBar.dll\n. @siegfriedpammer I'll push ILSpy output from the lib in a few minutes. There is some code I've got via Xamarin Assembly Browser which I heard uses your decompiler, but I think we need output of ILSpy here.\n. @siegfriedpammer so here it is decompiled and one of the events at https://github.com/RimWorldMods/EdB-ColonistBar-Sources/blob/ilspy/EdB.Interface/BooleanPreference.cs#L24 (beware non-master branch)\n. @siegfriedpammer I am trying to reach the author to find out about the compiler. The only reply I got so far is that they use MonoDevelop/Xamarin, so it may be xbuild related.\n. ",
    "minexew": "@andreif This has been very helpful, thanks.. ",
    "sbrl": "Isn't that for Mac?. Hrm. While that project compiles, I get nasty errors about an incorrect\ndirectory.\n\n{\"api_version\":\"1.0\",\"publisher\":{\"api_key\":\"05dde50f1d1a384dd78767c55493e4bb\"\n,\"name\":\"GitHub\"},\"entity\":{\"external_key\":\"github/icsharpcode/ILSpy\",\"title\":\n\"icsharpcode/ILSpy\",\"subtitle\":\"GitHub repository\",\"main_image_url\":\"https://c\nloud.githubusercontent.com/assets/143418/17495839/a5054eac-5d88-11e6-95fc-\n7290892c7bb5.png\",\"avatar_image_url\":\"https://cloud.githubusercontent.com/asse\nts/143418/15842166/7c72db34-2c0b-11e6-9aed-\nb52498112777.png\",\"action\":{\"name\":\"Open in\nGitHub\",\"url\":\"https://github.com/icsharpcode/ILSpy\"}},\"updates\":{\"snippets\":[\n{\"icon\":\"PERSON\",\"message\":\"@andreif in #416: It's called ILSpy for Mac OS X\n,Linux and any mono supported platform\"}],\"action\":{\"name\":\"View\nIssue\",\"url\":\"https://github.com/icsharpcode/ILSpy/issues/416#issuecomment-\n280940238\"}}}. I'd prefer not to have to install Visual Studio Code in order to use it.. @christophwille I do have a pretty good laptop (running Ubuntu 17.04), but I'm not about to install wine or VS Code just to decompile C# programs.\n\n@PoroCYon dnSpy looks good! Next time I need to do some decompiling I might use that then :smiley_cat: . ",
    "PoroCYon": "This fork exists, and the CLI version seems to work just fine on mono. (I'm running Parabola (99% the same as Arch) myself, and it works for me.). @Yardanico Oops, sorry\n@sbrl Indeed, my machine can't handle much load, so I don't want to have VS Code running... (Same for Wine, really, so what @asd-and-Rizzo managed is still of no use for me.)\n\nI tried to compile the newdecompiler codebase, but xbuild couldn't parse the .csproj files. Does anyone have pointers on getting it to compile? (Preferably without installing dotnet, as I have some bad experiences with it...). I currently use dnSpy in the terminal, running on mono, and it works just fine. (I'm not really a UI person, so maybe some of you mightn't agree.). @christophwille Same, it's a laptop, but not the best ever (it's 6 years old), so I'd rather avoid as much bloat as possible. FYI, I'm running Parabola (rolling release).. @christophwille Is there any way to get it to work without having to install dotnet-cli? I don't really want to install something that requires itself to compile, as I don't like binary packages (especially Microsoft's).. I also tried to fix #434 , but LoopsAndConditions.cs is one huge mess.\nVERY LATE EDIT: Also, the AST depth is about 2000.....\n. This is probably compiler-generated code.\n. The compiler does not preserve local variable names (why would it?), thus they cannot be decompiled either.\n(The compiler sometimes preserves them, for some unknown reason. It could be debug information sneaking in, dependancies, ...)\nHere's a simple method in IL:\n```\n.method public hidebysig static\n    [mscorlib]System.String A\n    (\n        int32 value\n    )\n    cil managed\n{\n    .maxstack 2\n    .locals (\n        [0] int,\n        [1] [mscorlib]System.String theText\n    )\n// multiply arg #0 with 2 and put the result in local #0\nldarg.0\nldc.i4.2\nmul\nstloc.0\n\n// put the value of local #0 as a string in local #1\nldloc.0\ncallvirt /* or just call here? */ instance [mscorlib]System.String [mscorlib]System.Object /* or Int32? */::ToString()\nstloc.1\n\n// print the value of local #1 to the console and return it\nldloc.1\ndup // duplicate it, for the return value\ncall void [mscorlib]System.Console::WriteLine(string)\n// I don't think the result will be on the stack (otherwise, the 'pop' instruction should be added, but I highly doubt it's neeed)\n\nret\n\n}\n```\nin \".locals (...)\", you can see local 1 has a name, but 0 doesn't. ILSpy will thus give local 0 a self-made name (probably \"num\", or one of those \"arg_...\" things, like you had).\n(It would look like something like this:\ncsharp\npublic static string A(int value)\n{\n    int num = value * 2;\n    string theText = num.ToString(); // ILSpy probably won't decompile it to \"(value * 2).ToString();\"\n    Console.WriteLine(theText);\n    return theText;\n}\n, but the original did use \"(value * 2).ToString();\")\n. This can get quite hard, because constants (and constant expressions, like PI * 2) are replaced by their value by the compiler, and the value of a constant expression that has a constant in it (like PI * 2 again) is hard to decompose back into the expression.\n. @dee-see dotPeek actually does do this.\nConsider the following code:\ncsharp\nint i = 255;\ndotPeek (unlike others, obviously) decompiled it as:\ncsharp\nint i = byte.MaxValue;\n. Abstract Syntax Tree.. ",
    "Yardanico": "@PoroCYon sorry for necro-post, but this is not a fork, it's a completely different code (it's just based on some ilspy code). @PoroCYon also dnSpy works great with Wine + .net runtime. ",
    "tthiery": "Has anyone spent a thought on using VS Code as the UI platform?. ",
    "jleclanche": "That'd be nice.. Ping. Any idea?\n. 4.0.4.1\n. So I mean, this is still the case. I work around it with this:\ndiff\ndiff --git a/ICSharpCode.Decompiler/ICSharpCode.Decompiler.csproj b/ICSharpCode.Decompiler/ICSharpCode.Decompiler.csproj\nindex 99b6693f..6eee5e26 100644\n--- a/ICSharpCode.Decompiler/ICSharpCode.Decompiler.csproj\n+++ b/ICSharpCode.Decompiler/ICSharpCode.Decompiler.csproj\n@@ -154,9 +154,4 @@\n   </ItemGroup>\n   <ItemGroup />\n   <Import Project=\"$(MSBuildBinPath)\\Microsoft.CSharp.Targets\" />\n-  <Target Name=\"BeforeBuild\">\n-    <MSBuild Projects=\"$(MSBuildProjectDirectory)\\..\\BuildTools\\UpdateAssemblyInfo\\UpdateAssemblyInfo.csproj\" Targets=\"Build\" Properties=\"Configuration=Debug; Platform=AnyCPU\" />\n-    <Exec WorkingDirectory=\"$(MSBuildProjectDirectory)\\..\\BuildTools\\UpdateAssemblyInfo\\bin\\Debug\" Command=\"UpdateAssemblyInfo.exe --branchname $(BranchName)\" Timeout=\"60000\" Condition=\" '$(BranchName)' != '' \" />\n-    <Exec WorkingDirectory=\"$(MSBuildProjectDirectory)\\..\\BuildTools\\UpdateAssemblyInfo\\bin\\Debug\" Command=\"UpdateAssemblyInfo.exe\" Timeout=\"60000\" Condition=\" '$(BranchName)' == '' \" />\n-  </Target>\n-</Project>\n\\ No newline at end of file\n+</Project>\nBut then it can't find the AssemblyInfo.cs file it generates (obviously), so I have to remove these two includes:\ndiff\n-    <Compile Include=\"Properties\\AssemblyInfo.cs\" />\n-    <None Include=\"Properties\\AssemblyInfo.template.cs\" />\nThis is all with xbuild. msbuild gives a different, perhaps more helpful error:\n```\nMicrosoft (R) Build Engine version 15.2.0.0 ( Thu May 11 17:28:41 UTC 2017)\nCopyright (C) Microsoft Corporation. All rights reserved.\nBuild started 6/30/2017 12:40:30 AM.\nProject \"/home/admin/tmp/ILSpy/ICSharpCode.Decompiler/ICSharpCode.Decompiler.csproj\" on node 1 (default targets).\nProject \"/home/admin/tmp/ILSpy/ICSharpCode.Decompiler/ICSharpCode.Decompiler.csproj\" (1) is building \"/home/admin/tmp/ILSpy/BuildTools/UpdateAssemblyInfo/UpdateAssemblyInfo.csproj\" (2) on node 1 (Build target(s)).                \nPrepareForBuild:                                                                                                                                                                                                                     \n  Creating directory \"./build/\".                                                                                                                                                                                                     \nResolveAssemblyReferences:                                                                                                                                                                                                           \n  A TargetFramework profile exclusion list will be generated.                                                                                                                                                                        \n/usr/lib/mono/msbuild/15.0/bin/Microsoft.Common.CurrentVersion.targets(1980,5): warning MSB3256: No assemblies were read in from the redist lists. A TargetFramework profile exclusion list could not be generated.  [/home/admin/tmp/ILSpy/BuildTools/UpdateAssemblyInfo/UpdateAssemblyInfo.csproj]                                                                                                                                                                        \nGenerateTargetFrameworkMonikerAttribute:                                                                                                                                                                                             \nSkipping target \"GenerateTargetFrameworkMonikerAttribute\" because all output files are up-to-date with respect to the input files.                                                                                                   \nCoreCompile:                                                                                                                                                                                                                         \n  /usr/lib/mono/4.5/csc.exe /noconfig /unsafe- /checked- /nowarn:1607,1701,1702 /nostdlib+ /platform:x86 /warn:4 /baseaddress:4194304 /define:DEBUG;TRACE /highentropyva- /reference:/usr/lib/mono/4.0-api/mscorlib.dll /reference:/usr/lib/mono/4.0-api/System.Core.dll /reference:/usr/lib/mono/4.0-api/System.Data.DataSetExtensions.dll /reference:/usr/lib/mono/4.0-api/System.Data.dll /reference:/usr/lib/mono/4.0-api/System.dll /reference:/usr/lib/mono/4.0-api/System.Xml.dll /reference:/usr/lib/mono/4.0-api/System.Xml.Linq.dll /debug+ /debug:portable /filealign:4096 /optimize- /out:obj/Debug/UpdateAssemblyInfo.exe /target:exe /warnaserror- /utf8output Main.cs \"/tmp/.NETFramework,Version=v4.0,Profile=Client.AssemblyAttributes.cs\"\nCopyFilesToOutputDirectory:\n  Copying file from \"obj/Debug/UpdateAssemblyInfo.exe\" to \"./build/UpdateAssemblyInfo.exe\".                                                                                                                                          \n  UpdateAssemblyInfo -> /home/admin/tmp/ILSpy/BuildTools/UpdateAssemblyInfo/build/UpdateAssemblyInfo.exe                                                                                                                             \n  Copying file from \"obj/Debug/UpdateAssemblyInfo.pdb\" to \"./build/UpdateAssemblyInfo.pdb\".\nDone Building Project \"/home/admin/tmp/ILSpy/BuildTools/UpdateAssemblyInfo/UpdateAssemblyInfo.csproj\" (Build target(s)).                                                                                                             \nBeforeBuild:                                                                                                                                                                                                                         \n  mono UpdateAssemblyInfo.exe                                                                                                                                                                                                        \n/home/admin/tmp/ILSpy/ICSharpCode.Decompiler/ICSharpCode.Decompiler.csproj(160,5): error MSB6003: The specified task executable \"sh\" could not be run. The working directory \"/home/admin/tmp/ILSpy/ICSharpCode.Decompiler/../BuildTools/UpdateAssemblyInfo/bin/Debug\" does not exist.                                                                                                                                                                                      \nDone Building Project \"/home/admin/tmp/ILSpy/ICSharpCode.Decompiler/ICSharpCode.Decompiler.csproj\" (default targets) -- FAILED.                                                                                                        \nBuild FAILED.\n\"/home/admin/tmp/ILSpy/ICSharpCode.Decompiler/ICSharpCode.Decompiler.csproj\" (default target) (1) ->                                                                                                                                 \n\"/home/admin/tmp/ILSpy/BuildTools/UpdateAssemblyInfo/UpdateAssemblyInfo.csproj\" (Build target) (2) ->                                                                                                                                \n(ResolveAssemblyReferences target) ->                                                                                                                                                                                                \n  /usr/lib/mono/msbuild/15.0/bin/Microsoft.Common.CurrentVersion.targets(1980,5): warning MSB3256: No assemblies were read in from the redist lists. A TargetFramework profile exclusion list could not be generated.  [/home/admin/tmp/ILSpy/BuildTools/UpdateAssemblyInfo/UpdateAssemblyInfo.csproj]                                                                                                                                                                        \n\"/home/admin/tmp/ILSpy/ICSharpCode.Decompiler/ICSharpCode.Decompiler.csproj\" (default target) (1) ->                                                                                                                                 \n(BeforeBuild target) ->                                                                                                                                                                                                              \n  /home/admin/tmp/ILSpy/ICSharpCode.Decompiler/ICSharpCode.Decompiler.csproj(160,5): error MSB6003: The specified task executable \"sh\" could not be run. The working directory \"/home/admin/tmp/ILSpy/ICSharpCode.Decompiler/../BuildTools/UpdateAssemblyInfo/bin/Debug\" does not exist.                                                                                                                                                                                      \n1 Warning(s)                                                                                                                                                                                                                       \n1 Error(s)\n\nTime Elapsed 00:00:02.74\n``. Worth noting,msbuild` does not work out of the box:\n/home/admin/tmp/ILSpy/ICSharpCode.Decompiler/ICSharpCode.Decompiler.csproj(154,3): error MSB4019: The imported project \"/usr/lib/mono/msbuild/15.0/bin/Microsoft.CSharp.Targets\" was not found. Confirm that the path in the <Import> declaration is correct, and that the file exists on disk.\nThe problem is that /usr/lib/mono/msbuild/15.0/bin/Microsoft.CSharp.Targets does not exist, but /usr/lib/mono/msbuild/15.0/bin/Microsoft.CSharp.targets does exist (debian jessie, mono-devel); in fact, all of the files in that directory are .targets, no .Targets.. Okay, I see what's going on, I should have looked closer when I first wrote the issue. The problem is I am passing /property:OutputPath=../build, and this is not supported due to the way the decompiler is calling UpdateAssemblyInfo.exe.. Updated issue name to reflect the root cause. The build succeeds if I don't shadow-build.. ",
    "dzmitry-lahoda": "I was able to run on Wine.. ",
    "jeremymeng": "I am working on a prototype of VSCode extension.  The basic idea is to have an omnisharp-roslyn like backend, which takes requests then responds using stdio, and to use some utilities from omnisharp-vscode to handle the request handling in the extension.  The back end (in C#) uses ILSpy support to decompile and sends nodes and decompiled code to VS Code extension for display using the TreeDataProvider and the editor.\n\nI haven't added support for Linux/OSX.  I imagine it should be easy and similar to what omnisharp-vscode is doing: running them using Mono.. @lextm I know it's workable, just haven't got time to get to that part.  Also with ILSpy netstandard 2.0 work coming, Mono route might become unnecessary. Last time I checked, the biggest obstacle is CodeDOM, which I don't see in the newdecompiler any more.. @christophwille my project uses a copy of CSharpLanguage which depends on ICSharpCode.NRefactory.  Are there any alternatives? It would be great if non-UI-related code is extract out of ILSpy into a .netsandard library so it can be consumed easily by other projects.. > it's just the class that corresponds to the \"C#\" choice in ILSpy's language dropdown.\nYeah, but there are handy helper methods for decompiling methods, fields, etc. into various languages (C#, VB, IL).  They are not tied to the WPF UI, but unfortunately within the same project.. @christophwille I planned to publish my projects to github after some cleanup.  If any ideas/architecture can be reused by ILSpy team I am happy to continue contributing.. Has anyone looked at http://avaloniaui.net/?. I didn't know they are intended for script usage. It just looked weird without the containing type.  And the implicit namespace of for example Instruction isn't imported by a using (so I'd need to fully qualify them I guess).. Makes sense.. FullyQualifyAmbiguousTypeNames=true doesn't fully qualify Instruction for me in this example.  Are there any other settings that make it work, like what ILSpy Gui is showing?\n\n. I am playing with the new decompiler in my VS Code extension (mentioned in https://github.com/icsharpcode/ILSpy/issues/941).  So I'd like to match whatever ILSpy GUI has as much as I can.  I don't have any particular use cases.. ",
    "kant2002": "Not sure if anybody keep eye on the project.\nI maintain separate branch with all most reasonable modifications which floating around that project. Including yours\nhttps://github.com/kant2002/ILSpy\nAlso looks like guys from 4Lab do the same.\nhttps://github.com/4lab/ILSpy.\nIf you have ideas and suggestions, I probably at least try to implement them.\n. The usual problem with decompilation of Windows Forms is that it produce approximate following problems:\n- BeginInit/EndInit should be written with explicit conversion which does not make sense for the ILSpy. And for me as well, since most controls have BeginInit/EndInit methods\n- Enumeration serialization inside InitializeComponent should always use fully qualified name\n- If Resources used, that provide additional burden for decompilation.\n- Event subscription mentioned earlier.\nAll these rules should be strictly followed, otherwise Windows Forms designer would not recognize most of the modifications. If @siegfriedpammer think such decompilation is worth to have in the ILSpy I could take a look at this.\n. Also if you will be loading that, please consider using NUGET_PACKAGES (IIRC) environment variable as override for standard Nuget packages location.. ",
    "CreateAndInject": "I'm afraid he can not find my post, so I write a new topic.\n. Thanks!. Any plan to change all the parameters of ITextOutput to cecil types or change all to NR types?. Because sometimes the decompiled code isn't perfect, so I write a MyTextOutput derived from ITextOutput, I may change the output content to improve it, so I need this information.. If I want to rename a Variable/Field/Method, how should I do?\nI try this:\n    public override void StartNode(AstNode node)\n    {\n        if(node is VariableInitializer)\n        {\n            var vi = node as VariableInitializer;\n            if (vi.Name == \"oldName\")\n                vi.Name = \"newName\";\n        }\n    }\nBut it only rename the definition, all references keep the old name.. How to remove an AstNode?\nsuch as:\nstring str=\"test\";\nI want to delete this line:\n    public override void StartNode(AstNode node)\n    {\n        if (node is VariableDeclarationStatement)\n            node.Remove();\n        base.StartNode(node);\n    }\nBut it failed.. When EndNode is called, the content has already write to output, so it can not delete this line:\nstring str=\"test\";.             foreach (var varDecl in syntaxTree.Descendants.OfType())\n                foreach (var v in varDecl.Variables)\n                    v.Name = \"_\" + v.Name;\nThis code will rename all the variable definitions, but all the variable references keep original.\nBy the way, whatever I rename ILVariable.Name or IdentifierExpression/Identifier, the references don't rename at one time. that's because ILSpy don't wirte ILVariable.Name, it writes IdentifierExpression/Identifier, but all the IdentifierExpression/Identifier are different objects, even if it is the same ILVariable in fact.\n. both  ILVariableResolveResult  and ResolveResult  are correct.\nvi.Annotation<ILVariable>() allways is null. Why? I find there are DecompilerSettings and CSharpFormattingOptions\u3002It seems different version just set some properties as true, and some as false?\n. In my example, ref local is redundant, can I forbid it through DecompilerSettings or any other?. The latest build(3.0.0.2869) has more problem:\nprivate void Form1_Load(object sender, EventArgs e)\n{\n    ref Rectangle ? = ref this.rect;\n    ?.Width += 1;\n}\nthe variable name is \"?\". But why there's no problem in ILSpy2.x\uff1f. But there's no problem if I don't use \"Analyze\", I can click any item from TreeView, and no problem.. Maybe it's hard to determine whether it's fully assigned before using.\nILSpy 2.x doesn't give a default initial value, and allways occurs compiler errors.\nSo, maybe it's unessesary, but it's safe and no side-effect.. v3.0.0.2897 decompile it like this:\nConsole.CancelKeyPress += new ConsoleCancelEventHandler(DoCancelKeyPress);\nand the lastest decompile it like this:\nConsole.CancelKeyPress += DoCancelKeyPress;\nit removes \"new ConsoleCancelEventHandler(\"\nis there any way to control whether remove or not in DecompilationOptions/DecompilerSettings\uff1f. Do you mean I must install git?\nI don't install git, because Visual Studio 2017 can do it.. All the same, I can't compile with the same errors.\napp.config, AssemblyInfo.cs. I only download the lastest Visual Studio 2017(15.4.2), and install .net core 1.1&2.0, and clone dnSpy in vs2017, don't do anything else.\nMy  PATH variable is:\nC:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;%SystemRoot%\\system32;%SystemRoot%;%SystemRoot%\\System32\\Wbem;%SYSTEMROOT%\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\Microsoft SQL Server\\90\\Tools\\binn\\;C:\\Program Files (x86)\\Windows Kits\\8.1\\Windows Performance Toolkit\\;C:\\Program Files\\Microsoft SQL Server\\110\\Tools\\Binn\\;%USERPROFILE%.dnx\\bin;C:\\Program Files\\Microsoft DNX\\Dnvm\\;C:\\Program Files\\Microsoft SQL Server\\120\\Tools\\Binn\\;C:\\Program Files\\dotnet. No, all the same.. Do you mean \"\\BuildTools\\update-assemblyinfo.ps1\"?\nBoth\nfunction Find-Git() {\nreturn $false;\n}\nand \nfunction Find-Git() {\nreturn $true;\n}\ndon't work. $PSScriptRoot is null. This time it works!\nBut I have two questions:\n1. Does it mean those commits about this issue before the lastest commit are unnecessary\uff1f\n2. There's an error(but can build):\n System.Threading.Mutex doesn't contains method \"Dispose\".. There are 2.0, 3.0, 3.5, 4.0, 4.5, 4.5.1, 4.5.2, 4.6, 4.6.1, 4.6.2, 4.7 on my OS.\nMaybe the compiler run on .net 2.0 ?. I add \"[System.Environment]::Version\" in update-assemblyinfo.ps1, it shows 2.0\n. Now, one can build, and another can't.\nBut I find a prolbem:\nIf I copy and past the root direcotry, build it, it will fail\nfor example:\nC:\\ILSpy can build\nCopy it as:\nC:\\ILSpy 2, build it ,it will show: C:\\ILSpy exist, it seems it uses the old path.. I get it, if the path contains some char, it will fail (but I don't know why sometimes $PWD is null)\nsuch as:\nC:\\My ILSpy (space)\nC:\\[ILspy]   ([]). I write my.ps1 file:\nGet-Location\nread-host\nPlace it in E:\\abc\\[Tools]\\my.ps1, Get-Location will return C:\\\nPlace it in E:\\abc\\[Tools\\my.ps1, Get-Location will occur an exception\nPowerShell bug?. Can't build also if the path contains space.. That's ok with space now!\nIt seems it's powershell bug about \"[\" rather than ILSpy, so it can not resolve except migrating to CMD.. It works after deleting some assemblies.\nBut I don't care which files I deleted.\nIt seems ILSpy will save the assemblies list when exit.\nNow, I don't exit the process. Tell me where I can find the assembly list on my hard disk.. ILSpy will save assemblies list when I delete assembly immediately, so I can't find which I deleted.. It seems when one assembly is invalid, all the assemblies will be invalid.. I can reproduce (but the error msg is different, so I am not sure)\nOpen ILSpy, drag one file to. then close ILSpy.\nDelete the file in the hard disk, and open ILSpy.. I can reproduce with the same message:\nDrag an invalid file(such as .txt file), then all the assemblies are invalid.\n. I usually meet these assemblies, but now I can find only one, and it's no error in ILSpy2\n. Can you reproduce\uff1f. There are ModuleDefinition & AssemblyDefinition some days ago, but now they are GetModuleDefinitionAsync & GetAssemblyDefinitionAsync, and my code doesk run correctly in the new version, can you help me?. Why it works before the commit 12dc70e05a1362f34af5491faccb2acc97d06704 (2017-11-27)?\nModuleDefinition=GetModuleDefinitionAsyc().Result. If I create a new thread, it's hard to use, such as:\nMainWindow.Instance.SelectedNodes will orrcur : System.InvalidOperationException. So, only Resolve can not run in the UI thread?. It's a vb.net program without any confused, and it's microsft .net framework. not Mono.. NEEA.NCRE.CBT.Testing.zip\n. I have already used the lastest build.\nThis is a Unity3D dll, and there are so many switches like this.. Assembly-CSharp.zip\n. There are so many errors in this dll, such as:\n[DebuggerHidden]\npublic static IEnumerable<T> AllExcept<T>(IEnumerable<T> input, int indexToSkip)\n{\n    //IL_0000: Unknown result type (might be due to invalid IL or missing references)\n    //IL_0005: Unknown result type (might be due to invalid IL or missing references)\n    //IL_0006: Unknown result type (might be due to invalid IL or missing references)\n    //IL_000d: Unknown result type (might be due to invalid IL or missing references)\n    //IL_0014: Unknown result type (might be due to invalid IL or missing references)\n    //IL_001b: Unknown result type (might be due to invalid IL or missing references)\n    //IL_0022: Unknown result type (might be due to invalid IL or missing references)\n    //IL_0023: Unknown result type (might be due to invalid IL or missing references)\n    //IL_002b: Expected O, but got Unknown\n    <>c__DisplayClass160451302 val = new <>c__DisplayClass160451302();\n    val.input = (IEnumerable<!0>)input;\n    val.indexToSkip = indexToSkip;\n    val.<$>input = (IEnumerable<!0>)input;\n    val.<$>indexToSkip = indexToSkip;\n    <>c__DisplayClass160451302 val2 = val;\n    val2.$PC = -2;\n    return (IEnumerable<T>)val2;\n}. but the \"ref\" is unnecessary.\nReflector and dnSpy can deompile it without \"ref\":\ndnSpy:\nprivate void startMove()\n    {\n        int num = (UnityEngine.Random.Range(0, 2) != 0) ? 0 : 1;\n        for (int i = 0; i < this.arrPath.Length; i++)\n        {\n            this.arrPath[i] = base.transform.position + base.transform.forward * (float)i * 60f;\n            Vector3 onUnitSphere;\n            float num2;\n            do\n            {\n                onUnitSphere = UnityEngine.Random.onUnitSphere;\n                num2 = Vector3.Dot(base.transform.forward, onUnitSphere);\n            }\n            while (num2 <= 0f);\n            this.arrPath[i] += onUnitSphere * this.arrDist[i];\n            if (this.arrPath[i].y > this.heightLimit)\n            {\n                this.arrPath[i].y = this.heightLimit;\n            }\n        }\n        iTween.MoveTo(base.gameObject, iTween.Hash(new object[]\n        {\n            \"path\",\n            this.arrPath,\n            \"time\",\n            this.fMoveTime,\n            \"easetype\",\n            iTween.EaseType.linear,\n            \"oncomplete\",\n            \"DestroyFishPool\",\n            \"oncompletetarget\",\n            base.gameObject\n        }));\n    }\nReflector:\nprivate void startMove()\n{\n    bool flag = Random.Range(0, 2) == 0;\n    for (int i = 0; i < this.arrPath.Length; i++)\n    {\n        Vector3 onUnitSphere;\n        this.arrPath[i] = base.transform.position + ((base.transform.forward * i) * 60f);\n        do\n        {\n            onUnitSphere = Random.onUnitSphere;\n        }\n        while (Vector3.Dot(base.transform.forward, onUnitSphere) <= 0f);\n        this.arrPath[i] += onUnitSphere * this.arrDist[i];\n        if (this.arrPath[i].y > this.heightLimit)\n        {\n            this.arrPath[i].y = this.heightLimit;\n        }\n    }\n    object[] args = new object[] { \"path\", this.arrPath, \"time\", this.fMoveTime, \"easetype\", iTween.EaseType.linear, \"oncomplete\", \"DestroyFishPool\", \"oncompletetarget\", base.gameObject };\n    iTween.MoveTo(base.gameObject, iTween.Hash(args));\n}\n. this one doesn't contain user-defined operators, but still contains ref with C# 4.0 / VS2010\nchar c;\n                if (flag)\n                {\n                    ref string val = ref array[1];\n                    string str = val;\n                    c = Key5[i];\n                    val = str + c.ToString();\n                }\n                else\n                {\n                    ref string val2 = ref array[0];\n                    string str2 = val2;\n                    c = Key5[i];\n                    val2 = str2 + c.ToString();\n                }. test.zip\n. test.zip contains dynamic code, but it's not the one mentioned in the topic.\nIt's so long, and I forget, I will write a program to search it from my hard disk.. 1.zip\nProgram.Main\nThe code doesn't match exactly, that's becuase I modify a chinese string to \"error\".(I'm afraid you can't cognize chinese at that time, and the code is decompiled by Reflector).\n. I test the branch \"dynamic\"\nThere're errors with test.zip-admin2.dll. There's no original C# code, because I modified it by reflexil.. But there will be a warning:\nPossible unintended reference comparison; to get a value comparison, cast the left hand side to type 'string'\nwhy not use if (text != \"\u4ee5\u603b\u5206\u6765\u7b97\") to prevent the warning?. I don't know which compiler, it's a .net 1.1 program, another more example:\nprivate void Btn_JuTime_Click(object sender, EventArgs e)\n        {\n            string val = \"\";\n            string text;\n            if ((text = Btn_JuTime.Text) != null)\n            {\n                text = string.IsInterned(text);\n                if ((object)text != \"\u6bcf\u9774\u65f6\u95f4\u4e3a10\u79d2\")\n                {\n                    if ((object)text != \"\u6bcf\u9774\u65f6\u95f4\u4e3a20\u79d2\")\n                    {\n                        if ((object)text != \"\u6bcf\u9774\u65f6\u95f4\u4e3a30\u79d2\")\n                        {\n                            if ((object)text != \"\u6bcf\u9774\u65f6\u95f4\u4e3a40\u79d2\")\n                            {\n                                if ((object)text != \"\u6bcf\u9774\u65f6\u95f4\u4e3a50\u79d2\")\n                                {\n                                    if ((object)text != \"\u6bcf\u9774\u65f6\u95f4\u4e3a60\u79d2\")\n                                    {\n                                        if ((object)text != \"\u6bcf\u9774\u65f6\u95f4\u4e3a70\u79d2\")\n                                        {\n                                            if ((object)text != \"\u6bcf\u9774\u65f6\u95f4\u4e3a80\u79d2\")\n                                            {\n                                                if ((object)text == \"\u6bcf\u9774\u65f6\u95f4\u4e3a90\u79d2\")\n                                                {\n                                                    Btn_JuTime.Text = \"\u6bcf\u9774\u65f6\u95f4\u4e3a10\u79d2\";\n                                                    val = \"10\";\n                                                }\n                                            }\n                                            else\n                                            {\n                                                Btn_JuTime.Text = \"\u6bcf\u9774\u65f6\u95f4\u4e3a90\u79d2\";\n                                                val = \"90\";\n                                            }\n                                        }\n                                        else\n                                        {\n                                            Btn_JuTime.Text = \"\u6bcf\u9774\u65f6\u95f4\u4e3a80\u79d2\";\n                                            val = \"80\";\n                                        }\n                                    }\n                                    else\n                                    {\n                                        Btn_JuTime.Text = \"\u6bcf\u9774\u65f6\u95f4\u4e3a70\u79d2\";\n                                        val = \"70\";\n                                    }\n                                }\n                                else\n                                {\n                                    Btn_JuTime.Text = \"\u6bcf\u9774\u65f6\u95f4\u4e3a60\u79d2\";\n                                    val = \"60\";\n                                }\n                            }\n                            else\n                            {\n                                Btn_JuTime.Text = \"\u6bcf\u9774\u65f6\u95f4\u4e3a50\u79d2\";\n                                val = \"50\";\n                            }\n                        }\n                        else\n                        {\n                            Btn_JuTime.Text = \"\u6bcf\u9774\u65f6\u95f4\u4e3a40\u79d2\";\n                            val = \"40\";\n                        }\n                    }\n                    else\n                    {\n                        Btn_JuTime.Text = \"\u6bcf\u9774\u65f6\u95f4\u4e3a30\u79d2\";\n                        val = \"30\";\n                    }\n                }\n                else\n                {\n                    Btn_JuTime.Text = \"\u6bcf\u9774\u65f6\u95f4\u4e3a20\u79d2\";\n                    val = \"20\";\n                }\n            }\n            DB_Operation.set_param_info(0, val);\n        }\nReflector will show a switch.\n```\nprivate void Btn_JuTime_Click(object sender, EventArgs e)\n{\n    string val = \"\";\n    switch (this.Btn_JuTime.Text)\n    {\n        case \"\u6bcf\u9774\u65f6\u95f4\u4e3a10\u79d2\":\n            this.Btn_JuTime.Text = \"\u6bcf\u9774\u65f6\u95f4\u4e3a20\u79d2\";\n            val = \"20\";\n            break;\n    case \"\u6bcf\u9774\u65f6\u95f4\u4e3a20\u79d2\":\n        this.Btn_JuTime.Text = \"\u6bcf\u9774\u65f6\u95f4\u4e3a30\u79d2\";\n        val = \"30\";\n        break;\n\n    case \"\u6bcf\u9774\u65f6\u95f4\u4e3a30\u79d2\":\n        this.Btn_JuTime.Text = \"\u6bcf\u9774\u65f6\u95f4\u4e3a40\u79d2\";\n        val = \"40\";\n        break;\n\n    case \"\u6bcf\u9774\u65f6\u95f4\u4e3a40\u79d2\":\n        this.Btn_JuTime.Text = \"\u6bcf\u9774\u65f6\u95f4\u4e3a50\u79d2\";\n        val = \"50\";\n        break;\n\n    case \"\u6bcf\u9774\u65f6\u95f4\u4e3a50\u79d2\":\n        this.Btn_JuTime.Text = \"\u6bcf\u9774\u65f6\u95f4\u4e3a60\u79d2\";\n        val = \"60\";\n        break;\n\n    case \"\u6bcf\u9774\u65f6\u95f4\u4e3a60\u79d2\":\n        this.Btn_JuTime.Text = \"\u6bcf\u9774\u65f6\u95f4\u4e3a70\u79d2\";\n        val = \"70\";\n        break;\n\n    case \"\u6bcf\u9774\u65f6\u95f4\u4e3a70\u79d2\":\n        this.Btn_JuTime.Text = \"\u6bcf\u9774\u65f6\u95f4\u4e3a80\u79d2\";\n        val = \"80\";\n        break;\n\n    case \"\u6bcf\u9774\u65f6\u95f4\u4e3a80\u79d2\":\n        this.Btn_JuTime.Text = \"\u6bcf\u9774\u65f6\u95f4\u4e3a90\u79d2\";\n        val = \"90\";\n        break;\n\n    case \"\u6bcf\u9774\u65f6\u95f4\u4e3a90\u79d2\":\n        this.Btn_JuTime.Text = \"\u6bcf\u9774\u65f6\u95f4\u4e3a10\u79d2\";\n        val = \"10\";\n        break;\n}\nDB_Operation.set_param_info(0, val);\n\n}\nanother problem:\nILSpy will use PrivateImplementationDetails sometimes:\nusing System.Collections;\nusing System.Runtime.InteropServices;\ninternal class \n{\n    [StructLayout(LayoutKind.Explicit, Pack = 1, Size = 112)]\n    private struct $$struct0x6000274-1\n    {\n    }\n[StructLayout(LayoutKind.Explicit, Pack = 1, Size = 2000)]\nprivate struct $$struct0x6000274-2\n{\n}\n\n[StructLayout(LayoutKind.Explicit, Pack = 1, Size = 2000)]\nprivate struct $$struct0x6000274-3\n{\n}\n\n[StructLayout(LayoutKind.Explicit, Pack = 1, Size = 2000)]\nprivate struct $$struct0x6000274-4\n{\n}\n\n[StructLayout(LayoutKind.Explicit, Pack = 1, Size = 2000)]\nprivate struct $$struct0x6000274-5\n{\n}\n\ninternal static Hashtable $$method0x600004a-1;\n\ninternal static Hashtable $$method0x6000114-1;\n\ninternal static Hashtable $$method0x6000123-1;\n\ninternal static Hashtable $$method0x6000126-1;\n\ninternal static $$struct0x6000274-1 $$method0x6000274-1/* Not supported: data(1F 3A 32 FD BB E3 28 B1 70 88 DE E9 F2 88 B2 0F A2 29 8C 35 3B A0 09 98 1A A0 4B E1 F2 DE 73 C8 DC 87 A1 7E E2 9A 4C 68 F6 92 DA E2 49 8B D2 3D C2 CC 25 BE 69 97 40 FB 84 6D D9 1D D5 48 46 7A F8 71 94 6B 8F D9 AD D0 FB 60 98 89 28 D7 F4 62 BB EB 92 D4 32 BC AA CB DB E3 97 35 63 AB 3A F8 F9 A6 0E 56 1A 43 C0 5C 79 9A 53 53 AE BB 11 A4) */;\n\ninternal static $$struct0x6000274-2 $$method0x6000274-2/* Not supported: data(16 5F 16 23 5F 16 04 04 72 0A 12 42 3A 11 65 65 11 00 75 56 14 05 52 1D 41 71 68 5E 4B 53 00 06 7C 01 05 14 55 07 56 64 6E 1F 07 69 3E 43 32 04 6F 03 3B 42 47 62 21 7E 29 4D 66 34 2A 37 67 1B 30 31 54 28 03 6A 1B 24 22 63 4D 6B 33 72 48 3A 0B 5A 42 59 5D 43 02 24 5F 56 08 42 2D 74 37 4E 4F 61 10 4D 37 45 13 2C 65 7E 53 22 6D 07 0D 46 7C 08 05 69 75 40 71 79 31 67 7D 6C 4B 10 73 1C 73 3D 78 3A 18 51 30 48 42 2C 75 42 1B 70 1B 54 7C 72 2A 59 3B 12 69 65 5A 64 75 3F 6F 47 43 53 4E 60 21 4D 50 33 4E 22 4C 42 01 43 5E 05 06 61 5A 38 16 68 72 52 31 1E 54 47 27 48 15 5D 46 15 3F 34 16 79 08 4C 59 0F 1F 14 19 00 1C 5C 19 74 1A 2D 6D 07 77 72 73 18 0E 39 50 37 0C 27 0C 09 78 1F 78 3B 7A 54 72 3E 63 5D 29 10 76 35 5F 0E 68 4A 37 02 0F 4C 5D 78 6C 34 7D 1E 6D 41 2A 75 15 23 78 3B 08 67 18 29 32 57 53 37 66 7E 3F 2F 7C 68 71 71 37 26 66 56 3C 41 53 09 76 48 15 6E 7D 36 0B 18 25 02 01 79 59 0E 75 42 00 6A 5D 33 3D 39 0B 77 38 6D 73 0C 14 5E 5A 0E 0C 02 64 22 3F 79 43 69 40 5B 06 02 01 59 03 4F 37 12 31 43 18 4F 2B 4B 57 6B 0C 08 6D 39 14 58 26 5E 16 24 28 39 73 65 64 1B 3E 78 28 58 45 0C 03 54 13 21 1F 15 1B 69 06 1D 40 45 05 49 14 23 2D 70 47 09 71 75 7B 4D 76 46 56 5F 33 41 7D 72 78 5A 48 68 0B 1E 36 63 74 0F 28 39 12 5F 28 2D 2A 3F 44 08 44 59 0F 2E 23 17 2F 32 2F 71 5F 78 01 5D 18 52 5A 3F 3D 0A 17 66 65 39 4E 39 7C 11 76 25 1C 15 65 72 7C 6F 55 1B 68 14 08 4F 28 12 12 63 61 6D 20 02 53 32 5A 79 3E 1A 4C 33 50 27 33 56 1C 05 4B 5D 02 1F 62 30 4D 14 24 17 0D 6B 58 6C 3C 36 1D 51 5B 2F 15 44 0C 32 14 27 32 55 2A 09 15 51 75 2D 0C 5D 77 60 00 17 67 64 14 49 5D 58 1E 3A 11 3D 01 06 69 61 79 52 33 26 0F 49 35 27 73 4A 2F 3D 32 22 5B 65 03 22 2D 25 52 12 08 7D 52 05 54 4C 37 5B 1A 21 5C 0E 47 10 1D 21 3E 68 63 52 47 11 6C 01 41 35 44 2F 51 4A 4E 48 63 22 79 53 5E 30 7E 7A 13 6E 06 59 2B 0D 72 21 75 48 5D 3E 31 1B 7A 55 3D 40 5E 30 29 56 7E 5C 0B 09 4E 60 22 77 2F 56 1D 68 27 16 7C 11 5E 50 3D 5D 01 3B 70 14 4F 01 70 07 75 7E 5C 4F 75 7E 1E 32 2D 55 5E 68 47 3D 35 36 4A 01 70 2B 18 77 04 5B 38 71 4F 70 7A 66 51 36 1F 55 01 5E 71 70 1F 23 0A 39 3F 34 10 58 71 4D 06 5D 0E 2C 21 41 07 2D 60 50 79 66 7D 19 6E 1F 56 6D 4D 78 4A 4E 6B 42 51 22 74 17 23 61 2D 79 7B 33 0D 0B 7C 17 73 0E 0D 3B 3D 02 4B 46 34 19 51 5E 69 1E 3E 27 22 36 0D 05 2D 32 69 7A 34 41 67 43 14 48 16 0A 57 26 47 07 40 5F 3B 52 62 3F 7C 6E 0C 27 06 29 41 00 22 0B 79 4C 4A 38 2F 2B 44 65 77 67 7A 58 3E 17 40 36 70 6A 79 10 02 59 5C 23 05 4A 42 5D 52 74 21 0D 62 56 32 6F 27 2C 1E 44 53 17 50 15 44 20 2D 66 45 2D 79 6F 62 42 2E 73 0E 61 65 04 07 73 1B 59 2D 56 32 2D 3C 1D 31 0A 76 2D 1C 0F 7E 2C 12 55 74 3B 04 7A 18 77 29 60 37 33 5A 2B 43 38 41 28 58 02 33 6F 52 66 2C 51 52 0E 3C 73 62 61 7D 37 11 43 2F 52 49 41 39 6B 06 64 52 2E 64 0C 5B 43 11 6F 6A 03 1D 10 7B 6C 2F 4C 23 1B 6B 20 4F 43 70 00 70 69 24 53 3F 41 06 4A 0B 0E 75 2C 15 77 42 49 41 00 37 0A 09 5B 52 3C 79 0A 51 52 3C 56 2A 7C 17 24 40 16 63 7A 36 45 1D 65 26 76 4D 79 2F 24 48 49 43 64 01 09 1A 3B 4F 22 6C 1F 04 7E 42 45 5D 0B 76 08 4E 21 13 75 3C 1C 61 24 60 58 1E 5C 0F 5A 6B 53 17 1A 5E 5B 4E 2C 41 41 4C 76 5A 26 08 53 7C 21 03 06 22 4A 17 4A 74 45 41 43 2B 1B 3B 13 47 11 79 0C 2B 55 67 4F 26 6F 1D 74 2A 22 77 74 22 55 47 14 2F 0D 36 5A 11 28 1B 66 51 52 63 17 05 6D 68 72 26 04 11 02 18 04 30 62 24 6B 2F 47 08 36 41 72 48 6F 3F 47 27 59 5E 38 77 5D 2A 6C 4D 67 61 16 0D 5A 0E 73 1F 44 5B 65 72 5F 13 2B 32 7E 0A 01 50 40 6C 2B 25 74 2E 01 63 54 0A 43 0C 78 28 6E 2D 66 0F 03 70 54 11 4C 0D 25 67 4D 37 6B 6E 3D 03 2C 70 76 32 76 34 34 55 28 1A 0B 11 32 5E 44 61 3B 1F 60 31 47 44 5F 7C 67 1B 3F 60 0E 66 01 07 1D 38 55 0F 6F 39 65 72 19 5A 00 54 37 55 0F 37 74 5D 6B 30 05 53 07 1F 25 5D 75 22 0F 5E 18 29 1A 03 44 4B 07 7C 6C 23 2F 0B 48 2F 20 01 7D 28 35 4C 66 2C 1E 1D 71 68 66 48 53 2C 4F 3E 4B 22 4C 3B 70 5C 32 3E 79 1F 1E 55 6E 07 10 47 37 3C 70 00 2C 2B 3C 60 41 2C 65 18 3B 23 5E 52 36 51 0D 70 3B 67 63 4C 5B 3F 78 41 4A 37 23 1D 5D 46 0E 3A 40 7D 56 62 0A 4B 4A 74 52 40 25 35 65 0A 25 54 69 03 75 64 23 42 60 15 74 07 44 5D 14 01 53 09 64 0E 22 53 78 4A 09 05 10 12 07 38 29 35 5C 1C 11 75 14 65 66 6F 23 13 12 03 57 4C 19 00 21 3C 28 0F 62 5E 19 31 4C 55 5C 68 46 0B 6B 6C 7E 25 4D 4C 23 38 08 04 4C 6B 36 77 0B 76 0A 0C 2E 32 5E 14 32 43 7D 05 6F 6E 0B 10 60 1A 5A 4A 13 54 05 16 67 64 34 3F 3E 15 10 49 39 01 66 77 4A 6C 14 05 48 62 6A 4C 16 55 01 59 5C 10 7C 71 60 3C 78 0D 34 3D 4A 10 71 5C 2D 13 0F 43 78 24 39 3C 62 7D 72 51 6E 01 4A 16 54 0D 7A 60 73 12 78 0C 73 1F 7C 65 62 5A 6F 0E 2C 5E 4E 2D 68 35 43 61 65 2E 35 00 58 28 3F 45 22 02 20 5D 0D 27 6B 37 63 00 53 60 41 12 65 29 49 11 3C 06 4B 57 16 4C 62 41 36 39 56 21 14 2F 66 19 39 44 11 59 5C 08 34 5D 21 54 6A 14 78 14 02 5D 24 4E 05 3A 16 4E 2E 2B 03 66 39 1C 4B 4E 4E 07 58 38 03 1B 64 0D 12 21 37 05 55 17 7C 63 05 55 3B 0A 3C 05 5A 57 39 6B 46 1A 19 17 28 7D 78 0C 01 06 79 0F 43 7D 0F 3E 4F 20 47 72 5A 02 48 60 7D 11 48 47 15 22 5B 02 27 4B 6B 1C 51 08 14 0F 2F 05 42 29 17 13 30 70 3A 4B 53 4D 11 6C 63 18 11 76 55 38 60 19 54 6F 33 08 02 11 4E 53 35 2A 3E 77 26 5D 05 51 33 56 63 6B 42 75 2E 19 01 2E 6F 69 60 35 3E 68 60 10 3A 0C 4E 44 79 7E 4A 7E 08 72 73 4D 2F 25 68 33 48 4E 79 0D 73 0C 21 79 54 1B 3A 65 61 76 59 6F 04 14 5D 63 62 0C 42 76 04 23 10 07 05 1E 49 10 3F 5E 3C 2A 79 60 7E 71 06 25 68 21 21 0F 03 40 67 01 4D 72 10 23 70 08 70 03 10 43 50 77 54 70 68 66 74 2B 0E 4D 3A 77 20 5B 1C 36 37 51 15 15 02 26 44 05 28 2E 4F 3D 49 57 21 19 50 7C 27 1A 1B 3F 71 37 71 5C 15 49 50 02 5B 1E 60 70 7C 09 7C 01 02 7B 12 02 08 0C 6C 23 10 60 46 18 13 19 22 35 0D 59 5B 5C 0C 59 5F 70 14 24 60 21 5E 6B 72 11 68 62 04 50 30 57 4E 37 0F 3C 60 20 18 07 48 38 49 2F 57 78 7B 39 04 4F 03 31 14 45 34 7D 64 76 0D 2D 33 22 52 10 4F 66 16 49 40 13 10 7C 13 24 5F 75 0C 1A 45 1D 3B 59 2A 69 53 22 1B 0A 3C 79 6A 55 0A 56 03 61 7E 68 48 63 39 72 0A 56 42 1F 73 73 2B 31 25 11 26 10 42 41 2A 63 75 63 7E 2D 20 25 7C 2C 47 25 2D 7A 0A 40 67 50 28 76 6A 60 42 1A 66 28 41 5D 67 1F 08 26 24 66 30 2A 4A 5C 64 61 66 51 24 64 46 2C 56 2E 15 5C 1F 2C 3A 13 67) */;\n\ninternal static $$struct0x6000274-3 $$method0x6000274-3/* Not supported: datan\ninternal static $$struct0x6000274-4 $$method0x6000274-4/* Not supported: datan\ninternal static $$struct0x6000274-5 $$method0x6000274-5/* Not supported: datan\n}\n```\nprivate void gsm_Recvsms(object object_0, _DEdisonSmsGwEvents_RecvsmsEvent _DEdisonSmsGwEvents_RecvsmsEvent_0)\n        {\n            if (global::<PrivateImplementationDetails>.$$method0x6000114-1 == null)\n            {\n                global::<PrivateImplementationDetails>.$$method0x6000114-1 = new Hashtable(36, 0.5f)\n                {\n                    {\n                        (object)\"99\",\n                        (object)0\n                    },\n                    {\n                        (object)\"44\",\n                        (object)1\n                    },\n                    {\n                        (object)\"88\",\n                        (object)2\n                    },\n                    {\n                        (object)\"55\",\n                        (object)3\n                    },\n                    {\n                        (object)\"33\",\n                        (object)4\n                    },\n                    {\n                        (object)\"11\",\n                        (object)5\n                    },\n                    {\n                        (object)\"22\",\n                        (object)6\n                    },\n                    {\n                        (object)\"66\",\n                        (object)7\n                    },\n                    {\n                        (object)\"70\",\n                        (object)8\n                    },\n                    {\n                        (object)\"77\",\n                        (object)9\n                    },\n                    {\n                        (object)\"00\",\n                        (object)10\n                    },\n                    {\n                        (object)\"12\",\n                        (object)11\n                    },\n                    {\n                        (object)\"38\",\n                        (object)12\n                    },\n                    {\n                        (object)\"39\",\n                        (object)13\n                    },\n                    {\n                        (object)\"13\",\n                        (object)14\n                    },\n                    {\n                        (object)\"14\",\n                        (object)15\n                    },\n                    {\n                        (object)\"82\",\n                        (object)16\n                    },\n                    {\n                        (object)\"83\",\n                        (object)17\n                    }\n                };\n            }\n            string strPhoneNumber = _DEdisonSmsGwEvents_RecvsmsEvent_0.strPhoneNumber;\n            bool_3 = false;\n            object key;\n            if (method_42(strPhoneNumber) && _DEdisonSmsGwEvents_RecvsmsEvent_0.strSmsContent.Length > 1 && (key = _DEdisonSmsGwEvents_RecvsmsEvent_0.strSmsContent.Substring(0, 2)) != null && (key = global::<PrivateImplementationDetails>.$$method0x6000114-1[key]) != null)\n            {\n                switch ((int)key)\n                {\n                case 0:\n                    method_40(strPhoneNumber, \"99\" + method_43());\n                    break;\n                case 1:\n                    if (_DEdisonSmsGwEvents_RecvsmsEvent_0.strSmsContent.Length == 17 && _DEdisonSmsGwEvents_RecvsmsEvent_0.strSmsContent.Substring(2, 3) == string_4.Substring(0, 3) && bool_3)\n                    {\n                        string text5 = \"\";\n                        text5 = (string_4 = string_4 + \"/\" + _DEdisonSmsGwEvents_RecvsmsEvent_0.strSmsContent.Substring(5, 12));\n                        DB_Operation.exec_sql(\"update gsm set remote_gsm='\" + My_New_Security.En_code(string_4) + \"'\");\n                        method_40(strPhoneNumber, \"\u6210\u529f\");\n                    }\n                    else\n                    {\n                        method_40(strPhoneNumber, \"\u5931\u8d25\");\n                    }\n                    break;\n                case 2:\n                    if (_DEdisonSmsGwEvents_RecvsmsEvent_0.strSmsContent.Length == 16 && _DEdisonSmsGwEvents_RecvsmsEvent_0.strSmsContent.Substring(2, 3) == string_4.Substring(0, 3) && bool_3)\n                    {\n                        string text = \"\";\n                        if (!method_42(_DEdisonSmsGwEvents_RecvsmsEvent_0.strSmsContent.Substring(5, 11)))\n                        {\n                            method_40(strPhoneNumber, \"\u5931\u8d25\");\n                        }\n                        else\n                        {\n                            string[] array = string_4.Split('/');\n                            for (int i = 0; i < array.Length; i++)\n                            {\n                                if (i > 0)\n                                {\n                                    if (array[i].Substring(0, 11) != _DEdisonSmsGwEvents_RecvsmsEvent_0.strSmsContent.Substring(5, 11))\n                                    {\n                                        text = text + array[i] + \"/\";\n                                    }\n                                }\n                                else\n                                {\n                                    text = text + array[i] + \"/\";\n                                }\n                            }\n                            string_4 = text.Substring(0, text.Length - 1);\n                            DB_Operation.exec_sql(\"update gsm set remote_gsm='\" + My_New_Security.En_code(string_4) + \"'\");\n                            method_40(strPhoneNumber, \"\u6210\u529f\");\n                        }\n                    }\n                    else\n                    {\n                        method_40(strPhoneNumber, \"\u5931\u8d25\");\n                    }\n                    break;\n                case 3:\n                    if (_DEdisonSmsGwEvents_RecvsmsEvent_0.strSmsContent.Length == 8 && _DEdisonSmsGwEvents_RecvsmsEvent_0.strSmsContent.Substring(2, 3) == string_4.Substring(0, 3) && bool_3)\n                    {\n                        string text2 = \"\";\n                        text2 = _DEdisonSmsGwEvents_RecvsmsEvent_0.strSmsContent.Substring(5, 3) + \"/\";\n                        string[] array2 = string_4.Split('/');\n                        for (int j = 1; j < array2.Length; j++)\n                        {\n                            text2 = text2 + array2[j] + \"/\";\n                        }\n                        string_4 = text2.Substring(0, text2.Length - 1);\n                        DB_Operation.exec_sql(\"update gsm set remote_gsm='\" + My_New_Security.En_code(string_4) + \"'\");\n                        method_40(strPhoneNumber, \"\u6210\u529f\");\n                    }\n                    else\n                    {\n                        method_40(strPhoneNumber, \"\u5931\u8d25\");\n                    }\n                    break;\n                case 4:\n                    if (_DEdisonSmsGwEvents_RecvsmsEvent_0.strSmsContent.Length == 72 && bool_3)\n                    {\n                        try\n                        {\n                            int id = Convert.ToInt32(_DEdisonSmsGwEvents_RecvsmsEvent_0.strSmsContent.Substring(2, 4));\n                            if (DB_Operation.is_used(id))\n                            {\n                                method_40(strPhoneNumber, \"\u5931\u8d25\");\n                            }\n                            else\n                            {\n                                string text4 = _DEdisonSmsGwEvents_RecvsmsEvent_0.strSmsContent.Substring(6, 66);\n                                if (!method_37(text4))\n                                {\n                                    method_40(strPhoneNumber, \"\u5931\u8d25\");\n                                }\n                                else\n                                {\n                                    DB_Operation.exec_sql(\"exec update_t_ludan \" + id.ToString() + \",'\" + My_New_Security.En_code(text4) + \"'\");\n                                    method_40(strPhoneNumber, \"\u6210\u529f\");\n                                }\n                            }\n                        }\n                        catch\n                        {\n                            method_40(strPhoneNumber, \"\u5931\u8d25\");\n                        }\n                    }\n                    else\n                    {\n                        method_40(strPhoneNumber, \"\u5931\u8d25\");\n                    }\n                    break;\n                case 5:\n                    method_40(strPhoneNumber, zhangmu());\n                    break;\n                case 6:\n                    if (_DEdisonSmsGwEvents_RecvsmsEvent_0.strSmsContent.Length == 6 && bool_3)\n                    {\n                        try\n                        {\n                            int int_ = Convert.ToInt32(_DEdisonSmsGwEvents_RecvsmsEvent_0.strSmsContent.Substring(2, 4));\n                            method_40(strPhoneNumber, method_46(int_));\n                        }\n                        catch\n                        {\n                        }\n                    }\n                    else\n                    {\n                        method_40(strPhoneNumber, \"\u5931\u8d25\");\n                    }\n                    break;\n                case 7:\n                    if ((_DEdisonSmsGwEvents_RecvsmsEvent_0.strSmsContent.Substring(2, 1) == \"1\" || _DEdisonSmsGwEvents_RecvsmsEvent_0.strSmsContent.Substring(2, 1) == \"2\") && bool_3)\n                    {\n                        method_40(strPhoneNumber, \"\u6210\u529f\");\n                        method_35();\n                        break;\n                    }\n                    method_40(strPhoneNumber, \"\u5931\u8d25\");\n                    break;\n                case 8:\n                    if (bool_3)\n                    {\n                        Clear_Zero();\n                    }\n                    break;\n                case 9:\n                    if (_DEdisonSmsGwEvents_RecvsmsEvent_0.strSmsContent.Length == 5 && _DEdisonSmsGwEvents_RecvsmsEvent_0.strSmsContent.Substring(2, 3) == string_4.Substring(0, 3) && bool_3)\n                    {\n                        string[] array3 = string_4.Split('/');\n                        string text3 = \"\";\n                        for (int k = 1; k < array3.Length; k++)\n                        {\n                            text3 = text3 + array3[k] + \"\\n\\r\";\n                        }\n                        method_40(strPhoneNumber, text3);\n                    }\n                    else\n                    {\n                        method_40(strPhoneNumber, \"\u5931\u8d25\");\n                    }\n                    break;\n                case 10:\n                    if (_DEdisonSmsGwEvents_RecvsmsEvent_0.strSmsContent.Length == 16 && _DEdisonSmsGwEvents_RecvsmsEvent_0.strSmsContent.Substring(2, 3) == string_4.Substring(0, 3) && bool_3)\n                    {\n                        DB_Operation.exec_sql(\"update gsm set local_gsm='\" + My_New_Security.En_code(_DEdisonSmsGwEvents_RecvsmsEvent_0.strSmsContent.Substring(5, 11)) + \"'\");\n                        method_40(strPhoneNumber, \"\u6210\u529f,\u8bf7\u901a\u77e5\u91cd\u542f\");\n                    }\n                    else\n                    {\n                        method_40(strPhoneNumber, \"\u5931\u8d25\");\n                    }\n                    break;\n                case 11:\n                    if (_DEdisonSmsGwEvents_RecvsmsEvent_0.strSmsContent.Length == 14 && bool_3)\n                    {\n                        if (DB_Operation.get_param_info(20) == _DEdisonSmsGwEvents_RecvsmsEvent_0.strSmsContent.Substring(2, 6))\n                        {\n                            DB_Operation.set_param_info(20, _DEdisonSmsGwEvents_RecvsmsEvent_0.strSmsContent.Substring(8, 6));\n                            method_40(strPhoneNumber, \"\u6210\u529f\");\n                        }\n                        else\n                        {\n                            method_40(strPhoneNumber, \"\u5931\u8d25\");\n                        }\n                    }\n                    else\n                    {\n                        method_40(strPhoneNumber, \"\u5931\u8d25\");\n                    }\n                    break;\n                case 12:\n                    if (bool_3)\n                    {\n                        method_40(strPhoneNumber, \"\u53c2\u6570\u5bc6\u7801:\" + DB_Operation.readPwd(4));\n                    }\n                    else\n                    {\n                        method_40(strPhoneNumber, \"\u5931\u8d25\");\n                    }\n                    break;\n                case 13:\n                    if (_DEdisonSmsGwEvents_RecvsmsEvent_0.strSmsContent.Length == 8 && bool_3)\n                    {\n                        DB_Operation.exec_sql(\"exec upd_pwd 4,'\" + My_New_Security.En_code(_DEdisonSmsGwEvents_RecvsmsEvent_0.strSmsContent.Substring(2, 6)) + \"'\");\n                        method_40(strPhoneNumber, \"\u6210\u529f\");\n                    }\n                    else\n                    {\n                        method_40(strPhoneNumber, \"\u5931\u8d25\");\n                    }\n                    break;\n                case 14:\n                    if (_DEdisonSmsGwEvents_RecvsmsEvent_0.strSmsContent.Length == 14 && bool_3)\n                    {\n                        if (DB_Operation.readPwd(2) == _DEdisonSmsGwEvents_RecvsmsEvent_0.strSmsContent.Substring(2, 6))\n                        {\n                            DB_Operation.exec_sql(\"exec upd_pwd 2,'\" + My_New_Security.En_code(_DEdisonSmsGwEvents_RecvsmsEvent_0.strSmsContent.Substring(8, 6)) + \"'\");\n                            method_40(strPhoneNumber, \"\u6210\u529f\");\n                        }\n                        else\n                        {\n                            method_40(strPhoneNumber, \"\u5931\u8d25\");\n                        }\n                    }\n                    else\n                    {\n                        method_40(strPhoneNumber, \"\u5931\u8d25\");\n                    }\n                    break;\n                case 15:\n                    if (_DEdisonSmsGwEvents_RecvsmsEvent_0.strSmsContent.Length == 14 && bool_3)\n                    {\n                        if (DB_Operation.readPwd(1) == _DEdisonSmsGwEvents_RecvsmsEvent_0.strSmsContent.Substring(2, 6))\n                        {\n                            DB_Operation.exec_sql(\"exec upd_pwd 1,'\" + My_New_Security.En_code(_DEdisonSmsGwEvents_RecvsmsEvent_0.strSmsContent.Substring(8, 6)) + \"'\");\n                            method_40(strPhoneNumber, \"\u6210\u529f\");\n                        }\n                        else\n                        {\n                            method_40(strPhoneNumber, \"\u5931\u8d25\");\n                        }\n                    }\n                    else\n                    {\n                        method_40(strPhoneNumber, \"\u5931\u8d25\");\n                    }\n                    break;\n                case 16:\n                    if (_DEdisonSmsGwEvents_RecvsmsEvent_0.strSmsContent.Length == 2 && bool_3)\n                    {\n                        method_40(strPhoneNumber, method_38());\n                    }\n                    else\n                    {\n                        method_40(strPhoneNumber, \"\u5931\u8d25\");\n                    }\n                    break;\n                case 17:\n                    if (_DEdisonSmsGwEvents_RecvsmsEvent_0.strSmsContent.Length > 15 && bool_3)\n                    {\n                        if (method_39(_DEdisonSmsGwEvents_RecvsmsEvent_0.strSmsContent))\n                        {\n                            method_40(strPhoneNumber, \"\u6210\u529f\");\n                        }\n                        else\n                        {\n                            method_40(strPhoneNumber, \"\u5931\u8d25\");\n                        }\n                    }\n                    else\n                    {\n                        method_40(strPhoneNumber, \"\u5931\u8d25\");\n                    }\n                    break;\n                }\n            }\n        }. 1.zip\n. Generally speaking, ILSpy doesn't restore property when lacking some assembies, but this one doesn't lack anything.. I find a .net 1 application without obfuscated, ILSpy doesn't restore so many properties, but there's no lacking assemblies. So I write a test, and modify its IL like that .net 1 application, it's runnable.\nMaybe ILSpy should find the method from base type if it isn't exist.. I think ILSpy can do it like dnSpy:\nIf can't resolve a MethodRef to MethodDef, and the name of the MethodRef starts with \"get_\" or \"set_\", allways treat it as property.. 1.There's no drawback as you say: because if a methodref can not be resolved to methoddef, there's also no links on these methods, because there is no method definition also.\nSo, both can not link to, why can not treat it as property?\n2.Does ILSpy fix which no lacking assembly? (can resolve method defition from base type)\n3.How can I get MemberReference from MemberReferenceExpression? It seems there's no annotation stored in MemberReferenceExpression.. Now, I know how to generate such code by VS2003.\nCreate a project\n```\npublic class First\n{\n    public string Text\n    {\n        get\n        {\n            throw new NotImplementedException();\n        }\n        set\n        {\n        }\n    }\n}\npublic class Second : First\n{\n}\n```\nCreate one more project, and ref the above project\npublic class Third : Second\n{\n    public void Test()\n    {\n        Console.WriteLine(Text);\n        Console.WriteLine(this.Text);\n        Console.WriteLine(base.Text);\n    }\n}\n. How can I get MemberReference from MemberReferenceExpression? It seems there's no annotation stored in MemberReferenceExpression.\nI want to fix it myself, but I can't get enough information from MemberReferenceExpression. But I can't get MemberResolveResult from MemberReferenceExpression, there's nothing stored in the annotations.. So, what I want to say is: why don't store MemberResolveResult in the annotations of MemberReferenceExpression? Do you forget?. Do you fix the oversight?\nIf there's no problem with the lastest commit, how can I fix it on the base of Cecil version (v3.2)?. I changed my name, but it seems only take effect in commit 3( Fix named arguments)?. If my commit is based on 22cff12, when I push it, I will get:\n```\nError: failed to push some refs to 'https://github.com/CreateAndInject/ILSpy.git'\nError: hint: Updates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. Integrate the remote changes (e.g.\nhint: 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\nError encountered while pushing to the remote repository: rejected Updates were rejected because the tip of your current branch is behind its remote counterpart. Integrate the remote changes  before pushing again.\n```\nCould I must use git push --force? But I don't install git, I just use vs2017, can I do it in vs2017?. I install a git, and use git push --force, is the email OK now? If not, I will enable the setting in vs2017 and try again.. I want to get the instance of ModuleDefinition from LoadedAssembly like GetModuleDefinitionOrNull/GetModuleDefinitionAsync in ILSpy3. Why don't use dnlib?. SRM seems very low level and anti man, it's very hard to use\nfor example, the following method indicates whether a type is a component, how can I do it use SRM:\npublic static bool IsComponent(this TypeDefinition td)\n{\n    while (true)\n    {\n        if (td == null)\n            return false;\n        var tr = td.BaseType;\n        if (tr == null || tr.Scope.Name == \"WindowsBase\")\n            return false;\n        if (tr.Scope.Name == \"System\" && tr.Name == \"Component\" ||\n            tr.Scope.Name == \"System.Windows.Forms\" && \"Form Control UserControl\".Split().Contains(tr.Name))\n            return true;\n        td = tr.Resolve();\n    }\n}. Why isn't there a 'Body' property in IMethod? How can I get instructions/variables/exceptionhandlers?. Web.zip\nWeb.Areas.Admin.Controllers.LoanController.Edit(int). This problem desn't fix completely:\nWeb.Areas.Admin.Controllers.CostReceController.Sexport\nWeb.Areas.Admin.Controllers.CostReceController.ExpReportList\nBy the way, see :Web.Areas.Admin.Controllers.AgencyController.Delete\npublic ActionResult Delete(string IDS)\n        {\n            string[] arr = IDS.Split(',');\n            int AID = base.Session[\"AdminID\"].ParseInt();\n            int s = (from a in db.Agency\n            where arr.Contains(a.ID.ToString()) && (object?)a.AdminID == (object?)(int?)AID\n            select a).Update((Agency a) => new Agency\n            {\n                IsDel = (int?)1\n            });\n            return Json(new Result(s));\n        }\nILSpy try to convert something to (object?), but 'object' isn't value type, so it's an error,and convert to (int?) is unnecessary\nThe corrent code is :\nwhere arr.Contains(a.ID.ToString()) && a.AdminID == AID. How about checked Show internal types and members by default? I think this setting is used mostly.\nI write several plugins for ILSpy, but I don't want to migrate from Cecil to SRM, so I usually use ILSpy4 and old ILSpy at the same time.\n. > We have a high-level type system (ICSharpCode.Decompiler.TypeSystem) wrapped around SRM. Anytime you need Resolve(), that's a sure sign you should be working with the type system and not SRM directly. (only the type system provides a resolve implementation)\nI find this in the wiki, what is Resolve()? Is it an extension method? Should I import some namespace to find it? Which namespace and type?. Is the order determined?\nIs 'B' allways the first one invoked on C in these 4 methods?\n. GetAllBaseTypeDefinitions\nGetAllBaseTypes\ninvoked on C, this would return System.Object, A, I1, I2, B, I3, I4\nIf A I3 I4 is defined in one assembly, but can not found, what happened?\n. > Sorry, but in the code you posted, what is the purpose of iterating over all type references?\n\nThe AssemblyRef table should return all assembly references used in the module. There can be no assembly reference used in the TypeRef table, that is not listed in the AssemblyRef table. This means that the first loop should suffice. At least that's how Microsoft specified the format in ECMA-335.\nEDIT: Sorry, I misunderstood your code. You are trying to get all transitive references used by the \"main\" assembly. I will soon provide an example.\n\nSee this example:\nclass Program\n    {\n        static void Main(string[] args)\n        {\n            DataTable dt = new DataTable();\n            Console.WriteLine(dt);\n        }\n    }\nCompile it, and view the output in ILSpy, there're only 2 references:\nmscorlib, System.Data\nBut you must add reference 'System.Xml' to compile this code in Viusal Studio\nMy 'GetAssemblyReferencesEx' can get all references, but I don't know how to migrate to apply the latest ILSpy.\n. I'm sorry, VS2017 can compile it without 'System.Xml', but VS2010 can not.\nWhat I mean is just you say: get all transitive references used by the \"main\" assembly. class MyForm : System.Windows.Forms.Form\n{\n}\ntd.GetAllBaseTypes() (td is MyForm) return 2 types:\nMyForm\nForm\n\nWhy contains itself?\nWhy doesn't contain ContainerControl, Control, Component, Object....?\n\n. I get the reason of problem 2:\nI should use new DecompilerTypeSystem(...) instead of GetTypeSystemOrNull. > The following code returns all transitive references of an assembly:\n\ncs\npublic void Execute(TextViewContext context)\n{\n  if (context.SelectedTreeNodes == null)\n      return;\n  AssemblyTreeNode node = (AssemblyTreeNode)context.SelectedTreeNodes[0];\n  var asm = node.LoadedAssembly.GetPEFileOrNull();\n  if (asm != null) {\n      var compilation = new DecompilerTypeSystem(asm, node.LoadedAssembly.GetAssemblyResolver());\n      string output = string.Join(Environment.NewLine,\n          compilation.ReferencedModules\n              .Select(m => m.AssemblyName)\n              .Distinct(StringComparer.OrdinalIgnoreCase)\n      );\n      MessageBox.Show(output);\n  }\n}\nThe downside is that it includes references of B, that are not \"required\" by assembly A.\n\nyour code is just module.AssemblyReferences, not My GetAssemblyReferencesEx\nfor example:\nclass Program\n    {\n        static void Main(string[] args)\n        {\n            DataTable dt = new DataTable();\n            Console.WriteLine(dt);\n        }\n    }\nCompile it, and test the build assembly:\nyour code = module.AssemblyReferences:\nmscorlib, System.Data\nMy GetAssemblyReferencesEx:\nmscorlib, System.Data, System, System.Xml\nBecause 'IListSource' is defined in System.dll, and 'IXmlSerializable' is defined in System.Xml.dll, these 2 are DataTable's base interfaces.\n\nis there a sensible approach to including more metadata for unknown types in the TS?\n\nThis time, assume ILSpy load all needed assemblies.\n. Do you test it? Your code will get 11 assebmlies in my example:\nclass Program\n    {\n        static void Main(string[] args)\n        {\n            DataTable dt = new DataTable();\n            Console.WriteLine(dt);\n        }\n    }\nBut my GetAssemblyReferencesEx only contains 4:\nmscorlib, System.Data, System, System.Xml\nWhat I need is just how to get all type references of one assembly, and how to resolve type reference to type definition in order to know which assembly defined these types.. It doesn't work also.\ncall GetAllBaseType on DataTable contains 'IListSource', but it's UnknownType, so GetAllBaseTypeDefinitions doesn't contain it.\nIListSource is defined in System.dll, and ILSpy can find this dll, why is 'IListSource' UnknownType?\npublic static HashSet<string> GetAssemblyReferencesEx(this DecompilerTypeSystem ts)\n        {\n            var context = new GenericContext();\n            var hs = new HashSet<string>();\n            foreach (var r in ts.MainModule.PEFile.AssemblyReferences)\n                hs.Add(r.Name);\n            foreach (var type in ts.MainModule.PEFile.Metadata.TypeReferences)\n            {\n                var iType = ts.MainModule.ResolveType(type, context);\n                foreach (var baseType in iType.GetAllBaseTypeDefinitions())\n                    hs.Add(baseType.ParentModule.AssemblyName);\n            }\n            return hs;\n        }. > Note: there are different options to configure the type system. The ILSpy UI is using it essentially in \"single-assembly-mode\", so it can't resolve across assembly boundaries. You can create a full type system via new DecompilerTypeSystem(...).\nI find this in wiki, it says DecompilerTypeSystem is more powerful than SimpleCompilation, so why DecompilerTypeSystem can not do what SimpleCompilation can?\n. When call CollectReferencedAssemblies, ILSpy may load 30+ dlls(even if my program only ref to mscorlib and System.Data)\nSo I decide to use CreateCecilObjectModel.\nBy the way, why the results of GetAllBaseTypes contains itself?. Thanks!. There's no problem in Reflector.. There're asserts also in  RebelBetting.Client.Forms.MainForm.. UI. so I can copy or export using spaces.. ",
    "0xd4d": "It's Mono.Cecil that adds a mscorlib reference when there's none. ILSpy just uses the values Mono.Cecil hands over to it.\n. This occurs because the method is empty (just a ret instruction) but the method should return a value (it doesn't). You can add a hack yourself to ILAstBuilder.cs @ List<ByteCode> StackAnalysis(MethodDefinition methodDef)\nC#\n// add this hack after the first foreach loop\n            if (body.Count == 1 && body[0].Code == ILCode.Ret)\n                body[0].PopCount = 0;\nThese assemblies contain just metadata and no actual code.\n. This is a reference assembly and should contain no code. However, at least one method contains code, but it's incomplete and invalid. Open the real mscorlib and try to save that one instead.\nBTW, this is the method that caused the crash duing my test. The 2nd instruction is a branch but the target doesn't exist so it's null.\nSystem.Reflection.PropertyInfo System.DefaultBinder::SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])\n. This is the relevant line: https://github.com/icsharpcode/ILSpy/blob/master/ICSharpCode.Decompiler/Ast/AstBuilder.cs#L336\nThe constant is an Int32 even though it's an enum derived from UInt32. The file has been obfuscated with Dotfuscator.\n. Never mind, this works with latest ILSpy rev.\n. I couldn't reproduce it either but here's something similar:\nOriginal:\nC#\n            lock (this)\n                Console.WriteLine();\nDecompiled with ILSpy version 2.2.0.1817:\nC#\n            bool flag = false;\n            try\n            {\n                Program obj = this;\n                Monitor.Enter(this, ref flag);\n                Console.WriteLine();\n            }\n            finally\n            {\n                if (flag)\n                {\n                    Program obj;\n                    Monitor.Exit(obj);\n                }\n            }\nAlso note the interesting extra Program obj; inside the finally handler.\n. Try the .NET native runtime files. corefx.dll triggers the invalid cast exception. I forgot the name of the other file. If you don't have the files I can upload them.\nThe extra PointerType check matches the original code. Allowing a null 'this' input to extension methods and having a check there is a nice way to prevent having to add null checks all over the place.\nEDIT: Fixed last sentence\n. 2nd file (also from .NET Native) is: System.Xml.ReaderWriter.dll\n. Similar to #572\n. Seems like it's related to #569\n. This is a problem with the texteditor's progressbar. You can set its IsIndeterminate property to false when it's hidden or remove it completely. IsEnabled=false might also work.\n. Seems like a dupe of #592\n. ",
    "davidfowl": "So you're saying that I should file a bug on Cecil because that's what ILSpy decided to use?\n. I'll try the latest and see if it repros\n. ",
    "MulleDK19": "That's not wrong. .NET Reflector just explicitly casts it to a ushort. ILSpy does it implicit.\n. Still an issue.\n. ",
    "d3monfiend": "How the hell you do debugging?? Use console??\n. For some weird reasons, I am able to run ilspy from testplugin/release/ilspy.exe \nThe one from ilspy/obj/release/ilspy.exe can't be run.\n. ",
    "vincpa": "Can you please attach the DLL as I cannot reproduce the issue.\n. What exactly were you trying to decompile?\n. I understand that, but which DLL? What version of the .NET framework was it compiled for? I can't reproduce the issue unless you tell me what your trying to decompile.\n. ",
    "mzboray": "Let me know if that works for you\nOn Thu, Apr 17, 2014 at 8:48 PM, Vince Panuccio notifications@github.comwrote:\n\nCan you please attach the DLL as I cannot reproduce the issue.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/icsharpcode/ILSpy/issues/445#issuecomment-40784833\n.\n. \n",
    "mgwalm": "A dll?\nFrom: Vince Panuccio [mailto:notifications@github.com] \nSent: Thursday, 20 March 2014 9:14 PM\nTo: icsharpcode/ILSpy\nCc: mgwalm\nSubject: Re: [ILSpy] Throws exception when decompiling (#446)\nWhat exactly were you trying to decompile?\n\u2014\nReply to this email directly or view it on GitHub https://github.com/icsharpcode/ILSpy/issues/446#issuecomment-38155547 .  https://github.com/notifications/beacon/6946842__eyJzY29wZSI6Ik5ld3NpZXM6QmVhY29uIiwiZXhwaXJlcyI6MTcxMDkzMzIxMSwiZGF0YSI6eyJpZCI6Mjc2NzA5MDF9fQ==--e6692f7cd5805264ff43eff7d3b49b7877ba663d.gif \n. ",
    "diyefuzi": "Sorry, I've rashly concluded that a similar code was generated in a less special case.\nModified source code:\n``` C#\nstatic void ForEachNestedDoWhile2()\n{\n    IEnumerable items = null;\n    foreach (var item in items)\n    {\n        var shouldRepeat = false;\n        do\n        {\n            var shouldReturn = false;\n            if (shouldReturn)\n                return;\n        } while (shouldRepeat);\n    Environment.GetCommandLineArgs();\n}\n\n}\n```\nDecompiled source code:\nC#\nprivate static void ForEachNestedDoWhile2()\n{\n    IEnumerable<object> items = null;\n    foreach (object arg_11_0 in items)\n    {\n        bool shouldRepeat = false;\n        do\n        {\n            bool shouldReturn = false;\n            if (shouldReturn)\n            {\n                goto Block_3;\n            }\n        }\n        while (shouldRepeat);\n        Environment.GetCommandLineArgs();\n        continue;\n        Block_3:\n        break;\n    }\n}\nI agree that the control flow is correct indeed for both ForEachNestedDoWhile and ForEachNestedDoWhile2.\nIn case of ForEachNestedDoWhile I think that preferring a do-while loop over a while (true) loop with a goto at its end would result in a better code, because in that case there was no goto, thus no IL_1E, and the foreach loop was recognized.\nThe excessive use of goto, break and continue seems to be caused by the try-finally of the foreach loop:\n``` C#\nstatic void ReturnFromDoWhileInTryFinally()\n{\n    try\n    {\n        var shouldRepeat = false;\n        do\n        {\n            var shouldReturn = false;\n            if (shouldReturn)\n                return;\n        }\n        while (shouldRepeat);\n    Environment.GetCommandLineArgs();\n}\nfinally\n{\n    Environment.GetCommandLineArgs();\n}\n\nEnvironment.GetCommandLineArgs();\n\n}\n```\nDecompiled source code:\nC#\nprivate static void ReturnFromDoWhileInTryFinally()\n{\n    try\n    {\n        bool shouldRepeat = false;\n        while (true)\n        {\n            bool shouldReturn = false;\n            if (shouldReturn)\n            {\n                break;\n            }\n            if (!shouldRepeat)\n            {\n                goto Block_3;\n            }\n        }\n        return;\n        Block_3:\n        Environment.GetCommandLineArgs();\n    }\n    finally\n    {\n        Environment.GetCommandLineArgs();\n    }\n    Environment.GetCommandLineArgs();\n}\nNote that simpler code is generated for while loops and there is no difference when returning values or having a void return type in either case of while or do-while. So I think that applying the same try-finally+return optimization(s) to do-while loops that already are applied to while loops would easily result in a cleaner representation of the same control flow.\n. ",
    "ygoe": "I've implemented that in my fork. It has an option to switch it on and off and adds the token number after each tree node item's text. It wasn't hard to do it. The search is still missing. If you're interested, I'd need to look into code formatting to keep the patch small.\nPS: I was surprised how quick and easy the whole cloning and building went! :-)\n. ",
    "cctvbnm1111": "thanks ,I have found a solution for it.\n2014-04-11 4:20 GMT+08:00 Daniel Grunwald notifications@github.com:\n\nClosed #456 https://github.com/icsharpcode/ILSpy/issues/456.\n\nReply to this email directly or view it on GitHubhttps://github.com/icsharpcode/ILSpy/issues/456\n.\n. \n",
    "weltkante": "Fixing the async method itself is actually not that hard, they've just replaced a ldloca.s by a ldloc.0 instruction.\nDecoding the state machine is much harder though, I think they changed the branching. With some fixes I can get it to recognize the structure without throwing exceptions, but the decoder has big problems trying to delete the instructions between the await and the label where execution resumes; the result is a decompiled state machine which still has GetAwaiter/GetResult calls and parts of the branching haven't been removed, resulting in code which makes no sense at all.\n. From what I can tell this has been fixed on git head, possibly with 58404e8f9e793e1030d71789d0a31bec78114a1a\n. @dolkensp this specific issue was with the prerelease roslyn compiler, so its unlikely to be the same issue since back then.\nIf I remember right Roslyn had changed the generated IL bytecode patterns sometime between codeplex prerelease and VS2015 release, so the information mentioned here is outdated anyways. There are plenty of other open issues around with ILSpy unable to handle current Roslyn/VS2015 IL, so no point reopening this specific issue.\n. The build server at http://build.sharpdevelop.net/BuildArtefacts/#ILSpyMaster (linked from http://ilspy.net ) used to have newer builds, but right now its empty. Maybe they'll reappear after a while, maybe not. The whole project looks kinda dead, no responses neither here nor in the forum, just an occasional commit.\nThat said, building it yourself is pretty painless, I just did that myself a few weeks ago, you can just download or clone the repository and build the solution.\n. Shortly after your question the project received some new attention, there is now even a new build on http://ilspy.net/\n. @DerpMcDerp What? Mouse input shouldn't trigger focus rectangles, you only get these when using keyboard to navigate (just tested that to verify it). And when I use the keyboard I expect to tab into the close button.\n(Also it is possible to remove the focus rectangle explicitely if that should be required, no need to disable keyboard navigation.)\n. @DerpMcDerp when I turn that setting on I'd expect a focus rectangle on the close button. Thats what it does after all with almost everything else, and changing it here would (IMHO) introduce nonstandard behavior.\nAbout why I'd expect to tab into the close button? Because thats how all dialogs work, and a quick look into VS (the only program coming to mind with a popup search) is allowing it, but meh, escape or ctrl+F toggle would probably work just as well.\nI don't really care that much as long as its easily closable by keyboard, just found it odd to work around standard framework behavior without giving any justifications. Smells like adjusting the program to your personal tastes instead of keeping it in line with common behavior of other applications people might be used to, like VS or browsers.\n. This doesn't fix the bug, it just hides it, by changing the mode of operation of the tree.\nI've debugged a bit and the real problem is that SharpTreeView.flattener_CollectionChanged calls FocusNode((SharpTreeNode)SelectedItem) before the tree is updated. FocusNode forces a layout and causing items to be rendered which are no longer in the tree but haven't yet been removed from the UI.\nThis happens because flattener_CollectionChanged subscribes in a list changed event which also is used to update the tree view content. flattener_CollectionChanged subscribed first so it will be invoked before the callback updating the UI.\nA better fix probably would be to delay operations relying on updated UI a moment via Dispatcher.BeginInvoke so other event listeners also had a chance to run.\n. MilChannelNotify is an API for WPF to communicate with its render thread. Normally WPF should stop rendering if the UI is not dirty and there are no animations requiring continuous rendering.\nUnfortunately a profiler will not help you figuring out what WPF and the rendering thread are communicating. There are ETW events defined for WPF, maybe listening to them would shed some light into this, but I never done this myself yet.\nUnless ILSpy is animating controls or something like that, I don't think this is an ILSpy issue.\n(Note that running in a VM might cause WPF to think it has no hardware acceleration and behave differently than when run on a normal desktop computer, but as far as I know this doesn't change the concept of no rerendering being required when nothing is animated.)\n. @pista7 That tool only works up to Win7 and is no longer supported. The application timeline in the VS 2015 profiler provides a partial replacement. You have to add missing ProjectTypeGuids to the project file to be able to use it though (see the last comment in this post)\n\nA control in a container with Visibility=Collapsed still gets animated? I'd call that a WPF bug.\n\nThis actually looks like a really nasty bug, not limited to Visibility=Collapsed. I made a test application with just a panel and a progress bar, once the progress bar starts animating WPF will never drop back out of 60 fps rendering except when turning the animation explicitely off by setting IsIndeterminate=false. Even removing the progress bar from the visual tree keeps WPF rendering at 60 fps, even though the visual tree never gets invalidated any more. I wonder if you can get stuck in 60 fps mode if an animated object is garbage collected.\n. v1241 had 79k instructions, v1306 has 136k instructions (the size of the function doubled) and the number of variables grew from 1400 to 3000 (also doubled).\nSo, yes, the method did grow that much between versions.\nIt probably would need careful optimizations of the involved algorithms to be able to decompile that one. Since it took you more than 70 minutes that indicates that some non-linear algorithms are used during decompilation, but I didn't take a closer look since my 4gb machine grinds to a halt when trying to debug the decompiler on that method ;-)\n. These arrays come from the initial analysis in ILAstBuilder.cs at the StackAnalysis function which has to examine roughly 136k instructions x 3k variables, so it's somewhat expected that this needs a lot of memory for this particular method.\nThough, taking a look at it, it would probably profit from switching to the ImmutableCollections nuget library instead of using raw arrays, so it can partially share stuff which doesn't change between instructions. Right now it does some sharing, but only if the whole array is the same.\nOne obvious example would be at line 400 where it calculates unions based on arrays and allocates a new array for each change.\nUsing ImmutableHashSet (or the related ImmutableSortedSet, not sure which is better suited) could probably help to reduce allocations by sharing those nodes of the hashset which don't change. There are probably more opportunities to share data, I didn't look too closely at it.\nOn the other hand the OP didn't mention any swapping on his 8gb machine, so it's not guaranteed that reducing memory consumption will actually improve performance form him.\n. This is a known problem of ILSpy, see issue #502, nobody officially working on supporting it though, I think most of their work is on the new decompiler branch\nIf you are going to do work on VS2015/Roslyn please make sure that you don't break decompilation of older assemblies, people will still need to decompile code from before VS2015/Roslyn.\nI've been myself hotfixing things here and there to be able to read VS 2015 code, you can see it over at my fork - its far from complete, but it helps\nI also made a fix to the delegate decompiler, which is different from yours, so you may want to compare your solution to this commit to check how much the results differ.\n(And yes I'm planning to make a pull request and push back my fixes if the ilspy maintainers are interested, but I still want to get some more fixes working first.)\n. Or, to answer the question, the reason probably is that none of the contributors is interested in other languages.\n. Thats odd, it doesn't crash in ILSpy decompiling, but when loading the file. Basically it either means you found a bug in the Mono file loader (unlikely) or the file is corrupted.\nOr it might be \"obfuscated\" and contain intentionally corrupted methods which are never executed but the decompiler fails because when you click on a class it loads all methods of that class, including the corrupt ones.\nIn the latter case, even if it wouldn't crash loading the file, you likely would just see garbage due to the obfuscation.\n. If it's indeed obfuscation you are probably on your own here. If you really need to look into that file you could try to preprocess it, for example removing or stubbing out the corrupted methods, and see what you can make from the remaining data.\nAlternatively, depending on where and how exactly the file loader crashes, you may be able to do a custom build of ILSpy and add some exception handlers to skip the corrupted methods.\n. > AssemblyFileVersion(\"4.6.79.0\")\nThats .NET 4.6 which is compiled via Roslyn and not supported by ILSpy. I have some changes in my fork which fix the largest issues but it is not complete, and it doesn't cover all of the locking constructs either (it does fix some though).\nAs far as I know there are no plans to add complete Roslyn support, so without external contribution you shouldn't expect ILSpy to emit (re)compilable code for Roslyn based assemblies anytime soon.\n. If you are using VS 2015 then this is expected, ILSpy is currently not capable of fully decompiling Roslyn based code.\n. > I have just checked this with a VS2012 compiled assembly: ILSpy shows the same \"while\"-loop...\nNo idea then, sorry.\n\nBTW: When I compile a c# foreach with VS2015/Roslyn it is correctly decompiled as foreach.\n\nThat may depend on the surrounding code and build mode, I had seen cases where it didn't work.\n. Thats the expected behavior I'd say, because nobody calls the concrete implementation of the UserStore but only calls the interface. Sometimes its actually useful to be able to differentiate between these, but most often probably not. The analyzer probably needs to become smarter and/or get more options.\n. Just to clarify for other readers what you mean: \"BLE\" being \"branch less equal\" should be \"<=\" (or \">\" when the branches are inverted) and not \"==\"\n. IL methods can (and usually do) have a flag to initialize all variables to default values, so explicitly initializing them in IL is not always necessary. It's more likely that the pattern-matcher doesn't recognize the pattern used in this specific IL. There is a lot of hand-coding and special casing in these pattern matchers to detect just the constructs produced by a normal compiler, so it not working properly with postprocessed IL is not that big of a surprise.\n. You are right, this sounds like ILspy isn't handling the initlocals flag correctly.\nWhile fixing that would probably generate code that compiles it may not be enough for the pattern matcher to recognize this as a using-statement. In that case one would have to debug the pattern matcher for the using statements.\nHowever seeing that the first check of the pattern matcher is for an assignment, it may just be enough to have initlocals to be properly implemented to get the pattern matcher back on track.\nUnfortunately I don't know how one would implement it properly, I don't have experience with that stage of the decompilation, I've only been looking at the pattern matchers.\n. The decompiled results you are getting are not normal, but they are typical for cases where ILSpy cannot find a referenced assembly and tries a \"best effort\" decompilation with incomplete information. It is really odd though that core libraries and types like String and Type cannot be found.\nSimply being listed on the left side isn't enough if its the wrong version of the assembly. Is this a standard .NET framework library you are decompiling, or some of the alternate runtimes like WinRT or UWP? In the latter case ILSpy may not know where to find the runtime libraries and you may have to help it by manually loading the right versions of the assemblies. (I'm not sure, never decompiled WinRT/UWP assemblies, its just a guess.)\nYou can see the information on the referenced libraries by expanding the decompiled assembly and clicking on the \"References\" node. You should get a page of comments which specify the assembly specs required to decompile the library. If you click on one of the other assembly nodes you already loaded (e.g. mscorlib) you'll find the same info in the 2nd line again as comment. Compare both assembly specs to see if they differ.\n. It references the silverlight runtime (mscorlib version 2.0.5.0) and you probably have the standard framework runtime loaded on the left side. If ILSpy can't find the right version automatically (it cannot for me, but I don't know if I have that version of silverlight installed) then you need to help it out by manually loading mscorlib 2.0.5.0\n. ILSpy can do this too, it just has never been updated to decompile code generated by VS 2015 (or Roslyn)\n. @greenozon What's your point? You obviously don't know what you're talking about if you claim ILspy can't decompile pre-roslyn code like you quoted (which is in fact no code but a variable, but I assume you meant the code using that variable).\nI stand by my point, ilspy has the algorithms to decompile it, someone just needs to step in and update it for the code patterns roslyn generates. I've done it myself for some cases I needed so I know it works. Just needs to add overloads at the right places which detect the required code patterns.\n. @greenozon don't bother if you just want to prove a point, I'm sure you can find an example of code ILspy can't decompile if you search a bit, but that doesn't change anything about what I said. The algorithms are still in place and just need to have patterns added to cover any cases you might dig up. The patterns which are already there are enough to decompile most of the commonly found pre-roslyn code. If the OP found \"there are lot's of invalid type names\" then at this point in time the most likely reason is because ILspy hasn't been updated to deal with roslyn generated code.\nAnyways, I don't feel like this discussion is going anywhere. I made my point for readers of the issue that the probable cause is most likely roslyn generated code and that it's possible to fix it. Unless there is something else I can contribute to the issue I'll probably have nothing more to comment on. I'm not gonna pick up arguments about proving something as I've left enough information for a reader to figure it out himself wether or not what I've stated is right.\n. If you need a small changeset to start from you can look at some commits on my fork, in particular this commit for lambdas and this commit for locks.\nI'd make a pull request but my changes doesn't cover all of the roslyn changes, only the most common ones, and I don't have the time to figure out the cases which don't work.\nI can make a pull request for the changes I have though, if that's wanted.\n. Apparently, Mono.Cecil already supports runtime projections, but it needs to be told so.\nIn ILSpy LoadedAssembly.LoadAssembly if I flip ApplyWindowsRuntimeProjections = true on the Cecil ReaderParameters then the WinRT/UWP properties are correctly resolved.\nWould it be possible to always have this on? or would it possible to perform some kind of auto detection?. What format do you need the example in? If xaml you can just set both x:Name and AutomationProperties.Name on a UserControl.\nxaml\n<UserControl\n    x:Class=\"WpfSandbox.WpfControl\"\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    x:Name=\"SomeControlName\"\n    AutomationProperties.Name=\"SomeAutomationName\">\n</UserControl>\nfails with\nSystem.InvalidOperationException: Doppeltes Attribut.\n   bei System.Xml.Linq.XElement.AddAttribute(XAttribute a)\n   bei ILSpy.BamlDecompiler.Handlers.PropertyHandler.Translate(XamlContext ctx, BamlNode node, BamlElement parent) in E:\\_code\\_dev\\ilspy\\ILSpy.BamlDecompiler\\Handlers\\Records\\PropertyHandler.cs:Zeile 44.\n   bei ILSpy.BamlDecompiler.HandlerMap.ProcessChildren(XamlContext ctx, BamlBlockNode node, BamlElement nodeElem) in E:\\_code\\_dev\\ilspy\\ILSpy.BamlDecompiler\\IHandlers.cs:Zeile 80.\n   bei ILSpy.BamlDecompiler.Handlers.ElementHandler.Translate(XamlContext ctx, BamlNode node, BamlElement parent) in E:\\_code\\_dev\\ilspy\\ILSpy.BamlDecompiler\\Handlers\\Blocks\\ElementHandler.cs:Zeile 41.\n   bei ILSpy.BamlDecompiler.HandlerMap.ProcessChildren(XamlContext ctx, BamlBlockNode node, BamlElement nodeElem) in E:\\_code\\_dev\\ilspy\\ILSpy.BamlDecompiler\\IHandlers.cs:Zeile 80.\n   bei ILSpy.BamlDecompiler.Handlers.DocumentHandler.Translate(XamlContext ctx, BamlNode node, BamlElement parent) in E:\\_code\\_dev\\ilspy\\ILSpy.BamlDecompiler\\Handlers\\Blocks\\DocumentHandler.cs:Zeile 34.\n   bei ILSpy.BamlDecompiler.XamlDecompiler.Decompile(IDecompilerTypeSystem typeSystem, BamlDocument document, CancellationToken token, BamlDecompilerOptions bamlDecompilerOptions, List`1 assemblyReferences) in E:\\_code\\_dev\\ilspy\\ILSpy.BamlDecompiler\\XamlDecompiler.cs:Zeile 45.\n   bei ILSpy.BamlDecompiler.BamlResourceEntryNode.LoadIntoDocument(PEFile module, IAssemblyResolver assemblyResolver, Stream stream, CancellationToken cancellationToken) in E:\\_code\\_dev\\ilspy\\ILSpy.BamlDecompiler\\BamlResourceEntryNode.cs:Zeile 66.\n   bei ILSpy.BamlDecompiler.BamlResourceEntryNode.LoadBaml(AvalonEditTextOutput output, CancellationToken cancellationToken) in E:\\_code\\_dev\\ilspy\\ILSpy.BamlDecompiler\\BamlResourceEntryNode.cs:Zeile 56.\n   bei ILSpy.BamlDecompiler.BamlResourceEntryNode.<>c__DisplayClass1_1.<View>b__2() in E:\\_code\\_dev\\ilspy\\ILSpy.BamlDecompiler\\BamlResourceEntryNode.cs:Zeile 40.. ",
    "dolkensp": "Looks to be broken again when compiling in VS2015 - possibly same issue again?\n. @weltkante  not a problem - this was the first issue I came across and it perfectly matched what I was seeing. Sounds like you're already on top of it.\nI was just being lazy anyways - decompiling the exe on one machine, to check something, instead of walking across the room to get my laptop to view the source ;)\n. ",
    "DQKev": "Comes from a obfuscated dll. Got it anyway thanks.\nCan be closed\n. ",
    "hazzik": "The disassembled code:\n```\n.method private hidebysig static \n    object TestMethod (\n        class Context cx,\n        class Scriptable parentScope,\n        object val\n    ) cil managed \n{\n    // Method begins at RVA 0x2530\n    // Code size 99 (0x63)\n    .maxstack 5\nIL_0000: ldc.r8 1\nIL_0009: box [mscorlib]System.Double\nIL_000e: call int32 ScriptRuntime::ToInt32(object)\nIL_0013: ldarg.2\nIL_0014: call bool ScriptRuntime::ToBoolean(object)\nIL_0019: brfalse.s IL_0047\n\nIL_001b: ldc.r8 1\nIL_0024: box [mscorlib]System.Double\nIL_0029: call float64 ScriptRuntime::ToNumber(object)\nIL_002e: ldarg.0\nIL_002f: ldarg.1\nIL_0030: ldstr \"i\"\nIL_0035: call object ScriptRuntime::Name(class Context, class Scriptable, string)\nIL_003a: call float64 ScriptRuntime::ToNumber(object)\nIL_003f: sub\nIL_0040: box [mscorlib]System.Double\nIL_0045: br.s IL_0053\n\nIL_0047: ldarg.0\nIL_0048: ldarg.1\nIL_0049: ldstr \"i\"\nIL_004e: call object ScriptRuntime::Name(class Context, class Scriptable, string)\n\nIL_0053: call int32 ScriptRuntime::ToInt32(object)\nIL_0058: ldc.i4.s 31\nIL_005a: and\nIL_005b: shr\nIL_005c: conv.r8\nIL_005d: box [mscorlib]System.Double\nIL_0062: ret\n\n} // end of method TestClass::TestMethod\n```\n. Found simplest case:\ncsharp\nclass TestClass\n{\n    private static int TestMethod(int value, bool condition, int t, int f)\n    {\n        return Convert.ToInt32(value) >> Convert.ToInt32(condition ? t : f);\n    }\n}\nIL:\n```\n.method private hidebysig static \n    int32 TestMethod (\n        int32 'value',\n        bool condition,\n        int32 t,\n        int32 f\n    ) cil managed \n{\n    // Method begins at RVA 0x2530\n    // Code size 23 (0x17)\n    .maxstack 8\nIL_0000: ldarg.0\nIL_0001: call int32 [mscorlib]System.Convert::ToInt32(int32)\nIL_0006: ldarg.1\nIL_0007: brtrue.s IL_000c\n\nIL_0009: ldarg.3\nIL_000a: br.s IL_000d\n\nIL_000c: ldarg.2\n\nIL_000d: call int32 [mscorlib]System.Convert::ToInt32(int32)\nIL_0012: ldc.i4.s 31\nIL_0014: and\nIL_0015: shr\nIL_0016: ret\n\n} // end of method TestClass::TestMethod\n``\n. The same error withshr.un`\n. Thanks\n. ",
    "nikeee": "There are some forks that merge the PRs for the original branch independently.\nFor instance, I occasionally update the fork 4lab/ILSpy.\n. I think that's a problem that affects every reference to an Enum.\n. ",
    "xanather": "Alright thanks for the info.\n. ",
    "zvirja": "Hope, that will help somebody.\nThat is actually implemented. Check https://github.com/icsharpcode/ILSpy/blob/a2cbd6d3456d1e4e37daec7edebb1982c8ec6042/ILSpy/SearchStrategies.cs#L20.\nIt appears that search supports regular expressions.\nAlso, you can put modifiers to specify term presence:\n= - should equal (e.g. =UserControl).\n+ - should be present\n- - should not be present\nClose your request - it's resolved.\n. Could you clarify what exact behavior should be?\nI imagine that custom prefix could be added to run that \"namespace\" search. The only question is whether you need specify the fully-qualified namespace name or \"string.Contains()\" should be used?\n. @pcalin It took a while since you started this PR. Do you have some plans to rework the approach? It would be really cool to support this feature.. Have you already started to work on it or just assigned the task to yourself?  \nI could help with this one. However, if you already started to implement the feature - let's just wait for your implementation :) \n. @siegfriedpammer Do you have updates on this one? Is there something I can help you with? \nIt would be great to have this feature in the nearest update. Therefore, I'm ready to volunteer. \n. It seems that you haven't started to work on it. I'll try to implement this if I have a free time :) \n783 should be also considered. . OK, let's see how it goes after the update. If I feel that I still need this feature - I'll fire a PR.\nThank you for the update.. Could you please create some kind of specs for the feature you request? How exactly you expect it should look? The original request looks very general to implement it.\n. Could you please clarify in more detail what you want to see? Add some screenshots and highlight exact places where you want to see them. \nThanks. . @icsharpcode @dgrunwald @siegfriedpammer Did you have any chance to review this PR to finally merge it? This PR is very tiny and solves pretty annoying bug.\nSorry for tagging you, I do understand that this is an open-source project, but it has already took about 3 months.... Thank you! . > It needs at least to have a textbox to paste the path to go straight where I want.\nOn my Windows 10 I can paste path in either fields and press Enter to quickly navigate to specific directory.\n\nCould you please clarify the cases when this approach is not very convenient and which particular usability obstacles you meet?\nP.S. Just realized that probably you mentioned that you don't like PR's box, not the one we have now.. :) But will keep my answer just in case.. I'd say that this is useful, but very specific feature. I'm not sure it worth it to pollute menu because of it. \nWhat if you extend drag-n-drop instead? So if folder is dropped to window, it recursively opens all the files inside that folder. That would allow to get the functionality you need bit in more \"hidden\" way. . I've just noticed today how that it's implemented in the dotPeek by JetBrains and I'm impressed. I believe that it's how this feature should be implemented in ILSpy as well.\n\nRather than add all files in row, they are added as Folder elements. It allows to easily delete folders at once.\nAdditionally, they support zip archives without need to extract assemblies from them - but it's another story.\n@OmarTawfik @dgrunwald @siegfriedpammer What do you think about that?. @dgrunwald, @siegfriedpammer Could you please suggest who should be assigned as a reviewer for this PR? I noticed that @dgrunwald reviewed the previous #734 one, so probably he is the most right person... I've just realized, that I mistakenly implemented the feature on top of the master, so I reworked the approach and implemented it on top of newdecompiler.\nThe build fails, but likely due to wrong AppVeyor configuration.. @siegfriedpammer Thank you for your attention - happy to know that feature is finally implemented! \ud83d\ude09. The first question I tried to understand is whether this feature is about UI or implementation. Meaning, does the switches are still present in the code, or you decided to refactor the implementation to avoid them at all?\nIf question is about UI only, we might think about a way to implement that (e.g. combine that with C# Version picker). However, if you don't want to maintain switchers in the code - that's a completely different story.\nSo could you clarify the state of things?. > All the switches are still present...\nOk, that's fine :)\nHistorically, each feature was introduced in the particular version of C#. That's exactly what you simulate when the version preset is selected.\nWhat I suggest to do, is to extend that idea further and add one more C# version - Custom:\n\nWhen you pick that version, the pop-up appears where checkboxes for all the features are displayed, groupped by C# version. You could disable only features you need, keeping the rest features enabled. When you close application, we don't preserve the last customization and fallback to the latest available version (to not cause confusion). WDYT?. @siegfriedpammer Any final comments from your side before rejecting the idea? ;-). ",
    "Z1oG1aZ": "Thanks!\n. ",
    "davidroth": "I created a pull request for this issue: https://github.com/icsharpcode/ILSpy/pull/477\n. ",
    "duncansmart": "It would help (or even address this) if the Search results listview had headings, which, when clicked  sorted so a type in a particular namespace could be found.\nMockup:\n\n. ",
    "Yustos": "Hello.\nI didn't know that regular expressions is already supported.\nThank you for review.\n. ",
    "iskiselev": "I've tried other free .Net decompilers - JetBrains dotPeek and Telerik JustDecompile. Both of them created syntax correct C# source on this method decompilation.\nJetBrains dotPeek:\nprivate static int IncorrectDecompitation()\n  {\nlabel_1:\n    do\n    {\n      int num = 0;\n      while (num < 2)\n      {\n        if (!Program.GetBool())\n          checked { ++num; }\n        else\n          goto label_6;\n      }\n    }\n    while (!Program.GetBool());\nlabel_6:\n    int num1 = 0;\n    while (num1 < 2)\n    {\n      Program.DoWork();\n      checked { ++num1; }\n    }\n    goto label_1;\n  }\nTelerik JustDecompile:\nprivate static int IncorrectDecompitation()\n    {\n        while (true)\n        {\n        Label0:\n            int i = 0;\n            while (true)\n            {\n                if (i >= 2)\n                {\n                    if (!Program.GetBool())\n                    {\n                        goto Label0;\n                    }\n                    else\n                    {\n                        break;\n                    }\n                }\n                else if (!Program.GetBool())\n                {\n                    i++;\n                }\n                else\n                {\n                    break;\n                }\n            }\n            for (i = 0; i < 2; i++)\n            {\n                Program.DoWork();\n            }\n        }\n    }\n.Net Reflector (looks very same with dotPeek):\nprivate static int IncorrectDecompitation()\n{\n    int num;\nLabel_0001:\n    num = 0;\n    while (num < 2)\n    {\n        if (GetBool())\n        {\n            goto Label_0031;\n        }\n        num++;\n    }\n    if (!GetBool())\n    {\n        goto Label_0001;\n    }\nLabel_0031:\n    num = 0;\n    while (num < 2)\n    {\n        DoWork();\n        num++;\n    }\n    goto Label_0001;\n}\n. ",
    "YellowAfterlife": "Might also help https://github.com/icsharpcode/ILSpy/issues/434, considering that AST depth for that case is probably around... 4500?\n. ",
    "LaurentDardenne": "Thank you :-)\n. ",
    "greenozon": "Could you point me to the right location in sources on the mentioned handler?\nI've encountered this type of decompilation and would like to see it in depth.....\nThanks\n. same issue with other keywords, eg:\nlatest version:\n``` c#\n                bool checked = this.useProxyAuthenticationChkBox.Checked;\n                this.proxyUsernameTextBox.Enabled = checked;\n                this.proxyPasswordTextBox.Enabled = checked;\n```\nprevious (OK) version:\n``` c#\n                bool @checked = this.useProxyAuthenticationChkBox.Checked;\n                this.proxyUsernameTextBox.Enabled = @checked;\n                this.proxyPasswordTextBox.Enabled = @checked;\n```\n. same issue with string:\nc#\nstring string = Resources.ResourceManager.GetString(..........\n. and other types:\neg:\nc#\nget\n            {\n                object object = Resources.ResourceManager.GetObject(\"button_3\", Resources.resourceCulture);\n                return (Bitmap)object;\n            }\n. let me show you guys long tooltip (as seen in SAE, Simple Asssembly Explorer .net tool):\nhttp://prntscr.com/7gscld\nthats from mixedmode assembly\n. names like <>c__DisplayClass10_.<>9__0\nthese are ... compiler generated names...\nsome other decompilers are smart enough to elimitate it fullly!\neg - Telerik\n. @weltkante \nwell, the code like \n <>c__DisplayClass10_.<>9__0\nwas in ILSpy way much much before the VS2015, or even VS2013...\nthats the autogenerate C# code that some other decompilers knows how to  totally de-compile ...\n. OK, pardon me\nonce I'll have some bits  (not from 2015VS) we'll get back to this point \n. I'm always getting latest bits from here\nhttp://build.sharpdevelop.net/BuildArtefacts#ILSpyMaster\nfor the moment it is ILSpy_Master_2.3.1.1875_Binaries.zip\n. Feedback is positive, fixed! thanks a lot. Note: this is some very basic assert, as it throws even on such a simple thing like:\npublic static readonly int _init = 8;\n(valided it from other decompiler)\nPS\nI've checked using latest release - ILSpy version 3.1.0.3652\nit works OK\n. Here are some hints that might help...\nfull IL and some pics from ILSpy, hope it helps to deduce and make corrections!\nILAst:\n(@cctor, after \"Throw\" button pressed)\n\n```\n.method private hidebysig specialname rtspecialname static \n    void .cctor () cil managed \n{\n    // Method begins at RVA 0x447c8\n    // Code size 242 (0xf2)\n    .maxstack 2\n    .locals init (\n        [0] class [mscorlib]System.Threading.Thread,\n        [1] class [mscorlib]System.Threading.ThreadStart,\n        [2] class App.App/'<>c__DisplayClass2'\n    )\nIL_0000: ldc.i4.8\nIL_0001: stsfld int32 App.App::_init\nIL_0006: call bool [mscorlib]System.Diagnostics.Debugger::get_IsAttached()\nIL_000b: brtrue.s IL_0014\n\nIL_000d: call bool App.App::IsDebuggerPresent()\nIL_0012: brfalse.s IL_0028\n\nIL_0014: call string [mscorlib]System.Environment::get_CommandLine()\nIL_0019: ldstr \"/Debug\"\nIL_001e: callvirt instance bool [mscorlib]System.String::Contains(string)\nIL_0023: ldc.i4.0\nIL_0024: ceq\nIL_0026: br.s IL_0029\n\nIL_0028: ldc.i4.0\n\nIL_0029: stsfld bool App.App::DebuggerIsPresent\nIL_002e: call bool [mscorlib]System.Diagnostics.Debugger::get_IsAttached()\nIL_0033: brtrue.s IL_003c\n\nIL_0035: call bool App.App::IsDebuggerPresent()\nIL_003a: brfalse.s IL_006a\n\nIL_003c: call string [mscorlib]System.Environment::get_CommandLine()\nIL_0041: ldstr \"AllContainers\"\nIL_0046: callvirt instance bool [mscorlib]System.String::Contains(string)\nIL_004b: brtrue.s IL_006a\n.try\n{\n    .try\n    {\n        IL_004d: call class [System]System.Diagnostics.Process [System]System.Diagnostics.Process::GetCurrentProcess()\n        IL_0052: callvirt instance void [System]System.Diagnostics.Process::Kill()\n        IL_0057: leave.s IL_0062\n    } // end .try\n    catch [mscorlib]System.Exception\n    {\n        IL_0059: pop\n        IL_005a: ldc.i4.0\n        IL_005b: call void [mscorlib]System.Environment::Exit(int32)\n        IL_0060: leave.s IL_0062\n    } // end handler\n\n    IL_0062: leave.s IL_006a\n} // end .try\nfinally\n{\n    IL_0064: newobj instance void [System]System.ComponentModel.InvalidAsynchronousStateException::.ctor()\n    IL_0069: throw\n} // end handler\n.try\n{\n    IL_006a: ldnull\n    IL_006b: stloc.1\n    IL_006c: newobj instance void App.App/'<>c__DisplayClass2'::.ctor()\n    IL_0071: stloc.2\n    IL_0072: ldloc.2\n    IL_0073: call int32 App.App::CheckEn()\n    IL_0078: stfld int32 App.App/'<>c__DisplayClass2'::'ret'\n    IL_007d: ldloc.2\n    IL_007e: ldfld int32 App.App/'<>c__DisplayClass2'::'ret'\n    IL_0083: ldc.i4.0\n    IL_0084: ble.s IL_00a9\n\n    IL_0086: ldloc.1\n    IL_0087: brtrue.s IL_0096\n\n    IL_0089: ldloc.2\n    IL_008a: ldftn instance void App.App/'<>c__DisplayClass2'::'<.cctor>b__0'()\n    IL_0090: newobj instance void [mscorlib]System.Threading.ThreadStart::.ctor(object, native int)\n    IL_0095: stloc.1\n\n    IL_0096: ldloc.1\n    IL_0097: newobj instance void [mscorlib]System.Threading.Thread::.ctor(class [mscorlib]System.Threading.ThreadStart)\n    IL_009c: stloc.0\n    IL_009d: ldloc.0\n    IL_009e: callvirt instance void [mscorlib]System.Threading.Thread::Start()\n    IL_00a3: ldloc.0\n    IL_00a4: callvirt instance void [mscorlib]System.Threading.Thread::Join()\n\n    IL_00a9: leave.s IL_00ae\n} // end .try\ncatch [mscorlib]System.Exception\n{\n    IL_00ab: pop\n    IL_00ac: leave.s IL_00ae\n} // end handler\n.try\n{\n    IL_00ae: call uint32 App.DLC::getID()\n    IL_00b3: dup\n    IL_00b4: stsfld uint32 App.Programm::_id\n    IL_00b9: brtrue.s IL_00d8\n\n    IL_00bb: ldsfld bool App.DLC::CommandLineMode\n    IL_00c0: brtrue.s IL_00d2\n\n    IL_00c2: ldstr \"Please exit and try again.\"\n    IL_00c7: ldstr \"A problem\"\n    IL_00cc: call valuetype [PresentationFramework]System.Windows.MessageBoxResult [DConfig]DConfig.EMessageBox::Show(string, string)\n    IL_00d1: pop\n\n    IL_00d2: ldc.i4.m1\n    IL_00d3: call void [mscorlib]System.Environment::Exit(int32)\n\n    IL_00d8: leave.s IL_00e7\n} // end .try\ncatch [mscorlib]System.Exception\n{\n    IL_00da: pop\n    IL_00db: ldc.i4 -3423\n    IL_00e0: call void [mscorlib]System.Environment::Exit(int32)\n    IL_00e5: leave.s IL_00e7\n} // end handler\n\nIL_00e7: ldstr \"App.Static\"\nIL_00ec: call void App.App::BenchmarkAppStartupStep(string)\nIL_00f1: ret\n\n} // end of method App::.cctor\n```\nlet me know if you need more hints. There is just one inner class you've mentioned there,\nhere it is:\n`\n .class nested private auto ansi sealed beforefieldinit '<>c__DisplayClass2'\n    extends [mscorlib]System.Object\n{\n    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = (\n        01 00 00 00\n    )\n    // Fields\n    .field public int32 'ret'\n// Methods\n.method public hidebysig specialname rtspecialname \n    instance void .ctor () cil managed \n{\n    // Method begins at RVA 0x4478a\n    // Code size 7 (0x7)\n    .maxstack 8\n\n    IL_0000: ldarg.0\n    IL_0001: call instance void [mscorlib]System.Object::.ctor()\n    IL_0006: ret\n} // end of method '<>c__DisplayClass2'::.ctor\n\n.method public hidebysig \n    instance void '<.cctor>b__0' () cil managed \n{\n    // Method begins at RVA 0x44794\n    // Code size 37 (0x25)\n    .maxstack 2\n    .locals init (\n        [0] int32\n    )\n\n    IL_0000: ldarg.0\n    IL_0001: ldfld int32 App.App/'<>c__DisplayClass2'::'ret'\n    IL_0006: stloc.0\n    IL_0007: ldstr \"Error: Please report.\"\n    IL_000c: ldloc.0\n    IL_000d: box [mscorlib]System.Int32\n    IL_0012: call string [mscorlib]System.String::Concat(object, object)\n    IL_0017: call valuetype [PresentationFramework]System.Windows.MessageBoxResult [DConfig]DConfig.EMessageBox::Show(string)\n    IL_001c: pop\n    IL_001d: ldc.i4.s -2\n    IL_001f: call void [mscorlib]System.Environment::Exit(int32)\n    IL_0024: ret\n} // end of method '<>c__DisplayClass2'::'<.cctor>b__0'\n\n} // end of class <>c__DisplayClass2\n`. Fantastic deduction and mind analysis\nyou must be the ancestor of Sherlock H! :). are there any plans to add a fix for this issue?\nthx. Actually I've seen some others... looks like that's why ILSpy in alpha stage?\nis the info provided above enough to deduce and provide RCA?. It's inside the archive from #1173\nBTW, it has dozen of other asserts...\nThanks for GH tip, it is very cool!\nappreciating your time & educational light :)\n. Here is another assembly having same assert case - \nICSharpCode.Decompiler.IL.StObj.CheckInvariant(ILPhase phase) \nI guess this assert is present on some mixed mode items\nError decompiling System.Void scoped_refptr<CefBrowser>::<MarshalCopy>(scoped_refptr<CefBrowser>*,scoped_refptr<CefBrowser>*)\n ---> ICSharpCode.ILSpy.AssertionFailedException: \n   at ICSharpCode.ILSpy.ILSpyTraceListener.Fail(String message, String detailMessage) in offset 380\n   at ICSharpCode.ILSpy.ILSpyTraceListener.Fail(String message) in offset 9\n   at System.Diagnostics.TraceInternal.Fail(String message) in offset 55\n   at System.Diagnostics.Debug.Assert(Boolean condition) in offset 6\n   at ICSharpCode.Decompiler.IL.StObj.CheckInvariant(ILPhase phase) in offset 75\n   at ICSharpCode.Decompiler.IL.ILInstruction.CheckInvariant(ILPhase phase) in offset 126\n   at ICSharpCode.Decompiler.IL.StLoc.CheckInvariant(ILPhase phase) in offset 8\n   at ICSharpCode.Decompiler.IL.Transforms.StatementTransform.Run(Block block, BlockTransformContext context) in offset 255\n   at ICSharpCode.Decompiler.IL.Block.RunTransforms(IEnumerable`1 transforms, BlockTransformContext context) in offset 69\n   at ICSharpCode.Decompiler.IL.Transforms.BlockILTransform.VisitBlock(ControlFlowNode cfgNode, BlockTransformContext context) in offset 146\n   at ICSharpCode.Decompiler.IL.Transforms.BlockILTransform.Run(ILFunction function, ILTransformContext context) in offset 146\n   at ICSharpCode.Decompiler.CSharp.CSharpDecompiler.DecompileBody(MethodDefinition methodDefinition, IMethod method, EntityDeclaration entityDecl, DecompileRun decompileRun, ITypeResolveContext decompilationContext) in offset 420\n-- continuing with outer exception (ICSharpCode.Decompiler.DecompilerException) --\n   at ICSharpCode.Decompiler.CSharp.CSharpDecompiler.DecompileBody(MethodDefinition methodDefinition, IMethod method, EntityDeclaration entityDecl, DecompileRun decompileRun, ITypeResolveContext decompilationContext) in offset 954\n   at ICSharpCode.Decompiler.CSharp.CSharpDecompiler.DoDecompile(MethodDefinition methodDefinition, IMethod method, DecompileRun decompileRun, ITypeResolveContext decompilationContext) in offset 126\n   at ICSharpCode.Decompiler.CSharp.CSharpDecompiler.DoDecompile(ITypeDefinition typeDef, DecompileRun decompileRun, ITypeResolveContext decompilationContext) in offset 696\n   at ICSharpCode.Decompiler.CSharp.CSharpDecompiler.DoDecompileTypes(IEnumerable`1 types, DecompileRun decompileRun, ITypeResolveContext decompilationContext, SyntaxTree syntaxTree) in offset 205\n   at ICSharpCode.Decompiler.CSharp.CSharpDecompiler.DecompileTypes(IEnumerable`1 types) in offset 106\n   at ICSharpCode.Decompiler.CSharp.WholeProjectDecompiler.<>c__DisplayClass22_0.<WriteCodeFilesInProject>b__1(IGrouping`2 file) in offset 68\n   at System.Threading.Tasks.Parallel.<>c__DisplayClass17_0`1.<ForWorker>b__1() in offset 589\n   at System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask) in offset 6\n   at System.Threading.Tasks.Task.<>c__DisplayClass176_0.<ExecuteSelfReplicating>b__0(Object) in offset 134\ntarget:  https://www.sendspace.com/file/ymdhfm\n. Validated on version \nILSpy version 4.0.0.4254-beta1\nissue still present. Yes,\nthe issue is more interesting, once I put this dll into separate dir (just this one file)\nit started to assert instead of doing Stack Overflow...\nthis one:\n---> ICSharpCode.ILSpy.AssertionFailedException: \n   at ICSharpCode.ILSpy.ILSpyTraceListener.Fail(String message, String detailMessage) in offset 380\n   at ICSharpCode.ILSpy.ILSpyTraceListener.Fail(String message) in offset 9\n   at System.Diagnostics.TraceInternal.Fail(String message) in offset 55\n   at System.Diagnostics.Debug.Assert(Boolean condition) in offset 6\n   at ICSharpCode.Decompiler.IL.LdFlda.CheckInvariant(ILPhase phase) in offset 102\n   at ICSharpCode.Decompiler.IL.ILInstruction.CheckInvariant(ILPhase phase) in offset 126\n   at ICSharpCode.Decompiler.IL.StLoc.CheckInvariant(ILPhase phase) in offset 8\n   at ICSharpCode.Decompiler.IL.ILReader.ReadInstructions(CancellationToken cancellationToken) in offset 536\n   at ICSharpCode.Decompiler.IL.ILReader.ReadIL(MethodBody body, CancellationToken cancellationToken) in offset 24\n   at ICSharpCode.Decompiler.CSharp.CSharpDecompiler.DecompileBody(MethodDefinition methodDefinition, IMethod method, EntityDeclaration entityDecl, DecompileRun decompileRun, ITypeResolveContext decompilationContext) in offset 54\n-- continuing with outer exception (ICSharpCode.Decompiler.DecompilerException) --\n   at ICSharpCode.Decompiler.CSharp.CSharpDecompiler.DecompileBody(MethodDefinition methodDefinition, IMethod method, EntityDeclaration entityDecl, DecompileRun decompileRun, ITypeResolveContext decompilationContext) in offset 914\n   at ICSharpCode.Decompiler.CSharp.CSharpDecompiler.DoDecompile(MethodDefinition methodDefinition, IMethod method, DecompileRun decompileRun, ITypeResolveContext decompilationContext) in offset 126\n   at ICSharpCode.Decompiler.CSharp.CSharpDecompiler.DoDecompile(ITypeDefinition typeDef, DecompileRun decompileRun, ITypeResolveContext decompilationContext) in offset 696\n   at ICSharpCode.Decompiler.CSharp.CSharpDecompiler.DoDecompileTypes(IEnumerable`1 types, DecompileRun decompileRun, ITypeResolveContext decompilationContext, SyntaxTree syntaxTree) in offset 205\n   at ICSharpCode.Decompiler.CSharp.CSharpDecompiler.DecompileTypes(IEnumerable`1 types) in offset 106\n   at ICSharpCode.Decompiler.CSharp.WholeProjectDecompiler.<>c__DisplayClass22_0.<WriteCodeFilesInProject>b__1(IGrouping`2 file) in offset 68\n   at System.Threading.Tasks.Parallel.<>c__DisplayClass17_0`1.<ForWorker>b__1() in offset 589\n   at System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask) in offset 6\n   at System.Threading.Tasks.Task.<>c__DisplayClass176_0.<ExecuteSelfReplicating>b__0(Object) in offset 134\nlink to file\nhttps://www.sendspace.com/file/1h9v50. OK\nadded ref-ed assemblies, now its stack-overflowing (crashing)\nhttps://www.sendspace.com/file/9uv6sr\nobserving of CPU/RAM usage (it takes like 15..20 sec until event)\n\n. Can't find it at the moment, sorry\nbut looks like this is smth related to reading out debug info... (it means that .pdb file was nearby, am I right?)\n. Found the target,\nsame error on ILSpy version 3.2.0.3851-rc\nMost probably this is obfuscated item.\ntarget: https://www.sendspace.com/file/403wwf\nI'd notice that this is a severe issue, as ILSpy does not open it up at all (it draws a yellow warning icon in a tree view as if this would not be a .net assembly)\n. Thanks\ndo you mean that v4 will you newer version of Mono.Cecil?\nmore robust and so on... I'm interesting cause right now on some obfuscated methods ILSpy even can't show IL !\ninstead it says\nystem.IndexOutOfRangeException: Index was outside the bounds of the array.\n   at Mono.Cecil.Cil.CodeReader.ReadOpCode()\n   at Mono.Cecil.Cil.CodeReader.ReadCode()\n   at Mono.Cecil.Cil.CodeReader.ReadFatMethod()\n   at Mono.Cecil.Cil.CodeReader.ReadMethodBody()\n   at Mono.Cecil.Cil.CodeReader.ReadMethodBody(MethodDefinition method)\n   at Mono.Cecil.MethodDefinition.<>c.<get_Body>b__41_0(MethodDefinition method, MetadataReader reader)\n   at Mono.Cecil.ModuleDefinition.Read[TItem,TRet](TRet& variable, TItem item, Func`3 read)\n   at Mono.Cecil.MethodDefinition.get_Body()\n   at ICSharpCode.Decompiler.Disassembler.ReflectionDisassembler.DisassembleMethodBlock(MethodDefinition method)\n   at ICSharpCode.Decompiler.Disassembler.ReflectionDisassembler.DisassembleMethod(MethodDefinition method)\n...... yeah, np - https://www.sendspace.com/file/ht469k\nduring searching for this guy I've found another issues :) \nwill open up new tickets in a little while\n. yeah, np - https://www.sendspace.com/file/lra8sv\nthis one has a couple of  \"IntroduceUsingDeclarations\" issues (find them all by pressing \"Continue\", not ignore! :)\nPS are there any build artifacts to check your great fixes out? :)\nis it appveyor?\n. Here is another similar issue (assembly not obfuscated)\n---> ICSharpCode.ILSpy.AssertionFailedException: \n   at ICSharpCode.ILSpy.ILSpyTraceListener.Fail(String message, String detailMessage) in offset 380\n   at ICSharpCode.ILSpy.ILSpyTraceListener.Fail(String message) in offset 9\n   at System.Diagnostics.TraceInternal.Fail(String message) in offset 55\n   at System.Diagnostics.Debug.Assert(Boolean condition) in offset 6\n   at ICSharpCode.Decompiler.IL.Branch.CheckInvariant(ILPhase phase) in offset 65\n   at ICSharpCode.Decompiler.IL.ILInstruction.CheckInvariant(ILPhase phase) in offset 126\n   at ICSharpCode.Decompiler.IL.Block.CheckInvariant(ILPhase phase) in offset 8\n   at ICSharpCode.Decompiler.IL.ILInstruction.CheckInvariant(ILPhase phase) in offset 126\n   at ICSharpCode.Decompiler.IL.BlockContainer.CheckInvariant(ILPhase phase) in offset 8\n   at ICSharpCode.Decompiler.IL.ILInstruction.CheckInvariant(ILPhase phase) in offset 126\n   at ICSharpCode.Decompiler.IL.Block.CheckInvariant(ILPhase phase) in offset 8\n   at ICSharpCode.Decompiler.IL.Block.RunTransforms(IEnumerable`1 transforms, BlockTransformContext context) in offset 77\n   at ICSharpCode.Decompiler.IL.Transforms.BlockILTransform.VisitBlock(ControlFlowNode cfgNode, BlockTransformContext context) in offset 146\n   at ICSharpCode.Decompiler.IL.Transforms.BlockILTransform.VisitBlock(ControlFlowNode cfgNode, BlockTransformContext context) in offset 89\n   at ICSharpCode.Decompiler.IL.Transforms.BlockILTransform.Run(ILFunction function, ILTransformContext context) in offset 146\n   at ICSharpCode.Decompiler.CSharp.CSharpDecompiler.DecompileBody(MethodDefinition methodDefinition, IMethod method, EntityDeclaration entityDecl, DecompileRun decompileRun, ITypeResolveContext decompilationContext) in offset 420\n-- continuing with outer exception (ICSharpCode.Decompiler.DecompilerException) --\n   at ICSharpCode.Decompiler.CSharp.CSharpDecompiler.DecompileBody(MethodDefinition methodDefinition, IMethod method, EntityDeclaration entityDecl, DecompileRun decompileRun, ITypeResolveContext decompilationContext) in offset 954\n   at ICSharpCode.Decompiler.CSharp.CSharpDecompiler.DoDecompile(MethodDefinition methodDefinition, IMethod method, DecompileRun decompileRun, ITypeResolveContext decompilationContext) in offset 126\n   at ICSharpCode.Decompiler.CSharp.CSharpDecompiler.Decompile(IList`1 definitions) in offset 383\n   at ICSharpCode.Decompiler.CSharp.CSharpDecompiler.Decompile(IMemberDefinition[] definitions) in offset 1\n   at ICSharpCode.ILSpy.CSharpLanguage.DecompileMethod(MethodDefinition method, ITextOutput output, DecompilationOptions options) in offset 179\n   at ICSharpCode.ILSpy.TreeNodes.MethodTreeNode.Decompile(Language language, ITextOutput output, DecompilationOptions options) in offset 15\n   at ICSharpCode.ILSpy.TextView.DecompilerTextView.DecompileNodes(DecompilationContext context, ITextOutput textOutput) in offset 69\n   at ICSharpCode.ILSpy.TextView.DecompilerTextView.<>c__DisplayClass33_0.<DecompileAsync>b__0() in offset 38\ntarget  https://www.sendspace.com/file/vt7dxc. agree, replacing invalid chars looks like a good strategy.\nbut the question was that ILSpy shall not crash.. If you do \"Continue\" instead of \"Throw\"  you'll see tons of other asserts. @dgrunwald   @siegfriedpammer \nis it a good time to take  v4.x  alpha  from appveyor builds for following testing/usage? (https://ci.appveyor.com/project/icsharpcode/ilspy/history)\nI\"ve seen for last couple of days there are builds only for v4.x\n. Validated in ILSpy version 4.0.0.4189-alpha1 - fixed, closing\nthanks for a great efforts fixing majority of my bug reports, that's just super awesome productivity, how are you guys managing tons of this kind of stuff in such a fast manner!? :+1:  . where is your error? either text or screenshot \n2) try to unpack into new dir and repeat your steps.. upd:\nif press \"Ignore All\" button, ILSpy will crash with error:\n```\nSorry, we crashed\nSystem.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\nat System.ThrowHelper.ThrowKeyNotFoundException()\nat System.Collections.Generic.Dictionary`2.get_Item(TKey key)\nat Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.ReadDefAttributeKeyString()\nat Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.ProcessNext()\nat Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.ReadInternal()\nat Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.Read()\nat System.Xml.Linq.XDocument.Load(XmlReader reader, LoadOptions options)\nat ILSpy.BamlDecompiler.BamlResourceEntryNode.LoadIntoDocument(IAssemblyResolver resolver, AssemblyDefinition asm, Stream stream, CancellationToken cancellationToken)\nat ILSpy.BamlDecompiler.BamlResourceFileHandler.WriteResourceToFile(LoadedAssembly assembly, String fileName, Stream stream, DecompilationOptions options)\nat ICSharpCode.ILSpy.CSharpLanguage.ILSpyWholeProjectDecompiler.WriteResourceToFile(String fileName, String resourceName, Stream entryStream)\nat ICSharpCode.Decompiler.CSharp.WholeProjectDecompiler.d__23.MoveNext()\nat System.Collections.Generic.List1.InsertRange(Int32 index, IEnumerable1 collection)\nat ICSharpCode.Decompiler.CSharp.WholeProjectDecompiler.DecompileProject(ModuleDefinition moduleDefinition, String targetDirectory, TextWriter projectFileWriter, CancellationToken cancellationToken)\nat ICSharpCode.ILSpy.CSharpLanguage.DecompileAssembly(LoadedAssembly assembly, ITextOutput output, DecompilationOptions options)\nat ICSharpCode.ILSpy.TreeNodes.AssemblyTreeNode.Decompile(Language language, ITextOutput output, DecompilationOptions options)\nat ICSharpCode.ILSpy.TextView.DecompilerTextView.DecompileNodes(DecompilationContext context, ITextOutput textOutput)\nat ICSharpCode.ILSpy.TextView.DecompilerTextView.<>c__DisplayClass45_0.b__0()\nat System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\nat System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\nat System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\nat System.Threading.ThreadHelper.ThreadStart()\nOK\n```. Upd: (observation):\nwhen switching   C# -> IL -> C# \na magic happens....\nwhy is that :)\n. Pardon putting my 5 cents, but why 200 chars? :)\nusual value is MAX_PATH which is 256 AFAIK.\nRegards long path support - its disabled by default + has other limitations (eg I bet it won't work on FAT like FS)\n. I've explored a bit the\nSystem.UnauthorizedAccessException\nand found this info:\nAn UnauthorizedAccessException means one of 4 things:\n\nThe caller does not have the required permission.\nThe file is an executable file that is in use.\nPath is a directory.\nPath specified a read-only file.\n\nwhich one is ILSpy case?. Thanks, now its clear\nso I propose to catch this exception somewhere  (as for the moment ILSpy crashes -> exists)\nand lets close this issue.\nAgree that obfuscated bits needs different approach and definitely not by SRM one.\nTo summarize - is it possible not to crash and just issue some err/warning box?\n. Thanks for update\nI've just tested latest beta release - it does not crash! just printing exception to the right pane\nso closing.. You are right,\nILSpy version 4.0.0.4285-beta1  (latest released bits here) does not have this  issue\nbut I\"m wondering, how (where) could I get the latest bits and test things\nisn't it AppVeyor location?\nthe message I'd like to b-cast is that latest bits most probably has some regression described above.\nor there is another location of latest bits I'm not aware about?. Thanks for answer!\nso AppVeyor is fine, I've taken from there build 4302 - http://prntscr.com/kh3e3i\nand I\"m able to reproduce the issue 100%\nrun - http://prntscr.com/kh3f88\noh..... looks like the issue is more tricky!\nsave full projects works 100% without any assert at all!\nbut, the issue is present when you click on 1st API in 1st namespace/class by mouse! (also click on other methods - would get the same assert..)\nhttp://prntscr.com/kh3fxb\nthis is  pretty much strange...\ngenerally speaking I'm confused that the user might get different asserts - one on save, others on navigating the code..\nI'd like to understand why is that!\n. To make the picture fully clean - clicking issue not present on latest released bits here - ILSpy version 4.0.0.4285-beta1\nthus I make a conclusion that this is regression\nIdea: would be nice to catch it by some tests... and not regress in the future. Oh, you right!\nI forget that release bits are of \"release type\" meaning no debug asserts at all...\nso lets keep this issue opened as a brand new? :)\n. Just checked - that checkbox is ON (I did not even know about it :) ) - \nhttp://prntscr.com/ligy8v\npdb is here (as well as my full simple project!)\nhttps://www.sendspace.com/file/rku5yx\nused latest VS2017 for this.. One more idea:\nIs it possible to NOT use  Min/Max values in some integer arrays.\nIdeally (if you familiar with C++) would be great to use it when we are dealing with R-values (right values)- something, that we are assigning to (another var)\ne.g.: \nOK:\nbyte b3 = byte.MaxValue;\nLooks strange:\nbyte[] byteArray = { 1,2,0,3,4,127,byte.MaxValue, 4,65 };. It depends if you could deduce if current statement is R-value\nor member of  array init sequence\ncould you?\nif not - then lets leave as is.\n. pardon me :)\nI meant only R-val vs array init (all arrays!) difference\n. wow, YES!\nvery cool\npardon me, but that's non-obvious! (clickable item)\nconsider making it like hyperlink (eg blue colored)\nwow again :)\n. Looks like a VS2010 limitation\npossible solution here -\nhttps://social.msdn.microsoft.com/Forums/vstudio/en-US/5757472f-8b17-42c9-afa6-6d0c5eeb9e1c/cant-set-language-version-to-c-40-in-visual-studio-2010?forum=visualstudiogeneral\n2) here is an Advanced project options from VS2010  - it does not have value \"4\"... strange!?\nhttp://prntscr.com/ljsmhi\n. Corresponding IL for above issue:\n```\n.class nested public auto ansi sealed Enum0\n    extends [mscorlib]System.Enum\n{\n    // Fields\n    .field public specialname rtspecialname int32 value__\n    .field public static literal valuetype ns0.Class0/Enum0 const_0\n    .field public static literal valuetype ns0.Class0/Enum0 const_1\n    .field public static literal valuetype ns0.Class0/Enum0 const_2\n    .field public static literal valuetype ns0.Class0/Enum0 const_3\n} // end of class Enum0\n```. well done, closing!\n. Issue is still reproduced on latest build -\nILSpy version 4.0.0.4449-beta3\nstill crashing, but now eating more RAM before crash - like 750 MB\nused debug build from here\nhttps://ci.appveyor.com/api/buildjobs/nn30dorw49wuys3g/artifacts/ILSpy_binaries.zip\nNote: used latest dll from above link\nICSharpCode.Decompiler.dll\n// ICSharpCode.Decompiler, Version=4.0.0.4449, Culture=neutral, PublicKeyToken=d4bfe873e7598c49\n// Global type: \n// Architecture: AnyCPU (64-bit preferred)\n// Runtime: v4.0.30319\n[assembly: AssemblyInformationalVersion(\"4.0.0.4449-beta3-1854a337\")]\n. You are right!\nwhen I've put just this one dll into separate dir, the is no assert, instead I see some comments like this:\n```\n// Microsoft.CodeAnalysis.VisualBasic.DocumentationCommentCrefBinder\nusing Microsoft.CodeAnalysis.VisualBasic.Symbols;\nusing Microsoft.CodeAnalysis.VisualBasic.Syntax;\nusing System.Collections.Generic;\nprivate static void CreateTypeParameterSymbolsAndConstructSymbols(GenericNameSyntax genericName, ArrayBuilder symbols, Dictionary typeParameters)\n{\n    //IL_0006: Unknown result type (might be due to invalid IL or missing references)\n    //IL_000b: Unknown result type (might be due to invalid IL or missing references)\n    //IL_0056: Unknown result type (might be due to invalid IL or missing references)\n    //IL_005b: Unknown result type (might be due to invalid IL or missing references)\n    //IL_00bd: Unknown result type (might be due to invalid IL or missing references)\n    //IL_00c2: Unknown result type (might be due to invalid IL or missing references)\n    //IL_00c4: Unknown result type (might be due to invalid IL or missing references)\n    //IL_00c7: Invalid comparison between Unknown and I4\n    //IL_00c9: Unknown result type (might be due to invalid IL or missing references)\n    //IL_00cd: Unknown result type (might be due to invalid IL or missing references)\n    //IL_00d0: Invalid comparison between Unknown and I4\n    //IL_00d4: Unknown result type (might be due to invalid IL or missing references)\n    //IL_00d8: Invalid comparison between Unknown and I4\n    //IL_00da: Unknown result type (might be due to invalid IL or missing references)\n    //IL_00de: Invalid comparison between Unknown and I4\n```\nI'll need to identify the full set of ref-ed dlls to reproduce the issue\n. Found missed dll that lead to the issue,\npls drop this nearby the one from 1st post\nhttps://www.sendspace.com/file/to8lxi\nand you'll have a chance to see the assert  (I hope) :)\nBTW, used this time this ver:  ILSpy version 4.0.0.4468-beta3\n. Thank you for you interest and response\nFrom end-user perspective - any option would be fine :)\nas the goal is read-ablity as well as click-ability and navigation\n. Of course, de4dot to the rescue, but it does not cover 100% of use cases.\nVery often you need to peek into input assembly to understand some tidbits\nand you can't\nsee my pics above why\n. Interesting case, indeed\nNot critisizing, but from end-user older IL3.2 was more robust or so..\n. >>and 4.0b3 threw not a single one.\nthis is really great achievement!\ncongrats\nThanks a lot for superb tool and - Happy New 2019 year to you and the rest of big ILSpy team!\n:)\n. The culprit found:\nMicrosoft.Ink.InkRecognizerContextClass\nassembly:\n// C:\\Windows\\assembly\\GAC\\Microsoft.Ink\\1.0.2201.0__31bf3856ad364e35\\Microsoft.Ink.dll\n// Microsoft.Ink, Version=1.0.2201.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\n// Global type: \n// Architecture: x86\n// Runtime: v1.0.3705\n// This assembly is signed with a strong name key.\n// Hash algorithm: SHA1\n// Public key: 0240048000940006200024005253413104001010b5fc90e727f67871e773a8fde8938c81dd42ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131aebd333c5ee6021672d9718ea31a8aebdda072f25d87dba6fc9ffd598ed4da35e44c398c45437e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c3855da9\n. Drag-drop the ref. assembly into tree-view pane\n. Here is how another decompiler handles it:\nprivate static void GrowBuffer(ref byte[] buffer, int newSize)\n        {\n            if (buffer == null)\n            {\n                byte[] array = new byte[newSize];\n                array.Initialize();\n                buffer = array;\n            }\n            else\n            {\n                byte[] array2 = new byte[newSize];\n                array2.Initialize();\n                uint num = buffer;\n                Array.Copy(num, 0, array2, 0, num.Length);\n                if (buffer != null)\n                {\n                    buffer = null;\n                }\n                buffer = array2;\n            }\n        }. Fixed!\n. Maybe it worth adding comment about this fact into decompiled line?...\neg:  / no full support of is/as /\netc\n. How about this checkbox? is it ON or OFF?\nused version ILSpy version 4.0.0.4521 and\nI could see your ns/classes:\n\n. Thats your main show stopper\n2013 can't support latest .net editions which ILSpy requires...\n. maybe this could treat the issue?\nhttps://support.microsoft.com/en-us/help/3045566/microsoft-net-framework-4-6-targeting-pack-and-language-packs-for-wind\n. Upd:\nthis issue ICSharpCode.Decompiler.IL.ILVariable.set_Kind  is very common and happens almost each 3rd assembly I've used ...\n. This issue is really very common, I'd call it even a blocker\nhere are more assemblies with same err\nhttps://www.sendspace.com/file/am7wf2. ",
    "poizan42": "Well, clearly it didn't work at some point, but I can't reproduce it on 2.4.0.1963, so I'm closing this.. ",
    "imor": "In the latest build, whenever I rebuild an assembly and press F5, the last selected node remain selected. If that node is no longer available (e.g. the selected method was deleted) then its parent is selected. Can you confirm?\n. ",
    "batzen": "If you are not the maintainers you could ask the current maintainer or the chocolatey team to add you.\nI think this issue should be closed because the package is already updated or should be renamed to \"Get admin access to chocolatey package\" or \"Automate creation of chocolatey package\".\n. ",
    "sharwell": "This is the perfect case to just add a reference to VSSDK.Shell.10. Why include it in the repository?\n. Yikes, I was expecting packages/ to be excluded from source control.\n. The .editorconfig file and extension have proven very reliable in my experience. The @ILSpy team can verify whether the settings match what they expect.\nI haven't used Rebracer. The team will also need to verify those settings.\n. @SLaks For a feature inside Visual Studio, I think the Roslyn custom workspace approach is the one to go with. \"Only works with dev14\" will quickly turn to \"works with dev14 and newer\"... plus you would still have the external viewer for other cases.\n. One small bug (see comment above), but will be ready to merge after that.\n. @siegfriedpammer We are both elated that you made that \"complaint\" :smile: \n. It was bothering me to. I haven't tested it yet, but considering what you were using the feature for I know if it fixed it for you then I'm covered too. To verify you could check the new disassembly for the editor dropdown bars.\n. :sunglasses: :sparkles: :dancers: \n. In Visual Studio 2013, Community Edition recognizes \"Pro\" extensions automatically. Was this behavior changed for Visual Studio 2015?\n. :memo: This specifically impacts projects using the new project system, and is unrelated to the target framework used by the project. MSBuild 15 can build projects in either the old or the new project system. Testing this would require a repository that uses the new project system, such as DotNetAnalyzers/StyleCopAnalyzers.. :bulb: I noticed you have nameof operator crossed out. While this is typically not possible due to lack of information in the compiler output, it would be good to support it in limited cases, such as the paramName argument for ArgumentException and derived types, which is likely to align with the name of a parameter visible in the current scope.. :bulb: I noticed you have Caller Info attributes crossed out. While this is typically not possible, one way it could be leveraged is intentionally omitting arguments (and allowing defaults to apply) in cases where the IL passes literal arguments which are known to align with the actual values that would be inserted by these attributes. The CallerMemberNameAttribute would work without additional considerations. If other information is desired, the #line directive could be used to set the file name and line number for the call site.. :memo: I'm reading through your comments. Is this the best place to chat about it if I have questions on the approach(es)?. > AppVeyor/msbuild: yes, it does not respect any build dependencies properly, that's why we had to disable parallel builds, in our case this is not a big deal.\nMicrosoft/msbuild#2366. \u2753 Do you have branches with \"Attempt 1\" and \"Attempt 2\"? I'm assuming #833 represents Attempt 3.. @christophwille Thanks, I'll take a look!. > dotnet restore ilspy.sln\nThere's the problem. I totally overlooked it originally. I'll fix the PR.\nEdit: Nope, AppVeyor is using the correct command already (nuget, not dotnet).. I fixed it! \ud83c\udf89 . \ud83d\udcad The problem seems to arise in the following two lines:\nhttps://github.com/icsharpcode/ILSpy/blob/4bdd7f48b1f56f9f72e04bd9e61705862f36a033/ICSharpCode.Decompiler/CSharp/Transforms/ReplaceMethodCallsWithOperators.cs#L69-L70\nWhen I tested this, method.FullName was returning System.Type.GetTypeFromHandle instead of the complete signature.. :memo: The highlighted situation is very similar to #839. Elimination of the local would simplify the output and also remove the use of a ref local.. @siegfriedpammer Yes, the differences as compared to #998 are listed above. This pull request is a slightly different approach to the same goal.. There are two things that leave me uneasy about this:\n\nThe notice was a start, but didn't include all of the existing required notices.\nThe .NET Foundation template was written with an assumption: LICENSE covers the source code in the current repository, and THIRD-PARTY-NOTICES covers source code included by copy in the current repository. ILSpy distributes multiple components from the current repository, and the license used by the components varies.\n\nIf you have thoughts on how to modify this pull request to satisfy your concerns in these areas then it can be reopened.. @hyspace It sounds (from emails I sent a bit ago) like the issue may be resolved now. Are you still able to reproduce this?. I was not able to reproduce this with 1.259.1153.0. When I checked for updates, it brought me to 1.259.1184.0 where I am also not able to reproduce it.. > @sharwell has made a PR to update the decompiler to 3.0.0.3447 (dotnet/roslyn#24189). Would it be possible to wait for the changes MonoDevelop needs?\nProbably yes.. The output of an obfuscator is still required to adhere to the specifications for the underlying VM. If it fails to do so, downstream tools are expected to fail randomly.\nBefore determining how how SRM should handle this, we need to determine if this is a bug in SRM (obfuscated code adheres to the specification), or if this is an intended behavior of the obfuscator (does not adhere to the specification).. @siegfriedpammer your example produces a CS0009 compilation error if you try and compile against the assembly. IntelliSense fails as well. For all practical purposes, this is an unusable assembly from a developer's perspective.. This seems to be a problem only for Edge. Chrome already shows the correct width and Edge is not corrected by this change.. Do we know why the assembly contains invalid metadata? Seems like a bug that should be fixed.. > It's obfuscated\nAt last check we decided to \"won't fix\" items related to obfuscated assemblies.. > At last check we decided to \"won't fix\" items related to obfuscated assemblies.\nBy the way, the issue here is there is virtually an unlimited number of edge cases which obfuscation tools use to try and break decompilation tools. In all cases, two things are apparent:\n\nThe file is not following the rules, and therefore is not expected (certainly not guaranteed) to work in any specific capacity, including but not limited to compilation (as a dependency) or runtime\nThe intent of the author of the file is clearly to break tools, so if the tool is broken, it's not a bug and there is nothing to fix\n\nMy recommendation would be a high-level error handler that treats the assembly as unresolved if it fails to load for due to obfuscation. I believe this would be fairly easy/centralized error handling.. :bulb: This should be just the following:\n.vs/\nIt also replaces the previous *.ide/ exclusion for everything except some preview releases of Visual Studio 2015.. \u2753 Why not pass context for consistency with the cases above?. \ud83d\udcad I question the value of this option specifically.. :memo: I can remove this commit if it is undesirable. I found it much easier to \"just work\".. :bulb: The AdditionalProperties can be removed after Mono.Cecil.csproj is converted to the new project system.. At this point, I'm not using the .NET Core test runner or the dotnet tool for anything. I don't expect that to change prior to converting Mono.Cecil.csproj to the new project system. The change in output type was actually a workaround to ensure AutoGenerateBindingRedirects properly created a config file, which is then used by the test runner. This fixes a few different problems related to assembly load failures during test runs without having to manually maintain the redirects in an app.config file.\nThe explicit specification of a StartupObject avoids confusion related to multiple potential Main methods.. Since this project uses <Private>false</Private>  for its references, the expectation is the references will not be copied to the output directory. However, while references in the new project system are transitive, the Private flag is not transitive. This target disables transitive references to ensure that neither the referenced project nor any of its dependencies are copied to the output directory, preserving the original behavior.. Issue was relative ordering of the import of Sdk.targets and the definition of the BeforeBuild target. I reversed the order to fix the build.. > Is there a way to avoid 'git commit -a' and GUI tools like TortoiseGit picking up a submodule change if after such local commits?\nYes. We can set ignore = all in .gitmodules for this submodule.\nYou would then have to use git add ILSpy-tests -f if you wanted to force the submodule to update.. \u2753 What is this option?. \u2753 What is this option?. :memo: This group makes sure Page and Resource items appear in Solution Explorer. It's not the best known approach but it gets us by prior to the project system supporting it.. :bulb: It would be better to use a matrix for the configuration property.\nYou can build Debug and Release like this, and use %configuration% where you currently have the value hard-coded in the build script.. :bulb: It would be good to move this to a separate file, e.g. BuildTools/appveyor-install.ps1. It makes the script much easier to edit.. :bulb: I think you still need ;Configuration=%configuration%. Interesting. Seems it worked without this, but I have no idea how.. :bulb: The .NET Foundation templates do not include a date here. Removing the date makes some things easier, but other things more complicated. I would recommend evaluating two options to determine if they offer the protections you desire:\n\nRemoving the date\nUsing a single date instead of a date range (specifically, the date at which the project was started). \n",
    "rraallvv": "I'm seeing this on the Xamarin Studio's Assembly browser too:\n```\n[CompilerGenerated]\n[Serializable]\nprivate sealed class <>c\n{\n    public static readonly Parser.<>c <>9 = new Parser.<>c ();\npublic static Converter<TypeNode, string> <>9__77_0;\n\npublic static Converter<TypeNode, string> <>9__75_0;\n\npublic static Converter<TypeNode, string> <>9__74_0;\n\npublic static Converter<TypeNode, string> <>9__73_0;\n\n```\nIs there a way to make ILSpy to correctly decompile the assemblies that generated that?\n. Thanks for the info @SlowLogicBoy \n. ",
    "SLaks": "No; I haven't had time to work on this for a while.\nThere is also the question of #519.\n. Sorry; I do not have time to work on this at the moment.\n. I can easily implement this to open ILSpy.\nImplementing this in a new tab is better done with Roslyn (so we can provide standard language services in the new tab); that will only work on Dev14.\n. More details:\nThere are three ways to display decompiled code in VS:\n1. Embed the ILSpy UI (AvalonEdit & associated hyperlink code) in a blank document tab (or tool window) in VS.\n   This is the simplest approach, but would look horribly out-of-place compared to the rest of the VS UI.\n2. Dump the source to a (readonly) file, then open that file as a regular C# file (not associated with any project).\n   This is even easier, and would look perfectly normal.  However, the file would not have any semantic information, so you wouldn't be able to navigate from it.\n3. Open the source as a C# file, and use Roslyn to bind it to a custom Workspace which references the original assembly.\n   This would look perfectly normal, but would also have full semantic information; we could easily hook F12 in that file to open definitions in other decompiled files.  It would also natively support Find All References within the current actual solution (I think).\n   However, this would only work in Dev14.\nThese three options are all completely independent of other decompiler UI, including how the decompiler would be invoked (F12, new command, Expand reference nodes to ILSpy-like assembly tree, new tool window, etc)\n/cc @sharwell\n. @christophwille See also https://github.com/SLaks/Ref12 and SLaks/Ref12#1\n. This will be hard.\ndotPeek does this by implementing a symbol server, and dumping a PDB and full decompiled source to disk.  I don't know how easy it is to write a PDB.  This is also slow.  This approach involves a standalone program (ILSpy.exe addin), and has nothing to do with an extension.\nIt might be possible (probably only with Roslyn) to integrate directly with the debugger instead of using PDBs, but it would be much harder.\nIf we go the PDB route, we can use Roslyn (in an extension) to add F12 & language services to the generated files, exactly the way they open MAS files.\n. There is still one failing test case under Roslyn (SimpleNames in BamlDecompiler.Tests).\nThis fails because the IL decompiler does not recognize Roslyn switch statements (see #502).\n. I resolved the merge conflicts; this should be ready to merge\n. I also don't like putting binaries in source control. :smile: \nShould I enable NuGet Package Restore as a separate PR, or as part of this one?\n. I fixed all of the issues and rebased to resolve conflicts.\nThis too is ready to merge.\n. Yep :grinning: \n. We can use an NUnit TestCaseSource to write a single test method which will automatically run for every .il+.cs filepair in the test directory.\n. You should use source control (with branches for customer modifications) instead.\n. Yes, but the debugger should still have access to source control history.\n. ",
    "SamB": "Hmm, well, it doesn't seem like you should avoid fixing bugs just because it isn't clear how best to test for their recurrence.\n. @dgrunwald is there an issue about getting the customizations merged into NRefactory?\n. ",
    "ctaggart": "A better alternative to SymbolSource is just using SourceLink. I just created and blogged about SourceLink.SymbolStore which could be used. If a more C# friendly interface is needed, but open an issue, propose an interface, and I'll implement it. \n. ",
    "bbi-yggy": "Note that \"Go to definition\" is similar to the \"Open code in ILSpy\" feature I'm working on. See #696 and friends. However I am not working on support for display inside Visual Studio (along the lines of the standard \"Peek Definition\"), just for launching ILSpy externally and navigating to the selected code.\n. For the record, in case anyone on this thread is interested, pull request #706 (not yet merged as of May 4th) resolves the final issues I am aware of with my new \"Open code in ILSpy\" feature. Would appreciate feedback from anyone who has time to try it out.\n. I did test constructors extensively, including a wide variety of generic constructors, see ILSpy.AddIn/Samples/ILSpyAddInSamples.cs for my test cases. How can I determine the state of the code in version 2.4.0.1963? Does it match the current v2.4 tag?\nIf it's not working with my latest changes (which aren't recent, it was back in May) then I will investigate why and the fixes should be straightforward. Unfortunately I won't have time to investigate until the middle of next week, August 3rd or so. If you can provide a test case that doesn't work that could be helpful.\nFor what it's worth, I just retested with the ILSpy add-in I built locally while working on the feature, and navigate to constructor is working fine.\n. Hmm, OK. Please attach sample code -- my testing of constructors is working fine.\n. And not just types, but members too. Including overloaded methods and those with generic type parameters. For example, given this class:\nclass MyClass\n{\n    void MyMethod<T>(T arg)\n    {\n        ...\n    }\n}\nThis command line works great:\nILSpy.exe MyAssembly.dll /navigateTo:M:MyClass.MyMethod1(0)\nI would love the equivalent capability in the Visual Studio context menu. Basically anywhere I can right-click and \"Go To Definition\" I want to be able to \"Go To IlSpy\".\n. Note that #706 is the final PR in a series of changes that implements the ability to browse to any code in ILSpy. So for types of your own implementation, you can \"Go to definition\" and then \"Open in ILSpy\".. I do like the idea of this feature, but would certainly prefer to be able to go to any stack frame. If you can figure out how to get the code element for a stack frame you can look at my implementation of \"Open Code in ILSpy\" (CodeElementXmlDocKeyProvider.cs) to see how to navigate straight to the item.\nHmm, thinking about that a bit -- VS is only going to give you a code element for source code. If you want to navigate to a stack frame for which you don't have source (assuming you can get info on the stack frame in the first place) you will likely need to figure out the xml doc key generation yourself.\nAlso note that for stack frames for which you do have source, you can double-click the stack frame to get to the source, then right-click in the source code and use the new Open Code in ILSpy context menu item. Not as direct as going from the stack trace itself, but a decent workaround.\n. Oh, cool, I see. Are you able to generate an xml doc key from the stack frame in order to navigate to the item? If you look at CodeElementXmlDocKeyProvider you'll see just how many hoops I had to jump through in order to handle overloads and generics correctly.\n. I wonder if it would make sense to do something on the ILSpy end (instead of in the add-in), for example if \"navigateTo\" is ambiguous then pop up a dialog and get the user to choose which overload to look at. On the other hand I'd expect all the overloads to be close together in the target assembly, so navigating to the first one and leaving it up to the user to look around if needed is probably fine.\nOr perhaps navigateTo could be a little more flexible in the face of an ambiguous match, for example allowing you to match based on parameter count even if the actual parameter types don't quite line up -- basically do some sort of \"closest match\" rather than the current behaviour of requiring an exact match or falling back on the first name match.\n. Note that I'm actively working on this and should have a pull request ready to go soon.\n. This is fixed by pull request #695 and can be closed now.\n. Thanks for the prompt review and merge. I've added #696 for follow up on overloaded method disambiguation.\nA few GitHub noob questions ...\n- #694 (issue) and #695 (pull request) became sort of duplicate requests, should I have done this differently?\n- I closed #694 manually - is it appropriate for me to close my own issues or should I leave that up to a project admin?\n- should I go ahead and delete the branch I used for the work on #695, or leave that up to a project admin?\n. Further testing reveals more edge cases. Updated #696 accordingly. Working on fixes.\n. Fixes implemented, see new pull request #697.\n. Note that #695 was merged for the ILSpy 2.4 release, but it looks like #697 (with various fixes) did not make the cut.\n. Would be nice if /navigateTo directly supported the syntax used by Visual Studio's CodeElement.FullName, but I will focus on generating the currently supported syntax.\n. The string generation got messier than I expected. The end result is effectively duplicating the code from XmlDocKeyProvider.GetKey, but taking an EnvDTE.CodeElement as input instead of Mono.Cecil.MemberReference. Feel free to suggest a better way.\nI also tried to find a way to implement #660 but I couldn't find any procedural interface to the Call Stack window (so I asked on Stack Overflow). If there is such a thing, and if you can get a CodeElement from it, then you could use my new OpenCodeItemInILSpy method to do the dirty work.\n. Note that every element in this file has been tested:\nhttps://gist.github.com/yoyobbi/0e185f3a574db9d5f3ec3ab08ede2ce1\nI have not tested methods with parameters of custom or array types, generic interfaces and structs, enums inside structs, and various other edge cases that may arise in the wild. I'm reasonably confident most things should work.\n. Hmm, running into further edge cases with method parameters of generic types. Going to refine my implementation of key generation to more closely follow the existing XmlDocKeyProvider. Closing this pull request for now, will reopen when ready.\n. This ended up more complicated than I originally expected, but it's 99% working now. There are still some edges cases with multi-dimensional array parameters to overloaded methods that are not being disambiguated correctly. I suspect there might be a bug in the /navigateTo feature itself? Have not had time to investigate further.\nThis is as done as I intend to make it for now. See ILSpy.AddIn/Samples/ILSpyAddInSamples.cs for a lengthy set of examples that do work. (Generic classes and methods, structs, interfaces, enums, array parameters, constructors, operators, indexers, type conversion operators, ...)\nFeedback welcome!\n. Thanks Siegfried! Sorry for my half-baked first attempt, should be pretty solid this time around. There may still be subtle edge cases (reference parameter that's a jagged array of pointers??) that will confuse it, but it definitely deals with most normal cases correctly now. Please put it through its paces if you have a chance.\n. BTW, from the C# language spec:\n\nArguments that are arrays are represented as [ lowerbound : size , \u2026 , lowerbound : size ] where the number of commas is the rank\u00a0less one, and the lower bounds and size of each dimension, if known, are represented in decimal. If a lower bound or size is not specified, it is omitted. If the lower bound and size for a particular dimension are omitted, the \u201c:\u201d is omitted as well. Jagged arrays are represented by one \u201c[]\u201d per level.\n\nI'm pretty sure my code is formatting multidimensional and jagged arrays as per the spec, but the navigation isn't working correctly, see the \"NOT?\" comments in the ILSpyAddInSamples.cs.\n. @dgrunwald, good idea, I will try that.\nOn that note, do you know if there's a way to get Visual Studio to just generate the xml key for me in the first place and not have to jump through all these hoops? Obviously VS is capable of generating these keys, since it puts them in the xml doc files, but I wonder if there is an API for it? It would certainly simplify the \"Open code in ILSpy\" feature.\n. Thanks @siegfriedpammer, I look forward to this getting into a future release of ILSpy so I can roll it out to my team!\nI believe this is my first contribution to an open source project -- and (assuming I didn't break anything) it seems like a textbook example of how open source should work. I compared ILSpy with a closed-source alternative. It lacked a feature we really needed for use at our workplace, so I downloaded the source, got it building, implemented the feature, and it is now submitted and merged. The few days I invested will more than pay for itself by enabling our team to use ILSpy rather than pay to license another product. Win!\n. Well, once we start using ILSpy in earnest, who knows we may find more things we want to add. :-)\nIs there a schedule for the next release? I know 2.3.2 came out pretty recently. If it's going to be a while, is there an easy way for me to provide my team with a bleeding edge version either by downloading package made from the master branch, or create one myself from my local build environment?\n. Oh, perfect, thanks! (Wow, there's already builds from tomorrow :astonished:)\n. @lextm, it looks like the nightly builds don't include the Visual Studio add-in. And looking more closely, I believe the .vsix add-in file is self-contained with everything needed to run ILSpy. So until a future release comes out, it's probably simplest for me to just build the .vsix locally and distribute it to my team.\n. @grokky1 are you right-clicking in the code window and selecting Open code in ILSpy? If so then please provide more details about your project type and whether it currently builds successfully. (But if not then your problem is unrelated to this pull request, so as @siegfriedpammer says you should open a new issue.). @grokky1 and are you using the \"Open code in ILSpy\" option from the source code window? Or right-clicking on a reference?. OK, cool, so your issue is relevant to this pull request. You said \"Open in ILSpy\", which is what it shows when you click a reference, so I wasn't sure. The actual text is \"Open code in ILSpy\" when clicking in the text editor. I hadn't tested with an ASP.NET project, so I guess the output path I'm retrieving from visual studio isn't valid for that project type. I'll have to refresh my memory on how this worked.\nIf you still care and have the energy please open a new issue. (Or I can do it if you've moved on and lack motivation ;-). Thanks @grokky1.\nIt seems that the way the output assembly path name is determined is specific to project type. I only tested the \"Open code in ILSpy\" feature with regular C# projects. Will investigate, time permitting.. @cremor thanks for testing. Yes, \"Open code in ILSpy\" in the text editor should be supported. That was a feature I added last year - it worked well at the time (after problems with overloaded methods and constructors in my initial commit, but I addressed those subsequently). I would also expect it to work on any assembly listed under References in the Solution Explorer. I no longer have the ILSpy development environment set up, but sounds like I should get it going again so I can investigate. My time is limited at the moment I'm afraid, so not sure when I will have a chance.. @Rpinski OK, good to know, thanks. I did see a report of an issue of the feature not working with some project types - I had only developed and tested the feature with plain old C# projects, and I never had a chance to follow up on other types. I also developed and tested solely with Visual Studio 2015, so I don't know if 2017 introduced issues. Let me know if I can help.. NOTE: I initially attempted to follow the structural logic of XmlDocKeyProvider, but found that EnvDTE.CodeElement and friends don't precisely match their Mono.Cecil counterparts, and the end an approach based mainly on string parsing (of type FullNames) proved much simpler.\n. Samples provided for reference only, not compiled or copied to the build output.\n. This will disable the \"Open code in ILSpy\" context menu item if, for example, you are editing a text file that is not part of any project.\n. Each item includes its \"/navigateTo\" string as a comment. Might be worth someone putting some of these into the documentation for the ILSpy command line option, rather than just saying \"The syntax of ID strings is described in appendix A of the C# language specification.\"\n. The first and last of these four ArrayMethod overloads are navigated to correctly, but the second and third incorrectly navigate to the fourth. Possible bug in /navigateTo implementation?\n. ",
    "ajuszkowski": "Go to definition in full version ILSpy.exe version 2.4.0.1963 not working with constructors, it refers to the start of decompiled class instead of constructor code. Is it hard to fix this?\n. > Does it match the current v2.4 tag?\nYes, unfortunately the current full version I built (version 2.4.0.1972, matched v2.4 tag, built on July 31) has this bug. \n\nUnfortunately I won't have time to investigate until the middle of next week\n\nI don't think this is a high-level bug, just a little inconvinience :)\n. more generally, I'll be happy if there will be an API to write complex script-like queries :)\n. ",
    "KvanTTT": "@PoroCYon, I mean small part of most used combinations which can be added or calculated manually.\nI found following Math.PI combinations using with github \"Advanced search\".\nSo, taking above result into consideration, I suppose to calculate pi coefficient by following way: c = Math.PI / constant. If we getting \"good\" value (equal exactly to 1.0, 2.0, 0.5, 1/180 and so on), we simply replacing it with symbolic expression (Math.PI, Math.PI * 2, Math.PI / 2, Math.PI / 180 and so on).\nAlso descried above algorithm should be applied for constant Math.E.\nI'll try to implement this feature.\n. I analyzed most popular .net decompilers (JustDecompile, dotPeek, .NET Reflector) and found that only dotPeek supports this feature.\n. I think it should be in NRefactory lib, because of float.PositiveInfinity, float.NegativeInfinity, float.NaN and other are there.\n. Ok, I got it.\n. ",
    "dee-see": "@KvanTTT Did you notice if dotPeek really decompiled that or if it was using Microsoft's PDB servers (which is a built-in feature of dotPeek)?\n. ",
    "UlyssesWu": "Very Cool and Useful ! Great Job ! ;)\n. ",
    "ebrouen": "Thank you for your answer but it is not the goal. The debugger is not necessary the programmer... \n. Let's say that there is one office (more merely one developer) that add functions to the project, deliver them to (some) customers, and continues like that all the time. \nOn the other hand, some people in another branch, are the receiver of bug alerts (by mail, with full dump and access to the assemblies and pdb of the customer).\nThey don't have access to the source code, and it is not necessary because each error report gives the line number and file where the error occurred. \nIf ILSpy show the real line number of source code, they can link it with the error report and give a better support, and most important, they can dialog with the developer with a good base ground...\nExample:\nThe error is (in fact an exception) :\n```\nEnding VT12 at 12/02/2015 13:06:40\nIP Address = 192.168.1.70:0\nMySQL .Net Connector must be at least of version 6.7.5\n   \u00e0 VT12.DAL.DataAccessLayer.ServerConnect() dans C:\\Users\\Eric\\Documents\\Visual Studio 2010\\Projects\\VT12\\VT12DLL\\VT12.DAL.cs:ligne 949\n   \u00e0 VT12.DAL.DataAccessLayer.ServerConnect(String pServerType, String pServerURIName, String pServerUser, String pServerPassword, String pServerDatabaseName) dans C:\\Users\\Eric\\Documents\\Visual Studio 2010\\Projects\\VT12\\VT12DLL\\VT12.DAL.cs:ligne 798\n   \u00e0 VT12.Core.Configuration.DataBaseConnect(DataAccessLayer oDal) dans C:\\Users\\Eric\\Documents\\Visual Studio 2010\\Projects\\VT12\\VT12DLL\\VT12.Core.cs:ligne 3699\n   \u00e0 VT12.Program.Main() dans C:\\Users\\Eric\\Documents\\Visual Studio 2010\\Projects\\VT12\\VT12\\Program.cs:ligne 228\n   \u00e0 System.AppDomain._nExecuteAssembly(RuntimeAssembly assembly, String[] args)\n   \u00e0 System.AppDomain.ExecuteAssembly(String assemblyFile, Evidence assemblySecurity, String[] args)\n   \u00e0 Microsoft.VisualStudio.HostingProcess.HostProc.RunUsersAssembly()\n   \u00e0 System.Threading.ThreadHelper.ThreadStart_Context(Object state)\n   \u00e0 System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\n   \u00e0 System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\n   \u00e0 System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\n   \u00e0 System.Threading.ThreadHelper.ThreadStart()\n```\nand ILSpy give me the following code\ncase DataAccessLayer.DataBaseProvider.MySQL:\n    {\n        Version version = AssemblyName.GetAssemblyName(\"MySQL.Data.dll\").Version;\n        if (version.CompareTo(new Version(\"6.7.5.0\")) < 0)\n        {\n            throw new PDSException(\"MySQL .Net Connector must be at least of version 6.7.5\")\n            {\n                DontRestartApplication = true\n            };\n        }\nwith lines between 84 and 93.\nIn this example, I have only one case with this exception, but sometimes, because the exception is not handled, I can have more possibilities of errors.\nWith the real line number, I could debug the solution starting from the dump, till the source code. \nI hope that my explanation is clear enough....\n. ",
    "molnargab": "I have to use ildasm when I need to check line numbers for an assembly. It would be nice to have this feature in ILSpy as well.\n. I use both tools to decompile assemblies. ILSpy is great for me, if I want to check what IL code is compiled, though when I want to track that back to the C# source, I need to open up ildasm to display line numbers from the PDB.\nSo in my case, if ILSpy displayed the line numbers, I wouldn't need to use ildasm at all.\n. ",
    "DerpMcDerp": "You shouldn't use this because it can generate false positives:\nC#\n// Special case for DllImports:\nif (name.Length > 1 && name.StartsWith(\"p\", StringComparison.Ordinal) && method.GetAttribute(DllImportAttributeName) != null) {\n    return name.Substring(1);\n}\nI'd recommend something like this instead:\n```C\n// detects lpFoo, pBlah, p...pBlah Hungarian notation parameter names\nstatic private int FindHungarianPointer(string name) {\n    if (name.StartsWith(\"lp\") && name.Length > 2 && name[2] >= 'A' && name[2] <= 'Z')\n        return 2; // strip off leading \"lp\"\n    for (int i = 0; i < name.Length; ++i) {\n        if (name[i] >= 'A' && name[i] <= 'Z' && i != 0)\n            return 1; // strip off a single leading \"p\"\n        if (name[i] != 'p')\n            break;\n    }\n    return 0;\n}\nint lp = FindHungarianPointer(name);\nif (lp && method.GetAttribute(DllImportAttributeName) != null) {\n    return name.Substring(lp);\n}\n```. > Do you want us to add \"Assigned By\" and \"Read By\" as analyzers for auto events?\nYes. It should detect all places (except for the compiler generated foo.add_SomeEvent and foo.remove_SomeEvent methods) where constructs like the following appear:\nfoo.SomeEvent != null\nfoo.SomeEvent = whatever\nfoo.SomeEvent.SomedDlegateMethod()\nbut not:\nfoo.SomeEvent += whatever\nfoo.SomeEvent -= whatever\nfoo.SomeEvent(whatever)\nsince those are already handled by the \"add\", \"remove\", \"Raised By\" analyzers.\n. The latest nightly does fix this issue. However I found one problem:\nIf you search for something and use the \"back\" and \"forward\" buttons on the mouse to navigate through history (I guess Mouse.XButton1 and Mouse.XButton2) and the text cannot be found, ILSpy will display a \"No matches found!\" tooltip which seems to steal focus from the mouse preventing you from using those mouse buttons to navigate until you dismiss the tooltip.\nAs an easy workaround, you can make the background of edit field of the find dialog turn red similar to how firefox does it if nothing is found instead of displaying a tooltip.\n. I've written a PowerShell script which injects a hardware XButton1 (i.e. the mouse's \"back\" button) click every ~3 seconds which may help you reproduce it:\n``` PowerShell\nfirst, add the P/Invoke to your PowerShell session\nAdd-Type -TypeDefinition @'\npublic class user32 {\n[System.Runtime.InteropServices.DllImport(\"user32.dll\")]\npublic static extern void mouse_event(uint flags, uint dx, uint dy, uint data, System.IntPtr extra);\n}\n'@\n```\nThen just run this infinite loop (push ctrl+c to break it)\nPowerShell\nfor(;;){ sleep -m 2700 ; 0x80,0x100 |%{ [user32]::mouse_event($_, 0,0,1,0) ; sleep -m 150 }}\n. Found another strange example:\nSystem.Windows.Media.Animation.AnimationStorage.EvaluateAnimatedValue(PropertyMetadata metadata, ref EffectiveValueEntry entry) gets decompiled to:\nC#\nif (!this._dependencyProperty.IsValidValueInternal(currentPropertyValue))\n{\n    string arg_84_0 = \"Animation_CalculatedValueIsInvalidForProperty\";\n    object[] array = new object[2];\n    array[0] = this._dependencyProperty.Name;\n    throw new InvalidOperationException(SR.Get(arg_84_0, array));\n}\nrather than the expected:\nC#\nif (!this._dependencyProperty.IsValidValueInternal(currentPropertyValue))\n{\n    throw new InvalidOperationException(SR.Get(\"Animation_CalculatedValueIsInvalidForProperty\", new object[] {\n        this._dependencyProperty.Name,\n        null }));\n}\n. OCD. Seeing the focus ring whenever the close button is clicked is jarring to me.\n. @weltkante Go to \"Control Panel > Ease of Access Center > Change how your keyboard works\" and then turn on the \"Underline keyboard shortcuts and access keys\" option. When that setting is enabled, clicking on buttons that have Focusable = true will display a focus ring.\nWhy would you expect tab to navigate to the close button? No other program with a find panel UI does that, they all use ESC to close (some also have Ctrl+F to toggle) and not let you keyboard navigate to the close button.\n. > As for the idea of toggling: I'd prefer Ctrl+F to reactivate the search panel, if it's already open\nToggling should only toggle if the search panel's edit control is focused and all its text is selected. Otherwise it should behave exactly as it does now.\n. I found a place where ILSpy miscompiles pointer addition (and also uses sizeof(void) which isn't valid):\nC#\n// System.StubHelpers.BSTRMarshaler\n[ForceTokenStabilization, SecurityCritical]\ninternal unsafe static IntPtr ConvertToNative(string strManaged, IntPtr pNativeBuffer) {\n// ...\n        *(int*)pNativeBuffer.ToPointer() = (int)num;\n        ptr = (byte*)(pNativeBuffer.ToPointer() + 4 / sizeof(void));\n// should be:\n//      ptr = (byte*)pNativeBuffer.ToPointer() + 4;\n. As a workaround, if you view the WebConfigurationManager class instead of the WebConfigurationManager.OpenWebConfiguration method, it has a collapsed using ... which lists all the namespaces the class depends on.\n. I can't test your patch but can you make sure the following is fixed too:\nC#\n// System.Convert\nprivate unsafe static int ConvertToBase64Array(char* outChars, byte* inData, int offset, int length, bool insertLineBreaks) {\n// ...\n// current (v2.3.0.1830):\n                    outChars[num3 + 2] = *(ptr + ((int)(*(inData + (i + 1) / 1) & 15) << 2 | (*(inData + (i + 2) / 1) & 192) >> 6));\n// better:\n//                  outChars[num3 + 2] = ptr[((inData[i + 1] & 15) << 2) | ((inData[i + 2] & 192) >> 6)];\nspecifically:\n- the explicit cast to int is redundant\n- *(ptr + something) on the rhs should be ptr[something]\n. If you're reluctant to adjust the hitbox sizes, how about at least shifting the hitbox between the search results and the editor 3 pixels up?\n. ",
    "MWisBest": "The sample was pulled from a larger program, so maybe it's something else in there causing the mix-up; I'll double-check and get back to you when time permits. Thanks!\nEDIT: Yes I was able to verify that it's the program I was decompiling specifically. This is the program in question: http://www.nfscars.net/mostwanted/file/10129/ specifically the vltedit.exe binary.\nIt is 'Dotfuscated'; the same \"b2\" name in question I posted as the example.\nMaybe a .NET 1.1 issue?\nEDIT2: I also see other decompilation fixes I had to make decompile fine on my fixed version. For example, set and gets, like: 'this.s.set_TabIndex(3);' now decompile to 'this.s.TabIndex = 3;' after I corrected those (and my corrected version targets .NET 4.5). I'm not sure if this is Dotfuscator or the age / .NET 1.1 thing.\nI'm a little new to this .NET stuff, so please let me know if there's anything else I can do to help or if this is a 'won't fix' sorta thing! I could also provide my fixed-up/corrected version of this program if that could help.\n. ",
    "Jockebocke69": "Hi Siegfried,\nI solved the enigma .. it was a modification in the machine.config file, that caused ILSpy to not start anymore.\nAfter correcting the xml so it was again well formed, everything was back to normal.\nCase closed.\nJohan De Bock\nFrom: Siegfried Pammer [mailto:notifications@github.com]\nSent: donderdag 26 februari 2015 18:42\nTo: icsharpcode/ILSpy\nCc: De Bock Johan\nSubject: Re: [ILSpy] The process was terminated due to an unhandled exception. (ILSpy won't startup anymore) (#543)\nSeems like your installation got corrupted... have you tried redownloading and replacing the files?\nYou could try resetting your settings by deleting (or renaming) %AppData%\\ICSharpCode\\ILSpy.xml\nHope this helps!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/icsharpcode/ILSpy/issues/543#issuecomment-76226106.\n. Hi Siegfried,\nI solved the enigma .. it was a modification in the machine.config file, that caused ILSpy to not start anymore.\nAfter correcting the xml so it was again well formed, everything was back to normal.\nCase closed.\n. ",
    "gramanan": "Encountered the same today, with the decompiled code not compiling due to internal switchmap variable name.  Interestingly, this happened on the 1st switch(string) block, but not on the 2nd switch(string) block in the same file (different method).\n. ",
    "tomspilman": "Note for now we've worked around this by setting DecompilerSettings.MakeAssignmentExpressions to false...  but this makes the code much more verbose.\nIdeally MakeAssignmentExpressions would detect the case where the assigned types are not the same and avoid the shortcut.\n. @siegfriedpammer - Here is an old Mono mscorlib.dll that has the offending StreamWriter.WriteLineAsync() implementation.\nhttps://app.box.com/s/x19qsezqiybxtzokwy7dv3agd74c8qeg\nThat said we're looking to stop using ILSpy all together.  Primarily this is because ILSpy is not super fast and it is the main bottleneck for us as we're decompiling 1000s of classes.  Second it is because of errors like this which make ILSpy decompiled code sometimes fail in weird ways.  We already have a handful of hacks to correct errors that come from ILSpy.\nIn the end the generated code is not always super readable anyway, so dealing with more gotos and lack of nice loops and stuff is ok.. > What exactly are you using ILSpy for?\nWe use it in a transpiler converting C# assemblies into C++ code to run C# games on game consoles.  The ILSpy decompiler was used to generate nicer C++ code and give us nicer high level blocks to work with.\nThe generation of the code can take anywhere from 2 minutes to 30 seconds depending on the complexity of the C# executable we're converting.  In general pretty fast, but over 50% of that time is tied up in the decompiler step.  We're already doing all the obvious things to get more performance... fully threaded, spidering thru only the code that is used, only writing code that changed, etc.\nSimply removing the decompiler and working with raw IL will give us a huge performance boost in code generation.\n\nHave you tried the new decompiler?\n\nI haven't mostly because i am so busy with other work.  \nStill i also dread the change... every time i have updated the decompiler in the past something is fixed and something new is broken.  Most often the broken code compiles... but generates bad results... causing bugs you cannot find until you test every inch of your game.\nSo i basically stopped updating a year or two ago for that reason as it seemed better to stick to the devil you know.\n. > Or did you use our intermediate representation (ILAst)?\nYes I am using ILAst.  Reminds me that some of the issues i ran into were problems where ILSpy did fixups in the C# code printing side of things that i would have expected in the ILAst like some non-trival casts.\n\nyou can disable most of the decompiler transforms \n\nYeah that is how i got things working to the level i have so far.  Still some things it does just don't work and i have to hack around it.. @LordJZ - I'm new to the ILSpy code base, but I suspect the primary issue with most of the pointer math is based on ILCode.Ldflda and ILCode.Ldsflda in TypeAnalysis.DoInferTypeForExpression:\nhttps://github.com/icsharpcode/ILSpy/blob/master/ICSharpCode.Decompiler/ILAst/TypeAnalysis.cs#L368\nThose are currently returning a ByReferenceType which I think is incorrect.  I'm seeing better results with returning PointerType in both cases.\n. @LordJZ - Don't worry... that isn't the right fix... but it lead me to understand the problem better.\nStill maybe you can tell me if i'm heading in the right direction here.\nFirst fact is that all pointer math in IL assumes byte*s.  So looking at the PointerArithmatic2 test IL:\nIL_0001: ldarg.1\n    IL_0002: ldarg.2\n    IL_0003: ldarg.3\n    IL_0004: mul\n    IL_0005: conv.i\n    IL_0006: ldc.i4.2\n    IL_0007: mul\n    IL_0008: add\nThis is essentially this...\nbytePtr + ((X * Y) * Z)\nWhat the decompiler needs to do is find cases where it can change the pointer size to remove the extra multiply on the right side of the add.\nSo if we have this:\nbytePtr + ((4) * 2)\nWe can simplify to this:\nshortPtr + 4\nI have this working for the specific case for PointerArithmatic2 and I now get:\nreturn (byte*)((short*)p + y * x);\nWhich matches the original code.\nI plan to submit a PR later today.\n. I see now that I did this wrong... will close and submit a corrected PR.\n. ",
    "CoreyKaylor": "This would be nice to have for omnisharp to provide enhanced \"go to definition\" type functionality.\n. That's unfortunate.\n. ",
    "ikkentim": "Same here\n. ",
    "Bobisback": "Ya i have this issue as well, would be awesome to get this support with it as figuring our the generated code is a pain in the butt.\n. ",
    "Dentrax": "Still an issue, please fix it. (: In fact, it would be very good if it did a translation close to its original form. Maybe, It will even be a first awesome ienumarator decompiler. ^^ Thank you <3\n. Yes, folding system not working currently. I want all of them open at the beginning. :). @siegfriedpammer Could you give some information about this status, please ? :)\nNote: ILCode, UnityEngine Mono. What is the Class that controls these clickthrough events? Maybe I'm trying to do something myself with the educational purpose. Thanks... @siegfriedpammer . I analyzed the YieldReturnDecompiler.cs class. I don't understand anything except the class name. :) It's too long and complicated which is what it must be. In ILSpy 2, could be clicked because it was decompile in a different way, i think. @siegfriedpammer \nP.S: The \"EventManager\" class given in the picture, full Gereric (T) and Action consists of the structure. There is no any IEnumerator structure.. Sorry, I just saw now your comment. @siegfriedpammer \nExample.cs : https://pastebin.com/MgX2gVrj\nExample.il  : https://pastebin.com/3uqZB2Aw\nI can't click the \"this.OnRunStarted\" method from the \"EventManager.Instance.RegisterHandler((Action)this.OnRunStarted);\" here.. Bump :). Thanks for your interest! \ud83e\udd47 \nI have just created a simple Unity-Mono project that have example Test case. There are 2 non-clickable functions. The first is the event call-back functions, the second is the IEnumerator references.\nAlso I've discovered a new error-bug. (?) Called with \"Unable to find new state assignment for yield return\".\nCompiled assembly file: http://www.mediafire.com/file/ggru11bozxjo3i3/Issue1025.dll\nSource file: http://www.mediafire.com/file/eua6eqlromnoblc/Issue1025_src.rar\nImage:\n\nThanks... @siegfriedpammer \n. I don't know, but the output of Protection ID tool ;\n```\nFile Type : 32-Bit Dll (Subsystem : Win CUI / 3), Size : 3386368 (033AC00h) Byte(s) | Machine: 0x14C (I386)\nCompilation TimeStamp : 0x57B4A466 -> Wed 17th Aug 2016 17:52:38 (GMT)\n[TimeStamp] 0x57B4A466 -> Wed 17th Aug 2016 17:52:38 (GMT) | PE Header | - | Offset: 0x00000088 | VA: 0x00400088 | -\n[File Heuristics] -> Flag #1 : 00000000000001001100000000110000 (0x0004C030)\n[Entrypoint Section Entropy] : 5.80 (section #0) \".text   \" | Size : 0x33A3C0 (3384256) byte(s)\n[DllCharacteristics] -> Flag : (0x0000) -> NONE\n[SectionCount] 3 (0x3) | ImageSize 0x342000 (3416064) byte(s)\n[VersionInfo] Product Version : 0.0.0.0\n[VersionInfo] File Version : 0.0.0.0\n[VersionInfo] Original FileName : Assembly-CSharp.dll\n[VersionInfo] Internal Name : Assembly-CSharp.dll\n[ModuleReport] [IAT] Modules -> mscoree.dll\n[.] .net @ FileOffset 0x13A644 | MetaData->Version 1.1 (struct version) -> v2.0.50727 (net version required)\n[.] Flags : 0x0 | Streams : 0x5 (5)  -> #~ | #Strings | #US | #Blob | #GUID\n[!] [.net scan core] dotNetReactor detected!\n[COR20] MajorRuntimeVersion 0x2 (2) | MinorRuntimeVersion 0x2 (2) -> 0x2.2 (2.2)\n[COR20] Flags 0x1\n[COR20 Flags] [x] IL_ONLY [ ] 32BITREQUIRED [ ] IL_LIBRARY\n[COR20 Flags] [ ] STRONGNAME [ ] NATIVE_EP [ ] TRACKDEBUGDATA\n[COR20 Flags] [ ] 32BITPREFERRED | 0x0 UNKNOWN\n[COR20 Flags] Assembly is NOT strong name signed\n[CdKeySerial] found \"TestVersion\" @ VA: 0x002C5A30 / Offset: 0x002C3C30\n[CdKeySerial] found \"TestVersion\" @ VA: 0x002C5AB9 / Offset: 0x002C3CB9\n[CdKeySerial] found \"TestVersion\" @ VA: 0x002C5ACB / Offset: 0x002C3CCB\n[CdKeySerial] found \"TestVersion\" @ VA: 0x002C5BE2 / Offset: 0x002C3DE2\n[CdKeySerial] found \"TestVersion\" @ VA: 0x002EB387 / Offset: 0x002E9587\n- Scan Took : 1.640 Second(s) [000000550h (1360) tick(s)] [246 of 580 scan(s) done]\nDIE :\nLibrary : .NET(v2.0.50727)[-]\nLinker : Microsoft Linker(6.0)[DLL32,console]\n```\n@siegfriedpammer . It was not in the previous ILSpy version. Possibility to be fix in the next release? @siegfriedpammer . Is there a chance that this problem is fixed? Because this problem is everywhere.\nI just uploaded a sample of this problem:\n.cs file: https://pastebin.com/QEyr5Nvh\n.il  file: https://pastebin.com/F5X4XMGX\nThanks...\n@siegfriedpammer . It might be really fine to give support for mono/mcs. :). @siegfriedpammer \nI can't figure out why there is an base.<gotInternet>__0 variable instead of gotInternet. Why is decompiler doing it this way? Is there a conflict situation? Like:\nFor Conflict-1: base.<gotInternet>__0\nFor Conflict-2: base.<gotInternet>__1\nFor Conflict-3: base.<gotInternet>__2\n... etc.. @MaxAkbar I know that trick, but it's not always useful. It was very useful in pop-up way.. Would you add this feature to the next-new version? Otherwise it's hard find on the TreeView panel. -,- @siegfriedpammer . The ILCode of the given HasCompletedLevel void: https://paste.ee/p/p4yKD. I guess it can't find the necessary reference. I don't know why. dnSpy finds references in the same directory, but ILSpy not. (even i ran in admin-privileges)\nYou can download compiled Unity's Managed folder here: http://www.mediafire.com/file/0xqcsg11k4q4deb/Issue1104.rar\nAssembly-CSharp.dll / HeyzapTest.cs // InitHeyzap(). > It seems though, you provided a different assembly than used in the example above, because the first line is completely different...\nI didn't use another Assembly file. It was completely original. :) Here;\n\nUnrelated to this issue;\nI also can't get successfull build from ILSpy project. I did a lot of research, but it didn't work out. It says me \"ILSpy debug profile doesn't exist.\" But I don't figure out why, it looks fine;\n\nMy Rebuild Output:\n1>------ Rebuild All started: Project: ICSharpCode.TreeView, Configuration: Debug Any CPU ------\n2>------ Rebuild All started: Project: ICSharpCode.Decompiler, Configuration: Debug Any CPU ------\n3>------ Rebuild All started: Project: Mono.Cecil, Configuration: net_4_0_Debug Any CPU ------\n3>  Mono.Cecil -> C:\\Users\\Furkan\\Documents\\GitHub Projects\\ILSpy\\cecil\\bin\\net_4_0_Debug\\Mono.Cecil.dll\n4>------ Rebuild All started: Project: Mono.Cecil.Pdb, Configuration: net_4_0_Debug Any CPU ------\n4>  Mono.Cecil.Pdb -> C:\\Users\\Furkan\\Documents\\GitHub Projects\\ILSpy\\cecil\\bin\\net_4_0_Debug\\Mono.Cecil.Pdb.dll\n1>ICSharpCode.TreeView -> C:\\Users\\Furkan\\Documents\\GitHub Projects\\ILSpy\\SharpTreeView\\bin\\Debug\\net46\\ICSharpCode.TreeView.dll\n2>ILSpyUpdateAssemblyInfo1487548582\n2>ILSpyUpdateAssemblyInfo1487548582\n2>ILSpyUpdateAssemblyInfo1487548582\n2>True\n2>0\n2>True\n2>0\n2>ICSharpCode.Decompiler -> C:\\Users\\Furkan\\Documents\\GitHub Projects\\ILSpy\\ICSharpCode.Decompiler\\bin\\Debug\\net46\\ICSharpCode.Decompiler.dll\n2>ICSharpCode.Decompiler -> C:\\Users\\Furkan\\Documents\\GitHub Projects\\ILSpy\\ICSharpCode.Decompiler\\bin\\Debug\\net45\\ICSharpCode.Decompiler.dll\n2>ICSharpCode.Decompiler -> C:\\Users\\Furkan\\Documents\\GitHub Projects\\ILSpy\\ICSharpCode.Decompiler\\bin\\Debug\\netstandard2.0\\ICSharpCode.Decompiler.dll\n2>Successfully created package 'C:\\Users\\Furkan\\Documents\\GitHub Projects\\ILSpy\\ICSharpCode.Decompiler\\bin\\Debug\\ICSharpCode.Decompiler.3.1.0.3637-beta2-debug.nupkg'.\n5>------ Rebuild All started: Project: ILSpy, Configuration: Debug Any CPU ------\n6>------ Rebuild All started: Project: ICSharpCode.Decompiler.Tests, Configuration: Debug Any CPU ------\n6>TestCases\\Correctness\\Async.cs(256,23,256,25): warning CS0168: The variable 'ex' is declared but never used\n6>ICSharpCode.Decompiler.Tests -> C:\\Users\\Furkan\\Documents\\GitHub Projects\\ILSpy\\ICSharpCode.Decompiler.Tests\\bin\\Debug\\net46\\ICSharpCode.Decompiler.Tests.exe\n6>Done building project \"ICSharpCode.Decompiler.Tests.csproj\".\n5>ILSpy -> C:\\Users\\Furkan\\Documents\\GitHub Projects\\ILSpy\\ILSpy\\bin\\Debug\\net46\\ILSpy.exe\n7>------ Rebuild All started: Project: ILSpy.BamlDecompiler, Configuration: Debug Any CPU ------\n8>------ Rebuild All started: Project: TestPlugin, Configuration: Debug Any CPU ------\n8>TestPlugin -> C:\\Users\\Furkan\\Documents\\GitHub Projects\\ILSpy\\TestPlugin\\bin\\Debug\\net461\\Test.Plugin.dll\n7>ILSpy.BamlDecompiler -> C:\\Users\\Furkan\\Documents\\GitHub Projects\\ILSpy\\ILSpy\\bin\\Debug\\net46\\ILSpy.BamlDecompiler.Plugin.dll\n9>------ Rebuild All started: Project: ILSpy.BamlDecompiler.Tests, Configuration: Debug Any CPU ------\n10>------ Rebuild All started: Project: ILSpy.AddIn, Configuration: Debug Any CPU ------\n10>C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Microsoft.Common.CurrentVersion.targets(2041,5): warning MSB3277: Found conflicts between different versions of \"Microsoft.VisualStudio.Utilities\" that could not be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed.\n10>C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Microsoft.Common.CurrentVersion.targets(2041,5): warning MSB3277: Found conflicts between different versions of \"Microsoft.VisualStudio.Imaging\" that could not be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed.\n10>C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Microsoft.Common.CurrentVersion.targets(2041,5): warning MSB3277: Found conflicts between different versions of \"Microsoft.VisualStudio.Threading\" that could not be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed.\n10>ILSpy.AddIn -> C:\\Users\\Furkan\\Documents\\GitHub Projects\\ILSpy\\ILSpy.AddIn\\bin\\Debug\\net46\\ILSpy.AddIn.dll\n10>Done building project \"ILSpy.AddIn.csproj\".\n9>ILSpy.BamlDecompiler.Tests -> C:\\Users\\Furkan\\Documents\\GitHub Projects\\ILSpy\\ILSpy.BamlDecompiler.Tests\\bin\\Debug\\net46\\ILSpy.BamlDecompiler.Tests.dll\n========== Rebuild All: 10 succeeded, 0 failed, 0 skipped ==========. I tested the lastest build, but unfortunately it can't find the references. Also, LdFtn error still there. :(\nVS Version:\nMicrosoft Visual Studio Enterprise 2017 \nVersion 15.5.5\nVisualStudio.15.Release/15.5.5+27130.2026\nMicrosoft .NET Framework\nVersion 4.7.02556. My debug panel settings are exactly the same as yours. :(\nUnfortunately, this is the first time I've ever seen. I think it's probably trying to decompile even when it can't find the references. I don't know, if I encounter with LdFtn again, I'll share. :) Thanks for your interest!. Visual Studio Update 15.6.4 fixes my build bug.\nBut this bug is still in the final release ILSpy version 3.1.0.3645-rc. Although the all references are in the same directory, ILSpy cannot find them. . I've compiled it bug-free. But I don't know what is fixed this issue. :( But I'm sure the problem isn't about the VS or ILSpy version. Thanks for your interest! :) Sure, can be closed. \ud83d\udc4d \nEdit: I thought it was a problem about compile. So, I'll test the \"OpCode not supported\" bug. How can i get the lastest master build?. It looks like it hasn't fixed yet. I think this bug is important for mono. You should check HeyzapTest.cs's InitHeyzap() function. How it decompiles properly in you?. \nIs there something wrong? Why doesn't it work properly with me?. Here is mine: (with Admin privileges)\n```\n// Detected Target-Framework-Id: \n// Referenced assemblies (in metadata order):\n// UnityEngine.CoreModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n    // Assembly reference loading information:\n    // Info: Success - Loading from: D:\\Unity3D\\TrapDungeons2 1.61\\UnityEngine.CoreModule.dll\n// UnityEngine.AnimationModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n    // Assembly reference loading information:\n    // Info: Success - Loading from: D:\\Unity3D\\TrapDungeons2 1.61\\UnityEngine.AnimationModule.dll\n// UnityEngine.Physics2DModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n    // Assembly reference loading information:\n    // Info: Success - Loading from: D:\\Unity3D\\TrapDungeons2 1.61\\UnityEngine.Physics2DModule.dll\n// mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\n    // Assembly reference loading information:\n    // Info: Success - Loading from: D:\\Unity3D\\TrapDungeons2 1.61\\mscorlib.dll\n// UnityEngine.UI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\n    // Assembly reference loading information:\n    // Info: Success - Loading from: D:\\Unity3D\\TrapDungeons2 1.61\\UnityEngine.UI.dll\n// UnityEngine.TextRenderingModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n    // Assembly reference loading information:\n    // Info: Success - Loading from: D:\\Unity3D\\TrapDungeons2 1.61\\UnityEngine.TextRenderingModule.dll\n// UnityEngine.Purchasing, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n    // Assembly reference loading information:\n    // Info: Success - Loading from: D:\\Unity3D\\TrapDungeons2 1.61\\UnityEngine.Purchasing.dll\n// UnityEngine.AudioModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n    // Assembly reference loading information:\n    // Info: Success - Loading from: D:\\Unity3D\\TrapDungeons2 1.61\\UnityEngine.AudioModule.dll\n// UnityEngine.UIModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n    // Assembly reference loading information:\n    // Info: Success - Loading from: D:\\Unity3D\\TrapDungeons2 1.61\\UnityEngine.UIModule.dll\n// UnityEngine.IMGUIModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n    // Assembly reference loading information:\n    // Info: Success - Loading from: D:\\Unity3D\\TrapDungeons2 1.61\\UnityEngine.IMGUIModule.dll\n// Assembly-CSharp-firstpass, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n    // Assembly reference loading information:\n    // Info: Success - Found in Assembly List\n// UnityEngine.ImageConversionModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n    // Assembly reference loading information:\n    // Info: Success - Loading from: D:\\Unity3D\\TrapDungeons2 1.61\\UnityEngine.ImageConversionModule.dll\n// Stores, Version=1.0.6633.150, Culture=neutral, PublicKeyToken=null\n    // Assembly reference loading information:\n    // Info: Success - Loading from: D:\\Unity3D\\TrapDungeons2 1.61\\Stores.dll\n// UnityEngine.UnityAnalyticsModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n    // Assembly reference loading information:\n    // Info: Success - Loading from: D:\\Unity3D\\TrapDungeons2 1.61\\UnityEngine.UnityAnalyticsModule.dll\n``\n. Oh, thank you so much! You're right. I'd removed all assembly libraries calledAssembly-CSharp-firstpass.dll` And decompilation finished successfully. (except gotos, i guess that different mono stuff) \nCan we do a solution for this bug?\nIf we have more than one assembly file need to load (like Assembly-CSharp-firstpass.dll example), The assembly file that should be loaded even if it is there (assembly list), load it in the directory if it exists. If they all fail, ILSpy should load them all one at a time from assembly list and see if it's right. If it's not true, load the other, keep going like this... \nCan it be done like this?. If it wasn't too technical, I knew what you said. :) Thank you so much for your help. Also I hope the goto bug is solved soon.\n-Closed. The only thing I want to do is search for \"Strings.\" Should be scan all string expressions that have been made hardcoded. For example:\nExample string in Attribute = [TestAttribute(\"Test Me 123\")]\nExample string in Const = public const string Test = \"Test Me 345\";\nExample string in Format = string.Format(\"Test Me {0}\", the345Data);\nWhen I search value  \"Test Me\" as String, search engine should list these three values. From all loaded assembly files. :) I think that's cool feature. I didn't see this feature. Only if we do CTRL+F in the showing source file.. Thank you so much! I'll try to do something for learning purpose. Also, you could add this feature. :). ",
    "LordJZ": "Succeeded by #587\n. @tomspilman interesting, thanks. I will try to poke around that when I have time.\n. Any attribute actually.\n. We have it though:\n\n. For me, this code:\npublic long Issue645(long v)\n{\n    return v / 65536;\n}\nDecompiles into this:\npublic long Issue645(long v)\n{\n    return v / 65536L;\n}\nWhich looks correct.\n. Still, that's what I get:\nret(div:int64(ldloc:int64(v), ldc.i8:int64(65536)))\nNo float64 in intermediate steps as well.\n. ",
    "MRYingLEE": "Thank you for your prompt reply.\nI personally can read the code, but the VS doesn't realize it. When I tried to compile and then to trace into the generated code, the compiler stopped me.\nSo please add type with namespace as an decompiler option.\n. ",
    "lvv83": "Already posted here https://github.com/icsharpcode/ILSpy/issues/578\nUpvote!\n. ",
    "SilverNexus": "Based on what I can tell, both pieces of code do the same thing. The decompiled code seems to give a better picture of what the backend result of the original code looks like.\nThe decompiled code follows these steps:\n1. Take a reference of dictionary1 and store it locally in Method().\n2. Make a local copy of ushort1.\n3. Increment ushort1, but not the local copy.\n4. Add the local copy of ushort1's old value and ushort12 (2?) to the reference of dictionary1.\nMeanwhile, the original code worked like this:\n1. Make a local copy of ushort1.\n2. Increment ushort1.\n3. Add the local copy of ushort1 and ushort2 to dictionary1.\nOther than the lack of declared ushort1 and ushort12 in the decompiled version, the code does the exact same thing. Unless the decompiler forgot ushort1 and ushort2 in its decompilation (and it isn't an oversight of code snippet collection), there does not appear to be anything wrong with the decompiled code.\n. I think the issue is more than just return values. Any assignment to a smaller-than-32-bit integer that involves a mathematical operation in the assignment is affected.\nWhen using VS2013 (at minimum, haven't tested other versions), mathematical operations (+, -, /, *, maybe more) between two 16- or 8-bit integers (byte, sbyte, short, or ushort) create a 32-bit integer result.\nWith C#'s strict typecasting system, it becomes a royal pain to go back and manually cast variables in a large project.\n. ",
    "gnemoug": "@dgrunwald ,\nIt should be a property like \nprivate void InitializeUI()\n        {\n            this.OnOffBattery.Source = this.batteryOffImage;\n            this.OnOffImage.Source = this.offImage;\n            this.SosImage.Source = this.sosOffImage;\n            this.BtnMenu.Source = this.MenuOffImage;\n            this.lastOrientation = base.Orientation;\n        }\nbut  the decompile result is like this\nprivate void InitializeUI()\n        {\n            this.OnOffBattery.set_Source(this.batteryOffImage);\n            this.OnOffImage.set_Source(this.offImage);\n            this.SosImage.set_Source(this.sosOffImage);\n            this.BtnMenu.set_Source(this.MenuOffImage);\n            this.lastOrientation = base.get_Orientation();\n        }\n. ",
    "ssimek": "It is especially visible running inside a VM, at least with VMWare Fusion - without ILSpy, the vmware-vmx (host) process idles at around 10%, with ILSpy running it rarely goes under 80% (note that on OS X 100% means one core, not the entire CPU running at full load). This is on an i7-4870HQ (MBP 15\" Mid 2014)\n. ILSpy version 2.3.1.1855 (should be the latest)\nIt happens even with the assembly list completely empty, immediately after launching. Please note that the process on the windows side uses only around 2% (I have four cores assigned, so it corresponds to roughly 10% of one CPU). However, I believe there is some background process that wakes the CPU very often for extremely short periods, which causes it to consume disproportionately more CPU power as it appears on the VM host side.\n. None at all.\nHowever, I've tried attaching a profiler to the process and it seems to be WPF related - the entire call tree is WPF-internal pumping of messages. Looking through Spy++, there are hundreds of \"MilChannelNotify\" and \"DispatcherProcessQueue\" messages processed per second. Have you ever seen such a problem?\n. I've ran it from the command line with COMPLUS_ZapDisable=1 to avoid using NGen-ed native images (prevents successful symbol loading), then attach VS2015 profiler (Debug > Profiler > Performance Explorer > Attach/Detach...)\n. Wow guys, that was quick! Thanks a lot!\nAs for the WPF Performance Suite - I've tried to get ahold of it for quite some time today but couldn't find any other way than installing the Windows 7 SDK which unfortunately installs only on W7 and I don't have a W7 VM handy. I there a direct download or something? Sorry if this is way off-topic.\n. ",
    "MarekPokornyOva": "Maybe you would like to try:\nhttps://marketplace.visualstudio.com/items?itemName=MarekPokornyOVA.GoToILSpyforVS2015\nhttps://gotoilspy.codeplex.com/\n. Hi Siegfried,\nI'd be honored if you include the extension into your official code/package. But please understand, this version is first beta and there're still places to be improved.\nIf you don't mind about these non-final points, feel free and include the extension.\nAlso, don't hesitate to contact me if you find some topic to discuss.\n  ----- Original Message ----- \n  From: Siegfried Pammer \n  To: icsharpcode/ILSpy \n  Cc: MarekPokornyOva ; Mention \n  Sent: Sunday, January 15, 2017 2:46 PM\n  Subject: Re: [icsharpcode/ILSpy] Browse to type in Visual Studio (#599)\n@MarekPokornyOva you are aware of the ILSpy extension provided by ILSpy? Would you mind sharing/integrating your code into the official VS Extension?\n\u2014\n  You are receiving this because you were mentioned.\n  Reply to this email directly, view it on GitHub, or mute the thread.\n. Siegfried,\nI allow/grant you to copy/merge/use/whatever any piece or all the content of GoToILSpy extension and include/build-in it to your ILSpy tool/extension.\nI'll (but maybe I won't) decide if to remove the separated GoToILSpy extension distribution pack/pages.. Maybe you would like to try http://pdbrestorer.codeplex.com/ until ILSpy guys develop the requested feature. It's built on top of ILSpy's older version but can be modified to use the latest one.. ",
    "exyi": "Btw I just found a Roslyn interface that generates source from metadata http://source.roslyn.io/#Microsoft.CodeAnalysis.Features/MetadataAsSource/IMetadataAsSourceService.cs,ee8ba724e4557ada , it would be cool to have a ILSpy powered implementation. I can look at it if you also think that it's good idea.. Maybe you have not loaded the assembly where are these properties defined.\n. @greenozon: How to fix ILSpy? Install telerik's decompiler :D\n. Sorry, I have probably messed it up with my experiments.\n. I have made finally this PR clean and working. Sorry for the mess I have commited and sorry that it took so long to remove, I have completely forgotten that I have a PR here.\nI have implemented removing the cached delegate and better removal of DisplayClass.\nI also included debug display of ILNode which is not separated by line end and made ToString() line separated. I like it this way more, maybe you'd like too.\n. It basically tries to remove patterns for caching the delegate instance introduced by Roslyn:\nC#\nFunc<SyntaxNode, bool> arg_27_1;\nif ((arg_27_1 = THISCLASS.<>c.<>9__33_0) == null)\n{\n    arg_27_1 = (THISCLASS.<>c.<>9__33_0 = new Func<SyntaxNode, bool>(THISCLASS.<>c.<>9.<Visit>b__33_0));\n}\nIEnumerable<SyntaxNode> ancestorsOrThis = node.GetAncestorsOrThis(arg_27_1);\nAnd sometimes ILSpy could not decompile more complicated display classes (display class in another display class), so this should be fixed.\nBy the way, what is new in the newdecompiler? Will it support C# 6 features, like ?. operator? :) I have tried to checkout it, just out of curiosity, but it does not seem to work very well currently and I have not found any changelog what will be better.\n. @dgrunwald Thank you for clarification. The tests are already present in DelegateConstruction.cs, they were only ignored. I have not fixed them all, since the errors are probably caused by another bug, but the decompiled code is now readable.\nJust one thing surprises me, in tests, the last method decompiles correctly:\nC#\npublic static int BitCompicatedLinqExpression(int a, int b, int c, int d, IEnumerable<int> integers)\n{\n    return DelegateConstruction.Bar<int>((int f) => DelegateConstruction.Bar<int>((int i) => i + f - d + integers.Sum((int ii) => ii + b + f)).First((int iDontHaveClueWhatWillThisDo) => iDontHaveClueWhatWillThisDo % c == a)).First<int>();\n}\nbut when I open ILSpy and look at it:\nC#\n    public static int BitCompicatedLinqExpression(int a, int b, int c, int d, IEnumerable<int> integers)\n    {\n        return DelegateConstruction.Bar<int>(delegate(int f)\n        {\n            IEnumerable<int> arg_44_0 = DelegateConstruction.Bar<int>(delegate(int i)\n            {\n                int arg_43_0 = i + f - d;\n                IEnumerable<int> arg_3E_0 = integers;\n                return arg_43_0 + arg_3E_0.Sum((int ii) => ii + b + f);\n            });\n            return arg_44_0.First((int iDontHaveClueWhatWillThisDo) => iDontHaveClueWhatWillThisDo % c == a);\n        }).First<int>();\n    }\nDo you have any clue why it could behaves differently?\n. It considers the type evident if it is assigned from local variable. It is documented at line 57, UseVarKeywordTransform.cs\nBtw: I have just fixed that it did not mind using var if the initializer was null or anon method\n. I personally like to use var everywhere when coding because it is easier to write and the code is more flexible.\nIn ILSpy none of these is a goal, I just want to make code more readable so I have added an limit that only type names longer that 6 chars can be replaced by var. In my opinion the type information is not so important to understand the code and when the type names are long and often repeating it generated more noise that information for me.\nI can of course easily make another level of \"aggresivity\", but ... do you have name for it? :)\n. I also needed this feature, so I have coded it :). Have a look at my fork https://github.com/exyi/ilspy at master. It makes the parts of textview where the variables are editable. But it is probably a bit unstable, so I have not made a PR.\n. I guess that the problem is that:\n1. It gets decompiled into <a>k__BackingField = a by https://github.com/icsharpcode/ILSpy/blob/master/ICSharpCode.Decompiler/CSharp/ExpressionBuilder.cs#L201. It checks if the field name collides with some local variable, but it does not find any and decides that this is not required. (That's why it works correctly with fields)\n2. Then, PatternStatementTransform finds this backing field reference and replaces it by the property reference, without checking the local variables.\n. Thank you! Now it works correctly :). ",
    "Lordron": "https://github.com/icsharpcode/ILSpy/pull/626\n. ",
    "ADCJustinH": "No, I can\u2019t claim any great familiarity with the code base. I was just trying to fix this for my use case: I double click on an assembly and it opens ilspy but since an older version of that assembly was previously loaded it just shows me that version instead of the one I double clicked on. There is probably a better way to solve this problem.\n~Justin\nFrom: Daniel Grunwald [mailto:notifications@github.com]\nSent: Sunday, June 7, 2015 9:12 AM\nTo: icsharpcode/ILSpy\nCc: Justin Helsley\nSubject: Re: [ILSpy] Update AssemblyList.cs (#601)\nOpenAssembly is called in a lot of places, are you sure all of those should re-load the assembly?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/icsharpcode/ILSpy/pull/601#issuecomment-109763988.\n. ",
    "junderhill": "@DumboJet  Are you refering to the public key token or the entire public key? If it's just the token it is displayed when hovering over an assembly. See here..\n\nIf it is the entire key you are refering to I can't see it being difficult to make available..\n. OK, I'll have a look at this\n. Something like this perhaps?\n\n. That's the other thing I was thinking of. It verifies correctly so I'm happy it is displaying the correct data but the ability to copy would definitely be useful. Leave it with me. \n. Ok I've implemented this on the right click context menu for assemblys as follows:\n\n. @dgrunwald yeh that makes sense. I don't know ILSpy too well so didn't know the IL disassembly already does this. I'll look at adding it to the C# view.\n. ",
    "DumboJet": "I mean the entire public key.\nIt would be handy to have, I think. :)\n. Yes, that seems the correct info.\nThis can be verified with SN.exe, if I am not mistaken:\nsn \u2013T myDLL.dll\nIf there was a way to copy it too, it might be even more cooler. :)\n(If I am not asking too much, that is...)\n. Cool ! :)\nThanks a lot ! :)\n. ",
    "mikofski": "the attributes are shown correctly in the view for each enumeration member\n\nit's just in the generated code for the enumeration where the attributes are missing\n\n. ",
    "ohadschn": "In addition to the possibility of an \"Open with ILSpy\" context menu, there are two more primary benefits:\n1. Personally I like having all installed apps managed via the add/remove programs and not in some util folder I unzip stuff into. It's also better for multi-user environments.\n2. More importantly, Cortana only finds installed apps. This means that in Windows 10, you won't be able to find it if you type ILSpy into the start menu search (even if you have a shortcut on the desktop that's pinned to the Start menu).\n. ",
    "fenugrec": "I would add, on this topic, that it would be nice to have an option (maybe Options->Display ?) to select hex or decimal format for numbers in the decompiled views !\n. ",
    "Chicken-Bones": "I'm guessing the reason it takes so long is that the program runs out of RAM and the system starts swapping it to disk.\nA heap dump at 3GB yields the following\nhttp://puu.sh/j9WA0/c58fb0739b.png\nhttp://puu.sh/j9WBv/14e9bbf5fc.png\nI haven't yet looked at the ILSpy source to determine if there's an obvious way to optimise this, but it would appear that there are a large number of copies of the variables sitting in VariablesBefore fields.\n. I can rebase the branch on my fork, and force push it, but I don't know how to change the target branch of the PR. Would I just have to submit a new one?. I notice the assembly name and a couple of the comments in the il have changed. I assume that's just because these tests haven't been regenerated in a while?. My initial plan for a fix would be either extending PrettifyAssignments, or adding another AstTransform to look for IdentifierExpression with VariableKind == StackSlot and only one reference, immediately after declaration.\nCan you think of any other cases that introduce temporary variables that could be removed later? That I didn't test. Method parameters or such?\nAlso please advise on the appropriate test location.\nThanks\n. I did notice the ILAst debug steps, nice UI you have there. I also found HandleStObjCompoundAssign\n\"This is necessary, because custom operators are not yet transformed from method calls to operators in the IL Ast. In the ILAst these are represented as method calls.\"\nFrom what I've gleaned, the IAstTransform are for the language dependent constructs, syntax sugars and things that require larger program scope to evaluate such as qualifiers and extension methods.\nAre you suggesting we produce CompoundAssignmentInstruction for overloaded operators. This would require moving ReplaceMethodCallsWithOperators into the ILAst (which I don't see an immediate problem with)\nOtherwise a 'remove temporaries' IAstTransform seems a reasonable option. The tree changes aren't particularly large, though hard to formally validate outside of unit tests.. Thankyou for this, I was going to take a shot at implementing it in similar fashion but had a sudden lack of free time. ~Will this be merged into 3.1.x?~. Further analysis reveals that these expressions always result in a pattern of two successive if statements with the same branch target, which could be merged with logic.or\nExample:\nif (a && b)\n        goto IL_0020;\n    if (c && d)\n        goto IL_0020;\n    Console.WriteLine(2);\n    return;\n    IL_0020:\n    Console.WriteLine(1);\n```\n    BlockContainer {\n        Block IL_0000 (incoming: 1) {\n            if (logic.and(ldfld a(ldloc this), ldfld b(ldloc this))) Block IL_0008 {\n                br IL_0020\n            }\n            if (logic.and(ldfld c(ldloc this), ldfld d(ldloc this))) br IL_0020\n            call WriteLine(ldc.i4 2)\n            leave IL_0000 (nop)\n        }\n    Block IL_0020 (incoming: 2) {\n        call WriteLine(ldc.i4 1)\n        leave IL_0000 (nop)\n    }\n}\n\n```\nI'll test a fix and submit a PR.\nI might also propose some heuristic for when to early return vs inverting the condition and in-lining the else block. merging successive inlined ifs works well, but matching and transformation flow of ConditionDetection will need to be split up and reorganised as too many steps need to be re-run with slightly altered assumptions after the transform. Is there anything I should be aware of when doing this, or just hope the tests cover enough?\nSubquestion: Is there any need to keep single branch blocks when transforming, or can the result of UnpackBlockContainingOnlyBranch be inserted directly as IfInstruction.TrueInst. I had a lot of success adding better pattern matching cases and inversions to the ConditionDetection, however on review it was hard to determine the necessity of when to recheck for or perform certain simplifications or inversions so I'm now looking at a more fundamental approach based on just inlines, inversions and removing redundant gotos. Currently all the commented test cases in Loops.cs succeed, as well as some more complex tests of my own but it's not quite complete. \nAre there any other known, previously marked as \"TODO\" control flow tests?. I'm in the process of organising tests and I'm wondering if there's a way to add \"counter cases\" things which produce a known different output when decompiled. For example, one of the restored test cases\ncs\npublic int InterestingLoop()\n{\n    int num = 0;\n    if (num % 11 == 0) {\n        while (true) {\n            if (num % 4 == 0) {\n                if (num % 7 == 0) {\n                    if (num % 11 == 0) {\n                        // use a continue here to prevent moving the if (i%7) outside the loop\n                        continue;\n                    }\n                    Console.WriteLine(\"7\");\n                } else {\n                    // this block is not part of the natural loop\n                    Console.WriteLine(\"!7\");\n                }\n                break;\n            }\n            num++;\n        }\n        // This instruction is still dominated by the loop header\n        num = -2147483648;//int.MinValue;\n    }\n    return num;\n}\nactually decompiles to\ncs\npublic int InterestingLoop()\n{\n    int num = 0;\n    if (num % 11 == 0)\n    {\n        while (true)\n        {\n            if (num % 4 == 0)\n            {\n                if (num % 7 != 0)\n                {\n                    Console.WriteLine(\"!7\");\n                    break;\n                }\n                if (num % 11 != 0)\n                {\n                    Console.WriteLine(\"7\");\n                    break;\n                }\n            }\n            else\n                num++;\n        }\n        num = -2147483648;\n    }\n    return num;\n}\nWhich is actually quite good to see it successfully removes use of \"continue\" as a priority.\nAnother example would be the switch\ncs\nswitch (I) {\n    case 1:\n    case 4:\n    case 7:\n        Console.WriteLine();\n        break;\n}\ndecompiles to\nif (i == 1 || i == 4 || i == 7)\n    Console.WriteLine();. Additionally, the\ncs\npublic void WhileWithGoto()\n{\n    while (Condition(\"Main Loop\")) {\n        if (Condition(\"Condition\")) {\n            goto IL_000f;\n        }\n        goto IL_0026;\n        IL_000f:\n        Console.WriteLine(\"Block1\");\n        if (Condition(\"Condition2\")) {\n            continue;\n        }\n        goto IL_0026;\n        IL_0026:\n        Console.WriteLine(\"Block2\");\n        goto IL_000f;\n    }\n}\ntest compiles fine, but there's no label matching, it'd be nice if there was a way to specify a given test will only pass exactly with certain compile/debug configurations. Finally, is there a way to specify that a test won't pass on certain compiler combinations? For example, often generated temporaries in non-optimised code make it impossible to perform certain transformations.\nEdit: I was able to change the transformation pipeline slightly so that these tests pass again. That's great to hear. Sorry it took so long, I had to put it on hold for a week and a half as finals hit for uni. \nI'm not sure what your release schedule is, but there's two more pieces coming, related to switch reconstruction, one of which I can have done in 2 days time. \nYou'll notice that part of the new ConditionDetection involves guessing Branch targets which are continue keywords, as those have different ordering priorities. I'll need to do something similar to switch detection, which means separating it from and moving it after LoopDetection. This would produce another BlockTransform phase, and I don't understand the system enough to know the performance or flow impacts yet. What would you suggest?. Thanks for this, switch detection, particularly over-aggressive UseILSwitch will be addressed in my next PR[s]. Awaiting further feedback before adding a fixup commit. Any idea when siegfriedpammer will be back?. Good analysis. I wasn't able to achieve a provably correct or satisfactorily general approach here like I was with ConditionDetection, but I'm convinced such isn't possible with the current architecture, as you've mentioned. Particularly the fact that switch statements are often optimised to condition trees meant I had to build prediction heuristics. This implementation still provides great improvement in the vast majority of cases. \nProper detection would rely on two things.\n1. outer loops being constructed first (currently inner loops and switches must be constructed first due to some ambiguity in loop contents but there may be another way around this)\n2. high level loop transforms (and any pre-requisite transforms) being performed on the outer loop before anything that depends on continue statements (condition/switch detection). In general, I support said changing of pass order. The only issue I ran into when I attempted it was related to loops (and switch containers) being constructed inner first https://github.com/icsharpcode/ILSpy/issues/915 Part of the switch body would end up outside the loop, and have to be poached from the parent container into the child. I didn't go any further with this because control flow graphs are restricted to container context, and I got quite good results with the current approach.\n. That'd be awesome, if only I didn't live in Australia, and wasn't going on holidays at the time. I'd be interested in reading a summary of the meeting, and donating further contributions in the future.. A transform would be better, I'll leave that one for you. I originally had it return null, but the code looked ugly in comparison, and wasn't necessary inside HighLevelLoopTransform because of preconditions. Avoiding exceptions as part of normal control flow is a design principle I'm aware of, so I'll favour that.. Good point, works out for us here.. correct, clearer code first, optimisations if obvious or profiling hotspot, generally not that many exits (especially since it's only looking for exits which could be moved to the block root via inversions. . Roslyn always uses unsigned casts with the sub, but I did just miss AddOffset. Should be changed to Avoids returning continue statement target nodes (increment blocks). \"heads of all loops containing contextNode\" is the goal yes, so that continues (and their depth) can be identified.\nI believe the example you've given will find loops which dominate the switch but don't contain it. My approach also ensures there's a back edge to the loop head from the switch's successor tree.. The key is that if there's no back edge, then there's no continue statement, so you'll never encounter the false negative anyway.. ",
    "plyoung": "Get this same error. The source files are created but the UnityEngine.csproj file is empty (0 bytes).  I assume that is because of the mentioned error. This was for the UnityEngine.dll in Unity 5.3 x64.\n. ",
    "AustinWise": "Oh, I did not notice that. Thanks!\n. Ok, I will try to fix the underlying error in Cecil instead.\n. Understood. In that case it might be more worth while to update to a version that include PortablePDB support, so the testing can just be done once. I'll close this and fix the issue in IlSpy directly with a different pull request.\n. @siegfriedpammer No problem, thanks for helping me to get to this minimally invasive solution.\n. While there might not be any obfuscation, this assembly was not compiled from C#. It was generated by the sgen.exe tool. The code patterns generated by that tool don't match those used by csc.exe, which explains why the decompiled code looks strange.. ",
    "heroboy": "Hi\nDecompile anonymouse type is so hard. Actually ilspy doesn't correctly decompile the Unity's anonymouse type. Why not make the anonymouse type name a valid name that can be compiled. Maybe relate to https://github.com/icsharpcode/ILSpy/issues/408\n. ",
    "AlaaAlHallaq": "I wrote this code to work around the fact that none of the current decompilers handles Roslyn code generation correctly,First I wrote to code for dnSpy, but because I'm too familiar to using ILSpy I applied the patch to it, I went to fixed the code generation for (async , await) methods but, It was a bit harder to understand how the code generation is done, in order to reverse it , so I \"let it go\".\nI hope the above solution works fine, and help every one, \nwhen I wrote the code I was not familiar with pull requests, so soon enough I will optimize the code, and make pull requests to the github repo. \n. ",
    "AraHaan": "open source do it yourself?\n. I dont mind about theming however I do admit it would be nice if it can save Managed C++ .Net Assemblies. So that way it be easier on my tons of C# projects on my quest to translate the crap from Japanese to English. Which is a pain in the ass to do as it requires a lot of time. At least the pro to ILSpy is that I do not have to remake the stuff from scratch. However I hate having to find a way to fix the code just to get the stuff to compile. Not only that but I do not have PmdForm.cs because it failed to read it but oddly it did read everything else. I hate having to try to generate that one manually.\n. Ok, well reading back. I should have worded it I dont mind about theming however .... What is wrong with providing a version of the xaml that is dark on it and have a mode switcher that sets the style of the control based on a property (like \"IsDark\")?\nOr better yet why not draw the control to a series of images and then switch the images on it according to the property set on the style.. tbh I perfer 4.6 just to be safe. Also have a idea on this? https://github.com/icsharpcode/ILSpy/issues/713 it happens when a form I think has a lot of controls that it cannot handle it prob for some reason. It might need a look into. @EdHarvey @christophwille Sadly I need that form to not be 0 KB like the one I have or I will not be able to run the program if I get it's dependencies to compile.\n. Do you not forget that users can install 4.5+ on windows XP too I did so before with SP3 Home when I had it on my other laptop (actually I still have it but the display is screwed on it).\n. Yep security wise yes but sadly the last OS that uses a bitmap format theme the newer ones use PNG on their resources and no ini config.\n. Ah ok I can.\nHere it is:\nPMDEditor_0139.zip\nI included all of the files including VMDView so that way you can look at their deps.\n. ah it seems to be that the \"Decompile anonymous methods/lambda\" in Options causes this if enabled.\nEdit: yep it does\n. oh and what is with random get_[varname]() on these assemblies as C# does not like it and does not want to let me compile with those present. and also set_[varname] stuff? It would be nice if that part was optional to disable get_ and set_ being appeneded.\nAlso some events in some of them seems to be off as well. like this file for example does not let me compile 1 of it's dependencies.\nDragLabel.zip\n. opening / closing slashes is used by Operating systems to verify if some directory exists without adding humungous code. I did them in Visual Basic before from the 1998 version. Yes I know it is very old but I dont care.\nI have large hate to the .Net framework because if I want to make something that cant be decompiled easily I would be SOL with it due to Red Gate's .Net Reflector and of course ILSpy.\nNot to mention that petite does not suppport the .Net Framework or even 64-bit compiled assemblies. They do however plan to support it in the future (64-bit not the .Net Framework). >.>\n. not to mention parts with this..ctor cannot compile so I do not know what function it should call. I think the this..ctor stuff is wrong somewhere.\n. You know you can make a Pull Request right?\n. Oh btw @siegfriedpammer is it possible that on the ILSpy VS extension that you can make an code analysis extension that checks c# code for things like:\nbool something = false;\nstring somethingelse = string.Empty;\n// do something that can change the above variable.\nif (something)\n{\n    somethingelse = \"some value\";\n}\nelse\n{\n    somethingelse = \"some other value\";\n}\n\nTo:\nbool something = false;\nstring somethingelse = string.Empty;\n// do something that can change the above variable.\nsomethingelse = something ? \"some value\" : \"some other value\";\n\nWhich I find more readable and a lot eaiser to maintain. Something that even I sometimes struggle to do at times. It would be nice however if ILSpy was to warn on this saying this if it decides that the IL code/ metadata ends up being the above case. I wish the actual compiler had an option for checks like this though to warn on and produce errors when warn as error is enabled. That would ensure everyone gets used to the ways of doing the same thing with far less typing and more readability.\nAlso isnt their a way when loading reflection only assemblies (like the way ILSpy could to get the code that the method accepts the raw symbol file bytes, which is the pdb file through System.IO.ReadAllBytes()? That might be how Mono.Cecil does it.. Ionic.Zip fixes the issue with having to Delete the files before extracting as long as they are not in use. So, I do not have to delete them first.\n. Updatign it a little more now. It was a small movearround of things.\n. I get that when Trying to View Project Settings when the Solution file has no Actual Project's just solution folders with files.\n. ye, on any assembly, sorry for no reply I just found this issue.. @siegfriedpammer you might want to:\ncpp\ngit branch backup\ngit checkout master\ngit branch -D string-interpolation\ngit branch string-interpolation\ngit checkout string-interpolation\ngit cherry-pick backup\nto try to fix the merge conflicts, update to latest head of master and then you cherry pick all your commits from her copied to backup back to the remade branch and then force it onto github.\n(much cleaner than git merge annoying commits, this is what I now do all the time when stuff like this happens where possible). Also you plan to have it where the form designer code would output in it's own <form name>.Designer.cs/vb?. I see, My idea was to check if the class inherits from System.Windows.Form.Form (or System.Windows.Forms.UserControl for controls) and then set that IsWinForms to true; on top of that method if you see the entire code body by clicking on the class itself and not the specific method / member in the form / control.\nAlso, on windows forms controls with resources, the resource manager there must be named resources as well.. ",
    "happyxa": "Ignore that request. Sorry for bothering you. \n. ",
    "salucci": "hm, I think it's not corrupted, cause the .exe is usable, and deObsfucation algothims are already know, like de4dot deObfsucator(the .exe is c# vs made), anyway your tip about intentionally corrupted methods was very helpfull, thx\n. IDA hex rays can load, reCompile and then the file is funtional and brand new, but the assembly code when loaded is so much weird, 99% of instructions are things like:\nseg000:00022022                 db  10h\nseg000:00022023                 db  6Ch ; l\nseg000:00022024                 db 0BDh ; \u00a2\nseg000:00022025                 db    9\nseg000:00022026                 db  53h ; S\nI just meet stuff like jz, cjne, R0,ACC and etc, like on this:\nhttp://www.8052.com/set8051.phtml\nI'll try to find something around\nanyway, thx a lot\n. ",
    "donid": "I have just checked this with a VS2012 compiled assembly: ILSpy shows the same \"while\"-loop...\nBTW: When I compile a c# foreach with VS2015/Roslyn it is correctly decompiled as foreach.\n. I have not found a way to retrieve the currently selected row in the \"Call Stack\" window, but as workaround we can use the active frame (the one with the curved arrow in the screenshot). \nI could provide a PR for a feature that navigates to the method of the currently active frame - see screenshot.\n\n. So, nobody interested in this feature? I was hoping for some comments about the usability of my proposed workaround and maybe the menu-caption that I have chosen.\nBTW: this issue seems to be missing the \"VS Extension\" label.\n. @siegfriedpammer: I don' quite understand your comment - the feature currently only exists in a build on my local machine. I presented the screenshot to receive comments about the naming and position of the planned menu item. In addition I hoped for comments about my planned workaround  to use the \"active frame\" instead of the \"selected frame\" - I think it is not possible to retrieve the \"selected frame\" through VS-extensibility (@bbi-yoyo mentioned his still unanswered StackOverflow-posting in #697). And I thought maybe @kiewic would comment if this proposal meets his needs.\n. You can go to any stack frame, but you have to remember to make it \"active\" by double-clicking it.\nMy prototype doesn't use CodeModel at all - it uses EnvDTE.StackFrame like this:\nEnvDTE.StackFrame currentStackFrame = debugger.CurrentStackFrame;\n. Sorry for the delayed response, but I took a deep dive into VS-extensibility. My prototype basically used EnvDTE.StackFrame.FunctionName and added \"navigateTo\", which works in many cases (if there are no generics and overloads involved). After reading @bbi-yoyo 's comment, I realized that a StackFrame provides much less information than a CodeElement. We basically get the current method signature and programming language as string - it is even missing the ref/out modifiers. To retrieve ref/out information I would have to use IDebugStackFrame2 which would require to copy 400+ lines of decompiled internal code (IDebuggerInternal) or about the same amount of code to keep track of the current stackframe via monitoring the IDebugEventCallback2-events. These steps would help to determine the correct overload regarding the parameters. When generics are involved, it gets even worse. Since the signatures are depending on the current programming language, I would need a parser that is able to parse C#, VB and maybe F# method-signatures to split them into the parts I need to create an xmldoc-key... (even Roslyn doesn't handle F#)\nFurthermore, I am using exclusively VS2015U2 so I can't guarantee that above mentioned mechanism will work in all VS versions that are currently supported by ILSpy.\nSo, anyone cares to comment? (Especially @siegfriedpammer  and @bbi-yoyo)\n. ",
    "aelij": "Ha, sorry! :) I saw it (Decompiler) was part of SharpDevelop so I thought this was just a copy.\nI'm assuming you also wouldn't object to the NUnit package.\nI'll open another PR when I get the time.\n. Thanks @airbreather! I'll fix all of those.\nGood point regarding the assembly files being kept open. I've just read on the Cecil blog that there's an option to go back to the previous behavior: new ReaderParameters { InMemory = true }.. Just a suggestion, if you don\u2019t mind relying on internals, you can use https://github.com/aelij/IgnoresAccessChecksToGenerator\nThis is what I use to build the RoslynPad.Roslyn assembly.. ",
    "0x53A": "Ok, I think I know why this IL gets decompiled incorrectly:\nThere is no valid C# which can generate this IL, C# requires that the variable is initialized before reading it in the finally, so it would have a  [ ldnull, stloc 10 ] at the position of the variable declaration.\n. I just skimmed over the source, so might be completely wrong, but I think the issue is, that local variables are initialized to SpecialOpCode.Uninitialized here: https://github.com/icsharpcode/ILSpy/blob/2726336b3a56d343457b453d9be76b793ea2ebc0/ICSharpCode.Decompiler/FlowAnalysis/SsaFormBuilder.cs#L243\nIf the method has initlocals set, they should probably be initialized to null (for classes) / default (for structs)\n. Adding the F# pattern was actually relatively straightforward: \nhttps://github.com/0x53A/ILSpy/tree/fsharp-using-pattern\nhttps://gist.github.com/0x53A/5c8dedc0be448a299386#file-c-with-my-changes\n. This specific issue was fixed with https://github.com/icsharpcode/ILSpy/pull/671, but there are a few other instances of F# code being decompiled .. unsatisfactory .., so if you don't mind, I'll keep this open for now (or should I create separate issues?).\n. Thanks, I did not think about that case.\nI added a unit test which contains the scenario you describe:\n- It passes before all my changes.\n- It fails after my first change.\n- It now passes again after checking that the 'disposable' variable is not used afterwards.\n. Ok, looks good from my side. @dgrunwald , could you please take a look?\n. The Test now uses ILASM to compile checked-in IL instead of running the F# compiler.\nI have also removed references to FSharp.Core from the IL.\n. I rather think it is related to the portable pdb format.\nYou could try to just delete the pdb, so that it doesn't attempt to load it.. The Unit code is dead code.\nUnit in F# is kind of like void in C# ... but it actually has a value.\nThat means there is no need for a differentiation between Action and Func. Action is just Func<Unit>.\nThe compiler should normally erase unit to void, but in generic code, remnants of unit are sometimes left.\n. ",
    "hhblaze": "ILSpy version 2.3.1.1855\n. All are standard librairies, I can see them listed in ILSpy tree from the left.\n. Here are assemblies...Silverlight assemblies.\nhttp://www.filedropper.com/microsoftmapsmapcontrol\nhttp://www.filedropper.com/microsoftmapsmapcontrolcommon\n. Original names:\nMicrosoft.Maps.MapControl.Common.dll\nMicrosoft.Maps.MapControl.dll\n. Very well!\n. ",
    "webmasterMeyers": "+1 A dark theme would be awesome. ",
    "benda": "Hi, I'm interested in working on this issue, can it be assigned to me ? Is this issue still needed / wanted? Just planning on adding a dropdown to the Options dialog in the \"Display\" tab to toggle between standard and dark themes.  . One thing that complicates this is that you are manually drawing the tree view items (SharpTreeViewItem) - so in order to style that we'd have to add style support to the ICSharpCode.TreeView project and do that all in code which is not standard practice in the WPF world - is that OK? Not sure why that project exists really, seems like a standard tree view would work fine here? Is there something I'm missing as to what need that project serves? \n. Drawing a control to a series of images is not feasible and completely outside of all standard practice for a simple tree view in WPF. . Yes, the WPF tree view supports all of those requirements. I'm not aware of any issues with deep nesting - do you have a source for that? I've used it extensively on other projects without issues, including multiple selection and drag and drop. . OK so how do you want to proceed? Rather than having all colors/brushes defined in XAML so they can be easily themed, there are a few defined in code in various places so that would all need to be refactored (turned into DPs and XAML lookless templates as much as possible). Maybe you don't need to move to the standard WPF treeview. Either way that's a bit more work than I have time for now. \nYou can see my current state of things in my fork, there's a toggle for the theme in Options -> Display. Best to restart after changing it. I think it's a fair start, without the changes above it doesn't all match. If you think it's OK looking enough I can start a pull request and then can enhance over time.  . ",
    "OndrejPetrzilka": "Hmm, maybe the intention was something more complicated, but sorting by length was good enough. At least for me, it's easier to find what I'm looking for.\nI use DPack extension for VS (searches for classes/members/...) and they have some ranking system for matches as well. I think it takes into account length, order of terms and maybe capital letters.\n. Fixed issues and changed fitness function to take into account name length and ignore generic arguments.\nExample of usefulness:\nWhen looking for Dictionary (without sorting enabled) and write \"Dictionary\", there's plenty of types including DictionaryBase, SortedDictionary, etc. I cannot further refine search by typing anything, I have to scroll and look for the Dictionary. With sorting enabled it comes first.\nSame issue happens when looking for many types with short and simple names, like List, Array, etc. And this is the way I use ILSpy often...to find out how such types are implemented. \nSorting by fitness is far from perfect, but solves this issue.\nImprovement considerations\n- search term weight (first search term has more weight than second)\n- higher fitness when search term matches Start of the item name\n- higher fitness when search term matches part of item name which starts with capital letter\n  (usually user enters \"sort\" when looking for \"SortedDictionary\", he does not usually enter \"orted\")\n. fixed in 5261d73\nIs there sorted observable collection?\n. ",
    "sandercox": "Hi,\nPreview of failing LargeResourceTest.exe or if you'd like the original code LargeResourceTest\nI was unaware this caused bad performance.\n. I tried playing around with putting list view content in a ScrollViewer but was yet unable to auto restrict the width to the max width. Using a ScrollViewer for each content would allow the content itself to be scrollable that would fix the issue.\n. ",
    "sphereinabox": "I hit a simpler test case for this:\nstatic void demo(BinaryWriter bw)\n        {\n            bw.Write((short)5);\n        }\ndecompiles to code without the (short) cast or number-suffix, which would then compile to calling the int overload. If you hover over the bw.Write() call the tooltip shows the correct overload .Write(short value). ",
    "chrisgotboost": "Can someone patch this ? i can contribute in money :)\n. i can give the assembly !! i have try to debug but it crash the ilspy :) tank you very much !!!\n. ",
    "Piedone": "I found out the problem: you need to run astBuilder.RunTransformations(); before working with the syntax tree, that will also re-create delegates (specifically the DelegateConstruction transformation).\nI'm still leaving this issue open because I think the API here is confusing (you need to run a method to be able to fully use an object already available in a property) and something should be changed to make it more obvious to use. Also while this way we get the delegates back the question still remains: why aren't DisplayClasses visible in the syntax tree?\nAlso in my particular use-case I'd prefer not to run all these transformations and rather work with the lower-level syntax tree.\n. Hmm, it turns out that setting decompiledContext.Settings.AnonymousMethods = false will keep DisplayClasses in their entirety. I understood this option something as \"skip anonymous methods\".\nNevertheless this is not an issue then.\nAlso I found out that DelegateConstruction can re-build delegates by processing the Mono.Cecil.TypeDefinition object that as mentioned, contains the DisplayClasses any way.\n. Great!. Related (or possible duplicates): https://github.com/icsharpcode/ILSpy/issues/373, https://github.com/icsharpcode/ILSpy/issues/430, https://github.com/icsharpcode/NRefactory/issues/353. @dgrunwald do you mean this was tested somehow, is there some specific fix for this or any other change that would make this likely fixed?. I see, thank you. We had a similar issues with some code of ours, so once the new version is out on NuGet we'll check whether that specifically was also fixed.. ",
    "jakubsuchybio": "ILSpy installed in VS15, works like a charm. Thank you!\n. ",
    "damh0503": "Latest version of ILSpy,\nAnd example code, if you talking about crashing code,\n`using System;\nusing System.Collections.Generic;\nusing UnityEngine;\n[Serializable]\npublic class BulletPool : MonoBehaviour\n{\n    public GameObject genericBullet;\n```\npublic List bullets;\npublic int poolenAmount;\npublic BulletPool()\n{\n    this.poolenAmount = 150;\n}\npublic override void \u08ac()\n{\n    this.bullets = new List();\n    for (int i = 0; i < this.poolenAmount; i++)\n    {\n        GameObject gameObject = Object.Instantiate(this.genericBullet);\n        gameObject.SetActive(false);\n        gameObject.get_transform().set_parent(this.get_transform());\n        this.bullets.Add(gameObject);\n    }\n}\npublic override void Main()\n{\n}\npublic override void Start()\n{\n    this.\u08ac();\n}\n```\n}\n`\nHere.\n. Looks like private one is crashing, public one looks correctly.\n. ",
    "neolithos": "I found the problem, I will try to fix it.\n. Duplicate of #692.\n. ",
    "urasandesu": "Thanks!! :laughing:\n. ",
    "sv1eia": "The bug still persists, \"The event can only appear on the left hand side of += or -=\"\nUsed ILSpy v3.01-preview1 and its still there. Any chance to iron this out?\nI'm using VS2013.\n. Just tried this one and given the error\n. Took the latest artifact binaries and yep, it is solved.\nThanks!\n. ",
    "kenforgh": "test.zip\n. ",
    "grokky1": "When I right click and choose \"Open in ILSpy\" it shows an error box with \"could not find assembly, `c:\\foo\\bar\\projectname.\\bin\\', please ensure the project and references were built correctly!\"\nThat path is obviously wrong. How do I fix it?. @bbi-yggy It's a ASP.NET Core app, and it builds. I've since moved to \"GoToILSpy for VS2015\" extension, which works. Thanks though!. I was right clicking on a word in the editor. Not sure if that amkes sense to you. i.e. right-clicking on a type in my code.. @bbi-yggy Done!\nThanks for looking into it. I'd rather use the official extension, than the one I'm using.. @bbi-yggy FYI the bin paths for an ASP.NET Core project look like this:\nMySolution\\src\\MyProject\\bin\\Debug\\netcoreapp1.1\nMySolution\\src\\MyProject\\bin\\Release\\netcoreapp1.1.\n",
    "lbx1979": "ILSpy version 3.0.1.3459 still have this issue, the generated project file did not include \".resource\" files. I rename  those files to \".resx\" extension and include them in the project , then works fine.. ",
    "M-Pixel": "It looks like injection is a part of Reflexil and not IL Spy.\n. ",
    "JasonAtGitHub": "Sorry for your time, I have tested the code above, It works well. I just change my code and add system attribute System.ComponentModel.DefaultValue to it, it throw an exception mentioned above.\nCode:\n[System.ComponentModel.DefaultValue(AppID.Invalid)]\n    public enum AppID : ulong\n    {\n        Invalid = 0xFFFFFFFFFFFFFFFFul,\n    } \n@siegfriedpammer \n. ",
    "danmosemsft": "awesome. for future reference:\nhttps://github.com/icsharpcode/ILSpy/blob/master/doc/Command%20Line.txt\nIt's a little wacky because\nilspy /separate foo.dll\nilspy /separate bar.dll\nopens one with foo.dll and another with both foo and bar. but it gets the job done, thanks!\n. You could also potentially make \"ilspy.exe /?\" show a dialog with the flags. thx!\n. Seems this is really a bug against the assembler then, unless you want a prettier result. Or you want your decompiler to attempt to recover. \n. Fair enough, thanks!\n. ",
    "dlstucki": "http://stackoverflow.com/questions/4614099/what-is-the-meaning-of-ctor\n. ",
    "tyrotoxin": "FYI: this is still the issue for .NET Standard assemblies. ",
    "valhristov": "I workarounded this by adding <DebugType>Full</DebugType> to my projects. It also helps with collecting code coverage, see https://github.com/Microsoft/vstest/issues/800.... ",
    "pkruk2": "Could we reopen this? Mono.Cecil supports Portable PDBs now, maybe ILSpy could update it's Mono.Cecil version?. Thanks, makes sense. Is there an ETA for #1030 ?. ",
    "jsakamoto": "@AraHaan  I forked ILSpy original repository, and create \"ClickOnce\" edition.\nAnd, I published the ILSpy \"ClickOnce\" edition at my responsibility on the website below.\nhttps://clickonceget.azurewebsites.net/app/ILSpy/detail. ",
    "pcalin": "Not sure I'll get the time in the near future. Simply too busy.\u00a0\nSorry,C\u0103lin\n-------- Original message --------From: Alex Povar notifications@github.com Date: 29/03/2017  17:36  (GMT+08:00) To: icsharpcode/ILSpy ILSpy@noreply.github.com Cc: Calin pcalin@yahoo.com, Mention mention@noreply.github.com Subject: Re: [icsharpcode/ILSpy] Automatic read only properties new decompiler (#734) \n@pcalin It took a while since you started this PR. Do you have some plans to rework the approach? It would be really cool to support this feature.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n{\"api_version\":\"1.0\",\"publisher\":{\"api_key\":\"05dde50f1d1a384dd78767c55493e4bb\",\"name\":\"GitHub\"},\"entity\":{\"external_key\":\"github/icsharpcode/ILSpy\",\"title\":\"icsharpcode/ILSpy\",\"subtitle\":\"GitHub repository\",\"main_image_url\":\"https://cloud.githubusercontent.com/assets/143418/17495839/a5054eac-5d88-11e6-95fc-7290892c7bb5.png\",\"avatar_image_url\":\"https://cloud.githubusercontent.com/assets/143418/15842166/7c72db34-2c0b-11e6-9aed-b52498112777.png\",\"action\":{\"name\":\"Open in GitHub\",\"url\":\"https://github.com/icsharpcode/ILSpy\"}},\"updates\":{\"snippets\":[{\"icon\":\"PERSON\",\"message\":\"@Zvirja in #734: @pcalin It took a while since you started this PR. Do you have some plans to rework the approach? It would be really cool to support this feature.\"}],\"action\":{\"name\":\"View Pull Request\",\"url\":\"https://github.com/icsharpcode/ILSpy/pull/734#issuecomment-290037013\"}}}. ",
    "Rpinski": "Should be fixed with 84758dca5ec0ca35f9fe672e0a55d7f380591edb.. We have applied some fixes in add-in and I haven't seen such errors in latest devevelopment drop. Could you please give it a try? Here is the link to latest one on our build server:\nhttps://ci.appveyor.com/api/buildjobs/502aqb2i7rn8s2pc/artifacts/ILSpy.AddIn%2Fbin%2FRelease%2Fnet46%2FILSpy.AddIn.vsix\nIf still something strange is happening, please feel free to open a new issue or reopen this one.. The \"Open in ILSpy\" item has been shown on some nodes where it wasn't applicable at all. Fixes for all those cases are on the way.. Should be fixed with: 809354f175a4f128f1830ef67cf13f901dae9f1a.\nIf you like, you can test it as development drop from our build server:\nhttps://ci.appveyor.com/api/buildjobs/502aqb2i7rn8s2pc/artifacts/ILSpy.AddIn%2Fbin%2FRelease%2Fnet46%2FILSpy.AddIn.vsix. There were some issues with \"Open code in ILSpy\" feature, so we have disabled it for now. Currently I'm working on some fixes and then will reactivate it until next official release or one of the next dev drops. I agree that this feature is very useful and important.. @bbi-yggy Yep, the issues were mostly about other project types like .NET Core or things like C++/CLI stuff. And there are also some problems with using Roslyn for symbol detection in code views. I'm currently working on it.\n@zspitz It would be better to create separate issues for the new complaints, because the errors originally explained here don't appear anymore.. Dev drop with reactivated and fixed \"Open code in ILSpy\" feature for code editor:\nhttps://ci.appveyor.com/api/buildjobs/503fqj29s8yjkr3o/artifacts/ILSpy.AddIn%2Fbin%2FRelease%2Fnet46%2FILSpy.AddIn.vsix. Does the assembly exist in output directory? ILSpy is only able to access own project's members when the project has been built at least once.\nOk, now I reopen this issue as long as we have discussions here :). I've added several checks to detect the cases when referenced assemblies don't exist in expected path. In such cases a warning is shown instead of just launching ILSpy. For project references the add-in suggests to compile the solution.\nFeel free to test the build and tell me, what you see now:\nhttps://ci.appveyor.com/api/buildjobs/oywq4u8g8j44agmw/artifacts/ILSpy.AddIn%2Fbin%2FRelease%2Fnet46%2FILSpy.AddIn.vsix. We don't make any assumptions on the path structure of projects. We just use the assembly output paths we get from project system and show an error message, if we can't find the file. Therefore I don't think that path structure is the reason. There must be something different. I assume the affected solutions are private and you can't share them with me? At least you could answer some questions about the working and non-working projects:\n\nWhich project type? Is the project .NET Core or \"oldschool\" .NET?\nWhich type of code element do you try to open?\nWhich message do you receive from the add-in exactly? (there are different...)\nYou've already said that, but to be sure: All projects you try to open in ILSpy are compiled and the output assembly in expected directory?\n\nWhat happens in latest build (exact message, if any) when you try to open a .NET framework class?. Now I finally understood what you've meant with subfolders :)\nI've added some code to handle the folder hierarchy correctly when trying to find the EnvDTE project instance: ea1b953b89ee55c69e7b670c14378c68e7ea5ad8\nPlease feel free to give it a try: https://ci.appveyor.com/api/buildjobs/33jjp4vi0u360gkp/artifacts/ILSpy.AddIn%2Fbin%2FRelease%2Fnet46%2FILSpy.AddIn.vsix. BTW: I've set up a test solution with several projects for the AddIn, where I also tried to reproduce your case:\nhttps://github.com/Rpinski/ILSpy-TestProjects. This will be fixed in final 3.2 release (and in latest devdrops, of course).. I could reproduce an exception in VS extension even with HEAD version. We'll investigate.. In case of an ASP.NET Core project we seem to exceed the 32767 byte limit for command lines when trying to launch ILSpy.exe. I've seen a command line of > 37000 bytes in my test. For a normal console app there were about 13000 bytes, so everything worked :)\nI'll try using ILSpy's IPC interface instead of command line parameters. Unfortunately I can't offer any workaround to survive until the fix is ready.. You're building the correct commit. If the resulting build version confuses you: Have you deleted the .git directory or have you just downloaded the source code without cloning it from GitHub? The build needs a Git repo to generate version information properly.. ",
    "kwakattack1": "it might be because the original project was written in VB.NET.. so the code is\n```\n    Protected Sub grdAllRequests_RowDataBound(sender As Object, e As GridViewRowEventArgs) Handles grdAllRequests.RowDataBound\n    If (e.Row.RowType = DataControlRowType.DataRow) Then\n        If ((e.Row.RowState & DataControlRowState.Edit) > 0) Then\n            'STUFF\n        End If\n    End If\n\nEnd Sub\n\n```\nIL Code is\n```\n.method family \n    instance void grdAllRequests_RowDataBound (\n        object sender,\n        class [System.Web]System.Web.UI.WebControls.GridViewRowEventArgs e\n    ) cil managed \n{\n    // Method begins at RVA 0x3b64\n    // Code size 70 (0x46)\n    .maxstack 2\n    .locals init (\n        [0] bool VB$CG$t_bool$S0,\n        [1] bool VB$CG$t_bool$S1\n    )\nIL_0000: nop\nIL_0001: ldarg.2\nIL_0002: callvirt instance class [System.Web]System.Web.UI.WebControls.GridViewRow [System.Web]System.Web.UI.WebControls.GridViewRowEventArgs::get_Row()\nIL_0007: callvirt instance valuetype [System.Web]System.Web.UI.WebControls.DataControlRowType [System.Web]System.Web.UI.WebControls.GridViewRow::get_RowType()\nIL_000c: ldc.i4.2\nIL_000d: ceq\nIL_000f: stloc.0\nIL_0010: ldloc.0\nIL_0011: brfalse.s IL_0043\n\nIL_0013: ldarg.2\nIL_0014: callvirt instance class [System.Web]System.Web.UI.WebControls.GridViewRow [System.Web]System.Web.UI.WebControls.GridViewRowEventArgs::get_Row()\nIL_0019: callvirt instance valuetype [System.Web]System.Web.UI.WebControls.DataControlRowState [System.Web]System.Web.UI.WebControls.GridViewRow::get_RowState()\nIL_001e: call string [Microsoft.VisualBasic]Microsoft.VisualBasic.CompilerServices.Conversions::ToString(int32)\nIL_0023: ldc.i4.4\nIL_0024: call string [Microsoft.VisualBasic]Microsoft.VisualBasic.CompilerServices.Conversions::ToString(int32)\nIL_0029: call string [mscorlib]System.String::Concat(string, string)\nIL_002e: call float64 [Microsoft.VisualBasic]Microsoft.VisualBasic.CompilerServices.Conversions::ToDouble(string)\nIL_0033: ldc.r8 0.0\nIL_003c: cgt\nIL_003e: stloc.1\nIL_003f: ldloc.1\nIL_0040: brfalse.s IL_0042\n\nIL_0042: nop\n\nIL_0043: nop\nIL_0044: nop\nIL_0045: ret\n\n} // end of method TESTGRID::grdAllRequests_RowDataBound\n```\nILSpy version 2.4.0.1963\n. And yet the compiled code does what it's supposed to.. weird..\nI would have expected if it was concatenating 2 numbers together i.e. 4&4 = 44 then they would always be > 0\n. And indeed it is.. feel free to ignore me :)\nCode works.. but purely by accident\n. ",
    "riQQ": "Fixed the formatting of your code:\n``` csharp\nusing System;\nnamespace TestParameter\n{\n  public class Program\n  {\n    public static void Main(string[] args)\n    {\n      var b = new B(); //\n      System.Console.Out.WriteLine(b.M(b) + b.M((A) b) + b.M((object) b)); //\n    }\n  }\npublic class A \n  {\n    public virtual int M(Object a)\n    {\n      return 1;\n    }\npublic virtual int M(A a)\n{\n  return 2;\n}\n\n}\npublic class B : A \n  {\n    public virtual int M(B b)\n    {\n      return 4;\n    }\n  }\n}\n```\n. http://zuga.net/articles/dotnet-what-are-reference-assemblies/. ",
    "LennyPenny": "Yea that's exactly what I was looking for. ",
    "trivalik": "This issue occures only when you upgrade VS. In my case from VS2015 update 2 to update 3.\n. ",
    "glenrgordon": "Hi, Daniel,\nNo problem on the lack of attribution.\nI don\u2019t care at all.\nYou deduced correctly on all issues except for ToString where I should have put in a specific comment explaining the rationale.\nWhen a data template is used for a combobox, WPF UI Automation doesn\u2019t use the template for the current value.  Rather, it uses the result of ToString on the Combobox itself which by default is the class name.\nAutomationProperties.Name is the name of the combobox itself. There\u2019s no property exposed directly to WPF that allows explicitly setting the value.\nWithout this hack, ScreenReaders will say the class name rather than the current value when the combobox isn\u2019t expanded.\nMost screen readers will also get it wrong when the combobox is dropped, but since in that case the expansion of the template is represented in the UIA hierarchy as children of the focused item, the JAWS screen reader does expansion itself.\nTextSearch.TextPath does fix first-letter navigation but has no impact on UIAutomation.\nSorry for the improper indentation.  Tried to get it right but I\u2019m blind so inconsistencies don\u2019t jump out at me.\nThanks\n--Glen\nFrom: Daniel Grunwald [mailto:notifications@github.com] \nSent: Saturday, December 3, 2016 12:38 PM\nTo: icsharpcode/ILSpy ILSpy@noreply.github.com\nCc: glenrgordon glenrgordon@charter.net; Author author@noreply.github.com\nSubject: Re: [icsharpcode/ILSpy] Improved accessibility support (#758)\nI merged the remaining changes as  https://github.com/icsharpcode/ILSpy/commit/82ca308a3b8825a1bcbe4c5c50d0329a76e96015 82ca308.\nUnfortunately I didn't notice before pushing that removing the redundant MyPreviewKeyDown+ComboBoxItem changes from the commit reset the author information :(\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/icsharpcode/ILSpy/pull/758#issuecomment-264656978 , or mute the thread https://github.com/notifications/unsubscribe-auth/ARmPEd84k2JqCyzZ_n2kq8H6bD-2dqdnks5rEbcIgaJpZM4J5xFh .\n. ",
    "akyryz": "What about a plugin for this kind of stuff?. I don't like to navigate using those browsers...\nIt needs at least to have a textbox to paste the path to go straight where I want.. I'm not talking only about the fields, but properties, methods, any thing that has a reference and is not local to the method is clickable buy not highlightable, right now the highlight only works for local fields and methods parameters.\nIf you are looking for a method usage in a particular method, it's pretty hard to find all instances specially in big methods.\nEdit: Ah, yeah! There is that too. The search does not highlight what you are looking for.... ",
    "OmarTawfik": "@siegfriedpammer can you please tell me who should be tagged on this PR?\n. @icsharpcode\n. Would you know who maintains this repo now? :) @dgrunwald @christophwille \n. @dgrunwald @siegfriedpammer @akyryz\nWould this be satisfied by using the newer dialog? I made this PR because I ended up needing a \"recursive\" open directory command. I need to open my build output folder and load all dlls from all folders there.. That satisfies my scenario.  Others?. ",
    "yuryleb": "It would be better if 'Open Directory' item text will be finished with dots - 'Open Directory...'. Yes, but maybe it could be better just to use another way to determine root namespace - enumerate all objects namespaces and cut first common part? ;). ",
    "SlowLogicBoy": "It's a limitation of https://github.com/jbevain/cecil library which aims for ECMA CIL standard, so it will not be possible, at least for now. And if .Net file is protected it means creators of that file don't want you to look in their code.\n. this syntax is invalid for C#\n. ",
    "JosephWoodward": "Any idea when these changes will be available via NuGet?. ",
    "indexless": "Here is the Main()'s dump, in case it might be helpful:\n``\n.method public hidebysig static \n    void Main () cil managed \n{\n    // Method begins at RVA 0x2114\n    // Code size 81 (0x51)\n    .maxstack 4\n    .entrypoint\n    .locals init (\n        [0] class '<>f__AnonymousType01'[],\n        [1] class '<>f__AnonymousType0`1'\n    )\nIL_0000: nop\nIL_0001: ldc.i4.1\nIL_0002: newarr class '<>f__AnonymousType0`1'<int32>\nIL_0007: dup\nIL_0008: ldc.i4.0\nIL_0009: ldc.i4.1\nIL_000a: newobj instance void class '<>f__AnonymousType0`1'<int32>::.ctor(!0)\nIL_000f: stelem.ref\nIL_0010: stloc.0\nIL_0011: ldc.i4.2\nIL_0012: newobj instance void class '<>f__AnonymousType0`1'<int32>::.ctor(!0)\nIL_0017: stloc.1\nIL_0018: ldstr \"array[0].i = \"\nIL_001d: ldloc.0\nIL_001e: ldc.i4.0\nIL_001f: ldelem.ref\nIL_0020: callvirt instance !0 class '<>f__AnonymousType0`1'<int32>::get_i()\nIL_0025: box [mscorlib]System.Int32\nIL_002a: call string [mscorlib]System.String::Concat(object, object)\nIL_002f: call void [mscorlib]System.Console::WriteLine(string)\nIL_0034: nop\nIL_0035: ldstr \"item.i = \"\nIL_003a: ldloc.1\nIL_003b: callvirt instance !0 class '<>f__AnonymousType0`1'<int32>::get_i()\nIL_0040: box [mscorlib]System.Int32\nIL_0045: call string [mscorlib]System.String::Concat(object, object)\nIL_004a: call void [mscorlib]System.Console::WriteLine(string)\nIL_004f: nop\nIL_0050: ret\n\n} // end of method Test1::Main\n```\n. ",
    "AdamAndersonFalafelSoftware": "Thanks for the reference; the title of the linked issue was not very descriptive!. ",
    "sgkoishi": "When i compile the code in commit 681641948b0fa1315a266382044f5e13f4c72155 from newdecompiler branch (2016 Dec 4), the ILSpy brokes with the stack trace below, and did not show any decompiled code.\nICSharpCode.ILSpy.AssertionFailedException\n    ICSharpCode.ILSpy.ILSpyTraceListener.Fail(String message, String detailMessage)  \\ILSpy\\ILSpyTraceListener.cs:Lines 74\n    ICSharpCode.ILSpy.ILSpyTraceListener.Fail(String message)  \\ILSpy\\ILSpyTraceListener.cs:Lines 46\n    System.Diagnostics.TraceInternal.Fail(String message)\n    ICSharpCode.Decompiler.IL.StLoc.CheckInvariant(ILPhase phase)\n    ICSharpCode.Decompiler.IL.ILInstruction.CheckInvariant(ILPhase phase)\n    ICSharpCode.Decompiler.IL.Block.CheckInvariant(ILPhase phase)\n    ICSharpCode.Decompiler.IL.ILInstruction.CheckInvariant(ILPhase phase)\n    ICSharpCode.Decompiler.IL.IfInstruction.CheckInvariant(ILPhase phase)\n    ICSharpCode.Decompiler.IL.ILInstruction.CheckInvariant(ILPhase phase)\n    ICSharpCode.Decompiler.IL.Block.CheckInvariant(ILPhase phase)\n    ICSharpCode.Decompiler.IL.ILInstruction.CheckInvariant(ILPhase phase)\n    ICSharpCode.Decompiler.IL.BlockContainer.CheckInvariant(ILPhase phase)\n    ICSharpCode.Decompiler.IL.ILInstruction.CheckInvariant(ILPhase phase)\n    ICSharpCode.Decompiler.IL.Block.CheckInvariant(ILPhase phase)\n    ICSharpCode.Decompiler.IL.ILInstruction.CheckInvariant(ILPhase phase)\n    ICSharpCode.Decompiler.IL.BlockContainer.CheckInvariant(ILPhase phase)\n    ICSharpCode.Decompiler.IL.ILInstruction.CheckInvariant(ILPhase phase)\n    ICSharpCode.Decompiler.IL.ILInstruction.CheckInvariant(ILPhase phase)\n    ICSharpCode.Decompiler.IL.ILInstruction.CheckInvariant(ILPhase phase)\n    ICSharpCode.Decompiler.IL.ILInstruction.CheckInvariant(ILPhase phase)\n    ICSharpCode.Decompiler.IL.Block.CheckInvariant(ILPhase phase)\n    ICSharpCode.Decompiler.IL.ILInstruction.CheckInvariant(ILPhase phase)\n    ICSharpCode.Decompiler.IL.BlockContainer.CheckInvariant(ILPhase phase)\n    ICSharpCode.Decompiler.IL.ILInstruction.CheckInvariant(ILPhase phase)\n    ICSharpCode.Decompiler.CSharp.CSharpDecompiler.DecompileBody(MethodDefinition methodDefinition, IMethod method, EntityDeclaration entityDecl, ITypeResolveContext decompilationContext)\n    ICSharpCode.Decompiler.CSharp.CSharpDecompiler.DoDecompile(MethodDefinition methodDefinition, IMethod method, ITypeResolveContext decompilationContext)\n    ICSharpCode.Decompiler.CSharp.CSharpDecompiler.Decompile(IMemberDefinition[] definitions)\n    ICSharpCode.ILSpy.CSharpLanguage.DecompileMethod(MethodDefinition method, ITextOutput output, DecompilationOptions options)  \\ILSpy\\Languages\\CSharpLanguage.cs:Lines 107\n    ICSharpCode.ILSpy.TreeNodes.MethodTreeNode.Decompile(Language language, ITextOutput output, DecompilationOptions options)  \\ILSpy\\TreeNodes\\MethodTreeNode.cs:Lines 133\n    ICSharpCode.ILSpy.TextView.DecompilerTextView.DecompileNodes(DecompilationContext context, ITextOutput textOutput)  \\ILSpy\\TextView\\DecompilerTextView.cs:Lines 502\n    ICSharpCode.ILSpy.TextView.DecompilerTextView.<>c__DisplayClass31_0.b__0()  \\ILSpy\\TextView\\DecompilerTextView.cs:Lines 481. Will it help if i post the il code here?\nThe method i decompile calls many compiler generated methods, and these methods can be decompiled\nwith correct logic and switch statement but all the local variables becomes V_0 V_1 V_2 and do not have declarations. ILSpy breaks when decompiling the biggest method.. I am not sure where the problem is, because the version i compiled will give wierd code even for helloworld programs: all local variables become v_(number) and they have declarations. It happens in Sample of items.zip/Program.exe.\nAnother problem happen that when it could NOT decompile Ionic.Zip.CF.dll, totally not. It is in Sample of items.zip too, and ILSpy breaks in most classes. Screenshots are provided in file.\nFinally, the code i give in this issue is in Terraria, type name WorldGen and method name generateWorld.\nIt only happens when the checkbox View - Options - Decompile anonymous methods/lambdas is true. When it is false, it would not breaks, but the code is full of $<> (Compiler generated things).\nSamples_and_screenshots.zip\n. ",
    "AArnott": "I don't think CoreCLR assemblies have changed from desktop assemblies. Rather: the PDB that is generated (by default) for .NET Core projects are the new \"portable\" variety, and this exception is thrown from the PDB reader. So I think it's a (significant) change to support the new portable PDB format.\nAs further proof, try deleting or renaming your PDB. Suddenly ILSpy will work with the .DLL.. I agree it's a dupe, but the dupe has been closed with an unrelated fix. . Yes. It works for me too. I mentioned that here: https://github.com/icsharpcode/ILSpy/issues/779#issuecomment-285719981. ",
    "VahidN": "It's duplicate of https://github.com/icsharpcode/ILSpy/issues/779. ",
    "memark": "The fix (deleting the .PDB) works for me for any .NET Core assembly.\nDid you try it @AArnott?. ",
    "airbreather": "https://github.com/airbreather/ILSpy/tree/github-789\nI have no idea what I'm doing (thus no pull request just yet), but running it in VS2017 makes it feel like the problem is fixed.  26 tests fail, but debugging through them it's always just at the File.Delete calls because apparently something's keeping the files open (so I'm going to ignore those).\nI saw the newdecompiler branch but that's a lot bigger of a fix than this, so I thought it might be worth putting this out there.\nSemi-unrelated changes are from a VS2017 \"one-way-upgrade\" on ILSpy.AddIn.. Can confirm (edit: though, it does not seem to have anything to do with the details in the title, so I'd like to request that the title be changed).  Here's a nice, slimmed-down full repro:\ncsharp\nclass A\n{\n    void X(System.Collections.IEnumerable e)\n    {\n        foreach (var s in e)\n        {\n            return;\n        }\n    }\n}\nPunch that into a class library project, compile in release mode (compiled with VS2017 15.3.0 Preview 5.0).  ILSpy 2.4.0.1963 decompiles the result to:\n```csharp\nusing System;\nusing System.Collections;\ninternal class A\n{\n    private void X(IEnumerable e)\n    {\n        using (IEnumerator enumerator = e.GetEnumerator())\n        {\n            if (enumerator.MoveNext())\n            {\n                object arg_0F_0 = enumerator.Current;\n            }\n        }\n    }\n}\n```\nWhich is indeed incorrect, because System.Collections.IEnumerator indeed does not extend System.IDisposable (only System.Collections.Generic.IEnumerator<T> does)... odd that if you just take out the return; line, it gets recognized as a regular ol' foreach loop.\nThe full CIL of the method from ILDASM, in case this is actually a case where a newer compiler has started emitting a different pattern and you can't immediately get your hands on such a compiler:\n.method private hidebysig instance void  X(class [mscorlib]System.Collections.IEnumerable e) cil managed\n{\n  // Code size       46 (0x2e)\n  .maxstack  1\n  .locals init ([0] class [mscorlib]System.Collections.IEnumerator V_0,\n           [1] class [mscorlib]System.IDisposable V_1)\n  IL_0000:  ldarg.1\n  IL_0001:  callvirt   instance class [mscorlib]System.Collections.IEnumerator [mscorlib]System.Collections.IEnumerable::GetEnumerator()\n  IL_0006:  stloc.0\n  .try\n  {\n    IL_0007:  br.s       IL_0012\n    IL_0009:  ldloc.0\n    IL_000a:  callvirt   instance object [mscorlib]System.Collections.IEnumerator::get_Current()\n    IL_000f:  pop\n    IL_0010:  leave.s    IL_002d\n    IL_0012:  ldloc.0\n    IL_0013:  callvirt   instance bool [mscorlib]System.Collections.IEnumerator::MoveNext()\n    IL_0018:  brtrue.s   IL_0009\n    IL_001a:  leave.s    IL_002d\n  }  // end .try\n  finally\n  {\n    IL_001c:  ldloc.0\n    IL_001d:  isinst     [mscorlib]System.IDisposable\n    IL_0022:  stloc.1\n    IL_0023:  ldloc.1\n    IL_0024:  brfalse.s  IL_002c\n    IL_0026:  ldloc.1\n    IL_0027:  callvirt   instance void [mscorlib]System.IDisposable::Dispose()\n    IL_002c:  endfinally\n  }  // end handler\n  IL_002d:  ret\n} // end of method A::X. Looking at the CI test failures, there's a major problem here (which I also had in my own attempt, and which I also haven't found a good way to solve): the newer versions of Cecil seem to have started to implement IDisposable in some of their publicly visible types and keep file streams open until they are disposed.\nThis has the user-visible effect of making it so that if you, say, open a module with ILSpy that you just built from Visual Studio, you won't be able to rebuild that module in Visual Studio until sometime after you close that module in ILSpy.  This would be a significant behavior change, and I think that this usage scenario is probably common enough that a change like this would annoy many users (myself included).\nIf it's just coded tests failing, but the user-visible effect I mention above is absent from your attempt, then ignore me.. Also worth noting, I'm just some random guy who's been following this repo hoping to see something like this come about so I can start seeing variable names from portable PDBs like I do for full (edit: traditional) PDBs... the maintainers of this repo will probably have some more interesting things to say.. @siegfriedpammer assuming that newdecompiler isn't going to be finished anytime soon (it looks to me like there have been >3 years' worth of commits on that branch since it was forked from master at 2725265), would you please consider exposing a \"legacy\" / \"1.x\" / etc. branch for improvements like this?. I think this is insufficient: it ought to use the variable name from the PDB... you actually want something like what I did here (with the implementation of that over here). See comment above, I think it probably ought to look something like this using that same extension method and a MethodDebugInformation parameter passed in from the appropriate spot.. On a similar note to the stuff above, see here for a tweak to get the variable's proper name from debug information at this point in the code.. Looks like I used that extension method commented-on above, here too.. Gonna sound like a broken record, but here. Not honestly sure where this Ssa stuff comes into play in the app (I'd just dabbled when I made my branch), but along the same lines as everything else, I added a method parameter for this and passed in the value over here.. Question: would it be better to just use Cecil's default symbol reader provider here like mine did?  I saw a lot of the same-looking code inside the implementation of that (I think it would make this a fix for #789)... I'm not sure if that's related to the bigger file-lock issue I'd commented on before starting to go through your actual code to compare with what I'd done.. Nit: variableRef.ToString() won't be null like variableRef.Name could have been, so you can just delete this conditional and always take the else branch.. ",
    "dungtm007": "Thanks @memark \nIt works for me ;)\n. ",
    "wtyvvv": "\u4f60\u597d \u4f60\u8fd9\u4e2a\u53cd\u6df7\u6dc6\u51fa\u6765\u4e86\u5417  \u4ed6\u662f\u901a\u8fc7\u4ec0\u4e48\u6df7\u6dc6\u7684\u5462. \u6709qq\u5417 \u4e00\u8d77\u7814\u7a76  \u6211\u7814\u7a76\u5230\u6700\u540e\u4e00\u6b65\u4e86. ",
    "kissstudio": "\u6ca1\u51e0\u4e2a\u6b7b\u5faa\u73af\uff0c\u8df3\u8fc7\u5c31\u884c\u4e86\u3002\u53ef\u4ee5\u5f97\u523099%\u7684\u6e90\u7801\u3002. ",
    "Dreamescaper": "Cool! I'm using extension with your changes on regular basis now.. ",
    "xoofx": "Thanks a lot for the fast response, looking forward to try this new version. \ud83d\udc4d . ",
    "ZimM-LostPolygon": "@christophwille Why is the issue closed?. Oh, cool! Thanks.\nOn Sep 19, 2017 11:09, \"Christoph Wille\" notifications@github.com wrote:\n\nOh, you didn't follow #831\nhttps://github.com/icsharpcode/ILSpy/issues/831 - it states that we\nhave updated Nuget packages, plus a sample (now even as part of the main\nrepository, ics.d.console)\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/icsharpcode/ILSpy/issues/796#issuecomment-330478437,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA4rJl2PoFbjVFSIOaMGjGbXJmzkf4Knks5sj4ThgaJpZM4MYKNL\n.\n. \n",
    "tamlin-mike": "Only thing that comes to mind is a misbehaving anti-virus filesystem filter.. I came to think of three more things to check.\n\nSwitch procmon to display both \"advanced\" I/O (i.e. IRP's) and network activity (attempts).\nAs admin, delete %windir%\\Prefetch\\ILSpy*.pf\nCheck disk activity at the time this happens.\n\nWhile it seems unlikely to me it would affect multiple machines, theoretically it could be an attempt to access an unavailable network (or other kind of unavailable, e.g. USB storage, unmounted volume, ...) resource.\nAlso to check could be the time-to-complete of the operation preceeding the gap.\nPlease note that this is by me now pure brainstorming, since I have never seen similar delays myself.. I generated a similar boiled down example, and while the following doesn't exhibit the manual Dispose (it's using using), interestingly it displayed another decompilation bug.\nusing System;\nusing System.Collections.Generic;\nclass foo {\n    List<object> coll = new List<object>(2);\n    object o;\n    void Works() { foreach (var v in coll) { o=v; } }\n    void Fails() { foreach (var v in coll) { o=v; break; } }\n}\nThat is, the only difference between the loop bodies is the addition of the break.\nNot only does it fail to grok the foreach pattern in the failing case, the break is missing from decompiler output.\nProvided I read the ILAst correctly, even at the last step it's having the break (now converted to leave), but at C# with no transforms the result is as follows, and the vital breakis missing.\nprivate void Works()\n{\n    foreach (object item in this.coll)\n    {\n        obj = (this.o = item);\n    }\n}\n\nprivate void Fails()\n{\n    using (Enumerator enumerator = this.coll.GetEnumerator())\n    {\n        if (enumerator.MoveNext())\n        {\n            obj = (this.o = enumerator.Current);\n        }\n    }\n}\n\n. /me slaps forehead\nThanks, you're right. :-). Adding if (v==null) before the break, or even if (v==null) continue; at head of both loop bodies fixes my short circuit (both brain and code).\nSo it seems it's the addition of jumps, to both loop-start (continue) and after-loop-end (break) making the foreach detection fail.\nI tested my revised example with dnSpy, and it got it right (although \"chattier\" with a redundant local bool introduced). Perhaps ideas could be borrowed?. Sometimes the cast to object is required when comparing to (even) null. Example (reduced to display the issue):\npublic static bool operator ==(Foo a, Foo b)\n{\n    return ((object)a != null && (object)b != null && a.Equals(b));\n}\npublic static bool operator !=(Foo a, Foo b)\n{\n    return !(a == b);\n}\n\nWith the casts, the two comparisons to null correctly produces the IL\nldarg.0\nbrfalse somewhere\nWithout the casts, it generates call(s) to operator!=, which obviously results in infinite recursion.\nThis probably depends on the referred type implementing the referred operator(s). If they are not accessible, the casts could probably be left out, but I feel it's better to err on the side of caution (and generate source that behaves correctly when re-compiled) than a re-compilation of the code generating unexpected crashes.. The problem comes from ExtendLoop, specifically its call to ExtendLoopHeuristic. If commenting that out that call, invariants hold true.\nSeems the node triggering it (a br) is outside the BB that should be parent.. \"I guess we could remove ExtendLoopHeuristic from the loop detection, and instead run something like it in a second pass\"\nTaking a step back, I think you may be on to something.\nMy line of thought is: First and foremost correctness is the most important. Only after a fully formed and valid IL AST (no matter how ugly and full of goto's etc) is created would higher-level transformations and construct identification (such as loop finders in this case) kick in, then finally optimization steps (which in turn might f.ex. short-circuit logical operations to the point further high-level loop constructs could be identified).\nIt feels like that would provide a natural separation of tasks and responsibilities.\nAt first glance it seems ... logical, but there are probably a gazillion border-cases I haven't though of.\nComments?\nAnother idea that just struck me, could generating terminals in some specific cases actually help/simplify CFA? I'm thinking of cases with f.ex. nested loops, and compiler has optimized to the point it jumps out of multiple loops. When there is an \"obvious\" exit point, but that's the target of multiple BB's, or would simply be outside the current BB (in this case, an inner loop), could CFA's job be made easier by introducing a virtual (-ish) terminal, that is only a jump to exit point, and then keeping that around until a later cleanup pass?\nI probably made a mess of trying to explain this thought, and I don't know if it has any merit whatsoever, but felt it could potentially have some use.\n\"I think this problem can only occur if the original code was already using goto\"\nAfter some searching I found the actual source code, and indeed there's the label and at 3243 we find the goto.\nhttps://github.com/dotnet/coreclr/blob/4be1b4b90f17418e5784a269cc5214efe24a5afa/src/mscorlib/shared/System/Diagnostics/Tracing/EventSource.cs#L3226\nSidenote: braces inconsistency in decompiled code. \"if1\" have braces, \"if3\" not.\n. Thanks for the explanation. I was originally (once I slept on it and got my thoughts sorted) thinking of some kind of explicit BBexit field for Block, that would reference the BB-exit but not have it explicitly be part of initial analysis, in hope it could simplify block nesting and/or reordering, but after digesting your explanation I realize it would probably add very little (at this point in time), or even just make it messier.\nCase c) sounds to me very much like a goto, provided that \"external\" (in the loosest sense) block has multiple entry references. If it had only one entry (the one from inside the loop), it would already have been inlined or at least been found by CFA to have only one entry, and therefore it would have been part of dominance analysis, no?. Thanks for the example. It made it crystal clear.. I was bitten by the same issue, though in my case the destination type of the assign was an object field, making it pure agony to try to hunt the bug down.\nEdit: In this scenario the expected (intended cast to) type was a wrapper for a type, used for serializing.\nAs a workaround, until the core issue is fixed, could a decompiler option to explicitly include casts help, whether they seems to be required or not? Yes, it would likely produce quite ugly decompiled code, but hopefully it would resolve any and all issues of this kind until the core problem has been fully analyzed and solved.. That sounds reasonable, even more so since this op_Implicit was to manually box an object to a more serialization-friendly type. :-)\nYes, earlier seems more appropriate, since it also indeed changes the type of the expression, and could in some obscure case even require multiple consecutive (op_Implicit) casts. Should be fairly straight-forward to create a tiny repro + regression test for it too (once fixed).. @dgrunwald  Excellent, works like a charm! Thank you so much!. Found the culprit.\nIL_0000: ldarg.1\n    IL_0001: brfalse IL_000b\n    IL_0006: br IL_0011\n    IL_000b: ldarg.1\n    IL_000c: brtrue IL_0011\n    IL_0011: ret\nThat's the whole function.. .method private hidebysig \n    instance void Methodname (\n        bool arg\n    ) cil managed \n{\n    // Code size 18 (0x12)\n    .maxstack 8. Part of the problem narrowing it down (to see what transform is converting that code into a switch), seems to be ILSpy no longer honors the drop-down setting for what transform to run up to (in debug builds), so all transforms are always performed. At least that's what I get from my understanding of CSharpDecompiler.DecompileBody.\nIs my understanding correct?\nAnyway, the problem seems to be SwitchDetection.UseCSharpSwitch mis-detecting this as a switch.\nBased on the IL provoking this, I'd guesstimate that's something like remnants of #if'd-out code - since it's clearly nonsense (the rest of the assembly seems non-obfuscated, at least at first glance, so I have no reason to believe this is obfuscation).. A \"fix\" I locally employed was in StatementBuilder.TranslateSwitch, 191:\n- if (switchContainer != null) {\n+ if (switchContainer != null && stmt.SwitchSections.Count > 0) {\nI don't know if it's just hiding the underlying problem, but at least ILSpy doesn't crash on this construct anymore. It generates a completely empty switch, which I'm not sure is valid C#, but it's (for me, for now) better than nothing.. @dgrunwald I totally missed that \"Show Steps\" button! Thanks for pointing it out. Yeah, that makes sense - the drop list would otherwise indeed have grown to unmanageable proportions.. 1. I think you need VS15.3 (a.k.a. 2017.3) or later.\n2. You need to install .NET Core SDK 2 I grabbed it from https://www.microsoft.com/net/download/visual-studio-sdks\n3. You need to have git in PATH for the devenv process (it only uses it in .ps1 script to generate revision). If you don't want to install more stuff into VS, you can open a developer command prompt, add git to your PATH env. var. and start devenv.exe from it (since it inherits the env.).\nAfter that I got it compiling. Hope it works for you.\n++luck;. I think the problem is not the $PWD/$PSScriptRoot, but simply that some other part of the build system had the .nuspec file open for reading at the time the script ran. At least that's my understanding of the error message.. > Because of this update-assemblyinfo.ps1 is executed in parallel\nAh, that sounds like it might be it.\nAnyway, it's nothing game-breaking for interactive builds, but since it could potentially make CI-builds fail intermittently I figured it best to flag for a potential problem.. I must say, this made me do my best impression of deer-in-headlights. The observable values of Get-Location are the same on consecutive invocations, even if you pipe them to fl there are no differences, so how they could have different hashes is... baffling.\nBeing a curious soul, I tried get to the bottom of this, and the fact that ($PWD).GetHashCode() from different command prompts returns different hashes seems to point in only one direction.\n$PWD, being a built-in, is a process/instance singleton, while Get-Location (obviously) returns a new object every time. That combined with Microsoft failing to properly override GetHashCode(), results in this error. I followed the implementation type up to its very base type InternalCommand, and no GetHashCode() override was to be found anywhere, meaning the default in object is used.\nGood sleuthing.. Just to document one finding: ConditionDetection.HandleIfInstruction, line 114.\nIf disabling that block:\n-if (DetectExitPoints.CompatibleExitInstruction(exitInst, nestedTrueInst)) {\n+if (DetectExitPoints.CompatibleExitInstruction(exitInst, nestedTrueInst) && false) {\nit indeed produces the expected result, meaning foreach loop detection works.\nThat suggests this could be the place to check for a leading get_Current + check, and skip condition merging.\nI came up with the following - awful, horrible, and vomit-inducing - blob of code that seems to handle the case, but there must be a better way to do it I'm simply unaware of.\nif (DetectExitPoints.CompatibleExitInstruction(exitInst, nestedTrueInst)) {\n+   // extra checking, to prevent combining get_Current in a (probable) foreach-loop\n+   // with any leading condition inside the loop\n+   var nestedIfInst = (IfInstruction)targetBlock.Instructions[0];\n+   var comp = nestedIfInst.Condition as Comp;\n+   var lhs = comp?.Left as StObj;\n+   var callInst = lhs?.Value as Call;\n+   var method = callInst?.Method;\n+   if (method != null && method.IsAccessor && method.Name == \"get_Current\") { break; }\nEdit: obviously this will crash on anything but this test, due to me using direct casts instead of as. I'll change that, and keep digging.\nEdit2: casts -> as. Should no longer crash.. Gotcha. I consider the rationale sane.. The compiler is with high confidence mcs, since the code snippet is using the UNITY game engine.\nILSpy have problems with mcs-compiler-generated state-machine classes (read: the compiler generated FSM classes generated for yield return).\nUntil this is fixed, I can only suggest trying to decompile with dnSpy - in my experience it works for this scenario.. ILSpy 2 and 3 are different beasts. dnSpy is (AFAIK) based on ILSpy 2, so it makes sense they both work.\nFrom my understanding, ILSpy 3 has so far been (user-observable) mostly about getting the decompiler up to speed on new language constructs, on code generated by the Microsoft compilers.\nRecognition of a few Mono-isms have been added, but yield-return is not yet one of them. Other problematic areas are array-field-initialization, where it often gets pushed into static constructor, and some foreach constructs.. Sorry about the incomplete report. I stripped it down too much. Here's a version that ilasm can consume, while displaying both the problem and crash.\n``\n// ilasm.exe /nologo /dll whatever.ilasm\n.class public auto ansi beforefieldinit Index2\n{\n    // Fields\n    .field private class [System.Core]System.Action2<!TK, !TR> Getting\n    .field private static class [System.Core]System.Action2<!TK, !TR> '<>f__am$cache0'\n    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 )\n// Methods\n.method public hidebysig specialname rtspecialname instance void .ctor () cil managed\n{\n    .maxstack 8\n\n    ldarg.0\n    ldsfld class [System.Core]System.Action`2<!0, !1> class Index`2<!TK, !TR>::'<>f__am$cache0'\n    brtrue.s IL_0019\n\n    ldnull\n    ldftn void class Index`2<!TK, !TR>::'<Getting>m__0'(!0, !1)\n    newobj instance void class [System.Core]System.Action`2<!TK, !TR>::.ctor(object, native int)\n    stsfld class [System.Core]System.Action`2<!0, !1> class Index`2<!TK, !TR>::'<>f__am$cache0'\n\n    IL_0019: ldsfld class [System.Core]System.Action`2<!0, !1> class Index`2<!TK, !TR>::'<>f__am$cache0'\n    stfld class [System.Core]System.Action`2<!0, !1> class Index`2<!TK, !TR>::Getting\n    ret\n}\n\n.method public hidebysig specialname instance void add_Getting (class [System.Core]System.Action`2<!TK, !TR> 'value') cil managed \n{\n    .maxstack 3\n    .locals init (\n        [0] class [System.Core]System.Action`2<!TK, !TR>,\n        [1] class [System.Core]System.Action`2<!TK, !TR>\n    )\n\n    ldarg.0\n    ldfld class [System.Core]System.Action`2<!0, !1> class Index`2<!TK, !TR>::Getting\n    stloc.0\n        IL_0007: ldloc.0\n        stloc.1\n        ldarg.0\n        ldflda class [System.Core]System.Action`2<!0, !1> class Index`2<!TK, !TR>::Getting\n        ldloc.1\n        ldarg.1\n        call class [mscorlib]System.Delegate [mscorlib]System.Delegate::Combine(class [mscorlib]System.Delegate, class [mscorlib]System.Delegate)\n        castclass class [System.Core]System.Action`2<!TK, !TR>\n        ldloc.0\n        call !!0 [mscorlib]System.Threading.Interlocked::CompareExchange<class [System.Core]System.Action`2<!TK, !TR>>(!!0&, !!0, !!0)\n        stloc.0\n        ldloc.0\n        ldloc.1\n        bne.un IL_0007\n    ret\n}\n\n.method public hidebysig specialname instance void remove_Getting (class [System.Core]System.Action`2<!TK, !TR> 'value') cil managed \n{\n    .maxstack 3\n    .locals init (\n        [0] class [System.Core]System.Action`2<!TK, !TR>,\n        [1] class [System.Core]System.Action`2<!TK, !TR>\n    )\n\n    ldarg.0\n    ldfld class [System.Core]System.Action`2<!0, !1> class Index`2<!TK, !TR>::Getting\n    stloc.0\n        IL_0007: ldloc.0\n        stloc.1\n        ldarg.0\n        ldflda class [System.Core]System.Action`2<!0, !1> class Index`2<!TK, !TR>::Getting\n        ldloc.1\n        ldarg.1\n        call class [mscorlib]System.Delegate [mscorlib]System.Delegate::Remove(class [mscorlib]System.Delegate, class [mscorlib]System.Delegate)\n        castclass class [System.Core]System.Action`2<!TK, !TR>\n        ldloc.0\n        call !!0 [mscorlib]System.Threading.Interlocked::CompareExchange<class [System.Core]System.Action`2<!TK, !TR>>(!!0&, !!0, !!0)\n        stloc.0\n        ldloc.0\n        ldloc.1\n        bne.un IL_0007\n    ret\n}\n\n.method private hidebysig static void '<Getting>m__0' (!TK '', !TR '') cil managed\n{\n    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 )\n    .maxstack 8\n    ret\n}\n\n// Events\n.event class [System.Core]System.Action`2<!TK, !TR> Getting\n{\n    .addon instance void Index`2::add_Getting(class [System.Core]System.Action`2<!0, !1>)\n    .removeon instance void Index`2::remove_Getting(class [System.Core]System.Action`2<!0, !1>)\n}\n\n}\n```. I totally missed #1036. Yes, this looks exactly like it.\nThe compiler is in all likelyhood from MONO, or a modified version of it. The environment producing the code is with 99% certainty UNITY.. I have implemented a matcher for MCS event that partially works. The strange thing is, when I look at the class containing the event I get:\npublic event Action<TK, TR> Getting = delegate\n{\n};\nbut when I drill down to the event itself (select it in the tree-view), it displays properly:\npublic event Action<TK, TR> Getting;\nI suspect there's an attribute that needs to be removed from it, to suppress the faulty addition of = delegate {};, but I don't know where or what.\nAnyway, please consider the following as a partial fix.\n```\n--- a/ICSharpCode.Decompiler/CSharp/Transforms/PatternStatementTransform.cs\n+++ b/ICSharpCode.Decompiler/CSharp/Transforms/PatternStatementTransform.cs\n@@ -631,6 +631,44 @@ Identifier ReplaceEventFieldAnnotation(Identifier identifier)\n                                }\n                        }\n                };\n+\n+               // MONO MCS pattern\n+               static readonly Accessor automaticEventPatternV4MCS = new Accessor {\n+                       Attributes = { new Repeat(new AnyNode()) },\n+                       Body = new BlockStatement {\n+                               new AssignmentExpression {\n+                                       Left = new NamedNode(\"var1\", new IdentifierExpression(Pattern.AnyString)),\n+                                       Operator = AssignmentOperatorType.Assign,\n+                                       Right = new NamedNode(\n+                                               \"field\",\n+                                               new MemberReferenceExpression {\n+                                                       Target = new Choice { new ThisReferenceExpression(), new TypeReferenceExpression { Type = new AnyNode() } },\n+                                                       MemberName = Pattern.AnyString\n+                                               })\n+                               },\n+                               new DoWhileStatement {\n+                                       EmbeddedStatement = new BlockStatement {\n+                                               new AssignmentExpression(new NamedNode(\"var2\", new IdentifierExpression(Pattern.AnyString)), new IdentifierExpressionBackreference(\"var1\")),\n+                                               new AssignmentExpression {\n+                                                       Left = new IdentifierExpressionBackreference(\"var1\"),\n+                                                       Right = new InvocationExpression(new MemberReferenceExpression(new TypeReferenceExpression(new TypePattern(typeof(System.Threading.Interlocked)).ToType()),\n+                                                               \"CompareExchange\",\n+                                                               new AstType[] { new AnyNode(\"type\") }), // type argument+                                                               new Expression[] { // arguments\n+                                                                       new DirectionExpression { FieldDirection = FieldDirection.Ref, Expression = new Backreference(\"field\") },\n+                                                                       new CastExpression(new Backreference(\"type\"), new InvocationExpression(new AnyNode(\"delegateCombine\").ToExpression(), new IdentifierExpressionBackreference(\"var2\"), new IdentifierExpression(\"value\"))),\n+                                                                       new IdentifierExpressionBackreference(\"var1\")\n+                                                               }\n+                                                       )}\n+                                       },\n+                                       Condition = new BinaryOperatorExpression {\n+                                               Left = new CastExpression(new TypePattern(typeof(object)), new IdentifierExpressionBackreference(\"var1\")),\n+                                               Operator = BinaryOperatorType.InEquality,\n+                                               Right = new IdentifierExpressionBackreference(\"var2\")\n+                                       },\n+                               }\n+                       }\n+               };\n            bool CheckAutomaticEventMatch(Match m, CustomEventDeclaration ev, bool isAddAccessor)\n            {\n\n@@ -676,10 +714,22 @@ bool CheckAutomaticEventV2(CustomEventDeclaration ev, out Match addMatch, out Ma\n                        return true;\n                }\n\nbool CheckAutomaticEventV4MCS(CustomEventDeclaration ev, out Match addMatch, out Match removeMatch)\n{\naddMatch = removeMatch = default(Match);\naddMatch = automaticEventPatternV4MCS.Match(ev.AddAccessor);\nif (!CheckAutomaticEventMatch(addMatch, ev, true))\nreturn false;\nremoveMatch = automaticEventPatternV4MCS.Match(ev.RemoveAccessor);\nif (!CheckAutomaticEventMatch(removeMatch, ev, false))\nreturn false;\nreturn true;\n}\n+\n                EventDeclaration TransformAutomaticEvents(CustomEventDeclaration ev)\n                {\n                        Match m1, m2;\nif (!CheckAutomaticEventV4(ev, out m1, out m2) && !CheckAutomaticEventV2(ev, out m1, out m2))\nif (!CheckAutomaticEventV4(ev, out m1, out m2) && !CheckAutomaticEventV2(ev, out m1, out m2) && !CheckAutomaticEventV4MCS(ev, out m1, out m2))\n                                return null;\n                        RemoveCompilerGeneratedAttribute(ev.AddAccessor.Attributes, attributeTypesToRemoveFromAutoEvents);\n                        EventDeclaration ed = new EventDeclaration();\n```\n. > Could you try to find out what mcs generates when using plain event syntax without initialization? (it might be that the original code in your example did indeed initialize the event...)\"\n\nActually, the class I'm looking at has two events, and the other one does NOT get initialized by an empty delegate. That either suggests a pretty blatant compiler bug, or more likely that it is indeed a user-specified construct.\nI'll try to find an mcs to see what it does, but meanwhile I'm leaning towards (to the point that I'm assuming) \"user-specified\". Provided that assumption is correct, the patch I provided could be considered both complete and final.\nAnother event pattern I have encountered (I should really open a new issue for this, but since it's somewhat related I'll piggyback on this one) is the following:\nprivate SomeType BackingField;\npublic event SomeType OnSomething\n{\n    [MethodImpl(MethodImplOptions.Synchronized)]\n    add\n    {\n        this.BackingField = (SomeType)Delegate.Combine(this.BackingField, value);\n    }\n    [MethodImpl(MethodImplOptions.Synchronized)]\n    remove\n    {\n        this.BackingField = (SomeType)Delegate.Remove(this.BackingField, value);\n    }\n}\nWhile pointless in light of event's being automatically thread-safe (at least nowadays), it's a pattern that is used and at least those method bodies should probably be recognized to not use the explicit call-sequence, but += and -=. It would be a stepping stone to correctness.\nComments?. I believe the \"probably wont fix\" label is in error, since from my testing the patch I provided is solving it.\nComments?. @siegfriedpammer re. automaticEventPatternV2, I think I found the source of the problem.\nThis is what the compiler produces. See anything unusual? Like, castclass?\nNo wonder the matcher didn't grok it.\nIf we take the add handler as an example, the AST becomes\nstfld bkFld(ldloc this, castclass TEvent(call Combine(ldfld bkFld(ldloc this), ldloc value))).\nIs it possible to add an optional qualifier to an added castclass in the matcher? If not, this would become yet another complete matching-rule, and the potential for a future explosion worries me a bit.\nUltimately, a compiler could chose to interleave other instructions without side-effects (while unlikely for MSIL, just see what f.ex. C compilers do with x86 code), leaving us in an unmanageable mess (again).\nI think what I'm getting at is that doing this parsing at this low level might eventually make the code unmanageable, and a higher-level approach would become needed. Instead of looking at explicit ldfld, stfldand so on, a more DFA-like approach could become neccessary.\nWe're not there just yet, but since I think it's an important consideration, and my idea here could have some merit, I felt it worth spending the space and time to share it.\nSidenote: Do you still think the mcs - probably wont fix tag applies? :-)\n```\n.event TEvent foo\n{\n    .addon instance void T::add_foo(class TEvent)\n    .removeon instance void T::remove_foo(class TEvent)\n}\n.method public hidebysig specialname \n    instance void add_foo (\n        class TEvent 'value'\n    ) cil managed synchronized \n{\n    .maxstack 8\nIL_0000: ldarg.0\nIL_0001: dup\nIL_0002: ldfld class TEvent T::eventBackingField\nIL_0007: ldarg.1\nIL_0008: call class System.Delegate::Combine(Delegate, Delegate)\nIL_000d: castclass TEvent  // <-\nIL_0012: stfld class TEvent T::eventBackingField\nIL_0017: ret\n\n}\n.method public hidebysig specialname \n    instance void remove_foo (\n        class TEvent 'value'\n    ) cil managed synchronized \n{\n    .maxstack 8\nIL_0000: ldarg.0\nIL_0001: dup\nIL_0002: ldfld class TEvent T::eventBackingField\nIL_0007: ldarg.1\nIL_0008: call class System.Delegate::Remove(Delegate, Delegate)\nIL_000d: castclass TEvent  // <-\nIL_0012: stfld class TEvent T::eventBackingField\nIL_0017: ret\n\n}\n```. @siegfriedpammer I have found the problem.\nIt's an obfuscated binary, where private members have 2-3 letter names, so the backing field has a different name than the accessor. This makes PatternStatementTransform.CheckAutomaticEventMatch fail, due to name mismatch.\nsigh I have been barking up the wrong tree the whole time. As a test, I relaxed that name check, and... it should come as no surprise it works.\nSorry for all the confusion.\nProvided that name check is useful, should I whip up a patch with a decompiler-option \"Don't require event's backing name to match\"?. @siegfriedpammer \n\nIf it's obfuscated, you should use a deobfuscator first.\n\nAlready done that, but the deobfuscator didn't rename the event backing fields to match the public field names. Maybe it should, or at least attempt to.\nBut this got me thinking: Is there really any promise that the backing field will always have the same name as the public event name? It would really surprise me if C#, or even CLR, held such a promise. I suspect it's more of a compiler implementation detail, where current compilers follow this convention. If that suspicion is correct, perhaps that name-check should simply not be performed? Could it lead to false positives if disabled/removed?. > But that leaves us with the problem that we would not longer be able to hide event backing fields\nGood point.\n\nand we do not want to decompile each event, when just displaying the members in the tree-view.\n\nIf applying some careful heuristics, would that really induce a noticable delay?\nIm thinking of something like\n If there is a private delegate\n if there is an event of the same type\n then attempt to decompile one of the event's accessor, to see if that is its backing field.\n make a linear search in the aggregating type (which I think would be quite fast) to see if the delegate is used by anything but the event.\nComing to think of it, the \"decompile event accessors\" step might even be redundant, and only slow it down.\nAnother option could be to just display them [the backing fields] as it works today, but once the decompilation kicks in it could apply these heuristics and do \"the right thing\" for a decompiled type.\nI don't know, maybe I over-think or over-engineer a potential solution to a problem not many have. If that's the case, I have no problem keeping local modifications.. The code is verified to display the bug. Feed it to ilasm and see it in action.\nWhile I haven't stepped through it in the debugger (yet), a suspicion is the looping back to IL_0000 (first time I ever seen such code I believe). It seems loop detection is failing, so I believe the control-flow should be all that is required.\nShould it turn out it's not enough, I can provide the complete method IL.. Seems I was on the right track. The following patch fixes it, but it feels more like a hack than a complete solution. Still, it displays the problem and how to solve it.\nindex f9cdec17..db8b82f4 100644\n--- a/ICSharpCode.Decompiler/CSharp/StatementBuilder.cs\n+++ b/ICSharpCode.Decompiler/CSharp/StatementBuilder.cs\n@@ -749,6 +749,7 @@ Statement ConvertLoop(BlockContainer container)\n                        BlockStatement blockStatement;\n                        continueCount = 0;\n                        breakTarget = container;\n+                       again:\n                        switch (container.Kind) {\n                                case ContainerKind.Loop:\n                                        continueTarget = container.EntryPoint;\n@@ -828,6 +829,14 @@ Statement ConvertLoop(BlockContainer container)\n                                                blockStatement.Add(new LabelStatement { Label = continueTarget.Label });                                        return forStmt;\n                        }\n+                       if (container.Children.Count > 0 &&\n+                               container.Children[0].ILRange.Start == container.ILRange.Start &&\n+                               container.Children[0].Children.Count > 0 &&\n+                               container.Children[0].Children[0].ILRange.Start == container.ILRange.Start)\n+                       {\n+                               container = (BlockContainer)container.Children[0].Children[0];\n+                               goto again;\n+                       }\n                        throw new NotSupportedException();\n                }. > The problem is that the unreachable (!) block IL_0037\nWell, obviously this gets messed up in the example, since all function calls and comparisons producing a result were ripped out. 0037 isn't unreachable in reality.\n\ncontains a br to IL_0000, and because of that the entry-point block has 2 incoming edges (one because it's the entry-point plus the additional br in the other block) which makes the decompiler think that the block container is a loop.\n\nRight. The actual loop was contained in an inner block.\n\nExplicitly remove unreachable blocks in the ILReader\n\nNo. That could provide surprises, not to mention it would make the IL disasm wrong, i.e. no longer matching what the IL actually is.\nWhat one could consider is either adding a (documentation) pointer to de4dot, or add an optional deobfuscation pass, to e.g. remove dead code, (re-)inline instructions-turned-into-functions etc., but by default I firmly believe the IL you see in ILSpy should match the IL \"on disk\".\n\nThis second approach is the one I will implement, because it seems to be the easiest fix for this problem.\n\nNot to mention it looks like the correct fix, as opposed to my hack (even that it did put us on track).\nI'll have a look at 1047.*, and check the generated C# output from the actual code with the committed fix in place.\nComing to think of it, couldn't this be reproduced with just a single loop (gets rid of the stack warnings), where loop-start == entry point (i.e. IL_0000)? Just to simplify the repro.. I reduced the repro to the following. Verified to fail without the extra check you added, and works with it. Gets rid of all decompilation warnings.\n.class public auto ansi beforefieldinit ProblemClass\n{\n    .field private static bool dummy;\n    .method private hidebysig instance void ProblemMethod() cil managed \n    {\n        IL_0000: ldfld bool ProblemClass::dummy;\n        brfalse L_tgt1\n        br L_exit\n        L_tgt1: br IL_0000\n        br IL_0000\n        L_exit: ret\n    }\n}. @dgrunwald That's really good news - I'll have to look into TypeHint!\nAs a follow-up on the report, I have now also experienced numerous occasions where an enumeration being compared to enumeratee with value 0 (zero) is decompiled to literal zero and then cast to enum type.\norig:\nenum E { first } class C { enum E e; void bar() { if (e == E.first) { ... } }\nfrequently (always?) gets decompiled into roughly\nif (e == (E)0) { ... }\nI haven't dug into the source yet to see where this is happening, but just maybe it could be related to the original issue.. @dgrunwald \n\nI don't think we should decompile it to the proper lock statement when it has different semantics.\n\nI beg to differ. For the compiler at the time that code was compiled, it was \"correct\". Only later was it realized \"Dang, this can screw up big time!\".\nIFF ILSpy is intended to properly decompile only binaries produced by the very latest version(s) of compilers, that position would have merit, but I had hoped the idea was to be able to decompile any version of MSIL generated by a compiler (no matter the version).\nI'd prefer emitting the lock() pattern the original code most likely used, but amend the decompiled src with a comment re. the problem.\nBut this leads to a related issue - is ILSpy only to be able to emit one single version of C# (the latest), or are there plans to allow it to emit older versions of the language too (a user setting)?\nI'm thinking about scenarios where f.ex. only an older compiler is available (to compile decompiled src), or where you have a decompiled src for, say, C#5, and want to diff it textually against a decompilation of a newer binary, where the decompilation is provided by a more recent ILSpy.\nTo take a more recent example, let's refer to this very issue. :-) With language-level \"latest\" that ugly generated code could be preferred, but if language-level was lowered it could emit the most likely src it was produced from (i.e. lock(...)).\nI realize it would add some complexity to ILSpy, but I also think the idea has merit.. It's from code found in the wild, though I obviously messed it up little when trying to anonymize it. The actual delegate (still anonymized) is\n.class public auto ansi sealed EvType extends [mscorlib]System.MulticastDelegate\n{\n    // Methods not included. Just the run of the mill ctor + {Begin|End}?Invoke \n}\nOwningClass indeed also have\n.field private class EvType EvName\nSorry about that - though in retrospect, I am also a bit surprised ilasm didn't complain.\nI have verified that it now works with HEAD, but I'll still send you the assembly for completeness.. I have given this some more work, and gotten it into a state where it \"works for me\", but it feels like a horrible hack since it's skipping BB-borders in the $disposing detection.\nAnyway, it could either potentially help someone else too, or serve as an idea of how this problem could be properly fixed.\n```\nindex 5b7b846f..dcc1c729 100644\n--- a/ICSharpCode.Decompiler/IL/ControlFlow/YieldReturnDecompiler.cs\n+++ b/ICSharpCode.Decompiler/IL/ControlFlow/YieldReturnDecompiler.cs\n@@ -57,6 +57,10 @@ class YieldReturnDecompiler : IILTransform\n                /// Set in MatchEnumeratorCreationPattern()\n                bool isCompiledWithMono;\n\n/// Whether or not the '$disposing' field from later in Mono mcs compiler-generated class is present\n/// Set in ConstructExceptionTable()\nbool hasMonoDisposingBoolField;\n+\n                /// The dispose method of the compiler-generated enumerator class.\n                /// Set in ConstructExceptionTable()\n                MethodDefinition disposeMethod;\n@@ -457,6 +461,9 @@ void ConstructExceptionTable()\n                                // On mono, we don't need to analyse Dispose() to reconstruct the try-finally structure.\n                                disposeMethod = null;\n                                finallyMethodToStateRange = null;\n// but it is good to know if it's using the new mcs style\nif (enumeratorType.Fields.Count(f => f.Name == \"$disposing\") == 1)\nhasMonoDisposingBoolField = true;\n                                return;\n                        }\n\n@@ -684,6 +691,33 @@ private BlockContainer ConvertBody(BlockContainer oldBody, StateRangeAnalysis ra\n                    void ConvertBranchAfterYieldReturn(Block newBlock, Block oldBlock, int i)\n                    {\n\n\n// begin HACKHACK\n// This horribly, horribly ugly hack is to work around current problems with Mono '$dispose' handling\n// inside MoveNext. It \"works\", in the sense it does in fact generate correct code, but from\n// UpdateBranchTargets called at the end of our caller's loop it's provoking \"Unexpected return in MoveNext()\".\nif (isCompiledWithMono && hasMonoDisposingBoolField) {\nif (oldBlock.Instructions.Count > i + 1\n&& oldBlock.Instructions[i + 1].MatchIfInstruction(out var disposeCondition, out var outTrueInst)\n&& disposeCondition.MatchLdFld(out var disposeLoadfieldInstruction, out var disposeField)\n&& disposeField.Type.FullName == \"System.Boolean\"\n&& disposeField.Name == \"$disposing\")\n{\nif (oldBlock.Instructions.Count > i + 2\n&& oldBlock.Instructions[i + 2].MatchBranch(out var targetBlock)\n&& targetBlock.Instructions.Count == 2\n&& targetBlock.Instructions[0].MatchStFld(out var tmpTarget, out var tmpField, out var tmpValue)\n&& tmpTarget.MatchLdThis()\n&& tmpField.MemberDefinition == stateField\n&& tmpValue.MatchLdcI4(out int tmpNewState)\n&& targetBlock.Instructions[1].MatchBranch(out var tgtBlock2)\n&& tgtBlock2.Instructions[0].MatchReturn(out var tmpRetVal) && tmpRetVal.MatchLdcI4(1))\n{\nnewBlock.Instructions.Add(MakeGoTo(tmpNewState));\nreturn;\n}\n}\n}\n// end HACKHACK\n                                if (!(oldBlock.Instructions[i + 1].MatchStFld(out var target, out var field, out var value)\n```. While I haven't looked at the code yet, I have tried to formulate some kind of description of potential heuristics.\n\nGoing for a third could be OK for smaller arrays, but would still not catch the problem with larger ones as you also noted.\nFor not-default initialized (say a CRC32 table) it's obviously a no-brainer, but let's say someone lifted some C++ code into IL-land, let's say it looks like static int foo[512] = { 1,2,3 }; foo[511] = 47; (foo[3] .. foo[510] would be zero).\nFor (even large) arrays where (almost) all elements are initialized to a non-default value, I think it would be correct to place them all as initializers. For that case (or maybe aways?) perhaps the cutoff could be log2(length) relative, since array-sizes can obviously vary wildly.\nTo make it more fun, this is also a recursive problem, if initializing multi-dimensional arrays (something ILSpy currently struggles with, and fails, at least when the elements are non-POD). Let's say we have int[4][17], where the second inner array of 17 is { 1,2,0,0... } but the rest are initialized with non-zero values. Do we want that single instance (that at n / 3 cutoff would trigger) to abort all initialization? For such a scenario, probably not.\nIt's an interesting problem. I'm not sure how to cover all bases (if it's even possible), but hopefully I provided some food for thought.. > what do you mean by \"POD\"?\nTerm from C/C++: \"Plain Old Data\".\n\n65536 items (most of them null) is a bit too much.\n\nHahaha. Perhaps a tad excessive, yes. :-)\n\nImplementing the \"a third\" rule would solve this.\n\nThat should be enough evidence to just do it.\n\nOr, maybe I am misunderstanding how the cut-off would be implemented in case of log2.\n\nI was a bit unclear, and probably hadn't thought it through properly. IIRC I was probably thinking of comparing log2(array size) vs. log2(# of initialized elements). Not sure what I thought that would accomplish. Let's forget I mentioned it.\nI'll try to find a small-ish example of 2-dimensional array init failing, where ILSpy instead reverts to manual assignment of each array element, and follow up here when I do.. Example of failing to array-init. Test-compiled with csc 2.10.0.0, followed by letting ILSpy do its thing on the generated dll.\npublic class C {\n    class V3f { float x,y,z; public V3f(float _x, float _y, float _z) { x=_x;y=_y;z=_z; } }\n    // decompilation of rg1 init fails. It becomes 9 separate (local) objects, each\n    // manually assigned to rg1[x,y]\n    static V3f[,] rg1 = new V3f[3,3] {\n        { new V3f(1,1,1), new V3f(1,1,1), new V3f(1,1,1) },\n        { new V3f(1,1,1), new V3f(1,1,1), new V3f(1,1,1) },\n        { new V3f(1,1,1), new V3f(1,1,1), new V3f(1,1,1) }\n    };\n    // rg2 \"works\". ILSpy still puts the init code in \"manual\" static ctor, instead of field init.\n    static int[,] rg2 = new int[3,3] {\n        { 1,1,1 },\n        { 1,1,1 },\n        { 1,1,1 }\n    };\n}\n. @christophwille Thanks. Manually installing .NET Core 2.2 SDK made the build work again.\nSo Microsoft made a breaking change, where if you don't update/modify the XML tag it displays a deprecation warning, and if you do update the tag it completely fails to build using the mainstream tool (read: included in VS, even the latest non-testing version)?\nrolleyes Only in Redmond...\nI'm leaving this issue open for now; In case someone else encounters the error (seems likely) it's easier found. Once it's included in a VS \"stable\" release it should be closed.. > in C# as with non-nullable value types is not permitted. Not sure how we should solve this, because a regular cast has different semantics.\nif (expr is T) { T t = (T)expr; ... } ?. No one has ever accused the Microsoft C# compiler of producing optimized code. :-)\nSidenote: It's actually stated as a fact by someone high up in the C#/Roslyn toolchain they just don't care about IL quality. They defer it to the JIT and let that handle it. Seems to have become a common pattern: let someone else deal with it.. > (decompiling a whole project uses multiple instances of the engine in parallel)\nAha, that explain why decompilation keeps running even when e.g. an assert has triggered!\n\nI don't think there's anything we can do here without giving up this assertion completely, and it's far too valuable for that.\n\nAgreed.. Never thought of that. I thought it was simply a bug in the local variable name generator, where it missed to check e.g. foreach-introduced \"current\" identifier, or the other way around, whether immediately or after some transformations allowing the foreach.\nI'll see what I can dig up in terms of repro.. Well, it is introduced by PatternStatementTransform, turning a for i loop into foreach.\nHere's the IL. I hope it helps:\n```\n.method public hidebysig static \n    int32 GetCardinality (\n        class [mscorlib]System.Collections.BitArray bitArray\n    ) cil managed \n{\n    .maxstack 5\n    .locals init (\n        [0] int32[],\n        [1] int32,\n        [2] int32,\n        [3] int32\n    )\nIL_0000: ldarg.0\nIL_0001: callvirt instance int32 [mscorlib]System.Collections.BitArray::get_Count()\nIL_0006: ldc.i4.5\nIL_0007: shr\nIL_0008: ldc.i4.1\nIL_0009: add\nIL_000a: newarr [mscorlib]System.Int32\nIL_000f: stloc.0\nIL_0010: ldarg.0\nIL_0011: ldloc.0\nIL_0012: ldc.i4.0\nIL_0013: callvirt instance void [mscorlib]System.Collections.BitArray::CopyTo(class [mscorlib]System.Array, int32)\nIL_0018: ldc.i4.0\nIL_0019: stloc.1\nIL_001a: ldloc.0\nIL_001b: ldloc.0\nIL_001c: ldlen\nIL_001d: conv.i4\nIL_001e: ldc.i4.1\nIL_001f: sub\nIL_0020: ldelema [mscorlib]System.Int32\nIL_0025: dup\nIL_0026: ldind.i4\nIL_0027: ldc.i4.m1\nIL_0028: ldarg.0\nIL_0029: callvirt instance int32 [mscorlib]System.Collections.BitArray::get_Count()\nIL_002e: ldc.i4.s 32\nIL_0030: rem\nIL_0031: ldc.i4.s 31\nIL_0033: and\nIL_0034: shl\nIL_0035: not\nIL_0036: and\nIL_0037: stind.i4\nIL_0038: ldc.i4.0\nIL_0039: stloc.2\nIL_003a: br.s IL_007b\n// loop start (head: IL_007b)\n    IL_003c: ldloc.0\n    IL_003d: ldloc.2\n    IL_003e: ldelem.i4\n    IL_003f: stloc.3\n    IL_0040: ldloc.3\n    IL_0041: ldloc.3\n    IL_0042: ldc.i4.1\n    IL_0043: shr\n    IL_0044: ldc.i4 1431655765\n    IL_0049: and\n    IL_004a: sub\n    IL_004b: stloc.3\n    IL_004c: ldloc.3\n    IL_004d: ldc.i4 858993459\n    IL_0052: and\n    IL_0053: ldloc.3\n    IL_0054: ldc.i4.2\n    IL_0055: shr\n    IL_0056: ldc.i4 858993459\n    IL_005b: and\n    IL_005c: add\n    IL_005d: stloc.3\n    IL_005e: ldloc.3\n    IL_005f: ldloc.3\n    IL_0060: ldc.i4.4\n    IL_0061: shr\n    IL_0062: add\n    IL_0063: ldc.i4 252645135\n    IL_0068: and\n    IL_0069: ldc.i4 16843009\n    IL_006e: mul\n    IL_006f: ldc.i4.s 24\n    IL_0071: shr\n    IL_0072: stloc.3\n    IL_0073: ldloc.1\n    IL_0074: ldloc.3\n    IL_0075: add\n    IL_0076: stloc.1\n    IL_0077: ldloc.2\n    IL_0078: ldc.i4.1\n    IL_0079: add\n    IL_007a: stloc.2\n\n    IL_007b: ldloc.2\n    IL_007c: ldloc.0\n    IL_007d: ldlen\n    IL_007e: conv.i4\n    IL_007f: blt.s IL_003c\n// end loop\n\nIL_0081: ldloc.1\nIL_0082: ret\n\n}\n```. For your consideration.\nWhile on the subject...\n2*PI is a common constant used in some types of applications.\nIf a type is already using something from the namespace UnityEngine,\nnamespace UnityEngine {\npublic struct Mathf\n{\n    public const float PI = 3.14159274f;\n    public const float Infinity = float.PositiveInfinity;\n    public const float NegativeInfinity = float.NegativeInfinity;\n    public const float Deg2Rad = 0.0174532924f;\n    public const float Rad2Deg = 57.29578f;\n    public static readonly float Epsilon;\n}}\nShould UnityEngine(.Mathf?) not already be included, perhaps deg<->rad constants could be added to the \"specials\" list and become inlined (180f/PI) etc?\nJust some ideas.. ",
    "yaakov-h": "Hmmm. I see this in a lot of machines, but the only AV running on any of them is Windows Defender.\nMy machine in particular:\nWindows 10 Enterprise x64 FCU\ni9-7900X CPU, not overlocked\n64GB RAM\nSSD (Samsung 960 EVO)\nThe strange pauses above only happen on the first launch of ILSpy. Subsequent launches are fine.\nILSpy is also the only application affected.\n\ud83d\ude15 . This seems to be caused by Windows Defender. After adding ILSpy's folder to the exclusions list, it starts up quickly.\n\ud83d\ude15 . Hmm, thanks. I'll try it.. ",
    "egorikas": "@lextm ok. I'll try it. Thank you. The problem was in the decompiler options. I'd turned off everyone and saw the statemachine. Thank you. ",
    "alohaninja": "Spot-on! That did the trick. I just had to remove the PDB for it to load. Thanks for the tip and quick response! . ",
    "adamralph": "\ud83d\udc4d thanks for the info. That solves my immediate need.\nI'll withdraw this issue and replace it with #810.. Fantastic. Thanks!. ",
    "Radon222": "Resolved in Pull Request Allow Multiple Instance Option and Dialog #818\nhttps://github.com/icsharpcode/ILSpy/pull/818. Fixed in #1066 . @siegfriedpammer @arturek @Matthew-Bonner @Verser @migig @eusebiu. ",
    "hezlog": "Merge source update. Merge source update. ",
    "NET-D3v3l0p3r": "Nevermind.. it is already implemented lol. ",
    "arthurborisow": "same problem for me with .net core project. ",
    "screig": "Seems to be a net core problem rather than VS 2017, try with a net framework project. I think the issue could be that when you try to open it from VS that is expecting an exe rather that a dll. For a console app (created in VS2017 in this case) a Net Core project produces a dll, where as under the Net Framework it produces an exe? Just an idea....\n. Would agree with that, essentially I think it can read all the formats, its just looks like it is not finding the correct dir,. ",
    "Zastai": "If you create a NET desktop project, the csproj you get is still the \"old\" format (MSBuild 14), with almost everything spelled out. This only supports targeting a single framework at a time, and output goes in a $(Configuration) subdirectory.\nThe \"new\" format (MSBuild 15) is much leaner (in fact, you will often just specify the project type and target framework(s)); Visual Studio only generates such projects for .NET Core/Standard templates, but they can target the desktop framework too.\nBecause these support targeting multiple frameworks in one project, the output structure has changed, without output being under $(Configuration)\\$(TargetFramework).\nThere is indeed the additional \"fun\" that a build core console app is a .dll and you only get a .exe when publishing (which adds additional subdirectories per target runtime); but that shouldn't affect ILSpy much, as long as it picks up the .dll.\nIt would be a start when the plugin is able to find the output for single-target new-format projects; however, for multi-target projects, it may have to pop up UI to select the specific assembly to open.. It mainly depends on whether you're using the \"fancier\" parts of MEF 1 (custom ExportProviders or catalogs) or relying on recomposition (i.e. dropping a plugin into the folder makes it immediately available in running instances).\nIf not, rewriting the hosting side to use MEF 2 or VS MEF shouldn't be very difficult. I'll have a look.\nHaving said that, the biggest speed boost often comes from a) having a dedicated subdirectory for parts, and b) splitting larger plugins so that the plugin part is in the plugins dir, referencing the bigger implementation part, which is in the application's normal lookup path. That way, MEF has far fewer types to scan (MEF 1 especially, because it looks at ALL types, not just public ones).. I have it pretty much working already.\nThe main thing I've hit is that VS MEF itself does not provide ComposeParts()/SatisfyImportsOnce() functionality - it's set up to resolve [Imports] only for [Export]ed types.\nThere's two approaches:\n1. I can try to see if I can use an MEF1 container using VS MEF exports (but even if that works, it adds another layer of indirection)\n2. I can remove the [Import] tags and replace the ComposeParts() call with the appropriate GetExport*() calls\nSo far I have done 2. because there aren't many imports. I could look into 1. if it was strongly preferred.\nIs there some plugin set used for testing (both for ensuring all types of parts are present, and to have a long startup time)?. OK, pull request 1058 created. This seems to work, but I've not tested it much beyond throwing in the test plugin and some of the bigger ones like Reflexil.\nCurrently, the discovery does MEF1 only. If MEF2 support on the plugin side is desirable, it can be easily activated; but the heavy WPF dependency probably makes it pointless (MEF2 is only relevant if a plugin wants to work on .NET Core/Standard, and there's no WPF there anyway).. OK, I tried all of the plugins on that page (except that alphabetical sort 1.0.0.2 because the download didn't work). I used the All-in-One Reflexil, to ensure there's no issues with the special Cecil dlls it otherwise includes.\nILSpy.CopyFullyQualifiedTypeName.Plugin breaks the context menu; but that's also the case in the released version. Looks like this is because Mono.Cecil's 0.10.0-beta7 is signed with a different key than 0.9.5.\nAll the others seem to work. Visually, there's a slight difference, because toolbar items are in a different order (discovery in mef1/mef2/vs-mef is slightly different); if this is relevant, some sort of metadata-based ordering will need to be added.\nI've pushed another commit to the PR, adding an about page extension to the test plugin (which incidentally adds stuff at the top of the about page, while I would have expected it at the end).. ",
    "KostaVlev": "I am still getting the same error. Using -> Open code in ILSpy in netcoreapp2.0 project I get error message \"Could not find assembly\".. ",
    "bakhodirk": "ILSpy crashes on opening assembly which compiled under new debug information \"portable\". Use others instead portable, ILSpy will open well.. ",
    "audinue": "Thank you very much for the fix \ud83d\ude04 . ",
    "Kein": "\nPlease note that we do not restore the foreach loop, but keep the try-finally-Dispose() structure and a nested if statement.\n\nCan you elaborate on this? You mean you do not restore already altered code or you mean you still process foreach in nested IFs as IDisposale enumerator while loop? What exactly was fixed then in the 2nd case I wonder?. Oh good lord. ",
    "WizX20": "Never mind, our system admin was working on our Chinese wall again.. ",
    "mmusu3": "Thanks for the fast response.. I have found other cases that don't appear to be due to Current optimizations.\nCompiled in release mode.\n```cs\nvoid Test2(Dictionary pairs)\n{\n    int num = 0;\nforeach (KeyValuePair<int, int> pair in pairs)\n{\n    if (pair.Key > pair.Value)\n        num += 1;\n}\n\n}\nProduces this:cs\nprivate void Test2(Dictionary pairs)\n{\n    int num = 0;\n    using (Dictionary.Enumerator enumerator = pairs.GetEnumerator())\n    {\n        while (enumerator.MoveNext())\n        {\n            KeyValuePair pair = enumerator.Current;\n            if (pair.Key > pair.Value)\n            {\n                num++;\n            }\n        }\n    }\n}\n. It seems that recent commits have fixed most cases including those above. However I have found another. Compiled in release.cs\nstring Test3(string str)\n{\n    string result = str;\nforeach (var obj in GetObjects())\n{\n    if (obj.Str1 == str)\n    {\n        result = obj.Str2;\n        break;\n    }\n}\n\nreturn result;\n\n}\nstruct Data\n{\n    public string Str1;\n    public string Str2;\n}\nList GetObjects() => new List();\nProduces:cs\nprivate string Test3(string str)\n{\n    using (List.Enumerator enumerator = this.GetObjects().GetEnumerator())\n    {\n        Data obj;\n        while (true)\n        {\n            if (enumerator.MoveNext())\n            {\n                obj = enumerator.Current;\n                if (obj.Str1 == str)\n                    break;\n                continue;\n            }\n            return str;\n        }\n        return obj.Str2;\n    }\n}\nprivate List GetObjects()\n{\n    return new List();\n}\n. Hi, sorry to continue with this but the previous test case seems to have been fixed however I have found another simpler test case that is still incorrect.cs\nobject Test4(List objects)\n{\n    foreach (var obj in objects)\n        return obj;\nreturn null;\n\n}\nProduces:cs\nprivate object Test4(List objects)\n{\n    using (List.Enumerator enumerator = objects.GetEnumerator())\n    {\n        if (enumerator.MoveNext())\n        {\n            return enumerator.Current;\n        }\n    }\n    return null;\n}\nI hope my test isn't *too* simple.. Whoops! I should have noticed there was no while loop output in that last example. Sorry. I guess I reduced the test case too much. I think the problem I was seeing may still be present though so I will try to get a better example. Thanks for all the work you've done so far!. Hi, thanks for addressing this issue. However, I have found another test case similar to the first that is still decompiled incorrectly.cs\nclass Item { }\nvoid Test2(int[] ids)\n{\n    for (int i = 0; i < ids.Length; i++)\n    {\n        Item item;\n        TryGetItem(ids[i], out item);\n    if (item == null)\n        return;\n}\n\n}\nvoid TryGetItem(int id, out Item item) => item = null;\nProduces:cs\nprivate class Item\n{\n}\nprivate void Test2(int[] ids)\n{\n    int i = 0;\n    while (i < ids.Length)\n    {\n        Item item = default(Item);\n        this.TryGetItem(ids[i], out item);\n        if (item != null)\n        {\n            i++;\n            continue;\n        }\n        break;\n    }\n}\nprivate void TryGetItem(int id, out Item item)\n{\n    item = null;\n}\n```. I can still reproduce the issue as of 7af15d27cddcd6c4ff8ab8db48d8f0bb4fee7689. I am using VS 15.4 c# 7 in release mode.. I think this is the first I've seen but if I come across any more I'll be sure to report them.. I have another test case for this issue. Tested at commit 17d19cd04a9f6c8419772dcd88dce8d01f17e2d6\nSource:\n```cs\nstruct Data\n{\n    public bool Condition { get; set; }\n}\nstatic Data GetData()\n{\n    throw new NotImplementedException();\n}\nstatic void Test()\n{\n    Data data = GetData();\n    data.Condition = false;\n}\n```\nOutput:\n```cs\nstruct Data\n{\n    public bool Condition\n    {\n        get;\n        set;\n    }\n}\nstatic Data GetData()\n{\n    throw new NotImplementedException();\n}\nstatic void Test()\n{\n    GetData().Condition = false;\n}\n``. In this case the compiler does generate a local variable even in release.GetData().Condition = false;is invalid since it produces an error:Error CS1612 Cannot modify the return value of 'GetData()' because it is not a variable`.\nI though that this example might be a bit too simple to be representative. Here is another that is more like the original problem I encountered where the struct is a wrapper for unmanaged data (still simplified). I hope it gives a better idea of the issue.\nSource:\n```cs\nunsafe struct Data\n{\n    byte* ptr;\npublic bool Condition\n{\n    get { return *(bool*)ptr; }\n    set { *(bool*)ptr = value; }\n}\n\n}\nstatic Data GetData()\n{\n    throw new NotImplementedException();\n}\nstatic void Test()\n{\n    Data data = GetData();\n    data.Condition = false;\n}\n```\nOutput:\n```cs\nprivate struct Data\n{\n    public unsafe bool Condition\n    {\n        get\n        {\n            return ptr != 0;\n        }\n        set\n        {\n            ptr = (value ? ((byte)1) : ((byte)0));\n        }\n    }\nprivate unsafe byte* ptr;\n\n}\nprivate static Data GetData()\n{\n    throw new NotImplementedException();\n}\nprivate static void Test()\n{\n    GetData().Condition = false;\n}\n. This is still an issue in some cases, eg:cs\nstruct Data\n{\n    public int Property { get; set; }\n}\nvoid Test(List items, int value)\n{\n    foreach (var item in items)\n    {\n        var i = item;\n        i.Property = value;\n    }\n}\nOutput:cs\nprivate struct Data\n{\n    public int Property // Would be nice if this were a single line :)\n    {\n        get;\n        set;\n    }\n}\nprivate void Test(List items, int value)\n{\n    foreach (Data item in items)\n    {\n        item.Property = value;\n    }\n}\n`Error CS1654 Cannot modify members of 'item' because it is a 'foreach iteration variable'`. This isn't a breaking issue for me just something I would prefer to see done. If there are no plans to implement this you can close the issue.. I have found that generated Linq Expression trees use ldtoken instructions. eg:cs\nusing System.Linq.Expressions;\nclass MemberTokens\n{\n    static bool Value;\nstatic void Test()\n{\n    Expression<Func<bool>> expr1 = () => Value;\n    Expression<Func<Action>> expr2 = () => Test;\n}\n\n}\nOutput:cs\nusing System;\nusing System.Linq.Expressions;\nusing System.Reflection;\ninternal class MemberTokens\n{\n    private static bool Value;\nprivate static void Test()\n{\n    Expression.Lambda<Func<bool>>((Expression)Expression.Field(null, FieldInfo.GetFieldFromHandle((RuntimeFieldHandle)/*OpCode not supported: LdMemberToken*/)), Array.Empty<ParameterExpression>());\n    Expression.Lambda<Func<Action>>((Expression)Expression.Convert(Expression.Call(Expression.Constant((MethodInfo)MethodBase.GetMethodFromHandle((RuntimeMethodHandle)/*OpCode not supported: LdMemberToken*/), typeof(MethodInfo)), (MethodInfo)MethodBase.GetMethodFromHandle((RuntimeMethodHandle)/*OpCode not supported: LdMemberToken*/), new Expression[2]\n    {\n        Expression.Constant(typeof(Action), typeof(Type)),\n        Expression.Constant(null, typeof(object))\n    }), typeof(Action)), Array.Empty<ParameterExpression>());\n}\n\n}\n```. Test 1 does appear to be resolved now, thanks.\nI am ok with how Test 2 is.\nI have found other issues though.\nThis one doesn't seem to be quite the same as test 2.\nThe equality test is using Type.op_Equality however the null is not implicitly cast.\ncs\nvoid Test4(Type type)\n{\n    if (type == null)\n        NoOp();\n}\nOutput:\ncs\nprivate void Test4(Type type)\n{\n    if (type == (Type)null)\n    {\n        this.NoOp();\n    }\n}\nHere Type is cast to MemberInfo as that is what GetCustomAttribute requires however the cast should be implicit.\ncs\nAttribute Test5(Type type)\n{\n    return System.Reflection.CustomAttributeExtensions.GetCustomAttribute<AttributeUsageAttribute>(type);\n}\nOutput:\ncs\nprivate Attribute Test5(Type type)\n{\n    return ((MemberInfo)type).GetCustomAttribute<AttributeUsageAttribute>();\n}\nAnother similar case:\n```cs\nstatic float Test6(string value, float defaultValue)\n{\n    float result;\n    if (float.TryParse(value, System.Globalization.NumberStyles.Float, System.Globalization.CultureInfo.InvariantCulture, out result))\n        return result;\nreturn defaultValue;\n\n}\nOutput:cs\nprivate static float Test6(string value, float defaultValue)\n{\n    float result = default(float);\n    if (float.TryParse(value, NumberStyles.Float, (IFormatProvider)CultureInfo.InvariantCulture, out result))\n    {\n        return result;\n    }\n    return defaultValue;\n}\nLastly returning a valuetype enumerator as an IEnumerable causes two casts, one being a boxcs\nclass EnumerableClass : IEnumerable\n{\n    List list;\npublic IEnumerator<T> GetEnumerator() => list.GetEnumerator();\nIEnumerator IEnumerable.GetEnumerator() => list.GetEnumerator();\n\n}\nOutput:cs\nprivate class EnumerableClass : IEnumerable, IEnumerable\n{\n    private List list;\npublic IEnumerator<T> GetEnumerator()\n{\n    return (IEnumerator<T>)(object)this.list.GetEnumerator();\n}\n\nIEnumerator IEnumerable.GetEnumerator()\n{\n    return (IEnumerator)(object)this.list.GetEnumerator();\n}\n\n}\nThese cover most of the casting issues I have found so far.. When decompiled the space after the first null is missingcs\nvoid Test(object a, object b)\n{\n    if (a != null && b != null)\n        Console.WriteLine();\n}\n```. This is still happening in some cases. Still only with VS 2013.\nSource:\n```cs\nclass BaseClass\n{\n    protected BaseClass(int? arg1 = null,\n                        int? arg2 = null,\n                        string arg3 = null,\n                        bool arg4 = false,\n                        bool arg5 = false,\n                        bool arg6 = false)\n    { }\n}\nclass DerivedClass : BaseClass\n{\n    public DerivedClass()\n        : base(arg3: \"\", arg5: true, arg4: true, arg6: true) { }\n}\n```\nOutput:\n```cs\ninternal class BaseClass\n{\n    protected BaseClass(int? arg1 = default(int?), int? arg2 = default(int?), string arg3 = null, bool arg4 = false, bool arg5 = false, bool arg6 = false)\n    {\n    }\n}\ninternal class DerivedClass : BaseClass\n{\n    public DerivedClass()\n    {\n        bool arg = true;\n        base..ctor(null, null, \"\", arg4: true, arg, arg6: true);\n    }\n}\n```. Sorry! I figured since it seemed to be the same issue that it would fit here. I will open new issues in future. Also thank you for fixing my other recent issues so quickly!. This appears to be fixed now. Tested at commit f6aae1f9.. I am still able to reproduce this.\nTest case:\n```cs\nstruct SomeData\n{\n    public string Value;\n}\nvoid Test(SomeData data)\n{\n    DoAction(delegate {\n        DoAction(delegate {\n            DoSomething(data.Value);\n        });\n    });\n}\nvoid DoAction(Action action) { }\nvoid DoSomething(string text) { }\nOutput:cs\nprivate struct SomeData\n{\n    public string Value;\n}\nprivate void Test(SomeData data)\n{\n    this.DoAction(delegate\n    {\n        this.DoAction(delegate\n        {\n            SomeData data2;\n            this.DoSomething(data2.Value);\n        });\n    });\n}\nprivate void DoAction(Action action) { }\nprivate void DoSomething(string text) { }\n``. Can this issue be reopened?. Seems to only happen in release mode.\n[ILSpyTests.zip](https://github.com/icsharpcode/ILSpy/files/1513725/ILSpyTests.zip)\n. Looks like I accidentally left a second string parameter in the tests, however the problem still exists without it.. I figured this one might be more difficult. I made this issue however because these did decompile back into boolean operators in ilspy v2. If you think this is never going to happen in v3, you can close the issue.. Sorry, the instructions may have been faulty as I have been using the decompiler as a library. The issue seems to be mostly resolved however there is still a problem with resx renaming. Resources with long names are not having their file extension changed correctly due to the 64 character limit set inWholeProjectDecompiler.CleanUpFileName`. Thank you for looking into this.. Maybe it would be better it CleanUpFileName excluded the extension when trimming the path. Otherwise resources files may not get recognized as such due to the extension getting trimmed which is the issue I was having.. Is it a bug in the compiler that compiled the Unity dlls or the TestProject? I compiled TestProject using the most recent release version of Visual Studio at the time. I have experienced this issue both in a Unity assembly and a non unity assembly. I would expect them to have been compiled with different compilers. I had been trying to isolate a small reproduction from a non Unity project since ILSpy v2 but had never manged to create one, so when I eventually got this one I gave up and sent it with the Unity dlls as is. The test project was not compiled with unity, it only references the dlls from elsewhere.. It sounds like there's not much you can do. Can the erroneous methods be removed since they have reserved names that cause compiler errors or are they required in some way for the program to function correctly? I know my test isn't a great example of such behavior but you'd know better than me if that is the case. If there is nothing you can do I'll just have to manually deal with the few cases that appear. Thanks for looking into this!. Hey sorry I accidentally posted early and am trying to finish the issue. I've added the code used. Do you still need the binary?. @siegfriedpammer You were too fast for me. I have now added all the info that I was meaning to.. ",
    "KirillOsenkov": "I was basically expanding the References node for an assembly and at the same time it added all the new (blue) reference assemblies to the treeview. Unfortunately I'm not sure if it's reproducible because I kept clicking around and it seemed OK. Also, ILSpy didn't crash, but just displayed a MessageBox with the stack, where I copied it from.. From quick reading of the source code, the error is somewhere here:\nhttps://github.com/icsharpcode/ILSpy/blob/master/SharpTreeView/SharpTreeNodeView.cs#L135-L151\nSo either the Node is null, or ParentTreeView is null. Probably need to trace the data flow through these variables to see how they could be null, and add a bunch of checks everywhere.. This happens during layout, so likely another thread may have mutated something while the layout was in progress, so there may be some synchronization missing somewhere.. Yup, embedding the pdb into the dll is now supported. Also use SourceLink to map to the sources on Github. Also consider Nerdbank.GitVersioning to bake the Git Sha into the dlls.. I\u2019d need this in Roslyn, since we\u2019re using whatever Roslyn is using. If you just batch this with whatever other updates planned, that\u2019d be great. For now we\u2019ve worked around by using Reflection, but it\u2019d be nice to move to real API in the future. It\u2019s not urgent. Thanks!. I\u2019ll let you know if I find anything next week, but so far this is it! Thanks!. This is awesome! Thank you! \ud83d\udc4d . cc @jbevain - what is your stance on hardening Cecil against obfuscated assemblies?. @ELFLE - would you please file a new issue over at https://github.com/jbevain/cecil/issues/new and attach the assembly in question?. OK so it looks like the assembly is specifically crafted to make Cecil crash :) In that case I think this bug needs a try/catch in AbstractSearchStrategy.Search wrapping the Cecil TypeDefinition.get_Methods() call.. Here's how I currently achieve this:\nhttps://github.com/mono/monodevelop/pull/3682/commits/55e62ff10d6a796d7504773b2f740452dc860d38. Thanks a lot for this work! From reviewing it looks great as far as I can see. We'll pick up the new version with the next Roslyn update, and there's no rush since we have a workaround for now.\nNothing else comes to mind for now, but I'll be sure to open new issues if I discover anything else.. :+1:. One thing that's interesting about this test is that it compiles and decompiles in memory, nothing is ever written to disk. One might consider adopting this approach instead of compiling to disk.. Nope. Any branch you want. Let me know and I can rebase if needed.. Rebased against latest master and squashed.. Ah, thanks, that's exactly the missing piece I've been looking for. The test fails in Debug because it asserts that the tree has locations, and it doesn't.\nI've added the code above to the test and it now works great! I will update my PR shortly.\nOne thing I've noticed is that your snippet above is a bit redundant: WrapInWriterThatSetsLocationsInAST does this:\nhttps://github.com/icsharpcode/ILSpy/blob/0cd8e21ff7cdbfa30875a669480c3c5474ac1d5d/ICSharpCode.Decompiler/CSharp/OutputVisitor/ITokenWriter.cs#L75\nBasically it adds InsertSpecials, InsertRequiredSpaces and InsertMissingTokens.\nThe CSharpOutputVisitor ctor used does this:\nhttps://github.com/icsharpcode/ILSpy/blob/0cd8e21ff7cdbfa30875a669480c3c5474ac1d5d/ICSharpCode.Decompiler/CSharp/OutputVisitor/CSharpOutputVisitor.cs#L60\nIt also adds InsertSpecials and InsertRequiredSpaces. One of those doesn't need to add those two which are duplicated.\n. Perfect, I've updated #1040 with the information you gave me and it seems to work great! That would be a good sample of how to get sequence points.\nI have to admit that I've read the code and I still don't understand at what point the syntax tree gets mutated by the CSharpOutputVisitor to contain the TextLocations.\nAlso see my comment above regarding duplicated InsertSpecialsDecorator and InsertRequiredSpacesDecorator - you decide if it's a bug that you want to fix, I can file it if needed.. ",
    "mohe2015": "Are errors like these important?. Okay, thanks for the explanation. I can't share the dump as the program is private but I will keep that in mind.. I found the cause of that. There is the following method definition in that class:\n```\n// TestHandler\nusing System.Diagnostics;\nusing System.Net.Http;\nusing System.Runtime.CompilerServices;\nusing System.Threading;\nusing System.Threading.Tasks;\n[CompilerGenerated]\n[DebuggerHidden]\nprivate Task <>n__0(HttpRequestMessage request, CancellationToken cancellationToken)\n{\n    return base.SendAsync(request, cancellationToken);\n}\nBut it gets hidden in the C# view. Is there already code to simplify such indirect calls or would I or somebody else need to write that?\n. I'm working on this.. If I run `dotnet ilspycmd.dll target.exe -p -o .` I see the AssemblyResolutionException with a specific file I can't share.\nThe error is:\nMono.Cecil.AssemblyResolutionException: Failed to resolve assembly: 'Windows, Ve\nrsion=255.255.255.255, Culture=neutral, PublicKeyToken=null'\n   at Mono.Cecil.BaseAssemblyResolver.Resolve(AssemblyNameReference name, Reader\nParameters parameters)\n   at ICSharpCode.Decompiler.Console.CustomAssemblyResolver.Resolve(AssemblyName\nReference name, ReaderParameters parameters) in C:\\Users***\\Documents\\ILSp\ny\\ICSharpCode.Decompiler.Console\\CustomAssemblyResolver.cs:line 79\n```\nI also wondered but it decompiled fine without that and the GUI also doesn't crash.\nThe bug with the duplicate appending of the targetDirectory should be clear: It happened to me if -o is anything except .. I checked both the gui and the console and it worked. But it would be good if somebody else could verify that.\nEdit: If somebody tests it - keep in mind that the console version fetches it's dependencies from NuGet. You have to change that to test ILSpy.Decompiler.Console\nEDIT2: I verified it twice now. It works!. I'm also not familiar with that but I'll try to find that out tomorrow. It's 11pm in Germany and I have school tomorrow...\nIf somebody knows that stuff better, please let us know.. I thought I added it last time. Maybe Visual Studio's git integration does not work well.  I will fix that tomorrow.. Merge or change something?. @dgrunwald I partially agree with you. But for Windows it could be convenient, couldn't it? It's also platform independent.. Found a way how to do it on windows. Execute the following script in the git shell using bash script.sh:\ncd \"binariesdir\"\nfind . -type f \\( -name \"*.exe\" -or -name \"*.dll\" \\) -print0 | while IFS= read -r -d $'\\0' line; do\n    echo \"$line\"\n    target=\"outputdir/${line::-4}\"\n    mkdir -p \"$target\"\n    dotnet \"ilspydir/ICSharpCode.Decompiler.Console/bin/Release/netcoreapp2.0/ilspycmd.dll\" \"$line\" -p -o \"$target\"\ndone. Better? - Squash merge?. I don't have the source code. I can only provide the ILAst:\nOriginal:\n```\n} catch ex : System.Exception when (BlockContainer {\n    Block IL_0000 (incoming: 1)  {\n        stloc obj2(ldloc ex)\n        leave IL_0000 (comp.unsigned(logic.or(comp(isinst System.Net.Http.HttpRequestException(ldloc obj2) != ldnull), comp(isinst System.IO.IOException(ldloc obj2) != ldnull)) != ldc.i4 0))\n    }\n}) BlockContainer {\n    Block IL_0000 (incoming: 1)  {\n         censored callvirt \n        leave IL_0000 (nop)\n    }\n}\nnew:\n} catch obj2 : System.Object when (comp.unsigned(logic.or(comp(isinst System.Net.Http.HttpRequestException(ldloc obj2) != ldnull), comp(isinst System.IO.IOException(ldloc obj2) != ldnull)) != ldc.i4 0)) BlockContainer {\n    Block IL_0000 (incoming: 1)  {\n         censored callvirt \n        leave IL_0000 (nop)\n    }\n}\n```. @siegfriedpammer I'm not allowed to, but I ran the pull request over a few files and it worked correctly (I'm using the mass-decompile for that). Edit: I'm trying to create a test case or find a place where I can give you the IL-code.. @siegfriedpammer Switch to gitter.. @dgrunwald You're probably right. But for the target assembly it worked and it produces at least some code instead of no code. If it could produce logically WRONG code, you may give me a hint how to fix that.. What about a try catch (AmbiguousMatchException) and a check if GetMethod returns null and if that's the case add a comment that something went wrong?\nDoes anybody know how to create code that emits a ldmembertoken instruction?. @dgrunwald edit: fail, I know what you mean\nI will try to alert the developer at compile time if there is no clear case.. The code in my assembly also used expression trees so we should fix them first.. @dgrunwald Done! Anything else?\nEdit: Test fails on build server, I have to look into that.. @dgrunwald And now?. @dgrunwald Thank you very much for all your help! I really appreciate it. I hope I didn't forget anything. One of the tests doesn't work with [roslyn, optimize] because it optimizes the name away. What should I do? Edit: I'm skipping that test now.. Please review. . @dgrunwald Done! Thank you for the explanation.. Added a test case @dgrunwald .. Please review. Thank you.. @siegfriedpammer @dgrunwald Thank you for the review!\n@siegfriedpammer yes, but I can't remember which. I will check tomorrow or so.. Sooner or later the Pretty test will fail at the following line with the old decompiler:\n379      (-)       ExpressionTrees.ToCode<bool>(ExpressionTrees.X(), () => new XmlReaderSettings {\n      313 (+)       ExpressionTrees.ToCode<bool>(ExpressionTrees.X(), () => new ExpressionTrees.XmlReaderSettings {\nEdit: But there are a few other real issues, I can try to fix anyways.. @dgrunwald I know it's not a good approach and you probably know it better but is it really a bug to duplicate the Expression.Parameter call? Based on the documentation I think it doesn't matter.. Thank you very much for all your help and time! I really appreciate it. Currently I don't have the motivation (and time) to fix that. Maybe I will come back to that some time later. If somebody wants to he/she can try to fix it.. Concurrent modification of the list - does not really work.... ",
    "mindless2112": "Example attached.\n. ",
    "Pilchie": "Without commenting on the difficulty level, I'd love to see a system based on Roslyn.  We've been discussing building decompilation into VS, with a plan to do so by levering ILSpy.  One of the concerns has been what happens when we release a new language feature that ILSpy doesn't support.  Moving ILSpy closer to Roslyn means that it would likely be easier to update.  Who knows, maybe Roslyn team members would even contribute updates to support new language features.. ",
    "MageKing17": "Actually, I think #897 already fixed this.\nEDIT: Yup, it did.. ",
    "tkrasinger": "installed via vs gallery. I now installed version 1.6 instead of 1.5, rescanned and got no virus warnings.. ",
    "m0sa": "<DebugType>embedded</DebugType> is the new hotness - bakes the portable pdb info into the dll. Needs .NET 4.7.1 or .2 IIRC to show stack traces, though.. ",
    "diverdan92": "The NuGet team is also looking into make this experience better. Feel free to join the discussion there: https://github.com/NuGet/Home/issues/6104. ",
    "erik-kallen": "Having the feature as a command-line tool would be good enough for me. ",
    "guibirow": "Other day I had to decompile a list of packages dependent on each other, around 10 csproj, and I had a bit of work to do one by and reference each other to build a solution.\nA feature like this would be awesome,\nI see two possible approaches:\n1 - Do the process in two stages, First select multiple packages in the list and 'Save' would request a folder to save and create a project to each one using the same dll name without changing much the existing funcitonality, would be just loop passing each package to a save command, then an improvement later could create the link to the references(if any) to build the solution\n2 - Select one package and click 'Generate' will prompt to select a list of referenced packages, this will build the chain of dependencies. Maybe a treeview to show the nested dependecies as well.. ",
    "tzachshabtay": "I'm getting the same exception on a Mac. This is when trying to decompile a mono application (I used dotnet publish -c release -r osx-x64 to compile the decompiler).\nI took a brief look at the code: UniversalAssemblyResolver has an \"OnMono\" variable which checks whether or not the mono runtime type exists. So this tells whether the decompiler is compiled with mono or not, not whether the app decompiled is using Mono. \nSo the answer would be no, the decompiler is compiled using dotnet core, not mono. \nThe \"GetGacPath\", if we're not in Mono, assumes we're running on Windows and checks for the WINDIR environment variable, which does not exist on Mac (and Linux), and so assigns an empty list to gac_paths.\nBut then GetAssemblyInNetGac assumes that gac_paths has at least 2 members in it (?), and crashes.\nSo to sum up:\nbug 1 -> i < 2 in GetAssemblyInNetGac should actually be i < gac_paths.length.\nEDIT: Oh, I missed the fact that there's also prefixes[i], so I'm guessing it needs to be 3 nested loops instead of 2.\nbug 2 -> I think the OnMono variable should point to whether the app we decompile is mono or not, as we look for the assembly in the GAC, though I'm not sure if that variable also has other uses which justify it being the decompiler in mono?\nbug 3 -> dotnet core GAC resolution is not there at all?\nIf somebody needs to repro, this is my project: https://github.com/tzachshabtay/MonoAGS, and I'm trying to decompile AGS.Engine.Desktop.dll.\n. @siegfriedpammer re bug 1, see my edit, you actually need 3 nested loops there, I believe.. ",
    "chrisdoman": "I'm afraid I'm still getting the same issue with the latest build, though It's possible Im just doing something silly here\nroot@161a8e6a2bd4:/shared/ilspy/ICSharpCode.Decompiler.Console# ls\nICSharpCode.Decompiler.Console.csproj  Program.cs  Running.gif\nLICENSE                    README.md   TypesParser.cs\nroot@161a8e6a2bd4:/shared/ilspy/ICSharpCode.Decompiler.Console# dotnet publish -c Release -r debian-x64\nMicrosoft (R) Build Engine version 15.3.409.57025 for .NET Core\nCopyright (C) Microsoft Corporation. All rights reserved.\nICSharpCode.Decompiler.Console -> /shared/ilspy/ICSharpCode.Decompiler.Console/bin/Release/netcoreapp2.0/debian-x64/ilspycmd.dll\n  ICSharpCode.Decompiler.Console -> /shared/ilspy/ICSharpCode.Decompiler.Console/bin/Release/netcoreapp2.0/debian-x64/publish/\nroot@161a8e6a2bd4:/shared/ilspy/ICSharpCode.Decompiler.Console# ls\nICSharpCode.Decompiler.Console.csproj  Program.cs  Running.gif     bin\nLICENSE                    README.md   TypesParser.cs  obj\nroot@161a8e6a2bd4:/shared/ilspy/ICSharpCode.Decompiler.Console# cd bin\nroot@161a8e6a2bd4:/shared/ilspy/ICSharpCode.Decompiler.Console/bin# ls\nRelease\nroot@161a8e6a2bd4:/shared/ilspy/ICSharpCode.Decompiler.Console/bin# cd Release/\nroot@161a8e6a2bd4:/shared/ilspy/ICSharpCode.Decompiler.Console/bin/Release# ls\nnetcoreapp2.0\nroot@161a8e6a2bd4:/shared/ilspy/ICSharpCode.Decompiler.Console/bin/Release# cd netcoreapp2.0/\nroot@161a8e6a2bd4:/shared/ilspy/ICSharpCode.Decompiler.Console/bin/Release/netcoreapp2.0# ls\ndebian-x64\nroot@161a8e6a2bd4:/shared/ilspy/ICSharpCode.Decompiler.Console/bin/Release/netcoreapp2.0# cd debian-x64/\nroot@161a8e6a2bd4:/shared/ilspy/ICSharpCode.Decompiler.Console/bin/Release/netcoreapp2.0/debian-x64# ls\nilspycmd        ilspycmd.pdb             libhostfxr.so\nilspycmd.deps.json  ilspycmd.runtimeconfig.dev.json  libhostpolicy.so\nilspycmd.dll        ilspycmd.runtimeconfig.json      publish\nroot@161a8e6a2bd4:/shared/ilspy/ICSharpCode.Decompiler.Console/bin/Release/netcoreapp2.0/debian-x64# ./ilspycmd ilspycmd.dll\nUnhandled Exception: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n   at System.ThrowHelper.ThrowArgumentOutOfRange_IndexException()\n   at ICSharpCode.Decompiler.UniversalAssemblyResolver.GetAssemblyInNetGac(AssemblyNameReference reference, ReaderParameters parameters) in C:\\projects\\ilspy\\ICSharpCode.Decompiler\\DotNetCore\\UniversalAssemblyResolver.cs:line 309\n   at ICSharpCode.Decompiler.UniversalAssemblyResolver.ResolveInternal(AssemblyNameReference name, ReaderParameters parameters) in C:\\projects\\ilspy\\ICSharpCode.Decompiler\\DotNetCore\\UniversalAssemblyResolver.cs:line 133\n   at ICSharpCode.Decompiler.TypeSystem.DecompilerTypeSystem..ctor(ModuleDefinition moduleDefinition) in C:\\projects\\ilspy\\ICSharpCode.Decompiler\\TypeSystem\\DecompilerTypeSystem.cs:line 57\n   at ICSharpCode.Decompiler.Console.Program.Decompile(String assemblyFileName, TextWriter output, String typeName) in /shared/ilspy/ICSharpCode.Decompiler.Console/Program.cs:line 96\n   at ICSharpCode.Decompiler.Console.Program.<>c__DisplayClass0_0.b__0() in /shared/ilspy/ICSharpCode.Decompiler.Console/Program.cs:line 70\n   at McMaster.Extensions.CommandLineUtils.CommandLineApplication.Execute(String[] args)\n   at ICSharpCode.Decompiler.Console.Program.Main(String[] args) in /shared/ilspy/ICSharpCode.Decompiler.Console/Program.cs:line 73\nAborted\nroot@161a8e6a2bd4:/shared/ilspy/ICSharpCode.Decompiler.Console/bin/Release/netcoreapp2.0/debian-x64# \n. Oh wait... it works now :) \nI think I must have built an older version without realising\nThanks!. ",
    "delapiero": "Works fine on ILSpy version 3.0.0.3332-beta2, \nI've been using ILSpy version 2.4.0.1963, which \"Check for updates\" reports as lastest release\nThank you for such quick response and for help. ",
    "spottedmahn": "\nreference assembly\n\nWhat is a reference assembly?  I didn't know there we different types of assemblies...  Googling \"reference assembly\" doesn't yield good results...\nI tried reviewing Task.FromResult<TResult>(TResult) and I'm getting:\ncsharp\npublic static Task<TResult> FromResult<TResult>(TResult result)\n{\n    /*Error: Empty body found. Decompiled assembly might be a reference assembly.*/;\n}\nI'm trying to find the implementation of it.... awesome, thanks @Rpinski!. ",
    "StreamXL": "Hello siegfriedpammer,\nWhen opening the target assembly with ILSpy, I can see the referenced assemblies as embedded resources\nUnfortunately, I do not know what compression the file uses\n\n. Thanks for the help, I will do it.\nThen save memorystream to .dll\n\n\n. Thank you very much maybe you could install such a function directly in ILSpy. ",
    "greenjaed": "Okay, that fixed the issue, but is that the desired behavior?  I did the same thing in version 2.4 and that doesn't happen.  . ",
    "conwid": "Hi everyone,\nI though I'd give it a try and created a plugin here:\nhttps://github.com/conwid/ILGenerationLanguage\nIt's still a very early alpha version, but I'm hoping that some of you might find it useful and even contribute.. ",
    "AceHack": "I am very interested in this feature. ",
    "MSeal": "Having the same issue with v3.0.1 :/. ",
    "M3LiNdRu": "Same issue for me as well with v1.7.2.0\n. Lads,\nRemoving extension and then installing it from Visual Studio marketplace worked for me: https://marketplace.visualstudio.com/items?itemName=SharpDevelopTeam.ILSpy\nHowever, In vs2015,  If I browse a project reference and then I press right click button over it I cannot see the option Open with ILSpy\nCheers. ",
    "hyspace": "virustotal.com said it is safe. Do you have any idea why it was marked as Trojan?. Sure.\nAntivirus definition: 1.259.1155.0\nAntispyware definition: 1.259.1155.0\nLet's see if others also meet this problem.\n. @sharwell @christophwille I can not reproduce it as well. I restore the dll and manually scan the ILSpy folder and this time it shows nothing. Thanks guys.. ",
    "XspeedPL": "Ah, sorry for the confusion.\nI meant the .NET libraries 'native' as in 'from GAC', like mscorlib.dll, System.dll, etc..\nThose are viewable with ILSpy, but having the view directly in VS debugger would be a huge help.. ",
    "MikeFH": "Is it OK if I take a look at this ?. Oops, sorry. I thought I was covered with the .editorconfig and VS. I used tidy.py this time.. Thanks, glad I could help.. Nice. Thank you.. Got it, I added the check.. ",
    "MaxAkbar": "Try right-clicking on the TreeView pane instead of the code window.. ",
    "EFLFE": "I used the ConfuserEx with one rule: \"invalid metadata\" (This protection adds invalid metadata to modules to prevent disassembler/decompiler from opening them). @KirillOsenkov https://github.com/jbevain/cecil/issues/482. ",
    "Titaye": "Yes of course no pb for having the 3 targetting. For compatibility reasons, I'm don't think FSAC will be able to move to net46. If you don't mind adding net45 to the existings list, it will be perferct.. this is perfect. thanks.. ",
    "ashmind": "\nYou can always use IDecompilerTypeSystem.GetCecil to retrieve the Cecil object and access the low-level metadata, if needed.\n\nThat sounds perfect -- I wasn't aware of that.\nThanks -- I'll fix that and the build sometime tomorrow.. @siegfriedpammer Rewritten to IDecompilerTypeSystem.GetCecil -- definitely looks better (but required some extra ctor args in a few places). Fixed the build/formatting.. @siegfriedpammer Sure -- pls let me know if the update makes sense.. @dgrunwald Thanks, fixed -- didn't ever consider torn reads before, something to keep in mind.\nNot sure if I should have gone with an enum here -- please let me know.. Great point -- tried to update quickly and missed that.\nFixed now.. ",
    "mabakay": "TestDLL.zip\nOpen TestDLL.dll (compile it or use one compiled by me), Analyze class JsonAsyncService, expand \"Instantiated\" or \"Used By\" branch -> you will get exception from Mono.Cecil. \nI have only this one DLL on list. Last three were added by aplication after invoking \"Analyze\".\nThis works uncheck \"Use variable names from debug symbols\" in ILSpy options, thanks @guygodin \n. ",
    "guygodin": "Workaround that I found: uncheck \"Use variable names from debug symbols\" in ILSpy options. It seems like unchecking \"Use variable names from debug symbols\" will fix the issue. But sine it is checked by default, a lot of folks will run into that.. Someone posted repro steps here: https://github.com/icsharpcode/ILSpy/issues/1054\nLet me know if this doesn't work and I can upload a dll with repro steps. SiliconStudio.Xenko.zip\nGo to SiliconStudio.Xenko.FourCC, right-click Analyze, Used by, then go to the GetHashCode method, then expand the Used By method.\n. I can repro the crash by deleting the %APPDATA%\\Roaming\\ICSharpCode\\ILSpy.xml, then installing a fresh copy of ILSpy and adding the assembly I just linked above and following the repro steps.. SiliconStudio.Xenko.zip\nHere you go\n. Yeah it occurs even when copying the dll and pdb into a seperate folder. When adding the dll to ILSpy, it adds references (in light blue) underneath:\nmscorlib (2.0.0.0): C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\mscorlib.dll\nSystem (4.0.0.0): C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\System.dll\nSystem.Core (4.0.0.0): C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\System.Core.dll\nI have ILSpy setup to use C# 7.2 / VS 2017.4. ",
    "JuanPotato": "I'm also trying to build this, so I had to run\ndotnet restore Frontends.sln\ndotnet msbuild Frontends.sln\nnuget install humanizer\nnot sure that last command was needed since I still got\nrealpath(): Permission denied\nrealpath(): Permission denied\nError:\n  An assembly specified in the application dependencies manifest (ilspycmd.deps.json) was not found:\n    package: 'Humanizer.Core', version: '2.2.0'\n    path: 'lib/netstandard1.0/Humanizer.dll'\nwhen I ran dotnet ./bin/Debug/netcoreapp2.0/ilspycmd.dll after doing it (I ran the command to fix the error) but it went away when I ran the command as sudo, which is weird.. ",
    "wmjordan": "I downloaded the latest build. The problem was solved.. Although the underlying problem was not solved.\nAnyway, it did the job. Thanks very much!!!. ",
    "afonsolage": "nvm, I was able to get more details about the error using de following:\nvar decompiler = new CSharpDecompiler(ModuleDefinition.ReadModule(\"Assembly.dll\"), new DecompilerSettings()). ",
    "tmat": "By design SRM does not accept assemblies that do not comply with ECMA335 spec. \nReading obfuscated assemblies doesn't seem like an important scenario for ILSpy to me. Customers using obfuscators certainly don't want their code to be disassembled.. Seems like aspnet_merge.exe is using ILMerge, which is likely emitting bad metadata.. See https://github.com/dotnet/corefx/blob/master/src/System.Reflection.Metadata/src/System/Reflection/Metadata/TypeSystem/MethodDefinition.cs#L74.\nWinMDs are tricky since they can be viewed in two modes - raw and projected. The mode is specified via an option when creating the reader. . Not a bug. You are looking at the wrong class: <WinRT>Class1. Is the method body in Class1?. ",
    "blowfishpro": "This was on 3.0.1, could not reproduce on latest master, closing. ",
    "johanstenberg92": "Works now. Thanks!. ",
    "svick": "Since indexers and indexed properties are almost the same thing in IL, maybe some variation of the syntax for indexers could work?\nE.g.:\nc#\n[DispId(51)]\n[IndexerName(\"CodeElement)\"]\npublic EnvDTE.CodeElement this[EnvDTE.vsCMElement Scope] /* indexed property */\n{\n    [DispId(51)]\n    get;\n}. ",
    "TheOneAmir": "Hey, I created a PR for this at:\nhttps://github.com/icsharpcode/ILSpy/pull/1119\nThe PR enables searching inside words for matches when not using a full name search. To enable the modified search, set \"allowNonContiguousMatch\" to true inside SearchStrategies.cs. Either Visual Studio or the Python script also fixed the indentation on two switch statements. . Oh, that's fine. Yeah, I had currently left it as disabled, as I didn't see a good place to add it. You mentioned \"I think it would be best to add an option for this\" and so I was wondering if you had an idea for where it should be or if I could just add the option where I see fit?\nPerhaps by making the search bar smaller and adding an option/dropdown there for searchsettings?\n\n. I've temporarily set the activator to be the prefix \"s:\" so at least the search will be usable/testable. I'm not yet sure what the best way to integrate DisplaySettingsPanel to SearchStrategies would be without introducing unwanted dependencies. If we can confirm that a checkbox is indeed what we want, I can look into this integration. . Alright, I have changed '~' to be the prefix per search term to enable the 'partial substring search'. \nIt is to be noted that there were a few types and constants which had '~' in them which will no longer be returned. If we wish to retain these searches, the only character for which I didn't find any existing matches is the '@' character (Even + and - have existing matches which are hidden by the prefixed searches). . Yes, that makes sense to me. I have just been a little bit occupied with work and I haven't been able to get back around to this. If you're fine waiting the week, I'll have time this weekend. . ",
    "meirumeiru": "I see the same... and what I also see often is that \"nothing\" is decompiled into 10 lines of switch and if and else... and when you analyze the code generated, then you see that it's doing nothing...\nthings like\nswitch(3)\n{\ncase 5:\ngoto blabla;\ndefault:\nbreak;\n}\nblabla:\n... that wasn't like this in old versions. (I can give more information if needed). ",
    "nblackburn77": "Unchecking that option worked thanks.\nThe XML looks fine, Reflector reads it for example, and it still gets compiled into our help file without any problem. I can try and run ILSpy in the debugger to find out what it doesn't like about the XML.. I'll keep looking at it but I've attached the smallest XML file we have that fails.\nIt reads up to line 39 fine, but then GetPositionForLine fails because it runs out of bytes to read before currentLine becomes > line.\nFoo.zip\n. It looks like the issue is that the lines of my XML file are terminated with a line feed \\r.\nChanging GetPositionForLine to increment currentLine if it encounters \\n or \\r worked.. ",
    "n9": "I have hit a similar problem, when I click \"Used By\" on MvcJsonOptions.\nAssembly: Microsoft.AspNetCore.Mvc.Formatters.Json, Version=2.0.3.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\nClass: Microsoft.AspNetCore.Mvc.MvcJsonOptions\nILSpy version: 3.0.1.3459.\n. I cannot copy the full exception from the analyzer (no context menu, Ctrl+C not working). There is a screenshot:\n\n. I have tried to build the current master and the output is following:\n\n(Used By on master works.). Still building.... ",
    "twenzel": "This issue massivly occures with the new RC version 3.1.0.3645-rc.\nIt does not happen to me in any previous beta version.\nIt's a threading issue. When the error occurs, I've to restart ILSpy and then the method can be decompiled. But the error occurs on the next decompilation.\nI've used the quartz assembly from https://github.com/quartznet/quartznet/releases/tag/v2.3.1 .. @siegfriedpammer There are less occurences, but problem still exists.. using version 3.1.0.3646-rc\n---> System.NotSupportedException: Specified method is not supported.\n   at Mono.Cecil.Cil.InstructionOffset.get_Offset() in offset 56\n   at Mono.Cecil.Cil.CodeReader.ReadScope(ScopeDebugInformation scope) in offset 31\n   at Mono.Cecil.Cil.CodeReader.ReadDebugInfo() in offset 64\n   at Mono.Cecil.Cil.CodeReader.ReadMethodBody() in offset 151\n   at Mono.Cecil.Cil.CodeReader.ReadMethodBody(MethodDefinition method) in offset 26\n   at Mono.Cecil.MethodDefinition.<>c.<get_Body>b__41_0(MethodDefinition method, MetadataReader reader) in offset 0\n   at Mono.Cecil.ModuleDefinition.Read[TItem,TRet](TRet& variable, TItem item, Func`3 read) in offset 64\n   at Mono.Cecil.MethodDefinition.get_Body() in offset 102\n   at ICSharpCode.Decompiler.CSharp.CSharpDecompiler.DecompileBody(MethodDefinition methodDefinition, IMethod method, EntityDeclaration entityDecl, DecompileRun decompileRun, ITypeResolveContext decompilationContext) in offset 38\n-- continuing with outer exception (ICSharpCode.Decompiler.DecompilerException) --\n   at ICSharpCode.Decompiler.CSharp.CSharpDecompiler.DecompileBody(MethodDefinition methodDefinition, IMethod method, EntityDeclaration entityDecl, DecompileRun decompileRun, ITypeResolveContext decompilationContext) in offset 805\n   at ICSharpCode.Decompiler.CSharp.CSharpDecompiler.DoDecompile(MethodDefinition methodDefinition, IMethod method, DecompileRun decompileRun, ITypeResolveContext decompilationContext) in offset 78\n   at ICSharpCode.Decompiler.CSharp.CSharpDecompiler.Decompile(IList`1 definitions) in offset 331\n   at ICSharpCode.ILSpy.CSharpLanguage.DecompileMethod(MethodDefinition method, ITextOutput output, DecompilationOptions options) in offset 115\n   at ICSharpCode.ILSpy.TextView.DecompilerTextView.DecompileNodes(DecompilationContext context, ITextOutput textOutput) in offset 61\n   at ICSharpCode.ILSpy.TextView.DecompilerTextView.<>c__DisplayClass33_0.<DecompileAsync>b__0() in offset 36\nIt occurs only after \"analyse\" a method, expand the \"Used by\" node and selecting any other method to decompile.. ",
    "zspitz": "If the problem is that there are now too many options, as an alternative to zvirja's suggestion I suggest that the UI on the View -> Options -> Decompiler page have the following elements:\n\n(left) Listbox of C# language versions; should sync with the dropdown on the main window\n(right top) Textbox -- filter list of options based on text\n(right bottom) Listbox of options\n\nIf a particular C# version doesn't support a given option, then the user should not be able to select / deselect that option, and its value should be ignored.\nSince there are altogether so many options, it might also be advisable to sort them alphabetically.. I can confirm that I am seeing both issues.\nVisual Studio Community 2017 15.7.1\nILSpy version 3.1.0.3652\nAddin version (as reported by Extensions and Updates) 1.8.0 (installed 9/4/2018). @Rpinski So perhaps this issue should be reopened?. ",
    "ststeiger": "Ah, didn't see that. \nYes, this is what I wanted. \nBut, it's still omiting fully qualified namespaces where the code or a reference is inside the parent namespace.. Ah, didn't notice this dropdown before. \nApparently there since 3.1. \nSorry to bother you - my fault.\n. ",
    "Csimbi": "Problem is, it's not mine - I'd be posting someone else's work.. Sent you an IM on gitter (I think). Never used it before.\nThanks!. ",
    "ahokinson": "It turns out that this happens when another assembly is required to read the definition of a type in that other assembly. In your case, there's a dependency on System.IO.Pipes.AccessControl and ILSpy doesn't know how to resolve that assembly.\nThere may be other solutions, but a simple solution is to have the required DLL available in the same file path as the DLL you are attempting to decompile.\n. ",
    "nstarke": "Just for reference, for this exact error I found the following:\n$ find /usr/local/share/dotnet -name \"System.IO.Pipes.AccessControl.dll\"\n/usr/local/share/dotnet/sdk/2.1.101/Roslyn/runtimes/win/lib/netstandard1.3/System.IO.Pipes.AccessControl.dll\n/usr/local/share/dotnet/sdk/2.1.101/Roslyn/runtimes/unix/lib/netstandard1.3/System.IO.Pipes.AccessControl.dll\n/usr/local/share/dotnet/sdk/2.1.101/Roslyn/bincore/runtimes/win/lib/netstandard1.3/System.IO.Pipes.AccessControl.dll\n/usr/local/share/dotnet/sdk/2.1.101/Roslyn/bincore/runtimes/unix/lib/netstandard1.3/System.IO.Pipes.AccessControl.dll\nFor System.IO.Pipes.AccessControl.dll I found it in /usr/local/share/dotnet/sdk/2.1.101/Roslyn/bincore/runtimes/unix/lib/netstandard1.3/System.IO.Pipes.AccessControl.dll - I was greeted subsequently with additional missing dlls, which I was able to successfully retrieve from nuget.  Putting all dependent dll's in the same directory as ilspycmd and then running ilspycmd from within that same directory allowed me to successfully decompile the project in question.  Thank you very much for your help.  Closing this now.. ",
    "mkrueger": "I guessed that it's shown in metadata order that's why I posted the meta data - it looks really weird IMO but that's what's in the dll :/.. Latest I tried was 3.0.0.3403-beta4. 3.1.0.3652 updating to 3.2 solves the issue - thanks.. ",
    "abouhaa": "Makes sense. I will try.\nThank you.. ",
    "LyonJenkins": "Happens whenever I try to compile.. Yes I followed all the steps within the readme.. ",
    "na2axl": "Thanks @siegfriedpammer for the reply, I will try this and give a feedback :-). I've used the CSharpDecompiler API and I was able to get the BlockStatement of the method body. But I don't know how to get or create a TransformContext. I have also an issue when trying to apply a custom IAstTransform to the statement, the exception Node is already used in another tree. is thrown. I've tried to use the Clone() method but nothing...\nThe new code is:\n```cs\ninternal static KeyValuePair> CreateMethodString(TypeDefinition s, MethodDefinition m)\n{\n    if (s == null)\n        throw new ArgumentNullException(nameof(s));\nif (m == null)\n    throw new ArgumentNullException(nameof(m));\n\nvar settings = new DecompilerSettings();\nvar typeSys = new DecompilerTypeSystem(m.Module);\n\nvar decompiler = new CSharpDecompiler(typeSys, settings)\n{\n    CancellationToken = CancellationToken.None\n};\n\nvar tree = decompiler.Decompile(m);\n\nBlockStatement methodBody = BlockStatement.Null;\n\nforeach (AstNode node in tree.Members)\n{\n    if (node is MethodDeclaration method)\n    {\n        methodBody = method.Body;\n        break;\n    }\n}\n\nif (methodBody == BlockStatement.Null)\n    throw new Exception(\"Unable to find a method declaration in the syntax tree.\");\n\n// I don't know how to get a TransformContext, so null is passed instead...\nvar glsl = new ASLShader.GLSLVisitor(methodBody, null);\n\nvar sig = ASLShader.GLSLVisitor.GetSignature(m);\nvar code = glsl.Result;\nvar desc = new KeyValuePair<MethodDefinition, KeyValuePair<string, string>>(\n    m,\n    new KeyValuePair<string, string>(m.Name, sig + code)\n);\n\nreturn desc;\n\n}\n``` \nThe GLSLVisitor constructor:\n```cs\npublic GLSLVisitor(BlockStatement block, TransformContext ctx)\n{\n    var trans1 = new ReplaceMethodCallsWithOperators();\n    var trans2 = new RenameLocals();\n    ((IAstTransform)trans1).Run(block, ctx);\n    trans2.Run(block, ctx);\nResult = block.AcceptVisitor(this, 0).ToString();\nResult += Environment.NewLine;\n\n}\n```\nAnd the custom IAstTransform:\n```cs\n    internal sealed class RenameLocals : IAstTransform\n    {\n        private int _ctr;\n    private readonly Dictionary<string, string> _locals = new Dictionary<string, string>();\n\n    public void Run(AstNode node, TransformContext context)\n    {\n        if (node == null)\n            throw new ArgumentNullException(nameof(node));\n\n        if (node is VariableInitializer initializer)\n        {\n            var newName = $\"_loc{_ctr++}\";\n            _locals[initializer.Name] = newName;\n            initializer.ReplaceWith(new VariableInitializer(newName, initializer.Initializer));\n        }\n        else\n        {\n            if (node is IdentifierExpression identifier)\n            {\n                string newName;\n                if (_locals.TryGetValue(identifier.Identifier, out newName))\n                    identifier.ReplaceWith(new IdentifierExpression(newName));\n            }\n        }\n\n        foreach (var c in node.Children)\n            Run(c, context);\n    }\n}\n\n```\nThe exception was thrown when calling initializer.ReplaceWith().. I've removed the IAstTransform interface.\nBut it seems that Detach() doesn't exist in the type Exression...\n\n. @siegfriedpammer thanks it work. But... again... I'm facing other issues when calling Expression.Annotation<T>(). It always return null when T is a type from Mono.Cecil (MethodDefinition, MethodReference, TypeReference, etc...).\nMaybe those types are not expression annotations in the new API?\nTrying for a fix.... Yes thanks, the use of GetSymbol have fixed the problem. I've fixed some other issues and the new API works like a charm \ud83d\ude04 . Thanks again @siegfriedpammer  for the GOOD support! \ud83d\udc4d . ",
    "cremor": "I can also confirm this is still an issue with the latest version of the extension in Visual Studio 2017 15.7.2. I've tested it with a .NET Core project and found the following:\n\n\"Open code in ILSpy\" in the text editor does nothing, just as @bbi-yggy said.\n\"Open in ILSpy\" on a .NET Core SDK reference shows the error that @bbi-yggy mentioned.\n\nBut \"Open in ILSpy\" on a NuGet reference works fine!. @Rpinski Thanks for the update. Here are my test results:\n\n\n\"Open code in ILSpy\" in the text editor seems to be completely gone. Shouldn't this be supported? At least that's how I read the initial post of @bbi-yggy in this issue. And that's the reason why I tried the extension in the first place.\n\n\"Open in ILSpy\" on a NuGet reference or Analyzer reference node is still there and works fine. But it's not availabe on a NuGet reference sub node (which could either be another NuGet package or an assembly).\n\"Open in ILSpy\" on a .NET Core SDK reference is also gone. I think this makes sense because the SDK node itself is just a collection. But it would make sense on the child nodes, which could be NuGet packages or assemblies, just like child nodes of NuGet references.. Is ILSpy.AddIn_3.2.0.3809-beta.vsix older than the test versions linked in this issue? Because since I installed the beta (both the WPF application and the Add-In) \"Open code in ILSpy\" is again doing nothing.. \"Open code in ILSpy\"  works fine with the latest artifact, thanks. (Except for the problem already reported in #1164)\n\nBut those things are still missing in SDK style projects (e.g. .NET Core project):\n\n\"Open in ILSpy\" on a NuGet reference sub node (which could either be another NuGet package or an assembly).\n\"Open in ILSpy\" on a SDK reference. I think this makes sense because the SDK node itself is just a collection. (Although it would be great if it could open all assemblies from the SDK at once.) But it would make sense to show it on the child nodes, which could be NuGet packages or assemblies, just like child nodes of NuGet references.\n. \n",
    "IanOfOz": "Thanks @Rpinski, looks good to me if the selected item is outside the solution, which I'd see as the most likely use case.\nBut if you hit 'Open code in ILSpy' within the text editor on a member that is defined within the current solution, it's getting an error. As it is, this gets  a failure when you open up ILSpy - it looks like the assembly in question isn't getting included on the ILSpy command line. The actual member is correct (as seen by the error that ILSpy reports). Ideally, though, would it possible to just perform a goto definition in this case (for intra-solution use)?  Or would you like a new issue for this?\n. Yup, assembly exists in the output directory. I've tried members from within the same project (i.e. assembly) and others from other projects in the same solution. Both cases have the same result - the fully qualified member name reported within the ILSpy error is correct, but there's no sign of the accompanying assembly being loaded.. I've got a couple of solutions where I get the new error message every time I try to open ILSpy - even if I've the current code element is something from .Net Framework classes. And yet in other solutions it works totally fine - even finding code from within my solution.\nThe only difference I can pick between the working and non-working solutions is that the non-working solutions have projects that aren't in a direct sub-directory of the solution. e.g. following a pattern like this:\nfolderContainingSolution\\folderJustForGroupingPurposes\\folderContainingProject\nCould that be an issue? If not, I'll see if I can pull the source down and debug it myself.\nI just tried the same thing with the previous build you'd included on this issue and it does work for .Net framework classes (unlike the latest build), but as mentioned earlier fails for members from within the solution. But again it works fine in both cases where the solution structure is simpler (if that is the issue). So it looks like the checking that's been added in is a bit too aggressive for the more structured solutions.\nThanks. 1. I've tried successfully on .Net Standard and \"oldschool\" .net. My two failing solutions are oldschool .Net (various versions).\n2. Any code element I try seems to fail - method calls, constructors, interfaces. These can be from types from within the  solution or from .Net Framework types - i.e. in the solutions that don't work, nothing works. In the solutions that do work, everything works.\n3. All cases give 'Can't show ILSpy for this code element'\n4. Yup, everything is built.\nI actually tried to build the ILSpy solution for myself to see if I could track it down, but ran into a build problem: \nProject \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Auxiliary\\Build\\Microsoft.VCToolsVersion.default.props\" was not imported.... due to the file not existing.\nIs there another part of VS 2017 I need to install? I have 15.7, with most of the C# workloads, but little C++. I couldn't find any suggestions in the readme here about what workloads are needed.\nThanks\n. Thanks, that got me further... now I'm running into 'project.assets.json' not found on every project. Unfortunately my corporate PC is stopping me from cloning the repo properly, so I can't update the git submodules... so I'm a little stuck unless @Rpinski has a brainwave about what's quirky about my solutions that's tripping over the add-in. Or maybe the stars will align and I'll be able to get the solution building locally.. Awesome, thanks, that confirmed that I was on the right path... once I took a guess and upgraded my version of nuget (we run 2.7 as we've got some custom commands added to it). I had tried 'nuget restore' before but it had very quickly done nothing, but given no error. So once you've confirmed that was the thing to do I tried harder.\nSo now everything is built happily and I've currently got a debug instance of Visual Studio running so I can look closer at the underlying issue.\n@Rpinski  it's the third instance of the error message that's appearing, I'm just having some fun wading through the COM debugging to work out why that is. Hopefully I'll be able to report back soon.. Well it turns out it is related to my nested projects. When there's projects within solution folders it seems enumerating through the projects in the solution only grabs the top level \"projects\", and in my case only one of this is actually a csproj file - the rest are solution folders. And each of these solution folders returns null for the FileName.\nI managed to hack together a solution, but it failed as soon as I went one layer further down (i.e. solution folder within solution folder). Then I found this stack overflow post which looks to be a good basis for a solution (probably the second answer, I'd say): \nhttps://stackoverflow.com/questions/38740773/how-to-get-project-inside-of-solution-folder-in-vsix-project\nI haven't managed to work that into a proper solution, but let me know if you'd like me to.\nThanks. Ah, sorry for the confusion - I should have been referring to them as \"solution folders\" I suspect.\nI've got that build and it now works as hoped within Visual Studio... until it actually runs ILSPY :(\nI noticed that the VSIX runs a version of ILSpy that's installed beside the VSIX. That crashes every time I try to run it - either via VS or if I run it directly. It's reporting:\n\nCould not load file or assembly 'Microsoft.VisualStudio.Composition, Version=15.5.0.0...\n\nIs there something else that I need to install?\n. Ah, gotta love build scripts.\nThanks, that's sorted it out - after pulling the source down and building locally, the AddIn is now working as hoped.\nAnd no worries about the hiccup - given the value that ILSpy brings, you're well and truly ahead :). ",
    "carlreinke": "Oh, oops.  The update checker on 3.0.1 doesn't seem to know that there's a new version.  And the update checker on 3.1.0 thinks it's a nightly build.. ",
    "FuSoftware": "Most likely duplicate of https://github.com/icsharpcode/ILSpy/issues/1137\nYou lack the .NET 4.6 required to run the software. There was an oversight where the config file \"allowed\" .NET 4.0+ to run the executable, while the program isn't compatible. This will be fixed in the next release.. ",
    "ShaharPrishMSFT": "Ah. Thanks. I thought ilspy was using that.\n. ",
    "DavidMeerkatRefaeli": "ah, wow - good job!. ",
    "richardszalay": "Interesting. I'll look more into the detail of the current implementation and see if I can think of a way forward.. ",
    "SchoolGuy": "Ok, I am currently working on it. Currently there are no questions. Exept one...\nWhy are there multiple classes in one file? - My collegues explained (I am really a newbie) that you should try to keep classes as small as possible (if reasonable). They also added that that you should only have one class, interface, ... keyword per file.\nFor myself it is currently a bit strange to navigate trough one very large file. I am getting used to it and don't want to start a philosophical discussion about it, but I would love to hear the reason for this because it is quite the opposite I've learned so far.\nThanks for your help!. Ok, thanks for the input. Would it be acceptable for you if I do the clean up? I would also do the merging, when somebody notifys me. For my feature request I would fork, develop and clean up, pull when notified and then send a pull request containing the clean up and new feature.\nI know that I have to deal with code in my future developer live which is a big mess that's why I was just asking why the structure was in this particular way.. Ok, then I will dive deeper into the search code and try to prototype the two Interfaces.. ",
    "neilsimp1": "I am seeing a similar issue:\nSystem.ArgumentOutOfRangeException: Non-negative number required.\nParameter name: count\n   at System.IO.BinaryReader.ReadBytes(Int32 count)\n   at Mono.Cecil.PE.ImageReader.ReadDebugHeader()\n   at Mono.Cecil.PE.ImageReader.ReadImage()\n   at Mono.Cecil.PE.ImageReader.ReadImage(Disposable`1 stream, String file_name)\n   at Mono.Cecil.ModuleDefinition.ReadModule(String fileName, ReaderParameters parameters)\n   at ICSharpCode.ILSpy.LoadedAssembly.LoadAssembly(Object state)\n   at System.Threading.Tasks.Task`1.InnerInvoke()\n   at System.Threading.Tasks.Task.Execute()\nThis is for Oracle.ManagedDataAccess.dll, isntalled via NuGet, version 18.3.0.. ",
    "devinvisible": "What was the root cause of the BadImageFormatException? I've noticed that Oracle.ManagedDataAccess.dll (4.122.18.3) seems to have some obfuscated classes and methods. Were these giving the trouble?. ",
    "chrisstophersaur": "Alrighty, thanks for the quick reply and hopefully you guys can figure it out.. ",
    "pouc": "Oh. My. God. You rock. It worked. Thank you so much !!!\n. ",
    "wpafbo79": "Glad to help with the second exception.  These are the two files I am having problems with and the supporting reference files.  Let me know if you need something else.\nproblemFiles.zip\nsupportFiles.zip\n. ",
    "Cifi79": "...sorry it's monday...\nIssue closed!. ",
    "cshung": "Hello maintainers, I am interested in fixing this bug.. Thanks for the idea, I will look into the ILAst of the lambda.\nI think I have an idea about what gone wrong in TransformExpressionTrees, here is what I am thinking right now.\nhttps://github.com/icsharpcode/ILSpy/compare/master...cshung:dev/andrewau/1224?expand=1. Debug configuration runs into a connectivity issue?. Thanks for getting the CI to pass. Is this change good for merge?. Hello?. Fixed, thanks. ",
    "ghstahl": "@christophwille do you have a target date for this feature?\nBTW the following is why I need it.\nI am using ILRepack to merge a bunch of .net core assemblies into one.  My primary assembly has a PDB, which I have to use PDB2PDB to convert it to a portable so that ILRepack likes it.  The other assemblies are coming from nugets, which don't place pdbs into my $(TargetDir). I've tried to package a PDB in a release nuget, and the package manager is excluding it.   When every assembly I want merged has a good portable PDB, everything gets successfully repacked and I get debug info for all of them.  Using ilspycmd, I don't need to care about a PDB existing, as I will generate source code and a new PDB given any nuget.\nGiven ILRepack, ILSpy, I will be able to have source code and debug info for everything without needing a symbol server, not that a symbol server can help me in this case anyway.\nDebug and Step anything happiness :)\n. ",
    "warlock00": "This occurred during install, don't know if it is related.\n09-Aug-18 11:33:41 AM - Beginning to install extension to Visual Studio Professional 2017...\n09-Aug-18 11:33:41 AM - Upgrading 'ILSpy', version 3.2.0.3856 to version 4.0.0.4285.\n09-Aug-18 11:33:44 AM - Install to Visual Studio Professional 2017 completed successfully. The extension has been installed to C:\\USERS\\D\\APPDATA\\LOCAL\\MICROSOFT\\VISUALSTUDIO\\15.0_9D4BB72C\\EXTENSIONS\\HXKF5BMX.DI4\\\n09-Aug-18 11:33:44 AM - Failure encountered during /updateConfiguration step. Ignoring failure and considering requested operation a success.\nException: System.ComponentModel.Win32Exception (0x80004005): The requested operation requires elevation\n   at System.Diagnostics.Process.StartWithCreateProcess(ProcessStartInfo startInfo)\n   at System.Diagnostics.Process.Start()\n   at System.Diagnostics.Process.Start(ProcessStartInfo startInfo)\n   at Microsoft.VisualStudio.ExtensionManager.EngineUtilities.d__63.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at VSIXInstaller.Utilities.d__8.MoveNext(). Not related. Fixed the installer error by running PowerShell as Administator and running VSlauncher isblah.vsix. Didn't fix exception.. I copied Microsoft.DiaSymReader.dll from the zip package to the plugin folder, and the problem was fixed.. ",
    "MABrunner": "Shouldn't this issue be kept open until the installer is fixed?. ",
    "JFlin5": "If I can get a non-public location to share the DLL, then sure.  Unfortunately, it is commercial, so isn't fair to post it publicly without people buying the product it's included with. ",
    "BrainSlugs83": "(by the way, searching for just d__4 does reveal a bunch of classes in the search, with a similar pattern, except that most of those seem to work when you click on them, so I believe this is probably not a UI bug.)\n. Not sure if it's helpful at all, but I cloned the ILSpy source in the off-chance hope that maybe this would be fixed in latest (it's not. :( ) -- but I did notice that every time I clicked on that class, I saw this exception (which did not get thrown for other classes that I navigated to):\n. by the way, reflector is able to find and decompile the code -- I think -- it's got a ton of gotos and labels and weirdness -- but it seems to, at least be able to find the class. :)\n````\n[CompilerGenerated]\nprivate sealed class d__4 : IAsyncStateMachine\n{\n    // Fields\n    public int <>1__state;\n    public AsyncTaskMethodBuilder <>t__builder;\n    public bool startRightAway;\n    private string 5__1;\n    private Task 5__2;\n    private Task 5__3;\n    private ServiceEnvironment[] <>s__4;\n    private int <>s__5;\n    private ServiceEnvironment 5__6;\n    private TaskAwaiter <>u__1;\n// Methods\nprivate void MoveNext()\n{\n    int num = this.<>1__state;\n    try\n    {\n        bool flag2;\n        switch (num)\n        {\n            case 0:\n                goto Label_00A8;\n\n            case 1:\n                goto Label_0130;\n\n            case 2:\n                goto Label_01C3;\n\n...\n\n````. ",
    "DotMPP": "My real complaint is the exception handling does not appear to check for inner exceptions so there\u2019s no clue (from within ILSpy) as to which file is not found. I suspect the issue is with my environment but it is lame to point at the \u201ccheck the fusion log\u201d when ILSpy could show a failing file path.\nSent from an Apple Device, please excuse the typos\n\nOn Oct 8, 2018, at 11:33 PM, Siegfried Pammer notifications@github.com wrote:\nI am unable to reproduce this. Seems there's something wrong with your .NET setup, because ILSpy uses the .NET Fusion COM interfaces for GAC traversal and that seems to be broken.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "dimamatik": "@siegfriedpammer \nHello! I have a same problem on 4.0.0.4358-beta2. Code, generated with Unity3d, like:\nwhile (myObject.itsField == false) { yield return null; }\nwas decompiled as:\nif (myObject.itsField == false) { yield return null; /*Error: Unable to find new state assignment for yield return*/;}\nPlease, fix!\nYou can contact me by email dimamatik[at]yandex[dot]ru for more info.. @vizv @siegfriedpammer\nHello! I download and build your fix (fix-yield-return-generated-from-mono) for \"Unable to find new state assignment for yield return\" problem. It's works! But I have a problem with simillar code:\nI am using Unity 2018 with Mono compiler integrated into this engine\nThis class:\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\npublic class Test : MonoBehaviour\n{\nList<Test> children = new List<Test>();\npublic IEnumerable<Test> Children\n{\nget\n{\nforeach( Test item in children)\n{\nyield return item;\n}\nyield break;\n}\n}\n}\nwas decompiled with error after yield break line:\nIL_00bd:\n/*Error near IL_00be: Unexpected return in MoveNext()*/;\n(all over code decompiled right)\nPlease, fix it too. \nTest.zip\nHere is .zip with compiled .dll and script file. Used Unity 2018.2.11f1. @vizv Do I need to create a new issue?. @vizv Ok, created https://github.com/icsharpcode/ILSpy/issues/1307. ",
    "vizv": "@dimamatik Could you attach a copy of pre-compiled Assembly-CSharp.dll. @dimamatik That's a different issue, switch analysis doesn't clean up orphan blocks correctly.. @maikebing you might want to use tabs instead of spaces for ILSpy\\Properties\\Resources.Designer.cs, or appveyor will refuse to build. Emmmmm, maybe there is a better way.... Thanks for the invitation, however I couldn't join the meeting.\nI use ILSpy for Unity game modding, and I might continue contribute the project if I have time.. ",
    "gatodev": "For nothing. Thank you.. It wasn't because of 'base'.\nIf it's a field, the return value seems correct.\n. I got it. InvocationExpression was it.\nBut, shouldn't the target have annotations?\n. I see. Thank you.. I see. Thank you.. Source:\nusing System;\nusing System.Linq;\nusing System.Reflection;\nusing ICSharpCode.Decompiler;\nusing ICSharpCode.Decompiler.CSharp;\n\nstatic class MainClass {\n    static void Main() {\n        var decompiler = new CSharpDecompiler(\n            Assembly.GetExecutingAssembly().Location, new DecompilerSettings());\n        var module = decompiler.TypeSystem.Modules[1];\n        var typeDefinition = module.TypeDefinitions.ElementAt(1);\n        var fullTypeName = typeDefinition.FullTypeName; // Interop\n        var syntaxTree = decompiler.DecompileType(fullTypeName);\n        Console.WriteLine(syntaxTree);\n    }\n}\n\nOutput:\nusing ICSharpCode.Decompiler;\nusing ICSharpCode.Decompiler.CSharp;\nusing ICSharpCode.Decompiler.CSharp.Syntax;\nusing ICSharpCode.Decompiler.TypeSystem;\nusing System;\nusing System.Linq;\nusing System.Reflection;\n\ninternal static class MainClass\n{\n    private static void Main ()\n    {\n        CSharpDecompiler cSharpDecompiler = new CSharpDecompiler (Assembly.GetExecutingAssembly ().Location, new DecompilerSettings ());\n        IModule module = cSharpDecompiler.TypeSystem.Modules [1];\n        ITypeDefinition typeDefinition = module.TypeDefinitions.ElementAt (1);\n        FullTypeName fullTypeName = typeDefinition.FullTypeName;\n        SyntaxTree value = cSharpDecompiler.DecompileType (fullTypeName);\n        Console.WriteLine (value);\n    }\n}\n\n. ",
    "z1c0": "Sorry, didn't realize that.. Thanks for the feedback.\nI created an issue (#1275) for that and will open another pull request if we come to a conclusion how we could handle that. . Thank you @siegfriedpammer that solves my problem.\nSorry that I missed that setting.. ",
    "Viridovics": "Are you compiling with \"Optimize code\" option?. Edit: Fixed in 2d34a83\nIt's not working for case:\npublic static void M(int a, params object[] x)\n        {\n            var arrays = new object[0];\n            M(a, (object)arrays);\n        }. @siegfriedpammer thank you for your feedback :). ",
    "destrofer": "Yes. It is on by default, so I never think about it. Still even if it is an optimized code maybe ILSpy could check type of field that is in the initializer and move subscription to events right after initialization?. ",
    "halcyon1234": "Sample project attached.  VS2012.  Has both source code and compiled.\nILSpy TestWebsiteOptionalParamDeployTarget\\bin\\TestMerged.dll - TestOptionalParameterAsObject to see the exception\n(using DropBox because github won't let me upload a zip?)\nhttps://www.dropbox.com/s/fke31swqqzjfr94/TestWebsiteOptionalParam.zip?dl=0\n. FYI: though the Type field is incorrect, this MAY be due to a bug in the compiler / something in that pipeline.  I've also opened a Visual Studio ticket with Microsoft:\nhttps://developercommunity.visualstudio.com/content/problem/339639/compile-and-merge-class-with-function-with-optiona.html\n. ",
    "kmatyaszek": "@3asm please check my commit f45dcf0, I think that it resolve your problem.. ",
    "3asm": "Super, that's very helpful. Thanks @kmatyaszek.. ",
    "Heimerdawg": "\nILSpy 4.0 is not compatible with ILSpy 3.x plugins.\n\nOkay, sorry, I did not notice the version difference. Thank you, it is working now.. ",
    "kingshreyash": "Hi Chris, its VS2017 prof ver.. I upgraded VS2017 to latest update, and this resolved the issue.\nIt works like a charm. If I anything I can do in retrun of favor, please let me know. Cheers. ",
    "chadfords": "Same happened here. Is this related to netcore?. ",
    "agametov": "@christophwille \n@siegfriedpammer\nRead the docs:\n https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.reverse?view=netframework-4.6\nhttps://docs.microsoft.com/en-us/dotnet/api/system.array.reverse?view=netframework-4.6\n. Example https://dotnetfiddle.net/CWipOa. No problem, @siegfriedpammer  :-)\nI thought this PR doesn`t need a detailed description because of one line.\nNext time I will write a detailed description! :-). ",
    "TautvydasZilys": "\nWinMDs are tricky since they can be viewed in two modes - raw and projected. The mode is specified via an option when creating the reader.\n\nThat is true for cecil too (https://github.com/jbevain/cecil/blob/eea822cad4b6f320c9e1da642fcbc0c129b00a6e/Mono.Cecil/ModuleDefinition.cs#L103). TBH I think that should be an option in ILSpy, similar to how \"decompile await constructs\" is.\nDo you believe this is a bug in the metadata reader, or rather how it is used?. It's not.\n\n. ",
    "maxtoroq": "I'm sure this is not the best place for this, but I just wanted to express my gratitude for making this tool that increases my happiness. THANK YOU!. ",
    "DSGMBot115": "\nCould you please tell us, what you were doing and which version of ILSpy you used? Thank you!\n\nILSpy version is 4.0.0.4392-beta2.\nwhen i save .csproj,no debug symble.. > You mean when you save an assembly as C# project? Well, all we create is C# files, you'd have to compile that to get a PDB (or use the Generate PDB feature instead).\nI save a class as C# files, it has debug symbol. ",
    "LordMike": "I'm using the decompiler to produce a number of things, all for a Nuget clone (private hosting) that will show C# code for the assemblies in its repository.\nFor that, I (think) I need:\n\nA C# representation for each type (got this, awesome project :))\nA searchable list of members / types (got this)\nA string representation of all members, to show to users as a \"light\" view. Inspiration\n\nIdeally. I'd like the C# representation as it would have been in code - the async modifier specifically probably doesn't matter, but things like ref, public/protected, 'this' (extensions) etc, should be in place.. Ooh.. Nice. I'll give that a go. Thanks :)\nIs there a place that all the \"relevant\" API's are described?. I was struggling to make this work, till I found out that everythings been redone in 4.x (apparently?). Works in 4.x - now I just need everything else in place :D.\nThanks. :+1:. ",
    "daningalla": "Excellent - I see you are referring to the betas. Will check it out, thank you kindly.. ",
    "ninjaoxygen": "The assembly was built for a .NET CF embedded platform built within VS2008. I will try to provide a sample, however I have to be careful of license terms.\nI have looked into it and now realise the above patch is actually just a workaround that appears correct, but is not be the whole story.\nThe real mscorlib for the platform is only in the SDK, and ends up at e.g. C:\\Program Files (x86)\\Microsoft.NET\\SDK\\CompactFramework\\v3.5\\WindowsCE\\mscorlib.dll\nIs there a sensible way this can be supported? I am not sure what other versions of WindowsCE exist and work with unique versions of mscorlib.. Attaching an example file that references the 3.5 mscorlib.dll\nTestNetCf35.zip\n. So the original patch was not the right thing to do - it actually loads the wrong mscorlib then.\nAfter some more testing I find that if I fix the original exception by adding a null check, commit 4ef03611ddbcbffb7f40d5855a9a053f285ff386 then it load a v4.0 mscorlib.\nSecondly I have added a check for the .NET Compact Framework SDK in commit e812a1f2309c45b7906abbf89cde79c3f2b2296d which now loads the correct mscorlib.. ",
    "sungam3r": "I talk about  ILSpy codebase itself, not decompiled output.\nFor example:\n https://github.com/icsharpcode/ILSpy/blob/master/ILSpy/FilterSettings.cs#L67\nor\nhttps://github.com/icsharpcode/ILSpy/blob/master/ILSpy/FilterSettings.cs#L92. A little more:\nhttps://github.com/icsharpcode/ILSpy/blob/master/ILSpy/AboutPage.cs#L239\nhttps://github.com/icsharpcode/ILSpy/blob/master/ILSpy/AboutPage.cs#L252\nhttps://github.com/icsharpcode/ILSpy/blob/master/ILSpy/LoadedNugetPackage.cs#L63\n. Ok.. LGTM. ",
    "siriak": "I can fix it if no one minds.. Updated pull request. ",
    "Inkeyeus": "Sorry if this is already an issue, sorry if it\u2019s intentional, and sorry about the quality, I wrote all this on my phone.. That\u2019s probably why, considering I decompiled a plug-in and the incorrect property calls were to properties which are defined in the API. . How would I fix it though? How do I add the reference?. Thanks.. ",
    "TheXenocide": "Actually, interestingly I'm now getting NullReferenceException from all analyzers. What's curious is that they were working before. I tried closing and re-opening ILSpy and am still getting them. Here's another stack trace:\nSystem.NullReferenceException: Object reference not set to an instance of an object.\n   at ICSharpCode.ILSpy.Analyzers.Builtin.TypeInstantiatedByAnalyzer.<Analyze>d__1.MoveNext()\n   at ICSharpCode.ILSpy.Analyzers.AnalyzerSearchTreeNode.<FetchChildren>d__10.MoveNext()\n   at ICSharpCode.ILSpy.TreeNodes.ThreadingSupport.<>c__DisplayClass5_0.<LoadChildren>b__0()\n   at System.Threading.Tasks.Task`1.InnerInvoke()\n   at System.Threading.Tasks.Task.Execute()\nI've captured a memory dump, in case that helps, but am unable to attach here due to size. I'll hold onto it for a bit so let me know if you need it.\n. Apologies for the delay. Initially I didn't see the notification for your previous message, but I have just shared the file with you from Google Drive. Unfortunately, I'm no longer able to reproduce the issue (at some point I think removing all inspected assemblies, closing, reopening, and re-decompiling seemed to get me past the issue). I've since moved on to other work, but if there's anything I can do to help out (understanding I have limited time available), please let me know. I do hope the information helps and thanks for what you guys do!. ",
    "DaneSpiritGOD": "// C:\\Windows\\Microsoft.Net\\assembly\\GAC_MSIL\\PresentationFramework\\v4.0_4.0.0.0__31bf3856ad364e35\\PresentationFramework.dll\n// PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\n// Global type: \n// Architecture: AnyCPU (64-bit preferred)\n// Runtime: v4.0.30319\n// This assembly is signed with a strong name key.\n// Hash algorithm: SHA1\n// Public key: 0240048000940006200024005253413104001010b5fc90e727f67871e773a8fde8938c81dd42ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131aebd333c5ee6021672d9718ea31a8aebdda072f25d87dba6fc9ffd598ed4da35e44c398c45437e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c3855da9\nsorry for my description. I make a mistake. I found the static cctor is in the right code but not in the class member list (left list).\nAll controls such as Button,CheckBox has static cctor in the code but not in the member list.\n\nAs you know ,some class may be very big. I think any member including static cctor needs appear in the list.. yes, you are right.\nsorry for my neglect.. what does BAML decompiler plugin mean? \n\nI download the ilspy with vs extension. . oh,I found the where the problem is.\nilspy vs  extension doesn't contain the BAML decompiler plugin while the release zip contains the file.. ",
    "platonov-eugene": "Indeed, reason is this. Thank you very much for help.. ",
    "veccsolutions": "Primarily when I have opened libraries across a network share it takes a long time to re-open ilspy unless I cleared out the list before closing it. Another is it's just clutter. I made my own custom build that did this as an option defaulting to current behavior. I could do a pull request with it if you would like.. Done. I'm on Windows 10, 17134.523. The steps to reproduce, fresh download of ILSpy version 4.0.1.4530, extract it, open ilspy.exe, file->open->locked up. Running from source in VS, it hangs on the line I mentioned above, particularly when dlg.ShowDialog() is called.. ",
    "sjx95": "Thanks! This is very helpful!\nBesides, should I expect (invocationExpression.GetResolveResult() as CSharpInvocationResolveResult).IsDelegateInvocation return true while decompiling the f() as below? In my test case, this return false.\nC#\nclass T\n    {\n        public void M()\n        {\n            var f = new Func<string>(() => \"STRING\");\n            f();\n        }\n    }. BTW in invocationExpression {h ()} where h is a normal member method, the invocationExpression.Target.GetResolveResult() return an ErrorResolveResult, is it expected?\nThis can return ILVariableResolveResult if h is a local delegate variable, or MemberResolveResult if h is a delegate member.. Yeah delegate is OK, but member method failed. Here is the code, which using nuget package:\n```C#\nusing System;\nusing ICSharpCode.Decompiler;\nusing ICSharpCode.Decompiler.CSharp;\nusing ICSharpCode.Decompiler.CSharp.Syntax;\nusing ICSharpCode.Decompiler.TypeSystem;\nnamespace ILSpyCase\n{\n    class Program\n    {\n        class Visitor : DepthFirstAstVisitor\n        {\n            public override void VisitMethodDeclaration(MethodDeclaration methodDeclaration)\n            {\n                if (methodDeclaration.Name != \"targetMethod\") \n                    return;\n                base.VisitMethodDeclaration(methodDeclaration);\n            }\n        public override void VisitIdentifierExpression(IdentifierExpression identifierExpression)\n        {\n            base.VisitIdentifierExpression(identifierExpression);\n            Console.WriteLine(identifierExpression);\n            Console.WriteLine(identifierExpression.GetResolveResult());\n            Console.WriteLine(identifierExpression.GetSymbol());\n            Console.WriteLine(\"========\");\n        }\n    }\n\n    static void Main(string[] args)\n    {\n        var dec = new CSharpDecompiler(System.Diagnostics.Process.GetCurrentProcess().MainModule.FileName, new DecompilerSettings());\n        var ast = dec.DecompileType(new FullTypeName(\"ILSpyCase.Case\"));\n        ast.AcceptVisitor(new Visitor());\n    }\n}\n\nclass Case\n{\n    private Func<int> func = () => 233;\n    int method() { return 233;}\n\n    void targetMethod()\n    {\n        func();\n        method();\n    }\n}\n\n}\nAnd here is the result:\nfunc\n[MemberResolveResult 04000001 ILSpyCase.Case.func]\n04000001 ILSpyCase.Case.func\n========\nmethod\n[ErrorResolveResult ?]\n========\n\u8bf7\u6309\u4efb\u610f\u952e\u7ee7\u7eed. . .\n``. So maybe I should try to get resolve result of IdentifierExpression, if failed, check its Parent?\nI'll have a try, thank you!. Excuse me,CSharpInvocationResolveResult.IsExtensionMethodInvocationdoesn't work as I expect, could you please have a check? It used to returnTruein 3.1, but nowFalse`.\nI think this may be a similar problem as IsDelegateInvocation.\nHere is my test case:\n```C#\nusing System;\nusing ICSharpCode.Decompiler;\nusing ICSharpCode.Decompiler.CSharp;\nusing ICSharpCode.Decompiler.CSharp.Resolver;\nusing ICSharpCode.Decompiler.CSharp.Syntax;\nusing ICSharpCode.Decompiler.TypeSystem;\nnamespace ILSpyCase\n{\n    class Program\n    {\n        class Visitor : DepthFirstAstVisitor\n        {\n            public override void VisitMethodDeclaration(MethodDeclaration methodDeclaration)\n            {\n                if (methodDeclaration.Name != \"targetMethod\") \n                    return;\n                base.VisitMethodDeclaration(methodDeclaration);\n            }\n        public override void VisitInvocationExpression(InvocationExpression invocationExpression)\n        {\n            var irr = invocationExpression.GetResolveResult() as CSharpInvocationResolveResult;\n            Console.WriteLine(invocationExpression);\n            Console.WriteLine($\"IsExtensionMethodInvocation: {irr.IsExtensionMethodInvocation}\");\n\n            base.VisitInvocationExpression(invocationExpression);\n        }\n    }\n\n    static void Main(string[] args)\n    {\n        var dec = new CSharpDecompiler(System.Diagnostics.Process.GetCurrentProcess().MainModule.FileName, new DecompilerSettings());\n        var ast = dec.DecompileType(new FullTypeName(\"ILSpyCase.Case\"));\n        ast.AcceptVisitor(new Visitor());\n    }\n}\n\nstatic class StaticMethods\n{\n    public static void ExtMethod(this Case c) { }\n}\n\nclass Case\n{\n    void targetMethod()\n    {\n        this.ExtMethod();\n    }\n}\n\n}\n\nthis.ExtMethod ()\nIsExtensionMethodInvocation: False\n```. ",
    "vatsan-madhavan": "Thanks for the hint @lextm. Based on feedback from the issue I'd opened on Microsoft/cci, I was able to puzzle it out and resolve it. . ",
    "tonysneed": "I found the problem. It looks like the TextWriter is not being flushed: output.Flush() needs to be added here.. ",
    "hansmbakker": "Install logs:\n20-2-2019 00:24:38 - Microsoft VSIX Installer\n20-2-2019 00:24:38 - -------------------------------------------\n20-2-2019 00:24:38 - vsixinstaller.exe version:\n20-2-2019 00:24:38 - 16.0.1230\n20-2-2019 00:24:38 - -------------------------------------------\n20-2-2019 00:24:38 - Command line parameters:\n20-2-2019 00:24:38 - C:\\Program Files (x86)\\Microsoft Visual Studio\\Installer\\resources\\app\\ServiceHub\\Services\\Microsoft.VisualStudio.Setup.Service\\vsixinstaller.exe,/appidinstallpath:C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\Common7\\IDE\\devenv.exe,/skuName:Enterprise,/skuVersion:16.0.28608.199,/appidname:Microsoft Visual Studio Enterprise 2019,/culture:en-US,/noep,C:\\Users\\hansm\\AppData\\Local\\Temp\\VSIXunxz5gmh.vsix\n20-2-2019 00:24:38 - -------------------------------------------\n20-2-2019 00:24:38 - Microsoft VSIX Installer\n20-2-2019 00:24:38 - -------------------------------------------\n20-2-2019 00:24:39 - Found setup instance 196adb9a but not in launchable state.\n20-2-2019 00:24:39 - Initializing Install...\n20-2-2019 00:24:39 - Extension Details...\n20-2-2019 00:24:39 -    Identifier         : a9120dbe-164a-4891-842f-fb7829273838\n20-2-2019 00:24:39 -    Name               : ILSpy\n20-2-2019 00:24:39 -    Author             : ic#code\n20-2-2019 00:24:39 -    Version            : 4.0.1.4530\n20-2-2019 00:24:39 -    Description        : Integrates the ILSpy decompiler into Visual Studio.\n20-2-2019 00:24:39 -    Locale             : en-US\n20-2-2019 00:24:39 -    MoreInfoURL        : https://ilspy.net/\n20-2-2019 00:24:39 -    InstalledByMSI     : False\n20-2-2019 00:24:39 -    SupportedFrameworkVersionRange : [4.5,)\n20-2-2019 00:24:39 - \n20-2-2019 00:24:39 -    SignatureState     : Unsigned\n20-2-2019 00:24:39 -    Supported Products : \n20-2-2019 00:24:39 -        Microsoft.VisualStudio.Community\n20-2-2019 00:24:39 -            Version : [15.0,17.0)\n20-2-2019 00:24:39 - \n20-2-2019 00:24:39 -    References         : \n20-2-2019 00:24:39 -    Prerequisites      : \n20-2-2019 00:24:39 -        -------------------------------------------------------\n20-2-2019 00:24:39 -        Identifier   : Microsoft.VisualStudio.Component.CoreEditor\n20-2-2019 00:24:39 -        Name         : Visual Studio core editor\n20-2-2019 00:24:39 -        Version      : [15.0,)\n20-2-2019 00:24:39 - \n20-2-2019 00:24:39 -        -------------------------------------------------------\n20-2-2019 00:24:39 -        Identifier   : Microsoft.VisualStudio.Component.Roslyn.LanguageServices\n20-2-2019 00:24:39 -        Name         : Roslyn Language Services\n20-2-2019 00:24:39 -        Version      : [15.0,)\n20-2-2019 00:24:39 - \n20-2-2019 00:24:39 - Signature Details...\n20-2-2019 00:24:39 -    Extension is not signed.\n20-2-2019 00:24:39 - \n20-2-2019 00:24:39 - Capping recursion at 5 directories in each extension root due to 'default limit'.\n20-2-2019 00:24:39 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\zqjm1yjz.wp0\\extension.vsixmanifest'\n20-2-2019 00:24:39 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\y3yv3z5j.rpp\\extension.vsixmanifest'\n20-2-2019 00:24:39 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\xw33c2wh.slt\\extension.vsixmanifest'\n20-2-2019 00:24:39 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\xucumil3.wqs\\extension.vsixmanifest'\n20-2-2019 00:24:39 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\xt0lzy5l.irh\\extension.vsixmanifest'\n20-2-2019 00:24:39 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\wa4erp5i.ott\\extension.vsixmanifest'\n20-2-2019 00:24:39 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\VSSDK\\extension.vsixmanifest'\n20-2-2019 00:24:39 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\vonosads.oyl\\extension.vsixmanifest'\n20-2-2019 00:24:39 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\v04t23tm.u4q\\extension.vsixmanifest'\n20-2-2019 00:24:39 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\tmd1qm1e.3yq\\extension.vsixmanifest'\n20-2-2019 00:24:39 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\TestWindow.Dotnet\\extension.vsixmanifest'\n20-2-2019 00:24:39 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\TestPlatform\\extension.vsixmanifest'\n20-2-2019 00:24:39 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\srzmgkfk.kau\\extension.vsixmanifest'\n20-2-2019 00:24:39 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\rycpj4jp.hvx\\extension.vsixmanifest'\n20-2-2019 00:24:39 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\ptxmy350.zst\\extension.vsixmanifest'\n20-2-2019 00:24:39 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\pdz15qa2.hhc\\extension.vsixmanifest'\n20-2-2019 00:24:39 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\olo3ebtr.jyc\\extension.vsixmanifest'\n20-2-2019 00:24:39 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\nrugctgq.afr\\extension.vsixmanifest'\n20-2-2019 00:24:39 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\mwogktil.dmv\\extension.vsixmanifest'\n20-2-2019 00:24:39 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\mv3jbymw.md4\\extension.vsixmanifest'\n20-2-2019 00:24:39 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Windows Azure Tools Diagnostics\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Windows Azure Tools\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Windows Azure Tools\\SnapshotViewer\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Windows Azure Tools\\Resource Manager\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Windows Azure Tools\\RemoteDebugger\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Windows Azure Tools\\Deployment Project\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Windows Azure Tools\\Common\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Web Tools\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Web Tools\\Shared\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Web Tools\\Library Manager\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Web Tools\\Azure\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Web Tools\\Azure\\WebJobs\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Web Tools\\Azure\\Package\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Web\\Mvc\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Web\\Mvc\\Scaffolding\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\WCF Connected Service\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Visual Studio MPF\\14.0\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Visual Studio MPF\\12.0\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Visual Studio MPF\\11.0\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Visual Studio MPF\\10.0\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\VC\\WindowsPhoneAppx\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\VC\\ClassWizard\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Unit Test Explorer\\TestWIExtension\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Unit Test Explorer\\Profiler\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\TestTools\\Fakes\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\TemplateEngine\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\TailoredProjectServices\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\SQLEditor\\Vsix\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\SQLDB\\Vsix\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\SQLDB\\SSDTUpdate\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Publish\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Portable Library Tools\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Microsoft Office 365 Connected Service\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\ManagedProjectSystem\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\LiveShare\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\CodeSense\\Providers\\TestsProvider\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\CodeSense\\Providers\\ReferencesProvider\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\CodeSense\\Providers\\GitProvider\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\CodeSense\\Providers\\FileIndicatorProvider\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\CodeSense\\Providers\\CollaborationProvider\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\CodeSense\\Framework\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Architecture Tools\\Repository\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Architecture Tools\\GraphDocumentPackage\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Architecture Tools\\ArchitectureExplorerPackage\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\.NetNative\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\lyofgqbs.nn1\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\l4fe104o.gyl\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\kzze2fur.fej\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\kuj5fhn0.mio\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\iybemtx1.pdu\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\ik23z1ed.msw\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\iibyikzs.jcg\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\ieab0rkp.fvo\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\eughuc3r.fub\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\e5fnztdn.kll\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\e4hxrgiq.0zb\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\cfbh3fhe.ges\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\aw523pg0.2k0\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\5v51bhzf.hmk\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\5mrphvfn.4nu\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\5hd0aczx.2ip\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\4kekpdpp.4uz\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\3rlnrul4.hii\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\22wr5pnm.tdx\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\0vangppl.aym\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Capping recursion at 5 directories in each extension root due to 'default limit'.\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Platform\\Visual Studio MPF\\16.0\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Platform\\TreeNavigation\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Platform\\TreeNavigation\\GraphProvider\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Platform\\SnapshotDebugger\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Platform\\Shell\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Platform\\PerfMarkers\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Platform\\ParallelDebugger\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Platform\\NavigateTo\\FileProvider\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Platform\\Instrumentation\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Platform\\DotNetObjectAlloc\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Platform\\DiagnosticsHub\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Platform\\Debugger\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Platform\\CPUSampling\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\XamlLanguageService\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\XamlDiagnostics\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\WebClient\\Diagnostics\\WebDiagnosticsAttach\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\WebClient\\Diagnostics\\ToolWindows\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\WebClient\\Diagnostics\\EdgeDebugAdapter\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\WebClient\\Diagnostics\\ChromeDebugAdapter\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\Web\\Razor\\v3.0\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\Web\\Exports\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\Web\\ASPX\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\VisualStudio\\Editors\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\VC\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\VC\\Project\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\VC\\NavigateTo\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\VC\\LanguageServer\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\VC\\Editor\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\VC\\Debugger\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\UniversalFlavor\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\TypeScript\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\TextMate\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\TestWindow\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\TemplateProviders\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\TeamFoundation\\Team Explorer\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\Search\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\ReferenceManager\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\RazorLanguageServices\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\ProjectServices\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\Project\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\ProductUpdate\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\ProductUpdate\\Windows_VSTools\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\Performance Tools\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\OpenFolder\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\NuGet\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\NavigateTo\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\ManagedLanguages\\VBCSharp\\SourceBasedTestDiscovery\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\ManagedLanguages\\VBCSharp\\LiveUnitTesting\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\ManagedLanguages\\VBCSharp\\LanguageServices\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\ManagedLanguages\\VBCSharp\\InteractiveComponents\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\ManagedLanguages\\VBCSharp\\ExpressionEvaluators\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\LanguageServer\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\Language\\GenerateType\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\InteractiveWindow\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\IntelliTrace\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\GettingStartedTemplates\\Resources\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\FSharp\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\ExtensionManager\\ServiceModule\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\ErrorList\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\Editorconfig\\Wizard\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\Editor\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\DesktopBridge\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\DesignTools\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\CodingConventions\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\CodeAnalysis\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\ClientDiagnostics\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\ClientDiagnostics\\AppResponsiveness\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\ClientDiagnostics\\AppAnalysis\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\CallHierarchy\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\Architecture Tools\\Providers\\Solution\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\Architecture Tools\\Providers\\ProgressiveReveal\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\Architecture Tools\\Providers\\NativeProgressiveReveal\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\Architecture Tools\\Providers\\NativeCode\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\Architecture Tools\\Providers\\NativeBinary\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\Architecture Tools\\Providers\\ManagedProvider\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\Architecture Tools\\Providers\\Core\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\Architecture Tools\\Providers\\AssemblyMetadata\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\Architecture Tools\\Providers\\Analyzers\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\Architecture Tools\\GraphProviderPackage\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\AnalyzeCodeCoverage\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\DataDesign\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Capping recursion at 5 directories in each extension root due to 'default limit'.\n20-2-2019 00:24:40 - Found 'C:\\USERS\\HANSM\\APPDATA\\LOCAL\\MICROSOFT\\VISUALSTUDIO\\16.0_196ADB9A\\EXTENSIONS\\3eajzkdz.auj\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\COMMON FILES\\MICROSOFT\\EXTENSIONMANAGER\\EXTENSIONS\\Microsoft\\Windows Kits\\10\\Desktop SDK\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\COMMON FILES\\MICROSOFT\\EXTENSIONMANAGER\\EXTENSIONS\\Microsoft\\Windows Kits\\10\\SDK ARM Additions\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Found 'C:\\PROGRAM FILES (X86)\\COMMON FILES\\MICROSOFT\\EXTENSIONMANAGER\\EXTENSIONS\\Microsoft\\Windows Kits\\10\\Windows Store SDK\\extension.vsixmanifest'\n20-2-2019 00:24:40 - Skipping 'C:\\Users\\hansm\\AppData\\Local\\Microsoft SDKs' as it doesn't exist\n20-2-2019 00:24:40 - The extension with ID 'a9120dbe-164a-4891-842f-fb7829273838' is not installed to Microsoft Visual Studio Enterprise 2019.\n20-2-2019 00:24:45 - InstallProgressPage ChangeType: 'SingleTarget' operationCount: '2' Text: 'Modifying Microsoft Visual Studio Enterprise 2019...'\n20-2-2019 00:24:45 - The following target products have been selected...\n20-2-2019 00:24:45 -    Microsoft Visual Studio Enterprise 2019\n20-2-2019 00:24:45 - \n20-2-2019 00:24:45 - Capping recursion at 5 directories in each extension root due to 'default limit'.\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\zqjm1yjz.wp0\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\y3yv3z5j.rpp\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\xw33c2wh.slt\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\xucumil3.wqs\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\xt0lzy5l.irh\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\wa4erp5i.ott\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\VSSDK\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\vonosads.oyl\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\v04t23tm.u4q\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\tmd1qm1e.3yq\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\TestWindow.Dotnet\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\TestPlatform\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\srzmgkfk.kau\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\rycpj4jp.hvx\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\ptxmy350.zst\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\pdz15qa2.hhc\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\olo3ebtr.jyc\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\nrugctgq.afr\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\mwogktil.dmv\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\mv3jbymw.md4\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Windows Azure Tools Diagnostics\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Windows Azure Tools\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Windows Azure Tools\\SnapshotViewer\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Windows Azure Tools\\Resource Manager\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Windows Azure Tools\\RemoteDebugger\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Windows Azure Tools\\Deployment Project\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Windows Azure Tools\\Common\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Web Tools\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Web Tools\\Shared\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Web Tools\\Library Manager\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Web Tools\\Azure\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Web Tools\\Azure\\WebJobs\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Web Tools\\Azure\\Package\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Web\\Mvc\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Web\\Mvc\\Scaffolding\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\WCF Connected Service\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Visual Studio MPF\\14.0\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Visual Studio MPF\\12.0\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Visual Studio MPF\\11.0\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Visual Studio MPF\\10.0\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\VC\\WindowsPhoneAppx\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\VC\\ClassWizard\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Unit Test Explorer\\TestWIExtension\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Unit Test Explorer\\Profiler\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\TestTools\\Fakes\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\TemplateEngine\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\TailoredProjectServices\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\SQLEditor\\Vsix\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\SQLDB\\Vsix\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\SQLDB\\SSDTUpdate\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Publish\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Portable Library Tools\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Microsoft Office 365 Connected Service\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\ManagedProjectSystem\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\LiveShare\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\CodeSense\\Providers\\TestsProvider\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\CodeSense\\Providers\\ReferencesProvider\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\CodeSense\\Providers\\GitProvider\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\CodeSense\\Providers\\FileIndicatorProvider\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\CodeSense\\Providers\\CollaborationProvider\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\CodeSense\\Framework\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Architecture Tools\\Repository\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Architecture Tools\\GraphDocumentPackage\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\Architecture Tools\\ArchitectureExplorerPackage\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\Microsoft\\.NetNative\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\lyofgqbs.nn1\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\l4fe104o.gyl\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\kzze2fur.fej\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\kuj5fhn0.mio\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\iybemtx1.pdu\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\ik23z1ed.msw\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\iibyikzs.jcg\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\ieab0rkp.fvo\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\eughuc3r.fub\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\e5fnztdn.kll\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\e4hxrgiq.0zb\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\cfbh3fhe.ges\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\aw523pg0.2k0\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\5v51bhzf.hmk\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\5mrphvfn.4nu\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\5hd0aczx.2ip\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\4kekpdpp.4uz\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\3rlnrul4.hii\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\22wr5pnm.tdx\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\EXTENSIONS\\0vangppl.aym\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Capping recursion at 5 directories in each extension root due to 'default limit'.\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Platform\\Visual Studio MPF\\16.0\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Platform\\TreeNavigation\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Platform\\TreeNavigation\\GraphProvider\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Platform\\SnapshotDebugger\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Platform\\Shell\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Platform\\PerfMarkers\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Platform\\ParallelDebugger\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Platform\\NavigateTo\\FileProvider\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Platform\\Instrumentation\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Platform\\DotNetObjectAlloc\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Platform\\DiagnosticsHub\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Platform\\Debugger\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Platform\\CPUSampling\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\XamlLanguageService\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\XamlDiagnostics\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\WebClient\\Diagnostics\\WebDiagnosticsAttach\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\WebClient\\Diagnostics\\ToolWindows\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\WebClient\\Diagnostics\\EdgeDebugAdapter\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\WebClient\\Diagnostics\\ChromeDebugAdapter\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\Web\\Razor\\v3.0\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\Web\\Exports\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\Web\\ASPX\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\VisualStudio\\Editors\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\VC\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\VC\\Project\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\VC\\NavigateTo\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\VC\\LanguageServer\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\VC\\Editor\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\VC\\Debugger\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\UniversalFlavor\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\TypeScript\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\TextMate\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\TestWindow\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\TemplateProviders\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\TeamFoundation\\Team Explorer\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\Search\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\ReferenceManager\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\RazorLanguageServices\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\ProjectServices\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\Project\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\ProductUpdate\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\ProductUpdate\\Windows_VSTools\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\Performance Tools\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\OpenFolder\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\NuGet\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\NavigateTo\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\ManagedLanguages\\VBCSharp\\SourceBasedTestDiscovery\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\ManagedLanguages\\VBCSharp\\LiveUnitTesting\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\ManagedLanguages\\VBCSharp\\LanguageServices\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\ManagedLanguages\\VBCSharp\\InteractiveComponents\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\ManagedLanguages\\VBCSharp\\ExpressionEvaluators\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\LanguageServer\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\Language\\GenerateType\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\InteractiveWindow\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\IntelliTrace\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\GettingStartedTemplates\\Resources\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\FSharp\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\ExtensionManager\\ServiceModule\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\ErrorList\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\Editorconfig\\Wizard\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\Editor\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\DesktopBridge\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\DesignTools\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\CodingConventions\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\CodeAnalysis\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\ClientDiagnostics\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\ClientDiagnostics\\AppResponsiveness\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\ClientDiagnostics\\AppAnalysis\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\CallHierarchy\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\Architecture Tools\\Providers\\Solution\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\Architecture Tools\\Providers\\ProgressiveReveal\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\Architecture Tools\\Providers\\NativeProgressiveReveal\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\Architecture Tools\\Providers\\NativeCode\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\Architecture Tools\\Providers\\NativeBinary\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\Architecture Tools\\Providers\\ManagedProvider\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\Architecture Tools\\Providers\\Core\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\Architecture Tools\\Providers\\AssemblyMetadata\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\Architecture Tools\\Providers\\Analyzers\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\Architecture Tools\\GraphProviderPackage\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\Microsoft\\AnalyzeCodeCoverage\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Found 'C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2019\\PREVIEW\\COMMON7\\IDE\\COMMONEXTENSIONS\\DataDesign\\extension.vsixmanifest'\n20-2-2019 00:24:45 - Capping recursion at 5 directories in each extension root due to 'default limit'.\n20-2-2019 00:24:45 - Found 'C:\\USERS\\HANSM\\APPDATA\\LOCAL\\MICROSOFT\\VISUALSTUDIO\\16.0_196ADB9A\\EXTENSIONS\\3eajzkdz.auj\\extension.vsixmanifest'\n20-2-2019 00:24:46 - Found 'C:\\PROGRAM FILES (X86)\\COMMON FILES\\MICROSOFT\\EXTENSIONMANAGER\\EXTENSIONS\\Microsoft\\Windows Kits\\10\\Desktop SDK\\extension.vsixmanifest'\n20-2-2019 00:24:46 - Found 'C:\\PROGRAM FILES (X86)\\COMMON FILES\\MICROSOFT\\EXTENSIONMANAGER\\EXTENSIONS\\Microsoft\\Windows Kits\\10\\SDK ARM Additions\\extension.vsixmanifest'\n20-2-2019 00:24:46 - Found 'C:\\PROGRAM FILES (X86)\\COMMON FILES\\MICROSOFT\\EXTENSIONMANAGER\\EXTENSIONS\\Microsoft\\Windows Kits\\10\\Windows Store SDK\\extension.vsixmanifest'\n20-2-2019 00:24:46 - Skipping 'C:\\Users\\hansm\\AppData\\Local\\Microsoft SDKs' as it doesn't exist\n20-2-2019 00:24:46 - Beginning to install extension to Microsoft Visual Studio Enterprise 2019...\n20-2-2019 00:24:46 - Found setup instance 196adb9a but not in launchable state.\n20-2-2019 00:24:46 - Install Error : System.InvalidOperationException: Cannot find setup engine instance.\n   bij Microsoft.VisualStudio.ExtensionManager.SetupEngineUtility.GetCurrentSetupInstance(IEngineHost engineHost)\n   bij Microsoft.VisualStudio.ExtensionManager.SetupEngineService.CreateEngine(IEngineHost engineHost, IServiceProvider serviceProvider, InstallFlags installFlags)\n   bij Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl.PerformSetupEngineInstall(InstallableExtensionImpl extension, Boolean installPerMachine, Boolean isPackComponent, IDictionary`2 extensionsInstalledSoFar, List`1 extensionsUninstalledSoFar, IInstalledExtensionList modifiedInstalledExtensionsList, IProgress`1 progress, InstallFlags installFlags, AsyncOperation asyncOp, Version targetedVsVersion, IInstalledExtension& newExtension)\n   bij Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl.InstallInternal(InstallableExtensionImpl extension, InstallFlags installFlags, IDictionary`2 extensionsInstalledSoFar, List`1 extensionsUninstalledSoFar, IInstalledExtensionList modifiedInstalledExtensionsList, AsyncOperation asyncOp, IProgress`1 progress, Version targetedVsVersion)\n   bij Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl.BeginInstall(IInstallableExtension installableExtension, InstallFlags installFlags, AsyncOperation asyncOp, Version targetedVsVersion)\n   bij Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl.InstallWorker(IInstallableExtension extension, InstallFlags installFlags, AsyncOperation asyncOp). It turns out my Visual Studio had upgraded and still needed a reboot before the ILSpy installer worked. This can be closed.. ",
    "terrylao": "Sorry, this time cannot provide DLL.\nbut the code looks generate correctly, but dialog box not ended.. 1. \"the decompiling dialog\"\n2. i found that .csproj will not generate correctly. when i click cancel, it leave \"Decompiled was cancelled.\" in .csproj\nfile uploaded\nhanging.zip\n. file uploaded. ",
    "Ristovski": "@siegfriedpammer How about introducing the ability to specify external references with ilspycmd?. ilspycmd should provide an option for setting the search path for dlls to be used as references without decompiling them.\nThis would help in cases where ilspycmd produces Unknown result type (might be due to invalid IL or missing references). ",
    "GoddessLuBoYan": "Because of some reasons, I can't use VS2017. > Thats your main show stopper\n\n2013 can't support latest .net editions which ILSpy requires...\n\noh, that's bad.\nIs there any console version? . > > Thats your main show stopper\n\n\n2013 can't support latest .net editions which ILSpy requires...\n\noh, that's bad.\nIs there any console version?\n\nI mean ILspy console exe, I can use exe too.. > maybe this could treat the issue?\n\nhttps://support.microsoft.com/en-us/help/3045566/microsoft-net-framework-4-6-targeting-pack-and-language-packs-for-wind\n\nthanks, I'll have a try. > maybe this could treat the issue?\n\nhttps://support.microsoft.com/en-us/help/3045566/microsoft-net-framework-4-6-targeting-pack-and-language-packs-for-wind\n\nwow, it works\nhowever, there is an exception:\n\ncan't load \"System.Collections.Immutable, Version=1.2.0.0, Culture=neutral, PublicKeyToken=b03f5f711d50a3a\" or one of this uses.  not match.\nI have used .NET4.6. May I need .NET4.7? . Oh, I have fount the console exe \"ilspycmd\". I will close this issue when I install it. Thank you very much. \nOHHHHH! I GET IT!!!. ",
    "adrium": "I implemented a replacement function in #1440.\nTo convert, I wrote a quick and dirty tool which takes an assembly and a target language version and decompiles it to one string.\nSo to convert, I compile and decompile with a different language version.. Oh I did not see that class, thanks for the hint.\nSure, for the UI it is not needed. Closing the issue and pull request.. ",
    "Styxxy": "@christophwille \nThis would make centralized distribution a lot easier (with SCCM). MSIX can also be published to the MS Store (though in my case this is blocked, so side-loading the MSIX would be for me the \"needed\" case).\nFor some users it might also be handy that it is published to for example chocolatery. Multiple distribution options (which are also free) could be great.. > ok, centralized distribution of ILSpy is somewhat a first when it comes to feature requests.\nYeah, mainly centralized distribution is the main \"feature request\". MSIX is a nice way of packaging, though specific for Win10.\n\nI am not sure that MSIX would work nicely with ILSpy in one specific regard: addins are supposed to be copied into the directory where ilspy.exe lives.\n\nThe deployed package is \"read-only\". Anything user specific has to come from eg %appdata% (user profile). So probably this feature is \"disabled\" for msix packages or the loading of extensions needs to be enhanced :).. You don't need the UWP development tools per se for developing the app. It is just for packaging (and in some cases you would like to debug it). You could also opt for manually packaging (https://docs.microsoft.com/en-gb/windows/uwp/packaging/manual-packaging-root?context=/windows/msix/render).. ",
    "flavius-chis": "What happens if the fitness is not set properly? The result is never inserted. The old code always inserted at the end, maybe you should do the same as a fallback. E.g. array contains {3,4} and you want to insert 1, your insert does not work at all. Why not use a sorted collection?\n. "
}