{
    "olix0r": "Generally, LGTM.\n. This looks good to me.  Thanks for the patch!  We'll pull this internally and it should be published on Monday.\n. I updated the branch with the requested changes. (I'm pre-squashing the branch before I push, so the full commit log isn't making into the review).\n. ok weird, i swore that worked for me but maybe i didn't test it properly. thanks for backing it out!\n. The commonality here seems to be that these are all touching com.twitter.common.zookeeper -- so something is off in the packaging of those libraries, perhaps?. Oh, now I see that the com.twitter.common.zookeeper packages actually have this dependency.  For instance https://oss.sonatype.org/content/repositories/releases/com/twitter/common/zookeeper/client/0.0.81/client-0.0.81.pom:\n<dependencies>\n  <dependency>\n    <groupId>com.twitter</groupId>\n      <artifactId>finagle-core-java</artifactId>\n      <version>6.38.0</version>\n      <scope>compile</scope>\n    </dependency>\n(And I now see that the prior version had the invalid dependency on finagle 6.38.1...\nIgnoring whatever reason gradle has for trying to fetch this before excluding it, why is commons zookeeper depending on bogus packages?\nI'd investigate further, but the github repo seems to years behind whatever exists internally.. I suppose we may not be able to fix this one, but it seems broken that the public commons packages have dependencies on private packages -- these artifacts simply can't be consumed without knowing that these exclusions are necessary and safe (which is only really made clear, afaict, from reading finagle's POMs).. Is this resolved by #218?. what does the non-greedy .*? do for you here?  why does it need a match?  Could this be simpler:\n\"(?:\\\\s+|#.*\\\\n)+\".r\n. Why capture parameters at all if they are unused?\ncase x: Failure => ...\ncase x: Error => ...\n. ",
    "robey": "pushed tweaks.\n. We expect ruby servers will be using them too, so we want them to just be\nable to use yaml.\nOn Mon, Apr 4, 2011 at 10:37, fizx \nreply@reply.github.comwrote:\n\nI guess we don't believe in java Properties?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/twitter/util/pull/1#issuecomment-955005\n. In the doc (please help review! Look for an email from Bob with subject\n\"reminder:\") we just call it yaml. It seemed like key/value pairs should be\nsufficient, and that we should use something off-the-shelf.\n\nOn Mon, Apr 4, 2011 at 11:15, fizx \nreply@reply.github.comwrote:\n\nAh, makes sense.  What's auth-specific here?  Should we call this some\nvariation of config/props/etc files?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/twitter/util/pull/1#issuecomment-955196\n. i'll just merge it here.\n. do you have a use case for these? i'd like to keep the log levels to the basic set so coders don't have to think too hard about which one to use at any given moment.\n. i guess that's another reason to switch to a real web server. stupid sun. :(\n\nwhat permissions could we change to make this easier to patch in your app?\n. i'm worried that changing them from objects to vals might change the binary interface (ABI), which would require a major version bump.\nit might be better to turn those into concurrent hash maps.\n. nice! thanks! :)\n. it would be nice to have a version that uses a background thread, like the filesystem handlers -- agreed!\n. awesome! thanks! :)\ni will cherry-pick those 2 changes.\n. good catch... junk carried over from copy/paste.\n. i got paranoid when my initial version didn't work. looks like yours works fine too. changed!\n. ",
    "fizx": "I guess we don't believe in java Properties?\n. Ah, makes sense.  What's auth-specific here?  Should we call this some variation of config/props/etc files?\n. ",
    "imownbey": "+1\n. ",
    "stevej": "needs a description.\nOn Wed, Apr 6, 2011 at 12:56 PM, kmonkeyjam\nreply@reply.github.com\nwrote:\n\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/twitter/util/pull/3\n. It looks like scala-runtime is not on your classpath.\n. what does 'deploy with version' mean?\n\nTo be honest, this does not seem like an Eval issue, this seems like a Tomcat issue.\n. ",
    "kmonkeyjam": "Wait, description not title.  Adding now.\nOn Wed, Apr 6, 2011 at 1:04 PM, Tina Huang tina@monkey.name wrote:\n\nI added one, but don't know how to re-send the pull request. \u00a0:-(\nOn Wed, Apr 6, 2011 at 1:04 PM, stevej\nreply@reply.github.com\nwrote:\n\nneeds a description.\nOn Wed, Apr 6, 2011 at 12:56 PM, kmonkeyjam\nreply@reply.github.com\nwrote:\n\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/twitter/util/pull/3\n\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/twitter/util/pull/3#issuecomment-965791\n. I added one, but don't know how to re-send the pull request.  :-(\n\n\nOn Wed, Apr 6, 2011 at 1:04 PM, stevej\nreply@reply.github.com\nwrote:\n\nneeds a description.\nOn Wed, Apr 6, 2011 at 12:56 PM, kmonkeyjam\nreply@reply.github.com\nwrote:\n\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/twitter/util/pull/3\n\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/twitter/util/pull/3#issuecomment-965791\n. Added a test.\n. I search in the twitter github and get nothing for birdcage.\n\nOn Wed, Apr 6, 2011 at 1:44 PM, 9len\nreply@reply.github.com\nwrote:\n\nbirdcage/util is now the canonical home of util code changes, the change should be made there...\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/twitter/util/pull/3#issuecomment-965991\n. \n",
    "9len": "can we add a test to make sure that the decoder doesn't care about newlines one way or the other?\n. birdcage/util is now the canonical home of util code changes, the change should be made there...\n. birdcage is an internal repo. \n. ",
    "som-snytt": "This change was zapped when the code was moved to util-codec, but the correct change would have been to override BASE64Encoder.encodeLineSuffix and not emit the newline.  This change, to replace \\n instead of util.Properties.lineSeparator, breaks on Windows (where some of us are dual-booted); or at least the test breaks, since the decoder ignores [\\r\\n]*. But this behavior is arguably wrong, in so far as CR-LF is called for, and is supplied by Commons Codec which is used now:\nhttp://tools.ietf.org/html/rfc2045#section-2.1\n. ",
    "jmhodges": "Wha? Then why is this open sourced if we can't take contributions?\n. ",
    "freels": "Why ever bother removing this? Having it extend java.util.concurrent.TimeoutException is good enough. Having it within the same package as the rest of our stuff is convenient and is slightly better module encapsulation.\n. ",
    "bmatheny": "CONFIG is actually used by the ostrich admin server (used by sun.net.httpserver) and not having access to it makes it tough to filter them out programmatically (level > 700 doesn't read particularly well and having to manage the conversions between Level implementations seems silly). FINEST is defined by java.util.logging.Level, but I don't use it.\nIf you decide not to include them, changing some of the access modifiers in Logger would be helpful as I can't actually make this change without a lot of copy and paste. You can also just remove the convenience methods if you're concerned about too many choices.\n. Most useful permission change would be to the Formatter object. I can't use formatStackTrace outside of the logging package. Copy and paste code ensues.\nI was able to work around the initial issue by overriding formatPrefix with a custom Formatter (for my purposes changing the level there to either TRACE or INFO worked fine). I just bumped up against the above issue in doing so, when I wanted to handle the stack trace formatting a little differently.\n. Oh, yeah, feel free to kill, we found a work around. Thanks @mariusaeriksen \n. ",
    "mariusae": "This seems pretty obsolete by now. @bmatheny: Any thoughts?\n. hey-- we are actually publishing 2.9.1 releases of all our core libraries now.\n. thanks!\n. We upgraded to Guava 11 with bd50623c -- which emulates some of the old MapMaker functionality with CacheBuilder. However, we're deprecating MapMaker in favor of using CacheBuilder directly.\n. we have an internal version of this, and are currently publishing 2.9.1 artifacts.\n. I believe this is fixed.\n. applied internally. push coming soon.\n. could we also just synchronize in the constructor?\n. It seems like David's suggestion is all you need.\n. Merged (manually)\n. I've merged this manually in bf7ee4b8c6e4dc8fae87a871596bfcdd13ab69ff\n. Thanks, I've pulled this in our local repo. Should appear within a day or two.\n. Thanks! I\u2019m pulling this in internally, should show up here soon.\n. pushed, thanks!\n. 3209c722d1a678775005ab56b4a6c858454848ef\n. The \u201cparent\u201d (meta) projects are deprecated; use util-core, util-codec, etc. instead.\ne.g.: http://maven.twttr.com/com/twitter/util-core/\n. I\u2019m hesitant to bring this into util. While intermediate objects are a common pattern, they\u2019re rarer when writing functional code (because you tend to favor transformations). Introducing a new concept, with very marginal advantage, turns into a disadvantage; I\u2019m hesitant to add such new constructs \u2014 when the core language will do, let\u2019s use it.\nImagine a user looking at such code. Where did tap come from? What does it do? They\u2019ll have to hunt down the implicit, look up its documentation, and then understand it.\nIn short, I don\u2019t buy that this actually solves any actual problems, but I do think that it may end up introducing new ones.\n. Thanks! pulled internally. Should show up here soon.\n. I just tried running this, and it works just fine.\n```\nRunning com.twitter.util.FutureRescueTimeout\nTests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.83 sec\nResults :\nTests run: 2, Failures: 0, Errors: 0, Skipped: 0\n```\nAlso, the canonical way to create durations without the use of implicates is:\nscala\nval timeout = Duration(100, TimeUnit.MILLISECONDS)\n. (Can you paste the actual error you get?)\n. Thanks; pulling into internal repo.\n. Thanks! Pulled internally, and should appear here soon.\n. Pulled internally; should appear here shortly. Thanks.\n. I'll do this today.\n. Okay, util 6.0.5 has been released, and I'm awaiting for the sonatype sync:\nhttps://issues.sonatype.org/browse/OSSRH-4041\n. And here we are:\nhttp://search.maven.org/#search%7Cga%7C1%7Ccom.twitter\n. I've also confirmed it works:\n```\n% cat build.sbt\nlibraryDependencies ++= Seq(\n  \"com.twitter\" %% \"util-core\" % \"6.0.5\"\n)\n% cat main.scala\nimport com.twitter.util.Future\nobject Foo extends App {\n  val f = Future.value(123)\n  println(f)\n}\n% sbt run\n[info] Set current project to default-ec21c5 (in build file:/Users/marius/hack/x/)\n[info] Running Foo \ncom.twitter.util.ConstFuture@2de3e7d2\n[success] Total time: 1 s, completed Dec 27, 2012 9:22:49 AM\n``\n. Pulled internally.\n. Pushed.\n. Thanks. I'm pulling this internally, and it should appear here shortly (after review there)\n. It did change, unfortunately: see my line comment above. Theunderlying.remove(runnable)was removed.\nI'll take care of it, probably by taking aScheduledThredPoolExecutorin the constructor.\n. Unfortunately this was introduced in JDK7, and we still need to be compatible with JDK6.\n. I like the idea of just refactoring some of it out via a mixin so you can reuse that code.\n. Thanks. Pulling this internally & it should appear here shortly.\n. I changed the support class to be a mixin (with self-types) and made underlying protected.\n. Pulled; should show up here after CI.\n. Makes sense. I'm pulling this internally; so it should show up here after it goes through CI there.\n. Yes, we cannot do this until we're off of 2.9.x\n. @olix0r - can you take this?\n. This is unfortunate. I had not actually noticed the divergence in behavior before. The new version is actually correct, but you are right, it is unfortunate to change behavior like this, even with a major API bump. This also highlights another inconsistency, that existed in util 5.NoFuture` always threw a timeout exception: https://github.com/twitter/util/blob/668bb3fe7b2432aad703b1020b073eb198dfea3e/util-core/src/main/scala/com/twitter/util/Future.scala#L882\nA Future[T] it could have different behaviors depending on whether it was a Promise or a NoFuture.\nGiven that this is all deprecated, and we're trying to actively move away from it, I'm inclined to accept your patch. The new API is much better defined.\n. I pulled this internally; should show up here soon.\n. I fixed it already\n. Thanks Jorge-- this should show up here soon.\n. @roanta @stevegury Can either of you pull this? Thanks.\n. What Brian said, plus having Duration.Top.in*Seconds is a bug, basically. Unfortunately our hands were kind of tied wrt. backwards compatibility.\n. In our case we only care about this when the refq is nonempty. We could do a few things.\n1.  Simply have a TTL on an empty ref table. If the ref table is empty for more than n seconds, shut it down.\n2.  Have a way to signal that you want the thread to go away whenever the ref table becomes empty.\n. This is well within what Var/Event have been designed for. It's appropriate to represent such signals as Events.\n. Hi @fommil, I understand your frustration. util-logging is there for historical reasons, that are now (and perhaps always were) outdated. We're hoping to obsolete util-logging in the medium-term future, probably to be replaced with SLF4J.\n. > Ooof. I don't think we'd want to take a dependency on protobuf for this functionality. Perhaps that dependency could be added in a separate module that you'd have to opt into\nfwiw, they didn't want this dependency in Go, either, and just wrote manual code to encode the profiles. it's not too bad.. consistent style:  (believe me, I wish there was a good automated tool for this)\nscala\ntrait Hashtable[-T, +R] extends (T => R) { self =>\n. I wonder if it'd be better/safer to xor in the two halves\nscala\n(l>>32).toInt ^ l.toInt\nmasking seems a bit dangerous to me since we're throwing away information (?). eg. if for some reason the longs are purely working in the upper 32 bits, then everything will mask to zero.\n. I'd say keep them inside the definitions. That way they're self-contained; the primes are part of the definition of the hashing algorithms. Their coincidence needn't be encoded.\n. The formatting style we keep is documented here:\nhttp://twitter.github.com/effectivescala/#Formatting\n(should be consistent with the surrounding code)\n. this import is redundant.\n. looks like this remove was anyway redundant?\n. it looks like this isn't redundant. the executor service will not actually proactively remove the runnable from its queues if .remove isn't called\n. Given that ScheduledThreadPoolExecutor is the only implementation in the Java standard library of this, the simplest thing would be to just use that for the dependency instead, even if that's a bit icky. Some other alternatives are:\n1. Some sort of marker trait that allows you to remove runnables\n2. Wrap the scheduled executor service so that it does the right things on cancel.\nSadly, both of these introduce complexity.\n. Why remove sealed?\n. Let's add back the sealed.\n. This is superfluous now: just give the timeout to Await.result.\n. Can you add a comment here explaining why this is done? (eg. pretty much what's in your commit message).\n. I'd much prefer to have just one, simple, name for these. e.g., I liked func. (fun is also good.)\n. > On Feb 10, 2015, at 10:20 AM, Moses Nakamura notifications@github.com wrote:\n\nIn util-core/src/main/scala/com/twitter/util/Function.scala https://github.com/twitter/util/pull/122#discussion_r24435731:\n\n\ndef funcT, R = new Function[T, R] {\noverride def apply(value: T): R = f(value)\n}\n  +\n/**\n* Creates a T => Unit from a JavaConsumer.\n* Useful for e.g. future.onSuccess\n*/\ndef consT = new Function[T, Unit] {\noverride def apply(value: T): Unit = f(value)\n}\n  +\n/**\n* like func, but deals with checked exceptions as well\n*/\ndef exfuncT, R = new ExceptionalFunction[T, R] {\n  My argument for the short / DSL-y version is that for java users interoperating with scala, they'll probably use these methods all the time. DSLs work well for those kinds of users. On the other hand, for folks who only rarely need to use this lib, it's simpler for the name to explain what it's for. I don't think alias-ing is such a sin.\n\n\nI don\u2019t agree. Why introduce this extra inconsistency when we don\u2019t have to?\n. I'm not sure that we should take design hints from dispatch. I really don't think that it's a good idea to introduce aliases without really good justification. I personally liked the original ones. (func, exfunc, cons.)\n. \n",
    "evnm": "Closing this issue, as the test in question has since been ported to ScalaTest.\n. This was merged back in August, but the pullreq was never closed.\n. Thanks for the contribution, @chikei. I merged your change within our internal repo, so it should appear on GitHub after our next library release later this week.\n. Thanks for the fix, @kenrose. I merged your change in our internal repository. It should appear on GitHub on our next library release.\n. Thanks for the contribution, @hmrm. I merged the change in our internal repo. It should appear on GitHub upon our next OSS library release.\n. Thanks for filing. I cut a branch to fix this and a patch is currently in code review.\nReplaying your example with my patch:\n```\nscala> import com.twitter.conversions.storage._\nscala> val x1 = 4.megabytes\nscala>  val x2 = 4.megabytes\nscala> x1.hashCode\nres0: Int = 4194304\nscala> x2.hashCode\nres1: Int = 4194304\n``\n. This change has been merged in our internal repo. It'll appear on GitHub on our next library release.\n. When raising this change for code review internally, @mariusaeriksen proposed simply passingfalsetoparseOrExit1` in App.scala. There's loose consensus that this is an easy, straightforward fix to the problem dealt with by this pull request.\n. This change has merged in our internal repo and will appear on GitHub on our next release. Thanks!\n. Just to clarify, monitors aren't coming into play at all in the scenario identified by this issue. If they were, the RootMonitor would kick in and exit the application.\nI think @roanta's proposal is strictly better than the current behavior. Without any further changes, @gianm's case would result in process death by the RootMonitor. It also allows FuturePool users to configure behavior on specific exception types by setting a custom Monitor.\n. @mosesn, I agree with the outcome of what you're proposing, but I guess I'm not understanding the implementation that you have in mind. Monitors operate in terms of Throwables, so any Promise-setting would have to take place outside of any Monitor.handle call.\nLet's take this follow-up work offline, or at least out of the context of #100. Patching ExecutorServiceFuturePool.apply to do something more intelligent than Try(f) seems like an easy win.\n. That's correct, @vkostyukov. I must've forgotten to close this ticket after merging the fix.\n. Nope, you're fine. @stevegury was driving the bus on this one and he's currently on vacation. I expect the change should make it into the next release.\n. LGTM. We use stripSuffix in Flag.scala, so unifying these will be good. \n. LGTM. Thanks, Travis.\n. Let's name this test \"Event.register: no races between registered witnesses\".\n. ",
    "bdd": "Abandoning this one.\nFound another scaladoc typo. Will amend the commit and send the pull request again.\n. Merged.\n. My bad.\nde8e575 wasn't merged. It fixes Guava deprecation warnings, saves the whales, increases the rainbow colored unicorn population and solves Greece's debt problem.\n. ",
    "imxiaobo": "recent release of Guava 11.0.1 breaks MapMaker & SetMaker totally. the cache behavior has been moved to CacheBuilder, expiration* methods are scheduled to be removed in the near future. And EvictionListener has been removed.\n. ",
    "alaz": "\nit works when deployed w/o version\nboth scala-library and scala-compiler are in the WAR: https://github.com/alaz/tweval/blob/master/pom.xml#L39\n. Tomcat 7 supports what they call \"parallel deployments\", when the same application is deployed under different versions and Tomcat routes requests to the latest one, while old sessions are processed by previous. Tomcat shows strange file name ROOT##01.war in the log fragment I cited above, this ##01 means version 01. More on Tomcat website\n\nI doubt there is any difference on how Tomcat works with the app.\n. This does seem to be a Tomcat issue.\n. ",
    "vkostyukov": "I believe this is no longer actual.\n. Hi @mkonicek! Hope you're doing great: it's been three years since you filed this issue.\nAnyways, I decided to let you know that we've deprecated Eval and not planning to improve it. Sorry for such a long delay.\n. Time.nanonTimeOffset is deprecated since 5.4.0. Closing this.\n. Just double-checked it: not reproducible on 6.26.0. We can close it.\n. There is already util-cache project. Although, it might be a good idea to move Finagle's cache there.\n. We had an internal discussion and decided to not publish the Finagle's cache in utils but keep it private.\n. I guess, this can be closed now.\n. @cacoco is it still a problem for you? Perhaps we can close this already. I'm not sure we are ever going to improve/bug-fix util-eval since it's nearly deprecated.\n. Hi @btd! Thanks for submitting the issue!\nAs @stevegury mentioned, we're in the middle of deprecating (removing) util-eval so we're not going to improve it anyways. Thus, I think it's reasonble to close this issue. \nPS: Feel free to open a PR with the fix: we're happy to accept it.\n. Hi @MasseGuillaume! Sorry for the long response.\nAs for today, com.twitter.util.Eval is deprecated and we're not planning to enhance it.\n. This has been fixed internally (and will show up here soon). Thanks @ngocdaothanh!\n. @mosesn do you think we can close this?\n. I belive this should be closed since it's fixed in #90.\n. It's 3.4.6 already, which is the current stable version. I think this might be closed.\n. I believe it was fixed in https://github.com/twitter/util/commit/01bf9d03aa0fac6907a85fd66c3050a04e2f3c55. Perhaps the test case from the first comment works now. Should we close it?\n. Thanks @evnm!\n. Can we closed it based on this commit?\n. Hey @evanj! Sorry for the long delay. Are you stil interested in submitting a PR?\n. Looks good to me! @iceberg901 do you mind to squash the commits of this PR into one? You can use git rebase -i and then git --force push origin your-branch.\n. @mosesn cool! Nevermind then.\n. Yeah. The JavaConversions.asJavaList issue is fixed internally it should be here soon.\n. LGTM :+1: \n. This has been fixed by 32f16db.\n. This has been fixed internally. It will show up on Github soon. Thanks @hgfischer for reporting!\n. Hi @hgfischer! Sorry for the delay. Do you mind submitting a PR?\n. All of this seem reasonable for me. Just one concern. As far as I know, you don't really need doing anything magical to make your interface a functional interface in Java 8. @eirslett why flatMap for example, would not accept lambda function in Java 8 w/o any modifications? Is it because c.t.u.Function also bas methods compose and andThen?\n. @zacharyvoase could you please run ./sbt +test to make sure we don't break Scala 2.10 build? Seems that there is one test failed: https://travis-ci.org/twitter/util/jobs/47861916#L1204, which is probably not related to this PR. Anyway, you should be able to check locally if everything works with ./sbt +test.\n. Is this failure reproducible if you run the tests one more time. Although, Travis CI says it's green.\n. LGTM rather then tiny nitpicking about names.\n. LGTM :+1: after @zacharyvoase's explanation about names.\n. @mosesn, I think @fommil means that while it's still possible to use SLF4J in the user application it's not possible to configure Finagle servers/clients, TwitterServer & Co to use SLF4J. So, users end up having two different messages in the log (different logs?): one group of messages is from user code (from SLF4J) while another group of messages is from Finagle internals (from util-logging).\n@fommil did I get you correctly?\n. Looks good to me! Thanks @mikepii for fixing this. Let me get some more eyes on it.\n. I believe you can use Future.collectToTry for that.\nProbably, finaglers is a better place to ask that sort of questions so other folks can easily find it.\nUpd: Oops. Looks like I'm late to the party :)\n. This is cool @benjumanji!\nDo you mind adding a Java compilation test for a new function to both DurationCompilationTestand TimeCompilationTest (see util-core/src/test/java). It looks to me that it won't accessible from Java, but you could easily workaround it like shown here.\n. Thanks @benjumanji! This looks very good.\n. I'm pulling this for the internal review. Will post the update here once it gets merged internally.\n. This has been merged internally. It will show up on the develop branch early next week. Thanks @benjumanji!\n. I'm pulliing this for the internal review. I will close this PR once it's merged internally.\n. This has been merged internally. Thanks @matthewmichihara!\n. Let me pull this internally. I will close this PR once it's merged. Thanks @stremlenye!\n. Just merged it. Thanks!\n. It looks great! :+1: \n. @SethTisue @mosesn I'll look into that. Let me try to reproduce that locally first.\n. Thanks @ystein! Nice catch!. @adleong You can call DefaultTimer.toString in scala repl to figure out which one was loaded.. I think we should've never scheduled a timer task in case of Duration.Top in the first place (that would be a good fix).\nAs far as the explanation goes, it's as easy as long overflow that happens here in the N4 timer. Basically, unit.toNanos(delay) is Long.MaxValue. Java timer seems to not have this problem.. @adleong Any chance you want to contribute a fix (like checking if howLong == Duration.Top and returning Future.never)?. I agree with Kevin. Maybe make two separate commits:\n\nOptimization for Future.sleep\nFixes for Netty4Timer\n\n@adleong Let us know which one (or maybe both?) do you want to work on.. Fixed in #201.. Thanks @devshorts!\nI downloaded the util-stats-7.0.0 package for 2.12 and checked it against javap. Indeed there is a static addGauge$ method there: https://gist.github.com/vkostyukov/1ac96e29684c7345bd16d2db59c1d732\nI honestly have no idea why\n1) scalac generated that static forwarder\n2) javac isn't happy about it\nWill keep digging.. FWIW, I can reproduce it on my end (by pulling in that zipkin-finagle PR).\nTo be frank, this \"class file contains malformed variable arity method\" is quite a surprise to me - I've never seen anything like that before so the rest of the internet (try googling it). I wonder if it's somehow only specific to zipkin-finagle. We should try creating an empty Java (maven) project from scratch that referencing StatsReceiver. @devshorts Any chance you want to try that out?. I'm getting somewhere. These $-prefixed methods are coming from Scala 2.12. Here is the relevant piece of SR compiled against 2.11.11:\n```java\n  public abstract com.twitter.finagle.stats.Gauge addGauge(java.lang.String..., scala.Function0);\n  public abstract com.twitter.finagle.stats.Gauge addGauge(com.twitter.finagle.stats.Verbosity, java.lang.String..., scala.Function0);\n  public abstract com.twitter.finagle.stats.Gauge addGauge(scala.collection.Seq, scala.Function0);\n  public abstract com.twitter.finagle.stats.Gauge addGauge(com.twitter.finagle.stats.Verbosity, scala.collection.Seq, scala.Function0);\n  ````\nHere is the same, but for Scala 2.12.1:\n```java\n  public static com.twitter.finagle.stats.Gauge addGauge$(com.twitter.finagle.stats.StatsReceiver, java.lang.String..., scala.Function0);\n  public com.twitter.finagle.stats.Gauge addGauge(java.lang.String..., scala.Function0);\n  public static com.twitter.finagle.stats.Gauge addGauge$(com.twitter.finagle.stats.StatsReceiver, com.twitter.finagle.stats.Verbosity, java.lang.String..., scala.Function0);\n  public com.twitter.finagle.stats.Gauge addGauge(com.twitter.finagle.stats.Verbosity, java.lang.String..., scala.Function0);\npublic static com.twitter.finagle.stats.Gauge addGauge$(com.twitter.finagle.stats.StatsReceiver, scala.collection.Seq, scala.Function0);\n  public com.twitter.finagle.stats.Gauge addGauge(scala.collection.Seq, scala.Function0);\n  public abstract com.twitter.finagle.stats.Gauge addGauge(com.twitter.finagle.stats.Verbosity, scala.collection.Seq, scala.Function0);\n```\n@kevinoliver pointed out that this could be related to 58c1d00679d23d6210be3f71e20739192545552b so var-arg isn't in the final position now. yet we have a Java compilation test that compiles perfectly with both 2.11 and 2.12.. We hope this should be fixed by 7e5024bd42327e6acae7954ac9b212b5ed51610d. We're cutting a new Finagle/Util release quite soon so you can upgrade directly to 7.1.\nThanks @devshorts for filing an issue!. Thanks, @adleong! I'm pulling this internally.. Merged in e774ab6082b01cb1ed6f25e409f4ae5c85f89b76. Thanks @adleong!. Why is called capturing rather then capture? The same question is about capturingOne.\n. Thanks for the explanation! Sounds reasonable to me.\n. Can we extend In => Future[Out] instead?\n. How about Embed? I don't have a good theory why it should be Embed, but it sounds kinda good here.\n. I'm somewhat skeptical this actually improves readability. Perhaps others might find it more readable.. ",
    "travisbrown": "The 1.8.6-SNAPSHOT docs were the last version before Unidoc, and for the sake of search engines they're still available. I noticed last summer that they were showing up in search results and added redirects and canonical links to the new docs, which should allow us to remove the old ones at some point.\nThanks for catching this issue, @vkostyukov\u2014I didn't notice it at the time, and agree that it should be closed.\n. Now on GitHub\u2014thanks!\n. This is now on GitHub\u2014thanks, @kimballa!\n. ScalaObject is now replaced in the develop branch, and we'll be publishing util-eval for 2.11 soon.\n. @koertkuipers Yep, see this commit in develop.\n. Thanks, Evan! Since this is kind of an odd case (these are changes to the gh-pages branch that aren't automatically generated from something in master) I'll let @mariusaeriksen or @stevegury decide whether they want to hit the merge button or merge some other way.\n. The script just rsyncs the current docs to the docs directory, so we should be safe.\n. Oh wait, just noticed that I've got an extra slash on the end of the canonical URLs, which still works but isn't very clean. Fixing now.\n. (Actually the tests still fail on 2.11 at the moment because of the use of JavaConversions.asJavaList, but that'll be fixed by the time this is merged.)\n. @mosesn Sure\u2014I've got it running now in another branch and will add it here if it passes (at least for 2.10).\n. In develop.\n. This is now available in the develop branch.\n. @mosesn just pointed out that this was fixed internally yesterday.\n. Oh, thanks @stevegury\u2014I did a pull this morning and didn't see a relevant RB, so I didn't notice your fix. Closing now.\n. Thanks, @kpfell. This is precisely the fix we're using in the develop branch, and it'll be available when we publish a 6.24.0 release.\nWhen we began publishing the develop branch on a weekly basis we decided to keep master the default on GitHub since it tracks releases, but given that releases can be very far apart I'm starting to reconsider this decision. In any case thanks for the fix, and sorry it wasn't clearer that it had already been implemented.\n. These issues have been affecting our open source builds as well, and the internal team responsible for the maven.twttr.com repository is investigating the problem. They're hoping to have a fix soon, but in the meantime there are a couple of fairly reasonable workarounds. One is to add a line like this to your Travis config:\nyaml\nbefore_script: travis_retry sbt ++$TRAVIS_SCALA_VERSION update\nThis will turn on (three) retries for resolution and downloading only. This seems to be enough to get around the intermittent errors in many cases, and since only the update task is retried, it won't really slow down builds that fail for other reasons.\nYou can also cache artifacts across builds like this:\nyaml\ncache:\n  directories:\n    - $HOME/.ivy2/cache\nIn the longer term, these failures are yet another motivation for us finally to get rid of this repository and publish these artifacts to Maven Central. I don't have any kind of definite timeline for this, but I'll update this issue as we know more.\n. The issue with maven.twttr.com has been resolved (at least we have a fix that seems to work on all the cases I've tried or heard of), so you shouldn't need the workarounds any longer. Please reopen if you continue to see failures.\n. @vkostyukov We should probably add a note about Java compilation tests to our contributing guides.\n. Recent versions of util are published to Maven Central, not maven.twttr.com.\nOnly a handful of Twitter's open source JVM libraries (e.g. Metrics) are now being published to maven.twttr.com, and it still exists only for a couple of fairly arcane reasons\u2014we're actively trying to kill it.\nSorry about the confusion!\n. @bbarker Yes, you'll need maven.twttr.com in your resolvers for that version of libthrift (as well as Metrics, if you're using that). We're taking steps toward updating libthrift internally, but don't have a definite timeline yet.\n. Looks good to me, thanks for noticing this!\n. :+1:, but only after @fwbrasil has migrated the entire internal codebase / build to TLC. :smile:\n. ",
    "jvirtanen": "@robey: Yes, you are right about the ABI.\nFurther investigation shows that the problem is not actually caused by the unsynchronized maps but rather by the cyclic reference in the Level class constructor and the Logger object constructor. I'll push a new patch that fixes this but still keeps Level.OFF etc. as objects.\n. ",
    "dhelder": "Could you wrap the ScribeHandler in a QueueingHandler?\n. ",
    "arbfranklin": "Sorry for the confusion in the above commit log, result of a bad rebase. Commit 28bbb6d contains the unit test, and 11391d8 a proposed fix.\n. ",
    "redspade": "Duplicate with #27\n. ",
    "mkonicek": "Good to know @vkostyukov :)\n. ",
    "EugenCepoi": "Is there any recommended replacement for Eval? More precisely if one wants to compile src code to an output file?. Hehe indeed though that's something I'd rather avoid :) So when the library got deprecated it wasn't in favor of a better alternative? It seems that I could directly use scala.tools.nsc.Global to achieve what I want, but in the end that's what util-eval was doing.. ",
    "kevinoliver": "@EugenCepoi there must be better suggestions than this, but you could fork util-eval from before we removed it and then use that.. Right. It was being primarily used for configuration at Twitter and we felt there were ample other means to do configuration without compiling Scala.. lgtm too, thanks for your patience working with us. i'll try to get this patch rolling internally today.\n. Ok, this just got merged locally and will show up on the develop branch soon, once we get some issues on our side sorted out. Thanks again for the patch and your patience.\n. Thanks for the report. \nWe are reviewing a commit that would fix the leak.\n. Sorry for the late update. A fix for this has been applied locally and should show up on the develop branch in the near future.\n. Sorry about that, it is pretty out of date.\nWe have been discussing a major rework of the util docs and site. Hopefully you'll see that over the next few months. \n. Closing this as there hasn't been any interest. Should anyone get excited about it in the future, we can reopen it.\n. we are doing a bunch of work to improve streaming in Finagle / Finatra. this may include reactive streams converters in Finatra.\nhowever, we don't have plans for this in util.. this looks great, thanks.\nmind just polishing up the commit message a bit and fixing that one nitpick and then i'll merge this in.\n. pulling this in locally, thanks!\n. @suls cool, just got merged this merged in locally. Should show up on the develop branch this Monday. Thanks again.\n. thanks! pulling this in locally.\n. This just got merged in locally and should appear on develop this Monday. Thanks again.\n. really nice improvements.\n. Might depend on what the user wants, hard for me to say. I think making this a policy seems reasonable though if you are interested in a PR.\n. thanks @jacksonic, good catch. will merge this in.\n. This got merged in locally and it should appear on the develop branch this coming Monday. Thanks for the patch.\n. Not answering your question directly and I don't know how good a job we've done of communicating this, but we are trying to EOL util-eval.\n. No plans for a replacement.\n. nice, thank you.\n. good catch @luciferous, thanks!\n. yeah, thanks. its impressive this test has been even this reliable.\n. @olix0r thanks again, this is merged in locally.\n. @luciferous, i <3 better toStrings! have one little request though to help me sleep better.\n. \ud83d\udc4d \n. i'm +1 for this change as well.\n. Ok. Yeah not too Java friendly :(\nUnfortunately, the code has some pretty deep-set leanings about GlobalFlag classnames and such so there is only so much we can do.\nI've got a branch up for review that, if you follow a few rules, lets you create first class GlobalFlags in Java. Here's an example:\n```\npublic final class javaGlobalWithDefault$ extends JavaGlobalFlag {\n  private javaGlobalWithDefault$() {\n    super(\"default value\", \"help string here\", Flaggable.ofString());\n  }\npublic static final Flag Flag = new javaGlobalWithDefault$();\npublic static Flag<?> globalFlagInstance() {\n    return Flag;\n  }\n}\n```\nand another without a default:\n```\npublic final class javaGlobalNoDefault$ extends JavaGlobalFlag {\n  private javaGlobalNoDefault$() {\n    super(\"help string here\", Flaggable.ofJavaInteger(), Integer.class);\n  }\npublic static final Flag Flag = new javaGlobalNoDefault$();\npublic static Flag<?> globalFlagInstance() {\n    return Flag;\n  }\n}\n```\nUsage of the flag isn't too bad:\nassertEquals(\"default value\", javaGlobalWithDefault$.Flag.apply());\nassertTrue(javaGlobalNoDefault$.Flag.get().isEmpty());\nHopefully the patch will make it out to develop this coming week.\n. Merged in df5c310ebfe356b407c13cc7b7b04e4cd53cdced\n. Ok the FuturePoolTest fix went in with https://github.com/twitter/util/commit/4a939764c58784aeddc14878cb287ba1343bfa1d so we should be good here. Thanks @SethTisue.\n. Thanks @SethTisue. I'll see about getting those patches incorporated.\n. Ok so https://github.com/adriaanm/util/commit/17625f46400dcc3b777168e47b8244f932372794 got sorted out in https://github.com/twitter/util/commit/90f218014dfbd85bf3d7b91246dee98cfda01161\nAnd a patch for https://github.com/adriaanm/util/commit/2bb041a2a3bf9086066d52df3ee954c45c7c2d8b is on its way.\nThanks again for the heads up.\n. Cool. The fix for https://github.com/adriaanm/util/commit/2bb041a2a3bf9086066d52df3ee954c45c7c2d8b just got merged internally and will get pushed to the develop branch this Monday. Thanks again.\n. thanks!\n@mosesn, looks like we should move to 2.12.0-RC1\n. @jcrossley and others have been working on this and it looks like it should be ready real soon now.\n. ok i can reproduce this locally. added this to Build.scala:\nresolvers += \"nightlies\" at\n    \"https://scala-ci.typesafe.com/artifactory/scala-release-temp/\"\n  scalaVersion := \"2.12.1-371bc2c-nightly\"\n  scalaBinaryVersion := \"2.12\"  // or \"2.11\"\nAnd then run: \n$ ./sbt ++2.12.0 util-core/test\n<snip>\n[error] Failed: Total 1065, Failed 1, Errors 0, Passed 1064\n[error] Failed tests:\n[error]     com.twitter.util.ConfigTest\n[error] (util-core/test:test) sbt.TestsFailedException: Tests unsuccessful. @SethTisue i merged a workaround and hopefully that fixes it. \ni didn't spend long digging into the difference in the generated code between 2.11, as this Config.missingValues code is deprecated and not well maintained. hoping we can remove it in the not too distant future.. nice find. looks good to me after applying the formatting changes from @mosesn \n. Thanks @zkidkid I'll get this merged in.\n. Ok this got merged internally and should show up on the develop branch in the next push. Thanks again for the patch, @zkidkid. \n. Merged in b06cef2c02a78268f13e46d001b40bce61d7f042\n. @SethTisue I see a bug in that test that would cause it to be flaky. \nI'll get it patched.\nThanks for the report!\n. Alright, this got fixed internally and will land in this coming Monday's code push. Thanks again @SethTisue.\n. yep, same thoughts from me.. I'm going to merge this and fix the commit message on the way in.. fixed in c789b5bbedfd6428ee381395fe113bb780d24162. i'm merging this in. fwiw, i'm dropping the util-eval change as have stopped support for it.. merged this in cc81f70edac2274a34d56aefc5c6ffef0f0df3cb\nthanks again.. interesting find, thanks @mejran and @adleong.\nshouldn't the first value printed by foreach be the initial value passed into scanLeft. scanLeft is documented as:\n* The resulting stream always begins with the initial value `z`,\n   * not subject to the fate of the underlying future, i.e.:\n   *\n   * {{{\n   * val never = AsyncStream.fromFuture(Future.never)\n   * never.scanLeft(z)(f) == z +:: never // logical equality\n   * }}}\ngiven that, i think @mejran's proposed solution looks correct. . @mejran a PR would be great. thanks!. This got fixed by https://github.com/twitter/util/pull/197 \nThanks again for the patch.. thanks for the report. it also failed in travis ci and our internal ci. apologies for the break.. Yeah, that sure looks like a bug.\nWhat Timer are you passing into Future.sleep?. DefaultTimer is service loaded. Do you have finagle-netty4 on your classpath?. hmm i am unable to reproduce this. added this test case in finagle-netty4 and it passes.\n```\n  test(\"Future.sleep(Duration.Top)\") {\n    val timer = new Netty4Timer(new HashedWheelTimer())\n    val f = Future.sleep(Duration.Top)(timer)\n    assert(!f.isDefined)\n    Thread.sleep(5000)\n    assert(!f.isDefined)\ntimer.stop()\n\n}\n```\ndid a brief examination of the code and it looked ok to me.. interesting. i see the issue \u2014 it can overflow a long inside of Netty's HashedWheelTimer.\nhttps://github.com/netty/netty/blob/4.1/common/src/main/java/io/netty/util/HashedWheelTimer.java#L421\nand it i didn't reproduce because it depends on when the timer's first task was run (startTime).. i think checking in Future.sleep is more like an optimization rather than a fix.\nthe fix feels to me like it belongs in Netty4Timer as it is specific to that implementation.. > After thinking about this some more, I think it really needs to be fixed in HashedWheelTimer, not in Netty4Timer. The allowable range of times that can be scheduled without overflow depends on the timer's startTime which is internal to HashedWheelTimer.\ni suspect we could do a good job of mitigating it, but that makes sense.\nand if you file something with netty, do let us know.. This doesn't look right to me. util already has these in the right location: https://github.com/twitter/util/tree/develop/.github. i get what you are going after.\ni have an idea that would be a far smaller change, but may still get you what you want.\nsomething like this. you'd add this to App:\nprotected def parseFlags(): Unit = {\n    // the current code...\n    flag.parseArgs(args, allowUndefinedFlags) match {\n      case Flags.Ok(remainder) =>\n        _args = remainder.toArray\n      case Flags.Help(usage) =>\n        throw FlagUsageError(usage)\n      case Flags.Error(reason) =>\n        throw FlagParseException(reason)\n    }  \n}\nand call it from nonExitingMain.\nthen your App implementation can do whatever it likes in terms of command line parsing (or none as it may be).. Ooof. I don't think we'd want to take a dependency on protobuf for this functionality. Perhaps that dependency could be added in a separate module that you'd have to opt into.\nI'm open to other ideas on getting this addressed.\nWe haven't probably haven't noticed this because internally at Twitter we've been using a combination of perf and Async Profiler.. Using the generated code seems like it's worth a look. Depends on what it's dependencies look like.\nAs for using those tools \u2014 you don't need to have ssh access. You can add a TwitterServer admin page (just like /admin/pprof/profile that does the work for you. For example, our perf page does this and generates the flamegraph for you.. Thanks. This is partially why we suggest defining global flags outside of any object or package. That said, I think we should fix this and a PR would be great.. Thanks @adleong \u2014 interested in putting up a PR?. Yeah, sgtm.. Thanks for the fix. It's merged in https://github.com/twitter/util/commit/6f9cbcd28be3d0f08fe7c020d744034540eb343a. Thanks. I believe we don't officially support JDK 9+ yet. I think our next version will be JDK 11 which is an LTS release. We have not begun this effort.. Thanks again @teresy this got merged back in 9f01785ae335d84652473d9174063d47dd912c8e. Thanks @Bachmann1234 and apologies for the delay. Looks like this got addressed in the linked commit and then the 18.2 release. . interesting find, thanks!\nthis looks to be a limitation of the implicit classes using the same name. i this this is worth breaking the API to fix.. @dziemba I should get this patched today.. Landed it in 2d5d6da989ab83e8701b9f57ae0708a5851beb07\nThanks for the great report.. if there are guarantees regarding ordering and such, they should be documented. its not obvious from reading the diff why you synchronize on executor here.\nand if there are guarantees, what prevents others callers from using the executor incorrectly?\n. please omit \"clean, lightweight\" \u2014 I don't think they add any extra value here.\n. i think its more idiomatic as @vkostyukov wrote it.\n. thanks for the explanation, i'm new to BatchExecutor \u2014 that's a funky interface.\ni think a comment in your code as to why you synchronize there would be quite helpful for future maintainers.\n. mind keeping the ordering the same as the method's? in other words, just move formatter right before level.\n. want to add back the nicer Cons.toString from before?\noverride def toString = s\"Cons($fa, ?)\"\n. feel free to ignore, but the other methods are ordered Empty, FromFuture, Cons, Embed. the different order made it a touch harder to read. no big deal obviously.\n. nah, that makes sense to me. just ignore. \n. makes sense to me.\n. am i paranoid to want this to be ${next.toString}?\n. ok fair enough. i realize it was doing toString, it just makes me squeamish. not gonna hold this up though.\n. is this sugar necessary? i'd prefer pointing people at Try.fromScalaTry in the const scaladocs instead.\n. can you add minimalist scaladoc? \n/** Converts from a `scala.util.Try` */\n. (bikeshed, so feel free to drop)\nwhat do you think of shortening this to asScala since this going to be something called frequently? (ditto for fromScala)\n. i think we should handle the failed Future case, otherwise the System.exit won't get called. also, i think something like:\nAwait.result(close().unit, closeDeadline - Time.now). ",
    "alexanderdean": "Thank you @emchristiansen - lucky I spotted your issue, I was about to resort to Project-including this repo into my SBT definition, very less than ideal.\nI have submitted a pull request to clarify the README...\n. How many days does it take to show up?\n. Thanks @stevegury, makes sense.\n. Hi Marius, thanks for your response. Of course util is your codebase, you have to maintain it and want it to encourage good coding behaviours at Twitter, and so obviously I respect your decision if you think this hurts more than it helps.\nMy opinion is different - but no harm done, time to start a com.snowplowanalytics.utils :-)\nUpdate: Tap now added in here: https://github.com/snowplow/scala-util\n. Apologies - I made a typo, my import is already at \"6.3.4\". Any ideas?\n. Ah, brain freeze, of course. Pull request inbound. Thanks.\n. ",
    "stevegury": "Fixed thanks to @alexanderdean \n. Thanks!\nI pulled this internally, it should show up here soon.\n(Sorry for the delay)\n. Thanks!\nI pulled this internally, it should show up here soon.\n. It's a manual operation for us (not done yet)\n. TLDR; use sbt-package-dist 1.0.7\nFirst, we no longer use sbt internally, so don't expect very up to date code.\nsbt plugins are built for a specific version of sbt.\nIn your case you are trying to use sbt-package-dist 1.0.5 with sbt 0.11.3, the latest version of sbt-package-dist built for sbt 0.11.2 is 1.0.6, and the latest version built for sbt 0.11.3 is 1.0.7\nThe easiest way to debug that is to open your browser at http://maven.twttr.com/com/twitter/ and see what's available\n. It has been merged and published, closing the ticket.\n. This is now in master, closing\n. Unfortunately it breaks the 2.9.2 build (that we are still using).\n. I pulled this internally, it will show up on Github soon.\nThank you for the contribution.\n. This is now in master, closing\n. This is now in master, closing\n. It's now in master, closing\n. It's now in master, closing.\n. I pulled this internally, it will show up here soon.\nThank you for your contribution.\n. Sorry for the delay, I missed this pull request last week.\nI pulled your code internally, it will show up here soon.\nRegarding the docs, we will update everything in a \u2248few weeks.\n. Just FYI, we are deprecating util-eval internally.\nI don't have any recommendation about how to solve this problem, but we accept pull request.\n. Thanks @sslavic for your patch.\nWe have internal project using guava 15 and transitively depending on util. We need to test them with the new guava release before accepting your change (this will take a few weeks).\nWe'll merge your patch as soon as other projects are ok with guava 16. In the meantime, you could force guava version in your pom/sbt project definition.\n. Hey @sslavic, sorry for the confusion.\nWe'll have to test this version internally (again) before upgrading, in the meantime feel free to exclude/include  our guava dependency from your project.\n. See https://github.com/twitter/util/pull/87\n. Right, it could be useful.\nInternally, we don't use util-eval anymore so we don't have too much time to work on it.\nBut if you propose a patch we would gladly review/accept it.\n. It looks good to me, could you add a test as well?\n. ./sbt \";project util-eval; test\" worked on my machine.\nDon't touch pom.xml, they are artefact from internal alternative build system.\n. LGTM\n. @MansurAshraf could you paste here the full output of jstack on a deadlocked process.\nI suspect that you're (indirectly) blocking one of the finagle thread.\n. What about introducing a method in Closable?\ndef shutdown() { collectorThread.interrupt() }\nDo you want to create a pull request where we can discuss about that?\n(We love having new contributors)\n. Ok, I was thinking you just wanted to shutdown your application.\n. LGTM\n. No need for that.\nI'm pulling this commit internally, I'll take care of that.\n. Overdue update: This has been merged internally, it will show up here soon.\nThanks @sirmax for your great contributions!\nPlease continue ;-)\n. LGTM\n. LGTM\n. Pulled internally.\n. Thank you for the fix, I'm pulling this internally. It will show up here on Github soon.\n. @travisbrown It's already fixed internally.\n. LGTM, I'm pulling this internally.\n. Thanks Eirik for doing this!\n. LGTM, I will pull this internally (when it compiles)\n. LGTM\n. Java conventions are usually pretty verbose compared to Scala, so I would agree with Moses here.\n. We will run some test internally to see if it breaks anything.\nIf it doesn't, I think it's fine to take the binary incompatible change, just update the CHANGES file and explain the change.\nThis class is not widely used enough to require to wait for a major release (we decided not to strictly following semantic versioning).\n. ",
    "sritchie": "Submitted internally to birdcage.\n. Awesome, you're the man.\n. Maybe silly, but I would move the duplicate PRIMEs out to PRIME_INT and PRIME_LONG and reuse them vs copy.\n. sorry, just meant the particular two primes that are written out twice should be bound to vals to prevent the dup. This is a \"magic string!\" comment :8ball: \nscala\nval DEFAULT_PRIME_INT: Int = 16777619\nthen inside,\nscala\nval PRIME: Int = DEFAULT_PRIME_INT\n. ",
    "jonshea": "Awesome. Thanks.\n. ",
    "devth": "I see. Thanks.\n. Thanks!\n. ",
    "Vadi": "Don't take me wrong, what you guys use internally if SBT is not being used. Just a curiosity!\n. Great. Thanks!\n. ",
    "sprsquish": "Internally this is part of a larger repo that uses maven (hence the pom.xml files with missing parents).\n. Thanks! Pulled internally. The changes will show up here soon.\n. merged internally. should show up here soon\n. The latest version of util is 6.3.4 and is being dual published to be 2.9 and 2.10 compatible. We're also publishing to maven central now: http://search.maven.org/#search%7Cga%7C1%7Ccom.twitter.util\nval collUtils   = \"com.twitter\"          %%  \"util-collection\"     % \"6.3.4\"\nUpdating your import to that should fix the issue.\n. Note the double percent (%%) between the group and artifactId. That'll ensure you get the right package for your scala version\n. Check out select or collectToTry\n. FYI, jdk7 provides a method on ScheduledThreadPoolExecutor, setRemoveOnCancelPolicy(boolean), that properly handles cancellation. \n. ",
    "luciferous": "Makes sense to me. Want to submit a PR? If we move fast enough we can get it into the next release.\n. Ok, trying to understand this better. Why throw when a Future.exception(exc) can be returned instead?\n. Why not use flatMap in instances when you might want to throw instead of map. And, for handle why not use transform?\n. That's a good point. It just seems against the \"style\" to throw exceptions in these closures, even though they do get converted to Futures.\n. @electricmonk can you reproduce this with the latest release?\n. @pequalsnp https://github.com/scala/scala/blob/2.11.x/src/reflect/scala/reflect/internal/StdNames.scala#L1099\n. Closed by 016206c.\n. Checking in again \u2013 anything we can do to help out?\n. @rightfold how's this going?\n. This seems reasonable to me. Let's say we have never, an AsyncStream which never produces (i.e. fromFuture(Future.never)), we want never.scanLeft(a)(f) = a +:: never.\nWhat do you think of using this test instead?:\nval as = fromFuture(Future.never).scanLeft(a)((_, _) => ???)\nAwait.result(as.head) == a\nCan we update the scaladoc with the equality stated above. Feel free to reword.\n. LGTM\n. We closed #138. Looks like this was a duplicate.\n. +1 to that. Though beneficial for Finagle, interop with reactive streams may be low priority for us.\n. @schrepfler \n\nWhat would a proposed approach be?\n\nI imagine scalaz has something similar to map between Tasks (or some streaming derivative of) and Reactive Streams. Let's use that as a reference.\n\nA set of isomorphisms like the Twitter Future <-> Scala Future or would it be good to have some design principle/generalisation document first?\n\nThe semantics should follow \"ListT done right\", only that our implementation uses a free monad with the monad specialized to Twitter's Future.\n. This might be useful. I want to hear what others think about it. Note: we can implement this quite simply with AsyncStream.\ndef sequence[A](fs: Seq[() => Future[A]]): AsyncStream[A] =\n  fs match {\n    case Nil => AsyncStream.empty\n    case head +: tail => AsycnStream.fromFuture(head()) ++ sequence(tail)\n  }\nIf you want a Future[Seq[A]], sequence(fs).toSeq() works. It's neater (imo) and we don't have to rely on the Seq's implementation of append (:+).\n. +1 to @mosesn's question.\n. @k4rthik I'm not sure I follow your example. If one operation fails, the operations that were successful up to that one won't roll back. I hope that's not what you were depending on.\n. @leftparen how are your calls represented? If they are Seq[Request], could this work?\nscala\ndef doPosts(reqs: Seq[Request]): Future[Unit] =\n  reqs match {\n    case Nil => Future.Done\n    case req +: more => client(req).unit.flatMap(doPosts(more))\n  }\n. I'm still unsure what's preventing you from modeling what you want with a Stream (as Seq[() => Future[T]] is effectively Stream[Future[T]]) and then use AsyncStream.fromSeq(stream).toSeq(), which will give you the properties you want:\n1. Sequential traversal.\n2. First error abandons traversal and returns it in Future.exception.\nUsing your rate limiting with Future.sleep example:\nscala\ndef doReq(req: Req): Future[Unit] = send(req) before Future.sleep(1.second)\nval reqs: Seq[Req]\nval actions: Stream[Future[Unit]] = reqs.toStream.map(doReq)\nAsyncStream.fromSeq(actions).toSeq() onFailure { cause =>\n  // uh-oh\n}\n. @Chandler You're absolutely right. The Future object is probably the first place people start looking for functions related to Futures, which happens to be why we keep putting things in there. (And you can see how the Future object grows because of this.)\nIt's slightly unfortunate that AsyncStream isn't one of the first places to look, because AsyncStream is actually more fundamental than Future. It's easy to see that AsyncStream's dependence on Future is really nothing more than a dependence on the monad interface. We only specialized it to Future for convenience.\nWhat do you think of these?\n```\ndef sequenceA: Future[Seq[A]] =\n  AsyncStream.fromSeq(as).toSeq()\ndef traverseSequentiallyA,B(f: A => Future[B]): Future[Seq[B]] =\n  AsyncStream.fromSeq(as).mapF(f).toSeq()\n```\n. Note: the use of foldLeft will left associate the future flatMaps which incurs ~100b (iirc) per flatMap more than if right associated.\nSeq(a, b, ...).foldLeft(Future.Nil)(f)\n= f(f(Future.Nil, a), b)\n= Future.Nil.flatMap(...a...).flatMap(...b...)\nRight associated flatMaps, e.g.:\nFuture.Nil.flatMap(...a...flatMap(...b...))\navoid the ~100b overhead. If this is important have a look at AsyncStream's observe.\n. Good work :) OK.\n. I dare anyone to come up with a name better than M.\n. \n. Closed by 6629326ef39becb068347e495925d16fb25c69f1.\n. @kevinoliver relied too much on function generation magic :sweat_smile: \n. Closed by https://github.com/twitter/util/commit/975c9821104e89e6d77c2da36057567451719a99.\n. Is data ever not ZNode.Data?\n. Ok I like this. M for embed.\n. You mean like M(fa.map { a => if (p(a)) this else empty })? Oh I see, it could help differentiate the M parens and the map closure...\n. So if we look at the type signature Future[AsyncStream[A]] => AsyncStream[A], it's really a lift (Future[A] => AsyncStream[A]) and then a flatten (AsyncStream[AsyncStream[A]] => AsyncStream[A]).\nThis doesn't mean I'm suggesting we call this flatLift.\n. I wanted to make sure the tests covered all the constructors.\n. I overrode it initially because the tail argument was call by name, which toString would have forced, evaluating it prematurely. Now that it's a function, toString won't force it. We could change it back to preserve the '?' but it might be confusing given that argument is now a function.\n. Ah, I put embed first because that's the only time we don't want to prefix with z. What do you think if I added a comment about that and left it in that first position? Open to other formatting ideas too.\n. Done. Github isn't collapsing this part somehow, maybe because the diff didn't change where you marked it.\n. :+1: works for me\n. cool. also please don't hesitate to change it in internal review.\n$next isn't so useful here -- it's always going to be \"<function0>\". something much more useful is if we made a Lazy[A] type. i had a ticket for that idea, you might be able to dig it up. for the Lazy[A] type, toString would return\"<function0>\" if not yet evaluated, otherwise it would show the evaluated A.\n. ",
    "alexeyr": "OK, Two considerations:\n1. Can FutureEventListener throw exceptions as well?\n2. Is there other \"Java-friendly API\" in addition to FutureTransformer and FutureEventListener?\n. It can't be returned from map or handle.\n. > Why not use flatMap in instances when you might want to throw instead of map.\nYes, that's an option.\n\nAnd, for handle why not use transform?\n\nBetter would be to override rescue, actually.\nYes, it's probably unnecessary. Though it might be useful to document in ScalaDoc.\n. ",
    "mosesn": "@alexeyr I agree that it makes sense to add a note in the scaladoc.  I'll add it internally and close this issue once I've done it.\n. This was fixed here: https://github.com/twitter/util/commit/731175c269b52dd1e1238906c47ca05eaaed7306.  Thanks @alexeyr!\n. @sritchie we eventually ended up doing this internally, but yeah, this is hard without moving to a newer version of thrift.  Not sure we have the bandwidth to do it now, but we'll look into it.  util doesn't have anything to do with thrift though (I think), so I'm closing this ticket for now.\n. Oops, we missed this one.  I thought we removed memo before moving Var from the exp package.  Good catch!  Unfortunately, there isn't anything we can do at this point.  I think introducing a new deprecated memo at this point will just be confusing.  I'm going to close this ticket for now.\n. Which JVMs don't support this?\n. Hi @devth, sorry your issue fell through the cracks.\nWe haven't published the scaladocs recently, but you can do it locally pretty easily.  util-zk's scaladocs are pretty complete.  I'm going to close this issue for now, please let us know if you have any more questions.\n. It turned out to be really easy to update the docs, so I did it.  New docs are here.  They include the util-zk docs.\n. @thefourtheye unfortunately, we haven't had a chance to work on docs for util-zk.  However, a great way to contribute back to the community is to improve docs where you see that they could use some improvement!\n. I'd say either ReST or Markdown would both be great, whichever you prefer.  Let us know if you need any help from us :+1: \n. Hmm, what do you think is the right solution?  A flattened stack trace is going to be pretty ugly anyway.\n. 1) Just dropping the prefix will make it hard to automate reconstituting the log.  Maybe we can replace the interstitial timestamps with ||| or something a little easier on the eyes so that it's also easy to reconstitute.\n2) I thought syslog had a uniform interface--can syslog ever handle multiline events? (I'm not very familiar with it)\n. Ok, I don't think I understand.  It seems like the problems are:\nA.  Joined format is not human readable\nB.  There should be a human-readable option that is separate from joined format (because joined format should only be used for parsing by machines)\nA and B seem to contradict each other.  Is the problem that the joined format is difficult for humans to read, but it still needs to done occasionally, and in that case the joined format should be pretty?  Sorry for being thick--still wrapping my head around exactly what the use case is.\n. Ok, each of these seems fine, I think you're right that they are orthogonal.  Happy to accept patches on either of them.  Let me know if you want some guidance.\n. @plainlystated I don't think we have made progress on either of these in over two years (!) so my guess is that this is no longer a problem for you.  I'm going to close this for now, but if someone has other feels about SyslogFormatter, please feel free to reopen!\n. Good idea.  Can you make an RB?  I'd be happy with either solution, I think we could also get a small win by saving off fs.size into a val (unless we end up with a data structure that can grab size in constant time).  The right thing is probably to have a method that works for TraversableOnce and have Future.collect call into the method for TraversableOnces, but I doubt you have the bandwidth to handle that.\n. Yep, good catch.\n. They're being replaced by joint api docs.\n. yep!\n. This change has been made.  Thanks for the contribution!\n. Sorry, github doesn't notify me when you update a branch.  Looking now.\n. LGTM\n. Sorry, I dropped the ball on this one.  I'll get it rolling again.\n. Not at all, thanks for the reminder!\n. @metasim sorry this fell through the cracks.  I just merged it in internally, and it should appear on develop in the next couple of weeks.  Normally it would be weekly, but we have a problem in our system for pushing to github right now.\n. This is finally in develop, sorry for the long, long delay.  https://github.com/twitter/util/commit/963de9f46f1f76502bc3bd79398854003aff085e\n. I'm going to merge this through the internal review system.\n. Very cool!  We don't currently have plans to support async.  Although it's something that would be great to have, we're currently still bound to scala 2.9.2, which doesn't even have scala Futures, much less macros.  Our bijections library also has a utility for converting between the two varieties of Futures (since they were able to upgrade to 2.9.3, which at least has scala Futures).\nIn the future, twitter Futures will extend scala Futures.  twitter Futures are a little more flexible than scala Futures, so if we do end up supporting async, it will probably be with twitter Futures as first class.\n. Awesome, thanks so much!  Let us know if there's anything we can do to help.\n. @folone We're going to drop util-eval support in 2.10, so don't worry about it.  You can just kill cross-compilation for it if you want.\nWhat are you looking for in the MockitoSugar that you can't find?\nWe unfortunately can't merge it in while it's still ignoring all of the failing tests.  Do you know why the tests are failing?  Is it because of the difference in semantics between scalatest and specs?  Typically I found that tests that looked like:\nscala\n\"Class\" should {\n  { setup }\n  \"bleh alskdjflsj\" in {\n    { test code }\n  }\n}\ncould be rewritten to\nscala\nclass ClassHelper {\n  { setup }\n}\n\"Class\" should {\n  \"bleh alskdjflksdj\" in {\n    val h = new ClassHelper\n    import h._\n    { test code } \n  }\n}\nAre the tests you have to ignore ones that have problems related to 2.11, not to specs/scalatest semantics mismatches?\n@MasseGuillaume  we found that scalatest was typically a lot more conscientious about breaking API changes (we are still getting tests off of specs, as you can see), didn't require that you used a metric ton of implicits, which slow down compilation significantly, and is more responsive to bug reports.  In general, scalatest is flexible, simple to reason about, and doesn't get in your way.\n. It seems like the big mismatch between for ZkClientSpec is because it originally used JMock, not mockito.  I think I can unblock you.\n. Awesome!\n. @jcerdeira Actually, most of finagle doesn't depend upon util-zk, so if you want you can just do a publish-local against util-zk and work against that while starting in on converting finagle over.  The way to test is to change the version of scala that sbt is using to 2.11.  In the sbt console, you can do this by running ++2.11.0.\nLet me know if you need help figuring out what to do for converting finagle to support 2.11, but it should be pretty much the same as with util.\n. good call!  the next battle is in finagle.\n. Looks generally good.  A few things before we merge it in:\n1.  We can't use any feature that was introduced after 2.9.2 until we drop support for scala 2.9.2.  It will take a little while to do this, since Twitter still uses 2.9.2 in some places.\n2.  Why are the util-zk tests broken?  How can we help you fix them?\n3.  All of the tests should have the @RunWith[JUnitRunner] annotation.\n4.  We've historically called tests that were written with specs XSpec.scala and ones written with scalatest XTest.scala, so could you rename all of the tests that now use ScalaTest to end with Test.scala instead of Spec.scala?\n5.  There are a few places where your word find/replace were a little overzealous and renamed variable names or comments.\n. Hmm, maybe it would be simpler to just keep everything on mockito and rephrase the test slightly?\n. Instead of the different source directories, can we just use JavaConverters instead of JavaConversions?\nWere you able to fix the util-zk problem?\n. Rad, let me know if there's anything I can do to help with the rest of the util-zk tests.\n. Awesome!  Because this is so big, it will probably take us a little while to churn through reading it all, but thanks so much!\n. :ship: it! Other than a few nits.\nI'd prefer for the smaller tests to be FunSuite instead of WordSpec for faster compile times, but that's something we can do in a future PR.  It's fine as is.\n(edited for clarity)\n. Yeah, me too.  Happy shipping as is.\n. @adamdecaf this is basically blocked on me at this point.  @bmdhacks has mostly wrestled it through CI, and I'm going to take it over the finish line.  I'm going to try to get it in this week.\nIf you're interested in helping with the rest of the stack, we'd appreciate it if you took a stab at pieces of finagle that are still using specs.\n. Glorious news!  This has been merged internally.  We'll close this ticket after the change has been merged back into github.\nIf you have questions about how to move forward with 2.11 compat, I'll be your point of contact for now, and @bmdhacks will return to being the 2.11 guru when he's back from his honeymoon.\n@folone your name will be sung for innumerable generations.  If you ever find yourself in SF or NYC, hit us up.  You are owed many beers.\n. This is in master, but we had a small hiccup with figuring out what to do with util-eval, so we were still unable to publish 2.11.  Sorry!  We're working on a solution right now.  :grimacing: \nIn the mean time, I'm going to close this PR.  Thanks for the contribution!\n. Yep!\n. Nothing hard yet, but my guess would be in a couple of weeks.\n. @jedesah we're still on track.  I'll let you know if something goes wrong.  Thanks for checking in!\n. It has been closed and released from sonatype.  It should be synced to maven central shortly.\n. It's there! (\u0e51>\u1d17<\u0e51)  big shoutout to @folone!\n. Could you elaborate on the deadlock, and how you're using Futures?  Is the kafka code threadsafe in general?\n. What kind of FuturePool are you using?  What do you mean \"use a Future instead\", do you mean just run your code synchronously by calling Future { ... }?  Do you do anything immediately after the code with the futurepool that could be racing with it?  Are you calling this same function many times simultaneously?\nIs the kafka code threadsafe?  Are you obeying its contracts?  What I'm trying to understand is that it sounds like what you're saying is that it works when it's run synchronously, but deadlocks when you run it in a different thread.  This makes it sound like you're doing something which isn't safe to run in a different thread.\n. Looks like @benfradet can't reproduce this issue in https://github.com/twitter/storehaus/issues/233, so I'm going to trust him and mark this as fixed.  Probably we fixed this by accident somewhere down the line =).\n. @jedws I assume that this is no longer a problem for you, since there hasn't been movement on this ticket in two years.  I think it works as expected for most of our users, since it's a daemon thread.  I'm going to close it for now, but please feel free to open it if you're still running into this problem.\n. Ahh, too bad.  Good to know that util doesn't do well in a plugin environment, thanks for the feedback!\n. @roanta we're sort of implicitly catching the Error by just killing the thread in the threadpool.  Does the monitor even handle this?\nIf the monitor isn't handling it, we can inject it here, but I think that it's pretty clear it's not desirable behavior to just kill the thread, and it's also not correct behavior to just leave the Future hanging.  I think @gianm's proposal of fulfilling the Promise properly is a sound one.\n. It would be nice if the monitor had the option of fulfilling promises with the Error, but it doesn't seem feasible with the current API\n. I think that both @gianm's proposal and @roanta's proposal are strictly better--I think the bigger question is between the two of them, which will be easier/more intuitive to use.  I think that treating errors by default as system crashers and letting them be overridden to do something else if necessary is a good idea.  However, I also think that simple things should be easy, and complicated things should be possible.  This API makes it impossible to fulfil the promise with the error--it hangs the promise forever.\nMaybe a good compromise would be to install a monitor above the local monitor to fulfil the promise with the error before passing it to the next monitor.\n. We chatted offline--we're going to keep this on github in case someone from the community wants to tackle this.\nTo elaborate on what I mentioned before: my suggestion would be to make a new closure that holds a reference to the promise and can fulfil it with the error if necessary.  Not sure that doing it with a monitor is any clearer than just using a raw closure--just figured that since monitors were designed to be composed, it would be easy to reason about.  I agree that a generic monitor wouldn't be able to do it, so it would have to be something we hardcode in FuturePool.\n@roanta @gianm does that sounds reasonable?  Adding something to FuturePool that adds monitor handling and fulfilling the promise with the error?\n. @roanta I think that although the default behavior is to abort, it's not necessarily the only useful behavior.  I think one example is that you can in theory do a more sophisticated cleanup after an out of memory exception, if you know that's exactly what you have.  If there are certain resources that you want to give up so you can die more cleanly when you have an OOME, you can have your monitor ignore OOMEs, and then have a handler which checks the Future value, and if it's an OOME, and you have a resource you want to give back, give back that resource before shutting down properly.\nEven if we're just shutting down, it's useful to be able to hand back over the wire a Thrift exception that you got an OOME, rather than just shutting down the service.\n. How did you find this bug?\n. re OK to use Var and Event for this case:\nI'm not sure.\nIn theory, yes, Vars represent continuous values, while Events represent instantaneous ones.  However, historically, we've only created Events from Vars, not creating them directly.\n@mariusaeriksen could you weigh in here?\nre idiomatic alternatives:\nMaybe a Spool?  We use Spools for streaming discrete objects, this is sort like an incredibly slow object stream.  Your Spool could use the interrupt mechanism of Futures to do interrupts.\n. Spool instead of a Var, yes.  Instead of fetchNow, you could do something like:\nscala\ndef interruptSpool(spool: Spool[A], exc: Exception) {\n  spool.tail.raise(exc)\n  spool.tail.onSuccess(interruptSpool(_))\n}\nNB: the above is slightly dangerous, because it eagerly evaluates your Spool, so it's only OK if you have interruption support built into your pool that makes sure that work stops being done after a Future is interrupted.\n. Ah, I didn't understand your requirements.  Reading again, you're right that the \"interrupt everything\" bit doesn't really make sense.  It might be nice to instead do something like:\nscala\ndef handleSlowly(spool: Spool[A], duration: Duration, timer: Timer): Future[Spool] = {\n  doSomething(spool.head)\n  Future.sleep(duration) transform { case _ =>\n    spool.tail\n  }\n}\nNow, interrupting does the right thing, if it's a little weird, basically saying, \"please be aware that we want to discard the result of waiting\".\nCould you elaborate on what you're looking for with 3?\n. Yeah, we definitely don't want to add that behavior to Spool.\n. LGTM\n. Hey, this was merged in but because of a problem on our side, we're having trouble merging it in.  :closed_lock_with_key: We'll keep you posted, sorry about this!\n. LGTM\n. It's fine to leave it for now.  If you're curious and interested in diving in, we'd appreciate it though :)\n. This was merged in, but because of a problem on our side, we're having trouble publishing it.  :closed_lock_with_key: We'll keep you posted.\n. I think we might have removed util-eval from being tested.  We're going to stop supporting it in scala 2.11 (at least I think that is the current plan).\ncc @bmdhacks\n. @koertkuipers we generally suggest that folks use the flags API instead.  It can be found in util-app, and it's described in the TwitterServer docs.  If you're using flags, we generally recommend that you use TwitterServer.\n. Will the CI box will blow these away when we do our next util push?\n. Ahh, I see, because it never touches the old docs.  :deciduous_tree: LGTM\n. We don't have the bandwidth for this now, and it seems like @evanj doesn't have the time to work on this anymore, but I think this is a solid starter issue for anyone who wants to get involved in the project.\n. @mirokuratczyk good point!  totally forgot he had already fixed it, thanks @evanj!\n. This seems fine, but just a heads up: we're going to stop supporting util-eval starting in scala 2.11 because it's too much trouble to fix it whenever compiler internals change.\n. @andypetrella Did you want to continue with this PR?  We changed our minds about the 2.11 thing, by the way, since it turned out it was much easier to support than we expected.\n. @andypetrella probably wise anyway, it's sort of difficult to test, and we're discouraging folks from using it internally.\n. As far as I can tell, Batcher is a thin shim around BatchExecutor.  Maybe we want to just expose BatchExecutor directly?  Also, can you add some tests?\nWe should maybe consider rewriting some of BatchExecutor too . . . some bits of it are pretty weird.\n. @iceberg901 do you want to continue with this PR?\n. Awesome, let me know if you need any help.\n. Don't worry about the tests, it's something wrong with a new feature of travis-ci that we're trying out.\nI agree with you that exposing BatchExecutor directly would be a mistake, but changing the return type of Future#batched also definitely breaks binary compatibility.  With that said, we've relaxed how we feel about breaking binary compatibility in the last few months, so we can try merging it in and see how difficult it is.\n. This looks good\u2013there's one synchronization thing, and a few nits about docs, and a few other nitpicks, and then we should be ready to rock :sunrise: \n. Just two more things.  After that, I'll have a couple more folks take a look at it, and we'll take it from there.  You shouldn't have to do a thing.\n. LGTM, thanks for bearing with me!  I'll try to get more eyes on this and then we can merge it in.\n. @vkostyukov git review submit squashes the changes for us, so I don't think it should matter?\n. Could you make the change to the ChangeLog that Steve mentioned?\n. Yeah, I think both is a good idea.\n. LGTM\n. Yes, but this PR predates the develop branch so no worries! :+1: \nEdit: I just checked the CONTRIBUTING.md file, and looks like we still ask people to make a PR against master.  I'll fix it.\n. :ice_cream: this hit develop woo https://github.com/twitter/util/commit/616479c2acff63f3b93c8be8895ef285096a07f6\n. Not yet, but we'll send out an email on the finaglers listserv when we do it.\n. LGTM\n. I'm pulling this internally, thanks for the contribution!  We've having a little trouble with pushing to github, but it should appear on develop relatively shortly.\n. This was merged (finally).  It should appear on develop when we get sync to github working again.\n. Yep, it's in develop!  https://github.com/twitter/util/commit/95b11727ee16eb38efdadcde89f99ad9d4dca4c0\n. @caniszczyk java 6 still lives :[\n. LGTM.  Can we start testing against java 8 too?\n. Unfortunately, no.  For future reference you can look this up by checking maven central.  Here is an example query.\n. I think the idea here is that logging handlers are typically used for diagnostics and errors, and that we only want the actual output of a program (for example, if you wanted to implement curl with finagle, the content of the http response) to go to stdout.  I'm going to close this issue for now since it hasn't seen movement in a year and a half, but feel free to reopen if you want to continue discussing it.\n. LGTM\nOn Sat, Jan 10, 2015, 18:01 Eirik Sletteberg notifications@github.com\nwrote:\n\nSome locales represent floats as \"12,3\" instead of \"12.3\", so\nStorageUnitTest fails.\nThis PR forces English locale to be used when formatting storage units.\nIt changes code behaviour (rather than the test), but I guess it shouldn't\nmatter that much.\nYou can merge this Pull Request by running\ngit pull https://github.com/eirslett/util patch-1\nOr view, comment on, or merge it at:\nhttps://github.com/twitter/util/pull/121\nCommit Summary\n- Unit test breaks in other locales\nFile Changes\n- M util-core/src/main/scala/com/twitter/util/StorageUnit.scala\n  https://github.com/twitter/util/pull/121/files#diff-0 (4)\nPatch Links:\n- https://github.com/twitter/util/pull/121.patch\n- https://github.com/twitter/util/pull/121.diff\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/twitter/util/pull/121.\n. :boom:  merged in https://github.com/twitter/util/commit/0b73bbc3adc4e1766e6e3d79f233ea29f7a240c5\n. This is very cool, thanks for the contribution!\n\nDoes this work even with the annotations commented out?  I'm a little worried that we'll generate java7 incompatible java byte code.  Other than that, I'm really excited about all of this.\n. LGTM!  I'll make sure we get some more eyes on this soon.\n. LGTM, :ship: \n. @eirslett I'm trying to pull this in, but I just realized that it introduces a cycle between util-core-java and util-core-scala, which we need to avoid for historical reasons internally.  I'm going to split out the core java functions into util-function, ok?\n. The other option is that you can do it yourself and I'll merge in your change instead.\n. This finally made it into internal!  It should hit develop in ~ a week.  Thanks a lot for the PR :+1: \n. Have you looked at Monitors?\n. Have you considered writing a Monitor which calls System.exit?  It won't fall through to RootMonitor in that case.\n. @anshumans you could exit normally if you wanted . . . but you're going to have to write code to gracefully shut down, the same way as normal (ie /admin/shutdown in TwitterServer).  We don't have a special case for FuturePool.\nCould you elaborate on what you were hoping we would have?\n. @anshumans the FuturePool's threads are all daemon threads, so I don't think that's what's preventing your process from exiting.  That seems to be a separate problem from crashing your program when you get an exception in your FuturePool though . . . are these two separate problems that you have?  Could you elaborate on the problematic situation you're getting into?\n. If you want to do a clean shutdown, and your TwitterServer is wired up properly, then hitting that endpoint is probably a good way to shut down too.  My assumption if there's a special exception that you want to crash on, then you think it would be unsafe to continue making progress (like if there is a really bad state that you have gotten into).\nPlease reopen if you have any further questions. I'm going to close this issue and comment on your finaglers post summing up what we've discussed.\nThanks for coming to ask, always happy to help.\n. LGTM except for a couple style nits.  Thanks, I'm looking forward to using this :+1:\n. Maybe make a gen top level directory and stick your python script in there?\n. Yeah, that's what I was thinking.\n. LGTM, although I'd definitely like to hear what other folks feel about this.\n. @eirslett What are your concerns?  Is it mostly that util-test has unnecessary deps coming in from util-core and util-logging?\nWe could split it out into a util-mockito subproject, although I agree there isn't a particularly pressing reason for it to be in util (except perhaps that it fits with twitter/util's policy of neat knick-knacks).  I think the real benefit is that util already has its open source + publishing story down pat, so we won't have to go through the open source rigmarole either at twitter or with sonatype.\n. I'm going to pull this internally.  I'll add you to the review, thanks @zacharyvoase :heart_eyes_cat:!\n. This was merged in!  Woo!\nhttps://github.com/twitter/util/commit/cd2c09652f230f5fa63cfcfffc4a2e19ff5f25eb\n. Hey @fommil, I think the Logging api is just a thin wrapper around jul, and I'm not sure of anywhere where we force you into using it.  What's the specific problem you're running into?\n. A transitive dependency on which module?  I'm sorry, but it's going to be much easier for me to help you if you can elaborate.\n. I don't know if you'd be able to host a server easily, but you could certainly use the finagle client.\n. @koertkuipers yes, we dropped java 6 support.  We only announced it on the finaglers listserv (since util doesn't have its own listserv).\n. Could you follow CONTRIBUTED.md?\n. I'm having a lot of trouble understanding how ZkAsyncSemaphore works at all.  It seems totally broken to me.  I'll try to take a closer look this weekend.  @mikepii if you could document the strategy behind ZkAsyncSemaphore, and add that to the review, it would help this go faster and also be a very useful general improvement.\n. OK, I figured it out.  @mikepii is there any way that you can also remove the failed nodes from the list of permits before we grab sequence numbers?  LGTM otherwise, except for a few nits that I mentioned above.\n. Yeah, I'd prefer that it's at acquire.  My concern is that someone will refactor the class, and because we're testing this private method, if the private method disappears, or starts being used differently, the test will no longer protect us from this kind of regression.  I think testing at the acquire level is not that hard, and demonstrates what we want better.  Does that make sense?\nRe resetting the PR branch: I don't think so, but even if we do it's fine.  In general, I think github is good about accommodating many different kinds of git workflows.  With that said, we squash your commits on our side anyway, so if you want to just merge your changes in, that's totally fine.  It would be nice to have a commit message which follows Problem / Solution / Result (makes our lives a little easier) but if you just supply the text that's fine too.\n. @mikepii howdy, do you need any further help from us?\n. Sorry this has taken so long for me to get back to you.  I'm going to need some time to take a look at this again because it's always good to be careful around concurrent code (and doubly so for anything ZK-y), and I'm spending most of my time on a different project at work.  If you need a faster turnaround, I can try to get someone else who has more bandwidth to take a look.\n. Agh, I'm the worst, but this looks good to me.  I deeply apologize for how long it took me to review this.\n. This was merged here: https://github.com/twitter/util/commit/f78382ef261e851261f3f541ca94743f7f7f0435.  Thanks @mikepii!\n. That seems fine, but could you elaborate on why you're interested in this?\n. Are you still working on a pull request?  Happy to help with it.\n. @rightfold looks like there hasn't been an update in over a year, so I figure you're probably too busy to work on this?  I'm going to close this ticket for now, but feel free to reopen if you decide you're interested again.  As before, happy to help if you have any questions!\n. Thanks for the bug report, this has been fixed on the develop branch already.\n. Can you val up the arguments to ceiling and floor?  Neither of these operations should entail an allocation for the closure.\n. I'm not sure that I love this approach, where we pass a slightly complicated function to round.  With the closure, we're making something that used to be very simple a little complicated, and it doesn't seem easier to read.  Instead of adding the round method, could we instead define ceiling as\nscala\ndef ceil(increment: Duration): This = floor(increment) + increment\n. Thanks for the contribution, @benjumanji!\n. LGTM\n. LGTM.  It might be nice in the future to build a type of equality for AsyncStream to simplify this kind of test, where you can set which bits have been eagerly evaluated or not, and which asynchronous bits have been satisfied or not.\n. LGTM\n. LGTM\n. LGTM\n. @mariusae has been our liaison with the reactive streams work, so he would know better, but I think it sounds pretty reasonable.  Maybe it would make sense to provide a util-reactivestreams module with twitter bijections between AsyncStream and reactive streams?  Do you want to take a stab?\n. This continues to be low priority for us, but we would welcome a PR to improve our interoperability.\n. @schrepfler do you want to come up with a proposal?\n. What's an example of side-effecting code you want to sequence?\n. What is an example of why I would want to use this?  It's hard to do API design without a use case in mind.\n. @Chandler I'm working on that this week, so that might be able to fit that use case.  Are there any other use cases for this method?\n. @k4rthik, I think that @luciferous is right, that you should be able to use the asynchronous insert.  You can only do a transaction over a single session using mysql, and the transactional client gives you exactly one session.  Mysql is over TCP, so we're going to insert all of your records in order (and in this case you don't care about the order that they're inserted in, as far as I can tell).\nYou should be able to join all of the insertions you've done, and provide that as the return value for the transaction.  If any of them has failed, then it will roll back the transaction.\n. @Chandler I think we should make sure that this is really the right abstraction.  I agree that it could be useful, but if comes down to solving the same problem as other tools we already have (like an async rate limiter) then we should prefer not to provide redundant functionality.\nWith that said, @stuhood said he had seen a bunch of requests for this recently, so my guess is that I just don't understand the use case yet.\n. @leftparen could you elaborate on your use case?  trying to get a better sense of what this is for.\n. OK, so it seems like the key thing here is that we generally assume that the reason why you aren't doing something in parallel is because there's a data dependency\u2013in this case, the \"data\" that you care about is implicit, because all you care about is an acknowledgment that it has processed the write (ie the Future is satisfied).\nIn that case this API makes sense.  I'd be happy to ship this as is then.\n:+1:   LGTM\n. :+1: Sure\u2013seems reasonable.\n. Sort of a sidenote, but FutureThunk might be generally useful.  Folks often ask how to use RetryFilter[(), Rep] for something asynchronous that doesn't look like a Service[Req, Rep], and right now, the answer is to make a trivial Service[Unit, Rep] but we don't really need that.\n. LGTM, :+1: to @kevinoliver's suggestions\n. LGTM\n. Good catch!  LGTM\n. @ben-manes we can't use java 8 features yet, but when we do, maybe it would make sense to provide something like GuavaCache for caffeine?\n. good catch!  I wonder why I got that wrong before.  I'll fix it.\n. We have an experimental version here!\n. :shipit: \n. @jacksu can you check if you can access maven.twttr.com?  Looks like you live in Xi'an, some people have had problems with GFW China in the past, worth making sure you're not running into that.\n. @lukiano I agree that if you have this use case, we should make it a policy.  The argument for the existing implementation is that it tries to maximize correctness over latency.\n. Hi @jacksonic, there's good news!  We don't use the vulnerable part of apache commons (the deserialization part) so older versions of util are actually still safe.  Thanks for the PR!\n. I'm closing this since we're trying to end of life util-eval.  If this is still a problem for you, please let us know!\n. LGTM, thanks for the PR!\n. merged this internally!  it should show up on github on Monday, I'll update this ticket once it hits develop.  Thanks!\n. This was pushed out to develop here: https://github.com/twitter/util/commit/caf2ae55f1057c9fc90cdd5fb3c07d1ba23f81f3.  Thanks so much for the PR!  :heart_eyes_cat: \n. LGTM\n. @luciferous merged internally!  \ud83d\udc96\n. Made it internally!  https://github.com/twitter/util/commit/adb0aad23731b7fbfa8198cfb80485b901148b33\n. Made it to develop!  Thanks again for the PR :space_invader: https://github.com/twitter/util/commit/18153f1bc1168781a66ec59972b9c72cca790889\n. oh, I understand what you're trying to do now.  could we fix this more simply by changing the implementation of LazyLogRecord?\n. I think only util-logging uses QueueingHandler, no?  We wouldn't need to modify QueueingHandler because we could restore it in getMessage.  LazyLogRecord isn't used for the synchronous case, so it should be OK, I think.\n. OK, let me get this straight, the problem you're running into is that your formatter needs context, not that your actual log needs context?  That makes sense.  I think this is a solid solution then.  LGTM\n. Sorry for the delay, I think this is ready to ship.\n. This was pushed to the develop branch here: https://github.com/twitter/util/commit/50ae991b39e9ec79c147b7df85a818161c750ad6\nThanks for the contribution!\n. @scf37 right\u2013the guarantee we provide is that if you have a data dependency (like if you were mapping iteratively over these callbacks) we will preserve order, but we have no such guarantee when you're hanging callbacks off of a single Future.\nie\n```\nval = PromiseInt\np.map { _ =>\n  println(\"1\")\n}.map { _ =>\n  println(\"2\")\n}.map { _ =>\n  println(\"3\")\n}.map { _ =>\n  println(\"4\")\n}.map { _ =>\n  println(\"5\")\n}\np.setValue(42)\n```\nYou should see 1 2 3 4 5\n. @thefourtheye sorry for the delay in getting back to you!  this looks right to me, can you reproduce it using our test system?\n. Heyyyyy, so this is source-compatible for scala but not for java, and it breaks ABI compatibility in a bad way.  Also, call-by-names allocate on every call unless you're using scalac -optimize (which we aren't, often).\nCan you cache your exception instead?  The stacktrace is not going to be useful regardless.\n. This was pushed to the develop branch here: https://github.com/twitter/util/commit/6390aa8faa62a73effbd5e7c252f5818035433a7\nThanks for the contribution!\n. LGTM\n. @jeffreyolchovy can we try using a different library version depending on the scala version?  and can we only enable scoverage for 2.11?\n. Ignoring the overloading case, I'm also not that familiar with what's going on here, but it smells to me like it's a bug that SAMs can be converted to functions correctly now, but placeholder syntax requires specifying the argument.  It smells like a regression in placeholder syntax to me.\nFor the overloading case you've described, this smells like a bug to me too.  Unlike Comparator in the sam-types announcement example, which is annotated a FunctionalInterface, AtomicReference is not a function under the hood, and the compiler should be able to disambiguate the overload.\n. @jeffreyolchovy has started a branch, which you can take a look at at #163.  He hasn't mentioned util-collection as having problems, but if you're curious, you can check out his branch and try building it yourself.\nI'm a little suspicious that util-eval will have problems, so it would be worth trying it out too.  Thanks @idarlington!\n. LGTM\n. @stuhood @jeffreyolchovy I filed https://issues.scala-lang.org/browse/SI-9796 to see if the scala folks can help figure out the type inference regression we found in Witness.  I think it somehow has to do with traits which have only one method\u2013I think they might be compiled down to java functions under the hood.\n. @idarlington it looks like this issue is going to be easier than we thought it would be.  If you're still interested in getting involved in util, you can tackle https://github.com/twitter/util/issues/107, or if you're interested in helping with the finagle 2.12-support effort in general, ostrich and scrooge are the two next steps for getting 2.12 going!\n. @stuhood @jeffreyolchovy turned out I didn't understand what a SAM was.  Updatable is a SAM, which is why there's an inference problem.\n. @spockz we're blocked on migrating to scalatest 3.x since they stopped publishing scalatest 2.x for 2.12.x.  We'll start publishing for 2.12.0 once we've switched.  My guess (not a promise) is that we'll first publish for 2.12.0 in early December.\n. Thanks so much for doing this!  One more nit: could you follow the commit message / PR description style described here: https://github.com/twitter/util/blob/develop/CONTRIBUTING.md#style ?  As an example of how it works, you can look at recent commits in the repository.\n. Hmm, it looks like they published scalatest against 1.11.6 scalacheck.  Have you tried using 1.12.5 2.12.0-M4?  That looks promising.\nAs an aside, it looks like scalatest 3.0 is going to be the way forward soon so we should start considering upgrading.  However, it isn't going to be a blocker afaict.\n. @jeffreyolchovy just a heads up, and you don't have to do anything yet, but I'm moving us to scalatest 2.2.6, so we won't have to change the scalatest version based on the version.  I'll see if I can do scalacheck too soon.\n. @jeffreyolchovy no worries about the commit message.  for what it's worth, we're going to squash the commits into one, so it's OK as long as just one of the commit messages uses the format.\nThe new patch LGTM\n. LGTM\u2013I also bumped the scalacheck and scalatest versions internally so we don't have to choose them based on the version anymore, but I can fix that when we pull it in. Thanks so much for this!\n. This was merged internally, and it also now compiles successfully against 2.12.0-M4 in our internal build system!  I'm pretty pumped, thanks for tackling this.  \ud83d\udd25 \n. Merged here: https://github.com/twitter/util/commit/efcc8a3d9933886b271e37a59adc19d37722de83.  With that said, it broke our dependent builds (ostrich / finagle / etc) so we had to revert it, but @cacoco is working on unreverting it.  Thanks!\n. @instanceofme will this fail if it's not actually Serializable?\nFor what it's worth, we're trying to end of life util-eval, so it might end up disappearing eventually.  This isn't to say we won't take your PR, just wanted to give you a heads up.\n. Will the class fail to compile if it has non-serializable members?  Or will it fail at runtime?\n. @instanceofme rad, works for me.  LGTM\n. This was pushed to the develop branch https://github.com/twitter/util/commit/41e2e9201b595d92a3db5fa1bb74304555715059 thanks for the contribution @instanceofme !\n. @tacnoman hi!  Welcome to util.  We have a library for making asynchronous caches, util-cache, which is documented here.  Could you elaborate on the problem you're trying to solve?  util-cache works well with finagle, but if you're using a synchronous http client, it might not be the best fit.\n. @johnynek why not encourage folks to use bijections instead?\n. @stuhood @kevinoliver @johnynek my feeling here is the same way I feel about Option vs guava Optional / java Optional, which is that if we allow folks to pass in all of the various isomorphisms of these things, we're going to result in unnecessary API duplication when it's pretty simple to simply choose a single type and then allow bijections to move us from the other types here.  In particular, if we had a method which took a twitter.Try[scala.Option[A]] (like the result from a cache) we would need to also have a scala.Try[guava.Optional[A]], scala.Try[java.Optional[A]], scala.Try[scala.Option[A]], twitter.Try[guava.Optional[A]] etc.\n@johnynek any change which increases the surface area of the API isn't a strict win ;)\nWith that said, I can see the argument that Future is special because it's ubiquitous through our distributed systems code, and it's worth making this easy even if we might not do it everywhere else.  Does that seem fair?\n. OK, that makes sense. I think when I reviewed you hadn't made the change to remove it from Future, I can see the argument to add this just the Try level.  LGTM.\n. @tbekas fwiw, we're hoping to kill util-eval eventually, but this LGTM, we're still happy to merge this in.\n. Just so you know, we no longer use util-eval internally, and it's officially deprecated.  But we're still willing to accept pull requests for it.  Can you add a test?\n. @nilday we don't compile scala at runtime, we've decided it's not a good practice.  It's difficult to test, it fails at runtime instead of at compile-time, and it's often easy to rewrite these kinds of programs to be compiled instead.  If your use case requires that you be able to evaluate scala at runtime, I think they exist, and they're probably better maintained than util-eval.\n. LGTM\n. @nilday I'm sorry to hear that.  We've already made the decision to drop support for Java 7.  Java 7 reached its end of life over a year ago, and at some point we need to continue moving forward.  I know we're not the only library that has dropped support for Java 7, so it might be worth lobbying your company to start working on the Java 8 migration.\n. @SethTisue can you set SKIP_FLAKY?  We use that when we don't think the tests will be reliable in a ci environment, like tests that check what happens after we trigger a garbage collection.  Not sure what's going on with FuturePoolTest though, we haven't seen that before.\nHow did you start running into this?  Did you just start running tests for util?\n. @SethTisue we dug into the FuturePoolTest and figured out the problem, should be open sourced Monday.  is the CumulativeGaugeTest better now?\n. \ud83d\udc4d  yeah, I'm hoping to get to it next week.  tried a couple weeks ago but some of our deps weren't publishing for it yet.\n. @SethTisue jsyk, right now we're blocked on upgrading scalatest to 3.x internally, since it looks like they've stopped publishing 2.x versions for 2.12.  If the migration is painful, we might lobby scalatest to temporarily start publishing 2.x versions again.\n. @SethTisue we haven't changed anything in Config in a very long time, so I'm a little suspicious.\n. LGTM after @taylorleese's nits.\n. LGTM, I'll work on getting these merged in.\n. This was merged internally, thanks for the PR!\n. LGTM\n. This was merged internally, thanks for the PR!\n. This is a breaking API change, do you mind adding a note to CHANGES?  LGTM otherwise.. @olix0r as you have probably guessed, the modules are internal to twitter.  For various reasons, it isn't easy for us to open source them or publish them, but they have the same APIs as the open source ones, so it should be safe to follow the exclude properly.. @olix0r which I think most build tools do automatically?  maybe it's worth trying to patch gradle.  in the mean time, we agree that it's not ideal, and we're working on fixing it.. @olix0r we've stopped depending on commons for util, so this will be fixed in the next release.  closing this ticket for now, please reopen if you see problems again.. @kovszilard hey, just wanted to ping you on this.  Any chance you can update your commit message?. thanks for the PR!  LGTM, do you mind adding a commit message which is formatted like in CONTRIBUTING.md?. no worries!. This was merged in here: https://github.com/twitter/util/commit/93a88444c597841e0a514538b2381b14ddbcf687 thanks for the PR!. Thanks for the review @monkey-mas!. @bryce-anderson it's probably easiest for us to just do it on behalf of @mehmetgunturkun.  the other thing we could do is merge a finagle and a util commit (which should be possible) but we haven't tried it before.. @mehmetgunturkun this was merged in a couple days ago, thanks!  https://github.com/twitter/util/commit/94ab01fc7a568f5bdcb14f032ccb17ed313eb187. @ahanwadi we don't use Local#let here because Local#let uses a call-by-name parameter, and so allocates a closure on invocation.  The pattern local.closed(() => doSomeWork) is an improvement over () => local.let(doSomeWork()) mostly because it lets us skip allocating that closure each time.  I'm going to close this PR for now, but please feel free to keep commenting if you have more questions.. @nmurthy hmm, I don't think Tunable is exactly what you want.  I think you're probably better off just adding a new admin endpoint instead of trying to reuse the Tunable admin endpoint, which is really for adjusting configuration values.  Do you think that would solve your problem?. @nmurthy we might have a different idea of what \"changing a configuration value\" means.  We mean something like, \"let's adjust this timeout from 100 milliseconds to 200 milliseconds\", instead of \"trigger some application logic to do something different\".  So we're passing a number to a timeout that's different, but not making anything too thrilling happen in the program.\nIt sounds like you've solved your problem, so I'm going to close this ticket.  Thanks!. Unfortunately, we need to keep scalatest parity with the version of scalatest that twitter uses, so I don't think we can accept this PR.  Scala 2.12.x and sbt are OK because we don't run either of those internally (scala 2.12.x is a work in progress).  However, thanks for the reviews!  Keep 'em coming.. @IrimieBogdan to be honest, we don't know very much about util-zk because we don't use it very widely inside of Twitter anymore.  I would not be surprised that it doesn't work anymore.  Unfortunately, the right solution might be to switch to a different ZK client library.  We're currently auditing util to remove pieces that we are no longer confident in, and I think util-zk may be on the chopping block.  With that said, if you have time to chase down the issue, we would love a PR, but it might be more expedient to switch to a zk library that's more actively maintained, like curator.. @SethTisue it's unlikely we'll do this soon.  It's impossible to migrate in such a way that we can use the same source across builds, especially since we still need 2.11.x support, so we'll need to set up new infrastructure to use different source across builds.  We started trying to do this here and it was pretty invasive: https://contributors.scala-lang.org/t/2-13-x-migration-and-source-compatibility/2000.. @SethTisue is there any sbt infrastructure to make this easy?  we aren't sbt experts, so that will probably be one of the main impediments.. Great, thanks!. Love it, thanks @SethTisue! Do you mind updating your description or commit message to use our commit message format?  The scheme looks like\n```\nProblem\nSolution\nResult\n```. @monkeyroar sorry for the delay, this fell off my plate :(.  looking at your changes now!. our style is to use two spaces, not four.\n. The indentation seems wrong on this line.\n. indentation\n. Could you break this into two lines?  We try to restrict our maximum line length to 100.\n. The indentation here looks wrong.\n. Why is there confusion over what to do?\n. This test seems identical to \"not report errors on success\" what's the difference?\n. Please just make this camel case.\n. two spaces, not four.\n. two spaces, not four\n. two spaces, not four\n. do we still need this dependency?\n. is this bug fixed in 0.13.2?\n. what was the problem with doAfter?\n. ClassTag isn't 2.9.2 compatible.  Has ClassManifest been removed?\n. is parent a reserve word now?\n. ClassTag vs. ClassManifest again\n. don't bother changing anything in util-eval, we're not going to support it.\n. revert this\n. revert this\n. is this 2.9.2 compatible?\n. maybe this test should be ignored?\n. is this 2.9.2 compatible?\n. 2.9.2 compatible?\n. revert this\n. we still need 2.9.2 here.\n. Yes, it's 2.9.2 specifically.  I'd be fine with also cross-compiling to 2.9.3, that shouldn't add any overhead, but people haven't exactly been clamoring for it.\n. hurk!  looks like scalatest dropped support for 2.9.2?  good thing we're moving off soon (finally)\n. whoa, this is very cool.\n. can we move the _ % \"test\" just into the scalatest val?  also, I think we can just put scalatest into the Seq of libraryDependencies.\n. maybe use ~= here?  it makes it explicit to sbt that this depends upon the value of libraryDependencies.\nlibraryDependencies ~= { dependencies =>\n  libraryDependencies ++ CrossVersion.partialVersion(scalaVersion.value) match {\n    case ... => Seq(scala-parser-combinators)\n    case _ => Seq.empty\n  }\n}\nor we can just shove that Seq into the original libraryDependencies Seq.\n. this is awesome ;)\n. It looks like this gives a deprecation warning now . . . it already gave a deprecation warning though, since we deprecated it.  Maybe keep the inheritance for now, but add a // TODO: delete in major version bump?\n. These are so simple, could we make them FunSuite instead of WordSpec?  It'll make compilation faster.\n. @bmdhacks I think this fails on 2.11, so we have to figure out what to do about it.\n. ah, got it.\n. looks good\n. for one line, non-scaladoc comments, just use //\n. I commented on this line because it's not /**.  Should it be scaladoc?\n. Yep, we'll do it.  Thanks for clarifying!\n. please don't bump the version number, thanks!\n. this is a breaking change, let's at least continue to expose a constructor where you don't pass one in.\n. Maybe DefaultClassPathFinder is a more clear name?  Also maybe it makes more sense to just make it a top level object rather than a val in the companion object?\n. instead, this should read:  (eval: Eval)\n. instead this should read: (eval: Eval)\n. let's use util-app flags instead of raw system properties, and let's also make this a top level object instead of a val in a companion object.\n. add parens for mutating no-arg methods\n. Although narrowing a return type is kosher for source compatibility, it is unkosher for binary compatibility.  We should probably either add another endpoint, or punt on this until we decide to do a major version bump.\n. scaladoc\n. seems like this just repeats all of the arguments to BatchExecutor, how about we make the BatchExecutor something we pass in?\n. please add an explicit return type for all public methods\n. since this is already synchronized in the BatchExecutor, not sure you have to do this too.\n. Whoops, misread, looks like it's not synchronized in BatchExecutor.  Also, if we have a scheduled flusher, is this going to interfere with it?  Maybe we should make sure we have execute exactly once semantics for a flush for a given batch?\n. sort imports\n. is this even worth it given that we can't use FunctionalInterface?  Maybe it would make sense to publish a separate util-lambda target for now?\n. is it OK that these are just testing compilation?  we might stop running them and just compile them at some point in time.\n. oh, I missed this before, but maybe camelcase these two for consistency?\n. how about we compromise and have two versions of the methods, one long / explicit, and one short / obscure?  that's a common pattern in scala if you want to have a symbolic DSL.  like maybe,\nexceptionalFunction / xf\nfunction / fn\nexceptionalConstant / xc\nconstant / cn\n. this doesn't act like a field, can you add parens?\n. why are 4 and 5 special?\n. in general, we prefer JavaConverters to JavaConversions.  If you want to avoid the extra allocation, could you invoke it explicitly?\n. oh, I see, zipped works for 2 and 3 but not above.  what a hassle.\n. could you include the script you wrote to generate these, in case we ever want to extend this or modify it ever?  ditto for capturingOne.\n. for Future#join we did it like this: https://github.com/twitter/util/blob/master/util-core/src/main/scala/com/twitter/util/Future.scala#L172\nAlthough for 5 it's probably OK to omit it, not a huge deal.\n. Yeah, I heard that pants is weird about macros?  Not sure whether that's apocryphal or not.  This is probably fine for now.\n. This should be formatted like so:\nscala\n/**\n  * Provides ....\n  * ...\n  */\n. rm the @constructor line, doesn't really add anything\n. rm this one too.  it's pretty obvious.\n. As you mentioned before, BatchExecutor is an internal implementation detail, so when giving folks instructions in how to use Batcher, we shouldn't ask them to understand BatchExecutor.\n. We should make the constructor private[util] since folks outside of util won't have access to a BatchExecutor anyway.\n. this must be synchronized on the BatchExecutor.\n. don't reveal implementation details\n. Testing for concurrency is very difficult, it's easier to just reason about the java memory model.  If we start running into big problems, we can go write some multithreaded tests to try to trigger the race condition, but it's fine for now to stick with singlethreaded tests.\nWith that said, the guarantee that we want is that there is only one caller of flushBatch() at a time.  The way BatchExecutor achieves this is by synchronizing on itself, which creates a happens-before relationship between any two calls to flushBatch().  I think the only way for us to do the same thing is to synchronize on the same thing (ie the BatchExecutor).\n. add parens\n. add parens\n. add parens\n. add parens\n. unused\n. this doesn't really belong in scaladoc.  Could you move it out into a // TODO comment?\n. unused, as far as I can tell.\n. unused, as far as I can tell.\n. No, I think BatchExecutor as a parameter to the Batcher constructor is still a good idea, but Future.batched should be the only way to get a Batcher.  Let's make the constructor private[util]. :ship: \n. The only TODOs I could find in Future.scala were about future deprecation, which is actually probably of interest to the end-user.  My general philosophy is that TODOs that are about changing semantics are for librarians, so they should be in normal comments.\nThat formatting is fine, I think just sticking it in the line beneath the constructor for BatchExecutor is good.\nEDIT: actually, I just remembered that BatchExecutor is private, so it won't get published as scaladoc anyway.  I don't feel as strongly now, so feel free to ignore this.\n. this class can't be private if we're exposing it as a return type for Future.batched.  can you just make the constructor private instead?  That would look like:\nscala\nclass Batcher[In, Out] private[util](...\n. feel free to ignore:\nMaybe also note that if apply makes it hit the batch size, it will automatically process the batch.\ns/Future/[[com.twitter.util.Future]]\n. More I'm saying that if we wrap it in double square brackets then scaladoc will render it as an internal link.  It's not a huge deal, but it can be nice.  I'm OK with merging as-is.\n. My argument for the short / DSL-y version is that for java users interoperating with scala, they'll probably use these methods all the time.  DSLs work well for those kinds of users.  On the other hand, for folks who only rarely need to use this lib, it's simpler for the name to explain what it's for.  I don't think alias-ing is such a sin.\n. prefer Future.value, which doesn't require allocating an extra closure, especially if you're already in a try/catch block.\n. ditto\n. ditto\n. this doesn't really test what we care about, right?  which is that acquire shouldn't fail just because you have a node that doesn't exist.\n. instead of using this, we can just widen the scope of numPermitsOf to private[coordination], I think that's simpler.  Do you have a strong preference for using PrivateMethodTester?\n. could you add a comment which explains why this might happen?\n. For exactly the same reason why the dispatch library now has explicit operators as well as symbolic ones.  Obscure names are OK for folks who use a library all the time, but just make code harder to read if you only use a library every once in a while.  We do this with our Time and Duration APIs too.\nWith that said, I don't think this is worth fighting over, and I'd rather get it in, so I'm OK with func.  @mariusae @eirslett are you OK with my original request to camelcase?\n. OK, let's keep the original ones.  I'll make the change on my side.\n. do you mind if we call this ceil for consistency with scala.util.math?\n. instead of x is there a more descriptive word?\n. while we're in here, can we rename x to something better?\n. the names of these arguments should be more descriptive\n. no need for === anymore, scalatest 2.x supplied an assert macro which unpacks failures very neatly even when we use regular old ==.\n. feel free to ignore:\nI think this is a tiny bit more readable if you use 60.seconds helpers rather than fromSeconds, but it's not a big deal (and fromSeconds will actually make it compile faster, so there's definitely an argument the other way too).\n. feel free to ignore:\nfor symmetry, keep this 1.hour too?  no reason for people who are next looking at this test to wonder, \"why is one 1.hour and the other 1.second?\" when, as far as I know, there isn't a reason.\n. can we call these increment too?\n. please sort imports\n. sorry to be anal about this, but slow libs are often slow because of death by a thousand cuts.  1.nanoseconds adds an allocation, can we val this up?\n. can we make these arguments increment?\n. feel free to ignore:\nI think we can also avoid an allocation by checking if this.floor(increment) == this, and only adding increment if they're different.  If you think it decreases readability though, the allocation might be worth it.\n. ffti: the style is now to avoid infix except for symbolic operators, so this should be first.map(_ => 2)\n. ffti: this might be simpler to reason about if we use different vals instead of a var.\n. for folks who are curious about why this didn't work before, scalacheck generated functions were constant.  we should be able to use scalacheck generated functions if we upgrade to 0.13.0.\nhttps://github.com/rickynils/scalacheck/pull/171\n. yes, the s string interpolator toStrings for you\nhttp://www.scala-lang.org/api/2.11.8/index.html#scala.StringContext@s(args:Any*):String\n. instead of upgrading, can we use a different version between 2.11 and 2.12?  We have better tooling internally to make sure things don't break, but we're still on 1.12 internally.  It'll be easier to make sure things still work for 2.11 (which, frankly, we care a lot more about than 2.12 until it's stable) if we keep the versions aligned with what we use inside of twitter.\n. ditto here.\n. we're getting rid of this really soon in exchange for twitter bijections, so let's make sure you merge master before we merge this in.\n. could you elaborate on what the problem is?  why can't scala do this?  is this a bug in 2.12.0-M4, or is this expected behavior?\n. How about using CrossVersion.partialVersion here?\n. do you mind using () instead of {}?  doesn't really matter, but it's the style we normally use in util.\n. only two spaces please\n. only two spaces please\n. keep stars aligned to the left star (-1 col)\n. keep stars aligned to the left star (-1 col)\n. nit: s/folderName+\"/LogFileDir/testFileSize.log\"/folderName + \"/LogFileDir/testFileSize.log\"\n. should is implicit here.\ns/ should succeed to rollover/rollover\n. I don't love this testing style.  how about instead having two Filehandlers in one test?\n. @malikvivek that's not the part of it that bothers me\u2013it's that we execute the test multiple times so that subsequent runs of the test will be affected by previous runs.  we should instead have all of our tests be isolated from one another.\n. it's possible for this to create a race condition where this is closed before the \"first\" closables have started.  maybe we should fix this with mutexes?. uhhhh this is getting really deep in the concurrency weeds but volatile isn't really strong enough here.  the JVM could reorder this in a dirty way:\nt1:\nif (closeDeadline != Time.top)\nt2: \ncloseDeadline = Time.now + 5.seconds\nclosables.foreach(_.close(deadline))\nt1:\nexits.add(closable)\nPretty good explanation [here][0].\nThis probably isn't an issue in practice, but I'd rather program against the JMM than against an implementation of the JMM.  Let's just switch this to use mutexes.\n[0]: https://shipilev.net/blog/2016/close-encounters-of-jmm-kind/#wishful-hb-actual. this may cause the closable to closed twice\u2013this is probably ok but it's not part of the closable contract that it is, so let's close it exactly once if possible?  again, mutexes seem to be the right tool here.. nothing is multithreaded here, let's drop the volatile annotation.. same. should be { _ instead of {_. this makes a lot of intermediate allocations that I think we can probably skip.  how about we use regular longs except for BigInt(buf.get(pos    ) & 0xff) << 56 and then or them at the end?\nalso, why do we need to & it with the unsignedLongMaxValue?. looks like the indentation got screwed up. I think this is still constructing many intermediate objects.  can you only OR with the bigint at the very end?. please fix the indentation.  two spaces please.. I don't love love this because of the intermediate object, but we do shave the ArrayList alloc, which is pretty good.  can you add a TODO to change to collectionAsScalaIterable when we drop support for 2.11.x?. again, TODO to make this better after we drop 2.11.x?. ditto. ditto. ffti (feel free to ignore): new CancellableSink({ count += 1 }). yah, take a stab at it.  java is basically a subset of scala.. if it compiles, that works for me.. ?. ? I don't think we want to remove this.. private[this]?. let's remove the null check.  in scala, we typically use Options to signal if it's nullable.. private[this]?. shadowing f makes this a little hard to read. looks like we unconditionally use f + \"$\" now?  why is that?. can we add a note explaining why we need this?. doesn't this mean we don't drop the \"$\" anymore?. hmm, strange, it looks like this isn't getting generated properly?  do you know why?  https://twitter.github.io/util/docs/com/twitter/app/JavaGlobalFlag.html. I bet we sometimes put all kinds of wild things onto the classpath.  how tricky would it be to manufacture a less real classloader?. this is scaladoc, so it should appear when we generate our scaladoc, right?  I was looking at the generated docs (linked to in the above comment) but I don't see the docs.. in that case, I would prefer to immediately wrap methods that may return nulls in Option. I don't think that's right.  Isn't it part of our public API?. right, I mean add a comment in the code for implementors, so they don't need to go back and dig through this PR to understand why.. revert this indentation change please. revert indentation changes please. indentation. ",
    "electricmonk": "I get a TimeoutException; I use 5.3.13, BTW\n```\nrescue should\nrecover from timeout immediately\n100.milliseconds\ncom.twitter.util.TimeoutException: 100.milliseconds\n    at com.twitter.util.Future$$anonfun$within$1$$anonfun$2.apply$mcV$sp(Future.scala:453)\n    at com.twitter.util.JavaTimer$$anon$1.run(Timer.scala:155)\nrecover from timeout using another future\n```\n. Any clue?\n. Note that I didn't actually change any logic, just split ScheduledThreadPoolTimer into two separate classes. Marius, anything I can do to help or have you got this? \n. Hmm. I must have missed that last commit by @jpinner somehow. Sorry for that.\nTaking a ScheduledThredPoolExecutor kind of defeats the purpose of this pull request; we are using a DelegatedScheduledExecutorService that decorates Runnables with additional \"aspects\" like statistics gathering and error reporting, and the point here was to allow an arbitrary implementation of ScheduledExecutorService.\nNote, also, that returns instances of ScheduledFutureTask, which actually remove themselves (using ScheduledThredPoolExecutor#remove) from the queue upon cancellation (see lines 280 and 522 of ScheduledThreadPoolExecutor.java (HotSpot 1.7_06) as long as ScheduledThreadPoolExecutor#setRemoveOnCancelPolicy was set to true.\nI'm going to commit a further fix which calls this method from the new makeScheduler method I introduced. If the user chose to pass their own instance of ScheduledExecutorService, I think it would suffice to add some warning to the documentation of the method and make it the user's problem.\n. Oh crap. \nThe last resort would be to not have ScheduledThreadPoolTimer extend ScheduledExecutorServiceTimer. They can probably share some code via a Trait. The original class, which is intimately familiar with ScheduledThreadPoolExecutor will call underlying.remove and the new one will not.\nIt's either that, or do some isInstanceOf checking (blugh :|). Or just cancel this pull request and I'll just add the new timer to our infrastructure :).\nWhat do you say?\n. +1\nOn Wed, Jul 9, 2014 at 11:33 AM, Joe Gaudet notifications@github.com\nwrote:\n\n+1\nReply to this email directly or view it on GitHub:\nhttps://github.com/twitter/util/pull/97#issuecomment-48443220\n. \n",
    "xuwei-k": ":+1: \n. There are some ways (e.g. sbt-plugin, wget). I have executed following commands.\n\ninstall coursier by homebrew https://github.com/coursier/coursier/tree/v1.0.3#command-line\n\nbrew install --HEAD coursier/formulas/coursier\n\ncreate scalafix bootstrap launcher by coursier \n https://scalacenter.github.io/scalafix/docs/users/installation#coursier\n\ncoursier bootstrap ch.epfl.scala:scalafix-cli_2.12.4:0.6.0-M7 -f --main scalafix.v1.Main -o scalafix\n\nexecute ./scalafix --rules ProcedureSyntax. \n",
    "caniszczyk": ":clap: thanks!\n. @mariusaeriksen, looks like the build passes on my end:\nhttps://travis-ci.org/caniszczyk/util/builds/3843517\n. Neat. We can probably live without building on OpenJDK6 IMHO but no worries\n. @mosesn thanks, forgot about Hadoop v1, thought we were passed that \n. @fommil we always welcome contributions if you have ideas on how to make things better for you, it's fairly easy to contribute to our docs\nhttps://github.com/twitter/finagle/blob/master/CONTRIBUTING.md#documentation\n. ",
    "ryanking": "It should be published to http://maven.twttr.com/, which is publicly available.\n. ",
    "okapies": "Restored.\n. First reason is that the original Stream is not sealeded.\nhttp://www.scala-lang.org/api/current/scala/collection/immutable/Stream.html\nAnd second reason is that I was concerned the compiler issues an exhaustive warning in the below because of lack of Cons.\ncons(1, Spool.empty) match {\n  case Empty =>\n  case i *:: tail =>\n}\nBut in fact, I 'm wrong. I just tried it now and got no warnings. The exhaustive warning is issued when I write case Cons(i, tail) => only in the match.\nWhich do you think is better?\n. ",
    "dutoitns": "Are you using the version of util-eval corresponding to Scala 2.10.\nEg in  your SBT file:\nlibraryDependencies += \"com.twitter\" %% \"util-eval\" % \"[6.2.4,)\"\n(where the %% versus using % will result in a JAR file corresponding to your configured Scala version)\n. ",
    "btd": "Yes, i already solved this. In README was old version and old installation instructions (twitter repo).\n. ",
    "roanta": "Do you have an example of a config that causes this?\n. Thanks, this looks good. I've pulled it internally and it should show up here shortly.\n. Thanks Cory, I'll pull this into our internal repo and it should show up here next release.\n. Thanks! pulled internally, should show up here soon.\n. In general, I don't think it make sense for default behavior to catch java.lang.Error. However, you should be able override the monitor to handle any Throwable your application is interested in (see com.twitter.util.Monitor#set).\n. I don't think we want to assume responsibility for java.lang.Errors. Monitor gives us a nice abstraction that can be flexible for instances like this. I'm suggesting that FuturePool do the following:\ntry p.updateIfEmpty(Try(f))\ncatch Monitor.catcher\nfinally Local.restore(current)\n. I agree, I'm not sure I see a utility in satisfying the promise. I don't imagine we want future handlers to have to reason about fatal exceptions. Handing that off to the monitor makes more sense to me (where the default behavior in this case would be abort.)\n. Good catch! Do you want to move the discussion to a PR?\n. lgtm\n. lgtm, thanks for the contribution!\n. @johnynek so sorry, totally forgot to pull this in! I'm putting it up internally now.\n. @johnynek Thanks again for the patch! It's landed here: https://github.com/twitter/util/commit/1b05cf12263d27fe4c390ca5f3d69a7991b30d40\n. Thanks for the patch, this landed: https://github.com/twitter/util/commit/d69429b54b5616df9eb2e4f16dcdc4b49b34a71b. Thanks for the patch, this landed: https://github.com/twitter/util/commit/a4a6b5019cae7a3e2de29272c5d586f9bb007b37. style nit: drop the extra spaces around the imports. Alternatively, we can fully qualify these at the usage site to be explicit.\n. ",
    "cacoco": "Sure thing. There's an underlying error in the following Config definition.\n``` scala\nimport com.twitter.logging.{ConsoleHandler, Logger, LoggerFactory}\nimport io.angstrom.foo.Config\nnew Config {\n  port = 9090\n  name = \"foo\"\nloggerFactory = LoggerFactory (\n    node = \"\",\n    level = Some(Logger.INFO),\n    handlers = scala.List(ConsoleHandler())\n  )\n}\n```\n. Ping?\n. @vkostyukov we can close this -- I worked around the issue then and like you said, it's basically deprecated at this point.\n. Merged in c458b88161f56768d0226c8419424f8365574b83. Released in https://github.com/twitter/twitter-server/releases/tag/twitter-server-17.10.0.. @taylorleese I thought we were going to make the build able to be used with 2.12 but until we actually support it we weren't going to guarantee anything, thus not update .travis.yml.\n. @olix0r I tried the changed you're proposing here and that did not seem to work -- but feel free to rebase on the current code and let's try this again. The original change was reverted here: 8e7e04d70a0b55f06e0177294ba33bd0d5502b29 until we can come up with the way forward.\n. @nilday this has been merged internally and will be pushed to Github on our next sync.\n. @nilday merged in b0696d02f95ce044761700cd4747254f4bc1bcbc\n. @frgomes I've merged a change in cf7860e5c2037a496b596e1688bf5873875e3018 that hopefully addresses this issue. We'll be performing a release soon, please test it out and feel free to open a new ticket if there's still an issue. Thanks!. ",
    "carmandrew": "+1\n. ",
    "bmdhacks": "I plan to look at this in the near future.  Sorry for the lag, we've been trying to deprecate util-eval at twitter since it's a bit janky.\n. These examples look correct to me.  Duration.Top is not Duration(Long.MaxValue) but something more than that.  The reason Duration.Top.inMilliseconds +1 == Duration.Top is because it represents a number greater than we can count to in nanos.\nImagine the aboriginal tribe who can only comprehend four values: 1, 2, 3, many\nThe word, \"many\" is not a numeral, so if you said, \"what's the larges numeral?\" the answer would be 3.\nBut \"many\" is greater than 3.  3+1 = \"many\",  3+2 = \"many\", but \"many\".toNumeral == 3\nDoes that make sense?\n. Can you send us a pull request for this?\n. default is a reserved keyword in scala 2.10\n. Oh, nevermind, I got that from you.  Hahaha.\n. I talked to Ian out of band and he's too busy atm to work up a proper submission.\n. You are awesome.  We're all cheering you on.\nHeads up that your search/replace for must/should caught a lot of\ndocumentation clauses.\nOn Tue, Apr 22, 2014 at 8:02 AM, George Leontiev\nnotifications@github.comwrote:\n\nHello.\nJust letting everyone know that I've started migrating the project to\n2.11. Here's the commit: folone@088041ehttps://github.com/folone/util/commit/088041eeb114d4fdd6767b38e2e264cf44e66700.\nStatus is: sources compile, most of the tests compile (except for util-zkand one class of\nutil-core), specs/specs2 is no longer a dependency. As soon as I get all\nthe sources and tests to compile, there are failing tests that need to be\nfixed (util-logging, util-jvm, util-zk-common). Full output of sbt testso far:\nhttps://gist.github.com/folone/4b1a64f4b99a2a5f12bf (it is running in\nparallel, so the output is not extremely helpful).\nCheers.\n\nReply to this email directly or view it on GitHubhttps://github.com/twitter/util/issues/95#issuecomment-41050603\n.\n. I'm ok with WordSpec for now.\n. Awesome, I really want to get this in, I'll look at it today.\n. I'm shepherding this through our internal submit process.  Can't tell you how awesome this contribution is.\n. Util master is a bit ahead of this patch.  I've moved it forward but I'm running into trouble with com.twitter.logging.TestLogging since it uses specs as part of its API.  Technically this means that removing specs is an API breaking change.  Not sure what to do about that.\n. I'm not opposed to keeping util-eval around if somebody wants to do the work to forward-port it to the 2.11 compiler interface, but at Twitter we're trying to migrate everyone off of it in favor of other configuration mechanisms.\n. Prefer an alternate variable name then like \"underlying\"\n. Lemme look into it.  If it's an easy port we might just kick that can down the road.\n. I'm seeing problems with this syntax on older versions of scalatest and older versions of scala.  Can you change your usages of shouldEqual to assert(foo === bar) ?\n. \n",
    "ianoc": "Can you make a PR with a failing unit test? What version of scala are you using?\n. ",
    "tdyas": "Do you want me to fix the superfluous Await.ready or did you already fix it in your internal repo?\n. Understood. I'll leave it up as a separate project then!\n. ",
    "koertkuipers": "without unit tests, since i have no idea how i would go about unit tests for this...\n. do i understand it correctly that util-eval will be made available for 2.11?\nthats good news\ni would be curious to know what other configuration mechanisms are preferred over util-eval. i did not realize it had fallen out of favor. we use it extensively for runtime compilation of classes...\nthanks\n. @mosesn \ni assume you already fixed util-eval up for scala 2.11, because i got the tests for it to run just fine in with one change in Eval.scala:\nprivate lazy val libPath = try {\n-    classPathOfClass(\"scala.ScalaObject\")\n+    classPathOfClass(\"scala.AnyVal\")\n   } catch {\n     case e: Throwable =>\n       throw new RuntimeException(\"Unable to load scala base object from classpath (scala-library jar is missing?)\", e)\n. great! i was looking on the wrong branch :(\nglad to see its back. if it no longer has importance inside twitter i will\nlook around for alternatives (scala Toolbox comes to mind) but for now we\nlove this tool to run quick jobs from text files (in scalding and spark),\nand for Scala DSL config files, which we use extensively (i still like it\nway better than json or yaml).\nhappy to help out next time it needs to get migrated.\nbest, koert\nOn Thu, Feb 12, 2015 at 5:54 PM, Travis Brown notifications@github.com\nwrote:\n\n@koertkuipers https://github.com/koertkuipers Yep, see this commit\nhttps://github.com/twitter/util/commit/84b9fa50916b496f71d2fd9b0cbb34f191b8a51f\nin develop.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/twitter/util/issues/105#issuecomment-74171445.\n. @andypetrella \nwhat do you mean we lose the \"executable-jar functionality when the direct classloader has only one jar.\"\ntrying to understand the consequences....\nbest, koert\n. it must just be a mistake. i fixed that one import and had no more issues\n. \n",
    "raofu": "This is now in our internal repo and should show up here soon. I had to tweak the code a little bit since it broke the behavior when there is only one jar on the classpath (which is handled specially). Thanks again for the commit!\n. Thanks for the commit! I'll pull this to our internal repo.\n. ",
    "smishmash": "Not just README.markdown. There are no up-to-date API docs available. I'm currently trying to generate documentation for myself but so far have not been successful.\n. ",
    "chamblin": "My specific issue is that I'm trying to include the LogRecord's Thread ID in the prefix.  It is highly likely that my refactoring is foolish and that a much less disruptive solution is possible.  I'm sure many people have solved this exact problem lots of times, but searching was fruitless.  I'm extremely open to suggestions.\n. ",
    "jdanbrown": "Ok, those intentions all make sense, and it sounds like we're stuck with an observable inconsistency as a result of maintaining back compat:\n- Duration.Top.inNanoseconds == Long.MaxValue, but Duration.Top != Duration.fromNanoseconds(Long.MaxValue)\nAnd, fwiw, I was originally surprised by an inconsistent behavior between the Duration.from* methods, but it sounds reasonably within the design you guys outlined above:\n- Duration.Top is not in the image of Duration.fromNanoseconds even though it is in the image of Duration.fromMicroseconds, Duration.fromMilliseconds, etc.\n. ",
    "pequalsnp": "Can you point me to where that is described, I'm curious what it means.\n. default is reserved in java 8, and support for default methods is included in Scala 2.10.2, but that is probably a coincidence.\n. ",
    "chikei": "tested for openjdk7 on FreeBSD 10 or openjdk6 on FreeBSD 7, both don't support this\n. ",
    "indykish": "Moving to 6.10.0 fixes this problem. \n. ",
    "thefourtheye": "@mosesn Will there be no tutorial on how to use it? How does a beginner use it? Throwing scala-docs at them is exactly the same as giving nothing.\n. I have written code by going through the util-zk code. Do you have specific doc system in mind or just readme.md? I can send in a PR sometime tomorrow or the day after.\n. ",
    "plainlystated": "Yeah, but 1 line-per-log does make sense for more automated consumers of the logs. I'd suggest two changes:\n1) drop the prefix repetition when joining the list, so it looks more like:\nJan 22 19:45:01 app01.sea01.staging.abc [myserver] stats: Error occurred recording stats com.abc.app.managers.DatabaseNotFoundException: Database with key 99229cd4e78a98357107814cc60 does not exist at com.abc.app.managers.DatabaseManager$$anonfun$getByKey$1.apply(DatabaseManager.scala:48) at ....\n2) allow setting the lineterminator for syslog, for people that don't care or can handle multi-line syslog events\n. 1) Yeah, that's a good idea. If the purpose is just to separate lines (well, what would've been lines), then something short like you suggested would work.\n2) I use syslog-ng, and am currently using the normal multiline formatter (see below). This writes out multiline output to syslog in the same form as a logfile. It's similar to what I'd want (as an option) from the syslog formatter. Syslog-ng handles newlines in syslog events without a problem (even in the free version).\nMy thinking on (2) is that logs with newlines are much easier for humans to parse, but harder for computers (can be difficult to know when one event ends and the next starts). For most of my logs, I want the more human-friendly format. If I'm putting together some automated event processing pipeline, though, I want the machine-readable format (no newlines). Both forms can flow through syslog.\nMy current config:\nnew SyslogHandlerConfig {\n  formatter = new FormatterConfig {\n    useFullPackageNames = true\n    prefix = \"%s [abc-web] %s: \"\n  }\n}\n. Ah, sorry for the confusion. Yes, there are two different use cases I'm describing here, and maybe they should've been submitted as two tickets. If you think both points are valid, and you'd like me to break this into two issues, I'd be happy to.\n1) When formatting for one-line syslog, the joining string does not make sense (it's not just about being pretty). The joining string is (for example): \"<11>2014-01-22T19:45:01 app01.sea01.staging.abc [myserver] stats:\". That's not just unpretty, it's also meaningless in the case of the <lt;11>, which is an encoded priority header for syslog. The entire message should have a single <11> at its start (which it does, and gets parsed by syslog and not sent to the log file), but the rest of those markers shouldn't be there. As for joining each line with a timestamp, hostname, etc, you could say it's a prettiness issue, or you could say it's a matter of data that provides no value, and detracts from the meaning of the message.\n2) I don't feel terribly strongly about this one. I think the default is fine (join instead of allowing a newline), but I'd like to be able to override that (and put the newline back) for logs where I care more about human-readability than machine-parseability.\n. ",
    "benjumanji": "Based on this commit, this can be closed right?\n. Wow! Such a lot of feedback. Much appreciated. I will get to this over the weekend probably.\n. There is a slight wrinkle in the def ceil(increment: Duration): This = floor(increment) + increment implementation which can be handled by decrementing the value being rounded by one nano. This preserves the behaviour that rounding on an aligned boundary is a no-op. I'm not sure if I love it, but it does avoid and higher order function jiggery pokery.\n. Thanks for the feedback guys. Always a pleasure.\n. Done (I copied increment, not sure it's the best, but I didn't have anything better).\n. Done.\n. Agree about the spurious allocation. I guess taking the diff will also generate a fresh object before applying the floor (jit malarky aside). I think the if check probably ends up being more readable, because all the comment is talking about is a trick to elide it.\n. ",
    "sslavic": "16.0 is not the same as 16.0.1. The latter was requested, since it is the one including java 1.7 update 51 compatibility fix (see here)\n. ",
    "metasim": "I'll look into it. I couldn't get the pre-edit Spec tests to run successfully on my system to begin with, so more research is required on my end to figure it out. The relationship between Maven and SBT wasn't clear to me. Is there a \"contributors\" instruction page I'm missing?\n. Fantastic. Very helpful.\n. WRT the Travis CI build: I inspected the log (below) and the primary issue Error: Could not find or load main class @.etc.sbt.sbtopts doesn't strike me as having anything to do with the pull request.\n\nUsing worker: worker-linux-9-2.bb.travis-ci.org:travis-linux-17\nApplying updates\ngit.1\n$ git clone --depth=50 git://github.com/twitter/util.git twitter/util\nCloning into 'twitter/util'...\nremote: Counting objects: 1166, done.\nremote: Compressing objects: 100% (736/736), done.\nremote: Total 1166 (delta 350), reused 1020 (delta 264)\nReceiving objects: 100% (1166/1166), 401.22 KiB | 0 bytes/s, done.\nResolving deltas: 100% (350/350), done.\nChecking connectivity... done.\n$ cd twitter/util\ngit.3\n$ git fetch origin +refs/pull/90/merge: \nremote: Counting objects: 64, done.\nremote: Compressing objects: 100% (26/26), done.\nremote: Total 49 (delta 15), reused 38 (delta 5)\nUnpacking objects: 100% (49/49), done.\nFrom git://github.com/twitter/util\n * branch            refs/pull/90/merge -> FETCH_HEAD\ngit.4\n$ git checkout -qf FETCH_HEAD\n$ jdk_switcher use default\nSwitching to Oracle JDK7 (java-7-oracle), JAVA_HOME will be set to /usr/lib/jvm/java-7-oracle\nupdate-alternatives: error: no alternatives for apt.\nupdate-alternatives: error: no alternatives for apt.\n$ export JVM_OPTS=@/etc/sbt/jvmopts\n$ export SBT_OPTS=@/etc/sbt/sbtopts\n$ java -version\njava version \"1.7.0_51\"\nJava(TM) SE Runtime Environment (build 1.7.0_51-b13)\nJava HotSpot(TM) 64-Bit Server VM (build 24.51-b03, mixed mode)\n$ javac -version\njavac 1.7.0_51\nUsing Scala 2.9.2\n$ ./sbt +test\ndownloading sbt-launch.jar\nError: Could not find or load main class @.etc.sbt.sbtopts\nThe command \"./sbt +test\" exited with 1.\nDone. Your build exited with 1.\n. Is this pull request acceptable yet? Travis CI failure doesn't appear to be related to my changes.\n. Just checking to see if the pull request is still staged for pulling. Hoping to be able to switch over to the official version in my project rather than my fork.\n. No prob. Sorry to nag.\n. Thanks!\n. I used /** because the methods are protected, and therefore wanted the documentation to show up in any scaladoc as a reference. If you don't like it, could you please just remove them in the merge to save another round trip with this?\n. Sorry, thought you meant the ones above it. Yes, it being private, should be //. Are you able to change as a part of the merge?\n. ",
    "chchen": "Due to various dependency conflicts, a straightforward upgrade wasn't possible until very recently. Work is being done to resolve this pain point, but I don't expect anything to be released until late Q2 or early Q3.\n. ",
    "folone": "Hello.\nJust letting everyone know that I've started migrating the project to 2.11. Here's the commit: https://github.com/folone/util/commit/088041eeb114d4fdd6767b38e2e264cf44e66700. Status is: sources compile, most of the tests compile (except for util-zk and one class of util-core), specs/specs2 is no longer a dependency. As soon as I get all the sources and tests to compile, there are failing tests that need to be fixed (util-logging, util-jvm, util-zk-common). Full output of sbt test so far: https://gist.github.com/folone/4b1a64f4b99a2a5f12bf (it is running in parallel, so the output is not extremely helpful).\nCheers.\n. Thanks guys! Will keep you posted.\nWe're using your awesome web stack here at @SoundCloud (finagle, finatra, zipkin), and are willing to contribute back.\n. Status update: got all the tests compiling\n```\n\ncompile\n[success] Total time: 0 s, completed Apr 23, 2014 1:52:19 PM\ntest:compile\n[success] Total time: 1 s, completed Apr 23, 2014 1:52:23 PM\n``\n. I'veignore`d all the failing tests for now. Don't know if this is something that is ok enough, or not. Per suite results are:\n\n| test suite | result |\n| --- | --- |\n| util-app | succeeded 27, failed 0, canceled 0, ignored 0, pending 0 |\n| util-codec | succeeded 3, failed 0, canceled 0, ignored 0, pending 0 |\n| util-collection | succeeded 13, failed 0, canceled 0, ignored 0, pending 0 |\n| util-core | succeeded 764, failed 0, canceled 0, ignored 33, pending 0 |\n| util-eval | succeeded 0, failed 0, canceled 0, ignored 1, pending 0 |\n| util-hashing | succeeded 9, failed 0, canceled 0, ignored 0, pending 0 |\n| util-jvm | succeeded 5, failed 0, canceled 0, ignored 2, pending 0 |\n| util-logging | succeeded 49, failed 0, canceled 0, ignored 2, pending 0 |\n| util-reflect | succeeded 10, failed 0, canceled 0, ignored 0, pending 0 |\n| util-thrift | succeeded 3, failed 0, canceled 0, ignored 0, pending 0 |\n| util-zk-common | succeeded 2, failed 0, canceled 0, ignored 0, pending 0 |\n| util-zk | succeeded 19, failed 0, canceled 0, ignored 16, pending 0 |\nThe biggest problem seems to be ZkClientSpec: I don't seem to be getting the right way to stub everything there, now that there's no specs-like mockito sugar. If anyone is willing to help me out here, I'll gladly add you to my fork. Or I can as well send a PR to a topic-branch.\nUPD: util-eval seems to be not working for 2.11. Updated the table.\n. @mosesn There are a few things I'm currently facing:\n- Having problems with this kind of mocking with params capturing: https://github.com/twitter/util/blob/master/util-zk/src/test/scala/com/twitter/zk/ZkClientSpec.scala#L36-L45. The replacement I came up with here https://github.com/folone/util/blob/master/util-zk/src/test/scala/com/twitter/zk/ZkClientSpec.scala#L40-L50 does not seem to be the correct way of doing this:\norg.mockito.exceptions.misusing.UnfinishedStubbingException: Unfinished stubbing detected here:\n[info] -> at com.twitter.zk.ZkClientSpec.watchChildren(ZkClientSpec.scala:117)\n[info]\n[info] E.g. thenReturn() may be missing.\n[info] Examples of correct stubbing:\n[info]     when(mock.isOk()).thenReturn(true);\n[info]     when(mock.isOk()).thenThrow(exception);\n[info]     doThrow(exception).when(mock).someVoidMethod();\n[info] Hints:\n[info]  1. missing thenReturn()\n[info]  2. although stubbed methods may return mocks, you cannot inline mock creation (mock()) call inside a thenReturn method (see issue 53)\n[info]     at com.twitter.zk.ZkClientSpec.watchData(ZkClientSpec.scala:145)\n[info]     at com.twitter.zk.ZkClientSpec$$anonfun$2$$anonfun$apply$mcV$sp$52$$anonfun$apply$mcV$sp$56.apply$mcV$sp(ZkClientSpec.scala:557)\n[info]     at com.twitter.zk.ZkClientSpec$$anonfun$2$$anonfun$apply$mcV$sp$52$$anonfun$apply$mcV$sp$56.apply(ZkClientSpec.scala:554)\n[info]     at com.twitter.zk.ZkClientSpec$$anonfun$2$$anonfun$apply$mcV$sp$52$$anonfun$apply$mcV$sp$56.apply(ZkClientSpec.scala:554)\n[info]     at org.scalatest.Transformer$$anonfun$apply$1.apply(Transformer.scala:22)\n[info]     at org.scalatest.Transformer$$anonfun$apply$1.apply(Transformer.scala:22)\n[info]     at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)\n[info]     at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)\n[info]     at org.scalatest.Transformer.apply(Transformer.scala:22)\n[info]     at org.scalatest.Transformer.apply(Transformer.scala:20)\n[info]     ...\n- This test hangs: https://github.com/folone/util/blob/master/util-core/src/test/scala/com/twitter/util/PoolSpec.scala#L26\n- Apart from that, other tests failing seem to be just general case test failures: true was not equal to false, null was not equal com.twitter.Future, NPEs, etc. Here's the output of sbt util-core/test for example: https://gist.github.com/folone/81de76d517b45bc4fd4b. I've re-enabled all the tests (except for the hanging one) here https://github.com/folone/util/commit/65828c746c6b55a47d808c20e364adf29f8534a4. Will be looking into this.\n. @mosesn Isolating the setup via helper classes seems to work for a lot of failing test cases. Thanks!\n. Status update: all tests pass (including the previously hanging test), except for ZkClientSpec.\n. Awesome, thanks a lot!\n. Status: There are four test cases that are failing for me in util-zk:\n[info] Run completed in 1 second, 862 milliseconds.\n[info] Total number of tests run: 47\n[info] Suites: completed 5, aborted 0\n[info] Tests: succeeded 47, failed 0, canceled 0, ignored 4, pending 0\nOtherwise, should be ready for a PR.\n. I'll address the issues and will let you know when I'm done.\nConcerning the util-zk tests, it seems like they use jmock testing cycle, which I failed to reproduce in those places. Will see if JMockCycle can help there.\n. @mosesn Thanks for your comments, I've addressed them in https://github.com/folone/util/commit/674b9f750aa1e9c832250c37de92c022eaaaf871. There's one particular difference between 2.9 and 2.11 that causes code duplication in util-collection: collection wrappers have been moved from scala.collection.JavaConversions to collection.convert.Wrappers (both work in 2.10 with first being deprecated). Therefore I used this trick with scala-2.11, scala-2.10 and scala-2.9.2 directories under util-collection/src/main.\n. Will have a look, thanks for pointing out. Haven't gotten to util-zk yet.\n. Sorry for the long radio silence: had a lot on my plate recently. I've updated the code to use JavaConverters rather then JavaConversions.\n. There. The same trick with encapsulating common logic into Helper class worked. Sorry for taking so long.\n. \nAwesome, let me know if you need me to make any changes.\n. Yeah, I completely removed specs and updated TestLogging to expose scalatest API instead.\n. Looking forward to having util and finagle release for 2.11!\n\n. @mosesn So once you folks figure out util-eval issues, it'll be possible to just add 2.11 to cross-build targets, and everything would just work\u2122, right?\n. Sounds great! Thanks a lot! Do you have any kind of estimates on when to expect 2.11 version?\n. Great, thanks!\n. (\uff61\u00b4\u2200\uff40)\uff89\nThanks @mosesn @bmdhacks!\n. CLOSING NAO\n\n. @grandbora please test your change properly: we cannot afford to drop our coverage percentage by so much! :trollface: . Thanks, everyone!. Just to make sure: is it 2.9.2, or the latest in 2.9 series?\n. Looks like we don't. Will remove.\n. From the description of the bug, I've got that this is the problem with specs. Now that we're not using it, I figured this could be removed. Also, MonitorSpec seems to be working just fine.\n. I don't really know why I did this :) Will revert.\n. I think it should be there. So, we want to keep cross-compiling to 2.9? In that case, I'll need to make some changes to enable this (currently it is only cross-compiling to 2.10 and 2.11).\n. In 2.11 there seems to be an inheritance problem with it:\n[error] /Users/georgii/workspace/util/util-core/src/main/scala/com/twitter/util/Promise.scala:36: ambiguous reference to overloaded definition,\n[error] both value parent in class DetachablePromise of type com.twitter.util.Promise[_ <: A]\n[error] and  method parent in class Promise of type => com.twitter.util.Promise[A]\n[error] match expected type ?\n[error]     parent.continue(this)\n[error]     ^\n[error] /Users/georgii/workspace/util/util-core/src/main/scala/com/twitter/util/Promise.scala:38: ambiguous reference to overloaded definition,\n[error] both value parent in class DetachablePromise of type com.twitter.util.Promise[_ <: A]\n[error] and  method parent in class Promise of type => com.twitter.util.Promise[A]\n[error] match expected type ?\n[error]     def detach(): Boolean = parent.detach(this)\n[error]                             ^\n[error] two errors found\n[error] (util-core/compile:compile) Compilation failed\n[error] Total time: 15 s, completed Apr 30, 2014 11:13:53 AM\n. Right.\n. Alright.\n. Woah, missed.\n. Most probably not. Will add 2.9 to cross-compiling targets and see what works for all versions.\n. Agree.\n. Missed, will revert.\n. 2.9.2 it is.\n. I did this because all repos' tests depend on scalatest, but for util-logging it is a compile-time dependency because of TestLogging.scala.\n. Agreed.\n. How about this:\nscala\n    libraryDependencies ++= {\n      CrossVersion.partialVersion(scalaVersion.value) match {\n        case Some((2, scalaMajor)) if scalaMajor >= 11 =>\n          Seq(\n            \"org.scala-lang.modules\" %% \"scala-parser-combinators\" % \"1.0.1\"\n          )\n        case _ => Seq.empty\n      }\n    }\nUsing scalaVersion.value in ~= seems to be forbidden:\n[info] Compiling 1 Scala source to /Users/georgii/workspace/util/project/target/scala-2.10/sbt-0.13/classes...\n[error] /Users/georgii/workspace/util/project/Build.scala:33: `value` can only be used within a task or setting macro, such as :=, +=, ++=, Def.task, or Def.setting.\n[error]       dependencies ++ (CrossVersion.partialVersion(scalaVersion.value) match {\n[error]                                                                 ^\n[error] one error found\n[error] (compile:compile) Compilation failed\n. Sure, done in https://github.com/folone/util/commit/140a54527c4b0bebdc052a8c995824e159f20366\n. ",
    "MasseGuillaume": "@mosesn why did you decided to go with scalatest ? vs specs2\n. ",
    "plaflamme": "Twitter seems to have standardized to scalatest internally: https://groups.google.com/d/msg/finaglers/P5Q9u3EKXQI/vpuWGA35hZkJ\n. ",
    "jcerdeira": "Hi,\nI also need finagle compiled for scala 2.11 because I need to have case classes with more than 22 parameters.\nToday I have downloaded you project and ran all the tests what is curious is that the test in util-zk run perfectly as this excerpt shows\n```\n\nutil-zk/test\n[info] + Connector.RoundRobin should\n[info]   + require underlying connections\n[info]   + dispatch requests across underlying connectors\n[info]     + apply\n[info]     + release\nlog4j:WARN No appenders could be found for logger (org.apache.zookeeper.ZooKeeper).\nlog4j:WARN Please initialize the log4j system properly.\n[info] + ZkClient should\n[info]   + apply\n[info]   + retry\n[info]     + retry KeeperException.ConnectionLossException until completion\n[info]     + not retry on success\n[info]     + convert exceptions to Futures\n[info]     + only retry when instructed to\n[info]   + transform\n[info]     + withAcl\n[info]     + withMode\n[info]     + withRetries\n[info]     + withRetryPolicy\n[info]     + chained\n[info] + ZNode should\n[info]   + apply a relative path to a ZNode\n[info]   + create\n[info]     + with data\n[info]     + error\n[info]     + sequential\n[info]     + a child\n[info]       + with a name and data\n[info]       + error\n[info]       + sequential, with an empty name\n[info]   + delete\n[info]     + ok\n[info]     + error\n[info]   + exist\n[info]     + apply\n[info]       + ok\n[info]       + error\n[info]     + watch\n[info]     + monitor\n[info]       + that updates several times\n[info]       + handles session events properly\n[info]         + AuthFailed\n[info]         + Disconnected\n[info]         + SessionExpired\n[info]   + getChildren\n[info]     + apply\n[info]       + ok\n[info]       + error\n[info]     + watch\n[info]     + monitor\n[info]   + getData\n[info]     + apply\n[info]       + ok\n[info]       + error\n[info]     + watch\n[info]     + monitor\n[info]   + monitorTree\n[info]     + ok\n[info]     + be resilient to disconnect\n[info]     + stop on session expiration\n[info]   + set data\n[info]     + ok\n[info]     + error\n[info]   + sync\n[info]     + ok\n[info]     + error\n[info] + ZNode should\n[info]   + /\n[info]     + parentPath\n[info]     + name\n[info]   + /some/long/path/to/a/znode\n[info]     + parentPath\n[info]     + name\n[info]   + /path\n[info]     + parentPath\n[info]     + name\n[info]   + hash together\n[info] ShardCoordinatorSpec:\n[info] ShardCoordinator\n[info] ZkAsyncSemaphoreSpec:\n[info] ZkAsyncSemaphore\n[info] Passed: : Total 75, Failed 0, Errors 0, Passed 75, Skipped 0\n[success] Total time: 5 s, completed Apr 28, 2014 11:49:57 PM\n```\n\nI need to change anything to compile the code with scala 2.11 ?\nCheers,\n. ",
    "jedesah": "So does this mean we can close this issue or is something else blocking off closing the issue?\n. @mosesn What's the new ETA on this?\n. ",
    "liamstewart": "Works for me.\n. ",
    "adamdecaf": "I'm looking to get this up to 2.11. How's it coming along? Anything I can help with?\n. ",
    "joegaudet": "+1\n. ",
    "MansurAshraf": "Below is the code that is causing the problem. you can see the complete code here. If i use a future instead of a futurepool it works fine\ndef put(kv: (K, V)): Future[Unit] =\n       futurePool {\n         val (key, value) = kv\n         producer.send(new KeyedMessage[K, V](topic, key, value))\n       }\nThread dump below\njava.lang.Thread.State: TIMED_WAITING (parking)\n    at sun.misc.Unsafe.park(Native Method)\n    - parking to wait for  <7f4357c00> (a java.util.concurrent.CountDownLatch$Sync)\n    at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:196)\n    at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedNanos(AbstractQueuedSynchronizer.java:1011)\n    at java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireSharedNanos(AbstractQueuedSynchronizer.java:1303)\n    at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:253)\n    at com.twitter.util.Promise.ready(Promise.scala:405)\n    at com.twitter.util.Promise.result(Promise.scala:411)\n    at com.twitter.util.Await$.result(Awaitable.scala:75)\n    at com.twitter.util.Await$.result(Awaitable.scala:70)\n    at com.twitter.storehaus.kafka.KafkaAvroSinkSpec$$anonfun$9$$anonfun$apply$1$$anon$1.<init>(KafkaAvroSinkSpec.scala:45)\n    at com.twitter.storehaus.kafka.KafkaAvroSinkSpec$$anonfun$9$$anonfun$apply$1.apply(KafkaAvroSinkSpec.scala:34)\n    at com.twitter.storehaus.kafka.KafkaAvroSinkSpec$$anonfun$9$$anonfun$apply$1.apply(KafkaAvroSinkSpec.scala:34)\n    at org.specs2.specification.FragmentsBuilder$$anon$1.asResult(FragmentsBuilder.scala:134)\n    at org.specs2.specification.FragmentsBuilder$$anon$1.asResult(FragmentsBuilder.scala:133)\n. @stevegury I am not using Finagle at all. I am just calling Producer#send on Kafka API using a futurepool. I suspect that object.synchronized used inside Kafka API is not playing nice with futurepool. Anyways below is the complete stacktrace\n```\n014-05-19 12:33:05\nFull thread dump Java HotSpot(TM) 64-Bit Server VM (20.65-b04-462 mixed mode):\n\"Attach Listener\" daemon prio=9 tid=7ff92c9f0800 nid=0x1095d2000 waiting on condition [00000000]\n   java.lang.Thread.State: RUNNABLE\nLocked ownable synchronizers:\n    - None\n\"AWT-AppKit\" daemon prio=5 tid=7ff92c9ef800 nid=0x7fff7628e180 runnable [00000000]\n   java.lang.Thread.State: RUNNABLE\nLocked ownable synchronizers:\n    - None\n\"specs2.DefaultExecutionStrategy1\" prio=5 tid=7ff92b89d000 nid=0x10a860000 waiting on condition [10a85e000]\n   java.lang.Thread.State: TIMED_WAITING (parking)\n    at sun.misc.Unsafe.park(Native Method)\n    - parking to wait for  <7f3c7e920> (a java.util.concurrent.CountDownLatch$Sync)\n    at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:196)\n    at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedNanos(AbstractQueuedSynchronizer.java:1011)\n    at java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireSharedNanos(AbstractQueuedSynchronizer.java:1303)\n    at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:253)\n    at com.twitter.util.Promise.ready(Promise.scala:500)\n    at com.twitter.util.Promise.result(Promise.scala:506)\n    at com.twitter.util.Await$$anonfun$result$1.apply(Awaitable.scala:85)\n    at com.twitter.concurrent.LocalScheduler.blocking(Scheduler.scala:208)\n    at com.twitter.concurrent.Scheduler$.blocking(Scheduler.scala:85)\n    at com.twitter.util.Await$.result(Awaitable.scala:85)\n    at com.twitter.util.Await$.result(Awaitable.scala:79)\n    at com.twitter.storehaus.kafka.KafkaAvroSinkSpec$$anonfun$9$$anonfun$apply$1$$anon$1.(KafkaAvroSinkSpec.scala:45)\n    at com.twitter.storehaus.kafka.KafkaAvroSinkSpec$$anonfun$9$$anonfun$apply$1.apply(KafkaAvroSinkSpec.scala:34)\n    at com.twitter.storehaus.kafka.KafkaAvroSinkSpec$$anonfun$9$$anonfun$apply$1.apply(KafkaAvroSinkSpec.scala:34)\n    at org.specs2.specification.FragmentsBuilder$$anon$1.asResult(FragmentsBuilder.scala:134)\n    at org.specs2.specification.FragmentsBuilder$$anon$1.asResult(FragmentsBuilder.scala:133)\n    at org.specs2.execute.AsResult$.apply(Result.scala:236)\n    at org.specs2.specification.Example$$anonfun$apply$1.apply(Fragment.scala:141)\n    at org.specs2.specification.Example$$anonfun$apply$1.apply(Fragment.scala:141)\n    at org.specs2.specification.Example.execute(Fragment.scala:104)\n    at org.specs2.specification.FragmentExecution$$anonfun$1.apply(FragmentExecution.scala:52)\n    at org.specs2.specification.FragmentExecution$$anonfun$1.apply(FragmentExecution.scala:52)\n    at org.specs2.execute.ResultExecution$class.execute(ResultExecution.scala:22)\n    at org.specs2.execute.ResultExecution$.execute(ResultExecution.scala:90)\n    at org.specs2.specification.FragmentExecution$class.executeBody(FragmentExecution.scala:28)\n    at org.specs2.runner.NotifierRunner$$anon$2$$anon$1.executeBody(NotifierRunner.scala:14)\n    at org.specs2.specification.FragmentExecution$class.execute(FragmentExecution.scala:52)\n    at org.specs2.runner.NotifierRunner$$anon$2$$anon$1.execute(NotifierRunner.scala:14)\n    at org.specs2.specification.FragmentExecution$$anonfun$executeFragment$1$$anonfun$apply$1.apply(FragmentExecution.scala:35)\n    at org.specs2.specification.FragmentExecution$$anonfun$executeFragment$1$$anonfun$apply$1.apply(FragmentExecution.scala:35)\n    at org.specs2.control.Exceptions$class.catchAllOr(Exceptions.scala:53)\n    at org.specs2.control.Exceptions$.catchAllOr(Exceptions.scala:108)\n    at org.specs2.specification.FragmentExecution$$anonfun$executeFragment$1.apply(FragmentExecution.scala:35)\n    at org.specs2.specification.FragmentExecution$$anonfun$executeFragment$1.apply(FragmentExecution.scala:35)\n    at org.specs2.reporter.DefaultExecutionStrategy$class.executeWithBarrier$1(ExecutionStrategy.scala:102)\n    at org.specs2.reporter.DefaultExecutionStrategy$$anonfun$executeConcurrently$1$$anonfun$apply$2.apply(ExecutionStrategy.scala:104)\n    at org.specs2.reporter.DefaultExecutionStrategy$$anonfun$executeConcurrently$1$$anonfun$apply$2.apply(ExecutionStrategy.scala:104)\n    at org.specs2.internal.scalaz.concurrent.Promise$Unfulfilled$.fulfill(Promise.scala:100)\n    at org.specs2.internal.scalaz.concurrent.Promise$Done.eval(Promise.scala:127)\n    at org.specs2.internal.scalaz.concurrent.Promise$$anonfun$1.apply(Promise.scala:15)\n    at org.specs2.internal.scalaz.concurrent.Promise$$anonfun$1.apply(Promise.scala:15)\n    at org.specs2.internal.scalaz.concurrent.Actor$$anonfun$3.apply(Actor.scala:31)\n    at org.specs2.internal.scalaz.concurrent.Actor$$anonfun$3.apply(Actor.scala:25)\n    at org.specs2.internal.scalaz.concurrent.Effects$$anon$1$$anonfun$1.apply(Effect.scala:13)\n    at org.specs2.internal.scalaz.concurrent.Effects$$anon$1$$anonfun$1.apply(Effect.scala:13)\n    at org.specs2.internal.scalaz.concurrent.Effect$$anonfun$$bang$1.apply$mcV$sp(Effect.scala:8)\n    at org.specs2.internal.scalaz.concurrent.Effect$$anonfun$$bang$1.apply(Effect.scala:8)\n    at org.specs2.internal.scalaz.concurrent.Effect$$anonfun$$bang$1.apply(Effect.scala:8)\n    at org.specs2.internal.scalaz.concurrent.StrategyLow$$anon$3$$anon$4.call(Strategy.scala:35)\n    at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)\n    at java.util.concurrent.FutureTask.run(FutureTask.java:138)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)\n    at java.lang.Thread.run(Thread.java:695)\nLocked ownable synchronizers:\n    - <7f41e2118> (a java.util.concurrent.locks.ReentrantLock$NonfairSync)\n\"Low Memory Detector\" daemon prio=5 tid=7ff92b802000 nid=0x109df5000 runnable [00000000]\n   java.lang.Thread.State: RUNNABLE\nLocked ownable synchronizers:\n    - None\n\"C2 CompilerThread1\" daemon prio=9 tid=7ff92b801800 nid=0x109cf2000 waiting on condition [00000000]\n   java.lang.Thread.State: RUNNABLE\nLocked ownable synchronizers:\n    - None\n\"C2 CompilerThread0\" daemon prio=9 tid=7ff92b800800 nid=0x109bef000 waiting on condition [00000000]\n   java.lang.Thread.State: RUNNABLE\nLocked ownable synchronizers:\n    - None\n\"JDWP Command Reader\" daemon prio=5 tid=7ff92c820800 nid=0x109aec000 runnable [00000000]\n   java.lang.Thread.State: RUNNABLE\nLocked ownable synchronizers:\n    - None\n\"JDWP Event Helper Thread\" daemon prio=5 tid=7ff92f13f000 nid=0x1099e9000 runnable [00000000]\n   java.lang.Thread.State: RUNNABLE\nLocked ownable synchronizers:\n    - None\n\"JDWP Transport Listener: dt_socket\" daemon prio=5 tid=7ff92f13e000 nid=0x1098e6000 runnable [00000000]\n   java.lang.Thread.State: RUNNABLE\nLocked ownable synchronizers:\n    - None\n\"Signal Dispatcher\" daemon prio=9 tid=7ff92c81c800 nid=0x1097dd000 runnable [00000000]\n   java.lang.Thread.State: RUNNABLE\nLocked ownable synchronizers:\n    - None\n\"Surrogate Locker Thread (Concurrent GC)\" daemon prio=5 tid=7ff92c81b800 nid=0x1096da000 waiting on condition [00000000]\n   java.lang.Thread.State: RUNNABLE\nLocked ownable synchronizers:\n    - None\n\"Finalizer\" daemon prio=8 tid=7ff92f13d800 nid=0x1094cf000 in Object.wait() [1094ce000]\n   java.lang.Thread.State: WAITING (on object monitor)\n    at java.lang.Object.wait(Native Method)\n    - waiting on <7f40cae18> (a java.lang.ref.ReferenceQueue$Lock)\n    at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:118)\n    - locked <7f40cae18> (a java.lang.ref.ReferenceQueue$Lock)\n    at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:134)\n    at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:171)\nLocked ownable synchronizers:\n    - None\n\"Reference Handler\" daemon prio=10 tid=7ff92f13c800 nid=0x1093cc000 in Object.wait() [1093cb000]\n   java.lang.Thread.State: WAITING (on object monitor)\n    at java.lang.Object.wait(Native Method)\n    - waiting on <7f40a0608> (a java.lang.ref.Reference$Lock)\n    at java.lang.Object.wait(Object.java:485)\n    at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:116)\n    - locked <7f40a0608> (a java.lang.ref.Reference$Lock)\nLocked ownable synchronizers:\n    - None\n\"main\" prio=5 tid=7ff92e800800 nid=0x101520000 waiting on condition [10151d000]\n   java.lang.Thread.State: WAITING (parking)\n    at sun.misc.Unsafe.park(Native Method)\n    - parking to wait for  <7f40dfcc8> (a java.util.concurrent.CountDownLatch$Sync)\n    at java.util.concurrent.locks.LockSupport.park(LockSupport.java:156)\n    at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:811)\n    at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:969)\n    at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1281)\n    at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:207)\n    at org.specs2.internal.scalaz.concurrent.Promise.get(Promise.scala:18)\n    at org.specs2.specification.PromisedExecutingFragment.get(ExecutedFragment.scala:147)\n    at org.specs2.specification.ExecutingSpecification$$anonfun$foreach$1.apply(ExecutingSpecification.scala:23)\n    at org.specs2.specification.ExecutingSpecification$$anonfun$foreach$1.apply(ExecutingSpecification.scala:23)\n    at scala.collection.Iterator$$anon$19.next(Iterator.scala:401)\n    at scala.collection.Iterator$$anon$19.next(Iterator.scala:401)\n    at scala.collection.Iterator$class.foreach(Iterator.scala:772)\n    at scala.collection.Iterator$$anon$19.foreach(Iterator.scala:399)\n    at scala.collection.IterableViewLike$Transformed$class.foreach(IterableViewLike.scala:41)\n    at scala.collection.SeqViewLike$$anon$3.foreach(SeqViewLike.scala:77)\n    at scala.collection.TraversableOnce$class.foldLeft(TraversableOnce.scala:143)\n    at scala.collection.SeqViewLike$$anon$3.foldLeft(SeqViewLike.scala:77)\n    at org.specs2.internal.scalaz.FoldableLow$$anon$7.foldLeft(Foldable.scala:45)\n    at org.specs2.internal.scalaz.FoldableLow$$anon$7.foldLeft(Foldable.scala:42)\n    at org.specs2.internal.scalaz.MA$class.foldl(MA.scala:101)\n    at org.specs2.internal.scalaz.MAsLow$$anon$1.foldl(MA.scala:321)\n    at org.specs2.internal.scalaz.Generator$$anon$2.reduce(Generator.scala:20)\n    at org.specs2.collection.Iterablex$ExtendedIterable.reduceWith(Iterablex.scala:107)\n    at org.specs2.reporter.DefaultStoring$class.org$specs2$reporter$DefaultStoring$$statisticsTotals(Storing.scala:36)\n    at org.specs2.reporter.DefaultStoring$$anonfun$store$1$$anonfun$1.apply(Storing.scala:30)\n    at org.specs2.reporter.DefaultStoring$$anonfun$store$1$$anonfun$1.apply(Storing.scala:30)\n    at org.specs2.internal.scalaz.Identity$$anon$1.value(Identity.scala:170)\n    at org.specs2.internal.scalaz.Identity$class.$bar$greater(Identity.scala:58)\n    at org.specs2.internal.scalaz.Identity$$anon$1.$bar$greater(Identity.scala:169)\n    at org.specs2.reporter.DefaultStoring$$anonfun$store$1.apply(Storing.scala:30)\n    at org.specs2.reporter.DefaultStoring$$anonfun$store$1.apply(Storing.scala:27)\n    at org.specs2.internal.scalaz.Identity$class.$bar$greater(Identity.scala:58)\n    at org.specs2.internal.scalaz.Identity$$anon$1.$bar$greater(Identity.scala:169)\n    at org.specs2.reporter.Reporter$$anonfun$report$1.apply(Reporter.scala:44)\n    at org.specs2.reporter.Reporter$$anonfun$report$1.apply(Reporter.scala:44)\n    at org.specs2.internal.scalaz.Identity$$anon$1.value(Identity.scala:170)\n    at org.specs2.internal.scalaz.Identity$class.$bar$greater(Identity.scala:58)\n    at org.specs2.internal.scalaz.Identity$$anon$1.$bar$greater(Identity.scala:169)\n    at org.specs2.reporter.Reporter$class.report(Reporter.scala:44)\n    at org.specs2.runner.NotifierRunner$$anon$2$$anon$1.report(NotifierRunner.scala:14)\n    at org.specs2.runner.ClassRunner$$anonfun$apply$1$$anonfun$apply$2.apply(ClassRunner.scala:58)\n    at org.specs2.runner.ClassRunner$$anonfun$apply$1$$anonfun$apply$2.apply(ClassRunner.scala:58)\n    at org.specs2.control.Exceptions$class.tryo(Exceptions.scala:31)\n    at org.specs2.control.Exceptions$.tryo(Exceptions.scala:108)\n    at org.specs2.runner.ClassRunner$$anonfun$apply$1.apply(ClassRunner.scala:58)\n    at org.specs2.runner.ClassRunner$$anonfun$apply$1.apply(ClassRunner.scala:57)\n    at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:239)\n    at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:239)\n    at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:34)\n    at scala.collection.mutable.WrappedArray.foreach(WrappedArray.scala:33)\n    at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:239)\n    at scala.collection.mutable.WrappedArray.flatMap(WrappedArray.scala:33)\n    at org.specs2.runner.ClassRunner.apply(ClassRunner.scala:57)\n    at org.specs2.runner.ClassRunner.start(ClassRunner.scala:35)\n    at org.specs2.runner.NotifierRunner.start(NotifierRunner.scala:25)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:597)\n    at org.jetbrains.plugins.scala.testingSupport.specs2.JavaSpecs2Runner.runSingleTest(JavaSpecs2Runner.java:99)\n    at org.jetbrains.plugins.scala.testingSupport.specs2.JavaSpecs2Runner.main(JavaSpecs2Runner.java:76)\nLocked ownable synchronizers:\n    - None\n\"VM Thread\" prio=9 tid=7ff92f138000 nid=0x1092c9000 runnable\n\"Gang worker#0 (Parallel GC Threads)\" prio=9 tid=7ff92f000000 nid=0x10495f000 runnable\n\"Gang worker#1 (Parallel GC Threads)\" prio=9 tid=7ff92f001000 nid=0x104a62000 runnable\n\"Gang worker#2 (Parallel GC Threads)\" prio=9 tid=7ff92f001800 nid=0x104b65000 runnable\n\"Gang worker#3 (Parallel GC Threads)\" prio=9 tid=7ff92f002000 nid=0x104c68000 runnable\n\"Gang worker#4 (Parallel GC Threads)\" prio=9 tid=7ff92f002800 nid=0x104d6b000 runnable\n\"Gang worker#5 (Parallel GC Threads)\" prio=9 tid=7ff92f003800 nid=0x104e6e000 runnable\n\"Gang worker#6 (Parallel GC Threads)\" prio=9 tid=7ff92f004000 nid=0x104f71000 runnable\n\"Gang worker#7 (Parallel GC Threads)\" prio=9 tid=7ff92f004800 nid=0x105074000 runnable\n\"Concurrent Mark-Sweep GC Thread\" prio=9 tid=7ff92f0e2000 nid=0x108f40000 runnable\n\"Gang worker#0 (Parallel CMS Threads)\" prio=9 tid=7ff92f0e0800 nid=0x10853a000 runnable\n\"Gang worker#1 (Parallel CMS Threads)\" prio=9 tid=7ff92f0e1800 nid=0x10863d000 runnable\n\"VM Periodic Task Thread\" prio=10 tid=7ff92b803000 nid=0x109ef8000 waiting on condition\n\"Exception Catcher Thread\" prio=10 tid=7ff92e801800 nid=0x101788000 runnable\nJNI global references: 11216\n```\n. ",
    "jedws": "here is our initial workaround:\n```\nimport com.twitter.util.Closable\nimport java.util.logging.{Level, Logger}\n/*\n * Kill the Twitter Closeable CollectClosables thread.\n * \n * If you want to be really sure you kill the CollectClosables thread, run a System.gc() after calling killTwitterClosableThread()\n /\nobject KillTwitterCloseableThread {\n  private class KillCollectClosables extends scala.util.control.ControlThrowable {\n    override def toString: String = \"Expected exception thrown as a workaround to kill off rogue cleanup thread from com.util.twitter.Closable\"\n  }\ndef shoot(): Unit =\n    shootFor(new Object {})\ndef shootFor(ref: Object): Unit = {\n    Closable.closeOnCollect(\n      Closable.make { t =>\n        // Turn off logging for the \"\" logger that com.util.twitter.Closable uses\n        Logger.getLogger(\"\").setLevel(Level.OFF)\n        throw new KillCollectClosables\n      },\n      ref\n    )\n  }\n}\n```\n. Well, I'd like to explore the requirement space a little first.\nIt seems to me that having a public shutdown without equivalent restart opens all sorts of possibilities for mischief. What happens if subsequently things are added to this queue? Can we assume that the object will be collected and close on the object's finalisation? What about if there are things already on the queue? What about dealing with incorrect interrupt handling?\nDealing with lifecycles \u2013 particularly global state lifecycle \u2013 is always complicated, especially if it involves ClassLoaders and GC. Note the similar and never-ending https://code.google.com/p/guava-libraries/issues/detail?id=92\n. @mosesn It is not a problem for us as we stopped using it, partly due to this bug.\n. ",
    "gianm": "Fwiw I'm not really sure what a better behavior would be. In my case, propagating the exception through the promise would have been better, since then my code that responds to it would have realized something went wrong and aborted the program.\n. I'd be happy enough with just being able to use a monitor to abort the program (usually what I want when OOMEs start getting thrown about).\n. I have to admit that I don't totally understand the mechanism you have in mind for resolving promises that are born in fire. In production I pretty much always want to abort the program when anything super-bad happens in any thread, so I would be happy with anything that allows that to happen-- whether it involves resolving the promise or not.\nI can imagine a more general solution being interesting to someone but it is not currently interesting to me :)\n. ",
    "sirmax": "\nHow did you find this bug?\n\nWell, I tried to use (abuse?) the Event :) Here's what I was doing:\nI have an external system that produces some data D for an argument A, it is accessed via\ndef fetch(a: A): Future[D]\nThe data in that system changes periodically (e.g. once a day). There is a number of data consumers in my system, who need to query current data and subscribe for its updates. I'm using a Var for this purpose.\n```\ndef observable(a: A): Var[D] = Memoize { a: A => Var.async(initial)(observe(a)) }\ndef observe(a: A)(upd: Updatable[D]): Closable = {\n  def delay(d: Duration) = Future.sleep(delay)\ndef loop(d: Duration): Future[] = \n     delay(d) before fetch(a)\n      .onSuccess(d => upd.update(d))\n      .flatMap( => loop(nextDelay))\n      // Error and cancellation handling omitted for brevity.\nval running = loop(Duration.Bottom)\n  Closable make { _ => running.raise(Cancel); Future.Done } \n}\n```\nNow, for a number of reasons, I want to let an external hook (e.g. via JMX) to interrupt all the sleeping loops and force next fetch. This is where I put Event in use.\n```\nval fetchNow = EventUnit\n...\n  def delay(d: Duration) = \n    Future.select(Seq(Future.sleep(delay), fetchNow.toFuture())\n      .onSuccess(._2.foreach(.raise(Cancel)))\n      .flatMap(x => Future.const(x._1))\n// Elsewhere\nfetchNow.notify(())\n```\nI was playing in the JMX client, mashing the \"force fetch\" button, when I noticed that a number of requests went down. I went digging through the code and eventually found the root cause. That's the story.\n\nSince I've shared the details, I'd like to ask some questions:\n- Is it Ok to use Var and Event for this case?\n- Are there any idiomatic alternatives for this?\n- Any comments or helpful suggestions? :)\n. re Spool and interrupts:\nI'm not sure I follow. Do you suggest using Spool instead of data Vars, or instead of fetchNow Event?\n. Hmm\u2026 I definitely can represent a sequence of fetches (each possibly delayed) as a Spool rather than a Var. However\n1. Using an interrupt with \"stop the wait and do the task right now\" semantics seems wrong to me.\n2. Since I need to interrupt only currently delayed tasks and then continue normally, suggested \"recursive\" interrupt won't fit.\n3. Var.async is really useful in maintaining active subscriptions. Is there a similar thing that can be used with Spools? If not, perhaps there is an opportunity for API improvement and another pull request :)\n. re \"3\":\nVar.async maintains a list of active observers, exposing only two events to the client code: 1) the first observer added, and 2) the last observer removed. It makes it easy to implement observable entities that do some work only when there is at least one observer.\nIf I want to have a similar behaviour for Spools, I have to manage subscribers and other stuff myself. It's not a big problem, but having a help from a library is really great.\n. Sure you don't :)\nI was rather thinking about abstracting some part of Var.async that would maintain 0..N somethings and expose the same lifecycle events to a client code.\n. @vkostyukov sure! I'm closing it now.\n. Guys, should I squash the commits and copy the PR description (with minor changes) or are you doing this internally?\n. Hello again! I've noticed this PR didn't make it into recently released 6.18.0. Should I change something in it, or it is already OK and will get merged eventually?\n. ",
    "kimballa": "I don't think the build fail is based on a change in the readme ;)\nThe actual failure is here:\nUsing Scala 2.9.2\n$ ./sbt +test\ndownloading sbt-launch.jar\nError: Could not find or load main class @.etc.sbt.sbtopts\nThe command \"./sbt +test\" exited with 1.\nIt seems like the launcher download may be misconfigured? Not sure how to help\n- Aaron\n. I've learned not to be too curious about continuous integration systems :) I honestly wouldn't know where to start on that one.\n. ",
    "richardclose": "Ah, OK. I have a use-case for eval, but I can fork it if eval won't be part of twitter util going forward. Feel free to close this issue, or let me know if I should do it.\n. ",
    "mquinson": "Do you guys have a test for the case where invalid code is compiled? I've an error on my project that is inspired from util-eval and even if I think that the error is mine, I wanted to check...\nHere is the error that I get: https://github.com/oster/PLM/issues/421\n. ",
    "mirokuratczyk": "This was resolved and should be closed: b3fe8f767ec5e5e2038e838d65c24f3ae78616cb \ud83d\ude04 \n. ",
    "evanj": "Oh yeah me too. I think I filed this before I knew how anything worked at Twitter. Thanks!\n. ",
    "andypetrella": "@mosesn indeed, why not. Actually, I stopped using it when you said that it'll be discontinued :-D\n@koertkuipers shame I just CANNOT remember what I had in mind/figured out -- it's been awhile since then, I probably wiped out my brain...\nI guess that giving it another try will be necessary.\nI'll try to find some time to process the comments if you'd like to. Just tell me ;-).\ncheers,\nandy\n. ",
    "iceberg901": "@mosesn Yes I do, I'll start working on addressing your comments.\n. @mosesn No, I don't think we want to return BatchExecutor.  Returning a wrapper of some kind gives us the luxury of providing a clean, simple interface not clouded by scary implementation details.  I assume that's why the original implementer(s) didn't return BatchExecutor in the first place.  However, I think the current interface doesn't provide enough functionality, so I think the right answer is to return Batcher and to keep augmenting it if ever we want to expose additional functionality.\n. Ok, I've addressed all your comments except the one about not returning a new type from Future.batched.  Please let me know how you want to proceed there.  And give me feedback on the tests please.  Finally, all of my tests are green but there seems to be some problems with your test setup in general - red tests, exceptions getting thrown, etc.  Should I worry about this or does it all get taken care of when you integrate?\n. Ok, I think I took care of everything.  Let me know if anything was missed.  What happens next?\nDo you need me to squash the commits?  Use some specific style for the commit message?  Anything else?  Let me know.\n. Thanks!  Nice combing through the details with you :)\n. Please let me know if you want me to make the change on Batcher above.  I take it I don't need to squash the commits?  Anything else I need to do?\n. Sure, would you put it under New Features or API Changes?  Or do I describe the flushBatch method under New Features and note the change of return type of Future.batched under API Changes?\n. @mosesn Changelog updated, what else?\n. Great thanks!  For future reference, should I open PRs against the develop branch?\n. Awesome, thanks!  Do you have a general timetable for your next release?\n. So how do you want to proceed here?  I don't have any insight into how often you can or want to do major releases.  I'm happy to add another endpoint if that helps this get through faster, as I believe manual flushing is a critical feature.  But overall I think returning a more full-featured object is the way to go in the end.  In other words, the ultimate destination for this should be a single endpoint that returns a Batcher.\n. Done\n. Added\n. Good idea.  Done.\n. Done\n. I wrote some more tests to verify these scenarios and make sure that regular execution, manual flushes, and timed flushes don't interfere with each other.  Please let me know if you think the test coverage is sufficient.\n. So passing the BatchExecutor as a constructor parameter was your idea to reduce the clutter of having to pass all of the BatchExecutor's constructor params through two consecutive constructor methods.  And no one's creating Batchers directly, they're getting them from Future.batched.\nSo I guess I'm wondering what you think now: should we back off having the BatchExecutor as a parameter to the Batcher constructor, or should we just make the constructor private[util] and leave it at that?\n. Future.scala has TODO: inside of scaladoc for its methods all over the place.  Maybe we should leave this this way for consistency?  If not, where in the file would you like to see it?  And formatted like this?:\nscala\n// TODO: Possible future improvements:\n// - Rather than having separate sizeThreshold and sizePercentile parameters,\n//   just have a single call-by-name sizeThreshold parameter, and let the\n//   caller implement whatever logic they want to compute the next batch size.\n// - Add more functionality to class Batcher. Could support things like querying the queue size,\n//   attaching callbacks to flush operations, etc.\n. OK thanks will do.  Scala syntax often has me confused about where the physical delineation is in the code between the class and its constructor :)\n. Done - comment look good to you?\n. Also, you are speaking to me in regex here I guess?  You want me to fully qualify all my references to com.twitter.util.Future?  Or just the one on this line?  And only in comments or in comments and code?\n. I don't have a strong feeling about this.  I think the reason I went with Function1 was that I was having trouble getting it to compile the other way.  I've since found that I can get it to work only with parens:\nscala\n) extends (In => Future[Out]) { batcher =>\n@mosesn @vkostyukov please let me know if you want me to make this change\n. done\n. Done\n. Ok two votes for In => Future[Out], so I changed it.\n. - I did not implement the BatchExecutor, but I make no assumptions about order of execution of the individual requests within a batch.  Since there is a one-to-one correlation between the requests I submit and the Futures returned, I as a client can at least decide what order I want to process the results in, regardless of what order they complete.\n- As far as why I synchronize, the inline documentation for BatchExecutor tells me I must do so when calling .flushBatch() (BatchExecutor.scala line 107).\n- Finally, how do we prevent other callers from using the executor incorrectly: by making BatchExecutor private[util] (this was done already by whoever implemented BatchExecutor) and only providing access to it through the Batcher interface (which is what I am adding).\nIf there is some part of what I've just explained here that you would like me to document in the code, please let me know.\n. Here's how I decided to address this:\nI moved the synchronization inside a new method in the BatchExecutor called .flushNow().  So, Batcher.flushBatch() just calls BatchExecutor.flushNow()\nThis is good IMO because:\n- A person new to the code will find all synchronization logic inside of one file, BatchExecutor.scala, and they will easily be able to see that all calls to BatchExecutor.flushBatch are wrapped in synchronize blocks.\n- If that person still doesn't understand what's going on, the comments explaining that synchronization is required are in the same file, not a a different file.\n- Batcher.scala stays simple\nDoes this address your concerns?\n. ",
    "dschobel": "this LGTM\n. People have asked for some variant of this on internal finaglers a few times in recent memory so +1 to introducing it.\nI think we can generalize to end up with what's known as the traverse function in other languages:\nscala\ndef traverse[A,B](as: Seq[A])(f: A => Future[B]): Future[Seq[B]]\nthen this function becomes\nscala\ndef sequenceEffects[A](fs: Seq[() => Future[A]]): Future[Seq[A]] = traverse(fs)(_())\n. @Chandler I think it's fundamentally useful so I'm +1.\nAs for confusing people, I think the intuition for non-experts with Seq[A]'s that they want to turn into Future[Seq[B]] would be to #map and then look for a method with #collect's signature (but I might just be rationalizing things :) ).\n. Given that the problem is defined in Futures and the simplicity of the Future native implementation I don't see the benefit of bringing in an additional abstraction.\n. this is really nice, thank you. one question but otherwise lgtm!\n. lgtm, thanks!\n. lgtm, thanks!\n. lgtm\n. thanks for the headsup @SethTisue , looks like it was https://github.com/twitter/util/commit/56569b9f4226b65b32d4e3f0079515b6d5542816\nwe'll get it fixed up.. https://github.com/twitter/util/commit/7ab48ec47ae292b88fec4cb9ce67f38c6a27ec59 looks like it did the trick https://travis-ci.org/twitter/util/builds/421670890\nthanks again for the report.. can you move the first verify (ln 334) above the flushBatch call? that would make the behavior clearer because as-is it looks like neither batch is dispatched until flushing.\n. nit: please swap the parens for curlies in map's closure M(fa.map(a => if (p(a)) this else empty))\n. same\n. ditto\n. why not use #fromSeq in AsyncStream's companion object?\n. makes sense, mind adding a code comment saying as much?\n. let's use Future.value since Vector.empty won't throw outside of pathological cases were our vm is already doomed.\n. backticks on f here and below please.\n. I think the best we can do is stash a singleton Future.value(Vector.empty) in the companion\n. I'm not convinced that the shaved allocation is worth any extra lines of code so I'm still happy with the inline Vector.empty, but your call. If you go the shaving route, we should be able to drop the cast by adding the type param to the foldleft though.\n. please add a note that access needs to be mediated via the intrinsic lock. we need to hang a timeout on closing to make sure closable always sees a close. \nclosing.by(shutdownTimer, closeDeadline).transform {  _ => closable.close(closeDeadline) }\ngood test case too :). s/Note// please. ",
    "eirslett": "Yes, it works in a forwards-compatible manner. You can use the code from Java 7, but it will be more noisy.\nIf this code compiles on a jdk 7, you should be fairly sure it generates java-7-compatible bytecode! :-)\n. Lambdas only work with interfaces. Since c.t.u.Function is an abstract class, you cannot use it as a lambda.\n. @stevegury I'm not sure why it doesn't compile... looks like it succeeds on some builds, and sbt fails to start on others?\n. Closing/reopening to trigger a new Travs build.\n. Would this be beneficial to other Scala projects as well? If then, maybe it could be even better to put it in a \"mockito-scala\" library?\n. Yes, you're right about that. The easy solution might be just to suggest people use twitter-util if they want the enhanced Mockito features.\n. @FunctionalInterface is just a marker annotation, intended to inform the reader that the intention of the interface is to act as a SAM. With the Java 8 compiler, it also does some compile-time checks to ensure you can use the interface as a SAM (it should have only one non-default method).\nFor the lambda functionality itself, it has no consequences, since lambda annotations also work with non-annotated interfaces. It's only there to communicate intent.\nI've commented it out since the annotation itself only exists in the Java 8 library (so that twitter-util is compatible with Java 7)\n. I think that's how they already work - they are compiled but not run. I commented out the Java 8 part since the code needs to be able to be compiled with JDK 7. (But if you un-outcomment it, then it should compile.) I was asking on stackoverflow if you can configure sbt to only compile java 8 files if running with jdk 8, so you can set up a Travis CI cross-build - until then, we cannot have actual lambda expressions here (unfortunately).\n. Ok, I fixed it!\n. Do you mean like \"exFunc\" and \"exCons\"? We could certainly do that. It conforms to the java/scala naming conventions. My only concern is that the camel casing itself might (possibly) look a (tiny) bit noisier than the plain lowercased versions:\njava\nFuture.value(3)\n  .flatMap(exfunc(i -> ...))\n  .map(exfunc(i -> ...)\n  .onSuccess(excons(...));\nor\njava\nFuture.value(3)\n  .flatMap(exFunc(i -> ...))\n  .map(exFunc(i -> ...))\n  .onSuccess(exCons(..));\nThe intention is to let the lambda contents shine and hide all the noise, so to speak. With that argument, they could be shortened further:\njava\nFuture.value(3)\n  .flatMap(xf(i -> ...))\n  .map(xf(i -> ...))\n  .onSuccess(xc(..));\nwith \"f\", \"c\", \"xf\" and \"xc\", but then again, that would probably make the code less understandable if you don't know the conventions.\nDo you still want me to camelCase to exFunc and exCons?\n. Ok, I defined these methods:\nexceptionalFunction / xf\nfunction / f\nexceptionalConsumer / xc\nconsumer / c\nSo, just \"f\" and \"c\".\n. ",
    "anshumans": "I was taking a look at that.  Are there examples of how to use them?  Should I be wrapping the Monitor around the body of my FuturePool block?\n. Also, it seems that by throwing an exception in my monitor will only cause the RootMonitor to handle it instead rather than crash the process.\n. Yeah, that was going to be a last resort.  Generally calling System.exit is bad form :)  That's why I wanted to see if there's a better way of gracefuly shutting down my finagle server, but it doesn't seem like there is.\n. I just wanted to check if there was anything I had to do specifically with the FuturePool to shut it down.  When shutdown my finagle thrift server, there were still a bunch of FuturePool.unbounded threads still sitting around, which was preventing the process from exiting.\n. Sorry, I should've been more clear - you're right, my issue with shutting down my Finagle server not shutting down the process is a separate problem.  My original question was really about what the right way was to crash the process if an exception got fired within a FuturePool, and it sounds like the best way is to call System.exit either in a Monitor or in the onFailure callback.\n. Awesome, thanks for all your help!\n. ",
    "zacharyvoase": "BTW I ran all the tests with ./sbt test and they passed.\n. The test that failed doesn't look related to this PR, but I'm running ./sbt +test (with the +) now.\n. I get a failure in com.twitter.jvm.ContentionTest saying:\nThe code passed to eventually never returned normally. Attempted 1 times over 3.0963380000000003 seconds. Last failure message: 1 did not equal 2. (ContentionTest.scala:48)\nProbably unrelated, right?\n. Oh, they passed when I ran it a second time.\n. I pushed the version supporting arities up to 21, and I have a really janky Python script that generates the Scala but it's not going to fit in the comments\u2026\n. In the top level of util? I'd be down\n. OK so I actually just built out a Make + Python based codegen system for the entire repo, it's all contained in codegen and hopefully it's useful although it means the scope of this PR just grew massively.\n. If we ever wanna extend this to 22-ary functions (for example) I'd just write a Python script which generated all of the capturing and zipping functions :-)\n. Or maybe macros would work? Not sure what constraints we have on stuff like that though.\n. I wrote these by hand\u2026haha\n. I could totally write a script though. Where would that live?\n. I wrote a script in Python to generate up to arities of 21, and everything works, but I'm not sure if it's small enough to put in the comments. I'll give it a go.\n. I was going with the same vibe as Ruby's returning; it runs the block it's given and returns some output based on the block. In English I parse the code as 'capturing one [argument call], verify that obj.someMethod was called'\n. ",
    "fommil": "it's a transitive dep and if you're using it internally, I need to deal with that\n. finagle and the whole twitter universe is using this logging API which means anyone using anything released by twitter needs to specially configure your logging API to go to SLF4J. I'm suggesting that you make this easy for people by providing some advice to do this. Reading your docs further, it looks like you're just using JUL, so I suggest you make that even clearer. The whole enterprise world uses SLF4J/logback. It beggars belief that twitter have made yet another API to cause us all a nightmare when debugging production issues.\n. @vkostyukov yes, absolutely\n@caniszczyk if you insist on writing yet another logging framework then writing documentation is definitely a cost that you should be made to pay yourself, :stuck_out_tongue: (along with being made to eat soap and write out 1000 times \"I will not create another logging framework for the JVM\").\n. @mariusae :+1:\n. ",
    "dvryaboy": "a pull request to replace util-logging with SLF4J would be a pretty constructive way to offer criticism \n. ",
    "devshorts": "@mariusae since util-logging is being deprecated, is there any suggestion to leverage the logging toggles found in twitter-server to route to slf4j?  Frameworks like finatra are pushing logback+slf4j (which is great) but the integration into the twitter server stack is weird. @vkostyukov haha yeah, this one was ungoogleable, I tried too :).   Glad to see you're making progress, I was trying to get maven based java sample to replicate it too and having kind of a hard time. ",
    "taylorleese": "@devshorts We're actually working internally on a proposal to move Twitter Server to SLF4J so that's our current tentative plan. @cacoco is working on this so mentioning him here in case he wants to expand on what I've mentioned.. @mosesn @luciferous Close this? Looks like the change is in already. https://github.com/twitter/util/commit/b169af7442188c8d6899eb294284bfbaea105564\n. @mosesn I'd prefer to ship this with @dschobel's suggestion of traverse/sequenceEffects. Calling this sequence would be confusing to me and likely others if they are familiar with what sequence means in the scala standard library.\n. :+1: \n. @mosesn @cacoco Looks like we need to update the .travis.yml to include 2.12 as well?\n. @cacoco That's fine. Let's be consistent with what we do in Ostrich as well though. We suggested updating the .travis.yml there. https://github.com/twitter/ostrich/pull/77\n. @cacoco ran into this today as well\n. Related to https://github.com/twitter/util/pull/163.\n. I'm not a fan of calling this sequence because sequence is typically understood to transform an M[Future[A]] to a Future[M[A]]. For example, see Future.sequence in the Scala standard lib. http://www.scala-lang.org/api/current/index.html#scala.concurrent.Future$\n. sequentally => sequentially\n. traverseSequentally => traverseSequentially\n. Please add return a type : Unit =.\n. Please add return a type : Unit =.\n. style: (1 to 5).foreach { testRun =>\n. style: files.foreach { f: File =>\n. style: for (a <- 1 to 10000) {\n. style: if (len > fileSizeInMegaBytes.megabytes) {\n. It's a bit awkward this is setting bytesWrittenToFile outside an immediate synchronized block which seems like it would be safer. It does appear it's wrapped in a synchronized block by callers though.\n. Yep, I understand both of those points and I still think it's awkward. I'll drop this if nobody else has concerns though.\n. style: (1 to 5) foreach => (1 to 5).foreach\n. Is this comparing bytes to megabytes?\n. Ah, didn't realize this was comparing StorageUnit types at first glance. Thx.\n. ",
    "chester89": "So it will be possible to run finagle services on Android phone? :+1: \n. ",
    "mikepii": "@mosesn, thanks for the detailed feedback. I've started incorporating some of it:\n- got rid of PrivateMethodTester and expanded the private scope of numPermitsOf\n- replaced Future.apply with Future.value\n- added the comment to explain what we're doing with the NoNodeException\n- some style things (I haven't had a chance to read those style guides thoroughly yet but I found a couple of the issues so far)\n- I will re-format the commit message at the end\nI also found an issue in the regression test I added and corrected that.\nIn response to your concern about the other test -- it does fail if NoNode is raised when reading the permit, which is where the issue was (i.e. it fails if you checkout master ZkAsyncSemaphore.scala). Would you prefer that we test this higher in the trace at either getConsensusNumPermits or acquire? I changed the paths of the nodes to make it more clear what it's testing.\nI need some more time to consider what you said about removing failed nodes from the list of permits before grabbing sequence numbers.\nI'm making new changes on fix/shard-race. My plan is to reset this PR branch and then squash those commits to replace the single PR commit. Is that alright? Will we lose your line comments above on the PR because of the reset?\n. @mosesn, thanks, but I can handle it. Sorry this is taking so long, I haven't been able to find any free time to work on it. Hopefully this week.\n. Sorry this branch is getting stale, just rebased it. Actually, it's not clear to me how to test this at the acquire level, since the situation we are trying to reproduce happens when a node is deleted while acquire is running (after listing all nodes but before checking the deleted node).\n. ",
    "drob": "I was thinking about a pathological case in which N workers starting at once would cause a lot of unnecessary node creation attempts, but on second thought this would require very unlucky timing, and the failure mode wouldn't even be that bad assuming N on the order of 1000.\n. ",
    "rightfold": "I haven't done any Scala programming in a while, but I do have some ideas about the possible implementations:\n1. Broker[T] could be a subtype of both BrokerReceiver[T] and BrokerSender[T], so an upcast would do the conversion.\n2. Broker[T] is unchanged, and new types BrokerReceiver[T] and BrokerSender[T] take a Broker[T] as a constructor argument, so the client has to convert explicitly.\nI don't know whether one of the two approaches is inherently better than the other one, or whether the former would be a breaking change; I'd have to experiment.\n. ",
    "k4y3ff": "@travisbrown Ah, alright!\nOne day, I will be able to use this library. :sparkles: One day...! :sparkles: \n. ",
    "StarWindMoonCloud": "Thank you for the quick response, question answered, and will try finaglers next time.\n. ",
    "bbarker": "Aha, thanks! Just FYI, I did find one dependency that wasn't available on Maven Central: an old version of libthrift:\n```\nFAILURE: Build failed with an exception.\n\n\nWhat went wrong:\nCould not resolve all dependencies for configuration ':providedCompile'.\n\nCould not find org.apache.thrift:libthrift:0.5.0.\n  Searched in the following locations:\n      https://repository.cloudera.com/artifactory/cloudera-repos/org/apache/thrift/libthrift/0.5.0/libthrift-0.5.0.pom\n      https://repository.cloudera.com/artifactory/cloudera-repos/org/apache/thrift/libthrift/0.5.0/libthrift-0.5.0.jar\n      https://repo1.maven.org/maven2/org/apache/thrift/libthrift/0.5.0/libthrift-0.5.0.pom\n      https://repo1.maven.org/maven2/org/apache/thrift/libthrift/0.5.0/libthrift-0.5.0.jar\n      file:/C:/Users/brand_000/.m2/repository/org/apache/thrift/libthrift/0.5.0/libthrift-0.5.0.pom\n      file:/C:/Users/brand_000/.m2/repository/org/apache/thrift/libthrift/0.5.0/libthrift-0.5.0.jar\n  Required by:\n      com.cloudera:CommVis:1.0-SNAPSHOT > com.twitter:twitter-server_2.11:1.11.0 > com.twitter:finagle-zipkin_2.11:6.26.0\n      com.cloudera:CommVis:1.0-SNAPSHOT > com.twitter:twitter-server_2.11:1.11.0 > com.twitter:finagle-zipkin_2.11:6.26.0 > com.twitter:finagle-thrift_2.11:6.26.0\n\n\n\nTry:\nRun with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.\n\n\nBUILD FAILED\n```\nIt seems to be in maven.wttr.com, however:\nhttp://maven.twttr.com/org/apache/thrift/libthrift/0.5.0/\nSo I'll keep using it for the moment.\n. Thanks!\n. ",
    "samstarling": ":+1:\n. ",
    "grandbora": "HAHA\n:+1: \n. superseded by https://github.com/twitter/util/pull/205. \n\n. ",
    "ccmtaylor": ":+1: \n. ",
    "missingfaktor": ":+1: \n. LGTM! (All the best, @folone!). ",
    "herval": "\ud83d\udcaa\ud83d\udc7d\ud83d\udc4d\n. ",
    "williamboxhall": ":+1: \n. \ud83d\udc4e due to long hair, otherwise :shipit: . ",
    "garriguv": ":+1: :clap: \n. :shipit: . ",
    "fwbrasil": "That's a good way to start at a new job, being trolled by your friends. Thanks guys, I'll miss you! :)\nI suggest closing this PR for now, ALL CHECKS HAVE FAILED.\n\n. Welcome @folone!!\n\nMerging #205 into develop will decrease coverage by 0.02%\n\n. ",
    "schrepfler": "What would a proposed approach be? A set of isomorphisms like the Twitter Future <-> Scala Future or would it be good to have some design principle/generalisation document first? I think Reactive Streams/Rx might open some space in extending/generalising Finagle's Future/Service/Filter paradigm and without a seminal document like https://monkey.org/~marius/funsrv.pdf I think any development would be just a hack to enable interop. In a way, Finagle's ecosystem paved the way to well interconnected systems but it would be a shame if we can't have a principled view how the composition should work and which properties should be upheld when composing (both ways) before just hacking away.\n. I don't think I'm best placed. Ideally it would be someone which understands well Twitter's Future but also Reactive Streams.\n. ",
    "stuhood": "Also, thinking about this more I wonder whether it would be more powerful as a scanLeft-alike... where each function receives the output of the previous.\n. @scf37 : @mosesn left an example of how to do this in his response.\nIf there are no explicit data dependencies and you're doing this purely for sideeffect ordering, then you can use before... although it is intended for use with async effects:\n```\nval p = PromiseUnit\ndef fprintln(str: String): Future[Unit] = { println(str); Future.Unit }\np.before {\n  fprintln(\"1\")\n}.before {\n  fprintln(\"2\")\n}.before {\n  fprintln(\"3\")\n}.before {\n  fprintln(\"4\")\n}.before {\n  fprintln(\"5\")\n}\np.setValue(Unit)\n```\n. @jeffreyolchovy : Thanks for the patch!\nThe inference failure for Witness seems fairly fundamental... from what I can tell, the compiler is failing/refusing to infer Any, so the following edit works as well:\n```\ndiff --git a/util/util-core/src/main/scala/com/twitter/util/Event.scala b/util/util-core/src/main/scala/com/twitter/util/Event.scala\nindex 7f49864..d06b1cd 100644\n--- a/util/util-core/src/main/scala/com/twitter/util/Event.scala\n+++ b/util/util-core/src/main/scala/com/twitter/util/Event.scala\n@@ -476,7 +476,7 @@ object Witness {\n   /*\n    * A [[Witness]] which prints to the console.\n    /\n-  val printer: Witness[Any] = Witness(println())\n+  val printer: Witness[Any] = Witness(println(: Any))\n }\n/**\n```\nI wonder if this scalac-bug-worthy. Simple repro looks like:\n```\nobject B {\n  def applyT: T=>Unit = f\n}\nval x = B(println(_))\n```\n[error] B.scala:18: missing parameter type for expanded function ((x$1: <error>) => println(x$1))\n[error]   val x = B(println(_))\n[error]                     ^\n[warn] B.scala:18: a type was inferred to be `Any`; this may indicate a programming error.\n[warn]   val x = B(println(_))\n[warn]                    ^\n. @mosesn : Given that util can't avoid a dependency on the stdlib anyway, asking people to pull in bijection for this seems like overkill.\n. We've leaned in on the scalatest 3.x upgrade, and are nearly finished there. Possibly this week.\n. ",
    "Chandler": "The use case I had was trying to rate limit out going requests. My service needed to make thousands of backend requests and I needed to rate limit it dramatically so it was easy to model it by processing each request in sequence and composing a future.sleep onto each request.\nIf there were a future based, time based rate limiter in util I probably could have used that instead. \n. So what do we think, should we ditch this? @stuhood @dschobel?\nTo me it seems like a valid way to structure requests if you understand what you're doing (I'm pretty sure my use case is defensible, maybe there are others I haven't thought of).\nI like Daniel's traverse/sequenceEffects idea.\nOn the other hand, this may tempt people into sequencing things that don't need to be sequenced.\n. taking @dschobel's advice I updated it to be:\ntraverseSequentially() \nsequenceEffects()\nI would have called it only traverse() but in Scala Futures, traverse is not sequential:\nhttps://github.com/scala/scala/blob/2.12.x/src/library/scala/concurrent/Future.scala#L766\n\"\n-  This is useful for performing a parallel map. For example, to apply a function to all items of a list\n-  in parallel\"\n. Maybe we don't need sequenceEffects() at all. To use sequenceEffects you need a function to turn your Seq[Thing] into Seq[FutureThunk].  \nAnd if you have that, you might as well just use the traverse directly like, traverseSequentially(yourThings)(thingToFuture).\nInstead of the extra step of building the thunks and then passing them in.\n. Anyone who thinks \"how can I sequence some futures\" is probably going to first look in Futures.scala and then second, write it themselves. It's great that AsyncStream can do this but how is anyone going to know to turn to AsyncStream to accomplish this? Are we going to add that AsyncStream example into the comments of Futures.scala ?\nI feel like this is a pretty basic operation that should live next to collect/join etc so it can be used without having to stop and understand what an AsyncStream is.\n. This is merged internally! @luciferous I'm gonna work in your perf improvement in a new branch.\n. so like this?\n private val FutureEmptyVector: Future[Vector[Nothing]] = Future.value(Vector.empty)\n ...\n as.foldLeft(FutureEmptyVector.asInstanceOf[Future[Vector[B]]]) { (resultsFuture, nextItem) =>\n. ",
    "k4rthik": "Hi @mosesn , I needed this last week when I was working on an api that  insert/updates multiple mysql records in a transaction. \ndef insertRecord(record: Record, clnt: Client): Future[Boolean] = { //do a fixed number of writes in a trasaction like \nfor { a <- writeA(clnt)\n        b <- writeB(clnt) ... })\nnow I needed another method\ndef  insertRecords(records: Seq[Record]): Future[Boolean]  =  transactionsClient.transaction[Unit] { clnt => sequentially insertRecord(record, clnt)  }\nthat should insert either all or none. Cannot fire them in parallel as they are all in a single trasaction. \nGlad to hear that you are working on a ratelimiter.\n. @luciferous Edited the example to be more clear. This should rollback the operations that were successful when one of them fails. Trascation is started in insertRecords and used in each insertRecord.\nPlease feel free to suggest if there is any better way to achieve this. \n. ",
    "leftparen": "I came across a similar need @Chandler; in my case, sequencing a series of API calls so objects are created in the right order.\n. For example, let's say you have an API that takes one post at a time; you want to send it multiple posts, but you want to make sure the order of posts is preserved. You would need then to wait for the first API response before moving on to the next call.\n. ",
    "johnynek": "Really it might be nice to have a type def for () => Future[T] or even a case class FutureThunk[T](fn: () => Future[T]) since note that is still a Monad (you could write flatMap and sequence directly on this type (FutureThunk[T]).\n. I agree with Stu (I don't often say that! ;). This changes no deps and\nalmost no change to size of the class files. Seems like a strict win.\nOn Wed, Jun 22, 2016 at 14:53 Stu Hood notifications@github.com wrote:\n\n@mosesn https://github.com/mosesn : Given that util can't avoid a\ndependency on the stdlib anyway, asking people to pull in bijection for\nthis seems like overkill.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/twitter/util/pull/167#issuecomment-227920508, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe/AAEJdhVeZicnvxmWzNTUH8mCXN7LFSWwks5qOdkegaJpZM4I8HZH\n.\n. I hear you for sure about API bloat.\n\nThat said, scala.util.Try is in the standard lib, so I think guava brings us to a whole different set of concerns around adding diamond dependencies. I think the point about something being in the standard library is that everyone will have it.\nYou guys probably don't see this pain that much because you work in util and maybe very seldom use scala.util.Try. As someone who uses util as well as many other libraries that don't use util, it is annoying that every project we have has to either add some bijection import boilerplate or write a few lines of code (two case matches and you are set), when it could just be: .asScalaTry.\n. @kevinoliver fine by me to shorten the names.\n. bummed this did not make it into the release.\nIs there anything I can do to get this merged before the next one?\n. please point to this thread if anyone every complains their PRs are\nignored. I worked at twitter for 4.5 years and so are mine!\n;P\nnothing but <3\nOn Fri, Jul 8, 2016 at 9:12 AM, Ruben Oanta notifications@github.com\nwrote:\n\n@johnynek https://github.com/johnynek so sorry, totally forgot to pull\nthis in! I'm putting it up internally now.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/twitter/util/pull/167#issuecomment-231447672, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe/AAEJdrDBqcaPwLxdacG7hZDMnvg90f26ks5qTqEAgaJpZM4I8HZH\n.\n\n\nP. Oscar Boykin, Ph.D. | http://twitter.com/posco | http://pobox.com/~boykin\n. \ud83d\udc4d \n. There are lots of PRIMEs obviously. What should we name them? I don't like PRIME_INT because someone may want a different prime (for whatever reason) later, and then we are on to PRIME_INT_A, etc...\nHow about FNV1_PRIME_INT?\n. +1 to not using the name sequence. What about sequentially?\n. ",
    "suls": "Great! Will do both! And thanks again guys!\n. - [x] improve commit message\n- [x] reorder parameters (not only FileHandler but also ConsoleHandler)\n- [x] update twitter-server docs (ready for PR https://github.com/suls/twitter-server/commit/5d1a91733cd9f091fc3ff512cbb87678f5e88f04)\n- [x] val +1, var -1 :v: \nI hope the last point doesn't turn this PR from almost accepted to not on my watch .. I just couldn't resist :tada: \n. ",
    "ben-manes": "Sounds good. You might prefer using AsyncLoadingCache with scala-java8-compat for handling Future[V] values.\nbtw, I think evict(key: K, f: Future[V]) can use asMap().remove(k, v).\n. ",
    "jcrossley": "Working on pulling into util now :)\n. Hi Seth! We're in  the process of fixing this, thanks! Note that this should only be an issue on the develop, not release branch.. All fixed: https://github.com/twitter/util/tree/develop. @monkey-mas this has been merged internally and will go out with the next release. Thanks for your contribution!. Hi @nmurthy, Tunables are in the experimental phase right now, but we'll definitely be making the API public in the future! That said, I'm not sure that Tunables are what you're looking for here; are you wanting to change backend stores at runtime? Could you clarify what you're trying to do? Tunables don't have a flatMap function. . ",
    "ryanoneill": "Thanks @SethTisue. This has been added to the develop branch of util. https://github.com/twitter/util/commit/489549826c37882dd44049eca2372c6754271ffa\n. +1 for this change also.\n. Going to attempt to merge this in internally.\n. @tbekas this pull request has been merged internally and should sync back out to Github in a few days. When it does, we'll close this PR. Thanks again.\n. @tbekas artifacts will be available when we do a release of finagle, which will happen sometime this month (perhaps next week). The code will be available on the develop branch in github by the beginning of next week, at the latest.\nRegarding 2.10, our release of Finagle 6.35 in April was the last release planned which targets Scala 2.10. Please see this blog post for more details.\n. Your commit has been pushed to the develop branch of util https://github.com/twitter/util/commit/9176942591159d3705bd5b3c982cf1c812ac9ca3\nI am now going to close this pull request.\nThanks again for the contribution. \n. Hi @malikvivek, I'm going to close this issue since your pull request has been synced back to GitHub. Thank you for the contribution.\n. Hi @malikvivek, thank you for your contribution. This has been pushed back out to GitHub in https://github.com/twitter/util/commit/bdc7809beb76e7d9e78e1f1df29daaae8fef2326\nGoing to now close this pull request.\n. Hi @basert, thank you for your contribution. This has been pushed back out to GitHub in https://github.com/twitter/util/commit/740542e9526e06571947b7a6ea57428fed2de7fc\nGoing to now close this pull request.\n. Hi @cvogt, just so you're aware, we no longer use util-eval internally, and it's officially deprecated. We're still willing to accept a pull request for it however. Would you be able to add a test here? Thanks.\n. Hi @3tty0n, thank you very much for the pull request. \nI'm going to try pulling this into our codebase and getting it merged. We merge changes internally and then they are pushed back out to GitHub.. Hi @3tty0n, thanks again for the contribution. This has been merged internally and pushed back out to GitHub as https://github.com/twitter/util/commit/cd27b816b686fc08463b523ac49b3ee50a89412c. Thanks @SethTisue. It appears that the certificates that we generated to test this code have since expired. I will generate some new ones that don't expire for 10 years so that this doesn't happen again.. This should be fixed now.. Hi @rquinlivan,\nIt appears that we no longer use ZkAsyncSemaphore in our code internally. It's quite possible that this code has grown stale as we've updated versions of Zookeeper.\nAnd, I just tried manually using ZkAsyncSemaphore via the repl and running the tests with an instance of Zookeeper via the \"com.twitter.zk.TEST_CONNECT\" system property, and both failed in the exact method that you described.. @rquinlivan, is this something you would be interested in fixing via a pull request?. Hi @lilred, thanks for the contribution. This pull request has been reviewed and merged internally and pushed back out to GitHub as https://github.com/twitter/util/commit/aa32eb16f03635dbdc9540366a880d648aa58949. Thanks for letting us know @SethTisue. We'll address this as soon as we can. We are using 1.13.4 internally at Twitter. So if we can't write code that can work for both 1.13.4 and 1.14.0, it might be a bit.. Thank you very much for submitting the pull request @dadjeibaah!. Hey @adleong, we're looking into getting this fixed up as soon as we can.. fyi. https://github.com/twitter/util/commit/3d6d7457d34055a9e9c86ffd112cc477fd557e0f\nI'm going to attempt a patch release now.. @adleong I've released version 18.9.1 which should be propagating out now and should fix this issue. Let me know how it works out. Thanks. . Alex, we've officially released 18.9.1 to address this issue. I'm going to close this one, but please open another one if there are still problems. Thanks!\nhttps://finagle.github.io/blog/2018/09/27/point-release-notes/. Hi @girishjjain. Thank you so much for your contribution to Util. It looks like this code specifically was last modified three years ago by @vkostyukov for performance reasons (i.e. a reduction in allocations). \nBefore we proceed, can I ask you to run the DurationBenchmark without your change and with it so that we can see the comparison as we're evaluating the change. \nThanks.. My apologies as I meant to link to the actual change from 2015 as well.\nhttps://github.com/twitter/util/commit/4e9a711b9daebbe14c2b0a072cca59552e0dfcf4. I should have been explicit. Can you run with the 'gc' option as well?\ne.g.\n./sbt 'project util-benchmark' 'jmh:run -prof gc DurationBenchmark'\nOnce we have those numbers, I'll put it up for review internally and if the numbers are the same we'll decide on the readability. Thanks again.. Hi @girishjjain, after talking it over with a few team members and looking at the performance implications of this patch specifically, we're going to decline to merge this into util. I appreciate the time and effort you put into this especially in regards to providing the benchmarking data that we asked for.. Hi @SimonAdameit. Thanks for the pull request. I think we've settled on trying not to use 'Throwable' to catch exceptions when possible. Would 'NonFatal' work here instead? . Hi @SimonAdameit, thanks for the update. Let me talk to some of our JVM folks here and see if they have good opinions on how to proceed here.. nit: use log.warning instead of log.log. ",
    "jacksu": "sbt.ResolveException: unresolved dependency: com.twitter.common#io;0.0.67: not found\n. ",
    "lukiano": "I found an alternative via wrapping the refresh in an exponential retry. It'd be cool to share the Exponential Retry for Futures located in util-zk as another Future utility in the concurrent package of util-core. Thanks!\n. ",
    "cchavez": "So, is going to be a replacement for that?\n. ",
    "dimatkach": "Well, I wanted it to work for all loggers, not just twitter.util.*.\nBesides, I am not sure I understand why you think it would be simpler: we\ncould store the locals inside LazyLogRecord, but QueuieingHandler would\nstill need to be modified to restore it around doPublish. Also, this would\naffect synchronous case as well, where it is unnecessary.\nOn Sun, Mar 20, 2016 at 5:38 PM, Moses Nakamura notifications@github.com\nwrote:\n\noh, I understand what you're trying to do now. could we fix this more\nsimply by changing the implementation of LazyLogRecord\nhttps://github.com/twitter/util/blob/develop/util-logging/src/main/scala/com/twitter/logging/LazyLogRecord.scala#L21-L27\n?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/twitter/util/pull/156#issuecomment-199033027\n. util-logging installs QueueingHandler, yes. But third party code is still\ndoing LogManager.geLogger and logging message with jul.Loggers.\nI am not sure why you think LazyLogRecord is not used for synchronous case.\nIt looks like, when there are parameters, it is always used by the\nLogger.log:\nhttps://github.com/twitter/util/blob/develop/util-logging/src/main/scala/com/twitter/logging/Logger.scala#L111\nand when there aren't, it's only used by the \"lazy\" calls, but not regular\nones.\n\nOn Sun, Mar 20, 2016 at 9:16 PM, Moses Nakamura notifications@github.com\nwrote:\n\nI think only util-logging uses QueueingHandler, no? We wouldn't need to\nmodify QueueingHandler because we could restore it in getMessage.\nLazyLogRecord isn't used for the synchronous case, so it should be OK, I\nthink.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/twitter/util/pull/156#issuecomment-199076744\n. Also, I am not sure how we could to it in getMessage: we can set the\nsaved context in there, but where would the restore happen? Just let it\nstay? That seems ... unclean ... especially, since, this is execute on the\ndefault pool.\n\nOn Sun, Mar 20, 2016 at 9:34 PM, Dima Tkach dimatkach@gmail.com wrote:\n\nutil-logging installs QueueingHandler, yes. But third party code is still\ndoing LogManager.geLogger and logging message with jul.Loggers.\nI am not sure why you think LazyLogRecord is not used for synchronous\ncase. It looks like, when there are parameters, it is always used by the\nLogger.log:\nhttps://github.com/twitter/util/blob/develop/util-logging/src/main/scala/com/twitter/logging/Logger.scala#L111\nand when there aren't, it's only used by the \"lazy\" calls, but not regular\nones.\nOn Sun, Mar 20, 2016 at 9:16 PM, Moses Nakamura notifications@github.com\nwrote:\n\nI think only util-logging uses QueueingHandler, no? We wouldn't need to\nmodify QueueingHandler because we could restore it in getMessage.\nLazyLogRecord isn't used for the synchronous case, so it should be OK, I\nthink.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/twitter/util/pull/156#issuecomment-199076744\n. And also, twitter.util.Formatter isn't using getMessage to format prefix:\nhttps://github.com/twitter/util/blob/develop/util-logging/src/main/scala/com/twitter/logging/Formatter.scala#L189\n\n\nI know that it's not being used by default (even though, the code looks\nconfusingly like it would be), but still, I am not sure why we should\nprefer a solution that we know does not work in all cases to the one that\ndoes.\nWhat are the problems you see with the approach I am proposing?\nOn Sun, Mar 20, 2016 at 10:05 PM, Dima Tkach dimatkach@gmail.com wrote:\n\nAlso, I am not sure how we could to it in getMessage: we can set the\nsaved context in there, but where would the restore happen? Just let it\nstay? That seems ... unclean ... especially, since, this is execute on the\ndefault pool.\nOn Sun, Mar 20, 2016 at 9:34 PM, Dima Tkach dimatkach@gmail.com wrote:\n\nutil-logging installs QueueingHandler, yes. But third party code is still\ndoing LogManager.geLogger and logging message with jul.Loggers.\nI am not sure why you think LazyLogRecord is not used for synchronous\ncase. It looks like, when there are parameters, it is always used by the\nLogger.log:\nhttps://github.com/twitter/util/blob/develop/util-logging/src/main/scala/com/twitter/logging/Logger.scala#L111\nand when there aren't, it's only used by the \"lazy\" calls, but not\nregular ones.\nOn Sun, Mar 20, 2016 at 9:16 PM, Moses Nakamura <notifications@github.com\n\nwrote:\nI think only util-logging uses QueueingHandler, no? We wouldn't need to\nmodify QueueingHandler because we could restore it in getMessage.\nLazyLogRecord isn't used for the synchronous case, so it should be OK, I\nthink.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/twitter/util/pull/156#issuecomment-199076744\n. Ping ... Is anything happening to this? Just checking ...\n. \n\n\n",
    "scf37": "@mosesn Thanks for the explanation. What is the right way to implement something like that but keeping request order:\n```\nval sf: ServiceFactory[Int, Int] = ....\nval serviceFuture = sf(clientConn)\n//send request as soon as service arrives\n//unfortunately this does not keep request order\ndef sendRequest(req: Int): Future[Int] = serviceFuture.map(s => s(req))\n```\n?\n. ",
    "adleong": "That's a bummer, but makes sense.  Thanks for the response and explanation!\n. I was also thinking about this and wondering if something like this would fix it:\nscala\ncase Embed(fas) => Cons(Future.value(z), () => Embed(fas.map(_.scanLeft(z)(f).drop(1))). com.twitter.finagle.util.DefaultTimer. Ah right, \"DefaultTimer(Netty4Timer)\". Here is the full ammonite script I used to repro:\n``\nimport $ivy.com.twitter::finagle-http:7.0.0`\nimport com.twitter.util._\nimport com.twitter.finagle.util.DefaultTimer\nval timer = DefaultTimer\nval f = Future.sleep(Duration.Top)(timer)\nThread.sleep(5000)\nprintln(timer)\nprintln(f.poll)\n```\nand the output:\nDefaultTimer(Netty4Timer)\nSome(Return(())). Interestingly, if I try to depend on finagle-core instead of finagle-http I get this output instead:\nAug 18, 2017 4:35:18 PM com.twitter.finagle.util.DefaultTimer$ <init>\nWARNING: Can not service-load a timer. Using JavaTimer instead.\nDefaultTimer(com.twitter.util.JavaTimer@9c0d0bd)\nNone\nso it definitely seems dependent on the timer.. I'm on vacation this week but I'll try to put together a PR next week when I'm back.  Should we also guard against durations that would overflow long?. After thinking about this some more, I think it really needs to be fixed in HashedWheelTimer, not in Netty4Timer.  The allowable range of times that can be scheduled without overflow depends on the timer's startTime which is internal to HashedWheelTimer.\nI'm happy to put together the optimization for Future.Sleep though.. https://github.com/twitter/util/pull/201. I'd be happy to put up a PR that mitigates this by falling back to NilJvm.  A full implementation of the Jvm trait for OpenJ9 would be ideal, but that's a much larger chunk of work.. Yes! \ud83c\udf89 . @bryce-anderson @ryanoneill do you think this change will make it into the July Finagle release?. I'm trying 18.9.1 right now.  I'm able to build a fat JAR without any conflicts and everything looks good so far.  Thanks!. ",
    "jeffreyolchovy": "I'll give this one a shot. Will report back with initial results.\n. From a very high level, we're missing 2.12 artifacts for:\n- org.scoverage#sbt-scoverage\nAnd the following dependencies have to be updated to retrieve a 2.12 artifact:\n- org.scalatest#scalatest (2.2.4 to 2.2.6)\n- org.scalacheck#scalacheck (1.12.2 to 1.13.1)\nsbt-scoverage is an interesting case, as the offending libraryDependencies are injected via the plugin, which effects all modules. The sbt plugin itself, obviously, need only be built against 2.10, however, it requires that org.scoverage#scalac-scoverage-runtime and org.scoverage#scalac-scoverage-plugin have 2.12 artifacts. These do not yet exist.\nhttps://github.com/jeffreyolchovy/util/tree/feature/scala-2.12\n. @mosesn, yes I was able to do the former. I added the following to the sharedSettings:\nlibraryDependencies := {\n  libraryDependencies.value.map {\n    case moduleId: ModuleID\n      if moduleId.organization == \"org.scoverage\"\n      && scalaVersion.value.startsWith(\"2.12\") =>\n      moduleId.copy(name = moduleId.name.replace(scalaVersion.value, \"2.11\"))\n    case moduleId =>\n      moduleId\n  }   \n}\nThat is pretty hacky, so I imagine there is a better way. I attempted to use the cross operator on ModuleID, but that only seems useful for dependencies that were specified without the %% upon declaration. Again, we don't have control over the declaration site of the dependencies since that happens in the plugin.\nI don't think your latter suggestion is a feasible option (without further changes) because ScoverageKeys are used in Build.scala and conditionally disabling the plugin would then cause compilation problems of the project itself.\nSo, there is at least something that works, and it can potentially be cleaned up. Will keep hacking.\nUPDATE: Even though the above fix allows us the enter the compilation phase, actually trying to use scoverage will fail with the following error:\n```\njava.lang.NoClassDefFoundError: scala/tools/nsc/transform/TypingTransformers$class\n    at scoverage.ScoverageInstrumentationComponent.(plugin.scala:54)\n    at scoverage.ScoveragePlugin.(plugin.scala:17)\n    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n    at java.lang.reflect.Constructor.newInstance(Constructor.java:422)\n    at scala.tools.nsc.plugins.Plugin$.instantiate(Plugin.scala:190)\n    ...\n```\n. @stuhood, i like that, and it keeps it nice and concise too.\nI'm not exactly sure if this is a scalac bug vs. an advertised-yet-difficult-for-me-to-understand change (http://scala-lang.org/news/2.12.0-M4/#sam-types -- click through to underlying issue #4971 for more info).\nThat's a bit over my head, but, as an aside, if Witness.apply wasn't overloaded, something as simple as Witness(println) would work as well. Which explains why declarations like: Witness.fromFunction(println) work.\nCompare:\n```\nWelcome to Scala 2.12.0-M4 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_65).\nType in expressions for evaluation. Or try :help.\nscala> object B {\n     |   def applyT: T=>Unit = f\n     | }\ndefined object B\nscala> \nscala> val x = B(println())\n:12: error: missing parameter type for expanded function ((x$1: ) => println(x$1))\n       val x = B(println())\n                         ^\nscala> val x = B(println)\nx: Any => Unit = $$Lambda$1231/2043519108@4bcc23f8\nscala> val x = B(println(_: Any))\nx: Any => Unit = $$Lambda$1232/2044509673@6b33db97\n```\nvs.\n```\ntrait Foo[A] {\n  def foo(a: A): Unit\n}\nobject Foo {\n  def applyA: Foo[A] = new Foo[A] { def foo(a: A): Unit = f(a) }\n  def applyA: Foo[A] = new Foo[A] { def foo(a: A): Unit = ref.set(a) }\n}\n// Exiting paste mode, now interpreting.\ndefined trait Foo\ndefined object Foo\nscala> Foo(println)\n:16: error: overloaded method value apply with alternatives:\n  AFoo[A] \nAFoo[A]\n cannot be applied to (Unit)\n       Foo(println)\n       ^\nscala> Foo(println())\n:16: error: missing parameter type for expanded function ((x$1: ) => println(x$1))\n       Foo(println())\n                   ^\nscala> Foo(println(_: Any))\nres2: Foo[Any] = Foo$$anon$1@1c1b9e66\n``\n. @idarlington please also see the corresponding PR https://github.com/twitter/util/pull/163 for more info.\n. @mosesn @idarlington here is the output of+testfor bothutil-collectionandutil-eval`. All tests for both modules pass but maybe you'll find something else here that is suspicious regardless of the successful output:\nutil-collection\n```\n\nproject util-collection\n[info] Set current project to util-collection (in build file:/Users/jeffo/Projects/jvm/twitter/util/)\n+test\n[info] Setting version to 2.11.8\n[info] Reapplying settings...\n[info] Set current project to util-collection (in build file:/Users/jeffo/Projects/jvm/twitter/util/)\n[info] Updating {file:/Users/jeffo/Projects/jvm/twitter/util/}util-collection...\n[info] Resolving jline#jline;2.12.1 ...\n[info] Done updating.\n[info] Compiling 5 Scala sources to /Users/jeffo/Projects/jvm/twitter/util/util-collection/target/scala-2.11/classes...\n[info] [info] Cleaning datadir [/Users/jeffo/Projects/jvm/twitter/util/util-collection/target/scala-2.11/scoverage-data]\n[info] [info] Beginning coverage instrumentation\n[info] [info] Instrumentation completed [261 statements]\n[info] [info] Wrote instrumentation file [/Users/jeffo/Projects/jvm/twitter/util/util-collection/target/scala-2.11/scoverage-data/scoverage.coverage.xml]\n[info] [info] Will write measurement data to [/Users/jeffo/Projects/jvm/twitter/util/util-collection/target/scala-2.11/scoverage-data]\n[warn] there was one deprecation warning; re-run with -deprecation for details\n[warn] one warning found\n[info] Compiling 6 Scala sources to /Users/jeffo/Projects/jvm/twitter/util/util-collection/target/scala-2.11/test-classes...\n[info] LRUMapTest:\n[info] - LRUMap creation\n[info] - LRUMap insertion\n[info] - LRUMap eviction\n[info] GenerationalQueueTest:\n[info] - ExactGenerationalQueue: Don't collect fresh data\n[info] - ExactGenerationalQueue: Don't collect old data recently refreshed\n[info] - ExactGenerationalQueue: collect one old data\n[info] - ExactGenerationalQueue: collectAll old data\n[info] - ExactGenerationalQueue: generate a long chain of bucket (if applicable)\n[info] - ExactGenerationalQueue: Don't collect old data\n[info] - BucketGenerationalQueue: Don't collect fresh data\n[info] - BucketGenerationalQueue: Don't collect old data recently refreshed\n[info] - BucketGenerationalQueue: collect one old data\n[info] - BucketGenerationalQueue: collectAll old data\n[info] - BucketGenerationalQueue: generate a long chain of bucket (if applicable)\n[info] - BucketGenerationalQueue: Don't collect old data\n[info] - BucketGenerationalQueue check removals\n[info] SetMakerTest:\n[info] - SetMaker\n[info] ImmutableLRUTest:\n[info] - ImmutableLRU insertion\n[info] - ImmutableLRU eviction\n[info] - ImmutableLRU removal\n[info] RecordSchemaTest:\n[info] - apply should throw IllegalStateException when field is uninitialized\n[info] - apply should compute, store and return default when field is initialized with default\n[info] - apply should return field value when field is explicitly initialized\n[info] - lock should throw IllegalStateException when field is uninitialized\n[info] - lock should compute and store default when field is initialized with default\n[info] - update should reassign when field is not locked\n[info] - update should throw IllegalStateException when field is locked\n[info] - updateAndLock should update and lock\n[info] - copy should copy\n[info] - copy should not be modified when the original is updated\n[info] - locked state should be copied\n[info] - copy should be able to overwrite a locked field\n[info] ScalaTest\n[info] Run completed in 794 milliseconds.\n[info] Total number of tests run: 32\n[info] Suites: completed 5, aborted 0\n[info] Tests: succeeded 32, failed 0, canceled 0, ignored 0, pending 0\n[info] All tests passed.\n[info] Passed: Total 32, Failed 0, Errors 0, Passed 32\n[success] Total time: 7 s, completed May 28, 2016 8:10:59 PM\n[info] Setting version to 2.12.0-M4\n[info] Reapplying settings...\n[info] Set current project to util-collection (in build file:/Users/jeffo/Projects/jvm/twitter/util/)\n[info] LRUMapTest:\n[info] - LRUMap creation\n[info] - LRUMap insertion\n[info] - LRUMap eviction\n[info] GenerationalQueueTest:\n[info] - ExactGenerationalQueue: Don't collect fresh data\n[info] - ExactGenerationalQueue: Don't collect old data recently refreshed\n[info] - ExactGenerationalQueue: collect one old data\n[info] - ExactGenerationalQueue: collectAll old data\n[info] - ExactGenerationalQueue: generate a long chain of bucket (if applicable)\n[info] - ExactGenerationalQueue: Don't collect old data\n[info] - BucketGenerationalQueue: Don't collect fresh data\n[info] - BucketGenerationalQueue: Don't collect old data recently refreshed\n[info] - BucketGenerationalQueue: collect one old data\n[info] - BucketGenerationalQueue: collectAll old data\n[info] - BucketGenerationalQueue: generate a long chain of bucket (if applicable)\n[info] - BucketGenerationalQueue: Don't collect old data\n[info] - BucketGenerationalQueue check removals\n[info] SetMakerTest:\n[info] - SetMaker\n[info] ImmutableLRUTest:\n[info] - ImmutableLRU insertion\n[info] - ImmutableLRU eviction\n[info] - ImmutableLRU removal\n[info] RecordSchemaTest:\n[info] - apply should throw IllegalStateException when field is uninitialized\n[info] - apply should compute, store and return default when field is initialized with default\n[info] - apply should return field value when field is explicitly initialized\n[info] - lock should throw IllegalStateException when field is uninitialized\n[info] - lock should compute and store default when field is initialized with default\n[info] - update should reassign when field is not locked\n[info] - update should throw IllegalStateException when field is locked\n[info] - updateAndLock should update and lock\n[info] - copy should copy\n[info] - copy should not be modified when the original is updated\n[info] - locked state should be copied\n[info] - copy should be able to overwrite a locked field\n[info] ScalaCheck\n[info] Passed: Total 0, Failed 0, Errors 0, Passed 0\n[info] ScalaTest\n[info] Run completed in 666 milliseconds.\n[info] Total number of tests run: 32\n[info] Suites: completed 5, aborted 0\n[info] Tests: succeeded 32, failed 0, canceled 0, ignored 0, pending 0\n[info] All tests passed.\n[info] Passed: Total 32, Failed 0, Errors 0, Passed 32\n[success] Total time: 1 s, completed May 28, 2016 8:11:03 PM\n```\n\nutil-eval\n```\n\nproject util-eval\n[info] Set current project to util-eval (in build file:/Users/jeffo/Projects/jvm/twitter/util/)\n+test\n[info] Setting version to 2.11.8\n[info] Reapplying settings...\n[info] Set current project to util-eval (in build file:/Users/jeffo/Projects/jvm/twitter/util/)\n[info] EvalTest:\n[info] Evaluator\n[info] - should apply('expression')\n[info] - should apply(new File(...))\n[info] - should apply(new File(...), new File(...))\n[info] - should apply(new File(...) with a dash in the name with target\n[info] - should apply(new File(...) with target\n[info] - should apply(InputStream)\n[info] - should uses deprecated\n[info] - should inPlace('expression')\n[info] - should check\n[info] - should #include\n[info] - should recursive #include\n[info] - should toSource returns post-processed code\n[info] - should throws a compilation error when Ruby is #included\n[info] - should clean class names\n[info]   should allow custom error reporting\n[info]   - when not report errors on success\n[info]   - when report errors on bad code\n[info]   - when reset reporter between invocations\n[info] Run completed in 3 seconds, 249 milliseconds.\n[info] Total number of tests run: 17\n[info] Suites: completed 1, aborted 0\n[info] Tests: succeeded 17, failed 0, canceled 0, ignored 0, pending 0\n[info] All tests passed.\n[success] Total time: 5 s, completed May 28, 2016 8:14:39 PM\n[info] Setting version to 2.12.0-M4\n[info] Reapplying settings...\n[info] Set current project to util-eval (in build file:/Users/jeffo/Projects/jvm/twitter/util/)\n[info] EvalTest:\n[info] Evaluator\n[info] - should apply('expression')\n[info] - should apply(new File(...))\n[info] - should apply(new File(...), new File(...))\n[info] - should apply(new File(...) with a dash in the name with target\n[info] - should apply(new File(...) with target\n[info] - should apply(InputStream)\n[info] - should uses deprecated\n[info] - should inPlace('expression')\n[info] - should check\n[info] - should #include\n[info] - should recursive #include\n[info] - should toSource returns post-processed code\n[info] - should throws a compilation error when Ruby is #included\n[info] - should clean class names\n[info]   should allow custom error reporting\n[info]   - when not report errors on success\n[info]   - when report errors on bad code\n[info]   - when reset reporter between invocations\n[info] Run completed in 3 seconds, 38 milliseconds.\n[info] Total number of tests run: 17\n[info] Suites: completed 1, aborted 0\n[info] Tests: succeeded 17, failed 0, canceled 0, ignored 0, pending 0\n[info] All tests passed.\n[success] Total time: 3 s, completed May 28, 2016 8:14:45 PM\n``\n. @idarlington you want to take ostrich, and i'll continue with scrooge?\n. @idarlington, nothing wrong, just seeing if you had interest in taking https://github.com/twitter/ostrich/issues/74. Very similar to this issue, just a different project (and it hasutilas a dependency).\n. @mosesn, hopefully I've addressed all line notes and comments in latest rebase of full changeset. This is still a wip considering tests are still failing when targeting 2.12 due to \"scalatestmust use a binary compatible version ofscalacheck`\". More info available in last commit message and PR description.\n. > Hmm, it looks like they published scalatest against 1.11.6 scalacheck. Have you tried using 1.12.5 2.12.0-M4? That looks promising.\n\nThat worked, thanks! The java.lang.IncompatibleClassChangeError during 2.12 testing has been resolved, but test failures still exist:\n[error] Failed tests:\n[error]     com.twitter.logging.FormatterTest\n[error] Failed tests:\n[error]     com.twitter.util.MonitorTest\n[error]     com.twitter.util.ConfigTest\n[error]     com.twitter.concurrent.OfferTest\n\nWhen targeting 2.12 the FormatterTest test-case failure now has a different stack trace than expected:\nList(\n\"    at com.twitter.logging.FormatterTest$$.cycle2(FormatterTest.scala:NNN)\",\n\"    at com.twitter.logging.FormatterTest.com$twitter$logging$FormatterTest$$(FormatterTest.scala:NNN)\",\n\"    (...more...)\",\n\"Caused by java.lang.Exception: Aie!\",\n\"    at com.twitter.logging.FormatterTest$$.cycle(FormatterTest.scala:NNN)\",\n\"    at com.twitter.logging.FormatterTest$$.cycle(FormatterTest.scala:NNN)\",\n\"    (...more...)\"\n)\ndid not equal\nList(\n\"    at com.twitter.logging.FormatterTest$$.cycle2(FormatterTest.scala:NNN)\",\n\"    at com.twitter.logging.FormatterTest$$.apply$mcV$sp(FormatterTest.scala:NNN)\",\n\"    (...more...)\",\n\"Caused by java.lang.Exception: Aie!\",\n\"    at com.twitter.logging.FormatterTest$$.cycle(FormatterTest.scala:NNN)\",\n\"    at com.twitter.logging.FormatterTest$$.cycle(FormatterTest.scala:NNN)\",\n\"    (...more...)\"\n) (FormatterTest.scala:181)\nConfigTest's test for missing values now shows an additional member:\n[info]   - should must find top-level and nested missing values *** FAILED ***\n[info]     List(\"bar.z\", \"com$twitter$util$ConfigTest$$anon$4$$$anonfun$13.z\", \"x\") did not equal List(\"bar.z\", \"x\") (ConfigTest.scala:74)\n[info]   - should must find nested missing values in optional sub-configs *** FAILED ***\n[info]     List(\"baz.w\", \"com$twitter$util$ConfigTest$$anon$5$$$anonfun$18.w\") did not equal List(\"baz.w\") (ConfigTest.scala:85)\nAnd at a quick glance, a few Mockito issues makes up the rest of the errors in OfferTest and MonitorTest. e.g.\n[info] Cannot call real method on java interface. Interface does not have any implementation!\n[info] Calling real methods is only possible when mocking concrete classes.\n[info]   //correct example:\n[info]   when(mockOfConcreteClass.doStuff()).thenCallRealMethod();))) (of class com.twitter.util.Promise)\n[info]     at com.twitter.concurrent.OfferTest.com$twitter$concurrent$OfferTest$$$anonfun$36(OfferTest.scala:228)\n[info]     at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:12)\nWill look into these more in depth when I get some time.\n. @mosesn can you review 90199bb which contains a fix for the failing ConfigTest? I am using Scala's runtime reflection to ignore synthetic term names when searching for missing values. This eliminates the need for the existing $outer suffix check and gets around the (new) issue 2.12 caused as more synthetic methods were being generated in the 'nested' scenarios (e.g. com$twitter$util$ConfigTest$$anon$5$$$anonfun$18).\n(and I'll fix the commit message so it follows the guidelines... my bad habit)\n. @mosesn, rebased against upstream develop and all tests passing for both 2.11 and 2.12.\n. np, done.\n. ",
    "idarlington": "Hi, I am interested where can I start?\nI would like to upgrade util-collection.\n. Ok thanks @mosesn , excited to be a part of this, hopefully my first PR. \n. Hi @jeffreyolchovy , Checked out your branch and it compiles successfully.\n. Hi, sorry i don't get that @jeffreyolchovy what's wrong?  i thought it compiled successfully.\n. ok cool, got it. I would take ostrich. Thanks @jeffreyolchovy \n. ",
    "spockz": "Any ideas on when a 2.12 version of twitter-util will be released?\n. @mosesn thanks for the update!\n. ",
    "instanceofme": "@mosesn Since there is no state and only an apply() method, it should be serializable just by implementing java.io.Serializable, implementing special serialization handling methods like writeObject is not required.\n. The class cannot have unserializable members, it only has an apply method, but can have unserializable inner classes (e.g. in closures). Those will not fail at compile time though, and only fail at runtime if you do serialize them, for instance by sending them in a Spark job. But that's not different than in a regular scala context: you have to make every class that gets sent serializable.\nAFAIK there's no downside to making the wrapping class serializable, it will not cause failure in situations that would not fail today, and  it'll make possible the use of serializable inner classes.\n. You're welcome :)\n. ",
    "tacnoman": "Thanks! xD\n. ",
    "codecov-io": "Current coverage is 66.09%\n\nMerging #167 into develop will decrease coverage by 0.21%\n\ndiff\n@@            develop       #167   diff @@\n==========================================\n  Files           192        192          \n  Lines          8379       8379          \n  Methods        7771       7750    -21   \n  Messages          0          0          \n  Branches        560        583    +23   \n==========================================\n- Hits           5556       5538    -18   \n- Misses         2823       2841    +18   \n  Partials          0          0\n\nPowered by Codecov. Last updated by 8ba587e...fcf5526\n. ## Current coverage is 66.33% (diff: 100%)\nMerging #168 into develop will increase coverage by 0.03%\n\ndiff\n@@            develop       #168   diff @@\n==========================================\n  Files           192        192          \n  Lines          8421       8425     +4   \n  Methods        7803       7808     +5   \n  Messages          0          0          \n  Branches        568        567     -1   \n==========================================\n+ Hits           5583       5589     +6   \n+ Misses         2838       2836     -2   \n  Partials          0          0\n\nPowered by Codecov. Last update 90f2180...6e7f816\n. ## Current coverage is 66.46% (diff: 100%)\nMerging #170 into develop will increase coverage by 0.38%\n\ndiff\n@@            develop       #170   diff @@\n==========================================\n  Files           192        192          \n  Lines          8447       8451     +4   \n  Methods        7794       7805    +11   \n  Messages          0          0          \n  Branches        605        598     -7   \n==========================================\n+ Hits           5582       5617    +35   \n+ Misses         2865       2834    -31   \n  Partials          0          0\n\nPowered by Codecov. Last update a1d61e9...453fc24\n. ## Current coverage is 66.04% (diff: 100%)\nMerging #175 into develop will increase coverage by 0.02%\n\ndiff\n@@            develop       #175   diff @@\n==========================================\n  Files           192        192          \n  Lines          8451       8452     +1   \n  Methods        7651       7660     +9   \n  Messages          0          0          \n  Branches        756        746    -10   \n==========================================\n+ Hits           5579       5582     +3   \n+ Misses         2872       2870     -2   \n  Partials          0          0\n\nPowered by Codecov. Last update fdf10fa...c234385\n. ## Current coverage is 66.52% (diff: 100%)\nMerging #177 into develop will decrease coverage by 0.01%\n\ndiff\n@@            develop       #177   diff @@\n==========================================\n  Files           196        196          \n  Lines          8473       8474     +1   \n  Methods        7691       7681    -10   \n  Messages          0          0          \n  Branches        732        743    +11   \n==========================================\n- Hits           5638       5637     -1   \n- Misses         2835       2837     +2   \n  Partials          0          0\n\nPowered by Codecov. Last update e684872...0dc9b89\n. ## Current coverage is 66.54% (diff: 100%)\nMerging #178 into develop will increase coverage by 0.01%\n\ndiff\n@@            develop       #178   diff @@\n==========================================\n  Files           196        196          \n  Lines          8473       8473          \n  Methods        7691       7691          \n  Messages          0          0          \n  Branches        732        732          \n==========================================\n+ Hits           5637       5638     +1   \n+ Misses         2836       2835     -1   \n  Partials          0          0\n\nPowered by Codecov. Last update 884c51c...33e91f1\n. ## Current coverage is 66.54% (diff: 100%)\nMerging #179 into develop will increase coverage by 0.04%\n\ndiff\n@@            develop       #179   diff @@\n==========================================\n  Files           196        196          \n  Lines          8471       8474     +3   \n  Methods        7662       7690    +28   \n  Messages          0          0          \n  Branches        762        735    -27   \n==========================================\n+ Hits           5633       5639     +6   \n+ Misses         2838       2835     -3   \n  Partials          0          0\n\nPowered by Codecov. Last update 3bbf6c9...a1126a2\n. ## Current coverage is 66.05% (diff: 100%)\nMerging #182 into develop will decrease coverage by 0.43%\n\ndiff\n@@            develop       #182   diff @@\n==========================================\n  Files           196        196          \n  Lines          8473       8537    +64   \n  Methods        7685       7685          \n  Messages          0          0          \n  Branches        739        741     +2   \n==========================================\n+ Hits           5634       5639     +5   \n- Misses         2839       2898    +59   \n  Partials          0          0\n\nPowered by Codecov. Last update f065df0...71b6289\n. ## Current coverage is 66.29% (diff: 84.61%)\nMerging #183 into develop will increase coverage by 0.09%\n\ndiff\n@@            develop       #183   diff @@\n==========================================\n  Files           197        197          \n  Lines          8449       8451     +2   \n  Methods        7698       7672    -26   \n  Messages          0          0          \n  Branches        750        778    +28   \n==========================================\n+ Hits           5594       5603     +9   \n+ Misses         2855       2848     -7   \n  Partials          0          0\n\nPowered by Codecov. Last update 0c9bcb6...d7ed03c. # Codecov Report\nMerging #186 into master will increase coverage by 0.41%.\nThe diff coverage is n/a.\n\n```diff\n@@            Coverage Diff             @@\nmaster     #186      +/-\n==========================================\n+ Coverage   65.85%   66.27%   +0.41%   \n==========================================\n  Files         206      206            \n  Lines        8944     8880      -64   \n  Branches      818      816       -2   \n==========================================\n- Hits         5890     5885       -5   \n+ Misses       3054     2995      -59\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...app/src/main/scala/com/twitter/app/Flaggable.scala | 74.69% <\u00f8> (\u00f8) | :white_check_mark: |\n| ...in/scala/com/twitter/logging/QueueingHandler.scala | 90.62% <0%> (-3.13%) | :x: |\n| ...ain/scala/com/twitter/concurrent/AsyncStream.scala | 89.82% <0%> (-2.4%) | :x: |\n| ...core/src/main/scala/com/twitter/util/Promise.scala | 75.53% <0%> (-0.71%) | :x: |\n| ...ore/src/main/scala/com/twitter/util/Duration.scala | 79.28% <0%> (+0.59%) | :white_check_mark: |\n| ...twitter/finagle/stats/BroadcastStatsReceiver.scala | 47.05% <0%> (+1.96%) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 98b8fc2...64fe3ca. Read the comment docs.. # Codecov Report\nMerging #187 into develop will decrease coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@             Coverage Diff             @@\ndevelop     #187      +/-\n===========================================\n- Coverage    66.48%   66.47%   -0.02%   \n===========================================\n  Files          209      209            \n  Lines         9198     9198            \n  Branches       862      854       -8   \n===========================================\n- Hits          6115     6114       -1   \n- Misses        3083     3084       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...il-eval/src/main/scala/com/twitter/util/Eval.scala | 85.54% <\u00f8> (\u00f8) | :arrow_up: |\n| .../com/twitter/util/security/X500PrincipalInfo.scala | 100% <100%> (\u00f8) | :arrow_up: |\n| ...il-core/src/main/scala/com/twitter/util/Pool.scala | 94.28% <100%> (\u00f8) | :arrow_up: |\n| ...in/scala/com/twitter/util/tunable/TunableMap.scala | 94.44% <100%> (\u00f8) | :arrow_up: |\n| ...in/scala/com/twitter/logging/QueueingHandler.scala | 90.62% <0%> (-3.13%) | :arrow_down: |\n| ...ng/src/main/scala/com/twitter/logging/Logger.scala | 64.51% <0%> (-0.81%) | :arrow_down: |\n| ...ain/scala/com/twitter/concurrent/AsyncStream.scala | 90.41% <0%> (-0.6%) | :arrow_down: |\n| ...core/src/main/scala/com/twitter/util/Promise.scala | 75.88% <0%> (\u00f8) | :arrow_up: |\n| ...ore/src/main/scala/com/twitter/util/Duration.scala | 79.28% <0%> (+0.59%) | :arrow_up: |\n| ...l-core/src/main/scala/com/twitter/util/Event.scala | 90.14% <0%> (+0.7%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c677a17...06c917a. Read the comment docs.. # Codecov Report\nMerging #188 into develop will decrease coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff             @@\ndevelop     #188      +/-\n===========================================\n- Coverage    66.48%   66.47%   -0.02%   \n===========================================\n  Files          209      209            \n  Lines         9198     9198            \n  Branches       862      854       -8   \n===========================================\n- Hits          6115     6114       -1   \n- Misses        3083     3084       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...e/src/main/scala/com/twitter/util/FuturePool.scala | 78% <\u00f8> (\u00f8) | :arrow_up: |\n| ...in/scala/com/twitter/logging/QueueingHandler.scala | 90.62% <0%> (-3.13%) | :arrow_down: |\n| ...ng/src/main/scala/com/twitter/logging/Logger.scala | 64.51% <0%> (-0.81%) | :arrow_down: |\n| ...core/src/main/scala/com/twitter/util/Promise.scala | 75.88% <0%> (\u00f8) | :arrow_up: |\n| ...l-core/src/main/scala/com/twitter/util/Event.scala | 90.14% <0%> (+0.7%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c677a17...f359cf6. Read the comment docs.. # Codecov Report\nMerging #189 into develop will increase coverage by 0.04%.\nThe diff coverage is 100%.\n\n\n```diff\n@@             Coverage Diff             @@\ndevelop     #189      +/-\n===========================================\n+ Coverage    66.04%   66.09%   +0.04%   \n===========================================\n  Files          207      206       -1   \n  Lines         9027     9037      +10   \n  Branches       709      670      -39   \n===========================================\n+ Hits          5962     5973      +11   \n+ Misses        3065     3064       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| util-app/src/main/scala/com/twitter/app/App.scala | 91.3% <100%> (+1.64%) | :arrow_up: |\n| ...core/src/main/scala/com/twitter/util/Promise.scala | 75.53% <0%> (-0.36%) | :arrow_down: |\n| ...ain/scala/com/twitter/concurrent/exp/package.scala | | |\n| ...ore/src/main/scala/com/twitter/util/Duration.scala | 79.28% <0%> (+0.59%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 941b8a9...d3bfedb. Read the comment docs.\n. # Codecov Report\nMerging #190 into develop will decrease coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff             @@\ndevelop     #190      +/-\n===========================================\n- Coverage     65.9%   65.89%   -0.02%   \n===========================================\n  Files          207      207            \n  Lines         9057     9057            \n  Branches       721      654      -67   \n===========================================\n- Hits          5969     5968       -1   \n- Misses        3088     3089       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...l-core/src/main/scala/com/twitter/util/Event.scala | 89.43% <0%> (-0.71%) | :arrow_down: |\n| ...ain/scala/com/twitter/concurrent/AsyncStream.scala | 90.41% <0%> (-0.6%) | :arrow_down: |\n| ...core/src/main/scala/com/twitter/util/Promise.scala | 75.34% <0%> (+0.34%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 93a8844...0182ffe. Read the comment docs.\n. # Codecov Report\nMerging #191 into develop will increase coverage by 0.06%.\nThe diff coverage is 90.9%.\n\n\n```diff\n@@             Coverage Diff             @@\ndevelop     #191      +/-\n===========================================\n+ Coverage     65.9%   65.96%   +0.06%   \n===========================================\n  Files          207      207            \n  Lines         9057     9079      +22   \n  Branches       721      694      -27   \n===========================================\n+ Hits          5969     5989      +20   \n- Misses        3088     3090       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...ore/src/main/scala/com/twitter/io/ByteReader.scala | 79.45% <90.9%> (+2.03%) | :arrow_up: |\n| ...twitter/finagle/stats/BroadcastStatsReceiver.scala | 45.09% <0%> (-1.97%) | :arrow_down: |\n| ...ore/src/main/scala/com/twitter/util/Duration.scala | 78.69% <0%> (-0.6%) | :arrow_down: |\n| ...ain/scala/com/twitter/concurrent/AsyncStream.scala | 92.21% <0%> (+1.19%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 93a8844...d49d9f0. Read the comment docs.\n. # Codecov Report\nMerging #192 into master will decrease coverage by 0.04%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #192      +/-\n==========================================\n- Coverage   66.48%   66.44%   -0.05%   \n==========================================\n  Files         209      209            \n  Lines        9212     9209       -3   \n  Branches      861      712     -149   \n==========================================\n- Hits         6125     6119       -6   \n- Misses       3087     3090       +3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...l-core/src/main/scala/com/twitter/util/Local.scala | 97.5% <100%> (-0.18%) | :arrow_down: |\n| ...in/scala/com/twitter/logging/QueueingHandler.scala | 90.62% <0%> (-3.13%) | :arrow_down: |\n| ...ain/scala/com/twitter/concurrent/AsyncStream.scala | 91.61% <0%> (-0.6%) | :arrow_down: |\n| ...ore/src/main/scala/com/twitter/util/Duration.scala | 78.69% <0%> (-0.6%) | :arrow_down: |\n| ...core/src/main/scala/com/twitter/util/Promise.scala | 76.24% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b4bc96c...15757df. Read the comment docs.\n. # Codecov Report\nMerging #194 into develop will decrease coverage by <.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff             @@\ndevelop     #194      +/-\n===========================================\n- Coverage    59.57%   59.56%   -0.01%   \n===========================================\n  Files          212      212            \n  Lines        10443    10443            \n  Branches       743      726      -17   \n===========================================\n- Hits          6221     6220       -1   \n- Misses        4222     4223       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...in/scala/com/twitter/logging/QueueingHandler.scala | 87.87% <0%> (-6.07%) | :arrow_down: |\n| ...l-core/src/main/scala/com/twitter/util/Event.scala | 90% <0%> (-0.67%) | :arrow_down: |\n| ...core/src/main/scala/com/twitter/util/Promise.scala | 74.16% <0%> (+0.33%) | :arrow_up: |\n| ...ng/src/main/scala/com/twitter/logging/Logger.scala | 64.88% <0%> (+0.76%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 890ae73...1a16da5. Read the comment docs.\n. # Codecov Report\nMerging #197 into develop will decrease coverage by 0.05%.\nThe diff coverage is 40%.\n\n\n```diff\n@@             Coverage Diff             @@\ndevelop     #197      +/-\n===========================================\n- Coverage    58.59%   58.53%   -0.06%   \n===========================================\n  Files          215      215            \n  Lines        10630    10634       +4   \n  Branches       712      708       -4   \n===========================================\n- Hits          6229     6225       -4   \n- Misses        4401     4409       +8\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...ain/scala/com/twitter/concurrent/AsyncStream.scala | 88.26% <40%> (-3.74%) | :arrow_down: |\n| ...twitter/finagle/stats/BroadcastStatsReceiver.scala | 47.16% <0%> (-1.89%) | :arrow_down: |\n| ...ng/src/main/scala/com/twitter/logging/Logger.scala | 64.12% <0%> (-0.77%) | :arrow_down: |\n| ...core/src/main/scala/com/twitter/util/Promise.scala | 73.48% <0%> (-0.34%) | :arrow_down: |\n| ...in/scala/com/twitter/logging/QueueingHandler.scala | 93.93% <0%> (+6.06%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update db2dbd5...741ccf9. Read the comment docs.\n. # Codecov Report\nMerging #199 into develop will increase coverage by 0.01%.\nThe diff coverage is 75%.\n\n\n```diff\n@@             Coverage Diff             @@\ndevelop     #199      +/-\n===========================================\n+ Coverage    58.45%   58.46%   +0.01%   \n===========================================\n  Files          212      212            \n  Lines        10547    10550       +3   \n  Branches       729      715      -14   \n===========================================\n+ Hits          6165     6168       +3   \n  Misses        4382     4382\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...ng/src/main/scala/com/twitter/logging/Logger.scala | 64.17% <75%> (-0.71%) | :arrow_down: |\n| ...core/src/main/scala/com/twitter/util/Promise.scala | 73.82% <0%> (\u00f8) | :arrow_up: |\n| ...in/scala/com/twitter/logging/QueueingHandler.scala | 93.93% <0%> (+6.06%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a45f884...bc7fd40. Read the comment docs.\n. # Codecov Report\nMerging #201 into develop will decrease coverage by 0.03%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\ndevelop    #201      +/-\n==========================================\n- Coverage    59.74%   59.7%   -0.04%   \n==========================================\n  Files          212     212            \n  Lines        10564   10565       +1   \n  Branches       934     923      -11   \n==========================================\n- Hits          6311    6308       -3   \n- Misses        4253    4257       +4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...-core/src/main/scala/com/twitter/util/Future.scala | 34.33% <100%> (+0.07%) | :arrow_up: |\n| ...core/src/main/scala/com/twitter/util/Promise.scala | 73.82% <0%> (-1.01%) | :arrow_down: |\n| ...ore/src/main/scala/com/twitter/util/Duration.scala | 84.11% <0%> (-0.59%) | :arrow_down: |\n| ...ain/scala/com/twitter/concurrent/AsyncStream.scala | 92.73% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9dc859e...bae3380. Read the comment docs.\n. # Codecov Report\nMerging #202 into develop will decrease coverage by 0.03%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff             @@\ndevelop     #202      +/-\n===========================================\n- Coverage    59.81%   59.78%   -0.04%   \n===========================================\n  Files          214      214            \n  Lines        10582    10582            \n  Branches       921      921            \n===========================================\n- Hits          6330     6326       -4   \n- Misses        4252     4256       +4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...in/scala/com/twitter/logging/QueueingHandler.scala | 93.93% <0%> (-6.07%) | :arrow_down: |\n| ...core/src/main/scala/com/twitter/util/Promise.scala | 75.08% <0%> (-1.04%) | :arrow_down: |\n| ...ain/scala/com/twitter/concurrent/AsyncStream.scala | 92.73% <0%> (+0.55%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f6c59f5...baa3ddd. Read the comment docs.\n. # Codecov Report\nMerging #203 into develop will decrease coverage by 0.03%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff             @@\ndevelop     #203      +/-\n===========================================\n- Coverage    59.81%   59.78%   -0.04%   \n===========================================\n  Files          214      214            \n  Lines        10582    10582            \n  Branches       921     1039     +118   \n===========================================\n- Hits          6330     6326       -4   \n- Misses        4252     4256       +4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...in/scala/com/twitter/logging/QueueingHandler.scala | 93.93% <0%> (-6.07%) | :arrow_down: |\n| ...ng/src/main/scala/com/twitter/logging/Logger.scala | 64.17% <0%> (-0.75%) | :arrow_down: |\n| ...core/src/main/scala/com/twitter/util/Promise.scala | 75.77% <0%> (-0.35%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f6c59f5...a83f523. Read the comment docs.\n. # Codecov Report\nMerging #204 into develop will decrease coverage by 0.03%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff             @@\ndevelop     #204      +/-\n===========================================\n- Coverage    59.81%   59.78%   -0.04%   \n===========================================\n  Files          214      214            \n  Lines        10582    10582            \n  Branches       921      921            \n===========================================\n- Hits          6330     6326       -4   \n- Misses        4252     4256       +4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...in/scala/com/twitter/logging/QueueingHandler.scala | 93.93% <0%> (-6.07%) | :arrow_down: |\n| ...twitter/finagle/stats/BroadcastStatsReceiver.scala | 47.16% <0%> (-1.89%) | :arrow_down: |\n| ...ore/src/main/scala/com/twitter/util/Duration.scala | 84.11% <0%> (-0.59%) | :arrow_down: |\n| ...core/src/main/scala/com/twitter/util/Promise.scala | 75.77% <0%> (-0.35%) | :arrow_down: |\n| ...ain/scala/com/twitter/concurrent/AsyncStream.scala | 92.73% <0%> (+0.55%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f6c59f5...3ae446b. Read the comment docs.\n. # Codecov Report\nMerging #205 into develop will decrease coverage by 0.02%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff             @@\ndevelop     #205      +/-\n===========================================\n- Coverage    59.81%   59.78%   -0.03%   \n===========================================\n  Files          214      214            \n  Lines        10589    10589            \n  Branches      1014      905     -109   \n===========================================\n- Hits          6334     6331       -3   \n- Misses        4255     4258       +3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...in/scala/com/twitter/logging/QueueingHandler.scala | 93.93% <0%> (-6.07%) | :arrow_down: |\n| ...ain/scala/com/twitter/concurrent/AsyncStream.scala | 92.17% <0%> (-0.56%) | :arrow_down: |\n| ...core/src/main/scala/com/twitter/util/Promise.scala | 75.67% <0%> (-0.34%) | :arrow_down: |\n| ...twitter/finagle/stats/BroadcastStatsReceiver.scala | 49.05% <0%> (+1.88%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 979c25d...ea8e477. Read the comment docs.\n. # Codecov Report\nMerging #208 into develop will decrease coverage by 0.02%.\nThe diff coverage is 0%.\n\n\n```diff\n@@             Coverage Diff             @@\ndevelop     #208      +/-\n===========================================\n- Coverage    59.42%   59.39%   -0.03%   \n===========================================\n  Files          214      214            \n  Lines        10530    10530            \n  Branches       886      901      +15   \n===========================================\n- Hits          6257     6254       -3   \n- Misses        4273     4276       +3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| util-app/src/main/scala/com/twitter/app/App.scala | 91.3% <0%> (\u00f8) | :arrow_up: |\n| ...ain/scala/com/twitter/concurrent/AsyncStream.scala | 90.5% <0%> (-1.68%) | :arrow_down: |\n| ...ng/src/main/scala/com/twitter/logging/Logger.scala | 64.17% <0%> (-0.75%) | :arrow_down: |\n| ...core/src/main/scala/com/twitter/util/Promise.scala | 76.09% <0%> (\u00f8) | :arrow_up: |\n| ...ore/src/main/scala/com/twitter/util/Duration.scala | 84.21% <0%> (+0.58%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 32d8cc8...3cf2d83. Read the comment docs.\n. # Codecov Report\nMerging #209 into develop will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff            @@\ndevelop     #209   +/-\n========================================\n  Coverage    59.64%   59.64%         \n========================================\n  Files          215      215         \n  Lines        10538    10538         \n  Branches       915      915         \n========================================\n  Hits          6285     6285         \n  Misses        4253     4253\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...twitter/finagle/stats/BroadcastStatsReceiver.scala | 47.16% <0%> (-1.89%) | :arrow_down: |\n| ...l-core/src/main/scala/com/twitter/util/Event.scala | 92% <0%> (-0.67%) | :arrow_down: |\n| ...core/src/main/scala/com/twitter/util/Promise.scala | 75.75% <0%> (-0.34%) | :arrow_down: |\n| ...ain/scala/com/twitter/concurrent/AsyncStream.scala | 93.29% <0%> (+0.55%) | :arrow_up: |\n| ...in/scala/com/twitter/logging/QueueingHandler.scala | 100% <0%> (+6.06%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0e27f59...f2f742c. Read the comment docs.\n. # Codecov Report\nMerging #215 into develop will increase coverage by 0.02%.\nThe diff coverage is 25%.\n\n\n```diff\n@@            Coverage Diff             @@\ndevelop    #215      +/-\n==========================================\n+ Coverage    59.77%   59.8%   +0.02%   \n==========================================\n  Files          216     216            \n  Lines        10622   10622            \n  Branches       883     883            \n==========================================\n+ Hits          6349    6352       +3   \n+ Misses        4273    4270       -3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| .../src/main/scala/com/twitter/concurrent/Offer.scala | 88.23% <\u00f8> (\u00f8) | :arrow_up: |\n| ...in/scala/com/twitter/util/LastWriteWinsQueue.scala | 20.68% <\u00f8> (\u00f8) | :arrow_up: |\n| ...e/src/main/scala/com/twitter/util/Base64Long.scala | 96.15% <\u00f8> (\u00f8) | :arrow_up: |\n| .../main/scala/com/twitter/concurrent/Scheduler.scala | 74.76% <\u00f8> (\u00f8) | :arrow_up: |\n| ...rc/main/scala/com/twitter/zk/NativeConnector.scala | 0% <\u00f8> (\u00f8) | :arrow_up: |\n| .../scala/com/twitter/concurrent/OfferBenchmark.scala | 0% <\u00f8> (\u00f8) | :arrow_up: |\n| ...main/scala/com/twitter/concurrent/Serialized.scala | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| ...e/src/main/scala/com/twitter/util/Disposable.scala | 0% <\u00f8> (\u00f8) | :arrow_up: |\n| ...rk/src/main/scala/com/twitter/jvm/CpuProfile.scala | 0% <\u00f8> (\u00f8) | :arrow_up: |\n| ...ng/src/main/scala/com/twitter/logging/Logger.scala | 64.17% <\u00f8> (-0.75%) | :arrow_down: |\n| ... and 48 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update af41e63...e8ad1b2. Read the comment docs.\n. # Codecov Report\nMerging #218 into develop will increase coverage by 0.03%.\nThe diff coverage is 0%.\n\n\n```diff\n@@             Coverage Diff             @@\ndevelop     #218      +/-\n===========================================\n+ Coverage    60.42%   60.46%   +0.03%   \n===========================================\n  Files          221      221            \n  Lines        11035    11036       +1   \n  Branches      1058     1023      -35   \n===========================================\n+ Hits          6668     6673       +5   \n+ Misses        4367     4363       -4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| util-jvm/src/main/scala/com/twitter/jvm/Jvm.scala | 71.42% <0%> (-1.3%) | :arrow_down: |\n| ...ain/scala/com/twitter/concurrent/AsyncStream.scala | 92.73% <0%> (\u00f8) | :arrow_up: |\n| util-core/src/main/scala/com/twitter/io/Buf.scala | 91.15% <0%> (+0.2%) | :arrow_up: |\n| ...core/src/main/scala/com/twitter/util/Promise.scala | 77.87% <0%> (+0.42%) | :arrow_up: |\n| ...ore/src/main/scala/com/twitter/util/Duration.scala | 84.21% <0%> (+0.58%) | :arrow_up: |\n| ...l-core/src/main/scala/com/twitter/util/Event.scala | 92.66% <0%> (+0.66%) | :arrow_up: |\n| ...ng/src/main/scala/com/twitter/logging/Logger.scala | 64.92% <0%> (+0.74%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bc363c2...ce8c17d. Read the comment docs.\n. # Codecov Report\nMerging #220 into develop will decrease coverage by <.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff             @@\ndevelop     #220      +/-\n===========================================\n- Coverage    60.44%   60.43%   -0.01%   \n===========================================\n  Files          221      221            \n  Lines        11040    11040            \n  Branches      1060     1060            \n===========================================\n- Hits          6673     6672       -1   \n- Misses        4367     4368       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...twitter/finagle/stats/BroadcastStatsReceiver.scala | 47.16% <0%> (-1.89%) | :arrow_down: |\n| ...core/src/main/scala/com/twitter/util/Promise.scala | 76.59% <0%> (-0.86%) | :arrow_down: |\n| ...ore/src/main/scala/com/twitter/util/Duration.scala | 83.62% <0%> (-0.59%) | :arrow_down: |\n| util-core/src/main/scala/com/twitter/io/Buf.scala | 90.94% <0%> (\u00f8) | :arrow_up: |\n| ...ain/scala/com/twitter/concurrent/AsyncStream.scala | 93.29% <0%> (+1.67%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c2ff7db...57b0c55. Read the comment docs.\n. # Codecov Report\nMerging #222 into develop will decrease coverage by 0.09%.\nThe diff coverage is 31.03%.\n\n\n```diff\n@@            Coverage Diff            @@\ndevelop    #222     +/-\n=========================================\n- Coverage    60.59%   60.5%   -0.1%   \n=========================================\n  Files          227     228      +1   \n  Lines        11078   11122     +44   \n  Branches      1041    1035      -6   \n=========================================\n+ Hits          6713    6729     +16   \n- Misses        4365    4393     +28\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| util-zk/src/main/scala/com/twitter/zk/Event.scala | 50% <0%> (+1.61%) | :arrow_up: |\n| .../src/main/scala/com/twitter/concurrent/Spool.scala | 80.43% <100%> (+1.08%) | :arrow_up: |\n| ...che/src/main/scala/com/twitter/cache/Refresh.scala | 93.33% <100%> (\u00f8) | :arrow_up: |\n| ...il-core/src/main/scala/com/twitter/util/Pool.scala | 94.73% <100%> (\u00f8) | :arrow_up: |\n| ...ore/src/main/scala/com/twitter/util/Closable.scala | 71.66% <100%> (\u00f8) | :arrow_up: |\n| ...ction/src/main/scala/com/twitter/util/LruMap.scala | 33.33% <21.73%> (-16.67%) | :arrow_down: |\n| ...twitter/finagle/stats/BroadcastStatsReceiver.scala | 47.16% <0%> (-1.89%) | :arrow_down: |\n| ...il-core/src/main/scala/com/twitter/io/Reader.scala | 95.65% <0%> (-1.32%) | :arrow_down: |\n| ...core/src/main/scala/com/twitter/util/Promise.scala | 77.02% <0%> (-0.43%) | :arrow_down: |\n| ...main/scala/com/twitter/logging/ScribeHandler.scala | 85.6% <0%> (\u00f8) | :arrow_up: |\n| ... and 2 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2a644b7...6927845. Read the comment docs.\n. # Codecov Report\nMerging #225 into develop will decrease coverage by 0.04%.\nThe diff coverage is 100%.\n\n\n```diff\n@@             Coverage Diff             @@\ndevelop     #225      +/-\n===========================================\n- Coverage     60.6%   60.55%   -0.05%   \n===========================================\n  Files          228      228            \n  Lines        11100    11100            \n  Branches      1055     1055            \n===========================================\n- Hits          6727     6722       -5   \n- Misses        4373     4378       +5\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| util-core/src/main/scala/com/twitter/io/Buf.scala | 91.15% <100%> (+0.41%) | :arrow_up: |\n| ...ain/scala/com/twitter/concurrent/AsyncStream.scala | 90.5% <0%> (-2.24%) | :arrow_down: |\n| ...ng/src/main/scala/com/twitter/logging/Logger.scala | 64.17% <0%> (-0.75%) | :arrow_down: |\n| ...ore/src/main/scala/com/twitter/util/Duration.scala | 83.62% <0%> (-0.59%) | :arrow_down: |\n| ...core/src/main/scala/com/twitter/util/Promise.scala | 77.02% <0%> (-0.43%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 845620b...c62cdee. Read the comment docs.\n. # Codecov Report\nMerging #230 into develop will increase coverage by 0.02%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff             @@\ndevelop     #230      +/-\n===========================================\n+ Coverage     47.6%   47.63%   +0.02%   \n===========================================\n  Files          228      228            \n  Lines        14894    14894            \n  Branches      1208     1208            \n===========================================\n+ Hits          7091     7095       +4   \n+ Misses        7803     7799       -4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...ore/src/main/scala/com/twitter/util/Duration.scala | 83.62% <0%> (-0.59%) | :arrow_down: |\n| util-core/src/main/scala/com/twitter/io/Buf.scala | 91.17% <0%> (+0.2%) | :arrow_up: |\n| ...ain/scala/com/twitter/concurrent/AsyncStream.scala | 92.73% <0%> (+0.55%) | :arrow_up: |\n| ...core/src/main/scala/com/twitter/util/Promise.scala | 77.92% <0%> (+1.29%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1d6e539...6d0762a. Read the comment docs.\n. # Codecov Report\nMerging #231 into develop will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@             Coverage Diff             @@\ndevelop     #231      +/-\n===========================================\n+ Coverage     47.6%   47.62%   +0.01%   \n===========================================\n  Files          228      228            \n  Lines        14894    14897       +3   \n  Branches      1208     1189      -19   \n===========================================\n+ Hits          7090     7094       +4   \n+ Misses        7804     7803       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...ore/src/main/scala/com/twitter/util/Duration.scala | 84.48% <100%> (+0.85%) | :arrow_up: |\n| ...twitter/finagle/stats/BroadcastStatsReceiver.scala | 47.16% <0%> (-1.89%) | :arrow_down: |\n| ...ng/src/main/scala/com/twitter/logging/Logger.scala | 64.17% <0%> (-0.75%) | :arrow_down: |\n| util-core/src/main/scala/com/twitter/io/Buf.scala | 90.96% <0%> (+0.2%) | :arrow_up: |\n| ...core/src/main/scala/com/twitter/util/Promise.scala | 77.48% <0%> (+0.43%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 50688fe...68cb475. Read the comment docs.\n. # Codecov Report\nMerging #232 into develop will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\ndevelop    #232   +/-\n=======================================\n  Coverage     47.6%   47.6%         \n=======================================\n  Files          229     229         \n  Lines        14935   14935         \n  Branches      1227    1227         \n=======================================\n  Hits          7110    7110         \n  Misses        7825    7825\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...l-jvm/src/main/scala/com/twitter/jvm/Hotspot.scala | 20.51% <\u00f8> (\u00f8) | :arrow_up: |\n| ...ain/scala/com/twitter/concurrent/AsyncStream.scala | 91.62% <0%> (-1.68%) | :arrow_down: |\n| ...ore/src/main/scala/com/twitter/util/Duration.scala | 84.21% <0%> (+0.58%) | :arrow_up: |\n| ...in/scala/com/twitter/logging/QueueingHandler.scala | 100% <0%> (+6.06%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 435c079...7951941. Read the comment docs.\n. # Codecov Report\nMerging #236 into develop will not change coverage.\nThe diff coverage is 0%.\n\n\n```diff\n@@           Coverage Diff           @@\ndevelop    #236   +/-\n=======================================\n  Coverage     47.4%   47.4%         \n=======================================\n  Files          234     234         \n  Lines        14908   14908         \n  Branches      1203    1203         \n=======================================\n  Hits          7067    7067         \n  Misses        7841    7841\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...com/twitter/zk/coordination/ZkAsyncSemaphore.scala | 0% <0%> (\u00f8) | :arrow_up: |\n| ...ain/scala/com/twitter/concurrent/AsyncStream.scala | 93.41% <0%> (-0.6%) | :arrow_down: |\n| ...ore/src/main/scala/com/twitter/util/Duration.scala | 83.62% <0%> (-0.59%) | :arrow_down: |\n| util-core/src/main/scala/com/twitter/io/Buf.scala | 91.17% <0%> (+0.2%) | :arrow_up: |\n| ...core/src/main/scala/com/twitter/util/Promise.scala | 77.5% <0%> (+0.41%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 886646e...828b7cc. Read the comment docs.\n. # Codecov Report\nMerging #238 into develop will increase coverage by 0.02%.\nThe diff coverage is 0%.\n\n\n```diff\n@@             Coverage Diff             @@\ndevelop     #238      +/-\n===========================================\n+ Coverage    47.25%   47.27%   +0.02%   \n===========================================\n  Files          233      233            \n  Lines        14891    14891            \n  Branches      1179     1177       -2   \n===========================================\n+ Hits          7036     7039       +3   \n+ Misses        7855     7852       -3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...-core/src/main/scala/com/twitter/util/Future.scala | 46.79% <0%> (-0.18%) | :arrow_down: |\n| ...in/scala/com/twitter/logging/QueueingHandler.scala | 93.93% <0%> (-6.07%) | :arrow_down: |\n| util-core/src/main/scala/com/twitter/io/Buf.scala | 91.17% <0%> (+0.41%) | :arrow_up: |\n| ...core/src/main/scala/com/twitter/util/Promise.scala | 77.5% <0%> (+0.41%) | :arrow_up: |\n| ...ore/src/main/scala/com/twitter/util/Duration.scala | 84.21% <0%> (+0.58%) | :arrow_up: |\n| ...ng/src/main/scala/com/twitter/logging/Logger.scala | 64.92% <0%> (+0.74%) | :arrow_up: |\n| ...twitter/finagle/stats/BroadcastStatsReceiver.scala | 49.05% <0%> (+1.88%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d9c5e4a...b443275. Read the comment docs.\n. # Codecov Report\nMerging #240 into develop will decrease coverage by 0.02%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff             @@\ndevelop     #240      +/-\n===========================================\n- Coverage     46.9%   46.88%   -0.03%   \n===========================================\n  Files          233      233            \n  Lines        14863    14863            \n  Branches      1187     1187            \n===========================================\n- Hits          6971     6968       -3   \n- Misses        7892     7895       +3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...in/scala/com/twitter/logging/QueueingHandler.scala | 93.93% <0%> (-6.07%) | :arrow_down: |\n| ...l-core/src/main/scala/com/twitter/util/Event.scala | 92% <0%> (-0.67%) | :arrow_down: |\n| ...ore/src/main/scala/com/twitter/util/Duration.scala | 83.81% <0%> (-0.58%) | :arrow_down: |\n| util-core/src/main/scala/com/twitter/io/Buf.scala | 90.75% <0%> (-0.21%) | :arrow_down: |\n| ...core/src/main/scala/com/twitter/util/Promise.scala | 77.5% <0%> (+0.41%) | :arrow_up: |\n| ...twitter/finagle/stats/BroadcastStatsReceiver.scala | 49.05% <0%> (+1.88%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b3083ac...62b30db. Read the comment docs.\n. # Codecov Report\nMerging #241 into develop will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff            @@\ndevelop     #241   +/-\n========================================\n  Coverage    47.07%   47.07%         \n========================================\n  Files          227      227         \n  Lines        14757    14757         \n  Branches      1167     1167         \n========================================\n  Hits          6947     6947         \n  Misses        7810     7810\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...core/src/main/scala/com/twitter/util/Promise.scala | 76.66% <0%> (-0.42%) | :arrow_down: |\n| util-core/src/main/scala/com/twitter/io/Buf.scala | 91.78% <0%> (+0.21%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 67d50ad...c74e62d. Read the comment docs.\n. # Codecov Report\nMerging #242 into develop will increase coverage by 0.06%.\nThe diff coverage is 100%.\n\n\n```diff\n@@             Coverage Diff             @@\ndevelop     #242      +/-\n===========================================\n+ Coverage    47.07%   47.14%   +0.06%   \n===========================================\n  Files          227      227            \n  Lines        14757    14778      +21   \n  Branches      1167     1176       +9   \n===========================================\n+ Hits          6947     6967      +20   \n- Misses        7810     7811       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...rc/main/scala/com/twitter/app/JavaGlobalFlag.scala | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| ...pp/src/main/scala/com/twitter/app/GlobalFlag.scala | 79.54% <100%> (+4.54%) | :arrow_up: |\n| .../src/main/scala/com/twitter/util/ConstFuture.scala | 82.6% <0%> (-3.11%) | :arrow_down: |\n| ...ng/src/main/scala/com/twitter/logging/Logger.scala | 64.17% <0%> (-0.75%) | :arrow_down: |\n| ...ore/src/main/scala/com/twitter/util/Duration.scala | 83.81% <0%> (-0.58%) | :arrow_down: |\n| ...til-core/src/main/scala/com/twitter/util/Var.scala | 97.6% <0%> (\u00f8) | :arrow_up: |\n| ...l-core/src/main/scala/com/twitter/util/Event.scala | 92.66% <0%> (\u00f8) | :arrow_up: |\n| ...-core/src/main/scala/com/twitter/util/Future.scala | 46.97% <0%> (+0.01%) | :arrow_up: |\n| .../scala/com/twitter/concurrent/AsyncSemaphore.scala | 92.3% <0%> (+0.3%) | :arrow_up: |\n| ...il-core/src/main/scala/com/twitter/io/Reader.scala | 91.86% <0%> (+0.64%) | :arrow_up: |\n| ... and 2 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 67d50ad...ff0ab0c. Read the comment docs.\n. \n",
    "tbekas": "@mosesn Thanks for the review! \n@ryanoneill Thank you for merging it! Do you know maybe whether there will be a cross build executed, so that there will be available artifacts for both scala 2.10 and 2.11?\n. @ryanoneill Thanks for the info and the link, cheers\n. ",
    "adriancole": "Cool will give it a spin\n. ",
    "nilday": "Of course, I will do that. And may I ask what you will use for script eval now?\n. ",
    "SethTisue": "nothing has changed at our end recently, except perhaps heavier server load. I will set SKIP_FLAKY\n. > @SethTisue we dug into the FuturePoolTest and figured out the problem, should be open sourced Monda\nawesome\n\nis the CumulativeGaugeTest better now?\n\nI believe we're now successfully skipping it with SKIP_FLAKY (https://github.com/scala/community-builds/pull/281)\n. the Scala 2.12 community build now tracks your develop branch, as of https://github.com/scala/community-builds/pull/307\nyou might still like to publish artifacts for 2.12.0-RC1?\n. > we might lobby scalatest\nthat might be easier now that Scala 2.12.0 JARs are on Maven Central\n. over at https://github.com/scala/community-builds/pull/399 I'm seeing\n[twitter-util] [info] ConfigTest:\n[twitter-util] [info] Config\n[twitter-util] [info] - should computed should delay evaluation\n[twitter-util] [info] - should subclass can override indepedent var for use in dependent var\n[twitter-util] [info]   should missingValues\n[twitter-util] [info]   - should must return empty Seq when no values are missing\n[twitter-util] [info]   - should must find top-level missing values\n[twitter-util] [info]   - should must find top-level and nested missing values\n[twitter-util] [info]   - should must find nested missing values in optional sub-configs *** FAILED ***\n[twitter-util] [info]     List(\"$anonfun$new$16.w\", \"baz.w\") did not equal List(\"baz.w\") (ConfigTest.scala:84)\n[twitter-util] [error] Failed tests:\n[twitter-util] [error]  com.twitter.util.ConfigTest\n. well, this is on a recently nightly of Scala 2.12.1. offhand, it looks like it might have to do with toString on lambdas giving a different answer in 2.12 versus 2.11?\nit's certainly possible there's been some regression on our end, but I'd need your help to determine that; I can't afford to go independently investigating in a totally unfamiliar codebase\n. the specific nightly used was 2.12.1-371bc2c-nightly. if you want to try it yourself locally, http://stackoverflow.com/q/40622878/86485\n. for now, to make the community build green again I will disable compiling and running of tests in your util-app subproject\n. util-logging is affected as well:\n[twitter-util] [error] Failed tests:\n[twitter-util] [error]  com.twitter.logging.AppTest\n. ah, we were using the develop branch in our 2.12 community build, but our 2.11.x-jdk8 build was using your master branch, which doesn't have the fix yet\nusing develop in the 2.12 one has been smooth sailing in recent months, so I'll provisionally change the 2.11.x-jdk8 one to use it as well\nthanks!\n. hmm, I hit \"rebuild\" again and it passed: https://scala-ci.typesafe.com/job/scala-2.11.x-jdk8-integrate-community-build/269/consoleFull\nlooks like the test is flaky...?\n. green again at https://scala-ci.typesafe.com/job/scala-2.12.x-integrate-community-build/1291/ \ud83d\udc4d. https://scala-ci.typesafe.com/job/scala-2.12.x-integrate-community-build/1807/consoleFull:\n[info] Project twitter-util------------: SUCCESS (project rebuilt ok)\nthanks!. tests re-enabled in community build: scala/community-builds@a0484294680c7b24d04dab68b5a0f41b496f7e64. > we'll need to set up new infrastructure to use different source across builds\nI see. we do consider it normal \u2014 not desirable, but the best we can do \u2014 that some projects that integrate especially closely with collections will need Scala-version-specific source directories for certain source files.. in sbt, alongside src/main/scala you can create any or all of src/main/scala-2.11, src/main/scala-2.12, src/main/scala-2.13.0-M4 and the right additional source directory will be picked up by sbt (according to scalaBinaryVersion) with zero added configuration.\nif you want to use the same version-specific source directory for more than one Scala version, then you need to do a little configuration, typically something very similar to:\nunmanagedSourceDirectories += (CrossVersion.partialVersion(scalaVersion.value) match {\n      case (2, n) if n < 13 => new File(scalaSource.value.getPath + \"_2.13-\")\n      case _ => new File(scalaSource.value.getPath + \"_2.13+\")\n    })\nthat kind of thing. 2.13.0-M5 is out now. 2.13.0-RC1 is planned for around the end of January. > ! Do you mind updating your description or commit message to use our commit message format?\ndone. this is a good upgrade to have, since 2.12.7-built artifacts can cause problems downstream, as per https://github.com/scala/scala/pull/7469. ping, any maintainers out there...?. ",
    "jvican": "Looking forward to the release of twitter/util for 2.12.0.\n. ",
    "malikvivek": "Can I get an update on this please?\n. Thanks a lot! Appreciate it!\n. The bytesWrittenToFile is set by openStream() which is called inside a synchronized block under openLog(). That preserves it's synchronized lock.\nThe purpose of removing it from openLog and adding it to openStream is to make sure that as and when the log file opened up or created, the file size is set at that moment.\n. Noted.\n. Will add white spaces as per style and push again.\n. Noted\n. Noted.\n. No it is not. It is comparing bytes (return type of Storage unit). fileSizeinMegaBytes is a Long type and to convert it into storage type, .megabytes is added. This just multiplies the constant Long and gives the storage size and type in bytes equivalent to megabytes\nMaking len = f.lenth().megabytes will not set as current size during execution in megabytes but will multiply it with (1024 * 1024), thereby setting the file size as very large which will cause the test to fail and is not the right functionality.\nprintln(s\"File size is ${len} and the set limit is ${fileSizeInMegaBytes.megabytes}\")\nAdding this print statement in test, just before the 'if' clause will tell us that it compares the byte sizes each time.\nThe output that it generates:\n```\nTesting started at 9:07 AM ...\nFile size is 300000.bytes and the set limit is 1048576.bytes\nFile size is 600000.bytes and the set limit is 1048576.bytes\nFile size is 900000.bytes and the set limit is 1048576.bytes\nFile size is 1048560.bytes and the set limit is 1048576.bytes\nFile size is 151440.bytes and the set limit is 1048576.bytes\nFile size is 1048560.bytes and the set limit is 1048576.bytes\nFile size is 451440.bytes and the set limit is 1048576.bytes\nProcess finished with exit code 0\n```\n. Sorry! My bad. Pushing the update.\n. Well, I initially thought of executing this test individually. I think I forgot to remove the comments. \nIt'll not be executed in that manner and WILL be executed every-time, just like other tests. This is definitely NOT a test that has to be executed individually, but every-time. \n. Oh! Okay. Got you. I've made the changes and instead of  (1 to 5).foreach, using two handlers. I'll make the code more Scalastyle and push changes asap. Thanks\n. ",
    "bryce-anderson": "@cvogt, are you still interested in getting this merged?\n. @cvogt: that seems like a reasonable course of action to me. Sorry this didn't end up getting merged, but sounds like your needs have been sorted out in way that is better in the long term.\n. Hi @SethTisue. This seems to be building/testing fine with the nightly version you've provided on my end. I think this was fixed recently by this commit: https://github.com/twitter/util/commit/3bbf6c936b04fe8b8f930137cf929c38b6618aa5. I can't tell for sure, but it looks like you're using the source for twitter-util 6.38 which didn't include that patch.\nDo you need anything from our end?\n. Closing because this work doesn't conform to our pull request guidelines. \ud83d\ude09 \n. I believe this will also require a change in finagle-netty4 which contains an implementation of ByteReader: https://github.com/twitter/finagle/blob/develop/finagle-netty4/src/main/scala/com/twitter/finagle/netty4/AbstractByteBufByteReader.scala. I'm cool with either, just wanted to note that it would have to be done. \ud83d\ude00\nOn May 18, 2017 11:03 AM, \"Moses Nakamura\" notifications@github.com wrote:\n\n@bryce-anderson https://github.com/bryce-anderson it's probably easiest\nfor us to just do it on behalf of @mehmetgunturkun\nhttps://github.com/mehmetgunturkun. the other thing we could do is\nmerge a finagle and a util commit (which should be possible) but we haven't\ntried it before.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/twitter/util/pull/191#issuecomment-302472640, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ACz9mvos_R4oKr3eYgO25OXMwxxFVseEks5r7HnigaJpZM4NfEPw\n.\n. Merged as SHA c8078e2ce71b07d641fca1ca4e24a4562b555fe3. Thanks @sullis!. Merged as SHA 9bd2760. Thanks @sullis!. @roanta, if we work on merging this now will it make it?. Merged as 7cfed2c2ab02f31e2df34a5f9545867f05cc7910. Thanks for the PR @dadjeibaah!\n@adleong, I think it's going to make it.. This has been merged as of 6f587b35acb19b9e526ff6f0111f9512d091175a. Thanks for the PR @SimonAdameit!. @jpbempel, that seems like a good idea to me with the small caviate that it will break Java users. Let me see how it looks internally and we can go from there.. Looks like there are a few use cases internally, but it looks like not so much that we shouldn't do it. I'll take a run at this.. This should be fixed in 9bde57caffa7e127967fb2452beab3d09fd9888e which unfortunately just missed the release window.. Merged as sha 3909d1ad17debc65b44a232ef92ca21f924d25e7. Thanks for the PR!. TBH, I'm not super familiar with using different class loaders, but it doesn't appear to me that this test will exercise the logic you've implemented.\nMaybe I'm wrong, so just let me know if that's the case.\n. Any reason we shouldn't scope this down to case NonFatal(_) | _: UnsatisfiedLinkError =>?. \n",
    "cvogt": "@bryce-anderson @ryanoneill hej guys, missed the first comment. yeah interested in getting this merged! I added a test.\n. Since Eval is deprecated and avoiding the dependency on twitter-util is nice in my case, I decided to fork/copy Eval.scala into the CBT code base instead, which is also Apache 2.0 licensed. The PR is linked above. Let me know if there are any concerns about this. I largely preserved history.\nI will be able to do the necessary changes for my purposes in my fork, so I am closing this PR.\n. @bryce-anderson no worries and thank you :)\n. Hi Bryce, classLoader is set to Eval.getClass.getClassLoader by default and here I am overriding it to be EvalTest.getClass.getClassLoader. I assume with pants Eval.getClass.getClassLoader == EvalTest.getClass.getClassLoader? So I had trouble coming up with a test that would demonstrate a different classLoader being used, but I think I have an idea now. Will get back to this and try to push a test that tests the replacement taking effect.\n. ",
    "yufangong": "Thank you @cevaris. This commit has been merged https://github.com/twitter/util/commit/9df5f2b83645cdfab41ecc1c136683435bd97fb4, Thanks again for the contribution.. Hi @xuwei-k, thanks for this awesome change. I'm merging it internally now. \nWe also have other repos: Finagle, Finatra, Twitter-Server and Scrooge, if you are interested doing more work like this, those are your candidates :). Merged in https://github.com/twitter/util/commit/fe3fda475fbda82770743e4de4522162f6a4f2a9. merged in https://github.com/twitter/util/commit/91b3a5e7bec60786879f8deba38ee7fc6fcd383d. ",
    "dlaidlaw": "Adding information: gradle dependency tree. Search for FAILED in the tree.\nRepositories referenced: \nrepositories {\n    mavenLocal()\n    mavenCentral()\n    maven { url 'http://maven.twttr.com' }\n}\n\n```\ncompile - Dependencies for source set 'main'.\n+--- io.buoyant:linkerd-main_2.11:0.8.4\n|    +--- org.scala-lang:scala-library:2.11.7 -> 2.11.8\n|    +--- io.buoyant:linkerd-admin_2.11:0.8.4\n|    |    +--- org.scala-lang:scala-library:2.11.7 -> 2.11.8\n|    |    +--- io.buoyant:linkerd-core_2.11:0.8.4\n|    |    |    +--- org.scala-lang:scala-library:2.11.7 -> 2.11.8\n|    |    |    +--- io.buoyant:config_2.11:0.8.4\n|    |    |    |    +--- org.scala-lang:scala-library:2.11.7 -> 2.11.8\n|    |    |    |    +--- com.twitter:finagle-core_2.11:6.39.0\n|    |    |    |    |    +--- org.scala-lang:scala-library:2.11.8\n|    |    |    |    |    +--- com.twitter:util-app_2.11:6.38.0\n|    |    |    |    |    |    +--- org.scala-lang:scala-library:2.11.8\n|    |    |    |    |    |    +--- com.twitter:util-core_2.11:6.38.0\n|    |    |    |    |    |    |    +--- org.scala-lang:scala-library:2.11.8\n|    |    |    |    |    |    |    +--- com.twitter:util-function_2.11:6.38.0\n|    |    |    |    |    |    |    |    --- org.scala-lang:scala-library:2.11.8\n|    |    |    |    |    |    |    +--- org.scala-lang:scala-reflect:2.11.8\n|    |    |    |    |    |    |    |    --- org.scala-lang:scala-library:2.11.8\n|    |    |    |    |    |    |    --- org.scala-lang.modules:scala-parser-combinators_2.11:1.0.4\n|    |    |    |    |    |    |         --- org.scala-lang:scala-library:2.11.6 -> 2.11.8\n|    |    |    |    |    |    +--- com.twitter:util-registry_2.11:6.38.0\n|    |    |    |    |    |    |    +--- org.scala-lang:scala-library:2.11.8\n|    |    |    |    |    |    |    --- com.twitter:util-core_2.11:6.38.0 ()\n|    |    |    |    |    |    --- com.google.guava:guava:16.0.1 -> 19.0\n|    |    |    |    |    +--- com.twitter:util-cache_2.11:6.38.0\n|    |    |    |    |    |    +--- org.scala-lang:scala-library:2.11.8\n|    |    |    |    |    |    +--- com.twitter:util-core_2.11:6.38.0 ()\n|    |    |    |    |    |    +--- com.google.guava:guava:16.0.1 -> 19.0\n|    |    |    |    |    |    +--- com.github.ben-manes.caffeine:caffeine:2.3.0\n|    |    |    |    |    |    --- com.google.code.findbugs:jsr305:2.0.1\n|    |    |    |    |    +--- com.twitter:util-codec_2.11:6.38.0\n|    |    |    |    |    |    +--- org.scala-lang:scala-library:2.11.8\n|    |    |    |    |    |    --- com.twitter:util-core_2.11:6.38.0 ()\n|    |    |    |    |    +--- com.twitter:util-core_2.11:6.38.0 ()\n|    |    |    |    |    +--- com.twitter:util-hashing_2.11:6.38.0\n|    |    |    |    |    |    --- org.scala-lang:scala-library:2.11.8\n|    |    |    |    |    +--- com.twitter:util-jvm_2.11:6.38.0\n|    |    |    |    |    |    +--- org.scala-lang:scala-library:2.11.8\n|    |    |    |    |    |    +--- com.twitter:util-app_2.11:6.38.0 ()\n|    |    |    |    |    |    --- com.twitter:util-core_2.11:6.38.0 ()\n|    |    |    |    |    +--- com.twitter:util-lint_2.11:6.38.0\n|    |    |    |    |    |    --- org.scala-lang:scala-library:2.11.8\n|    |    |    |    |    +--- com.twitter:util-logging_2.11:6.38.0\n|    |    |    |    |    |    +--- org.scala-lang:scala-library:2.11.8\n|    |    |    |    |    |    +--- com.twitter:util-core_2.11:6.38.0 ()\n|    |    |    |    |    |    +--- com.twitter:util-app_2.11:6.38.0 ()\n|    |    |    |    |    |    --- com.twitter:util-stats_2.11:6.38.0\n|    |    |    |    |    |         +--- org.scala-lang:scala-library:2.11.8\n|    |    |    |    |    |         +--- com.twitter:util-core_2.11:6.38.0 ()\n|    |    |    |    |    |         --- com.twitter:util-lint_2.11:6.38.0 ()\n|    |    |    |    |    +--- com.twitter:util-registry_2.11:6.38.0 ()\n|    |    |    |    |    +--- com.twitter:util-stats_2.11:6.38.0 ()\n|    |    |    |    |    +--- com.github.ben-manes.caffeine:caffeine:2.3.0\n|    |    |    |    |    +--- com.google.code.findbugs:jsr305:2.0.1\n|    |    |    |    |    --- io.netty:netty:3.10.1.Final\n|    |    |    |    +--- com.fasterxml.jackson.core:jackson-core:2.6.5\n|    |    |    |    +--- com.fasterxml.jackson.core:jackson-annotations:2.6.5\n|    |    |    |    +--- com.fasterxml.jackson.core:jackson-databind:2.6.5\n|    |    |    |    |    +--- com.fasterxml.jackson.core:jackson-annotations:2.6.0 -> 2.6.5\n|    |    |    |    |    --- com.fasterxml.jackson.core:jackson-core:2.6.5\n|    |    |    |    +--- com.fasterxml.jackson.module:jackson-module-scala_2.11:2.6.5\n|    |    |    |    |    +--- org.scala-lang:scala-library:2.11.7 -> 2.11.8\n|    |    |    |    |    +--- org.scala-lang:scala-reflect:2.11.7 -> 2.11.8 ()\n|    |    |    |    |    +--- com.fasterxml.jackson.core:jackson-core:2.6.5\n|    |    |    |    |    +--- com.fasterxml.jackson.core:jackson-annotations:2.6.5\n|    |    |    |    |    +--- com.fasterxml.jackson.core:jackson-databind:2.6.5 ()\n|    |    |    |    |    --- com.fasterxml.jackson.module:jackson-module-paranamer:2.6.5\n|    |    |    |    |         +--- com.fasterxml.jackson.core:jackson-databind:2.6.5 ()\n|    |    |    |    |         --- com.thoughtworks.paranamer:paranamer:2.6\n|    |    |    |    --- com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.6.5\n|    |    |    |         +--- com.fasterxml.jackson.core:jackson-core:2.6.5\n|    |    |    |         --- org.yaml:snakeyaml:1.15\n|    |    |    +--- io.buoyant:admin_2.11:0.8.4\n|    |    |    |    +--- org.scala-lang:scala-library:2.11.7 -> 2.11.8\n|    |    |    |    +--- io.buoyant:config_2.11:0.8.4 ()\n|    |    |    |    +--- io.buoyant:namer-core_2.11:0.8.4\n|    |    |    |    |    +--- org.scala-lang:scala-library:2.11.7 -> 2.11.8\n|    |    |    |    |    +--- io.buoyant:config_2.11:0.8.4 ()\n|    |    |    |    |    --- com.fasterxml.jackson.core:jackson-core:2.6.5\n|    |    |    |    +--- com.twitter:twitter-server_2.11:1.24.0\n|    |    |    |    |    +--- org.scala-lang:scala-library:2.11.8\n|    |    |    |    |    +--- com.twitter:finagle-core_2.11:6.39.0 ()\n|    |    |    |    |    +--- com.twitter:finagle-netty4-http_2.11:6.39.0\n|    |    |    |    |    |    +--- org.scala-lang:scala-library:2.11.8\n|    |    |    |    |    |    +--- com.twitter:finagle-core_2.11:6.39.0 ()\n|    |    |    |    |    |    +--- com.twitter:finagle-netty4_2.11:6.39.0\n|    |    |    |    |    |    |    +--- org.scala-lang:scala-library:2.11.8\n|    |    |    |    |    |    |    +--- com.twitter:finagle-core_2.11:6.39.0 ()\n|    |    |    |    |    |    |    +--- com.twitter:util-app_2.11:6.38.0 ()\n|    |    |    |    |    |    |    +--- com.twitter:util-cache_2.11:6.38.0 ()\n|    |    |    |    |    |    |    +--- com.twitter:util-codec_2.11:6.38.0 ()\n|    |    |    |    |    |    |    +--- com.twitter:util-core_2.11:6.38.0 ()\n|    |    |    |    |    |    |    +--- com.twitter:util-stats_2.11:6.38.0 ()\n|    |    |    |    |    |    |    +--- io.netty:netty-codec-http:4.1.4.Final\n|    |    |    |    |    |    |    |    --- io.netty:netty-codec:4.1.4.Final\n|    |    |    |    |    |    |    |         --- io.netty:netty-transport:4.1.4.Final\n|    |    |    |    |    |    |    |              +--- io.netty:netty-buffer:4.1.4.Final\n|    |    |    |    |    |    |    |              |    --- io.netty:netty-common:4.1.4.Final\n|    |    |    |    |    |    |    |              --- io.netty:netty-resolver:4.1.4.Final\n|    |    |    |    |    |    |    |                   --- io.netty:netty-common:4.1.4.Final\n|    |    |    |    |    |    |    +--- io.netty:netty-handler:4.1.4.Final\n|    |    |    |    |    |    |    |    +--- io.netty:netty-buffer:4.1.4.Final ()\n|    |    |    |    |    |    |    |    +--- io.netty:netty-transport:4.1.4.Final ()\n|    |    |    |    |    |    |    |    --- io.netty:netty-codec:4.1.4.Final ()\n|    |    |    |    |    |    |    +--- io.netty:netty-transport:4.1.4.Final ()\n|    |    |    |    |    |    |    --- io.netty:netty-handler-proxy:4.1.4.Final\n|    |    |    |    |    |    |         +--- io.netty:netty-transport:4.1.4.Final ()\n|    |    |    |    |    |    |         +--- io.netty:netty-codec-socks:4.1.4.Final\n|    |    |    |    |    |    |         |    --- io.netty:netty-codec:4.1.4.Final ()\n|    |    |    |    |    |    |         --- io.netty:netty-codec-http:4.1.4.Final ()\n|    |    |    |    |    |    +--- com.twitter:finagle-http_2.11:6.39.0\n|    |    |    |    |    |    |    +--- org.scala-lang:scala-library:2.11.8\n|    |    |    |    |    |    |    +--- com.twitter:finagle-core_2.11:6.39.0 ()\n|    |    |    |    |    |    |    +--- com.twitter:finagle-toggle_2.11:6.39.0\n|    |    |    |    |    |    |    |    +--- org.scala-lang:scala-library:2.11.8\n|    |    |    |    |    |    |    |    +--- com.twitter:util-app_2.11:6.38.0 ()\n|    |    |    |    |    |    |    |    +--- com.twitter:util-core_2.11:6.38.0 ()\n|    |    |    |    |    |    |    |    +--- com.twitter:util-logging_2.11:6.38.0 ()\n|    |    |    |    |    |    |    |    +--- com.twitter:util-registry_2.11:6.38.0 ()\n|    |    |    |    |    |    |    |    +--- com.twitter:util-stats_2.11:6.38.0 ()\n|    |    |    |    |    |    |    |    +--- com.fasterxml.jackson.core:jackson-core:2.6.5\n|    |    |    |    |    |    |    |    +--- com.fasterxml.jackson.core:jackson-databind:2.6.5 ()\n|    |    |    |    |    |    |    |    +--- com.fasterxml.jackson.module:jackson-module-scala_2.11:2.6.5 ()\n|    |    |    |    |    |    |    |    --- com.google.guava:guava:16.0.1 -> 19.0\n|    |    |    |    |    |    |    +--- com.twitter:util-codec_2.11:6.38.0 ()\n|    |    |    |    |    |    |    +--- com.twitter:util-collection_2.11:6.38.0\n|    |    |    |    |    |    |    |    +--- org.scala-lang:scala-library:2.11.8\n|    |    |    |    |    |    |    |    +--- com.twitter:util-core_2.11:6.38.0 ()\n|    |    |    |    |    |    |    |    --- com.google.guava:guava:16.0.1 -> 19.0\n|    |    |    |    |    |    |    +--- com.twitter:util-logging_2.11:6.38.0 ()\n|    |    |    |    |    |    |    +--- commons-lang:commons-lang:2.6\n|    |    |    |    |    |    |    --- com.google.guava:guava:16.0.1 -> 19.0\n|    |    |    |    |    |    +--- com.twitter:util-app_2.11:6.38.0 ()\n|    |    |    |    |    |    +--- com.twitter:util-codec_2.11:6.38.0 ()\n|    |    |    |    |    |    +--- com.twitter:util-core_2.11:6.38.0 ()\n|    |    |    |    |    |    +--- com.twitter:util-jvm_2.11:6.38.0 ()\n|    |    |    |    |    |    +--- com.twitter:util-stats_2.11:6.38.0 ()\n|    |    |    |    |    |    +--- commons-lang:commons-lang:2.6\n|    |    |    |    |    |    --- io.netty:netty-codec-http:4.1.4.Final ()\n|    |    |    |    |    +--- com.twitter:finagle-toggle_2.11:6.39.0 ()\n|    |    |    |    |    +--- com.twitter:finagle-zipkin-core_2.11:6.39.0\n|    |    |    |    |    |    +--- org.scala-lang:scala-library:2.11.8\n|    |    |    |    |    |    +--- com.twitter:finagle-core_2.11:6.39.0 ()\n|    |    |    |    |    |    +--- com.twitter:finagle-thrift_2.11:6.39.0\n|    |    |    |    |    |    |    +--- org.scala-lang:scala-library:2.11.8\n|    |    |    |    |    |    |    +--- com.twitter:finagle-core_2.11:6.39.0 ()\n|    |    |    |    |    |    |    +--- com.twitter:finagle-netty4_2.11:6.39.0 ()\n|    |    |    |    |    |    |    +--- org.apache.thrift:libthrift:0.5.0-1\n|    |    |    |    |    |    |    |    +--- org.slf4j:slf4j-api:1.5.8 -> 1.7.7\n|    |    |    |    |    |    |    |    --- commons-lang:commons-lang:2.5 -> 2.6\n|    |    |    |    |    |    |    --- com.twitter:scrooge-core_2.11:4.11.0\n|    |    |    |    |    |    |         --- org.scala-lang:scala-library:2.11.8\n|    |    |    |    |    |    +--- com.twitter:util-codec_2.11:6.38.0 ()\n|    |    |    |    |    |    +--- com.twitter:util-events_2.11:6.38.0\n|    |    |    |    |    |    |    +--- org.scala-lang:scala-library:2.11.8\n|    |    |    |    |    |    |    --- com.twitter:util-app_2.11:6.38.0 ()\n|    |    |    |    |    |    +--- com.twitter:util-core_2.11:6.38.0 ()\n|    |    |    |    |    |    +--- com.twitter:util-stats_2.11:6.38.0 ()\n|    |    |    |    |    |    +--- org.apache.thrift:libthrift:0.5.0-1 ()\n|    |    |    |    |    |    +--- com.twitter:scrooge-core_2.11:4.11.0 ()\n|    |    |    |    |    |    +--- com.fasterxml.jackson.core:jackson-core:2.6.5\n|    |    |    |    |    |    +--- com.fasterxml.jackson.core:jackson-databind:2.6.5 ()\n|    |    |    |    |    |    +--- com.fasterxml.jackson.module:jackson-module-scala_2.11:2.6.5 ()\n|    |    |    |    |    |    --- com.google.guava:guava:16.0.1 -> 19.0\n|    |    |    |    |    +--- com.twitter:util-app_2.11:6.38.0 ()\n|    |    |    |    |    +--- com.twitter:util-core_2.11:6.38.0 ()\n|    |    |    |    |    +--- com.twitter:util-events_2.11:6.38.0 ()\n|    |    |    |    |    +--- com.twitter:util-jvm_2.11:6.38.0 ()\n|    |    |    |    |    +--- com.twitter:util-lint_2.11:6.38.0 ()\n|    |    |    |    |    +--- com.twitter:util-logging_2.11:6.38.0 ()\n|    |    |    |    |    +--- com.twitter:util-registry_2.11:6.38.0 ()\n|    |    |    |    |    +--- com.fasterxml.jackson.core:jackson-core:2.6.5\n|    |    |    |    |    +--- com.fasterxml.jackson.core:jackson-databind:2.6.5 ()\n|    |    |    |    |    +--- com.fasterxml.jackson.module:jackson-module-scala_2.11:2.6.5 ()\n|    |    |    |    |    +--- com.google.guava:guava:16.0.1 -> 19.0\n|    |    |    |    |    --- org.scala-lang.modules:scala-xml_2.11:1.0.5\n|    |    |    |    |         --- org.scala-lang:scala-library:2.11.7 -> 2.11.8\n|    |    |    |    --- com.twitter:finagle-stats_2.11:6.39.0\n|    |    |    |         +--- org.scala-lang:scala-library:2.11.8\n|    |    |    |         +--- com.twitter:finagle-core_2.11:6.39.0 ()\n|    |    |    |         +--- com.twitter:finagle-http_2.11:6.39.0 ()\n|    |    |    |         +--- com.twitter:finagle-toggle_2.11:6.39.0 ()\n|    |    |    |         +--- com.twitter.common:metrics:0.0.38\n|    |    |    |         |    +--- com.twitter.common:base:0.0.115\n|    |    |    |         |    |    +--- com.twitter.common:quantity:0.0.99\n|    |    |    |         |    |    |    +--- com.twitter.common:collections:0.0.110\n|    |    |    |         |    |    |    |    +--- commons-lang:commons-lang:2.6\n|    |    |    |         |    |    |    |    +--- com.google.guava:guava:16.0.1 -> 19.0\n|    |    |    |         |    |    |    |    --- com.google.code.findbugs:jsr305:2.0.1\n|    |    |    |         |    |    |    +--- com.google.guava:guava:16.0.1 -> 19.0\n|    |    |    |         |    |    |    +--- com.google.code.findbugs:jsr305:2.0.1\n|    |    |    |         |    |    |    --- commons-lang:commons-lang:2.6\n|    |    |    |         |    |    +--- com.twitter.common:util-system-mocks:0.0.104\n|    |    |    |         |    |    |    +--- com.twitter.common:quantity:0.0.99 ()\n|    |    |    |         |    |    |    +--- com.google.guava:guava:16.0.1 -> 19.0\n|    |    |    |         |    |    |    +--- com.google.code.findbugs:jsr305:2.0.1\n|    |    |    |         |    |    |    --- commons-lang:commons-lang:2.6\n|    |    |    |         |    |    +--- commons-lang:commons-lang:2.6\n|    |    |    |         |    |    +--- com.google.guava:guava:16.0.1 -> 19.0\n|    |    |    |         |    |    --- com.google.code.findbugs:jsr305:2.0.1\n|    |    |    |         |    +--- com.twitter.common:collections:0.0.110 ()\n|    |    |    |         |    +--- com.twitter.common:quantity:0.0.99 ()\n|    |    |    |         |    +--- com.twitter.common:stats-util:0.0.59\n|    |    |    |         |    |    +--- com.twitter.common:quantity:0.0.99 ()\n|    |    |    |         |    |    +--- com.twitter.common:util-system-mocks:0.0.104 ()\n|    |    |    |         |    |    +--- com.google.guava:guava:16.0.1 -> 19.0\n|    |    |    |         |    |    +--- com.google.code.findbugs:jsr305:2.0.1\n|    |    |    |         |    |    +--- commons-lang:commons-lang:2.6\n|    |    |    |         |    |    --- com.google.inject:guice:4.0\n|    |    |    |         |    |         +--- javax.inject:javax.inject:1\n|    |    |    |         |    |         +--- aopalliance:aopalliance:1.0\n|    |    |    |         |    |         --- com.google.guava:guava:16.0.1 -> 19.0\n|    |    |    |         |    +--- com.twitter.common:util-executor-service-shutdown:0.0.67\n|    |    |    |         |    |    +--- com.twitter.common:base:0.0.115 ()\n|    |    |    |         |    |    +--- com.twitter.common:quantity:0.0.99 ()\n|    |    |    |         |    |    +--- com.google.guava:guava:16.0.1 -> 19.0\n|    |    |    |         |    |    +--- com.google.code.findbugs:jsr305:2.0.1\n|    |    |    |         |    |    --- commons-lang:commons-lang:2.6\n|    |    |    |         |    +--- com.twitter.common:util-system-mocks:0.0.104 ()\n|    |    |    |         |    +--- com.google.code.findbugs:jsr305:2.0.1\n|    |    |    |         |    +--- com.google.guava:guava:16.0.1 -> 19.0\n|    |    |    |         |    +--- commons-lang:commons-lang:2.6\n|    |    |    |         |    --- com.google.inject:guice:4.0 ()\n|    |    |    |         +--- com.twitter:util-app_2.11:6.38.0 ()\n|    |    |    |         +--- com.twitter:util-core_2.11:6.38.0 ()\n|    |    |    |         +--- com.twitter:util-events_2.11:6.38.0 ()\n|    |    |    |         +--- com.twitter:util-lint_2.11:6.38.0 ()\n|    |    |    |         +--- com.twitter:util-logging_2.11:6.38.0 ()\n|    |    |    |         +--- com.twitter:util-registry_2.11:6.38.0 ()\n|    |    |    |         +--- com.twitter:util-stats_2.11:6.38.0 ()\n|    |    |    |         +--- com.fasterxml.jackson.core:jackson-core:2.6.5\n|    |    |    |         +--- com.fasterxml.jackson.core:jackson-databind:2.6.5 ()\n|    |    |    |         +--- com.fasterxml.jackson.module:jackson-module-scala_2.11:2.6.5 ()\n|    |    |    |         --- com.google.guava:guava:16.0.1 -> 19.0\n|    |    |    +--- io.buoyant:telemetry-core_2.11:0.8.4\n|    |    |    |    +--- org.scala-lang:scala-library:2.11.7 -> 2.11.8\n|    |    |    |    +--- io.buoyant:config_2.11:0.8.4 ()\n|    |    |    |    --- com.twitter:finagle-core_2.11:6.39.0 ()\n|    |    |    +--- io.buoyant:namer-core_2.11:0.8.4 ()\n|    |    |    +--- io.buoyant:router-core_2.11:0.8.4\n|    |    |    |    +--- org.scala-lang:scala-library:2.11.7 -> 2.11.8\n|    |    |    |    --- com.twitter:finagle-core_2.11:6.39.0 ()\n|    |    |    --- com.fasterxml.jackson.core:jackson-core:2.6.5\n|    |    +--- io.buoyant:admin_2.11:0.8.4 ()\n|    |    +--- io.buoyant:namer-core_2.11:0.8.4 ()\n|    |    --- com.twitter:twitter-server_2.11:1.24.0 ()\n|    +--- io.buoyant:config_2.11:0.8.4 ()\n|    +--- io.buoyant:linkerd-core_2.11:0.8.4 ()\n|    +--- io.buoyant:telemetry-common-metrics_2.11:0.8.4\n|    |    +--- org.scala-lang:scala-library:2.11.7 -> 2.11.8\n|    |    +--- io.buoyant:admin_2.11:0.8.4 ()\n|    |    +--- io.buoyant:telemetry-core_2.11:0.8.4 ()\n|    |    +--- com.twitter:finagle-core_2.11:6.39.0 ()\n|    |    --- com.twitter:finagle-stats_2.11:6.39.0 ()\n|    +--- com.twitter:twitter-server_2.11:1.24.0 ()\n|    +--- com.fasterxml.jackson.core:jackson-core:2.6.5\n|    +--- com.fasterxml.jackson.core:jackson-databind:2.6.5 ()\n|    --- com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.6.5 ()\n+--- io.buoyant:namerd-iface-control-http_2.11:0.8.4\n|    +--- org.scala-lang:scala-library:2.11.7 -> 2.11.8\n|    +--- io.buoyant:namerd-core_2.11:0.8.4\n|    |    +--- org.scala-lang:scala-library:2.11.7 -> 2.11.8\n|    |    +--- io.buoyant:admin_2.11:0.8.4 ()\n|    |    +--- io.buoyant:config_2.11:0.8.4 ()\n|    |    +--- io.buoyant:namer-core_2.11:0.8.4 ()\n|    |    --- io.buoyant:telemetry-core_2.11:0.8.4 ()\n|    --- com.twitter:finagle-http_2.11:6.39.0 ()\n+--- io.buoyant:interpreter-namerd_2.11:0.8.4\n|    +--- org.scala-lang:scala-library:2.11.7 -> 2.11.8\n|    +--- io.buoyant:namer-core_2.11:0.8.4 ()\n|    +--- io.buoyant:namerd-iface-interpreter-thrift_2.11:0.8.4\n|    |    +--- org.scala-lang:scala-library:2.11.7 -> 2.11.8\n|    |    +--- io.buoyant:namerd-core_2.11:0.8.4 ()\n|    |    +--- io.buoyant:namerd-iface-interpreter-thrift-idl_2.11:0.8.4\n|    |    |    +--- org.scala-lang:scala-library:2.11.7 -> 2.11.8\n|    |    |    --- com.twitter:finagle-thrift_2.11:6.39.0 ()\n|    |    +--- com.google.guava:guava:19.0\n|    |    +--- com.twitter:finagle-thrift_2.11:6.39.0 ()\n|    |    --- com.twitter:finagle-thriftmux_2.11:6.39.0\n|    |         +--- org.scala-lang:scala-library:2.11.8\n|    |         +--- com.twitter:finagle-core_2.11:6.39.0 ()\n|    |         +--- com.twitter:finagle-mux_2.11:6.39.0\n|    |         |    +--- org.scala-lang:scala-library:2.11.8\n|    |         |    +--- com.twitter:finagle-core_2.11:6.39.0 ()\n|    |         |    +--- com.twitter:finagle-netty4_2.11:6.39.0 ()\n|    |         |    +--- com.twitter:finagle-toggle_2.11:6.39.0 ()\n|    |         |    +--- com.twitter:util-app_2.11:6.38.0 ()\n|    |         |    +--- com.twitter:util-core_2.11:6.38.0 ()\n|    |         |    +--- com.twitter:util-logging_2.11:6.38.0 ()\n|    |         |    +--- com.twitter:util-stats_2.11:6.38.0 ()\n|    |         |    --- com.twitter.common:stats-util:0.0.59 ()\n|    |         +--- com.twitter:finagle-thrift_2.11:6.39.0 ()\n|    |         +--- com.twitter:util-core_2.11:6.38.0 ()\n|    |         +--- com.twitter:util-logging_2.11:6.38.0 ()\n|    |         +--- com.twitter:util-stats_2.11:6.38.0 ()\n|    |         +--- org.apache.thrift:libthrift:0.5.0-1 ()\n|    |         --- com.twitter:scrooge-core_2.11:4.11.0 ()\n|    --- io.buoyant:router-core_2.11:0.8.4 ()\n+--- io.buoyant:namerd-storage-zk_2.11:0.8.4\n|    +--- org.scala-lang:scala-library:2.11.7 -> 2.11.8\n|    +--- io.buoyant:namerd-core_2.11:0.8.4 ()\n|    --- com.twitter:finagle-serversets_2.11:6.39.0\n|         +--- org.scala-lang:scala-library:2.11.8\n|         +--- com.twitter:finagle-core_2.11:6.39.0 ()\n|         +--- com.github.ben-manes.caffeine:caffeine:2.3.0\n|         +--- com.twitter:util-cache_2.11:6.38.0 ()\n|         +--- com.twitter:util-zk-common_2.11:6.38.0\n|         |    +--- org.scala-lang:scala-library:2.11.8\n|         |    +--- com.twitter:util-core_2.11:6.38.0 ()\n|         |    +--- com.twitter:util-logging_2.11:6.38.0 ()\n|         |    +--- com.twitter:util-zk_2.11:6.38.0\n|         |    |    +--- org.scala-lang:scala-library:2.11.8\n|         |    |    +--- com.twitter:util-core_2.11:6.38.0 ()\n|         |    |    +--- com.twitter:util-collection_2.11:6.38.0 ()\n|         |    |    +--- com.twitter:util-logging_2.11:6.38.0 ()\n|         |    |    --- org.apache.zookeeper:zookeeper:3.5.0-alpha -> 99.99 FAILED\n|         |    +--- com.twitter:util-collection_2.11:6.38.0 ()\n|         |    +--- com.twitter:util-hashing_2.11:6.38.0 ()\n|         |    +--- com.twitter.common.zookeeper:client:0.0.80\n|         |    |    +--- com.twitter:finagle-core-java:6.38.1 FAILED\n|         |    |    +--- com.twitter:finagle-core_2.11:6.38.1 -> 6.39.0 ()\n|         |    |    +--- com.twitter:util-core-java:6.37.1 FAILED\n|         |    |    +--- com.twitter:util-core_2.11:6.37.1 -> 6.38.0 ()\n|         |    |    +--- com.twitter.common:base:0.0.115 ()\n|         |    |    +--- com.twitter.common:net-util:0.0.102\n|         |    |    |    +--- com.twitter.common:collections:0.0.110 ()\n|         |    |    |    +--- commons-codec:commons-codec:1.9\n|         |    |    |    +--- commons-lang:commons-lang:2.6\n|         |    |    |    +--- com.google.guava:guava:16.0.1 -> 19.0\n|         |    |    |    --- com.google.code.findbugs:jsr305:2.0.1\n|         |    |    +--- com.twitter.common:quantity:0.0.99 ()\n|         |    |    +--- com.google.guava:guava:16.0.1 -> 19.0\n|         |    |    +--- com.google.code.findbugs:jsr305:2.0.1\n|         |    |    +--- org.apache.zookeeper:zookeeper-client:10.0.23-20160708234148-60113c3 FAILED\n|         |    |    +--- com.fasterxml.jackson.core:jackson-core:2.6.5\n|         |    |    +--- com.fasterxml.jackson.core:jackson-databind:2.6.5 ()\n|         |    |    +--- org.apache.zookeeper:zookeeper:99.99 FAILED\n|         |    |    +--- com.github.ben-manes.caffeine:caffeine:2.3.0\n|         |    |    +--- io.netty:netty:3.10.1.Final\n|         |    |    +--- org.scala-lang.modules:scala-parser-combinators_2.11:1.0.4 ()\n|         |    |    +--- org.scala-lang:scala-library:2.11.8\n|         |    |    +--- org.scala-lang:scala-reflect:2.11.8 ()\n|         |    |    +--- commons-lang:commons-lang:2.6\n|         |    |    --- commons-codec:commons-codec:1.9\n|         |    +--- com.twitter.common.zookeeper:group:0.0.91\n|         |    |    +--- com.twitter.common.zookeeper:client:0.0.80 ()\n|         |    |    +--- com.twitter:finagle-core-java:6.38.1 FAILED\n|         |    |    +--- com.twitter:finagle-core_2.11:6.38.1 -> 6.39.0 ()\n|         |    |    +--- com.twitter:util-core-java:6.37.1 FAILED\n|         |    |    +--- com.twitter:util-core_2.11:6.37.1 -> 6.38.0 ()\n|         |    |    +--- com.twitter.common:base:0.0.115 ()\n|         |    |    +--- com.twitter.common:util:0.0.121\n|         |    |    |    +--- com.twitter.common:util-executor-service-shutdown:0.0.67 ()\n|         |    |    |    +--- com.twitter.common:util-system-mocks:0.0.104 ()\n|         |    |    |    +--- com.twitter.common:jdk-logging:0.0.82\n|         |    |    |    |    +--- com.google.guava:guava:16.0.1 -> 19.0\n|         |    |    |    |    --- com.google.code.findbugs:jsr305:2.0.1\n|         |    |    |    +--- com.twitter.common:base:0.0.115 ()\n|         |    |    |    +--- com.twitter.common:collections:0.0.110 ()\n|         |    |    |    +--- com.twitter.common:quantity:0.0.99 ()\n|         |    |    |    +--- com.twitter.common:stats:0.0.115\n|         |    |    |    |    +--- com.twitter.common:stat:0.0.74\n|         |    |    |    |    +--- com.twitter.common:stats-registry:0.0.1\n|         |    |    |    |    |    --- com.twitter.common:stat:0.0.74\n|         |    |    |    |    +--- com.twitter.common:stats-provider:0.0.93\n|         |    |    |    |    |    +--- com.twitter.common:stat:0.0.74\n|         |    |    |    |    |    +--- com.google.guava:guava:16.0.1 -> 19.0\n|         |    |    |    |    |    --- com.google.code.findbugs:jsr305:2.0.1\n|         |    |    |    |    +--- com.twitter.common:application-action:0.0.90\n|         |    |    |    |    |    +--- com.twitter.common:base:0.0.115 ()\n|         |    |    |    |    |    +--- com.google.guava:guava:16.0.1 -> 19.0\n|         |    |    |    |    |    +--- com.google.code.findbugs:jsr305:2.0.1\n|         |    |    |    |    |    +--- com.google.inject:guice:4.0 ()\n|         |    |    |    |    |    --- commons-lang:commons-lang:2.6\n|         |    |    |    |    +--- com.twitter.common:base:0.0.115 ()\n|         |    |    |    |    +--- com.twitter.common:collections:0.0.110 ()\n|         |    |    |    |    +--- com.twitter.common:quantity:0.0.99 ()\n|         |    |    |    |    +--- com.twitter.common:util-sampler:0.0.78\n|         |    |    |    |    |    +--- com.twitter.common:util-system-mocks:0.0.104 ()\n|         |    |    |    |    |    +--- com.google.guava:guava:16.0.1 -> 19.0\n|         |    |    |    |    |    +--- com.google.code.findbugs:jsr305:2.0.1\n|         |    |    |    |    |    --- commons-lang:commons-lang:2.6\n|         |    |    |    |    +--- com.twitter.common:util-system-mocks:0.0.104 ()\n|         |    |    |    |    +--- com.google.guava:guava:16.0.1 -> 19.0\n|         |    |    |    |    +--- com.google.code.findbugs:jsr305:2.0.1\n|         |    |    |    |    +--- com.google.inject:guice:4.0 ()\n|         |    |    |    |    --- commons-lang:commons-lang:2.6\n|         |    |    |    +--- com.twitter.common:stats-provider:0.0.93 ()\n|         |    |    |    +--- com.google.guava:guava:16.0.1 -> 19.0\n|         |    |    |    +--- com.google.code.findbugs:jsr305:2.0.1\n|         |    |    |    +--- commons-lang:commons-lang:2.6\n|         |    |    |    --- com.google.inject:guice:4.0 ()\n|         |    |    +--- com.google.guava:guava:16.0.1 -> 19.0\n|         |    |    +--- com.google.code.findbugs:jsr305:2.0.1\n|         |    |    +--- org.apache.zookeeper:zookeeper-client:10.0.23-20160708234148-60113c3 FAILED\n|         |    |    +--- com.fasterxml.jackson.core:jackson-core:2.6.5\n|         |    |    +--- com.fasterxml.jackson.core:jackson-databind:2.6.5 ()\n|         |    |    +--- org.apache.zookeeper:zookeeper:99.99 FAILED\n|         |    |    +--- com.github.ben-manes.caffeine:caffeine:2.3.0\n|         |    |    +--- io.netty:netty:3.10.1.Final\n|         |    |    +--- org.scala-lang.modules:scala-parser-combinators_2.11:1.0.4 ()\n|         |    |    +--- org.scala-lang:scala-library:2.11.8\n|         |    |    +--- org.scala-lang:scala-reflect:2.11.8 ()\n|         |    |    +--- commons-lang:commons-lang:2.6\n|         |    |    +--- commons-codec:commons-codec:1.9\n|         |    |    --- com.google.inject:guice:4.0 ()\n|         |    +--- com.twitter.common.zookeeper:server-set:1.0.111\n|         |    |    +--- com.twitter.common.zookeeper:client:0.0.80 ()\n|         |    |    +--- com.twitter.common.zookeeper:group:0.0.91 ()\n|         |    |    +--- com.twitter.common:args:0.2.41\n|         |    |    |    +--- com.twitter.common:args-core:0.1.37\n|         |    |    |    |    +--- com.google.code.findbugs:jsr305:2.0.1\n|         |    |    |    |    +--- com.google.guava:guava:16.0.1 -> 19.0\n|         |    |    |    |    --- commons-lang:commons-lang:2.6\n|         |    |    |    +--- com.twitter.common:base:0.0.115 ()\n|         |    |    |    +--- com.twitter.common:net-util:0.0.102 ()\n|         |    |    |    +--- com.twitter.common:quantity:0.0.99 ()\n|         |    |    |    +--- com.twitter.common:collections:0.0.110 ()\n|         |    |    |    +--- com.google.code.findbugs:jsr305:2.0.1\n|         |    |    |    +--- com.google.guava:guava:16.0.1 -> 19.0\n|         |    |    |    +--- commons-lang:commons-lang:2.6\n|         |    |    |    --- commons-codec:commons-codec:1.9\n|         |    |    +--- com.twitter.common:base:0.0.115 ()\n|         |    |    +--- com.twitter.common:io:0.0.68\n|         |    |    |    +--- com.twitter.common:base:0.0.115 ()\n|         |    |    |    +--- commons-io:commons-io:2.4\n|         |    |    |    +--- commons-lang:commons-lang:2.6\n|         |    |    |    +--- com.google.guava:guava:16.0.1 -> 19.0\n|         |    |    |    --- com.google.code.findbugs:jsr305:2.0.1\n|         |    |    +--- com.twitter.common:io-thrift:0.0.67\n|         |    |    |    +--- com.twitter.common:io:0.0.68 ()\n|         |    |    |    +--- com.twitter.common:base:0.0.115 ()\n|         |    |    |    +--- com.google.guava:guava:16.0.1 -> 19.0\n|         |    |    |    +--- com.google.code.findbugs:jsr305:2.0.1\n|         |    |    |    +--- commons-io:commons-io:2.4\n|         |    |    |    --- commons-lang:commons-lang:2.6\n|         |    |    +--- com.twitter.common:dynamic-host-set:0.0.56\n|         |    |    |    +--- com.twitter.common:base:0.0.115 ()\n|         |    |    |    +--- com.google.guava:guava:16.0.1 -> 19.0\n|         |    |    |    +--- com.google.code.findbugs:jsr305:2.0.1\n|         |    |    |    --- commons-lang:commons-lang:2.6\n|         |    |    +--- com.twitter.common:util:0.0.121 ()\n|         |    |    +--- com.twitter.common:args-core:0.1.37 ()\n|         |    |    +--- com.google.guava:guava:16.0.1 -> 19.0\n|         |    |    +--- com.google.code.findbugs:jsr305:2.0.1\n|         |    |    +--- com.fasterxml.jackson.core:jackson-core:2.6.5\n|         |    |    +--- com.fasterxml.jackson.core:jackson-databind:2.6.5 ()\n|         |    |    +--- com.github.ben-manes.caffeine:caffeine:2.3.0\n|         |    |    +--- io.netty:netty:3.10.1.Final\n|         |    |    +--- org.scala-lang:scala-library:2.11.8\n|         |    |    +--- org.scala-lang:scala-reflect:2.11.8 ()\n|         |    |    +--- commons-lang:commons-lang:2.6\n|         |    |    +--- commons-codec:commons-codec:1.9\n|         |    |    +--- com.google.inject:guice:4.0 ()\n|         |    |    +--- com.google.code.gson:gson:2.3.1\n|         |    |    --- commons-io:commons-io:2.4\n|         |    --- org.apache.zookeeper:zookeeper:3.5.0-alpha -> 99.99 FAILED\n|         +--- com.twitter.common:io-json:0.0.54\n|         |    +--- com.twitter.common:io:0.0.68 ()\n|         |    +--- com.google.guava:guava:16.0.1 -> 19.0\n|         |    +--- com.google.code.findbugs:jsr305:2.0.1\n|         |    +--- com.google.code.gson:gson:2.3.1\n|         |    +--- commons-io:commons-io:2.4\n|         |    --- commons-lang:commons-lang:2.6\n|         +--- com.twitter.common.zookeeper:server-set:1.0.111 ()\n|         +--- com.twitter.common:service-thrift:1.0.54\n|         |    +--- org.slf4j:slf4j-api:1.7.7\n|         |    +--- commons-lang:commons-lang:2.6\n|         |    --- org.apache.thrift:libthrift:0.5.0-1 ()\n|         +--- com.google.guava:guava:16.0.1 -> 19.0\n|         +--- com.fasterxml.jackson.core:jackson-core:2.6.5\n|         +--- com.fasterxml.jackson.core:jackson-databind:2.6.5 ()\n|         --- com.fasterxml.jackson.module:jackson-module-scala_2.11:2.6.5 ()\n+--- io.buoyant:namerd-iface-interpreter-thrift_2.11:0.8.4 ()\n+--- io.buoyant:namerd-main_2.11:0.8.4\n|    +--- org.scala-lang:scala-library:2.11.7 -> 2.11.8\n|    +--- io.buoyant:namerd-core_2.11:0.8.4 ()\n|    +--- io.buoyant:admin_2.11:0.8.4 ()\n|    +--- io.buoyant:config_2.11:0.8.4 ()\n|    --- io.buoyant:telemetry-common-metrics_2.11:0.8.4 ()\n+--- io.buoyant:linkerd-protocol-http_2.11:0.8.4\n|    +--- org.scala-lang:scala-library:2.11.7 -> 2.11.8\n|    +--- io.buoyant:linkerd-core_2.11:0.8.4 ()\n|    +--- io.buoyant:linkerd-tls_2.11:0.8.4\n|    |    +--- org.scala-lang:scala-library:2.11.7 -> 2.11.8\n|    |    +--- io.buoyant:linkerd-core_2.11:0.8.4 ()\n|    |    --- io.netty:netty-tcnative-boringssl-static:1.1.33.Fork23\n|    +--- io.buoyant:namer-fs_2.11:0.8.4\n|    |    +--- org.scala-lang:scala-library:2.11.7 -> 2.11.8\n|    |    --- io.buoyant:namer-core_2.11:0.8.4 ()\n|    +--- io.buoyant:router-http_2.11:0.8.4\n|    |    +--- org.scala-lang:scala-library:2.11.7 -> 2.11.8\n|    |    +--- io.buoyant:router-core_2.11:0.8.4 ()\n|    |    --- com.twitter:finagle-http_2.11:6.39.0 ()\n|    --- com.twitter:finagle-netty4-http_2.11:6.39.0 ()\n+--- io.buoyant:namerd-storage-in-memory_2.11:0.8.4\n|    +--- org.scala-lang:scala-library:2.11.7 -> 2.11.8\n|    --- io.buoyant:namerd-core_2.11:0.8.4 ()\n+--- io.buoyant:linkerd-protocol-thrift_2.11:0.8.4\n|    +--- org.scala-lang:scala-library:2.11.7 -> 2.11.8\n|    +--- io.buoyant:linkerd-core_2.11:0.8.4 ()\n|    --- io.buoyant:router-thrift_2.11:0.8.4\n|         +--- org.scala-lang:scala-library:2.11.7 -> 2.11.8\n|         +--- io.buoyant:router-core_2.11:0.8.4 ()\n|         --- com.twitter:finagle-thrift_2.11:6.39.0 ()\n+--- io.buoyant:linkerd-protocol-h2_2.11:0.8.4\n|    +--- org.scala-lang:scala-library:2.11.7 -> 2.11.8\n|    +--- io.buoyant:linkerd-core_2.11:0.8.4 ()\n|    +--- io.buoyant:router-h2_2.11:0.8.4\n|    |    +--- org.scala-lang:scala-library:2.11.7 -> 2.11.8\n|    |    +--- io.buoyant:router-core_2.11:0.8.4 ()\n|    |    +--- com.twitter:finagle-netty4_2.11:6.39.0 ()\n|    |    +--- io.netty:netty-codec-http2:4.1.4.Final\n|    |    |    +--- io.netty:netty-codec-http:4.1.4.Final ()\n|    |    |    --- io.netty:netty-handler:4.1.4.Final ()\n|    |    --- io.netty:netty-handler:4.1.4.Final ()\n|    --- com.twitter:finagle-netty4_2.11:6.39.0 ()\n+--- io.buoyant:linkerd-protocol-mux_2.11:0.8.4\n|    +--- org.scala-lang:scala-library:2.11.7 -> 2.11.8\n|    +--- io.buoyant:linkerd-core_2.11:0.8.4 ()\n|    --- io.buoyant:router-mux_2.11:0.8.4\n|         +--- org.scala-lang:scala-library:2.11.7 -> 2.11.8\n|         +--- io.buoyant:router-core_2.11:0.8.4 ()\n|         +--- io.buoyant:test-util_2.11:0.8.4\n|         |    +--- org.scala-lang:scala-library:2.11.7 -> 2.11.8\n|         |    +--- org.scalatest:scalatest_2.11:2.2.4\n|         |    |    +--- org.scala-lang:scala-library:2.11.2 -> 2.11.8\n|         |    |    +--- org.scala-lang:scala-reflect:2.11.2 -> 2.11.8 ()\n|         |    |    --- org.scala-lang.modules:scala-xml_2.11:1.0.2 -> 1.0.5 ()\n|         |    +--- com.twitter:util-core_2.11:6.38.0 ()\n|         |    --- com.twitter:util-logging_2.11:6.38.0 ()\n|         --- com.twitter:finagle-mux_2.11:6.39.0 ()\n+--- io.buoyant:linkerd-tracer-zipkin_2.11:0.8.4\n|    +--- org.scala-lang:scala-library:2.11.7 -> 2.11.8\n|    +--- io.buoyant:linkerd-core_2.11:0.8.4 ()\n|    +--- com.twitter:finagle-zipkin-core_2.11:6.39.0 ()\n|    --- com.twitter:finagle-zipkin_2.11:6.39.0\n|         +--- org.scala-lang:scala-library:2.11.8\n|         +--- com.twitter:finagle-core_2.11:6.39.0 ()\n|         +--- com.twitter:finagle-thrift_2.11:6.39.0 ()\n|         +--- com.twitter:finagle-zipkin-core_2.11:6.39.0 ()\n|         +--- org.apache.thrift:libthrift:0.5.0-1 ()\n|         --- com.twitter:scrooge-core_2.11:4.11.0 ()\n+--- io.buoyant:interpreter-per-host_2.11:0.8.4\n|    +--- org.scala-lang:scala-library:2.11.7 -> 2.11.8\n|    +--- io.buoyant:namer-core_2.11:0.8.4 ()\n|    --- io.buoyant:interpreter-subnet_2.11:0.8.4\n|         +--- org.scala-lang:scala-library:2.11.7 -> 2.11.8\n|         --- io.buoyant:namer-core_2.11:0.8.4 ()\n+--- io.buoyant:interpreter-fs_2.11:0.8.4\n|    +--- org.scala-lang:scala-library:2.11.7 -> 2.11.8\n|    +--- io.buoyant:namer-core_2.11:0.8.4 ()\n|    --- io.buoyant:namer-fs_2.11:0.8.4 ()\n+--- io.buoyant:namer-marathon_2.11:0.8.4\n|    +--- org.scala-lang:scala-library:2.11.7 -> 2.11.8\n|    +--- io.buoyant:marathon_2.11:0.8.4\n|    |    +--- org.scala-lang:scala-library:2.11.7 -> 2.11.8\n|    |    +--- com.twitter:finagle-http_2.11:6.39.0 ()\n|    |    +--- com.fasterxml.jackson.core:jackson-core:2.6.5\n|    |    +--- com.fasterxml.jackson.core:jackson-annotations:2.6.5\n|    |    +--- com.fasterxml.jackson.core:jackson-databind:2.6.5 ()\n|    |    --- com.fasterxml.jackson.module:jackson-module-scala_2.11:2.6.5 ()\n|    +--- io.buoyant:namer-core_2.11:0.8.4 ()\n|    --- com.pauldijou:jwt-core_2.11:0.9.0\n|         +--- org.scala-lang:scala-library:2.11.7 -> 2.11.8\n|         +--- com.pauldijou:jwt-core-impl_2.11:0.9.0\n|         |    --- org.scala-lang:scala-library:2.11.7 -> 2.11.8\n|         --- org.bouncycastle:bcpkix-jdk15on:1.52\n|              --- org.bouncycastle:bcprov-jdk15on:1.52\n+--- io.buoyant:admin_2.11:0.8.4 ()\n+--- io.buoyant:namer-zk-leader_2.11:0.8.4\n|    +--- org.scala-lang:scala-library:2.11.7 -> 2.11.8\n|    +--- io.buoyant:namer-core_2.11:0.8.4 ()\n|    --- com.twitter.common.zookeeper:candidate:0.0.76\n|         +--- com.twitter.common.zookeeper:client:0.0.70 -> 0.0.80 ()\n|         +--- com.twitter.common.zookeeper:group:0.0.82 -> 0.0.91 ()\n|         +--- com.twitter.common:base:0.0.101 -> 0.0.115 ()\n|         +--- com.google.code.findbugs:jsr305:2.0.1\n|         +--- com.google.guava:guava:16.0.1 -> 19.0\n|         --- org.apache.zookeeper:zookeeper:3.3.4 -> 99.99 FAILED\n+--- io.buoyant:namer-curator_2.11:0.8.4\n|    +--- org.scala-lang:scala-library:2.11.7 -> 2.11.8\n|    +--- io.buoyant:namer-core_2.11:0.8.4 ()\n|    +--- org.apache.curator:curator-framework:2.9.1\n|    |    --- org.apache.curator:curator-client:2.9.1\n|    |         +--- org.apache.zookeeper:zookeeper:3.4.6 -> 99.99 FAILED\n|    |         +--- com.google.guava:guava:16.0.1 -> 19.0\n|    |         --- org.slf4j:slf4j-api:1.7.6 -> 1.7.7\n|    +--- org.apache.curator:curator-client:2.9.1 ()\n|    --- org.apache.curator:curator-x-discovery:2.9.1\n|         +--- org.apache.curator:curator-recipes:2.9.1\n|         |    --- org.apache.curator:curator-framework:2.9.1 ()\n|         --- org.codehaus.jackson:jackson-mapper-asl:1.9.13\n|              --- org.codehaus.jackson:jackson-core-asl:1.9.13\n+--- io.buoyant:interpreter-subnet_2.11:0.8.4 ()\n+--- io.buoyant:namer-fs_2.11:0.8.4 ()\n+--- io.buoyant:telemetry-tracelog_2.11:0.8.4\n|    +--- org.scala-lang:scala-library:2.11.7 -> 2.11.8\n|    +--- io.buoyant:telemetry-core_2.11:0.8.4 ()\n|    --- io.buoyant:router-core_2.11:0.8.4 ()\n+--- io.buoyant:router-thrift_2.11:0.8.4 ()\n+--- io.buoyant:namerd-iface-interpreter-thrift-idl_2.11:0.8.4 ()\n--- io.buoyant:linkerd-announcer_2.11:0.8.4\n     --- org.scala-lang:scala-library:2.11.7 -> 2.11.8\n(*) - dependencies omitted (listed previously)\n```. Excluding the commons zookeeper with gradle:\nconfigurations {\n    compile.exclude module: 'com.twitter.common.zookeeper'\n}\n\nSolves the failed dependencies, and everything seems to work fine without any of those artifacts.\nHaving said that, perhaps the things depending on the internal version of zookeeper should have a compile dependency on the Apache zookeeper, and only use the internal version of zookeeper at runtime. That way the dependencies are clean - an exclusion should not be needed.. ",
    "qilab": "@mosesn thank you for your review!\nI replaced commit massages with formatted one.. I'm sorry for this: https://github.com/twitter/util/pull/187#discussion_r110083470\nI fixed it.. Oh, sorry... \ud83d\ude28 \ncompilation failed because of this unintended n.\nI'll fix it \ud83d\ude47 . ",
    "isabelmartin": "Thank you @ystein! This has been merged in cb82dde.. ",
    "siggy": "Thanks for the feedback @mosesn ! I've add synchronized blocks to close(), closeOnExit(), and closeOnExitLast().\nI needed a way to ensure closeOnExitLast() did not close anything before all members of exits had closed. I ended up adding a closing var that is satisfied when everything else has closed. I don't love adding state like this, so if you see a better way, I'm open to it.. Thanks for the feedback @dschobel ! I put the deadline enforcement in a slightly different place than where you had suggested, in the close() rather than closeOnExitLast(). I did this to ensure that close() returns a Future that should be guaranteed to be eventually satisfied. Let me know what you think.\nIn addition to adding a test case for second stalled phase, I also modified the App: sequenced exits respect deadline test to confirm that the Future returned from close() is satisfied when a second phase stalls.. gah my bad!. ",
    "monkey-mas": "@mosesn Sorry, I\u2019ve done additional fix :( Can you please review it again?\ndiff\n-    publishTo := (version { (v: String) =>\n+    publishTo := {\n       val nexus = \"https://oss.sonatype.org/\"\n-      if (v.trim.endsWith(\"SNAPSHOT\"))\n+      if (version.value.trim.endsWith(\"SNAPSHOT\"))\n         Some(\"snapshots\" at nexus + \"content/repositories/snapshots\")\n       else\n         Some(\"releases\"  at nexus + \"service/local/staging/deploy/maven2\")\n-    }).value\n+    }\ndiff\n-      scalacOptions in doc ++= version.map(v => Seq(\"-doc-title\", \"Util\", \"-doc-version\", v)).value,\n+      scalacOptions in doc ++= Seq(\"-doc-title\", \"Util\", \"-doc-version\", version.value),. Thanks for your review!. ",
    "nmurthy": "Hey thanks so much for the quick reply @jcrossley. Err well yeah I messed up that example... I'm basically trying to be able to hot reload stores at runtime via the Twitter-Server admin endpoints. I'm assuming that if I have a no arg constructor for the types in question, it can probably work?\nI'd also like to use tunables to more or less overlay new config values on top of a running app's config, so I can avoid redeploys in a pinch.\nAnd I meant to map/flatMap the result of the Tunable[Store], assuming it was Option-Iike. @mosesn I think you're right. I'm going to go that route. Out of curiosity though, what's an example of a typical usage scenario of a Tunable if not to be able to dynamically change configuration values?\nEither way though, I do think that it would be a useful change to make Tunable and TunableMap.Key not protected [twitter] if you intend them to be used directly in the future. . ",
    "mejran": "I was thinking of how to solve this issue, I hit it when creating a pull request for linkerd, and this comes to mind as a replacement for the current scanLeft:\n```scala\n  def scanLeftB(f: (B, A) => B): AsyncStream[B] =\n    this match {\n      case Embed(fas) => Cons(Future.value(z), () => Embed(fas.map(.scanLeftEmbed(z)(f))))\n      case Empty => FromFuture(Future.value(z))\n      case FromFuture(fa) =>\n        Cons(Future.value(z), () => FromFuture(fa.map(f(z, ))))\n      case Cons(fa, more) =>\n        Cons(Future.value(z), () => Embed(fa.map(a => more().scanLeft(f(z, a))(f))))\n    }\nprivate def scanLeftEmbedB(f: (B, A) => B): AsyncStream[B] =\n    this match {\n      case Embed(fas) => Embed(fas.map(.scanLeftEmbed(z)(f)))\n      case Empty => Empty\n      case FromFuture(fa) =>\n        FromFuture(fa.map(f(z, )))\n      case Cons(fa, more) =>\n        Embed(fa.map(a => more().scanLeft(f(z, a))(f)))\n    }\n```\nIf this makes sense as an approach then I'll create a pull request in the next few days.. I believe adleong's approach is functionally identical to mine. Both approaches output the first value that's passed in for all cases. adleong's takes advantage of that fact and just strips it back out of any nested calls from Embed so that's it not outputed multiple times. Mine never appends it in the first place for nested calls. I suppose there's more overhead in adleong's code since elements are added and then stripped out but given how drop works it should be tiny.\nI'll submit a PR this week unless someone else is already doing so, please let me know which solution makes more sense for the project.. ",
    "alonpeer": "\ud83d\udc11 IT!. ",
    "janogonzalez": "\ud83d\udc38 \ud83d\udc36 . ",
    "chrisberkhout": ":+1: :frog: :dog: :tada: . ",
    "argha-c": "LGTM. (Keep \ud83c\udfc3 ahead @folone!). ",
    "posa88": "mv a.log a.log-01 \n/bin/kill -HUP `cat bin/pid`\nsuch commands can also reproduce the behavior. I finally find out that it's a concurrent issue, I ran several thread and created several instance.. ",
    "rquinlivan": "Sure I will put a PR together. ",
    "CLAassistant": " All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA.. ",
    "pavanky": "Hmm I think there was a bit of a screw up in my script. Closing this.. ",
    "frgomes": "In my codebase I've \"derived\" AppLike from the original App like shown below.\nI'm providing this code as a suggestion only. You guys are better skilled than me to decide whether such thing is acceptable and/or desirable.\n```scala\npackage com.twitter.app\nimport com.twitter.conversions.time.\nimport com.twitter.util.\nimport java.lang.reflect.InvocationTargetException\nimport java.util.concurrent.ConcurrentLinkedQueue\nimport java.util.concurrent.atomic.AtomicReference\nimport java.util.logging.Logger\nimport scala.collection.JavaConverters._\nimport scala.collection.mutable\n/*\n * A composable application trait that includes\n * basic application lifecycle (pre- and post- main).\n * Applications should be constructed\n * with modularity in mind, and common functionality should be\n * extracted into mixins.\n /\ntrait AppLike extends Closable with CloseAwaitably {\n/* The name of the application, based on the classname /\n  val name: String = getClass.getName.stripSuffix(\"$\")\nprotected def exitOnError(reason: String): Unit = {\n    exitOnError(reason, \"\")\n  }\n/*\n   * The details Fn may be an expensive operation (which could fail). We want to\n   * ensure that we've at least written the reason field to System.err before\n   * attempting to write the detail field so that users will at a minimum see the\n   * reason for the exit regardless of any extra details.\n   /\n  protected def exitOnError(reason: String, details: => String): Unit = {\n    System.err.println(reason)\n    // want to ensure \"reason\" is written before attempting to write any details\n    System.err.flush()\n    System.err.println(details)\n    Await.ready(close(), closeDeadline - Time.now)\n    System.exit(1)\n  }\nprivate[app] val inits: mutable.Buffer[() => Unit] = mutable.Buffer.empty\n  private[app] val premains: mutable.Buffer[() => Unit] = mutable.Buffer.empty\n  private[app] val exits: ConcurrentLinkedQueue[Closable] = new ConcurrentLinkedQueue\n  private[app] val lastExits: ConcurrentLinkedQueue[Closable] = new ConcurrentLinkedQueue\n  private[app] val postmains: ConcurrentLinkedQueue[() => Unit] = new ConcurrentLinkedQueue\n// finagle isn't available here, so no DefaultTimer\n  protected lazy val shutdownTimer: Timer = new JavaTimer(isDaemon = true)\n/*\n   * Invoke f before anything else.\n   /\n  protected final def init(f: => Unit): Unit = {\n    inits += (() => f)\n  }\n/*\n   * Invoke f right before the user's main is invoked.\n   /\n  protected final def premain(f: => Unit): Unit = {\n    premains += (() => f)\n  }\n/* Minimum duration to allow for exits to be processed. /\n  final val MinGrace: Duration = 1.second\n/*\n   * Default amount of time to wait for shutdown.\n   * This value is not used as a default if close() is called without parameters. It simply\n   * provides a default value to be passed as close(grace).\n   /\n  def defaultCloseGracePeriod: Duration = Duration.Zero\n/*\n   * The actual close grace period.\n   /\n  @volatile protected[this] var closeDeadline = Time.Top\n/\n   * This is satisfied when all members of exits and lastExits have closed.\n   \n   * @note Access needs to be mediated via the intrinsic lock.\n   /\n  private[this] var closing: Future[Unit] = Future.never\n/*\n   * Close closable when shutdown is requested. Closables are closed in parallel.\n   /\n  final def closeOnExit(closable: Closable): Unit = synchronized {\n    if (closing == Future.never) {\n      // close() not yet called, safe to add it\n      exits.add(closable)\n    } else {\n      // close() already called, we need to close this here, immediately.\n      closable.close(closeDeadline)\n    }\n  }\n/\n   * Register a closable to be closed on application shutdown after those registered\n   * via closeOnExit.\n   \n   * @note Application shutdown occurs in two sequential phases to allow explicit\n   *       encoding of resource lifecycle relationships. Concretely this is useful\n   *       for encoding that a monitoring resource should outlive a monitored\n   *       resource.\n   \n   *       In all cases, the close deadline is enforced.\n   */\n  final def closeOnExitLast(closable: Closable): Unit = synchronized {\n    if (closing == Future.never) {\n      // close() not yet called, safe to add it\n      lastExits.add(closable)\n    } else {\n      // close() already called, we need to close this here, but only\n      // after close() completes and closing is satisfied\n      closing\n        .transform { _ =>\n          closable.close(closeDeadline)\n        }\n        .by(shutdownTimer, closeDeadline)\n    }\n  }\n/*\n   * Invoke f when shutdown is requested. Exit hooks run in parallel and are\n   * executed after all postmains complete. The thread resumes when all exit\n   * hooks complete or closeDeadline expires.\n   /\n  protected final def onExit(f: => Unit): Unit = {\n    closeOnExit {\n      Closable.make { deadline => // close() ensures that this deadline is sane\n        FuturePool.unboundedPool(f).by(shutdownTimer, deadline)\n      }\n    }\n  }\n/*\n   * Invoke f after the user's main has exited.\n   /\n  protected final def postmain(f: => Unit): Unit = {\n    postmains.add(() => f)\n  }\n/\n   * Notify the application that it may stop running.\n   * Returns a Future that is satisfied when the App has been torn down or errors at the deadline.\n   /\n  final def close(deadline: Time): Future[Unit] = synchronized {\n    closing = closeAwaitably {\n      closeDeadline = deadline.max(Time.now + MinGrace)\n      val firstPhase = Closable\n        .all(exits.asScala.toSeq: _)\n        .close(closeDeadline)\n        .by(shutdownTimer, closeDeadline)\n  firstPhase\n    .transform { _ =>\n      Closable.all(lastExits.asScala.toSeq: _*).close(closeDeadline)\n    }\n    .by(shutdownTimer, closeDeadline)\n}\n\nclosing\n\n}\ndef main(args: Array[String]): Unit = {\n    try {\n      nonExitingMain(args)\n    } catch {\n      case e: Throwable =>\n        e.printStackTrace()\n        exitOnError(\"Exception thrown in main on startup\")\n    }\n  }\ndef nonExitingMain(args: Array[String]): Unit = {\n    registry.register(this)\nfor (f <- inits) f()\n\nfor (f <- premains) f()\n\n// Get a main() if it's defined. It's possible to define traits that only use pre/post mains.\nval mainMethod =\n  try Some(getClass.getMethod(\"main\"))\n  catch { case _: NoSuchMethodException => None }\n\n// Invoke main() if it exists.\nmainMethod foreach { method =>\n  try method.invoke(this)\n  catch { case e: InvocationTargetException => throw e.getCause }\n}\n\nfor (f <- postmains.asScala) f()\n\n// We discard this future but we `Await.result` on `this` which is a\n// `CloseAwaitable`, and this means the thread waits for the future to\n// complete.\nclose(defaultCloseGracePeriod)\n\n// The deadline to 'close' is advisory; we enforce it here.\nAwait.result(this, closeDeadline - Time.now)\n\n}\nval registry = AppLike\n}\nobject AppLike {\n  private[this] val log = Logger.getLogger(getClass.getName)\n  private[this] val ref = new AtomicReferenceOption[AppLike]\n/**\n\n\nThe currently registered App, if any. While the expectation is that there\nwill be a single running App per process, the most-recently registered\nApp will be returned in the event that more than one exists.\n   */\n  def registered: Option[AppLike] = ref.get\n\nprivate[app] def register(app: AppLike): Unit =\n    ref.getAndSet(Some(app)).foreach { existing =>\n      log.warning(\n        s\"Multiple com.twitter.app.App main methods called. ${existing.name}, then ${app.name}\"\n      )\n    }\n}\n```\nThis is an usage case in my codebase:\n```scala\nobject Server {\n  def apply(args: Args): Server = new Server(args)\n}\nclass Server(val args: Args) extends ServerLike\ntrait ServerLike extends AppLike {\nval args: Args // command line already processed and exposed as a case class\n// implicit MyAppContext is built accordingly to options parsed by my own logic.\n  def serve(svc: Service[Request, Response])(implicit ctx: MyAppContext): Unit = ...\n...\n}\n```\nJust for the sake of validation of my suggestion (or curiosity, really!), I've created a \"new version of App\" which I show below. But I'm not using it and I cannot tell whether or not it really works as expected or if it breaks something somewhere else, etc. Anyway, this is the code:\n```scala\ntrait App extends AppLike {\n/* The [[com.twitter.app.Flags]] instance associated with this application /\n  //failfastOnFlagsNotParsed is called in the ctor of App.scala here which is a bad idea\n  //as things like this can happen http://stackoverflow.com/questions/18138397/calling-method-from-constructor\n  val flag: Flags = new Flags(name, includeGlobal = true, failfastOnFlagsNotParsed)\nprivate var _args = ArrayString\n/* The remaining, unparsed arguments /\n  def args: Array[String] = _args\n/* Whether or not to accept undefined flags /\n  protected def allowUndefinedFlags: Boolean = false\n/\n   * Users of this code should override this to true so that\n   * you fail-fast instead of being surprised at runtime by code that\n   * is reading from flags before they have been parsed.\n   \n   * Ideally this would default to true, however, in order to avoid\n   * breaking existing users, it was introduced using false.\n   /\n  protected def failfastOnFlagsNotParsed: Boolean = false\nfinal override def main(args: Array[String]): Unit = {\n    try {\n      nonExitingMain(args)\n    } catch {\n      case FlagUsageError(reason) =>\n        exitOnError(reason)\n      case FlagParseException(reason, _) =>\n        exitOnError(reason, flag.usage)\n      case e: Throwable =>\n        e.printStackTrace()\n        exitOnError(\"Exception thrown in main on startup\")\n    }\n  }\nfinal override def nonExitingMain(args: Array[String]): Unit = {\n    registry.register(this)\nfor (f <- inits) f()\n\nflag.parseArgs(args, allowUndefinedFlags) match {\n  case Flags.Ok(remainder) =>\n    _args = remainder.toArray\n  case Flags.Help(usage) =>\n    throw FlagUsageError(usage)\n  case Flags.Error(reason) =>\n    throw FlagParseException(reason)\n}\n\nfor (f <- premains) f()\n\n// Get a main() if it's defined. It's possible to define traits that only use pre/post mains.\nval mainMethod =\n  try Some(getClass.getMethod(\"main\"))\n  catch { case _: NoSuchMethodException => None }\n\n// Invoke main() if it exists.\nmainMethod foreach { method =>\n  try method.invoke(this)\n  catch { case e: InvocationTargetException => throw e.getCause }\n}\n\nfor (f <- postmains.asScala) f()\n\n// We discard this future but we `Await.result` on `this` which is a\n// `CloseAwaitable`, and this means the thread waits for the future to\n// complete.\nclose(defaultCloseGracePeriod)\n\n// The deadline to 'close' is advisory; we enforce it here.\nAwait.result(this, closeDeadline - Time.now)\n\n}\n}\n```\n. @smlance : I'm sorry for the long silence. I'm going to work on this matter in the next few days. Thanks.. ",
    "stefanlance": "If I understand correctly, I think @kevinoliver's suggestion is pretty slick. Do you think this would suit your needs, @frgomes? If so, would you like to submit a PR? If you don't think you'll have time then one of us can merge this internally.. Merged in https://github.com/twitter/util/commit/e2aca990a2257b727a2bc3042c0f7651afc1584e. Thanks @martijnhoekstra!. ",
    "robfig": "Interesting, I haven't seen that before. Thanks for the link. The pprof model seems very attractive to me because our engineers don't have ssh access to production which seems to be required for all the usual Java profiling tools; having the profiles exported over HTTP makes that easy. \nIn terms of taking a dependency: copy-and-pasting the .proto file or even the generated code would probably be fine and not result in any difficulty for consumer of your repo (Bazel ships with a basic proto-compiling rule). I understand that this may not be a priority for you though, was just hoping to get a Java profiler without a major implementation.. Oh, you are correct, you would need a runtime dependency on protobuf. \nThat's a good point, although seems more work intensive. pprof comes with a local web server that provides source listing annotated with cpu samples/heap allocations, SVG, and flame graphs. I guess we'd need a Java implementation of each of those views for parity, based on the data from async profiler. At least something basic could be made pretty quickly. \nI'll investigate that avenue, thanks.. Ref: https://go.googlesource.com/go/+/master/src/runtime/pprof/proto.go. ",
    "lrytz": "https://github.com/rickynils/scalacheck/pull/411/files is an example. ",
    "martijnhoekstra": "For some reason, my build misses a bunch of deprecations that Travis catches. I will be back!. Inlined the deprecated SynchronizedMap, and also brought along this ominous todo from the 2.12.x source. . You can either have no deprecation warnings, or know you handled all cases individually at compile time, but unfortunately not both.. Deprecated trait copy-pasted in, including ominous todo.. Initially, I mainly tried to make this work with the smallest change possible. Thinking about this more, iterating the java collection right into the spool without any converters might be a better strategy.\nIf I try to do that, I'm going to struggle a bit, since I don't actually know Java, and my knowledge of the JDK is limited to what I regularly use from Scala.\nWDYT?. alternatively, WDYT about a @varargs annotation on on Closables#all? From what I understand, that would make it callable with the closables array without further ado.. yes, exactly. The todo may still be relevant to twitter util -- it would take a bit of investigation to figure out whether that's true or not.\nThe (unfortunate) case is that that todo has been in the original case for pretty much ever, and the depreciation has to do with the strategy of mixing in \"synchronization\" traits, which is not a great strategy. Util has always depended on exactly this potentially broken behaviour.\nEffectively, the change in the PR is a NOP. Would you like me to take another look at whether I can implement a proper synchronized version of LruMap? If so, within this PR or independent from it?. ",
    "nepthar": "Thanks so much! This merged in a4faaa7. Close. Since java doesn't have any unsigned types, we have to use the next larger type. This facilitates that conversion: https://stackoverflow.com/questions/9578639/best-way-to-convert-a-signed-integer-to-an-unsigned-long. It is not necessary in this case.\nAlso, BigInt provides a constructor directly from a byte array!\nBigInt(1, Array(buf.get(pos), buf.get(pos+1), buf.get(pos+2)... )\nEdit: The first argument is how to interp. So 1 for positive and -1 for negative. Since this is unsigned, we'd use 1.. Yeah, remove that last &.\nSGTM w/avoiding allocations.. was it necessary to do this due to one of the deprecation warnings?. is the TODO still relevant to us? meaning, is it something that someone will do someday here? Perhaps we can just remove it.. Thanks for the background! For this PR, I don't think implementing a proper synchronized version makes sense.\nI don't really have a read on whether or not the extra methods would be useful. If this is indeed a noop, we can leave it as is unless someone else feels strongly.. ",
    "girishjjain": "Ok, here're the numbers. First from the base develop branch:\nDevelop branch\n[info] Benchmark                                       Mode  Cnt   Score   Error  Units\n[info] DurationBenchmark.durationAddDelta              avgt   10   7.162 \u00b1 0.339  ns/op\n[info] DurationBenchmark.durationAddDeltaOverflow      avgt   10   5.318 \u00b1 0.110  ns/op\n[info] DurationBenchmark.durationEquals                avgt   10   0.632 \u00b1 0.005  ns/op\n[info] DurationBenchmark.durationFloor                 avgt   10  13.661 \u00b1 0.366  ns/op\n[info] DurationBenchmark.durationMod                   avgt   10  13.792 \u00b1 0.118  ns/op\n[info] DurationBenchmark.durationMultiplyLong          avgt   10  13.007 \u00b1 0.273  ns/op\n[info] DurationBenchmark.durationMultiplyLongOverflow  avgt   10   3.820 \u00b1 0.315  ns/op\nand next from my feature branch\ngirishjjain:refactorDuration\n[info] Benchmark                                       Mode  Cnt   Score   Error  Units\n[info] DurationBenchmark.durationAddDelta              avgt   10   6.869 \u00b1 0.113  ns/op\n[info] DurationBenchmark.durationAddDeltaOverflow      avgt   10   5.307 \u00b1 0.073  ns/op\n[info] DurationBenchmark.durationEquals                avgt   10   0.632 \u00b1 0.011  ns/op\n[info] DurationBenchmark.durationFloor                 avgt   10  13.856 \u00b1 0.318  ns/op\n[info] DurationBenchmark.durationMod                   avgt   10  13.934 \u00b1 0.243  ns/op\n[info] DurationBenchmark.durationMultiplyLong          avgt   10  14.609 \u00b1 0.220  ns/op\n[info] DurationBenchmark.durationMultiplyLongOverflow  avgt   10   4.010 \u00b1 0.058  ns/op\n. Numbers with gc option:\nFirst from develop branch\n[info] Benchmark                                                                Mode  Cnt     Score     Error   Units\n[info] DurationBenchmark.durationAddDelta                                       avgt   10     7.146 \u00b1   0.279   ns/op\n[info] DurationBenchmark.durationAddDelta:\u00b7gc.alloc.rate                        avgt   10  3051.464 \u00b1 115.651  MB/sec\n[info] DurationBenchmark.durationAddDelta:\u00b7gc.alloc.rate.norm                   avgt   10    24.000 \u00b1   0.001    B/op\n[info] DurationBenchmark.durationAddDelta:\u00b7gc.churn.PS_Eden_Space               avgt   10  3051.276 \u00b1 116.871  MB/sec\n[info] DurationBenchmark.durationAddDelta:\u00b7gc.churn.PS_Eden_Space.norm          avgt   10    23.998 \u00b1   0.111    B/op\n[info] DurationBenchmark.durationAddDelta:\u00b7gc.churn.PS_Survivor_Space           avgt   10     0.018 \u00b1   0.014  MB/sec\n[info] DurationBenchmark.durationAddDelta:\u00b7gc.churn.PS_Survivor_Space.norm      avgt   10    \u2248 10\u207b\u2074              B/op\n[info] DurationBenchmark.durationAddDelta:\u00b7gc.count                             avgt   10  1373.000            counts\n[info] DurationBenchmark.durationAddDelta:\u00b7gc.time                              avgt   10   921.000                ms\n[info] DurationBenchmark.durationAddDeltaOverflow                               avgt   10     5.393 \u00b1   0.043   ns/op\n[info] DurationBenchmark.durationAddDeltaOverflow:\u00b7gc.alloc.rate                avgt   10    \u2248 10\u207b\u2074            MB/sec\n[info] DurationBenchmark.durationAddDeltaOverflow:\u00b7gc.alloc.rate.norm           avgt   10    \u2248 10\u207b\u2076              B/op\n[info] DurationBenchmark.durationAddDeltaOverflow:\u00b7gc.count                     avgt   10       \u2248 0            counts\n[info] DurationBenchmark.durationEquals                                         avgt   10     0.641 \u00b1   0.002   ns/op\n[info] DurationBenchmark.durationEquals:\u00b7gc.alloc.rate                          avgt   10    \u2248 10\u207b\u2074            MB/sec\n[info] DurationBenchmark.durationEquals:\u00b7gc.alloc.rate.norm                     avgt   10    \u2248 10\u207b\u2077              B/op\n[info] DurationBenchmark.durationEquals:\u00b7gc.count                               avgt   10       \u2248 0            counts\n[info] DurationBenchmark.durationFloor                                          avgt   10    13.473 \u00b1   0.122   ns/op\n[info] DurationBenchmark.durationFloor:\u00b7gc.alloc.rate                           avgt   10  1616.877 \u00b1  14.961  MB/sec\n[info] DurationBenchmark.durationFloor:\u00b7gc.alloc.rate.norm                      avgt   10    24.000 \u00b1   0.001    B/op\n[info] DurationBenchmark.durationFloor:\u00b7gc.churn.PS_Eden_Space                  avgt   10  1616.952 \u00b1  21.970  MB/sec\n[info] DurationBenchmark.durationFloor:\u00b7gc.churn.PS_Eden_Space.norm             avgt   10    24.001 \u00b1   0.179    B/op\n[info] DurationBenchmark.durationFloor:\u00b7gc.churn.PS_Survivor_Space              avgt   10     0.019 \u00b1   0.007  MB/sec\n[info] DurationBenchmark.durationFloor:\u00b7gc.churn.PS_Survivor_Space.norm         avgt   10    \u2248 10\u207b\u2074              B/op\n[info] DurationBenchmark.durationFloor:\u00b7gc.count                                avgt   10  1379.000            counts\n[info] DurationBenchmark.durationFloor:\u00b7gc.time                                 avgt   10   926.000                ms\n[info] DurationBenchmark.durationMod                                            avgt   10    13.896 \u00b1   0.135   ns/op\n[info] DurationBenchmark.durationMod:\u00b7gc.alloc.rate                             avgt   10  1568.034 \u00b1  15.078  MB/sec\n[info] DurationBenchmark.durationMod:\u00b7gc.alloc.rate.norm                        avgt   10    24.000 \u00b1   0.001    B/op\n[info] DurationBenchmark.durationMod:\u00b7gc.churn.PS_Eden_Space                    avgt   10  1566.974 \u00b1  16.507  MB/sec\n[info] DurationBenchmark.durationMod:\u00b7gc.churn.PS_Eden_Space.norm               avgt   10    23.984 \u00b1   0.111    B/op\n[info] DurationBenchmark.durationMod:\u00b7gc.churn.PS_Survivor_Space                avgt   10     0.016 \u00b1   0.012  MB/sec\n[info] DurationBenchmark.durationMod:\u00b7gc.churn.PS_Survivor_Space.norm           avgt   10    \u2248 10\u207b\u2074              B/op\n[info] DurationBenchmark.durationMod:\u00b7gc.count                                  avgt   10  1370.000            counts\n[info] DurationBenchmark.durationMod:\u00b7gc.time                                   avgt   10   919.000                ms\n[info] DurationBenchmark.durationMultiplyLong                                   avgt   10    13.041 \u00b1   0.073   ns/op\n[info] DurationBenchmark.durationMultiplyLong:\u00b7gc.alloc.rate                    avgt   10  1671.025 \u00b1   9.472  MB/sec\n[info] DurationBenchmark.durationMultiplyLong:\u00b7gc.alloc.rate.norm               avgt   10    24.000 \u00b1   0.001    B/op\n[info] DurationBenchmark.durationMultiplyLong:\u00b7gc.churn.PS_Eden_Space           avgt   10  1671.369 \u00b1   9.289  MB/sec\n[info] DurationBenchmark.durationMultiplyLong:\u00b7gc.churn.PS_Eden_Space.norm      avgt   10    24.005 \u00b1   0.143    B/op\n[info] DurationBenchmark.durationMultiplyLong:\u00b7gc.churn.PS_Survivor_Space       avgt   10     0.015 \u00b1   0.008  MB/sec\n[info] DurationBenchmark.durationMultiplyLong:\u00b7gc.churn.PS_Survivor_Space.norm  avgt   10    \u2248 10\u207b\u2074              B/op\n[info] DurationBenchmark.durationMultiplyLong:\u00b7gc.count                         avgt   10  1425.000            counts\n[info] DurationBenchmark.durationMultiplyLong:\u00b7gc.time                          avgt   10   923.000                ms\n[info] DurationBenchmark.durationMultiplyLongOverflow                           avgt   10     3.779 \u00b1   0.027   ns/op\n[info] DurationBenchmark.durationMultiplyLongOverflow:\u00b7gc.alloc.rate            avgt   10    \u2248 10\u207b\u2074            MB/sec\n[info] DurationBenchmark.durationMultiplyLongOverflow:\u00b7gc.alloc.rate.norm       avgt   10    \u2248 10\u207b\u2076              B/op\n[info] DurationBenchmark.durationMultiplyLongOverflow:\u00b7gc.count                 avgt   10       \u2248 0            counts\nand from girishjjain:refactorDuration branch\n```\n[info] Benchmark                                                                Mode  Cnt     Score    Error   Units\n[info] DurationBenchmark.durationAddDelta                                       avgt   10     7.050 \u00b1  0.022   ns/op\n[info] DurationBenchmark.durationAddDelta:\u00b7gc.alloc.rate                        avgt   10  3090.740 \u00b1  9.804  MB/sec\n[info] DurationBenchmark.durationAddDelta:\u00b7gc.alloc.rate.norm                   avgt   10    24.000 \u00b1  0.001    B/op\n[info] DurationBenchmark.durationAddDelta:\u00b7gc.churn.PS_Eden_Space               avgt   10  3091.714 \u00b1 10.834  MB/sec\n[info] DurationBenchmark.durationAddDelta:\u00b7gc.churn.PS_Eden_Space.norm          avgt   10    24.008 \u00b1  0.091    B/op\n[info] DurationBenchmark.durationAddDelta:\u00b7gc.churn.PS_Survivor_Space           avgt   10     0.013 \u00b1  0.007  MB/sec\n[info] DurationBenchmark.durationAddDelta:\u00b7gc.churn.PS_Survivor_Space.norm      avgt   10    \u2248 10\u207b\u2074             B/op\n[info] DurationBenchmark.durationAddDelta:\u00b7gc.count                             avgt   10  1453.000           counts\n[info] DurationBenchmark.durationAddDelta:\u00b7gc.time                              avgt   10   935.000               ms\n[info] DurationBenchmark.durationAddDeltaOverflow                               avgt   10     5.452 \u00b1  0.020   ns/op\n[info] DurationBenchmark.durationAddDeltaOverflow:\u00b7gc.alloc.rate                avgt   10    \u2248 10\u207b\u2074           MB/sec\n[info] DurationBenchmark.durationAddDeltaOverflow:\u00b7gc.alloc.rate.norm           avgt   10    \u2248 10\u207b\u2076             B/op\n[info] DurationBenchmark.durationAddDeltaOverflow:\u00b7gc.count                     avgt   10       \u2248 0           counts\n[info] DurationBenchmark.durationEquals                                         avgt   10     0.640 \u00b1  0.002   ns/op\n[info] DurationBenchmark.durationEquals:\u00b7gc.alloc.rate                          avgt   10    \u2248 10\u207b\u2074           MB/sec\n[info] DurationBenchmark.durationEquals:\u00b7gc.alloc.rate.norm                     avgt   10    \u2248 10\u207b\u2077             B/op\n[info] DurationBenchmark.durationEquals:\u00b7gc.count                               avgt   10       \u2248 0           counts\n[info] DurationBenchmark.durationFloor                                          avgt   10    13.509 \u00b1  0.037   ns/op\n[info] DurationBenchmark.durationFloor:\u00b7gc.alloc.rate                           avgt   10  1612.669 \u00b1  4.522  MB/sec\n[info] DurationBenchmark.durationFloor:\u00b7gc.alloc.rate.norm                      avgt   10    24.000 \u00b1  0.001    B/op\n[info] DurationBenchmark.durationFloor:\u00b7gc.churn.PS_Eden_Space                  avgt   10  1612.655 \u00b1  9.125  MB/sec\n[info] DurationBenchmark.durationFloor:\u00b7gc.churn.PS_Eden_Space.norm             avgt   10    24.000 \u00b1  0.093    B/op\n[info] DurationBenchmark.durationFloor:\u00b7gc.churn.PS_Survivor_Space              avgt   10     0.018 \u00b1  0.009  MB/sec\n[info] DurationBenchmark.durationFloor:\u00b7gc.churn.PS_Survivor_Space.norm         avgt   10    \u2248 10\u207b\u2074             B/op\n[info] DurationBenchmark.durationFloor:\u00b7gc.count                                avgt   10  1388.000           counts\n[info] DurationBenchmark.durationFloor:\u00b7gc.time                                 avgt   10   928.000               ms\n[info] DurationBenchmark.durationMod                                            avgt   10    14.081 \u00b1  0.083   ns/op\n[info] DurationBenchmark.durationMod:\u00b7gc.alloc.rate                             avgt   10  1547.159 \u00b1  9.083  MB/sec\n[info] DurationBenchmark.durationMod:\u00b7gc.alloc.rate.norm                        avgt   10    24.000 \u00b1  0.001    B/op\n[info] DurationBenchmark.durationMod:\u00b7gc.churn.PS_Eden_Space                    avgt   10  1548.571 \u00b1 10.235  MB/sec\n[info] DurationBenchmark.durationMod:\u00b7gc.churn.PS_Eden_Space.norm               avgt   10    24.022 \u00b1  0.103    B/op\n[info] DurationBenchmark.durationMod:\u00b7gc.churn.PS_Survivor_Space                avgt   10     0.018 \u00b1  0.007  MB/sec\n[info] DurationBenchmark.durationMod:\u00b7gc.churn.PS_Survivor_Space.norm           avgt   10    \u2248 10\u207b\u2074             B/op\n[info] DurationBenchmark.durationMod:\u00b7gc.count                                  avgt   10  1426.000           counts\n[info] DurationBenchmark.durationMod:\u00b7gc.time                                   avgt   10   907.000               ms\n[info] DurationBenchmark.durationMultiplyLong                                   avgt   10    14.817 \u00b1  0.177   ns/op\n[info] DurationBenchmark.durationMultiplyLong:\u00b7gc.alloc.rate                    avgt   10  1470.346 \u00b1 17.606  MB/sec\n[info] DurationBenchmark.durationMultiplyLong:\u00b7gc.alloc.rate.norm               avgt   10    24.000 \u00b1  0.001    B/op\n[info] DurationBenchmark.durationMultiplyLong:\u00b7gc.churn.PS_Eden_Space           avgt   10  1470.028 \u00b1 18.214  MB/sec\n[info] DurationBenchmark.durationMultiplyLong:\u00b7gc.churn.PS_Eden_Space.norm      avgt   10    23.995 \u00b1  0.114    B/op\n[info] DurationBenchmark.durationMultiplyLong:\u00b7gc.churn.PS_Survivor_Space       avgt   10     0.018 \u00b1  0.010  MB/sec\n[info] DurationBenchmark.durationMultiplyLong:\u00b7gc.churn.PS_Survivor_Space.norm  avgt   10    \u2248 10\u207b\u2074             B/op\n[info] DurationBenchmark.durationMultiplyLong:\u00b7gc.count                         avgt   10  1424.000           counts\n[info] DurationBenchmark.durationMultiplyLong:\u00b7gc.time                          avgt   10   915.000               ms\n[info] DurationBenchmark.durationMultiplyLongOverflow                           avgt   10     4.082 \u00b1  0.014   ns/op\n[info] DurationBenchmark.durationMultiplyLongOverflow:\u00b7gc.alloc.rate            avgt   10    \u2248 10\u207b\u2074           MB/sec\n[info] DurationBenchmark.durationMultiplyLongOverflow:\u00b7gc.alloc.rate.norm       avgt   10    \u2248 10\u207b\u2076             B/op\n[info] DurationBenchmark.durationMultiplyLongOverflow:\u00b7gc.count                 avgt   10       \u2248 0           counts\n. I agree that it's not drastic improvement, maybe it reads slightly better? I was also thinking of adding comments at the end of certain lines, as below: \nlarger match {\n  case l if (l == 0 || smaller == 0) => Duration.fromNanoseconds(0)                       // zero\n  case l if (l > 0) => smaller match {\n    case s if (s > 0 && Long.MaxValue / l >= smaller) => Duration.fromNanoseconds(a * b)  // + times + = + result\n    case s if (s < 0 && Long.MinValue / l <= smaller) => Duration.fromNanoseconds(a * b)  // + times - = - result\n    case _ => overflowedDuration(a, b)\n  }\n  case l if (Long.MaxValue / l) <= smaller => Duration.fromNanoseconds(a * b)             // - times - = + result\n  case _ => overflowedDuration(a, b)\n}. ",
    "SimonAdameit": "@ryanoneill Sure, I've changed that in the PR. One remaining problem with this code is that since JDK9 access to the sun.management.ManagementFactoryHelper is fenced off by the module system. So instead of using the NilJvm with the new catch you'll receive a warning: WARNING: An illegal reflective access operation has occurred as the package isn't exported by its module. It will still be permitted, but warns that any future JVM may disallow that access. The warning can be disabled via java options, but I'm not sure what tradeoff you want to take here. Also I don't know the proper way to get that information in >=JDK9 without \"illegal\" access to internals.. So after this change, on JDK10 you'd have to add these options to get rid of the illegal access warnings due to reflecting on non-exported classes/fields:\nscala\njavaOptions += \"--add-opens=java.management/sun.management=ALL-UNNAMED\"\njavaOptions += \"--add-opens=java.management/sun.management.counter=ALL-UNNAMED\"\njavaOptions += \"--add-opens=java.management/sun.management.counter.perf=ALL-UNNAMED\". @ryanoneill I think merging this will improve the situation. It might be worth a note in the documentation that these java options can be used to get rid of the warning when you're using a >= JVM9. ",
    "Bachmann1234": "Awesome thanks!. ",
    "dziemba": "Thanks for the quick fix!. ",
    "ryanlecompte": "this can be a val instead of a var\n. ",
    "mehmetgunturkun": "I fixed unnecessary allocations.\n\nalso, why do we need to & it with the unsignedLongMaxValue?\n\nFrankly, I saw that in existing functions, for instance, readUnsignedIntLE, I guess they're used just in case. Maybe to reset other bits to 0.. Yeah sorry, just send the new push. > It is not necessary in this case.\nShould remove that last & operation if it is unnecessary?\nBigInt(1, Array(buf.get(pos), buf.get(pos+1), buf.get(pos+2)... )\nI know that too but just do not want to allocate another Array.. ",
    "dadjeibaah": "That's a good point. That way we won't let we won't let any other unknown Fatal exception cause the return of a NilJvm. Thanks!. Thanks for the suggestion @ryanoneill!. ",
    "monkeyroar": "I noticed it's actually tracked by git and simultaneously present in .gitignore. It was accessed only through reflection. It's an inner method inside other method, i don't think it needs access modifiers. It's an inner method inside other method, i don't think it needs access modifiers. Right, makes sense to choose more descriptive names, both for the argument and value here. Right, but this is java reflection classes, it may return null if checked for class that doesn't contain MODULE$ field. I don't understand, what's not being generated?. I'll look into it. To check that we indeed can access this field. No, it's just that sometimes it's being called with already mangled name as a parameter, like in that case with package object. I've reverted it. Fixed it. I think the problem was, that it was being parsed as javadoc instead of scaladoc. I've checked the source code in java reflections library, and it looks like they already perform null check, and throw exceptions (wich we already catch), so i decided to throw away these null checks. The logic of adding and dropping \"$\" was inconsistent, as it was dropped in some call points and added in others. Now the only place in code that does it is the get method in GlobalFlag object . "
}