{
    "ferventcoder": "http://blogs.lessthandot.com/index.php/DesktopDev/MSTech/getting-chocolatey-to-work-when\n. fixed in 63cf4e0470248c2a7bb602db82af1d7da66d12ca\n. Which package are you seeing this with? Or is it any package?\n. do you guys have a proxy in place?\nSomeone else reported issues with the proxy code that we took from a patch. \nIf you go to C:\\NuGet\\chocolateyInstall\\helpers\\chocolateyInstaller.psm1\nand comment out lines 499-507: \npowershell\n  if (!$webclient.Proxy.IsBypassed($url))\n  {\n    $cred = get-credential\n    $proxyaddress = $webclient.Proxy.GetProxy($url).Authority\n    Write-host \"Using this proxyserver: \" $proxyaddress\n    $proxy = New-Object System.Net.WebProxy($proxyaddress)\n    $proxy.credentials = $cred.GetNetworkCredential();\n    $req.proxy = $proxy\n  }\nto be  \n``` powershell\nif (!$webclient.Proxy.IsBypassed($url))\n{\n$cred = get-credential\n$proxyaddress = $webclient.Proxy.GetProxy($url).Authority\nWrite-host \"Using this proxyserver: \" $proxyaddress\n$proxy = New-Object System.Net.WebProxy($proxyaddress)\n$proxy.credentials = $cred.GetNetworkCredential();\n$req.proxy = $proxy\n}\n```\nThen tell me what you see.\n. We need better proxy support. :(\n. Fixing this again for the first time, for the last time? ;)\n. Hopefully this is fixed with the latest bits coming in 0.9.8.17. If not we will add a config value to specify your proxy type.\n. I'm thinking we'll want to do some configuration file stuff for proxies since there seems to be different ways of handling the way in\n. @grenade would you file a new issue? \n. fixed in 63cf4e0470248c2a7bb602db82af1d7da66d12ca\n. Fixed in e5c15a8c0ccf7d53c82dde4592e949db05434fd9\n. Fixed in e5c15a8c0ccf7d53c82dde4592e949db05434fd9\n. We are likely putting together a packages.config file that will keep all of the installed packages...likely we will put it there.\n. So it might be good to also have the ability to exclude at runtime. Log a\ndifferent issue and note that this is related.\nOn Tue, Dec 17, 2013 at 10:40 AM, codearoo notifications@github.com wrote:\n\nWas going to create new issue, but maybe this is related.\nWas going to suggest that the 'cup all' command had an option to EXCLUDE\npackages.\ncup all -exclude \"7-zip,notepad,etc\"\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/5#issuecomment-30766985\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. clist -lo\n. That second part...log another issue. All these things are great fodder for the nuget ecosystem areas for improvement.\n. There is no tracking at the current time of what source a package came from.\n. Right now if you have multiple sources available, it will find the latest\npackage no matter the source. This is the current behavior of nuget.\nOn Tue, Dec 17, 2013 at 11:18 AM, Rich Siegel notifications@github.comwrote:\n\nwell if package foo.1.0.0 is on one source, but foo.1.0.1 is on another\nsource, do you really want to cross sources? My source names could be\nstaging, test, dev, prod, and so latest might have different meanings.\nPerhaps we should store a source.txt file inside each package listed in\nthe lib folder, and then use when performing a clist -lo -source\nexample.com\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/5#issuecomment-30770557\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. It's being handled in the rewrite.\nOn Friday, December 12, 2014, Martin Long notifications@github.com wrote:\n\nAny movement on this? I have a few things which I don't have licenses for\nthe latest versions (nor do I have any need for them), yet \"cup all\" will\njust update them regardless.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/5#issuecomment-66754139.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. make it cuninst as the shortcut. Folks have expressed issues with the cunst (too close to another word)\n. If there is only one version, it shouldn't prompt.\n. Dependencies are not removed right now. That could get very tricky as multiple items in the repo could depend on the same package (application really) to be installed. Plus the dependency may not be a runtime dependency, only an install dependency.\nConsider ruby.devkit - it has dependencies on 7zip.commandline and ruby. Ruby is the hard dependency, 7zip is only so it can unpack the files.  Which dependency would you remove? The proper answer is probably neither as I might still want ruby around. Thoughts?\n. #389 & #295\n187\n. I think this is done-ish. New tickets will get added to choco regarding plussing up autouninstaller and registry name going into chocopackages.\n. See this for more explanation section \"3.6 Virtual packages\" http://www.debian.org/doc/debian-policy/ch-binary.html\n. Another resource for explanation: http://www.linuxtopia.org/online_books/linux_system_administration/debian_linux_guides/debian_linux_faq/ch-pkg_basics.en_007.html\n. Meta packages are already in chocolatey. Thanks for the suggestion though, I probably need to make the docs highlight that a little more.\n. Thought about it quite a bit, but maybe I'm missing the boat with virtual packages. I need to depend on the virtual package, but how does the virtual know what packages satisfy the virtual package requirement? \nFrom what you are saying, it sounds like debian uses some metadata about packages to know whether they are say a \"PDFReader\" or not.  That could get pretty server intensive as chocolatey doesn't keep a local list of packages (which also means it doesn't give a nice \"Did you mean 'apt-get curl'?\" message either.\nPerhaps one could depend on a tag, but that's not reliable on the nuget framework.  The current method of implementation I've thought of isn't perfect (doesn't automatically have new packages that meet the virtual requirement), but it's a start... :)\n\"We never usually go the right direction in the start, only discover it after we've made progress.\"\nAlthough if you have ideas on how to make it easier to register an application as satisfying a virtual requirement, I'm definitely open to it.\n. I believe in the blog post you were reading, I was thinking of taking virtual packages to a new level where someone could configure whether they want the \".noinstall\" or \".install\" version of a tool/application (like nodejs). Other packages would only depend on the virtual package and then the one the user wants would be installed.\n. No progress yet. We have other fundamental design issues to finish back up in the rewrite before we could even approach this. But it will be in a special extension of the nuspec format.\n. This has been moved to https://github.com/chocolatey/choco/issues/858\n. Fixed in f467af1062950d4c4c0cbb6063448452d8ec73e9\n. By the way, this would have first surfaced for users in version 0.9.8.7 (where we upgraded to NuGet 1.5)\n. @henningc - I did log another issue for you on what you are experiencing - https://github.com/chocolatey/chocolatey/issues/16 - I also closed it with chocolatey 0.9.8.11 (which you can get with cup)\n. Yeah, definitely want to address this in the upcoming version. \n. This is fixed...\n. @mkmurray let's chat on chocolatey/choco, ensure you are on 0.9.10.x.\n. What you are seeing is likely a different issue and definitely not over here on the old POSH version. Https://github.com/chocolatey/choco/issues/new \n. Fixed in f4de1072706d13561edb9b07b7b82cbf67b156ad\n. cinst paint.net\n. @zilexa also that menu is there when you type choco install -h\n. Fixed in aba01ffafbb4c47aa50daa7266aa8de88bde93b1\n. right on.\n. That's kind of like cheating... thanks :D\n. Think this is done... http://chocolatey.org/packages/hg\n. It's okay. Why don't we migrate your notes over to the other issue?\n. awesome. I fixed the curl package by the way and updated to the latest version. The site owner takes down old downloads.\n. This is fixed in 490390d35c2e4c9ff3ba7293c9a1da374bf4ff65\n. Yes - the whole gallery isn't complete yet, so you will probably see oddities.\n. That's why there is a huge message in red on the front page of the gallery. ;)\n. Closing this for now. When the next version of the gallery comes out, this should be fixed. If you want to, log the bug with https://github.com/ferventcoder/nugetgallery\n. It's actually .net framework 4.0 that you need installed. it's listed as a\nprerequisite for chocolatey on the readme in source, but that's probably not\nan obvious location.\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\nOn Oct 18, 2011 12:47 AM, \"marisks\" \nreply@reply.github.com\nwrote:\n\nI tried to install completely fresh machine and started with package\ninstallation. Chocolatey didn't throw any errors on installation and also\ndidn't install anything. After some research I found that NuGet.exe is not\nworking, but it started to work after I installed Visual Studio and NuGet\nseparately.\nI know that it might be NuGet issue, but maybe some NuGet configuration is\nmissing in Chocolatey installation.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/issues/18\n. Actually, I just noticed that the requirements are listed at the bottom of the home wiki page as well. https://github.com/chocolatey/chocolatey/wiki\n. I will take a look at this one...\n. Yes, this is a problem. While I am working this out, you can still install an older version.\n\ncinst notepadplusplus -version 5.9.0.1\n. Notepad++ latest version is now working. Thanks for reporting. Let's log another issue on Paint.NET...\n. Set-ExecutionPolicy UnRestricted is what is actually suggested. \nThis is literally from https://github.com/chocolatey/chocolatey/wiki/Installation without any changes. Note the bolded section.\nPowerShell\nThis is the easiest method. Open a powershell command line and paste in the following and press <Enter>:\niex ((new-object net.webclient).DownloadString(\"http://bit.ly/psChocInstall\"))\nNote: You must have your execution policy set to remote unsigned for this to work.\nIt downloads and runs (https://raw.github.com/chocolatey/chocolatey/master/chocolateyInstall/InstallChocolatey.ps1).\n. On the front page of chocolatey.org where it talks about Easy Install, there is also a blurb in there about having powershell set to unrestricted. Perhaps this could be made more clear somehow?\n. I bolded it and brightened up the text a bit on https://github.com/chocolatey/chocolatey/wiki/Installation - does this help?\n. I also brightened it and made it a bit clearer on http://chocolatey.org. If you have other ideas into how to relay this a little better, please let me know.\n. Are you seeing this across the board?\n. Does the second window even pop up for you?  Do me a favor and look in C:\\Nuget\\chocolateyInstall for a chocolateyPSInstall.log file. This may help lead us to what is really going on.\nFrom what it looks like, it is not finding powershell on your machine to execute. What version of powershell do you have installed?\n. sounds like we need to specify the full path to powershell and possibly make it configurable?\n. https://github.com/chocolatey/chocolatey/issues/23\n. Strange... perhaps we should investigate using just lowercase in the code base?  Although this sounds a bit deeper of an issue if you need to rename items to get them to run.\n. Fixing this could get very interesting...since it extends to packages themselves as well. :(\n. I am about to check in some code that may fix this issue. Can you do a build from source, install and test for me?\n. Fixed in bd850d80ef4e4a173dabe00aa61a8680bf44cc60 \nUnless of course you find it didn't work.\n. The culture was set to InvariantCulture at run time to help eliminate issues like this.\n. Fixed in 3bb2cf9657255038c5ea81bcb03a630a1b198591\n. I merged in the first commit. After our discussion on the second one, I gave you something else. In the source you will now see a setup.cmd. It will set up things you need to hack on the source. :D\n. Merged in 42bf8359c6dca1fba3df65de9144150d4cf2c264\n. For future readers: This is a fix for getting modules. Powershell 3.0 gets stricter on how you can get these items. This fixes an issue with write-host and write-error overrides that happens in the next version of powershell (3.0).\n. If something never asserts admin privileges it is possible that there may not be any window pop ups (unzips will still pop a window)\n. Fixed in 3bb2cf9657255038c5ea81bcb03a630a1b198591\n. Fixed in 3471a3bb1a48255ed2d0cfad2d053a415595ffdc\n. Not seeing this issue, I think it might be coming up due to $pwd\n. No, that is still working... I am slightly perplexed..\n. I put a space in the path I was installing from and it blew up nuget install due to me not catching for spaces in paths to install from, only to.\n. what version are you putting on ahk?\n. what if I told you this thing absolutely worked for me? \n. I did the same steps as you, put it all in the same directory and called the stuff. Worked fine. \nOnly difference I can think of offhand is that my choco install directory does not have spaces in it.\n. I also attempted installing with nuget to a directory with spaces and nuget worked fine.  I would need to change my choco install directory to completely test what you are doing... \n. Try this, in your chocolatey lib directory, delete anything to do with windowpad that you may have there. When the item is already downloaded, nuget will not make an attempt to re-download it. This can cause issues.\n. I actually did it with a space as well and it worked. What you need to do is -source \"D:\\users\\Anthony Mastrean\\Dropbox\\Projects\" and it should work. That's pretty much an expectation though when you have spaces.\n. When you quote the path with spaces, does it work?\n. Closing this guy. Do we want to file a new issue for the spaces?\n. Fixed in 2451ebc2dc72b97752ad6bd823a37185441c4039\n. For list you just type clist -source webpi (and you already need to have webpi.commandline installed for it to work.)\n. chocolatey webpi packageName cwebpi packageName or cinst packageName -source webpi\n. the list command issue is here: https://github.com/chocolatey/chocolatey/issues/37\n. Fixed in 2451ebc2dc72b97752ad6bd823a37185441c4039\n. Chocolatey gem packageName , cgem packageName or cinst packageName -source ruby\nDoes not require ruby gems to be installed prior to running this command.\n. This seems reasonable enough to accomplish.\n. Fixed in revision e5006cd77fa42f3805626d656f98e5af08fbf64e\n. I like it.\n. I would totally dig a pull request here ;)\n. This has been completed in https://github.com/chocolatey/chocolatey/pull/43\n. For notes of others, this packages.config differs a little from a vanilla nuget's packages.config in that it adds a source element. For example:\nxml\n<packages>\n    <package id=\"somepackage\"   />\n    <package id=\"somepackagewithversion\" version=\"1.0\"  />\n    <package id=\"somepackagewithsource\" version=\"1.0\" source=\"http://myget.org/f/customfeed\" />\n    <package id=\"IISExpress\" source=\"webpi\" />\n</packages>\n. That is an interesting idea. You want to log a new issue for it (or would you like me to)? I'm curious in how we could get the items that are from different sources... and also how to account for items that never end up in lib (ruby gems and WebPI items)\n. This has been moved to https://github.com/chocolatey/choco/issues/258\n. Fixed in 244bf4aeef54d8a833069427cc699d262cac830c\n. What version of powershell do you have on your machine?\n. No worries... :D\n. @HKochniss We accept pull requests. :D\n. @HKochniss Alternatively, please file a new issue for us to check the powershell version.  We do have requirements listed, but perhaps it would be better to also have that in the installer script.\n. Because I'm too lazy to type nuget pack \n. Fixed in 317ffed2163ed49a63107c9542b73f1854f83f46\n. Fixed in 82000f151ecb6d993413f0c3889c0f8660a9772f\n. Fixed in 43a3b91667700c1e43a9c86d0cdb83b91050d4a7\n. Fixed in e9b3f96c017f2f8dcdadd77d32103edc53165d7d\n. Fixed in a9fda1328d01ed07fe27658af66b49ac58ea2ebc\n. Fixed in a9fda1328d01ed07fe27658af66b49ac58ea2ebc\n. Fixed in a9fda1328d01ed07fe27658af66b49ac58ea2ebc\n. Dupe of https://github.com/chocolatey/chocolatey/issues/40\n. Fixed in a9fda1328d01ed07fe27658af66b49ac58ea2ebc\n. Looks good. Thanks!\n. Fixed in 951d47b27743fbefb976e1093d95fc3a5e95a571\n. Pretty neat. Works with directories as well.\n. Fixed in 3570d7bac2e695d139c5569b4b3737ffa8cbce59\n. In this case we don't limit at all, but have also removed the usage of nuget.org/chocolatey.org b/c that would be insane... :D\n. This is the test feed I used: www.myget.org/F/chocoinstallall/\nAnd for directories, I just put packages in a directory and called the same thing.\n. Well, shoot, I am going to write some tests for it, but it appears to work. I think it will fall in with -force, and the rename of the folder to c:\\chocolatey instead of c:\\nuget.\n. Fixed in 3570d7bac2e695d139c5569b4b3737ffa8cbce59\n. Fixed in 1b823d5eeae51ab19a757ef80a9bc7585ad5aa1b\n. This sounds pretty doable. :D\n. Fixed in e09a0e1a871708cdf90cd1d082b8ca71b7d9226d\n. Still thinking about whether nuget.exe will continue to be part of chocolatey's package or not. It is an artifact of necessity at the current time.\n. Consider the nuget.exe inside of chocolatey as an internal item to chocolatey's execution. It could go away at some point so linking it now would create later pains.  \nIf you want nuget on the path then install nuget.commandline. :D\n. Fixed in c0cb47a9c4e0e8fc27d0b95e0e97c7cf2599e463\n. This shouldn't be too hard,  I just did something similar for the cinst all command\n. Fixed in 59e71754bb726bddec5ee6dd601ac414c5ff2471\n. Does it break anything or is it only during the upgrade?\n. It might be some remnants of having a preview version installed that may have had issues? I honestly only saw that while I was working on the feature. \n. It's in the chocolatey.cmd file and inside the chocolatey.ps1 file. Solves an issue with the Turkish \"I\" which was making it impossible to use chocolatey.\n. closing unless there is anything left to discuss\n. unintended side effect of still running the old code during the install of chocolatey.\n. Thoughts?\n. It's written out in the Generate-BinFile method. In 0.9.8.13 it writes them in a more portable manner. However during the upgrade, the nuget.bat file is generated using the 0.9.8.12 code.\n. Nuget.exe will not be linked in vNext\n. Undocumented feature this release but fixed in fc768d4b097e97d243e661e654588431d183c50b\n. Undocumented meaning dark feature, subject to change.\n. Nuget.CommandLine - it's been there since the beginning. Bad name (on nuget.org)\n. Fixed in 9c73f18beb0ed6cb6aee38b09479507d73877240\n. Apparently there is a second one with the same name: http://win-get.sourceforge.net\n. Sounds like we just need to not work with any packages ending in .config. Do you think that would be agreeable? Or if we don't find a file named something.config we try looking at it as a package name instead.\n. Oh, sorry, I already fixed the issue using EndsWith(). But then I thought about it some more and we shouldn't restrict a package name ending in .config or cause confusion if someone has one named as such.\n. Fixed in 6d2c54f6d290088cb622ded3560476a61b03db24\n. Here https://github.com/chocolatey/chocolatey/wiki/CommandsInstall - probably could draw out the packages.config to it's own wiki page though.\n. Fixed in 3c7701e49b8d912aee52d911c4c16d3f4873605a\n. Fixed in 6d56726e9aca6818d3fc9810d943d16eff6a4c14\n. interesting that you would use BITS...\n. Maybe choco should use Curl - how does it do with proxies?\n. This is in 97b94b2d7d5874da2e94bad693b3e8c51a146b64 and 5a9d3968042cdacfdfce62f05e0108a772c5019e. This closes #297\n. Fixed in 7aac8983c358bf4e0dcccaa6465b567628063480\n. Noticed a couple of things here. \nWindows XP would no longer be supported.\nAdmin privileges are required - one of the tenants of choco is to run on systems w/out admin. And it does as long as you stay way from admin packages.\nHow does this work with tools that have required dlls or configs sitting next to them ?\nWe talked about generating batches differently for gui files. While this would be awesome and a very clean way of doing this, I can't limit choco down to only admin users on greater than xp.\notherwise I would kick up choco in admin mode.\nPerhaps this is a \"mode\" we can support later for those that will be running as admins.\n. Tried with nant - couldn't load log4net. Boo.\n. you can put the symlinks under a user profile? Chocolatey installs under user environment settings since 0.9.8.7.\n. Agreed.\n. your link didn't work.\n. I think this may be duplicated by some other issues...\n. Is this still an issue? \n. The nuget.exe file inside of chocolatey isn't meant for public usage. Once we get in a feature to ignore exes, that will be one of the first on the list.\n. Fixed in b18b0819b3f67b06ca47cef7745d7d2f2dd1d12c\n. Fixed in 4aeea37b2a91ccaf279c6c34bef136b4c812edc9\n. Open PowerShell as an administrator. \n. calling this good to go...\n. Freakin awesome idea. :D\n. @jasondenizac It's fine to put issues on NuGet gallery, but keep in mind that Chocolatey and chocolatey.org are separate projects. Having the nuget gallery add it would be awesome, but sometimes things are quicker to get added to chocolatey.org and pointed to later. See this PR: https://github.com/NuGet/NuGetGallery/pull/525\n. It's coming hopefully with next release. I was just thinking of this\nenhancement this morning.\nOn Monday, May 20, 2013, Phil Baines wrote:\n\n@gep13 https://github.com/gep13 Thanks!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/67#issuecomment-18153324\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. no updates yet, but it will be automatic without a save flag. Folks would want to opt in automatically and opt out by a flag.\n. There is a workaround for this that @jongalloway came up with recently.\n. Closing here as the issue has been moved to https://github.com/chocolatey/choco/issues/357. Please continue discussion over there.\n. This is my bad... I will get that fixed. \n. okay, give it it a whirl now. \n. Awesome. With ruby.devkit you should not need to restart. It should start from nothing and hook it all the way up.\n. After the install you would need to restart the console though :D\n. This should be fixed now.\n. Actually people have reported that this is true just the way it is now. Can you verify?\n. Awesome. I could probably update that then. :D\n. Done\n. Fixed in beae3410d488fd170ecf71534c85f8fc1ebe21bb\n. Fixed in 2264e8101db5da929306b2ae391ea419cef97156\n. Fixed in b18f76fc245dcd268f47a7e8a6862f21213cca51\n. Fixed in 02eaf8e807137b610d1b64998adc080131c557c8\n. Awesome, thank you. Freaking droid web browser i'm on right now is a pos when it comes to editing. It doesn't go to where you point and it's impossible to navigate by keys\n. By the way, this is a dark feature right now since 0.9.8.15: if you have bobBob.exe in a folder, you can place a file named bobBob.exe.gui right next to it and chocolatey will set it up as a gui app instead.\n. This is now documented in https://github.com/chocolatey/chocolatey/wiki/CreatePackages\n. Unfortunately building is not in the vision of chocolatey. Library packages are not out of the realm of chocolatey's vision, but pretty darn close.\nThis is where apt and chocolatey diverge. Chocolatey does not do source packages. CoApp on the other hand is up and coming for exactly this idea. https://github.com/coapp \nMore details here: https://github.com/chocolatey/chocolatey/wiki/ChocolateyFAQs\nThank you for asking.\nBy the way, nuget is looking to add support for C++ - http://nuget.codeplex.com/discussions/280649\n. Closing this for now pending any further discussion....\n. This shouldn't be too hard. Likely it will be pulled into the next version. :D\n. Great... :( Thanks for reporting this. \n. It seems that other folks are reporting this issue as well. For now try adding source=\"http://chocolatey.org/api/v2/\" />\n. Fixed in dc736b5c9d6bb99c64b0841ae6bf0a8eec6389b8\n. slap the source into it for now... It's the source that is the issue\n. Thanks. This definitely appears to be a bug...\n. Fixed in d34231feb682e834f7d8b404e6e0bfc4487ebcf8\n. By the way, what is the actual value of the environment variable on the machine? Closing and reopening powershell and calling this might be sufficient to get the machine value.\n. The error at the end is the changeover of chocolatey to a new folder and it having issues updating the powershell session's path.\n. Close, reopen powershell.\n. https://github.com/chocolatey/chocolatey/issues/80 - already fixed the issue. It's related only to the instance you are in...\n. Good, job? ;)\n. @krivan you can already starting hosting your own private repositories now. The one trick around this at the moment is that you would have to host both the public package and your private one on the private repository\n. This now works thanks to @LucidSage's work. :D\nhttps://github.com/chocolatey/chocolatey/pull/101\n. And you don't even need to have the dependent packages on the same feed.\n. @MarkJohnson1974 I've added a new issue to capture the additional differences - https://github.com/chocolatey/chocolatey/issues/105\n. Apparently you can already do this - cinst blah -source \"\"source1;source2\"\" (note the double quotes)\n. @MarkJohnson1974 UNC paths should work - if you quote for spaces, make sure you double quote.\n. Awesome! It's likely we'll have a configuration at some point to ease all pain in proxy issues, since they all like to work differently... \n. Until then I don't have a problem setting this one up.\n. Fixed in bd3eefefc440d821b6a97abd1381fe64d7b176a6\nFull disclosure, moving stuff around so I just pulled it in like a patch.\n. In the next couple of weeks I am looking at a release. Got one more bug to fix and hopefully some pull requests to bring in. :D\n. The beta is out, unfortunately you will have to do a little bit of manual work to install it (the new version will handle prereleases, 0.9.8.16 doesn't) - \nGo to https://github.com/chocolatey/chocolatey/wiki/Installation\nand use the NuGet.exe + PowerShell Method (very bottom) - you can use chocolatey to pull it down but you will still need to dive into the installation folder to run the install script manually.\n. Hmmm - just make sure you don't have a Help.ps1 and an Install-All.ps1 in the functions folder anymore (two files that were in 0.9.8.16 were renamed to include \"Chocolatey-\" on the front).\n. Oh right - to do the nuget method you would have to say nuget install chocolatey -pre\n. fixed in 2eec8417032c706075c7b872f926411129ac8530\n. Fixed in 2eec8417032c706075c7b872f926411129ac8530\n. You are close - step #3 is just the verbose output coming back from NuGet. It is not considered installed by chocolatey until finished and the message comes out.\n. But I do agree - chocolatey needs that last step to say - \"Yes, this was successful\" \n. This is related to https://github.com/chocolatey/chocolatey/issues/10\n. Chocolatey != 1.0 fellas. Expect some rough edges that need to be smoothed out. :) \nThis is one of those. \nMy preference is to mark as broken so someone can inspect what went wrong. (and move it to a particular folder that contains broken packages)\n. Still stewing on this one... leaning towards good.\n. This is going to be done with a configuration - you will need to enable it on the configuration. I will push that up and then you can set the command if you like\n. The default is to NOT use the nuget config. If you want to use it, you will have to set a user configuration telling it to. Does that sound fair?\n. I'm pushing the config file in master, if you want to take a look at that and reissue a pull request (that way you get your name on the work). Use a different branch than master please. Thanks.\n. Closing this one...waiting on the other. Let me know if you want it (I can reimplement if not)\n. Great! There is github for windows that helps when learning git. I'm releasing chocolatey this week so if you want to get in on that try to get it to me today or tomorrow. If not, it can just roll into the next release. :D\n. Hopefully addressing this in 0.9.8.17. It doesn't find the right folder when looking for one with prerelease bits on it...\n. Just fixed the cup side of the house (https://github.com/chocolatey/chocolatey/issues/90) and I should get to this sometime this week.\n. I believe this is fixed. I could not reproduce this with the latest code...that should be out in beta form in the next day or so\n. Nice...not everyone installs chocolatey to C:\\chocolatey though\n. You can actually pre set the chocolateyinstall variable to point it somewhere else. But in this case it would capture 90% of the first hits.\nIf you are in powershell, it is already set at first initialization (it's just wrong for some reason - it was fixed in the source and will go out on the next release)\n. I think I might go ahead and add this to the code... thanks for this\n. Thanks...I will take a look at this.\n. Fixed in ab24dda6aa0596d31f78f0d21357b80de2056bc1 - out with 0.9.8.17 release\n. You had multiple folders with 0.1.0 of sake in your folder structure, even though they were different prerelease versions. \nChocolatey had not yet made it to handling prerelease folders, but it will in 0.9.8.17 (next release). It errorred trying to add more than one item to the found packages dictionary. The fix is in with specs (https://github.com/chocolatey/chocolatey/commit/80df71b6f2bbecc4ec0f01539050cc966641dec9#L3R71).\n. Thanks...I will look at implementing tests for this unless you want to\n. We use Pester - the testing aspect is not exactly straightforward. But we have really good examples in the tests folder. If you follow that down to unit you will see an example of some tests. https://github.com/chocolatey/chocolatey/tree/master/tests/unit\nIf you come up a folder you will notice another folder named functions (which really should be named mocks). https://github.com/chocolatey/chocolatey/tree/master/tests/functions\nThe mock may already be setup correctly. Most tests in the system (there are not a ton yet, I'm new to powershell testing as well!) are unit and not integration tests. Which means you test by what you expect from different functions.\nI did a recent presentation on powershell testing which may give you some pointers into this area: https://github.com/ferventcoder/presentations/tree/master/dotNet/powershellbdd\n. I have it in mind to make changes to Pester to autogenerate the mocks and variables. Although I haven't yet made much progress (priority over time) yet.\nScott is on board with the idea so it should be pretty easy to get into Pester once completed.\n. looks like it missed this commit - 3c27cb91bfbc6e44293eef3629cf94200f60a768\n. Not too bad. You went to the level to add the mock in. Almost there for specs.\n. files are in. Freakin awesome. Thanks!\n. Found an annoying issue with UAC - it's fixed now but can you confirm that cygwin runner (not the installation of cygwin) requires administrative access?\n. It was not an issue with your code, but rather how Start-Process -Wait misbehaves when you use -Verb \"RunAs\" and UAC is on. Take a look at this: https://github.com/chocolatey/chocolatey/commit/27d9288a30e19b1511006051920b0d0da1f3b367\n. the bug was there all along for Chocolatey-WebPI. I just fixed it for both files\n. That question only answers the installer - not the question I have which is when it runs to download and install packages. Which by the way is freakin awesome. \n. Usually I do as well - UAC is annoying to me. But chocolatey must support it.\n. Awesome. :D\n. Not a problem. About to put out a beta. The best thanks you can give me is finishing the puppet provider. :D\n. I think msiexec already uses start process -wait :D\n. This is a good start. Very highly appreciated!!!\n. We'll have to figure out the uninstall path (I was thinking hints to program files locations [x86 versus not] for the longest time) for the most common scenarios.\n. This is in. Please delete your branch and pull from there to work on additional pieces...\n. Yeah. A whole bunch of helpers for uninstall would be good. Let's see how much choco itself can do without helpers in a parallel track. I'd like to pick this back up once the posh runner uses runspaces.\n. used to be a big file that was broken out. Not sure what you are asking.\n. 0.9.8.16 is still a big file, not broken out.\n. Delete the versioned chocolatey folder from chocolatey\\lib and then from the _packaged_output folder call cinst chocolatey -source %cd%\n. I like how you send me a pull request. DO NOT ACCEPT. lol\n. We can drop it in the package folder to a known file. If it is there we don't really even need a chocolatey uninstall file. :D\n. Shouldn't an uninstall handle the stopping of services/etc? I know that it doesn't always but one would think it should. Pre-uninstall. :D The uninstall before the uninstall. ;)\n. I'd say this is pretty close. Only thing I might do is drop this file in the package directory itself (the versioned one). That way if I have side by side installations I can uninstall them separately if I want. If I understand right, the code changes for each install.\n. Awesome! \n. @tyrken @rismoney auto-uninstall has always been the idea so that an uninstall script would not be necessary with certain installer.\n. Fixed in e5d8eec65ee90b94ad2188d06675b23d4b9d9abc\n. This uses the older easy_install as opposed to pip. http://stackoverflow.com/a/3224103/18475\n. http://stackoverflow.com/questions/4750806/how-to-install-pip-on-windows\n. It's so much cleaner than all of that stuff I was doing... :D\n. This is in. Thanks!\n. This is in...thanks man\n. Good thing that is only in the beta. Thanks... Let's get that fixed before release\n. I can take it or you can... seems pretty straightforward.\n. Fixed with PR https://github.com/chocolatey/chocolatey/pull/104\n. Awesome....\n. package availability. Nuget.exe handles all of this on the back end, you just need to send it the right arguments. :D\n. Ha! Just realized through @LucidSage 's commit that you can already do this - cinst blah -source \"\"source1;source2\"\" (note the double quotes)\n. https://github.com/chocolatey/chocolatey/wiki/CreatePackages\n. These are only the files in the package folder. It's extremely convenient when you have a whole set of executables you want created, which is more often the case in my experience.  \nCurious why you more executables in your package folder that you don't want added as redirects versus the ones that you do. Are the others temporary? If so maybe it is better to use a temporary folder and clean it up when you are done using it in chocolateyInstall.ps1.\nCan you give me an example @u9520107?\n. It looks like you may have overwritten your repository unintentionally.\n. Looks good, only issue I run into is that you need double quotes around the values since powershell strips them off as it comes in\n. I also noticed that chocolatey already supports multiple sources if you just cinst blah -source \"\"source1;source2\"\" right now...\n. It might be that when it passes it to nuget.exe it is stripping off the quotes (appears that way from your pull request).\n. Thanks! I'm a little lost on when you would reuse the same download for install. The only time that most folks would reuse the file is when there was an issue with the install (usually only helpful while building/testing a package).   \nIt brings up questions like\n1. What if the installer file is corrupted (or for some reason unusable)?\n2. What if the remote file doesn't have different versions? \n.  1 - I like where you are going with that. The head request though, how well does it work with redirects that need cookies? I would prefer that over making pkg authors figure out the MD5 (especially for applications that always have the same url for every version).\n2 - We can communicate information to the helpers - I prefer not making the author pass more information to the helpers when we can easily get the information to the helper through an environment variable.\nOne of the biggest benefits of chocolatey is the ease of creating/maintaining packages. We want that to be as straightforward as possible.\n. It's called a redirect loop.\nDownload anything from sourceforge and you will see why a need for cookies on a redirect. Here is the code with a reference https://github.com/chocolatey/chocolatey/blob/master/src/helpers/functions/Get-WebFile.ps1#L43-44\nhttp://stackoverflow.com/questions/518181/too-many-automatic-redirections-were-attempted-error-message-when-using-a-http\n. :D\n. I do think this is going to be pulled in...in one form or another.\n. @rismoney agreed.\n. Unless we can guarantee that folks are doing the updates against latest chocolatey code correctly,  I'm not sure we should be advising they do. To do it correctly, they essentially have to do a force push to overwrite history on github and that essentially scares folks.\n. Gary, \n I think it's something we can add as a wiki/markdown file for contributors.\n. Folks, I think I'm implementing the idea of this, but not in the way this pull request was done. Closing this as not fixing.\n. Yep, #428 will be closed in a few.\n. @LucidSage - This is great! I think though that we may want to talk more at length about setting config values. Do you want to start a discussion on the forum?\nThings to think about -\n1. right now when I update chocolatey the global config will be overwritten. Not sure people would like this behavior.\n2. I think I would like the command for changing configuration values to be chocolatey config as in chocolatey config configValue [add|remove values]. If there is not an add or remove, it will display the current value. And if it's a list it should display all of the values.\n. As I've thought about this more and more, I think I want to move forward with this one. :D\n. Oh right on. I should have came in an looked to see if you had additional messages prior to troubleshooting.... :D\n. Probably a network hiccup.\n. I get that at the end as well. \n. I ran chocolatey afterwards with -debug and things look good. \n. Might be a fluke of some sort in the installer files\n. Could have been worse - https://gist.github.com/2420a607be697debaa44 - DOH!\n. Fixed in f612e17d6339406a829fad2499355b3272d70148\n. So I can close this one because I pulled in the other?\n. What is the original PR for specific folder capability?\n. This is in.\n. Packages for extensions would be named something.extension to make them discoverable. We might want to enforce the convention by only calling the extensions installer if the package name ends in \".extension\"\n. The folder: we could name the folder modules. I think extensions explains the purpose better.\n. Fixed in 0cec008dcd3ca23061740dff7c1bd44f562a9364\n. psm1 - IIS helper may be one. To do something like that we could push the extensions to the admin calls as well if they exist. Then you can take a dependency on the extension - wow this could get really interesting (and confusing).\nThis is really an opportunity to see where folks want to take chocolatey and to see what extensions we would bring into the core product. It would also allow folks to add new commands to chocolatey (still working on that one though)\n. I want an IIS helper in the core product - I think we are missing out on many pkg opportunities since the product itself is a website.\n. There are folks out there smarter and better than us and I want to be able to add them into the chocolatey equation. :D\n. Reason for psm1 over ps1, you may have some ps1 functions you want to keep internal so the psm1 serves as the methods you want to expose.\n. Fixed in afd98764188af090e6b3f8569696e37aaa81e47a\n. Thanks! I will be pulling this in this week and pushing out a new version.\n. Might have missed something in there with python. Ruby I converted back to not using the config file or external process.\n. Thanks for reporting this...\n. Per chance does your chocolatey path have spaces in it?\n. Fixed in 8743e1ca28a572c651e4464a2037047924b9b7a3\n. I found that the easy.install nuget package (I don't own is a little wonky). It may take a couple of tries to get it to work right.\n. Why closed?\n. Great question, but one for @rismoney \n. Cver serves the purpose of finding what the local package is on based on the remote package. Cup uses cver.\nBut I think I understand what you are saying... calling it to just query the local versions.\n. When I need to use switches, I don't pass them as parameters but I set them globally. That seems to work in PowerShell versus passing them.\n. and I thought about the last night. I think it should be renamed to localonly so if the switch exists then we only look locally. Thoughts?\n. like -force and -pre\n. This is in...\n. We do use a proxy. Try adding -debug switch to your calls to see if you get anymore information on what is happening...\n. Thanks! I have a multi core processor and I haven't noticed this as an issue but I'll definitely take a look\n. Maybe that is an issue then... :D\n. This has been merged c540769811b452f28edbca759ae7c822769acdb2\n. Workaround for now is to just call cinst packagename\n. We may need to talk about his some more. Never heard of it before...\n. I think we'll likely pull this in... :D\n. This is in. Thanks for the contribution!\n. You are using master branch for pull requests...\nWe like to keep things concise and ask that the pull requests come in from specific branches...\n. If you need help with this I would be glad to discuss\n. yes, unless you can update this current one...\n. I don't think that is possible though... When you create the new one, make sure you reference this one before you close it. \n. Pull request moved to https://github.com/chocolatey/chocolatey/pull/130\n. Will be later this week or next week before I get to the pull requests. :D\n. I take it the local only meets your needs. If so, please close this issue.\n. It might be better in the upcoming release... I think that is what @rismoney was saying. Thanks for the suggestion. \n. The ChocolateyInstall variable lets you install it where ever you want. https://github.com/chocolatey/chocolatey/wiki/Installation\nChocolatey installs to the root of the system drive which just happens to be C on most machines by default. Curiosity on why this is not clean? \nIt depends on your definition of warning, but it clearly logs out where it is installing to during the installation: https://github.com/chocolatey/chocolatey/blob/master/nuget/tools/chocolateysetup.psm1#L159\nA prompt stops execution and waits on user input. This goes against the ideas behind chocolatey, which is unattended installs, even of itself. The upgrade process of chocolatey uses chocolatey and that would result in a 'cup all' execution stopping, which might upset folks who want the whole thing to just happen silently in the background. \nFor the folks who want more power over their experience, that is why we provide you the ability to change your conventions and pass in Install Arguments for packages (https://github.com/chocolatey/chocolatey/wiki/CommandsInstall). \n. Ruby, Python, PHP, CygWin, PostgreSQL, etc, also install to the root of the system drive as a default. I'm never sure why some folks feel the program files is more clean (not saying this is where you suggested, just that other folks have). \nTo me if something goes to the program files it also goes to the registry as an installed application, one that can be uninstalled from programs list in the control panel. To me having things in there that are not controlled through the system install registry is not clean so I wouldn't see chocolatey there.\nThe other location, User Path (C:\\Users\\username and C:\\Documents and Settings\\username) to me starts to scare me based on the character limit in batch based redirects (not sure if it used to be 255 character path length or not). I don't want to get into cases where we go \"C:\\Documents And Settings\\ALongUserNameCuzICanUse32Chars\\Chocolatey\\lib\" (which is already over 70 characters) before we get to the actual folder. Plus I don't know about you, but if I need to break into the lib folder for some reason, that's a lot of folder navigation. It's already bad enough I have to go 3 folders deep, I get irritated when I have to drop 5 folders just to get to something useful. Not that I always use folder navigation starting with computer.\nSo to me, and you don't have to agree, the systemroot is much cleaner. And for those that don't agree, that's why we provide a means to install to some other directory.\nThoughts?\n. I also don't feel this way about everything. Somethings I would rather see in a subfolder. I'm not even really sure what and when I want to see things in systemroot versus a subfolder like c:\\tools (where I put many useful tools I find).\nI reserve the right to contradict myself. ;) (quote originated from Oren Eine)\n. It's all good. We can agree to disagree on this one.\nOne thing I also didn't mention is the low privilege install aspect of chocolatey (another reason we shy away from Program Files). Non administrators can install chocolatey (through one of the methods, not sure if the default will work) and be able to run chocolatey for non-administrative installs of applications (aka what chocolatey calls tools).  I'm not sure if you've checked, but Program Files requires higher privileges than the Users group to be able to write to the folder (at least on Windows 7, I didn't check all the others).\n. Guess I didn't have a wiki page up yet: https://github.com/chocolatey/chocolatey/wiki/Uninstallation\n. We could provide a version of chocolatey that would \"install\" to the system meaning program files and the install registry. Would always run under administrative rights and other things... of course this version would likely cost money since it would be for commercial/enterprise uses.  \nI did my time with massive scale enterprise applications. I am very familiar with SOx and many of the good things developers should do (like principle of least privilege)...  \nChocolatey is free, OSS and meant for consumer purposes in it's current existence. It's not perfect, but it is also not v1 either. And even when it is I wouldn't expect perfection. Perfect software has problems shipping. ;)\n. Based on the following, where would you install chocolatey (some repetition from this discussion)? https://github.com/chocolatey/chocolatey/wiki/DefaultChocolateyInstallReasoning\nI am really curious, I am not trying to be facetious. I welcome healthy discussion (including healthy arguments). :)\n. Yep, we make use of that in some places. :D\n. Closing this for now pending further discussion.\n. That's definitely not right. Can you list whatyou've  installed thus far?\nOn Tuesday, October 22, 2013, Nathanael Jones wrote:\n\nIs every chocolatey application supposed to install in C:\\ as well? Or\nunderneath C:\\Chocolately? I'm seeing everything appear in C:\\ directly\nunder Win8.1.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/126#issuecomment-26852153\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Ah. Those actually default to root as opposed to program files based on the\nnative installers. You can overcome that by using bin root, both of these\npackages respect that value.\nOn Tuesday, October 22, 2013, Nathanael Jones wrote:\n\nJust ruby -> C:\\ruby200 and PhantomJs -> C:\\PhantomJS\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/126#issuecomment-26861079\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. For clarification - Chocolatey can handle spaces...\n. Yes, there is also one called toolsroot.\nOn Wednesday, October 23, 2013, Nathanael Jones wrote:\n\nYou mean this package? https://chocolatey.org/packages/binroot\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/126#issuecomment-26955392\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. awesome. I will take a look this weekend hopefully :D\n. Since I pulled in the other it's reasonable that this can be closed. Thanks for the contribution though!\n. The only thing I think would be acceptable is to pass those items through the command line and have them passed as header values when making the request (if they are there).\nThat would get you into the src/helpers/Get-WebFile.ps1 (I think it is called)\n. Short answer: I'd like to stay away from storing sensitive information in a file with chocolatey (at least for now). \ntl;dr\nThere is a config file, but I don't want passwords in a file. Some folks put chocolatey in a dropbox folder so they can move it easily between computers. I don't quite agree with this b/c it gets things out of sync (what do you really have natively installed on this computer?) and can cause confusion when updating all of your packages. Some folks like it though. While I don't agree with it/support it, I don't want to introduce changes to chocolatey that limit their ability to do so. If we had some kind of encrypted string in a file it may not translate between computers (depending on the algorithm used). In the past (in other projects) we've used X509 certificates to get a good algorithm between machines. I don't want to take chocolatey in this direction of complexity (using certificates) unless it is absolutely required (read: it's probably not).\nI could be wrong, but the way you save secure string to a file is still machine specific (http://social.msdn.microsoft.com/Forums/en-US/csharpgeneral/thread/d4557d9b-6e7d-4695-bfd0-a22a08e06160/ | http://stackoverflow.com/a/6982430/18475). To save the securestring to a file you would use some algorithm which usually ties you to the machine (or store the IV you would need somewhere, which still gets us into the same issue if we want to store that with chocolatey's directory). Or use X509 certificates, which opens up even more complexity than the other methods (how to install, where to install, what about permissions to the private key, how to sync between machines, etc).\nOne of Chocolatey's tenants is simplicity. Note that simplicity is not the opposite of complex, only the opposite of complicated. I don't want a complicated experience for users. So whatever answer we come up with, it should not impact the user experience in a detrimental way.\n. With choco.exe, this is already resolved. This closes when we switch in the new repository.\n. @skyguy94 \n\nI'm not certain I get the argument here. If my summary is correct, then Chocolatey complicates behavior by breaking a NuGet feature.\n\nChocolatey != NuGet\nYou are also treading on a 2 year old comment. ;)\n. Chocolatey uses the NuGet packaging infrastructure. \nPer the comments on active/unresolved: This is unresolved in current releases of choco b/c the code to do so could have been very painful in POSH, and we've been holding off on some things we knew were painful until the rewrite. Although this is an issues list, some things are enhancements (although this one is not marked as one though...) :/.\nThis has sat because we didn't have a good solution at the time. Apologies, hopefully many of the current issues will be cleaned up.\n. @codearoo clarification - choco.exe uses nuget.core.dll, not nuget.exe.\n. All nuget packages will continue to work. That would be unwise of us without a long term deprecation. I would assume that we tend to handle compatibility well on the team and deprecations. But with your concern, maybe that is not the case? \n. The installation instructions also say you do this from a command line (cmd.exe) and not a powershell prompt. Were you getting these errors from the command line?\n. perfect :D\n. Original discussion here: https://github.com/chocolatey/chocolatey/pull/124\n. Multiple reasons:\n1. Once you have a pull request out from master you cannot do anything additional or it will affect the pull request\n2. You really can't have multiple pull requests at the same time.\n3. It's not as easy for me to see the straight line from where you made changes IF you update your master with my latest changes.\n4. Following the above, it messes up the nice straight line for git history if you update the master with my latest changes when I go to pull them in.\n. If you take a look at the history of chocolatey (gitk from the command line or if you have gitextensions installed you can see it as well)\n. Do you want to see if https://github.com/chocolatey/chocolatey/pull/119 meets your needs?\n. The tool that chocolatey uses for downloads doesn't appear to allow me to do this, but we can keep chocolatey from trying to do anything further with the packages once they are there.\n. I like where you are going. Install and update both ignore dependencies... the trick is how do you get cup all to work correctly...? I'm thinking if someone puts in ignore dependencies and those dependencies are installed, we want to go ahead and clean them up right then during install (or update). If they are already there we just move on.\n. Well that is interesting. If you installed ruby and then called for devkit it should not have....oooohhhhh, freaking nuget algorithm with dependencies. It still should not have installed another version of ruby with an existing one there. We will be upgrading the nuget client once we get a fix released from a bug report I filed a couple weeks ago (the fix is in the code base now, just waiting on the out of band release).\n. My take is we allow someone to pass the switch. In the documentation we say results are not guaranteed. If someone complains, we say it's a sharp tool that won't constrain you but you better understand what you are doing or it will cut you.\nThat's the way I like tools to be. Allow folks to take off all of the safety guards if they need to.\n. It should not have upgraded a dependency that was already met.\n. It should be in the prerelease.\nOn Monday, September 30, 2013, jamescrowley wrote:\n\nIs this available at the moment? We'd use it to install a different\nversion of a dependency than the package author actually specified\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/131#issuecomment-25382564\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. This is fixed...\n. I could always add a link. Please add this an an issue on http://github.com/chocolatey/chocolatey.org/\n. As much as possible I would like to avoid something powershell from the command line. The inner guts of chocolatey are powershell, but the way folks use it from the outside doesn't have to be. \n. Ha! I actually typed out the word \"powershell-y\" but then removed it. :D\nYou can access that within the ps1 (it's gets set as an environment variable), but are you worried about it moving on to the installer?\n. More information on how it is used: https://github.com/chocolatey/chocolatey/blob/master/src/helpers/functions/Install-ChocolateyInstallPackage.ps1#L51-53\n. $env:chocolateyInstallArguments\nDo you think this might be better as an addition to https://github.com/chocolatey/chocolatey/blob/master/src/helpers/functions/Install-ChocolateyZipPackage.ps1\n. Like we'd leave it as installarguments but allow the settings to override defaults in chocolatey zip package function?\n. I'm closing this as a dupe of #159 - that's where the work was done. Use -params \n. @alyssenko-ssi An environment variable for Install Arguments was implemented. However it should not be looked at all for packages. If you need information from the user, one should be using $env:chocolateyPackageParameters, see #159. \n. WHAT?! That's awesome. \n. The initial workings for this are in b87541a5fe5ec04c4a29846c761e528f9070b3b3 - we'll see what other things crop up.\n. @ForNeVeR We already have the powershell refresh in and once the commands become aliases back to the module methods, you will see this happen automatically as there will be no call out to a batch and then back into powershell.\n. Fixed in a09e15896fbc5e790b17b6699cd6b50bc7eb14e4\n. The current state is that unless you import the chocolateyinstaller module, you won't automatically get path updates. Importing the module isn't recommended at this time but some folks are experimenting with it.\nWith cmd.exe you can just call RefreshEnv after an install that would update something in your environment and it will update your session's environment.\n. system vars require admin - that's why the default goes to user. \nTo go to system, it would just take adding them manually and applying this fix for now.\nI think in the future we could make the installer smarter.\n. Weird. Interesting. It might be a bug somewhere in chocolatey's installer script.\n. I would be fine with more named parameters in there. \nKeep in mind that whatever is done, it should work without the supplied parameters or property files.\n. Think I'm getting ready to pull this in. We'll also be rewriting this to make it a ton cleaner as well.\n. This being the installer, not your code. :)\n. Definitely want to get this into .21\n. I don't think is necessary now. 0.9.8.24 had some major improvements to how it handles environment variables during install. \nThis is superseded by #453 which was later superseded by #486.\n. I have two pull requests for FTP support. Probably time to start a document on \"So you want to contribute?\"\n. I like this...quite a bit. Whatever you do though, don't update your repository with my latest changes. I think that document for contributions is going to get written soon. \nWe usually want people to contribute pull requests from a branch that is not master. That allows you to contribute multiple patches that way and doesn't get us into where we need to cherry pick your commits to keep the history in a nice straight line. \n. we'll be pulling it in soon.\n. This is in...thanks for the contribution!\n. This won't work of course until we release the next version of chocolatey (0.9.8.20), but that should be by the end of the month.\nYou can download and play with a prerelease version now.\n. This goes out into full release in a couple of days. So many new things being added. :D\n. grats for the update. Gonna try to get this in this weekend.\n. This is in... thanks! \n. Looks like this may have messed something up with the get config values...\n. Nevermind, this was my bad... \n. Thanks. Not sure why I didn't get an email on this...\n. I think this is still valid.\n. I also have one in email from someone on this as well.\n. This only happens on the session (or existing sessions) that you do the install from, correct?\n. Once you close and open a new powershell session, this works appropriately, correct?\n. Or you actually checked the environment path and it wasn't there and then added that to your session?\n. Last time I checked that only updates your current session, not the path variables stored on your machine.\n. I'm referring to opening control panel, system, advanced, variables and the PATH variables in there. There is one for user and one for system. Just b/c it doesn't end up in your current session (of powershell or cmd) doesn't mean it didn't get added to the actual path.\nHere's an experiment: open the system stuff in control panel and then go back to your powershell session and add c:\\bob; to the path the same way you did in powershell. Now look in the actual path to see if it got added. Both places (user and system). Now close and reopen powershell. Write-host your path. Is c:\\bob still there?\n. I think I like that better dropped into a new issue - your fix... please submit as an enhancement.\n. Just FYI - choco 0.9.10 supports this now without closing and reopening your shell - https://github.com/chocolatey/choco/issues/664\n. @acgetchell Can you tell me the output of calling refreshenv? Does it say \"Refreshing for cmd.exe\" or does it say for powershell.exe?  If it says the former, it means you do not have the PowerShell profile installed - which provides this and tab completion.\nSee https://chocolatey.org/docs/troubleshooting#why-does-choco-intab-not-work-for-me on how to remedy this so that when you call refreshenv, it is the PowerShell version that is being called and not refreshenv.bat. . Please see https://github.com/chocolatey/choco/issues/991 and https://github.com/chocolatey/choco/issues/894 to get a better understanding of why this isn't set by default on install.. I also filed https://github.com/chocolatey/choco/issues/1392. @acgetchell Looks like an artifact of already having that in the PATH when you ran it the second time. It doesn't show that environment variables like PATH were updated in the output and I don't see a call to refreshenv here.. okay\n. Any chance you get this to me in a branch (not master)? There are two other commits in here that are not related to this pull request.\nPlus it helps if you want to send multiple PRs at a time.\n. Sorry for the confusion. Branch on your end and make the changes there. A branch named something like the issue itself. Send the pull request TO master. ;)\n. This looks awesome. Thanks!\n. Awesome. :D\n. Taking a look right now...\n. Ran it with /l*v %cd%\\msi.log and found the issue.  \nMSI (s) (D0!FC) [12:12:38:922]: PROPERTY CHANGE: Adding HideFatalErrorForm property. Its value is 'TRUE'.\nThis setup requires the .NET Framework version 2.0.50727.  Please install the .NET Framework and run this setup again.  The .NET Framework can be obtained from the web.  Would you like to do this now?\nCustomAction VSDCA_VsdLaunchConditions returned actual error code 1603 (note this may not be 100% accurate if translation happened inside sandbox)\nAction ended 12:12:38: VSDCA_VsdLaunchConditions. Return value 3.\nAction ended 12:12:38: INSTALL. Return value 3.\nI'm thinking Win8 doesn't come with .NET framework 2.0. I believe you can install that right from chocolatey using webpi as a source, but you will need to list out the available packages so you can install it.\nOne thing we might think about doing is adding a .net framework 2.0 package so other packages can depend on it. It would work much the same way as .net 4.5, where it only goes to install if it doesn't find the installed registry key it is looking for.\n. Closing as not a chocolatey issue.\n. Thanks, definitely something that can be added.\nThe option of adding executable containing folders to the path would add quite a bit of noise to your path depending on how many tools you install.\n. Shimgen has fixed this. \n. Now this is awesome! With tests, that's a plus 1000. :D\n. I think all should do that. It aligns well with other package managers. Just haven't yet gotten to that one.\n. Commenting on the chocolatey google group -\nhttps://groups.google.com/forum/?fromgroups=#!topic/chocolatey/heV-XGc2ACw\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\nOn Thu, Sep 13, 2012 at 10:54 AM, Matt Wrock notifications@github.comwrote:\n\nTook a look at adding uninstall. While it looks pretty trivial for this\nfeed. It seems like the current codebase is in need of a more pluggable\npattern. Right now, each feed have dedicated scripts for install, webpi and\nwinfeatures have inline conditionals for lists and uninstall only supports\nnuget.\nI'd propose that each feed have their own dedicated script(s) for all\nfunctions and the Chocolatey-XXX function becomes a factory or just\nprovides obviously common logic. There are a number of patterns that can be\nimplemented. One suggestion:\n- A provider, say webpi, has a entry script WePi-Provider.ps1\n- Chocolatey exposes functions like Install-Strategy ([scriptblock]\n  $InstallScript){ $InstallerRegistry[$source] = $installScript}\n- $chocolatey exposes a $ChocolateyArgs that the plugin script can\n  access ala $ChocolateyArgs.PackageName\n- Chocolatey dot sources all the plugins when the module loads\n- Chocolatey invokes the appropriate script when user invokes\n  Chocolatey-XXX.\nThis is very rough and hardly baked but you get the idea. I'll post this\non the forum and push this feed as is. Then we can create issues for\nplugins if we think this makes sense and also add another issue for\nsupporting multiple packages.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/150#issuecomment-8533080.\n. Thanks! This is probably better to do in general than looking at a file. \n. This is in... thanks!\n. It's the capital \"I\". I thought I had fixed all of those.\n. First fix in 556024f1482370bb3b056276ae08689b3ddcc064\n. Are you still finding issues?\n. I symlink or just run the tests as part of the build. You will need pester installed.\n. Command is a bit harder, but for powershell you suggested the following: \n\npowershell\nEnv:PATH = (@(,[Environment]::GetEnvironmentVariable('PATH', 'Machine') -s\nplit ';') + @([Environment]::GetEnvironmentVariable('PATH', 'User') -split ';') | Select -Unique) -join ';'\n. https://github.com/chocolatey/chocolatey/issues/134\n. It's in issue #134\n. How do you do a full environment refresh? I would love for that to happen with both powershell and command...\n. Install-ChocolateyPath actually pushes the new path...perhaps we can emulate that a bit.\n. But it won't carry all the way back to the command line. That's what I'm hoping that crazy poshcode will do.\n. Boo...\n. Need both powershell and cmd shell versions... \n@mwrock we'd need to iterate over all of them.\n. Command line - (it's ugly) - http://stackoverflow.com/questions/171588/is-there-a-command-to-refresh-environment-variables-from-the-command-prompt-in-w\n. HA! We found the same article!\n. I'm down for it if it works. :D\n. It just show up too many times per package (the errors are displayed more than once sometimes). \n. Same goes for success logging.\nAs far as the holding area, yeah, I think we install the packages to a holding area - when they are successful we copy them up (prior to running the exe locator).\n. You can add to the wiki page... please mention the binroot for packages - we have the concept of having some packages install to another directory if someone defines an environment variable.\n. And it should be mentioned that if you want to override the default installation, just add to the installation arguments the correct switch and location for the particular native installer - jhttps://github.com/chocolatey/chocolatey/wiki/CommandsInstall \nThe important part is that you need to be intimate enough with the package to know this...\n. Lots of questions in here. \nI would point to the FAQ question from the create packages page - and maybe put a little blurb that highlights the difference. It is definitely an asked question, and frequently. :)\nThere is a push for an Install-ChocolateyTool function - in that function it would look up the binRoot (or whatever we call it once it is in chocolatey).\nConsole2 is a tool (no native installer). But there are other ways to get tools - which download the archived version (.zip, .7z, .tar) and then unpack it to somewhere. Lots of these just unpack it into the package folder itself, which allows the executables to be found by chocolatey and put on the path.\nAs far as MSIs and native installers - the person who wrote these had in mind a location for the application to install to (in program files). This IMHO should stay the default. I know the argument can be made that there are some packages that don't, but this is due to the littering of the systemdrive with installs. Usually MSIs are easier to work with since 99% of the time they have the same installation switches, one of which is the install location.\nThe general idea behind chocolatey is to move to less and less work being required in the chocolateyInstall.ps1. We want to address patterns and make that easier so that one can just call one line functions. You can see there are a lot of packages that already go that route (if they are just pulling in an application). \n. One thing we will likely do in the future is allow folks to pass in the installer type (NSIS, InstallShield, etc). Then we can make assumptions on some of the switches. This is closer to what I saw chef was starting to do in their default provider for windows. I also saw it in another package manager that is now defunct.\n. Is this seriously a behavior in Powershell? That it messes up the PATH user env var if it doesn't exist?! You think it would treat it fine... \nThanks for reporting, guess we are going to need to look into it a little more.\n. Fixed by https://github.com/chocolatey/choco/issues/699\n. Implemented in choco.exe as choco new.\n. Ha - the don't pull yet is still in the one that is outstanding. :D\n. I'm one of those archaic users that spends more time on the straight command line shell. :( \n. you can just call dir in powershell (although it's an alias of something else now).\n. Maybe that brings up the idea of opening something native to powershell with chocolatey - and installing it to their profile (much like poshgit/hg/whathaveyou do).  It still looks like the native command but it doesn't fall down to the command shell. \nAs in Set-Alias cinst Chocolatey-Install (and for all the rest). :D\n. Agreed on what Matt said. And if they haven't, they will find chocolatey fairly useless in powershell as well. :D\n. The real trick is finding the modules since someone can install it to other folders. We could also provide a module that is dot-sourced with all of the commands we want seen.\n. I'd prefer not documenting the conventions on the methods, even though those could be used as well.\ncinst (so it's one for both interfaces) references Install-ChocolateyPackage (or something similar if we have a naming conflict).\ncup - Update-ChocolateyPackage\ncver - List-ChocolateyVersion (or something like this)\ncuninst - Uninstall-ChocolateyPackage \n. LOL - Export-ModuleMember is exactly what chocolatey already does for the utility functions it allows the chocolateyInstall.ps1 to use. \nhttps://github.com/chocolatey/chocolatey/blob/master/src/helpers/chocolateyInstaller.psm1#L12\n. @mwrock Did those separate issues get created? \n. This already exists today? installargs - https://github.com/chocolatey/chocolatey/wiki/CommandsInstall\nIs this not the same?\n. Yes. This gives someone direct access to the native installer so they can pass their own arguments and even override the args going to it.  It's really a power user feature b/c it puts you right against the metal.\n. So you could be talking about something slightly different...\n. We've already talked about the -platform x86 switch - I think there is an enhancement listed for that (and if not, let's make sure it gets listed). :D\n. -platform is for the utility function which the package dev has no access to. So the key is completely transparent to them.\n. We need to get this in for the next version. Granted it will be rudimentary, but it is necessary for a recent package issue where the vendor wanted you to pass something or fail the package.\n. How about choco something -params \"@{bob=1;bill=2}\"\n. This is very naive as mentioned in the commit (no spaces and must be specified in EXACTLY the format shown). If you want to start playing with it though, it's in the just sent out prerelease.\ncinst chocolatey -version 0.9.8.22-alpha1\n. $env:chocolateyPackageParameters in the package....\n. [hashtable]$var=$env:teshhashenv\nThen call $var?\nOn Sunday, November 10, 2013, allensanborn wrote:\n\nIt doesn't look like that will work.\nThe hashtable is getting cast to a string. So when you try to get it back\nout you just get System.Collections.Hashtable.\nWhat are the limitations on using the $packageParameters variable in our\ninstall script? In my test package I'm getting the hashtable and the\nparameters that I sent in via cinst.\nPS C:\\Users\\allen\\Documents\\GitHub\\Chocolatey-Packages> $testhash=@{name=\"value\";name2=\"value2\"}\nPS C:\\Users\\allen\\Documents\\GitHub\\Chocolatey-Packages> $env:testhashenv = $testhash\nPS C:\\Users\\allen\\Documents\\GitHub\\Chocolatey-Packages> $testhash\nName                           Value\n\nname                           value\nname2                          value2\nPS C:\\Users\\allen\\Documents\\GitHub\\Chocolatey-Packages> $env:testhashenv\nSystem.Collections.Hashtable\nPS C:\\Users\\allen\\Documents\\GitHub\\Chocolatey-Packages>\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/159#issuecomment-28156258\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Well that is easy enough to fix... ;)\n. Here we go choco something -params 'value1=bob;value2=''with spaces''' - the two single quotes value2=''with spaces'' will be converted to value2=\"with spaces\"\n. @rismoney @Iristyle Interesting idea proposed by you guys - the chocolateyInstall.ps1 becomes chocolateyRun.ps1 and in it it contains functions that chocolatey will call \npowershell\nfunction ShouldInstall {}\nfunction InstallSteps {}\nfunction ConfigureSteps {} #optional, in case folks want things installed but not configured.\nfunction UninstallSteps {}\n. I guess the comment here is if I install the package for a pre-existing installation and it doesn't run the install steps, Can I still uninstall the application with chocolatey?\n. See, this is where I disagree. To me this is a nice way of making chocolatey aware of existing apps and taking over the updating of those items.\nBut I can see the argument for both ways.  The question is, even with a switch to get both behaviors, what is the default?\nBy default now it uninstalls (in the case where ruby 1.87 comes in and you already have 1.87 installed).\n. Second question - \n I have ruby installed but an older version. How far back should the ruby package be looking as acceptable?\nIf you have 1.8.7.123 (not sure on the last part of the version, this is an example) and the installer pulls down 1.8.7.124, should it go ahead and upgrade the older version?  Now contrast that with 1.8.7 and 1.9.3? \nThere are situations we will run into where an app requires a specific version of a dependency. Consider how that should work as you consider the answer for this. I might have ruby 1.8.7 installed, but the app requires 1.9.3 to be installed. What should happen in this case? \n. Of course, if I have 1.8.7.123 installed and the package that comes down is 1.8.7.123, this is where I want this behavior to not install. \nI have to throw out how idempotent is the process right now? Most apps don't f things up when you run the installer multiple times.\n. You said it here and I said it on the issue itself. Ha. :D\nhttps://github.com/chocolatey/chocolatey/issues/165#issuecomment-8741741\n. The neat thing here is that what it does now without all of this extra work DOES bring an existing install inline with chocolatey. \n. It's a matter of perception, but I would want chocolatey to take over something I have existing if I issued the request for it to install it.  I mean, after all, don't you think I already know I have git installed when I ask it to install git?\n. DEBUG: Running 'Get-ConfigValue' with\nconfigValue:'useNuGetForSources'\nDEBUG: Running 'Get-UserConfigValue' with\nconfigValue:'useNuGetForSources'\nDEBUG: After checking the user config the value of\n'useNuGetForSources' is 'false'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'sources'\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'sources'\nDEBUG: System.Xml.XmlDocument\nDEBUG: chocolatey.sources\nDEBUG: Using '-Source \"\" ' as the source arguments\nDEBUG: Calling NuGet.exe install cygwin -Outputdirectory\n\"C:\\Chocolatey\\lib\" -Source \"\"\n. Okay, so this is my fault. Thought I was correcting something back so that it would work with powershell3...\n. Fixed in 784e45fb3b94e71a2d11b43c6c67c791e2396804\n. This is tagged for the next release... :)\n. Since we have http://chocolatey.org/installabsolutelatest.ps1, is this still important?\n. :D\n. Even better - except in cases where they don't set up the proxy stuff. But we can always do that after the fact. I don't want to give the illusion that we are not going to handle some of that in the back end.\n. I have to say I like @ewilde 's approach. It's closer to what I was initially thinking. I could go both ways though, it just depends on how much work we want to do with each new set of options.\nIt's kind of like the argument between primitive parameters versus object parameters. Except in this case both are objects, just one isn't the actual object used.\nSomeone could still not use our utility functions if they need more control over that and I think that is a fair trade.\nThoughts?\n. This was fixed for choco v0.9.10 - see https://github.com/chocolatey/choco/issues/332\n. With anything like this, we would have a need to support the existing infrastructure while we phase it out, so it would be something that package makers can move to over time.\nI know I'm preaching to the choir here but I just wanted to make sure that was understood before any work started.\n. Seems reasonable. If it is local it should just forward it to cver\n. -source local\nTHoughts?\n. The trick here is the searching filter...so maybe not the same code. Or is it?\n. Closing this as a duplicate of a newer issue.. .I know.. #276 \n. I'm not sure I like the name of it yet. It really doesn't tell me what it is doing.\n. How does it work with bindir? \n. So I install a tool package - that tool uses bin dir so it installs to something like c:/tools/packagename where it auto adds a that directory to the path. How do I trace that back to the package itself as it wouldn't be as easy to find?\n. I'm not against this, I just want to really understand it better.\n. Ok, right on. I now understand the benefit of this. On board with the idea.\nOn Friday, April 19, 2013, Rich Siegel wrote:\n\nok - its not perfect implementation (what is?). but here is the usage-\nI have a file on my system. I am not sure if it was from a chocolatey\npackage install, malware, a download, whatever. I install everything from\nzip or msi currently. So I see a file that looks suspect. I want to see if\nit came from inside a package. Since zips (currently) and msi's will be\nable to log all the files they encompass, we can use that get-content and\nseach the txt file to determine if a file is rogue (not sourced from a\nchocolatey package) or we deployed it. Its not a dead on thing, but it\ncould be a nice feature.\nIdeally I would want have lists from all the operating systems files and\nthen be able to identify every binary file on a host. It can become really\nhelpful with system32, ruby versions, etc.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/169#issuecomment-16656232\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Move the idea to choco, not necessarily the PR.\n. Service and web (iis first, apache later) should also become helpers.\n. Had those in mind for awhile.\n. There are a couple of these in here.\n. Thanks - still discussing this in the other issue. :D\n. I don't want them updated. When I roll these in, I branch to a new section, then I back that branch to the parent commit of this. Then I pull the changes. Then I rebase against all of the current. And if all goes well (usually does), I just merge back to master.\nIt keeps the commit history a nice straight line. Don't think of commit history so linearly ;)\n. For me, if someone is willing to keep their PR up to date, I'm okay with\nthat (if they do it without creating multiple lines of history).\nBut when it takes awhile for a project team to evaluate PRs, it should not\nbe on the person who took the time to create the patch in the first place.\nIt should be the responsibility of the project team. I've submitted PRs\nbefore where this happened a few times. I felt is was kind of against\netiquette of the project team to have an expectation for me to keep up with\nthem when they were taking their time to evaluating my request.\nI don't want to create this same feeling on chocolatey as it doesn't really\ncreate a feeling of community. If we wait awhile before evaluating\nrequests, that is on us and we should be feeling a little pain (if there is\nsome) rather than the person who is taking time to contribute to our\nproject.\nDoes that make sense?\nOn Friday, April 19, 2013, Rich Siegel wrote:\n\nyour the boss ;) how do you back that branch to the parent commit and then\npull the changes. I was just trying to assist as I know there are a ton of\nPRs and don't want to stifle progress for project newcomers who think they\nwon't get merged. However I can help, let me know.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/171#issuecomment-16656891\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. As far as backing, you can find the parent commit a few ways... I just pull\nthe changes into a branch and look over history to find it. Then back the\nbranch up to that and pull the changes again.\nOn Friday, April 19, 2013, Rich Siegel wrote:\n\nyour the boss ;) how do you back that branch to the parent commit and then\npull the changes. I was just trying to assist as I know there are a ton of\nPRs and don't want to stifle progress for project newcomers who think they\nwon't get merged. However I can help, let me know.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/171#issuecomment-16656891\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Need to start looking at this one for the release after this one.\n. Yeah, I was slowly going through and tagging things we want to move. This particular thing is planned as we rewrite the helpers into compiled powershell cmd-lets.\n. This was fixed in choco for 0.9.10 https://github.com/chocolatey/choco/issues/332\n. Before anyone goes down this path, we need to discuss some changes going into chocolatey.org.\nI always expect the project site to be the actual project, not a github repo for someone. It should never point back.\nSpecifically we are putting together a profile page for package owners where they can list contact information and a few sites including the repository where they keep their packages.\n- https://github.com/chocolatey/chocolatey.org/issues/10\n- https://github.com/chocolatey/chocolatey.org/issues/11\nThere are some other neat things that will be put in (like marking a pkg as outdated, or broken) - https://github.com/chocolatey/chocolatey.org/issues/12 \n. @rismoney Not sure what you are trying to say here...\n. I say we close with enhancing chocolatey.org for now.\n. You know discussions are great in the google group. ;)\n. Gaaah, NuGet schema validation decides it is an error and there is no way to tell it otherwise... at least not yet.\nThe element 'metadata' in namespace 'http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd' has invalid child element 'packageRepositoryUrl' in namespace 'http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd'. List of possible elements expected: 'frameworkAssemblies, copyright, iconUrl, developmentDependency, dependencies, references, language, requireLicenseAcceptance, licenseUrl' in namespace 'http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd'.\nI'm thinking I'm going to need  special build of nuget.core to avoid this behavior.\n. For references see\n- https://nuget.codeplex.com/discussions/240844\n- https://nuget.codeplex.com/discussions/238253\n- https://twitter.com/ferventcoder/status/523894747031949312\n. I started down this path on https://github.com/chocolatey/chocolatey.org/issues/101 - but got held up in that nuget throws the error above if you add anything it doesn't recognize to the schema.\n. Also #352 is sort of a dupe\n. I've moved this issue to https://github.com/chocolatey/choco/issues/205\n. Looks good. Merge it in. Remember to keep my line straight. ;)\n. Interesting. So you are saying if it is called we go ahead and write the filename.ignore on it? That would be cool.\n. Shouldn't be too hard. Slap a tiny ignore file next to it no matter where it is. No one is going to complain if it is up in the temp dir. :D\n. Done 6a4961692162496f00d36381542e7bc5c0aae824\n. To be clear, this is for apps that when pulled don't require further compilation. So in effect these are still \"binary\" packages...\n. Is this still relevant?\n. This may already be done for 0.9.8.20.\n. It's right here: https://github.com/chocolatey/chocolatey/blob/master/src/helpers/functions/Get-WebFile.ps1#L21 \n. I'm closing this as ready for the next release. Unless you have questions or comments?\n. We are also looking at bumping up the buffer. Try this bump that number to 1048576  \npowershell\n[byte[]]$buffer = new-object byte[] 1048576\n. This is in. I had to bump it down to 100 iterations with the larger buffer pipe. Please let me know if that is too low and still grabs too much memory\n. I think these would be helpful in chocolatey as well. We are always moving forward to pulling as much logic into utility functions and out of packages so that packages can stay small and readable. And the other side effect is that we can fix/update logic without having to edit a bunch of packages. \n. This prolly makes the intent clearer, but the code was never broken. Just FYI. We're gonna need to work on those merge commits...\n. The parameters are read in the helper functions, so it's completely transparent to the package unless pkg maintainer wanted to know about them and use them.\n. Bad or good - the arguments passed into chocolatey are global (powershell script thing). Like I said, this makes it more direct and less transparent to the methods where this comes from.\n. This is completed 41c87c064d3c73c933dba9a4a5ee72a435a3ab2d\n. Great question...going to need to look at history for that one. The functionality here is to return a string that is up to 8 chars long padded w/zeroes on the front. I think this pull request may have broken that functionality\n. Actually the thought here it to completely rip this out with something better at some point. This was a stop gap solution.\n.  This is very interesting territory.  However this may be better suited to be tackled after v1.\n. I'm a little scared of editing the registry uninstaller values. That could get us into some dangerous territory. However it does pose a very interesting scenario.\n. Maybe I'm biased, but a package owner (not author of tool/app) is not who I would want to have this either. If anything, this would be something that we might eventually bake into chocolatey and expose through a function to package owners.\n. Thanks, will likely be pulling this in over the weekend.\n. This is completed - bd03ec769c550d534dedef803781b0a066fca082\n. Will be looking this over and merging soon, likely this weekend.\n. I just realized what you are doing here. calling nuget list without a filter will only return so many results. 635 is what it looks like it returned. nuget.org, one of the two default sources for chocolatey, has over 9200 packages. Chocolatey has about 550 at the moment. If this only pulls back around 500 results from each source, you can see how this becomes inaccurate really quickly. \nI should be able to take the 1 second of sleep time out of this.\n. Agreed on refactoring - need to get in a PR that might fix this prior to a refactor though.\n. Is this still relevant?\n. Not disagreeing with any of these points. All polish and eventually where chocolatey will be.\nI was thinking choco would be a good entry point - easy and short. You might have mentioned it in your stuff here.\n. The problem with this issue/enhancement is that it is not one issue enhancement but several.\n. A great forum for this would be like the google group - then we can list them out and point to the topic\n. Agreed on the wiki - I would love to have a http://chocolatey.github.com \n. I accept pull requests on the chocolatey.github.com repo. I won't be able to get to this myself for a few weeks.\n. This is called choco.\n. I know there a LOT of issues to look through, but this should already be in the issues log as an enhancement. We don't fully support uninstall until 0.9.9. That's when it will have helper utility functions.  If you look around a bit, for MSIs we are goung to store the guid. Then when you uninstall we'll just /x guid /quiet. Nothing else necessary. \n. Dumb question on Air installations, shouldn't there be an AIR package?\n. @bswerdlen Howdy, note one of the labels here says \"MoveToChoco\" - that means this issue either has been or still needs migrated over to the current codebase at https://github.com/chocolatey/choco.\nAlso, I'm guessing this wasn't helpful for you - https://chocolatey.org/docs/helpers-uninstall-chocolatey-package\nWhen you run choco new pkgid from a recent version of Chocolatey, it will create a chocolateyUninstall.ps1 that is already pre-filled out with everything you need, saving you countless amount of time (and possible issues). Plus all of the just in time documentation that you get from that will definitely help answer questions like this ahead of time.\nWhile MSU is definitely showing up in Install-ChocolateyInstallPackage - https://github.com/chocolatey/choco/blob/946367a6c263cc2d1b3beec5e6b771404d5f0436/src/chocolatey.resources/helpers/functions/Install-ChocolateyInstallPackage.ps1#L257-L265, it doesn't appear the same exists in the Uninstall-ChocolateyPackage  - The documentation that is produced (linked above) states the same. You can see the source code that generates that documentation at https://github.com/chocolatey/choco/blob/946367a6c263cc2d1b3beec5e6b771404d5f0436/src/chocolatey.resources/helpers/functions/Uninstall-ChocolateyPackage.ps1#L52-L56\nHTH . Try just  \\server\\share\\etc\n. Ftp is already in for next release.\nTo change the vocabulary a little, it's not a workaround, it's how it works\nnow. We don't have support for urls written in that manner. If we want\nfile:// that would be an enhancement. same with git://\nThanks.\nOn Oct 26, 2012 12:49 PM, \"Alastair Smith\" notifications@github.com wrote:\n\nThat workaround works, thanks. I think the script should support proper\nfile:// URLs, though. What about ftp:// or git:// URLs?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/188#issuecomment-9821266.\n. Thanks, please open this issue on chocolateyautomaticpackages though. It's not chocolatey's fault. ;)\n. I think we are on different pages, although I like what you are talking about here.\n. http://chocolatey.org/packages/binroot\n. There are other items that may have duplicated this. This is done.\n. @Redsandro Hey thanks for the kudos!\nI'm going to clarify the wording for chocolatey - Chocolatey is _like_ apt-get. This doesn't mean that is has every feature or that it is an exact replica of apt-get.   \n\nThis also doesn't mean that features like this cannot be added. We've discussed this a couple of times in the mailing list, however upon searching it doesn't appear that it was ever made into an Enhancement. We are definitely adding this feature.  \nIssue 2 - Stopping on Error\nThe second note, that chocolatey stops on error is not a behavior we want in v1. Please file it as a separate issue.\n. Also, it's important to note that apt-get is very stable in it's feature set. It's been around for awhile and is a mature product.\nChocolatey on the other hand is not even to v1 yet. It's immature and not stable in it's feature set yet. Something to keep in mind. :D\n. Actually I would have to verify, but I believe npackd is older. Chocolately has been around for about a year and a half.\nI don't mind nitpicky at all! It's a way we get better. I honestly don't use packages.config that much. I prefer  \ncinst all -source customsource or to put together a .ps1 file w/separate calls. Both of these mean I install multiple packages w/1 call, but there is setup time involved.  If you are in powershell you can create an array of package names and pipe them into the install command. Again, not optimal, but available.\nThat's why we definitely want the ability to pass in a list and to keep going if one fails.\n. This lifehacker article about npackd is older by a month than chocolatey: http://m.lifehacker.com/5754305/npackd-is-a-linux+like-package-manager-for-windows\nAnd to avoid confusion, the date of the article is a month before chocolatey development started.\n. Agreed that the xml batch stopping on error is annoying.\n. This is fixed in https://github.com/chocolatey/chocolatey/commit/6ca7ed1fe2d9f45fcfb3f84bbb2aa9811a544ff2\n. also in alpha2 prerelease... \n. or cup chocolatey -pre\n. This sounds reasonable at first glance, however, does it feel natural to say --beta when it installs an alpha or rc?\nAnd .... if there was a beta version and a more recent alpha, wouldn't you want it to install the beta and not the alpha based on the wording of the switch? \n. My brain is ...... well somewhat fried. :)\n. Thanks for moving this over from #191\n. It's all good. Wasn't sure if you were misspelling or not.\n. not sure what you mean... new batch functionality... \n. Also an issue we hope to resolve soon.\nOn Monday, November 4, 2013, Redsandro wrote:\n\nI concur, but I lack the knowledge and the knowhow to propose a fix. :)\nI'm\nbetter at making .bat wrappers. :P\nOn Nov 5, 2013 12:17 AM, \"TomOne\" >\nwrote:\n\nThis is actually a very important issue to solve. Stopping the entire\nprocess only because one package failed is very annoying and reduces UX.\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/chocolatey/chocolatey/issues/192#issuecomment-27732812>\n.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/192#issuecomment-27736522\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Is this fixed in vCurrent?\n. @rismoney oldie but a goodie. Now we have a ticket for ensuring full stop if there is a failure in the chain - https://github.com/chocolatey/choco/issues/1151. Right now it is up to the package maintainer. The functionality is there, but it's in the packages. It might make sense to have choco note some of these so pkg maintainers do not need to.\n. well, 3010. :)\nFor now anyway, that is the expectation. It does make sense that chocolatey should do a better job of noting the common ones though.\n. Chocolatey's exit code is different than what it is seeing from the application install, so a 0 is what you would already get from chocolatey (0.9.8.21 we are ensuring that) when it exits with no errors.\n. I'm curious what you would use for the reboot needed flag. :)\n. Interesting. I think @mwrock is handling this idea as well with boxstarter. I'm curious how he knows it's time to reboot.\n. The BIG Hammer. Like it! \n. Assigning this to you Matt @mwrock ;)\n. @gep13 Didn't we get this in as part of another PR?\n. @rismoney is this still an issue?\n. This is left up to the package itself to install the proper one for your architecture. If the package creator doesn't include a link for a 64 bit version, it is assumed that the 32 bit is the one to install.\nWhat we are working on is a flag to allow someone to force a 32 bit version if they need it.\n. That's one way of doing it but long term it would not be the optimal\nsolution. We have a feature coming that will let you pass --x86 and it\nwould use that version no matter what you are on\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\nOn Wed, Oct 2, 2013 at 1:36 PM, BSara notifications@github.com wrote:\n\nSo if we need to force install a 32 bit version on a 64 bit machine...we\nneed to request for a 32 bit package?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/197#issuecomment-25564700\n.\n. While I appreciate the ability for github markdown to help make the code very readable for this question, questions should really go to chocolatey@googlegroups.com. That way others can benefit from them. Please try to post future questions there, we'd like to try (emphasis on try) to reserve this area for bugs and features.\n\nTo ask a question in return, did you create the package (cpack) prior to running cinst? My apologies if this is not in tue tutorial. You should have a nupkg file in the folder you are running your cinst command from.\n. When you say latest, what version of chocolatey are you using? alpha or release?\nAdding documentation is always helpful and appreciated! \n. That would be the current release. When you open the package with nuget\npackage explorer (the .nupkg file), does it open correctly?\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\nOn Mon, Nov 19, 2012 at 10:42 AM, Redsandro notifications@github.comwrote:\n\nI cannot check that right now as I am on the wrong computer, but I used\nthe command that is on the website yesterday: @powershellhttps://github.com/powershellsomething.DownloadString('\nhttp://bit.ly/psChocInstall')) one. I am assuming it points to the\nrelease version.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/198#issuecomment-10520668.\n. I see what might be wrong. Your nupkg/nuspec might be named incorrectly. the nuspec itself should be named tomboy.nuspec.\nThe name of the package file (3.504 tomboy.1.10.2.nupkg) should not have a number or a space on the front of it.\n. Okay, dumb question. What shell are you using?\n. Your github repo?\n. tried it out on a VM. Getting the appropriate issue about not being able to find gtksharp.\n\nSo it's working on my machine...\n. Still would like to know what is going on on your end though.\n. Installs good for me.\n. What happens when you run cinst tomboy -source %cd% -debug ??\n. Double Double Quotes. FTW. The switch from batch to powershell leaves something to be desired in keeping quotes. \nso this will work: cinst tomboy -source \"\"%cd%\"\"\nMy bad, Didn't ask what your path was.\n. Normally with command line applications on Windows you would only need the single quote. It would be interesting to know what you get if you use a single quote (') instead.\n. Nice! Yeah, there is something in the conversion from batch to powershell that destroys all double quotes by themselves. It could be something I'm doing. It is annoying...I should really look into it.\n. Closing as not a bug... you will follow up with the wiki article updates?\n. Ah, I mean source code repository for your packages. Look at my profile on chocolatey.org and you will see  https://github.com/ferventcoder/nugetpackages and https://github.com/ferventcoder/chocolateyautomaticpackages\n. Looks good. Only note is the second source to the package should not contain a file, just a directory\n. No, we didn't delete it. I thought you updated the CreatePackages page only, I never remember seeing a link to another page\n. Agreed. That's an enhancement on the list. And that you could also -force -includedependencies to force the whole chain\n. Not sure if we had it listed or not.\n. thanks\n. @MikeH2012 unfortunately that library requires POSH v3+ so it's no dice\n. I will take the ball on that.\n. Sent the message, just waiting to hear back.\n. Doesn't look like this is going to be a feature that will be freely available. :(\n. This will move to a professional version of chocolatey.\n. This is going to be implemented in the pro version since it is not a free thing.\n. Thanks\n. https://github.com/chocolatey/choco/issues/145\n. cver chocolatey-alpha3 -lo would be incorrect. alpha and 3 are prerelease version information, not part of the packagename. \nThere may be some wonkiness related to getting packages that are prereleases, but we have a good way to get to packages that are named pkg1.2.3 (where 2.3 is the version) versus pkg.1.2.3 (where 1.2.3 is the version). I'm confused a little because we are already doing this correctly. Console2 comes to mind.\n. Back to your original issue, I'm a little confused about what you mean about cinst without a version parameter. That should work now.\n. Thinking of other features on the plate, how then will we get to cinst pkg1\npkg2 pkg3 pkgN ??\nOn Tuesday, December 4, 2012, Matt Wrock wrote:\n\nAgreed. and source too.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/206#issuecomment-10999358.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. https://github.com/chocolatey/chocolatey/commit/6ca7ed1fe2d9f45fcfb3f84bbb2aa9811a544ff2\nCommand and PackageName are the only positionals. Everything else will need to be supplied as a named parameter. It's the only way to support multiple package installs.\n. That's funny right there. :)\nOn Tuesday, December 4, 2012, Matt Wrock wrote:\n\nSorry. I think I misunderstood. I was thinking build failures. I am overly\nobsessed with tests and builds today.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/207#issuecomment-11025365.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. almost good. Don't delete my remove last install log function yet though\n. No new code into release. It's locked now. This will have to bump to .21\n. :D \n. And this is in..\n. It usually gets worse on resolving conflicts if the history line is messed\nup in any way. It's already a fun enough experience when a rebase has\nconflicts...\nOn Friday, April 19, 2013, Rich Siegel wrote:\n\nwow this a royal pita to resolve conflicts! Will retest tomorrow, and we\ngotta get this in.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/210#issuecomment-16636826\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Depends on your diff/merge tool as well.\nOn Friday, April 19, 2013, Rich Siegel wrote:\n\nthe history line was fine. it just gets confusing as to what to keep and\nwhat to shed, especially if you havent look at a branch in months, and the\nconflicts occur on the same lines or moved around.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/210#issuecomment-16637003\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Beyond compare 3 pro. Highly recommended and well worth $50. I use it\nconstantly every day.\nOn Friday, April 19, 2013, Rich Siegel wrote:\n\nwhat are you using?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/210#issuecomment-16654308\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Other than that, I'm digging this PR.\n. Yes, one thing we'll stop doing is accepting pull requests without automated tests. Probably soon.\n. Agreed with all Matt said here. :)\n. This is in - a8ea10d4c422faffbb4c8010c36a199d055dc459\n. Packages.config\n. You don't believe this is the vagrant package itself?\n. Thanks for reporting. I'm guessing this just hasn't been done yet.\n. chocolatey install XXX -source 'local source'\nSingle tick marks or double double quotes surrounding. Do those help?\nAnd run it with -debug and post that here please.\n. -debug and post results pls\n. Same version of vagrant (0.8.0) that exists now?\nThis brings up some thoughts/questions.\n1. Your fixed nuspec should have an updated version.\n2. The nupkg you produce locally should reflect that version (i.e. vagrant.0.8.1.nupkg).\n3. Otherwise the vagrant you have in your local nuget cache (from a prior install) will override the source do to the versions being the same.\n. Please Look in the directory and tell me what the name of the file is with the extension \"nupkg\". \n. What Rich said. The source should be a directory. :D\n. GUI apps have a helper. appname.exe.gui (empty file that matches in case sitting directly next to where the file is or will be).\n. SymLink/Shortcut/exe in choco/bin folder - we've talked about this in the past. The biggest problem here is that it is not a universal thing due to windows, otherwise we would symlink everything in.\nWhat may be better is to determine a convention where we can symlink the executable into bin.\n. Spaces in Exe Names - Are there really executables with spaces in them or are you providing an example? I've never seen one, that's why I'm asking.\n. I'd prefer if we break these up and list on the front of each of these as [Enhancement] since they are enhancement requests.\n. Yes, the tl;dr page for creating packages. ;)\nOn Monday, December 17, 2012, Redsandro wrote:\n\nPS is there a page on the wiki that explains what this .exe.gui is and\ndoes?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/215#issuecomment-11469277.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. We might have a command already for the start menu item.\n. Much thanks\nOn Tuesday, December 18, 2012, Redsandro wrote:\n\nRedirected issues:\n216 https://github.com/chocolatey/chocolatey/issues/216 ->\n[Enhancement] Copy/move .exe tools to \\bin\\ folder in stead of creating a\n.bat file.\n217 https://github.com/chocolatey/chocolatey/issues/217 ->\n[Enhancement] Use custom \\bin\\ folder\n218 https://github.com/chocolatey/chocolatey/issues/218 ->\n[Enhancement] Create link to GUI tool in Start Menu\n219 https://github.com/chocolatey/chocolatey/issues/219 ->\n[Enhancement] Ignore spaces when creating a 'fake' link (.bat file)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/215#issuecomment-11490041.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Perhaps you missed my comment somewhere that symlinking is not comprehensive enough to handle all the scenarios the .bat handles.\n. Found it - https://groups.google.com/forum/m/?fromgroups#!topic/chocolatey/hP5h0-g-rAM\n. I think this should be an opt in kind of thing - we'd have to know what needs to be copied in besides the actual exe (like dlls/configs/inis) etc. This is where things start to get messy. One exe has a dll it depends on, another has the same dll, but a different version that it depends on. \n. What's the difference between .bat and .cmd anyways? http://stackoverflow.com/questions/148968/windows-batch-files-bat-vs-cmd\n. Opt-in by the package maintainer is what I meant. A way of indicating this file should be linked or copied somehow. \nOne thing to note, if ffmpeg comes to my machine without requiring admin privileges, it shouldn't require an admin privilege for me to get to use the tool (aka mklink is out of the question then). \n. I know I'm throwing things at you that seem to come out of nowhere, but they are all reasons we went for bat files in the first place.\n. Interesting thing here - if your package requires a particular version of chocolatey, you can specify the version requirements in the nuspec\n. That way if you have a minimum required version for chocolatey, you just specify that in the nuspec. When they go to install your package, it will update chocolatey automatically.\n. Yeah, symlinks are pretty limited in windows. It's kind of sad really.\n. xml\n<package>\n  <metadata>\n    <dependencies>\n      <dependency id=\"Chocolatey\" version=\"0.9.8.20\" />\n    </dependencies>\n  </metadata>\n</package>\nThe version is based on the lowest compatible version - http://docs.nuget.org/docs/reference/versioning \n. RE: Unified approach -  \n\"Shouldn't everything be opt-in?\" - I disagree on this because it breaks the convention there now. The convention exists so that folks can do a minimal amount of work and rock out a chocolatey package. If they have a project they want to share with the world, they can just drop the exe in a package and boom. It works. :D\n.exe.startMenu - I like this idea\n.exe.moveToBin - or perhaps exe.copy\n.exe.linkBat - this is the default convention, so it's unnecessary to have\n.exe.linkGui - this is already here as exe.gui\n. The script is here: https://github.com/chocolatey/chocolatey/blob/master/src/functions/Get-ChocolateyBins.ps1#L19\n. This is not something we are looking at doing currently. Does the ShimGen answer this need?\n. It also mentions where the ruby package installs if it has not been set.\n. As far as a default value, I agree - https://github.com/chocolatey/chocolatey/issues/190\n. And the addition of Install-ChocolateyTool (with some parameters) that does all of this magical work for you. :D\nJust added for tracking - https://github.com/chocolatey/chocolatey/issues/221\n. We do try to keep the documentation updated with the things that exist or are in the code base but have not yet been released.\n. @Redsandro Rich is talking about the '1.0.2' in rismoney-v1.0.2_setup.exe\n. Well usually once shared, u don't want to make any changes like that.\n. Right. Long day... ;)\nOn Thursday, December 20, 2012, Rich Siegel wrote:\n\nAs long as he pushes to his origin its fine. Its only a nono on chocolatey\nchocolatey master\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/223#issuecomment-11600489.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. It's all good. With all pull requests, you want them to come from branches. Makes it easier to submit multiple pull requests and to continue to work on other changes without affecting your PRs (pull requests)\n. I think you'll find that when you are using a fork of an active repo, you want your master to be pristine (aka look like the master in the active repo). \nYou do all of your work in branches. Those become pull requests.\nWhen we evaluate a PR, we look at testing and how big the impact of the change is. The bigger the impact, the longer it takes to pull in. \nWhen we've decided to pull one in, we like the history line to be as straight up and down as possible. That means we rewind a branch we create for your PR to the last commit from master that your branch used and then pull it in. Then we rebase that commit against all of the stuff that has happened since then (what that means is that your commit goes to the very front of the commits, even if it was two months ago). After that is done we merge it to master and push it up. You are the author, one of us is the committer (because we are moving the commit).\n. We actively work with PR authors the best we can (since this is OSS and we all have full time work) to get PRs in a state of good to go, unless the PR is a completely different direction from where I believe chocolatey should go. \nWe don't reject PRs just because we are getting ready for a release. We just let them sit a little longer until the release is done before evaluating them and pulling them in or not. \n. Interesting. Why not make get-webfile work with these additions?\n. Interesting...we have made choco silent by default. This seems to go\nagainst that idea. Should this not be a pkg then?\nOn Friday, April 19, 2013, Drew Burlingame wrote:\n\nI agree. It would be better to alert the user and let them decide whether\nto continue or not.\nOn Fri, Apr 19, 2013 at 7:17 AM, Rich Siegel >wrote:\n\nI do like the ignore cert switch in theory, but not in practice. A\npackage\nauthor should not be sending consumers of the package to https sites\nthat\ndon't have valid certificates. I believe that is a call the _end\nuser_should make, and question the authenticity of the underlying url.\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/chocolatey/chocolatey/pull/224#issuecomment-16655336>\n.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/224#issuecomment-16664701\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Its actually pretty simple, I have this in the environment setup bits, it\nwould only need to be adapted slightly so we could have it make calls to\nthe user.\nOn Saturday, April 20, 2013, Drew Burlingame wrote:\n\ngood point. a flag would help, but not if the pkg was a dependency of\nanother. i'd hate to see a user not be able to use a package when they\ncould specify if they were ok with http vs https. it could be that if\nchoco was going to fail, prompt instead, but only wait for 10 seconds for\na\nresponse? that could serve the purpose, but seems complicated.\nOn Fri, Apr 19, 2013 at 8:38 PM, Rob Reynolds >wrote:\n\nInteresting...we have made choco silent by default. This seems to go\nagainst that idea. Should this not be a pkg then?\nOn Friday, April 19, 2013, Drew Burlingame wrote:\n\nI agree. It would be better to alert the user and let them decide\nwhether\nto continue or not.\nOn Fri, Apr 19, 2013 at 7:17 AM, Rich Siegel <javascript:_e({},\n\n'cvml', 'notifications@github.com ');>>wrote:\n\n\nI do like the ignore cert switch in theory, but not in practice. A\npackage\nauthor should not be sending consumers of the package to https sites\nthat\ndon't have valid certificates. I believe that is a call the _end\nuser_should make, and question the authenticity of the underlying url.\n\u2014\nReply to this email directly or view it on GitHub<\n\nhttps://github.com/chocolatey/chocolatey/pull/224#issuecomment-16655336>\n\n.\n\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/chocolatey/chocolatey/pull/224#issuecomment-16664701>\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/chocolatey/chocolatey/pull/224#issuecomment-16698126>\n.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/224#issuecomment-16699150\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Fixed in 0f2318f4f7dd961c05c16c113c056aee3ba8b6dd\n. Been a little busy, but that should be clearing up soon. :)\n. And it's not in there yet?\n. I thought we decided to prefer Install-ChocolateyShortcut over this - https://github.com/chocolatey/choco/blob/master/src/chocolatey.resources/helpers/functions/Install-ChocolateyShortcut.ps1 ?\n. +1 like :D\n. Each function in chocolatey is a file, no matter how small.\n. @Redsandro this is hilarious.  :)\n. The PR is closed, so this is closed. :)\n. This should be fixed with #278 \n. https://github.com/chocolatey/chocolatey/blob/stable/src/helpers/chocolateyInstaller.psm1 does not contain https://github.com/chocolatey/chocolatey/blob/master/src/helpers/functions/UnInstall-ChocolateyZipPackage.ps1\nReported at https://groups.google.com/d/msgid/chocolatey/cabe51da-9ff9-47ef-b091-c6152c642407%40googlegroups.com?utm_medium=email&utm_source=footer\n. This is in...thanks so much!\n. They were merged, but they were rebased to keep the history line nice and\nstraight. I become the committer, you are still the author. Yes, please\ndelete the branch.\nOn Friday, April 26, 2013, Redsandro wrote:\n\nClosed with unmerged commits. Can I delete the branch?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/231#issuecomment-17071294\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. :)\nOn Friday, April 26, 2013, Redsandro wrote:\n\nOkay, the Redsandro:getSystemBits branch has been deleted.\nGithub proposed this, but I'm still a bit foggy on Git and what impacts\nwhat so I needed to ask to be sure. :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/231#issuecomment-17073559\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Quote it either by ' ('notepad++') or by double double quotes\n(\"\"notepad++\"\"). What do you get then?\nBtw if you are looking for notepad++ on chocolatey.org, it is named\nnotepadplusplus.\nOn Monday, January 14, 2013, cemrich wrote:\n\nWhen passing a package name countaining a \"+\" sign as parameter to cinst\nan InvalidRegularExpression is thrown serveral times.\nExpected behaviour is an output like \"Unable to find package 'xyz+'.\"\nThe output is folowing:\nD:>cinstm notepad++\nBad argument to operator '-match': parsing \"^notepad++.\\d+\" - Nested quantifie\nr +..\nAt C:\\Chocolatey\\chocolateyinstall\\functions\\Get-PackageFoldersForPackage.ps1:5\n char:56\n-   return Get-ChildItem $nugetLibPath | ?{$_.name -match\n\u2014\n  Reply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/232.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. We had an earlier discussion on this. Please search the forum and start\nfrom there. Thanks.\n-Rob\nSent from my phone so please forgive spelling mistakes.\nOn Saturday, January 19, 2013, Claudius Coenen wrote:\n\nIn some cases, software is distributed as language-specific download.\nChocolatey should have some way of dealing with this elegantly.\nNotable packages that are in need of localised downloads are:\n- firefox (see their download pagehttp://www.mozilla.org/en-US/firefox/all/\n  )\n- libreoffice (see their download pagehttp://www.libreoffice.org/download/?type=win-x86\n  )\nin firefox, for example, you're pretty much stuck with the english user\ninterface, as far as i can tell. It would be great if one could specify a\n\"preferred\" locale. The package maintainer could also enter a default\nlocale. Ultimately Chocolatey would could to english, if nothing is\nspecified.\nIf i'm missing something, please let me know!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/233.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. This is something that wouldn't be looked at for a few versions.\n. Yes it does. That's why we have a user config. Your edits should be there.\n. Agreed. A generic shortcut to be placed anywhere would be nice\n. This is a duplicate of #5 \n. whoops. Apologies. Pinning to task bar is likely also a duplicate of something else entirely.\n. Not a dupe, would definitely want to add to that: from maintainer perspective they have https://github.com/chocolatey/chocolatey/blob/73baac967edb20005bde0761483c49df6911f90d/src/helpers/functions/Install-ChocolateyPinnedTaskBarItem.ps1\nThis is from user perspective.\n. Are you the package maintainer?\n. Does not appear to be so. Start by contacting the package maintainer through the link on the left side of the package page here: http://chocolatey.org/packages/SQLSentryPlanExplorer\n. Thanks. Closing this issue on choco.\n. Thanks!\n. Once you push to a remote that is part of a pull request, it updates the PR\nautomagically. That's why we always want PRs in branches, so you don't\naccidentally include something you don't want in the PR.\nOn Saturday, April 20, 2013, Gary Ewan Park wrote:\n\nOk, I think I have done everything that you suggested, but I am now also a\nlittle confused. How did it get into this pull request already? I expected\nthe last command that I ran, i.e:\ngit push -f origin\nTo put the rewritten commits into my forked repo, and from there I would\nhave to update the pull request, but this seems to have happened\nautomagically. What gives? Or what am I missing?\nThanks for all the help by the way, it really helped! Would have never\nfigured that out on my own! :-)\nGary\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/238#issuecomment-16705844\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. There is a link on the package page that Gary pointed out. That link is to contact the package owners. \nThat is the recommended way of getting a package fixed.  \nChocolatey has a clean separation between itself and the packages it installs. Package problems need to go back to the package themselves. Thanks.\n. Ah, thanks!\n. Okay, rismoney, watch and learn. :)\n. This is in... https://github.com/chocolatey/chocolatey/commit/2134f2c3a16566b3090015b4bf2141fb46f4f2e2\nBy the way @jamesmanning, please work off of master branch, not off of develop. :)\n. Thanks so much for creating the issue. We'll follow up with a fix.\n. The PR has been committed #244 - so closing this for now.\n. Agreed.\n. Yeah, I think we can pull this in. This doesn't seem to be 100% deterministic for upgrades though. Or am I missing something?\n. Yes and it may be time to start talking about configuration & plugins. Then allow peeps to remove and add functionality to chocolatey.\n. This is in. Thanks so much...\n. Run with -debug\n. Also, force doesn't delete the current installed package from chocolatey/lib so you will want to do that. It's a pain we are working on in the next version that force removes.\n. $path = Join-Path \"$(Split-Path -parent $MyInvocation.MyCommand.Definition)\" 'CloverSetup.exe'\necho $path\nInstall-ChocolateyInstallPackage 'clover' 'exe' '/SILENT' $path\nInstall-ChocolateyPinnedTaskBarItem \"${env:ProgramFiles(x86)}\\Clover\\clover.exe\"\nThis is what u want, that way the path is based on the path of the executing script.\n. Can you copy the text and paste it in instead of a picture? The last pic cut off some of the important stuff.\n. Ha! Thanks! \n. This is in. Thanks! \n. I believe at some point when nuget was throwing non-zero exit codes for any exit, so it was unreliable to be used in that manner. I think they may have fixed this in more recent versions.\n. Yep, not an issue with chocolatey. Going to close this and let you pass that onto the package\n. Jeff, nice that you noticed this. Is there somewhere better that this issue can be placed (since it may not be a choco issue)?\n. Cool. Closing for now pending discovery of a chocolatey issue.\n. I think this can happen. :)\n. This is implemented rather when choco calls out to the package provider it puts this in the environment variables for that process.\n. %CHOCOLATEY_VERSION%\n. Does it work when you are not behind the proxy?\n. Try cinst jivkik.dev1 -debug\n. You may have an incompatible proxy for nuget.exe. You may want to do some searching around to see what is required to work with socks proxies.\n. Cool. It might be a good idea if we add a proxy wiki page.\n. If you want to take a stab at creating a page on the wiki with proxy related information, I can review it. If not, I'll create one later.\n. Cool - thanks!\n. For anyone else that comes across this link - https://github.com/chocolatey/choco/wiki/Proxy-Settings-for-Chocolatey#still-having-trust-issues\n. Force doesn't address this, YET. ;)\n. Agreed though, this is a little different than clean\n. +1000. Yeah, this current area is a pain point for all of us. \n. cuninst would need an explicit item to be called on.\nThe failed installs will move to a directory so someone can go inspect why they failed later.\n. Be sure to look at #595 for perspective.\n. --force --force-dependencies (or -fx)\n. This is now linked up with https://github.com/chocolatey/choco/issues/1124 so please follow from there.. There are multiple methods of installation - https://github.com/chocolatey/chocolatey/wiki/Installation . You are not likely going to be able to use the simplest method.  It seems to me though that if you cannot open a command prompt (not powershell) and run the one on the front page of chocolatey.org (with runs a powershell command with an explicit unrestricted setting), then chocolatey is probably not going to work out for you since that is exactly how it runs when it does. \nI don't know how difficult it is to sign a script or what kind of maintenance issues we would see by this (since every time we change a script it would require a re-signing I believe). This makes it seem like the case - http://www.mikepfeiffer.net/2010/02/obtaining-a-code-signing-certificate-and-signing-powershell-scripts/ (and some other sites I've read over). \nUnfortunately it's not likely at this time that we will want to approach the cost (of both maintenance and the real cost of a VeriSign cert) of signing and re-signing our scripts. You are welcome to do a self-signed certificate and if you come up with a good way to automate that we would welcome a patch that would create a self-signed certificate, install it on a user's machine and then sign all of the chocolatey files (and probably every package at runtime just after they download since they will also have powershell in them).\n. Yep, that's going to make chocolatey very hard to use in your environment. So your option is to sign all of them with a self signed cert. When a new version comes out you will need to do that as well. The really tricky part is that you need to add a module to chocolatey to sign scripts just before chocolatey runs them as it downloads packages.  \nYour other option is not to use chocolatey. Unfortunately.\n. Thanks Matt, I'll get this over to .org as well.\n. Currently improving this a bit.\n. Most likely rismoney's stuff get's into choco proper. \n. And yes, things get very busy for me with my full time job. It ebbs and flows a bit, but the nature of the beast can consume most of my free time. \n. It's never returned exit codes... as we found in a different discussion (#384). I believe it was related to nuget always returning the incorrect exit code from way back 2 years ago.\n. Let's file a new issue about this over at chocolatey/choco.\nOn Friday, October 16, 2015, Josh Buedel notifications@github.com wrote:\n\nThis still happens in at least one situation. See below where I have\npassed an invalid $version$ token.\n[image: badversion]\nhttps://cloud.githubusercontent.com/assets/85681/10548068/fbe22a4e-73fd-11e5-8bc9-c2f1053fa16b.png\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/256#issuecomment-148773726\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Thanks!\nOn Friday, October 16, 2015, Josh Buedel notifications@github.com wrote:\n\nNew issue created. chocolatey/choco#469\nhttps://github.com/chocolatey/choco/issues/469\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/256#issuecomment-148840199\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Except work on mono\n. I have a longstanding request to put in mono support. I agree though - I use apt and brew when on those OSes as well. I'm not sure that I would use it, but it is an interesting use case. Plus it could potentially open the door to using choco as the mono pkg mgr. Potentially b/c I'm pretty sure most folks would rather just see a mono debian repo they could add to apt. It has a much richer set of features and hooks right into the app updater in ubuntu (for the folks that like gui tools). \n. The mono idea is a low priority due to that, but scriptcs support is more interesting for a few reasons. I don't necessarily see a need for scriptcs at the moment, but that doesn't mean we shouldn't explore it. This isn't about replacing powershell, just adding options.\n. And just b/c I do not understand something does not negate that there might be some really good use cases.\n. @rismoney I agree on all points here. Folks on the IRC channel would rather wait for a perfect solution than a good enough for now solution. :) \nI agree that rebuilding nuget is a daunting task. I don't expect it to be done in powershell. Another reason why the core of choco will be rewritten in c#.\n. This is in. Thanks! \n. what you mean is choco clean.\n. We do not remove the previous version at all when a new version comes in by design. You can install two versions of ruby.\n. You need to be explicit on installing ruby versions. \nBut what I think we are missing here is a bigger design. \nChoco clean removes all older versions of packages except for those you have pinned.\nSo if you have 3 versions of ruby and you pin the latest and the first one behind it, when you clean, the one that is not pinned goes away (from the chocolatey lib, but not uninstalled yet). \nThe uninstall itself should be smarter about asking someone what they want to remove when there are multiple versions. Like the way ruby gems does it when you have multiple installs of a gem.\n```\nchoco uninstall ruby\nDo you want to remove:\n\nRuby v1.8.6\nRuby v1.8.7\nRuby v1.9.2\nAll of the above\n```\n\nSo you wouldn't have a need for bump. What you could do is add clean to the end of the install command cinst ruby -clean so it cleans up the old.\n. And yes, right now when there are multiple active versions, PPAs break down a bit on keeping these separate if you try to treat them as the package. What we are looking to do here is create some meta packages that are dependent on a range of versions of a package so you can install them. What it doesn't handle very well right now is the upgrade scenario and why I haven't moved forward with it. It works right now just like it is, it's just not as easy for someone to see how they would get 1.8.7 and 1.9.2 of ruby and keep them updated independently. They have to use choco update ruby -version 1.8.7.### to go up and stay on 1.8.7. \nThese are special edge cases that don't always fit nicely into the versioning concept since they are maintained over time instead of deprecated for the newer versions. Nothing wrong with it, it just complicates things a bit, that's all.\n. This is also where the evolution of the chocolateyInstall.ps1 will come in handy (where we break some areas into known functions chocolatey can call).\n. I think that's where the clean command comes in. Choco has no way of\nknowing what us side by side and what is not. However a user pins packages\nthey want to keep and then later runs clean, it only cleans older pkgs that\nare not pinned. Punning also excludes a pkg fron upgrade during cup all.\nOn Wednesday, March 27, 2013, Rich Siegel wrote:\n\nMaybe cup should delete all versions. I think that's what yum update might\ndo.\nOtherwise cinst...\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/259#issuecomment-15554218\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Pinning is always from a user, never from a package author.\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\nOn Sun, Mar 31, 2013 at 8:31 PM, Rich Siegel notifications@github.comwrote:\n\ni understand what you are saying about pinning, which I am down with. Do\nyou think this should be a 'feature' of the config file? say a pinned\npackages element. Do we leave this up to the user to populateor leave it to\npackage authors to tamper with chocolatey.config? (ugh-security)...\nI have a production request to nail down the default behavior for cup. Its\ngetting to the point, where package authors are building crazy logic into\nchocolateyinstall.ps1... chocolateylib is gettting messy.\nIf there are areas where we are giving the users a choice, like in your\nuninstall example, we also need command line switches to force behaviors\nfor non-interaction.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/259#issuecomment-15701320\n.\n. The pin keeps a package from being upgraded. Like you want to pin a particular version.\n. Method 2 only\n. No, this is something chocolatey is going to do by v1.\n\nOn Thu, Jun 26, 2014 at 9:01 PM, FichteFoll notifications@github.com\nwrote:\n\nAfter running cup a few times some time ago I currently have these\nfolders in my C:\\Chocolatey\\lib folder:\nAtom.0.101.0\nAtom.0.96.1.0\nflashplayeractivex.13.0.0.182\nflashplayeractivex.13.0.0.206\nflashplayeractivex.14.0.0.125\nflashplayerplugin.13.0.0.182\nflashplayerplugin.13.0.0.206\nflashplayerplugin.14.0.0.125\nWhat I expected: flashplayer derivatives should've been removed, Atom\nshould've copied old user data and then also be removed.\nShould package authors take care of that? Most package don't even have an\nuninstall script...\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/259#issuecomment-47300870\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. @TomOne what's your suggestion for jre where you need both 32bit and 64bit at the same time?\nSeparate packages right?\n. This is a non-starter as the c# version does not display the behavior of multiple versions installed. Or in other words, this is already fixed for choco.exe. ;)\n. If you watch the video here, I circle the ability to add the old behavior - https://www.youtube.com/watch?v=sm_U53sxt2c\n. I think we need to look at list or search -localonly - It's much much faster.\nclist nodejs -lo -all\nhttps://github.com/chocolatey/chocolatey/commit/5052e19bda652f71626105c0cebb8459e92a3e31\n. So this is going to be choco list pkgname -lo and choco list pkgname -lo -all\n. I mean super fast :)\n. It will be a documentation change. Cver is very specific and clist is not.\nWe may need a flag to make it a very specific filter.\nOn Friday, April 26, 2013, Gary Ewan Park wrote:\n\nShould we add a task, somewhere, to get the documentation updated to\nreflect this change, or where do things like that get logged so they are\nnot forgotten?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/260#issuecomment-17056837\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. It is developed, but you have to have the latest source installed. Otherwise the -lo is going to be ignored. I just added it last night. :)\n. It points to the local chocolatey lib folder as a source and good old nuget to do the searching.\n. We can upgrade the list to return object - I'm not sure if it does now.\n. That's exactly the design. You should always bump the dependencies to the least usable version. Leaving out the version in the dependency is a shortcut that when taken produces exactly the results you are seeing.\nReasoning: What if say the newest version of a dependency was no longer compatible with your package that depended on it? If we implemented the above, it would not be the desired behavior.\n. Folks are welcome to cup a dependency installed package as well.\n. And there is cup all, which would bump everything to the latest version. However, it may bump something you don't want upgraded (until we get the pinning feature implemented).\n. I don't believe this is the answer you were looking for, perhaps we can add the switch to force it. Just not make it the default. Which is likely exactly what you were looking for.\n. I think we can do this, but it may not make it in until after v1.\n. Thanks for finding this.\n. We're looking at May/June.\n. True that...\n. This is done - it's called --noop, but you can also use -whatif to invoke the same behavior. It's a core switch. https://github.com/chocolatey/choco/wiki/CommandsReference#default-options-and-switches\n. This actually goes to this repo - https://github.com/chocolatey/puppet-chocolatey\n. Of course, it also requires @rismoney to actually check in the files from his repo and then add the module out on puppet forge.\n. Updated the URL folks. Sorry about that.\n. ;)\n. bringing back a goodie: basically - http://devlicio.us/blogs/rob_reynolds/archive/2010/08/27/herding-code-talks-about-nu.aspx 55 minutes in\n. We are closing almost all of these for the 0.9.8.21 release. We've closed a few already.\n. Well this is a problem. Expected behavior is help or noop.\nOn Tuesday, April 9, 2013, michfield wrote:\n\nExecuting cuninst without parameters shouldn't do anything,\nbesides help, usage example or similar stuff.\nAnd it's really trying to uninstall something...\nLooks like it want's to uninstall Chocolatey itself - good think it didn't\nsucceed :)\nIf it's intended behaviour to uninstall itself, it's a big problem.\nWhy don't you introduce something like: cuninst myself or similar\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/265\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. This is closed since the PR was accepted.\n. looks good to me\n. This is in. Thanks! \n. Delete it\n. Looks like the native zip  for windows isn't enabled on the version you have. What version is it? Core?\n. Agreed.\nOn Monday, April 15, 2013, Matt Wrock wrote:\n\nYeah. There may be some edge cases that cant include support for everyone\nwithout a ton of effort but if a trivial change which this may be can make\nit all the more simple to widen adoption and provide a friction free\nexperience, then that would be nice.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/268#issuecomment-16372078\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. This is a duplicate of #59\nReferencing there and closing this one.\n. That might be helpful. :)\n. makes sense to have it prepended with chocolatey :+1: \n. @Redsandro eventually yes, but it won't come in v1. So back to your 15 years argument... ;)\n. Yes, .Net 4.0 pkg is there for future concerns. Choco at some point will\ndepend on a diff version of the framework, rendering a diff .net pkg\nuseless.\nOn Tuesday, April 16, 2013, Redsandro wrote:\n\ncpack doesn't mention that there has been a problem, the package is just\nnot generated.\nUpon further investigation it turns out that .NET4.0+ is required for\nnuget.\nThis makes DotNet4.0 http://chocolatey.org/packages/DotNet4.0 a funny\nChocolatey package, because you need it installed before you can install\nit. :P\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/270\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Agreed\nOn Tuesday, April 16, 2013, Redsandro wrote:\n\nI think it should warn though, if something like that is possible.\nCould not package your package because .NET is not installed.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/270#issuecomment-16440795\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. I'm guessing that nuget is failing silently?\n. @gep13 You want this one?\n. Nothing works in choco.exe without .NET 4.0. So there will be a very visible error.\n. You put a dependency on something but didn't include it in your source\n(and/or already have it installed). I know it's unexpected b/c u actually\nhave choco installed, and we have it out to fix when choco installs to\nactually put the choco pkg folder into lib like everything else.\nOn Tuesday, April 16, 2013, Redsandro wrote:\n\nI removed the dependency for now in order to get the package to install on\nmy testing VM, so I could push a new version of Rename Masterhttp://chocolatey.org/packages/renamemaster/3.4\n.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/271#issuecomment-16434902\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. If you have a package installed already, the dependency is resolved. Therefore you wouldn't need to include it in your current directory (source). Otherwise you need to put it there. In the case of chocolatey itself, it was treated differently for the first install and not also put in the %choco install%\\lib directory. We are going to fix that so that things can take dependencies on newer versions of chocolatey better.\n. You can take a dependency on a minimum version of chocolatey like you are doing and it should be fine. You just need to make sure when you are testing out dependencies in a local source, if you don't want to add the dependency packages to the source, specify the source they are in as well. As in -source \"\"%cd%;http://chocolatey.org/api/v2/\"\" (note the double double quotes here).\nDoes this make sense?\n. Awesome, thank you!\nOn Tuesday, April 16, 2013, Redsandro wrote:\n\nAppended your explanation to the Wiki:\nhttps://github.com/chocolatey/chocolatey/wiki/CreatePackages#testing-your-package\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/271#issuecomment-16439628\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. I understand what is being asked here. It's not a trivial thing to list out dependents with accuracy as the graph can change without a package's knowledge and does not span across multiple sources. \nI'm assuming this could really only be based on a source, where it would build a tree of current dependents (or some stale value, perhaps every 6 hours or so, that is acceptable so that it doesn't kill the server).\nDo you have a good example of a pkg manager that is doing this now?\n. Perfect. Thanks for the example. :)\n. IMHO managing dependencies is fundamental for a pkg mgr - getting info about what depends on a pkg is very handy, but I'd hardly argue fundamental. \nHowever I'd like to understand a use case that makes this fundamental.. Agreed it would be great to see who depends on a package, graphed locally and on a package source.. I think we can accomodate this... the priorities might fall this to take some time. I see you've done this on your master branch. If you plan to make any more changes and do pull requests you would be limited. \nMy suggestion is that you close this, move the changes to a branch, and then issue the pull request. That would allow you to make any additional pull requests or update your branch without influencing this request.\nKeep in mind the current wait time for acceptance of pull requests in chocolatey is on the order of a couple of months if not longer. Some things we get in very quickly, some things we do not, depending on where it falls for prioritization.\n. I'm less concerned about the rebase... what I don't want you to do though is do a pull and merge, that messes with source. Then I have to cherry pick your commits out to keep a good linear history.\n. I have the methods I expect committers to use in an email somewhere - it might be a good idea to put it into a readme markdown in the source.. it's very close to what you are saying here Rich.\n. Basically what should happen for the requestee:\n1. git checkout -b support_msu\n2. reissue pull request.\n3. reset your master to remove these changes. git extensions gui is a helpful one for doing that.\n. This isn't so bad... :)\n. Please don't update pull requests. There is only one recommended way of\ndoing this to keep the history line straight and it requires quite a few\nsteps on your part (including force push to your remote branch). It's\nactually easier for me to accept a PR if it hasn't  been updated (I may\nneed to cherry pick otherwise). I would rather the work be on my side of\nthe house because i'm the holdup here. :)\nWe'll publish what we are looking for in the contributor's guide for\nkeeping a pull request up to date.\nI mentioned this as I saw you update more than one.\nOn Saturday, April 27, 2013, Justin Dearing wrote:\n\nUpdated to current master\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/274#issuecomment-17116137\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. I'm good with this. \n. So in reviewing the EUA of the license, as long as we don't use any MS\ntrademarks we should be okay. But I'm not a lawyer. It does state that it\nis not intended to be used in a production environment and I don't know how\nthat affects the agreement if we do. I would prefer not to use that, even\nthough the license appears permissive...\nOr we can make that its own pkg and have choco download it and use it. I\nlike that much better!\nOn Friday, April 19, 2013, Justin Dearing wrote:\n\n@ferventcoder https://github.com/ferventcoder Is it ok to include\nFontHelpers.ps1https://github.com/Iristyle/ChocolateyPackages/blob/master/core/FontHelpers.ps1in chocolatey core? I hate these weird copyright issues.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/275#issuecomment-16697677\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Or just dotsourced for the system, effectively. There is an install\npowershell cmd call you can make (\nhttps://github.com/chocolatey/chocolatey/wiki/HelpersInstallChocolateyPowershellCommand)\nand\nthen use it as a cmd on the system you can call.\nOn Friday, April 19, 2013, Justin Dearing wrote:\n\n@ferventcoder https://github.com/ferventcoder , so you want\nchocolatey.nuspec to install this as a dependency, and then this to be\ndotsourced in chocolateyInstaller.psm1 so its in scope for\nInstall-TrueTypeFonts?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/275#issuecomment-16698477\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Wouldn't zero indicate no issue? Or in this case pkg exists locally?\nOn Friday, April 19, 2013, Rich Siegel wrote:\n\nthere is a chocolatey module\nhttps://github.com/chocolatey/puppet-chocolatey\nbut to get full exit codes natively we need the PR to be accepted, or you\ncan build from my source.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/276#issuecomment-16673615\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. This is in...\n. For my knowledgr, there are only one or two we don't export and I'm not\nsure if that's still the case.\nOn Sunday, April 21, 2013, Justin Dearing wrote:\n\nIf you compare the Export-ModuleMember line in chocolateyInstaller.psm1 to\nthe contents of the helpers folder, three functions are not exported\nGet-FtpFile\nGet-WebFile\nUnInstall-ChocolateyZipPackage\nIs this intention or not intentional:\nRegardless, I think the Export-ModuleMember line shoudl be generated\ndynaically. If you want to have things in the function folder that are\nprivate to the module scope, can we rename them to something like\nUnInstall-ChocolateyZipPackage.Unexported.ps1?\nLet me know and I'll prepare the patch.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/277\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Superseded by #628 \n. Is this a chocolatey issue or a package issue?\n. Think I figured out the issue... \n%chocolatey_bin_root% is set to c:\\chocolatey\\bin, right?\n. Try installing it again. I updated the package to not change the system drive if you have already specified it.\n. So in the case of the triumvirate, you can never go wrong with just the default (7zip). It will almost always install the .install/.app version of the application. No further thought necessary. The zipped version is there purely for the folks who won't have admin permissions to their machines or who don't mind going through a little extra work to keep things out of add/remove programs. \nWe are working to make the docs better and it will come with time. HTH\n. It's not really a specialization. Virtual packages are not baked at all at the moment. All there is are metapackages that point to the .install or the .commandline version of the packages. They exist for discoverability as well.\n. Agreed on most points. Some of this is definitely a polish aspect that we won't see until version 2 of chocolatey. Some of it is an infrastructure design for how we better handle package breakdowns, i.e. to your point of the one package, how do you handle french, japanese, and chinese versions of a package? What is the actual versions are out of sync? Should that hold up the package? Or should we somehow hide the other packages and we have the virtual make the best decision? That's kind of what I'm leaning towards.\nLots of design considerations here. :)\n. I need to consider 'help command' versus 'command help'.\nOn Tuesday, April 23, 2013, corkupine wrote:\n\nI know that a least sources is not in help. There may be some others not\ncovered. Also...not sure if it might pay to restructure help a little to\nget help on individual commands, e.g. chocolatey help sources.\nWas going to send a pull request, but the existing help output is already\npretty long and didn't know if maybe now was a good time to refactor that.\nI don't mind chipping in to fix this up if you come up with a\ndetermination.\nThanks!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/281\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Thinking command help would be best. :)\n. I like the environment reload. I saw something similar before, but I imagine that it will definitely be the route we will take.\n. @michfield I'm not sure if I noted, but I did end up using setenv.bat. It's now called refreshenv.cmd and it's installed in the bin directory so the user can determine when to run it. That started in 0.9.8.24 I believe.\n. I agree that the installer need to get smarter. I'm going to close this for now in favor of other issues that talk about this specifically.\n158 #420\n. Also, kudos on being possibly the only person who has used the extensions feature of chocolatey. :+1: \n. We have an open PR to evaluate doing this at system - https://github.com/chocolatey/chocolatey/pull/135\n. @DavidS you have that correct. And the secondary issue is that the user may not have admin privileges on their machine.\n. Yes, that is one way to know if chocolatey is installed. We are looking to go to system path for installs so it is available for all.\n. Hey, much appreciated. Let me get you the updated logo and if you want to hook that up again, that would be awesome! \n. We'd need an updated one...\n. Local...let me set up a repo with the logos.\nOn Tuesday, November 25, 2014, Gary Ewan Park notifications@github.com\nwrote:\n\n@ferventcoder https://github.com/ferventcoder do we keep the most\nrecent logos somewhere?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/pull/284#issuecomment-64318061.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Thanks for reporting this!\n. Our oldest PR is older than my youngest child. x)\n. @gep13 how does this work on a 32 bit system? https://github.com/chocolatey/chocolatey-coreteampackages/blob/master/feeddemon/tools/chocolateyUninstall.ps1#L8 ;)\n. @PaulMead It could be a bug in the helper.\n. :)\n. This has been moved over to choco - https://github.com/chocolatey/choco/issues/229\n. thank you sir...\n. Darn keys are too close to each other... :)\nIt's likely.\n. There, now it's labeled for 0.9.8.21. :)\n. On the nu project, one of our committers was able to pull and display the text from the wiki pages for help commands. It was pretty neat, but it requires that you are online.\n. That sounds pretty interesting. We'll start somewhere though with this and work towards something like that.\n. Wow, if @github let's me edit your comments, it should show that I edited for accountability. Seems like something that could seriously be abused. I could change your entire statement there @gep13. Thoughts @haacked?? \n. I hear that. Separate files is awesome, but what is the standard naming convention for the files?\n. There is a convention for powershell for help file naming. Perhaps we should look it up?\n. Sorry - that looks like an issue with the pkg and not with chocolatey.\nChoco doesn't have a function named stop-onappisinstalled (or anything\nclose to that).\nOn Monday, May 6, 2013, justinmk wrote:\n\nFrom the same cmd window:\n@powershell $psversiontable.psversion\nMajor  Minor  Build  Revision\n\n2      0      -1     -1\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/289#issuecomment-17491706\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Thanks Gary!\nOn Monday, May 6, 2013, Gary Ewan Park wrote:\n\nHello,\nI have just checked the Chocolatey Source Code, and the\nStop-OnAppIsInstalled is not part of the code case, so this must be a\nmethod that the package owner expects to already be available in the system.\nI think the best course of action would be for you to contact the package\nowner directly:\nYou can do that by clicking the Contact Owners link here:\nhttp://chocolatey.org/packages/Devbox-ConEmu\nHope that helps!\nGary\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/289#issuecomment-17495257\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Closing as not a choco issue\n. It only does it on exes that are in the package that are NOT used for install. How much work does it add? How many exes are in your package(s)?\n. Would you put this in the old package or the new package?\nOn Tuesday, May 14, 2013, Matt Silbernagel wrote:\n\nDoes chocolatey support an update script like chocolateyInstall.ps1 or\nchocolateyUninstall.ps1?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/291\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. What if you change the name of the service? Only the old service should\nknow that name, itherwise it gets messy. Or is that an uninstall concern?\nWhats the difference between uninstall and upgrade?\nOn Tuesday, May 14, 2013, Matt Silbernagel wrote:\n\nI would think the new package. Specifically, I'm creating a package that\nruns a service. When I update it, the service will need to stop as to free\nup all the resources.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/291#issuecomment-17904986\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Sorry meant whats difference between uninstall old version/install new\nversion versus upgrade? And by that I'm referring to end state.\nOn Tuesday, May 14, 2013, Matt Silbernagel wrote:\n\nI would think the new package. Specifically, I'm creating a package that\nruns a service. When I update it, the service will need to stop as to free\nup all the resources.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/291#issuecomment-17904986\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. > By updating, the result is the old folder / files structure merged with the new folder / files structure, which is wrong!\nSometimes this is the result of the native installer not performing the upgrade correctly.\n\nrun the uninstall for the old version - execute the chocolateyUninstall.ps1 script (if exists)\n\nWhile this appears to be a good solution, some uninstallers remove files you would want to keep around in an upgrade scenario. That's why we usually let the native installers that already know how to upgrade do their thing. In most times they handle the upgrade well, however there are cases where you mentioned artifacts are left behind.  In the principal of least surprise, I would find it more surprising if files / configuration were missing versus some extra files/folders around.\nThoughts?\n. > 1) Introduce the \"chocolateyUpdate.ps1\" script mentioned in the title, which should be placed in the newer package (the newer version knows about older versions, but not the other way around). Chocolatey should call that script if it exists (and skip chocolateyUninstall.ps1 from the existing, older package), otherwise fall back to uninstall old + install new.\nAnd this chocolateyUpdate.ps1 could call the older package's uninstall should the maintainer know the ramifications of this.\n. Will be thinking of improvements we can make as we move forward on the new version.\n. Migrated to https://github.com/chocolatey/choco/issues/268\n. Install-PowershellModulePath (or something like that). \n- This copies something to a path specified.\n- If the path is not already created in the environment variable, it will add it.\n- Be able to specify user/machine (unless this is only one or the other).\nSo looks like three parameters to be passed.\n. @jaykul may also be interested in this discussion and being more of an SME on this, he probably has suggestions on how to implement.\n. I know @jaykul had something he was working on for this kind of thing. \n. Or try with -debug ?\nOn Tuesday, May 28, 2013, Gary Ewan Park wrote:\n\nHmmm...\nJust tried again on my Windows 8 machine, and I get the same results as in\nthe above screenshot.\nWhat happens if you try running the following:\ncmd.exe /c webpicmd /List /ListOption:All\nThis is what Chocolatey is doing under the hood for you.\nGary\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/293#issuecomment-18545703\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. This seems simple enough to implement, we just ask for permission as we start it up... this is likely getting fixed in the next version\n. This should be completed.\n. Oh I agree with you on this completely. Yet another reason to stop using nuget.exe for the dirty work in the future.\n. It's possible the new version has this figured out. No the idea is to\nswitch to the lib version of nuget to internalize commands more.\nOn Wednesday, May 29, 2013, TomOne wrote:\n\nWhat are the other reasons to stop using nuget.exe?\nIt should be possible to modify the source code of nuget.exe to get nice\nand clean UTF-8 files. Unfortunately I\u2019m not able to do that, because I\u2019m\nnot familiar with C#.\nBut also the gallery on nuget.org would benefit from such an improvement.\nThey have the same issue with UTF-8 and ANSI.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/294#issuecomment-18648417\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. yeah, this part sucks.\n. GH wiki anchors headers automatically.\nOn Friday, October 25, 2013, Redsandro wrote:\n\nWow, that's elaborate.\nI've added a line to the guide for people who don't like readinghttps://github.com/chocolatey/chocolatey/wiki/CreatePackagesQuickStart\n:\n- You must save your files with UTF-8 character encoding without\n  BOM.\nIf you anchor your character encoding paragraph, I can link to it.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/294#issuecomment-27098358\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Go forth and wiki. :)\nOn Friday, October 25, 2013, TomOne wrote:\n\nI wrote this paragraph regarding the character encoding. As soon as you\napprove it, I\u2019ll add it to the Creating Packageshttps://github.com/chocolatey/chocolatey/wiki/CreatePackagessection in the Wiki, right after Rules\nto be observed before publishing packageshttps://github.com/chocolatey/chocolatey/wiki/CreatePackages#rules-to-be-observed-before-publishing-packages\n:\nCharacter encoding\n- Use the UTF-8 character encoding for all plain text files in your\n  package, especially for the .nuspec and .ps1 files. If you don\u2019t respect\n  this rule, some characters are not displayed correctly in the Gallery on\n  chocolatey.org, because the Gallery assumes UTF-8.\n- Don\u2019t save your UTF-8 files with a byte order mark (BOM). A BOM is\n  neither required nor recommended for UTF-8, because it can lead to several\n  issues.\n- Note that there\u2019s a lot of confusion in the world of character\n  encodings: For example, ANSI is an incorrect term for the\n  non-standardized Windows character encodings, e. Windows-1252. But you\n  should not use this encoding family anyway. In addition, Notepad++\n  incorrectly uses the term \u201cANSI as UTF-8\u201d for UTF-8 without BOM. If you\n  select UTF-8 in Notepad++, it means UTF-8 with BOM.\n- Specify the UTF-8 encoding in the first line of your nuspec files.\n  Then the first line looks like this: <?xml version=\"1.0\"\n  encoding=\"utf-8\"?>.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/294#issuecomment-27079309\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. No BOM- it causes more issues than it helps. I find it weird that\npowershell would get ut wrong. Do you have a gist where it shows it\noutputting the detected encoding?\nOn Saturday, October 26, 2013, TomOne wrote:\n\nThe anchor is generated automatically as @ferventcoderhttps://github.com/ferventcoderalready mentioned:\nhttps://github.com/chocolatey/chocolatey/wiki/CreatePackages#character-encoding\nDamn, I just found out that PowerShell doesn\u2019t even recognize UTF-8 files\nwithout BOM. It uses Microsoft\u2019s ancient Windows-1252 encoding by default.\nSo we have to save PowerShell scripts in UTF-8 with BOM to work correctly.\nSorry Microsoft, but we live in 2013. Nobody wants your stupid\nnon-standardized encodings! [image: :-1:]\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/294#issuecomment-27150483\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. I mostly ignore things I can't change and change the things I can change.\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\nOn Sat, Oct 26, 2013 at 3:31 PM, TomOne notifications@github.com wrote:\n\nAnd by the way, all modern Linux distributions use UTF-8 without BOM by\ndefault. The W3C doesn\u2019t recommend BOMs for the webhttp://www.w3.org/International/questions/qa-byte-order-mark.en.php\n.\nBOMs for UTF-8 really cause issues:\nhttps://en.wikipedia.org/wiki/Byte_order_mark#UTF-8\nSome issues that I\u2019ve experienced myself when using UTF-8 with a BOM:\n- .gitignore files don\u2019t work properly. The expression in the first\n  line fails because the BOM character stands in the way.\n- A colleague created a small node.js script which merges multiple CSV\n  files. The output file contained multiple BOM characters, even in the\n  middle of a line. Then my colleague imported that into a database using\n  phpMyAdmin. Then he experienced database inconsistencies. It took him over\n  an hour until he found out that the BOMs were causing that issue.\nWell, Microsoft seems to insist on BOMs when using UTF-8. But only because\nChocolatey is a Windows software, it doesn\u2019t mean that it has to adapt\nMicrosoft\u2019s inability to follow standards and recommendations, especially\nwhen it comes to such fundamental things like character encoding.\nI read that from multiple sources that Microsoft is not very open to any\nsuggestions. For example, they keep ignoring bug reports and feature\nrequests for of Internet Explorer and automatically delete them after about\n48 hours. What kind of weird strategy is this? Are they planning their\ndownfall of their company? Well, at least for IE it seems to work, when I\nlook on the progression of the market share of Internet Explorer. [image:\n:grinning:]\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/294#issuecomment-27155100\n.\n. Open the file after saving it that way. That's what I think Tom is\nreferring to.\n\nOn Sunday, October 27, 2013, Redsandro wrote:\n\nNotepad++ incorrectly uses the term ANSI as UTF-8 for UTF-8 encoded\nfiles without a BOM.\nWhat version are you running? I have no \"ANSI as UTF-8\" option, only \"UTF-8\nwithout BOM\"\n[image: Notepad++ encoding]https://github-camo.global.ssl.fastly.net/6e724cac3b3f0d47542fe3987f08a1934383d45f/687474703a2f2f692e696d6775722e636f6d2f525a445571674c2e706e67\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/294#issuecomment-27183337\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. How about \"Avoid the use of non-ASCII characters\"? \nAnd how about we update the templates so that they are in line with these recommendations? \n. Tom you crack me up. :D\nOn Tuesday, October 29, 2013, TomOne wrote:\n\nOK, but I still don\u2019t agree with putting\nEither:\n- Do not use non-ASCII characters.\ninto the wiki. I thought the idea is to write less (but sensible)\n  guidelines, not more. I\u2019ll try to explain why that \u201cnon-ASCII characters\u201d\n  guidelines does not make sense, using a little story (inspired by\n  https://github.com/chocolatey/chocolatey/wiki/ChocolateyStory):\nThere are two guys, Bob and Richard. Both are Windows users and discovered\nChocolatey a few moths ago. Now they also want to maintain some packages of\ntheir favourite software.\nRichard doesn\u2019t care much about guidelines and rules, he starts\nimmediately with creating packages and doesn\u2019t read the Chocolatey wiki. He\nuses the Windows Editor to edit his nuspec files and saves them with the\ndefault character encoding (Microsoft\u00ae ANSI\u2122). But in some of his packages\nthere are characters like \u00a9, \u00ae and en dashes. They get displayed with ?signs in the Chocolatey Gallery, but he doesn\u2019t even notice it. After a few\nweeks he coincidentally notices this problem, but he does not care.\nUnlike Richard, Bob is assiduous. He reads the Create Packageshttps://github.com/chocolatey/chocolatey/wiki/CreatePackagespage and learns that nuspec files must be saved as UTF-8 without BOM. He\ndidn\u2019t know much about character encodings before, but he configures his\nNotepad++ editor to save files as UTF-8 without BOM by default. Now he\nwon\u2019t have any problems with character encodings in nuspec files and enjoys\ncreating packages.\nUnfortunately there are many Richard-like package maintainers on\nChocolatey.org. For them, a suggestion in the wiki like \u201cDo not use\nnon-ASCII characters.\u201d wouldn\u2019t have any effect. And for people like Bob,\nsuch a suggestion would be totally superfluous, because the solution to set\nthe correct character encoding in the editor once is certainly less\ncomplicated than having to remember each time when editing a nuspec to not\nuse non-ASCII characters.\nDon\u2019t be a Richard. [image: :smile:]\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/294#issuecomment-27351020\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. You both crack me up. I get the humor on both sides, but from this\nconversation I'm not yet sure you get each other's humor. :)\nOn Friday, November 1, 2013, TomOne wrote:\n\nOf course.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/294#issuecomment-27613262\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. That's actually interesting...\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\nOn Sat, Nov 2, 2013 at 12:08 PM, Rich Siegel notifications@github.comwrote:\n\nWhy not automate a character encoding conversion to the correct encodings\nbefore a package gets built?\nI like it.\n-Rich :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/294#issuecomment-27626278\n.\n. Well it was a cool theory anyway. ;)\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\nOn Sat, Nov 2, 2013 at 3:27 PM, Redsandro notifications@github.com wrote:\n\nI don't think that will work. Once you save your file in standard\n(according to Windows) encoding, the character becomes unreadable when you\nreopen the file. But when I change encoding to utf-8, the char remains\nunreadable. I have to enter it again.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/294#issuecomment-27631734\n.\n. It sounds like cpack would be too late in the process to be helpful.\n. I guess I'm missing something now. You can't get back items that have been converted to ASCII format where those items are now boxes. So converting it back to UTF8 doesn't win you anything.\n. It could be I missed this https://github.com/chocolatey/chocolatey/issues/294#issuecomment-27632769\n. @TomOne we have editor config in here. If you send me a PR over in the templates repo, I would accept it there. But I'm not sure what good it would do since that is not a chocolatey packages template repository that they start from (if that makes sense), just one that warmup uses to copy the templates into their chocolatey packages repo.\n. There is only one way to really find out what happens if you use a BOM with the nuspec. :)\n. When the advice went out we were on Nuget.exe 2.1 and we are using 2.8 now. That could be the difference.\n. Yes, \n I prefer that we would do it more like ruby gems where it throws up an option on what you want to uninstall. \n1) v2.0\n2) v1.0\n3) all of these\n. I'm going to close this as a dupe of #389 as it more accurately describes the feature.\n. Please subscribe to that issue. Thanks! \n. Double double quotes. Its on the wiki. Something with the powershell\nhandoff strips the first set. You can also use single quotes.\n\nLike \"\"somewhere here\"\" or 'this too'.\nHope this helps.\nOn Tuesday, June 4, 2013, Anton Vishnyakov wrote:\n\nHi team,\nI use cinst with \"-source\" param to install/update packages from local\nfolder.\nSomething like that:\ncint mypackage -source \"c:/tmp/mypackage\"\nIt seem that we can't use spaces for the local folder path. If I use\n\"tmp 2\" folder, I will get an error \"2\\mypackage is not a valid version\nstring\":\ncint mypackage -source \"c:/tmp 2/mypackage\"\nIs that behavior by design or something? Any suggestions?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/296\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. This is in 97b94b2d7d5874da2e94bad693b3e8c51a146b64 and 5a9d3968042cdacfdfce62f05e0108a772c5019e\n. This seems a feature for the website, which is over at https://github.com/chocolatey/chocolatey.org\n. I think we already have a pull request for this.\nOn Friday, June 14, 2013, Simon Cropp wrote:\n\nrun this at the command line\ncuninst\nand get this\nChocolatey (v0.9.8.20) is unininstalling ...\nRemove-Item : Cannot find path 'C:\\Chocolatey\\lib.0.9.8.20' because it does not exist.\nAt C:\\Chocolatey\\chocolateyinstall\\functions\\Chocolatey-Uninstall.ps1:28 char:5\n-           Remove-Item -Recurse -Force $packageFolder\n-           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n- CategoryInfo          : ObjectNotFound: (C:\\Chocolatey\\lib.0.9.8.20:String) [Remove-Item], ItemNotFoundException\n- FullyQualifiedErrorId : PathNotFound,Microsoft.PowerShell.Commands.RemoveItemCommand\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/299\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Yes, we are looking at ensuring the message only happens one time. This can\nhappen multiple times if someone calls it directly or if it is called as\npart of one of the big three utility functions and then wraps some more\nscript code afterwards.\nOn Sunday, June 16, 2013, Gary Ewan Park wrote:\n\nI \"think\" this might be an issue with the package itself, no? Where a call\nto Write-Success is called twice. Nit at my computer just now, but will try\nto check the chocolatey package for this application later today to confirm.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/300#issuecomment-19509693\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. It's wrapping a try catch around one of the big four (it's no longer just\nthree), which already has error handling and everything built into it. See\nhttps://github.com/chocolatey/chocolatey/wiki/HelpersReference\nThis pkg script can be cut to one line. Is this one that I own?\nOn Monday, June 17, 2013, Gary Ewan Park wrote:\n\nDoesn't look like this is a package problem. The choco package has the\nfollowing:\ntry {\n  Install-ChocolateyPackage 'markpad' 'msi' '/quiet /norestart' 'https://github.com/downloads/Code52/DownmarkerWPF/MarkPad.v0.9.0.1.msi'\nWrite-ChocolateySuccess 'markpad'\n} catch {\n  Write-ChocolateyFailure 'markpad' \"$($_.Exception.Message)\"\n  throw\n}\nGary\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/300#issuecomment-19546394\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Sure!\nOn Monday, June 17, 2013, Gary Ewan Park wrote:\n\nGotcha.\nNo, this one not owned by you, but i will contact package owners later\ntonight and let them know if you want?\nSent from my Windows Phone\n\nFrom: Rob Reynolds>\nSent: 17/06/2013 16:08\nTo: chocolatey/chocolatey>\nCc: Gary Ewan Park>\nSubject: Re: [chocolatey] Duplicate logging (#300)\nIt's wrapping a try catch around one of the big four (it's no longer just\nthree), which already has error handling and everything built into it. See\nhttps://github.com/chocolatey/chocolatey/wiki/HelpersReference\nThis pkg script can be cut to one line. Is this one that I own?\nOn Monday, June 17, 2013, Gary Ewan Park wrote:\n\nDoesn't look like this is a package problem. The choco package has the\nfollowing:\ntry {\nInstall-ChocolateyPackage 'markpad' 'msi' '/quiet /norestart' '\nhttps://github.com/downloads/Code52/DownmarkerWPF/MarkPad.v0.9.0.1.msi'\nWrite-ChocolateySuccess 'markpad'\n} catch {\nWrite-ChocolateyFailure 'markpad' \"$($_.Exception.Message)\"\nthrow\n}\nGary\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/chocolatey/chocolatey/issues/300#issuecomment-19546394>\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/issues/300#issuecomment-19551258\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/300#issuecomment-19551922\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Hmmm....that sounds bad. I haven't run it through any profilers but we can take a look.\n. So this is due to needing the COM shell for unzipping files. That doesn't exist on core. We are looking into using something non-native but for now you will need to follow one of the other installation methods on the wiki.\n. Cheers \n. If you try the prerelease, I'd be interested to know if it works now.\nOn Wednesday, September 18, 2013, Gildas Cherruel wrote:\n\nit actually exists on Windows Core 2012. Though not through the Windows\nSHell, since it is not installed on Core (and should not).\nTo unzip files you can do in Powershell:\n[System.Reflection.Assembly]::LoadWithPartialName(\"System.IO.Compression.FileSystem\")\n| Out-Null\n[System.IO.Compression.ZipFile]::ExtractToDirectory($pathToZip, $targetDir)\nNow, that alone won't fix the overall issue as I bet chocolatey uses\nWindows SHell in its own scripts.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/302#issuecomment-24709157\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Gildas, would you be up for a hangout to discuss some of these things? \n. Interesting dilemma. Seems we need to be able to pass something to the downloaded string as we invoke it.\n. call this instead of the normal install - https://chocolatey.org/installabsolutelatest.ps1\n. Yes, we already published a notice on this: https://groups.google.com/forum/#!searchin/chocolatey/PSA$3A$20Possible$20Action$20Required!$20Schema$20Version$20Errors$20if$20you$20have$20upgraded$20to$20Nuget$202.5/chocolatey/HGIqDlOSXTQ/lPPOpmvuP84J\n. Closing since this is already fixed in the next version and we have a workaround. \n. For posterity, and so you don't have to read through my thread to find the nuget bug - https://nuget.codeplex.com/discussions/445455\n. Well, 15 months or a few days... still doesn't make it right https://github.com/chocolatey/chocolatey/commit/c9f9e8dc95ccd337059cd84bbd571b026a7eb7dd\n. so this requires comma between package names. I am trying to figure out removing everything from implicitly being positional but running into a few issues I will need to explore later.\n. Yep. Notice I said temporarily need a comma.\nOn Thursday, June 27, 2013, Redsandro wrote:\n\nWow, it's handy to know powershell. :P\nDetails are very important. Details can even make an overpriced turd\npopular. Just look at Apple Inc. That's why I'm seemingly nitpicky, but\nplease understand it is only because I care. :)\nThat said, this is a big step forward. But it's still unintuitive-ish.\nThese days, smartphones come without a manual because everything is tackled\nin the simplest feasible decimation. People (can) rely on that. Not needing\ncomma's is a smartphone that doesn't need a manual. Otherwise we'd have to\nexplain in the manual: We know the 10 most popular package managers use\nspace delimited package lists for batch installation, but we need a comma\nseparated list because [insert reason the user doesn't really care about]\n.\nEspecially if you promote Chocolatey as \"like apt-get\".\nI know, semantically \"like\" allows for variations. But that's not how\nthe world, users from the three most popular distro's that use apt-get, and\ngoogle, work.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/304#issuecomment-20126209\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. its actually pretty easy - \npowershell\n[parameter(Position=1, ValueFromRemainingArguments=$true)]\n  [string[]]$packageNames=@('')\nThe hard part is that I have naming conflicts with debug and verbose. So I either have to change the names, which I'm not going to do, or drop powershell in favor of c# calling powershell packages (which is in the plans anyway).\n. I have it working now, but I had to remove the two naming conflicts... and those need to stay in.\nFor reference: http://stackoverflow.com/questions/6870362/can-i-create-a-script-with-parameter-that-has-aliasdb-in-powershell\nand http://stackoverflow.com/questions/10536282/powershell-defining-the-verbose-switch-in-a-function\n. And you ask the twitters and the twitters provide... :) \nFixed in https://github.com/chocolatey/chocolatey/commit/6ca7ed1fe2d9f45fcfb3f84bbb2aa9811a544ff2\n. I didn't remove, I just moved them down... :) \nSo those things are still there.\n. cup chocolatey -pre and you have it... :)\n. That and I've been mulling over this guy for awhile in how I would see it implemented. :)\n. Also your sarcasm went a long way into me getting off of my duff and getting 'er done. :+1: \nWith my new job you should see a much faster response time...\n. Beauty of a prerelease. Those can go out all day and night so folks can play with them. And if they don't work, well it was a prerelase... ;)\n. yep... know what you are talking about @rismoney - will Mark Johnson's stuff not work for you? The offline installer piece?\n. It would go in the helpers\\functions dir - anything outside of that is considered not available to pkgs. If they use anything outside of that, it's not guaranteed to be there...\n. FYI - the packages doing this is fine, but it will eventually be part of Install-ChocolateyPortablePackage (vaporware at the moment) so it just happens behind the scenes.\n. Also, when I had this in my head, I'd always called it tools root so as not to confuse with the bin folder. not a big deal, just trying to figure out the naming :)\n. It's a convention. Just trying to figure out if it's the right convention or if it needs to be changed. Heck, we just changed the convention on .app / .tool to .install / .portable to convey the obvious. :)\n. It comes on the google group - https://groups.google.com/forum/#!topic/chocolatey/dxnOBFly3vU\n. Not sure... That's interesting. What is upstream for you?\n. I tend to use rebase to keep my commits at the top before I push them back to the remote repo.\nBut what you are doing should work... should. ;)\n. Closing as #359 has been accepted.\n. This sounds pretty solid. It might be a version or two before we get to this though.\n. Like I suggested, what we need first is a way to pass a universal switch to chocolatey for directory to install has to happen first and then packages will need to buy into that some.\n. Seems like you could have an internal fork of chocolatey where you make that change right in the first lines of chocolatey.ps1 :)\n. At least as stop gap. It would be really easy to make the change here but I'm reluctant as the really easy changes is what has kept around the POSH version for two years past it's usefulness.\n. This partially closes #647.\n. Bad Example - papercut IS now maintained by the author - http://papercut.codeplex.com/discussions/251360\n. But I get what you are saying - you need to reach out to the pkg maintainers on chocolatey.org through the contact owners link. If you don't hear back from them within a week followup with an abuse report. If you don't hear back, follow up with an email to the chocolatey google group. This triage process is published on the google group, but probably needs to be published on the wiki as well.\n. https://github.com/chocolatey/chocolatey/wiki/PackageTriageProcess\n. Are we good to close this guy?\n. Also updated http://devlicio.us/blogs/rob_reynolds/archive/2013/01/03/chocolatey-automatic-packages.aspx\n. In older versions of nuget.exe, it would bubble up false errors back to chocolatey (like when you asked it to install something you already had installed and it noop-ed). \nIf that is out of the current, then I'm fine with us looking at @rismoney's issue #210 - which this could be considered a duplicate of. We'll reference this in 210 and close this issue. Thanks! \n. Sometimes it's cinst [package] -pre (just like the website states). If you are upgrading perhaps we should add this as well to the commands you can call.\n. This enhancement goes on https://github.com/chocolatey/chocolatey.org\n. That right there should go to it's own issue. Thanks! \n. Thank you. This is likely the same thing that Katherine has been talking about. It's a strange issue that seems to go away if you use -debug (so it's extremely hard to detect WHAT is causing it).\n. Like it... :)\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\nOn Tue, Jul 2, 2013 at 8:48 AM, Redsandro notifications@github.com wrote:\n\nThis works\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/312#issuecomment-20346246\n.\n. Boo, we'll switch to write-output all at the same time... right now it's write-host and we have a function that is overriding the default write-host, so we'd like to see that stay for now.\n. You would need to know natively what the install arguments are that you would pass to each installer to do this. It is not a trivial task for us to handle this with chocolatey and a universal switch as each installer could do it differently, but it is on our list: #32 \n. Well that's kind of what we are planning on doing. A universal switch for users to pass and on the back end each different type of installer would get passed the proper args.\n. Not arguing that at all. That's a different thing and we definitely need\nthat as well.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\nOn Wed, Jul 10, 2013 at 7:32 AM, Rich Siegel notifications@github.comwrote:\n\nwe would still want customized parameters that can be created by the\npackage owner, than could then be queried through a common syntax. perhaps\nlisted through an xml tag in nuspec\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/314#issuecomment-20746056\n.\n. Yes go for it. And close this when done.\n. Aliases are super awesome in theory, I have not worked it out in my head how it will work out once the package comes down to a user's machine.\n. It's a guideline, not a standard. ;)\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\nOn Tue, Jul 23, 2013 at 6:42 AM, Rich Siegel notifications@github.comwrote:\n\nPersonally I use camelcase for id. I like it to be poshy vs nixy. But I am\nambivalant on setting a standard on that.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/316#issuecomment-21408360\n.\n. Technically folks camelCase looks likeThis. PascalCase on the other hand\nlooks LikeThis. ;)\n\nOn Tuesday, September 3, 2013, TomOne wrote:\n\nBut standards are not bad if they are sensible. ;) I know no other package\nformat (except NuGet of course) which uses CamelCase for id.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/316#issuecomment-23742587\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. :+1:\n. need to also have a task on chocolatey.org\n. I updated my article. Do you want to update the wiki? Or did you already do that?\n. :+1: for documentation/guidelines!\n. There is a history. Its been this long across most projects on github\nwithout issue. Folks are generally well-behaved. Otherwise they might get\nbanned from github.\nOn Tuesday, July 23, 2013, TomOne wrote:\n\nThanks. Does that mean that I can add it to the Wiki?\nHmmm, I find it strange that every GitHub user can edit every Wiki without\nany moderation or inspection by the project members. This is in need of\nimprovement.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/318#issuecomment-21446813\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Thumbs up on documentation. :)\n. A documentation thing I forgot! There is one job for the meta and\n.install/.portable that it points to and one job for the\n.install/.portable. Those two jobs point to the .install and the\n.portable. So two jobs for three applications. I just add a line for the\nmeta in the before command of the other job that looks eerily similar to\nthe one you add for all jobs in ketarin settings.\nOn Friday, July 26, 2013, TomOne wrote:\n\nI discovered an issue when there are used three automatic packages for one\napplication (, .install and .portable).\nKetarin won\u2019t execute chocopkgup for the .install or .portable package\nbecause of the following reason:\nThe metapackage (called * here) must be configured to download the same\nfile as the .install or .portable package. Otherwise chocopkgup won\u2019t get\nexecuted for the metapackage. But this causes that the same file that would\nget downloaded for .install and *.portable already exists in the\nC:\\Chocolatey_work\\ folder.\nThen Ketarin recognizes that file and won\u2019t execute chocopkgup for either\n.install or .portable. This causes non-updating automatic packages.\nHowever, there exists a simple workaround for this issue: If two packages\ndownload the same file, these two files must be stored in different folders\nin order to have working automatic packages, for example\nC:\\Chocolatey_work\\install or C:\\Chocolatey_work\\portable.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/319\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Yes! That makes sense! :) \n. https://github.com/chocolatey/chocolatey/wiki/AutomaticPackages#notes-about-tri-packages-metavirtual-aka--install-and-portable\n. I agree and have thinking about this for awhile. There is update and upgrade. We are unfortunately incorrectly using the wrong terminology right now with update (we'll need to move this command to upgrade) and make cup call upgrade.\nThe problem that we have right now is the OData feed will only return a set number of results so we'll need to investigate a different way of getting those index files.\n. @FichteFoll We know it's a horrible implementation now. Hands are tied at the moment due to our usage of nuget.exe and it's limitations. We are moving past that though :)\n. Looks good! Ship it!\nOn Saturday, August 3, 2013, TomOne wrote:\n\nThere has been a lot of discussion of package localization:\n-\n   https://groups.google.com/forum/#!searchin/chocolatey/language/chocolatey/ua_yqZFtZps/54Uqr4tiw8IJ\n   -\n   https://groups.google.com/forum/#!searchin/chocolatey/language/chocolatey/oV9eqROohuM/FUIqfcdPIdwJ\n   -\n   https://groups.google.com/forum/#!searchin/chocolatey/language/chocolatey/7l_gFxoWiZQ/P6t_G4sXBXEJ\n- #233 https://github.com/chocolatey/chocolatey/issues/233\nI gained some experience about this topic and created some packages with\ni18n support or migrated existing ones.\nI think it\u2019s a good idea to have a section about this topic in the wiki. I\nwrote some paragraphs:\nhttps://github.com/TomOne/nugetpackages/wiki/Localization\nIs this suitable to add it to the wiki?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/321\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Don't we already have this as a patch? Or in the code?\nOn Monday, August 5, 2013, Justin Dearing wrote:\n\nBasically. this allows Get-ChocolateyWebFile to handle file:/// URIs.\nYou can merge this Pull Request by running\ngit pull https://github.com/zippy1981/chocolatey fileUriFixes\nOr view, comment on, or merge it at:\nhttps://github.com/chocolatey/chocolatey/pull/322\nCommit Summary\n- Get-ChocolateyWebFile now handles file:/// uris\n- Merge remote-tracking branch 'origin/master' into fileUriFixes\nFile Changes\nPatch Links:\n- https://github.com/chocolatey/chocolatey/pull/322.patch\n- https://github.com/chocolatey/chocolatey/pull/322.diff\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. I'm good with this...\n. This is done dfad346c1fd74a061423e86be9b8502ffd6306e9\n. Echo off stuff correct?\n. For this last year, IE8 and lower has been about 3% (about 9K visitors).\nIE is 11.58% (any version) of the visits, with Firefox at 19.85% and Chrome\nat 59.89%.\nSee images below:\n\n\n. how big is the plugin?\n. Well then I'm down for it if you want to send me a PR. :)\n. I do know how to do it in IIS/ASP.NET MVC\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\nOn Thu, Aug 15, 2013 at 10:32 AM, TomOne notifications@github.com wrote:\n\nGreat. I have good news for you. We don\u2019t even need SVGeezy. This plugin\nwas designed for folks who don\u2019t already have Mondernizr and jQuery\nintegrated in their pages, but chocolatey.org has them integrated. So\nModernizr can be used for feature detection and jQuery for DOM manupulation\nand the code becomes even simpler, without the need of SVGeezy:\nif (!Modernizr.svg) {\n    $('img[src$=\".svg\"]').each(function()\n    {\n        $(this).attr('src', $(this).attr('src').replace('.svg', '.png'));\n    });}\nI found this code on David Bushell\u2019s bloghttp://dbushell.com/2013/02/04/a-primer-to-front-end-svg-hacking/,\na guy who seems to be very interested into SVG. [image: :+1:]\nIn addition I played around with SVGZ. That is the gzipped format of SVG.\nSVG is highly compressible, because it contains a lot of redundant data\n(like HTML). I was very curious about the filesizes of SVG, SVGZ and PNG in\ncomparison. Therefore I generated some files:\nFile size in bytes, filename\n1141, git.svg http://walterbz.com/git.svg\n782, git-opt.svg http://walterbz.com/git-opt.svg\n437, git-opt.svgz http://walterbz.com/git-opt.svgz\n1699, git-opt-128px.png http://walterbz.com/git-opt-128px.png\n868, git-opt-48px.png http://walterbz.com/git-opt-48px.png\n56431, mixxx.svg http://walterbz.com/mixxx.svg\n16839, mixxx-opt.svg http://walterbz.com/mixxx-opt.svg\n2357, mixxx-opt.svgz http://walterbz.com/mixxx-opt.svgz\n5278, mixxx-opt-128px.png http://walterbz.com/mixxx-opt-128px.png\n1674, mixxx-opt-48px.png http://walterbz.com/mixxx-opt-48px.png\n28718, pyhoca-gui.svg http://walterbz.com/pyhoca-gui.svg\n12009, pyhoca-gui-opt.svg http://walterbz.com/pyhoca-gui-opt.svg\n3190, pyhoca-gui-opt.svgz http://walterbz.com/pyhoca-gui-opt.svgz\n16306, pyhoca-gui-opt-128px.pnghttp://walterbz.com/pyhoca-gui-opt-128px.png\n4067, pyhoca-gui-opt-48px.pnghttp://walterbz.com/pyhoca-gui-opt-48px.png\nDescription of these files with the example of git:\n- git.svg = original SVG file\n- git-opt-svg = optimized SVG file with SVGOhttps://github.com/svg/svgo,\n  a Node.js tool\n- git-opt.svgz = gzip compressed optimized SVG file\n- git-opt-128px.png = equivalent raster image with 128px, optimized\n  with optipng -o7\n- git-opt-48px.png = equivalent raster image with 48px, optimized with optipng\n  -o7\nAs you can see, SVGZ is clearly smaller than the raster version with\n128px, and in some cases even smaller than the 48px version. SVGZ is a very\ninteresting format, perfectly suitable to use it as package icons on\nchocolatey.org.\nHowever, SVGZ cannot be directly integrated in websites without an\nadditional step. The web server must be configured to tell the browser \u201chey\nthis is gzipped, you\u2019ll need to decompress this\u201d.\nThis can be done in Apache by adding this to the .htaccess file:\nSVG\nAddType image/svg+xml .svg .svgz\nAddEncoding x-gzip .svgz\nI don\u2019t know how to configure IIS to handle SVGZ properly, but you\ncertainly know it. It would be great if you could test it.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/324#issuecomment-22710733\n.\n. Yeah, don't install the nupkg directly. Source should be an\nhttp/folder/networkshare.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\nOn Sat, Aug 24, 2013 at 7:41 AM, Steven Kirk notifications@github.comwrote:\n\nWhenever I try to install anything I get the following error:\nUnable to read package from path\n'jquery.TypeScript.DefinitelyTyped.0.2.5.nupkg'\nThis started when I tried to update the jquery typescript package in\nVS2012, but it seems to have spread to chocolatey.\nAny idea how to debug/fix?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/325\n.\n. What is the command you are using? Please include exactly as you are\nspecifying it on the command line.\nThanks.\n\nOn Saturday, August 24, 2013, Steven Kirk wrote:\n\nSorry, I don't understand.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/325#issuecomment-23218020\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Okay, perfect. You have a 2.5 pkg in your nuget cache. Clear your cache and\nthen install the prerelease version of chocolatey.\nCup chocolatey -pre\nOn Sunday, August 25, 2013, Steven Kirk wrote:\n\nComplete input/output:\nPS C:\\Users\\Steven> cinst nodejs.install\nChocolatey (v0.9.8.20) is installing nodejs.install and dependencies. By\ninstalling you accept the license for nodejs.in\nstall and each dependency you are installing.\nUnable to read package from path\n'jquery.TypeScript.DefinitelyTyped.0.2.5.nupkg'.\nFinished installing 'nodejs.install' and dependencies - if errors not\nshown in console, none detected. Check log for err\nors if unsure.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/325#issuecomment-23226260\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. To explain further, there is a bug in nuget when u specfiy a source. I've\ncreated the issue for them to fix and have also used a workaround in the\nprerelease.\nOn Sunday, August 25, 2013, Rob Reynolds wrote:\n\nOkay, perfect. You have a 2.5 pkg in your nuget cache. Clear your cache\nand then install the prerelease version of chocolatey.\nCup chocolatey -pre\nOn Sunday, August 25, 2013, Steven Kirk wrote:\n\nComplete input/output:\nPS C:\\Users\\Steven> cinst nodejs.install\nChocolatey (v0.9.8.20) is installing nodejs.install and dependencies. By\ninstalling you accept the license for nodejs.in\nstall and each dependency you are installing.\nUnable to read package from path\n'jquery.TypeScript.DefinitelyTyped.0.2.5.nupkg'.\nFinished installing 'nodejs.install' and dependencies - if errors not\nshown in console, none detected. Check log for err\nors if unsure.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/325#issuecomment-23226260\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. This is something I think we can add pretty easily. :)\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\nOn Sat, Aug 24, 2013 at 8:50 AM, Alonisser notifications@github.com wrote:\n\nsomething along what 'pip install' does in python;\nYou must give at least one requirement to install\nInstead with chocolatey I've got a very long batch/powershell screen I got:\nFinished installing '' and dependencies\nwhich is clearly a mistake, and I could totally miss it because of all the\nworking fanfare, commands running etc.\nI just came back into trying chocolatey, and now after being much more\nconsole savvy it serves me great. keep on the good work!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/326\n.\n. This is fixed in 2db80fa929491c7b38ef6ca329782f8f11b11b3c\n. Awesome, thanks!\n. I ended up adding this functionality here 2db80fa929491c7b38ef6ca329782f8f11b11b3c\n. imagemagick-6.8.6-1 would be what you were actually suggesting (I hope). If you read that, ubuntu packages are built on top of debian, so you already have the debian package version on there with -1 right before ubuntu6 (where six is the ubuntu package version). \n\nI think ultimately we can find something more flexible. Along these lines I could see something like sometool.1.2.3-prereleaseinfo(1) or something like that. I am not a fan of that yet, just thinking out loud.\n. > What if the software itself already uses four dot-separated segments for its version and you need to fix the package? If you have for example a software version 2.5.8.1, you are forced to alter the last segment, so the original software version information gets destroyed: 2.5.8.20140327. Then, for all the following packages of version 2.5.8.x, you are forced to use the current date as last segment, even if the affected package does not actually fix a previous package revision. You would have to wait until the packaged software gets released with version 2.5.9.x to be able to drop the date in the last segment and use the real software version again. So here an essential information is removed just because of a senseless restriction.\nActually you can get creative here. It's not suggested to do this in the fourth segment if it is used. Look at the ruby package. 1.9.3.392 becomes 1.9.3.39200 and the next release is 1.9.3.39201. It's not perfect and yes we should look at enhancing stuff like that. Where do you see this in terms of priority? \n. Fixed in 8d10898b682e03cefa02123b404397a34580f778\n. @Gab-km I think for me, the username is a requirement. While we hope people also have a password that is not empty, can you think of any cases where someone might have it set empty? I can't off the top of my head so having it required would also be helpful\n. The interesting thing here is easy_install is supported already with\n-source python.\nNot sure if you realized that. With Windows easy install used to fail less\noften than pip. Is this still the case?\nOn Wednesday, September 11, 2013, jmenchacavr wrote:\n\nLike Ruby gems, there's Python pip. This is a request to add such support.\nSome example commands:\nchocolatey pip packageName\ncpip packageName\ncinst packageName -source python\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/333\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Well we already have easy_install with -source python.\nSo if the question is to add -source pythonpip as well, I think we can just update this issue\n. +1\nOn Wednesday, September 11, 2013, Matt Wrock wrote:\n\n\"Windows Feature\" is somewhat of a thing in windows speak. For example the\n'Turn Windows Features On and Off\" GUI. However I wouldn't say it is by any\nmeans official and I definitely see your point. We would want to implement\nthis so that both terms are accepted to support backwards compatibility.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/334#issuecomment-24272214\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Interesting...not quite grokking what we want out of this yet though\n. By the way, this is awesome. Did you see the normal process that we ask for contributors to look at?  https://github.com/chocolatey/chocolatey/blob/master/CONTRIBUTING.md\nWe'd like to work to get some unit tests in here to verify the functionality of this request.\n. I like this code, there is technically nothing wrong with it, but the PR (pull request) was submitted from the master branch. Can you review the document I referenced and resubmit this PR under a feature branch? Thanks!\n. I think NPM works well on WIndows...\n. I'm not really on the fence here. I think it would be one we would integrate with just fine. :)\n. really....\n. What is your source? Is it proget? I just had an issue filed that mentioned\npackage id / title differences\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\nOn Thu, Sep 19, 2013 at 5:26 AM, mawl notifications@github.com wrote:\n\nmy commandline shows:\nC:\\Users\\Administrator>clist mycompany\nmycompany.DevEnv 2013.9.19\nmycompany.MSBuild.targets 2013.9.18\nmycompany.VisualStudio2012Premium 11.0.1\nC:\\Users\\Administrator>clist mycompany.DevEnv\nNo packages found.\nC:\\Users\\Administrator>cver mycompany.DevEnv\nfound : 2013.9.18\nname : mycompany.DevEnv\nlatestCompare : 000000000000\nverMessage : Your version is newer than the most recent. You must be\nsmarter than the average bear...\nlatest : {}\nfoundCompare : 000000002013.000000000009.000000000018\nchocolatey version 0.9.8.20\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/339\n.\n. For MSI the uninstall is msiexec /x [productname.msi|productcode]\n\nWe were thinking of storing the product code on install so it would be available without a need for a chocolateyUninstall.ps1 file.  Is this what you were thinking Anthony?\n. Now you are talking more about the moderation rules engine I have been\nthinking about for awhile. :)\nOn Saturday, December 7, 2013, Matt Wrock wrote:\n\nI agree with @gep13 https://github.com/gep13 that encouraging users to\nuse a myget feed for personal packages is the way to go. As far as the\neducational process, certainly including the guidelines in the confirmation\nemail or at least a link is a great idea, but might also consider checking\nconventions at push time. While we could not know for sure if a user is\npushing a personalized package, we could look for dot notation that does\nnot include the standard prefixes and then prompt the user with something\nlike, \"This might not be a package intended for public assumption, personal\npackages are best kept on other feds like myget. Are you sure you want to\npush this package?\"\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/342#issuecomment-30058155\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. That's funny right there...\nOn Saturday, December 7, 2013, Gary Ewan Park wrote:\n\nDoes the Chocolatey Gallery, which comes from the Nuget Gallery, provide a\nlot of moderation capabilities? Or is this something that will have to be\nbuilt in?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/342#issuecomment-30065185\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. There is nothing that keeps chocolatey from inspecting an already built package and attempting to do many of these things before it allows a package to be available to consumers.\n. Nothing but rolling up some sleeves and getting to work that is.\n. It's actually a both kind of thing. There would be a certain set of\nelements that would be run locally. Then a much bigger set that would\noverlap the local set (in case of client funny business) and run on the\nserver.\nAnother way to think about it is unit tests versus integration tests.\nLocally we run some smoke checks and some validation of common issues.\nOn the server we let the package through but hold it until it passes more\nextensive validation rules.\nThe whole idea is a business rules engine that is based on a validation\nlibrary I've written in the past. I just have to dig it out, brush it off\nand ensure it's all up to date.\nOn Tue, Dec 10, 2013 at 11:57 AM, Gary Ewan Park\nnotifications@github.comwrote:\n\nWould this be a case of executing some checks during the cpack command,\nand then have it fail if something goes wrong, or would this be done on the\nChocolatey.org server once the package has been uploaded to the server? Or\nboth?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/342#issuecomment-30251496\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. The script looks cool as well, but I don't like that it starts out positive\n($passed=$true) and only gets set $false if it finds issues. Usually I\nassume failure unless the scenario tells me otherwise.\nOn Tue, Dec 10, 2013 at 1:56 PM, Gary Ewan Park notifications@github.comwrote:\n\nside note... @mwrock https://github.com/mwrock wrt to that script\nblock, which looks amazing, do those names assume that a Hyper-V VM exists\nwith that name? If it is not there, what does it do? I think you mentioned\nbefore that the VM would be created, but how does it know which iso to use\nwhen creating it?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/342#issuecomment-30261960\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. The plan is to start adding more moderators this year for fun stuff like\nthis.\nOn Wed, Apr 16, 2014 at 5:42 PM, Sander notifications@github.com wrote:\n\nConcerning the packages that are similar because owners don't respond and\nsomeone else decides to upload a newer version under a different name:\nMaybe there should be a small group of moderators with the power to take\nover packages, remove the install script, add a dependency to the new\npackage, or add the new package owner to the old package (to keep the\nsensible name).\nI wanted to install Visual Studio for someone the other day, and there are\nlike 40 packages. No idea which one I need. Maybe it's a bad example, but I\nhad something like this before with some SQL implementation, and I remember\nhaving to compare versions, and guess which one I should install.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/342?utm_campaign=website&utm_source=sendgrid.com&utm_medium=email#issuecomment-40661480\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. It is possible to do so with myget (copy them anyway)\n. There is an easier fix, which is package moderation. Reject anything that doesn't meet the guidelines. Then like all of us are thinking, build it back into choco.exe during packaging and onto the server as package inspection rules to automatically reject packages that are not up to snuff.\n. :)\n. > And as I said before, a poor solution in practice is infinitely better than a perfect solution in theory.\nI've said something very similar to this many a time. :+1: \nA working solution is always better than a perfect solution that is not ready. (I mean, just look at chocolatey itself as an example of this in practice :/)\n. @rismoney The working implementation of chocolatey vPosh is a working solution, nowhere near perfect. I mean just look at all the issues, man! :)\nThe really good solution of chocolatey vNative Exe is going to be worlds closer to stable.\n. PLease let me know if this is true of the prerelease... \ncup chocolatey -pre\nWe've added better support for exit codes and that will be released soon.\n. Interesting, so did the first command return or just sit there?\n. Looking at this again, I wonder if there are some missing path items as you are going to cmd from bash. By the way, install the prerelease and you should be able to stay in bash and run chocolatey commands.\n. Correct me if I'm wrong but the OP is asking for this requirement when\nspecifying a package to install (user use case), not when taking a\ndependency on another package (creator use case).\nOn Thursday, October 24, 2013, Steve E wrote:\n\nIs there any reason for the install of the package manually versus relying\non the NuSpec dependencies? If you listed the package as a dependency with\na constraint on the version I would think it should fit the need. It's\npossible by having the dependencies node look something like this:\n<dependencies>\n        <dependency id=\"ruby\" version=\"[1, 2)\" />\n    </dependencies>\nThis means that you require Ruby >= 1 and < 2 (so all updates and minor\npatches up until, and not including, version 2).\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/346#issuecomment-27014735\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. @jberezanski I think that would work fine but would need some testing - if someone had a meta package installed named resharper7.x that took a dependency on resharper, it may keep it at 7, but it may not... worth some testing in the new codebase.\n. This is completed\n. Yes, just mention that it contains code from the other, which I believe you\ndid.\nOn Saturday, October 12, 2013, Rich Siegel wrote:\n\n@ferventcoder https://github.com/ferventcoder - is this alright for me\nto do? I rebased and branched #273https://github.com/chocolatey/chocolatey/pull/273but preserved the authorship...\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/348#issuecomment-26198265\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. What Gary said... :)\nOn Sunday, October 13, 2013, Glenn Block wrote:\n\nOK Gary, I'll test that out, thanks!\nOn Sun, Oct 13, 2013 at 5:09 PM, Gary Ewan Park >wrote:\n\nHello,\nAre you running the pre release version of chocolatey? I believe that\nthis\nis taken care of already.\nTry cup chocolatey -pre to try out the new bits.\nGary\nSent from my Windows Phone\n\nFrom: Glenn Block>\nSent: 13/10/2013 23:38\nTo: chocolatey/chocolatey>\nSubject: [chocolatey] Remove the reopen the terminal when installing\n(#350)\nCurrently whenever I install with chocolatey I need to reopen my\nterminal\nwindows, as it adds a new variable to the path.\nnpm doesn't require this as it has a central folder which is in the path\nwhich cmd files are added to for each global module. uninstalling\nremoves\nthe cmd from that location.\nthe cmd in this case would change to the directory where the chocolatey\napp is installed and run it passing in any args.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/issues/350\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/chocolatey/chocolatey/issues/350#issuecomment-26230388>\n.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/350#issuecomment-26231058\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Old one that is fixed. This may have been fixed already...\n. It's unfortunately the way powershell works. You can force powershell to acknowledge quotes with `\"\n. This could also be considered a bug as well.\n. I'm not sure if this is still an issue on new choco or not.\n. I think while the two things being discussed are related, they are slightly different. The related part is surrounding OS and dependencies. The part that is different is that one decides whether the package should be installed or not and the other decides what specifically would be installed per OS.\nAm I catching the differences appropriately?\n. The check that @mwrock does for the existence of the framework should be done in a separate package named solely for .net framework 3.5. I think we can agree on that. \nWe can either go - \"Packages - its packages all the way down.\" or build in dependency types that are not necessarily package related. \n. This seems to duplicate #172 \n. @grv87 if you are using configuration managers sure. :)\n. Let's start by posting to the email list and not the issues list. :) \nhttp://groups.google.com/group/chocolatey\n. Like it\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\nOn Sat, Oct 26, 2013 at 12:09 PM, TomOne notifications@github.com wrote:\n\nAwesome [image: :+1:]\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/355#issuecomment-27150636\n.\n. Moderation will fix quite a bit of the issues as long as moderators are all\non the same page. I'll need a nice team of folks who can help with the\nduties of package moderation.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\nOn Sat, Oct 26, 2013 at 3:44 PM, TomOne notifications@github.com wrote:\n\n@Redsandro https://github.com/Redsandro, actually only .portable and\n.install are official suffixes. The are essential to understand what the\npackage contains. I suggested them a few months ago and they were accepted.\nThe other suffixes are deprecated, but obviously older packages still use\nthem. And there are still folks which ignore the rules and guidelines in\nthe wiki and use the deprecated suffixes. This problem will never be solved\nuntil chocolatey packages get inspected by moderators before they get\npublished.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/355#issuecomment-27155409\n.\n. The thought here is that if there were two parts available, an archive and\nthe full installer, you would create three packages. So firefox,\nfirefox.install and firefox.portable. Firefox would point to\nfirefox.install.\n\nIn the future firefox becomes a kind of virtual package so that folks can\ntake dependencies on firefox and either the .install or the .portable would\nfulfill this requirement.\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\nOn Sat, Oct 26, 2013 at 3:53 PM, Redsandro notifications@github.com wrote:\n\n@TomOne https://github.com/TomOne Isn't .install the default/obvious\nway to go? I understand .portable but appending .install to pretty much\nevery package is pretty silly in my golden opinion.\nI discovered Chocolatey when googling apt-get for windows. apt-get is\nintuitive. Both apt-get and cinst can do cinst firefox freefilesync\nlibreoffice now.\nBut do I understand you correctly that this would be cinst\nfirefox.install freefilesync.install libreoffice.install in the future?\nThat would be kinda retarded.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/355#issuecomment-27155583\n.\n. yeah, I'm down with that.\n. This is interesting, but not something we are currently focusing on.\nSomeone could come up with a set of extensions that would enhance\nchocolatey to do this. Or it could be a possible direction in the future\n(after v1 and likely after v2).\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\nOn Sat, Oct 26, 2013 at 1:51 PM, Gary Ewan Park notifications@github.comwrote:\n\nHey,\nFor development purposes, there is a PowerShell script which allows you to\nside load a compiled application, but I don't think that the would work for\napp directly from the store.\nIn the Windows Phone eco system, there is an application that you can\ninstall that will run off and install all applications that you used to\nhave on your phone. This is really useful for installing all apps when you\nget a new phone. Would be interesting to see how this was done, to see if\nsomething similar is possible in Windows 8, and 8.1.\nGiven the sandboxing of applications that Microsoft is trying to achieve,\nI can see that this might be a non starter.\nGary\nSent from my Windows Phone\n\nFrom: Redsandromailto:notifications@github.com\nSent: 26/10/2013 18:26\nTo: chocolatey/chocolateymailto:chocolatey@noreply.github.com\nSubject: [chocolatey] Package/install stuff from the Windows Store (#356)\nMore and more interesting stuff is available for the Metro tile\ninterface for Windows 8 in the Windows Store. For instance Netflix,\nto name a popular one.\nIs it at all possible to install apps from the Windows Store using power\nscript? If so, maybe this should be a template or Chocolatey function.\nI have no clue at all how this works under the hood, but you need to be\nlogged in with your Windows Live ID to be able to install apps. So the\nscript would probably need to check if you are logged in.\nBut, this is of course total bull*, MS just wants to keep track of things.\nApps can run perfectly fine without knowing who is running it. So it would\nbe totally super awesome sweet if we could actually install apps for users\nwithout a Live ID.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/issues/356\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/356#issuecomment-27152930\n.\n. Duplicate of #154\n. WTF on number 2?\n. I see the first one sometimes yes. I am still trying to figure out what causes it.\n. Oh crap...there it is...\n. Well, that's some seriously bad juju.\n. Just removed the beta. Going to have to dig into what is causing it to just exit.\n. https://github.com/chocolatey/chocolatey/commit/b165510f323c202028c12e913e909b0419fef733 This is what caused it.\n. @rismoney will the exit code come all the way out with out the call?\n. exit /b %ERRORLEVEL% should get us the same result?\n. No, call \"chocolatey.cmd\" %*\nWill always return the help text of call when you pass it /? Instead of\npassing the arguments through to the command. Its pretty sh-tty if you ask\nme but its an issue we'll have to get past. Cmd /c works and comes out with\nthe proper exit code.\n\nOn Monday, October 28, 2013, Rich Siegel wrote:\n\nYou suspect L11 in chocolatey cmd as its missing /b?\nExit /b if run inside script shouldn't Close windows...only exit script.\nNot near a pc but I will check out asap\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/358#issuecomment-27269552\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Yeah, I got cmd /c to work properly, so I'm moving forward with that today.\n. @rismoney it doesn't work. I already tried that <- treating it as 1 arg makes it fail with finding the path to chocolatey.cmd /?.\nAh windows...super ~~aweful~~ awesome!\n. Including a link to that SO post would be super helpful. My google fu failed me last night on trying to find it.\n. Cinst chocolatey -version theversionyouwant\nOn Monday, November 4, 2013, Redsandro wrote:\n\nHow can I downgrade to the alpha from august? (latest after the beta was\ntaken down)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/358#issuecomment-27727173\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. This should be resolved in 0.9.8.21+\n. What was the original that this came in?\n. I have not reproduced this yet.\n. Nevermind. This was due to unsupported replacement of the included nuget.exe file.\n. This is a known issue, fixed in the upcoming release.\nhttps://github.com/chocolatey/chocolatey/issues/303\nOn Tuesday, November 5, 2013, Kerem wrote:\n\nC:>cinst sysinternals\nChocolatey (v0.9.8.20) is installing sysinternals and dependencies. By\ninstalling you accept the license for sysinternals and each dependency you\nare installing.\nThe schema version of 'Fody' is incompatible with version 2.1.31022.9038\nof NuGet. Please upgrade NuGet to the latest version from\nhttp://go.microsoft.com/fwlink/?LinkId=213942\nhttp://go.microsoft.com/fwlink/?LinkId=213942.\nHow to update nuget from chocolatey? I already have nuget 2.7.40911.287.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/363\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Duplicates #303 \n. Check out the thread for the workaround\n. Actually I was incorrect. It does wait for the process to finish.\n. cinst chocolatey -version 0.9.8.22-alpha1\n. Even with batched redirect files.\n. If you've installed anything with 0.9.8.21 you might consider reinstalling them with 0.9.8.22.\n. Fixed in a30342c3623647e80ac6f9bd8beaa4e088543548\n. This was fixed, but with the newer location in the search path it appears broken again. So #510 has been added to address the fixes.\n. @Redsandro sorry for not catching you on this here - shims are exe files which simply act to pass through information.\n. Yeah, sorry I meant to put a note back in here when I released the alpha. What Gary said.\n. @mlt This is interesting. It should not be the case. It should be the same amount of quotation as normal from command line calls to sumatra. What do you need for that from your shell and what are you seeing that you need when you call the shimgen version? \n. Well that is definitely incorrect behavior. Let's get to the bottom of\nthis. Can you tell me what your output is when you type\nwhere sumatrapdf\nOn Thursday, March 13, 2014, Mikhail Titov notifications@github.com wrote:\n\nI feel like it removes one quotation level. For instance, I'd call real\nSumatraPDF \"some file.pdf\" however I have to SumatraPDF \"\"\"some file.pdf\"\"\"\nwith shim when running, e.g., from Far file manager in either case. It\nshould be similar to regular cmd.exe . I guess \"\" is treated as a single\nquote when passed down. I noticed that something is not right when pdf\nassociation quit working in my Emacs Org mode setup with Chocolatey version\nof Sumatra.\n\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/372#issuecomment-37603055\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. My wording in the first comment didn't make a whole lot of sense. I think you answered correctly though.\n. @mlt I'm thinking you may have Emacs looking for SumatraPDF before SumatraPDF.exe, which could cause the need for double quotation. A simple where/which query where sumatrapdf could prove this out followed by SumatraPDF.exe \"one set.pdf\". Can you provide those things?\n. @mlt I see it stripping off quotes. Let me see what I can do.\n. Right, but we need it to work in almost all cases. How will we be able to detect that it works without actually running the application in some controlled state and seeing if it errors due to an unfound library? That's why we're moving to a shim. Still provides really good functionality over batches with minimal issue.\n. @mlt we still support windows 2003 (and so does MS until 7/14/2015).\n. @georgehemmings This is done based on the call in the Win32 API, meaning Windows strips them out (http://stackoverflow.com/questions/9287812/backslash-and-quote-in-command-line-arguments & http://weblogs.asp.net/jgalloway/archive/2006/09/13/Command-Line-Confusion.aspx) - What I'll need to do is likely detect spaces and strap on quotes when found. Or just add quotes every time around arguments.\n. @mlt thanks for pointing out the console window appears. I think I have fixed that (but not yet released).\n. @mlt I have the spaces issue fixed. Should be a call like normal to that once you see the next beta/release go out.\n. This should be ready to go.\n. That's a really pretty image. :)\n. I am going to pull in #376 though.\n. cinst chocolatey -pre for most of the cool things I just did this weekend.\n. Not really a fan of 3 lines of output over the original 1 line. If there is a want for a reduction in output, there should be a nice middle point where we make the output nicer but also don't trade one line for three. Thoughts?\n. Okay, the example output you wanted to see helped sell it. Sometimes it's the visual that does the selling. :)\n. Found a bit cleaner method on this, so closing this.\n. Already out\nOn Sunday, March 2, 2014, Sander notifications@github.com wrote:\n\nCool. Will there be a preview this month?\nOn Mar 2, 2014 10:27 PM, \"Rob Reynolds\" notifications@github.com\u0002amp\u0003#106;\u0002amp\u0003#97;\u0002amp\u0003#118;\u0002amp\u0003#97;\u0002amp\u0003#115;\u0002amp\u0003#99;\u0002amp\u0003#114;\u0002amp\u0003#105;\u0002amp\u0003#112;\u0002amp\u0003#116;\u0002amp\u0003#58;\u0002amp\u0003#95;\u0002amp\u0003#101;\u0002amp\u0003#40;\u0002amp\u0003#37;\u0002amp\u0003#55;\u0002amp\u0003#66;\u0002amp\u0003#37;\u0002amp\u0003#55;\u0002amp\u0003#68;\u0002amp\u0003#44;\u0002amp\u0003#39;\u0002amp\u0003#99;\u0002amp\u0003#118;\u0002amp\u0003#109;\u0002amp\u0003#108;\u0002amp\u0003#39;\u0002amp\u0003#44;\u0002amp\u0003#39;\u0002amp\u0003#110;\u0002amp\u0003#111;\u0002amp\u0003#116;\u0002amp\u0003#105;\u0002amp\u0003#102;\u0002amp\u0003#105;\u0002amp\u0003#99;\u0002amp\u0003#97;\u0002amp\u0003#116;\u0002amp\u0003#105;\u0002amp\u0003#111;\u0002amp\u0003#110;\u0002amp\u0003#115;\u0002amp\u0003#64;\u0002amp\u0003#103;\u0002amp\u0003#105;\u0002amp\u0003#116;\u0002amp\u0003#104;\u0002amp\u0003#117;\u0002amp\u0003#98;\u0002amp\u0003#46;\u0002amp\u0003#99;\u0002amp\u0003#111;\u0002amp\u0003#109;\u0002amp\u0003#39;\u0002amp\u0003#41;\u0002amp\u0003#59;\nwrote:\n\nFound a bit cleaner method on this, so closing this.\n\nReply to this email directly or view it on GitHub<\nhttps://github.com/chocolatey/chocolatey/pull/375#issuecomment-36467621>\n.\n\n\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/375#issuecomment-36467693\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. That last couple of lines looks somewhat like Yum report summary.\n. The only thing I would change with the new output might be to list the\nfailed pkg names so one would nit have to crack open a log file just to\nfigure out what did not install.\nOn Saturday, December 21, 2013, Gary Ewan Park wrote:\n\nBy the way, I really like the suggestion for the new, trimmed, output.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/376#issuecomment-31072941\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. What do you think of this format?\n\nI had a good example to read while working on this. ;)\n. Right. :)\nColor is used on debug, error and warnings but haven't added colorization\nand bolding in the same info quite yet, but I have an idea how I can do it\nelegantly. Not yet sure if I can bold parts of a line and leave other parts\nnormal.\nOn Friday, April 18, 2014, Sander notifications@github.com wrote:\n\nTextually this is pretty awesome! [image: :thumbsup:]\nHowever, the color doesn't really add anything. And the text can be more\n80-friendly. So please allow me to comment on that:\n1. Using all the same color has no visual benefit. Alternate between\n   key information and verbose information (and successful information and\n   error information) with color and weight.\n2. Take care of the default console width, you don't want a sentence\n   wrap it's last two characters to the next line.\n   - Preferably, you don't want to wrap at all. You don't really have\n     to be polite and say please to the user when you can say it in one line. :)\nMockup:\n[image: image]https://cloud.githubusercontent.com/assets/1702193/2741881/b860a346-c6f6-11e3-93e9-f80cc86c0488.png\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/376#issuecomment-40806257\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Who said anything about powershell? You mught look at the image I pasted a\nleeetle more closely... ;)\nOn Friday, April 18, 2014, Sander notifications@github.com wrote:\n\nAh I already made a two-package mockup, shame to throw it away. So I'll\npaste it anyway.\nBut sounds cool. I'm not sure about anything PowerShell either, but it is\nsupported in Unix escape codes and I used to do that for curses text\noutput in python scripts for Linux. They could be run on Windows too, and\nit just displayed the bold text in the console. I have no idea if cursesdoes that or if the console just supports that natively.\n[image: image]https://cloud.githubusercontent.com/assets/1702193/2741972/b80c492e-c6f9-11e3-8f00-92fc3e1e0326.png\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/376#issuecomment-40806963\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Well I've only been talking about it since late 2011, ask @jeremydmiller.\n. A little better: \n\n. Roughly less than a month.\n. I added some messages to the end so you can see all the different logging:\n\nAlso with debugging:\n\n. And I forgot verbose, so here you go: \n\nBy the way, this is what that last set of code looks like (super clean, IMO):\nc#\nthis.Log().Debug(\"This is a normal debug message.\");\nthis.Log().Debug(ChocolateyLoggers.Important, \"This is an important debug message.\");\nthis.Log().Info(\"This is a normal message.\");\nthis.Log().Info(ChocolateyLoggers.Important, \"This is an important message.\");\nthis.Log().Warn(\"This is a normal warning.\");\nthis.Log().Warn(ChocolateyLoggers.Important, \"This is an important warning.\");\nthis.Log().Error(\"This is a normal error.\");\nthis.Log().Error(ChocolateyLoggers.Important, \"This is an important error.\");\nthis.Log().Fatal(\"This is a normal catastrophic error.\");\nthis.Log().Fatal(ChocolateyLoggers.Important, \"This is an important catastrophic error.\");\nthis.Log().Info(ChocolateyLoggers.Verbose, \"This is a verbose logging statement.\");\n. I added the code because I'm removing those lines now... ;)\n. Help system updates:\n\n. Of course I can update that a bit now that I have the better logging constructs in.\n. Module as well... First step is this\nOn Friday, April 18, 2014, Jakub Berezanski notifications@github.com\nwrote:\n\nThe new output formatting looks really nice, much more readable than\ncurrent Chocolatey output. But the fact that it comes from the new binary\nimplementation is even better news :)\nDo you plan on providing only an exe, or perhaps a PowerShell module as\nwell? Personally, I find it very convenient to be able to invoke\nchocolatey.ps1 directly from a PS script without paying the overhead of\nspawning a new process. PS cmdlets could also return objects as their\noutput, making processing that output in scripts much easier and more\nreliable.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/376#issuecomment-40826809\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. C#. Did I mention I'm also testing this on OSX?\nOn Friday, April 18, 2014, Sander notifications@github.com wrote:\n\nReally cool. What language is that?\n(those lines you removed) :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/376#issuecomment-40830631\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. It's more for system admins who want to build and push pkgs and not have to\nfire up a windows box. Push to their private pkg repos that is\nOn Friday, April 18, 2014, Sander notifications@github.com wrote:\n\nThat's probably cool but not something that will get me excited.\nNow we're going to get all these hipster packages polluting the feed.\nBesides, OSX is totally different in every way, how would that work?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/376#issuecomment-40851808\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Well how about this summer sometime?  .......Things always take longer than you hope.\n. Thanks google. :/\n. I should test this and possible pull it in. Do you know if that requires .net framework 4 or 4.5?\n. Note the fix of the double install folks.\n. If you call an installer, it will generate the ignore file automatically. That's where this was failing, when it tries to create one in a readonly share or something based on how this is being used.\n. The only time that a batch redirect would be created is if it doesn't get called during the chocolatey install process (which generates the ignore file)\n. choco list -localonly\nchoco list -lo\nThose are the fast ones. \nAlso just choco now outputs the version.\n. Thanks!\nOn Wednesday, November 27, 2013, Arca Artem wrote:\n\nCurrent implementation expands provided arguments and passes it as a\nsingle argument to the executable.\nYou can merge this Pull Request by running\ngit pull https://github.com/ArcaArtem/chocolatey master\nOr view, comment on, or merge it at:\nhttps://github.com/chocolatey/chocolatey/pull/383\nCommit Summary\n- Fix for multiple argument expansion under bash\nFile Changes\n- M src/functions/Generate-BinFile.ps1https://github.com/chocolatey/chocolatey/pull/383/files#diff-0(4)\nPatch Links:\n- https://github.com/chocolatey/chocolatey/pull/383.patch\n- https://github.com/chocolatey/chocolatey/pull/383.diff\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. @geraldcombs we can probably do something like that as well.\n. Fixed both items at b0e5fe6354254a926cf0c2b883c03e7f6160ebfe\n. This may or may not have been fixed in source... Thanks for adding the issue though.\n. so if you call C:\\Chocolatey\\chocolateyinstall\\nuget.exe pack .\\vifm\\vifm.nuspec -NoPackageAnalysis directly, what exit code do you get?\n. Awesome. If you want to take that a step further and provide the fix in a pull request with the tests to prove it, it gets pulled in quite a bit quicker. Also review the contributing guide https://github.com/chocolatey/chocolatey/blob/master/CONTRIBUTING.md\n. I would also need to look into why we commented that out.\n. Going back in time here....:\nhttps://github.com/chocolatey/chocolatey/blob/5525103c3269d9a5abf1e4c795fc057707fdcc6f/src/chocolatey.ps1#L547 and then blame leads to https://github.com/chocolatey/chocolatey/commit/317ffed2163ed49a63107c9542b73f1854f83f46#diff-11f8e3cf38099e79da8cf4d78b2edb4dR553 - it looks like it has been there since the beginning and it's beyond me why I did that at the time (other than nuget ALWAYS returning a bad exit code at that version). So with some testing it might be an okay change to make.\n. @codearoo Ha, looks like we hijacked this thread. I didn't even pay attention to what the main issue was that was reported.\n. I believe this is now fixed\n. try 'whoami && whoami' and from cmd.exe to see if it works, then follow up\nwith powershell. I don't expect it to work at all in a bash shell since it\nhas been stripping all single and double quotes. Note the docs did change\nto say to stop using double quotes and to just use single quotes as double\nquotes don't work very well in powershell.\nOn Wednesday, November 27, 2013, Jacob Krall wrote:\n\nb11af99https://github.com/chocolatey/chocolatey/commit/b11af99077a19a54ab006d82eebeea06d0ea76d4breaks any strings containing the character\n&:\nPS> plink -pw vagrant vagrant@192.168.137.193  \"whoami && whoami\"vagrantporos\\jacob\nNote that whoami ran on the remote host once, and on the local machine\nonce, because the string \"whoami && whoami\" is not making it all the way\nto plink.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/385\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Apologies, I did ask what would happen in the call from cmd.exe trying to\nisolate whether this is a powershell issue with the batch redirects or not.\nPowershell tends to strip off double quotes from calls, I've got about 10+\nhours testing this recently. Most calls were related to calling choco but\nthe stripping was already done by the time it hit the batch redirect.\nWith single quotes I was not seeing this behavior. Perhaps this is related\nto the environment I was testing this in, but there are some articles out\nthere that talk about how powershell does interesting stuff with quotes in\ngeneral and how you should use ` in front of them in calls to things so\nthat they are used literally and not stripped off.\nOn Wednesday, November 27, 2013, Jacob Krall wrote:\n\nplink -pw vagrant vagrant@192.168.137.193  'whoami && whoami'vagrantporos\\jacob\nSame results, because the strings \"whoami && whoami\" and 'whoami &&\nwhoami' are identical in PowerShell. I'm not sure what \"double quotes\ndon't work very well in powershell\" means - they work exactly as they were\ndesigned.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/385#issuecomment-29424953\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Also the next version deprecates the batch redirects in favor of shim exes\nfor better cross shell support.\nOn Wednesday, November 27, 2013, Rob Reynolds wrote:\n\nApologies, I did ask what would happen in the call from cmd.exe trying to\nisolate whether this is a powershell issue with the batch redirects or not.\nPowershell tends to strip off double quotes from calls, I've got about 10+\nhours testing this recently. Most calls were related to calling choco but\nthe stripping was already done by the time it hit the batch redirect.\nWith single quotes I was not seeing this behavior. Perhaps this is related\nto the environment I was testing this in, but there are some articles out\nthere that talk about how powershell does interesting stuff with quotes in\ngeneral and how you should use ` in front of them in calls to things so\nthat they are used literally and not stripped off.\nOn Wednesday, November 27, 2013, Jacob Krall wrote:\n\nplink -pw vagrant vagrant@192.168.137.193 'whoami && whoami'vagrantporos\\jacob\nSame results, because the strings \"whoami && whoami\" and 'whoami &&\nwhoami' are identical in PowerShell. I'm not sure what \"double quotes\ndon't work very well in powershell\" means - they work exactly as they were\ndesigned.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/385#issuecomment-29424953\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. It will be out this week. Just finishing up the cleanup of the batch redirects during update...\n. Tgere is a closed bug on this. What version of choco and can you run debug?\nOn Tuesday, December 3, 2013, Christian Watteng\u00e5rd wrote:\n\nI've been getting this error on a few packages lately.\nI have tried to search the issues for this bug but I havent found\nanything.\nWrite-Error : pdftk did not finish successfully. Boo to the chocolatey gods!\n[ERROR] Cannot bind argument to parameter 'Path' because it is an empty string.\nAt C:\\Chocolatey\\chocolateyinstall\\helpers\\functions\\Write-ChocolateyFailure.ps1:30 char:2\n-     Write-Error $errorMessage\n-     ~~~~~~~~~~~~~~~~~~~~~~~~~\n  - CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n  - FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nWrite-Error : Package 'pdftk v1.44' did not install successfully: Cannot bind argument to parameter 'Path' because it i s an empty string.\nAt C:\\Chocolatey\\chocolateyinstall\\functions\\Chocolatey-NuGet.ps1:90 char:17\n-                 Write-Error \"Package `'$installedPackageName v$installedPackageV ...\n- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  - CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n  - FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/386\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. This has almost the exact same title as #371 ;)\n. Use -debug as well when you report issues. :)\nOn Wed, Dec 4, 2013 at 3:58 AM, Jeroen Verhoeven\nnotifications@github.comwrote:\n\nI'm trying to cinst KickAssVim on my work PC and am having trouble doing\nthat. The install bails with a write error. And I'm not sure what the path\nis where the write error occurs.\nHere is the output:\nC:\\Users\\jverhoeven>cinst KickAssVim -force\nChocolatey (v0.9.8.23) is installing 'KickAssVim' and dependencies. By\ninstallin\ng you accept the license for 'KickAssVim' and each dependency you are\ninstalling\n.\n__ KickAssVim v7.3.0.07 ____\nWrite-Error : Package 'KickAssVim v7.3.0.07' did not install successfully:\nExce\nption calling \"GetFolder\" with \"1\" argument(s): \"Exception from HRESULT:\n0x800A\n004C (CTL_E_PATHNOTFOUND)\"\nAt C:\\Chocolatey\\chocolateyinstall\\functions\\Chocolatey-NuGet.ps1:90\nchar:28\n- Write-Error <<<< \"Package '$installedPackageName v$installe\n  dPackageVersion' did not install successfully:\n  $($_.Exception.Message)\"\n  - CategoryInfo : NotSpecified: (:) [Write-Error], WriteErrorExcep\n    tion\n  - FullyQualifiedErrorId :\n    Microsoft.PowerShell.Commands.WriteErrorExceptio n,Write-Error\nFinished installing 'KickAssVim' and dependencies - if errors not shown in\nconso\nle, none detected. Check log for errors if unsure.\nReading environment variables from registry. Please wait... Done.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/387\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. What was the issue?\n. In case there is something to follow up on and fix. :)\n. Sad...that's sad to look at. This happens because you are using the alias which is passing install or update to choco.\nSo what this means is we should either remove all aliases or search for those strings and do replacement. I'm in favor of deprecation of shortcuts.\n. Note that this is the transition phase... it has already begun. :)\n. choco is the ubiquitous term. It beat the rest of the possibilities...\n. The first is not a replace all, it's just a one line change. https://github.com/chocolatey/chocolatey.org/blob/master/chocolatey/Website/Views/Packages/DisplayPackage.cshtml#L98\nThe second is a change to an image. \n. This is a duplicate of #295. However that one has bad naming as compared to this one, so I will close it as a dupe of this.\n. This is really a duplicate of #6 (just FYI).\n. Installs are silent and scriptable, that doesn't mean other actions should also be (by default). That might be where you pass a switch to make it so.\nNote that the uninstall in choco at the moment is very naive, it doesn't do much without help.\nAnd to touch on @TomOne 's suggestion - I have been giving that alot of thought and I think we will move that way. Choco is 100% semver compliant (AKA no real rules for less than v1), so wild changes are still okay while we are working out how it should be for the release.\n. I'm not a fan of that as much as you are not (the nuget cache)....\n. @TomOne I agree. One needs to have a hash in the package so you know that the local is the same as the MD5 hash so you wouldn't have to download it again. Perhaps search and open an issue on this?\n. choco uninstall pkgname --all-versions\n. That's funny, someone else requested the autofocus... perhaps we add a key (it breaks vimium for me until I tab out of it).\n. A key like Alt+S to focus on the search box.\n. It supports package parameters but very naively. It doesn't send a param in\nthe way you would. It doesn't do an inspection of the\nchocolateyInstall.ps1, look and try to map the parameters to the file as it\ncomes into the script.\nWhat you pass to the package should be -params 'key=value;key2=value2'\n. Updated the documentation you referenced to reflect that $env:chocolateyPackageParameters will be a value that will contain these items \n. Right, as you parse the string out, you would convert the key value for the bool to a switch.\n. Was waiting for sysnative to come out.... \n. This looks good. I think we can pull it in just so. Thoughts @mwrock ??\n. New  at #393\n. Awesome! Thank you for doing that. This looks pretty clean and easy to pull\nin.\nOn Thursday, December 19, 2013, Julian Easterling wrote:\n\nRecently while creating a chocolatey package, I ran into an issue where\ntrying to install a windows feature would fail on my 64-bit windows\noperating system with a message saying that I could not use the 32-bit\nversion of DISM to manage features. The reason this was happening was\nbecause of the 32-bit redirection that occurs on a 64-bit operating system.\nI also found an issue (#378https://github.com/chocolatey/chocolatey/issues/378)\nthat seems to be related because either the DISM was not in the path or\nmore likely it was due to the lack of a new line between the closing curly\nbrace and the \"cmd\" and resulted in \"none\" of the code being executed in\nthe elevated shell.\nAfter reading the \"contributing\" document, I implemented the fix in a\nbranch and sent a new pull request.\nYou can merge this Pull Request by running\ngit pull https://github.com/dcjulian29/chocolatey dismIssue32bitOn64bit\nOr view, comment on, or merge it at:\nhttps://github.com/chocolatey/chocolatey/pull/393\nCommit Summary\n- Fixed Issue where the 32-bit DISM will be called on a 64-bit OS when\n  running a 32-bit shell/process\n- Fixed issue 378 where DISM is missing because of a missing newline\n  in the command passed to the elevated shell and by specifying the exact\n  path to the DISM tool instead of relying of the path of the system.\nFile Changes\n- M src/functions/Chocolatey-WindowsFeatures.ps1https://github.com/chocolatey/chocolatey/pull/393/files#diff-0(16)\nPatch Links:\n- https://github.com/chocolatey/chocolatey/pull/393.patch\n- https://github.com/chocolatey/chocolatey/pull/393.diff\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. This looks good for rebasing into stable :+1:\n. Thanks, this has been merged into stable.\n. Some good discussion on #643 \n. Hmmm, and the other one is not as slow?\n. That's interesting (the PS code)\n. Yeah, I think we need to pull this in\n. Yeah, methinks we should do something like this:\nhttps://github.com/ferventcoder/vagrant-windows-puppet/blob/master/boxes/shared/shell/InstallNet4.ps1\nOn Sun, Dec 29, 2013 at 8:45 PM, Matt Wrock notifications@github.comwrote:\n\nAhh. This is because Chocolatey uses th WebPI installer for .net 4 which\nin addition to installing .net 4 also sets up asp.net and there by sets\nup IIS\nChocolatey does not need this. Clients like 2008R2 that do not have .net4\ninstalled do need .Net4 to work with Nuget.exe but nothing more. I think it\nwould be a good idea to replace the webpi installer with the vanilla MSI\ninstall of of 4.0 or 4.5.1 or at least 4.5.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/399#issuecomment-31331486\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. +1 to what Matt said. Prefer more control over what gets installed and more importantly, what doesn't get installed.\n. I'm not sure anyone does....\n. Yes, check out #6 I believe. The uninstall is not done, its still very\nnaive.\nOn Saturday, January 4, 2014, lexxmark wrote:\n\nI added winflexbison package recently and noticed an issue with package\nuninstalling.\nWhen I invoked \"cuninst winflexbison\" command the shell wrappers for\nexecutable files were not deleted.\nHow to reproduce:\n1. Install package \"cinst winflexbison\"\n2. There is new folder in C:\\Chocolatey\\lib\\ and shell and bat wrappers in\nC:\\Chocolatey\\bin\\\n3. Uninstall package \"cuninst winflexbison\"\n4. The winflexbison folder in C:\\Chocolatey\\lib\\ is deleted as expected.\nBut wrappers in C:\\Chocolatey\\bin\\ are still present.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/400\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. It's #6\n. Note my comment about it being naive (aka not fully implemented)\n. This should be fixed as part of 0.9.8.24\n. Thanks. I think we can pull this in.\n. So this is a fluke... I noticed that we had a couple of folks report this on the mailing list as well.\nhttps://groups.google.com/d/msgid/chocolatey/c7f05386-d37b-4e87-89b8-24956857ccb3%40googlegroups.com\n. I'm not sure that your error has the same causation as those from a couple of years ago. The 7za.exe and choco come from https://chocolatey.org now.\n. @jnm2 Can you log this recent issue to choco instead of this repository?\n. What version of chocolatey are you using? \n. What does the following produce?\nchoco sources \nAre you behind a proxy/firewall?\n. @evanw21 many times the problem is getting the install.ps1 downloaded in the first place... then everything after that as well.\n. @youRFate ~~I think your issue is related, but not exactly the same as the original discussion.~~ (Update, I reread and this is the same). Please follow this issue so you know when it is corrected - https://github.com/chocolatey/choco/issues/243\nThanks! \n. Closing this issue as it has moved to choco\n. I would subscribe to that issue so that you receive notifications on it. Thanks!\n. :)\n. Undocumented means unsupported ;) \n. AKA dark features. Actually I think this is probably undocumented b/c it's something we may have missed documenting... :(\n. @AnthonyMastrean Did I miss the PR? \n. I'm going to bump this to the next version while waiting for updates.\n. Migrated to https://github.com/chocolatey/choco/issues/676\n. Binaries like DLLs? \n. And when you say a solution for chocolatey to put things on the %PATH% you mean something like this - https://github.com/chocolatey/chocolatey/wiki/HelpersInstallChocolateyPath ? Or something different?\n. I am a little confused. PSFTP.exe is added to as a batch redirect. I think you might be looking at an older package version?\n. Ah! Understood completely. But you see PSFTP.exe is the shim that is added to c:\\chocolatey\\bin for me. ;)\nHave a look at this feature - https://github.com/chocolatey/chocolatey/issues/372\n. Batch redirects are a POS solution that don't work that well with other shells like cygwin/bash.\n. I was letting another of our group handle the beta release for the new version. Let's find out where @gep13 is on that... \n. Which was the harsh reply? ;)  IOW, no worries. \n. No worries. \n. Might give me a little more time to get the install replacing all of the batch redirects part done so I can close out #372.\n. This is in reference to a recent conversation we had on the mailing list.\nThis is to help folks not have to parse output to find the version.\nOn Sunday, January 26, 2014, Gary Ewan Park notifications@github.com\nwrote:\n\nHello,\nBy executing the following:\nchoco\nYou will get an output similar to the following:\nPlease run chocolatey /? or chocolatey help - chocolatey v0.9.8.23\nFrom which you can get the current installed version of Chocolatey.\nHope that helps!\nGary\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/409#issuecomment-33317958\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. No worries\nOn Mon, Jan 27, 2014 at 1:06 AM, Gary Ewan Park notifications@github.comwrote:\n\nYeah, I saw this:\nhttps://groups.google.com/forum/#!topic/chocolatey/3RJ-9pCGXyA\nAfter I read this enhancement request. I guess I work in a different order\n:-)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/409#issuecomment-33345640\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. No, I don't believe you are. The feature is quite naive. \n. Closing this as dupe of #134 as the feature isn't considered done.\n. Closed as code is merged in\n. That is fixed in vNext which we should have a beta coming out soon for\n. The homepage has an installer link - which directs you to that page. Perhaps the actual issue is not what the subject suggests?\n. Good workaround, but don't depend on it. I think what you noted above should be the default, so :+1: \n. How does this look? \nThis uses limitoutput option (-r) to keep the information relevant. false at the end tells you whether it is pinned or not:\ncmd\nc:\\> choco upgrade all --noop -r\nlinqpad|2.46.09|4.51.03|false\ngrepwin|1.6.1|1.6.6|false\nvim|7.4.27|7.4.560|false\nsumatrapdf.commandline|2.5.2|3.0|false\nnotepadplusplus.install|6.7.3|6.7.4|false\nmingw|4.8.1.20140107|4.8.3.20141208|false\n1password|1.0.9.341|4.1.0.530|false\nnotepadplusplus.commandline|6.7.2|6.7.4|false\nPowerShell|4.0.20140915|4.0.20141001|false\nautohotkey|1.1.16.05|1.1.19.02|false\nwebpicommandline|7.1.40719.0|7.1.50430.0|false\nchocolatey.server|0.1.0|0.1.1|false\nwincommandpaste|1.0.6|1.0.8|false\ngit|1.9.4|1.9.5.20150114|false\njavaruntime|7.0.51|7.0.75|false\ngitextensions|2.47.3|2.48.03|false\nfiddler|2.4.5.3|2.4.9.8|false\nVirtualCloneDrive|5.4.6.20130920|5.4.7.0|false\nChocolateyPackageUpdater|0.6.2.0|0.6.4.0|false\ngit.commandline|1.9.4|1.9.5|false\nTestDriven.Net|3.3.2779|3.5.2830|false\nDotNet3.5|3.5|3.5.20140403|false\nresharper|8.0.2000.2660|9.0.1|false\nyumi|2.0.0.8|2.0.1.5|false\nnotepadplusplus|6.7.3|6.7.4|false\nautohotkey.install|1.1.16.05|1.1.19.02|false\npapercut|2013.6.10.2|2014.11.5|false\npuppet|3.7.0|3.7.4|false\nccleaner|4.17.4808|5.02.5101|false\nkeepass.portable|2.27|2.28|false\nsumatrapdf|2.5.2|3.0|false\npip|1.1.1|1.2.0|false\nruby.devkit|4.5.2.20111231|4.5.2.20120101|false\nboxstarter.chocolatey|1.0.33|2.4.159|false\nautohotkey_l|1.1.11.01|1.1.14.20140119|false\nDotNet4.0|4.0.30319.20130222|4.0.30319.20141222|false\nketarin|1.6.0.434|1.7.1|false\nnodejs|0.10.30|0.10.36|false\nautohotkey.portable|1.1.18.00|1.1.19.02|false\nPester|2.0.2|3.3.5|false\nWindowsLiveWriter|2011.0.0|2012.0.0|false\ndropbox|2.8.4|3.0.5|false\nwebpicmd|7.1.50430.0|7.1.50430.20141001|false\nThis is ONLY the pacakges that have upgrades available by the way.\ncmd\nC:\\> choco list -lo\nChocolatey v0.9.9.0 (this is green, choco heading)\n1password 1.0.9.341\n7zip 9.22.01.20130618\n7zip.commandline 9.20.0.20130618\n7zip.install 9.22.01.20130618\naacgain 1.9.0.2\nAtom 0.146.0\nautohotkey 1.1.16.05\nautohotkey.install 1.1.16.05\nautohotkey.portable 1.1.18.00\nautohotkey_l 1.1.11.01\nbaretail 3.50.0.20120226\nbeyondcompare 3.3.8.16340\nbinroot 0.03\nboxstarter.bootstrapper 1.0.33\nboxstarter.chocolatey 1.0.33\nBoxStarter.Common 1.0.33\nBoxStarter.WinConfig 1.0.33\nccleaner 4.17.4808\nchocolatey 0.9.8.23\nchocolatey.server 0.1.0\nChocolateyGUI 0.11.4\nChocolateyPackageUpdater 0.6.2.0\nclink.portable 0.4.2\nConEmu 13.12.25.0\nConsole2 2.0.148\nDevbox-Common 1.0.2\nDevbox-Common.extension 1.0.1\ndisableuac 0.0.2\nDotNet3.5 3.5\nDotNet4.0 4.0.30319.20130222\nDotNet4.5 4.5.20120822\ndotPeek 1.1.1.33\ndropbox 2.8.4\neasy.install 0.6.11.4\nEthanBrown.ConEmuConfig 0.0.5\nexpresso 3.0.4750\nfiddler 2.4.5.3\ngit 1.9.4\ngit.commandline 1.9.4\ngit.install 1.9.5.20150114\ngitextensions 2.47.3\nGitReleaseNotes 0.5.0\nGnuWin 0.6.3.1\ngooglechrome 28.0.1500.71\ngrepwin 1.6.1\nhg 3.2.3\nilspy 2.1.0.1000\nimagemagick.tool 6.9.0.2\nInstEd 1.5.15.26\niscommandlineapp 1.0.0\njavaruntime 7.0.51\njq 1.0.3\nkdiff3 0.9.97\nkeepass.portable 2.27\nketarin 1.6.0.434\nlaunchy 2.5.0.20140301\nlessmsi 1.1.7\nlinqpad 2.46.09\nlockhunter 3.0.2\nMailViewer 3.1\nmingw 4.8.1.20140107\nmysql 5.6.19\nnodejs 0.10.30\nnodejs.commandline 0.10.30.20140818\nnotepadplusplus 6.7.3\nnotepadplusplus.commandline 6.7.2\nnotepadplusplus.install 6.7.3\nnpm 1.4.9\nNuGet.CommandLine 2.8.2\nNugetPackageExplorer 3.8.0\npaint.net 3.5.11.20130909\npandoc 1.12\npapercut 2013.6.10.2\npeco 0.2.2\nPester 2.0.2\nPhantomJS 1.9.7\npidgin 2.10.7.1\npik 0.3.0\npip 1.1.1\npngoptimizer 2.4\npngoptimizer.commandline 2.4\nposhgit 0.5.0.201401009\nPowerGUI 3.8.0.129\nPowerShell 4.0.20140915\nPreCode.WLW 5.02\npuppet 3.7.0\nputty 0.63\nputty.portable 0.63\npython 2.7.5\nRecuva 1.51.1063\nRegShot 1.9.2\nresharper 8.0.2000.2660\nroundhouse 0.8.5.0\nruby 2.1.5\nruby.devkit 4.5.2.20111231\nruby.portable 2.0.0.48100\nruby2.devkit 4.7.2.2013022402\nscala.portable 2.11.4\nsharpkeys 3.5.0\nSourceCodePro 1.017.1\nstexbar 1.8.4\nSublimeText2 2.0.2.2221\nsumatrapdf 2.5.2\nsumatrapdf.commandline 2.5.2\nsysinternals 2013.12.19.20140121\nTestDriven.Net 3.3.2779\ntoolsroot 0.1.0\nunderscore 1.0.0\nunderscore-compiled 1.0.2\nunderscore-script 1.0.2\nussf 1.5.0\nvcredist2008 9.0.30729.1\nvcredist2010 10.0.40219.1\nvim 7.4.27\nVirtualCloneDrive 5.4.6.20130920\nvlc 2.1.3\nwarmup 0.6.5.1\nwebpicmd 7.1.50430.0\nwebpicommandline 7.1.40719.0\nWget 1.11.4.1\nwincommandpaste 1.0.6\nwindirstat 1.1.2.20140225\nWindowsLiveInstaller 2012.0.0\nWindowsLiveWriter 2011.0.0\nwinflexbison 2.4.1.20140103\nWix35 3.5.2519.20130612\nyumi 2.0.0.8\n127 packages installed.\n. That did just point out a possible bug in new choco install logic. NOTE: It believes chocolatey 0.9.8.23 is installed. :/\n. Pinned, means you \"pin\" to a particular version. It's a way to suppress upgrades...\n. Attempting to upgrade shows the proper version:\n\nIt's there in the package directory:\n\nBut list, not so much. Shows last release version of everything. Anyone want to guess what I forgot to pass? Yes, -pre. Listing what you have installed should include and prefer a prerelease. Otherwise it can get confusing about what version you actually have installed. So it's a bug.\n. https://github.com/chocolatey/choco/issues/46 (and fixed)\n. FYI, the -r option is meant for machines to read, not humans. But at least it's a start for taking something over and piping it to a posh script.\n. I think this is perfect. This is what NuGet should have done and one thing that made me want to start looking else where.  Is .NET 4.0 still supported in NuGet 2.8?\n. @nabheet yes in the nuspec.\n. @AnthonyMastrean NuGet indeed did introduce Dependency Resolution strategy, but they didn't expose it as all in NuGet.exe. Sad but no matter as choco.exe does it just fine. https://github.com/chocolatey/choco\n. I have to agree on logout. I'm not sure quiet is the right answer either.\nWe need something more descriptive yet succinct.\nOn Fri, Feb 7, 2014 at 8:49 AM, Matt Wrock notifications@github.com wrote:\n\nIf you used -Quiet and made the default $false, wouldn't that have the\nsame effect?\n\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/416#issuecomment-34442342\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Quiet/silent imply no output whatsoever.\nOn Monday, February 10, 2014, Johan Leino notifications@github.com wrote:\n\nQuiet or Silent seems to be the defacto standard for silent/quiet\ninstallers...so either one of those will do I think. Comments?\n\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/416#issuecomment-34604268\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Ah guess I wasn't paying attention to this as completey as I should have\nbefore commenting. Yes quiet or silent should be fine.\nOn Monday, February 10, 2014, Matt Wrock notifications@github.com wrote:\n\nYes. I think that is what @jole78 https://github.com/jole78 was\nintending this argument to accomplish and something that I think makes\nsense - completely silence the \"Host\" stream. I'm assuming keeping the\nother streams, output/warning/verbose/error untouched is desired since\nthere are already ways built into the PS syntax to silence or redirect\nthose.\n\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/416#issuecomment-34677935\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. This closes #411\n. Currently rewriting chocolatey in c#, so that may be why the issues looks\nslow. Once that is complete we will start adding features to core again.\nOn Sunday, May 25, 2014, Daniel Gioulakis notifications@github.com wrote:\n\nAre there any plans to address this? -Properties and replacement token\nsupport would be desirable.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/417#issuecomment-44156555\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. why nevermind?\n. So far I like what you are doing here. :)\n. I am loving that you included tests.\n. Autouninstaller used this as influence, but given it was written in c#, I didn't end up bringing this into the posh choco.\n. I would like for folks to be able to set it to c:\\\n. @Redsandro I think I still have intentions for doing something similar to what we talked about on the thread but right now I'm letting Gary run with this. If and when the other thing happens, it will be another repo.\n. Let's start with this clean one. I will pull this into stable soon.\n. Should merge it this week. It is marked for next release. :)\n. Interesting....\n. @ssteward54 as a workaround, if you close and reopen the shell (and maybe reboot :( ) do you still see this behavior?\n. Sorry, not sure where we are with this. Are you waiting on me to pull it in or is there work to do here?\n. okay, right on.\n. I'm going to pull this over into stable.\n. I think some folks might want something like ruby in the c:\\ directory for\nPik (although I think that Pik could be enhanced).\nOn Wed, May 28, 2014 at 1:55 PM, Sander AKA Redsandro \nnotifications@github.com wrote:\n\nDo we also need to address the issue where people now have environment\n$env:ChocolateyBinRoot set to c:\\?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/421#issuecomment-44449706\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. @Redsandro is there a PR for that fix somewhere?\n. No need. Already good - \nCherry picked \n-  d4806255e8d73567a64db0c3a8ad9196a13d226f\n-  cd11749affd02b9445437517b46d49ad25ce7eb5\n. Git, super powerful and very precise. :+1: \n. Thanks for the contributions folks! Much appreciated. :)\nSorry I've been (ahem) slow with the PRs lately.\n. Now that is interesting. The behavior is that it is supposed to move on to the next source but from what I see here that is not the case when the first source errors.\n. Sweet! We need to explore the latest version. Probably in 0.9.8.25 though (or 0.99 if we call it that).\n. This particular issue is at https://github.com/chocolatey/choco/issues/612 (and not necessarily related to what this was originally, because we have an even newer version of NuGet than was suggested earlier in this post).\n@metalseargolid can you perhaps move your comment over to that thread? Thanks! \n. Yes, this is by design. You are telling chocolatey to only use this one\nsource to resolve all packages. When choco runs normally it uses all known\nsources to resolve packages and dependencies, in source order.\nYou can specify multiple sources by separating with a semicolon and\nencapsulating with single quote marks, e.g. 'C:\\somesource;\nhttps://chocolatey.org/api/v2/'.\nThis is noted in the wiki documentation as well, although the format\ndoesn't always make it easy to find.\nYou might try using the mailing list for things like this. Thanks!\nThis closes #423.\nOn Sunday, February 23, 2014, Bill Long notifications@github.com wrote:\n\nLet's say you have a private nuget repository. You create a Chocolatey\npackage called 'foo' which depends on autoit.commandline from the\nchocolatey.org repository. If you add the internal repository as a\nsource, then it's able to resolve the dependency, and the package installs:\nchoco sources add -name PrivateNuget -source https://privatenuget/api/v2\ncinst foo\nHowever, if you do not add the internal repository as a source, and\nspecify -source instead, it fails:\nC:> cinst foo -source https://privatenuget/api/v2\nChocolatey (v0.9.8.23) is installing 'foo' and dependencies. By installing you accept the license for 'foo' and each dependency you are installing.\nUnable to resolve dependency 'autoit.commandline'.\nCommand 'install' failed (sometimes this indicates a partial failure). Additional info/packages: foo\nIt appears that when -source has been specified, it decides to resolve all\ndependencies only against that source. I'm not sure if this is intentional.\n\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/423\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Perhaps we create an issue to update that?\nOn Sun, Feb 23, 2014 at 2:27 PM, Gary Ewan Park notifications@github.comwrote:\n\nThat's the one. From the main https://chocolatey.org/ page, the forum\nlink takes you to the Google Group.\nWe should perhaps update the Contributing.md if this is not clear in there.\n\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/423#issuecomment-35842237\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. This is closed by https://github.com/chocolatey/chocolatey/commit/b2d62b71430baab5a7a9bb6a63986ed2e3ed957e\n. Looks good. \n. It's an alternative to # - GH automatically links it for you.\n. This is complete. Packages need to opt in. Over time the plan is to restrict packages for users to the ones that have included this and users would need to then opt in to \"unsafe\" packages.\n. Also need to be able to sum against sha1 hashes.\n. Adding some additional commits here.\n. https://raw.github.com/ferventcoder/nugetpackages/master/launchy/tools/chocolateyInstall.ps1 thoughts?\n. Now this is good.\n. @rismoney not sure what you are asking...\n. @gep13 Hoping to. :)\n. There we go. Now it should really be closed. ;)\n. Not too late at all.\nOn Monday, March 3, 2014, Jakub Berezanski notifications@github.com wrote:\n\nHow about renaming Get-ChecksumValid to Test-Checksum (or\nTest-FileChecksum)? It would be more consistent with Powershell cmdlet\nnaming conventions and standard cmdlets, such as Test-Path,\nTest-Certificate or Test-Connection.\nOr is it too late for that change...?\n\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/427#issuecomment-36551565\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Would you mind logging that over at https://github.com/chocolatey/chocolatey-package-updater? Thanks.\n. awesome. thanks! \n. That make sense. I think we may be doing that already though.\n. @jberezanski Yup, check out #427. \n. Note that we verify the file downloaded with the checksum whether or not we using the cache - https://github.com/chocolatey/chocolatey/blob/master/src/helpers/functions/Get-ChocolateyWebFile.ps1#L126\n. Ah yeah, perfect use case. Let's get that in there. File an enhancement?\nOn Monday, March 3, 2014, Jakub Berezanski notifications@github.com wrote:\n\nYes, I've seen that line (that's what I meant by \"the checksum test\nlater\"). However, in the scenario I'm thinking about, it would be too late.\nPlease consider the following sequence of events:\n1. the user invokes cinst foo\n2. chocolateyInstall.ps1 of the foo package invokes\n   Get-ChocolateyWebFile to download http://unreliablehost.com/foo.zip\n3. foo.zip does not exist in the cache, so the condition at L85https://github.com/chocolatey/chocolatey/blob/master/src/helpers/functions/Get-ChocolateyWebFile.ps1#L85fails at\n   $fi.Exists\n4. foo.zip is downloaded, but due to unreliable server/network\n   connection/whatever ends up corrupted\n5. the checksum test at L126https://github.com/chocolatey/chocolatey/blob/master/src/helpers/functions/Get-ChocolateyWebFile.ps1#L126catches the corruption and raises an error\n6. installation fails\n7. the user invokes cinst foo again, hoping this time the file will be\n   downloaded correctly\n8. chocolateyInstall.ps1 of the foo package invokes\n   Get-ChocolateyWebFile to download http://unreliablehost.com/foo.zip\n9. foo.zip exists in the cache and has the expected size, so the condition\n   at L85https://github.com/chocolatey/chocolatey/blob/master/src/helpers/functions/Get-ChocolateyWebFile.ps1#L85passes and $needsDownload is set to $false\n10. foo.zip is not downloaded again and remains corrupted\n11. the checksum test at L126https://github.com/chocolatey/chocolatey/blob/master/src/helpers/functions/Get-ChocolateyWebFile.ps1#L126catches the corruption and raises an error\n12. installation fails\nI propose modifying L85https://github.com/chocolatey/chocolatey/blob/master/src/helpers/functions/Get-ChocolateyWebFile.ps1#L85to:\nif ($fi.Exists -and ($fi.Length -eq $headers[\"Content-Length\"]) -and (Get-CheckSumValid -file $fi -checkSum $checksum -checksumType $checksumType))\nThat change would result in failing the condition at step 9 above and\nredownloading the file, hopefully uncorrupted this time.\nWithout that change, the user would need to delete the cached file by hand\n(be familiar with cache directory location and layout etc) to fix the\nbroken download.\n\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/428#issuecomment-36554614\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Well that seems like a bug... Looks like you added that to #421?\n. This is fixed with merging of #421\n. Use choco pack instead if you find collisions. choco command is becoming the ubiquitous usage of chocolatey.\n. @bbenoist Great arguments. We're deprecating most of them. It's quite possible that most if not all will be removed by v1. cinst may stick around for a v2 removal since it is the most widely used and would impact a much larger set of folks.\n. Yes... :)\n. @paulsapps - You should delete c:\\programdata\\chocolatey\\bin\\cpack.exe as a workaround for now. Or you can try to update the path so that cmake's cpack evaluates first on the path.\n. Issue moved to https://github.com/chocolatey/choco/issues/89\n. Ah, good point. Grammar. :)\n. We went with the fix of not allowing c:\\ for now.\n. See cd11749affd02b9445437517b46d49ad25ce7eb5\n. Sounds like a pretty useful feature but will need to come after package\nindexes are implemented.\nOn Wednesday, March 12, 2014, Lawrence Johnston notifications@github.com\nwrote:\n\nIt would be very useful to be able to list packages with available updates.\nMy use case is that I want to have a good idea of what \"cup all\" is going\nto do before I do it.\nPrevious requested here:\nhttps://groups.google.com/forum/#!msg/chocolatey/KC87guFjZWM/gvn4E-wPNR8J\nAnd mentioned in #320https://github.com/chocolatey/chocolatey/issues/320\n.\n\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/435\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Yes, hoping to speed it up a bit as well.\nOn Wednesday, March 12, 2014, Lawrence Johnston notifications@github.com\nwrote:\n\nMakes sense. Meanwhile I found that \"cver all\" will work for the time\nbeing though it takes a while and also lists packages that don't have\nupdates.\n\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/435#issuecomment-37484577\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. @chucker you can also cup all --noop -r\nBut this specific case will be covered with an outdated command - https://github.com/chocolatey/choco/issues/170\n. No this is fine. I do have to say consistency would be nice.\nOn Sunday, March 16, 2014, OlduwanSteve notifications@github.com wrote:\n\nThe output format of the list command is dependent on the source. This has\na knock-on effect in the chocolatey puppet package, which assumes the\nformat is consistent. I came across this issue while trying to use\n'windowsfeatures' as a source.\nI considered raising an issue on the chocolatey-puppet project, but\nactually I think it is reasonable to expect the output of 'list' to be\npredictable (or at least for there to be a predictable list command) and\nfor chocolatey to hide the details of the source implementation.\nI'm happy to take a look at coding this if a decent solution gets agreed.\nI also am happy to move the bug into the puppet provider if that seems more\nappropriate.\n\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/436\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. We've fixed this on chocolatey.org. This is what happens when I go down to spend time with the family and am in a low speed internet area... :(\n. Thanks so much for reporting. The fixes were just deployed.\nhttps://github.com/chocolatey/chocolatey.org/commit/c55db670ee5f68289a268bf8b5d0bbcdf8b6dc54\nhttps://github.com/chocolatey/chocolatey.org/commit/5a11f93af46116179bc248ce57b2f15781ac6714\nI moved off of the dependency of a github download.\n. Was the item you are fixing in stable?\n. Okay, that's fine. We will just pull this into master.\n. You want to send me this against stable branch instead and I will get it into the next version?\n. Closing PR for commit.\n. This is likely related to the issue we had recently: https://twitter.com/chocolateynuget/status/447041006706245636\nAlso #438 \n. I'm closing this as not able to reproduce until we hear back.\n. This is something I want as well, thanks for filing the ticket. We are a ways from having a REPL but eventually I think we want to get there. There are a few more important things we want to cover first (like rewriting chocolatey into something that would support a REPL) and package indexes that would be able to help with getting the list with tab completion.\n. The issue with creating packages is a validation of fields in the nuspec\nthat need to be in http format. You might check those against nuspec\ndocumentation on docs.nuget.org.\nOn Monday, March 24, 2014, Christopher Carpenter notifications@github.com\nwrote:\n\nClosed #443 https://github.com/chocolatey/chocolatey/issues/443.\n\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/443\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. There is some weirdness here. Looks like it is adding a bunch of commits.\n. No worries, this was a pretty tiny change. I went ahead and implemented it in stable\n. Well then that's perfect. :+1: \n. The new version will not do this. It will looks for sysnative and use it instead.\n. @jberezanski Would you rebase this against stable instead? That way I can get it pulled in easier. If not I can make it happen soon.\n. All PRs should be targeted against master. I think we have that listed in contributing? I was just asking because I planned to pull this in and if you wanted to hook it up, it would save me a few moments ;)\n. I don't see a problem with this. Pulling to master.\n. This rebased into stable, so it will be released with next version.\n. So it mentions moving the folder, and updating two environment variables.\nPath and chocolateyinstall. I can post pictures if you need me to.\nOn Thursday, July 3, 2014, Eric Nemchik notifications@github.com wrote:\n\nis there a specific recommendation for how to make this move manually?\n(other than just move the folder?)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/452#issuecomment-47987667\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. :+1: \n. Everything to machine.\n. @jamesgecko would you add that to our wiki? \n. Right now, it's a first gen. I didn't want it to be prompting during installation.\n. Is that file all I would need?\n. Do you think I need one next to any of the files that are exes?\n. great :(\n. I'm guessing this might be an easy fix...hoping.\n. No worries, I like detailed :)\n. Merged in at https://github.com/chocolatey/chocolatey/commit/e2927d6cae116d9966166bbb6c7bc3aac3cc087b\n. If you run those two commands with -debug, what additional details are provided? I suspect there is something in trying to get the list from the source not using credentials.\n. Try this for me, %chocolateyinstall%\\chocolateyinstall\\nuget.exe list -source https://www.myget.org/F/ezetopqatest/\n. If I was to throw out a wild guess, I would say it is this right here: https://github.com/chocolatey/chocolatey/blob/master/src/functions/Chocolatey-InstallAll.ps1#L20\n. That would be fine. We have guidelines in contributing.md (top level of repo)\nOn Mon, Apr 7, 2014 at 3:17 AM, pmcevoy notifications@github.com wrote:\n\nOK, thanks. Not sure what my next step is: do you want me to fix and\nsubmit a PR (the PS should not be a problem, but I need to get a handle on\nthis fandangled git/github thingy)\n\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/456#issuecomment-39705625\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Interesting. I think we need a switch for this as I think it could pose a security issue to blindly apply it everytime.\n. If this is going to get picked up, adjust over to\nhttps://github.com/chocolatey/choco please\nOn Tuesday, January 27, 2015, AnneTheAgile notifications@github.com wrote:\n\n@gep13 https://github.com/gep13 & @Redsandro\nhttps://github.com/Redsandro , ok thank you! I do indeed like this\nidea.\nTo see the merge conflicts, I must pull down Redsandro:docGenerator [1]\nbranch and try to pull in this main master [2], right? And then naturally I\nshould see them. I had thought I should be able to see it here on github\nvisually, but I guess not. That's ok, just wanted not to miss something. Ty\n@Redsandro https://github.com/Redsandro for the ice and nice\nlady/gentleman logo!\nAnneTheAgile\n[1] https://github.com/Redsandro/chocolatey-origin/tree/docGenerator\n[2] https://github.com/chocolatey/chocolatey\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/pull/458#issuecomment-71657326.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. This only happens when called from command shell and not powershell.\n. Fixed in a081b157a9b4325fd9498e32c70639f182df6de6\n. Yes! \n. I knew of this issue. I thought we already had a discussion or this put up as an enhancement/bug (depends on your perspective, I consider it a bug).\n. Pretty sure I fixed this issue by reimporting the module during upgrade. :)\n. Fixed in 54fca9be3223d3bdb1a9a6f3a3b2501411e84abb\n. Can you verify this is not an error in the pkg?\nOn Saturday, April 26, 2014, NJ-Brad notifications@github.com wrote:\n\nI get the following error when I try to install an MSI using\ninstall-chocolateypackage.\nnote: I am calling this in a BoxStarter package\nWrite-Error : Package 'SqlNavigator_IP v1.0.0' did not install\nsuccessfully: Missing closing '}' in statement block.\nAt C:\\Chocolatey\\chocolateyinstall\\functions\\Chocolatey-NuGet.ps1:90\nchar:28\n- Write-Error <<<< \"Package '$installedPackageName\n  v$installedPackageVersion' did not install successfully:\n  $($_.Exception.Message)\"\n  - CategoryInfo : NotSpecified: (:) [Write-Error],\n    WriteErrorException\n  - FullyQualifiedErrorId :\n    Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/462\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Go for it. Thank you.\n. Not a chocolatey bug, please report to the maintainer of the package so they can fix it.\n. Thanks - I think we have this in some other PRs though?\n. My least favorite part about this script is that you had to change it in that many places instead of just one.\nSo we don't take PRs from master branches. Please move the code over to a feature branch and resubmit the PR. \nFor more details, please see our contributing doc - https://github.com/chocolatey/chocolatey/blob/master/CONTRIBUTING.md\nThanks! \n. Supercedes #468 \n. Can you give an example of a use case for this?\nOn Tuesday, May 6, 2014, yannisgu notifications@github.com wrote:\n\nThis Pull Requests add an additional attribute to the package.config named\n\"installArguments\".\nThis attribute basically does the same as you would provide the\n\"installArguments\" paramer\nto the \"chocolatey install\" command.\nYou can merge this Pull Request by running\ngit pull https://github.com/yannisgu/chocolatey installArgumentsPackageConfig\nOr view, comment on, or merge it at:\nhttps://github.com/chocolatey/chocolatey/pull/470\nCommit Summary\n- added functionality to support installArguments in packages.config\nFile Changes\n- M src/functions/Chocolatey-PackagesConfig.ps1https://github.com/chocolatey/chocolatey/pull/470/files#diff-0(4)\n- M tests/unit/Chocolatey-PackagesConfig.tests.ps1https://github.com/chocolatey/chocolatey/pull/470/files#diff-1(48)\nPatch Links:\n- https://github.com/chocolatey/chocolatey/pull/470.patch\n- https://github.com/chocolatey/chocolatey/pull/470.diff\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/470\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. :+1: This is awesome, sorry if I misinterpreted it at first! \n. Thanks! This will be released in 0.9.8.25 (unless we rename it to 0.9.9.0).\n. @thigg - what is the issue you opened? \n. Right, the ruby.devkit doesn't work with ruby 2. You can still install 1.9.3 and 1.8.7 - 1.9.3 is still in active use, 1.8.7 not so much.\n. Oh yeah, that was an issue with 0.9.8.23 and trying to reference something with 7z that doesn't exist #371. It does make sense to remove cinstm and to add ruby there\n. Done... please let me know if you need me to look at anything else. Closing this for now.\n. There, updated. Knowing that you can natively do this now by taking a dependency on something that can do .tar.gz and then doing so in the package like I have shared on Stackoverflow, this is most definitely a feature request and not an issue, since it does work today.\n. I think the current implementation of the helper can be given an optional -type parameter or in the absence of that, looks at the url of the remote file/name of local file to realize the extension and do the right thing. This is part of the ideas behind chocolatey. Do the right thing without a ton of different helpers that are essentially doing the same thing. \nThe difference here is knowing what to do with a tar versus a tar.gz versus a zip versus a 7z. I don't want four helpers, that's wasteful and adds mental context for users.\n. Archive?\n. This is being implemented in https://github.com/chocolatey/choco/issues/386. It's still going to ask for uac permissions - we already use this. Look at Start-processasadmin\n. Agreed all over.\n. You are however using chocolatey in an unsupported scenario. When we prep for a powershell module we will need to do this\n. I believe this is fixed as of 0.9.10.3, further in 0.10.0, and has one outstanding issue to be fixed.\n0.9.10.x\n\nRefresh environment between packages, ensure process variables stay set - https://github.com/chocolatey/choco/issues/439\nIn PowerShell, do not update PSModulePath - https://github.com/chocolatey/choco/issues/295\nEnsure SYSTEM Temp folder - https://github.com/chocolatey/choco/issues/826\n\n0.10.0\n\nCapturing additional PSModulePath process items and making them available for the Internal PowerShell Host - https://github.com/chocolatey/choco/issues/830\n\nFurther fixes for Update-SessionEnvironment\n\nEnsure refresh while running in PowerShell doesn't wipe out variables - https://github.com/chocolatey/choco/issues/129\n. The last one may not be required.\n. Fixes #455 \n. I had to rebase onto stable...\n\nMerged in at https://github.com/chocolatey/chocolatey/commit/e2927d6cae116d9966166bbb6c7bc3aac3cc087b\n. Thanks so much for providing tests as well. Aside from your branch basing off of _env.cmd stuff, this was well done.\n. Well something went wrong on this end, could be that I had to change those commits some on the way in and your changes did not so it looked like different commits.\n. Yes, it did. I think that was due to the different commit hashes\n. @gep13 This looks good to me\n. No need on this one.\n. Always fun to see these errors. It's not there in 0.9.8.24, but another issue is right now.\n. You might see this in 0.9.8.24 final, the reason is that the chocolatey.cmd file is upgraded in place (including all of the other files). The PowerShell files are loaded into memory so they cause no issues with things missing, but it falls back to the new chocolatey.cmd coming out of the posh bits and encounters a variable that was set in the beginning of the new chocolatey.cmd and called there and at that point it doesn't know what it is since it was never set in the original call.\nAnd a long explanation to what that craziness is.\n. There is nothing to fix from here at this time.\n. You killed the process. :)\nWe have a somewhat naive interpretation that things are installed at the moment. That needs to be in a pending status until everything is successful or failed.\nThanks for noting this.\n. Terminology: Nuget marks a package as installed once the folder is there and it is unpacked. \nSince choco relies on nuget to determine installation, not the steps following the package install to install the software, that's where the issue lies.\n. Thank you sir\n. Yes, the cruft in chocolateysetup has been reduced but definitely requires more work. It's nice to see that you are putting in some work in that respect. It's very much appreciated but it does show that we need some mocking or abstraction in some cases here as these tests would actually alter the state of the system/user environment variables. The last time there was something like that in chocolatey it killed out my entire path (that I later rebuilt from a backup). I didn't introduce the tests that did that, but they were fixed in a way where mocking was made easier.\nThis is a good start. I have started conversations in some areas where I'm trying to understand what is going on or where I have specific concerns, especially with the use of test code in the production code. I think even though we explicitly import the helpers during installation, some of that code stands to be changed as well due to another error. I think we can find a smarter way to go about this, perhaps put the mocked code where the real code would have been for tests.\n. That was fun, for future reference git rebase --onto stable master while in the feature branch.\n. This is in locally by the way. I haven't pushed it up yet as I'm verifying it all the way back to win2003\n. Okay, let me back up the commits and set that up.\n. Merged into stable at https://github.com/chocolatey/chocolatey/commit/02eccc940ca6341a094a408244206b13c87eacc1\n. This is implemented by #488 \n. Keep in mind that some of this is on borrowed time as c# choco will ultimately replace this area.\n. Left some comments at https://github.com/chocolatey/chocolatey/commit/9a0af45c12973a6fafe6b28dbc90a6df7db7441c \nI think there are some design decisions here that are a little outside of chocolatey that would need to be fixed up.\n. Also, you can just use (GH-489) at the start of your commits. That is the way most of the commits are done to reference issues.\n. @030 If you submit a PR we can work through changes there. It's much easier to do.\n. Can you do that from the command line with ruby? Or is it just in gemfiles\nand gemspecs?\nOn Thu, Jun 19, 2014 at 2:45 PM, Christian H\u00f6ltje notifications@github.com\nwrote:\n\nIt would be nice to be able to add version constraints instead of a\nspecific version.\nAn example borrowing from Ruby's ~> (aka squid rocket) notation:\nchocolatey install windb -version '~> 8.59.20140318'\nThis would install \"8.59.20140318\" or newer-third-place. e.g.\n8.59.20200101 but not 8.60 or 9.0\nCiao!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/490.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. I'm saying this because you can do version constraints with chocolatey already (not on the command line though).\nhttp://docs.nuget.org/docs/reference/versioning#Specifying_Version_Ranges_in_.nuspec_Files\nThat same range works in package.config files as well.\n. Closing this as already an existing feature (based on the earlier note on version constraints in package files) unless you can show me how to do this on command line at runtime and not in a gemfile. \n. You don't have to worry about them. \nWhat happens is this:\n1. you call chocolatey update chocolatey\n2. chocolatey batch redirect calls chocolatey.cmd.\n3. chocolatey.cmd calls powershell and chocolatey.ps1, which is loaded into memory.\n4. the upgrade process does an in place upgrade/replacement of all the files in the executing directory.\n5. powershell files are upgraded, but powershell is executing from memory so it continues using the old \"files\".\n6. When powershell finishes, it hands it back over to chocolatey.cmd, but it's the newly placed chocolatey.cmd file that contains a new variable that the old one didn't.\n7. The variable is declared way before the step in the execution process we are on, so it evaluates to '' instead of whatever value it should hold.\n8. So when it executes something later related to this variable, it doesn't know what it is, and the rest of the path looks wrong that it is using. %DIR% is the variable btw.\n9. RefreshEnv is still found since it is local to the script and so it is run.\nSo nothing to worry about. I had a special environment set up recently where I discovered all of this fun. I was fixing https://github.com/chocolatey/chocolatey/issues/459\n. Check out https://github.com/chocolatey/chocolatey.org/issues/78\nOn Wednesday, June 25, 2014, Dany Ouellette notifications@github.com\nwrote:\n\nThis is just a small annoyance... I spend a fair amount of time lately on\nthe Chocolatey.org website, and each time I navigate away and come back, I\nhave to login again.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/495.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. This is not a chocolatey issue. I suggest you use the contact maintainers form and or follow through the maintainers to find their chocolatey repository and file the issue there. \nTo help - https://github.com/ferventcoder/chocolateyautomaticpackages.\n. :+1: \n. Looks to be the same version?\n. Closing for now... unless this is an issue with chocolatey.\n. You may want to use the mailing list for questions like this - https://groups.google.com/group/chocolatey\n. and why not use invoke expression?\n. oh wait, nevermind... you are talking about against a remote computer. \n. So let me throw this out there, you have a bunch of computers all in some zone that could potentially reach a common known UNC share somewhere where you could ALREADY have unpacked chocolatey.\nAll that's left is for them to run the rest of the script, which is internal to you anyway.\n. Likely. I should have mentioned this is somewhat a duplicate as well. See https://github.com/chocolatey/chocolatey/issues/136 (similar but not exact).\n. By the way:\n\nThat said, while we have already slightly customized the installer already to 1) ensure we get a system-scoped ChocolateyInstall env variable for all users 2) set a specific installation directory and 3) set a specific URL to serve the installation files\n1. 0.9.8.24 will do this if you are running a process with elevated privileges\n2. You can already do this now if you set the environment variable prior to install - see https://github.com/chocolatey/chocolatey/wiki/Installation#before-you-install\n3. choco sources add name location\n. This looks to be a package issue...\n. If the package is doing something more than it should be and/or not using the helpers, I fully expect those packages to break. And they should b/c they need to stay out of chocolatey's purview. Anything that reaches into chocolatey's internals and uses functions, whatever, that are not in the API will start to break hard once choco.exe comes out.\n. I don't see anything too out of the ordinary going on here though.\n. So it does look like we have an issue\n\n[ERROR] Chocolatey expected a file at \n'C:\\Users\\vagrant\\AppData\\Local\\Temp\\chocolatey\\Firefox\\availableLocales.html' to \nbe of length '' but the length was '107268'.\n. Probably need a more rigid check in there if the content-type is html and a content-length is not found, don't attempt to error.\n. I pushed chocolatey 0.9.8.25-alpha1 - this fixes the issue on my end. Can you verify it also works for you?\nchoco install chocolatey -pre\n. Don't expect a long lead time here. Once we get your other issue figured out, the release cycle should be within a few days - #505 \nThe faster we get to the bottom of that and get a correction, the faster we release.\n. Release cycles generally go really fast when a new release causes gating issues, like this issue. And like the other issue you have reported.\nIssues found that have  workarounds usually tend to be longer release cycles.\n. @TomOne Let's not twist my words around here. I said IF. The intent is if a package is reaching in and using chocolatey's internals, such as internal methods NOT in the public api (Get-ChocolateyWebFile is part of the public api), they will break.  The comment was in general, not necessarily applying to firefox's package. And it doesn't as we realized in a later comment I made that you skipped over.\nLet me give you an example. There are packages looking up the path to c:\\chocolatey\\chocolateyInstall\\Nuget.exe and using it. I've advised the ones I know to not depend on internals as they can and will change.  ScriptCs fixed this - https://github.com/scriptcs/scriptcs/pull/240 (from https://github.com/scriptcs/scriptcs/issues/239).\nOther examples include using any function not in here: https://github.com/chocolatey/chocolatey/blob/master/src/helpers/chocolateyInstaller.psm1#L12\nWhich would include https://github.com/chocolatey/chocolatey/blob/master/src/functions/Generate-BinFile.ps1 and anything in https://github.com/chocolatey/chocolatey/tree/master/src/functions, which believe it or not, folks have done in the past and are still doing now. \nI have to say anytime you use things from any tool that are not part of the public api, you should expect that any upgrade should break your stuff. If you are using the API then it should not break it without a major version change (that's semver). If it does, it's a bug and you should expect me to do as I've done here.\nChocolatey is SemVer compliant - because we are not v1 we can make wild changes. But I try to provide non-breaking changes where possible. Let's not twist these words here. \n. > Are you seriously saying that every package code outside Chocolatey\u2019s API (e.g regular PowerShell code) will start to break once Chocolatey gets rewritten in C#?\nPowershell is not going away. Far from it. Just the internal stuff (internal chocolatey code, not part of the public API) is going away from powershell, so if folks are depending on things they should not (as previously stated), then they are going to have their packages break. Regular powershell is still going to be available as it is a fundamental part of how choco works.\nHope this brings an understanding into what I mean by not reaching into chocolatey's purview (internals and areas of concern).\n. I think this might have to do with something similar to #454 \n. @030 Some real live examples would be good.\n. I'm still confused what kind of service this is installing. Is this not a Windows Service (most of those do NOT require ports)?\n. No need, I was trying to understand how port would keep the service from being started if no port is specified when it is optional.\n. One of these is https://github.com/chocolatey/chocolatey/issues/505. Other known issue was https://github.com/chocolatey/chocolatey/issues/372 (specifically https://github.com/chocolatey/chocolatey/issues/372#issuecomment-37553192 relates to this).\n. Nope, let's call this a bug. \n. Also #509 \n. This seems to only be on GUI applications :(\n. @kevinsawicki I pushed a prerelease package with the fixes. Can you install chocolatey prerelease and then reinstall atom to regenerate the shim? Or have the person who reported the issue do this... :)\nsh\nchoco install chocolatey -pre\nchoco install atom -f\nThen try the issue reported again to see if it also working for you now?\n. @vbsql7 can you post the gist? It could be related to the package, but it may be a bug in choco.\n. This could be the issue of just installing chocolatey and not having that\nvariable set.\nOn Sunday, December 21, 2014, Gary Ewan Park notifications@github.com\nwrote:\n\n@vbsql7 https://github.com/vbsql7 can you confirm what version of\nChocolatey you are using? I have just done the following, using 0.9.8.28\n- Download the nupkg package from\n  https://bitbucket.org/jonforums/uru/downloads/uru.0.7.7.nupkg\n- Saved it to c:\\temp\n- Executed the following command choco install uru -source c:\\temp\n- Installation succeeded successfully\n- I can see a new uru.bat and uru.ps1 file created in the chocolatey\n  bin folder\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/510#issuecomment-67784483\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Backwards compatibility with a nice deprecation message when used. :) Or we just create an alias\n. The alias would be part of this work.\n. We don't need an issue opened for tests when it is part of the rollup of something else.\n. Awesome. Thanks for catching that!\n. It was a tiny change so I just put it on stable and pushed it. Thanks again for catching the issue!\n. That's a package issue and not a chocolatey issue. Please contact the\npackage maintainers through the package page on chocolatey.org\nOn Thursday, July 10, 2014, mawasay notifications@github.com wrote:\n\nAfter installing jdk8. The environment variables JAVA_HOME and PATH are\nset to \"C:/Program Files (x86)/Java\" where as the installation is done in\n\"C:/Program Files/Java\"\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/515.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Is wait-process available in Posh v2? If not we'll need to guard that command.\n. This is merged in at https://github.com/chocolatey/chocolatey/commit/b354494c53714619a5790f7517d0d8b852108f8a\n. This caused a major issue with chocolatey that made me yank the new release shortly after pushing it out. For reference see https://github.com/atom/chocolatey/issues/23#issuecomment-48799362\n. Will need to add some more guards around this...\n. @jberezanski I added a comment noting why we would wait the process.\n. This is a duplicate of #516 \n. It's there in 2.0, but the documentation on MSDN is misleading. Since it is a bug with 3+, I made sure we didn't hit some infinite loop waiting.\n. What bat files?\n. Aka, we don't generate bat files as of 0.9.8.24. You may want to upgrade.\n. Once you do that you can change the heading of this ticket and reopen it ;)\n. Perhaps there is  shimgen depth we can pass?\n. Done\n. It's part of integrating with other systems, like ruby gems, python and webpi. We may only have support for getting things installed.\n. @Apazman Not the same issue. Please create another issue and include debug output.\n. @brettporter I think this might be useful for chocolatey/choco as well.\n. This was implemented as part of https://github.com/chocolatey/choco/issues/14\n. Specifically https://github.com/ferventcoder/choco/commit/10105b300c80a952b3c905f9a298bc8e86199083\n. Perhaps. This should only leave the installer alone if it finds the checksum to be the same, but it could be I introduced something else into the mix fixing what was thought to be an issue.\n. Adding checksums to your package would also be helpful.\n. When you say you cleaned up all the files, do you mean you deleted the %TEMP% files?\n. What is wonky then?\n. Definitely not clear as you said it worked in the end with a file in the temp folder (as I was attempting to clear that up).\nSo did it work in the end or did it fail?\n. Now I understand. Yes, big bug.\n. I think I understand what might be causing this - are pandoc 1.11 and 1.12 installer files the exact same size (get-contentlength)?\n. super big bug then :(\n. Help me out here - I'm trying to reproduce - https://gist.github.com/ferventcoder/d928b61f69d65ac7bd4e\n. Going to have to close this as not reproducible unless we get to the bottom of this. I'll need full debug output to understand what is wrong.\n. That would be super helpful.\n. I tried this with a local package and it appears to work just fine. \n```\nC:> choco install pandoc\nChocolatey (v0.9.8.28-alpha2) is installing 'pandoc' and dependencies. By installing you accept the license for 'pandoc' and each dependency you are installing.\npandoc v1.11.1\nDownloading Pandoc 32 bit\n  from 'https://pandoc.googlecode.com/files/pandoc-1.11.1.msi'\nInstalling Pandoc...\nPandoc has been installed.\nPandoc has finished successfully! The chocolatey gods have answered your request!\nFinished installing 'pandoc' and dependencies - if errors not shown in console, none detected. Check log for errors if unsure. \nC:> choco install pandoc -source c:\\temp\nChocolatey (v0.9.8.28-alpha2) is installing 'pandoc' and dependencies. By installing you accept the license for 'pandoc' and each dependency you are installing.\npandoc v1.12\nDownloading pandoc 32 bit\n  from 'https://github.com/jgm/pandoc/releases/download/1.12.4.2/pandoc-1.12.4.2-1-windows.msi'\nInstalling pandoc...\npandoc has been installed.\npandoc has finished successfully! The chocolatey gods have answered your request!\nFinished installing 'pandoc' and dependencies - if errors not shown in console, none detected. Check log for errors if unsure. \n```\nInterestingly enough, this is weird:\n\n. Could this just be a misunderstanding of -force? If you have a package in chocolateyinstall + lib, force doesn't remove what is already there (yet).\n. Closing as non-repro\n. Likely a bug, but I'm going to need -debug output to know for sure.\nAlso, you should be using single tick marks surrounding, not double double quotes. Powershell doesn't handle those double quotes correctly so instead of \"\"url;url\"\", try ''url;url'' (note that is two single ' marks)\n. Single tick marks, not double tick marks.\n\nPS C:\\Windows\\system32> choco -debug install myPackage -source ''https://www.myget.org/F/xyz/;http://chocolatey.org/api/v2/''\n\nShould be \nPS C:\\Windows\\system32> choco -debug install myPackage -source 'https://www.myget.org/F/xyz/;http://chocolatey.org/api/v2/'\n. Closing as not an issue unless we hear back that the adjustment did not work.\n. Remote execution is not considered supported right now.\n. Is that ALL it takes? whoa\n. Done.\n. Don't know.\n. It appears that it supports a -Version argument but that help menu is the same across all commands. We are rewriting choco in c# and the help menus are very specific.\n. I see what you mean. It is passing the help through to nuget, but choco itself doesn't support a -version option at the current time.\n. It's planned. :)\n. The intent is for you to copy that, not try to type it out yourself. The cmd.exe stuff is especially archaic and I think I've only attempted to type it out by hand maybe twice in 3 years. It's not easy, it's not fun. It's better to copy. :)\n. @tedsanders Ah, good point. Perhaps we teach people how to do that. :)\nRight click -> paste or set quick edit mode (right click is all you need and it pastes for you).\nThen once you have chocolatey installed, you install wincommandpaste and then you can Control+V. :)\n. Weird, I just ran exactly this without error.\n. Hmm. Run the install command like this: choco install atom -debug -force\nand post the output here.\n. Delete whatever is located at 'C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\AtomInstall.zip'\n. The errors you are seeing are not normal. I'm not yet sure what is causing\nit on your system as opposed to others. Can we have you move your install\nlocation to the default programdata to rule out a permissions issue with\nyour current install location?\nOn Saturday, July 26, 2014, Samuel Debruyn notifications@github.com wrote:\n\nSame issue, every install/update seems to fail by the way. I just\ninstalled chocolatey a week ago and all I've done past week is Windows\nStore app development in VS 2013.\nDEBUG: Running 'Append-InstallLog' with chocoInstallLog:''\nDEBUG: Arguments: $command = 'install'|$force=True\n|$prerelease=False|$packageNames='atom'\n|$source=''\n|$version=''|$allVersions=False\n|$overrideArguments=False|$InstallArguments=''\n|$localonly=False|$verbosity=False|$debug=True|$quiet=False\n|$name=''|$ignoreDependencies=False|$forceX86=False\n|$packageParameters=''\n|PowerShellVersion=4.0|OSVersion=6.3.9600.0\nDEBUG: Running 'Chocolatey-Install' for 'atom' with source: '', version: '', installerArguments:''\nDEBUG: Running 'Chocolatey-NuGet' for atom with source:''. Force? True\nChocolatey (v0.9.8.27) is installing 'atom' and dependencies. By installing you accept the license for 'atom' and each dependency you are installing.\nDEBUG: Installing packages to \"C:\\Programs\\chocolatey\\lib\".\nDEBUG: Running 'Run-NuGet' for atom with source: '', version:''\nDEBUG:  NuGet _\nDEBUG: Running 'Get-ConfigValue' with configValue:'useNuGetForSources'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'useNuGetForSources'\nDEBUG: After checking the user config the value of 'useNuGetForSources' is ''\nDEBUG: Value not found in the user config file - checking the global config\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'useNuGetForSources'\nDEBUG: After checking the global config the value of 'useNuGetForSources' is 'false'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'sources'\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'sources'\nDEBUG: Using global sources\nDEBUG: Using '-Source \"https://chocolatey.org/api/v2/;\"' as the source arguments\nDEBUG: Calling 'C:\\Programs\\chocolatey\\chocolateyinstall\\nuget.exe' install atom -OutputDirectory \"C:\\Programs\\chocolatey\\lib\" -Source\n\"https://chocolatey.org/api/v2/;\" -NonInteractive -NoCache\nDEBUG: Installing 'Atom 0.119.0'.\nSuccessfully installed 'Atom 0.119.0'.\nDEBUG: Evaluating NuGet output for line: Installing 'Atom 0.119.0'.\nDEBUG: Evaluating NuGet output for line: Successfully installed 'Atom 0.119.0'.\nDEBUG: NuGet installed Atom. If we are ignoring dependencies (False) then we will clean this up.\nAtom v0.119.0\nDEBUG: Running 'Delete-ExistingErrorLog' for Atom\nDEBUG: Looking for failure log at 'C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\failure.log'\nDEBUG: Running 'Run-ChocolateyPS1' for Atom with packageFolder:'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0', action: 'install'\nDEBUG:    PowerShell install (chocolateyinstall.ps1) \nDEBUG:   Looking for chocolateyinstall.ps1 in folder 'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0'. If chocolateyinstall.ps1 is found, it will be run.\nDEBUG: Action file is 'chocolateyInstall.ps1'\nDEBUG: Running 'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0\\tools\\chocolateyInstall.ps1'\nDEBUG: Running 'Install-ChocolateyZipPackage' for Atom with url:'https://github.com/atom/atom/releases/download/v0.119.0/atom-windows.zip', unzipLocation:\n'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0\\tools', url64bit: 'https://github.com/atom/atom/releases/download/v0.119.0/atom-windows.zip', specificFolder: '',\nchecksum: '', checksumType: '', checksum64: '', checksumType64: ''\nDEBUG: Running 'Get-ChocolateyWebFile' for Atom with url:'https://github.com/atom/atom/releases/download/v0.119.0/atom-windows.zip',\nfileFullPath:'C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\AtomInstall.zip',\nurl64bit:'https://github.com/atom/atom/releases/download/v0.119.0/atom-windows.zip', checksum: '', checksumType: '', checksum64: '', checksumType64: ''\nDEBUG: Running 'Get-ProcessorBits'\nDEBUG: CPU is 64 bit\nDEBUG: Setting url to 'https://github.com/atom/atom/releases/download/v0.119.0/atom-windows.zip' and bitPackage to 64\nDEBUG: Running 'Get-WebHeaders' with url:'https://github.com/atom/atom/releases/download/v0.119.0/atom-windows.zip', userAgent: 'chocolatey command line'\nDEBUG: Setting the UserAgent to 'chocolatey command line'\nDEBUG: Web Headers Received:\nDEBUG:   'x-amz-id-2':'a7vs2MfOdxhyfJjSatcmXkorQAw9AmMtV8gZiSXP/RWy9SvmUUnMOoc50iwZOb6S'\nDEBUG:   'x-amz-request-id':'753744D9E1241FD8'\nDEBUG:   'x-amz-meta-surrogate-control':'max-age=31557600'\nDEBUG:   'x-amz-meta-surrogate-key':'repository-3228505 user-3697332'\nDEBUG:   'Content-Disposition':'attachment; filename=atom-windows.zip'\nDEBUG:   'Accept-Ranges':'bytes'\nDEBUG:   'Content-Length':'65003553'\nDEBUG:   'Cache-Control':'max-age=31557600'\nDEBUG:   'Content-Type':'application/octet-stream'\nDEBUG:   'Date':'Sat, 26 Jul 2014 22:08:46 GMT'\nDEBUG:   'ETag':'\"0ff6f320de113a93bfb361e119bbecbe\"'\nDEBUG:   'Last-Modified':'Fri, 25 Jul 2014 15:58:34 GMT'\nDEBUG:   'Server':'AmazonS3'\nDownloading Atom 64 bit\n  from 'https://github.com/atom/atom/releases/download/v0.119.0/atom-windows.zip'\nDEBUG: Running 'Get-WebFile' for C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\AtomInstall.zip with\nurl:'https://github.com/atom/atom/releases/download/v0.119.0/atom-windows.zip', userAgent: 'chocolatey command line'\nDEBUG: Setting the UserAgent to 'chocolatey command line'\nDEBUG: Checking that 'C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\AtomInstall.zip' is the size we expect it to be.\nDEBUG: Verifying package provided checksum of '' for 'C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\AtomInstall.zip'.\nDEBUG: Running 'Get-CheckSumValid' with file:'C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\AtomInstall.zip', checksum: '', checksumType: ''\nDEBUG: Running 'Get-ChocolateyUnzip' with fileFullPath:'C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\AtomInstall.zip'', destination:\n'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0\\tools', specificFolder: '`, packageName: 'Atom'\nExtracting C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\AtomInstall.zip to C:\\Programs\\chocolatey\\lib\\Atom.0.119.0\\tools...\nDEBUG: wrapping 7za invocation with Write-FileUpdateLog\nDEBUG: Running 'Write-FileUpdateLog' with logFilePath:'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0\\AtomInstall.zip.txt'',\nlocationToMonitor:C:\\Programs\\chocolatey\\lib\\Atom.0.119.0\\tools, Operation: '\n```\nparam($7zip, $destination, $fileFullPath, [ref]$exitCodeRef)\n$process = Start-Process $7zip -ArgumentList \"x -o\"$destination\" -y \"$fileFullPath\"\" -Wait -WindowStyle Hidden -PassThru\nthis is here for specific cases in Posh v3 where -Wait is not honored\ntry { if (!($process.HasExited)) { Wait-Process $process } } catch { }\n$exitCodeRef.Value = $process.ExitCode\n```\n'\nDEBUG: Tracking current state of 'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0\\tools'\nWrite-Error : Atom did not finish successfully. Boo to the chocolatey gods!\n[ERROR] This command cannot be run due to the error: Het systeem kan het opgegeven bestand niet vinden.\nAt C:\\Programs\\chocolatey\\chocolateyinstall\\helpers\\functions\\Write-ChocolateyFailure.ps1:30 char:3\n-   Write-Error $errorMessage\n-   ~~~~~~~~~~~~~~~~~~~~~~~~~\n  - CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n  - FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nDEBUG: Running 'Move-BadInstall' for Atom version: '0.119.0', packageFolder:'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0'\nDEBUG: Moving bad package 'Atom v0.119.0' to 'C:\\Programs\\chocolatey\\lib-bad'.\nWrite-Error : Package 'Atom v0.119.0' did not install successfully: This command cannot be run due to the error: Het systeem kan het opgegeven bestand niet vinde\nn.\nAt C:\\Programs\\chocolatey\\chocolateyinstall\\functions\\Chocolatey-NuGet.ps1:90 char:17\n-                 Write-Error \"Package `'$installedPackageName v$installedPackageV ...\n- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  - CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n  - FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nDEBUG: Evaluating NuGet output for line:\nFinished installing 'atom' and dependencies - if errors not shown in console, none detected. Check log for errors if unsure.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/528#issuecomment-50250036\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. FWIW other folks are not experiencing these issues. Due to not being reproducible, I'd like to understand what it is about your environment that is causing issues. Let me know if you experience these errors in the future when/if you reinstall.\n. think of filetype as installertype :)\n. perhaps a vagrant box?\n. Boo. Would you see this as an issue?\n. It's likely the upgrade from nuget 2.1 to nuget 2.8\n. This is fixed in choco.exe. Everything is happily in abc order again.\n. @Redsandro yeah, it gets fun. You are trying too hard to get to these VMs - you should really use vagrant - see https://github.com/ferventcoder/vagrant-windows-puppet\n. Operation timing out is weird, it shouldn't do that. You might try upgrading chocolatey to the latest version first.\n. depends on the boxes - https://vagrantcloud.com/search?utf8=%E2%9C%93&sort=&provider=&q=windows\n. There is also a vagrant box offered by MSOpenTech. It is like 8GB packed though.\n. 4GB for Windows 2012R2 isn't bad. Mine is 4GB on both vrtualbox and vmware_fusion\n. Back to the issue at hand, what is the output of chocolatey v.27?\n. DEBUG: Running 'Get-WebHeaders' with url:'http://download.gnome.org/binaries/win32/tomboy/1.14/Tomboy-1.14.0.msi', userAgent: 'chocolatey command line'\nDEBUG: Setting the UserAgent to 'chocolatey command line'\nWrite-Error : tomboy did not finish successfully. Boo to the chocolatey gods!\n. Does it time out on HEAD?\n. Upon further investigation, the .net framework is unable to download the file for some reason. It's not just a HEAD request that times out, it's any request.\n. The 302 redirect to HTTPS... \n. Just of note, this doesn't affect PowerShell 3/4 as they use .NET Framework 4.0\n. It's Powershell v2.0 related as it uses .NET framework 2.0/3.5. Whatever issue it was seems to be fixed in newer versions of powershell, but to be sure I'm going to update to posh 3 in my vm and see if it fails.\n. Inspection with fiddler determines that the SSLv3 has a handshake failure - http://social.msdn.microsoft.com/Forums/en-US/5be893c2-b16c-4e2c-ad9a-ab4deb0c8962/ssl-handshake-failure?forum=netfxcompact\n. @Redsandro Posh v2 uses .net framework 2.\n. You are going to love the answer to this... \n. This is a bit naive implementation. What we might want to do is create a short timeout and then move to the fallback when it fails for the remainder of the run.\n. It's b/c the fallback doesn't work on .net framework v2, but it works on v4. If you look at current protocol you will see: Ssl3, Tls\n. Give it a shot - https://chocolatey.org/packages/chocolatey/0.9.8.28-alpha1\n. @Redsandro the undocumented way to get absolute latest:\n@powershell -NoProfile -ExecutionPolicy unrestricted -Command \"iex ((new-object net.webclient).DownloadString('https://chocolatey.org/installabsolutelatest.ps1'))\" && SET PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\nNote https://chocolatey.org/installabsolutelatest.ps1\n. Similar but not the same - you are missing a certificate that is required to allow the installation. https://chocolatey.org/docs/proxy-settings-for-chocolatey#still-having-trust-issues - we'll be moving this to a troubleshooting page.\n. That's simple, you just remove the -lo\n. I pushed this fix. choco install chocolatey -pre.\n. http://stackoverflow.com/questions/25129232/chocolatey-cant-install-git\n. Not missing much important other than a naive implementation ensuring the name of the file.\n. I think this may be covered by another issue...?\n. Migrated to https://github.com/chocolatey/choco/issues/435\n. There is a way to add debugging information to the installer: \n1. Download the package file from https://chocolatey.org/packages/chocolatey/0.9.8.27\n2. Unzip it (treat it as a zip file, it might help to add .zip to the end of the filename).\n3. Start up PowerShell.\n4. Type the following: \nps\nSet-ExecutionPolicy Unrestricted\n$DebugPreference = \"Continue\";\n$env:ChocolateyEnvironmentDebug = 'true'\n1. Navigate to the folder you just unzipped and run\nps\n& tools\\chocolateyInstall.ps1\n. @SpeCter is this the error? \nhttps://github.com/chocolatey/chocolatey/blob/master/src/chocolatey.ps1#L89-L93\n. @SpeCter Under which context did you originally set the executionpolicy?\nTo verify your setting, get-executionpolicy.\nIt may also provide some WTF moments, brought to you by powershell.\n. I don't know a ton about bypass other than it should bypass the current policy (passed as you startup PowerShell).\n. Alternatively, we could stop operation without a special switch\n. The first was added so that the second made sense.\n. @Redsandro It didn't, that is correct. It operated in a totally insecure way and was located in c:\\chocolatey where anyone could have messed with any file at any point. \n. You can install it to somewhere else, we are just making the default more secure.\n. right. In program data it needs a user with admin permissions to do stuff.\n. This is no bueno :(\n. > It also looks like you really don't need to pass in the zip file name because the unzip log file is based on the package name.\nThis change would be considered a possible security issue in implementation.\n. It's probably more so that the uninstall functionality just doesn't work appropriately.\n. @DarwinJS This is already a known issue and also already has a PR to fix it up. I've also added notes on how this would be fixed in the powershell function file related to install-chocolateypath.\n. Let's continue discussion in the actual ticket over on Choco.\n. https://github.com/chocolatey/choco/issues/310\n. Never saw that one before.\nWhat gives with the folder C:\\xampp?\n. Is it possible that this is local to the package and thus a package issue?\n. what version of chocolatey?\n. Can I get full debug output?\n. XAMPP works on your version of Windows yes?\n. As a workaround, you can explicitly add the source at the end to call choco update pkgname -source 'https://chocolatey.org/api/v2/' OR call choco install pkgname\n. And then magically it starts to work again... total WTF\n. What version of chocolatey?\n. Please upgrade to 0.9.8.27 and tell me if the issue still exists?\nEverything past 0.9.8.24 is using the latest nuget.exe.\n. Closing for now, this isn't really something we want in there yet. If this is needed, I'm sure it will come up again in the new choco.\n. This was an issue previously (for about one beta release) when chocolatey was looking at nuget 2.8 output incorrectly. This was almost immediately corrected. Not sure why you are seeing it.\n. But having fiddler open while testing could cause issues. Run it with -debug and pass back the output.\n. That is actually not a bad idea, but I think folks would still have issues if they were set to restricted.\n. This could potentially move over to choco.\n. Went a different way here. Yep, I've been seeing this as well. Seems like something wonky going on with the newly included nuget.exe 2.8.2.\nFYI, I'm also seeing this behavior on nuget.core.\n. Seems like something went wrong with my email reply.... so here goes again:\nOn the mailing list I recently went through what it would take for this package to include npm. Perhaps I'll put some time to it. \nTo reduce confusion though, the chocolatey issues list is reserved for problems/enhancements for chocolatey, not the community maintained packages. Problems with packages should be reported directly to the maintainers. Thanks!\n. Here's the link to that message where I detailed what it would take to include npm - https://groups.google.com/forum/#!msg/chocolatey/IcIkfqEvxtI/zsMvlmhdQm0J\n. So... try the install now. Should also include npm.\n. Attempting this against latest code base\nC:\\code\\mine\\chocolatey-packages\\manual\\poshgit>choco\nPlease run chocolatey /? or chocolatey help - chocolatey v0.9.8.28-alpha2\ncmd.exe:\n```\nC:\\code\\mine\\chocolatey-packages\\manual\\poshgit>cpack -debug\nDEBUG: Running 'Append-InstallLog' with chocoInstallLog:''\nDEBUG: Arguments: $command = 'pack'|$force=False\n|$prerelease=False|$packageNames=''\n|$source=''\n|$version=''|$allVersions=False\n|$overrideArguments=False|$InstallArguments=''\n|$localonly=False|$verbosity=False|$debug=True|$quiet=False\n|$name=''|$ignoreDependencies=False|$forceX86=False\n|$packageParameters=''\n|PowerShellVersion=2.0|OSVersion=6.1.7601.65536\nDEBUG: Current Security Protocol - Ssl3, Tls\nDEBUG: Running 'Chocolatey-Pack' for . If nuspec name is not passed, it will find the nuspec file in the current working directory\nCalling 'C:\\ProgramData\\chocolatey\\chocolateyInstall\\nuget.exe pack  -NoPackageAnalysis -NonInteractive'.\nAttempting to build package from 'poshgit.nuspec'.\nSuccessfully created package 'C:\\code\\mine\\chocolatey-packages\\manual\\poshgit\\poshgit.0.4.0.20120717.nupkg'.\nC:\\code\\mine\\chocolatey-packages\\manual\\poshgit>echo %ERRORLEVEL%\n0\n```\npowershell:\nC:\\code\\mine\\chocolatey-packages\\manual\\poshgit [master]> cpack -debug\nDEBUG: Running 'Append-InstallLog' with chocoInstallLog:''\nDEBUG: Arguments: $command = 'pack'|$force=False\n|$prerelease=False|$packageNames=''\n|$source=''\n|$version=''|$allVersions=False\n|$overrideArguments=False|$InstallArguments=''\n|$localonly=False|$verbosity=False|$debug=True|$quiet=False\n|$name=''|$ignoreDependencies=False|$forceX86=False\n|$packageParameters=''\n|PowerShellVersion=2.0|OSVersion=6.1.7601.65536\nDEBUG: Current Security Protocol - Ssl3, Tls\nDEBUG: Running 'Chocolatey-Pack' for . If nuspec name is not passed, it will find the nuspec file in the current working directory\nCalling 'C:\\ProgramData\\chocolatey\\chocolateyInstall\\nuget.exe pack  -NoPackageAnalysis -NonInteractive'.\nAttempting to build package from 'poshgit.nuspec'.\nSuccessfully created package 'C:\\code\\mine\\chocolatey-packages\\manual\\poshgit\\poshgit.0.4.0.20120717.nupkg'.\nC:\\code\\mine\\chocolatey-packages\\manual\\poshgit [master]> echo $LASTEXITCODE\n0\n. It looks like you have a problem due to this line:\n\nPS X:\\build\\Intelliplan.Svc> cpack\nThe system cannot find the path specified.\n. On a different system with 0.9.8.27 installed:\n\nC:\\code\\mine\\chocolatey-packages\\manual\\poshgit>choco\nSource chocolatey already disabled\nSource chocolateyHttp already exists\nPlease run chocolatey /? or chocolatey help - chocolatey v0.9.8.27\ncmd.exe:\n```\nC:\\code\\mine\\chocolatey-packages\\manual\\poshgit>cpack\nSource chocolatey already disabled\nSource chocolateyHttp already exists\nCalling 'C:\\Documents and Settings\\All Users\\Application Data\\chocolatey\\chocola\nteyinstall\\nuget.exe pack  -NoPackageAnalysis -NonInteractive'.\nAttempting to build package from 'poshgit.nuspec'.\nSuccessfully created package 'C:\\code\\mine\\chocolatey-packages\\manual\\poshgit\\po\nshgit.0.4.0.20120717.nupkg'.\nC:\\code\\mine\\chocolatey-packages\\manual\\poshgit>echo %ERRORLEVEL%\n0\n```\npowershell:\nPS C:\\code\\mine\\chocolatey-packages\\manual\\poshgit> cpack\nSource chocolatey already disabled\nSource chocolateyHttp already exists\nCalling 'C:\\Documents and Settings\\All Users\\Application Data\\chocolatey\\chocola\nteyinstall\\nuget.exe pack  -NoPackageAnalysis -NonInteractive'.\nAttempting to build package from 'poshgit.nuspec'.\nSuccessfully created package 'C:\\code\\mine\\chocolatey-packages\\manual\\poshgit\\po\nshgit.0.4.0.20120717.nupkg'.\nPS C:\\code\\mine\\chocolatey-packages\\manual\\poshgit> echo $LastExitCode\n0\n. > Could it be that cpack gives me an error message at the start of the operation?\nI think that is precisely it, but why are you getting this? Close and reopen your shell once you install.\n. Is it just cpack that spews the message?\nTry this, call choco pack.\n. I need the output of the following commands:\nGet-ItemProperty \"hklm:\\Software\\Microsoft\\Command Processor\"\nGet-ItemProperty \"hklm:\\Software\\Wow6432Node\\Microsoft\\Command Processor\"\nGet-ItemProperty \"hkcu:\\Software\\Microsoft\\Command Processor\"\n&where.exe cpack \ncmd\nI think you have something set to run automatically when you start up the cmd.exe, which is causing your errors.\n. Closing this as an environmental issue until I hear back (as it appears local to your system).\n. @haf About two weeks ago I would not have known to do that either. \n. That should probably be putting ansicon somewhere with less changes.... \n. @carolynvs apologies, somehow this fell of my radar. \n- src/functions are things subject to be completely absorbed into c# and thus not open for API usage.\n- src/helpers/functions are things that are usually part of the published api (that the chocolateyinstaller.psm1 publishes) that folks can depend on being there as a powershell function.\n. This implements #307 \n. @carolynvs I went with a bit of an easier fix for now. It helps with when package maintainers are also not using our defined functions and using $env:TEMP in their scripts. \n. I just pushed 0.9.8.29-beta1 with the functionality in it.\n. Would be nice right? Yeah, we need the client to understand when it can't reach the server... I think it says right now that the site is unreachable in debug output?\n. @Redsandro I know you well enough now to know you almost always are in jest. :)\n\nPS - The :poop: was a joke, not a flame.\n\nShould have said:\nPS - The :poop: was a joke, not a defecation.\n. This is already done in the C# rewrite...\n. - You are on an older version of chocolatey. Please upgrade and see if this is still an issue.\n1. I've never seen that happen before (installing the wrong package). Ever. It could have been an Issue with your source (I've never seen private.feed.ca), which explains a problem. Do you trust that source? \n2. I don't think there is a bug in the matching algorithm, I think it's related to that feed doing something completely wonky.\nPerhaps the client should do a better job with feeds, but the problem here is with the feed doing the wrong thing, not with chocolatey doing the wrong thing. \nLet's update this issue a bit to something more workable regarding the client doing an id match versus what was requested.\n. What I'd need from you is a -debug output and fiddler output.\n. Might want to make sure it is https://plus.google.com/+RobReynolds_FerventCoder/ \n. That's not really a good looking error at all. :-1: \nAny chance you would run with -debug and post output here?\n. Also, this may or may not have to do with a fresh install of the .net framework. It can get finicky after just being installed and sitting on a pending reboot and refuse to cooperate. So it might just need a reboot?\n. Don't have a tag for not reproducible... \n. windows--\n. I recently changed it to installertype. That was my bad, changing it before\nthe source code catches up. The field is moving from just a filetype to\nsomething more. The existing values will still be compatible though.\nOn Thursday, August 28, 2014, Mike Zboray notifications@github.com wrote:\n\nSome of the documentation pages are out of date with respect to the source\ncode. An example:\nHelpersInstallChocolateyPackage\nhttps://github.com/chocolatey/chocolatey/wiki/HelpersInstallChocolateyPackage\nlists the parameter as $installerType - but in the source\nhttps://github.com/chocolatey/chocolatey/blob/361389bbd0be287fff563de5112583dafd88282a/src/helpers/functions/Install-ChocolateyPackage.ps1\nit is called $fileType.\nI was prompted to created this issue from this SO question\nhttp://stackoverflow.com/a/25541837/517852.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/561.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Chocolatey is in beta, and by v1 it won't need to have an uninstall script except for areas where folks want/need to do extra work. \nFor the most part, most packages don't do more than the native installer does, so simply going to programs and features and removing the software removes it from the machine, one just needs to also remember to remove the package files.\n. Would you rather work be put into this or into making it unnecessary?\n. Ah, but if they don't do anything outside of chocolatey install boundaries, choco uninstall cleans it right up. This is the case of atom (except maybe the desktop shortcut).\n. MinGW and CygWin I can see needing something to help cleanup, but I am not familiar with cwrsync.\n. Agreed. This will get better. My hope has always been to be able to inspect the chocolatey install and see what was done and do the opposite in some respects. \n. @JVimes perhaps you can help me on that. I don't know that I ever changed the default value of .txt files, but I don't have the context menu entries for new files in Windows 2012R2. I wonder if it was removed?\n. Don't worry about the appveyor failure. It's going to fail for awhile methinks...\n. There are some tests that seem to fail in that environment. I need to get to the bottom of those.\n. https://ci.appveyor.com/project/ferventcoder/chocolatey/build/1.0.5  - would be neat to see the test output show up but it is not adding the test output file for some reason.\n. @gep13 I thought I could just use artifacts but apparently not...\n. @mwrock Right. That's what I was trying to say before. The failures are not related to your pull request, so feel free to ignore those.\n. Duplicate of https://github.com/chocolatey/chocolatey/issues/5\n. > This is a general query about apt-like functionality that I can't find. Either I've missed it or the query will evolve into some enhancement requests ;)\nIt's possible some or all of this isn't included due to differences between Chocolatey and Windows versus Debian and *nix.\n\nWith the choco update command, is it possible to do some/any of the following?\n1. get an indication before downloading how much will be downloaded\n\nUnfortunately most packages only contain instructions on where to go download items from the official distribution point. Chocolatey operates without the need for -y presently, so it's hard to see ahead of time without adding in a switch. It would also need to download the packages themselves to get an indication of what they are going to need to download prior to giving an accurate estimate. Some packages contain everything they need though, so it makes it hard to get an exact indication without downloading some packages. I think it's possible this could be implemented though, but probably not by v1.\n\n2 failing that, get an indication before downloading which packages will be updated\n\nAdding in an indication is definitely possible, but I think that chocolatey first needs to be able to update package indexes.\n\n3 interrupt a download and resume later\n\nI could see this at some point, but probably not by v1. \n\n4 request a download only (no installation)\n\nThis definitely needs to be written down as a feature. Plans are in mind to implement this in the rewrite, but I'm not sure it's been added as a feature.\n\n5 install from a previous download only (don't attempt to download at all - \"offline mode\")\n\nIt already does this as of 0.9.8.24.\n\n6 get a report of release notes for downloaded packages (ok, this is a feature of apt-listchanges not core apt :)\n\nInteresting. This is definitely something that could be added. Probably after v1 though.\n. Done, but over here https://github.com/chocolatey/choco/releases.atom\n. Agreed.\n. I wonder if the chocolateyInstall.ps1 is swallowing the error... \n. @warnergodfrey @bmedlin I believe this was just fixed by @mwrock  in a recent PR.\n. #658 \n. @mwrock where would you put that bit of code?\n. @mwrock nevermind, found a good spot. :)\n. Where did you get \\ in front of @powershell ?\n. Please move this over to https://github.com/chocolatey/chocolatey.org\n. awesome! \n. Actually we put in a fix just to address a bug in PS v3 with not waiting processes...\n. It's possible it's something in there that is messed up? https://github.com/chocolatey/chocolatey/pull/516\n. No, it appears #516 caused this issue :)\n. it's already done in the rewrite.\n. #595 #253 \n. @Stanzilla it's not yet FOSS but it will be soon.\n. Closing as a duplicate.\n. This isn't exactly a duplicate but yeah. \n. This looks like a package issue. It seems like it would be much better served to make the comment on the disqus thread on the package page itself for others who may run into this issue?\n. @smikims packages can change environment variables. If they have an underlying installer they can do just about anything.\n. Ahhh virus scanners. You can't live with them, you can't live without them. :/\n. I wonder if we could get something there that allows it to wait on a lock...\n. This won't be fixed in powershell. The posh version is at its limit. The new c# version is almost done.\n. @fibric We'll see if this remains an issue once the new c# version comes out. I expect many of the logged issues to just close as non-issues once that happens. This may be one of them.\n. @Stanzilla Repo is not publicly available yet. For ETA, I'd suggest signing up for the newsletter. :)\n. This looks like a problem with the package itself. Please follow up on the package page at https://chocolatey.org/packages/xampp\n. Need a debug log. \nCall with -debug\n. Uninstall has .... ...issues. :/ The order of execution in the POSH chocolatey could be part of the issue... \n. It looks like this has broken some tests. https://ci.appveyor.com/project/ferventcoder/chocolatey/build/1.0.37\n. Also, we have a rewrite coming... I wouldn't suggest pursuing this any further as it will be deprecated in a few weeks for something that works so much better.\n. > ShimGen is non-free proprietary software: https://raw.githubusercontent.com/chocolatey/chocolatey/master/src/tools/shimgen.license.txt\nIt's possible that it could later be offered as a standalone product. I do doubt that it will be a free product though. At the current time we are wanting to see more folks making packages to take advantage of it. \n. If you want to play with this, there is a prerelease https://chocolatey.org/packages/chocolatey/0.9.8.29-alpha1\n. So it works if it finds the path. However the working directory of shimgen doesn't find it appropriately :/\n. > choco install cygwin -debug -overrideArgs '-q -R C:\\tools\\cygwin\n\n-l C:\\tools\\cygwin\\packages -s http://mirrors.kernel.org/sourceware/cygwin'\n\nOverrideArgs is a switch, it just means ONLY use what I pass in for InstallArgs (if documentation is confusing, please let us know how to make it better).\nIf you take a look at the files section of the package http://chocolatey.org/packages/cygwin, you can see what Chocolatey does. \nYou need to run the command like choco install cygwin -debug -overrideArgs -installArgs '-q -R C:\\tools\\cygwin -l C:\\tools\\cygwin\\packages -s http://mirrors.kernel.org/sourceware/cygwin'\nto make it work correctly.\n. I'm going to close this as not an issue, if you feel the docs need work though to better explain, please make further comments and I will reopen it as a documentation issue.\n. It also works for me, but you do have a good point. It should be attempting from https now that we are no longer subject to SNI.\n. Are you subject to a proxy at all?\n. No worries, thanks for following up! \n. Thanks, I think we should have grabbed this but apparently I missed it. I will see what we can work up in new choco.\n. That is not the correct reason we chose to move it. It was related to CVEs\nthat were never made public. It had nothing to do with folks that do not\nknow how to call the right functions. When stuff fails do to folks not\nknowing how to properly call for admin access, the packages should properly\nfail.\nI'm not really sure how you came to that conclusion as the reason but I've\nnever stated as much and I've never heard anyone on the team state as much\neither.\nRegarding the CVE - The old default install location has too many\nprivileges that allows anyone to make changes to pkg installers or do other\nnasty stuff if they get access to a box. There were some other CVEs related\nto domain poisoning that we've also fixed.\nFurther, the old posh version of choco is ending with a new version that is\nfaster and more stable. Not sure if you have seen that yet. You may want to\nsign up for the newsletter if you have not.\nOnce we get the security stuff ironed out, the plan is to allow easier\nnon-admin installations again. But it must be done in a way that is secure\nfor that user and not open to package security issues like before.\nOn Saturday, October 4, 2014, Julian Easterling notifications@github.com\nwrote:\n\nThat has been a sticking point for me as well recently... If you've been\naround chocolatey for a while, you'll remember that the reason it doesn't\ninstall into \"Program Files\" is because the original thought was to not\nrequire \"elevated\" privileges... recent changes have changed the \"default\"\nlocation to \"ProgramData\" and added a warning about execution within a\n\"non-elevated\" shell. This is all because the developers of the install\nscripts inside the packages from the public feed don't take adequate\nprecautions to handle the difference between execution in an elevated and\nnon-elevated shell... It is an unfortunate change in direction for the\nproject. I'm hoping that the OneGet project will take a different approach.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/583#issuecomment-57915881\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. > But if you're going to constantly display a warning that I'm executing in a non-elevated shell even when I just getting a list of packages (clist), I think that the experience is tainted from the start.\nThis is partially an artifact of the posh version. Rather than copy and paste that into several locations, I went with keeping it in one spot. It is a bit annoying to see \n. > Given that Chocolatey is still not a 1.0 product and that I have not seen the new rewrite yet, and to be honest, I'm still waiting to see what the OneGet project does; however, I will sign up for the newsletter as the chocolatey project has made package management on Windows systems much closer to the same experience I have under the Ubuntu systems I manage.\nOneGet is a package manager aggregator. It will contain Chocolatey, NuGet, PSGet, Python and others.\n. Also, here's the archive with a link to the video of the new version - http://us8.campaign-archive1.com/?u=86a6d80146a0da7f2223712e4&id=fde33f421e\n. I believe this is an exact duplicate that we've already filed here\nhttps://github.com/chocolatey/shimgen/issues/1\nOn Sunday, October 5, 2014, Steven Penny notifications@github.com wrote:\n\nUsing the jq package http://chocolatey.org/packages/jq as an example, I\ncan\ncorrectly run a command from chocolatey\\lib\nPS > C:\\ProgramData\\chocolatey\\lib\\jq.1.0.3\\tools\\jq -n '\\\"hello world\\\"'\n\"hello world\"\nHowever the same command chocolatey\\bin creates an error\nPS > C:\\ProgramData\\chocolatey\\bin\\jq -n '\\\"hello world\\\"'\nerror: hello is not defined\nhello1 compile error\nTo get it to work I have to add extra backslashes\nPS > C:\\ProgramData\\chocolatey\\bin\\jq -n '\\\"hello world\\\"'\n\"hello world\"\nI feel that \\\"hello world\\\" should work either way.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/584.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. It's actually the packages that are doing it wrong, not the shim. https://github.com/chocolatey/chocolatey/wiki/CreatePackages#how-do-i-set-up-batch-redirects-for-applications-that-have-a-gui\nPlease contact the owners of those packages and provide the link.\n. Closing for now as this appears to be something with the packages themselves.\n. As an enhancement here, I added https://github.com/chocolatey/shimgen/issues/13 and fixed it  for 0.9.9 - https://github.com/chocolatey/choco/commit/fac7727b183f44b217cc064486171404c30b6622\n. Sweet... glad this is not an issue.\n. You can easily get the path to the file using $installDir = \"$(Split-Path -parent $MyInvocation.MyCommand.Definition)\" - https://github.com/chocolatey/chocolateytemplates/blob/master/_templates/chocolatey3/NAME.portable/tools/chocolateyInstall.ps1#L8\n. This is a good idea though.\n. We upgraded to the 2.8.2 at .24 I believe.\n. I noticed this, they have not responded quickly to any of my findings recently.\nI'm not sure it's case sensitive, but in the way it works with the source.\nI'm not sure this is an issue with the choco.exe version of chocolatey, it doesn't use that horrendous tryfindpackage method that 2.8.2 uses.\n. Here's a couple I've logged:\n- https://nuget.codeplex.com/workitem/4285\n- https://nuget.codeplex.com/workitem/4262\n. @codearoo can you let me know if this is still an issue with the latest prerelease of choco (put it on a canary system, it's choco.exe).\n. I'm going to call it fixed for now pending your response.\n. Sorry, I meant with version 0.9.9 (prerelease). Test on a non production\nsystem please. It would be great if this can be closed with 0.9.9, I\nbelieve it is fixed, I just don't have a source like proget that has this\nissue.\nOn Wednesday, January 28, 2015, codearoo notifications@github.com wrote:\n\nYes this still is not fixed. I just tested on ver .32.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/589#issuecomment-71832010\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Why I asked for you not to do it on a prod system. Downgrading requires\nremoving some files, although you can probably just use the\nchocolatey.org/install.ps1 script and it should work.\nOn Wednesday, January 28, 2015, Gary Ewan Park notifications@github.com\nwrote:\n\nI didn't know how to find this alpha pre-release page.\nFrom any package version page, i.e:\nhttps://chocolatey.org/packages/chocolatey/0.9.8.32\nScroll to the bottom, and you will see:\n[image: image]\nhttps://cloud.githubusercontent.com/assets/1271146/5938971/b46c68e2-a6f7-11e4-8f01-32e884b8651c.png\nWhere you can then see all available package versions, including\npre-release.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/589#issuecomment-71840294\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Let me know if it doesn't work. It should. I haven't tried a choco install chocolatey --version 0.9.8.32 --force\n. Although doing exactly that seems to have worked for me.\n\n. Interestingly enough, I would have thought there would be more output from the install.\n. Show me the chocolateyInstall.ps1 file? \nI think you need to remove the $url64 completely.\n. It's a bug then... \n. Curious about the actual PATH - like in the registry or in Control Panel -> System.\nBoth PowerShell and Cmd.exe are very limited in their ability to refresh environment variables. \n. This is fixed by https://github.com/chocolatey/choco/issues/303 I believe, and further fixed by https://github.com/chocolatey/choco/issues/699\n. Yep, it's because you call chocolatey, it starts a child session of cmd.exe then powershell.exe - and that gets updated. Which works appropriately if you are installing something that depends on something else being on the path because during that session everything is updated. \n. To see it on your path in posh, you need to exit and come back in. We are working on getting Update-Session where you can call it for updating your environment as well.\n. We are going to be adding a module for update-sessonenvironment so you can do this in powershell. Look for that over in https://github.com/chocolatey/choco\n. I'd prefer it be compatible all the way back to posh v2 unless there is some requirement to be with posh v3+\n. Closed by updating all three locations.\n. This may be a dupe\n. #253 \n. Yikes, yeah. The benefit of putting downloads stuff in the temp folder is that the bigger stuff goes away with cleaning the temp folder out.\nHowever the packages (lib) folder will start to get smaller with one package version in/one out for upgrades and stuff. In choco rewrite this is the default.\n. Closed as a duplicate. Sorry, mentioned that awhile ago. Just doing some issue triage and noticed it was still open. \n. Appreciate the thoughts. However we are rewriting chocolatey, which is why we ask in contributing that you contact us first to get buy off on a feature before you start working on it. \nThis looks like an interesting feature though. I'd like to get some input on it later as it relates to the rewrite (which is c#).\n. I think ultimately being able to do an install from a web server with an open index should be doable.\n. So I am curious. Is it causing problems or more just an annoyance?\n. We are rewriting chocolatey as an exe so you won't have any bats that are subject to this issue. :)\n. #602 closes this. Thanks!\n. Thanks! \n. @kaiaie what version of posh do you have installed on Win2008?\nAlso, we tweaked an issue with this in the current release (released a few hours ago - 0.9.8.28) - it's possible that you won't see the process id issues on the latest version.\n. It looks like it is erroring on the line that tries to wait the process if it is still running (which has a try catch) but I think it might actually be something else. It's hard to say. \n. What happens if you try to install the app without chocolatey in the equation on one of the failing systems?\n. I believe I just fixed this - It will be testable in choco 0.9.9-rc8 and above.\n. @cleung2010 I see how this may look like a similar issue but it doesn't appear to be. You may want to remove the try catch from around the chocolatey script so you get a better handle on where the error is occurring. It looks like something in the package itself. Also any issues with choco belong at https://github.com/chocolatey/choco/issues, not over here. Thanks!\n. @cleung2010 thanks, I will follow up over there.\n. @lmayorga1980 try -ia - that's the short version of installargs\n. That is a command/batch issue and will not exist in the new compiled version of choco. It's an annoyance at best, but it is an issue with using batch files. The underlying process gets orphaned, but it still knows about it, so it keeps asking if you want to terminate the process.\nYou can observe this behavior by pulling up Process Explorer (Sysinternals)\n. Other tools that use .cmd/.bat files that call out to executables will display this same behavior.\nI'm closing this as a non-issue. A message would be good, but this issue should not exist in the new version of choco.exe.\n. There you go, XML code. ;)\n. I think this may be similar to #589 and #544\n. Calling this closed as a duplicate, plus I think it is fixed in choco.exe.\n. Import the chocolateyInstaller.psm1 file in %chocolateyinstall%\\chocolateyinstall\\helpers\n. @svnpenn #3 is no longer an issue with choco.exe, it works now. The creating packages story is starting to get smoother, expect more plus ups this winter. Of course choco.exe needs to get finished....\n. No you are good. The rewrite stuff isn't out yet. There isn't anything public to play with. We are going to FOSS it soon.\n. @lonniev raise a new issue for that please. Thanks! \n. 1. create chocolateyInstall.ps1\n2. call choco install pkg.nuspec --force\n. FYI - https://github.com/chocolatey/choco\n. @jmbeach Howdy. It looks like you are missing something. However if you want to follow up, let's do that over at https://github.com/chocolatey/choco.. That answers the question. Uninstall is very naive. Recommend you would uninstall prior to upgrade or wait for the c# version which will be out soon. It does a much better job of handling older versions, upgrades and uninstalls.\n. That's an interesting issue. This looks like it might be something with https://github.com/chocolatey/puppet-chocolatey though. Thoughts?\n. Can you run that with --debug --verbose --trace and post the output?\n. ==> default: Wrapped exception:\n==> default: Execution of 'C:\\ProgramData\\chocolatey\\chocolateyInstall\\chocolatey.cmd install siteminder -version 12.51 -ia \"-f C:\\Temp\\siteminder-12.51-win64.properties\" -source http://myserver/nuget' returned 1: Chocolatey (v0.9.8.28) is installing 'siteminder' and dependencies. By installing you accept the license for 'siteminder' and each dependency you are installing.\n==> default:  \n==> default: siteminder v12.51\n==> default: Installing siteminder...\n==> default: siteminder has been installed.\n==> default: siteminder has finished successfully! The chocolatey gods have answered your request!\n==> default: siteminder has finished successfully! The chocolatey gods have answered your request!\n==> default: Finished installing 'siteminder' and dependencies - if errors not shown in console, none detected. Check log for errors if unsure.\n==> default: Chocolatey (v0.9.8.28) is installing 'C:\\Temp\\siteminder-12.51-win64.properties' and dependencies. By installing you accept the license for 'C:\\Temp\\siteminder-12.51-win64.properties' and each dependency you are installing.\n==> default: Second path fragment must not be a drive or UNC name.\n==> default: Parameter name: path2\n==> default: Command 'install' failed (sometimes this indicates a partial failure). Additional info/packages: C:\\Temp\\siteminder-12.51-win64.properties\n==> default:\nWhat happens when you run just \nC:\\ProgramData\\chocolatey\\chocolateyInstall\\chocolatey.cmd install siteminder -version 12.51 -ia \"-f C:\\Temp\\siteminder-12.51-win64.properties\" -source http://myserver/nuget\nMaybe it's an issue with the siteminder installer?\n. Lots of search results, particularly this one about using c:\\ - http://gayotfow.wordpress.com/2014/04/27/second-path-fragment-must-not-be-a-drive-or-unc-name/\nI think it has to do with your install args from the looks of things. Thoughts?\n. @lmayorga1980 I think this might be fixed in the new choco, but the puppet provider would need to be updated first...\n. Yup - https://chocolatey.org/docs/features-automatically-recompile-packages\n. This is closed by https://github.com/chocolatey/choco/issues/108\n. when you run with -debug, where does this fail?\n. This looks actually to be more of an issue with the current PHP package. The download link doesn't work for me. \nAre you experiencing this issue with other packages or just this one?\n. Oh no - it is a package issue, the original download link works. But unfortunately the package itself attempts to check there prior to going to the archives folder. Which would work if it were there.\n. Take a look here: https://chocolatey.org/packages/php#files - I posted this over at https://github.com/ferventcoder/chocolatey-packages/issues/38\nI'm going to close this as not a chocolatey issue. Please followup on the package issue itself.\n. @gep13 no proxy for you I'm afraid. Not something I would have immediately thought to look at either.\n. This repository is for issues with Chocolatey itself. This seems like a package issue. Please follow up directly with those folks through the contact maintainers page on chocolatey.org - https://chocolatey.org/packages/atom OR you can take a shortcut and file the issue here: https://github.com/atom/chocolatey/issues\n. Try this instead - choco install chocolatey\n. Not sure why but sometimes it gets a bit weird about version differences.\n. This is a duplicate of #122 \n. I'm thinking a file named something like .bins that points to a relative path in the package where all of the exe/batch files are. If found, choco will only evaluate this file (but .gui and .ignore files will still be used).\n. Actually scratch that name, nuget has a bug on names of files/folders that start with dot .. It's a really stupid limitation, I don't remember if we override it with choco.exe or not.\n. @jberezanski agreed. \nAnd I think ultimately extending the nuspec schema. We are definitely going in that direction.\n. sure why not... \n. Target stable\nOn Monday, November 24, 2014, Gary Ewan Park notifications@github.com\nwrote:\n\n[image: :+1:] cool, I can take care of this one. Hopefully get to it\ntonight.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/621#issuecomment-64157443\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. And look at Justin's PR related to this to auto add these.\nOn Monday, November 24, 2014, Rob Reynolds ferventcoder@gmail.com wrote:\n\nTarget stable\nOn Monday, November 24, 2014, Gary Ewan Park notifications@github.com\n\u0002amp\u0003#106;\u0002amp\u0003#97;\u0002amp\u0003#118;\u0002amp\u0003#97;\u0002amp\u0003#115;\u0002amp\u0003#99;\u0002amp\u0003#114;\u0002amp\u0003#105;\u0002amp\u0003#112;\u0002amp\u0003#116;\u0002amp\u0003#58;\u0002amp\u0003#95;\u0002amp\u0003#101;\u0002amp\u0003#40;\u0002amp\u0003#37;\u0002amp\u0003#55;\u0002amp\u0003#66;\u0002amp\u0003#37;\u0002amp\u0003#55;\u0002amp\u0003#68;\u0002amp\u0003#44;\u0002amp\u0003#39;\u0002amp\u0003#99;\u0002amp\u0003#118;\u0002amp\u0003#109;\u0002amp\u0003#108;\u0002amp\u0003#39;\u0002amp\u0003#44;\u0002amp\u0003#39;\u0002amp\u0003#110;\u0002amp\u0003#111;\u0002amp\u0003#116;\u0002amp\u0003#105;\u0002amp\u0003#102;\u0002amp\u0003#105;\u0002amp\u0003#99;\u0002amp\u0003#97;\u0002amp\u0003#116;\u0002amp\u0003#105;\u0002amp\u0003#111;\u0002amp\u0003#110;\u0002amp\u0003#115;\u0002amp\u0003#64;\u0002amp\u0003#103;\u0002amp\u0003#105;\u0002amp\u0003#116;\u0002amp\u0003#104;\u0002amp\u0003#117;\u0002amp\u0003#98;\u0002amp\u0003#46;\u0002amp\u0003#99;\u0002amp\u0003#111;\u0002amp\u0003#109;\u0002amp\u0003#39;\u0002amp\u0003#41;\u0002amp\u0003#59; wrote:\n\n[image: :+1:] cool, I can take care of this one. Hopefully get to it\ntonight.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/621#issuecomment-64157443\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. I think you want to use the general idea but not the commits. Otherwise it would have already been pulled in.\n. Closing as duplicate of #230.\n. Awesome. Yeah that would have been interesting for it to be an issue.\n. Yeah, easy enough to remove...\n. Can you please give the output of another item? Atom has possible known\nissue.\nOn Wednesday, November 26, 2014, Luciano Paciornick \nnotifications@github.com wrote:\n\nHello,\nI tried updating a bunch of packages today, and apparently all that use\nStart-ChocolateyProcessAsAdmin fail. Examples include Oracle VirtualBox,\nCCleaner and Atom. I've updated Chocolatey to the latest version and tried\nrebooting the computer, but to no avail.\nHere is the log for \"choco update atom -debug\":\nDEBUG: Running 'Append-InstallLog' with chocoInstallLog:''\nDEBUG: Arguments: $command = 'update'|$force=False\n|$prerelease=False|$packageNames='atom'\n|$source=''\n|$version=''|$allVersions=False\n|$overrideArguments=False|$InstallArguments=''\n|$localonly=False|$verbosity=False|$debug=True|$quiet=False\n|$name=''|$ignoreDependencies=False|$forceX86=False\n|$packageParameters=''\n|PowerShellVersion=4.0|OSVersion=6.1.7601.65536\nDEBUG: Current Security Protocol - Ssl3, Tls\nDEBUG: Running 'Chocolatey-Update' for 'atom' with source:''.\nDEBUG: Running 'Chocolatey-Version' for atom with source:''.\nDEBUG: Getting local packages based on all or passed in package name\nDEBUG: Running 'Chocolatey-List' with selector: 'atom', source:'C:\\ProgramData\\Chocolatey\\lib'\nDEBUG: Showing prerelease versions of packages\nDEBUG: Executing command [\"C:\\ProgramData\\Chocolatey\\chocolateyinstall\\nuget.exe\" list \"atom\" -Prerelease -NonInteractive -Source\n\"C:\\ProgramData\\Chocolatey\\lib\"]\nDEBUG: Command [\"C:\\ProgramData\\Chocolatey\\chocolateyinstall\\nuget.exe\" list \"atom\" -Prerelease -NonInteractive -Source\n\"C:\\ProgramData\\Chocolatey\\lib\"] exited with '0'.\nDEBUG: Getting atom from returned local list\nDEBUG: Running 'Chocolatey-List' with selector: 'Atom', source:''\nDEBUG: Running 'Get-ConfigValue' with configValue:'useNuGetForSources'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'useNuGetForSources'\nDEBUG: After checking the user config the value of 'useNuGetForSources' is ''\nDEBUG: Value not found in the user config file - checking the global config\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'useNuGetForSources'\nDEBUG: After checking the global config the value of 'useNuGetForSources' is 'false'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'sources'\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'sources'\nDEBUG: Using global sources\nDEBUG: Using '-Source \"https://chocolatey.org/api/v2/;\"' as the source arguments\nDEBUG: Executing command [\"C:\\ProgramData\\Chocolatey\\chocolateyinstall\\nuget.exe\" list \"Atom\" -NonInteractive -Source\n\"https://chocolatey.org/api/v2/;\"]\nDEBUG: Command [\"C:\\ProgramData\\Chocolatey\\chocolateyinstall\\nuget.exe\" list \"Atom\" -NonInteractive -Source \"https://chocolatey.org/api/v2/;\"] exited with '0'.\nDEBUG: Getting Atom from returned remote list\nDEBUG: Long version of 0.150.0 is '000000000000.000000000150.000000000000'\nDEBUG: Long version of 0.127.0 is '000000000000.000000000127.000000000000'\nUpdating Atom from 0.127.0 to 0.150.0\nDEBUG: Running 'Chocolatey-NuGet' for Atom with source:''. Force? False\nChocolatey (v0.9.8.28) is installing 'Atom' and dependencies. By installing you accept the license for 'Atom' and each dependency you are installing. DEBUG: Installing packages to \"C:\\ProgramData\\Chocolatey\\lib\".\nDEBUG: Running 'Run-NuGet' for Atom with source: '', version:''\nDEBUG:  NuGet _\nDEBUG: Running 'Get-ConfigValue' with configValue:'useNuGetForSources'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'useNuGetForSources'\nDEBUG: After checking the user config the value of 'useNuGetForSources' is ''\nDEBUG: Value not found in the user config file - checking the global config\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'useNuGetForSources'\nDEBUG: After checking the global config the value of 'useNuGetForSources' is 'false'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'sources'\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'sources'\nDEBUG: Using global sources\nDEBUG: Using '-Source \"https://chocolatey.org/api/v2/;\"' as the source arguments\nDEBUG: Calling 'C:\\ProgramData\\Chocolatey\\chocolateyinstall\\nuget.exe' install Atom -OutputDirectory \"C:\\ProgramData\\Chocolatey\\lib\" -Source\n\"https://chocolatey.org/api/v2/;\" -NonInteractive -NoCache\nDEBUG: Installing 'Atom 0.150.0'.\nSuccessfully installed 'Atom 0.150.0'.\nDEBUG: Evaluating NuGet output for line: Installing 'Atom 0.150.0'.\nDEBUG: Evaluating NuGet output for line: Successfully installed 'Atom 0.150.0'.\nDEBUG: NuGet installed Atom. If we are ignoring dependencies (False) then we will clean this up.\nAtom v0.150.0\nDEBUG: Running 'Delete-ExistingErrorLog' for Atom\nDEBUG: Looking for failure log at 'C:\\TEMP\\chocolatey\\Atom\\failure.log'\nDEBUG: Running 'Run-ChocolateyPS1' for Atom with packageFolder:'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0', action: 'install'\nDEBUG:    PowerShell install (chocolateyinstall.ps1) \nDEBUG:   Looking for chocolateyinstall.ps1 in folder 'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0'. If chocolateyinstall.ps1 is found, it will be run. DEBUG: Action file is 'chocolateyInstall.ps1'\nDEBUG: Running 'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\chocolateyInstall.ps1'\nDEBUG: Running 'Install-ChocolateyZipPackage' for Atom with url:'https://github.com/atom/atom/releases/download/v0.150.0/atom-windows.zip',\nunzipLocation: 'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools', url64bit:\n'https://github.com/atom/atom/releases/download/v0.150.0/atom-windows.zip', specificFolder: '', checksum: '', checksumType: '', checksum64: '',\nchecksumType64: ''\nDEBUG: Running 'Get-ChocolateyWebFile' for Atom with url:'https://github.com/atom/atom/releases/download/v0.150.0/atom-windows.zip',\nfileFullPath:'C:\\TEMP\\chocolatey\\Atom\\AtomInstall.zip', url64bit:'https://github.com/atom/atom/releases/download/v0.150.0/atom-windows.zip', checksum: '', checksumType: '', checksum64: '', checksumType64: ''\nDEBUG: Running 'Get-ProcessorBits'\nDEBUG: CPU is 64 bit\nDEBUG: Setting url to 'https://github.com/atom/atom/releases/download/v0.150.0/atom-windows.zip' and bitPackage to 64\nDEBUG: Running 'Get-WebHeaders' with url:'https://github.com/atom/atom/releases/download/v0.150.0/atom-windows.zip', userAgent: 'chocolatey command\nline'\nDEBUG: Setting the UserAgent to 'chocolatey command line'\nDEBUG: Request Headers:\nDEBUG:   'Accept':'/'\nDEBUG:   'User-Agent':'chocolatey command line'\nDEBUG: Response Headers:\nDEBUG:   'x-amz-id-2':'Ko7mATqJa7dnWSKclROqP9RV02DyP0ONIxxkt5optFE6/nlGjd1U5GWgaVVMos8r'\nDEBUG:   'x-amz-request-id':'9467462CF6ADF6DB'\nDEBUG:   'x-amz-meta-surrogate-control':'max-age=31557600'\nDEBUG:   'x-amz-meta-surrogate-key':'repository-3228505 user-3697332'\nDEBUG:   'Content-Disposition':'attachment; filename=atom-windows.zip'\nDEBUG:   'Accept-Ranges':'bytes'\nDEBUG:   'Content-Length':'70043976'\nDEBUG:   'Cache-Control':'max-age=31557600'\nDEBUG:   'Content-Type':'application/octet-stream'\nDEBUG:   'Date':'Wed, 26 Nov 2014 19:40:55 GMT'\nDEBUG:   'ETag':'\"b4b2e352dd83071d8b55b53f7daa2d19\"'\nDEBUG:   'Last-Modified':'Thu, 20 Nov 2014 20:29:33 GMT'\nDEBUG:   'Server':'AmazonS3'\nDEBUG: Atom's requested file has already been downloaded. Using cached copy at\n  'C:\\TEMP\\chocolatey\\Atom\\AtomInstall.zip'.\nDEBUG: Checking that 'C:\\TEMP\\chocolatey\\Atom\\AtomInstall.zip' is the size we expect it to be.\nDEBUG: Verifying package provided checksum of '' for 'C:\\TEMP\\chocolatey\\Atom\\AtomInstall.zip'.\nDEBUG: Running 'Get-CheckSumValid' with file:'C:\\TEMP\\chocolatey\\Atom\\AtomInstall.zip', checksum: '', checksumType: ''\nDEBUG: Running 'Get-ChocolateyUnzip' with fileFullPath:'C:\\TEMP\\chocolatey\\Atom\\AtomInstall.zip'', destination:\n'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools', specificFolder: ', packageName: 'Atom'\nExtracting C:\\TEMP\\chocolatey\\Atom\\AtomInstall.zip to C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools...\nDEBUG: wrapping 7za invocation with Write-FileUpdateLog\nDEBUG: Running 'Write-FileUpdateLog' with logFilePath:'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\AtomInstall.zip.txt'',\nlocationToMonitor:C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools, Operation: '\n    param($7zip, $destination, $fileFullPath, [ref]$exitCodeRef)\n    $process = Start-Process $7zip -ArgumentList \"x -o\"$destination\" -y\"$fileFullPath`\"\" -Wait -WindowStyle Hidden -PassThru\n    # this is here for specific cases in Posh v3 where -Wait is not honored\n    try { if (!($process.HasExited)) { Wait-Process -Id $process.Id } } catch { }\n$exitCodeRef.Value = $process.ExitCode\n'\nDEBUG: Tracking current state of 'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools'\nDEBUG: 7za exit code: 0\nC:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\nAtom has finished successfully! The chocolatey gods have answered your request!\nDEBUG: Running 'Install-ChocolateyShortcut' with parameters ShortcutFilePath: 'C:\\Users\\Luciano.Paciornick\\Desktop\\Atom.lnk', TargetPath:\n'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe', WorkingDirectory: '', Arguments: '', IconLocation: '', Description: ''\nDEBUG: Creating Shortcut...\nDEBUG: Shortcut created.\nInstall-ChocolateyShortcut completed has finished successfully! The chocolatey gods have answered your request!\nDirectory: C:\\Users\\Luciano.Paciornick\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\nMode                LastWriteTime     Length Name\n\nd----        11/26/2014     12:20            GitHub, Inc\nDEBUG: Running 'Install-ChocolateyShortcut' with parameters ShortcutFilePath: 'C:\\Users\\Luciano.Paciornick\\AppData\\Roaming\\Microsoft\\Windows\\Start\nMenu\\Programs\\GitHub, Inc\\Atom.lnk', TargetPath: 'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe', WorkingDirectory: '', Arguments:\n'', IconLocation: '', Description: ''\nDEBUG: Creating Shortcut...\nDEBUG: Shortcut created.\nInstall-ChocolateyShortcut completed has finished successfully! The chocolatey gods have answered your request!\nDEBUG: Running 'Install-ChocolateyExplorerMenuItem' with menuKey:'Atom', menuLabel:'Open with Atom',\ncommand:'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe', type 'file',\niconLocation:'\"C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe\"'\nDEBUG: Running 'Install-ChocolateyExplorerMenuItem' with menuKey:'Atom', menuLabel:'Open Folder with Atom',\ncommand:'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe', type 'directory',\niconLocation:'\"C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe\"'\nDEBUG: Running 'Install-ChocolateyExplorerMenuItem' with menuKey:'Atom', menuLabel:'Open Folder with Atom',\ncommand:'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe', type 'background',\niconLocation:'\"C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe\"'\nDEBUG: Running 'Start-ChocolateyProcessAsAdmin' with exeToRun:'powershell', statements: '\n    if( -not (Test-Path -path HKCR:) ) {New-PSDrive -Name HKCR -PSProvider registry -Root Hkey_Classes_Root};\n    if(!(test-path -LiteralPath 'HKCR:\\shell\\Atom')) { new-item -Path 'HKCR:\\shell\\Atom' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\shell\\Atom' -Name '(Default)'  -Value 'Open with Atom';\n    if(!(test-path -LiteralPath 'HKCR:\\shell\\Atom\\command')) { new-item -Path 'HKCR:\\shell\\Atom\\command' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\shell\\Atom\\command' -Name '(Default)' -Value\n'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe \\\"%1\\\"';\n Set-ItemProperty -LiteralPath 'HKCR:\\shell\\Atom' -Name 'Icon'  -Value '\"C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe\"';;\n    if( -not (Test-Path -path HKCR:) ) {New-PSDrive -Name HKCR -PSProvider registry -Root Hkey_Classes_Root};\n    if(!(test-path -LiteralPath 'HKCR:\\directory\\shell\\Atom')) { new-item -Path 'HKCR:\\directory\\shell\\Atom' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\directory\\shell\\Atom' -Name '(Default)'  -Value 'Open Folder with Atom';\n    if(!(test-path -LiteralPath 'HKCR:\\directory\\shell\\Atom\\command')) { new-item -Path 'HKCR:\\directory\\shell\\Atom\\command' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\directory\\shell\\Atom\\command' -Name '(Default)' -Value\n'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe \\\"%1\\\"';\n Set-ItemProperty -LiteralPath 'HKCR:\\directory\\shell\\Atom' -Name 'Icon'  -Value '\"C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe\"';;\n    if( -not (Test-Path -path HKCR:) ) {New-PSDrive -Name HKCR -PSProvider registry -Root Hkey_Classes_Root};\n    if(!(test-path -LiteralPath 'HKCR:\\directory\\background\\shell\\Atom')) { new-item -Path 'HKCR:\\directory\\background\\shell\\Atom' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\directory\\background\\shell\\Atom' -Name '(Default)'  -Value 'Open Folder with Atom';\n    if(!(test-path -LiteralPath 'HKCR:\\directory\\background\\shell\\Atom\\command')) { new-item -Path 'HKCR:\\directory\\background\\shell\\Atom\\command' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\directory\\background\\shell\\Atom\\command' -Name '(Default)' -Value\n'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe \\\"%V\\\"';\n Set-ItemProperty -LiteralPath 'HKCR:\\directory\\background\\shell\\Atom' -Name 'Icon'  -Value\n'\"C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe\"';'\nDEBUG: Elevating Permissions and running C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoProfile -ExecutionPolicy unrestricted -Command\n\"& import-module -name  'C:\\ProgramData\\Chocolatey\\chocolateyinstall\\helpers\\chocolateyInstaller.psm1'; try{\n    if( -not (Test-Path -path HKCR:) ) {New-PSDrive -Name HKCR -PSProvider registry -Root Hkey_Classes_Root};\n    if(!(test-path -LiteralPath 'HKCR:\\shell\\Atom')) { new-item -Path 'HKCR:\\shell\\Atom' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\shell\\Atom' -Name '(Default)'  -Value 'Open with Atom';\n    if(!(test-path -LiteralPath 'HKCR:\\shell\\Atom\\command')) { new-item -Path 'HKCR:\\shell\\Atom\\command' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\shell\\Atom\\command' -Name '(Default)' -Value\n'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe \\\"%1\\\"';\n Set-ItemProperty -LiteralPath 'HKCR:\\shell\\Atom' -Name 'Icon'  -Value '\"C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe\"';;\n    if( -not (Test-Path -path HKCR:) ) {New-PSDrive -Name HKCR -PSProvider registry -Root Hkey_Classes_Root};\n    if(!(test-path -LiteralPath 'HKCR:\\directory\\shell\\Atom')) { new-item -Path 'HKCR:\\directory\\shell\\Atom' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\directory\\shell\\Atom' -Name '(Default)'  -Value 'Open Folder with Atom';\n    if(!(test-path -LiteralPath 'HKCR:\\directory\\shell\\Atom\\command')) { new-item -Path 'HKCR:\\directory\\shell\\Atom\\command' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\directory\\shell\\Atom\\command' -Name '(Default)' -Value\n'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe \\\"%1\\\"';\n Set-ItemProperty -LiteralPath 'HKCR:\\directory\\shell\\Atom' -Name 'Icon'  -Value '\"C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe\"';;\n    if( -not (Test-Path -path HKCR:) ) {New-PSDrive -Name HKCR -PSProvider registry -Root Hkey_Classes_Root};\n    if(!(test-path -LiteralPath 'HKCR:\\directory\\background\\shell\\Atom')) { new-item -Path 'HKCR:\\directory\\background\\shell\\Atom' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\directory\\background\\shell\\Atom' -Name '(Default)'  -Value 'Open Folder with Atom';\n    if(!(test-path -LiteralPath 'HKCR:\\directory\\background\\shell\\Atom\\command')) { new-item -Path 'HKCR:\\directory\\background\\shell\\Atom\\command' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\directory\\background\\shell\\Atom\\command' -Name '(Default)' -Value\n'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe \\\"%V\\\"';\n Set-ItemProperty -LiteralPath 'HKCR:\\directory\\background\\shell\\Atom' -Name 'Icon'  -Value\n'\"C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe\"'; start-sleep 6;}catch{write-error 'That was not sucessful';start-sleep 8;throw;}\". This may take awhile, depending on the statements.\nWrite-Error : [ERROR] Running C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\powershell.exe with\n    if( -not (Test-Path -path HKCR:) ) {New-PSDrive -Name HKCR -PSProvider registry -Root Hkey_Classes_Root};\n    if(!(test-path -LiteralPath 'HKCR:\\shell\\Atom')) { new-item -Path 'HKCR:\\shell\\Atom' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\shell\\Atom' -Name '(Default)'  -Value 'Open with Atom';\n    if(!(test-path -LiteralPath 'HKCR:\\shell\\Atom\\command')) { new-item -Path 'HKCR:\\shell\\Atom\\command' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\shell\\Atom\\command' -Name '(Default)' -Value 'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe \\\"%1\\\"';\n    Set-ItemProperty -LiteralPath 'HKCR:*\\shell\\Atom' -Name 'Icon'  -Value '\"C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe\"';;\n    if( -not (Test-Path -path HKCR:) ) {New-PSDrive -Name HKCR -PSProvider registry -Root Hkey_Classes_Root};\n    if(!(test-path -LiteralPath 'HKCR:\\directory\\shell\\Atom')) { new-item -Path 'HKCR:\\directory\\shell\\Atom' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\directory\\shell\\Atom' -Name '(Default)'  -Value 'Open Folder with Atom';\n    if(!(test-path -LiteralPath 'HKCR:\\directory\\shell\\Atom\\command')) { new-item -Path 'HKCR:\\directory\\shell\\Atom\\command' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\directory\\shell\\Atom\\command' -Name '(Default)' -Value 'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe \\\"%1\\\"';\n    Set-ItemProperty -LiteralPath 'HKCR:\\directory\\shell\\Atom' -Name 'Icon'  -Value '\"C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe\"';;\n    if( -not (Test-Path -path HKCR:) ) {New-PSDrive -Name HKCR -PSProvider registry -Root Hkey_Classes_Root};\n    if(!(test-path -LiteralPath 'HKCR:\\directory\\background\\shell\\Atom')) { new-item -Path 'HKCR:\\directory\\background\\shell\\Atom' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\directory\\background\\shell\\Atom' -Name '(Default)'  -Value 'Open Folder with Atom';\n    if(!(test-path -LiteralPath 'HKCR:\\directory\\background\\shell\\Atom\\command')) { new-item -Path 'HKCR:\\directory\\background\\shell\\Atom\\command' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\directory\\background\\shell\\Atom\\command' -Name '(Default)' -Value 'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe \\\"%V\\\"';\n    Set-ItemProperty -LiteralPath 'HKCR:\\directory\\background\\shell\\Atom' -Name 'Icon'  -Value '\"C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe\"'; was not successful. Exit code was '121'.\nAt C:\\ProgramData\\Chocolatey\\chocolateyinstall\\helpers\\functions\\Start-ChocolateyProcessAsAdmin.ps1:46 char:5\n-     Write-Error $errorMessage\n-     ~~~~~~~~~~~~~~~~~~~~~~~~~\n  - CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n  - FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nDEBUG: Running 'Move-BadInstall' for Atom version: '0.150.0', packageFolder:'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0'\nWrite-Error : Could not move bad package Atom from 'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0' to 'C:\\ProgramData\\Chocolatey\\lib-bad': Exception calling \"Delete\" with \"2\" argument(s): \"The directory is not empty.\n\"\nAt C:\\ProgramData\\Chocolatey\\chocolateyinstall\\functions\\Move-BadInstall.ps1:21 char:5\n-     Write-Error \"Could not move bad package $packageName from '$packageFolder' ...\n- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  - CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n  - FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nWrite-Error : Package 'Atom v0.150.0' did not install successfully: [ERROR] Running C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\powershell.exe with\n    if( -not (Test-Path -path HKCR:) ) {New-PSDrive -Name HKCR -PSProvider registry -Root Hkey_Classes_Root};\n    if(!(test-path -LiteralPath 'HKCR:\\shell\\Atom')) { new-item -Path 'HKCR:\\shell\\Atom' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\shell\\Atom' -Name '(Default)'  -Value 'Open with Atom';\n    if(!(test-path -LiteralPath 'HKCR:\\shell\\Atom\\command')) { new-item -Path 'HKCR:\\shell\\Atom\\command' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\shell\\Atom\\command' -Name '(Default)' -Value 'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe \\\"%1\\\"';\n    Set-ItemProperty -LiteralPath 'HKCR:*\\shell\\Atom' -Name 'Icon'  -Value '\"C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe\"';;\n    if( -not (Test-Path -path HKCR:) ) {New-PSDrive -Name HKCR -PSProvider registry -Root Hkey_Classes_Root};\n    if(!(test-path -LiteralPath 'HKCR:\\directory\\shell\\Atom')) { new-item -Path 'HKCR:\\directory\\shell\\Atom' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\directory\\shell\\Atom' -Name '(Default)'  -Value 'Open Folder with Atom';\n    if(!(test-path -LiteralPath 'HKCR:\\directory\\shell\\Atom\\command')) { new-item -Path 'HKCR:\\directory\\shell\\Atom\\command' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\directory\\shell\\Atom\\command' -Name '(Default)' -Value 'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe \\\"%1\\\"';\n    Set-ItemProperty -LiteralPath 'HKCR:\\directory\\shell\\Atom' -Name 'Icon'  -Value '\"C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe\"';;\n    if( -not (Test-Path -path HKCR:) ) {New-PSDrive -Name HKCR -PSProvider registry -Root Hkey_Classes_Root};\n    if(!(test-path -LiteralPath 'HKCR:\\directory\\background\\shell\\Atom')) { new-item -Path 'HKCR:\\directory\\background\\shell\\Atom' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\directory\\background\\shell\\Atom' -Name '(Default)'  -Value 'Open Folder with Atom';\n    if(!(test-path -LiteralPath 'HKCR:\\directory\\background\\shell\\Atom\\command')) { new-item -Path 'HKCR:\\directory\\background\\shell\\Atom\\command' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\directory\\background\\shell\\Atom\\command' -Name '(Default)' -Value 'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe \\\"%V\\\"';\n    Set-ItemProperty -LiteralPath 'HKCR:\\directory\\background\\shell\\Atom' -Name 'Icon'  -Value '\"C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe\"'; was not successful. Exit code was '121'.\nAt C:\\ProgramData\\Chocolatey\\chocolateyinstall\\functions\\Chocolatey-NuGet.ps1:90 char:17\n-                 Write-Error \"Package `'$installedPackageName v$installedPackageV ...\n- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  - CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n  - FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nDEBUG: Evaluating NuGet output for line:\nFinished installing 'Atom' and dependencies - if errors not shown in console, none detected. Check log for errors if unsure.\nDEBUG: Running 'Get-ConfigValue' with configValue:'ksMessage'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'ksMessage'\nDEBUG: After checking the user config the value of 'ksMessage' is ''\nDEBUG: Value not found in the user config file - checking the global config\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'ksMessage'\nDEBUG: After checking the global config the value of 'ksMessage' is 'true'\nRegards,\nLuciano.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/625.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. I haven't run into this issue yet, but I will try to repro this next week\nafter the holiday.\nOn Tuesday, December 23, 2014, Luciano Paciornick notifications@github.com\nwrote:\n\n@ferventcoder https://github.com/ferventcoder Any news? I've been\nunable to update several of my Chocolatey-installed applications because of\nthis error...\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/625#issuecomment-67966429\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. I am unable to repro this. Would you folks do me a favor if this is limiting you? Install the RC of 0.9.9 and see if this is still a thing?\n. Sweet. We have a few issues to clear up that should go into an RC6 status, definitely watch for that. Also @cobrabr - you may want to visit the release notes - https://github.com/chocolatey/choco/wiki/ReleaseNotes to see what changes.\n. welcome to a real package manager. :/\n. Use --ignore-dependencies for now. https://github.com/chocolatey/choco/wiki/CommandsUpgrade#options-and-switches\nI think that is probably a bug though. Just FYI.\n. @cobrabr I filed https://github.com/chocolatey/choco/issues/98 \n. interesting.... :/\n. @cobrabr yeah, let's do that - would you mind filing a ticket over on https://github.com/chocolatey/choco/issues/new?\n. https://github.com/chocolatey/choco/issues/101\n. For a long time now. Head to the packages page and sign up.\nOn Wednesday, November 26, 2014, Eric Range notifications@github.com\nwrote:\n\nis it possible to get notifications about new Versions via RSS or Email?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/626.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. \n. Please be more clear next time in your ask. The answer to new versions \"of\ncertain\" packages is that it doesn't exist yet. If you want to file an\nenhancement request, please head over to chocolatey/chocolatey.org and file\na request. Thanks!\nOn Wednesday, November 26, 2014, Eric Range notifications@github.com\nwrote:\n\nthis doesnt make sense?!?! why would i subscribe to all packages?? i just\nneed 2 or 3\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/626#issuecomment-64708035\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Also 402 > 4 so it will show lower in the results.\n4.402 versus 4.4 is where this evaluation happens, adding the third and\nfourth sets of version numbers does not shift everything right, the\nleftmost number is always major, followed by minor version.\nIt may help if you think of it like the following:\n4.402\n4.004.1\nOn Friday, November 28, 2014, Gary Ewan Park notifications@github.com\nwrote:\n\nThis simply means that the package is in the moderation queue, and as a\nresult, it will not be shown to search results. I am looking at the package\nnow, and if it fits all required criteria, it will be approved, otherwise,\nyou will be asked to make changes, and re-published the same version of the\npackage again, with changes.\nGary\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/627#issuecomment-64928469\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Merged into stable at https://github.com/chocolatey/chocolatey/commit/9947bae570efaf4d34027f53e3f371fab6328cd3\n. Is this a docs issue? I don't see this as a code issue. For matters such as this, it is a much better avenue to use the discussion list - chocolatey at googlegroups dot com.\n. @030 move /disablepush further to the left. \n. This is a duplicate of probably a few items. Uninstall is stupidly naive. We are rewriting choco and it doesn't suffer from this. \n. That said, you can just keep calling the uninstall or go to the folder and manually remove those items for now.\n. Duplicate of #389 \n. Apologies if I don't give you a direct answer but after answering the question several times already (all are searchable and readily readable) - I think we just need to document it on the wiki.\n. Also, questions work out much better on the mailing list - chocolatey at googlegroups dot com.\n. You can, if you provide a custom override for write-host. We do... that's how we log the output.\n. https://github.com/chocolatey/chocolatey/blob/master/src/helpers/functions/Write-Host.ps1\n. https://github.com/chocolatey/chocolatey/blob/master/src/helpers/functions/Write-Debug.ps1\n. https://github.com/chocolatey/chocolatey/blob/master/src/helpers/functions/Write-Error.ps1\n. See #416 and #411 \n. Closing as a duplicate\n. You are using an older npm. It is now bundled with Msi and newer versions\nare not released separately. Suggest you install nodejs.install instead.\nOn Monday, December 8, 2014, Ncage1974 notifications@github.com wrote:\n\nI used chocolatey to install node. I then went to install some packaged\nwith npm (using -g global option). Most packages are installed under\nc:\\ProgramData\\chocolatey\\bin and are available immediately. Examples of\npackages that are working correctly are grunt-cli, gulp, & yo. When i\ninstall bower it gets installed in\nC:\\ProgramData\\chocolatey\\lib\\nodejs.commandline.0.10.33\\tools. Of course\nit doesn't work because that directory isn't in my path. While i could\neasily add that to my path i'm thinking that might be a bad idea because as\nnode gets updated there will most likely be a new directory created under\n_\\lib_ with the new version. Is this a chocolatey issues or is this a\nnode/npm issue?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/636.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. What @gep13 said. :)\n. I appreciate the work, but with the rewrite just around the corner, I wouldn't add any new functionality to chocolatey other than in the helpers.\n. Not implementing in this case means not implementing in the current incarnation of Chocolatey.\n. Yes, -x86. It's even in the documentation.\nOn Friday, December 12, 2014, Mindaugas Pielikis notifications@github.com\nwrote:\n\nMySql.Workbench needs vcredist2013 x86. Is there a way to make a\ndependency to be x86?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/639.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Oh wait, I misread. Sorry. Not yet there is not without having a specific\nx86 package.\nOn Friday, December 12, 2014, Mindaugas Pielikis notifications@github.com\nwrote:\n\nMySql.Workbench needs vcredist2013 x86. Is there a way to make a\ndependency to be x86?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/639.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. I think this would be awesome! I am working on a CLA that would be required\nfor us to take something like this in, but if that is fine with you, then\nsweet!\nOn Saturday, December 13, 2014, Julian Krispel-Samsel \nnotifications@github.com wrote:\n\nHi. I'm a designer, frontend developer and windows user. Without\nchocolatey my life would be a lot harder so thank you!\nI sometimes offer free branding services to projects\nhttp://clojurecup.com I really like\nhttps://github.com/swannodette/om/issues/215.\nI'd love to do contribute branding to chocolatey. Let me know if you'd\napprove.\nCheers!\nJulian\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/640.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Yes. Something like that :)\nOn Saturday, December 13, 2014, Julian Krispel-Samsel \nnotifications@github.com wrote:\n\nAwesome! CLA? As in Copyright Licensing Agreement or sth like that?\n\nOn 13 Dec 2014, at 15:23, Rob Reynolds notifications@github.com\n\u0002amp\u0003#106;\u0002amp\u0003#97;\u0002amp\u0003#118;\u0002amp\u0003#97;\u0002amp\u0003#115;\u0002amp\u0003#99;\u0002amp\u0003#114;\u0002amp\u0003#105;\u0002amp\u0003#112;\u0002amp\u0003#116;\u0002amp\u0003#58;\u0002amp\u0003#95;\u0002amp\u0003#101;\u0002amp\u0003#40;\u0002amp\u0003#37;\u0002amp\u0003#55;\u0002amp\u0003#66;\u0002amp\u0003#37;\u0002amp\u0003#55;\u0002amp\u0003#68;\u0002amp\u0003#44;\u0002amp\u0003#39;\u0002amp\u0003#99;\u0002amp\u0003#118;\u0002amp\u0003#109;\u0002amp\u0003#108;\u0002amp\u0003#39;\u0002amp\u0003#44;\u0002amp\u0003#39;\u0002amp\u0003#110;\u0002amp\u0003#111;\u0002amp\u0003#116;\u0002amp\u0003#105;\u0002amp\u0003#102;\u0002amp\u0003#105;\u0002amp\u0003#99;\u0002amp\u0003#97;\u0002amp\u0003#116;\u0002amp\u0003#105;\u0002amp\u0003#111;\u0002amp\u0003#110;\u0002amp\u0003#115;\u0002amp\u0003#64;\u0002amp\u0003#103;\u0002amp\u0003#105;\u0002amp\u0003#116;\u0002amp\u0003#104;\u0002amp\u0003#117;\u0002amp\u0003#98;\u0002amp\u0003#46;\u0002amp\u0003#99;\u0002amp\u0003#111;\u0002amp\u0003#109;\u0002amp\u0003#39;\u0002amp\u0003#41;\u0002amp\u0003#59; wrote:\nI think this would be awesome! I am working on a CLA that would be\nrequired\nfor us to take something like this in, but if that is fine with you,\nthen\nsweet!\nOn Saturday, December 13, 2014, Julian Krispel-Samsel \nnotifications@github.com\n\u0002amp\u0003#106;\u0002amp\u0003#97;\u0002amp\u0003#118;\u0002amp\u0003#97;\u0002amp\u0003#115;\u0002amp\u0003#99;\u0002amp\u0003#114;\u0002amp\u0003#105;\u0002amp\u0003#112;\u0002amp\u0003#116;\u0002amp\u0003#58;\u0002amp\u0003#95;\u0002amp\u0003#101;\u0002amp\u0003#40;\u0002amp\u0003#37;\u0002amp\u0003#55;\u0002amp\u0003#66;\u0002amp\u0003#37;\u0002amp\u0003#55;\u0002amp\u0003#68;\u0002amp\u0003#44;\u0002amp\u0003#39;\u0002amp\u0003#99;\u0002amp\u0003#118;\u0002amp\u0003#109;\u0002amp\u0003#108;\u0002amp\u0003#39;\u0002amp\u0003#44;\u0002amp\u0003#39;\u0002amp\u0003#110;\u0002amp\u0003#111;\u0002amp\u0003#116;\u0002amp\u0003#105;\u0002amp\u0003#102;\u0002amp\u0003#105;\u0002amp\u0003#99;\u0002amp\u0003#97;\u0002amp\u0003#116;\u0002amp\u0003#105;\u0002amp\u0003#111;\u0002amp\u0003#110;\u0002amp\u0003#115;\u0002amp\u0003#64;\u0002amp\u0003#103;\u0002amp\u0003#105;\u0002amp\u0003#116;\u0002amp\u0003#104;\u0002amp\u0003#117;\u0002amp\u0003#98;\u0002amp\u0003#46;\u0002amp\u0003#99;\u0002amp\u0003#111;\u0002amp\u0003#109;\u0002amp\u0003#39;\u0002amp\u0003#41;\u0002amp\u0003#59; wrote:\n\nHi. I'm a designer, frontend developer and windows user. Without\nchocolatey my life would be a lot harder so thank you!\nI sometimes offer free branding services to projects\nhttp://clojurecup.com I really like\nhttps://github.com/swannodette/om/issues/215.\nI'd love to do contribute branding to chocolatey. Let me know if you'd\napprove.\nCheers!\nJulian\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/640.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n\u2014\nReply to this email directly or view it on GitHub.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/640#issuecomment-66878126\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Interesting. I'm really impressed with that latest design. It has less of a blocky feel.\nSome things I like:\n- It captures the essence of a package that is being unwrapped to get to the inside, it's what's inside the package that counts.\n- The design is smooth. This signifies the process is a smooth transition from one state to another.\n- It's simple but not over simplistic. This signifies another essence of choco. A tool that is super simple to use and create packages with.\n- I think you are really starting to capture the essence of Chocolatey (as I described above).\nSome things I'd like you to keep thinking about:\n- It should show a transition of moving from non-real to very real in a sense that you go from a concept of \"choco install\" to having real software on your machine.\n- I'm not in love with the package wrapper color. Would prefer some contrast between the chocolatey goodness in the wrapper but somewhat darker on the wrapping. Should still really stand out against a black background.\n- I'm not sure about the skew. It's interesting and I think I'm starting to like it, but trying to determine if it adds or takes away from the design. I think it adds but I'm still chewing on it a bit.\nFor the packages themselves, I feel that this design would be too much/too long. So perhaps an icon that is necessary as well. Some key points for an icon:\n- It should be square.\n- Still captures the essence of unwrapping a package to get to the goodness inside.\n- Is simple but not over-simplistic.\n- No letters, numbers or words. Should stand out as an icon alone.\n- Looks good at 16x16 all the way up to 512x512. \n- Maybe the current icon captures that already?\n. updated my last set of comments a bit. @juliankrispel This is looking really good!\n. Make the C white?\n. @juliankrispel can you render the last image with a colon so we can get a side by side? https://github.com/chocolatey/chocolatey/issues/640#issuecomment-70228696\n. @juliankrispel color of the wrapping - The lighter color on https://chocolatey.org \n\n. I missed mentioning it but I showed your designs to my wife and kids and they also preferred #8 then #6. \n. We have plans for a redesign of the site - https://github.com/chocolatey/chocolatey.org/issues/149 - your last image fits right in there, although some of that will break out to other pages.\n. I'm digging #8 with the white Chocolatey - I also like #6 quite a bit. With the icon I'm a fan of no colon. 1b with white C is also quite interesting.\n. @juliankrispel yes, Will get with you soon on some website changes...\n. Hi @juliankrispel - checking in. I noticed that the CLA I sent has still not been signed and would like to move forward.\n. Unfortunately I don't have the assets to work with this and Julian appears to be MIA (no email response, not sure if that means I'm falling into his spam folder or something).\nSo I'm attempting to recreate some of this. \nTrying to recreate the font, I'm finding Hummingbird Pro similar to the font above:\n- http://marketplace.veer.com/font/Hummingbird-Bold-UMT9002141?skeywords=script%20or%20handwriting (Set the tracking to -2)\n\nHere are some other interesting fonts:\n- http://marketplace.veer.com/font/Hummingbird-UMT9002083?skeywords=script%20or%20handwriting\n- http://marketplace.veer.com/font/Bernhard-Script-Complete-RRT0011520?skeywords=calligraphy#\n. Alternative font that looks really cool is Jolly Roger:\n- http://marketplace.veer.com/font/Jolly-Roger-RRT0011505?skeywords=calligraphy\n  \n. Byron Bold is also pretty interesting\n- http://marketplace.veer.com/font/Byron-RRT0010014?skeywords=calligraphy\n  \n. Ganache (I already love the name):\n- http://marketplace.veer.com/font/Ganache-UMT9002810?skeywords=script%20or%20handwriting\n  \nProbably would track to -2 or -1 though.\n. Not sure what happened @juliankrispel - I've sent you about 4-5 emails over the last year with no response. I should have just came back here and mentioned so on GitHub as it appears my emails didn't reach you for some reason. :/\n. I have the AI file but it is only has the assets from the very first part of this discussion. Nothing past https://github.com/chocolatey/chocolatey/issues/640#issuecomment-69870283\n. I was not using that email (didn't know that one) and that was likely the problem. The email we were communicating on was your yahoo one (same as listed on your github profile).\n. This is done. Super awesome logo...\n. You should search and watch the video on the new chocolatey. It actually\nhas a help menu that is as you describe - aka a help menu that is actually\nhelpful. :)\nOn Saturday, December 13, 2014, Zenobius Jiricek notifications@github.com\nwrote:\n\nCurrently it looks like this:\nVersion: '0.9.8.28'\nInstall Directory: 'C:\\ProgramData\\chocolatey'\n== Chocolatey? ==\"I'm a tools enabler, a global silent installer. I met your mother. Some want to call me apt-get for Windows, I just want to get #chocolatey!\"\nChocolatey is a package manager for Windows (like apt-get but for Windows).\n It was designed to be a decentralized framework for quickly installing\n applications and tools that you need. It is built on the NuGet\n infrastructure currently using PowerShell as its focus for delivering\n packages from the distros to your door, err computer.\nChocolatey is brought to you by the work and inspiration of the community,\n the work and thankless nights of the Chocolatey Team\n (https://github.com/orgs/chocolatey/members), and Rob (@ferventcoder)\n heading up the direction.\nYou can host your own sources and add them to chocolatey, you can extend\n chocolatey's capabilities, and folks, it's only going to get better.\n== Chocolatey gods? ==\nHumor related to playing off of tiki gods. We like humor. Don't take life so seriously, you will never get out alive.== Release Notes ==https://github.com/chocolatey/chocolatey/wiki/ReleaseNotes== Package License Acceptance Terms ==The act of running chocolatey to install a package constitutes acceptance of the license for the application, executable(s), or other artifacts that are brought to your machine as a result of a chocolatey install.This acceptance occurs whether you know the license terms or not. It is suggested that you read and understand the license terms of any package you plan to install prior to installation through chocolatey.If you do not accept the license of a package you are installing, please uninstall it and any artifacts that end up on your machine as a result of the install.== Waiver of Responsibility ==The use of chocolatey means that an individual using chocolatey assumes the responsibility for any changes (including any damages of any sort) that occur to the system as a result of using chocolatey.This does not supercede the verbage or enforcement of the license for chocolatey (currently Apache 2.0), it is only noted here that you are waiving any rights to collect damages by your use of chocolatey.It is recommended you read the license (http://www.apache.org/licenses/LICENSE-2.0) to gain a full understanding (especially section 8. Limitation of Liability) prior to using chocolatey.== Commands ==For all commands check out the command reference at: https://github.com/chocolatey/chocolatey/wiki/CommandsReference * Search - choco search something * List locally installed packages - choco list -lo * Install - choco install baretail * Update - choco update baretail * Uninstall - choco uninstall baretail * Install ruby gem - choco install compass -source ruby * Install python egg - choco install sphynx -source python * Install windows feature - choco install IIS -source windowsfeatures * Install webpi feature - choco install IIS7.5Express -source webpiMore advanced commands and switches listed on the command reference, including how you can force a package to install the x86 version of a package. Examples:  * choco install nunit  * choco install nunit -version 2.5.7.10213  * choco install packages.config  * choco update nunit -source http://somelocalfeed.com/nuget/  * choco help  * choco search nunit  * choco list -localonly  * choco version  * choco version nunit  * choco uninstall nunit  * choco install sphynx -source python== Create Packages? ==We have some great guidance on how to do that. Where? I'll give you a\n hint, it rhymes with sticky!\n https://github.com/chocolatey/chocolatey/wiki/CreatePackages\nIn that mess there is a link to the Helper Reference -\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/641#issuecomment-66899228\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Questions should be asked on the mailing list. Chocolatey at google groups\ndot com. Thanks!\nOn Saturday, December 13, 2014, Zenobius Jiricek notifications@github.com\nwrote:\n\nI can understand wrapping around what ever voodoo it is that installs\nwindows features... but why create an interface that wraps around gem and\nruby.\nwhat value is created?\nwas the effort spent worth it?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/642.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. I think this actually may be a duplicate, believe it or not. :)\nOn Mon, Dec 15, 2014 at 12:43 PM, Antoine Turmel notifications@github.com\nwrote:\n\nIt would be nice to have a protocol like choco:// to install packages from\na single click.\nUbuntu already do this using AptURL:\nhttps://help.ubuntu.com/community/AptURL\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/643.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Duplicate of #394 \n. @dylan-k I loved your first version of a response, it was much better. :)\n. Removed the option entirely in 0.9.8.29. :)\n. It's not. It is something I also want, but it won't happen until after pkg indexes are implemented.\n. Moved to https://github.com/chocolatey/choco/issues/412\n. You can also just include the binary in the package and choco will put it\non the path. Make sure it has all required dlls and config files included.\nOn Sunday, December 21, 2014, Gary Ewan Park notifications@github.com\nwrote:\n\nHey, thanks Gary, will do.\nLet us know if you run into any problems with getting the package created.\nWe can leave this issue open as a reminder to improve the documentation in\nthis area.\nGary\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/646#issuecomment-67784906\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. @dcjulian29 When it comes to the folks who own the software posting the packages, I'm completely fine with binaries in the package, even prefer it. :)\n. In this case, if you put the output of your bin folder into the tools folder under a nuspec file and package it up,  you will be able to \nchoco install audioswitcher\nAudioSwitcher.exe\n. Thanks for creating this separately.\n. This may be a duplicate of #554 \n. Actually #307.\n. Closing this and updating #307 \n. Okay, this is partially resolved with #307 - adds a cacheLocation to the config file.\n. Some of this may need to carry over to chocolatey.org where the download and part of the initial install script are located.\n. The rest of this will be over at https://github.com/chocolatey/chocolatey.org/issues/139\n. Once 0.9.8.29 is out, you should be completely good to go.\n. @ahmedmohiduet can you indicate the exact command you used and what shell you are using?\nAlso please add -debug and post back the output from that as well. I'm looking for Posh version/chocolatey version/operating system version.\n. @ahmedmohiduet if you can get me that information, that would be great.\n. Until then, I'm closing this as a non-issue. Once you get me the information we can reopen this issue.\n. @ararog you should probably look at https://github.com/chocolatey/choco and particularly https://github.com/chocolatey/choco/issues/56\n. Actually this is a chocolatey issue - let me update the issue wording.\n. This has been moved to https://github.com/chocolatey/choco/issues/110\n. Closed because move.\n. Howdy,\n Posh is deprecated. Choco has been rewritten in c# and will be out in a\nfew weeks. Why don't we close this and pick up a discussion (mailing list)\non why these type of packages would be necessary? Then if we agree it's\ngood we can move forward with a pull request against that. Thanks!\nNote: We do have a contributors.md that pops up when you try to submit a\npull request or issue, in there we ask that you contact us before beginning\nnew work.\nOn Sunday, January 4, 2015, andulv notifications@github.com wrote:\n\n.run Packages ara packages that are not \"installed\", effectively turning\nthem into script-packages. The packages are not installed to lib\\ folder,\nbut in every other aspects they are identical to ordinary packages.\nWhen a package has the extension '.run' this happens upon install:\n1. The package is downloaded to lib-run\n2. tools\\chocolateyinstall.ps1 script is executed\n3. Package is removed from lib-run\nOne of the main advantages of .run packages as part of Chocolatey is\ndependencies. .run packages can depend on ordinary packages (or other .run\npackages). Ordinary packages can depend on .run packages.\nScenario 1 - AdvancedScriptPackage.run\n- Depends on scriptcs.\n- Includes AdvancedScript.cs in tools folder.\n- chocolateyinstall.ps1 does nothing but invoke 'scriptcs\n  AdvancedScript.cs'.\nScenario 2 - CustomBusinessApplication (ordinary package)\n- Depends on EnsureComputerMeetsCorporateStandards.run\n- Depends on CleanUpOldLegacyApplication.run\nI have done basic testing, and the changes seems to be working as intended.\nIf necessary I can do more testing and try to write some unit tests.\nYou can merge this Pull Request by running\ngit pull https://github.com/andulv/chocolatey run-package\nOr view, comment on, or merge it at:\nhttps://github.com/chocolatey/chocolatey/pull/651\nCommit Summary\n- Initial support for .run packages. (Packages that are not\n  \"installed\", effectively turning them into script-packages)\nFile Changes\n- M src/chocolatey.ps1\n  https://github.com/chocolatey/chocolatey/pull/651/files#diff-0 (1)\n- M src/functions/Chocolatey-NuGet.ps1\n  https://github.com/chocolatey/chocolatey/pull/651/files#diff-1 (47)\n- M src/functions/Run-NuGet.ps1\n  https://github.com/chocolatey/chocolatey/pull/651/files#diff-2 (7)\nPatch Links:\n- https://github.com/chocolatey/chocolatey/pull/651.patch\n- https://github.com/chocolatey/chocolatey/pull/651.diff\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/pull/651.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Awesome. Thanks for understanding. I'm trying to understand why you would want to remove traces of the install. We have similar packages that only run once, but you keep them around in case there are updates to the packages and you want to deploy that new functionality out.\n. Pending discussion a PR may be issued against new choco.\n. > I also noticed that even though the Kickstarter is funded and closed, that you have sold very few of the larger business pledges.\nI think this is mostly in part due to a short 30 day window, no guarantee that the kickstarter was going to be successful (until about 3 days out when it funded), businesses usually want to remain private, and most businesses go through a PO to do amounts over $1,000 (the PO process is usually longer than 10 days - they are not going to do it through a kickstarter). \nWould you guys have funded with your name on the public backers page and been able to do so with a credit card (not a PO)? That question is mostly curiosity, because most of the businesses I talked to indicated one or more of the above.\n. I wouldn't hold much water in the low amount of business licenses sold. I'd reserve that for when we have a billing system set up and what the potential is going to be. I'd imagine that we are going to see a few that I probably won't be able to name. :)\n. > Would it be possible to go for one of these pledges even though the Kickstarter is closed?\nUnfortunately, once a Kickstarter is over, you can't back the project. However next summer we will have a system set up for accepting payments and generating licenses. \n. A chocolatey package != install something\n. That's my first response. I will want to consider a bit more based on your example.\n. installing a package gets misinterpreted as only \"installing\" software on a machine, but it can also make configuration changes (which I believe you are defining as .run packages).\n. The question being, if you applied a configuration, how would you know it happened if you deleted the package?\nUpdate - What I mean is, if you have a large range of computers and you want to know which ones were successful and which ones were not applying a configuration, what would you need to do to see it happened? \nAlso, how does dpkg/rpm handle this concept now?\n. Concept of pinning packages prevents automatic upgrade of those packages.\n. Also, I wouldn't necessarily look at the community feed (chocolatey.org) as the end all be all of how most businesses use choco. The simple fact is that many, many of them NEVER hit the community feed. They are doing things somewhat differently with the packages they create, including binaries much more often and setting up configurations (so they can replace GPO). Sometimes folks couple those configurations with a configuration management tool like Puppet (config management means any change to the configuration of a computer, including settings and software). Chocolatey plugs right in as a package manager provider to Puppet.\n. I'm not dismissing this one straight off. Just trying to understand how it is different and necessary over just the normal concept of normal packages that do some configuration tasks.\n. That's :<\n. https://github.com/chocolatey/shimgen/issues/5\n. This is seen when chocolatey is being used with Windows 2003.\n. Definitely should stay with equals if possible.\n. perhaps. How does on PR wiki docs?\n. Can this be closed?\n. Does it have issues if you have <cacheLocation></cacheLocation> set? The intention is not for it to be removed.\n. No need. This will be completely unnecessary due to new codebase that\noverrides this. The logic in this codebase may be a bit naive, yes.\nOn Thursday, January 8, 2015, Glenn notifications@github.com wrote:\n\nIf you add in the empty tag then no error is thrown.\nIn my case when I upgraded chocolatey from x.28 to x.30 it was missing.\nHowever I could be experiencing a one-off error.\nWhile this has a low probability of occuring and the workaround is fairly\nsimple, I feel the logic error still needs attention;\n- If the cacheLocation tag should always be in the config file, then\n  the error 'Write-Error : A configuration value for cacheLocation was not\n  found' should be terminal and perhaps steps how to fix it be presented to\n  the user\nor\n- If it is possible that the cacheLocation tag to not exist, then\n  the case of $cacheLocation of being $null should be handled in the code as\n  per one of my proposals.\nI realise this is a low priority issue, so I'm happy to make the changes\nand submit a PR for it.\nAlso happy to write some pester tests for it.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/657#issuecomment-69281884\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. None of this code exists in choco.exe :(\n. January 15th-ish\n. Well likely a beta.\nOn Monday, January 12, 2015, Matt Wrock notifications@github.com wrote:\n\nOh ok. As a full release or alpha/beta?\nSent from my Windows Phone\n\nFrom: Rob Reynoldsnotifications@github.com\n\u0002amp\u0003#106;\u0002amp\u0003#97;\u0002amp\u0003#118;\u0002amp\u0003#97;\u0002amp\u0003#115;\u0002amp\u0003#99;\u0002amp\u0003#114;\u0002amp\u0003#105;\u0002amp\u0003#112;\u0002amp\u0003#116;\u0002amp\u0003#58;\u0002amp\u0003#95;\u0002amp\u0003#101;\u0002amp\u0003#40;\u0002amp\u0003#37;\u0002amp\u0003#55;\u0002amp\u0003#66;\u0002amp\u0003#37;\u0002amp\u0003#55;\u0002amp\u0003#68;\u0002amp\u0003#44;\u0002amp\u0003#39;\u0002amp\u0003#99;\u0002amp\u0003#118;\u0002amp\u0003#109;\u0002amp\u0003#108;\u0002amp\u0003#39;\u0002amp\u0003#44;\u0002amp\u0003#39;\u0002amp\u0003#110;\u0002amp\u0003#111;\u0002amp\u0003#116;\u0002amp\u0003#105;\u0002amp\u0003#102;\u0002amp\u0003#105;\u0002amp\u0003#99;\u0002amp\u0003#97;\u0002amp\u0003#116;\u0002amp\u0003#105;\u0002amp\u0003#111;\u0002amp\u0003#110;\u0002amp\u0003#115;\u0002amp\u0003#64;\u0002amp\u0003#103;\u0002amp\u0003#105;\u0002amp\u0003#116;\u0002amp\u0003#104;\u0002amp\u0003#117;\u0002amp\u0003#98;\u0002amp\u0003#46;\u0002amp\u0003#99;\u0002amp\u0003#111;\u0002amp\u0003#109;\u0002amp\u0003#39;\u0002amp\u0003#41;\u0002amp\u0003#59;\nSent: \u200e1/\u200e12/\u200e2015 8:46 AM\nTo: chocolatey/chocolateychocolatey@noreply.github.com\n\u0002amp\u0003#106;\u0002amp\u0003#97;\u0002amp\u0003#118;\u0002amp\u0003#97;\u0002amp\u0003#115;\u0002amp\u0003#99;\u0002amp\u0003#114;\u0002amp\u0003#105;\u0002amp\u0003#112;\u0002amp\u0003#116;\u0002amp\u0003#58;\u0002amp\u0003#95;\u0002amp\u0003#101;\u0002amp\u0003#40;\u0002amp\u0003#37;\u0002amp\u0003#55;\u0002amp\u0003#66;\u0002amp\u0003#37;\u0002amp\u0003#55;\u0002amp\u0003#68;\u0002amp\u0003#44;\u0002amp\u0003#39;\u0002amp\u0003#99;\u0002amp\u0003#118;\u0002amp\u0003#109;\u0002amp\u0003#108;\u0002amp\u0003#39;\u0002amp\u0003#44;\u0002amp\u0003#39;\u0002amp\u0003#99;\u0002amp\u0003#104;\u0002amp\u0003#111;\u0002amp\u0003#99;\u0002amp\u0003#111;\u0002amp\u0003#108;\u0002amp\u0003#97;\u0002amp\u0003#116;\u0002amp\u0003#101;\u0002amp\u0003#121;\u0002amp\u0003#64;\u0002amp\u0003#110;\u0002amp\u0003#111;\u0002amp\u0003#114;\u0002amp\u0003#101;\u0002amp\u0003#112;\u0002amp\u0003#108;\u0002amp\u0003#121;\u0002amp\u0003#46;\u0002amp\u0003#103;\u0002amp\u0003#105;\u0002amp\u0003#116;\u0002amp\u0003#104;\u0002amp\u0003#117;\u0002amp\u0003#98;\u0002amp\u0003#46;\u0002amp\u0003#99;\u0002amp\u0003#111;\u0002amp\u0003#109;\u0002amp\u0003#39;\u0002amp\u0003#41;\u0002amp\u0003#59;\nCc: Matt Wrockmatt@mattwrock.com\n\u0002amp\u0003#106;\u0002amp\u0003#97;\u0002amp\u0003#118;\u0002amp\u0003#97;\u0002amp\u0003#115;\u0002amp\u0003#99;\u0002amp\u0003#114;\u0002amp\u0003#105;\u0002amp\u0003#112;\u0002amp\u0003#116;\u0002amp\u0003#58;\u0002amp\u0003#95;\u0002amp\u0003#101;\u0002amp\u0003#40;\u0002amp\u0003#37;\u0002amp\u0003#55;\u0002amp\u0003#66;\u0002amp\u0003#37;\u0002amp\u0003#55;\u0002amp\u0003#68;\u0002amp\u0003#44;\u0002amp\u0003#39;\u0002amp\u0003#99;\u0002amp\u0003#118;\u0002amp\u0003#109;\u0002amp\u0003#108;\u0002amp\u0003#39;\u0002amp\u0003#44;\u0002amp\u0003#39;\u0002amp\u0003#109;\u0002amp\u0003#97;\u0002amp\u0003#116;\u0002amp\u0003#116;\u0002amp\u0003#64;\u0002amp\u0003#109;\u0002amp\u0003#97;\u0002amp\u0003#116;\u0002amp\u0003#116;\u0002amp\u0003#119;\u0002amp\u0003#114;\u0002amp\u0003#111;\u0002amp\u0003#99;\u0002amp\u0003#107;\u0002amp\u0003#46;\u0002amp\u0003#99;\u0002amp\u0003#111;\u0002amp\u0003#109;\u0002amp\u0003#39;\u0002amp\u0003#41;\u0002amp\u0003#59;\nSubject: Re: [chocolatey] write to the correctly scoped chocolateyErrored\nvariable (#658)\nJanuary 15th-ish\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/pull/658#issuecomment-69600945\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/pull/658#issuecomment-69611019.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. I will likely go ahead on this one.\n. This looks like a fix for #568 (ha, transposed! Wild!)\n. Merged into stable at https://github.com/chocolatey/chocolatey/commit/bcea921831373864a908f4d48e8fbd0c390bd2b6\n. Released as well a little while ago.\n. Duplicate of #568\n. That's the problem. Get-ToolsRoot is really the name of this. It's horrrrrribly named.\n. The problem is that the terminology of the command is so bad, you and many others have identified it as essentially the same location as c:\\programdata\\chocolatey\\bin when in fact it represents something else entirely.\n. There is a concept of a place where you can install tools due to two reasons - \n1) current POSH choco putting version numbers on folders and \n2) folks want a place on the system out of the choco folders where they can put tools.\nThis is basically a location that a user can specify as ToolsRoot. \nNow muddy that up and call it BinRoot instead.\n. Do we need a bin root? Or is it that choco is not doing a sufficient job in some cases?\n. > I don't know. I prefer a non-shimmed binRoot for command line tools\nThis is what I'm curious about. Is it the older shims that were batch files? Is it performance? What hesitations do you have? Brutal honesty is fine here.\n. Tools (or portables) in this context refers to the actual software that does not come with a native installer, which is like git for windows portable zip compared to git for windows install. If software is offered as an archive of some sort in addition to or instead of through an installer - that is what is meant by \"tools.\" We actually have a pretty extensive definition of portables vs install in the context of chocolatey in the faq on the wiki.\n. @CMCDragonkai Shim, not symlink. And no, only executables found in the package directory will be shimmed automatically. Anything else that one wants to shim, they would need to use Install-BinFile.\nReferences:\n- https://github.com/chocolatey/choco/wiki/HelpersReference\n. This is fixed in choco with https://github.com/chocolatey/choco/issues/631\n. The next upgrade is going to automatically move choco, I've just finished\ntesting that code. Hmm, what we could do is have you set an environment\nvariable that it would explicitly look for and not do the move. The message\nis gone as well.\nWhat do you think of ChocolateyKeepRootDirectoryIUnderstandThe\nSecurityIssuesAndDoNotCare? Too long?  :)\nHow about ChocolateyAllowInsecureRootDirectory?  Create it and set it to\ntrue.\nOn Friday, January 16, 2015, masaeedu notifications@github.com wrote:\n\nI explicitly set the ChocolateyInstall env variable to C:\\Chocolatey, and\nthe installation went smoothly and moved chocolateyInstall over to that\nfolder. Now I have to look at this every time I run any command:\n[image: capture]\nhttps://cloud.githubusercontent.com/assets/3674056/5787378/0e7bf334-9dca-11e4-80c7-190485ebd63f.PNG\nIs there a way to suppress the message (it would also be great if the\nentire decision making tree that leads to the message being shown could be\ntaken out; I'm not sure if that is the primary factor, but all chocolatey\ncommands are pretty darn slow right now).\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/661.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. I guess I wasn't clear. No matter what, choco will not install or upgrade\ninto that directory (aside from manually) unless we set up the additional\nenv variable.\nOn Friday, January 16, 2015, masaeedu notifications@github.com wrote:\n\nI don't have that much stuff installed. If the message is gone in the next\nversion, I could just nuke my directory, get the latest version, then\ninstall again with the same environment vars config (which I'm assuming\nwill land my chocolatey install in C:\\Chocolatey again, sans annoying\nmessages). That way you wouldn't have to add the one off option you're\ndescribing.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/661#issuecomment-70352634\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. THere are other options for install. - Can you take a look at those as a workaround for now? https://github.com/chocolatey/chocolatey/wiki/Installation\n. Download the package, unzip it (https://chocolatey.org/api/v2/package/chocolatey/) In the tools folder is a chocolateyInstall.ps1, run it with PowerShell. If it doesn't work, you likely have not met the requirements.\n. For full instructions, I added the following: https://github.com/chocolatey/chocolatey/wiki/Installation#download--powershell-method\n. It's looking for $env:SystemDrive coming back with C: and then giving you a message that Drive C doesn't exist. \n. Actually this is even more interesting. It happens before that - \n``` powershell\n$toolsPath = (Split-Path -parent $MyInvocation.MyCommand.Definition)\nensure module loading preference is on\n$PSModuleAutoLoadingPreference = \"All\";\n$modules = Get-ChildItem $toolsPath -Filter *.psm1\n$modules | ForEach-Object {\n    $psm1File = $_.FullName;\n    $moduleName = $([System.IO.Path]::GetFileNameWithoutExtension($psm1File))\n    remove-module $moduleName -ErrorAction SilentlyContinue;\n    import-module -name  $psm1File;\n}\nInitialize-Chocolatey\n```\nFor some reason it doesn't recognize the $psm1File path.\n. Here's what I want you to do. Edit that chocolateyInstall.ps1 to be:\n``` powershell\n$toolsPath = (Split-Path -parent $MyInvocation.MyCommand.Definition)\nWrite-Output \"`$toolsPath = $toolsPath\"\nensure module loading preference is on\n$PSModuleAutoLoadingPreference = \"All\";\n$modules = Get-ChildItem $toolsPath -Filter *.psm1\n$modules | ForEach-Object {\n    $psm1File = $_.FullName;\n    Write-Output \"`$psm1File = $psm1File\"\n    $moduleName = $([System.IO.Path]::GetFileNameWithoutExtension($psm1File))\n    remove-module $moduleName -ErrorAction SilentlyContinue;\n    import-module -name  $psm1File;\n}\nInitialize-Chocolatey\n```\nRun that and put the results back in this ticket please.\n. Do you have any idea why it is searching for C?\nThis seems a powershell issue, not a chocolatey issue. It seems like it wants to import the module to somewhere on the C drive (which may not exist).\nI'd also like the output of $env:SystemDrive from those machines.\nAlso, are those drives local drives or network mapped drives? You can't use network mapped drives without setting proper permissions for .Net. That is out of the context of this issue for me to explain that one - https://www.google.com/webhp?ie=UTF-8#q=.net%20permissions%20network%20share\n. If it is a network mapped drive, you will need to set permissions appropriately, some helpful articles:\n- https://www.sellsbrothers.com/posts/Details/1519\n- http://stackoverflow.com/questions/3718697/nant-failing-with-bad-permissions-on-build-server\n- http://blogs.msdn.com/b/shawnfa/archive/2004/12/30/344554.aspx\n. Sounds like first you need to fix $env:SystemDrive to the proper system drive. It should have been done based on the way the computer had the system drive moved.\nThat is an environment variable and when wrong can affect quite a few things.\n. I am curious if F: and S: drives are network mapped drives. Trying to run code from there without the proper trust set up is going to cause you issues. It's possible you haven't hit those yet due to your first issue.\n. Hmmm, that's no bueno. I think we'll want you to jump on choco.exe as soon as we have a beta available. Until then you could set the $env:PSModulePath explicitly in chocolatey.cmd as part of starting it up. It will only affect chocolatey while it is running.\n. I'm not sure if this is is still affected in the c# version. If you find this is still the case, please open an issue over at https://github.com/chocolatey/choco/issues/new and reference this issue. Thanks! \n. Duplicate of https://github.com/chocolatey/chocolatey/issues/568\n. #658 implements a fix for that.\n. You went global - @mwrock went script - https://github.com/chocolatey/chocolatey/pull/658\n. Hmm... Do you think folks will want a 0.9.8.x along with the new choco\nclient at 0.9.9?\nOn Tuesday, January 20, 2015, Rich Siegel notifications@github.com wrote:\n\nI would love to see one of these 2 go in as it has required me to fork for\ninternal use. I put the changes in that @ferventcoder\nhttps://github.com/ferventcoder unwound :) despite them being an ugly\nfix.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/pull/664#issuecomment-70659364.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Closing this to prefer #658.\n. Path persisted or local shell path?\n. Do you know if these packages that are being installed/updated are using Install-ChocolateyPath? \n. I could see an issue with the way it would expand registry values on update. I did some work recently to keep that from happening in other tool. I plan to bring back some of that to choco as well.\n. I'll close for now. Feel free to open a new issue and reference this (or just comment here again) if you run into this issue again. \n. Thanks for the follow up! \n. If you are in cmd.exe and not powershell you can type refreshenv\n. Chocolatey comes with a batch file named the above and will query the registry and reset all of your environment variables.\n. Perhaps we need more documentation surrounding that.\n. It's an issue with Windows inability to refresh shells. It doesn't have\nanything to do with choco itself. Now that that is it off the way,\nrefreshenv is a stop gap for choco to keep you from having to close and\nreopen your cmd window. Its also mostly undocumented. The recommendation is\nthat you close and reopen your shell.\nYou can also do PowerShell if you call &\nc:\\programdata\\chocolatey\\chocolateyinstall\\helpers\\Update-Session.ps1 (the\npath may not be exactly right but you get the idea)- it may require\nimporting the module first and then calling update-session.\nOn Tuesday, January 27, 2015, Andy Li notifications@github.com wrote:\n\nIs it possible to get RefreshEnv to work in powershell too?\nIf it cannot, there should be a warning message if RefreshEnv is used in\npowershell instead of a silent fail.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/666#issuecomment-71639225\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. It actually does work but you need to call it separately outside of a choco\ncall (which starts up and closes a separate posh process).\nOn Tuesday, January 27, 2015, Andy Li notifications@github.com wrote:\n\nDo you mean Update-SessionEnvironment\nhttps://github.com/chocolatey/chocolatey/wiki/HelpersUpdateSessionEnvironment?\nI tried adding it to the end of chocolateyInstall.ps1, but it seems to\nhave no effect - the path var is not updated in powershell.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/666#issuecomment-71654814\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Yes, they are. But anything they do with respect to environment vars only\nlasts during that choco run. Once it comes back to the shell, all child\nprocess changes are gone. It would be an egregious security issue with\nWindows if child processes did more than they do to the parent process.\nI'm giving you an option for updating your environment variables. Also\nundocumented and not supported. Ymmv. Remember, you can just close and\nreopen your shell as well.\nOn Tuesday, January 27, 2015, Andy Li notifications@github.com wrote:\n\nUmm.. I thought the helpers are meant to be called inside\nchocolateyInstall.ps1...\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/666#issuecomment-71655906\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. @ahmedmohiduet does this fail if you switch over to 0.9.9?\n. I see those images fine? \n. Thanks.\n. Will be fixing in chocolatey/choco\n. Well apparently the commit didn't close this but https://github.com/chocolatey/choco/wiki/AutomaticPackages#testing-ketarinchocopkgup and https://github.com/chocolatey/choco/wiki/AutomaticPackages/_compare/5701cb8178cb7449de3c6fcc6d3f6efca03ddc09...6f6e97c164a85a556cb7fbab81b4246adde24947\n. https://github.com/chocolatey/choco/blob/master/src/chocolatey.resources/helpers/functions/Write-ChocolateySuccess.ps1 ( still need to remove it from https://github.com/chocolatey/choco/blob/master/src/chocolatey.resources/helpers/functions/Write-ChocolateyFailure.ps1 ) \n. Note that these fixes are in the NEW repo. This repo is currently being deprecated. https://github.com/chocolatey/choco\n. This is closed now with https://github.com/chocolatey/choco/commit/eed1f5df88a94da88a930340b3226d97db5e4626\n. It is updated. See for yourself by adding the following to your chocolateyInstall.ps1:\npowershell\nWrite-Host $env:PSModulePath\nUpdate-SessionEnvironment\nWrite-Host $env:PSModulePath\nNow, once chocolatey EXITS and you come back to your shell (which is likely powershell), $env:PSModulePath is whatever the shell was started with + any changes you have explicitly set.\nIf you want Update-SessionEnvironment to work, you need to import the chocolateyInstaller.psm1 module into your current shell session and call Update-SessionEnvironment. \nHTH.\n. For clarity, this is not a chocolatey issue, this is is how child processes work on Windows. They have limited abilities to affect their parent process, which we can all agree is a good thing based on security issues that having that ability would create.\n. Also a duplicate of https://github.com/chocolatey/chocolatey/issues/666\n. I think part of the problem is that you believe that chocolatey is meant to be invoked from PowerShell because it is written in PowerShell and it's not meant to be a powershell module/script. It's a tool that can be executed from any shell. Let's be completely clear - this chocolatey is written in POSH. It is within days of being deprecated for choco (https://github.com/chocolatey/choco) which is written in C# and has a posh install provider. \nIt's entirely possible that we will include a module that you can add to your profile that will give you this behavior. \n. Duplicate of https://github.com/chocolatey/chocolatey/issues/577\n. By the way, already fixed and already out in 0.9.8.28+\n. Wrong repository. https://github.com/chocolatey/choco\n. But also, warnings are a good lead to what may later be an error. Warnings are usually information sake and may require action. Errors mean bad things.\n. Where is this? Thanks in advance!\n. Ah, just the shims. Sweet. Yeah I will get that fixed.\n. This was handled in https://github.com/chocolatey/shimgen/issues/9\n. Ping @dschinkel \n. It's been a few weeks. @dschinkel please feel free to comment on this issue or raise another one if you have more information. \n. That's interesting. I think we can make it happen, but not with this Chocolatey. Let's move this issue over to https://github.com/chocolatey/choco.\n. Wrong repository - there is already an API using OData.\n. Sorry for such a short answer. A question like this is better suited for the mailing list. If you want to learn more about the API, search for NuGet package metadata API.\nIf you still need to file an issue for enhancement, please do so on https://github.com/chocolatey/chocolatey.org\n. Just a quick mention. Some of these are already covered as\nissues/enhancements over at https://github.com/chocolatey/chocolatey.org.\nWould you mind subscribing/commenting on the existing issues and creating\nissues for the enhancements you can't find?\nAnd we can close this ticket as wrong repository.\nOn Tuesday, February 17, 2015, Christian Rondeau notifications@github.com\nwrote:\n\nAs a developer and heavy user of Chocolatey - especially due to the\nability to choco update all - I'd like to contribute to upgrading\npackages that are not maintained, or simply not updated \"fast enough\".\nMany packages, such as ChromeDriver2\nhttps://chocolatey.org/packages/ChromeDriver2, do not reference a\nGitHub repository with the NuGet and PowerShell source files, so it is\nimpossible for users like me to \"help\" other than poking the official\npackage maintainer.\nI think it would be greatly useful to force package maintainers to\nprovide a public repository, therefore allowing pull requests and\npotentially reducing the workload of the maintainer.\nThis is related to issue #308\nhttps://github.com/chocolatey/chocolatey/issues/308, and partially\ncovered in issue #342\nhttps://github.com/chocolatey/chocolatey/issues/342\nHere are a few other ideas that could reduce this problem; let me know if\nyou'd like me to create several issues, as they all try to solve the same\nproblem.\n- Ability to flag a package as outdated. Packages getting some kind of\n  a flag/download treshold would be marked as \"outdated in Chocolatey\" both\n  in the web site and in the command line output.\n- Ability to bypass the maintainer (maybe only for packages not\n  \"owned\" by the maintainer) for a specific version without taking ownership\n  (I guess this would require a fully separate approval and peer-review\n  process...)\n- Ability to create a \"branch\" of any package, and allowing you to\n  tell choco to use yours instead but still use the same name (so that I\n  can point back to the original package once it is updated) - this would be\n  a temporary workaround to avoid having to uninstall and reinstall just to\n  get a newer version faster\nWhat are your thoughts? Do you feel that the urge to get shiny new\npackages as quickly as possible as well as avoiding \"stale\" packages is an\nissue for enough users to warrant such solutions? Are there other\ninitiatives in Chocolatey that I missed?\nOh, and I have to say it: I just love Chocolatey, and can't imagine living\nwithout it. Congrats on the Kickstarter!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/678.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. We are no longer making any changes to this repository. Please submit your patch to https://github.com/chocolatey/choco instead.\n. Not necessary. The new choco (https://github.com/chocolatey/choco) has something called AutoUninstaller which will be able to see the program being installed and reverse the changes. \n. Removed the wiki a few months ago to help documentation get updated\n. +1, but please submit against https://github.com/chocolatey/choco\n. > How bad/undesirable would it be to pluralize the name of the param from $extension or $extensions?\n\nI suppose that's a breaking change in the case where someone has this param explicitly named in a call to this function.\nWhat's the sensitivity level to a param name change?\n\nWe can simply alias the parameter. Boom. Problem solved. :)\n\nI've unit tested my fix locally. Almost ready to send a PR. I'll include a unit test as per the contrib guidlines.\n\nPlease open this issue on https://github.com/chocolatey/choco and reference this issue. There is a ton more you need to look at with respect to contributing - see the updated guidelines at https://github.com/chocolatey/choco/blob/master/CONTRIBUTING.md - I will be a stickler on your commit messages since I spent so much time laying out exactly how I want them formatted.\n. Please file this against https://github.com/chocolatey/chocolatey.org.\n. It should already do this. If you can please explain, we'll decide whether this is an issue or not.\n. Not completely how you installed but maybe help us understand exact steps\nyou took to upgrade?\nOn Wednesday, March 11, 2015, esamo notifications@github.com wrote:\n\nChoco did not reindex installed packages.\nMicrosoft Windows [Wersja 6.1.7601]\nCopyright (c) 2009 Microsoft Corporation. Wszelkie prawa zastrze\u017cone.\nC:\\Windows\\system32>choco list -localonly\nChocolateyGUI 0.12.3\nPowerShell 4.0.20141001\nThese 2 listed I've installed right after reinstalling choco. While I had\nat least 10 entries on previous choco. As I mentioned but maybe not\nclearly, during choco uninstallation I've deleted folders named as\ninstalled packages.\nRegards & respect.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/685#issuecomment-78208061\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. You are not supposed to uninstall - that is for when you are removing\nchocolatey completely. You should just upgrade as normal - as instructed\neverywhere else. On uninstall you would be removing everything and thus\nthere is nothing to reindex.\nApologies if this is confusing - however you are the first person that has\nrun into this so I'm not sure if there is anything we need to change in\ndocumentation except maybe a large warning on the uninstall page.\nUnfortunately for you, you will need to put back all of your packages\nmanually.\nOn Wednesday, March 11, 2015, esamo notifications@github.com wrote:\n\nI've processed the first script on https://chocolatey.org which is\n@powershell -NoProfile -ExecutionPolicy unrestricted -Command \"iex\n((new-object net.webclient).DownloadString('\nhttps://chocolatey.org/install.ps1'))\" && SET\nPATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\nAnd before that I uninstalled choco as instructed here:\nhttps://github.com/chocolatey/chocolatey/wiki/Uninstallation, that is\ndeleting all related files. I didn't disturb logs and errors though....\nRegards & respect.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/685#issuecomment-78383321\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Thanks for reporting this. Unfortunately this implementation of the choco\nclient has been deprecated in v0.9.9+ for a C# rewrite at\nhttps://github.com/chocolatey/choco - you can upgrade now. :)\nOn Friday, March 13, 2015, mtman notifications@github.com wrote:\n\nThere is a bug in Split-Path (PS 4.0 Win7 x64), when I run:\npowershell -noprofile -noexit -command \"split-path -parent c:\\lorem\\ipsum.txt\"\nit outputs:\nFolder is: C:\\Documents and Settings\\All Users\\Desktop\\\nName is: Dostips.cmd\nTherefore, when I run choco install , all I get is bunch of\nerrors:\nJoin-Path : Cannot find drive. A drive with the name 'Name is' does not exist.\nSo I modified chocolatey.ps1 and everything works like a charm:\n$nugetChocolateyPath = (Split-Path -parent $MyInvocation.MyCommand.Definition)\n$nugetChocolateyPath = [System.IO.Path]::GetDirectoryName($MyInvocation.MyCommand.Definition)\n$nugetPath = (Split-Path -Parent $nugetChocolateyPath)\n$nugetPath = [System.IO.Path]::GetDirectoryName($nugetChocolateyPath)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/686.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Can you do a get-command split-path and add the output to this ticket?\nOn Friday, March 13, 2015, mtman notifications@github.com wrote:\n\nSo I upgraded using my patched version and unfortunately, the issue is\nstill relevant:\nC:\\Users\\mtman>choco install windirstat\nChocolatey v0.9.9.2\nInstalling the following packages:\nwindirstat\nBy installing you accept licenses for the packages.\nwindirstat v1.1.2.20140225\n Found 'chocolateyInstall.ps1':\n$packageName = 'windirstat'\n$fileType = 'exe'\n$url = 'http://prdownloads.sourceforge.net/windirstat/windirstat1_1_2_setup.exe'\n$silentArgs = '/S'\nInstall-ChocolateyPackage $packageName $fileType \"$silentArgs\" \"$url\"\nDo you want to run the script?\n NOTE: If you choose not to run the script, the installation will\n fail.\n Skip is an advanced option and most likely will never be wanted.\n1) yes\n 2) no [Default - Press Enter]\n 3) skip\nyes\n Get-Item : Cannot find drive. A drive with the name 'Folder is' does not exist.\n At C:\\ProgramData\\chocolatey\\helpers\\chocolateyInstaller.psm1:28 char:1\n- Get-Item $helpersPath\\functions*.ps1 |\n- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  - CategoryInfo          : ObjectNotFound: (Folder is:String) [Get-Item], DriveNotFoundException\n  - FullyQualifiedErrorId : DriveNotFound,Microsoft.PowerShell.Commands.GetItemCommand\n    Join-Path : Cannot find drive. A drive with the name 'Folder is' does not exist.\n    At C:\\ProgramData\\chocolatey\\helpers\\chocolateyInstaller.psm1:36 char:19\n- $extensionsPath = Join-Path \"$helpersPath\" '..\\extensions'\n-                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  - CategoryInfo          : ObjectNotFound: (Folder is:String) [Join-Path], DriveNotFoundException\n  - FullyQualifiedErrorId : DriveNotFound,Microsoft.PowerShell.Commands.JoinPathCommand\n    Test-Path : Cannot bind argument to parameter 'Path' because it is null.\n    At C:\\ProgramData\\chocolatey\\helpers\\chocolateyInstaller.psm1:37 char:13\n- if(Test-Path($extensionsPath)) {{\n-             ~~~~~~~~~~~~~~~~~\n  - CategoryInfo          : InvalidData: (:) [Test-Path], ParameterBindingValidationException\n  - FullyQualifiedErrorId : ParameterArgumentValidationErrorNullNotAllowed,Microsoft.PowerShell.Commands.TestPathCom\n    mand\n    Install-ChocolateyPackage : The term 'Install-ChocolateyPackage' is not recognized as the name of a cmdlet, function, s\n    cript file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is cor\n    rect and try again.\n    At C:\\ProgramData\\chocolatey\\lib\\windirstat\\tools\\chocolateyInstall.ps1:6 char:1\n- Install-ChocolateyPackage $packageName $fileType \"$silentArgs\" \"$url\"\n- ~~~~~~~~~~~~~~~~~~~~~~~~~\n  - CategoryInfo          : ObjectNotFound: (Install-ChocolateyPackage:String) [], CommandNotFoundException\n  - FullyQualifiedErrorId : CommandNotFoundException\n    windirstat install not successful.\n    Error while running 'C:\\ProgramData\\chocolatey\\lib\\windirstat\\tools\\chocolateyInstall.ps1'.\n    See log for details.\nChocolatey installed 0/1 package(s). 1 package(s) failed.\n See the log for details.\nFailures:\n- windirstat\nIt seems that Split-Path is used even more frequently in the new version.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/686#issuecomment-79456564\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Do you still get this with choco 0.9.9?\n. @kishore-mohan that's what I'm asking :)\n. or to be more clear - I don't run into this issue \n. That's a known change - 0.9.9 was quite a large change and we wanted to give tools that use automation some time to fix their stuff - see https://github.com/chocolatey/chocolatey.org/issues/162 and https://github.com/chocolatey/chocolatey.org/issues/163\n. Closing this due to age. If you are still running into this issue in the 0.9.9.x (and now 0.9.10.x), please open a new issue over at https://github.com/chocolatey/choco/issues/new. Thanks! \n. Yes you can. See choco new -h in choco 0.9.9+.\nAnd see https://github.com/chocolatey/choco/wiki/How-To-Host-Feed\n. Before you get too far down the line with these - wrong repo, log the\nissues at chocolatey/choco\nOn Thursday, March 19, 2015, Christian Rondeau notifications@github.com\nwrote:\n\nIf I decide not to continue with the uninstall by refusing to run the\nscript, I'm expecting not to receive a request to rollback. Here is an\nexample:\nDo you want to run the script?\n NOTE: If you choose not to run the script, the installation will\n fail.\n Skip is an advanced option and most likely will never be wanted.\n1) yes\n 2) no [Default - Press Enter]\n 3) skip\nno\nfilezilla upgrade not successful.\nUser cancelled powershell portion of installation for 'C:\\ProgramData\\chocolatey\\lib\\filezilla\\tools\\chocolateyInstall.ps1'. Use skip to install without run. Unsuccessful operation for filezilla.  Do you want to rollback to previous version (package files only)? 1) yes [Default - Press Enter] 2) nono\nNote that the rollback message itself could also be improved :)\nFor more details:\nhttps://groups.google.com/forum/#!topic/chocolatey/UVncL7PxXRg\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/696.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Fixed the link. \n. Closed now that it has been moved.\n. Um, we do in 0.9.9\n. Wrong repo\n. Second, this has been discussed many many times. We do add it to process path by default. But due to built-in Windows security settings a sub process cannot affect the parent process, so when it's done running, those path changes don't make it up to the top-level process.\n. > This would allow all chocolatey packages that update the path to work in the same process - with no updates to packages and no fussing in scripts :)\nThey already do, as long as they are in the same process\n. You are getting this with 0.9.9+?\nWe had this fixed but it looks like I just reintroduced with the release I\ndid today.\nOn Sunday, March 29, 2015, Natan Vivo notifications@github.com wrote:\n\nI'm getting this error for any upgrade or install I'm running. Trying to\ndo a \"choco upgrade all\" will fail every package it finds with the same\nerror after asking to run the script.\nCalling command ['\"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -NoProfile -NoLogo -ExecutionPolicy Bypass -Command\n\"[System.Threading.Thread]::CurrentThread.CurrentCulture = '';[System.Threading.Thread]::CurrentThread.CurrentUICulture = ''; & im\nport-module -name 'C:\\ProgramData\\chocolatey\\helpers\\chocolateyInstaller.psm1'; & 'C:\\ProgramData\\chocolatey\\helpers\\chocolateyScr\niptRunner.ps1' -packageScript 'C:\\ProgramData\\chocolatey\\lib\\ilspy\\tools\\chocolateyInstall.ps1' -installArguments '' -forceX86 $fa\nlse -packageParameters '' -overrideArgs $false\"']\n false : The term 'false' is not recognized as the name of a cmdlet, function, script file, or operable program. Check t\n he spelling of the name, or if a path was included, verify that the path is correct and try again.\n At C:\\ProgramData\\chocolatey\\helpers\\chocolateyInstaller.psm1:24 char:17\n- $overrideArgs = false\n-                 ~~~~~\n  - CategoryInfo          : ObjectNotFound: (false:String) [], CommandNotFoundException\n  - FullyQualifiedErrorId : CommandNotFoundException\n    false : The term 'false' is not recognized as the name of a cmdlet, function, script file, or operable program. Check t\n    he spelling of the name, or if a path was included, verify that the path is correct and try again.\n    At C:\\ProgramData\\chocolatey\\helpers\\chocolateyInstaller.psm1:27 char:13\n- $forceX86 = false\n-             ~~~~~\n  - CategoryInfo          : ObjectNotFound: (false:String) [], CommandNotFoundException\n  - FullyQualifiedErrorId : CommandNotFoundException\nHere is the full debug output for upgrading a package:\nhttps://gist.github.com/nvivo/8bcb3646e93b7b707d8e\nAfter the rollback ilspy is not installed anymore even though chocolatey\nsays it is upgraded.\nI was getting this error with 0.9.8, then I did an upgrade to 0.9.9.3 but\nI'm getting the same error.\nI rebooted the machine after installing 0.9.9.3.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/701.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Fixing. Also, log issues over at chocolatey/choco repo please.\n. This was also mentioned in https://github.com/chocolatey/choco/issues/216 & https://github.com/chocolatey/choco/issues/215\n. Whoops @ShaneIsrael wrong repo. Please open at https://github.com/chocolatey/choco/issues (link to this and close this one)\n. Wrong repo - duplicate of https://github.com/chocolatey/choco/issues/64\n. Please open this in https://github.com/chocolatey/choco \n. Closing as not applicable - you already found the proper place to post the issue though\n. @hifriend21 do you have PowerShell installed?\n. Type where.exe powershell after updating your path locally like you did.\nIf it comes up with nothing, you need to ensure you install powershell first.\n. ~~Windows 7 - it should be there by default, but you can disable the Windows Feature.~~\n. Nevermind, scratch that. Not sure how you disable/remove it. Unless you lite the install.\n. Debug is a switch, not something that accepts parameters. Basically you are saying choco install cyg-get -y --debug AND choco install 1 -y --debug.\n. This is because we allow you to state choco install cyg-get git notepadplusplus\n. No worries. Try to log any future issues over at chocolatey/choco. You can also hop into gitter if you want to determine if you are seeing an issue or not.\n. https://github.com/chocolatey/choco\n. https://gitter.im/chocolatey/choco\n. Wrong repository. This goes to either chocolatey/choco, or most correctly to chocolatey/chocolatey.org\n. Here's the issue technically - the site was under heavy load and so things were timing out and it was returning the 404 HTML page as the zip. You will know, the zip will be about 5KB and if you rename it to .html you will see the error page html in a text editor.\nHowever yesterday at 17:00 PM CDT I put in a new caching strategy and increased the timeout to nearly remove this from happening in the future.\n. You should delete the file and give it a shot now.\n. I put this over on https://github.com/chocolatey/chocolatey.org/issues/236 and I will capture all of the technical details there.\n. Try removing pre when you call for a specific version. Does that work?\n. Thanks for the followup! \n. @magmax all future requests should go over to chocolatey/choco by the way. :)\n. Please file a request with the maintainers. This is not the place for package issues. Only if there is an issue with Chocolatey itself. Thanks!\n. We shut it off completely at one point, but must have missed it during the rewrite when we moved to NuGet.Core. I'll file an issue there.\n. Moved to  https://github.com/chocolatey/choco/issues/479\n. Howdy! This appears to he an issue with the package itself?\n. yes, use --force. If it also fails, you can look for skip. -n - See choco uninstall -h for options.\n. By the way, all future requests should go to chocolatey/choco repository. Thanks!\n. Thanks for filing this issue. However I believe you wanted to file it at https://github.com/chocolatey/choco?\n. No worries, I was trying to find the already created issue\n. This has been raised. I believe they are the same root cause.\n. Maybe not, thought it might be related to https://github.com/chocolatey/choco/issues/466, but perhaps it is https://github.com/chocolatey/choco/issues/262. \nI see you just raised https://github.com/chocolatey/choco/issues/497\n. Can you explain the problem a bit more? What are you seeing, what do you expect?\nPriority may be explained in choco source -h\n. Also, this is the wrong repository. \n. Please file this issue at https://github.com/chocolatey/choco/issues/new\n. That is a packaging issue. The maintainer needs to indicate the file is a GUI - see https://github.com/chocolatey/choco/wiki/CreatePackages#how-do-i-set-up-batch-redirects-for-applications-that-have-a-gui\nAlso, any further issues should be logged at https://github.com/chocolatey/choco.\n. Please contact the maintainers and ask them to make the adjustments. Thanks!\n. https://github.com/chocolatey/choco/issues/610\n. This repository is deprecated. Please see https://github.com/chocolatey/choco - your question is actually better to ask in Gitter. \n. Gitter is https://gitter.im/chocolatey/choco \n. ? \n. No worries. :D\n. Howdy wrong repo https://github.com/chocolatey/choco/issues/836\n. Howdy.\nWhen you went to create an issue, did you happen to read the note? \n\nThis is a duplicate of https://github.com/chocolatey/choco/issues/969\n. Big issue though - high priority for a 0.10.2 release. Follow along over on https://github.com/chocolatey/choco/issues/969, thanks! \n. @renerchen when you went to file the issue, did you happen to notice that the template that showed up in the text box said this repo is deprected and issues should be filed somewhere else (it had a link to the new location)? I'm curious, because we've had other people also do this and I want to understand if the messaging doesn't show up.. Here is the issue - you need to upgrade .NET framework to 4.5 so Chocolatey can auto add TLS 1.1 and 1.2. There are many sites that just will not work without at least TLS 1.1 and that is not in .NET Framework 4.0, only in 4.5+. \nThen you should no longer see that message. HTH.\nIf it does not, please head over to https://github.com/chocolatey/choco/issues/new and continue this discussion. Thanks! . @tiantianwei When you created this issue, it appears you did not read the following:\n\nTHIS REPOSITORY IS DEPRECATED. DO NOT CREATE AN ISSUE HERE.\nYou are looking for https://github.com/chocolatey/choco instead. Thanks!\n\nNote that it is still in your issue comments. Please advise on how we can make that clearer?\n. \nSecond, your issue is a packaging issue with the commmunity package repository. For that you want to follow up directly with the maintainers of the package. You can do that on the package page itself (look for Contact Maintainers on the left menu). HTH.. @tiantianwei I can not read Chinese. :D \nI am not a maintainer of the Bazel package on the community repository. You will want to follow up with the folks that are. At https://chocolatey.org/packages/bazel\n\nWhen you do followup, please tell them that they are using 'convertfrom-json', which is not available in PowerShell v2. HTH. @laxselocke please file an issue at https://github.com/chocolatey/choco/issues/new. Thanks! . http://blogs.lessthandot.com/index.php/DesktopDev/MSTech/getting-chocolatey-to-work-when\n. fixed in 63cf4e0470248c2a7bb602db82af1d7da66d12ca\n. Which package are you seeing this with? Or is it any package?\n. do you guys have a proxy in place?\nSomeone else reported issues with the proxy code that we took from a patch. \nIf you go to C:\\NuGet\\chocolateyInstall\\helpers\\chocolateyInstaller.psm1\nand comment out lines 499-507: \npowershell\n  if (!$webclient.Proxy.IsBypassed($url))\n  {\n    $cred = get-credential\n    $proxyaddress = $webclient.Proxy.GetProxy($url).Authority\n    Write-host \"Using this proxyserver: \" $proxyaddress\n    $proxy = New-Object System.Net.WebProxy($proxyaddress)\n    $proxy.credentials = $cred.GetNetworkCredential();\n    $req.proxy = $proxy\n  }\nto be  \n``` powershell\nif (!$webclient.Proxy.IsBypassed($url))\n{\n$cred = get-credential\n$proxyaddress = $webclient.Proxy.GetProxy($url).Authority\nWrite-host \"Using this proxyserver: \" $proxyaddress\n$proxy = New-Object System.Net.WebProxy($proxyaddress)\n$proxy.credentials = $cred.GetNetworkCredential();\n$req.proxy = $proxy\n}\n```\nThen tell me what you see.\n. We need better proxy support. :(\n. Fixing this again for the first time, for the last time? ;)\n. Hopefully this is fixed with the latest bits coming in 0.9.8.17. If not we will add a config value to specify your proxy type.\n. I'm thinking we'll want to do some configuration file stuff for proxies since there seems to be different ways of handling the way in\n. @grenade would you file a new issue? \n. fixed in 63cf4e0470248c2a7bb602db82af1d7da66d12ca\n. Fixed in e5c15a8c0ccf7d53c82dde4592e949db05434fd9\n. Fixed in e5c15a8c0ccf7d53c82dde4592e949db05434fd9\n. We are likely putting together a packages.config file that will keep all of the installed packages...likely we will put it there.\n. So it might be good to also have the ability to exclude at runtime. Log a\ndifferent issue and note that this is related.\nOn Tue, Dec 17, 2013 at 10:40 AM, codearoo notifications@github.com wrote:\n\nWas going to create new issue, but maybe this is related.\nWas going to suggest that the 'cup all' command had an option to EXCLUDE\npackages.\ncup all -exclude \"7-zip,notepad,etc\"\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/5#issuecomment-30766985\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. clist -lo\n. That second part...log another issue. All these things are great fodder for the nuget ecosystem areas for improvement.\n. There is no tracking at the current time of what source a package came from.\n. Right now if you have multiple sources available, it will find the latest\npackage no matter the source. This is the current behavior of nuget.\nOn Tue, Dec 17, 2013 at 11:18 AM, Rich Siegel notifications@github.comwrote:\n\nwell if package foo.1.0.0 is on one source, but foo.1.0.1 is on another\nsource, do you really want to cross sources? My source names could be\nstaging, test, dev, prod, and so latest might have different meanings.\nPerhaps we should store a source.txt file inside each package listed in\nthe lib folder, and then use when performing a clist -lo -source\nexample.com\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/5#issuecomment-30770557\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. It's being handled in the rewrite.\nOn Friday, December 12, 2014, Martin Long notifications@github.com wrote:\n\nAny movement on this? I have a few things which I don't have licenses for\nthe latest versions (nor do I have any need for them), yet \"cup all\" will\njust update them regardless.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/5#issuecomment-66754139.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. make it cuninst as the shortcut. Folks have expressed issues with the cunst (too close to another word)\n. If there is only one version, it shouldn't prompt.\n. Dependencies are not removed right now. That could get very tricky as multiple items in the repo could depend on the same package (application really) to be installed. Plus the dependency may not be a runtime dependency, only an install dependency.\nConsider ruby.devkit - it has dependencies on 7zip.commandline and ruby. Ruby is the hard dependency, 7zip is only so it can unpack the files.  Which dependency would you remove? The proper answer is probably neither as I might still want ruby around. Thoughts?\n. #389 & #295\n187\n. I think this is done-ish. New tickets will get added to choco regarding plussing up autouninstaller and registry name going into chocopackages.\n. See this for more explanation section \"3.6 Virtual packages\" http://www.debian.org/doc/debian-policy/ch-binary.html\n. Another resource for explanation: http://www.linuxtopia.org/online_books/linux_system_administration/debian_linux_guides/debian_linux_faq/ch-pkg_basics.en_007.html\n. Meta packages are already in chocolatey. Thanks for the suggestion though, I probably need to make the docs highlight that a little more.\n. Thought about it quite a bit, but maybe I'm missing the boat with virtual packages. I need to depend on the virtual package, but how does the virtual know what packages satisfy the virtual package requirement? \nFrom what you are saying, it sounds like debian uses some metadata about packages to know whether they are say a \"PDFReader\" or not.  That could get pretty server intensive as chocolatey doesn't keep a local list of packages (which also means it doesn't give a nice \"Did you mean 'apt-get curl'?\" message either.\nPerhaps one could depend on a tag, but that's not reliable on the nuget framework.  The current method of implementation I've thought of isn't perfect (doesn't automatically have new packages that meet the virtual requirement), but it's a start... :)\n\"We never usually go the right direction in the start, only discover it after we've made progress.\"\nAlthough if you have ideas on how to make it easier to register an application as satisfying a virtual requirement, I'm definitely open to it.\n. I believe in the blog post you were reading, I was thinking of taking virtual packages to a new level where someone could configure whether they want the \".noinstall\" or \".install\" version of a tool/application (like nodejs). Other packages would only depend on the virtual package and then the one the user wants would be installed.\n. No progress yet. We have other fundamental design issues to finish back up in the rewrite before we could even approach this. But it will be in a special extension of the nuspec format.\n. This has been moved to https://github.com/chocolatey/choco/issues/858\n. Fixed in f467af1062950d4c4c0cbb6063448452d8ec73e9\n. By the way, this would have first surfaced for users in version 0.9.8.7 (where we upgraded to NuGet 1.5)\n. @henningc - I did log another issue for you on what you are experiencing - https://github.com/chocolatey/chocolatey/issues/16 - I also closed it with chocolatey 0.9.8.11 (which you can get with cup)\n. Yeah, definitely want to address this in the upcoming version. \n. This is fixed...\n. @mkmurray let's chat on chocolatey/choco, ensure you are on 0.9.10.x.\n. What you are seeing is likely a different issue and definitely not over here on the old POSH version. Https://github.com/chocolatey/choco/issues/new \n. Fixed in f4de1072706d13561edb9b07b7b82cbf67b156ad\n. cinst paint.net\n. @zilexa also that menu is there when you type choco install -h\n. Fixed in aba01ffafbb4c47aa50daa7266aa8de88bde93b1\n. right on.\n. That's kind of like cheating... thanks :D\n. Think this is done... http://chocolatey.org/packages/hg\n. It's okay. Why don't we migrate your notes over to the other issue?\n. awesome. I fixed the curl package by the way and updated to the latest version. The site owner takes down old downloads.\n. This is fixed in 490390d35c2e4c9ff3ba7293c9a1da374bf4ff65\n. Yes - the whole gallery isn't complete yet, so you will probably see oddities.\n. That's why there is a huge message in red on the front page of the gallery. ;)\n. Closing this for now. When the next version of the gallery comes out, this should be fixed. If you want to, log the bug with https://github.com/ferventcoder/nugetgallery\n. It's actually .net framework 4.0 that you need installed. it's listed as a\nprerequisite for chocolatey on the readme in source, but that's probably not\nan obvious location.\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\nOn Oct 18, 2011 12:47 AM, \"marisks\" \nreply@reply.github.com\nwrote:\n\nI tried to install completely fresh machine and started with package\ninstallation. Chocolatey didn't throw any errors on installation and also\ndidn't install anything. After some research I found that NuGet.exe is not\nworking, but it started to work after I installed Visual Studio and NuGet\nseparately.\nI know that it might be NuGet issue, but maybe some NuGet configuration is\nmissing in Chocolatey installation.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/issues/18\n. Actually, I just noticed that the requirements are listed at the bottom of the home wiki page as well. https://github.com/chocolatey/chocolatey/wiki\n. I will take a look at this one...\n. Yes, this is a problem. While I am working this out, you can still install an older version.\n\ncinst notepadplusplus -version 5.9.0.1\n. Notepad++ latest version is now working. Thanks for reporting. Let's log another issue on Paint.NET...\n. Set-ExecutionPolicy UnRestricted is what is actually suggested. \nThis is literally from https://github.com/chocolatey/chocolatey/wiki/Installation without any changes. Note the bolded section.\nPowerShell\nThis is the easiest method. Open a powershell command line and paste in the following and press <Enter>:\niex ((new-object net.webclient).DownloadString(\"http://bit.ly/psChocInstall\"))\nNote: You must have your execution policy set to remote unsigned for this to work.\nIt downloads and runs (https://raw.github.com/chocolatey/chocolatey/master/chocolateyInstall/InstallChocolatey.ps1).\n. On the front page of chocolatey.org where it talks about Easy Install, there is also a blurb in there about having powershell set to unrestricted. Perhaps this could be made more clear somehow?\n. I bolded it and brightened up the text a bit on https://github.com/chocolatey/chocolatey/wiki/Installation - does this help?\n. I also brightened it and made it a bit clearer on http://chocolatey.org. If you have other ideas into how to relay this a little better, please let me know.\n. Are you seeing this across the board?\n. Does the second window even pop up for you?  Do me a favor and look in C:\\Nuget\\chocolateyInstall for a chocolateyPSInstall.log file. This may help lead us to what is really going on.\nFrom what it looks like, it is not finding powershell on your machine to execute. What version of powershell do you have installed?\n. sounds like we need to specify the full path to powershell and possibly make it configurable?\n. https://github.com/chocolatey/chocolatey/issues/23\n. Strange... perhaps we should investigate using just lowercase in the code base?  Although this sounds a bit deeper of an issue if you need to rename items to get them to run.\n. Fixing this could get very interesting...since it extends to packages themselves as well. :(\n. I am about to check in some code that may fix this issue. Can you do a build from source, install and test for me?\n. Fixed in bd850d80ef4e4a173dabe00aa61a8680bf44cc60 \nUnless of course you find it didn't work.\n. The culture was set to InvariantCulture at run time to help eliminate issues like this.\n. Fixed in 3bb2cf9657255038c5ea81bcb03a630a1b198591\n. I merged in the first commit. After our discussion on the second one, I gave you something else. In the source you will now see a setup.cmd. It will set up things you need to hack on the source. :D\n. Merged in 42bf8359c6dca1fba3df65de9144150d4cf2c264\n. For future readers: This is a fix for getting modules. Powershell 3.0 gets stricter on how you can get these items. This fixes an issue with write-host and write-error overrides that happens in the next version of powershell (3.0).\n. If something never asserts admin privileges it is possible that there may not be any window pop ups (unzips will still pop a window)\n. Fixed in 3bb2cf9657255038c5ea81bcb03a630a1b198591\n. Fixed in 3471a3bb1a48255ed2d0cfad2d053a415595ffdc\n. Not seeing this issue, I think it might be coming up due to $pwd\n. No, that is still working... I am slightly perplexed..\n. I put a space in the path I was installing from and it blew up nuget install due to me not catching for spaces in paths to install from, only to.\n. what version are you putting on ahk?\n. what if I told you this thing absolutely worked for me? \n. I did the same steps as you, put it all in the same directory and called the stuff. Worked fine. \nOnly difference I can think of offhand is that my choco install directory does not have spaces in it.\n. I also attempted installing with nuget to a directory with spaces and nuget worked fine.  I would need to change my choco install directory to completely test what you are doing... \n. Try this, in your chocolatey lib directory, delete anything to do with windowpad that you may have there. When the item is already downloaded, nuget will not make an attempt to re-download it. This can cause issues.\n. I actually did it with a space as well and it worked. What you need to do is -source \"D:\\users\\Anthony Mastrean\\Dropbox\\Projects\" and it should work. That's pretty much an expectation though when you have spaces.\n. When you quote the path with spaces, does it work?\n. Closing this guy. Do we want to file a new issue for the spaces?\n. Fixed in 2451ebc2dc72b97752ad6bd823a37185441c4039\n. For list you just type clist -source webpi (and you already need to have webpi.commandline installed for it to work.)\n. chocolatey webpi packageName cwebpi packageName or cinst packageName -source webpi\n. the list command issue is here: https://github.com/chocolatey/chocolatey/issues/37\n. Fixed in 2451ebc2dc72b97752ad6bd823a37185441c4039\n. Chocolatey gem packageName , cgem packageName or cinst packageName -source ruby\nDoes not require ruby gems to be installed prior to running this command.\n. This seems reasonable enough to accomplish.\n. Fixed in revision e5006cd77fa42f3805626d656f98e5af08fbf64e\n. I like it.\n. I would totally dig a pull request here ;)\n. This has been completed in https://github.com/chocolatey/chocolatey/pull/43\n. For notes of others, this packages.config differs a little from a vanilla nuget's packages.config in that it adds a source element. For example:\nxml\n<packages>\n    <package id=\"somepackage\"   />\n    <package id=\"somepackagewithversion\" version=\"1.0\"  />\n    <package id=\"somepackagewithsource\" version=\"1.0\" source=\"http://myget.org/f/customfeed\" />\n    <package id=\"IISExpress\" source=\"webpi\" />\n</packages>\n. That is an interesting idea. You want to log a new issue for it (or would you like me to)? I'm curious in how we could get the items that are from different sources... and also how to account for items that never end up in lib (ruby gems and WebPI items)\n. This has been moved to https://github.com/chocolatey/choco/issues/258\n. Fixed in 244bf4aeef54d8a833069427cc699d262cac830c\n. What version of powershell do you have on your machine?\n. No worries... :D\n. @HKochniss We accept pull requests. :D\n. @HKochniss Alternatively, please file a new issue for us to check the powershell version.  We do have requirements listed, but perhaps it would be better to also have that in the installer script.\n. Because I'm too lazy to type nuget pack \n. Fixed in 317ffed2163ed49a63107c9542b73f1854f83f46\n. Fixed in 82000f151ecb6d993413f0c3889c0f8660a9772f\n. Fixed in 43a3b91667700c1e43a9c86d0cdb83b91050d4a7\n. Fixed in e9b3f96c017f2f8dcdadd77d32103edc53165d7d\n. Fixed in a9fda1328d01ed07fe27658af66b49ac58ea2ebc\n. Fixed in a9fda1328d01ed07fe27658af66b49ac58ea2ebc\n. Fixed in a9fda1328d01ed07fe27658af66b49ac58ea2ebc\n. Dupe of https://github.com/chocolatey/chocolatey/issues/40\n. Fixed in a9fda1328d01ed07fe27658af66b49ac58ea2ebc\n. Looks good. Thanks!\n. Fixed in 951d47b27743fbefb976e1093d95fc3a5e95a571\n. Pretty neat. Works with directories as well.\n. Fixed in 3570d7bac2e695d139c5569b4b3737ffa8cbce59\n. In this case we don't limit at all, but have also removed the usage of nuget.org/chocolatey.org b/c that would be insane... :D\n. This is the test feed I used: www.myget.org/F/chocoinstallall/\nAnd for directories, I just put packages in a directory and called the same thing.\n. Well, shoot, I am going to write some tests for it, but it appears to work. I think it will fall in with -force, and the rename of the folder to c:\\chocolatey instead of c:\\nuget.\n. Fixed in 3570d7bac2e695d139c5569b4b3737ffa8cbce59\n. Fixed in 1b823d5eeae51ab19a757ef80a9bc7585ad5aa1b\n. This sounds pretty doable. :D\n. Fixed in e09a0e1a871708cdf90cd1d082b8ca71b7d9226d\n. Still thinking about whether nuget.exe will continue to be part of chocolatey's package or not. It is an artifact of necessity at the current time.\n. Consider the nuget.exe inside of chocolatey as an internal item to chocolatey's execution. It could go away at some point so linking it now would create later pains.  \nIf you want nuget on the path then install nuget.commandline. :D\n. Fixed in c0cb47a9c4e0e8fc27d0b95e0e97c7cf2599e463\n. This shouldn't be too hard,  I just did something similar for the cinst all command\n. Fixed in 59e71754bb726bddec5ee6dd601ac414c5ff2471\n. Does it break anything or is it only during the upgrade?\n. It might be some remnants of having a preview version installed that may have had issues? I honestly only saw that while I was working on the feature. \n. It's in the chocolatey.cmd file and inside the chocolatey.ps1 file. Solves an issue with the Turkish \"I\" which was making it impossible to use chocolatey.\n. closing unless there is anything left to discuss\n. unintended side effect of still running the old code during the install of chocolatey.\n. Thoughts?\n. It's written out in the Generate-BinFile method. In 0.9.8.13 it writes them in a more portable manner. However during the upgrade, the nuget.bat file is generated using the 0.9.8.12 code.\n. Nuget.exe will not be linked in vNext\n. Undocumented feature this release but fixed in fc768d4b097e97d243e661e654588431d183c50b\n. Undocumented meaning dark feature, subject to change.\n. Nuget.CommandLine - it's been there since the beginning. Bad name (on nuget.org)\n. Fixed in 9c73f18beb0ed6cb6aee38b09479507d73877240\n. Apparently there is a second one with the same name: http://win-get.sourceforge.net\n. Sounds like we just need to not work with any packages ending in .config. Do you think that would be agreeable? Or if we don't find a file named something.config we try looking at it as a package name instead.\n. Oh, sorry, I already fixed the issue using EndsWith(). But then I thought about it some more and we shouldn't restrict a package name ending in .config or cause confusion if someone has one named as such.\n. Fixed in 6d2c54f6d290088cb622ded3560476a61b03db24\n. Here https://github.com/chocolatey/chocolatey/wiki/CommandsInstall - probably could draw out the packages.config to it's own wiki page though.\n. Fixed in 3c7701e49b8d912aee52d911c4c16d3f4873605a\n. Fixed in 6d56726e9aca6818d3fc9810d943d16eff6a4c14\n. interesting that you would use BITS...\n. Maybe choco should use Curl - how does it do with proxies?\n. This is in 97b94b2d7d5874da2e94bad693b3e8c51a146b64 and 5a9d3968042cdacfdfce62f05e0108a772c5019e. This closes #297\n. Fixed in 7aac8983c358bf4e0dcccaa6465b567628063480\n. Noticed a couple of things here. \nWindows XP would no longer be supported.\nAdmin privileges are required - one of the tenants of choco is to run on systems w/out admin. And it does as long as you stay way from admin packages.\nHow does this work with tools that have required dlls or configs sitting next to them ?\nWe talked about generating batches differently for gui files. While this would be awesome and a very clean way of doing this, I can't limit choco down to only admin users on greater than xp.\notherwise I would kick up choco in admin mode.\nPerhaps this is a \"mode\" we can support later for those that will be running as admins.\n. Tried with nant - couldn't load log4net. Boo.\n. you can put the symlinks under a user profile? Chocolatey installs under user environment settings since 0.9.8.7.\n. Agreed.\n. your link didn't work.\n. I think this may be duplicated by some other issues...\n. Is this still an issue? \n. The nuget.exe file inside of chocolatey isn't meant for public usage. Once we get in a feature to ignore exes, that will be one of the first on the list.\n. Fixed in b18b0819b3f67b06ca47cef7745d7d2f2dd1d12c\n. Fixed in 4aeea37b2a91ccaf279c6c34bef136b4c812edc9\n. Open PowerShell as an administrator. \n. calling this good to go...\n. Freakin awesome idea. :D\n. @jasondenizac It's fine to put issues on NuGet gallery, but keep in mind that Chocolatey and chocolatey.org are separate projects. Having the nuget gallery add it would be awesome, but sometimes things are quicker to get added to chocolatey.org and pointed to later. See this PR: https://github.com/NuGet/NuGetGallery/pull/525\n. It's coming hopefully with next release. I was just thinking of this\nenhancement this morning.\nOn Monday, May 20, 2013, Phil Baines wrote:\n\n@gep13 https://github.com/gep13 Thanks!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/67#issuecomment-18153324\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. no updates yet, but it will be automatic without a save flag. Folks would want to opt in automatically and opt out by a flag.\n. There is a workaround for this that @jongalloway came up with recently.\n. Closing here as the issue has been moved to https://github.com/chocolatey/choco/issues/357. Please continue discussion over there.\n. This is my bad... I will get that fixed. \n. okay, give it it a whirl now. \n. Awesome. With ruby.devkit you should not need to restart. It should start from nothing and hook it all the way up.\n. After the install you would need to restart the console though :D\n. This should be fixed now.\n. Actually people have reported that this is true just the way it is now. Can you verify?\n. Awesome. I could probably update that then. :D\n. Done\n. Fixed in beae3410d488fd170ecf71534c85f8fc1ebe21bb\n. Fixed in 2264e8101db5da929306b2ae391ea419cef97156\n. Fixed in b18f76fc245dcd268f47a7e8a6862f21213cca51\n. Fixed in 02eaf8e807137b610d1b64998adc080131c557c8\n. Awesome, thank you. Freaking droid web browser i'm on right now is a pos when it comes to editing. It doesn't go to where you point and it's impossible to navigate by keys\n. By the way, this is a dark feature right now since 0.9.8.15: if you have bobBob.exe in a folder, you can place a file named bobBob.exe.gui right next to it and chocolatey will set it up as a gui app instead.\n. This is now documented in https://github.com/chocolatey/chocolatey/wiki/CreatePackages\n. Unfortunately building is not in the vision of chocolatey. Library packages are not out of the realm of chocolatey's vision, but pretty darn close.\nThis is where apt and chocolatey diverge. Chocolatey does not do source packages. CoApp on the other hand is up and coming for exactly this idea. https://github.com/coapp \nMore details here: https://github.com/chocolatey/chocolatey/wiki/ChocolateyFAQs\nThank you for asking.\nBy the way, nuget is looking to add support for C++ - http://nuget.codeplex.com/discussions/280649\n. Closing this for now pending any further discussion....\n. This shouldn't be too hard. Likely it will be pulled into the next version. :D\n. Great... :( Thanks for reporting this. \n. It seems that other folks are reporting this issue as well. For now try adding source=\"http://chocolatey.org/api/v2/\" />\n. Fixed in dc736b5c9d6bb99c64b0841ae6bf0a8eec6389b8\n. slap the source into it for now... It's the source that is the issue\n. Thanks. This definitely appears to be a bug...\n. Fixed in d34231feb682e834f7d8b404e6e0bfc4487ebcf8\n. By the way, what is the actual value of the environment variable on the machine? Closing and reopening powershell and calling this might be sufficient to get the machine value.\n. The error at the end is the changeover of chocolatey to a new folder and it having issues updating the powershell session's path.\n. Close, reopen powershell.\n. https://github.com/chocolatey/chocolatey/issues/80 - already fixed the issue. It's related only to the instance you are in...\n. Good, job? ;)\n. @krivan you can already starting hosting your own private repositories now. The one trick around this at the moment is that you would have to host both the public package and your private one on the private repository\n. This now works thanks to @LucidSage's work. :D\nhttps://github.com/chocolatey/chocolatey/pull/101\n. And you don't even need to have the dependent packages on the same feed.\n. @MarkJohnson1974 I've added a new issue to capture the additional differences - https://github.com/chocolatey/chocolatey/issues/105\n. Apparently you can already do this - cinst blah -source \"\"source1;source2\"\" (note the double quotes)\n. @MarkJohnson1974 UNC paths should work - if you quote for spaces, make sure you double quote.\n. Awesome! It's likely we'll have a configuration at some point to ease all pain in proxy issues, since they all like to work differently... \n. Until then I don't have a problem setting this one up.\n. Fixed in bd3eefefc440d821b6a97abd1381fe64d7b176a6\nFull disclosure, moving stuff around so I just pulled it in like a patch.\n. In the next couple of weeks I am looking at a release. Got one more bug to fix and hopefully some pull requests to bring in. :D\n. The beta is out, unfortunately you will have to do a little bit of manual work to install it (the new version will handle prereleases, 0.9.8.16 doesn't) - \nGo to https://github.com/chocolatey/chocolatey/wiki/Installation\nand use the NuGet.exe + PowerShell Method (very bottom) - you can use chocolatey to pull it down but you will still need to dive into the installation folder to run the install script manually.\n. Hmmm - just make sure you don't have a Help.ps1 and an Install-All.ps1 in the functions folder anymore (two files that were in 0.9.8.16 were renamed to include \"Chocolatey-\" on the front).\n. Oh right - to do the nuget method you would have to say nuget install chocolatey -pre\n. fixed in 2eec8417032c706075c7b872f926411129ac8530\n. Fixed in 2eec8417032c706075c7b872f926411129ac8530\n. You are close - step #3 is just the verbose output coming back from NuGet. It is not considered installed by chocolatey until finished and the message comes out.\n. But I do agree - chocolatey needs that last step to say - \"Yes, this was successful\" \n. This is related to https://github.com/chocolatey/chocolatey/issues/10\n. Chocolatey != 1.0 fellas. Expect some rough edges that need to be smoothed out. :) \nThis is one of those. \nMy preference is to mark as broken so someone can inspect what went wrong. (and move it to a particular folder that contains broken packages)\n. Still stewing on this one... leaning towards good.\n. This is going to be done with a configuration - you will need to enable it on the configuration. I will push that up and then you can set the command if you like\n. The default is to NOT use the nuget config. If you want to use it, you will have to set a user configuration telling it to. Does that sound fair?\n. I'm pushing the config file in master, if you want to take a look at that and reissue a pull request (that way you get your name on the work). Use a different branch than master please. Thanks.\n. Closing this one...waiting on the other. Let me know if you want it (I can reimplement if not)\n. Great! There is github for windows that helps when learning git. I'm releasing chocolatey this week so if you want to get in on that try to get it to me today or tomorrow. If not, it can just roll into the next release. :D\n. Hopefully addressing this in 0.9.8.17. It doesn't find the right folder when looking for one with prerelease bits on it...\n. Just fixed the cup side of the house (https://github.com/chocolatey/chocolatey/issues/90) and I should get to this sometime this week.\n. I believe this is fixed. I could not reproduce this with the latest code...that should be out in beta form in the next day or so\n. Nice...not everyone installs chocolatey to C:\\chocolatey though\n. You can actually pre set the chocolateyinstall variable to point it somewhere else. But in this case it would capture 90% of the first hits.\nIf you are in powershell, it is already set at first initialization (it's just wrong for some reason - it was fixed in the source and will go out on the next release)\n. I think I might go ahead and add this to the code... thanks for this\n. Thanks...I will take a look at this.\n. Fixed in ab24dda6aa0596d31f78f0d21357b80de2056bc1 - out with 0.9.8.17 release\n. You had multiple folders with 0.1.0 of sake in your folder structure, even though they were different prerelease versions. \nChocolatey had not yet made it to handling prerelease folders, but it will in 0.9.8.17 (next release). It errorred trying to add more than one item to the found packages dictionary. The fix is in with specs (https://github.com/chocolatey/chocolatey/commit/80df71b6f2bbecc4ec0f01539050cc966641dec9#L3R71).\n. Thanks...I will look at implementing tests for this unless you want to\n. We use Pester - the testing aspect is not exactly straightforward. But we have really good examples in the tests folder. If you follow that down to unit you will see an example of some tests. https://github.com/chocolatey/chocolatey/tree/master/tests/unit\nIf you come up a folder you will notice another folder named functions (which really should be named mocks). https://github.com/chocolatey/chocolatey/tree/master/tests/functions\nThe mock may already be setup correctly. Most tests in the system (there are not a ton yet, I'm new to powershell testing as well!) are unit and not integration tests. Which means you test by what you expect from different functions.\nI did a recent presentation on powershell testing which may give you some pointers into this area: https://github.com/ferventcoder/presentations/tree/master/dotNet/powershellbdd\n. I have it in mind to make changes to Pester to autogenerate the mocks and variables. Although I haven't yet made much progress (priority over time) yet.\nScott is on board with the idea so it should be pretty easy to get into Pester once completed.\n. looks like it missed this commit - 3c27cb91bfbc6e44293eef3629cf94200f60a768\n. Not too bad. You went to the level to add the mock in. Almost there for specs.\n. files are in. Freakin awesome. Thanks!\n. Found an annoying issue with UAC - it's fixed now but can you confirm that cygwin runner (not the installation of cygwin) requires administrative access?\n. It was not an issue with your code, but rather how Start-Process -Wait misbehaves when you use -Verb \"RunAs\" and UAC is on. Take a look at this: https://github.com/chocolatey/chocolatey/commit/27d9288a30e19b1511006051920b0d0da1f3b367\n. the bug was there all along for Chocolatey-WebPI. I just fixed it for both files\n. That question only answers the installer - not the question I have which is when it runs to download and install packages. Which by the way is freakin awesome. \n. Usually I do as well - UAC is annoying to me. But chocolatey must support it.\n. Awesome. :D\n. Not a problem. About to put out a beta. The best thanks you can give me is finishing the puppet provider. :D\n. I think msiexec already uses start process -wait :D\n. This is a good start. Very highly appreciated!!!\n. We'll have to figure out the uninstall path (I was thinking hints to program files locations [x86 versus not] for the longest time) for the most common scenarios.\n. This is in. Please delete your branch and pull from there to work on additional pieces...\n. Yeah. A whole bunch of helpers for uninstall would be good. Let's see how much choco itself can do without helpers in a parallel track. I'd like to pick this back up once the posh runner uses runspaces.\n. used to be a big file that was broken out. Not sure what you are asking.\n. 0.9.8.16 is still a big file, not broken out.\n. Delete the versioned chocolatey folder from chocolatey\\lib and then from the _packaged_output folder call cinst chocolatey -source %cd%\n. I like how you send me a pull request. DO NOT ACCEPT. lol\n. We can drop it in the package folder to a known file. If it is there we don't really even need a chocolatey uninstall file. :D\n. Shouldn't an uninstall handle the stopping of services/etc? I know that it doesn't always but one would think it should. Pre-uninstall. :D The uninstall before the uninstall. ;)\n. I'd say this is pretty close. Only thing I might do is drop this file in the package directory itself (the versioned one). That way if I have side by side installations I can uninstall them separately if I want. If I understand right, the code changes for each install.\n. Awesome! \n. @tyrken @rismoney auto-uninstall has always been the idea so that an uninstall script would not be necessary with certain installer.\n. Fixed in e5d8eec65ee90b94ad2188d06675b23d4b9d9abc\n. This uses the older easy_install as opposed to pip. http://stackoverflow.com/a/3224103/18475\n. http://stackoverflow.com/questions/4750806/how-to-install-pip-on-windows\n. It's so much cleaner than all of that stuff I was doing... :D\n. This is in. Thanks!\n. This is in...thanks man\n. Good thing that is only in the beta. Thanks... Let's get that fixed before release\n. I can take it or you can... seems pretty straightforward.\n. Fixed with PR https://github.com/chocolatey/chocolatey/pull/104\n. Awesome....\n. package availability. Nuget.exe handles all of this on the back end, you just need to send it the right arguments. :D\n. Ha! Just realized through @LucidSage 's commit that you can already do this - cinst blah -source \"\"source1;source2\"\" (note the double quotes)\n. https://github.com/chocolatey/chocolatey/wiki/CreatePackages\n. These are only the files in the package folder. It's extremely convenient when you have a whole set of executables you want created, which is more often the case in my experience.  \nCurious why you more executables in your package folder that you don't want added as redirects versus the ones that you do. Are the others temporary? If so maybe it is better to use a temporary folder and clean it up when you are done using it in chocolateyInstall.ps1.\nCan you give me an example @u9520107?\n. It looks like you may have overwritten your repository unintentionally.\n. Looks good, only issue I run into is that you need double quotes around the values since powershell strips them off as it comes in\n. I also noticed that chocolatey already supports multiple sources if you just cinst blah -source \"\"source1;source2\"\" right now...\n. It might be that when it passes it to nuget.exe it is stripping off the quotes (appears that way from your pull request).\n. Thanks! I'm a little lost on when you would reuse the same download for install. The only time that most folks would reuse the file is when there was an issue with the install (usually only helpful while building/testing a package).   \nIt brings up questions like\n1. What if the installer file is corrupted (or for some reason unusable)?\n2. What if the remote file doesn't have different versions? \n.  1 - I like where you are going with that. The head request though, how well does it work with redirects that need cookies? I would prefer that over making pkg authors figure out the MD5 (especially for applications that always have the same url for every version).\n2 - We can communicate information to the helpers - I prefer not making the author pass more information to the helpers when we can easily get the information to the helper through an environment variable.\nOne of the biggest benefits of chocolatey is the ease of creating/maintaining packages. We want that to be as straightforward as possible.\n. It's called a redirect loop.\nDownload anything from sourceforge and you will see why a need for cookies on a redirect. Here is the code with a reference https://github.com/chocolatey/chocolatey/blob/master/src/helpers/functions/Get-WebFile.ps1#L43-44\nhttp://stackoverflow.com/questions/518181/too-many-automatic-redirections-were-attempted-error-message-when-using-a-http\n. :D\n. I do think this is going to be pulled in...in one form or another.\n. @rismoney agreed.\n. Unless we can guarantee that folks are doing the updates against latest chocolatey code correctly,  I'm not sure we should be advising they do. To do it correctly, they essentially have to do a force push to overwrite history on github and that essentially scares folks.\n. Gary, \n I think it's something we can add as a wiki/markdown file for contributors.\n. Folks, I think I'm implementing the idea of this, but not in the way this pull request was done. Closing this as not fixing.\n. Yep, #428 will be closed in a few.\n. @LucidSage - This is great! I think though that we may want to talk more at length about setting config values. Do you want to start a discussion on the forum?\nThings to think about -\n1. right now when I update chocolatey the global config will be overwritten. Not sure people would like this behavior.\n2. I think I would like the command for changing configuration values to be chocolatey config as in chocolatey config configValue [add|remove values]. If there is not an add or remove, it will display the current value. And if it's a list it should display all of the values.\n. As I've thought about this more and more, I think I want to move forward with this one. :D\n. Oh right on. I should have came in an looked to see if you had additional messages prior to troubleshooting.... :D\n. Probably a network hiccup.\n. I get that at the end as well. \n. I ran chocolatey afterwards with -debug and things look good. \n. Might be a fluke of some sort in the installer files\n. Could have been worse - https://gist.github.com/2420a607be697debaa44 - DOH!\n. Fixed in f612e17d6339406a829fad2499355b3272d70148\n. So I can close this one because I pulled in the other?\n. What is the original PR for specific folder capability?\n. This is in.\n. Packages for extensions would be named something.extension to make them discoverable. We might want to enforce the convention by only calling the extensions installer if the package name ends in \".extension\"\n. The folder: we could name the folder modules. I think extensions explains the purpose better.\n. Fixed in 0cec008dcd3ca23061740dff7c1bd44f562a9364\n. psm1 - IIS helper may be one. To do something like that we could push the extensions to the admin calls as well if they exist. Then you can take a dependency on the extension - wow this could get really interesting (and confusing).\nThis is really an opportunity to see where folks want to take chocolatey and to see what extensions we would bring into the core product. It would also allow folks to add new commands to chocolatey (still working on that one though)\n. I want an IIS helper in the core product - I think we are missing out on many pkg opportunities since the product itself is a website.\n. There are folks out there smarter and better than us and I want to be able to add them into the chocolatey equation. :D\n. Reason for psm1 over ps1, you may have some ps1 functions you want to keep internal so the psm1 serves as the methods you want to expose.\n. Fixed in afd98764188af090e6b3f8569696e37aaa81e47a\n. Thanks! I will be pulling this in this week and pushing out a new version.\n. Might have missed something in there with python. Ruby I converted back to not using the config file or external process.\n. Thanks for reporting this...\n. Per chance does your chocolatey path have spaces in it?\n. Fixed in 8743e1ca28a572c651e4464a2037047924b9b7a3\n. I found that the easy.install nuget package (I don't own is a little wonky). It may take a couple of tries to get it to work right.\n. Why closed?\n. Great question, but one for @rismoney \n. Cver serves the purpose of finding what the local package is on based on the remote package. Cup uses cver.\nBut I think I understand what you are saying... calling it to just query the local versions.\n. When I need to use switches, I don't pass them as parameters but I set them globally. That seems to work in PowerShell versus passing them.\n. and I thought about the last night. I think it should be renamed to localonly so if the switch exists then we only look locally. Thoughts?\n. like -force and -pre\n. This is in...\n. We do use a proxy. Try adding -debug switch to your calls to see if you get anymore information on what is happening...\n. Thanks! I have a multi core processor and I haven't noticed this as an issue but I'll definitely take a look\n. Maybe that is an issue then... :D\n. This has been merged c540769811b452f28edbca759ae7c822769acdb2\n. Workaround for now is to just call cinst packagename\n. We may need to talk about his some more. Never heard of it before...\n. I think we'll likely pull this in... :D\n. This is in. Thanks for the contribution!\n. You are using master branch for pull requests...\nWe like to keep things concise and ask that the pull requests come in from specific branches...\n. If you need help with this I would be glad to discuss\n. yes, unless you can update this current one...\n. I don't think that is possible though... When you create the new one, make sure you reference this one before you close it. \n. Pull request moved to https://github.com/chocolatey/chocolatey/pull/130\n. Will be later this week or next week before I get to the pull requests. :D\n. I take it the local only meets your needs. If so, please close this issue.\n. It might be better in the upcoming release... I think that is what @rismoney was saying. Thanks for the suggestion. \n. The ChocolateyInstall variable lets you install it where ever you want. https://github.com/chocolatey/chocolatey/wiki/Installation\nChocolatey installs to the root of the system drive which just happens to be C on most machines by default. Curiosity on why this is not clean? \nIt depends on your definition of warning, but it clearly logs out where it is installing to during the installation: https://github.com/chocolatey/chocolatey/blob/master/nuget/tools/chocolateysetup.psm1#L159\nA prompt stops execution and waits on user input. This goes against the ideas behind chocolatey, which is unattended installs, even of itself. The upgrade process of chocolatey uses chocolatey and that would result in a 'cup all' execution stopping, which might upset folks who want the whole thing to just happen silently in the background. \nFor the folks who want more power over their experience, that is why we provide you the ability to change your conventions and pass in Install Arguments for packages (https://github.com/chocolatey/chocolatey/wiki/CommandsInstall). \n. Ruby, Python, PHP, CygWin, PostgreSQL, etc, also install to the root of the system drive as a default. I'm never sure why some folks feel the program files is more clean (not saying this is where you suggested, just that other folks have). \nTo me if something goes to the program files it also goes to the registry as an installed application, one that can be uninstalled from programs list in the control panel. To me having things in there that are not controlled through the system install registry is not clean so I wouldn't see chocolatey there.\nThe other location, User Path (C:\\Users\\username and C:\\Documents and Settings\\username) to me starts to scare me based on the character limit in batch based redirects (not sure if it used to be 255 character path length or not). I don't want to get into cases where we go \"C:\\Documents And Settings\\ALongUserNameCuzICanUse32Chars\\Chocolatey\\lib\" (which is already over 70 characters) before we get to the actual folder. Plus I don't know about you, but if I need to break into the lib folder for some reason, that's a lot of folder navigation. It's already bad enough I have to go 3 folders deep, I get irritated when I have to drop 5 folders just to get to something useful. Not that I always use folder navigation starting with computer.\nSo to me, and you don't have to agree, the systemroot is much cleaner. And for those that don't agree, that's why we provide a means to install to some other directory.\nThoughts?\n. I also don't feel this way about everything. Somethings I would rather see in a subfolder. I'm not even really sure what and when I want to see things in systemroot versus a subfolder like c:\\tools (where I put many useful tools I find).\nI reserve the right to contradict myself. ;) (quote originated from Oren Eine)\n. It's all good. We can agree to disagree on this one.\nOne thing I also didn't mention is the low privilege install aspect of chocolatey (another reason we shy away from Program Files). Non administrators can install chocolatey (through one of the methods, not sure if the default will work) and be able to run chocolatey for non-administrative installs of applications (aka what chocolatey calls tools).  I'm not sure if you've checked, but Program Files requires higher privileges than the Users group to be able to write to the folder (at least on Windows 7, I didn't check all the others).\n. Guess I didn't have a wiki page up yet: https://github.com/chocolatey/chocolatey/wiki/Uninstallation\n. We could provide a version of chocolatey that would \"install\" to the system meaning program files and the install registry. Would always run under administrative rights and other things... of course this version would likely cost money since it would be for commercial/enterprise uses.  \nI did my time with massive scale enterprise applications. I am very familiar with SOx and many of the good things developers should do (like principle of least privilege)...  \nChocolatey is free, OSS and meant for consumer purposes in it's current existence. It's not perfect, but it is also not v1 either. And even when it is I wouldn't expect perfection. Perfect software has problems shipping. ;)\n. Based on the following, where would you install chocolatey (some repetition from this discussion)? https://github.com/chocolatey/chocolatey/wiki/DefaultChocolateyInstallReasoning\nI am really curious, I am not trying to be facetious. I welcome healthy discussion (including healthy arguments). :)\n. Yep, we make use of that in some places. :D\n. Closing this for now pending further discussion.\n. That's definitely not right. Can you list whatyou've  installed thus far?\nOn Tuesday, October 22, 2013, Nathanael Jones wrote:\n\nIs every chocolatey application supposed to install in C:\\ as well? Or\nunderneath C:\\Chocolately? I'm seeing everything appear in C:\\ directly\nunder Win8.1.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/126#issuecomment-26852153\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Ah. Those actually default to root as opposed to program files based on the\nnative installers. You can overcome that by using bin root, both of these\npackages respect that value.\nOn Tuesday, October 22, 2013, Nathanael Jones wrote:\n\nJust ruby -> C:\\ruby200 and PhantomJs -> C:\\PhantomJS\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/126#issuecomment-26861079\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. For clarification - Chocolatey can handle spaces...\n. Yes, there is also one called toolsroot.\nOn Wednesday, October 23, 2013, Nathanael Jones wrote:\n\nYou mean this package? https://chocolatey.org/packages/binroot\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/126#issuecomment-26955392\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. awesome. I will take a look this weekend hopefully :D\n. Since I pulled in the other it's reasonable that this can be closed. Thanks for the contribution though!\n. The only thing I think would be acceptable is to pass those items through the command line and have them passed as header values when making the request (if they are there).\nThat would get you into the src/helpers/Get-WebFile.ps1 (I think it is called)\n. Short answer: I'd like to stay away from storing sensitive information in a file with chocolatey (at least for now). \ntl;dr\nThere is a config file, but I don't want passwords in a file. Some folks put chocolatey in a dropbox folder so they can move it easily between computers. I don't quite agree with this b/c it gets things out of sync (what do you really have natively installed on this computer?) and can cause confusion when updating all of your packages. Some folks like it though. While I don't agree with it/support it, I don't want to introduce changes to chocolatey that limit their ability to do so. If we had some kind of encrypted string in a file it may not translate between computers (depending on the algorithm used). In the past (in other projects) we've used X509 certificates to get a good algorithm between machines. I don't want to take chocolatey in this direction of complexity (using certificates) unless it is absolutely required (read: it's probably not).\nI could be wrong, but the way you save secure string to a file is still machine specific (http://social.msdn.microsoft.com/Forums/en-US/csharpgeneral/thread/d4557d9b-6e7d-4695-bfd0-a22a08e06160/ | http://stackoverflow.com/a/6982430/18475). To save the securestring to a file you would use some algorithm which usually ties you to the machine (or store the IV you would need somewhere, which still gets us into the same issue if we want to store that with chocolatey's directory). Or use X509 certificates, which opens up even more complexity than the other methods (how to install, where to install, what about permissions to the private key, how to sync between machines, etc).\nOne of Chocolatey's tenants is simplicity. Note that simplicity is not the opposite of complex, only the opposite of complicated. I don't want a complicated experience for users. So whatever answer we come up with, it should not impact the user experience in a detrimental way.\n. With choco.exe, this is already resolved. This closes when we switch in the new repository.\n. @skyguy94 \n\nI'm not certain I get the argument here. If my summary is correct, then Chocolatey complicates behavior by breaking a NuGet feature.\n\nChocolatey != NuGet\nYou are also treading on a 2 year old comment. ;)\n. Chocolatey uses the NuGet packaging infrastructure. \nPer the comments on active/unresolved: This is unresolved in current releases of choco b/c the code to do so could have been very painful in POSH, and we've been holding off on some things we knew were painful until the rewrite. Although this is an issues list, some things are enhancements (although this one is not marked as one though...) :/.\nThis has sat because we didn't have a good solution at the time. Apologies, hopefully many of the current issues will be cleaned up.\n. @codearoo clarification - choco.exe uses nuget.core.dll, not nuget.exe.\n. All nuget packages will continue to work. That would be unwise of us without a long term deprecation. I would assume that we tend to handle compatibility well on the team and deprecations. But with your concern, maybe that is not the case? \n. The installation instructions also say you do this from a command line (cmd.exe) and not a powershell prompt. Were you getting these errors from the command line?\n. perfect :D\n. Original discussion here: https://github.com/chocolatey/chocolatey/pull/124\n. Multiple reasons:\n1. Once you have a pull request out from master you cannot do anything additional or it will affect the pull request\n2. You really can't have multiple pull requests at the same time.\n3. It's not as easy for me to see the straight line from where you made changes IF you update your master with my latest changes.\n4. Following the above, it messes up the nice straight line for git history if you update the master with my latest changes when I go to pull them in.\n. If you take a look at the history of chocolatey (gitk from the command line or if you have gitextensions installed you can see it as well)\n. Do you want to see if https://github.com/chocolatey/chocolatey/pull/119 meets your needs?\n. The tool that chocolatey uses for downloads doesn't appear to allow me to do this, but we can keep chocolatey from trying to do anything further with the packages once they are there.\n. I like where you are going. Install and update both ignore dependencies... the trick is how do you get cup all to work correctly...? I'm thinking if someone puts in ignore dependencies and those dependencies are installed, we want to go ahead and clean them up right then during install (or update). If they are already there we just move on.\n. Well that is interesting. If you installed ruby and then called for devkit it should not have....oooohhhhh, freaking nuget algorithm with dependencies. It still should not have installed another version of ruby with an existing one there. We will be upgrading the nuget client once we get a fix released from a bug report I filed a couple weeks ago (the fix is in the code base now, just waiting on the out of band release).\n. My take is we allow someone to pass the switch. In the documentation we say results are not guaranteed. If someone complains, we say it's a sharp tool that won't constrain you but you better understand what you are doing or it will cut you.\nThat's the way I like tools to be. Allow folks to take off all of the safety guards if they need to.\n. It should not have upgraded a dependency that was already met.\n. It should be in the prerelease.\nOn Monday, September 30, 2013, jamescrowley wrote:\n\nIs this available at the moment? We'd use it to install a different\nversion of a dependency than the package author actually specified\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/131#issuecomment-25382564\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. This is fixed...\n. I could always add a link. Please add this an an issue on http://github.com/chocolatey/chocolatey.org/\n. As much as possible I would like to avoid something powershell from the command line. The inner guts of chocolatey are powershell, but the way folks use it from the outside doesn't have to be. \n. Ha! I actually typed out the word \"powershell-y\" but then removed it. :D\nYou can access that within the ps1 (it's gets set as an environment variable), but are you worried about it moving on to the installer?\n. More information on how it is used: https://github.com/chocolatey/chocolatey/blob/master/src/helpers/functions/Install-ChocolateyInstallPackage.ps1#L51-53\n. $env:chocolateyInstallArguments\nDo you think this might be better as an addition to https://github.com/chocolatey/chocolatey/blob/master/src/helpers/functions/Install-ChocolateyZipPackage.ps1\n. Like we'd leave it as installarguments but allow the settings to override defaults in chocolatey zip package function?\n. I'm closing this as a dupe of #159 - that's where the work was done. Use -params \n. @alyssenko-ssi An environment variable for Install Arguments was implemented. However it should not be looked at all for packages. If you need information from the user, one should be using $env:chocolateyPackageParameters, see #159. \n. WHAT?! That's awesome. \n. The initial workings for this are in b87541a5fe5ec04c4a29846c761e528f9070b3b3 - we'll see what other things crop up.\n. @ForNeVeR We already have the powershell refresh in and once the commands become aliases back to the module methods, you will see this happen automatically as there will be no call out to a batch and then back into powershell.\n. Fixed in a09e15896fbc5e790b17b6699cd6b50bc7eb14e4\n. The current state is that unless you import the chocolateyinstaller module, you won't automatically get path updates. Importing the module isn't recommended at this time but some folks are experimenting with it.\nWith cmd.exe you can just call RefreshEnv after an install that would update something in your environment and it will update your session's environment.\n. system vars require admin - that's why the default goes to user. \nTo go to system, it would just take adding them manually and applying this fix for now.\nI think in the future we could make the installer smarter.\n. Weird. Interesting. It might be a bug somewhere in chocolatey's installer script.\n. I would be fine with more named parameters in there. \nKeep in mind that whatever is done, it should work without the supplied parameters or property files.\n. Think I'm getting ready to pull this in. We'll also be rewriting this to make it a ton cleaner as well.\n. This being the installer, not your code. :)\n. Definitely want to get this into .21\n. I don't think is necessary now. 0.9.8.24 had some major improvements to how it handles environment variables during install. \nThis is superseded by #453 which was later superseded by #486.\n. I have two pull requests for FTP support. Probably time to start a document on \"So you want to contribute?\"\n. I like this...quite a bit. Whatever you do though, don't update your repository with my latest changes. I think that document for contributions is going to get written soon. \nWe usually want people to contribute pull requests from a branch that is not master. That allows you to contribute multiple patches that way and doesn't get us into where we need to cherry pick your commits to keep the history in a nice straight line. \n. we'll be pulling it in soon.\n. This is in...thanks for the contribution!\n. This won't work of course until we release the next version of chocolatey (0.9.8.20), but that should be by the end of the month.\nYou can download and play with a prerelease version now.\n. This goes out into full release in a couple of days. So many new things being added. :D\n. grats for the update. Gonna try to get this in this weekend.\n. This is in... thanks! \n. Looks like this may have messed something up with the get config values...\n. Nevermind, this was my bad... \n. Thanks. Not sure why I didn't get an email on this...\n. I think this is still valid.\n. I also have one in email from someone on this as well.\n. This only happens on the session (or existing sessions) that you do the install from, correct?\n. Once you close and open a new powershell session, this works appropriately, correct?\n. Or you actually checked the environment path and it wasn't there and then added that to your session?\n. Last time I checked that only updates your current session, not the path variables stored on your machine.\n. I'm referring to opening control panel, system, advanced, variables and the PATH variables in there. There is one for user and one for system. Just b/c it doesn't end up in your current session (of powershell or cmd) doesn't mean it didn't get added to the actual path.\nHere's an experiment: open the system stuff in control panel and then go back to your powershell session and add c:\\bob; to the path the same way you did in powershell. Now look in the actual path to see if it got added. Both places (user and system). Now close and reopen powershell. Write-host your path. Is c:\\bob still there?\n. I think I like that better dropped into a new issue - your fix... please submit as an enhancement.\n. Just FYI - choco 0.9.10 supports this now without closing and reopening your shell - https://github.com/chocolatey/choco/issues/664\n. @acgetchell Can you tell me the output of calling refreshenv? Does it say \"Refreshing for cmd.exe\" or does it say for powershell.exe?  If it says the former, it means you do not have the PowerShell profile installed - which provides this and tab completion.\nSee https://chocolatey.org/docs/troubleshooting#why-does-choco-intab-not-work-for-me on how to remedy this so that when you call refreshenv, it is the PowerShell version that is being called and not refreshenv.bat. . Please see https://github.com/chocolatey/choco/issues/991 and https://github.com/chocolatey/choco/issues/894 to get a better understanding of why this isn't set by default on install.. I also filed https://github.com/chocolatey/choco/issues/1392. @acgetchell Looks like an artifact of already having that in the PATH when you ran it the second time. It doesn't show that environment variables like PATH were updated in the output and I don't see a call to refreshenv here.. okay\n. Any chance you get this to me in a branch (not master)? There are two other commits in here that are not related to this pull request.\nPlus it helps if you want to send multiple PRs at a time.\n. Sorry for the confusion. Branch on your end and make the changes there. A branch named something like the issue itself. Send the pull request TO master. ;)\n. This looks awesome. Thanks!\n. Awesome. :D\n. Taking a look right now...\n. Ran it with /l*v %cd%\\msi.log and found the issue.  \nMSI (s) (D0!FC) [12:12:38:922]: PROPERTY CHANGE: Adding HideFatalErrorForm property. Its value is 'TRUE'.\nThis setup requires the .NET Framework version 2.0.50727.  Please install the .NET Framework and run this setup again.  The .NET Framework can be obtained from the web.  Would you like to do this now?\nCustomAction VSDCA_VsdLaunchConditions returned actual error code 1603 (note this may not be 100% accurate if translation happened inside sandbox)\nAction ended 12:12:38: VSDCA_VsdLaunchConditions. Return value 3.\nAction ended 12:12:38: INSTALL. Return value 3.\nI'm thinking Win8 doesn't come with .NET framework 2.0. I believe you can install that right from chocolatey using webpi as a source, but you will need to list out the available packages so you can install it.\nOne thing we might think about doing is adding a .net framework 2.0 package so other packages can depend on it. It would work much the same way as .net 4.5, where it only goes to install if it doesn't find the installed registry key it is looking for.\n. Closing as not a chocolatey issue.\n. Thanks, definitely something that can be added.\nThe option of adding executable containing folders to the path would add quite a bit of noise to your path depending on how many tools you install.\n. Shimgen has fixed this. \n. Now this is awesome! With tests, that's a plus 1000. :D\n. I think all should do that. It aligns well with other package managers. Just haven't yet gotten to that one.\n. Commenting on the chocolatey google group -\nhttps://groups.google.com/forum/?fromgroups=#!topic/chocolatey/heV-XGc2ACw\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\nOn Thu, Sep 13, 2012 at 10:54 AM, Matt Wrock notifications@github.comwrote:\n\nTook a look at adding uninstall. While it looks pretty trivial for this\nfeed. It seems like the current codebase is in need of a more pluggable\npattern. Right now, each feed have dedicated scripts for install, webpi and\nwinfeatures have inline conditionals for lists and uninstall only supports\nnuget.\nI'd propose that each feed have their own dedicated script(s) for all\nfunctions and the Chocolatey-XXX function becomes a factory or just\nprovides obviously common logic. There are a number of patterns that can be\nimplemented. One suggestion:\n- A provider, say webpi, has a entry script WePi-Provider.ps1\n- Chocolatey exposes functions like Install-Strategy ([scriptblock]\n  $InstallScript){ $InstallerRegistry[$source] = $installScript}\n- $chocolatey exposes a $ChocolateyArgs that the plugin script can\n  access ala $ChocolateyArgs.PackageName\n- Chocolatey dot sources all the plugins when the module loads\n- Chocolatey invokes the appropriate script when user invokes\n  Chocolatey-XXX.\nThis is very rough and hardly baked but you get the idea. I'll post this\non the forum and push this feed as is. Then we can create issues for\nplugins if we think this makes sense and also add another issue for\nsupporting multiple packages.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/150#issuecomment-8533080.\n. Thanks! This is probably better to do in general than looking at a file. \n. This is in... thanks!\n. It's the capital \"I\". I thought I had fixed all of those.\n. First fix in 556024f1482370bb3b056276ae08689b3ddcc064\n. Are you still finding issues?\n. I symlink or just run the tests as part of the build. You will need pester installed.\n. Command is a bit harder, but for powershell you suggested the following: \n\npowershell\nEnv:PATH = (@(,[Environment]::GetEnvironmentVariable('PATH', 'Machine') -s\nplit ';') + @([Environment]::GetEnvironmentVariable('PATH', 'User') -split ';') | Select -Unique) -join ';'\n. https://github.com/chocolatey/chocolatey/issues/134\n. It's in issue #134\n. How do you do a full environment refresh? I would love for that to happen with both powershell and command...\n. Install-ChocolateyPath actually pushes the new path...perhaps we can emulate that a bit.\n. But it won't carry all the way back to the command line. That's what I'm hoping that crazy poshcode will do.\n. Boo...\n. Need both powershell and cmd shell versions... \n@mwrock we'd need to iterate over all of them.\n. Command line - (it's ugly) - http://stackoverflow.com/questions/171588/is-there-a-command-to-refresh-environment-variables-from-the-command-prompt-in-w\n. HA! We found the same article!\n. I'm down for it if it works. :D\n. It just show up too many times per package (the errors are displayed more than once sometimes). \n. Same goes for success logging.\nAs far as the holding area, yeah, I think we install the packages to a holding area - when they are successful we copy them up (prior to running the exe locator).\n. You can add to the wiki page... please mention the binroot for packages - we have the concept of having some packages install to another directory if someone defines an environment variable.\n. And it should be mentioned that if you want to override the default installation, just add to the installation arguments the correct switch and location for the particular native installer - jhttps://github.com/chocolatey/chocolatey/wiki/CommandsInstall \nThe important part is that you need to be intimate enough with the package to know this...\n. Lots of questions in here. \nI would point to the FAQ question from the create packages page - and maybe put a little blurb that highlights the difference. It is definitely an asked question, and frequently. :)\nThere is a push for an Install-ChocolateyTool function - in that function it would look up the binRoot (or whatever we call it once it is in chocolatey).\nConsole2 is a tool (no native installer). But there are other ways to get tools - which download the archived version (.zip, .7z, .tar) and then unpack it to somewhere. Lots of these just unpack it into the package folder itself, which allows the executables to be found by chocolatey and put on the path.\nAs far as MSIs and native installers - the person who wrote these had in mind a location for the application to install to (in program files). This IMHO should stay the default. I know the argument can be made that there are some packages that don't, but this is due to the littering of the systemdrive with installs. Usually MSIs are easier to work with since 99% of the time they have the same installation switches, one of which is the install location.\nThe general idea behind chocolatey is to move to less and less work being required in the chocolateyInstall.ps1. We want to address patterns and make that easier so that one can just call one line functions. You can see there are a lot of packages that already go that route (if they are just pulling in an application). \n. One thing we will likely do in the future is allow folks to pass in the installer type (NSIS, InstallShield, etc). Then we can make assumptions on some of the switches. This is closer to what I saw chef was starting to do in their default provider for windows. I also saw it in another package manager that is now defunct.\n. Is this seriously a behavior in Powershell? That it messes up the PATH user env var if it doesn't exist?! You think it would treat it fine... \nThanks for reporting, guess we are going to need to look into it a little more.\n. Fixed by https://github.com/chocolatey/choco/issues/699\n. Implemented in choco.exe as choco new.\n. Ha - the don't pull yet is still in the one that is outstanding. :D\n. I'm one of those archaic users that spends more time on the straight command line shell. :( \n. you can just call dir in powershell (although it's an alias of something else now).\n. Maybe that brings up the idea of opening something native to powershell with chocolatey - and installing it to their profile (much like poshgit/hg/whathaveyou do).  It still looks like the native command but it doesn't fall down to the command shell. \nAs in Set-Alias cinst Chocolatey-Install (and for all the rest). :D\n. Agreed on what Matt said. And if they haven't, they will find chocolatey fairly useless in powershell as well. :D\n. The real trick is finding the modules since someone can install it to other folders. We could also provide a module that is dot-sourced with all of the commands we want seen.\n. I'd prefer not documenting the conventions on the methods, even though those could be used as well.\ncinst (so it's one for both interfaces) references Install-ChocolateyPackage (or something similar if we have a naming conflict).\ncup - Update-ChocolateyPackage\ncver - List-ChocolateyVersion (or something like this)\ncuninst - Uninstall-ChocolateyPackage \n. LOL - Export-ModuleMember is exactly what chocolatey already does for the utility functions it allows the chocolateyInstall.ps1 to use. \nhttps://github.com/chocolatey/chocolatey/blob/master/src/helpers/chocolateyInstaller.psm1#L12\n. @mwrock Did those separate issues get created? \n. This already exists today? installargs - https://github.com/chocolatey/chocolatey/wiki/CommandsInstall\nIs this not the same?\n. Yes. This gives someone direct access to the native installer so they can pass their own arguments and even override the args going to it.  It's really a power user feature b/c it puts you right against the metal.\n. So you could be talking about something slightly different...\n. We've already talked about the -platform x86 switch - I think there is an enhancement listed for that (and if not, let's make sure it gets listed). :D\n. -platform is for the utility function which the package dev has no access to. So the key is completely transparent to them.\n. We need to get this in for the next version. Granted it will be rudimentary, but it is necessary for a recent package issue where the vendor wanted you to pass something or fail the package.\n. How about choco something -params \"@{bob=1;bill=2}\"\n. This is very naive as mentioned in the commit (no spaces and must be specified in EXACTLY the format shown). If you want to start playing with it though, it's in the just sent out prerelease.\ncinst chocolatey -version 0.9.8.22-alpha1\n. $env:chocolateyPackageParameters in the package....\n. [hashtable]$var=$env:teshhashenv\nThen call $var?\nOn Sunday, November 10, 2013, allensanborn wrote:\n\nIt doesn't look like that will work.\nThe hashtable is getting cast to a string. So when you try to get it back\nout you just get System.Collections.Hashtable.\nWhat are the limitations on using the $packageParameters variable in our\ninstall script? In my test package I'm getting the hashtable and the\nparameters that I sent in via cinst.\nPS C:\\Users\\allen\\Documents\\GitHub\\Chocolatey-Packages> $testhash=@{name=\"value\";name2=\"value2\"}\nPS C:\\Users\\allen\\Documents\\GitHub\\Chocolatey-Packages> $env:testhashenv = $testhash\nPS C:\\Users\\allen\\Documents\\GitHub\\Chocolatey-Packages> $testhash\nName                           Value\n\nname                           value\nname2                          value2\nPS C:\\Users\\allen\\Documents\\GitHub\\Chocolatey-Packages> $env:testhashenv\nSystem.Collections.Hashtable\nPS C:\\Users\\allen\\Documents\\GitHub\\Chocolatey-Packages>\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/159#issuecomment-28156258\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Well that is easy enough to fix... ;)\n. Here we go choco something -params 'value1=bob;value2=''with spaces''' - the two single quotes value2=''with spaces'' will be converted to value2=\"with spaces\"\n. @rismoney @Iristyle Interesting idea proposed by you guys - the chocolateyInstall.ps1 becomes chocolateyRun.ps1 and in it it contains functions that chocolatey will call \npowershell\nfunction ShouldInstall {}\nfunction InstallSteps {}\nfunction ConfigureSteps {} #optional, in case folks want things installed but not configured.\nfunction UninstallSteps {}\n. I guess the comment here is if I install the package for a pre-existing installation and it doesn't run the install steps, Can I still uninstall the application with chocolatey?\n. See, this is where I disagree. To me this is a nice way of making chocolatey aware of existing apps and taking over the updating of those items.\nBut I can see the argument for both ways.  The question is, even with a switch to get both behaviors, what is the default?\nBy default now it uninstalls (in the case where ruby 1.87 comes in and you already have 1.87 installed).\n. Second question - \n I have ruby installed but an older version. How far back should the ruby package be looking as acceptable?\nIf you have 1.8.7.123 (not sure on the last part of the version, this is an example) and the installer pulls down 1.8.7.124, should it go ahead and upgrade the older version?  Now contrast that with 1.8.7 and 1.9.3? \nThere are situations we will run into where an app requires a specific version of a dependency. Consider how that should work as you consider the answer for this. I might have ruby 1.8.7 installed, but the app requires 1.9.3 to be installed. What should happen in this case? \n. Of course, if I have 1.8.7.123 installed and the package that comes down is 1.8.7.123, this is where I want this behavior to not install. \nI have to throw out how idempotent is the process right now? Most apps don't f things up when you run the installer multiple times.\n. You said it here and I said it on the issue itself. Ha. :D\nhttps://github.com/chocolatey/chocolatey/issues/165#issuecomment-8741741\n. The neat thing here is that what it does now without all of this extra work DOES bring an existing install inline with chocolatey. \n. It's a matter of perception, but I would want chocolatey to take over something I have existing if I issued the request for it to install it.  I mean, after all, don't you think I already know I have git installed when I ask it to install git?\n. DEBUG: Running 'Get-ConfigValue' with\nconfigValue:'useNuGetForSources'\nDEBUG: Running 'Get-UserConfigValue' with\nconfigValue:'useNuGetForSources'\nDEBUG: After checking the user config the value of\n'useNuGetForSources' is 'false'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'sources'\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'sources'\nDEBUG: System.Xml.XmlDocument\nDEBUG: chocolatey.sources\nDEBUG: Using '-Source \"\" ' as the source arguments\nDEBUG: Calling NuGet.exe install cygwin -Outputdirectory\n\"C:\\Chocolatey\\lib\" -Source \"\"\n. Okay, so this is my fault. Thought I was correcting something back so that it would work with powershell3...\n. Fixed in 784e45fb3b94e71a2d11b43c6c67c791e2396804\n. This is tagged for the next release... :)\n. Since we have http://chocolatey.org/installabsolutelatest.ps1, is this still important?\n. :D\n. Even better - except in cases where they don't set up the proxy stuff. But we can always do that after the fact. I don't want to give the illusion that we are not going to handle some of that in the back end.\n. I have to say I like @ewilde 's approach. It's closer to what I was initially thinking. I could go both ways though, it just depends on how much work we want to do with each new set of options.\nIt's kind of like the argument between primitive parameters versus object parameters. Except in this case both are objects, just one isn't the actual object used.\nSomeone could still not use our utility functions if they need more control over that and I think that is a fair trade.\nThoughts?\n. This was fixed for choco v0.9.10 - see https://github.com/chocolatey/choco/issues/332\n. With anything like this, we would have a need to support the existing infrastructure while we phase it out, so it would be something that package makers can move to over time.\nI know I'm preaching to the choir here but I just wanted to make sure that was understood before any work started.\n. Seems reasonable. If it is local it should just forward it to cver\n. -source local\nTHoughts?\n. The trick here is the searching filter...so maybe not the same code. Or is it?\n. Closing this as a duplicate of a newer issue.. .I know.. #276 \n. I'm not sure I like the name of it yet. It really doesn't tell me what it is doing.\n. How does it work with bindir? \n. So I install a tool package - that tool uses bin dir so it installs to something like c:/tools/packagename where it auto adds a that directory to the path. How do I trace that back to the package itself as it wouldn't be as easy to find?\n. I'm not against this, I just want to really understand it better.\n. Ok, right on. I now understand the benefit of this. On board with the idea.\nOn Friday, April 19, 2013, Rich Siegel wrote:\n\nok - its not perfect implementation (what is?). but here is the usage-\nI have a file on my system. I am not sure if it was from a chocolatey\npackage install, malware, a download, whatever. I install everything from\nzip or msi currently. So I see a file that looks suspect. I want to see if\nit came from inside a package. Since zips (currently) and msi's will be\nable to log all the files they encompass, we can use that get-content and\nseach the txt file to determine if a file is rogue (not sourced from a\nchocolatey package) or we deployed it. Its not a dead on thing, but it\ncould be a nice feature.\nIdeally I would want have lists from all the operating systems files and\nthen be able to identify every binary file on a host. It can become really\nhelpful with system32, ruby versions, etc.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/169#issuecomment-16656232\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Move the idea to choco, not necessarily the PR.\n. Service and web (iis first, apache later) should also become helpers.\n. Had those in mind for awhile.\n. There are a couple of these in here.\n. Thanks - still discussing this in the other issue. :D\n. I don't want them updated. When I roll these in, I branch to a new section, then I back that branch to the parent commit of this. Then I pull the changes. Then I rebase against all of the current. And if all goes well (usually does), I just merge back to master.\nIt keeps the commit history a nice straight line. Don't think of commit history so linearly ;)\n. For me, if someone is willing to keep their PR up to date, I'm okay with\nthat (if they do it without creating multiple lines of history).\nBut when it takes awhile for a project team to evaluate PRs, it should not\nbe on the person who took the time to create the patch in the first place.\nIt should be the responsibility of the project team. I've submitted PRs\nbefore where this happened a few times. I felt is was kind of against\netiquette of the project team to have an expectation for me to keep up with\nthem when they were taking their time to evaluating my request.\nI don't want to create this same feeling on chocolatey as it doesn't really\ncreate a feeling of community. If we wait awhile before evaluating\nrequests, that is on us and we should be feeling a little pain (if there is\nsome) rather than the person who is taking time to contribute to our\nproject.\nDoes that make sense?\nOn Friday, April 19, 2013, Rich Siegel wrote:\n\nyour the boss ;) how do you back that branch to the parent commit and then\npull the changes. I was just trying to assist as I know there are a ton of\nPRs and don't want to stifle progress for project newcomers who think they\nwon't get merged. However I can help, let me know.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/171#issuecomment-16656891\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. As far as backing, you can find the parent commit a few ways... I just pull\nthe changes into a branch and look over history to find it. Then back the\nbranch up to that and pull the changes again.\nOn Friday, April 19, 2013, Rich Siegel wrote:\n\nyour the boss ;) how do you back that branch to the parent commit and then\npull the changes. I was just trying to assist as I know there are a ton of\nPRs and don't want to stifle progress for project newcomers who think they\nwon't get merged. However I can help, let me know.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/171#issuecomment-16656891\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Need to start looking at this one for the release after this one.\n. Yeah, I was slowly going through and tagging things we want to move. This particular thing is planned as we rewrite the helpers into compiled powershell cmd-lets.\n. This was fixed in choco for 0.9.10 https://github.com/chocolatey/choco/issues/332\n. Before anyone goes down this path, we need to discuss some changes going into chocolatey.org.\nI always expect the project site to be the actual project, not a github repo for someone. It should never point back.\nSpecifically we are putting together a profile page for package owners where they can list contact information and a few sites including the repository where they keep their packages.\n- https://github.com/chocolatey/chocolatey.org/issues/10\n- https://github.com/chocolatey/chocolatey.org/issues/11\nThere are some other neat things that will be put in (like marking a pkg as outdated, or broken) - https://github.com/chocolatey/chocolatey.org/issues/12 \n. @rismoney Not sure what you are trying to say here...\n. I say we close with enhancing chocolatey.org for now.\n. You know discussions are great in the google group. ;)\n. Gaaah, NuGet schema validation decides it is an error and there is no way to tell it otherwise... at least not yet.\nThe element 'metadata' in namespace 'http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd' has invalid child element 'packageRepositoryUrl' in namespace 'http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd'. List of possible elements expected: 'frameworkAssemblies, copyright, iconUrl, developmentDependency, dependencies, references, language, requireLicenseAcceptance, licenseUrl' in namespace 'http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd'.\nI'm thinking I'm going to need  special build of nuget.core to avoid this behavior.\n. For references see\n- https://nuget.codeplex.com/discussions/240844\n- https://nuget.codeplex.com/discussions/238253\n- https://twitter.com/ferventcoder/status/523894747031949312\n. I started down this path on https://github.com/chocolatey/chocolatey.org/issues/101 - but got held up in that nuget throws the error above if you add anything it doesn't recognize to the schema.\n. Also #352 is sort of a dupe\n. I've moved this issue to https://github.com/chocolatey/choco/issues/205\n. Looks good. Merge it in. Remember to keep my line straight. ;)\n. Interesting. So you are saying if it is called we go ahead and write the filename.ignore on it? That would be cool.\n. Shouldn't be too hard. Slap a tiny ignore file next to it no matter where it is. No one is going to complain if it is up in the temp dir. :D\n. Done 6a4961692162496f00d36381542e7bc5c0aae824\n. To be clear, this is for apps that when pulled don't require further compilation. So in effect these are still \"binary\" packages...\n. Is this still relevant?\n. This may already be done for 0.9.8.20.\n. It's right here: https://github.com/chocolatey/chocolatey/blob/master/src/helpers/functions/Get-WebFile.ps1#L21 \n. I'm closing this as ready for the next release. Unless you have questions or comments?\n. We are also looking at bumping up the buffer. Try this bump that number to 1048576  \npowershell\n[byte[]]$buffer = new-object byte[] 1048576\n. This is in. I had to bump it down to 100 iterations with the larger buffer pipe. Please let me know if that is too low and still grabs too much memory\n. I think these would be helpful in chocolatey as well. We are always moving forward to pulling as much logic into utility functions and out of packages so that packages can stay small and readable. And the other side effect is that we can fix/update logic without having to edit a bunch of packages. \n. This prolly makes the intent clearer, but the code was never broken. Just FYI. We're gonna need to work on those merge commits...\n. The parameters are read in the helper functions, so it's completely transparent to the package unless pkg maintainer wanted to know about them and use them.\n. Bad or good - the arguments passed into chocolatey are global (powershell script thing). Like I said, this makes it more direct and less transparent to the methods where this comes from.\n. This is completed 41c87c064d3c73c933dba9a4a5ee72a435a3ab2d\n. Great question...going to need to look at history for that one. The functionality here is to return a string that is up to 8 chars long padded w/zeroes on the front. I think this pull request may have broken that functionality\n. Actually the thought here it to completely rip this out with something better at some point. This was a stop gap solution.\n.  This is very interesting territory.  However this may be better suited to be tackled after v1.\n. I'm a little scared of editing the registry uninstaller values. That could get us into some dangerous territory. However it does pose a very interesting scenario.\n. Maybe I'm biased, but a package owner (not author of tool/app) is not who I would want to have this either. If anything, this would be something that we might eventually bake into chocolatey and expose through a function to package owners.\n. Thanks, will likely be pulling this in over the weekend.\n. This is completed - bd03ec769c550d534dedef803781b0a066fca082\n. Will be looking this over and merging soon, likely this weekend.\n. I just realized what you are doing here. calling nuget list without a filter will only return so many results. 635 is what it looks like it returned. nuget.org, one of the two default sources for chocolatey, has over 9200 packages. Chocolatey has about 550 at the moment. If this only pulls back around 500 results from each source, you can see how this becomes inaccurate really quickly. \nI should be able to take the 1 second of sleep time out of this.\n. Agreed on refactoring - need to get in a PR that might fix this prior to a refactor though.\n. Is this still relevant?\n. Not disagreeing with any of these points. All polish and eventually where chocolatey will be.\nI was thinking choco would be a good entry point - easy and short. You might have mentioned it in your stuff here.\n. The problem with this issue/enhancement is that it is not one issue enhancement but several.\n. A great forum for this would be like the google group - then we can list them out and point to the topic\n. Agreed on the wiki - I would love to have a http://chocolatey.github.com \n. I accept pull requests on the chocolatey.github.com repo. I won't be able to get to this myself for a few weeks.\n. This is called choco.\n. I know there a LOT of issues to look through, but this should already be in the issues log as an enhancement. We don't fully support uninstall until 0.9.9. That's when it will have helper utility functions.  If you look around a bit, for MSIs we are goung to store the guid. Then when you uninstall we'll just /x guid /quiet. Nothing else necessary. \n. Dumb question on Air installations, shouldn't there be an AIR package?\n. @bswerdlen Howdy, note one of the labels here says \"MoveToChoco\" - that means this issue either has been or still needs migrated over to the current codebase at https://github.com/chocolatey/choco.\nAlso, I'm guessing this wasn't helpful for you - https://chocolatey.org/docs/helpers-uninstall-chocolatey-package\nWhen you run choco new pkgid from a recent version of Chocolatey, it will create a chocolateyUninstall.ps1 that is already pre-filled out with everything you need, saving you countless amount of time (and possible issues). Plus all of the just in time documentation that you get from that will definitely help answer questions like this ahead of time.\nWhile MSU is definitely showing up in Install-ChocolateyInstallPackage - https://github.com/chocolatey/choco/blob/946367a6c263cc2d1b3beec5e6b771404d5f0436/src/chocolatey.resources/helpers/functions/Install-ChocolateyInstallPackage.ps1#L257-L265, it doesn't appear the same exists in the Uninstall-ChocolateyPackage  - The documentation that is produced (linked above) states the same. You can see the source code that generates that documentation at https://github.com/chocolatey/choco/blob/946367a6c263cc2d1b3beec5e6b771404d5f0436/src/chocolatey.resources/helpers/functions/Uninstall-ChocolateyPackage.ps1#L52-L56\nHTH . Try just  \\server\\share\\etc\n. Ftp is already in for next release.\nTo change the vocabulary a little, it's not a workaround, it's how it works\nnow. We don't have support for urls written in that manner. If we want\nfile:// that would be an enhancement. same with git://\nThanks.\nOn Oct 26, 2012 12:49 PM, \"Alastair Smith\" notifications@github.com wrote:\n\nThat workaround works, thanks. I think the script should support proper\nfile:// URLs, though. What about ftp:// or git:// URLs?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/188#issuecomment-9821266.\n. Thanks, please open this issue on chocolateyautomaticpackages though. It's not chocolatey's fault. ;)\n. I think we are on different pages, although I like what you are talking about here.\n. http://chocolatey.org/packages/binroot\n. There are other items that may have duplicated this. This is done.\n. @Redsandro Hey thanks for the kudos!\nI'm going to clarify the wording for chocolatey - Chocolatey is _like_ apt-get. This doesn't mean that is has every feature or that it is an exact replica of apt-get.   \n\nThis also doesn't mean that features like this cannot be added. We've discussed this a couple of times in the mailing list, however upon searching it doesn't appear that it was ever made into an Enhancement. We are definitely adding this feature.  \nIssue 2 - Stopping on Error\nThe second note, that chocolatey stops on error is not a behavior we want in v1. Please file it as a separate issue.\n. Also, it's important to note that apt-get is very stable in it's feature set. It's been around for awhile and is a mature product.\nChocolatey on the other hand is not even to v1 yet. It's immature and not stable in it's feature set yet. Something to keep in mind. :D\n. Actually I would have to verify, but I believe npackd is older. Chocolately has been around for about a year and a half.\nI don't mind nitpicky at all! It's a way we get better. I honestly don't use packages.config that much. I prefer  \ncinst all -source customsource or to put together a .ps1 file w/separate calls. Both of these mean I install multiple packages w/1 call, but there is setup time involved.  If you are in powershell you can create an array of package names and pipe them into the install command. Again, not optimal, but available.\nThat's why we definitely want the ability to pass in a list and to keep going if one fails.\n. This lifehacker article about npackd is older by a month than chocolatey: http://m.lifehacker.com/5754305/npackd-is-a-linux+like-package-manager-for-windows\nAnd to avoid confusion, the date of the article is a month before chocolatey development started.\n. Agreed that the xml batch stopping on error is annoying.\n. This is fixed in https://github.com/chocolatey/chocolatey/commit/6ca7ed1fe2d9f45fcfb3f84bbb2aa9811a544ff2\n. also in alpha2 prerelease... \n. or cup chocolatey -pre\n. This sounds reasonable at first glance, however, does it feel natural to say --beta when it installs an alpha or rc?\nAnd .... if there was a beta version and a more recent alpha, wouldn't you want it to install the beta and not the alpha based on the wording of the switch? \n. My brain is ...... well somewhat fried. :)\n. Thanks for moving this over from #191\n. It's all good. Wasn't sure if you were misspelling or not.\n. not sure what you mean... new batch functionality... \n. Also an issue we hope to resolve soon.\nOn Monday, November 4, 2013, Redsandro wrote:\n\nI concur, but I lack the knowledge and the knowhow to propose a fix. :)\nI'm\nbetter at making .bat wrappers. :P\nOn Nov 5, 2013 12:17 AM, \"TomOne\" >\nwrote:\n\nThis is actually a very important issue to solve. Stopping the entire\nprocess only because one package failed is very annoying and reduces UX.\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/chocolatey/chocolatey/issues/192#issuecomment-27732812>\n.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/192#issuecomment-27736522\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Is this fixed in vCurrent?\n. @rismoney oldie but a goodie. Now we have a ticket for ensuring full stop if there is a failure in the chain - https://github.com/chocolatey/choco/issues/1151. Right now it is up to the package maintainer. The functionality is there, but it's in the packages. It might make sense to have choco note some of these so pkg maintainers do not need to.\n. well, 3010. :)\nFor now anyway, that is the expectation. It does make sense that chocolatey should do a better job of noting the common ones though.\n. Chocolatey's exit code is different than what it is seeing from the application install, so a 0 is what you would already get from chocolatey (0.9.8.21 we are ensuring that) when it exits with no errors.\n. I'm curious what you would use for the reboot needed flag. :)\n. Interesting. I think @mwrock is handling this idea as well with boxstarter. I'm curious how he knows it's time to reboot.\n. The BIG Hammer. Like it! \n. Assigning this to you Matt @mwrock ;)\n. @gep13 Didn't we get this in as part of another PR?\n. @rismoney is this still an issue?\n. This is left up to the package itself to install the proper one for your architecture. If the package creator doesn't include a link for a 64 bit version, it is assumed that the 32 bit is the one to install.\nWhat we are working on is a flag to allow someone to force a 32 bit version if they need it.\n. That's one way of doing it but long term it would not be the optimal\nsolution. We have a feature coming that will let you pass --x86 and it\nwould use that version no matter what you are on\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\nOn Wed, Oct 2, 2013 at 1:36 PM, BSara notifications@github.com wrote:\n\nSo if we need to force install a 32 bit version on a 64 bit machine...we\nneed to request for a 32 bit package?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/197#issuecomment-25564700\n.\n. While I appreciate the ability for github markdown to help make the code very readable for this question, questions should really go to chocolatey@googlegroups.com. That way others can benefit from them. Please try to post future questions there, we'd like to try (emphasis on try) to reserve this area for bugs and features.\n\nTo ask a question in return, did you create the package (cpack) prior to running cinst? My apologies if this is not in tue tutorial. You should have a nupkg file in the folder you are running your cinst command from.\n. When you say latest, what version of chocolatey are you using? alpha or release?\nAdding documentation is always helpful and appreciated! \n. That would be the current release. When you open the package with nuget\npackage explorer (the .nupkg file), does it open correctly?\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\nOn Mon, Nov 19, 2012 at 10:42 AM, Redsandro notifications@github.comwrote:\n\nI cannot check that right now as I am on the wrong computer, but I used\nthe command that is on the website yesterday: @powershellhttps://github.com/powershellsomething.DownloadString('\nhttp://bit.ly/psChocInstall')) one. I am assuming it points to the\nrelease version.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/198#issuecomment-10520668.\n. I see what might be wrong. Your nupkg/nuspec might be named incorrectly. the nuspec itself should be named tomboy.nuspec.\nThe name of the package file (3.504 tomboy.1.10.2.nupkg) should not have a number or a space on the front of it.\n. Okay, dumb question. What shell are you using?\n. Your github repo?\n. tried it out on a VM. Getting the appropriate issue about not being able to find gtksharp.\n\nSo it's working on my machine...\n. Still would like to know what is going on on your end though.\n. Installs good for me.\n. What happens when you run cinst tomboy -source %cd% -debug ??\n. Double Double Quotes. FTW. The switch from batch to powershell leaves something to be desired in keeping quotes. \nso this will work: cinst tomboy -source \"\"%cd%\"\"\nMy bad, Didn't ask what your path was.\n. Normally with command line applications on Windows you would only need the single quote. It would be interesting to know what you get if you use a single quote (') instead.\n. Nice! Yeah, there is something in the conversion from batch to powershell that destroys all double quotes by themselves. It could be something I'm doing. It is annoying...I should really look into it.\n. Closing as not a bug... you will follow up with the wiki article updates?\n. Ah, I mean source code repository for your packages. Look at my profile on chocolatey.org and you will see  https://github.com/ferventcoder/nugetpackages and https://github.com/ferventcoder/chocolateyautomaticpackages\n. Looks good. Only note is the second source to the package should not contain a file, just a directory\n. No, we didn't delete it. I thought you updated the CreatePackages page only, I never remember seeing a link to another page\n. Agreed. That's an enhancement on the list. And that you could also -force -includedependencies to force the whole chain\n. Not sure if we had it listed or not.\n. thanks\n. @MikeH2012 unfortunately that library requires POSH v3+ so it's no dice\n. I will take the ball on that.\n. Sent the message, just waiting to hear back.\n. Doesn't look like this is going to be a feature that will be freely available. :(\n. This will move to a professional version of chocolatey.\n. This is going to be implemented in the pro version since it is not a free thing.\n. Thanks\n. https://github.com/chocolatey/choco/issues/145\n. cver chocolatey-alpha3 -lo would be incorrect. alpha and 3 are prerelease version information, not part of the packagename. \nThere may be some wonkiness related to getting packages that are prereleases, but we have a good way to get to packages that are named pkg1.2.3 (where 2.3 is the version) versus pkg.1.2.3 (where 1.2.3 is the version). I'm confused a little because we are already doing this correctly. Console2 comes to mind.\n. Back to your original issue, I'm a little confused about what you mean about cinst without a version parameter. That should work now.\n. Thinking of other features on the plate, how then will we get to cinst pkg1\npkg2 pkg3 pkgN ??\nOn Tuesday, December 4, 2012, Matt Wrock wrote:\n\nAgreed. and source too.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/206#issuecomment-10999358.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. https://github.com/chocolatey/chocolatey/commit/6ca7ed1fe2d9f45fcfb3f84bbb2aa9811a544ff2\nCommand and PackageName are the only positionals. Everything else will need to be supplied as a named parameter. It's the only way to support multiple package installs.\n. That's funny right there. :)\nOn Tuesday, December 4, 2012, Matt Wrock wrote:\n\nSorry. I think I misunderstood. I was thinking build failures. I am overly\nobsessed with tests and builds today.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/207#issuecomment-11025365.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. almost good. Don't delete my remove last install log function yet though\n. No new code into release. It's locked now. This will have to bump to .21\n. :D \n. And this is in..\n. It usually gets worse on resolving conflicts if the history line is messed\nup in any way. It's already a fun enough experience when a rebase has\nconflicts...\nOn Friday, April 19, 2013, Rich Siegel wrote:\n\nwow this a royal pita to resolve conflicts! Will retest tomorrow, and we\ngotta get this in.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/210#issuecomment-16636826\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Depends on your diff/merge tool as well.\nOn Friday, April 19, 2013, Rich Siegel wrote:\n\nthe history line was fine. it just gets confusing as to what to keep and\nwhat to shed, especially if you havent look at a branch in months, and the\nconflicts occur on the same lines or moved around.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/210#issuecomment-16637003\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Beyond compare 3 pro. Highly recommended and well worth $50. I use it\nconstantly every day.\nOn Friday, April 19, 2013, Rich Siegel wrote:\n\nwhat are you using?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/210#issuecomment-16654308\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Other than that, I'm digging this PR.\n. Yes, one thing we'll stop doing is accepting pull requests without automated tests. Probably soon.\n. Agreed with all Matt said here. :)\n. This is in - a8ea10d4c422faffbb4c8010c36a199d055dc459\n. Packages.config\n. You don't believe this is the vagrant package itself?\n. Thanks for reporting. I'm guessing this just hasn't been done yet.\n. chocolatey install XXX -source 'local source'\nSingle tick marks or double double quotes surrounding. Do those help?\nAnd run it with -debug and post that here please.\n. -debug and post results pls\n. Same version of vagrant (0.8.0) that exists now?\nThis brings up some thoughts/questions.\n1. Your fixed nuspec should have an updated version.\n2. The nupkg you produce locally should reflect that version (i.e. vagrant.0.8.1.nupkg).\n3. Otherwise the vagrant you have in your local nuget cache (from a prior install) will override the source do to the versions being the same.\n. Please Look in the directory and tell me what the name of the file is with the extension \"nupkg\". \n. What Rich said. The source should be a directory. :D\n. GUI apps have a helper. appname.exe.gui (empty file that matches in case sitting directly next to where the file is or will be).\n. SymLink/Shortcut/exe in choco/bin folder - we've talked about this in the past. The biggest problem here is that it is not a universal thing due to windows, otherwise we would symlink everything in.\nWhat may be better is to determine a convention where we can symlink the executable into bin.\n. Spaces in Exe Names - Are there really executables with spaces in them or are you providing an example? I've never seen one, that's why I'm asking.\n. I'd prefer if we break these up and list on the front of each of these as [Enhancement] since they are enhancement requests.\n. Yes, the tl;dr page for creating packages. ;)\nOn Monday, December 17, 2012, Redsandro wrote:\n\nPS is there a page on the wiki that explains what this .exe.gui is and\ndoes?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/215#issuecomment-11469277.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. We might have a command already for the start menu item.\n. Much thanks\nOn Tuesday, December 18, 2012, Redsandro wrote:\n\nRedirected issues:\n216 https://github.com/chocolatey/chocolatey/issues/216 ->\n[Enhancement] Copy/move .exe tools to \\bin\\ folder in stead of creating a\n.bat file.\n217 https://github.com/chocolatey/chocolatey/issues/217 ->\n[Enhancement] Use custom \\bin\\ folder\n218 https://github.com/chocolatey/chocolatey/issues/218 ->\n[Enhancement] Create link to GUI tool in Start Menu\n219 https://github.com/chocolatey/chocolatey/issues/219 ->\n[Enhancement] Ignore spaces when creating a 'fake' link (.bat file)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/215#issuecomment-11490041.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Perhaps you missed my comment somewhere that symlinking is not comprehensive enough to handle all the scenarios the .bat handles.\n. Found it - https://groups.google.com/forum/m/?fromgroups#!topic/chocolatey/hP5h0-g-rAM\n. I think this should be an opt in kind of thing - we'd have to know what needs to be copied in besides the actual exe (like dlls/configs/inis) etc. This is where things start to get messy. One exe has a dll it depends on, another has the same dll, but a different version that it depends on. \n. What's the difference between .bat and .cmd anyways? http://stackoverflow.com/questions/148968/windows-batch-files-bat-vs-cmd\n. Opt-in by the package maintainer is what I meant. A way of indicating this file should be linked or copied somehow. \nOne thing to note, if ffmpeg comes to my machine without requiring admin privileges, it shouldn't require an admin privilege for me to get to use the tool (aka mklink is out of the question then). \n. I know I'm throwing things at you that seem to come out of nowhere, but they are all reasons we went for bat files in the first place.\n. Interesting thing here - if your package requires a particular version of chocolatey, you can specify the version requirements in the nuspec\n. That way if you have a minimum required version for chocolatey, you just specify that in the nuspec. When they go to install your package, it will update chocolatey automatically.\n. Yeah, symlinks are pretty limited in windows. It's kind of sad really.\n. xml\n<package>\n  <metadata>\n    <dependencies>\n      <dependency id=\"Chocolatey\" version=\"0.9.8.20\" />\n    </dependencies>\n  </metadata>\n</package>\nThe version is based on the lowest compatible version - http://docs.nuget.org/docs/reference/versioning \n. RE: Unified approach -  \n\"Shouldn't everything be opt-in?\" - I disagree on this because it breaks the convention there now. The convention exists so that folks can do a minimal amount of work and rock out a chocolatey package. If they have a project they want to share with the world, they can just drop the exe in a package and boom. It works. :D\n.exe.startMenu - I like this idea\n.exe.moveToBin - or perhaps exe.copy\n.exe.linkBat - this is the default convention, so it's unnecessary to have\n.exe.linkGui - this is already here as exe.gui\n. The script is here: https://github.com/chocolatey/chocolatey/blob/master/src/functions/Get-ChocolateyBins.ps1#L19\n. This is not something we are looking at doing currently. Does the ShimGen answer this need?\n. It also mentions where the ruby package installs if it has not been set.\n. As far as a default value, I agree - https://github.com/chocolatey/chocolatey/issues/190\n. And the addition of Install-ChocolateyTool (with some parameters) that does all of this magical work for you. :D\nJust added for tracking - https://github.com/chocolatey/chocolatey/issues/221\n. We do try to keep the documentation updated with the things that exist or are in the code base but have not yet been released.\n. @Redsandro Rich is talking about the '1.0.2' in rismoney-v1.0.2_setup.exe\n. Well usually once shared, u don't want to make any changes like that.\n. Right. Long day... ;)\nOn Thursday, December 20, 2012, Rich Siegel wrote:\n\nAs long as he pushes to his origin its fine. Its only a nono on chocolatey\nchocolatey master\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/223#issuecomment-11600489.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. It's all good. With all pull requests, you want them to come from branches. Makes it easier to submit multiple pull requests and to continue to work on other changes without affecting your PRs (pull requests)\n. I think you'll find that when you are using a fork of an active repo, you want your master to be pristine (aka look like the master in the active repo). \nYou do all of your work in branches. Those become pull requests.\nWhen we evaluate a PR, we look at testing and how big the impact of the change is. The bigger the impact, the longer it takes to pull in. \nWhen we've decided to pull one in, we like the history line to be as straight up and down as possible. That means we rewind a branch we create for your PR to the last commit from master that your branch used and then pull it in. Then we rebase that commit against all of the stuff that has happened since then (what that means is that your commit goes to the very front of the commits, even if it was two months ago). After that is done we merge it to master and push it up. You are the author, one of us is the committer (because we are moving the commit).\n. We actively work with PR authors the best we can (since this is OSS and we all have full time work) to get PRs in a state of good to go, unless the PR is a completely different direction from where I believe chocolatey should go. \nWe don't reject PRs just because we are getting ready for a release. We just let them sit a little longer until the release is done before evaluating them and pulling them in or not. \n. Interesting. Why not make get-webfile work with these additions?\n. Interesting...we have made choco silent by default. This seems to go\nagainst that idea. Should this not be a pkg then?\nOn Friday, April 19, 2013, Drew Burlingame wrote:\n\nI agree. It would be better to alert the user and let them decide whether\nto continue or not.\nOn Fri, Apr 19, 2013 at 7:17 AM, Rich Siegel >wrote:\n\nI do like the ignore cert switch in theory, but not in practice. A\npackage\nauthor should not be sending consumers of the package to https sites\nthat\ndon't have valid certificates. I believe that is a call the _end\nuser_should make, and question the authenticity of the underlying url.\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/chocolatey/chocolatey/pull/224#issuecomment-16655336>\n.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/224#issuecomment-16664701\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Its actually pretty simple, I have this in the environment setup bits, it\nwould only need to be adapted slightly so we could have it make calls to\nthe user.\nOn Saturday, April 20, 2013, Drew Burlingame wrote:\n\ngood point. a flag would help, but not if the pkg was a dependency of\nanother. i'd hate to see a user not be able to use a package when they\ncould specify if they were ok with http vs https. it could be that if\nchoco was going to fail, prompt instead, but only wait for 10 seconds for\na\nresponse? that could serve the purpose, but seems complicated.\nOn Fri, Apr 19, 2013 at 8:38 PM, Rob Reynolds >wrote:\n\nInteresting...we have made choco silent by default. This seems to go\nagainst that idea. Should this not be a pkg then?\nOn Friday, April 19, 2013, Drew Burlingame wrote:\n\nI agree. It would be better to alert the user and let them decide\nwhether\nto continue or not.\nOn Fri, Apr 19, 2013 at 7:17 AM, Rich Siegel <javascript:_e({},\n\n'cvml', 'notifications@github.com ');>>wrote:\n\n\nI do like the ignore cert switch in theory, but not in practice. A\npackage\nauthor should not be sending consumers of the package to https sites\nthat\ndon't have valid certificates. I believe that is a call the _end\nuser_should make, and question the authenticity of the underlying url.\n\u2014\nReply to this email directly or view it on GitHub<\n\nhttps://github.com/chocolatey/chocolatey/pull/224#issuecomment-16655336>\n\n.\n\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/chocolatey/chocolatey/pull/224#issuecomment-16664701>\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/chocolatey/chocolatey/pull/224#issuecomment-16698126>\n.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/224#issuecomment-16699150\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Fixed in 0f2318f4f7dd961c05c16c113c056aee3ba8b6dd\n. Been a little busy, but that should be clearing up soon. :)\n. And it's not in there yet?\n. I thought we decided to prefer Install-ChocolateyShortcut over this - https://github.com/chocolatey/choco/blob/master/src/chocolatey.resources/helpers/functions/Install-ChocolateyShortcut.ps1 ?\n. +1 like :D\n. Each function in chocolatey is a file, no matter how small.\n. @Redsandro this is hilarious.  :)\n. The PR is closed, so this is closed. :)\n. This should be fixed with #278 \n. https://github.com/chocolatey/chocolatey/blob/stable/src/helpers/chocolateyInstaller.psm1 does not contain https://github.com/chocolatey/chocolatey/blob/master/src/helpers/functions/UnInstall-ChocolateyZipPackage.ps1\nReported at https://groups.google.com/d/msgid/chocolatey/cabe51da-9ff9-47ef-b091-c6152c642407%40googlegroups.com?utm_medium=email&utm_source=footer\n. This is in...thanks so much!\n. They were merged, but they were rebased to keep the history line nice and\nstraight. I become the committer, you are still the author. Yes, please\ndelete the branch.\nOn Friday, April 26, 2013, Redsandro wrote:\n\nClosed with unmerged commits. Can I delete the branch?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/231#issuecomment-17071294\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. :)\nOn Friday, April 26, 2013, Redsandro wrote:\n\nOkay, the Redsandro:getSystemBits branch has been deleted.\nGithub proposed this, but I'm still a bit foggy on Git and what impacts\nwhat so I needed to ask to be sure. :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/231#issuecomment-17073559\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Quote it either by ' ('notepad++') or by double double quotes\n(\"\"notepad++\"\"). What do you get then?\nBtw if you are looking for notepad++ on chocolatey.org, it is named\nnotepadplusplus.\nOn Monday, January 14, 2013, cemrich wrote:\n\nWhen passing a package name countaining a \"+\" sign as parameter to cinst\nan InvalidRegularExpression is thrown serveral times.\nExpected behaviour is an output like \"Unable to find package 'xyz+'.\"\nThe output is folowing:\nD:>cinstm notepad++\nBad argument to operator '-match': parsing \"^notepad++.\\d+\" - Nested quantifie\nr +..\nAt C:\\Chocolatey\\chocolateyinstall\\functions\\Get-PackageFoldersForPackage.ps1:5\n char:56\n-   return Get-ChildItem $nugetLibPath | ?{$_.name -match\n\u2014\n  Reply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/232.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. We had an earlier discussion on this. Please search the forum and start\nfrom there. Thanks.\n-Rob\nSent from my phone so please forgive spelling mistakes.\nOn Saturday, January 19, 2013, Claudius Coenen wrote:\n\nIn some cases, software is distributed as language-specific download.\nChocolatey should have some way of dealing with this elegantly.\nNotable packages that are in need of localised downloads are:\n- firefox (see their download pagehttp://www.mozilla.org/en-US/firefox/all/\n  )\n- libreoffice (see their download pagehttp://www.libreoffice.org/download/?type=win-x86\n  )\nin firefox, for example, you're pretty much stuck with the english user\ninterface, as far as i can tell. It would be great if one could specify a\n\"preferred\" locale. The package maintainer could also enter a default\nlocale. Ultimately Chocolatey would could to english, if nothing is\nspecified.\nIf i'm missing something, please let me know!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/233.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. This is something that wouldn't be looked at for a few versions.\n. Yes it does. That's why we have a user config. Your edits should be there.\n. Agreed. A generic shortcut to be placed anywhere would be nice\n. This is a duplicate of #5 \n. whoops. Apologies. Pinning to task bar is likely also a duplicate of something else entirely.\n. Not a dupe, would definitely want to add to that: from maintainer perspective they have https://github.com/chocolatey/chocolatey/blob/73baac967edb20005bde0761483c49df6911f90d/src/helpers/functions/Install-ChocolateyPinnedTaskBarItem.ps1\nThis is from user perspective.\n. Are you the package maintainer?\n. Does not appear to be so. Start by contacting the package maintainer through the link on the left side of the package page here: http://chocolatey.org/packages/SQLSentryPlanExplorer\n. Thanks. Closing this issue on choco.\n. Thanks!\n. Once you push to a remote that is part of a pull request, it updates the PR\nautomagically. That's why we always want PRs in branches, so you don't\naccidentally include something you don't want in the PR.\nOn Saturday, April 20, 2013, Gary Ewan Park wrote:\n\nOk, I think I have done everything that you suggested, but I am now also a\nlittle confused. How did it get into this pull request already? I expected\nthe last command that I ran, i.e:\ngit push -f origin\nTo put the rewritten commits into my forked repo, and from there I would\nhave to update the pull request, but this seems to have happened\nautomagically. What gives? Or what am I missing?\nThanks for all the help by the way, it really helped! Would have never\nfigured that out on my own! :-)\nGary\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/238#issuecomment-16705844\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. There is a link on the package page that Gary pointed out. That link is to contact the package owners. \nThat is the recommended way of getting a package fixed.  \nChocolatey has a clean separation between itself and the packages it installs. Package problems need to go back to the package themselves. Thanks.\n. Ah, thanks!\n. Okay, rismoney, watch and learn. :)\n. This is in... https://github.com/chocolatey/chocolatey/commit/2134f2c3a16566b3090015b4bf2141fb46f4f2e2\nBy the way @jamesmanning, please work off of master branch, not off of develop. :)\n. Thanks so much for creating the issue. We'll follow up with a fix.\n. The PR has been committed #244 - so closing this for now.\n. Agreed.\n. Yeah, I think we can pull this in. This doesn't seem to be 100% deterministic for upgrades though. Or am I missing something?\n. Yes and it may be time to start talking about configuration & plugins. Then allow peeps to remove and add functionality to chocolatey.\n. This is in. Thanks so much...\n. Run with -debug\n. Also, force doesn't delete the current installed package from chocolatey/lib so you will want to do that. It's a pain we are working on in the next version that force removes.\n. $path = Join-Path \"$(Split-Path -parent $MyInvocation.MyCommand.Definition)\" 'CloverSetup.exe'\necho $path\nInstall-ChocolateyInstallPackage 'clover' 'exe' '/SILENT' $path\nInstall-ChocolateyPinnedTaskBarItem \"${env:ProgramFiles(x86)}\\Clover\\clover.exe\"\nThis is what u want, that way the path is based on the path of the executing script.\n. Can you copy the text and paste it in instead of a picture? The last pic cut off some of the important stuff.\n. Ha! Thanks! \n. This is in. Thanks! \n. I believe at some point when nuget was throwing non-zero exit codes for any exit, so it was unreliable to be used in that manner. I think they may have fixed this in more recent versions.\n. Yep, not an issue with chocolatey. Going to close this and let you pass that onto the package\n. Jeff, nice that you noticed this. Is there somewhere better that this issue can be placed (since it may not be a choco issue)?\n. Cool. Closing for now pending discovery of a chocolatey issue.\n. I think this can happen. :)\n. This is implemented rather when choco calls out to the package provider it puts this in the environment variables for that process.\n. %CHOCOLATEY_VERSION%\n. Does it work when you are not behind the proxy?\n. Try cinst jivkik.dev1 -debug\n. You may have an incompatible proxy for nuget.exe. You may want to do some searching around to see what is required to work with socks proxies.\n. Cool. It might be a good idea if we add a proxy wiki page.\n. If you want to take a stab at creating a page on the wiki with proxy related information, I can review it. If not, I'll create one later.\n. Cool - thanks!\n. For anyone else that comes across this link - https://github.com/chocolatey/choco/wiki/Proxy-Settings-for-Chocolatey#still-having-trust-issues\n. Force doesn't address this, YET. ;)\n. Agreed though, this is a little different than clean\n. +1000. Yeah, this current area is a pain point for all of us. \n. cuninst would need an explicit item to be called on.\nThe failed installs will move to a directory so someone can go inspect why they failed later.\n. Be sure to look at #595 for perspective.\n. --force --force-dependencies (or -fx)\n. This is now linked up with https://github.com/chocolatey/choco/issues/1124 so please follow from there.. There are multiple methods of installation - https://github.com/chocolatey/chocolatey/wiki/Installation . You are not likely going to be able to use the simplest method.  It seems to me though that if you cannot open a command prompt (not powershell) and run the one on the front page of chocolatey.org (with runs a powershell command with an explicit unrestricted setting), then chocolatey is probably not going to work out for you since that is exactly how it runs when it does. \nI don't know how difficult it is to sign a script or what kind of maintenance issues we would see by this (since every time we change a script it would require a re-signing I believe). This makes it seem like the case - http://www.mikepfeiffer.net/2010/02/obtaining-a-code-signing-certificate-and-signing-powershell-scripts/ (and some other sites I've read over). \nUnfortunately it's not likely at this time that we will want to approach the cost (of both maintenance and the real cost of a VeriSign cert) of signing and re-signing our scripts. You are welcome to do a self-signed certificate and if you come up with a good way to automate that we would welcome a patch that would create a self-signed certificate, install it on a user's machine and then sign all of the chocolatey files (and probably every package at runtime just after they download since they will also have powershell in them).\n. Yep, that's going to make chocolatey very hard to use in your environment. So your option is to sign all of them with a self signed cert. When a new version comes out you will need to do that as well. The really tricky part is that you need to add a module to chocolatey to sign scripts just before chocolatey runs them as it downloads packages.  \nYour other option is not to use chocolatey. Unfortunately.\n. Thanks Matt, I'll get this over to .org as well.\n. Currently improving this a bit.\n. Most likely rismoney's stuff get's into choco proper. \n. And yes, things get very busy for me with my full time job. It ebbs and flows a bit, but the nature of the beast can consume most of my free time. \n. It's never returned exit codes... as we found in a different discussion (#384). I believe it was related to nuget always returning the incorrect exit code from way back 2 years ago.\n. Let's file a new issue about this over at chocolatey/choco.\nOn Friday, October 16, 2015, Josh Buedel notifications@github.com wrote:\n\nThis still happens in at least one situation. See below where I have\npassed an invalid $version$ token.\n[image: badversion]\nhttps://cloud.githubusercontent.com/assets/85681/10548068/fbe22a4e-73fd-11e5-8bc9-c2f1053fa16b.png\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/256#issuecomment-148773726\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Thanks!\nOn Friday, October 16, 2015, Josh Buedel notifications@github.com wrote:\n\nNew issue created. chocolatey/choco#469\nhttps://github.com/chocolatey/choco/issues/469\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/256#issuecomment-148840199\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Except work on mono\n. I have a longstanding request to put in mono support. I agree though - I use apt and brew when on those OSes as well. I'm not sure that I would use it, but it is an interesting use case. Plus it could potentially open the door to using choco as the mono pkg mgr. Potentially b/c I'm pretty sure most folks would rather just see a mono debian repo they could add to apt. It has a much richer set of features and hooks right into the app updater in ubuntu (for the folks that like gui tools). \n. The mono idea is a low priority due to that, but scriptcs support is more interesting for a few reasons. I don't necessarily see a need for scriptcs at the moment, but that doesn't mean we shouldn't explore it. This isn't about replacing powershell, just adding options.\n. And just b/c I do not understand something does not negate that there might be some really good use cases.\n. @rismoney I agree on all points here. Folks on the IRC channel would rather wait for a perfect solution than a good enough for now solution. :) \nI agree that rebuilding nuget is a daunting task. I don't expect it to be done in powershell. Another reason why the core of choco will be rewritten in c#.\n. This is in. Thanks! \n. what you mean is choco clean.\n. We do not remove the previous version at all when a new version comes in by design. You can install two versions of ruby.\n. You need to be explicit on installing ruby versions. \nBut what I think we are missing here is a bigger design. \nChoco clean removes all older versions of packages except for those you have pinned.\nSo if you have 3 versions of ruby and you pin the latest and the first one behind it, when you clean, the one that is not pinned goes away (from the chocolatey lib, but not uninstalled yet). \nThe uninstall itself should be smarter about asking someone what they want to remove when there are multiple versions. Like the way ruby gems does it when you have multiple installs of a gem.\n```\nchoco uninstall ruby\nDo you want to remove:\n\nRuby v1.8.6\nRuby v1.8.7\nRuby v1.9.2\nAll of the above\n```\n\nSo you wouldn't have a need for bump. What you could do is add clean to the end of the install command cinst ruby -clean so it cleans up the old.\n. And yes, right now when there are multiple active versions, PPAs break down a bit on keeping these separate if you try to treat them as the package. What we are looking to do here is create some meta packages that are dependent on a range of versions of a package so you can install them. What it doesn't handle very well right now is the upgrade scenario and why I haven't moved forward with it. It works right now just like it is, it's just not as easy for someone to see how they would get 1.8.7 and 1.9.2 of ruby and keep them updated independently. They have to use choco update ruby -version 1.8.7.### to go up and stay on 1.8.7. \nThese are special edge cases that don't always fit nicely into the versioning concept since they are maintained over time instead of deprecated for the newer versions. Nothing wrong with it, it just complicates things a bit, that's all.\n. This is also where the evolution of the chocolateyInstall.ps1 will come in handy (where we break some areas into known functions chocolatey can call).\n. I think that's where the clean command comes in. Choco has no way of\nknowing what us side by side and what is not. However a user pins packages\nthey want to keep and then later runs clean, it only cleans older pkgs that\nare not pinned. Punning also excludes a pkg fron upgrade during cup all.\nOn Wednesday, March 27, 2013, Rich Siegel wrote:\n\nMaybe cup should delete all versions. I think that's what yum update might\ndo.\nOtherwise cinst...\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/259#issuecomment-15554218\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Pinning is always from a user, never from a package author.\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\nOn Sun, Mar 31, 2013 at 8:31 PM, Rich Siegel notifications@github.comwrote:\n\ni understand what you are saying about pinning, which I am down with. Do\nyou think this should be a 'feature' of the config file? say a pinned\npackages element. Do we leave this up to the user to populateor leave it to\npackage authors to tamper with chocolatey.config? (ugh-security)...\nI have a production request to nail down the default behavior for cup. Its\ngetting to the point, where package authors are building crazy logic into\nchocolateyinstall.ps1... chocolateylib is gettting messy.\nIf there are areas where we are giving the users a choice, like in your\nuninstall example, we also need command line switches to force behaviors\nfor non-interaction.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/259#issuecomment-15701320\n.\n. The pin keeps a package from being upgraded. Like you want to pin a particular version.\n. Method 2 only\n. No, this is something chocolatey is going to do by v1.\n\nOn Thu, Jun 26, 2014 at 9:01 PM, FichteFoll notifications@github.com\nwrote:\n\nAfter running cup a few times some time ago I currently have these\nfolders in my C:\\Chocolatey\\lib folder:\nAtom.0.101.0\nAtom.0.96.1.0\nflashplayeractivex.13.0.0.182\nflashplayeractivex.13.0.0.206\nflashplayeractivex.14.0.0.125\nflashplayerplugin.13.0.0.182\nflashplayerplugin.13.0.0.206\nflashplayerplugin.14.0.0.125\nWhat I expected: flashplayer derivatives should've been removed, Atom\nshould've copied old user data and then also be removed.\nShould package authors take care of that? Most package don't even have an\nuninstall script...\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/259#issuecomment-47300870\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. @TomOne what's your suggestion for jre where you need both 32bit and 64bit at the same time?\nSeparate packages right?\n. This is a non-starter as the c# version does not display the behavior of multiple versions installed. Or in other words, this is already fixed for choco.exe. ;)\n. If you watch the video here, I circle the ability to add the old behavior - https://www.youtube.com/watch?v=sm_U53sxt2c\n. I think we need to look at list or search -localonly - It's much much faster.\nclist nodejs -lo -all\nhttps://github.com/chocolatey/chocolatey/commit/5052e19bda652f71626105c0cebb8459e92a3e31\n. So this is going to be choco list pkgname -lo and choco list pkgname -lo -all\n. I mean super fast :)\n. It will be a documentation change. Cver is very specific and clist is not.\nWe may need a flag to make it a very specific filter.\nOn Friday, April 26, 2013, Gary Ewan Park wrote:\n\nShould we add a task, somewhere, to get the documentation updated to\nreflect this change, or where do things like that get logged so they are\nnot forgotten?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/260#issuecomment-17056837\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. It is developed, but you have to have the latest source installed. Otherwise the -lo is going to be ignored. I just added it last night. :)\n. It points to the local chocolatey lib folder as a source and good old nuget to do the searching.\n. We can upgrade the list to return object - I'm not sure if it does now.\n. That's exactly the design. You should always bump the dependencies to the least usable version. Leaving out the version in the dependency is a shortcut that when taken produces exactly the results you are seeing.\nReasoning: What if say the newest version of a dependency was no longer compatible with your package that depended on it? If we implemented the above, it would not be the desired behavior.\n. Folks are welcome to cup a dependency installed package as well.\n. And there is cup all, which would bump everything to the latest version. However, it may bump something you don't want upgraded (until we get the pinning feature implemented).\n. I don't believe this is the answer you were looking for, perhaps we can add the switch to force it. Just not make it the default. Which is likely exactly what you were looking for.\n. I think we can do this, but it may not make it in until after v1.\n. Thanks for finding this.\n. We're looking at May/June.\n. True that...\n. This is done - it's called --noop, but you can also use -whatif to invoke the same behavior. It's a core switch. https://github.com/chocolatey/choco/wiki/CommandsReference#default-options-and-switches\n. This actually goes to this repo - https://github.com/chocolatey/puppet-chocolatey\n. Of course, it also requires @rismoney to actually check in the files from his repo and then add the module out on puppet forge.\n. Updated the URL folks. Sorry about that.\n. ;)\n. bringing back a goodie: basically - http://devlicio.us/blogs/rob_reynolds/archive/2010/08/27/herding-code-talks-about-nu.aspx 55 minutes in\n. We are closing almost all of these for the 0.9.8.21 release. We've closed a few already.\n. Well this is a problem. Expected behavior is help or noop.\nOn Tuesday, April 9, 2013, michfield wrote:\n\nExecuting cuninst without parameters shouldn't do anything,\nbesides help, usage example or similar stuff.\nAnd it's really trying to uninstall something...\nLooks like it want's to uninstall Chocolatey itself - good think it didn't\nsucceed :)\nIf it's intended behaviour to uninstall itself, it's a big problem.\nWhy don't you introduce something like: cuninst myself or similar\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/265\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. This is closed since the PR was accepted.\n. looks good to me\n. This is in. Thanks! \n. Delete it\n. Looks like the native zip  for windows isn't enabled on the version you have. What version is it? Core?\n. Agreed.\nOn Monday, April 15, 2013, Matt Wrock wrote:\n\nYeah. There may be some edge cases that cant include support for everyone\nwithout a ton of effort but if a trivial change which this may be can make\nit all the more simple to widen adoption and provide a friction free\nexperience, then that would be nice.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/268#issuecomment-16372078\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. This is a duplicate of #59\nReferencing there and closing this one.\n. That might be helpful. :)\n. makes sense to have it prepended with chocolatey :+1: \n. @Redsandro eventually yes, but it won't come in v1. So back to your 15 years argument... ;)\n. Yes, .Net 4.0 pkg is there for future concerns. Choco at some point will\ndepend on a diff version of the framework, rendering a diff .net pkg\nuseless.\nOn Tuesday, April 16, 2013, Redsandro wrote:\n\ncpack doesn't mention that there has been a problem, the package is just\nnot generated.\nUpon further investigation it turns out that .NET4.0+ is required for\nnuget.\nThis makes DotNet4.0 http://chocolatey.org/packages/DotNet4.0 a funny\nChocolatey package, because you need it installed before you can install\nit. :P\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/270\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Agreed\nOn Tuesday, April 16, 2013, Redsandro wrote:\n\nI think it should warn though, if something like that is possible.\nCould not package your package because .NET is not installed.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/270#issuecomment-16440795\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. I'm guessing that nuget is failing silently?\n. @gep13 You want this one?\n. Nothing works in choco.exe without .NET 4.0. So there will be a very visible error.\n. You put a dependency on something but didn't include it in your source\n(and/or already have it installed). I know it's unexpected b/c u actually\nhave choco installed, and we have it out to fix when choco installs to\nactually put the choco pkg folder into lib like everything else.\nOn Tuesday, April 16, 2013, Redsandro wrote:\n\nI removed the dependency for now in order to get the package to install on\nmy testing VM, so I could push a new version of Rename Masterhttp://chocolatey.org/packages/renamemaster/3.4\n.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/271#issuecomment-16434902\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. If you have a package installed already, the dependency is resolved. Therefore you wouldn't need to include it in your current directory (source). Otherwise you need to put it there. In the case of chocolatey itself, it was treated differently for the first install and not also put in the %choco install%\\lib directory. We are going to fix that so that things can take dependencies on newer versions of chocolatey better.\n. You can take a dependency on a minimum version of chocolatey like you are doing and it should be fine. You just need to make sure when you are testing out dependencies in a local source, if you don't want to add the dependency packages to the source, specify the source they are in as well. As in -source \"\"%cd%;http://chocolatey.org/api/v2/\"\" (note the double double quotes here).\nDoes this make sense?\n. Awesome, thank you!\nOn Tuesday, April 16, 2013, Redsandro wrote:\n\nAppended your explanation to the Wiki:\nhttps://github.com/chocolatey/chocolatey/wiki/CreatePackages#testing-your-package\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/271#issuecomment-16439628\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. I understand what is being asked here. It's not a trivial thing to list out dependents with accuracy as the graph can change without a package's knowledge and does not span across multiple sources. \nI'm assuming this could really only be based on a source, where it would build a tree of current dependents (or some stale value, perhaps every 6 hours or so, that is acceptable so that it doesn't kill the server).\nDo you have a good example of a pkg manager that is doing this now?\n. Perfect. Thanks for the example. :)\n. IMHO managing dependencies is fundamental for a pkg mgr - getting info about what depends on a pkg is very handy, but I'd hardly argue fundamental. \nHowever I'd like to understand a use case that makes this fundamental.. Agreed it would be great to see who depends on a package, graphed locally and on a package source.. I think we can accomodate this... the priorities might fall this to take some time. I see you've done this on your master branch. If you plan to make any more changes and do pull requests you would be limited. \nMy suggestion is that you close this, move the changes to a branch, and then issue the pull request. That would allow you to make any additional pull requests or update your branch without influencing this request.\nKeep in mind the current wait time for acceptance of pull requests in chocolatey is on the order of a couple of months if not longer. Some things we get in very quickly, some things we do not, depending on where it falls for prioritization.\n. I'm less concerned about the rebase... what I don't want you to do though is do a pull and merge, that messes with source. Then I have to cherry pick your commits out to keep a good linear history.\n. I have the methods I expect committers to use in an email somewhere - it might be a good idea to put it into a readme markdown in the source.. it's very close to what you are saying here Rich.\n. Basically what should happen for the requestee:\n1. git checkout -b support_msu\n2. reissue pull request.\n3. reset your master to remove these changes. git extensions gui is a helpful one for doing that.\n. This isn't so bad... :)\n. Please don't update pull requests. There is only one recommended way of\ndoing this to keep the history line straight and it requires quite a few\nsteps on your part (including force push to your remote branch). It's\nactually easier for me to accept a PR if it hasn't  been updated (I may\nneed to cherry pick otherwise). I would rather the work be on my side of\nthe house because i'm the holdup here. :)\nWe'll publish what we are looking for in the contributor's guide for\nkeeping a pull request up to date.\nI mentioned this as I saw you update more than one.\nOn Saturday, April 27, 2013, Justin Dearing wrote:\n\nUpdated to current master\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/274#issuecomment-17116137\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. I'm good with this. \n. So in reviewing the EUA of the license, as long as we don't use any MS\ntrademarks we should be okay. But I'm not a lawyer. It does state that it\nis not intended to be used in a production environment and I don't know how\nthat affects the agreement if we do. I would prefer not to use that, even\nthough the license appears permissive...\nOr we can make that its own pkg and have choco download it and use it. I\nlike that much better!\nOn Friday, April 19, 2013, Justin Dearing wrote:\n\n@ferventcoder https://github.com/ferventcoder Is it ok to include\nFontHelpers.ps1https://github.com/Iristyle/ChocolateyPackages/blob/master/core/FontHelpers.ps1in chocolatey core? I hate these weird copyright issues.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/275#issuecomment-16697677\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Or just dotsourced for the system, effectively. There is an install\npowershell cmd call you can make (\nhttps://github.com/chocolatey/chocolatey/wiki/HelpersInstallChocolateyPowershellCommand)\nand\nthen use it as a cmd on the system you can call.\nOn Friday, April 19, 2013, Justin Dearing wrote:\n\n@ferventcoder https://github.com/ferventcoder , so you want\nchocolatey.nuspec to install this as a dependency, and then this to be\ndotsourced in chocolateyInstaller.psm1 so its in scope for\nInstall-TrueTypeFonts?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/275#issuecomment-16698477\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Wouldn't zero indicate no issue? Or in this case pkg exists locally?\nOn Friday, April 19, 2013, Rich Siegel wrote:\n\nthere is a chocolatey module\nhttps://github.com/chocolatey/puppet-chocolatey\nbut to get full exit codes natively we need the PR to be accepted, or you\ncan build from my source.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/276#issuecomment-16673615\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. This is in...\n. For my knowledgr, there are only one or two we don't export and I'm not\nsure if that's still the case.\nOn Sunday, April 21, 2013, Justin Dearing wrote:\n\nIf you compare the Export-ModuleMember line in chocolateyInstaller.psm1 to\nthe contents of the helpers folder, three functions are not exported\nGet-FtpFile\nGet-WebFile\nUnInstall-ChocolateyZipPackage\nIs this intention or not intentional:\nRegardless, I think the Export-ModuleMember line shoudl be generated\ndynaically. If you want to have things in the function folder that are\nprivate to the module scope, can we rename them to something like\nUnInstall-ChocolateyZipPackage.Unexported.ps1?\nLet me know and I'll prepare the patch.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/277\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Superseded by #628 \n. Is this a chocolatey issue or a package issue?\n. Think I figured out the issue... \n%chocolatey_bin_root% is set to c:\\chocolatey\\bin, right?\n. Try installing it again. I updated the package to not change the system drive if you have already specified it.\n. So in the case of the triumvirate, you can never go wrong with just the default (7zip). It will almost always install the .install/.app version of the application. No further thought necessary. The zipped version is there purely for the folks who won't have admin permissions to their machines or who don't mind going through a little extra work to keep things out of add/remove programs. \nWe are working to make the docs better and it will come with time. HTH\n. It's not really a specialization. Virtual packages are not baked at all at the moment. All there is are metapackages that point to the .install or the .commandline version of the packages. They exist for discoverability as well.\n. Agreed on most points. Some of this is definitely a polish aspect that we won't see until version 2 of chocolatey. Some of it is an infrastructure design for how we better handle package breakdowns, i.e. to your point of the one package, how do you handle french, japanese, and chinese versions of a package? What is the actual versions are out of sync? Should that hold up the package? Or should we somehow hide the other packages and we have the virtual make the best decision? That's kind of what I'm leaning towards.\nLots of design considerations here. :)\n. I need to consider 'help command' versus 'command help'.\nOn Tuesday, April 23, 2013, corkupine wrote:\n\nI know that a least sources is not in help. There may be some others not\ncovered. Also...not sure if it might pay to restructure help a little to\nget help on individual commands, e.g. chocolatey help sources.\nWas going to send a pull request, but the existing help output is already\npretty long and didn't know if maybe now was a good time to refactor that.\nI don't mind chipping in to fix this up if you come up with a\ndetermination.\nThanks!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/281\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Thinking command help would be best. :)\n. I like the environment reload. I saw something similar before, but I imagine that it will definitely be the route we will take.\n. @michfield I'm not sure if I noted, but I did end up using setenv.bat. It's now called refreshenv.cmd and it's installed in the bin directory so the user can determine when to run it. That started in 0.9.8.24 I believe.\n. I agree that the installer need to get smarter. I'm going to close this for now in favor of other issues that talk about this specifically.\n158 #420\n. Also, kudos on being possibly the only person who has used the extensions feature of chocolatey. :+1: \n. We have an open PR to evaluate doing this at system - https://github.com/chocolatey/chocolatey/pull/135\n. @DavidS you have that correct. And the secondary issue is that the user may not have admin privileges on their machine.\n. Yes, that is one way to know if chocolatey is installed. We are looking to go to system path for installs so it is available for all.\n. Hey, much appreciated. Let me get you the updated logo and if you want to hook that up again, that would be awesome! \n. We'd need an updated one...\n. Local...let me set up a repo with the logos.\nOn Tuesday, November 25, 2014, Gary Ewan Park notifications@github.com\nwrote:\n\n@ferventcoder https://github.com/ferventcoder do we keep the most\nrecent logos somewhere?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/pull/284#issuecomment-64318061.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Thanks for reporting this!\n. Our oldest PR is older than my youngest child. x)\n. @gep13 how does this work on a 32 bit system? https://github.com/chocolatey/chocolatey-coreteampackages/blob/master/feeddemon/tools/chocolateyUninstall.ps1#L8 ;)\n. @PaulMead It could be a bug in the helper.\n. :)\n. This has been moved over to choco - https://github.com/chocolatey/choco/issues/229\n. thank you sir...\n. Darn keys are too close to each other... :)\nIt's likely.\n. There, now it's labeled for 0.9.8.21. :)\n. On the nu project, one of our committers was able to pull and display the text from the wiki pages for help commands. It was pretty neat, but it requires that you are online.\n. That sounds pretty interesting. We'll start somewhere though with this and work towards something like that.\n. Wow, if @github let's me edit your comments, it should show that I edited for accountability. Seems like something that could seriously be abused. I could change your entire statement there @gep13. Thoughts @haacked?? \n. I hear that. Separate files is awesome, but what is the standard naming convention for the files?\n. There is a convention for powershell for help file naming. Perhaps we should look it up?\n. Sorry - that looks like an issue with the pkg and not with chocolatey.\nChoco doesn't have a function named stop-onappisinstalled (or anything\nclose to that).\nOn Monday, May 6, 2013, justinmk wrote:\n\nFrom the same cmd window:\n@powershell $psversiontable.psversion\nMajor  Minor  Build  Revision\n\n2      0      -1     -1\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/289#issuecomment-17491706\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Thanks Gary!\nOn Monday, May 6, 2013, Gary Ewan Park wrote:\n\nHello,\nI have just checked the Chocolatey Source Code, and the\nStop-OnAppIsInstalled is not part of the code case, so this must be a\nmethod that the package owner expects to already be available in the system.\nI think the best course of action would be for you to contact the package\nowner directly:\nYou can do that by clicking the Contact Owners link here:\nhttp://chocolatey.org/packages/Devbox-ConEmu\nHope that helps!\nGary\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/289#issuecomment-17495257\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Closing as not a choco issue\n. It only does it on exes that are in the package that are NOT used for install. How much work does it add? How many exes are in your package(s)?\n. Would you put this in the old package or the new package?\nOn Tuesday, May 14, 2013, Matt Silbernagel wrote:\n\nDoes chocolatey support an update script like chocolateyInstall.ps1 or\nchocolateyUninstall.ps1?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/291\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. What if you change the name of the service? Only the old service should\nknow that name, itherwise it gets messy. Or is that an uninstall concern?\nWhats the difference between uninstall and upgrade?\nOn Tuesday, May 14, 2013, Matt Silbernagel wrote:\n\nI would think the new package. Specifically, I'm creating a package that\nruns a service. When I update it, the service will need to stop as to free\nup all the resources.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/291#issuecomment-17904986\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Sorry meant whats difference between uninstall old version/install new\nversion versus upgrade? And by that I'm referring to end state.\nOn Tuesday, May 14, 2013, Matt Silbernagel wrote:\n\nI would think the new package. Specifically, I'm creating a package that\nruns a service. When I update it, the service will need to stop as to free\nup all the resources.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/291#issuecomment-17904986\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. > By updating, the result is the old folder / files structure merged with the new folder / files structure, which is wrong!\nSometimes this is the result of the native installer not performing the upgrade correctly.\n\nrun the uninstall for the old version - execute the chocolateyUninstall.ps1 script (if exists)\n\nWhile this appears to be a good solution, some uninstallers remove files you would want to keep around in an upgrade scenario. That's why we usually let the native installers that already know how to upgrade do their thing. In most times they handle the upgrade well, however there are cases where you mentioned artifacts are left behind.  In the principal of least surprise, I would find it more surprising if files / configuration were missing versus some extra files/folders around.\nThoughts?\n. > 1) Introduce the \"chocolateyUpdate.ps1\" script mentioned in the title, which should be placed in the newer package (the newer version knows about older versions, but not the other way around). Chocolatey should call that script if it exists (and skip chocolateyUninstall.ps1 from the existing, older package), otherwise fall back to uninstall old + install new.\nAnd this chocolateyUpdate.ps1 could call the older package's uninstall should the maintainer know the ramifications of this.\n. Will be thinking of improvements we can make as we move forward on the new version.\n. Migrated to https://github.com/chocolatey/choco/issues/268\n. Install-PowershellModulePath (or something like that). \n- This copies something to a path specified.\n- If the path is not already created in the environment variable, it will add it.\n- Be able to specify user/machine (unless this is only one or the other).\nSo looks like three parameters to be passed.\n. @jaykul may also be interested in this discussion and being more of an SME on this, he probably has suggestions on how to implement.\n. I know @jaykul had something he was working on for this kind of thing. \n. Or try with -debug ?\nOn Tuesday, May 28, 2013, Gary Ewan Park wrote:\n\nHmmm...\nJust tried again on my Windows 8 machine, and I get the same results as in\nthe above screenshot.\nWhat happens if you try running the following:\ncmd.exe /c webpicmd /List /ListOption:All\nThis is what Chocolatey is doing under the hood for you.\nGary\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/293#issuecomment-18545703\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. This seems simple enough to implement, we just ask for permission as we start it up... this is likely getting fixed in the next version\n. This should be completed.\n. Oh I agree with you on this completely. Yet another reason to stop using nuget.exe for the dirty work in the future.\n. It's possible the new version has this figured out. No the idea is to\nswitch to the lib version of nuget to internalize commands more.\nOn Wednesday, May 29, 2013, TomOne wrote:\n\nWhat are the other reasons to stop using nuget.exe?\nIt should be possible to modify the source code of nuget.exe to get nice\nand clean UTF-8 files. Unfortunately I\u2019m not able to do that, because I\u2019m\nnot familiar with C#.\nBut also the gallery on nuget.org would benefit from such an improvement.\nThey have the same issue with UTF-8 and ANSI.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/294#issuecomment-18648417\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. yeah, this part sucks.\n. GH wiki anchors headers automatically.\nOn Friday, October 25, 2013, Redsandro wrote:\n\nWow, that's elaborate.\nI've added a line to the guide for people who don't like readinghttps://github.com/chocolatey/chocolatey/wiki/CreatePackagesQuickStart\n:\n- You must save your files with UTF-8 character encoding without\n  BOM.\nIf you anchor your character encoding paragraph, I can link to it.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/294#issuecomment-27098358\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Go forth and wiki. :)\nOn Friday, October 25, 2013, TomOne wrote:\n\nI wrote this paragraph regarding the character encoding. As soon as you\napprove it, I\u2019ll add it to the Creating Packageshttps://github.com/chocolatey/chocolatey/wiki/CreatePackagessection in the Wiki, right after Rules\nto be observed before publishing packageshttps://github.com/chocolatey/chocolatey/wiki/CreatePackages#rules-to-be-observed-before-publishing-packages\n:\nCharacter encoding\n- Use the UTF-8 character encoding for all plain text files in your\n  package, especially for the .nuspec and .ps1 files. If you don\u2019t respect\n  this rule, some characters are not displayed correctly in the Gallery on\n  chocolatey.org, because the Gallery assumes UTF-8.\n- Don\u2019t save your UTF-8 files with a byte order mark (BOM). A BOM is\n  neither required nor recommended for UTF-8, because it can lead to several\n  issues.\n- Note that there\u2019s a lot of confusion in the world of character\n  encodings: For example, ANSI is an incorrect term for the\n  non-standardized Windows character encodings, e. Windows-1252. But you\n  should not use this encoding family anyway. In addition, Notepad++\n  incorrectly uses the term \u201cANSI as UTF-8\u201d for UTF-8 without BOM. If you\n  select UTF-8 in Notepad++, it means UTF-8 with BOM.\n- Specify the UTF-8 encoding in the first line of your nuspec files.\n  Then the first line looks like this: <?xml version=\"1.0\"\n  encoding=\"utf-8\"?>.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/294#issuecomment-27079309\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. No BOM- it causes more issues than it helps. I find it weird that\npowershell would get ut wrong. Do you have a gist where it shows it\noutputting the detected encoding?\nOn Saturday, October 26, 2013, TomOne wrote:\n\nThe anchor is generated automatically as @ferventcoderhttps://github.com/ferventcoderalready mentioned:\nhttps://github.com/chocolatey/chocolatey/wiki/CreatePackages#character-encoding\nDamn, I just found out that PowerShell doesn\u2019t even recognize UTF-8 files\nwithout BOM. It uses Microsoft\u2019s ancient Windows-1252 encoding by default.\nSo we have to save PowerShell scripts in UTF-8 with BOM to work correctly.\nSorry Microsoft, but we live in 2013. Nobody wants your stupid\nnon-standardized encodings! [image: :-1:]\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/294#issuecomment-27150483\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. I mostly ignore things I can't change and change the things I can change.\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\nOn Sat, Oct 26, 2013 at 3:31 PM, TomOne notifications@github.com wrote:\n\nAnd by the way, all modern Linux distributions use UTF-8 without BOM by\ndefault. The W3C doesn\u2019t recommend BOMs for the webhttp://www.w3.org/International/questions/qa-byte-order-mark.en.php\n.\nBOMs for UTF-8 really cause issues:\nhttps://en.wikipedia.org/wiki/Byte_order_mark#UTF-8\nSome issues that I\u2019ve experienced myself when using UTF-8 with a BOM:\n- .gitignore files don\u2019t work properly. The expression in the first\n  line fails because the BOM character stands in the way.\n- A colleague created a small node.js script which merges multiple CSV\n  files. The output file contained multiple BOM characters, even in the\n  middle of a line. Then my colleague imported that into a database using\n  phpMyAdmin. Then he experienced database inconsistencies. It took him over\n  an hour until he found out that the BOMs were causing that issue.\nWell, Microsoft seems to insist on BOMs when using UTF-8. But only because\nChocolatey is a Windows software, it doesn\u2019t mean that it has to adapt\nMicrosoft\u2019s inability to follow standards and recommendations, especially\nwhen it comes to such fundamental things like character encoding.\nI read that from multiple sources that Microsoft is not very open to any\nsuggestions. For example, they keep ignoring bug reports and feature\nrequests for of Internet Explorer and automatically delete them after about\n48 hours. What kind of weird strategy is this? Are they planning their\ndownfall of their company? Well, at least for IE it seems to work, when I\nlook on the progression of the market share of Internet Explorer. [image:\n:grinning:]\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/294#issuecomment-27155100\n.\n. Open the file after saving it that way. That's what I think Tom is\nreferring to.\n\nOn Sunday, October 27, 2013, Redsandro wrote:\n\nNotepad++ incorrectly uses the term ANSI as UTF-8 for UTF-8 encoded\nfiles without a BOM.\nWhat version are you running? I have no \"ANSI as UTF-8\" option, only \"UTF-8\nwithout BOM\"\n[image: Notepad++ encoding]https://github-camo.global.ssl.fastly.net/6e724cac3b3f0d47542fe3987f08a1934383d45f/687474703a2f2f692e696d6775722e636f6d2f525a445571674c2e706e67\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/294#issuecomment-27183337\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. How about \"Avoid the use of non-ASCII characters\"? \nAnd how about we update the templates so that they are in line with these recommendations? \n. Tom you crack me up. :D\nOn Tuesday, October 29, 2013, TomOne wrote:\n\nOK, but I still don\u2019t agree with putting\nEither:\n- Do not use non-ASCII characters.\ninto the wiki. I thought the idea is to write less (but sensible)\n  guidelines, not more. I\u2019ll try to explain why that \u201cnon-ASCII characters\u201d\n  guidelines does not make sense, using a little story (inspired by\n  https://github.com/chocolatey/chocolatey/wiki/ChocolateyStory):\nThere are two guys, Bob and Richard. Both are Windows users and discovered\nChocolatey a few moths ago. Now they also want to maintain some packages of\ntheir favourite software.\nRichard doesn\u2019t care much about guidelines and rules, he starts\nimmediately with creating packages and doesn\u2019t read the Chocolatey wiki. He\nuses the Windows Editor to edit his nuspec files and saves them with the\ndefault character encoding (Microsoft\u00ae ANSI\u2122). But in some of his packages\nthere are characters like \u00a9, \u00ae and en dashes. They get displayed with ?signs in the Chocolatey Gallery, but he doesn\u2019t even notice it. After a few\nweeks he coincidentally notices this problem, but he does not care.\nUnlike Richard, Bob is assiduous. He reads the Create Packageshttps://github.com/chocolatey/chocolatey/wiki/CreatePackagespage and learns that nuspec files must be saved as UTF-8 without BOM. He\ndidn\u2019t know much about character encodings before, but he configures his\nNotepad++ editor to save files as UTF-8 without BOM by default. Now he\nwon\u2019t have any problems with character encodings in nuspec files and enjoys\ncreating packages.\nUnfortunately there are many Richard-like package maintainers on\nChocolatey.org. For them, a suggestion in the wiki like \u201cDo not use\nnon-ASCII characters.\u201d wouldn\u2019t have any effect. And for people like Bob,\nsuch a suggestion would be totally superfluous, because the solution to set\nthe correct character encoding in the editor once is certainly less\ncomplicated than having to remember each time when editing a nuspec to not\nuse non-ASCII characters.\nDon\u2019t be a Richard. [image: :smile:]\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/294#issuecomment-27351020\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. You both crack me up. I get the humor on both sides, but from this\nconversation I'm not yet sure you get each other's humor. :)\nOn Friday, November 1, 2013, TomOne wrote:\n\nOf course.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/294#issuecomment-27613262\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. That's actually interesting...\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\nOn Sat, Nov 2, 2013 at 12:08 PM, Rich Siegel notifications@github.comwrote:\n\nWhy not automate a character encoding conversion to the correct encodings\nbefore a package gets built?\nI like it.\n-Rich :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/294#issuecomment-27626278\n.\n. Well it was a cool theory anyway. ;)\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\nOn Sat, Nov 2, 2013 at 3:27 PM, Redsandro notifications@github.com wrote:\n\nI don't think that will work. Once you save your file in standard\n(according to Windows) encoding, the character becomes unreadable when you\nreopen the file. But when I change encoding to utf-8, the char remains\nunreadable. I have to enter it again.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/294#issuecomment-27631734\n.\n. It sounds like cpack would be too late in the process to be helpful.\n. I guess I'm missing something now. You can't get back items that have been converted to ASCII format where those items are now boxes. So converting it back to UTF8 doesn't win you anything.\n. It could be I missed this https://github.com/chocolatey/chocolatey/issues/294#issuecomment-27632769\n. @TomOne we have editor config in here. If you send me a PR over in the templates repo, I would accept it there. But I'm not sure what good it would do since that is not a chocolatey packages template repository that they start from (if that makes sense), just one that warmup uses to copy the templates into their chocolatey packages repo.\n. There is only one way to really find out what happens if you use a BOM with the nuspec. :)\n. When the advice went out we were on Nuget.exe 2.1 and we are using 2.8 now. That could be the difference.\n. Yes, \n I prefer that we would do it more like ruby gems where it throws up an option on what you want to uninstall. \n1) v2.0\n2) v1.0\n3) all of these\n. I'm going to close this as a dupe of #389 as it more accurately describes the feature.\n. Please subscribe to that issue. Thanks! \n. Double double quotes. Its on the wiki. Something with the powershell\nhandoff strips the first set. You can also use single quotes.\n\nLike \"\"somewhere here\"\" or 'this too'.\nHope this helps.\nOn Tuesday, June 4, 2013, Anton Vishnyakov wrote:\n\nHi team,\nI use cinst with \"-source\" param to install/update packages from local\nfolder.\nSomething like that:\ncint mypackage -source \"c:/tmp/mypackage\"\nIt seem that we can't use spaces for the local folder path. If I use\n\"tmp 2\" folder, I will get an error \"2\\mypackage is not a valid version\nstring\":\ncint mypackage -source \"c:/tmp 2/mypackage\"\nIs that behavior by design or something? Any suggestions?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/296\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. This is in 97b94b2d7d5874da2e94bad693b3e8c51a146b64 and 5a9d3968042cdacfdfce62f05e0108a772c5019e\n. This seems a feature for the website, which is over at https://github.com/chocolatey/chocolatey.org\n. I think we already have a pull request for this.\nOn Friday, June 14, 2013, Simon Cropp wrote:\n\nrun this at the command line\ncuninst\nand get this\nChocolatey (v0.9.8.20) is unininstalling ...\nRemove-Item : Cannot find path 'C:\\Chocolatey\\lib.0.9.8.20' because it does not exist.\nAt C:\\Chocolatey\\chocolateyinstall\\functions\\Chocolatey-Uninstall.ps1:28 char:5\n-           Remove-Item -Recurse -Force $packageFolder\n-           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n- CategoryInfo          : ObjectNotFound: (C:\\Chocolatey\\lib.0.9.8.20:String) [Remove-Item], ItemNotFoundException\n- FullyQualifiedErrorId : PathNotFound,Microsoft.PowerShell.Commands.RemoveItemCommand\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/299\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Yes, we are looking at ensuring the message only happens one time. This can\nhappen multiple times if someone calls it directly or if it is called as\npart of one of the big three utility functions and then wraps some more\nscript code afterwards.\nOn Sunday, June 16, 2013, Gary Ewan Park wrote:\n\nI \"think\" this might be an issue with the package itself, no? Where a call\nto Write-Success is called twice. Nit at my computer just now, but will try\nto check the chocolatey package for this application later today to confirm.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/300#issuecomment-19509693\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. It's wrapping a try catch around one of the big four (it's no longer just\nthree), which already has error handling and everything built into it. See\nhttps://github.com/chocolatey/chocolatey/wiki/HelpersReference\nThis pkg script can be cut to one line. Is this one that I own?\nOn Monday, June 17, 2013, Gary Ewan Park wrote:\n\nDoesn't look like this is a package problem. The choco package has the\nfollowing:\ntry {\n  Install-ChocolateyPackage 'markpad' 'msi' '/quiet /norestart' 'https://github.com/downloads/Code52/DownmarkerWPF/MarkPad.v0.9.0.1.msi'\nWrite-ChocolateySuccess 'markpad'\n} catch {\n  Write-ChocolateyFailure 'markpad' \"$($_.Exception.Message)\"\n  throw\n}\nGary\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/300#issuecomment-19546394\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Sure!\nOn Monday, June 17, 2013, Gary Ewan Park wrote:\n\nGotcha.\nNo, this one not owned by you, but i will contact package owners later\ntonight and let them know if you want?\nSent from my Windows Phone\n\nFrom: Rob Reynolds>\nSent: 17/06/2013 16:08\nTo: chocolatey/chocolatey>\nCc: Gary Ewan Park>\nSubject: Re: [chocolatey] Duplicate logging (#300)\nIt's wrapping a try catch around one of the big four (it's no longer just\nthree), which already has error handling and everything built into it. See\nhttps://github.com/chocolatey/chocolatey/wiki/HelpersReference\nThis pkg script can be cut to one line. Is this one that I own?\nOn Monday, June 17, 2013, Gary Ewan Park wrote:\n\nDoesn't look like this is a package problem. The choco package has the\nfollowing:\ntry {\nInstall-ChocolateyPackage 'markpad' 'msi' '/quiet /norestart' '\nhttps://github.com/downloads/Code52/DownmarkerWPF/MarkPad.v0.9.0.1.msi'\nWrite-ChocolateySuccess 'markpad'\n} catch {\nWrite-ChocolateyFailure 'markpad' \"$($_.Exception.Message)\"\nthrow\n}\nGary\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/chocolatey/chocolatey/issues/300#issuecomment-19546394>\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/issues/300#issuecomment-19551258\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/300#issuecomment-19551922\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Hmmm....that sounds bad. I haven't run it through any profilers but we can take a look.\n. So this is due to needing the COM shell for unzipping files. That doesn't exist on core. We are looking into using something non-native but for now you will need to follow one of the other installation methods on the wiki.\n. Cheers \n. If you try the prerelease, I'd be interested to know if it works now.\nOn Wednesday, September 18, 2013, Gildas Cherruel wrote:\n\nit actually exists on Windows Core 2012. Though not through the Windows\nSHell, since it is not installed on Core (and should not).\nTo unzip files you can do in Powershell:\n[System.Reflection.Assembly]::LoadWithPartialName(\"System.IO.Compression.FileSystem\")\n| Out-Null\n[System.IO.Compression.ZipFile]::ExtractToDirectory($pathToZip, $targetDir)\nNow, that alone won't fix the overall issue as I bet chocolatey uses\nWindows SHell in its own scripts.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/302#issuecomment-24709157\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Gildas, would you be up for a hangout to discuss some of these things? \n. Interesting dilemma. Seems we need to be able to pass something to the downloaded string as we invoke it.\n. call this instead of the normal install - https://chocolatey.org/installabsolutelatest.ps1\n. Yes, we already published a notice on this: https://groups.google.com/forum/#!searchin/chocolatey/PSA$3A$20Possible$20Action$20Required!$20Schema$20Version$20Errors$20if$20you$20have$20upgraded$20to$20Nuget$202.5/chocolatey/HGIqDlOSXTQ/lPPOpmvuP84J\n. Closing since this is already fixed in the next version and we have a workaround. \n. For posterity, and so you don't have to read through my thread to find the nuget bug - https://nuget.codeplex.com/discussions/445455\n. Well, 15 months or a few days... still doesn't make it right https://github.com/chocolatey/chocolatey/commit/c9f9e8dc95ccd337059cd84bbd571b026a7eb7dd\n. so this requires comma between package names. I am trying to figure out removing everything from implicitly being positional but running into a few issues I will need to explore later.\n. Yep. Notice I said temporarily need a comma.\nOn Thursday, June 27, 2013, Redsandro wrote:\n\nWow, it's handy to know powershell. :P\nDetails are very important. Details can even make an overpriced turd\npopular. Just look at Apple Inc. That's why I'm seemingly nitpicky, but\nplease understand it is only because I care. :)\nThat said, this is a big step forward. But it's still unintuitive-ish.\nThese days, smartphones come without a manual because everything is tackled\nin the simplest feasible decimation. People (can) rely on that. Not needing\ncomma's is a smartphone that doesn't need a manual. Otherwise we'd have to\nexplain in the manual: We know the 10 most popular package managers use\nspace delimited package lists for batch installation, but we need a comma\nseparated list because [insert reason the user doesn't really care about]\n.\nEspecially if you promote Chocolatey as \"like apt-get\".\nI know, semantically \"like\" allows for variations. But that's not how\nthe world, users from the three most popular distro's that use apt-get, and\ngoogle, work.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/304#issuecomment-20126209\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. its actually pretty easy - \npowershell\n[parameter(Position=1, ValueFromRemainingArguments=$true)]\n  [string[]]$packageNames=@('')\nThe hard part is that I have naming conflicts with debug and verbose. So I either have to change the names, which I'm not going to do, or drop powershell in favor of c# calling powershell packages (which is in the plans anyway).\n. I have it working now, but I had to remove the two naming conflicts... and those need to stay in.\nFor reference: http://stackoverflow.com/questions/6870362/can-i-create-a-script-with-parameter-that-has-aliasdb-in-powershell\nand http://stackoverflow.com/questions/10536282/powershell-defining-the-verbose-switch-in-a-function\n. And you ask the twitters and the twitters provide... :) \nFixed in https://github.com/chocolatey/chocolatey/commit/6ca7ed1fe2d9f45fcfb3f84bbb2aa9811a544ff2\n. I didn't remove, I just moved them down... :) \nSo those things are still there.\n. cup chocolatey -pre and you have it... :)\n. That and I've been mulling over this guy for awhile in how I would see it implemented. :)\n. Also your sarcasm went a long way into me getting off of my duff and getting 'er done. :+1: \nWith my new job you should see a much faster response time...\n. Beauty of a prerelease. Those can go out all day and night so folks can play with them. And if they don't work, well it was a prerelase... ;)\n. yep... know what you are talking about @rismoney - will Mark Johnson's stuff not work for you? The offline installer piece?\n. It would go in the helpers\\functions dir - anything outside of that is considered not available to pkgs. If they use anything outside of that, it's not guaranteed to be there...\n. FYI - the packages doing this is fine, but it will eventually be part of Install-ChocolateyPortablePackage (vaporware at the moment) so it just happens behind the scenes.\n. Also, when I had this in my head, I'd always called it tools root so as not to confuse with the bin folder. not a big deal, just trying to figure out the naming :)\n. It's a convention. Just trying to figure out if it's the right convention or if it needs to be changed. Heck, we just changed the convention on .app / .tool to .install / .portable to convey the obvious. :)\n. It comes on the google group - https://groups.google.com/forum/#!topic/chocolatey/dxnOBFly3vU\n. Not sure... That's interesting. What is upstream for you?\n. I tend to use rebase to keep my commits at the top before I push them back to the remote repo.\nBut what you are doing should work... should. ;)\n. Closing as #359 has been accepted.\n. This sounds pretty solid. It might be a version or two before we get to this though.\n. Like I suggested, what we need first is a way to pass a universal switch to chocolatey for directory to install has to happen first and then packages will need to buy into that some.\n. Seems like you could have an internal fork of chocolatey where you make that change right in the first lines of chocolatey.ps1 :)\n. At least as stop gap. It would be really easy to make the change here but I'm reluctant as the really easy changes is what has kept around the POSH version for two years past it's usefulness.\n. This partially closes #647.\n. Bad Example - papercut IS now maintained by the author - http://papercut.codeplex.com/discussions/251360\n. But I get what you are saying - you need to reach out to the pkg maintainers on chocolatey.org through the contact owners link. If you don't hear back from them within a week followup with an abuse report. If you don't hear back, follow up with an email to the chocolatey google group. This triage process is published on the google group, but probably needs to be published on the wiki as well.\n. https://github.com/chocolatey/chocolatey/wiki/PackageTriageProcess\n. Are we good to close this guy?\n. Also updated http://devlicio.us/blogs/rob_reynolds/archive/2013/01/03/chocolatey-automatic-packages.aspx\n. In older versions of nuget.exe, it would bubble up false errors back to chocolatey (like when you asked it to install something you already had installed and it noop-ed). \nIf that is out of the current, then I'm fine with us looking at @rismoney's issue #210 - which this could be considered a duplicate of. We'll reference this in 210 and close this issue. Thanks! \n. Sometimes it's cinst [package] -pre (just like the website states). If you are upgrading perhaps we should add this as well to the commands you can call.\n. This enhancement goes on https://github.com/chocolatey/chocolatey.org\n. That right there should go to it's own issue. Thanks! \n. Thank you. This is likely the same thing that Katherine has been talking about. It's a strange issue that seems to go away if you use -debug (so it's extremely hard to detect WHAT is causing it).\n. Like it... :)\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\nOn Tue, Jul 2, 2013 at 8:48 AM, Redsandro notifications@github.com wrote:\n\nThis works\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/312#issuecomment-20346246\n.\n. Boo, we'll switch to write-output all at the same time... right now it's write-host and we have a function that is overriding the default write-host, so we'd like to see that stay for now.\n. You would need to know natively what the install arguments are that you would pass to each installer to do this. It is not a trivial task for us to handle this with chocolatey and a universal switch as each installer could do it differently, but it is on our list: #32 \n. Well that's kind of what we are planning on doing. A universal switch for users to pass and on the back end each different type of installer would get passed the proper args.\n. Not arguing that at all. That's a different thing and we definitely need\nthat as well.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\nOn Wed, Jul 10, 2013 at 7:32 AM, Rich Siegel notifications@github.comwrote:\n\nwe would still want customized parameters that can be created by the\npackage owner, than could then be queried through a common syntax. perhaps\nlisted through an xml tag in nuspec\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/314#issuecomment-20746056\n.\n. Yes go for it. And close this when done.\n. Aliases are super awesome in theory, I have not worked it out in my head how it will work out once the package comes down to a user's machine.\n. It's a guideline, not a standard. ;)\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\nOn Tue, Jul 23, 2013 at 6:42 AM, Rich Siegel notifications@github.comwrote:\n\nPersonally I use camelcase for id. I like it to be poshy vs nixy. But I am\nambivalant on setting a standard on that.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/316#issuecomment-21408360\n.\n. Technically folks camelCase looks likeThis. PascalCase on the other hand\nlooks LikeThis. ;)\n\nOn Tuesday, September 3, 2013, TomOne wrote:\n\nBut standards are not bad if they are sensible. ;) I know no other package\nformat (except NuGet of course) which uses CamelCase for id.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/316#issuecomment-23742587\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. :+1:\n. need to also have a task on chocolatey.org\n. I updated my article. Do you want to update the wiki? Or did you already do that?\n. :+1: for documentation/guidelines!\n. There is a history. Its been this long across most projects on github\nwithout issue. Folks are generally well-behaved. Otherwise they might get\nbanned from github.\nOn Tuesday, July 23, 2013, TomOne wrote:\n\nThanks. Does that mean that I can add it to the Wiki?\nHmmm, I find it strange that every GitHub user can edit every Wiki without\nany moderation or inspection by the project members. This is in need of\nimprovement.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/318#issuecomment-21446813\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Thumbs up on documentation. :)\n. A documentation thing I forgot! There is one job for the meta and\n.install/.portable that it points to and one job for the\n.install/.portable. Those two jobs point to the .install and the\n.portable. So two jobs for three applications. I just add a line for the\nmeta in the before command of the other job that looks eerily similar to\nthe one you add for all jobs in ketarin settings.\nOn Friday, July 26, 2013, TomOne wrote:\n\nI discovered an issue when there are used three automatic packages for one\napplication (, .install and .portable).\nKetarin won\u2019t execute chocopkgup for the .install or .portable package\nbecause of the following reason:\nThe metapackage (called * here) must be configured to download the same\nfile as the .install or .portable package. Otherwise chocopkgup won\u2019t get\nexecuted for the metapackage. But this causes that the same file that would\nget downloaded for .install and *.portable already exists in the\nC:\\Chocolatey_work\\ folder.\nThen Ketarin recognizes that file and won\u2019t execute chocopkgup for either\n.install or .portable. This causes non-updating automatic packages.\nHowever, there exists a simple workaround for this issue: If two packages\ndownload the same file, these two files must be stored in different folders\nin order to have working automatic packages, for example\nC:\\Chocolatey_work\\install or C:\\Chocolatey_work\\portable.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/319\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Yes! That makes sense! :) \n. https://github.com/chocolatey/chocolatey/wiki/AutomaticPackages#notes-about-tri-packages-metavirtual-aka--install-and-portable\n. I agree and have thinking about this for awhile. There is update and upgrade. We are unfortunately incorrectly using the wrong terminology right now with update (we'll need to move this command to upgrade) and make cup call upgrade.\nThe problem that we have right now is the OData feed will only return a set number of results so we'll need to investigate a different way of getting those index files.\n. @FichteFoll We know it's a horrible implementation now. Hands are tied at the moment due to our usage of nuget.exe and it's limitations. We are moving past that though :)\n. Looks good! Ship it!\nOn Saturday, August 3, 2013, TomOne wrote:\n\nThere has been a lot of discussion of package localization:\n-\n   https://groups.google.com/forum/#!searchin/chocolatey/language/chocolatey/ua_yqZFtZps/54Uqr4tiw8IJ\n   -\n   https://groups.google.com/forum/#!searchin/chocolatey/language/chocolatey/oV9eqROohuM/FUIqfcdPIdwJ\n   -\n   https://groups.google.com/forum/#!searchin/chocolatey/language/chocolatey/7l_gFxoWiZQ/P6t_G4sXBXEJ\n- #233 https://github.com/chocolatey/chocolatey/issues/233\nI gained some experience about this topic and created some packages with\ni18n support or migrated existing ones.\nI think it\u2019s a good idea to have a section about this topic in the wiki. I\nwrote some paragraphs:\nhttps://github.com/TomOne/nugetpackages/wiki/Localization\nIs this suitable to add it to the wiki?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/321\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Don't we already have this as a patch? Or in the code?\nOn Monday, August 5, 2013, Justin Dearing wrote:\n\nBasically. this allows Get-ChocolateyWebFile to handle file:/// URIs.\nYou can merge this Pull Request by running\ngit pull https://github.com/zippy1981/chocolatey fileUriFixes\nOr view, comment on, or merge it at:\nhttps://github.com/chocolatey/chocolatey/pull/322\nCommit Summary\n- Get-ChocolateyWebFile now handles file:/// uris\n- Merge remote-tracking branch 'origin/master' into fileUriFixes\nFile Changes\nPatch Links:\n- https://github.com/chocolatey/chocolatey/pull/322.patch\n- https://github.com/chocolatey/chocolatey/pull/322.diff\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. I'm good with this...\n. This is done dfad346c1fd74a061423e86be9b8502ffd6306e9\n. Echo off stuff correct?\n. For this last year, IE8 and lower has been about 3% (about 9K visitors).\nIE is 11.58% (any version) of the visits, with Firefox at 19.85% and Chrome\nat 59.89%.\nSee images below:\n\n\n. how big is the plugin?\n. Well then I'm down for it if you want to send me a PR. :)\n. I do know how to do it in IIS/ASP.NET MVC\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\nOn Thu, Aug 15, 2013 at 10:32 AM, TomOne notifications@github.com wrote:\n\nGreat. I have good news for you. We don\u2019t even need SVGeezy. This plugin\nwas designed for folks who don\u2019t already have Mondernizr and jQuery\nintegrated in their pages, but chocolatey.org has them integrated. So\nModernizr can be used for feature detection and jQuery for DOM manupulation\nand the code becomes even simpler, without the need of SVGeezy:\nif (!Modernizr.svg) {\n    $('img[src$=\".svg\"]').each(function()\n    {\n        $(this).attr('src', $(this).attr('src').replace('.svg', '.png'));\n    });}\nI found this code on David Bushell\u2019s bloghttp://dbushell.com/2013/02/04/a-primer-to-front-end-svg-hacking/,\na guy who seems to be very interested into SVG. [image: :+1:]\nIn addition I played around with SVGZ. That is the gzipped format of SVG.\nSVG is highly compressible, because it contains a lot of redundant data\n(like HTML). I was very curious about the filesizes of SVG, SVGZ and PNG in\ncomparison. Therefore I generated some files:\nFile size in bytes, filename\n1141, git.svg http://walterbz.com/git.svg\n782, git-opt.svg http://walterbz.com/git-opt.svg\n437, git-opt.svgz http://walterbz.com/git-opt.svgz\n1699, git-opt-128px.png http://walterbz.com/git-opt-128px.png\n868, git-opt-48px.png http://walterbz.com/git-opt-48px.png\n56431, mixxx.svg http://walterbz.com/mixxx.svg\n16839, mixxx-opt.svg http://walterbz.com/mixxx-opt.svg\n2357, mixxx-opt.svgz http://walterbz.com/mixxx-opt.svgz\n5278, mixxx-opt-128px.png http://walterbz.com/mixxx-opt-128px.png\n1674, mixxx-opt-48px.png http://walterbz.com/mixxx-opt-48px.png\n28718, pyhoca-gui.svg http://walterbz.com/pyhoca-gui.svg\n12009, pyhoca-gui-opt.svg http://walterbz.com/pyhoca-gui-opt.svg\n3190, pyhoca-gui-opt.svgz http://walterbz.com/pyhoca-gui-opt.svgz\n16306, pyhoca-gui-opt-128px.pnghttp://walterbz.com/pyhoca-gui-opt-128px.png\n4067, pyhoca-gui-opt-48px.pnghttp://walterbz.com/pyhoca-gui-opt-48px.png\nDescription of these files with the example of git:\n- git.svg = original SVG file\n- git-opt-svg = optimized SVG file with SVGOhttps://github.com/svg/svgo,\n  a Node.js tool\n- git-opt.svgz = gzip compressed optimized SVG file\n- git-opt-128px.png = equivalent raster image with 128px, optimized\n  with optipng -o7\n- git-opt-48px.png = equivalent raster image with 48px, optimized with optipng\n  -o7\nAs you can see, SVGZ is clearly smaller than the raster version with\n128px, and in some cases even smaller than the 48px version. SVGZ is a very\ninteresting format, perfectly suitable to use it as package icons on\nchocolatey.org.\nHowever, SVGZ cannot be directly integrated in websites without an\nadditional step. The web server must be configured to tell the browser \u201chey\nthis is gzipped, you\u2019ll need to decompress this\u201d.\nThis can be done in Apache by adding this to the .htaccess file:\nSVG\nAddType image/svg+xml .svg .svgz\nAddEncoding x-gzip .svgz\nI don\u2019t know how to configure IIS to handle SVGZ properly, but you\ncertainly know it. It would be great if you could test it.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/324#issuecomment-22710733\n.\n. Yeah, don't install the nupkg directly. Source should be an\nhttp/folder/networkshare.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\nOn Sat, Aug 24, 2013 at 7:41 AM, Steven Kirk notifications@github.comwrote:\n\nWhenever I try to install anything I get the following error:\nUnable to read package from path\n'jquery.TypeScript.DefinitelyTyped.0.2.5.nupkg'\nThis started when I tried to update the jquery typescript package in\nVS2012, but it seems to have spread to chocolatey.\nAny idea how to debug/fix?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/325\n.\n. What is the command you are using? Please include exactly as you are\nspecifying it on the command line.\nThanks.\n\nOn Saturday, August 24, 2013, Steven Kirk wrote:\n\nSorry, I don't understand.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/325#issuecomment-23218020\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Okay, perfect. You have a 2.5 pkg in your nuget cache. Clear your cache and\nthen install the prerelease version of chocolatey.\nCup chocolatey -pre\nOn Sunday, August 25, 2013, Steven Kirk wrote:\n\nComplete input/output:\nPS C:\\Users\\Steven> cinst nodejs.install\nChocolatey (v0.9.8.20) is installing nodejs.install and dependencies. By\ninstalling you accept the license for nodejs.in\nstall and each dependency you are installing.\nUnable to read package from path\n'jquery.TypeScript.DefinitelyTyped.0.2.5.nupkg'.\nFinished installing 'nodejs.install' and dependencies - if errors not\nshown in console, none detected. Check log for err\nors if unsure.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/325#issuecomment-23226260\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. To explain further, there is a bug in nuget when u specfiy a source. I've\ncreated the issue for them to fix and have also used a workaround in the\nprerelease.\nOn Sunday, August 25, 2013, Rob Reynolds wrote:\n\nOkay, perfect. You have a 2.5 pkg in your nuget cache. Clear your cache\nand then install the prerelease version of chocolatey.\nCup chocolatey -pre\nOn Sunday, August 25, 2013, Steven Kirk wrote:\n\nComplete input/output:\nPS C:\\Users\\Steven> cinst nodejs.install\nChocolatey (v0.9.8.20) is installing nodejs.install and dependencies. By\ninstalling you accept the license for nodejs.in\nstall and each dependency you are installing.\nUnable to read package from path\n'jquery.TypeScript.DefinitelyTyped.0.2.5.nupkg'.\nFinished installing 'nodejs.install' and dependencies - if errors not\nshown in console, none detected. Check log for err\nors if unsure.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/325#issuecomment-23226260\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. This is something I think we can add pretty easily. :)\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\nOn Sat, Aug 24, 2013 at 8:50 AM, Alonisser notifications@github.com wrote:\n\nsomething along what 'pip install' does in python;\nYou must give at least one requirement to install\nInstead with chocolatey I've got a very long batch/powershell screen I got:\nFinished installing '' and dependencies\nwhich is clearly a mistake, and I could totally miss it because of all the\nworking fanfare, commands running etc.\nI just came back into trying chocolatey, and now after being much more\nconsole savvy it serves me great. keep on the good work!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/326\n.\n. This is fixed in 2db80fa929491c7b38ef6ca329782f8f11b11b3c\n. Awesome, thanks!\n. I ended up adding this functionality here 2db80fa929491c7b38ef6ca329782f8f11b11b3c\n. imagemagick-6.8.6-1 would be what you were actually suggesting (I hope). If you read that, ubuntu packages are built on top of debian, so you already have the debian package version on there with -1 right before ubuntu6 (where six is the ubuntu package version). \n\nI think ultimately we can find something more flexible. Along these lines I could see something like sometool.1.2.3-prereleaseinfo(1) or something like that. I am not a fan of that yet, just thinking out loud.\n. > What if the software itself already uses four dot-separated segments for its version and you need to fix the package? If you have for example a software version 2.5.8.1, you are forced to alter the last segment, so the original software version information gets destroyed: 2.5.8.20140327. Then, for all the following packages of version 2.5.8.x, you are forced to use the current date as last segment, even if the affected package does not actually fix a previous package revision. You would have to wait until the packaged software gets released with version 2.5.9.x to be able to drop the date in the last segment and use the real software version again. So here an essential information is removed just because of a senseless restriction.\nActually you can get creative here. It's not suggested to do this in the fourth segment if it is used. Look at the ruby package. 1.9.3.392 becomes 1.9.3.39200 and the next release is 1.9.3.39201. It's not perfect and yes we should look at enhancing stuff like that. Where do you see this in terms of priority? \n. Fixed in 8d10898b682e03cefa02123b404397a34580f778\n. @Gab-km I think for me, the username is a requirement. While we hope people also have a password that is not empty, can you think of any cases where someone might have it set empty? I can't off the top of my head so having it required would also be helpful\n. The interesting thing here is easy_install is supported already with\n-source python.\nNot sure if you realized that. With Windows easy install used to fail less\noften than pip. Is this still the case?\nOn Wednesday, September 11, 2013, jmenchacavr wrote:\n\nLike Ruby gems, there's Python pip. This is a request to add such support.\nSome example commands:\nchocolatey pip packageName\ncpip packageName\ncinst packageName -source python\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/333\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Well we already have easy_install with -source python.\nSo if the question is to add -source pythonpip as well, I think we can just update this issue\n. +1\nOn Wednesday, September 11, 2013, Matt Wrock wrote:\n\n\"Windows Feature\" is somewhat of a thing in windows speak. For example the\n'Turn Windows Features On and Off\" GUI. However I wouldn't say it is by any\nmeans official and I definitely see your point. We would want to implement\nthis so that both terms are accepted to support backwards compatibility.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/334#issuecomment-24272214\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Interesting...not quite grokking what we want out of this yet though\n. By the way, this is awesome. Did you see the normal process that we ask for contributors to look at?  https://github.com/chocolatey/chocolatey/blob/master/CONTRIBUTING.md\nWe'd like to work to get some unit tests in here to verify the functionality of this request.\n. I like this code, there is technically nothing wrong with it, but the PR (pull request) was submitted from the master branch. Can you review the document I referenced and resubmit this PR under a feature branch? Thanks!\n. I think NPM works well on WIndows...\n. I'm not really on the fence here. I think it would be one we would integrate with just fine. :)\n. really....\n. What is your source? Is it proget? I just had an issue filed that mentioned\npackage id / title differences\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\nOn Thu, Sep 19, 2013 at 5:26 AM, mawl notifications@github.com wrote:\n\nmy commandline shows:\nC:\\Users\\Administrator>clist mycompany\nmycompany.DevEnv 2013.9.19\nmycompany.MSBuild.targets 2013.9.18\nmycompany.VisualStudio2012Premium 11.0.1\nC:\\Users\\Administrator>clist mycompany.DevEnv\nNo packages found.\nC:\\Users\\Administrator>cver mycompany.DevEnv\nfound : 2013.9.18\nname : mycompany.DevEnv\nlatestCompare : 000000000000\nverMessage : Your version is newer than the most recent. You must be\nsmarter than the average bear...\nlatest : {}\nfoundCompare : 000000002013.000000000009.000000000018\nchocolatey version 0.9.8.20\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/339\n.\n. For MSI the uninstall is msiexec /x [productname.msi|productcode]\n\nWe were thinking of storing the product code on install so it would be available without a need for a chocolateyUninstall.ps1 file.  Is this what you were thinking Anthony?\n. Now you are talking more about the moderation rules engine I have been\nthinking about for awhile. :)\nOn Saturday, December 7, 2013, Matt Wrock wrote:\n\nI agree with @gep13 https://github.com/gep13 that encouraging users to\nuse a myget feed for personal packages is the way to go. As far as the\neducational process, certainly including the guidelines in the confirmation\nemail or at least a link is a great idea, but might also consider checking\nconventions at push time. While we could not know for sure if a user is\npushing a personalized package, we could look for dot notation that does\nnot include the standard prefixes and then prompt the user with something\nlike, \"This might not be a package intended for public assumption, personal\npackages are best kept on other feds like myget. Are you sure you want to\npush this package?\"\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/342#issuecomment-30058155\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. That's funny right there...\nOn Saturday, December 7, 2013, Gary Ewan Park wrote:\n\nDoes the Chocolatey Gallery, which comes from the Nuget Gallery, provide a\nlot of moderation capabilities? Or is this something that will have to be\nbuilt in?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/342#issuecomment-30065185\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. There is nothing that keeps chocolatey from inspecting an already built package and attempting to do many of these things before it allows a package to be available to consumers.\n. Nothing but rolling up some sleeves and getting to work that is.\n. It's actually a both kind of thing. There would be a certain set of\nelements that would be run locally. Then a much bigger set that would\noverlap the local set (in case of client funny business) and run on the\nserver.\nAnother way to think about it is unit tests versus integration tests.\nLocally we run some smoke checks and some validation of common issues.\nOn the server we let the package through but hold it until it passes more\nextensive validation rules.\nThe whole idea is a business rules engine that is based on a validation\nlibrary I've written in the past. I just have to dig it out, brush it off\nand ensure it's all up to date.\nOn Tue, Dec 10, 2013 at 11:57 AM, Gary Ewan Park\nnotifications@github.comwrote:\n\nWould this be a case of executing some checks during the cpack command,\nand then have it fail if something goes wrong, or would this be done on the\nChocolatey.org server once the package has been uploaded to the server? Or\nboth?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/342#issuecomment-30251496\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. The script looks cool as well, but I don't like that it starts out positive\n($passed=$true) and only gets set $false if it finds issues. Usually I\nassume failure unless the scenario tells me otherwise.\nOn Tue, Dec 10, 2013 at 1:56 PM, Gary Ewan Park notifications@github.comwrote:\n\nside note... @mwrock https://github.com/mwrock wrt to that script\nblock, which looks amazing, do those names assume that a Hyper-V VM exists\nwith that name? If it is not there, what does it do? I think you mentioned\nbefore that the VM would be created, but how does it know which iso to use\nwhen creating it?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/342#issuecomment-30261960\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. The plan is to start adding more moderators this year for fun stuff like\nthis.\nOn Wed, Apr 16, 2014 at 5:42 PM, Sander notifications@github.com wrote:\n\nConcerning the packages that are similar because owners don't respond and\nsomeone else decides to upload a newer version under a different name:\nMaybe there should be a small group of moderators with the power to take\nover packages, remove the install script, add a dependency to the new\npackage, or add the new package owner to the old package (to keep the\nsensible name).\nI wanted to install Visual Studio for someone the other day, and there are\nlike 40 packages. No idea which one I need. Maybe it's a bad example, but I\nhad something like this before with some SQL implementation, and I remember\nhaving to compare versions, and guess which one I should install.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/342?utm_campaign=website&utm_source=sendgrid.com&utm_medium=email#issuecomment-40661480\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. It is possible to do so with myget (copy them anyway)\n. There is an easier fix, which is package moderation. Reject anything that doesn't meet the guidelines. Then like all of us are thinking, build it back into choco.exe during packaging and onto the server as package inspection rules to automatically reject packages that are not up to snuff.\n. :)\n. > And as I said before, a poor solution in practice is infinitely better than a perfect solution in theory.\nI've said something very similar to this many a time. :+1: \nA working solution is always better than a perfect solution that is not ready. (I mean, just look at chocolatey itself as an example of this in practice :/)\n. @rismoney The working implementation of chocolatey vPosh is a working solution, nowhere near perfect. I mean just look at all the issues, man! :)\nThe really good solution of chocolatey vNative Exe is going to be worlds closer to stable.\n. PLease let me know if this is true of the prerelease... \ncup chocolatey -pre\nWe've added better support for exit codes and that will be released soon.\n. Interesting, so did the first command return or just sit there?\n. Looking at this again, I wonder if there are some missing path items as you are going to cmd from bash. By the way, install the prerelease and you should be able to stay in bash and run chocolatey commands.\n. Correct me if I'm wrong but the OP is asking for this requirement when\nspecifying a package to install (user use case), not when taking a\ndependency on another package (creator use case).\nOn Thursday, October 24, 2013, Steve E wrote:\n\nIs there any reason for the install of the package manually versus relying\non the NuSpec dependencies? If you listed the package as a dependency with\na constraint on the version I would think it should fit the need. It's\npossible by having the dependencies node look something like this:\n<dependencies>\n        <dependency id=\"ruby\" version=\"[1, 2)\" />\n    </dependencies>\nThis means that you require Ruby >= 1 and < 2 (so all updates and minor\npatches up until, and not including, version 2).\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/346#issuecomment-27014735\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. @jberezanski I think that would work fine but would need some testing - if someone had a meta package installed named resharper7.x that took a dependency on resharper, it may keep it at 7, but it may not... worth some testing in the new codebase.\n. This is completed\n. Yes, just mention that it contains code from the other, which I believe you\ndid.\nOn Saturday, October 12, 2013, Rich Siegel wrote:\n\n@ferventcoder https://github.com/ferventcoder - is this alright for me\nto do? I rebased and branched #273https://github.com/chocolatey/chocolatey/pull/273but preserved the authorship...\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/348#issuecomment-26198265\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. What Gary said... :)\nOn Sunday, October 13, 2013, Glenn Block wrote:\n\nOK Gary, I'll test that out, thanks!\nOn Sun, Oct 13, 2013 at 5:09 PM, Gary Ewan Park >wrote:\n\nHello,\nAre you running the pre release version of chocolatey? I believe that\nthis\nis taken care of already.\nTry cup chocolatey -pre to try out the new bits.\nGary\nSent from my Windows Phone\n\nFrom: Glenn Block>\nSent: 13/10/2013 23:38\nTo: chocolatey/chocolatey>\nSubject: [chocolatey] Remove the reopen the terminal when installing\n(#350)\nCurrently whenever I install with chocolatey I need to reopen my\nterminal\nwindows, as it adds a new variable to the path.\nnpm doesn't require this as it has a central folder which is in the path\nwhich cmd files are added to for each global module. uninstalling\nremoves\nthe cmd from that location.\nthe cmd in this case would change to the directory where the chocolatey\napp is installed and run it passing in any args.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/issues/350\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/chocolatey/chocolatey/issues/350#issuecomment-26230388>\n.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/350#issuecomment-26231058\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Old one that is fixed. This may have been fixed already...\n. It's unfortunately the way powershell works. You can force powershell to acknowledge quotes with `\"\n. This could also be considered a bug as well.\n. I'm not sure if this is still an issue on new choco or not.\n. I think while the two things being discussed are related, they are slightly different. The related part is surrounding OS and dependencies. The part that is different is that one decides whether the package should be installed or not and the other decides what specifically would be installed per OS.\nAm I catching the differences appropriately?\n. The check that @mwrock does for the existence of the framework should be done in a separate package named solely for .net framework 3.5. I think we can agree on that. \nWe can either go - \"Packages - its packages all the way down.\" or build in dependency types that are not necessarily package related. \n. This seems to duplicate #172 \n. @grv87 if you are using configuration managers sure. :)\n. Let's start by posting to the email list and not the issues list. :) \nhttp://groups.google.com/group/chocolatey\n. Like it\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\nOn Sat, Oct 26, 2013 at 12:09 PM, TomOne notifications@github.com wrote:\n\nAwesome [image: :+1:]\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/355#issuecomment-27150636\n.\n. Moderation will fix quite a bit of the issues as long as moderators are all\non the same page. I'll need a nice team of folks who can help with the\nduties of package moderation.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\nOn Sat, Oct 26, 2013 at 3:44 PM, TomOne notifications@github.com wrote:\n\n@Redsandro https://github.com/Redsandro, actually only .portable and\n.install are official suffixes. The are essential to understand what the\npackage contains. I suggested them a few months ago and they were accepted.\nThe other suffixes are deprecated, but obviously older packages still use\nthem. And there are still folks which ignore the rules and guidelines in\nthe wiki and use the deprecated suffixes. This problem will never be solved\nuntil chocolatey packages get inspected by moderators before they get\npublished.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/355#issuecomment-27155409\n.\n. The thought here is that if there were two parts available, an archive and\nthe full installer, you would create three packages. So firefox,\nfirefox.install and firefox.portable. Firefox would point to\nfirefox.install.\n\nIn the future firefox becomes a kind of virtual package so that folks can\ntake dependencies on firefox and either the .install or the .portable would\nfulfill this requirement.\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\nOn Sat, Oct 26, 2013 at 3:53 PM, Redsandro notifications@github.com wrote:\n\n@TomOne https://github.com/TomOne Isn't .install the default/obvious\nway to go? I understand .portable but appending .install to pretty much\nevery package is pretty silly in my golden opinion.\nI discovered Chocolatey when googling apt-get for windows. apt-get is\nintuitive. Both apt-get and cinst can do cinst firefox freefilesync\nlibreoffice now.\nBut do I understand you correctly that this would be cinst\nfirefox.install freefilesync.install libreoffice.install in the future?\nThat would be kinda retarded.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/355#issuecomment-27155583\n.\n. yeah, I'm down with that.\n. This is interesting, but not something we are currently focusing on.\nSomeone could come up with a set of extensions that would enhance\nchocolatey to do this. Or it could be a possible direction in the future\n(after v1 and likely after v2).\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\nOn Sat, Oct 26, 2013 at 1:51 PM, Gary Ewan Park notifications@github.comwrote:\n\nHey,\nFor development purposes, there is a PowerShell script which allows you to\nside load a compiled application, but I don't think that the would work for\napp directly from the store.\nIn the Windows Phone eco system, there is an application that you can\ninstall that will run off and install all applications that you used to\nhave on your phone. This is really useful for installing all apps when you\nget a new phone. Would be interesting to see how this was done, to see if\nsomething similar is possible in Windows 8, and 8.1.\nGiven the sandboxing of applications that Microsoft is trying to achieve,\nI can see that this might be a non starter.\nGary\nSent from my Windows Phone\n\nFrom: Redsandromailto:notifications@github.com\nSent: 26/10/2013 18:26\nTo: chocolatey/chocolateymailto:chocolatey@noreply.github.com\nSubject: [chocolatey] Package/install stuff from the Windows Store (#356)\nMore and more interesting stuff is available for the Metro tile\ninterface for Windows 8 in the Windows Store. For instance Netflix,\nto name a popular one.\nIs it at all possible to install apps from the Windows Store using power\nscript? If so, maybe this should be a template or Chocolatey function.\nI have no clue at all how this works under the hood, but you need to be\nlogged in with your Windows Live ID to be able to install apps. So the\nscript would probably need to check if you are logged in.\nBut, this is of course total bull*, MS just wants to keep track of things.\nApps can run perfectly fine without knowing who is running it. So it would\nbe totally super awesome sweet if we could actually install apps for users\nwithout a Live ID.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/issues/356\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/356#issuecomment-27152930\n.\n. Duplicate of #154\n. WTF on number 2?\n. I see the first one sometimes yes. I am still trying to figure out what causes it.\n. Oh crap...there it is...\n. Well, that's some seriously bad juju.\n. Just removed the beta. Going to have to dig into what is causing it to just exit.\n. https://github.com/chocolatey/chocolatey/commit/b165510f323c202028c12e913e909b0419fef733 This is what caused it.\n. @rismoney will the exit code come all the way out with out the call?\n. exit /b %ERRORLEVEL% should get us the same result?\n. No, call \"chocolatey.cmd\" %*\nWill always return the help text of call when you pass it /? Instead of\npassing the arguments through to the command. Its pretty sh-tty if you ask\nme but its an issue we'll have to get past. Cmd /c works and comes out with\nthe proper exit code.\n\nOn Monday, October 28, 2013, Rich Siegel wrote:\n\nYou suspect L11 in chocolatey cmd as its missing /b?\nExit /b if run inside script shouldn't Close windows...only exit script.\nNot near a pc but I will check out asap\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/358#issuecomment-27269552\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Yeah, I got cmd /c to work properly, so I'm moving forward with that today.\n. @rismoney it doesn't work. I already tried that <- treating it as 1 arg makes it fail with finding the path to chocolatey.cmd /?.\nAh windows...super ~~aweful~~ awesome!\n. Including a link to that SO post would be super helpful. My google fu failed me last night on trying to find it.\n. Cinst chocolatey -version theversionyouwant\nOn Monday, November 4, 2013, Redsandro wrote:\n\nHow can I downgrade to the alpha from august? (latest after the beta was\ntaken down)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/358#issuecomment-27727173\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. This should be resolved in 0.9.8.21+\n. What was the original that this came in?\n. I have not reproduced this yet.\n. Nevermind. This was due to unsupported replacement of the included nuget.exe file.\n. This is a known issue, fixed in the upcoming release.\nhttps://github.com/chocolatey/chocolatey/issues/303\nOn Tuesday, November 5, 2013, Kerem wrote:\n\nC:>cinst sysinternals\nChocolatey (v0.9.8.20) is installing sysinternals and dependencies. By\ninstalling you accept the license for sysinternals and each dependency you\nare installing.\nThe schema version of 'Fody' is incompatible with version 2.1.31022.9038\nof NuGet. Please upgrade NuGet to the latest version from\nhttp://go.microsoft.com/fwlink/?LinkId=213942\nhttp://go.microsoft.com/fwlink/?LinkId=213942.\nHow to update nuget from chocolatey? I already have nuget 2.7.40911.287.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/363\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Duplicates #303 \n. Check out the thread for the workaround\n. Actually I was incorrect. It does wait for the process to finish.\n. cinst chocolatey -version 0.9.8.22-alpha1\n. Even with batched redirect files.\n. If you've installed anything with 0.9.8.21 you might consider reinstalling them with 0.9.8.22.\n. Fixed in a30342c3623647e80ac6f9bd8beaa4e088543548\n. This was fixed, but with the newer location in the search path it appears broken again. So #510 has been added to address the fixes.\n. @Redsandro sorry for not catching you on this here - shims are exe files which simply act to pass through information.\n. Yeah, sorry I meant to put a note back in here when I released the alpha. What Gary said.\n. @mlt This is interesting. It should not be the case. It should be the same amount of quotation as normal from command line calls to sumatra. What do you need for that from your shell and what are you seeing that you need when you call the shimgen version? \n. Well that is definitely incorrect behavior. Let's get to the bottom of\nthis. Can you tell me what your output is when you type\nwhere sumatrapdf\nOn Thursday, March 13, 2014, Mikhail Titov notifications@github.com wrote:\n\nI feel like it removes one quotation level. For instance, I'd call real\nSumatraPDF \"some file.pdf\" however I have to SumatraPDF \"\"\"some file.pdf\"\"\"\nwith shim when running, e.g., from Far file manager in either case. It\nshould be similar to regular cmd.exe . I guess \"\" is treated as a single\nquote when passed down. I noticed that something is not right when pdf\nassociation quit working in my Emacs Org mode setup with Chocolatey version\nof Sumatra.\n\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/372#issuecomment-37603055\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. My wording in the first comment didn't make a whole lot of sense. I think you answered correctly though.\n. @mlt I'm thinking you may have Emacs looking for SumatraPDF before SumatraPDF.exe, which could cause the need for double quotation. A simple where/which query where sumatrapdf could prove this out followed by SumatraPDF.exe \"one set.pdf\". Can you provide those things?\n. @mlt I see it stripping off quotes. Let me see what I can do.\n. Right, but we need it to work in almost all cases. How will we be able to detect that it works without actually running the application in some controlled state and seeing if it errors due to an unfound library? That's why we're moving to a shim. Still provides really good functionality over batches with minimal issue.\n. @mlt we still support windows 2003 (and so does MS until 7/14/2015).\n. @georgehemmings This is done based on the call in the Win32 API, meaning Windows strips them out (http://stackoverflow.com/questions/9287812/backslash-and-quote-in-command-line-arguments & http://weblogs.asp.net/jgalloway/archive/2006/09/13/Command-Line-Confusion.aspx) - What I'll need to do is likely detect spaces and strap on quotes when found. Or just add quotes every time around arguments.\n. @mlt thanks for pointing out the console window appears. I think I have fixed that (but not yet released).\n. @mlt I have the spaces issue fixed. Should be a call like normal to that once you see the next beta/release go out.\n. This should be ready to go.\n. That's a really pretty image. :)\n. I am going to pull in #376 though.\n. cinst chocolatey -pre for most of the cool things I just did this weekend.\n. Not really a fan of 3 lines of output over the original 1 line. If there is a want for a reduction in output, there should be a nice middle point where we make the output nicer but also don't trade one line for three. Thoughts?\n. Okay, the example output you wanted to see helped sell it. Sometimes it's the visual that does the selling. :)\n. Found a bit cleaner method on this, so closing this.\n. Already out\nOn Sunday, March 2, 2014, Sander notifications@github.com wrote:\n\nCool. Will there be a preview this month?\nOn Mar 2, 2014 10:27 PM, \"Rob Reynolds\" notifications@github.com\u0002amp\u0003#106;\u0002amp\u0003#97;\u0002amp\u0003#118;\u0002amp\u0003#97;\u0002amp\u0003#115;\u0002amp\u0003#99;\u0002amp\u0003#114;\u0002amp\u0003#105;\u0002amp\u0003#112;\u0002amp\u0003#116;\u0002amp\u0003#58;\u0002amp\u0003#95;\u0002amp\u0003#101;\u0002amp\u0003#40;\u0002amp\u0003#37;\u0002amp\u0003#55;\u0002amp\u0003#66;\u0002amp\u0003#37;\u0002amp\u0003#55;\u0002amp\u0003#68;\u0002amp\u0003#44;\u0002amp\u0003#39;\u0002amp\u0003#99;\u0002amp\u0003#118;\u0002amp\u0003#109;\u0002amp\u0003#108;\u0002amp\u0003#39;\u0002amp\u0003#44;\u0002amp\u0003#39;\u0002amp\u0003#110;\u0002amp\u0003#111;\u0002amp\u0003#116;\u0002amp\u0003#105;\u0002amp\u0003#102;\u0002amp\u0003#105;\u0002amp\u0003#99;\u0002amp\u0003#97;\u0002amp\u0003#116;\u0002amp\u0003#105;\u0002amp\u0003#111;\u0002amp\u0003#110;\u0002amp\u0003#115;\u0002amp\u0003#64;\u0002amp\u0003#103;\u0002amp\u0003#105;\u0002amp\u0003#116;\u0002amp\u0003#104;\u0002amp\u0003#117;\u0002amp\u0003#98;\u0002amp\u0003#46;\u0002amp\u0003#99;\u0002amp\u0003#111;\u0002amp\u0003#109;\u0002amp\u0003#39;\u0002amp\u0003#41;\u0002amp\u0003#59;\nwrote:\n\nFound a bit cleaner method on this, so closing this.\n\nReply to this email directly or view it on GitHub<\nhttps://github.com/chocolatey/chocolatey/pull/375#issuecomment-36467621>\n.\n\n\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/375#issuecomment-36467693\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. That last couple of lines looks somewhat like Yum report summary.\n. The only thing I would change with the new output might be to list the\nfailed pkg names so one would nit have to crack open a log file just to\nfigure out what did not install.\nOn Saturday, December 21, 2013, Gary Ewan Park wrote:\n\nBy the way, I really like the suggestion for the new, trimmed, output.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/376#issuecomment-31072941\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. What do you think of this format?\n\nI had a good example to read while working on this. ;)\n. Right. :)\nColor is used on debug, error and warnings but haven't added colorization\nand bolding in the same info quite yet, but I have an idea how I can do it\nelegantly. Not yet sure if I can bold parts of a line and leave other parts\nnormal.\nOn Friday, April 18, 2014, Sander notifications@github.com wrote:\n\nTextually this is pretty awesome! [image: :thumbsup:]\nHowever, the color doesn't really add anything. And the text can be more\n80-friendly. So please allow me to comment on that:\n1. Using all the same color has no visual benefit. Alternate between\n   key information and verbose information (and successful information and\n   error information) with color and weight.\n2. Take care of the default console width, you don't want a sentence\n   wrap it's last two characters to the next line.\n   - Preferably, you don't want to wrap at all. You don't really have\n     to be polite and say please to the user when you can say it in one line. :)\nMockup:\n[image: image]https://cloud.githubusercontent.com/assets/1702193/2741881/b860a346-c6f6-11e3-93e9-f80cc86c0488.png\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/376#issuecomment-40806257\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Who said anything about powershell? You mught look at the image I pasted a\nleeetle more closely... ;)\nOn Friday, April 18, 2014, Sander notifications@github.com wrote:\n\nAh I already made a two-package mockup, shame to throw it away. So I'll\npaste it anyway.\nBut sounds cool. I'm not sure about anything PowerShell either, but it is\nsupported in Unix escape codes and I used to do that for curses text\noutput in python scripts for Linux. They could be run on Windows too, and\nit just displayed the bold text in the console. I have no idea if cursesdoes that or if the console just supports that natively.\n[image: image]https://cloud.githubusercontent.com/assets/1702193/2741972/b80c492e-c6f9-11e3-8f00-92fc3e1e0326.png\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/376#issuecomment-40806963\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Well I've only been talking about it since late 2011, ask @jeremydmiller.\n. A little better: \n\n. Roughly less than a month.\n. I added some messages to the end so you can see all the different logging:\n\nAlso with debugging:\n\n. And I forgot verbose, so here you go: \n\nBy the way, this is what that last set of code looks like (super clean, IMO):\nc#\nthis.Log().Debug(\"This is a normal debug message.\");\nthis.Log().Debug(ChocolateyLoggers.Important, \"This is an important debug message.\");\nthis.Log().Info(\"This is a normal message.\");\nthis.Log().Info(ChocolateyLoggers.Important, \"This is an important message.\");\nthis.Log().Warn(\"This is a normal warning.\");\nthis.Log().Warn(ChocolateyLoggers.Important, \"This is an important warning.\");\nthis.Log().Error(\"This is a normal error.\");\nthis.Log().Error(ChocolateyLoggers.Important, \"This is an important error.\");\nthis.Log().Fatal(\"This is a normal catastrophic error.\");\nthis.Log().Fatal(ChocolateyLoggers.Important, \"This is an important catastrophic error.\");\nthis.Log().Info(ChocolateyLoggers.Verbose, \"This is a verbose logging statement.\");\n. I added the code because I'm removing those lines now... ;)\n. Help system updates:\n\n. Of course I can update that a bit now that I have the better logging constructs in.\n. Module as well... First step is this\nOn Friday, April 18, 2014, Jakub Berezanski notifications@github.com\nwrote:\n\nThe new output formatting looks really nice, much more readable than\ncurrent Chocolatey output. But the fact that it comes from the new binary\nimplementation is even better news :)\nDo you plan on providing only an exe, or perhaps a PowerShell module as\nwell? Personally, I find it very convenient to be able to invoke\nchocolatey.ps1 directly from a PS script without paying the overhead of\nspawning a new process. PS cmdlets could also return objects as their\noutput, making processing that output in scripts much easier and more\nreliable.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/376#issuecomment-40826809\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. C#. Did I mention I'm also testing this on OSX?\nOn Friday, April 18, 2014, Sander notifications@github.com wrote:\n\nReally cool. What language is that?\n(those lines you removed) :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/376#issuecomment-40830631\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. It's more for system admins who want to build and push pkgs and not have to\nfire up a windows box. Push to their private pkg repos that is\nOn Friday, April 18, 2014, Sander notifications@github.com wrote:\n\nThat's probably cool but not something that will get me excited.\nNow we're going to get all these hipster packages polluting the feed.\nBesides, OSX is totally different in every way, how would that work?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/376#issuecomment-40851808\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Well how about this summer sometime?  .......Things always take longer than you hope.\n. Thanks google. :/\n. I should test this and possible pull it in. Do you know if that requires .net framework 4 or 4.5?\n. Note the fix of the double install folks.\n. If you call an installer, it will generate the ignore file automatically. That's where this was failing, when it tries to create one in a readonly share or something based on how this is being used.\n. The only time that a batch redirect would be created is if it doesn't get called during the chocolatey install process (which generates the ignore file)\n. choco list -localonly\nchoco list -lo\nThose are the fast ones. \nAlso just choco now outputs the version.\n. Thanks!\nOn Wednesday, November 27, 2013, Arca Artem wrote:\n\nCurrent implementation expands provided arguments and passes it as a\nsingle argument to the executable.\nYou can merge this Pull Request by running\ngit pull https://github.com/ArcaArtem/chocolatey master\nOr view, comment on, or merge it at:\nhttps://github.com/chocolatey/chocolatey/pull/383\nCommit Summary\n- Fix for multiple argument expansion under bash\nFile Changes\n- M src/functions/Generate-BinFile.ps1https://github.com/chocolatey/chocolatey/pull/383/files#diff-0(4)\nPatch Links:\n- https://github.com/chocolatey/chocolatey/pull/383.patch\n- https://github.com/chocolatey/chocolatey/pull/383.diff\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. @geraldcombs we can probably do something like that as well.\n. Fixed both items at b0e5fe6354254a926cf0c2b883c03e7f6160ebfe\n. This may or may not have been fixed in source... Thanks for adding the issue though.\n. so if you call C:\\Chocolatey\\chocolateyinstall\\nuget.exe pack .\\vifm\\vifm.nuspec -NoPackageAnalysis directly, what exit code do you get?\n. Awesome. If you want to take that a step further and provide the fix in a pull request with the tests to prove it, it gets pulled in quite a bit quicker. Also review the contributing guide https://github.com/chocolatey/chocolatey/blob/master/CONTRIBUTING.md\n. I would also need to look into why we commented that out.\n. Going back in time here....:\nhttps://github.com/chocolatey/chocolatey/blob/5525103c3269d9a5abf1e4c795fc057707fdcc6f/src/chocolatey.ps1#L547 and then blame leads to https://github.com/chocolatey/chocolatey/commit/317ffed2163ed49a63107c9542b73f1854f83f46#diff-11f8e3cf38099e79da8cf4d78b2edb4dR553 - it looks like it has been there since the beginning and it's beyond me why I did that at the time (other than nuget ALWAYS returning a bad exit code at that version). So with some testing it might be an okay change to make.\n. @codearoo Ha, looks like we hijacked this thread. I didn't even pay attention to what the main issue was that was reported.\n. I believe this is now fixed\n. try 'whoami && whoami' and from cmd.exe to see if it works, then follow up\nwith powershell. I don't expect it to work at all in a bash shell since it\nhas been stripping all single and double quotes. Note the docs did change\nto say to stop using double quotes and to just use single quotes as double\nquotes don't work very well in powershell.\nOn Wednesday, November 27, 2013, Jacob Krall wrote:\n\nb11af99https://github.com/chocolatey/chocolatey/commit/b11af99077a19a54ab006d82eebeea06d0ea76d4breaks any strings containing the character\n&:\nPS> plink -pw vagrant vagrant@192.168.137.193  \"whoami && whoami\"vagrantporos\\jacob\nNote that whoami ran on the remote host once, and on the local machine\nonce, because the string \"whoami && whoami\" is not making it all the way\nto plink.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/385\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Apologies, I did ask what would happen in the call from cmd.exe trying to\nisolate whether this is a powershell issue with the batch redirects or not.\nPowershell tends to strip off double quotes from calls, I've got about 10+\nhours testing this recently. Most calls were related to calling choco but\nthe stripping was already done by the time it hit the batch redirect.\nWith single quotes I was not seeing this behavior. Perhaps this is related\nto the environment I was testing this in, but there are some articles out\nthere that talk about how powershell does interesting stuff with quotes in\ngeneral and how you should use ` in front of them in calls to things so\nthat they are used literally and not stripped off.\nOn Wednesday, November 27, 2013, Jacob Krall wrote:\n\nplink -pw vagrant vagrant@192.168.137.193  'whoami && whoami'vagrantporos\\jacob\nSame results, because the strings \"whoami && whoami\" and 'whoami &&\nwhoami' are identical in PowerShell. I'm not sure what \"double quotes\ndon't work very well in powershell\" means - they work exactly as they were\ndesigned.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/385#issuecomment-29424953\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Also the next version deprecates the batch redirects in favor of shim exes\nfor better cross shell support.\nOn Wednesday, November 27, 2013, Rob Reynolds wrote:\n\nApologies, I did ask what would happen in the call from cmd.exe trying to\nisolate whether this is a powershell issue with the batch redirects or not.\nPowershell tends to strip off double quotes from calls, I've got about 10+\nhours testing this recently. Most calls were related to calling choco but\nthe stripping was already done by the time it hit the batch redirect.\nWith single quotes I was not seeing this behavior. Perhaps this is related\nto the environment I was testing this in, but there are some articles out\nthere that talk about how powershell does interesting stuff with quotes in\ngeneral and how you should use ` in front of them in calls to things so\nthat they are used literally and not stripped off.\nOn Wednesday, November 27, 2013, Jacob Krall wrote:\n\nplink -pw vagrant vagrant@192.168.137.193 'whoami && whoami'vagrantporos\\jacob\nSame results, because the strings \"whoami && whoami\" and 'whoami &&\nwhoami' are identical in PowerShell. I'm not sure what \"double quotes\ndon't work very well in powershell\" means - they work exactly as they were\ndesigned.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/385#issuecomment-29424953\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. It will be out this week. Just finishing up the cleanup of the batch redirects during update...\n. Tgere is a closed bug on this. What version of choco and can you run debug?\nOn Tuesday, December 3, 2013, Christian Watteng\u00e5rd wrote:\n\nI've been getting this error on a few packages lately.\nI have tried to search the issues for this bug but I havent found\nanything.\nWrite-Error : pdftk did not finish successfully. Boo to the chocolatey gods!\n[ERROR] Cannot bind argument to parameter 'Path' because it is an empty string.\nAt C:\\Chocolatey\\chocolateyinstall\\helpers\\functions\\Write-ChocolateyFailure.ps1:30 char:2\n-     Write-Error $errorMessage\n-     ~~~~~~~~~~~~~~~~~~~~~~~~~\n  - CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n  - FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nWrite-Error : Package 'pdftk v1.44' did not install successfully: Cannot bind argument to parameter 'Path' because it i s an empty string.\nAt C:\\Chocolatey\\chocolateyinstall\\functions\\Chocolatey-NuGet.ps1:90 char:17\n-                 Write-Error \"Package `'$installedPackageName v$installedPackageV ...\n- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  - CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n  - FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/386\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. This has almost the exact same title as #371 ;)\n. Use -debug as well when you report issues. :)\nOn Wed, Dec 4, 2013 at 3:58 AM, Jeroen Verhoeven\nnotifications@github.comwrote:\n\nI'm trying to cinst KickAssVim on my work PC and am having trouble doing\nthat. The install bails with a write error. And I'm not sure what the path\nis where the write error occurs.\nHere is the output:\nC:\\Users\\jverhoeven>cinst KickAssVim -force\nChocolatey (v0.9.8.23) is installing 'KickAssVim' and dependencies. By\ninstallin\ng you accept the license for 'KickAssVim' and each dependency you are\ninstalling\n.\n__ KickAssVim v7.3.0.07 ____\nWrite-Error : Package 'KickAssVim v7.3.0.07' did not install successfully:\nExce\nption calling \"GetFolder\" with \"1\" argument(s): \"Exception from HRESULT:\n0x800A\n004C (CTL_E_PATHNOTFOUND)\"\nAt C:\\Chocolatey\\chocolateyinstall\\functions\\Chocolatey-NuGet.ps1:90\nchar:28\n- Write-Error <<<< \"Package '$installedPackageName v$installe\n  dPackageVersion' did not install successfully:\n  $($_.Exception.Message)\"\n  - CategoryInfo : NotSpecified: (:) [Write-Error], WriteErrorExcep\n    tion\n  - FullyQualifiedErrorId :\n    Microsoft.PowerShell.Commands.WriteErrorExceptio n,Write-Error\nFinished installing 'KickAssVim' and dependencies - if errors not shown in\nconso\nle, none detected. Check log for errors if unsure.\nReading environment variables from registry. Please wait... Done.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/387\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. What was the issue?\n. In case there is something to follow up on and fix. :)\n. Sad...that's sad to look at. This happens because you are using the alias which is passing install or update to choco.\nSo what this means is we should either remove all aliases or search for those strings and do replacement. I'm in favor of deprecation of shortcuts.\n. Note that this is the transition phase... it has already begun. :)\n. choco is the ubiquitous term. It beat the rest of the possibilities...\n. The first is not a replace all, it's just a one line change. https://github.com/chocolatey/chocolatey.org/blob/master/chocolatey/Website/Views/Packages/DisplayPackage.cshtml#L98\nThe second is a change to an image. \n. This is a duplicate of #295. However that one has bad naming as compared to this one, so I will close it as a dupe of this.\n. This is really a duplicate of #6 (just FYI).\n. Installs are silent and scriptable, that doesn't mean other actions should also be (by default). That might be where you pass a switch to make it so.\nNote that the uninstall in choco at the moment is very naive, it doesn't do much without help.\nAnd to touch on @TomOne 's suggestion - I have been giving that alot of thought and I think we will move that way. Choco is 100% semver compliant (AKA no real rules for less than v1), so wild changes are still okay while we are working out how it should be for the release.\n. I'm not a fan of that as much as you are not (the nuget cache)....\n. @TomOne I agree. One needs to have a hash in the package so you know that the local is the same as the MD5 hash so you wouldn't have to download it again. Perhaps search and open an issue on this?\n. choco uninstall pkgname --all-versions\n. That's funny, someone else requested the autofocus... perhaps we add a key (it breaks vimium for me until I tab out of it).\n. A key like Alt+S to focus on the search box.\n. It supports package parameters but very naively. It doesn't send a param in\nthe way you would. It doesn't do an inspection of the\nchocolateyInstall.ps1, look and try to map the parameters to the file as it\ncomes into the script.\nWhat you pass to the package should be -params 'key=value;key2=value2'\n. Updated the documentation you referenced to reflect that $env:chocolateyPackageParameters will be a value that will contain these items \n. Right, as you parse the string out, you would convert the key value for the bool to a switch.\n. Was waiting for sysnative to come out.... \n. This looks good. I think we can pull it in just so. Thoughts @mwrock ??\n. New  at #393\n. Awesome! Thank you for doing that. This looks pretty clean and easy to pull\nin.\nOn Thursday, December 19, 2013, Julian Easterling wrote:\n\nRecently while creating a chocolatey package, I ran into an issue where\ntrying to install a windows feature would fail on my 64-bit windows\noperating system with a message saying that I could not use the 32-bit\nversion of DISM to manage features. The reason this was happening was\nbecause of the 32-bit redirection that occurs on a 64-bit operating system.\nI also found an issue (#378https://github.com/chocolatey/chocolatey/issues/378)\nthat seems to be related because either the DISM was not in the path or\nmore likely it was due to the lack of a new line between the closing curly\nbrace and the \"cmd\" and resulted in \"none\" of the code being executed in\nthe elevated shell.\nAfter reading the \"contributing\" document, I implemented the fix in a\nbranch and sent a new pull request.\nYou can merge this Pull Request by running\ngit pull https://github.com/dcjulian29/chocolatey dismIssue32bitOn64bit\nOr view, comment on, or merge it at:\nhttps://github.com/chocolatey/chocolatey/pull/393\nCommit Summary\n- Fixed Issue where the 32-bit DISM will be called on a 64-bit OS when\n  running a 32-bit shell/process\n- Fixed issue 378 where DISM is missing because of a missing newline\n  in the command passed to the elevated shell and by specifying the exact\n  path to the DISM tool instead of relying of the path of the system.\nFile Changes\n- M src/functions/Chocolatey-WindowsFeatures.ps1https://github.com/chocolatey/chocolatey/pull/393/files#diff-0(16)\nPatch Links:\n- https://github.com/chocolatey/chocolatey/pull/393.patch\n- https://github.com/chocolatey/chocolatey/pull/393.diff\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. This looks good for rebasing into stable :+1:\n. Thanks, this has been merged into stable.\n. Some good discussion on #643 \n. Hmmm, and the other one is not as slow?\n. That's interesting (the PS code)\n. Yeah, I think we need to pull this in\n. Yeah, methinks we should do something like this:\nhttps://github.com/ferventcoder/vagrant-windows-puppet/blob/master/boxes/shared/shell/InstallNet4.ps1\nOn Sun, Dec 29, 2013 at 8:45 PM, Matt Wrock notifications@github.comwrote:\n\nAhh. This is because Chocolatey uses th WebPI installer for .net 4 which\nin addition to installing .net 4 also sets up asp.net and there by sets\nup IIS\nChocolatey does not need this. Clients like 2008R2 that do not have .net4\ninstalled do need .Net4 to work with Nuget.exe but nothing more. I think it\nwould be a good idea to replace the webpi installer with the vanilla MSI\ninstall of of 4.0 or 4.5.1 or at least 4.5.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/399#issuecomment-31331486\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. +1 to what Matt said. Prefer more control over what gets installed and more importantly, what doesn't get installed.\n. I'm not sure anyone does....\n. Yes, check out #6 I believe. The uninstall is not done, its still very\nnaive.\nOn Saturday, January 4, 2014, lexxmark wrote:\n\nI added winflexbison package recently and noticed an issue with package\nuninstalling.\nWhen I invoked \"cuninst winflexbison\" command the shell wrappers for\nexecutable files were not deleted.\nHow to reproduce:\n1. Install package \"cinst winflexbison\"\n2. There is new folder in C:\\Chocolatey\\lib\\ and shell and bat wrappers in\nC:\\Chocolatey\\bin\\\n3. Uninstall package \"cuninst winflexbison\"\n4. The winflexbison folder in C:\\Chocolatey\\lib\\ is deleted as expected.\nBut wrappers in C:\\Chocolatey\\bin\\ are still present.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/400\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. It's #6\n. Note my comment about it being naive (aka not fully implemented)\n. This should be fixed as part of 0.9.8.24\n. Thanks. I think we can pull this in.\n. So this is a fluke... I noticed that we had a couple of folks report this on the mailing list as well.\nhttps://groups.google.com/d/msgid/chocolatey/c7f05386-d37b-4e87-89b8-24956857ccb3%40googlegroups.com\n. I'm not sure that your error has the same causation as those from a couple of years ago. The 7za.exe and choco come from https://chocolatey.org now.\n. @jnm2 Can you log this recent issue to choco instead of this repository?\n. What version of chocolatey are you using? \n. What does the following produce?\nchoco sources \nAre you behind a proxy/firewall?\n. @evanw21 many times the problem is getting the install.ps1 downloaded in the first place... then everything after that as well.\n. @youRFate ~~I think your issue is related, but not exactly the same as the original discussion.~~ (Update, I reread and this is the same). Please follow this issue so you know when it is corrected - https://github.com/chocolatey/choco/issues/243\nThanks! \n. Closing this issue as it has moved to choco\n. I would subscribe to that issue so that you receive notifications on it. Thanks!\n. :)\n. Undocumented means unsupported ;) \n. AKA dark features. Actually I think this is probably undocumented b/c it's something we may have missed documenting... :(\n. @AnthonyMastrean Did I miss the PR? \n. I'm going to bump this to the next version while waiting for updates.\n. Migrated to https://github.com/chocolatey/choco/issues/676\n. Binaries like DLLs? \n. And when you say a solution for chocolatey to put things on the %PATH% you mean something like this - https://github.com/chocolatey/chocolatey/wiki/HelpersInstallChocolateyPath ? Or something different?\n. I am a little confused. PSFTP.exe is added to as a batch redirect. I think you might be looking at an older package version?\n. Ah! Understood completely. But you see PSFTP.exe is the shim that is added to c:\\chocolatey\\bin for me. ;)\nHave a look at this feature - https://github.com/chocolatey/chocolatey/issues/372\n. Batch redirects are a POS solution that don't work that well with other shells like cygwin/bash.\n. I was letting another of our group handle the beta release for the new version. Let's find out where @gep13 is on that... \n. Which was the harsh reply? ;)  IOW, no worries. \n. No worries. \n. Might give me a little more time to get the install replacing all of the batch redirects part done so I can close out #372.\n. This is in reference to a recent conversation we had on the mailing list.\nThis is to help folks not have to parse output to find the version.\nOn Sunday, January 26, 2014, Gary Ewan Park notifications@github.com\nwrote:\n\nHello,\nBy executing the following:\nchoco\nYou will get an output similar to the following:\nPlease run chocolatey /? or chocolatey help - chocolatey v0.9.8.23\nFrom which you can get the current installed version of Chocolatey.\nHope that helps!\nGary\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/409#issuecomment-33317958\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. No worries\nOn Mon, Jan 27, 2014 at 1:06 AM, Gary Ewan Park notifications@github.comwrote:\n\nYeah, I saw this:\nhttps://groups.google.com/forum/#!topic/chocolatey/3RJ-9pCGXyA\nAfter I read this enhancement request. I guess I work in a different order\n:-)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/409#issuecomment-33345640\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. No, I don't believe you are. The feature is quite naive. \n. Closing this as dupe of #134 as the feature isn't considered done.\n. Closed as code is merged in\n. That is fixed in vNext which we should have a beta coming out soon for\n. The homepage has an installer link - which directs you to that page. Perhaps the actual issue is not what the subject suggests?\n. Good workaround, but don't depend on it. I think what you noted above should be the default, so :+1: \n. How does this look? \nThis uses limitoutput option (-r) to keep the information relevant. false at the end tells you whether it is pinned or not:\ncmd\nc:\\> choco upgrade all --noop -r\nlinqpad|2.46.09|4.51.03|false\ngrepwin|1.6.1|1.6.6|false\nvim|7.4.27|7.4.560|false\nsumatrapdf.commandline|2.5.2|3.0|false\nnotepadplusplus.install|6.7.3|6.7.4|false\nmingw|4.8.1.20140107|4.8.3.20141208|false\n1password|1.0.9.341|4.1.0.530|false\nnotepadplusplus.commandline|6.7.2|6.7.4|false\nPowerShell|4.0.20140915|4.0.20141001|false\nautohotkey|1.1.16.05|1.1.19.02|false\nwebpicommandline|7.1.40719.0|7.1.50430.0|false\nchocolatey.server|0.1.0|0.1.1|false\nwincommandpaste|1.0.6|1.0.8|false\ngit|1.9.4|1.9.5.20150114|false\njavaruntime|7.0.51|7.0.75|false\ngitextensions|2.47.3|2.48.03|false\nfiddler|2.4.5.3|2.4.9.8|false\nVirtualCloneDrive|5.4.6.20130920|5.4.7.0|false\nChocolateyPackageUpdater|0.6.2.0|0.6.4.0|false\ngit.commandline|1.9.4|1.9.5|false\nTestDriven.Net|3.3.2779|3.5.2830|false\nDotNet3.5|3.5|3.5.20140403|false\nresharper|8.0.2000.2660|9.0.1|false\nyumi|2.0.0.8|2.0.1.5|false\nnotepadplusplus|6.7.3|6.7.4|false\nautohotkey.install|1.1.16.05|1.1.19.02|false\npapercut|2013.6.10.2|2014.11.5|false\npuppet|3.7.0|3.7.4|false\nccleaner|4.17.4808|5.02.5101|false\nkeepass.portable|2.27|2.28|false\nsumatrapdf|2.5.2|3.0|false\npip|1.1.1|1.2.0|false\nruby.devkit|4.5.2.20111231|4.5.2.20120101|false\nboxstarter.chocolatey|1.0.33|2.4.159|false\nautohotkey_l|1.1.11.01|1.1.14.20140119|false\nDotNet4.0|4.0.30319.20130222|4.0.30319.20141222|false\nketarin|1.6.0.434|1.7.1|false\nnodejs|0.10.30|0.10.36|false\nautohotkey.portable|1.1.18.00|1.1.19.02|false\nPester|2.0.2|3.3.5|false\nWindowsLiveWriter|2011.0.0|2012.0.0|false\ndropbox|2.8.4|3.0.5|false\nwebpicmd|7.1.50430.0|7.1.50430.20141001|false\nThis is ONLY the pacakges that have upgrades available by the way.\ncmd\nC:\\> choco list -lo\nChocolatey v0.9.9.0 (this is green, choco heading)\n1password 1.0.9.341\n7zip 9.22.01.20130618\n7zip.commandline 9.20.0.20130618\n7zip.install 9.22.01.20130618\naacgain 1.9.0.2\nAtom 0.146.0\nautohotkey 1.1.16.05\nautohotkey.install 1.1.16.05\nautohotkey.portable 1.1.18.00\nautohotkey_l 1.1.11.01\nbaretail 3.50.0.20120226\nbeyondcompare 3.3.8.16340\nbinroot 0.03\nboxstarter.bootstrapper 1.0.33\nboxstarter.chocolatey 1.0.33\nBoxStarter.Common 1.0.33\nBoxStarter.WinConfig 1.0.33\nccleaner 4.17.4808\nchocolatey 0.9.8.23\nchocolatey.server 0.1.0\nChocolateyGUI 0.11.4\nChocolateyPackageUpdater 0.6.2.0\nclink.portable 0.4.2\nConEmu 13.12.25.0\nConsole2 2.0.148\nDevbox-Common 1.0.2\nDevbox-Common.extension 1.0.1\ndisableuac 0.0.2\nDotNet3.5 3.5\nDotNet4.0 4.0.30319.20130222\nDotNet4.5 4.5.20120822\ndotPeek 1.1.1.33\ndropbox 2.8.4\neasy.install 0.6.11.4\nEthanBrown.ConEmuConfig 0.0.5\nexpresso 3.0.4750\nfiddler 2.4.5.3\ngit 1.9.4\ngit.commandline 1.9.4\ngit.install 1.9.5.20150114\ngitextensions 2.47.3\nGitReleaseNotes 0.5.0\nGnuWin 0.6.3.1\ngooglechrome 28.0.1500.71\ngrepwin 1.6.1\nhg 3.2.3\nilspy 2.1.0.1000\nimagemagick.tool 6.9.0.2\nInstEd 1.5.15.26\niscommandlineapp 1.0.0\njavaruntime 7.0.51\njq 1.0.3\nkdiff3 0.9.97\nkeepass.portable 2.27\nketarin 1.6.0.434\nlaunchy 2.5.0.20140301\nlessmsi 1.1.7\nlinqpad 2.46.09\nlockhunter 3.0.2\nMailViewer 3.1\nmingw 4.8.1.20140107\nmysql 5.6.19\nnodejs 0.10.30\nnodejs.commandline 0.10.30.20140818\nnotepadplusplus 6.7.3\nnotepadplusplus.commandline 6.7.2\nnotepadplusplus.install 6.7.3\nnpm 1.4.9\nNuGet.CommandLine 2.8.2\nNugetPackageExplorer 3.8.0\npaint.net 3.5.11.20130909\npandoc 1.12\npapercut 2013.6.10.2\npeco 0.2.2\nPester 2.0.2\nPhantomJS 1.9.7\npidgin 2.10.7.1\npik 0.3.0\npip 1.1.1\npngoptimizer 2.4\npngoptimizer.commandline 2.4\nposhgit 0.5.0.201401009\nPowerGUI 3.8.0.129\nPowerShell 4.0.20140915\nPreCode.WLW 5.02\npuppet 3.7.0\nputty 0.63\nputty.portable 0.63\npython 2.7.5\nRecuva 1.51.1063\nRegShot 1.9.2\nresharper 8.0.2000.2660\nroundhouse 0.8.5.0\nruby 2.1.5\nruby.devkit 4.5.2.20111231\nruby.portable 2.0.0.48100\nruby2.devkit 4.7.2.2013022402\nscala.portable 2.11.4\nsharpkeys 3.5.0\nSourceCodePro 1.017.1\nstexbar 1.8.4\nSublimeText2 2.0.2.2221\nsumatrapdf 2.5.2\nsumatrapdf.commandline 2.5.2\nsysinternals 2013.12.19.20140121\nTestDriven.Net 3.3.2779\ntoolsroot 0.1.0\nunderscore 1.0.0\nunderscore-compiled 1.0.2\nunderscore-script 1.0.2\nussf 1.5.0\nvcredist2008 9.0.30729.1\nvcredist2010 10.0.40219.1\nvim 7.4.27\nVirtualCloneDrive 5.4.6.20130920\nvlc 2.1.3\nwarmup 0.6.5.1\nwebpicmd 7.1.50430.0\nwebpicommandline 7.1.40719.0\nWget 1.11.4.1\nwincommandpaste 1.0.6\nwindirstat 1.1.2.20140225\nWindowsLiveInstaller 2012.0.0\nWindowsLiveWriter 2011.0.0\nwinflexbison 2.4.1.20140103\nWix35 3.5.2519.20130612\nyumi 2.0.0.8\n127 packages installed.\n. That did just point out a possible bug in new choco install logic. NOTE: It believes chocolatey 0.9.8.23 is installed. :/\n. Pinned, means you \"pin\" to a particular version. It's a way to suppress upgrades...\n. Attempting to upgrade shows the proper version:\n\nIt's there in the package directory:\n\nBut list, not so much. Shows last release version of everything. Anyone want to guess what I forgot to pass? Yes, -pre. Listing what you have installed should include and prefer a prerelease. Otherwise it can get confusing about what version you actually have installed. So it's a bug.\n. https://github.com/chocolatey/choco/issues/46 (and fixed)\n. FYI, the -r option is meant for machines to read, not humans. But at least it's a start for taking something over and piping it to a posh script.\n. I think this is perfect. This is what NuGet should have done and one thing that made me want to start looking else where.  Is .NET 4.0 still supported in NuGet 2.8?\n. @nabheet yes in the nuspec.\n. @AnthonyMastrean NuGet indeed did introduce Dependency Resolution strategy, but they didn't expose it as all in NuGet.exe. Sad but no matter as choco.exe does it just fine. https://github.com/chocolatey/choco\n. I have to agree on logout. I'm not sure quiet is the right answer either.\nWe need something more descriptive yet succinct.\nOn Fri, Feb 7, 2014 at 8:49 AM, Matt Wrock notifications@github.com wrote:\n\nIf you used -Quiet and made the default $false, wouldn't that have the\nsame effect?\n\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/416#issuecomment-34442342\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Quiet/silent imply no output whatsoever.\nOn Monday, February 10, 2014, Johan Leino notifications@github.com wrote:\n\nQuiet or Silent seems to be the defacto standard for silent/quiet\ninstallers...so either one of those will do I think. Comments?\n\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/416#issuecomment-34604268\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Ah guess I wasn't paying attention to this as completey as I should have\nbefore commenting. Yes quiet or silent should be fine.\nOn Monday, February 10, 2014, Matt Wrock notifications@github.com wrote:\n\nYes. I think that is what @jole78 https://github.com/jole78 was\nintending this argument to accomplish and something that I think makes\nsense - completely silence the \"Host\" stream. I'm assuming keeping the\nother streams, output/warning/verbose/error untouched is desired since\nthere are already ways built into the PS syntax to silence or redirect\nthose.\n\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/416#issuecomment-34677935\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. This closes #411\n. Currently rewriting chocolatey in c#, so that may be why the issues looks\nslow. Once that is complete we will start adding features to core again.\nOn Sunday, May 25, 2014, Daniel Gioulakis notifications@github.com wrote:\n\nAre there any plans to address this? -Properties and replacement token\nsupport would be desirable.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/417#issuecomment-44156555\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. why nevermind?\n. So far I like what you are doing here. :)\n. I am loving that you included tests.\n. Autouninstaller used this as influence, but given it was written in c#, I didn't end up bringing this into the posh choco.\n. I would like for folks to be able to set it to c:\\\n. @Redsandro I think I still have intentions for doing something similar to what we talked about on the thread but right now I'm letting Gary run with this. If and when the other thing happens, it will be another repo.\n. Let's start with this clean one. I will pull this into stable soon.\n. Should merge it this week. It is marked for next release. :)\n. Interesting....\n. @ssteward54 as a workaround, if you close and reopen the shell (and maybe reboot :( ) do you still see this behavior?\n. Sorry, not sure where we are with this. Are you waiting on me to pull it in or is there work to do here?\n. okay, right on.\n. I'm going to pull this over into stable.\n. I think some folks might want something like ruby in the c:\\ directory for\nPik (although I think that Pik could be enhanced).\nOn Wed, May 28, 2014 at 1:55 PM, Sander AKA Redsandro \nnotifications@github.com wrote:\n\nDo we also need to address the issue where people now have environment\n$env:ChocolateyBinRoot set to c:\\?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/421#issuecomment-44449706\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. @Redsandro is there a PR for that fix somewhere?\n. No need. Already good - \nCherry picked \n-  d4806255e8d73567a64db0c3a8ad9196a13d226f\n-  cd11749affd02b9445437517b46d49ad25ce7eb5\n. Git, super powerful and very precise. :+1: \n. Thanks for the contributions folks! Much appreciated. :)\nSorry I've been (ahem) slow with the PRs lately.\n. Now that is interesting. The behavior is that it is supposed to move on to the next source but from what I see here that is not the case when the first source errors.\n. Sweet! We need to explore the latest version. Probably in 0.9.8.25 though (or 0.99 if we call it that).\n. This particular issue is at https://github.com/chocolatey/choco/issues/612 (and not necessarily related to what this was originally, because we have an even newer version of NuGet than was suggested earlier in this post).\n@metalseargolid can you perhaps move your comment over to that thread? Thanks! \n. Yes, this is by design. You are telling chocolatey to only use this one\nsource to resolve all packages. When choco runs normally it uses all known\nsources to resolve packages and dependencies, in source order.\nYou can specify multiple sources by separating with a semicolon and\nencapsulating with single quote marks, e.g. 'C:\\somesource;\nhttps://chocolatey.org/api/v2/'.\nThis is noted in the wiki documentation as well, although the format\ndoesn't always make it easy to find.\nYou might try using the mailing list for things like this. Thanks!\nThis closes #423.\nOn Sunday, February 23, 2014, Bill Long notifications@github.com wrote:\n\nLet's say you have a private nuget repository. You create a Chocolatey\npackage called 'foo' which depends on autoit.commandline from the\nchocolatey.org repository. If you add the internal repository as a\nsource, then it's able to resolve the dependency, and the package installs:\nchoco sources add -name PrivateNuget -source https://privatenuget/api/v2\ncinst foo\nHowever, if you do not add the internal repository as a source, and\nspecify -source instead, it fails:\nC:> cinst foo -source https://privatenuget/api/v2\nChocolatey (v0.9.8.23) is installing 'foo' and dependencies. By installing you accept the license for 'foo' and each dependency you are installing.\nUnable to resolve dependency 'autoit.commandline'.\nCommand 'install' failed (sometimes this indicates a partial failure). Additional info/packages: foo\nIt appears that when -source has been specified, it decides to resolve all\ndependencies only against that source. I'm not sure if this is intentional.\n\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/423\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Perhaps we create an issue to update that?\nOn Sun, Feb 23, 2014 at 2:27 PM, Gary Ewan Park notifications@github.comwrote:\n\nThat's the one. From the main https://chocolatey.org/ page, the forum\nlink takes you to the Google Group.\nWe should perhaps update the Contributing.md if this is not clear in there.\n\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/423#issuecomment-35842237\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. This is closed by https://github.com/chocolatey/chocolatey/commit/b2d62b71430baab5a7a9bb6a63986ed2e3ed957e\n. Looks good. \n. It's an alternative to # - GH automatically links it for you.\n. This is complete. Packages need to opt in. Over time the plan is to restrict packages for users to the ones that have included this and users would need to then opt in to \"unsafe\" packages.\n. Also need to be able to sum against sha1 hashes.\n. Adding some additional commits here.\n. https://raw.github.com/ferventcoder/nugetpackages/master/launchy/tools/chocolateyInstall.ps1 thoughts?\n. Now this is good.\n. @rismoney not sure what you are asking...\n. @gep13 Hoping to. :)\n. There we go. Now it should really be closed. ;)\n. Not too late at all.\nOn Monday, March 3, 2014, Jakub Berezanski notifications@github.com wrote:\n\nHow about renaming Get-ChecksumValid to Test-Checksum (or\nTest-FileChecksum)? It would be more consistent with Powershell cmdlet\nnaming conventions and standard cmdlets, such as Test-Path,\nTest-Certificate or Test-Connection.\nOr is it too late for that change...?\n\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/427#issuecomment-36551565\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Would you mind logging that over at https://github.com/chocolatey/chocolatey-package-updater? Thanks.\n. awesome. thanks! \n. That make sense. I think we may be doing that already though.\n. @jberezanski Yup, check out #427. \n. Note that we verify the file downloaded with the checksum whether or not we using the cache - https://github.com/chocolatey/chocolatey/blob/master/src/helpers/functions/Get-ChocolateyWebFile.ps1#L126\n. Ah yeah, perfect use case. Let's get that in there. File an enhancement?\nOn Monday, March 3, 2014, Jakub Berezanski notifications@github.com wrote:\n\nYes, I've seen that line (that's what I meant by \"the checksum test\nlater\"). However, in the scenario I'm thinking about, it would be too late.\nPlease consider the following sequence of events:\n1. the user invokes cinst foo\n2. chocolateyInstall.ps1 of the foo package invokes\n   Get-ChocolateyWebFile to download http://unreliablehost.com/foo.zip\n3. foo.zip does not exist in the cache, so the condition at L85https://github.com/chocolatey/chocolatey/blob/master/src/helpers/functions/Get-ChocolateyWebFile.ps1#L85fails at\n   $fi.Exists\n4. foo.zip is downloaded, but due to unreliable server/network\n   connection/whatever ends up corrupted\n5. the checksum test at L126https://github.com/chocolatey/chocolatey/blob/master/src/helpers/functions/Get-ChocolateyWebFile.ps1#L126catches the corruption and raises an error\n6. installation fails\n7. the user invokes cinst foo again, hoping this time the file will be\n   downloaded correctly\n8. chocolateyInstall.ps1 of the foo package invokes\n   Get-ChocolateyWebFile to download http://unreliablehost.com/foo.zip\n9. foo.zip exists in the cache and has the expected size, so the condition\n   at L85https://github.com/chocolatey/chocolatey/blob/master/src/helpers/functions/Get-ChocolateyWebFile.ps1#L85passes and $needsDownload is set to $false\n10. foo.zip is not downloaded again and remains corrupted\n11. the checksum test at L126https://github.com/chocolatey/chocolatey/blob/master/src/helpers/functions/Get-ChocolateyWebFile.ps1#L126catches the corruption and raises an error\n12. installation fails\nI propose modifying L85https://github.com/chocolatey/chocolatey/blob/master/src/helpers/functions/Get-ChocolateyWebFile.ps1#L85to:\nif ($fi.Exists -and ($fi.Length -eq $headers[\"Content-Length\"]) -and (Get-CheckSumValid -file $fi -checkSum $checksum -checksumType $checksumType))\nThat change would result in failing the condition at step 9 above and\nredownloading the file, hopefully uncorrupted this time.\nWithout that change, the user would need to delete the cached file by hand\n(be familiar with cache directory location and layout etc) to fix the\nbroken download.\n\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/428#issuecomment-36554614\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Well that seems like a bug... Looks like you added that to #421?\n. This is fixed with merging of #421\n. Use choco pack instead if you find collisions. choco command is becoming the ubiquitous usage of chocolatey.\n. @bbenoist Great arguments. We're deprecating most of them. It's quite possible that most if not all will be removed by v1. cinst may stick around for a v2 removal since it is the most widely used and would impact a much larger set of folks.\n. Yes... :)\n. @paulsapps - You should delete c:\\programdata\\chocolatey\\bin\\cpack.exe as a workaround for now. Or you can try to update the path so that cmake's cpack evaluates first on the path.\n. Issue moved to https://github.com/chocolatey/choco/issues/89\n. Ah, good point. Grammar. :)\n. We went with the fix of not allowing c:\\ for now.\n. See cd11749affd02b9445437517b46d49ad25ce7eb5\n. Sounds like a pretty useful feature but will need to come after package\nindexes are implemented.\nOn Wednesday, March 12, 2014, Lawrence Johnston notifications@github.com\nwrote:\n\nIt would be very useful to be able to list packages with available updates.\nMy use case is that I want to have a good idea of what \"cup all\" is going\nto do before I do it.\nPrevious requested here:\nhttps://groups.google.com/forum/#!msg/chocolatey/KC87guFjZWM/gvn4E-wPNR8J\nAnd mentioned in #320https://github.com/chocolatey/chocolatey/issues/320\n.\n\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/435\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Yes, hoping to speed it up a bit as well.\nOn Wednesday, March 12, 2014, Lawrence Johnston notifications@github.com\nwrote:\n\nMakes sense. Meanwhile I found that \"cver all\" will work for the time\nbeing though it takes a while and also lists packages that don't have\nupdates.\n\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/435#issuecomment-37484577\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. @chucker you can also cup all --noop -r\nBut this specific case will be covered with an outdated command - https://github.com/chocolatey/choco/issues/170\n. No this is fine. I do have to say consistency would be nice.\nOn Sunday, March 16, 2014, OlduwanSteve notifications@github.com wrote:\n\nThe output format of the list command is dependent on the source. This has\na knock-on effect in the chocolatey puppet package, which assumes the\nformat is consistent. I came across this issue while trying to use\n'windowsfeatures' as a source.\nI considered raising an issue on the chocolatey-puppet project, but\nactually I think it is reasonable to expect the output of 'list' to be\npredictable (or at least for there to be a predictable list command) and\nfor chocolatey to hide the details of the source implementation.\nI'm happy to take a look at coding this if a decent solution gets agreed.\nI also am happy to move the bug into the puppet provider if that seems more\nappropriate.\n\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/436\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. We've fixed this on chocolatey.org. This is what happens when I go down to spend time with the family and am in a low speed internet area... :(\n. Thanks so much for reporting. The fixes were just deployed.\nhttps://github.com/chocolatey/chocolatey.org/commit/c55db670ee5f68289a268bf8b5d0bbcdf8b6dc54\nhttps://github.com/chocolatey/chocolatey.org/commit/5a11f93af46116179bc248ce57b2f15781ac6714\nI moved off of the dependency of a github download.\n. Was the item you are fixing in stable?\n. Okay, that's fine. We will just pull this into master.\n. You want to send me this against stable branch instead and I will get it into the next version?\n. Closing PR for commit.\n. This is likely related to the issue we had recently: https://twitter.com/chocolateynuget/status/447041006706245636\nAlso #438 \n. I'm closing this as not able to reproduce until we hear back.\n. This is something I want as well, thanks for filing the ticket. We are a ways from having a REPL but eventually I think we want to get there. There are a few more important things we want to cover first (like rewriting chocolatey into something that would support a REPL) and package indexes that would be able to help with getting the list with tab completion.\n. The issue with creating packages is a validation of fields in the nuspec\nthat need to be in http format. You might check those against nuspec\ndocumentation on docs.nuget.org.\nOn Monday, March 24, 2014, Christopher Carpenter notifications@github.com\nwrote:\n\nClosed #443 https://github.com/chocolatey/chocolatey/issues/443.\n\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/443\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. There is some weirdness here. Looks like it is adding a bunch of commits.\n. No worries, this was a pretty tiny change. I went ahead and implemented it in stable\n. Well then that's perfect. :+1: \n. The new version will not do this. It will looks for sysnative and use it instead.\n. @jberezanski Would you rebase this against stable instead? That way I can get it pulled in easier. If not I can make it happen soon.\n. All PRs should be targeted against master. I think we have that listed in contributing? I was just asking because I planned to pull this in and if you wanted to hook it up, it would save me a few moments ;)\n. I don't see a problem with this. Pulling to master.\n. This rebased into stable, so it will be released with next version.\n. So it mentions moving the folder, and updating two environment variables.\nPath and chocolateyinstall. I can post pictures if you need me to.\nOn Thursday, July 3, 2014, Eric Nemchik notifications@github.com wrote:\n\nis there a specific recommendation for how to make this move manually?\n(other than just move the folder?)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/452#issuecomment-47987667\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. :+1: \n. Everything to machine.\n. @jamesgecko would you add that to our wiki? \n. Right now, it's a first gen. I didn't want it to be prompting during installation.\n. Is that file all I would need?\n. Do you think I need one next to any of the files that are exes?\n. great :(\n. I'm guessing this might be an easy fix...hoping.\n. No worries, I like detailed :)\n. Merged in at https://github.com/chocolatey/chocolatey/commit/e2927d6cae116d9966166bbb6c7bc3aac3cc087b\n. If you run those two commands with -debug, what additional details are provided? I suspect there is something in trying to get the list from the source not using credentials.\n. Try this for me, %chocolateyinstall%\\chocolateyinstall\\nuget.exe list -source https://www.myget.org/F/ezetopqatest/\n. If I was to throw out a wild guess, I would say it is this right here: https://github.com/chocolatey/chocolatey/blob/master/src/functions/Chocolatey-InstallAll.ps1#L20\n. That would be fine. We have guidelines in contributing.md (top level of repo)\nOn Mon, Apr 7, 2014 at 3:17 AM, pmcevoy notifications@github.com wrote:\n\nOK, thanks. Not sure what my next step is: do you want me to fix and\nsubmit a PR (the PS should not be a problem, but I need to get a handle on\nthis fandangled git/github thingy)\n\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/456#issuecomment-39705625\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Interesting. I think we need a switch for this as I think it could pose a security issue to blindly apply it everytime.\n. If this is going to get picked up, adjust over to\nhttps://github.com/chocolatey/choco please\nOn Tuesday, January 27, 2015, AnneTheAgile notifications@github.com wrote:\n\n@gep13 https://github.com/gep13 & @Redsandro\nhttps://github.com/Redsandro , ok thank you! I do indeed like this\nidea.\nTo see the merge conflicts, I must pull down Redsandro:docGenerator [1]\nbranch and try to pull in this main master [2], right? And then naturally I\nshould see them. I had thought I should be able to see it here on github\nvisually, but I guess not. That's ok, just wanted not to miss something. Ty\n@Redsandro https://github.com/Redsandro for the ice and nice\nlady/gentleman logo!\nAnneTheAgile\n[1] https://github.com/Redsandro/chocolatey-origin/tree/docGenerator\n[2] https://github.com/chocolatey/chocolatey\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/pull/458#issuecomment-71657326.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. This only happens when called from command shell and not powershell.\n. Fixed in a081b157a9b4325fd9498e32c70639f182df6de6\n. Yes! \n. I knew of this issue. I thought we already had a discussion or this put up as an enhancement/bug (depends on your perspective, I consider it a bug).\n. Pretty sure I fixed this issue by reimporting the module during upgrade. :)\n. Fixed in 54fca9be3223d3bdb1a9a6f3a3b2501411e84abb\n. Can you verify this is not an error in the pkg?\nOn Saturday, April 26, 2014, NJ-Brad notifications@github.com wrote:\n\nI get the following error when I try to install an MSI using\ninstall-chocolateypackage.\nnote: I am calling this in a BoxStarter package\nWrite-Error : Package 'SqlNavigator_IP v1.0.0' did not install\nsuccessfully: Missing closing '}' in statement block.\nAt C:\\Chocolatey\\chocolateyinstall\\functions\\Chocolatey-NuGet.ps1:90\nchar:28\n- Write-Error <<<< \"Package '$installedPackageName\n  v$installedPackageVersion' did not install successfully:\n  $($_.Exception.Message)\"\n  - CategoryInfo : NotSpecified: (:) [Write-Error],\n    WriteErrorException\n  - FullyQualifiedErrorId :\n    Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/462\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Go for it. Thank you.\n. Not a chocolatey bug, please report to the maintainer of the package so they can fix it.\n. Thanks - I think we have this in some other PRs though?\n. My least favorite part about this script is that you had to change it in that many places instead of just one.\nSo we don't take PRs from master branches. Please move the code over to a feature branch and resubmit the PR. \nFor more details, please see our contributing doc - https://github.com/chocolatey/chocolatey/blob/master/CONTRIBUTING.md\nThanks! \n. Supercedes #468 \n. Can you give an example of a use case for this?\nOn Tuesday, May 6, 2014, yannisgu notifications@github.com wrote:\n\nThis Pull Requests add an additional attribute to the package.config named\n\"installArguments\".\nThis attribute basically does the same as you would provide the\n\"installArguments\" paramer\nto the \"chocolatey install\" command.\nYou can merge this Pull Request by running\ngit pull https://github.com/yannisgu/chocolatey installArgumentsPackageConfig\nOr view, comment on, or merge it at:\nhttps://github.com/chocolatey/chocolatey/pull/470\nCommit Summary\n- added functionality to support installArguments in packages.config\nFile Changes\n- M src/functions/Chocolatey-PackagesConfig.ps1https://github.com/chocolatey/chocolatey/pull/470/files#diff-0(4)\n- M tests/unit/Chocolatey-PackagesConfig.tests.ps1https://github.com/chocolatey/chocolatey/pull/470/files#diff-1(48)\nPatch Links:\n- https://github.com/chocolatey/chocolatey/pull/470.patch\n- https://github.com/chocolatey/chocolatey/pull/470.diff\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/470\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. :+1: This is awesome, sorry if I misinterpreted it at first! \n. Thanks! This will be released in 0.9.8.25 (unless we rename it to 0.9.9.0).\n. @thigg - what is the issue you opened? \n. Right, the ruby.devkit doesn't work with ruby 2. You can still install 1.9.3 and 1.8.7 - 1.9.3 is still in active use, 1.8.7 not so much.\n. Oh yeah, that was an issue with 0.9.8.23 and trying to reference something with 7z that doesn't exist #371. It does make sense to remove cinstm and to add ruby there\n. Done... please let me know if you need me to look at anything else. Closing this for now.\n. There, updated. Knowing that you can natively do this now by taking a dependency on something that can do .tar.gz and then doing so in the package like I have shared on Stackoverflow, this is most definitely a feature request and not an issue, since it does work today.\n. I think the current implementation of the helper can be given an optional -type parameter or in the absence of that, looks at the url of the remote file/name of local file to realize the extension and do the right thing. This is part of the ideas behind chocolatey. Do the right thing without a ton of different helpers that are essentially doing the same thing. \nThe difference here is knowing what to do with a tar versus a tar.gz versus a zip versus a 7z. I don't want four helpers, that's wasteful and adds mental context for users.\n. Archive?\n. This is being implemented in https://github.com/chocolatey/choco/issues/386. It's still going to ask for uac permissions - we already use this. Look at Start-processasadmin\n. Agreed all over.\n. You are however using chocolatey in an unsupported scenario. When we prep for a powershell module we will need to do this\n. I believe this is fixed as of 0.9.10.3, further in 0.10.0, and has one outstanding issue to be fixed.\n0.9.10.x\n\nRefresh environment between packages, ensure process variables stay set - https://github.com/chocolatey/choco/issues/439\nIn PowerShell, do not update PSModulePath - https://github.com/chocolatey/choco/issues/295\nEnsure SYSTEM Temp folder - https://github.com/chocolatey/choco/issues/826\n\n0.10.0\n\nCapturing additional PSModulePath process items and making them available for the Internal PowerShell Host - https://github.com/chocolatey/choco/issues/830\n\nFurther fixes for Update-SessionEnvironment\n\nEnsure refresh while running in PowerShell doesn't wipe out variables - https://github.com/chocolatey/choco/issues/129\n. The last one may not be required.\n. Fixes #455 \n. I had to rebase onto stable...\n\nMerged in at https://github.com/chocolatey/chocolatey/commit/e2927d6cae116d9966166bbb6c7bc3aac3cc087b\n. Thanks so much for providing tests as well. Aside from your branch basing off of _env.cmd stuff, this was well done.\n. Well something went wrong on this end, could be that I had to change those commits some on the way in and your changes did not so it looked like different commits.\n. Yes, it did. I think that was due to the different commit hashes\n. @gep13 This looks good to me\n. No need on this one.\n. Always fun to see these errors. It's not there in 0.9.8.24, but another issue is right now.\n. You might see this in 0.9.8.24 final, the reason is that the chocolatey.cmd file is upgraded in place (including all of the other files). The PowerShell files are loaded into memory so they cause no issues with things missing, but it falls back to the new chocolatey.cmd coming out of the posh bits and encounters a variable that was set in the beginning of the new chocolatey.cmd and called there and at that point it doesn't know what it is since it was never set in the original call.\nAnd a long explanation to what that craziness is.\n. There is nothing to fix from here at this time.\n. You killed the process. :)\nWe have a somewhat naive interpretation that things are installed at the moment. That needs to be in a pending status until everything is successful or failed.\nThanks for noting this.\n. Terminology: Nuget marks a package as installed once the folder is there and it is unpacked. \nSince choco relies on nuget to determine installation, not the steps following the package install to install the software, that's where the issue lies.\n. Thank you sir\n. Yes, the cruft in chocolateysetup has been reduced but definitely requires more work. It's nice to see that you are putting in some work in that respect. It's very much appreciated but it does show that we need some mocking or abstraction in some cases here as these tests would actually alter the state of the system/user environment variables. The last time there was something like that in chocolatey it killed out my entire path (that I later rebuilt from a backup). I didn't introduce the tests that did that, but they were fixed in a way where mocking was made easier.\nThis is a good start. I have started conversations in some areas where I'm trying to understand what is going on or where I have specific concerns, especially with the use of test code in the production code. I think even though we explicitly import the helpers during installation, some of that code stands to be changed as well due to another error. I think we can find a smarter way to go about this, perhaps put the mocked code where the real code would have been for tests.\n. That was fun, for future reference git rebase --onto stable master while in the feature branch.\n. This is in locally by the way. I haven't pushed it up yet as I'm verifying it all the way back to win2003\n. Okay, let me back up the commits and set that up.\n. Merged into stable at https://github.com/chocolatey/chocolatey/commit/02eccc940ca6341a094a408244206b13c87eacc1\n. This is implemented by #488 \n. Keep in mind that some of this is on borrowed time as c# choco will ultimately replace this area.\n. Left some comments at https://github.com/chocolatey/chocolatey/commit/9a0af45c12973a6fafe6b28dbc90a6df7db7441c \nI think there are some design decisions here that are a little outside of chocolatey that would need to be fixed up.\n. Also, you can just use (GH-489) at the start of your commits. That is the way most of the commits are done to reference issues.\n. @030 If you submit a PR we can work through changes there. It's much easier to do.\n. Can you do that from the command line with ruby? Or is it just in gemfiles\nand gemspecs?\nOn Thu, Jun 19, 2014 at 2:45 PM, Christian H\u00f6ltje notifications@github.com\nwrote:\n\nIt would be nice to be able to add version constraints instead of a\nspecific version.\nAn example borrowing from Ruby's ~> (aka squid rocket) notation:\nchocolatey install windb -version '~> 8.59.20140318'\nThis would install \"8.59.20140318\" or newer-third-place. e.g.\n8.59.20200101 but not 8.60 or 9.0\nCiao!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/490.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. I'm saying this because you can do version constraints with chocolatey already (not on the command line though).\nhttp://docs.nuget.org/docs/reference/versioning#Specifying_Version_Ranges_in_.nuspec_Files\nThat same range works in package.config files as well.\n. Closing this as already an existing feature (based on the earlier note on version constraints in package files) unless you can show me how to do this on command line at runtime and not in a gemfile. \n. You don't have to worry about them. \nWhat happens is this:\n1. you call chocolatey update chocolatey\n2. chocolatey batch redirect calls chocolatey.cmd.\n3. chocolatey.cmd calls powershell and chocolatey.ps1, which is loaded into memory.\n4. the upgrade process does an in place upgrade/replacement of all the files in the executing directory.\n5. powershell files are upgraded, but powershell is executing from memory so it continues using the old \"files\".\n6. When powershell finishes, it hands it back over to chocolatey.cmd, but it's the newly placed chocolatey.cmd file that contains a new variable that the old one didn't.\n7. The variable is declared way before the step in the execution process we are on, so it evaluates to '' instead of whatever value it should hold.\n8. So when it executes something later related to this variable, it doesn't know what it is, and the rest of the path looks wrong that it is using. %DIR% is the variable btw.\n9. RefreshEnv is still found since it is local to the script and so it is run.\nSo nothing to worry about. I had a special environment set up recently where I discovered all of this fun. I was fixing https://github.com/chocolatey/chocolatey/issues/459\n. Check out https://github.com/chocolatey/chocolatey.org/issues/78\nOn Wednesday, June 25, 2014, Dany Ouellette notifications@github.com\nwrote:\n\nThis is just a small annoyance... I spend a fair amount of time lately on\nthe Chocolatey.org website, and each time I navigate away and come back, I\nhave to login again.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/495.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. This is not a chocolatey issue. I suggest you use the contact maintainers form and or follow through the maintainers to find their chocolatey repository and file the issue there. \nTo help - https://github.com/ferventcoder/chocolateyautomaticpackages.\n. :+1: \n. Looks to be the same version?\n. Closing for now... unless this is an issue with chocolatey.\n. You may want to use the mailing list for questions like this - https://groups.google.com/group/chocolatey\n. and why not use invoke expression?\n. oh wait, nevermind... you are talking about against a remote computer. \n. So let me throw this out there, you have a bunch of computers all in some zone that could potentially reach a common known UNC share somewhere where you could ALREADY have unpacked chocolatey.\nAll that's left is for them to run the rest of the script, which is internal to you anyway.\n. Likely. I should have mentioned this is somewhat a duplicate as well. See https://github.com/chocolatey/chocolatey/issues/136 (similar but not exact).\n. By the way:\n\nThat said, while we have already slightly customized the installer already to 1) ensure we get a system-scoped ChocolateyInstall env variable for all users 2) set a specific installation directory and 3) set a specific URL to serve the installation files\n1. 0.9.8.24 will do this if you are running a process with elevated privileges\n2. You can already do this now if you set the environment variable prior to install - see https://github.com/chocolatey/chocolatey/wiki/Installation#before-you-install\n3. choco sources add name location\n. This looks to be a package issue...\n. If the package is doing something more than it should be and/or not using the helpers, I fully expect those packages to break. And they should b/c they need to stay out of chocolatey's purview. Anything that reaches into chocolatey's internals and uses functions, whatever, that are not in the API will start to break hard once choco.exe comes out.\n. I don't see anything too out of the ordinary going on here though.\n. So it does look like we have an issue\n\n[ERROR] Chocolatey expected a file at \n'C:\\Users\\vagrant\\AppData\\Local\\Temp\\chocolatey\\Firefox\\availableLocales.html' to \nbe of length '' but the length was '107268'.\n. Probably need a more rigid check in there if the content-type is html and a content-length is not found, don't attempt to error.\n. I pushed chocolatey 0.9.8.25-alpha1 - this fixes the issue on my end. Can you verify it also works for you?\nchoco install chocolatey -pre\n. Don't expect a long lead time here. Once we get your other issue figured out, the release cycle should be within a few days - #505 \nThe faster we get to the bottom of that and get a correction, the faster we release.\n. Release cycles generally go really fast when a new release causes gating issues, like this issue. And like the other issue you have reported.\nIssues found that have  workarounds usually tend to be longer release cycles.\n. @TomOne Let's not twist my words around here. I said IF. The intent is if a package is reaching in and using chocolatey's internals, such as internal methods NOT in the public api (Get-ChocolateyWebFile is part of the public api), they will break.  The comment was in general, not necessarily applying to firefox's package. And it doesn't as we realized in a later comment I made that you skipped over.\nLet me give you an example. There are packages looking up the path to c:\\chocolatey\\chocolateyInstall\\Nuget.exe and using it. I've advised the ones I know to not depend on internals as they can and will change.  ScriptCs fixed this - https://github.com/scriptcs/scriptcs/pull/240 (from https://github.com/scriptcs/scriptcs/issues/239).\nOther examples include using any function not in here: https://github.com/chocolatey/chocolatey/blob/master/src/helpers/chocolateyInstaller.psm1#L12\nWhich would include https://github.com/chocolatey/chocolatey/blob/master/src/functions/Generate-BinFile.ps1 and anything in https://github.com/chocolatey/chocolatey/tree/master/src/functions, which believe it or not, folks have done in the past and are still doing now. \nI have to say anytime you use things from any tool that are not part of the public api, you should expect that any upgrade should break your stuff. If you are using the API then it should not break it without a major version change (that's semver). If it does, it's a bug and you should expect me to do as I've done here.\nChocolatey is SemVer compliant - because we are not v1 we can make wild changes. But I try to provide non-breaking changes where possible. Let's not twist these words here. \n. > Are you seriously saying that every package code outside Chocolatey\u2019s API (e.g regular PowerShell code) will start to break once Chocolatey gets rewritten in C#?\nPowershell is not going away. Far from it. Just the internal stuff (internal chocolatey code, not part of the public API) is going away from powershell, so if folks are depending on things they should not (as previously stated), then they are going to have their packages break. Regular powershell is still going to be available as it is a fundamental part of how choco works.\nHope this brings an understanding into what I mean by not reaching into chocolatey's purview (internals and areas of concern).\n. I think this might have to do with something similar to #454 \n. @030 Some real live examples would be good.\n. I'm still confused what kind of service this is installing. Is this not a Windows Service (most of those do NOT require ports)?\n. No need, I was trying to understand how port would keep the service from being started if no port is specified when it is optional.\n. One of these is https://github.com/chocolatey/chocolatey/issues/505. Other known issue was https://github.com/chocolatey/chocolatey/issues/372 (specifically https://github.com/chocolatey/chocolatey/issues/372#issuecomment-37553192 relates to this).\n. Nope, let's call this a bug. \n. Also #509 \n. This seems to only be on GUI applications :(\n. @kevinsawicki I pushed a prerelease package with the fixes. Can you install chocolatey prerelease and then reinstall atom to regenerate the shim? Or have the person who reported the issue do this... :)\nsh\nchoco install chocolatey -pre\nchoco install atom -f\nThen try the issue reported again to see if it also working for you now?\n. @vbsql7 can you post the gist? It could be related to the package, but it may be a bug in choco.\n. This could be the issue of just installing chocolatey and not having that\nvariable set.\nOn Sunday, December 21, 2014, Gary Ewan Park notifications@github.com\nwrote:\n\n@vbsql7 https://github.com/vbsql7 can you confirm what version of\nChocolatey you are using? I have just done the following, using 0.9.8.28\n- Download the nupkg package from\n  https://bitbucket.org/jonforums/uru/downloads/uru.0.7.7.nupkg\n- Saved it to c:\\temp\n- Executed the following command choco install uru -source c:\\temp\n- Installation succeeded successfully\n- I can see a new uru.bat and uru.ps1 file created in the chocolatey\n  bin folder\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/510#issuecomment-67784483\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Backwards compatibility with a nice deprecation message when used. :) Or we just create an alias\n. The alias would be part of this work.\n. We don't need an issue opened for tests when it is part of the rollup of something else.\n. Awesome. Thanks for catching that!\n. It was a tiny change so I just put it on stable and pushed it. Thanks again for catching the issue!\n. That's a package issue and not a chocolatey issue. Please contact the\npackage maintainers through the package page on chocolatey.org\nOn Thursday, July 10, 2014, mawasay notifications@github.com wrote:\n\nAfter installing jdk8. The environment variables JAVA_HOME and PATH are\nset to \"C:/Program Files (x86)/Java\" where as the installation is done in\n\"C:/Program Files/Java\"\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/515.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Is wait-process available in Posh v2? If not we'll need to guard that command.\n. This is merged in at https://github.com/chocolatey/chocolatey/commit/b354494c53714619a5790f7517d0d8b852108f8a\n. This caused a major issue with chocolatey that made me yank the new release shortly after pushing it out. For reference see https://github.com/atom/chocolatey/issues/23#issuecomment-48799362\n. Will need to add some more guards around this...\n. @jberezanski I added a comment noting why we would wait the process.\n. This is a duplicate of #516 \n. It's there in 2.0, but the documentation on MSDN is misleading. Since it is a bug with 3+, I made sure we didn't hit some infinite loop waiting.\n. What bat files?\n. Aka, we don't generate bat files as of 0.9.8.24. You may want to upgrade.\n. Once you do that you can change the heading of this ticket and reopen it ;)\n. Perhaps there is  shimgen depth we can pass?\n. Done\n. It's part of integrating with other systems, like ruby gems, python and webpi. We may only have support for getting things installed.\n. @Apazman Not the same issue. Please create another issue and include debug output.\n. @brettporter I think this might be useful for chocolatey/choco as well.\n. This was implemented as part of https://github.com/chocolatey/choco/issues/14\n. Specifically https://github.com/ferventcoder/choco/commit/10105b300c80a952b3c905f9a298bc8e86199083\n. Perhaps. This should only leave the installer alone if it finds the checksum to be the same, but it could be I introduced something else into the mix fixing what was thought to be an issue.\n. Adding checksums to your package would also be helpful.\n. When you say you cleaned up all the files, do you mean you deleted the %TEMP% files?\n. What is wonky then?\n. Definitely not clear as you said it worked in the end with a file in the temp folder (as I was attempting to clear that up).\nSo did it work in the end or did it fail?\n. Now I understand. Yes, big bug.\n. I think I understand what might be causing this - are pandoc 1.11 and 1.12 installer files the exact same size (get-contentlength)?\n. super big bug then :(\n. Help me out here - I'm trying to reproduce - https://gist.github.com/ferventcoder/d928b61f69d65ac7bd4e\n. Going to have to close this as not reproducible unless we get to the bottom of this. I'll need full debug output to understand what is wrong.\n. That would be super helpful.\n. I tried this with a local package and it appears to work just fine. \n```\nC:> choco install pandoc\nChocolatey (v0.9.8.28-alpha2) is installing 'pandoc' and dependencies. By installing you accept the license for 'pandoc' and each dependency you are installing.\npandoc v1.11.1\nDownloading Pandoc 32 bit\n  from 'https://pandoc.googlecode.com/files/pandoc-1.11.1.msi'\nInstalling Pandoc...\nPandoc has been installed.\nPandoc has finished successfully! The chocolatey gods have answered your request!\nFinished installing 'pandoc' and dependencies - if errors not shown in console, none detected. Check log for errors if unsure. \nC:> choco install pandoc -source c:\\temp\nChocolatey (v0.9.8.28-alpha2) is installing 'pandoc' and dependencies. By installing you accept the license for 'pandoc' and each dependency you are installing.\npandoc v1.12\nDownloading pandoc 32 bit\n  from 'https://github.com/jgm/pandoc/releases/download/1.12.4.2/pandoc-1.12.4.2-1-windows.msi'\nInstalling pandoc...\npandoc has been installed.\npandoc has finished successfully! The chocolatey gods have answered your request!\nFinished installing 'pandoc' and dependencies - if errors not shown in console, none detected. Check log for errors if unsure. \n```\nInterestingly enough, this is weird:\n\n. Could this just be a misunderstanding of -force? If you have a package in chocolateyinstall + lib, force doesn't remove what is already there (yet).\n. Closing as non-repro\n. Likely a bug, but I'm going to need -debug output to know for sure.\nAlso, you should be using single tick marks surrounding, not double double quotes. Powershell doesn't handle those double quotes correctly so instead of \"\"url;url\"\", try ''url;url'' (note that is two single ' marks)\n. Single tick marks, not double tick marks.\n\nPS C:\\Windows\\system32> choco -debug install myPackage -source ''https://www.myget.org/F/xyz/;http://chocolatey.org/api/v2/''\n\nShould be \nPS C:\\Windows\\system32> choco -debug install myPackage -source 'https://www.myget.org/F/xyz/;http://chocolatey.org/api/v2/'\n. Closing as not an issue unless we hear back that the adjustment did not work.\n. Remote execution is not considered supported right now.\n. Is that ALL it takes? whoa\n. Done.\n. Don't know.\n. It appears that it supports a -Version argument but that help menu is the same across all commands. We are rewriting choco in c# and the help menus are very specific.\n. I see what you mean. It is passing the help through to nuget, but choco itself doesn't support a -version option at the current time.\n. It's planned. :)\n. The intent is for you to copy that, not try to type it out yourself. The cmd.exe stuff is especially archaic and I think I've only attempted to type it out by hand maybe twice in 3 years. It's not easy, it's not fun. It's better to copy. :)\n. @tedsanders Ah, good point. Perhaps we teach people how to do that. :)\nRight click -> paste or set quick edit mode (right click is all you need and it pastes for you).\nThen once you have chocolatey installed, you install wincommandpaste and then you can Control+V. :)\n. Weird, I just ran exactly this without error.\n. Hmm. Run the install command like this: choco install atom -debug -force\nand post the output here.\n. Delete whatever is located at 'C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\AtomInstall.zip'\n. The errors you are seeing are not normal. I'm not yet sure what is causing\nit on your system as opposed to others. Can we have you move your install\nlocation to the default programdata to rule out a permissions issue with\nyour current install location?\nOn Saturday, July 26, 2014, Samuel Debruyn notifications@github.com wrote:\n\nSame issue, every install/update seems to fail by the way. I just\ninstalled chocolatey a week ago and all I've done past week is Windows\nStore app development in VS 2013.\nDEBUG: Running 'Append-InstallLog' with chocoInstallLog:''\nDEBUG: Arguments: $command = 'install'|$force=True\n|$prerelease=False|$packageNames='atom'\n|$source=''\n|$version=''|$allVersions=False\n|$overrideArguments=False|$InstallArguments=''\n|$localonly=False|$verbosity=False|$debug=True|$quiet=False\n|$name=''|$ignoreDependencies=False|$forceX86=False\n|$packageParameters=''\n|PowerShellVersion=4.0|OSVersion=6.3.9600.0\nDEBUG: Running 'Chocolatey-Install' for 'atom' with source: '', version: '', installerArguments:''\nDEBUG: Running 'Chocolatey-NuGet' for atom with source:''. Force? True\nChocolatey (v0.9.8.27) is installing 'atom' and dependencies. By installing you accept the license for 'atom' and each dependency you are installing.\nDEBUG: Installing packages to \"C:\\Programs\\chocolatey\\lib\".\nDEBUG: Running 'Run-NuGet' for atom with source: '', version:''\nDEBUG:  NuGet _\nDEBUG: Running 'Get-ConfigValue' with configValue:'useNuGetForSources'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'useNuGetForSources'\nDEBUG: After checking the user config the value of 'useNuGetForSources' is ''\nDEBUG: Value not found in the user config file - checking the global config\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'useNuGetForSources'\nDEBUG: After checking the global config the value of 'useNuGetForSources' is 'false'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'sources'\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'sources'\nDEBUG: Using global sources\nDEBUG: Using '-Source \"https://chocolatey.org/api/v2/;\"' as the source arguments\nDEBUG: Calling 'C:\\Programs\\chocolatey\\chocolateyinstall\\nuget.exe' install atom -OutputDirectory \"C:\\Programs\\chocolatey\\lib\" -Source\n\"https://chocolatey.org/api/v2/;\" -NonInteractive -NoCache\nDEBUG: Installing 'Atom 0.119.0'.\nSuccessfully installed 'Atom 0.119.0'.\nDEBUG: Evaluating NuGet output for line: Installing 'Atom 0.119.0'.\nDEBUG: Evaluating NuGet output for line: Successfully installed 'Atom 0.119.0'.\nDEBUG: NuGet installed Atom. If we are ignoring dependencies (False) then we will clean this up.\nAtom v0.119.0\nDEBUG: Running 'Delete-ExistingErrorLog' for Atom\nDEBUG: Looking for failure log at 'C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\failure.log'\nDEBUG: Running 'Run-ChocolateyPS1' for Atom with packageFolder:'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0', action: 'install'\nDEBUG:    PowerShell install (chocolateyinstall.ps1) \nDEBUG:   Looking for chocolateyinstall.ps1 in folder 'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0'. If chocolateyinstall.ps1 is found, it will be run.\nDEBUG: Action file is 'chocolateyInstall.ps1'\nDEBUG: Running 'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0\\tools\\chocolateyInstall.ps1'\nDEBUG: Running 'Install-ChocolateyZipPackage' for Atom with url:'https://github.com/atom/atom/releases/download/v0.119.0/atom-windows.zip', unzipLocation:\n'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0\\tools', url64bit: 'https://github.com/atom/atom/releases/download/v0.119.0/atom-windows.zip', specificFolder: '',\nchecksum: '', checksumType: '', checksum64: '', checksumType64: ''\nDEBUG: Running 'Get-ChocolateyWebFile' for Atom with url:'https://github.com/atom/atom/releases/download/v0.119.0/atom-windows.zip',\nfileFullPath:'C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\AtomInstall.zip',\nurl64bit:'https://github.com/atom/atom/releases/download/v0.119.0/atom-windows.zip', checksum: '', checksumType: '', checksum64: '', checksumType64: ''\nDEBUG: Running 'Get-ProcessorBits'\nDEBUG: CPU is 64 bit\nDEBUG: Setting url to 'https://github.com/atom/atom/releases/download/v0.119.0/atom-windows.zip' and bitPackage to 64\nDEBUG: Running 'Get-WebHeaders' with url:'https://github.com/atom/atom/releases/download/v0.119.0/atom-windows.zip', userAgent: 'chocolatey command line'\nDEBUG: Setting the UserAgent to 'chocolatey command line'\nDEBUG: Web Headers Received:\nDEBUG:   'x-amz-id-2':'a7vs2MfOdxhyfJjSatcmXkorQAw9AmMtV8gZiSXP/RWy9SvmUUnMOoc50iwZOb6S'\nDEBUG:   'x-amz-request-id':'753744D9E1241FD8'\nDEBUG:   'x-amz-meta-surrogate-control':'max-age=31557600'\nDEBUG:   'x-amz-meta-surrogate-key':'repository-3228505 user-3697332'\nDEBUG:   'Content-Disposition':'attachment; filename=atom-windows.zip'\nDEBUG:   'Accept-Ranges':'bytes'\nDEBUG:   'Content-Length':'65003553'\nDEBUG:   'Cache-Control':'max-age=31557600'\nDEBUG:   'Content-Type':'application/octet-stream'\nDEBUG:   'Date':'Sat, 26 Jul 2014 22:08:46 GMT'\nDEBUG:   'ETag':'\"0ff6f320de113a93bfb361e119bbecbe\"'\nDEBUG:   'Last-Modified':'Fri, 25 Jul 2014 15:58:34 GMT'\nDEBUG:   'Server':'AmazonS3'\nDownloading Atom 64 bit\n  from 'https://github.com/atom/atom/releases/download/v0.119.0/atom-windows.zip'\nDEBUG: Running 'Get-WebFile' for C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\AtomInstall.zip with\nurl:'https://github.com/atom/atom/releases/download/v0.119.0/atom-windows.zip', userAgent: 'chocolatey command line'\nDEBUG: Setting the UserAgent to 'chocolatey command line'\nDEBUG: Checking that 'C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\AtomInstall.zip' is the size we expect it to be.\nDEBUG: Verifying package provided checksum of '' for 'C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\AtomInstall.zip'.\nDEBUG: Running 'Get-CheckSumValid' with file:'C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\AtomInstall.zip', checksum: '', checksumType: ''\nDEBUG: Running 'Get-ChocolateyUnzip' with fileFullPath:'C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\AtomInstall.zip'', destination:\n'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0\\tools', specificFolder: '`, packageName: 'Atom'\nExtracting C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\AtomInstall.zip to C:\\Programs\\chocolatey\\lib\\Atom.0.119.0\\tools...\nDEBUG: wrapping 7za invocation with Write-FileUpdateLog\nDEBUG: Running 'Write-FileUpdateLog' with logFilePath:'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0\\AtomInstall.zip.txt'',\nlocationToMonitor:C:\\Programs\\chocolatey\\lib\\Atom.0.119.0\\tools, Operation: '\n```\nparam($7zip, $destination, $fileFullPath, [ref]$exitCodeRef)\n$process = Start-Process $7zip -ArgumentList \"x -o\"$destination\" -y \"$fileFullPath\"\" -Wait -WindowStyle Hidden -PassThru\nthis is here for specific cases in Posh v3 where -Wait is not honored\ntry { if (!($process.HasExited)) { Wait-Process $process } } catch { }\n$exitCodeRef.Value = $process.ExitCode\n```\n'\nDEBUG: Tracking current state of 'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0\\tools'\nWrite-Error : Atom did not finish successfully. Boo to the chocolatey gods!\n[ERROR] This command cannot be run due to the error: Het systeem kan het opgegeven bestand niet vinden.\nAt C:\\Programs\\chocolatey\\chocolateyinstall\\helpers\\functions\\Write-ChocolateyFailure.ps1:30 char:3\n-   Write-Error $errorMessage\n-   ~~~~~~~~~~~~~~~~~~~~~~~~~\n  - CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n  - FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nDEBUG: Running 'Move-BadInstall' for Atom version: '0.119.0', packageFolder:'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0'\nDEBUG: Moving bad package 'Atom v0.119.0' to 'C:\\Programs\\chocolatey\\lib-bad'.\nWrite-Error : Package 'Atom v0.119.0' did not install successfully: This command cannot be run due to the error: Het systeem kan het opgegeven bestand niet vinde\nn.\nAt C:\\Programs\\chocolatey\\chocolateyinstall\\functions\\Chocolatey-NuGet.ps1:90 char:17\n-                 Write-Error \"Package `'$installedPackageName v$installedPackageV ...\n- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  - CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n  - FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nDEBUG: Evaluating NuGet output for line:\nFinished installing 'atom' and dependencies - if errors not shown in console, none detected. Check log for errors if unsure.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/528#issuecomment-50250036\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. FWIW other folks are not experiencing these issues. Due to not being reproducible, I'd like to understand what it is about your environment that is causing issues. Let me know if you experience these errors in the future when/if you reinstall.\n. think of filetype as installertype :)\n. perhaps a vagrant box?\n. Boo. Would you see this as an issue?\n. It's likely the upgrade from nuget 2.1 to nuget 2.8\n. This is fixed in choco.exe. Everything is happily in abc order again.\n. @Redsandro yeah, it gets fun. You are trying too hard to get to these VMs - you should really use vagrant - see https://github.com/ferventcoder/vagrant-windows-puppet\n. Operation timing out is weird, it shouldn't do that. You might try upgrading chocolatey to the latest version first.\n. depends on the boxes - https://vagrantcloud.com/search?utf8=%E2%9C%93&sort=&provider=&q=windows\n. There is also a vagrant box offered by MSOpenTech. It is like 8GB packed though.\n. 4GB for Windows 2012R2 isn't bad. Mine is 4GB on both vrtualbox and vmware_fusion\n. Back to the issue at hand, what is the output of chocolatey v.27?\n. DEBUG: Running 'Get-WebHeaders' with url:'http://download.gnome.org/binaries/win32/tomboy/1.14/Tomboy-1.14.0.msi', userAgent: 'chocolatey command line'\nDEBUG: Setting the UserAgent to 'chocolatey command line'\nWrite-Error : tomboy did not finish successfully. Boo to the chocolatey gods!\n. Does it time out on HEAD?\n. Upon further investigation, the .net framework is unable to download the file for some reason. It's not just a HEAD request that times out, it's any request.\n. The 302 redirect to HTTPS... \n. Just of note, this doesn't affect PowerShell 3/4 as they use .NET Framework 4.0\n. It's Powershell v2.0 related as it uses .NET framework 2.0/3.5. Whatever issue it was seems to be fixed in newer versions of powershell, but to be sure I'm going to update to posh 3 in my vm and see if it fails.\n. Inspection with fiddler determines that the SSLv3 has a handshake failure - http://social.msdn.microsoft.com/Forums/en-US/5be893c2-b16c-4e2c-ad9a-ab4deb0c8962/ssl-handshake-failure?forum=netfxcompact\n. @Redsandro Posh v2 uses .net framework 2.\n. You are going to love the answer to this... \n. This is a bit naive implementation. What we might want to do is create a short timeout and then move to the fallback when it fails for the remainder of the run.\n. It's b/c the fallback doesn't work on .net framework v2, but it works on v4. If you look at current protocol you will see: Ssl3, Tls\n. Give it a shot - https://chocolatey.org/packages/chocolatey/0.9.8.28-alpha1\n. @Redsandro the undocumented way to get absolute latest:\n@powershell -NoProfile -ExecutionPolicy unrestricted -Command \"iex ((new-object net.webclient).DownloadString('https://chocolatey.org/installabsolutelatest.ps1'))\" && SET PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\nNote https://chocolatey.org/installabsolutelatest.ps1\n. Similar but not the same - you are missing a certificate that is required to allow the installation. https://chocolatey.org/docs/proxy-settings-for-chocolatey#still-having-trust-issues - we'll be moving this to a troubleshooting page.\n. That's simple, you just remove the -lo\n. I pushed this fix. choco install chocolatey -pre.\n. http://stackoverflow.com/questions/25129232/chocolatey-cant-install-git\n. Not missing much important other than a naive implementation ensuring the name of the file.\n. I think this may be covered by another issue...?\n. Migrated to https://github.com/chocolatey/choco/issues/435\n. There is a way to add debugging information to the installer: \n1. Download the package file from https://chocolatey.org/packages/chocolatey/0.9.8.27\n2. Unzip it (treat it as a zip file, it might help to add .zip to the end of the filename).\n3. Start up PowerShell.\n4. Type the following: \nps\nSet-ExecutionPolicy Unrestricted\n$DebugPreference = \"Continue\";\n$env:ChocolateyEnvironmentDebug = 'true'\n1. Navigate to the folder you just unzipped and run\nps\n& tools\\chocolateyInstall.ps1\n. @SpeCter is this the error? \nhttps://github.com/chocolatey/chocolatey/blob/master/src/chocolatey.ps1#L89-L93\n. @SpeCter Under which context did you originally set the executionpolicy?\nTo verify your setting, get-executionpolicy.\nIt may also provide some WTF moments, brought to you by powershell.\n. I don't know a ton about bypass other than it should bypass the current policy (passed as you startup PowerShell).\n. Alternatively, we could stop operation without a special switch\n. The first was added so that the second made sense.\n. @Redsandro It didn't, that is correct. It operated in a totally insecure way and was located in c:\\chocolatey where anyone could have messed with any file at any point. \n. You can install it to somewhere else, we are just making the default more secure.\n. right. In program data it needs a user with admin permissions to do stuff.\n. This is no bueno :(\n. > It also looks like you really don't need to pass in the zip file name because the unzip log file is based on the package name.\nThis change would be considered a possible security issue in implementation.\n. It's probably more so that the uninstall functionality just doesn't work appropriately.\n. @DarwinJS This is already a known issue and also already has a PR to fix it up. I've also added notes on how this would be fixed in the powershell function file related to install-chocolateypath.\n. Let's continue discussion in the actual ticket over on Choco.\n. https://github.com/chocolatey/choco/issues/310\n. Never saw that one before.\nWhat gives with the folder C:\\xampp?\n. Is it possible that this is local to the package and thus a package issue?\n. what version of chocolatey?\n. Can I get full debug output?\n. XAMPP works on your version of Windows yes?\n. As a workaround, you can explicitly add the source at the end to call choco update pkgname -source 'https://chocolatey.org/api/v2/' OR call choco install pkgname\n. And then magically it starts to work again... total WTF\n. What version of chocolatey?\n. Please upgrade to 0.9.8.27 and tell me if the issue still exists?\nEverything past 0.9.8.24 is using the latest nuget.exe.\n. Closing for now, this isn't really something we want in there yet. If this is needed, I'm sure it will come up again in the new choco.\n. This was an issue previously (for about one beta release) when chocolatey was looking at nuget 2.8 output incorrectly. This was almost immediately corrected. Not sure why you are seeing it.\n. But having fiddler open while testing could cause issues. Run it with -debug and pass back the output.\n. That is actually not a bad idea, but I think folks would still have issues if they were set to restricted.\n. This could potentially move over to choco.\n. Went a different way here. Yep, I've been seeing this as well. Seems like something wonky going on with the newly included nuget.exe 2.8.2.\nFYI, I'm also seeing this behavior on nuget.core.\n. Seems like something went wrong with my email reply.... so here goes again:\nOn the mailing list I recently went through what it would take for this package to include npm. Perhaps I'll put some time to it. \nTo reduce confusion though, the chocolatey issues list is reserved for problems/enhancements for chocolatey, not the community maintained packages. Problems with packages should be reported directly to the maintainers. Thanks!\n. Here's the link to that message where I detailed what it would take to include npm - https://groups.google.com/forum/#!msg/chocolatey/IcIkfqEvxtI/zsMvlmhdQm0J\n. So... try the install now. Should also include npm.\n. Attempting this against latest code base\nC:\\code\\mine\\chocolatey-packages\\manual\\poshgit>choco\nPlease run chocolatey /? or chocolatey help - chocolatey v0.9.8.28-alpha2\ncmd.exe:\n```\nC:\\code\\mine\\chocolatey-packages\\manual\\poshgit>cpack -debug\nDEBUG: Running 'Append-InstallLog' with chocoInstallLog:''\nDEBUG: Arguments: $command = 'pack'|$force=False\n|$prerelease=False|$packageNames=''\n|$source=''\n|$version=''|$allVersions=False\n|$overrideArguments=False|$InstallArguments=''\n|$localonly=False|$verbosity=False|$debug=True|$quiet=False\n|$name=''|$ignoreDependencies=False|$forceX86=False\n|$packageParameters=''\n|PowerShellVersion=2.0|OSVersion=6.1.7601.65536\nDEBUG: Current Security Protocol - Ssl3, Tls\nDEBUG: Running 'Chocolatey-Pack' for . If nuspec name is not passed, it will find the nuspec file in the current working directory\nCalling 'C:\\ProgramData\\chocolatey\\chocolateyInstall\\nuget.exe pack  -NoPackageAnalysis -NonInteractive'.\nAttempting to build package from 'poshgit.nuspec'.\nSuccessfully created package 'C:\\code\\mine\\chocolatey-packages\\manual\\poshgit\\poshgit.0.4.0.20120717.nupkg'.\nC:\\code\\mine\\chocolatey-packages\\manual\\poshgit>echo %ERRORLEVEL%\n0\n```\npowershell:\nC:\\code\\mine\\chocolatey-packages\\manual\\poshgit [master]> cpack -debug\nDEBUG: Running 'Append-InstallLog' with chocoInstallLog:''\nDEBUG: Arguments: $command = 'pack'|$force=False\n|$prerelease=False|$packageNames=''\n|$source=''\n|$version=''|$allVersions=False\n|$overrideArguments=False|$InstallArguments=''\n|$localonly=False|$verbosity=False|$debug=True|$quiet=False\n|$name=''|$ignoreDependencies=False|$forceX86=False\n|$packageParameters=''\n|PowerShellVersion=2.0|OSVersion=6.1.7601.65536\nDEBUG: Current Security Protocol - Ssl3, Tls\nDEBUG: Running 'Chocolatey-Pack' for . If nuspec name is not passed, it will find the nuspec file in the current working directory\nCalling 'C:\\ProgramData\\chocolatey\\chocolateyInstall\\nuget.exe pack  -NoPackageAnalysis -NonInteractive'.\nAttempting to build package from 'poshgit.nuspec'.\nSuccessfully created package 'C:\\code\\mine\\chocolatey-packages\\manual\\poshgit\\poshgit.0.4.0.20120717.nupkg'.\nC:\\code\\mine\\chocolatey-packages\\manual\\poshgit [master]> echo $LASTEXITCODE\n0\n. It looks like you have a problem due to this line:\n\nPS X:\\build\\Intelliplan.Svc> cpack\nThe system cannot find the path specified.\n. On a different system with 0.9.8.27 installed:\n\nC:\\code\\mine\\chocolatey-packages\\manual\\poshgit>choco\nSource chocolatey already disabled\nSource chocolateyHttp already exists\nPlease run chocolatey /? or chocolatey help - chocolatey v0.9.8.27\ncmd.exe:\n```\nC:\\code\\mine\\chocolatey-packages\\manual\\poshgit>cpack\nSource chocolatey already disabled\nSource chocolateyHttp already exists\nCalling 'C:\\Documents and Settings\\All Users\\Application Data\\chocolatey\\chocola\nteyinstall\\nuget.exe pack  -NoPackageAnalysis -NonInteractive'.\nAttempting to build package from 'poshgit.nuspec'.\nSuccessfully created package 'C:\\code\\mine\\chocolatey-packages\\manual\\poshgit\\po\nshgit.0.4.0.20120717.nupkg'.\nC:\\code\\mine\\chocolatey-packages\\manual\\poshgit>echo %ERRORLEVEL%\n0\n```\npowershell:\nPS C:\\code\\mine\\chocolatey-packages\\manual\\poshgit> cpack\nSource chocolatey already disabled\nSource chocolateyHttp already exists\nCalling 'C:\\Documents and Settings\\All Users\\Application Data\\chocolatey\\chocola\nteyinstall\\nuget.exe pack  -NoPackageAnalysis -NonInteractive'.\nAttempting to build package from 'poshgit.nuspec'.\nSuccessfully created package 'C:\\code\\mine\\chocolatey-packages\\manual\\poshgit\\po\nshgit.0.4.0.20120717.nupkg'.\nPS C:\\code\\mine\\chocolatey-packages\\manual\\poshgit> echo $LastExitCode\n0\n. > Could it be that cpack gives me an error message at the start of the operation?\nI think that is precisely it, but why are you getting this? Close and reopen your shell once you install.\n. Is it just cpack that spews the message?\nTry this, call choco pack.\n. I need the output of the following commands:\nGet-ItemProperty \"hklm:\\Software\\Microsoft\\Command Processor\"\nGet-ItemProperty \"hklm:\\Software\\Wow6432Node\\Microsoft\\Command Processor\"\nGet-ItemProperty \"hkcu:\\Software\\Microsoft\\Command Processor\"\n&where.exe cpack \ncmd\nI think you have something set to run automatically when you start up the cmd.exe, which is causing your errors.\n. Closing this as an environmental issue until I hear back (as it appears local to your system).\n. @haf About two weeks ago I would not have known to do that either. \n. That should probably be putting ansicon somewhere with less changes.... \n. @carolynvs apologies, somehow this fell of my radar. \n- src/functions are things subject to be completely absorbed into c# and thus not open for API usage.\n- src/helpers/functions are things that are usually part of the published api (that the chocolateyinstaller.psm1 publishes) that folks can depend on being there as a powershell function.\n. This implements #307 \n. @carolynvs I went with a bit of an easier fix for now. It helps with when package maintainers are also not using our defined functions and using $env:TEMP in their scripts. \n. I just pushed 0.9.8.29-beta1 with the functionality in it.\n. Would be nice right? Yeah, we need the client to understand when it can't reach the server... I think it says right now that the site is unreachable in debug output?\n. @Redsandro I know you well enough now to know you almost always are in jest. :)\n\nPS - The :poop: was a joke, not a flame.\n\nShould have said:\nPS - The :poop: was a joke, not a defecation.\n. This is already done in the C# rewrite...\n. - You are on an older version of chocolatey. Please upgrade and see if this is still an issue.\n1. I've never seen that happen before (installing the wrong package). Ever. It could have been an Issue with your source (I've never seen private.feed.ca), which explains a problem. Do you trust that source? \n2. I don't think there is a bug in the matching algorithm, I think it's related to that feed doing something completely wonky.\nPerhaps the client should do a better job with feeds, but the problem here is with the feed doing the wrong thing, not with chocolatey doing the wrong thing. \nLet's update this issue a bit to something more workable regarding the client doing an id match versus what was requested.\n. What I'd need from you is a -debug output and fiddler output.\n. Might want to make sure it is https://plus.google.com/+RobReynolds_FerventCoder/ \n. That's not really a good looking error at all. :-1: \nAny chance you would run with -debug and post output here?\n. Also, this may or may not have to do with a fresh install of the .net framework. It can get finicky after just being installed and sitting on a pending reboot and refuse to cooperate. So it might just need a reboot?\n. Don't have a tag for not reproducible... \n. windows--\n. I recently changed it to installertype. That was my bad, changing it before\nthe source code catches up. The field is moving from just a filetype to\nsomething more. The existing values will still be compatible though.\nOn Thursday, August 28, 2014, Mike Zboray notifications@github.com wrote:\n\nSome of the documentation pages are out of date with respect to the source\ncode. An example:\nHelpersInstallChocolateyPackage\nhttps://github.com/chocolatey/chocolatey/wiki/HelpersInstallChocolateyPackage\nlists the parameter as $installerType - but in the source\nhttps://github.com/chocolatey/chocolatey/blob/361389bbd0be287fff563de5112583dafd88282a/src/helpers/functions/Install-ChocolateyPackage.ps1\nit is called $fileType.\nI was prompted to created this issue from this SO question\nhttp://stackoverflow.com/a/25541837/517852.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/561.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Chocolatey is in beta, and by v1 it won't need to have an uninstall script except for areas where folks want/need to do extra work. \nFor the most part, most packages don't do more than the native installer does, so simply going to programs and features and removing the software removes it from the machine, one just needs to also remember to remove the package files.\n. Would you rather work be put into this or into making it unnecessary?\n. Ah, but if they don't do anything outside of chocolatey install boundaries, choco uninstall cleans it right up. This is the case of atom (except maybe the desktop shortcut).\n. MinGW and CygWin I can see needing something to help cleanup, but I am not familiar with cwrsync.\n. Agreed. This will get better. My hope has always been to be able to inspect the chocolatey install and see what was done and do the opposite in some respects. \n. @JVimes perhaps you can help me on that. I don't know that I ever changed the default value of .txt files, but I don't have the context menu entries for new files in Windows 2012R2. I wonder if it was removed?\n. Don't worry about the appveyor failure. It's going to fail for awhile methinks...\n. There are some tests that seem to fail in that environment. I need to get to the bottom of those.\n. https://ci.appveyor.com/project/ferventcoder/chocolatey/build/1.0.5  - would be neat to see the test output show up but it is not adding the test output file for some reason.\n. @gep13 I thought I could just use artifacts but apparently not...\n. @mwrock Right. That's what I was trying to say before. The failures are not related to your pull request, so feel free to ignore those.\n. Duplicate of https://github.com/chocolatey/chocolatey/issues/5\n. > This is a general query about apt-like functionality that I can't find. Either I've missed it or the query will evolve into some enhancement requests ;)\nIt's possible some or all of this isn't included due to differences between Chocolatey and Windows versus Debian and *nix.\n\nWith the choco update command, is it possible to do some/any of the following?\n1. get an indication before downloading how much will be downloaded\n\nUnfortunately most packages only contain instructions on where to go download items from the official distribution point. Chocolatey operates without the need for -y presently, so it's hard to see ahead of time without adding in a switch. It would also need to download the packages themselves to get an indication of what they are going to need to download prior to giving an accurate estimate. Some packages contain everything they need though, so it makes it hard to get an exact indication without downloading some packages. I think it's possible this could be implemented though, but probably not by v1.\n\n2 failing that, get an indication before downloading which packages will be updated\n\nAdding in an indication is definitely possible, but I think that chocolatey first needs to be able to update package indexes.\n\n3 interrupt a download and resume later\n\nI could see this at some point, but probably not by v1. \n\n4 request a download only (no installation)\n\nThis definitely needs to be written down as a feature. Plans are in mind to implement this in the rewrite, but I'm not sure it's been added as a feature.\n\n5 install from a previous download only (don't attempt to download at all - \"offline mode\")\n\nIt already does this as of 0.9.8.24.\n\n6 get a report of release notes for downloaded packages (ok, this is a feature of apt-listchanges not core apt :)\n\nInteresting. This is definitely something that could be added. Probably after v1 though.\n. Done, but over here https://github.com/chocolatey/choco/releases.atom\n. Agreed.\n. I wonder if the chocolateyInstall.ps1 is swallowing the error... \n. @warnergodfrey @bmedlin I believe this was just fixed by @mwrock  in a recent PR.\n. #658 \n. @mwrock where would you put that bit of code?\n. @mwrock nevermind, found a good spot. :)\n. Where did you get \\ in front of @powershell ?\n. Please move this over to https://github.com/chocolatey/chocolatey.org\n. awesome! \n. Actually we put in a fix just to address a bug in PS v3 with not waiting processes...\n. It's possible it's something in there that is messed up? https://github.com/chocolatey/chocolatey/pull/516\n. No, it appears #516 caused this issue :)\n. it's already done in the rewrite.\n. #595 #253 \n. @Stanzilla it's not yet FOSS but it will be soon.\n. Closing as a duplicate.\n. This isn't exactly a duplicate but yeah. \n. This looks like a package issue. It seems like it would be much better served to make the comment on the disqus thread on the package page itself for others who may run into this issue?\n. @smikims packages can change environment variables. If they have an underlying installer they can do just about anything.\n. Ahhh virus scanners. You can't live with them, you can't live without them. :/\n. I wonder if we could get something there that allows it to wait on a lock...\n. This won't be fixed in powershell. The posh version is at its limit. The new c# version is almost done.\n. @fibric We'll see if this remains an issue once the new c# version comes out. I expect many of the logged issues to just close as non-issues once that happens. This may be one of them.\n. @Stanzilla Repo is not publicly available yet. For ETA, I'd suggest signing up for the newsletter. :)\n. This looks like a problem with the package itself. Please follow up on the package page at https://chocolatey.org/packages/xampp\n. Need a debug log. \nCall with -debug\n. Uninstall has .... ...issues. :/ The order of execution in the POSH chocolatey could be part of the issue... \n. It looks like this has broken some tests. https://ci.appveyor.com/project/ferventcoder/chocolatey/build/1.0.37\n. Also, we have a rewrite coming... I wouldn't suggest pursuing this any further as it will be deprecated in a few weeks for something that works so much better.\n. > ShimGen is non-free proprietary software: https://raw.githubusercontent.com/chocolatey/chocolatey/master/src/tools/shimgen.license.txt\nIt's possible that it could later be offered as a standalone product. I do doubt that it will be a free product though. At the current time we are wanting to see more folks making packages to take advantage of it. \n. If you want to play with this, there is a prerelease https://chocolatey.org/packages/chocolatey/0.9.8.29-alpha1\n. So it works if it finds the path. However the working directory of shimgen doesn't find it appropriately :/\n. > choco install cygwin -debug -overrideArgs '-q -R C:\\tools\\cygwin\n\n-l C:\\tools\\cygwin\\packages -s http://mirrors.kernel.org/sourceware/cygwin'\n\nOverrideArgs is a switch, it just means ONLY use what I pass in for InstallArgs (if documentation is confusing, please let us know how to make it better).\nIf you take a look at the files section of the package http://chocolatey.org/packages/cygwin, you can see what Chocolatey does. \nYou need to run the command like choco install cygwin -debug -overrideArgs -installArgs '-q -R C:\\tools\\cygwin -l C:\\tools\\cygwin\\packages -s http://mirrors.kernel.org/sourceware/cygwin'\nto make it work correctly.\n. I'm going to close this as not an issue, if you feel the docs need work though to better explain, please make further comments and I will reopen it as a documentation issue.\n. It also works for me, but you do have a good point. It should be attempting from https now that we are no longer subject to SNI.\n. Are you subject to a proxy at all?\n. No worries, thanks for following up! \n. Thanks, I think we should have grabbed this but apparently I missed it. I will see what we can work up in new choco.\n. That is not the correct reason we chose to move it. It was related to CVEs\nthat were never made public. It had nothing to do with folks that do not\nknow how to call the right functions. When stuff fails do to folks not\nknowing how to properly call for admin access, the packages should properly\nfail.\nI'm not really sure how you came to that conclusion as the reason but I've\nnever stated as much and I've never heard anyone on the team state as much\neither.\nRegarding the CVE - The old default install location has too many\nprivileges that allows anyone to make changes to pkg installers or do other\nnasty stuff if they get access to a box. There were some other CVEs related\nto domain poisoning that we've also fixed.\nFurther, the old posh version of choco is ending with a new version that is\nfaster and more stable. Not sure if you have seen that yet. You may want to\nsign up for the newsletter if you have not.\nOnce we get the security stuff ironed out, the plan is to allow easier\nnon-admin installations again. But it must be done in a way that is secure\nfor that user and not open to package security issues like before.\nOn Saturday, October 4, 2014, Julian Easterling notifications@github.com\nwrote:\n\nThat has been a sticking point for me as well recently... If you've been\naround chocolatey for a while, you'll remember that the reason it doesn't\ninstall into \"Program Files\" is because the original thought was to not\nrequire \"elevated\" privileges... recent changes have changed the \"default\"\nlocation to \"ProgramData\" and added a warning about execution within a\n\"non-elevated\" shell. This is all because the developers of the install\nscripts inside the packages from the public feed don't take adequate\nprecautions to handle the difference between execution in an elevated and\nnon-elevated shell... It is an unfortunate change in direction for the\nproject. I'm hoping that the OneGet project will take a different approach.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/583#issuecomment-57915881\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. > But if you're going to constantly display a warning that I'm executing in a non-elevated shell even when I just getting a list of packages (clist), I think that the experience is tainted from the start.\nThis is partially an artifact of the posh version. Rather than copy and paste that into several locations, I went with keeping it in one spot. It is a bit annoying to see \n. > Given that Chocolatey is still not a 1.0 product and that I have not seen the new rewrite yet, and to be honest, I'm still waiting to see what the OneGet project does; however, I will sign up for the newsletter as the chocolatey project has made package management on Windows systems much closer to the same experience I have under the Ubuntu systems I manage.\nOneGet is a package manager aggregator. It will contain Chocolatey, NuGet, PSGet, Python and others.\n. Also, here's the archive with a link to the video of the new version - http://us8.campaign-archive1.com/?u=86a6d80146a0da7f2223712e4&id=fde33f421e\n. I believe this is an exact duplicate that we've already filed here\nhttps://github.com/chocolatey/shimgen/issues/1\nOn Sunday, October 5, 2014, Steven Penny notifications@github.com wrote:\n\nUsing the jq package http://chocolatey.org/packages/jq as an example, I\ncan\ncorrectly run a command from chocolatey\\lib\nPS > C:\\ProgramData\\chocolatey\\lib\\jq.1.0.3\\tools\\jq -n '\\\"hello world\\\"'\n\"hello world\"\nHowever the same command chocolatey\\bin creates an error\nPS > C:\\ProgramData\\chocolatey\\bin\\jq -n '\\\"hello world\\\"'\nerror: hello is not defined\nhello1 compile error\nTo get it to work I have to add extra backslashes\nPS > C:\\ProgramData\\chocolatey\\bin\\jq -n '\\\"hello world\\\"'\n\"hello world\"\nI feel that \\\"hello world\\\" should work either way.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/584.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. It's actually the packages that are doing it wrong, not the shim. https://github.com/chocolatey/chocolatey/wiki/CreatePackages#how-do-i-set-up-batch-redirects-for-applications-that-have-a-gui\nPlease contact the owners of those packages and provide the link.\n. Closing for now as this appears to be something with the packages themselves.\n. As an enhancement here, I added https://github.com/chocolatey/shimgen/issues/13 and fixed it  for 0.9.9 - https://github.com/chocolatey/choco/commit/fac7727b183f44b217cc064486171404c30b6622\n. Sweet... glad this is not an issue.\n. You can easily get the path to the file using $installDir = \"$(Split-Path -parent $MyInvocation.MyCommand.Definition)\" - https://github.com/chocolatey/chocolateytemplates/blob/master/_templates/chocolatey3/NAME.portable/tools/chocolateyInstall.ps1#L8\n. This is a good idea though.\n. We upgraded to the 2.8.2 at .24 I believe.\n. I noticed this, they have not responded quickly to any of my findings recently.\nI'm not sure it's case sensitive, but in the way it works with the source.\nI'm not sure this is an issue with the choco.exe version of chocolatey, it doesn't use that horrendous tryfindpackage method that 2.8.2 uses.\n. Here's a couple I've logged:\n- https://nuget.codeplex.com/workitem/4285\n- https://nuget.codeplex.com/workitem/4262\n. @codearoo can you let me know if this is still an issue with the latest prerelease of choco (put it on a canary system, it's choco.exe).\n. I'm going to call it fixed for now pending your response.\n. Sorry, I meant with version 0.9.9 (prerelease). Test on a non production\nsystem please. It would be great if this can be closed with 0.9.9, I\nbelieve it is fixed, I just don't have a source like proget that has this\nissue.\nOn Wednesday, January 28, 2015, codearoo notifications@github.com wrote:\n\nYes this still is not fixed. I just tested on ver .32.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/589#issuecomment-71832010\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Why I asked for you not to do it on a prod system. Downgrading requires\nremoving some files, although you can probably just use the\nchocolatey.org/install.ps1 script and it should work.\nOn Wednesday, January 28, 2015, Gary Ewan Park notifications@github.com\nwrote:\n\nI didn't know how to find this alpha pre-release page.\nFrom any package version page, i.e:\nhttps://chocolatey.org/packages/chocolatey/0.9.8.32\nScroll to the bottom, and you will see:\n[image: image]\nhttps://cloud.githubusercontent.com/assets/1271146/5938971/b46c68e2-a6f7-11e4-8f01-32e884b8651c.png\nWhere you can then see all available package versions, including\npre-release.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/589#issuecomment-71840294\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Let me know if it doesn't work. It should. I haven't tried a choco install chocolatey --version 0.9.8.32 --force\n. Although doing exactly that seems to have worked for me.\n\n. Interestingly enough, I would have thought there would be more output from the install.\n. Show me the chocolateyInstall.ps1 file? \nI think you need to remove the $url64 completely.\n. It's a bug then... \n. Curious about the actual PATH - like in the registry or in Control Panel -> System.\nBoth PowerShell and Cmd.exe are very limited in their ability to refresh environment variables. \n. This is fixed by https://github.com/chocolatey/choco/issues/303 I believe, and further fixed by https://github.com/chocolatey/choco/issues/699\n. Yep, it's because you call chocolatey, it starts a child session of cmd.exe then powershell.exe - and that gets updated. Which works appropriately if you are installing something that depends on something else being on the path because during that session everything is updated. \n. To see it on your path in posh, you need to exit and come back in. We are working on getting Update-Session where you can call it for updating your environment as well.\n. We are going to be adding a module for update-sessonenvironment so you can do this in powershell. Look for that over in https://github.com/chocolatey/choco\n. I'd prefer it be compatible all the way back to posh v2 unless there is some requirement to be with posh v3+\n. Closed by updating all three locations.\n. This may be a dupe\n. #253 \n. Yikes, yeah. The benefit of putting downloads stuff in the temp folder is that the bigger stuff goes away with cleaning the temp folder out.\nHowever the packages (lib) folder will start to get smaller with one package version in/one out for upgrades and stuff. In choco rewrite this is the default.\n. Closed as a duplicate. Sorry, mentioned that awhile ago. Just doing some issue triage and noticed it was still open. \n. Appreciate the thoughts. However we are rewriting chocolatey, which is why we ask in contributing that you contact us first to get buy off on a feature before you start working on it. \nThis looks like an interesting feature though. I'd like to get some input on it later as it relates to the rewrite (which is c#).\n. I think ultimately being able to do an install from a web server with an open index should be doable.\n. So I am curious. Is it causing problems or more just an annoyance?\n. We are rewriting chocolatey as an exe so you won't have any bats that are subject to this issue. :)\n. #602 closes this. Thanks!\n. Thanks! \n. @kaiaie what version of posh do you have installed on Win2008?\nAlso, we tweaked an issue with this in the current release (released a few hours ago - 0.9.8.28) - it's possible that you won't see the process id issues on the latest version.\n. It looks like it is erroring on the line that tries to wait the process if it is still running (which has a try catch) but I think it might actually be something else. It's hard to say. \n. What happens if you try to install the app without chocolatey in the equation on one of the failing systems?\n. I believe I just fixed this - It will be testable in choco 0.9.9-rc8 and above.\n. @cleung2010 I see how this may look like a similar issue but it doesn't appear to be. You may want to remove the try catch from around the chocolatey script so you get a better handle on where the error is occurring. It looks like something in the package itself. Also any issues with choco belong at https://github.com/chocolatey/choco/issues, not over here. Thanks!\n. @cleung2010 thanks, I will follow up over there.\n. @lmayorga1980 try -ia - that's the short version of installargs\n. That is a command/batch issue and will not exist in the new compiled version of choco. It's an annoyance at best, but it is an issue with using batch files. The underlying process gets orphaned, but it still knows about it, so it keeps asking if you want to terminate the process.\nYou can observe this behavior by pulling up Process Explorer (Sysinternals)\n. Other tools that use .cmd/.bat files that call out to executables will display this same behavior.\nI'm closing this as a non-issue. A message would be good, but this issue should not exist in the new version of choco.exe.\n. There you go, XML code. ;)\n. I think this may be similar to #589 and #544\n. Calling this closed as a duplicate, plus I think it is fixed in choco.exe.\n. Import the chocolateyInstaller.psm1 file in %chocolateyinstall%\\chocolateyinstall\\helpers\n. @svnpenn #3 is no longer an issue with choco.exe, it works now. The creating packages story is starting to get smoother, expect more plus ups this winter. Of course choco.exe needs to get finished....\n. No you are good. The rewrite stuff isn't out yet. There isn't anything public to play with. We are going to FOSS it soon.\n. @lonniev raise a new issue for that please. Thanks! \n. 1. create chocolateyInstall.ps1\n2. call choco install pkg.nuspec --force\n. FYI - https://github.com/chocolatey/choco\n. @jmbeach Howdy. It looks like you are missing something. However if you want to follow up, let's do that over at https://github.com/chocolatey/choco.. That answers the question. Uninstall is very naive. Recommend you would uninstall prior to upgrade or wait for the c# version which will be out soon. It does a much better job of handling older versions, upgrades and uninstalls.\n. That's an interesting issue. This looks like it might be something with https://github.com/chocolatey/puppet-chocolatey though. Thoughts?\n. Can you run that with --debug --verbose --trace and post the output?\n. ==> default: Wrapped exception:\n==> default: Execution of 'C:\\ProgramData\\chocolatey\\chocolateyInstall\\chocolatey.cmd install siteminder -version 12.51 -ia \"-f C:\\Temp\\siteminder-12.51-win64.properties\" -source http://myserver/nuget' returned 1: Chocolatey (v0.9.8.28) is installing 'siteminder' and dependencies. By installing you accept the license for 'siteminder' and each dependency you are installing.\n==> default:  \n==> default: siteminder v12.51\n==> default: Installing siteminder...\n==> default: siteminder has been installed.\n==> default: siteminder has finished successfully! The chocolatey gods have answered your request!\n==> default: siteminder has finished successfully! The chocolatey gods have answered your request!\n==> default: Finished installing 'siteminder' and dependencies - if errors not shown in console, none detected. Check log for errors if unsure.\n==> default: Chocolatey (v0.9.8.28) is installing 'C:\\Temp\\siteminder-12.51-win64.properties' and dependencies. By installing you accept the license for 'C:\\Temp\\siteminder-12.51-win64.properties' and each dependency you are installing.\n==> default: Second path fragment must not be a drive or UNC name.\n==> default: Parameter name: path2\n==> default: Command 'install' failed (sometimes this indicates a partial failure). Additional info/packages: C:\\Temp\\siteminder-12.51-win64.properties\n==> default:\nWhat happens when you run just \nC:\\ProgramData\\chocolatey\\chocolateyInstall\\chocolatey.cmd install siteminder -version 12.51 -ia \"-f C:\\Temp\\siteminder-12.51-win64.properties\" -source http://myserver/nuget\nMaybe it's an issue with the siteminder installer?\n. Lots of search results, particularly this one about using c:\\ - http://gayotfow.wordpress.com/2014/04/27/second-path-fragment-must-not-be-a-drive-or-unc-name/\nI think it has to do with your install args from the looks of things. Thoughts?\n. @lmayorga1980 I think this might be fixed in the new choco, but the puppet provider would need to be updated first...\n. Yup - https://chocolatey.org/docs/features-automatically-recompile-packages\n. This is closed by https://github.com/chocolatey/choco/issues/108\n. when you run with -debug, where does this fail?\n. This looks actually to be more of an issue with the current PHP package. The download link doesn't work for me. \nAre you experiencing this issue with other packages or just this one?\n. Oh no - it is a package issue, the original download link works. But unfortunately the package itself attempts to check there prior to going to the archives folder. Which would work if it were there.\n. Take a look here: https://chocolatey.org/packages/php#files - I posted this over at https://github.com/ferventcoder/chocolatey-packages/issues/38\nI'm going to close this as not a chocolatey issue. Please followup on the package issue itself.\n. @gep13 no proxy for you I'm afraid. Not something I would have immediately thought to look at either.\n. This repository is for issues with Chocolatey itself. This seems like a package issue. Please follow up directly with those folks through the contact maintainers page on chocolatey.org - https://chocolatey.org/packages/atom OR you can take a shortcut and file the issue here: https://github.com/atom/chocolatey/issues\n. Try this instead - choco install chocolatey\n. Not sure why but sometimes it gets a bit weird about version differences.\n. This is a duplicate of #122 \n. I'm thinking a file named something like .bins that points to a relative path in the package where all of the exe/batch files are. If found, choco will only evaluate this file (but .gui and .ignore files will still be used).\n. Actually scratch that name, nuget has a bug on names of files/folders that start with dot .. It's a really stupid limitation, I don't remember if we override it with choco.exe or not.\n. @jberezanski agreed. \nAnd I think ultimately extending the nuspec schema. We are definitely going in that direction.\n. sure why not... \n. Target stable\nOn Monday, November 24, 2014, Gary Ewan Park notifications@github.com\nwrote:\n\n[image: :+1:] cool, I can take care of this one. Hopefully get to it\ntonight.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/621#issuecomment-64157443\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. And look at Justin's PR related to this to auto add these.\nOn Monday, November 24, 2014, Rob Reynolds ferventcoder@gmail.com wrote:\n\nTarget stable\nOn Monday, November 24, 2014, Gary Ewan Park notifications@github.com\n\u0002amp\u0003#106;\u0002amp\u0003#97;\u0002amp\u0003#118;\u0002amp\u0003#97;\u0002amp\u0003#115;\u0002amp\u0003#99;\u0002amp\u0003#114;\u0002amp\u0003#105;\u0002amp\u0003#112;\u0002amp\u0003#116;\u0002amp\u0003#58;\u0002amp\u0003#95;\u0002amp\u0003#101;\u0002amp\u0003#40;\u0002amp\u0003#37;\u0002amp\u0003#55;\u0002amp\u0003#66;\u0002amp\u0003#37;\u0002amp\u0003#55;\u0002amp\u0003#68;\u0002amp\u0003#44;\u0002amp\u0003#39;\u0002amp\u0003#99;\u0002amp\u0003#118;\u0002amp\u0003#109;\u0002amp\u0003#108;\u0002amp\u0003#39;\u0002amp\u0003#44;\u0002amp\u0003#39;\u0002amp\u0003#110;\u0002amp\u0003#111;\u0002amp\u0003#116;\u0002amp\u0003#105;\u0002amp\u0003#102;\u0002amp\u0003#105;\u0002amp\u0003#99;\u0002amp\u0003#97;\u0002amp\u0003#116;\u0002amp\u0003#105;\u0002amp\u0003#111;\u0002amp\u0003#110;\u0002amp\u0003#115;\u0002amp\u0003#64;\u0002amp\u0003#103;\u0002amp\u0003#105;\u0002amp\u0003#116;\u0002amp\u0003#104;\u0002amp\u0003#117;\u0002amp\u0003#98;\u0002amp\u0003#46;\u0002amp\u0003#99;\u0002amp\u0003#111;\u0002amp\u0003#109;\u0002amp\u0003#39;\u0002amp\u0003#41;\u0002amp\u0003#59; wrote:\n\n[image: :+1:] cool, I can take care of this one. Hopefully get to it\ntonight.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/621#issuecomment-64157443\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. I think you want to use the general idea but not the commits. Otherwise it would have already been pulled in.\n. Closing as duplicate of #230.\n. Awesome. Yeah that would have been interesting for it to be an issue.\n. Yeah, easy enough to remove...\n. Can you please give the output of another item? Atom has possible known\nissue.\nOn Wednesday, November 26, 2014, Luciano Paciornick \nnotifications@github.com wrote:\n\nHello,\nI tried updating a bunch of packages today, and apparently all that use\nStart-ChocolateyProcessAsAdmin fail. Examples include Oracle VirtualBox,\nCCleaner and Atom. I've updated Chocolatey to the latest version and tried\nrebooting the computer, but to no avail.\nHere is the log for \"choco update atom -debug\":\nDEBUG: Running 'Append-InstallLog' with chocoInstallLog:''\nDEBUG: Arguments: $command = 'update'|$force=False\n|$prerelease=False|$packageNames='atom'\n|$source=''\n|$version=''|$allVersions=False\n|$overrideArguments=False|$InstallArguments=''\n|$localonly=False|$verbosity=False|$debug=True|$quiet=False\n|$name=''|$ignoreDependencies=False|$forceX86=False\n|$packageParameters=''\n|PowerShellVersion=4.0|OSVersion=6.1.7601.65536\nDEBUG: Current Security Protocol - Ssl3, Tls\nDEBUG: Running 'Chocolatey-Update' for 'atom' with source:''.\nDEBUG: Running 'Chocolatey-Version' for atom with source:''.\nDEBUG: Getting local packages based on all or passed in package name\nDEBUG: Running 'Chocolatey-List' with selector: 'atom', source:'C:\\ProgramData\\Chocolatey\\lib'\nDEBUG: Showing prerelease versions of packages\nDEBUG: Executing command [\"C:\\ProgramData\\Chocolatey\\chocolateyinstall\\nuget.exe\" list \"atom\" -Prerelease -NonInteractive -Source\n\"C:\\ProgramData\\Chocolatey\\lib\"]\nDEBUG: Command [\"C:\\ProgramData\\Chocolatey\\chocolateyinstall\\nuget.exe\" list \"atom\" -Prerelease -NonInteractive -Source\n\"C:\\ProgramData\\Chocolatey\\lib\"] exited with '0'.\nDEBUG: Getting atom from returned local list\nDEBUG: Running 'Chocolatey-List' with selector: 'Atom', source:''\nDEBUG: Running 'Get-ConfigValue' with configValue:'useNuGetForSources'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'useNuGetForSources'\nDEBUG: After checking the user config the value of 'useNuGetForSources' is ''\nDEBUG: Value not found in the user config file - checking the global config\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'useNuGetForSources'\nDEBUG: After checking the global config the value of 'useNuGetForSources' is 'false'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'sources'\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'sources'\nDEBUG: Using global sources\nDEBUG: Using '-Source \"https://chocolatey.org/api/v2/;\"' as the source arguments\nDEBUG: Executing command [\"C:\\ProgramData\\Chocolatey\\chocolateyinstall\\nuget.exe\" list \"Atom\" -NonInteractive -Source\n\"https://chocolatey.org/api/v2/;\"]\nDEBUG: Command [\"C:\\ProgramData\\Chocolatey\\chocolateyinstall\\nuget.exe\" list \"Atom\" -NonInteractive -Source \"https://chocolatey.org/api/v2/;\"] exited with '0'.\nDEBUG: Getting Atom from returned remote list\nDEBUG: Long version of 0.150.0 is '000000000000.000000000150.000000000000'\nDEBUG: Long version of 0.127.0 is '000000000000.000000000127.000000000000'\nUpdating Atom from 0.127.0 to 0.150.0\nDEBUG: Running 'Chocolatey-NuGet' for Atom with source:''. Force? False\nChocolatey (v0.9.8.28) is installing 'Atom' and dependencies. By installing you accept the license for 'Atom' and each dependency you are installing. DEBUG: Installing packages to \"C:\\ProgramData\\Chocolatey\\lib\".\nDEBUG: Running 'Run-NuGet' for Atom with source: '', version:''\nDEBUG:  NuGet _\nDEBUG: Running 'Get-ConfigValue' with configValue:'useNuGetForSources'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'useNuGetForSources'\nDEBUG: After checking the user config the value of 'useNuGetForSources' is ''\nDEBUG: Value not found in the user config file - checking the global config\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'useNuGetForSources'\nDEBUG: After checking the global config the value of 'useNuGetForSources' is 'false'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'sources'\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'sources'\nDEBUG: Using global sources\nDEBUG: Using '-Source \"https://chocolatey.org/api/v2/;\"' as the source arguments\nDEBUG: Calling 'C:\\ProgramData\\Chocolatey\\chocolateyinstall\\nuget.exe' install Atom -OutputDirectory \"C:\\ProgramData\\Chocolatey\\lib\" -Source\n\"https://chocolatey.org/api/v2/;\" -NonInteractive -NoCache\nDEBUG: Installing 'Atom 0.150.0'.\nSuccessfully installed 'Atom 0.150.0'.\nDEBUG: Evaluating NuGet output for line: Installing 'Atom 0.150.0'.\nDEBUG: Evaluating NuGet output for line: Successfully installed 'Atom 0.150.0'.\nDEBUG: NuGet installed Atom. If we are ignoring dependencies (False) then we will clean this up.\nAtom v0.150.0\nDEBUG: Running 'Delete-ExistingErrorLog' for Atom\nDEBUG: Looking for failure log at 'C:\\TEMP\\chocolatey\\Atom\\failure.log'\nDEBUG: Running 'Run-ChocolateyPS1' for Atom with packageFolder:'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0', action: 'install'\nDEBUG:    PowerShell install (chocolateyinstall.ps1) \nDEBUG:   Looking for chocolateyinstall.ps1 in folder 'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0'. If chocolateyinstall.ps1 is found, it will be run. DEBUG: Action file is 'chocolateyInstall.ps1'\nDEBUG: Running 'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\chocolateyInstall.ps1'\nDEBUG: Running 'Install-ChocolateyZipPackage' for Atom with url:'https://github.com/atom/atom/releases/download/v0.150.0/atom-windows.zip',\nunzipLocation: 'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools', url64bit:\n'https://github.com/atom/atom/releases/download/v0.150.0/atom-windows.zip', specificFolder: '', checksum: '', checksumType: '', checksum64: '',\nchecksumType64: ''\nDEBUG: Running 'Get-ChocolateyWebFile' for Atom with url:'https://github.com/atom/atom/releases/download/v0.150.0/atom-windows.zip',\nfileFullPath:'C:\\TEMP\\chocolatey\\Atom\\AtomInstall.zip', url64bit:'https://github.com/atom/atom/releases/download/v0.150.0/atom-windows.zip', checksum: '', checksumType: '', checksum64: '', checksumType64: ''\nDEBUG: Running 'Get-ProcessorBits'\nDEBUG: CPU is 64 bit\nDEBUG: Setting url to 'https://github.com/atom/atom/releases/download/v0.150.0/atom-windows.zip' and bitPackage to 64\nDEBUG: Running 'Get-WebHeaders' with url:'https://github.com/atom/atom/releases/download/v0.150.0/atom-windows.zip', userAgent: 'chocolatey command\nline'\nDEBUG: Setting the UserAgent to 'chocolatey command line'\nDEBUG: Request Headers:\nDEBUG:   'Accept':'/'\nDEBUG:   'User-Agent':'chocolatey command line'\nDEBUG: Response Headers:\nDEBUG:   'x-amz-id-2':'Ko7mATqJa7dnWSKclROqP9RV02DyP0ONIxxkt5optFE6/nlGjd1U5GWgaVVMos8r'\nDEBUG:   'x-amz-request-id':'9467462CF6ADF6DB'\nDEBUG:   'x-amz-meta-surrogate-control':'max-age=31557600'\nDEBUG:   'x-amz-meta-surrogate-key':'repository-3228505 user-3697332'\nDEBUG:   'Content-Disposition':'attachment; filename=atom-windows.zip'\nDEBUG:   'Accept-Ranges':'bytes'\nDEBUG:   'Content-Length':'70043976'\nDEBUG:   'Cache-Control':'max-age=31557600'\nDEBUG:   'Content-Type':'application/octet-stream'\nDEBUG:   'Date':'Wed, 26 Nov 2014 19:40:55 GMT'\nDEBUG:   'ETag':'\"b4b2e352dd83071d8b55b53f7daa2d19\"'\nDEBUG:   'Last-Modified':'Thu, 20 Nov 2014 20:29:33 GMT'\nDEBUG:   'Server':'AmazonS3'\nDEBUG: Atom's requested file has already been downloaded. Using cached copy at\n  'C:\\TEMP\\chocolatey\\Atom\\AtomInstall.zip'.\nDEBUG: Checking that 'C:\\TEMP\\chocolatey\\Atom\\AtomInstall.zip' is the size we expect it to be.\nDEBUG: Verifying package provided checksum of '' for 'C:\\TEMP\\chocolatey\\Atom\\AtomInstall.zip'.\nDEBUG: Running 'Get-CheckSumValid' with file:'C:\\TEMP\\chocolatey\\Atom\\AtomInstall.zip', checksum: '', checksumType: ''\nDEBUG: Running 'Get-ChocolateyUnzip' with fileFullPath:'C:\\TEMP\\chocolatey\\Atom\\AtomInstall.zip'', destination:\n'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools', specificFolder: ', packageName: 'Atom'\nExtracting C:\\TEMP\\chocolatey\\Atom\\AtomInstall.zip to C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools...\nDEBUG: wrapping 7za invocation with Write-FileUpdateLog\nDEBUG: Running 'Write-FileUpdateLog' with logFilePath:'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\AtomInstall.zip.txt'',\nlocationToMonitor:C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools, Operation: '\n    param($7zip, $destination, $fileFullPath, [ref]$exitCodeRef)\n    $process = Start-Process $7zip -ArgumentList \"x -o\"$destination\" -y\"$fileFullPath`\"\" -Wait -WindowStyle Hidden -PassThru\n    # this is here for specific cases in Posh v3 where -Wait is not honored\n    try { if (!($process.HasExited)) { Wait-Process -Id $process.Id } } catch { }\n$exitCodeRef.Value = $process.ExitCode\n'\nDEBUG: Tracking current state of 'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools'\nDEBUG: 7za exit code: 0\nC:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\nAtom has finished successfully! The chocolatey gods have answered your request!\nDEBUG: Running 'Install-ChocolateyShortcut' with parameters ShortcutFilePath: 'C:\\Users\\Luciano.Paciornick\\Desktop\\Atom.lnk', TargetPath:\n'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe', WorkingDirectory: '', Arguments: '', IconLocation: '', Description: ''\nDEBUG: Creating Shortcut...\nDEBUG: Shortcut created.\nInstall-ChocolateyShortcut completed has finished successfully! The chocolatey gods have answered your request!\nDirectory: C:\\Users\\Luciano.Paciornick\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\nMode                LastWriteTime     Length Name\n\nd----        11/26/2014     12:20            GitHub, Inc\nDEBUG: Running 'Install-ChocolateyShortcut' with parameters ShortcutFilePath: 'C:\\Users\\Luciano.Paciornick\\AppData\\Roaming\\Microsoft\\Windows\\Start\nMenu\\Programs\\GitHub, Inc\\Atom.lnk', TargetPath: 'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe', WorkingDirectory: '', Arguments:\n'', IconLocation: '', Description: ''\nDEBUG: Creating Shortcut...\nDEBUG: Shortcut created.\nInstall-ChocolateyShortcut completed has finished successfully! The chocolatey gods have answered your request!\nDEBUG: Running 'Install-ChocolateyExplorerMenuItem' with menuKey:'Atom', menuLabel:'Open with Atom',\ncommand:'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe', type 'file',\niconLocation:'\"C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe\"'\nDEBUG: Running 'Install-ChocolateyExplorerMenuItem' with menuKey:'Atom', menuLabel:'Open Folder with Atom',\ncommand:'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe', type 'directory',\niconLocation:'\"C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe\"'\nDEBUG: Running 'Install-ChocolateyExplorerMenuItem' with menuKey:'Atom', menuLabel:'Open Folder with Atom',\ncommand:'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe', type 'background',\niconLocation:'\"C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe\"'\nDEBUG: Running 'Start-ChocolateyProcessAsAdmin' with exeToRun:'powershell', statements: '\n    if( -not (Test-Path -path HKCR:) ) {New-PSDrive -Name HKCR -PSProvider registry -Root Hkey_Classes_Root};\n    if(!(test-path -LiteralPath 'HKCR:\\shell\\Atom')) { new-item -Path 'HKCR:\\shell\\Atom' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\shell\\Atom' -Name '(Default)'  -Value 'Open with Atom';\n    if(!(test-path -LiteralPath 'HKCR:\\shell\\Atom\\command')) { new-item -Path 'HKCR:\\shell\\Atom\\command' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\shell\\Atom\\command' -Name '(Default)' -Value\n'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe \\\"%1\\\"';\n Set-ItemProperty -LiteralPath 'HKCR:\\shell\\Atom' -Name 'Icon'  -Value '\"C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe\"';;\n    if( -not (Test-Path -path HKCR:) ) {New-PSDrive -Name HKCR -PSProvider registry -Root Hkey_Classes_Root};\n    if(!(test-path -LiteralPath 'HKCR:\\directory\\shell\\Atom')) { new-item -Path 'HKCR:\\directory\\shell\\Atom' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\directory\\shell\\Atom' -Name '(Default)'  -Value 'Open Folder with Atom';\n    if(!(test-path -LiteralPath 'HKCR:\\directory\\shell\\Atom\\command')) { new-item -Path 'HKCR:\\directory\\shell\\Atom\\command' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\directory\\shell\\Atom\\command' -Name '(Default)' -Value\n'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe \\\"%1\\\"';\n Set-ItemProperty -LiteralPath 'HKCR:\\directory\\shell\\Atom' -Name 'Icon'  -Value '\"C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe\"';;\n    if( -not (Test-Path -path HKCR:) ) {New-PSDrive -Name HKCR -PSProvider registry -Root Hkey_Classes_Root};\n    if(!(test-path -LiteralPath 'HKCR:\\directory\\background\\shell\\Atom')) { new-item -Path 'HKCR:\\directory\\background\\shell\\Atom' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\directory\\background\\shell\\Atom' -Name '(Default)'  -Value 'Open Folder with Atom';\n    if(!(test-path -LiteralPath 'HKCR:\\directory\\background\\shell\\Atom\\command')) { new-item -Path 'HKCR:\\directory\\background\\shell\\Atom\\command' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\directory\\background\\shell\\Atom\\command' -Name '(Default)' -Value\n'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe \\\"%V\\\"';\n Set-ItemProperty -LiteralPath 'HKCR:\\directory\\background\\shell\\Atom' -Name 'Icon'  -Value\n'\"C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe\"';'\nDEBUG: Elevating Permissions and running C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoProfile -ExecutionPolicy unrestricted -Command\n\"& import-module -name  'C:\\ProgramData\\Chocolatey\\chocolateyinstall\\helpers\\chocolateyInstaller.psm1'; try{\n    if( -not (Test-Path -path HKCR:) ) {New-PSDrive -Name HKCR -PSProvider registry -Root Hkey_Classes_Root};\n    if(!(test-path -LiteralPath 'HKCR:\\shell\\Atom')) { new-item -Path 'HKCR:\\shell\\Atom' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\shell\\Atom' -Name '(Default)'  -Value 'Open with Atom';\n    if(!(test-path -LiteralPath 'HKCR:\\shell\\Atom\\command')) { new-item -Path 'HKCR:\\shell\\Atom\\command' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\shell\\Atom\\command' -Name '(Default)' -Value\n'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe \\\"%1\\\"';\n Set-ItemProperty -LiteralPath 'HKCR:\\shell\\Atom' -Name 'Icon'  -Value '\"C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe\"';;\n    if( -not (Test-Path -path HKCR:) ) {New-PSDrive -Name HKCR -PSProvider registry -Root Hkey_Classes_Root};\n    if(!(test-path -LiteralPath 'HKCR:\\directory\\shell\\Atom')) { new-item -Path 'HKCR:\\directory\\shell\\Atom' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\directory\\shell\\Atom' -Name '(Default)'  -Value 'Open Folder with Atom';\n    if(!(test-path -LiteralPath 'HKCR:\\directory\\shell\\Atom\\command')) { new-item -Path 'HKCR:\\directory\\shell\\Atom\\command' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\directory\\shell\\Atom\\command' -Name '(Default)' -Value\n'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe \\\"%1\\\"';\n Set-ItemProperty -LiteralPath 'HKCR:\\directory\\shell\\Atom' -Name 'Icon'  -Value '\"C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe\"';;\n    if( -not (Test-Path -path HKCR:) ) {New-PSDrive -Name HKCR -PSProvider registry -Root Hkey_Classes_Root};\n    if(!(test-path -LiteralPath 'HKCR:\\directory\\background\\shell\\Atom')) { new-item -Path 'HKCR:\\directory\\background\\shell\\Atom' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\directory\\background\\shell\\Atom' -Name '(Default)'  -Value 'Open Folder with Atom';\n    if(!(test-path -LiteralPath 'HKCR:\\directory\\background\\shell\\Atom\\command')) { new-item -Path 'HKCR:\\directory\\background\\shell\\Atom\\command' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\directory\\background\\shell\\Atom\\command' -Name '(Default)' -Value\n'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe \\\"%V\\\"';\n Set-ItemProperty -LiteralPath 'HKCR:\\directory\\background\\shell\\Atom' -Name 'Icon'  -Value\n'\"C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe\"'; start-sleep 6;}catch{write-error 'That was not sucessful';start-sleep 8;throw;}\". This may take awhile, depending on the statements.\nWrite-Error : [ERROR] Running C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\powershell.exe with\n    if( -not (Test-Path -path HKCR:) ) {New-PSDrive -Name HKCR -PSProvider registry -Root Hkey_Classes_Root};\n    if(!(test-path -LiteralPath 'HKCR:\\shell\\Atom')) { new-item -Path 'HKCR:\\shell\\Atom' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\shell\\Atom' -Name '(Default)'  -Value 'Open with Atom';\n    if(!(test-path -LiteralPath 'HKCR:\\shell\\Atom\\command')) { new-item -Path 'HKCR:\\shell\\Atom\\command' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\shell\\Atom\\command' -Name '(Default)' -Value 'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe \\\"%1\\\"';\n    Set-ItemProperty -LiteralPath 'HKCR:*\\shell\\Atom' -Name 'Icon'  -Value '\"C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe\"';;\n    if( -not (Test-Path -path HKCR:) ) {New-PSDrive -Name HKCR -PSProvider registry -Root Hkey_Classes_Root};\n    if(!(test-path -LiteralPath 'HKCR:\\directory\\shell\\Atom')) { new-item -Path 'HKCR:\\directory\\shell\\Atom' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\directory\\shell\\Atom' -Name '(Default)'  -Value 'Open Folder with Atom';\n    if(!(test-path -LiteralPath 'HKCR:\\directory\\shell\\Atom\\command')) { new-item -Path 'HKCR:\\directory\\shell\\Atom\\command' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\directory\\shell\\Atom\\command' -Name '(Default)' -Value 'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe \\\"%1\\\"';\n    Set-ItemProperty -LiteralPath 'HKCR:\\directory\\shell\\Atom' -Name 'Icon'  -Value '\"C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe\"';;\n    if( -not (Test-Path -path HKCR:) ) {New-PSDrive -Name HKCR -PSProvider registry -Root Hkey_Classes_Root};\n    if(!(test-path -LiteralPath 'HKCR:\\directory\\background\\shell\\Atom')) { new-item -Path 'HKCR:\\directory\\background\\shell\\Atom' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\directory\\background\\shell\\Atom' -Name '(Default)'  -Value 'Open Folder with Atom';\n    if(!(test-path -LiteralPath 'HKCR:\\directory\\background\\shell\\Atom\\command')) { new-item -Path 'HKCR:\\directory\\background\\shell\\Atom\\command' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\directory\\background\\shell\\Atom\\command' -Name '(Default)' -Value 'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe \\\"%V\\\"';\n    Set-ItemProperty -LiteralPath 'HKCR:\\directory\\background\\shell\\Atom' -Name 'Icon'  -Value '\"C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe\"'; was not successful. Exit code was '121'.\nAt C:\\ProgramData\\Chocolatey\\chocolateyinstall\\helpers\\functions\\Start-ChocolateyProcessAsAdmin.ps1:46 char:5\n-     Write-Error $errorMessage\n-     ~~~~~~~~~~~~~~~~~~~~~~~~~\n  - CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n  - FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nDEBUG: Running 'Move-BadInstall' for Atom version: '0.150.0', packageFolder:'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0'\nWrite-Error : Could not move bad package Atom from 'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0' to 'C:\\ProgramData\\Chocolatey\\lib-bad': Exception calling \"Delete\" with \"2\" argument(s): \"The directory is not empty.\n\"\nAt C:\\ProgramData\\Chocolatey\\chocolateyinstall\\functions\\Move-BadInstall.ps1:21 char:5\n-     Write-Error \"Could not move bad package $packageName from '$packageFolder' ...\n- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  - CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n  - FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nWrite-Error : Package 'Atom v0.150.0' did not install successfully: [ERROR] Running C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\powershell.exe with\n    if( -not (Test-Path -path HKCR:) ) {New-PSDrive -Name HKCR -PSProvider registry -Root Hkey_Classes_Root};\n    if(!(test-path -LiteralPath 'HKCR:\\shell\\Atom')) { new-item -Path 'HKCR:\\shell\\Atom' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\shell\\Atom' -Name '(Default)'  -Value 'Open with Atom';\n    if(!(test-path -LiteralPath 'HKCR:\\shell\\Atom\\command')) { new-item -Path 'HKCR:\\shell\\Atom\\command' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\shell\\Atom\\command' -Name '(Default)' -Value 'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe \\\"%1\\\"';\n    Set-ItemProperty -LiteralPath 'HKCR:*\\shell\\Atom' -Name 'Icon'  -Value '\"C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe\"';;\n    if( -not (Test-Path -path HKCR:) ) {New-PSDrive -Name HKCR -PSProvider registry -Root Hkey_Classes_Root};\n    if(!(test-path -LiteralPath 'HKCR:\\directory\\shell\\Atom')) { new-item -Path 'HKCR:\\directory\\shell\\Atom' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\directory\\shell\\Atom' -Name '(Default)'  -Value 'Open Folder with Atom';\n    if(!(test-path -LiteralPath 'HKCR:\\directory\\shell\\Atom\\command')) { new-item -Path 'HKCR:\\directory\\shell\\Atom\\command' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\directory\\shell\\Atom\\command' -Name '(Default)' -Value 'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe \\\"%1\\\"';\n    Set-ItemProperty -LiteralPath 'HKCR:\\directory\\shell\\Atom' -Name 'Icon'  -Value '\"C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe\"';;\n    if( -not (Test-Path -path HKCR:) ) {New-PSDrive -Name HKCR -PSProvider registry -Root Hkey_Classes_Root};\n    if(!(test-path -LiteralPath 'HKCR:\\directory\\background\\shell\\Atom')) { new-item -Path 'HKCR:\\directory\\background\\shell\\Atom' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\directory\\background\\shell\\Atom' -Name '(Default)'  -Value 'Open Folder with Atom';\n    if(!(test-path -LiteralPath 'HKCR:\\directory\\background\\shell\\Atom\\command')) { new-item -Path 'HKCR:\\directory\\background\\shell\\Atom\\command' };\n    Set-ItemProperty -LiteralPath 'HKCR:\\directory\\background\\shell\\Atom\\command' -Name '(Default)' -Value 'C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe \\\"%V\\\"';\n    Set-ItemProperty -LiteralPath 'HKCR:\\directory\\background\\shell\\Atom' -Name 'Icon'  -Value '\"C:\\ProgramData\\Chocolatey\\lib\\Atom.0.150.0\\tools\\Atom\\atom.exe\"'; was not successful. Exit code was '121'.\nAt C:\\ProgramData\\Chocolatey\\chocolateyinstall\\functions\\Chocolatey-NuGet.ps1:90 char:17\n-                 Write-Error \"Package `'$installedPackageName v$installedPackageV ...\n- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  - CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n  - FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nDEBUG: Evaluating NuGet output for line:\nFinished installing 'Atom' and dependencies - if errors not shown in console, none detected. Check log for errors if unsure.\nDEBUG: Running 'Get-ConfigValue' with configValue:'ksMessage'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'ksMessage'\nDEBUG: After checking the user config the value of 'ksMessage' is ''\nDEBUG: Value not found in the user config file - checking the global config\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'ksMessage'\nDEBUG: After checking the global config the value of 'ksMessage' is 'true'\nRegards,\nLuciano.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/625.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. I haven't run into this issue yet, but I will try to repro this next week\nafter the holiday.\nOn Tuesday, December 23, 2014, Luciano Paciornick notifications@github.com\nwrote:\n\n@ferventcoder https://github.com/ferventcoder Any news? I've been\nunable to update several of my Chocolatey-installed applications because of\nthis error...\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/625#issuecomment-67966429\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. I am unable to repro this. Would you folks do me a favor if this is limiting you? Install the RC of 0.9.9 and see if this is still a thing?\n. Sweet. We have a few issues to clear up that should go into an RC6 status, definitely watch for that. Also @cobrabr - you may want to visit the release notes - https://github.com/chocolatey/choco/wiki/ReleaseNotes to see what changes.\n. welcome to a real package manager. :/\n. Use --ignore-dependencies for now. https://github.com/chocolatey/choco/wiki/CommandsUpgrade#options-and-switches\nI think that is probably a bug though. Just FYI.\n. @cobrabr I filed https://github.com/chocolatey/choco/issues/98 \n. interesting.... :/\n. @cobrabr yeah, let's do that - would you mind filing a ticket over on https://github.com/chocolatey/choco/issues/new?\n. https://github.com/chocolatey/choco/issues/101\n. For a long time now. Head to the packages page and sign up.\nOn Wednesday, November 26, 2014, Eric Range notifications@github.com\nwrote:\n\nis it possible to get notifications about new Versions via RSS or Email?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/626.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. \n. Please be more clear next time in your ask. The answer to new versions \"of\ncertain\" packages is that it doesn't exist yet. If you want to file an\nenhancement request, please head over to chocolatey/chocolatey.org and file\na request. Thanks!\nOn Wednesday, November 26, 2014, Eric Range notifications@github.com\nwrote:\n\nthis doesnt make sense?!?! why would i subscribe to all packages?? i just\nneed 2 or 3\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/626#issuecomment-64708035\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Also 402 > 4 so it will show lower in the results.\n4.402 versus 4.4 is where this evaluation happens, adding the third and\nfourth sets of version numbers does not shift everything right, the\nleftmost number is always major, followed by minor version.\nIt may help if you think of it like the following:\n4.402\n4.004.1\nOn Friday, November 28, 2014, Gary Ewan Park notifications@github.com\nwrote:\n\nThis simply means that the package is in the moderation queue, and as a\nresult, it will not be shown to search results. I am looking at the package\nnow, and if it fits all required criteria, it will be approved, otherwise,\nyou will be asked to make changes, and re-published the same version of the\npackage again, with changes.\nGary\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/627#issuecomment-64928469\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Merged into stable at https://github.com/chocolatey/chocolatey/commit/9947bae570efaf4d34027f53e3f371fab6328cd3\n. Is this a docs issue? I don't see this as a code issue. For matters such as this, it is a much better avenue to use the discussion list - chocolatey at googlegroups dot com.\n. @030 move /disablepush further to the left. \n. This is a duplicate of probably a few items. Uninstall is stupidly naive. We are rewriting choco and it doesn't suffer from this. \n. That said, you can just keep calling the uninstall or go to the folder and manually remove those items for now.\n. Duplicate of #389 \n. Apologies if I don't give you a direct answer but after answering the question several times already (all are searchable and readily readable) - I think we just need to document it on the wiki.\n. Also, questions work out much better on the mailing list - chocolatey at googlegroups dot com.\n. You can, if you provide a custom override for write-host. We do... that's how we log the output.\n. https://github.com/chocolatey/chocolatey/blob/master/src/helpers/functions/Write-Host.ps1\n. https://github.com/chocolatey/chocolatey/blob/master/src/helpers/functions/Write-Debug.ps1\n. https://github.com/chocolatey/chocolatey/blob/master/src/helpers/functions/Write-Error.ps1\n. See #416 and #411 \n. Closing as a duplicate\n. You are using an older npm. It is now bundled with Msi and newer versions\nare not released separately. Suggest you install nodejs.install instead.\nOn Monday, December 8, 2014, Ncage1974 notifications@github.com wrote:\n\nI used chocolatey to install node. I then went to install some packaged\nwith npm (using -g global option). Most packages are installed under\nc:\\ProgramData\\chocolatey\\bin and are available immediately. Examples of\npackages that are working correctly are grunt-cli, gulp, & yo. When i\ninstall bower it gets installed in\nC:\\ProgramData\\chocolatey\\lib\\nodejs.commandline.0.10.33\\tools. Of course\nit doesn't work because that directory isn't in my path. While i could\neasily add that to my path i'm thinking that might be a bad idea because as\nnode gets updated there will most likely be a new directory created under\n_\\lib_ with the new version. Is this a chocolatey issues or is this a\nnode/npm issue?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/636.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. What @gep13 said. :)\n. I appreciate the work, but with the rewrite just around the corner, I wouldn't add any new functionality to chocolatey other than in the helpers.\n. Not implementing in this case means not implementing in the current incarnation of Chocolatey.\n. Yes, -x86. It's even in the documentation.\nOn Friday, December 12, 2014, Mindaugas Pielikis notifications@github.com\nwrote:\n\nMySql.Workbench needs vcredist2013 x86. Is there a way to make a\ndependency to be x86?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/639.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Oh wait, I misread. Sorry. Not yet there is not without having a specific\nx86 package.\nOn Friday, December 12, 2014, Mindaugas Pielikis notifications@github.com\nwrote:\n\nMySql.Workbench needs vcredist2013 x86. Is there a way to make a\ndependency to be x86?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/639.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. I think this would be awesome! I am working on a CLA that would be required\nfor us to take something like this in, but if that is fine with you, then\nsweet!\nOn Saturday, December 13, 2014, Julian Krispel-Samsel \nnotifications@github.com wrote:\n\nHi. I'm a designer, frontend developer and windows user. Without\nchocolatey my life would be a lot harder so thank you!\nI sometimes offer free branding services to projects\nhttp://clojurecup.com I really like\nhttps://github.com/swannodette/om/issues/215.\nI'd love to do contribute branding to chocolatey. Let me know if you'd\napprove.\nCheers!\nJulian\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/640.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Yes. Something like that :)\nOn Saturday, December 13, 2014, Julian Krispel-Samsel \nnotifications@github.com wrote:\n\nAwesome! CLA? As in Copyright Licensing Agreement or sth like that?\n\nOn 13 Dec 2014, at 15:23, Rob Reynolds notifications@github.com\n\u0002amp\u0003#106;\u0002amp\u0003#97;\u0002amp\u0003#118;\u0002amp\u0003#97;\u0002amp\u0003#115;\u0002amp\u0003#99;\u0002amp\u0003#114;\u0002amp\u0003#105;\u0002amp\u0003#112;\u0002amp\u0003#116;\u0002amp\u0003#58;\u0002amp\u0003#95;\u0002amp\u0003#101;\u0002amp\u0003#40;\u0002amp\u0003#37;\u0002amp\u0003#55;\u0002amp\u0003#66;\u0002amp\u0003#37;\u0002amp\u0003#55;\u0002amp\u0003#68;\u0002amp\u0003#44;\u0002amp\u0003#39;\u0002amp\u0003#99;\u0002amp\u0003#118;\u0002amp\u0003#109;\u0002amp\u0003#108;\u0002amp\u0003#39;\u0002amp\u0003#44;\u0002amp\u0003#39;\u0002amp\u0003#110;\u0002amp\u0003#111;\u0002amp\u0003#116;\u0002amp\u0003#105;\u0002amp\u0003#102;\u0002amp\u0003#105;\u0002amp\u0003#99;\u0002amp\u0003#97;\u0002amp\u0003#116;\u0002amp\u0003#105;\u0002amp\u0003#111;\u0002amp\u0003#110;\u0002amp\u0003#115;\u0002amp\u0003#64;\u0002amp\u0003#103;\u0002amp\u0003#105;\u0002amp\u0003#116;\u0002amp\u0003#104;\u0002amp\u0003#117;\u0002amp\u0003#98;\u0002amp\u0003#46;\u0002amp\u0003#99;\u0002amp\u0003#111;\u0002amp\u0003#109;\u0002amp\u0003#39;\u0002amp\u0003#41;\u0002amp\u0003#59; wrote:\nI think this would be awesome! I am working on a CLA that would be\nrequired\nfor us to take something like this in, but if that is fine with you,\nthen\nsweet!\nOn Saturday, December 13, 2014, Julian Krispel-Samsel \nnotifications@github.com\n\u0002amp\u0003#106;\u0002amp\u0003#97;\u0002amp\u0003#118;\u0002amp\u0003#97;\u0002amp\u0003#115;\u0002amp\u0003#99;\u0002amp\u0003#114;\u0002amp\u0003#105;\u0002amp\u0003#112;\u0002amp\u0003#116;\u0002amp\u0003#58;\u0002amp\u0003#95;\u0002amp\u0003#101;\u0002amp\u0003#40;\u0002amp\u0003#37;\u0002amp\u0003#55;\u0002amp\u0003#66;\u0002amp\u0003#37;\u0002amp\u0003#55;\u0002amp\u0003#68;\u0002amp\u0003#44;\u0002amp\u0003#39;\u0002amp\u0003#99;\u0002amp\u0003#118;\u0002amp\u0003#109;\u0002amp\u0003#108;\u0002amp\u0003#39;\u0002amp\u0003#44;\u0002amp\u0003#39;\u0002amp\u0003#110;\u0002amp\u0003#111;\u0002amp\u0003#116;\u0002amp\u0003#105;\u0002amp\u0003#102;\u0002amp\u0003#105;\u0002amp\u0003#99;\u0002amp\u0003#97;\u0002amp\u0003#116;\u0002amp\u0003#105;\u0002amp\u0003#111;\u0002amp\u0003#110;\u0002amp\u0003#115;\u0002amp\u0003#64;\u0002amp\u0003#103;\u0002amp\u0003#105;\u0002amp\u0003#116;\u0002amp\u0003#104;\u0002amp\u0003#117;\u0002amp\u0003#98;\u0002amp\u0003#46;\u0002amp\u0003#99;\u0002amp\u0003#111;\u0002amp\u0003#109;\u0002amp\u0003#39;\u0002amp\u0003#41;\u0002amp\u0003#59; wrote:\n\nHi. I'm a designer, frontend developer and windows user. Without\nchocolatey my life would be a lot harder so thank you!\nI sometimes offer free branding services to projects\nhttp://clojurecup.com I really like\nhttps://github.com/swannodette/om/issues/215.\nI'd love to do contribute branding to chocolatey. Let me know if you'd\napprove.\nCheers!\nJulian\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/640.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n\u2014\nReply to this email directly or view it on GitHub.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/640#issuecomment-66878126\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Interesting. I'm really impressed with that latest design. It has less of a blocky feel.\nSome things I like:\n- It captures the essence of a package that is being unwrapped to get to the inside, it's what's inside the package that counts.\n- The design is smooth. This signifies the process is a smooth transition from one state to another.\n- It's simple but not over simplistic. This signifies another essence of choco. A tool that is super simple to use and create packages with.\n- I think you are really starting to capture the essence of Chocolatey (as I described above).\nSome things I'd like you to keep thinking about:\n- It should show a transition of moving from non-real to very real in a sense that you go from a concept of \"choco install\" to having real software on your machine.\n- I'm not in love with the package wrapper color. Would prefer some contrast between the chocolatey goodness in the wrapper but somewhat darker on the wrapping. Should still really stand out against a black background.\n- I'm not sure about the skew. It's interesting and I think I'm starting to like it, but trying to determine if it adds or takes away from the design. I think it adds but I'm still chewing on it a bit.\nFor the packages themselves, I feel that this design would be too much/too long. So perhaps an icon that is necessary as well. Some key points for an icon:\n- It should be square.\n- Still captures the essence of unwrapping a package to get to the goodness inside.\n- Is simple but not over-simplistic.\n- No letters, numbers or words. Should stand out as an icon alone.\n- Looks good at 16x16 all the way up to 512x512. \n- Maybe the current icon captures that already?\n. updated my last set of comments a bit. @juliankrispel This is looking really good!\n. Make the C white?\n. @juliankrispel can you render the last image with a colon so we can get a side by side? https://github.com/chocolatey/chocolatey/issues/640#issuecomment-70228696\n. @juliankrispel color of the wrapping - The lighter color on https://chocolatey.org \n\n. I missed mentioning it but I showed your designs to my wife and kids and they also preferred #8 then #6. \n. We have plans for a redesign of the site - https://github.com/chocolatey/chocolatey.org/issues/149 - your last image fits right in there, although some of that will break out to other pages.\n. I'm digging #8 with the white Chocolatey - I also like #6 quite a bit. With the icon I'm a fan of no colon. 1b with white C is also quite interesting.\n. @juliankrispel yes, Will get with you soon on some website changes...\n. Hi @juliankrispel - checking in. I noticed that the CLA I sent has still not been signed and would like to move forward.\n. Unfortunately I don't have the assets to work with this and Julian appears to be MIA (no email response, not sure if that means I'm falling into his spam folder or something).\nSo I'm attempting to recreate some of this. \nTrying to recreate the font, I'm finding Hummingbird Pro similar to the font above:\n- http://marketplace.veer.com/font/Hummingbird-Bold-UMT9002141?skeywords=script%20or%20handwriting (Set the tracking to -2)\n\nHere are some other interesting fonts:\n- http://marketplace.veer.com/font/Hummingbird-UMT9002083?skeywords=script%20or%20handwriting\n- http://marketplace.veer.com/font/Bernhard-Script-Complete-RRT0011520?skeywords=calligraphy#\n. Alternative font that looks really cool is Jolly Roger:\n- http://marketplace.veer.com/font/Jolly-Roger-RRT0011505?skeywords=calligraphy\n  \n. Byron Bold is also pretty interesting\n- http://marketplace.veer.com/font/Byron-RRT0010014?skeywords=calligraphy\n  \n. Ganache (I already love the name):\n- http://marketplace.veer.com/font/Ganache-UMT9002810?skeywords=script%20or%20handwriting\n  \nProbably would track to -2 or -1 though.\n. Not sure what happened @juliankrispel - I've sent you about 4-5 emails over the last year with no response. I should have just came back here and mentioned so on GitHub as it appears my emails didn't reach you for some reason. :/\n. I have the AI file but it is only has the assets from the very first part of this discussion. Nothing past https://github.com/chocolatey/chocolatey/issues/640#issuecomment-69870283\n. I was not using that email (didn't know that one) and that was likely the problem. The email we were communicating on was your yahoo one (same as listed on your github profile).\n. This is done. Super awesome logo...\n. You should search and watch the video on the new chocolatey. It actually\nhas a help menu that is as you describe - aka a help menu that is actually\nhelpful. :)\nOn Saturday, December 13, 2014, Zenobius Jiricek notifications@github.com\nwrote:\n\nCurrently it looks like this:\nVersion: '0.9.8.28'\nInstall Directory: 'C:\\ProgramData\\chocolatey'\n== Chocolatey? ==\"I'm a tools enabler, a global silent installer. I met your mother. Some want to call me apt-get for Windows, I just want to get #chocolatey!\"\nChocolatey is a package manager for Windows (like apt-get but for Windows).\n It was designed to be a decentralized framework for quickly installing\n applications and tools that you need. It is built on the NuGet\n infrastructure currently using PowerShell as its focus for delivering\n packages from the distros to your door, err computer.\nChocolatey is brought to you by the work and inspiration of the community,\n the work and thankless nights of the Chocolatey Team\n (https://github.com/orgs/chocolatey/members), and Rob (@ferventcoder)\n heading up the direction.\nYou can host your own sources and add them to chocolatey, you can extend\n chocolatey's capabilities, and folks, it's only going to get better.\n== Chocolatey gods? ==\nHumor related to playing off of tiki gods. We like humor. Don't take life so seriously, you will never get out alive.== Release Notes ==https://github.com/chocolatey/chocolatey/wiki/ReleaseNotes== Package License Acceptance Terms ==The act of running chocolatey to install a package constitutes acceptance of the license for the application, executable(s), or other artifacts that are brought to your machine as a result of a chocolatey install.This acceptance occurs whether you know the license terms or not. It is suggested that you read and understand the license terms of any package you plan to install prior to installation through chocolatey.If you do not accept the license of a package you are installing, please uninstall it and any artifacts that end up on your machine as a result of the install.== Waiver of Responsibility ==The use of chocolatey means that an individual using chocolatey assumes the responsibility for any changes (including any damages of any sort) that occur to the system as a result of using chocolatey.This does not supercede the verbage or enforcement of the license for chocolatey (currently Apache 2.0), it is only noted here that you are waiving any rights to collect damages by your use of chocolatey.It is recommended you read the license (http://www.apache.org/licenses/LICENSE-2.0) to gain a full understanding (especially section 8. Limitation of Liability) prior to using chocolatey.== Commands ==For all commands check out the command reference at: https://github.com/chocolatey/chocolatey/wiki/CommandsReference * Search - choco search something * List locally installed packages - choco list -lo * Install - choco install baretail * Update - choco update baretail * Uninstall - choco uninstall baretail * Install ruby gem - choco install compass -source ruby * Install python egg - choco install sphynx -source python * Install windows feature - choco install IIS -source windowsfeatures * Install webpi feature - choco install IIS7.5Express -source webpiMore advanced commands and switches listed on the command reference, including how you can force a package to install the x86 version of a package. Examples:  * choco install nunit  * choco install nunit -version 2.5.7.10213  * choco install packages.config  * choco update nunit -source http://somelocalfeed.com/nuget/  * choco help  * choco search nunit  * choco list -localonly  * choco version  * choco version nunit  * choco uninstall nunit  * choco install sphynx -source python== Create Packages? ==We have some great guidance on how to do that. Where? I'll give you a\n hint, it rhymes with sticky!\n https://github.com/chocolatey/chocolatey/wiki/CreatePackages\nIn that mess there is a link to the Helper Reference -\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/641#issuecomment-66899228\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Questions should be asked on the mailing list. Chocolatey at google groups\ndot com. Thanks!\nOn Saturday, December 13, 2014, Zenobius Jiricek notifications@github.com\nwrote:\n\nI can understand wrapping around what ever voodoo it is that installs\nwindows features... but why create an interface that wraps around gem and\nruby.\nwhat value is created?\nwas the effort spent worth it?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/642.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. I think this actually may be a duplicate, believe it or not. :)\nOn Mon, Dec 15, 2014 at 12:43 PM, Antoine Turmel notifications@github.com\nwrote:\n\nIt would be nice to have a protocol like choco:// to install packages from\na single click.\nUbuntu already do this using AptURL:\nhttps://help.ubuntu.com/community/AptURL\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/643.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Duplicate of #394 \n. @dylan-k I loved your first version of a response, it was much better. :)\n. Removed the option entirely in 0.9.8.29. :)\n. It's not. It is something I also want, but it won't happen until after pkg indexes are implemented.\n. Moved to https://github.com/chocolatey/choco/issues/412\n. You can also just include the binary in the package and choco will put it\non the path. Make sure it has all required dlls and config files included.\nOn Sunday, December 21, 2014, Gary Ewan Park notifications@github.com\nwrote:\n\nHey, thanks Gary, will do.\nLet us know if you run into any problems with getting the package created.\nWe can leave this issue open as a reminder to improve the documentation in\nthis area.\nGary\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/646#issuecomment-67784906\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. @dcjulian29 When it comes to the folks who own the software posting the packages, I'm completely fine with binaries in the package, even prefer it. :)\n. In this case, if you put the output of your bin folder into the tools folder under a nuspec file and package it up,  you will be able to \nchoco install audioswitcher\nAudioSwitcher.exe\n. Thanks for creating this separately.\n. This may be a duplicate of #554 \n. Actually #307.\n. Closing this and updating #307 \n. Okay, this is partially resolved with #307 - adds a cacheLocation to the config file.\n. Some of this may need to carry over to chocolatey.org where the download and part of the initial install script are located.\n. The rest of this will be over at https://github.com/chocolatey/chocolatey.org/issues/139\n. Once 0.9.8.29 is out, you should be completely good to go.\n. @ahmedmohiduet can you indicate the exact command you used and what shell you are using?\nAlso please add -debug and post back the output from that as well. I'm looking for Posh version/chocolatey version/operating system version.\n. @ahmedmohiduet if you can get me that information, that would be great.\n. Until then, I'm closing this as a non-issue. Once you get me the information we can reopen this issue.\n. @ararog you should probably look at https://github.com/chocolatey/choco and particularly https://github.com/chocolatey/choco/issues/56\n. Actually this is a chocolatey issue - let me update the issue wording.\n. This has been moved to https://github.com/chocolatey/choco/issues/110\n. Closed because move.\n. Howdy,\n Posh is deprecated. Choco has been rewritten in c# and will be out in a\nfew weeks. Why don't we close this and pick up a discussion (mailing list)\non why these type of packages would be necessary? Then if we agree it's\ngood we can move forward with a pull request against that. Thanks!\nNote: We do have a contributors.md that pops up when you try to submit a\npull request or issue, in there we ask that you contact us before beginning\nnew work.\nOn Sunday, January 4, 2015, andulv notifications@github.com wrote:\n\n.run Packages ara packages that are not \"installed\", effectively turning\nthem into script-packages. The packages are not installed to lib\\ folder,\nbut in every other aspects they are identical to ordinary packages.\nWhen a package has the extension '.run' this happens upon install:\n1. The package is downloaded to lib-run\n2. tools\\chocolateyinstall.ps1 script is executed\n3. Package is removed from lib-run\nOne of the main advantages of .run packages as part of Chocolatey is\ndependencies. .run packages can depend on ordinary packages (or other .run\npackages). Ordinary packages can depend on .run packages.\nScenario 1 - AdvancedScriptPackage.run\n- Depends on scriptcs.\n- Includes AdvancedScript.cs in tools folder.\n- chocolateyinstall.ps1 does nothing but invoke 'scriptcs\n  AdvancedScript.cs'.\nScenario 2 - CustomBusinessApplication (ordinary package)\n- Depends on EnsureComputerMeetsCorporateStandards.run\n- Depends on CleanUpOldLegacyApplication.run\nI have done basic testing, and the changes seems to be working as intended.\nIf necessary I can do more testing and try to write some unit tests.\nYou can merge this Pull Request by running\ngit pull https://github.com/andulv/chocolatey run-package\nOr view, comment on, or merge it at:\nhttps://github.com/chocolatey/chocolatey/pull/651\nCommit Summary\n- Initial support for .run packages. (Packages that are not\n  \"installed\", effectively turning them into script-packages)\nFile Changes\n- M src/chocolatey.ps1\n  https://github.com/chocolatey/chocolatey/pull/651/files#diff-0 (1)\n- M src/functions/Chocolatey-NuGet.ps1\n  https://github.com/chocolatey/chocolatey/pull/651/files#diff-1 (47)\n- M src/functions/Run-NuGet.ps1\n  https://github.com/chocolatey/chocolatey/pull/651/files#diff-2 (7)\nPatch Links:\n- https://github.com/chocolatey/chocolatey/pull/651.patch\n- https://github.com/chocolatey/chocolatey/pull/651.diff\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/pull/651.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Awesome. Thanks for understanding. I'm trying to understand why you would want to remove traces of the install. We have similar packages that only run once, but you keep them around in case there are updates to the packages and you want to deploy that new functionality out.\n. Pending discussion a PR may be issued against new choco.\n. > I also noticed that even though the Kickstarter is funded and closed, that you have sold very few of the larger business pledges.\nI think this is mostly in part due to a short 30 day window, no guarantee that the kickstarter was going to be successful (until about 3 days out when it funded), businesses usually want to remain private, and most businesses go through a PO to do amounts over $1,000 (the PO process is usually longer than 10 days - they are not going to do it through a kickstarter). \nWould you guys have funded with your name on the public backers page and been able to do so with a credit card (not a PO)? That question is mostly curiosity, because most of the businesses I talked to indicated one or more of the above.\n. I wouldn't hold much water in the low amount of business licenses sold. I'd reserve that for when we have a billing system set up and what the potential is going to be. I'd imagine that we are going to see a few that I probably won't be able to name. :)\n. > Would it be possible to go for one of these pledges even though the Kickstarter is closed?\nUnfortunately, once a Kickstarter is over, you can't back the project. However next summer we will have a system set up for accepting payments and generating licenses. \n. A chocolatey package != install something\n. That's my first response. I will want to consider a bit more based on your example.\n. installing a package gets misinterpreted as only \"installing\" software on a machine, but it can also make configuration changes (which I believe you are defining as .run packages).\n. The question being, if you applied a configuration, how would you know it happened if you deleted the package?\nUpdate - What I mean is, if you have a large range of computers and you want to know which ones were successful and which ones were not applying a configuration, what would you need to do to see it happened? \nAlso, how does dpkg/rpm handle this concept now?\n. Concept of pinning packages prevents automatic upgrade of those packages.\n. Also, I wouldn't necessarily look at the community feed (chocolatey.org) as the end all be all of how most businesses use choco. The simple fact is that many, many of them NEVER hit the community feed. They are doing things somewhat differently with the packages they create, including binaries much more often and setting up configurations (so they can replace GPO). Sometimes folks couple those configurations with a configuration management tool like Puppet (config management means any change to the configuration of a computer, including settings and software). Chocolatey plugs right in as a package manager provider to Puppet.\n. I'm not dismissing this one straight off. Just trying to understand how it is different and necessary over just the normal concept of normal packages that do some configuration tasks.\n. That's :<\n. https://github.com/chocolatey/shimgen/issues/5\n. This is seen when chocolatey is being used with Windows 2003.\n. Definitely should stay with equals if possible.\n. perhaps. How does on PR wiki docs?\n. Can this be closed?\n. Does it have issues if you have <cacheLocation></cacheLocation> set? The intention is not for it to be removed.\n. No need. This will be completely unnecessary due to new codebase that\noverrides this. The logic in this codebase may be a bit naive, yes.\nOn Thursday, January 8, 2015, Glenn notifications@github.com wrote:\n\nIf you add in the empty tag then no error is thrown.\nIn my case when I upgraded chocolatey from x.28 to x.30 it was missing.\nHowever I could be experiencing a one-off error.\nWhile this has a low probability of occuring and the workaround is fairly\nsimple, I feel the logic error still needs attention;\n- If the cacheLocation tag should always be in the config file, then\n  the error 'Write-Error : A configuration value for cacheLocation was not\n  found' should be terminal and perhaps steps how to fix it be presented to\n  the user\nor\n- If it is possible that the cacheLocation tag to not exist, then\n  the case of $cacheLocation of being $null should be handled in the code as\n  per one of my proposals.\nI realise this is a low priority issue, so I'm happy to make the changes\nand submit a PR for it.\nAlso happy to write some pester tests for it.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/657#issuecomment-69281884\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. None of this code exists in choco.exe :(\n. January 15th-ish\n. Well likely a beta.\nOn Monday, January 12, 2015, Matt Wrock notifications@github.com wrote:\n\nOh ok. As a full release or alpha/beta?\nSent from my Windows Phone\n\nFrom: Rob Reynoldsnotifications@github.com\n\u0002amp\u0003#106;\u0002amp\u0003#97;\u0002amp\u0003#118;\u0002amp\u0003#97;\u0002amp\u0003#115;\u0002amp\u0003#99;\u0002amp\u0003#114;\u0002amp\u0003#105;\u0002amp\u0003#112;\u0002amp\u0003#116;\u0002amp\u0003#58;\u0002amp\u0003#95;\u0002amp\u0003#101;\u0002amp\u0003#40;\u0002amp\u0003#37;\u0002amp\u0003#55;\u0002amp\u0003#66;\u0002amp\u0003#37;\u0002amp\u0003#55;\u0002amp\u0003#68;\u0002amp\u0003#44;\u0002amp\u0003#39;\u0002amp\u0003#99;\u0002amp\u0003#118;\u0002amp\u0003#109;\u0002amp\u0003#108;\u0002amp\u0003#39;\u0002amp\u0003#44;\u0002amp\u0003#39;\u0002amp\u0003#110;\u0002amp\u0003#111;\u0002amp\u0003#116;\u0002amp\u0003#105;\u0002amp\u0003#102;\u0002amp\u0003#105;\u0002amp\u0003#99;\u0002amp\u0003#97;\u0002amp\u0003#116;\u0002amp\u0003#105;\u0002amp\u0003#111;\u0002amp\u0003#110;\u0002amp\u0003#115;\u0002amp\u0003#64;\u0002amp\u0003#103;\u0002amp\u0003#105;\u0002amp\u0003#116;\u0002amp\u0003#104;\u0002amp\u0003#117;\u0002amp\u0003#98;\u0002amp\u0003#46;\u0002amp\u0003#99;\u0002amp\u0003#111;\u0002amp\u0003#109;\u0002amp\u0003#39;\u0002amp\u0003#41;\u0002amp\u0003#59;\nSent: \u200e1/\u200e12/\u200e2015 8:46 AM\nTo: chocolatey/chocolateychocolatey@noreply.github.com\n\u0002amp\u0003#106;\u0002amp\u0003#97;\u0002amp\u0003#118;\u0002amp\u0003#97;\u0002amp\u0003#115;\u0002amp\u0003#99;\u0002amp\u0003#114;\u0002amp\u0003#105;\u0002amp\u0003#112;\u0002amp\u0003#116;\u0002amp\u0003#58;\u0002amp\u0003#95;\u0002amp\u0003#101;\u0002amp\u0003#40;\u0002amp\u0003#37;\u0002amp\u0003#55;\u0002amp\u0003#66;\u0002amp\u0003#37;\u0002amp\u0003#55;\u0002amp\u0003#68;\u0002amp\u0003#44;\u0002amp\u0003#39;\u0002amp\u0003#99;\u0002amp\u0003#118;\u0002amp\u0003#109;\u0002amp\u0003#108;\u0002amp\u0003#39;\u0002amp\u0003#44;\u0002amp\u0003#39;\u0002amp\u0003#99;\u0002amp\u0003#104;\u0002amp\u0003#111;\u0002amp\u0003#99;\u0002amp\u0003#111;\u0002amp\u0003#108;\u0002amp\u0003#97;\u0002amp\u0003#116;\u0002amp\u0003#101;\u0002amp\u0003#121;\u0002amp\u0003#64;\u0002amp\u0003#110;\u0002amp\u0003#111;\u0002amp\u0003#114;\u0002amp\u0003#101;\u0002amp\u0003#112;\u0002amp\u0003#108;\u0002amp\u0003#121;\u0002amp\u0003#46;\u0002amp\u0003#103;\u0002amp\u0003#105;\u0002amp\u0003#116;\u0002amp\u0003#104;\u0002amp\u0003#117;\u0002amp\u0003#98;\u0002amp\u0003#46;\u0002amp\u0003#99;\u0002amp\u0003#111;\u0002amp\u0003#109;\u0002amp\u0003#39;\u0002amp\u0003#41;\u0002amp\u0003#59;\nCc: Matt Wrockmatt@mattwrock.com\n\u0002amp\u0003#106;\u0002amp\u0003#97;\u0002amp\u0003#118;\u0002amp\u0003#97;\u0002amp\u0003#115;\u0002amp\u0003#99;\u0002amp\u0003#114;\u0002amp\u0003#105;\u0002amp\u0003#112;\u0002amp\u0003#116;\u0002amp\u0003#58;\u0002amp\u0003#95;\u0002amp\u0003#101;\u0002amp\u0003#40;\u0002amp\u0003#37;\u0002amp\u0003#55;\u0002amp\u0003#66;\u0002amp\u0003#37;\u0002amp\u0003#55;\u0002amp\u0003#68;\u0002amp\u0003#44;\u0002amp\u0003#39;\u0002amp\u0003#99;\u0002amp\u0003#118;\u0002amp\u0003#109;\u0002amp\u0003#108;\u0002amp\u0003#39;\u0002amp\u0003#44;\u0002amp\u0003#39;\u0002amp\u0003#109;\u0002amp\u0003#97;\u0002amp\u0003#116;\u0002amp\u0003#116;\u0002amp\u0003#64;\u0002amp\u0003#109;\u0002amp\u0003#97;\u0002amp\u0003#116;\u0002amp\u0003#116;\u0002amp\u0003#119;\u0002amp\u0003#114;\u0002amp\u0003#111;\u0002amp\u0003#99;\u0002amp\u0003#107;\u0002amp\u0003#46;\u0002amp\u0003#99;\u0002amp\u0003#111;\u0002amp\u0003#109;\u0002amp\u0003#39;\u0002amp\u0003#41;\u0002amp\u0003#59;\nSubject: Re: [chocolatey] write to the correctly scoped chocolateyErrored\nvariable (#658)\nJanuary 15th-ish\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/pull/658#issuecomment-69600945\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/pull/658#issuecomment-69611019.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. I will likely go ahead on this one.\n. This looks like a fix for #568 (ha, transposed! Wild!)\n. Merged into stable at https://github.com/chocolatey/chocolatey/commit/bcea921831373864a908f4d48e8fbd0c390bd2b6\n. Released as well a little while ago.\n. Duplicate of #568\n. That's the problem. Get-ToolsRoot is really the name of this. It's horrrrrribly named.\n. The problem is that the terminology of the command is so bad, you and many others have identified it as essentially the same location as c:\\programdata\\chocolatey\\bin when in fact it represents something else entirely.\n. There is a concept of a place where you can install tools due to two reasons - \n1) current POSH choco putting version numbers on folders and \n2) folks want a place on the system out of the choco folders where they can put tools.\nThis is basically a location that a user can specify as ToolsRoot. \nNow muddy that up and call it BinRoot instead.\n. Do we need a bin root? Or is it that choco is not doing a sufficient job in some cases?\n. > I don't know. I prefer a non-shimmed binRoot for command line tools\nThis is what I'm curious about. Is it the older shims that were batch files? Is it performance? What hesitations do you have? Brutal honesty is fine here.\n. Tools (or portables) in this context refers to the actual software that does not come with a native installer, which is like git for windows portable zip compared to git for windows install. If software is offered as an archive of some sort in addition to or instead of through an installer - that is what is meant by \"tools.\" We actually have a pretty extensive definition of portables vs install in the context of chocolatey in the faq on the wiki.\n. @CMCDragonkai Shim, not symlink. And no, only executables found in the package directory will be shimmed automatically. Anything else that one wants to shim, they would need to use Install-BinFile.\nReferences:\n- https://github.com/chocolatey/choco/wiki/HelpersReference\n. This is fixed in choco with https://github.com/chocolatey/choco/issues/631\n. The next upgrade is going to automatically move choco, I've just finished\ntesting that code. Hmm, what we could do is have you set an environment\nvariable that it would explicitly look for and not do the move. The message\nis gone as well.\nWhat do you think of ChocolateyKeepRootDirectoryIUnderstandThe\nSecurityIssuesAndDoNotCare? Too long?  :)\nHow about ChocolateyAllowInsecureRootDirectory?  Create it and set it to\ntrue.\nOn Friday, January 16, 2015, masaeedu notifications@github.com wrote:\n\nI explicitly set the ChocolateyInstall env variable to C:\\Chocolatey, and\nthe installation went smoothly and moved chocolateyInstall over to that\nfolder. Now I have to look at this every time I run any command:\n[image: capture]\nhttps://cloud.githubusercontent.com/assets/3674056/5787378/0e7bf334-9dca-11e4-80c7-190485ebd63f.PNG\nIs there a way to suppress the message (it would also be great if the\nentire decision making tree that leads to the message being shown could be\ntaken out; I'm not sure if that is the primary factor, but all chocolatey\ncommands are pretty darn slow right now).\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/661.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. I guess I wasn't clear. No matter what, choco will not install or upgrade\ninto that directory (aside from manually) unless we set up the additional\nenv variable.\nOn Friday, January 16, 2015, masaeedu notifications@github.com wrote:\n\nI don't have that much stuff installed. If the message is gone in the next\nversion, I could just nuke my directory, get the latest version, then\ninstall again with the same environment vars config (which I'm assuming\nwill land my chocolatey install in C:\\Chocolatey again, sans annoying\nmessages). That way you wouldn't have to add the one off option you're\ndescribing.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/661#issuecomment-70352634\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. THere are other options for install. - Can you take a look at those as a workaround for now? https://github.com/chocolatey/chocolatey/wiki/Installation\n. Download the package, unzip it (https://chocolatey.org/api/v2/package/chocolatey/) In the tools folder is a chocolateyInstall.ps1, run it with PowerShell. If it doesn't work, you likely have not met the requirements.\n. For full instructions, I added the following: https://github.com/chocolatey/chocolatey/wiki/Installation#download--powershell-method\n. It's looking for $env:SystemDrive coming back with C: and then giving you a message that Drive C doesn't exist. \n. Actually this is even more interesting. It happens before that - \n``` powershell\n$toolsPath = (Split-Path -parent $MyInvocation.MyCommand.Definition)\nensure module loading preference is on\n$PSModuleAutoLoadingPreference = \"All\";\n$modules = Get-ChildItem $toolsPath -Filter *.psm1\n$modules | ForEach-Object {\n    $psm1File = $_.FullName;\n    $moduleName = $([System.IO.Path]::GetFileNameWithoutExtension($psm1File))\n    remove-module $moduleName -ErrorAction SilentlyContinue;\n    import-module -name  $psm1File;\n}\nInitialize-Chocolatey\n```\nFor some reason it doesn't recognize the $psm1File path.\n. Here's what I want you to do. Edit that chocolateyInstall.ps1 to be:\n``` powershell\n$toolsPath = (Split-Path -parent $MyInvocation.MyCommand.Definition)\nWrite-Output \"`$toolsPath = $toolsPath\"\nensure module loading preference is on\n$PSModuleAutoLoadingPreference = \"All\";\n$modules = Get-ChildItem $toolsPath -Filter *.psm1\n$modules | ForEach-Object {\n    $psm1File = $_.FullName;\n    Write-Output \"`$psm1File = $psm1File\"\n    $moduleName = $([System.IO.Path]::GetFileNameWithoutExtension($psm1File))\n    remove-module $moduleName -ErrorAction SilentlyContinue;\n    import-module -name  $psm1File;\n}\nInitialize-Chocolatey\n```\nRun that and put the results back in this ticket please.\n. Do you have any idea why it is searching for C?\nThis seems a powershell issue, not a chocolatey issue. It seems like it wants to import the module to somewhere on the C drive (which may not exist).\nI'd also like the output of $env:SystemDrive from those machines.\nAlso, are those drives local drives or network mapped drives? You can't use network mapped drives without setting proper permissions for .Net. That is out of the context of this issue for me to explain that one - https://www.google.com/webhp?ie=UTF-8#q=.net%20permissions%20network%20share\n. If it is a network mapped drive, you will need to set permissions appropriately, some helpful articles:\n- https://www.sellsbrothers.com/posts/Details/1519\n- http://stackoverflow.com/questions/3718697/nant-failing-with-bad-permissions-on-build-server\n- http://blogs.msdn.com/b/shawnfa/archive/2004/12/30/344554.aspx\n. Sounds like first you need to fix $env:SystemDrive to the proper system drive. It should have been done based on the way the computer had the system drive moved.\nThat is an environment variable and when wrong can affect quite a few things.\n. I am curious if F: and S: drives are network mapped drives. Trying to run code from there without the proper trust set up is going to cause you issues. It's possible you haven't hit those yet due to your first issue.\n. Hmmm, that's no bueno. I think we'll want you to jump on choco.exe as soon as we have a beta available. Until then you could set the $env:PSModulePath explicitly in chocolatey.cmd as part of starting it up. It will only affect chocolatey while it is running.\n. I'm not sure if this is is still affected in the c# version. If you find this is still the case, please open an issue over at https://github.com/chocolatey/choco/issues/new and reference this issue. Thanks! \n. Duplicate of https://github.com/chocolatey/chocolatey/issues/568\n. #658 implements a fix for that.\n. You went global - @mwrock went script - https://github.com/chocolatey/chocolatey/pull/658\n. Hmm... Do you think folks will want a 0.9.8.x along with the new choco\nclient at 0.9.9?\nOn Tuesday, January 20, 2015, Rich Siegel notifications@github.com wrote:\n\nI would love to see one of these 2 go in as it has required me to fork for\ninternal use. I put the changes in that @ferventcoder\nhttps://github.com/ferventcoder unwound :) despite them being an ugly\nfix.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/pull/664#issuecomment-70659364.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Closing this to prefer #658.\n. Path persisted or local shell path?\n. Do you know if these packages that are being installed/updated are using Install-ChocolateyPath? \n. I could see an issue with the way it would expand registry values on update. I did some work recently to keep that from happening in other tool. I plan to bring back some of that to choco as well.\n. I'll close for now. Feel free to open a new issue and reference this (or just comment here again) if you run into this issue again. \n. Thanks for the follow up! \n. If you are in cmd.exe and not powershell you can type refreshenv\n. Chocolatey comes with a batch file named the above and will query the registry and reset all of your environment variables.\n. Perhaps we need more documentation surrounding that.\n. It's an issue with Windows inability to refresh shells. It doesn't have\nanything to do with choco itself. Now that that is it off the way,\nrefreshenv is a stop gap for choco to keep you from having to close and\nreopen your cmd window. Its also mostly undocumented. The recommendation is\nthat you close and reopen your shell.\nYou can also do PowerShell if you call &\nc:\\programdata\\chocolatey\\chocolateyinstall\\helpers\\Update-Session.ps1 (the\npath may not be exactly right but you get the idea)- it may require\nimporting the module first and then calling update-session.\nOn Tuesday, January 27, 2015, Andy Li notifications@github.com wrote:\n\nIs it possible to get RefreshEnv to work in powershell too?\nIf it cannot, there should be a warning message if RefreshEnv is used in\npowershell instead of a silent fail.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/666#issuecomment-71639225\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. It actually does work but you need to call it separately outside of a choco\ncall (which starts up and closes a separate posh process).\nOn Tuesday, January 27, 2015, Andy Li notifications@github.com wrote:\n\nDo you mean Update-SessionEnvironment\nhttps://github.com/chocolatey/chocolatey/wiki/HelpersUpdateSessionEnvironment?\nI tried adding it to the end of chocolateyInstall.ps1, but it seems to\nhave no effect - the path var is not updated in powershell.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/666#issuecomment-71654814\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Yes, they are. But anything they do with respect to environment vars only\nlasts during that choco run. Once it comes back to the shell, all child\nprocess changes are gone. It would be an egregious security issue with\nWindows if child processes did more than they do to the parent process.\nI'm giving you an option for updating your environment variables. Also\nundocumented and not supported. Ymmv. Remember, you can just close and\nreopen your shell as well.\nOn Tuesday, January 27, 2015, Andy Li notifications@github.com wrote:\n\nUmm.. I thought the helpers are meant to be called inside\nchocolateyInstall.ps1...\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/666#issuecomment-71655906\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. @ahmedmohiduet does this fail if you switch over to 0.9.9?\n. I see those images fine? \n. Thanks.\n. Will be fixing in chocolatey/choco\n. Well apparently the commit didn't close this but https://github.com/chocolatey/choco/wiki/AutomaticPackages#testing-ketarinchocopkgup and https://github.com/chocolatey/choco/wiki/AutomaticPackages/_compare/5701cb8178cb7449de3c6fcc6d3f6efca03ddc09...6f6e97c164a85a556cb7fbab81b4246adde24947\n. https://github.com/chocolatey/choco/blob/master/src/chocolatey.resources/helpers/functions/Write-ChocolateySuccess.ps1 ( still need to remove it from https://github.com/chocolatey/choco/blob/master/src/chocolatey.resources/helpers/functions/Write-ChocolateyFailure.ps1 ) \n. Note that these fixes are in the NEW repo. This repo is currently being deprecated. https://github.com/chocolatey/choco\n. This is closed now with https://github.com/chocolatey/choco/commit/eed1f5df88a94da88a930340b3226d97db5e4626\n. It is updated. See for yourself by adding the following to your chocolateyInstall.ps1:\npowershell\nWrite-Host $env:PSModulePath\nUpdate-SessionEnvironment\nWrite-Host $env:PSModulePath\nNow, once chocolatey EXITS and you come back to your shell (which is likely powershell), $env:PSModulePath is whatever the shell was started with + any changes you have explicitly set.\nIf you want Update-SessionEnvironment to work, you need to import the chocolateyInstaller.psm1 module into your current shell session and call Update-SessionEnvironment. \nHTH.\n. For clarity, this is not a chocolatey issue, this is is how child processes work on Windows. They have limited abilities to affect their parent process, which we can all agree is a good thing based on security issues that having that ability would create.\n. Also a duplicate of https://github.com/chocolatey/chocolatey/issues/666\n. I think part of the problem is that you believe that chocolatey is meant to be invoked from PowerShell because it is written in PowerShell and it's not meant to be a powershell module/script. It's a tool that can be executed from any shell. Let's be completely clear - this chocolatey is written in POSH. It is within days of being deprecated for choco (https://github.com/chocolatey/choco) which is written in C# and has a posh install provider. \nIt's entirely possible that we will include a module that you can add to your profile that will give you this behavior. \n. Duplicate of https://github.com/chocolatey/chocolatey/issues/577\n. By the way, already fixed and already out in 0.9.8.28+\n. Wrong repository. https://github.com/chocolatey/choco\n. But also, warnings are a good lead to what may later be an error. Warnings are usually information sake and may require action. Errors mean bad things.\n. Where is this? Thanks in advance!\n. Ah, just the shims. Sweet. Yeah I will get that fixed.\n. This was handled in https://github.com/chocolatey/shimgen/issues/9\n. Ping @dschinkel \n. It's been a few weeks. @dschinkel please feel free to comment on this issue or raise another one if you have more information. \n. That's interesting. I think we can make it happen, but not with this Chocolatey. Let's move this issue over to https://github.com/chocolatey/choco.\n. Wrong repository - there is already an API using OData.\n. Sorry for such a short answer. A question like this is better suited for the mailing list. If you want to learn more about the API, search for NuGet package metadata API.\nIf you still need to file an issue for enhancement, please do so on https://github.com/chocolatey/chocolatey.org\n. Just a quick mention. Some of these are already covered as\nissues/enhancements over at https://github.com/chocolatey/chocolatey.org.\nWould you mind subscribing/commenting on the existing issues and creating\nissues for the enhancements you can't find?\nAnd we can close this ticket as wrong repository.\nOn Tuesday, February 17, 2015, Christian Rondeau notifications@github.com\nwrote:\n\nAs a developer and heavy user of Chocolatey - especially due to the\nability to choco update all - I'd like to contribute to upgrading\npackages that are not maintained, or simply not updated \"fast enough\".\nMany packages, such as ChromeDriver2\nhttps://chocolatey.org/packages/ChromeDriver2, do not reference a\nGitHub repository with the NuGet and PowerShell source files, so it is\nimpossible for users like me to \"help\" other than poking the official\npackage maintainer.\nI think it would be greatly useful to force package maintainers to\nprovide a public repository, therefore allowing pull requests and\npotentially reducing the workload of the maintainer.\nThis is related to issue #308\nhttps://github.com/chocolatey/chocolatey/issues/308, and partially\ncovered in issue #342\nhttps://github.com/chocolatey/chocolatey/issues/342\nHere are a few other ideas that could reduce this problem; let me know if\nyou'd like me to create several issues, as they all try to solve the same\nproblem.\n- Ability to flag a package as outdated. Packages getting some kind of\n  a flag/download treshold would be marked as \"outdated in Chocolatey\" both\n  in the web site and in the command line output.\n- Ability to bypass the maintainer (maybe only for packages not\n  \"owned\" by the maintainer) for a specific version without taking ownership\n  (I guess this would require a fully separate approval and peer-review\n  process...)\n- Ability to create a \"branch\" of any package, and allowing you to\n  tell choco to use yours instead but still use the same name (so that I\n  can point back to the original package once it is updated) - this would be\n  a temporary workaround to avoid having to uninstall and reinstall just to\n  get a newer version faster\nWhat are your thoughts? Do you feel that the urge to get shiny new\npackages as quickly as possible as well as avoiding \"stale\" packages is an\nissue for enough users to warrant such solutions? Are there other\ninitiatives in Chocolatey that I missed?\nOh, and I have to say it: I just love Chocolatey, and can't imagine living\nwithout it. Congrats on the Kickstarter!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/678.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. We are no longer making any changes to this repository. Please submit your patch to https://github.com/chocolatey/choco instead.\n. Not necessary. The new choco (https://github.com/chocolatey/choco) has something called AutoUninstaller which will be able to see the program being installed and reverse the changes. \n. Removed the wiki a few months ago to help documentation get updated\n. +1, but please submit against https://github.com/chocolatey/choco\n. > How bad/undesirable would it be to pluralize the name of the param from $extension or $extensions?\n\nI suppose that's a breaking change in the case where someone has this param explicitly named in a call to this function.\nWhat's the sensitivity level to a param name change?\n\nWe can simply alias the parameter. Boom. Problem solved. :)\n\nI've unit tested my fix locally. Almost ready to send a PR. I'll include a unit test as per the contrib guidlines.\n\nPlease open this issue on https://github.com/chocolatey/choco and reference this issue. There is a ton more you need to look at with respect to contributing - see the updated guidelines at https://github.com/chocolatey/choco/blob/master/CONTRIBUTING.md - I will be a stickler on your commit messages since I spent so much time laying out exactly how I want them formatted.\n. Please file this against https://github.com/chocolatey/chocolatey.org.\n. It should already do this. If you can please explain, we'll decide whether this is an issue or not.\n. Not completely how you installed but maybe help us understand exact steps\nyou took to upgrade?\nOn Wednesday, March 11, 2015, esamo notifications@github.com wrote:\n\nChoco did not reindex installed packages.\nMicrosoft Windows [Wersja 6.1.7601]\nCopyright (c) 2009 Microsoft Corporation. Wszelkie prawa zastrze\u017cone.\nC:\\Windows\\system32>choco list -localonly\nChocolateyGUI 0.12.3\nPowerShell 4.0.20141001\nThese 2 listed I've installed right after reinstalling choco. While I had\nat least 10 entries on previous choco. As I mentioned but maybe not\nclearly, during choco uninstallation I've deleted folders named as\ninstalled packages.\nRegards & respect.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/685#issuecomment-78208061\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. You are not supposed to uninstall - that is for when you are removing\nchocolatey completely. You should just upgrade as normal - as instructed\neverywhere else. On uninstall you would be removing everything and thus\nthere is nothing to reindex.\nApologies if this is confusing - however you are the first person that has\nrun into this so I'm not sure if there is anything we need to change in\ndocumentation except maybe a large warning on the uninstall page.\nUnfortunately for you, you will need to put back all of your packages\nmanually.\nOn Wednesday, March 11, 2015, esamo notifications@github.com wrote:\n\nI've processed the first script on https://chocolatey.org which is\n@powershell -NoProfile -ExecutionPolicy unrestricted -Command \"iex\n((new-object net.webclient).DownloadString('\nhttps://chocolatey.org/install.ps1'))\" && SET\nPATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\nAnd before that I uninstalled choco as instructed here:\nhttps://github.com/chocolatey/chocolatey/wiki/Uninstallation, that is\ndeleting all related files. I didn't disturb logs and errors though....\nRegards & respect.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/685#issuecomment-78383321\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Thanks for reporting this. Unfortunately this implementation of the choco\nclient has been deprecated in v0.9.9+ for a C# rewrite at\nhttps://github.com/chocolatey/choco - you can upgrade now. :)\nOn Friday, March 13, 2015, mtman notifications@github.com wrote:\n\nThere is a bug in Split-Path (PS 4.0 Win7 x64), when I run:\npowershell -noprofile -noexit -command \"split-path -parent c:\\lorem\\ipsum.txt\"\nit outputs:\nFolder is: C:\\Documents and Settings\\All Users\\Desktop\\\nName is: Dostips.cmd\nTherefore, when I run choco install , all I get is bunch of\nerrors:\nJoin-Path : Cannot find drive. A drive with the name 'Name is' does not exist.\nSo I modified chocolatey.ps1 and everything works like a charm:\n$nugetChocolateyPath = (Split-Path -parent $MyInvocation.MyCommand.Definition)\n$nugetChocolateyPath = [System.IO.Path]::GetDirectoryName($MyInvocation.MyCommand.Definition)\n$nugetPath = (Split-Path -Parent $nugetChocolateyPath)\n$nugetPath = [System.IO.Path]::GetDirectoryName($nugetChocolateyPath)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/686.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Can you do a get-command split-path and add the output to this ticket?\nOn Friday, March 13, 2015, mtman notifications@github.com wrote:\n\nSo I upgraded using my patched version and unfortunately, the issue is\nstill relevant:\nC:\\Users\\mtman>choco install windirstat\nChocolatey v0.9.9.2\nInstalling the following packages:\nwindirstat\nBy installing you accept licenses for the packages.\nwindirstat v1.1.2.20140225\n Found 'chocolateyInstall.ps1':\n$packageName = 'windirstat'\n$fileType = 'exe'\n$url = 'http://prdownloads.sourceforge.net/windirstat/windirstat1_1_2_setup.exe'\n$silentArgs = '/S'\nInstall-ChocolateyPackage $packageName $fileType \"$silentArgs\" \"$url\"\nDo you want to run the script?\n NOTE: If you choose not to run the script, the installation will\n fail.\n Skip is an advanced option and most likely will never be wanted.\n1) yes\n 2) no [Default - Press Enter]\n 3) skip\nyes\n Get-Item : Cannot find drive. A drive with the name 'Folder is' does not exist.\n At C:\\ProgramData\\chocolatey\\helpers\\chocolateyInstaller.psm1:28 char:1\n- Get-Item $helpersPath\\functions*.ps1 |\n- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  - CategoryInfo          : ObjectNotFound: (Folder is:String) [Get-Item], DriveNotFoundException\n  - FullyQualifiedErrorId : DriveNotFound,Microsoft.PowerShell.Commands.GetItemCommand\n    Join-Path : Cannot find drive. A drive with the name 'Folder is' does not exist.\n    At C:\\ProgramData\\chocolatey\\helpers\\chocolateyInstaller.psm1:36 char:19\n- $extensionsPath = Join-Path \"$helpersPath\" '..\\extensions'\n-                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  - CategoryInfo          : ObjectNotFound: (Folder is:String) [Join-Path], DriveNotFoundException\n  - FullyQualifiedErrorId : DriveNotFound,Microsoft.PowerShell.Commands.JoinPathCommand\n    Test-Path : Cannot bind argument to parameter 'Path' because it is null.\n    At C:\\ProgramData\\chocolatey\\helpers\\chocolateyInstaller.psm1:37 char:13\n- if(Test-Path($extensionsPath)) {{\n-             ~~~~~~~~~~~~~~~~~\n  - CategoryInfo          : InvalidData: (:) [Test-Path], ParameterBindingValidationException\n  - FullyQualifiedErrorId : ParameterArgumentValidationErrorNullNotAllowed,Microsoft.PowerShell.Commands.TestPathCom\n    mand\n    Install-ChocolateyPackage : The term 'Install-ChocolateyPackage' is not recognized as the name of a cmdlet, function, s\n    cript file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is cor\n    rect and try again.\n    At C:\\ProgramData\\chocolatey\\lib\\windirstat\\tools\\chocolateyInstall.ps1:6 char:1\n- Install-ChocolateyPackage $packageName $fileType \"$silentArgs\" \"$url\"\n- ~~~~~~~~~~~~~~~~~~~~~~~~~\n  - CategoryInfo          : ObjectNotFound: (Install-ChocolateyPackage:String) [], CommandNotFoundException\n  - FullyQualifiedErrorId : CommandNotFoundException\n    windirstat install not successful.\n    Error while running 'C:\\ProgramData\\chocolatey\\lib\\windirstat\\tools\\chocolateyInstall.ps1'.\n    See log for details.\nChocolatey installed 0/1 package(s). 1 package(s) failed.\n See the log for details.\nFailures:\n- windirstat\nIt seems that Split-Path is used even more frequently in the new version.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/686#issuecomment-79456564\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Do you still get this with choco 0.9.9?\n. @kishore-mohan that's what I'm asking :)\n. or to be more clear - I don't run into this issue \n. That's a known change - 0.9.9 was quite a large change and we wanted to give tools that use automation some time to fix their stuff - see https://github.com/chocolatey/chocolatey.org/issues/162 and https://github.com/chocolatey/chocolatey.org/issues/163\n. Closing this due to age. If you are still running into this issue in the 0.9.9.x (and now 0.9.10.x), please open a new issue over at https://github.com/chocolatey/choco/issues/new. Thanks! \n. Yes you can. See choco new -h in choco 0.9.9+.\nAnd see https://github.com/chocolatey/choco/wiki/How-To-Host-Feed\n. Before you get too far down the line with these - wrong repo, log the\nissues at chocolatey/choco\nOn Thursday, March 19, 2015, Christian Rondeau notifications@github.com\nwrote:\n\nIf I decide not to continue with the uninstall by refusing to run the\nscript, I'm expecting not to receive a request to rollback. Here is an\nexample:\nDo you want to run the script?\n NOTE: If you choose not to run the script, the installation will\n fail.\n Skip is an advanced option and most likely will never be wanted.\n1) yes\n 2) no [Default - Press Enter]\n 3) skip\nno\nfilezilla upgrade not successful.\nUser cancelled powershell portion of installation for 'C:\\ProgramData\\chocolatey\\lib\\filezilla\\tools\\chocolateyInstall.ps1'. Use skip to install without run. Unsuccessful operation for filezilla.  Do you want to rollback to previous version (package files only)? 1) yes [Default - Press Enter] 2) nono\nNote that the rollback message itself could also be improved :)\nFor more details:\nhttps://groups.google.com/forum/#!topic/chocolatey/UVncL7PxXRg\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/696.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Fixed the link. \n. Closed now that it has been moved.\n. Um, we do in 0.9.9\n. Wrong repo\n. Second, this has been discussed many many times. We do add it to process path by default. But due to built-in Windows security settings a sub process cannot affect the parent process, so when it's done running, those path changes don't make it up to the top-level process.\n. > This would allow all chocolatey packages that update the path to work in the same process - with no updates to packages and no fussing in scripts :)\nThey already do, as long as they are in the same process\n. You are getting this with 0.9.9+?\nWe had this fixed but it looks like I just reintroduced with the release I\ndid today.\nOn Sunday, March 29, 2015, Natan Vivo notifications@github.com wrote:\n\nI'm getting this error for any upgrade or install I'm running. Trying to\ndo a \"choco upgrade all\" will fail every package it finds with the same\nerror after asking to run the script.\nCalling command ['\"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -NoProfile -NoLogo -ExecutionPolicy Bypass -Command\n\"[System.Threading.Thread]::CurrentThread.CurrentCulture = '';[System.Threading.Thread]::CurrentThread.CurrentUICulture = ''; & im\nport-module -name 'C:\\ProgramData\\chocolatey\\helpers\\chocolateyInstaller.psm1'; & 'C:\\ProgramData\\chocolatey\\helpers\\chocolateyScr\niptRunner.ps1' -packageScript 'C:\\ProgramData\\chocolatey\\lib\\ilspy\\tools\\chocolateyInstall.ps1' -installArguments '' -forceX86 $fa\nlse -packageParameters '' -overrideArgs $false\"']\n false : The term 'false' is not recognized as the name of a cmdlet, function, script file, or operable program. Check t\n he spelling of the name, or if a path was included, verify that the path is correct and try again.\n At C:\\ProgramData\\chocolatey\\helpers\\chocolateyInstaller.psm1:24 char:17\n- $overrideArgs = false\n-                 ~~~~~\n  - CategoryInfo          : ObjectNotFound: (false:String) [], CommandNotFoundException\n  - FullyQualifiedErrorId : CommandNotFoundException\n    false : The term 'false' is not recognized as the name of a cmdlet, function, script file, or operable program. Check t\n    he spelling of the name, or if a path was included, verify that the path is correct and try again.\n    At C:\\ProgramData\\chocolatey\\helpers\\chocolateyInstaller.psm1:27 char:13\n- $forceX86 = false\n-             ~~~~~\n  - CategoryInfo          : ObjectNotFound: (false:String) [], CommandNotFoundException\n  - FullyQualifiedErrorId : CommandNotFoundException\nHere is the full debug output for upgrading a package:\nhttps://gist.github.com/nvivo/8bcb3646e93b7b707d8e\nAfter the rollback ilspy is not installed anymore even though chocolatey\nsays it is upgraded.\nI was getting this error with 0.9.8, then I did an upgrade to 0.9.9.3 but\nI'm getting the same error.\nI rebooted the machine after installing 0.9.9.3.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/701.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n. Fixing. Also, log issues over at chocolatey/choco repo please.\n. This was also mentioned in https://github.com/chocolatey/choco/issues/216 & https://github.com/chocolatey/choco/issues/215\n. Whoops @ShaneIsrael wrong repo. Please open at https://github.com/chocolatey/choco/issues (link to this and close this one)\n. Wrong repo - duplicate of https://github.com/chocolatey/choco/issues/64\n. Please open this in https://github.com/chocolatey/choco \n. Closing as not applicable - you already found the proper place to post the issue though\n. @hifriend21 do you have PowerShell installed?\n. Type where.exe powershell after updating your path locally like you did.\nIf it comes up with nothing, you need to ensure you install powershell first.\n. ~~Windows 7 - it should be there by default, but you can disable the Windows Feature.~~\n. Nevermind, scratch that. Not sure how you disable/remove it. Unless you lite the install.\n. Debug is a switch, not something that accepts parameters. Basically you are saying choco install cyg-get -y --debug AND choco install 1 -y --debug.\n. This is because we allow you to state choco install cyg-get git notepadplusplus\n. No worries. Try to log any future issues over at chocolatey/choco. You can also hop into gitter if you want to determine if you are seeing an issue or not.\n. https://github.com/chocolatey/choco\n. https://gitter.im/chocolatey/choco\n. Wrong repository. This goes to either chocolatey/choco, or most correctly to chocolatey/chocolatey.org\n. Here's the issue technically - the site was under heavy load and so things were timing out and it was returning the 404 HTML page as the zip. You will know, the zip will be about 5KB and if you rename it to .html you will see the error page html in a text editor.\nHowever yesterday at 17:00 PM CDT I put in a new caching strategy and increased the timeout to nearly remove this from happening in the future.\n. You should delete the file and give it a shot now.\n. I put this over on https://github.com/chocolatey/chocolatey.org/issues/236 and I will capture all of the technical details there.\n. Try removing pre when you call for a specific version. Does that work?\n. Thanks for the followup! \n. @magmax all future requests should go over to chocolatey/choco by the way. :)\n. Please file a request with the maintainers. This is not the place for package issues. Only if there is an issue with Chocolatey itself. Thanks!\n. We shut it off completely at one point, but must have missed it during the rewrite when we moved to NuGet.Core. I'll file an issue there.\n. Moved to  https://github.com/chocolatey/choco/issues/479\n. Howdy! This appears to he an issue with the package itself?\n. yes, use --force. If it also fails, you can look for skip. -n - See choco uninstall -h for options.\n. By the way, all future requests should go to chocolatey/choco repository. Thanks!\n. Thanks for filing this issue. However I believe you wanted to file it at https://github.com/chocolatey/choco?\n. No worries, I was trying to find the already created issue\n. This has been raised. I believe they are the same root cause.\n. Maybe not, thought it might be related to https://github.com/chocolatey/choco/issues/466, but perhaps it is https://github.com/chocolatey/choco/issues/262. \nI see you just raised https://github.com/chocolatey/choco/issues/497\n. Can you explain the problem a bit more? What are you seeing, what do you expect?\nPriority may be explained in choco source -h\n. Also, this is the wrong repository. \n. Please file this issue at https://github.com/chocolatey/choco/issues/new\n. That is a packaging issue. The maintainer needs to indicate the file is a GUI - see https://github.com/chocolatey/choco/wiki/CreatePackages#how-do-i-set-up-batch-redirects-for-applications-that-have-a-gui\nAlso, any further issues should be logged at https://github.com/chocolatey/choco.\n. Please contact the maintainers and ask them to make the adjustments. Thanks!\n. https://github.com/chocolatey/choco/issues/610\n. This repository is deprecated. Please see https://github.com/chocolatey/choco - your question is actually better to ask in Gitter. \n. Gitter is https://gitter.im/chocolatey/choco \n. ? \n. No worries. :D\n. Howdy wrong repo https://github.com/chocolatey/choco/issues/836\n. Howdy.\nWhen you went to create an issue, did you happen to read the note? \n\nThis is a duplicate of https://github.com/chocolatey/choco/issues/969\n. Big issue though - high priority for a 0.10.2 release. Follow along over on https://github.com/chocolatey/choco/issues/969, thanks! \n. @renerchen when you went to file the issue, did you happen to notice that the template that showed up in the text box said this repo is deprected and issues should be filed somewhere else (it had a link to the new location)? I'm curious, because we've had other people also do this and I want to understand if the messaging doesn't show up.. Here is the issue - you need to upgrade .NET framework to 4.5 so Chocolatey can auto add TLS 1.1 and 1.2. There are many sites that just will not work without at least TLS 1.1 and that is not in .NET Framework 4.0, only in 4.5+. \nThen you should no longer see that message. HTH.\nIf it does not, please head over to https://github.com/chocolatey/choco/issues/new and continue this discussion. Thanks! . @tiantianwei When you created this issue, it appears you did not read the following:\n\nTHIS REPOSITORY IS DEPRECATED. DO NOT CREATE AN ISSUE HERE.\nYou are looking for https://github.com/chocolatey/choco instead. Thanks!\n\nNote that it is still in your issue comments. Please advise on how we can make that clearer?\n. \nSecond, your issue is a packaging issue with the commmunity package repository. For that you want to follow up directly with the maintainers of the package. You can do that on the package page itself (look for Contact Maintainers on the left menu). HTH.. @tiantianwei I can not read Chinese. :D \nI am not a maintainer of the Bazel package on the community repository. You will want to follow up with the folks that are. At https://chocolatey.org/packages/bazel\n\nWhen you do followup, please tell them that they are using 'convertfrom-json', which is not available in PowerShell v2. HTH. @laxselocke please file an issue at https://github.com/chocolatey/choco/issues/new. Thanks! . ",
    "ldsenow": "I am having an error while installing one of the packages\nA positional parameter cannot be found that accepts argument 'proxy.company.private:8080'\n. the chocolatey version is 0.9.8.11 and I was installing nodejs. But not only installing nodejs \n. I am having an error while installing one of the packages\nA positional parameter cannot be found that accepts argument 'proxy.company.private:8080'\n. the chocolatey version is 0.9.8.11 and I was installing nodejs. But not only installing nodejs \n. ",
    "dansward": "Attempting to install not (cinst nodejs)\nWith those lines commented out I get...\nDownloading nodejs (http://nodejs.org/dist/v0.6.0/node.exe) to C:\\NuGet\\lib\\nodejs.0.6.0\\tools\\node.exe\n[ERROR] nodejs did not finish successfully. Boo to the chocolatey gods!\n[ERROR] Exception calling \"GetResponse\" with \"0\" argument(s): \"The remote server returned an error: (407) Proxy Authentication Required.\"\nWithout them commented out I get...\nDownloading nodejs (http://nodejs.org/dist/v0.6.0/node.exe) to C:\\NuGet\\lib\\nodejs.0.6.0\\tools\\node.exe\n[ERROR] nodejs did not finish successfully. Boo to the chocolatey gods!\n[ERROR] A positional parameter cannot be found that accepts argument '10.0.100.2:8080'.\nI do have a proxy in place and the argument it is complaining about is it. Without those lines commented it requests my credentials.\n. Attempting to install not (cinst nodejs)\nWith those lines commented out I get...\nDownloading nodejs (http://nodejs.org/dist/v0.6.0/node.exe) to C:\\NuGet\\lib\\nodejs.0.6.0\\tools\\node.exe\n[ERROR] nodejs did not finish successfully. Boo to the chocolatey gods!\n[ERROR] Exception calling \"GetResponse\" with \"0\" argument(s): \"The remote server returned an error: (407) Proxy Authentication Required.\"\nWithout them commented out I get...\nDownloading nodejs (http://nodejs.org/dist/v0.6.0/node.exe) to C:\\NuGet\\lib\\nodejs.0.6.0\\tools\\node.exe\n[ERROR] nodejs did not finish successfully. Boo to the chocolatey gods!\n[ERROR] A positional parameter cannot be found that accepts argument '10.0.100.2:8080'.\nI do have a proxy in place and the argument it is complaining about is it. Without those lines commented it requests my credentials.\n. ",
    "vermeeca": "FWIW, this seemed to work for me:\nps\nif (!$webclient.Proxy.IsBypassed($url))\n  {\n    #$cred = get-credential\n    $proxyaddress = $webclient.Proxy.GetProxy($url).Authority\n    Write-host \"Using this proxyserver: $proxyaddress\"\n    #$proxy = New-Object System.Net.WebProxy($proxyaddress)\n    #$proxy.credentials = $cred.GetNetworkCredential();\n    #$req.proxy = $proxy\n    $req.proxy.credentials = [System.Net.CredentialCache]::DefaultCredentials;\n  }\n. FWIW, this seemed to work for me:\nps\nif (!$webclient.Proxy.IsBypassed($url))\n  {\n    #$cred = get-credential\n    $proxyaddress = $webclient.Proxy.GetProxy($url).Authority\n    Write-host \"Using this proxyserver: $proxyaddress\"\n    #$proxy = New-Object System.Net.WebProxy($proxyaddress)\n    #$proxy.credentials = $cred.GetNetworkCredential();\n    #$req.proxy = $proxy\n    $req.proxy.credentials = [System.Net.CredentialCache]::DefaultCredentials;\n  }\n. ",
    "yoshimov": "Almost all packages are not working inside of our auth proxy with Chocolatey 0.9.8.20\nThe Chocolatey commands (clist, cver, etc.) are still working correctly, and it is working to retry the request with new credential when the proxy returns 407 status code.\nHere is my modification.\nhttps://github.com/yoshimov/chocolatey/commit/60705c3449e8c62a8bc01de00cabd06f044ee1cc\n. Almost all packages are not working inside of our auth proxy with Chocolatey 0.9.8.20\nThe Chocolatey commands (clist, cver, etc.) are still working correctly, and it is working to retry the request with new credential when the proxy returns 407 status code.\nHere is my modification.\nhttps://github.com/yoshimov/chocolatey/commit/60705c3449e8c62a8bc01de00cabd06f044ee1cc\n. ",
    "grenade": "Working with Chocolatey v0.9.8.23, cinst was not working from behind an ISA proxy using NTLM until C:\\Chocolatey\\chocolateyinstall\\helpers\\functions\\Get-WebFile.ps1 was modified like so:\npowershell\n  #if (!$webclient.Proxy.IsBypassed($url))\n  #{\n  #  $creds = [net.CredentialCache]::DefaultCredentials\n  #  if ($creds -eq $null) {\n  #    Write-Debug \"Default credentials were null. Attempting backup method\"\n  #    $cred = get-credential\n  #    $creds = $cred.GetNetworkCredential();\n  #  }\n  #  $proxyaddress = $webclient.Proxy.GetProxy($url).Authority\n  #  Write-host \"Using this proxyserver: $proxyaddress\"\n  #  $proxy = New-Object System.Net.WebProxy($proxyaddress)\n  #  $proxy.credentials = $creds\n  # $req.proxy = $proxy\n  #}\n  if (!$webclient.Proxy.IsBypassed($url))\n  {\n    $proxyaddress = $webclient.Proxy.GetProxy($url).Authority\n    Write-host \"Using this proxyserver: $proxyaddress\"\n    $req.proxy.credentials = [net.CredentialCache]::DefaultCredentials\n  }\n. Working with Chocolatey v0.9.8.23, cinst was not working from behind an ISA proxy using NTLM until C:\\Chocolatey\\chocolateyinstall\\helpers\\functions\\Get-WebFile.ps1 was modified like so:\npowershell\n  #if (!$webclient.Proxy.IsBypassed($url))\n  #{\n  #  $creds = [net.CredentialCache]::DefaultCredentials\n  #  if ($creds -eq $null) {\n  #    Write-Debug \"Default credentials were null. Attempting backup method\"\n  #    $cred = get-credential\n  #    $creds = $cred.GetNetworkCredential();\n  #  }\n  #  $proxyaddress = $webclient.Proxy.GetProxy($url).Authority\n  #  Write-host \"Using this proxyserver: $proxyaddress\"\n  #  $proxy = New-Object System.Net.WebProxy($proxyaddress)\n  #  $proxy.credentials = $creds\n  # $req.proxy = $proxy\n  #}\n  if (!$webclient.Proxy.IsBypassed($url))\n  {\n    $proxyaddress = $webclient.Proxy.GetProxy($url).Authority\n    Write-host \"Using this proxyserver: $proxyaddress\"\n    $req.proxy.credentials = [net.CredentialCache]::DefaultCredentials\n  }\n. ",
    "rismoney": "This is a great idea.  Can we store the ignores in the config.xml where the sources will be?  This way a cup all accidental run does not have unintended consequences.\n. well if package foo.1.0.0 is on one source, but foo.1.0.1 is on another source, do you really want to cross sources?  My source names could be staging, test, dev, prod, and so latest might have different meanings.\nPerhaps we should store a source.txt file inside each package listed in the lib folder, and then use when performing a clist -lo -source example.com\n. I just saw this.   Precisely what I was thinking on the google board.  Are there challenges you see with this, because I think I can build something around this pretty easily.   I haven't worked with nuget long (or chocolatey more than a few days), but maybe this should ultimately address dependencies in nuspec.   Like force removal, manual step through dependencies,  or just the singleton specified.\n. I should have a pull request by Tues for uninstall sometime this weekend.  Just got it working!  Awesomeness\n. Agree on name for obvious reasons.\nI am not up to dependencies.   Have a few ideas, but all rely on persisting a dependency.file in some form.  Only until last dependency is removed can underlying be removed, unless forced.\nAgree on not prompting\n. Does chocolatey even know about dependencies or is this purely a nuget construct?\n. strictly nuget handling for now-\n@ferventcoder https://github.com/chocolatey/chocolatey/blob/master/src/functions/Chocolatey-NuGet.ps1#26 is each $line here the packages and dependencies returned by nuget?  \nWe can check if $line is not  match for $packagename (therefore it must be a dependency) to place a flag in \\lib\\$dependency, like dependency_of.XYZ.ver\nThat's trivial.\nThe uninstaller then needs to do what?  We instead save $nugetOutput L24 to \\lib\\$packagefolder and reparse it at uninstall time.\nFurther we can make L 29+ we can make it install/uninstall agnostic.\n. so before write-chocolatey-failure.ps1 is called during an cinst then a remove-item needs to occur on \\lib\\$packagename.\nI find myself deleting \\lib\\$packagename manually on fails regularly.\n. So I took in your change LucidSage- I like the bulk of what you are attempting!  I am confused as it now uses the nuget registered source list (you add chocolatey.org) to that list during setup?\nWhat if I have my own internal repo?  I run nuget sources?  Where does chocolatey read in the sources? I didn't read the whole pull-req.\nI was really hoping for a chocolatey sources command to not mess with nuget, but this might be solid.\n. Awesome, thanks for the clarification!  It might be easy to cherry pick most of your commits and just leverage a specific config file.    I had been search/replacing all this since I run a chocolatey org internal and didn't want to use actual internet chocolatey.org\n. I am not sure how ;)... I haven't built unit tests for powershell, though I would like to learn.\n. Wow Pester looks like an awesome project and I like how you used it.  I am not sure if I have the cycles to dive into crafting this (maybe 1-2 months before I can revisit pester) since it would be yak shaving against my short term continous integration objectives. \n. tyvm!\n. you're awesome.  thanks for acceptance into your project!  btw-I just hecked out some blogs you wrote, and enjoyed the content, particularly the remote workers/highly collaborative stuff.\n. Great idea-Thoughts on this- cinst msi1,msi2,msi3 -arguments '/quiet'.  the msiexec call-outs should use start-process -Wait to enusure async.\n. I think by default if no uninstall path is provided, it tries to find it automatically perhaps via reglookup or similar wmi query.\n2 relevant links \nhttp://community.spiceworks.com/how_to/show/2238\nhttp://www.vbforums.com/showthread.php?t=598355\n. the web installer version still uses that big file, then right? just clarifying half a dozen folders i got here ;)\n. trying to use the version from _packaged_output... i think i just needed to run chocolateyinstall.ps1\n. all good 9.8.16 =big.  i have like choc-ultimate, choc-build, choc-current, choc-lucid, choc-myco, and thought i was losing my mind.  i got probs and should go to bed.\n. I now see the paradox in requesting a pull not for pulling :-) Is the right thing to do creating a gist or repo link?\non a more relevant note-I wanted to make a func where the user doesn't need to specify a guid for uninstall.ps1 for msi.  looking up the code at uninstall time won't be reliable.  so I thought if we can grab it during install we know it is definitely associated with that package.  the question becomes where to put it.  I know you were working on additional persistence so I didn't want to just drop it in lib\n. i think that is solid thinking.  for msi, chocolatey uninstall can and should be optional for ease of use, but you still want to call that if it exists. \nthis way you can execute a post msi task.  for instance a remove-item -recurse on a folder the msi doesn't clean up every now and again.  \nAs I type this, I am now wondering if there should be a chocolatey-pre-uninstall ps1.  For instance if something runs as a service, I might want to stop them/taskill whatever to insure msi doesn't complain about something being open.\n. I finally had some time to look at this.   I think it is close, I just need to test it a bit.\n. do i not have it right?  I thought it was dropping in a join-path $env:chocolateyinstall`\\lib $packageName\nthe code does not change for each install.  it is unique product code per package.  for example package1.1.1.msi will also be the same code on every system.   package 1.1.2 will be a unique product code (at least thats how i  read it - i could be wrong)\nside by side installs aren't possible with msi, unless some transform magic or a wrapper that provides a unique product code for additional installs is built in.\n. rebased obviously.  this now requires fix_zipfolderpath PR for the environment variable.  need to retest later today hopefully.\n. added some crazy msi file dumping to assist with whatprovides for msi\nneed to retest...\n. thats an interesting idea. \n. i have thought about toying with honing a registry event hook for the uninstall key.  i wanted to unify ARP with choco.\ni think i can do it.\nsome thoughts were\npreserving regkeys\nif choco does it then stronger packaging reqts are needed.  ie matching arp name with title for instance.\nwe want to minimize choco making assumptions.  it has to be deterministic.\n. thinking everything not just msi\nthe uninstall string is dynamically created by the installer service itself.  in msi this is not provided beyond the guid.\nessentially i see swapping this uninstall key for cuninst pkgname.  it works awesome.\ni also considered append to that key and call chocolateyunistall -arp to have it just do a minimal amt of cleanup.  \ni have this stuff on my todo list but i am swamped with projects. \n. interesting ideas. the diff would be interesting.  Plus there is 32 bit and 64 bit keys... also not sure what would happen with depdendency packages. lot of variables in this thing.\nwhen does the garbage collection function get called?\n. awesome.. so does this particularly address the author that does not provide the chocolateyuninstall.ps1and this attempts the needful basee on reg diffs of uninstall keys?\n. i can do this, no prob\n. what level is this for-- fault tolerance, package availability, or both?  like would a test-ping on the array members be sufficient, or if the package is not found try the next source, etc?\n. Did you pull request the wrong branch?\n. I have some posh code that might make the hashing virtually invisible to package authors and users.  Need to sort out a few details.  cpack sounds  right for authors.   checksum files, nupkg, scripts,  dirs, we have options.   Have not given this thought, but I just played with headlock a bit the other day and may have an concept\n. the ftp PR conflicts w/ this iirc.  i feel a rebase for someone :)\n. Going back to the original message - has anyone tried changing the buffers in get-webfile?  I bumped that all the way up to 1048576 and helped a ton...\n. I think we should re-invigorate this-  \nThe guys here are putting logic in chocolateyuninstall to see if the binary that was already downloaded exists.  if so then use it, otherwise they are re-fetching it.  this should be built into chocolatey, to eliminate the verbosity in the chocolateyuninstall.  i like it minimal.\n. so this was created on master branch.\nCan you bring this changes in via a new branch?  I think you need to close this PR and open a new one.\nI would also do a git rebase -i upstream/master (assuming the upstream is chocolatey/chocolatey) and fixup your 2nd commit.\nI am also going to look at the code now to see if anything stands out.  After you do that, and reopen a PR I will test your change and try to move forward.  I know you have been really patient.\n. also make sure you do a git fetch upstream and a git rebase upstream master to ensure there are no conflicts that need to be reconciled as stuff has changed since you first contributed.\n. agree - \nI'll threadcrap - but I think the contributing should use this workflow.\nassuming git remote is named upstream for chocolatey/chocolatey\ngit checkout -b \nmod make changes.\ngit push --set-upstream origin foo\nmake more changes\ngit push origin \ngit fetch upstream\ngit rebase upstream/master\ngit push -f origin (remote username/chocolatey).  Should never be sacared, if they are in a branch.  Be nervous on master. \nopen PR and then \ngit fetch upstream\ngit rebase upstream/master regularly until your PR is approved if commits go in before yours\n. yes\n. would these be ps1? psm... would an example be say - an iis helper?\n. https://groups.google.com/forum/?fromgroups#!topic/chocolatey/VougffEcvSE\n. pull request 119 supercedes this and includes all the changes in this (118)\nI wasn't sure how to build branches on branches since I have been using 119 in my prod environment, and 99% of the changes were in chocolatey-version.ps1\nWhile this PR does fix everything noted in the above commit msg, it proved to be too slow for an instantaneous query need of what is installed according to chocolatey.  So I added more logic to the file and issued a separate PR : https://github.com/chocolatey/chocolatey/pull/119\n. agree - better name.   is there an example of a switch you set globally?  like -pre? \nok, let me revise.\n. I think this now works a lot better - I appreciate the advice.   I was looking at some advance param stuff and it gets wonky with multiple optional parameters if unnamed.\n. ~~i think am going to change the output for localonly to a more meaningful (vs. the unavailables)~~\n~~packagename==version~~\n~~I think that is pretty common, pip and some other *nix package managers use that in some scenarios.~~\n~~otherwise working with the puppet provider I have 3 layers of escape chars, ruby, dos, and posh and it is ambigious.~~\n. simplified commit\n. I have this in another outstanding pull request... :)\nThat is why you had an issue... The provider is based on my repo, and pending upstream acceptance\n. This also a change prepped, -lo or localonly\n. you can grab my changes https://github.com/rismoney/chocolatey if you'd like.  i started down the exact path you seem to have arrived at.  i think it was just chocolatey-version.ps1 for the query changes and chocolatey.ps1 for the switch capability. hope that helps.  feel free to mod it since i just hacked a few other providers to cobble something together, since my ruby knowledge is 1 week in.\n. cver all -localonly or cver all -lo will do this. \nnot sure about chocolatey list -installed off the top of my head, but if we want this, it should be trivial...\npersonally i don't understand the difference between list and version... ;)\n. what version of chocolatey are you running?  With the fixed cver (i compile mine from source)\nname                                                                  found\n\nDomainTimeII.client                                                   5.2.2.20120215\nGoogleChrome                                                          19.0.1084.52\nHPSPP                                                                 2012.08.0\nMellanoxDrivers                                                       2.1.3\nNetBackup                                                             7.1\ncitrix                                                                12.3.0.8\nlync                                                                  4.07577.0\nOffice                                                                14.0\n. note spaces jacked up\n. Sounds like you want packages.confg (see here https://github.com/chocolatey/chocolatey/wiki/CommandsInstall)\nAlternatively the boxstarter project might be something you are after if you are looking to do multiple repaving\nhttp://boxstarter.org/\n. ferventcoder- what are the implications with putting this in program files, and \\programdata or similar area for lib? I am sure xp/win7 compatibility, uac and folder perms factored in. \npersonally I tend to like it on c:\\ because it is somewhat of an entity unto itself - sort of part of the os, but not, but should be :) plus everything is in one spot, making tweaking and fixing easy.  Microsoft never had a clear model like http://www.thegeekstuff.com/2010/09/linux-file-system-structure/ and so things need to be forced a bit.\nI am not sure how you addressed per user installs, per computer, if at all...\nI also think it (can't recall) but it sets some variables on the user level, and not machine which i need to look at.\n. oh, i left out the info you might want - i think the environment variable ChocolateyInstall determines the path where the installer puts it...\n. Program files, with lib in Ugh hidden c:\\programdata would be standard?\nBut I like it on sysroot since I treat a pkg mgr different than a traditional app. My coworker wants it on d:\\chocolatey in prod \n. reference-http://msdn.microsoft.com/en-us/library/s2esdf4x.aspx\n. @nathanaeljones If you are thinking of installing beneath program files, don't... UAC, gets in the way.  and gem installs will bust. And spaces get ugly... Anywhere else (off root, for example) should be fine.\n. speaking of get-webfile, i swapped in several newer ones for testing - http://poshcode.org/?lang=&q=get-webfile.  I was troubleshooting what I perceive to be slow x-fers on a 10g network.  v 4.1 is significantly SLOWER than the 3.x series.  The issue turned out to be tweaking autotuninglevel and ramping up the buffers from 4096... but whatever was done in 4.1 is slower.\nBack on topic - I HATE passing passwords directly from cli.   get-credential requires interaction...maybe something with securestring would work?\n. No config file as of yet, except for sources.\nI apologize.  I don't hate pw at cli.   I actually had a conversation with someone on the topic of pw in files that ended up in version control... You can guess where that went.\nWhat you are describing does sound reasonable.  \nDoes the getweb file support http://user:pw@url syntax?  I know modern browsers disallow it...\n. I think you would want this flexibility on updating as well...  i wouldn't want to cinst pkgname -ignoredependencies and then cup pkgname and get extra stuff.  we should log the initial argument usage for future default preferencing that particular package.  now that I think about it, uninstalls might need a -deletedependency...\n. I an not familiar with the particulars of ruby devkit but I think, that ignoredependencies, would just cause chocolateyinstall.ps1 to execute without the nugety goodness... Am I over simplifying?\nSo, I am not sure this would fix your use case.\nWe probably need to track dependencies in both directions...\n. what should it have done in your opinion, upgrade the existing one to 1.9.3?\nruby is an interesting use case, because like java (good/bad) you can take on many concurrent versions... i run a few actually.\ni wouldn't trust running the ps1 w/o the dependencies in place. how do you know macler installed 7zip?    if he ignores dependency and 7zip is heavily used in chocolatey-install.ps1, then he will get a boos all over. should those then be supressed because he ignored, and now he is in his own world of support/hurt.\n. http://poshcode.org/3537\nGoing to test this one- 7 week's old...\n. yea, i went to the authors website- http://mnaoumov.wordpress.com/2012/07/24/powershell-add-directory-to-environment-path-variable/ and right at the top, is his note...:( fail\n. i'd want to use exclusively system variables.  so what do i need to do exactly?\nis there a problem with passing params to InstallChocolatey.ps1 that this can't be done within it? isn't that what's in the bit.ly url that gets invoked?\n. I was shooting for an optional switch if specified, while running under admin that could do it for me :)  I have been installing chocolatey on 400 servers and I have seen some bizzare issues with environment path modification and powershell putting in 2 semi-colons or none.\n. I saw a discussion here - http://stackoverflow.com/questions/4225748/how-do-i-pass-named-parameters-with-invoke-command which uses script blocks- somewhat convoluted.\n. @ferventcoder \n\nTo go to system, it would just take adding them manually and applying this fix for now.  I think in the future we could make the installer smarter.\n\nAgree. Can we do a git fetch upstream and git rebase upstream/master (assuming your chocolatey/chocolatey remote is upstream).   Lets get the innovation, but lets get @abombss to a git rebase -i  fixup on the 2nd commit, especially since it mods the same file, and we want every commit to stand on its own as workable going forward.\n. it returns \"does not appear to be on the source specified\" if the $versionlatest is empty.  \nwhat happens when you just do a nuget list kdiff3 for example?\nWhat is in the list.log in your chocolateyinstall folder after you run chocolatey update all?\n. list.log should contain the output of all packages like you listed for kdiff.\nif that file doesn't have the information, you get the errors you see.  lets first make sure it is resolving nuget before going into details.\ngo into C:\\chocolatey\\chocolateyinstall.\ntype \n. .\\chocolatey.ps1\n$nugetExe\ndoes it return C:\\Chocolatey\\chocolateyInstall\\nuget.exe ?\n. didn't forget about this- i will test further, probably next week in my chocolatey lab.  the issue is definitely $versionlatest being empty, but need to instrument it first hand.\n. did the line-feeds or spacing change?  not sure why it shows the whole file changed...\n. I don't have a proxy requiring auth so I will punt.  It looks trivial, as if you don't provide the switch, its a noop.\nI am going to just flag this for updating documentation. before merge/closure.\n. bump this would rock - i have had ppl ask me about this.\n. this approach is actually really clever.  \nSeveral questions - Do we need a \"windowsfeatures\" added to chocolatey-uninstall?   Can multiple features be specified on the same line?   I know the dism /online /enable-feature can take an unlimited number of /featurename: switches.\nLOVE THIS PR!\nAside:\nI am going to modify the puppet chocolatey provider to support just the sources param, since everything else is \"in place\".    .  The more I think about it, the more I think chocolatey is the ultimate provider for puppet on windows.  \n. say i wrote a helper chocolatey-restart that simply closes the active session and reopens a fresh posh. is this invasive? would it work?\nanother random thought-maybe wmi event consumers can track the change to env vars...\n. Did you have an idea on holding cell?\nAre you implying that any error in chocolateyinstall.ps1 does not unwind to a clean state upon error?\n. The only \"thinking\" chocolatey does is check lib.\n-force kills thinking\n. are you suggesting then, that if there is a failure, then the $packagefolder then just be moved to something like \\failures\\$packagefolder?   i would think that it should also run chocolateyuninstall.ps1 with a silentlycontinue...  There is no way to know the \"impact\" of errors since anything could have happened.  Also worthy, is everything needs to get logged...\n. @ferventcoder - \"don't pull yet - pull requests\" - where have i seen that before?\n. oh snap.  it does!  good job! \nmaybe it needs refinement to provide a bit more user friendliness.   Right now, is the end user supposed to just \"guess\" what the params are?\n. It needs to be fixed for full functionality.\nCannot run say /? Because it won't cleanup, which we know about.\nThe Params should be at the discretion of the package creator, and they should publish a list.  This way it doesn't need to execute the binary for help.\nParams might also cross multiple helpers.  I unzip a set of folders to Param1 then install chocolatey install to param2\n. say i install 2 msi's.  i want to pass /qn to one and /quiet to another.  then i want to install a zip.\nthe developer has to have control over what goes where.   \nin https://github.com/chocolatey/chocolatey/issues/160  I'd want in chocolateyrun.ps1 a function usage()\nwhat cross my mind earlier is to make some sort of chocolatey  DSL like pester (which i haven't looked at yet)\n. no dice fellahs.  env var's are string only.\nref:\nhttp://stackoverflow.com/questions/13128284/using-non-string-as-env-variable\n. I think I wanted to have a function help() too... and maybe uninstall should go in same file...\n. > @rismoney @Iristyle Interesting idea proposed by you guys - the chocolateyInstall.ps1 becomes > chocolateyRun.ps1 and in it it contains functions that chocolatey will call \n\npowershell\nfunction ShouldInstall {}\nfunction InstallSteps {}\nfunction ConfigureSteps {} #optional, in case folks want things installed but not configured.\nfunction UninstallSteps {}\n\nIf we did this, I need to it work for existing packages, so if functions don't exist it has to just call chocolateyinstall.ps1\nas it does today.\n. heh, I left off initial mechanics of the idea-\nif (test-path chocolateyrun.ps1) \n. .\\chocolateyrun.ps1\nif (test-path function:\\shouldinstall) {run it} repeat where applicable.\nremove function on success (cleanup)\ndeco chocolateyinstall.ps1 through attrition.\n. as for the steps shouldinstall,installsteps, configuresteps, uninstallsteps\nI think this could also provide the mechanism to support downgrade.  (steps to preserve config files, uninstall reinstall, whatever)\nisinstalled (instead of just lib checking) let the package creator define what it means to be installed - does a regkey/file exist for example?)  very useful in .exe where unwinding/detecting is not necessarily in reg.\ninfo\nswitch usage - package help - verbosity, dependency listings, version whatever\n. The change looks trivial to me, but how do you call the chocolatey installer with a different url?  I am not familiar, because I use nuget.exe to install from internal chocolatey.org, since it requires a single exe drop (and dotnet4).  Found that to be the best way, because I maintain custom chocolatey builds that aren't in lock step with ferventcoders releases.\n. ditto. no issue for merge. sad 7 months went by.\n. brown fudge, by any other name, would it be sweet? lol\nits what yum calls it... I think apt-get uses apt-file search... \nhows about chocolatey filesearch ?  lookup, filelookup, seek, frisk, pry, dig, or taste, reach.\nI thought whatprovides was explicit...It tells you what package provides the file.  not as problematic as the cunst.\n. hmmm.  its not so useful yet I guess to determine console.exe is installed by console2.  What about a .dll it dropped in system32.  \nthe goal is to be able to track down the \"source\" of any file on the system and make every file traceable back to a package.  at work we are going to mandate that every single piece of software we deploy is sourced from our chocolatey feed.\nRight now it is just filename matching.  Imagine this future script /tool in my hopper:\nCreate list of all files on a system and subtract out all known OS files AND package files (the latter always been difficult).\nThen track the rest of the files deltas day over day and allow exception list.\nA true rogue file report.  Plan to do this on servers at 2am nightly\n. The package creator needs to provide filelist.txt if using non msi or zip currently...\nCrude yes, also worthy to note that whatprovides does not mean does provide...\nThe latter would require procmon style inspection or other scanning.\nI just thought it might be useful to the community.\n\nFrom: Rob Reynolds\nSent: Mon, 24/09/2012 05:10 PM\nTo: chocolatey/chocolatey chocolatey@noreply.github.com\nCC: Siegel, Richard RSiegel@ise.com\nSubject: Re: [chocolatey] chocolatey whatprovides filename\nSo I install a tool package - that tool uses bin dir so it installs to something like c:/tools/packagename where it auto adds a that directory to the path. How do I trace that back to the package itself as it wouldn't be as easy to find?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/168#issuecomment-8834886.\n. whatprovides is akin to yum whatprovides.  I think its kind of neat and more of a nice to have feature to grow on.   I am ambivalant if this makes it into the codebase.  It was more an experiment that worked... \n. ok - its not perfect implementation (what is?). but here is the usage-\nI have a file on my system.  I am not sure if it was from a chocolatey package install, malware, a download, whatever.  I install everything from zip or msi currently.  So I see a file that looks suspect.  I want to see if it came from inside a package.   Since zips (currently) and msi's will be able to log all the files they encompass, we can use that get-content and seach the txt file to determine if a file is rogue (not sourced from a chocolatey package) or we deployed it.  Its not a dead on thing, but it could be a nice feature.  \nIdeally I would want have lists from all the operating systems files and then be able to identify every binary file on a host.  It can become really helpful with system32, ruby versions, etc. \n. This PR and the associated #164 haven't been updated in 7 months.   Can we take this in as an advanced user improvement, that if someone down the line wants to simplify and improve, it can be part of a refactor?  I think there is value in the code.\nI'd probably fixup the commits and amend the commit msg, to be inclusive of the others.\n. your the boss ;)  how do you back that branch to the parent commit and then pull the changes.  I was just trying to assist as I know there are a ton of PRs and don't want to stifle progress for project newcomers who think they won't get merged. However I can help, let me know.\n. speaking of continuous integration ;)  eliminate direct contributions to chocolatey.org.   have all packages go through a unified gitrepo (even gitsubmodules).   use git hub hooks like on a merged pull request to trigger a cpush.  take the user out of the owner, and turn it into package curators, and contributors.  no direct upload for packages...\n. running alpha2 build now, and the bizarre thing is that it appears slower because it is updating more relaxedly, but is actually faster...  agree with you mwrock-awesome!\n. i see no issue here.  i had no opinion on the status bar.  \nglad to see you are using puppet and chocolatey together.  how is that working out for you?\n. registrytreechangeevent could be used to find if uninstall string was added.  We replace with cuninst... Or we do it with helper and its up to package creator to unify package.  Making assumptions even logical can result in busted items...\n. I found good com query but it neglects syswow on 64... Not sure how to fix it...\nCould be panacea, because win32 product wmi sucks and custom mof requires admin...\n. Cuninst should then call uninstall string...\nSo then chocolatey can uninstall packages it does not technically manage, albeit not silent... unless we add more logic :)\n. i tend to agree w/ you.  that fear would steer this responsibility to the package owner if he wants his app to be unified.\ndocumentation could detail this...\nalso chocolatey might make a data integrity error in trying to be smart into an app that would require an expert to unwind. \nthe other interesting thing is we can create a helper to add items to add/remove programs that don't normally get it (like tools) or zip packages, etc. its actually trivial.\n. The 42 seconds is why I added localonly...\n. I relooked at code- got confused, you just moved those lines around.  Its not new. My bad.\n. Ah ensure latest was expensive.   Thats why I switched to present in my manifests.   Need my prod env highly deterministic and latest could update something.\nAre you running choc.org internally, or running against the public site ?\n. I am not really sure how we want to do this...\nI started with converting chocolatey.ps1 to a function. This should help testing it.\nhttps://github.com/rismoney/chocolatey/blob/039afe39922298af8ba0d2ec74eaddf73f049c9b/src/chocolatey.ps1\nchoco could then be a very thin file to call Invoke-Chocolatey\ni welcome any input!\n. fyi - my old pull request (still out there)  fishes out the guid, during install, safe storing it to a txt file for later use...I have been meaning to get back to it...\n. interesting... i would have thought people would like to fail early and abort...  Personally I have a bunch of packages, and if a pre-req fails the success of post packages is usually botched as well. Otherwise why are they linked?\nPersonally I'd like to strive for idempotency to address @tomOne \"annoying and reduces UX\" issue.  chocolatey should just \"do the needful\"...I hate when I get a box of chocolates (that rocks!) - ie when it doesn't stop on error...\nMaybe if there are differing opinions there should be a silentlycontinue or similar switches via config file.\n. I like determinism.  I would need stop on error.  The systems i manage are critical and must not leave things in barney.\n. http://gallery.technet.microsoft.com/scriptcenter/Get-PendingReboot-Query-bdb79542.  iirc at the summit, @mwrock mentioned he was doing this with his boxstarter.\nIt might be nice as a helper for package authors- ie- Get-RebootState before, to fail cinst package fast.  This way we don't attempt an install on an msi that we know will bust with a pending reboot.\nor... Building it into choco, might create the undesired behavior where we can't install something unless a boot happens... (Unless we provide a -bootoverride)  This might be good too.\n. noone wants to help me :( - our sysadmins are -matching in every package...ugh - im swamped.\npowershell\n$getpath = [System.Environment]::GetEnvironmentVariable(\"PATH\",\"Machine\")\n$getMatch = \"$getpath\" -match \"$installdir\"\"\nif ($getMatch -eq \"True\") {\n  Write-Output \"Note: $installDir exists in the PATH environment variable so we will not be adding it again\" \n}   \nelse {\n  Install-ChocolateyPath $installDir 'Machine' \n }\n. This is also wonky\n```\nPS C:\\@inf\\winbuild\\scripts> cver all -lo\nname                                                        found\n----                                                        -----\nchocolatey-alpha3                                           no version\nPS C:\\@inf\\winbuild\\scripts> cver chocolatey -lo\nname                                                        found\n----                                                        -----\nchocolatey                                                  0.9.8.20-alpha3\nPS C:\\@inf\\winbuild\\scripts> cver chocolatey-alpha3 -lo\nname                                                        found\n----                                                        -----\nchocolatey-alpha3                                           no version\n```\n. L14 of Chocolatey-Version is the culprit for the wonky example above...\n. ok,. fixed the first issue.  merging..\n. it seems to be working now.  amazing how a few chars was causing turtles all the way down for me. cleaned up this thread to, without my rants. :)\n. Definitely.  Maybe splat the multiples.  Don't know how sweet the sugar is except from cmd wrapper.\n. You wrock :)\n. Haven't tried but if you cinst unknown package it will exit non zero?\n. turned out to be pretty trivial... wasn't sure if you wanted me to keep this separate.  I think it is much cleaner looking:\n20121205-01:04:34 [-----] ################################################################################\n20121205-01:04:34 [-----] #                  Going Chocolatey on 2012-12-05 01:04:34Z                                                                    #\n20121205-01:04:34 [-----] ################################################################################\n20121205-00:53:56 [DEBUG] Evaluating NuGet output for line: Successfully installed 'notepadplusplus 6.1.7'.\n20121205-00:53:56 [CHOCO] ______ notepadplusplus v6.1.7 ______\n20121205-00:53:56 [DEBUG] Running 'Delete-ExistingErrorLog' for notepadplusplus\n. I restored the file, this can be merged. \n. This is working in my environment.  Let me know if you see any issues.\nI want to rebase the exit codes PR off this, but I really don't want to mess up my branches.  I work sequentially in git or start to lose my mind after more than 3 branches. It'd be stellar if it is part of beta1 :)\n.   That blows :-1:  I will destroy it... ok - maybe i will flag it to .21-alpha1 internally.\n. I have been using this for several months without issue. Log after heavy usage (installation of 20+pkgs) is <1MB which is hooked up to puppet provider (so it does do stuff on passive stuff).  I deem it safe to merge at this point.\n. i fixed the conflict here with @mwrock 3ec93e6\n. commit on deck for actual exit 1 scenarios\n. It is worthy to note, that the Invoke-ChocolateyFunction will give free bubble up throws in any function.  Basically using a splatting array we can use it to wrap any function and not worry about try/catching it.  I actually wrapped all the chocolatey.ps1 callouts, and then we can throw at will. \n. didn't realize i needed a rebase.  should be good to merge now.\n. wow this a royal pita to resolve conflicts!  Will retest tomorrow, and we gotta get this in.\n. the history line was fine.  it just gets confusing as to what to keep and what to shed, especially if you havent look at a branch in months, and the conflicts occur on the same lines or moved around.\n. what are you using?\n. alright - I believe this to be clean now - I based it off current HEAD, so you can plot it right on top :)\nI think @mwrock and I have to write a lot of pester coverage on this project.  we're taking in lots of changes, that are hard to validate through and through.\n. What happens if you just run source d:\\dev\\chocolateypackages\\vagrant\nFrom: Richard Turner [mailto:notifications@github.com]\nSent: Tuesday, December 18, 2012 2:32 PM\nTo: chocolatey/chocolatey\nSubject: Re: [chocolatey] [BUG?] Chocolatey install XXX -source YYY doesn't load package from YYY (#214)\nHey Rob. My Repo' is here if you want to take a look: https://github.com/bitcrazed/chocolateypackages/tree/master/vagrant\nI ran CPack which generated vagrant.1.0.5.nupkg\nWhen I re-ran cinst vagrant -source D:\\dev\\chocolateypackages\\vagrant\\vagrant.1.0.5.nupkg -debug, I see the following:\nDEBUG: Running 'Chocolatey-Install' for vagrant with source: 'D:\\dev\\chocolateypackages\\vagrant\\vagrant.1.0.5.nupkg', version: '', installerArguments:''\nDEBUG: Running 'Chocolatey-NuGet' for vagrant with source:'D:\\dev\\chocolateypackages\\vagrant\\vagrant.1.0.5.nupkg'. Force? False\nChocolatey (v0.9.8.20) is installing vagrant and dependencies. By installing you accept the license for vagrant and each dependency you are installing.\nDEBUG: Installing packages to \"C:\\Chocolatey\\lib\".\nDEBUG: Running 'Run-NuGet' for vagrant with source: 'D:\\dev\\chocolateypackages\\vagrant\\vagrant.1.0.5.nupkg', version:''\nDEBUG:  NuGet _\nDEBUG: Using '-Source \"D:\\dev\\chocolateypackages\\vagrant\\vagrant.1.0.5.nupkg\"' as the source arguments\nDEBUG: Calling 'C:\\Chocolatey\\chocolateyinstall\\nuget.exe' install vagrant -Outputdirectory \"C:\\Chocolatey\\lib\" -Source \"D:\\dev\\chocolateypackages\\vagrant\\vagrant.1.0.5.nupkg\"\n-NonInteractive\nDEBUG: Attempting to resolve dependency 'jruby (\u2265 1.6.4)'.\nAttempting to resolve dependency 'virtualbox (\u2265 4.1.4)'.\nAttempting to resolve dependency 'putty (\u2265 0.61)'.\nSuccessfully installed 'jruby 1.6.4'.\nSuccessfully installed 'vagrant 0.8.0'.\nDEBUG: Evaluating NuGet output for line: Attempting to resolve dependency 'jruby (\u2265 1.6.4)'.\nDEBUG: Evaluating NuGet output for line: Attempting to resolve dependency 'virtualbox (\u2265 4.1.4)'.\nDEBUG: Evaluating NuGet output for line: Attempting to resolve dependency 'putty (\u2265 0.61)'.\nDEBUG: Evaluating NuGet output for line: Successfully installed 'jruby 1.6.4'.\n__ jruby v1.6.4 ____\nDEBUG: Running 'Delete-ExistingErrorLog' for jruby\nDEBUG: Looking for failure log at 'C:\\Users\\Rich\\AppData\\Local\\Temp\\chocolatey\\jruby\\failure.log'\nDEBUG: Running 'Run-ChocolateyPS1' for jruby with packageFolder:'C:\\Chocolatey\\lib\\jruby.1.6.4', action: 'install'\nDEBUG:    PowerShell install (chocolateyinstall.ps1) \nDEBUG:   Looking for chocolateyinstall.ps1 in folder 'C:\\Chocolatey\\lib\\jruby.1.6.4'. If chocolateyinstall.ps1 is found, it will be run.\nDEBUG: Action file is 'chocolateyInstall.ps1'\nDEBUG: Running 'C:\\Chocolatey\\lib\\jruby.1.6.4\\tools\\chocolateyInstall.ps1'\nDEBUG: Running 'Install-ChocolateyPackage' for jruby with url:'http://jruby.org.s3.amazonaws.com/downloads/1.6.4/jruby_windowsjre_1_6_4.exe', args: '-q'\nDEBUG: Running 'Get-ChocolateyWebFile' for jruby with url:'http://jruby.org.s3.amazonaws.com/downloads/1.6.4/jruby_windowsjre_1_6_4.exe',\nfileFullPath:'C:\\Users\\Rich\\AppData\\Local\\Temp\\chocolatey\\jruby\\jrubyInstall.exe',and\nurl64bit:'http://jruby.org.s3.amazonaws.com/downloads/1.6.4/jruby_windows_x64_jre_1_6_4.exe'\nDEBUG: Processor width is 64.\nDownloading jruby 64 bit (http://jruby.org.s3.amazonaws.com/downloads/1.6.4/jruby_windows_x64_jre_1_6_4.exe) to C:\\Users\\Rich\\AppData\\Local\\Temp\\chocolatey\\jruby\\jrubyInstall.exe.\nDEBUG: Running 'Get-WebFile' for C:\\Users\\Rich\\AppData\\Local\\Temp\\chocolatey\\jruby\\jrubyInstall.exe with\nurl:'http://jruby.org.s3.amazonaws.com/downloads/1.6.4/jruby_windows_x64_jre_1_6_4.exe', userAgent: 'chocolatey command line'\nDEBUG: Setting the UserAgent to 'chocolatey command line'\nAlas, it still appears to be looking for dependencies which don't exist in the new package. I guess it's picking up the old cached package for some reason, right?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/214#issuecomment-11501339.\n. So sad\u2026 it\u2019s a blow to git on win for sure.\n. I am not understanding this at all.\nInstall-ChocolateyZipPackage can specify an unzip location of your choice.\nAlso it doesn't have to be all files. You can do partial unzips.\nI thought we had a helper for making links.\n. The complete parameters are listed in the files \nhttps://github.com/chocolatey/chocolatey/blob/master/src/helpers/functions/Install-ChocolateyZipPackage.ps1\nIn this case, the 3rd parameter allows you to specify unzip location and the 5th allows you to unzip a single folder within the zip.\nso \ninstall-chocolateyzippackage mypackage http://myurl32bit C:\\extractionpoint http://myurl64bit onlythisfolder\nThe params should probably be named, re-positioned and cleaned up, but it will work.\nAs far as the links, I think @mwrock added a bunch of functionality for links, shortcuts, etc but I haven't any experience with it.  Look in https://github.com/chocolatey/chocolatey/tree/master/src/helpers/functions\n. Should probably always be an array, even with single member.\nshould be able to do this with items.item($arraymembers)\nGet-ZipItems_recursive $file.getfolder.items() $specificfolder $target\nRedsandro - do you want to take a shot at fixing this? :)\nI need this fixed too, but I'm swamped.\n. actually its aleady done...\nhttp://gallery.technet.microsoft.com/scriptcenter/PowerShell-Get-Specific-9b35352f\nfunction getzipfileitems recursive has string matching...should be trivial.\n. Git rebase -i upstream/master\nChange the bottom 4 commits to fixup instead of pick\nThen git push -f origin\n. As long as he pushes to his origin its fine.  Its only a nono on chocolatey chocolatey master\n. Needs to make sure remotes are set right of course\n. I don't think we should take this in.   It needs to be reconciled with the existing one. \nIf there are specific use cases for one vs the other then conditional logic can apply the right call...\n. https://github.com/chocolatey/chocolatey/blob/master/src/helpers/functions/Get-WebFile.ps1#L46 is this not doing cookie handling? I am not all that familiar with cookie handling in general.\n. I do like the ignore cert switch in theory, but not in practice.  A package author should not be sending consumers of the package to https sites that don't have valid certificates.   I believe that is a call the end user should make, and question the authenticity of the underlying url.\n. > Interesting...we have made choco silent by default. This seems to go against that idea. Should this not be a pkg then?\nIts not against the idea.  Bypassing a tenet of an https request is the offense.\nI like ignore, but that is a user call, not a author call.  If I am going to a https site, and the name, CA or date is jacked up I am going to most certainly question if I want this on my system.  \nThis is a helper, and doesn't expose the ssl bypass capability to the cli/end user.\nIf we wanted silent then it would need to work akin to:\ncinst foo -ignore-ssl-errors\n. getbits?  lol - isn't get-processorAddressWidth or something more appropriate - though wordier for sure ;)\n. asserts changed in new pester, particularly around piping...\nI really like this PR.\nAnd I would rebase fixup your commits so its a clean bisectable history.  With all the outstanding PRs we need to make sure if we introduce a bug, we can use git bisect and git blame successfully going forward.\n. C:\\gitrepos\\chocolatey [branch]> git remote -v\norigin  git@github.com:rismoney/chocolatey.git (fetch)\norigin  git@github.com:rismoney/chocolatey.git (push)\nupstream        git@github.com:chocolatey/chocolatey.git (fetch)\nupstream        git@github.com:chocolatey/chocolatey.git (push)\ngit checkout master\ngit fetch upstream\ngit rebase upstream/master\nthen\ngit checkout yourbranch\ngit fetch upstream\ngit rebase upstream/master - this puts your changes on top of the current HEAD\nthen \ngit rebase -i upstream/master\neditor should be launched\nyou should see a list of all your commits, with the word pick in front.\nstarting with the second commit change the first word from pick to fixup\nrepeat for all subsequent comits\nclose editor with save\nthen\ngit commit --amend to fixup the single commit message \nthen\ngit push -f origin \nyou will then have a single commit that looks like you did it perfectly the 1st time.\n. It really is awesome.   I hope I can get a lot of posh people on it at the summit this week. I Cant stand codeplex.\n. wow even this needs to be rebased and reconciled... \n. I will have a look at this as I added this in PR 114.  The functionality here, creates a text file within the package lib folder that lists all the files that were extracted.  The goal of this was to use this text file generated during install to at some later point \"uninstall\" the zip, which essentially iterates through the file delete all entries listed. \nIt might be helpful for me to test this, by outputing the var's to see if something amiss in particular to this specific zip file.  I haven't run into this bug and we deploy our entire app w/ zips so its runtime .  I wonder if this particular zip file has deeply nested subfolders, and we're hitting a limitation I need to check for or take into account.\nThe impact here for this, is that chocolatey uninstall zip will not have a proper text file to use and clean up the extraction.\n. a lot of the commands need to be cleaned up... good suggestion though.\n. This is really novel.  I am a fan.   I bet we can use this beyond zip... like all the tools, gems, and non msi stuff.\n+1\n. You are not missing anything.  It feels somewhat of an antipattern, from knowing what was installed to knowing what was supposed to be installed...  in this case the actuals might be preferred...  the real issue is native zip capabilities suck.\nFor an zip exe though this might work really well as a helper\n. I am not really sure what a plug-in would look like.  Everything in powershell is sort of an add on.  What is the tie in point?  That chocolatey would auto-dot source anything in location, and \"learn\" it?   \nAre you thinking like chocolatey config network mynic.xml?\n. https://github.com/chocolatey/chocolatey/wiki/HelpersInstallChocolateyPackage\n. so what exactly are you doing... you must be missing some steps-  the commands work for me relative to notepad.exe\nare you creating nuspec ,packing it, putting the chocolatey.ps1 in tools, etc?\n. delete relevant files out of the C:\\Users\\%username\\AppData\\Local\\Temp\\chocolatey. there could be lock there.\n. @ferventcoder is this an admin thing? \ndid you start powershell by rightclicking 'run as administrator' ? never really looked at start-choc...\n. @kellyelton-\nto troubleshoot i might add make a copy of start-chocolateyprocessasadmin.ps1\nthen add\nL37 $s\nL38 $psi\nand see what values it is trying to use, and work back from there.\nalso are you sure cloversetup /silent is valid?  have you run it interactively with that switch and it works?\n. had you seen https://github.com/chocolatey/chocolatey/pull/210?  I tried to deal with process exits throughout all of chocolatey.\nbtw- linux-vm looks really really awesome. \n. I completely relate.  My main concern was to always exit 1 if there was a failure on any of the functions.  I recently delved into puppet/ruby so my main concern was to never return an exit 0 if something went wrong which is the current behavior.  It's funny, when I use chocolatey interactively i never use the batch files.  when i use it programmatically via puppet i used the bat files. its because i never use cmd, so its silly for me to call a batch to call powershell if i am already in it.\nunrelated, but calling posh from ruby strangely irks me with powershell.exe, maybe for the opposite reason.  If I can run an exec, and call the bat, then i avoid the powershell.exe\nI haven't found a great method to interact with powershell via ruby, particularly for multi-line code blocks.\n. the uninstall should be deleting the lib... assuming there is an uninstall\n. I guess I wasn't clear. I wasn't really directing comments :innocent: \nI think a fail install should call cuninst, and we should stop on the last successful dependency.  Don't leave the unwinding to the end user.  A cuninst will actually perform a delete of chocolatey.lib.  In this scenario I might silent all stdout/stderr unless debug, and report a failed install has been unwound on package foo.  Further investigation may be necessary.\nI am comparing it to an msi, that fails midway, and then the progress bar goes in reverse, and usually leaves :shit: in far worse places than my lib.  love the emoji's btw.\n. Hes not going to be able to install anything upstream unless he rolls his own pkgs.\n. iirc my PR will handle all the exit code failures - https://github.com/chocolatey/chocolatey/pull/210\nI know @ferventcoder has been very busy as the PRs have been building up, so I guess patience or perhaps he responds to :cookie:s  lol.. , or if you are so bold, try my branch out and see if it addresses your issue...  It is not guaranteed though to make it in choco so, you are on your own in that regard, but I will say that I run the changes in this branch in my production environment with 1000 servers w/o issue.\n. @abombss you mean like this? ;)\nI don't know what the full potential of scriptcs is... \nhttps://github.com/rismoney/puppet-baremetal-windows/blob/master/make_pe/runtime/get-DHCPHostname.ps1\n. I thought msft should have scrapped PowerShell in favor of ruby.net\nAnd ditch cmd and not have powershell.exe be so expensive to call out to.\n. Nuget is awesome, but it is constraining imho, like customizinf nuspec... Folks on the irc powershell channel don't have anything nice to say about chocolatey's wrapper approach.  But I have yet to see anyone else do better.\nRebuilding nuget in native powershell would be a lot of work...\n. I do like the cinst ruby -clean   - That makes sense to me.  The old versions can be determined using the -version all functionality I just wrote as a PR a few minutes ago against the current.\nNow enter cup notepadplusplus.  When you cinst it, you get the latest. perfect! \nIf a new version comes out, and you cup it, you get 2 folders in lib but only 1 version is installed.  A new version comes out again, and you cup it 3 folders.  In actually you only have 1 version of notepadplusplus.\nIn this use case- you want the cup process to automatically delete the lib folder for the version 1 rev behind. An upgrade is just that, a replacement of the version you specify (or replace latest if unspecified).  Its not a side by side install, and i think chocolatey doesn't do much different for a cup.\nI think in the case of ruby, most users are not going to cup ruby, and instead cinst the version they want.\n. Maybe cup should delete all versions. I think that's what yum update might do. \nOtherwise cinst...\n. i understand what you are saying about pinning, which I am down with.  Do you think this should be a 'feature' of the config file?  say a pinned packages element.   Do we leave this up to the user to populateor leave it to package authors to tamper with chocolatey.config? (ugh-security)...\nI have a production request to nail down the default behavior for cup.  Its getting to the point, where package authors are building crazy logic into chocolateyinstall.ps1...  chocolateylib is gettting messy.\nIf there are areas where we are giving the users a choice, like in your uninstall example, we also need command line switches to force behaviors for non-interaction. \n. any interest in a helper like this: (taken from one of our sysadmins who used it in a recent package) I horrendously adapted it for understandiing\n```\nFunction ChocoCleanUp {\n  #Clean up previous installs out of lib folder if they exist\n  $chocolateyLib = 'c:\\chocolately\\lib'\n  $packagever = \"1.2.3\"\nWrite-Host \" Cleaning up legacy lib folders in c:\\chocolatey\" -foreground green -background black\n  Remove-Item $chocolateyLib\\$packageName -Force -Recurse -Exclude $chocolateyLib\\$packageName.$packageVer -ErrorAction SilentlyContinue\n  Write-Host \"* Done\" -foreground green -background black\n}\n```\n. so are we needing a -pin switch, and what does it do?  Touch a pinned.txt 0 byte file in it's lib?\nand if it's not there, we do something like the helper I put above?\nTrying to understand how we should be creating future packages...\n. do you pin during install, or do you pin as a separate op, or both should be supported.\nie\nMethod 1.\nchoco install sysinternals -pin\nMethod2.\nchoco install sysinternals\nchoco pin sysinternals\n. > We do not remove the previous version at all when a new version comes in by design. You can install two versions of ruby\nthis whole topic confuses me, and a lot of ideas.\nQ:\n1. Should we have the install and uninstall call a function ChocoCleanUp if a pin is not set?\n2. Should we push this responsibility to the package author?  So a ruby package author wouldnt call chococleanup, but a notepadplusplus would?  I don't like this idea as it adds unnecessary clutter to authorship.  Right now this is what our sysdmins have to do, due to lack of options. Or should they have the ability as \"just another option\"\n3. we need a choco pin shim (lol, it just sounds funny) \n4. we need a choco pin param in config mgmt providers - (Kinda why I suggested Method 1 for ease)\n. overall we probably need a refactor of this function (probably a whole bunch of them) but anyway-\nthis adds the ability to get alist of all versions of a product installed. \ni welcome thoughts.  I based this off, the current master, as I have modded chocolatey.ps1 and version in another PR for error handling, so if those get merged first, I will rebase those mods back in.\n. Ok - so this is confusing...as clist and cver have been for quite some time. But I think we are missing the intent for this PR.\nI am running the current source version now... (btw - sysinternals is pkg version for demonstrative purposes)\nThe functionality I added gave this-\n``` powershell\nC:\\Chocolatey> chocolatey version sysinternals -version all -lo\nname                                                        found\n----                                                        -----\nsysinternals                                                1.2012.05.20130124\nsysinternals                                                2.0\n```\nThis is the list of packages installed locally on my system.\npowershell\nThe chocolatey list sysinternals -lo -all gives this (which looks like a \nsysinternals 1.2012.05.20130124\nsysinternals 1.2012.05.23\nThis is the list of packages on the feed. not sure what local only does in this use case, unless it is not developed yet...\n. Perhaps I was obtuse...My goal for this PR, was to be able to query locally installed packages and their respective versions (and not check feed) and return as an object.\n. I just built it from source 30 min ago...\n. gep13: hooky?  I don't always test my code, but when I do it's in prod!\n. all of my PRs are actually in production on 100s of systems.  I don't put usually do a PR until we roll out here. We may need to reconcile merge conflicts though, since I think a few PRs overlap the same sets of files. I also haven't been as diligent as @mwrock on the pester side.  But maybe he will teach me a few things next week!\n. actually ?  I will get on it asap!\n. I need to bump the module on the forge up to the latest rev...  wish the forge could just do the needful, ugh.\n. added to the TODO...\nme: Dr.  it hurts when I do foo\nDr: stop doing foo\n. http://vcsjones.com/2012/11/11/unzipping-files-with-powershell-in-server-core-the-new-way/\n?\n. I will see if I can make something work.  My users want core yesterday ironically.\nApproach?\nMay need conditional versioning logic (hate it but its better than outside dependencies)\nIf dotnet 4.5 is present we use it.\nIf not we try shell\nCatch core with no option? Tell user to add feature or prompt to add feature.   \nNeed to setup testing env...\n. https://github.com/chocolatey/chocolatey/pull/306 might be able to be -replace binroot with pkgsource tweak and call it a day. .\n. i'd love that.   I think it was part of this issue\nhttps://github.com/chocolatey/chocolatey/issues/172\n. It should also take arguments like output directory....\n-------- Original message --------\nFrom: Rob Reynolds notifications@github.com\nDate:\nTo: chocolatey/chocolatey chocolatey@noreply.github.com\nSubject: Re: [chocolatey] cpack silently fails when dependency .NET 4.0+ is not met (#270)\nAgreed\nOn Tuesday, April 16, 2013, Redsandro wrote:\n\nI think it should warn though, if something like that is possible.\nCould not package your package because .NET is not installed.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/270#issuecomment-16440795\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/270#issuecomment-16441678.\n. Are you just talking about on chocolatey.org? or via chocolatey itself?\nthe nuspec file defines the dependencies.  The issue right now in how chocolatey works for the latter is that we are grabbing the nupkg file and popping it into \\lib.  If we handled this in temp (for example) or another means, it would allow us to inspect the nuspec for dependencies, and report back to the user.  \nRight now the reliance on nuget.ee is both really helpful to making something work, and a hindrance to innovating.  I am wondering if we need more than a wrapper for it to really move choco forward.   I really like that its powershell though.\n. I think nuget.extensions has a graphing capability against a whole feed.\nhttp://ben.phegan.name/index.php/2012/07/02/nuget-graph/\n. also I would do a git rebase -i and fixup the second commit to make it look like one.\n. yes.  we should strive to keep a clean timeline moving forward.  a couple of things here:\n1.  create new branch\n2.  cherry pick changes into new branch or checkout -b newbranch, and then git reset --hard his master.\n3.  rebase. \n4.  then the maintainers should not do a gui based merged.  these are --no-ff and create a merge commit on top.  This makes the graph bumpy.  If we want a timeline that is easily bisectable we should try to get merges that are --ff and encourage small single commit continuous changes.  also when we leverage the testing frameworks this will help us immensely.\n. can you fixup your commit 2,3 into the 1st one?\nassuming upstream is the (chocolatey/chocolatey)\ngit rebase -i upstream/master\nswitch commit 2 and 3 from pick to fixup\nthen git push -f origin (zipp1981/chocolatey)\n. yes. a single commit:\nHere are my remotes:\nC:\\gitrepos\\chocolatey [patch-1]> git remote -v\norigin  git@github.com:rismoney/chocolatey.git (fetch)\norigin  git@github.com:rismoney/chocolatey.git (push)\nupstream        git@github.com:chocolatey/chocolatey.git (fetch)\nupstream        git@github.com:chocolatey/chocolatey.git (push)\nso if I first do a:\ngit fetch upstream\ngit rebase upstream/master  \nIt will put your 3 commits at the end of the current timeline.\nThen you can do an interactive rebase:\ngit rebase -i upstream/master\nThis will open a text editor where you can manipulate your commits interactively.\nYou can meld the commits together into the first commit, by switching the first word from pick to fixup inside the editor and save/close.  This will make it a single commit.\nThen you can git commit --amend can allow you to put the appropriate verbiage reflecting your change.\nYou will need to git push -f origin for it to go back into your origin, because you changed history through amending or interactively rebasing.\nHTH,\nRich\nIf you are not sure, just make a copy of the file first into a different dir just to test it out.\n. just to clarify- \nthe first commit is pick\nthe 2nd and 3rd should be fixup\n. yea (especially since I never use any font except notepad++ and powershell prompt) :smile:\n. its called cver.  We had talked about consolidating cver and clist.\nusage cver all -lo will show all local installed packages.  \nthe exit codes are in a pending PR.\nexamples:\nC:\\Users> cver 7zip\nname          : 7zip\nfound         : 9.22.0\nlatestCompare : 000000000009.000000000022.000000000000\nverMessage    : Latest version installed\nlatest        : 9.22.0\nfoundCompare  : 000000000009.000000000022.000000000000\nC:\\Users> cver 7zip -lo\nname                                                        found\n\n7zip                                                        9.22.0\n. there is a chocolatey module https://github.com/chocolatey/puppet-chocolatey\nbut to get full exit codes natively we need the PR to be accepted, or you can build from my source.\n. The current release of chocolatey isn't complete for puppet as it requires the mods in my outstanding PRs...  \nwhen you say does not work properly, what are you experiencing?  I just want to confirm you aren't experiencing a different issue.\n. that does sound like the exit code issue on the cver query.  \ntechnically, what I think is happening in this case- it is not doing a ensure latest.  The cver query is failing to determine a package is installed, so it is atempting to cinst package. \nI think that is why I wrote this -\nhttps://github.com/rismoney/chocolatey/commit/f8ec947be96a90f8934989188da58d1e241a241e\nIts part of the https://github.com/chocolatey/chocolatey/pull/210 \n. First I appreciate your response.  \n\nTalking specifically about the .install/.app package suffix - those are for the packages that have a native installer that they have bundled or they download and run.\n\nhttps://github.com/chocolatey/chocolatey/wiki/ChocolateyFAQs\nAs far as a compelling reason, that is always going to be a curater vs author subject of contention.  I think even with a fair amount of rules, inevitably it can down to a per package decision.  When I look at other package/library solutions, like yum, gems, those decisions will appeal to some people and others will criticize.\nAs far as package research - I disagree wholeheartedly.   I manage 1000s of systems with chocolatey, and when you talk about scalability, if you manage 2 or more systems, the payoff is huge.  You should always research your packages.  For instance-\n.\\NuGet.exe install  -source http://chocolatey.org/api/v2/ beyondcompare\nand then look in the tools folder to see what it is actually doing.\nI have been thinking about what a chocolatey -whatif would look like, and perhaps this is a starting point.\n. @ferventcoder - i left that out intentionally, because I left it to the package author.\nNot every package uninstalls via filename.\nUninstall-ChocolateyPackage '7zip' 'msi' '{23170F69-40C1-2702-0920-000001000000} /norestart /qn'\nOur oldest PR, actually can use the learned guid, so the author doesn't need to specify it... :)\n. @ferventcoder are you referring to HKLM\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall \n. gep13 I like that idea A LOT \nhttps://github.com/blog/699-making-github-more-open-git-backed-wikis\nAs an alternate idea-\nI like the way the cli for git itself works. A really lean version of help is available locally.  For the verbose help it sends you to the wiki.  The only time I don't have internet access is in production, where I shouldn't be needing extended help or else boo to me.\n. Have you thought about - https://github.com/chocolatey/chocolatey/issues/160#issuecomment-8631260\nand using Update {}\nThen just call that file chocolateyPackage.ps1\n. > Why not automate a character encoding conversion to the correct encodings before a package gets built? \nI like it.\n-Rich :)\n. interesting thread-\nyou are bootstrapping chocolatey with puppet.  how do you install puppet?\nI have always installed chocolatey, and cinst puppet in unattend.xml\nThen I have a chocolatey module in puppet, that manages it going forward.\nI then put chocolatey into chocolatey repo, and keep it set on latest...\n. ummm...I kindly disagree... - \"but it should not be in there like today\".  \ncinst putty -Version 0.62.0.1 works before this change but not after.  Relying on the count of params is not a satisfactory test for batch mode.\nplus I agree with @ferventcoder that if you're changing one ingress into calling chocolatey we should make it consistent. Forking the functionality between cmd and powershell functionality is not ideal since the cmd is really a convenience factor for non-posh access\n. one last thing I might opt for array splat handling in posh or take the packages in via a pipeline, which means the source could be handled any way the user wants (objects)\nmaybe like 7zip vlc putty | chocolatey install\n. let me retest.  I will use current choco version and report results...  I do like the concept btw - i wasn't trying to be a pita.\n. I removed my custom version an ran this-\non a fresh Win7 Enterprise, I bootstrapped with the install method on http://chocolatey.org/ \nwithin cmd.exe:\n```\nC:\\Users\\admin>cinst putty -Version 0.62.0.1\nInstalling packages in batch mode.\nInstalling putty ...\nChocolatey (v0.9.8.20) is installing putty and dependencies. By installing you a\nccept the license for putty and each dependency you are installing.\n__ putty v0.62.0.2 ____\nDownloading putty (http://the.earth.li/~sgtatham/putty/latest/x86/putty.zip) to\nC:\\Users\\admin\\AppData\\Local\\Temp\\chocolatey\\putty\\puttyInstall.zip\nExtracting C:\\Users\\admin\\AppData\\Local\\Temp\\chocolatey\\putty\\puttyInstall.zip t\no C:\\Chocolatey\\lib\\putty.0.62.0.2\\tools...\nC:\\Chocolatey\\lib\\putty.0.62.0.2\\tools\nputty has finished succesfully! The chocolatey gods have answered your request!\nAdding C:\\Chocolatey\\bin\\PAGEANT.bat and pointing to '%DIR%..\\lib\\putty.0.62.0.2\n\\tools\\pageant.exe'.\nAdding C:\\Chocolatey\\bin\\PLINK.bat and pointing to '%DIR%..\\lib\\putty.0.62.0.2\\t\nools\\plink.exe'.\nAdding C:\\Chocolatey\\bin\\PSCP.bat and pointing to '%DIR%..\\lib\\putty.0.62.0.2\\to\nols\\pscp.exe'.\nAdding C:\\Chocolatey\\bin\\PSFTP.bat and pointing to '%DIR%..\\lib\\putty.0.62.0.2\\t\nools\\psftp.exe'.\nAdding C:\\Chocolatey\\bin\\PUTTY.bat and pointing to '%DIR%..\\lib\\putty.0.62.0.2\\t\nools\\putty.exe'.\nSetting up PUTTY as a non-command line application.\nAdding C:\\Chocolatey\\bin\\PUTTYGEN.bat and pointing to '%DIR%..\\lib\\putty.0.62.0.\n2\\tools\\puttygen.exe'.\nSetting up PUTTYGEN as a non-command line application.\nFinished installing 'putty' and dependencies - if errors not shown in console, n\none detected. Check log for errors if unsure.\nInstalling -Version ...\nC:\\Chocolatey\\chocolateyinstall\\chocolatey.ps1 : Missing an argument for parame\nter 'version'. Specify a parameter of type 'System.String' and try again.\nAt line:1 char:193\n+ [System.Threading.Thread]::CurrentThread.CurrentCulture = ''; [System.Threadi\nng.Thread]::CurrentThread.CurrentUICulture = '';& 'C:\\Chocolatey\\chocolateyinst\nall\\chocolatey.ps1' install -Version <<<<\n    + CategoryInfo          : InvalidArgument: (:) [chocolatey.ps1], Parameter\n   BindingException\n    + FullyQualifiedErrorId : MissingArgument,chocolatey.ps1\nInstalling 0.62.0.1 ...\nChocolatey (v0.9.8.20) is installing 0.62.0.1 and dependencies. By installing yo\nu accept the license for 0.62.0.1 and each dependency you are installing.\nUnable to find package '0.62.0.1'.\nFinished installing '0.62.0.1' and dependencies - if errors not shown in console\n, none detected. Check log for errors if unsure.\nC:\\Users\\admin>\n```\n. i am not using alpha version (which is the one on github iirc)\n. Iirc the chocolatey.ps1 isnt using positional parameters... so shouldnt\nCinst -version 1.0 pkgnane work?\nI appreciate your efforts but I think trying to solve this via cmd will only make fixing it via ps1 needing to unwind this.\nMaybe others have an opinion on this... I love the idea btw.\n-------- Original message --------\nFrom: Redsandro notifications@github.com\nDate:\nTo: chocolatey/chocolatey chocolatey@noreply.github.com\nCc: \"Siegel, Richard\" RSiegel@ise.com\nSubject: Re: [chocolatey] Added batch mode to chocolatey.cmd - cinst multiple packages (#304)\nSingle:\nC:\\Users\\Redsandro>cinst notepadplusplus\nChocolatey (v0.9.8.20) is installing notepadplusplus and dependencies. By installing you accept the license for notepadplusplus and each dependency you are installing.\n__ notepadplusplus.install v6.3.3 ____\nblah blah\nAdded commands (works with all commands):\nC:\\Users\\Redsandro>cinst notepadplusplus -version 2.24.1\nChocolatey (v0.9.8.20) is installing notepadplusplus and dependencies. By installing you accept the license for notepadplusplus and each dependency you are installing.\nUnable to find version '2.24.1' of package 'notepadplusplus'.\netc etc\nBatch mode:\nC:\\Users\\Redsandro>cinst notepadplusplus treesize\nInstalling packages in batch mode.\nInstalling notepadplusplus ...\nChocolatey (v0.9.8.20) is installing notepadplusplus and dependencies. By installing you accept the license for notepadplusplus and each dependency you are installing.\n'notepadplusplus 6.3.3' already installed.\nIf you want to reinstall the current version of an existing package, please use the -force command.\nFinished installing 'notepadplusplus' and dependencies - if errors not shown in console, none detected. Check log for errors if unsure.\nInstalling treesize ...\nChocolatey (v0.9.8.20) is installing treesize and dependencies. By installing you accept the license for treesize and each dependency you are installing.\nUnable to find package 'treesize'.\nFinished installing 'treesize' and dependencies - if errors not shown in console, none detected. Check log for errors if unsure.\nInstalled all packages. :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/304#issuecomment-20112828.\n. I googled this thrift shop and watched http://vimeo.com/m/57418480 ... no words.  Made my day\n. @redsandro I don't have to approve.  I am only here to critique, debase, and hassle people :) \nSeriously though - the best thing about open source projects, which this \"issue\" illustrates so well,  is that you had an idea, submitted a PR demonstrating a prototype on how you thought it should work, it was reviewed by people who care about the project, and someone else rose up to implement in a way that fits within the bigger picture.  Awesome work for an awesome feature.\n. hmm, if sarcasm works....\nI am not going to thread :shit: or anything.\nthe feature I could really use to help get my internal packages opensourced is-\na pkgsource id in chocolatey.config file or an environment variable that could then be used within chocolateyinstall.ps1 to replace a hardcoded url.\nRight now all my packages are hardcoded to an internal url, and ideally there would be a way to \nif pkgsourceid exists or env:$pkgsourceid exists then use that, otherwise fall back to url like Mozilla.org for firefox or whatever. \nSummary I want to be able to create packages that can be used universally, on the public - via mirrors or private feed. Embedding a url becomes problematic to maintain.  \nThen a param called pkgsource could be also used to override the default url.\nThis has nothing to do with the -source, source (but you know that already)\n. link?\n. example-\nInstall-ChocolateyPackage -packageName \"$packageName\" `\n            -fileType 'msi' `\n            -url 'http://chocopackages.myorg.com/PuppetEnterprise/puppet-enterprise-2.6.1.msi' `\n            -silentArgs '/quiet'\n            #-url64bit '' `\n            #-validExitCodes\nmyorg.com doesn't help you at all, and I don't want to put myorg url on the interwebs.\n. but I want to publish 100s of packages, for the world to consume, because chocolatey adoption would skyrocket, if people knew how to install/uninstall everything from Office to Exchange Server using just cinst. I just want to sanitize them.\n. we can certainly take this elsewhere.  there might even be an issue on this.\n. https://github.com/chocolatey/chocolatey/issues/269\n. The source code is always available.  Just rename nupkg to zip and extract the spec and ps1 files.\n. https://github.com/chocolatey/chocolatey/pull/210\n. what about write-output ? write-host = bad\n. we would still want customized parameters that can be created by the package owner, than could then be queried through a common syntax. perhaps listed through an xml tag in nuspec\n. Personally I use camelcase for id.  I like it to be poshy vs nixy. But I am ambivalant on setting a standard on that.\n. i think it should suggest a get-help or --help or some other usage information.  All the usage responses need obvious work.\n. I am a big fan of http://semver.org/\n. Passing it to the chocolatey gods for sacrifice... love it\n. not really relevant to .org but for my internal repo I git back all my packages and use https://github.com/rismoney/chocolatey-git\nI started making trivial tests for recognizing busted pkgs.\n. thanks... So here is how we manage the package repo internally.\nso we start with our git repo, setup very much like https://github.com/ferventcoder/chocolateyautomaticpackages\nthe difference being that each time we create or bump a version of the package we git tag it, and push to our internal gitrepo.  This allows for peer review.    The build.ps1 script is then able to iterate through every tag in the repo, and spit out the nupkg file into a dir.  We also run a bunch of validation scripts on the package as a form of package unit testing using pester.  We are getting to a point where the cpush can only be done by the bot running all this.  We don't want to let users upload to the repo anymore, and feel the git review process is ideal for vetting the package before upload.  \nNow the chocolatey.org site has different intentions, but perhaps a CI validation process can be instituted.  After all I don't think its practical to host every package in a single gitrepo, and gitsubmodules are nontrivial for the layman.\n. imho, its overreaching for cpack.  the receiver should have a triager (along the lines of a CI model)\n. funny you should say that.  i hacked something pretty crude through appveyor that runs the test suite i have.   it doesn't have the ability to spin up vms... :( and they don't have PR hooks, only single branch hooks).  I ended up ditching it.\nbut last I heard travis is getting windows support, so when that drops, we might have something pretty awesome.\nbtw-travis is awesome.\n. Thats so awesome @mwrock !! can i make a suggestion?  if you are going to provide other hypervisor/cloud functions, you might have the start of something like a powershell fog (see fog.io)\nyou might have, and I haven't looked at the source yet, but I envision these as external componentry you can just bolt on and re-use outside of box-starter.\n. Can you elaborate more on this @Redsandro -https://github.com/chocolatey/chocolatey/issues/342#issuecomment-31094523\nI don't understand not running windows, virtual Choco users, where boxstarter fits...\n. I thought chocolatey goodness was as good as it gets.\n. agree with you ferventcoder- that was my understanding.  \ni think its a metric s-ton of a parsing exercise that probably needs to start with TDD via pester, and make each use case pass... just looking at this readme https://github.com/isaacs/node-semver made my head hurt.\n. @ferventcoder - is this alright for me to do?  I rebased and branched https://github.com/chocolatey/chocolatey/pull/273 but preserved the authorship...\n. have you tried the carat ^ escape?\nthats a cmd escape char which might work.   havent tried yiur specific example though.\n. Interestingly - I was asked this question a few days ago.   The long/short of it is that the chocolatey project doesn't directly manage the nuget and/or it's spec.  What you are suggesting here, is a change in nuspec functionality not chocolatey.  \nRight now, you can build this logic in via powershell with wmi, but it has its own set of downsides starting with ambiguous connections of packages.\n. > Why is this a change to the nuspec functionality? \ndependencies are defined in nuspec.   however there is no conditional logic around it.  It is only package to package dependencies.   foo.1.0 requires bar.2.0 or greater type stuff.\n\nI would envision Chocolatey installing two empty packages when you install it. \n\nthis seems very hackish, to get at OS versions.  This overcomes package to package dependencies with a fake OS package.  But it only addresses OS dependency.  What about other logical dependencies?  For those am I just left with powershell?\nIdeally, I would want some dependency capability to do stuff like:\nxml\n<chooser>\n  <when $os=6.1>\n    <dependency 1/>\n  </when>\n  <when $os=6.2>\n    <dependency 2/>\n  </when>\n <else>\n    <dependency 3/>\n  </else>\n</chooser>\nright now this all needs to happen in chocolateyinstall via just another cinst within a conditonal\n. i think so. ;)\n. I thought I wrote another reply to this- but I guess I didn't click comment...\nAn idea on this topic is to make the nuspec dependency element a parseable item around things like os, features, architecture and then have run-nuget or it's caller like install-chocolateypackage use a set of dependency helpers to do the needful...\nxml\n<dependency id=\"|os|\" version=\"6.2\" />\nand we use dependency helpers based on the between the pipes or other delimiter.\n. I was under the impression this functionality was being abandoned.  For ex:  http://support.microsoft.com/kb/834489\n. You suspect L11 in chocolatey cmd as its missing /b?\nExit /b if run inside script shouldn't Close windows...only exit script.  Not near a pc but I will check out asap\n. Ok I get it.   Had you tried cmd /c successfully or do we need something clever.   - i have a few ideas on messing with the call parameters to be passed properly but got to work through edge cases. /? Is being treated as a separate param to call...\n. Ok.  That's fair.  Put that in.  I will later refactor to avoid expensive cmd sub calls\nI saw a post on stackoverflow re call issue and ways to deal with params being treated as a single one.  The quotes may be forcing delimiting %* as a call param rather than a choco param.   There is no %~* so I think the more elegant (read yucky dos quirky crap) solution involves forcing the entire param string into the a single first call argument.\nIe\nChocolatey /? needs to be treated as 1 arg instead of 2 from a call perspective.\n. i think this is the link i found yesterday. (BryceatNetwork) response...\nhttp://stackoverflow.com/questions/9396311/run-a-input-parameter-as-command-in-dos-batch-script\n. Agree with @mwrock wholeheartedly.\n. Choco version is deprecated...use list or search.\n-------- Original message --------\nFrom: codearoo notifications@github.com\nDate: 11/26/2013 6:25 PM (GMT-05:00)\nTo: chocolatey/chocolatey chocolatey@noreply.github.com\nSubject: [chocolatey] choco version command should not do anything other than report its current version. (#382)\nRunning 'choco version' or 'chocolatey version' should be quick to just output the version number. But instead it's checking online to see if it's the latest.\nI believe that instead of doing that, it can output something like:\nname : chocolatey\nfound : 0.9.8.23\nPlease run 'choco version-check' to check if an update is available.\nor something to that nature.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/382.\n. not sure if it helps you guys, but to get an effective && if powershell you would need\nwhoami ; if($?) {whoami}\n. i added the original uninstall capability as a naive implementation that requires chocolateyuninstall.ps1.  many pkgs dont have that capability.  its very ymmv at this point but its going to get a lot better as indicated above so stay tuned\n. I say go ahead!  I added the -specificfolder switch before we went 7za so imho it's a regression.\n. iirc this is an intentional omission. the msi guid is typically needed for uninstall.  i have a way of automating that but have not looked at it in a bit.  last i heard was we were looking at choco msi tighter integration overall with windows installer\n. usage:\n$packageName = 'PuppetEnterprise'\n  $fileType = 'MSI'\n  $uninstallGuid = '{89BA3D80-5EEF-40BC-A7F9-9E234BEB0D46}'\nUninstall-ChocolateyPackage \"$packageName\" \"$fileType\" \"$uninstallGuid /norestart /qn\"\n. see\nhttps://github.com/chocolatey/chocolatey/pull/99/files\n. the purpose of that commit functionality comes from a requirement to be integrated in a non interactive environment.  if the functions blindly exit state 0s without exception raising then any automation around chocolatey where failures occur, the errors will be swallowed.  the outer lying tool will think everything was honky dory, when in reality failures occured.\nits not thrilling to me, but i was seeing exit success when failures occured.  I am using puppet with chocolatey.\n. all for the hashtables btw :)\n. > disabled the mandatory exit because it interfered with the ability to continue installing subsequent packages if one package failed \nimho the mandatory exit is the right and default behavior.  i agree a switch show control -ignorefailures...  i am a big proponent of fail early and stop all things.\nright now for better or worse its being called from puppet via chocolatey.cmd.  that uses -command\n. agree with you 100%.  Inserting proper exception management is needed.   My short term goal was selfish, get the error out.  Improvement is def needed and i think choco has longer term plans to go c# which will probably help resiliency overall.\n. ok someone submit pr and make sure non exit 0 is bubbled all the way back out to cmd/posh on any failure.\n. so if there is a separate md5 file, do you grab that file, get content it into a var and append it like in your link?\n. This url switching is thus driven by a csv file I need to manually build after inspecting each package's chocolateyinstall.ps1 finding the url and mapping it to an alternate url?\nI suppose this is scriptable to generate a csv, but does this highlight a bigger issue with urls within packages?  It kills package portability.  Why wouldnt upstream adhere to using a url mapper too... packageid, url. \nBtw neat take on the approach!!\nI want to opensource my choco repo but do it in a way the pkgs could be used by someone w/o mods.\nThis is 1 approach.\nI was originally planning to make the hostname just an env var... but this wont help upstream internet based urls plus you could have foo.com/setup.exe and bar.com/setup.exe\nI am interested in ppls thoughts...\n. rebase on top of upstream/master?\n. succinctly, src/functions essentially should not be relied upon. whereas src/helpers/functions should be.\n. who pays the processing fee?\n. got it!\n. interesting, so if i can earn 5% rewards, and spend 2.9% to send a payment, plus 1% in fees, I can earn 1.1% profit, for every $500 I send to my own org ;)\n. Can you describe some of the design choices?  I would like to understand the intent. Any hidden aspects like http://lov5-77.diply.com/love-eat/30-famous-logos-that-have-a-hidden-message/51404\n. Ahh that's really interesting.  My thought was that it was a play on packaging.  I didn't realize it was chocolate :). I thought it was a box.  I really like it.  But would a transparent (no background) be the usage or would everything go yellowy?\n. I couldn't agree more with @ferventcoder comments.\nQ: Is the chocolate candy wrapper  too much.  In other words does it not go too faraway from a computer thing to a candy bar, leaving nothing behind?  I see why you showed us the squared off 1 first as I think I am warming up to the 1st one, but I think the \":\" colon is not needed.  choco will go well beyond windows\n. I was not against it.  I was inquiring.  I actually really like all the work you have done and have to express sincere kudos for your hard work and volunteering.  My hope for whatever logo that is chosen is that it represents choco to where its goodness becomes synomous with all the good people involved including you @juliankrispel.\n. Agree.\nc:\\>ocalatey ftw! :)\n. going to agree with @gep13  6 pops against the black background and the letters have a transparent magic quality.  I didn't notice this before, but I also love the near symmetry afforded by the C and the Y.\nIt certainly has a richness!\n. I would love to see one of these 2 go in as it has required me to fork for internal use.  I put the changes in that @ferventcoder unwound :) despite them being an ugly fix.\n. > Would love to see a new 0.9.8.x version.\n:+1: \n. This is a great idea.  Can we store the ignores in the config.xml where the sources will be?  This way a cup all accidental run does not have unintended consequences.\n. well if package foo.1.0.0 is on one source, but foo.1.0.1 is on another source, do you really want to cross sources?  My source names could be staging, test, dev, prod, and so latest might have different meanings.\nPerhaps we should store a source.txt file inside each package listed in the lib folder, and then use when performing a clist -lo -source example.com\n. I just saw this.   Precisely what I was thinking on the google board.  Are there challenges you see with this, because I think I can build something around this pretty easily.   I haven't worked with nuget long (or chocolatey more than a few days), but maybe this should ultimately address dependencies in nuspec.   Like force removal, manual step through dependencies,  or just the singleton specified.\n. I should have a pull request by Tues for uninstall sometime this weekend.  Just got it working!  Awesomeness\n. Agree on name for obvious reasons.\nI am not up to dependencies.   Have a few ideas, but all rely on persisting a dependency.file in some form.  Only until last dependency is removed can underlying be removed, unless forced.\nAgree on not prompting\n. Does chocolatey even know about dependencies or is this purely a nuget construct?\n. strictly nuget handling for now-\n@ferventcoder https://github.com/chocolatey/chocolatey/blob/master/src/functions/Chocolatey-NuGet.ps1#26 is each $line here the packages and dependencies returned by nuget?  \nWe can check if $line is not  match for $packagename (therefore it must be a dependency) to place a flag in \\lib\\$dependency, like dependency_of.XYZ.ver\nThat's trivial.\nThe uninstaller then needs to do what?  We instead save $nugetOutput L24 to \\lib\\$packagefolder and reparse it at uninstall time.\nFurther we can make L 29+ we can make it install/uninstall agnostic.\n. so before write-chocolatey-failure.ps1 is called during an cinst then a remove-item needs to occur on \\lib\\$packagename.\nI find myself deleting \\lib\\$packagename manually on fails regularly.\n. So I took in your change LucidSage- I like the bulk of what you are attempting!  I am confused as it now uses the nuget registered source list (you add chocolatey.org) to that list during setup?\nWhat if I have my own internal repo?  I run nuget sources?  Where does chocolatey read in the sources? I didn't read the whole pull-req.\nI was really hoping for a chocolatey sources command to not mess with nuget, but this might be solid.\n. Awesome, thanks for the clarification!  It might be easy to cherry pick most of your commits and just leverage a specific config file.    I had been search/replacing all this since I run a chocolatey org internal and didn't want to use actual internet chocolatey.org\n. I am not sure how ;)... I haven't built unit tests for powershell, though I would like to learn.\n. Wow Pester looks like an awesome project and I like how you used it.  I am not sure if I have the cycles to dive into crafting this (maybe 1-2 months before I can revisit pester) since it would be yak shaving against my short term continous integration objectives. \n. tyvm!\n. you're awesome.  thanks for acceptance into your project!  btw-I just hecked out some blogs you wrote, and enjoyed the content, particularly the remote workers/highly collaborative stuff.\n. Great idea-Thoughts on this- cinst msi1,msi2,msi3 -arguments '/quiet'.  the msiexec call-outs should use start-process -Wait to enusure async.\n. I think by default if no uninstall path is provided, it tries to find it automatically perhaps via reglookup or similar wmi query.\n2 relevant links \nhttp://community.spiceworks.com/how_to/show/2238\nhttp://www.vbforums.com/showthread.php?t=598355\n. the web installer version still uses that big file, then right? just clarifying half a dozen folders i got here ;)\n. trying to use the version from _packaged_output... i think i just needed to run chocolateyinstall.ps1\n. all good 9.8.16 =big.  i have like choc-ultimate, choc-build, choc-current, choc-lucid, choc-myco, and thought i was losing my mind.  i got probs and should go to bed.\n. I now see the paradox in requesting a pull not for pulling :-) Is the right thing to do creating a gist or repo link?\non a more relevant note-I wanted to make a func where the user doesn't need to specify a guid for uninstall.ps1 for msi.  looking up the code at uninstall time won't be reliable.  so I thought if we can grab it during install we know it is definitely associated with that package.  the question becomes where to put it.  I know you were working on additional persistence so I didn't want to just drop it in lib\n. i think that is solid thinking.  for msi, chocolatey uninstall can and should be optional for ease of use, but you still want to call that if it exists. \nthis way you can execute a post msi task.  for instance a remove-item -recurse on a folder the msi doesn't clean up every now and again.  \nAs I type this, I am now wondering if there should be a chocolatey-pre-uninstall ps1.  For instance if something runs as a service, I might want to stop them/taskill whatever to insure msi doesn't complain about something being open.\n. I finally had some time to look at this.   I think it is close, I just need to test it a bit.\n. do i not have it right?  I thought it was dropping in a join-path $env:chocolateyinstall`\\lib $packageName\nthe code does not change for each install.  it is unique product code per package.  for example package1.1.1.msi will also be the same code on every system.   package 1.1.2 will be a unique product code (at least thats how i  read it - i could be wrong)\nside by side installs aren't possible with msi, unless some transform magic or a wrapper that provides a unique product code for additional installs is built in.\n. rebased obviously.  this now requires fix_zipfolderpath PR for the environment variable.  need to retest later today hopefully.\n. added some crazy msi file dumping to assist with whatprovides for msi\nneed to retest...\n. thats an interesting idea. \n. i have thought about toying with honing a registry event hook for the uninstall key.  i wanted to unify ARP with choco.\ni think i can do it.\nsome thoughts were\npreserving regkeys\nif choco does it then stronger packaging reqts are needed.  ie matching arp name with title for instance.\nwe want to minimize choco making assumptions.  it has to be deterministic.\n. thinking everything not just msi\nthe uninstall string is dynamically created by the installer service itself.  in msi this is not provided beyond the guid.\nessentially i see swapping this uninstall key for cuninst pkgname.  it works awesome.\ni also considered append to that key and call chocolateyunistall -arp to have it just do a minimal amt of cleanup.  \ni have this stuff on my todo list but i am swamped with projects. \n. interesting ideas. the diff would be interesting.  Plus there is 32 bit and 64 bit keys... also not sure what would happen with depdendency packages. lot of variables in this thing.\nwhen does the garbage collection function get called?\n. awesome.. so does this particularly address the author that does not provide the chocolateyuninstall.ps1and this attempts the needful basee on reg diffs of uninstall keys?\n. i can do this, no prob\n. what level is this for-- fault tolerance, package availability, or both?  like would a test-ping on the array members be sufficient, or if the package is not found try the next source, etc?\n. Did you pull request the wrong branch?\n. I have some posh code that might make the hashing virtually invisible to package authors and users.  Need to sort out a few details.  cpack sounds  right for authors.   checksum files, nupkg, scripts,  dirs, we have options.   Have not given this thought, but I just played with headlock a bit the other day and may have an concept\n. the ftp PR conflicts w/ this iirc.  i feel a rebase for someone :)\n. Going back to the original message - has anyone tried changing the buffers in get-webfile?  I bumped that all the way up to 1048576 and helped a ton...\n. I think we should re-invigorate this-  \nThe guys here are putting logic in chocolateyuninstall to see if the binary that was already downloaded exists.  if so then use it, otherwise they are re-fetching it.  this should be built into chocolatey, to eliminate the verbosity in the chocolateyuninstall.  i like it minimal.\n. so this was created on master branch.\nCan you bring this changes in via a new branch?  I think you need to close this PR and open a new one.\nI would also do a git rebase -i upstream/master (assuming the upstream is chocolatey/chocolatey) and fixup your 2nd commit.\nI am also going to look at the code now to see if anything stands out.  After you do that, and reopen a PR I will test your change and try to move forward.  I know you have been really patient.\n. also make sure you do a git fetch upstream and a git rebase upstream master to ensure there are no conflicts that need to be reconciled as stuff has changed since you first contributed.\n. agree - \nI'll threadcrap - but I think the contributing should use this workflow.\nassuming git remote is named upstream for chocolatey/chocolatey\ngit checkout -b \nmod make changes.\ngit push --set-upstream origin foo\nmake more changes\ngit push origin \ngit fetch upstream\ngit rebase upstream/master\ngit push -f origin (remote username/chocolatey).  Should never be sacared, if they are in a branch.  Be nervous on master. \nopen PR and then \ngit fetch upstream\ngit rebase upstream/master regularly until your PR is approved if commits go in before yours\n. yes\n. would these be ps1? psm... would an example be say - an iis helper?\n. https://groups.google.com/forum/?fromgroups#!topic/chocolatey/VougffEcvSE\n. pull request 119 supercedes this and includes all the changes in this (118)\nI wasn't sure how to build branches on branches since I have been using 119 in my prod environment, and 99% of the changes were in chocolatey-version.ps1\nWhile this PR does fix everything noted in the above commit msg, it proved to be too slow for an instantaneous query need of what is installed according to chocolatey.  So I added more logic to the file and issued a separate PR : https://github.com/chocolatey/chocolatey/pull/119\n. agree - better name.   is there an example of a switch you set globally?  like -pre? \nok, let me revise.\n. I think this now works a lot better - I appreciate the advice.   I was looking at some advance param stuff and it gets wonky with multiple optional parameters if unnamed.\n. ~~i think am going to change the output for localonly to a more meaningful (vs. the unavailables)~~\n~~packagename==version~~\n~~I think that is pretty common, pip and some other *nix package managers use that in some scenarios.~~\n~~otherwise working with the puppet provider I have 3 layers of escape chars, ruby, dos, and posh and it is ambigious.~~\n. simplified commit\n. I have this in another outstanding pull request... :)\nThat is why you had an issue... The provider is based on my repo, and pending upstream acceptance\n. This also a change prepped, -lo or localonly\n. you can grab my changes https://github.com/rismoney/chocolatey if you'd like.  i started down the exact path you seem to have arrived at.  i think it was just chocolatey-version.ps1 for the query changes and chocolatey.ps1 for the switch capability. hope that helps.  feel free to mod it since i just hacked a few other providers to cobble something together, since my ruby knowledge is 1 week in.\n. cver all -localonly or cver all -lo will do this. \nnot sure about chocolatey list -installed off the top of my head, but if we want this, it should be trivial...\npersonally i don't understand the difference between list and version... ;)\n. what version of chocolatey are you running?  With the fixed cver (i compile mine from source)\nname                                                                  found\n\nDomainTimeII.client                                                   5.2.2.20120215\nGoogleChrome                                                          19.0.1084.52\nHPSPP                                                                 2012.08.0\nMellanoxDrivers                                                       2.1.3\nNetBackup                                                             7.1\ncitrix                                                                12.3.0.8\nlync                                                                  4.07577.0\nOffice                                                                14.0\n. note spaces jacked up\n. Sounds like you want packages.confg (see here https://github.com/chocolatey/chocolatey/wiki/CommandsInstall)\nAlternatively the boxstarter project might be something you are after if you are looking to do multiple repaving\nhttp://boxstarter.org/\n. ferventcoder- what are the implications with putting this in program files, and \\programdata or similar area for lib? I am sure xp/win7 compatibility, uac and folder perms factored in. \npersonally I tend to like it on c:\\ because it is somewhat of an entity unto itself - sort of part of the os, but not, but should be :) plus everything is in one spot, making tweaking and fixing easy.  Microsoft never had a clear model like http://www.thegeekstuff.com/2010/09/linux-file-system-structure/ and so things need to be forced a bit.\nI am not sure how you addressed per user installs, per computer, if at all...\nI also think it (can't recall) but it sets some variables on the user level, and not machine which i need to look at.\n. oh, i left out the info you might want - i think the environment variable ChocolateyInstall determines the path where the installer puts it...\n. Program files, with lib in Ugh hidden c:\\programdata would be standard?\nBut I like it on sysroot since I treat a pkg mgr different than a traditional app. My coworker wants it on d:\\chocolatey in prod \n. reference-http://msdn.microsoft.com/en-us/library/s2esdf4x.aspx\n. @nathanaeljones If you are thinking of installing beneath program files, don't... UAC, gets in the way.  and gem installs will bust. And spaces get ugly... Anywhere else (off root, for example) should be fine.\n. speaking of get-webfile, i swapped in several newer ones for testing - http://poshcode.org/?lang=&q=get-webfile.  I was troubleshooting what I perceive to be slow x-fers on a 10g network.  v 4.1 is significantly SLOWER than the 3.x series.  The issue turned out to be tweaking autotuninglevel and ramping up the buffers from 4096... but whatever was done in 4.1 is slower.\nBack on topic - I HATE passing passwords directly from cli.   get-credential requires interaction...maybe something with securestring would work?\n. No config file as of yet, except for sources.\nI apologize.  I don't hate pw at cli.   I actually had a conversation with someone on the topic of pw in files that ended up in version control... You can guess where that went.\nWhat you are describing does sound reasonable.  \nDoes the getweb file support http://user:pw@url syntax?  I know modern browsers disallow it...\n. I think you would want this flexibility on updating as well...  i wouldn't want to cinst pkgname -ignoredependencies and then cup pkgname and get extra stuff.  we should log the initial argument usage for future default preferencing that particular package.  now that I think about it, uninstalls might need a -deletedependency...\n. I an not familiar with the particulars of ruby devkit but I think, that ignoredependencies, would just cause chocolateyinstall.ps1 to execute without the nugety goodness... Am I over simplifying?\nSo, I am not sure this would fix your use case.\nWe probably need to track dependencies in both directions...\n. what should it have done in your opinion, upgrade the existing one to 1.9.3?\nruby is an interesting use case, because like java (good/bad) you can take on many concurrent versions... i run a few actually.\ni wouldn't trust running the ps1 w/o the dependencies in place. how do you know macler installed 7zip?    if he ignores dependency and 7zip is heavily used in chocolatey-install.ps1, then he will get a boos all over. should those then be supressed because he ignored, and now he is in his own world of support/hurt.\n. http://poshcode.org/3537\nGoing to test this one- 7 week's old...\n. yea, i went to the authors website- http://mnaoumov.wordpress.com/2012/07/24/powershell-add-directory-to-environment-path-variable/ and right at the top, is his note...:( fail\n. i'd want to use exclusively system variables.  so what do i need to do exactly?\nis there a problem with passing params to InstallChocolatey.ps1 that this can't be done within it? isn't that what's in the bit.ly url that gets invoked?\n. I was shooting for an optional switch if specified, while running under admin that could do it for me :)  I have been installing chocolatey on 400 servers and I have seen some bizzare issues with environment path modification and powershell putting in 2 semi-colons or none.\n. I saw a discussion here - http://stackoverflow.com/questions/4225748/how-do-i-pass-named-parameters-with-invoke-command which uses script blocks- somewhat convoluted.\n. @ferventcoder \n\nTo go to system, it would just take adding them manually and applying this fix for now.  I think in the future we could make the installer smarter.\n\nAgree. Can we do a git fetch upstream and git rebase upstream/master (assuming your chocolatey/chocolatey remote is upstream).   Lets get the innovation, but lets get @abombss to a git rebase -i  fixup on the 2nd commit, especially since it mods the same file, and we want every commit to stand on its own as workable going forward.\n. it returns \"does not appear to be on the source specified\" if the $versionlatest is empty.  \nwhat happens when you just do a nuget list kdiff3 for example?\nWhat is in the list.log in your chocolateyinstall folder after you run chocolatey update all?\n. list.log should contain the output of all packages like you listed for kdiff.\nif that file doesn't have the information, you get the errors you see.  lets first make sure it is resolving nuget before going into details.\ngo into C:\\chocolatey\\chocolateyinstall.\ntype \n. .\\chocolatey.ps1\n$nugetExe\ndoes it return C:\\Chocolatey\\chocolateyInstall\\nuget.exe ?\n. didn't forget about this- i will test further, probably next week in my chocolatey lab.  the issue is definitely $versionlatest being empty, but need to instrument it first hand.\n. did the line-feeds or spacing change?  not sure why it shows the whole file changed...\n. I don't have a proxy requiring auth so I will punt.  It looks trivial, as if you don't provide the switch, its a noop.\nI am going to just flag this for updating documentation. before merge/closure.\n. bump this would rock - i have had ppl ask me about this.\n. this approach is actually really clever.  \nSeveral questions - Do we need a \"windowsfeatures\" added to chocolatey-uninstall?   Can multiple features be specified on the same line?   I know the dism /online /enable-feature can take an unlimited number of /featurename: switches.\nLOVE THIS PR!\nAside:\nI am going to modify the puppet chocolatey provider to support just the sources param, since everything else is \"in place\".    .  The more I think about it, the more I think chocolatey is the ultimate provider for puppet on windows.  \n. say i wrote a helper chocolatey-restart that simply closes the active session and reopens a fresh posh. is this invasive? would it work?\nanother random thought-maybe wmi event consumers can track the change to env vars...\n. Did you have an idea on holding cell?\nAre you implying that any error in chocolateyinstall.ps1 does not unwind to a clean state upon error?\n. The only \"thinking\" chocolatey does is check lib.\n-force kills thinking\n. are you suggesting then, that if there is a failure, then the $packagefolder then just be moved to something like \\failures\\$packagefolder?   i would think that it should also run chocolateyuninstall.ps1 with a silentlycontinue...  There is no way to know the \"impact\" of errors since anything could have happened.  Also worthy, is everything needs to get logged...\n. @ferventcoder - \"don't pull yet - pull requests\" - where have i seen that before?\n. oh snap.  it does!  good job! \nmaybe it needs refinement to provide a bit more user friendliness.   Right now, is the end user supposed to just \"guess\" what the params are?\n. It needs to be fixed for full functionality.\nCannot run say /? Because it won't cleanup, which we know about.\nThe Params should be at the discretion of the package creator, and they should publish a list.  This way it doesn't need to execute the binary for help.\nParams might also cross multiple helpers.  I unzip a set of folders to Param1 then install chocolatey install to param2\n. say i install 2 msi's.  i want to pass /qn to one and /quiet to another.  then i want to install a zip.\nthe developer has to have control over what goes where.   \nin https://github.com/chocolatey/chocolatey/issues/160  I'd want in chocolateyrun.ps1 a function usage()\nwhat cross my mind earlier is to make some sort of chocolatey  DSL like pester (which i haven't looked at yet)\n. no dice fellahs.  env var's are string only.\nref:\nhttp://stackoverflow.com/questions/13128284/using-non-string-as-env-variable\n. I think I wanted to have a function help() too... and maybe uninstall should go in same file...\n. > @rismoney @Iristyle Interesting idea proposed by you guys - the chocolateyInstall.ps1 becomes > chocolateyRun.ps1 and in it it contains functions that chocolatey will call \n\npowershell\nfunction ShouldInstall {}\nfunction InstallSteps {}\nfunction ConfigureSteps {} #optional, in case folks want things installed but not configured.\nfunction UninstallSteps {}\n\nIf we did this, I need to it work for existing packages, so if functions don't exist it has to just call chocolateyinstall.ps1\nas it does today.\n. heh, I left off initial mechanics of the idea-\nif (test-path chocolateyrun.ps1) \n. .\\chocolateyrun.ps1\nif (test-path function:\\shouldinstall) {run it} repeat where applicable.\nremove function on success (cleanup)\ndeco chocolateyinstall.ps1 through attrition.\n. as for the steps shouldinstall,installsteps, configuresteps, uninstallsteps\nI think this could also provide the mechanism to support downgrade.  (steps to preserve config files, uninstall reinstall, whatever)\nisinstalled (instead of just lib checking) let the package creator define what it means to be installed - does a regkey/file exist for example?)  very useful in .exe where unwinding/detecting is not necessarily in reg.\ninfo\nswitch usage - package help - verbosity, dependency listings, version whatever\n. The change looks trivial to me, but how do you call the chocolatey installer with a different url?  I am not familiar, because I use nuget.exe to install from internal chocolatey.org, since it requires a single exe drop (and dotnet4).  Found that to be the best way, because I maintain custom chocolatey builds that aren't in lock step with ferventcoders releases.\n. ditto. no issue for merge. sad 7 months went by.\n. brown fudge, by any other name, would it be sweet? lol\nits what yum calls it... I think apt-get uses apt-file search... \nhows about chocolatey filesearch ?  lookup, filelookup, seek, frisk, pry, dig, or taste, reach.\nI thought whatprovides was explicit...It tells you what package provides the file.  not as problematic as the cunst.\n. hmmm.  its not so useful yet I guess to determine console.exe is installed by console2.  What about a .dll it dropped in system32.  \nthe goal is to be able to track down the \"source\" of any file on the system and make every file traceable back to a package.  at work we are going to mandate that every single piece of software we deploy is sourced from our chocolatey feed.\nRight now it is just filename matching.  Imagine this future script /tool in my hopper:\nCreate list of all files on a system and subtract out all known OS files AND package files (the latter always been difficult).\nThen track the rest of the files deltas day over day and allow exception list.\nA true rogue file report.  Plan to do this on servers at 2am nightly\n. The package creator needs to provide filelist.txt if using non msi or zip currently...\nCrude yes, also worthy to note that whatprovides does not mean does provide...\nThe latter would require procmon style inspection or other scanning.\nI just thought it might be useful to the community.\n\nFrom: Rob Reynolds\nSent: Mon, 24/09/2012 05:10 PM\nTo: chocolatey/chocolatey chocolatey@noreply.github.com\nCC: Siegel, Richard RSiegel@ise.com\nSubject: Re: [chocolatey] chocolatey whatprovides filename\nSo I install a tool package - that tool uses bin dir so it installs to something like c:/tools/packagename where it auto adds a that directory to the path. How do I trace that back to the package itself as it wouldn't be as easy to find?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/168#issuecomment-8834886.\n. whatprovides is akin to yum whatprovides.  I think its kind of neat and more of a nice to have feature to grow on.   I am ambivalant if this makes it into the codebase.  It was more an experiment that worked... \n. ok - its not perfect implementation (what is?). but here is the usage-\nI have a file on my system.  I am not sure if it was from a chocolatey package install, malware, a download, whatever.  I install everything from zip or msi currently.  So I see a file that looks suspect.  I want to see if it came from inside a package.   Since zips (currently) and msi's will be able to log all the files they encompass, we can use that get-content and seach the txt file to determine if a file is rogue (not sourced from a chocolatey package) or we deployed it.  Its not a dead on thing, but it could be a nice feature.  \nIdeally I would want have lists from all the operating systems files and then be able to identify every binary file on a host.  It can become really helpful with system32, ruby versions, etc. \n. This PR and the associated #164 haven't been updated in 7 months.   Can we take this in as an advanced user improvement, that if someone down the line wants to simplify and improve, it can be part of a refactor?  I think there is value in the code.\nI'd probably fixup the commits and amend the commit msg, to be inclusive of the others.\n. your the boss ;)  how do you back that branch to the parent commit and then pull the changes.  I was just trying to assist as I know there are a ton of PRs and don't want to stifle progress for project newcomers who think they won't get merged. However I can help, let me know.\n. speaking of continuous integration ;)  eliminate direct contributions to chocolatey.org.   have all packages go through a unified gitrepo (even gitsubmodules).   use git hub hooks like on a merged pull request to trigger a cpush.  take the user out of the owner, and turn it into package curators, and contributors.  no direct upload for packages...\n. running alpha2 build now, and the bizarre thing is that it appears slower because it is updating more relaxedly, but is actually faster...  agree with you mwrock-awesome!\n. i see no issue here.  i had no opinion on the status bar.  \nglad to see you are using puppet and chocolatey together.  how is that working out for you?\n. registrytreechangeevent could be used to find if uninstall string was added.  We replace with cuninst... Or we do it with helper and its up to package creator to unify package.  Making assumptions even logical can result in busted items...\n. I found good com query but it neglects syswow on 64... Not sure how to fix it...\nCould be panacea, because win32 product wmi sucks and custom mof requires admin...\n. Cuninst should then call uninstall string...\nSo then chocolatey can uninstall packages it does not technically manage, albeit not silent... unless we add more logic :)\n. i tend to agree w/ you.  that fear would steer this responsibility to the package owner if he wants his app to be unified.\ndocumentation could detail this...\nalso chocolatey might make a data integrity error in trying to be smart into an app that would require an expert to unwind. \nthe other interesting thing is we can create a helper to add items to add/remove programs that don't normally get it (like tools) or zip packages, etc. its actually trivial.\n. The 42 seconds is why I added localonly...\n. I relooked at code- got confused, you just moved those lines around.  Its not new. My bad.\n. Ah ensure latest was expensive.   Thats why I switched to present in my manifests.   Need my prod env highly deterministic and latest could update something.\nAre you running choc.org internally, or running against the public site ?\n. I am not really sure how we want to do this...\nI started with converting chocolatey.ps1 to a function. This should help testing it.\nhttps://github.com/rismoney/chocolatey/blob/039afe39922298af8ba0d2ec74eaddf73f049c9b/src/chocolatey.ps1\nchoco could then be a very thin file to call Invoke-Chocolatey\ni welcome any input!\n. fyi - my old pull request (still out there)  fishes out the guid, during install, safe storing it to a txt file for later use...I have been meaning to get back to it...\n. interesting... i would have thought people would like to fail early and abort...  Personally I have a bunch of packages, and if a pre-req fails the success of post packages is usually botched as well. Otherwise why are they linked?\nPersonally I'd like to strive for idempotency to address @tomOne \"annoying and reduces UX\" issue.  chocolatey should just \"do the needful\"...I hate when I get a box of chocolates (that rocks!) - ie when it doesn't stop on error...\nMaybe if there are differing opinions there should be a silentlycontinue or similar switches via config file.\n. I like determinism.  I would need stop on error.  The systems i manage are critical and must not leave things in barney.\n. http://gallery.technet.microsoft.com/scriptcenter/Get-PendingReboot-Query-bdb79542.  iirc at the summit, @mwrock mentioned he was doing this with his boxstarter.\nIt might be nice as a helper for package authors- ie- Get-RebootState before, to fail cinst package fast.  This way we don't attempt an install on an msi that we know will bust with a pending reboot.\nor... Building it into choco, might create the undesired behavior where we can't install something unless a boot happens... (Unless we provide a -bootoverride)  This might be good too.\n. noone wants to help me :( - our sysadmins are -matching in every package...ugh - im swamped.\npowershell\n$getpath = [System.Environment]::GetEnvironmentVariable(\"PATH\",\"Machine\")\n$getMatch = \"$getpath\" -match \"$installdir\"\"\nif ($getMatch -eq \"True\") {\n  Write-Output \"Note: $installDir exists in the PATH environment variable so we will not be adding it again\" \n}   \nelse {\n  Install-ChocolateyPath $installDir 'Machine' \n }\n. This is also wonky\n```\nPS C:\\@inf\\winbuild\\scripts> cver all -lo\nname                                                        found\n----                                                        -----\nchocolatey-alpha3                                           no version\nPS C:\\@inf\\winbuild\\scripts> cver chocolatey -lo\nname                                                        found\n----                                                        -----\nchocolatey                                                  0.9.8.20-alpha3\nPS C:\\@inf\\winbuild\\scripts> cver chocolatey-alpha3 -lo\nname                                                        found\n----                                                        -----\nchocolatey-alpha3                                           no version\n```\n. L14 of Chocolatey-Version is the culprit for the wonky example above...\n. ok,. fixed the first issue.  merging..\n. it seems to be working now.  amazing how a few chars was causing turtles all the way down for me. cleaned up this thread to, without my rants. :)\n. Definitely.  Maybe splat the multiples.  Don't know how sweet the sugar is except from cmd wrapper.\n. You wrock :)\n. Haven't tried but if you cinst unknown package it will exit non zero?\n. turned out to be pretty trivial... wasn't sure if you wanted me to keep this separate.  I think it is much cleaner looking:\n20121205-01:04:34 [-----] ################################################################################\n20121205-01:04:34 [-----] #                  Going Chocolatey on 2012-12-05 01:04:34Z                                                                    #\n20121205-01:04:34 [-----] ################################################################################\n20121205-00:53:56 [DEBUG] Evaluating NuGet output for line: Successfully installed 'notepadplusplus 6.1.7'.\n20121205-00:53:56 [CHOCO] ______ notepadplusplus v6.1.7 ______\n20121205-00:53:56 [DEBUG] Running 'Delete-ExistingErrorLog' for notepadplusplus\n. I restored the file, this can be merged. \n. This is working in my environment.  Let me know if you see any issues.\nI want to rebase the exit codes PR off this, but I really don't want to mess up my branches.  I work sequentially in git or start to lose my mind after more than 3 branches. It'd be stellar if it is part of beta1 :)\n.   That blows :-1:  I will destroy it... ok - maybe i will flag it to .21-alpha1 internally.\n. I have been using this for several months without issue. Log after heavy usage (installation of 20+pkgs) is <1MB which is hooked up to puppet provider (so it does do stuff on passive stuff).  I deem it safe to merge at this point.\n. i fixed the conflict here with @mwrock 3ec93e6\n. commit on deck for actual exit 1 scenarios\n. It is worthy to note, that the Invoke-ChocolateyFunction will give free bubble up throws in any function.  Basically using a splatting array we can use it to wrap any function and not worry about try/catching it.  I actually wrapped all the chocolatey.ps1 callouts, and then we can throw at will. \n. didn't realize i needed a rebase.  should be good to merge now.\n. wow this a royal pita to resolve conflicts!  Will retest tomorrow, and we gotta get this in.\n. the history line was fine.  it just gets confusing as to what to keep and what to shed, especially if you havent look at a branch in months, and the conflicts occur on the same lines or moved around.\n. what are you using?\n. alright - I believe this to be clean now - I based it off current HEAD, so you can plot it right on top :)\nI think @mwrock and I have to write a lot of pester coverage on this project.  we're taking in lots of changes, that are hard to validate through and through.\n. What happens if you just run source d:\\dev\\chocolateypackages\\vagrant\nFrom: Richard Turner [mailto:notifications@github.com]\nSent: Tuesday, December 18, 2012 2:32 PM\nTo: chocolatey/chocolatey\nSubject: Re: [chocolatey] [BUG?] Chocolatey install XXX -source YYY doesn't load package from YYY (#214)\nHey Rob. My Repo' is here if you want to take a look: https://github.com/bitcrazed/chocolateypackages/tree/master/vagrant\nI ran CPack which generated vagrant.1.0.5.nupkg\nWhen I re-ran cinst vagrant -source D:\\dev\\chocolateypackages\\vagrant\\vagrant.1.0.5.nupkg -debug, I see the following:\nDEBUG: Running 'Chocolatey-Install' for vagrant with source: 'D:\\dev\\chocolateypackages\\vagrant\\vagrant.1.0.5.nupkg', version: '', installerArguments:''\nDEBUG: Running 'Chocolatey-NuGet' for vagrant with source:'D:\\dev\\chocolateypackages\\vagrant\\vagrant.1.0.5.nupkg'. Force? False\nChocolatey (v0.9.8.20) is installing vagrant and dependencies. By installing you accept the license for vagrant and each dependency you are installing.\nDEBUG: Installing packages to \"C:\\Chocolatey\\lib\".\nDEBUG: Running 'Run-NuGet' for vagrant with source: 'D:\\dev\\chocolateypackages\\vagrant\\vagrant.1.0.5.nupkg', version:''\nDEBUG:  NuGet _\nDEBUG: Using '-Source \"D:\\dev\\chocolateypackages\\vagrant\\vagrant.1.0.5.nupkg\"' as the source arguments\nDEBUG: Calling 'C:\\Chocolatey\\chocolateyinstall\\nuget.exe' install vagrant -Outputdirectory \"C:\\Chocolatey\\lib\" -Source \"D:\\dev\\chocolateypackages\\vagrant\\vagrant.1.0.5.nupkg\"\n-NonInteractive\nDEBUG: Attempting to resolve dependency 'jruby (\u2265 1.6.4)'.\nAttempting to resolve dependency 'virtualbox (\u2265 4.1.4)'.\nAttempting to resolve dependency 'putty (\u2265 0.61)'.\nSuccessfully installed 'jruby 1.6.4'.\nSuccessfully installed 'vagrant 0.8.0'.\nDEBUG: Evaluating NuGet output for line: Attempting to resolve dependency 'jruby (\u2265 1.6.4)'.\nDEBUG: Evaluating NuGet output for line: Attempting to resolve dependency 'virtualbox (\u2265 4.1.4)'.\nDEBUG: Evaluating NuGet output for line: Attempting to resolve dependency 'putty (\u2265 0.61)'.\nDEBUG: Evaluating NuGet output for line: Successfully installed 'jruby 1.6.4'.\n__ jruby v1.6.4 ____\nDEBUG: Running 'Delete-ExistingErrorLog' for jruby\nDEBUG: Looking for failure log at 'C:\\Users\\Rich\\AppData\\Local\\Temp\\chocolatey\\jruby\\failure.log'\nDEBUG: Running 'Run-ChocolateyPS1' for jruby with packageFolder:'C:\\Chocolatey\\lib\\jruby.1.6.4', action: 'install'\nDEBUG:    PowerShell install (chocolateyinstall.ps1) \nDEBUG:   Looking for chocolateyinstall.ps1 in folder 'C:\\Chocolatey\\lib\\jruby.1.6.4'. If chocolateyinstall.ps1 is found, it will be run.\nDEBUG: Action file is 'chocolateyInstall.ps1'\nDEBUG: Running 'C:\\Chocolatey\\lib\\jruby.1.6.4\\tools\\chocolateyInstall.ps1'\nDEBUG: Running 'Install-ChocolateyPackage' for jruby with url:'http://jruby.org.s3.amazonaws.com/downloads/1.6.4/jruby_windowsjre_1_6_4.exe', args: '-q'\nDEBUG: Running 'Get-ChocolateyWebFile' for jruby with url:'http://jruby.org.s3.amazonaws.com/downloads/1.6.4/jruby_windowsjre_1_6_4.exe',\nfileFullPath:'C:\\Users\\Rich\\AppData\\Local\\Temp\\chocolatey\\jruby\\jrubyInstall.exe',and\nurl64bit:'http://jruby.org.s3.amazonaws.com/downloads/1.6.4/jruby_windows_x64_jre_1_6_4.exe'\nDEBUG: Processor width is 64.\nDownloading jruby 64 bit (http://jruby.org.s3.amazonaws.com/downloads/1.6.4/jruby_windows_x64_jre_1_6_4.exe) to C:\\Users\\Rich\\AppData\\Local\\Temp\\chocolatey\\jruby\\jrubyInstall.exe.\nDEBUG: Running 'Get-WebFile' for C:\\Users\\Rich\\AppData\\Local\\Temp\\chocolatey\\jruby\\jrubyInstall.exe with\nurl:'http://jruby.org.s3.amazonaws.com/downloads/1.6.4/jruby_windows_x64_jre_1_6_4.exe', userAgent: 'chocolatey command line'\nDEBUG: Setting the UserAgent to 'chocolatey command line'\nAlas, it still appears to be looking for dependencies which don't exist in the new package. I guess it's picking up the old cached package for some reason, right?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/214#issuecomment-11501339.\n. So sad\u2026 it\u2019s a blow to git on win for sure.\n. I am not understanding this at all.\nInstall-ChocolateyZipPackage can specify an unzip location of your choice.\nAlso it doesn't have to be all files. You can do partial unzips.\nI thought we had a helper for making links.\n. The complete parameters are listed in the files \nhttps://github.com/chocolatey/chocolatey/blob/master/src/helpers/functions/Install-ChocolateyZipPackage.ps1\nIn this case, the 3rd parameter allows you to specify unzip location and the 5th allows you to unzip a single folder within the zip.\nso \ninstall-chocolateyzippackage mypackage http://myurl32bit C:\\extractionpoint http://myurl64bit onlythisfolder\nThe params should probably be named, re-positioned and cleaned up, but it will work.\nAs far as the links, I think @mwrock added a bunch of functionality for links, shortcuts, etc but I haven't any experience with it.  Look in https://github.com/chocolatey/chocolatey/tree/master/src/helpers/functions\n. Should probably always be an array, even with single member.\nshould be able to do this with items.item($arraymembers)\nGet-ZipItems_recursive $file.getfolder.items() $specificfolder $target\nRedsandro - do you want to take a shot at fixing this? :)\nI need this fixed too, but I'm swamped.\n. actually its aleady done...\nhttp://gallery.technet.microsoft.com/scriptcenter/PowerShell-Get-Specific-9b35352f\nfunction getzipfileitems recursive has string matching...should be trivial.\n. Git rebase -i upstream/master\nChange the bottom 4 commits to fixup instead of pick\nThen git push -f origin\n. As long as he pushes to his origin its fine.  Its only a nono on chocolatey chocolatey master\n. Needs to make sure remotes are set right of course\n. I don't think we should take this in.   It needs to be reconciled with the existing one. \nIf there are specific use cases for one vs the other then conditional logic can apply the right call...\n. https://github.com/chocolatey/chocolatey/blob/master/src/helpers/functions/Get-WebFile.ps1#L46 is this not doing cookie handling? I am not all that familiar with cookie handling in general.\n. I do like the ignore cert switch in theory, but not in practice.  A package author should not be sending consumers of the package to https sites that don't have valid certificates.   I believe that is a call the end user should make, and question the authenticity of the underlying url.\n. > Interesting...we have made choco silent by default. This seems to go against that idea. Should this not be a pkg then?\nIts not against the idea.  Bypassing a tenet of an https request is the offense.\nI like ignore, but that is a user call, not a author call.  If I am going to a https site, and the name, CA or date is jacked up I am going to most certainly question if I want this on my system.  \nThis is a helper, and doesn't expose the ssl bypass capability to the cli/end user.\nIf we wanted silent then it would need to work akin to:\ncinst foo -ignore-ssl-errors\n. getbits?  lol - isn't get-processorAddressWidth or something more appropriate - though wordier for sure ;)\n. asserts changed in new pester, particularly around piping...\nI really like this PR.\nAnd I would rebase fixup your commits so its a clean bisectable history.  With all the outstanding PRs we need to make sure if we introduce a bug, we can use git bisect and git blame successfully going forward.\n. C:\\gitrepos\\chocolatey [branch]> git remote -v\norigin  git@github.com:rismoney/chocolatey.git (fetch)\norigin  git@github.com:rismoney/chocolatey.git (push)\nupstream        git@github.com:chocolatey/chocolatey.git (fetch)\nupstream        git@github.com:chocolatey/chocolatey.git (push)\ngit checkout master\ngit fetch upstream\ngit rebase upstream/master\nthen\ngit checkout yourbranch\ngit fetch upstream\ngit rebase upstream/master - this puts your changes on top of the current HEAD\nthen \ngit rebase -i upstream/master\neditor should be launched\nyou should see a list of all your commits, with the word pick in front.\nstarting with the second commit change the first word from pick to fixup\nrepeat for all subsequent comits\nclose editor with save\nthen\ngit commit --amend to fixup the single commit message \nthen\ngit push -f origin \nyou will then have a single commit that looks like you did it perfectly the 1st time.\n. It really is awesome.   I hope I can get a lot of posh people on it at the summit this week. I Cant stand codeplex.\n. wow even this needs to be rebased and reconciled... \n. I will have a look at this as I added this in PR 114.  The functionality here, creates a text file within the package lib folder that lists all the files that were extracted.  The goal of this was to use this text file generated during install to at some later point \"uninstall\" the zip, which essentially iterates through the file delete all entries listed. \nIt might be helpful for me to test this, by outputing the var's to see if something amiss in particular to this specific zip file.  I haven't run into this bug and we deploy our entire app w/ zips so its runtime .  I wonder if this particular zip file has deeply nested subfolders, and we're hitting a limitation I need to check for or take into account.\nThe impact here for this, is that chocolatey uninstall zip will not have a proper text file to use and clean up the extraction.\n. a lot of the commands need to be cleaned up... good suggestion though.\n. This is really novel.  I am a fan.   I bet we can use this beyond zip... like all the tools, gems, and non msi stuff.\n+1\n. You are not missing anything.  It feels somewhat of an antipattern, from knowing what was installed to knowing what was supposed to be installed...  in this case the actuals might be preferred...  the real issue is native zip capabilities suck.\nFor an zip exe though this might work really well as a helper\n. I am not really sure what a plug-in would look like.  Everything in powershell is sort of an add on.  What is the tie in point?  That chocolatey would auto-dot source anything in location, and \"learn\" it?   \nAre you thinking like chocolatey config network mynic.xml?\n. https://github.com/chocolatey/chocolatey/wiki/HelpersInstallChocolateyPackage\n. so what exactly are you doing... you must be missing some steps-  the commands work for me relative to notepad.exe\nare you creating nuspec ,packing it, putting the chocolatey.ps1 in tools, etc?\n. delete relevant files out of the C:\\Users\\%username\\AppData\\Local\\Temp\\chocolatey. there could be lock there.\n. @ferventcoder is this an admin thing? \ndid you start powershell by rightclicking 'run as administrator' ? never really looked at start-choc...\n. @kellyelton-\nto troubleshoot i might add make a copy of start-chocolateyprocessasadmin.ps1\nthen add\nL37 $s\nL38 $psi\nand see what values it is trying to use, and work back from there.\nalso are you sure cloversetup /silent is valid?  have you run it interactively with that switch and it works?\n. had you seen https://github.com/chocolatey/chocolatey/pull/210?  I tried to deal with process exits throughout all of chocolatey.\nbtw- linux-vm looks really really awesome. \n. I completely relate.  My main concern was to always exit 1 if there was a failure on any of the functions.  I recently delved into puppet/ruby so my main concern was to never return an exit 0 if something went wrong which is the current behavior.  It's funny, when I use chocolatey interactively i never use the batch files.  when i use it programmatically via puppet i used the bat files. its because i never use cmd, so its silly for me to call a batch to call powershell if i am already in it.\nunrelated, but calling posh from ruby strangely irks me with powershell.exe, maybe for the opposite reason.  If I can run an exec, and call the bat, then i avoid the powershell.exe\nI haven't found a great method to interact with powershell via ruby, particularly for multi-line code blocks.\n. the uninstall should be deleting the lib... assuming there is an uninstall\n. I guess I wasn't clear. I wasn't really directing comments :innocent: \nI think a fail install should call cuninst, and we should stop on the last successful dependency.  Don't leave the unwinding to the end user.  A cuninst will actually perform a delete of chocolatey.lib.  In this scenario I might silent all stdout/stderr unless debug, and report a failed install has been unwound on package foo.  Further investigation may be necessary.\nI am comparing it to an msi, that fails midway, and then the progress bar goes in reverse, and usually leaves :shit: in far worse places than my lib.  love the emoji's btw.\n. Hes not going to be able to install anything upstream unless he rolls his own pkgs.\n. iirc my PR will handle all the exit code failures - https://github.com/chocolatey/chocolatey/pull/210\nI know @ferventcoder has been very busy as the PRs have been building up, so I guess patience or perhaps he responds to :cookie:s  lol.. , or if you are so bold, try my branch out and see if it addresses your issue...  It is not guaranteed though to make it in choco so, you are on your own in that regard, but I will say that I run the changes in this branch in my production environment with 1000 servers w/o issue.\n. @abombss you mean like this? ;)\nI don't know what the full potential of scriptcs is... \nhttps://github.com/rismoney/puppet-baremetal-windows/blob/master/make_pe/runtime/get-DHCPHostname.ps1\n. I thought msft should have scrapped PowerShell in favor of ruby.net\nAnd ditch cmd and not have powershell.exe be so expensive to call out to.\n. Nuget is awesome, but it is constraining imho, like customizinf nuspec... Folks on the irc powershell channel don't have anything nice to say about chocolatey's wrapper approach.  But I have yet to see anyone else do better.\nRebuilding nuget in native powershell would be a lot of work...\n. I do like the cinst ruby -clean   - That makes sense to me.  The old versions can be determined using the -version all functionality I just wrote as a PR a few minutes ago against the current.\nNow enter cup notepadplusplus.  When you cinst it, you get the latest. perfect! \nIf a new version comes out, and you cup it, you get 2 folders in lib but only 1 version is installed.  A new version comes out again, and you cup it 3 folders.  In actually you only have 1 version of notepadplusplus.\nIn this use case- you want the cup process to automatically delete the lib folder for the version 1 rev behind. An upgrade is just that, a replacement of the version you specify (or replace latest if unspecified).  Its not a side by side install, and i think chocolatey doesn't do much different for a cup.\nI think in the case of ruby, most users are not going to cup ruby, and instead cinst the version they want.\n. Maybe cup should delete all versions. I think that's what yum update might do. \nOtherwise cinst...\n. i understand what you are saying about pinning, which I am down with.  Do you think this should be a 'feature' of the config file?  say a pinned packages element.   Do we leave this up to the user to populateor leave it to package authors to tamper with chocolatey.config? (ugh-security)...\nI have a production request to nail down the default behavior for cup.  Its getting to the point, where package authors are building crazy logic into chocolateyinstall.ps1...  chocolateylib is gettting messy.\nIf there are areas where we are giving the users a choice, like in your uninstall example, we also need command line switches to force behaviors for non-interaction. \n. any interest in a helper like this: (taken from one of our sysadmins who used it in a recent package) I horrendously adapted it for understandiing\n```\nFunction ChocoCleanUp {\n  #Clean up previous installs out of lib folder if they exist\n  $chocolateyLib = 'c:\\chocolately\\lib'\n  $packagever = \"1.2.3\"\nWrite-Host \" Cleaning up legacy lib folders in c:\\chocolatey\" -foreground green -background black\n  Remove-Item $chocolateyLib\\$packageName -Force -Recurse -Exclude $chocolateyLib\\$packageName.$packageVer -ErrorAction SilentlyContinue\n  Write-Host \"* Done\" -foreground green -background black\n}\n```\n. so are we needing a -pin switch, and what does it do?  Touch a pinned.txt 0 byte file in it's lib?\nand if it's not there, we do something like the helper I put above?\nTrying to understand how we should be creating future packages...\n. do you pin during install, or do you pin as a separate op, or both should be supported.\nie\nMethod 1.\nchoco install sysinternals -pin\nMethod2.\nchoco install sysinternals\nchoco pin sysinternals\n. > We do not remove the previous version at all when a new version comes in by design. You can install two versions of ruby\nthis whole topic confuses me, and a lot of ideas.\nQ:\n1. Should we have the install and uninstall call a function ChocoCleanUp if a pin is not set?\n2. Should we push this responsibility to the package author?  So a ruby package author wouldnt call chococleanup, but a notepadplusplus would?  I don't like this idea as it adds unnecessary clutter to authorship.  Right now this is what our sysdmins have to do, due to lack of options. Or should they have the ability as \"just another option\"\n3. we need a choco pin shim (lol, it just sounds funny) \n4. we need a choco pin param in config mgmt providers - (Kinda why I suggested Method 1 for ease)\n. overall we probably need a refactor of this function (probably a whole bunch of them) but anyway-\nthis adds the ability to get alist of all versions of a product installed. \ni welcome thoughts.  I based this off, the current master, as I have modded chocolatey.ps1 and version in another PR for error handling, so if those get merged first, I will rebase those mods back in.\n. Ok - so this is confusing...as clist and cver have been for quite some time. But I think we are missing the intent for this PR.\nI am running the current source version now... (btw - sysinternals is pkg version for demonstrative purposes)\nThe functionality I added gave this-\n``` powershell\nC:\\Chocolatey> chocolatey version sysinternals -version all -lo\nname                                                        found\n----                                                        -----\nsysinternals                                                1.2012.05.20130124\nsysinternals                                                2.0\n```\nThis is the list of packages installed locally on my system.\npowershell\nThe chocolatey list sysinternals -lo -all gives this (which looks like a \nsysinternals 1.2012.05.20130124\nsysinternals 1.2012.05.23\nThis is the list of packages on the feed. not sure what local only does in this use case, unless it is not developed yet...\n. Perhaps I was obtuse...My goal for this PR, was to be able to query locally installed packages and their respective versions (and not check feed) and return as an object.\n. I just built it from source 30 min ago...\n. gep13: hooky?  I don't always test my code, but when I do it's in prod!\n. all of my PRs are actually in production on 100s of systems.  I don't put usually do a PR until we roll out here. We may need to reconcile merge conflicts though, since I think a few PRs overlap the same sets of files. I also haven't been as diligent as @mwrock on the pester side.  But maybe he will teach me a few things next week!\n. actually ?  I will get on it asap!\n. I need to bump the module on the forge up to the latest rev...  wish the forge could just do the needful, ugh.\n. added to the TODO...\nme: Dr.  it hurts when I do foo\nDr: stop doing foo\n. http://vcsjones.com/2012/11/11/unzipping-files-with-powershell-in-server-core-the-new-way/\n?\n. I will see if I can make something work.  My users want core yesterday ironically.\nApproach?\nMay need conditional versioning logic (hate it but its better than outside dependencies)\nIf dotnet 4.5 is present we use it.\nIf not we try shell\nCatch core with no option? Tell user to add feature or prompt to add feature.   \nNeed to setup testing env...\n. https://github.com/chocolatey/chocolatey/pull/306 might be able to be -replace binroot with pkgsource tweak and call it a day. .\n. i'd love that.   I think it was part of this issue\nhttps://github.com/chocolatey/chocolatey/issues/172\n. It should also take arguments like output directory....\n-------- Original message --------\nFrom: Rob Reynolds notifications@github.com\nDate:\nTo: chocolatey/chocolatey chocolatey@noreply.github.com\nSubject: Re: [chocolatey] cpack silently fails when dependency .NET 4.0+ is not met (#270)\nAgreed\nOn Tuesday, April 16, 2013, Redsandro wrote:\n\nI think it should warn though, if something like that is possible.\nCould not package your package because .NET is not installed.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/270#issuecomment-16440795\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/270#issuecomment-16441678.\n. Are you just talking about on chocolatey.org? or via chocolatey itself?\nthe nuspec file defines the dependencies.  The issue right now in how chocolatey works for the latter is that we are grabbing the nupkg file and popping it into \\lib.  If we handled this in temp (for example) or another means, it would allow us to inspect the nuspec for dependencies, and report back to the user.  \nRight now the reliance on nuget.ee is both really helpful to making something work, and a hindrance to innovating.  I am wondering if we need more than a wrapper for it to really move choco forward.   I really like that its powershell though.\n. I think nuget.extensions has a graphing capability against a whole feed.\nhttp://ben.phegan.name/index.php/2012/07/02/nuget-graph/\n. also I would do a git rebase -i and fixup the second commit to make it look like one.\n. yes.  we should strive to keep a clean timeline moving forward.  a couple of things here:\n1.  create new branch\n2.  cherry pick changes into new branch or checkout -b newbranch, and then git reset --hard his master.\n3.  rebase. \n4.  then the maintainers should not do a gui based merged.  these are --no-ff and create a merge commit on top.  This makes the graph bumpy.  If we want a timeline that is easily bisectable we should try to get merges that are --ff and encourage small single commit continuous changes.  also when we leverage the testing frameworks this will help us immensely.\n. can you fixup your commit 2,3 into the 1st one?\nassuming upstream is the (chocolatey/chocolatey)\ngit rebase -i upstream/master\nswitch commit 2 and 3 from pick to fixup\nthen git push -f origin (zipp1981/chocolatey)\n. yes. a single commit:\nHere are my remotes:\nC:\\gitrepos\\chocolatey [patch-1]> git remote -v\norigin  git@github.com:rismoney/chocolatey.git (fetch)\norigin  git@github.com:rismoney/chocolatey.git (push)\nupstream        git@github.com:chocolatey/chocolatey.git (fetch)\nupstream        git@github.com:chocolatey/chocolatey.git (push)\nso if I first do a:\ngit fetch upstream\ngit rebase upstream/master  \nIt will put your 3 commits at the end of the current timeline.\nThen you can do an interactive rebase:\ngit rebase -i upstream/master\nThis will open a text editor where you can manipulate your commits interactively.\nYou can meld the commits together into the first commit, by switching the first word from pick to fixup inside the editor and save/close.  This will make it a single commit.\nThen you can git commit --amend can allow you to put the appropriate verbiage reflecting your change.\nYou will need to git push -f origin for it to go back into your origin, because you changed history through amending or interactively rebasing.\nHTH,\nRich\nIf you are not sure, just make a copy of the file first into a different dir just to test it out.\n. just to clarify- \nthe first commit is pick\nthe 2nd and 3rd should be fixup\n. yea (especially since I never use any font except notepad++ and powershell prompt) :smile:\n. its called cver.  We had talked about consolidating cver and clist.\nusage cver all -lo will show all local installed packages.  \nthe exit codes are in a pending PR.\nexamples:\nC:\\Users> cver 7zip\nname          : 7zip\nfound         : 9.22.0\nlatestCompare : 000000000009.000000000022.000000000000\nverMessage    : Latest version installed\nlatest        : 9.22.0\nfoundCompare  : 000000000009.000000000022.000000000000\nC:\\Users> cver 7zip -lo\nname                                                        found\n\n7zip                                                        9.22.0\n. there is a chocolatey module https://github.com/chocolatey/puppet-chocolatey\nbut to get full exit codes natively we need the PR to be accepted, or you can build from my source.\n. The current release of chocolatey isn't complete for puppet as it requires the mods in my outstanding PRs...  \nwhen you say does not work properly, what are you experiencing?  I just want to confirm you aren't experiencing a different issue.\n. that does sound like the exit code issue on the cver query.  \ntechnically, what I think is happening in this case- it is not doing a ensure latest.  The cver query is failing to determine a package is installed, so it is atempting to cinst package. \nI think that is why I wrote this -\nhttps://github.com/rismoney/chocolatey/commit/f8ec947be96a90f8934989188da58d1e241a241e\nIts part of the https://github.com/chocolatey/chocolatey/pull/210 \n. First I appreciate your response.  \n\nTalking specifically about the .install/.app package suffix - those are for the packages that have a native installer that they have bundled or they download and run.\n\nhttps://github.com/chocolatey/chocolatey/wiki/ChocolateyFAQs\nAs far as a compelling reason, that is always going to be a curater vs author subject of contention.  I think even with a fair amount of rules, inevitably it can down to a per package decision.  When I look at other package/library solutions, like yum, gems, those decisions will appeal to some people and others will criticize.\nAs far as package research - I disagree wholeheartedly.   I manage 1000s of systems with chocolatey, and when you talk about scalability, if you manage 2 or more systems, the payoff is huge.  You should always research your packages.  For instance-\n.\\NuGet.exe install  -source http://chocolatey.org/api/v2/ beyondcompare\nand then look in the tools folder to see what it is actually doing.\nI have been thinking about what a chocolatey -whatif would look like, and perhaps this is a starting point.\n. @ferventcoder - i left that out intentionally, because I left it to the package author.\nNot every package uninstalls via filename.\nUninstall-ChocolateyPackage '7zip' 'msi' '{23170F69-40C1-2702-0920-000001000000} /norestart /qn'\nOur oldest PR, actually can use the learned guid, so the author doesn't need to specify it... :)\n. @ferventcoder are you referring to HKLM\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall \n. gep13 I like that idea A LOT \nhttps://github.com/blog/699-making-github-more-open-git-backed-wikis\nAs an alternate idea-\nI like the way the cli for git itself works. A really lean version of help is available locally.  For the verbose help it sends you to the wiki.  The only time I don't have internet access is in production, where I shouldn't be needing extended help or else boo to me.\n. Have you thought about - https://github.com/chocolatey/chocolatey/issues/160#issuecomment-8631260\nand using Update {}\nThen just call that file chocolateyPackage.ps1\n. > Why not automate a character encoding conversion to the correct encodings before a package gets built? \nI like it.\n-Rich :)\n. interesting thread-\nyou are bootstrapping chocolatey with puppet.  how do you install puppet?\nI have always installed chocolatey, and cinst puppet in unattend.xml\nThen I have a chocolatey module in puppet, that manages it going forward.\nI then put chocolatey into chocolatey repo, and keep it set on latest...\n. ummm...I kindly disagree... - \"but it should not be in there like today\".  \ncinst putty -Version 0.62.0.1 works before this change but not after.  Relying on the count of params is not a satisfactory test for batch mode.\nplus I agree with @ferventcoder that if you're changing one ingress into calling chocolatey we should make it consistent. Forking the functionality between cmd and powershell functionality is not ideal since the cmd is really a convenience factor for non-posh access\n. one last thing I might opt for array splat handling in posh or take the packages in via a pipeline, which means the source could be handled any way the user wants (objects)\nmaybe like 7zip vlc putty | chocolatey install\n. let me retest.  I will use current choco version and report results...  I do like the concept btw - i wasn't trying to be a pita.\n. I removed my custom version an ran this-\non a fresh Win7 Enterprise, I bootstrapped with the install method on http://chocolatey.org/ \nwithin cmd.exe:\n```\nC:\\Users\\admin>cinst putty -Version 0.62.0.1\nInstalling packages in batch mode.\nInstalling putty ...\nChocolatey (v0.9.8.20) is installing putty and dependencies. By installing you a\nccept the license for putty and each dependency you are installing.\n__ putty v0.62.0.2 ____\nDownloading putty (http://the.earth.li/~sgtatham/putty/latest/x86/putty.zip) to\nC:\\Users\\admin\\AppData\\Local\\Temp\\chocolatey\\putty\\puttyInstall.zip\nExtracting C:\\Users\\admin\\AppData\\Local\\Temp\\chocolatey\\putty\\puttyInstall.zip t\no C:\\Chocolatey\\lib\\putty.0.62.0.2\\tools...\nC:\\Chocolatey\\lib\\putty.0.62.0.2\\tools\nputty has finished succesfully! The chocolatey gods have answered your request!\nAdding C:\\Chocolatey\\bin\\PAGEANT.bat and pointing to '%DIR%..\\lib\\putty.0.62.0.2\n\\tools\\pageant.exe'.\nAdding C:\\Chocolatey\\bin\\PLINK.bat and pointing to '%DIR%..\\lib\\putty.0.62.0.2\\t\nools\\plink.exe'.\nAdding C:\\Chocolatey\\bin\\PSCP.bat and pointing to '%DIR%..\\lib\\putty.0.62.0.2\\to\nols\\pscp.exe'.\nAdding C:\\Chocolatey\\bin\\PSFTP.bat and pointing to '%DIR%..\\lib\\putty.0.62.0.2\\t\nools\\psftp.exe'.\nAdding C:\\Chocolatey\\bin\\PUTTY.bat and pointing to '%DIR%..\\lib\\putty.0.62.0.2\\t\nools\\putty.exe'.\nSetting up PUTTY as a non-command line application.\nAdding C:\\Chocolatey\\bin\\PUTTYGEN.bat and pointing to '%DIR%..\\lib\\putty.0.62.0.\n2\\tools\\puttygen.exe'.\nSetting up PUTTYGEN as a non-command line application.\nFinished installing 'putty' and dependencies - if errors not shown in console, n\none detected. Check log for errors if unsure.\nInstalling -Version ...\nC:\\Chocolatey\\chocolateyinstall\\chocolatey.ps1 : Missing an argument for parame\nter 'version'. Specify a parameter of type 'System.String' and try again.\nAt line:1 char:193\n+ [System.Threading.Thread]::CurrentThread.CurrentCulture = ''; [System.Threadi\nng.Thread]::CurrentThread.CurrentUICulture = '';& 'C:\\Chocolatey\\chocolateyinst\nall\\chocolatey.ps1' install -Version <<<<\n    + CategoryInfo          : InvalidArgument: (:) [chocolatey.ps1], Parameter\n   BindingException\n    + FullyQualifiedErrorId : MissingArgument,chocolatey.ps1\nInstalling 0.62.0.1 ...\nChocolatey (v0.9.8.20) is installing 0.62.0.1 and dependencies. By installing yo\nu accept the license for 0.62.0.1 and each dependency you are installing.\nUnable to find package '0.62.0.1'.\nFinished installing '0.62.0.1' and dependencies - if errors not shown in console\n, none detected. Check log for errors if unsure.\nC:\\Users\\admin>\n```\n. i am not using alpha version (which is the one on github iirc)\n. Iirc the chocolatey.ps1 isnt using positional parameters... so shouldnt\nCinst -version 1.0 pkgnane work?\nI appreciate your efforts but I think trying to solve this via cmd will only make fixing it via ps1 needing to unwind this.\nMaybe others have an opinion on this... I love the idea btw.\n-------- Original message --------\nFrom: Redsandro notifications@github.com\nDate:\nTo: chocolatey/chocolatey chocolatey@noreply.github.com\nCc: \"Siegel, Richard\" RSiegel@ise.com\nSubject: Re: [chocolatey] Added batch mode to chocolatey.cmd - cinst multiple packages (#304)\nSingle:\nC:\\Users\\Redsandro>cinst notepadplusplus\nChocolatey (v0.9.8.20) is installing notepadplusplus and dependencies. By installing you accept the license for notepadplusplus and each dependency you are installing.\n__ notepadplusplus.install v6.3.3 ____\nblah blah\nAdded commands (works with all commands):\nC:\\Users\\Redsandro>cinst notepadplusplus -version 2.24.1\nChocolatey (v0.9.8.20) is installing notepadplusplus and dependencies. By installing you accept the license for notepadplusplus and each dependency you are installing.\nUnable to find version '2.24.1' of package 'notepadplusplus'.\netc etc\nBatch mode:\nC:\\Users\\Redsandro>cinst notepadplusplus treesize\nInstalling packages in batch mode.\nInstalling notepadplusplus ...\nChocolatey (v0.9.8.20) is installing notepadplusplus and dependencies. By installing you accept the license for notepadplusplus and each dependency you are installing.\n'notepadplusplus 6.3.3' already installed.\nIf you want to reinstall the current version of an existing package, please use the -force command.\nFinished installing 'notepadplusplus' and dependencies - if errors not shown in console, none detected. Check log for errors if unsure.\nInstalling treesize ...\nChocolatey (v0.9.8.20) is installing treesize and dependencies. By installing you accept the license for treesize and each dependency you are installing.\nUnable to find package 'treesize'.\nFinished installing 'treesize' and dependencies - if errors not shown in console, none detected. Check log for errors if unsure.\nInstalled all packages. :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/304#issuecomment-20112828.\n. I googled this thrift shop and watched http://vimeo.com/m/57418480 ... no words.  Made my day\n. @redsandro I don't have to approve.  I am only here to critique, debase, and hassle people :) \nSeriously though - the best thing about open source projects, which this \"issue\" illustrates so well,  is that you had an idea, submitted a PR demonstrating a prototype on how you thought it should work, it was reviewed by people who care about the project, and someone else rose up to implement in a way that fits within the bigger picture.  Awesome work for an awesome feature.\n. hmm, if sarcasm works....\nI am not going to thread :shit: or anything.\nthe feature I could really use to help get my internal packages opensourced is-\na pkgsource id in chocolatey.config file or an environment variable that could then be used within chocolateyinstall.ps1 to replace a hardcoded url.\nRight now all my packages are hardcoded to an internal url, and ideally there would be a way to \nif pkgsourceid exists or env:$pkgsourceid exists then use that, otherwise fall back to url like Mozilla.org for firefox or whatever. \nSummary I want to be able to create packages that can be used universally, on the public - via mirrors or private feed. Embedding a url becomes problematic to maintain.  \nThen a param called pkgsource could be also used to override the default url.\nThis has nothing to do with the -source, source (but you know that already)\n. link?\n. example-\nInstall-ChocolateyPackage -packageName \"$packageName\" `\n            -fileType 'msi' `\n            -url 'http://chocopackages.myorg.com/PuppetEnterprise/puppet-enterprise-2.6.1.msi' `\n            -silentArgs '/quiet'\n            #-url64bit '' `\n            #-validExitCodes\nmyorg.com doesn't help you at all, and I don't want to put myorg url on the interwebs.\n. but I want to publish 100s of packages, for the world to consume, because chocolatey adoption would skyrocket, if people knew how to install/uninstall everything from Office to Exchange Server using just cinst. I just want to sanitize them.\n. we can certainly take this elsewhere.  there might even be an issue on this.\n. https://github.com/chocolatey/chocolatey/issues/269\n. The source code is always available.  Just rename nupkg to zip and extract the spec and ps1 files.\n. https://github.com/chocolatey/chocolatey/pull/210\n. what about write-output ? write-host = bad\n. we would still want customized parameters that can be created by the package owner, than could then be queried through a common syntax. perhaps listed through an xml tag in nuspec\n. Personally I use camelcase for id.  I like it to be poshy vs nixy. But I am ambivalant on setting a standard on that.\n. i think it should suggest a get-help or --help or some other usage information.  All the usage responses need obvious work.\n. I am a big fan of http://semver.org/\n. Passing it to the chocolatey gods for sacrifice... love it\n. not really relevant to .org but for my internal repo I git back all my packages and use https://github.com/rismoney/chocolatey-git\nI started making trivial tests for recognizing busted pkgs.\n. thanks... So here is how we manage the package repo internally.\nso we start with our git repo, setup very much like https://github.com/ferventcoder/chocolateyautomaticpackages\nthe difference being that each time we create or bump a version of the package we git tag it, and push to our internal gitrepo.  This allows for peer review.    The build.ps1 script is then able to iterate through every tag in the repo, and spit out the nupkg file into a dir.  We also run a bunch of validation scripts on the package as a form of package unit testing using pester.  We are getting to a point where the cpush can only be done by the bot running all this.  We don't want to let users upload to the repo anymore, and feel the git review process is ideal for vetting the package before upload.  \nNow the chocolatey.org site has different intentions, but perhaps a CI validation process can be instituted.  After all I don't think its practical to host every package in a single gitrepo, and gitsubmodules are nontrivial for the layman.\n. imho, its overreaching for cpack.  the receiver should have a triager (along the lines of a CI model)\n. funny you should say that.  i hacked something pretty crude through appveyor that runs the test suite i have.   it doesn't have the ability to spin up vms... :( and they don't have PR hooks, only single branch hooks).  I ended up ditching it.\nbut last I heard travis is getting windows support, so when that drops, we might have something pretty awesome.\nbtw-travis is awesome.\n. Thats so awesome @mwrock !! can i make a suggestion?  if you are going to provide other hypervisor/cloud functions, you might have the start of something like a powershell fog (see fog.io)\nyou might have, and I haven't looked at the source yet, but I envision these as external componentry you can just bolt on and re-use outside of box-starter.\n. Can you elaborate more on this @Redsandro -https://github.com/chocolatey/chocolatey/issues/342#issuecomment-31094523\nI don't understand not running windows, virtual Choco users, where boxstarter fits...\n. I thought chocolatey goodness was as good as it gets.\n. agree with you ferventcoder- that was my understanding.  \ni think its a metric s-ton of a parsing exercise that probably needs to start with TDD via pester, and make each use case pass... just looking at this readme https://github.com/isaacs/node-semver made my head hurt.\n. @ferventcoder - is this alright for me to do?  I rebased and branched https://github.com/chocolatey/chocolatey/pull/273 but preserved the authorship...\n. have you tried the carat ^ escape?\nthats a cmd escape char which might work.   havent tried yiur specific example though.\n. Interestingly - I was asked this question a few days ago.   The long/short of it is that the chocolatey project doesn't directly manage the nuget and/or it's spec.  What you are suggesting here, is a change in nuspec functionality not chocolatey.  \nRight now, you can build this logic in via powershell with wmi, but it has its own set of downsides starting with ambiguous connections of packages.\n. > Why is this a change to the nuspec functionality? \ndependencies are defined in nuspec.   however there is no conditional logic around it.  It is only package to package dependencies.   foo.1.0 requires bar.2.0 or greater type stuff.\n\nI would envision Chocolatey installing two empty packages when you install it. \n\nthis seems very hackish, to get at OS versions.  This overcomes package to package dependencies with a fake OS package.  But it only addresses OS dependency.  What about other logical dependencies?  For those am I just left with powershell?\nIdeally, I would want some dependency capability to do stuff like:\nxml\n<chooser>\n  <when $os=6.1>\n    <dependency 1/>\n  </when>\n  <when $os=6.2>\n    <dependency 2/>\n  </when>\n <else>\n    <dependency 3/>\n  </else>\n</chooser>\nright now this all needs to happen in chocolateyinstall via just another cinst within a conditonal\n. i think so. ;)\n. I thought I wrote another reply to this- but I guess I didn't click comment...\nAn idea on this topic is to make the nuspec dependency element a parseable item around things like os, features, architecture and then have run-nuget or it's caller like install-chocolateypackage use a set of dependency helpers to do the needful...\nxml\n<dependency id=\"|os|\" version=\"6.2\" />\nand we use dependency helpers based on the between the pipes or other delimiter.\n. I was under the impression this functionality was being abandoned.  For ex:  http://support.microsoft.com/kb/834489\n. You suspect L11 in chocolatey cmd as its missing /b?\nExit /b if run inside script shouldn't Close windows...only exit script.  Not near a pc but I will check out asap\n. Ok I get it.   Had you tried cmd /c successfully or do we need something clever.   - i have a few ideas on messing with the call parameters to be passed properly but got to work through edge cases. /? Is being treated as a separate param to call...\n. Ok.  That's fair.  Put that in.  I will later refactor to avoid expensive cmd sub calls\nI saw a post on stackoverflow re call issue and ways to deal with params being treated as a single one.  The quotes may be forcing delimiting %* as a call param rather than a choco param.   There is no %~* so I think the more elegant (read yucky dos quirky crap) solution involves forcing the entire param string into the a single first call argument.\nIe\nChocolatey /? needs to be treated as 1 arg instead of 2 from a call perspective.\n. i think this is the link i found yesterday. (BryceatNetwork) response...\nhttp://stackoverflow.com/questions/9396311/run-a-input-parameter-as-command-in-dos-batch-script\n. Agree with @mwrock wholeheartedly.\n. Choco version is deprecated...use list or search.\n-------- Original message --------\nFrom: codearoo notifications@github.com\nDate: 11/26/2013 6:25 PM (GMT-05:00)\nTo: chocolatey/chocolatey chocolatey@noreply.github.com\nSubject: [chocolatey] choco version command should not do anything other than report its current version. (#382)\nRunning 'choco version' or 'chocolatey version' should be quick to just output the version number. But instead it's checking online to see if it's the latest.\nI believe that instead of doing that, it can output something like:\nname : chocolatey\nfound : 0.9.8.23\nPlease run 'choco version-check' to check if an update is available.\nor something to that nature.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/382.\n. not sure if it helps you guys, but to get an effective && if powershell you would need\nwhoami ; if($?) {whoami}\n. i added the original uninstall capability as a naive implementation that requires chocolateyuninstall.ps1.  many pkgs dont have that capability.  its very ymmv at this point but its going to get a lot better as indicated above so stay tuned\n. I say go ahead!  I added the -specificfolder switch before we went 7za so imho it's a regression.\n. iirc this is an intentional omission. the msi guid is typically needed for uninstall.  i have a way of automating that but have not looked at it in a bit.  last i heard was we were looking at choco msi tighter integration overall with windows installer\n. usage:\n$packageName = 'PuppetEnterprise'\n  $fileType = 'MSI'\n  $uninstallGuid = '{89BA3D80-5EEF-40BC-A7F9-9E234BEB0D46}'\nUninstall-ChocolateyPackage \"$packageName\" \"$fileType\" \"$uninstallGuid /norestart /qn\"\n. see\nhttps://github.com/chocolatey/chocolatey/pull/99/files\n. the purpose of that commit functionality comes from a requirement to be integrated in a non interactive environment.  if the functions blindly exit state 0s without exception raising then any automation around chocolatey where failures occur, the errors will be swallowed.  the outer lying tool will think everything was honky dory, when in reality failures occured.\nits not thrilling to me, but i was seeing exit success when failures occured.  I am using puppet with chocolatey.\n. all for the hashtables btw :)\n. > disabled the mandatory exit because it interfered with the ability to continue installing subsequent packages if one package failed \nimho the mandatory exit is the right and default behavior.  i agree a switch show control -ignorefailures...  i am a big proponent of fail early and stop all things.\nright now for better or worse its being called from puppet via chocolatey.cmd.  that uses -command\n. agree with you 100%.  Inserting proper exception management is needed.   My short term goal was selfish, get the error out.  Improvement is def needed and i think choco has longer term plans to go c# which will probably help resiliency overall.\n. ok someone submit pr and make sure non exit 0 is bubbled all the way back out to cmd/posh on any failure.\n. so if there is a separate md5 file, do you grab that file, get content it into a var and append it like in your link?\n. This url switching is thus driven by a csv file I need to manually build after inspecting each package's chocolateyinstall.ps1 finding the url and mapping it to an alternate url?\nI suppose this is scriptable to generate a csv, but does this highlight a bigger issue with urls within packages?  It kills package portability.  Why wouldnt upstream adhere to using a url mapper too... packageid, url. \nBtw neat take on the approach!!\nI want to opensource my choco repo but do it in a way the pkgs could be used by someone w/o mods.\nThis is 1 approach.\nI was originally planning to make the hostname just an env var... but this wont help upstream internet based urls plus you could have foo.com/setup.exe and bar.com/setup.exe\nI am interested in ppls thoughts...\n. rebase on top of upstream/master?\n. succinctly, src/functions essentially should not be relied upon. whereas src/helpers/functions should be.\n. who pays the processing fee?\n. got it!\n. interesting, so if i can earn 5% rewards, and spend 2.9% to send a payment, plus 1% in fees, I can earn 1.1% profit, for every $500 I send to my own org ;)\n. Can you describe some of the design choices?  I would like to understand the intent. Any hidden aspects like http://lov5-77.diply.com/love-eat/30-famous-logos-that-have-a-hidden-message/51404\n. Ahh that's really interesting.  My thought was that it was a play on packaging.  I didn't realize it was chocolate :). I thought it was a box.  I really like it.  But would a transparent (no background) be the usage or would everything go yellowy?\n. I couldn't agree more with @ferventcoder comments.\nQ: Is the chocolate candy wrapper  too much.  In other words does it not go too faraway from a computer thing to a candy bar, leaving nothing behind?  I see why you showed us the squared off 1 first as I think I am warming up to the 1st one, but I think the \":\" colon is not needed.  choco will go well beyond windows\n. I was not against it.  I was inquiring.  I actually really like all the work you have done and have to express sincere kudos for your hard work and volunteering.  My hope for whatever logo that is chosen is that it represents choco to where its goodness becomes synomous with all the good people involved including you @juliankrispel.\n. Agree.\nc:\\>ocalatey ftw! :)\n. going to agree with @gep13  6 pops against the black background and the letters have a transparent magic quality.  I didn't notice this before, but I also love the near symmetry afforded by the C and the Y.\nIt certainly has a richness!\n. I would love to see one of these 2 go in as it has required me to fork for internal use.  I put the changes in that @ferventcoder unwound :) despite them being an ugly fix.\n. > Would love to see a new 0.9.8.x version.\n:+1: \n. ",
    "codearoo": "Was going to create new issue, but maybe this is related.\nWas going to suggest that the 'cup all' command had an option to EXCLUDE packages.\ncup all -exclude \"7-zip,notepad,etc\"\noops.. OF COURSE I MEANT THIS COMMAND INSTEAD :)\nchoco update all -exclude \"7-zip,notepad,etc\"\nto avoid using the alias. \n. ok.. BTW, alternative to the -exclude ... I still don't know how to list INSTALLED packages.\n. ...  and also use the   -source option.\nFor example...  list all apps installed that have source \"xyz\"\n. oh yeah right.. thanks.   just missing the   -source option..  it ignores it.\nI'll create another ticket though.\n. Alternatively it could work like the \"update\" or \"install\" feature does, by\ncomparing the local list to the list of apps located at the source and only\nshow the intersection of the list.\nOn Tue, Dec 17, 2013 at 11:55 AM, Rob Reynolds notifications@github.comwrote:\n\nThere is no tracking at the current time of what source a package came\nfrom.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/5#issuecomment-30768436\n.\n. Hi...  also bumping into this.. but I wanted to clarify something...  Are you suggesting that Chocolatey in the future will not use NuGet? Meaning that all the NuGet packages created will no longer work?\n. I was just making sure I had the same understanding just in case. I've seen stranger things. :)\n. I have my own script to make the setting in the System env.\n\nHowever I also use  'choco /?'  to determine if it's installed. (preferred to use something like   'choco -version' but that does not quite do same thing)\nchoco /?  will return %errorlevel% of 0 if it found the command, and 9009 otherwise but you can just check for the success/fail like this:\nchoco /? || install-choco\nwhere \"install-choco\" is the big powershell string you can paste in to install or maybe some other way you want to install.\n. YES!! and I just found it by searching for \"Windows version of which\"\nC:\\software>where choco\nc:\\chocolatey\\bin\\choco\nc:\\chocolatey\\bin\\choco.bat\nwhere /?   for more help.\n. oh yeah.  So as mentioned, when I install it, I wrapped it in a script that calls a .VBS script to put the path in the System env:\nENV_VARIABLE = WScript.Arguments.Item(0)\nENV_VALUE = WScript.Arguments.Item(1)\nSet WSHShell = WScript.CreateObject(\"WScript.Shell\")\nSet WshEnv = WshShell.Environment(\"SYSTEM\")\nWshEnv(ENV_VARIABLE) = ENV_VALUE\nUse it like this:\ncscript set-system-env.vbs ENVVARNAME ANDTHEVALUE\nwhich would set whatever env var to the value you specify in the System section.\nAnd then can use this .BAT logic to only do that if it's not already there in the current session:\n:append-system-path-if-needed\nsetlocal ENABLEDELAYEDEXPANSION\nset NEWVALUE=%*\n:: start with value and remove all quotes\nset x=%PATH:\"=%\n:: now remove all spaces\nset x=%x: =%\nset y=%x:!NEWVALUE!=%\nif \"%x%\" == \"%y%\" echo adding &&  cscript set-system-env.vbs PATH \"%PATH%;%NEWVALUE%\" || exit /b\nendlocal\nexit /b\nTo use that \"function\" it would look like this:\ncall :append-system-path-if-needed C:\\Chocolatey\n. And regarding testing if it's installed...  forgot that you don't need the  /?   this works just as well:\nchoco || install-choco\n. And finally... :)  You can use this to actually FIND it installed and in what dir:\nC:>dir /s/b choco.bat\nC:\\Chocolatey\\bin\\choco.bat\nunless you also need to search other drive letters.\n. ya this is it..  been so long ago not sure how good it is.. and it was my\nfirst one.... but the change itself is easy and I do BAT scripts all the\ntime.\nThe idea is just to replace any  ECHO ON  with   @ at the beginning of any\nline and never use ECHO ON or ECHO OFF in your scripts since your scripts\nare so \"low-level\" and would be commonly wrapped up in other user scripts.\nSo it's better to always allow the user code to control things and make\ndecisions like to have ECHO ON or OFF.\n. I meant the reverse, BTW... replace any ECHO OFF with a @ at the beginning\nof a line.\n. Not being familiar with how Chocolatey works under the hood...  my hope is\nthat the change will prevent installs from creating BAT files in\nChocolatey\\bin folder like PSCP.bat that ends up like this:\n@echo off\nSET DIR=%~dp0%\n\"%DIR%..\\lib\\putty.portable.0.63\\tools\\pscp.exe\" %*\nto instead be created like this:\n@SET DIR=%~dp0%\n@\"%DIR%..\\lib\\putty.portable.0.63\\tools\\pscp.exe\" %*\n. or.. why bother setting this DIR?\nCould just be:\n@\"%~dp0%..\\lib\\putty.portable.0.63\\tools\\pscp.exe\" %*\n. Does Choco really need to use DISM to get elevated permissions? It so happens we always turn off UAC on our servers.. but either way...  for listing and installing windowsfeatures, one would imply that the requirement is to be running Command Window as Admin.\nPerhaps that is a way to fix?\n. Not working on Win2008 SP2 would be quite a miss. :)\nWe have to use it for now because we need to use 32bit and R2 is not available in 32bit on Amazon.\n. DEAR CHOCO DEVELOPERS!!!\nI stumbled on to this:  ServerManagerCmd.exe\nIt works for Win2008 and R2. It does happen to be deprecated on the later..  but it might offer a simple solution to make this automatically work on 2008R1. And it might be there in ver 2012..  of course..  WTF deprecate it? There is nothing wrong with this thing.. they could have just tied it into their new PowerShell method.\nServerManagerCmd.exe -query  shows what's installed (of course in freakish Microsoft way it shows it tabbed indicating its structure).\nYou can use it like this:\nServerManagerCmd.exe -install Telnet-client\nServerManagerCmd.exe -remove Telnet-client\nOf course however you do it, in typical Microsoft fashion, it takes like 20 minutes to install or remove TELNET CLIENT!! :)\nhas options like -whatIf   -reboot\nBut anyway, I can just use this command and skip the whole  cinst -source windowsfeatures.\n. hey guys.. I posted bunch more info on this topic in the forum:\nhttps://groups.google.com/forum/#!topic/chocolatey/ZfbzF_m2fpE\n. You should check out the forum link I put in above.\nI basically outlined the discovery of what you wrote in your comment. Such a pain in the ass!\n. I'm not seeing how your change affects this ticket.. as Win2008 R1 does not have 'dism.exe' anywhere in any directory at all. And I'm testing on 32bit.\n. Just for sake of putting in this ticket, I have replaced hopes of using\nchoco -source windowsfeatures   with the use of ServerManagerCommand.exe\n and also the PowerShell commands which have same syntax.\n. Oh.. well then please add a \"--version\" option or something? It is useful.\nI happen to want to use it to even know if it's installed.. like I do for\n7zip.. in this fashion:\ncall 7za -? > nul || call cinst 7zip.commandline && echo on || goto error\nThat line will run \"call cinst 7zip.commandline && echo on\" if the 7za\n-? command fails which likely would be because it can't be found.\n. OK.. thanks.. that will work.\nIt's still slow, not sure what it's doing..\nC:\\software>choco -debug\nDEBUG: Running 'Append-InstallLog' with chocoInstallLog:''\nDEBUG: Arguments: $command =\n''|$packageNames=''|$source=''|$version=''|$allVersions=False|$InstallArguments\n=''|$overrideArguments=False|$force=False|$prerelease=False|$localonly=False|$v\nerbosity=False|$debug=True|$name=''|$ignoreDependencies=False|$forceX86=False|$\npackageParameters=''|PowerShellVersion=3.0\nPlease run chocolatey /? or chocolatey help - chocolatey v0.9.8.23\nReading environment variables from registry. Please wait... Done.\nBut if you will add a \"-version\" option that just quickly outputs the\nversion, then leave this ticket otherwise if you don't think it's worth it,\nclose it.\n. Is this still related to the error not getting returned when install\npackages fail? That continues to happen in .23 of course.\nOn Jan 19, 2014 1:00 PM, \"Rob Reynolds\" notifications@github.com wrote:\n\nI would also need to look into why we commented that out.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/384#issuecomment-32714705\n.\n. AMEN! no shortcuts! :)\n\n\"chocolatey\" might have been a pain to type (and spell) but:\n\"choco\"  is very nice!\nchoco install\nchoco update\nchoco update all\nchoco uninstall\netc.\nThen it's actually much more like   'apt-get'\n. As a transition phase... the    'cinst'  and other aliases could just\noutput to the screen instead:\n\"Please run   choco install   instead\"\n. To speed up this process, you may want to do a \"replace all\" on your website.. where each package that displays the big:\nc:> cinst chocolatey\nto now be:\nc:> choco install chocolatey\nYou even have images on the home page using 'cinst'\n. sweet. what are you waiting for? :)  (the 1 liner anyway)\nhaha\nRemembering that SOFTware should not be HARD.. it is SOFT so be bold. :)\n. I'm already updating my scripts to use 'choco install'\n. Maybe to avoid confusion with the \"all\" option which is for \"all packages\", the \"-all\" for \"all versions\" maybe should be called \"-all-versions\"\n. Well actually, to be consistent with  \"-version xxx\" option for like 'cinst myapp -version 1.123\" maybe it should be something like this.. and also noticing the uninstallation of a specific version does not work:\ncuninst myapp -version 1.123\ncuninst myqpp -version *\ncuninst myqpp -version all\ncuninst myqpp -version-all\n. I also wanted to post up a new feature to allow you to remove OLD VERSIONS of software. For example:\ncuninst all -version-old\n???\nso that it only leaves the LATEST versions of the packages.\n. I found another issue ticket mentioning that this works:\ncuninst myapp -version 1.123\nbut it does not.. unless it meant that it SHOULD work.\nAlso laughed at the old name 'cunst'  :)\nI still think it's easier to remove most of those aliases and just get users used to using 'choco'\nchoco install\nchoco uninstall\nchoco /?  then would work without the user typing:  cinst /?   and wondering why it's trying to install \"/?\" package.\n. are you sure Linux apt-get REMOVES old versions? I thought it only does\nthat when you run 'apt-get autoremove'\nI think it's useful to have old versions locally so you can revert back to\nthem and not rely on the remote source being online. However I would be\nfine with it removing by default when you install...  and maybe adding an\noption to not do that if the user does not want it.\ncinst myapp -leave-old\nor something like that.\nI did not request it that way because I actually thought how it was working\nnow is in line with 'apt-get'.\n. Regarding your multiple branch thing.. that is ALREADY the case, but maybe\nnot for all apps. Ruby however DOES DO THIS:\ncinst ruby  <-- latest stable release of ruby (hopefully) which is 2.0.xx\ncinst ruby1.9  <-- only install latest (again hopefully) of 1.9 branch\nSomeone recently added that 1.9 package.\nAnd in general I also agree that 'apt-get' is the syntax and form to strive\nto since it advertises as being the 'apt-get for Windows'   however doing\nthat now would mean breaking old habits so not sure how good that would be.\n But moving forward borrowing those ideas probably would only help.\n. I see... only one thing...  since Chocolatey had the goal in mind to JUST DO IT.. making it interactive would conflict with that.  Or at least... if you do, then also add some general -y  -quiet   option to force it to not interact. Fail in certain cases or something..  just provide a way for automated scripts to do whatever the job is.\n. ALSO...  sort of tied with this issue..  in that it eats up disk space a lot.. is this post I wrote about Nuget Cache:\nhttps://groups.google.com/forum/#!searchin/chocolatey/nuget/chocolatey/pM0kIM6A3p8/U8fxJPiDsToJ\n. I'm curious... why the \"shim\" versus   mklink?\n. I see. How does one create their own shims? We might have a use. Are they\nfor directories too? Are MS directory junctions in better condition? I only\nused them slightly.  of course I've used Linux symbolic and hard links for\nyears.\nOn Sep 25, 2014 2:27 PM, \"TomOne\" notifications@github.com wrote:\n\nI'm curious... why the \"shim\" versus mklink?\nBecause MS failed to correctly implement symlinks. To create symlinks on\nWindows requires administrator rights and attempting to run them from GUI\n(Explorer) fails with an error. In addition, they don\u2019t resolve paths\ncorrectly (e.g. paths to DLLs are not resolved correctly).\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/579#issuecomment-56862203\n.\n. Wha????!! disappointing.\n\nI can think of many many issues of Windows and Windows apps that could have\nbeen easily resolved if Windows did have correctly working sym links.\n On Sep 26, 2014 7:06 AM, \"TomOne\" notifications@github.com wrote:\n\nI see. How does one create their own shims? We might have a use.\nShimGen is non-free proprietary software:\nhttps://raw.githubusercontent.com/chocolatey/chocolatey/master/src/tools/shimgen.license.txt\nI guess the Chocolatey devs won\u2019t tell how it exactly works, otherwise\nthey would have open-sourced it. [image: :smiley:]\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/579#issuecomment-56948010\n.\n. I guess this could be a cygwin package issue.  Even the  -notsilent   option continues to send parameters to it.\n. ahhh.. excellent. thanks.\nI don't know how to adjust your docs other than provide an example like\nthat.\nI'm going to post it in the forum for the cygwin package.\n\nOn Fri, Sep 26, 2014 at 12:59 PM, Rob Reynolds notifications@github.com\nwrote:\n\nClosed #580 https://github.com/chocolatey/chocolatey/issues/580.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/580#event-170824283.\n. My own custom source.  An  HTTP URL.\n. And confirmed that when NOT specifying a custom source, it is NOT case sensitive.\n. oh.. a TeamCity server hosting them.. it's using Apache.\n\nNote that this WAS working find on previous Choco version.\nWe did not upgrade TeamCity.\nWe just confirmed this.. \nwe have one running ver ...23  and it works with the WRONG CASE, using our custom source.\n. The TeamCity server running Apache on Windows.\n. And BTW, we also have same results from 2 different versions of TeamCity on Windows 2008 and 2008R2\n. Also..  we've been using the WRONG case for over a year with TeamCity.. so it's not case sensitive.\nIt's only when we updated to Choco ...27 did we realize we have the wrong case on some of our packages.\n. Makes sense. Sounds like a likely culprit. Hope there is a way to deal with that..  not sure though why it should be different when a custom source is used.\nWe are still running an old NuGet version on the TeamCity server.\n. You should go well at NuGet as a team. :)\nWhy in the world would anyone on purpose want to make the package names case sensitive? :) They probably made a mistake.\nLinux apt-get is not case sensitive. :)  And Linux is usually a very case touchy environment.\n. Yes this still is not fixed. I just tested on ver .32.\n. oh.. I don't know where to get that version.\nwould I do this?\nchoco install chocolatey -Version 0.9.9.0  ??\nI don't know where to see the list of valid beta versions.\nOn Wed, Jan 28, 2015 at 8:45 AM, Rob Reynolds notifications@github.com\nwrote:\n\nSorry, I meant with version 0.9.9 (prerelease). Test on a non production\nsystem please. It would be great if this can be closed with 0.9.9, I\nbelieve it is fixed, I just don't have a source like proget that has this\nissue.\nOn Wednesday, January 28, 2015, codearoo notifications@github.com\nwrote:\n\nYes this still is not fixed. I just tested on ver .32.\n\u2014\nReply to this email directly or view it on GitHub\n<\nhttps://github.com/chocolatey/chocolatey/issues/589#issuecomment-71832010>\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/589#issuecomment-71836431\n.\n. I didn't know how to find this alpha pre-release page.\n\nanyway, I tried it with ver 0.9.9 and this issue seems resolved.\nThe install and removal of the pre-release version, however, is not working. :)  Installing with   \"-pre\" did work (with some errors) but then per instructions on the screen to --force 0.9.8.32  failed. So now that test system can't get out of pre-release.\n. It was a test system..but still want to get it back.. and thought I should\nlet you know\nI'll brute force it if your suggestion does not work.\n. choco install chocolatey --force --version 0.9.8.32\nthat worked...  somehow when I ran it I omited the   \"--version\" part... it\nwas doing something... not sure what then.\nOn Wed, Jan 28, 2015 at 10:07 AM, Rob Reynolds notifications@github.com\nwrote:\n\nAlthough doing exactly that seems to have worked for me.\n[image: image]\nhttps://cloud.githubusercontent.com/assets/63502/5939894/127e0574-a6cd-11e4-99f1-bd8c26932b1e.png\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/589#issuecomment-71849336\n.\n. Was going to create new issue, but maybe this is related.\n\nWas going to suggest that the 'cup all' command had an option to EXCLUDE packages.\ncup all -exclude \"7-zip,notepad,etc\"\noops.. OF COURSE I MEANT THIS COMMAND INSTEAD :)\nchoco update all -exclude \"7-zip,notepad,etc\"\nto avoid using the alias. \n. ok.. BTW, alternative to the -exclude ... I still don't know how to list INSTALLED packages.\n. ...  and also use the   -source option.\nFor example...  list all apps installed that have source \"xyz\"\n. oh yeah right.. thanks.   just missing the   -source option..  it ignores it.\nI'll create another ticket though.\n. Alternatively it could work like the \"update\" or \"install\" feature does, by\ncomparing the local list to the list of apps located at the source and only\nshow the intersection of the list.\nOn Tue, Dec 17, 2013 at 11:55 AM, Rob Reynolds notifications@github.comwrote:\n\nThere is no tracking at the current time of what source a package came\nfrom.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/5#issuecomment-30768436\n.\n. Hi...  also bumping into this.. but I wanted to clarify something...  Are you suggesting that Chocolatey in the future will not use NuGet? Meaning that all the NuGet packages created will no longer work?\n. I was just making sure I had the same understanding just in case. I've seen stranger things. :)\n. I have my own script to make the setting in the System env.\n\nHowever I also use  'choco /?'  to determine if it's installed. (preferred to use something like   'choco -version' but that does not quite do same thing)\nchoco /?  will return %errorlevel% of 0 if it found the command, and 9009 otherwise but you can just check for the success/fail like this:\nchoco /? || install-choco\nwhere \"install-choco\" is the big powershell string you can paste in to install or maybe some other way you want to install.\n. YES!! and I just found it by searching for \"Windows version of which\"\nC:\\software>where choco\nc:\\chocolatey\\bin\\choco\nc:\\chocolatey\\bin\\choco.bat\nwhere /?   for more help.\n. oh yeah.  So as mentioned, when I install it, I wrapped it in a script that calls a .VBS script to put the path in the System env:\nENV_VARIABLE = WScript.Arguments.Item(0)\nENV_VALUE = WScript.Arguments.Item(1)\nSet WSHShell = WScript.CreateObject(\"WScript.Shell\")\nSet WshEnv = WshShell.Environment(\"SYSTEM\")\nWshEnv(ENV_VARIABLE) = ENV_VALUE\nUse it like this:\ncscript set-system-env.vbs ENVVARNAME ANDTHEVALUE\nwhich would set whatever env var to the value you specify in the System section.\nAnd then can use this .BAT logic to only do that if it's not already there in the current session:\n:append-system-path-if-needed\nsetlocal ENABLEDELAYEDEXPANSION\nset NEWVALUE=%*\n:: start with value and remove all quotes\nset x=%PATH:\"=%\n:: now remove all spaces\nset x=%x: =%\nset y=%x:!NEWVALUE!=%\nif \"%x%\" == \"%y%\" echo adding &&  cscript set-system-env.vbs PATH \"%PATH%;%NEWVALUE%\" || exit /b\nendlocal\nexit /b\nTo use that \"function\" it would look like this:\ncall :append-system-path-if-needed C:\\Chocolatey\n. And regarding testing if it's installed...  forgot that you don't need the  /?   this works just as well:\nchoco || install-choco\n. And finally... :)  You can use this to actually FIND it installed and in what dir:\nC:>dir /s/b choco.bat\nC:\\Chocolatey\\bin\\choco.bat\nunless you also need to search other drive letters.\n. ya this is it..  been so long ago not sure how good it is.. and it was my\nfirst one.... but the change itself is easy and I do BAT scripts all the\ntime.\nThe idea is just to replace any  ECHO ON  with   @ at the beginning of any\nline and never use ECHO ON or ECHO OFF in your scripts since your scripts\nare so \"low-level\" and would be commonly wrapped up in other user scripts.\nSo it's better to always allow the user code to control things and make\ndecisions like to have ECHO ON or OFF.\n. I meant the reverse, BTW... replace any ECHO OFF with a @ at the beginning\nof a line.\n. Not being familiar with how Chocolatey works under the hood...  my hope is\nthat the change will prevent installs from creating BAT files in\nChocolatey\\bin folder like PSCP.bat that ends up like this:\n@echo off\nSET DIR=%~dp0%\n\"%DIR%..\\lib\\putty.portable.0.63\\tools\\pscp.exe\" %*\nto instead be created like this:\n@SET DIR=%~dp0%\n@\"%DIR%..\\lib\\putty.portable.0.63\\tools\\pscp.exe\" %*\n. or.. why bother setting this DIR?\nCould just be:\n@\"%~dp0%..\\lib\\putty.portable.0.63\\tools\\pscp.exe\" %*\n. Does Choco really need to use DISM to get elevated permissions? It so happens we always turn off UAC on our servers.. but either way...  for listing and installing windowsfeatures, one would imply that the requirement is to be running Command Window as Admin.\nPerhaps that is a way to fix?\n. Not working on Win2008 SP2 would be quite a miss. :)\nWe have to use it for now because we need to use 32bit and R2 is not available in 32bit on Amazon.\n. DEAR CHOCO DEVELOPERS!!!\nI stumbled on to this:  ServerManagerCmd.exe\nIt works for Win2008 and R2. It does happen to be deprecated on the later..  but it might offer a simple solution to make this automatically work on 2008R1. And it might be there in ver 2012..  of course..  WTF deprecate it? There is nothing wrong with this thing.. they could have just tied it into their new PowerShell method.\nServerManagerCmd.exe -query  shows what's installed (of course in freakish Microsoft way it shows it tabbed indicating its structure).\nYou can use it like this:\nServerManagerCmd.exe -install Telnet-client\nServerManagerCmd.exe -remove Telnet-client\nOf course however you do it, in typical Microsoft fashion, it takes like 20 minutes to install or remove TELNET CLIENT!! :)\nhas options like -whatIf   -reboot\nBut anyway, I can just use this command and skip the whole  cinst -source windowsfeatures.\n. hey guys.. I posted bunch more info on this topic in the forum:\nhttps://groups.google.com/forum/#!topic/chocolatey/ZfbzF_m2fpE\n. You should check out the forum link I put in above.\nI basically outlined the discovery of what you wrote in your comment. Such a pain in the ass!\n. I'm not seeing how your change affects this ticket.. as Win2008 R1 does not have 'dism.exe' anywhere in any directory at all. And I'm testing on 32bit.\n. Just for sake of putting in this ticket, I have replaced hopes of using\nchoco -source windowsfeatures   with the use of ServerManagerCommand.exe\n and also the PowerShell commands which have same syntax.\n. Oh.. well then please add a \"--version\" option or something? It is useful.\nI happen to want to use it to even know if it's installed.. like I do for\n7zip.. in this fashion:\ncall 7za -? > nul || call cinst 7zip.commandline && echo on || goto error\nThat line will run \"call cinst 7zip.commandline && echo on\" if the 7za\n-? command fails which likely would be because it can't be found.\n. OK.. thanks.. that will work.\nIt's still slow, not sure what it's doing..\nC:\\software>choco -debug\nDEBUG: Running 'Append-InstallLog' with chocoInstallLog:''\nDEBUG: Arguments: $command =\n''|$packageNames=''|$source=''|$version=''|$allVersions=False|$InstallArguments\n=''|$overrideArguments=False|$force=False|$prerelease=False|$localonly=False|$v\nerbosity=False|$debug=True|$name=''|$ignoreDependencies=False|$forceX86=False|$\npackageParameters=''|PowerShellVersion=3.0\nPlease run chocolatey /? or chocolatey help - chocolatey v0.9.8.23\nReading environment variables from registry. Please wait... Done.\nBut if you will add a \"-version\" option that just quickly outputs the\nversion, then leave this ticket otherwise if you don't think it's worth it,\nclose it.\n. Is this still related to the error not getting returned when install\npackages fail? That continues to happen in .23 of course.\nOn Jan 19, 2014 1:00 PM, \"Rob Reynolds\" notifications@github.com wrote:\n\nI would also need to look into why we commented that out.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/384#issuecomment-32714705\n.\n. AMEN! no shortcuts! :)\n\n\"chocolatey\" might have been a pain to type (and spell) but:\n\"choco\"  is very nice!\nchoco install\nchoco update\nchoco update all\nchoco uninstall\netc.\nThen it's actually much more like   'apt-get'\n. As a transition phase... the    'cinst'  and other aliases could just\noutput to the screen instead:\n\"Please run   choco install   instead\"\n. To speed up this process, you may want to do a \"replace all\" on your website.. where each package that displays the big:\nc:> cinst chocolatey\nto now be:\nc:> choco install chocolatey\nYou even have images on the home page using 'cinst'\n. sweet. what are you waiting for? :)  (the 1 liner anyway)\nhaha\nRemembering that SOFTware should not be HARD.. it is SOFT so be bold. :)\n. I'm already updating my scripts to use 'choco install'\n. Maybe to avoid confusion with the \"all\" option which is for \"all packages\", the \"-all\" for \"all versions\" maybe should be called \"-all-versions\"\n. Well actually, to be consistent with  \"-version xxx\" option for like 'cinst myapp -version 1.123\" maybe it should be something like this.. and also noticing the uninstallation of a specific version does not work:\ncuninst myapp -version 1.123\ncuninst myqpp -version *\ncuninst myqpp -version all\ncuninst myqpp -version-all\n. I also wanted to post up a new feature to allow you to remove OLD VERSIONS of software. For example:\ncuninst all -version-old\n???\nso that it only leaves the LATEST versions of the packages.\n. I found another issue ticket mentioning that this works:\ncuninst myapp -version 1.123\nbut it does not.. unless it meant that it SHOULD work.\nAlso laughed at the old name 'cunst'  :)\nI still think it's easier to remove most of those aliases and just get users used to using 'choco'\nchoco install\nchoco uninstall\nchoco /?  then would work without the user typing:  cinst /?   and wondering why it's trying to install \"/?\" package.\n. are you sure Linux apt-get REMOVES old versions? I thought it only does\nthat when you run 'apt-get autoremove'\nI think it's useful to have old versions locally so you can revert back to\nthem and not rely on the remote source being online. However I would be\nfine with it removing by default when you install...  and maybe adding an\noption to not do that if the user does not want it.\ncinst myapp -leave-old\nor something like that.\nI did not request it that way because I actually thought how it was working\nnow is in line with 'apt-get'.\n. Regarding your multiple branch thing.. that is ALREADY the case, but maybe\nnot for all apps. Ruby however DOES DO THIS:\ncinst ruby  <-- latest stable release of ruby (hopefully) which is 2.0.xx\ncinst ruby1.9  <-- only install latest (again hopefully) of 1.9 branch\nSomeone recently added that 1.9 package.\nAnd in general I also agree that 'apt-get' is the syntax and form to strive\nto since it advertises as being the 'apt-get for Windows'   however doing\nthat now would mean breaking old habits so not sure how good that would be.\n But moving forward borrowing those ideas probably would only help.\n. I see... only one thing...  since Chocolatey had the goal in mind to JUST DO IT.. making it interactive would conflict with that.  Or at least... if you do, then also add some general -y  -quiet   option to force it to not interact. Fail in certain cases or something..  just provide a way for automated scripts to do whatever the job is.\n. ALSO...  sort of tied with this issue..  in that it eats up disk space a lot.. is this post I wrote about Nuget Cache:\nhttps://groups.google.com/forum/#!searchin/chocolatey/nuget/chocolatey/pM0kIM6A3p8/U8fxJPiDsToJ\n. I'm curious... why the \"shim\" versus   mklink?\n. I see. How does one create their own shims? We might have a use. Are they\nfor directories too? Are MS directory junctions in better condition? I only\nused them slightly.  of course I've used Linux symbolic and hard links for\nyears.\nOn Sep 25, 2014 2:27 PM, \"TomOne\" notifications@github.com wrote:\n\nI'm curious... why the \"shim\" versus mklink?\nBecause MS failed to correctly implement symlinks. To create symlinks on\nWindows requires administrator rights and attempting to run them from GUI\n(Explorer) fails with an error. In addition, they don\u2019t resolve paths\ncorrectly (e.g. paths to DLLs are not resolved correctly).\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/579#issuecomment-56862203\n.\n. Wha????!! disappointing.\n\nI can think of many many issues of Windows and Windows apps that could have\nbeen easily resolved if Windows did have correctly working sym links.\n On Sep 26, 2014 7:06 AM, \"TomOne\" notifications@github.com wrote:\n\nI see. How does one create their own shims? We might have a use.\nShimGen is non-free proprietary software:\nhttps://raw.githubusercontent.com/chocolatey/chocolatey/master/src/tools/shimgen.license.txt\nI guess the Chocolatey devs won\u2019t tell how it exactly works, otherwise\nthey would have open-sourced it. [image: :smiley:]\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/579#issuecomment-56948010\n.\n. I guess this could be a cygwin package issue.  Even the  -notsilent   option continues to send parameters to it.\n. ahhh.. excellent. thanks.\nI don't know how to adjust your docs other than provide an example like\nthat.\nI'm going to post it in the forum for the cygwin package.\n\nOn Fri, Sep 26, 2014 at 12:59 PM, Rob Reynolds notifications@github.com\nwrote:\n\nClosed #580 https://github.com/chocolatey/chocolatey/issues/580.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/580#event-170824283.\n. My own custom source.  An  HTTP URL.\n. And confirmed that when NOT specifying a custom source, it is NOT case sensitive.\n. oh.. a TeamCity server hosting them.. it's using Apache.\n\nNote that this WAS working find on previous Choco version.\nWe did not upgrade TeamCity.\nWe just confirmed this.. \nwe have one running ver ...23  and it works with the WRONG CASE, using our custom source.\n. The TeamCity server running Apache on Windows.\n. And BTW, we also have same results from 2 different versions of TeamCity on Windows 2008 and 2008R2\n. Also..  we've been using the WRONG case for over a year with TeamCity.. so it's not case sensitive.\nIt's only when we updated to Choco ...27 did we realize we have the wrong case on some of our packages.\n. Makes sense. Sounds like a likely culprit. Hope there is a way to deal with that..  not sure though why it should be different when a custom source is used.\nWe are still running an old NuGet version on the TeamCity server.\n. You should go well at NuGet as a team. :)\nWhy in the world would anyone on purpose want to make the package names case sensitive? :) They probably made a mistake.\nLinux apt-get is not case sensitive. :)  And Linux is usually a very case touchy environment.\n. Yes this still is not fixed. I just tested on ver .32.\n. oh.. I don't know where to get that version.\nwould I do this?\nchoco install chocolatey -Version 0.9.9.0  ??\nI don't know where to see the list of valid beta versions.\nOn Wed, Jan 28, 2015 at 8:45 AM, Rob Reynolds notifications@github.com\nwrote:\n\nSorry, I meant with version 0.9.9 (prerelease). Test on a non production\nsystem please. It would be great if this can be closed with 0.9.9, I\nbelieve it is fixed, I just don't have a source like proget that has this\nissue.\nOn Wednesday, January 28, 2015, codearoo notifications@github.com\nwrote:\n\nYes this still is not fixed. I just tested on ver .32.\n\u2014\nReply to this email directly or view it on GitHub\n<\nhttps://github.com/chocolatey/chocolatey/issues/589#issuecomment-71832010>\n.\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/589#issuecomment-71836431\n.\n. I didn't know how to find this alpha pre-release page.\n\nanyway, I tried it with ver 0.9.9 and this issue seems resolved.\nThe install and removal of the pre-release version, however, is not working. :)  Installing with   \"-pre\" did work (with some errors) but then per instructions on the screen to --force 0.9.8.32  failed. So now that test system can't get out of pre-release.\n. It was a test system..but still want to get it back.. and thought I should\nlet you know\nI'll brute force it if your suggestion does not work.\n. choco install chocolatey --force --version 0.9.8.32\nthat worked...  somehow when I ran it I omited the   \"--version\" part... it\nwas doing something... not sure what then.\nOn Wed, Jan 28, 2015 at 10:07 AM, Rob Reynolds notifications@github.com\nwrote:\n\nAlthough doing exactly that seems to have worked for me.\n[image: image]\nhttps://cloud.githubusercontent.com/assets/63502/5939894/127e0574-a6cd-11e4-99f1-bd8c26932b1e.png\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/589#issuecomment-71849336\n.\n. \n",
    "cmshawn": "I'd like this feature to support comparison operators, as I've mentioned in #346, so that bug fix updates (for example) could still get downloaded/installed.\n. @ferventcoder Do you have a link to the mentioned workaround?\n. I'll give another example to illustrate OP's need. I own a license for ReSharper 7.x, but not 8.x. I'd like to use chocolatey to make sure I have the latest bug-fix releases for 7 (using cup all) but if I get bumped up to 8 I'll no longer be licensed.\n. Duplicate of #5?\n. I'd like this feature to support comparison operators, as I've mentioned in #346, so that bug fix updates (for example) could still get downloaded/installed.\n. @ferventcoder Do you have a link to the mentioned workaround?\n. I'll give another example to illustrate OP's need. I own a license for ReSharper 7.x, but not 8.x. I'd like to use chocolatey to make sure I have the latest bug-fix releases for 7 (using cup all) but if I get bumped up to 8 I'll no longer be licensed.\n. Duplicate of #5?\n. ",
    "martinlong1978": "Any movement on this? I have a few things which I don't have licenses for the latest versions (nor do I have any need for them), yet \"cup all\" will just update them regardless. \n. Any movement on this? I have a few things which I don't have licenses for the latest versions (nor do I have any need for them), yet \"cup all\" will just update them regardless. \n. ",
    "mika76": "Maybe as a first step, just tell people what the dependencies are so that they can remove manually...\n. Maybe as a first step, just tell people what the dependencies are so that they can remove manually...\n. ",
    "ccoenen": "IIRC apt-get / aptitude has a special flag that marks a package as \"installed as dependency\" vs. \"installed by a user\". Dependencies would automatically be removed, once no other package requires its presence anymore. The flag will be turned into a \"installed by user\", if the user \"installs\" the package the normal way (i.e. not as a dependeny).\nI do think, chocolatey should (at some point) do it very similarly. right now, i think, uninstalling one package (just that one specified package) would be fine, too.\n. Ah, i found it:\n- https://groups.google.com/d/topic/chocolatey/oV9eqROohuM/discussion\n  (edited: found the actual thread)\n. Well, that discussion basically states the same thing: the need for localisation.\nI can imagine that this is a feature request on a pretty internal level of chocolatey, but i feel that this is more than neccessary for a long-term success. Especially if it is meant to appeal to a broader audience.\n. IIRC apt-get / aptitude has a special flag that marks a package as \"installed as dependency\" vs. \"installed by a user\". Dependencies would automatically be removed, once no other package requires its presence anymore. The flag will be turned into a \"installed by user\", if the user \"installs\" the package the normal way (i.e. not as a dependeny).\nI do think, chocolatey should (at some point) do it very similarly. right now, i think, uninstalling one package (just that one specified package) would be fine, too.\n. Ah, i found it:\n- https://groups.google.com/d/topic/chocolatey/oV9eqROohuM/discussion\n  (edited: found the actual thread)\n. Well, that discussion basically states the same thing: the need for localisation.\nI can imagine that this is a feature request on a pretty internal level of chocolatey, but i feel that this is more than neccessary for a long-term success. Especially if it is meant to appeal to a broader audience.\n. ",
    "smarts": "IMHO the ideal uninstall command would remove the package XYZ and all packages that exist only in XYZ's dependency graph. If this is too complex or (from the end-user's perspective) too expensive, removing no dependencies is probably the way to go.\nThe downside is that you could easily end up w/ a bloated system if you install/uninstall a lot. In that case, you might want some sort of \"orphan-finding\" command that will find orphaned packages. That said, it brings back the notion of a package being user-chosen vs. just a dependency, because otherwise every non-dependent package will show up as an orphan.\n. IMHO the ideal uninstall command would remove the package XYZ and all packages that exist only in XYZ's dependency graph. If this is too complex or (from the end-user's perspective) too expensive, removing no dependencies is probably the way to go.\nThe downside is that you could easily end up w/ a bloated system if you install/uninstall a lot. In that case, you might want some sort of \"orphan-finding\" command that will find orphaned packages. That said, it brings back the notion of a package being user-chosen vs. just a dependency, because otherwise every non-dependent package will show up as an orphan.\n. ",
    "rryk": ":+1: \n. :+1: \n. ",
    "dcjulian29": "This idea should be slightly expanded to include \"meta\" packages. See https://help.ubuntu.com/community/MetaPackages for an explanation. This would allow packages that don't include anything other than dependencies.\n. Yes, you are absolutely correct. DISM is not available on Windows 2008 R1... It is only available on Windows 7, 8, and 8.1 on the client side and Windows 2008 R2, 2012, and 2012 R2 on the server side. (reference: http://technet.microsoft.com/en-us/library/hh825186.aspx) So regardless of UAC, installing windows features with chocolatey will not currently work since chocolatey uses DISM to install windows features. I don't have any Windows 2008 R1 servers around anymore, so it hasn't been a problem with me... sorry for the confusion...\n. I've implemented the fix in a branch and submitted a new pull request.\n. Doesn't Install-ChocolateyPinnedTaskBarItem already do this? I use this function to pin items to the Taskbar in some of my \"customization\" packages...\nI believe that Install-ChocolateyDesktopLink would do the same for the desktop.\n. That has been a sticking point for me as well recently... If you've been around chocolatey for a while, you'll remember that the reason it doesn't install into \"Program Files\" is because the original thought was to not require \"elevated\" privileges... recent changes have changed the \"default\" location to \"ProgramData\" and added a warning about execution within a \"non-elevated\" shell. This is all because the developers of the install scripts inside the packages from the public feed don't take adequate precautions to handle the difference between execution in an elevated and non-elevated shell... It is an unfortunate change in direction for the project. I'm hoping that the OneGet project will take a different approach.\n. My intention was never to apply to the fact that I spoke with any authority or that my opinion was correct. I based my opinion solely on the web page at https://github.com/chocolatey/chocolatey/wiki/DefaultChocolateyInstallReasoning. I love the chocolatey project and I use it across a lot of systems to manage applications/settings/customizations. I think the development team of chocolatey have done many great things. I have just found that many (not all) of the package installers on the public feed are crap and don't work consistently on a large number of my systems which contain a lot of variations. Again, not a problem with the chocolatey project itself. But if you're going to constantly display a warning that I'm executing in a non-elevated shell even when I just getting a list of packages (clist), I think that the experience is tainted from the start.\nAs for stuff failing when not calling the right functions, I've been hit with that several time in the install scripts I written so I'm not immune to the problem either. I've written scripts that run into permission issues, but then chocolatey will still report that the package installed correctly. Chocolatey can only report what the script reports back to it. That is not a fault of Chocolatey project, it is the fault of my script doing a \"try/catch\" then exiting the script without letting the exception propagate up...\nGiven that Chocolatey is still not a 1.0 product and that I have not seen the new rewrite yet, and to be honest, I'm still waiting to see what the OneGet project does; however, I will sign up for the newsletter as the chocolatey project has made package management on Windows systems much closer to the same experience I have under the Ubuntu systems I manage. Keep in mind though that any interaction with apt-get requires sudo permissions so I look forward to any tools that allow non-admin installations while still being secure to the system...\n. I personally don't like packages that bundle the executable in the package itself as I believe (IMHO) that the package should only contain the \"how\" to install... The ScriptCs (https://chocolatey.org/packages/ScriptCs/) project shows an example of including all of the files needed for the project... My preference is to download a Zip file of the compiled files (such as https://github.com/dcjulian29/choco-packages/blob/master/bind-tools/tools/chocolateyInstall.ps1) and then extract them and copy them to the \"applications\" directory... If you don't have anywhere to post the binaries (such as on GitHub, Dropbox, OneDrive, or a personal website, you can always take the approach to embed all of the files needed when you create the NuGet package similar to the ScriptCs package. You can always reach out to me and I can help you with the Nuspec file to include the files and tell you the steps I do to create my packages (both originals and copies)...\n. This idea should be slightly expanded to include \"meta\" packages. See https://help.ubuntu.com/community/MetaPackages for an explanation. This would allow packages that don't include anything other than dependencies.\n. Yes, you are absolutely correct. DISM is not available on Windows 2008 R1... It is only available on Windows 7, 8, and 8.1 on the client side and Windows 2008 R2, 2012, and 2012 R2 on the server side. (reference: http://technet.microsoft.com/en-us/library/hh825186.aspx) So regardless of UAC, installing windows features with chocolatey will not currently work since chocolatey uses DISM to install windows features. I don't have any Windows 2008 R1 servers around anymore, so it hasn't been a problem with me... sorry for the confusion...\n. I've implemented the fix in a branch and submitted a new pull request.\n. Doesn't Install-ChocolateyPinnedTaskBarItem already do this? I use this function to pin items to the Taskbar in some of my \"customization\" packages...\nI believe that Install-ChocolateyDesktopLink would do the same for the desktop.\n. That has been a sticking point for me as well recently... If you've been around chocolatey for a while, you'll remember that the reason it doesn't install into \"Program Files\" is because the original thought was to not require \"elevated\" privileges... recent changes have changed the \"default\" location to \"ProgramData\" and added a warning about execution within a \"non-elevated\" shell. This is all because the developers of the install scripts inside the packages from the public feed don't take adequate precautions to handle the difference between execution in an elevated and non-elevated shell... It is an unfortunate change in direction for the project. I'm hoping that the OneGet project will take a different approach.\n. My intention was never to apply to the fact that I spoke with any authority or that my opinion was correct. I based my opinion solely on the web page at https://github.com/chocolatey/chocolatey/wiki/DefaultChocolateyInstallReasoning. I love the chocolatey project and I use it across a lot of systems to manage applications/settings/customizations. I think the development team of chocolatey have done many great things. I have just found that many (not all) of the package installers on the public feed are crap and don't work consistently on a large number of my systems which contain a lot of variations. Again, not a problem with the chocolatey project itself. But if you're going to constantly display a warning that I'm executing in a non-elevated shell even when I just getting a list of packages (clist), I think that the experience is tainted from the start.\nAs for stuff failing when not calling the right functions, I've been hit with that several time in the install scripts I written so I'm not immune to the problem either. I've written scripts that run into permission issues, but then chocolatey will still report that the package installed correctly. Chocolatey can only report what the script reports back to it. That is not a fault of Chocolatey project, it is the fault of my script doing a \"try/catch\" then exiting the script without letting the exception propagate up...\nGiven that Chocolatey is still not a 1.0 product and that I have not seen the new rewrite yet, and to be honest, I'm still waiting to see what the OneGet project does; however, I will sign up for the newsletter as the chocolatey project has made package management on Windows systems much closer to the same experience I have under the Ubuntu systems I manage. Keep in mind though that any interaction with apt-get requires sudo permissions so I look forward to any tools that allow non-admin installations while still being secure to the system...\n. I personally don't like packages that bundle the executable in the package itself as I believe (IMHO) that the package should only contain the \"how\" to install... The ScriptCs (https://chocolatey.org/packages/ScriptCs/) project shows an example of including all of the files needed for the project... My preference is to download a Zip file of the compiled files (such as https://github.com/dcjulian29/choco-packages/blob/master/bind-tools/tools/chocolateyInstall.ps1) and then extract them and copy them to the \"applications\" directory... If you don't have anywhere to post the binaries (such as on GitHub, Dropbox, OneDrive, or a personal website, you can always take the approach to embed all of the files needed when you create the NuGet package similar to the ScriptCs package. You can always reach out to me and I can help you with the Nuspec file to include the files and tell you the steps I do to create my packages (both originals and copies)...\n. ",
    "pkahle": "From your comment on your blog, I think you're intending to do this in a very different way than Debian does. It sounds like you're intending to have a package that actually points to other packages, which is a bit fragile compared to the Debian way of doing it (a package \"Provides\" a virtual package, and other packages \"Depends\" on the virtual package.\nDebian is helped out by having a local package list with metadata about all the packages sitting right there, but from what I can tell, Chocolatey will have to query the server. Not that that's a problem, really, but it might be useful to have a list of virtual packages provided by installed packages. Or maybe it's easy enough to parse all the nupkg files to find them on pkg install.\nI haven't looked at Chocolatey's inner workings at all, but I want to make sure you've thought about this before you implement it.\n. Ok, now you've got me in the weeds. \nI've only just looked up how this happens in NuGet, but it seems to me it's not necessarily much slower to add fetching virtual packages when you search for a package by id. The only change would be adding an OR case to the FindPackagesById query to search in the provided packages as well as the actual ID. Yes, it's a hit, but not a huge one, I don't think.\nMy proposal would be to mirror dependencies in the nuspec file with a different name for virtual packages provided (maybe provides?) so:\n\n\n\nThen the command line tool would need to have a way to check if one of the options is installed, then determine which to install, or ask the user, to meet the dependency.\nAnother related thought that just popped into my mind would be to have a  tag that can be used to cleanly do name changes. Debian does this, and it might be useful if you decide to change from .commandline to .noinstall.\nNow, all of this depends on the relationship between Chocolatey and the core NuGet developers, or Chocolatey's willingness to maintain a fork to implement this. As far as I can tell, it's not really useful in NuGet proper, but I guess it might be useful to try install-package v-dependency-injection-framework or something.\nOh, another thought. I've used v-* for all the virtual packages mentioned so far. If we want to avoid slowdowns and make it more likely to get something like this included in the main NuGet, it could be configured with a virtual package prefix, and only do the search for provides if the package being searched for starts with that sort of prefix. That way we basically add one \"if\" to the core NuGet process.\nOK, I'm kinda liking this, so I may fork NuGet and play around if I have the time.\n-----Original Message-----\nFrom: Rob Reynolds [mailto:reply@reply.github.com] \nSent: Wednesday, July 25, 2012 14:27\nTo: Peter Kahle\nSubject: Re: [chocolatey] [Enhancement] Virtual Packages (#7)\nThought about it quite a bit, but maybe I'm missing the boat with virtual packages. I need to depend on the virtual package, but how does the virtual know what packages satisfy the virtual package requirement? \nFrom what you are saying, it sounds like debian uses some metadata about packages to know whether they are say a \"PDFReader\" or not.  That could get pretty server intensive as chocolatey doesn't keep a local list of packages (which also means it doesn't give a nice \"Did you mean 'apt-get curl'?\" message either.\nPerhaps one could depend on a tag, but that's not reliable on the nuget framework.  The current method of implementation I've thought of isn't perfect (doesn't automatically have new packages that meet the virtual requirement), but it's a start... :)\n\"We never usually go the right direction in the start, only discover it after we've made progress.\"\nAlthough if you have ideas on how to make it easier to register an application as satisfying a virtual requirement, I'm definitely open to it.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/issues/7#issuecomment-7257422\n. From your comment on your blog, I think you're intending to do this in a very different way than Debian does. It sounds like you're intending to have a package that actually points to other packages, which is a bit fragile compared to the Debian way of doing it (a package \"Provides\" a virtual package, and other packages \"Depends\" on the virtual package.\nDebian is helped out by having a local package list with metadata about all the packages sitting right there, but from what I can tell, Chocolatey will have to query the server. Not that that's a problem, really, but it might be useful to have a list of virtual packages provided by installed packages. Or maybe it's easy enough to parse all the nupkg files to find them on pkg install.\nI haven't looked at Chocolatey's inner workings at all, but I want to make sure you've thought about this before you implement it.\n. Ok, now you've got me in the weeds. \nI've only just looked up how this happens in NuGet, but it seems to me it's not necessarily much slower to add fetching virtual packages when you search for a package by id. The only change would be adding an OR case to the FindPackagesById query to search in the provided packages as well as the actual ID. Yes, it's a hit, but not a huge one, I don't think.\nMy proposal would be to mirror dependencies in the nuspec file with a different name for virtual packages provided (maybe provides?) so:\n\n\n\nThen the command line tool would need to have a way to check if one of the options is installed, then determine which to install, or ask the user, to meet the dependency.\nAnother related thought that just popped into my mind would be to have a  tag that can be used to cleanly do name changes. Debian does this, and it might be useful if you decide to change from .commandline to .noinstall.\nNow, all of this depends on the relationship between Chocolatey and the core NuGet developers, or Chocolatey's willingness to maintain a fork to implement this. As far as I can tell, it's not really useful in NuGet proper, but I guess it might be useful to try install-package v-dependency-injection-framework or something.\nOh, another thought. I've used v-* for all the virtual packages mentioned so far. If we want to avoid slowdowns and make it more likely to get something like this included in the main NuGet, it could be configured with a virtual package prefix, and only do the search for provides if the package being searched for starts with that sort of prefix. That way we basically add one \"if\" to the core NuGet process.\nOK, I'm kinda liking this, so I may fork NuGet and play around if I have the time.\n-----Original Message-----\nFrom: Rob Reynolds [mailto:reply@reply.github.com] \nSent: Wednesday, July 25, 2012 14:27\nTo: Peter Kahle\nSubject: Re: [chocolatey] [Enhancement] Virtual Packages (#7)\nThought about it quite a bit, but maybe I'm missing the boat with virtual packages. I need to depend on the virtual package, but how does the virtual know what packages satisfy the virtual package requirement? \nFrom what you are saying, it sounds like debian uses some metadata about packages to know whether they are say a \"PDFReader\" or not.  That could get pretty server intensive as chocolatey doesn't keep a local list of packages (which also means it doesn't give a nice \"Did you mean 'apt-get curl'?\" message either.\nPerhaps one could depend on a tag, but that's not reliable on the nuget framework.  The current method of implementation I've thought of isn't perfect (doesn't automatically have new packages that meet the virtual requirement), but it's a start... :)\n\"We never usually go the right direction in the start, only discover it after we've made progress.\"\nAlthough if you have ideas on how to make it easier to register an application as satisfying a virtual requirement, I'm definitely open to it.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/issues/7#issuecomment-7257422\n. ",
    "wjk": "Any progress? I seriously :+1: this feature. Also, have you considered implementing an additional API on your Web site to provide <provides> and <replaces> functionality, if you can't fit it into the NuGet package format?\n. Have you considered the possibility of requesting that users of this feature obtain their own API key, and passing it in via environment variable or a similar procedure? Yes, I know it is extra work, but I have done it before, and it really isn't that hard. (Note, however, that a non-technically minded Chocolatey wizard probably won't have the perseverance or the technical ability to do this for themselves. Thoughts?)\nI would not, however recommend automatically displaying an informational message in effect advertising this feature, as you would then be nagging users who might not care about antivirus checks. Placing such a message a Help or Usage screen, however, or in the Chocolatey wiki or similar, would be perfect.\nIf this works for you, I can provide a pull request (but I won't start on one until the Chocolatey project expresses an interest in this implementation).\n. Any progress? I seriously :+1: this feature. Also, have you considered implementing an additional API on your Web site to provide <provides> and <replaces> functionality, if you can't fit it into the NuGet package format?\n. Have you considered the possibility of requesting that users of this feature obtain their own API key, and passing it in via environment variable or a similar procedure? Yes, I know it is extra work, but I have done it before, and it really isn't that hard. (Note, however, that a non-technically minded Chocolatey wizard probably won't have the perseverance or the technical ability to do this for themselves. Thoughts?)\nI would not, however recommend automatically displaying an informational message in effect advertising this feature, as you would then be nagging users who might not care about antivirus checks. Placing such a message a Help or Usage screen, however, or in the Chocolatey wiki or similar, would be perfect.\nIf this works for you, I can provide a pull request (but I won't start on one until the Chocolatey project expresses an interest in this implementation).\n. ",
    "henningc": "Migrated notes from #15:\nI tried to install cUrl, but the package was not found and thus the install failed.\nWhen running cup all, I'm getting this:\ncurl does not appear to be on (https://go.microsoft.com/fwlink/?LinkID=206669). You have 7.21.7 installed. Interesting...\n. Awesome, thanks\nOn Fri, Oct 14, 2011 at 1:57 PM, Rob Reynolds \nreply@reply.github.comwrote:\n\n@henningc - I did log another issue for you on what you are experiencing -\nhttps://github.com/chocolatey/chocolatey/issues/16 - I also closed it with\nchocolatey 0.9.8.11 (which you can get with cup)\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/issues/10#issuecomment-2405846\n. Oops, didn't see #10 before reporting.\nSorry about the dupe.\n. done\n. Migrated notes from #15:\n\nI tried to install cUrl, but the package was not found and thus the install failed.\nWhen running cup all, I'm getting this:\ncurl does not appear to be on (https://go.microsoft.com/fwlink/?LinkID=206669). You have 7.21.7 installed. Interesting...\n. Awesome, thanks\nOn Fri, Oct 14, 2011 at 1:57 PM, Rob Reynolds \nreply@reply.github.comwrote:\n\n@henningc - I did log another issue for you on what you are experiencing -\nhttps://github.com/chocolatey/chocolatey/issues/16 - I also closed it with\nchocolatey 0.9.8.11 (which you can get with cup)\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/issues/10#issuecomment-2405846\n. Oops, didn't see #10 before reporting.\nSorry about the dupe.\n. done\n. \n",
    "thomasbiddle": "Just wanted to comment on this as I had the same issue. Installed ruby, went to install compass and the install failed due to PS not being sourced - exited and reopened PS, gem list showed no compass installed, cinst compass said it was already installed, cinst compass -force and all set (Or just remove from /lib).\n. Much faster. Curled a 600mb file internally from my mac within <10s - File is still downloading on Chocolatey almost 5 minutes in.\n. So far so good - Ran into a few issues - mainly from Puppet not syncing the provider in dynamic environments (Known Bug), but it's coming together. The chocolate puppet package provider seems to be giving a lot of warnings that aren't entirely legitimate it (Complaining about not being able to find a package at some source, but then it downloads it) Not sure if it's something with my ProGet setup, or the provider - But warnings aren't stopping the agent from running so I'll worry about it later during cleanup and submit a pull request if anything is changed (Thanks for putting it together by the way!). Today is mainly being spent on testing everything we've setup - So I'll have a better idea soon :-). \n. Also, why multiply by 0 to begin with?\n. Ah, gotchya. That makes more sense then. It looks like your setup works fine actually - but only for positive numbers ($_.length -le 8), then PS throws an error that you can't do that (Makes sense) - But it's wording makes it sound like it would have never have worked.\nSo the issue here is when the version number is longer than 8 characters. Have any preference on how to handle it? I feel that cutting the number short would cause confusion in the future when someone is trying to figure out why their version numbers are incorrect. So perhaps just throw an error in this case and update documentation to not do that (I was using [int][double]::Parse((Get-Date -UFormat %s)) for automated versioning on the package build prior - Switched over to SVN Revision number now, so it's not an issue for me personally at the moment)\n. Sounds good :-) I'll go ahead and close this out.\n. It still checks for $localonly - the same checks are in place so it shouldn't break any other process. Not sure what your two questions are referring to. \n. No worries :-) - By the way, as a result this sped up chocolatey provider for Puppet as well as it's using version all (Original reason why I looked into it)\n. Not expensive anymore ;-) - All applications are packaged as either Debian packages (Ubuntu) or Chocolatey packages (.NET Apps on Windows) - Using Puppet for deployment, so ensure latest is what I need. \nI'm running a ProGet repository internally. I can throw the choc feed in there as well, and I will as soon as the Ruby choc package is updated (Have two small pull requests open on it), but for now I'm hosting that internally as well with my other packages.\n. Just wanted to comment on this as I had the same issue. Installed ruby, went to install compass and the install failed due to PS not being sourced - exited and reopened PS, gem list showed no compass installed, cinst compass said it was already installed, cinst compass -force and all set (Or just remove from /lib).\n. Much faster. Curled a 600mb file internally from my mac within <10s - File is still downloading on Chocolatey almost 5 minutes in.\n. So far so good - Ran into a few issues - mainly from Puppet not syncing the provider in dynamic environments (Known Bug), but it's coming together. The chocolate puppet package provider seems to be giving a lot of warnings that aren't entirely legitimate it (Complaining about not being able to find a package at some source, but then it downloads it) Not sure if it's something with my ProGet setup, or the provider - But warnings aren't stopping the agent from running so I'll worry about it later during cleanup and submit a pull request if anything is changed (Thanks for putting it together by the way!). Today is mainly being spent on testing everything we've setup - So I'll have a better idea soon :-). \n. Also, why multiply by 0 to begin with?\n. Ah, gotchya. That makes more sense then. It looks like your setup works fine actually - but only for positive numbers ($_.length -le 8), then PS throws an error that you can't do that (Makes sense) - But it's wording makes it sound like it would have never have worked.\nSo the issue here is when the version number is longer than 8 characters. Have any preference on how to handle it? I feel that cutting the number short would cause confusion in the future when someone is trying to figure out why their version numbers are incorrect. So perhaps just throw an error in this case and update documentation to not do that (I was using [int][double]::Parse((Get-Date -UFormat %s)) for automated versioning on the package build prior - Switched over to SVN Revision number now, so it's not an issue for me personally at the moment)\n. Sounds good :-) I'll go ahead and close this out.\n. It still checks for $localonly - the same checks are in place so it shouldn't break any other process. Not sure what your two questions are referring to. \n. No worries :-) - By the way, as a result this sped up chocolatey provider for Puppet as well as it's using version all (Original reason why I looked into it)\n. Not expensive anymore ;-) - All applications are packaged as either Debian packages (Ubuntu) or Chocolatey packages (.NET Apps on Windows) - Using Puppet for deployment, so ensure latest is what I need. \nI'm running a ProGet repository internally. I can throw the choc feed in there as well, and I will as soon as the Ruby choc package is updated (Have two small pull requests open on it), but for now I'm hosting that internally as well with my other packages.\n. ",
    "pmcevoy": "When using meta packages this is quite painful.  The meta package downloads all the dependencies; one of them fails; chocolatey thinks that all of the dependencies are installed.  \nEach one needs to be \"-forced\" installed one by one when error condition is fixed.\nSemi-related to https://github.com/chocolatey/chocolatey/issues/199\n. +1 on the -includedependencies.  Had a situation today where a dependency of a meta package failed and when I fixed that (a script error in the .ps1) and I tried to force the meta package, it just said it was all installed and did nothing.\n. Hi Rob, \nThanks for quick feedback.  Here is a single session showing the nuget command to succeed, but the install all fail:\n```\nC:\\Windows\\system32>c:\\chocolatey\\chocolateyinstall\\nuget.exe list -source https://www.myget.org/F/ezetopqatest/\nUsing credentials from config. UserName: ezetopCoreDev\nbaregrep 3.50.0.20120225\nbaretail 3.50.0.20120226\n...other packages...\nUrlRewrite 2.0.2\nC:\\Windows\\system32>choco install all -source https://www.myget.org/F/ezetopqatest/\nInstalling all packages from https://www.myget.org/F/ezetopqatest/Packages/\nException calling \"DownloadString\" with \"1\" argument(s): \"The remote server returned an error: (401) Unauthorized.\"\nCommand 'install' failed (sometimes this indicates a partial failure). Additional info/packages: all\nReading environment variables from registry. Please wait... Done.\n```\n. Seems like I missed your request for the Debug output.  Here it is:\nC:\\Windows\\system32>choco install all -source https://www.myget.org/F/ezetopqatest/ -debug\nDEBUG: Running 'Append-InstallLog' with chocoInstallLog:''\nDEBUG: Arguments: $command =\n'install'|$packageNames='all'|$source='https://www.myget.org/F/ezetopqatest/'|$version=''|$allVersions=False|$InstallArguments=''|$overrideArguments=\nFalse|$force=False|$prerelease=False|$localonly=False|$verbosity=False|$debug=True|$name=''|$ignoreDependencies=False|$forceX86=False|$packageParamet\ners=''|PowerShellVersion=2.0\nDEBUG: Invoke-ChocolateyFunction is calling: $ChocoFunction='Chocolatey-Install'|@paramlist='@paramlist'\nDEBUG: Running 'Chocolatey-Install' for 'all' with source: 'https://www.myget.org/F/ezetopqatest/', version: '', installerArguments:''\nDEBUG: Running 'Chocolatey-NuGet' for all with source:'https://www.myget.org/F/ezetopqatest/'. Force? False\nDEBUG: Running install all\nDEBUG: Running 'Chocolatey-InstallAll' with source:'https://www.myget.org/F/ezetopqatest/'\nInstalling all packages from https://www.myget.org/F/ezetopqatest/Packages/\nDEBUG: Caught 'Exception calling \"DownloadString\" with \"1\" argument(s): \"The remote server returned an error: (401) Unauthorized.\"'\nException calling \"DownloadString\" with \"1\" argument(s): \"The remote server returned an error: (401) Unauthorized.\"\nCommand 'install' failed (sometimes this indicates a partial failure). Additional info/packages: all\nDEBUG: Exiting with non-zero exit code.\nReading environment variables from registry. Please wait... Done.\n. OK, thanks.  Not sure what my next step is: do you want me to fix and submit a PR?  (the PS should not be a problem, but I need to get a handle on this fandangled git/github thingy)\n. When using meta packages this is quite painful.  The meta package downloads all the dependencies; one of them fails; chocolatey thinks that all of the dependencies are installed.  \nEach one needs to be \"-forced\" installed one by one when error condition is fixed.\nSemi-related to https://github.com/chocolatey/chocolatey/issues/199\n. +1 on the -includedependencies.  Had a situation today where a dependency of a meta package failed and when I fixed that (a script error in the .ps1) and I tried to force the meta package, it just said it was all installed and did nothing.\n. Hi Rob, \nThanks for quick feedback.  Here is a single session showing the nuget command to succeed, but the install all fail:\n```\nC:\\Windows\\system32>c:\\chocolatey\\chocolateyinstall\\nuget.exe list -source https://www.myget.org/F/ezetopqatest/\nUsing credentials from config. UserName: ezetopCoreDev\nbaregrep 3.50.0.20120225\nbaretail 3.50.0.20120226\n...other packages...\nUrlRewrite 2.0.2\nC:\\Windows\\system32>choco install all -source https://www.myget.org/F/ezetopqatest/\nInstalling all packages from https://www.myget.org/F/ezetopqatest/Packages/\nException calling \"DownloadString\" with \"1\" argument(s): \"The remote server returned an error: (401) Unauthorized.\"\nCommand 'install' failed (sometimes this indicates a partial failure). Additional info/packages: all\nReading environment variables from registry. Please wait... Done.\n```\n. Seems like I missed your request for the Debug output.  Here it is:\nC:\\Windows\\system32>choco install all -source https://www.myget.org/F/ezetopqatest/ -debug\nDEBUG: Running 'Append-InstallLog' with chocoInstallLog:''\nDEBUG: Arguments: $command =\n'install'|$packageNames='all'|$source='https://www.myget.org/F/ezetopqatest/'|$version=''|$allVersions=False|$InstallArguments=''|$overrideArguments=\nFalse|$force=False|$prerelease=False|$localonly=False|$verbosity=False|$debug=True|$name=''|$ignoreDependencies=False|$forceX86=False|$packageParamet\ners=''|PowerShellVersion=2.0\nDEBUG: Invoke-ChocolateyFunction is calling: $ChocoFunction='Chocolatey-Install'|@paramlist='@paramlist'\nDEBUG: Running 'Chocolatey-Install' for 'all' with source: 'https://www.myget.org/F/ezetopqatest/', version: '', installerArguments:''\nDEBUG: Running 'Chocolatey-NuGet' for all with source:'https://www.myget.org/F/ezetopqatest/'. Force? False\nDEBUG: Running install all\nDEBUG: Running 'Chocolatey-InstallAll' with source:'https://www.myget.org/F/ezetopqatest/'\nInstalling all packages from https://www.myget.org/F/ezetopqatest/Packages/\nDEBUG: Caught 'Exception calling \"DownloadString\" with \"1\" argument(s): \"The remote server returned an error: (401) Unauthorized.\"'\nException calling \"DownloadString\" with \"1\" argument(s): \"The remote server returned an error: (401) Unauthorized.\"\nCommand 'install' failed (sometimes this indicates a partial failure). Additional info/packages: all\nDEBUG: Exiting with non-zero exit code.\nReading environment variables from registry. Please wait... Done.\n. OK, thanks.  Not sure what my next step is: do you want me to fix and submit a PR?  (the PS should not be a problem, but I need to get a handle on this fandangled git/github thingy)\n. ",
    "eatdrinksleepcode": "In what release was this fixed? I am running Chocolatey 0.9.8.23. I tried installing 7zip, but I don't have administrator rights on my machine at the moment, so it failed. But when I run \"cver all -localonly\", I see 7zip installed. Moreover, if I try to uninstall 7zip using \"cuninst 7zip\", I get the error message saying that the package has not provided an uninstallation script, and I have to uninstall it manually. But 7zip stays in the installed list, and there seems to be no way to remove it.\n. In what release was this fixed? I am running Chocolatey 0.9.8.23. I tried installing 7zip, but I don't have administrator rights on my machine at the moment, so it failed. But when I run \"cver all -localonly\", I see 7zip installed. Moreover, if I try to uninstall 7zip using \"cuninst 7zip\", I get the error message saying that the package has not provided an uninstallation script, and I have to uninstall it manually. But 7zip stays in the installed list, and there seems to be no way to remove it.\n. ",
    "mkmurray": "Yeah I just ran into this, I don't think it's fully fixed.\n. Yeah I just ran into this, I don't think it's fully fixed.\n. ",
    "staxmanade": "NICE!\n. :+1: \n. NICE!\n. :+1: \n. ",
    "zilexa": "I have tried lots of options to get this to work:\ncall C:\\ProgramData\\chocolatey\\choco install paint.net -installargs 'JPGPNGBMPEDITOR=1 TGAEDITOR=1 DESKTOPSHORTCUT=0 CHECKFORUPDATES=0'\nBut whatever I do, choco thinks the arguments are packages, as if I want to install multiple packages. I played with single and double quotes and eventually at some point managed to get the first argument to be an actual argument, but all the others are still considered packages.\n. I have tried lots of options to get this to work:\ncall C:\\ProgramData\\chocolatey\\choco install paint.net -installargs 'JPGPNGBMPEDITOR=1 TGAEDITOR=1 DESKTOPSHORTCUT=0 CHECKFORUPDATES=0'\nBut whatever I do, choco thinks the arguments are packages, as if I want to install multiple packages. I played with single and double quotes and eventually at some point managed to get the first argument to be an actual argument, but all the others are still considered packages.\n. ",
    "gep13": "@zilexa have a look here:\nhttps://github.com/chocolatey/choco/wiki/CommandsReference#how-to-pass-options--switches\nHopefully that will help.\n. There was some more discussion on this here:\nhttps://groups.google.com/forum/?fromgroups#!searchin/chocolatey/.config/chocolatey/VKm1ARnzOcg/3jQ-kX5P09sJ\nGary\n. That is great news! :-)\n. A tool has been proposed here:\nhttps://groups.google.com/forum/#!topic/chocolatey/VKm1ARnzOcg\nThat does something similar.\n. @CumpsD Is this what you are after?\nhttps://github.com/chocolatey/chocolatey/wiki/CommandsSources\n. Not a problem at all, happy to help out! :-)\n. @ferventcoder have you reviewed https://github.com/chocolatey/chocolatey/pull/542?  Seems like something we could include, but we would need some tests around it.\n. Hey,\nI am reasonably new to git, and am certainly no master when it comes to best practices, and although I follow most of what is suggested above, I would LOVE to see this written up into a wiki article that explained the why's and why not's, so that people getting started out can know the process to follow, which then makes the process of pulling in changes that much easier.\nFor instance, in all the updates lately I have been reading a lot about the desire to keep the commit history clean, and the need for doing rebases etc.  Now I \"get\" most of this, but I think it would be good if someone (i.e. someone who knows exactly what they are talking about) could describe what this means in the context of the Chocolatey project.  I understand that this could potentially be a lot of work, but I also think that it could save a lot of work when pulling in all the PR's.\nWhat do you think?\nGary\n. That is great news!\n. @ferventcoder off the top of my head, I am not sure.  I will have a look.\n. For what it is worth, I agree with Matt as well.  Contributing to this project was the first time I had ever used Pester, and I can honestly say that it was very simple to get up to speed with, and there are plenty of existing tests in the code base to use as a basis for new tests, so there really is no good reason , IMO, to not include additional unit tests.\nGary\n. Hey,\nGlad to hear that this will be of some use to you! :-)\nGary\n. This has been pulled in here:\n201ad95736b974f9ab0625362c2999eda2307408\n. Not a problem at all.  Would welcome any feedback (good or bad), it can only help me to get better :-)\n. Hey,\nMore than happy to do what ever is required, but can I ask for a bit of hand holding for this, still relatively new to git, and don't want to do anything wrong :-)\nAre you simply looking for me to rebase so that there is a single commit for the PR?  If so, could you walk me through the steps?\nThanks, much appreciated!  My experience with git to date has been as a single developer working in one branch and one remote, so I haven't yet ventured into the sort of details that you guys are now facing.\nAlso, is there something that I need to change around the asserts?  If so, happy to do this as well.\nThanks\nGary\n. Sounds easy :P\nI will let you know how i get on.\nThanks for all your help!\nGary\nSent from my Windows Phone\n\nFrom: Rich Siegelmailto:notifications@github.com\nSent: \u200e19/\u200e04/\u200e2013 21:14\nTo: chocolatey/chocolateymailto:chocolatey@noreply.github.com\nCc: Gary Ewan Parkmailto:gep13@gep13.co.uk\nSubject: Re: [chocolatey] Issue 235 - Created new Helper Function to create generic shortcut (#238)\nC:\\gitrepos\\chocolatey [branch]> git remote -v\norigin  git@github.com:rismoney/chocolatey.git (fetch)\norigin  git@github.com:rismoney/chocolatey.git (push)\nupstream        git@github.com:chocolatey/chocolatey.git (fetch)\nupstream        git@github.com:chocolatey/chocolatey.git (push)\ngit checkout master\ngit fetch upstream\ngit rebase upstream/master\nthen\ngit checkout yourbranch\ngit fetch upstream\ngit rebase upstream/master - this puts your changes on top of the current HEAD\nthen\ngit rebase -i upstream/master\neditor should be launched\nyou should see a list of all your commits, with the word pick in front.\nstarting with the second commit change the first word from pick to fixup\nrepeat for all subsequent comits\nclose editor with save\nthen\ngit commit --amend to fixup the single commit message\nthen\ngit push -f origin\nyou will then have a single commit that looks like you did it perfectly the 1st time.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/pull/238#issuecomment-16683731\n. Ok, I think I have done everything that you suggested, but I am now also a little confused.  How did it get into this pull request already?  I expected the last command that I ran, i.e:\ngit push -f origin\nTo put the rewritten commits into my forked repo, and from there I would have to update the pull request, but this seems to have happened automagically.  What gives?  Or what am I missing?\nThanks for all the help by the way, it really helped! Would have never figured that out on my own! :-)\nGary\n. Gotcha, that makes sense. Have to take my hat off to Git and Github, they really do provide a great system.  Once you get past the learning curve that is :-)\n. Due to me deleting the original branch that this PR was submitted on, I had to recreate it, as a result, the linking is broken.  However, I have recreated the PR, and pulled it in here:\n201ad95736b974f9ab0625362c2999eda2307408\n. This has been implemented here:\ne8c017ae54c5f2d37f7bdc908bb2e4cab77082d1\n. Hello staabm,\nThis would appear to be an issue with the GnuWin package, rather than chocolatey install.\nCan I suggest that you ask a question about the package on the (new) discussion forums on the package page:\nhttp://chocolatey.org/packages/GnuWin\nAnd hopefully the package creator will be able to provide some insight to the problem that you are having.\nHope that helps!\nGary\n. Due to me deleting the original branch that this PR was created on, the link has been broken.  Even though I created a new branch, with the same name, it didn't \"automagically\" work, which I didn't think that it would.  However, this has been address here:\ne8c017ae54c5f2d37f7bdc908bb2e4cab77082d1\n. This is actually a problem with the MySql package, not with chocolatey.  As such, you should really contact the package owners, which you can do from the contact owners link here:\nhttp://chocolatey.org/packages/mysql\nThis particular issue, I believe, is due to a dependency on the C++ Redistributable.  If you try running the mysql installer directly, it tells you about this.\nThe required dependency is actually another chocolatey package, which you can go ahead an install.\nGary\n. Hello,\nAs per your other issue, your best bet would be to contact the package owner directly, which you can do from this link:\nhttp://chocolatey.org/packages/redis\nGary\n. Should we add a task, somewhere, to get the documentation updated to reflect this change, or where do things like that get logged so they are not forgotten?\n. Any word on when a new release of choco is going to be pushed out, to include changes like this?\nThanks\nGary\n. Cool, happy to beta test if you need people to give it a try.\nYeah, never tried installing a \"hooky\" version of chocolatey yet, always installed the proper version.  There is nothing immediately pressing.  I know Matt has made a couple of changes that are interesting, but happy to wait, was just curious :-)\n. rismoney, sorry, that wasn't in anyway a slight at you, or anyone, sorry if it came across like that!  All I meant was, if I install something like chocolatey on my own machine, I want to install the fully released version, not a pre-release version, therefore I wouldn't install the source code version.  As a result, I am willing to wait for the new features for my main machines, but can fire up a VM for testing purposes.  The term \"hooky\" probably wasn't the best in this case.  Apologies.\nmwrock, that would be great.  We are using MyGet for the ChocolateyGUI and it does a great job!\n. Ah, gotcha.  :-)\nI have only touched the surface of Pester, mainly due to Matt's blog posts, but it really is very clever!\n. Is that a new repo?  This link doesn't seem to work for me :-(\n. Just in case you didn't see the other part of the conversation Paul, the Puppet Chocolatey module may not fully work properly (i.e. for validating installed version of a choco package) until the other pull request for completing exit codes is pulled into master and a new version of Chocolatey is released.\n. oh yeah, I know, I have been following, just wanted to let Paul know, who I think is going to be using the Puppet Module in anger, that he may see some issues, until the next release is pushed out. :-)\n. To try to help out, I have added a pull request to try to cover this issue.  Not sure if it covers everything that would be required, but it does add a Unit Test to cover this scenario.  Would be interested to hear thoughts on what I have suggested.  Thanks!\n. Going to go ahead an close this issue.  I will do another pull request with correct line feeds, etc.\n. Woot ;-)\n. Woo hoo!  What is the \"done\" thing now?  Should I delete the branch on my fork?  Or should I leave it.\nThanks\nGary\n. Okay dokay :-)\n. Just putting in my 2p worth,...\nIs it worth supporting Server Core?  There is only going to be a small subset of chocolatey packages that are going to work on Core, with a high number of them simply not going to install at all.  How would we make it such that this was clear across all packages, so the inevitable \"It doesn't work\" issues don't crop up.\nGary\n. Yip, this makes sense, just wanted to make sure that we weren't going down a route that didn't make any sense.\nYeah, it's SharpZipLIb that is the \"standard\" library that is used in-house.\n. Sure, I can take a look at this one.  I am away this weekend, but I can take a look at it after that :-)\n. Hey,\nJust a thought, if this is going to go ahead, I would suggest that the documentation at the top of the Install-ChocolateyInstallPackage.ps1 file should be updated to make it clear that it is not just msi and exe, but also for an msu.\nThoughts?\nGary\n. I think that this would definitely make sense to be included in the wiki, \"somewhere\".  I have on my todo list to do a complete write up of \"How to contribute to the Chocolatey Project\", i.e. fork the source code, create a branch, do your work, run the Pester Tests, Write new Pester Tests, commit code, do pull request etc, but again, never seem to get the cycles to do it.\n. Is there not already a chocolatey puppet module?  I have it on my todo list to have a look at it, as I am just getting into puppet, but I had assumed that this would already be taken care of there.\nGary\n. Ah, I see.  I am still working with straight up package, file, and services in my puppet manifests just now, but I will be looking to extend into using Chocolatey as well.  Look forward to giving it a try.\n. @zippy1981 are you in a position to clean up this PR by rebasing on the current master?  If not, I can submit a new PR with similar functionality? Thanks!\n. @ferventcoder did you follow up with @macioosch about this?\nAre you happy for this to be pulled in?\n. @ferventcoder do we keep the most recent logos somewhere?\n. Perfect, thank you!\nGary\nSent from Windows Mail\nFrom: Rob Reynolds\nSent: \u200eTuesday\u200e, \u200e25\u200e \u200eNovember\u200e \u200e2014 \u200e15\u200e:\u200e16\nTo: chocolatey/chocolatey\nCc: Gary Park\nLocal...let me set up a repo with the logos. \nOn Tuesday, November 25, 2014, Gary Ewan Park notifications@github.com \nwrote: \n\n@ferventcoder https://github.com/ferventcoder do we keep the most \nrecent logos somewhere? \n\u2014 \nReply to this email directly or view it on GitHub \nhttps://github.com/chocolatey/chocolatey/pull/284#issuecomment-64318061. \n\n\nRob \n\"Be passionate in all you do\" \nhttp://devlicio.us/blogs/rob_reynolds \nhttp://ferventcoder.com \nhttp://twitter.com/ferventcoder \n\u2014\nReply to this email directly or view it on GitHub.\n. For EXE's, I use this helper command as per here:\nhttps://github.com/chocolatey/chocolatey-coreteampackages/blob/master/feeddemon/tools/chocolateyUninstall.ps1\nFor MSI's, I typically do something like his:\nhttps://github.com/chocolatey/chocolatey-coreteampackages/blob/master/calibre/tools/chocolateyUninstall.ps1\nGary\n. @ferventcoder This is a known issue, that I need to figure out.  Some testing required here.\n. I really think that this is a good idea!  The only concern that I would have would be keeping what is in the \"help\" in source, in sync with the \"help\" on the wiki.  I mentioned this to @mwrock in a previous commit that I saw him doing where he had to manually update a synopsis on the wiki to match a change to the synopsis in the code.  Is there any way to have \"one source of truth\", i.e. that we store the help documentation and synopsis information in one place, e.g. in the source code repo, and then flow this through into the wiki.  That way you update once, and it is correct in both places?\nJust a thought...\n. Hmm, that isn't bad actually, and not unlike other systems, for instance, PowerShell itself with it's Update-Help option.  Would it make sense to use the wiki as the \"one source of truth\" and then have Chocolatey download and cache the help files locally?\nThoughts?\n. @rismoney The more I think about this, the more I like it.  Will add it to my ever growing list of things to look into :-)\n. As an experiment, i think it would be good to know that we can load a file from file system and render as help text when requested. I don't see why we couldn't do this though.\nBut yes, i think for now, that is the plan.\nGary\nSent from my Windows Phone\n\nFrom: corkupinemailto:notifications@github.com\nSent: \u200e07/\u200e05/\u200e2013 02:07\nTo: chocolatey/chocolateymailto:chocolatey@noreply.github.com\nCc: Gary Ewan Parkmailto:gep13@gep13.co.uk\nSubject: Re: [chocolatey] WIP - help refactor (#288)\nSo what do you think I keep going in the same direction for now? It's close to the git model, will be an improvement, and you can consider caching wiki pages and rendering markdown in the console later ;)\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/pull/288#issuecomment-17517808\n. Or, as a half way house, how about the following...\nContinue with what you are currently doing, but rather than put the help documentation directly in the PowerShell script, move it into a separate file, one file for each method. Then, when requested, read that line, and display to user.\nWith that in place, we can then look to update those files, based on what is in the wiki, using something like a Update-Help method.\nThoughts?\nSent from my Windows Phone\n\nFrom: corkupinemailto:notifications@github.com\nSent: \u200e07/\u200e05/\u200e2013 02:07\nTo: chocolatey/chocolateymailto:chocolatey@noreply.github.com\nCc: Gary Ewan Parkmailto:gep13@gep13.co.uk\nSubject: Re: [chocolatey] WIP - help refactor (#288)\nSo what do you think I keep going in the same direction for now? It's close to the git model, will be an improvement, and you can consider caching wiki pages and rendering markdown in the console later ;)\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/pull/288#issuecomment-17517808\n. @ferventcoder I guess this relies on you being a stand up, all around good guy! Oh, wait... :-)\nI think this should be for any edit on the comment, regardless of who made the edit.\n. What about something like:\nHelp-<Function Name>.txt\ni.e.\nHelp-Chocolatey-Install.txt\n. Ah, I see what you are getting at. My bad!\n. Hello,\nI have just checked the Chocolatey Source Code, and the Stop-OnAppIsInstalled is not part of the code case, so this must be a method that the package owner expects to already be available in the system.\nI think the best course of action would be for you to contact the package owner directly:\nYou can do that by clicking the Contact Owners link here:\nhttp://chocolatey.org/packages/Devbox-ConEmu\nHope that helps!\nGary\n. When you said:\n\"I'm creating a package that runs a service\"\nI take it you mean a windows service?  If so, how are you creating the service in the first place?  Are you using something like WiX?  If so, you can put the responsibility for stoppping/starting this service into the hands of the installation package, i.e. the MSI, and not worry about this within the chocolatey package.\nGary\n. Rob, what are your thoughts on this?  Does it make sense to add this functionality into another helper method, such as InstallChocolateyPowerShellPath?  There is an existing helper method for a generic environment variable: https://github.com/chocolatey/chocolatey/wiki/HelpersInstallChocolateyEnvironmentVariable but if it makes sense to split out the PowerShell Module Path, happy to take a stab at implementing this.\n. What version of PowerShell are you running?  And have you installed the Web PI Commandline? (cinst webpicommandline).\nThe reason that I ask is that this worked for me:\n\n. Looks like there is an issue though, in that this should be handled more gracefully, and not just disappear, but if we can trace the problem, we can work on a solution :-)\n. Ah, my test was on a Windows 7 machine :-)  Will do a test on a Windows 8 machine as well.\n. Hmmm...\nJust tried again on my Windows 8 machine, and I get the same results as in the above screenshot.\nWhat happens if you try running the following:\ncmd.exe /c webpicmd /List /ListOption:All\nThis is what Chocolatey is doing under the hood for you.\nGary\n. Doh! That is the flag I was looking for! I was trying with -verbose, and that wasn't doing anything :-)\n. Ah, that makes sense :-)\nI have a potential fix, namely:\nif ($source -like 'webpi') {\n$chocoInstallLog = Join-Path $nugetChocolateyPath 'chocolateyWebPiInstall.log';\nRemove-LastInstallLog $chocoInstallLog\n$webpiArgs =\"/c webpicmd /List /ListOption:All | Tee-Object -FilePath `'$chocoInstallLog`';\"\nStart-ChocolateyProcessAsAdmin \"cmd.exe $webpiArgs\" -nosleep\nCreate-InstallLogIfNotExists $chocoInstallLog\n$installOutput = Get-Content $chocoInstallLog -Encoding Ascii\nforeach ($line in $installOutput) {\n  Write-Host $line\n}\nWhich does the same thing as the Windows Feature equivalent, but it makes the command VERY slow to execute.  Should I go ahead and make a PR to add this in?  Or wait for another solution?\nGary\n. Just tried the latest webpi cli and looks like it requires admin privileges as well :-(\n. When you mention hosting packages elsewhere, when they are not intended for everyone, is it worth mentioning somewhere like MyGet.org? i.e. The package can still be on a public feed, but not polluting the Chocolatey.org feed?\nGary\n. @Redsandro You are right, my command is directed here:\nhttps://github.com/chocolatey/chocolatey/issues/355\nSorry :)\n. An out there suggestion, but...\nCan we create a choco package that configuring this as a default in the common editors? Assuming that these settings are exposed somewhere, it should be trivial to check whether an editor is installed, and make the update.\nJob done!\n. Agreed, if we could wrap this up in cpack to the point that this was a non-issue, that would be best for everyone.  Would the act of cpack result in changes to the physical file?  i.e. if someone is using source control, (and obviously they shoudl be) would they be left with the \"correct encoding on the file?  If so, should cpack throw a message back to indicate what was done, adn why?\n. Would it be worth creating another command that could be used ahead of cpack?  A dedicated function for doing just this?\nThe only problem with this is that it would be down to the user to run the command, and to know to run the command, which takes us back to the same problem.\nThe only other suggestion would be to add an \u201cautomatic moderation\u201d step, post upload to the chocolatey servers.  Almost synonymous with a compilation, where we do all the necessary work, in this case the encoding, before setting the package live.\n. From the link posted above:\n\nIf you don\u2019t respect this rule, some characters are not displayed correctly in the Gallery on Chocolatey.org, because the Gallery assumes UTF-8.\n. Perhaps the wiki needs to be refined, but my understanding is that the problem is exactly as stated in the latter part of the quote.  If you don't do what is described here, then characters are rendered incorrectly when pushed to the Chocolatey Gallery.  @TomOne will be able to provide more information on this, as my understanding on this issue is slim, at best.\n. This is great news if it is fixed, as it will ease some of the stricter requirements.  Would be great to get @TomOne who originally raised the issue to confirm that everything is now working as expected.\n. I \"think\" this might be an issue with the package itself, no? Where a call to Write-Success is called twice. Nit at my computer just now, but will try to check the chocolatey package for this application later today to confirm.\n. Doesn't look like this is a package problem.  The choco package has the following:\n\n```\ntry { \n  Install-ChocolateyPackage 'markpad' 'msi' '/quiet /norestart' 'https://github.com/downloads/Code52/DownmarkerWPF/MarkPad.v0.9.0.1.msi'\nWrite-ChocolateySuccess 'markpad'\n} catch {\n  Write-ChocolateyFailure 'markpad' \"$($_.Exception.Message)\"\n  throw \n}\n```\nGary\n. Gotcha.\nNo, this one not owned by you, but i will contact package owners later tonight and let them know if you want?\nSent from my Windows Phone\n\nFrom: Rob Reynoldsmailto:notifications@github.com\nSent: \u200e17/\u200e06/\u200e2013 16:08\nTo: chocolatey/chocolateymailto:chocolatey@noreply.github.com\nCc: Gary Ewan Parkmailto:gep13@gep13.co.uk\nSubject: Re: [chocolatey] Duplicate logging (#300)\nIt's wrapping a try catch around one of the big four (it's no longer just\nthree), which already has error handling and everything built into it. See\nhttps://github.com/chocolatey/chocolatey/wiki/HelpersReference\nThis pkg script can be cut to one line. Is this one that I own?\nOn Monday, June 17, 2013, Gary Ewan Park wrote:\n\nDoesn't look like this is a package problem. The choco package has the\nfollowing:\ntry {\n  Install-ChocolateyPackage 'markpad' 'msi' '/quiet /norestart' 'https://github.com/downloads/Code52/DownmarkerWPF/MarkPad.v0.9.0.1.msi'\nWrite-ChocolateySuccess 'markpad'\n} catch {\n  Write-ChocolateyFailure 'markpad' \"$($_.Exception.Message)\"\n  throw\n}\nGary\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/300#issuecomment-19546394\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/issues/300#issuecomment-19551258\n. Done :-)\n. @SimonCropp although I contacted the package maintainers, it doesn't look like the package was updated, so you will still see this issue.  But yeah, this issue I think can be closed.  Thanks\nDon't know if @maartenba or @JakeGinnivan have got any plans to change it or not.  Guys?\n. Strange! I used the Contact Maintainers link on the Chooclatey site.  Perhaps it ended up in junk folder.  Thanks for getting the package updated though, much appreciated!\n. At present, almost all packages are maintained by the community. There are just too many packages for this to be done by Chocolatey itself, we need the help of the community. However, as is always the case, life sometimes gets in the way, and packages become outdated. At this point, you have done the right thing by trying to reach out to the original author.  If this doesn't work, then the best idea would be to take the current package source code (if available) fork it, make the updates, and then push to Chocolatey. In order for this to happen, you would need to be made a co-owner of the package, which can be done. This is much preferable than creating a duplicate package.\nGary\nSent from my Windows Phone\n\nFrom: Roger Qiumailto:notifications@github.com\nSent: \u200e29/\u200e06/\u200e2013 09:30\nTo: chocolatey/chocolateymailto:chocolatey@noreply.github.com\nSubject: [chocolatey] Updating old packages that are not maintained on Chocolatey (#308)\nHow do I go about updating a package that isn't maintained by the author in Chocolatey. For example, papercut is the 2010 version on Chocolatey (which I installed), but I want the 2013 version that is available directly. Do I have to create my own package? There should be an easier process to keep up to date.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/issues/308\n. Rich,\nI guess what I was referring to there was the github repo for the package.  It would be easier to fork this code and create a pull request, rather than to re-invent the wheel and extract the files yourself to put them somewhere else.\nGary\n. Good catch :)\nI have updated the wiki article with the additional quotes.  Can you check and verify, and it you are happy with it, we can close off this issue.\nThanks\nGary\n. Yip, I think so.\n. I guess I am on the fence with this one.\nI see the benefit in using Chocolatey to install Node and NPM, but once installed, why would I use choco install gulp-imagemin -source npm, when I could just as easily do npm install gulp-imagemin.  Now, don't get me wrong, the same could be said about installing ruby gems, but I think I am on the fence about this as well.\nOther things like webpi, windowsfeatures, vsix, etc, make perfect sense to me.  This, not so much.  Happy to be persuaded otherwise though.\n. With regard to the personal packages, I would like to see these moved off the main chocolatey feed onto a Community Chocolatey Feed on MyGet.Org, or encourage people to create their own MyGet feeds to store the packages.\n. Does the Chocolatey Gallery, which comes from the Nuget Gallery, provide a lot of moderation capabilities?  Or is this something that will have to be built in?\n. This is very cool! :-)\n. I really think that we can start to use this as a starter for ten.  If nothing else, I think I am going to try to lever this for the packages that I maintain, and also at work (assuming you don't mind that is :-))\n. Would this be a case of executing some checks during the cpack command, and then have it fail if something goes wrong, or would this be done on the Chocolatey.org server once the package has been uploaded to the server? Or both?\n. The validation is the tricky part though.  For instance, in a recent package there was a sneaky addition of an Google and Google Tooblar:\nhttp://chocolatey.org/packages/avastfreeantivirus\nWhatever system we create needs to handle, somehow, the checking of unwanted uninstallations.  I was discussing this with Rob earlier this week.  This could be done, if possible, by taking a snapshot of the registry before and after the install (say with regshot) and also doing a diff of the file system (a harder thing to achieve) and checking for things that shouldn't be there.  If anything else does appear, this would flag the package as rogue, and need further manual validation.\nGary\n. side note... @mwrock wrt to that script block, which looks amazing, do those names assume that a Hyper-V VM exists with that name?  If it is not there, what does it do? I think you mentioned before that the VM would be created, but how does it know which iso to use when creating it?\n. Also, I love the idea of BoxStarter being used to validate Chocolatey Packages!  :-)  Talk about dog fooding!  If the Azure support lands, would it be within the realm of legality to use an MSDN Subscription for spinning up VM's, even as a Proof of Concept?  Happy to put my MSDN Sub to use for this if it is allowed.  The credits aren't being used for anything else just now.\n. Sweet, sounds like you have it all wrapped up! Is this your sole project just now, features seem to be coming thick and fast :-)\n. Ah, I see, that makes a bit more sense.  Based on what you had been pushing, I figured you hadn't slept in the last month! :-) Nightware, hopefully you can get it sorted out soon.  Look forward to checking it out!\n. I was having the same thought. I wondered whether the choco update package could be extended to include a flag to run the package through Boxstarter, and have it report back on success or failure. What do you think @mwrock\n. There is a .Net Class for SemVer in the nuget code base, I wonder if we could re-use that.\nSent from my Windows Phone\n\nFrom: Rich Siegelmailto:notifications@github.com\nSent: \u200e25/\u200e10/\u200e2013 02:04\nTo: chocolatey/chocolateymailto:chocolatey@noreply.github.com\nSubject: Re: [chocolatey] Support for version pattern matching (for installing, updating, and specifying dependencies) (#346)\nagree with you ferventcoder- that was my understanding.\ni think its a metric s-ton of a parsing exercise that probably needs to start with TDD via pester, and make each use case pass... just looking at this readme https://github.com/isaacs/node-semver made my head hurt.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/issues/346#issuecomment-27047579\n. Hello,\nAre you running the pre release version of chocolatey?  I believe that this is taken care of already.\nTry cup chocolatey -pre to try out the new bits.\nGary\nSent from my Windows Phone\n\nFrom: Glenn Blockmailto:notifications@github.com\nSent: \u200e13/\u200e10/\u200e2013 23:38\nTo: chocolatey/chocolateymailto:chocolatey@noreply.github.com\nSubject: [chocolatey] Remove the reopen the terminal when installing (#350)\nCurrently whenever I install with chocolatey I need to reopen my terminal windows, as it adds a new variable to the path.\nnpm doesn't require this as it has a central folder which is in the path which cmd files are added to for each global module. uninstalling removes the cmd from that location.\nthe cmd in this case would change to the directory where the chocolatey app is installed and run it passing in any args.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/issues/350\n. Welcome to the Chocolatey Alpha Testing program! :-)\nLet us know how you get on, and whether the current functionality in the alpha release works and is what you expect.  If so, we can go ahead and get this issue closed.\nThanks\nGary\n. When you say \"Only post publicly relevant packages\" I think this makes a lot of sense.  There are a number of packages on the Chocolatey.org feed that are not relevant to everyone.  Personally, I would like to see certain packages hosted on \"another\" public feed, which is not the Chocolatey.org feed.  For this type of thing, I would suggest that people use MyGet.org, where they create their own feed that people can consume packages from using the -source flag.\nGary\n. Happy to help out where I can.\nSent from my Windows Phone\n\nFrom: Rob Reynoldsmailto:notifications@github.com\nSent: \u200e26/\u200e10/\u200e2013 21:49\nTo: chocolatey/chocolateymailto:chocolatey@noreply.github.com\nCc: Gary Ewan Parkmailto:gep13@gep13.co.uk\nSubject: Re: [chocolatey] Wiki - Suggested rules edit (#355)\nModeration will fix quite a bit of the issues as long as moderators are all\non the same page. I'll need a nice team of folks who can help with the\nduties of package moderation.\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\nOn Sat, Oct 26, 2013 at 3:44 PM, TomOne notifications@github.com wrote:\n\n@Redsandro https://github.com/Redsandro, actually only .portable and\n.install are official suffixes. The are essential to understand what the\npackage contains. I suggested them a few months ago and they were accepted.\nThe other suffixes are deprecated, but obviously older packages still use\nthem. And there are still folks which ignore the rules and guidelines in\nthe wiki and use the deprecated suffixes. This problem will never be solved\nuntil chocolatey packages get inspected by moderators before they get\npublished.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/355#issuecomment-27155409\n.\n\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/issues/355#issuecomment-27155491\n. The example that made this \"click\" for me, in terms of \"virtual packages\" is PDF's.  Lets say you are creating a package that has a dependency on being able to read PDF Documents.  You could point this at a virtual package called PDF Reader, and this in turn would point at something like Adode Reader, Sunatra Reader (either the install, or portable), Foxit Reader, or any other package that can read PDF's.  As long as one of these things is installed, then the dependency for your package has been met, and installation can continue.\n. Hey,\nFor development purposes, there is a PowerShell script which allows you to side load a compiled application, but I don't think that the would work for app directly from the store.\nIn the Windows Phone eco system, there is an application that you can install that will run off and install all applications that you used to have on your phone. This is really useful for installing all apps when you get a new phone. Would be interesting to see how this was done, to see if something similar is possible in Windows 8, and 8.1.\nGiven the sandboxing of applications that Microsoft is trying to achieve, I can see that this might be a non starter.\nGary\nSent from my Windows Phone\n\nFrom: Redsandromailto:notifications@github.com\nSent: \u200e26/\u200e10/\u200e2013 18:26\nTo: chocolatey/chocolateymailto:chocolatey@noreply.github.com\nSubject: [chocolatey] Package/install stuff from the Windows Store (#356)\nMore and more interesting stuff is available for the Metro tile interface for Windows 8 in the Windows Store. For instance Netflix, to name a popular one.\nIs it at all possible to install apps from the Windows Store using power script? If so, maybe this should be a template or Chocolatey function.\nI have no clue at all how this works under the hood, but you need to be logged in with your Windows Live ID to be able to install apps. So the script would probably need to check if you are logged in.\nBut, this is of course total bull*, MS just wants to keep track of things. Apps can run perfectly fine without knowing who is running it. So it would be totally super awesome sweet if we could actually install apps for users without a Live ID.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/issues/356\n. We are in the process of creating a new alpha/beta release where this issue will be corrected.  If you want to get the latest version to run locally, you can download the source code and use that, however, this is done so at your own risk and may be subject to other issues.\n. @ferventcoder will correct me if I am wrong, but I think this is in the latest alpha release.\nTry\ncup chocolatey -pre\nGary\n. If we are going to say see the log for details, then I think we should include where the log file is located, or have a Read-Host, or something, asking if you want to open the log file.\n. By the way, I really like the suggestion for the new, trimmed, output.\n. @mwrock is this the way Boxstarter currently does it? Can you link to a specific example?\n@redsandro all valid points :-)\n. What is being described here sounds to me like a Chocolatey.Contrib project, which is where the helper module would like.  This could then be a standalone package that people can take a dependency on.\nThoughts?\n. I am going to say .Net 4.0:\n\n. Hmmm, I for one actually like the search box having focus by default.\n. Hello,\nThanks for reporting this.  This actually sounds like an issue with chocolatey.org, rather than with Chocolatey.\nCan I get you to raise this issue here:\nhttps://github.com/chocolatey/chocolatey.org/issues/new\nThanks\nGary\n. @Haacked can you add anything to what might have been going on here? Cheers!\n. @ferventcoder this week has been mental, so not had any time to look into this at all yet.  Hoping to get some time at the weekend to take care of this though.  Sorry!\n. Hello,\nBy executing the following:\nchoco\nYou will get an output similar to the following:\nPlease run chocolatey /? or chocolatey help - chocolatey v0.9.8.23\nFrom which you can get the current installed version of Chocolatey.\nHope that helps!\nGary\n. Yeah, I saw this:\nhttps://groups.google.com/forum/#!topic/chocolatey/3RJ-9pCGXyA\nAfter I read this enhancement request.  I guess I work in a different order :-)\n. What version of Chocolatey are you using?  Is Chocolatey already installed on the machine when you run the build on the TeamCity Build Agent, or are you installing it as part of the build?\n. On the Build Agent, open PowerShell and type\nchoco\nThis will output the current version number.\nSo, to confirm, although you have chocolatey installed on the Build Agent, you are running the Chocolatey installation script again as part of the TeamCity build, is that correct?\nIf so, then I think this is the issue.  There is a known issue in 0.9.8.23 where after installing, you have to close and re-open the PowerShell window before running a cinst, otherwise, you get the issue you are seeing.  Can you try taking out the Chocolatey install script just now?\nThis issue is fixed, and will be included in the next release.\n. Glad to hear that you got it working! :+1: \n. I suspect that this pull request got closed because you wrote \"Fixes #421\" in the commit message.  Due to the fact that when you fork a repo references to the issues remain pointing at the parent repo, it had the effect of closing the PR (and you were allowed to do this since you opened it in the first place).\n. @Redsandro it has happened to me on another repo, and I tried to dig up the example, but I think it has gone away, since they \"broke\" the connection with the upstream fork, thus creating their own set of issues.\n. If you can make these packages into auto packages, there is nothing to stop you adding them into here:\nhttps://github.com/chocolatey/chocolatey-coreteampackages\nAnd then the Community Server that I have running in the cloud will automagically check for new versions every hour, and cpack and cpush onto Chocolatey.org.\nThe more packages that we have out in this repo, the better, imo :-)\n. @Redsandro I \"think\", and Rob can correct me if I am wrong, but the CoreTeamPackages folder has changed in meaning slightly.  Originally, I believe it was only for packages that would be maintained by the core Chocolatey Team Members, and they could be packages that would have a quick SLA, in terms of getting packages out into the wild.  Now, at least as far as I am concerned, it is really aimed at a core repository for Chocolatey Packages, that are updated frequently (using the server that I have provided) and which will all, eventually, go through an automatic triage process to ensure for validity before being pushed to chocolatey.org.  Personally, I would like to see all the auto packages that are already out there, from core team members, and elsewhere, being combined into this one single repository.  I don't see this becoming a heap, but rather a maintained central repository, which is then much easier to triage with automatic processes that we can put in place.\nI know what you mean about the auto package process, it took me a while to get my head around it.  If you want to get onto the server in the cloud to take a look at what I am doing, just give me a shout.\n. @Redsandro yeah, I think I have read that thread before.  Hoping that this still isn't the case, as some of the packages I have pushed into there are certainly not critical :-)\n. Anyone can create and push auto packages, there is no implicit need for the chocolatey user to be involved.  However, any packages that make it into the coreteam repo would need to have the chocolatey user as a co-maintainer.\nRight now for the setup I have, I have it set up that both me and the chocolatey user can push each package.  However, on the server that I am using, keratin is essentially running under the chocolatey user, so when it automatically finds a new installation package on the interwebs, it pushes as the chocolatey user.  \nSo no, don't add me, add the chocolatey user.\n. That's the one.  From the main https://chocolatey.org/ page, the forum link takes you to the Google Group.\nWe should perhaps update the Contributing.md if this is not clear in there.\n. Done:\nhttps://github.com/chocolatey/chocolatey/issues/424\n. Random question, but what is the GH prefix on the issue number?  And how is it still linking through to the actual issue?\n. Cool thanks, I didn't know about that :-)\n. I really like this addition! Is this something you are planning on adding to the auto choco updating tool as well?\nSent from my Windows Phone\n\nFrom: Rob Reynoldsmailto:notifications@github.com\nSent: \u200e01/\u200e03/\u200e2014 14:25\nTo: chocolatey/chocolateymailto:chocolatey@noreply.github.com\nSubject: Re: [chocolatey] [Enhancement] CheckSum downloaded files (#427)\nNow this is good.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/issues/427#issuecomment-36425893\n. @ferventcoder I am just spitballing here, but does the implementation of this feature give us the \"complete offline install\"?  Assuming you have already run all the installations once on one machine, and you can transport the cache folder to another machine, you would then be in a position to run all the installs again on that other machine without the need to go off to the internet, right?  Or was this part of your cunning plan all along? :-)\n. This has been implemented here:\n7d40f57a00462f6053618dd5ec6dd1d7cd5f7c22\n. While I like the idea of re-directing to a different URL when required, I am wondering what the exact use case is for this.  Does the recent work that @ferventcoder did to first check the download cache to see if a file is already downloaded, before accessing the URL in the nuspec file cover a lot of the use cases?  How I was planning on using it was the following...\nOn one machine that has access to the interwebs, install all the packages that you need.  Mirror the Chocolatey Packages that you want to somewhere internal, i.e. ProGet, or a file source.  Deploy the Cache folder from the interwebs facing machine onto all other machines.  Perform all installs on other machines using -source parameter, and you have a full offline install.\nGranted, there is a bit of work up front to make this happen, but once you do it once, it's done.\nWhat is the use case of the URL re-direct?  Is it required now that Chocolatey first checks whether the required file has already been downloaded?\n. @jberezanski agree, returning a PSObject, which can be inspected (and easily extended if required) definitely makes a lot of sense.\n. For what it is worth, I would say just go for it.  Don't think @ferventcoder will have a problem with it.\nThanks for digging into this!\n. @Haacked has something changed on Github's side that would cause this problem to happen?\n. @Haacked  Ah, could be.  If nothing else, we have exposed a problem that @mwrock has been able to work around.  Thanks for getting back to me.  I will subscribe to the blog for future updates.\n. Hello,\nThis sounds like a known issue.  Have you just installed Chocolatey? If so, can you try closing and re-opening the Powershell window and try again?\nGary\n. @ferventcoder I don't have an issue with this.  Thoughts?\n. @nemchik There is a Chocolatey Helper method that should help you in persisting the change to the environment variable:\nhttps://github.com/chocolatey/chocolatey/wiki/HelpersInstallChocolateyEnvironmentVariable\nOr, if you want to do it yourself, you can find an example here:\nhttps://github.com/gep13/ChocolateyPackages/blob/master/gep13.ChocolateyDev/tools/ChocolateyInstall.ps1#L42\n. @jamesgecko You don't \"have\" to change the Environment Variables through the command line, you can use standard Windows functionality to change the environment variables.  I do agree though that we need to put up a page, somewhere, to make it clear all the steps that should be executed.\n. Sweet! I will take a read of it, and make some updates if required.  Thanks for doing this, it is much appreciated! :+1:\n. @Redsandro I believe I am right in saying that this was an attempt to provide \"one source of truth\" for the documentation for the wiki.  Currently, we document a helper method in two places.  In the ps1 file and also in markdown in the wiki.  This is currently done as a manual task, and subject to human error, and becoming out of date.\nThis PR was an attempt to generate the markdown for the wiki directly from the help documentation in the ps1 files, so at the very least, they were the same, and we only have to update it in one place, i.e. the ps1 files, and then simply update the wiki articles with this helper.\n. @NJ-Brad Glad to hear that you got this sorted out, and thanks for coming back and closing out the issue.  \nHappy choco'ing :-)\nGary\n. @rappazzo you can find a link to contact the maintainers of this package on this page here:\nhttp://chocolatey.org/packages/eclipse-standard-kepler\nHopefully you will hear something back from them, but if you don't can you please follow the package triage process outlined here:\nhttps://github.com/chocolatey/chocolatey/wiki/PackageTriageProcess\nTo try to get the problem resolved.\nThanks\nGary\n. The suggestion here is really a feature request, to include a generic helper method for wrapping calls to 7zip, which is capable of handling multiple file types, not just .zip.\n. I was looking for a label to assign to the issue, i.e. Feature, but I didn't see one.  Never thought to update the title.  Will remember for next time :+1: \n. @030 Not all the functions in Chocolatey have Unit Tests, and it looks like this could be one of the areas that it hasn't been included.  If you can, we would more than happily accept some unit tests for this function.\n. @ferventcoder based on the change of usage of the function, do we need to think about changing the name of the function, or at least creating an alias for it?  Install-ChocolateyZipPackage, by it's name, suggests it will only work with Zip files.  Would a name like Install-ChocolateyCompressedPackage make more sense?\n. Yeah, that works too.\n. @jberezanski oops! My bad! :-)  Good catch!\n. Hey,\nIn order to get code added to the codebase, you would need to submit a pull request.\nHave a look here:\nhttps://github.com/chocolatey/chocolatey/blob/master/CONTRIBUTING.md\nFor the process, and let us know if you have any questions.\nGary\n. Hey,\nNo probs.  The mailing list is hosted in a Google Group which you can find here:\nhttps://groups.google.com/forum/#!forum/chocolatey\nGary\n. Hey,\nSince this is your first post to the forum, it was sitting in the moderation queue.  I have just approved it, so you should see it now.\nGary\n. Hello,\nHave you read through this:\nhttps://github.com/chocolatey/chocolatey/blob/master/CONTRIBUTING.md\nThis is the process that we follow for accepting contributions to Chocolatey.  You would need to make the changes, and then submit the changes in the form of a Pull Request.\nGary\n. Looks like you are using version 2.0.1 of Pester.  As per the setup script here:\nhttps://github.com/chocolatey/chocolatey/blob/master/setup.ps1\nAnd also the discussion here:\nhttps://groups.google.com/forum/#!topic/chocolatey/9oQwi0-z3K0/discussion\nChocolatey needs version 2.0.2 of Pester.\nCan you try installing this version, and let us know how you get on?\n. Linqpad actually comes in two versions.  The original version \"choco install linqpad\" which installs a version that targets .Net Framework 3.5, and another one \"choco install linqpad4\" which targets .Net Framework 4.0/4.5.  As a result, they are two separate packages, and there isn't an \"upgrade\" path.\n. In this case, triaging is referring to checking the pull request, for suitability, problems, additional suggestions, etc.  This is the first pass at getting the pull request pulled into the main code base of Chocolatey.  This is a good thing :-)\nYou will hear from Rob if there are any changes that need to be made.\n. @vbsql7 can you confirm what version of Chocolatey you are using?  I have just done the following, using 0.9.8.28\n- Download the nupkg package from https://bitbucket.org/jonforums/uru/downloads/uru.0.7.7.nupkg\n- Saved it to c:\\temp\n- Executed the following command choco install uru -source c:\\temp\n- Installation succeeded successfully\n- I can see a new uru.bat and uru.ps1 file created in the chocolatey bin folder\n. > This could be the issue of just installing chocolatey and not having that\n\nvariable set\n\nAgreed, I had assumed that based on the title of this bug that closing and re-opening the shell after a fresh install of Chocolatey had been ruled out by @vbsql7.  I had thought it might be an error in the package itself, but after attempting the install on a clean VM myself, that didn't seem to be the case.\n. Glad to hear you got it working! :smile_cat: \n. Hello,\nWhen you installed Chocolatey 0.9.8.25, did you already have a Chocolatey version installed?  Or was this a fresh install?\nDoes this path:\nC:\\ProgramData\\chocolatey\nExist on your file system?\nGary\n. Hey,\nNope, no breaking of issue etiquette, we are not fussy :-)  Happy to hear from you, and to know that you are using Chocolatey.  The only thing that I would say is that this is really an issue with Chocolatey.org, and as such, in future, if there are any other issues they can be posted here:\nhttps://github.com/chocolatey/chocolatey.org\nGetting back to this particular problem though....\nAm I right in saying that you were typing out the installation command, while following along reading from the website?  If so, I can see how that would be a problem, given the formatting of the page.  What I would say though is that I don't think the intention is that people will manually type out the command, but rather, use the mechanisms on the page itself.  i.e. there are links that you can click which will put either command into your clipboard, which you can then immediately paste into either a command prompt or a PowerShell window.  The visual representation is really just there to show how easy it is to get Chocolatey installed.\nDoes that make sense, or did I miss the problem?\nGary\n. Yeah, that throws a few people.  You should be able to right click and choose paste. Or use the menu at top left of command prompt window.\nGary\n\nFrom: Ted Sandersmailto:notifications@github.com\nSent: \u200e25/\u200e07/\u200e2014 18:13\nTo: chocolatey/chocolateymailto:chocolatey@noreply.github.com\nCc: Gary Ewan Parkmailto:gep13@gep13.co.uk\nSubject: Re: [chocolatey] Tip for improving front page installation directions (#527)\nThanks for the replies! If I'm not mistaken, in standard Windows command prompt, Ctrl+V does not paste. So I didn't know how to paste the code and ended up typing it all out without knowing any better.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/issues/527#issuecomment-50177998\n. There is also the ability to create a generic shortcut using this helper method:\nhttps://github.com/chocolatey/chocolatey/blob/master/src/helpers/functions/Install-ChocolateyShortcut.ps1\nGary\n. @030 although the helper has been pulled into the master branch, it hasn't yet made it into the Stable branch, therefore it hasn't made it into a released version of Chocolatey.  The original pull request is labelled as 0.9.9, so we would need to check with @ferventcoder about when that is going to be released.\nNo, this helper does not take an array of inputs, but rather, works on creating a single shortcut for a given exe.  That is not to say that it couldn't do this, but as it stands right now, it doesn't.\n. Are you running the command prompt or PowerShell window with Administrator rights?\n. I am confused.  Why would Chocolatey need it's own Proxy Settings?  It simply uses the Proxy configuration for the system that it is running on.\n. I think @mwrock did some signing of the Boxstarter Scripts.  Perhaps he can point in right direction.\n. Ah, that was it! I knew there was something :-)\n. Hello,\nAs noted in the package description here:\nhttp://chocolatey.org/packages/nodejs\n`choco install nodejs``\nDoesn't include npm.  To do this, you will need to use:\nchoco install nodejs.install\nwhich you can find here:\nhttp://chocolatey.org/packages/nodejs.install\nIf you have any problems after this, we can re-open the issue.\n. Ah, gotcha.\nSince choco install nodejs is just an alias to nodejs.commandline, it could be made to install npm by default.  We would need to confirm with @ferventcoder, the maintainer of the package, to see what his thoughts on this are.\n. :+1: \n. Looks like for Pester, you have to tell it where the test results end up:\nhttp://www.appveyor.com/docs/running-tests\nFor other systems it discovers them automatically.\n. In the current version of Chocolatey, no, it keeps all the old versions of the applications around.  For some applications, like Ruby, this is exactly what you want, for other, like Atom, not so much.  There are plans to change this, but for now, it is a case of manually removing the package folders for the older version of the package that you don't want.\n. There are some open issues already around this topic. Can I ask that you have a look around, and it you think it isn't covered by them, update this issue with further suggestions?  Thanks!\n. :+1: \n. For me, the advantage of the shim's is running the application's from the command line, so icons don't really matter for me.  Personal preference I guess.\n. > I see shimgen as workaround for a broken symlink support in Windows. On Windows and on other operating systems, symlinks always inherit the icon of their target. IMHO that makes sense, doesn\u2019t it?\nI don't disagree with you on that point.  However, for me, the shims that end up in the Chocolatey\\bin folder are things like dupfinder.exe, gitversion.exe, inspectcode.exe and various other things.  None of these tools have a GUI, they all run from the command line.  As a result, I typically never have a need to look in the Chocolatey\\bin folder.\nOther applications that are installed through Chocolatey almost always have Start Menu, or desktop links, so again, I don't need to go to the Chocolatey\\bin folder.  It is just as simple for me to hit the Windows key, type the first few character of the application name, and then hit enter.\nYes, it's personal preference.\n. Can you please try again?\nThis link:\nhttp://chocolatey.org/api/v2/package/chocolatey/\nWorks fine for me.\nGary\n. What is the custom source that you are using?\nThere was a similar issue here:\nhttp://superuser.com/questions/786845/is-packageid-now-case-sensitive-in-chocolatey-install-command\nWith ProGet.  Does this help?\nChocolatey is not case sensitive, but certain custom sources are.\n. > My own custom source. An HTTP URL.\nYes, but what is hosting the packages? \n\nAnd confirmed that when NOT specifying a custom source, it is NOT case sensitive.\n\nSo this clearly points the finger a NOT being a Chocolatey issue, but rather a problem with what is hosting the packages.\n. As noted in the SuperUser post, there was also a change in NuGet that made things change.\nI don't know off the top of my head if .27 took a new dependency on the latest version, I suspect it did, but @ferventcoder can confirm, and if so, this is inadvertently the issue you are now seeing.\n. > We are still running an old NuGet version on the TeamCity server.\nYes, but Chocolatey bundles the NuGet.exe, so it will not be using the same one as TeamCity.\nI have just confirmed that Chocolatey .27 ships with NuGet 2.8.2:\n\nThe only thing I can think would be to replace the NuGet.exe in the chocolateyInstall folder with an older version, but this might have adverse side effects.\n. > They probably made a mistake.\nThis is certainly possible, but I don't think anyone has investigated this yet though in order to follow up with them properly.\n. You can find it here:\nhttps://chocolatey.org/packages/chocolatey/0.9.9-alpha-20150125\nchoco install chocolatey -Pre\n. > I don't know where to see the list of valid beta versions.\nThe versions of a particular package are shown at the bottom of each package page.\n. > I didn't know how to find this alpha pre-release page.\nFrom any package version page, i.e:\nhttps://chocolatey.org/packages/chocolatey/0.9.8.32\nScroll to the bottom, and you will see:\n\nWhere you can then see all available package versions, including pre-release.\n. In order to support older operating systems, Chocolatey maintains compatibility with PowerShell 2.  There is nothing to stop you as a package maintainer taking a dependency on a higher version of PowerShell for your installation scripts, but bear in mind, unless your package takes an explicit dependency on PowerShell Version 3, which involves a machine reboot, you are going to run into problems.\n. @svnpenn It is my experience, that installing Powershell 3 requires a reboot of the host machine in order to fully install PowerShell.\n. Yip, sounds like we are talking about the same thing :-)\nIf you wanted to use PowerShell 3 commands in your package, you could take a dependency on the PowerShell 3 Chocolatey Package.  However, the side effect of this would be that when PowerShell 3 was installed, it would require a reboot.  If you threw something like Boxstarter into the mix, then the reboot could be handled, but it is certainly a complication.  \nYour approach of checking for PowerShell 3, and then gracefully prompting for the user to install it, would save the hassle.\n. This was a good idea! :+1: \n. Hello,\nThanks for your interest in doing this.  This is really a duplicate of this Issue: https://github.com/chocolatey/chocolatey/issues/67\nIf you have a look there, you will see a couple options on how to achieve this just now, while this issue is implemented.\nI will close this issue for now.\nHope that helps.\n. Looks like you might have changed the wrong file :-)\nThe files that you are looking for is in:\nC:\\ProgramData\\chocolatey\\chocolateyInstall\nThe file you have changed is the one in the nuget package, which is used to populate the ProgramData\\chocolatey folder.  These are not the files that actually run chocolatey.\nGive that a try, and let us know how you get on.\n. Sorry, I updated my comment above, as I noticed it wasn't showing properly.\nPlease try the above folder, and edit the chocolatey.config file in there.\n. Perfect!\nGlad to hear you got it to work.\n. This issues list is reserved for raising issues about Chocolatey core functionality, rather than issues with package creation.\nCan I suggest that you ask a question on the forums here:\nhttps://groups.google.com/forum/#!forum/chocolatey\nHaving said that, I think what you are looking for in the installArgs flag so that you can pass parameters to the native installer.  You can find details about that here:\nhttps://github.com/chocolatey/chocolatey/wiki/CommandsInstall#installarguments-optional---v09813\nI am going to close this issue for now.\n. > For instance, currently i am trying to send an argument -i and also -installArguments and I can't use both in the same line.\nThis is the point that I am making. -i is not a valid argument to pass in when calling choco install.  If -i is a parameter that you want to pass into the native installer that is contained within the Chocolatey Package, you will need to pass them into the -installArguments command.  Please see the example that are shown at the bottom of the wiki article that I linked to above.\n. Sorry to hear that you are having problems!\nCan I ask that you post this issue here:\nhttps://github.com/chocolatey/chocolatey.org\nThat is where all issues with the Chocolatey Website are recorded, this issues list is specifically for the Chocolatey Application.\nThanks\n. > Got it. Sorry about that!\nNot a problem at all :-)\n. @svnpenn what version of Chocolatey are you using?\nI have just tried what @ferventcoder suggested, but it is working for me.\n. Hmm, same here.\nThe test that I did was to run the chocolateyInstall.ps1 file again for the fiddler4 package which I already had installed.  I wonder if it is something in your chocolateyInstall.ps1 file that is causing the issue.\nCan you share what you have in there?\n. Hmm, looks like the issue is here:\nhttps://github.com/chocolatey/chocolatey/blob/master/src/helpers/functions/Get-ChocolateyUnzip.ps1#L49\nThis environment variable is only set when Chocolatey is run using:\nhttps://github.com/chocolatey/chocolatey/blob/master/src/functions/Run-ChocolateyPS1.ps1#L28\nWhich I \"think\" we/you are circumventing doing things this way.  This certainly \"should\" work, but I think we need to take a look at this.\nFor now, you should be able to progress by first setting this environment variable to the required value, i.e. where you have the package install files, after you load the PowerShell module.\nHTH\n. @gutierri I am not really sure that I understand the reasoning, or what this would look like.\nAre you suggesting that if a maintainer is no longer able to keep a package up to date, that if someone else starts to maintain the package, the original maintainer isn't allowed to access them?\nThis really doesn't sound useful to me, and certainly not the spirit that Chocolatey was built on.\nYes, we are aware that package maintainers come and go, and some packages slip in terms of package versions, but that is inherent in the nature of community contributions.  Doing something like I think you are suggesting would, IMHO, make the situation worse.\nIf you are finding that packages are out of date, please feel free to follow the package triage process which is documented here:\nhttps://github.com/chocolatey/chocolatey/wiki/PackageTriageProcess\n. > Remove the permission of the developer, there Seems to be a good idea even.\nSorry, this is the part that I don't like.  Take as an example the following situation.\nA developer, let's call him Bob, creates a Chocolatey Package, and posts it to Chocolatey.org.  It gets moderated and approved, and people start using it.  It turns out to be a really popular package and lots of people use it.  From time to time, the original application creators release a new version of the application, and Bob updates the Chocolatey Package so that people can get the updates easily.  Then, Bob and his wife have a baby.  Bob doesn't have as much time as he used to, and as a result, the Chocolatey package starts to fall behind in the releases.  The people who are interested in the package start to email Bob and ask him to update the package.  Bob doesn't have time to answer the emails because he is holding a crying baby, and hasn't slept for 48 hours.\nOk, granted, this is a made up situation, but I don't think it is far from a potential situation that could happen.  It doesn't have to be a new baby, it could be a new job, moving house, starting a new hobby.  Lots of things could happen that would prevent a developer updating a Chocolatey package.  To then remove permission for that developer to do anything with the package would be the wrong approach in my opinion.\nRather, is another developer is interested in helping to maintain a package, they can follow the package Triage process, as defined above, and become a co-maintainer of the package.\nHope this makes sense!\n. @ferventcoder I just approved the php package yesterday. It worked fine for me?!?\n. While I see this bug, I am reminded about something else, which is semi-related :-)\nI noticed that the Install-ChocolateyShortcut.ps1 file isn't linked in this file either.  While fixing the first, can this be done also, or you want separate issue?\n. :+1: cool, I can take care of this one.  Hopefully get to it tonight.\n. This is the PR that you are referring to: https://github.com/chocolatey/chocolatey/pull/278\nAnd this looks like exactly what we are going to need.  Although, in his PR he explicitly excludes the file that is being requested in this issue, i.e. UnInstall-ChocolateyZipPackage.\nAlso, this issue is a duplicate of https://github.com/chocolatey/chocolatey/issues/230\nThe PR targets the master branch, you happy for me to go ahead and pull it in, or how do you want to handle this?\n. Ah, gotcha...\n. Done, diddly, done.\n. This simply means that the package is in the moderation queue, and as a result, it will not be shown to search results.  I am looking at the package now, and if it fits all required criteria, it will be approved, otherwise, you will be asked to make changes, and re-published the same version of the package again, with changes.\nGary\n. @sindux Thanks for doing this, this was on my todo list.\nI will get this reviewed and hopefully pull in shortly.\n. Sorry, I am not sure that I follow what you mean...\nWhat are you expecting that the parameter extractionPath is used as the destination path when using the unzip chocolatey helper?\nGary\n. I am still unclear about what you are asking for...\nDoes this help:\nhttps://github.com/chocolatey/chocolatey/wiki/How-To-Parse-PackageParameters-Argument\nGary\n. > Would it be possible to create a function or something? I would like to use this for multiple packages. Is it possible to include this function in InstallChocolatey.ps1. What is your opinion regarding this?\nThere is nothing to stop you adding additional ps1 files to your packages, and simply dot sourcing them for use within your chocolateyInstall.ps1 file.  That way, you maintain your helper functions in one place, and use them across multiple packages.  If you think that these helper functions are generic enough, then by all means, submit them as a pull request, and we can look into whether it makes sense to include them within Chocolatey core.\n. > Closed as a solution has been found\nFor the benefit of others who might find this issue as the result of a search, could you share what you are now doing?\nGary\n. Thank you! :-)\n. > Closed as a solution has been found\nAgain, can you share what you are now doing? Thanks!\n. Thank you! :-)\n. I think that this might be a better location for this issue:\nhttps://github.com/chocolatey/chocolatey-package-updater\nWhen you move it there, can you provide some more details about the problem that you are having, with steps to reproduce?\n. @ferventcoder can you provide a link to where this is done in the source code?  I have heard @mwrock talk about this as well, but I have never hunted it out.\n. Thanks! :-)\n. @ferventcoder is this an issue with the Atom package, rather than with Chocolatey?  Or something that will be addressed in vNext?\n. > Correct me if I\u2019m wrong, but could this have to do something with the recent force lowercasing the package IDs?\nI don't think so, or see how.  I have just done a choco update atom, which took my installation from 0.116.0 to 0.154.0 and the install worked fine.\n. > so if the installer chrashes... choco thinks it has already installed the latest version...\nThis is a side effect of the way chocolatey currently does the installation, something which is changing in vNext of Chocolatey.\n. @juliankrispel thanks for the offer of a contribution!  ChocolateyGUI would welcome any assistance you can provide as well :-)  https://github.com/chocolatey/ChocolateyGUI\n. Noice!  Of the two, I think I prefer the top one :-)\nWhat do you think @ferventcoder ?\nThe one thing I would say is that it does sort of remind me of the Commodore 64 logo.\n. I quite like this one:\n\n. Wow, these are really good!  Great work @juliankrispel Personally, I also like 8 a lot, but I keep coming back to normal 6 as well.  I really like the colours, although I appreciate they are completely different to what we have now :smile_cat: \n. > With the icon I'm a fan of no colon. 1b with white C is also quite interesting.\nAgreed, I like 1b because of the bevelled edge on the \"wrapper\" of the chocolate.  No colon gets my vote as well.\n. @ferventcoder I like the Jolly Roger Regular :+1: \n. @juliankrispel thanks for getting back to us about this, really appreciate it! :smile_cat: \n. Hey,\nHave a look at github.com/chocolatey/chocolateygui it bundles the msi within its Chocolatey package.  I agree that we need some more documentation in this area though.\nGary\nSent from my Windows Phone\n\nFrom: David Keanmailto:notifications@github.com\nSent: \u200e21/\u200e12/\u200e2014 17:52\nTo: chocolatey/chocolateymailto:chocolatey@noreply.github.com\nSubject: [chocolatey] [wiki] Create Packages needs a little more guidance around raw binaries (#646)\nHey, new to chocolatey and after getting an issue file against me to add a chocolatey package for https://github.com/davkean/audio-switcher I went to the the wiki to understand what that meant.\nAfter just reading the wiki (in particular, https://github.com/chocolatey/chocolatey/wiki/CreatePackages), it's unclear to me what exactly I put in the package - all the examples show using chocolateyInstall.ps1 to download from the web and run the installer. This makes sense because most of top packages seem to be wrappers around existing applications (Chrome, Notepad2, etc).\nBut I don't have a installer, or a web site with the binaries. Is there a way to just put the executable in the package and call it a day? If there is, the wiki doesn't call this out.\nIt would be great if you had a flow chat, ie \"if  you have a traditional MSI on a web, do this\", \"if you just have raw binary do this other thing\", etc.\nThanks\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/issues/646\n. > Hey, thanks Gary, will do.\nLet us know if you run into any problems with getting the package created.  We can leave this issue open as a reminder to improve the documentation in this area.\nGary\n. @ahmedmohiduet in both the Command Window and PowerShell Window you will get a download progress indication, as shown here:\n\n\nThese will disappear once the file download happens.  Anything after that is just the installation time.\nDoes that help?\nGary\n. In order for this to work, you would have to do the following:\nchoco install nodejs.install\nClose and re-open your Command/PowerShell window\nnpm install -g grunt-cli\nnpm install -g bower\nThe important thing here is the closing of the shell to get the initial npm installs to work.\nHope that helps!\nGary\n. @aronovgj I think that this issue would be best added here:\nhttps://github.com/chocolatey/chocolatey-package-updater\nCan you please re-create the issue there, and I will close this issue.\nThanks\n. @aronovgj please accept my apologies, I was unaware of the history of this issue, and based on the wording, I believed it sounded like a ChocoPkgUp.exe issue, not a native Chocolatey one.\n. > Dont know if was session timeout or something, or if the group is moderated and the post will show up later? \nYes, the forums are moderated.  I don't see it in the queue for moderation though.  Hopefully it will turn up, and if/when it does, it will get approved.  Thanks for taking the time to explain this further.\n. @andulv I have just approved your Google Groups post :+1: \n. > Would it be possible to go for one of these pledges even though the Kickstarter is closed?\nSorry, I am going to have to leave that question for @ferventcoder.  I know that he is out just now, but he will definitely follow up with you.\n. > Definitely should stay with equals if possible.\nThis is my opinion as well, but wanted to understand the thought process that @glennsarti had before rolling back.\n. Thanks for getting back to me.\nI was almost convinced that I tested the code that I used before I posted it into the wiki, but sounds like there is an issue there.  Let me look at this again, and make sure it is correct.\nThanks for bringing to it our attention!\n. Hmm, looking again, look like Matt is using a : as the separator within his packages:\nhttps://chocolatey.org/packages/VisualStudio2013Ultimate\nI must have tried to change this to = and messed up the article.\nI will correct this.\n. > No problem. Also, should I be allowed to make changes to wiki like that, or should I be raising an issue first?\nThat would be for @ferventcoder to comment on for the official answer :smile_cat: \nIn my mind, editing the wiki should be allowed, crowd sourcing documentation has a lot of merit.  However, perhaps we might want to use a Pull Request model for this, rather than allowing editing directly, to ensure the changes are actually required/desired.\n. > perhaps. How does on PR wiki docs?\nBoo! I thought since the wiki is just a git repo under the hood that this would be possible, but looks like you have to fudge it!\nhttp://fusiongrokker.com/post/how-you-can-contribute-to-taffy-documentation\n. > Do we need a bin root? Or is it that choco is not doing a sufficient job in some cases?\nWith the changes that are coming in vNext, or at least, how I understand them, the need to Get-BinRoot should become non-existent, but that does raise the question about deprecating and updating the use of it.\n. Closing this, as it is a duplicate of https://github.com/chocolatey/chocolatey/issues/675\n. @dschinkel can you execute the following command:\nchoco install filezilla -force -debug\nAnd paste the output into a gist and link to it from here?\nAlso, what version of Windows are you on?  And what version of Chocolatey? Are you running from PowerShell or from Command Window?  And are you running either of these as an Administrator?\n. Chocolatey \"knows\" which packages are installed, based on what folders exist in the lib folder.  This is what is used as the \"index\" of installed packages.\n. Yes, that is intended.  See here:\nhttps://github.com/chocolatey/chocolatey.org/issues/162\nFor more information.\n. @DarwinCSIWindowscom can I get you to re-create your issue here:\nhttps://github.com/chocolatey/choco/issues\nThis is where all new work will be carried out.\nThanks!\n. Sorry to hear that you are having issues!\nCan you please try the answer to this StackOverflow question:\nhttp://stackoverflow.com/questions/30720496/why-is-powershell-not-recognized-when-installing-chocolatey\n. Not sure where the MySQL command would be coming into play though?!?\n. @hifriend21 you will likely need to close and open the command window for the PATH change to take effect.  Did you do this?\nCan you output what is currently in your PATH variable here?\n. What happens if you try just @powershell\n. That was going to be my next question! :-)\nIf you hit the Windows key, and then search for powershell, does anything come up?\n. > @hifriend21 said...\n\nWhich is I can't even install the powershell.Thanks for helping, there is no other ways to get chocolatey, exept cmd?\n\nWhile there are other way's to do the install, none of them really matter.  Chocolatey, at the minute, has a direct dependency on PowerShell.  If you don't have that installed, then unfortunately, you won't be able to use Chocolatey.\n. @zilexa have a look here:\nhttps://github.com/chocolatey/choco/wiki/CommandsReference#how-to-pass-options--switches\nHopefully that will help.\n. There was some more discussion on this here:\nhttps://groups.google.com/forum/?fromgroups#!searchin/chocolatey/.config/chocolatey/VKm1ARnzOcg/3jQ-kX5P09sJ\nGary\n. That is great news! :-)\n. A tool has been proposed here:\nhttps://groups.google.com/forum/#!topic/chocolatey/VKm1ARnzOcg\nThat does something similar.\n. @CumpsD Is this what you are after?\nhttps://github.com/chocolatey/chocolatey/wiki/CommandsSources\n. Not a problem at all, happy to help out! :-)\n. @ferventcoder have you reviewed https://github.com/chocolatey/chocolatey/pull/542?  Seems like something we could include, but we would need some tests around it.\n. Hey,\nI am reasonably new to git, and am certainly no master when it comes to best practices, and although I follow most of what is suggested above, I would LOVE to see this written up into a wiki article that explained the why's and why not's, so that people getting started out can know the process to follow, which then makes the process of pulling in changes that much easier.\nFor instance, in all the updates lately I have been reading a lot about the desire to keep the commit history clean, and the need for doing rebases etc.  Now I \"get\" most of this, but I think it would be good if someone (i.e. someone who knows exactly what they are talking about) could describe what this means in the context of the Chocolatey project.  I understand that this could potentially be a lot of work, but I also think that it could save a lot of work when pulling in all the PR's.\nWhat do you think?\nGary\n. That is great news!\n. @ferventcoder off the top of my head, I am not sure.  I will have a look.\n. For what it is worth, I agree with Matt as well.  Contributing to this project was the first time I had ever used Pester, and I can honestly say that it was very simple to get up to speed with, and there are plenty of existing tests in the code base to use as a basis for new tests, so there really is no good reason , IMO, to not include additional unit tests.\nGary\n. Hey,\nGlad to hear that this will be of some use to you! :-)\nGary\n. This has been pulled in here:\n201ad95736b974f9ab0625362c2999eda2307408\n. Not a problem at all.  Would welcome any feedback (good or bad), it can only help me to get better :-)\n. Hey,\nMore than happy to do what ever is required, but can I ask for a bit of hand holding for this, still relatively new to git, and don't want to do anything wrong :-)\nAre you simply looking for me to rebase so that there is a single commit for the PR?  If so, could you walk me through the steps?\nThanks, much appreciated!  My experience with git to date has been as a single developer working in one branch and one remote, so I haven't yet ventured into the sort of details that you guys are now facing.\nAlso, is there something that I need to change around the asserts?  If so, happy to do this as well.\nThanks\nGary\n. Sounds easy :P\nI will let you know how i get on.\nThanks for all your help!\nGary\nSent from my Windows Phone\n\nFrom: Rich Siegelmailto:notifications@github.com\nSent: \u200e19/\u200e04/\u200e2013 21:14\nTo: chocolatey/chocolateymailto:chocolatey@noreply.github.com\nCc: Gary Ewan Parkmailto:gep13@gep13.co.uk\nSubject: Re: [chocolatey] Issue 235 - Created new Helper Function to create generic shortcut (#238)\nC:\\gitrepos\\chocolatey [branch]> git remote -v\norigin  git@github.com:rismoney/chocolatey.git (fetch)\norigin  git@github.com:rismoney/chocolatey.git (push)\nupstream        git@github.com:chocolatey/chocolatey.git (fetch)\nupstream        git@github.com:chocolatey/chocolatey.git (push)\ngit checkout master\ngit fetch upstream\ngit rebase upstream/master\nthen\ngit checkout yourbranch\ngit fetch upstream\ngit rebase upstream/master - this puts your changes on top of the current HEAD\nthen\ngit rebase -i upstream/master\neditor should be launched\nyou should see a list of all your commits, with the word pick in front.\nstarting with the second commit change the first word from pick to fixup\nrepeat for all subsequent comits\nclose editor with save\nthen\ngit commit --amend to fixup the single commit message\nthen\ngit push -f origin\nyou will then have a single commit that looks like you did it perfectly the 1st time.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/pull/238#issuecomment-16683731\n. Ok, I think I have done everything that you suggested, but I am now also a little confused.  How did it get into this pull request already?  I expected the last command that I ran, i.e:\ngit push -f origin\nTo put the rewritten commits into my forked repo, and from there I would have to update the pull request, but this seems to have happened automagically.  What gives?  Or what am I missing?\nThanks for all the help by the way, it really helped! Would have never figured that out on my own! :-)\nGary\n. Gotcha, that makes sense. Have to take my hat off to Git and Github, they really do provide a great system.  Once you get past the learning curve that is :-)\n. Due to me deleting the original branch that this PR was submitted on, I had to recreate it, as a result, the linking is broken.  However, I have recreated the PR, and pulled it in here:\n201ad95736b974f9ab0625362c2999eda2307408\n. This has been implemented here:\ne8c017ae54c5f2d37f7bdc908bb2e4cab77082d1\n. Hello staabm,\nThis would appear to be an issue with the GnuWin package, rather than chocolatey install.\nCan I suggest that you ask a question about the package on the (new) discussion forums on the package page:\nhttp://chocolatey.org/packages/GnuWin\nAnd hopefully the package creator will be able to provide some insight to the problem that you are having.\nHope that helps!\nGary\n. Due to me deleting the original branch that this PR was created on, the link has been broken.  Even though I created a new branch, with the same name, it didn't \"automagically\" work, which I didn't think that it would.  However, this has been address here:\ne8c017ae54c5f2d37f7bdc908bb2e4cab77082d1\n. This is actually a problem with the MySql package, not with chocolatey.  As such, you should really contact the package owners, which you can do from the contact owners link here:\nhttp://chocolatey.org/packages/mysql\nThis particular issue, I believe, is due to a dependency on the C++ Redistributable.  If you try running the mysql installer directly, it tells you about this.\nThe required dependency is actually another chocolatey package, which you can go ahead an install.\nGary\n. Hello,\nAs per your other issue, your best bet would be to contact the package owner directly, which you can do from this link:\nhttp://chocolatey.org/packages/redis\nGary\n. Should we add a task, somewhere, to get the documentation updated to reflect this change, or where do things like that get logged so they are not forgotten?\n. Any word on when a new release of choco is going to be pushed out, to include changes like this?\nThanks\nGary\n. Cool, happy to beta test if you need people to give it a try.\nYeah, never tried installing a \"hooky\" version of chocolatey yet, always installed the proper version.  There is nothing immediately pressing.  I know Matt has made a couple of changes that are interesting, but happy to wait, was just curious :-)\n. rismoney, sorry, that wasn't in anyway a slight at you, or anyone, sorry if it came across like that!  All I meant was, if I install something like chocolatey on my own machine, I want to install the fully released version, not a pre-release version, therefore I wouldn't install the source code version.  As a result, I am willing to wait for the new features for my main machines, but can fire up a VM for testing purposes.  The term \"hooky\" probably wasn't the best in this case.  Apologies.\nmwrock, that would be great.  We are using MyGet for the ChocolateyGUI and it does a great job!\n. Ah, gotcha.  :-)\nI have only touched the surface of Pester, mainly due to Matt's blog posts, but it really is very clever!\n. Is that a new repo?  This link doesn't seem to work for me :-(\n. Just in case you didn't see the other part of the conversation Paul, the Puppet Chocolatey module may not fully work properly (i.e. for validating installed version of a choco package) until the other pull request for completing exit codes is pulled into master and a new version of Chocolatey is released.\n. oh yeah, I know, I have been following, just wanted to let Paul know, who I think is going to be using the Puppet Module in anger, that he may see some issues, until the next release is pushed out. :-)\n. To try to help out, I have added a pull request to try to cover this issue.  Not sure if it covers everything that would be required, but it does add a Unit Test to cover this scenario.  Would be interested to hear thoughts on what I have suggested.  Thanks!\n. Going to go ahead an close this issue.  I will do another pull request with correct line feeds, etc.\n. Woot ;-)\n. Woo hoo!  What is the \"done\" thing now?  Should I delete the branch on my fork?  Or should I leave it.\nThanks\nGary\n. Okay dokay :-)\n. Just putting in my 2p worth,...\nIs it worth supporting Server Core?  There is only going to be a small subset of chocolatey packages that are going to work on Core, with a high number of them simply not going to install at all.  How would we make it such that this was clear across all packages, so the inevitable \"It doesn't work\" issues don't crop up.\nGary\n. Yip, this makes sense, just wanted to make sure that we weren't going down a route that didn't make any sense.\nYeah, it's SharpZipLIb that is the \"standard\" library that is used in-house.\n. Sure, I can take a look at this one.  I am away this weekend, but I can take a look at it after that :-)\n. Hey,\nJust a thought, if this is going to go ahead, I would suggest that the documentation at the top of the Install-ChocolateyInstallPackage.ps1 file should be updated to make it clear that it is not just msi and exe, but also for an msu.\nThoughts?\nGary\n. I think that this would definitely make sense to be included in the wiki, \"somewhere\".  I have on my todo list to do a complete write up of \"How to contribute to the Chocolatey Project\", i.e. fork the source code, create a branch, do your work, run the Pester Tests, Write new Pester Tests, commit code, do pull request etc, but again, never seem to get the cycles to do it.\n. Is there not already a chocolatey puppet module?  I have it on my todo list to have a look at it, as I am just getting into puppet, but I had assumed that this would already be taken care of there.\nGary\n. Ah, I see.  I am still working with straight up package, file, and services in my puppet manifests just now, but I will be looking to extend into using Chocolatey as well.  Look forward to giving it a try.\n. @zippy1981 are you in a position to clean up this PR by rebasing on the current master?  If not, I can submit a new PR with similar functionality? Thanks!\n. @ferventcoder did you follow up with @macioosch about this?\nAre you happy for this to be pulled in?\n. @ferventcoder do we keep the most recent logos somewhere?\n. Perfect, thank you!\nGary\nSent from Windows Mail\nFrom: Rob Reynolds\nSent: \u200eTuesday\u200e, \u200e25\u200e \u200eNovember\u200e \u200e2014 \u200e15\u200e:\u200e16\nTo: chocolatey/chocolatey\nCc: Gary Park\nLocal...let me set up a repo with the logos. \nOn Tuesday, November 25, 2014, Gary Ewan Park notifications@github.com \nwrote: \n\n@ferventcoder https://github.com/ferventcoder do we keep the most \nrecent logos somewhere? \n\u2014 \nReply to this email directly or view it on GitHub \nhttps://github.com/chocolatey/chocolatey/pull/284#issuecomment-64318061. \n\n\nRob \n\"Be passionate in all you do\" \nhttp://devlicio.us/blogs/rob_reynolds \nhttp://ferventcoder.com \nhttp://twitter.com/ferventcoder \n\u2014\nReply to this email directly or view it on GitHub.\n. For EXE's, I use this helper command as per here:\nhttps://github.com/chocolatey/chocolatey-coreteampackages/blob/master/feeddemon/tools/chocolateyUninstall.ps1\nFor MSI's, I typically do something like his:\nhttps://github.com/chocolatey/chocolatey-coreteampackages/blob/master/calibre/tools/chocolateyUninstall.ps1\nGary\n. @ferventcoder This is a known issue, that I need to figure out.  Some testing required here.\n. I really think that this is a good idea!  The only concern that I would have would be keeping what is in the \"help\" in source, in sync with the \"help\" on the wiki.  I mentioned this to @mwrock in a previous commit that I saw him doing where he had to manually update a synopsis on the wiki to match a change to the synopsis in the code.  Is there any way to have \"one source of truth\", i.e. that we store the help documentation and synopsis information in one place, e.g. in the source code repo, and then flow this through into the wiki.  That way you update once, and it is correct in both places?\nJust a thought...\n. Hmm, that isn't bad actually, and not unlike other systems, for instance, PowerShell itself with it's Update-Help option.  Would it make sense to use the wiki as the \"one source of truth\" and then have Chocolatey download and cache the help files locally?\nThoughts?\n. @rismoney The more I think about this, the more I like it.  Will add it to my ever growing list of things to look into :-)\n. As an experiment, i think it would be good to know that we can load a file from file system and render as help text when requested. I don't see why we couldn't do this though.\nBut yes, i think for now, that is the plan.\nGary\nSent from my Windows Phone\n\nFrom: corkupinemailto:notifications@github.com\nSent: \u200e07/\u200e05/\u200e2013 02:07\nTo: chocolatey/chocolateymailto:chocolatey@noreply.github.com\nCc: Gary Ewan Parkmailto:gep13@gep13.co.uk\nSubject: Re: [chocolatey] WIP - help refactor (#288)\nSo what do you think I keep going in the same direction for now? It's close to the git model, will be an improvement, and you can consider caching wiki pages and rendering markdown in the console later ;)\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/pull/288#issuecomment-17517808\n. Or, as a half way house, how about the following...\nContinue with what you are currently doing, but rather than put the help documentation directly in the PowerShell script, move it into a separate file, one file for each method. Then, when requested, read that line, and display to user.\nWith that in place, we can then look to update those files, based on what is in the wiki, using something like a Update-Help method.\nThoughts?\nSent from my Windows Phone\n\nFrom: corkupinemailto:notifications@github.com\nSent: \u200e07/\u200e05/\u200e2013 02:07\nTo: chocolatey/chocolateymailto:chocolatey@noreply.github.com\nCc: Gary Ewan Parkmailto:gep13@gep13.co.uk\nSubject: Re: [chocolatey] WIP - help refactor (#288)\nSo what do you think I keep going in the same direction for now? It's close to the git model, will be an improvement, and you can consider caching wiki pages and rendering markdown in the console later ;)\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/pull/288#issuecomment-17517808\n. @ferventcoder I guess this relies on you being a stand up, all around good guy! Oh, wait... :-)\nI think this should be for any edit on the comment, regardless of who made the edit.\n. What about something like:\nHelp-<Function Name>.txt\ni.e.\nHelp-Chocolatey-Install.txt\n. Ah, I see what you are getting at. My bad!\n. Hello,\nI have just checked the Chocolatey Source Code, and the Stop-OnAppIsInstalled is not part of the code case, so this must be a method that the package owner expects to already be available in the system.\nI think the best course of action would be for you to contact the package owner directly:\nYou can do that by clicking the Contact Owners link here:\nhttp://chocolatey.org/packages/Devbox-ConEmu\nHope that helps!\nGary\n. When you said:\n\"I'm creating a package that runs a service\"\nI take it you mean a windows service?  If so, how are you creating the service in the first place?  Are you using something like WiX?  If so, you can put the responsibility for stoppping/starting this service into the hands of the installation package, i.e. the MSI, and not worry about this within the chocolatey package.\nGary\n. Rob, what are your thoughts on this?  Does it make sense to add this functionality into another helper method, such as InstallChocolateyPowerShellPath?  There is an existing helper method for a generic environment variable: https://github.com/chocolatey/chocolatey/wiki/HelpersInstallChocolateyEnvironmentVariable but if it makes sense to split out the PowerShell Module Path, happy to take a stab at implementing this.\n. What version of PowerShell are you running?  And have you installed the Web PI Commandline? (cinst webpicommandline).\nThe reason that I ask is that this worked for me:\n\n. Looks like there is an issue though, in that this should be handled more gracefully, and not just disappear, but if we can trace the problem, we can work on a solution :-)\n. Ah, my test was on a Windows 7 machine :-)  Will do a test on a Windows 8 machine as well.\n. Hmmm...\nJust tried again on my Windows 8 machine, and I get the same results as in the above screenshot.\nWhat happens if you try running the following:\ncmd.exe /c webpicmd /List /ListOption:All\nThis is what Chocolatey is doing under the hood for you.\nGary\n. Doh! That is the flag I was looking for! I was trying with -verbose, and that wasn't doing anything :-)\n. Ah, that makes sense :-)\nI have a potential fix, namely:\nif ($source -like 'webpi') {\n$chocoInstallLog = Join-Path $nugetChocolateyPath 'chocolateyWebPiInstall.log';\nRemove-LastInstallLog $chocoInstallLog\n$webpiArgs =\"/c webpicmd /List /ListOption:All | Tee-Object -FilePath `'$chocoInstallLog`';\"\nStart-ChocolateyProcessAsAdmin \"cmd.exe $webpiArgs\" -nosleep\nCreate-InstallLogIfNotExists $chocoInstallLog\n$installOutput = Get-Content $chocoInstallLog -Encoding Ascii\nforeach ($line in $installOutput) {\n  Write-Host $line\n}\nWhich does the same thing as the Windows Feature equivalent, but it makes the command VERY slow to execute.  Should I go ahead and make a PR to add this in?  Or wait for another solution?\nGary\n. Just tried the latest webpi cli and looks like it requires admin privileges as well :-(\n. When you mention hosting packages elsewhere, when they are not intended for everyone, is it worth mentioning somewhere like MyGet.org? i.e. The package can still be on a public feed, but not polluting the Chocolatey.org feed?\nGary\n. @Redsandro You are right, my command is directed here:\nhttps://github.com/chocolatey/chocolatey/issues/355\nSorry :)\n. An out there suggestion, but...\nCan we create a choco package that configuring this as a default in the common editors? Assuming that these settings are exposed somewhere, it should be trivial to check whether an editor is installed, and make the update.\nJob done!\n. Agreed, if we could wrap this up in cpack to the point that this was a non-issue, that would be best for everyone.  Would the act of cpack result in changes to the physical file?  i.e. if someone is using source control, (and obviously they shoudl be) would they be left with the \"correct encoding on the file?  If so, should cpack throw a message back to indicate what was done, adn why?\n. Would it be worth creating another command that could be used ahead of cpack?  A dedicated function for doing just this?\nThe only problem with this is that it would be down to the user to run the command, and to know to run the command, which takes us back to the same problem.\nThe only other suggestion would be to add an \u201cautomatic moderation\u201d step, post upload to the chocolatey servers.  Almost synonymous with a compilation, where we do all the necessary work, in this case the encoding, before setting the package live.\n. From the link posted above:\n\nIf you don\u2019t respect this rule, some characters are not displayed correctly in the Gallery on Chocolatey.org, because the Gallery assumes UTF-8.\n. Perhaps the wiki needs to be refined, but my understanding is that the problem is exactly as stated in the latter part of the quote.  If you don't do what is described here, then characters are rendered incorrectly when pushed to the Chocolatey Gallery.  @TomOne will be able to provide more information on this, as my understanding on this issue is slim, at best.\n. This is great news if it is fixed, as it will ease some of the stricter requirements.  Would be great to get @TomOne who originally raised the issue to confirm that everything is now working as expected.\n. I \"think\" this might be an issue with the package itself, no? Where a call to Write-Success is called twice. Nit at my computer just now, but will try to check the chocolatey package for this application later today to confirm.\n. Doesn't look like this is a package problem.  The choco package has the following:\n\n```\ntry { \n  Install-ChocolateyPackage 'markpad' 'msi' '/quiet /norestart' 'https://github.com/downloads/Code52/DownmarkerWPF/MarkPad.v0.9.0.1.msi'\nWrite-ChocolateySuccess 'markpad'\n} catch {\n  Write-ChocolateyFailure 'markpad' \"$($_.Exception.Message)\"\n  throw \n}\n```\nGary\n. Gotcha.\nNo, this one not owned by you, but i will contact package owners later tonight and let them know if you want?\nSent from my Windows Phone\n\nFrom: Rob Reynoldsmailto:notifications@github.com\nSent: \u200e17/\u200e06/\u200e2013 16:08\nTo: chocolatey/chocolateymailto:chocolatey@noreply.github.com\nCc: Gary Ewan Parkmailto:gep13@gep13.co.uk\nSubject: Re: [chocolatey] Duplicate logging (#300)\nIt's wrapping a try catch around one of the big four (it's no longer just\nthree), which already has error handling and everything built into it. See\nhttps://github.com/chocolatey/chocolatey/wiki/HelpersReference\nThis pkg script can be cut to one line. Is this one that I own?\nOn Monday, June 17, 2013, Gary Ewan Park wrote:\n\nDoesn't look like this is a package problem. The choco package has the\nfollowing:\ntry {\n  Install-ChocolateyPackage 'markpad' 'msi' '/quiet /norestart' 'https://github.com/downloads/Code52/DownmarkerWPF/MarkPad.v0.9.0.1.msi'\nWrite-ChocolateySuccess 'markpad'\n} catch {\n  Write-ChocolateyFailure 'markpad' \"$($_.Exception.Message)\"\n  throw\n}\nGary\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/300#issuecomment-19546394\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/issues/300#issuecomment-19551258\n. Done :-)\n. @SimonCropp although I contacted the package maintainers, it doesn't look like the package was updated, so you will still see this issue.  But yeah, this issue I think can be closed.  Thanks\nDon't know if @maartenba or @JakeGinnivan have got any plans to change it or not.  Guys?\n. Strange! I used the Contact Maintainers link on the Chooclatey site.  Perhaps it ended up in junk folder.  Thanks for getting the package updated though, much appreciated!\n. At present, almost all packages are maintained by the community. There are just too many packages for this to be done by Chocolatey itself, we need the help of the community. However, as is always the case, life sometimes gets in the way, and packages become outdated. At this point, you have done the right thing by trying to reach out to the original author.  If this doesn't work, then the best idea would be to take the current package source code (if available) fork it, make the updates, and then push to Chocolatey. In order for this to happen, you would need to be made a co-owner of the package, which can be done. This is much preferable than creating a duplicate package.\nGary\nSent from my Windows Phone\n\nFrom: Roger Qiumailto:notifications@github.com\nSent: \u200e29/\u200e06/\u200e2013 09:30\nTo: chocolatey/chocolateymailto:chocolatey@noreply.github.com\nSubject: [chocolatey] Updating old packages that are not maintained on Chocolatey (#308)\nHow do I go about updating a package that isn't maintained by the author in Chocolatey. For example, papercut is the 2010 version on Chocolatey (which I installed), but I want the 2013 version that is available directly. Do I have to create my own package? There should be an easier process to keep up to date.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/issues/308\n. Rich,\nI guess what I was referring to there was the github repo for the package.  It would be easier to fork this code and create a pull request, rather than to re-invent the wheel and extract the files yourself to put them somewhere else.\nGary\n. Good catch :)\nI have updated the wiki article with the additional quotes.  Can you check and verify, and it you are happy with it, we can close off this issue.\nThanks\nGary\n. Yip, I think so.\n. I guess I am on the fence with this one.\nI see the benefit in using Chocolatey to install Node and NPM, but once installed, why would I use choco install gulp-imagemin -source npm, when I could just as easily do npm install gulp-imagemin.  Now, don't get me wrong, the same could be said about installing ruby gems, but I think I am on the fence about this as well.\nOther things like webpi, windowsfeatures, vsix, etc, make perfect sense to me.  This, not so much.  Happy to be persuaded otherwise though.\n. With regard to the personal packages, I would like to see these moved off the main chocolatey feed onto a Community Chocolatey Feed on MyGet.Org, or encourage people to create their own MyGet feeds to store the packages.\n. Does the Chocolatey Gallery, which comes from the Nuget Gallery, provide a lot of moderation capabilities?  Or is this something that will have to be built in?\n. This is very cool! :-)\n. I really think that we can start to use this as a starter for ten.  If nothing else, I think I am going to try to lever this for the packages that I maintain, and also at work (assuming you don't mind that is :-))\n. Would this be a case of executing some checks during the cpack command, and then have it fail if something goes wrong, or would this be done on the Chocolatey.org server once the package has been uploaded to the server? Or both?\n. The validation is the tricky part though.  For instance, in a recent package there was a sneaky addition of an Google and Google Tooblar:\nhttp://chocolatey.org/packages/avastfreeantivirus\nWhatever system we create needs to handle, somehow, the checking of unwanted uninstallations.  I was discussing this with Rob earlier this week.  This could be done, if possible, by taking a snapshot of the registry before and after the install (say with regshot) and also doing a diff of the file system (a harder thing to achieve) and checking for things that shouldn't be there.  If anything else does appear, this would flag the package as rogue, and need further manual validation.\nGary\n. side note... @mwrock wrt to that script block, which looks amazing, do those names assume that a Hyper-V VM exists with that name?  If it is not there, what does it do? I think you mentioned before that the VM would be created, but how does it know which iso to use when creating it?\n. Also, I love the idea of BoxStarter being used to validate Chocolatey Packages!  :-)  Talk about dog fooding!  If the Azure support lands, would it be within the realm of legality to use an MSDN Subscription for spinning up VM's, even as a Proof of Concept?  Happy to put my MSDN Sub to use for this if it is allowed.  The credits aren't being used for anything else just now.\n. Sweet, sounds like you have it all wrapped up! Is this your sole project just now, features seem to be coming thick and fast :-)\n. Ah, I see, that makes a bit more sense.  Based on what you had been pushing, I figured you hadn't slept in the last month! :-) Nightware, hopefully you can get it sorted out soon.  Look forward to checking it out!\n. I was having the same thought. I wondered whether the choco update package could be extended to include a flag to run the package through Boxstarter, and have it report back on success or failure. What do you think @mwrock\n. There is a .Net Class for SemVer in the nuget code base, I wonder if we could re-use that.\nSent from my Windows Phone\n\nFrom: Rich Siegelmailto:notifications@github.com\nSent: \u200e25/\u200e10/\u200e2013 02:04\nTo: chocolatey/chocolateymailto:chocolatey@noreply.github.com\nSubject: Re: [chocolatey] Support for version pattern matching (for installing, updating, and specifying dependencies) (#346)\nagree with you ferventcoder- that was my understanding.\ni think its a metric s-ton of a parsing exercise that probably needs to start with TDD via pester, and make each use case pass... just looking at this readme https://github.com/isaacs/node-semver made my head hurt.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/issues/346#issuecomment-27047579\n. Hello,\nAre you running the pre release version of chocolatey?  I believe that this is taken care of already.\nTry cup chocolatey -pre to try out the new bits.\nGary\nSent from my Windows Phone\n\nFrom: Glenn Blockmailto:notifications@github.com\nSent: \u200e13/\u200e10/\u200e2013 23:38\nTo: chocolatey/chocolateymailto:chocolatey@noreply.github.com\nSubject: [chocolatey] Remove the reopen the terminal when installing (#350)\nCurrently whenever I install with chocolatey I need to reopen my terminal windows, as it adds a new variable to the path.\nnpm doesn't require this as it has a central folder which is in the path which cmd files are added to for each global module. uninstalling removes the cmd from that location.\nthe cmd in this case would change to the directory where the chocolatey app is installed and run it passing in any args.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/issues/350\n. Welcome to the Chocolatey Alpha Testing program! :-)\nLet us know how you get on, and whether the current functionality in the alpha release works and is what you expect.  If so, we can go ahead and get this issue closed.\nThanks\nGary\n. When you say \"Only post publicly relevant packages\" I think this makes a lot of sense.  There are a number of packages on the Chocolatey.org feed that are not relevant to everyone.  Personally, I would like to see certain packages hosted on \"another\" public feed, which is not the Chocolatey.org feed.  For this type of thing, I would suggest that people use MyGet.org, where they create their own feed that people can consume packages from using the -source flag.\nGary\n. Happy to help out where I can.\nSent from my Windows Phone\n\nFrom: Rob Reynoldsmailto:notifications@github.com\nSent: \u200e26/\u200e10/\u200e2013 21:49\nTo: chocolatey/chocolateymailto:chocolatey@noreply.github.com\nCc: Gary Ewan Parkmailto:gep13@gep13.co.uk\nSubject: Re: [chocolatey] Wiki - Suggested rules edit (#355)\nModeration will fix quite a bit of the issues as long as moderators are all\non the same page. I'll need a nice team of folks who can help with the\nduties of package moderation.\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\nOn Sat, Oct 26, 2013 at 3:44 PM, TomOne notifications@github.com wrote:\n\n@Redsandro https://github.com/Redsandro, actually only .portable and\n.install are official suffixes. The are essential to understand what the\npackage contains. I suggested them a few months ago and they were accepted.\nThe other suffixes are deprecated, but obviously older packages still use\nthem. And there are still folks which ignore the rules and guidelines in\nthe wiki and use the deprecated suffixes. This problem will never be solved\nuntil chocolatey packages get inspected by moderators before they get\npublished.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/355#issuecomment-27155409\n.\n\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/issues/355#issuecomment-27155491\n. The example that made this \"click\" for me, in terms of \"virtual packages\" is PDF's.  Lets say you are creating a package that has a dependency on being able to read PDF Documents.  You could point this at a virtual package called PDF Reader, and this in turn would point at something like Adode Reader, Sunatra Reader (either the install, or portable), Foxit Reader, or any other package that can read PDF's.  As long as one of these things is installed, then the dependency for your package has been met, and installation can continue.\n. Hey,\nFor development purposes, there is a PowerShell script which allows you to side load a compiled application, but I don't think that the would work for app directly from the store.\nIn the Windows Phone eco system, there is an application that you can install that will run off and install all applications that you used to have on your phone. This is really useful for installing all apps when you get a new phone. Would be interesting to see how this was done, to see if something similar is possible in Windows 8, and 8.1.\nGiven the sandboxing of applications that Microsoft is trying to achieve, I can see that this might be a non starter.\nGary\nSent from my Windows Phone\n\nFrom: Redsandromailto:notifications@github.com\nSent: \u200e26/\u200e10/\u200e2013 18:26\nTo: chocolatey/chocolateymailto:chocolatey@noreply.github.com\nSubject: [chocolatey] Package/install stuff from the Windows Store (#356)\nMore and more interesting stuff is available for the Metro tile interface for Windows 8 in the Windows Store. For instance Netflix, to name a popular one.\nIs it at all possible to install apps from the Windows Store using power script? If so, maybe this should be a template or Chocolatey function.\nI have no clue at all how this works under the hood, but you need to be logged in with your Windows Live ID to be able to install apps. So the script would probably need to check if you are logged in.\nBut, this is of course total bull*, MS just wants to keep track of things. Apps can run perfectly fine without knowing who is running it. So it would be totally super awesome sweet if we could actually install apps for users without a Live ID.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/issues/356\n. We are in the process of creating a new alpha/beta release where this issue will be corrected.  If you want to get the latest version to run locally, you can download the source code and use that, however, this is done so at your own risk and may be subject to other issues.\n. @ferventcoder will correct me if I am wrong, but I think this is in the latest alpha release.\nTry\ncup chocolatey -pre\nGary\n. If we are going to say see the log for details, then I think we should include where the log file is located, or have a Read-Host, or something, asking if you want to open the log file.\n. By the way, I really like the suggestion for the new, trimmed, output.\n. @mwrock is this the way Boxstarter currently does it? Can you link to a specific example?\n@redsandro all valid points :-)\n. What is being described here sounds to me like a Chocolatey.Contrib project, which is where the helper module would like.  This could then be a standalone package that people can take a dependency on.\nThoughts?\n. I am going to say .Net 4.0:\n\n. Hmmm, I for one actually like the search box having focus by default.\n. Hello,\nThanks for reporting this.  This actually sounds like an issue with chocolatey.org, rather than with Chocolatey.\nCan I get you to raise this issue here:\nhttps://github.com/chocolatey/chocolatey.org/issues/new\nThanks\nGary\n. @Haacked can you add anything to what might have been going on here? Cheers!\n. @ferventcoder this week has been mental, so not had any time to look into this at all yet.  Hoping to get some time at the weekend to take care of this though.  Sorry!\n. Hello,\nBy executing the following:\nchoco\nYou will get an output similar to the following:\nPlease run chocolatey /? or chocolatey help - chocolatey v0.9.8.23\nFrom which you can get the current installed version of Chocolatey.\nHope that helps!\nGary\n. Yeah, I saw this:\nhttps://groups.google.com/forum/#!topic/chocolatey/3RJ-9pCGXyA\nAfter I read this enhancement request.  I guess I work in a different order :-)\n. What version of Chocolatey are you using?  Is Chocolatey already installed on the machine when you run the build on the TeamCity Build Agent, or are you installing it as part of the build?\n. On the Build Agent, open PowerShell and type\nchoco\nThis will output the current version number.\nSo, to confirm, although you have chocolatey installed on the Build Agent, you are running the Chocolatey installation script again as part of the TeamCity build, is that correct?\nIf so, then I think this is the issue.  There is a known issue in 0.9.8.23 where after installing, you have to close and re-open the PowerShell window before running a cinst, otherwise, you get the issue you are seeing.  Can you try taking out the Chocolatey install script just now?\nThis issue is fixed, and will be included in the next release.\n. Glad to hear that you got it working! :+1: \n. I suspect that this pull request got closed because you wrote \"Fixes #421\" in the commit message.  Due to the fact that when you fork a repo references to the issues remain pointing at the parent repo, it had the effect of closing the PR (and you were allowed to do this since you opened it in the first place).\n. @Redsandro it has happened to me on another repo, and I tried to dig up the example, but I think it has gone away, since they \"broke\" the connection with the upstream fork, thus creating their own set of issues.\n. If you can make these packages into auto packages, there is nothing to stop you adding them into here:\nhttps://github.com/chocolatey/chocolatey-coreteampackages\nAnd then the Community Server that I have running in the cloud will automagically check for new versions every hour, and cpack and cpush onto Chocolatey.org.\nThe more packages that we have out in this repo, the better, imo :-)\n. @Redsandro I \"think\", and Rob can correct me if I am wrong, but the CoreTeamPackages folder has changed in meaning slightly.  Originally, I believe it was only for packages that would be maintained by the core Chocolatey Team Members, and they could be packages that would have a quick SLA, in terms of getting packages out into the wild.  Now, at least as far as I am concerned, it is really aimed at a core repository for Chocolatey Packages, that are updated frequently (using the server that I have provided) and which will all, eventually, go through an automatic triage process to ensure for validity before being pushed to chocolatey.org.  Personally, I would like to see all the auto packages that are already out there, from core team members, and elsewhere, being combined into this one single repository.  I don't see this becoming a heap, but rather a maintained central repository, which is then much easier to triage with automatic processes that we can put in place.\nI know what you mean about the auto package process, it took me a while to get my head around it.  If you want to get onto the server in the cloud to take a look at what I am doing, just give me a shout.\n. @Redsandro yeah, I think I have read that thread before.  Hoping that this still isn't the case, as some of the packages I have pushed into there are certainly not critical :-)\n. Anyone can create and push auto packages, there is no implicit need for the chocolatey user to be involved.  However, any packages that make it into the coreteam repo would need to have the chocolatey user as a co-maintainer.\nRight now for the setup I have, I have it set up that both me and the chocolatey user can push each package.  However, on the server that I am using, keratin is essentially running under the chocolatey user, so when it automatically finds a new installation package on the interwebs, it pushes as the chocolatey user.  \nSo no, don't add me, add the chocolatey user.\n. That's the one.  From the main https://chocolatey.org/ page, the forum link takes you to the Google Group.\nWe should perhaps update the Contributing.md if this is not clear in there.\n. Done:\nhttps://github.com/chocolatey/chocolatey/issues/424\n. Random question, but what is the GH prefix on the issue number?  And how is it still linking through to the actual issue?\n. Cool thanks, I didn't know about that :-)\n. I really like this addition! Is this something you are planning on adding to the auto choco updating tool as well?\nSent from my Windows Phone\n\nFrom: Rob Reynoldsmailto:notifications@github.com\nSent: \u200e01/\u200e03/\u200e2014 14:25\nTo: chocolatey/chocolateymailto:chocolatey@noreply.github.com\nSubject: Re: [chocolatey] [Enhancement] CheckSum downloaded files (#427)\nNow this is good.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/issues/427#issuecomment-36425893\n. @ferventcoder I am just spitballing here, but does the implementation of this feature give us the \"complete offline install\"?  Assuming you have already run all the installations once on one machine, and you can transport the cache folder to another machine, you would then be in a position to run all the installs again on that other machine without the need to go off to the internet, right?  Or was this part of your cunning plan all along? :-)\n. This has been implemented here:\n7d40f57a00462f6053618dd5ec6dd1d7cd5f7c22\n. While I like the idea of re-directing to a different URL when required, I am wondering what the exact use case is for this.  Does the recent work that @ferventcoder did to first check the download cache to see if a file is already downloaded, before accessing the URL in the nuspec file cover a lot of the use cases?  How I was planning on using it was the following...\nOn one machine that has access to the interwebs, install all the packages that you need.  Mirror the Chocolatey Packages that you want to somewhere internal, i.e. ProGet, or a file source.  Deploy the Cache folder from the interwebs facing machine onto all other machines.  Perform all installs on other machines using -source parameter, and you have a full offline install.\nGranted, there is a bit of work up front to make this happen, but once you do it once, it's done.\nWhat is the use case of the URL re-direct?  Is it required now that Chocolatey first checks whether the required file has already been downloaded?\n. @jberezanski agree, returning a PSObject, which can be inspected (and easily extended if required) definitely makes a lot of sense.\n. For what it is worth, I would say just go for it.  Don't think @ferventcoder will have a problem with it.\nThanks for digging into this!\n. @Haacked has something changed on Github's side that would cause this problem to happen?\n. @Haacked  Ah, could be.  If nothing else, we have exposed a problem that @mwrock has been able to work around.  Thanks for getting back to me.  I will subscribe to the blog for future updates.\n. Hello,\nThis sounds like a known issue.  Have you just installed Chocolatey? If so, can you try closing and re-opening the Powershell window and try again?\nGary\n. @ferventcoder I don't have an issue with this.  Thoughts?\n. @nemchik There is a Chocolatey Helper method that should help you in persisting the change to the environment variable:\nhttps://github.com/chocolatey/chocolatey/wiki/HelpersInstallChocolateyEnvironmentVariable\nOr, if you want to do it yourself, you can find an example here:\nhttps://github.com/gep13/ChocolateyPackages/blob/master/gep13.ChocolateyDev/tools/ChocolateyInstall.ps1#L42\n. @jamesgecko You don't \"have\" to change the Environment Variables through the command line, you can use standard Windows functionality to change the environment variables.  I do agree though that we need to put up a page, somewhere, to make it clear all the steps that should be executed.\n. Sweet! I will take a read of it, and make some updates if required.  Thanks for doing this, it is much appreciated! :+1:\n. @Redsandro I believe I am right in saying that this was an attempt to provide \"one source of truth\" for the documentation for the wiki.  Currently, we document a helper method in two places.  In the ps1 file and also in markdown in the wiki.  This is currently done as a manual task, and subject to human error, and becoming out of date.\nThis PR was an attempt to generate the markdown for the wiki directly from the help documentation in the ps1 files, so at the very least, they were the same, and we only have to update it in one place, i.e. the ps1 files, and then simply update the wiki articles with this helper.\n. @NJ-Brad Glad to hear that you got this sorted out, and thanks for coming back and closing out the issue.  \nHappy choco'ing :-)\nGary\n. @rappazzo you can find a link to contact the maintainers of this package on this page here:\nhttp://chocolatey.org/packages/eclipse-standard-kepler\nHopefully you will hear something back from them, but if you don't can you please follow the package triage process outlined here:\nhttps://github.com/chocolatey/chocolatey/wiki/PackageTriageProcess\nTo try to get the problem resolved.\nThanks\nGary\n. The suggestion here is really a feature request, to include a generic helper method for wrapping calls to 7zip, which is capable of handling multiple file types, not just .zip.\n. I was looking for a label to assign to the issue, i.e. Feature, but I didn't see one.  Never thought to update the title.  Will remember for next time :+1: \n. @030 Not all the functions in Chocolatey have Unit Tests, and it looks like this could be one of the areas that it hasn't been included.  If you can, we would more than happily accept some unit tests for this function.\n. @ferventcoder based on the change of usage of the function, do we need to think about changing the name of the function, or at least creating an alias for it?  Install-ChocolateyZipPackage, by it's name, suggests it will only work with Zip files.  Would a name like Install-ChocolateyCompressedPackage make more sense?\n. Yeah, that works too.\n. @jberezanski oops! My bad! :-)  Good catch!\n. Hey,\nIn order to get code added to the codebase, you would need to submit a pull request.\nHave a look here:\nhttps://github.com/chocolatey/chocolatey/blob/master/CONTRIBUTING.md\nFor the process, and let us know if you have any questions.\nGary\n. Hey,\nNo probs.  The mailing list is hosted in a Google Group which you can find here:\nhttps://groups.google.com/forum/#!forum/chocolatey\nGary\n. Hey,\nSince this is your first post to the forum, it was sitting in the moderation queue.  I have just approved it, so you should see it now.\nGary\n. Hello,\nHave you read through this:\nhttps://github.com/chocolatey/chocolatey/blob/master/CONTRIBUTING.md\nThis is the process that we follow for accepting contributions to Chocolatey.  You would need to make the changes, and then submit the changes in the form of a Pull Request.\nGary\n. Looks like you are using version 2.0.1 of Pester.  As per the setup script here:\nhttps://github.com/chocolatey/chocolatey/blob/master/setup.ps1\nAnd also the discussion here:\nhttps://groups.google.com/forum/#!topic/chocolatey/9oQwi0-z3K0/discussion\nChocolatey needs version 2.0.2 of Pester.\nCan you try installing this version, and let us know how you get on?\n. Linqpad actually comes in two versions.  The original version \"choco install linqpad\" which installs a version that targets .Net Framework 3.5, and another one \"choco install linqpad4\" which targets .Net Framework 4.0/4.5.  As a result, they are two separate packages, and there isn't an \"upgrade\" path.\n. In this case, triaging is referring to checking the pull request, for suitability, problems, additional suggestions, etc.  This is the first pass at getting the pull request pulled into the main code base of Chocolatey.  This is a good thing :-)\nYou will hear from Rob if there are any changes that need to be made.\n. @vbsql7 can you confirm what version of Chocolatey you are using?  I have just done the following, using 0.9.8.28\n- Download the nupkg package from https://bitbucket.org/jonforums/uru/downloads/uru.0.7.7.nupkg\n- Saved it to c:\\temp\n- Executed the following command choco install uru -source c:\\temp\n- Installation succeeded successfully\n- I can see a new uru.bat and uru.ps1 file created in the chocolatey bin folder\n. > This could be the issue of just installing chocolatey and not having that\n\nvariable set\n\nAgreed, I had assumed that based on the title of this bug that closing and re-opening the shell after a fresh install of Chocolatey had been ruled out by @vbsql7.  I had thought it might be an error in the package itself, but after attempting the install on a clean VM myself, that didn't seem to be the case.\n. Glad to hear you got it working! :smile_cat: \n. Hello,\nWhen you installed Chocolatey 0.9.8.25, did you already have a Chocolatey version installed?  Or was this a fresh install?\nDoes this path:\nC:\\ProgramData\\chocolatey\nExist on your file system?\nGary\n. Hey,\nNope, no breaking of issue etiquette, we are not fussy :-)  Happy to hear from you, and to know that you are using Chocolatey.  The only thing that I would say is that this is really an issue with Chocolatey.org, and as such, in future, if there are any other issues they can be posted here:\nhttps://github.com/chocolatey/chocolatey.org\nGetting back to this particular problem though....\nAm I right in saying that you were typing out the installation command, while following along reading from the website?  If so, I can see how that would be a problem, given the formatting of the page.  What I would say though is that I don't think the intention is that people will manually type out the command, but rather, use the mechanisms on the page itself.  i.e. there are links that you can click which will put either command into your clipboard, which you can then immediately paste into either a command prompt or a PowerShell window.  The visual representation is really just there to show how easy it is to get Chocolatey installed.\nDoes that make sense, or did I miss the problem?\nGary\n. Yeah, that throws a few people.  You should be able to right click and choose paste. Or use the menu at top left of command prompt window.\nGary\n\nFrom: Ted Sandersmailto:notifications@github.com\nSent: \u200e25/\u200e07/\u200e2014 18:13\nTo: chocolatey/chocolateymailto:chocolatey@noreply.github.com\nCc: Gary Ewan Parkmailto:gep13@gep13.co.uk\nSubject: Re: [chocolatey] Tip for improving front page installation directions (#527)\nThanks for the replies! If I'm not mistaken, in standard Windows command prompt, Ctrl+V does not paste. So I didn't know how to paste the code and ended up typing it all out without knowing any better.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/issues/527#issuecomment-50177998\n. There is also the ability to create a generic shortcut using this helper method:\nhttps://github.com/chocolatey/chocolatey/blob/master/src/helpers/functions/Install-ChocolateyShortcut.ps1\nGary\n. @030 although the helper has been pulled into the master branch, it hasn't yet made it into the Stable branch, therefore it hasn't made it into a released version of Chocolatey.  The original pull request is labelled as 0.9.9, so we would need to check with @ferventcoder about when that is going to be released.\nNo, this helper does not take an array of inputs, but rather, works on creating a single shortcut for a given exe.  That is not to say that it couldn't do this, but as it stands right now, it doesn't.\n. Are you running the command prompt or PowerShell window with Administrator rights?\n. I am confused.  Why would Chocolatey need it's own Proxy Settings?  It simply uses the Proxy configuration for the system that it is running on.\n. I think @mwrock did some signing of the Boxstarter Scripts.  Perhaps he can point in right direction.\n. Ah, that was it! I knew there was something :-)\n. Hello,\nAs noted in the package description here:\nhttp://chocolatey.org/packages/nodejs\n`choco install nodejs``\nDoesn't include npm.  To do this, you will need to use:\nchoco install nodejs.install\nwhich you can find here:\nhttp://chocolatey.org/packages/nodejs.install\nIf you have any problems after this, we can re-open the issue.\n. Ah, gotcha.\nSince choco install nodejs is just an alias to nodejs.commandline, it could be made to install npm by default.  We would need to confirm with @ferventcoder, the maintainer of the package, to see what his thoughts on this are.\n. :+1: \n. Looks like for Pester, you have to tell it where the test results end up:\nhttp://www.appveyor.com/docs/running-tests\nFor other systems it discovers them automatically.\n. In the current version of Chocolatey, no, it keeps all the old versions of the applications around.  For some applications, like Ruby, this is exactly what you want, for other, like Atom, not so much.  There are plans to change this, but for now, it is a case of manually removing the package folders for the older version of the package that you don't want.\n. There are some open issues already around this topic. Can I ask that you have a look around, and it you think it isn't covered by them, update this issue with further suggestions?  Thanks!\n. :+1: \n. For me, the advantage of the shim's is running the application's from the command line, so icons don't really matter for me.  Personal preference I guess.\n. > I see shimgen as workaround for a broken symlink support in Windows. On Windows and on other operating systems, symlinks always inherit the icon of their target. IMHO that makes sense, doesn\u2019t it?\nI don't disagree with you on that point.  However, for me, the shims that end up in the Chocolatey\\bin folder are things like dupfinder.exe, gitversion.exe, inspectcode.exe and various other things.  None of these tools have a GUI, they all run from the command line.  As a result, I typically never have a need to look in the Chocolatey\\bin folder.\nOther applications that are installed through Chocolatey almost always have Start Menu, or desktop links, so again, I don't need to go to the Chocolatey\\bin folder.  It is just as simple for me to hit the Windows key, type the first few character of the application name, and then hit enter.\nYes, it's personal preference.\n. Can you please try again?\nThis link:\nhttp://chocolatey.org/api/v2/package/chocolatey/\nWorks fine for me.\nGary\n. What is the custom source that you are using?\nThere was a similar issue here:\nhttp://superuser.com/questions/786845/is-packageid-now-case-sensitive-in-chocolatey-install-command\nWith ProGet.  Does this help?\nChocolatey is not case sensitive, but certain custom sources are.\n. > My own custom source. An HTTP URL.\nYes, but what is hosting the packages? \n\nAnd confirmed that when NOT specifying a custom source, it is NOT case sensitive.\n\nSo this clearly points the finger a NOT being a Chocolatey issue, but rather a problem with what is hosting the packages.\n. As noted in the SuperUser post, there was also a change in NuGet that made things change.\nI don't know off the top of my head if .27 took a new dependency on the latest version, I suspect it did, but @ferventcoder can confirm, and if so, this is inadvertently the issue you are now seeing.\n. > We are still running an old NuGet version on the TeamCity server.\nYes, but Chocolatey bundles the NuGet.exe, so it will not be using the same one as TeamCity.\nI have just confirmed that Chocolatey .27 ships with NuGet 2.8.2:\n\nThe only thing I can think would be to replace the NuGet.exe in the chocolateyInstall folder with an older version, but this might have adverse side effects.\n. > They probably made a mistake.\nThis is certainly possible, but I don't think anyone has investigated this yet though in order to follow up with them properly.\n. You can find it here:\nhttps://chocolatey.org/packages/chocolatey/0.9.9-alpha-20150125\nchoco install chocolatey -Pre\n. > I don't know where to see the list of valid beta versions.\nThe versions of a particular package are shown at the bottom of each package page.\n. > I didn't know how to find this alpha pre-release page.\nFrom any package version page, i.e:\nhttps://chocolatey.org/packages/chocolatey/0.9.8.32\nScroll to the bottom, and you will see:\n\nWhere you can then see all available package versions, including pre-release.\n. In order to support older operating systems, Chocolatey maintains compatibility with PowerShell 2.  There is nothing to stop you as a package maintainer taking a dependency on a higher version of PowerShell for your installation scripts, but bear in mind, unless your package takes an explicit dependency on PowerShell Version 3, which involves a machine reboot, you are going to run into problems.\n. @svnpenn It is my experience, that installing Powershell 3 requires a reboot of the host machine in order to fully install PowerShell.\n. Yip, sounds like we are talking about the same thing :-)\nIf you wanted to use PowerShell 3 commands in your package, you could take a dependency on the PowerShell 3 Chocolatey Package.  However, the side effect of this would be that when PowerShell 3 was installed, it would require a reboot.  If you threw something like Boxstarter into the mix, then the reboot could be handled, but it is certainly a complication.  \nYour approach of checking for PowerShell 3, and then gracefully prompting for the user to install it, would save the hassle.\n. This was a good idea! :+1: \n. Hello,\nThanks for your interest in doing this.  This is really a duplicate of this Issue: https://github.com/chocolatey/chocolatey/issues/67\nIf you have a look there, you will see a couple options on how to achieve this just now, while this issue is implemented.\nI will close this issue for now.\nHope that helps.\n. Looks like you might have changed the wrong file :-)\nThe files that you are looking for is in:\nC:\\ProgramData\\chocolatey\\chocolateyInstall\nThe file you have changed is the one in the nuget package, which is used to populate the ProgramData\\chocolatey folder.  These are not the files that actually run chocolatey.\nGive that a try, and let us know how you get on.\n. Sorry, I updated my comment above, as I noticed it wasn't showing properly.\nPlease try the above folder, and edit the chocolatey.config file in there.\n. Perfect!\nGlad to hear you got it to work.\n. This issues list is reserved for raising issues about Chocolatey core functionality, rather than issues with package creation.\nCan I suggest that you ask a question on the forums here:\nhttps://groups.google.com/forum/#!forum/chocolatey\nHaving said that, I think what you are looking for in the installArgs flag so that you can pass parameters to the native installer.  You can find details about that here:\nhttps://github.com/chocolatey/chocolatey/wiki/CommandsInstall#installarguments-optional---v09813\nI am going to close this issue for now.\n. > For instance, currently i am trying to send an argument -i and also -installArguments and I can't use both in the same line.\nThis is the point that I am making. -i is not a valid argument to pass in when calling choco install.  If -i is a parameter that you want to pass into the native installer that is contained within the Chocolatey Package, you will need to pass them into the -installArguments command.  Please see the example that are shown at the bottom of the wiki article that I linked to above.\n. Sorry to hear that you are having problems!\nCan I ask that you post this issue here:\nhttps://github.com/chocolatey/chocolatey.org\nThat is where all issues with the Chocolatey Website are recorded, this issues list is specifically for the Chocolatey Application.\nThanks\n. > Got it. Sorry about that!\nNot a problem at all :-)\n. @svnpenn what version of Chocolatey are you using?\nI have just tried what @ferventcoder suggested, but it is working for me.\n. Hmm, same here.\nThe test that I did was to run the chocolateyInstall.ps1 file again for the fiddler4 package which I already had installed.  I wonder if it is something in your chocolateyInstall.ps1 file that is causing the issue.\nCan you share what you have in there?\n. Hmm, looks like the issue is here:\nhttps://github.com/chocolatey/chocolatey/blob/master/src/helpers/functions/Get-ChocolateyUnzip.ps1#L49\nThis environment variable is only set when Chocolatey is run using:\nhttps://github.com/chocolatey/chocolatey/blob/master/src/functions/Run-ChocolateyPS1.ps1#L28\nWhich I \"think\" we/you are circumventing doing things this way.  This certainly \"should\" work, but I think we need to take a look at this.\nFor now, you should be able to progress by first setting this environment variable to the required value, i.e. where you have the package install files, after you load the PowerShell module.\nHTH\n. @gutierri I am not really sure that I understand the reasoning, or what this would look like.\nAre you suggesting that if a maintainer is no longer able to keep a package up to date, that if someone else starts to maintain the package, the original maintainer isn't allowed to access them?\nThis really doesn't sound useful to me, and certainly not the spirit that Chocolatey was built on.\nYes, we are aware that package maintainers come and go, and some packages slip in terms of package versions, but that is inherent in the nature of community contributions.  Doing something like I think you are suggesting would, IMHO, make the situation worse.\nIf you are finding that packages are out of date, please feel free to follow the package triage process which is documented here:\nhttps://github.com/chocolatey/chocolatey/wiki/PackageTriageProcess\n. > Remove the permission of the developer, there Seems to be a good idea even.\nSorry, this is the part that I don't like.  Take as an example the following situation.\nA developer, let's call him Bob, creates a Chocolatey Package, and posts it to Chocolatey.org.  It gets moderated and approved, and people start using it.  It turns out to be a really popular package and lots of people use it.  From time to time, the original application creators release a new version of the application, and Bob updates the Chocolatey Package so that people can get the updates easily.  Then, Bob and his wife have a baby.  Bob doesn't have as much time as he used to, and as a result, the Chocolatey package starts to fall behind in the releases.  The people who are interested in the package start to email Bob and ask him to update the package.  Bob doesn't have time to answer the emails because he is holding a crying baby, and hasn't slept for 48 hours.\nOk, granted, this is a made up situation, but I don't think it is far from a potential situation that could happen.  It doesn't have to be a new baby, it could be a new job, moving house, starting a new hobby.  Lots of things could happen that would prevent a developer updating a Chocolatey package.  To then remove permission for that developer to do anything with the package would be the wrong approach in my opinion.\nRather, is another developer is interested in helping to maintain a package, they can follow the package Triage process, as defined above, and become a co-maintainer of the package.\nHope this makes sense!\n. @ferventcoder I just approved the php package yesterday. It worked fine for me?!?\n. While I see this bug, I am reminded about something else, which is semi-related :-)\nI noticed that the Install-ChocolateyShortcut.ps1 file isn't linked in this file either.  While fixing the first, can this be done also, or you want separate issue?\n. :+1: cool, I can take care of this one.  Hopefully get to it tonight.\n. This is the PR that you are referring to: https://github.com/chocolatey/chocolatey/pull/278\nAnd this looks like exactly what we are going to need.  Although, in his PR he explicitly excludes the file that is being requested in this issue, i.e. UnInstall-ChocolateyZipPackage.\nAlso, this issue is a duplicate of https://github.com/chocolatey/chocolatey/issues/230\nThe PR targets the master branch, you happy for me to go ahead and pull it in, or how do you want to handle this?\n. Ah, gotcha...\n. Done, diddly, done.\n. This simply means that the package is in the moderation queue, and as a result, it will not be shown to search results.  I am looking at the package now, and if it fits all required criteria, it will be approved, otherwise, you will be asked to make changes, and re-published the same version of the package again, with changes.\nGary\n. @sindux Thanks for doing this, this was on my todo list.\nI will get this reviewed and hopefully pull in shortly.\n. Sorry, I am not sure that I follow what you mean...\nWhat are you expecting that the parameter extractionPath is used as the destination path when using the unzip chocolatey helper?\nGary\n. I am still unclear about what you are asking for...\nDoes this help:\nhttps://github.com/chocolatey/chocolatey/wiki/How-To-Parse-PackageParameters-Argument\nGary\n. > Would it be possible to create a function or something? I would like to use this for multiple packages. Is it possible to include this function in InstallChocolatey.ps1. What is your opinion regarding this?\nThere is nothing to stop you adding additional ps1 files to your packages, and simply dot sourcing them for use within your chocolateyInstall.ps1 file.  That way, you maintain your helper functions in one place, and use them across multiple packages.  If you think that these helper functions are generic enough, then by all means, submit them as a pull request, and we can look into whether it makes sense to include them within Chocolatey core.\n. > Closed as a solution has been found\nFor the benefit of others who might find this issue as the result of a search, could you share what you are now doing?\nGary\n. Thank you! :-)\n. > Closed as a solution has been found\nAgain, can you share what you are now doing? Thanks!\n. Thank you! :-)\n. I think that this might be a better location for this issue:\nhttps://github.com/chocolatey/chocolatey-package-updater\nWhen you move it there, can you provide some more details about the problem that you are having, with steps to reproduce?\n. @ferventcoder can you provide a link to where this is done in the source code?  I have heard @mwrock talk about this as well, but I have never hunted it out.\n. Thanks! :-)\n. @ferventcoder is this an issue with the Atom package, rather than with Chocolatey?  Or something that will be addressed in vNext?\n. > Correct me if I\u2019m wrong, but could this have to do something with the recent force lowercasing the package IDs?\nI don't think so, or see how.  I have just done a choco update atom, which took my installation from 0.116.0 to 0.154.0 and the install worked fine.\n. > so if the installer chrashes... choco thinks it has already installed the latest version...\nThis is a side effect of the way chocolatey currently does the installation, something which is changing in vNext of Chocolatey.\n. @juliankrispel thanks for the offer of a contribution!  ChocolateyGUI would welcome any assistance you can provide as well :-)  https://github.com/chocolatey/ChocolateyGUI\n. Noice!  Of the two, I think I prefer the top one :-)\nWhat do you think @ferventcoder ?\nThe one thing I would say is that it does sort of remind me of the Commodore 64 logo.\n. I quite like this one:\n\n. Wow, these are really good!  Great work @juliankrispel Personally, I also like 8 a lot, but I keep coming back to normal 6 as well.  I really like the colours, although I appreciate they are completely different to what we have now :smile_cat: \n. > With the icon I'm a fan of no colon. 1b with white C is also quite interesting.\nAgreed, I like 1b because of the bevelled edge on the \"wrapper\" of the chocolate.  No colon gets my vote as well.\n. @ferventcoder I like the Jolly Roger Regular :+1: \n. @juliankrispel thanks for getting back to us about this, really appreciate it! :smile_cat: \n. Hey,\nHave a look at github.com/chocolatey/chocolateygui it bundles the msi within its Chocolatey package.  I agree that we need some more documentation in this area though.\nGary\nSent from my Windows Phone\n\nFrom: David Keanmailto:notifications@github.com\nSent: \u200e21/\u200e12/\u200e2014 17:52\nTo: chocolatey/chocolateymailto:chocolatey@noreply.github.com\nSubject: [chocolatey] [wiki] Create Packages needs a little more guidance around raw binaries (#646)\nHey, new to chocolatey and after getting an issue file against me to add a chocolatey package for https://github.com/davkean/audio-switcher I went to the the wiki to understand what that meant.\nAfter just reading the wiki (in particular, https://github.com/chocolatey/chocolatey/wiki/CreatePackages), it's unclear to me what exactly I put in the package - all the examples show using chocolateyInstall.ps1 to download from the web and run the installer. This makes sense because most of top packages seem to be wrappers around existing applications (Chrome, Notepad2, etc).\nBut I don't have a installer, or a web site with the binaries. Is there a way to just put the executable in the package and call it a day? If there is, the wiki doesn't call this out.\nIt would be great if you had a flow chat, ie \"if  you have a traditional MSI on a web, do this\", \"if you just have raw binary do this other thing\", etc.\nThanks\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/issues/646\n. > Hey, thanks Gary, will do.\nLet us know if you run into any problems with getting the package created.  We can leave this issue open as a reminder to improve the documentation in this area.\nGary\n. @ahmedmohiduet in both the Command Window and PowerShell Window you will get a download progress indication, as shown here:\n\n\nThese will disappear once the file download happens.  Anything after that is just the installation time.\nDoes that help?\nGary\n. In order for this to work, you would have to do the following:\nchoco install nodejs.install\nClose and re-open your Command/PowerShell window\nnpm install -g grunt-cli\nnpm install -g bower\nThe important thing here is the closing of the shell to get the initial npm installs to work.\nHope that helps!\nGary\n. @aronovgj I think that this issue would be best added here:\nhttps://github.com/chocolatey/chocolatey-package-updater\nCan you please re-create the issue there, and I will close this issue.\nThanks\n. @aronovgj please accept my apologies, I was unaware of the history of this issue, and based on the wording, I believed it sounded like a ChocoPkgUp.exe issue, not a native Chocolatey one.\n. > Dont know if was session timeout or something, or if the group is moderated and the post will show up later? \nYes, the forums are moderated.  I don't see it in the queue for moderation though.  Hopefully it will turn up, and if/when it does, it will get approved.  Thanks for taking the time to explain this further.\n. @andulv I have just approved your Google Groups post :+1: \n. > Would it be possible to go for one of these pledges even though the Kickstarter is closed?\nSorry, I am going to have to leave that question for @ferventcoder.  I know that he is out just now, but he will definitely follow up with you.\n. > Definitely should stay with equals if possible.\nThis is my opinion as well, but wanted to understand the thought process that @glennsarti had before rolling back.\n. Thanks for getting back to me.\nI was almost convinced that I tested the code that I used before I posted it into the wiki, but sounds like there is an issue there.  Let me look at this again, and make sure it is correct.\nThanks for bringing to it our attention!\n. Hmm, looking again, look like Matt is using a : as the separator within his packages:\nhttps://chocolatey.org/packages/VisualStudio2013Ultimate\nI must have tried to change this to = and messed up the article.\nI will correct this.\n. > No problem. Also, should I be allowed to make changes to wiki like that, or should I be raising an issue first?\nThat would be for @ferventcoder to comment on for the official answer :smile_cat: \nIn my mind, editing the wiki should be allowed, crowd sourcing documentation has a lot of merit.  However, perhaps we might want to use a Pull Request model for this, rather than allowing editing directly, to ensure the changes are actually required/desired.\n. > perhaps. How does on PR wiki docs?\nBoo! I thought since the wiki is just a git repo under the hood that this would be possible, but looks like you have to fudge it!\nhttp://fusiongrokker.com/post/how-you-can-contribute-to-taffy-documentation\n. > Do we need a bin root? Or is it that choco is not doing a sufficient job in some cases?\nWith the changes that are coming in vNext, or at least, how I understand them, the need to Get-BinRoot should become non-existent, but that does raise the question about deprecating and updating the use of it.\n. Closing this, as it is a duplicate of https://github.com/chocolatey/chocolatey/issues/675\n. @dschinkel can you execute the following command:\nchoco install filezilla -force -debug\nAnd paste the output into a gist and link to it from here?\nAlso, what version of Windows are you on?  And what version of Chocolatey? Are you running from PowerShell or from Command Window?  And are you running either of these as an Administrator?\n. Chocolatey \"knows\" which packages are installed, based on what folders exist in the lib folder.  This is what is used as the \"index\" of installed packages.\n. Yes, that is intended.  See here:\nhttps://github.com/chocolatey/chocolatey.org/issues/162\nFor more information.\n. @DarwinCSIWindowscom can I get you to re-create your issue here:\nhttps://github.com/chocolatey/choco/issues\nThis is where all new work will be carried out.\nThanks!\n. Sorry to hear that you are having issues!\nCan you please try the answer to this StackOverflow question:\nhttp://stackoverflow.com/questions/30720496/why-is-powershell-not-recognized-when-installing-chocolatey\n. Not sure where the MySQL command would be coming into play though?!?\n. @hifriend21 you will likely need to close and open the command window for the PATH change to take effect.  Did you do this?\nCan you output what is currently in your PATH variable here?\n. What happens if you try just @powershell\n. That was going to be my next question! :-)\nIf you hit the Windows key, and then search for powershell, does anything come up?\n. > @hifriend21 said...\n\nWhich is I can't even install the powershell.Thanks for helping, there is no other ways to get chocolatey, exept cmd?\n\nWhile there are other way's to do the install, none of them really matter.  Chocolatey, at the minute, has a direct dependency on PowerShell.  If you don't have that installed, then unfortunately, you won't be able to use Chocolatey.\n. ",
    "jpoehls": "You might try scrapping the http://mercurial.selenic.com/sources.js file to get the \"most recent version\" links.\n. You might try scrapping the http://mercurial.selenic.com/sources.js file to get the \"most recent version\" links.\n. ",
    "marisks": "Thanks! I thought that Windows 7 SP1 has .NET 4 by default.\n. Thanks! I already installed it manually. \nI also noticed that Paint.NET has installing issue - it downloads correctly, but fails on installation (I forgot to copy error message). Installation from package folder manually succeeds.\n. Thanks! I thought that Windows 7 SP1 has .NET 4 by default.\n. Thanks! I already installed it manually. \nI also noticed that Paint.NET has installing issue - it downloads correctly, but fails on installation (I forgot to copy error message). Installation from package folder manually succeeds.\n. ",
    "9point6": "Yeah, on every package. Just tried again on a random one:\n```\nWindows PowerShell\nCopyright (C) 2009 Microsoft Corporation. All rights reserved.\nPS C:\\Users\\John> cinst pstools\nChocolatey (0.9.8.11) is installing pstools (from https://go.microsoft.com/fwlink/?LinkID=206669) to \"C:\\NuGet\\lib\"\nPackage License Acceptance Terms\nPlease run chocolatey /? for full license acceptance verbage. By installing you accept the license for the package you a\nre installing...\n\n\nNuGet\nSuccessfully installed 'pstools 1.0.0.3'.\n-------------------------\nChocolatey Runner (PSTOOLS)\n\nChocolatey Installation (chocolateyinstall.ps1)\nLooking for chocolateyinstall.ps1 in folder C:\\NuGet\\lib\\pstools.1.0.0.3\nIf chocolateyInstall.ps1 is found, it will be run.\n\nRunning powershell -NoProfile -ExecutionPolicy unrestricted -Command \"& import-module -name  'C:\\NuGet\\chocolateyInstall\n\\helpers\\chocolateyInstaller.psm1'; & 'C:\\NuGet\\lib\\pstools.1.0.0.3\\tools\\chocolateyInstall.ps1'\". This may take awhile\nand permissions may need to be elevated, depending on the package.\nException calling \"Start\" with \"1\" argument(s): \"The system cannot find the file specified\"\nAt C:\\NuGet\\chocolateyInstall\\chocolatey.ps1:33 char:43\n+   $s = [System.Diagnostics.Process]::Start <<<< ($psi);\n    + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException\n    + FullyQualifiedErrorId : DotNetMethodException\nYou cannot call a method on a null-valued expression.\nAt C:\\NuGet\\chocolateyInstall\\chocolatey.ps1:34 char:17\n+   $s.WaitForExit <<<< ();\n    + CategoryInfo          : InvalidOperation: (WaitForExit:String) [], RuntimeException\n    + FullyQualifiedErrorId : InvokeMethodOnNull\n[ERROR] Running powershell with -NoProfile -ExecutionPolicy unrestricted -Command \"& import-module -name  'C:\\NuGet\\choc\nolateyInstall\\helpers\\chocolateyInstaller.psm1'; & 'C:\\NuGet\\lib\\pstools.1.0.0.3\\tools\\chocolateyInstall.ps1'\" was not s\nuccessful.\n\nExecutable Batch Links\nLooking for executables in folder: C:\\NuGet\\lib\\pstools.1.0.0.3\nAdding batch files for any executables found to a location on PATH. In other words the executable will be available from\n ANY command line/powershell prompt.\n\nThere are no executables in the package.\n=====================================================\nChocolatey has finished installing pstools\n=====================================================\nPS C:\\Users\\John> cup\nYou have the latest version of chocolatey (0.9.8.11) based on (https://go.microsoft.com/fwlink/?LinkID=206669).\nPS C:\\Users\\John> cup all\nYou have the latest version of Console2 (2.0) based on (https://go.microsoft.com/fwlink/?LinkID=206669).\nYou have the latest version of grepwin (1.5.3) based on (https://go.microsoft.com/fwlink/?LinkID=206669).\nYou have the latest version of nodejs (0.5.9) based on (https://go.microsoft.com/fwlink/?LinkID=206669).\nYou have the latest version of pstools (1.0.0.3) based on (https://go.microsoft.com/fwlink/?LinkID=206669).\n```\n. I found the problem, For some reason powershell wasn't in my path. (I didn't check because I figured it would be there by default)\nStock windows 7 PS2.0 btw.\n. Yeah, on every package. Just tried again on a random one:\n```\nWindows PowerShell\nCopyright (C) 2009 Microsoft Corporation. All rights reserved.\nPS C:\\Users\\John> cinst pstools\nChocolatey (0.9.8.11) is installing pstools (from https://go.microsoft.com/fwlink/?LinkID=206669) to \"C:\\NuGet\\lib\"\nPackage License Acceptance Terms\nPlease run chocolatey /? for full license acceptance verbage. By installing you accept the license for the package you a\nre installing...\n\n\nNuGet\nSuccessfully installed 'pstools 1.0.0.3'.\n-------------------------\nChocolatey Runner (PSTOOLS)\n\nChocolatey Installation (chocolateyinstall.ps1)\nLooking for chocolateyinstall.ps1 in folder C:\\NuGet\\lib\\pstools.1.0.0.3\nIf chocolateyInstall.ps1 is found, it will be run.\n\nRunning powershell -NoProfile -ExecutionPolicy unrestricted -Command \"& import-module -name  'C:\\NuGet\\chocolateyInstall\n\\helpers\\chocolateyInstaller.psm1'; & 'C:\\NuGet\\lib\\pstools.1.0.0.3\\tools\\chocolateyInstall.ps1'\". This may take awhile\nand permissions may need to be elevated, depending on the package.\nException calling \"Start\" with \"1\" argument(s): \"The system cannot find the file specified\"\nAt C:\\NuGet\\chocolateyInstall\\chocolatey.ps1:33 char:43\n+   $s = [System.Diagnostics.Process]::Start <<<< ($psi);\n    + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException\n    + FullyQualifiedErrorId : DotNetMethodException\nYou cannot call a method on a null-valued expression.\nAt C:\\NuGet\\chocolateyInstall\\chocolatey.ps1:34 char:17\n+   $s.WaitForExit <<<< ();\n    + CategoryInfo          : InvalidOperation: (WaitForExit:String) [], RuntimeException\n    + FullyQualifiedErrorId : InvokeMethodOnNull\n[ERROR] Running powershell with -NoProfile -ExecutionPolicy unrestricted -Command \"& import-module -name  'C:\\NuGet\\choc\nolateyInstall\\helpers\\chocolateyInstaller.psm1'; & 'C:\\NuGet\\lib\\pstools.1.0.0.3\\tools\\chocolateyInstall.ps1'\" was not s\nuccessful.\n\nExecutable Batch Links\nLooking for executables in folder: C:\\NuGet\\lib\\pstools.1.0.0.3\nAdding batch files for any executables found to a location on PATH. In other words the executable will be available from\n ANY command line/powershell prompt.\n\nThere are no executables in the package.\n=====================================================\nChocolatey has finished installing pstools\n=====================================================\nPS C:\\Users\\John> cup\nYou have the latest version of chocolatey (0.9.8.11) based on (https://go.microsoft.com/fwlink/?LinkID=206669).\nPS C:\\Users\\John> cup all\nYou have the latest version of Console2 (2.0) based on (https://go.microsoft.com/fwlink/?LinkID=206669).\nYou have the latest version of grepwin (1.5.3) based on (https://go.microsoft.com/fwlink/?LinkID=206669).\nYou have the latest version of nodejs (0.5.9) based on (https://go.microsoft.com/fwlink/?LinkID=206669).\nYou have the latest version of pstools (1.0.0.3) based on (https://go.microsoft.com/fwlink/?LinkID=206669).\n```\n. I found the problem, For some reason powershell wasn't in my path. (I didn't check because I figured it would be there by default)\nStock windows 7 PS2.0 btw.\n. ",
    "brane": "Actually, I discovered capital \"I\" is always introducing problems. For example if I type \"cinst ChocolateyGUI\", it says \"Unable to find package 'ChocolateyGUI'\" but if I type \"cinst ChocolateyGUi\" it downloads the package. But I also had to rename \"lib\\ChocolateyGUI.0.0.5\\tools\\SetupChocolateyGUI.msi\" to \"lib\\ChocolateyGUi.0.0.5\\tools\\SetupChocolateyGUi.msi\" and \"cinst\" again to make it install properly.\n. I can't remember of any instance that i18n and l10n made a developers life any easier :)\n. Actually, I discovered capital \"I\" is always introducing problems. For example if I type \"cinst ChocolateyGUI\", it says \"Unable to find package 'ChocolateyGUI'\" but if I type \"cinst ChocolateyGUi\" it downloads the package. But I also had to rename \"lib\\ChocolateyGUI.0.0.5\\tools\\SetupChocolateyGUI.msi\" to \"lib\\ChocolateyGUi.0.0.5\\tools\\SetupChocolateyGUi.msi\" and \"cinst\" again to make it install properly.\n. I can't remember of any instance that i18n and l10n made a developers life any easier :)\n. ",
    "AnthonyMastrean": "NuGet.exe version in my chocolatey install dir: 1.5.20905.5\n. My -source at the time of failure was  in my user profile path, D:\\users\\Anthony Mastrean\\Dropbox\\Projects, which contains spaces. I moved the package to a path without spaces, D:\\temp, and ran \nPS> cinst windowpad -source d:\\temp\nand it worked! So, I guess I should file a bug around cinst if the -source contains spaces?\n. I think PowerShell was consuming my quotes to expand $pwd.\nPS> cinst windowpad -source \"$pwd\"\nturned into \nPS> cinst windowpad -source d:\\users\\anthony mastrean\\dropbox\\projects\nI have to drive to NJ right now, but when I get there I'll try \nPS> cinst windowpad -source \"`\"$pwd`\"\"\nwhich should turn into \nPS> cinst windowpad -source \"d:\\users\\anthony mastrean\\dropbox\\projects\"\ngotta love PowerShell path escaping! I'm going to look in the cinst script to see if there's a place we can quote there. Push the problem as far as possible to the final NuGet commad or something.\n. Yeah, I'm finally back home on my space-having-install-path machine. I'll load up my findings in an accurate issue :)\n. I submitted issue #67 to track the idea.\n. Yikes, this is showing all my commits. How do I squash them into one, but keep the branch? Or maybe that's a case of 'lying to source control' and should be avoided. Looks like you've got the options on your side.\nEDIT: I found the diff view! Nevermind about all that.\n. These latest commits add a better test for the -packageName actually being apackages.configfile. AndChocolatey-PackagesConfigcallsChocolatey-Installwith the-source` specified, so you can write a manifest like\n<packages>\n    <package id=\"whatever\" />\n    <package id=\"whatever.x64\" version=\"0.1\" />\n    <package id=\"foobar\" version=\"0.1.87\" source=\"myget.com/apikey/myfeed\" />\n    <package id=\"somegem\" source=\"ruby\" />\n    <package id=\"somewebthing\" source=\"webpi\" />\n</packages>\n. Chocolatey could always install a NuGet package as part of installing itself. That way it's updateable.\n. This command does work and might be a work-around.\nInstall-ChocolateyInstallPackage 'mypackage' 'EXE' '/S' ' file:///mylocalnetwork/gallery/myproduct.exe '\n. Relevant comment from @ferventcoder on the discussion: \n\nWe could probably put some code in to make it work with files not coming over HTTP. In the meantime, Install-ChocolateyInstallPackage will work for things as long as the installer doesn't require being installed from a local drive. In those cases you could copy the installer to a temp directory and then call Install-ChocolateyInstallPackage. Would this work for you for now? \n. It doesn't seem to cause any problems. I've been able to use and develop with the latest Chocolatey since. I'm curious where it's coming from and what code is trying to read the current thread culture or import a module... unless it's unescaped documentation that's being executed.\n. I did a search through the ps1 files and I can't find CurrentUICulture in a string format anywhere. And the only import-module is in a comment.\n. Where's that NuGet.bat file stored and how does it get on the disk? I haven't had time to look through the repo. If you're doing the usual here-string to file routine, just edit the raw contents for the next release.\n\n@\"@echo off\nbat file contents here \n\"@ | Out-File\n. Will there be a nuget exe package? Or are there problems with that because of the way CodePlex deals with license agreements?\n. oh snap, I'm on it ;)\n. My package didn't end in .config it contained .config. in the middle. There must be some regex (or another matching technique) that can tell that a string ends with .config.\n. There's a tradeoff with any solution. NuGet is being strict on the manifest file name (only packages.config is allowed) and getting a little flexibility in package names (may end in .config). We're being loose on the manifest name (must be a .config file) and losing a little flexibility in package naming (may not end in .config).\nThe EndsWith is ok, as long as we're clear in the documentation (btw, where is NuGet's docs on manifests?)\n. Here's a shortcut function I've been using at work to automate all sorts of shortcuts. (updated, this link should stay put for a while)\n. And I'm confused by which nuget version is being used... my chocolatey batch files are pointing to \n%chocolateyInstall%\\chocolateyInstall\\\nBut, the nuget batch file is pointing to \n%chocolateyInstall%\\lib\\chocolatey.0.9.8.13\\tools\\chocolateyInstall\nSo, when I updated nuget\ncmd> nuget update -self\nIt updated the one in the lib and then when I use cinst, it uses the nuget in the chocolateyInstall directory!\n. Ok, this is getting weird. I have a different ChocolateyInstall value depending on the scope of the variable. I don't know where I got them all. I just re-installed Windows and downloaded my domain profile again. Maybe the bug is that the user/process variable gets set differently. I haven't actually dug into the code yet.\n```\nPS> [environment]::GetEnvironmentVariable('ChocolateyInstall', 'Machine')\n(null)\nPS> [environment]::GetEnvironmentVariable('ChocolateyInstall', 'User')\nC:\\Chocolatey\nPS> [environment]::GetEnvironmentVariable('ChocolateyInstall', 'Process')\nC:\\Chocolatey\\bin\n``\n. Done, works ;)\n. I'm excited about this one, need it for some complicated packages that depend on the hg and 7zip command line packages first, to enable installing itself ([hggit](http://chocolatey.org/packages/hggit)).\n. I'm sooo waiting for this feature, it was working by accident for a while. One of my earliest packages was on an FTP server (prime95). I think the enhancements around theCookieContainer` stuff started breaking it. Anyway, this pull request looks good.\nSomething to consider in general, the HttpWebRequest and FtpWebRequest method Create is actually defined on WebRequest and can return any subtype. So, I can put \"ftp://\" in Get-WebFile and it breaks mysteriously.\n. I just noticed that openwrap is using o on the command line... I bet chocolatey could take over as just c. It reads well, too...\n``` cmd\n\nc install foo\nc list foo\n```\n. Awesome, thanks for the quick fix.\n. If it's pressing and you want it on your personal machine, just download the patch and overwrite the file ;)\n. I'm all in for a font install helper. And I have no doubt that the one that @Iristyle found on the technet blog is the most enterprisey (safe for all edge cases, the most correct implementation, no pesky dialogs, etc). But, I'm always bothered by scripts that claim to do something in \"pure powershell\" and then inline a huge chunk of C#.\n- How do we know that chunk even compiles?\n- How do we put that chunk under test?\n- How high have we raised the bar to contribute to this feature?\n\nThoughts? Is it worth the risk? Does any other implementation satisfy the basic requirements with much less risk?\n. Is that different than the UninstallString solution? Maybe I misunderstood the uninstall technology/scenario and mislabeled this issue. I just wanted to promote Matt's effort out of a discussion and into an issue. It feels more legit ;)\nIf someone understands the problem better than I do, please edit!\n. More commentary here: https://groups.google.com/forum/#!topic/chocolatey/vqB0y22eWaQ\n. I can supply the patch if you agree it's broken :)\n. Can I use pester to mock the 7za call?\n. OMG, it's that easy, huh? I guess powershell isn't treating native commands differently than cmdlets, it's interpreting everything and if it finds my mock first, I win, right?\nActually... am I able to mock a full file path? The script joins together everything down to the .exe.\npowershell\n$7zip = Join-Path \"$env:ChocolateyInstall\" 'chocolateyinstall\\tools\\7za.exe'\nNevermind, I'm mocking Start-Process instead, got it ;)\n. I'll take care of that too ;)\n. Nah, life attacked and I haven't gotten around to it or a million other things I want to work on ;) I do remember my initial patch not working entirely (there's a lot of quoting/escaping going on in the line in question). But, this can be a good reminder to get on it.\n. Alright, tested again after updating Chocolatey and it still searches for these EXEs and creates EXE shims.\n. It's not my package yet, but I'm looking to take it over, which is why I am testing :)\nI updated the \"cleaned up\" statement in the description above. I'm trying to say that I was being thorough. I reverted to a 1.11-only state: Chocolatey lib, Control Panel, %TEMP%... all 1.11. No trace of 1.12.\n. The choco install command for a newer package is using the cached installer for the old package. Sorry, was that not clear?\n\nI could test the same scenario with specific older versions of an existing, public package to remove any local source variability (though, I don't suspect that's part of the problem).\n. Chocolatey install is using the older package's cached installer even though Chocolatey finds a newer package (in this case, in my local -source). That's a bug. FYI, update works in this scenario and skips the installer cache.\nWhat's the intended behavior of install when you already have an older version of the package installed? I don't think it's reasonable to expect the user to list installed packages before choosing between install or update. It's not correct either way to use the old installer and then say the new version is successfully installed.\n. Not even close, 1.11 is about 5,664 KB and 1.12 is about 11,644 KB.\n. I'll try to repro it with a published package. But, you should still try it with a local package... I can send you my local pandoc 1.12 package for exact repro.\n. Haha, yeah, image URLs in Markdown are wild.\n. The tipper pays the fee. https://www.gittip.com/about/\n. @rismoney no scheming, this is about gratitude!\n. I've seen that same problem with the machine autorun and ansicon. That package is overly complicated. I'm working on a cleaner, more consistent install script and should probably focus on the uninstall script, as well.\nI would like to use the built-in install/uninstall switches, which purport to do all this work for you, but the maintainers have claimed that it doesn't always work (except, without any test cases).\nhttps://github.com/AnthonyMastrean/ChocoPackages-1/blob/b3885b6940ad35b3ef27ad08bb5d3c314fad9cc9/AnsiCon/tools/ChocolateyInstall.ps1\n. :christmas_tree: :gift:\nWhat I just pushed should be a lot more robust. It should handle removing and/or replacing the ansicon autorun statement from\n- previous versions of this package\n- ansicon -i/I/u/U flags\n- hand-edited AutoRun properties\nhttps://github.com/AnthonyMastrean/ChocoPackages-1/blob/ansicon/AnsiCon/tools/ansicon.ps1\n. NuGet.exe version in my chocolatey install dir: 1.5.20905.5\n. My -source at the time of failure was  in my user profile path, D:\\users\\Anthony Mastrean\\Dropbox\\Projects, which contains spaces. I moved the package to a path without spaces, D:\\temp, and ran \nPS> cinst windowpad -source d:\\temp\nand it worked! So, I guess I should file a bug around cinst if the -source contains spaces?\n. I think PowerShell was consuming my quotes to expand $pwd.\nPS> cinst windowpad -source \"$pwd\"\nturned into \nPS> cinst windowpad -source d:\\users\\anthony mastrean\\dropbox\\projects\nI have to drive to NJ right now, but when I get there I'll try \nPS> cinst windowpad -source \"`\"$pwd`\"\"\nwhich should turn into \nPS> cinst windowpad -source \"d:\\users\\anthony mastrean\\dropbox\\projects\"\ngotta love PowerShell path escaping! I'm going to look in the cinst script to see if there's a place we can quote there. Push the problem as far as possible to the final NuGet commad or something.\n. Yeah, I'm finally back home on my space-having-install-path machine. I'll load up my findings in an accurate issue :)\n. I submitted issue #67 to track the idea.\n. Yikes, this is showing all my commits. How do I squash them into one, but keep the branch? Or maybe that's a case of 'lying to source control' and should be avoided. Looks like you've got the options on your side.\nEDIT: I found the diff view! Nevermind about all that.\n. These latest commits add a better test for the -packageName actually being apackages.configfile. AndChocolatey-PackagesConfigcallsChocolatey-Installwith the-source` specified, so you can write a manifest like\n<packages>\n    <package id=\"whatever\" />\n    <package id=\"whatever.x64\" version=\"0.1\" />\n    <package id=\"foobar\" version=\"0.1.87\" source=\"myget.com/apikey/myfeed\" />\n    <package id=\"somegem\" source=\"ruby\" />\n    <package id=\"somewebthing\" source=\"webpi\" />\n</packages>\n. Chocolatey could always install a NuGet package as part of installing itself. That way it's updateable.\n. This command does work and might be a work-around.\nInstall-ChocolateyInstallPackage 'mypackage' 'EXE' '/S' ' file:///mylocalnetwork/gallery/myproduct.exe '\n. Relevant comment from @ferventcoder on the discussion: \n\nWe could probably put some code in to make it work with files not coming over HTTP. In the meantime, Install-ChocolateyInstallPackage will work for things as long as the installer doesn't require being installed from a local drive. In those cases you could copy the installer to a temp directory and then call Install-ChocolateyInstallPackage. Would this work for you for now? \n. It doesn't seem to cause any problems. I've been able to use and develop with the latest Chocolatey since. I'm curious where it's coming from and what code is trying to read the current thread culture or import a module... unless it's unescaped documentation that's being executed.\n. I did a search through the ps1 files and I can't find CurrentUICulture in a string format anywhere. And the only import-module is in a comment.\n. Where's that NuGet.bat file stored and how does it get on the disk? I haven't had time to look through the repo. If you're doing the usual here-string to file routine, just edit the raw contents for the next release.\n\n@\"@echo off\nbat file contents here \n\"@ | Out-File\n. Will there be a nuget exe package? Or are there problems with that because of the way CodePlex deals with license agreements?\n. oh snap, I'm on it ;)\n. My package didn't end in .config it contained .config. in the middle. There must be some regex (or another matching technique) that can tell that a string ends with .config.\n. There's a tradeoff with any solution. NuGet is being strict on the manifest file name (only packages.config is allowed) and getting a little flexibility in package names (may end in .config). We're being loose on the manifest name (must be a .config file) and losing a little flexibility in package naming (may not end in .config).\nThe EndsWith is ok, as long as we're clear in the documentation (btw, where is NuGet's docs on manifests?)\n. Here's a shortcut function I've been using at work to automate all sorts of shortcuts. (updated, this link should stay put for a while)\n. And I'm confused by which nuget version is being used... my chocolatey batch files are pointing to \n%chocolateyInstall%\\chocolateyInstall\\\nBut, the nuget batch file is pointing to \n%chocolateyInstall%\\lib\\chocolatey.0.9.8.13\\tools\\chocolateyInstall\nSo, when I updated nuget\ncmd> nuget update -self\nIt updated the one in the lib and then when I use cinst, it uses the nuget in the chocolateyInstall directory!\n. Ok, this is getting weird. I have a different ChocolateyInstall value depending on the scope of the variable. I don't know where I got them all. I just re-installed Windows and downloaded my domain profile again. Maybe the bug is that the user/process variable gets set differently. I haven't actually dug into the code yet.\n```\nPS> [environment]::GetEnvironmentVariable('ChocolateyInstall', 'Machine')\n(null)\nPS> [environment]::GetEnvironmentVariable('ChocolateyInstall', 'User')\nC:\\Chocolatey\nPS> [environment]::GetEnvironmentVariable('ChocolateyInstall', 'Process')\nC:\\Chocolatey\\bin\n``\n. Done, works ;)\n. I'm excited about this one, need it for some complicated packages that depend on the hg and 7zip command line packages first, to enable installing itself ([hggit](http://chocolatey.org/packages/hggit)).\n. I'm sooo waiting for this feature, it was working by accident for a while. One of my earliest packages was on an FTP server (prime95). I think the enhancements around theCookieContainer` stuff started breaking it. Anyway, this pull request looks good.\nSomething to consider in general, the HttpWebRequest and FtpWebRequest method Create is actually defined on WebRequest and can return any subtype. So, I can put \"ftp://\" in Get-WebFile and it breaks mysteriously.\n. I just noticed that openwrap is using o on the command line... I bet chocolatey could take over as just c. It reads well, too...\n``` cmd\n\nc install foo\nc list foo\n```\n. Awesome, thanks for the quick fix.\n. If it's pressing and you want it on your personal machine, just download the patch and overwrite the file ;)\n. I'm all in for a font install helper. And I have no doubt that the one that @Iristyle found on the technet blog is the most enterprisey (safe for all edge cases, the most correct implementation, no pesky dialogs, etc). But, I'm always bothered by scripts that claim to do something in \"pure powershell\" and then inline a huge chunk of C#.\n- How do we know that chunk even compiles?\n- How do we put that chunk under test?\n- How high have we raised the bar to contribute to this feature?\n\nThoughts? Is it worth the risk? Does any other implementation satisfy the basic requirements with much less risk?\n. Is that different than the UninstallString solution? Maybe I misunderstood the uninstall technology/scenario and mislabeled this issue. I just wanted to promote Matt's effort out of a discussion and into an issue. It feels more legit ;)\nIf someone understands the problem better than I do, please edit!\n. More commentary here: https://groups.google.com/forum/#!topic/chocolatey/vqB0y22eWaQ\n. I can supply the patch if you agree it's broken :)\n. Can I use pester to mock the 7za call?\n. OMG, it's that easy, huh? I guess powershell isn't treating native commands differently than cmdlets, it's interpreting everything and if it finds my mock first, I win, right?\nActually... am I able to mock a full file path? The script joins together everything down to the .exe.\npowershell\n$7zip = Join-Path \"$env:ChocolateyInstall\" 'chocolateyinstall\\tools\\7za.exe'\nNevermind, I'm mocking Start-Process instead, got it ;)\n. I'll take care of that too ;)\n. Nah, life attacked and I haven't gotten around to it or a million other things I want to work on ;) I do remember my initial patch not working entirely (there's a lot of quoting/escaping going on in the line in question). But, this can be a good reminder to get on it.\n. Alright, tested again after updating Chocolatey and it still searches for these EXEs and creates EXE shims.\n. It's not my package yet, but I'm looking to take it over, which is why I am testing :)\nI updated the \"cleaned up\" statement in the description above. I'm trying to say that I was being thorough. I reverted to a 1.11-only state: Chocolatey lib, Control Panel, %TEMP%... all 1.11. No trace of 1.12.\n. The choco install command for a newer package is using the cached installer for the old package. Sorry, was that not clear?\n\nI could test the same scenario with specific older versions of an existing, public package to remove any local source variability (though, I don't suspect that's part of the problem).\n. Chocolatey install is using the older package's cached installer even though Chocolatey finds a newer package (in this case, in my local -source). That's a bug. FYI, update works in this scenario and skips the installer cache.\nWhat's the intended behavior of install when you already have an older version of the package installed? I don't think it's reasonable to expect the user to list installed packages before choosing between install or update. It's not correct either way to use the old installer and then say the new version is successfully installed.\n. Not even close, 1.11 is about 5,664 KB and 1.12 is about 11,644 KB.\n. I'll try to repro it with a published package. But, you should still try it with a local package... I can send you my local pandoc 1.12 package for exact repro.\n. Haha, yeah, image URLs in Markdown are wild.\n. The tipper pays the fee. https://www.gittip.com/about/\n. @rismoney no scheming, this is about gratitude!\n. I've seen that same problem with the machine autorun and ansicon. That package is overly complicated. I'm working on a cleaner, more consistent install script and should probably focus on the uninstall script, as well.\nI would like to use the built-in install/uninstall switches, which purport to do all this work for you, but the maintainers have claimed that it doesn't always work (except, without any test cases).\nhttps://github.com/AnthonyMastrean/ChocoPackages-1/blob/b3885b6940ad35b3ef27ad08bb5d3c314fad9cc9/AnsiCon/tools/ChocolateyInstall.ps1\n. :christmas_tree: :gift:\nWhat I just pushed should be a lot more robust. It should handle removing and/or replacing the ansicon autorun statement from\n- previous versions of this package\n- ansicon -i/I/u/U flags\n- hand-edited AutoRun properties\nhttps://github.com/AnthonyMastrean/ChocoPackages-1/blob/ansicon/AnsiCon/tools/ansicon.ps1\n. ",
    "bennage": "Can chocolatey generate a package file based on what's currently installed? Or is that still manual?\n. Thanks! I love this project btw.\n. Verified. I do need to restart that console, but that's expected.\n. Can chocolatey generate a package file based on what's currently installed? Or is that still manual?\n. Thanks! I love this project btw.\n. Verified. I do need to restart that console, but that's expected.\n. ",
    "CMCDragonkai": "There's several aspects that would need to be addressed:\n1. Programs that install into Program Files\n2. Programs that install into AppData\n3. Program that are also installers themselves like installing npm into D drive, you want to control where npm also installs its packages\n4. Programs that automatically put configuration files. Some programs I've noticed even after I install into D drive, they install their config into C drive.\n5. Programs that are self-contained executables or just scripts, these can be easily moved around.\n. Thanks for the information. When I said unmaintained I didn't mean it was on purpose, but simply that it hasn't been updated for 2 years. (2010 to 2013). But good to know there's a process. It's just when you see other package managers, they are usually directly linked to the github repository, allowing authors to update the package as soon as they make a tagged release on their github repo. Of course Chocolatey covers more stuff than the stuff on Github, so another solution will be required...\n. You could try adding an interface and adapter. So I as a user shouldn't need to know what the exact install arguments, I just need a consistent interface. But as the package manager I would apply an adapter accordingly. From: Rob Reynolds Sent: Tue, Jul 9, 2013 23:57To: chocolatey/chocolatey chocolatey@noreply.github.comCC: Roger Qiu roger.qiu@polycademy.comSubject: Re: [chocolatey] Change installation directory of packages (#314)You would need to know natively what the install arguments are that you would pass to each installer to do this. It is not a trivial task for us to handle this with chocolatey and a universal switch as each installer could do it differently, but it is on our list: #32 \n\u2014Reply to this email directly or view it on GitHub.\n. Will all *.install packages create a symlink in %ALLUSERSPROFILE%/chocolatey/bin?\n. There's several aspects that would need to be addressed:\n1. Programs that install into Program Files\n2. Programs that install into AppData\n3. Program that are also installers themselves like installing npm into D drive, you want to control where npm also installs its packages\n4. Programs that automatically put configuration files. Some programs I've noticed even after I install into D drive, they install their config into C drive.\n5. Programs that are self-contained executables or just scripts, these can be easily moved around.\n. Thanks for the information. When I said unmaintained I didn't mean it was on purpose, but simply that it hasn't been updated for 2 years. (2010 to 2013). But good to know there's a process. It's just when you see other package managers, they are usually directly linked to the github repository, allowing authors to update the package as soon as they make a tagged release on their github repo. Of course Chocolatey covers more stuff than the stuff on Github, so another solution will be required...\n. You could try adding an interface and adapter. So I as a user shouldn't need to know what the exact install arguments, I just need a consistent interface. But as the package manager I would apply an adapter accordingly. From: Rob Reynolds Sent: Tue, Jul 9, 2013 23:57To: chocolatey/chocolatey chocolatey@noreply.github.comCC: Roger Qiu roger.qiu@polycademy.comSubject: Re: [chocolatey] Change installation directory of packages (#314)You would need to know natively what the install arguments are that you would pass to each installer to do this. It is not a trivial task for us to handle this with chocolatey and a universal switch as each installer could do it differently, but it is on our list: #32 \n\u2014Reply to this email directly or view it on GitHub.\n. Will all *.install packages create a symlink in %ALLUSERSPROFILE%/chocolatey/bin?\n. ",
    "voltagex": "Couldn't this also be done with directory junctions?\n. > run the one on the front page of chocolatey.org \nBlocked on my system.\n. Couldn't this also be done with directory junctions?\n. > run the one on the front page of chocolatey.org \nBlocked on my system.\n. ",
    "iMingLei": "+1\n. +1\n. ",
    "alexchandel": "A complementary option, which becomes more viable as chocolatey grows, and is ultimately optimal for chocolatey, is to persuade developers to provide .zip/.7z releases instead of msi/exes. Archives can easily be made into self-contained chocolatey packages.\nIn most cases this requires little to no refactoring on their part. The primary difficulty lies in the set of packages that ship different, incompatible versions of MinGW, i.e. StrawberryPerl, HaskellPlatform, etc. These packages already fail unpredictably when they are merely present in the wrong order on the PATH. Eventually, each of these will need to either: harmonize around one version of MinGW, which chocolatey would provide as a package, shimmed in C:\\ProgramData\\chocolatey\\bin; or be refactored to locate their compiler toolchain in their own sandbox (e.g. StrawberryPerl would find its linker at$(dirname perl.exe)/../../c/bin/ld.exerather than theld.exein the PATH).\n. Homebrew is capable of showing both dependencies (brew depends gcc) and reverse dependencies (brew uses gcc) with ease.\n. Homebrew also has two forms,brew uses gcc, which lists all dependent formulae, andbrew uses --installed gcc, which only lists installed ones. Useful when you're fixing installed packages.. A complementary option, which becomes more viable as chocolatey grows, and is ultimately optimal for chocolatey, is to persuade developers to provide.zip/.7zreleases instead ofmsi/exe`s. Archives can easily be made into self-contained chocolatey packages.\nIn most cases this requires little to no refactoring on their part. The primary difficulty lies in the set of packages that ship different, incompatible versions of MinGW, i.e. StrawberryPerl, HaskellPlatform, etc. These packages already fail unpredictably when they are merely present in the wrong order on the PATH. Eventually, each of these will need to either: harmonize around one version of MinGW, which chocolatey would provide as a package, shimmed in C:\\ProgramData\\chocolatey\\bin; or be refactored to locate their compiler toolchain in their own sandbox (e.g. StrawberryPerl would find its linker at$(dirname perl.exe)/../../c/bin/ld.exerather than theld.exein the PATH).\n. Homebrew is capable of showing both dependencies (brew depends gcc) and reverse dependencies (brew uses gcc) with ease.\n. Homebrew also has two forms,brew uses gcc, which lists all dependent formulae, andbrew uses --installed gcc`, which only lists installed ones. Useful when you're fixing installed packages.. ",
    "psylver": "+1\n. +1\n. ",
    "fracz": "+1\n. +1\n. ",
    "pauldotknopf": "+1\n. +1\n. ",
    "vinz243": "+1\n. +1\n. ",
    "n8v": "+1\n. +1\n. ",
    "z11k": "+1\n. +1\n. ",
    "marazt": "+1\n. +1\n. ",
    "jfcabral": "+1 I think this would be very useful, specially for people using SSDs!\n. +1 I think this would be very useful, specially for people using SSDs!\n. ",
    "lukasmalkmus": "+1 !\n. +1 !\n. ",
    "datamosh": "Solved with 2.0! Sorry :$\n. Solved with 2.0! Sorry :$\n. ",
    "HKochniss": "Why \"sorry\"?\nChocolatey installer should check for Powershell version and give a reasonable output. Just wanted to install and waisted 15 minutes of my life on this. Basic sanity checks are a must, please fix that. :-)\nThere is also no notes on that on the mainpage which is of course not true because I can't read. Everyone with a Windows Server 2008 (even with newest service pack) runs into this issue. \n. Why \"sorry\"?\nChocolatey installer should check for Powershell version and give a reasonable output. Just wanted to install and waisted 15 minutes of my life on this. Basic sanity checks are a must, please fix that. :-)\nThere is also no notes on that on the mainpage which is of course not true because I can't read. Everyone with a Windows Server 2008 (even with newest service pack) runs into this issue. \n. ",
    "xavierdecoster": "Feel free to use a MyGet.org feed to test the implementation. We are considering supporting the chocolatey.org feed as a first-class citizen to mirror/reference packages from.\n. This is awesome! You can now host and maintain a central feed with your favourite packages and cinst all -source [feedURL]. System repaved! ;-) Any ETA on release of the feature?\n. Feel free to use a MyGet.org feed to test the implementation. We are considering supporting the chocolatey.org feed as a first-class citizen to mirror/reference packages from.\n. This is awesome! You can now host and maintain a central feed with your favourite packages and cinst all -source [feedURL]. System repaved! ;-) Any ETA on release of the feature?\n. ",
    "jongalloway": "Is it possible to limit how many you get via a parameter? That's been popular for NuGet Downloader, since there are a bajillion packages in the NuGet.org feed.\n. I used a powershell one-liner to script based on the contents of chocolateyinstall\\lib:\npowershell\n(ls \"$env:ChocolateyInstall\\lib\" | select basename).basename | % {'cinst ' + $_.split('\\.')[0]}  | sort -unique\nIf you want to comment / fork, the gist is here:  https://gist.github.com/jongalloway/5f31f9dfaa11e0637868\n. Here's a gist I sent with a powershell based launcher that doesn't show a console window: https://gist.github.com/1680695\n. Is it possible to limit how many you get via a parameter? That's been popular for NuGet Downloader, since there are a bajillion packages in the NuGet.org feed.\n. I used a powershell one-liner to script based on the contents of chocolateyinstall\\lib:\npowershell\n(ls \"$env:ChocolateyInstall\\lib\" | select basename).basename | % {'cinst ' + $_.split('\\.')[0]}  | sort -unique\nIf you want to comment / fork, the gist is here:  https://gist.github.com/jongalloway/5f31f9dfaa11e0637868\n. Here's a gist I sent with a powershell based launcher that doesn't show a console window: https://gist.github.com/1680695\n. ",
    "Iristyle": "BITS works surprisingly well... except when you're over WinRM -- access denied due to security reasons, in case you were wondering.  You need to use WebClient in that case.\nOf course, one of the first things I do in my EC2 image bootstrapper scripts is install curl, so that I don't have to bother with either BITS or WebClient.  Much more friendly when dealing with redirects, custom headers, POST data, etc, etc.\n. http://curl.haxx.se/docs/manpage.html\nAnything you could want to do, it can do... at least in my experience...\nMy example above was less about the download mechanism though, and more about grabbing 7z to use to unzip on Server Core though.  Other alternatives that I can think of\n- Download and use a 3rd party asm like SharpZipLib\n- Install PsCx (potentially with PsGet) and get access to some zip cmdlets like Read-Archive\n- Stash some code in embedded C# and compile on the fly in PowerShell\nObviously it's up to you, but I would vote for the lightest / simplest / fastest / most side effect-free way to get zip support.  7z fits the bill for me, but I own my servers and maybe there's another better general purpose way that works for everyone.\n. Also discussed in the forum here.\nAnother newer option (for the sake of completeness) is System.IO.Compression.ZipArchive, but that's .NET 4.5 only.  Probably don't want that as a dependency.\nMy vote at this point is to ship the SharpZipLib ASM along with Chocolatey, as that will give the most bang for the buck in implementation cost.  It's probably the most robust, as 7zip does require the C++ runtime which might not be installed on target systems.  PsCx introduces a whole bunch of extra goop.\nFor reference -- here are the file sizes.\n- SharpZipLib 0.86.0.518 for .NET Fx 2.0+ is 196KB\n- DotNetZip (reduced.. whatever that is) 1.9 is 248KB\nI think the ultimate best solution is to just embed the C# parts of SharpZipLib needed to unzip files, but someone will have to rip through that code and make it part of Chocolatey.\n. A nice single file embed option looks to be ZipStorer.  I don't know much about this one... but some of the comments seem to indicate that the goal is exactly the one we would have with Chocolatey -- swap out COM shell stuff with something simple and small in .NET.\n. The problem here is that Powershell does not \"recapture\" the environment variables once a session has been started.\nSo PATH could be modified, after running an installer, but Chocolatey cannot gain access to these without using the .NET System EnvironmentVariable APIs or manually accessing the real location in the registry -- i.e..\npowershell\n(Get-ItemProperty 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name Path).Path\nIMHO, what needs to be done is that the environment needs to be refreshed after a given installer wraps up.\nI would do a pull req, but not sure if this is the best / only spot where an installer finishes up.\nhttps://github.com/chocolatey/chocolatey/blob/master/src/helpers/functions/Install-ChocolateyPackage.ps1#L63\nTo recapture any changes made to PATH by external processes.\npowershell\n$Env:PATH = (@(,[Environment]::GetEnvironmentVariable('PATH', 'Machine') -s\nplit ';') + @([Environment]::GetEnvironmentVariable('PATH', 'User') -split ';') | Select -Unique) -join ';'\nBTW - I was just coming to submit this issue based on Yeoman install failing on a machine without Ruby or Node initially installed.\n. So I have a couple of questions\n- Is this the most appropriate spot in the codebase to do the environment refresh?\n- Would it make sense to do a full environment refresh? (there may be other variables that these new tools need)\n- Are there are any potential perm issues?\n. That PoshCode snippet is craziness... let me (manually) see if it actually works ;0\n. I can think of 2 ways to do this.. not sure on security implications.\n- Iterate the registry to get all the environment variable names (it wouldn't simply be good enough to look at the names in the current session, because the list could have additions or removals)\n- Launch a new PS session, capture the environment variable state there, and push it back to the initiating session (probably on the slow side)\n. Ok -- just tried the PoshCode sample...\n- Started a session\n- Manually tweaked my PATH variables in control panel\n- Opened a new session -- verified changes are in new session\n- Verified changes are not in old session\n- Ran crazy PoshCode\nOriginal session does not have the new PATH\nSo in short, no go.\n. So if you want to get the keys\n``` powershell\nuser\nGet-Item HKCU:\\Environment | Select -ExpandProperty Property\nmachine\nGet-Item 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' | Select -ExpandProperty Property\n```\n. Yeah, except how do you know what new_var is if an MSI just ran and added some new stuff? ;0\n. For cmd -- fun!\nhttp://stackoverflow.com/a/11147132/87793\n. I have used those reg tools before, but I cringe every time I see that old DOS batch style pattern matching stuff.  I think the cmd guys had Larry Wall aspirations.\n. I think the biggest issue then is the security considerations.  As long as I can get to HKLM, the Powershell refresh is pretty straightforward.\n. I also need to double check the rules for environment -- i.e. we know that PATH is special cased to munge Machine and User -- but not sure if any other variables are treated specially.\nI believe that User variables override Machine variables when the names overlap and there is no special casing like for PATH.  Will try a few tests here to be sure.\n. Verified - User overrides Machine.\nI gave PATHEXT a shot since it has a similar format to PATH.  When I defined a User variant, it totally ate the Machine variant.\nSo unless someone has a definitive resource somewhere about this -- I'm going to assume that only PATH has special treatment.\n. I just cooked this up and it works just fine -- no separate process or WMI necessary (I tend to avoid WMI because its just a wrapper on top of other stuff -- with the ability to fail due to DCOM issues, etc)\nThis is for Powershell only, not cmd.\nhttps://gist.github.com/3732568\n. I'm just about done with a pull req.. just trying to get the unit tests to run under your test suite properly.\nWill kick it off just so you guys can have a look, but don't pull it quite yet ;0\n. Also note that I may have the wrong spot for integration into Chocolatey.. I'll let you guys sort that part out if it's in the wrong spot.\nhttps://github.com/Iristyle/chocolatey/commit/8515ce2e2e4dd58de0a883e1bc304ec217aa50e6#L0R63\n. Roger that -- will fix.\n. Pull updated with tests that work properly now... \n. See https://github.com/chocolatey/chocolatey/issues/153\n. This is all ready to go... presuming the code is called in the right spot now.\nIf .\\build.bat is run as admin, the unit tests against MACHINE pass... but if not, those 2 tests will fail. (USER will pass)\nNot sure if you have any similar tests that require elevated privileges?  I know that you have a helper to run commands elevated.. maybe that's the best option?\n. Tried running tests with your *AsAdmin helper.. not so good for this use case.  So I guess you'll just have to live with failing tests when you're not admin.\nThe problem is not refresh from MACHINE -- that doesn't need elevation.. its that I can't write a new environment variable to MACHINE without admin, for the sake of the test.\n. Yeah, agree that modding users PS profile with an add to Update-SessionEnvironment is invasive, so I would rule that out.  Some people (like me) use customized prompts, and you would have the possibility of breaking those.\nWhy not just update how the cinst command is called, so that it calls Update-SessionEnvironment after the batch shell has finished up?\nI didn't realize that's how you guys were doing things, but if you're using the PS jobs api, you can just hook the event (if you're not already) for when the job finishes... at which point you can make the call to refresh the session vars.\n. It would be a little hacky, but you could have the variables export to a well known temp file location, for import back into cmd, no?  Maybe even pipe the output somewhere (not sure if that's feasible)\nThe only thing that makes me jump to cmd are some of the dir switches I grew up on\ndir /s /od \nA real verbose PITA in Powershell ;0\n. OT: But yeah, it's aliased to get-childitem ... where you have -Recurse and -Filter and -Include\nI don't know if they fixed that cmdlet is PS3, but -Filter is the faster option, b/c it passes the param to the underlying OS, but it's also busted for anything complex, so you have to do fancier things like -Include 'foo*', 'bar*' ... which can be horrendously slow on larger file sets due to implementation details.\nAnd obviously no way to pass all the switches like /ad -- equiv for Get-ChildItem is roughly | ? { $_.PsIsContainer }\nPITA\n. +1 on that.. if you can get it to work.\nAren't you guys passing a bunch of cmd line switches to powershell.exe (like -ExecutionPolicy).  Might run into some issues... I have my machine set to Unrestricted, so I wouldn't have any issues, but not sure about everyone else?\n. Best to follow PsGet conventions IMHO, so you can just \nImport-Module Chocolatey\nEach PSM1 uses Export-ModuleMember like this\n. Cool, then you're good to go... (as you can tell, I haven't looked at all the Chocolatey source ;0)\nMy point re: PsGet ... was along the install dir.  Sorry if that wasn't clear.  By plopping into the user module dir, then you should be able to just call Import-Module Chocolatey from anywhere... and the exported stuff will just work.\nIf you want to get super fancy (and I'm not at all serious here),  you can have a remote server running all the time, that can just export the commands to a Powershell WinRM session using a one-liner!  Have you ever seen how the Exchange cmdlets work?  \nhttp://technet.microsoft.com/en-us/magazine/hh750396.aspx\nI'm not an admin, but had to help show a co-worker once how to use PS -- first time I had encountered that stuff (the power of Import-PSSession that is).  Unfortunately, you can get cmdlets / modules from a remote server, but no way (directly) to push them -- which is why I made this coincidentally -- https://github.com/EastPoint/Midori/blob/master/tools/Remoting.psm1\n. Yeah... I'm not in disagreement with that.\nI'm just saying that it would be good to have a well-documented convention within Chocolatey where a function is called before the install as part of the Chocolatey Runtime.\ni.e.in chocolateyInstall.ps1\npowershell\nfunction CanInstall()\n{\n  #return true / false here\n}\nThis way the logging, etc could be standardized, it could be documented in the wiki, etc.\n. I would say no... Chocolatey doesn't touch anything that wasn't installed by Chocolatey.\nIf ShouldInstall() returns false, maybe even flush any trace of the Chocolatey install attempt -- i.e. nothing in c:\\chocolate\\lib\n. My main issue with the 'taking over existing installs, etc' is the complexity with the concept.\nI generally agree that it's something that would be useful... \nI just wonder if it's going to be a real bear to implement properly (with lots of edge cases).  You might have to draw some lines in the sand as to what you will / will not cover, because I think there's a potential for a lot of landmines along the way (as there often is when dealing with Windows and installers!)\nBut if you're up to the challenge, then I'm OK with it! ;0\n. Not if the XSD was put together properly... and handles the X by using <xs:any /> ;0  But most people forget about the X in XML.\nIn general, at one point I used to think schema validation was important -- not so much anymore (unless you care about making things go slower - haha).\n. http://nuget.codeplex.com/SourceControl/changeset/view/0624b2a0fb2a#src%2fCore%2fAuthoring%2fnuspec.xsd\nBoo.. no xs:any -- Don Box would be sad ;0\n. And yeah, I wasn't advocating messing with projectUrl either.  I just want a convenient way to get the original package source w/out having to do a ton of detective work.  \nIf I can go gallery package -> user -> repos that should be good enough for what I'm talking about.\nI still think it would be useful to have a repo for the source of the package a little more directly, but not at the expense of breaking nuget.exe.\n. You know, I'm thinking more and more that it would be good to have a direct link to where the package source lives... and even better to not even accept packages that don't have public source somewhere.\nRight now its a royal pain trying to hunt around to find the package source, for people like me, who run into issues with peoples packages and want to fix them.  I've done it at least a few times in the last couple of days, and I feel like I'm wasting time on a goose chase to try to find the sources every time.  Google authors name or handle .. hope they have a GitHub or Bitbucket account, cruise through their repos, etc.\nCase in point, I just tried to run the Powershell3 installer.  Of course, it bombed b/c the author didn't take into account the host OS version properly (Vista / Server 2008 are 6.0 and 7 / 2008 R2 are 6.1).  I can't find the source in this case, so I send off an email and hope I get a response... when I could have otherwise taken action.\nMy 2c -- this is a really poor feedback loop.\n. I setup something really similar at work.  I have an auto-publish scripts that runs on the build server.  The API key is stored only in the build server... \nThis script is kind of a universal one for packaging csproj/nuspec combos or just nuspec files for binaries.  A couple of things it doesn't do yet as noted by TODO... \n``` powershell\n[CmdletBinding(DefaultParametersetName='SinglePkg')]\nparam(\n  [Parameter(ValueFromPipeline = $true, Position = 1)]\n  [string]\n  $ApiKey = $Env:NUGET_PRIVATE_KEY,\n[Parameter(Mandatory = $false)]\n  [string]\n  $Source = 'https://yourcompanydefaulturl',\n[Parameter(ParameterSetName = 'SinglePkg', Mandatory = $true, Position = 0)]\n  [string]\n  [ValidateScript({ (Get-ChildItem \"$_.NuSpec\" -Recurse).Count -gt 0})]\n  $PackageName,\n[Parameter(ParameterSetName = 'AllPkgs')]\n  [Switch]\n  $All = $false,\n[Parameter(Mandatory = $false)]\n  [switch]\n  $Push,\n[Switch]\n  $KeepPackages\n)\nfunction Get-CurrentDirectory\n{\n  $thisName = $MyInvocation.MyCommand.Name\n}\nfunction Get-NugetPath\n{\n  Write-Host 'Executing Get-NugetPath'\n  Get-ChildItem -Path (Get-CurrentDirectory) -Include 'nuget.exe' -Recurse |\n    Select -ExpandProperty FullName -First 1\n}\nfunction Get-PackagesList([string] $source)\n{\n  Write-Host \"Retrieving package list from $source...\"\n  # TODO: handle -Prerelease\n  $list = .\\nuget list -Source $source -NonInteractive\n  $packages = @{}\n  $list |\n    ? { $ -notmatch '^Using credentials' } |\n    % {\n      $packageDef = $ -split '\\s'\n      $packages.\"$($packageDef[0])\" = $packageDef[1];\n    }\nWrite-Host \"Found $($packages.Count) packages\"\n  return $packages\n}\nfunction Test-IsVersionNewer([string]$base, [string]$new)\n{\n  # no base version - let this go through\n  if (!$base) { return $true }\nif ([string]::IsNullOrEmpty($new))\n  {\n    Write-Error \"New version cannot be empty\"\n    return $false\n  }\n# TODO: naive impl of SemVer handling since its the exception\n  # always let new SemVers go through\n  if ($new -match '-.*$') { return $true }\nreturn [Version]$new -gt [Version]$base\n}\nfunction Restore-Nuget\n{\n  Write-Host 'Executing Restore-Nuget'\n  $nuget = Get-NugetPath\nif ($nuget -ne $null)\n  {\n      &\"$nuget\" update -Self | Write-Host\n      return $nuget\n  }\n$nugetPath = Join-Path (Get-CurrentDirectory) 'nuget.exe'\n  (New-Object Net.WebClient).DownloadFile('http://nuget.org/NuGet.exe', $nugetPath)\nreturn Get-NugetPath\n}\nfunction Invoke-Pack([Hashtable]$packages, $include = '*.nuspec')\n{\n  $currentDirectory = Get-CurrentDirectory\n  Write-Host \"Invoke-Pack running against $currentDirectory for $include\"\nGet-ChildItem -Path $currentDirectory -Include $include -Recurse |\n    ? { (Split-Path $.DirectoryName -Leaf) -ne 'packages' } |\n    % {\n      Write-Verbose \"Found package file $\"\n      $csproj = Join-Path $.DirectoryName ($.BaseName + '.csproj')\n      if (Test-Path $csproj)\n      {\n        # TODO: yank this csproj stuff or make it parse like nuspec\n        &$script:nuget pack \"$csproj\" -Prop Configuration=Release -Exclude '***.CodeAnalysisLog.xml'\n      }\n      else\n      {\n        $spec = Xml\n        $id = $spec.package.metadata.id\n        $version = $spec.package.metadata.version\n        $base = $packages.$id\n        Write-Verbose \"Local package $id - version $version / remote $base\"\n        if (Test-IsVersionNewer $base $version)\n        {\n          &$script:nuget pack $_\n        }\n        else\n        {\n          Write-Host \"[SKIP] : Package $id matches server $version\"\n        }\n      }\n    }\n}\nfunction Invoke-Push\n{\n  $currentDirectory = Get-CurrentDirectory\n  Write-Host \"Invoke-Push running against $currentDirectory\"\nGet-ChildItem *.nupkg |\n    % {\n     Write-Host \"Pushing $ to source $source\"\n     if ($source -eq '') { &$script:nuget push $ $apiKey }\n     else { &$script:nuget push $_ $apiKey -source $source }\n    }\n}\n$script:nuget = Restore-Nuget\ndel *.nupkg\n$packages = Get-PackagesList $Source\nif ($PsBoundParameters.PackageName)\n  { Invoke-Pack $packages \"$PackageName.nuspec\" }\nelse\n  { Invoke-Pack $packages }\nif ($Push) { Invoke-Push }\nif (!$KeepPackages) { del *.nupkg }\n```\n. Yeah, these types of apps generally need a runtime of some sort... the above apps are all built on Python.  Of course, substitute in Node or Ruby for Python -- I'm sure there are other similar apps out there.\n. I looked around, but didn't see anything... could've missed it though.  It was late ;0\n. FYI -- I sent Oliver a msg through Google+ here, to get the ball rolling on his approval... IF this is something Chocolatey agrees with doing ;0\n. FYI -- the software that I'm installing uses nested INI files.  This isn't officially allowed in an ini, but is common practice.  Get-IniContent / Out-IniFile doesn't handle this properly.  I'm fixing now...\nExample config\nini\n[servers]\n[[serverA]]\nurl = blah.blah.com\n[[serverB]]\nurl = foo.bar.com\n. Previous comment trashed... totally overhauled the script for the nesting.  Basically rewrote the whole cmdlet and docs\n``` powershell\nRequires -Version 2.0\nfunction Get-IniContent\n{\n<#\n.Synopsis\n  Reads the contents of an INI file into an OrderedDictionary\n.Description\n  The dictionary can be manipulated the same way a Hashtable can, by\n  adding or removing keys to the various sections.\nNested INI sections represented like the following are supported:\n[foo]\n  name = value\n  [[bar]]\n  name = value\n  ;name = value\nComment lines prefixed with a ; are returned in the output with a name\n  of {Comment-X} where X is the comment index within the entire INI file\nComments also have a IsComment property attached to the values, so\n  that Out-IniFile may properly handle them.\n.Notes\n  Inspiration from Oliver Lipkau oliver@lipkau.net\n  http://tinyurl.com/9g4zonn\n.Inputs\n  String or FileInfo\n.Outputs\n  Collections.Specialized.OrderedDictionary\n  Keys with a OrderdedDictionary Value are representative of sections\nSections may be nested to any arbitrary depth\n.Parameter Path\n  Specifies the path to the input file. Can be a string or FileInfo\n  object\n.Example\n  $configFile = Get-IniContent .\\foo.ini\nDescription\n\nParses the foo.ini file contents into an OrderedDictionary for local\n  reading or manipulation\n.Example\n  $configFile = .\\foo.ini | Get-IniContent\n  $configFile.SectionName | Select *\nDescription\n\nSame as the first example, but using pipeline input.\n  Additionally outputs all values stored in the [SectionName] section of\n  the INI file.\n>\n[CmdletBinding()]\n  param(\n    [Parameter(ValueFromPipeline=$True, Mandatory=$True)]\n    [ValidateNotNullOrEmpty()]\n    [ValidateScript({ (Test-Path $) -and ($.Extension -eq '.ini') })]\n    [IO.FileInfo]\n    $Path\n  )\nProcess\n  {\n    Write-Verbose \"[INFO]: Get-IniContent processing file [$Path]\"\n# TODO: once Powershell 3 is common, this can be $ini = [ordered]@{}\n$ini = New-Object Collections.Specialized.OrderedDictionary\n\nfunction getCurrentOrEmptySection($section)\n{\n  if (!$section)\n  {\n    if (!$ini.Keys -contains '')\n    {\n      $ini[''] = New-Object Collections.Specialized.OrderedDictionary\n    }\n    $section = $ini['']\n  }\n  return $section\n}\n\n$comments = 0\n$sections = @($ini)\nswitch -regex -file $Path\n{\n  #http://stackoverflow.com/questions/9155483/regular-expressions-balancing-group\n  '\\[((?:[^\\[\\]]|(?<BR> \\[)|(?<-BR> \\]))+(?(BR)(?!)))\\]' # Section\n  {\n    $name = $matches[1]\n    # since the regex above is balanced, depth is a simple count\n    $depth = ($_ | Select-String '\\[' -All).Matches |\n      Measure-Object |\n      Select -ExpandProperty Count\n\n    # root section\n    Write-Verbose \"Parsing section $_ at depth $depth\"\n    # handles any level of nested section\n    $section = New-Object Collections.Specialized.OrderedDictionary\n    $sections[$depth - 1][$name] = $section\n    if ($sections.Length -le $depth)\n    {\n      $sections += $section\n    }\n    else\n    {\n      $sections[$depth] = $section\n    }\n  }\n  '^(;.*)$' # Comment\n  {\n    $section = getCurrentOrEmptySection $section\n    $name = '{Comment-' + ($comments++) + '}'\n    $section[$name] = $matches[1] |\n      Add-Member -MemberType NoteProperty -Name IsComment -Value $true -PassThru\n  }\n  '(.+?)=(.*)' # Key\n  {\n    $name, $value = $matches[1..2]\n    (getCurrentOrEmptySection $section)[$name] = $value\n  }\n}\n\nWrite-Verbose \"[SUCCESS]: Get-IniContent processed file [$path]\"\nreturn $ini\n\n}\n}\n```\n. And to save the contents recursively\n``` powershell\nRequires -Version 2.0\nfunction Out-IniFile\n{\n<#\n.Synopsis\n  Write the contents of a Hashtable or OrderedDictionary to an INI file\n.Description\n  The input can either be a standard Powershell hash created with @{},\n  an [ordered]@{} in Powershell 3, an OrderedDictionary created by the\n  Get-IniContent cmdlet.\nWill write out the fully nested structure to an INI file\n.Notes\n  Inspiration from Oliver Lipkau oliver@lipkau.net\n  http://tinyurl.com/94tdhdx\n.Inputs\n  Accepts either a Collections.Specialized.OrderedDictionary or\n  a standard Powershell Hashtable\n.Outputs\n  Returns an IO.FileInfo object if -PassThru is specified\n  System.IO.FileSystemInfo\n.Parameter InputObject\n  Specifies the OrderedDictionary or Hashtable to be written to the file\n.Parameter FilePath\n  Specifies the path to the output file.\n.Parameter Encoding\n  Specifies the type of character encoding used in the file. Valid\n  values are \"Unicode\", \"UTF7\", \"UTF8\", \"UTF32\", \"ASCII\",\n  \"BigEndianUnicode\", \"Default\", and \"OEM\". \"Unicode\" is the default.\n\"Default\" uses the encoding of the system's current ANSI code page.\n\"OEM\" uses the current original equipment manufacturer code page\n  identifier for the operating system.\n.Parameter Append\n  Adds the output to the end of an existing file, instead of replacing\n  the file contents.\n.Parameter Force\n  Allows the cmdlet to overwrite an existing read-only file. Even using\n  the Force parameter, the cmdlet cannot override security restrictions.\n.Parameter PassThru\n  Returns the newly written FileInfo. By default, this cmdlet does not\n  generate any output.\n.Example\n  @{ Section = @{ Foo = 'bar'; Baz = 1} } |\n    Out-IniFile -FilePath .\\foo.ini\nDescription\n\nWrites the given Hashtable to foo.ini as\n[Section]\n  Baz=1\n  Foo=bar\n.Example\n  @{ Section = [ordered]@{ Foo = 'bar'; Baz = 1} } |\n    Out-IniFile -FilePath .\\foo.ini\nDescription\n\nWrites the given Hashtable to foo.ini, in the given order\n[Section]\n  Foo=bar\n  Baz=1\n.Example\n  @{ Section = [ordered]@{ Foo = 'bar'; Baz = 1} } |\n    Out-IniFile -FilePath .\\foo.ini -Force\nDescription\n\nSame as previous example, except that foo.ini is overwritten should\n  it already exist\n.Example\n  $file = @{ Section = [ordered]@{ Foo = 'bar'; Baz = 1} } |\n    Out-IniFile -FilePath .\\foo.ini\nDescription\n\nSame as previous example, except that the FileInfo object is returned\n.Example\n  $config = Get-IniContent .\\foo.ini\n  $config.Section.Value = 'foo'\n$config | Out-IniFile -Path .\\foo.ini -Force\nDescription\n\nParses the foo.ini file contents into an OrderedDictionary with the\n  Get-IniContent cmdlet.  Manipulates the contents, then overwrites the\n  existing file.\n>\n[CmdletBinding()]\n  Param(\n    [Parameter(ValueFromPipeline=$true, Mandatory=$true)]\n    [ValidateScript({ ($ -is [Collections.Specialized.OrderedDictionary]) -or `\n      ($ -is [Hashtable]) })]\n    [ValidateNotNullOrEmpty()]\n    $InputObject,\n[Parameter(Mandatory=$true)]\n[ValidateNotNullOrEmpty()]\n[ValidateScript({ Test-Path $_ -IsValid })]\n[string]\n$FilePath,\n\n[Parameter(Mandatory=$false)]\n[ValidateSet('Unicode','UTF7','UTF8','UTF32','ASCII','BigEndianUnicode',\n  'Default','OEM')]\n[string]\n$Encoding = 'Unicode',\n\n[switch]\n$Append,\n\n[switch]\n$Force,\n\n[switch]\n$PassThru\n\n)\nprocess\n  {\n    Write-Verbose \"[INFO]: Out-IniFile writing file [$FilePath]\"\n    if ((New-Object IO.FileInfo($FilePath)).Extension -ne '.ini')\n    {\n      Write-Warning 'Out-IniFile [$FilePath] does not end in .ini extension'\n    }\nif ((Test-Path $FilePath) -and (!$Force))\n{\n  throw \"The -Force switch must be applied to overwrite $outFile\"\n}\n\n$outFile = $null\nif ($append) { $outFile = Get-Item $FilePath -ErrorAction SilentlyContinue }\nif ([string]::IsNullOrEmpty($outFile) -or (!(Test-Path $outFile)))\n  { $outFile = New-Item -ItemType File -Path $FilePath -Force:$Force }\n\n#recursive function write sections at various depths\nfunction WriteKeyValuePairs($dictionary, $sectionName = $null, $depth = 0)\n{\n  #Sections - take into account nested depth\n  if ((![string]::IsNullOrEmpty($sectionName)) -and ($depth -gt 0))\n  {\n    $sectionName = \"$('[' * $depth)$sectionName$(']' * $depth)\"\n    Write-Verbose \"[INFO]: writing section $sectionName to $outFile\"\n    Add-Content -Path $outFile -Value $sectionName -Encoding $Encoding\n  }\n\n  $dictionary.GetEnumerator() |\n    % {\n      if ($_.Value -is [Collections.Specialized.OrderedDictionary] -or\n        $_.Value -is [Hashtable])\n      {\n        Write-Verbose \"[INFO]: Writing section [$($_.Key)] of $sectionName\"\n        WriteKeyValuePairs $_.Value $_.Key ($depth + 1)\n      }\n      elseif ($_.Value.IsComment -or ($_.Key -match '^\\{Comment\\-[\\d]+\\}'))\n      {\n        Write-Verbose \"[INFO]: Writing comment $($_.Value)\"\n        Add-Content -Path $outFile -Value $_.Value -Encoding $Encoding\n      }\n      else\n      {\n        Write-Verbose \"[INFO]: Writing key $($_.Key)\"\n        Add-Content -Path $outFile -Value \"$($_.Key)=$($_.Value)\" -Encoding $Encoding\n      }\n    }\n}\n\nWriteKeyValuePairs $InputObject\n\nWrite-Verbose \"[SUCCESS]: Out-IniFile wrote file [$outFile]\"\nif ($PassThru) { return $outFile }\n\n}\n}\n``\n. I'm going to incorporate these into https://github.com/EastPoint/Midori\n. I think that script could use a bit of a refactor... there's a lot of unnecessary futzing around with;` \nJust -split ';' into an array, add to the array if the  -contains fails ... then -join ';'\n. Yes... failed to mention tab completion.  That is also a biggie IMHO.\n. http://trevorsullivan.net/2012/10/09/powershell-generating-functions-with-dynamic-parameter-auto-completion-values/\n. Yeah, I checked existing issues.. saw a few regarding uninstall -- but nothing about a helper that I saw initially.. but of course, I could have missed it.\nSometimes you can't just store the GUID though -- case in point -- I just pushed up HipChat, which is built on Air (which I also just pushed up).\nFishing out the GUID is a pretty wonky affair\nhttps://github.com/Iristyle/ChocolateyPackages/blob/master/HipChat/tools/chocolateyUninstall.ps1\nNote that I'm using the LocalPackage reg value which is the location that the generated MSI is stored on disk (in %SYSTEMROOT%\\Installer)  There is another key called UninstallString that has the actual GUID.. but you would need to parse it.\nIn this case, it was simpler to /x on the path stored in LocalPackage, because no additional parsing was required.\nAIR is a bit of an edge case I think... but I don't know if there are other runtimes with similar behavior or not.\n. Also, in my example, keying off of SID S-1-5-18 (local system) is not very robust (its a bit hacky actually)... but to be able to have AIR put HipChat into Program Files, I had to launch the AIR installer with Start-ChocolateyProcessAsAdmin\nhttps://github.com/Iristyle/ChocolateyPackages/blob/master/HipChat/tools/chocolateyInstall.ps1#L29\nA better approach would be to scan all the UserData to find the right reg key... but I wanted to get something out the door quick ;0\n. I'm not sure what you mean by your question.. I did make an AIR runtime package.\nhttp://chocolatey.org/packages/AdobeAIR\nThere are 2 ways to ship Air as far as I can tell...\n- Embed the runtime (requires some signed legal stuff with Adobe)\n- Install the AIR runtime, use the tool from the runtime to install the .air file.\nFor HipChat, I opted for option 2.  The air runtime is a dependency of HipChat... and then the tool is used to install hipchat.air... as part of that install AIR seems to generate a bogus MSI, so that HipChat shows up in add/remove programs.\n. Not sure if your comment is directed to me @rismoney ?  The thing is, this isn't for an uninstall, I want to carry on with the install that got borked.\nHere's a real example of what happened this AM.. I told another dev to install EPSDevTools.Web.  I wasn't there for all of this, so I'm kind of paraphrasing what happened:\n- He already has Sublime installed, and accidentally left it open.  So the Sublime installer died, killing the install of the main EPSDevTools.Web package.\n- OK, so now we're in this half installed state.  So try reinstalling with -force\n- NodeJS package was goofed up, so that kills us the next time.\nSo sometimes you get into this state of .. hmm... did all my dependencies properly install?  Maybe I should just start trashing the new folders out of /lib to kick Choc to reinstall missing bits because -force, AFAIK, won't execute the installer for dependent packages.. and there can be situations where the install of a dependency started, but couldn't proceed, so now it's in lib and Choc thinks its installed.\nSo then you say as a package maintainer... maybe I'm just better off calling cinst a bunch of times in my chocolateyInstall.ps1 to work around this, instead of using the dependencies in the nuspec, because these unexpected things can happen.  But of course that kind of defeats the purpose.\nIMHO, this is one of the bigger pain points I've run into choc.  And don't get me wrong, I love Chocolatey, I just think that the user experience here could use some polishing -- principal of least surprise and all that ;0\nSo -- maybe to improve on this situation:\n- Ensure that calling -force on a parent package, calls it down the hierarchy.  (I don't think this is the current behavior, but obviously correct me if I've drawn the wrong conclusion)\n- When there are dependencies for a package, provide a summary at the end that lists success / fail status.  \nJust as a quick'n'dirty sample of what this could look like:\n```\nInstalled\n[\u2714] - nodejs.install\n[\u2714] - SourceCodePro\nFailed\n[\u2716] - SublimeText2.app\n```\nThe characters are taken from the Mocha reporter -- unicode 2714 for succes and 2716 for fail,.  (These can have problems displaying based on the shell you're in under Windows unfortunately IIRC)\n- If a parent package has failed dependencies, maybe it's also best to do a delete of that package, so you don't need to do any sort of -force.  Same for any dependent packages.  If the heuristic for determining if something is installed, is the presence of the package on disk, then if something doesn't succeed, trash the folder.\n- A lot of times if there's a script attached to a package that has a bunch of dependencies, the script is dependent on those things being properly installed / available in PATH.  If they aren't, abort running chocolateyInstall.ps1 for the parent package.\nThoughts?\n. Yeah, the cuninst approach sounds like it could be good as long as it:\n- Handles being called on only the last failed dependency\n- Handles being called up the chain / nested dependency hierarchy\nI'm thinking of situations where it's undesirable to run an uninstaller.  In the most extreme, consider Visual Studio was a dependency and took an hour to install.  You definitely don't want to uninstall it as part of a rollback if it was a later dependency in the list that exploded.\nAlso -- the docs should probably stress the scope of both chocolateyInstall.ps1 / chocolateyUninstall.ps1 and how it's important for them to be iidempotent.\n. Ok, so yeah.. thinking on this some more -- I don't think that cuninst is the right way to go.\nI think the best approach is to delete the last failed thing from \\chocolatey\\lib -- do not pass go, do not collect :moneybag:  If the package was a dependency of a parent package, also delete the parent from lib, and so on up the hierarchy.\nAlso, there's another contributing factor that is causing a bunch of confusion here.  A co-worker got through like 18 of 20 packages in the mentioned EPSDevTools.Web.  There was a temporary network hiccup grabbing Ruby, which killed the Ruby install and everything after that.\nFrom that experience, examining his console output and the lib directory, I noticed 3 major problems.\n- Chocolatey downloads all the nested dependencies up front.  This should be changed to downloading each on demand IMHO.  With all the packages downloaded to disk, even with a -force, chocolatey skips the failed dependencies (in this case Ruby, Vagrant and VirtualBox), because they're on disk.  So a real simple solution is not download until they're ready to be used.\n- So we deleted those 3 folders, and re-ran with a -force.  I thought this was supposed to cause the chocolateyInstall.ps1 for EPSDevTools.Web to execute again.  It didn't.  So Ruby, Vagrant and VirtualBox installed, but the extra NPM packages and Gems from the install script did not.  The only way to work around this, was to delete the EPSDevTools.Web package from lib, then re-run the install.  It skipped all the dependencies as expected, but ran the script it was supposed to.\n- We're still having issues with not recapturing environment variables after cinst wraps up.  So clearly my previous work here wasn't enough to fix this.  So of course you end up in the shell dance... close, re-open, re-run, etc. because the current shell can't use the things that were just installed.\n. Haha -- stream of conciousness responses :smiley_cat: \nYeah, your reasoning works the same in both directions ultimately -- this is, in my mind, a principle of least surprise kind of thing, and I think folks will have different options on it.  I can see both sides of the fence.\nI agree that as implemented, the default explicit is the best / safest tactic when you're talking about global dependencies... it can just be inconvenient at times because it causes a domino effect of updates for maintainers of packages.\nAs a convenience, a switch would def be useful when you're OK with playing fast and loose.\n. Checking for a font being installed might not be sufficient for a versioned font (like SourceCode Pro anyhow).  For that situation, I needed to upgrade an existing font in-place without showing dialogs, etc. (which boils down to remove / install)\nIt's much harder than it should be ;0\nYou have to resort to removing / re-installing in that case to prevent the Windows dialogs, a reboot, etc.  See my install code for SourceCode Pro\nI took what was published here, and modded it a bit for my needs.\nIt lives in my repo as FontHelpers.ps1\n. Also, SourceCodePro is OpenType (.otf), which is prefered over TrueType (.ttf), so any generic function should take that option into account, i.e.\npowershell\n[Parameter()]\n[ValidateSet('OpenType', 'TrueType')]\n[string]\n$Format = 'TrueType'\n. Related to https://github.com/chocolatey/chocolatey/pull/171 but not quite the same idea\n. BITS works surprisingly well... except when you're over WinRM -- access denied due to security reasons, in case you were wondering.  You need to use WebClient in that case.\nOf course, one of the first things I do in my EC2 image bootstrapper scripts is install curl, so that I don't have to bother with either BITS or WebClient.  Much more friendly when dealing with redirects, custom headers, POST data, etc, etc.\n. http://curl.haxx.se/docs/manpage.html\nAnything you could want to do, it can do... at least in my experience...\nMy example above was less about the download mechanism though, and more about grabbing 7z to use to unzip on Server Core though.  Other alternatives that I can think of\n- Download and use a 3rd party asm like SharpZipLib\n- Install PsCx (potentially with PsGet) and get access to some zip cmdlets like Read-Archive\n- Stash some code in embedded C# and compile on the fly in PowerShell\nObviously it's up to you, but I would vote for the lightest / simplest / fastest / most side effect-free way to get zip support.  7z fits the bill for me, but I own my servers and maybe there's another better general purpose way that works for everyone.\n. Also discussed in the forum here.\nAnother newer option (for the sake of completeness) is System.IO.Compression.ZipArchive, but that's .NET 4.5 only.  Probably don't want that as a dependency.\nMy vote at this point is to ship the SharpZipLib ASM along with Chocolatey, as that will give the most bang for the buck in implementation cost.  It's probably the most robust, as 7zip does require the C++ runtime which might not be installed on target systems.  PsCx introduces a whole bunch of extra goop.\nFor reference -- here are the file sizes.\n- SharpZipLib 0.86.0.518 for .NET Fx 2.0+ is 196KB\n- DotNetZip (reduced.. whatever that is) 1.9 is 248KB\nI think the ultimate best solution is to just embed the C# parts of SharpZipLib needed to unzip files, but someone will have to rip through that code and make it part of Chocolatey.\n. A nice single file embed option looks to be ZipStorer.  I don't know much about this one... but some of the comments seem to indicate that the goal is exactly the one we would have with Chocolatey -- swap out COM shell stuff with something simple and small in .NET.\n. The problem here is that Powershell does not \"recapture\" the environment variables once a session has been started.\nSo PATH could be modified, after running an installer, but Chocolatey cannot gain access to these without using the .NET System EnvironmentVariable APIs or manually accessing the real location in the registry -- i.e..\npowershell\n(Get-ItemProperty 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name Path).Path\nIMHO, what needs to be done is that the environment needs to be refreshed after a given installer wraps up.\nI would do a pull req, but not sure if this is the best / only spot where an installer finishes up.\nhttps://github.com/chocolatey/chocolatey/blob/master/src/helpers/functions/Install-ChocolateyPackage.ps1#L63\nTo recapture any changes made to PATH by external processes.\npowershell\n$Env:PATH = (@(,[Environment]::GetEnvironmentVariable('PATH', 'Machine') -s\nplit ';') + @([Environment]::GetEnvironmentVariable('PATH', 'User') -split ';') | Select -Unique) -join ';'\nBTW - I was just coming to submit this issue based on Yeoman install failing on a machine without Ruby or Node initially installed.\n. So I have a couple of questions\n- Is this the most appropriate spot in the codebase to do the environment refresh?\n- Would it make sense to do a full environment refresh? (there may be other variables that these new tools need)\n- Are there are any potential perm issues?\n. That PoshCode snippet is craziness... let me (manually) see if it actually works ;0\n. I can think of 2 ways to do this.. not sure on security implications.\n- Iterate the registry to get all the environment variable names (it wouldn't simply be good enough to look at the names in the current session, because the list could have additions or removals)\n- Launch a new PS session, capture the environment variable state there, and push it back to the initiating session (probably on the slow side)\n. Ok -- just tried the PoshCode sample...\n- Started a session\n- Manually tweaked my PATH variables in control panel\n- Opened a new session -- verified changes are in new session\n- Verified changes are not in old session\n- Ran crazy PoshCode\nOriginal session does not have the new PATH\nSo in short, no go.\n. So if you want to get the keys\n``` powershell\nuser\nGet-Item HKCU:\\Environment | Select -ExpandProperty Property\nmachine\nGet-Item 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' | Select -ExpandProperty Property\n```\n. Yeah, except how do you know what new_var is if an MSI just ran and added some new stuff? ;0\n. For cmd -- fun!\nhttp://stackoverflow.com/a/11147132/87793\n. I have used those reg tools before, but I cringe every time I see that old DOS batch style pattern matching stuff.  I think the cmd guys had Larry Wall aspirations.\n. I think the biggest issue then is the security considerations.  As long as I can get to HKLM, the Powershell refresh is pretty straightforward.\n. I also need to double check the rules for environment -- i.e. we know that PATH is special cased to munge Machine and User -- but not sure if any other variables are treated specially.\nI believe that User variables override Machine variables when the names overlap and there is no special casing like for PATH.  Will try a few tests here to be sure.\n. Verified - User overrides Machine.\nI gave PATHEXT a shot since it has a similar format to PATH.  When I defined a User variant, it totally ate the Machine variant.\nSo unless someone has a definitive resource somewhere about this -- I'm going to assume that only PATH has special treatment.\n. I just cooked this up and it works just fine -- no separate process or WMI necessary (I tend to avoid WMI because its just a wrapper on top of other stuff -- with the ability to fail due to DCOM issues, etc)\nThis is for Powershell only, not cmd.\nhttps://gist.github.com/3732568\n. I'm just about done with a pull req.. just trying to get the unit tests to run under your test suite properly.\nWill kick it off just so you guys can have a look, but don't pull it quite yet ;0\n. Also note that I may have the wrong spot for integration into Chocolatey.. I'll let you guys sort that part out if it's in the wrong spot.\nhttps://github.com/Iristyle/chocolatey/commit/8515ce2e2e4dd58de0a883e1bc304ec217aa50e6#L0R63\n. Roger that -- will fix.\n. Pull updated with tests that work properly now... \n. See https://github.com/chocolatey/chocolatey/issues/153\n. This is all ready to go... presuming the code is called in the right spot now.\nIf .\\build.bat is run as admin, the unit tests against MACHINE pass... but if not, those 2 tests will fail. (USER will pass)\nNot sure if you have any similar tests that require elevated privileges?  I know that you have a helper to run commands elevated.. maybe that's the best option?\n. Tried running tests with your *AsAdmin helper.. not so good for this use case.  So I guess you'll just have to live with failing tests when you're not admin.\nThe problem is not refresh from MACHINE -- that doesn't need elevation.. its that I can't write a new environment variable to MACHINE without admin, for the sake of the test.\n. Yeah, agree that modding users PS profile with an add to Update-SessionEnvironment is invasive, so I would rule that out.  Some people (like me) use customized prompts, and you would have the possibility of breaking those.\nWhy not just update how the cinst command is called, so that it calls Update-SessionEnvironment after the batch shell has finished up?\nI didn't realize that's how you guys were doing things, but if you're using the PS jobs api, you can just hook the event (if you're not already) for when the job finishes... at which point you can make the call to refresh the session vars.\n. It would be a little hacky, but you could have the variables export to a well known temp file location, for import back into cmd, no?  Maybe even pipe the output somewhere (not sure if that's feasible)\nThe only thing that makes me jump to cmd are some of the dir switches I grew up on\ndir /s /od \nA real verbose PITA in Powershell ;0\n. OT: But yeah, it's aliased to get-childitem ... where you have -Recurse and -Filter and -Include\nI don't know if they fixed that cmdlet is PS3, but -Filter is the faster option, b/c it passes the param to the underlying OS, but it's also busted for anything complex, so you have to do fancier things like -Include 'foo*', 'bar*' ... which can be horrendously slow on larger file sets due to implementation details.\nAnd obviously no way to pass all the switches like /ad -- equiv for Get-ChildItem is roughly | ? { $_.PsIsContainer }\nPITA\n. +1 on that.. if you can get it to work.\nAren't you guys passing a bunch of cmd line switches to powershell.exe (like -ExecutionPolicy).  Might run into some issues... I have my machine set to Unrestricted, so I wouldn't have any issues, but not sure about everyone else?\n. Best to follow PsGet conventions IMHO, so you can just \nImport-Module Chocolatey\nEach PSM1 uses Export-ModuleMember like this\n. Cool, then you're good to go... (as you can tell, I haven't looked at all the Chocolatey source ;0)\nMy point re: PsGet ... was along the install dir.  Sorry if that wasn't clear.  By plopping into the user module dir, then you should be able to just call Import-Module Chocolatey from anywhere... and the exported stuff will just work.\nIf you want to get super fancy (and I'm not at all serious here),  you can have a remote server running all the time, that can just export the commands to a Powershell WinRM session using a one-liner!  Have you ever seen how the Exchange cmdlets work?  \nhttp://technet.microsoft.com/en-us/magazine/hh750396.aspx\nI'm not an admin, but had to help show a co-worker once how to use PS -- first time I had encountered that stuff (the power of Import-PSSession that is).  Unfortunately, you can get cmdlets / modules from a remote server, but no way (directly) to push them -- which is why I made this coincidentally -- https://github.com/EastPoint/Midori/blob/master/tools/Remoting.psm1\n. Yeah... I'm not in disagreement with that.\nI'm just saying that it would be good to have a well-documented convention within Chocolatey where a function is called before the install as part of the Chocolatey Runtime.\ni.e.in chocolateyInstall.ps1\npowershell\nfunction CanInstall()\n{\n  #return true / false here\n}\nThis way the logging, etc could be standardized, it could be documented in the wiki, etc.\n. I would say no... Chocolatey doesn't touch anything that wasn't installed by Chocolatey.\nIf ShouldInstall() returns false, maybe even flush any trace of the Chocolatey install attempt -- i.e. nothing in c:\\chocolate\\lib\n. My main issue with the 'taking over existing installs, etc' is the complexity with the concept.\nI generally agree that it's something that would be useful... \nI just wonder if it's going to be a real bear to implement properly (with lots of edge cases).  You might have to draw some lines in the sand as to what you will / will not cover, because I think there's a potential for a lot of landmines along the way (as there often is when dealing with Windows and installers!)\nBut if you're up to the challenge, then I'm OK with it! ;0\n. Not if the XSD was put together properly... and handles the X by using <xs:any /> ;0  But most people forget about the X in XML.\nIn general, at one point I used to think schema validation was important -- not so much anymore (unless you care about making things go slower - haha).\n. http://nuget.codeplex.com/SourceControl/changeset/view/0624b2a0fb2a#src%2fCore%2fAuthoring%2fnuspec.xsd\nBoo.. no xs:any -- Don Box would be sad ;0\n. And yeah, I wasn't advocating messing with projectUrl either.  I just want a convenient way to get the original package source w/out having to do a ton of detective work.  \nIf I can go gallery package -> user -> repos that should be good enough for what I'm talking about.\nI still think it would be useful to have a repo for the source of the package a little more directly, but not at the expense of breaking nuget.exe.\n. You know, I'm thinking more and more that it would be good to have a direct link to where the package source lives... and even better to not even accept packages that don't have public source somewhere.\nRight now its a royal pain trying to hunt around to find the package source, for people like me, who run into issues with peoples packages and want to fix them.  I've done it at least a few times in the last couple of days, and I feel like I'm wasting time on a goose chase to try to find the sources every time.  Google authors name or handle .. hope they have a GitHub or Bitbucket account, cruise through their repos, etc.\nCase in point, I just tried to run the Powershell3 installer.  Of course, it bombed b/c the author didn't take into account the host OS version properly (Vista / Server 2008 are 6.0 and 7 / 2008 R2 are 6.1).  I can't find the source in this case, so I send off an email and hope I get a response... when I could have otherwise taken action.\nMy 2c -- this is a really poor feedback loop.\n. I setup something really similar at work.  I have an auto-publish scripts that runs on the build server.  The API key is stored only in the build server... \nThis script is kind of a universal one for packaging csproj/nuspec combos or just nuspec files for binaries.  A couple of things it doesn't do yet as noted by TODO... \n``` powershell\n[CmdletBinding(DefaultParametersetName='SinglePkg')]\nparam(\n  [Parameter(ValueFromPipeline = $true, Position = 1)]\n  [string]\n  $ApiKey = $Env:NUGET_PRIVATE_KEY,\n[Parameter(Mandatory = $false)]\n  [string]\n  $Source = 'https://yourcompanydefaulturl',\n[Parameter(ParameterSetName = 'SinglePkg', Mandatory = $true, Position = 0)]\n  [string]\n  [ValidateScript({ (Get-ChildItem \"$_.NuSpec\" -Recurse).Count -gt 0})]\n  $PackageName,\n[Parameter(ParameterSetName = 'AllPkgs')]\n  [Switch]\n  $All = $false,\n[Parameter(Mandatory = $false)]\n  [switch]\n  $Push,\n[Switch]\n  $KeepPackages\n)\nfunction Get-CurrentDirectory\n{\n  $thisName = $MyInvocation.MyCommand.Name\n}\nfunction Get-NugetPath\n{\n  Write-Host 'Executing Get-NugetPath'\n  Get-ChildItem -Path (Get-CurrentDirectory) -Include 'nuget.exe' -Recurse |\n    Select -ExpandProperty FullName -First 1\n}\nfunction Get-PackagesList([string] $source)\n{\n  Write-Host \"Retrieving package list from $source...\"\n  # TODO: handle -Prerelease\n  $list = .\\nuget list -Source $source -NonInteractive\n  $packages = @{}\n  $list |\n    ? { $ -notmatch '^Using credentials' } |\n    % {\n      $packageDef = $ -split '\\s'\n      $packages.\"$($packageDef[0])\" = $packageDef[1];\n    }\nWrite-Host \"Found $($packages.Count) packages\"\n  return $packages\n}\nfunction Test-IsVersionNewer([string]$base, [string]$new)\n{\n  # no base version - let this go through\n  if (!$base) { return $true }\nif ([string]::IsNullOrEmpty($new))\n  {\n    Write-Error \"New version cannot be empty\"\n    return $false\n  }\n# TODO: naive impl of SemVer handling since its the exception\n  # always let new SemVers go through\n  if ($new -match '-.*$') { return $true }\nreturn [Version]$new -gt [Version]$base\n}\nfunction Restore-Nuget\n{\n  Write-Host 'Executing Restore-Nuget'\n  $nuget = Get-NugetPath\nif ($nuget -ne $null)\n  {\n      &\"$nuget\" update -Self | Write-Host\n      return $nuget\n  }\n$nugetPath = Join-Path (Get-CurrentDirectory) 'nuget.exe'\n  (New-Object Net.WebClient).DownloadFile('http://nuget.org/NuGet.exe', $nugetPath)\nreturn Get-NugetPath\n}\nfunction Invoke-Pack([Hashtable]$packages, $include = '*.nuspec')\n{\n  $currentDirectory = Get-CurrentDirectory\n  Write-Host \"Invoke-Pack running against $currentDirectory for $include\"\nGet-ChildItem -Path $currentDirectory -Include $include -Recurse |\n    ? { (Split-Path $.DirectoryName -Leaf) -ne 'packages' } |\n    % {\n      Write-Verbose \"Found package file $\"\n      $csproj = Join-Path $.DirectoryName ($.BaseName + '.csproj')\n      if (Test-Path $csproj)\n      {\n        # TODO: yank this csproj stuff or make it parse like nuspec\n        &$script:nuget pack \"$csproj\" -Prop Configuration=Release -Exclude '***.CodeAnalysisLog.xml'\n      }\n      else\n      {\n        $spec = Xml\n        $id = $spec.package.metadata.id\n        $version = $spec.package.metadata.version\n        $base = $packages.$id\n        Write-Verbose \"Local package $id - version $version / remote $base\"\n        if (Test-IsVersionNewer $base $version)\n        {\n          &$script:nuget pack $_\n        }\n        else\n        {\n          Write-Host \"[SKIP] : Package $id matches server $version\"\n        }\n      }\n    }\n}\nfunction Invoke-Push\n{\n  $currentDirectory = Get-CurrentDirectory\n  Write-Host \"Invoke-Push running against $currentDirectory\"\nGet-ChildItem *.nupkg |\n    % {\n     Write-Host \"Pushing $ to source $source\"\n     if ($source -eq '') { &$script:nuget push $ $apiKey }\n     else { &$script:nuget push $_ $apiKey -source $source }\n    }\n}\n$script:nuget = Restore-Nuget\ndel *.nupkg\n$packages = Get-PackagesList $Source\nif ($PsBoundParameters.PackageName)\n  { Invoke-Pack $packages \"$PackageName.nuspec\" }\nelse\n  { Invoke-Pack $packages }\nif ($Push) { Invoke-Push }\nif (!$KeepPackages) { del *.nupkg }\n```\n. Yeah, these types of apps generally need a runtime of some sort... the above apps are all built on Python.  Of course, substitute in Node or Ruby for Python -- I'm sure there are other similar apps out there.\n. I looked around, but didn't see anything... could've missed it though.  It was late ;0\n. FYI -- I sent Oliver a msg through Google+ here, to get the ball rolling on his approval... IF this is something Chocolatey agrees with doing ;0\n. FYI -- the software that I'm installing uses nested INI files.  This isn't officially allowed in an ini, but is common practice.  Get-IniContent / Out-IniFile doesn't handle this properly.  I'm fixing now...\nExample config\nini\n[servers]\n[[serverA]]\nurl = blah.blah.com\n[[serverB]]\nurl = foo.bar.com\n. Previous comment trashed... totally overhauled the script for the nesting.  Basically rewrote the whole cmdlet and docs\n``` powershell\nRequires -Version 2.0\nfunction Get-IniContent\n{\n<#\n.Synopsis\n  Reads the contents of an INI file into an OrderedDictionary\n.Description\n  The dictionary can be manipulated the same way a Hashtable can, by\n  adding or removing keys to the various sections.\nNested INI sections represented like the following are supported:\n[foo]\n  name = value\n  [[bar]]\n  name = value\n  ;name = value\nComment lines prefixed with a ; are returned in the output with a name\n  of {Comment-X} where X is the comment index within the entire INI file\nComments also have a IsComment property attached to the values, so\n  that Out-IniFile may properly handle them.\n.Notes\n  Inspiration from Oliver Lipkau oliver@lipkau.net\n  http://tinyurl.com/9g4zonn\n.Inputs\n  String or FileInfo\n.Outputs\n  Collections.Specialized.OrderedDictionary\n  Keys with a OrderdedDictionary Value are representative of sections\nSections may be nested to any arbitrary depth\n.Parameter Path\n  Specifies the path to the input file. Can be a string or FileInfo\n  object\n.Example\n  $configFile = Get-IniContent .\\foo.ini\nDescription\n\nParses the foo.ini file contents into an OrderedDictionary for local\n  reading or manipulation\n.Example\n  $configFile = .\\foo.ini | Get-IniContent\n  $configFile.SectionName | Select *\nDescription\n\nSame as the first example, but using pipeline input.\n  Additionally outputs all values stored in the [SectionName] section of\n  the INI file.\n>\n[CmdletBinding()]\n  param(\n    [Parameter(ValueFromPipeline=$True, Mandatory=$True)]\n    [ValidateNotNullOrEmpty()]\n    [ValidateScript({ (Test-Path $) -and ($.Extension -eq '.ini') })]\n    [IO.FileInfo]\n    $Path\n  )\nProcess\n  {\n    Write-Verbose \"[INFO]: Get-IniContent processing file [$Path]\"\n# TODO: once Powershell 3 is common, this can be $ini = [ordered]@{}\n$ini = New-Object Collections.Specialized.OrderedDictionary\n\nfunction getCurrentOrEmptySection($section)\n{\n  if (!$section)\n  {\n    if (!$ini.Keys -contains '')\n    {\n      $ini[''] = New-Object Collections.Specialized.OrderedDictionary\n    }\n    $section = $ini['']\n  }\n  return $section\n}\n\n$comments = 0\n$sections = @($ini)\nswitch -regex -file $Path\n{\n  #http://stackoverflow.com/questions/9155483/regular-expressions-balancing-group\n  '\\[((?:[^\\[\\]]|(?<BR> \\[)|(?<-BR> \\]))+(?(BR)(?!)))\\]' # Section\n  {\n    $name = $matches[1]\n    # since the regex above is balanced, depth is a simple count\n    $depth = ($_ | Select-String '\\[' -All).Matches |\n      Measure-Object |\n      Select -ExpandProperty Count\n\n    # root section\n    Write-Verbose \"Parsing section $_ at depth $depth\"\n    # handles any level of nested section\n    $section = New-Object Collections.Specialized.OrderedDictionary\n    $sections[$depth - 1][$name] = $section\n    if ($sections.Length -le $depth)\n    {\n      $sections += $section\n    }\n    else\n    {\n      $sections[$depth] = $section\n    }\n  }\n  '^(;.*)$' # Comment\n  {\n    $section = getCurrentOrEmptySection $section\n    $name = '{Comment-' + ($comments++) + '}'\n    $section[$name] = $matches[1] |\n      Add-Member -MemberType NoteProperty -Name IsComment -Value $true -PassThru\n  }\n  '(.+?)=(.*)' # Key\n  {\n    $name, $value = $matches[1..2]\n    (getCurrentOrEmptySection $section)[$name] = $value\n  }\n}\n\nWrite-Verbose \"[SUCCESS]: Get-IniContent processed file [$path]\"\nreturn $ini\n\n}\n}\n```\n. And to save the contents recursively\n``` powershell\nRequires -Version 2.0\nfunction Out-IniFile\n{\n<#\n.Synopsis\n  Write the contents of a Hashtable or OrderedDictionary to an INI file\n.Description\n  The input can either be a standard Powershell hash created with @{},\n  an [ordered]@{} in Powershell 3, an OrderedDictionary created by the\n  Get-IniContent cmdlet.\nWill write out the fully nested structure to an INI file\n.Notes\n  Inspiration from Oliver Lipkau oliver@lipkau.net\n  http://tinyurl.com/94tdhdx\n.Inputs\n  Accepts either a Collections.Specialized.OrderedDictionary or\n  a standard Powershell Hashtable\n.Outputs\n  Returns an IO.FileInfo object if -PassThru is specified\n  System.IO.FileSystemInfo\n.Parameter InputObject\n  Specifies the OrderedDictionary or Hashtable to be written to the file\n.Parameter FilePath\n  Specifies the path to the output file.\n.Parameter Encoding\n  Specifies the type of character encoding used in the file. Valid\n  values are \"Unicode\", \"UTF7\", \"UTF8\", \"UTF32\", \"ASCII\",\n  \"BigEndianUnicode\", \"Default\", and \"OEM\". \"Unicode\" is the default.\n\"Default\" uses the encoding of the system's current ANSI code page.\n\"OEM\" uses the current original equipment manufacturer code page\n  identifier for the operating system.\n.Parameter Append\n  Adds the output to the end of an existing file, instead of replacing\n  the file contents.\n.Parameter Force\n  Allows the cmdlet to overwrite an existing read-only file. Even using\n  the Force parameter, the cmdlet cannot override security restrictions.\n.Parameter PassThru\n  Returns the newly written FileInfo. By default, this cmdlet does not\n  generate any output.\n.Example\n  @{ Section = @{ Foo = 'bar'; Baz = 1} } |\n    Out-IniFile -FilePath .\\foo.ini\nDescription\n\nWrites the given Hashtable to foo.ini as\n[Section]\n  Baz=1\n  Foo=bar\n.Example\n  @{ Section = [ordered]@{ Foo = 'bar'; Baz = 1} } |\n    Out-IniFile -FilePath .\\foo.ini\nDescription\n\nWrites the given Hashtable to foo.ini, in the given order\n[Section]\n  Foo=bar\n  Baz=1\n.Example\n  @{ Section = [ordered]@{ Foo = 'bar'; Baz = 1} } |\n    Out-IniFile -FilePath .\\foo.ini -Force\nDescription\n\nSame as previous example, except that foo.ini is overwritten should\n  it already exist\n.Example\n  $file = @{ Section = [ordered]@{ Foo = 'bar'; Baz = 1} } |\n    Out-IniFile -FilePath .\\foo.ini\nDescription\n\nSame as previous example, except that the FileInfo object is returned\n.Example\n  $config = Get-IniContent .\\foo.ini\n  $config.Section.Value = 'foo'\n$config | Out-IniFile -Path .\\foo.ini -Force\nDescription\n\nParses the foo.ini file contents into an OrderedDictionary with the\n  Get-IniContent cmdlet.  Manipulates the contents, then overwrites the\n  existing file.\n>\n[CmdletBinding()]\n  Param(\n    [Parameter(ValueFromPipeline=$true, Mandatory=$true)]\n    [ValidateScript({ ($ -is [Collections.Specialized.OrderedDictionary]) -or `\n      ($ -is [Hashtable]) })]\n    [ValidateNotNullOrEmpty()]\n    $InputObject,\n[Parameter(Mandatory=$true)]\n[ValidateNotNullOrEmpty()]\n[ValidateScript({ Test-Path $_ -IsValid })]\n[string]\n$FilePath,\n\n[Parameter(Mandatory=$false)]\n[ValidateSet('Unicode','UTF7','UTF8','UTF32','ASCII','BigEndianUnicode',\n  'Default','OEM')]\n[string]\n$Encoding = 'Unicode',\n\n[switch]\n$Append,\n\n[switch]\n$Force,\n\n[switch]\n$PassThru\n\n)\nprocess\n  {\n    Write-Verbose \"[INFO]: Out-IniFile writing file [$FilePath]\"\n    if ((New-Object IO.FileInfo($FilePath)).Extension -ne '.ini')\n    {\n      Write-Warning 'Out-IniFile [$FilePath] does not end in .ini extension'\n    }\nif ((Test-Path $FilePath) -and (!$Force))\n{\n  throw \"The -Force switch must be applied to overwrite $outFile\"\n}\n\n$outFile = $null\nif ($append) { $outFile = Get-Item $FilePath -ErrorAction SilentlyContinue }\nif ([string]::IsNullOrEmpty($outFile) -or (!(Test-Path $outFile)))\n  { $outFile = New-Item -ItemType File -Path $FilePath -Force:$Force }\n\n#recursive function write sections at various depths\nfunction WriteKeyValuePairs($dictionary, $sectionName = $null, $depth = 0)\n{\n  #Sections - take into account nested depth\n  if ((![string]::IsNullOrEmpty($sectionName)) -and ($depth -gt 0))\n  {\n    $sectionName = \"$('[' * $depth)$sectionName$(']' * $depth)\"\n    Write-Verbose \"[INFO]: writing section $sectionName to $outFile\"\n    Add-Content -Path $outFile -Value $sectionName -Encoding $Encoding\n  }\n\n  $dictionary.GetEnumerator() |\n    % {\n      if ($_.Value -is [Collections.Specialized.OrderedDictionary] -or\n        $_.Value -is [Hashtable])\n      {\n        Write-Verbose \"[INFO]: Writing section [$($_.Key)] of $sectionName\"\n        WriteKeyValuePairs $_.Value $_.Key ($depth + 1)\n      }\n      elseif ($_.Value.IsComment -or ($_.Key -match '^\\{Comment\\-[\\d]+\\}'))\n      {\n        Write-Verbose \"[INFO]: Writing comment $($_.Value)\"\n        Add-Content -Path $outFile -Value $_.Value -Encoding $Encoding\n      }\n      else\n      {\n        Write-Verbose \"[INFO]: Writing key $($_.Key)\"\n        Add-Content -Path $outFile -Value \"$($_.Key)=$($_.Value)\" -Encoding $Encoding\n      }\n    }\n}\n\nWriteKeyValuePairs $InputObject\n\nWrite-Verbose \"[SUCCESS]: Out-IniFile wrote file [$outFile]\"\nif ($PassThru) { return $outFile }\n\n}\n}\n``\n. I'm going to incorporate these into https://github.com/EastPoint/Midori\n. I think that script could use a bit of a refactor... there's a lot of unnecessary futzing around with;` \nJust -split ';' into an array, add to the array if the  -contains fails ... then -join ';'\n. Yes... failed to mention tab completion.  That is also a biggie IMHO.\n. http://trevorsullivan.net/2012/10/09/powershell-generating-functions-with-dynamic-parameter-auto-completion-values/\n. Yeah, I checked existing issues.. saw a few regarding uninstall -- but nothing about a helper that I saw initially.. but of course, I could have missed it.\nSometimes you can't just store the GUID though -- case in point -- I just pushed up HipChat, which is built on Air (which I also just pushed up).\nFishing out the GUID is a pretty wonky affair\nhttps://github.com/Iristyle/ChocolateyPackages/blob/master/HipChat/tools/chocolateyUninstall.ps1\nNote that I'm using the LocalPackage reg value which is the location that the generated MSI is stored on disk (in %SYSTEMROOT%\\Installer)  There is another key called UninstallString that has the actual GUID.. but you would need to parse it.\nIn this case, it was simpler to /x on the path stored in LocalPackage, because no additional parsing was required.\nAIR is a bit of an edge case I think... but I don't know if there are other runtimes with similar behavior or not.\n. Also, in my example, keying off of SID S-1-5-18 (local system) is not very robust (its a bit hacky actually)... but to be able to have AIR put HipChat into Program Files, I had to launch the AIR installer with Start-ChocolateyProcessAsAdmin\nhttps://github.com/Iristyle/ChocolateyPackages/blob/master/HipChat/tools/chocolateyInstall.ps1#L29\nA better approach would be to scan all the UserData to find the right reg key... but I wanted to get something out the door quick ;0\n. I'm not sure what you mean by your question.. I did make an AIR runtime package.\nhttp://chocolatey.org/packages/AdobeAIR\nThere are 2 ways to ship Air as far as I can tell...\n- Embed the runtime (requires some signed legal stuff with Adobe)\n- Install the AIR runtime, use the tool from the runtime to install the .air file.\nFor HipChat, I opted for option 2.  The air runtime is a dependency of HipChat... and then the tool is used to install hipchat.air... as part of that install AIR seems to generate a bogus MSI, so that HipChat shows up in add/remove programs.\n. Not sure if your comment is directed to me @rismoney ?  The thing is, this isn't for an uninstall, I want to carry on with the install that got borked.\nHere's a real example of what happened this AM.. I told another dev to install EPSDevTools.Web.  I wasn't there for all of this, so I'm kind of paraphrasing what happened:\n- He already has Sublime installed, and accidentally left it open.  So the Sublime installer died, killing the install of the main EPSDevTools.Web package.\n- OK, so now we're in this half installed state.  So try reinstalling with -force\n- NodeJS package was goofed up, so that kills us the next time.\nSo sometimes you get into this state of .. hmm... did all my dependencies properly install?  Maybe I should just start trashing the new folders out of /lib to kick Choc to reinstall missing bits because -force, AFAIK, won't execute the installer for dependent packages.. and there can be situations where the install of a dependency started, but couldn't proceed, so now it's in lib and Choc thinks its installed.\nSo then you say as a package maintainer... maybe I'm just better off calling cinst a bunch of times in my chocolateyInstall.ps1 to work around this, instead of using the dependencies in the nuspec, because these unexpected things can happen.  But of course that kind of defeats the purpose.\nIMHO, this is one of the bigger pain points I've run into choc.  And don't get me wrong, I love Chocolatey, I just think that the user experience here could use some polishing -- principal of least surprise and all that ;0\nSo -- maybe to improve on this situation:\n- Ensure that calling -force on a parent package, calls it down the hierarchy.  (I don't think this is the current behavior, but obviously correct me if I've drawn the wrong conclusion)\n- When there are dependencies for a package, provide a summary at the end that lists success / fail status.  \nJust as a quick'n'dirty sample of what this could look like:\n```\nInstalled\n[\u2714] - nodejs.install\n[\u2714] - SourceCodePro\nFailed\n[\u2716] - SublimeText2.app\n```\nThe characters are taken from the Mocha reporter -- unicode 2714 for succes and 2716 for fail,.  (These can have problems displaying based on the shell you're in under Windows unfortunately IIRC)\n- If a parent package has failed dependencies, maybe it's also best to do a delete of that package, so you don't need to do any sort of -force.  Same for any dependent packages.  If the heuristic for determining if something is installed, is the presence of the package on disk, then if something doesn't succeed, trash the folder.\n- A lot of times if there's a script attached to a package that has a bunch of dependencies, the script is dependent on those things being properly installed / available in PATH.  If they aren't, abort running chocolateyInstall.ps1 for the parent package.\nThoughts?\n. Yeah, the cuninst approach sounds like it could be good as long as it:\n- Handles being called on only the last failed dependency\n- Handles being called up the chain / nested dependency hierarchy\nI'm thinking of situations where it's undesirable to run an uninstaller.  In the most extreme, consider Visual Studio was a dependency and took an hour to install.  You definitely don't want to uninstall it as part of a rollback if it was a later dependency in the list that exploded.\nAlso -- the docs should probably stress the scope of both chocolateyInstall.ps1 / chocolateyUninstall.ps1 and how it's important for them to be iidempotent.\n. Ok, so yeah.. thinking on this some more -- I don't think that cuninst is the right way to go.\nI think the best approach is to delete the last failed thing from \\chocolatey\\lib -- do not pass go, do not collect :moneybag:  If the package was a dependency of a parent package, also delete the parent from lib, and so on up the hierarchy.\nAlso, there's another contributing factor that is causing a bunch of confusion here.  A co-worker got through like 18 of 20 packages in the mentioned EPSDevTools.Web.  There was a temporary network hiccup grabbing Ruby, which killed the Ruby install and everything after that.\nFrom that experience, examining his console output and the lib directory, I noticed 3 major problems.\n- Chocolatey downloads all the nested dependencies up front.  This should be changed to downloading each on demand IMHO.  With all the packages downloaded to disk, even with a -force, chocolatey skips the failed dependencies (in this case Ruby, Vagrant and VirtualBox), because they're on disk.  So a real simple solution is not download until they're ready to be used.\n- So we deleted those 3 folders, and re-ran with a -force.  I thought this was supposed to cause the chocolateyInstall.ps1 for EPSDevTools.Web to execute again.  It didn't.  So Ruby, Vagrant and VirtualBox installed, but the extra NPM packages and Gems from the install script did not.  The only way to work around this, was to delete the EPSDevTools.Web package from lib, then re-run the install.  It skipped all the dependencies as expected, but ran the script it was supposed to.\n- We're still having issues with not recapturing environment variables after cinst wraps up.  So clearly my previous work here wasn't enough to fix this.  So of course you end up in the shell dance... close, re-open, re-run, etc. because the current shell can't use the things that were just installed.\n. Haha -- stream of conciousness responses :smiley_cat: \nYeah, your reasoning works the same in both directions ultimately -- this is, in my mind, a principle of least surprise kind of thing, and I think folks will have different options on it.  I can see both sides of the fence.\nI agree that as implemented, the default explicit is the best / safest tactic when you're talking about global dependencies... it can just be inconvenient at times because it causes a domino effect of updates for maintainers of packages.\nAs a convenience, a switch would def be useful when you're OK with playing fast and loose.\n. Checking for a font being installed might not be sufficient for a versioned font (like SourceCode Pro anyhow).  For that situation, I needed to upgrade an existing font in-place without showing dialogs, etc. (which boils down to remove / install)\nIt's much harder than it should be ;0\nYou have to resort to removing / re-installing in that case to prevent the Windows dialogs, a reboot, etc.  See my install code for SourceCode Pro\nI took what was published here, and modded it a bit for my needs.\nIt lives in my repo as FontHelpers.ps1\n. Also, SourceCodePro is OpenType (.otf), which is prefered over TrueType (.ttf), so any generic function should take that option into account, i.e.\npowershell\n[Parameter()]\n[ValidateSet('OpenType', 'TrueType')]\n[string]\n$Format = 'TrueType'\n. Related to https://github.com/chocolatey/chocolatey/pull/171 but not quite the same idea\n. ",
    "poehlert": "Though it's not ideal, Server core and in fact all windows for ages have included expand.exe to extract .cab files. This is part of windows setup so isn't like to change... well really ever. For early boot-strapping, it works well though I haven't found it particularly adept at compressing things.\n. Though it's not ideal, Server core and in fact all windows for ages have included expand.exe to extract .cab files. This is part of windows setup so isn't like to change... well really ever. For early boot-strapping, it works well though I haven't found it particularly adept at compressing things.\n. ",
    "alanstevens": "It only requires admin privileges to create a \"soft\" link. I've been testing with UAC on. If user privileges are an issue, you should install chocolatey and put the bat files/sym links under %userprofile%.\n. Sym links suck on Windows. It's a shame because this would've been a good approach.\n. It only requires admin privileges to create a \"soft\" link. I've been testing with UAC on. If user privileges are an issue, you should install chocolatey and put the bat files/sym links under %userprofile%.\n. Sym links suck on Windows. It's a shame because this would've been a good approach.\n. ",
    "alexpopdev": "This would be a very cool feature. Maybe also have the ability to import packages.config files into your main one: e.g. packages.essentials.config, packages.systools.config, packages.devtools.config in order to share bundles of packages between developers.\n. This would be a very cool feature. Maybe also have the ability to import packages.config files into your main one: e.g. packages.essentials.config, packages.systools.config, packages.devtools.config in order to share bundles of packages between developers.\n. ",
    "Porkstone": "I'm using chocolatey to install utils on a new dev machine at work, i'd love it if I could get a file of everything I installed into my dropbox folder so that next time I have to build a dev box I can use this as check list. I might also find it useful when installing something on my desktop and then later needing it on my laptop. \n. I'm using chocolatey to install utils on a new dev machine at work, i'd love it if I could get a file of everything I installed into my dropbox folder so that next time I have to build a dev box I can use this as check list. I might also find it useful when installing something on my desktop and then later needing it on my laptop. \n. ",
    "junosuarez": "In addition to having this at the machine level, I think it would be very useful to create lists of packages at the gallery level - see my issue at https://github.com/NuGet/NuGetGallery/issues/521\n. My mistake - let me try staging the patch in a feature branch and resubmitting.\n. I came across the use case while testing new packages I was creating. One of them was repeatedly downloading a ~60 meg file, and I wanted to take advantage of a cached version.\nFor 1, we could do a HEAD request and check the content-length. Alternately, we could have the package author specify an MD5 hash in the package and then check the cached file against that hash. This could also prevent corrupted installers when being run the first time.\nFor 2, perhaps a better strategy would be to take the version number from the package being run. Is the package version already available to these helper functions in a higher scoped variable? That would be preferable to adding it as a parameter to the function and pushing the responsibility of specifying a version number off to the package author.\n. HEAD will return only the headers, rather than a full response. The problem is not all servers are set up to properly return the Content-Length header, although most do. It would be up to the client to handle redirect responses (301 or 302), and the native .Net HttpClient object handles those transparently. I'd have to double check, but I'm pretty sure we get that for free in PowerShell, too. As far as redirection based on cookies, I'm not sure what you mean by that - could you give an example?\n. After thinking through this a little bit more, there are two different concerns here:\n1. Is the file that I just downloaded the same as the one I meant to download? (eg, after first cinst)\n2. Is the file that I have already downloaded the same as the one I would otherwise need to download? (eg, when re-installing with -force)\nAddressing 1 requires some way to verify the contents of the file. Content length would be the most naive way, hashing (eg md5) would be the most common way, and key-signing would be the most secure (and most complex). As an example, other package management systems keep hashes of the packages themselves. In Chocolatey, many packages are just scripts which in turn download other installers. It would be good to have some form of checksum verification for these files, too. \nI agree that calculating these checksums shouldn't be a manual task for package authors. Perhaps the chocolatey pack could be extended to pre-process the chocolateyInstaller.ps1 scripts to include the hashes.\nIssue 2 from above is an issues of synchronization, rather than verification. The chocolatey package would be updated anytime the software version, and thus the remote installer file, is updated. I think it would be sufficient just to ensure that 1) the cached version matches the chocolatey package version number and 2) the hash of the cached file matches the expected hash value for the package.\n. In addition to having this at the machine level, I think it would be very useful to create lists of packages at the gallery level - see my issue at https://github.com/NuGet/NuGetGallery/issues/521\n. My mistake - let me try staging the patch in a feature branch and resubmitting.\n. I came across the use case while testing new packages I was creating. One of them was repeatedly downloading a ~60 meg file, and I wanted to take advantage of a cached version.\nFor 1, we could do a HEAD request and check the content-length. Alternately, we could have the package author specify an MD5 hash in the package and then check the cached file against that hash. This could also prevent corrupted installers when being run the first time.\nFor 2, perhaps a better strategy would be to take the version number from the package being run. Is the package version already available to these helper functions in a higher scoped variable? That would be preferable to adding it as a parameter to the function and pushing the responsibility of specifying a version number off to the package author.\n. HEAD will return only the headers, rather than a full response. The problem is not all servers are set up to properly return the Content-Length header, although most do. It would be up to the client to handle redirect responses (301 or 302), and the native .Net HttpClient object handles those transparently. I'd have to double check, but I'm pretty sure we get that for free in PowerShell, too. As far as redirection based on cookies, I'm not sure what you mean by that - could you give an example?\n. After thinking through this a little bit more, there are two different concerns here:\n1. Is the file that I just downloaded the same as the one I meant to download? (eg, after first cinst)\n2. Is the file that I have already downloaded the same as the one I would otherwise need to download? (eg, when re-installing with -force)\nAddressing 1 requires some way to verify the contents of the file. Content length would be the most naive way, hashing (eg md5) would be the most common way, and key-signing would be the most secure (and most complex). As an example, other package management systems keep hashes of the packages themselves. In Chocolatey, many packages are just scripts which in turn download other installers. It would be good to have some form of checksum verification for these files, too. \nI agree that calculating these checksums shouldn't be a manual task for package authors. Perhaps the chocolatey pack could be extended to pre-process the chocolateyInstaller.ps1 scripts to include the hashes.\nIssue 2 from above is an issues of synchronization, rather than verification. The chocolatey package would be updated anytime the software version, and thus the remote installer file, is updated. I think it would be sufficient just to ensure that 1) the cached version matches the chocolatey package version number and 2) the hash of the cached file matches the expected hash value for the package.\n. ",
    "findel": "What happened to this idea? I was just looking for a way to create a packages.config file on one machine so that I could share with others. \n. @gep13 Thanks! \n. What happened to this idea? I was just looking for a way to create a packages.config file on one machine so that I could share with others. \n. @gep13 Thanks! \n. ",
    "ot-brett-jones": "Any update on this? It would be great to use a parameter to specify if we want to install it (much like npm)\ncinst thepackage --save\nIf --save is just a flag param then it saves to ./packages.config but you could pass a filepath to the --save param for it to save there.\n. Any update on this? It would be great to use a parameter to specify if we want to install it (much like npm)\ncinst thepackage --save\nIf --save is just a flag param then it saves to ./packages.config but you could pass a filepath to the --save param for it to save there.\n. ",
    "markwhitfeld": "This feature would be awesome! Coming soon I hope! :-)\n. This feature would be awesome! Coming soon I hope! :-)\n. ",
    "johnnyreilly": "I've just started using Chocolatey and I think this would be a fantastic feature to have! Thanks @jongalloway for the workaround too.\n. I've just started using Chocolatey and I think this would be a fantastic feature to have! Thanks @jongalloway for the workaround too.\n. ",
    "nemchik": "I know this is not exactly what you're going for with this request, but here is a powershell command you can run to kinda accomplish your goal\npowershell\n\"choco install\",((clist -l | % {$_ -replace '^(\\S*)\\s.*$','${1}'} | select -Skip 1 | select -first (((clist -l | % {$_ -replace '^(\\S*)\\s.*$','${1}'} | measure).Count)-2)) -join \" \") -join \" \" | Out-File -FilePath cinst.bat -Encoding ascii\nedited to output the bat file as ascii\nthen just take the cinst.bat that it generates and copy it to another machine (install chocolatey on the new machine first though!)\nplease pardon my ridiculous inefficiency with powershell and inconsistent use of syntax.\nAlso note that @jongalloway posted a solution that unfortunately won't work if you have packages like dotnet3.5 because it stips out the .5\n. @aronovgj yeah i didn't think about that, im using 0.9.9\n. I suppose another good thing to consider would be this;\nChocolatey 0.9.9 stopped using version numbers in the lib folder naming, so if you run that command i posted and then delete all the subfolders from lib and then run the bat file it'll kinda \"clean\" the folder\n. By comparison if you look at apt-get (which  chocolatey seems to be compared to often) there are separate architecture packages any time you have a program that can run in parallel with it's alternate architecture counterpart. If a program is multi-arch you'd only need one package, but otherwise you get two, and if you need both you install both.\n. I kinda think that should be up to the package maintainer.\nIf you're going to post a package you should take the architecture\nspecifics into consideration.\nSome apps may not allow you to have both the 64 and 32 bit versions\ninstalled and one might overwrite the other (even though windows tries to\nseparate program files x86).\nIn the case of Java I agree a meta package would be handy.\nOn Jul 12, 2014 2:48 PM, \"FichteFoll\" notifications@github.com wrote:\n\nHow about a meta package that installs all arch versions available for\nyour arch? Like, x86 for a 32bit OS and both x86 and x64 for a 64bit OS?\nThis of course requires two separate packages for the archs too, so you can\ninstall them manually if desired.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/259#issuecomment-48822117\n.\n. is there a specific recommendation for how to make this move manually? (other than just move the folder?)\n. The folder moving is easy enough. I don't know about changing the environment variables. I assume that can be done through the command line pretty easily? So far whenever I try to change an environment variable it seems to reset after I close my window and open a new one.\n\nTo clarify, the next point release of chocolatey will do this automatically correct? Any existing installs should just need to 'cup chocolatey' and it'll handle the moving of the folder and the environment variable, right?\nThe reason I ask is I've setup multiple machines i help family/friends with to use chocolatey and I would like to test moving things on my own PC and also see what it would be like having the next point release handle it.\n. thanks to James' tutorial I found the variables and I have a Path in the User and System section. Currently the User path contains C:\\Chocolatey\\bin and the System path contains C:\\ProgramData\\chocolatey\\bin (this is where my current chocolatey install is after i uninstalled and reinstalled to see if that would set everything correctly)\nAlso I do NOT have the ChocolateyInstall variable under User but i DO have it under System (differing from the screenshots) and it's set to C:\\ProgramData\\chocolatey\\bin .\n1) Should ChocolateyInstall be in User or System?\n2) Should C:\\ProgramData\\chocolatey\\bin be in the User or System path?\nI plan on writing a quick powershell script to remove anything from where it shouldn't be and put it where it should be.\nP.S. I've found the two locations in the registry for these variables are\nUser:\nHKEY_CURRENT_USER\\Environment\nSystem:\nHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\nSo it should be pretty easy to write something up to fix these.\n. I know this is not exactly what you're going for with this request, but here is a powershell command you can run to kinda accomplish your goal\npowershell\n\"choco install\",((clist -l | % {$_ -replace '^(\\S*)\\s.*$','${1}'} | select -Skip 1 | select -first (((clist -l | % {$_ -replace '^(\\S*)\\s.*$','${1}'} | measure).Count)-2)) -join \" \") -join \" \" | Out-File -FilePath cinst.bat -Encoding ascii\nedited to output the bat file as ascii\nthen just take the cinst.bat that it generates and copy it to another machine (install chocolatey on the new machine first though!)\nplease pardon my ridiculous inefficiency with powershell and inconsistent use of syntax.\nAlso note that @jongalloway posted a solution that unfortunately won't work if you have packages like dotnet3.5 because it stips out the .5\n. @aronovgj yeah i didn't think about that, im using 0.9.9\n. I suppose another good thing to consider would be this;\nChocolatey 0.9.9 stopped using version numbers in the lib folder naming, so if you run that command i posted and then delete all the subfolders from lib and then run the bat file it'll kinda \"clean\" the folder\n. By comparison if you look at apt-get (which  chocolatey seems to be compared to often) there are separate architecture packages any time you have a program that can run in parallel with it's alternate architecture counterpart. If a program is multi-arch you'd only need one package, but otherwise you get two, and if you need both you install both.\n. I kinda think that should be up to the package maintainer.\nIf you're going to post a package you should take the architecture\nspecifics into consideration.\nSome apps may not allow you to have both the 64 and 32 bit versions\ninstalled and one might overwrite the other (even though windows tries to\nseparate program files x86).\nIn the case of Java I agree a meta package would be handy.\nOn Jul 12, 2014 2:48 PM, \"FichteFoll\" notifications@github.com wrote:\n\nHow about a meta package that installs all arch versions available for\nyour arch? Like, x86 for a 32bit OS and both x86 and x64 for a 64bit OS?\nThis of course requires two separate packages for the archs too, so you can\ninstall them manually if desired.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/259#issuecomment-48822117\n.\n. is there a specific recommendation for how to make this move manually? (other than just move the folder?)\n. The folder moving is easy enough. I don't know about changing the environment variables. I assume that can be done through the command line pretty easily? So far whenever I try to change an environment variable it seems to reset after I close my window and open a new one.\n\nTo clarify, the next point release of chocolatey will do this automatically correct? Any existing installs should just need to 'cup chocolatey' and it'll handle the moving of the folder and the environment variable, right?\nThe reason I ask is I've setup multiple machines i help family/friends with to use chocolatey and I would like to test moving things on my own PC and also see what it would be like having the next point release handle it.\n. thanks to James' tutorial I found the variables and I have a Path in the User and System section. Currently the User path contains C:\\Chocolatey\\bin and the System path contains C:\\ProgramData\\chocolatey\\bin (this is where my current chocolatey install is after i uninstalled and reinstalled to see if that would set everything correctly)\nAlso I do NOT have the ChocolateyInstall variable under User but i DO have it under System (differing from the screenshots) and it's set to C:\\ProgramData\\chocolatey\\bin .\n1) Should ChocolateyInstall be in User or System?\n2) Should C:\\ProgramData\\chocolatey\\bin be in the User or System path?\nI plan on writing a quick powershell script to remove anything from where it shouldn't be and put it where it should be.\nP.S. I've found the two locations in the registry for these variables are\nUser:\nHKEY_CURRENT_USER\\Environment\nSystem:\nHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\nSo it should be pretty easy to write something up to fix these.\n. ",
    "aronovgj": "this accomplishes basically the same thing as above (if using old chocolatey the sting length in file.write() should be corrected)...\nhttps://github.com/aronovgj/choco-auto/blob/master/create_bat.py\n. sorry, edited it a few times. i actually meant my own script :)\n. ctrl+c works for me if i do it several times in a row.\n. I thought so too but I did what I was told:\nhttps://groups.google.com/d/msg/chocolatey/VZIbnZTyGLU/47C5RHo_zlYJ\nAm 02.01.2015 um 11:45 schrieb Gary Ewan Park:\n\n@aronovgj I think that this issue would be best added here:\nhttps://github.com/chocolatey/chocolatey-package-updater\nCan you please re-create the issue there, and I will close this issue.\nThanks\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/issues/650#issuecomment-68518927\n. not a problem at all...\n. this accomplishes basically the same thing as above (if using old chocolatey the sting length in file.write() should be corrected)...\nhttps://github.com/aronovgj/choco-auto/blob/master/create_bat.py\n. sorry, edited it a few times. i actually meant my own script :)\n. ctrl+c works for me if i do it several times in a row.\n. I thought so too but I did what I was told:\nhttps://groups.google.com/d/msg/chocolatey/VZIbnZTyGLU/47C5RHo_zlYJ\n\nAm 02.01.2015 um 11:45 schrieb Gary Ewan Park:\n\n@aronovgj I think that this issue would be best added here:\nhttps://github.com/chocolatey/chocolatey-package-updater\nCan you please re-create the issue there, and I will close this issue.\nThanks\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/issues/650#issuecomment-68518927\n. not a problem at all...\n. \n",
    "jarrettmeyer": "The current instructions work as is with RemoteSigned. Screen shot...\nhttp://c85212.r12.cf2.rackcdn.com/images/chocolatey-install-remotesigned.png\n. The current instructions work as is with RemoteSigned. Screen shot...\nhttp://c85212.r12.cf2.rackcdn.com/images/chocolatey-install-remotesigned.png\n. ",
    "davidalpert": "I had a similar experience just now using the github editor in chrome.\ncursor appeared to be a line and a half below where it was editing.  weird.\nOn Fri, Feb 17, 2012 at 10:36 PM, Rob Reynolds <\nreply@reply.github.com\n\nwrote:\nAwesome, thank you. Freaking droid web browser i'm on right now is a pos\nwhen it comes to editing. It doesn't go to where you point and it's\nimpossible to navigate by keys\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/pull/75#issuecomment-4031968\n. @Mohammed90 did you ever resolve this issue?\n. I had a similar experience just now using the github editor in chrome.\ncursor appeared to be a line and a half below where it was editing.  weird.\n\nOn Fri, Feb 17, 2012 at 10:36 PM, Rob Reynolds <\nreply@reply.github.com\n\nwrote:\nAwesome, thank you. Freaking droid web browser i'm on right now is a pos\nwhen it comes to editing. It doesn't go to where you point and it's\nimpossible to navigate by keys\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/pull/75#issuecomment-4031968\n. @Mohammed90 did you ever resolve this issue?\n. \n",
    "bilke": "Thanks for clarification and also for the links!\n. Thanks for clarification and also for the links!\n. ",
    "bravo-kernel": ":+1: \n. :+1: \n. ",
    "philippdolder": "Thanks. That works for now\n. Thanks. That works for now\n. ",
    "chrisortman": "I ran into this today setting up a new windows 8 box\n. I ran into this today setting up a new windows 8 box\n. ",
    "jamesmanning": "Yeah, sorry, should have mentioned that - the actual value written with SetEnvironmentVariable is fine, and new shells (cmd, powershell, etc) have the right value. :)\n. #5 is about pinning a version. This issue is about making an app show up on the task bar. AFAICT they're unrelated, except they both use the verb 'pin'?\n. Okey dokey - I registered a new account on the gallery and then used the 'contact owners' to notify of the issue.\nThanks!\n. Yeah, sorry, should have mentioned that - the actual value written with SetEnvironmentVariable is fine, and new shells (cmd, powershell, etc) have the right value. :)\n. #5 is about pinning a version. This issue is about making an app show up on the task bar. AFAICT they're unrelated, except they both use the verb 'pin'?\n. Okey dokey - I registered a new account on the gallery and then used the 'contact owners' to notify of the issue.\nThanks!\n. ",
    "krivan": "I'm still new here, I only discovered the page today and started playing around a bit. But I think this feature request is what we need as well: Chocolatey could be the ideal framework for us to use in our environment to deploy and keep applications up to date. Many (if not : practically all) of these applications are considered to be private, so I can't really publish them to a public repository. Many of our \"standard\" software is also packaged with custom settings (e.g. : office). If we could host our own private repository (or multiple repositories, to reduce network impact coming from several sites), that could be the start of something really great!\n. I'm still new here, I only discovered the page today and started playing around a bit. But I think this feature request is what we need as well: Chocolatey could be the ideal framework for us to use in our environment to deploy and keep applications up to date. Many (if not : practically all) of these applications are considered to be private, so I can't really publish them to a public repository. Many of our \"standard\" software is also packaged with custom settings (e.g. : office). If we could host our own private repository (or multiple repositories, to reduce network impact coming from several sites), that could be the start of something really great!\n. ",
    "LucidSage": "If you're interesting in this feature you may also be interested in this discussion about improving how sources are handled:\nhttps://groups.google.com/forum/?fromgroups#!topic/chocolatey/oNcuz6QzgNY\nFeedback would be really appreciated :)\n. Cool. Thanks for considering it. Let me know if you see anything that could be improved.\n. Sounds like a good idea. That would be be a safer way to enable this.\n. Chocolatey is just a PowerShell wrapping of NuGet. The official version has overridden the source argument for every call. This stops NuGet from using the config file settings. What I did was remove the overrides so that NuGet can use its own config settings. By adding the Chocolatey source to the NuGet config the same behavior is maintained.\nThe side effect of this approach is that NuGet calls will also use the Chocolatey source added to the config. This is not ideal. This is why Rob is working on adding a Chocolatey specific config file.\nI use the NuGet sources command to add a reference to our internal feed too. It has been working fine so far, but I am planning on using the Chocolatey specific config when it becomes available.\n. Yes, I would like to handle it. I am still getting used to git/github and I  could use the experience. Thanks!\n. Glad I can help. It was a good experience for me to get more familiar with git too. I appreciate it!\n. Cool! Glad I could help :)\n. I have opened a pull request that adds this feature: https://github.com/chocolatey/chocolatey/pull/108\n. At first I had a feeling that there was a way to pass multiple source directly through as is. It just did not occur to me to use double quotes. Seems obvious now :)\nThe code in this request handles the translation of a PowerShell array (comma delimited) to the format expected by NuGet (semi-colon delimited). It also let single quotes to work, since I did not think of doubling it up.\nSo I guess this is not really needed then, unless you prefer the more PowerShellish format.\n. Some of what I encountered has to do with how PowerShell handles arrays. So when you give it \"blah1,blah2\" it converts it to an array of two strings, which does not preserve the original formatting. That's why the code in this request needs to do some extra formatting before it passes it to NuGet.\nThe extra quotes seem to prevent PowerShell from handling it as an array and leave it as the string we want. But I have not had a chance to debug through it using the double quotes yet, so this is mostly just conjecture on my part :)\n. Discussion started here: https://groups.google.com/forum/?fromgroups#!topic/chocolatey/79SRA5V3hs8\n. I have started on the changes that you have suggested. I will create a new pull request when they are ready.\n. If you're interesting in this feature you may also be interested in this discussion about improving how sources are handled:\nhttps://groups.google.com/forum/?fromgroups#!topic/chocolatey/oNcuz6QzgNY\nFeedback would be really appreciated :)\n. Cool. Thanks for considering it. Let me know if you see anything that could be improved.\n. Sounds like a good idea. That would be be a safer way to enable this.\n. Chocolatey is just a PowerShell wrapping of NuGet. The official version has overridden the source argument for every call. This stops NuGet from using the config file settings. What I did was remove the overrides so that NuGet can use its own config settings. By adding the Chocolatey source to the NuGet config the same behavior is maintained.\nThe side effect of this approach is that NuGet calls will also use the Chocolatey source added to the config. This is not ideal. This is why Rob is working on adding a Chocolatey specific config file.\nI use the NuGet sources command to add a reference to our internal feed too. It has been working fine so far, but I am planning on using the Chocolatey specific config when it becomes available.\n. Yes, I would like to handle it. I am still getting used to git/github and I  could use the experience. Thanks!\n. Glad I can help. It was a good experience for me to get more familiar with git too. I appreciate it!\n. Cool! Glad I could help :)\n. I have opened a pull request that adds this feature: https://github.com/chocolatey/chocolatey/pull/108\n. At first I had a feeling that there was a way to pass multiple source directly through as is. It just did not occur to me to use double quotes. Seems obvious now :)\nThe code in this request handles the translation of a PowerShell array (comma delimited) to the format expected by NuGet (semi-colon delimited). It also let single quotes to work, since I did not think of doubling it up.\nSo I guess this is not really needed then, unless you prefer the more PowerShellish format.\n. Some of what I encountered has to do with how PowerShell handles arrays. So when you give it \"blah1,blah2\" it converts it to an array of two strings, which does not preserve the original formatting. That's why the code in this request needs to do some extra formatting before it passes it to NuGet.\nThe extra quotes seem to prevent PowerShell from handling it as an array and leave it as the string we want. But I have not had a chance to debug through it using the double quotes yet, so this is mostly just conjecture on my part :)\n. Discussion started here: https://groups.google.com/forum/?fromgroups#!topic/chocolatey/79SRA5V3hs8\n. I have started on the changes that you have suggested. I will create a new pull request when they are ready.\n. ",
    "CumpsD": "Is there a spot on the wiki that details to process of adding an internal chocolatey feed?\n. @gep13 Yep, that's it, thanks! Was clicking all around the wiki but didn't spot that one :)\n. Why not prompt for elevation when we detect it?\n. Is there a spot on the wiki that details to process of adding an internal chocolatey feed?\n. @gep13 Yep, that's it, thanks! Was clicking all around the wiki but didn't spot that one :)\n. Why not prompt for elevation when we detect it?\n. ",
    "mwrock": "Sweet! There is definitely pain in proxies. While there is a sub culture who enjoys that and I do not want to alienate them, I will say that the first 10 years of my career that was absent from using a proxy (and I might add regular expressions as well) were a good 10 years!\n. Just curious when you were planning to push a new chocolatey version to chocolatey.org with the latest bits. We constantly get prompted for credentials from the proxy for every install  and having it take the default credentials would really make a better experience. Thanks!!\n. Cool. Thanks!\n\nFrom: \"Rob Reynolds\" \nreply+i-4149840-91b6ee120b80754d4607b503125d17b27391148e-655165@reply.githu\nb.com\nSent: Wednesday, May 30, 2012 2:18 PM\nTo: \"Matt Wrock\" matt@mattwrock.com\nSubject: Re: [chocolatey] Use DefaultCredentials instead of Get-Credentials \nwhen using proxy on web call (#83)\nIn the next couple of weeks I am looking at a release. Got one more bug to \nfix and hopefully some pull requests to bring in. :D\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/pull/83#issuecomment-6021692\n. cool!\nbtw the nuget + ps method didn't work for me. Instead I ran cinst -pre and then manually replaced my chocolateyinstall directory with the new that was installed into chocolatey\\lib\\chocolatey 0.9.8.17-beta1.\nThanks!\n. I think rob and @Iristyle were looking at his yesterday and found that it did not work. I ran into this issue a couple weeks ago and also tried this without luck. Not sure if thats because powershell.exe does not subscribe to the broadcasts.\nI did find however that this:\n$paths=(Get-WmiObject Win32_Environment | where-object -filter {$_.Name -eq 'path'})\nforeach($path in $paths) {$newPath += $path.VariableValue}\nWrite-Host $newPath\ndoes work. It was mentioned though that \"Path\" may not be enough. There could be other variables that other programs might expect (like JAVA_HOME). Also, this needs to be batch file compliant as well. I believe @Iristyle was going to implement something that would work for both ps and dos. See the Issue #153 for the details of the discussion.\n. This is still an open issue. The above pull request only fixes Chocolatey's ability to refresh its own view but does not refresh the view of the user session. Need to add some bath flavored means of refreshing a normal command line. Also need to provide a means of refreshing PS users most likely via their $Profile.\n. I have been doing alot of experimentation lately around remoting and chocolate. My next boxstarter release will support this and auto configure the remoting client as well as the target as long as the wmi ports are open.\nmost packages will work fine using vanilla remoting but there are some tricky edge cases. One is the double hop scenario mentioned above. The solution there is using credssp. This will solve issues around accessing shares that require your auth token.\nthe stikiest issue is around windows update. Alot of Ms installs interact with the win update service. Examples are the .net frameworks, ie10, webpi and probably plenty others. Win update will not honor a remote token. The only reliable solution I have found is using scheduled tasks. I create a scheduled task for the choco pkg and forward the output and error streams to a file. I launch the task and use a file stream to stream to the console. Its more painful than I thought it would be.\none other case that simply won't work is most packages that use autoit or anything that interacts with a window.\nnot sure why there would be issues with enter-possession but I almost always use invoke-command. \n. I guess if we could get one or two users to validate or contribute who have access to an authenticating proxy, that would be good.\n\nFrom: \"Rob Reynolds\" notifications@github.com\nSent: Thursday, April 18, 2013 9:23 PM\nTo: \"chocolatey/chocolatey\" chocolatey@noreply.github.com\nSubject: Re: [chocolatey] Add support for authenticating proxies to installation script (#139)\nI also have one in email from someone on this as well. -\nReply to this email directly or view it on GitHub.\n. ugh. that did not go as planned. I'll close and send another.\n. Gonna re clone to get rid of the other commits and resend to develop branch.\n. Squashed the commits and fixed tests. Merged in 1856c76b0b8db290d72b1305ddf9c673fbc30416\n. squashed commits into fa133db415c246d3e35110a796d88c33d56b611c\n. I think adding a uninstall for these makes sense. I'll add that.\nI do think that adding multiple features would be handy and should be faster since fewer round trips would be incurred. I didn't add it since it did not seem to mesh with the current chocolatey model of having a single package for each cinst. However, rather than making a special case for this feed, what would you think of adding the ability for any chocolatey feed (or atleast this one and chocolatey nuget) to accept an array of packages. That might be a nice overall enhancement. The challenge is that the normal CommandLine does not have an understanding of arrays but we might be able to change the .bat file generator to convert comma delimited arguments to arrays.\n. Took a look at adding uninstall. While it looks pretty trivial for this feed. It seems like the current codebase is in need of a more pluggable pattern. Right now, each feed have dedicated scripts for install, webpi and winfeatures have inline conditionals for lists and uninstall only supports nuget.\nI'd propose that each feed have their own dedicated script(s) for all functions and the Chocolatey-XXX function becomes a factory or just provides obviously common logic. There are a number of patterns that can be implemented. One suggestion:\n- A provider, say webpi, has a entry script WePi-Provider.ps1\n- Chocolatey exposes functions like Install-Strategy ([scriptblock] $InstallScript){ $InstallerRegistry[$source] = $installScript}\n- $chocolatey exposes a $ChocolateyArgs that the plugin script can access ala $ChocolateyArgs.PackageName\n- Chocolatey dot sources all the plugins when the module loads\n- Chocolatey invokes the appropriate script when user invokes Chocolatey-XXX.\nThis is very rough and hardly baked but you get the idea. I'll post this on the forum and push this feed as is. Then we can create issues for plugins if we think this makes sense and also add another issue for supporting multiple packages.\n. I think this might work. Assuming new_var is the environment variable set.\nGet-WmiObject Win32_Environment | where-object -filter {$_.Name -eq 'new_var'} | select VariableValue\n. Yup. You would have to build a list before the install and then do a delta.\n. I played with some ideas today and I think I found a way to make this work for all env vars in ps and cmd with little batch ugliness. The gist of it is this. I'd have a Refresh-Environment.ps1 and RefreshEnvironment.bat. The ps1 would do something like:\n$newVars=(powershell -outputformat xml -command \"Get-WmiObject Win32_Environment | select Name, VariableValue\")\nWhat I foud is that you have to either use WMI or go directly to the registry and from a different process. Then it would use the xml api to build a PS dictionary of the environment variables that propperly resolves the system and user variables and does spacial handling on the path via concatenation. Finally it iterates the dictionary and flushes it to the env:\\ drive. Then it outputs \ngci env:\nto standard output. \nThe bat calls the ps1 and flushes it to a file via >> and uses the\nFOR /F \"tokens=2,3* delims= \" %%i in (vars.txt) do SET %i=%j\nBased on some prototype tests, I think this works. I plan to extract this into a separate chocolatey/repo since I think it has usage scenarios outside of chocolatey. The snippits above might not be syntactically perfect but hopefully you get the idea. Hopefully I can get to this before the end of the weekend. Thoughts?\n. Very nice. Plugged that into my test simulator and it works. I think adding the batch compatibility should be straight forward by having this output the new vars to std out and then having a .bat call that and taking the FOR strategy I mentioned above.\n. Yeah I think this should probably go into Chocolatey-Nuget instead of Install-ChocolateyInstallPackage so it can be applied to all install scenarios.\n. Great job! I'll add in the batch file version later unless someone else beats me too it.\n. I'm closing this since it was essentially fixed with fd8b079c54eb8719f2e8cff4801a8ca363fdd695. That should allow chocolatey (but not the caller) to use paths set by installers. There is another issue for the caller: https://github.com/chocolatey/chocolatey/issues/134 \n. The nice thing about the holding cell is that should solve the scenario where after an error occurs, chocolatey thinks that the package is installed.\n. right. Do you think the expectation though is that if a package fails to install calling cinst without -force should not state that the package has already been installed? That was always mine and getting that message feels wrong. If the holding cell is deleted after a failure and nothing goes to lib in the end, then that should solve the issue.\n. That's a good point on the uninstall. I was actually thinking that it just get deleted but your idea is much better.\n. So I've been playing around with this (related to Issue #153 and issue #134). Cleaning up the tests and integration and should have it in a mergeable state tonight. I think this will address scenarios where you are installing a string of packages via normal dependencies or a package config and one ChocolateyInstall may need the new variables defined or modified by a previous install.\nUnfortunately I don't think it will have much of an impact on the scenario where the user's shell would like to use the refreshed vars. I had hoped and (incorerrectly I think) assumed that this PR as is would allow someone using chocolatey via PS to have their current shell inherrit all updated env vars and adding a small bit of batch script goodness would expand this to normal command line shells as well. The challenge is that even if you are accessing chocolatey via PS (which I imagine most do), if you use the cinst flavored shortcut commands or even the longer Chocolatey-Install commands, you stil go through a batch shell. This means that when chocolatey calls ths Update-SessionVariables function, the env: affected is a different shell than the one that the user is in. Of course the user can invoke the function on their own and that will update their shell bt it is something they will have to do on their own. Even adding batch script compliance to this will not fix that since again, that is a different shell. That would address users who call chocolatey in a normal command line shell, but is that a typical use case? To me using the batch shell as a day to day shell is like using Windows in Safe Mode which is not a good experience.\nOne way to get this to possibly get this to work but i  think is unacceptable would be to add a line to the user's $profile that modifies their prompt(). This might call any existing prompt, refresh the variables and then erase itself. This fels fragile and maybe even invasive.\n. I think getting the vars working on Rob's favorite shell is very possible. But no matter how you change cinst or anything else in the batch goo to get the vars to play nice with the normal command line, it wont work for the user calling cinst from powershell because once yoy are in cinst, you are in a different shell and it cant reach back into the user's PS session.\n. Hey. That's a good idea. Create a example-profile that also gets dot sourced into ones profile and alias all the commands.\n. I think most that work in PS have that set already since its fairly useless otherwise. \n. OK. Pulled this in. Regarding the issue of failing tests when not running as admin. I changed the test to check if the user is admin and if not, the test is essentially skipped. I am going to change the Test msbuild target to elevate privileges. This way, running as a non admin user using just \"Pester\" will skip the test, but when the tests run as a build via ./build, the permisions will elevate and the tests will run.\nI will also crete a separate issue for adding the batch style refresh and another the profile stuff discussed above.\n. Issue #134 is the placeholder for this I think. I just added a note to this for clarification.\n\nFrom: \"Rob Reynolds\" notifications@github.com\nSent: Wednesday, October 31, 2012 11:43 PM\nTo: \"chocolatey/chocolatey\" chocolatey@noreply.github.com\nSubject: Re: [chocolatey] [Enhancement] Refresh env vars after Install (#158)\n@mwrock Did those separate issues get created?   -\nReply to this email directly or view it on GitHub.\n. Seems like it would be tricky for choco to know if software has been installed on its own outside of choc. However the package owner who has more knowledge about the dependencies could check in chocolateyinstall. Similar to the .net 4.5 installer. It checks for the presence of 4.5 in the registry and then just returns success and does nothing more if it is.\n. Yeah this is a bit of an odd case. Im working on a chocolatey bootstrapper and one of the first things that it does is call this script to install chocolatey. The bootstrapper is using alot of the functionality in the alpha. So the bootstrapping snippet looks like this:\nif(-not $env:ChocolateyInstall -or -not (Test-Path \"$env:ChocolateyInstall\")){\n    $env:ChocolateyInstall = \"$env:systemdrive\\chocolatey\"\n    New-Item $env:ChocolateyInstall -Force -type directory\n    $url=Config.ChocolateyPackage \n    iex ((new-object net.webclient).DownloadString('Config.ChocolateyRepo'))\n    Enable-Net40\n}\n    Import-Module $env:ChocolateyInstall\\chocolateyinstall\\helpers\\chocolateyInstaller.psm1\nSo its important in this case that I call into the chocolatey installer code. My Currently My config is:\n<config>\n    <ChocolateyPackage>http://chocolatey.org/packages/chocolatey/0.9.8.20-alpha1</ChocolateyPackage>\n    <ChocolateyRepo>https://raw.github.com/mwrock/chocolatey/BootstrapUrlOverride/chocolateyInstall/InstallChocolatey.ps1</ChocolateyRepo>\n</config>\n. thats ok. actually not so important to me now but i do think it is worth having. thanks!\n\nFrom: \"Rich Siegel\" notifications@github.com\nSent: Thursday, April 18, 2013 8:33 PM\nTo: \"chocolatey/chocolatey\" chocolatey@noreply.github.com\nSubject: Re: [chocolatey] [Enhancement] Ability to override bootstrapper url (#162)\nditto. no issue for merge. sad 7 months went by. -\nReply to this email directly or view it on GitHub.\n. Cool. Maybe have them take an optional WebClient parameter. That way the caller can set it up however they need to.\n. Ya. Definitely. We could detect if they have already set a proxy and if so, leave it alone.\n. This does bring up some interesting and important considerations. I actually originally meant a WebRequest and not a WebClient. With either that solution or @ewilde's, you still get the progress bar and you keep the encapsulation of the main Chocolatey logic. You do delegate the assembly of the request but here assume that the caller accepts responsibility for that control. I had assumed we would pass the request to the callers like the options and forward to Get-WebFile. The trade off I see here is that that gives someone full control over all the possible web request settings which may be desirable, but the Options approach is nice since it may apply optional settings to more than just the web request. The disadvantage of the options is that it is not easy to discover what should be fed into it other than via documentation or source code (which may be fine).\nHere is another option. Don't alterthe signatures at  all and create a new function:\n```\nSYNTAX\nRegister-WebHandler -ForUrl  -Handler \nEXAMPLE\nRegister-WebHandler -ForUri $url {\n  $req = [System.Net.HttpWebRequest]::Create($url)\n  ...\n  return $req.GetResponse()\n}\n```\nChocolatey will invoke this script block whenever Get-WebFile has a url that meets the -ForUrl argument.\nThis allows us to keep the functions free of clutterand it also allows us to decouple Get-WebFile entirely from network dependencies in testing scenarios.\n. Great points. I don't see much of an issue with the headers and cookie container since most scenarios will work with the default headers and no cookie container, but many wont add the proxy stuff which will end up breaking alot of people behind proxies (like me at work). So it does seem important that we be able to set that up. Since the WebRequest/Response is fairly hard baked into the framework, this way not be so \"private\" but we will see folks begin to move to the new HttpClient/MessageHandler model as the 4.5 framework gains adoption. Of coarse Chocolatey cannot and should not abandon 4.0 clients.\nI was thinking that RegisterWebHandler would register the handler script in a hash table keyed on the url. Then Get-WebFile would check if there is a handler for the url it is using and if so, invoke the handler, otherwise invoke its own default handler.\nDefinitely need to handle the proxy story. Maybe require the scriptBlock to take a WebRequest argument. So Chocolatey Creates the webRequest and attaches the proxy stuff and then invokes the handler, passing the request in the Invoke-Command -ArgumentList param...or something like that.\n. I was thinking along these lines for a feed source provider. Thats safer since it is really limited to internal chocolatey code. I definitely agree with the need for backwards compatibility. Also need to vbe really careful we dont overly complexify things here which is easy to do. I dont see the value so much in appealing to the layman. That always seems to vome up in DSL discussions but who has ever seen it work? I do like the way it expresses an API in a simple and discoverable way.\n. so just to be clear, If I installed console2 and I enter Chocolatey whatprovides console.exe and assuming the package owner prvided this file name, the command would return the the console2 package name?\nSorry if this is obvious (I'll admit I'm not a package management expert), but whats the use case?\n. If you sign in on Chocolatey.org, you can download the nupkg or email the package author. I do agree that it would be nice to have a place in the nuspec where you could specify the package source for the sake of contributing pull requests. Ideally, I'd like to see some kind of extensibility baked into the official nuspec reference for this. If we added custom elements could that break some clients with the current xsd reference?\n. Yeah. I think being able to provide a link to one's package repo is sufficient. I think we get ourselves in trouble by bending the nuspec format if there is no provision for extensions in the schema.\n. heh. Appreciate the link above reminding me why I hate XSDs. That is one form of hate that we should all subscribe to.\n. It sounds like there may be some big changes coming with nuget 3.0. They are trying to make the nuget spec friendlier to different use cases and formats. Might be a good idea to get involved in those discussions.\n. yeah. someone I know was complaining that he now had a .bat file pointing to the installer for a package he created. I told him about the .ignore and suggested he unzip to $env:temp but it still seems like something choco could figure out on its own.\n. Nice!\n. This is a very nice improvement! Awesome job.\n-----Original Message-----\nFrom: Rob Reynolds\nSent: 10/16/2012 8:59 AM\nTo: chocolatey/chocolatey\nCc: Matt Wrock\nSubject: Re: [chocolatey] Update Write-Progress every 5000 iterations insteadof every iteration (#177)\nThis is in. I had to bump it down to 100 iterations with the larger buffer pipe. Please let me know if that is too low and still grabs too much memory\n\u2014\nReply to this email directly or view it on GitHub. \n. Yeah. Noticed the merge issue and was in a hurry so if we decide to make this change I'll clean it up first.\nI'm a bit confused by the flow here and maybe I'm looking at something all together different.\nSo when you pass in $installerArguments to Chocolatey-Install.ps1 for a chocolatey nuget package, the function calls:\nChocolatey-NuGet $packageName $source $version;\nThe $InstallerArguments are not forwarded down the chain. I'm probably misunderstanding something. How is $installerArgs getting acted upon in the package if one wanted to reference it?\n. Ahhh. ok. The scoping rules is still one area of powershell that really confuses me. I had a feeling thats what this was. Thanks for pointing it out!\nI'm gonna close this PR and push a new changeset to keep the line straight. Not something worth holding this release for. I want to use this change for testing some pester mocking stuff. Got back to that this morning and made some breakthroughs. It would be nice to mock Get-Children stuff in Run-ChocolateyPS to avoid creating an actual file in the test.\n. At least it is 100% deterministic.\n. I  agree. I spent alot of time last weekend exploring the online help capabilities of powershell and there are some gems that we may not be taking advantage of. I also think tab completion could be leveraged for the sub commands. Of course that only works in powershell but would be nice for those who spend most of their time there.\n. Interesting. What were you thinking of doing here?\nOne thing I have been thinking would be nice and might align with this is to have a $chocolatey hashtable exported from the ChocolateyInstaller module that has some properties like the tools dir and the bin dir. So from a package script I dont have to do  $tools = \"$(Split-Path -parent $MyInvocation.MyCommand.Definition)\" because I could simply do $chocolatey.ToolsPath instead.\n. Yeah. I think it really depends on the installation scenario. I can imagine lots of scenarios like yours where you would want it to fail on the first error. Maybe there is something wrong with the underlying environment (memory, storage space, etc.) or you are using chocolatey to deploy app components and one of the early packages is buggy. You are likely to see lots of failures and would prefer to have it simply stop so you can diagnose the root problem earlier.\nMy hunch is that the majority of users land on the other side (myself included) and want the installation to continue. I see alot of failures happen that are not related. Like one package's url is temporarily down or some other network glich. The full test package I use for boxstarter takes 1 to 4 hours to run depending on the OS and network conditions. It would be frustrating for it to stop 75% of the way in. As long as I have a log of what failed I'm good.\nI think it would be important to have control over this with some kind of a SilentlyContinue or StopOnError switch.\n. ugh. that looks like my handywork. will fix tonight.\n. Interesting. Could you provide an example?\n. Agreed. and source too.\n. True. That makes it interesting. and on that note, when we do enable multiple packages (which will be super cool) we should make sure you can pass in package names via the pipeline.\n. It should be be doing that now. Pester will pass an exit code equal to the number of failed tests which Chocolaty will forward. However, until earlier this morning, if the chocolatey build failed somewhere other than the tests, it would not exit with a non 0 code. I fixed that and it should all be good now. Let me know if you see anything otherwise. Thanks!\n. Sorry. I think I misunderstood. I was thinking build failures. I am overly obsessed with tests and builds today.\n. I o not feel it is out of line to require submitters of pull requests to write tests. I know that is not necessarily as ubiquitous in powershell as it is in C# but this is one of the larger bits of powershell out there and it just wont be manageable or fun in any way to write tests on our own. It also helps to raise the bar of the community IMO. :)\n. I dont believe start menu links were added\n\nFrom: \"Redsandro\" notifications@github.com\nSent: Tuesday, December 18, 2012 8:19 AM\nTo: \"chocolatey/chocolatey\" chocolatey@noreply.github.com\nSubject: Re: [chocolatey] [Enhancement] Create link to GUI tool in Start Menu (#218)\nAh thanks. I see partial unzip is limited for my purposes. I mentioned it in another Enhancement #220. \nWow I see it's actually quite powerful, being able to add file associations and pin stuff. I haven't found the specific start menu functionality yet, but pinning is close in essence. \nOnce I figure out specific stuff I will add it to the documentation under \"examples\" or \"common tricks\", because if it's easier for others to make packages, there is a bigger chance of more people making packages, which (in my opinion) is good. :)  -\nReply to this email directly or view it on GitHub.\n. This has been on my list to add. Now that I have boxstarter.org wrapped up I hope to knock this out soon. In the mean time, you might consider trying boxstarter, it does just this and with unattended install/reboot resiliency through out all choco installs, it makes installing from bare OS less error prone especially if you include windows updates (which boxstarter can grab).\n. tested on clean windows 7 VM in non admin CMD and works perfectly.\n. Just to comment on the scripts v PS. I would have leaned the same way a year ago before becoming comfortable with PS. Scriptcs sounds awesome as another low friction tool for c# devs to leverage their knowledge. There is no question a good learning curve to get comfortable with PS and you need to use it consistently for it to stick. That said, like any language PS has strengths lacking in c# for scriting. Its dynamic nature and the pipeline are very slick. Of course JavaScript and ruby would have done well here too and engaged a much larger community.\n. Hmm. Interesting. Will take a look thanks!\n. Might be nice to get an alpha/beta available for -pre\n-----Original Message-----\nFrom: \"Rob Reynolds\" notifications@github.com\nSent: \u200e4/\u200e15/\u200e2013 7:13 AM\nTo: \"chocolatey/chocolatey\" chocolatey@noreply.github.com\nCc: \"Matt Wrock\" matt@mattwrock.com\nSubject: Re: [chocolatey] The VSIX install helper is finding the wrong VisualStudio version (#262)\nWe're looking at May/June.\n\u2014\nReply to this email directly or view it on GitHub.\n. Might be interesting to get the CodeBetter builds to deploy to MyGet too. That would make it easier to dogfood new builds. I could look into that.\n. I find that deploying choco changes to a local choco setup is a bit hooky :) having a myget feed would be helpful.\n. Also if you could run import-module servermanager;get-windowsfeatures\nAnd send its output.\n-----Original Message-----\nFrom: \"Rob Reynolds\" notifications@github.com\nSent: \u200e4/\u200e14/\u200e2013 2:20 PM\nTo: \"chocolatey/chocolatey\" chocolatey@noreply.github.com\nSubject: Re: [chocolatey] Unable to install on Server 2012 (#268)\nLooks like the native zip for windows isn't enabled on the version you have. What version is it? Core?\n\u2014\nReply to this email directly or view it on GitHub.\n. That does look like core. Don't know off the top of my head which feature you need but can research.\n-----Original Message-----\nFrom: \"Stephen Nelson-Smith\" notifications@github.com\nSent: \u200e4/\u200e14/\u200e2013 3:04 PM\nTo: \"chocolatey/chocolatey\" chocolatey@noreply.github.com\nCc: \"Matt Wrock\" matt@mattwrock.com\nSubject: Re: [chocolatey] Unable to install on Server 2012 (#268)\nWindows Features:\n\u2014\nReply to this email directly or view it on GitHub.\n. Oh yeah. Was thinking a direct .net call would work. We may want to replace the current unzipping with this. The current code calls into the GUI shell I think.\n-----Original Message-----\nFrom: \"Stephen Nelson-Smith\" notifications@github.com\nSent: \u200e4/\u200e14/\u200e2013 3:28 PM\nTo: \"chocolatey/chocolatey\" chocolatey@noreply.github.com\nCc: \"Matt Wrock\" matt@mattwrock.com\nSubject: SPAM-LOW:  Re: [chocolatey] Unable to install on Server 2012 (#268)\nFTR: [System.IO.Compression.ZipFile]::ExtractToDirectory works for extracting the zip file manually.\n\u2014\nReply to this email directly or view it on GitHub.\n. Yeah. There may be some edge cases that cant include support for everyone without a ton of effort but if a trivial change which this may be can make it all the more simple to widen adoption and provide a friction free experience, then that would be nice.\n. Yeah I remember zipping in .net 4.0 involved a crazy over engineered API and most people used a 3rd party library to avoid it. \n-----Original Message-----\nFrom: \"Rich Siegel\" notifications@github.com\nSent: \u200e4/\u200e15/\u200e2013 6:10 AM\nTo: \"chocolatey/chocolatey\" chocolatey@noreply.github.com\nCc: \"Matt Wrock\" matt@mattwrock.com\nSubject: Re: [chocolatey] Unable to install on Server 2012 (#268)\nI will see if I can make something work. My users want core yesterday ironically.\nApproach?\nMay need conditional versioning logic (hate it but its better than outside dependencies)\nIf dotnet 4.5 is present we use it.\nIf not we try shell\nCatch core with no option? Tell user to add feature or prompt to add feature. \nNeed to setup testing env...\n\u2014\nReply to this email directly or view it on GitHub.\n. Yes great points. This is also a good topic for the google group.\n. I just reproduced this. The key is to make sure you do not open your ps console as admin. I opened a standard ps console on win 8. UAC is enabled (as it will be on most win 8 installs since metro does not work without it) and I did not open as administrator. After invoking clist -source webpi, i was prompted to open a new PS session as admin which opened a new ps window where I saw the wonders of webpi flash before me and alas disappeared just as fast as they appeared. If I remember correctly, there is code that pumps the webpi output to a file and then the original session pulls that output from the file back into its own session. So something there is not quite right.\n. Unless someone has already checked, we should check if the latest webpi cli requires admin privileges to list packages and just remove the elevation if not. I'm also wondering if cinst is equally broken.\n-----Original Message-----\nFrom: \"Gary Ewan Park\" notifications@github.com\nSent: \u200e5/\u200e28/\u200e2013 9:39 AM\nTo: \"chocolatey/chocolatey\" chocolatey@noreply.github.com\nCc: \"Matt Wrock\" matt@mattwrock.com\nSubject: Re: [chocolatey] clist -source webpi doesn't list commands (itflashes and disappears) (#293)\nAh, that makes sense :-)\nI have a potential fix, namely:\n  if ($source -like 'webpi') {\n$chocoInstallLog = Join-Path $nugetChocolateyPath 'chocolateyWebPiInstall.log';\nRemove-LastInstallLog $chocoInstallLog\n$webpiArgs =\"/c webpicmd /List /ListOption:All | Tee-Object -FilePath '$chocoInstallLog';\"\nStart-ChocolateyProcessAsAdmin \"cmd.exe $webpiArgs\" -nosleep\nCreate-InstallLogIfNotExists $chocoInstallLog\n$installOutput = Get-Content $chocoInstallLog -Encoding Ascii\nforeach ($line in $installOutput) {\n  Write-Host $line\n}\nWhich does the same thing as the Windows Feature equivalent, but it makes the command VERY slow to execute. Should I go ahead and make a PR to add this in? Or wait for another solution?\nGary\n\u2014\nReply to this email directly or view it on GitHub.\n. \"Windows Feature\" is somewhat of a thing in windows speak. For example the 'Turn Windows Features On and Off\" GUI. However I wouldn't say it is by any means official and I definitely see your point. We would want to implement this so that both terms are accepted to support backwards compatibility.\n. I agree with @gep13 that encouraging users to use a myget feed for personal packages is the way to go. As far as the educational process, certainly including the guidelines in the confirmation email or at least a link is a great idea, but might also consider checking conventions at push time. While we could not know for sure if a user is pushing a personalized package, we could look for dot notation that does not include the standard prefixes and then prompt the user with something like, \"This might not be a package intended for public assumption, personal packages are best kept on other feds like myget. Are you sure you want to push this package?\"\n. True. A CI model would be better. The question is what would a reliable CI model look like for chocolatey packages. This is something I have been thinking about lately. Ideally, it would spin up a VM of a vanilla OS install, run the package and validate that there were no errors (you could get fancier and have package authors include a validation scriptblock). \nWith the Boxstarter work that I hope to release this week this is simple:\n$result = win7VM,win8VM,server2012VM,server2k8r2VM | \n    Enable-BoxstarterVM -Credential $cred -CheckpointName Fresh | \n    Install-BoxstarterPackage -PackageName myPackage -Force\n$passed=$true\n$result | ? { ($_.Errors.Count -gt 0) -or ($_.completed -eq $false)  } | % { $passed = $false }\nreturn $passed\nHowever this requires Hyper-V to be accessible. I'll be adding support to azure and AWS next but compute time is not free unless we could get a cloud provider to sponsor this. I think this could help in raising the credibility of the community feed which i think is one of the biggest road blocks to chocolatey adoption. Imagine adding some anti malware checking on top of that.\n. Currently it assumes the VM to exist and will throw an error if not. After I wrap up azure and AWS and make a few \"engineering debt\" adjustments. I'm gonna start the functionality for injecting installer parameters into an ISO. The MS Hyper-V module provides pretty straight forward means to creating a VM from an ISO. I might add a convenience command to wrap it. \n. Totally agree @ferventcoder I was lazy here just throwing out a proof of concept. For a real test I too always like to assume false.\n. @gep13: It is my sole \"after hours\" project :) The code i have been pushing is largely based on spikes done in September so it has just been a matter of getting it fairly clean and around tests. Thought I was gonna be able to release Sunday night but after running tests in a domain joined environment, enabling WMI is kicking my butt. :(\n. For those interested. I released the Hyper-V functionality last night - http://boxstarter.org/VMIntegration\n. Yeah. That is what I'm thinking to a degree. However, this starts to look like Vagrant and my goal is not to be another Vagrant. If I had more time, I'd love to learn some Ruby and create a Boxstarter provisioner and a Hyper-V and azure provider for Vagrant. Hopefully I or someone else will eventually but I have some other stuff I really want to get to first. But yeah. I think you will likely see a Boxstarter API where you use the same command and pass in a provider string or enum value.\n. Yeah that would be nice. I had started to do that on a related spike a while back and then realized that because it is .net 4, it requires at least PS 3 in order to call directly from powershell.\nFrom: Gary Ewan Park [mailto:notifications@github.com] \nSent: Thursday, October 24, 2013 9:24 PM\nTo: chocolatey/chocolatey\nSubject: Re: [chocolatey] Support for version pattern matching (for installing, updating, and specifying dependencies) (#346)\nThere is a .Net Class for SemVer in the nuget code base, I wonder if we could re-use that. \nSent from my Windows Phone \n\nFrom: Rich Siegelmailto:notifications@github.com \nSent: \u200e25/\u200e10/\u200e2013 02:04 \nTo: chocolatey/chocolateymailto:chocolatey@noreply.github.com \nSubject: Re: [chocolatey] Support for version pattern matching (for installing, updating, and specifying dependencies) (#346) \nagree with you ferventcoder- that was my understanding. \ni think its a metric s-ton of a parsing exercise that probably needs to start with TDD via pester, and make each use case pass... just looking at this readme https://github.com/isaacs/node-semver made my head hurt. \n\nReply to this email directly or view it on GitHub: \nhttps://github.com/chocolatey/chocolatey/issues/346#issuecomment-27047579 \n\u2014\nReply to this email directly or view it on GitHub https://github.com/chocolatey/chocolatey/issues/346#issuecomment-27060509 .  https://github.com/notifications/beacon/SVpp0Doaws5T1aBsNeEOjuhn4qSMKcvXexQ8DxDMiWxbwLGbXJX0oqylR61aZFj8.gif \n. Agree with Rob that the fx3.5 check would be better placed in its own package. I did this for 4.5 and 4.5.1. Not sure why I did not use the WindowsFeature (especially since win features was my contribution). Maybe this package predates that. \nOne small caution on webpi: there are times when webPI does more than simply install what it is advertising and the simpler approach might be to simply install an MSI. I have recently discovered the .net4.0 install to be an example. Simply installing the MSI is faster and simpler and often meets your requirements while webpi makes several DISM calls and does some additional asp.net configuration. This might be what you want but not necessarily if you just need the basic framework BCL. \nI was having alot of issues in Boxstarter where the webpi was failing if I disabled windows update first and if I kept it enabled, webpi turns it back on and potentially opens the flood gates of updates that then launch their own MSIEXEC processes that will cause the ,net4.0 msi in webpi to either block or sometimes fail. So the next boxstarter release will simply install the .net4.5 MSI and not use webpi which I have found to be far more reliable. Of course this is an edge case affecting new installs primarily on win7 and intermittently occurring. Each webpi package should be considered on a package by package basis.\n. It is a lot of red. Regarding root cause you might be able to get closer by googling exit code 1620. It would either be a msiexec code or one from the app.\nHope that helps.\nMatt\nSent from my Windows Phone\n\nFrom: Redsandromailto:notifications@github.com\nSent: \u200e10/\u200e27/\u200e2013 3:18 PM\nTo: chocolatey/chocolateymailto:chocolatey@noreply.github.com\nSubject: [chocolatey] Errors are thrown two or three times (#357)\nWhen packages fail, I see a lot of red text. Can we cut this down a bit to a more convenient read for the user?\nI tried to cinst brackets and got three times a whole lot of error message (and still no clue about the cause).\n``` command\nWrite-Error : [ERROR] Running msiexec with /i \"C:\\Users\\Redsandro\\AppData\\Local\\Temp\\chocolatey\\Brackets\\BracketsInstall.msi\" /q  was not successful. Exit code was '1620'.\nAt C:\\Common\\Chocolatey\\chocolateyinstall\\helpers\\functions\\Start-ChocolateyProcessAsAdmin.ps1:42 char:5\n+     Write-Error $errorMessage\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nWrite-Error : Brackets did not finish successfully. Boo to the chocolatey gods!\n[ERROR] [ERROR] Running msiexec with /i \"C:\\Users\\Redsandro\\AppData\\Local\\Temp\\chocolatey\\Brackets\\BracketsInstall.msi\" /q  was not successful. Exit code was '1620'.\nAt C:\\Common\\Chocolatey\\chocolateyinstall\\helpers\\functions\\Write-ChocolateyFailure.ps1:29 char:2\n+     Write-Error $errorMessage\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nWrite-Error : Brackets did not finish successfully. Boo to the chocolatey gods!\n[ERROR] [ERROR] Running msiexec with /i \"C:\\Users\\Redsandro\\AppData\\Local\\Temp\\chocolatey\\Brackets\\BracketsInstall.msi\" /q  was not successful. Exit code was '1620'.\nAt C:\\Common\\Chocolatey\\chocolateyinstall\\helpers\\functions\\Write-ChocolateyFailure.ps1:29 char:2\n+     Write-Error $errorMessage\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\n```\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/issues/357\n. I do think that better use could be made of the Write-Verbose, Write-Debug  and debug/verbose preference settings so that the default output is a bit more sparse. I think most installs, given no errors have an acceptable amount of out put. There are places though, where it does feel like the output is not that valuable to the casual user. For example the out put when elevating privileges.\n. A few suggestions:\n- output psobjects to the pipeline with info like success/fail, exceptions, packagename\n- all verbose info that goes to the log should also gk to the console if -verbose is passed or $verbose preference is set to continue.\n. Yeah. In v2.1 I reworked Boxstarter output to this model.\nRegarding the verbose output, you can handle this with Write-Verbose or Write-Debug or both. Its not always crystal clear when to use one over the other. I use Write-Verbose but Chocolatey already makes use of Write-Debug and proxies the \"real\" Write-Debug function in order to intercept the output and write it to the log. So as long as you use Write-Debug for all output you want to be logged but NOT displayed, that is exactly what will happen. If the user wants the debug output to print to the console, they just need to set $DebugPreference to \"Continue\". Thats a PowerShell automatic variable and tells PS how to handle Write-Debug. The default value of $DebugPreference is \"SilentlyContinue\" which causes Write-Debug to do nothing (or in Choco's case, JUST log to disk). What makes this tricky for choco are the Batch redirects. Setting $debugPreference to \"Continue\" wil only have the desired effect if calling choco's Chocolatey.ps1 directly because then the choco call runs in the same scope as the caller. Using the batch redirect like cinst creates a new powershell session with the preferences set to the defaults. So you would need to add -Debug parameters to the choco commands that will set the $debugPreference of the choco powershell session to print debug output if specified.\nThe PSObjects make parsing and reacting to chocolatey results much more script friendly. Instead of (or in addition to) \nWrite-Host \"Chocolatey failed to install $packageName yadayadayada\"\nYou have \nWrite-Output @{PackageName=$PackageName;Success=$true;Exceptions=$TheExceptionsRaised}\nThis means I can inspect the results like so:\n$result=Chocolatey-Install MyPackage\nif(!$result.Success){\n   #Do something to deal with the failure\n}\nAgain this is tricky due to the batch stuff. I lose the Powershell pipeline since the chocolatey batch file spawns a new PS session. So using cinst or another one of the batch file gateways, $result would not capture the output but I do believe it would at least print the object to the console. Users who want to take advantage of the pipeline would just need to call chocolateys powershell functions directly.\n. Its actually the other way around. Permissins need to be elevated to call DISM. If you already have UAC disabled, thats not necessary but its not what is causing the call to fail. As of win7/win 2008R2, the DISM command can be used to install windows features. I'm not sure what mechanism is used on 2008 SP2. At the least, I think it would be reasonable for choco to detect if your OS version is less than 7/2008R2 and provide a message stating that the WindowsFeature source is not available on your platform. Of course finding the win 2008 SP2 compliant method would be ideal as long as the method is reasonable to implement.\n. looks good to me.\n. Ahh. This is because Chocolatey uses th WebPI installer for .net 4 which in addition to installing .net 4 also sets up asp.net and there by sets up IIS\nChocolatey does not need this. Clients like 2008R2 that do not have .net4 installed do need .Net4  to work with Nuget.exe but nothing more. I think it would be a good idea to replace the webpi installer with the vanilla MSI install of of 4.0 or 4.5.1 or at least  4.5.\n. yup. exactly.\n. It really depends on what you are trying to accomplish. Unfortunately it is not always easy to discover the complete ramifications of each method. WebPI is great but I think the creators of the .net4 webpi package were \u201casp.net opinionated.\u201d That\u2019s not necessarily a bad thing. Getting all the asp.net/IIS stuff right can be tricky and they were likely trying to guide people to make the right choices. However, in the interest of taking control over your environment, I\u2019d personally prefer the more minimal approach.\nFrom: Daniel Liuzzi [mailto:notifications@github.com] \nSent: Monday, December 30, 2013 2:44 AM\nTo: chocolatey/chocolatey\nCc: Matt Wrock\nSubject: Re: [chocolatey] Installing Chocolatey adds Web Server (IIS) Role (#399)\nThank you guys for your replies. I forgot to mention that along with the Role, I got a few Features installed as well:\nRemote Server Administration Tools\n    Role Administration Tools\n        Web Server (IIS) Tools\nWindows Process Activity Service\n    Process Model\n    .NET Environment\n    Configuration APIs\nThese were not there before installing Chocolatey. I assume it must the same reason (WebPI adding them when it installs .NET 4.) Now that you bring up WebPI, I remember when I started playing with Chocolatey, I was unsure on which source to use when there are many. For example ASP.NET MVC 3 can be installed from both the default source (i.e. cinst aspnetmvc.install), as well as the from the webpi source (i.e. choco webpi MVC3). I was under the impression the WebPI might be a better choice as it seems more \"package oriented\" than vanilla MSI, so I was using that, but now I'm not so sure. Is the default source better for these cases?\nThanks again.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/chocolatey/chocolatey/issues/399#issuecomment-31340715 .  https://github.com/notifications/beacon/655165__eyJzY29wZSI6Ik5ld3NpZXM6QmVhY29uIiwiZXhwaXJlcyI6MTcwMzkzMzA2NiwiZGF0YSI6eyJpZCI6MjI3MTEzMTd9fQ==--c67744b69d3816356f23944e0abe5e56b580293b.gif \n. and technically in this case its for installing the installer to install the installers :)\n. yes. \nMock 7za\n. You win!! :)\nYeah as long as you can do a\nGet-Command 7za\nit should work. Pester creates a proxy command and hides the original command.\n. This is great. However -logout seems poorly named to me. The first thing I think of is signing out of something. How about using -Quiet?\n. If you used -Quiet and made the default $false, wouldn't that have the same effect?\n. Yes. I think that is what @jole78 was intending this argument to accomplish and something that I think makes sense - completely silence the \"Host\" stream. I'm assuming keeping the other streams, output/warning/verbose/error untouched is desired since there are already ways built into the PS syntax to silence or redirect those.\n. Interesting. I ran into this exact issue last night. Only happens on a win2k8 AzureVM. I have a 2012R2 VM that works fine. Also, it worked in the morning but has not worked since I got home from work yesterday. I'm thinking it is somehow proxy related. When I turned on fiddler, it went away and I can get to the url in a browser. Blew away and recreated the VM - still broke. I'm planning to troubleshoot further tonight.\n. Both should work, but I think I figured this out. The issue is a combination of how the .net http stack in implemented in v 3.5 and before along with a likely change in protocol or certificate on Github's end. I had to use Wireshark to see the difference. .net3.5 (the version used on win7 and server2008R2) is not handling the SSL client key exchange and just hanging. This can be fixed by calling:\n[System.Net.ServicePointManager]::SecurityProtocol = 48\n48 is the Enum value for SecurityProtocolType.Ssl3.\nI'll be submitting a PR or perhaps just commiting since this is likely a big blocker right now.\n. I sent a PR https://github.com/chocolatey/chocolatey.org/pull/72 since even if I did commit, I'm not sure it would go live. \n. It only breaks if using a .net 2/3.5  HttpWebRequest. Works fine in browsers and .net 4+\n. We are not, but that was one of my initial thoughts too. Setting it didn't resolve the issue.\n. I managed to get one packed down to just under 4GB (still huge) using lzma compression:\nhttps://vagrantcloud.com/mwrock/Windows2012R2\nWon't work for you since it is a hyper-V box and requires a couple recent vagrant PRs I submitted that allow for .vhd format files and a working implementation of SMB on windows guests. I should make a vbox version.\nYou can try grabbing the evaluation ISO at http://www.microsoft.com/en-us/evalcenter/evaluate-windows-server-2012-r2\n. I had to sign the click-once application which is the kinda different. Its the \"delivery mechanism\" of the powershell and it just creates a powershell session, bypassing the execution policy and runs the powershell unsigned.\nI do believe that signing powershell does involve an authenticode cert which will cost money.\n. I can look tonight too. Been out of internet reach for a few days.\nSent from my Windows Phone\n\nFrom: JVimesmailto:notifications@github.com\nSent: \u200e9/\u200e1/\u200e2014 11:51 AM\nTo: chocolatey/chocolateymailto:chocolatey@noreply.github.com\nCc: Matt Wrockmailto:matt@mattwrock.com\nSubject: Re: [chocolatey] Install-ChocolateyFileAssociation breaks \"create new text document\" in Windows Explorer (#563)\n@ferventcoder Let me know what I can do to help. The menu entry is there by default, and it does appear the particular registry data change is what caused the entry to disappear.\n\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/issues/563#issuecomment-54085118\n. I just did a little research and experimentation and figured out the issue. The chocolatey helper uses the DOS commands assoc and ftype to manipulate the association which in turn edits HKCR registry entries. This is all a bit wonky. For example if you change associations using the windows explorer gui, it changes a different set in HKCU and will give precedence to that. \nAnyways the problem with the \"New\" context menu is that when ftype creates the new \"content type\" it does not give it a label. The readable text that appears next to each item in the menu. I tried manually adding that to the registry and then the new item appeared.\nSo the fix is pretty straight forward. The command will just need to edit the registry entry after calling fype. When I wrote the helper, I wanted to avoid direct registry editing and did not notice the missing New context menu item . As I have many times learned, direct registry editing is a core aspect that makes up the joy of windows automation Therefore I will be happily adding a PR to do just that after I slip into something a little more comfortable a little later.\n. Unfortunately there is no argument for adding the label. My hunch is that ftype and assoc are ancient commands and are not getting much love in later windows versions (but I could be way off here) you cant even call these from powershell directly but have to invoke via cmd.exe. The extra shell is due to the fact that chocolatey has to ensure that the call is run with elevated privileges and invokes in a elevated shell to do that.\n. Just Submitted PR #564 to address this.\n. I'll take a look at tests tonight. I really should have run those locally. \n. Local tests are passing as long as I am using pester v2.0.2. I small just pushed a change to the build scripts that fix an issue if like me one has a version of pester greater than 2.0.2. However I doubt this is why appveyor is failing.\n. all the appveyor failing tests are related to Get-CheckSumValid. Based on the errors it seems like CheckSum.exe is not where Chocolatey expects it to be. Is there a way in Appveyor to browse the chocolatey files that are installed?\n. my PR addresses the exit code but does not rethrow. Honestly I personally prefer actually rethrowing the actual exception. For something like Boxstarter which calls the chocolatey powershell functiuons directly, I can better inspect the exception and provide better logging. I realize that will no longer be possible with choco.exe.\nAnother PR I considered was adding more detail to the exceptions logged. Currently chocolotey just captures the error message which is sometimes not very helpful. Doing something like logging:\n$_.exception | fl * -force | out-string\nwould capture any stacktrace and inner exceptions and even script level stack trace on later OSs. I'm probably gonna hold off on contributing that until the new chocolatey comes out but this is my 2 cents. :)\nAlso, chocolatey simply returns an exit code of 1 and it would be better to at least return the original exit code. My PR was just an attempt to \"fix\" what appeared to be the current intent of the code. On the boxstarter side I can always just examine the $errors array to grab the full exceptions after the fact. Again, that only works if you are calling chocolatey from powershell and calling the actual powershell functions so you are not crossing any process boundaries.\n. I really like what @juliankrispel is doing here. Even with the goal of running choco on different platforms I like the c: . My guess is that choco will largely be the package manager for Windows apps regardless from where you use it and the c: Drives home that distinction.\n. Awesome work! I like 8 the most.\n. Right but it fixes the PS version. When is choco.exe due?\n. Oh ok. As a full release or alpha/beta?\nSent from my Windows Phone\n\nFrom: Rob Reynoldsmailto:notifications@github.com\nSent: \u200e1/\u200e12/\u200e2015 8:46 AM\nTo: chocolatey/chocolateymailto:chocolatey@noreply.github.com\nCc: Matt Wrockmailto:matt@mattwrock.com\nSubject: Re: [chocolatey] write to the correctly scoped chocolateyErrored variable (#658)\nJanuary 15th-ish\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/pull/658#issuecomment-69600945\n. ok cool. Wasn't sure if there is stuff out there that would be highly impacted by a lack of a non-zero error code. I pushed a work around in boxstarter last night so its not affected.\n. PR #658 should fix this.\n. Sweet! There is definitely pain in proxies. While there is a sub culture who enjoys that and I do not want to alienate them, I will say that the first 10 years of my career that was absent from using a proxy (and I might add regular expressions as well) were a good 10 years!\n. Just curious when you were planning to push a new chocolatey version to chocolatey.org with the latest bits. We constantly get prompted for credentials from the proxy for every install  and having it take the default credentials would really make a better experience. Thanks!!\n. Cool. Thanks!\n\nFrom: \"Rob Reynolds\" \nreply+i-4149840-91b6ee120b80754d4607b503125d17b27391148e-655165@reply.githu\nb.com\nSent: Wednesday, May 30, 2012 2:18 PM\nTo: \"Matt Wrock\" matt@mattwrock.com\nSubject: Re: [chocolatey] Use DefaultCredentials instead of Get-Credentials \nwhen using proxy on web call (#83)\nIn the next couple of weeks I am looking at a release. Got one more bug to \nfix and hopefully some pull requests to bring in. :D\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/pull/83#issuecomment-6021692\n. cool!\nbtw the nuget + ps method didn't work for me. Instead I ran cinst -pre and then manually replaced my chocolateyinstall directory with the new that was installed into chocolatey\\lib\\chocolatey 0.9.8.17-beta1.\nThanks!\n. I think rob and @Iristyle were looking at his yesterday and found that it did not work. I ran into this issue a couple weeks ago and also tried this without luck. Not sure if thats because powershell.exe does not subscribe to the broadcasts.\nI did find however that this:\n$paths=(Get-WmiObject Win32_Environment | where-object -filter {$_.Name -eq 'path'})\nforeach($path in $paths) {$newPath += $path.VariableValue}\nWrite-Host $newPath\ndoes work. It was mentioned though that \"Path\" may not be enough. There could be other variables that other programs might expect (like JAVA_HOME). Also, this needs to be batch file compliant as well. I believe @Iristyle was going to implement something that would work for both ps and dos. See the Issue #153 for the details of the discussion.\n. This is still an open issue. The above pull request only fixes Chocolatey's ability to refresh its own view but does not refresh the view of the user session. Need to add some bath flavored means of refreshing a normal command line. Also need to provide a means of refreshing PS users most likely via their $Profile.\n. I have been doing alot of experimentation lately around remoting and chocolate. My next boxstarter release will support this and auto configure the remoting client as well as the target as long as the wmi ports are open.\nmost packages will work fine using vanilla remoting but there are some tricky edge cases. One is the double hop scenario mentioned above. The solution there is using credssp. This will solve issues around accessing shares that require your auth token.\nthe stikiest issue is around windows update. Alot of Ms installs interact with the win update service. Examples are the .net frameworks, ie10, webpi and probably plenty others. Win update will not honor a remote token. The only reliable solution I have found is using scheduled tasks. I create a scheduled task for the choco pkg and forward the output and error streams to a file. I launch the task and use a file stream to stream to the console. Its more painful than I thought it would be.\none other case that simply won't work is most packages that use autoit or anything that interacts with a window.\nnot sure why there would be issues with enter-possession but I almost always use invoke-command. \n. I guess if we could get one or two users to validate or contribute who have access to an authenticating proxy, that would be good.\n\nFrom: \"Rob Reynolds\" notifications@github.com\nSent: Thursday, April 18, 2013 9:23 PM\nTo: \"chocolatey/chocolatey\" chocolatey@noreply.github.com\nSubject: Re: [chocolatey] Add support for authenticating proxies to installation script (#139)\nI also have one in email from someone on this as well. -\nReply to this email directly or view it on GitHub.\n. ugh. that did not go as planned. I'll close and send another.\n. Gonna re clone to get rid of the other commits and resend to develop branch.\n. Squashed the commits and fixed tests. Merged in 1856c76b0b8db290d72b1305ddf9c673fbc30416\n. squashed commits into fa133db415c246d3e35110a796d88c33d56b611c\n. I think adding a uninstall for these makes sense. I'll add that.\nI do think that adding multiple features would be handy and should be faster since fewer round trips would be incurred. I didn't add it since it did not seem to mesh with the current chocolatey model of having a single package for each cinst. However, rather than making a special case for this feed, what would you think of adding the ability for any chocolatey feed (or atleast this one and chocolatey nuget) to accept an array of packages. That might be a nice overall enhancement. The challenge is that the normal CommandLine does not have an understanding of arrays but we might be able to change the .bat file generator to convert comma delimited arguments to arrays.\n. Took a look at adding uninstall. While it looks pretty trivial for this feed. It seems like the current codebase is in need of a more pluggable pattern. Right now, each feed have dedicated scripts for install, webpi and winfeatures have inline conditionals for lists and uninstall only supports nuget.\nI'd propose that each feed have their own dedicated script(s) for all functions and the Chocolatey-XXX function becomes a factory or just provides obviously common logic. There are a number of patterns that can be implemented. One suggestion:\n- A provider, say webpi, has a entry script WePi-Provider.ps1\n- Chocolatey exposes functions like Install-Strategy ([scriptblock] $InstallScript){ $InstallerRegistry[$source] = $installScript}\n- $chocolatey exposes a $ChocolateyArgs that the plugin script can access ala $ChocolateyArgs.PackageName\n- Chocolatey dot sources all the plugins when the module loads\n- Chocolatey invokes the appropriate script when user invokes Chocolatey-XXX.\nThis is very rough and hardly baked but you get the idea. I'll post this on the forum and push this feed as is. Then we can create issues for plugins if we think this makes sense and also add another issue for supporting multiple packages.\n. I think this might work. Assuming new_var is the environment variable set.\nGet-WmiObject Win32_Environment | where-object -filter {$_.Name -eq 'new_var'} | select VariableValue\n. Yup. You would have to build a list before the install and then do a delta.\n. I played with some ideas today and I think I found a way to make this work for all env vars in ps and cmd with little batch ugliness. The gist of it is this. I'd have a Refresh-Environment.ps1 and RefreshEnvironment.bat. The ps1 would do something like:\n$newVars=(powershell -outputformat xml -command \"Get-WmiObject Win32_Environment | select Name, VariableValue\")\nWhat I foud is that you have to either use WMI or go directly to the registry and from a different process. Then it would use the xml api to build a PS dictionary of the environment variables that propperly resolves the system and user variables and does spacial handling on the path via concatenation. Finally it iterates the dictionary and flushes it to the env:\\ drive. Then it outputs \ngci env:\nto standard output. \nThe bat calls the ps1 and flushes it to a file via >> and uses the\nFOR /F \"tokens=2,3* delims= \" %%i in (vars.txt) do SET %i=%j\nBased on some prototype tests, I think this works. I plan to extract this into a separate chocolatey/repo since I think it has usage scenarios outside of chocolatey. The snippits above might not be syntactically perfect but hopefully you get the idea. Hopefully I can get to this before the end of the weekend. Thoughts?\n. Very nice. Plugged that into my test simulator and it works. I think adding the batch compatibility should be straight forward by having this output the new vars to std out and then having a .bat call that and taking the FOR strategy I mentioned above.\n. Yeah I think this should probably go into Chocolatey-Nuget instead of Install-ChocolateyInstallPackage so it can be applied to all install scenarios.\n. Great job! I'll add in the batch file version later unless someone else beats me too it.\n. I'm closing this since it was essentially fixed with fd8b079c54eb8719f2e8cff4801a8ca363fdd695. That should allow chocolatey (but not the caller) to use paths set by installers. There is another issue for the caller: https://github.com/chocolatey/chocolatey/issues/134 \n. The nice thing about the holding cell is that should solve the scenario where after an error occurs, chocolatey thinks that the package is installed.\n. right. Do you think the expectation though is that if a package fails to install calling cinst without -force should not state that the package has already been installed? That was always mine and getting that message feels wrong. If the holding cell is deleted after a failure and nothing goes to lib in the end, then that should solve the issue.\n. That's a good point on the uninstall. I was actually thinking that it just get deleted but your idea is much better.\n. So I've been playing around with this (related to Issue #153 and issue #134). Cleaning up the tests and integration and should have it in a mergeable state tonight. I think this will address scenarios where you are installing a string of packages via normal dependencies or a package config and one ChocolateyInstall may need the new variables defined or modified by a previous install.\nUnfortunately I don't think it will have much of an impact on the scenario where the user's shell would like to use the refreshed vars. I had hoped and (incorerrectly I think) assumed that this PR as is would allow someone using chocolatey via PS to have their current shell inherrit all updated env vars and adding a small bit of batch script goodness would expand this to normal command line shells as well. The challenge is that even if you are accessing chocolatey via PS (which I imagine most do), if you use the cinst flavored shortcut commands or even the longer Chocolatey-Install commands, you stil go through a batch shell. This means that when chocolatey calls ths Update-SessionVariables function, the env: affected is a different shell than the one that the user is in. Of course the user can invoke the function on their own and that will update their shell bt it is something they will have to do on their own. Even adding batch script compliance to this will not fix that since again, that is a different shell. That would address users who call chocolatey in a normal command line shell, but is that a typical use case? To me using the batch shell as a day to day shell is like using Windows in Safe Mode which is not a good experience.\nOne way to get this to possibly get this to work but i  think is unacceptable would be to add a line to the user's $profile that modifies their prompt(). This might call any existing prompt, refresh the variables and then erase itself. This fels fragile and maybe even invasive.\n. I think getting the vars working on Rob's favorite shell is very possible. But no matter how you change cinst or anything else in the batch goo to get the vars to play nice with the normal command line, it wont work for the user calling cinst from powershell because once yoy are in cinst, you are in a different shell and it cant reach back into the user's PS session.\n. Hey. That's a good idea. Create a example-profile that also gets dot sourced into ones profile and alias all the commands.\n. I think most that work in PS have that set already since its fairly useless otherwise. \n. OK. Pulled this in. Regarding the issue of failing tests when not running as admin. I changed the test to check if the user is admin and if not, the test is essentially skipped. I am going to change the Test msbuild target to elevate privileges. This way, running as a non admin user using just \"Pester\" will skip the test, but when the tests run as a build via ./build, the permisions will elevate and the tests will run.\nI will also crete a separate issue for adding the batch style refresh and another the profile stuff discussed above.\n. Issue #134 is the placeholder for this I think. I just added a note to this for clarification.\n\nFrom: \"Rob Reynolds\" notifications@github.com\nSent: Wednesday, October 31, 2012 11:43 PM\nTo: \"chocolatey/chocolatey\" chocolatey@noreply.github.com\nSubject: Re: [chocolatey] [Enhancement] Refresh env vars after Install (#158)\n@mwrock Did those separate issues get created?   -\nReply to this email directly or view it on GitHub.\n. Seems like it would be tricky for choco to know if software has been installed on its own outside of choc. However the package owner who has more knowledge about the dependencies could check in chocolateyinstall. Similar to the .net 4.5 installer. It checks for the presence of 4.5 in the registry and then just returns success and does nothing more if it is.\n. Yeah this is a bit of an odd case. Im working on a chocolatey bootstrapper and one of the first things that it does is call this script to install chocolatey. The bootstrapper is using alot of the functionality in the alpha. So the bootstrapping snippet looks like this:\nif(-not $env:ChocolateyInstall -or -not (Test-Path \"$env:ChocolateyInstall\")){\n    $env:ChocolateyInstall = \"$env:systemdrive\\chocolatey\"\n    New-Item $env:ChocolateyInstall -Force -type directory\n    $url=Config.ChocolateyPackage \n    iex ((new-object net.webclient).DownloadString('Config.ChocolateyRepo'))\n    Enable-Net40\n}\n    Import-Module $env:ChocolateyInstall\\chocolateyinstall\\helpers\\chocolateyInstaller.psm1\nSo its important in this case that I call into the chocolatey installer code. My Currently My config is:\n<config>\n    <ChocolateyPackage>http://chocolatey.org/packages/chocolatey/0.9.8.20-alpha1</ChocolateyPackage>\n    <ChocolateyRepo>https://raw.github.com/mwrock/chocolatey/BootstrapUrlOverride/chocolateyInstall/InstallChocolatey.ps1</ChocolateyRepo>\n</config>\n. thats ok. actually not so important to me now but i do think it is worth having. thanks!\n\nFrom: \"Rich Siegel\" notifications@github.com\nSent: Thursday, April 18, 2013 8:33 PM\nTo: \"chocolatey/chocolatey\" chocolatey@noreply.github.com\nSubject: Re: [chocolatey] [Enhancement] Ability to override bootstrapper url (#162)\nditto. no issue for merge. sad 7 months went by. -\nReply to this email directly or view it on GitHub.\n. Cool. Maybe have them take an optional WebClient parameter. That way the caller can set it up however they need to.\n. Ya. Definitely. We could detect if they have already set a proxy and if so, leave it alone.\n. This does bring up some interesting and important considerations. I actually originally meant a WebRequest and not a WebClient. With either that solution or @ewilde's, you still get the progress bar and you keep the encapsulation of the main Chocolatey logic. You do delegate the assembly of the request but here assume that the caller accepts responsibility for that control. I had assumed we would pass the request to the callers like the options and forward to Get-WebFile. The trade off I see here is that that gives someone full control over all the possible web request settings which may be desirable, but the Options approach is nice since it may apply optional settings to more than just the web request. The disadvantage of the options is that it is not easy to discover what should be fed into it other than via documentation or source code (which may be fine).\nHere is another option. Don't alterthe signatures at  all and create a new function:\n```\nSYNTAX\nRegister-WebHandler -ForUrl  -Handler \nEXAMPLE\nRegister-WebHandler -ForUri $url {\n  $req = [System.Net.HttpWebRequest]::Create($url)\n  ...\n  return $req.GetResponse()\n}\n```\nChocolatey will invoke this script block whenever Get-WebFile has a url that meets the -ForUrl argument.\nThis allows us to keep the functions free of clutterand it also allows us to decouple Get-WebFile entirely from network dependencies in testing scenarios.\n. Great points. I don't see much of an issue with the headers and cookie container since most scenarios will work with the default headers and no cookie container, but many wont add the proxy stuff which will end up breaking alot of people behind proxies (like me at work). So it does seem important that we be able to set that up. Since the WebRequest/Response is fairly hard baked into the framework, this way not be so \"private\" but we will see folks begin to move to the new HttpClient/MessageHandler model as the 4.5 framework gains adoption. Of coarse Chocolatey cannot and should not abandon 4.0 clients.\nI was thinking that RegisterWebHandler would register the handler script in a hash table keyed on the url. Then Get-WebFile would check if there is a handler for the url it is using and if so, invoke the handler, otherwise invoke its own default handler.\nDefinitely need to handle the proxy story. Maybe require the scriptBlock to take a WebRequest argument. So Chocolatey Creates the webRequest and attaches the proxy stuff and then invokes the handler, passing the request in the Invoke-Command -ArgumentList param...or something like that.\n. I was thinking along these lines for a feed source provider. Thats safer since it is really limited to internal chocolatey code. I definitely agree with the need for backwards compatibility. Also need to vbe really careful we dont overly complexify things here which is easy to do. I dont see the value so much in appealing to the layman. That always seems to vome up in DSL discussions but who has ever seen it work? I do like the way it expresses an API in a simple and discoverable way.\n. so just to be clear, If I installed console2 and I enter Chocolatey whatprovides console.exe and assuming the package owner prvided this file name, the command would return the the console2 package name?\nSorry if this is obvious (I'll admit I'm not a package management expert), but whats the use case?\n. If you sign in on Chocolatey.org, you can download the nupkg or email the package author. I do agree that it would be nice to have a place in the nuspec where you could specify the package source for the sake of contributing pull requests. Ideally, I'd like to see some kind of extensibility baked into the official nuspec reference for this. If we added custom elements could that break some clients with the current xsd reference?\n. Yeah. I think being able to provide a link to one's package repo is sufficient. I think we get ourselves in trouble by bending the nuspec format if there is no provision for extensions in the schema.\n. heh. Appreciate the link above reminding me why I hate XSDs. That is one form of hate that we should all subscribe to.\n. It sounds like there may be some big changes coming with nuget 3.0. They are trying to make the nuget spec friendlier to different use cases and formats. Might be a good idea to get involved in those discussions.\n. yeah. someone I know was complaining that he now had a .bat file pointing to the installer for a package he created. I told him about the .ignore and suggested he unzip to $env:temp but it still seems like something choco could figure out on its own.\n. Nice!\n. This is a very nice improvement! Awesome job.\n-----Original Message-----\nFrom: Rob Reynolds\nSent: 10/16/2012 8:59 AM\nTo: chocolatey/chocolatey\nCc: Matt Wrock\nSubject: Re: [chocolatey] Update Write-Progress every 5000 iterations insteadof every iteration (#177)\nThis is in. I had to bump it down to 100 iterations with the larger buffer pipe. Please let me know if that is too low and still grabs too much memory\n\u2014\nReply to this email directly or view it on GitHub. \n. Yeah. Noticed the merge issue and was in a hurry so if we decide to make this change I'll clean it up first.\nI'm a bit confused by the flow here and maybe I'm looking at something all together different.\nSo when you pass in $installerArguments to Chocolatey-Install.ps1 for a chocolatey nuget package, the function calls:\nChocolatey-NuGet $packageName $source $version;\nThe $InstallerArguments are not forwarded down the chain. I'm probably misunderstanding something. How is $installerArgs getting acted upon in the package if one wanted to reference it?\n. Ahhh. ok. The scoping rules is still one area of powershell that really confuses me. I had a feeling thats what this was. Thanks for pointing it out!\nI'm gonna close this PR and push a new changeset to keep the line straight. Not something worth holding this release for. I want to use this change for testing some pester mocking stuff. Got back to that this morning and made some breakthroughs. It would be nice to mock Get-Children stuff in Run-ChocolateyPS to avoid creating an actual file in the test.\n. At least it is 100% deterministic.\n. I  agree. I spent alot of time last weekend exploring the online help capabilities of powershell and there are some gems that we may not be taking advantage of. I also think tab completion could be leveraged for the sub commands. Of course that only works in powershell but would be nice for those who spend most of their time there.\n. Interesting. What were you thinking of doing here?\nOne thing I have been thinking would be nice and might align with this is to have a $chocolatey hashtable exported from the ChocolateyInstaller module that has some properties like the tools dir and the bin dir. So from a package script I dont have to do  $tools = \"$(Split-Path -parent $MyInvocation.MyCommand.Definition)\" because I could simply do $chocolatey.ToolsPath instead.\n. Yeah. I think it really depends on the installation scenario. I can imagine lots of scenarios like yours where you would want it to fail on the first error. Maybe there is something wrong with the underlying environment (memory, storage space, etc.) or you are using chocolatey to deploy app components and one of the early packages is buggy. You are likely to see lots of failures and would prefer to have it simply stop so you can diagnose the root problem earlier.\nMy hunch is that the majority of users land on the other side (myself included) and want the installation to continue. I see alot of failures happen that are not related. Like one package's url is temporarily down or some other network glich. The full test package I use for boxstarter takes 1 to 4 hours to run depending on the OS and network conditions. It would be frustrating for it to stop 75% of the way in. As long as I have a log of what failed I'm good.\nI think it would be important to have control over this with some kind of a SilentlyContinue or StopOnError switch.\n. ugh. that looks like my handywork. will fix tonight.\n. Interesting. Could you provide an example?\n. Agreed. and source too.\n. True. That makes it interesting. and on that note, when we do enable multiple packages (which will be super cool) we should make sure you can pass in package names via the pipeline.\n. It should be be doing that now. Pester will pass an exit code equal to the number of failed tests which Chocolaty will forward. However, until earlier this morning, if the chocolatey build failed somewhere other than the tests, it would not exit with a non 0 code. I fixed that and it should all be good now. Let me know if you see anything otherwise. Thanks!\n. Sorry. I think I misunderstood. I was thinking build failures. I am overly obsessed with tests and builds today.\n. I o not feel it is out of line to require submitters of pull requests to write tests. I know that is not necessarily as ubiquitous in powershell as it is in C# but this is one of the larger bits of powershell out there and it just wont be manageable or fun in any way to write tests on our own. It also helps to raise the bar of the community IMO. :)\n. I dont believe start menu links were added\n\nFrom: \"Redsandro\" notifications@github.com\nSent: Tuesday, December 18, 2012 8:19 AM\nTo: \"chocolatey/chocolatey\" chocolatey@noreply.github.com\nSubject: Re: [chocolatey] [Enhancement] Create link to GUI tool in Start Menu (#218)\nAh thanks. I see partial unzip is limited for my purposes. I mentioned it in another Enhancement #220. \nWow I see it's actually quite powerful, being able to add file associations and pin stuff. I haven't found the specific start menu functionality yet, but pinning is close in essence. \nOnce I figure out specific stuff I will add it to the documentation under \"examples\" or \"common tricks\", because if it's easier for others to make packages, there is a bigger chance of more people making packages, which (in my opinion) is good. :)  -\nReply to this email directly or view it on GitHub.\n. This has been on my list to add. Now that I have boxstarter.org wrapped up I hope to knock this out soon. In the mean time, you might consider trying boxstarter, it does just this and with unattended install/reboot resiliency through out all choco installs, it makes installing from bare OS less error prone especially if you include windows updates (which boxstarter can grab).\n. tested on clean windows 7 VM in non admin CMD and works perfectly.\n. Just to comment on the scripts v PS. I would have leaned the same way a year ago before becoming comfortable with PS. Scriptcs sounds awesome as another low friction tool for c# devs to leverage their knowledge. There is no question a good learning curve to get comfortable with PS and you need to use it consistently for it to stick. That said, like any language PS has strengths lacking in c# for scriting. Its dynamic nature and the pipeline are very slick. Of course JavaScript and ruby would have done well here too and engaged a much larger community.\n. Hmm. Interesting. Will take a look thanks!\n. Might be nice to get an alpha/beta available for -pre\n-----Original Message-----\nFrom: \"Rob Reynolds\" notifications@github.com\nSent: \u200e4/\u200e15/\u200e2013 7:13 AM\nTo: \"chocolatey/chocolatey\" chocolatey@noreply.github.com\nCc: \"Matt Wrock\" matt@mattwrock.com\nSubject: Re: [chocolatey] The VSIX install helper is finding the wrong VisualStudio version (#262)\nWe're looking at May/June.\n\u2014\nReply to this email directly or view it on GitHub.\n. Might be interesting to get the CodeBetter builds to deploy to MyGet too. That would make it easier to dogfood new builds. I could look into that.\n. I find that deploying choco changes to a local choco setup is a bit hooky :) having a myget feed would be helpful.\n. Also if you could run import-module servermanager;get-windowsfeatures\nAnd send its output.\n-----Original Message-----\nFrom: \"Rob Reynolds\" notifications@github.com\nSent: \u200e4/\u200e14/\u200e2013 2:20 PM\nTo: \"chocolatey/chocolatey\" chocolatey@noreply.github.com\nSubject: Re: [chocolatey] Unable to install on Server 2012 (#268)\nLooks like the native zip for windows isn't enabled on the version you have. What version is it? Core?\n\u2014\nReply to this email directly or view it on GitHub.\n. That does look like core. Don't know off the top of my head which feature you need but can research.\n-----Original Message-----\nFrom: \"Stephen Nelson-Smith\" notifications@github.com\nSent: \u200e4/\u200e14/\u200e2013 3:04 PM\nTo: \"chocolatey/chocolatey\" chocolatey@noreply.github.com\nCc: \"Matt Wrock\" matt@mattwrock.com\nSubject: Re: [chocolatey] Unable to install on Server 2012 (#268)\nWindows Features:\n\u2014\nReply to this email directly or view it on GitHub.\n. Oh yeah. Was thinking a direct .net call would work. We may want to replace the current unzipping with this. The current code calls into the GUI shell I think.\n-----Original Message-----\nFrom: \"Stephen Nelson-Smith\" notifications@github.com\nSent: \u200e4/\u200e14/\u200e2013 3:28 PM\nTo: \"chocolatey/chocolatey\" chocolatey@noreply.github.com\nCc: \"Matt Wrock\" matt@mattwrock.com\nSubject: SPAM-LOW:  Re: [chocolatey] Unable to install on Server 2012 (#268)\nFTR: [System.IO.Compression.ZipFile]::ExtractToDirectory works for extracting the zip file manually.\n\u2014\nReply to this email directly or view it on GitHub.\n. Yeah. There may be some edge cases that cant include support for everyone without a ton of effort but if a trivial change which this may be can make it all the more simple to widen adoption and provide a friction free experience, then that would be nice.\n. Yeah I remember zipping in .net 4.0 involved a crazy over engineered API and most people used a 3rd party library to avoid it. \n-----Original Message-----\nFrom: \"Rich Siegel\" notifications@github.com\nSent: \u200e4/\u200e15/\u200e2013 6:10 AM\nTo: \"chocolatey/chocolatey\" chocolatey@noreply.github.com\nCc: \"Matt Wrock\" matt@mattwrock.com\nSubject: Re: [chocolatey] Unable to install on Server 2012 (#268)\nI will see if I can make something work. My users want core yesterday ironically.\nApproach?\nMay need conditional versioning logic (hate it but its better than outside dependencies)\nIf dotnet 4.5 is present we use it.\nIf not we try shell\nCatch core with no option? Tell user to add feature or prompt to add feature. \nNeed to setup testing env...\n\u2014\nReply to this email directly or view it on GitHub.\n. Yes great points. This is also a good topic for the google group.\n. I just reproduced this. The key is to make sure you do not open your ps console as admin. I opened a standard ps console on win 8. UAC is enabled (as it will be on most win 8 installs since metro does not work without it) and I did not open as administrator. After invoking clist -source webpi, i was prompted to open a new PS session as admin which opened a new ps window where I saw the wonders of webpi flash before me and alas disappeared just as fast as they appeared. If I remember correctly, there is code that pumps the webpi output to a file and then the original session pulls that output from the file back into its own session. So something there is not quite right.\n. Unless someone has already checked, we should check if the latest webpi cli requires admin privileges to list packages and just remove the elevation if not. I'm also wondering if cinst is equally broken.\n-----Original Message-----\nFrom: \"Gary Ewan Park\" notifications@github.com\nSent: \u200e5/\u200e28/\u200e2013 9:39 AM\nTo: \"chocolatey/chocolatey\" chocolatey@noreply.github.com\nCc: \"Matt Wrock\" matt@mattwrock.com\nSubject: Re: [chocolatey] clist -source webpi doesn't list commands (itflashes and disappears) (#293)\nAh, that makes sense :-)\nI have a potential fix, namely:\n  if ($source -like 'webpi') {\n$chocoInstallLog = Join-Path $nugetChocolateyPath 'chocolateyWebPiInstall.log';\nRemove-LastInstallLog $chocoInstallLog\n$webpiArgs =\"/c webpicmd /List /ListOption:All | Tee-Object -FilePath '$chocoInstallLog';\"\nStart-ChocolateyProcessAsAdmin \"cmd.exe $webpiArgs\" -nosleep\nCreate-InstallLogIfNotExists $chocoInstallLog\n$installOutput = Get-Content $chocoInstallLog -Encoding Ascii\nforeach ($line in $installOutput) {\n  Write-Host $line\n}\nWhich does the same thing as the Windows Feature equivalent, but it makes the command VERY slow to execute. Should I go ahead and make a PR to add this in? Or wait for another solution?\nGary\n\u2014\nReply to this email directly or view it on GitHub.\n. \"Windows Feature\" is somewhat of a thing in windows speak. For example the 'Turn Windows Features On and Off\" GUI. However I wouldn't say it is by any means official and I definitely see your point. We would want to implement this so that both terms are accepted to support backwards compatibility.\n. I agree with @gep13 that encouraging users to use a myget feed for personal packages is the way to go. As far as the educational process, certainly including the guidelines in the confirmation email or at least a link is a great idea, but might also consider checking conventions at push time. While we could not know for sure if a user is pushing a personalized package, we could look for dot notation that does not include the standard prefixes and then prompt the user with something like, \"This might not be a package intended for public assumption, personal packages are best kept on other feds like myget. Are you sure you want to push this package?\"\n. True. A CI model would be better. The question is what would a reliable CI model look like for chocolatey packages. This is something I have been thinking about lately. Ideally, it would spin up a VM of a vanilla OS install, run the package and validate that there were no errors (you could get fancier and have package authors include a validation scriptblock). \nWith the Boxstarter work that I hope to release this week this is simple:\n$result = win7VM,win8VM,server2012VM,server2k8r2VM | \n    Enable-BoxstarterVM -Credential $cred -CheckpointName Fresh | \n    Install-BoxstarterPackage -PackageName myPackage -Force\n$passed=$true\n$result | ? { ($_.Errors.Count -gt 0) -or ($_.completed -eq $false)  } | % { $passed = $false }\nreturn $passed\nHowever this requires Hyper-V to be accessible. I'll be adding support to azure and AWS next but compute time is not free unless we could get a cloud provider to sponsor this. I think this could help in raising the credibility of the community feed which i think is one of the biggest road blocks to chocolatey adoption. Imagine adding some anti malware checking on top of that.\n. Currently it assumes the VM to exist and will throw an error if not. After I wrap up azure and AWS and make a few \"engineering debt\" adjustments. I'm gonna start the functionality for injecting installer parameters into an ISO. The MS Hyper-V module provides pretty straight forward means to creating a VM from an ISO. I might add a convenience command to wrap it. \n. Totally agree @ferventcoder I was lazy here just throwing out a proof of concept. For a real test I too always like to assume false.\n. @gep13: It is my sole \"after hours\" project :) The code i have been pushing is largely based on spikes done in September so it has just been a matter of getting it fairly clean and around tests. Thought I was gonna be able to release Sunday night but after running tests in a domain joined environment, enabling WMI is kicking my butt. :(\n. For those interested. I released the Hyper-V functionality last night - http://boxstarter.org/VMIntegration\n. Yeah. That is what I'm thinking to a degree. However, this starts to look like Vagrant and my goal is not to be another Vagrant. If I had more time, I'd love to learn some Ruby and create a Boxstarter provisioner and a Hyper-V and azure provider for Vagrant. Hopefully I or someone else will eventually but I have some other stuff I really want to get to first. But yeah. I think you will likely see a Boxstarter API where you use the same command and pass in a provider string or enum value.\n. Yeah that would be nice. I had started to do that on a related spike a while back and then realized that because it is .net 4, it requires at least PS 3 in order to call directly from powershell.\nFrom: Gary Ewan Park [mailto:notifications@github.com] \nSent: Thursday, October 24, 2013 9:24 PM\nTo: chocolatey/chocolatey\nSubject: Re: [chocolatey] Support for version pattern matching (for installing, updating, and specifying dependencies) (#346)\nThere is a .Net Class for SemVer in the nuget code base, I wonder if we could re-use that. \nSent from my Windows Phone \n\nFrom: Rich Siegelmailto:notifications@github.com \nSent: \u200e25/\u200e10/\u200e2013 02:04 \nTo: chocolatey/chocolateymailto:chocolatey@noreply.github.com \nSubject: Re: [chocolatey] Support for version pattern matching (for installing, updating, and specifying dependencies) (#346) \nagree with you ferventcoder- that was my understanding. \ni think its a metric s-ton of a parsing exercise that probably needs to start with TDD via pester, and make each use case pass... just looking at this readme https://github.com/isaacs/node-semver made my head hurt. \n\nReply to this email directly or view it on GitHub: \nhttps://github.com/chocolatey/chocolatey/issues/346#issuecomment-27047579 \n\u2014\nReply to this email directly or view it on GitHub https://github.com/chocolatey/chocolatey/issues/346#issuecomment-27060509 .  https://github.com/notifications/beacon/SVpp0Doaws5T1aBsNeEOjuhn4qSMKcvXexQ8DxDMiWxbwLGbXJX0oqylR61aZFj8.gif \n. Agree with Rob that the fx3.5 check would be better placed in its own package. I did this for 4.5 and 4.5.1. Not sure why I did not use the WindowsFeature (especially since win features was my contribution). Maybe this package predates that. \nOne small caution on webpi: there are times when webPI does more than simply install what it is advertising and the simpler approach might be to simply install an MSI. I have recently discovered the .net4.0 install to be an example. Simply installing the MSI is faster and simpler and often meets your requirements while webpi makes several DISM calls and does some additional asp.net configuration. This might be what you want but not necessarily if you just need the basic framework BCL. \nI was having alot of issues in Boxstarter where the webpi was failing if I disabled windows update first and if I kept it enabled, webpi turns it back on and potentially opens the flood gates of updates that then launch their own MSIEXEC processes that will cause the ,net4.0 msi in webpi to either block or sometimes fail. So the next boxstarter release will simply install the .net4.5 MSI and not use webpi which I have found to be far more reliable. Of course this is an edge case affecting new installs primarily on win7 and intermittently occurring. Each webpi package should be considered on a package by package basis.\n. It is a lot of red. Regarding root cause you might be able to get closer by googling exit code 1620. It would either be a msiexec code or one from the app.\nHope that helps.\nMatt\nSent from my Windows Phone\n\nFrom: Redsandromailto:notifications@github.com\nSent: \u200e10/\u200e27/\u200e2013 3:18 PM\nTo: chocolatey/chocolateymailto:chocolatey@noreply.github.com\nSubject: [chocolatey] Errors are thrown two or three times (#357)\nWhen packages fail, I see a lot of red text. Can we cut this down a bit to a more convenient read for the user?\nI tried to cinst brackets and got three times a whole lot of error message (and still no clue about the cause).\n``` command\nWrite-Error : [ERROR] Running msiexec with /i \"C:\\Users\\Redsandro\\AppData\\Local\\Temp\\chocolatey\\Brackets\\BracketsInstall.msi\" /q  was not successful. Exit code was '1620'.\nAt C:\\Common\\Chocolatey\\chocolateyinstall\\helpers\\functions\\Start-ChocolateyProcessAsAdmin.ps1:42 char:5\n+     Write-Error $errorMessage\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nWrite-Error : Brackets did not finish successfully. Boo to the chocolatey gods!\n[ERROR] [ERROR] Running msiexec with /i \"C:\\Users\\Redsandro\\AppData\\Local\\Temp\\chocolatey\\Brackets\\BracketsInstall.msi\" /q  was not successful. Exit code was '1620'.\nAt C:\\Common\\Chocolatey\\chocolateyinstall\\helpers\\functions\\Write-ChocolateyFailure.ps1:29 char:2\n+     Write-Error $errorMessage\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nWrite-Error : Brackets did not finish successfully. Boo to the chocolatey gods!\n[ERROR] [ERROR] Running msiexec with /i \"C:\\Users\\Redsandro\\AppData\\Local\\Temp\\chocolatey\\Brackets\\BracketsInstall.msi\" /q  was not successful. Exit code was '1620'.\nAt C:\\Common\\Chocolatey\\chocolateyinstall\\helpers\\functions\\Write-ChocolateyFailure.ps1:29 char:2\n+     Write-Error $errorMessage\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\n```\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/issues/357\n. I do think that better use could be made of the Write-Verbose, Write-Debug  and debug/verbose preference settings so that the default output is a bit more sparse. I think most installs, given no errors have an acceptable amount of out put. There are places though, where it does feel like the output is not that valuable to the casual user. For example the out put when elevating privileges.\n. A few suggestions:\n- output psobjects to the pipeline with info like success/fail, exceptions, packagename\n- all verbose info that goes to the log should also gk to the console if -verbose is passed or $verbose preference is set to continue.\n. Yeah. In v2.1 I reworked Boxstarter output to this model.\nRegarding the verbose output, you can handle this with Write-Verbose or Write-Debug or both. Its not always crystal clear when to use one over the other. I use Write-Verbose but Chocolatey already makes use of Write-Debug and proxies the \"real\" Write-Debug function in order to intercept the output and write it to the log. So as long as you use Write-Debug for all output you want to be logged but NOT displayed, that is exactly what will happen. If the user wants the debug output to print to the console, they just need to set $DebugPreference to \"Continue\". Thats a PowerShell automatic variable and tells PS how to handle Write-Debug. The default value of $DebugPreference is \"SilentlyContinue\" which causes Write-Debug to do nothing (or in Choco's case, JUST log to disk). What makes this tricky for choco are the Batch redirects. Setting $debugPreference to \"Continue\" wil only have the desired effect if calling choco's Chocolatey.ps1 directly because then the choco call runs in the same scope as the caller. Using the batch redirect like cinst creates a new powershell session with the preferences set to the defaults. So you would need to add -Debug parameters to the choco commands that will set the $debugPreference of the choco powershell session to print debug output if specified.\nThe PSObjects make parsing and reacting to chocolatey results much more script friendly. Instead of (or in addition to) \nWrite-Host \"Chocolatey failed to install $packageName yadayadayada\"\nYou have \nWrite-Output @{PackageName=$PackageName;Success=$true;Exceptions=$TheExceptionsRaised}\nThis means I can inspect the results like so:\n$result=Chocolatey-Install MyPackage\nif(!$result.Success){\n   #Do something to deal with the failure\n}\nAgain this is tricky due to the batch stuff. I lose the Powershell pipeline since the chocolatey batch file spawns a new PS session. So using cinst or another one of the batch file gateways, $result would not capture the output but I do believe it would at least print the object to the console. Users who want to take advantage of the pipeline would just need to call chocolateys powershell functions directly.\n. Its actually the other way around. Permissins need to be elevated to call DISM. If you already have UAC disabled, thats not necessary but its not what is causing the call to fail. As of win7/win 2008R2, the DISM command can be used to install windows features. I'm not sure what mechanism is used on 2008 SP2. At the least, I think it would be reasonable for choco to detect if your OS version is less than 7/2008R2 and provide a message stating that the WindowsFeature source is not available on your platform. Of course finding the win 2008 SP2 compliant method would be ideal as long as the method is reasonable to implement.\n. looks good to me.\n. Ahh. This is because Chocolatey uses th WebPI installer for .net 4 which in addition to installing .net 4 also sets up asp.net and there by sets up IIS\nChocolatey does not need this. Clients like 2008R2 that do not have .net4 installed do need .Net4  to work with Nuget.exe but nothing more. I think it would be a good idea to replace the webpi installer with the vanilla MSI install of of 4.0 or 4.5.1 or at least  4.5.\n. yup. exactly.\n. It really depends on what you are trying to accomplish. Unfortunately it is not always easy to discover the complete ramifications of each method. WebPI is great but I think the creators of the .net4 webpi package were \u201casp.net opinionated.\u201d That\u2019s not necessarily a bad thing. Getting all the asp.net/IIS stuff right can be tricky and they were likely trying to guide people to make the right choices. However, in the interest of taking control over your environment, I\u2019d personally prefer the more minimal approach.\nFrom: Daniel Liuzzi [mailto:notifications@github.com] \nSent: Monday, December 30, 2013 2:44 AM\nTo: chocolatey/chocolatey\nCc: Matt Wrock\nSubject: Re: [chocolatey] Installing Chocolatey adds Web Server (IIS) Role (#399)\nThank you guys for your replies. I forgot to mention that along with the Role, I got a few Features installed as well:\nRemote Server Administration Tools\n    Role Administration Tools\n        Web Server (IIS) Tools\nWindows Process Activity Service\n    Process Model\n    .NET Environment\n    Configuration APIs\nThese were not there before installing Chocolatey. I assume it must the same reason (WebPI adding them when it installs .NET 4.) Now that you bring up WebPI, I remember when I started playing with Chocolatey, I was unsure on which source to use when there are many. For example ASP.NET MVC 3 can be installed from both the default source (i.e. cinst aspnetmvc.install), as well as the from the webpi source (i.e. choco webpi MVC3). I was under the impression the WebPI might be a better choice as it seems more \"package oriented\" than vanilla MSI, so I was using that, but now I'm not so sure. Is the default source better for these cases?\nThanks again.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/chocolatey/chocolatey/issues/399#issuecomment-31340715 .  https://github.com/notifications/beacon/655165__eyJzY29wZSI6Ik5ld3NpZXM6QmVhY29uIiwiZXhwaXJlcyI6MTcwMzkzMzA2NiwiZGF0YSI6eyJpZCI6MjI3MTEzMTd9fQ==--c67744b69d3816356f23944e0abe5e56b580293b.gif \n. and technically in this case its for installing the installer to install the installers :)\n. yes. \nMock 7za\n. You win!! :)\nYeah as long as you can do a\nGet-Command 7za\nit should work. Pester creates a proxy command and hides the original command.\n. This is great. However -logout seems poorly named to me. The first thing I think of is signing out of something. How about using -Quiet?\n. If you used -Quiet and made the default $false, wouldn't that have the same effect?\n. Yes. I think that is what @jole78 was intending this argument to accomplish and something that I think makes sense - completely silence the \"Host\" stream. I'm assuming keeping the other streams, output/warning/verbose/error untouched is desired since there are already ways built into the PS syntax to silence or redirect those.\n. Interesting. I ran into this exact issue last night. Only happens on a win2k8 AzureVM. I have a 2012R2 VM that works fine. Also, it worked in the morning but has not worked since I got home from work yesterday. I'm thinking it is somehow proxy related. When I turned on fiddler, it went away and I can get to the url in a browser. Blew away and recreated the VM - still broke. I'm planning to troubleshoot further tonight.\n. Both should work, but I think I figured this out. The issue is a combination of how the .net http stack in implemented in v 3.5 and before along with a likely change in protocol or certificate on Github's end. I had to use Wireshark to see the difference. .net3.5 (the version used on win7 and server2008R2) is not handling the SSL client key exchange and just hanging. This can be fixed by calling:\n[System.Net.ServicePointManager]::SecurityProtocol = 48\n48 is the Enum value for SecurityProtocolType.Ssl3.\nI'll be submitting a PR or perhaps just commiting since this is likely a big blocker right now.\n. I sent a PR https://github.com/chocolatey/chocolatey.org/pull/72 since even if I did commit, I'm not sure it would go live. \n. It only breaks if using a .net 2/3.5  HttpWebRequest. Works fine in browsers and .net 4+\n. We are not, but that was one of my initial thoughts too. Setting it didn't resolve the issue.\n. I managed to get one packed down to just under 4GB (still huge) using lzma compression:\nhttps://vagrantcloud.com/mwrock/Windows2012R2\nWon't work for you since it is a hyper-V box and requires a couple recent vagrant PRs I submitted that allow for .vhd format files and a working implementation of SMB on windows guests. I should make a vbox version.\nYou can try grabbing the evaluation ISO at http://www.microsoft.com/en-us/evalcenter/evaluate-windows-server-2012-r2\n. I had to sign the click-once application which is the kinda different. Its the \"delivery mechanism\" of the powershell and it just creates a powershell session, bypassing the execution policy and runs the powershell unsigned.\nI do believe that signing powershell does involve an authenticode cert which will cost money.\n. I can look tonight too. Been out of internet reach for a few days.\nSent from my Windows Phone\n\nFrom: JVimesmailto:notifications@github.com\nSent: \u200e9/\u200e1/\u200e2014 11:51 AM\nTo: chocolatey/chocolateymailto:chocolatey@noreply.github.com\nCc: Matt Wrockmailto:matt@mattwrock.com\nSubject: Re: [chocolatey] Install-ChocolateyFileAssociation breaks \"create new text document\" in Windows Explorer (#563)\n@ferventcoder Let me know what I can do to help. The menu entry is there by default, and it does appear the particular registry data change is what caused the entry to disappear.\n\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/issues/563#issuecomment-54085118\n. I just did a little research and experimentation and figured out the issue. The chocolatey helper uses the DOS commands assoc and ftype to manipulate the association which in turn edits HKCR registry entries. This is all a bit wonky. For example if you change associations using the windows explorer gui, it changes a different set in HKCU and will give precedence to that. \nAnyways the problem with the \"New\" context menu is that when ftype creates the new \"content type\" it does not give it a label. The readable text that appears next to each item in the menu. I tried manually adding that to the registry and then the new item appeared.\nSo the fix is pretty straight forward. The command will just need to edit the registry entry after calling fype. When I wrote the helper, I wanted to avoid direct registry editing and did not notice the missing New context menu item . As I have many times learned, direct registry editing is a core aspect that makes up the joy of windows automation Therefore I will be happily adding a PR to do just that after I slip into something a little more comfortable a little later.\n. Unfortunately there is no argument for adding the label. My hunch is that ftype and assoc are ancient commands and are not getting much love in later windows versions (but I could be way off here) you cant even call these from powershell directly but have to invoke via cmd.exe. The extra shell is due to the fact that chocolatey has to ensure that the call is run with elevated privileges and invokes in a elevated shell to do that.\n. Just Submitted PR #564 to address this.\n. I'll take a look at tests tonight. I really should have run those locally. \n. Local tests are passing as long as I am using pester v2.0.2. I small just pushed a change to the build scripts that fix an issue if like me one has a version of pester greater than 2.0.2. However I doubt this is why appveyor is failing.\n. all the appveyor failing tests are related to Get-CheckSumValid. Based on the errors it seems like CheckSum.exe is not where Chocolatey expects it to be. Is there a way in Appveyor to browse the chocolatey files that are installed?\n. my PR addresses the exit code but does not rethrow. Honestly I personally prefer actually rethrowing the actual exception. For something like Boxstarter which calls the chocolatey powershell functiuons directly, I can better inspect the exception and provide better logging. I realize that will no longer be possible with choco.exe.\nAnother PR I considered was adding more detail to the exceptions logged. Currently chocolotey just captures the error message which is sometimes not very helpful. Doing something like logging:\n$_.exception | fl * -force | out-string\nwould capture any stacktrace and inner exceptions and even script level stack trace on later OSs. I'm probably gonna hold off on contributing that until the new chocolatey comes out but this is my 2 cents. :)\nAlso, chocolatey simply returns an exit code of 1 and it would be better to at least return the original exit code. My PR was just an attempt to \"fix\" what appeared to be the current intent of the code. On the boxstarter side I can always just examine the $errors array to grab the full exceptions after the fact. Again, that only works if you are calling chocolatey from powershell and calling the actual powershell functions so you are not crossing any process boundaries.\n. I really like what @juliankrispel is doing here. Even with the goal of running choco on different platforms I like the c: . My guess is that choco will largely be the package manager for Windows apps regardless from where you use it and the c: Drives home that distinction.\n. Awesome work! I like 8 the most.\n. Right but it fixes the PS version. When is choco.exe due?\n. Oh ok. As a full release or alpha/beta?\nSent from my Windows Phone\n\nFrom: Rob Reynoldsmailto:notifications@github.com\nSent: \u200e1/\u200e12/\u200e2015 8:46 AM\nTo: chocolatey/chocolateymailto:chocolatey@noreply.github.com\nCc: Matt Wrockmailto:matt@mattwrock.com\nSubject: Re: [chocolatey] write to the correctly scoped chocolateyErrored variable (#658)\nJanuary 15th-ish\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/pull/658#issuecomment-69600945\n. ok cool. Wasn't sure if there is stuff out there that would be highly impacted by a lack of a non-zero error code. I pushed a work around in boxstarter last night so its not affected.\n. PR #658 should fix this.\n. ",
    "bmcclure": "This is my biggest issue as well. With a standard package manager like apt-get or yum, you generally don't need to do an extra sanity check after an install is completed to ask, \"Is this really installed, or does it just say so?\"\nWhen a package fails, it seems like chocolatey should clean up everything and put the computer back to the state it was before attempting the install, if possible. It's already smart enough to catch many errors and report them on the console, but it'd be substantially more intuitive if it also cleaned up failed installs, or at least marked the package 'broken' or something so that you don't forget about it and can attempt a re-install easily.\n. No problems here, I'm just sharing my thoughts on the issue hoping to have some influence into Chocolatey's continued development :)\nI agree, marking packages as broken makes a lot of sense and I do hope to see it implemented someday. Until then, I'm still loving Chocolatey so far!\n. This is my biggest issue as well. With a standard package manager like apt-get or yum, you generally don't need to do an extra sanity check after an install is completed to ask, \"Is this really installed, or does it just say so?\"\nWhen a package fails, it seems like chocolatey should clean up everything and put the computer back to the state it was before attempting the install, if possible. It's already smart enough to catch many errors and report them on the console, but it'd be substantially more intuitive if it also cleaned up failed installs, or at least marked the package 'broken' or something so that you don't forget about it and can attempt a re-install easily.\n. No problems here, I'm just sharing my thoughts on the issue hoping to have some influence into Chocolatey's continued development :)\nI agree, marking packages as broken makes a lot of sense and I do hope to see it implemented someday. Until then, I'm still loving Chocolatey so far!\n. ",
    "loudej": "That's great, and thanks again for Chocolatey! It's amazing. \n. That's great, and thanks again for Chocolatey! It's amazing. \n. ",
    "jarmo": "Following the exact command on your website they will. Or am i misunderstood?\nOther solution would be to somehow use the exact path chocolatey got just installed.\n. awesome :)\n. Following the exact command on your website they will. Or am i misunderstood?\nOther solution would be to somehow use the exact path chocolatey got just installed.\n. awesome :)\n. ",
    "micahlmartin": "Should be fixed now. Is there anything else that I may have missed?\n. Glad to be able to contribute to such an amazing project.\n. What was the issue? Not sure what you mean by \"cygwin runner\". The cygwin installer is basically just a wrapper around some wget type functions that downloads packages and installs them. \n. Not sure if this answers your question or not:\nhttp://superuser.com/questions/229477/installing-cygwin-on-windows-xp-without-having-the-admin-rights\n. I'll spin up a test environment and see what it does. I always disable UAC\nand run as admin so I never encountered any issues.\n. Tried it again and it magically worked. Weird.\n. At the very end though after a succesful update I got this\n```\nThere are no executables (that are not ignored) in the package.\n=====================================================\nChocolatey has finished installing 'chocolatey' - check log for errors.\n=====================================================\nThe filename, directory name, or volume label syntax is incorrect.\nThe filename, directory name, or volume label syntax is incorrect.\n```\nDon't know if that means anything or not.\n. Sounds good. Thanks for including my patch!\n. Ha! Nice...\n. This should solve the issue I created earlier: https://github.com/chocolatey/chocolatey/issues/125\n. So I just need to create a private branch off of master and push it and create another pull request?\n. That makes sense now. I was scratching my head trying to figure out what\nthe hell -lo was.\n. Is this the right way to do it?\n. Why does it need to be done this way? Just curious.\n. That makes sense. Thanks!\n. that takes care of it. Thanks!\n. It doesn't have to be powershell-y. Is there a way to access the installArguments? I could pass it a format that's easy to parse and use it that way.\ncinst myapp -installArguments \"key:1;key2:3\" as an example. But how can I access that within chocolateyinstall.ps1?\n. No, I'm not worried about the installer because I'm installing a zip file (which I don't think uses the arguments??). There's some customizations I want to do like pass in like where to install and what url to download it from. \n. So it sounds like the installArguments will solve my problem since I can access it like $env:chocolateyInstallOverride right?\n. I'm not sure it would be that useful for 99% of cases. I'm using it to install our applications in a QA environment as well as production and depending on where I'm installing it I want to download the artifacts from different places and also want to tell it which version of the configs to use. It may be too much of an edge-case to change the way the zip installer works for everyone.\n. Another thing I need to do is pass in username and password so I can download the file using basic authentication. Currently the installer doesn't support this at all. Would be nice if it did. Perhaps I should create a separate issue?\n. Should be fixed now. Is there anything else that I may have missed?\n. Glad to be able to contribute to such an amazing project.\n. What was the issue? Not sure what you mean by \"cygwin runner\". The cygwin installer is basically just a wrapper around some wget type functions that downloads packages and installs them. \n. Not sure if this answers your question or not:\nhttp://superuser.com/questions/229477/installing-cygwin-on-windows-xp-without-having-the-admin-rights\n. I'll spin up a test environment and see what it does. I always disable UAC\nand run as admin so I never encountered any issues.\n. Tried it again and it magically worked. Weird.\n. At the very end though after a succesful update I got this\n```\nThere are no executables (that are not ignored) in the package.\n=====================================================\nChocolatey has finished installing 'chocolatey' - check log for errors.\n=====================================================\nThe filename, directory name, or volume label syntax is incorrect.\nThe filename, directory name, or volume label syntax is incorrect.\n```\nDon't know if that means anything or not.\n. Sounds good. Thanks for including my patch!\n. Ha! Nice...\n. This should solve the issue I created earlier: https://github.com/chocolatey/chocolatey/issues/125\n. So I just need to create a private branch off of master and push it and create another pull request?\n. That makes sense now. I was scratching my head trying to figure out what\nthe hell -lo was.\n. Is this the right way to do it?\n. Why does it need to be done this way? Just curious.\n. That makes sense. Thanks!\n. that takes care of it. Thanks!\n. It doesn't have to be powershell-y. Is there a way to access the installArguments? I could pass it a format that's easy to parse and use it that way.\ncinst myapp -installArguments \"key:1;key2:3\" as an example. But how can I access that within chocolateyinstall.ps1?\n. No, I'm not worried about the installer because I'm installing a zip file (which I don't think uses the arguments??). There's some customizations I want to do like pass in like where to install and what url to download it from. \n. So it sounds like the installArguments will solve my problem since I can access it like $env:chocolateyInstallOverride right?\n. I'm not sure it would be that useful for 99% of cases. I'm using it to install our applications in a QA environment as well as production and depending on where I'm installing it I want to download the artifacts from different places and also want to tell it which version of the configs to use. It may be too much of an edge-case to change the way the zip installer works for everyone.\n. Another thing I need to do is pass in username and password so I can download the file using basic authentication. Currently the installer doesn't support this at all. Would be nice if it did. Perhaps I should create a separate issue?\n. ",
    "sindux": "I agree we need Uninstall-ChocolateyPath. Someone seemed to have made one in PR #542.\n. It might be useful to include PR #542 too.\n. I agree we need Uninstall-ChocolateyPath. Someone seemed to have made one in PR #542.\n. It might be useful to include PR #542 too.\n. ",
    "khellang": "We'd :heart: this for scriptcs :+1:\n. :+1:\n. We'd :heart: this for scriptcs :+1:\n. :+1:\n. ",
    "tyrken": "How about adding fully-automatic uninstall of MSIs?  If there's no packager defined tools/chocolateyUninstall.ps1, and the file containing a MSI product code exists (so they must have used the standard MSI helpers during install), run 'msiexec /x {code} /quiet' for them.\n. Are you saying to find the ARP entry for the program choco just installed, so we can auto-uninstall it?  I had hoped your Get-MSIProductCode was sufficient for MSIs, and any non-MSI install could not be automatically made quiet/non-blocking.  AFAIK the UninstallString usually kicks off a general-purpose change/repair/remove GUI, or at least a confirmation dialog.\n. Everything would be nice, but most UninstallString values I can see in the ARP registry area will kick off interactive uninstalls, which are almost useless for DevOps (my use case).  But I can see a few, usually Inno Setup ones, specifying a QuietUninstallString which would be useful.  I could try to work up a Pull Request for something to snapshot the registry areas before/after we install, look at the delta and write an \"$packageName-uninstallkeys.txt\" to the package-folder as you do with msicodes.\nA new auto-uninstaller function would use msicodes.txt or uninstallkeys.txt to fill in for any missing tools/chocolateyUninstall.ps1.  A bit dangerous using the uninstallkeys.txt if people ran two installers at once though...\nRather than doctoring the uninstall command, I'd prefer the safer option of a garbage collect function to drop choco-packages if their uninstallkeys.txt looked to be missing, but that would be a separate PR.\n. Not so sure about the garbage collection idea, which would need to run whenever queried as to a package being installed - might be a bit slow, will have to see.\nStarted work at https://github.com/tyrken/chocolatey/tree/auto-uninstall.\n. Yes - that's the idea.  Currently struggling keeping just the powershell v2 requirement but able to read all reg key areas when running as 32-bit powershell, but getting there.  Do you think it best to do a in-progress PR now or wait until nearer done, a few more days hopefully?\nIf someone does a per-user install, then attempts to uninstall a choco package (which has no per-user concept) when running as a different user, I assume bad things could happen.  So I am planning to detect this & abort with message, do you agree?  I could find the correct uninstall string easily & try that, but suspect I'd have to change user to do it safely & don't want to try implementing that.\n. Added https://github.com/chocolatey/chocolatey/pull/420\n. I've hopefully addressed most of this with pull request #420.  If there are MSI based installers which dont create an Uninstall registry key, then I could merge in the code from that old PR #99 to create an uninstall record for them also - but suspect they are rare.\n. The use case starts with a skilled admin user installing the package which downloads the app from a hard-coded Internet URL onto their own (Internet connected) workstation.  After checking it works as intended & incidentally virus scanning it, they would (yes, manually) update the CSV file - there is a hint in the console/chocolateyInstall.log for beginners.  They also have to dump the orginal or redownloaded binary near the CSV as suggested or at a random other location of their choice.  Now other boxes can use the unaltered package without Internet access - chocolatey will now find the url in the CSV it always checks and so fetch from the alternate url.  It's not so much targeting already downloaded on this one box, as for whether it's already been downloaded & blessed in the whole organisation.\nPartly this is for simplicity - wanting to avoid getting in WebDAV for HTTP uploads and keeping the code and cache format simple (compared to my work based on MRJ's fork).  Partly as security policy at my firm & I suspect others is that \"new stuff from the Internet\" must only be used via a conscious, non-automated action (no automagic 'it just does it all for you').  The final steps of uploading it to be widely available in the cache folder & updating a CSV can both be secured and audited easily - e.g. stored in git or a repository like ProGet or Artifactory that we would also use for the Nuget source.\nYes, this would allow us & other companties to open source more packaging work as we'd embed Internet Urls (not imposing any url mapping on others) in the scripts on github but redirect them when used locally.  We'd also be able to guarentee supply - even if the original url was broken - as it's modeled as a side-loading repository, not an opaque cache that someone might \"clean out\" without a backup.  Finally it would allow semi-skilled admins to monkey-patch in extremis (e.g. slow package update after a security issue).\nPre-populating a machine-local cache would also work, but that would mean a hell of a lot of filecopying - e.g. our SQL Server package uses a 2.5 GB download, and many others are 100's of MB - for each version.  That would be pushed to every C drive of every box, want it or not.  I'd much rather a pull model and prefer HTTP over SMB file shares though accept others may not.\nI'm prepared to believe not everyone has the security angle I do - but if so, just set up all the boxes with a web proxy server like squid/varnish/whatever & be done with it.  That helps them get to the Internet in general, and you can add caching to the proxy if you worry about Internet bandwidth - simpler & more efficient than any Chocolatey caching system discussed so far.\n. We could rename Get-RedirectedWebFileUrl to \"Map-CSVRedirectedWebFileUrl\", change to a ref param for $url and return a boolean: $true if mapped.  Then make the addition in Get-ChocolateyWebFile call a \"Map-ChocolateyUrl\" similar to your commit, which daisy chains calls to Map-CSVRedirectedWebFileUrl and other similar functions until one returns $true or runs out.  (I'm assuming it would be winner takes all in a fixed order, rather than calling all mappers always.)\nFor the smart-script based idea, I haven't tried it but was the point of the extensions functionality to allow packages ending with \".extension\" to contain a psm1 which could override any existing chocolatey framework/helper method?  So if I made a \"mycompany-redirecter.extension\" package, I could embed in it a script to override Map-ChocolateyUrl & do whatever I want.  Not sure if it's possible to still call the original from the extension, but splitting Map-ChocolateyUrl from Map-CSVRedirectedWebFileUrl means you could get that functionality still if you wanted it.\n. Updated broadly as discussed, except the custom PSObject only has one property, newUrl, and it will overwrite the current one if non-null, rather than using a second boolean.  Also, extension methods don't seem to be able to override existing helper methods, so I added a way to run an extra method if defined, e.g. in an extension.\nAnd I had to switch back to \"Get-\" rather than \"Map-\" as the latter is not a Microsoft Approved Verb.\n. How about adding fully-automatic uninstall of MSIs?  If there's no packager defined tools/chocolateyUninstall.ps1, and the file containing a MSI product code exists (so they must have used the standard MSI helpers during install), run 'msiexec /x {code} /quiet' for them.\n. Are you saying to find the ARP entry for the program choco just installed, so we can auto-uninstall it?  I had hoped your Get-MSIProductCode was sufficient for MSIs, and any non-MSI install could not be automatically made quiet/non-blocking.  AFAIK the UninstallString usually kicks off a general-purpose change/repair/remove GUI, or at least a confirmation dialog.\n. Everything would be nice, but most UninstallString values I can see in the ARP registry area will kick off interactive uninstalls, which are almost useless for DevOps (my use case).  But I can see a few, usually Inno Setup ones, specifying a QuietUninstallString which would be useful.  I could try to work up a Pull Request for something to snapshot the registry areas before/after we install, look at the delta and write an \"$packageName-uninstallkeys.txt\" to the package-folder as you do with msicodes.\nA new auto-uninstaller function would use msicodes.txt or uninstallkeys.txt to fill in for any missing tools/chocolateyUninstall.ps1.  A bit dangerous using the uninstallkeys.txt if people ran two installers at once though...\nRather than doctoring the uninstall command, I'd prefer the safer option of a garbage collect function to drop choco-packages if their uninstallkeys.txt looked to be missing, but that would be a separate PR.\n. Not so sure about the garbage collection idea, which would need to run whenever queried as to a package being installed - might be a bit slow, will have to see.\nStarted work at https://github.com/tyrken/chocolatey/tree/auto-uninstall.\n. Yes - that's the idea.  Currently struggling keeping just the powershell v2 requirement but able to read all reg key areas when running as 32-bit powershell, but getting there.  Do you think it best to do a in-progress PR now or wait until nearer done, a few more days hopefully?\nIf someone does a per-user install, then attempts to uninstall a choco package (which has no per-user concept) when running as a different user, I assume bad things could happen.  So I am planning to detect this & abort with message, do you agree?  I could find the correct uninstall string easily & try that, but suspect I'd have to change user to do it safely & don't want to try implementing that.\n. Added https://github.com/chocolatey/chocolatey/pull/420\n. I've hopefully addressed most of this with pull request #420.  If there are MSI based installers which dont create an Uninstall registry key, then I could merge in the code from that old PR #99 to create an uninstall record for them also - but suspect they are rare.\n. The use case starts with a skilled admin user installing the package which downloads the app from a hard-coded Internet URL onto their own (Internet connected) workstation.  After checking it works as intended & incidentally virus scanning it, they would (yes, manually) update the CSV file - there is a hint in the console/chocolateyInstall.log for beginners.  They also have to dump the orginal or redownloaded binary near the CSV as suggested or at a random other location of their choice.  Now other boxes can use the unaltered package without Internet access - chocolatey will now find the url in the CSV it always checks and so fetch from the alternate url.  It's not so much targeting already downloaded on this one box, as for whether it's already been downloaded & blessed in the whole organisation.\nPartly this is for simplicity - wanting to avoid getting in WebDAV for HTTP uploads and keeping the code and cache format simple (compared to my work based on MRJ's fork).  Partly as security policy at my firm & I suspect others is that \"new stuff from the Internet\" must only be used via a conscious, non-automated action (no automagic 'it just does it all for you').  The final steps of uploading it to be widely available in the cache folder & updating a CSV can both be secured and audited easily - e.g. stored in git or a repository like ProGet or Artifactory that we would also use for the Nuget source.\nYes, this would allow us & other companties to open source more packaging work as we'd embed Internet Urls (not imposing any url mapping on others) in the scripts on github but redirect them when used locally.  We'd also be able to guarentee supply - even if the original url was broken - as it's modeled as a side-loading repository, not an opaque cache that someone might \"clean out\" without a backup.  Finally it would allow semi-skilled admins to monkey-patch in extremis (e.g. slow package update after a security issue).\nPre-populating a machine-local cache would also work, but that would mean a hell of a lot of filecopying - e.g. our SQL Server package uses a 2.5 GB download, and many others are 100's of MB - for each version.  That would be pushed to every C drive of every box, want it or not.  I'd much rather a pull model and prefer HTTP over SMB file shares though accept others may not.\nI'm prepared to believe not everyone has the security angle I do - but if so, just set up all the boxes with a web proxy server like squid/varnish/whatever & be done with it.  That helps them get to the Internet in general, and you can add caching to the proxy if you worry about Internet bandwidth - simpler & more efficient than any Chocolatey caching system discussed so far.\n. We could rename Get-RedirectedWebFileUrl to \"Map-CSVRedirectedWebFileUrl\", change to a ref param for $url and return a boolean: $true if mapped.  Then make the addition in Get-ChocolateyWebFile call a \"Map-ChocolateyUrl\" similar to your commit, which daisy chains calls to Map-CSVRedirectedWebFileUrl and other similar functions until one returns $true or runs out.  (I'm assuming it would be winner takes all in a fixed order, rather than calling all mappers always.)\nFor the smart-script based idea, I haven't tried it but was the point of the extensions functionality to allow packages ending with \".extension\" to contain a psm1 which could override any existing chocolatey framework/helper method?  So if I made a \"mycompany-redirecter.extension\" package, I could embed in it a script to override Map-ChocolateyUrl & do whatever I want.  Not sure if it's possible to still call the original from the extension, but splitting Map-ChocolateyUrl from Map-CSVRedirectedWebFileUrl means you could get that functionality still if you wanted it.\n. Updated broadly as discussed, except the custom PSObject only has one property, newUrl, and it will overwrite the current one if non-null, rather than using a second boolean.  Also, extension methods don't seem to be able to override existing helper methods, so I added a way to run an extra method if defined, e.g. in an extension.\nAnd I had to switch back to \"Get-\" rather than \"Map-\" as the latter is not a Microsoft Approved Verb.\n. ",
    "u9520107": "Just wondering.. instead of requiring packages to create .ignore files. Wouldn't it be more sensible to allow people to specify which redirects should be created?\nWhat if you create a lot of executable's but only want a selected few to be added to the path?\nNot saying that the current way is not sufficient, but it seems to be a bit inconvenient. \n. @ferventcoder \nhmm...  I guess that makes sense. \nWell, I tried to install nodist for managing node versions under windows through chocolatey. In their package, they included a old version of node that they use internally. Their installation will create multiple copies of node.exe with different versions, but only one if it needs to be redirected. In that case I guess having nodist scripts to create a .ignore file is better.\n. Just wondering.. instead of requiring packages to create .ignore files. Wouldn't it be more sensible to allow people to specify which redirects should be created?\nWhat if you create a lot of executable's but only want a selected few to be added to the path?\nNot saying that the current way is not sufficient, but it seems to be a bit inconvenient. \n. @ferventcoder \nhmm...  I guess that makes sense. \nWell, I tried to install nodist for managing node versions under windows through chocolatey. In their package, they included a old version of node that they use internally. Their installation will create multiple copies of node.exe with different versions, but only one if it needs to be redirected. In that case I guess having nodist scripts to create a .ignore file is better.\n. ",
    "cable729": "Man, it feels good to contribute to open source :-)\n. Man, it feels good to contribute to open source :-)\n. ",
    "awright18": "The fix looks great. Thanks for taking care of that. \n. The fix looks great. Thanks for taking care of that. \n. ",
    "bdukes": "I'm looking for simplified cver output like is described in this issue, but it doesn't look like it's available, even though #119 says it was \"in\" 3 months ago...  Is it just not in stable, or did the idea of formattable output get lost?\n. Sorry, just saw that this was fixed in 0.9.8.22.  Hadn't seen that there was an update.\n. I'm looking for simplified cver output like is described in this issue, but it doesn't look like it's available, even though #119 says it was \"in\" 3 months ago...  Is it just not in stable, or did the idea of formattable output get lost?\n. Sorry, just saw that this was fixed in 0.9.8.22.  Hadn't seen that there was an update.\n. ",
    "xuhdev": "Yes, I see it. Thanks!\n. EditorConfig is made of plugins for many editors, and a definition of a file format defing the coding style. For example, with the .editorconfig file in the pull request, when you open a powershell file in notepad++, for example, the notepad++ will automatically set the indent option to space and indent size to two for this buffer. Thus when Notepad++ does indent for you, or when you press tab, two spaces will be inserted, but not tab, or four spaces, or anything else. Also, the eol is set to CRLF.\nEditorConfig has got its popularity through out web developers. As I mentioned, a few famous web projects, such as jQuery, Modernizr, has used EditorConfig to maintain coding style. But we really think this project can bring benefits to projects other than web projects, since a consistent coding style is important for every code.\nFYI, a development library for plugins is also available on chocolatey :)\n. Note that the plugin doesn't affect global editor preferences, but only buffer options.\n. :) Wish you like it\n. Yes, I see it. Thanks!\n. EditorConfig is made of plugins for many editors, and a definition of a file format defing the coding style. For example, with the .editorconfig file in the pull request, when you open a powershell file in notepad++, for example, the notepad++ will automatically set the indent option to space and indent size to two for this buffer. Thus when Notepad++ does indent for you, or when you press tab, two spaces will be inserted, but not tab, or four spaces, or anything else. Also, the eol is set to CRLF.\nEditorConfig has got its popularity through out web developers. As I mentioned, a few famous web projects, such as jQuery, Modernizr, has used EditorConfig to maintain coding style. But we really think this project can bring benefits to projects other than web projects, since a consistent coding style is important for every code.\nFYI, a development library for plugins is also available on chocolatey :)\n. Note that the plugin doesn't affect global editor preferences, but only buffer options.\n. :) Wish you like it\n. ",
    "takhyon": "More specifically, when installing a package that has both a 32 bit and 64 bit installer on a multi proc (64 bit) machine, the get-chocolateywebfile retrieves the 32 bit installer rather than the 64 bit installer. \nOn Jul 2, 2012, at 2:04 PM, \"Rob Reynolds\" reply@reply.github.com wrote:\n\nThanks! I have a multi core processor and I haven't noticed this as an issue but I'll definitely take a look\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/pull/121#issuecomment-6715401\n. More specifically, when installing a package that has both a 32 bit and 64 bit installer on a multi proc (64 bit) machine, the get-chocolateywebfile retrieves the 32 bit installer rather than the 64 bit installer. \n\nOn Jul 2, 2012, at 2:04 PM, \"Rob Reynolds\" reply@reply.github.com wrote:\n\nThanks! I have a multi core processor and I haven't noticed this as an issue but I'll definitely take a look\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/pull/121#issuecomment-6715401\n. \n",
    "b-long": "I'm a little confused, is chocolatey list -installed supposed to work with version 0.9.8.19 ?  Is this functionality preset in another command?\n. Thanks @rismoney .  I was able to use cver all -localonly and it did provide me with the info I wanted (albeit a bit strangely formatted) :\n``` cmd\nC:\\Windows\\System32>cver all -localonly\nYou have the latest version of Compass (0.12.2) based on: '-Source \"http://chocolatey.org/api/v2/\" -Source \"https://go.microsoft.com/fwlink/?LinkID=230477\" ' (if value is empty, using sources in nuget.config file).\nYou have the latest version of git (1.7.11) based on: '-Source \"http://chocolatey.org/api/v2/\" -Source \"https://go.microsoft.com/fwlink/?LinkID=230477\" ' (if value is empty, using sources in nuget.config file).\nYou have the latest version of git.install (1.7.11) based on: '-Source \"http://chocolatey.org/api/v2/\" -Source \"https://go.microsoft.com/fwlink/?LinkID=230477\" ' (if value is empty, using sources in nuget.config file).\nYou have the latest version of libjpeg-turbo (1.2.1) based on: '-Source \"http://chocolatey.org/api/v2/\" -Source \"https://go.microsoft.com/fwlink/?LinkID=230477\" ' (if value is empty, using sources in nuget.config file).\nYou have the latest version of nodejs.install (0.8.11) based on: '-Source \"http://chocolatey.org/api/v2/\" -Source \"https://go.microsoft.com/fwlink/?LinkID=230477\" ' (if value is empty, using sources in nuget.config file).\nYou have the latest version of OptiPNG (0.7.1.20120913) based on: '-Source \"http://chocolatey.org/api/v2/\" -Source \"https://go.microsoft.com/fwlink/?LinkID=230477\" ' (if value is empty, using sources in nuget.config file).\nThe most recent version of PhantomJS available from '-Source \"http://chocolatey.org/api/v2/\" -Source \"https://go.microsoft.com/fwlink/?LinkID=230477\"' (if value is empty, using sources in nuget.config file) is 1.7.0. On your machine you have 1.6.1.20120913 installed.\nThe most recent version of ruby available from '-Source \"http://chocolatey.org/api/v2/\" -Source \"https://go.microsoft.com/fwlink/?LinkID=230477\" ' (if value is empty, using sources in nuget.config file) is 1.9.3.12500. On your machine you have 1.8.7.35800 installed.\nYou have the latest version of Yeoman (0.9.0) based on: '-Source \"http://chocolatey.org/api/v2/\" -Source \"https://go.microsoft.com/fwlink/?LinkID=230477\" ' (if value is empty, using sources in nuget.config file).\nname          : Yeoman\nfound         : 0.9.0\nlatestCompare : 00000000.00000009.00000000\nlatest        : 0.9.0\nfoundCompare  : 00000000.00000009.00000000\n```\nI'm so excited to see this project under development and really want to thank all of the contributors.  Perhaps I can offer a little help on the documentation side.  I'd really like to see more about all commands chocolatey has available via chocolatey /? or chocolatey help .\nRegarding my formatting comment, why does the output here tell me that this is provided by -Source \"https://go.microsoft.com/fwlink/?LinkID=230477\" for each package?  If this is the default, perhaps offer the link to https://nuget.org/api/v2/ at the top of the cver output and only list sources that differ from the default where necessary?  I'm also a little unclear on why the Yeoman version stats are a bit different than the others, but no worries :)\nKeep up the GREAT work!\n. 0.9.8.19 ?\n``` cmd\nC:\\Windows\\System32>chocolatey version\nYou have the latest version of chocolatey (0.9.8.19) based on: '-Source \"http://chocolatey.org/api/v2/\" -Source \"https://go.microsoft.com/fwlink/?LinkID=230477\" ' (if value is empty, using sources in nuget.config file).\nname          : chocolatey\nfound         : 0.9.8.19\nlatestCompare : 00000000.00000009.00000008.00000019\nlatest        : 0.9.8.19\nfoundCompare  : 00000000.00000009.00000008.00000019\n``\n. I'm a little confused, ischocolatey list -installedsupposed to work with version 0.9.8.19 ?  Is this functionality preset in another command?\n. Thanks @rismoney .  I was able to usecver all -localonly` and it did provide me with the info I wanted (albeit a bit strangely formatted) :\n``` cmd\nC:\\Windows\\System32>cver all -localonly\nYou have the latest version of Compass (0.12.2) based on: '-Source \"http://chocolatey.org/api/v2/\" -Source \"https://go.microsoft.com/fwlink/?LinkID=230477\" ' (if value is empty, using sources in nuget.config file).\nYou have the latest version of git (1.7.11) based on: '-Source \"http://chocolatey.org/api/v2/\" -Source \"https://go.microsoft.com/fwlink/?LinkID=230477\" ' (if value is empty, using sources in nuget.config file).\nYou have the latest version of git.install (1.7.11) based on: '-Source \"http://chocolatey.org/api/v2/\" -Source \"https://go.microsoft.com/fwlink/?LinkID=230477\" ' (if value is empty, using sources in nuget.config file).\nYou have the latest version of libjpeg-turbo (1.2.1) based on: '-Source \"http://chocolatey.org/api/v2/\" -Source \"https://go.microsoft.com/fwlink/?LinkID=230477\" ' (if value is empty, using sources in nuget.config file).\nYou have the latest version of nodejs.install (0.8.11) based on: '-Source \"http://chocolatey.org/api/v2/\" -Source \"https://go.microsoft.com/fwlink/?LinkID=230477\" ' (if value is empty, using sources in nuget.config file).\nYou have the latest version of OptiPNG (0.7.1.20120913) based on: '-Source \"http://chocolatey.org/api/v2/\" -Source \"https://go.microsoft.com/fwlink/?LinkID=230477\" ' (if value is empty, using sources in nuget.config file).\nThe most recent version of PhantomJS available from '-Source \"http://chocolatey.org/api/v2/\" -Source \"https://go.microsoft.com/fwlink/?LinkID=230477\"' (if value is empty, using sources in nuget.config file) is 1.7.0. On your machine you have 1.6.1.20120913 installed.\nThe most recent version of ruby available from '-Source \"http://chocolatey.org/api/v2/\" -Source \"https://go.microsoft.com/fwlink/?LinkID=230477\" ' (if value is empty, using sources in nuget.config file) is 1.9.3.12500. On your machine you have 1.8.7.35800 installed.\nYou have the latest version of Yeoman (0.9.0) based on: '-Source \"http://chocolatey.org/api/v2/\" -Source \"https://go.microsoft.com/fwlink/?LinkID=230477\" ' (if value is empty, using sources in nuget.config file).\nname          : Yeoman\nfound         : 0.9.0\nlatestCompare : 00000000.00000009.00000000\nlatest        : 0.9.0\nfoundCompare  : 00000000.00000009.00000000\n```\nI'm so excited to see this project under development and really want to thank all of the contributors.  Perhaps I can offer a little help on the documentation side.  I'd really like to see more about all commands chocolatey has available via chocolatey /? or chocolatey help .\nRegarding my formatting comment, why does the output here tell me that this is provided by -Source \"https://go.microsoft.com/fwlink/?LinkID=230477\" for each package?  If this is the default, perhaps offer the link to https://nuget.org/api/v2/ at the top of the cver output and only list sources that differ from the default where necessary?  I'm also a little unclear on why the Yeoman version stats are a bit different than the others, but no worries :)\nKeep up the GREAT work!\n. 0.9.8.19 ?\n``` cmd\nC:\\Windows\\System32>chocolatey version\nYou have the latest version of chocolatey (0.9.8.19) based on: '-Source \"http://chocolatey.org/api/v2/\" -Source \"https://go.microsoft.com/fwlink/?LinkID=230477\" ' (if value is empty, using sources in nuget.config file).\nname          : chocolatey\nfound         : 0.9.8.19\nlatestCompare : 00000000.00000009.00000008.00000019\nlatest        : 0.9.8.19\nfoundCompare  : 00000000.00000009.00000008.00000019\n```\n. ",
    "mlt": "So what do I do to install same packages on another machine? chocolatey version all -lo is nice but it requires some awking to feed output to cinst. What would be the proper way?\n. @rismoney And how do I generate packages.config? I feel like this use case is for admins who want to install it on numerous machines.\nI'm not admin and my use case is slightly different. I have just 1 another machine. So it does not matter if I write packages.config myself or just name all that stuff as cinst argument. My point is that it would be nice for a regular user to easily get similar installation on yet another machine.\nI was looking for something like\n``` awk\n!/bin/awk -f\nBEGIN {\n  print \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\"\n  print \"\"\n}\nNR > 3 {\n  if ($1 != \"\") {\n    print \"  \"\n  }\n}\nEND {\n  print \"\"\n}\n```\nThat can be called from msys like chocolatey version all -lo | ./version_all-packages.awk > packages.config. Unfortunately I don't know PowerShell to make it appropriate for Chocolatey.\n. @Nilzor Thanks! However what I meant by appropriate was to introduce a command to C:\\Chocolatey\\chocolateyinstall\\chocolatey.ps1 that would set $localonly = $true and format $versionsObj returned from Chocolatey-Version 'all' instead of parsing stdout.\nSomething like this.\n Phew... too much work for a single time operation ;-)\n. I noticed that portable version of SumatraPDF requires double quotation (actually triple as typed) to open files with spaces in path. Is it shimgen at fault? The real SumatraPDF.exe opens everything just fine with ordinary quotation for files with spaces.\n. I feel like it removes one quotation level. For instance, I'd call real SumatraPDF \"some file.pdf\" however I have to SumatraPDF \"\"\"some file.pdf\"\"\" with shim when running, e.g., from Far file manager in either case. It should be similar to regular cmd.exe . I guess \"\" is treated as a single quote when passed down. I noticed that something is not right when pdf association quit working in my Emacs Org mode setup with Chocolatey version of Sumatra.\n. Nope, didn't fix it, if I tested it correctly. I did cup -pre chocolatey. It looks like updated things but gave some (partial?) warning that I ignored.\n```\nC:\\Chocolatey>dir chocolateyinstall\\tools\\shimgen.exe\n Volume in drive C is Win7\n Volume Serial Number is 986F-B84D\nDirectory of C:\\Chocolatey\\chocolateyinstall\\tools\n04/03/2014  11:41 AM            42,496 shimgen.exe\n               1 File(s)         42,496 bytes\n               0 Dir(s)  787,509,374,976 bytes free\nC:\\Chocolatey>where sumatrapdf\nC:\\Chocolatey\\bin\\SumatraPDF.exe\nC:\\Chocolatey>SumatraPDF.exe \"C:\\Users\\user\\Documents\\work\\Side Inlets\\slides\\detection\\detection.pdf\"\n```\nAnd it failed by opening 2 SumatraPDF windows one claiming it failed to open C:\\Chocolatey\\lib\\sumatrapdf.commandline.2.4\\tools\\Inlets\\slides\\detection\\detection.pdf and another one for C:\\Users\\user\\Documents\\work\\Side\n. I think in 99% cases NTFS is used that supports links or whatever it is called on Windows. Shall we use that by default and let OS and FS handle all instead of a separate EXE and just fall back to shimgen if no link functionality is available?\nMikhail\n\nOn Apr 5, 2014, at 10:35 AM, Marcel Klehr notifications@github.com wrote:\nCould you release this as open source? I could really use something like this.\n\u2014\nReply to this email directly or view it on GitHub.\n. Oops didn't think of that a I used mostly with non-executables. Can we make it as an option if there is no such dependencies? E.g. create SumatraPDF.exe.gui containing \"ln\" would create a symlink if FS supports it, if the file is empty, then shimgen.\n\nMikhail\n\nOn Apr 5, 2014, at 1:02 PM, TomOne notifications@github.com wrote:\nShall we use that by default and let OS and FS handle all instead of a separate EXE and just fall back to shimgen if no link functionality is available?\nDo you mean symbolic links? The support for symbolic links on Windows is very naive. If you make for example a symbolic link to an EXE and that EXE requires an external library, the symbolic link won\u2019t resolve the relative path to it. This makes symbolic links on Windows unusable and useless in many cases, because many programs require external libraries. Unix-like systems don\u2019t have this limitation. I think this is also the reason because shims are preferred here.\n\u2014\nReply to this email directly or view it on GitHub.\n. Indeed, symlink creation requires privileges. However I just tried and a hardlink for SumatraPDF was created just fine with an unprivileged user and it works okay as it has no bundled DLLs/resources. I used Far File Manager 3 to create one with ALT+F6. I'm not sure what is an API call for that.\n. I mean to give an option for packagers and keep the rest as is. For example, if we know that SumatraPDF.exe does not need anything else at all, I'd prefer to simply hardlink it if it is cumbersome to fix quotes unfolding. Placing hardlink into SumatraPDF.exe.gui and letting Chocolatey to respect that seems like a reasonable solutionworkaround.\n. Does --gui for shimgen imply no waiting only? I feel like console window still appears. This is somewhat annoying when used often, for example with SumatraPDF and -inverse-search when used with emacsclientw. A window of the latter blinks when jumping from viewer to source.\nWhile hardlinking \"solves\" the issue, I noticed that apparently SumatraPDF in such case creates sumatrapdfcache folder withint C:\\Chocolatey\\bin\\. I suspect it used to create it in its own folder formerly. I wonder if that might be an issue with multiuser setup when it may lack permission to write.\n. So what do I do to install same packages on another machine? chocolatey version all -lo is nice but it requires some awking to feed output to cinst. What would be the proper way?\n. @rismoney And how do I generate packages.config? I feel like this use case is for admins who want to install it on numerous machines.\n\nI'm not admin and my use case is slightly different. I have just 1 another machine. So it does not matter if I write packages.config myself or just name all that stuff as cinst argument. My point is that it would be nice for a regular user to easily get similar installation on yet another machine.\nI was looking for something like\n``` awk\n!/bin/awk -f\nBEGIN {\n  print \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\"\n  print \"\"\n}\nNR > 3 {\n  if ($1 != \"\") {\n    print \"  \"\n  }\n}\nEND {\n  print \"\"\n}\n```\nThat can be called from msys like chocolatey version all -lo | ./version_all-packages.awk > packages.config. Unfortunately I don't know PowerShell to make it appropriate for Chocolatey.\n. @Nilzor Thanks! However what I meant by appropriate was to introduce a command to C:\\Chocolatey\\chocolateyinstall\\chocolatey.ps1 that would set $localonly = $true and format $versionsObj returned from Chocolatey-Version 'all' instead of parsing stdout.\nSomething like this.\n Phew... too much work for a single time operation ;-)\n. I noticed that portable version of SumatraPDF requires double quotation (actually triple as typed) to open files with spaces in path. Is it shimgen at fault? The real SumatraPDF.exe opens everything just fine with ordinary quotation for files with spaces.\n. I feel like it removes one quotation level. For instance, I'd call real SumatraPDF \"some file.pdf\" however I have to SumatraPDF \"\"\"some file.pdf\"\"\" with shim when running, e.g., from Far file manager in either case. It should be similar to regular cmd.exe . I guess \"\" is treated as a single quote when passed down. I noticed that something is not right when pdf association quit working in my Emacs Org mode setup with Chocolatey version of Sumatra.\n. Nope, didn't fix it, if I tested it correctly. I did cup -pre chocolatey. It looks like updated things but gave some (partial?) warning that I ignored.\n```\nC:\\Chocolatey>dir chocolateyinstall\\tools\\shimgen.exe\n Volume in drive C is Win7\n Volume Serial Number is 986F-B84D\nDirectory of C:\\Chocolatey\\chocolateyinstall\\tools\n04/03/2014  11:41 AM            42,496 shimgen.exe\n               1 File(s)         42,496 bytes\n               0 Dir(s)  787,509,374,976 bytes free\nC:\\Chocolatey>where sumatrapdf\nC:\\Chocolatey\\bin\\SumatraPDF.exe\nC:\\Chocolatey>SumatraPDF.exe \"C:\\Users\\user\\Documents\\work\\Side Inlets\\slides\\detection\\detection.pdf\"\n```\nAnd it failed by opening 2 SumatraPDF windows one claiming it failed to open C:\\Chocolatey\\lib\\sumatrapdf.commandline.2.4\\tools\\Inlets\\slides\\detection\\detection.pdf and another one for C:\\Users\\user\\Documents\\work\\Side\n. I think in 99% cases NTFS is used that supports links or whatever it is called on Windows. Shall we use that by default and let OS and FS handle all instead of a separate EXE and just fall back to shimgen if no link functionality is available?\nMikhail\n\nOn Apr 5, 2014, at 10:35 AM, Marcel Klehr notifications@github.com wrote:\nCould you release this as open source? I could really use something like this.\n\u2014\nReply to this email directly or view it on GitHub.\n. Oops didn't think of that a I used mostly with non-executables. Can we make it as an option if there is no such dependencies? E.g. create SumatraPDF.exe.gui containing \"ln\" would create a symlink if FS supports it, if the file is empty, then shimgen.\n\nMikhail\n\nOn Apr 5, 2014, at 1:02 PM, TomOne notifications@github.com wrote:\nShall we use that by default and let OS and FS handle all instead of a separate EXE and just fall back to shimgen if no link functionality is available?\nDo you mean symbolic links? The support for symbolic links on Windows is very naive. If you make for example a symbolic link to an EXE and that EXE requires an external library, the symbolic link won\u2019t resolve the relative path to it. This makes symbolic links on Windows unusable and useless in many cases, because many programs require external libraries. Unix-like systems don\u2019t have this limitation. I think this is also the reason because shims are preferred here.\n\u2014\nReply to this email directly or view it on GitHub.\n. Indeed, symlink creation requires privileges. However I just tried and a hardlink for SumatraPDF was created just fine with an unprivileged user and it works okay as it has no bundled DLLs/resources. I used Far File Manager 3 to create one with ALT+F6. I'm not sure what is an API call for that.\n. I mean to give an option for packagers and keep the rest as is. For example, if we know that SumatraPDF.exe does not need anything else at all, I'd prefer to simply hardlink it if it is cumbersome to fix quotes unfolding. Placing hardlink into SumatraPDF.exe.gui and letting Chocolatey to respect that seems like a reasonable solutionworkaround.\n. Does --gui for shimgen imply no waiting only? I feel like console window still appears. This is somewhat annoying when used often, for example with SumatraPDF and -inverse-search when used with emacsclientw. A window of the latter blinks when jumping from viewer to source.\nWhile hardlinking \"solves\" the issue, I noticed that apparently SumatraPDF in such case creates sumatrapdfcache folder withint C:\\Chocolatey\\bin\\. I suspect it used to create it in its own folder formerly. I wonder if that might be an issue with multiuser setup when it may lack permission to write.\n. \n",
    "Nilzor": "@mlt This should do it:\n$xml = \"<?xml version=`\"1.0`\" encoding=`\"utf-8`\"?>`n\"\n$xml += \"<packages>`n\"\nforeach ($program in $input) {\n    $name, $version, $shouldBeEmpty = $program.Split(\" \")\n    if (!$shouldBeEmpty) {\n        $xml += (\"  <package id=`\"{0}`\" version=`\"{1}`\"/>`n\" -f $name,$version)\n    }\n}\n$xml += \"</packages>`n\"\necho $xml\nSave it as for instance chocoProgramListToXml.ps1 and run it with choco list -localonly | ./chocoProgramListToXml.ps1 > packages.config\nGist link\n. Should this function not be advertized better? Had to dig really deep to find the helper Get-BinRoot as it is neither documented in https://github.com/chocolatey/chocolatey/wiki/CreatePackages nor https://github.com/chocolatey/chocolatey/wiki/HelpersReference . \n. Great, @Redsandro . My concern stemmed from the fact that I see many popular packages do not heed the %chocolatey_bin_root% env variable, which I guess the wiki is partly to blame. \nI have myself made a suggestion for update of the Creating Packages wiki page, emphasizing the Get-BinRoot helper instead of the environment variable:\nhttps://github.com/Nilzor/chocolatey-wiki/commit/33b63a8838d75a94cf03e9a2d03fd100e46807cd\n. Yea I just did a clone of the wiki because I wasn't aware I had edit permission :) ...kinda new to this github thingy\n. @mlt This should do it:\n$xml = \"<?xml version=`\"1.0`\" encoding=`\"utf-8`\"?>`n\"\n$xml += \"<packages>`n\"\nforeach ($program in $input) {\n    $name, $version, $shouldBeEmpty = $program.Split(\" \")\n    if (!$shouldBeEmpty) {\n        $xml += (\"  <package id=`\"{0}`\" version=`\"{1}`\"/>`n\" -f $name,$version)\n    }\n}\n$xml += \"</packages>`n\"\necho $xml\nSave it as for instance chocoProgramListToXml.ps1 and run it with choco list -localonly | ./chocoProgramListToXml.ps1 > packages.config\nGist link\n. Should this function not be advertized better? Had to dig really deep to find the helper Get-BinRoot as it is neither documented in https://github.com/chocolatey/chocolatey/wiki/CreatePackages nor https://github.com/chocolatey/chocolatey/wiki/HelpersReference . \n. Great, @Redsandro . My concern stemmed from the fact that I see many popular packages do not heed the %chocolatey_bin_root% env variable, which I guess the wiki is partly to blame. \nI have myself made a suggestion for update of the Creating Packages wiki page, emphasizing the Get-BinRoot helper instead of the environment variable:\nhttps://github.com/Nilzor/chocolatey-wiki/commit/33b63a8838d75a94cf03e9a2d03fd100e46807cd\n. Yea I just did a clone of the wiki because I wasn't aware I had edit permission :) ...kinda new to this github thingy\n. ",
    "pcgeek86": "I just really don't enjoy seeing tons of crap on the root of my operating system partition. The Program Files folder is intended for \"program files,\" so that's where any software installations should go. Nearly every other software package out there adheres to this, so why wouldn't Chocolatey? \nExamples of the above:\nNotepad++\nMicrosoft Office\nAndroid SDK\n7-Zip\nWireshark\nAutoHotkey\netc.\netc.\netc.\nWhat I meant by \"warning\" is that there is not any advance warning about the installation location, and for people like me who do not want the root of their OS disk cluttered, that is rather important.\nIt may not be true in this case, but I would surmise that one reason people (in general) shy away from using Program Files is because it has a space in it. This is 2012, and if software developers are incapable of dealing with spaces and other characters properly, then they may be better off not developing software.\nI apologize for missing the variable that allows you to change the path. Is there documentation for removing Chocolatey? Do you simply remove the folder and revert the amendment to the PATH environment variable?\nYou have a valid point regarding software under Program Files being removable via the registry, however I also do not think that, that's valid reasoning for putting it in $env:SystemRoot. Installing software per-user is also a concept that I really do not appreciate in general, as it causes an absolutely massive headache for large-scale enterprise systems engineers (of which I used to be / still kind of am one).\nps. I don't use Ruby, Python, PHP, CygWin, PostgreSQL, et al. However, if I did, I would hold them to the same standards as well.\n. I just really don't enjoy seeing tons of crap on the root of my operating system partition. The Program Files folder is intended for \"program files,\" so that's where any software installations should go. Nearly every other software package out there adheres to this, so why wouldn't Chocolatey? \nExamples of the above:\nNotepad++\nMicrosoft Office\nAndroid SDK\n7-Zip\nWireshark\nAutoHotkey\netc.\netc.\netc.\nWhat I meant by \"warning\" is that there is not any advance warning about the installation location, and for people like me who do not want the root of their OS disk cluttered, that is rather important.\nIt may not be true in this case, but I would surmise that one reason people (in general) shy away from using Program Files is because it has a space in it. This is 2012, and if software developers are incapable of dealing with spaces and other characters properly, then they may be better off not developing software.\nI apologize for missing the variable that allows you to change the path. Is there documentation for removing Chocolatey? Do you simply remove the folder and revert the amendment to the PATH environment variable?\nYou have a valid point regarding software under Program Files being removable via the registry, however I also do not think that, that's valid reasoning for putting it in $env:SystemRoot. Installing software per-user is also a concept that I really do not appreciate in general, as it causes an absolutely massive headache for large-scale enterprise systems engineers (of which I used to be / still kind of am one).\nps. I don't use Ruby, Python, PHP, CygWin, PostgreSQL, et al. However, if I did, I would hold them to the same standards as well.\n. ",
    "lilith": "Is every chocolatey application supposed to install in C:\\ as well? Or underneath C:\\Chocolately? I'm seeing everything appear in C:\\ directly under Win8.1.\n. Just ruby -> C:\\ruby200 and PhantomJs -> C:\\PhantomJS\n. You mean this package? https://chocolatey.org/packages/binroot\n. Is every chocolatey application supposed to install in C:\\ as well? Or underneath C:\\Chocolately? I'm seeing everything appear in C:\\ directly under Win8.1.\n. Just ruby -> C:\\ruby200 and PhantomJs -> C:\\PhantomJS\n. You mean this package? https://chocolatey.org/packages/binroot\n. ",
    "noomorph": "Ok\n2012/9/16 Rob Reynolds notifications@github.com\n\nSince I pulled in the other it's reasonable that this can be closed.\nThanks for the contribution though!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/127#issuecomment-8593038.\n. Sorry, is there any chocolatey global configuration file? I can store credentials there at least. \n. That's cool. And I can see it shows even the progress?\nIf so, that's really must-have.\n. Ok\n\n2012/9/16 Rob Reynolds notifications@github.com\n\nSince I pulled in the other it's reasonable that this can be closed.\nThanks for the contribution though!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/127#issuecomment-8593038.\n. Sorry, is there any chocolatey global configuration file? I can store credentials there at least. \n. That's cool. And I can see it shows even the progress?\nIf so, that's really must-have.\n. \n",
    "StuartWhelan": "In order to use our local nuget repository (hosted in artifactory) we need to use basic authentication.\nnuget.exe supports -username and -password when running sources add, but this is not exposed the the chocolately wrapper of the sources command.\nWould passing through the -username and -password functionality to the nuget sources add solve this problem?\nI solved in myself by calling the nuget sources add directly, then copying the resulting config entries.\n. In order to use our local nuget repository (hosted in artifactory) we need to use basic authentication.\nnuget.exe supports -username and -password when running sources add, but this is not exposed the the chocolately wrapper of the sources command.\nWould passing through the -username and -password functionality to the nuget sources add solve this problem?\nI solved in myself by calling the nuget sources add directly, then copying the resulting config entries.\n. ",
    "skyguy94": "My understanding of the problem is that there isn't a way to do:\nchoco inst MyPackageThatNeedsAuthentication\nbecause Chocolatey won't store credentials to pass to NuGet. Since you can do credentials with NuGet, this breaks expected behavior.\n\nOne of Chocolatey's tenants is simplicity. Note that simplicity is not the opposite of complex, only the opposite of complicated. I don't want a complicated experience for users. So whatever answer we come up with, it should not impact the user experience in a detrimental way.\n\nI'm not certain I get the argument here. If my summary is correct, then Chocolatey complicates behavior by breaking a NuGet feature. \nThere was some mention of using NuGet to set the credentials, and that seems to be a successful workaround, but that requires adding a Source to the users global nuget file with the appropriate credentials so that they happen to get picked up when NuGet is invoked by chocolatey.\nIf storing the secure string is really an issue, adding an \"interactive\" switch to choco, or the global settings, as well as detecting a 401 Error with the BitsTransfer or WebGit, rather than letting the interactive error message show and fail the script,  would go a long way towards simplifying the issue.\n. I get that the issue was opened two years ago, but it appears to be active/unresolved. \nFrom your responses, it sounds like you have an unreleased version of Chocolatey written in C# that will handle this issue.\nI thought it was 'Chocolatey NuGet'. The inference between the two tools seemed appropriate, especially since the workaround says to use NuGet directly.\n. Awesome. I look forward to getting my hands on the new bits. Thanks for the response and your hard work.\n. My understanding of the problem is that there isn't a way to do:\nchoco inst MyPackageThatNeedsAuthentication\nbecause Chocolatey won't store credentials to pass to NuGet. Since you can do credentials with NuGet, this breaks expected behavior.\n\nOne of Chocolatey's tenants is simplicity. Note that simplicity is not the opposite of complex, only the opposite of complicated. I don't want a complicated experience for users. So whatever answer we come up with, it should not impact the user experience in a detrimental way.\n\nI'm not certain I get the argument here. If my summary is correct, then Chocolatey complicates behavior by breaking a NuGet feature. \nThere was some mention of using NuGet to set the credentials, and that seems to be a successful workaround, but that requires adding a Source to the users global nuget file with the appropriate credentials so that they happen to get picked up when NuGet is invoked by chocolatey.\nIf storing the secure string is really an issue, adding an \"interactive\" switch to choco, or the global settings, as well as detecting a 401 Error with the BitsTransfer or WebGit, rather than letting the interactive error message show and fail the script,  would go a long way towards simplifying the issue.\n. I get that the issue was opened two years ago, but it appears to be active/unresolved. \nFrom your responses, it sounds like you have an unreleased version of Chocolatey written in C# that will handle this issue.\nI thought it was 'Chocolatey NuGet'. The inference between the two tools seemed appropriate, especially since the workaround says to use NuGet directly.\n. Awesome. I look forward to getting my hands on the new bits. Thanks for the response and your hard work.\n. ",
    "scatterfingers": "Ah, that would be the problem. I didn't realise that would make a difference and to be honest I had a powershell instance open and didn't even give it as second thought.\nThanks for the help!\n. Ah, that would be the problem. I didn't realise that would make a difference and to be honest I had a powershell instance open and didn't even give it as second thought.\nThanks for the help!\n. ",
    "thejoecarroll": "@ferventcoder , may I suggest you update both the Wiki and the homepage to make it explicit that the traditional DOS-style CLI is required and that the Powershell CLI will not work. This is not at all obvious. Maybe its because I'm more a nix guy than a Windows guy, but \"command line\" is too ambiguous in this regard and I made exactly the same mistake as @scatterfingers \nJust discovered Chocolatey and I'm quite excited\u2014thanks for creating this!\n. @ferventcoder , may I suggest you update both the Wiki and the homepage to make it explicit that the traditional DOS-style CLI is required and that the Powershell CLI will not work. This is not at all obvious. Maybe its because I'm more a nix guy than a Windows guy, but \"command line\" is too ambiguous in this regard and I made exactly the same mistake as @scatterfingers \nJust discovered Chocolatey and I'm quite excited\u2014thanks for creating this!\n. ",
    "macler": "cinst ruby -Version 1.9.2.29002\ncinst ruby.devkit -ignoredependencies (would be great option) because now dependencies install Ruby 1.9.3-p125\nNow I've installed Ruby 1.9.2-p290 and Ruby 1.9.3-p125 :-(\nI need only Ruby 1.9.2-p290. Switch \"-ignoredependencies\" can help a lot.\n. cinst ruby -Version 1.9.2.29002\ncinst ruby.devkit -ignoredependencies (would be great option) because now dependencies install Ruby 1.9.3-p125\nNow I've installed Ruby 1.9.2-p290 and Ruby 1.9.3-p125 :-(\nI need only Ruby 1.9.2-p290. Switch \"-ignoredependencies\" can help a lot.\n. ",
    "jamescrowley": "Is this available at the moment? We'd use it to install a different version of a dependency than the package author actually specified\n. Is this available at the moment? We'd use it to install a different version of a dependency than the package author actually specified\n. ",
    "derekmurawsky": "I, too, would like to see the ability to do package-specific arguments or overrides. I'm building a package now that installs a SQL maintenance script and would love to provide variables for configuration. For example, which instance the script should install to. \n. I, too, would like to see the ability to do package-specific arguments or overrides. I'm building a package now that installs a SQL maintenance script and would love to provide variables for configuration. For example, which instance the script should install to. \n. ",
    "alyssenko-ssi": "So did this '$env:chocolateyInstallArguments' functionality ever get implemented? I need to be able to modify the $zabbixConf variable inside the chocolateyInstall.ps1 script for zabbix-agent install- not seeing how this is currently possible? \n. So did this '$env:chocolateyInstallArguments' functionality ever get implemented? I need to be able to modify the $zabbixConf variable inside the chocolateyInstall.ps1 script for zabbix-agent install- not seeing how this is currently possible? \n. ",
    "ForNeVeR": "Hey, guys. What if I'm running chocolatey from the existing PowerShell session? It seems that PowerShell starts the new cmd process for the chocolatey.bat invocation, and your solution will instead refresh the environment only for the freshly started cmd and not the caller shell.\nWhat can I do to refresh the caller PowerShell session environment? Maybe there should be an alternative C:\\Chocolatey\\bin\\chocolatey.ps1 for such cases? What you think?\nEw, and then we have to reimplement the whole RefreshEnv.cmd with PowerShell. I still think it can be modified to construct the %TEMP%\\_env.ps1 file with PowerShell syntax instead of %TEMP%\\_env.bat with cmd syntax.\n. Thank you for response, that's a good news.\n. Hey, guys. What if I'm running chocolatey from the existing PowerShell session? It seems that PowerShell starts the new cmd process for the chocolatey.bat invocation, and your solution will instead refresh the environment only for the freshly started cmd and not the caller shell.\nWhat can I do to refresh the caller PowerShell session environment? Maybe there should be an alternative C:\\Chocolatey\\bin\\chocolatey.ps1 for such cases? What you think?\nEw, and then we have to reimplement the whole RefreshEnv.cmd with PowerShell. I still think it can be modified to construct the %TEMP%\\_env.ps1 file with PowerShell syntax instead of %TEMP%\\_env.bat with cmd syntax.\n. Thank you for response, that's a good news.\n. ",
    "abombss": "That was a good catch.  In my testing I realize I always had a var set in which case the default value was always falling through.  The idea I am thinking of is that I only want to set the variable if its the Default or if the User overrides it via the \"Process\" scope environment variable.  Otherwise the variable came from System or User scope in which case an explicit User scoped environment variable doesn't need to be written because something already exists.\nDoes that make sense?  I updated the pull request to fix the issue, let me know if there is anything else you would like me to do.\n. I am all for passing parameters, is that possible, seems like a big change?\nThere still would need a fix for explicitly checking for a user scoped\nenvironment var.\nOn Aug 9, 2012 8:42 PM, \"Rich Siegel\" notifications@github.com wrote:\n\ni'd want to use exclusively system variables. so what do i need to do\nexactly?\nis there a problem with passing params to InstallChocolatey.ps1 that this\ncan't be done within it? isn't that what's in the bit.ly url that gets\ninvoked?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/135#issuecomment-7632159.\n. I actually just run my own bootstrap first that configures\nchocolateyinstall and bin_root, then download and install chocolatey. Our\nrequirements are unique such that everything has to come from the inside.\nNo external packages are allowed. The only hangup I had was chocolatey\nlooking explicitly to user var instead of just $env:. This should fix that\nfor now.\n\nThe installer could use some work. The biggest issue is the lack of named\nparameter support for invoking commands, only positional args that I am\naware of with ps.\nMaybe a dictionary hash or reference to a simple property file as the only\ninstaller arg?\nOn Aug 14, 2012 9:06 AM, \"Rich Siegel\" notifications@github.com wrote:\n\nI was shooting for an optional switch if specified, while running under\nadmin that could do it for me :) I have been installing chocolatey on 400\nservers and I have seen some bizzare issues with environment path\nmodification and powershell putting in 2 semi-colons or none.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/135#issuecomment-7726761.\n. Can I just ask why, whats wrong with powershell?  Anything you can do in csx you can do in powershell.\n. @rismoney yes, and that ugly code is the same whether in powershell or scriptcs\n\n@ferventcoder by mono I assume you mean *nix or non-windows, and all those systems already have 101 other package managers. Chocolatey only makes sense on windows imo.\nNot trying to troll, just trying to understand the motivation, also trying to understand how scriptcs will be accepted.  I would hate to see the default turn into scriptcs when its still so immature.  It takes a lot just to get chocolatey with powershell accepted in an enterprise, I would hate to see more road blocks.\n. In powershell lingo that would be supporting the -WhatIf option all the way\nthrough the tool chain. Its one of my favorite features of powershell.  The\nnice thing is that once its set in a cmdlet all downstream cmdlets should\nauto-detect it, as long as the cmdlet actually supports it and properly\nhandles it.  So things like Output-File, Copy-Item, etc automatically\nsupport it out of the box, it would just be ensuring that all cmdlets in\nchoco actually support and handle the option. I believe this would also\nmean turning all functions into advanced functions and using the\nCmdletBinding(SupportsShouldProcess=true) attribute.\nAdam\nOn Mon, Apr 8, 2013 at 3:46 PM, Paul Stack notifications@github.com wrote:\n\nHi\nFrom my use of puppet, I have become very fond of the --noop command. This\nbasically allows me to check a configuration against a server and get the\nresult of what puppet would have done without actually doing it. This\nbasically means its a simulation of the event\nI'd love there to be a cinst notepadplusplus --noop option to let me know\nwhat would happen if I tried to do an install or an update without actually\napplying it\nPAul\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/263\n.\n. When we originally started using nuget to publish our own packages we tried\nto align the package version and content version numbers but quickly found\nthe pain around this.  Based on experience I think its best to keep package\nversion numbers independent or at best just try to align the \"Major\"\nversion numbers.  SemVer is a good standard for package versions to easily\nhandle compatibility of dependencies and upgrades, I don't think its\nmistake that nuget aligned to this scheme.\n\nThe missing link is nuget's inability to have custom metadata, while we\ncould argue adding a \"Content Version\" field could help in these\nsituations, the better solution would be extensible metadata so Chocolatey\ncould handle this issue independent of the nuget team.\nAdam\nOn Fri, Apr 11, 2014 at 5:22 PM, TomOne notifications@github.com wrote:\n\n@ferventcoder https://github.com/ferventcoder: Yes, but apart from\ndistorting the original version information, the approach of modifying the\nalready existent fourth segment doesn't solve the problem of an\naccidentally misspelled first, second or third segment. I described that\nproblem already in my previous comment (in the third list item). It\nhappened to the Dropbox package:\nhttp://chocolatey.org/packages/dropbox/9.20. Fortunately there were only\n8 downloads of the misspelled version.\nIt's not perfect and yes we should look at enhancing stuff like that.\nWhere do you see this in terms of priority?\nOf course Chocolatey also works with the current versioning scheme, but to\nbecome a robust and well established package management system, this is\ndefinitely an important issue to consider. I don't want to blame the NuGet\ndevelopers, but If I would build a package management system, I would never\napply such a restricted and inflexible versioning policy. SemVer is nice\nfor applications, but not appropriate for package versioning.\n\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/330#issuecomment-40259179\n.\n. That was a good catch.  In my testing I realize I always had a var set in which case the default value was always falling through.  The idea I am thinking of is that I only want to set the variable if its the Default or if the User overrides it via the \"Process\" scope environment variable.  Otherwise the variable came from System or User scope in which case an explicit User scoped environment variable doesn't need to be written because something already exists.\n\nDoes that make sense?  I updated the pull request to fix the issue, let me know if there is anything else you would like me to do.\n. I am all for passing parameters, is that possible, seems like a big change?\nThere still would need a fix for explicitly checking for a user scoped\nenvironment var.\nOn Aug 9, 2012 8:42 PM, \"Rich Siegel\" notifications@github.com wrote:\n\ni'd want to use exclusively system variables. so what do i need to do\nexactly?\nis there a problem with passing params to InstallChocolatey.ps1 that this\ncan't be done within it? isn't that what's in the bit.ly url that gets\ninvoked?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/135#issuecomment-7632159.\n. I actually just run my own bootstrap first that configures\nchocolateyinstall and bin_root, then download and install chocolatey. Our\nrequirements are unique such that everything has to come from the inside.\nNo external packages are allowed. The only hangup I had was chocolatey\nlooking explicitly to user var instead of just $env:. This should fix that\nfor now.\n\nThe installer could use some work. The biggest issue is the lack of named\nparameter support for invoking commands, only positional args that I am\naware of with ps.\nMaybe a dictionary hash or reference to a simple property file as the only\ninstaller arg?\nOn Aug 14, 2012 9:06 AM, \"Rich Siegel\" notifications@github.com wrote:\n\nI was shooting for an optional switch if specified, while running under\nadmin that could do it for me :) I have been installing chocolatey on 400\nservers and I have seen some bizzare issues with environment path\nmodification and powershell putting in 2 semi-colons or none.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/135#issuecomment-7726761.\n. Can I just ask why, whats wrong with powershell?  Anything you can do in csx you can do in powershell.\n. @rismoney yes, and that ugly code is the same whether in powershell or scriptcs\n\n@ferventcoder by mono I assume you mean *nix or non-windows, and all those systems already have 101 other package managers. Chocolatey only makes sense on windows imo.\nNot trying to troll, just trying to understand the motivation, also trying to understand how scriptcs will be accepted.  I would hate to see the default turn into scriptcs when its still so immature.  It takes a lot just to get chocolatey with powershell accepted in an enterprise, I would hate to see more road blocks.\n. In powershell lingo that would be supporting the -WhatIf option all the way\nthrough the tool chain. Its one of my favorite features of powershell.  The\nnice thing is that once its set in a cmdlet all downstream cmdlets should\nauto-detect it, as long as the cmdlet actually supports it and properly\nhandles it.  So things like Output-File, Copy-Item, etc automatically\nsupport it out of the box, it would just be ensuring that all cmdlets in\nchoco actually support and handle the option. I believe this would also\nmean turning all functions into advanced functions and using the\nCmdletBinding(SupportsShouldProcess=true) attribute.\nAdam\nOn Mon, Apr 8, 2013 at 3:46 PM, Paul Stack notifications@github.com wrote:\n\nHi\nFrom my use of puppet, I have become very fond of the --noop command. This\nbasically allows me to check a configuration against a server and get the\nresult of what puppet would have done without actually doing it. This\nbasically means its a simulation of the event\nI'd love there to be a cinst notepadplusplus --noop option to let me know\nwhat would happen if I tried to do an install or an update without actually\napplying it\nPAul\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/263\n.\n. When we originally started using nuget to publish our own packages we tried\nto align the package version and content version numbers but quickly found\nthe pain around this.  Based on experience I think its best to keep package\nversion numbers independent or at best just try to align the \"Major\"\nversion numbers.  SemVer is a good standard for package versions to easily\nhandle compatibility of dependencies and upgrades, I don't think its\nmistake that nuget aligned to this scheme.\n\nThe missing link is nuget's inability to have custom metadata, while we\ncould argue adding a \"Content Version\" field could help in these\nsituations, the better solution would be extensible metadata so Chocolatey\ncould handle this issue independent of the nuget team.\nAdam\nOn Fri, Apr 11, 2014 at 5:22 PM, TomOne notifications@github.com wrote:\n\n@ferventcoder https://github.com/ferventcoder: Yes, but apart from\ndistorting the original version information, the approach of modifying the\nalready existent fourth segment doesn't solve the problem of an\naccidentally misspelled first, second or third segment. I described that\nproblem already in my previous comment (in the third list item). It\nhappened to the Dropbox package:\nhttp://chocolatey.org/packages/dropbox/9.20. Fortunately there were only\n8 downloads of the misspelled version.\nIt's not perfect and yes we should look at enhancing stuff like that.\nWhere do you see this in terms of priority?\nOf course Chocolatey also works with the current versioning scheme, but to\nbecome a robust and well established package management system, this is\ndefinitely an important issue to consider. I don't want to blame the NuGet\ndevelopers, but If I would build a package management system, I would never\napply such a restricted and inflexible versioning policy. SemVer is nice\nfor applications, but not appropriate for package versioning.\n\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/330#issuecomment-40259179\n.\n. \n",
    "zippy1981": "nuget isn't on my path on the remote machine, but this is what I get if I execute C:\\Chocolatey\\chocolateyInstall\\NuGet.exe list kdiff3 locally or remotely:\n\nkdiff3 0.9.95\n. So it appears that much is working.\n\n[myRemoteMachine]: PS C:\\Users\\jdearing\\Documents> cd  C:\\chocolatey\\chocolateyinstall\n[myRemoteMachine]: PS C:\\chocolatey\\chocolateyinstall> . .\\chocolatey.ps1\nPlease run chocolatey /? or chocolatey help\n[myRemoteMachine]: PS C:\\chocolatey\\chocolateyinstall> $nugetExe\nC:\\chocolatey\\chocolateyinstall\\nuget.exe\n[myRemoteMachine]: PS C:\\chocolatey\\chocolateyinstall>\n. So what's the difference between Enter-PSSession and Invoke-Command -Session? Is it a matter of how stdin/stdout/stderr behave?\n. Matt,\ndevenv.com and devenc.exe come to mind first!\nThe inspiration is inkscape:\nhttp://inkscape.13.n6.nabble.com/Windows-Console-Options-td2792080.html#a2792083\nTwo stackoverflow questions which talk about the internals:\nhttp://stackoverflow.com/questions/8030831/windows-application-that-optionally-remains-attached-to-console/8030880#8030880\nhttp://stackoverflow.com/questions/4028353/where-do-writes-to-stdout-go-when-launched-from-a-cygwin-shell-no-redirection\n. Never mind. I've given My self a stern lecture as to how wrong I am.\n. Rob,\nIn retrospect you might be right.Let me think about this.\nJustin\n. Ok its ready to go.\n. Gladly, but can you clarify switch commit 2 and 3 from pick to fixup?\nIs the end result that you want a single commit that does all three things?\n. Ok its fixed now. That's not to painful and I think i understand git a little more.\n. Updated to current master\n. Let me review and incorporate that code. Do you think we should have separate TTF and OTF function or one?\n. Started a branch here\nhttps://github.com/zippy1981/chocolatey/commits/fontSupport\n. @ferventcoder Is it ok to include FontHelpers.ps1 in chocolatey core? I hate these weird copyright issues.\n. @ferventcoder , so you want chocolatey.nuspec to install this as a dependency, and then this to be dotsourced in chocolateyInstaller.psm1 so its in scope for Install-TrueTypeFonts?\n. @Iristyle  I modified FontHelper.ps1. \n@ferventcoder @AnthonyMastrean @mwrock  et al I have a working version of the helper integrated into chocolatey. Can you please review that before I go through the trouble of making it a separate package\n. Here is a package to test with https://github.com/zippy1981/Chocolatey-Packages-Zippy/tree/chocolatey.vNext/RobotoFontFamily\n. Rob,\nIn the trunk these three aren't exported :\n\nGet-FtpFile\nGet-WebFile\nUnInstall-ChocolateyZipPackage\n\nIll update my pull request so they continue not to be.\nIt would simplify things if one didn't have to edit the module everytime\nyou added a helper.\nJustin\nOn Apr 21, 2013 2:16 PM, \"Rob Reynolds\" notifications@github.com wrote:\n\nFor my knowledgr, there are only one or two we don't export and I'm not\nsure if that's still the case.\nOn Sunday, April 21, 2013, Justin Dearing wrote:\n\nIf you compare the Export-ModuleMember line in chocolateyInstaller.psm1\nto\nthe contents of the helpers folder, three functions are not exported\nGet-FtpFile\nGet-WebFile\nUnInstall-ChocolateyZipPackage\nIs this intention or not intentional:\nRegardless, I think the Export-ModuleMember line shoudl be generated\ndynaically. If you want to have things in the function folder that are\nprivate to the module scope, can we rename them to something like\nUnInstall-ChocolateyZipPackage.Unexported.ps1?\nLet me know and I'll prepare the patch.\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/chocolatey/chocolatey/issues/277>\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/277#issuecomment-16738575\n.\n. Ok ready for review\n. Updated to current master.\n. Any chance this will be merged into 0.9.8.21?\n. Pay no attention to the git push -f. Now we do file:/// uri right. Also, this was not done before.\n. nuget isn't on my path on the remote machine, but this is what I get if I execute C:\\Chocolatey\\chocolateyInstall\\NuGet.exe list kdiff3 locally or remotely:\nkdiff3 0.9.95\n. So it appears that much is working.\n\n[myRemoteMachine]: PS C:\\Users\\jdearing\\Documents> cd  C:\\chocolatey\\chocolateyinstall\n[myRemoteMachine]: PS C:\\chocolatey\\chocolateyinstall> . .\\chocolatey.ps1\nPlease run chocolatey /? or chocolatey help\n[myRemoteMachine]: PS C:\\chocolatey\\chocolateyinstall> $nugetExe\nC:\\chocolatey\\chocolateyinstall\\nuget.exe\n[myRemoteMachine]: PS C:\\chocolatey\\chocolateyinstall>\n. So what's the difference between Enter-PSSession and Invoke-Command -Session? Is it a matter of how stdin/stdout/stderr behave?\n. Matt,\ndevenv.com and devenc.exe come to mind first!\nThe inspiration is inkscape:\nhttp://inkscape.13.n6.nabble.com/Windows-Console-Options-td2792080.html#a2792083\nTwo stackoverflow questions which talk about the internals:\nhttp://stackoverflow.com/questions/8030831/windows-application-that-optionally-remains-attached-to-console/8030880#8030880\nhttp://stackoverflow.com/questions/4028353/where-do-writes-to-stdout-go-when-launched-from-a-cygwin-shell-no-redirection\n. Never mind. I've given My self a stern lecture as to how wrong I am.\n. Rob,\nIn retrospect you might be right.Let me think about this.\nJustin\n. Ok its ready to go.\n. Gladly, but can you clarify switch commit 2 and 3 from pick to fixup?\nIs the end result that you want a single commit that does all three things?\n. Ok its fixed now. That's not to painful and I think i understand git a little more.\n. Updated to current master\n. Let me review and incorporate that code. Do you think we should have separate TTF and OTF function or one?\n. Started a branch here\nhttps://github.com/zippy1981/chocolatey/commits/fontSupport\n. @ferventcoder Is it ok to include FontHelpers.ps1 in chocolatey core? I hate these weird copyright issues.\n. @ferventcoder , so you want chocolatey.nuspec to install this as a dependency, and then this to be dotsourced in chocolateyInstaller.psm1 so its in scope for Install-TrueTypeFonts?\n. @Iristyle  I modified FontHelper.ps1. \n@ferventcoder @AnthonyMastrean @mwrock  et al I have a working version of the helper integrated into chocolatey. Can you please review that before I go through the trouble of making it a separate package\n. Here is a package to test with https://github.com/zippy1981/Chocolatey-Packages-Zippy/tree/chocolatey.vNext/RobotoFontFamily\n. Rob,\nIn the trunk these three aren't exported :\n\nGet-FtpFile\nGet-WebFile\nUnInstall-ChocolateyZipPackage\n\nIll update my pull request so they continue not to be.\nIt would simplify things if one didn't have to edit the module everytime\nyou added a helper.\nJustin\nOn Apr 21, 2013 2:16 PM, \"Rob Reynolds\" notifications@github.com wrote:\n\nFor my knowledgr, there are only one or two we don't export and I'm not\nsure if that's still the case.\nOn Sunday, April 21, 2013, Justin Dearing wrote:\n\nIf you compare the Export-ModuleMember line in chocolateyInstaller.psm1\nto\nthe contents of the helpers folder, three functions are not exported\nGet-FtpFile\nGet-WebFile\nUnInstall-ChocolateyZipPackage\nIs this intention or not intentional:\nRegardless, I think the Export-ModuleMember line shoudl be generated\ndynaically. If you want to have things in the function folder that are\nprivate to the module scope, can we rename them to something like\nUnInstall-ChocolateyZipPackage.Unexported.ps1?\nLet me know and I'll prepare the patch.\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/chocolatey/chocolatey/issues/277>\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/277#issuecomment-16738575\n.\n. Ok ready for review\n. Updated to current master.\n. Any chance this will be merged into 0.9.8.21?\n. Pay no attention to the git push -f. Now we do file:/// uri right. Also, this was not done before.\n. \n",
    "LCHarold": "I get inconsistent behavior from Chocolatey when using it in a remote session created using Enter-PSSession. \nBUT if I use New-PSSession and then call Chocolatey with Invoke-Command, it works. Why? I have no idea... I'm new to PowerShell remoting. But given the inconsistent results from Chocolatey under Enter-PSSession, the \"interactive\" nature of the session seems likely to be the culprit.\nHere's how I've gotten Chocolatey to work through a remote PowerShell session:\n```\n$securePassword = ConvertTo-SecureString \"mypassword\" -AsPlainText -force\n$credential = New-Object System.Management.Automation.PsCredential(\"domain\\login\", $securePassword)\n$session = New-PSSession -ComputerName server1 -Credential $credential\nInvoke-Command -Session $session -Scriptblock { cinst 7zip }\nrun other commands remotely using Invoke-Command... remove the session when done\nRemove-PSSession $session\n```\n. I get inconsistent behavior from Chocolatey when using it in a remote session created using Enter-PSSession. \nBUT if I use New-PSSession and then call Chocolatey with Invoke-Command, it works. Why? I have no idea... I'm new to PowerShell remoting. But given the inconsistent results from Chocolatey under Enter-PSSession, the \"interactive\" nature of the session seems likely to be the culprit.\nHere's how I've gotten Chocolatey to work through a remote PowerShell session:\n```\n$securePassword = ConvertTo-SecureString \"mypassword\" -AsPlainText -force\n$credential = New-Object System.Management.Automation.PsCredential(\"domain\\login\", $securePassword)\n$session = New-PSSession -ComputerName server1 -Credential $credential\nInvoke-Command -Session $session -Scriptblock { cinst 7zip }\nrun other commands remotely using Invoke-Command... remove the session when done\nRemove-PSSession $session\n```\n. ",
    "mzboray": "I ran into this problem when testing out chocolatey and here's how I solved it. The issue is really the infamous double-hop. Since nuget.exe is going to connect to remote system it will not be able to pass along NTLM credentials. However when I used CredSSP authentication and Invoke-Command I was able to use all of the chocolatey commands (cup, cinst, etc.) remotely. This blog post has a good description of how to set up the CredSSP authetication mechanism.\n. @robianmcd I tried cver and it worked for me. I definitely saw that message a lot when I was trying to figure this out. That seems to be the error path when the output of nuget does not contain the package you are looking for (probably a bug that should be filed). I would take a look at C:\\Chocolatey\\chocolateyInstall\\list.log to see what the output of nuget was on the remote machine.\n. @robianmcd  As you might have guessed I have no idea what's wrong. list.log will have a bunch of packages, but it should have chocolatey in it. If it doesn't something is wrong with how nuget is getting the chocolatey package from its sources. Perhaps try pinging chocolatey.org (or using something like (new-object System.Net.WebClient).DownloadString(\"http://chocolatey.org/api/v2/\") ) in the remote session and see if you can at least reach it.\n. I ran into this problem when testing out chocolatey and here's how I solved it. The issue is really the infamous double-hop. Since nuget.exe is going to connect to remote system it will not be able to pass along NTLM credentials. However when I used CredSSP authentication and Invoke-Command I was able to use all of the chocolatey commands (cup, cinst, etc.) remotely. This blog post has a good description of how to set up the CredSSP authetication mechanism.\n. @robianmcd I tried cver and it worked for me. I definitely saw that message a lot when I was trying to figure this out. That seems to be the error path when the output of nuget does not contain the package you are looking for (probably a bug that should be filed). I would take a look at C:\\Chocolatey\\chocolateyInstall\\list.log to see what the output of nuget was on the remote machine.\n. @robianmcd  As you might have guessed I have no idea what's wrong. list.log will have a bunch of packages, but it should have chocolatey in it. If it doesn't something is wrong with how nuget is getting the chocolatey package from its sources. Perhaps try pinging chocolatey.org (or using something like (new-object System.Net.WebClient).DownloadString(\"http://chocolatey.org/api/v2/\") ) in the remote session and see if you can at least reach it.\n. ",
    "robianmcd": "@mzboray  Thanks I tried your solution and it works for the most part. But I am still getting the \"Your version is newer than the most recent. You must be smarter than the average bear...\" error message when I run cver\n. @mzboray The list.log file just listed a bunch of packages but the chocolateyInstall.log outputs this when I run cver:\n[DEBUG] Running 'Chocolatey-Version' for chocolatey with source:''.\n[DEBUG] Running 'Get-ConfigValue' with configValue:'useNuGetForSources'\n[DEBUG] Running 'Get-UserConfigValue' with configValue:'useNuGetForSources'\n[DEBUG] After checking the user config the value of 'useNuGetForSources' is ''\n[DEBUG] Value not found in the user config file - checking the global config\n[DEBUG] Running 'Get-GlobalConfigValue' with configValue:'useNuGetForSources'\n[DEBUG] After checking the global config the value of 'useNuGetForSources' is 'false'\n[DEBUG] Running 'Get-UserConfigValue' with configValue:'sources'\n[DEBUG] Running 'Get-GlobalConfigValue' with configValue:'sources'\n[DEBUG] Using global sources\n[DEBUG] Using '-Source \"http://chocolatey.org/api/v2/\" -Source \"https://go.microsoft.com/fwlink/?LinkID=230477\n\" ' as the source arguments\n[DEBUG] based on: '-Source \"http://chocolatey.org/api/v2/\" -Source \"https://go.microsoft.com/fwlink/?LinkID=23\n0477\" ' feed\n[DEBUG] Calling 'C:\\Chocolatey\\chocolateyinstall\\nuget.exe' list \"chocolatey\" -Source \"http://chocolatey.org/a\npi/v2/\" -Source \"https://go.microsoft.com/fwlink/?LinkID=230477\"  -NonInteractive\n[DEBUG] Long version of  is '000000000000'\n[DEBUG] Long version of 0.9.8.20 is '000000000000.000000000009.000000000008.000000000020'\nAny idea what's going on? Thanks!\n. @mzboray - the list.log file has all these chocolatey packages:\nchocolatey 0.9.8.20\nChocolateyPackageUpdater 0.6.1.0\nChocolateyDeploymentUtils 1.0.3\nchocolatey.dev 1.0\nChocolateyGUI 0.11.1\nAlso running the command that pings chocolatey seems to work fine. I get this back:\n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\n<service xml:base=\"http://chocolatey.org/api/v2/\" xmlns:atom=\"http://www.w3.org/2005/Atom\" xmlns:app=\"http://w\nww.w3.org/2007/app\" xmlns=\"http://www.w3.org/2007/app\">\n  <workspace>\n    <atom:title>Default</atom:title>\n    <collection href=\"Packages\">\n      <atom:title>Packages</atom:title>\n    </collection>\n  </workspace>\n</service>\nI tried remoting into several computers and I get the error message on 3 of them (including my own computer). I get the expected results on another 3 computers and I get: \"chocolatey does not appear to be on the source(s) specified\" on the last computer?!? Note that the list.log file is empty on the last computer.\nI've tried installing stuff with cinst and it seems to work fine though so maybe this isn't that big of a deal.\nThanks for your help!\n. @mzboray  Thanks I tried your solution and it works for the most part. But I am still getting the \"Your version is newer than the most recent. You must be smarter than the average bear...\" error message when I run cver\n. @mzboray The list.log file just listed a bunch of packages but the chocolateyInstall.log outputs this when I run cver:\n[DEBUG] Running 'Chocolatey-Version' for chocolatey with source:''.\n[DEBUG] Running 'Get-ConfigValue' with configValue:'useNuGetForSources'\n[DEBUG] Running 'Get-UserConfigValue' with configValue:'useNuGetForSources'\n[DEBUG] After checking the user config the value of 'useNuGetForSources' is ''\n[DEBUG] Value not found in the user config file - checking the global config\n[DEBUG] Running 'Get-GlobalConfigValue' with configValue:'useNuGetForSources'\n[DEBUG] After checking the global config the value of 'useNuGetForSources' is 'false'\n[DEBUG] Running 'Get-UserConfigValue' with configValue:'sources'\n[DEBUG] Running 'Get-GlobalConfigValue' with configValue:'sources'\n[DEBUG] Using global sources\n[DEBUG] Using '-Source \"http://chocolatey.org/api/v2/\" -Source \"https://go.microsoft.com/fwlink/?LinkID=230477\n\" ' as the source arguments\n[DEBUG] based on: '-Source \"http://chocolatey.org/api/v2/\" -Source \"https://go.microsoft.com/fwlink/?LinkID=23\n0477\" ' feed\n[DEBUG] Calling 'C:\\Chocolatey\\chocolateyinstall\\nuget.exe' list \"chocolatey\" -Source \"http://chocolatey.org/a\npi/v2/\" -Source \"https://go.microsoft.com/fwlink/?LinkID=230477\"  -NonInteractive\n[DEBUG] Long version of  is '000000000000'\n[DEBUG] Long version of 0.9.8.20 is '000000000000.000000000009.000000000008.000000000020'\nAny idea what's going on? Thanks!\n. @mzboray - the list.log file has all these chocolatey packages:\nchocolatey 0.9.8.20\nChocolateyPackageUpdater 0.6.1.0\nChocolateyDeploymentUtils 1.0.3\nchocolatey.dev 1.0\nChocolateyGUI 0.11.1\nAlso running the command that pings chocolatey seems to work fine. I get this back:\n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\n<service xml:base=\"http://chocolatey.org/api/v2/\" xmlns:atom=\"http://www.w3.org/2005/Atom\" xmlns:app=\"http://w\nww.w3.org/2007/app\" xmlns=\"http://www.w3.org/2007/app\">\n  <workspace>\n    <atom:title>Default</atom:title>\n    <collection href=\"Packages\">\n      <atom:title>Packages</atom:title>\n    </collection>\n  </workspace>\n</service>\nI tried remoting into several computers and I get the error message on 3 of them (including my own computer). I get the expected results on another 3 computers and I get: \"chocolatey does not appear to be on the source(s) specified\" on the last computer?!? Note that the list.log file is empty on the last computer.\nI've tried installing stuff with cinst and it seems to work fine though so maybe this isn't that big of a deal.\nThanks for your help!\n. ",
    "spjeff": "I work on many SharePoint servers and created a PowerShell remoting \"wrapper\" to help automate tasks just like this.  Basically, put your favorite PowerShell into the \"verb\" CSV and servers into the \"noun\" CSV and crank it up.   HUGE time saver for me and I wanted to share with other PS remote admins.   http://splaunch.codeplex.com/\n\n. I work on many SharePoint servers and created a PowerShell remoting \"wrapper\" to help automate tasks just like this.  Basically, put your favorite PowerShell into the \"verb\" CSV and servers into the \"noun\" CSV and crank it up.   HUGE time saver for me and I wanted to share with other PS remote admins.   http://splaunch.codeplex.com/\n\n. ",
    "austinsc": "Yup, it shows the progress as well. It is implemented almost identically to\nthe http version, I think I only left out the print to console\nfunctionality (didnt see a need for it given the context).\nOn Sun, Aug 12, 2012 at 8:57 AM, noomorph notifications@github.com wrote:\n\nThat's cool. And I can see it shows even the progress?\nIf so, that's really must-have.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/137#issuecomment-7675430.\n. Any updates on this? I have a number of packages that i would like to upload pending this patch's acceptance. It is unclear to me if there is something else you would like me to do.\n. Yup, it shows the progress as well. It is implemented almost identically to\nthe http version, I think I only left out the print to console\nfunctionality (didnt see a need for it given the context).\n\nOn Sun, Aug 12, 2012 at 8:57 AM, noomorph notifications@github.com wrote:\n\nThat's cool. And I can see it shows even the progress?\nIf so, that's really must-have.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/137#issuecomment-7675430.\n. Any updates on this? I have a number of packages that i would like to upload pending this patch's acceptance. It is unclear to me if there is something else you would like me to do.\n. \n",
    "JenasysDesign": "I'm working at a clients who has a proxy firewall requiring authentication, so I'm happy to provide testing. Here is what I think needs to be done to ensure proxy server authentication is baked into Chocolatey. Would welcome feedback.\nRecommended Tasks\n\nReview the use of chocolatey.config and powershell implementation of standard .net *.config file settings for proxy values. \nReview the interaction between Chocolatey and Nuget setting of the proxy values. I think Chocolatey needs to pass any proxy configuration into the nuget command line so those values are set for both products. \nCreate Pester unit tests to mock 407 proxy server authentication error. (Suggestion)This could allow the Choco Command line UI to ask for proxy details if they are not already configured.\nUpdate the Choco command line options to include proxy setting options.\nChange all the powershell scripts that are used to download files via urls and include proxy server credentials.\nsrc\\Helpers\\functions\\Get-WebFile.ps1\nsrc\\Helpers\\functions\\Get-WebHeaders.ps1\nUpdate the install.ps1 powershell script to allow for proxy server settings and credentials to be provided.\n. I'm also receiving 407 proxy authentication exceptions. I've been looking at the proxy configuration options within Chocolatey within a corporate environment that requires a separate set of credentials for the proxy server. I've added some notes in https://github.com/chocolatey/chocolatey/wiki/Proxy-Settings-for-Chocolatey. \nMore work is required to allow chocolatey for dealing with environments that require credentials to be supplied, rather than the integrated AD/Proxy authentication that is currently within the solution.\n. Updated wiki proxy documentation, following testing behind a proxy which requires manual user/password authentication. See 0689c25\nStill working on the operation of Chocolatey behind a proxy server that requires manual validation. I think there are some limitations in the current powershell scripts and *.config files and exactly what needs to be changed.\n. I'm working at a clients who has a proxy firewall requiring authentication, so I'm happy to provide testing. Here is what I think needs to be done to ensure proxy server authentication is baked into Chocolatey. Would welcome feedback.\n\nRecommended Tasks\n\nReview the use of chocolatey.config and powershell implementation of standard .net *.config file settings for proxy values. \nReview the interaction between Chocolatey and Nuget setting of the proxy values. I think Chocolatey needs to pass any proxy configuration into the nuget command line so those values are set for both products. \nCreate Pester unit tests to mock 407 proxy server authentication error. (Suggestion)This could allow the Choco Command line UI to ask for proxy details if they are not already configured.\nUpdate the Choco command line options to include proxy setting options.\nChange all the powershell scripts that are used to download files via urls and include proxy server credentials.\nsrc\\Helpers\\functions\\Get-WebFile.ps1\nsrc\\Helpers\\functions\\Get-WebHeaders.ps1\nUpdate the install.ps1 powershell script to allow for proxy server settings and credentials to be provided.\n. I'm also receiving 407 proxy authentication exceptions. I've been looking at the proxy configuration options within Chocolatey within a corporate environment that requires a separate set of credentials for the proxy server. I've added some notes in https://github.com/chocolatey/chocolatey/wiki/Proxy-Settings-for-Chocolatey. \nMore work is required to allow chocolatey for dealing with environments that require credentials to be supplied, rather than the integrated AD/Proxy authentication that is currently within the solution.\n. Updated wiki proxy documentation, following testing behind a proxy which requires manual user/password authentication. See 0689c25\nStill working on the operation of Chocolatey behind a proxy server that requires manual validation. I think there are some limitations in the current powershell scripts and *.config files and exactly what needs to be changed.\n. \n",
    "dotnetchris": "@ferventcoder the environment variable for chocolatey was not there, i had to manually add it with \nC:\\projects> $env:Path += \";C:\\Chocolatey\\bin\\;\"\n. @ferventcoder are you refering to the chocolatey install or env:Path? env:Path is most certainly system Environment Path variable, i also used this same command to setup environment path for python after it didn't do it either.\n. @ferventcoder the environment variable for chocolatey was not there, i had to manually add it with \nC:\\projects> $env:Path += \";C:\\Chocolatey\\bin\\;\"\n. @ferventcoder are you refering to the chocolatey install or env:Path? env:Path is most certainly system Environment Path variable, i also used this same command to setup environment path for python after it didn't do it either.\n. ",
    "acgetchell": "After running\npowershell\nchoco install cmake.install --installargs 'ADD_CMAKE_TO_PATH=\"\"System\"\"'\nrefreshenv\nI still have to close out the Admin PowerShell window before cmake is found.\nSame thing happens with:\nchoco install git -y\nrefreshenv. Works now. \ud83d\udc4d \ud83d\udcaf \n\n. After running\npowershell\nchoco install cmake.install --installargs 'ADD_CMAKE_TO_PATH=\"\"System\"\"'\nrefreshenv\nI still have to close out the Admin PowerShell window before cmake is found.\nSame thing happens with:\nchoco install git -y\nrefreshenv. Works now. \ud83d\udc4d \ud83d\udcaf \n\n. ",
    "Mathnerd314": "My path already has 33 entries; I doubt I'd notice a dozen more. Although if I was using Windows XP I might run into a \n2048-character limit. Maybe it could be a config option, off by default.\n. My path already has 33 entries; I doubt I'd notice a dozen more. Although if I was using Windows XP I might run into a \n2048-character limit. Maybe it could be a config option, off by default.\n. ",
    "mdirik": "Hi, \nI'm working on fixing all the I-\u0130 related bugs. Do you have any advice regarding it? Currently I'm blindly changing all capital I's to little i's when i think it's a file name.\n. On 17 Ocak 2013 Per\u015fembe 21:56:17, Rob Reynolds wrote:\n\nAre you still finding issues?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/152#issuecomment-12387663.\n\neven the install command didn't worked when i last tried few months \nago, and i didn't try any other scenario. so i thought it may be a \nbetter idea to go through it rather than dealing case by case.\nedit: ok. i guess there was still pieces from old install which ruined the execution. i've uninstalled it and installed again with build.cmd and it works OK as far as i can see. i will still look if there is anything left, though (to be precise, there are still some I's but i don't know if they cause bugs.)\n. build.cmd installs chocolatey from the internet as far as i understand, how can i install and run tests from the git repository?\n. Hi, \nI'm working on fixing all the I-\u0130 related bugs. Do you have any advice regarding it? Currently I'm blindly changing all capital I's to little i's when i think it's a file name.\n. On 17 Ocak 2013 Per\u015fembe 21:56:17, Rob Reynolds wrote:\n\nAre you still finding issues?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/152#issuecomment-12387663.\n\neven the install command didn't worked when i last tried few months \nago, and i didn't try any other scenario. so i thought it may be a \nbetter idea to go through it rather than dealing case by case.\nedit: ok. i guess there was still pieces from old install which ruined the execution. i've uninstalled it and installed again with build.cmd and it works OK as far as i can see. i will still look if there is anything left, though (to be precise, there are still some I's but i don't know if they cause bugs.)\n. build.cmd installs chocolatey from the internet as far as i understand, how can i install and run tests from the git repository?\n. ",
    "Redsandro": "Some packages output an error message and then throw it.\nDoes this cause two out of three error messages?\n} catch {\n        $errorMessage = \"This package tried to do something stupid and has failed to install.\"\n        Write-Error $errorMessage\n        throw $errorMessage\n  }\nI don't know what Write-Error does besides writing the message, but if it includes the stack details, maybe that's where it goes wrong.\nJust a thought.\n-edit-\nOther packages do\n} catch {\n    Write-ChocolateyFailure $name $($_.Exception.Message)\n    throw   \n}\nBut maybe it's irrelevant.\n-edit-\nCaught another one. Four (4) times the same error message. Skipping the errors itself, it does display line numbers to track down:\n```\nWrite-Error : [ERROR] Exit code was '1'.\nAt C:\\Common\\Chocolatey\\chocolateyInstall\\helpers\\functions\\Start-ChocolateyProcessAsAdmin.ps1:46 char:5\n[ERROR] [ERROR] Exit code was '1'.\nAt C:\\Common\\Chocolatey\\chocolateyInstall\\helpers\\functions\\Write-ChocolateyFailure.ps1:30 char:2\n[ERROR] [ERROR] Exit code was '1'.\nAt C:\\Common\\Chocolatey\\chocolateyInstall\\helpers\\functions\\Write-ChocolateyFailure.ps1:30 char:2\nWrite-Error : Package did not install successfully: [ERROR] Exit code was '1'.\nAt C:\\Common\\Chocolatey\\chocolateyInstall\\functions\\Chocolatey-NuGet.ps1:90 char:17\n```\n. Don't get me wrong, I am enthusiastic about this and don't mean to be nitpicky! Ofcourse it's not gonna be apt-get all the way.\nBut the ease of installing your favourite apps on a clean OS all at once using a single command is arguably one of the most useful and widely used features of a package manager. I've used apt-get, yum, aptitude, pacman and dpkg, and they all do this. I guess I automatically assumed it is expected behavior of a package manager.\nSorry, I am new to this, I just googled around, found chocolately and npackd. One of the reasons I chose chocolately first was because I read it was older, so I didn't really think about not even to v1 yet. :P\n(The other reason is that the Chocolately site is much nicer and has terminal support out of the box. Very nice!)\n(Admittedly I installed npackd afterwards to install the packages that had failed in chocolately (like Security Essentials) and/or didn't have a 64 bit candidate.)\n(Since Chocolately is much nicer, but npackd fails less often, think of the amount of bases that are belong to you if the projects are merged! ;))\n. Hey you are right. It's a wonder I made it through school, I still don't do my homework right. :P\nThanks for the hints. Is powershell different from the normal shell? Could you give an example on how to do the array thing on powershell? It would give me some power before v1 hits the stage.\nOn Linux it would be:\nfor N in app1 app2 app3; do cinst $N; done\nNow you mention it, I think it's also possible in normal shell (cmd), probably something like this iirc:\nFOR %n IN (app1, app2, app3) DO (cinst %n)\n(This is a reasonably educated guess, cannot test it, am not on Windows now.)\n. By the way, since Chocolately can internally process a list from XML (packages.conf), isn't it relatively easy to implement a feature to use a command-line list?\nI imagine the list from XML will end up in an unshifting array or something. I don't know powershell coding but using javascript pseudocode it would be something like this:\njavascript\n// Use command line multiple input if no packages.conf is specified\nif (arguments.length > 2) // Multiple packages found\n    for (var n=2; n<arguments.length; n++) // From first to last package\n        install_array.push(arguments[n]); // Create installation array\nWhere:\narguments[0] = chocolately install app1 app2 app3\narguments[1] = install\narguments[2] = app1\narguments[3] = app2\narguments[4] = app3\n. I updated chocolatey.cmd to allow batch-installation. It just continues with the next when a package fails, which is what we want, because with the batch-xml I used to do it was so annoying that it stopped on error.\nHere is the update: https://github.com/chocolatey/chocolatey/pull/304\n. cinst chocolatey -pre\n. I noticed I did -beta sometimes before I remembered to do -pre.\nJust a thought: Maybe add beta as a synonym for pre?\n. True. I hadn't thought of that. It's not as simple as I thought. Monday half brain day.\n. Today I found out Chocolately is actually called Chocolatey. Why did nobody stop me? :P\nI edited the above issue to fix this.\n. @ferventcoder just a thought: Can all packages from cup all be rerouted through the new batch functionality? I see you also implemented this in cup when multiple packages are mentioned individually.\n. Installing or updating multiple packages at once #304\n. Let me try that again. Personally I don't really care for packages.xml (AKA packages.conf) anymore, since we have batch functionality (e.g. cinst package1 package2 packageN). However, cup all also stops on error, and that one is important.\n``` cmd\nFinished installing 'ccleaner' and dependencies - if errors not shown in console, none detected. Check log for errors if unsure.\nChocolatey (v0.9.8.21-beta1) is installing 'chocolatey-beta1' and dependencies. By installing you accept the license for 'chocolatey-beta1' and each dependency you are installing.\nUnable to find package 'chocolatey-beta1'.\nCommand 'update' failed (sometimes this indicates a partial failure). Additional info/packages: all\nReading environment variables from registry. Please wait... Done.\nC:\\Users\\Redsandro>\n```\nThe batch install does not stop on error, right? So can cup all somehow use the same don't-stop-on-error magic?\n. I concur, but I lack the knowledge and the knowhow to propose a fix. :) I'm\nbetter at making .bat wrappers. :P\nOn Nov 5, 2013 12:17 AM, \"TomOne\" notifications@github.com wrote:\n\nThis is actually a very important issue to solve. Stopping the entire\nprocess only because one package failed is very annoying and reduces UX.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/192#issuecomment-27732812\n.\n. > i would have thought people would like to fail early and abort...\n\nTypical use case: You have 20 hand-picked applications installed through Chocolatey. You care about these applications. You want to update them all: cup all\nAfter 4 packages it breaks because the 5th package maintainer made a mistake. You now have 15 packages that are not updated. You have to remember them all, figure out their Chocolatey IDs, and specify each of them manually. This is a show stopper and is bad for business. \nNow that package 5 cannot update because of some error, that does not mean you suddenly changed your mind about updating the rest of your system.\nThis together with the single-install-only limitation (fixed in #191 ) were my biggest annoyances with Chocolatey, and the stopping on error annoyance is the feedback I hear the most. (I install Chocolatey on other peoples laptops, and sometimes I even tell them how it works. ;)) (The other feedback is that packages often don't work, but that's a different problem.)\nSure, when a dependency no one (read: typical user) knows or cares about fails, the parent package should fail, obviously. But the rest of the independent packages are still supposed to be updated.\n\nYou are likely to see lots of failures and would prefer to have it simply stop so you can diagnose the root problem earlier.\n\nI can imagine this too, but it's more of an advanced use-case. There should be a command line option for that.\n\"1.0\" takeoff point:\n-  Do not stop on error. When client says he wants to update all, he wants to update all.\nIdeally:\n- Skip packages who's dependencies have errors, continue with the rest.\nAdvanced:\n- Command line option for users who want specific behavior: cup --stop-on-error all\n. I'd like to see Chocolatey introduced to the masses. I think Chocolatey is meant for the masses in the end. Meant for easy software management.\nA famous developer once said about Chocolatey:  \n\nI want to see Windows be as automatable and awesome as other operating systems that are out there.\n\nThe Windows audience doesn't really mix well with something that breaks and spits out 20 red lines of error. It just wants to see a (final) message: \"19 out of 20 packages updated. See error.log for details.\"\nA single independent (in Linux we call this top-level) package should not rely on another top-level (TL) package, and neither should be the order in which they are installed or updated relevant. Hence it should not stop on error.\nWhen one failing TL package leaves the system in barney for another TL package, said package is in conflict with both logic and the packaging guidelines, and should be hosted somewhere else:  \n\nA package creator should consider whether his package is also useful for others. If that is not the case, it shouldn\u2019t be published on Chocolatey.org. Reasons for that can be if the package would require a very special configuration that is unacceptable for other users or that would lead to serious vulnerabilities.\n. Let's strife for flawless UX and command line options for specifics. :smile: \n. Ah I see how it works now in the nuspec.\n. xml\n<?xml version=\"1.0\"?>\n<package xmlns=\"http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd\">\n    <metadata>\n        <id>tomboy</id>\n        <title>Tomboy Notes 1.10.2</title>\n        <version>1.10.2</version>\n        <authors>Alex Graveley</authors>\n        <owners>Redsandro</owners>\n        <summary>Create and synchronize notes.</summary>\n        <description>Quickly draft and synchronize notes with multiple computers in Linux, OSX and Ubuntu One.</description>\n        <projectUrl>http://projects.gnome.org/tomboy/</projectUrl>\n        <tags>note notes notetaking multiplatform synchronize</tags>\n        <copyright></copyright>\n        <licenseUrl>http://www.gnu.org/copyleft/lesser.html</licenseUrl>\n        <requireLicenseAcceptance>false</requireLicenseAcceptance>\n        <!--<iconUrl>https://github.com/__CHOCO_PKG_OWNER_REPO__/raw/master/__NAME__/__NAME__.gif</iconUrl>-->\n            <dependencies>\n                <!--<dependency id=\".NET\" version=\"3.5\" />-->\n                <!-- http://www.microsoft.com/downloads/details.aspx?FamilyId=333325FD-AE52-4E35-B531-508D977D32A6&displaylang=en -->\n                <dependency id=\"gtksharp\" version=\"2.12.10\" />\n                <!-- http://download.mono-project.com/gtk-sharp/gtk-sharp-2.12.10.win32.msi -->\n            </dependencies>\n        <releaseNotes></releaseNotes>\n    </metadata>\n    <files>\n        <file src=\"tools\\**\" target=\"tools\" />\n        <!--<file src=\"content\\**\" target=\"content\" />-->\n    </files>\n</package>\n\n``` cmd\n$packageName = 'tomboy'\n$installerType = 'msi' \n$url = 'http://download.gnome.org/binaries/win32/tomboy/1.10/Tomboy-1.10.2.msi'\n$url64 = $url # 64bit URL here or just use the same as $url\n$silentArgs = '/quiet'\n$validExitCodes = @(0,3010) #please insert other valid exit codes here, exit codes for ms http://msdn.microsoft.com/en-us/library/aa368542(VS.85).aspx\nmain helpers - these have error handling tucked into them already\nInstall-ChocolateyPackage \"$packageName\" \"$installerType\" \"$silentArgs\" \"$url\" \"$url64\"  -validExitCodes $validExitCodes\n```\n. Sorry, I didn't notice there was a mailgroup for questions. New questions will be redirected henceforth. \nBut let me assure you, I am one of the cleverest people in my subnet (;)), and if I cannot get my custom package to install from source, I'm afraid it's gonna be a problem for other package committing 'noobs' too.\nIn response, yes the tutorial is quite comlpete and it does explain how cpack needs to be run first. When someone points out the problem and I get my first package to work, I will, with your permission, add a quick-start guide to the lengthy package creating part of the wiki.\nOr could it be a bug in the latest cpack or cinst? That would be a fine coincidence, I would have posted my section in the right section after all.\n. I cannot check that right now as I am on the wrong computer, but I used the command that is on the website yesterday: @powershell something.DownloadString('http://bit.ly/psChocInstall')) one. I am assuming it points to the release version.\n. Yes, works nicely. I was gonna make a screenshot, but I bet you believe me when I say it shows exactly the same as mentioned in the above XML code.\n-edit- On second thought, the below comment is probably irrelevant.\nI made a typo on a virtual machine just now while playing around with it, and I noticed:\ndir\n3.504 tomboy.1.10.2.nupkg\n1.351 tomboy.nuspec\n[DIR]          tools \ncinst tomboy -source %cd%\n'tomboy' is not a valid version string. Parameter name: version \ncinst -source %cd%\nUnable to find package 'tomboy'. \nDon't know if it's relevant, but if the second command cannot find the package, how does it know which package I mean?\n. Oops, that was a mistake on my part posting the output of the dir command here on github, it is the file size from the cmd.com console window.\nThe filename is tomboy.nuspec and when running cpack it automatically creates tomboy.1.10.2.nupkg. It must be getting those numbers from the nuspec xml file, so cpack reads the version correctly.\nHence we're back at the confusing 'tomboy' is not a valid version string error message when testing the package.\n. Windows' default shell.\nRun -> cmd [enter]\n. Don't use one. I thought you only need a repo when you push your package.\nSo far I'm getting it to run correctly before I push it.\n(Still have to figure out that repo part, the tutorial doesn't really explain that)\nIf you have a virtual machine running and you have a minute to spare, you can see if it has the same error message for you.\nhttps://dl.dropbox.com/u/1919923/chocolatey.tomboy.zip\n. Oh yeah I remember the gtksharp message the first time I ran it. I am guessing the package (owned by somebody else) is not gonna be downloaded in testing mode.\nYou should cinst gtksharp on your vm and try again. Now you get the error message.\n. What?? I am at a loss.\nThanks for taking the efford to try it out. I was sure you would get the same error.\nWhat sorcery is this? You are probably as clueless as I am at this point.\nI tested this out on Windows 7 Professional and Windows 8 Professional. Same message.\nOh yeah I have version 0.9.8.19 of Chocolatey, I figured out from some logs I got on my dropbox.\n. D'oh\nI found the cause.\ncmd\nC:\\Users\\Redsandro\\Dropbox\\temp\\chocolatey tomboy>cinst tomboy -source \"%cd%\" -debug\n(..)\n'C:\\Users\\Redsandro\\Dropbox\\temp\\chocolatey', version: 'tomboy',\n(..)\nDEBUG: Using '-Source \"C:\\Users\\Redsandro\\Dropbox\\temp\\chocolatey\"' as the source\nThe \"\" in \"%cd%\" would in Linux cause the path to be a single parameter but apparently not in Windows. The space in the pathname caused the failure.\n. Good thought! \nI tried it out and single quote ' also works!\n. Yes, once I complete pushing the package successfully, I will add the steps.\nIf I may be so blunt to ask, is this repository you mentioned earlier necessary for this step? If I read the tutorial correctly, I can just get an api-key and push the package. There is no mention of this repository. In the templating system there is mention of filling in your personal repo and an auto-update repo (without further explanation), but the template I used for this .msi package does not require them.\nIf I missed repo documentation from the tutorial, you can just provide a link and I will read from there.\n. Ah I get it now. The only thing I ever do is git clone, so I've git some\nreading to do on how to get my stuff up there.\n. Ouch, gotta love that wiki editor. :')\nThanks for the help. In return, a Quick Start Guide: https://github.com/chocolatey/chocolatey/wiki/CreatePackagesQuickStart\n. What do you mean by second source to the package?\nI am pretty sure it works like this (too) because I copied most commands in\na little notepad when I executed them. But maybe I got something mixed up.\nIf you are sure and/or have any other changes in mind, feel free to edit\nthe page.\n. I was looking for that quickstartguide I made earlier and couldn't find a link in the main page (CreatePackages) although I am pretty sure I made one.\nAfter googling, I found this issue and rediscovered the page through above link.\nAm I having a mini-epilepsy-attack and did I never create a reference in the main packaging wiki, or was it removed with good reason?\nI (re)created the reference. Of course, feel free to change if the wording is wrong. \nMy rationale is this: I (and therefor undoubtedly others too) just wanted to know the basic steps, and looking at the size of the page (scrollbar) made me initially lose interest. That's why I think a new visitor should see that there is a quick start guide in the first a-screens-length of the CreatePackages page.\nMaybe I was an idiot and pressed preview in stead of save. Could also be. :P\n. Okay my bad, please ignore. :P\n. -includedependencies would also be a good idea. That would skip more manual\nsteps.\n. Or: -source should not use cache\n-source '%cd%' -force should ignore c:\\ProgramData\\chocolatey\\lib\\%DataIAmClearlyTryingToIgnore%\n. (I was considering the google group, but I think the last two points should be identified as important issues.)\n. I will break this up for you soonish.\nIn the meanwhile, fyi, the space in .exe names is the case for the example (you can download the zip file and see for yourself), except in this case a .bat link doesn't really make sense anyway because you would want it in the start menu where spaces are no problem.\nI've seen it another time with a custom build of x264 64bit in the past. The author claimed it would be used within another script using \"quotes\" anyway, which wasn't true for me.\nGranted, for command line tools you won't see this often because devs would quickly start to feel silly.\nBack in the day, you could type filena~1.exe in stead of filename with space.exe, but those days are long gone. ;)\n. PS is there a page on the wiki that explains what this .exe.gui is and does?\n. Ah so it changes the way the .bat shortcut launches the application.\nI remember reading that and thinking it had to do with gui-installers that cannot be put in silent mode, to prevent them from hanging the Chocolatey installer window when running in batch mode. Wrong assumption. I get it now.\nIn this case there would need to be a Core Temp.exe.ignore and the hypothetical Core Temp.exe.copyToBinFolderInstead and/or Core Temp.exe.createShortcutInStartMenu\n. That is good news.\nI have been looking for a user variable that links there but couldn't find it. There were a lot of %VARS% linking to folders in 2k/xp, but they don't work anymore.\nI thought in your second comment #issuecomment-11463385 you mentioned this was a problem. But if you have a possible solution for the start menu, please tell me. :)\nRedirected issues:\n216 -> [Enhancement] Copy/move .exe tools to \\bin\\ folder in stead of creating a .bat file.\n217 -> [Enhancement] Use custom \\bin\\ folder\n218 -> [Enhancement] Create link to GUI tool in Start Menu\n219 -> [Enhancement] Ignore spaces when creating a 'fake' link (.bat file)\n. How about mklink \"$env:chocolatey_bin_root\\tool.exe\" \"$env:ChocolateyInstall\\lib\\pathToTool\\tool.exe\"\n(emphasis on mklink as a solution) instead of the .bat routine?\n. Yea I missed that. :(\nIn that case, I propose functionality that moves tools to the bin folder, for reasons explained above.\n. I don't know if there should be opt-in or just 'package maintainer knows best.'\nExecutable only files without dll's or even config files (e.g. ffmpeg, x264, faad, faac, avs2avi) should pose no problem, with the added benefit of being able to copy or sync the bin folder to usb or cloud and use it anywhere as-is. The library, your uncle's machine, wine in linux, etc.\n. .bat feels like a MS-DOS heritage, and it is, but apparently the only difference with the more modern .cmd is the behavior of error levels when \"Command Extensions\" are enabled, which I don't know what they are.\nI always thought batch files had to be more carefully constructed as to provide some kind of DOS compatibility and command files were a bit more versatile. I guess the biggest difference is psychological indeed.\n. Ah sorry, I come from Linux where ln (mklink) is not such a big deal.\nShouldn't everything be opt-in? Right now creating .bat files is opt-out with .exe.ignore. We could have:\n.exe.startMenu (as discussed in #218 )\n.exe.moveToBin or .exe.copyToBin (as discussed above, remember to implement #217 )\n.exe.linkBat\n.exe.linkGui (remember to implement #219 )\n. This would be very straightforward for new users, not like \"This thing happens magically, that thing has a helper function, and a 3rd thing is done by the installation script\".\n. I know this would change some expected behavior in existing package install scripts.\nThe solution could be to have a compatible Chocolatey version number in every package. Chocolatey-Installer compares this package Chocolatey version with it's own (see (1)). But if none is defined by the package, assume old package and go to a quicks-mode (e.g. automatically assume .linkBat)\n(1) For future solutions, the other way around, if a package was made with a newer version of Chocolatey (i.e. uses new helper functions that are not available in previous Chocolatey versions) than the installed one, Chocolatey could quit the install or update saying \"You need to update Chocolatey in order to install/update this package.\"\n. > if your package requires a particular version of chocolatey,\n\nyou can specify the version requirements in the nuspec\nit will update chocolatey automatically.\n\nNice! I think it's not in the nuspec template from the repo though. What tag is used for this? I think I'll drop a line about this in the wiki.\n\nit\u2019s a blow to git on win for sure.\n\nWindows is not very friendly towards anything that is not Microsoft. But I find that the MinGW Git, or better, using Cygwin, work quite nicely.\n\nWhat do you guys think of this more unified approach to different types of binary handling as mentioned above: https://github.com/chocolatey/chocolatey/issues/216#issuecomment-11621798\n. Also found this: http://windows.github.com/\nDidn't take a close look yet.\n. https://github.com/blog/1151-designing-github-for-windows\n. Added Nuspec details to Wiki.\nMaybe you should set a(n old) version of Chocolatey by default in the template:\nhttps://github.com/chocolatey/chocolateytemplates/blob/master/_templates/chocolatey/NAME.nuspec\nIt's the quickest way to tell (new) packagers that it is possible and it matters, if they see it.\n. RE: Unified approach -\nIt probably looks easy to you because you know Chocolatey inside out, but for new people, when you have stuff happening implicitly, stuff happening explicitly, stuff happening on command, stuff happening inverted (.ignore), it kinda looks like the national tax system. They say it makes sense, but with all rules and exceptions no one likes doing their tax report.\nIt has to look sexy and intuitive to use, that's how you attract more packagers and a bigger audience.\nI would even go as far as renaming chocolatey_bin_root to ChocolateyBinRoot so it has the same naming convention as ChocolateyInstall. It has no technical benefit, other than making Chocolatey look happy instead of \"random/messy\".\nAnyway it (unified approach) should not get in the way of exactly what you want, because there can be a flag, like Install-ChocolateyZipPackage --forceBat $packageName \"$zipUrl\" \"$binRoot\".\nAnd then we could just as well have --forceCopy, --forceStartMenu or --forceGui, for people who just want to drop their exe in a package and boom, it's in the start menu!\n. Also, can you point me to the script that detects .gui and .ignore? I can look at it for taking a crack at .startmenu and .copy.\n. I noticed that the CreatePackages wiki* specifically mentions using the %chocolatey_bin_root% environment variable as installation path under Installation paths -> 1. %chocolatey_bin_root% environment variable, but this variable is empty.\n*) https://github.com/chocolatey/chocolatey/wiki/CreatePackages\n. You are right, but what I mean is: You are advised (by the docs) to pass the variable to the (random) installer if it is supported. But the path is empty by default. Which means you will be explicitly passing an empty path to the (random) installer and who knows how it will be interpreted.\nMy first thought is that %chocolatey_bin_path% should be set to %ChocolateyInstall%\\bin by default the when Chocolatey is installed, so it is never empty and can be edited by the user.\nMy second thought is that the current solution is to check if %chocolatey_bin_path% empty in the install script.\nBut wouldn't it be more logical to have the installer set a default value, rather than have 500+ packages perform this check?\nIf not, we should add a comment about checking the var in the docs so it isn't ambiguous.\n. Added \"Please note that this variable is empty by default, and needs to be explicitly set by the user. Before installing to %chocolatey_bin_root%, your installation script should check if this variable is not empty.\" to wiki.\n. I have the feeling that people who are not working on the code but do care about packages and documentation miss out on the good stuff. :P\nHowever, there is no such file in functions: https://github.com/chocolatey/chocolatey/tree/master/src/functions\nCan you point me to the right direction?\nI want to see if it will daisychain with Install-ChocolateyZipPackage (or maybe is does that automatically).\n. Ah now I see.. the function doesn't exist yet. I'm slow. :P\n. I'd like to reference this post about env vars and finding the bin path as it is closely related to this issue:\nhttps://github.com/chocolatey/chocolatey/issues/221#issuecomment-11603183\nQuote:\nIs $env:ChocolateyInstall automatically set when Chocolatey is installed? Because we can use something like:\nPowerShell\nfunction Get-BinPath {\n    # Calculate $binRoot, which imo should always be set in $env:chocolatey_bin_root as a full path (not relative)\n    if($env:chocolatey_bin_root -eq $null) {\n        $binRoot = \"$env:ChocolateyInstall\\bin\"\n    }\n    # My chocolatey_bin_root is C:\\Common\\bin, but looking at other packages, not everyone assumes chocolatey_bin_root is prepended with a drive letter.\n    elseIf (-not($env:chocolatey_bin_root -imatch \"^\\w:\")) {\n        # Add drive letter\n        $binRoot = join-path $env:systemdrive $env:chocolatey_bin_root\n    }\n    else {\n        $binRoot = $env:chocolatey_bin_root\n    }\n    return $binRoot\n}\n. If the Chocolatey installer would set $env:chocolatey_bin_root = \"$env:ChocolateyInstall\\bin\" the effect would be the same, but more straight-forward for the user to change the bin location because the default is set rather than made up by the package if it does not exist.\nThese are just thoughts based on things I found confusing as a new user.\n. The first part is explaining how the Install command works as it is now. The second part explains something I cannot do. What part do I need to explain in a different way?\nCan you provide an example or link to documentation for all three?\nI haven't seen documentation on this. I will add them to the quick guide.\n- Unzip location\n- Partial unzip\n- (!) Make link in start menu\n. Ah thanks. I see partial unzip is limited for my purposes. So I mentioned it in another Enhancement #220, maybe it can be file-specific.\nWow I see it's actually quite powerful, being able to add file associations and pin stuff. I haven't found the specific start menu functionality yet, but pinning is close in essence.\nOnce I figure out specific stuff I will add it to the documentation under \"examples\" or \"common tricks\", because if it's easier for others to make packages, there is a bigger chance of more people making packages, which (in my opinion) is good. :)\n. I think this comes really close: https://github.com/chocolatey/chocolatey/tree/master/src/helpers/functions\nI think only $desktop needs to change in:\npowershell\n$desktop = $([System.Environment]::GetFolderPath([System.Environment+SpecialFolder]::StartMenu))\nAs seen in this documentation: http://www.programmersheaven.com/2/Les_CSharp_15_p2\nOf course renaming $desktop to something sensible like $start\nBut I'd need someone who actually understands Chocolatey and Powershell to test this and create a directory in the start menu called Chocolatey so Chocolatey-installs won't clutter the root of the start menu, which I don't know how to do.\nAm I overlooking something?\n. Nope, swamped too. :( And not enough Powershell knowledge (yet) to fix things within an acceptable timeframe. I think it would take me literally 10 times longer than someone who understands both Powershell and Chocolatey well.\nI really hate Powershell, because I have such a hard time reading it.\nPHP, Javascript, Python, they are all very natural and there is hardly a learning curve. You often get what is going on by looking at it for the first time.\nBut Powershell is pure syntactic salt, line for line.\nWhen I look at Powershell, almost every single line makes me feel like I have dyslexia. Last time a Microsoft language looked acceptable to me was when I was typing MSX-BASIC.\nOkay, end of rant. :)\nNice find in the link though!\n. It might be good to have the work of getting the wanted bin path in a separate module, so we can use Get-BinPath (or whatever) for any purpose, not just installing a tool.\nWhat does the referenced $(Split-Path -parent $MyInvocation.MyCommand.Definition actually do? In my powershell I get a spacebar.\nIs $env:ChocolateyInstall automatically set when Chocolatey is installed? Because we can use something like:\nPowerShell\nfunction Get-BinPath {\n    # Calculate $binRoot, which imo should always be set in $env:chocolatey_bin_root as a full path (not relative)\n    if($env:chocolatey_bin_root -eq $null) {\n        $binRoot = \"$env:ChocolateyInstall\\bin\"\n    }\n    # My chocolatey_bin_root is C:\\Common\\bin, but looking at other packages, not everyone assumes chocolatey_bin_root is prepended with a drive letter.\n    elseIf (-not($env:chocolatey_bin_root -imatch \"^\\w:\")) {\n        # Add drive letter\n        $binRoot = join-path $env:systemdrive $env:chocolatey_bin_root\n    }\n    else {\n        $binRoot = $env:chocolatey_bin_root\n    }\n    return $binRoot\n}\nIt would make packages with extra sorcery (like Install-ChocolateyExplorerMenuItem) a lot easier.\n. Huh? You don't have to define a version in chocolateyInstall.ps1?\nPowerShell\n$name = 'rismoney'\n$url  = 'http://www.rismoney.com/rismoney-v1.0.2_setup.exe'\ntry {\n    Install-ChocolateyPackage $name 'EXE' '/SILENT' $url\n    Write-ChocolateySuccess $name\n} catch {\n  Write-ChocolateyFailure $name $($_.Exception.Message)\n  throw\n}\nIs all. You just edit the url and the nuspec on update. Am I missing something?\n. But that one is not predictable, we do not know if the next one is gonna be called 1.0.3, 1.1.0-unicode, or has a different name/url than before. So we would always need to change that manually.\nMaybe I'm not aware of another function/reason that requires keying in this version somewhere else except for the software download path. In that case, I am sorry for providing my two cents. :)\n. Git is confusing (to a newbie), This is a separate change but it's automatically added to this pull-request.\nI thought a pull-request was a request to verify and merge the changes that were made up until the pullrequest was done, but I need to create a new branch for every different change?\n@rismoney Thanks for the help, but what do you mean by \"Change the bottom 4 commits to fixup instead of pick\"?\nAlso, I'm especially interested in preventing this. I thought a pull meant an exact replica from the root of the folder.\n@ferventcoder With this latest commit you can repair your foobar2000 package. I am succesfully using it for a new Rename Master package but it's not for the public yet because it requires the first (bunch of) commits.\nCheck it out. Usage:\n$url = Get-FilenameFromRegex \"http://www.foobar2000.org/download\" '/getfile/([\\w\\d]+)/foobar2000_v1.1.18.exe' 'http://www.foobar2000.org/getfile/$1/foobar2000_v1.1.18.exe'\nIt could even automatically install the latest version if you regex a second match around the version number, but there is a limitation in Get-FilenameFromRegex that makes it replace the first match only, but that is probably easily fixed by someone more seasoned with PowerShell development. :P\n. This stuff about branching.\nSo much to learn, so little time..\n. So I should fork my own master so I can play around without affecting this pull-request, and fork it everytime I do a pull-request, right?\nHow does this actually work in regards of Chocolatey? Do you check/accept/reject requests when a new version is about to come out? Should I send these requests to other forks by people who also worked on the original files?\n. I see. Thanks for explaining. I'll leave 'my' master alone for now until I figure out how to do all that branching and merging and master mirroring without screwing it up and getting my paths mixed.\nI have fulltime work too. Js developing mostly. I just look like a noob all the time because\n- I am new to PowerShell (and I find it syntacticly horrible)\n- I am new to GitHub (using it for code anyway)\n- I am new to Chocolatey/NuGet, and I like to commit while spending the least amount of time possible actually understanding the inner workings of either of them, while still adding value in the form of packages or helpers.\n. Splitting pull requests\n. This thing has not made it in yet?\n. Also fixed Dutch language\n. I was wondering, is the Start Menu directory in Windows translated internally from English to the locale, or vice-versa?\nIf so, this becomes a hell of a lot easier:\n```\n  $appData = [environment]::GetFolderPath([environment+specialfolder]::ApplicationData)\n  $destPath = Join-Path \"$appData\" \"Microsoft\\Windows\\Start Menu\\Programs\\\"\n  $destLink = Join-Path \"$destPath\" \"Name Of Target.lnk\"\n$shell = New-Object -comObject WScript.Shell\n  $shortcut = $shell.CreateShortcut($destLink)\n  $shortcut.TargetPath = Join-Path \"C:\\Path\\To\\Binary.exe\"\n  $shortcut.Save()\n```\n. A reminder that the old version that only works on English systems is still unfixed one year later:\nhttps://github.com/chocolatey/chocolatey/blob/master/src/helpers/functions/Install-ChocolateyPinnedTaskBarItem.ps1\n. bump\n2015 alert. We need this.\n. Where is the discussion about this? You might be right, but I have no\nrecollection of year old decisions. :P\nAnyway, this needs to be automated in installZipPackage, where a lot of GUI\ntools now get a command-line shim when they would actually need a start\nmenu entry.\nE.g. SomeGraphicalTool.STARTMENU creates a user-friendly entry in Start\ninstead of a power-user Shim.\nThere are a lot of new packages with GUI tools that (automatically) create\nshims, making these packages valid for power users only. There needs to be\nan easy way to have shims for the really nerdy tools, and start menu\nentries for packages that average users might want to have pre-installed on\ntheir laptops.\nOp vr 17 jul. 2015 om 14:00 schreef Rob Reynolds notifications@github.com:\n\nI thought we decided to prefer Install-ChocolateyShortcut over this -\nhttps://github.com/chocolatey/choco/blob/master/src/chocolatey.resources/helpers/functions/Install-ChocolateyShortcut.ps1\n?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/pull/228#issuecomment-122256001\n.\n.  Is there a file or a proposed file that we could/should use for small\nglobal functions like this?\nI can imagine in the future it would be beneficial to globalize other small\nbut useful functions as well and it's a hassle to create separate files for\nall of them, mainly because every file would need to be specified in that\nother file that imports them all.\n\nOn Mon, Jan 7, 2013 at 6:54 PM, Rob Reynolds notifications@github.comwrote:\n\n+1 like :D\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/229#issuecomment-11962409.\n. What's the reason for that?\n\nFor trivial but handy functions, a global tricks.ps1 or whatever might be easier on the eyes (contemplating a future where there are multiple trivial functions globalized) when looking inside the functions directory.\nJust curious. \n(Knowledge is acceptance and acceptance is peace of mind. ;))\n. Can I assign myself to this?\n. I wanted to attach the pull request here but I guess that's not possible or I am still too new with GitHub :P But here:\nhttps://github.com/chocolatey/chocolatey/pull/231\n. The idea is to write less code, not more ;)\nAlso, the idea is to make sense for people less tech-savvy but with a wish to make packages. Like my grandma. She would like to make packages, and she called me three times, worried about words like processorAddressWidth. She thought it would have to be measured in centimeters haha, silly woman. She knows what bits are though, because 30 years ago she had System 1 8 bits. She also complained that it was renamed to Macintosh 128k a few years later, saying it was confusing.\nSeriously though, I named the function Get-ProcessorBits in the pullrequest. Get two people to agree with you and I'll change it.\n. Closed with unmerged commits. Can I delete the branch?\n. Okay, the Redsandro:getSystemBits  branch has been deleted.\nGithub proposed this, but I'm still a bit foggy on Git and what impacts what so I needed to ask to be sure. :)\n. Gep13 said:\n\nI believe that this may also solve Issue 218 as well:\n218\n\nThis adds a shortcut to the desktop which does not make the application appear in the Windows 7 or Windows 8 start menu. It is not indexed for searching. \nThis https://github.com/chocolatey/chocolatey/pull/228 allows pinning to start. I use it in my own installers, but this should really be included in Chocolatey imo.\nI think it'd be best to encourage packagers to do pin to start anything that is not a command line tool as discussed here: https://github.com/chocolatey/chocolatey/issues/305\n. I am still unsure about what you mean in the description, but once I do, I can add this to the pull request.\n. Also, I am not sure if this is partially related, but I would like a \"pkgSource\" INSIDE the nuspec. That way, a simple package update only requires one file to be edited instead of two.\nOh yeah, and if this is going to be an environmental variable, the very essence of #306 is to keep a global naming convention, so this parameter should be $env:ChocolateyPkgRoot or ChocolateyPackageRoot.\nLet's keep all the Chocolatey related env vars in that tiny little \"windows env viewer\" prepended with \"Chocolatey\".\n. Apart from that, is it possible to add a custom property to the nuspec and have the value in the .ps1 install script?\n. I think it should warn though, if something like that is possible.\nCould not package your package because .NET is not installed.\n. I believe running nuget actually sais dotnet is missing, but the cpack command fails silently. No mention of anything went wrong.\n. I removed the dependency for now in order to get the package to install on my testing VM, so I could push a  new version of Rename Master.\n. I don't fully understand what you are saying because this dependency thing worked before and it had the same source. But if I understand correctly, it's something that is planned to be fixed.\nUntil then, better no chocolatey dependencies?\n. Ah I see, thank you for clearing that up!\n. Appended your explanation to the Wiki: https://github.com/chocolatey/chocolatey/wiki/CreatePackages#testing-your-package\n. The problem is fixed for the website and feeds if people just use html characters, like &micro;Torrent.\n. If it works, then I am happy.\nBut personally I find it more important that all these \"trashy\" looking packages show up nicely on the site. \nAll these \"???\" failed encoding symbols degrade the perceived quality of packages or the whole Chocolatey system for users.\nSo if every maintainer would just fix those ???'s into proper encodings until it is no longer necessary, no one will notice the encoding is screwed up under the hood.\n. Okay, that sucks.\nBut the fact is, this unicode thing doesn't work. It should, but it doesn't. Only ansi.\nI'm concerned about the page looking wrong. So for now, packagers shouldn't use unicode characters. Use (C) (R) u etc. in stead.\n\n. I didn't know that, thanks for looking it up.\nSo these problematic packages have a nuspec that was saved with improper encoding.\nYes, please add a note to the wiki. :)\n. \n. You recognize Geany. That's cool! :smile: \n. Wow, that's elaborate.\nI've added a line to the guide for people who don't like reading:\n- You must save your files with UTF-8 character encoding without BOM.\nIf you anchor your character encoding paragraph, I can link to it.\n. Speaking of wiki rules, those rules are annoying to read for people who have ~~sexdaily~~ dyslexia or otherwise have difficulty reading.\nIt is pragmatically clever to have every basic rule summarized within the rule and bold that section.\nE.g.:\n\n\nPackages of software that is illegal in most countries in the world are prohibited to publish on chocolatey.org. This applies in particular to software that violates the copyright, pirated software and activation cracks. Remember that this also affects software that is especially designed to accomplish software piracy.\n\n\nCould be:\n\n\n\nDon't package illegal software. Packages of software that is illegal in most countries in the world are prohibited to publish on chocolatey.org. This applies in particular to software that violates the copyright, pirated software and activation cracks. Remember that this also affects software that is especially designed to accomplish software piracy.\n. TomOne, I don't see your section yet. Once you updated, can you give me the anchor?\n. @TomOne if I may make a suggestion..\n\n\nUse the UTF-8 character encoding for the .nuspec and .ps1 files. If you don\u2019t respect this rule, some characters are not displayed correctly in the Gallery on chocolatey.org, because the Gallery assumes UTF-8.\n\nDon\u2019t save your nuspec files with a byte order mark (BOM). A BOM is neither required nor recommended for UTF-8, because it can lead to several issues.\n\n\n:smile: \n-edit-\nOh wait, are you saying the DOM part is uncertain now?\nI'm confused. Luckily I don't often use strange characters in my packages.\n. Hmm. Windows is known to follow their own standard. Chocolatey is Windows-only. Let's just follow what they 'say' is the standard. :tongue: \nJust like this line ending thing.\nLinux: LF\nOSX: CR\nWindows: CRLF\nCreate a package in Linux and in Windows it's all messed up if you don't use the proper newline code. But I shouldn't be using Linux to create packages for Windows. :P\n. You are replying to the character encoding wiki thing. I am not sure what you mean. Did you mean to reply to #355 ? Not sure what you mean there either. I'm sure other public feeds won't appreciate unacceptable packages either.\n. That's some wisdom right there. ;)\n. Isn't the problem solved by using the 'proper' charset?\nOn Oct 26, 2013 11:52 PM, \"TomOne\" notifications@github.com wrote:\n\nI mostly ignore things I can't change and change the things I can change.\nSounds pretty clear to me: We make chocolatey better by leaving the\ncharacter encoding section as it is and let IE die. [image: :grinning:]\nSorry if I mention it, but your wisdom phrase has an inconsistency: How\ncan you be sure that you can\u2019t change anything? If you take a closer look\nat history, you will notice great people who have seemingly done the\nimpossible. But today we know that it wasn\u2019t impossible. Thanks to those\npeople we now have democracy, women's suffrage and no more slavery. At\nleast in the countries where we live.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/294#issuecomment-27156620\n.\n. > Notepad++ incorrectly uses the term ANSI as UTF-8 for UTF-8 encoded files without a BOM.\n\nWhat version are you running? I have no \"ANSI as UTF-8\" option, only \"UTF-8 without BOM\"\n\nVersion 6.2.2 Build Nov18 2012. (year old)\n. Oh you're right! It goes back to ANSI.\n. Documentation is important, especially for new people. Who get a first impression. So I got a few suggestions if I may. :smile: \n- Provide an easy solution that does not scare away potential new packagers\n- Provide links when obvious. \n- ~~Always write Chocolatey with a capital, just like God.~~ hmm oops I guess this is not the case on the website.\n- A sidebar-like note should not be a bullet point. Bullet points should illustrate must-read important points. Notes should be optional and clearly separated from a rule list. (Dyslexia approved documentation)\nSuggested edit that implements all of these:  \n\nCharacter encoding\nEither:\n- Do not use non-ASCII characters. \nOr:\n- Use the UTF-8 character encoding for the *.nuspec and *.ps1 files. If you don\u2019t respect this rule, some characters are not displayed correctly in the Gallery on Chocolatey.org, because the Gallery assumes UTF-8.\n- Do not save your *.nuspec files with a Byte Order Mark (BOM). A BOM is neither required nor recommended for UTF-8, because it can lead to several issues.\n- PowerShell scripts need to be saved in UTF-8 with BOM. PowerShell is ignoring the standards and needs a BOM in order to recognize scripts as UTF-8. Otherwise it processes non ASCII characters incorrectly. \n- Don\u2019t use the default Windows Editor. In addition to its lack of features, it can\u2019t even save UTF-8 files without BOM. Alternatives:\n  - Notepad++\n  - Geany\n- You have to specify the UTF-8 encoding in the first line of your *.nuspec files like so: <?xml version=\"1.0\" encoding=\"utf-8\"?>.\nNote: There is a lot of confusion in the world of character encodings: For example, ANSI is an incorrect term for the internal Windows character encodings, e.g. Windows-1252. But you should not use this encoding family anyway. In addition, Notepad++ incorrectly uses the term ANSI as UTF-8 for UTF-8 encoded files without a BOM. If you select UTF-8 in Notepad++, it means UTF-8 with BOM. Therefore Notepad++ must show ANSI as UTF-8 in the statusbar.\n\n. > Good suggestions, except this one\nWell, I bet 95% of package maintainers (including myself) never gave it a thought and everything works as long as you stick to ASCII characters, because the encoding doesn't really matter then.\nSo, in practice (practice trumps theory) it's a proper and within packages widely used solution until you are a seasoned packager and want to do crazy stuff like:\n\u03bcTorrent, \u00a9 2013 bitTorrent\u2122\u00ae\n. @TomOne: Thanks! :)\nAlthough I disagree with your story. Meet Hank. Always in a hurry. Dyslexic. Hates reading. Hates editors. Hates Windows. Doesn't care about other people's mess, but cares about end user quality.\nWill he be scared away by half a page of encoding guidelines, or will he be saved by a simple rule to keep in mind?\nThe fact is, there are many Richard-like package maintainers on Chocolatey.org. Without them, Chocolatey would be worth less. Hank-like packagers are better than Richard-like packagers.\nDon't chase away net quality improving Hanks. :runner: \nLet's agree to disagree.\n. Yes I know the docs, I run Debian myself. :bowtie: \nBut I would never be a Debian packager. Their process is why many popular software isn't packaged for Debian. That's why there has been an ITP (intent to package) of Ubuntu One for 5 years now and it still isn't there. FreeFileSync has been ITP for 3 years and never seen the light.\n\nI\u2019m glad that I\u2019ve never met such a person. :smile:\n\nWell I might have exaggerated a bit, but here I am.\nLike Hank, I care about the quality of the user experience. Not about rules for the sake of rules, when it is proven that 9 out of 10 packages work fine when ignoring them. My packages are awesome, and apart from one*, they are all just default ANSI and no one will ever notice or care or have a problem with them.\n*) Hence my rule, for this one package your rules applied, and now it works fine too. User experience quality: 100%.\n(TBH I made one mistake in one package about guidelines but that one is unlisted now.)\n\nDon\u2019t tell me that almost all Windows users are like Richard or Hank.\n\nI didn't say that. I said that there are many Richard-like package maintainers on Chocolatey.org which is an exact quote from you. To prove my point. That if everyone would share my opinion, Chocolatey's supply would be higher quality than it is today, because Hanks care more than Richards.\nAnd to make it more fun, I actually think most Windows users are Richards. Certainly not all. There are a lot of Bobs. Only the above-average Windows user will even know/use/package (for) Chocolatey, and you said it yourself: there are many Richard-like package maintainers. Imagine how many Richards there are in the entire pool of Windows users.  :scream: \n(Just to clarify, I'm contradicting you because I don't agree, but in no way do I want to imply that all Windows users are Richards. All devs are awesome. Windows devs are even more awesome because they have to dig through those weird Microsoft syntaxes. :stuck_out_tongue: )\n-edit-\nSame thing happened with the multipackage installation code I proposed. ferventcoder totally rewrote it in clever ways inside the vbs in stead of outside. But for the user experience the end result is the same. It's a great addition either way.\nLet's just say we all care about something and we should applaud that. Am I wrong? :wink: \n. Microsoft chose ANSI and by ANSI they meant Windows-1252. I don't know if that's part of an \"embrace, extend and extinguish\" strategy, but when I am on a Windows machine, it's the law.\nThey made that a default, and when I use that, everything works. Except for characters that you don't find on MSX-Basic either. So I don't use them. Windows doesn't care because it doesn't need to decode characters. As long as you don't use characters that need decoding.\nIt is extremely simple.\nYou are seriously comparing this to total chaos?\nI'm gonna write my next package in Notepad.exe and no one will notice. :smiling_imp: \n. Your Internet Explorer analogy is flawed. If there's one thing I keep repeating I care about most, it's user experience. Stay away from IE! :smile: \nI don't see how you don't get it. Fact: Most packages work perfectly. Fact: Most packages don't have or need character encoding because they don't need character decoding. Fact: If you do need decoded characters, you have to take care of character encoding.\nThese are the facts, so I am factually right, although you can disagree with my opinion about the thoughts that surround it.\nSo again, agree to disagree, or be wrong. Your choice. :P\nFor the rest, I'm not interested in discussing the matter any further.\n. Agreed, but when maintainers notice they 'suddenly' have a character problem, they should want to read the guidelines in more detail and discover what is happening and fix the problem. If not, we give them a yellow card. :P \n. I don't think that will work. Once you save your file in standard (according to Windows) encoding, the character becomes unreadable when you reopen the file. But when I change encoding to utf-8, the char remains unreadable. I have to enter it again.\nBut if it will work, it's clever. What are computers for? To make our lives easier. :)\n. Once certain characters are \u25a1, like \u25a1Torrent \u25a12013 bitTorrent\u25a1, you can't get them back from a conversion.\nBut if you say there's no problem, I'm not gonna argue. I'd love to have cpack take care of this!\nI \u25a1 Unicode.\n-edit-\nI just tried. If you save it directly and load it directly, there is no problem. But if you save your package to a git repository, load it on a different machine and then push it, it's already too late.\n-edit-\nOr something. I have had this, but am not exactly sure what step causes this.\n. This I like.\nAlthough I always thought cpack was just a reference plus some alternate configuration to the nuget pack binary. Customizing and compiling binaries seems like a difficult thing. But it's too far from my bed so what do I know. :) \n. This is clever. But also pretty far-fetched in my opinion. And by that I mean that no Windows packager with a right mind will have a bash interpreter running.\nI don't mean that as an insult because according to those rules, I don't have a right mind either. :P \n. Disregard my earlier message. I was thinking in terms of the cpack pipeline. I thought you were working towards a solution for all packagers from which there is no escape, preferably without them even knowing. :)\n. @TomOne UTFCast Express might be relevant to your interests.\n(Did not use, just stumbled across)\n. I think you will be okay, as long as you don't use a BOM with a Dutch\nnuspec.\nMet vriendelijke groet,\n~Sander\nhttp://www.Redsandro.com/\nOn Mon, Oct 27, 2014 at 2:59 PM, Rob Reynolds notifications@github.com\nwrote:\n\nThere is only one way to really find out what happens if you use a BOM\nwith the nuspec. :)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/294#issuecomment-60595836\n.\n. All I care about is that the unicode characters show properly in packages and on the website/gallery.\n\nThey don't by default (when using BOM).\n@TomOne figured out a set of rules to follow that makes the packages end up nicely with all unicode characters in the chocolatey gallery. Personally, I don't care or understand too much about the theory behind this. I do however know that it doesn't work properly if you don't follow this advise.\nBut\nIf you are saying that this is also possible with a simple fix in cpack/cpush, I'm all for that.\nhttps://github.com/chocolatey/chocolatey/blob/master/src/functions/Chocolatey-Pack.ps1\nhttps://github.com/chocolatey/chocolatey/blob/master/src/functions/Chocolatey-Push.ps1\n. Sweet! Are you sure you ignored all the 'rules'?\nDid @ferventcoder update things? Can you verify, @TomOne?\nIf anything, the instructions are sexier if we don't need the encoding hackery.\n. @jberezanski and @svnpenn were right to raise the issue. I guess the character guidelines are obsolete.\n. Anyway, I strongly encourage you to merge this (and port it to the monolith if you want, but merge it first). When you do this trick on a random strangers laptop, they become so happy, you get instant Chocolatey fans. But it won't work if they install Chocolatey on someone elses laptop. Until this is merged, that is. ;)\n. Nope, it works fine here. Single packages are handled exactly as before. I just installed putty to confirm your response but I had no problem. This is Windows 7 Home Premium with .NET 4.0.\ncinst.bat is shorthand for chocolatey.cmd, and that is the one I changed. 99% of people will use cinst. 0,9% of people will use chocolatey.cmd And you want to hold off the update to accomodate for the other 0,1%? (PS Don't get offended by my exaggeration skills, that's just how I communicate. ;) )\nAnd your pipe example is a totally bad unintuitive crazy kinda Chocolatey-will-never-get-popular-this-way language construct IMO. I just want to see this Chocolatey be more like... well, every other package manager out there in the Linux world so that you can actually guess how it works.\napt-get install geany firefox vlc chromium libreoffice filezilla\nyum install apache2 php mysql vsftp mongodb\nchocolatey install 7zip vlc putty GoogleChrome firefox filezilla\ncinst 7zip vlc putty GoogleChrome firefox filezilla\nThere I fixed it. You're welcome. ;)\n. Are you running windows XP or an older .NET? Or did you make an accidental typo when trying my code?\nBecause if it is the former that does not like the code, I can rewrite the batch in MS-DOS style. Uglier but maybe more compatible? (I'm just guessing here) I thought XP already did work with the 'new' syntax though.\n. One last thing, I am not \"Relying on the count of params\". It just batches all params one by one.\n. Oh! I misunderstood you! You are correct. Let me get back to you when I am\nnot asleep. My mistake. I got a solution.\nOn Jun 26, 2013 6:49 AM, \"Rich Siegel\" notifications@github.com wrote:\n\ni am not using alpha version (which is the one on github iirc)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/304#issuecomment-20027033\n.\n. You were absolutely right. When you said \"cinst putty -Version 0.62.0.1 works before this change but not after.\" I thought you just mentioned the version of putty as a courtesy to me to be able to verify, instead of meaning an actual command. I should have picked up on the minus sign, but you can also use backticks to minimize confusion.\n\nHaving said that, I now remember why I didn't push this mod in the first place when I made it: Although I personally don't care about version management and just ignored it - I only use Chocolatey to batch install 30 apps on a clean system for others, and additional apps for myself although I rarely use Windows - I know I purposely ignored the rest of the commands and that is why I shouldn't push this. I just forgot about it after a long time.\nHowever, I do seriously mean that this feature is absolutely invaluable to the point that I'd rather create a custom installer for myself and everyone I recommend Chocolatey to, than wait 15 months for someone to port this to ps.\nOn a more positive note, I just fixed all the problems in my latest commit. :) You can now either install multiple packages, or give commands using -wildcards as specified in chocolatey /?.\n. Single:\n``` cmd\nC:\\Users\\Redsandro>cinst notepadplusplus\nChocolatey (v0.9.8.20) is installing notepadplusplus and dependencies. By installing you accept the license for notepadplusplus and each dependency you are installing.\n__ notepadplusplus.install v6.3.3 ____\nblah blah\n```\nAdded commands (works with all commands):\n``` cmd\nC:\\Users\\Redsandro>cinst notepadplusplus -version 2.24.1\nChocolatey (v0.9.8.20) is installing notepadplusplus and dependencies. By installing you accept the license for notepadplusplus and each dependency you are installing.\nUnable to find version '2.24.1' of package 'notepadplusplus'.\netc etc\n```\nBatch mode:\n``` cmd\nC:\\Users\\Redsandro>cinst notepadplusplus treesize\nInstalling packages in batch mode.\nInstalling notepadplusplus ...\nChocolatey (v0.9.8.20) is installing notepadplusplus and dependencies. By installing you accept the license for notepadplusplus and each dependency you are installing.\n'notepadplusplus 6.3.3' already installed.\nIf you want to reinstall the current version of an existing package, please use the -force command.\nFinished installing 'notepadplusplus' and dependencies - if errors not shown in console, none detected. Check log for errors if unsure.\nInstalling treesize ...\nChocolatey (v0.9.8.20) is installing treesize and dependencies. By installing you accept the license for treesize and each dependency you are installing.\nUnable to find package 'treesize'.\nFinished installing 'treesize' and dependencies - if errors not shown in console, none detected. Check log for errors if unsure.\nInstalled all packages. :)\n``\n. Does that work? As far as I know,$commandis always the first and$packageNameis always the second, because they are not used aswildcards. I don't think thatpsdoes automatic shifting if the first is actually$version` but is extracted.\nI think this is pretty rock-solid. But in the end you can break everything if you want it to, especially this hideous thing called powerscript. But this implementation does everything the way chocolatey /? says it is done. At least as far as I have tested.\n. Also, don't underestimate the power of cmd. The ps does not require fixing. But you're right I'm curious to others' opinions too.\nI do know the opinion of non-technical users. It has astounding similarities with the last sentence in the chorus of Thrift Shop by Macklemore.\nAs a final exposition I would like to constrain how much added value this is to normal users. And we're all busy people, the smallest ps features take forever to get in mainline.\nThe reason that I am pushing this so vividly is that I had four people applaud enthousiasticly this Chocolatey trick I did, and when they mention they want to implement that in their own workflow, I have to explain that I'm using a custom version and they need to copy my blabla.cmd to yaddah yaddah (translated into how they perceive my instructions) and they are like: Wut? http://goo.gl/OdpNo\n. Wow, it's handy to know powershell. :P \nDetails are very important. Details can even make an overpriced turd popular. Just look at Apple Inc. That's why I'm seemingly nitpicky, but please understand it is only because I care. :)\nThat said, this is a big step forward. But it's still unintuitive-ish. These days, smartphones come without a manual because everything is tackled in the simplest feasible decimation. People (can) rely on that. Not needing comma's is a smartphone that doesn't need a manual. Otherwise we'd have to explain in the manual: We know the 10 most popular package managers use space delimited package lists for batch installation, but we need a comma separated list because [insert reason the user doesn't really care about].\nEspecially if you promote Chocolatey as \"like apt-get\".\nI know, semantically \"like\" allows for variations. But that's not how the world, users from the three most popular distro's that use apt-get, and google, work.\nWe can probably use both btw. Just putting it out there.\n. > this requires comma between package names.  \nTemporarily? :P\nComma is inherent to powershell array afaik so I'm not sure how you propose to do that, but that last comment makes me happy. :)\n. That simple huh.\nBy c# replacing ps, do you mean you want to rewrite the entire monolith?\n. I don't understand the consequences of removing something that needs to stay in, but this is a huge step in the usability of Chocolatey! I am happy.\nAlthough I didn't test anything (already got a working batcher in place ;)) so I don't know if those rismoney testcases will hold up.\n. So once rismoney approves, I suggest uploading a new release as soon as possible. YESTERDAY!\n. Yes I approve with a smile on my face. :)\nDid not expect to have this available (through -prerelease) today.\n. Not really understanding what you mean. I thought your auto-update packages did something like that. I don't really understand those either. :P But apart from that, aren't all package sources hardcoded? We would need to have a sources registry. In which case we might as well add the silent installer switches to a registry. And the installation code. And we wouldn't need packages anymore.\nSorry I am probably misunderstanding this. :P\n. Or should I have put this in src\\helpers\\functions\\ and added to src\\helpers\\chocolateyInstaller.psm1 in order for it to work like this?\nIdk, I tested it inside packages themselves (because I already pushed one), not sure where to put it in the monolith.\n. I did Fus Ro Dah push (--force) and added to chocolateyInstaller.psm1 as well.\nPlus made it more maintainable (readable) (deja vu).\n. Note that this package also features backwards compatible transitioning between old and new $env: as first mentioned here: https://github.com/chocolatey/chocolatey/issues/216#issuecomment-11639464\n\nI would even go as far as renaming chocolatey_bin_root to ChocolateyBinRoot so it has the same naming convention as ChocolateyInstall.\n\nAs part of my quality assurance policy described here: https://github.com/chocolatey/chocolatey/pull/304#issuecomment-20126209\n\nDetails are very important. Details can even make an overpriced turd popular. Just look at Apple Inc. That's why I'm seemingly nitpicky\n. Ah I just carried on with the bin_root var I found in one of your packages, I thought it was your convention.\n. I miss out on those kinda things, I guess that's why I need to follow @chocolateynuget\n. > Plus made it more maintainable (readable) (deja vu).\n\nAh here is my deja-vu concerning src\\helpers\\chocolateyInstaller.psm1 coming from:  https://github.com/chocolatey/chocolatey/blob/aca9f1545bbc774fba190374cacc7f8c74af7286/src/helpers/chocolateyInstaller.psm1\nYou already merged this to master. But when I git fetch upstream && merge upstream/master my local source is still old. Am I using git wrong?\n. I did\ngit remote add upstream git://github.com/chocolatey/chocolatey.git\ngit fetch upstream\ngit merge upstream/master\n. I thought so too (should). Maybe I error-ed in some other way. I'll see what happens next time I create a new module.\n. Oh yeah I see. You have to click on the different version first.\n. > Also, cup ends without error if there's an error like package exists or trying to install same version.\nThis is a valid issue though, I just had it again, forgot I already upgraded on a machine:\n``` cmd\nC:\\Users\\Redsandro>cup tomboy -pre\n... (8 second pause, no output)\nC:\\Users\\Redsandro>cup tomboy -pre\n... (8 second pause, no output)\nC:\\Users\\Redsandro>cup -pre tomboy\n... (8 second pause, no output)\nC:\\Users\\Redsandro>cinst tomboy -pre\nChocolatey (v0.9.8.21-alpha2) is installing tomboy and dependencies. By installing you accept the license for tomboy and each dependency you are installing.\n'tomboy 1.15.1-beta' already installed.\nIf you want to reinstall the current version of an existing package, please use the -force command.\n... Aha, so that's why!\n```\n. This works\n. :+1: \n. I'm confused. All I know is it both works for me (tested) and I am unaware\nof the practical difference. You can choose to merge either one of the\ncommits, all the same to me. :P\nOn Jul 3, 2013 4:13 AM, \"Rob Reynolds\" notifications@github.com wrote:\n\nBoo, we'll switch to write-output all at the same time... right now it's\nwrite-host and we have a logger\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/313#issuecomment-20391648\n.\n. I experience the same, it's okay if some maintainers are occupied, but often there is just no response.\n\nThere is also a massive amount of package trash where there are duplicate packages, personalized packages, personalized package names, and all kinds of other against-guidlines things.\nSome of the packages I've seen on the gallery are prefixed with these names:\n- Ed.Evans\n- EthanBrown\n- Fschwiet\n- PProvost\n- TimRayburn\n- AlanStevens\n- TheGiant\n- secondstrategy\n- kareemsultan\n- Jivkok\n- kellyelton\n- fruin\n- gb\n- msanico (new 2014-07)\n  - No icons\n  - Bad pakage names\n  - Separate packages for 32 and 64 bit\n- jbatte47 (new 2014-07)\n  - Naming guidelines\n  - Personalized package\nI'd like to see the gallery free of duplicates and personalized packages. \nAlso, new maintainers are not even encouraged to read the rules. Here is the registration verification mail:\n\nThank you for registering with the Chocolatey Gallery. We can't wait to see what packages you'll upload.\n\nI would strongly advise to put the entire packaging guidelines text in the confirmation mail.\n. How did this suddenly turn into something I don't quite follow? :smile: \nIt's actually possible to have the package repo fire up a VM and test the package?\nWhat if thee of us upload a package at the same time, three VMs will launch and we need three MS licenses?\nI think the registry snap compare to check for bs is a bit tough though, updated software often has new fingers in the registry, so it would need manual updating. Might as well do a manual check on bs (toolbars) then.\n. I'll just leave this here..\nhttps://github.com/Genbox/VirusTotal.NET\n. Just a thought, this would also help prevent the necessity of triaging in certain cases. Why not have a VM build ~~all~~ ~~some~~ core team Automatic Packages? We wouldn't need to be running Windows and a scheduler. Give a virtual chocolatey user some pushing to do. :)\n. > Can you elaborate more on this @Redsandro\nIn this case I'm actually not talking about Boxstarter, but in the light of this being a Chocolatey topic, the talk about VMs gave me this idea. Automatic packages need to be automatically generated on computers running all the time (or at least frequently). I don't run Windows, so I cannot turn my packages into automatic packages.\nWhy not have a VM do this, and have the user Chocolatey user push them, as described in the community packages repo.\nFor every package that is stuck unupdated with an unresponsive maintainer, we (or someone who decides this) can just 'kidnap' the stuck package, turn it into an autopackage, and hand it over to the VM/Chocolatey user.\n. Idea 1\nConcerning the packages that are similar because owners don't respond and someone else decides to upload a newer version under a different name:\nMaybe there should be a small group of moderators with the power to take over packages, remove the install script, add a dependency to the new package, or add the new package owner to the old package (to keep the sensible name).\nI wanted to install Visual Studio for someone the other day, and there are like 40 packages. No idea which one I need. Maybe it's a bad example, but I had something like this before with some SQL implementation, and I remember having to compare versions, and guess which one I should install.\nIdea 2\nAutomation. Set a clock (for e.g. 30 days) when a package maintainer is contacted for an update, and if they didn't respond within that timeframe, automatically add core team members as package owners and remove the old owner.\n. Is it possible to automate a system to move packages to MyGet, which I know nothing about, but @gep13 recommended for alternative package hosting?\nWould be cool if moderators could 'move' invalid packages to a separate 'stream'.\n. @TomOne said on Dec 7 2013:\n\nYes, I agree with you. But remember that many of these name prefixed and duplicate packages were created before I suggested the package rules and added them to the wiki after Rob had approved them. \n\nGuidelines like https://github.com/chocolatey/chocolatey/issues/316 and https://github.com/chocolatey/chocolatey/issues/317 are still being ignored well over half a year after I raised the issue. Soon every popular package will have a funny name, and only future obscure ones will be named properly. I recently came across HitmanProPortable_x64 and HitmanProPortable_x86. Thee \"violations\" in one package name. This slowly growing library of bad names can be (partially) prevented using some relatively easy tricks.\n1. Put the entire packaging guidelines text in the confirmation mail. (see comment 30056205)\n2. Put the entire naming guidelines in the confirmation mail.\n3. Have cpack run checks, especially on the package id.\n   - Similar to @TomOne's idea to have cpack prevent users from messing up encodings in https://github.com/chocolatey/chocolatey/issues/294\n   - If it matches /portable/i but not /\\.portable$/, refuse to pack/push.\n     - Friendly message why.\n   - If there's a period . not followed by installer$ or portable$, refuse to pack/push.\n     - Friendly suggest replacing dots by dashes with example. E.g.: my.sweet.package -> my-sweet-package.\n   - Same with underscores _.\n. That would help indeed.\nBut how would you typify \"easier\"? I think a moderation system could be in place a year from now. And as I said before, a poor solution in practice is infinitely better than a perfect solution in theory. (And I'm not even saying the solution is poor.)\nThe above 'trick' 1 and 2 could be in place today, because it doesn't require too much thinking or efford.\nI can make a proposal with links instead of inline rules (because I cannot figure out how html markup works).\n. Here you go: https://github.com/chocolatey/chocolatey.org/pull/87\nFeel free to word it any way you see fit.\n. I agree, but I'm not sure where the line is drawn. Hell, I'm even annoyed by all the .tool .installer .app .portable .commandline and .iDontKnowHowToCategorizeThisAppButOtherwisePeopleDontKnowWhatTheHellTheyAreDoing packages, but that's the direction we're going.\nIn other words, this is something only ferventcoder can answer, I just made the rules more readable without actually changing them, and I need some kind of permission before I go ahead and update the wiki. :smile: \n. @TomOne Isn't .install the default/obvious way to go? I understand .portable but appending .install to pretty much every package is pretty silly in my golden opinion.\nI discovered Chocolatey when googling apt-get for windows. apt-get is intuitive. Both apt-get and cinst can do cinst firefox freefilesync libreoffice now.\nBut do I understand you correctly that this would be cinst firefox.install freefilesync.install libreoffice.install in the future? That would be kinda retarded.\n\nThey are essential to understand what the package contains.  \n\nFor .portable it is convenient. You can do cinst pidgin or cinst pidgin.portable (made up example). Makes sense. Intuitive.\nBut the default shouldn't introduce command line bloat in my opinion. You could store all metadata in the package-id: cinst pidgin.gpl3.x64.tags[internet,messaging].portable but that's not how we should learn what's in the package, we got the package page with information to know what is in the package.\n. Ah ok, I interpreted that wrong. I have reading issues. :P\nSo folks can set a preference for either portable or installer? That makes some sense. :)\n. > And there are still folks which ignore the rules and guidelines in the wiki and use the deprecated suffixes.  \nNot so much as ignore, I think more like unaware of. Package maintainers should in my opinion get an email when the guidlines change considerably.\n. Ok I will apply them in about 30 seconds. :+1: \n. https://github.com/chocolatey/chocolatey/wiki/CreatePackages#rules-to-be-observed-before-publishing-packages :+1: \n. There are many commercial and trial packages out there. This is not mentioned in the description. If it sounds nice and you try it out, only to find out it's a trial or you need a license immediately, it's annoying.\nI suggest adding the rule:\n- Packaging commercial or trial software? Clearly state this in the package description.\nWhat do you think?\n. Added. :thumbsup: \n. This could get more important over time. Let's put it on a future wishlist. :)\n. I found it: This installation package could not be opened. Contact the application vendor to verify that this is a valid Windows Installer package.\n[source]\nI already contacted the package owners, though in my experience, I never ever get a reply. :P \nAnyway, the point of this issue report is more that in my opinion, Chocolatey should just show one error (once) and continue with the next package.\n. > WTF on number 2?\nYeah crazy. I just checked on another machine where it still had Version: '0.9.8.21-alpha2' installed. There chocolatey /? works fine.\n``` cmd\nC:\\Users\\Redsandro>chocolatey version\nfound         : 0.9.8.21-alpha2\nname          : chocolatey\nlatestCompare : 000000000000.000000000009.000000000008.000000000020\nverMessage    : Your version is newer than the most recent. You must be smarter than the average bear...\nlatest        : 0.9.8.20\nfoundCompare  : 000000000000.000000000009.000000000008.000000000021.alpha2\n```\nSo let's try:\ncup -pre chocolatey\nWut? Now my terminal closes. Is that normal? I guess so. New terminal:\n``` cmd\nC:\\Users\\Redsandro>chocolatey version\nfound         : 0.9.8.21-beta1\nname          : chocolatey\nlatestCompare : 000000000000.000000000009.000000000008.000000000020\nverMessage    : Your version is newer than the most recent. You must be smarter than the average bear...\nlatest        : 0.9.8.20\nfoundCompare  : 000000000000.000000000009.000000000008.000000000021.beta1\nReading environment variables from registry. Please wait... Done.\n```\nAnd now for the test:\n``` cmd\nC:\\Users\\Redsandro>chocolatey /?\nCalls one batch program from another.\nCALL [drive:][path]filename [batch-parameters]\nbatch-parameters   Specifies any command-line information required by the\n                     batch program.\nIf Command Extensions are enabled CALL changes as follows:\nCALL command now accepts labels as the target of the CALL.  The syntax\nis:\nCALL :label arguments\n\n(...)\n```\nSo yes, this call /? bug was introduced after alpha2.\n. How can I downgrade to the alpha from august? (latest after the beta was taken down)\n. Thanks!\nOn Nov 4, 2013 11:03 PM, \"Rob Reynolds\" notifications@github.com wrote:\n\nCinst chocolatey -version theversionyouwant\nOn Monday, November 4, 2013, Redsandro wrote:\n\nHow can I downgrade to the alpha from august? (latest after the beta was\ntaken down)\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/chocolatey/chocolatey/issues/358#issuecomment-27727173>\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/358#issuecomment-27727266\n.\n. > What was the original that this came in?\n\nI think it was https://github.com/chocolatey/chocolatey/pull/306 and it looks like it's still open. Although I was sure that it was already merged and I got the 'delete branch' message. Or maybe I'm going slightly mad.\nAnyway, can you tell us a statistical mean for how long it takes for current branch to become non-prerelease?\nThat's the moment when we can use this in live packages. :)\n. I added this to the ruby package and temporarily included the same Get-BinRoot.ps1 file as an included script: https://github.com/ferventcoder/nugetpackages/pull/110\nThis can be a prototype fix for all packages that have this problem. The extra file can be removed from packages once Chocolatey is no longer pre-release.\n. You have my interest. I have no idea what you are saying, but I don't like batch redirects.\nWhat are shim files in this scope?\n. I'd also like to suggest that Write-Host comments should try to stick to an 80 character maximum. as not to annoy a default-sized terminal. Better use two lines split in a more human way, than rely on auto-wrap.\n(Just like comments in most source code is traditionally no longer than 72 characters for readability.)\n. Sweet :)\nOn Mar 2, 2014 10:54 PM, \"Rob Reynolds\" notifications@github.com wrote:\n\nI am going to pull in #376https://github.com/chocolatey/chocolatey/pull/376though.\n\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/374#issuecomment-36468591\n.\n. Sweet, but not yet epic enough for a new chapter in the bible.\nI like the readable URL thing for the download notice.\nI'll check again after #376 is pulled. :)\n\n\n. Actually, it's often more like 3 lines placed in a more human-readable way over the original 3 lines autowrapped and broken mid-sentence. Unless you changed the width of the default terminal to span one and a half monitor.\nBut I thought about your suggestion before and I thought leave the first line/part and have the rest optional with a -verbose flag.\nOr as a middleground solution, get the width of the terminal, write a single line if it fits, write 3 lines if it doesn't.\nOr truncate the url in the output to only the domain, and truncate the target to only the filename. (Not a fan of this)\n. I like to emphasize the importance of prettifying the output. \nThere are two kinds of human conscious perception: orderly (usually women) and industrious (usually technical people). Right now, Chocolatey scores a 8 at industriousness and a 2 at orderliness.\nStudies have shown that visual orderliness is psychologically associated with quality and trustworthiness. Right now the general output looks like a mess. I'm just saying that this issue is way more important than most industriousness people (AKA developers AKA people here) think.\nI am also talking about #376 here. Of course you don't have to agree with my propositions, but you should do something.\nThink about spacing, new information should start at the same point the next line. Do not cram too much information on one line. Imagine the Linux dmesg boot process. It would be MUCH shorter if multiple pieces of information would be on the same line like in Chocolatey, but shorter is not always better. They are put below each other because it improves readability and thus the feeling of quality. Think about using color (#376) (orderly) in stead of ascii (industrious) as visual cue's.\nLet's be industrious where it counts (in the code) and orderly where it counts (in the output).\n(edit/ oh shoot wanted to post this at #374)\n. I am glad we could make a deal! :smile: \n. Cool. Will there be a preview this month?\n On Mar 2, 2014 10:27 PM, \"Rob Reynolds\" notifications@github.com wrote:\n\nFound a bit cleaner method on this, so closing this.\n\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/375#issuecomment-36467621\n.\n. @ferventcoder : For every package you see the full statement\nChocolatey (v0.9.8.23) is installing 'SomePackage' and dependencies. By installing you accept the license for 'renamemaster' and each dependency you are installing.\nSomePackage v1.1.1.1\n(...)\nChocolatey (v0.9.8.23) is installing 'OtherPackage' and dependencies. By installing you accept the license for 'renamemaster' and each dependency you are installing.\nOtherPackage v1.1.1.1\n(...)\n\nWould be nice to see the message about Chocolatey once (and licenses also once, if you have to). The packages can be mentioned once (apt-get style) because the package is mentioned again on the next line anyway.\n\nChocolatey (v0.9.8.23) is installing the following packages:\nSomePackage OtherPackage ThisPackage ThatPackage\nBy installing you accept the licenses for these packages and dependencies.\nSomePackage v1.1.1.1\n(...)\nOtherPackage v1.1.1.1\n(...)\n\nOr something. I don't know where to add a once-only message in the installation process, but then these messages can be left out: https://github.com/chocolatey/chocolatey/search?q=is+installing+%27&ref=cmdform\n. Following up on https://github.com/chocolatey/chocolatey/pull/375#issuecomment-31063231 : Am home now (where I have Windows 8) and here is the output of default 80 width terminal for installing krita and paint.net:\n``` cmd\nC:\\Users\\Redsandro>cinst krita paint.net\nChocolatey (v0.9.8.21-beta1) is installing 'krita' and dependencies. By \ninstalling you accept the license for 'krita' and each dependency you are \ninstalling.\n__ krita v2.7.9.0 _\nDownloading Calligra Krita 64 bit (\nhttp://heap.kogmbh.net/downloads/kritax64_2.7.9.0.msi) to \nC:\\Users\\Redsandro\\AppData\\Local\\Temp\\chocolatey\\Calligra Krita\\Calligra \nKritaInstall.MSI\nInstalling Calligra Krita...\nElevating Permissions and running msiexec /i \n\"C:\\Users\\Redsandro\\AppData\\Local\\Temp\\chocolatey\\Calligra Krita\\Calligra \nKritaInstall.MSI\" /quiet /norestart . This may take awhile, depending on the \nstatements.\nCalligra Krita has been installed.\nCalligra Krita has finished successfully! The chocolatey gods have answered \nyour request!\nCalligra Krita has finished successfully! The chocolatey gods have answered \nyour request!\nFinished installing 'krita' and dependencies - if errors not shown in \nconsole, none detected. Check log for errors if unsure.\nReading environment variables from registry. Please wait... Done.\nChocolatey (v0.9.8.21-beta1) is installing 'paint.net' and dependencies. By \ninstalling you accept the license for 'paint.net' and each dependency you \nare installing.\n_ paint.net v3.5.11.20130909 ___\nMode                LastWriteTime     Length Name\n----                -------------     ------ ----\nda---        12/21/2013     14:39            paint.net\nDownloading paint.net 64 bit (\nhttp://www.dotpdn.com/files/Paint.NET.3.5.11.Install.zip) to \nC:\\Users\\Redsandro\\AppData\\Local\\Temp\\chocolatey\\paint.net\\paint.netInstall.zi\np\nExtracting \nC:\\Users\\Redsandro\\AppData\\Local\\Temp\\chocolatey\\paint.net\\paint.netInstall.zi\np to C:\\Common\\Chocolatey\\lib\\paint.net.3.5.11.20130909\\tools...\nC:\\Common\\Chocolatey\\lib\\paint.net.3.5.11.20130909\\tools\npaint.net has finished successfully! The chocolatey gods have answered your \nrequest!\nInstalling paint.net...\nElevating Permissions and running \nC:\\Common\\Chocolatey\\lib\\paint.net.3.5.11.20130909\\tools\\Paint.NET.3.5.11.Inst\nall.exe /auto DESKTOPSHORTCUT=0 . This may take awhile, depending on the \nstatements.\npaint.net has been installed.\npaint.net has finished successfully! The chocolatey gods have answered your \nrequest!\nFinished installing 'paint.net' and dependencies - if errors not shown in \nconsole, none detected. Check log for errors if unsure.\nReading environment variables from registry. Please wait... Done.\n```\nHere is what I think it should look like:\n``` cmd\nC:\\Users\\Redsandro>cinst krita paint.net\nChocolatey (v0.9.8.23) is installing the following packages:\nkrita paint.net\nBy installing you accept the licenses for these packages and dependencies.\nkrita v2.7.9.0\nDownloading Calligra Krita 64 bit\nFrom: http://heap.kogmbh.net/downloads/krita_x64_2.7.9.0.msi\nTo:   %Temp%\\chocolatey\\Calligra Krita\\Calligra KritaInstall.MSI\nInstalling Calligra Krita...\nElevating Permissions...\nRunning MSI installer...\nCalligra Krita has been installed.\npaint.net v3.5.11.20130909\nDownloading paint.net 64 bit\nFrom: http://www.dotpdn.com/files/Paint.NET.3.5.11.Install.zip\nTo:   %Temp%\\chocolatey\\paint.net\\paint.netInstall.zip\nExtracting...\nInstalling paint.net...\nElevating Permissions...\nRunning EXE installer...\npaint.net has been installed.\nChocolatey installed 2 packages. 0 packages failed.\nSee the log for details.\nThe chocolatey gods have answered your request!\n``\n. I'm not even usingYum(apt-get` here) but I am not surprised because #GMTA. :wink: \nTo illustrate that we don't need large error messages. Just output the error to the log, and output a single line saying installation failed to the output. It will say, e.g.\n``` cmd\n(...)\npaint.net installation failed. :(\nChocolatey installed 1 packages. 1 packages failed.\nSee the log for details.\nThe chocolatey gods have answered your request!\n```\n. > If we are going to say see the log for details, then I think we should include where the log file is located\nI agree*, as long as it fits in a 80 character line, otherwise it needs to be shortened.\n\nor have a Read-Host, or something, asking if you want to open the log file.\n\nI absolutely disagree. Nothing should hang the process. Not waiting for input. It should be able to complete on it's own. Maybe with an exit code.\n\nlist the failed pkg names so one would not have to crack open a log file just to figure out what did not install.\n\nI agree*, but you would not have to open the log file to figure that out. Because now that the new output is actually a pleasure to read, you'll quickly spot a red line. Here's a colored mockup:\n\nhttp://cssdesk.com/JUTPR\n\nall verbose info that goes to the log should also gk to the console if -verbose is passed or $verbose preference is set to continue.\n\nI agree.\n\noutput psobjects to the pipeline with info like success/fail, exceptions, packagename\n\nI don't understand so I'll leave opinions to the professionals. :)\n*) There's more interesting stuff we could do, for example, list the dependencies of all packages after the to-be-installed packages. But I thought: Let's clean this up first, and add features later. Small steps have a bigger chance of actually being stepped. :)\nWe could also remove the To: %Temp% line and put it in the log, because it doesn't really add anything. But the From: line is important (seeing (and trusting) the source is important).\n. Textually this is pretty awesome! :thumbsup: \nHowever, the color doesn't really add anything. And the text can be more 80-friendly. So please allow me to comment on that:\n1. Using all the same color has no visual benefit. Alternate between key information and verbose information (and successful information and error information) with color and weight.\n2. Take care of the default console width, you don't want a sentence wrap it's last two characters to the next line.\n   - Preferably, you don't want to wrap at all. You don't really have to be polite and say please to the user when you can say it in one line. :)\nMockup:\n\n. Ah I already made a two-package mockup, shame to throw it away. So I'll paste it anyway.\nBut sounds cool. I'm not sure about anything PowerShell either, but it is supported in Unix escape codes and I used to do that for curses text output in python scripts for Linux. They could be run on Windows too, and it just displayed the bold text in the console. I have no idea if curses does that or if the console just supports that natively.\n\n\n. It's a frickin binary!\nAre you doing a complete rewrite or something?\n. I believe you. :) This is better!\nAny rough* idea when we're all going to use this?\n\n*) a month, season, year, lustrum?\n. Very nice!\nThis is convenient for both audiences, neat and simple, or optional verbosity!\n:thumbsup: \n. Really cool. What language is that?\n(those lines you removed) :)\n. That's probably cool but not something that will get me excited.\nNow we're going to get all these hipster packages polluting the feed.\nBesides, OSX is totally different in every way, how would that work?\n. Oh I would love that for Linux!\nI find myself every now and then making a (requested) update, only having to wait a week before I have access to a Windows machine for cpack and cpush.\n. The current output and new colors are looking nice! :thumbsup: \nThe limegreen package titles are very distinctive, the output is friendly to look at.\nIf stuff goes wrong, the -debug optionally makes output very verbose.\n. Nothing wrong with it. I use regexes for other packages too. Just didn't think about using a bunch of them in a row.\nFeel free to improve. Coming from Linux myself, I didn't know powershell either when I discovered Chocolatey.\nMaybe your regexes are smarter, I just rewrote them because I don't get the sed syntax with all the comma's. :question: \n. Same problem again. Fixing the broken CNET parser needs all packages fixed. This should be internal, just like SourceForge is handled internally.\n. For reference:\nhttps://github.com/Redsandro/chocolatey/blob/master/autopackages/PartitionAssistant/tools/Get-UrlFromCnet2.ps1\nHowever, why does this return an array?\n[0]    =>    True,\n[1]    =>    \"http://www.TheUrlThatIAmLookingFor'\n. Thanks! :+1: \n. I still think helpers should have a certain format, and they should be packages that can be referenced as dependencies.\nOne change means one package to fix, and all packages that depend on it will work again.\n. I just tried it here on powershell, it's instant.\nYou can optionally add [environment]::Is64BitOperatingSystem before the first check, but I am not sure how to check between false and undefined (if there is such a thing in PS) to switch older OSses.\nLike (this code is not working in PS, but to give you an idea):\n``` ps\nif ([environment]::Is64BitOperatingSystem === True) {\n    $osArch = '64-bit'\n} elseif([environment]::Is64BitOperatingSystem === False) { # False != undefined\n    $osArch = '32-bit'\n}\non older systems, $osArch is undefined, so we can continue\nif (-Not $osArch) {\n    $os    = Get-WmiObject Win32_OperatingSystem\n    $osArch = $os.OSArchitecture\n}\n... etc\n```\n. Did it work with the testing? ;)\nI'm thinking this is an essential fix because I think the old code causes packages to try to install 64 bit software on 64 bit computers with a 32 bit OS installed. Didn't test that though, only people who don't use git install 32 bit OSses on 64 bit computers.\nBut I'm trying to make the general public addicted to Chocolatey. That includes intellectually challenged people, or people who for some other reason ended up with a 32 bit license and a 64 bit computer. :P\n. I'm on Linux so I only tested https://github.com/bill-long/chocolatey/pull/1 in my common sense emulator, but this should fix both old and new users. The Get-BinRoot is used in more packages than just OHM so it might be a good idea to implement this.\n. No that's not what's supposed to close it, not sure what did.\nBut anything you merge with your pull-request is automatically added to the pull-request so no need to submit a new one. :)\nEdit: Ah I read the notification, not the edit. You figured it out. You can see all the commits to this pull request here: https://github.com/chocolatey/chocolatey/pull/421/commits\nEdit: PS - ~~if you haven't already, please see if the regex does what I advertised. I'm pretty sure but don't have a Windows machine to test right now.~~ Ah, you already tested this in https://github.com/bill-long/chocolatey/pull/2#issuecomment-36654950 :)\n. @gep13 ah that's probable, I didn't know github was so attentive.\n. But setting it to c:\\ is what causes these errors: https://github.com/chocolatey/chocolatey/issues/430\n\n. Either way, please merge @bill-long's initial commit ASAP, otherwise soon everyone will have c:\\ as default.\nhttps://github.com/bill-long/chocolatey/commit/d4806255e8d73567a64db0c3a8ad9196a13d226f\n. Agreed. @ferventcoder @bill-long I suggest not reverting my additions. If you want to support c:\\, first fix the issues at hand that make this impossible, and then revert my changes that fix current issues.\nDon't deny gifted sneakers when at some point in the future you want to put your feet in boots you haven't bought yet. :wink: \n. Fixed two packages https://github.com/Redsandro/chocolatey/commit/eb8bbcf7f9d745a002a471afcc350c51c53df227\nI'm on Linux, won't have access to Windows until sometime next week. Any volunteers I can make co-owner of OpenHardwareMonitor and RenameMaster, willing to cpack and cpush?\n- Source:\n  -  OpenHardwareMonitor\n    - https://github.com/Redsandro/chocolatey/tree/master/openhardwaremonitor\n  -  RenameMaster\n    - https://github.com/Redsandro/chocolatey/tree/master/renamemaster\n. Thanks. Added you.\n. @gep13 I agree, but chocolatey (the user associated with coreteampackages) never accepted co-ownership of some packages I wanted to put up there.\nI think (can't find it back this moment) @ferventcoder argued coreteampackages was only meant for certain specific widely used packages (contradicting your idea of \"The more, the better\"), otherwise coreteampackages would turn into a heap were people could just dump packages. And to some degree, he is right.\nAlso, I don't know how to autopackage, even with the nice tutorial. I'm on a Windows machine mostly during the weekends. And lately those weekends are reserved for a beautiful girl until further notice. I don't dare guessing the process without being able to test. :)\nAnd also also, RenameMaster can't be autopackage afaik, because it uses some download-trickery that requires human tinkering.\n. Redsandro\n\nI want to drop some packages (..)\nHowever people seem to use it (..) so it seems a shame to unlist and abandon it.\nHow does this work? Do I create a pullrequest in the coreteampackages repo?\n\nFerventcoder\n\nThe core team and core packages are/will be those pkgs that are critical/crucial. It is not a dumping ground for offloading packages that folks are no longer interested in maintaining.  \n\nJust quoting the essentials makes the communication lose it's nuance; you can read the full thing here: https://groups.google.com/d/msg/chocolatey/YyQn2Q2xmn0/LBXjjbGkvEIJ\nI'm definitely interested in what's going on there, thanks. I'll give you a shout when I have some more time to wrap my head around something new. :smile: \n. So in stead of the Chocolatey user, there are just some users (like you) who 'serve' autopackages under their own name?\nIf at some point in the future, I got a package auto'ed, I should add you as co-owner in stead of chocolatey?\n. Ah, okay, so my picture of the mise-en-sc\u00e8ne was right initially.\nIn order to qualify for being anyone you'd at least need to have a (periodically) running Windows machine. Your setup (and idea to have all autopackages at the same place anyway) sounds clever to me.\nChocolatey didn't accept ownership for reasons outlined by ferventcoder. (And in the end I hadn't figured out how to auto my packages within the time I had set aside for the conversion anyway. Also, for some of the packages, tonigellida offered to convert them and host them, which I gladly accepted.)\n. :thumbsup: \n. Yeah it should, but there were some bugs. I introduced this as a\ntransitional thing, I think @ferventcoder had a different approach to\ncertain things in mind but I am not sure if that is one release away our\none year away. Is the bugfix merged with mainline (non-pre) release? I can\ndocument some of this in a quick fashion if that's a good idea.\n. @Nilzor, I Added the Overview section to the Helper documentation, hoping it might be helpful. I Added minimal summary for Get-BinRoot and Get-ProcessorBits. Would be helpful if others expand descriptions for other helpers in similar minimal fashion.\n. :warning: @ferventcoder, dude, you haven't merged the fix yet! We reckoned this is pretty critical.\nI know everybody is busy and all, but some pullrequests, especially ones that are deemed critical-ish, take (too) long to be merged. Also, discussion for things that are proposed but not merged due to indecisiveness between multiple parties is hard to keep track of, resulting in ideas and bugfixes evaporating in a vacuum of time and dreams.\nIf there's a solution to a problem, be it not in line with your personal vision, I'd recommend merging or applying the solution first, and apply your preference whenever you get around to doing it.\nA meager solution committed is always infinitely better than a perfect solution in your head.\n. I just created a simple script - that I am ashamed to have worked more than an hour on - that will automate helper documentation somewhat. See #458.\n. Great! :smile: \nHowever, to continue the discussion, I do actually think the default should be $env:ChocolateyInstall\\bin in stead of c:\\tools to prevent root clutter. I think it had always been that, but we accidentally introduced c:\\tools because the bug ignored the old default. (I think, not sure)\n. I added this proposed default to Get-BinRoot.ps1 in branch docGenerator #458 because that one has the embedded comments for the doc generator anyway.\nSee https://github.com/Redsandro/chocolatey-origin/blob/docGenerator/src/helpers/functions/Get-BinRoot.ps1\n(Of course feel free to change, e.g. %ChocolateyInstall%/tools in stead)\n. Since when do we have a markdown branch for the wiki? Me (and others) just\nuse the editor after a bit of discussion.\nThis change seems 100% objective and accurate so I would vote to just add\nit in the wiki which is now outdated indeed.\nOn Apr 16, 2014 8:40 AM, \"Frode Nilsen\" notifications@github.com wrote:\n. I have applied your edit, and changed it slightly:\n- The Ruby package is a bad example because it might confuse users into embedding the old and buggy BinRoot. Changed it to MinGW.\n- The whole point of Get-BinRoot is to not install anything in the root if people forget to set BinRoot, so the C:\\Ruby### example is obsolete and will only happen if the package maintainer specifically forces it to install there, or if C:\\ is set as the BinRoot, which is not currently possible due to https://github.com/chocolatey/chocolatey/issues/430 (And if it was up to me it woudln't ever be possible because that's just stupid (imo)).\n- The default path is gonna be either %SystemDrive%:\\Tools if https://github.com/bill-long/chocolatey/pull/1 is gonna be merged, or %ChocolateyInstall%\\bin to prevent the unpopular thing called clutter, which is under consideration over here https://github.com/chocolatey/chocolatey/pull/458\nFeel free to verify and improve the documentation. :)\n. @ferventcoder ssteward54 is right. Because this issue is starting to bug me, I downloaded an image from Modern.IE and installed Chocolatey. Next, I installed sysinternals. And indeed. ChocolateyBinRoot is set to C:.\n. \n\n. @ssteward54 please specify what package(s) cause this. I think maybe some package(s) might have the buggy binroot hardcoded.\n. Do we also need to address the issue where people now have environment $env:ChocolateyBinRoot set to c:\\ because of this bug? It will continue to cause errors.\ni.e. pull this one: https://github.com/bill-long/chocolatey/commit/25f7865719e9b101a9860d0a4fa6cad2a0ed3c9d\n. And until then, merge the request I proposed. There's no need to have people with unusable broken installations just because we're contemplating future options when there's been a bugfix ready for 3 months now.\n. It was in this one, but @bill-long reverted that. @bill-long, could you\nun-revert that? Can't do much at the moment, I'm on vacation in Berlin with\nmy tablet. :)\nOn May 31, 2014 2:50 PM, \"Rob Reynolds\" notifications@github.com wrote:\n\n@Redsandro https://github.com/Redsandro is there a PR for that fix\nsomewhere?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/pull/421#issuecomment-44747462.\n. Ah, never underestimate the power of git. :)\nOn May 31, 2014 3:02 PM, \"Rob Reynolds\" notifications@github.com wrote:\nNo need. Already good -\nCherry picked\n- d480625\n  https://github.com/chocolatey/chocolatey/commit/d4806255e8d73567a64db0c3a8ad9196a13d226f\n- cd11749\n  https://github.com/chocolatey/chocolatey/commit/cd11749affd02b9445437517b46d49ad25ce7eb5\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/pull/421#issuecomment-44747711.\n. Thank you so much for testing this on Windows 8.1.\nI will advise people with this problem to update Chocolatey or clean their system.\n. PS - can you tell me what version of Chocolatey you were using?\n. I don't know why the installer recurses all the paths. But good catch.\n. Seems Chocolatey recurses the paths and uses the proper environmental variable impromerly set by getBinRoot.\n. Yes. I think it's ready for pulling now. If you agree with the fixes. Shall I close this one?\n. I have no recollection of this pull request. No idea what I was trying to do.\n. I guess it used to work, but it wasn't picked up, and now it needs work. \n\nI don't have time to look into this right now. Feel free to pick this up. If not, Thanks for inquiring. :) Here's a picture of some shaved ice as a thank you: :shaved_ice: \n. Updated.\nCould you be so nice and convert this to proper powershell code, @ferventcoder? It's a start, we can finetune from there.\nI'll provide you with some animals:\n:cat: :rabbit: :koala: :cow: :elephant: \nHere are some especially cute ones:\n:baby_chick: :penguin: :bird: :pig: :us:\n. seeing the syntax, I'm guessing something like this. Am on Linux so I cannot test. Is there a powershell emulator? Would make my life easier. :P\nif (installerType == 'msi')\n    switch -regex ($s.ExitCode) {\n        \"1603\" {\n            write-error \"There is a problem with your system configuration, or the package is already installed elsewhere.\"\n            write-error \"See http://support.microsoft.com/kb/834484 for more information.\"\n        }\n        \"1613|1637\" {\n            write-error \"Your system needs to be updated in order to install this package.\"\n        }\n        \"1618\" {\n            write-error \"You are running another installer. Finish that installation first.\"\n        }\n        \"1610|1619|1620\" {\n            write-error \"The installer is broken. Install an older version or wait for an update.\"\n        }\n        \"1639\" {\n            write-error \"The installer cannot be used this way. Contact the package maintainers.\"\n        }\n        default {}\n    }\n. Sorry, I was a bit TLDR, but I did. Vanilla Windows 7. Vanilla chocolatey. Same error.\n\nOfftopic: \nVagrant is just VirtualBox with a command line wrapper around it, so there's no real difference between vagrant up or modern.ie, unless you got a special base box with all configuration done in advance. If you do not have a base box, creating a Vagrant instance is a lot more work than just clicking import on VirtualBox. In the end, the result is the same. A running vanilla-ish installation.\nWith that said, I didn't know there were Windows base boxes? I couldn't find them anywhere. I thought that was illegal. It does make life easier though. What's in them? How do you communicate with them? They have no ssh, right? How do you preconfigure them on the disk image without starting the license grace period?\nAlso, people don't just have a license lying around, that's why I use the modern.ie boxes.\n\nPS - I already use Vagrant with a Modern.ie drive. I just didn't mention it because I find it irrelevant.\n. Interesting, I didn't know about these boxes!\nWhat do these include? The Modern.ie ones also include guest additions so you can use them without configuration, and after 30 days just remove and re-import them. Ssh would be nice but I can't seem to install stuff without starting the OS (and starting the license timeout)\n\nYou can try grabbing the evaluation ISO at http://www.microsoft.com/en-us/evalcenter/evaluate-windows-server-2012-r2\n\nIsn't it better for chocolatey testing purposes (AKA figuring out why certain users have problems) to use the product most realistically used by the audience? I use these 'boxes', as in, I just import them and repack them to a box without any kind of vagranty additives.\nhttps://modern.ie/en-us/virtualization-tools#downloads\n. Well like I said the error message is the same, but if you think the new version has more clues in it's output, I will gladly fire up a clean Win7 VM.\nBut note that the gtksharp package was updated (as per my request) to include dotnet4.0 as a dependency and now gtksharp will install fine. Not sure what the impact is for this error, but at least the error in a life Windows installation (not VM) is gone.\nInstalling Chocolatey\n```\nMicrosoft Windows [Version 6.1.7601]\nCopyright (c) 2009 Microsoft Corporation.  All rights reserved.\nC:\\Windows\\system32>@powershell -NoProfile -ExecutionPolicy unrestricted -Command \"iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))\" && SET PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\nMode                LastWriteTime     Length Name\n----                -------------     ------ ----\nd----         7/28/2014   2:21 PM            chocInstall\nDownloading http://chocolatey.org/api/v2/package/chocolatey/ to C:\\Users\\IEUser\\AppData\\Local\\Temp\\chocolatey\\chocInstall\\chocolatey.zip\nDownload 7Zip commandline tool\nDownloading http://chocolatey.org/7za.exe to C:\\Users\\IEUser\\AppData\\Local\\Temp\\chocolatey\\chocInstall\\7za.exe\nExtracting C:\\Users\\IEUser\\AppData\\Local\\Temp\\chocolatey\\chocInstall\\chocolatey.zip to C:\\Users\\IEUser\\AppData\\Local\\Temp\\chocolatey\\chocInstall...\nInstalling chocolatey on this machine\nCreating ChocolateyInstall as an Environment variable (targeting 'Machine') and setting it to 'C:\\ProgramData\\chocolatey'\nWe are setting up the Chocolatey repository for NuGet packages that should be at the machine level. Think executables/application packages, not library packages.\nThat is what Chocolatey NuGet goodness is for. The repository is set up at 'C:\\ProgramData\\chocolatey'.\nThe packages themselves go to 'C:\\ProgramData\\chocolatey\\lib' (i.e. C:\\ProgramData\\chocolatey\\lib\\yourPackageName).\nA shim file for the command line goes to 'C:\\ProgramData\\chocolatey\\bin' and points to an executable in 'C:\\ProgramData\\chocolatey\\lib\\yourPackageName'.\nCreating Chocolatey NuGet folders if they do not already exist.\nCopying the contents of 'C:\\Users\\IEUser\\AppData\\Local\\Temp\\chocolatey\\chocInstall\\tools\\chocolateyInstall' to 'C:\\ProgramData\\chocolatey'.\nPATH environment variable does not have C:\\ProgramData\\chocolatey\\bin in it. Adding...\nChocolatey is now ready.\nYou can call chocolatey from anywhere, command line or powershell by typing choco.\nRun choco /? for a list of functions.\nYou may need to shut down and restart powershell and/or consoles first prior to using chocolatey.\nEnsuring chocolatey commands are on the path\nC:\\Windows\\system32>\n```\nInstalling tomboy package\n```\nC:\\Windows\\system32>cinst tomboy\nChocolatey (v0.9.8.27) is installing 'tomboy' and dependencies. By installing you accept the license for 'tomboy' and each dependency you are installing.\ngtksharp v2.12.10\nDownloading gtksharp 32 bit\n  from 'http://download.mono-project.com/gtk-sharp/gtk-sharp-2.12.10.win32.msi'\nInstalling gtksharp...\ngtksharp has been installed.\ngtksharp has finished successfully! The chocolatey gods have answered your request!\ntomboy v1.14.0\nWrite-Error : tomboy did not finish successfully. Boo to the chocolatey gods!\n\n[ERROR] Exception calling \"GetResponse\" with \"0\" argument(s): \"The operation has timed out\"\nAt C:\\ProgramData\\chocolatey\\chocolateyinstall\\helpers\\functions\\Write-ChocolateyFailure.ps1:30 char:14\n+   Write-Error <<<<  $errorMessage\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nWrite-Error : Package 'tomboy v1.14.0' did not install successfully: Exception calling \"GetResponse\" with \"0\" argument(s): \"The operation has timed out\"\nAt C:\\ProgramData\\chocolatey\\chocolateyinstall\\functions\\Chocolatey-NuGet.ps1:90 char:28\n+                 Write-Error <<<<  \"Package '$installedPackageName v$installedPackageVersion' did not install successfully: $($_.Exception.Message)\"\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nFinished installing 'tomboy' and dependencies - if errors not shown in console, none detected. Check log for errors if unsure.\nC:\\Windows\\system32>\n```\nShit I forgot -debug\n```\nC:\\Windows\\system32>cinst tomboy -debug\nDEBUG: Running 'Append-InstallLog' with chocoInstallLog:''\nDEBUG: Arguments: $command = 'install'|$force=False\n|$prerelease=False|$packageNames='tomboy'\n|$source=''\n|$version=''|$allVersions=False\n|$overrideArguments=False|$InstallArguments=''\n|$localonly=False|$verbosity=False|$debug=True|$quiet=False\n|$name=''|$ignoreDependencies=False|$forceX86=False\n|$packageParameters=''\n|PowerShellVersion=2.0|OSVersion=6.1.7601.65536\nDEBUG: Running 'Chocolatey-Install' for 'tomboy' with source: '', version: '', installerArguments:''\nDEBUG: Running 'Chocolatey-NuGet' for tomboy with source:''. Force? False\nChocolatey (v0.9.8.27) is installing 'tomboy' and dependencies. By installing you accept the license for 'tomboy' and each dependency you are installing.\nDEBUG: Installing packages to \"C:\\ProgramData\\chocolatey\\lib\".\nDEBUG: Running 'Run-NuGet' for tomboy with source: '', version:''\nDEBUG:  NuGet _\nDEBUG: Running 'Get-ConfigValue' with configValue:'useNuGetForSources'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'useNuGetForSources'\nDEBUG: After checking the user config the value of 'useNuGetForSources' is ''\nDEBUG: Value not found in the user config file - checking the global config\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'useNuGetForSources'\nDEBUG: After checking the global config the value of 'useNuGetForSources' is 'false'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'sources'\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'sources'\nDEBUG: Using global sources\nDEBUG: Using '-Source \"https://chocolatey.org/api/v2/;\"' as the source arguments\nDEBUG: Calling 'C:\\ProgramData\\chocolatey\\chocolateyinstall\\nuget.exe' install tomboy -OutputDirectory \"C:\\ProgramData\\chocolatey\\lib\" -Source \"https://chocolatey.org/api/v2/;\" -NonInteractive\n-NoCache\nDEBUG: Attempting to resolve dependency 'gtksharp (\u2265 2.12.10)'.\nInstalling 'tomboy 1.14.0'.\nSuccessfully installed 'tomboy 1.14.0'.\nDEBUG: Evaluating NuGet output for line: Attempting to resolve dependency 'gtksharp (\u2265 2.12.10)'.\nDEBUG: Evaluating NuGet output for line: Installing 'tomboy 1.14.0'.\nDEBUG: Evaluating NuGet output for line: Successfully installed 'tomboy 1.14.0'.\nDEBUG: NuGet installed tomboy. If we are ignoring dependencies (False) then we will clean this up.\ntomboy v1.14.0\nDEBUG: Running 'Delete-ExistingErrorLog' for tomboy\nDEBUG: Looking for failure log at 'C:\\Users\\IEUser\\AppData\\Local\\Temp\\chocolatey\\tomboy\\failure.log'\nDEBUG: Found the failure log. Deleting it...\nDEBUG: Running 'Run-ChocolateyPS1' for tomboy with packageFolder:'C:\\ProgramData\\chocolatey\\lib\\tomboy.1.14.0', action: 'install'\nDEBUG:    PowerShell install (chocolateyinstall.ps1) \nDEBUG:   Looking for chocolateyinstall.ps1 in folder 'C:\\ProgramData\\chocolatey\\lib\\tomboy.1.14.0'. If chocolateyinstall.ps1 is found, it will be run.\nDEBUG: Action file is 'chocolateyInstall.ps1'\nDEBUG: Running 'C:\\ProgramData\\chocolatey\\lib\\tomboy.1.14.0\\tools\\chocolateyInstall.ps1'\nDEBUG: Running 'Install-ChocolateyPackage' for tomboy with url:'http://download.gnome.org/binaries/win32/tomboy/1.14/Tomboy-1.14.0.msi', args: '/quiet', fileType: 'msi', url64bit:\n'http://download.gnome.org/binaries/win32/tomboy/1.14/Tomboy-1.14.0.msi', checksum: '', checksumType: '', checksum64: '', checksumType64: '', validExitCodes: '0 3010'\nDEBUG: Running 'Get-ChocolateyWebFile' for tomboy with url:'http://download.gnome.org/binaries/win32/tomboy/1.14/Tomboy-1.14.0.msi',\nfileFullPath:'C:\\Users\\IEUser\\AppData\\Local\\Temp\\chocolatey\\tomboy\\tomboyInstall.msi', url64bit:'http://download.gnome.org/binaries/win32/tomboy/1.14/Tomboy-1.14.0.msi', checksum: '',\nchecksumType: '', checksum64: '', checksumType64: ''\nDEBUG: Running 'Get-ProcessorBits'\nDEBUG: CPU is 32 bit\nDEBUG: Running 'Get-WebHeaders' with url:'http://download.gnome.org/binaries/win32/tomboy/1.14/Tomboy-1.14.0.msi', userAgent: 'chocolatey command line'\nDEBUG: Setting the UserAgent to 'chocolatey command line'\nWrite-Error : tomboy did not finish successfully. Boo to the chocolatey gods!\n\n[ERROR] Exception calling \"GetResponse\" with \"0\" argument(s): \"The operation has timed out\"\nAt C:\\ProgramData\\chocolatey\\chocolateyinstall\\helpers\\functions\\Write-ChocolateyFailure.ps1:30 char:14\n+   Write-Error <<<<  $errorMessage\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nDEBUG: Running 'Move-BadInstall' for tomboy version: '1.14.0', packageFolder:'C:\\ProgramData\\chocolatey\\lib\\tomboy.1.14.0'\nDEBUG: Moving bad package 'tomboy v1.14.0' to 'C:\\ProgramData\\chocolatey\\lib-bad'.\nWrite-Error : Package 'tomboy v1.14.0' did not install successfully: Exception calling \"GetResponse\" with \"0\" argument(s): \"The operation has timed out\"\nAt C:\\ProgramData\\chocolatey\\chocolateyinstall\\functions\\Chocolatey-NuGet.ps1:90 char:28\n+                 Write-Error <<<<  \"Package '$installedPackageName v$installedPackageVersion' did not install successfully: $($_.Exception.Message)\"\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nDEBUG: Evaluating NuGet output for line:\nFinished installing 'tomboy' and dependencies - if errors not shown in console, none detected. Check log for errors if unsure.\nC:\\Windows\\system32>\n```\nRunning manually\n\nWhat? I thought the thing installed fine as a dependency of tomboy\n\ngtksharp has finished successfully! The chocolatey gods have answered your request!\n\nInstalling gtksharp package separately\nNote how it installs fine now that DotNet4.0 is a dependency\n```\nC:\\Windows\\system32>cinst gtksharp\nChocolatey (v0.9.8.27) is installing 'gtksharp' and dependencies. By installing you accept the license for 'gtksharp' and each dependency you are installing.\nDotNet4.0 v4.0.30319.20130222\nDownloading webcmd 32 bit\n  from 'http://www.iis.net/community/files/webpi/webpicmdline_anycpu.zip'\nExtracting C:\\Users\\IEUser\\AppData\\Local\\Temp\\chocolatey\\webcmd\\webcmdInstall.zip to C:\\Users\\IEUser\\AppData\\Local\\Temp...\nC:\\Users\\IEUser\\AppData\\Local\\Temp\nwebcmd has finished successfully! The chocolatey gods have answered your request!\nThe software that you obtain using the Web Platform Installer Command Line Tool is licensed to you by its owner.  Microsoft grants you no rights for third party software.\nSuccessfully loaded metadata from feed https://www.microsoft.com/web/webpi/3.0/webproductlist.xml\nSuccessfully loaded metadata from feed https://www.microsoft.com/web/webpi/3.0/webapplicationlist.xml\nSuccessfully loaded metadata from feed https://www.microsoft.com/web/webpi/3.0/mediaproductlist.xml\nSuccessfully loaded metadata from feed https://www.microsoft.com/web/webpi/3.0/toolsproductlist.xml\nSuccessfully loaded metadata from feed https://www.microsoft.com/web/webpi/3.0/enterpriseproductlist.xml\nAdded product NETFramework4 to the install list\nTrying to add related product IIS51 for product NETFramework4\nProduct IIS51 has no installers available for this platform\nTrying to add related product IIS60 for product NETFramework4\nProduct IIS60 has no installers available for this platform\nTrying to add related product StaticContent for product NETFramework4\nAdded product StaticContent to the install list\nTrying to add missing dependency WASProcessModel for product StaticContent\nAdded product WASProcessModel to the install list\nTrying to add related product DefaultDocument for product NETFramework4\nAdded product DefaultDocument to the install list\nTrying to add related product DirectoryBrowse for product NETFramework4\nAdded product DirectoryBrowse to the install list\nTrying to add related product HTTPErrors for product NETFramework4\nAdded product HTTPErrors to the install list\nTrying to add related product HTTPLogging for product NETFramework4\nAdded product HTTPLogging to the install list\nTrying to add related product LoggingTools for product NETFramework4\nAdded product LoggingTools to the install list\nTrying to add related product RequestMonitor for product NETFramework4\nAdded product RequestMonitor to the install list\nTrying to add related product RequestFiltering for product NETFramework4\nAdded product RequestFiltering to the install list\nTrying to add related product StaticContentCompression for product NETFramework4\nAdded product StaticContentCompression to the install list\nTrying to add related product IISManagementConsole for product NETFramework4\nAdded product IISManagementConsole to the install list\nTrying to add missing dependency WASConfigurationAPI for product IISManagementConsole\nAdded product WASConfigurationAPI to the install list\nTrying to add related product ASPNET for product NETFramework4\nAdded product ASPNET to the install list\nTrying to add missing dependency NETExtensibility for product ASPNET\nAdded product NETExtensibility to the install list\nTrying to add missing dependency WASNetFxEnvironment for product NETExtensibility\nAdded product WASNetFxEnvironment to the install list\nTrying to add missing dependency ISAPIExtensions for product ASPNET\nAdded product ISAPIExtensions to the install list\nTrying to add missing dependency ISAPIFilters for product ASPNET\nAdded product ISAPIFilters to the install list\nTrying to add missing dependency WASNetFxEnvironment for product ASPNET\nProduct WASNetFxEnvironment is either already added to the cart or already installed\nTrying to add related product NETExtensibility for product NETFramework4\nProduct NETExtensibility is either already added to the cart or already installed\nTrying to add related product ISAPIFilters for product NETFramework4\nProduct ISAPIFilters is either already added to the cart or already installed\nTrying to add related product ISAPIExtensions for product NETFramework4\nProduct ISAPIExtensions is either already added to the cart or already installed\nThe following software is going to be installed:\nEULA : 'IIS: WAS Process Model', which is owned by 'Microsoft' will be turned on\nEULA : 'IIS: WAS Configuration API', which is owned by 'Microsoft' will be turned on\nEULA : 'IIS: WAS .NET Environment', which is owned by 'Microsoft' will be turned on\nEULA : 'IIS: Static Content', which is owned by 'Microsoft' will be turned on\nEULA : 'IIS: Default Document', which is owned by 'Microsoft' will be turned on\nEULA : 'IIS: Directory Browsing', which is owned by 'Microsoft' will be turned on\nEULA : 'IIS: HTTP Errors', which is owned by 'Microsoft' will be turned on\nEULA : 'IIS: HTTP Logging', which is owned by 'Microsoft' will be turned on\nEULA : 'IIS: Logging Tools', which is owned by 'Microsoft' will be turned on\nEULA : 'IIS: Request Monitor', which is owned by 'Microsoft' will be turned on\nEULA : 'IIS: Request Filtering', which is owned by 'Microsoft' will be turned on\nEULA : 'IIS: Static Content Compression', which is owned by 'Microsoft' will be turned on\nEULA : 'IIS: ISAPI Extensions', which is owned by 'Microsoft' will be turned on\nEULA : 'IIS: ISAPI Filters', which is owned by 'Microsoft' will be turned on\nEULA : 'IIS: Management Console', which is owned by 'Microsoft' will be turned on\nEULA : 'IIS: .NET Extensibility', which is owned by 'Microsoft' will be turned on\nEULA : 'IIS: ASP.NET', which is owned by 'Microsoft' will be turned on\nEULA : 'Microsoft .NET Framework 4', which is owned by 'Microsoft Corporation', will be downloaded from 'http://go.microsoft.com/fwlink/?LinkId=164154'.\nThe license agreement to 'Microsoft .NET Framework 4' is available at 'http://go.microsoft.com/fwlink/?LinkId=188993&clcid=0x409'.\nAccepted Eulas.\nStarting : Starting Installation\nStarted installing Products...\nStarted installing: WASProcessModel\nStarted installing: WASConfigurationAPI\nStarted installing: WASNetFxEnvironment\nStarted installing: StaticContent\nStarted installing: DefaultDocument\nStarted installing: DirectoryBrowse\nStarted installing: HTTPErrors\nStarted installing: HTTPLogging\nStarted installing: LoggingTools\nStarted installing: RequestMonitor\nStarted installing: RequestFiltering\nStarted installing: StaticContentCompression\nStarted installing: ISAPIExtensions\nStarted installing: ISAPIFilters\nStarted installing: IISManagementConsole\nStarted installing: NETExtensibility\nStarted installing: ASPNET\nStarted downloading products...\nStarted downloading: NETFramework4\nDownloadedNETFramework4\nInstall completed (Success): IIS: WAS Process Model\nWASProcessModel : Installed\nInstall completed (Success): IIS: WAS Configuration API\nWASConfigurationAPI : Installed\nInstall completed (Success): IIS: WAS .NET Environment\nWASNetFxEnvironment : Installed\nInstall completed (Success): IIS: Static Content\nStaticContent : Installed\nInstall completed (Success): IIS: Default Document\nDefaultDocument : Installed\nInstall completed (Success): IIS: Directory Browsing\nDirectoryBrowse : Installed\nInstall completed (Success): IIS: HTTP Errors\nHTTPErrors : Installed\nInstall completed (Success): IIS: HTTP Logging\nHTTPLogging : Installed\nInstall completed (Success): IIS: Logging Tools\nLoggingTools : Installed\nInstall completed (Success): IIS: Request Monitor\nRequestMonitor : Installed\nInstall completed (Success): IIS: Request Filtering\nRequestFiltering : Installed\nInstall completed (Success): IIS: Static Content Compression\nStaticContentCompression : Installed\nInstall completed (Success): IIS: ISAPI Extensions\nISAPIExtensions : Installed\nInstall completed (Success): IIS: ISAPI Filters\nISAPIFilters : Installed\nInstall completed (Success): IIS: Management Console\nIISManagementConsole : Installed\nInstall completed (Success): IIS: .NET Extensibility\nNETExtensibility : Installed\nInstall completed (Success): IIS: ASP.NET\nASPNET : Installed\nStarted installing: NETFramework4\nInstall completed (Success): Microsoft .NET Framework 4\nNETFramework4 : Installed\nVerifying successful installation...\nMicrosoft .NET Framework 4                         True\nIIS: Static Content                                True\nIIS: WAS Process Model                             True\nIIS: Default Document                              True\nIIS: Directory Browsing                            True\nIIS: HTTP Errors                                   True\nIIS: HTTP Logging                                  True\nIIS: Logging Tools                                 True\nIIS: Request Monitor                               True\nIIS: Request Filtering                             True\nIIS: Static Content Compression                    True\nIIS: Management Console                            True\nIIS: WAS Configuration API                         True\nIIS: ASP.NET                                       True\nIIS: .NET Extensibility                            True\nIIS: WAS .NET Environment                          True\nIIS: ISAPI Extensions                              True\nIIS: ISAPI Filters                                 True\nInstall of Products: SUCCESS\nCreation of Product Logs: FAILURE\nDownload count: 232.18 Mb, 67 sec\nInstallation count: 236.24 Mb, 68 sec\nProducts            , Down. Size, Inst. Time, Down. Time, Inst. Size, Log Size\nWASProcessModel     , 0         , 30        , 0         , 51.54     , 0\nWASConfigurationAPI , 0         , 30        , 0         , 51.54     , 0\nWASNetFxEnvironment , 0         , 30        , 0         , 51.54     , 0\nStaticContent       , 0         , 30        , 0         , 51.54     , 0\nDefaultDocument     , 0         , 30        , 0         , 51.54     , 0\nDirectoryBrowse     , 0         , 30        , 0         , 51.54     , 0\nHTTPErrors          , 0         , 30        , 0         , 51.54     , 0\nHTTPLogging         , 0         , 30        , 0         , 51.54     , 0\nLoggingTools        , 0         , 30        , 0         , 51.54     , 0\nRequestMonitor      , 0         , 30        , 0         , 51.54     , 0\nRequestFiltering    , 0         , 30        , 0         , 51.54     , 0\nStaticContentCompression, 0         , 30        , 0         , 51.54     , 0\nISAPIExtensions     , 0         , 30        , 0         , 51.54     , 0\nISAPIFilters        , 0         , 30        , 0         , 51.54     , 0\nIISManagementConsole, 0         , 30        , 0         , 51.54     , 0\nNETExtensibility    , 0         , 30        , 0         , 51.54     , 0\nASPNET              , 0         , 30        , 0         , 51.54     , 0\nNETFramework4       , 0.85      , 38        , 1         , 184.71    , 0\nTotal (download size/install time): 0.85 Mb, 68 sec\nEnd Starting Installation.\n        Passed Scenarios : 18.\n        Failed Scenarios : 0\nRun Passed\ngtksharp v2.12.25.1\nDownloading gtksharp 32 bit\n  from 'http://download.xamarin.com/GTKforWindows/Windows/gtk-sharp-2.12.25.msi'\nInstalling gtksharp...\ngtksharp has been installed.\ngtksharp has finished successfully! The chocolatey gods have answered your request!\nFinished installing 'gtksharp' and dependencies - if errors not shown in console, none detected. Check log for errors if unsure.\nC:\\Windows\\system32>\n```\nTrying tomboy again\n```\nC:\\Windows\\system32>cinst tomboy -debug\nDEBUG: Running 'Append-InstallLog' with chocoInstallLog:''\nDEBUG: Arguments: $command = 'install'|$force=False\n|$prerelease=False|$packageNames='tomboy'\n|$source=''\n|$version=''|$allVersions=False\n|$overrideArguments=False|$InstallArguments=''\n|$localonly=False|$verbosity=False|$debug=True|$quiet=False\n|$name=''|$ignoreDependencies=False|$forceX86=False\n|$packageParameters=''\n|PowerShellVersion=2.0|OSVersion=6.1.7601.65536\nDEBUG: Running 'Chocolatey-Install' for 'tomboy' with source: '', version: '', installerArguments:''\nDEBUG: Running 'Chocolatey-NuGet' for tomboy with source:''. Force? False\nChocolatey (v0.9.8.27) is installing 'tomboy' and dependencies. By installing you accept the license for 'tomboy' and each dependency you are installing.\nDEBUG: Installing packages to \"C:\\ProgramData\\chocolatey\\lib\".\nDEBUG: Running 'Run-NuGet' for tomboy with source: '', version:''\nDEBUG:  NuGet _\nDEBUG: Running 'Get-ConfigValue' with configValue:'useNuGetForSources'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'useNuGetForSources'\nDEBUG: After checking the user config the value of 'useNuGetForSources' is ''\nDEBUG: Value not found in the user config file - checking the global config\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'useNuGetForSources'\nDEBUG: After checking the global config the value of 'useNuGetForSources' is 'false'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'sources'\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'sources'\nDEBUG: Using global sources\nDEBUG: Using '-Source \"https://chocolatey.org/api/v2/;\"' as the source arguments\nDEBUG: Calling 'C:\\ProgramData\\chocolatey\\chocolateyinstall\\nuget.exe' install tomboy -OutputDirectory \"C:\\ProgramData\\chocolatey\\lib\" -Source \"https://chocolatey.org/api/v2/;\" -NonInteractive\n-NoCache\nDEBUG: Attempting to resolve dependency 'gtksharp (\u2265 2.12.10)'.\nInstalling 'tomboy 1.14.0'.\nSuccessfully installed 'tomboy 1.14.0'.\nDEBUG: Evaluating NuGet output for line: Attempting to resolve dependency 'gtksharp (\u2265 2.12.10)'.\nDEBUG: Evaluating NuGet output for line: Installing 'tomboy 1.14.0'.\nDEBUG: Evaluating NuGet output for line: Successfully installed 'tomboy 1.14.0'.\nDEBUG: NuGet installed tomboy. If we are ignoring dependencies (False) then we will clean this up.\ntomboy v1.14.0\nDEBUG: Running 'Delete-ExistingErrorLog' for tomboy\nDEBUG: Looking for failure log at 'C:\\Users\\IEUser\\AppData\\Local\\Temp\\chocolatey\\tomboy\\failure.log'\nDEBUG: Found the failure log. Deleting it...\nDEBUG: Running 'Run-ChocolateyPS1' for tomboy with packageFolder:'C:\\ProgramData\\chocolatey\\lib\\tomboy.1.14.0', action: 'install'\nDEBUG:    PowerShell install (chocolateyinstall.ps1) \nDEBUG:   Looking for chocolateyinstall.ps1 in folder 'C:\\ProgramData\\chocolatey\\lib\\tomboy.1.14.0'. If chocolateyinstall.ps1 is found, it will be run.\nDEBUG: Action file is 'chocolateyInstall.ps1'\nDEBUG: Running 'C:\\ProgramData\\chocolatey\\lib\\tomboy.1.14.0\\tools\\chocolateyInstall.ps1'\nDEBUG: Running 'Install-ChocolateyPackage' for tomboy with url:'http://download.gnome.org/binaries/win32/tomboy/1.14/Tomboy-1.14.0.msi', args: '/quiet', fileType: 'msi', url64bit:\n'http://download.gnome.org/binaries/win32/tomboy/1.14/Tomboy-1.14.0.msi', checksum: '', checksumType: '', checksum64: '', checksumType64: '', validExitCodes: '0 3010'\nDEBUG: Running 'Get-ChocolateyWebFile' for tomboy with url:'http://download.gnome.org/binaries/win32/tomboy/1.14/Tomboy-1.14.0.msi',\nfileFullPath:'C:\\Users\\IEUser\\AppData\\Local\\Temp\\chocolatey\\tomboy\\tomboyInstall.msi', url64bit:'http://download.gnome.org/binaries/win32/tomboy/1.14/Tomboy-1.14.0.msi', checksum: '',\nchecksumType: '', checksum64: '', checksumType64: ''\nDEBUG: Running 'Get-ProcessorBits'\nDEBUG: CPU is 32 bit\nDEBUG: Running 'Get-WebHeaders' with url:'http://download.gnome.org/binaries/win32/tomboy/1.14/Tomboy-1.14.0.msi', userAgent: 'chocolatey command line'\nDEBUG: Setting the UserAgent to 'chocolatey command line'\nWrite-Error : tomboy did not finish successfully. Boo to the chocolatey gods!\n\n[ERROR] Exception calling \"GetResponse\" with \"0\" argument(s): \"The operation has timed out\"\nAt C:\\ProgramData\\chocolatey\\chocolateyinstall\\helpers\\functions\\Write-ChocolateyFailure.ps1:30 char:14\n+   Write-Error <<<<  $errorMessage\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nDEBUG: Running 'Move-BadInstall' for tomboy version: '1.14.0', packageFolder:'C:\\ProgramData\\chocolatey\\lib\\tomboy.1.14.0'\nDEBUG: Moving bad package 'tomboy v1.14.0' to 'C:\\ProgramData\\chocolatey\\lib-bad'.\nWrite-Error : Package 'tomboy v1.14.0' did not install successfully: Exception calling \"GetResponse\" with \"0\" argument(s): \"The operation has timed out\"\nAt C:\\ProgramData\\chocolatey\\chocolateyinstall\\functions\\Chocolatey-NuGet.ps1:90 char:28\n+                 Write-Error <<<<  \"Package '$installedPackageName v$installedPackageVersion' did not install successfully: $($_.Exception.Message)\"\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nDEBUG: Evaluating NuGet output for line:\nFinished installing 'tomboy' and dependencies - if errors not shown in console, none detected. Check log for errors if unsure.\nC:\\Windows\\system32>\n```\nMeh, still no ball. Secretly I hoped the gtksharp installation fixed this.\nI understand now it looks like it hangs at the download, but I can download within the (same) virtual machine just fine:\n\nAlso, wget in Linux using that user agent poses no problem:\n```\n$ wget --user-agent=\"chocolatey command line\" http://download.gnome.org/binaries/win32/tomboy/1.14/Tomboy-1.14.0.msi\n--2014-07-28 23:47:15--  http://download.gnome.org/binaries/win32/tomboy/1.14/Tomboy-1.14.0.msi\nResolving download.gnome.org (download.gnome.org)... 209.132.180.180, 209.132.180.168\nConnecting to download.gnome.org (download.gnome.org)|209.132.180.180|:80... connected.\nHTTP request sent, awaiting response... 302 Found\nLocation: https://download.gnome.org/binaries/win32/tomboy/1.14/Tomboy-1.14.0.msi [following]\n--2014-07-28 23:47:16--  https://download.gnome.org/binaries/win32/tomboy/1.14/Tomboy-1.14.0.msi\nConnecting to download.gnome.org (download.gnome.org)|209.132.180.180|:443... connected.\nHTTP request sent, awaiting response... 302 Found\nLocation: http://ftp1.nluug.nl/windowing/gnome/binaries/win32/tomboy/1.14/Tomboy-1.14.0.msi [following]\n--2014-07-28 23:47:17--  http://ftp1.nluug.nl/windowing/gnome/binaries/win32/tomboy/1.14/Tomboy-1.14.0.msi\nResolving ftp1.nluug.nl (ftp1.nluug.nl)... 192.87.102.42, 2001:610:1:80aa:192:87:102:42\nConnecting to ftp1.nluug.nl (ftp1.nluug.nl)|192.87.102.42|:80... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 2707456 (2.6M) [text/plain]\nSaving to: \u2018Tomboy-1.14.0.msi\u2019\n100%[==================================================================================>] 2,707,456   2.59MB/s   in 1.0s   \n2014-07-28 23:47:18 (2.59 MB/s) - \u2018Tomboy-1.14.0.msi\u2019 saved [2707456/2707456]\n``\n. I believe not, at least not usingcurl`:\n$ curl -I --user-agent \"chocolatey command line\" http://download.gnome.org/binaries/win32/tomboy/1.14/Tomboy-1.14.0.msi\nHTTP/1.1 302 Found\nDate: Mon, 28 Jul 2014 22:11:05 GMT\nServer: Apache/2.2.15 (Red Hat)\nLocation: https://download.gnome.org/binaries/win32/tomboy/1.14/Tomboy-1.14.0.msi\nConnection: close\nContent-Type: text/html; charset=iso-8859-1\n. Good find! It won't download a redirect at all, or HTTPS redirect in particular, or just this specific case?\nSince I got this in Windows 7, but the person who contacted me had a different error - related to DotNet4 needing a reboot, which is the error that would appear after the download was succesful and the script would proceed - he probably had a newer build (probably service pack); I am thinking that this error might be there in Windows <= 7.0 and not in Windows >= 7.1.\n. I thought chocolatey automatically installs .NET 4.0, or is that irrelevant concerning powershell?\nSorry if stupid question.\n. So ideally, in stead of timing out, it would either:\n- Stop with an error; or\n- Issue a [WARNING] could not verify certificate of [xyz] and continue ignoring SSL:\n  - In Unix that would be curl -k or curl --insecure\n    - -k/--insecure (SSL) This option explicitly allows curl to perform \"insecure\" SSL connections and transfers. Starting with curl 7.10, all SSL connections will be attempted to be made secure by using the CA certificate bundle installed by default.\n. I don't fully understand what is happening, but if it works, it works.\nI will test this out in a vm that I know has this problem when new chocolatey is released.\n. Is there a way to install pre-release version directly? Instead of:\n```\n@powershell -NoProfile -ExecutionPolicy unrestricted -Command \"iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))\" && SET PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\nchoco install chocolatey -Pre\n```\n. Seems to work*. :thumbsup: \ntomboy v1.15.1-beta\nDEBUG: Running 'Delete-ExistingErrorLog' for tomboy\nDEBUG: Looking for failure log at 'C:\\Users\\IEUser\\AppData\\Local\\Temp\\chocolatey\\tomboy\\failure.log'\nDEBUG: Running 'Run-ChocolateyPS1' for tomboy with packageFolder:'C:\\ProgramData\\chocolatey\\lib\\tomboy.1.15.1-beta', action: 'install'\nDEBUG:   __ PowerShell install (chocolateyinstall.ps1) __\nDEBUG:   Looking for chocolateyinstall.ps1 in folder 'C:\\ProgramData\\chocolatey\\lib\\tomboy.1.15.1-beta'. If chocolateyinstall.ps1 is found, it will be run.\nDEBUG: Action file is 'chocolateyInstall.ps1'\nDEBUG: Running 'C:\\ProgramData\\chocolatey\\lib\\tomboy.1.15.1-beta\\tools\\chocolateyInstall.ps1'\nDEBUG: Running 'Install-ChocolateyPackage' for tomboy with url:'http://ftp.gnome.org/pub/GNOME/binaries/win32/tomboy/1.15/Tomboy-1.15.1.msi', args: '/quiet', fileType: 'msi', url64bit:\n'http://ftp.gnome.org/pub/GNOME/binaries/win32/tomboy/1.15/Tomboy-1.15.1.msi', checksum: '', checksumType: '', checksum64: '', checksumType64: '', validExitCodes: '0 3010'\nDEBUG: Running 'Get-ChocolateyWebFile' for tomboy with url:'http://ftp.gnome.org/pub/GNOME/binaries/win32/tomboy/1.15/Tomboy-1.15.1.msi',\nfileFullPath:'C:\\Users\\IEUser\\AppData\\Local\\Temp\\chocolatey\\tomboy\\tomboyInstall.msi', url64bit:'http://ftp.gnome.org/pub/GNOME/binaries/win32/tomboy/1.15/Tomboy-1.15.1.msi', checksum: '',\nchecksumType: '', checksum64: '', checksumType64: ''\nDEBUG: Running 'Get-ProcessorBits'\nDEBUG: CPU is 32 bit\nDEBUG: Running 'Get-WebHeaders' with url:'http://ftp.gnome.org/pub/GNOME/binaries/win32/tomboy/1.15/Tomboy-1.15.1.msi', userAgent: 'chocolatey command line'\nDEBUG: Setting the UserAgent to 'chocolatey command line'\nDEBUG: Request Headers:\nDEBUG:   'Accept':'*/*'\nDEBUG:   'User-Agent':'chocolatey command line'\nDEBUG: Response Headers:\nDEBUG:   'Age':'81'\nDEBUG:   'Keep-Alive':'timeout=10, max=100'\nDEBUG:   'Connection':'Keep-Alive'\nDEBUG:   'Accept-Ranges':'bytes'\nDEBUG:   'Content-Length':'2707456'\nDEBUG:   'Content-Type':'application/octet-stream'\nDEBUG:   'Date':'Wed, 30 Jul 2014 14:35:33 GMT'\nDEBUG:   'ETag':'\"295000-4dc0fe639a400\"'\nDEBUG:   'Last-Modified':'Mon, 06 May 2013 17:19:12 GMT'\nDEBUG:   'Server':'Apache/2.4.9 (Unix)'\nDownloading tomboy 32 bit\n  from 'http://ftp.gnome.org/pub/GNOME/binaries/win32/tomboy/1.15/Tomboy-1.15.1.msi'\nDEBUG: Running 'Get-WebFile' for C:\\Users\\IEUser\\AppData\\Local\\Temp\\chocolatey\\tomboy\\tomboyInstall.msi with url:'http://ftp.gnome.org/pub/GNOME/binaries/win32/tomboy/1.15/Tomboy-1.15.1.msi',\nuserAgent: 'chocolatey command line'\nDEBUG: Setting the UserAgent to 'chocolatey command line'\nDEBUG: Checking that 'C:\\Users\\IEUser\\AppData\\Local\\Temp\\chocolatey\\tomboy\\tomboyInstall.msi' is the size we expect it to be.\nDEBUG: Verifying package provided checksum of '' for 'C:\\Users\\IEUser\\AppData\\Local\\Temp\\chocolatey\\tomboy\\tomboyInstall.msi'.\nDEBUG: Running 'Get-CheckSumValid' with file:'C:\\Users\\IEUser\\AppData\\Local\\Temp\\chocolatey\\tomboy\\tomboyInstall.msi', checksum: '', checksumType: ''\nDEBUG: Running 'Install-ChocolateyInstallPackage' for tomboy with file:'C:\\Users\\IEUser\\AppData\\Local\\Temp\\chocolatey\\tomboy\\tomboyInstall.msi', args: '/quiet', fileType: 'msi', validExitCodes: '0\n3010'\nInstalling tomboy...\nDEBUG: Running 'Start-ChocolateyProcessAsAdmin' with exeToRun:'msiexec', statements: '/i \"C:\\Users\\IEUser\\AppData\\Local\\Temp\\chocolatey\\tomboy\\tomboyInstall.msi\" /quiet '\nDEBUG: Elevating Permissions and running msiexec /i \"C:\\Users\\IEUser\\AppData\\Local\\Temp\\chocolatey\\tomboy\\tomboyInstall.msi\" /quiet . This may take awhile, depending on the statements.\nDEBUG: Finishing 'Start-ChocolateyProcessAsAdmin'\ntomboy has been installed.\ntomboy has finished successfully! The chocolatey gods have answered your request!\nDEBUG: Running 'Get-ChocolateyBins' for C:\\ProgramData\\chocolatey\\lib\\tomboy.1.15.1-beta\nDEBUG:   __ Executable Links (*.exe) __\nDEBUG: Looking for executables in folder: C:\\ProgramData\\chocolatey\\lib\\tomboy.1.15.1-beta\nAdding batch files for any executables found to a location on PATH. In other words the executable will be available from ANY command line/powershell prompt.\nDEBUG: Found '' for batch redirect\nDEBUG: There are no executables (that are not ignored) in the package.\nDEBUG: Evaluating NuGet output for line:\nFinished installing 'tomboy' and dependencies - if errors not shown in console, none detected. Check log for errors if unsure.\n*) Disclaimer: I forgot to make a snapshot so this vm already has tomboy installed. I removed the downloaded file and used cup tomboy -pre -force -debug. I did verify that the vm indeed uses Posh 2.0.\n. > Is it worth throwing Boxstarter into the mix as well, so handle the reboots, and pick up installation where it left off?\nI don't know. I don't want to handle reboots. It doesn't seem necessary, because the DotNet4.0 package cancels this requirement out somehow.\n. If it's gonna have trouble, I would suggest stopping the operation without a special switch.\nThe first helps a lot. But I think for non-technical users, it would be good if the first message would explicitly say: Expect a bunch of error messages.\nSlightly unrelated but curious: Am I correct that, I don't know, six months ago or so, chocolatey didn't need an elevated prompt? I have the feeling that I didn't Ctrl+Shift+Enter cmd all the time, but now I am.\n. I thought that was by design to allow software installations in restrictive\nenvironments. Not a problem for me though.\nOn Aug 12, 2014 4:06 AM, \"Rob Reynolds\" notifications@github.com wrote:\n\n@Redsandro https://github.com/Redsandro It didn't, that is correct. It\noperated in a totally insecure way and was located in c:\\chocolatey where\nanyone could have messed with any file at any point.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/540#issuecomment-51865318\n.\n. Does that mean by installing it somewhere else, chocolatey doesn't need to run as admin anymore?\n. Good to know! :thumbsup: I didn't know this was directory-dependent.\nSo with a little installation tweak you can still use this on restricted\noffice computers.\nOp Sun Nov 02 2014 at 5:01:33 PM schreef Rob Reynolds \nnotifications@github.com:\nright. In program data it needs a user with admin permissions to do stuff.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/540#issuecomment-61411984\n.\n. Ouch, due to lack of oxygen, I forgot to check debug.\n\nMaybe a problem where the chocolatey site is unreachable can have a friendly (non-debug) message letting the user know that there are no permanent errors in what he is doing, just \"try again later.\"\n\"Sorry, the chocolatey gods cannot be reached right now. Please try again in a few moments.\" :poop: \n. PS - The :poop: was a joke, not a flame. :smile: \nI have this emoji in my head now that I found out there's actually a URL called: \n:poop:.la\n(In some browsers you actually see the :poop: in the addressbar)\n. I think the problem is in Get-ChocolateyWebFile, I was trying to use it alternatively. What's wrong with it?\n. Trying to download to C:\\ProgramData\\chocolatey\\lib\\PartitionAssistant.5.5.8.1\\tools\\PartitionAssistantSetup.exe...\nDEBUG: Running 'Get-ChocolateyWebFile' for PartitionAssistant with url:'True\nhttp://software-files-a.cnet.com/s/software/13/80/74/47/PAssist_Std.exe?token=1412729420_e8e5aed14c477da642d3f88eea37197e&fileName=PAssist_Std.exe\n', fileFullPath:'C:\\ProgramData\\chocolatey\\lib\\PartitionAssistant.5.5.8.1\\tools\\PartitionAssistantSetup.exe', url64bit:'', checksum: '',\nchecksumType: '', checksum64: '', checksumType64: ''\nDEBUG: Running 'Get-ProcessorBits'\nDEBUG: CPU is 32 bit\nCopying PartitionAssistant\n  from 'True http://software-files-a.cnet.com/s/software/13/80/74/47/PAssist_Std.exe?token=1412729420_e8e5aed14c477da642d3f88eea37197e&fileName=PAssis\nt_Std.exe\n'\nCopy-Item : Cannot find drive. A drive with the name 'True http' does not exist.\nAt C:\\ProgramData\\chocolatey\\chocolateyinstall\\helpers\\functions\\Get-ChocolateyWebFile.ps1:105 char:14\n+     Copy-Item <<<<  $url -Destination $fileFullPath -Force\n    + CategoryInfo          : ObjectNotFound: (True http:String) [Copy-Item], DriveNotFoundException\n    + FullyQualifiedErrorId : DriveNotFound,Microsoft.PowerShell.Commands.CopyItemCommand\n. Perhaps this needs quotes? Not sure.\nCopy-Item $url -Destination $fileFullPath -Force\n. Nevermind, this is my own fault. Updating the CNET downloader caused my returnvalue to be some kind of array. I don't understand why.\nhttps://github.com/Redsandro/chocolatey/blob/master/autopackages/PartitionAssistant/tools/chocolateyInstall.ps1#L16\n. Is this in your comment referring to C:\\ProgramData\\chocolatey\\bin or C:\\Tools?\nI am assuming the latter, but with the confusion and all, I'm not sure.\n. Can you try and explain it to me?\n. Perhaps we should have a binRoot and a toolsRoot\n. > Do we need a bin root? Or is it that choco is not doing a sufficient job in some cases?\nI don't know. I prefer a non-shimmed binRoot for command line tools, and for everything else a subdirectory of chocolatey (like lib and bin already are). If anyone prefers something arbitrary like C:\\Tools they should manually make it so.\nWith players and browsers and libraries - not just tools but plain software - installing to Get-BinRoot ATM AKA Tools, I think software or programs or bin is a more intuitive and canonical name. It makes sense to put this inside chocolatey unless manually changed to something that has personal preference.\n\nthe need to Get-BinRoot should become non-existent\n\nWhat did I miss/forget?\n. Brutal honesty, nitpicking, lack of knowledge and a touch of ocd combined:\nI like to (re-)use my 'own' bin folder and be able to specify it as $binRoot for chocolatey. I like this bin directory to be copyable to USB sticks and between VMs. I like to pipe stuff between 'exe' files within batch files, being able to assume that the .exe files are in the same folders (relatively named). And I like, when some complicated piped script doesn't work, not to have to wonder if it's the shimming that causes a pipe to break.\n. Some packages output an error message and then throw it.\nDoes this cause two out of three error messages?\n} catch {\n        $errorMessage = \"This package tried to do something stupid and has failed to install.\"\n        Write-Error $errorMessage\n        throw $errorMessage\n  }\nI don't know what Write-Error does besides writing the message, but if it includes the stack details, maybe that's where it goes wrong.\nJust a thought.\n-edit-\nOther packages do\n} catch {\n    Write-ChocolateyFailure $name $($_.Exception.Message)\n    throw   \n}\nBut maybe it's irrelevant.\n-edit-\nCaught another one. Four (4) times the same error message. Skipping the errors itself, it does display line numbers to track down:\n```\nWrite-Error : [ERROR] Exit code was '1'.\nAt C:\\Common\\Chocolatey\\chocolateyInstall\\helpers\\functions\\Start-ChocolateyProcessAsAdmin.ps1:46 char:5\n[ERROR] [ERROR] Exit code was '1'.\nAt C:\\Common\\Chocolatey\\chocolateyInstall\\helpers\\functions\\Write-ChocolateyFailure.ps1:30 char:2\n[ERROR] [ERROR] Exit code was '1'.\nAt C:\\Common\\Chocolatey\\chocolateyInstall\\helpers\\functions\\Write-ChocolateyFailure.ps1:30 char:2\nWrite-Error : Package did not install successfully: [ERROR] Exit code was '1'.\nAt C:\\Common\\Chocolatey\\chocolateyInstall\\functions\\Chocolatey-NuGet.ps1:90 char:17\n```\n. Don't get me wrong, I am enthusiastic about this and don't mean to be nitpicky! Ofcourse it's not gonna be apt-get all the way.\nBut the ease of installing your favourite apps on a clean OS all at once using a single command is arguably one of the most useful and widely used features of a package manager. I've used apt-get, yum, aptitude, pacman and dpkg, and they all do this. I guess I automatically assumed it is expected behavior of a package manager.\nSorry, I am new to this, I just googled around, found chocolately and npackd. One of the reasons I chose chocolately first was because I read it was older, so I didn't really think about not even to v1 yet. :P\n(The other reason is that the Chocolately site is much nicer and has terminal support out of the box. Very nice!)\n(Admittedly I installed npackd afterwards to install the packages that had failed in chocolately (like Security Essentials) and/or didn't have a 64 bit candidate.)\n(Since Chocolately is much nicer, but npackd fails less often, think of the amount of bases that are belong to you if the projects are merged! ;))\n. Hey you are right. It's a wonder I made it through school, I still don't do my homework right. :P\nThanks for the hints. Is powershell different from the normal shell? Could you give an example on how to do the array thing on powershell? It would give me some power before v1 hits the stage.\nOn Linux it would be:\nfor N in app1 app2 app3; do cinst $N; done\nNow you mention it, I think it's also possible in normal shell (cmd), probably something like this iirc:\nFOR %n IN (app1, app2, app3) DO (cinst %n)\n(This is a reasonably educated guess, cannot test it, am not on Windows now.)\n. By the way, since Chocolately can internally process a list from XML (packages.conf), isn't it relatively easy to implement a feature to use a command-line list?\nI imagine the list from XML will end up in an unshifting array or something. I don't know powershell coding but using javascript pseudocode it would be something like this:\njavascript\n// Use command line multiple input if no packages.conf is specified\nif (arguments.length > 2) // Multiple packages found\n    for (var n=2; n<arguments.length; n++) // From first to last package\n        install_array.push(arguments[n]); // Create installation array\nWhere:\narguments[0] = chocolately install app1 app2 app3\narguments[1] = install\narguments[2] = app1\narguments[3] = app2\narguments[4] = app3\n. I updated chocolatey.cmd to allow batch-installation. It just continues with the next when a package fails, which is what we want, because with the batch-xml I used to do it was so annoying that it stopped on error.\nHere is the update: https://github.com/chocolatey/chocolatey/pull/304\n. cinst chocolatey -pre\n. I noticed I did -beta sometimes before I remembered to do -pre.\nJust a thought: Maybe add beta as a synonym for pre?\n. True. I hadn't thought of that. It's not as simple as I thought. Monday half brain day.\n. Today I found out Chocolately is actually called Chocolatey. Why did nobody stop me? :P\nI edited the above issue to fix this.\n. @ferventcoder just a thought: Can all packages from cup all be rerouted through the new batch functionality? I see you also implemented this in cup when multiple packages are mentioned individually.\n. Installing or updating multiple packages at once #304\n. Let me try that again. Personally I don't really care for packages.xml (AKA packages.conf) anymore, since we have batch functionality (e.g. cinst package1 package2 packageN). However, cup all also stops on error, and that one is important.\n``` cmd\nFinished installing 'ccleaner' and dependencies - if errors not shown in console, none detected. Check log for errors if unsure.\nChocolatey (v0.9.8.21-beta1) is installing 'chocolatey-beta1' and dependencies. By installing you accept the license for 'chocolatey-beta1' and each dependency you are installing.\nUnable to find package 'chocolatey-beta1'.\nCommand 'update' failed (sometimes this indicates a partial failure). Additional info/packages: all\nReading environment variables from registry. Please wait... Done.\nC:\\Users\\Redsandro>\n```\nThe batch install does not stop on error, right? So can cup all somehow use the same don't-stop-on-error magic?\n. I concur, but I lack the knowledge and the knowhow to propose a fix. :) I'm\nbetter at making .bat wrappers. :P\nOn Nov 5, 2013 12:17 AM, \"TomOne\" notifications@github.com wrote:\n\nThis is actually a very important issue to solve. Stopping the entire\nprocess only because one package failed is very annoying and reduces UX.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/192#issuecomment-27732812\n.\n. > i would have thought people would like to fail early and abort...\n\nTypical use case: You have 20 hand-picked applications installed through Chocolatey. You care about these applications. You want to update them all: cup all\nAfter 4 packages it breaks because the 5th package maintainer made a mistake. You now have 15 packages that are not updated. You have to remember them all, figure out their Chocolatey IDs, and specify each of them manually. This is a show stopper and is bad for business. \nNow that package 5 cannot update because of some error, that does not mean you suddenly changed your mind about updating the rest of your system.\nThis together with the single-install-only limitation (fixed in #191 ) were my biggest annoyances with Chocolatey, and the stopping on error annoyance is the feedback I hear the most. (I install Chocolatey on other peoples laptops, and sometimes I even tell them how it works. ;)) (The other feedback is that packages often don't work, but that's a different problem.)\nSure, when a dependency no one (read: typical user) knows or cares about fails, the parent package should fail, obviously. But the rest of the independent packages are still supposed to be updated.\n\nYou are likely to see lots of failures and would prefer to have it simply stop so you can diagnose the root problem earlier.\n\nI can imagine this too, but it's more of an advanced use-case. There should be a command line option for that.\n\"1.0\" takeoff point:\n-  Do not stop on error. When client says he wants to update all, he wants to update all.\nIdeally:\n- Skip packages who's dependencies have errors, continue with the rest.\nAdvanced:\n- Command line option for users who want specific behavior: cup --stop-on-error all\n. I'd like to see Chocolatey introduced to the masses. I think Chocolatey is meant for the masses in the end. Meant for easy software management.\nA famous developer once said about Chocolatey:  \n\nI want to see Windows be as automatable and awesome as other operating systems that are out there.\n\nThe Windows audience doesn't really mix well with something that breaks and spits out 20 red lines of error. It just wants to see a (final) message: \"19 out of 20 packages updated. See error.log for details.\"\nA single independent (in Linux we call this top-level) package should not rely on another top-level (TL) package, and neither should be the order in which they are installed or updated relevant. Hence it should not stop on error.\nWhen one failing TL package leaves the system in barney for another TL package, said package is in conflict with both logic and the packaging guidelines, and should be hosted somewhere else:  \n\nA package creator should consider whether his package is also useful for others. If that is not the case, it shouldn\u2019t be published on Chocolatey.org. Reasons for that can be if the package would require a very special configuration that is unacceptable for other users or that would lead to serious vulnerabilities.\n. Let's strife for flawless UX and command line options for specifics. :smile: \n. Ah I see how it works now in the nuspec.\n. xml\n<?xml version=\"1.0\"?>\n<package xmlns=\"http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd\">\n    <metadata>\n        <id>tomboy</id>\n        <title>Tomboy Notes 1.10.2</title>\n        <version>1.10.2</version>\n        <authors>Alex Graveley</authors>\n        <owners>Redsandro</owners>\n        <summary>Create and synchronize notes.</summary>\n        <description>Quickly draft and synchronize notes with multiple computers in Linux, OSX and Ubuntu One.</description>\n        <projectUrl>http://projects.gnome.org/tomboy/</projectUrl>\n        <tags>note notes notetaking multiplatform synchronize</tags>\n        <copyright></copyright>\n        <licenseUrl>http://www.gnu.org/copyleft/lesser.html</licenseUrl>\n        <requireLicenseAcceptance>false</requireLicenseAcceptance>\n        <!--<iconUrl>https://github.com/__CHOCO_PKG_OWNER_REPO__/raw/master/__NAME__/__NAME__.gif</iconUrl>-->\n            <dependencies>\n                <!--<dependency id=\".NET\" version=\"3.5\" />-->\n                <!-- http://www.microsoft.com/downloads/details.aspx?FamilyId=333325FD-AE52-4E35-B531-508D977D32A6&displaylang=en -->\n                <dependency id=\"gtksharp\" version=\"2.12.10\" />\n                <!-- http://download.mono-project.com/gtk-sharp/gtk-sharp-2.12.10.win32.msi -->\n            </dependencies>\n        <releaseNotes></releaseNotes>\n    </metadata>\n    <files>\n        <file src=\"tools\\**\" target=\"tools\" />\n        <!--<file src=\"content\\**\" target=\"content\" />-->\n    </files>\n</package>\n\n``` cmd\n$packageName = 'tomboy'\n$installerType = 'msi' \n$url = 'http://download.gnome.org/binaries/win32/tomboy/1.10/Tomboy-1.10.2.msi'\n$url64 = $url # 64bit URL here or just use the same as $url\n$silentArgs = '/quiet'\n$validExitCodes = @(0,3010) #please insert other valid exit codes here, exit codes for ms http://msdn.microsoft.com/en-us/library/aa368542(VS.85).aspx\nmain helpers - these have error handling tucked into them already\nInstall-ChocolateyPackage \"$packageName\" \"$installerType\" \"$silentArgs\" \"$url\" \"$url64\"  -validExitCodes $validExitCodes\n```\n. Sorry, I didn't notice there was a mailgroup for questions. New questions will be redirected henceforth. \nBut let me assure you, I am one of the cleverest people in my subnet (;)), and if I cannot get my custom package to install from source, I'm afraid it's gonna be a problem for other package committing 'noobs' too.\nIn response, yes the tutorial is quite comlpete and it does explain how cpack needs to be run first. When someone points out the problem and I get my first package to work, I will, with your permission, add a quick-start guide to the lengthy package creating part of the wiki.\nOr could it be a bug in the latest cpack or cinst? That would be a fine coincidence, I would have posted my section in the right section after all.\n. I cannot check that right now as I am on the wrong computer, but I used the command that is on the website yesterday: @powershell something.DownloadString('http://bit.ly/psChocInstall')) one. I am assuming it points to the release version.\n. Yes, works nicely. I was gonna make a screenshot, but I bet you believe me when I say it shows exactly the same as mentioned in the above XML code.\n-edit- On second thought, the below comment is probably irrelevant.\nI made a typo on a virtual machine just now while playing around with it, and I noticed:\ndir\n3.504 tomboy.1.10.2.nupkg\n1.351 tomboy.nuspec\n[DIR]          tools \ncinst tomboy -source %cd%\n'tomboy' is not a valid version string. Parameter name: version \ncinst -source %cd%\nUnable to find package 'tomboy'. \nDon't know if it's relevant, but if the second command cannot find the package, how does it know which package I mean?\n. Oops, that was a mistake on my part posting the output of the dir command here on github, it is the file size from the cmd.com console window.\nThe filename is tomboy.nuspec and when running cpack it automatically creates tomboy.1.10.2.nupkg. It must be getting those numbers from the nuspec xml file, so cpack reads the version correctly.\nHence we're back at the confusing 'tomboy' is not a valid version string error message when testing the package.\n. Windows' default shell.\nRun -> cmd [enter]\n. Don't use one. I thought you only need a repo when you push your package.\nSo far I'm getting it to run correctly before I push it.\n(Still have to figure out that repo part, the tutorial doesn't really explain that)\nIf you have a virtual machine running and you have a minute to spare, you can see if it has the same error message for you.\nhttps://dl.dropbox.com/u/1919923/chocolatey.tomboy.zip\n. Oh yeah I remember the gtksharp message the first time I ran it. I am guessing the package (owned by somebody else) is not gonna be downloaded in testing mode.\nYou should cinst gtksharp on your vm and try again. Now you get the error message.\n. What?? I am at a loss.\nThanks for taking the efford to try it out. I was sure you would get the same error.\nWhat sorcery is this? You are probably as clueless as I am at this point.\nI tested this out on Windows 7 Professional and Windows 8 Professional. Same message.\nOh yeah I have version 0.9.8.19 of Chocolatey, I figured out from some logs I got on my dropbox.\n. D'oh\nI found the cause.\ncmd\nC:\\Users\\Redsandro\\Dropbox\\temp\\chocolatey tomboy>cinst tomboy -source \"%cd%\" -debug\n(..)\n'C:\\Users\\Redsandro\\Dropbox\\temp\\chocolatey', version: 'tomboy',\n(..)\nDEBUG: Using '-Source \"C:\\Users\\Redsandro\\Dropbox\\temp\\chocolatey\"' as the source\nThe \"\" in \"%cd%\" would in Linux cause the path to be a single parameter but apparently not in Windows. The space in the pathname caused the failure.\n. Good thought! \nI tried it out and single quote ' also works!\n. Yes, once I complete pushing the package successfully, I will add the steps.\nIf I may be so blunt to ask, is this repository you mentioned earlier necessary for this step? If I read the tutorial correctly, I can just get an api-key and push the package. There is no mention of this repository. In the templating system there is mention of filling in your personal repo and an auto-update repo (without further explanation), but the template I used for this .msi package does not require them.\nIf I missed repo documentation from the tutorial, you can just provide a link and I will read from there.\n. Ah I get it now. The only thing I ever do is git clone, so I've git some\nreading to do on how to get my stuff up there.\n. Ouch, gotta love that wiki editor. :')\nThanks for the help. In return, a Quick Start Guide: https://github.com/chocolatey/chocolatey/wiki/CreatePackagesQuickStart\n. What do you mean by second source to the package?\nI am pretty sure it works like this (too) because I copied most commands in\na little notepad when I executed them. But maybe I got something mixed up.\nIf you are sure and/or have any other changes in mind, feel free to edit\nthe page.\n. I was looking for that quickstartguide I made earlier and couldn't find a link in the main page (CreatePackages) although I am pretty sure I made one.\nAfter googling, I found this issue and rediscovered the page through above link.\nAm I having a mini-epilepsy-attack and did I never create a reference in the main packaging wiki, or was it removed with good reason?\nI (re)created the reference. Of course, feel free to change if the wording is wrong. \nMy rationale is this: I (and therefor undoubtedly others too) just wanted to know the basic steps, and looking at the size of the page (scrollbar) made me initially lose interest. That's why I think a new visitor should see that there is a quick start guide in the first a-screens-length of the CreatePackages page.\nMaybe I was an idiot and pressed preview in stead of save. Could also be. :P\n. Okay my bad, please ignore. :P\n. -includedependencies would also be a good idea. That would skip more manual\nsteps.\n. Or: -source should not use cache\n-source '%cd%' -force should ignore c:\\ProgramData\\chocolatey\\lib\\%DataIAmClearlyTryingToIgnore%\n. (I was considering the google group, but I think the last two points should be identified as important issues.)\n. I will break this up for you soonish.\nIn the meanwhile, fyi, the space in .exe names is the case for the example (you can download the zip file and see for yourself), except in this case a .bat link doesn't really make sense anyway because you would want it in the start menu where spaces are no problem.\nI've seen it another time with a custom build of x264 64bit in the past. The author claimed it would be used within another script using \"quotes\" anyway, which wasn't true for me.\nGranted, for command line tools you won't see this often because devs would quickly start to feel silly.\nBack in the day, you could type filena~1.exe in stead of filename with space.exe, but those days are long gone. ;)\n. PS is there a page on the wiki that explains what this .exe.gui is and does?\n. Ah so it changes the way the .bat shortcut launches the application.\nI remember reading that and thinking it had to do with gui-installers that cannot be put in silent mode, to prevent them from hanging the Chocolatey installer window when running in batch mode. Wrong assumption. I get it now.\nIn this case there would need to be a Core Temp.exe.ignore and the hypothetical Core Temp.exe.copyToBinFolderInstead and/or Core Temp.exe.createShortcutInStartMenu\n. That is good news.\nI have been looking for a user variable that links there but couldn't find it. There were a lot of %VARS% linking to folders in 2k/xp, but they don't work anymore.\nI thought in your second comment #issuecomment-11463385 you mentioned this was a problem. But if you have a possible solution for the start menu, please tell me. :)\nRedirected issues:\n216 -> [Enhancement] Copy/move .exe tools to \\bin\\ folder in stead of creating a .bat file.\n217 -> [Enhancement] Use custom \\bin\\ folder\n218 -> [Enhancement] Create link to GUI tool in Start Menu\n219 -> [Enhancement] Ignore spaces when creating a 'fake' link (.bat file)\n. How about mklink \"$env:chocolatey_bin_root\\tool.exe\" \"$env:ChocolateyInstall\\lib\\pathToTool\\tool.exe\"\n(emphasis on mklink as a solution) instead of the .bat routine?\n. Yea I missed that. :(\nIn that case, I propose functionality that moves tools to the bin folder, for reasons explained above.\n. I don't know if there should be opt-in or just 'package maintainer knows best.'\nExecutable only files without dll's or even config files (e.g. ffmpeg, x264, faad, faac, avs2avi) should pose no problem, with the added benefit of being able to copy or sync the bin folder to usb or cloud and use it anywhere as-is. The library, your uncle's machine, wine in linux, etc.\n. .bat feels like a MS-DOS heritage, and it is, but apparently the only difference with the more modern .cmd is the behavior of error levels when \"Command Extensions\" are enabled, which I don't know what they are.\nI always thought batch files had to be more carefully constructed as to provide some kind of DOS compatibility and command files were a bit more versatile. I guess the biggest difference is psychological indeed.\n. Ah sorry, I come from Linux where ln (mklink) is not such a big deal.\nShouldn't everything be opt-in? Right now creating .bat files is opt-out with .exe.ignore. We could have:\n.exe.startMenu (as discussed in #218 )\n.exe.moveToBin or .exe.copyToBin (as discussed above, remember to implement #217 )\n.exe.linkBat\n.exe.linkGui (remember to implement #219 )\n. This would be very straightforward for new users, not like \"This thing happens magically, that thing has a helper function, and a 3rd thing is done by the installation script\".\n. I know this would change some expected behavior in existing package install scripts.\nThe solution could be to have a compatible Chocolatey version number in every package. Chocolatey-Installer compares this package Chocolatey version with it's own (see (1)). But if none is defined by the package, assume old package and go to a quicks-mode (e.g. automatically assume .linkBat)\n(1) For future solutions, the other way around, if a package was made with a newer version of Chocolatey (i.e. uses new helper functions that are not available in previous Chocolatey versions) than the installed one, Chocolatey could quit the install or update saying \"You need to update Chocolatey in order to install/update this package.\"\n. > if your package requires a particular version of chocolatey,\n\nyou can specify the version requirements in the nuspec\nit will update chocolatey automatically.\n\nNice! I think it's not in the nuspec template from the repo though. What tag is used for this? I think I'll drop a line about this in the wiki.\n\nit\u2019s a blow to git on win for sure.\n\nWindows is not very friendly towards anything that is not Microsoft. But I find that the MinGW Git, or better, using Cygwin, work quite nicely.\n\nWhat do you guys think of this more unified approach to different types of binary handling as mentioned above: https://github.com/chocolatey/chocolatey/issues/216#issuecomment-11621798\n. Also found this: http://windows.github.com/\nDidn't take a close look yet.\n. https://github.com/blog/1151-designing-github-for-windows\n. Added Nuspec details to Wiki.\nMaybe you should set a(n old) version of Chocolatey by default in the template:\nhttps://github.com/chocolatey/chocolateytemplates/blob/master/_templates/chocolatey/NAME.nuspec\nIt's the quickest way to tell (new) packagers that it is possible and it matters, if they see it.\n. RE: Unified approach -\nIt probably looks easy to you because you know Chocolatey inside out, but for new people, when you have stuff happening implicitly, stuff happening explicitly, stuff happening on command, stuff happening inverted (.ignore), it kinda looks like the national tax system. They say it makes sense, but with all rules and exceptions no one likes doing their tax report.\nIt has to look sexy and intuitive to use, that's how you attract more packagers and a bigger audience.\nI would even go as far as renaming chocolatey_bin_root to ChocolateyBinRoot so it has the same naming convention as ChocolateyInstall. It has no technical benefit, other than making Chocolatey look happy instead of \"random/messy\".\nAnyway it (unified approach) should not get in the way of exactly what you want, because there can be a flag, like Install-ChocolateyZipPackage --forceBat $packageName \"$zipUrl\" \"$binRoot\".\nAnd then we could just as well have --forceCopy, --forceStartMenu or --forceGui, for people who just want to drop their exe in a package and boom, it's in the start menu!\n. Also, can you point me to the script that detects .gui and .ignore? I can look at it for taking a crack at .startmenu and .copy.\n. I noticed that the CreatePackages wiki* specifically mentions using the %chocolatey_bin_root% environment variable as installation path under Installation paths -> 1. %chocolatey_bin_root% environment variable, but this variable is empty.\n*) https://github.com/chocolatey/chocolatey/wiki/CreatePackages\n. You are right, but what I mean is: You are advised (by the docs) to pass the variable to the (random) installer if it is supported. But the path is empty by default. Which means you will be explicitly passing an empty path to the (random) installer and who knows how it will be interpreted.\nMy first thought is that %chocolatey_bin_path% should be set to %ChocolateyInstall%\\bin by default the when Chocolatey is installed, so it is never empty and can be edited by the user.\nMy second thought is that the current solution is to check if %chocolatey_bin_path% empty in the install script.\nBut wouldn't it be more logical to have the installer set a default value, rather than have 500+ packages perform this check?\nIf not, we should add a comment about checking the var in the docs so it isn't ambiguous.\n. Added \"Please note that this variable is empty by default, and needs to be explicitly set by the user. Before installing to %chocolatey_bin_root%, your installation script should check if this variable is not empty.\" to wiki.\n. I have the feeling that people who are not working on the code but do care about packages and documentation miss out on the good stuff. :P\nHowever, there is no such file in functions: https://github.com/chocolatey/chocolatey/tree/master/src/functions\nCan you point me to the right direction?\nI want to see if it will daisychain with Install-ChocolateyZipPackage (or maybe is does that automatically).\n. Ah now I see.. the function doesn't exist yet. I'm slow. :P\n. I'd like to reference this post about env vars and finding the bin path as it is closely related to this issue:\nhttps://github.com/chocolatey/chocolatey/issues/221#issuecomment-11603183\nQuote:\nIs $env:ChocolateyInstall automatically set when Chocolatey is installed? Because we can use something like:\nPowerShell\nfunction Get-BinPath {\n    # Calculate $binRoot, which imo should always be set in $env:chocolatey_bin_root as a full path (not relative)\n    if($env:chocolatey_bin_root -eq $null) {\n        $binRoot = \"$env:ChocolateyInstall\\bin\"\n    }\n    # My chocolatey_bin_root is C:\\Common\\bin, but looking at other packages, not everyone assumes chocolatey_bin_root is prepended with a drive letter.\n    elseIf (-not($env:chocolatey_bin_root -imatch \"^\\w:\")) {\n        # Add drive letter\n        $binRoot = join-path $env:systemdrive $env:chocolatey_bin_root\n    }\n    else {\n        $binRoot = $env:chocolatey_bin_root\n    }\n    return $binRoot\n}\n. If the Chocolatey installer would set $env:chocolatey_bin_root = \"$env:ChocolateyInstall\\bin\" the effect would be the same, but more straight-forward for the user to change the bin location because the default is set rather than made up by the package if it does not exist.\nThese are just thoughts based on things I found confusing as a new user.\n. The first part is explaining how the Install command works as it is now. The second part explains something I cannot do. What part do I need to explain in a different way?\nCan you provide an example or link to documentation for all three?\nI haven't seen documentation on this. I will add them to the quick guide.\n- Unzip location\n- Partial unzip\n- (!) Make link in start menu\n. Ah thanks. I see partial unzip is limited for my purposes. So I mentioned it in another Enhancement #220, maybe it can be file-specific.\nWow I see it's actually quite powerful, being able to add file associations and pin stuff. I haven't found the specific start menu functionality yet, but pinning is close in essence.\nOnce I figure out specific stuff I will add it to the documentation under \"examples\" or \"common tricks\", because if it's easier for others to make packages, there is a bigger chance of more people making packages, which (in my opinion) is good. :)\n. I think this comes really close: https://github.com/chocolatey/chocolatey/tree/master/src/helpers/functions\nI think only $desktop needs to change in:\npowershell\n$desktop = $([System.Environment]::GetFolderPath([System.Environment+SpecialFolder]::StartMenu))\nAs seen in this documentation: http://www.programmersheaven.com/2/Les_CSharp_15_p2\nOf course renaming $desktop to something sensible like $start\nBut I'd need someone who actually understands Chocolatey and Powershell to test this and create a directory in the start menu called Chocolatey so Chocolatey-installs won't clutter the root of the start menu, which I don't know how to do.\nAm I overlooking something?\n. Nope, swamped too. :( And not enough Powershell knowledge (yet) to fix things within an acceptable timeframe. I think it would take me literally 10 times longer than someone who understands both Powershell and Chocolatey well.\nI really hate Powershell, because I have such a hard time reading it.\nPHP, Javascript, Python, they are all very natural and there is hardly a learning curve. You often get what is going on by looking at it for the first time.\nBut Powershell is pure syntactic salt, line for line.\nWhen I look at Powershell, almost every single line makes me feel like I have dyslexia. Last time a Microsoft language looked acceptable to me was when I was typing MSX-BASIC.\nOkay, end of rant. :)\nNice find in the link though!\n. It might be good to have the work of getting the wanted bin path in a separate module, so we can use Get-BinPath (or whatever) for any purpose, not just installing a tool.\nWhat does the referenced $(Split-Path -parent $MyInvocation.MyCommand.Definition actually do? In my powershell I get a spacebar.\nIs $env:ChocolateyInstall automatically set when Chocolatey is installed? Because we can use something like:\nPowerShell\nfunction Get-BinPath {\n    # Calculate $binRoot, which imo should always be set in $env:chocolatey_bin_root as a full path (not relative)\n    if($env:chocolatey_bin_root -eq $null) {\n        $binRoot = \"$env:ChocolateyInstall\\bin\"\n    }\n    # My chocolatey_bin_root is C:\\Common\\bin, but looking at other packages, not everyone assumes chocolatey_bin_root is prepended with a drive letter.\n    elseIf (-not($env:chocolatey_bin_root -imatch \"^\\w:\")) {\n        # Add drive letter\n        $binRoot = join-path $env:systemdrive $env:chocolatey_bin_root\n    }\n    else {\n        $binRoot = $env:chocolatey_bin_root\n    }\n    return $binRoot\n}\nIt would make packages with extra sorcery (like Install-ChocolateyExplorerMenuItem) a lot easier.\n. Huh? You don't have to define a version in chocolateyInstall.ps1?\nPowerShell\n$name = 'rismoney'\n$url  = 'http://www.rismoney.com/rismoney-v1.0.2_setup.exe'\ntry {\n    Install-ChocolateyPackage $name 'EXE' '/SILENT' $url\n    Write-ChocolateySuccess $name\n} catch {\n  Write-ChocolateyFailure $name $($_.Exception.Message)\n  throw\n}\nIs all. You just edit the url and the nuspec on update. Am I missing something?\n. But that one is not predictable, we do not know if the next one is gonna be called 1.0.3, 1.1.0-unicode, or has a different name/url than before. So we would always need to change that manually.\nMaybe I'm not aware of another function/reason that requires keying in this version somewhere else except for the software download path. In that case, I am sorry for providing my two cents. :)\n. Git is confusing (to a newbie), This is a separate change but it's automatically added to this pull-request.\nI thought a pull-request was a request to verify and merge the changes that were made up until the pullrequest was done, but I need to create a new branch for every different change?\n@rismoney Thanks for the help, but what do you mean by \"Change the bottom 4 commits to fixup instead of pick\"?\nAlso, I'm especially interested in preventing this. I thought a pull meant an exact replica from the root of the folder.\n@ferventcoder With this latest commit you can repair your foobar2000 package. I am succesfully using it for a new Rename Master package but it's not for the public yet because it requires the first (bunch of) commits.\nCheck it out. Usage:\n$url = Get-FilenameFromRegex \"http://www.foobar2000.org/download\" '/getfile/([\\w\\d]+)/foobar2000_v1.1.18.exe' 'http://www.foobar2000.org/getfile/$1/foobar2000_v1.1.18.exe'\nIt could even automatically install the latest version if you regex a second match around the version number, but there is a limitation in Get-FilenameFromRegex that makes it replace the first match only, but that is probably easily fixed by someone more seasoned with PowerShell development. :P\n. This stuff about branching.\nSo much to learn, so little time..\n. So I should fork my own master so I can play around without affecting this pull-request, and fork it everytime I do a pull-request, right?\nHow does this actually work in regards of Chocolatey? Do you check/accept/reject requests when a new version is about to come out? Should I send these requests to other forks by people who also worked on the original files?\n. I see. Thanks for explaining. I'll leave 'my' master alone for now until I figure out how to do all that branching and merging and master mirroring without screwing it up and getting my paths mixed.\nI have fulltime work too. Js developing mostly. I just look like a noob all the time because\n- I am new to PowerShell (and I find it syntacticly horrible)\n- I am new to GitHub (using it for code anyway)\n- I am new to Chocolatey/NuGet, and I like to commit while spending the least amount of time possible actually understanding the inner workings of either of them, while still adding value in the form of packages or helpers.\n. Splitting pull requests\n. This thing has not made it in yet?\n. Also fixed Dutch language\n. I was wondering, is the Start Menu directory in Windows translated internally from English to the locale, or vice-versa?\nIf so, this becomes a hell of a lot easier:\n```\n  $appData = [environment]::GetFolderPath([environment+specialfolder]::ApplicationData)\n  $destPath = Join-Path \"$appData\" \"Microsoft\\Windows\\Start Menu\\Programs\\\"\n  $destLink = Join-Path \"$destPath\" \"Name Of Target.lnk\"\n$shell = New-Object -comObject WScript.Shell\n  $shortcut = $shell.CreateShortcut($destLink)\n  $shortcut.TargetPath = Join-Path \"C:\\Path\\To\\Binary.exe\"\n  $shortcut.Save()\n```\n. A reminder that the old version that only works on English systems is still unfixed one year later:\nhttps://github.com/chocolatey/chocolatey/blob/master/src/helpers/functions/Install-ChocolateyPinnedTaskBarItem.ps1\n. bump\n2015 alert. We need this.\n. Where is the discussion about this? You might be right, but I have no\nrecollection of year old decisions. :P\nAnyway, this needs to be automated in installZipPackage, where a lot of GUI\ntools now get a command-line shim when they would actually need a start\nmenu entry.\nE.g. SomeGraphicalTool.STARTMENU creates a user-friendly entry in Start\ninstead of a power-user Shim.\nThere are a lot of new packages with GUI tools that (automatically) create\nshims, making these packages valid for power users only. There needs to be\nan easy way to have shims for the really nerdy tools, and start menu\nentries for packages that average users might want to have pre-installed on\ntheir laptops.\nOp vr 17 jul. 2015 om 14:00 schreef Rob Reynolds notifications@github.com:\n\nI thought we decided to prefer Install-ChocolateyShortcut over this -\nhttps://github.com/chocolatey/choco/blob/master/src/chocolatey.resources/helpers/functions/Install-ChocolateyShortcut.ps1\n?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/pull/228#issuecomment-122256001\n.\n.  Is there a file or a proposed file that we could/should use for small\nglobal functions like this?\nI can imagine in the future it would be beneficial to globalize other small\nbut useful functions as well and it's a hassle to create separate files for\nall of them, mainly because every file would need to be specified in that\nother file that imports them all.\n\nOn Mon, Jan 7, 2013 at 6:54 PM, Rob Reynolds notifications@github.comwrote:\n\n+1 like :D\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/229#issuecomment-11962409.\n. What's the reason for that?\n\nFor trivial but handy functions, a global tricks.ps1 or whatever might be easier on the eyes (contemplating a future where there are multiple trivial functions globalized) when looking inside the functions directory.\nJust curious. \n(Knowledge is acceptance and acceptance is peace of mind. ;))\n. Can I assign myself to this?\n. I wanted to attach the pull request here but I guess that's not possible or I am still too new with GitHub :P But here:\nhttps://github.com/chocolatey/chocolatey/pull/231\n. The idea is to write less code, not more ;)\nAlso, the idea is to make sense for people less tech-savvy but with a wish to make packages. Like my grandma. She would like to make packages, and she called me three times, worried about words like processorAddressWidth. She thought it would have to be measured in centimeters haha, silly woman. She knows what bits are though, because 30 years ago she had System 1 8 bits. She also complained that it was renamed to Macintosh 128k a few years later, saying it was confusing.\nSeriously though, I named the function Get-ProcessorBits in the pullrequest. Get two people to agree with you and I'll change it.\n. Closed with unmerged commits. Can I delete the branch?\n. Okay, the Redsandro:getSystemBits  branch has been deleted.\nGithub proposed this, but I'm still a bit foggy on Git and what impacts what so I needed to ask to be sure. :)\n. Gep13 said:\n\nI believe that this may also solve Issue 218 as well:\n218\n\nThis adds a shortcut to the desktop which does not make the application appear in the Windows 7 or Windows 8 start menu. It is not indexed for searching. \nThis https://github.com/chocolatey/chocolatey/pull/228 allows pinning to start. I use it in my own installers, but this should really be included in Chocolatey imo.\nI think it'd be best to encourage packagers to do pin to start anything that is not a command line tool as discussed here: https://github.com/chocolatey/chocolatey/issues/305\n. I am still unsure about what you mean in the description, but once I do, I can add this to the pull request.\n. Also, I am not sure if this is partially related, but I would like a \"pkgSource\" INSIDE the nuspec. That way, a simple package update only requires one file to be edited instead of two.\nOh yeah, and if this is going to be an environmental variable, the very essence of #306 is to keep a global naming convention, so this parameter should be $env:ChocolateyPkgRoot or ChocolateyPackageRoot.\nLet's keep all the Chocolatey related env vars in that tiny little \"windows env viewer\" prepended with \"Chocolatey\".\n. Apart from that, is it possible to add a custom property to the nuspec and have the value in the .ps1 install script?\n. I think it should warn though, if something like that is possible.\nCould not package your package because .NET is not installed.\n. I believe running nuget actually sais dotnet is missing, but the cpack command fails silently. No mention of anything went wrong.\n. I removed the dependency for now in order to get the package to install on my testing VM, so I could push a  new version of Rename Master.\n. I don't fully understand what you are saying because this dependency thing worked before and it had the same source. But if I understand correctly, it's something that is planned to be fixed.\nUntil then, better no chocolatey dependencies?\n. Ah I see, thank you for clearing that up!\n. Appended your explanation to the Wiki: https://github.com/chocolatey/chocolatey/wiki/CreatePackages#testing-your-package\n. The problem is fixed for the website and feeds if people just use html characters, like &micro;Torrent.\n. If it works, then I am happy.\nBut personally I find it more important that all these \"trashy\" looking packages show up nicely on the site. \nAll these \"???\" failed encoding symbols degrade the perceived quality of packages or the whole Chocolatey system for users.\nSo if every maintainer would just fix those ???'s into proper encodings until it is no longer necessary, no one will notice the encoding is screwed up under the hood.\n. Okay, that sucks.\nBut the fact is, this unicode thing doesn't work. It should, but it doesn't. Only ansi.\nI'm concerned about the page looking wrong. So for now, packagers shouldn't use unicode characters. Use (C) (R) u etc. in stead.\n\n. I didn't know that, thanks for looking it up.\nSo these problematic packages have a nuspec that was saved with improper encoding.\nYes, please add a note to the wiki. :)\n. \n. You recognize Geany. That's cool! :smile: \n. Wow, that's elaborate.\nI've added a line to the guide for people who don't like reading:\n- You must save your files with UTF-8 character encoding without BOM.\nIf you anchor your character encoding paragraph, I can link to it.\n. Speaking of wiki rules, those rules are annoying to read for people who have ~~sexdaily~~ dyslexia or otherwise have difficulty reading.\nIt is pragmatically clever to have every basic rule summarized within the rule and bold that section.\nE.g.:\n\n\nPackages of software that is illegal in most countries in the world are prohibited to publish on chocolatey.org. This applies in particular to software that violates the copyright, pirated software and activation cracks. Remember that this also affects software that is especially designed to accomplish software piracy.\n\n\nCould be:\n\n\n\nDon't package illegal software. Packages of software that is illegal in most countries in the world are prohibited to publish on chocolatey.org. This applies in particular to software that violates the copyright, pirated software and activation cracks. Remember that this also affects software that is especially designed to accomplish software piracy.\n. TomOne, I don't see your section yet. Once you updated, can you give me the anchor?\n. @TomOne if I may make a suggestion..\n\n\nUse the UTF-8 character encoding for the .nuspec and .ps1 files. If you don\u2019t respect this rule, some characters are not displayed correctly in the Gallery on chocolatey.org, because the Gallery assumes UTF-8.\n\nDon\u2019t save your nuspec files with a byte order mark (BOM). A BOM is neither required nor recommended for UTF-8, because it can lead to several issues.\n\n\n:smile: \n-edit-\nOh wait, are you saying the DOM part is uncertain now?\nI'm confused. Luckily I don't often use strange characters in my packages.\n. Hmm. Windows is known to follow their own standard. Chocolatey is Windows-only. Let's just follow what they 'say' is the standard. :tongue: \nJust like this line ending thing.\nLinux: LF\nOSX: CR\nWindows: CRLF\nCreate a package in Linux and in Windows it's all messed up if you don't use the proper newline code. But I shouldn't be using Linux to create packages for Windows. :P\n. You are replying to the character encoding wiki thing. I am not sure what you mean. Did you mean to reply to #355 ? Not sure what you mean there either. I'm sure other public feeds won't appreciate unacceptable packages either.\n. That's some wisdom right there. ;)\n. Isn't the problem solved by using the 'proper' charset?\nOn Oct 26, 2013 11:52 PM, \"TomOne\" notifications@github.com wrote:\n\nI mostly ignore things I can't change and change the things I can change.\nSounds pretty clear to me: We make chocolatey better by leaving the\ncharacter encoding section as it is and let IE die. [image: :grinning:]\nSorry if I mention it, but your wisdom phrase has an inconsistency: How\ncan you be sure that you can\u2019t change anything? If you take a closer look\nat history, you will notice great people who have seemingly done the\nimpossible. But today we know that it wasn\u2019t impossible. Thanks to those\npeople we now have democracy, women's suffrage and no more slavery. At\nleast in the countries where we live.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/294#issuecomment-27156620\n.\n. > Notepad++ incorrectly uses the term ANSI as UTF-8 for UTF-8 encoded files without a BOM.\n\nWhat version are you running? I have no \"ANSI as UTF-8\" option, only \"UTF-8 without BOM\"\n\nVersion 6.2.2 Build Nov18 2012. (year old)\n. Oh you're right! It goes back to ANSI.\n. Documentation is important, especially for new people. Who get a first impression. So I got a few suggestions if I may. :smile: \n- Provide an easy solution that does not scare away potential new packagers\n- Provide links when obvious. \n- ~~Always write Chocolatey with a capital, just like God.~~ hmm oops I guess this is not the case on the website.\n- A sidebar-like note should not be a bullet point. Bullet points should illustrate must-read important points. Notes should be optional and clearly separated from a rule list. (Dyslexia approved documentation)\nSuggested edit that implements all of these:  \n\nCharacter encoding\nEither:\n- Do not use non-ASCII characters. \nOr:\n- Use the UTF-8 character encoding for the *.nuspec and *.ps1 files. If you don\u2019t respect this rule, some characters are not displayed correctly in the Gallery on Chocolatey.org, because the Gallery assumes UTF-8.\n- Do not save your *.nuspec files with a Byte Order Mark (BOM). A BOM is neither required nor recommended for UTF-8, because it can lead to several issues.\n- PowerShell scripts need to be saved in UTF-8 with BOM. PowerShell is ignoring the standards and needs a BOM in order to recognize scripts as UTF-8. Otherwise it processes non ASCII characters incorrectly. \n- Don\u2019t use the default Windows Editor. In addition to its lack of features, it can\u2019t even save UTF-8 files without BOM. Alternatives:\n  - Notepad++\n  - Geany\n- You have to specify the UTF-8 encoding in the first line of your *.nuspec files like so: <?xml version=\"1.0\" encoding=\"utf-8\"?>.\nNote: There is a lot of confusion in the world of character encodings: For example, ANSI is an incorrect term for the internal Windows character encodings, e.g. Windows-1252. But you should not use this encoding family anyway. In addition, Notepad++ incorrectly uses the term ANSI as UTF-8 for UTF-8 encoded files without a BOM. If you select UTF-8 in Notepad++, it means UTF-8 with BOM. Therefore Notepad++ must show ANSI as UTF-8 in the statusbar.\n\n. > Good suggestions, except this one\nWell, I bet 95% of package maintainers (including myself) never gave it a thought and everything works as long as you stick to ASCII characters, because the encoding doesn't really matter then.\nSo, in practice (practice trumps theory) it's a proper and within packages widely used solution until you are a seasoned packager and want to do crazy stuff like:\n\u03bcTorrent, \u00a9 2013 bitTorrent\u2122\u00ae\n. @TomOne: Thanks! :)\nAlthough I disagree with your story. Meet Hank. Always in a hurry. Dyslexic. Hates reading. Hates editors. Hates Windows. Doesn't care about other people's mess, but cares about end user quality.\nWill he be scared away by half a page of encoding guidelines, or will he be saved by a simple rule to keep in mind?\nThe fact is, there are many Richard-like package maintainers on Chocolatey.org. Without them, Chocolatey would be worth less. Hank-like packagers are better than Richard-like packagers.\nDon't chase away net quality improving Hanks. :runner: \nLet's agree to disagree.\n. Yes I know the docs, I run Debian myself. :bowtie: \nBut I would never be a Debian packager. Their process is why many popular software isn't packaged for Debian. That's why there has been an ITP (intent to package) of Ubuntu One for 5 years now and it still isn't there. FreeFileSync has been ITP for 3 years and never seen the light.\n\nI\u2019m glad that I\u2019ve never met such a person. :smile:\n\nWell I might have exaggerated a bit, but here I am.\nLike Hank, I care about the quality of the user experience. Not about rules for the sake of rules, when it is proven that 9 out of 10 packages work fine when ignoring them. My packages are awesome, and apart from one*, they are all just default ANSI and no one will ever notice or care or have a problem with them.\n*) Hence my rule, for this one package your rules applied, and now it works fine too. User experience quality: 100%.\n(TBH I made one mistake in one package about guidelines but that one is unlisted now.)\n\nDon\u2019t tell me that almost all Windows users are like Richard or Hank.\n\nI didn't say that. I said that there are many Richard-like package maintainers on Chocolatey.org which is an exact quote from you. To prove my point. That if everyone would share my opinion, Chocolatey's supply would be higher quality than it is today, because Hanks care more than Richards.\nAnd to make it more fun, I actually think most Windows users are Richards. Certainly not all. There are a lot of Bobs. Only the above-average Windows user will even know/use/package (for) Chocolatey, and you said it yourself: there are many Richard-like package maintainers. Imagine how many Richards there are in the entire pool of Windows users.  :scream: \n(Just to clarify, I'm contradicting you because I don't agree, but in no way do I want to imply that all Windows users are Richards. All devs are awesome. Windows devs are even more awesome because they have to dig through those weird Microsoft syntaxes. :stuck_out_tongue: )\n-edit-\nSame thing happened with the multipackage installation code I proposed. ferventcoder totally rewrote it in clever ways inside the vbs in stead of outside. But for the user experience the end result is the same. It's a great addition either way.\nLet's just say we all care about something and we should applaud that. Am I wrong? :wink: \n. Microsoft chose ANSI and by ANSI they meant Windows-1252. I don't know if that's part of an \"embrace, extend and extinguish\" strategy, but when I am on a Windows machine, it's the law.\nThey made that a default, and when I use that, everything works. Except for characters that you don't find on MSX-Basic either. So I don't use them. Windows doesn't care because it doesn't need to decode characters. As long as you don't use characters that need decoding.\nIt is extremely simple.\nYou are seriously comparing this to total chaos?\nI'm gonna write my next package in Notepad.exe and no one will notice. :smiling_imp: \n. Your Internet Explorer analogy is flawed. If there's one thing I keep repeating I care about most, it's user experience. Stay away from IE! :smile: \nI don't see how you don't get it. Fact: Most packages work perfectly. Fact: Most packages don't have or need character encoding because they don't need character decoding. Fact: If you do need decoded characters, you have to take care of character encoding.\nThese are the facts, so I am factually right, although you can disagree with my opinion about the thoughts that surround it.\nSo again, agree to disagree, or be wrong. Your choice. :P\nFor the rest, I'm not interested in discussing the matter any further.\n. Agreed, but when maintainers notice they 'suddenly' have a character problem, they should want to read the guidelines in more detail and discover what is happening and fix the problem. If not, we give them a yellow card. :P \n. I don't think that will work. Once you save your file in standard (according to Windows) encoding, the character becomes unreadable when you reopen the file. But when I change encoding to utf-8, the char remains unreadable. I have to enter it again.\nBut if it will work, it's clever. What are computers for? To make our lives easier. :)\n. Once certain characters are \u25a1, like \u25a1Torrent \u25a12013 bitTorrent\u25a1, you can't get them back from a conversion.\nBut if you say there's no problem, I'm not gonna argue. I'd love to have cpack take care of this!\nI \u25a1 Unicode.\n-edit-\nI just tried. If you save it directly and load it directly, there is no problem. But if you save your package to a git repository, load it on a different machine and then push it, it's already too late.\n-edit-\nOr something. I have had this, but am not exactly sure what step causes this.\n. This I like.\nAlthough I always thought cpack was just a reference plus some alternate configuration to the nuget pack binary. Customizing and compiling binaries seems like a difficult thing. But it's too far from my bed so what do I know. :) \n. This is clever. But also pretty far-fetched in my opinion. And by that I mean that no Windows packager with a right mind will have a bash interpreter running.\nI don't mean that as an insult because according to those rules, I don't have a right mind either. :P \n. Disregard my earlier message. I was thinking in terms of the cpack pipeline. I thought you were working towards a solution for all packagers from which there is no escape, preferably without them even knowing. :)\n. @TomOne UTFCast Express might be relevant to your interests.\n(Did not use, just stumbled across)\n. I think you will be okay, as long as you don't use a BOM with a Dutch\nnuspec.\nMet vriendelijke groet,\n~Sander\nhttp://www.Redsandro.com/\nOn Mon, Oct 27, 2014 at 2:59 PM, Rob Reynolds notifications@github.com\nwrote:\n\nThere is only one way to really find out what happens if you use a BOM\nwith the nuspec. :)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/294#issuecomment-60595836\n.\n. All I care about is that the unicode characters show properly in packages and on the website/gallery.\n\nThey don't by default (when using BOM).\n@TomOne figured out a set of rules to follow that makes the packages end up nicely with all unicode characters in the chocolatey gallery. Personally, I don't care or understand too much about the theory behind this. I do however know that it doesn't work properly if you don't follow this advise.\nBut\nIf you are saying that this is also possible with a simple fix in cpack/cpush, I'm all for that.\nhttps://github.com/chocolatey/chocolatey/blob/master/src/functions/Chocolatey-Pack.ps1\nhttps://github.com/chocolatey/chocolatey/blob/master/src/functions/Chocolatey-Push.ps1\n. Sweet! Are you sure you ignored all the 'rules'?\nDid @ferventcoder update things? Can you verify, @TomOne?\nIf anything, the instructions are sexier if we don't need the encoding hackery.\n. @jberezanski and @svnpenn were right to raise the issue. I guess the character guidelines are obsolete.\n. Anyway, I strongly encourage you to merge this (and port it to the monolith if you want, but merge it first). When you do this trick on a random strangers laptop, they become so happy, you get instant Chocolatey fans. But it won't work if they install Chocolatey on someone elses laptop. Until this is merged, that is. ;)\n. Nope, it works fine here. Single packages are handled exactly as before. I just installed putty to confirm your response but I had no problem. This is Windows 7 Home Premium with .NET 4.0.\ncinst.bat is shorthand for chocolatey.cmd, and that is the one I changed. 99% of people will use cinst. 0,9% of people will use chocolatey.cmd And you want to hold off the update to accomodate for the other 0,1%? (PS Don't get offended by my exaggeration skills, that's just how I communicate. ;) )\nAnd your pipe example is a totally bad unintuitive crazy kinda Chocolatey-will-never-get-popular-this-way language construct IMO. I just want to see this Chocolatey be more like... well, every other package manager out there in the Linux world so that you can actually guess how it works.\napt-get install geany firefox vlc chromium libreoffice filezilla\nyum install apache2 php mysql vsftp mongodb\nchocolatey install 7zip vlc putty GoogleChrome firefox filezilla\ncinst 7zip vlc putty GoogleChrome firefox filezilla\nThere I fixed it. You're welcome. ;)\n. Are you running windows XP or an older .NET? Or did you make an accidental typo when trying my code?\nBecause if it is the former that does not like the code, I can rewrite the batch in MS-DOS style. Uglier but maybe more compatible? (I'm just guessing here) I thought XP already did work with the 'new' syntax though.\n. One last thing, I am not \"Relying on the count of params\". It just batches all params one by one.\n. Oh! I misunderstood you! You are correct. Let me get back to you when I am\nnot asleep. My mistake. I got a solution.\nOn Jun 26, 2013 6:49 AM, \"Rich Siegel\" notifications@github.com wrote:\n\ni am not using alpha version (which is the one on github iirc)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/304#issuecomment-20027033\n.\n. You were absolutely right. When you said \"cinst putty -Version 0.62.0.1 works before this change but not after.\" I thought you just mentioned the version of putty as a courtesy to me to be able to verify, instead of meaning an actual command. I should have picked up on the minus sign, but you can also use backticks to minimize confusion.\n\nHaving said that, I now remember why I didn't push this mod in the first place when I made it: Although I personally don't care about version management and just ignored it - I only use Chocolatey to batch install 30 apps on a clean system for others, and additional apps for myself although I rarely use Windows - I know I purposely ignored the rest of the commands and that is why I shouldn't push this. I just forgot about it after a long time.\nHowever, I do seriously mean that this feature is absolutely invaluable to the point that I'd rather create a custom installer for myself and everyone I recommend Chocolatey to, than wait 15 months for someone to port this to ps.\nOn a more positive note, I just fixed all the problems in my latest commit. :) You can now either install multiple packages, or give commands using -wildcards as specified in chocolatey /?.\n. Single:\n``` cmd\nC:\\Users\\Redsandro>cinst notepadplusplus\nChocolatey (v0.9.8.20) is installing notepadplusplus and dependencies. By installing you accept the license for notepadplusplus and each dependency you are installing.\n__ notepadplusplus.install v6.3.3 ____\nblah blah\n```\nAdded commands (works with all commands):\n``` cmd\nC:\\Users\\Redsandro>cinst notepadplusplus -version 2.24.1\nChocolatey (v0.9.8.20) is installing notepadplusplus and dependencies. By installing you accept the license for notepadplusplus and each dependency you are installing.\nUnable to find version '2.24.1' of package 'notepadplusplus'.\netc etc\n```\nBatch mode:\n``` cmd\nC:\\Users\\Redsandro>cinst notepadplusplus treesize\nInstalling packages in batch mode.\nInstalling notepadplusplus ...\nChocolatey (v0.9.8.20) is installing notepadplusplus and dependencies. By installing you accept the license for notepadplusplus and each dependency you are installing.\n'notepadplusplus 6.3.3' already installed.\nIf you want to reinstall the current version of an existing package, please use the -force command.\nFinished installing 'notepadplusplus' and dependencies - if errors not shown in console, none detected. Check log for errors if unsure.\nInstalling treesize ...\nChocolatey (v0.9.8.20) is installing treesize and dependencies. By installing you accept the license for treesize and each dependency you are installing.\nUnable to find package 'treesize'.\nFinished installing 'treesize' and dependencies - if errors not shown in console, none detected. Check log for errors if unsure.\nInstalled all packages. :)\n``\n. Does that work? As far as I know,$commandis always the first and$packageNameis always the second, because they are not used aswildcards. I don't think thatpsdoes automatic shifting if the first is actually$version` but is extracted.\nI think this is pretty rock-solid. But in the end you can break everything if you want it to, especially this hideous thing called powerscript. But this implementation does everything the way chocolatey /? says it is done. At least as far as I have tested.\n. Also, don't underestimate the power of cmd. The ps does not require fixing. But you're right I'm curious to others' opinions too.\nI do know the opinion of non-technical users. It has astounding similarities with the last sentence in the chorus of Thrift Shop by Macklemore.\nAs a final exposition I would like to constrain how much added value this is to normal users. And we're all busy people, the smallest ps features take forever to get in mainline.\nThe reason that I am pushing this so vividly is that I had four people applaud enthousiasticly this Chocolatey trick I did, and when they mention they want to implement that in their own workflow, I have to explain that I'm using a custom version and they need to copy my blabla.cmd to yaddah yaddah (translated into how they perceive my instructions) and they are like: Wut? http://goo.gl/OdpNo\n. Wow, it's handy to know powershell. :P \nDetails are very important. Details can even make an overpriced turd popular. Just look at Apple Inc. That's why I'm seemingly nitpicky, but please understand it is only because I care. :)\nThat said, this is a big step forward. But it's still unintuitive-ish. These days, smartphones come without a manual because everything is tackled in the simplest feasible decimation. People (can) rely on that. Not needing comma's is a smartphone that doesn't need a manual. Otherwise we'd have to explain in the manual: We know the 10 most popular package managers use space delimited package lists for batch installation, but we need a comma separated list because [insert reason the user doesn't really care about].\nEspecially if you promote Chocolatey as \"like apt-get\".\nI know, semantically \"like\" allows for variations. But that's not how the world, users from the three most popular distro's that use apt-get, and google, work.\nWe can probably use both btw. Just putting it out there.\n. > this requires comma between package names.  \nTemporarily? :P\nComma is inherent to powershell array afaik so I'm not sure how you propose to do that, but that last comment makes me happy. :)\n. That simple huh.\nBy c# replacing ps, do you mean you want to rewrite the entire monolith?\n. I don't understand the consequences of removing something that needs to stay in, but this is a huge step in the usability of Chocolatey! I am happy.\nAlthough I didn't test anything (already got a working batcher in place ;)) so I don't know if those rismoney testcases will hold up.\n. So once rismoney approves, I suggest uploading a new release as soon as possible. YESTERDAY!\n. Yes I approve with a smile on my face. :)\nDid not expect to have this available (through -prerelease) today.\n. Not really understanding what you mean. I thought your auto-update packages did something like that. I don't really understand those either. :P But apart from that, aren't all package sources hardcoded? We would need to have a sources registry. In which case we might as well add the silent installer switches to a registry. And the installation code. And we wouldn't need packages anymore.\nSorry I am probably misunderstanding this. :P\n. Or should I have put this in src\\helpers\\functions\\ and added to src\\helpers\\chocolateyInstaller.psm1 in order for it to work like this?\nIdk, I tested it inside packages themselves (because I already pushed one), not sure where to put it in the monolith.\n. I did Fus Ro Dah push (--force) and added to chocolateyInstaller.psm1 as well.\nPlus made it more maintainable (readable) (deja vu).\n. Note that this package also features backwards compatible transitioning between old and new $env: as first mentioned here: https://github.com/chocolatey/chocolatey/issues/216#issuecomment-11639464\n\nI would even go as far as renaming chocolatey_bin_root to ChocolateyBinRoot so it has the same naming convention as ChocolateyInstall.\n\nAs part of my quality assurance policy described here: https://github.com/chocolatey/chocolatey/pull/304#issuecomment-20126209\n\nDetails are very important. Details can even make an overpriced turd popular. Just look at Apple Inc. That's why I'm seemingly nitpicky\n. Ah I just carried on with the bin_root var I found in one of your packages, I thought it was your convention.\n. I miss out on those kinda things, I guess that's why I need to follow @chocolateynuget\n. > Plus made it more maintainable (readable) (deja vu).\n\nAh here is my deja-vu concerning src\\helpers\\chocolateyInstaller.psm1 coming from:  https://github.com/chocolatey/chocolatey/blob/aca9f1545bbc774fba190374cacc7f8c74af7286/src/helpers/chocolateyInstaller.psm1\nYou already merged this to master. But when I git fetch upstream && merge upstream/master my local source is still old. Am I using git wrong?\n. I did\ngit remote add upstream git://github.com/chocolatey/chocolatey.git\ngit fetch upstream\ngit merge upstream/master\n. I thought so too (should). Maybe I error-ed in some other way. I'll see what happens next time I create a new module.\n. Oh yeah I see. You have to click on the different version first.\n. > Also, cup ends without error if there's an error like package exists or trying to install same version.\nThis is a valid issue though, I just had it again, forgot I already upgraded on a machine:\n``` cmd\nC:\\Users\\Redsandro>cup tomboy -pre\n... (8 second pause, no output)\nC:\\Users\\Redsandro>cup tomboy -pre\n... (8 second pause, no output)\nC:\\Users\\Redsandro>cup -pre tomboy\n... (8 second pause, no output)\nC:\\Users\\Redsandro>cinst tomboy -pre\nChocolatey (v0.9.8.21-alpha2) is installing tomboy and dependencies. By installing you accept the license for tomboy and each dependency you are installing.\n'tomboy 1.15.1-beta' already installed.\nIf you want to reinstall the current version of an existing package, please use the -force command.\n... Aha, so that's why!\n```\n. This works\n. :+1: \n. I'm confused. All I know is it both works for me (tested) and I am unaware\nof the practical difference. You can choose to merge either one of the\ncommits, all the same to me. :P\nOn Jul 3, 2013 4:13 AM, \"Rob Reynolds\" notifications@github.com wrote:\n\nBoo, we'll switch to write-output all at the same time... right now it's\nwrite-host and we have a logger\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/313#issuecomment-20391648\n.\n. I experience the same, it's okay if some maintainers are occupied, but often there is just no response.\n\nThere is also a massive amount of package trash where there are duplicate packages, personalized packages, personalized package names, and all kinds of other against-guidlines things.\nSome of the packages I've seen on the gallery are prefixed with these names:\n- Ed.Evans\n- EthanBrown\n- Fschwiet\n- PProvost\n- TimRayburn\n- AlanStevens\n- TheGiant\n- secondstrategy\n- kareemsultan\n- Jivkok\n- kellyelton\n- fruin\n- gb\n- msanico (new 2014-07)\n  - No icons\n  - Bad pakage names\n  - Separate packages for 32 and 64 bit\n- jbatte47 (new 2014-07)\n  - Naming guidelines\n  - Personalized package\nI'd like to see the gallery free of duplicates and personalized packages. \nAlso, new maintainers are not even encouraged to read the rules. Here is the registration verification mail:\n\nThank you for registering with the Chocolatey Gallery. We can't wait to see what packages you'll upload.\n\nI would strongly advise to put the entire packaging guidelines text in the confirmation mail.\n. How did this suddenly turn into something I don't quite follow? :smile: \nIt's actually possible to have the package repo fire up a VM and test the package?\nWhat if thee of us upload a package at the same time, three VMs will launch and we need three MS licenses?\nI think the registry snap compare to check for bs is a bit tough though, updated software often has new fingers in the registry, so it would need manual updating. Might as well do a manual check on bs (toolbars) then.\n. I'll just leave this here..\nhttps://github.com/Genbox/VirusTotal.NET\n. Just a thought, this would also help prevent the necessity of triaging in certain cases. Why not have a VM build ~~all~~ ~~some~~ core team Automatic Packages? We wouldn't need to be running Windows and a scheduler. Give a virtual chocolatey user some pushing to do. :)\n. > Can you elaborate more on this @Redsandro\nIn this case I'm actually not talking about Boxstarter, but in the light of this being a Chocolatey topic, the talk about VMs gave me this idea. Automatic packages need to be automatically generated on computers running all the time (or at least frequently). I don't run Windows, so I cannot turn my packages into automatic packages.\nWhy not have a VM do this, and have the user Chocolatey user push them, as described in the community packages repo.\nFor every package that is stuck unupdated with an unresponsive maintainer, we (or someone who decides this) can just 'kidnap' the stuck package, turn it into an autopackage, and hand it over to the VM/Chocolatey user.\n. Idea 1\nConcerning the packages that are similar because owners don't respond and someone else decides to upload a newer version under a different name:\nMaybe there should be a small group of moderators with the power to take over packages, remove the install script, add a dependency to the new package, or add the new package owner to the old package (to keep the sensible name).\nI wanted to install Visual Studio for someone the other day, and there are like 40 packages. No idea which one I need. Maybe it's a bad example, but I had something like this before with some SQL implementation, and I remember having to compare versions, and guess which one I should install.\nIdea 2\nAutomation. Set a clock (for e.g. 30 days) when a package maintainer is contacted for an update, and if they didn't respond within that timeframe, automatically add core team members as package owners and remove the old owner.\n. Is it possible to automate a system to move packages to MyGet, which I know nothing about, but @gep13 recommended for alternative package hosting?\nWould be cool if moderators could 'move' invalid packages to a separate 'stream'.\n. @TomOne said on Dec 7 2013:\n\nYes, I agree with you. But remember that many of these name prefixed and duplicate packages were created before I suggested the package rules and added them to the wiki after Rob had approved them. \n\nGuidelines like https://github.com/chocolatey/chocolatey/issues/316 and https://github.com/chocolatey/chocolatey/issues/317 are still being ignored well over half a year after I raised the issue. Soon every popular package will have a funny name, and only future obscure ones will be named properly. I recently came across HitmanProPortable_x64 and HitmanProPortable_x86. Thee \"violations\" in one package name. This slowly growing library of bad names can be (partially) prevented using some relatively easy tricks.\n1. Put the entire packaging guidelines text in the confirmation mail. (see comment 30056205)\n2. Put the entire naming guidelines in the confirmation mail.\n3. Have cpack run checks, especially on the package id.\n   - Similar to @TomOne's idea to have cpack prevent users from messing up encodings in https://github.com/chocolatey/chocolatey/issues/294\n   - If it matches /portable/i but not /\\.portable$/, refuse to pack/push.\n     - Friendly message why.\n   - If there's a period . not followed by installer$ or portable$, refuse to pack/push.\n     - Friendly suggest replacing dots by dashes with example. E.g.: my.sweet.package -> my-sweet-package.\n   - Same with underscores _.\n. That would help indeed.\nBut how would you typify \"easier\"? I think a moderation system could be in place a year from now. And as I said before, a poor solution in practice is infinitely better than a perfect solution in theory. (And I'm not even saying the solution is poor.)\nThe above 'trick' 1 and 2 could be in place today, because it doesn't require too much thinking or efford.\nI can make a proposal with links instead of inline rules (because I cannot figure out how html markup works).\n. Here you go: https://github.com/chocolatey/chocolatey.org/pull/87\nFeel free to word it any way you see fit.\n. I agree, but I'm not sure where the line is drawn. Hell, I'm even annoyed by all the .tool .installer .app .portable .commandline and .iDontKnowHowToCategorizeThisAppButOtherwisePeopleDontKnowWhatTheHellTheyAreDoing packages, but that's the direction we're going.\nIn other words, this is something only ferventcoder can answer, I just made the rules more readable without actually changing them, and I need some kind of permission before I go ahead and update the wiki. :smile: \n. @TomOne Isn't .install the default/obvious way to go? I understand .portable but appending .install to pretty much every package is pretty silly in my golden opinion.\nI discovered Chocolatey when googling apt-get for windows. apt-get is intuitive. Both apt-get and cinst can do cinst firefox freefilesync libreoffice now.\nBut do I understand you correctly that this would be cinst firefox.install freefilesync.install libreoffice.install in the future? That would be kinda retarded.\n\nThey are essential to understand what the package contains.  \n\nFor .portable it is convenient. You can do cinst pidgin or cinst pidgin.portable (made up example). Makes sense. Intuitive.\nBut the default shouldn't introduce command line bloat in my opinion. You could store all metadata in the package-id: cinst pidgin.gpl3.x64.tags[internet,messaging].portable but that's not how we should learn what's in the package, we got the package page with information to know what is in the package.\n. Ah ok, I interpreted that wrong. I have reading issues. :P\nSo folks can set a preference for either portable or installer? That makes some sense. :)\n. > And there are still folks which ignore the rules and guidelines in the wiki and use the deprecated suffixes.  \nNot so much as ignore, I think more like unaware of. Package maintainers should in my opinion get an email when the guidlines change considerably.\n. Ok I will apply them in about 30 seconds. :+1: \n. https://github.com/chocolatey/chocolatey/wiki/CreatePackages#rules-to-be-observed-before-publishing-packages :+1: \n. There are many commercial and trial packages out there. This is not mentioned in the description. If it sounds nice and you try it out, only to find out it's a trial or you need a license immediately, it's annoying.\nI suggest adding the rule:\n- Packaging commercial or trial software? Clearly state this in the package description.\nWhat do you think?\n. Added. :thumbsup: \n. This could get more important over time. Let's put it on a future wishlist. :)\n. I found it: This installation package could not be opened. Contact the application vendor to verify that this is a valid Windows Installer package.\n[source]\nI already contacted the package owners, though in my experience, I never ever get a reply. :P \nAnyway, the point of this issue report is more that in my opinion, Chocolatey should just show one error (once) and continue with the next package.\n. > WTF on number 2?\nYeah crazy. I just checked on another machine where it still had Version: '0.9.8.21-alpha2' installed. There chocolatey /? works fine.\n``` cmd\nC:\\Users\\Redsandro>chocolatey version\nfound         : 0.9.8.21-alpha2\nname          : chocolatey\nlatestCompare : 000000000000.000000000009.000000000008.000000000020\nverMessage    : Your version is newer than the most recent. You must be smarter than the average bear...\nlatest        : 0.9.8.20\nfoundCompare  : 000000000000.000000000009.000000000008.000000000021.alpha2\n```\nSo let's try:\ncup -pre chocolatey\nWut? Now my terminal closes. Is that normal? I guess so. New terminal:\n``` cmd\nC:\\Users\\Redsandro>chocolatey version\nfound         : 0.9.8.21-beta1\nname          : chocolatey\nlatestCompare : 000000000000.000000000009.000000000008.000000000020\nverMessage    : Your version is newer than the most recent. You must be smarter than the average bear...\nlatest        : 0.9.8.20\nfoundCompare  : 000000000000.000000000009.000000000008.000000000021.beta1\nReading environment variables from registry. Please wait... Done.\n```\nAnd now for the test:\n``` cmd\nC:\\Users\\Redsandro>chocolatey /?\nCalls one batch program from another.\nCALL [drive:][path]filename [batch-parameters]\nbatch-parameters   Specifies any command-line information required by the\n                     batch program.\nIf Command Extensions are enabled CALL changes as follows:\nCALL command now accepts labels as the target of the CALL.  The syntax\nis:\nCALL :label arguments\n\n(...)\n```\nSo yes, this call /? bug was introduced after alpha2.\n. How can I downgrade to the alpha from august? (latest after the beta was taken down)\n. Thanks!\nOn Nov 4, 2013 11:03 PM, \"Rob Reynolds\" notifications@github.com wrote:\n\nCinst chocolatey -version theversionyouwant\nOn Monday, November 4, 2013, Redsandro wrote:\n\nHow can I downgrade to the alpha from august? (latest after the beta was\ntaken down)\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/chocolatey/chocolatey/issues/358#issuecomment-27727173>\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/358#issuecomment-27727266\n.\n. > What was the original that this came in?\n\nI think it was https://github.com/chocolatey/chocolatey/pull/306 and it looks like it's still open. Although I was sure that it was already merged and I got the 'delete branch' message. Or maybe I'm going slightly mad.\nAnyway, can you tell us a statistical mean for how long it takes for current branch to become non-prerelease?\nThat's the moment when we can use this in live packages. :)\n. I added this to the ruby package and temporarily included the same Get-BinRoot.ps1 file as an included script: https://github.com/ferventcoder/nugetpackages/pull/110\nThis can be a prototype fix for all packages that have this problem. The extra file can be removed from packages once Chocolatey is no longer pre-release.\n. You have my interest. I have no idea what you are saying, but I don't like batch redirects.\nWhat are shim files in this scope?\n. I'd also like to suggest that Write-Host comments should try to stick to an 80 character maximum. as not to annoy a default-sized terminal. Better use two lines split in a more human way, than rely on auto-wrap.\n(Just like comments in most source code is traditionally no longer than 72 characters for readability.)\n. Sweet :)\nOn Mar 2, 2014 10:54 PM, \"Rob Reynolds\" notifications@github.com wrote:\n\nI am going to pull in #376https://github.com/chocolatey/chocolatey/pull/376though.\n\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/374#issuecomment-36468591\n.\n. Sweet, but not yet epic enough for a new chapter in the bible.\nI like the readable URL thing for the download notice.\nI'll check again after #376 is pulled. :)\n\n\n. Actually, it's often more like 3 lines placed in a more human-readable way over the original 3 lines autowrapped and broken mid-sentence. Unless you changed the width of the default terminal to span one and a half monitor.\nBut I thought about your suggestion before and I thought leave the first line/part and have the rest optional with a -verbose flag.\nOr as a middleground solution, get the width of the terminal, write a single line if it fits, write 3 lines if it doesn't.\nOr truncate the url in the output to only the domain, and truncate the target to only the filename. (Not a fan of this)\n. I like to emphasize the importance of prettifying the output. \nThere are two kinds of human conscious perception: orderly (usually women) and industrious (usually technical people). Right now, Chocolatey scores a 8 at industriousness and a 2 at orderliness.\nStudies have shown that visual orderliness is psychologically associated with quality and trustworthiness. Right now the general output looks like a mess. I'm just saying that this issue is way more important than most industriousness people (AKA developers AKA people here) think.\nI am also talking about #376 here. Of course you don't have to agree with my propositions, but you should do something.\nThink about spacing, new information should start at the same point the next line. Do not cram too much information on one line. Imagine the Linux dmesg boot process. It would be MUCH shorter if multiple pieces of information would be on the same line like in Chocolatey, but shorter is not always better. They are put below each other because it improves readability and thus the feeling of quality. Think about using color (#376) (orderly) in stead of ascii (industrious) as visual cue's.\nLet's be industrious where it counts (in the code) and orderly where it counts (in the output).\n(edit/ oh shoot wanted to post this at #374)\n. I am glad we could make a deal! :smile: \n. Cool. Will there be a preview this month?\n On Mar 2, 2014 10:27 PM, \"Rob Reynolds\" notifications@github.com wrote:\n\nFound a bit cleaner method on this, so closing this.\n\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/375#issuecomment-36467621\n.\n. @ferventcoder : For every package you see the full statement\nChocolatey (v0.9.8.23) is installing 'SomePackage' and dependencies. By installing you accept the license for 'renamemaster' and each dependency you are installing.\nSomePackage v1.1.1.1\n(...)\nChocolatey (v0.9.8.23) is installing 'OtherPackage' and dependencies. By installing you accept the license for 'renamemaster' and each dependency you are installing.\nOtherPackage v1.1.1.1\n(...)\n\nWould be nice to see the message about Chocolatey once (and licenses also once, if you have to). The packages can be mentioned once (apt-get style) because the package is mentioned again on the next line anyway.\n\nChocolatey (v0.9.8.23) is installing the following packages:\nSomePackage OtherPackage ThisPackage ThatPackage\nBy installing you accept the licenses for these packages and dependencies.\nSomePackage v1.1.1.1\n(...)\nOtherPackage v1.1.1.1\n(...)\n\nOr something. I don't know where to add a once-only message in the installation process, but then these messages can be left out: https://github.com/chocolatey/chocolatey/search?q=is+installing+%27&ref=cmdform\n. Following up on https://github.com/chocolatey/chocolatey/pull/375#issuecomment-31063231 : Am home now (where I have Windows 8) and here is the output of default 80 width terminal for installing krita and paint.net:\n``` cmd\nC:\\Users\\Redsandro>cinst krita paint.net\nChocolatey (v0.9.8.21-beta1) is installing 'krita' and dependencies. By \ninstalling you accept the license for 'krita' and each dependency you are \ninstalling.\n__ krita v2.7.9.0 _\nDownloading Calligra Krita 64 bit (\nhttp://heap.kogmbh.net/downloads/kritax64_2.7.9.0.msi) to \nC:\\Users\\Redsandro\\AppData\\Local\\Temp\\chocolatey\\Calligra Krita\\Calligra \nKritaInstall.MSI\nInstalling Calligra Krita...\nElevating Permissions and running msiexec /i \n\"C:\\Users\\Redsandro\\AppData\\Local\\Temp\\chocolatey\\Calligra Krita\\Calligra \nKritaInstall.MSI\" /quiet /norestart . This may take awhile, depending on the \nstatements.\nCalligra Krita has been installed.\nCalligra Krita has finished successfully! The chocolatey gods have answered \nyour request!\nCalligra Krita has finished successfully! The chocolatey gods have answered \nyour request!\nFinished installing 'krita' and dependencies - if errors not shown in \nconsole, none detected. Check log for errors if unsure.\nReading environment variables from registry. Please wait... Done.\nChocolatey (v0.9.8.21-beta1) is installing 'paint.net' and dependencies. By \ninstalling you accept the license for 'paint.net' and each dependency you \nare installing.\n_ paint.net v3.5.11.20130909 ___\nMode                LastWriteTime     Length Name\n----                -------------     ------ ----\nda---        12/21/2013     14:39            paint.net\nDownloading paint.net 64 bit (\nhttp://www.dotpdn.com/files/Paint.NET.3.5.11.Install.zip) to \nC:\\Users\\Redsandro\\AppData\\Local\\Temp\\chocolatey\\paint.net\\paint.netInstall.zi\np\nExtracting \nC:\\Users\\Redsandro\\AppData\\Local\\Temp\\chocolatey\\paint.net\\paint.netInstall.zi\np to C:\\Common\\Chocolatey\\lib\\paint.net.3.5.11.20130909\\tools...\nC:\\Common\\Chocolatey\\lib\\paint.net.3.5.11.20130909\\tools\npaint.net has finished successfully! The chocolatey gods have answered your \nrequest!\nInstalling paint.net...\nElevating Permissions and running \nC:\\Common\\Chocolatey\\lib\\paint.net.3.5.11.20130909\\tools\\Paint.NET.3.5.11.Inst\nall.exe /auto DESKTOPSHORTCUT=0 . This may take awhile, depending on the \nstatements.\npaint.net has been installed.\npaint.net has finished successfully! The chocolatey gods have answered your \nrequest!\nFinished installing 'paint.net' and dependencies - if errors not shown in \nconsole, none detected. Check log for errors if unsure.\nReading environment variables from registry. Please wait... Done.\n```\nHere is what I think it should look like:\n``` cmd\nC:\\Users\\Redsandro>cinst krita paint.net\nChocolatey (v0.9.8.23) is installing the following packages:\nkrita paint.net\nBy installing you accept the licenses for these packages and dependencies.\nkrita v2.7.9.0\nDownloading Calligra Krita 64 bit\nFrom: http://heap.kogmbh.net/downloads/krita_x64_2.7.9.0.msi\nTo:   %Temp%\\chocolatey\\Calligra Krita\\Calligra KritaInstall.MSI\nInstalling Calligra Krita...\nElevating Permissions...\nRunning MSI installer...\nCalligra Krita has been installed.\npaint.net v3.5.11.20130909\nDownloading paint.net 64 bit\nFrom: http://www.dotpdn.com/files/Paint.NET.3.5.11.Install.zip\nTo:   %Temp%\\chocolatey\\paint.net\\paint.netInstall.zip\nExtracting...\nInstalling paint.net...\nElevating Permissions...\nRunning EXE installer...\npaint.net has been installed.\nChocolatey installed 2 packages. 0 packages failed.\nSee the log for details.\nThe chocolatey gods have answered your request!\n``\n. I'm not even usingYum(apt-get` here) but I am not surprised because #GMTA. :wink: \nTo illustrate that we don't need large error messages. Just output the error to the log, and output a single line saying installation failed to the output. It will say, e.g.\n``` cmd\n(...)\npaint.net installation failed. :(\nChocolatey installed 1 packages. 1 packages failed.\nSee the log for details.\nThe chocolatey gods have answered your request!\n```\n. > If we are going to say see the log for details, then I think we should include where the log file is located\nI agree*, as long as it fits in a 80 character line, otherwise it needs to be shortened.\n\nor have a Read-Host, or something, asking if you want to open the log file.\n\nI absolutely disagree. Nothing should hang the process. Not waiting for input. It should be able to complete on it's own. Maybe with an exit code.\n\nlist the failed pkg names so one would not have to crack open a log file just to figure out what did not install.\n\nI agree*, but you would not have to open the log file to figure that out. Because now that the new output is actually a pleasure to read, you'll quickly spot a red line. Here's a colored mockup:\n\nhttp://cssdesk.com/JUTPR\n\nall verbose info that goes to the log should also gk to the console if -verbose is passed or $verbose preference is set to continue.\n\nI agree.\n\noutput psobjects to the pipeline with info like success/fail, exceptions, packagename\n\nI don't understand so I'll leave opinions to the professionals. :)\n*) There's more interesting stuff we could do, for example, list the dependencies of all packages after the to-be-installed packages. But I thought: Let's clean this up first, and add features later. Small steps have a bigger chance of actually being stepped. :)\nWe could also remove the To: %Temp% line and put it in the log, because it doesn't really add anything. But the From: line is important (seeing (and trusting) the source is important).\n. Textually this is pretty awesome! :thumbsup: \nHowever, the color doesn't really add anything. And the text can be more 80-friendly. So please allow me to comment on that:\n1. Using all the same color has no visual benefit. Alternate between key information and verbose information (and successful information and error information) with color and weight.\n2. Take care of the default console width, you don't want a sentence wrap it's last two characters to the next line.\n   - Preferably, you don't want to wrap at all. You don't really have to be polite and say please to the user when you can say it in one line. :)\nMockup:\n\n. Ah I already made a two-package mockup, shame to throw it away. So I'll paste it anyway.\nBut sounds cool. I'm not sure about anything PowerShell either, but it is supported in Unix escape codes and I used to do that for curses text output in python scripts for Linux. They could be run on Windows too, and it just displayed the bold text in the console. I have no idea if curses does that or if the console just supports that natively.\n\n\n. It's a frickin binary!\nAre you doing a complete rewrite or something?\n. I believe you. :) This is better!\nAny rough* idea when we're all going to use this?\n\n*) a month, season, year, lustrum?\n. Very nice!\nThis is convenient for both audiences, neat and simple, or optional verbosity!\n:thumbsup: \n. Really cool. What language is that?\n(those lines you removed) :)\n. That's probably cool but not something that will get me excited.\nNow we're going to get all these hipster packages polluting the feed.\nBesides, OSX is totally different in every way, how would that work?\n. Oh I would love that for Linux!\nI find myself every now and then making a (requested) update, only having to wait a week before I have access to a Windows machine for cpack and cpush.\n. The current output and new colors are looking nice! :thumbsup: \nThe limegreen package titles are very distinctive, the output is friendly to look at.\nIf stuff goes wrong, the -debug optionally makes output very verbose.\n. Nothing wrong with it. I use regexes for other packages too. Just didn't think about using a bunch of them in a row.\nFeel free to improve. Coming from Linux myself, I didn't know powershell either when I discovered Chocolatey.\nMaybe your regexes are smarter, I just rewrote them because I don't get the sed syntax with all the comma's. :question: \n. Same problem again. Fixing the broken CNET parser needs all packages fixed. This should be internal, just like SourceForge is handled internally.\n. For reference:\nhttps://github.com/Redsandro/chocolatey/blob/master/autopackages/PartitionAssistant/tools/Get-UrlFromCnet2.ps1\nHowever, why does this return an array?\n[0]    =>    True,\n[1]    =>    \"http://www.TheUrlThatIAmLookingFor'\n. Thanks! :+1: \n. I still think helpers should have a certain format, and they should be packages that can be referenced as dependencies.\nOne change means one package to fix, and all packages that depend on it will work again.\n. I just tried it here on powershell, it's instant.\nYou can optionally add [environment]::Is64BitOperatingSystem before the first check, but I am not sure how to check between false and undefined (if there is such a thing in PS) to switch older OSses.\nLike (this code is not working in PS, but to give you an idea):\n``` ps\nif ([environment]::Is64BitOperatingSystem === True) {\n    $osArch = '64-bit'\n} elseif([environment]::Is64BitOperatingSystem === False) { # False != undefined\n    $osArch = '32-bit'\n}\non older systems, $osArch is undefined, so we can continue\nif (-Not $osArch) {\n    $os    = Get-WmiObject Win32_OperatingSystem\n    $osArch = $os.OSArchitecture\n}\n... etc\n```\n. Did it work with the testing? ;)\nI'm thinking this is an essential fix because I think the old code causes packages to try to install 64 bit software on 64 bit computers with a 32 bit OS installed. Didn't test that though, only people who don't use git install 32 bit OSses on 64 bit computers.\nBut I'm trying to make the general public addicted to Chocolatey. That includes intellectually challenged people, or people who for some other reason ended up with a 32 bit license and a 64 bit computer. :P\n. I'm on Linux so I only tested https://github.com/bill-long/chocolatey/pull/1 in my common sense emulator, but this should fix both old and new users. The Get-BinRoot is used in more packages than just OHM so it might be a good idea to implement this.\n. No that's not what's supposed to close it, not sure what did.\nBut anything you merge with your pull-request is automatically added to the pull-request so no need to submit a new one. :)\nEdit: Ah I read the notification, not the edit. You figured it out. You can see all the commits to this pull request here: https://github.com/chocolatey/chocolatey/pull/421/commits\nEdit: PS - ~~if you haven't already, please see if the regex does what I advertised. I'm pretty sure but don't have a Windows machine to test right now.~~ Ah, you already tested this in https://github.com/bill-long/chocolatey/pull/2#issuecomment-36654950 :)\n. @gep13 ah that's probable, I didn't know github was so attentive.\n. But setting it to c:\\ is what causes these errors: https://github.com/chocolatey/chocolatey/issues/430\n\n. Either way, please merge @bill-long's initial commit ASAP, otherwise soon everyone will have c:\\ as default.\nhttps://github.com/bill-long/chocolatey/commit/d4806255e8d73567a64db0c3a8ad9196a13d226f\n. Agreed. @ferventcoder @bill-long I suggest not reverting my additions. If you want to support c:\\, first fix the issues at hand that make this impossible, and then revert my changes that fix current issues.\nDon't deny gifted sneakers when at some point in the future you want to put your feet in boots you haven't bought yet. :wink: \n. Fixed two packages https://github.com/Redsandro/chocolatey/commit/eb8bbcf7f9d745a002a471afcc350c51c53df227\nI'm on Linux, won't have access to Windows until sometime next week. Any volunteers I can make co-owner of OpenHardwareMonitor and RenameMaster, willing to cpack and cpush?\n- Source:\n  -  OpenHardwareMonitor\n    - https://github.com/Redsandro/chocolatey/tree/master/openhardwaremonitor\n  -  RenameMaster\n    - https://github.com/Redsandro/chocolatey/tree/master/renamemaster\n. Thanks. Added you.\n. @gep13 I agree, but chocolatey (the user associated with coreteampackages) never accepted co-ownership of some packages I wanted to put up there.\nI think (can't find it back this moment) @ferventcoder argued coreteampackages was only meant for certain specific widely used packages (contradicting your idea of \"The more, the better\"), otherwise coreteampackages would turn into a heap were people could just dump packages. And to some degree, he is right.\nAlso, I don't know how to autopackage, even with the nice tutorial. I'm on a Windows machine mostly during the weekends. And lately those weekends are reserved for a beautiful girl until further notice. I don't dare guessing the process without being able to test. :)\nAnd also also, RenameMaster can't be autopackage afaik, because it uses some download-trickery that requires human tinkering.\n. Redsandro\n\nI want to drop some packages (..)\nHowever people seem to use it (..) so it seems a shame to unlist and abandon it.\nHow does this work? Do I create a pullrequest in the coreteampackages repo?\n\nFerventcoder\n\nThe core team and core packages are/will be those pkgs that are critical/crucial. It is not a dumping ground for offloading packages that folks are no longer interested in maintaining.  \n\nJust quoting the essentials makes the communication lose it's nuance; you can read the full thing here: https://groups.google.com/d/msg/chocolatey/YyQn2Q2xmn0/LBXjjbGkvEIJ\nI'm definitely interested in what's going on there, thanks. I'll give you a shout when I have some more time to wrap my head around something new. :smile: \n. So in stead of the Chocolatey user, there are just some users (like you) who 'serve' autopackages under their own name?\nIf at some point in the future, I got a package auto'ed, I should add you as co-owner in stead of chocolatey?\n. Ah, okay, so my picture of the mise-en-sc\u00e8ne was right initially.\nIn order to qualify for being anyone you'd at least need to have a (periodically) running Windows machine. Your setup (and idea to have all autopackages at the same place anyway) sounds clever to me.\nChocolatey didn't accept ownership for reasons outlined by ferventcoder. (And in the end I hadn't figured out how to auto my packages within the time I had set aside for the conversion anyway. Also, for some of the packages, tonigellida offered to convert them and host them, which I gladly accepted.)\n. :thumbsup: \n. Yeah it should, but there were some bugs. I introduced this as a\ntransitional thing, I think @ferventcoder had a different approach to\ncertain things in mind but I am not sure if that is one release away our\none year away. Is the bugfix merged with mainline (non-pre) release? I can\ndocument some of this in a quick fashion if that's a good idea.\n. @Nilzor, I Added the Overview section to the Helper documentation, hoping it might be helpful. I Added minimal summary for Get-BinRoot and Get-ProcessorBits. Would be helpful if others expand descriptions for other helpers in similar minimal fashion.\n. :warning: @ferventcoder, dude, you haven't merged the fix yet! We reckoned this is pretty critical.\nI know everybody is busy and all, but some pullrequests, especially ones that are deemed critical-ish, take (too) long to be merged. Also, discussion for things that are proposed but not merged due to indecisiveness between multiple parties is hard to keep track of, resulting in ideas and bugfixes evaporating in a vacuum of time and dreams.\nIf there's a solution to a problem, be it not in line with your personal vision, I'd recommend merging or applying the solution first, and apply your preference whenever you get around to doing it.\nA meager solution committed is always infinitely better than a perfect solution in your head.\n. I just created a simple script - that I am ashamed to have worked more than an hour on - that will automate helper documentation somewhat. See #458.\n. Great! :smile: \nHowever, to continue the discussion, I do actually think the default should be $env:ChocolateyInstall\\bin in stead of c:\\tools to prevent root clutter. I think it had always been that, but we accidentally introduced c:\\tools because the bug ignored the old default. (I think, not sure)\n. I added this proposed default to Get-BinRoot.ps1 in branch docGenerator #458 because that one has the embedded comments for the doc generator anyway.\nSee https://github.com/Redsandro/chocolatey-origin/blob/docGenerator/src/helpers/functions/Get-BinRoot.ps1\n(Of course feel free to change, e.g. %ChocolateyInstall%/tools in stead)\n. Since when do we have a markdown branch for the wiki? Me (and others) just\nuse the editor after a bit of discussion.\nThis change seems 100% objective and accurate so I would vote to just add\nit in the wiki which is now outdated indeed.\nOn Apr 16, 2014 8:40 AM, \"Frode Nilsen\" notifications@github.com wrote:\n. I have applied your edit, and changed it slightly:\n- The Ruby package is a bad example because it might confuse users into embedding the old and buggy BinRoot. Changed it to MinGW.\n- The whole point of Get-BinRoot is to not install anything in the root if people forget to set BinRoot, so the C:\\Ruby### example is obsolete and will only happen if the package maintainer specifically forces it to install there, or if C:\\ is set as the BinRoot, which is not currently possible due to https://github.com/chocolatey/chocolatey/issues/430 (And if it was up to me it woudln't ever be possible because that's just stupid (imo)).\n- The default path is gonna be either %SystemDrive%:\\Tools if https://github.com/bill-long/chocolatey/pull/1 is gonna be merged, or %ChocolateyInstall%\\bin to prevent the unpopular thing called clutter, which is under consideration over here https://github.com/chocolatey/chocolatey/pull/458\nFeel free to verify and improve the documentation. :)\n. @ferventcoder ssteward54 is right. Because this issue is starting to bug me, I downloaded an image from Modern.IE and installed Chocolatey. Next, I installed sysinternals. And indeed. ChocolateyBinRoot is set to C:.\n. \n\n. @ssteward54 please specify what package(s) cause this. I think maybe some package(s) might have the buggy binroot hardcoded.\n. Do we also need to address the issue where people now have environment $env:ChocolateyBinRoot set to c:\\ because of this bug? It will continue to cause errors.\ni.e. pull this one: https://github.com/bill-long/chocolatey/commit/25f7865719e9b101a9860d0a4fa6cad2a0ed3c9d\n. And until then, merge the request I proposed. There's no need to have people with unusable broken installations just because we're contemplating future options when there's been a bugfix ready for 3 months now.\n. It was in this one, but @bill-long reverted that. @bill-long, could you\nun-revert that? Can't do much at the moment, I'm on vacation in Berlin with\nmy tablet. :)\nOn May 31, 2014 2:50 PM, \"Rob Reynolds\" notifications@github.com wrote:\n\n@Redsandro https://github.com/Redsandro is there a PR for that fix\nsomewhere?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/pull/421#issuecomment-44747462.\n. Ah, never underestimate the power of git. :)\nOn May 31, 2014 3:02 PM, \"Rob Reynolds\" notifications@github.com wrote:\nNo need. Already good -\nCherry picked\n- d480625\n  https://github.com/chocolatey/chocolatey/commit/d4806255e8d73567a64db0c3a8ad9196a13d226f\n- cd11749\n  https://github.com/chocolatey/chocolatey/commit/cd11749affd02b9445437517b46d49ad25ce7eb5\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/pull/421#issuecomment-44747711.\n. Thank you so much for testing this on Windows 8.1.\nI will advise people with this problem to update Chocolatey or clean their system.\n. PS - can you tell me what version of Chocolatey you were using?\n. I don't know why the installer recurses all the paths. But good catch.\n. Seems Chocolatey recurses the paths and uses the proper environmental variable impromerly set by getBinRoot.\n. Yes. I think it's ready for pulling now. If you agree with the fixes. Shall I close this one?\n. I have no recollection of this pull request. No idea what I was trying to do.\n. I guess it used to work, but it wasn't picked up, and now it needs work. \n\nI don't have time to look into this right now. Feel free to pick this up. If not, Thanks for inquiring. :) Here's a picture of some shaved ice as a thank you: :shaved_ice: \n. Updated.\nCould you be so nice and convert this to proper powershell code, @ferventcoder? It's a start, we can finetune from there.\nI'll provide you with some animals:\n:cat: :rabbit: :koala: :cow: :elephant: \nHere are some especially cute ones:\n:baby_chick: :penguin: :bird: :pig: :us:\n. seeing the syntax, I'm guessing something like this. Am on Linux so I cannot test. Is there a powershell emulator? Would make my life easier. :P\nif (installerType == 'msi')\n    switch -regex ($s.ExitCode) {\n        \"1603\" {\n            write-error \"There is a problem with your system configuration, or the package is already installed elsewhere.\"\n            write-error \"See http://support.microsoft.com/kb/834484 for more information.\"\n        }\n        \"1613|1637\" {\n            write-error \"Your system needs to be updated in order to install this package.\"\n        }\n        \"1618\" {\n            write-error \"You are running another installer. Finish that installation first.\"\n        }\n        \"1610|1619|1620\" {\n            write-error \"The installer is broken. Install an older version or wait for an update.\"\n        }\n        \"1639\" {\n            write-error \"The installer cannot be used this way. Contact the package maintainers.\"\n        }\n        default {}\n    }\n. Sorry, I was a bit TLDR, but I did. Vanilla Windows 7. Vanilla chocolatey. Same error.\n\nOfftopic: \nVagrant is just VirtualBox with a command line wrapper around it, so there's no real difference between vagrant up or modern.ie, unless you got a special base box with all configuration done in advance. If you do not have a base box, creating a Vagrant instance is a lot more work than just clicking import on VirtualBox. In the end, the result is the same. A running vanilla-ish installation.\nWith that said, I didn't know there were Windows base boxes? I couldn't find them anywhere. I thought that was illegal. It does make life easier though. What's in them? How do you communicate with them? They have no ssh, right? How do you preconfigure them on the disk image without starting the license grace period?\nAlso, people don't just have a license lying around, that's why I use the modern.ie boxes.\n\nPS - I already use Vagrant with a Modern.ie drive. I just didn't mention it because I find it irrelevant.\n. Interesting, I didn't know about these boxes!\nWhat do these include? The Modern.ie ones also include guest additions so you can use them without configuration, and after 30 days just remove and re-import them. Ssh would be nice but I can't seem to install stuff without starting the OS (and starting the license timeout)\n\nYou can try grabbing the evaluation ISO at http://www.microsoft.com/en-us/evalcenter/evaluate-windows-server-2012-r2\n\nIsn't it better for chocolatey testing purposes (AKA figuring out why certain users have problems) to use the product most realistically used by the audience? I use these 'boxes', as in, I just import them and repack them to a box without any kind of vagranty additives.\nhttps://modern.ie/en-us/virtualization-tools#downloads\n. Well like I said the error message is the same, but if you think the new version has more clues in it's output, I will gladly fire up a clean Win7 VM.\nBut note that the gtksharp package was updated (as per my request) to include dotnet4.0 as a dependency and now gtksharp will install fine. Not sure what the impact is for this error, but at least the error in a life Windows installation (not VM) is gone.\nInstalling Chocolatey\n```\nMicrosoft Windows [Version 6.1.7601]\nCopyright (c) 2009 Microsoft Corporation.  All rights reserved.\nC:\\Windows\\system32>@powershell -NoProfile -ExecutionPolicy unrestricted -Command \"iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))\" && SET PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\nMode                LastWriteTime     Length Name\n----                -------------     ------ ----\nd----         7/28/2014   2:21 PM            chocInstall\nDownloading http://chocolatey.org/api/v2/package/chocolatey/ to C:\\Users\\IEUser\\AppData\\Local\\Temp\\chocolatey\\chocInstall\\chocolatey.zip\nDownload 7Zip commandline tool\nDownloading http://chocolatey.org/7za.exe to C:\\Users\\IEUser\\AppData\\Local\\Temp\\chocolatey\\chocInstall\\7za.exe\nExtracting C:\\Users\\IEUser\\AppData\\Local\\Temp\\chocolatey\\chocInstall\\chocolatey.zip to C:\\Users\\IEUser\\AppData\\Local\\Temp\\chocolatey\\chocInstall...\nInstalling chocolatey on this machine\nCreating ChocolateyInstall as an Environment variable (targeting 'Machine') and setting it to 'C:\\ProgramData\\chocolatey'\nWe are setting up the Chocolatey repository for NuGet packages that should be at the machine level. Think executables/application packages, not library packages.\nThat is what Chocolatey NuGet goodness is for. The repository is set up at 'C:\\ProgramData\\chocolatey'.\nThe packages themselves go to 'C:\\ProgramData\\chocolatey\\lib' (i.e. C:\\ProgramData\\chocolatey\\lib\\yourPackageName).\nA shim file for the command line goes to 'C:\\ProgramData\\chocolatey\\bin' and points to an executable in 'C:\\ProgramData\\chocolatey\\lib\\yourPackageName'.\nCreating Chocolatey NuGet folders if they do not already exist.\nCopying the contents of 'C:\\Users\\IEUser\\AppData\\Local\\Temp\\chocolatey\\chocInstall\\tools\\chocolateyInstall' to 'C:\\ProgramData\\chocolatey'.\nPATH environment variable does not have C:\\ProgramData\\chocolatey\\bin in it. Adding...\nChocolatey is now ready.\nYou can call chocolatey from anywhere, command line or powershell by typing choco.\nRun choco /? for a list of functions.\nYou may need to shut down and restart powershell and/or consoles first prior to using chocolatey.\nEnsuring chocolatey commands are on the path\nC:\\Windows\\system32>\n```\nInstalling tomboy package\n```\nC:\\Windows\\system32>cinst tomboy\nChocolatey (v0.9.8.27) is installing 'tomboy' and dependencies. By installing you accept the license for 'tomboy' and each dependency you are installing.\ngtksharp v2.12.10\nDownloading gtksharp 32 bit\n  from 'http://download.mono-project.com/gtk-sharp/gtk-sharp-2.12.10.win32.msi'\nInstalling gtksharp...\ngtksharp has been installed.\ngtksharp has finished successfully! The chocolatey gods have answered your request!\ntomboy v1.14.0\nWrite-Error : tomboy did not finish successfully. Boo to the chocolatey gods!\n\n[ERROR] Exception calling \"GetResponse\" with \"0\" argument(s): \"The operation has timed out\"\nAt C:\\ProgramData\\chocolatey\\chocolateyinstall\\helpers\\functions\\Write-ChocolateyFailure.ps1:30 char:14\n+   Write-Error <<<<  $errorMessage\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nWrite-Error : Package 'tomboy v1.14.0' did not install successfully: Exception calling \"GetResponse\" with \"0\" argument(s): \"The operation has timed out\"\nAt C:\\ProgramData\\chocolatey\\chocolateyinstall\\functions\\Chocolatey-NuGet.ps1:90 char:28\n+                 Write-Error <<<<  \"Package '$installedPackageName v$installedPackageVersion' did not install successfully: $($_.Exception.Message)\"\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nFinished installing 'tomboy' and dependencies - if errors not shown in console, none detected. Check log for errors if unsure.\nC:\\Windows\\system32>\n```\nShit I forgot -debug\n```\nC:\\Windows\\system32>cinst tomboy -debug\nDEBUG: Running 'Append-InstallLog' with chocoInstallLog:''\nDEBUG: Arguments: $command = 'install'|$force=False\n|$prerelease=False|$packageNames='tomboy'\n|$source=''\n|$version=''|$allVersions=False\n|$overrideArguments=False|$InstallArguments=''\n|$localonly=False|$verbosity=False|$debug=True|$quiet=False\n|$name=''|$ignoreDependencies=False|$forceX86=False\n|$packageParameters=''\n|PowerShellVersion=2.0|OSVersion=6.1.7601.65536\nDEBUG: Running 'Chocolatey-Install' for 'tomboy' with source: '', version: '', installerArguments:''\nDEBUG: Running 'Chocolatey-NuGet' for tomboy with source:''. Force? False\nChocolatey (v0.9.8.27) is installing 'tomboy' and dependencies. By installing you accept the license for 'tomboy' and each dependency you are installing.\nDEBUG: Installing packages to \"C:\\ProgramData\\chocolatey\\lib\".\nDEBUG: Running 'Run-NuGet' for tomboy with source: '', version:''\nDEBUG:  NuGet _\nDEBUG: Running 'Get-ConfigValue' with configValue:'useNuGetForSources'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'useNuGetForSources'\nDEBUG: After checking the user config the value of 'useNuGetForSources' is ''\nDEBUG: Value not found in the user config file - checking the global config\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'useNuGetForSources'\nDEBUG: After checking the global config the value of 'useNuGetForSources' is 'false'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'sources'\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'sources'\nDEBUG: Using global sources\nDEBUG: Using '-Source \"https://chocolatey.org/api/v2/;\"' as the source arguments\nDEBUG: Calling 'C:\\ProgramData\\chocolatey\\chocolateyinstall\\nuget.exe' install tomboy -OutputDirectory \"C:\\ProgramData\\chocolatey\\lib\" -Source \"https://chocolatey.org/api/v2/;\" -NonInteractive\n-NoCache\nDEBUG: Attempting to resolve dependency 'gtksharp (\u2265 2.12.10)'.\nInstalling 'tomboy 1.14.0'.\nSuccessfully installed 'tomboy 1.14.0'.\nDEBUG: Evaluating NuGet output for line: Attempting to resolve dependency 'gtksharp (\u2265 2.12.10)'.\nDEBUG: Evaluating NuGet output for line: Installing 'tomboy 1.14.0'.\nDEBUG: Evaluating NuGet output for line: Successfully installed 'tomboy 1.14.0'.\nDEBUG: NuGet installed tomboy. If we are ignoring dependencies (False) then we will clean this up.\ntomboy v1.14.0\nDEBUG: Running 'Delete-ExistingErrorLog' for tomboy\nDEBUG: Looking for failure log at 'C:\\Users\\IEUser\\AppData\\Local\\Temp\\chocolatey\\tomboy\\failure.log'\nDEBUG: Found the failure log. Deleting it...\nDEBUG: Running 'Run-ChocolateyPS1' for tomboy with packageFolder:'C:\\ProgramData\\chocolatey\\lib\\tomboy.1.14.0', action: 'install'\nDEBUG:    PowerShell install (chocolateyinstall.ps1) \nDEBUG:   Looking for chocolateyinstall.ps1 in folder 'C:\\ProgramData\\chocolatey\\lib\\tomboy.1.14.0'. If chocolateyinstall.ps1 is found, it will be run.\nDEBUG: Action file is 'chocolateyInstall.ps1'\nDEBUG: Running 'C:\\ProgramData\\chocolatey\\lib\\tomboy.1.14.0\\tools\\chocolateyInstall.ps1'\nDEBUG: Running 'Install-ChocolateyPackage' for tomboy with url:'http://download.gnome.org/binaries/win32/tomboy/1.14/Tomboy-1.14.0.msi', args: '/quiet', fileType: 'msi', url64bit:\n'http://download.gnome.org/binaries/win32/tomboy/1.14/Tomboy-1.14.0.msi', checksum: '', checksumType: '', checksum64: '', checksumType64: '', validExitCodes: '0 3010'\nDEBUG: Running 'Get-ChocolateyWebFile' for tomboy with url:'http://download.gnome.org/binaries/win32/tomboy/1.14/Tomboy-1.14.0.msi',\nfileFullPath:'C:\\Users\\IEUser\\AppData\\Local\\Temp\\chocolatey\\tomboy\\tomboyInstall.msi', url64bit:'http://download.gnome.org/binaries/win32/tomboy/1.14/Tomboy-1.14.0.msi', checksum: '',\nchecksumType: '', checksum64: '', checksumType64: ''\nDEBUG: Running 'Get-ProcessorBits'\nDEBUG: CPU is 32 bit\nDEBUG: Running 'Get-WebHeaders' with url:'http://download.gnome.org/binaries/win32/tomboy/1.14/Tomboy-1.14.0.msi', userAgent: 'chocolatey command line'\nDEBUG: Setting the UserAgent to 'chocolatey command line'\nWrite-Error : tomboy did not finish successfully. Boo to the chocolatey gods!\n\n[ERROR] Exception calling \"GetResponse\" with \"0\" argument(s): \"The operation has timed out\"\nAt C:\\ProgramData\\chocolatey\\chocolateyinstall\\helpers\\functions\\Write-ChocolateyFailure.ps1:30 char:14\n+   Write-Error <<<<  $errorMessage\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nDEBUG: Running 'Move-BadInstall' for tomboy version: '1.14.0', packageFolder:'C:\\ProgramData\\chocolatey\\lib\\tomboy.1.14.0'\nDEBUG: Moving bad package 'tomboy v1.14.0' to 'C:\\ProgramData\\chocolatey\\lib-bad'.\nWrite-Error : Package 'tomboy v1.14.0' did not install successfully: Exception calling \"GetResponse\" with \"0\" argument(s): \"The operation has timed out\"\nAt C:\\ProgramData\\chocolatey\\chocolateyinstall\\functions\\Chocolatey-NuGet.ps1:90 char:28\n+                 Write-Error <<<<  \"Package '$installedPackageName v$installedPackageVersion' did not install successfully: $($_.Exception.Message)\"\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nDEBUG: Evaluating NuGet output for line:\nFinished installing 'tomboy' and dependencies - if errors not shown in console, none detected. Check log for errors if unsure.\nC:\\Windows\\system32>\n```\nRunning manually\n\nWhat? I thought the thing installed fine as a dependency of tomboy\n\ngtksharp has finished successfully! The chocolatey gods have answered your request!\n\nInstalling gtksharp package separately\nNote how it installs fine now that DotNet4.0 is a dependency\n```\nC:\\Windows\\system32>cinst gtksharp\nChocolatey (v0.9.8.27) is installing 'gtksharp' and dependencies. By installing you accept the license for 'gtksharp' and each dependency you are installing.\nDotNet4.0 v4.0.30319.20130222\nDownloading webcmd 32 bit\n  from 'http://www.iis.net/community/files/webpi/webpicmdline_anycpu.zip'\nExtracting C:\\Users\\IEUser\\AppData\\Local\\Temp\\chocolatey\\webcmd\\webcmdInstall.zip to C:\\Users\\IEUser\\AppData\\Local\\Temp...\nC:\\Users\\IEUser\\AppData\\Local\\Temp\nwebcmd has finished successfully! The chocolatey gods have answered your request!\nThe software that you obtain using the Web Platform Installer Command Line Tool is licensed to you by its owner.  Microsoft grants you no rights for third party software.\nSuccessfully loaded metadata from feed https://www.microsoft.com/web/webpi/3.0/webproductlist.xml\nSuccessfully loaded metadata from feed https://www.microsoft.com/web/webpi/3.0/webapplicationlist.xml\nSuccessfully loaded metadata from feed https://www.microsoft.com/web/webpi/3.0/mediaproductlist.xml\nSuccessfully loaded metadata from feed https://www.microsoft.com/web/webpi/3.0/toolsproductlist.xml\nSuccessfully loaded metadata from feed https://www.microsoft.com/web/webpi/3.0/enterpriseproductlist.xml\nAdded product NETFramework4 to the install list\nTrying to add related product IIS51 for product NETFramework4\nProduct IIS51 has no installers available for this platform\nTrying to add related product IIS60 for product NETFramework4\nProduct IIS60 has no installers available for this platform\nTrying to add related product StaticContent for product NETFramework4\nAdded product StaticContent to the install list\nTrying to add missing dependency WASProcessModel for product StaticContent\nAdded product WASProcessModel to the install list\nTrying to add related product DefaultDocument for product NETFramework4\nAdded product DefaultDocument to the install list\nTrying to add related product DirectoryBrowse for product NETFramework4\nAdded product DirectoryBrowse to the install list\nTrying to add related product HTTPErrors for product NETFramework4\nAdded product HTTPErrors to the install list\nTrying to add related product HTTPLogging for product NETFramework4\nAdded product HTTPLogging to the install list\nTrying to add related product LoggingTools for product NETFramework4\nAdded product LoggingTools to the install list\nTrying to add related product RequestMonitor for product NETFramework4\nAdded product RequestMonitor to the install list\nTrying to add related product RequestFiltering for product NETFramework4\nAdded product RequestFiltering to the install list\nTrying to add related product StaticContentCompression for product NETFramework4\nAdded product StaticContentCompression to the install list\nTrying to add related product IISManagementConsole for product NETFramework4\nAdded product IISManagementConsole to the install list\nTrying to add missing dependency WASConfigurationAPI for product IISManagementConsole\nAdded product WASConfigurationAPI to the install list\nTrying to add related product ASPNET for product NETFramework4\nAdded product ASPNET to the install list\nTrying to add missing dependency NETExtensibility for product ASPNET\nAdded product NETExtensibility to the install list\nTrying to add missing dependency WASNetFxEnvironment for product NETExtensibility\nAdded product WASNetFxEnvironment to the install list\nTrying to add missing dependency ISAPIExtensions for product ASPNET\nAdded product ISAPIExtensions to the install list\nTrying to add missing dependency ISAPIFilters for product ASPNET\nAdded product ISAPIFilters to the install list\nTrying to add missing dependency WASNetFxEnvironment for product ASPNET\nProduct WASNetFxEnvironment is either already added to the cart or already installed\nTrying to add related product NETExtensibility for product NETFramework4\nProduct NETExtensibility is either already added to the cart or already installed\nTrying to add related product ISAPIFilters for product NETFramework4\nProduct ISAPIFilters is either already added to the cart or already installed\nTrying to add related product ISAPIExtensions for product NETFramework4\nProduct ISAPIExtensions is either already added to the cart or already installed\nThe following software is going to be installed:\nEULA : 'IIS: WAS Process Model', which is owned by 'Microsoft' will be turned on\nEULA : 'IIS: WAS Configuration API', which is owned by 'Microsoft' will be turned on\nEULA : 'IIS: WAS .NET Environment', which is owned by 'Microsoft' will be turned on\nEULA : 'IIS: Static Content', which is owned by 'Microsoft' will be turned on\nEULA : 'IIS: Default Document', which is owned by 'Microsoft' will be turned on\nEULA : 'IIS: Directory Browsing', which is owned by 'Microsoft' will be turned on\nEULA : 'IIS: HTTP Errors', which is owned by 'Microsoft' will be turned on\nEULA : 'IIS: HTTP Logging', which is owned by 'Microsoft' will be turned on\nEULA : 'IIS: Logging Tools', which is owned by 'Microsoft' will be turned on\nEULA : 'IIS: Request Monitor', which is owned by 'Microsoft' will be turned on\nEULA : 'IIS: Request Filtering', which is owned by 'Microsoft' will be turned on\nEULA : 'IIS: Static Content Compression', which is owned by 'Microsoft' will be turned on\nEULA : 'IIS: ISAPI Extensions', which is owned by 'Microsoft' will be turned on\nEULA : 'IIS: ISAPI Filters', which is owned by 'Microsoft' will be turned on\nEULA : 'IIS: Management Console', which is owned by 'Microsoft' will be turned on\nEULA : 'IIS: .NET Extensibility', which is owned by 'Microsoft' will be turned on\nEULA : 'IIS: ASP.NET', which is owned by 'Microsoft' will be turned on\nEULA : 'Microsoft .NET Framework 4', which is owned by 'Microsoft Corporation', will be downloaded from 'http://go.microsoft.com/fwlink/?LinkId=164154'.\nThe license agreement to 'Microsoft .NET Framework 4' is available at 'http://go.microsoft.com/fwlink/?LinkId=188993&clcid=0x409'.\nAccepted Eulas.\nStarting : Starting Installation\nStarted installing Products...\nStarted installing: WASProcessModel\nStarted installing: WASConfigurationAPI\nStarted installing: WASNetFxEnvironment\nStarted installing: StaticContent\nStarted installing: DefaultDocument\nStarted installing: DirectoryBrowse\nStarted installing: HTTPErrors\nStarted installing: HTTPLogging\nStarted installing: LoggingTools\nStarted installing: RequestMonitor\nStarted installing: RequestFiltering\nStarted installing: StaticContentCompression\nStarted installing: ISAPIExtensions\nStarted installing: ISAPIFilters\nStarted installing: IISManagementConsole\nStarted installing: NETExtensibility\nStarted installing: ASPNET\nStarted downloading products...\nStarted downloading: NETFramework4\nDownloadedNETFramework4\nInstall completed (Success): IIS: WAS Process Model\nWASProcessModel : Installed\nInstall completed (Success): IIS: WAS Configuration API\nWASConfigurationAPI : Installed\nInstall completed (Success): IIS: WAS .NET Environment\nWASNetFxEnvironment : Installed\nInstall completed (Success): IIS: Static Content\nStaticContent : Installed\nInstall completed (Success): IIS: Default Document\nDefaultDocument : Installed\nInstall completed (Success): IIS: Directory Browsing\nDirectoryBrowse : Installed\nInstall completed (Success): IIS: HTTP Errors\nHTTPErrors : Installed\nInstall completed (Success): IIS: HTTP Logging\nHTTPLogging : Installed\nInstall completed (Success): IIS: Logging Tools\nLoggingTools : Installed\nInstall completed (Success): IIS: Request Monitor\nRequestMonitor : Installed\nInstall completed (Success): IIS: Request Filtering\nRequestFiltering : Installed\nInstall completed (Success): IIS: Static Content Compression\nStaticContentCompression : Installed\nInstall completed (Success): IIS: ISAPI Extensions\nISAPIExtensions : Installed\nInstall completed (Success): IIS: ISAPI Filters\nISAPIFilters : Installed\nInstall completed (Success): IIS: Management Console\nIISManagementConsole : Installed\nInstall completed (Success): IIS: .NET Extensibility\nNETExtensibility : Installed\nInstall completed (Success): IIS: ASP.NET\nASPNET : Installed\nStarted installing: NETFramework4\nInstall completed (Success): Microsoft .NET Framework 4\nNETFramework4 : Installed\nVerifying successful installation...\nMicrosoft .NET Framework 4                         True\nIIS: Static Content                                True\nIIS: WAS Process Model                             True\nIIS: Default Document                              True\nIIS: Directory Browsing                            True\nIIS: HTTP Errors                                   True\nIIS: HTTP Logging                                  True\nIIS: Logging Tools                                 True\nIIS: Request Monitor                               True\nIIS: Request Filtering                             True\nIIS: Static Content Compression                    True\nIIS: Management Console                            True\nIIS: WAS Configuration API                         True\nIIS: ASP.NET                                       True\nIIS: .NET Extensibility                            True\nIIS: WAS .NET Environment                          True\nIIS: ISAPI Extensions                              True\nIIS: ISAPI Filters                                 True\nInstall of Products: SUCCESS\nCreation of Product Logs: FAILURE\nDownload count: 232.18 Mb, 67 sec\nInstallation count: 236.24 Mb, 68 sec\nProducts            , Down. Size, Inst. Time, Down. Time, Inst. Size, Log Size\nWASProcessModel     , 0         , 30        , 0         , 51.54     , 0\nWASConfigurationAPI , 0         , 30        , 0         , 51.54     , 0\nWASNetFxEnvironment , 0         , 30        , 0         , 51.54     , 0\nStaticContent       , 0         , 30        , 0         , 51.54     , 0\nDefaultDocument     , 0         , 30        , 0         , 51.54     , 0\nDirectoryBrowse     , 0         , 30        , 0         , 51.54     , 0\nHTTPErrors          , 0         , 30        , 0         , 51.54     , 0\nHTTPLogging         , 0         , 30        , 0         , 51.54     , 0\nLoggingTools        , 0         , 30        , 0         , 51.54     , 0\nRequestMonitor      , 0         , 30        , 0         , 51.54     , 0\nRequestFiltering    , 0         , 30        , 0         , 51.54     , 0\nStaticContentCompression, 0         , 30        , 0         , 51.54     , 0\nISAPIExtensions     , 0         , 30        , 0         , 51.54     , 0\nISAPIFilters        , 0         , 30        , 0         , 51.54     , 0\nIISManagementConsole, 0         , 30        , 0         , 51.54     , 0\nNETExtensibility    , 0         , 30        , 0         , 51.54     , 0\nASPNET              , 0         , 30        , 0         , 51.54     , 0\nNETFramework4       , 0.85      , 38        , 1         , 184.71    , 0\nTotal (download size/install time): 0.85 Mb, 68 sec\nEnd Starting Installation.\n        Passed Scenarios : 18.\n        Failed Scenarios : 0\nRun Passed\ngtksharp v2.12.25.1\nDownloading gtksharp 32 bit\n  from 'http://download.xamarin.com/GTKforWindows/Windows/gtk-sharp-2.12.25.msi'\nInstalling gtksharp...\ngtksharp has been installed.\ngtksharp has finished successfully! The chocolatey gods have answered your request!\nFinished installing 'gtksharp' and dependencies - if errors not shown in console, none detected. Check log for errors if unsure.\nC:\\Windows\\system32>\n```\nTrying tomboy again\n```\nC:\\Windows\\system32>cinst tomboy -debug\nDEBUG: Running 'Append-InstallLog' with chocoInstallLog:''\nDEBUG: Arguments: $command = 'install'|$force=False\n|$prerelease=False|$packageNames='tomboy'\n|$source=''\n|$version=''|$allVersions=False\n|$overrideArguments=False|$InstallArguments=''\n|$localonly=False|$verbosity=False|$debug=True|$quiet=False\n|$name=''|$ignoreDependencies=False|$forceX86=False\n|$packageParameters=''\n|PowerShellVersion=2.0|OSVersion=6.1.7601.65536\nDEBUG: Running 'Chocolatey-Install' for 'tomboy' with source: '', version: '', installerArguments:''\nDEBUG: Running 'Chocolatey-NuGet' for tomboy with source:''. Force? False\nChocolatey (v0.9.8.27) is installing 'tomboy' and dependencies. By installing you accept the license for 'tomboy' and each dependency you are installing.\nDEBUG: Installing packages to \"C:\\ProgramData\\chocolatey\\lib\".\nDEBUG: Running 'Run-NuGet' for tomboy with source: '', version:''\nDEBUG:  NuGet _\nDEBUG: Running 'Get-ConfigValue' with configValue:'useNuGetForSources'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'useNuGetForSources'\nDEBUG: After checking the user config the value of 'useNuGetForSources' is ''\nDEBUG: Value not found in the user config file - checking the global config\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'useNuGetForSources'\nDEBUG: After checking the global config the value of 'useNuGetForSources' is 'false'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'sources'\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'sources'\nDEBUG: Using global sources\nDEBUG: Using '-Source \"https://chocolatey.org/api/v2/;\"' as the source arguments\nDEBUG: Calling 'C:\\ProgramData\\chocolatey\\chocolateyinstall\\nuget.exe' install tomboy -OutputDirectory \"C:\\ProgramData\\chocolatey\\lib\" -Source \"https://chocolatey.org/api/v2/;\" -NonInteractive\n-NoCache\nDEBUG: Attempting to resolve dependency 'gtksharp (\u2265 2.12.10)'.\nInstalling 'tomboy 1.14.0'.\nSuccessfully installed 'tomboy 1.14.0'.\nDEBUG: Evaluating NuGet output for line: Attempting to resolve dependency 'gtksharp (\u2265 2.12.10)'.\nDEBUG: Evaluating NuGet output for line: Installing 'tomboy 1.14.0'.\nDEBUG: Evaluating NuGet output for line: Successfully installed 'tomboy 1.14.0'.\nDEBUG: NuGet installed tomboy. If we are ignoring dependencies (False) then we will clean this up.\ntomboy v1.14.0\nDEBUG: Running 'Delete-ExistingErrorLog' for tomboy\nDEBUG: Looking for failure log at 'C:\\Users\\IEUser\\AppData\\Local\\Temp\\chocolatey\\tomboy\\failure.log'\nDEBUG: Found the failure log. Deleting it...\nDEBUG: Running 'Run-ChocolateyPS1' for tomboy with packageFolder:'C:\\ProgramData\\chocolatey\\lib\\tomboy.1.14.0', action: 'install'\nDEBUG:    PowerShell install (chocolateyinstall.ps1) \nDEBUG:   Looking for chocolateyinstall.ps1 in folder 'C:\\ProgramData\\chocolatey\\lib\\tomboy.1.14.0'. If chocolateyinstall.ps1 is found, it will be run.\nDEBUG: Action file is 'chocolateyInstall.ps1'\nDEBUG: Running 'C:\\ProgramData\\chocolatey\\lib\\tomboy.1.14.0\\tools\\chocolateyInstall.ps1'\nDEBUG: Running 'Install-ChocolateyPackage' for tomboy with url:'http://download.gnome.org/binaries/win32/tomboy/1.14/Tomboy-1.14.0.msi', args: '/quiet', fileType: 'msi', url64bit:\n'http://download.gnome.org/binaries/win32/tomboy/1.14/Tomboy-1.14.0.msi', checksum: '', checksumType: '', checksum64: '', checksumType64: '', validExitCodes: '0 3010'\nDEBUG: Running 'Get-ChocolateyWebFile' for tomboy with url:'http://download.gnome.org/binaries/win32/tomboy/1.14/Tomboy-1.14.0.msi',\nfileFullPath:'C:\\Users\\IEUser\\AppData\\Local\\Temp\\chocolatey\\tomboy\\tomboyInstall.msi', url64bit:'http://download.gnome.org/binaries/win32/tomboy/1.14/Tomboy-1.14.0.msi', checksum: '',\nchecksumType: '', checksum64: '', checksumType64: ''\nDEBUG: Running 'Get-ProcessorBits'\nDEBUG: CPU is 32 bit\nDEBUG: Running 'Get-WebHeaders' with url:'http://download.gnome.org/binaries/win32/tomboy/1.14/Tomboy-1.14.0.msi', userAgent: 'chocolatey command line'\nDEBUG: Setting the UserAgent to 'chocolatey command line'\nWrite-Error : tomboy did not finish successfully. Boo to the chocolatey gods!\n\n[ERROR] Exception calling \"GetResponse\" with \"0\" argument(s): \"The operation has timed out\"\nAt C:\\ProgramData\\chocolatey\\chocolateyinstall\\helpers\\functions\\Write-ChocolateyFailure.ps1:30 char:14\n+   Write-Error <<<<  $errorMessage\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nDEBUG: Running 'Move-BadInstall' for tomboy version: '1.14.0', packageFolder:'C:\\ProgramData\\chocolatey\\lib\\tomboy.1.14.0'\nDEBUG: Moving bad package 'tomboy v1.14.0' to 'C:\\ProgramData\\chocolatey\\lib-bad'.\nWrite-Error : Package 'tomboy v1.14.0' did not install successfully: Exception calling \"GetResponse\" with \"0\" argument(s): \"The operation has timed out\"\nAt C:\\ProgramData\\chocolatey\\chocolateyinstall\\functions\\Chocolatey-NuGet.ps1:90 char:28\n+                 Write-Error <<<<  \"Package '$installedPackageName v$installedPackageVersion' did not install successfully: $($_.Exception.Message)\"\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nDEBUG: Evaluating NuGet output for line:\nFinished installing 'tomboy' and dependencies - if errors not shown in console, none detected. Check log for errors if unsure.\nC:\\Windows\\system32>\n```\nMeh, still no ball. Secretly I hoped the gtksharp installation fixed this.\nI understand now it looks like it hangs at the download, but I can download within the (same) virtual machine just fine:\n\nAlso, wget in Linux using that user agent poses no problem:\n```\n$ wget --user-agent=\"chocolatey command line\" http://download.gnome.org/binaries/win32/tomboy/1.14/Tomboy-1.14.0.msi\n--2014-07-28 23:47:15--  http://download.gnome.org/binaries/win32/tomboy/1.14/Tomboy-1.14.0.msi\nResolving download.gnome.org (download.gnome.org)... 209.132.180.180, 209.132.180.168\nConnecting to download.gnome.org (download.gnome.org)|209.132.180.180|:80... connected.\nHTTP request sent, awaiting response... 302 Found\nLocation: https://download.gnome.org/binaries/win32/tomboy/1.14/Tomboy-1.14.0.msi [following]\n--2014-07-28 23:47:16--  https://download.gnome.org/binaries/win32/tomboy/1.14/Tomboy-1.14.0.msi\nConnecting to download.gnome.org (download.gnome.org)|209.132.180.180|:443... connected.\nHTTP request sent, awaiting response... 302 Found\nLocation: http://ftp1.nluug.nl/windowing/gnome/binaries/win32/tomboy/1.14/Tomboy-1.14.0.msi [following]\n--2014-07-28 23:47:17--  http://ftp1.nluug.nl/windowing/gnome/binaries/win32/tomboy/1.14/Tomboy-1.14.0.msi\nResolving ftp1.nluug.nl (ftp1.nluug.nl)... 192.87.102.42, 2001:610:1:80aa:192:87:102:42\nConnecting to ftp1.nluug.nl (ftp1.nluug.nl)|192.87.102.42|:80... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 2707456 (2.6M) [text/plain]\nSaving to: \u2018Tomboy-1.14.0.msi\u2019\n100%[==================================================================================>] 2,707,456   2.59MB/s   in 1.0s   \n2014-07-28 23:47:18 (2.59 MB/s) - \u2018Tomboy-1.14.0.msi\u2019 saved [2707456/2707456]\n``\n. I believe not, at least not usingcurl`:\n$ curl -I --user-agent \"chocolatey command line\" http://download.gnome.org/binaries/win32/tomboy/1.14/Tomboy-1.14.0.msi\nHTTP/1.1 302 Found\nDate: Mon, 28 Jul 2014 22:11:05 GMT\nServer: Apache/2.2.15 (Red Hat)\nLocation: https://download.gnome.org/binaries/win32/tomboy/1.14/Tomboy-1.14.0.msi\nConnection: close\nContent-Type: text/html; charset=iso-8859-1\n. Good find! It won't download a redirect at all, or HTTPS redirect in particular, or just this specific case?\nSince I got this in Windows 7, but the person who contacted me had a different error - related to DotNet4 needing a reboot, which is the error that would appear after the download was succesful and the script would proceed - he probably had a newer build (probably service pack); I am thinking that this error might be there in Windows <= 7.0 and not in Windows >= 7.1.\n. I thought chocolatey automatically installs .NET 4.0, or is that irrelevant concerning powershell?\nSorry if stupid question.\n. So ideally, in stead of timing out, it would either:\n- Stop with an error; or\n- Issue a [WARNING] could not verify certificate of [xyz] and continue ignoring SSL:\n  - In Unix that would be curl -k or curl --insecure\n    - -k/--insecure (SSL) This option explicitly allows curl to perform \"insecure\" SSL connections and transfers. Starting with curl 7.10, all SSL connections will be attempted to be made secure by using the CA certificate bundle installed by default.\n. I don't fully understand what is happening, but if it works, it works.\nI will test this out in a vm that I know has this problem when new chocolatey is released.\n. Is there a way to install pre-release version directly? Instead of:\n```\n@powershell -NoProfile -ExecutionPolicy unrestricted -Command \"iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))\" && SET PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\nchoco install chocolatey -Pre\n```\n. Seems to work*. :thumbsup: \ntomboy v1.15.1-beta\nDEBUG: Running 'Delete-ExistingErrorLog' for tomboy\nDEBUG: Looking for failure log at 'C:\\Users\\IEUser\\AppData\\Local\\Temp\\chocolatey\\tomboy\\failure.log'\nDEBUG: Running 'Run-ChocolateyPS1' for tomboy with packageFolder:'C:\\ProgramData\\chocolatey\\lib\\tomboy.1.15.1-beta', action: 'install'\nDEBUG:   __ PowerShell install (chocolateyinstall.ps1) __\nDEBUG:   Looking for chocolateyinstall.ps1 in folder 'C:\\ProgramData\\chocolatey\\lib\\tomboy.1.15.1-beta'. If chocolateyinstall.ps1 is found, it will be run.\nDEBUG: Action file is 'chocolateyInstall.ps1'\nDEBUG: Running 'C:\\ProgramData\\chocolatey\\lib\\tomboy.1.15.1-beta\\tools\\chocolateyInstall.ps1'\nDEBUG: Running 'Install-ChocolateyPackage' for tomboy with url:'http://ftp.gnome.org/pub/GNOME/binaries/win32/tomboy/1.15/Tomboy-1.15.1.msi', args: '/quiet', fileType: 'msi', url64bit:\n'http://ftp.gnome.org/pub/GNOME/binaries/win32/tomboy/1.15/Tomboy-1.15.1.msi', checksum: '', checksumType: '', checksum64: '', checksumType64: '', validExitCodes: '0 3010'\nDEBUG: Running 'Get-ChocolateyWebFile' for tomboy with url:'http://ftp.gnome.org/pub/GNOME/binaries/win32/tomboy/1.15/Tomboy-1.15.1.msi',\nfileFullPath:'C:\\Users\\IEUser\\AppData\\Local\\Temp\\chocolatey\\tomboy\\tomboyInstall.msi', url64bit:'http://ftp.gnome.org/pub/GNOME/binaries/win32/tomboy/1.15/Tomboy-1.15.1.msi', checksum: '',\nchecksumType: '', checksum64: '', checksumType64: ''\nDEBUG: Running 'Get-ProcessorBits'\nDEBUG: CPU is 32 bit\nDEBUG: Running 'Get-WebHeaders' with url:'http://ftp.gnome.org/pub/GNOME/binaries/win32/tomboy/1.15/Tomboy-1.15.1.msi', userAgent: 'chocolatey command line'\nDEBUG: Setting the UserAgent to 'chocolatey command line'\nDEBUG: Request Headers:\nDEBUG:   'Accept':'*/*'\nDEBUG:   'User-Agent':'chocolatey command line'\nDEBUG: Response Headers:\nDEBUG:   'Age':'81'\nDEBUG:   'Keep-Alive':'timeout=10, max=100'\nDEBUG:   'Connection':'Keep-Alive'\nDEBUG:   'Accept-Ranges':'bytes'\nDEBUG:   'Content-Length':'2707456'\nDEBUG:   'Content-Type':'application/octet-stream'\nDEBUG:   'Date':'Wed, 30 Jul 2014 14:35:33 GMT'\nDEBUG:   'ETag':'\"295000-4dc0fe639a400\"'\nDEBUG:   'Last-Modified':'Mon, 06 May 2013 17:19:12 GMT'\nDEBUG:   'Server':'Apache/2.4.9 (Unix)'\nDownloading tomboy 32 bit\n  from 'http://ftp.gnome.org/pub/GNOME/binaries/win32/tomboy/1.15/Tomboy-1.15.1.msi'\nDEBUG: Running 'Get-WebFile' for C:\\Users\\IEUser\\AppData\\Local\\Temp\\chocolatey\\tomboy\\tomboyInstall.msi with url:'http://ftp.gnome.org/pub/GNOME/binaries/win32/tomboy/1.15/Tomboy-1.15.1.msi',\nuserAgent: 'chocolatey command line'\nDEBUG: Setting the UserAgent to 'chocolatey command line'\nDEBUG: Checking that 'C:\\Users\\IEUser\\AppData\\Local\\Temp\\chocolatey\\tomboy\\tomboyInstall.msi' is the size we expect it to be.\nDEBUG: Verifying package provided checksum of '' for 'C:\\Users\\IEUser\\AppData\\Local\\Temp\\chocolatey\\tomboy\\tomboyInstall.msi'.\nDEBUG: Running 'Get-CheckSumValid' with file:'C:\\Users\\IEUser\\AppData\\Local\\Temp\\chocolatey\\tomboy\\tomboyInstall.msi', checksum: '', checksumType: ''\nDEBUG: Running 'Install-ChocolateyInstallPackage' for tomboy with file:'C:\\Users\\IEUser\\AppData\\Local\\Temp\\chocolatey\\tomboy\\tomboyInstall.msi', args: '/quiet', fileType: 'msi', validExitCodes: '0\n3010'\nInstalling tomboy...\nDEBUG: Running 'Start-ChocolateyProcessAsAdmin' with exeToRun:'msiexec', statements: '/i \"C:\\Users\\IEUser\\AppData\\Local\\Temp\\chocolatey\\tomboy\\tomboyInstall.msi\" /quiet '\nDEBUG: Elevating Permissions and running msiexec /i \"C:\\Users\\IEUser\\AppData\\Local\\Temp\\chocolatey\\tomboy\\tomboyInstall.msi\" /quiet . This may take awhile, depending on the statements.\nDEBUG: Finishing 'Start-ChocolateyProcessAsAdmin'\ntomboy has been installed.\ntomboy has finished successfully! The chocolatey gods have answered your request!\nDEBUG: Running 'Get-ChocolateyBins' for C:\\ProgramData\\chocolatey\\lib\\tomboy.1.15.1-beta\nDEBUG:   __ Executable Links (*.exe) __\nDEBUG: Looking for executables in folder: C:\\ProgramData\\chocolatey\\lib\\tomboy.1.15.1-beta\nAdding batch files for any executables found to a location on PATH. In other words the executable will be available from ANY command line/powershell prompt.\nDEBUG: Found '' for batch redirect\nDEBUG: There are no executables (that are not ignored) in the package.\nDEBUG: Evaluating NuGet output for line:\nFinished installing 'tomboy' and dependencies - if errors not shown in console, none detected. Check log for errors if unsure.\n*) Disclaimer: I forgot to make a snapshot so this vm already has tomboy installed. I removed the downloaded file and used cup tomboy -pre -force -debug. I did verify that the vm indeed uses Posh 2.0.\n. > Is it worth throwing Boxstarter into the mix as well, so handle the reboots, and pick up installation where it left off?\nI don't know. I don't want to handle reboots. It doesn't seem necessary, because the DotNet4.0 package cancels this requirement out somehow.\n. If it's gonna have trouble, I would suggest stopping the operation without a special switch.\nThe first helps a lot. But I think for non-technical users, it would be good if the first message would explicitly say: Expect a bunch of error messages.\nSlightly unrelated but curious: Am I correct that, I don't know, six months ago or so, chocolatey didn't need an elevated prompt? I have the feeling that I didn't Ctrl+Shift+Enter cmd all the time, but now I am.\n. I thought that was by design to allow software installations in restrictive\nenvironments. Not a problem for me though.\nOn Aug 12, 2014 4:06 AM, \"Rob Reynolds\" notifications@github.com wrote:\n\n@Redsandro https://github.com/Redsandro It didn't, that is correct. It\noperated in a totally insecure way and was located in c:\\chocolatey where\nanyone could have messed with any file at any point.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/540#issuecomment-51865318\n.\n. Does that mean by installing it somewhere else, chocolatey doesn't need to run as admin anymore?\n. Good to know! :thumbsup: I didn't know this was directory-dependent.\nSo with a little installation tweak you can still use this on restricted\noffice computers.\nOp Sun Nov 02 2014 at 5:01:33 PM schreef Rob Reynolds \nnotifications@github.com:\nright. In program data it needs a user with admin permissions to do stuff.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/540#issuecomment-61411984\n.\n. Ouch, due to lack of oxygen, I forgot to check debug.\n\nMaybe a problem where the chocolatey site is unreachable can have a friendly (non-debug) message letting the user know that there are no permanent errors in what he is doing, just \"try again later.\"\n\"Sorry, the chocolatey gods cannot be reached right now. Please try again in a few moments.\" :poop: \n. PS - The :poop: was a joke, not a flame. :smile: \nI have this emoji in my head now that I found out there's actually a URL called: \n:poop:.la\n(In some browsers you actually see the :poop: in the addressbar)\n. I think the problem is in Get-ChocolateyWebFile, I was trying to use it alternatively. What's wrong with it?\n. Trying to download to C:\\ProgramData\\chocolatey\\lib\\PartitionAssistant.5.5.8.1\\tools\\PartitionAssistantSetup.exe...\nDEBUG: Running 'Get-ChocolateyWebFile' for PartitionAssistant with url:'True\nhttp://software-files-a.cnet.com/s/software/13/80/74/47/PAssist_Std.exe?token=1412729420_e8e5aed14c477da642d3f88eea37197e&fileName=PAssist_Std.exe\n', fileFullPath:'C:\\ProgramData\\chocolatey\\lib\\PartitionAssistant.5.5.8.1\\tools\\PartitionAssistantSetup.exe', url64bit:'', checksum: '',\nchecksumType: '', checksum64: '', checksumType64: ''\nDEBUG: Running 'Get-ProcessorBits'\nDEBUG: CPU is 32 bit\nCopying PartitionAssistant\n  from 'True http://software-files-a.cnet.com/s/software/13/80/74/47/PAssist_Std.exe?token=1412729420_e8e5aed14c477da642d3f88eea37197e&fileName=PAssis\nt_Std.exe\n'\nCopy-Item : Cannot find drive. A drive with the name 'True http' does not exist.\nAt C:\\ProgramData\\chocolatey\\chocolateyinstall\\helpers\\functions\\Get-ChocolateyWebFile.ps1:105 char:14\n+     Copy-Item <<<<  $url -Destination $fileFullPath -Force\n    + CategoryInfo          : ObjectNotFound: (True http:String) [Copy-Item], DriveNotFoundException\n    + FullyQualifiedErrorId : DriveNotFound,Microsoft.PowerShell.Commands.CopyItemCommand\n. Perhaps this needs quotes? Not sure.\nCopy-Item $url -Destination $fileFullPath -Force\n. Nevermind, this is my own fault. Updating the CNET downloader caused my returnvalue to be some kind of array. I don't understand why.\nhttps://github.com/Redsandro/chocolatey/blob/master/autopackages/PartitionAssistant/tools/chocolateyInstall.ps1#L16\n. Is this in your comment referring to C:\\ProgramData\\chocolatey\\bin or C:\\Tools?\nI am assuming the latter, but with the confusion and all, I'm not sure.\n. Can you try and explain it to me?\n. Perhaps we should have a binRoot and a toolsRoot\n. > Do we need a bin root? Or is it that choco is not doing a sufficient job in some cases?\nI don't know. I prefer a non-shimmed binRoot for command line tools, and for everything else a subdirectory of chocolatey (like lib and bin already are). If anyone prefers something arbitrary like C:\\Tools they should manually make it so.\nWith players and browsers and libraries - not just tools but plain software - installing to Get-BinRoot ATM AKA Tools, I think software or programs or bin is a more intuitive and canonical name. It makes sense to put this inside chocolatey unless manually changed to something that has personal preference.\n\nthe need to Get-BinRoot should become non-existent\n\nWhat did I miss/forget?\n. Brutal honesty, nitpicking, lack of knowledge and a touch of ocd combined:\nI like to (re-)use my 'own' bin folder and be able to specify it as $binRoot for chocolatey. I like this bin directory to be copyable to USB sticks and between VMs. I like to pipe stuff between 'exe' files within batch files, being able to assume that the .exe files are in the same folders (relatively named). And I like, when some complicated piped script doesn't work, not to have to wonder if it's the shimming that causes a pipe to break.\n. ",
    "FunkMonkey": "We should probably also move the \"What distinction does chocolatey make between an application and a tool?\" from the FAQ into the new \"Installation Paths\" section of Create Packages - as it seems to belong there.\nBefore I start editing, I have some minor questions though.\nI understand that some packages use \"chocolatey_bin_root\" for installation paths.\nFor other packages you seem to be able to pass -installArgs. Can the end-user pass -installArgs from cinst or does the developer pass -installArgs to the Install-ChocolateyPackage ($env:chocolateyInstallArguments) in the chocolateyInstall.ps1? Can the developer use the \"chocolatey_bin_root\" for passing it on to the setup.msi file? Is that recommended?\nAlso, some packages like Console2 do not seem use any install helper in their chocolateyInstall.ps1. I checked the package repo and it already seems to include the application files in the \"bin\" folder (so nothing is downloaded from the original vendor). Is this what is described as a \"tool\" in the FAQ? Is it valid to deliver a package like this or is it clearly discouraged? It definitely introduces one more installation path behaviour.\nShould the general advice for package developers be to adhere to \"chocolatey_bin_root\"? should there be different advice for apps and tools? Just sticking to \"chocolatey_bin_root\" (no matter if extracted from zip or installed from msi [when the msi allows custom installation paths]) would clearly reduce the installation path problem\nThese are a lot questions, but I think we could really improve the documentation if we'd clearly state what is possible and recommended concerning installation paths.\nThanks.\n. +1\nCommon command-line parameters, like rismoney proposed, seem to be a much better approach than installArgs, as they are:\n- more user-friendly\n- more generalized (work with packages that use zips, installers, etc.)\nI have already found some places, where i would have liked parameters to alter the package install behaviour, f. ex in the python package to choose the platform (in case you want to install 32bit python on a 64bit machine, which i had to for octopress to work). It could look like \"cinst python -x86\" (or with backslash, though i like the hyphen more).\nThis issue is also related to #133\n. question is, whether chocolatey \na) just parses specific parameters like \"-platform\" and passes those on (while ignoring the rest) to the installer script\nb) parses all parameters and passes them on as a list to the installer-script so that the package creators can customize the install-behaviour with their own parameters\nare there any advantages to specific switches as in a) compared to giving installer scripts access to all parameters?\n. We should probably also move the \"What distinction does chocolatey make between an application and a tool?\" from the FAQ into the new \"Installation Paths\" section of Create Packages - as it seems to belong there.\nBefore I start editing, I have some minor questions though.\nI understand that some packages use \"chocolatey_bin_root\" for installation paths.\nFor other packages you seem to be able to pass -installArgs. Can the end-user pass -installArgs from cinst or does the developer pass -installArgs to the Install-ChocolateyPackage ($env:chocolateyInstallArguments) in the chocolateyInstall.ps1? Can the developer use the \"chocolatey_bin_root\" for passing it on to the setup.msi file? Is that recommended?\nAlso, some packages like Console2 do not seem use any install helper in their chocolateyInstall.ps1. I checked the package repo and it already seems to include the application files in the \"bin\" folder (so nothing is downloaded from the original vendor). Is this what is described as a \"tool\" in the FAQ? Is it valid to deliver a package like this or is it clearly discouraged? It definitely introduces one more installation path behaviour.\nShould the general advice for package developers be to adhere to \"chocolatey_bin_root\"? should there be different advice for apps and tools? Just sticking to \"chocolatey_bin_root\" (no matter if extracted from zip or installed from msi [when the msi allows custom installation paths]) would clearly reduce the installation path problem\nThese are a lot questions, but I think we could really improve the documentation if we'd clearly state what is possible and recommended concerning installation paths.\nThanks.\n. +1\nCommon command-line parameters, like rismoney proposed, seem to be a much better approach than installArgs, as they are:\n- more user-friendly\n- more generalized (work with packages that use zips, installers, etc.)\nI have already found some places, where i would have liked parameters to alter the package install behaviour, f. ex in the python package to choose the platform (in case you want to install 32bit python on a 64bit machine, which i had to for octopress to work). It could look like \"cinst python -x86\" (or with backslash, though i like the hyphen more).\nThis issue is also related to #133\n. question is, whether chocolatey \na) just parses specific parameters like \"-platform\" and passes those on (while ignoring the rest) to the installer script\nb) parses all parameters and passes them on as a list to the installer-script so that the package creators can customize the install-behaviour with their own parameters\nare there any advantages to specific switches as in a) compared to giving installer scripts access to all parameters?\n. ",
    "allensanborn": "It doesn't look like that will work. \nThe hashtable is getting cast to a string. So when you try to get it back out you just get System.Collections.Hashtable.\nWhat are the limitations on using the $packageParameters variable in our install script? In my test package I'm getting the hashtable and the parameters that I sent in via cinst.\n```\nPS C:\\Users\\allen\\Documents\\GitHub\\Chocolatey-Packages> $testhash=@{name=\"value\";name2=\"value2\"}\nPS C:\\Users\\allen\\Documents\\GitHub\\Chocolatey-Packages> $env:testhashenv = $testhash\nPS C:\\Users\\allen\\Documents\\GitHub\\Chocolatey-Packages> $testhash\nName                           Value\n----                           -----\nname                           value\nname2                          value2\nPS C:\\Users\\allen\\Documents\\GitHub\\Chocolatey-Packages> $env:testhashenv\nSystem.Collections.Hashtable\nPS C:\\Users\\allen\\Documents\\GitHub\\Chocolatey-Packages>\n```\n. Why is this a change to the nuspec functionality? Can't we use Nuget/nuspec as a generalized tool for specifying dependencies? Isn't the resolution of dependencies to some extent left to the tooling and what nupkgs are installed i.e. Nuget, Chocolatey, BoxStarter, ...?\nWould Chocolatey be able to install packages that only specify the OS or version number?\nWe could take a dependency on a specific OS name/SKU e.g. Win8 OR Server2012.\nWe could take a dependency on the OS version e.g. 6.3 (8.1/2012R2), 6.2(8/2012).\nI would envision Chocolatey installing two empty packages when you install it. One package for OS and one for Version. This is still a half baked idea and there are problems around forward compatibility but it seems like this might have some merit.\nI'd rather see a Chocolatey level solution even if it is just some PowerShell helpers. Currently I'm doing this to guard against bad installs: \n[Environment]::OSVersion.Version -ge (new-object 'Version' 6,1)\nChocolatey-WindowsFeatures is doing this: \n\"$osVersion = (Get-WmiObject -class Win32_OperatingSystem).Version\"\nI'd love to hear your thoughts on this since I'm still relatively new to creating Chocolatey packages and am not sure about a LOT of architectural details in the nuspec/NuGet/Chocolatey space.\n. I think so too.\n\nthis seems very hackish\n\nTrue but you say that like it is a bad thing :) \nIs it up to Nuget or Chocolatey to say that Foo.1.0 exists? If we say that a Chocolatey package has a dependency on Windows.6.2, is that resolved by Nuget or Chocolatey? \nI would think Chocolatey. If so, then couldn't Chocolatey understand that it is a logical package and not a physical package? I understand that it is a limited case and doesn't resolve the problem with OS features which may be implied by OS version but is useful when there is a minimum OS version.\nIn regards to Windows Features, would it be possible to look to the WebPI for inspiration or implementation? If I'm installing some plugin for IIS then we better have IIS installed but right now that is step that can't be resolved without additional coding which seems silly since WebPI can be used by Chocolatey (so happy that was added). \nFor example the URL Rewrite package doesn't specify that IIS is required. \nhttp://chocolatey.org/packages/UrlRewrite\nClearly IIS is required but you wouldn't know that by looking at the nuspec file.\nIf it were just a wrapper around the WebPI 'package' we would see that it has two dependencies listed and those dependencies will make sure that IIS is installed. Sample section listed below.\nOf course this doesn't work for all Windows Features. I can't have a PowerShell script in a Chocolatey package and list Hyper-V as a dependency even if Hyper-V is a dependency. It seems like we'd be able to figure something out along those lines. It's more difficult though when it comes to things like Windows 8 being able to mount an ISO. That isn't a -windowsfeature option but it would be great to be able to use something like a virtual package to be able to say that I need to be able to mount an ISO, I don't care how, just do it. How would Chocolatey know that it doesn't need to cinst virtualclonedrive but can just instead use posh mount-diskimage if it doesn't have some knowledge about the features of the OS that it is running on?\nhttps://www.microsoft.com/web/webpi/4.6/webproductlist.xml\nxml\n<dependency>\n    <and>\n        <dependency>\n            <productid>StaticContent</productid>\n        </dependency>\n        <dependency>\n            <productid>IISManagementConsole</productid>\n        </dependency>\n    </and>\n</dependency>\nxml\n<!--  Win7 / R2, x64  -->\n<!--  x64 English  -->\n<installer>\n<id>40</id>\n<languageid>en</languageid>\n<architectures>\n    <x64 />\n</architectures>\n<oslist>\n    <os>\n        <minimumversion>\n            <osmajorversion>6</osmajorversion>\n            <osminorversion>1</osminorversion>\n        </minimumversion>\n        <ostypes>\n            <server />\n            <homepremium />\n            <ultimate />\n            <enterprise />\n            <business />\n        </ostypes>\n    </os>\n</oslist>\n<eulaurl>...</eulaurl>\n<installerfile>\n    <filesize>6242</filesize>\n    <installerurl>\nhttp://download.microsoft.com/download/6/7/D/67D80164-7DD0-48AF-86E3-DE7A182D6815/rewrite_amd64_en-US.msi\n    </installerurl>\n    <trackingurl>...</trackingurl>\n    <sha1>CBB23944AF77F69E9B31357B114ADEBE12B3B1CE</sha1>\n</installerfile>\n<installcommands>\n    <cmdline>\n        <exe>%SystemRoot%\\System32\\net.exe</exe>\n        <commandlinearguments>stop was /y</commandlinearguments>\n        <ignoreexitcode>true</ignoreexitcode>\n    </cmdline>\n    <cmdline>\n        <exe>%SystemRoot%\\System32\\net.exe</exe>\n        <commandlinearguments>stop wmsvc</commandlinearguments>\n        <ignoreexitcode>true</ignoreexitcode>\n    </cmdline>\n    <cmdline>\n        <exe>%SystemRoot%\\System32\\cmd.exe</exe>\n        <commandlinearguments>\n/C reg.exe save \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v3.5\" \"%TEMP%\\__rewrite_netfx35_sp_level.txt\" /y\n        </commandlinearguments>\n        <ignoreexitcode>true</ignoreexitcode>\n    </cmdline>\n    <cmdline>\n        <exe>%SystemRoot%\\System32\\cmd.exe</exe>\n        <commandlinearguments>\n/C reg.exe add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v3.5\" /v SP /t REG_DWORD /d 0 /f\n        </commandlinearguments>\n        <ignoreexitcode>true</ignoreexitcode>\n    </cmdline>\n    <msiinstall>\n        <msi>%InstallerFile%</msi>\n    </msiinstall>\n    <cmdline>\n        <exe>%SystemRoot%\\System32\\cmd.exe</exe>\n        <commandlinearguments>\n/C reg.exe restore \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v3.5\" \"%TEMP%\\__rewrite_netfx35_sp_level.txt\" & del \"%TEMP%\\__rewrite_netfx35_sp_level.txt\"\n        </commandlinearguments>\n        <ignoreexitcode>true</ignoreexitcode>\n    </cmdline>\n    <cmdline>\n        <exe>%SystemRoot%\\System32\\net.exe</exe>\n        <commandlinearguments>start w3svc</commandlinearguments>\n        <ignoreexitcode>true</ignoreexitcode>\n    </cmdline>\n    <cmdline>\n        <exe>%SystemRoot%\\System32\\net.exe</exe>\n        <commandlinearguments>start wmsvc</commandlinearguments>\n        <ignoreexitcode>true</ignoreexitcode>\n    </cmdline>\n</installcommands>\n</installer>\n. Another example would be in mwrock's package for Fiddler, he's manually checking to make sure that the correct version of .Net is installed and is installing it if it isn't. It isn't extremely difficult code to write but it gets a bit ugly without a fair bit of knowledge around how to manually check for dependencies and how to install windows features using DISM and might have bugs (not saying it does...).\nI'm not sure why he isn't using Chocolatey's 'windowsfeature' source or 'webpi' source but that would be besides the point. If we had packages (physical, logical, or otherwise) that would allow us to specify all of the applications dependencies we wouldn't need to worry about how they were resolved as long as Chocolatey had the means to resolve it. As a bonus for creators of packages they wouldn't have to duplicate efforts or potentially introduce bugs in their installation or uninstallation process due to the oddities around what's available in which version (OS, architecture, language) of Windows they are being installed on.\nhttps://github.com/mwrock/Chocolatey-Packages/blob/master/fiddler/tools/chocolateyInstall.ps1\n```\n$tools = \"$(Split-Path -parent $MyInvocation.MyCommand.Definition)\"\nfunction Is64Bit {  [IntPtr]::Size -eq 8  }\nif(Is64Bit) {$fx=\"framework64\"} else {$fx=\"framework\"}\nif(!(test-path \"$env:windir\\Microsoft.Net\\$fx\\v2.0.50727\")) {\n  $packageArgs = \"/c DISM /Online /NoRestart /Enable-Feature /FeatureName:NetFx3\"\n  $statements = \"cmd.exe $packageArgs\"\n  Start-ChocolateyProcessAsAdmin \"$statements\" -minimized -nosleep -validExitCodes @(0,1)\n}\nInstall-ChocolateyPackage 'fiddler' 'exe' '/S' 'http://www.getfiddler.com/dl/Fiddler2Setup.exe'\n```\n. Would it be appropriate to create or generate packages that wrap what is available in the windowsfeatures and webpi sources? \nWhere there is an intersection we'd probably want to go with webpi since it would cover cases like NetFx3 not being present on WinXp and it needing to be downloaded as opposed to it being a windowsfeature in Win8.\nI think it could be automated relatively easily since the webpi feed is extremely well structured and covers OS/arch/lang variations. There would of course be gaps that windowsfeature would need to fill for Hyper-V, MSMQ and so on.\nI think there might be some merit to the generation of these packages since if nothing else it would help to simplify the install scripts and not require people to become familiar with what is available from the other sources. The install scripts would be simplified since there wouldn't be any additional dependencies to install in the script since the dependency would be fulfilled by Chocolatey. It would also be forward compatible if the nuspec parsing option was pursued. \nThanks for your responses I'm definitely becoming more familiar with the tooling and problems around dependency management thanks to this thread.\n. I have some free time this week and I've been meaning to dig into the WebPI APIs a bit so hopefully I'll be able to figure out some sane solution to generating some packages directly from the WebPI feed and which get installed using WebPI in their install script.\nhttp://blogs.iis.net/kateroh/archive/2010/02/11/webpi-apis-install-a-product-from-a-custom-feed.aspx\nhttp://blogs.iis.net/kateroh/archive/2010/02/27/webpi-api-load-balance-to-set-up-backend-servers-with-latest-microsoft-web-stack.aspx\nhttp://blogs.iis.net/kateroh/archive/2010/03/20/web-pi-apis-visualize-available-products-hierarchy-with-dgml.aspx\n. It doesn't look like that will work. \nThe hashtable is getting cast to a string. So when you try to get it back out you just get System.Collections.Hashtable.\nWhat are the limitations on using the $packageParameters variable in our install script? In my test package I'm getting the hashtable and the parameters that I sent in via cinst.\n```\nPS C:\\Users\\allen\\Documents\\GitHub\\Chocolatey-Packages> $testhash=@{name=\"value\";name2=\"value2\"}\nPS C:\\Users\\allen\\Documents\\GitHub\\Chocolatey-Packages> $env:testhashenv = $testhash\nPS C:\\Users\\allen\\Documents\\GitHub\\Chocolatey-Packages> $testhash\nName                           Value\n----                           -----\nname                           value\nname2                          value2\nPS C:\\Users\\allen\\Documents\\GitHub\\Chocolatey-Packages> $env:testhashenv\nSystem.Collections.Hashtable\nPS C:\\Users\\allen\\Documents\\GitHub\\Chocolatey-Packages>\n```\n. Why is this a change to the nuspec functionality? Can't we use Nuget/nuspec as a generalized tool for specifying dependencies? Isn't the resolution of dependencies to some extent left to the tooling and what nupkgs are installed i.e. Nuget, Chocolatey, BoxStarter, ...?\nWould Chocolatey be able to install packages that only specify the OS or version number?\nWe could take a dependency on a specific OS name/SKU e.g. Win8 OR Server2012.\nWe could take a dependency on the OS version e.g. 6.3 (8.1/2012R2), 6.2(8/2012).\nI would envision Chocolatey installing two empty packages when you install it. One package for OS and one for Version. This is still a half baked idea and there are problems around forward compatibility but it seems like this might have some merit.\nI'd rather see a Chocolatey level solution even if it is just some PowerShell helpers. Currently I'm doing this to guard against bad installs: \n[Environment]::OSVersion.Version -ge (new-object 'Version' 6,1)\nChocolatey-WindowsFeatures is doing this: \n\"$osVersion = (Get-WmiObject -class Win32_OperatingSystem).Version\"\nI'd love to hear your thoughts on this since I'm still relatively new to creating Chocolatey packages and am not sure about a LOT of architectural details in the nuspec/NuGet/Chocolatey space.\n. I think so too.\n\nthis seems very hackish\n\nTrue but you say that like it is a bad thing :) \nIs it up to Nuget or Chocolatey to say that Foo.1.0 exists? If we say that a Chocolatey package has a dependency on Windows.6.2, is that resolved by Nuget or Chocolatey? \nI would think Chocolatey. If so, then couldn't Chocolatey understand that it is a logical package and not a physical package? I understand that it is a limited case and doesn't resolve the problem with OS features which may be implied by OS version but is useful when there is a minimum OS version.\nIn regards to Windows Features, would it be possible to look to the WebPI for inspiration or implementation? If I'm installing some plugin for IIS then we better have IIS installed but right now that is step that can't be resolved without additional coding which seems silly since WebPI can be used by Chocolatey (so happy that was added). \nFor example the URL Rewrite package doesn't specify that IIS is required. \nhttp://chocolatey.org/packages/UrlRewrite\nClearly IIS is required but you wouldn't know that by looking at the nuspec file.\nIf it were just a wrapper around the WebPI 'package' we would see that it has two dependencies listed and those dependencies will make sure that IIS is installed. Sample section listed below.\nOf course this doesn't work for all Windows Features. I can't have a PowerShell script in a Chocolatey package and list Hyper-V as a dependency even if Hyper-V is a dependency. It seems like we'd be able to figure something out along those lines. It's more difficult though when it comes to things like Windows 8 being able to mount an ISO. That isn't a -windowsfeature option but it would be great to be able to use something like a virtual package to be able to say that I need to be able to mount an ISO, I don't care how, just do it. How would Chocolatey know that it doesn't need to cinst virtualclonedrive but can just instead use posh mount-diskimage if it doesn't have some knowledge about the features of the OS that it is running on?\nhttps://www.microsoft.com/web/webpi/4.6/webproductlist.xml\nxml\n<dependency>\n    <and>\n        <dependency>\n            <productid>StaticContent</productid>\n        </dependency>\n        <dependency>\n            <productid>IISManagementConsole</productid>\n        </dependency>\n    </and>\n</dependency>\nxml\n<!--  Win7 / R2, x64  -->\n<!--  x64 English  -->\n<installer>\n<id>40</id>\n<languageid>en</languageid>\n<architectures>\n    <x64 />\n</architectures>\n<oslist>\n    <os>\n        <minimumversion>\n            <osmajorversion>6</osmajorversion>\n            <osminorversion>1</osminorversion>\n        </minimumversion>\n        <ostypes>\n            <server />\n            <homepremium />\n            <ultimate />\n            <enterprise />\n            <business />\n        </ostypes>\n    </os>\n</oslist>\n<eulaurl>...</eulaurl>\n<installerfile>\n    <filesize>6242</filesize>\n    <installerurl>\nhttp://download.microsoft.com/download/6/7/D/67D80164-7DD0-48AF-86E3-DE7A182D6815/rewrite_amd64_en-US.msi\n    </installerurl>\n    <trackingurl>...</trackingurl>\n    <sha1>CBB23944AF77F69E9B31357B114ADEBE12B3B1CE</sha1>\n</installerfile>\n<installcommands>\n    <cmdline>\n        <exe>%SystemRoot%\\System32\\net.exe</exe>\n        <commandlinearguments>stop was /y</commandlinearguments>\n        <ignoreexitcode>true</ignoreexitcode>\n    </cmdline>\n    <cmdline>\n        <exe>%SystemRoot%\\System32\\net.exe</exe>\n        <commandlinearguments>stop wmsvc</commandlinearguments>\n        <ignoreexitcode>true</ignoreexitcode>\n    </cmdline>\n    <cmdline>\n        <exe>%SystemRoot%\\System32\\cmd.exe</exe>\n        <commandlinearguments>\n/C reg.exe save \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v3.5\" \"%TEMP%\\__rewrite_netfx35_sp_level.txt\" /y\n        </commandlinearguments>\n        <ignoreexitcode>true</ignoreexitcode>\n    </cmdline>\n    <cmdline>\n        <exe>%SystemRoot%\\System32\\cmd.exe</exe>\n        <commandlinearguments>\n/C reg.exe add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v3.5\" /v SP /t REG_DWORD /d 0 /f\n        </commandlinearguments>\n        <ignoreexitcode>true</ignoreexitcode>\n    </cmdline>\n    <msiinstall>\n        <msi>%InstallerFile%</msi>\n    </msiinstall>\n    <cmdline>\n        <exe>%SystemRoot%\\System32\\cmd.exe</exe>\n        <commandlinearguments>\n/C reg.exe restore \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v3.5\" \"%TEMP%\\__rewrite_netfx35_sp_level.txt\" & del \"%TEMP%\\__rewrite_netfx35_sp_level.txt\"\n        </commandlinearguments>\n        <ignoreexitcode>true</ignoreexitcode>\n    </cmdline>\n    <cmdline>\n        <exe>%SystemRoot%\\System32\\net.exe</exe>\n        <commandlinearguments>start w3svc</commandlinearguments>\n        <ignoreexitcode>true</ignoreexitcode>\n    </cmdline>\n    <cmdline>\n        <exe>%SystemRoot%\\System32\\net.exe</exe>\n        <commandlinearguments>start wmsvc</commandlinearguments>\n        <ignoreexitcode>true</ignoreexitcode>\n    </cmdline>\n</installcommands>\n</installer>\n. Another example would be in mwrock's package for Fiddler, he's manually checking to make sure that the correct version of .Net is installed and is installing it if it isn't. It isn't extremely difficult code to write but it gets a bit ugly without a fair bit of knowledge around how to manually check for dependencies and how to install windows features using DISM and might have bugs (not saying it does...).\nI'm not sure why he isn't using Chocolatey's 'windowsfeature' source or 'webpi' source but that would be besides the point. If we had packages (physical, logical, or otherwise) that would allow us to specify all of the applications dependencies we wouldn't need to worry about how they were resolved as long as Chocolatey had the means to resolve it. As a bonus for creators of packages they wouldn't have to duplicate efforts or potentially introduce bugs in their installation or uninstallation process due to the oddities around what's available in which version (OS, architecture, language) of Windows they are being installed on.\nhttps://github.com/mwrock/Chocolatey-Packages/blob/master/fiddler/tools/chocolateyInstall.ps1\n```\n$tools = \"$(Split-Path -parent $MyInvocation.MyCommand.Definition)\"\nfunction Is64Bit {  [IntPtr]::Size -eq 8  }\nif(Is64Bit) {$fx=\"framework64\"} else {$fx=\"framework\"}\nif(!(test-path \"$env:windir\\Microsoft.Net\\$fx\\v2.0.50727\")) {\n  $packageArgs = \"/c DISM /Online /NoRestart /Enable-Feature /FeatureName:NetFx3\"\n  $statements = \"cmd.exe $packageArgs\"\n  Start-ChocolateyProcessAsAdmin \"$statements\" -minimized -nosleep -validExitCodes @(0,1)\n}\nInstall-ChocolateyPackage 'fiddler' 'exe' '/S' 'http://www.getfiddler.com/dl/Fiddler2Setup.exe'\n```\n. Would it be appropriate to create or generate packages that wrap what is available in the windowsfeatures and webpi sources? \nWhere there is an intersection we'd probably want to go with webpi since it would cover cases like NetFx3 not being present on WinXp and it needing to be downloaded as opposed to it being a windowsfeature in Win8.\nI think it could be automated relatively easily since the webpi feed is extremely well structured and covers OS/arch/lang variations. There would of course be gaps that windowsfeature would need to fill for Hyper-V, MSMQ and so on.\nI think there might be some merit to the generation of these packages since if nothing else it would help to simplify the install scripts and not require people to become familiar with what is available from the other sources. The install scripts would be simplified since there wouldn't be any additional dependencies to install in the script since the dependency would be fulfilled by Chocolatey. It would also be forward compatible if the nuspec parsing option was pursued. \nThanks for your responses I'm definitely becoming more familiar with the tooling and problems around dependency management thanks to this thread.\n. I have some free time this week and I've been meaning to dig into the WebPI APIs a bit so hopefully I'll be able to figure out some sane solution to generating some packages directly from the WebPI feed and which get installed using WebPI in their install script.\nhttp://blogs.iis.net/kateroh/archive/2010/02/11/webpi-apis-install-a-product-from-a-custom-feed.aspx\nhttp://blogs.iis.net/kateroh/archive/2010/02/27/webpi-api-load-balance-to-set-up-backend-servers-with-latest-microsoft-web-stack.aspx\nhttp://blogs.iis.net/kateroh/archive/2010/03/20/web-pi-apis-visualize-available-products-hierarchy-with-dgml.aspx\n. ",
    "bradgreens": "+1 on this issue. I was over at yeoman and wanted to put my voice in the right place.\nI installed yeoman with chocolately on a Win7/64 box. I wasn't paying attention to the fact I had Ruby 1.9.3 installed as well as sass, compass and probably some others. The chocolately install changed my system path to Ruby 1.8.7, even though I had 1.9.3 configured in my user path. The compass gem installed by chocolately did not actually work. I had to run gem install compass on the 1.8.7 path at this point. Perhaps yeoman has confusion when multiple gems or Rubys are installed.\nI realize the complexity in the discussion above.\nI don't know how the system registry works, but if an existing install of a program is easy to detect then a simple warning message would be helpful for us forgetful users.\n\"We've detected existing programs installed. [details of what was detected]. [details of what will be installed]. Do you want to continue? y/N\".\nalso\n\"We've detected programs assigned to your path which may become overridden. [details of what was detected]. [details of what will be happen to your path]. Do you want to continue? y/N\".\nLikewise with existing gems. Perhaps some gem detection already exists... I'm just brainstorming.\n. +1 on this issue. I was over at yeoman and wanted to put my voice in the right place.\nI installed yeoman with chocolately on a Win7/64 box. I wasn't paying attention to the fact I had Ruby 1.9.3 installed as well as sass, compass and probably some others. The chocolately install changed my system path to Ruby 1.8.7, even though I had 1.9.3 configured in my user path. The compass gem installed by chocolately did not actually work. I had to run gem install compass on the 1.8.7 path at this point. Perhaps yeoman has confusion when multiple gems or Rubys are installed.\nI realize the complexity in the discussion above.\nI don't know how the system registry works, but if an existing install of a program is easy to detect then a simple warning message would be helpful for us forgetful users.\n\"We've detected existing programs installed. [details of what was detected]. [details of what will be installed]. Do you want to continue? y/N\".\nalso\n\"We've detected programs assigned to your path which may become overridden. [details of what was detected]. [details of what will be happen to your path]. Do you want to continue? y/N\".\nLikewise with existing gems. Perhaps some gem detection already exists... I'm just brainstorming.\n. ",
    "ewilde": "I have taken a slightly different approach see: https://github.com/chocolatey/chocolatey/pull/171\nBasically passing through a custom object containing the header so it ends up being feed into Get-WebFile. I think the advantage of this approach is you get the progress bar ui and keep the encapsulation of the original function.\nAny improvements made to the Get-WebFile are passed on to all callers, if you passed in an optional WebClient I think it would break this principle\n. @mwrock very cool, how would the script block get passed down to Get-WebFile?\nI agree @mwrock solution does give the caller more flexibility with the HttpWebRequest. On the downside the caller would need to duplicate functionality of the main function i.e. proxy and cookie container\n\n $webclient = new-object System.Net.WebClient\n  if (!$webclient.Proxy.IsBypassed($url))\n  {\n    $creds = [net.CredentialCache]::DefaultCredentials\n    if ($creds -eq $null) {\n      Write-Debug \"Default credentials were null. Attempting backup method\"\n      $cred = get-credential\n      $creds = $cred.GetNetworkCredential();\n    }\n    $proxyaddress = $webclient.Proxy.GetProxy($url).Authority\n    Write-host \"Using this proxyserver: $proxyaddress\"\n    $proxy = New-Object System.Net.WebProxy($proxyaddress)\n    $proxy.credentials = $creds\n    $req.proxy = $proxy\n  }\n\n  #http://stackoverflow.com/questions/518181/too-many-automatic-redirections-were-attempted-error-message-when-using-a-httpw\n  $req.CookieContainer = New-Object System.Net.CookieContainer\n  if ($userAgent -ne $null) {\n    Write-Debug \"Setting the UserAgent to `'$userAgent`'\"\n    $req.UserAgent = $userAgent\n  }\n\nAdditionally caller would need to know which headers can be set directly via Headers.Add and which ones need to be set via the properties\n\nswitch ($item.Key) {\n   'Accept' {$req.Accept = $item.Value}\n   'Cookie' {$req.CookieContainer.SetCookies($uri, $item.Value)}\n   'Referer' {$req.Referer = $item.Value}\n   'User-Agent' {$req.UserAgent = $item.Value}\n   Default {$req.Headers.Add($item.Key, $item.Value)}\n}\n\nand it does couple the caller and Get-WebFile with [System.Net.HttpWebRequest] which could be argued is leaking a private implementation detail. Either way I'm happy\n. I have taken a slightly different approach see: https://github.com/chocolatey/chocolatey/pull/171\nBasically passing through a custom object containing the header so it ends up being feed into Get-WebFile. I think the advantage of this approach is you get the progress bar ui and keep the encapsulation of the original function.\nAny improvements made to the Get-WebFile are passed on to all callers, if you passed in an optional WebClient I think it would break this principle\n. @mwrock very cool, how would the script block get passed down to Get-WebFile?\nI agree @mwrock solution does give the caller more flexibility with the HttpWebRequest. On the downside the caller would need to duplicate functionality of the main function i.e. proxy and cookie container\n\n $webclient = new-object System.Net.WebClient\n  if (!$webclient.Proxy.IsBypassed($url))\n  {\n    $creds = [net.CredentialCache]::DefaultCredentials\n    if ($creds -eq $null) {\n      Write-Debug \"Default credentials were null. Attempting backup method\"\n      $cred = get-credential\n      $creds = $cred.GetNetworkCredential();\n    }\n    $proxyaddress = $webclient.Proxy.GetProxy($url).Authority\n    Write-host \"Using this proxyserver: $proxyaddress\"\n    $proxy = New-Object System.Net.WebProxy($proxyaddress)\n    $proxy.credentials = $creds\n    $req.proxy = $proxy\n  }\n\n  #http://stackoverflow.com/questions/518181/too-many-automatic-redirections-were-attempted-error-message-when-using-a-httpw\n  $req.CookieContainer = New-Object System.Net.CookieContainer\n  if ($userAgent -ne $null) {\n    Write-Debug \"Setting the UserAgent to `'$userAgent`'\"\n    $req.UserAgent = $userAgent\n  }\n\nAdditionally caller would need to know which headers can be set directly via Headers.Add and which ones need to be set via the properties\n\nswitch ($item.Key) {\n   'Accept' {$req.Accept = $item.Value}\n   'Cookie' {$req.CookieContainer.SetCookies($uri, $item.Value)}\n   'Referer' {$req.Referer = $item.Value}\n   'User-Agent' {$req.UserAgent = $item.Value}\n   Default {$req.Headers.Add($item.Key, $item.Value)}\n}\n\nand it does couple the caller and Get-WebFile with [System.Net.HttpWebRequest] which could be argued is leaking a private implementation detail. Either way I'm happy\n. ",
    "patrickmaurer": "I think this additional options would make a great improvement to the affected helpers. Does the MoveToChoco label mean that it should be ported to the new chocolatey/choco repository? I could volunteer to do this if you wan't, just let me know.\n. I think this additional options would make a great improvement to the affected helpers. Does the MoveToChoco label mean that it should be ported to the new chocolatey/choco repository? I could volunteer to do this if you wan't, just let me know.\n. ",
    "ejhayes": "Works for me--download speed is MUCH faster!  Thank you!\n. Works for me--download speed is MUCH faster!  Thank you!\n. ",
    "bswerdlen": "This might be a dumb question, but why doesn't this CmdLet leverage the 'file' parameter when uninstalling an msi? \nMaybe I'm not understanding the use-case of this CmdLet with msi's, but as it stands today, I have to pass in the full path to the .msi to be uninstalled as the first part of the 'silentArgs' parameter with other arguments for silence and logging following it in the same string value. An example of the silentArgs I pass in are:\nC:\\programdata\\chocolatey\\lib\\MyPackage.nupkg\\tools\\source\\autoInstall\\msodbcsql.msi /qn /norestart /l*xv C:\\temp\\chocolatey\\MyPackage.Uninstall.log\nIf I do not do this, I receive a 1619 error from msiexec and the logs from both chocolatey and msiexec indicate no installer/produceCode was passed along to msiexec. Error message is:\nRunning [\"C:\\Windows\\System32\\msiexec.exe\" /x /qn /norestart /l*xv C:\\Staging\\chocolatey\\MyPackage.Uninstall.log ] was not successful. Exit code was '1619'\nAdditionally, I'm not seeing any support for .msu's even though the install CmdLet supports them. I see the last commit to this CmdLet was 5 years ago, is this a deprecated part of the project that users should not be leveraging anymore?\nAny help or direction would be appreciated. If I should just have chocolateyUninstall.ps1 call msiexec and Wusa.exe directly for msi and msu files, that's fine. I just didn't see documentation pointing me in that direction.\nThank you for any help. This might be a dumb question, but why doesn't this CmdLet leverage the 'file' parameter when uninstalling an msi? \nMaybe I'm not understanding the use-case of this CmdLet with msi's, but as it stands today, I have to pass in the full path to the .msi to be uninstalled as the first part of the 'silentArgs' parameter with other arguments for silence and logging following it in the same string value. An example of the silentArgs I pass in are:\nC:\\programdata\\chocolatey\\lib\\MyPackage.nupkg\\tools\\source\\autoInstall\\msodbcsql.msi /qn /norestart /l*xv C:\\temp\\chocolatey\\MyPackage.Uninstall.log\nIf I do not do this, I receive a 1619 error from msiexec and the logs from both chocolatey and msiexec indicate no installer/produceCode was passed along to msiexec. Error message is:\nRunning [\"C:\\Windows\\System32\\msiexec.exe\" /x /qn /norestart /l*xv C:\\Staging\\chocolatey\\MyPackage.Uninstall.log ] was not successful. Exit code was '1619'\nAdditionally, I'm not seeing any support for .msu's even though the install CmdLet supports them. I see the last commit to this CmdLet was 5 years ago, is this a deprecated part of the project that users should not be leveraging anymore?\nAny help or direction would be appreciated. If I should just have chocolateyUninstall.ps1 call msiexec and Wusa.exe directly for msi and msu files, that's fine. I just didn't see documentation pointing me in that direction.\nThank you for any help. ",
    "alastairs": "That workaround works, thanks. I think the script should support proper file:// URLs, though.  What about ftp:// or git:// URLs?\n. Ok, sorry I didn't realise that. I'll update the wiki page to include this information. How do I go about requesting the file:// enhancement, or can this Issue be used for that?\n. I updated this wiki page: https://github.com/chocolatey/chocolatey/wiki/ChocolateyInstallPS1.  I hope that was the right one!\n. That workaround works, thanks. I think the script should support proper file:// URLs, though.  What about ftp:// or git:// URLs?\n. Ok, sorry I didn't realise that. I'll update the wiki page to include this information. How do I go about requesting the file:// enhancement, or can this Issue be used for that?\n. I updated this wiki page: https://github.com/chocolatey/chocolatey/wiki/ChocolateyInstallPS1.  I hope that was the right one!\n. ",
    "TomOne": "Is there any progress at this issue? It can be very annoying, for example when you do cup all and Chocolatey stops the complete process, even if only one package is broken.\n. This is actually a very important issue to solve. Stopping the entire process only because one package failed is very annoying and reduces UX.\n. @Redsandro, I agree with you.\n@rismoney, it\u2019s OK if you want it to stop on error, but it should not be the default behaviour. I think Redsandro already explained the reasons clearly enough.\nAnother reason: packages are usually separate and independent objects (except dependencies). Why would you like to stop the entire process, only because a package failed to install, but has nothing to do with the other packages?\nFor comparison: A program on your computer has a small, but not serious bug that affects a certain functionality of that program. And only because of this bug you want that this program stops working completely and terminate with an error message? I think there\u2019s only a minority of users who would want such a behaviour. It\u2019s useful for debugging, but not for normal work. We can\u2019t always have an everything or nothing philosophy. :smile: \nAnd by the way, nobody prevents you from stopping the process manually if you encounter an error.\n. @Redsandro good arguments. :+1: \n@rismoney:\n\nThe systems i manage are critical and must not leave things in barney.\n\nNothing prevents you from investigating possible errors after the working packages have been installed/updated. This would also save time for you: If for example multiple packages you want to install/update are broken, with the current behaviour you will only notice the first error. Then you have to fix it, run cup all again, fix the next broken package, run cup all again, fix the next broken package and so on. This is not something I call comfortable. Therefore it reduces UX like I wrote before.\n. On this subject there has been a lot of progress.\nTake a look here: https://groups.google.com/forum/#!topic/chocolatey/ua_yqZFtZps\nWe have come to the conclusion that localisation for packages must be handled by the package maintainers and not by chocolatey itself, because for every package there is a different method to obtain localisation. So it isn\u2019t even possible to implement it in chocolatey.\n. I think it\u2019s not a good design to keep the older versions of packages, because it has several drawbacks:\n- It wastes disk space, especially when there are big files inside the package folder in C:\\Chocolatey\\lib.\n- The cuninst command would only uninstall the latest installed version of a package and leaving behind the other versions. That is not how an uninstall command is intended for other package managers.\n- Causes issues with applications that store data inside the C:\\Chocolatey\\lib\\somepackage.version folder. If a package gets updated, these data rests in the older version folder. Of course this data can be manually moved to the new version folder or moved with some lines in the ps1-file, but this makes things only more complicated than they should be.\n- Leaving multiple versions of a package on the machine would make sense only in one case: If the newer version is not backwards compatible with the older version. The package managers for Linux solve this with different packages for the older and newer version, for example one for Python 2.x and one for Python 3.x, the same for Ruby 1.9.x and Ruby 2.x. I think that\u2019s a far better solution.\n- If an user keeps two versions of one package on his machine, let\u2019s say Ruby 1.9.3 and Ruby 2.0, the older version doesn\u2019t get updated automatically, because it only updates to the newest version starting from 2.0. If for example a bugfix for Ruby 1.9.3 gets released, with the current chocolatey package design the user doesn\u2019t get an update for it unless he does it manually. That\u2019s bad. With the design of the Linux package managers this issue does not appear.\n- The paths to files inside a chocolatey package folder (C:\\Chocolatey\\lib\\somepackage.someversion\\tools\\\u2026) is complicated. Even if the executables from a package get covered by the PATH variable it can be sometimes necessary to manually input a path into the commandline or open it in a file manager. Then the user has to remember which version of the package he wants. Also when using scripts it is not good when the package folder always changes. Better would be the path C:\\Chocolatey\\lib\\somepackage for the related files, without the version.\n- Of course there can be a small number of folks which absolutely wants to keep multiple versions of a package at the same time, even if they are backwards compatible. But remember, Chocolatey is a package manager, not a backup solution. If one absolutely wants to keep several versions, he should consider making manual backups of the affected packages. But for most people keeping all the versions of packages is totally unnecessary and has all the disadvantages I specified before. Package managers for Linux handle it like this. I never heard that somebody complained about that. :)\nLet\u2019s get to the advantages of dropping the current design of keeping multiple package versions. Some of them can be derived from the previous text:\n- Uses less disk space.\n- The cuninst command would work like expected and how it already works in other package managers.\n- No loss of user data when a package gets updated.\n- Would make binroot obsolete, because the paths to package folders won\u2019t differ on an update.\n- Less complexity and therefore better conformity with the KISS principle.\nNow I hope I could convince you that this design is better. :)\n. > What I expected: flashplayer derivatives should've been removed, Atom should've copied old user data and then also be removed.\nI have another less complicated idea. Why not simply leave off the package version from the package folder name? That would make things a lot easier to handle. Then no user data copying would be needed. I already explained some other benefits that this approach in my previous comment: https://github.com/chocolatey/chocolatey/issues/259#issuecomment-23863107\nChocolatey has a really weird design in this area that I\u2019ve never seen at any other package manager. Do you really think that it is so common that one wants to keep all package versions ever installed? In most cases that isn\u2019t even possible. For example, most of the software that comes with an installer will overwrite the previous version by default. Therefore having a flashplayerplugin.13.0 and a flashplayerplugin14.0 folder is not only confusing, but also semantically incorrect, because in that case only Flash Player 14.0 would be installed on the system.\nI want to ask you how often one would really need to have multiple versions of the same package installed at the same time. The only case where that would be 100 % possible would be portable packages. But even then it would not be easy to implement a good way to handle this. I\u2019ve worked with Linux for several years now, where package managers are an essential part of the system and I never had the need to install multiple versions of the same package at the same time. I also never heard of one that would need that and nobody who complained about the fact that upgrading a package overwrites the previous version.\n@ferventcoder, please consider a better design for the rewrite of Chocolatey as I already described in https://github.com/chocolatey/chocolatey/issues/259#issuecomment-23863107\n. Yes, that\u2019s the most straightforward solution, isn\u2019t it?\n. What are the other reasons to stop using nuget.exe?\nIt should be possible to modify the source code of nuget.exe to get nice and clean UTF-8 files. Unfortunately I\u2019m not able to do that, because I\u2019m not familiar with C#.\nBut also the gallery on nuget.org would benefit from such an improvement. They have the same issue with UTF-8 and ANSI.\n. That could be a workaround, but I read on multiple coding guidelines that HTML entities should be avoided, except for non distinguishable characters, e. g. &nbsp; or &#x202F;. HTML entities make the code harder to read and to maintain.\nBut it seems that newer versions of NuGet use UTF-8 without BOM for the nuspec when a package gets built. I tested it a few weeks ago. A good improvement, even if I would like if they used UTF-8 starting from their first releases. I think other character encodings are obsolete in most cases since the existence of Unicode.\n. I have bad news for you: NuGet doesn\u2019t even have a full support for HTML/XML entities. If you use an unsupported entity, the cpack command will fail and output an error: \u2026 not declared entity \u2026 Line x, Position y\nHere are some examples of commonly used entities:\nSupported by NuGet:\n- > &gt;\n- < &lt;\n- & &amp;\n- Probably all decimal and hexadecimal entities, e. g. &#190; or &#x00AE;\nNot supported by NuGet (outputs the error described above):\n- Most named entities, e. g. &copy; &reg; &micro; &trade; and many more.\nWell, I don\u2019t think it\u2019s very comfortable to use the decimal or hexadecimal notation.\n. I\u2019m very sorry. I made a few mistakes here, mostly because of my inadequate knowledge about character encodings. Therefore I\u2019ve done some research to improve it. ;)\nSo here\u2019s the correction:\n- ANSI doesn\u2019t refer to a character encoding, it stands for American National Standards Institute. Microsoft and the Windows community uses ANSI as incorrect term for the Windows-1252 character encoding, see https://en.wikipedia.org/wiki/Windows-1252 as reference. Even popular text editors like Notepad++ use ANSI incorrectly.\n- The cpack command does output nuspec files in UTF-8. To be more precise, it\u2019s UTF-8 without a BOM. As you probably know, a character encoding can\u2019t be determined easily unless there\u2019s a BOM. Text editors have to determine the encoding with some character detection stuff. They basically look if a character written in the text \u201clooks weird\u201d with a certain encoding, then they switch to the appropriate encoding. Of course this method is not 100 % reliable. If a text for example only contains ASCII characters, a text editor cannot determine the encoding, because UTF-8 has exactly the same character encoding table as ASCII, plus the Unicode table of course.\n  NuGet assumes that nuspec files are encoded in UTF-8 without a BOM. Therefore, if a package maintainer uses another character encoding like Windows-1252, some characters (like the famous \u00a9 or \u03bc) will be displayed incorrectly on chocolatey.org.\nBut fortunately there\u2019s a simple solution for that. We must make sure that package maintainers never use another encoding than UTF-8 without BOM. They should configure their editors to handle that encoding properly. Note that UTF-8 without BOM is the recommended character encoding for HTML pages and fortunately many websites use it, including nuget.org and chocolatey.org. So if web developers are able to set the character encoding properly, why not also chocolatey package maintainers?\nThe thing with HTML/XML entities is definitely more complicated than setting the correct encoding, so I would leave the entities out.\n@ferventcoder, this character encoding stuff would be another rule that should be added to the Wiki. I would be happy to do that.\n. You\u2019re using Geany. That\u2019s cool. :+1: \nNote that \u201cUTF-8\u201d in Geany means \u201cUTF-8 without BOM\u201d which is fine, while for example Notepad++ displays \u201cUTF-8\u201d when the file contains a BOM. In Notepad++, UTF-8 without BOM is incorrectly called \u201cANSI as UTF-8\u201d. That\u2019s a weird terminology.\nIt doesn\u2019t surprise me that there is so much confusion about character encodings, mostly thanks to Microsoft. :-1: \nBut at least some Linux- and cross-platform editors like Geany chose the right terminology. :)\n. Microsoft itself accepted that ANSI is an inappropriate term, see https://en.wikipedia.org/wiki/Windows_code_page#ANSI_code_page. So that term shouldn\u2019t be used anymore.\nAnd by the way, there are already bug reports for Notepad++ to correct these incorrect terms:\n- http://sourceforge.net/p/notepad-plus/bugs/4095/\n- http://sourceforge.net/p/notepad-plus/bugs/3263/\nIf would really like if the Notepad++ devs fix these annoying incorrect and misleading terms, so please post your comments into these bug reports if you can, so we can give these bugs finally the attention they deserve.\n. I wrote this paragraph regarding the character encoding. As soon as you approve it, I\u2019ll add it to the Creating Packages section in the Wiki, right after Rules to be observed before publishing packages:\nCharacter encoding\n\nUse the UTF-8 character encoding for the .nuspec and .ps1 files. If you don\u2019t respect this rule, some characters are not displayed correctly in the Gallery on chocolatey.org, because the Gallery assumes UTF-8.\nDon\u2019t save your nuspec files with a byte order mark (BOM). A BOM is neither required nor recommended for UTF-8, because it can lead to several issues.\nUnfortunately, PowerShell scripts need to be saved in UTF-8 with BOM, otherwise PowerShell doesn\u2019t recognize the script as UTF-8 and as a result, it processes non ASCII characters incorrectly. So you have to break the previous rule here, but always keep in mind that a BOM for UTF-8 is not recommended by the Unicode standard.\nDon\u2019t use the default Windows Editor. In addition to its lack of features, it can\u2019t even save UTF-8 files without BOM.\nNote that there\u2019s a lot of confusion in the world of character encodings: For example, ANSI is an incorrect term for the internal Windows character encodings, e.\u00a0g. Windows-1252. But you should not use this encoding family anyway. In addition, Notepad++ incorrectly uses the term ANSI as UTF-8 for UTF-8 encoded files without a BOM. If you select UTF-8 in Notepad++, it means UTF-8 with BOM. Therefore Notepad++ must show ANSI as UTF-8 in the statusbar.\nYou have to specify the UTF-8 encoding in the first line of your nuspec files. Then the first line looks like this: <?xml version=\"1.0\" encoding=\"utf-8\"?>.\n. Amen :)\n. The anchor is generated automatically as @ferventcoder already mentioned: https://github.com/chocolatey/chocolatey/wiki/CreatePackages#character-encoding\n\nDamn, I just found out that PowerShell doesn\u2019t even recognize UTF-8 files without BOM. It uses Microsoft\u2019s ancient Windows-1252 encoding by default. So we have to save PowerShell scripts in UTF-8 with BOM to work correctly. Sorry Microsoft, but we live in 2013. Nobody wants your stupid non-standardized encodings! :-1:\n. @Redsandro, you are right, improve that section for people who have dyslexia. :)\n. UTF-8 and the byte order mark are two different things. A BOM is a special character at the beginning of a file which signals the endianness (byte order of a text file). Because the endianness has absolutely no meaning in UTF-8, it is not recommended to use a BOM there, see https://en.wikipedia.org/wiki/Byte_order_mark.\nBut there are some programs out there which don\u2019t follow this standard, e. g. PowerShell and the Windows Editor. As you can see, Microsoft is retarded when it comes to this topic. It reminds me a bit of the story with IE, which web developers like so much. Haha. ;)\n. Wrong, not the \u201cno BOM\u201d causes issues, Microsoft causes them by ignoring standards!\nA gist is not necessary to show you PowerShell\u2019s behavior. PowerShell simply assumes that all PowerShell scripts are in that crappy Windows-1252 encoding unless there\u2019s a BOM. Then it simply reads the character addresses from the file and shows them if they were Windows-1252. Example:\ntest.ps1, encoded in UTF-8 without BOM:\nPowerShell\nWrite-Host \"\u03b1\u03b2\u03b3 \u00a9 \u2122 \u03a9\u03a3\"\nOutput in Powershell\nPowerShell\nIn C:\\Users\\Someuser\\test.ps1:1 Character:31\n+ Write-Host \"\u00ce\u00b1\u00ce\u00b2\u00ce\u00b3 \u00c2\u00a9 \u00e2\u201e\u00a2 \u00ce\u00a9\u00ce\u00a3\"\n+                               ~\nThe string has no terminator: \".\n    + CategoryInfo          : ParserError: (:) [], ParseException\n    + FullyQualifiedErrorId : TerminatorExpectedAtEndOfString\nI think the character encoding section in the Wiki is fine. It clearly explains what a person should do and clarifies the confusion that Microsoft has created. If someone doesn\u2019t understand this, he\u2019s probably retarded and shouldn\u2019t create packages. ;)\n. And by the way, all modern Linux distributions use UTF-8 without BOM by default. The W3C doesn\u2019t recommend BOMs for the web.\nBOMs for UTF-8 really cause issues: https://en.wikipedia.org/wiki/Byte_order_mark#UTF-8\nSome issues that I\u2019ve experienced myself when using UTF-8 with a BOM:\n- .gitignore files don\u2019t work properly. The expression in the first line fails because the BOM character stands in the way.\n- A colleague created a small node.js script which merges multiple CSV files. The output file contained multiple BOM characters, even in the middle of a line. Then my colleague imported that file into a database using phpMyAdmin. Then he experienced database inconsistencies. It took him over an hour until he found out that the BOMs were causing that issue.\nWell, Microsoft seems to insist on BOMs when using UTF-8. But only because Chocolatey is a Windows software, it doesn\u2019t mean that it has to adapt Microsoft\u2019s inability to follow standards and recommendations, especially when it comes to such fundamental things like character encoding.\nI read that from multiple sources that Microsoft is not very open to any suggestions. For example, they keep ignoring bug reports and feature requests for Internet Explorer and automatically delete them after about 48 hours. What kind of weird strategy is this? Are they planning their downfall of their company? Well, at least for IE it seems to work, when I look on the progression of the market share of Internet Explorer. :grinning:\n. > I mostly ignore things I can't change and change the things I can change.\nSounds pretty clear to me: We make chocolatey better by leaving the character encoding section as it is and let IE die. :grinning:\nSorry if I mention it, but your wisdom phrase has an inconsistency: How can you be sure that you can\u2019t change something? If you take a closer look at history, you will notice great people who have seemingly done the impossible. But today we know that it wasn\u2019t impossible. Thanks to this kind of people we now have democracy, women's suffrage and no more slavery. At least in the countries where we live.\nedit:\nsorry, I meant something, not anything ;)\n. Of course :) Simply UTF-8 without BOM for *.nuspec files and UTF-8 with BOM for PowerShell scripts.\n. Screenshot of Notepad++ 6.5:\n\nNotepad++ is inconsistent, that\u2019s even worse.\nIt\u2019s also mentioned in these two bug reports:\n- http://sourceforge.net/p/notepad-plus/bugs/4095/\n- http://sourceforge.net/p/notepad-plus/bugs/3263/\n. @Redsandro, I think you misunderstood something here. When you open a file with no special characters, the encoding cannot be determined by the text editor. Then it depends on the settings of the editor which encoding is assumed. In Notepad++, you can override this setting if you tick \u201cApply to opened ANSI files\u201d like in the screenshot above, which will assume UTF-8 for every file that has no special characters and no BOM. That\u2019s the standard for every Linux editor I know, and it\u2019s a good standard. :+1: \n. Sorry, I meant \u201cwhich will assume UTF-8 for every file that has no non-ASCII characters and no BOM.\u201d\n. I updated the title of this issue, because the old one was misleading and wrong.\nNow I think we have every information needed to fix the character encoding problem. If you have no further doubts or questions, this issue can be closed.\n. Good suggestions, except this one:\n\nEither:\nDo not use non-ASCII characters.\n\nThis is not a solution of the character encoding problem, only an amateurish circumvention for lazy people. I\u2019m very annoyed of all these redcutions to typographically incorrect ASCII characters, like e' instead of \u00e8, ue instead of \u00fc, ss instead of \u00df or (c) instead of \u00a9.\nI expect from an advanced computer user, programmer or package maintainer to know the important things about character encodings, or at least to be open to learn it. People that don\u2019t like to read and follow rules, guidelines and standards, should never ever create and publish packages. Such people are harmful for the community and make the world to a worse place.\nDon\u2019t we all want packages with a good quality? Isn\u2019t it worth to spend a few more minutes or a bit more to read, understand and follow the rules and guidelines of a project?\n. Doesn\u2019t that mean the same as \u201cdo not use\u201d, just with other words? I definitely don\u2019t like this recommendation. It\u2019s like sweeping the dirt under the carpet. :-1: Seriously, what is so hard about reading a few lines and changing the character encoding settings of the editor if necessary?\nI\u2019ll make a pull request so that the templates comply with these recommendations.\n. OK, but I still don\u2019t agree with putting\n\nEither:\n- Do not use non-ASCII characters.\n\ninto the wiki. I thought the idea is to write less (but sensible) guidelines, not more. I\u2019ll try to explain why that \u201cnon-ASCII characters\u201d guidelines does not make sense, using a little story (inspired by https://github.com/chocolatey/chocolatey/wiki/ChocolateyStory)\nThere are two guys, Bob and Richard. Both are Windows users and discovered Chocolatey a few moths ago. Now they also want to maintain some packages of their favourite software. \nRichard doesn\u2019t care much about guidelines and rules, he starts immediately with creating packages and doesn\u2019t read the Chocolatey wiki. He uses the Windows Editor to edit his nuspec files and saves them with the default character encoding (Micromisleadingsoft\u00ae ANSI\u2122). But in some of his packages there are characters like \u00a9, \u00ae and en dashes. They get displayed with ? signs in the Chocolatey Gallery, but he doesn\u2019t even notice it. After a few weeks he coincidentally notices this problem, but he does not care.\nUnlike Richard, Bob is assiduous. He reads the Create Packages page and learns that nuspec files must be saved as UTF-8 without BOM. He didn\u2019t know much about character encodings before, but he configures his Notepad++ editor to save files as UTF-8 without BOM by default. Now he won\u2019t have any problems with character encodings in nuspec files and enjoys creating packages.\nUnfortunately there are many Richard-like package maintainers on Chocolatey.org. For them, a suggestion in the wiki like \u201cDo not use non-ASCII characters.\u201d wouldn\u2019t have any effect. And for people like Bob, such a suggestion would be totally superfluous, because the solution to set the correct character encoding in the editor once is certainly less complicated than having to remember each time when editing a nuspec to not use non-ASCII characters.\nDon\u2019t be a Richard. :smile: \n. @Redsandro: I changed the character encoding section as you suggested, but left your recommendation about ASCII out. I hope that my story about Bob and Richard could convince you. :smile: \n@gep13, a package that configures text editors with proper character encodings would be interesting. I\u2019ve made some research about text editors on Windows and character encodings. We could use it to determine which editor would need a \u201cfix\u201d:\n- Notepad++ uses UTF-8 without BOM as default encoding since a few releases. But if you upgrade from older versions, it continues using Windows-1252 (incorrectly called ANSI) as default encoding.\n- Notepad2 uses that stupid \u201cANSI\u201d by default. :-1: \n- PSPad too\n- Sublime Text 2 and 3 use UTF-8 without BOM as default encoding.\n- Geany: UTF-8 without BOM by default. :+1:\n- Gedit for Windows too. \n- Brackets too.\n- Vim/Gvim isn\u2019t even able to to show most Unicode characters. But I think that\u2019s a Windows related issue. In addition, GVim/Vim on Windows doesn\u2019t use UTF-8 as default character encoding. But Vim on Linux shows all Unicode characters provided by font and uses UTF-8 without BOM by default.\nAs you can see, most cross-platform editors (except Vim) use UTF-8 without BOM by default. Unfortunately this means that most of the Windows-only community adopted Microsoft\u2019s retarded standards policy. It\u2019s always annoying when a stubborn company insists on obsolete standards and mostly ignores user feedback and bug reports. If someone claims Microsoft is innovative, I will point the finger at him and laugh at him. Innovation can never coexist together with such an ultraconservative and ignorant behaviour.\nI\u2019m sorry that I criticize Microsoft with these words. But of course my main interest here is to improve Chocolatey. :)\n. You\u2019ve probably never looked at Debian\u2019s guidelines for package maintainers: http://www.debian.org/doc/manuals/maint-guide/\nThe fact is: being a package maintainer requires great responsibility. Therefore one must spend some time to read rules and guidelines of the community. If one does not like to do so, he should never ever join a community.\n\nMeet Hank. Always in a hurry. Dyslexic. Hates reading. Hates editors. Hates Windows. Doesn't care about other people's mess, but cares about end user quality.\n\nThat\u2019s a paradoxical behaviour. A guy who cares about end user quality, but has all the negative character properties you described? Very unlikely if you ask me. I\u2019m glad that I\u2019ve never met such a person. :smile: \n. By the way, if Debian\u2019s documentation would scare away potential package maintainers, then why is it so popular? Why are there so many Debian package maintainers?\nDon\u2019t tell me that almost all Windows users are like Richard or Hank. If that would be true, I would immediately remove Windows from all computers I have access to and throw my Windows license out the window. :smile:\n. OK, then another try: Take a look at Arch Linux\u2019 guidelines: https://wiki.archlinux.org/index.php/Creating_Packages\nDon\u2019t tell me that there are too few packages for Arch Linux. :smile: \nYes, unlike the Linux package world, there are many Richard-like Chocolatey package maintainers. The reasons for that are quite obvious:\n- Until now, Chocolatey does not have a documentation that covers all important topics. That\u2019s understandable, because it\u2019s a relatively young project.\n- There is no moderation or inspection of new packages by experienced maintainers. Imagine you live in a world without police. It\u2019s obvious that such a world laws wouldn\u2019t be followed by most people, which would end in a total chaos.\nAnd remember, we\u2019re talking about guidelines for package maintainers here, not for average Windows users. I still don\u2019t understand why you insist on recommending to use obsolete character encodings, just to support the laziness. It\u2019s so easy to change that setting in the editor. I don\u2019t think that Chocolatey package maintainers are idiots.\nMaintainers also need to know about PowerShell if they want to create packages that do more than just invoking the Install-ChocolateyPackage helper function. Isn\u2019t that a lot more work than changing the character encoding setting in the editor to UTF-8?\n. Hm, then why did the NuGet developers decide to use UTF-8? Aren\u2019t some of them Microsoft employees? :smile:\n\nYou are seriously comparing this to total chaos?\n\nYou\u2019re misinterpreting this. I didn\u2019t talk just about the character encoding problem, it\u2019s just a scenario if no one would respect rules.\nAnother example: Internet Explorer is the default browser in Windows. Why do most people make the effort and install an alternative browser? Internet Explorer will just work fine for them, if they can live without proper HTML5/CSS3 support. :laughing:\nIf you like simplicity, then go forth and use Internet Explorer. We must accept Microsoft\u2019s laws, otherwise we will hurt us. :smile: \nI\u2019m sorry for that irony, but your arguments arguments make little sense to me.\n. > Stay away from IE! :smile:\nYes. Friends don\u2019t let friends use Internet Explorer. But IE isn\u2019t the only Microsoft stuff I don\u2019t like. I\u2019m quite happy that their server software with their locked in ecosystem (Windows Server, ASP/ASP.NET, IIS) is losing market share to Linux/OSS solutions. :smile: Let\u2019s build a better an Internet that belongs to everyone, using openness and innovation. :+1: \nYou\u2019re right, let\u2019s stop that discussion here. So here\u2019s a short summary of the results:\n- Recommendation for maintainers who read the wiki: UTF-8.\n- If maintainers don\u2019t use UTF-8, no problem as long as they don\u2019t use non-ASCII characters.\n- Incorrectly displayed characters on Chocolatey.org are not a serious problem as long as the affected packages are functional.\n. Of course.\n. :smile: \nI have an idea how we can solve this problem once and for all, even for Richards, Hanks and for people who have not a single clue about character encodings. As you know, there\u2019s much work on the computer that can be automated. Why not automate a character encoding conversion to the correct encodings before a package gets built? That conversion could be for example executed as first step of the cpack command.\nNow to the technical part: I already mentioned that character encoding detection is not a simple task. I requires a lot more than just a few lines of code. This document describes the approaches: http://www-archive.mozilla.org/projects/intl/UniversalCharsetDetection.html\nFor Python, there exists a nice tool to detect the character encoding: https://pypi.python.org/pypi/chardet/2.1.1\nI also discovered a PowerShell script that do the same: http://danspowershellstuff.blogspot.it/2012/02/get-file-encoding-even-if-no-byte-order.html.\nIf we were on Linux, these things would be a lot easier: using file -i to detect the character encoding and iconv to convert it.\n. > I don't think that will work. Once you save your file in standard (according to Windows) encoding, the character becomes unreadable when you reopen the file. But when I change encoding to utf-8, the char remains unreadable. I have to enter it again.\nI don\u2019t understand what you mean by that. Why would the characters become unreadable? Of course the character encoding conversion works. I tested it myself using Cygwin with the file -i and iconv method.\n. The nuspec files are never converted to ASCII, so that\u2019s not the problem here. The problem we need to solve is that some package maintainers save them in Windows-1252 instead of UTF-8.\n. > It sounds like cpack would be too late in the process to be helpful.\nWhy too late? When you for example execute the cpack command, the character encodings (Windows-1252, UCS-2 or other weird encodings) could be converted into UTF-8 first and then the cpack command could do the same like it already does now.\n. @Redsandro, you wrote this:\n\nOnce certain characters are \u25a1, like \u25a1Torrent \u25a12013 bitTorrent\u25a1, you can't get them back from a conversion.\nI just tried. If you save it directly and load it directly, there is no problem. But if you save your package to a git repository, load it on a different machine and then push it, it's already too late.\n\nI tried to reproduce this with Git, but the characters are all fine. This is the workflow I used:\n1. Save uTorrent.nuspec with Windows-1252 encoding, including an \u03bc character.\n2. Commit & push\n3. Git clone to another directory on the computer\n4. Convert the nuspec to UTF-8 without BOM\n5. Commit & push\n6. Git clone to another folder on the computer\n7. Open nuspec, the editor correctly recognises the file as UTF-8 and the \u03bc character gets displayed correctly\nSo here absolutely nothing gets lost. I used https://github.com/tomone/suggestions as my testing repository.\nBut if you try do download an already built package like \u03bcTorrent, unpack it and open the nuspec, your editor will probably show \ufffdTorrent. Also setting the encoding to Windows-1252 does not help. Building a package probably causes non-UTF-8 encodings to be destroyed. I don\u2019t know what there happens in the background, because I have only basic knowledge about character encodings.\nSo the only workflow where the character encoding would be destroyed is the following:\n1. Create a package, using some non-ASCII characters like \u00a9, \u00ae, \u03bc or \u2013.\n2. Save nuspec as Windows-1252\n3. Build package\n4. On every package update, take a previously built package (the nupkg), extract it, insert the new version and download links and then build it again.\nWell, this is a weird workflow, but of course we also must take this into account. What about to let the cpack command scan the nuspec file for weird characters caused by a broken encoding and stop in that case? A meaningful error message could be displayed and then the package maintainer must investigate that character encoding problem.\n-- edit --\ncorrected step 4 of the second workflow\n. I\u2019ve investigated this problem and now I know a possible solution and what there happens in the background:\n- Windows-1252 is an 8-bit character encoding, while ASCII is has 7-bit.\n- In UTF-8, characters encoded with a single byte between (hex) 80 and FF are invalid, but in Windows-1252 these addresses represent characters like \u00b5, \u00c4, \u00ae and \u00a9.\n- NuGet assumes UTF-8 and therefore replaces the invalid single-byte-characters between 80 and FF with the Unicode replacement character \ufffd (&#xfffd;), which is an option to handle this.\n- Therefore this replacement character shows up in the gallery for example in the \u03bcTorrent package\n- However, RFC 3629 states that implementations of the decoding algorithm must protect against decoding invalid sequences. The Unicode standard requires that decoders treat any invalid character sequence as an error condition.\n- If NuGet would follow RFC 3629 and throw an error when a maintainer attempts to package a Windows-1252 encoded nuspec with 80 to FF characters, we wouldn\u2019t have any problem.\n- Therefore, the best way to fix this issue is to implement such an error message on invalid UTF-8 characters directly in NuGet. Has anybody tested newer NuGet versions to see if this has been implemented already? If not, I would open an issue for this on CodePlex.\n- In the case the NuGet developers ignore this issue, I would really like if it gets implemented into Chocolatey\u2019s cpack, together with a character encoding detection and conversion to UTF-8.\n-- edit --\nSorry, it\u2019s (hex) 80 and not 7F.\n. Sorry, I forgot the solution for nuspecs whose Windows-1252 80 to FF characters have already been destroyed and replaced with \ufffd: cpack could detect if the \ufffd character is present in the nuspec, abort in that case and throw an error message. This message should mention that UTF-8 should be used and that \ufffd characters must be replaced with the correct characters, otherwise it won\u2019t proceed.\nLet\u2019s improve Chocolatey\u2019s package quality and ban those annoying \ufffd characters. :+1: \nI :heart: Unicode.\n. > Although I always thought cpack was just a reference plus some alternate configuration to the nuget pack binary.\nYes, it\u2019s a Windows Batch file in C:\\Chocolatey\\bin\\cpack.bat.\nBut if we really want to fix this character encoding problem, we need to add a control structure for it to the cpack command, since that is the only contact point between the package source files and Chocolatey before the package gets pushed. That\u2019s the only possibility, because there will always be people who don\u2019t read and respect rules and guidelines. And even if there would be some kind of moderation for Chocolatey packages, it\u2019s always better when something gets automated when it\u2019s possible, so it would be less work for the moderators.\nA good program doesn\u2019t let the user make mistakes if they can be detected, but also doesn\u2019t treat users like idiots. :smiley: I think this is one of the key rules of good usability.\n. I wrote a small Bash-script which automatically converts all *.nuspec files from other encodings to UTF-8. This could be very useful for package maintainers that have many packages and want to make sure that every character in their nuspecs gets displayed correctly in the Gallery.\nIn addition, the script removes BOMs and replaces any XML declaration with <?xml version=\"1.0\" encoding=\"utf-8\"?>, so that package maintainers can see more easily that the file is encoded as UTF-8.\nThis script requires a Bash interpreter (on Linux, Mac OS X and Windows with Cygwin) and the program \u201crecode\u201d to perform the character encoding conversion. Recode is not installed by default in Cygwin and in most Linux distributions, but it\u2019s quite easy to install it.\n. Of course not every Windows user has Cygwin installed. I wrote this script in Bash because I like cross-platform solutions. Personally I don\u2019t like programming/scripting languages which work only on one platform, especially when that platform is a non-free proprietary operating system.\nNobody is forced to use this script and nothing prevents anybody from writing a similar script in PowerShell. :smiley: \n. Woah, there\u2019s a PowerShell implementation for Linux: http://pash.sourceforge.net/ :smile: \n. > I thought you were working towards a solution for all packagers from which there is no escape, preferably without them even knowing.\nYes, that would be a better solution. First I looked how such a script could be written in PowerShell, but I discovered that it\u2019s a lot more complicated (because you have to write the non-trivial character encoding recognition from scratch) and my PowerShell skills aren\u2019t good enough.\n. I have a new idea. Let me make a summary of a possible approach that would fix this issue:\nThe cpack command should perform the following checks before calling NuGet\u2019s pack command:\n- Check if the affected *.nuspec file is not encoded as UTF-8.\n- Check if an UTF-8 BOM is present.\n- Check if one or more Unicode replacement characters (\ufffd) are present in the *.nuspec file.\nIf one of the checks above is true, cpack should throw an exception and inform the package maintainer that something is wrong, i.e. that it\u2019s needed to convert the file to UTF-8. Then the maintainer could fix it and execute cpack again.\nI think this approach is much better than additional automatic charset conversion because of the following reasons:\n- It has a better learning effect for maintainers. If an automatic conversion would be performed, some maintainers would continue to use legacy character encodings (such as Windows-1252), without ever knowing that UTF-8 would be the correct encoding.\n- Package maintainers would learn that an UTF-8 BOM is a bad thing.\n- To replace \ufffd with the correct characters, it would be necessary anyway to manually edit the *.nuspec file.\n- As I already mentioned, a character encoding recognition is never 100 % accurate in all cases. In some rare cases, an automatic character encoding conversion to UTF-8 could result in an output file with wrong characters.\nPlease let me know if you have doubts and if you would be interested in this solution.\n. @Redsandro, thanks for the hint. Unfortunately UTFCast Express only supports the ASCII, UTF-8, UTF-16 Little Endian, UTF-16 Big Endian encodings. It does not support 8-bit-encodings (e.g Windows-1252) which mostly cause our encoding issues at Chocolatey.\nI couldn\u2019t find any free program which performs a batch convert of text files and supports all relevant encodings. To develop one would be a nice FOSS project though, especially useful for Windows users/developers :smiley: \nSome time ago I created a small node.js script which performs this task for a folder with Chocolatey/NuGet package source files: https://github.com/TomOne/cpkg-utf8-conv\nIt is still very naive, but it works. Of course it is not suitable to automagically prevent the encoding issues we have, but it\u2019s nice tool to clean existing package repositories. At least I like it more than my previous Bash script for this task. :smile: \n. BTW, some time ago I came across EditorConfig. It\u2019s a plugin for many popular editors which automatically sets specific parameters for specific files in a repository. For example, you can write into the config file that all .nuspec files should be saved as UTF-8 and all .ps1 files as UTF-8 with BOM.\nI already use it for my packages repository: https://github.com/TomOne/chocolatey-packages/blob/master/.editorconfig\n@ferventcoder, it would be nice to integrate this also into the https://github.com/chocolatey/chocolateytemplates repository. So we can recommend to package maintainers to install the EditorConfig plugin and at least those folks won\u2019t create packages with inappropriate character encodings.\n. > But I'm not sure what good it would do since that is not a chocolatey packages template repository that they start from (if that makes sense).\nThat\u2019s right, it does not help much. But we could add to the character encoding section in the wiki that package maintainers should \u2013 if they use EditorConfig \u2013 copy the .editorconfig file into the root directory of the repo. Unfortunately I noticed that only the plugin for Sublime Text seems to support the charset property of EditorConfig, so only Sublime Text users could actually benefit from that. But note that Sublime Text is one of the most popular code editors nowadays, so it wouldn\u2019t be completely useless.\nBTW, the following section is a bit offtopic, but I think it could be interesting for us:\nIn my previous comments I mentioned that Notepad++ (the editor with the most downloads on Chocolatey.org) uses an incorrect term to denote \u201cUTF-8 without BOM\u201d, which I also wrote into the character encoding section in the wiki. I created a patch on the SourceForge Project site for Notepad++ to correct that term. Let\u2019s hope that the Notpad++ devs eventually respond to that issue, so that we could reduce a little bit the confusion about character encodings that seems to persist in the Microsoft/Windows community.\n. Because PowerShell uses deprecated character encodings (known as Windows codepages and often incorrectly called \u201cANSI\u201d) by default and a BOM is the only way to force UTF-8.\nSee https://github.com/chocolatey/chocolatey/wiki/CreatePackages#character-encoding for more information.\n. Good suggestion. This would also be more compliant to package managers for Linux. They also have a specific folder where they download their packages. It\u2019s called \u201cpackage cache\u201d. In apt-get for example, this cache can be cleared with apt-get clean. It would be great if we had such a command in chocolatey.\n. Perfect. :)\n. @ferventcoder, better also correct the Ketarin command in your blog: http://ferventcoder.com/archive/2013/01/03/chocolatey-automatic-packages.aspx\nThen this issue can be closed I think. :)\n. All right, I added it to the Wiki: https://github.com/chocolatey/chocolatey/wiki/CreatePackages#naming-your-package\nIt would be good to make known these guidelines. A tweet or/and a blog post would be perfect for that.\nAnother Question: What we do with the existing packages that do not follow these guidelines? To leave them so could confuse new package creators. A perfect solution for this issue are aliases: https://github.com/chocolatey/chocolatey.org/issues/25\n. I browsed through the Ubuntu package list and discovered that not all packages follow the guideline with the hyphens. This rule was clearly too strict, because if for example the name of an application contains many short words separated by spaces, the many hyphens would disturb.\nSo I changed this in the Wiki to also allow no spaces for the package id when the original app name contains spaces.\nDo you think it\u2019s a good idea to add a link to the Ubuntu package list or even from other distributions to the Naming your package section in the wiki? When for example someone makes a choco package and that package already exists as DEB/RPM package, it wouldn\u2019t be bad to pick the same package id. In that way Linux and Chocolatey users don\u2019t have to remember different package names.\n. But standards are not bad if they are sensible. ;) I know no other package format (except NuGet of course) which uses CamelCase for id.\n. Sorry, my mistake. ;)\n. Nice. :+1: I updated the wiki. Please check if I did everything correctly: https://github.com/chocolatey/chocolatey/wiki/ChocolateyFAQs#when-i-install-a-portable-app-like-imagemagicktool-how-is-it-on-my-path-without-littering-my-path\n. Thanks. Does that mean that I can add it to the Wiki?\nHmmm, I find it strange that every GitHub user can edit every Wiki without any moderation or inspection by the project members. This is in need of improvement.\n. @ferventcoder: OK, but what about my question?\n. I added it to the wiki: https://github.com/chocolatey/chocolatey/wiki/CreatePackages#package-icon-guidelines\n. Good, can you add this to the Wiki? Does it make sense to provide separate Ketarin templates for https://github.com/chocolatey/chocolateytemplates/tree/master/_templates/chocolateyauto and https://github.com/chocolatey/chocolateytemplates/tree/master/_templates/chocolateyauto3?\n. The term \u201cupdate\u201d is commonly used for bug fixes or minor software enhancements, while \u201cupgrade\u201d refers to more extensive feature enhancements. An \u201cupgrade\u201d generally leads to an increased major version number.\nTherefore these two terms are even not perfectly suitable like they are intended for apt-get.\nAbout two weeks ago I switched from Ubuntu to Arch Linux, a highly customizable Linux distribution with a rolling release policy and fast package updates (unlike Ubuntu or Debian, which is ultra-conservative in this area).\nArch Linux has its own package manager called pacman. Pacman uses a completely different syntax than apt-get, for example:\nBash\npacman -S somepackage  # Installs or updates the specified package. The \u201cS\u201d stands for \u201csynchronizing\u201c with the repository. That\u2019s a very nice terminology if you ask me and more suitable than update/upgrade.\npacman -Sy  # update local database (package index), similar to \u2018apt-get update\u2019\npacman -Syu  # complete update of all packages, equivalent to \u2018apt-get update && apt-get dist-upgrade\u2019\nAs you can see, the pacman commands are shorter than their apt-get equivalents. If we ever need to change command syntax of chocolatey, my vote is for a pacman-like syntax. :)\n. If you ask me, a local package database (same as package index) should have a high priority for every package management system. It\u2019s a pity that the NuGet devs didn\u2019t already implement it.\nMicrosoft isn\u2019t known for good software in this area. I\u2019m not sure if Windows Update can be seen as package management, but it\u2019s a fact that it\u2019s extremely slow, inefficient and badly designed. For example, it doesn\u2019t install all required updates at once, but it installs some updates, then it needs to reboot, then the next updates, reboot again and so on. That\u2019s ridiculous. ;) If for example an update is superseded by another update, it installs first the old update and then the update which superseded the previous update. Score one for inefficiency. :-1: It looks that Windows Update also has no package (update) index.\n. Done.\n. @ferventcoder: I\u2019ve seen you use Google Analytics on chocolatey.org. It would be very interesting to know how many visitors use IE8 or lower. Then we have facts.\n. Thanks for providing these statistics. IE8 usage is low, as I had expected. But even in 8 months when Windows XP support ends it won\u2019t be zero. :-1: \nHowever, I found a very simple solution for a fallback to PNG if a browser doesn\u2019t support SVG using the JavaScript plugin SVGeezy. Then this simple JavaScript code will replace all SVGs with their PNG equivalents:\nJavaScript\nsvgeezy.init(false, 'png');\nThis assumes of course that in the same directory in addition to the SVG file there must exist the equivalent PNG file (e. g. http://example.com/icon.svg and http://example.com/icon.png). But that\u2019s not a problem at all, we just need to mention that in the icon guidelines in the wiki.\nI would be very pleased to make a pull request for chocolatey.org to integrate this fallback. @ferventcoder, is that OK for you?\n. Tiny. Only 1.158 KB for the minified version, see the code: https://github.com/benhowdle89/svgeezy/blob/master/svgeezy.min.js\n. Great. I have good news for you. We don\u2019t even need SVGeezy. This plugin was designed for folks who don\u2019t already have Mondernizr and jQuery integrated in their pages, but chocolatey.org has them integrated. So Modernizr can be used for feature detection and jQuery for DOM manupulation and the code becomes even simpler, without the need of SVGeezy:\nJavaScript\nif (!Modernizr.svg) {\n    $('img[src$=\".svg\"]').each(function()\n    {\n        $(this).attr('src', $(this).attr('src').replace('.svg', '.png'));\n    });\n}\nI found this code on David Bushell\u2019s blog, a guy who seems to be very interested into SVG. :+1: \nIn addition I played around with SVGZ. That is the gzipped format of SVG. SVG is highly compressible, because it contains a lot of redundant data (like HTML). I was very curious about the filesizes of SVG, SVGZ and PNG in comparison. Therefore I generated some files:\nFile size in bytes, filename\n1141, git.svg\n782, git-opt.svg\n437, git-opt.svgz\n1699, git-opt-128px.png\n868, git-opt-48px.png\n56431, mixxx.svg\n16839, mixxx-opt.svg\n2357, mixxx-opt.svgz\n5278, mixxx-opt-128px.png\n1674, mixxx-opt-48px.png\n28718, pyhoca-gui.svg\n12009, pyhoca-gui-opt.svg\n3190, pyhoca-gui-opt.svgz\n16306, pyhoca-gui-opt-128px.png\n4067, pyhoca-gui-opt-48px.png\nDescription of these files with the example of git:\n- git.svg = original SVG file\n- git-opt-svg = optimized SVG file with SVGO, a Node.js tool\n- git-opt.svgz = gzip compressed optimized SVG file\n- git-opt-128px.png = equivalent raster image with 128px, optimized with optipng -o7\n- git-opt-48px.png = equivalent raster image with 48px, optimized with optipng -o7\nAs you can see, SVGZ is clearly smaller than the raster version with 128px, and in some cases even smaller than the 48px version. SVGZ is a very interesting format, perfectly suitable to use it as package icons on chocolatey.org.\nHowever, SVGZ cannot be directly integrated in websites without an additional step. The web server must be configured to tell the browser \u201chey this is gzipped, you\u2019ll need to decompress this\u201d.\nThis can be done in Apache by adding this to the .htaccess file:\n```\nSVG\nAddType image/svg+xml .svg .svgz\nAddEncoding x-gzip .svgz\n```\nI don\u2019t know how to configure IIS to handle SVGZ properly, but you certainly know it. It would be great if you could test it.\n. Yes, http://semver.org/ is nice, but it only refers to the versioning of an application itself, not the distiction between upstream and package version. Therefore it does not help here.\nI like the epoch part in Debian package versioning. It\u2019s a very good idea, because it allows a trouble-free continuation of the version, even when the version policy changes or when there was a mistake in versioning.\nThe versioning of Linux packages is a lot better than the one of NuGet. I regret that they have not taken a good example of them. It is not an easy task to change something fundamental like this later.\n. I just don\u2019t see any sensible reason why a package management system should force to mix together the version of the packaged software with package revisions without proper separator characters. In fact I don\u2019t know any other package manager than NuGet/Chocolatey which forces maintainers to do this.\nIf for example a Chocolatey package has the version 1.10.3.20140327 I would naturally understand from it that it is also the version of the packaged software. Of course folks can learn that if the fourth segment is an ISO 8601 date, it is a package fix notation, but it is not obvious. Better would be 1.10.3-20140327, with a hyphen as separator (like used by Debian and Arch Linux), so that people understand that the part after a hyphen belongs to the package version fix notation.\nThe current restrictive versioning policy of NuGet/Chocolatey has also other issues:\n- What if the software itself already uses four dot-separated segments for its version and you need to fix the package?\n  If you have for example a software version 2.5.8.1, you are forced to alter the last segment, so the original software version information gets destroyed: 2.5.8.20140327. Then, for all the following packages of version 2.5.8.x, you are forced to use the current date as last segment, even if the affected package does not actually fix a previous package revision. You would have to wait until the packaged software gets released with version 2.5.9.x to be able to drop the date in the last segment and use the real software version again. So here an essential information is removed just because of a senseless restriction.\n- What if you have a package with version 2.5.8.20140327 and you need to fix it again on the same day? Do you use the date of the following day? That\u2019s not semantically correct. :smile:\n- What if you have released a package and made a mistake in the package version, e.g. 2.5.6 instead of 2.4.6? NuGet / Chocolatey provides no solution for this, except unlisting a package. But what if already hundreds of people downloaded the package? If you unlist it and the software version 2.4.7 comes out, all users who have the package with the wrong 2.5.6 simply won\u2019t get an update. With something similar like Debian\u2019s epoch notation there wouldn\u2019t be this issue.\nAllowing only semver for package versions is not a good idea. Package managers must be more flexible to avoid these versioning issues.\n. @ferventcoder: Yes, but apart from distorting the original version information, the approach of modifying the already existent fourth segment doesn\u2019t solve the problem of an accidentally misspelled first, second or third segment. I described that problem already in my previous comment (in the third list item). It happened to the Dropbox package: http://chocolatey.org/packages/dropbox/9.20. Fortunately there were only 8 downloads of the misspelled version.\n\nIt's not perfect and yes we should look at enhancing stuff like that. Where do you see this in terms of priority?\n\nOf course Chocolatey also works with the current versioning scheme, but to become a robust and well established package management system, this is definitely an important issue to consider. I don\u2019t want to blame the NuGet developers, but If I would build a package management system, I would never apply such a restricted and inflexible versioning policy. SemVer is nice for applications, but not appropriate for package versioning.\n. @abombss, thanks for explaining your point of view.\nMy idea is just to look at how other popular package managers for operating systems are built and to learn from them. For example, consider the openssl package of other package managers:\n- Debian: https://packages.debian.org/sid/openssl\n- Ubuntu: http://packages.ubuntu.com/trusty/openssl\n- Arch Linux: https://www.archlinux.org/packages/core/x86_64/openssl/\n- Gentoo: http://sources.gentoo.org/cgi-bin/viewvc.cgi/gentoo-x86/dev-libs/openssl/ChangeLog?view=markup\n- opkg: http://downloads.openwrt.org/snapshots/trunk/ar71xx/packages/openssl-util_1.0.1g-1_ar71xx.ipk\n- MacPorts: https://www.macports.org/ports.php?by=name&substr=openssl\n- Fink: http://pdb.finkproject.org/pdb/package.php/openssl\n- Fedora: http://pkgs.fedoraproject.org/cgit/openssl.git/tree/\nAs you can see, every single package manager in this list allows the original version notation of openssl (currently 1.0.1g) in the package version. In this way, an user immediately sees what version of openssl the package contains. I don\u2019t think that this approach is bad as almost all package managers adopted it. The only \u201cdisadvantage\u201d of this approach is that the versioning logic is a bit more complex. But in my opinion in this area a good user experience should have a higher priority than avoiding a little more program complexity. The creators and programmers of these other package managers seem to agree with me.\nOr do you think it is better to be forced to version the openssl package with something like 1.0.1.20140411 like OpenSSL.Light from Chocolatey? I don\u2019t think so.\nA separate \u201ccontent version\u201d could be another approach, but that would also bring more complexity into Chocolatey and could also confuse users, because then there would be two version strings and the user must distinguish between them.\nI don\u2019t see any sensible reason why Chocolatey should not adopt proven patterns of other popular package managers. I remember to have read \u201cChocolatey NuGet - kind of like apt-get \u2026\u201d in the Chocolatey wiki. From this I understand that Chocolatey intends to learn from apt-get, otherwise it wouldn\u2019t make sense to write this. :smiley: \n. Yes, I agree with you. But remember that many of these name prefixed and duplicate packages were created before I suggested the package rules and added them to the wiki after Rob had approved them. Sending the package rules with the confirmation e-mail would be a good idea, but in this way we won\u2019t reach already registered maintainers.\nA major problem is that also if new maintainers read the wiki once, they probably don\u2019t check the wiki every week/month for updates. The only solution to let them know about important wiki and guideline updates would be a kind of newsletter that is sent to every single maintainer. These e-mails should then contain a link to the updated wiki sections and an invitation to read them.\nBut I see that we are moving a bit offtopic here. If you would like to discuss this aspect further, please open a new thread in the forum.\nThis issue is about an improved package triage process. There will always be package maintainers that ignore contributions and pull requests from others. The reasons for that are varied:\n- Not even time for a couple of seconds for a short reply to the person who contacted the maintainer\n- The desire to destroy or to harm the Chocolatey community\n- Disinterest, laziness or stubbornness\n  All these behaviours are unacceptable, so the main purpose of this improved triage process is to reduce the amount of time, effort and the vexation when people make pull requests to package maintainers.\n. Awesome :+1: \n. @Redsandro, actually only .portable and .install are official suffixes. They are essential to understand what the package contains. I suggested them a few months ago and they were accepted. The other suffixes are deprecated, but obviously older packages still use them. And there are still folks which ignore the rules and guidelines in the wiki and use the deprecated suffixes. This problem will never be solved until chocolatey packages get inspected by moderators before they get published.\n. Good, so the suggested modifications to the package rules are approved. Can someone apply them to the Wiki? Or can I do it? It\u2019s better to do it sooner than later. :smile: \n. > Shall we use that by default and let OS and FS handle all instead of a separate EXE and just fall back to shimgen if no link functionality is available?\nDo you mean symbolic links? The support for symbolic links on Windows is very naive. If you make for example a symbolic link to an EXE and that EXE requires an external library, the symbolic link won\u2019t resolve the relative path to it. This makes symbolic links on Windows unusable and useless in many cases, because many programs require external libraries. Unix-like systems don\u2019t have this limitation. I think this is also the reason because shims are preferred here.\n. Unfortunately not. Shimgen is closed-source proprietary software. Here\u2019s the license text: https://github.com/chocolatey/chocolatey/blob/master/src/tools/shimgen.license.txt\n. > I also wanted to post up a new feature to allow you to remove OLD VERSIONS of software.\nLike it. But if you ask me, it should be the default behavior of Chocolatey to remove the old version when a package gets updated. Every other package manager on Linux (apt-get, yum, opkg, pacman) does that.\nPlease forgive me if I am a bit direct here, but I think the current design of Chocolatey to keep older package versions is neither useful nor appropriate. Why don\u2019t follow the design of well established package managers that have already millions of (mostly satisfied) users?\nMaybe some people think here that it\u2019s sometimes needed to keep for example older versions of the same Ruby package (for example 1.9 if their app is not compatible with 2.0). But it is the wrong approach, because doing so the idea of a package manager would be undermined. If you have for example two versions of exactly same package installed (let\u2019s say Ruby versions 1.9 and 2.0), the Ruby 1.9.x branch would never be automatically updated, because 2.0 is already newer. If the 1.9.x branch would get an important security update, you would miss it with the current design of Chocolatey, because version 2.0 is newer than 1.9.x.\nIt is far better to keep different packages for each maintained branch, e.g. ruby1.9 and ruby2.0. The same applies to candidates like php5.3, php5.4, and php5.5. Note that also this approach is already used in the Linux package manager world. The benefits of this: an user can choose which branch he would like to install and then that version automatically gets its updates.\nOr can you tell me what is the actual benefit to have these packages installed simultaneously?\n- CCleaner 4.08.4428\n- CCleaner 4.07.4369\n- CCleaner 4.06.4324\n- CCleaner 4.05.4250\n- CCleaner 4.04.4197\n- CCleaner 4.03.4151\n- CCleaner 4.02.4115.20130609\n- CCleaner 4.02.4115.20130601\n- CCleaner 4.02.4115\n- CCleaner 4.01.40933\n- Java Runtime (JRE) 7.0.45\n- Java Runtime (JRE) 7.0.40.20131007\n- Java Runtime (JRE) 7.0.40\n- Java Runtime (JRE) 7.0.25\n- Java Runtime (JRE) 7.0.21\n- Java Runtime (JRE) 7.0.17\n- Java Runtime (JRE) 7.0.15\n- Java Runtime (JRE) 7.0.11\n- Java Runtime (JRE) 7.0.9\n- Java Runtime (JRE) 7.0.5.1\n- Java Runtime (JRE) 7.0.5\n- Java Runtime (JRE) 6.0.31.1\n- Jave Runtime (JRE) 6.0.30\nPlease also read my other statements why the design to keep older versions is bad idea: https://github.com/chocolatey/chocolatey/issues/259#issuecomment-23863107\n. > are you sure Linux apt-get REMOVES old versions?\nYes, 100\u00a0% sure. :smile: \n\nI thought it only does that when you run 'apt-get autoremove\n\nNo, apt-get autoremove does something completely different: autoremove is used to remove packages that were automatically installed to satisfy dependencies for some package and that are no more needed.\n\nI think it's useful to have old versions locally so you can revert back to them and not rely on the remote source being online.\n\nExactly that is not possible with Chocolatey at the moment, because it downloads files every time when you install a package, even if exactly the same files were already downloaded previously. So it\u2019s not a \u201csmart\u201d download cache like apt-get has.\n. I would prefer a cache management like apt-get has. To download again already downloaded files like Chocolatey does is a bit inefficient, don\u2019t you think so?\n. @ferventcoder yes, good idea. I\u2019m going to do that.\n. This is not the right place to report issues with Chocolatey packages, it\u2019s only for Chocolatey itself. If you have a problem with a package or a question about it, use the contact maintainers link, or better, report the issue in the GitHub repo where the package source files are hosted.\nI opened an issue in the corresponding repository: https://github.com/TomOne/chocolatey-packages/issues/3. Refer to it and close this one.\n. Are you sure? Then why it does work on 0.9.8.23? Also the thunderbird package is affected by the same error.\nPerhaps also other packages are broken after the update to 0.9.8.24. But I\u2019ll try to debug the firefox package first.\n. Yes, it works. But what should I do in the meantime with the firefox and thunderbird packages until 0.9.8.25 becomes final? Firefox is one of the most popular packages on Chocolatey.org, so there are lots of users affected by this error. Should I use wget in the meantime to download the HTML file, or do you have a better idea?\n. Good\n. @ferventcoder wrote:\n\nIf the package is doing something more than it should be and/or not using the helpers, I fully expect those packages to break. And they should b/c they need to stay out of chocolatey's purview. Anything that reaches into chocolatey's internals and uses functions, whatever, that are not in the API will start to break hard once choco.exe comes out.\n\nSorry, but I don\u2019t agree with you here. First of all, the firefox package uses Chocolatey helpers whenever possible. And if I understood it right, it is the Get-ChocolateyWebFile helper which causes this package to break, so it is not the fault of the firefox package.\nAre you seriously saying that every package code outside Chocolatey\u2019s API (e.g regular PowerShell code) will start to break once Chocolatey gets rewritten in C#? Sorry, but that is an extremely unwise idea in my opinion. A package manager \u2013 especially on Windows \u2013 needs to support an entire scripting language in order to cover the various tasks needed to install software and get it to work. I hope that you won\u2019t drop regular PowerShell code support, otherwise Chocolatey will be a lot less useful.\n. @Redsandro: Good one :+1:\nFYI: Error 1603 is nasty. This error code is not only thrown when there is \u201ca problem with the system configuration\u201d, but also when an user attempts to install an MSI package that is already installed on the computer in the same version (of course when installed via the silent parameters). This happened quite often with Chocolatey packages, especially with the javaruntime package. Many users complained about the 1603 error until I figured out what the actual cause was.\nM$ has a strange conception as errors. Personally I wouldn\u2019t classify a re-installation of the same software version as error, would you? That and only confuses users. A re-installation of the same software version does not harm anything an is not a undesirable \u201cerror\u201d state.\n. :+1: for this. I also would find it much nicer if the original exe icon would be used.\nThat is also the reason why there exist different icons for different programs, isn\u2019t it? :smiley: \n. > I'm curious... why the \"shim\" versus mklink?\nBecause MS failed to correctly implement symlinks. To create symlinks on Windows requires administrator rights and attempting to run them from GUI (Explorer) fails with an error. In addition, they don\u2019t resolve paths correctly (e.g. paths to DLLs are not resolved correctly).\n. > For me, the advantage of the shim's is running the application's from the command line, so icons don't really matter for me. Personal preference I guess.\nI see shimgen as workaround for a broken symlink support in Windows. On Windows and on other operating systems, symlinks always inherit the icon of their target. IMHO that makes sense, doesn\u2019t it?\n. > I see. How does one create their own shims? We might have a use.\nShimGen is non-free proprietary software: https://raw.githubusercontent.com/chocolatey/chocolatey/master/src/tools/shimgen.license.txt\nI guess the Chocolatey devs won\u2019t tell how it exactly works, otherwise they would have open-sourced it. :smiley:\n. ~~Correct me if I\u2019m wrong, but could this have to do something with the recent force lowercasing the package IDs?~~\nSorry, wrong. I didn\u2019t read the issue carefully enough.\n. Is there any progress at this issue? It can be very annoying, for example when you do cup all and Chocolatey stops the complete process, even if only one package is broken.\n. This is actually a very important issue to solve. Stopping the entire process only because one package failed is very annoying and reduces UX.\n. @Redsandro, I agree with you.\n@rismoney, it\u2019s OK if you want it to stop on error, but it should not be the default behaviour. I think Redsandro already explained the reasons clearly enough.\nAnother reason: packages are usually separate and independent objects (except dependencies). Why would you like to stop the entire process, only because a package failed to install, but has nothing to do with the other packages?\nFor comparison: A program on your computer has a small, but not serious bug that affects a certain functionality of that program. And only because of this bug you want that this program stops working completely and terminate with an error message? I think there\u2019s only a minority of users who would want such a behaviour. It\u2019s useful for debugging, but not for normal work. We can\u2019t always have an everything or nothing philosophy. :smile: \nAnd by the way, nobody prevents you from stopping the process manually if you encounter an error.\n. @Redsandro good arguments. :+1: \n@rismoney:\n\nThe systems i manage are critical and must not leave things in barney.\n\nNothing prevents you from investigating possible errors after the working packages have been installed/updated. This would also save time for you: If for example multiple packages you want to install/update are broken, with the current behaviour you will only notice the first error. Then you have to fix it, run cup all again, fix the next broken package, run cup all again, fix the next broken package and so on. This is not something I call comfortable. Therefore it reduces UX like I wrote before.\n. On this subject there has been a lot of progress.\nTake a look here: https://groups.google.com/forum/#!topic/chocolatey/ua_yqZFtZps\nWe have come to the conclusion that localisation for packages must be handled by the package maintainers and not by chocolatey itself, because for every package there is a different method to obtain localisation. So it isn\u2019t even possible to implement it in chocolatey.\n. I think it\u2019s not a good design to keep the older versions of packages, because it has several drawbacks:\n- It wastes disk space, especially when there are big files inside the package folder in C:\\Chocolatey\\lib.\n- The cuninst command would only uninstall the latest installed version of a package and leaving behind the other versions. That is not how an uninstall command is intended for other package managers.\n- Causes issues with applications that store data inside the C:\\Chocolatey\\lib\\somepackage.version folder. If a package gets updated, these data rests in the older version folder. Of course this data can be manually moved to the new version folder or moved with some lines in the ps1-file, but this makes things only more complicated than they should be.\n- Leaving multiple versions of a package on the machine would make sense only in one case: If the newer version is not backwards compatible with the older version. The package managers for Linux solve this with different packages for the older and newer version, for example one for Python 2.x and one for Python 3.x, the same for Ruby 1.9.x and Ruby 2.x. I think that\u2019s a far better solution.\n- If an user keeps two versions of one package on his machine, let\u2019s say Ruby 1.9.3 and Ruby 2.0, the older version doesn\u2019t get updated automatically, because it only updates to the newest version starting from 2.0. If for example a bugfix for Ruby 1.9.3 gets released, with the current chocolatey package design the user doesn\u2019t get an update for it unless he does it manually. That\u2019s bad. With the design of the Linux package managers this issue does not appear.\n- The paths to files inside a chocolatey package folder (C:\\Chocolatey\\lib\\somepackage.someversion\\tools\\\u2026) is complicated. Even if the executables from a package get covered by the PATH variable it can be sometimes necessary to manually input a path into the commandline or open it in a file manager. Then the user has to remember which version of the package he wants. Also when using scripts it is not good when the package folder always changes. Better would be the path C:\\Chocolatey\\lib\\somepackage for the related files, without the version.\n- Of course there can be a small number of folks which absolutely wants to keep multiple versions of a package at the same time, even if they are backwards compatible. But remember, Chocolatey is a package manager, not a backup solution. If one absolutely wants to keep several versions, he should consider making manual backups of the affected packages. But for most people keeping all the versions of packages is totally unnecessary and has all the disadvantages I specified before. Package managers for Linux handle it like this. I never heard that somebody complained about that. :)\nLet\u2019s get to the advantages of dropping the current design of keeping multiple package versions. Some of them can be derived from the previous text:\n- Uses less disk space.\n- The cuninst command would work like expected and how it already works in other package managers.\n- No loss of user data when a package gets updated.\n- Would make binroot obsolete, because the paths to package folders won\u2019t differ on an update.\n- Less complexity and therefore better conformity with the KISS principle.\nNow I hope I could convince you that this design is better. :)\n. > What I expected: flashplayer derivatives should've been removed, Atom should've copied old user data and then also be removed.\nI have another less complicated idea. Why not simply leave off the package version from the package folder name? That would make things a lot easier to handle. Then no user data copying would be needed. I already explained some other benefits that this approach in my previous comment: https://github.com/chocolatey/chocolatey/issues/259#issuecomment-23863107\nChocolatey has a really weird design in this area that I\u2019ve never seen at any other package manager. Do you really think that it is so common that one wants to keep all package versions ever installed? In most cases that isn\u2019t even possible. For example, most of the software that comes with an installer will overwrite the previous version by default. Therefore having a flashplayerplugin.13.0 and a flashplayerplugin14.0 folder is not only confusing, but also semantically incorrect, because in that case only Flash Player 14.0 would be installed on the system.\nI want to ask you how often one would really need to have multiple versions of the same package installed at the same time. The only case where that would be 100 % possible would be portable packages. But even then it would not be easy to implement a good way to handle this. I\u2019ve worked with Linux for several years now, where package managers are an essential part of the system and I never had the need to install multiple versions of the same package at the same time. I also never heard of one that would need that and nobody who complained about the fact that upgrading a package overwrites the previous version.\n@ferventcoder, please consider a better design for the rewrite of Chocolatey as I already described in https://github.com/chocolatey/chocolatey/issues/259#issuecomment-23863107\n. Yes, that\u2019s the most straightforward solution, isn\u2019t it?\n. What are the other reasons to stop using nuget.exe?\nIt should be possible to modify the source code of nuget.exe to get nice and clean UTF-8 files. Unfortunately I\u2019m not able to do that, because I\u2019m not familiar with C#.\nBut also the gallery on nuget.org would benefit from such an improvement. They have the same issue with UTF-8 and ANSI.\n. That could be a workaround, but I read on multiple coding guidelines that HTML entities should be avoided, except for non distinguishable characters, e. g. &nbsp; or &#x202F;. HTML entities make the code harder to read and to maintain.\nBut it seems that newer versions of NuGet use UTF-8 without BOM for the nuspec when a package gets built. I tested it a few weeks ago. A good improvement, even if I would like if they used UTF-8 starting from their first releases. I think other character encodings are obsolete in most cases since the existence of Unicode.\n. I have bad news for you: NuGet doesn\u2019t even have a full support for HTML/XML entities. If you use an unsupported entity, the cpack command will fail and output an error: \u2026 not declared entity \u2026 Line x, Position y\nHere are some examples of commonly used entities:\nSupported by NuGet:\n- > &gt;\n- < &lt;\n- & &amp;\n- Probably all decimal and hexadecimal entities, e. g. &#190; or &#x00AE;\nNot supported by NuGet (outputs the error described above):\n- Most named entities, e. g. &copy; &reg; &micro; &trade; and many more.\nWell, I don\u2019t think it\u2019s very comfortable to use the decimal or hexadecimal notation.\n. I\u2019m very sorry. I made a few mistakes here, mostly because of my inadequate knowledge about character encodings. Therefore I\u2019ve done some research to improve it. ;)\nSo here\u2019s the correction:\n- ANSI doesn\u2019t refer to a character encoding, it stands for American National Standards Institute. Microsoft and the Windows community uses ANSI as incorrect term for the Windows-1252 character encoding, see https://en.wikipedia.org/wiki/Windows-1252 as reference. Even popular text editors like Notepad++ use ANSI incorrectly.\n- The cpack command does output nuspec files in UTF-8. To be more precise, it\u2019s UTF-8 without a BOM. As you probably know, a character encoding can\u2019t be determined easily unless there\u2019s a BOM. Text editors have to determine the encoding with some character detection stuff. They basically look if a character written in the text \u201clooks weird\u201d with a certain encoding, then they switch to the appropriate encoding. Of course this method is not 100 % reliable. If a text for example only contains ASCII characters, a text editor cannot determine the encoding, because UTF-8 has exactly the same character encoding table as ASCII, plus the Unicode table of course.\n  NuGet assumes that nuspec files are encoded in UTF-8 without a BOM. Therefore, if a package maintainer uses another character encoding like Windows-1252, some characters (like the famous \u00a9 or \u03bc) will be displayed incorrectly on chocolatey.org.\nBut fortunately there\u2019s a simple solution for that. We must make sure that package maintainers never use another encoding than UTF-8 without BOM. They should configure their editors to handle that encoding properly. Note that UTF-8 without BOM is the recommended character encoding for HTML pages and fortunately many websites use it, including nuget.org and chocolatey.org. So if web developers are able to set the character encoding properly, why not also chocolatey package maintainers?\nThe thing with HTML/XML entities is definitely more complicated than setting the correct encoding, so I would leave the entities out.\n@ferventcoder, this character encoding stuff would be another rule that should be added to the Wiki. I would be happy to do that.\n. You\u2019re using Geany. That\u2019s cool. :+1: \nNote that \u201cUTF-8\u201d in Geany means \u201cUTF-8 without BOM\u201d which is fine, while for example Notepad++ displays \u201cUTF-8\u201d when the file contains a BOM. In Notepad++, UTF-8 without BOM is incorrectly called \u201cANSI as UTF-8\u201d. That\u2019s a weird terminology.\nIt doesn\u2019t surprise me that there is so much confusion about character encodings, mostly thanks to Microsoft. :-1: \nBut at least some Linux- and cross-platform editors like Geany chose the right terminology. :)\n. Microsoft itself accepted that ANSI is an inappropriate term, see https://en.wikipedia.org/wiki/Windows_code_page#ANSI_code_page. So that term shouldn\u2019t be used anymore.\nAnd by the way, there are already bug reports for Notepad++ to correct these incorrect terms:\n- http://sourceforge.net/p/notepad-plus/bugs/4095/\n- http://sourceforge.net/p/notepad-plus/bugs/3263/\nIf would really like if the Notepad++ devs fix these annoying incorrect and misleading terms, so please post your comments into these bug reports if you can, so we can give these bugs finally the attention they deserve.\n. I wrote this paragraph regarding the character encoding. As soon as you approve it, I\u2019ll add it to the Creating Packages section in the Wiki, right after Rules to be observed before publishing packages:\nCharacter encoding\n\nUse the UTF-8 character encoding for the .nuspec and .ps1 files. If you don\u2019t respect this rule, some characters are not displayed correctly in the Gallery on chocolatey.org, because the Gallery assumes UTF-8.\nDon\u2019t save your nuspec files with a byte order mark (BOM). A BOM is neither required nor recommended for UTF-8, because it can lead to several issues.\nUnfortunately, PowerShell scripts need to be saved in UTF-8 with BOM, otherwise PowerShell doesn\u2019t recognize the script as UTF-8 and as a result, it processes non ASCII characters incorrectly. So you have to break the previous rule here, but always keep in mind that a BOM for UTF-8 is not recommended by the Unicode standard.\nDon\u2019t use the default Windows Editor. In addition to its lack of features, it can\u2019t even save UTF-8 files without BOM.\nNote that there\u2019s a lot of confusion in the world of character encodings: For example, ANSI is an incorrect term for the internal Windows character encodings, e.\u00a0g. Windows-1252. But you should not use this encoding family anyway. In addition, Notepad++ incorrectly uses the term ANSI as UTF-8 for UTF-8 encoded files without a BOM. If you select UTF-8 in Notepad++, it means UTF-8 with BOM. Therefore Notepad++ must show ANSI as UTF-8 in the statusbar.\nYou have to specify the UTF-8 encoding in the first line of your nuspec files. Then the first line looks like this: <?xml version=\"1.0\" encoding=\"utf-8\"?>.\n. Amen :)\n. The anchor is generated automatically as @ferventcoder already mentioned: https://github.com/chocolatey/chocolatey/wiki/CreatePackages#character-encoding\n\nDamn, I just found out that PowerShell doesn\u2019t even recognize UTF-8 files without BOM. It uses Microsoft\u2019s ancient Windows-1252 encoding by default. So we have to save PowerShell scripts in UTF-8 with BOM to work correctly. Sorry Microsoft, but we live in 2013. Nobody wants your stupid non-standardized encodings! :-1:\n. @Redsandro, you are right, improve that section for people who have dyslexia. :)\n. UTF-8 and the byte order mark are two different things. A BOM is a special character at the beginning of a file which signals the endianness (byte order of a text file). Because the endianness has absolutely no meaning in UTF-8, it is not recommended to use a BOM there, see https://en.wikipedia.org/wiki/Byte_order_mark.\nBut there are some programs out there which don\u2019t follow this standard, e. g. PowerShell and the Windows Editor. As you can see, Microsoft is retarded when it comes to this topic. It reminds me a bit of the story with IE, which web developers like so much. Haha. ;)\n. Wrong, not the \u201cno BOM\u201d causes issues, Microsoft causes them by ignoring standards!\nA gist is not necessary to show you PowerShell\u2019s behavior. PowerShell simply assumes that all PowerShell scripts are in that crappy Windows-1252 encoding unless there\u2019s a BOM. Then it simply reads the character addresses from the file and shows them if they were Windows-1252. Example:\ntest.ps1, encoded in UTF-8 without BOM:\nPowerShell\nWrite-Host \"\u03b1\u03b2\u03b3 \u00a9 \u2122 \u03a9\u03a3\"\nOutput in Powershell\nPowerShell\nIn C:\\Users\\Someuser\\test.ps1:1 Character:31\n+ Write-Host \"\u00ce\u00b1\u00ce\u00b2\u00ce\u00b3 \u00c2\u00a9 \u00e2\u201e\u00a2 \u00ce\u00a9\u00ce\u00a3\"\n+                               ~\nThe string has no terminator: \".\n    + CategoryInfo          : ParserError: (:) [], ParseException\n    + FullyQualifiedErrorId : TerminatorExpectedAtEndOfString\nI think the character encoding section in the Wiki is fine. It clearly explains what a person should do and clarifies the confusion that Microsoft has created. If someone doesn\u2019t understand this, he\u2019s probably retarded and shouldn\u2019t create packages. ;)\n. And by the way, all modern Linux distributions use UTF-8 without BOM by default. The W3C doesn\u2019t recommend BOMs for the web.\nBOMs for UTF-8 really cause issues: https://en.wikipedia.org/wiki/Byte_order_mark#UTF-8\nSome issues that I\u2019ve experienced myself when using UTF-8 with a BOM:\n- .gitignore files don\u2019t work properly. The expression in the first line fails because the BOM character stands in the way.\n- A colleague created a small node.js script which merges multiple CSV files. The output file contained multiple BOM characters, even in the middle of a line. Then my colleague imported that file into a database using phpMyAdmin. Then he experienced database inconsistencies. It took him over an hour until he found out that the BOMs were causing that issue.\nWell, Microsoft seems to insist on BOMs when using UTF-8. But only because Chocolatey is a Windows software, it doesn\u2019t mean that it has to adapt Microsoft\u2019s inability to follow standards and recommendations, especially when it comes to such fundamental things like character encoding.\nI read that from multiple sources that Microsoft is not very open to any suggestions. For example, they keep ignoring bug reports and feature requests for Internet Explorer and automatically delete them after about 48 hours. What kind of weird strategy is this? Are they planning their downfall of their company? Well, at least for IE it seems to work, when I look on the progression of the market share of Internet Explorer. :grinning:\n. > I mostly ignore things I can't change and change the things I can change.\nSounds pretty clear to me: We make chocolatey better by leaving the character encoding section as it is and let IE die. :grinning:\nSorry if I mention it, but your wisdom phrase has an inconsistency: How can you be sure that you can\u2019t change something? If you take a closer look at history, you will notice great people who have seemingly done the impossible. But today we know that it wasn\u2019t impossible. Thanks to this kind of people we now have democracy, women's suffrage and no more slavery. At least in the countries where we live.\nedit:\nsorry, I meant something, not anything ;)\n. Of course :) Simply UTF-8 without BOM for *.nuspec files and UTF-8 with BOM for PowerShell scripts.\n. Screenshot of Notepad++ 6.5:\n\nNotepad++ is inconsistent, that\u2019s even worse.\nIt\u2019s also mentioned in these two bug reports:\n- http://sourceforge.net/p/notepad-plus/bugs/4095/\n- http://sourceforge.net/p/notepad-plus/bugs/3263/\n. @Redsandro, I think you misunderstood something here. When you open a file with no special characters, the encoding cannot be determined by the text editor. Then it depends on the settings of the editor which encoding is assumed. In Notepad++, you can override this setting if you tick \u201cApply to opened ANSI files\u201d like in the screenshot above, which will assume UTF-8 for every file that has no special characters and no BOM. That\u2019s the standard for every Linux editor I know, and it\u2019s a good standard. :+1: \n. Sorry, I meant \u201cwhich will assume UTF-8 for every file that has no non-ASCII characters and no BOM.\u201d\n. I updated the title of this issue, because the old one was misleading and wrong.\nNow I think we have every information needed to fix the character encoding problem. If you have no further doubts or questions, this issue can be closed.\n. Good suggestions, except this one:\n\nEither:\nDo not use non-ASCII characters.\n\nThis is not a solution of the character encoding problem, only an amateurish circumvention for lazy people. I\u2019m very annoyed of all these redcutions to typographically incorrect ASCII characters, like e' instead of \u00e8, ue instead of \u00fc, ss instead of \u00df or (c) instead of \u00a9.\nI expect from an advanced computer user, programmer or package maintainer to know the important things about character encodings, or at least to be open to learn it. People that don\u2019t like to read and follow rules, guidelines and standards, should never ever create and publish packages. Such people are harmful for the community and make the world to a worse place.\nDon\u2019t we all want packages with a good quality? Isn\u2019t it worth to spend a few more minutes or a bit more to read, understand and follow the rules and guidelines of a project?\n. Doesn\u2019t that mean the same as \u201cdo not use\u201d, just with other words? I definitely don\u2019t like this recommendation. It\u2019s like sweeping the dirt under the carpet. :-1: Seriously, what is so hard about reading a few lines and changing the character encoding settings of the editor if necessary?\nI\u2019ll make a pull request so that the templates comply with these recommendations.\n. OK, but I still don\u2019t agree with putting\n\nEither:\n- Do not use non-ASCII characters.\n\ninto the wiki. I thought the idea is to write less (but sensible) guidelines, not more. I\u2019ll try to explain why that \u201cnon-ASCII characters\u201d guidelines does not make sense, using a little story (inspired by https://github.com/chocolatey/chocolatey/wiki/ChocolateyStory)\nThere are two guys, Bob and Richard. Both are Windows users and discovered Chocolatey a few moths ago. Now they also want to maintain some packages of their favourite software. \nRichard doesn\u2019t care much about guidelines and rules, he starts immediately with creating packages and doesn\u2019t read the Chocolatey wiki. He uses the Windows Editor to edit his nuspec files and saves them with the default character encoding (Micromisleadingsoft\u00ae ANSI\u2122). But in some of his packages there are characters like \u00a9, \u00ae and en dashes. They get displayed with ? signs in the Chocolatey Gallery, but he doesn\u2019t even notice it. After a few weeks he coincidentally notices this problem, but he does not care.\nUnlike Richard, Bob is assiduous. He reads the Create Packages page and learns that nuspec files must be saved as UTF-8 without BOM. He didn\u2019t know much about character encodings before, but he configures his Notepad++ editor to save files as UTF-8 without BOM by default. Now he won\u2019t have any problems with character encodings in nuspec files and enjoys creating packages.\nUnfortunately there are many Richard-like package maintainers on Chocolatey.org. For them, a suggestion in the wiki like \u201cDo not use non-ASCII characters.\u201d wouldn\u2019t have any effect. And for people like Bob, such a suggestion would be totally superfluous, because the solution to set the correct character encoding in the editor once is certainly less complicated than having to remember each time when editing a nuspec to not use non-ASCII characters.\nDon\u2019t be a Richard. :smile: \n. @Redsandro: I changed the character encoding section as you suggested, but left your recommendation about ASCII out. I hope that my story about Bob and Richard could convince you. :smile: \n@gep13, a package that configures text editors with proper character encodings would be interesting. I\u2019ve made some research about text editors on Windows and character encodings. We could use it to determine which editor would need a \u201cfix\u201d:\n- Notepad++ uses UTF-8 without BOM as default encoding since a few releases. But if you upgrade from older versions, it continues using Windows-1252 (incorrectly called ANSI) as default encoding.\n- Notepad2 uses that stupid \u201cANSI\u201d by default. :-1: \n- PSPad too\n- Sublime Text 2 and 3 use UTF-8 without BOM as default encoding.\n- Geany: UTF-8 without BOM by default. :+1:\n- Gedit for Windows too. \n- Brackets too.\n- Vim/Gvim isn\u2019t even able to to show most Unicode characters. But I think that\u2019s a Windows related issue. In addition, GVim/Vim on Windows doesn\u2019t use UTF-8 as default character encoding. But Vim on Linux shows all Unicode characters provided by font and uses UTF-8 without BOM by default.\nAs you can see, most cross-platform editors (except Vim) use UTF-8 without BOM by default. Unfortunately this means that most of the Windows-only community adopted Microsoft\u2019s retarded standards policy. It\u2019s always annoying when a stubborn company insists on obsolete standards and mostly ignores user feedback and bug reports. If someone claims Microsoft is innovative, I will point the finger at him and laugh at him. Innovation can never coexist together with such an ultraconservative and ignorant behaviour.\nI\u2019m sorry that I criticize Microsoft with these words. But of course my main interest here is to improve Chocolatey. :)\n. You\u2019ve probably never looked at Debian\u2019s guidelines for package maintainers: http://www.debian.org/doc/manuals/maint-guide/\nThe fact is: being a package maintainer requires great responsibility. Therefore one must spend some time to read rules and guidelines of the community. If one does not like to do so, he should never ever join a community.\n\nMeet Hank. Always in a hurry. Dyslexic. Hates reading. Hates editors. Hates Windows. Doesn't care about other people's mess, but cares about end user quality.\n\nThat\u2019s a paradoxical behaviour. A guy who cares about end user quality, but has all the negative character properties you described? Very unlikely if you ask me. I\u2019m glad that I\u2019ve never met such a person. :smile: \n. By the way, if Debian\u2019s documentation would scare away potential package maintainers, then why is it so popular? Why are there so many Debian package maintainers?\nDon\u2019t tell me that almost all Windows users are like Richard or Hank. If that would be true, I would immediately remove Windows from all computers I have access to and throw my Windows license out the window. :smile:\n. OK, then another try: Take a look at Arch Linux\u2019 guidelines: https://wiki.archlinux.org/index.php/Creating_Packages\nDon\u2019t tell me that there are too few packages for Arch Linux. :smile: \nYes, unlike the Linux package world, there are many Richard-like Chocolatey package maintainers. The reasons for that are quite obvious:\n- Until now, Chocolatey does not have a documentation that covers all important topics. That\u2019s understandable, because it\u2019s a relatively young project.\n- There is no moderation or inspection of new packages by experienced maintainers. Imagine you live in a world without police. It\u2019s obvious that such a world laws wouldn\u2019t be followed by most people, which would end in a total chaos.\nAnd remember, we\u2019re talking about guidelines for package maintainers here, not for average Windows users. I still don\u2019t understand why you insist on recommending to use obsolete character encodings, just to support the laziness. It\u2019s so easy to change that setting in the editor. I don\u2019t think that Chocolatey package maintainers are idiots.\nMaintainers also need to know about PowerShell if they want to create packages that do more than just invoking the Install-ChocolateyPackage helper function. Isn\u2019t that a lot more work than changing the character encoding setting in the editor to UTF-8?\n. Hm, then why did the NuGet developers decide to use UTF-8? Aren\u2019t some of them Microsoft employees? :smile:\n\nYou are seriously comparing this to total chaos?\n\nYou\u2019re misinterpreting this. I didn\u2019t talk just about the character encoding problem, it\u2019s just a scenario if no one would respect rules.\nAnother example: Internet Explorer is the default browser in Windows. Why do most people make the effort and install an alternative browser? Internet Explorer will just work fine for them, if they can live without proper HTML5/CSS3 support. :laughing:\nIf you like simplicity, then go forth and use Internet Explorer. We must accept Microsoft\u2019s laws, otherwise we will hurt us. :smile: \nI\u2019m sorry for that irony, but your arguments arguments make little sense to me.\n. > Stay away from IE! :smile:\nYes. Friends don\u2019t let friends use Internet Explorer. But IE isn\u2019t the only Microsoft stuff I don\u2019t like. I\u2019m quite happy that their server software with their locked in ecosystem (Windows Server, ASP/ASP.NET, IIS) is losing market share to Linux/OSS solutions. :smile: Let\u2019s build a better an Internet that belongs to everyone, using openness and innovation. :+1: \nYou\u2019re right, let\u2019s stop that discussion here. So here\u2019s a short summary of the results:\n- Recommendation for maintainers who read the wiki: UTF-8.\n- If maintainers don\u2019t use UTF-8, no problem as long as they don\u2019t use non-ASCII characters.\n- Incorrectly displayed characters on Chocolatey.org are not a serious problem as long as the affected packages are functional.\n. Of course.\n. :smile: \nI have an idea how we can solve this problem once and for all, even for Richards, Hanks and for people who have not a single clue about character encodings. As you know, there\u2019s much work on the computer that can be automated. Why not automate a character encoding conversion to the correct encodings before a package gets built? That conversion could be for example executed as first step of the cpack command.\nNow to the technical part: I already mentioned that character encoding detection is not a simple task. I requires a lot more than just a few lines of code. This document describes the approaches: http://www-archive.mozilla.org/projects/intl/UniversalCharsetDetection.html\nFor Python, there exists a nice tool to detect the character encoding: https://pypi.python.org/pypi/chardet/2.1.1\nI also discovered a PowerShell script that do the same: http://danspowershellstuff.blogspot.it/2012/02/get-file-encoding-even-if-no-byte-order.html.\nIf we were on Linux, these things would be a lot easier: using file -i to detect the character encoding and iconv to convert it.\n. > I don't think that will work. Once you save your file in standard (according to Windows) encoding, the character becomes unreadable when you reopen the file. But when I change encoding to utf-8, the char remains unreadable. I have to enter it again.\nI don\u2019t understand what you mean by that. Why would the characters become unreadable? Of course the character encoding conversion works. I tested it myself using Cygwin with the file -i and iconv method.\n. The nuspec files are never converted to ASCII, so that\u2019s not the problem here. The problem we need to solve is that some package maintainers save them in Windows-1252 instead of UTF-8.\n. > It sounds like cpack would be too late in the process to be helpful.\nWhy too late? When you for example execute the cpack command, the character encodings (Windows-1252, UCS-2 or other weird encodings) could be converted into UTF-8 first and then the cpack command could do the same like it already does now.\n. @Redsandro, you wrote this:\n\nOnce certain characters are \u25a1, like \u25a1Torrent \u25a12013 bitTorrent\u25a1, you can't get them back from a conversion.\nI just tried. If you save it directly and load it directly, there is no problem. But if you save your package to a git repository, load it on a different machine and then push it, it's already too late.\n\nI tried to reproduce this with Git, but the characters are all fine. This is the workflow I used:\n1. Save uTorrent.nuspec with Windows-1252 encoding, including an \u03bc character.\n2. Commit & push\n3. Git clone to another directory on the computer\n4. Convert the nuspec to UTF-8 without BOM\n5. Commit & push\n6. Git clone to another folder on the computer\n7. Open nuspec, the editor correctly recognises the file as UTF-8 and the \u03bc character gets displayed correctly\nSo here absolutely nothing gets lost. I used https://github.com/tomone/suggestions as my testing repository.\nBut if you try do download an already built package like \u03bcTorrent, unpack it and open the nuspec, your editor will probably show \ufffdTorrent. Also setting the encoding to Windows-1252 does not help. Building a package probably causes non-UTF-8 encodings to be destroyed. I don\u2019t know what there happens in the background, because I have only basic knowledge about character encodings.\nSo the only workflow where the character encoding would be destroyed is the following:\n1. Create a package, using some non-ASCII characters like \u00a9, \u00ae, \u03bc or \u2013.\n2. Save nuspec as Windows-1252\n3. Build package\n4. On every package update, take a previously built package (the nupkg), extract it, insert the new version and download links and then build it again.\nWell, this is a weird workflow, but of course we also must take this into account. What about to let the cpack command scan the nuspec file for weird characters caused by a broken encoding and stop in that case? A meaningful error message could be displayed and then the package maintainer must investigate that character encoding problem.\n-- edit --\ncorrected step 4 of the second workflow\n. I\u2019ve investigated this problem and now I know a possible solution and what there happens in the background:\n- Windows-1252 is an 8-bit character encoding, while ASCII is has 7-bit.\n- In UTF-8, characters encoded with a single byte between (hex) 80 and FF are invalid, but in Windows-1252 these addresses represent characters like \u00b5, \u00c4, \u00ae and \u00a9.\n- NuGet assumes UTF-8 and therefore replaces the invalid single-byte-characters between 80 and FF with the Unicode replacement character \ufffd (&#xfffd;), which is an option to handle this.\n- Therefore this replacement character shows up in the gallery for example in the \u03bcTorrent package\n- However, RFC 3629 states that implementations of the decoding algorithm must protect against decoding invalid sequences. The Unicode standard requires that decoders treat any invalid character sequence as an error condition.\n- If NuGet would follow RFC 3629 and throw an error when a maintainer attempts to package a Windows-1252 encoded nuspec with 80 to FF characters, we wouldn\u2019t have any problem.\n- Therefore, the best way to fix this issue is to implement such an error message on invalid UTF-8 characters directly in NuGet. Has anybody tested newer NuGet versions to see if this has been implemented already? If not, I would open an issue for this on CodePlex.\n- In the case the NuGet developers ignore this issue, I would really like if it gets implemented into Chocolatey\u2019s cpack, together with a character encoding detection and conversion to UTF-8.\n-- edit --\nSorry, it\u2019s (hex) 80 and not 7F.\n. Sorry, I forgot the solution for nuspecs whose Windows-1252 80 to FF characters have already been destroyed and replaced with \ufffd: cpack could detect if the \ufffd character is present in the nuspec, abort in that case and throw an error message. This message should mention that UTF-8 should be used and that \ufffd characters must be replaced with the correct characters, otherwise it won\u2019t proceed.\nLet\u2019s improve Chocolatey\u2019s package quality and ban those annoying \ufffd characters. :+1: \nI :heart: Unicode.\n. > Although I always thought cpack was just a reference plus some alternate configuration to the nuget pack binary.\nYes, it\u2019s a Windows Batch file in C:\\Chocolatey\\bin\\cpack.bat.\nBut if we really want to fix this character encoding problem, we need to add a control structure for it to the cpack command, since that is the only contact point between the package source files and Chocolatey before the package gets pushed. That\u2019s the only possibility, because there will always be people who don\u2019t read and respect rules and guidelines. And even if there would be some kind of moderation for Chocolatey packages, it\u2019s always better when something gets automated when it\u2019s possible, so it would be less work for the moderators.\nA good program doesn\u2019t let the user make mistakes if they can be detected, but also doesn\u2019t treat users like idiots. :smiley: I think this is one of the key rules of good usability.\n. I wrote a small Bash-script which automatically converts all *.nuspec files from other encodings to UTF-8. This could be very useful for package maintainers that have many packages and want to make sure that every character in their nuspecs gets displayed correctly in the Gallery.\nIn addition, the script removes BOMs and replaces any XML declaration with <?xml version=\"1.0\" encoding=\"utf-8\"?>, so that package maintainers can see more easily that the file is encoded as UTF-8.\nThis script requires a Bash interpreter (on Linux, Mac OS X and Windows with Cygwin) and the program \u201crecode\u201d to perform the character encoding conversion. Recode is not installed by default in Cygwin and in most Linux distributions, but it\u2019s quite easy to install it.\n. Of course not every Windows user has Cygwin installed. I wrote this script in Bash because I like cross-platform solutions. Personally I don\u2019t like programming/scripting languages which work only on one platform, especially when that platform is a non-free proprietary operating system.\nNobody is forced to use this script and nothing prevents anybody from writing a similar script in PowerShell. :smiley: \n. Woah, there\u2019s a PowerShell implementation for Linux: http://pash.sourceforge.net/ :smile: \n. > I thought you were working towards a solution for all packagers from which there is no escape, preferably without them even knowing.\nYes, that would be a better solution. First I looked how such a script could be written in PowerShell, but I discovered that it\u2019s a lot more complicated (because you have to write the non-trivial character encoding recognition from scratch) and my PowerShell skills aren\u2019t good enough.\n. I have a new idea. Let me make a summary of a possible approach that would fix this issue:\nThe cpack command should perform the following checks before calling NuGet\u2019s pack command:\n- Check if the affected *.nuspec file is not encoded as UTF-8.\n- Check if an UTF-8 BOM is present.\n- Check if one or more Unicode replacement characters (\ufffd) are present in the *.nuspec file.\nIf one of the checks above is true, cpack should throw an exception and inform the package maintainer that something is wrong, i.e. that it\u2019s needed to convert the file to UTF-8. Then the maintainer could fix it and execute cpack again.\nI think this approach is much better than additional automatic charset conversion because of the following reasons:\n- It has a better learning effect for maintainers. If an automatic conversion would be performed, some maintainers would continue to use legacy character encodings (such as Windows-1252), without ever knowing that UTF-8 would be the correct encoding.\n- Package maintainers would learn that an UTF-8 BOM is a bad thing.\n- To replace \ufffd with the correct characters, it would be necessary anyway to manually edit the *.nuspec file.\n- As I already mentioned, a character encoding recognition is never 100 % accurate in all cases. In some rare cases, an automatic character encoding conversion to UTF-8 could result in an output file with wrong characters.\nPlease let me know if you have doubts and if you would be interested in this solution.\n. @Redsandro, thanks for the hint. Unfortunately UTFCast Express only supports the ASCII, UTF-8, UTF-16 Little Endian, UTF-16 Big Endian encodings. It does not support 8-bit-encodings (e.g Windows-1252) which mostly cause our encoding issues at Chocolatey.\nI couldn\u2019t find any free program which performs a batch convert of text files and supports all relevant encodings. To develop one would be a nice FOSS project though, especially useful for Windows users/developers :smiley: \nSome time ago I created a small node.js script which performs this task for a folder with Chocolatey/NuGet package source files: https://github.com/TomOne/cpkg-utf8-conv\nIt is still very naive, but it works. Of course it is not suitable to automagically prevent the encoding issues we have, but it\u2019s nice tool to clean existing package repositories. At least I like it more than my previous Bash script for this task. :smile: \n. BTW, some time ago I came across EditorConfig. It\u2019s a plugin for many popular editors which automatically sets specific parameters for specific files in a repository. For example, you can write into the config file that all .nuspec files should be saved as UTF-8 and all .ps1 files as UTF-8 with BOM.\nI already use it for my packages repository: https://github.com/TomOne/chocolatey-packages/blob/master/.editorconfig\n@ferventcoder, it would be nice to integrate this also into the https://github.com/chocolatey/chocolateytemplates repository. So we can recommend to package maintainers to install the EditorConfig plugin and at least those folks won\u2019t create packages with inappropriate character encodings.\n. > But I'm not sure what good it would do since that is not a chocolatey packages template repository that they start from (if that makes sense).\nThat\u2019s right, it does not help much. But we could add to the character encoding section in the wiki that package maintainers should \u2013 if they use EditorConfig \u2013 copy the .editorconfig file into the root directory of the repo. Unfortunately I noticed that only the plugin for Sublime Text seems to support the charset property of EditorConfig, so only Sublime Text users could actually benefit from that. But note that Sublime Text is one of the most popular code editors nowadays, so it wouldn\u2019t be completely useless.\nBTW, the following section is a bit offtopic, but I think it could be interesting for us:\nIn my previous comments I mentioned that Notepad++ (the editor with the most downloads on Chocolatey.org) uses an incorrect term to denote \u201cUTF-8 without BOM\u201d, which I also wrote into the character encoding section in the wiki. I created a patch on the SourceForge Project site for Notepad++ to correct that term. Let\u2019s hope that the Notpad++ devs eventually respond to that issue, so that we could reduce a little bit the confusion about character encodings that seems to persist in the Microsoft/Windows community.\n. Because PowerShell uses deprecated character encodings (known as Windows codepages and often incorrectly called \u201cANSI\u201d) by default and a BOM is the only way to force UTF-8.\nSee https://github.com/chocolatey/chocolatey/wiki/CreatePackages#character-encoding for more information.\n. Good suggestion. This would also be more compliant to package managers for Linux. They also have a specific folder where they download their packages. It\u2019s called \u201cpackage cache\u201d. In apt-get for example, this cache can be cleared with apt-get clean. It would be great if we had such a command in chocolatey.\n. Perfect. :)\n. @ferventcoder, better also correct the Ketarin command in your blog: http://ferventcoder.com/archive/2013/01/03/chocolatey-automatic-packages.aspx\nThen this issue can be closed I think. :)\n. All right, I added it to the Wiki: https://github.com/chocolatey/chocolatey/wiki/CreatePackages#naming-your-package\nIt would be good to make known these guidelines. A tweet or/and a blog post would be perfect for that.\nAnother Question: What we do with the existing packages that do not follow these guidelines? To leave them so could confuse new package creators. A perfect solution for this issue are aliases: https://github.com/chocolatey/chocolatey.org/issues/25\n. I browsed through the Ubuntu package list and discovered that not all packages follow the guideline with the hyphens. This rule was clearly too strict, because if for example the name of an application contains many short words separated by spaces, the many hyphens would disturb.\nSo I changed this in the Wiki to also allow no spaces for the package id when the original app name contains spaces.\nDo you think it\u2019s a good idea to add a link to the Ubuntu package list or even from other distributions to the Naming your package section in the wiki? When for example someone makes a choco package and that package already exists as DEB/RPM package, it wouldn\u2019t be bad to pick the same package id. In that way Linux and Chocolatey users don\u2019t have to remember different package names.\n. But standards are not bad if they are sensible. ;) I know no other package format (except NuGet of course) which uses CamelCase for id.\n. Sorry, my mistake. ;)\n. Nice. :+1: I updated the wiki. Please check if I did everything correctly: https://github.com/chocolatey/chocolatey/wiki/ChocolateyFAQs#when-i-install-a-portable-app-like-imagemagicktool-how-is-it-on-my-path-without-littering-my-path\n. Thanks. Does that mean that I can add it to the Wiki?\nHmmm, I find it strange that every GitHub user can edit every Wiki without any moderation or inspection by the project members. This is in need of improvement.\n. @ferventcoder: OK, but what about my question?\n. I added it to the wiki: https://github.com/chocolatey/chocolatey/wiki/CreatePackages#package-icon-guidelines\n. Good, can you add this to the Wiki? Does it make sense to provide separate Ketarin templates for https://github.com/chocolatey/chocolateytemplates/tree/master/_templates/chocolateyauto and https://github.com/chocolatey/chocolateytemplates/tree/master/_templates/chocolateyauto3?\n. The term \u201cupdate\u201d is commonly used for bug fixes or minor software enhancements, while \u201cupgrade\u201d refers to more extensive feature enhancements. An \u201cupgrade\u201d generally leads to an increased major version number.\nTherefore these two terms are even not perfectly suitable like they are intended for apt-get.\nAbout two weeks ago I switched from Ubuntu to Arch Linux, a highly customizable Linux distribution with a rolling release policy and fast package updates (unlike Ubuntu or Debian, which is ultra-conservative in this area).\nArch Linux has its own package manager called pacman. Pacman uses a completely different syntax than apt-get, for example:\nBash\npacman -S somepackage  # Installs or updates the specified package. The \u201cS\u201d stands for \u201csynchronizing\u201c with the repository. That\u2019s a very nice terminology if you ask me and more suitable than update/upgrade.\npacman -Sy  # update local database (package index), similar to \u2018apt-get update\u2019\npacman -Syu  # complete update of all packages, equivalent to \u2018apt-get update && apt-get dist-upgrade\u2019\nAs you can see, the pacman commands are shorter than their apt-get equivalents. If we ever need to change command syntax of chocolatey, my vote is for a pacman-like syntax. :)\n. If you ask me, a local package database (same as package index) should have a high priority for every package management system. It\u2019s a pity that the NuGet devs didn\u2019t already implement it.\nMicrosoft isn\u2019t known for good software in this area. I\u2019m not sure if Windows Update can be seen as package management, but it\u2019s a fact that it\u2019s extremely slow, inefficient and badly designed. For example, it doesn\u2019t install all required updates at once, but it installs some updates, then it needs to reboot, then the next updates, reboot again and so on. That\u2019s ridiculous. ;) If for example an update is superseded by another update, it installs first the old update and then the update which superseded the previous update. Score one for inefficiency. :-1: It looks that Windows Update also has no package (update) index.\n. Done.\n. @ferventcoder: I\u2019ve seen you use Google Analytics on chocolatey.org. It would be very interesting to know how many visitors use IE8 or lower. Then we have facts.\n. Thanks for providing these statistics. IE8 usage is low, as I had expected. But even in 8 months when Windows XP support ends it won\u2019t be zero. :-1: \nHowever, I found a very simple solution for a fallback to PNG if a browser doesn\u2019t support SVG using the JavaScript plugin SVGeezy. Then this simple JavaScript code will replace all SVGs with their PNG equivalents:\nJavaScript\nsvgeezy.init(false, 'png');\nThis assumes of course that in the same directory in addition to the SVG file there must exist the equivalent PNG file (e. g. http://example.com/icon.svg and http://example.com/icon.png). But that\u2019s not a problem at all, we just need to mention that in the icon guidelines in the wiki.\nI would be very pleased to make a pull request for chocolatey.org to integrate this fallback. @ferventcoder, is that OK for you?\n. Tiny. Only 1.158 KB for the minified version, see the code: https://github.com/benhowdle89/svgeezy/blob/master/svgeezy.min.js\n. Great. I have good news for you. We don\u2019t even need SVGeezy. This plugin was designed for folks who don\u2019t already have Mondernizr and jQuery integrated in their pages, but chocolatey.org has them integrated. So Modernizr can be used for feature detection and jQuery for DOM manupulation and the code becomes even simpler, without the need of SVGeezy:\nJavaScript\nif (!Modernizr.svg) {\n    $('img[src$=\".svg\"]').each(function()\n    {\n        $(this).attr('src', $(this).attr('src').replace('.svg', '.png'));\n    });\n}\nI found this code on David Bushell\u2019s blog, a guy who seems to be very interested into SVG. :+1: \nIn addition I played around with SVGZ. That is the gzipped format of SVG. SVG is highly compressible, because it contains a lot of redundant data (like HTML). I was very curious about the filesizes of SVG, SVGZ and PNG in comparison. Therefore I generated some files:\nFile size in bytes, filename\n1141, git.svg\n782, git-opt.svg\n437, git-opt.svgz\n1699, git-opt-128px.png\n868, git-opt-48px.png\n56431, mixxx.svg\n16839, mixxx-opt.svg\n2357, mixxx-opt.svgz\n5278, mixxx-opt-128px.png\n1674, mixxx-opt-48px.png\n28718, pyhoca-gui.svg\n12009, pyhoca-gui-opt.svg\n3190, pyhoca-gui-opt.svgz\n16306, pyhoca-gui-opt-128px.png\n4067, pyhoca-gui-opt-48px.png\nDescription of these files with the example of git:\n- git.svg = original SVG file\n- git-opt-svg = optimized SVG file with SVGO, a Node.js tool\n- git-opt.svgz = gzip compressed optimized SVG file\n- git-opt-128px.png = equivalent raster image with 128px, optimized with optipng -o7\n- git-opt-48px.png = equivalent raster image with 48px, optimized with optipng -o7\nAs you can see, SVGZ is clearly smaller than the raster version with 128px, and in some cases even smaller than the 48px version. SVGZ is a very interesting format, perfectly suitable to use it as package icons on chocolatey.org.\nHowever, SVGZ cannot be directly integrated in websites without an additional step. The web server must be configured to tell the browser \u201chey this is gzipped, you\u2019ll need to decompress this\u201d.\nThis can be done in Apache by adding this to the .htaccess file:\n```\nSVG\nAddType image/svg+xml .svg .svgz\nAddEncoding x-gzip .svgz\n```\nI don\u2019t know how to configure IIS to handle SVGZ properly, but you certainly know it. It would be great if you could test it.\n. Yes, http://semver.org/ is nice, but it only refers to the versioning of an application itself, not the distiction between upstream and package version. Therefore it does not help here.\nI like the epoch part in Debian package versioning. It\u2019s a very good idea, because it allows a trouble-free continuation of the version, even when the version policy changes or when there was a mistake in versioning.\nThe versioning of Linux packages is a lot better than the one of NuGet. I regret that they have not taken a good example of them. It is not an easy task to change something fundamental like this later.\n. I just don\u2019t see any sensible reason why a package management system should force to mix together the version of the packaged software with package revisions without proper separator characters. In fact I don\u2019t know any other package manager than NuGet/Chocolatey which forces maintainers to do this.\nIf for example a Chocolatey package has the version 1.10.3.20140327 I would naturally understand from it that it is also the version of the packaged software. Of course folks can learn that if the fourth segment is an ISO 8601 date, it is a package fix notation, but it is not obvious. Better would be 1.10.3-20140327, with a hyphen as separator (like used by Debian and Arch Linux), so that people understand that the part after a hyphen belongs to the package version fix notation.\nThe current restrictive versioning policy of NuGet/Chocolatey has also other issues:\n- What if the software itself already uses four dot-separated segments for its version and you need to fix the package?\n  If you have for example a software version 2.5.8.1, you are forced to alter the last segment, so the original software version information gets destroyed: 2.5.8.20140327. Then, for all the following packages of version 2.5.8.x, you are forced to use the current date as last segment, even if the affected package does not actually fix a previous package revision. You would have to wait until the packaged software gets released with version 2.5.9.x to be able to drop the date in the last segment and use the real software version again. So here an essential information is removed just because of a senseless restriction.\n- What if you have a package with version 2.5.8.20140327 and you need to fix it again on the same day? Do you use the date of the following day? That\u2019s not semantically correct. :smile:\n- What if you have released a package and made a mistake in the package version, e.g. 2.5.6 instead of 2.4.6? NuGet / Chocolatey provides no solution for this, except unlisting a package. But what if already hundreds of people downloaded the package? If you unlist it and the software version 2.4.7 comes out, all users who have the package with the wrong 2.5.6 simply won\u2019t get an update. With something similar like Debian\u2019s epoch notation there wouldn\u2019t be this issue.\nAllowing only semver for package versions is not a good idea. Package managers must be more flexible to avoid these versioning issues.\n. @ferventcoder: Yes, but apart from distorting the original version information, the approach of modifying the already existent fourth segment doesn\u2019t solve the problem of an accidentally misspelled first, second or third segment. I described that problem already in my previous comment (in the third list item). It happened to the Dropbox package: http://chocolatey.org/packages/dropbox/9.20. Fortunately there were only 8 downloads of the misspelled version.\n\nIt's not perfect and yes we should look at enhancing stuff like that. Where do you see this in terms of priority?\n\nOf course Chocolatey also works with the current versioning scheme, but to become a robust and well established package management system, this is definitely an important issue to consider. I don\u2019t want to blame the NuGet developers, but If I would build a package management system, I would never apply such a restricted and inflexible versioning policy. SemVer is nice for applications, but not appropriate for package versioning.\n. @abombss, thanks for explaining your point of view.\nMy idea is just to look at how other popular package managers for operating systems are built and to learn from them. For example, consider the openssl package of other package managers:\n- Debian: https://packages.debian.org/sid/openssl\n- Ubuntu: http://packages.ubuntu.com/trusty/openssl\n- Arch Linux: https://www.archlinux.org/packages/core/x86_64/openssl/\n- Gentoo: http://sources.gentoo.org/cgi-bin/viewvc.cgi/gentoo-x86/dev-libs/openssl/ChangeLog?view=markup\n- opkg: http://downloads.openwrt.org/snapshots/trunk/ar71xx/packages/openssl-util_1.0.1g-1_ar71xx.ipk\n- MacPorts: https://www.macports.org/ports.php?by=name&substr=openssl\n- Fink: http://pdb.finkproject.org/pdb/package.php/openssl\n- Fedora: http://pkgs.fedoraproject.org/cgit/openssl.git/tree/\nAs you can see, every single package manager in this list allows the original version notation of openssl (currently 1.0.1g) in the package version. In this way, an user immediately sees what version of openssl the package contains. I don\u2019t think that this approach is bad as almost all package managers adopted it. The only \u201cdisadvantage\u201d of this approach is that the versioning logic is a bit more complex. But in my opinion in this area a good user experience should have a higher priority than avoiding a little more program complexity. The creators and programmers of these other package managers seem to agree with me.\nOr do you think it is better to be forced to version the openssl package with something like 1.0.1.20140411 like OpenSSL.Light from Chocolatey? I don\u2019t think so.\nA separate \u201ccontent version\u201d could be another approach, but that would also bring more complexity into Chocolatey and could also confuse users, because then there would be two version strings and the user must distinguish between them.\nI don\u2019t see any sensible reason why Chocolatey should not adopt proven patterns of other popular package managers. I remember to have read \u201cChocolatey NuGet - kind of like apt-get \u2026\u201d in the Chocolatey wiki. From this I understand that Chocolatey intends to learn from apt-get, otherwise it wouldn\u2019t make sense to write this. :smiley: \n. Yes, I agree with you. But remember that many of these name prefixed and duplicate packages were created before I suggested the package rules and added them to the wiki after Rob had approved them. Sending the package rules with the confirmation e-mail would be a good idea, but in this way we won\u2019t reach already registered maintainers.\nA major problem is that also if new maintainers read the wiki once, they probably don\u2019t check the wiki every week/month for updates. The only solution to let them know about important wiki and guideline updates would be a kind of newsletter that is sent to every single maintainer. These e-mails should then contain a link to the updated wiki sections and an invitation to read them.\nBut I see that we are moving a bit offtopic here. If you would like to discuss this aspect further, please open a new thread in the forum.\nThis issue is about an improved package triage process. There will always be package maintainers that ignore contributions and pull requests from others. The reasons for that are varied:\n- Not even time for a couple of seconds for a short reply to the person who contacted the maintainer\n- The desire to destroy or to harm the Chocolatey community\n- Disinterest, laziness or stubbornness\n  All these behaviours are unacceptable, so the main purpose of this improved triage process is to reduce the amount of time, effort and the vexation when people make pull requests to package maintainers.\n. Awesome :+1: \n. @Redsandro, actually only .portable and .install are official suffixes. They are essential to understand what the package contains. I suggested them a few months ago and they were accepted. The other suffixes are deprecated, but obviously older packages still use them. And there are still folks which ignore the rules and guidelines in the wiki and use the deprecated suffixes. This problem will never be solved until chocolatey packages get inspected by moderators before they get published.\n. Good, so the suggested modifications to the package rules are approved. Can someone apply them to the Wiki? Or can I do it? It\u2019s better to do it sooner than later. :smile: \n. > Shall we use that by default and let OS and FS handle all instead of a separate EXE and just fall back to shimgen if no link functionality is available?\nDo you mean symbolic links? The support for symbolic links on Windows is very naive. If you make for example a symbolic link to an EXE and that EXE requires an external library, the symbolic link won\u2019t resolve the relative path to it. This makes symbolic links on Windows unusable and useless in many cases, because many programs require external libraries. Unix-like systems don\u2019t have this limitation. I think this is also the reason because shims are preferred here.\n. Unfortunately not. Shimgen is closed-source proprietary software. Here\u2019s the license text: https://github.com/chocolatey/chocolatey/blob/master/src/tools/shimgen.license.txt\n. > I also wanted to post up a new feature to allow you to remove OLD VERSIONS of software.\nLike it. But if you ask me, it should be the default behavior of Chocolatey to remove the old version when a package gets updated. Every other package manager on Linux (apt-get, yum, opkg, pacman) does that.\nPlease forgive me if I am a bit direct here, but I think the current design of Chocolatey to keep older package versions is neither useful nor appropriate. Why don\u2019t follow the design of well established package managers that have already millions of (mostly satisfied) users?\nMaybe some people think here that it\u2019s sometimes needed to keep for example older versions of the same Ruby package (for example 1.9 if their app is not compatible with 2.0). But it is the wrong approach, because doing so the idea of a package manager would be undermined. If you have for example two versions of exactly same package installed (let\u2019s say Ruby versions 1.9 and 2.0), the Ruby 1.9.x branch would never be automatically updated, because 2.0 is already newer. If the 1.9.x branch would get an important security update, you would miss it with the current design of Chocolatey, because version 2.0 is newer than 1.9.x.\nIt is far better to keep different packages for each maintained branch, e.g. ruby1.9 and ruby2.0. The same applies to candidates like php5.3, php5.4, and php5.5. Note that also this approach is already used in the Linux package manager world. The benefits of this: an user can choose which branch he would like to install and then that version automatically gets its updates.\nOr can you tell me what is the actual benefit to have these packages installed simultaneously?\n- CCleaner 4.08.4428\n- CCleaner 4.07.4369\n- CCleaner 4.06.4324\n- CCleaner 4.05.4250\n- CCleaner 4.04.4197\n- CCleaner 4.03.4151\n- CCleaner 4.02.4115.20130609\n- CCleaner 4.02.4115.20130601\n- CCleaner 4.02.4115\n- CCleaner 4.01.40933\n- Java Runtime (JRE) 7.0.45\n- Java Runtime (JRE) 7.0.40.20131007\n- Java Runtime (JRE) 7.0.40\n- Java Runtime (JRE) 7.0.25\n- Java Runtime (JRE) 7.0.21\n- Java Runtime (JRE) 7.0.17\n- Java Runtime (JRE) 7.0.15\n- Java Runtime (JRE) 7.0.11\n- Java Runtime (JRE) 7.0.9\n- Java Runtime (JRE) 7.0.5.1\n- Java Runtime (JRE) 7.0.5\n- Java Runtime (JRE) 6.0.31.1\n- Jave Runtime (JRE) 6.0.30\nPlease also read my other statements why the design to keep older versions is bad idea: https://github.com/chocolatey/chocolatey/issues/259#issuecomment-23863107\n. > are you sure Linux apt-get REMOVES old versions?\nYes, 100\u00a0% sure. :smile: \n\nI thought it only does that when you run 'apt-get autoremove\n\nNo, apt-get autoremove does something completely different: autoremove is used to remove packages that were automatically installed to satisfy dependencies for some package and that are no more needed.\n\nI think it's useful to have old versions locally so you can revert back to them and not rely on the remote source being online.\n\nExactly that is not possible with Chocolatey at the moment, because it downloads files every time when you install a package, even if exactly the same files were already downloaded previously. So it\u2019s not a \u201csmart\u201d download cache like apt-get has.\n. I would prefer a cache management like apt-get has. To download again already downloaded files like Chocolatey does is a bit inefficient, don\u2019t you think so?\n. @ferventcoder yes, good idea. I\u2019m going to do that.\n. This is not the right place to report issues with Chocolatey packages, it\u2019s only for Chocolatey itself. If you have a problem with a package or a question about it, use the contact maintainers link, or better, report the issue in the GitHub repo where the package source files are hosted.\nI opened an issue in the corresponding repository: https://github.com/TomOne/chocolatey-packages/issues/3. Refer to it and close this one.\n. Are you sure? Then why it does work on 0.9.8.23? Also the thunderbird package is affected by the same error.\nPerhaps also other packages are broken after the update to 0.9.8.24. But I\u2019ll try to debug the firefox package first.\n. Yes, it works. But what should I do in the meantime with the firefox and thunderbird packages until 0.9.8.25 becomes final? Firefox is one of the most popular packages on Chocolatey.org, so there are lots of users affected by this error. Should I use wget in the meantime to download the HTML file, or do you have a better idea?\n. Good\n. @ferventcoder wrote:\n\nIf the package is doing something more than it should be and/or not using the helpers, I fully expect those packages to break. And they should b/c they need to stay out of chocolatey's purview. Anything that reaches into chocolatey's internals and uses functions, whatever, that are not in the API will start to break hard once choco.exe comes out.\n\nSorry, but I don\u2019t agree with you here. First of all, the firefox package uses Chocolatey helpers whenever possible. And if I understood it right, it is the Get-ChocolateyWebFile helper which causes this package to break, so it is not the fault of the firefox package.\nAre you seriously saying that every package code outside Chocolatey\u2019s API (e.g regular PowerShell code) will start to break once Chocolatey gets rewritten in C#? Sorry, but that is an extremely unwise idea in my opinion. A package manager \u2013 especially on Windows \u2013 needs to support an entire scripting language in order to cover the various tasks needed to install software and get it to work. I hope that you won\u2019t drop regular PowerShell code support, otherwise Chocolatey will be a lot less useful.\n. @Redsandro: Good one :+1:\nFYI: Error 1603 is nasty. This error code is not only thrown when there is \u201ca problem with the system configuration\u201d, but also when an user attempts to install an MSI package that is already installed on the computer in the same version (of course when installed via the silent parameters). This happened quite often with Chocolatey packages, especially with the javaruntime package. Many users complained about the 1603 error until I figured out what the actual cause was.\nM$ has a strange conception as errors. Personally I wouldn\u2019t classify a re-installation of the same software version as error, would you? That and only confuses users. A re-installation of the same software version does not harm anything an is not a undesirable \u201cerror\u201d state.\n. :+1: for this. I also would find it much nicer if the original exe icon would be used.\nThat is also the reason why there exist different icons for different programs, isn\u2019t it? :smiley: \n. > I'm curious... why the \"shim\" versus mklink?\nBecause MS failed to correctly implement symlinks. To create symlinks on Windows requires administrator rights and attempting to run them from GUI (Explorer) fails with an error. In addition, they don\u2019t resolve paths correctly (e.g. paths to DLLs are not resolved correctly).\n. > For me, the advantage of the shim's is running the application's from the command line, so icons don't really matter for me. Personal preference I guess.\nI see shimgen as workaround for a broken symlink support in Windows. On Windows and on other operating systems, symlinks always inherit the icon of their target. IMHO that makes sense, doesn\u2019t it?\n. > I see. How does one create their own shims? We might have a use.\nShimGen is non-free proprietary software: https://raw.githubusercontent.com/chocolatey/chocolatey/master/src/tools/shimgen.license.txt\nI guess the Chocolatey devs won\u2019t tell how it exactly works, otherwise they would have open-sourced it. :smiley:\n. ~~Correct me if I\u2019m wrong, but could this have to do something with the recent force lowercasing the package IDs?~~\nSorry, wrong. I didn\u2019t read the issue carefully enough.\n. ",
    "stevetrotman": "Does this mean that the current recommended approach would be to add -validExitCodes @(0,3010) to the install-chocolateypackage suspects in question?\n. Gotcha, will run with that for now.  Thank you!\n. Does this mean that the current recommended approach would be to add -validExitCodes @(0,3010) to the install-chocolateypackage suspects in question?\n. Gotcha, will run with that for now.  Thank you!\n. ",
    "jumanjiman": "fwiw i'd like to vote up this RFE, especially if...\n- chocolatey can transform exit code 3010 into (good) exit code 0 for consumption by whatever tool is calling it (example: puppet)\n- chocolatey can set a \"reboot needed\" flag in some well-known location\n. How about a key-value pair in the registry and advertise it as a \"well-known location\". \ncouple this with a custom facter fact so that a direct registry query or puppet, chef, cfengine, and other tools can readily access the info, and you could gain some real buy-in from the community. it's a common challenge\ncc: @rismoney :smiley_cat:\n. if chocalatey checks the flag first, it opens up the option for chocolatey package metadata, such as install-if-pending-reboot: true|false, default to false if metadata is missing from package\ni also like the idea of the force flag that @rismoney mentions, but it should have an unambiguous name. to me, force means do the needful to get it done dangerously without regard to any warnings, bootoverride could mean suppress the pending reboot flag or something else.\nsearch the word \"force\" on this page to see how rpm has been handling force options for many years. it's relevant from a semantic pov.\n. fwiw i'd like to vote up this RFE, especially if...\n- chocolatey can transform exit code 3010 into (good) exit code 0 for consumption by whatever tool is calling it (example: puppet)\n- chocolatey can set a \"reboot needed\" flag in some well-known location\n. How about a key-value pair in the registry and advertise it as a \"well-known location\". \ncouple this with a custom facter fact so that a direct registry query or puppet, chef, cfengine, and other tools can readily access the info, and you could gain some real buy-in from the community. it's a common challenge\ncc: @rismoney :smiley_cat:\n. if chocalatey checks the flag first, it opens up the option for chocolatey package metadata, such as install-if-pending-reboot: true|false, default to false if metadata is missing from package\ni also like the idea of the force flag that @rismoney mentions, but it should have an unambiguous name. to me, force means do the needful to get it done dangerously without regard to any warnings, bootoverride could mean suppress the pending reboot flag or something else.\nsearch the word \"force\" on this page to see how rpm has been handling force options for many years. it's relevant from a semantic pov.\n. ",
    "MikeH2012": "I think a simple and good way is to implement Google's Virustotal. https://www.virustotal.com/\nYou just need a Virustotal API-Key to use the public API: https://www.virustotal.com/en/documentation/public-api/\nThen some powershell cmdlets to handle a call from here: https://psvirustotal.codeplex.com/\nSo after file download in Chocolatey you can use this cmdlet from psvirustotal to check the file: \n$result=Get-VTReport -file \"C:\\TempDownloads\\XamlpadX 4.0.exe\"\nif($result.positives -eq 0)  {\"Fine\"}  else  {\"VIRUS on board!\"}\nThe way this works is: The script calculates a hash-value for the downloaded file, sends this to virus total und gets back the result of the last scan from somebody else with the same hash-value.\n. I think a simple and good way is to implement Google's Virustotal. https://www.virustotal.com/\nYou just need a Virustotal API-Key to use the public API: https://www.virustotal.com/en/documentation/public-api/\nThen some powershell cmdlets to handle a call from here: https://psvirustotal.codeplex.com/\nSo after file download in Chocolatey you can use this cmdlet from psvirustotal to check the file: \n$result=Get-VTReport -file \"C:\\TempDownloads\\XamlpadX 4.0.exe\"\nif($result.positives -eq 0)  {\"Fine\"}  else  {\"VIRUS on board!\"}\nThe way this works is: The script calculates a hash-value for the downloaded file, sends this to virus total und gets back the result of the last scan from somebody else with the same hash-value.\n. ",
    "Jaykul": "We'd need a key for the VirusTotal \"private\" API the public API keys are limited to 4 requests per minute -- so everyone would need their own ;-)\nLooks simple enough to get a private key, but they may want to know what for, and they may suggest you should do this scanning server-side?\n. We'd need a key for the VirusTotal \"private\" API the public API keys are limited to 4 requests per minute -- so everyone would need their own ;-)\nLooks simple enough to get a private key, but they may want to know what for, and they may suggest you should do this scanning server-side?\n. ",
    "Ncage1974": "Ooops sorry my fault. Thanks :P\n. Thanks Rob that worked. Hopefully in the future there is some better way to figure out what the correct package to install is. I remember having some confusing when first installing git whether to install the \"git\" package or the \"git.install\" package. In git case i believe i was told they were the same thing so incorrectly i assumed the .install packages where always the same thing. \n. Ooops sorry my fault. Thanks :P\n. Thanks Rob that worked. Hopefully in the future there is some better way to figure out what the correct package to install is. I remember having some confusing when first installing git whether to install the \"git\" package or the \"git.install\" package. In git case i believe i was told they were the same thing so incorrectly i assumed the .install packages where always the same thing. \n. ",
    "bitcrazed": "Could well be - Vagrant is currently at v1.0.5 on its site (vagrantup.com) but only at 0.8.0 on Chocolatey. \nWhat's the easiest way to update package version numbers? Will look into getting this (and jRuby) packages updated.\n. No: Adding ticks or double quotes makes no difference. Still see the same error.\n. I am trying to install a locally modified version of the Vagrant package which is now, sadly, woefully out of date. Here's what I get when I try to coerce Chocolatey into running my local package (with all dependencies removed) with debugging turned on:\n```\nD:\\dev\\chocolateypackages\\vagrant> chocolatey install vagrant -debug -source D:\\dev\\chocolateypackages\\vagrant\\vagrant.nuspec\nDEBUG: Running 'Chocolatey-Install' for vagrant with source: 'D:\\dev\\chocolateypackages\\vagrant\\vagrant.nuspec', version: '', installerArguments:''\nDEBUG: Running 'Chocolatey-NuGet' for vagrant with source:'D:\\dev\\chocolateypackages\\vagrant\\vagrant.nuspec'. Force? False\nChocolatey (v0.9.8.20) is installing vagrant and dependencies. By installing you accept the license for vagrant and each dependency you are installing.\nDEBUG: Installing packages to \"C:\\Chocolatey\\lib\".\nDEBUG: Running 'Run-NuGet' for vagrant with source: 'D:\\dev\\chocolateypackages\\vagrant\\vagrant.nuspec', version:''\nDEBUG:  NuGet _\nDEBUG: Using '-Source \"D:\\dev\\chocolateypackages\\vagrant\\vagrant.nuspec\"' as the source arguments\nDEBUG: Calling 'C:\\Chocolatey\\chocolateyinstall\\nuget.exe' install vagrant -Outputdirectory \"C:\\Chocolatey\\lib\" -Source \"D:\\dev\\chocolateypackages\\vagrant\\vagrant.nuspec\"\n-NonInteractive\nDEBUG: Attempting to resolve dependency 'jruby (\u2265 1.6.4)'.\nAttempting to resolve dependency 'virtualbox (\u2265 4.1.4)'.\nAttempting to resolve dependency 'putty (\u2265 0.61)'.\nSuccessfully installed 'jruby 1.6.4'.\nSuccessfully installed 'vagrant 0.8.0'.\nDEBUG: Evaluating NuGet output for line: Attempting to resolve dependency 'jruby (\u2265 1.6.4)'.\nDEBUG: Evaluating NuGet output for line: Attempting to resolve dependency 'virtualbox (\u2265 4.1.4)'.\nDEBUG: Evaluating NuGet output for line: Attempting to resolve dependency 'putty (\u2265 0.61)'.\nDEBUG: Evaluating NuGet output for line: Successfully installed 'jruby 1.6.4'.\n__ jruby v1.6.4 _\nDEBUG: Running 'Delete-ExistingErrorLog' for jruby\nDEBUG: Looking for failure log at 'C:\\Users\\Rich\\AppData\\Local\\Temp\\chocolatey\\jruby\\failure.log'\nDEBUG: Running 'Run-ChocolateyPS1' for jruby with packageFolder:'C:\\Chocolatey\\lib\\jruby.1.6.4', action: 'install'\nDEBUG:   _ PowerShell install (chocolateyinstall.ps1) \nDEBUG:   Looking for chocolateyinstall.ps1 in folder 'C:\\Chocolatey\\lib\\jruby.1.6.4'. If chocolateyinstall.ps1 is found, it will be run.\nDEBUG: Action file is 'chocolateyInstall.ps1'\nDEBUG: Running 'C:\\Chocolatey\\lib\\jruby.1.6.4\\tools\\chocolateyInstall.ps1'\nDEBUG: Running 'Install-ChocolateyPackage' for jruby with url:'http://jruby.org.s3.amazonaws.com/downloads/1.6.4/jruby_windowsjre_1_6_4.exe', args: '-q'\nDEBUG: Running 'Get-ChocolateyWebFile' for jruby with url:'http://jruby.org.s3.amazonaws.com/downloads/1.6.4/jruby_windowsjre_1_6_4.exe',\nfileFullPath:'C:\\Users\\Rich\\AppData\\Local\\Temp\\chocolatey\\jruby\\jrubyInstall.exe',and\nurl64bit:'http://jruby.org.s3.amazonaws.com/downloads/1.6.4/jruby_windows_x64_jre_1_6_4.exe'\nDEBUG: Processor width is 64.\nDownloading jruby 64 bit (http://jruby.org.s3.amazonaws.com/downloads/1.6.4/jruby_windows_x64_jre_1_6_4.exe) to C:\\Users\\Rich\\AppData\\Local\\Temp\\chocolatey\\jruby\\jrubyInstall.exe.\nDEBUG: Running 'Get-WebFile' for C:\\Users\\Rich\\AppData\\Local\\Temp\\chocolatey\\jruby\\jrubyInstall.exe with\nurl:'http://jruby.org.s3.amazonaws.com/downloads/1.6.4/jruby_windows_x64_jre_1_6_4.exe', userAgent: 'chocolatey command line'\nDEBUG: Setting the UserAgent to 'chocolatey command line'\nTerminate batch job (Y/N)? y\n```\nEven though it appears that Chocolatey THINKS it's using the local copy, it can't be because my local package has NO dependencies:\n<?xml version=\"1.0\"?>\n<package\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n    <metadata>\n        <id>vagrant</id>\n        <title>Vagrant</title>\n        <version>1.0.5</version>\n        <authors>Mitchell Hashimoto and John Bender</authors>\n        <owners>Mike Dellanoce</owners>\n        <summary>Vagrant is a tool for building and distributing virtualized development environments.</summary>\n        <description>Vagrant is a tool for building and distributing virtualized development environments.</description>\n        <projectUrl>http://vagrantup.com</projectUrl>\n        <tags>vagrant</tags>\n        <requireLicenseAcceptance>false</requireLicenseAcceptance>\n    </metadata>\n</package>\n. Fixed nuspec does have new version (current package is WAY behind) and no longer defines now unnecessary dependencies.\nI will check that the nuspec file version number is correctly updated.\nquestion: shouldn't the manual source declaration take precedence and override the cache?\n. Hey Rob. My Repo' is here if you want to take a look: https://github.com/bitcrazed/chocolateypackages/tree/master/vagrant\nI ran CPack which generated vagrant.1.0.5.nupkg\nWhen I re-ran cinst vagrant -source D:\\dev\\chocolateypackages\\vagrant\\vagrant.1.0.5.nupkg -debug, I see the following:\n```\nDEBUG: Running 'Chocolatey-Install' for vagrant with source: 'D:\\dev\\chocolateypackages\\vagrant\\vagrant.1.0.5.nupkg', version: '', installerArguments:''\nDEBUG: Running 'Chocolatey-NuGet' for vagrant with source:'D:\\dev\\chocolateypackages\\vagrant\\vagrant.1.0.5.nupkg'. Force? False\nChocolatey (v0.9.8.20) is installing vagrant and dependencies. By installing you accept the license for vagrant and each dependency you are installing.\nDEBUG: Installing packages to \"C:\\Chocolatey\\lib\".\nDEBUG: Running 'Run-NuGet' for vagrant with source: 'D:\\dev\\chocolateypackages\\vagrant\\vagrant.1.0.5.nupkg', version:''\nDEBUG:  NuGet _\nDEBUG: Using '-Source \"D:\\dev\\chocolateypackages\\vagrant\\vagrant.1.0.5.nupkg\"' as the source arguments\nDEBUG: Calling 'C:\\Chocolatey\\chocolateyinstall\\nuget.exe' install vagrant -Outputdirectory \"C:\\Chocolatey\\lib\" -Source \"D:\\dev\\chocolateypackages\\vagrant\\vagrant.1.0.5.nupkg\"\n-NonInteractive\nDEBUG: Attempting to resolve dependency 'jruby (\u2265 1.6.4)'.\nAttempting to resolve dependency 'virtualbox (\u2265 4.1.4)'.\nAttempting to resolve dependency 'putty (\u2265 0.61)'.\nSuccessfully installed 'jruby 1.6.4'.\nSuccessfully installed 'vagrant 0.8.0'.\nDEBUG: Evaluating NuGet output for line: Attempting to resolve dependency 'jruby (\u2265 1.6.4)'.\nDEBUG: Evaluating NuGet output for line: Attempting to resolve dependency 'virtualbox (\u2265 4.1.4)'.\nDEBUG: Evaluating NuGet output for line: Attempting to resolve dependency 'putty (\u2265 0.61)'.\nDEBUG: Evaluating NuGet output for line: Successfully installed 'jruby 1.6.4'.\n__ jruby v1.6.4 _\nDEBUG: Running 'Delete-ExistingErrorLog' for jruby\nDEBUG: Looking for failure log at 'C:\\Users\\Rich\\AppData\\Local\\Temp\\chocolatey\\jruby\\failure.log'\nDEBUG: Running 'Run-ChocolateyPS1' for jruby with packageFolder:'C:\\Chocolatey\\lib\\jruby.1.6.4', action: 'install'\nDEBUG:   _ PowerShell install (chocolateyinstall.ps1) \nDEBUG:   Looking for chocolateyinstall.ps1 in folder 'C:\\Chocolatey\\lib\\jruby.1.6.4'. If chocolateyinstall.ps1 is found, it will be run.\nDEBUG: Action file is 'chocolateyInstall.ps1'\nDEBUG: Running 'C:\\Chocolatey\\lib\\jruby.1.6.4\\tools\\chocolateyInstall.ps1'\nDEBUG: Running 'Install-ChocolateyPackage' for jruby with url:'http://jruby.org.s3.amazonaws.com/downloads/1.6.4/jruby_windowsjre_1_6_4.exe', args: '-q'\nDEBUG: Running 'Get-ChocolateyWebFile' for jruby with url:'http://jruby.org.s3.amazonaws.com/downloads/1.6.4/jruby_windowsjre_1_6_4.exe',\nfileFullPath:'C:\\Users\\Rich\\AppData\\Local\\Temp\\chocolatey\\jruby\\jrubyInstall.exe',and\nurl64bit:'http://jruby.org.s3.amazonaws.com/downloads/1.6.4/jruby_windows_x64_jre_1_6_4.exe'\nDEBUG: Processor width is 64.\nDownloading jruby 64 bit (http://jruby.org.s3.amazonaws.com/downloads/1.6.4/jruby_windows_x64_jre_1_6_4.exe) to C:\\Users\\Rich\\AppData\\Local\\Temp\\chocolatey\\jruby\\jrubyInstall.exe.\nDEBUG: Running 'Get-WebFile' for C:\\Users\\Rich\\AppData\\Local\\Temp\\chocolatey\\jruby\\jrubyInstall.exe with\nurl:'http://jruby.org.s3.amazonaws.com/downloads/1.6.4/jruby_windows_x64_jre_1_6_4.exe', userAgent: 'chocolatey command line'\nDEBUG: Setting the UserAgent to 'chocolatey command line'\n```\nAlas, it still appears to be looking for dependencies which don't exist in the new package. I guess it's picking up the old cached package for some reason, right?\n. Woohoo. That did it. Thanks for the help guys. I'll add some additional verbiage to the Wiki when I get a moment.\n. Could well be - Vagrant is currently at v1.0.5 on its site (vagrantup.com) but only at 0.8.0 on Chocolatey. \nWhat's the easiest way to update package version numbers? Will look into getting this (and jRuby) packages updated.\n. No: Adding ticks or double quotes makes no difference. Still see the same error.\n. I am trying to install a locally modified version of the Vagrant package which is now, sadly, woefully out of date. Here's what I get when I try to coerce Chocolatey into running my local package (with all dependencies removed) with debugging turned on:\n```\nD:\\dev\\chocolateypackages\\vagrant> chocolatey install vagrant -debug -source D:\\dev\\chocolateypackages\\vagrant\\vagrant.nuspec\nDEBUG: Running 'Chocolatey-Install' for vagrant with source: 'D:\\dev\\chocolateypackages\\vagrant\\vagrant.nuspec', version: '', installerArguments:''\nDEBUG: Running 'Chocolatey-NuGet' for vagrant with source:'D:\\dev\\chocolateypackages\\vagrant\\vagrant.nuspec'. Force? False\nChocolatey (v0.9.8.20) is installing vagrant and dependencies. By installing you accept the license for vagrant and each dependency you are installing.\nDEBUG: Installing packages to \"C:\\Chocolatey\\lib\".\nDEBUG: Running 'Run-NuGet' for vagrant with source: 'D:\\dev\\chocolateypackages\\vagrant\\vagrant.nuspec', version:''\nDEBUG:  NuGet _\nDEBUG: Using '-Source \"D:\\dev\\chocolateypackages\\vagrant\\vagrant.nuspec\"' as the source arguments\nDEBUG: Calling 'C:\\Chocolatey\\chocolateyinstall\\nuget.exe' install vagrant -Outputdirectory \"C:\\Chocolatey\\lib\" -Source \"D:\\dev\\chocolateypackages\\vagrant\\vagrant.nuspec\"\n-NonInteractive\nDEBUG: Attempting to resolve dependency 'jruby (\u2265 1.6.4)'.\nAttempting to resolve dependency 'virtualbox (\u2265 4.1.4)'.\nAttempting to resolve dependency 'putty (\u2265 0.61)'.\nSuccessfully installed 'jruby 1.6.4'.\nSuccessfully installed 'vagrant 0.8.0'.\nDEBUG: Evaluating NuGet output for line: Attempting to resolve dependency 'jruby (\u2265 1.6.4)'.\nDEBUG: Evaluating NuGet output for line: Attempting to resolve dependency 'virtualbox (\u2265 4.1.4)'.\nDEBUG: Evaluating NuGet output for line: Attempting to resolve dependency 'putty (\u2265 0.61)'.\nDEBUG: Evaluating NuGet output for line: Successfully installed 'jruby 1.6.4'.\n__ jruby v1.6.4 _\nDEBUG: Running 'Delete-ExistingErrorLog' for jruby\nDEBUG: Looking for failure log at 'C:\\Users\\Rich\\AppData\\Local\\Temp\\chocolatey\\jruby\\failure.log'\nDEBUG: Running 'Run-ChocolateyPS1' for jruby with packageFolder:'C:\\Chocolatey\\lib\\jruby.1.6.4', action: 'install'\nDEBUG:   _ PowerShell install (chocolateyinstall.ps1) \nDEBUG:   Looking for chocolateyinstall.ps1 in folder 'C:\\Chocolatey\\lib\\jruby.1.6.4'. If chocolateyinstall.ps1 is found, it will be run.\nDEBUG: Action file is 'chocolateyInstall.ps1'\nDEBUG: Running 'C:\\Chocolatey\\lib\\jruby.1.6.4\\tools\\chocolateyInstall.ps1'\nDEBUG: Running 'Install-ChocolateyPackage' for jruby with url:'http://jruby.org.s3.amazonaws.com/downloads/1.6.4/jruby_windowsjre_1_6_4.exe', args: '-q'\nDEBUG: Running 'Get-ChocolateyWebFile' for jruby with url:'http://jruby.org.s3.amazonaws.com/downloads/1.6.4/jruby_windowsjre_1_6_4.exe',\nfileFullPath:'C:\\Users\\Rich\\AppData\\Local\\Temp\\chocolatey\\jruby\\jrubyInstall.exe',and\nurl64bit:'http://jruby.org.s3.amazonaws.com/downloads/1.6.4/jruby_windows_x64_jre_1_6_4.exe'\nDEBUG: Processor width is 64.\nDownloading jruby 64 bit (http://jruby.org.s3.amazonaws.com/downloads/1.6.4/jruby_windows_x64_jre_1_6_4.exe) to C:\\Users\\Rich\\AppData\\Local\\Temp\\chocolatey\\jruby\\jrubyInstall.exe.\nDEBUG: Running 'Get-WebFile' for C:\\Users\\Rich\\AppData\\Local\\Temp\\chocolatey\\jruby\\jrubyInstall.exe with\nurl:'http://jruby.org.s3.amazonaws.com/downloads/1.6.4/jruby_windows_x64_jre_1_6_4.exe', userAgent: 'chocolatey command line'\nDEBUG: Setting the UserAgent to 'chocolatey command line'\nTerminate batch job (Y/N)? y\n```\nEven though it appears that Chocolatey THINKS it's using the local copy, it can't be because my local package has NO dependencies:\n<?xml version=\"1.0\"?>\n<package\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n    <metadata>\n        <id>vagrant</id>\n        <title>Vagrant</title>\n        <version>1.0.5</version>\n        <authors>Mitchell Hashimoto and John Bender</authors>\n        <owners>Mike Dellanoce</owners>\n        <summary>Vagrant is a tool for building and distributing virtualized development environments.</summary>\n        <description>Vagrant is a tool for building and distributing virtualized development environments.</description>\n        <projectUrl>http://vagrantup.com</projectUrl>\n        <tags>vagrant</tags>\n        <requireLicenseAcceptance>false</requireLicenseAcceptance>\n    </metadata>\n</package>\n. Fixed nuspec does have new version (current package is WAY behind) and no longer defines now unnecessary dependencies.\nI will check that the nuspec file version number is correctly updated.\nquestion: shouldn't the manual source declaration take precedence and override the cache?\n. Hey Rob. My Repo' is here if you want to take a look: https://github.com/bitcrazed/chocolateypackages/tree/master/vagrant\nI ran CPack which generated vagrant.1.0.5.nupkg\nWhen I re-ran cinst vagrant -source D:\\dev\\chocolateypackages\\vagrant\\vagrant.1.0.5.nupkg -debug, I see the following:\n```\nDEBUG: Running 'Chocolatey-Install' for vagrant with source: 'D:\\dev\\chocolateypackages\\vagrant\\vagrant.1.0.5.nupkg', version: '', installerArguments:''\nDEBUG: Running 'Chocolatey-NuGet' for vagrant with source:'D:\\dev\\chocolateypackages\\vagrant\\vagrant.1.0.5.nupkg'. Force? False\nChocolatey (v0.9.8.20) is installing vagrant and dependencies. By installing you accept the license for vagrant and each dependency you are installing.\nDEBUG: Installing packages to \"C:\\Chocolatey\\lib\".\nDEBUG: Running 'Run-NuGet' for vagrant with source: 'D:\\dev\\chocolateypackages\\vagrant\\vagrant.1.0.5.nupkg', version:''\nDEBUG:  NuGet _\nDEBUG: Using '-Source \"D:\\dev\\chocolateypackages\\vagrant\\vagrant.1.0.5.nupkg\"' as the source arguments\nDEBUG: Calling 'C:\\Chocolatey\\chocolateyinstall\\nuget.exe' install vagrant -Outputdirectory \"C:\\Chocolatey\\lib\" -Source \"D:\\dev\\chocolateypackages\\vagrant\\vagrant.1.0.5.nupkg\"\n-NonInteractive\nDEBUG: Attempting to resolve dependency 'jruby (\u2265 1.6.4)'.\nAttempting to resolve dependency 'virtualbox (\u2265 4.1.4)'.\nAttempting to resolve dependency 'putty (\u2265 0.61)'.\nSuccessfully installed 'jruby 1.6.4'.\nSuccessfully installed 'vagrant 0.8.0'.\nDEBUG: Evaluating NuGet output for line: Attempting to resolve dependency 'jruby (\u2265 1.6.4)'.\nDEBUG: Evaluating NuGet output for line: Attempting to resolve dependency 'virtualbox (\u2265 4.1.4)'.\nDEBUG: Evaluating NuGet output for line: Attempting to resolve dependency 'putty (\u2265 0.61)'.\nDEBUG: Evaluating NuGet output for line: Successfully installed 'jruby 1.6.4'.\n__ jruby v1.6.4 _\nDEBUG: Running 'Delete-ExistingErrorLog' for jruby\nDEBUG: Looking for failure log at 'C:\\Users\\Rich\\AppData\\Local\\Temp\\chocolatey\\jruby\\failure.log'\nDEBUG: Running 'Run-ChocolateyPS1' for jruby with packageFolder:'C:\\Chocolatey\\lib\\jruby.1.6.4', action: 'install'\nDEBUG:   _ PowerShell install (chocolateyinstall.ps1) \nDEBUG:   Looking for chocolateyinstall.ps1 in folder 'C:\\Chocolatey\\lib\\jruby.1.6.4'. If chocolateyinstall.ps1 is found, it will be run.\nDEBUG: Action file is 'chocolateyInstall.ps1'\nDEBUG: Running 'C:\\Chocolatey\\lib\\jruby.1.6.4\\tools\\chocolateyInstall.ps1'\nDEBUG: Running 'Install-ChocolateyPackage' for jruby with url:'http://jruby.org.s3.amazonaws.com/downloads/1.6.4/jruby_windowsjre_1_6_4.exe', args: '-q'\nDEBUG: Running 'Get-ChocolateyWebFile' for jruby with url:'http://jruby.org.s3.amazonaws.com/downloads/1.6.4/jruby_windowsjre_1_6_4.exe',\nfileFullPath:'C:\\Users\\Rich\\AppData\\Local\\Temp\\chocolatey\\jruby\\jrubyInstall.exe',and\nurl64bit:'http://jruby.org.s3.amazonaws.com/downloads/1.6.4/jruby_windows_x64_jre_1_6_4.exe'\nDEBUG: Processor width is 64.\nDownloading jruby 64 bit (http://jruby.org.s3.amazonaws.com/downloads/1.6.4/jruby_windows_x64_jre_1_6_4.exe) to C:\\Users\\Rich\\AppData\\Local\\Temp\\chocolatey\\jruby\\jrubyInstall.exe.\nDEBUG: Running 'Get-WebFile' for C:\\Users\\Rich\\AppData\\Local\\Temp\\chocolatey\\jruby\\jrubyInstall.exe with\nurl:'http://jruby.org.s3.amazonaws.com/downloads/1.6.4/jruby_windows_x64_jre_1_6_4.exe', userAgent: 'chocolatey command line'\nDEBUG: Setting the UserAgent to 'chocolatey command line'\n```\nAlas, it still appears to be looking for dependencies which don't exist in the new package. I guess it's picking up the old cached package for some reason, right?\n. Woohoo. That did it. Thanks for the help guys. I'll add some additional verbiage to the Wiki when I get a moment.\n. ",
    "drewburlingame": "I spent several hours trying that first, but couldn't get the cookies to\nstick across domains.  I was testing with the JavaJDK package.   I thought\nabout switching out the implementation of Get-WebFile, but couldn't figure\nout how to get all the options in Get-WebFile to work with\nWebClient.DownloadFile.\nOn Sat, Dec 22, 2012 at 4:48 AM, Rob Reynolds notifications@github.comwrote:\n\nInteresting. Why not make get-webfile work with these additions?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/224#issuecomment-11636849.\n. I agree.  It would be better to alert the user and let them decide whether\nto continue or not.\n\nOn Fri, Apr 19, 2013 at 7:17 AM, Rich Siegel notifications@github.comwrote:\n\nI do like the ignore cert switch in theory, but not in practice. A package\nauthor should not be sending consumers of the package to https sites that\ndon't have valid certificates. I believe that is a call the _end user_should make, and question the authenticity of the underlying url.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/224#issuecomment-16655336\n.\n. good point.  a flag would help, but not if the pkg was a dependency of\nanother.  i'd hate to see a user not be able to use a package when they\ncould specify if they were ok with http vs https.  it could be that if\nchoco was going to fail, prompt instead, but only wait for 10 seconds for a\nresponse?  that could serve the purpose, but seems complicated.\n\nOn Fri, Apr 19, 2013 at 8:38 PM, Rob Reynolds notifications@github.comwrote:\n\nInteresting...we have made choco silent by default. This seems to go\nagainst that idea. Should this not be a pkg then?\nOn Friday, April 19, 2013, Drew Burlingame wrote:\n\nI agree. It would be better to alert the user and let them decide\nwhether\nto continue or not.\nOn Fri, Apr 19, 2013 at 7:17 AM, Rich Siegel >wrote:\n\nI do like the ignore cert switch in theory, but not in practice. A\npackage\nauthor should not be sending consumers of the package to https sites\nthat\ndon't have valid certificates. I believe that is a call the _end\nuser_should make, and question the authenticity of the underlying url.\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/chocolatey/chocolatey/pull/224#issuecomment-16655336>\n.\n\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/chocolatey/chocolatey/pull/224#issuecomment-16664701>\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/224#issuecomment-16698126\n.\n. I spent several hours trying that first, but couldn't get the cookies to\nstick across domains.  I was testing with the JavaJDK package.   I thought\nabout switching out the implementation of Get-WebFile, but couldn't figure\nout how to get all the options in Get-WebFile to work with\nWebClient.DownloadFile.\n\nOn Sat, Dec 22, 2012 at 4:48 AM, Rob Reynolds notifications@github.comwrote:\n\nInteresting. Why not make get-webfile work with these additions?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/224#issuecomment-11636849.\n. I agree.  It would be better to alert the user and let them decide whether\nto continue or not.\n\nOn Fri, Apr 19, 2013 at 7:17 AM, Rich Siegel notifications@github.comwrote:\n\nI do like the ignore cert switch in theory, but not in practice. A package\nauthor should not be sending consumers of the package to https sites that\ndon't have valid certificates. I believe that is a call the _end user_should make, and question the authenticity of the underlying url.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/224#issuecomment-16655336\n.\n. good point.  a flag would help, but not if the pkg was a dependency of\nanother.  i'd hate to see a user not be able to use a package when they\ncould specify if they were ok with http vs https.  it could be that if\nchoco was going to fail, prompt instead, but only wait for 10 seconds for a\nresponse?  that could serve the purpose, but seems complicated.\n\nOn Fri, Apr 19, 2013 at 8:38 PM, Rob Reynolds notifications@github.comwrote:\n\nInteresting...we have made choco silent by default. This seems to go\nagainst that idea. Should this not be a pkg then?\nOn Friday, April 19, 2013, Drew Burlingame wrote:\n\nI agree. It would be better to alert the user and let them decide\nwhether\nto continue or not.\nOn Fri, Apr 19, 2013 at 7:17 AM, Rich Siegel >wrote:\n\nI do like the ignore cert switch in theory, but not in practice. A\npackage\nauthor should not be sending consumers of the package to https sites\nthat\ndon't have valid certificates. I believe that is a call the _end\nuser_should make, and question the authenticity of the underlying url.\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/chocolatey/chocolatey/pull/224#issuecomment-16655336>\n.\n\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/chocolatey/chocolatey/pull/224#issuecomment-16664701>\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/pull/224#issuecomment-16698126\n.\n. \n",
    "cemrich": "\nQuote it either by ' ('notepad++') or by double double quotes (\"\"notepad++\"\"). What do you get then?\n\nSingle or double double quotes work as expeted. The message \"Unable to find package 'notepad++'.\" shows up.\n\nBtw if you are looking for notepad++ on chocolatey.org, it is named notepadplusplus.\n\nI know now :) But I guess I'm not the only one trying to type \"notepad++\" and getting a bunch of errors. It's not a big deal but it would be nice to catch this error.\n. > Quote it either by ' ('notepad++') or by double double quotes (\"\"notepad++\"\"). What do you get then?\nSingle or double double quotes work as expeted. The message \"Unable to find package 'notepad++'.\" shows up.\n\nBtw if you are looking for notepad++ on chocolatey.org, it is named notepadplusplus.\n\nI know now :) But I guess I'm not the only one trying to type \"notepad++\" and getting a bunch of errors. It's not a big deal but it would be nice to catch this error.\n. ",
    "caseyjmorton": "Ahhh, good to know, thanks!\nOn Wed, Jan 23, 2013 at 11:24 AM, Rob Reynolds notifications@github.comwrote:\n\nYes it does. That's why we have a user config. Your edits should be there.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/234#issuecomment-12603559.\n. Ahhh, good to know, thanks!\n\nOn Wed, Jan 23, 2013 at 11:24 AM, Rob Reynolds notifications@github.comwrote:\n\nYes it does. That's why we have a user config. Your edits should be there.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/234#issuecomment-12603559.\n. \n",
    "GiscardBiamby": "I'm interested in using this feature once the PR is accepted. \n. I'm interested in using this feature once the PR is accepted. \n. ",
    "onlab": "I got the same problem. I did installed the 7zip software before to install an other program then I installed chocolatey and I had the same problem trying to installing the gnuwin.\nI removed the 7zip software and some registries I found on windows registry but the problem wasn't solved. Then I removed the 7zip from the chocolatey/lib folder and gnuwin from lib-bad and tried again and it is working now.\n. I got the same problem. I did installed the 7zip software before to install an other program then I installed chocolatey and I had the same problem trying to installing the gnuwin.\nI removed the 7zip software and some registries I found on windows registry but the problem wasn't solved. Then I removed the 7zip from the chocolatey/lib folder and gnuwin from lib-bad and tried again and it is working now.\n. ",
    "cbadke": "I'm currently investigating this. I am suspicious that the unzipping the targeted package is generating filepaths that are over 260 characters. I haven't managed to confirm it yet. I should have more info later in the day.\n. Package reproducing issue: https://github.com/Laures/chocolatey-packages/tree/master/springtoolsuite\nBig sample data: http://dist.springsource.com/release/STS/3.1.0/dist/e4.2/spring-tool-suite-3.1.0.RELEASE-e4.2-win32-x86_64.zip\nSimplified sample: http://dl.dropbox.com/u/121023/springsource.zip\nAn example of a problematic file is:\nC:\\Chocolatey\\lib\\springtoolsuite.3.1.0\\tools\\springsource\\sts-3.1.0.RELEASE\\features\\org.sonatype.m2e.mavenarchiver.feature_0.15.0.201207090125-signed-201209140800\\META-INF\\maven\\org.sonatype.m2e.extras\\org.sonatype.m2e.mavenarchiver.feature\\pom.xml\nThe file appears to unzip properly but in the GetZipItems_Recursive function $file.path is empty for the file. It seems like it could be some issue with the underlying COM objects?\nI tried to reproduce the issue with a deeper folder structure but shorter file names and couldn't reproduce so I don't believe it is a folder depth issue.\n. The crux of the issue is that the generated path by referencing $file.path was exceeding the OS limit of 260 characters. I put in a pull request to change how the logging of new files is calculated to rely only on the contents of the destination dir: https://github.com/chocolatey/chocolatey/pull/244\n@Laures - you may run into issues in the future where the unzipped file path of your package exceeds 260 characters. Some of the paths in the current file structure are in the neighbourhood of 250 characters when unpacked into the C:\\Chocolatey\\lib\\ file path structure. If the unpacked location exceeds the path limit Windows will not allow the unpack to occur.\n. No. You can use the the helper for your springtoolsuite package. It's just that the paths of the files that are getting installed are quite long. If they continue to get longer you may soon reach the 260 character limit of Windows.\nIt's not a problem now I was just letting you know that you may run into issues in the future. We can move this conversation back to the google group if you like.\n. Fair point. I could probably modify this fairly easily to have the log include modified files as well as added files if that is preferable. \nSent from my mobile\n780-937-4443\nOn 2013-02-03, at 9:48, Rob Reynolds notifications@github.com wrote:\n\nYeah, I think we can pull this in. This doesn't seem to be 100% deterministic for upgrades though. Or am I missing something?\n\u2014\nReply to this email directly or view it on GitHub.\n. Expanded the logic to record modified as well as added files. Left commented code for logging deleted files for future use. Hopefully this format of function leaves it extractable if you want to use it elsewhere.\n\nI'm not exactly a PowerShell pro so guidance is welcome on how best to do this.\n. Farkle. Ignore this for now.\n. That should do it. :-/\n. I'm currently investigating this. I am suspicious that the unzipping the targeted package is generating filepaths that are over 260 characters. I haven't managed to confirm it yet. I should have more info later in the day.\n. Package reproducing issue: https://github.com/Laures/chocolatey-packages/tree/master/springtoolsuite\nBig sample data: http://dist.springsource.com/release/STS/3.1.0/dist/e4.2/spring-tool-suite-3.1.0.RELEASE-e4.2-win32-x86_64.zip\nSimplified sample: http://dl.dropbox.com/u/121023/springsource.zip\nAn example of a problematic file is:\nC:\\Chocolatey\\lib\\springtoolsuite.3.1.0\\tools\\springsource\\sts-3.1.0.RELEASE\\features\\org.sonatype.m2e.mavenarchiver.feature_0.15.0.201207090125-signed-201209140800\\META-INF\\maven\\org.sonatype.m2e.extras\\org.sonatype.m2e.mavenarchiver.feature\\pom.xml\nThe file appears to unzip properly but in the GetZipItems_Recursive function $file.path is empty for the file. It seems like it could be some issue with the underlying COM objects?\nI tried to reproduce the issue with a deeper folder structure but shorter file names and couldn't reproduce so I don't believe it is a folder depth issue.\n. The crux of the issue is that the generated path by referencing $file.path was exceeding the OS limit of 260 characters. I put in a pull request to change how the logging of new files is calculated to rely only on the contents of the destination dir: https://github.com/chocolatey/chocolatey/pull/244\n@Laures - you may run into issues in the future where the unzipped file path of your package exceeds 260 characters. Some of the paths in the current file structure are in the neighbourhood of 250 characters when unpacked into the C:\\Chocolatey\\lib\\ file path structure. If the unpacked location exceeds the path limit Windows will not allow the unpack to occur.\n. No. You can use the the helper for your springtoolsuite package. It's just that the paths of the files that are getting installed are quite long. If they continue to get longer you may soon reach the 260 character limit of Windows.\nIt's not a problem now I was just letting you know that you may run into issues in the future. We can move this conversation back to the google group if you like.\n. Fair point. I could probably modify this fairly easily to have the log include modified files as well as added files if that is preferable. \nSent from my mobile\n780-937-4443\nOn 2013-02-03, at 9:48, Rob Reynolds notifications@github.com wrote:\n\nYeah, I think we can pull this in. This doesn't seem to be 100% deterministic for upgrades though. Or am I missing something?\n\u2014\nReply to this email directly or view it on GitHub.\n. Expanded the logic to record modified as well as added files. Left commented code for logging deleted files for future use. Hopefully this format of function leaves it extractable if you want to use it elsewhere.\n\nI'm not exactly a PowerShell pro so guidance is welcome on how best to do this.\n. Farkle. Ignore this for now.\n. That should do it. :-/\n. ",
    "Laures": "does that mean that i might not be able to use the helper for my file and should use the 7zip commandline instead?\n. does that mean that i might not be able to use the helper for my file and should use the 7zip commandline instead?\n. ",
    "kellyelton": "I just want to put the actual exe in the package itself, and install it. I've tried this\n$path = Join-Path \"$(Split-Path -parent $MyInvocation.MyCommand.Definition)\" 'CloverSetup.exe'\necho $path\nInstall-ChocolateyInstallPackage 'clover' 'exe' '/SILENT' $path\nInstall-ChocolateyPinnedTaskBarItem \"${env:ProgramFiles(x86)}\\Clover\\clover.exe\"\nBut that doesn't seem to work, it doesn't even echo the $path\nAnd even if I just call \n    Install-ChocolateyInstallPackage 'clover' 'exe' '/SILENT' 'CloverSetup.exe'\nInstall-ChocolateyPinnedTaskBarItem \"${env:ProgramFiles(x86)}\\Clover\\clover.exe\"\nand have the setup in lib, or content, or tools, it just doesn't work.\n. Every thing above that I try results in the following exception\n\n. So was my first or second approach right? Where should I put the setup file and do I need to add a path?\n. @rismoney https://github.com/kellyelton/kellyelton.devenvironment\n. After deleting the package out of C:\\Chocolatey\\lib\\package name, I get the following error\n\nI'm admittedly not fluent enough with powershell yet, so I get caught up on small things.\n. I wasn't running as admin, but I opened one up in admin, and thee same error happened.\n. Well it would seem from reading that exception above that it can't find CloverSetup.exe. Is that even the proper place to put it to call it? I couldn't find any documentation about doing this, that's why I'm a bit lost here.\n. Also I slapped the start-chocolateyprocessadmin.ps1 into my tools folder, did a debug write of both those variables, but it didn't pick up the ps1 in my package, only picked up the one in the chocolatey directory.\n. Alright, so I did the $psi in the lib folder, just so I could get some output. I also added\n$files = [System.IO.Directory]::GetFiles($psi.WorkingDirectory)\n$files\nThis is what I ended up with...doesn't seem right to me...\n\nNo extracted files or anything, just the directory where the package I made lives.\n. Alright, when I switch to that, this is the error I get.\n\n. Turns out the issue with that one is because I had this\n```\n$scriptDir = Split-Path -Path $MyInvocation.MyCommand.Definition -Parent\nWrite-Host \"$scriptDir\"\n$path = Join-Path \"$(Split-Path -parent $MyInvocation.MyCommand.Definition.Path)\" \"CloverSetup.exe\"\n$path = Join-Path $scriptDir \"CloverSetup.exe\"\nInstall-ChocolateyInstallPackage 'clover' 'exe' '/S' $path\nInstall-ChocolateyPinnedTaskBarItem \"${env:ProgramFiles(x86)}\\Clover\\clover.exe\"\n```\nin a function. http://weblogs.asp.net/soever/archive/2007/02/06/powershell-regerencing-files-relative-to-the-currently-executing-script.aspx\nLooks like that cleared it up.\n. Thanks for working with me to figure this out, and thanks to the people who thought this one up. I imagine these scripts will be saving me a lot of time in the future.\n. I just want to put the actual exe in the package itself, and install it. I've tried this\n$path = Join-Path \"$(Split-Path -parent $MyInvocation.MyCommand.Definition)\" 'CloverSetup.exe'\necho $path\nInstall-ChocolateyInstallPackage 'clover' 'exe' '/SILENT' $path\nInstall-ChocolateyPinnedTaskBarItem \"${env:ProgramFiles(x86)}\\Clover\\clover.exe\"\nBut that doesn't seem to work, it doesn't even echo the $path\nAnd even if I just call \n    Install-ChocolateyInstallPackage 'clover' 'exe' '/SILENT' 'CloverSetup.exe'\nInstall-ChocolateyPinnedTaskBarItem \"${env:ProgramFiles(x86)}\\Clover\\clover.exe\"\nand have the setup in lib, or content, or tools, it just doesn't work.\n. Every thing above that I try results in the following exception\n\n. So was my first or second approach right? Where should I put the setup file and do I need to add a path?\n. @rismoney https://github.com/kellyelton/kellyelton.devenvironment\n. After deleting the package out of C:\\Chocolatey\\lib\\package name, I get the following error\n\nI'm admittedly not fluent enough with powershell yet, so I get caught up on small things.\n. I wasn't running as admin, but I opened one up in admin, and thee same error happened.\n. Well it would seem from reading that exception above that it can't find CloverSetup.exe. Is that even the proper place to put it to call it? I couldn't find any documentation about doing this, that's why I'm a bit lost here.\n. Also I slapped the start-chocolateyprocessadmin.ps1 into my tools folder, did a debug write of both those variables, but it didn't pick up the ps1 in my package, only picked up the one in the chocolatey directory.\n. Alright, so I did the $psi in the lib folder, just so I could get some output. I also added\n$files = [System.IO.Directory]::GetFiles($psi.WorkingDirectory)\n$files\nThis is what I ended up with...doesn't seem right to me...\n\nNo extracted files or anything, just the directory where the package I made lives.\n. Alright, when I switch to that, this is the error I get.\n\n. Turns out the issue with that one is because I had this\n```\n$scriptDir = Split-Path -Path $MyInvocation.MyCommand.Definition -Parent\nWrite-Host \"$scriptDir\"\n$path = Join-Path \"$(Split-Path -parent $MyInvocation.MyCommand.Definition.Path)\" \"CloverSetup.exe\"\n$path = Join-Path $scriptDir \"CloverSetup.exe\"\nInstall-ChocolateyInstallPackage 'clover' 'exe' '/S' $path\nInstall-ChocolateyPinnedTaskBarItem \"${env:ProgramFiles(x86)}\\Clover\\clover.exe\"\n```\nin a function. http://weblogs.asp.net/soever/archive/2007/02/06/powershell-regerencing-files-relative-to-the-currently-executing-script.aspx\nLooks like that cleared it up.\n. Thanks for working with me to figure this out, and thanks to the people who thought this one up. I imagine these scripts will be saving me a lot of time in the future.\n. ",
    "webcoyote": "I looked at #210 before I submitted my pull request; I was hoping that it already included\nthe change that I needed. In my (uncommitted) changes on my linux-vm project I skipped over all the batch files and called directly into chocolatey.ps1 exactly because the batch files didn't propagate errors, so I'm glad you fixed that. I did note that it was two months back that your changes were made; I hope they get merged.\nI am a bit conflicted about my solution, which uses \"throw\". It doesn't create a very nice error for end-users, but it's great for developers. Hopefully someone will provide clarity on how errors should be handled, because I was waffling between \"throw\" and \"write-host & exit\".\nAnd thanks for your comments on linux-vm. A bit more error checking and I will be happy with it! Let me know if you have any comments on the project -- I'm glad to do fixes :)\n. I looked at #210 before I submitted my pull request; I was hoping that it already included\nthe change that I needed. In my (uncommitted) changes on my linux-vm project I skipped over all the batch files and called directly into chocolatey.ps1 exactly because the batch files didn't propagate errors, so I'm glad you fixed that. I did note that it was two months back that your changes were made; I hope they get merged.\nI am a bit conflicted about my solution, which uses \"throw\". It doesn't create a very nice error for end-users, but it's great for developers. Hopefully someone will provide clarity on how errors should be handled, because I was waffling between \"throw\" and \"write-host & exit\".\nAnd thanks for your comments on linux-vm. A bit more error checking and I will be happy with it! Let me know if you have any comments on the project -- I'm glad to do fixes :)\n. ",
    "jeff-french": "Did you click Yes for the UAC prompt so it could run as and Administrator? Will the install complete successfully if you run cinst redis' from an elevated command prompt?\n. I will correspond with the @mcandre  via email. We will update this issue if it turns out to be a Chocolatey issue.\n. Did you click Yes for the UAC prompt so it could run as and Administrator? Will the install complete successfully if you runcinst redis' from an elevated command prompt?\n. I will correspond with the @mcandre  via email. We will update this issue if it turns out to be a Chocolatey issue.\n. ",
    "mcandre": "I'm using Windows XP, and my account has full admin rights.\n. I'm using Windows XP, and my account has full admin rights.\n. ",
    "prongs": "I don't know.\nOn Feb 24, 2013 7:50 PM, \"Rob Reynolds\" notifications@github.com wrote:\n\nDoes it work when you are not behind the proxy?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/252#issuecomment-14009009.\n. \n. I have sockss proxy enabled.\n\n\n. Chocolatey doesn't use IE's proxy settings. It rather uses http_proxy environment variable. So I used polipo to wrap socks proxy with an http proxy and set the env variable. Worked like a charm!\n. Sure. Let me know how I can help.\nOn Feb 25, 2013 12:23 AM, \"Rob Reynolds\" notifications@github.com wrote:\n\nCool. It might be a good idea if we add a proxy wiki page.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/252#issuecomment-14013502.\n. https://github.com/chocolatey/chocolatey/wiki/Proxy-Settings-for-Chocolatey\n. I don't know.\nOn Feb 24, 2013 7:50 PM, \"Rob Reynolds\" notifications@github.com wrote:\nDoes it work when you are not behind the proxy?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/252#issuecomment-14009009.\n. \n. I have sockss proxy enabled.\n\n\n. Chocolatey doesn't use IE's proxy settings. It rather uses http_proxy environment variable. So I used polipo to wrap socks proxy with an http proxy and set the env variable. Worked like a charm!\n. Sure. Let me know how I can help.\nOn Feb 25, 2013 12:23 AM, \"Rob Reynolds\" notifications@github.com wrote:\n\nCool. It might be a good idea if we add a proxy wiki page.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/252#issuecomment-14013502.\n. https://github.com/chocolatey/chocolatey/wiki/Proxy-Settings-for-Chocolatey\n. \n",
    "rayjlim": "I saw seeing this error when trying to install command\nIt was fixed if I use http: instead of https: in the URL.\n. I saw seeing this error when trying to install command\nIt was fixed if I use http: instead of https: in the URL.\n. ",
    "ggrussenmeyer": "Just for information, after struggling with the exact same error message for a few hours, it turned out that the certificate of the root CA that delivered the chocolatey.org certificate (Go Daddy Root Certificate Authority - G2) was not present int my Windows trusted root CA certificate store (although present in Firefox own's trust store).\nImporting it manually in the Windows store fixed the issue.\n. Just for information, after struggling with the exact same error message for a few hours, it turned out that the certificate of the root CA that delivered the chocolatey.org certificate (Go Daddy Root Certificate Authority - G2) was not present int my Windows trusted root CA certificate store (although present in Firefox own's trust store).\nImporting it manually in the Windows store fixed the issue.\n. ",
    "esters": "@ggrussenmeyer thank you for the information. I had the same issue on Windows XP. Importing the GoDaddy Class 2 Certification Authority Root Certificate - G2 (https://certs.godaddy.com/repository/gdroot-g2.crt) solved the issue.\n. @ggrussenmeyer thank you for the information. I had the same issue on Windows XP. Importing the GoDaddy Class 2 Certification Authority Root Certificate - G2 (https://certs.godaddy.com/repository/gdroot-g2.crt) solved the issue.\n. ",
    "nturley": "I had this problem on a clean windows install. I opened internet explorer. Allowed it to update (presumably updating it's certificates). That solved the problem.\n. I had this problem on a clean windows install. I opened internet explorer. Allowed it to update (presumably updating it's certificates). That solved the problem.\n. ",
    "pbolduc": "I was trying to deal with this as well.  I have a clean Windows Server 2008 R2 machine.  I found something similar to this on the Chocolatey site.  It is called right after installing Chocolatey.  I downloads the command line version of Web Platform Installer to a temporary directory.  It not perfect yet.\n$is64bit = (Get-WmiObject Win32_Processor).AddressWidth -eq 64\nif($is64bit) {$fx=\"framework64\"} else {$fx=\"framework\"}\n$scriptPath = (Split-Path -parent $MyInvocation.MyCommand.path)\nif(!(test-path \"$env:windir\\Microsoft.Net\\$fx\\v4.0.30319\")) {\n    Import-Module $env:systemdrive\\chocolatey\\chocolateyinstall\\helpers\\chocolateyInstaller.psm1\n    $chocTempDir = Join-Path $env:TEMP \"chocolatey\"\n    $tempDir = Join-Path $chocTempDir \"webpicmdline\"\n    Install-ChocolateyZipPackage 'webcmd' 'http://www.iis.net/community/files/webpi/webpicmdline_anycpu.zip'     $tempDir\n    .$tempDir\\WebpiCmdLine.exe /products: NetFramework4 /accepteula\n}\n. I will be checking out BoxStarter this weekend. Thanks!\n. I was trying to deal with this as well.  I have a clean Windows Server 2008 R2 machine.  I found something similar to this on the Chocolatey site.  It is called right after installing Chocolatey.  I downloads the command line version of Web Platform Installer to a temporary directory.  It not perfect yet.\n$is64bit = (Get-WmiObject Win32_Processor).AddressWidth -eq 64\nif($is64bit) {$fx=\"framework64\"} else {$fx=\"framework\"}\n$scriptPath = (Split-Path -parent $MyInvocation.MyCommand.path)\nif(!(test-path \"$env:windir\\Microsoft.Net\\$fx\\v4.0.30319\")) {\n    Import-Module $env:systemdrive\\chocolatey\\chocolateyinstall\\helpers\\chocolateyInstaller.psm1\n    $chocTempDir = Join-Path $env:TEMP \"chocolatey\"\n    $tempDir = Join-Path $chocTempDir \"webpicmdline\"\n    Install-ChocolateyZipPackage 'webcmd' 'http://www.iis.net/community/files/webpi/webpicmdline_anycpu.zip'     $tempDir\n    .$tempDir\\WebpiCmdLine.exe /products: NetFramework4 /accepteula\n}\n. I will be checking out BoxStarter this weekend. Thanks!\n. ",
    "nzbart": "I'm still seeing this bug in version 0.9.8.23. Has this been a regression?\nC:\\dev\\ChocolateyPackages [master +0 ~3 -0]> cpack.bat .\\vifm\\vifm.nuspec\nCalling 'C:\\Chocolatey\\chocolateyinstall\\nuget.exe pack .\\vifm\\vifm.nuspec -NoPackageAnalysis'.\nAttempting to build package from 'vifm.nuspec'.\nThe element 'metadata' in namespace 'http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd' cannot contain text. List of possible elements expected: 'releaseNotes, frameworkAssemblies, tags, copyright, iconUrl, dependencies, references, language, requireLicenseAcceptance, licenseUrl' in namespace 'http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd'.\nReading environment variables from registry. Please wait... Done.\nC:\\dev\\ChocolateyPackages [master +0 ~3 -0]> $LASTEXITCODE\n0\n. I can confirm that the cpack command doesn't return the error code that I am expecting:\nC:\\dev\\ChocolateyPackages [master +0 ~3 -0]> cpack .\\vifm\\vifm.nuspec\nCalling 'C:\\Chocolatey\\chocolateyinstall\\nuget.exe pack .\\vifm\\vifm.nuspec -NoPackageAnalysis'.\nAttempting to build package from 'vifm.nuspec'.\nThe element 'metadata' in namespace 'http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd' cannot contain text. List of possible elements expected: 'releaseNotes, frameworkAssemblies, tags, copyright, iconUrl, dependencies, references, language, requireLicenseAcceptance, licenseUrl' in namespace 'http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd'.\nReading environment variables from registry. Please wait... Done.\nC:\\dev\\ChocolateyPackages [master +0 ~3 -0]> $LASTEXITCODE\n0\nI am using 0.9.8.23.\nEDIT: This is covered by Issue #256.\n. nuget.exe returns 1:\nC:\\dev\\ChocolateyPackages [master +1 ~1 -0 !]> C:\\Chocolatey\\chocolateyinstall\\nuget.exe pack .\\vifm\\vifm.nuspec -NoPackageAnalysis\nAttempting to build package from 'vifm.nuspec'.\nThe element 'metadata' in namespace 'http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd' cannot contain text. List of possible elements expected: 'releaseNotes, frameworkAssemblies, tags, copyright, iconUrl, dependencies, references, language, requireLicenseAcceptance, licenseUrl' in namespace 'http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd'.\nC:\\dev\\ChocolateyPackages [master +1 ~1 -0 !]> $LASTEXITCODE\n1\nNote that I manufactured the error in both cases to test the return code by editing my nuspec file to be invalid XML.\n. I've written a failing test. I've never used pester before, but hopefully it is correct...\n``` PowerShell\nDescribe \"When calling cpack with an invalid nuspec\" {\n  cpack 'c:\\some\\bogus\\path'\n  $cinstExitCode = $LASTEXITCODE\nIt \"should return a non-zero exit code\" {\n    $cinstExitCode | Should Not Be 0\n  }\n}\n``\n. I've had a go at this, but am struggling to come up with a valid solution and test.\n1. The fix appears to be to uncomment#throw $errorsat line 22 in Chocolatey-Pack.ps1 and removeWrite-Host $errors -BackgroundColor Red -ForegroundColor Whitefrom line 21.\n2. I have had a look through the git history of that file, but struggled to understand why the line is currently commented out, so I don't really understand the ramifications of reinstating it.\n3. My test code in a previous comment (above) is flawed because it will callcpack.batfrom the o/s path, not from the current repository. Becausecpack.batis generated, it will not be possible to call it from the current repository.\n4. If I call Chocolatey-Pack directly, it will look fornuget.exe` in the wrong place.\nThe only viable solution I can think of (but haven't tried yet) is to mock out Start-Process and Get-Content and call Chocolatey-Pack directly to ensure that it throws an exception. Unfortunately, it is possible for a regression to appear in the .bat file or exception handling some time in the future because this is not a complete end-to-end test. My questions are, do you think this solution is viable, and do you think it is sufficient?\nNote: this is my proposed fix (without test):\npatch\ndiff --git a/src/functions/Chocolatey-Pack.ps1 b/src/functions/Chocolatey-Pack.ps1\nindex c46b2f1..4122389 100644\n--- a/src/functions/Chocolatey-Pack.ps1\n+++ b/src/functions/Chocolatey-Pack.ps1\n@@ -18,7 +18,6 @@ param(\n   }\n   $errors = Get-Content $errorLogFile\n   if ($errors -ne '') {\n-    Write-Host $errors -BackgroundColor Red -ForegroundColor White\n-    #throw $errors\n+    throw $errors\n   }\n }\n\\ No newline at end of file\n. Looks like #256 is what we're discussing here...\n. I'm still seeing this bug in version 0.9.8.23. Has this been a regression?\nC:\\dev\\ChocolateyPackages [master +0 ~3 -0]> cpack.bat .\\vifm\\vifm.nuspec\nCalling 'C:\\Chocolatey\\chocolateyinstall\\nuget.exe pack .\\vifm\\vifm.nuspec -NoPackageAnalysis'.\nAttempting to build package from 'vifm.nuspec'.\nThe element 'metadata' in namespace 'http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd' cannot contain text. List of possible elements expected: 'releaseNotes, frameworkAssemblies, tags, copyright, iconUrl, dependencies, references, language, requireLicenseAcceptance, licenseUrl' in namespace 'http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd'.\nReading environment variables from registry. Please wait... Done.\nC:\\dev\\ChocolateyPackages [master +0 ~3 -0]> $LASTEXITCODE\n0\n. I can confirm that the cpack command doesn't return the error code that I am expecting:\nC:\\dev\\ChocolateyPackages [master +0 ~3 -0]> cpack .\\vifm\\vifm.nuspec\nCalling 'C:\\Chocolatey\\chocolateyinstall\\nuget.exe pack .\\vifm\\vifm.nuspec -NoPackageAnalysis'.\nAttempting to build package from 'vifm.nuspec'.\nThe element 'metadata' in namespace 'http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd' cannot contain text. List of possible elements expected: 'releaseNotes, frameworkAssemblies, tags, copyright, iconUrl, dependencies, references, language, requireLicenseAcceptance, licenseUrl' in namespace 'http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd'.\nReading environment variables from registry. Please wait... Done.\nC:\\dev\\ChocolateyPackages [master +0 ~3 -0]> $LASTEXITCODE\n0\nI am using 0.9.8.23.\nEDIT: This is covered by Issue #256.\n. nuget.exe returns 1:\nC:\\dev\\ChocolateyPackages [master +1 ~1 -0 !]> C:\\Chocolatey\\chocolateyinstall\\nuget.exe pack .\\vifm\\vifm.nuspec -NoPackageAnalysis\nAttempting to build package from 'vifm.nuspec'.\nThe element 'metadata' in namespace 'http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd' cannot contain text. List of possible elements expected: 'releaseNotes, frameworkAssemblies, tags, copyright, iconUrl, dependencies, references, language, requireLicenseAcceptance, licenseUrl' in namespace 'http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd'.\nC:\\dev\\ChocolateyPackages [master +1 ~1 -0 !]> $LASTEXITCODE\n1\nNote that I manufactured the error in both cases to test the return code by editing my nuspec file to be invalid XML.\n. I've written a failing test. I've never used pester before, but hopefully it is correct...\n``` PowerShell\nDescribe \"When calling cpack with an invalid nuspec\" {\n  cpack 'c:\\some\\bogus\\path'\n  $cinstExitCode = $LASTEXITCODE\nIt \"should return a non-zero exit code\" {\n    $cinstExitCode | Should Not Be 0\n  }\n}\n``\n. I've had a go at this, but am struggling to come up with a valid solution and test.\n1. The fix appears to be to uncomment#throw $errorsat line 22 in Chocolatey-Pack.ps1 and removeWrite-Host $errors -BackgroundColor Red -ForegroundColor Whitefrom line 21.\n2. I have had a look through the git history of that file, but struggled to understand why the line is currently commented out, so I don't really understand the ramifications of reinstating it.\n3. My test code in a previous comment (above) is flawed because it will callcpack.batfrom the o/s path, not from the current repository. Becausecpack.batis generated, it will not be possible to call it from the current repository.\n4. If I call Chocolatey-Pack directly, it will look fornuget.exe` in the wrong place.\nThe only viable solution I can think of (but haven't tried yet) is to mock out Start-Process and Get-Content and call Chocolatey-Pack directly to ensure that it throws an exception. Unfortunately, it is possible for a regression to appear in the .bat file or exception handling some time in the future because this is not a complete end-to-end test. My questions are, do you think this solution is viable, and do you think it is sufficient?\nNote: this is my proposed fix (without test):\npatch\ndiff --git a/src/functions/Chocolatey-Pack.ps1 b/src/functions/Chocolatey-Pack.ps1\nindex c46b2f1..4122389 100644\n--- a/src/functions/Chocolatey-Pack.ps1\n+++ b/src/functions/Chocolatey-Pack.ps1\n@@ -18,7 +18,6 @@ param(\n   }\n   $errors = Get-Content $errorLogFile\n   if ($errors -ne '') {\n-    Write-Host $errors -BackgroundColor Red -ForegroundColor White\n-    #throw $errors\n+    throw $errors\n   }\n }\n\\ No newline at end of file\n. Looks like #256 is what we're discussing here...\n. ",
    "jbuedel": "This still happens in at least one situation. See below where I have passed an invalid $version$ token.\n\n. New issue created. https://github.com/chocolatey/choco/issues/469\n. This still happens in at least one situation. See below where I have passed an invalid $version$ token.\n\n. New issue created. https://github.com/chocolatey/choco/issues/469\n. ",
    "ChrisMissal": ":sparkles: shiny! :sparkles:\n. :sparkles: shiny! :sparkles:\n. ",
    "filipw": "+1000!\n. +1000!\n. ",
    "ChaseFlorell": "I have to agree with @abombss on this. If I'm on my mac, I'll use brew, I'll use apt-get on my Ubuntu box, and I'll use cinst on windows... heck, maybe I'll make an alias on all of them for simplicity, but I personally don't need a multi-platform solution.\nUnless I'm missing something whereby ScriptCS gives more power/flexibility/capability for the Windows packages over what PowerShell can do.\nJust my $0.02\n. I do agree that beside PowerShell, ScriptCS looks really neat. In fact, IMO, Microsoft should scrap PS and replace it with ScriptCS. I'm not a huge fan of having to learn yet another language for use in 1% of my projects. I'd love to write all of my scripting in C# along side my actual project code.\nFor the purpose of this thread, I personally felt that adding ScriptCS support didn't make sense compared to other topics like \"Passing Parameters to Packages\". No this is something that would be amazing... Inserting a license key could make installs really slick.\n. We're having this exact same issue. If we can pass the directory in as a switch when we do the initial chocolatey install (install.ps1), we could save the string to the chocolatey.config and have chocolatey check there first before defaulting to the path specified in the $env:Temp variable. If it exists, use it, else, use the $env:Temp\nnote: currently we run a script before doing any choco install, but if we forget, all hell breaks loose.\n$tempPath = \"C:\\temp\"\nNew-Item $tempPath -Type Directory -Force\n$env:TEMP = $tempPath\n. That's just because you created such a great structure that most changes are easy ones.\nFor us, we can't wait for the next incarnation of Choco, so we \"could\" fork and run our own, but it would definitely be nice to be able to simply create a non-impactful PR :)\n. I have to agree with @abombss on this. If I'm on my mac, I'll use brew, I'll use apt-get on my Ubuntu box, and I'll use cinst on windows... heck, maybe I'll make an alias on all of them for simplicity, but I personally don't need a multi-platform solution.\nUnless I'm missing something whereby ScriptCS gives more power/flexibility/capability for the Windows packages over what PowerShell can do.\nJust my $0.02\n. I do agree that beside PowerShell, ScriptCS looks really neat. In fact, IMO, Microsoft should scrap PS and replace it with ScriptCS. I'm not a huge fan of having to learn yet another language for use in 1% of my projects. I'd love to write all of my scripting in C# along side my actual project code.\nFor the purpose of this thread, I personally felt that adding ScriptCS support didn't make sense compared to other topics like \"Passing Parameters to Packages\". No this is something that would be amazing... Inserting a license key could make installs really slick.\n. We're having this exact same issue. If we can pass the directory in as a switch when we do the initial chocolatey install (install.ps1), we could save the string to the chocolatey.config and have chocolatey check there first before defaulting to the path specified in the $env:Temp variable. If it exists, use it, else, use the $env:Temp\nnote: currently we run a script before doing any choco install, but if we forget, all hell breaks loose.\n$tempPath = \"C:\\temp\"\nNew-Item $tempPath -Type Directory -Force\n$env:TEMP = $tempPath\n. That's just because you created such a great structure that most changes are easy ones.\nFor us, we can't wait for the next incarnation of Choco, so we \"could\" fork and run our own, but it would definitely be nice to be able to simply create a non-impactful PR :)\n. ",
    "glennblock": "Yes!!!!\n. Sure. Having support doesn't mean only using one. You can choose whichever is best depending on the need, like every other technology choice :-)\n. OK Gary, I'll test that out, thanks!\nOn Sun, Oct 13, 2013 at 5:09 PM, Gary Ewan Park notifications@github.comwrote:\n\nHello,\nAre you running the pre release version of chocolatey? I believe that this\nis taken care of already.\nTry cup chocolatey -pre to try out the new bits.\nGary\nSent from my Windows Phone\n\nFrom: Glenn Blockmailto:notifications@github.com\nSent: 13/10/2013 23:38\nTo: chocolatey/chocolateymailto:chocolatey@noreply.github.com\nSubject: [chocolatey] Remove the reopen the terminal when installing\n(#350)\nCurrently whenever I install with chocolatey I need to reopen my terminal\nwindows, as it adds a new variable to the path.\nnpm doesn't require this as it has a central folder which is in the path\nwhich cmd files are added to for each global module. uninstalling removes\nthe cmd from that location.\nthe cmd in this case would change to the directory where the chocolatey\napp is installed and run it passing in any args.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/issues/350\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/350#issuecomment-26230388\n.\n. This is very good news, thanks!\n\nOn Sun, Oct 13, 2013 at 5:51 PM, Rob Reynolds notifications@github.comwrote:\n\nWhat Gary said... :)\nOn Sunday, October 13, 2013, Glenn Block wrote:\n\nOK Gary, I'll test that out, thanks!\nOn Sun, Oct 13, 2013 at 5:09 PM, Gary Ewan Park <\nnotifications@github.com>wrote:\n\nHello,\nAre you running the pre release version of chocolatey? I believe that\nthis\nis taken care of already.\nTry cup chocolatey -pre to try out the new bits.\nGary\nSent from my Windows Phone\n\nFrom: Glenn Block>\nSent: 13/10/2013 23:38\nTo: chocolatey/chocolatey>\nSubject: [chocolatey] Remove the reopen the terminal when installing\n(#350)\nCurrently whenever I install with chocolatey I need to reopen my\nterminal\nwindows, as it adds a new variable to the path.\nnpm doesn't require this as it has a central folder which is in the\npath\nwhich cmd files are added to for each global module. uninstalling\nremoves\nthe cmd from that location.\nthe cmd in this case would change to the directory where the\nchocolatey\napp is installed and run it passing in any args.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/issues/350\n\u2014\nReply to this email directly or view it on GitHub<\n\nhttps://github.com/chocolatey/chocolatey/issues/350#issuecomment-26230388>\n\n.\n\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/chocolatey/chocolatey/issues/350#issuecomment-26231058>\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/350#issuecomment-26231202\n.\n. OK, I'll look at it today!\n\nOn Mon, Oct 14, 2013 at 1:38 AM, Gary Ewan Park notifications@github.comwrote:\n\nWelcome to the Chocolatey Alpha Testing program! :-)\nLet us know how you get on, and whether the current functionality in the\nalpha release works and is what you expect. If so, we can go ahead and get\nthis issue closed.\nThanks\nGary\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/350#issuecomment-26242316\n.\n. Yes!!!!\n. Sure. Having support doesn't mean only using one. You can choose whichever is best depending on the need, like every other technology choice :-)\n. OK Gary, I'll test that out, thanks!\n\nOn Sun, Oct 13, 2013 at 5:09 PM, Gary Ewan Park notifications@github.comwrote:\n\nHello,\nAre you running the pre release version of chocolatey? I believe that this\nis taken care of already.\nTry cup chocolatey -pre to try out the new bits.\nGary\nSent from my Windows Phone\n\nFrom: Glenn Blockmailto:notifications@github.com\nSent: 13/10/2013 23:38\nTo: chocolatey/chocolateymailto:chocolatey@noreply.github.com\nSubject: [chocolatey] Remove the reopen the terminal when installing\n(#350)\nCurrently whenever I install with chocolatey I need to reopen my terminal\nwindows, as it adds a new variable to the path.\nnpm doesn't require this as it has a central folder which is in the path\nwhich cmd files are added to for each global module. uninstalling removes\nthe cmd from that location.\nthe cmd in this case would change to the directory where the chocolatey\napp is installed and run it passing in any args.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/issues/350\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/350#issuecomment-26230388\n.\n. This is very good news, thanks!\n\nOn Sun, Oct 13, 2013 at 5:51 PM, Rob Reynolds notifications@github.comwrote:\n\nWhat Gary said... :)\nOn Sunday, October 13, 2013, Glenn Block wrote:\n\nOK Gary, I'll test that out, thanks!\nOn Sun, Oct 13, 2013 at 5:09 PM, Gary Ewan Park <\nnotifications@github.com>wrote:\n\nHello,\nAre you running the pre release version of chocolatey? I believe that\nthis\nis taken care of already.\nTry cup chocolatey -pre to try out the new bits.\nGary\nSent from my Windows Phone\n\nFrom: Glenn Block>\nSent: 13/10/2013 23:38\nTo: chocolatey/chocolatey>\nSubject: [chocolatey] Remove the reopen the terminal when installing\n(#350)\nCurrently whenever I install with chocolatey I need to reopen my\nterminal\nwindows, as it adds a new variable to the path.\nnpm doesn't require this as it has a central folder which is in the\npath\nwhich cmd files are added to for each global module. uninstalling\nremoves\nthe cmd from that location.\nthe cmd in this case would change to the directory where the\nchocolatey\napp is installed and run it passing in any args.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/issues/350\n\u2014\nReply to this email directly or view it on GitHub<\n\nhttps://github.com/chocolatey/chocolatey/issues/350#issuecomment-26230388>\n\n.\n\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/chocolatey/chocolatey/issues/350#issuecomment-26231058>\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/350#issuecomment-26231202\n.\n. OK, I'll look at it today!\n\nOn Mon, Oct 14, 2013 at 1:38 AM, Gary Ewan Park notifications@github.comwrote:\n\nWelcome to the Chocolatey Alpha Testing program! :-)\nLet us know how you get on, and whether the current functionality in the\nalpha release works and is what you expect. If so, we can go ahead and get\nthis issue closed.\nThanks\nGary\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/350#issuecomment-26242316\n.\n. \n",
    "FichteFoll": "After running cup a few times some time ago I currently have these folders in my C:\\Chocolatey\\lib folder:\nAtom.0.101.0\nAtom.0.96.1.0\nflashplayeractivex.13.0.0.182\nflashplayeractivex.13.0.0.206\nflashplayeractivex.14.0.0.125\nflashplayerplugin.13.0.0.182\nflashplayerplugin.13.0.0.206\nflashplayerplugin.14.0.0.125\nWhat I expected: flashplayer derivatives should've been removed, Atom should've copied old user data and then also be removed. If I wanted to have different/multiple versions installed, I would've used cinst.\nNow I face the problem that I don't know which packages are safe to remove or which require additional steps, such as copying user data.\nSo, should package authors take care of that? Most packages don't even have an uninstall script...\nEdit: Just saw #400 and #6. Really sad.\n. How about a meta package that installs all arch versions available for your arch? Like, x86 for a 32bit OS and both x86 and x64 for a 64bit OS? This of course requires two separate packages for the archs too, so you can install them manually if desired.\nOn another note, there are cases where you'd very rarely want both versions installed at the same time and defaulting to installing both could be unnecessary there.\n. :+1: \n. I'd also like to highlight the \"List packages with available updates\" thing, that's something I'd really want to see before updating all the packages or checking each individually.\nAlso, listing and installing (for the lookup) have a pretty long windup time too. If an index file was cached for a few minutes this would be a non-issue.\n. After running cup a few times some time ago I currently have these folders in my C:\\Chocolatey\\lib folder:\nAtom.0.101.0\nAtom.0.96.1.0\nflashplayeractivex.13.0.0.182\nflashplayeractivex.13.0.0.206\nflashplayeractivex.14.0.0.125\nflashplayerplugin.13.0.0.182\nflashplayerplugin.13.0.0.206\nflashplayerplugin.14.0.0.125\nWhat I expected: flashplayer derivatives should've been removed, Atom should've copied old user data and then also be removed. If I wanted to have different/multiple versions installed, I would've used cinst.\nNow I face the problem that I don't know which packages are safe to remove or which require additional steps, such as copying user data.\nSo, should package authors take care of that? Most packages don't even have an uninstall script...\nEdit: Just saw #400 and #6. Really sad.\n. How about a meta package that installs all arch versions available for your arch? Like, x86 for a 32bit OS and both x86 and x64 for a 64bit OS? This of course requires two separate packages for the archs too, so you can install them manually if desired.\nOn another note, there are cases where you'd very rarely want both versions installed at the same time and defaulting to installing both could be unnecessary there.\n. :+1: \n. I'd also like to highlight the \"List packages with available updates\" thing, that's something I'd really want to see before updating all the packages or checking each individually.\nAlso, listing and installing (for the lookup) have a pretty long windup time too. If an index file was cached for a few minutes this would be a non-issue.\n. ",
    "EmberQuill": "The way I see it, the vast majority of packages are not really meant to have multiple versions installed simultaneously. Most things you'd want to install in parallel (like Python 2 / Python 3 and Java 7 / Java 8) are already in separate packages, anyway. For those that aren't, maybe cinst should be used to install a new version without overwriting the old, while cup would by default just update and replace old packages. When/if version pinning ( see #5 ) is implemented, it would help users keep packages they want to keep while updating the rest without breaking anything.\nThe current behavior breaks file assocations (unless you remember to associate files with the shim instead of the application itself, but then all files get the generic Chocolatey icon no matter what program they're assocated with), Explorer integration, and pretty much every other level of integration (other than the shims) with every update. Atom, for example, has a context menu option to Edit with Atom, but I never know what version of Atom will open when I use it. Usually it uses the oldest version available.\n. The way I see it, the vast majority of packages are not really meant to have multiple versions installed simultaneously. Most things you'd want to install in parallel (like Python 2 / Python 3 and Java 7 / Java 8) are already in separate packages, anyway. For those that aren't, maybe cinst should be used to install a new version without overwriting the old, while cup would by default just update and replace old packages. When/if version pinning ( see #5 ) is implemented, it would help users keep packages they want to keep while updating the rest without breaking anything.\nThe current behavior breaks file assocations (unless you remember to associate files with the shim instead of the application itself, but then all files get the generic Chocolatey icon no matter what program they're assocated with), Explorer integration, and pretty much every other level of integration (other than the shims) with every update. Atom, for example, has a context menu option to Edit with Atom, but I never know what version of Atom will open when I use it. Usually it uses the oldest version available.\n. ",
    "ferenczy": "Neither choco clean or choco install <package> -clean works in a version 0.9.8.28, Chocolatey doesn't know such commands.\nchoco update <package> does the same as choco install <package>. Wouldn't be better to remove the update command completely until it will really update packages instead of installing new ones? It's quite confusing. I would use choco install <package> -version x.y.z, if I needed more different versions of one package. I would never expect that update command will not update anything and instead it'll install another version. No package manager works like that.\nHow it looks with a new client currently? Is it still planned to release before the end of 2014?\n. Neither choco clean or choco install <package> -clean works in a version 0.9.8.28, Chocolatey doesn't know such commands.\nchoco update <package> does the same as choco install <package>. Wouldn't be better to remove the update command completely until it will really update packages instead of installing new ones? It's quite confusing. I would use choco install <package> -version x.y.z, if I needed more different versions of one package. I would never expect that update command will not update anything and instead it'll install another version. No package manager works like that.\nHow it looks with a new client currently? Is it still planned to release before the end of 2014?\n. ",
    "stack72": "thanks for this guys!\n. thanks for this guys!\n. ",
    "Atalanta": "Server 2012 Core.\nIs there a feature to enable? Or do I need to write a script to download 7zip or something?\n. Windows Features:\n\n\n\n\n\n. FTR: [System.IO.Compression.ZipFile]::ExtractToDirectory works for extracting the zip file manually.\n\n. It's a fair comment.  I just like having a predictable command-line interface to installing stuff.  We also make great use of Chef, and using the chocolatey LWRP is a convenient way to manage the installation of various packages.\nPerhaps packages could have metadata associated with them indicating whether they work on core?\n. Server 2012 Core.\nIs there a feature to enable? Or do I need to write a script to download 7zip or something?\n. Windows Features:\n\n\n\n\n\n. FTR: [System.IO.Compression.ZipFile]::ExtractToDirectory works for extracting the zip file manually.\n\n. It's a fair comment.  I just like having a predictable command-line interface to installing stuff.  We also make great use of Chef, and using the chocolatey LWRP is a convenient way to manage the installation of various packages.\nPerhaps packages could have metadata associated with them indicating whether they work on core?\n. ",
    "darcyparker": "@rismoney - both chocolatey.org and chocolatey would benefit from a command to query dependencies and dependents.  I understand the nuspec lists dependencies.  By dependents, I mean do a reverse query to figure out what packages are dependent.  (So package A and C may have a dependency on B.  Therefore package B has package A and C as a dependents.)\n. As an implementation example: See npm's packages. For example, look at https://npmjs.org/package/bower it shows dependencies and dependents.\nI am not sure when they build the graph that the dependents are derived from. They may do it on each new submission, or perhaps nightly or every 6 hrs as you suggested.  I don't think it is critical to do it live on each new submission.\n. @rismoney - very cool. The nuget.extensions graphing capability sounds like a great way to build the graph. \nI prefer graphml... but the dgml looks like it is easy to work with and could be transformed to graphml if needed. (I like yEd from www.yworks.com which uses graphml. yworks has very high quality layout algorithms for graphs and they are fast too.)  But for this particular issue, the full graph probably doesn't need to be rendered.  Just filtered trees for each node that shows their dependents. (or a list to show their direct children).  A simple XSLT transform could create the list or tree.\n. @rismoney - both chocolatey.org and chocolatey would benefit from a command to query dependencies and dependents.  I understand the nuspec lists dependencies.  By dependents, I mean do a reverse query to figure out what packages are dependent.  (So package A and C may have a dependency on B.  Therefore package B has package A and C as a dependents.)\n. As an implementation example: See npm's packages. For example, look at https://npmjs.org/package/bower it shows dependencies and dependents.\nI am not sure when they build the graph that the dependents are derived from. They may do it on each new submission, or perhaps nightly or every 6 hrs as you suggested.  I don't think it is critical to do it live on each new submission.\n. @rismoney - very cool. The nuget.extensions graphing capability sounds like a great way to build the graph. \nI prefer graphml... but the dgml looks like it is easy to work with and could be transformed to graphml if needed. (I like yEd from www.yworks.com which uses graphml. yworks has very high quality layout algorithms for graphs and they are fast too.)  But for this particular issue, the full graph probably doesn't need to be rendered.  Just filtered trees for each node that shows their dependents. (or a list to show their direct children).  A simple XSLT transform could create the list or tree.\n. ",
    "equinoxmatt": "Is this due at some point? Seems quite fundamental for a package manager.  npm is a good comparison, but a better one would be apt used on Ubuntu.  After all, chocolatey refers to apt on it's website.\nYou can find dependent packages on apt easily.. Fundamental is probably a strong word.  However most package managers I have used have the ability to look at what package is depending on it.  \nUse case is when you have a package installed and you are unsure if removing it would affect any other packages..... Is this due at some point? Seems quite fundamental for a package manager.  npm is a good comparison, but a better one would be apt used on Ubuntu.  After all, chocolatey refers to apt on it's website.\nYou can find dependent packages on apt easily.. Fundamental is probably a strong word.  However most package managers I have used have the ability to look at what package is depending on it.  \nUse case is when you have a package installed and you are unsure if removing it would affect any other packages..... ",
    "lmayorga1980": "Thanks! Now I can verify if a package is already installed on the machine.\nC:\\Chocolatey\\bin\\cver.bat 7zip -lo | findstr \"no version\"\nThe %errorlevel% variable will be 0 if it can't find the package and this is what i am looking for my puppet recipe.\nThanks again.\n. Right. If it returns 0 then it will install the package. If not it will not do anything.\nhttps://github.com/chocolatey/puppet-chocolatey does not work properly when you set specific versions.\n. When I add a specific version to install it still downloads the latest version rather than the one on the \"ensure\" attribute.\n. Then it makes perfect sense now.  \nThanks.\n. What about adding support for relative paths instead of full paths \nhttps://github.com/chocolatey/chocolatey/wiki/HelpersInstallChocolateyInstallPackage\n. I believe this has nothing to do with how the package is created but how the command choco install actually works.\nFor instance, currently i am trying to send an argument -i and also -installArguments and I can't use both in the same line. \n. @ferventcoder https://gist.github.com/lmayorga1980/267504e8184bce4b3693\n. @ferventcoder It seems that it worked from the command line without any issues but also it seems that the both parameters were send correctly to the siteminder installer\nCommand Line Args:\n0:  -i\n1:  silent\n2:  -f\n3:  C:\\Temp\\siteminder-12.51-win64.properties\nI think that it might be an issue with puppet-chocolatey puppet module. \n@rismoney could probably help us with this issue. \n. Thanks! Now I can verify if a package is already installed on the machine.\nC:\\Chocolatey\\bin\\cver.bat 7zip -lo | findstr \"no version\"\nThe %errorlevel% variable will be 0 if it can't find the package and this is what i am looking for my puppet recipe.\nThanks again.\n. Right. If it returns 0 then it will install the package. If not it will not do anything.\nhttps://github.com/chocolatey/puppet-chocolatey does not work properly when you set specific versions.\n. When I add a specific version to install it still downloads the latest version rather than the one on the \"ensure\" attribute.\n. Then it makes perfect sense now.  \nThanks.\n. What about adding support for relative paths instead of full paths \nhttps://github.com/chocolatey/chocolatey/wiki/HelpersInstallChocolateyInstallPackage\n. I believe this has nothing to do with how the package is created but how the command choco install actually works.\nFor instance, currently i am trying to send an argument -i and also -installArguments and I can't use both in the same line. \n. @ferventcoder https://gist.github.com/lmayorga1980/267504e8184bce4b3693\n. @ferventcoder It seems that it worked from the command line without any issues but also it seems that the both parameters were send correctly to the siteminder installer\nCommand Line Args:\n0:  -i\n1:  silent\n2:  -f\n3:  C:\\Temp\\siteminder-12.51-win64.properties\nI think that it might be an issue with puppet-chocolatey puppet module. \n@rismoney could probably help us with this issue. \n. ",
    "brendanator": "I'll send a message to the package owner.\nThanks\n. I'll send a message to the package owner.\nThanks\n. ",
    "breyed": "I thought about the Google group, and indeed that is the right place for an in-depth conversation. I submitted an issue here because I felt there was a problem worthy of being tracked to closure, however that may come about.\nRegarding the .install suffix, I saw the FAQ entry about it, and the blog post that it referred to. Even then, it still wasn't clear what the best approach is, because the rules for virtual packages are fuzzy to me, and it was unclear how fully baked its implementation is. It was at this point when I realized, \"Wait a minute! The whole point is I'm not supposed to be researching this!\" Hence, this GitHub issue.\nTo be fair, saving researching time isn't the whole point. Rismoney's point about the scripting advantages when there are multiple computers is right on: that's another great aspect of Chocolatey. Likewise, I agree we should research our packages. But let's let Chocolatey be a way to minimize the research need. Once I know I want (or at least know I want to try) 7-Zip, let me stop my research there, and not have to research a flavor of 7-Zip. There is no reason why there can't be a single \"one way to rule them all\" to install 7-Zip on anyone's computer, so that we all fall frictionlessly into the \"pit of success\". Such a feature is entirely compatible with the feature to script for multiple computers.\nI think I'm out of tech cliche points of this comment, so I'll stop there. :-) I'll let the moderators decide if it makes sense to move this thread over to Google groups.\n. Thanks. That helps me understand the differences between the three packages. I would caution, however, against considering documentation to be the answer. If a new user has to read the docs, much of Chocolatey's potential value is lost. A better answer is design. Are multiple packages really necessary? If the answer would seem to be yes, but the reason is mainly to support non-admin users, then the question should become how to support non-admin users while incurring zero additional friction for admin users.\nProposition: There is \"one best way\" to install a package if the user can UAC elevate (or already has elevated permissions). There is \"one best way\" to install that package if the user cannot. For some packages, the two \"best ways\" may even be the same, but in any case, there are no more than two ways. When there are two, they can both be included in a single package. The end user doesn't need to choose which to use, because Chocolatey can examine the user's Windows group membership. This is analogous to how NuGet packages include implementations for .NET 3.5, 4.0, 4.5, Silverlight, etc., and automatically deploy the right one.\n. Whether language variants are handled as multiple packages, subsections of a single package, or what have you, should be an implementation detail hidden from the end user. Either way, the user should see a single choice that matches his culture if possible, or the fallback culture otherwise.\nAn exception is your well-thought scenario of a trailing cultural version. In this case, the user needs to make a choice, depending on whether the version updates are worth sacrificing culture preference. In that case, the user should still see a single package, but should be presented information he can use to decide whether to deviate from the default installation choice.\nFor example, a search for package Foo from a French culture could give a result like this:\nFoo 1.2.1\nThe latest version in any culture is 1.3.1 (English).\nBy: freindsoffoo\nVoici information sur le grand et excellent Foo.\nThe key is the second line, alerting the user of the version-culture tradeoff (it would ideally be in French along with the rest of the site). Accordingly, the installation text box should show how to choose the non-default:\nc:\\> cinst foo\n   or to install 1.3.1 (English)\nc:\\> cinst foo -latestCulture\nThe \u201cor\u201d line and the non-default option should be in smaller text, to keep focus on the primary workflow.\n. I thought about the Google group, and indeed that is the right place for an in-depth conversation. I submitted an issue here because I felt there was a problem worthy of being tracked to closure, however that may come about.\nRegarding the .install suffix, I saw the FAQ entry about it, and the blog post that it referred to. Even then, it still wasn't clear what the best approach is, because the rules for virtual packages are fuzzy to me, and it was unclear how fully baked its implementation is. It was at this point when I realized, \"Wait a minute! The whole point is I'm not supposed to be researching this!\" Hence, this GitHub issue.\nTo be fair, saving researching time isn't the whole point. Rismoney's point about the scripting advantages when there are multiple computers is right on: that's another great aspect of Chocolatey. Likewise, I agree we should research our packages. But let's let Chocolatey be a way to minimize the research need. Once I know I want (or at least know I want to try) 7-Zip, let me stop my research there, and not have to research a flavor of 7-Zip. There is no reason why there can't be a single \"one way to rule them all\" to install 7-Zip on anyone's computer, so that we all fall frictionlessly into the \"pit of success\". Such a feature is entirely compatible with the feature to script for multiple computers.\nI think I'm out of tech cliche points of this comment, so I'll stop there. :-) I'll let the moderators decide if it makes sense to move this thread over to Google groups.\n. Thanks. That helps me understand the differences between the three packages. I would caution, however, against considering documentation to be the answer. If a new user has to read the docs, much of Chocolatey's potential value is lost. A better answer is design. Are multiple packages really necessary? If the answer would seem to be yes, but the reason is mainly to support non-admin users, then the question should become how to support non-admin users while incurring zero additional friction for admin users.\nProposition: There is \"one best way\" to install a package if the user can UAC elevate (or already has elevated permissions). There is \"one best way\" to install that package if the user cannot. For some packages, the two \"best ways\" may even be the same, but in any case, there are no more than two ways. When there are two, they can both be included in a single package. The end user doesn't need to choose which to use, because Chocolatey can examine the user's Windows group membership. This is analogous to how NuGet packages include implementations for .NET 3.5, 4.0, 4.5, Silverlight, etc., and automatically deploy the right one.\n. Whether language variants are handled as multiple packages, subsections of a single package, or what have you, should be an implementation detail hidden from the end user. Either way, the user should see a single choice that matches his culture if possible, or the fallback culture otherwise.\nAn exception is your well-thought scenario of a trailing cultural version. In this case, the user needs to make a choice, depending on whether the version updates are worth sacrificing culture preference. In that case, the user should still see a single package, but should be presented information he can use to decide whether to deviate from the default installation choice.\nFor example, a search for package Foo from a French culture could give a result like this:\nFoo 1.2.1\nThe latest version in any culture is 1.3.1 (English).\nBy: freindsoffoo\nVoici information sur le grand et excellent Foo.\nThe key is the second line, alerting the user of the version-culture tradeoff (it would ideally be in French along with the rest of the site). Accordingly, the installation text box should show how to choose the non-default:\nc:\\> cinst foo\n   or to install 1.3.1 (English)\nc:\\> cinst foo -latestCulture\nThe \u201cor\u201d line and the non-default option should be in smaller text, to keep focus on the primary workflow.\n. ",
    "corkupine": "Yeah...'command help' would let all the help detail live with the commands...not a bad idea.\n. :+1: I'll get a pull request in as soon as I get some free time.\n. So what do you think I keep going in the same direction for now? It's close to the git model, will be an improvement, and you can consider caching wiki pages and rendering markdown in the console later ;) \n. @gep13 Separate files it is. My availability is pretty well saturated with work, so will get to it as I can.\n. Yeah...'command help' would let all the help detail live with the commands...not a bad idea.\n. :+1: I'll get a pull request in as soon as I get some free time.\n. So what do you think I keep going in the same direction for now? It's close to the git model, will be an improvement, and you can consider caching wiki pages and rendering markdown in the console later ;) \n. @gep13 Separate files it is. My availability is pretty well saturated with work, so will get to it as I can.\n. ",
    "DavidS": "To summarize, the problem is that setting a system var requires admin rights, which are not available when the user installs chocolatey without elevating the shell which is used to install it.\nHave I got that right?\n. To summarize, the problem is that setting a system var requires admin rights, which are not available when the user installs chocolatey without elevating the shell which is used to install it.\nHave I got that right?\n. ",
    "apapadimoulis": "Any updates on this?\nFor our use case it's odd, b/c Chocolatey is designed to be installed once per machine (based on default of C:\\Chocolatey instead of local apps), but there is no way to detect if it installed since this variable is set as a user variable. \n. Thanks; any suggestion on how to reliably detect the installation directory of chocoaltey? That\u2019s what we\u2019re mostly looking to do\u2026\n. I had considered that... but that basically just searches PATH (a user variable), so this only works for the user that installed chocolatey. \n. Any updates on this?\nFor our use case it's odd, b/c Chocolatey is designed to be installed once per machine (based on default of C:\\Chocolatey instead of local apps), but there is no way to detect if it installed since this variable is set as a user variable. \n. Thanks; any suggestion on how to reliably detect the installation directory of chocoaltey? That\u2019s what we\u2019re mostly looking to do\u2026\n. I had considered that... but that basically just searches PATH (a user variable), so this only works for the user that installed chocolatey. \n. ",
    "MChudak": "Ok, if it's not too complicated I should handle it. You can contact me e.g. on chudak.maciej at gmail.\nI've used Inkscape to do this one. I can recolour it to match the current NuGet logo, if that would help.\n. Ok, if it's not too complicated I should handle it. You can contact me e.g. on chudak.maciej at gmail.\nI've used Inkscape to do this one. I can recolour it to match the current NuGet logo, if that would help.\n. ",
    "PaulMead": "So what is the correct way to use this helper for MSI's then? Currently with v0.9.8.23 of Chocolatey, using something like : Uninstall-ChocolateyPackage $packageName $fileType $silentArgs \"$url\" \nFails as the command it generates is of the form:\nMSIEXEC /x $silentArgs $url\nBut should be \nMSIEXEC /x $url $silentArgs\nHave I missed something with regards to how this helper should be used?\n. @gep13 Thanks for the help, the second method you suggested worked for the msi\n. So what is the correct way to use this helper for MSI's then? Currently with v0.9.8.23 of Chocolatey, using something like : Uninstall-ChocolateyPackage $packageName $fileType $silentArgs \"$url\" \nFails as the command it generates is of the form:\nMSIEXEC /x $silentArgs $url\nBut should be \nMSIEXEC /x $url $silentArgs\nHave I missed something with regards to how this helper should be used?\n. @gep13 Thanks for the help, the second method you suggested worked for the msi\n. ",
    "justinmk": "From the same cmd window:\n```\n@powershell $psversiontable.psversion\nMajor  Minor  Build  Revision\n\n2      0      -1     -1\n```\n. I have contacted the maintainer and referenced this issue. Thanks!\n. From the same cmd window:\n```\n@powershell $psversiontable.psversion\nMajor  Minor  Build  Revision\n\n2      0      -1     -1\n```\n. I have contacted the maintainer and referenced this issue. Thanks!\n. ",
    "perryofpeek": "So the pattern in use here is creating packages with the installer included\nso the package is self contained. If an iso and unpacked into a folder say\n'data\\some_app' and then we call data\\some_app\\setup.exe /args then this\ncan have a number of such files. if that makes sense?\nOn Tue, May 14, 2013 at 4:01 PM, Rob Reynolds notifications@github.comwrote:\n\nIt only does it on exes that are in the package that are NOT used for\ninstall. How much work does it add? How many exes are in your package(s)?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/290#issuecomment-17881676\n.\n\n\n\n. So the pattern in use here is creating packages with the installer included\nso the package is self contained. If an iso and unpacked into a folder say\n'data\\some_app' and then we call data\\some_app\\setup.exe /args then this\ncan have a number of such files. if that makes sense?\nOn Tue, May 14, 2013 at 4:01 PM, Rob Reynolds notifications@github.comwrote:\n\nIt only does it on exes that are in the package that are NOT used for\ninstall. How much work does it add? How many exes are in your package(s)?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/290#issuecomment-17881676\n.\n\n\n\n. ",
    "silbermm": "I would think the new package. Specifically, I'm creating a package that runs a service. When I update it, the service will need to stop as to free up all the resources. \n. So what your saying is that the install script should check for the service,  stop it and then continue normally?  I guess i didn't think about that,  but should work.\nThanks\nRob Reynolds notifications@github.com wrote:\nSorry meant whats difference between uninstall old version/install new\nversion versus upgrade? And by that I'm referring to end state.\nOn Tuesday, May 14, 2013, Matt Silbernagel wrote:\n\nI would think the new package. Specifically, I'm creating a package that\nruns a service. When I update it, the service will need to stop as to free\nup all the resources.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/291#issuecomment-17904986\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/291#issuecomment-17913949.\n. yes, that's correct, I'm creating a windows service. The installer I'm\nusing is InnoScript, but the service is actually created and started\nusing the Java Service Wrapper. So yes, I can put the responsibility on\nthe installer itself. \nThanks again for you help\nOn 05/15/13 at 05:49am, Gary Ewan Park wrote:\n\nWhen you said:\n\"I'm creating a package that runs a service\"\nI take it you mean a windows service?  If so, how are you creating the service in the first place?  Are you using something like WiX?  If so, you can put the responsibility for stoppping/starting this service into the hands of the installation package, i.e. the MSI, and not worry about this within the chocolatey package.\nGary\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/issues/291#issuecomment-17936236\n\n\nMatt Silbernagel\nComputer and Information Analyst\nInstructional and Research Computing\n540D Langsam Library\n513-556-9064\n. I would think the new package. Specifically, I'm creating a package that runs a service. When I update it, the service will need to stop as to free up all the resources. \n. So what your saying is that the install script should check for the service,  stop it and then continue normally?  I guess i didn't think about that,  but should work.\nThanks\nRob Reynolds notifications@github.com wrote:\nSorry meant whats difference between uninstall old version/install new\nversion versus upgrade? And by that I'm referring to end state.\nOn Tuesday, May 14, 2013, Matt Silbernagel wrote:\n\nI would think the new package. Specifically, I'm creating a package that\nruns a service. When I update it, the service will need to stop as to free\nup all the resources.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/291#issuecomment-17904986\n.\n\n\n\nRob\n\"Be passionate in all you do\"\nhttp://devlicio.us/blogs/rob_reynolds\nhttp://ferventcoder.com\nhttp://twitter.com/ferventcoder\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/291#issuecomment-17913949.\n. yes, that's correct, I'm creating a windows service. The installer I'm\nusing is InnoScript, but the service is actually created and started\nusing the Java Service Wrapper. So yes, I can put the responsibility on\nthe installer itself. \nThanks again for you help\nOn 05/15/13 at 05:49am, Gary Ewan Park wrote:\n\nWhen you said:\n\"I'm creating a package that runs a service\"\nI take it you mean a windows service?  If so, how are you creating the service in the first place?  Are you using something like WiX?  If so, you can put the responsibility for stoppping/starting this service into the hands of the installation package, i.e. the MSI, and not worry about this within the chocolatey package.\nGary\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/chocolatey/chocolatey/issues/291#issuecomment-17936236\n\n\nMatt Silbernagel\nComputer and Information Analyst\nInstructional and Research Computing\n540D Langsam Library\n513-556-9064\n. ",
    "gabisa": "IMO chocolatey update behavior has a BIG miss: excepting that it updates the package installation, it doesn't run the chocolateyUninstall.ps1 script for the installed package! If in the chocolateyInstall.ps1 some resources are created and in a higher version some of them are removed or renamed, the final result would be that after the upgrade, the resources will be represent the union (merge) of both versions instead of representing just the resources corresponding to the higher version.\nEx: At the installation time in the chocolateyInstall.ps1a folder / files stucture is created. In a higher package version, this structure is changed: some folder / files are kept, others are renamed and some are deleted. By updating, the result is the old folder / files structure merged with the new folder / files structure, which is wrong!\nIMO, the correct behavior for the update in this situation is: \n- if no same version detected - do nothing\n- if a higher version is detected:\n  - run the uninstall for the old version - execute the chocolateyUninstall.ps1 script (if exists)\n  - run the install for the new version - execute the chocolateyInstall.ps1 script (if exists)\nIt is the responsibility of the scripts provider to correctly handle the resource manipulation during the uninstall/install.\nI think that this way, both the initial issue in this thread and also the issue that I described in this post could be addressed. Unfortunately I don't see an easy way to answer these needs...\nAny comments?\n. It is ALWAYS the responsibility of the script provider to properly handle these operations correctly. The rest are exceptions and these faulty scripts should be fixed, as opposed to not executing the proper upgrade sequence.\nI can imagine an other scenario in which \"some\" old files are left on \"some\" path and \"some\" faulty script could find and use them although it should not as new files are available... IMO this situation is at least as dangerous as yours...\nI think that chocolatey has to follow the right sequence. In order to address your situation, some switch or customization could be added (and used only for those cases).  Otherwise, the result would be similar with a \"garbage collector\" preventing serious applications to use it. I am currently estimating if this can suit our company's needs and apparently we cannot agree in this regard. We have our NuGet server, we handle just our packages and the scripts are ours. There is no reason why we cannot handle this legit situation properly while Chocolatey seems to care more about incorrect packages/installations...\n. Actually I have an idea: a slightly changed copy of \"cup\" command that will execute the right sequence. The old one will stay as it is.\nI also think that it is a miss in the documentation, as nowhere I could find if any of the scripts are executed and when. All my deductions were based on tries and searching the net...\nWhat do you think?\n. I solved my case by doing an unconditional uninstall followed by an install. I know, this will always download and install the package but it's ok for us. \nThanks everybody for being involved and trying to help! Hopefully chocolatey will be able someday to directly handle an update for a normal situation in which both install and uninstall are properly designed,\nespecially when you deal with your own packages and your own NuGet server...\n. IMO chocolatey update behavior has a BIG miss: excepting that it updates the package installation, it doesn't run the chocolateyUninstall.ps1 script for the installed package! If in the chocolateyInstall.ps1 some resources are created and in a higher version some of them are removed or renamed, the final result would be that after the upgrade, the resources will be represent the union (merge) of both versions instead of representing just the resources corresponding to the higher version.\nEx: At the installation time in the chocolateyInstall.ps1a folder / files stucture is created. In a higher package version, this structure is changed: some folder / files are kept, others are renamed and some are deleted. By updating, the result is the old folder / files structure merged with the new folder / files structure, which is wrong!\nIMO, the correct behavior for the update in this situation is: \n- if no same version detected - do nothing\n- if a higher version is detected:\n  - run the uninstall for the old version - execute the chocolateyUninstall.ps1 script (if exists)\n  - run the install for the new version - execute the chocolateyInstall.ps1 script (if exists)\nIt is the responsibility of the scripts provider to correctly handle the resource manipulation during the uninstall/install.\nI think that this way, both the initial issue in this thread and also the issue that I described in this post could be addressed. Unfortunately I don't see an easy way to answer these needs...\nAny comments?\n. It is ALWAYS the responsibility of the script provider to properly handle these operations correctly. The rest are exceptions and these faulty scripts should be fixed, as opposed to not executing the proper upgrade sequence.\nI can imagine an other scenario in which \"some\" old files are left on \"some\" path and \"some\" faulty script could find and use them although it should not as new files are available... IMO this situation is at least as dangerous as yours...\nI think that chocolatey has to follow the right sequence. In order to address your situation, some switch or customization could be added (and used only for those cases).  Otherwise, the result would be similar with a \"garbage collector\" preventing serious applications to use it. I am currently estimating if this can suit our company's needs and apparently we cannot agree in this regard. We have our NuGet server, we handle just our packages and the scripts are ours. There is no reason why we cannot handle this legit situation properly while Chocolatey seems to care more about incorrect packages/installations...\n. Actually I have an idea: a slightly changed copy of \"cup\" command that will execute the right sequence. The old one will stay as it is.\nI also think that it is a miss in the documentation, as nowhere I could find if any of the scripts are executed and when. All my deductions were based on tries and searching the net...\nWhat do you think?\n. I solved my case by doing an unconditional uninstall followed by an install. I know, this will always download and install the package but it's ok for us. \nThanks everybody for being involved and trying to help! Hopefully chocolatey will be able someday to directly handle an update for a normal situation in which both install and uninstall are properly designed,\nespecially when you deal with your own packages and your own NuGet server...\n. ",
    "jberezanski": "@gabisa:\n\nIMO, the correct behavior for the update in this situation is: \n\u2022if no same version detected - do nothing\n\u2022if a higher version is detected: \u25e6run the uninstall for the old version - execute the chocolateyUninstall.ps1 script (if exists)\n\u25e6run the install for the new version - execute the chocolateyInstall.ps1 script (if exists)\n\nI'm afraid that won't do in the general case.\nMost nontrivial programs create and keep some state that needs to be preserved when upgrading, but removed when uninstalling: configuration, log files etc. Simply running \"uninstall\" and \"install\", without any sort of cooperation between these two, would destroy that state.\nIn addition, an intelligent update (e.g. MSI) could only perform the adjustments necessary to bring the installed software up to the latest version, potentially reducing the time needed to perform the update and minimizing the disturbance to the system.\nTherefore, the scripts and installers need to be aware that they are invoked in an update scenario, so that they are able to act appropriately.\nI see two solutions:\n1) Introduce the \"chocolateyUpdate.ps1\" script mentioned in the title, which should be placed in the newer package (the newer version knows about older versions, but not the other way around). Chocolatey should call that script if it exists (and skip chocolateyUninstall.ps1 from the existing, older package), otherwise fall back to uninstall old + install new.\n2) Add parameter(s) to chocolateyInstall.ps1 and chocolateyUninstall.ps1 to make them aware that they are being called in an update scenario. (Not a fan of this one, because it would complicate those scripts.)\n. @ferventcoder:\n\nAnd this  chocolateyUpdate.ps1  could call the older package's uninstall should the maintainer know the ramifications of this.\n\nPrecisely. The version and path to the package being upgraded could be passed to the update script as parameters, making it really easy.\n@rismoney: That would work, too. However, switching to the single file model brings with itself the challenge of reeducating package maintainers and possibly converting existing packages.\n. I don't understand all the anti-BOM advice.\nA BOM is a very big clue for the software that reads the file that the file is UTF-8. Without the BOM, the software needs to guess by examining the file contents - an inexact and error-prone process - or assume some default encoding. True, there are programs out there which have incomplete/broken UTF-8 implementation and choke on a BOM, but they are not relevant to Chocolatey. On the other hand, .NET I/O classes by default take advantage of the BOM to unambiguously (or, at least, with a very high degree of probability) detect the encoding of opened files, so all .NET programs (in particular, PowerShell and NuGet) are BOM-aware.\nAs a BOM is required for ps1 files (due to PowerShell not playing the guessing game) and not-required-but-sometimes-helpful-for-text-editors for nuspec files, an advice for package creators to always use a BOM would be simpler to follow and less error prone.\n. No fix is necessary, it works right now (0.9.8.27).\nhttps://chocolatey.org/packages/utf8-test\nhttps://github.com/jberezanski/ChocolateyPackages/blob/master/utf8-test/utf8-test.nuspec (note: github web view will not show the BOM, even in Raw mode - you need to clone the repo if you wish to verify)\nThe package was built using cpack and pushed with cpush.\n. It does have when I'm logged in, does not when visiting the page anonymously. Probably because it has not been approved yet (not that I expect it to ever be).\n\n. @Redsandro:\n\nAre you sure you ignored all the 'rules'?\n\nI ignored one rule: \"Do not save your  *.nuspec  files with a Byte Order Mark (BOM)\". I followed the other ones.\n@ferventcoder:\n\nWhen the advice went out we were on Nuget.exe 2.1 and we are using 2.8 now. That could be the difference.\n\nPossible. I found this one reference from 2011 to a NuGet bug with respect to BOM handling, but the bug had apparently been fixed immediately after being reported. Not sure what NuGet version number was that.\nMy test proves that current versions of NuGet and the Chocolatey gallery correctly handle nuspec files saved as UTF-8 with BOM. To sum it up, the technical requirements currently are:\n1) nuspec files: should be UTF-8, BOM is optional\n2) ps1 files: should be UTF-8, BOM is mandatory\nI therefore suggest the following change to the character encoding guidance:\nInstead of those three points\n\u2022 Do not save your  *.nuspec  files with a Byte Order Mark (BOM). A  BOM  is neither required nor recommended for  UTF-8 , because it can lead to several issues.\n\u2022 PowerShell scripts need to be saved in UTF-8 with  BOM . PowerShell is ignoring the standards and needs a  BOM  in order to recognize scripts as  UTF-8 . Otherwise it processes non  ASCII  characters incorrectly.\n\u2022 Don\u2019t use the default Windows Editor. In addition to its lack of features, it can\u2019t even save  UTF-8  files without  BOM (...)\nthis:\n\u2022 DO save your *.nuspec files and PowerShell scripts (*.ps1) with a Byte Order Mark (BOM). It helps the tools parse non-ASCII characters correctly and is required by PowerShell.\n. I think I like the RPM versioning scheme best. The package version there consists of the full version number of packaged software, followed by a distinctly separated package revision number (an integer starting at 1). The third revision of openssl 1.0.1g would be named openssl-1.0.1g-3. That way the package can be fixed without artificially changing the packaged software version number, yet the system remains quite simple and does not present the user with two full-length, four-part version numbers.\nOne way to implement it on top of NuGet infrastructure could be perhaps to expose the packaged software version number to NuGet as the package version and keep the package revision as custom metadata used only by Chocolatey (and visible on the package details page in the gallery). For fixing a package, Chocolatey gallery should allow uploading a new package with the same NuGet-visible version number as the current one but increased revision. As a consequence, updating a package to fix/improve the install script would not prompt an update for users which already have that package installed - a good thing, IMO.\n(To elaborate on the last point, an example: I installed MS SQL 2012 from a package, working around a bug in its chocolateyInstall. After I notified the package owner, he fixed the script and released an updated package. Now that package shows in cver as an available update, but one I do not need or want to install, since I already have a working SQL Server installed by the previous package revision. If the package version exposed to NuGet was the exact version of packaged software, I would not be offered an update - correct, since I do not need it.)\n. In the Resharper case, I'd argue that major versions (with non-transferable licenses) should be released as different packages, e.g. resharper7 and resharper8.\n. Good point. But in that case, the burden of preventing an unwanted/potentially breaking update should ideally lie with the package author, not the user. I.e. the 7.x package should somehow indicate in its metadata that it should not be automatically updated to 8.0 or higher. (But this is more in the topic of #5.)\n. Another thing to consider is that creating a symlink is a privileged operation on Windows, so it would not work for regular users.\n. @mlt right, I forgot about hard links. Coincidentally, Windows itself uses them for similar purpose, creating links in system32 (and other places) to exes and dlls in WinSxS (the unmanaged assembly cache).\n@ferventcoder hard links are fully supported in xp/2003 (actually, even in 2000). The convenient command line tool mklink is only available in Vista+, however, so Chocolatey would need to ship its own simple binary exposing the CreateHardLink API.\nOh, and the logic should fall back to shims in cases when the hard link obviously cannot be used, e.g. $ChocolateyBinRoot is on a different drive than $ChocolateyInstall\\bin, or link creation fails (e.g. both variables seem to point to the same drive, but one or more of the directories is actually a NTFS junction pointing to a different drive or even a file share).\n. The new output formatting looks really nice, much more readable than current Chocolatey output. But the fact that it comes from the new binary implementation is even better news :)\nDo you plan on providing only an exe, or perhaps a PowerShell module as well? Personally, I find it very convenient to be able to invoke chocolatey.ps1 directly from a PS script without paying the overhead of spawning a new process. PS cmdlets could also return objects as their output, making processing that output in scripts much easier and more reliable.\n. In line 33, the -match operator returns a boolean value indicating whether the match succeeded or not. Because this value is neither assigned to a variable nor used in any other way, it becomes part of the function output.\nTo fix this, either:\n1) pipe the result to Out-Null: \n$html -match \"(?ms)data-dl-url=['`\"](.+?)['\\\" ]+data-nodlm-url\" | Out-Nullor, better, 2) actually check if the match succeeded:if ($html -notmatch \"(?ms)data-dl-url='\\\"['\\\" ]+data-nodlm-url\") { throw \"Match failed\" }. The \"sysnative\" special alias is not a feature of \"32-bit shells\" (or cmd.exe in particular), rather [it is provided by the WOW64 layer](http://msdn.microsoft.com/en-us/library/windows/desktop/aa384187.aspx) and available to all 32-bit applications running on 64-bit Windows, PowerShell included.\nThere is no need to pay the cost of invoking an intermediate cmd.exe.\n. The wrapper uninstall issues are already fixed in the not-yet-released 0.9.8.24 (GH-418, GH-446, GH-480).\n. The current implementation ofInvoke-ChocolateyFunctionsimply catches the exception and rethrows its message. This has no effect on control flow. (It is also, by the way, suboptimal behavior because it loses valuable information, such as the type of the exception; athrow` statement without arguments would rethrow the exception without losing information. But that's another matter.)\nYour original implementation would indeed use the exit keyword to terminate running the entire script (and return an exit code). In my opinion internal functions should never make such decisions, as they have no knowledge about the context in which they were called. In such scenario Chocolatey had no chances of handling the error in any way or perform any rollback or cleanup actions. Indeed, a later commit by @ferventcoder (54716e03) disabled the mandatory exit because it interfered with the ability to continue installing subsequent packages if one package failed (ideally, that behavior should be controllable, but in any case the authority of deciding whether to stop execution is with chocolatey.ps1, not with a lower-level, internal command).\nHaving said that, you certainly have a point about returning an error code when something goes wrong. Powershell not doing that is actually a deficiency of powershell.exe when invoked with the -file argument (and documented in about_Language_Keywords). I don't know how Powershell is invoked by Puppet, but in my automation scenario (a Jenkins deployment job) I worked around it by invoking Powershell with my script using the -command argument:\npowershell.exe -command \"& myscript.ps1 args...\"\nthis correctly returns a nonzero exit code if the script encounters an error. Please also note that some (\"non-terminating\") errors are subject to $ErrorHandlingPreference; I usually set it to \"Stop\" (most restrictive) immediately at the beginning of my scripts, so all errors behave like exceptions (e.g. transfer control to the nearest catch clause).\n. My point is, with an exit deep inside an internal function, there would be no way to implement that switch. Also, when an error is encountered during the installation, there is usually some cleanup to be performed, such as deleting the failed package from $Env:ChocolateyInstall\\lib.\nI also believe in failing early, but in a controllable fashion. I would not like it, for example, if fopen() called ExitProcess() if it failed to open the file.\n. Obsoleted by #446. Now that this works, I found a new issue concerning shimgen-generated exes - #449.\n. @ferventcoder currently Chocolatey cannot handle $binRoot set to C:\\, because the installation tracking feature (Write-FileUpdateLog) relies on being able to scan the entire directory hierarchy under $binRoot, which will almost certainly fail (no access to other users' profile directories, for instance).\nSo, without major code changes, a Chocolatey installation with $binRoot = C:\\ is a broken installation. Since the defective code that causes that is already out there, I would suggest implementing an automatic fix: treat C:\\ the same way as an unset $env:ChocolateyBinRoot and reset to the default (C:\\tools). That way users affected by this issue could get it fixed simply by upgrading Chocolatey.\n. How about renaming Get-ChecksumValid to Test-Checksum (or Test-FileChecksum)? It would be more consistent with Powershell cmdlet naming conventions and standard cmdlets, such as Test-Path, Test-Certificate or Test-Connection.\nOr is it too late for that change...?\n. How about verifying the checksum of the cached file as well (if the checksum is provided)? It would make it possible to automatically recover from corrupted downloads, when length matches but content does not. Currently such file will not be downloaded, but will fail the checksum test later.\n. Yes, I've seen that line (that's what I meant by \"the checksum test later\"). However, in the scenario I'm thinking about, it would be too late. Please consider the following sequence of events:\n1. the user invokes cinst foo\n2. chocolateyInstall.ps1 of the foo package invokes Get-ChocolateyWebFile to download http://unreliablehost.com/foo.zip\n3. foo.zip does not exist in the cache, so the condition at L85 fails at $fi.Exists\n4. foo.zip is downloaded, but due to unreliable server/network connection/whatever ends up corrupted\n5. the checksum test at L126 catches the corruption and raises an error\n6. installation fails\n7. the user invokes cinst foo again, hoping this time the file will be downloaded correctly\n8. chocolateyInstall.ps1 of the foo package invokes Get-ChocolateyWebFile to download http://unreliablehost.com/foo.zip\n9. foo.zip exists in the cache and has the expected size, so the condition at L85 passes and $needsDownload is set to $false\n10. foo.zip is not downloaded again and remains corrupted\n11. the checksum test at L126 catches the corruption and raises an error\n12. installation fails\nI propose modifying L85 to:\npowershell\nif ($fi.Exists -and ($fi.Length -eq $headers[\"Content-Length\"]) -and (Get-CheckSumValid -file $fi -checkSum $checksum -checksumType $checksumType))\nThat change would result in failing the condition at step 9 above and redownloading the file, hopefully uncorrupted this time.\nWithout that change, the user would need to delete the cached file by hand (be familiar with cache directory location and layout etc) to fix the broken download.\n. I'd only suggest, instead of complicating things for the caller by using a ref parameter, to return a PSObject with two properties: [string/uri] Url and [bool] Redirected. Or, even simpler, return redirected url or $null if not redirected.\n. Nice. For the record, this should also fix those two bugs:\n- #418 (batch redirects not being removed when uninstalling a package)\n- https://groups.google.com/d/topic/chocolatey/vxad3EOdRSI/discussion (\"-source\" argument causing cinst all to fail with \"invalid URI format\")\n. Done as GH-480, since existing PRs apparently cannot be retargeted.\nShould all PRs be sent against stable by default? It would be helpful to mention it in CONTRIBUTING.md if that's the case.\n. The guidelines did not specify a target branch, but here's a PR :)\n. A very welcome feature! But, why only when no UAC (i.e. why not trigger elevation)?\n. When testing, please be aware that Windows caches manifest information for an executable (including whether the manifest is present or not) for the duration of the logon session, so the external manifest may be ignored by the system until you logoff and logon again, if it has just been added and 7za.exe has been run earlier. To force invalidation of the cached information, change the \"last modified\" time of 7za.exe (the actual value does not matter as long as it is different than the previous time).\n. Yes, you just need to put it next to 7za.exe.\n. Good question. Each exe which might possibly write to a protected location should have a manifest. However, all other exes currently included with Chocolatey (shimgen.exe, checksum.exe, nuget.exe and even shimgen-generated exes in redirects directory) actually do have an embedded manifest with UAC info - you can quickly verify it with the sigcheck SysInternals tool (run sigcheck -m xyz.exe). So only 7za needs to be provided with an external one.\n. It should be. However, there are some gotchas.\nFirst, since Start-Process does not set the $LastExitCode PS variable, you need to use the -PassThru argument to Start-Process to receive a Process object, then check its ExitCode property, e.g.\n$p = Start-Process $7zip (...) -PassThru\n$exitCode = $p.ExitCode\nswitch ($exitCode) {\n    0: { break }\n    1: { throw 'Some files could not be extracted' } # this one is returned for access denied errors\n    2: { throw '7-Zip encountered a fatal error while extracting the files' }\n    7: { throw '7-Zip command line error' }\n    8: { throw '7-Zip out of memory' }\n    255: { throw 'Extraction cancelled by the user' }\n    default: { throw \"7-Zip signalled an unknown error (code $exitCode)\" }\n}\nUnfortunately, Write-FileUpdateLog complicates matters further, as it currently does not allow passing arguments to the scriptblock, so Get-ChocolateyUnzip constructs the scriptblock from strings (complex/messy). A slight modification to Write-FileUpdateLog would support that:\nfunction Write-FileUpdateLog {\n  param (\n    [string] $logFilePath,\n    [string] $locationToMonitor,\n    [scriptblock] $scriptToRun,\n    [object[]] $argumentList\n  )\n  (...)\n  # instead of & $scriptToRun\n  Invoke-Command -ScriptBlock $scriptToRun -ArgumentList $argumentList\n  (...)\n}\nThe scriptblock in Get-ChocolateyUnzip would be constructed so:\n$unzipOps = { \n    param($7zip, $destination, $fileFullPath, [ref]$exitCodeRef)\n    $p = Start-Process $7zip (...) -PassThru\n    $exitCodeRef.Value = $p.ExitCode\n}\n$exitCode = -1\nWrite-FileUpdateLog -logFilePath $zipExtractLogFullPath -locationToMonitor $destination -scriptToRun $unzipOps -argumentList $7zip,$destination,$fileFullPath,([ref]$exitCode)\nswitch ($exitCode) {\n(...)\n(Note the $exitCode argument is passed by reference and inside the scriptblock its value is actually an instance of PSReference<T> with a Value property)\n. Whew, got carried away a bit... Sorry if some of that is too obvious ;-)\n. This reminded me of a problem I had encountered some time ago but forgot to report (#460). If Update-SessionEnvironment is new in 0.9.8.24 and is used in its chocolateyInstall.ps1, this is a similar issue.\n. Hmm, can't find any mention of it, neither on Github, nor on the mailing list.\nBug vs Enhancement: as Choco wiki explicitly encourages using dependency on Chocolatey as means to ensure the required functionality is present, a bug IMO.\nI could take a stab at implementing option 2) some time next week and see if it fixes this issue and possibly #459. Not a bullet-proof solution, but perhaps good enough, and with C#-Choco around the corner it seems unfeasible to put much work into PS-Choco.\n. Whew, talk about big guns and/or a cure worse than the disease ;-) But leaving personal opinions aside...\nThe extraction helper, Get-ChocolateyUnzip, already supports many formats other than zip (full list: 7z, lzma, cab, zip, gzip, bzip2, Z and tar), despite its name, thanks to 7za.exe being used under the cover.\nThe installation helper, Install-ChocolateyZipPackage, unfortunately hardcodes the file extension to zip. This is not really harmful (only misleading), however, as 7za is able to determine the actual archive type even when the extension is wrong. Adding an archive type parameter to Install-ChocolateyZipPackage would be just a tiny change, but the helper should work with other archive types even now.\nThe most complicated case is naturally .tar.gz. There is currently no one-step solution, but a two-step one does exist and is not much more complicated. First download the archive and un-gzip it to a temporary location (using Install-ChocolateyZipPackage), then un-tar it to the final location (using Get-ChocolateyUnzip). Here's a proof of concept using the first publicly downloadable .tar.gz that came into my mind:\nInstall-ChocolateyZipPackage -packagename gzip-src -url ftp://ftp.gnu.org/gnu/gzip/gzip-1.3.12.tar.gz -unzipLocation (Join-Path $env:chocolateyPackageFolder tmp)\nGet-ChocolateyUnzip -fileFullPath (Join-Path $env:chocolateyPackageFolder tmp\\gzip-srcInstall) -destination (Join-Path $env:chocolateyPackageFolder src)\nOne just needs to keep in mind that Chocolatey names downloaded files Install.zip and 7za strips the file extension when extracting a gzip archive, so the extracted tar file is named Install (without extension).\n. Yes, I realize that. The good thing is, despite being unsupported, it works (with just a few little quirks) and is much more convenient to use from scripts.\nJust wanted to share my findings, perhaps they will come useful in the future.\n. Another nasty consequence: the USERNAME variable gets overwritten with \"SYSTEM\" (from Machine scope). This breaks code (including chocolateyInstall/Uninstall.ps1 scripts of second and subsequent packages if multiple are installed in one go) that uses $Env:USERNAME to determine the current user login.\n. There are at least two scenarios when this issue will bite even in supported usage (chocolatey.cmd):\n1) when installing a package with a dependency that needs installing as well: the dependency will be installed normally, but the dependent package will be installed in a crippled environment;\n2) when installing a bunch of packages at once, using packages.config: only the first package will be installed in the correct environment.\nAdd to the list of consequences the fact that PowerShell 4.0 dynamically adds two module locations to PSModulePath, so the following scenario fails:\n- package P depends on package M, where M installs a PowerShell module\n- the user invokes choco install P\n- powershell.exe prepends %UserProfile%\\Documents\\WindowsPowerShell\\Modules and %ProgramFiles%\\WindowsPowerShell\\Modules to PSModulePath\n- M is installed as a dependency and extracts a module to %ProgramFiles%\\WindowsPowerShell\\Modules\\M\n- Update-SessionEnvironment is invoked and resets PSModulePath\n- while being installed, P attempts to load the module M, but it won't be found\n. Well, rebasing changes commit hashes, so they are different commits from Git's point of view. No matter, thanks for merging it!\nBy the way, it seems the merge resulted also in the _env.cmd stuff being pulled into stable, together with CreateNoWindow/nuget (i.e. commits from master that were not present in stable).\n. Should I retarget it to stable (and perhaps GH-479 as well)?\n. I've fixed this as part of GH-476. It is already merged, so it should be present in the next release.\nAs a side note, you're not supposed to put anything in System32\\WindowsPowerShell\\v1.0\\Modules, that directory is reserved for modules that are part of Windows. Please see the Microsoft guidelines for installing PS modules.\n. That's weird. Commits eaf8ab2 and 3ef2604 are shown here in the wrong order. 3ef2604 (\"setup tests: add simulated standard...\") should come first, just after ef5395e (\"Enable mocking Test-AdminRights...\"), then eaf8ab2 (\"setup tests: with admin rights...\"), then 6dfbc44 (\"when running...\"). My source branch for this PR has them in the correct order.\na00ec70 and 05d3e22 are swapped too. What the...?\n. Thanks for the encouragement :)\nI've reimplemented admin rights mocking in a clean way and added an environment manipulation abstraction, together with mock implementation.\nAs an unplanned benefit, tests using those mocking facilities are now actually runnable as standard user - that gives additional security against making systemwide changes due to bugs or test interruption.\nRe your first question, for the record: no, this change will not trigger the UAC prompt. The actual, current process rights (I try to avoid the term 'privileges' as it has a very specific meaning on Windows) are examined.\n. (I guess my earlier comment by e-mail didn't make it through...)\nHere's one (quite important) test improvement and the helper name change suggested earlier.\nSome of the commits could also be squashed for a more streamlined PR - let me know if you'd prefer that.\n. Squashed somewhat (primarily bugfixes and the earlier Test-AdminRights mocking attempt) and rebased on stable.\nOriginal commits available for reference here.\n. @ferventcoder Unfortunately, the unreliability is there, it just has an exceedingly small probability of happening. Please note that my test code does call Unregister-Event, and I still got the occasional cases of std output/error not being captured in its entirety.\nThe cause can be found by analyzing the code of the Powershell eventing subsystem (inside System.Management.Automation, decompiled using e.g. ILSpy). In short, the event processing code transfers event invocations through the CLR thread pool in a fire and forget way, with no means of tracking unprocessed events or waiting for all of them to be processed. So, even if Unregister-Event wanted to ensure all events from the source being unregistered are processed (and it is not documented as doing so), it would have no means of fully achieving that goal.\nGrisly details follow:\nThe core of the eventing subsystem is the internal PSLocalEventManager class, where both registration and event dispatch take place.\nIt turns out, when registering an event subscription, a dynamic method is generated using ILGenerator (like I do in one of my methods in the test script, but the code generated by PSLocalEventManager.GenerateEventHandler() is much more complicated, as it needs to handle all possible delegate signatures). That method is then attached as a handler to the event. When the event is raised, the dynamic method code calls PSEventManager.GenerateEvent(string, object, object[], PSObject) which in turn delegates to PSLocalEventManager.ProcessNewEvent() with bool processSynchronously==false. That method defers actual processing of the event for later, by enqueueing a callback to ProcessNewEventImplementattion() on the CLR thread pool (ThreadPool.QueueUserWorkItem()). ProcessNewEventImplementattion() creates an EventAction object and inserts it in the queue of events awaiting the next processing cycle. The Powershell engine at certain times calls PSLocalEventManager.ProcessPendingActions(), which takes events from the queue and executes the actions registered for each one.\nNow, looking at UnsubscribeEvent() (called by Unregister-Event), it looks like it indeed tries to flush all events from the source being unregistered that are still in the queue. However, there is a certain (usually very short) point of time where the event is not yet in the queue, but exists as a work item queued on the thread pool. These unprocessed work items are not tracked and Unregister-Event ignores them.\nThe problem is very volatile and unpredictable (it requires the thread pool to lag a bit in processing the work items), I cannot reliably reproduce it on my system, but it happens from time to time (slightly more often on a cold system). I've added some more checks to my test code, designed to catch not only total lack of output (as before), but also failure to deliver one or more of the last lines of the output (a more common case).\nBack to Chocolatey, however:\nMy first observation is that it is only necessary to read one of the output streams asynchronously to avoid the deadlock, the other one can be read using ReadToEnd() as before. As it is much more common for the nuget invocation to succeed, I suggest reading the standard output stream synchronously and only using an async technique for the standard error.\nSecond, Register-ObjectEvent could be used as a temporary solution. The unreliability happens rarely, so we should be good for a while (better not being able to display the error than a deadlock - waiting forever for nuget.exe). Meanwhile, I will try to find some time to craft a generic Execute-Process function that will use the best reliable output redirection technique possible on the framework Chocolatey is running on.\n. You created a wrapper function, not an alias. Please see here for a few tips for creating and exporting aliases from PS modules.\n. Indeed, it seems in PowerShell 3+ they started using a job object in Start-Process -Wait (but not in Wait-Process). In PowerShell 2 Start-Process -Wait and Wait-Process used equivalent code.\n@avdv what OS are you running this on - Win7 or older, by any chance?\n. First, a slight correction: I wrote \"in PowerShell 3+ they started using a job object in Start-Process -Wait\", but, to be precise, I only examined PS 2 and 4 (what I have on my system). So I'm not sure about PS 3. Not that it matters much.\n\nIs wait-process available in Posh v2?\n\nDocs say \"Applies To: Windows PowerShell 2.0, Windows PowerShell 3.0\", the implemetation I examined was in a .NET 2.0 assembly (so PS 2). But wouldn't hurt to check on a pure PS 2.0 system.\n\nYes, I'm on Windows 7.\n\nWindows 8 brought a major improvement to job objects in that now they can be nested, so a process in a job can create another job itself. On earlier systems (e.g. 7), the attempt to create a job (to run a child process in, for example, as PS 4 does in Start-Process -Wait) would fail when the process was already part of one. Perhaps Start-Process -Wait does not cope well with the situation when it cannot create the job - the code seems to be written to handle it, but I don't have the time to debug and verify it. Powershell might be running in a job in various circumstances, such as when the application that starts it is itself in a job - e.g. due to Program Compatibility Assistant - or when that application wants to maintain control over PS - as SCCM probably does. As I use Win 8.1, which has nested jobs, the issue did not have a chance of manifesting on my computer.\nI agree that using Wait-Process is a reasonable workaround, now that a probable explanation of the issue might be given. Although dropping the -Wait and adding a comment would add more clarity to the code.\n. > Hrrm, actually that function is only powershell 3.0.\nHuh?\nD:\\>powershell -version 2 gcm wait-process\nCommandType     Name                                               ModuleName\n-----------     ----                                               ----------\nCmdlet          Wait-Process                                       Microsoft.PowerShell.Management\n. Regardless of NuGet limitations, dot-files (i.e. files with empty name) can generally be a pain to work with, such as when \"show extensions for known file types\" is unchecked and the file is associated with a program, e.g. a text editor. Besides, they look definitely non-Windows.\nI'd suggest something like shimlist.txt for the name, with the ability to specify both directories and individual files.\nA cleaner solution would be to extend the nuspec schema, but I seem to recall NuGet not liking that...?\n. @gabisa:\n\nIMO, the correct behavior for the update in this situation is: \n\u2022if no same version detected - do nothing\n\u2022if a higher version is detected: \u25e6run the uninstall for the old version - execute the chocolateyUninstall.ps1 script (if exists)\n\u25e6run the install for the new version - execute the chocolateyInstall.ps1 script (if exists)\n\nI'm afraid that won't do in the general case.\nMost nontrivial programs create and keep some state that needs to be preserved when upgrading, but removed when uninstalling: configuration, log files etc. Simply running \"uninstall\" and \"install\", without any sort of cooperation between these two, would destroy that state.\nIn addition, an intelligent update (e.g. MSI) could only perform the adjustments necessary to bring the installed software up to the latest version, potentially reducing the time needed to perform the update and minimizing the disturbance to the system.\nTherefore, the scripts and installers need to be aware that they are invoked in an update scenario, so that they are able to act appropriately.\nI see two solutions:\n1) Introduce the \"chocolateyUpdate.ps1\" script mentioned in the title, which should be placed in the newer package (the newer version knows about older versions, but not the other way around). Chocolatey should call that script if it exists (and skip chocolateyUninstall.ps1 from the existing, older package), otherwise fall back to uninstall old + install new.\n2) Add parameter(s) to chocolateyInstall.ps1 and chocolateyUninstall.ps1 to make them aware that they are being called in an update scenario. (Not a fan of this one, because it would complicate those scripts.)\n. @ferventcoder:\n\nAnd this  chocolateyUpdate.ps1  could call the older package's uninstall should the maintainer know the ramifications of this.\n\nPrecisely. The version and path to the package being upgraded could be passed to the update script as parameters, making it really easy.\n@rismoney: That would work, too. However, switching to the single file model brings with itself the challenge of reeducating package maintainers and possibly converting existing packages.\n. I don't understand all the anti-BOM advice.\nA BOM is a very big clue for the software that reads the file that the file is UTF-8. Without the BOM, the software needs to guess by examining the file contents - an inexact and error-prone process - or assume some default encoding. True, there are programs out there which have incomplete/broken UTF-8 implementation and choke on a BOM, but they are not relevant to Chocolatey. On the other hand, .NET I/O classes by default take advantage of the BOM to unambiguously (or, at least, with a very high degree of probability) detect the encoding of opened files, so all .NET programs (in particular, PowerShell and NuGet) are BOM-aware.\nAs a BOM is required for ps1 files (due to PowerShell not playing the guessing game) and not-required-but-sometimes-helpful-for-text-editors for nuspec files, an advice for package creators to always use a BOM would be simpler to follow and less error prone.\n. No fix is necessary, it works right now (0.9.8.27).\nhttps://chocolatey.org/packages/utf8-test\nhttps://github.com/jberezanski/ChocolateyPackages/blob/master/utf8-test/utf8-test.nuspec (note: github web view will not show the BOM, even in Raw mode - you need to clone the repo if you wish to verify)\nThe package was built using cpack and pushed with cpush.\n. It does have when I'm logged in, does not when visiting the page anonymously. Probably because it has not been approved yet (not that I expect it to ever be).\n\n. @Redsandro:\n\nAre you sure you ignored all the 'rules'?\n\nI ignored one rule: \"Do not save your  *.nuspec  files with a Byte Order Mark (BOM)\". I followed the other ones.\n@ferventcoder:\n\nWhen the advice went out we were on Nuget.exe 2.1 and we are using 2.8 now. That could be the difference.\n\nPossible. I found this one reference from 2011 to a NuGet bug with respect to BOM handling, but the bug had apparently been fixed immediately after being reported. Not sure what NuGet version number was that.\nMy test proves that current versions of NuGet and the Chocolatey gallery correctly handle nuspec files saved as UTF-8 with BOM. To sum it up, the technical requirements currently are:\n1) nuspec files: should be UTF-8, BOM is optional\n2) ps1 files: should be UTF-8, BOM is mandatory\nI therefore suggest the following change to the character encoding guidance:\nInstead of those three points\n\u2022 Do not save your  *.nuspec  files with a Byte Order Mark (BOM). A  BOM  is neither required nor recommended for  UTF-8 , because it can lead to several issues.\n\u2022 PowerShell scripts need to be saved in UTF-8 with  BOM . PowerShell is ignoring the standards and needs a  BOM  in order to recognize scripts as  UTF-8 . Otherwise it processes non  ASCII  characters incorrectly.\n\u2022 Don\u2019t use the default Windows Editor. In addition to its lack of features, it can\u2019t even save  UTF-8  files without  BOM (...)\nthis:\n\u2022 DO save your *.nuspec files and PowerShell scripts (*.ps1) with a Byte Order Mark (BOM). It helps the tools parse non-ASCII characters correctly and is required by PowerShell.\n. I think I like the RPM versioning scheme best. The package version there consists of the full version number of packaged software, followed by a distinctly separated package revision number (an integer starting at 1). The third revision of openssl 1.0.1g would be named openssl-1.0.1g-3. That way the package can be fixed without artificially changing the packaged software version number, yet the system remains quite simple and does not present the user with two full-length, four-part version numbers.\nOne way to implement it on top of NuGet infrastructure could be perhaps to expose the packaged software version number to NuGet as the package version and keep the package revision as custom metadata used only by Chocolatey (and visible on the package details page in the gallery). For fixing a package, Chocolatey gallery should allow uploading a new package with the same NuGet-visible version number as the current one but increased revision. As a consequence, updating a package to fix/improve the install script would not prompt an update for users which already have that package installed - a good thing, IMO.\n(To elaborate on the last point, an example: I installed MS SQL 2012 from a package, working around a bug in its chocolateyInstall. After I notified the package owner, he fixed the script and released an updated package. Now that package shows in cver as an available update, but one I do not need or want to install, since I already have a working SQL Server installed by the previous package revision. If the package version exposed to NuGet was the exact version of packaged software, I would not be offered an update - correct, since I do not need it.)\n. In the Resharper case, I'd argue that major versions (with non-transferable licenses) should be released as different packages, e.g. resharper7 and resharper8.\n. Good point. But in that case, the burden of preventing an unwanted/potentially breaking update should ideally lie with the package author, not the user. I.e. the 7.x package should somehow indicate in its metadata that it should not be automatically updated to 8.0 or higher. (But this is more in the topic of #5.)\n. Another thing to consider is that creating a symlink is a privileged operation on Windows, so it would not work for regular users.\n. @mlt right, I forgot about hard links. Coincidentally, Windows itself uses them for similar purpose, creating links in system32 (and other places) to exes and dlls in WinSxS (the unmanaged assembly cache).\n@ferventcoder hard links are fully supported in xp/2003 (actually, even in 2000). The convenient command line tool mklink is only available in Vista+, however, so Chocolatey would need to ship its own simple binary exposing the CreateHardLink API.\nOh, and the logic should fall back to shims in cases when the hard link obviously cannot be used, e.g. $ChocolateyBinRoot is on a different drive than $ChocolateyInstall\\bin, or link creation fails (e.g. both variables seem to point to the same drive, but one or more of the directories is actually a NTFS junction pointing to a different drive or even a file share).\n. The new output formatting looks really nice, much more readable than current Chocolatey output. But the fact that it comes from the new binary implementation is even better news :)\nDo you plan on providing only an exe, or perhaps a PowerShell module as well? Personally, I find it very convenient to be able to invoke chocolatey.ps1 directly from a PS script without paying the overhead of spawning a new process. PS cmdlets could also return objects as their output, making processing that output in scripts much easier and more reliable.\n. In line 33, the -match operator returns a boolean value indicating whether the match succeeded or not. Because this value is neither assigned to a variable nor used in any other way, it becomes part of the function output.\nTo fix this, either:\n1) pipe the result to Out-Null: \n$html -match \"(?ms)data-dl-url=['`\"](.+?)['\\\" ]+data-nodlm-url\" | Out-Nullor, better, 2) actually check if the match succeeded:if ($html -notmatch \"(?ms)data-dl-url='\\\"['\\\" ]+data-nodlm-url\") { throw \"Match failed\" }. The \"sysnative\" special alias is not a feature of \"32-bit shells\" (or cmd.exe in particular), rather [it is provided by the WOW64 layer](http://msdn.microsoft.com/en-us/library/windows/desktop/aa384187.aspx) and available to all 32-bit applications running on 64-bit Windows, PowerShell included.\nThere is no need to pay the cost of invoking an intermediate cmd.exe.\n. The wrapper uninstall issues are already fixed in the not-yet-released 0.9.8.24 (GH-418, GH-446, GH-480).\n. The current implementation ofInvoke-ChocolateyFunctionsimply catches the exception and rethrows its message. This has no effect on control flow. (It is also, by the way, suboptimal behavior because it loses valuable information, such as the type of the exception; athrow` statement without arguments would rethrow the exception without losing information. But that's another matter.)\nYour original implementation would indeed use the exit keyword to terminate running the entire script (and return an exit code). In my opinion internal functions should never make such decisions, as they have no knowledge about the context in which they were called. In such scenario Chocolatey had no chances of handling the error in any way or perform any rollback or cleanup actions. Indeed, a later commit by @ferventcoder (54716e03) disabled the mandatory exit because it interfered with the ability to continue installing subsequent packages if one package failed (ideally, that behavior should be controllable, but in any case the authority of deciding whether to stop execution is with chocolatey.ps1, not with a lower-level, internal command).\nHaving said that, you certainly have a point about returning an error code when something goes wrong. Powershell not doing that is actually a deficiency of powershell.exe when invoked with the -file argument (and documented in about_Language_Keywords). I don't know how Powershell is invoked by Puppet, but in my automation scenario (a Jenkins deployment job) I worked around it by invoking Powershell with my script using the -command argument:\npowershell.exe -command \"& myscript.ps1 args...\"\nthis correctly returns a nonzero exit code if the script encounters an error. Please also note that some (\"non-terminating\") errors are subject to $ErrorHandlingPreference; I usually set it to \"Stop\" (most restrictive) immediately at the beginning of my scripts, so all errors behave like exceptions (e.g. transfer control to the nearest catch clause).\n. My point is, with an exit deep inside an internal function, there would be no way to implement that switch. Also, when an error is encountered during the installation, there is usually some cleanup to be performed, such as deleting the failed package from $Env:ChocolateyInstall\\lib.\nI also believe in failing early, but in a controllable fashion. I would not like it, for example, if fopen() called ExitProcess() if it failed to open the file.\n. Obsoleted by #446. Now that this works, I found a new issue concerning shimgen-generated exes - #449.\n. @ferventcoder currently Chocolatey cannot handle $binRoot set to C:\\, because the installation tracking feature (Write-FileUpdateLog) relies on being able to scan the entire directory hierarchy under $binRoot, which will almost certainly fail (no access to other users' profile directories, for instance).\nSo, without major code changes, a Chocolatey installation with $binRoot = C:\\ is a broken installation. Since the defective code that causes that is already out there, I would suggest implementing an automatic fix: treat C:\\ the same way as an unset $env:ChocolateyBinRoot and reset to the default (C:\\tools). That way users affected by this issue could get it fixed simply by upgrading Chocolatey.\n. How about renaming Get-ChecksumValid to Test-Checksum (or Test-FileChecksum)? It would be more consistent with Powershell cmdlet naming conventions and standard cmdlets, such as Test-Path, Test-Certificate or Test-Connection.\nOr is it too late for that change...?\n. How about verifying the checksum of the cached file as well (if the checksum is provided)? It would make it possible to automatically recover from corrupted downloads, when length matches but content does not. Currently such file will not be downloaded, but will fail the checksum test later.\n. Yes, I've seen that line (that's what I meant by \"the checksum test later\"). However, in the scenario I'm thinking about, it would be too late. Please consider the following sequence of events:\n1. the user invokes cinst foo\n2. chocolateyInstall.ps1 of the foo package invokes Get-ChocolateyWebFile to download http://unreliablehost.com/foo.zip\n3. foo.zip does not exist in the cache, so the condition at L85 fails at $fi.Exists\n4. foo.zip is downloaded, but due to unreliable server/network connection/whatever ends up corrupted\n5. the checksum test at L126 catches the corruption and raises an error\n6. installation fails\n7. the user invokes cinst foo again, hoping this time the file will be downloaded correctly\n8. chocolateyInstall.ps1 of the foo package invokes Get-ChocolateyWebFile to download http://unreliablehost.com/foo.zip\n9. foo.zip exists in the cache and has the expected size, so the condition at L85 passes and $needsDownload is set to $false\n10. foo.zip is not downloaded again and remains corrupted\n11. the checksum test at L126 catches the corruption and raises an error\n12. installation fails\nI propose modifying L85 to:\npowershell\nif ($fi.Exists -and ($fi.Length -eq $headers[\"Content-Length\"]) -and (Get-CheckSumValid -file $fi -checkSum $checksum -checksumType $checksumType))\nThat change would result in failing the condition at step 9 above and redownloading the file, hopefully uncorrupted this time.\nWithout that change, the user would need to delete the cached file by hand (be familiar with cache directory location and layout etc) to fix the broken download.\n. I'd only suggest, instead of complicating things for the caller by using a ref parameter, to return a PSObject with two properties: [string/uri] Url and [bool] Redirected. Or, even simpler, return redirected url or $null if not redirected.\n. Nice. For the record, this should also fix those two bugs:\n- #418 (batch redirects not being removed when uninstalling a package)\n- https://groups.google.com/d/topic/chocolatey/vxad3EOdRSI/discussion (\"-source\" argument causing cinst all to fail with \"invalid URI format\")\n. Done as GH-480, since existing PRs apparently cannot be retargeted.\nShould all PRs be sent against stable by default? It would be helpful to mention it in CONTRIBUTING.md if that's the case.\n. The guidelines did not specify a target branch, but here's a PR :)\n. A very welcome feature! But, why only when no UAC (i.e. why not trigger elevation)?\n. When testing, please be aware that Windows caches manifest information for an executable (including whether the manifest is present or not) for the duration of the logon session, so the external manifest may be ignored by the system until you logoff and logon again, if it has just been added and 7za.exe has been run earlier. To force invalidation of the cached information, change the \"last modified\" time of 7za.exe (the actual value does not matter as long as it is different than the previous time).\n. Yes, you just need to put it next to 7za.exe.\n. Good question. Each exe which might possibly write to a protected location should have a manifest. However, all other exes currently included with Chocolatey (shimgen.exe, checksum.exe, nuget.exe and even shimgen-generated exes in redirects directory) actually do have an embedded manifest with UAC info - you can quickly verify it with the sigcheck SysInternals tool (run sigcheck -m xyz.exe). So only 7za needs to be provided with an external one.\n. It should be. However, there are some gotchas.\nFirst, since Start-Process does not set the $LastExitCode PS variable, you need to use the -PassThru argument to Start-Process to receive a Process object, then check its ExitCode property, e.g.\n$p = Start-Process $7zip (...) -PassThru\n$exitCode = $p.ExitCode\nswitch ($exitCode) {\n    0: { break }\n    1: { throw 'Some files could not be extracted' } # this one is returned for access denied errors\n    2: { throw '7-Zip encountered a fatal error while extracting the files' }\n    7: { throw '7-Zip command line error' }\n    8: { throw '7-Zip out of memory' }\n    255: { throw 'Extraction cancelled by the user' }\n    default: { throw \"7-Zip signalled an unknown error (code $exitCode)\" }\n}\nUnfortunately, Write-FileUpdateLog complicates matters further, as it currently does not allow passing arguments to the scriptblock, so Get-ChocolateyUnzip constructs the scriptblock from strings (complex/messy). A slight modification to Write-FileUpdateLog would support that:\nfunction Write-FileUpdateLog {\n  param (\n    [string] $logFilePath,\n    [string] $locationToMonitor,\n    [scriptblock] $scriptToRun,\n    [object[]] $argumentList\n  )\n  (...)\n  # instead of & $scriptToRun\n  Invoke-Command -ScriptBlock $scriptToRun -ArgumentList $argumentList\n  (...)\n}\nThe scriptblock in Get-ChocolateyUnzip would be constructed so:\n$unzipOps = { \n    param($7zip, $destination, $fileFullPath, [ref]$exitCodeRef)\n    $p = Start-Process $7zip (...) -PassThru\n    $exitCodeRef.Value = $p.ExitCode\n}\n$exitCode = -1\nWrite-FileUpdateLog -logFilePath $zipExtractLogFullPath -locationToMonitor $destination -scriptToRun $unzipOps -argumentList $7zip,$destination,$fileFullPath,([ref]$exitCode)\nswitch ($exitCode) {\n(...)\n(Note the $exitCode argument is passed by reference and inside the scriptblock its value is actually an instance of PSReference<T> with a Value property)\n. Whew, got carried away a bit... Sorry if some of that is too obvious ;-)\n. This reminded me of a problem I had encountered some time ago but forgot to report (#460). If Update-SessionEnvironment is new in 0.9.8.24 and is used in its chocolateyInstall.ps1, this is a similar issue.\n. Hmm, can't find any mention of it, neither on Github, nor on the mailing list.\nBug vs Enhancement: as Choco wiki explicitly encourages using dependency on Chocolatey as means to ensure the required functionality is present, a bug IMO.\nI could take a stab at implementing option 2) some time next week and see if it fixes this issue and possibly #459. Not a bullet-proof solution, but perhaps good enough, and with C#-Choco around the corner it seems unfeasible to put much work into PS-Choco.\n. Whew, talk about big guns and/or a cure worse than the disease ;-) But leaving personal opinions aside...\nThe extraction helper, Get-ChocolateyUnzip, already supports many formats other than zip (full list: 7z, lzma, cab, zip, gzip, bzip2, Z and tar), despite its name, thanks to 7za.exe being used under the cover.\nThe installation helper, Install-ChocolateyZipPackage, unfortunately hardcodes the file extension to zip. This is not really harmful (only misleading), however, as 7za is able to determine the actual archive type even when the extension is wrong. Adding an archive type parameter to Install-ChocolateyZipPackage would be just a tiny change, but the helper should work with other archive types even now.\nThe most complicated case is naturally .tar.gz. There is currently no one-step solution, but a two-step one does exist and is not much more complicated. First download the archive and un-gzip it to a temporary location (using Install-ChocolateyZipPackage), then un-tar it to the final location (using Get-ChocolateyUnzip). Here's a proof of concept using the first publicly downloadable .tar.gz that came into my mind:\nInstall-ChocolateyZipPackage -packagename gzip-src -url ftp://ftp.gnu.org/gnu/gzip/gzip-1.3.12.tar.gz -unzipLocation (Join-Path $env:chocolateyPackageFolder tmp)\nGet-ChocolateyUnzip -fileFullPath (Join-Path $env:chocolateyPackageFolder tmp\\gzip-srcInstall) -destination (Join-Path $env:chocolateyPackageFolder src)\nOne just needs to keep in mind that Chocolatey names downloaded files Install.zip and 7za strips the file extension when extracting a gzip archive, so the extracted tar file is named Install (without extension).\n. Yes, I realize that. The good thing is, despite being unsupported, it works (with just a few little quirks) and is much more convenient to use from scripts.\nJust wanted to share my findings, perhaps they will come useful in the future.\n. Another nasty consequence: the USERNAME variable gets overwritten with \"SYSTEM\" (from Machine scope). This breaks code (including chocolateyInstall/Uninstall.ps1 scripts of second and subsequent packages if multiple are installed in one go) that uses $Env:USERNAME to determine the current user login.\n. There are at least two scenarios when this issue will bite even in supported usage (chocolatey.cmd):\n1) when installing a package with a dependency that needs installing as well: the dependency will be installed normally, but the dependent package will be installed in a crippled environment;\n2) when installing a bunch of packages at once, using packages.config: only the first package will be installed in the correct environment.\nAdd to the list of consequences the fact that PowerShell 4.0 dynamically adds two module locations to PSModulePath, so the following scenario fails:\n- package P depends on package M, where M installs a PowerShell module\n- the user invokes choco install P\n- powershell.exe prepends %UserProfile%\\Documents\\WindowsPowerShell\\Modules and %ProgramFiles%\\WindowsPowerShell\\Modules to PSModulePath\n- M is installed as a dependency and extracts a module to %ProgramFiles%\\WindowsPowerShell\\Modules\\M\n- Update-SessionEnvironment is invoked and resets PSModulePath\n- while being installed, P attempts to load the module M, but it won't be found\n. Well, rebasing changes commit hashes, so they are different commits from Git's point of view. No matter, thanks for merging it!\nBy the way, it seems the merge resulted also in the _env.cmd stuff being pulled into stable, together with CreateNoWindow/nuget (i.e. commits from master that were not present in stable).\n. Should I retarget it to stable (and perhaps GH-479 as well)?\n. I've fixed this as part of GH-476. It is already merged, so it should be present in the next release.\nAs a side note, you're not supposed to put anything in System32\\WindowsPowerShell\\v1.0\\Modules, that directory is reserved for modules that are part of Windows. Please see the Microsoft guidelines for installing PS modules.\n. That's weird. Commits eaf8ab2 and 3ef2604 are shown here in the wrong order. 3ef2604 (\"setup tests: add simulated standard...\") should come first, just after ef5395e (\"Enable mocking Test-AdminRights...\"), then eaf8ab2 (\"setup tests: with admin rights...\"), then 6dfbc44 (\"when running...\"). My source branch for this PR has them in the correct order.\na00ec70 and 05d3e22 are swapped too. What the...?\n. Thanks for the encouragement :)\nI've reimplemented admin rights mocking in a clean way and added an environment manipulation abstraction, together with mock implementation.\nAs an unplanned benefit, tests using those mocking facilities are now actually runnable as standard user - that gives additional security against making systemwide changes due to bugs or test interruption.\nRe your first question, for the record: no, this change will not trigger the UAC prompt. The actual, current process rights (I try to avoid the term 'privileges' as it has a very specific meaning on Windows) are examined.\n. (I guess my earlier comment by e-mail didn't make it through...)\nHere's one (quite important) test improvement and the helper name change suggested earlier.\nSome of the commits could also be squashed for a more streamlined PR - let me know if you'd prefer that.\n. Squashed somewhat (primarily bugfixes and the earlier Test-AdminRights mocking attempt) and rebased on stable.\nOriginal commits available for reference here.\n. @ferventcoder Unfortunately, the unreliability is there, it just has an exceedingly small probability of happening. Please note that my test code does call Unregister-Event, and I still got the occasional cases of std output/error not being captured in its entirety.\nThe cause can be found by analyzing the code of the Powershell eventing subsystem (inside System.Management.Automation, decompiled using e.g. ILSpy). In short, the event processing code transfers event invocations through the CLR thread pool in a fire and forget way, with no means of tracking unprocessed events or waiting for all of them to be processed. So, even if Unregister-Event wanted to ensure all events from the source being unregistered are processed (and it is not documented as doing so), it would have no means of fully achieving that goal.\nGrisly details follow:\nThe core of the eventing subsystem is the internal PSLocalEventManager class, where both registration and event dispatch take place.\nIt turns out, when registering an event subscription, a dynamic method is generated using ILGenerator (like I do in one of my methods in the test script, but the code generated by PSLocalEventManager.GenerateEventHandler() is much more complicated, as it needs to handle all possible delegate signatures). That method is then attached as a handler to the event. When the event is raised, the dynamic method code calls PSEventManager.GenerateEvent(string, object, object[], PSObject) which in turn delegates to PSLocalEventManager.ProcessNewEvent() with bool processSynchronously==false. That method defers actual processing of the event for later, by enqueueing a callback to ProcessNewEventImplementattion() on the CLR thread pool (ThreadPool.QueueUserWorkItem()). ProcessNewEventImplementattion() creates an EventAction object and inserts it in the queue of events awaiting the next processing cycle. The Powershell engine at certain times calls PSLocalEventManager.ProcessPendingActions(), which takes events from the queue and executes the actions registered for each one.\nNow, looking at UnsubscribeEvent() (called by Unregister-Event), it looks like it indeed tries to flush all events from the source being unregistered that are still in the queue. However, there is a certain (usually very short) point of time where the event is not yet in the queue, but exists as a work item queued on the thread pool. These unprocessed work items are not tracked and Unregister-Event ignores them.\nThe problem is very volatile and unpredictable (it requires the thread pool to lag a bit in processing the work items), I cannot reliably reproduce it on my system, but it happens from time to time (slightly more often on a cold system). I've added some more checks to my test code, designed to catch not only total lack of output (as before), but also failure to deliver one or more of the last lines of the output (a more common case).\nBack to Chocolatey, however:\nMy first observation is that it is only necessary to read one of the output streams asynchronously to avoid the deadlock, the other one can be read using ReadToEnd() as before. As it is much more common for the nuget invocation to succeed, I suggest reading the standard output stream synchronously and only using an async technique for the standard error.\nSecond, Register-ObjectEvent could be used as a temporary solution. The unreliability happens rarely, so we should be good for a while (better not being able to display the error than a deadlock - waiting forever for nuget.exe). Meanwhile, I will try to find some time to craft a generic Execute-Process function that will use the best reliable output redirection technique possible on the framework Chocolatey is running on.\n. You created a wrapper function, not an alias. Please see here for a few tips for creating and exporting aliases from PS modules.\n. Indeed, it seems in PowerShell 3+ they started using a job object in Start-Process -Wait (but not in Wait-Process). In PowerShell 2 Start-Process -Wait and Wait-Process used equivalent code.\n@avdv what OS are you running this on - Win7 or older, by any chance?\n. First, a slight correction: I wrote \"in PowerShell 3+ they started using a job object in Start-Process -Wait\", but, to be precise, I only examined PS 2 and 4 (what I have on my system). So I'm not sure about PS 3. Not that it matters much.\n\nIs wait-process available in Posh v2?\n\nDocs say \"Applies To: Windows PowerShell 2.0, Windows PowerShell 3.0\", the implemetation I examined was in a .NET 2.0 assembly (so PS 2). But wouldn't hurt to check on a pure PS 2.0 system.\n\nYes, I'm on Windows 7.\n\nWindows 8 brought a major improvement to job objects in that now they can be nested, so a process in a job can create another job itself. On earlier systems (e.g. 7), the attempt to create a job (to run a child process in, for example, as PS 4 does in Start-Process -Wait) would fail when the process was already part of one. Perhaps Start-Process -Wait does not cope well with the situation when it cannot create the job - the code seems to be written to handle it, but I don't have the time to debug and verify it. Powershell might be running in a job in various circumstances, such as when the application that starts it is itself in a job - e.g. due to Program Compatibility Assistant - or when that application wants to maintain control over PS - as SCCM probably does. As I use Win 8.1, which has nested jobs, the issue did not have a chance of manifesting on my computer.\nI agree that using Wait-Process is a reasonable workaround, now that a probable explanation of the issue might be given. Although dropping the -Wait and adding a comment would add more clarity to the code.\n. > Hrrm, actually that function is only powershell 3.0.\nHuh?\nD:\\>powershell -version 2 gcm wait-process\nCommandType     Name                                               ModuleName\n-----------     ----                                               ----------\nCmdlet          Wait-Process                                       Microsoft.PowerShell.Management\n. Regardless of NuGet limitations, dot-files (i.e. files with empty name) can generally be a pain to work with, such as when \"show extensions for known file types\" is unchecked and the file is associated with a program, e.g. a text editor. Besides, they look definitely non-Windows.\nI'd suggest something like shimlist.txt for the name, with the ability to specify both directories and individual files.\nA cleaner solution would be to extend the nuspec schema, but I seem to recall NuGet not liking that...?\n. ",
    "JimFicarra": "I see this is an old request but I would second this one - it looks like the Install-ChocolateyEnvironmentVariable handles addition of a single variable/value key pair, not something like a path variable where you want to modify a delimited set of strings like a PATH or PSModulePath.\nI created a chocolatey package that deployed some powershell modules and I had to write my own code to add the path to the PSModulePath.  I also had to write my own removal as I also wrote a ChocolateyUninstall.ps1 with it.  (Having something existing would have been preferable)\nOne nuance I ran across while retrieving the PATH variable with [System]::GetEnvironmentVariable (specifying the machine scope) is that it still returned the user + machine scope, so I had to also handle if the user-scoped path was there or not. (I found this out the hard way and ended up breaking the Chocolatey prefetch in the puppet module because I did not properly remove the path from $PSModulePath).\nWhether this is implemented or not, kudos to Rob and all involved in Chocolatey - it's fantastic!\n. Sounds interesting - so when I implemented the PS Modules they came from the author as organized in a directory structure.  I zipped those up and created a chocolatey zip package and deployed that, and augmented with powershell to update the PSModulePath env variable.  Point is, that some modules may be a single psm1, maybe psd1, or even a larger structure of files.worthy of being compressed in a zip.  \nIf it's going to be wrapped in an inclusive function to copy modules and update the PSModulePath, perhaps the \"copies something\" part could support multiple \"somethings\" or split it out if you see fit.\nI also think support for user or machine scope for the path is helpful.  (In my case I deployed at the machine scope.)\n. Ok - I had to force the $installDir with a hard-coded path to sysnative.  My code above was being evaluated in a 64-bit powershell so it never got modified to sysnative.  I use the below and I can get it to system32.  \n$installDir = \"c:\\Windows\\sysnative\\WindowsPowerShell\\v1.0\\Modules\"\nStill would be nice to have it use an appropriate bitness. :)\n. Awesome.  Thank you as well for the advice and the link explaining the proper location of 3rd party modules.  I'll switch my package to install to a more appropriate location and update the $PSModulePath environment variable.\n. Thanks for the response, Rob!\nThat is certainly one way to approach it.  If I understand the code correctly to approach it the way you suggest we'd need to change the install script to set $tempdir to the UNC path of the already unzipped source and remove the code that downloads and unzips the file and just kick off the '& $chocInstallPS1'\nThat said, while we have already slightly customized the installer already to 1) ensure we get a system-scoped ChocolateyInstall env variable for all users 2) set a specific installation directory and 3) set a specific URL to serve the installation files, I was hoping to not venture too far away from the Chocolatey way of doing things as well as keep it within the standards of our Company, which is to retrieve packages from a repository via HTTP instead of setting up a secondary source of installation files.  Also, the systems won't necessarily be in the same zone in this large infrastructure, and opening up HTTP to the standard HTTP repo is easier than poking windows file share holes through firewalls and ACLs.\nTo that end, I am continuing to explore the root cause and find a better fix than a forced sleep to wait it out, but if you have additional insights it would be greatly appreciated.  Perhaps it's one of those things that just don't work well over a remote session - not sure yet.\nThanks again for a great tool!\n. Are there any plans to address this in a future release to help facilitate remote deployment of Chocolatey?\n. I see this is an old request but I would second this one - it looks like the Install-ChocolateyEnvironmentVariable handles addition of a single variable/value key pair, not something like a path variable where you want to modify a delimited set of strings like a PATH or PSModulePath.\nI created a chocolatey package that deployed some powershell modules and I had to write my own code to add the path to the PSModulePath.  I also had to write my own removal as I also wrote a ChocolateyUninstall.ps1 with it.  (Having something existing would have been preferable)\nOne nuance I ran across while retrieving the PATH variable with [System]::GetEnvironmentVariable (specifying the machine scope) is that it still returned the user + machine scope, so I had to also handle if the user-scoped path was there or not. (I found this out the hard way and ended up breaking the Chocolatey prefetch in the puppet module because I did not properly remove the path from $PSModulePath).\nWhether this is implemented or not, kudos to Rob and all involved in Chocolatey - it's fantastic!\n. Sounds interesting - so when I implemented the PS Modules they came from the author as organized in a directory structure.  I zipped those up and created a chocolatey zip package and deployed that, and augmented with powershell to update the PSModulePath env variable.  Point is, that some modules may be a single psm1, maybe psd1, or even a larger structure of files.worthy of being compressed in a zip.  \nIf it's going to be wrapped in an inclusive function to copy modules and update the PSModulePath, perhaps the \"copies something\" part could support multiple \"somethings\" or split it out if you see fit.\nI also think support for user or machine scope for the path is helpful.  (In my case I deployed at the machine scope.)\n. Ok - I had to force the $installDir with a hard-coded path to sysnative.  My code above was being evaluated in a 64-bit powershell so it never got modified to sysnative.  I use the below and I can get it to system32.  \n$installDir = \"c:\\Windows\\sysnative\\WindowsPowerShell\\v1.0\\Modules\"\nStill would be nice to have it use an appropriate bitness. :)\n. Awesome.  Thank you as well for the advice and the link explaining the proper location of 3rd party modules.  I'll switch my package to install to a more appropriate location and update the $PSModulePath environment variable.\n. Thanks for the response, Rob!\nThat is certainly one way to approach it.  If I understand the code correctly to approach it the way you suggest we'd need to change the install script to set $tempdir to the UNC path of the already unzipped source and remove the code that downloads and unzips the file and just kick off the '& $chocInstallPS1'\nThat said, while we have already slightly customized the installer already to 1) ensure we get a system-scoped ChocolateyInstall env variable for all users 2) set a specific installation directory and 3) set a specific URL to serve the installation files, I was hoping to not venture too far away from the Chocolatey way of doing things as well as keep it within the standards of our Company, which is to retrieve packages from a repository via HTTP instead of setting up a secondary source of installation files.  Also, the systems won't necessarily be in the same zone in this large infrastructure, and opening up HTTP to the standard HTTP repo is easier than poking windows file share holes through firewalls and ACLs.\nTo that end, I am continuing to explore the root cause and find a better fix than a forced sleep to wait it out, but if you have additional insights it would be greatly appreciated.  Perhaps it's one of those things that just don't work well over a remote session - not sure yet.\nThanks again for a great tool!\n. Are there any plans to address this in a future release to help facilitate remote deployment of Chocolatey?\n. ",
    "ctaggart": "This is exactly what I was looking for tonight. both Install and Uninstall\n. This is exactly what I was looking for tonight. both Install and Uninstall\n. ",
    "shanselman": "I have WebPi 4.0 and webPI command line via\ncinst webpicommandline.7.1.1374.20120226. I have whatever PowerShell Win8\nis, presumably 3.0.\nOn Tue, May 28, 2013 at 12:56 AM, Gary Ewan Park\nnotifications@github.comwrote:\n\nLooks like there is an issue though, in that this should be handled more\ngracefully, and not just disappear, but if we can trace the problem, we can\nwork on a solution :-)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/293#issuecomment-18536103\n.\n\n\nScott Hanselman\nHelp me? http://hnsl.mn/fightdiabetes\n. I have WebPi 4.0 and webPI command line via\ncinst webpicommandline.7.1.1374.20120226. I have whatever PowerShell Win8\nis, presumably 3.0.\nOn Tue, May 28, 2013 at 12:56 AM, Gary Ewan Park\nnotifications@github.comwrote:\n\nLooks like there is an issue though, in that this should be handled more\ngracefully, and not just disappear, but if we can trace the problem, we can\nwork on a solution :-)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/293#issuecomment-18536103\n.\n\n\nScott Hanselman\nHelp me? http://hnsl.mn/fightdiabetes\n. ",
    "cup": "Question, if we are told to save as UTF-8 without BOM, then why are the\nfiles saved as UTF-8 with BOM?\n```\n$ wget rawgit.com/chocolatey/chocolateytemplates/3ea3/_templates/chocolatey/tools/chocolateyInstall.ps1\n$ hexdump -C chocolateyInstall.ps1\n00000000  ef bb bf 23 4e 4f 54 45  3a 20 50 6c 65 61 73 65  |...#NOTE: Please|\n```\n. @gep13 that quote is taken out of context. The full quote is\n\nUse the UTF-8 character encoding for the .nuspec and .ps1 files. If you\ndon\u2019t respect this rule, some characters are not displayed correctly in the\nGallery on Chocolatey.org, because the Gallery assumes UTF-8.\n\nThis does not explicitly say what bad can happen if you use .nuspec with BOM.\n. @jberezanski why does that package have no version history, and no moderation\nstatus?\n. :+1: \n. @gep13 can you elaborate on what exactly requires a reboot? I find these days it\nis rare to need to reboot Windows. Most times restarting explorer.exe does it.\n. Oh, you were referring to the user installing PowerShell 3 then rebooting, that\nmakes sense. My thinking was a check for PowerShell 3, if not found installation\njust stops completely and prompts user for a manual install.\n. @ferventcoder yeah it starts off looking like it, then he starts talking about\nlib which threw me off so I am not sure exactly what he is wanting with that\nissue.\n. @ferventcoder is this fixed?\n. @ferventcoder I think something else is required\n```\nPS > Import-Module $env:ChocolateyInstall\\chocolateyinstall\\helpers\\chocolateyInstaller.psm1\nPS > .\\chocolateyInstall.ps1\nTest-Path : Cannot bind argument to parameter 'Path' because it is null.\nAt C:\\ProgramData\\chocolatey\\chocolateyinstall\\helpers\\functions\\Get-ChocolateyUnzip.ps1:50 char:27\n+     if (!(Test-Path -path $packagelibPath)) {\n+                           ~~~~~~~~~~~~~~~\n```\n. @gep13\nPS > chocolatey\nPlease run chocolatey /? or chocolatey help - chocolatey v0.9.8.28\n. aacgain/tools/chocolateyInstall.ps1\n. I would appreciate it. Right now it is a real headache to test new packages, I\nleft out a step before\n1. create chocolateyInstall.ps1\n2. cpack\n3. remove any previous installation, I have found this is required otherwise\n   chocolatey will reuse crap that you dont want to be reused when testing\ncuninst PackageName\n   rm -r $env:temp/chocolatey\n4. cinst -source $pwd PackageName\n. @ferventcoder can you elaborate on that? Do I have an old version or something?\n. @lonniev what the hell is a \"packer build\"? Your post does seem off-topic.\n. That has absolutely nothing to do with this issue.\n. Question, if we are told to save as UTF-8 without BOM, then why are the\nfiles saved as UTF-8 with BOM?\n```\n$ wget rawgit.com/chocolatey/chocolateytemplates/3ea3/_templates/chocolatey/tools/chocolateyInstall.ps1\n$ hexdump -C chocolateyInstall.ps1\n00000000  ef bb bf 23 4e 4f 54 45  3a 20 50 6c 65 61 73 65  |...#NOTE: Please|\n```\n. @gep13 that quote is taken out of context. The full quote is\n\nUse the UTF-8 character encoding for the .nuspec and .ps1 files. If you\ndon\u2019t respect this rule, some characters are not displayed correctly in the\nGallery on Chocolatey.org, because the Gallery assumes UTF-8.\n\nThis does not explicitly say what bad can happen if you use .nuspec with BOM.\n. @jberezanski why does that package have no version history, and no moderation\nstatus?\n. :+1: \n. @gep13 can you elaborate on what exactly requires a reboot? I find these days it\nis rare to need to reboot Windows. Most times restarting explorer.exe does it.\n. Oh, you were referring to the user installing PowerShell 3 then rebooting, that\nmakes sense. My thinking was a check for PowerShell 3, if not found installation\njust stops completely and prompts user for a manual install.\n. @ferventcoder yeah it starts off looking like it, then he starts talking about\nlib which threw me off so I am not sure exactly what he is wanting with that\nissue.\n. @ferventcoder is this fixed?\n. @ferventcoder I think something else is required\n```\nPS > Import-Module $env:ChocolateyInstall\\chocolateyinstall\\helpers\\chocolateyInstaller.psm1\nPS > .\\chocolateyInstall.ps1\nTest-Path : Cannot bind argument to parameter 'Path' because it is null.\nAt C:\\ProgramData\\chocolatey\\chocolateyinstall\\helpers\\functions\\Get-ChocolateyUnzip.ps1:50 char:27\n+     if (!(Test-Path -path $packagelibPath)) {\n+                           ~~~~~~~~~~~~~~~\n```\n. @gep13\nPS > chocolatey\nPlease run chocolatey /? or chocolatey help - chocolatey v0.9.8.28\n. aacgain/tools/chocolateyInstall.ps1\n. I would appreciate it. Right now it is a real headache to test new packages, I\nleft out a step before\n1. create chocolateyInstall.ps1\n2. cpack\n3. remove any previous installation, I have found this is required otherwise\n   chocolatey will reuse crap that you dont want to be reused when testing\ncuninst PackageName\n   rm -r $env:temp/chocolatey\n4. cinst -source $pwd PackageName\n. @ferventcoder can you elaborate on that? Do I have an old version or something?\n. @lonniev what the hell is a \"packer build\"? Your post does seem off-topic.\n. That has absolutely nothing to do with this issue.\n. ",
    "avishnyakov": "Oh, you are right. That works well:\ncint mypackage -source 'c:/tmp 2/mypackage'\nThanks!\n. Oh, you are right. That works well:\ncint mypackage -source 'c:/tmp 2/mypackage'\nThanks!\n. ",
    "tmyroadctfig": "This also seems to break installing new packages. I think I initially killed off the zip integration via:\nregsvr32 /u zipfldr.dll\nand now that I've restored it running:\ncmd /c assoc .zip=CompressedFolder\neverything seems to be working again.\n. This also seems to break installing new packages. I think I initially killed off the zip integration via:\nregsvr32 /u zipfldr.dll\nand now that I've restored it running:\ncmd /c assoc .zip=CompressedFolder\neverything seems to be working again.\n. ",
    "jonparker": "I have moved this request to chocolatey.org so will close this issue.\n. I have moved this request to chocolatey.org so will close this issue.\n. ",
    "SimonCropp": "@gep13  so we can close this one?\n. bump\n. awesome\n. @gep13  so we can close this one?\n. bump\n. awesome\n. ",
    "maartenba": "Seems I didn't receive that notification. Updated the package 2 sec ago :-)\n. Seems I didn't receive that notification. Updated the package 2 sec ago :-)\n. ",
    "gildas": "it actually exists on Windows Core 2012. Though not through the Windows SHell, since it is not installed on Core (and should not).\nTo unzip files you can do in Powershell:\n[System.Reflection.Assembly]::LoadWithPartialName(\"System.IO.Compression.FileSystem\") | Out-Null\nNow, that alone won't fix the overall issue as I bet chocolatey uses Windows SHell in its own scripts.\n. sure will.\nI will square my base Windows 2012 image first, so I can clone it easily.\nI still need to see if I can vagrant it later on.\n. I usually have veewee create the box. In there I use either winrm or unattend to install the most basic stuff:\nwinrm config, chocolatey, and puppet.\nThen, when I instantiate the box with vagrant, I apply a basic puppet manifest that simply tells which puppet manager to go to.\nAfter that it's all puppet stuff. Puppet drives chocolatey and the rest.\nI guess installing chocolatey first would have been a natural choice as I would like all packages to be handled that way (even when puppet drives). Though, I encountered a few roadblocks:\n1) I have not found (maybe I did not RTFM correctly) how to pass parameters to chocolatey's cinst to tell puppet which server to go to. I work around this by using the manifest I talked about earlier.\n2) Running chocolatey through puppet master/agent is a PITA as the PATH and ENV is not set correctly. I.e., the HKCU was modified not the HKLM. That makes the puppet windows services really unhappy. (Similar issues with puppet-homebrew on Mac, but I digress)\nAnd on Windows 2012 Core, a lot of things do not work and I find myself fixing a lot of code (vagrant-windows, chocolatey, etc)\nSo far, I do my mods once in the template vbox and tell veewee to export it.\nMy goal is to not have to modify stuff myself and script the whole thing.\nIt is also possible I am missing something here.\n. Sure I would.\nThough, I live in Japan and I guess you are in the US, right?\nWhen is the best time for you?\nAlso, I am flying to Dubai on Sunday night until the end of next week. \nSo, I won't be available.\nNow, if you are thinking about NOW, sorry, I am going to bed, it's \nfricking past 1AM!\nCheers mate,\nGildas\nD'ar/an 2013/09/20 1:06 AM, Skrivet eo bet gant Rob Reynolds::\n\nGildas, would you be up for a hangout to discuss some of these things?\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/chocolatey/chocolatey/issues/302#issuecomment-24751074.\n. Hey Rob,\n\nBack in the game after a few crashes and other fun parties with Puppet....\nNow, how can I install alpha 7 on a Windows 2012 Core that does not have chocolatey already.\nClearly, \"cinst chocolatey -pre\" has no way to work since the initial install is the one failing.\nOr, should I install nuget first? It seems to have a command line to get alpha7 installed.\nThen, I have to find hos to install nuget... \n. Another chicken and egg story...\n. ok, I am not sure how I achieve that one, but I got chocolatey installed and then updated to alpha 7 on my Windows 2012 box.\n. I see that you bundled 7za.exe in the tools folder.\nClever...\n. it actually exists on Windows Core 2012. Though not through the Windows SHell, since it is not installed on Core (and should not).\nTo unzip files you can do in Powershell:\n[System.Reflection.Assembly]::LoadWithPartialName(\"System.IO.Compression.FileSystem\") | Out-Null\nNow, that alone won't fix the overall issue as I bet chocolatey uses Windows SHell in its own scripts.\n. sure will.\nI will square my base Windows 2012 image first, so I can clone it easily.\nI still need to see if I can vagrant it later on.\n. I usually have veewee create the box. In there I use either winrm or unattend to install the most basic stuff:\nwinrm config, chocolatey, and puppet.\nThen, when I instantiate the box with vagrant, I apply a basic puppet manifest that simply tells which puppet manager to go to.\nAfter that it's all puppet stuff. Puppet drives chocolatey and the rest.\nI guess installing chocolatey first would have been a natural choice as I would like all packages to be handled that way (even when puppet drives). Though, I encountered a few roadblocks:\n1) I have not found (maybe I did not RTFM correctly) how to pass parameters to chocolatey's cinst to tell puppet which server to go to. I work around this by using the manifest I talked about earlier.\n2) Running chocolatey through puppet master/agent is a PITA as the PATH and ENV is not set correctly. I.e., the HKCU was modified not the HKLM. That makes the puppet windows services really unhappy. (Similar issues with puppet-homebrew on Mac, but I digress)\nAnd on Windows 2012 Core, a lot of things do not work and I find myself fixing a lot of code (vagrant-windows, chocolatey, etc)\nSo far, I do my mods once in the template vbox and tell veewee to export it.\nMy goal is to not have to modify stuff myself and script the whole thing.\nIt is also possible I am missing something here.\n. Sure I would.\nThough, I live in Japan and I guess you are in the US, right?\nWhen is the best time for you?\nAlso, I am flying to Dubai on Sunday night until the end of next week. \nSo, I won't be available.\nNow, if you are thinking about NOW, sorry, I am going to bed, it's \nfricking past 1AM!\nCheers mate,\nGildas\nD'ar/an 2013/09/20 1:06 AM, Skrivet eo bet gant Rob Reynolds::\n\nGildas, would you be up for a hangout to discuss some of these things?\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/chocolatey/chocolatey/issues/302#issuecomment-24751074.\n. Hey Rob,\n\nBack in the game after a few crashes and other fun parties with Puppet....\nNow, how can I install alpha 7 on a Windows 2012 Core that does not have chocolatey already.\nClearly, \"cinst chocolatey -pre\" has no way to work since the initial install is the one failing.\nOr, should I install nuget first? It seems to have a command line to get alpha7 installed.\nThen, I have to find hos to install nuget... \n. Another chicken and egg story...\n. ok, I am not sure how I achieve that one, but I got chocolatey installed and then updated to alpha 7 on my Windows 2012 box.\n. I see that you bundled 7za.exe in the tools folder.\nClever...\n. ",
    "mohierf": "Thanks\n. Thanks\n. ",
    "grokys": "Sorry, I don't understand.\n. Complete input/output:\n```\nPS C:\\Users\\Steven> cinst nodejs.install\nChocolatey (v0.9.8.20) is installing nodejs.install and dependencies. By installing you accept the license for nodejs.install and each dependency you are installing.\nUnable to read package from path 'jquery.TypeScript.DefinitelyTyped.0.2.5.nupkg'.\nFinished installing 'nodejs.install' and dependencies - if errors not shown in console, none detected. Check log for errors if unsure.\n```\nIt doesn't actually matter what package I try to install - it fails every time with the same error.\n. Ah, thank you so much! In fact all I needed to do was clear the NuGet cache - thanks for your time and pointing me in the right direction.\n. Sorry, I don't understand.\n. Complete input/output:\n```\nPS C:\\Users\\Steven> cinst nodejs.install\nChocolatey (v0.9.8.20) is installing nodejs.install and dependencies. By installing you accept the license for nodejs.install and each dependency you are installing.\nUnable to read package from path 'jquery.TypeScript.DefinitelyTyped.0.2.5.nupkg'.\nFinished installing 'nodejs.install' and dependencies - if errors not shown in console, none detected. Check log for errors if unsure.\n```\nIt doesn't actually matter what package I try to install - it fails every time with the same error.\n. Ah, thank you so much! In fact all I needed to do was clear the NuGet cache - thanks for your time and pointing me in the right direction.\n. ",
    "alonisser": "Sent a pull request along those lines\n. Sent a pull request along those lines\n. ",
    "Gab-km": "@ferventcoder To be honest, I am worried about the condition whether it satisfies 'invalid credentials' or not.\nI think UserName and Password must not be empty, but I don't have any idea for Domain.\nCould you please give me some advice?\n. @ferventcoder I see. I will fix my changeset with checking only the UserName and the Password aren't empty.\nThank you very much. :smiley: \n. I typo-ed.\nI will fix my changeset with checking only the UserName or the Password isn't empty.\n. I modified the condition to validate $creds for Get-WebHeader.ps1, but this PR is too old and there are too many diffs.\nSo I close this PR and I will send new PR later. :-)\n. @ferventcoder To be honest, I am worried about the condition whether it satisfies 'invalid credentials' or not.\nI think UserName and Password must not be empty, but I don't have any idea for Domain.\nCould you please give me some advice?\n. @ferventcoder I see. I will fix my changeset with checking only the UserName and the Password aren't empty.\nThank you very much. :smiley: \n. I typo-ed.\nI will fix my changeset with checking only the UserName or the Password isn't empty.\n. I modified the condition to validate $creds for Get-WebHeader.ps1, but this PR is too old and there are too many diffs.\nSo I close this PR and I will send new PR later. :-)\n. ",
    "jmenchacavr": "I noticed that.  What is the future of easy_install?  PIP is like Ruby GEMs, but understandably may have problems on Windows when compilation is required for dependencies.\nI read (from http://stackoverflow.com/questions/4750806/how-to-install-pip-on-windows) about these two links that might be useful.\n    Install setuptools http://www.lfd.uci.edu/~gohlke/pythonlibs/#setuptools\n    Install pip http://www.lfd.uci.edu/~gohlke/pythonlibs/#pip\nPIP vs. Easy_Install\nhttp://stackoverflow.com/questions/3220404/why-use-pip-over-easy-install\n. Also, I thought it might be worth mentioning, maybe we can use \"peasy\" or \"easy\" instead of \"python\" as there would be ambiguity, if both \"easy_install\" and \"pip\" are supported.\nSegue, through using \"python\" for \"easy_install\" in the context of package management would indirectly say that \"easy_install\" is the defacto package manager for python.  Sorry if I got to pedantic, my linguistic nerdiness is showing up.  I could open another issue for this if you like?\n. Sure, this sounds good.  Though, I like pip, it's short and sweet. :)\n. I think it is worth investigating, run through some use cases to see how it works out; right now it seems like it will add more problems.  There's package managers that build things, then there's package managers that install things (with offline artifacts or downloaded off the Internet).  Currently, in general, it feels that the building of things on Windows outside of .NET or outside of Cygwin is not so strong.\n. This would be awesome for a future enhancement.  I was wondering if authentication was required, and found some articles on side-loading, which require a product-key to set initially before applications can be side-loaded:\nslmgr /ipk \nslmgr /ato ec67814b-30e6-4a50-bf7b-d55daf729d1e\nThe cmdlet (add-appxpackage) will install the signed packages on a per user bases.  Dism can add the signed packages for all users.\nSome links:\nhttp://social.technet.microsoft.com/Forums/windows/en-US/e5c5a26c-e8ba-439d-a0c0-074b475e0f1b/install-windows-store-apps-from-powershell\nhttp://blogs.msdn.com/b/uk_faculty_connection/archive/2012/04/03/installing-enterprise-metro-apps-without-using-microsoft-store.aspx\nhttp://technet.microsoft.com/en-us/library/hh852635.aspx\n. The ServerManagerCommand is the best tool out there, but MS deprecated this great tool.  DISM has problems, in that it will install a package and not its dependencies, and it won't do uninstall (on win2k8r2).  There's powershell cmdlets to do something similar, but then these are different than are different on win2k8r2 and win2012.  So the only way to use the same consistent tool, would be to go with dism.\nWhat would be ideal, is that chocolatey to support all of the features that ServerManagerCmd has on all platforms, this way you have a consistent front in.  In doing so, it would have to know the dependencies and install such dependencies.  I'm not sure how this would be done so that using choco will grab other dependencies, e.g. installing ASP.NET?\n. :+1:  Don't like having extra stuff installed just for installing installers...\n. :+1:\n. I noticed that.  What is the future of easy_install?  PIP is like Ruby GEMs, but understandably may have problems on Windows when compilation is required for dependencies.\nI read (from http://stackoverflow.com/questions/4750806/how-to-install-pip-on-windows) about these two links that might be useful.\n    Install setuptools http://www.lfd.uci.edu/~gohlke/pythonlibs/#setuptools\n    Install pip http://www.lfd.uci.edu/~gohlke/pythonlibs/#pip\nPIP vs. Easy_Install\nhttp://stackoverflow.com/questions/3220404/why-use-pip-over-easy-install\n. Also, I thought it might be worth mentioning, maybe we can use \"peasy\" or \"easy\" instead of \"python\" as there would be ambiguity, if both \"easy_install\" and \"pip\" are supported.\nSegue, through using \"python\" for \"easy_install\" in the context of package management would indirectly say that \"easy_install\" is the defacto package manager for python.  Sorry if I got to pedantic, my linguistic nerdiness is showing up.  I could open another issue for this if you like?\n. Sure, this sounds good.  Though, I like pip, it's short and sweet. :)\n. I think it is worth investigating, run through some use cases to see how it works out; right now it seems like it will add more problems.  There's package managers that build things, then there's package managers that install things (with offline artifacts or downloaded off the Internet).  Currently, in general, it feels that the building of things on Windows outside of .NET or outside of Cygwin is not so strong.\n. This would be awesome for a future enhancement.  I was wondering if authentication was required, and found some articles on side-loading, which require a product-key to set initially before applications can be side-loaded:\nslmgr /ipk \nslmgr /ato ec67814b-30e6-4a50-bf7b-d55daf729d1e\nThe cmdlet (add-appxpackage) will install the signed packages on a per user bases.  Dism can add the signed packages for all users.\nSome links:\nhttp://social.technet.microsoft.com/Forums/windows/en-US/e5c5a26c-e8ba-439d-a0c0-074b475e0f1b/install-windows-store-apps-from-powershell\nhttp://blogs.msdn.com/b/uk_faculty_connection/archive/2012/04/03/installing-enterprise-metro-apps-without-using-microsoft-store.aspx\nhttp://technet.microsoft.com/en-us/library/hh852635.aspx\n. The ServerManagerCommand is the best tool out there, but MS deprecated this great tool.  DISM has problems, in that it will install a package and not its dependencies, and it won't do uninstall (on win2k8r2).  There's powershell cmdlets to do something similar, but then these are different than are different on win2k8r2 and win2012.  So the only way to use the same consistent tool, would be to go with dism.\nWhat would be ideal, is that chocolatey to support all of the features that ServerManagerCmd has on all platforms, this way you have a consistent front in.  In doing so, it would have to know the dependencies and install such dependencies.  I'm not sure how this would be done so that using choco will grab other dependencies, e.g. installing ASP.NET?\n. :+1:  Don't like having extra stuff installed just for installing installers...\n. :+1:\n. ",
    "yannisgu": "I'm sorry, I hadn't seen the normal process before. I added two unit tests: one with and one without installArguments  attribute. \n. In our company we have different packages.config for different dev-environments. We have also a single Visual Studio package which installs all features (Windows Phone, Silverlight, C++, etc). But we would like to configure a specific AdminDeployment.xml (with the feature set) foreach environment.\n. I'm sorry, I hadn't seen the normal process before. I added two unit tests: one with and one without installArguments  attribute. \n. In our company we have different packages.config for different dev-environments. We have also a single Visual Studio package which installs all features (Windows Phone, Silverlight, C++, etc). But we would like to configure a specific AdminDeployment.xml (with the feature set) foreach environment.\n. ",
    "AbhishekTripathi": "This actually is a good idea. Command line tools are used \"mostly\" by developers. Chocolatey is a great utility but sometimes I am torn between chocolatey and npm. It might be a good idea to merge the two or allow chocolatey to install libraries from npm module catalog. NPM helper for chocolatey would be greatly appreciated. \nUpdate:\nChocolatey already has helpers for python, ruby etc in  https://github.com/chocolatey/chocolatey/blob/master/src/functions/Chocolatey-Install.ps1\npowershell\nswitch -wildcard ($source) \n  {\n    \"webpi\" { Chocolatey-WebPI $packageName $installerArguments; }\n    \"windowsfeatures\" { Chocolatey-WindowsFeatures $packageName; }\n    \"cygwin\" { Chocolatey-Cygwin $packageName $installerArguments; }\n    \"python\" { Chocolatey-Python $packageName $version $installerArguments; }\n    \"ruby\" { Chocolatey-RubyGem $packageName $version $installerArguments; }\n    default {Invoke-ChocolateyFunction \"Chocolatey-Nuget\" @($packageName,$source,$version,$installerArguments)}\n  }\n. This actually is a good idea. Command line tools are used \"mostly\" by developers. Chocolatey is a great utility but sometimes I am torn between chocolatey and npm. It might be a good idea to merge the two or allow chocolatey to install libraries from npm module catalog. NPM helper for chocolatey would be greatly appreciated. \nUpdate:\nChocolatey already has helpers for python, ruby etc in  https://github.com/chocolatey/chocolatey/blob/master/src/functions/Chocolatey-Install.ps1\npowershell\nswitch -wildcard ($source) \n  {\n    \"webpi\" { Chocolatey-WebPI $packageName $installerArguments; }\n    \"windowsfeatures\" { Chocolatey-WindowsFeatures $packageName; }\n    \"cygwin\" { Chocolatey-Cygwin $packageName $installerArguments; }\n    \"python\" { Chocolatey-Python $packageName $version $installerArguments; }\n    \"ruby\" { Chocolatey-RubyGem $packageName $version $installerArguments; }\n    default {Invoke-ChocolateyFunction \"Chocolatey-Nuget\" @($packageName,$source,$version,$installerArguments)}\n  }\n. ",
    "alexinslc": "I created a pull request but the new version of Chocolatey is coming soon so it's not needed here just yet. However, I would like to know if it will be supported in the newer C# rewrite of Chocolatey....anyone?\n. I created a pull request but the new version of Chocolatey is coming soon so it's not needed here just yet. However, I would like to know if it will be supported in the newer C# rewrite of Chocolatey....anyone?\n. ",
    "chrisdostert": "Absolutely do this +1.\n. I'm aware the value is updated inside of the session chocolateyInstall.ps1 is running in but that is worthless for my usage scenarios. I need the variable to be updated in the parent session. \nJust to be clear I did as you say and a run through of the result is: \n```\ncinst posh-ci -source C:\\TEMP\nChocolatey (v0.9.8.28) is installing 'posh-ci' and dependencies..\noutput from chocolateyInstall.ps1\ninvoke $env:PSModulePath\nunchanged value\ninvoke Update-SessionEnvironment\ninvoke $env:PSModulePath again\nchanged value\nPosh-CI has finished successfully! The chocolatey gods have answered your request!\nok so chocolatey did the install.. now invoke $env:PSModulePath\nunchanged value\n```\nI'm just curious but why is chocolateyInstall.ps1 run in it's own session and not the session used to invoke cinst with?\n. I understand the problem; it just seems an approach could be taken which did not result in this limitation; i.e. not using a child session to perform the actual install. Where is the requirement for an entirely separate session coming from? just seems unnecessary/ convoluted\n. Absolutely do this +1.\n. I'm aware the value is updated inside of the session chocolateyInstall.ps1 is running in but that is worthless for my usage scenarios. I need the variable to be updated in the parent session. \nJust to be clear I did as you say and a run through of the result is: \n```\ncinst posh-ci -source C:\\TEMP\nChocolatey (v0.9.8.28) is installing 'posh-ci' and dependencies..\noutput from chocolateyInstall.ps1\ninvoke $env:PSModulePath\nunchanged value\ninvoke Update-SessionEnvironment\ninvoke $env:PSModulePath again\nchanged value\nPosh-CI has finished successfully! The chocolatey gods have answered your request!\nok so chocolatey did the install.. now invoke $env:PSModulePath\nunchanged value\n```\nI'm just curious but why is chocolateyInstall.ps1 run in it's own session and not the session used to invoke cinst with?\n. I understand the problem; it just seems an approach could be taken which did not result in this limitation; i.e. not using a child session to perform the actual install. Where is the requirement for an entirely separate session coming from? just seems unnecessary/ convoluted\n. ",
    "mbrownnycnyc": "Note I've updated the gist so that it actually works; still very sloppy and not DRY nonetheless.\nBasically, the idea of writing this was to allow conformance to the general principles laid by MSFT for application installation/uninstallation (regardless of reliance on Windows Installer for installer).  So, this would be very reliable for \"Installed applications.\"\nRob seemed to indicate in the google groups post that it might make sense to have the helper detect if an application is installed (\"...how we could not require a need for a chocolateyUninstall.ps1 if a chocolateyInstall.ps1 had nothing more than a call to an installer\").  It probably makes sense to put as much logic outside of the chocolateyInstall and chocolateyUninstall scripts, but I don't think there is a need to change anything oddly.  In my opinion, all packages should actually require(!) a chocolateyUninstall script (regardless if the application is \"portable\" or \"installable\"); this allows chocolatey to be the go to guy for managing the packages that it manages [to be clear: chocolatey should remain as a layer of abstraction for underlying systems].  This is why I put my effort in as I did.\nRob: There are scenarios where the UninstallString is not an MSI, but a straight EXE (of course) [I could swear that PDFcreator installed via MSI, but it's uninstaller is an EXE].  With the storage of the GUID, you'd be introducing a layer of management into chocolatey instead of leaving it as is, very extensible.  This is why I like the idea of a chocolateyUninstall.ps1 being included in all packages.  I even considered putting in a conditional like \"if filetype == MSI, then silentargs == '/quiet', '/x'\" (etc), but this just doesn't make sense from a package creation standpoint.  Everything should be left as extensible as possible.\nUnless it shouldn't :smiley:\nWhat do you think?\nP.S.:\nI'll keep updating the gist as I work out kinks and clean it up.\n. Working on somethung elegent for the 32/64 bit registry alias thing can also help with this as well: https://github.com/chocolatey/chocolatey/issues/341\n. Note I've updated the gist so that it actually works; still very sloppy and not DRY nonetheless.\nBasically, the idea of writing this was to allow conformance to the general principles laid by MSFT for application installation/uninstallation (regardless of reliance on Windows Installer for installer).  So, this would be very reliable for \"Installed applications.\"\nRob seemed to indicate in the google groups post that it might make sense to have the helper detect if an application is installed (\"...how we could not require a need for a chocolateyUninstall.ps1 if a chocolateyInstall.ps1 had nothing more than a call to an installer\").  It probably makes sense to put as much logic outside of the chocolateyInstall and chocolateyUninstall scripts, but I don't think there is a need to change anything oddly.  In my opinion, all packages should actually require(!) a chocolateyUninstall script (regardless if the application is \"portable\" or \"installable\"); this allows chocolatey to be the go to guy for managing the packages that it manages [to be clear: chocolatey should remain as a layer of abstraction for underlying systems].  This is why I put my effort in as I did.\nRob: There are scenarios where the UninstallString is not an MSI, but a straight EXE (of course) [I could swear that PDFcreator installed via MSI, but it's uninstaller is an EXE].  With the storage of the GUID, you'd be introducing a layer of management into chocolatey instead of leaving it as is, very extensible.  This is why I like the idea of a chocolateyUninstall.ps1 being included in all packages.  I even considered putting in a conditional like \"if filetype == MSI, then silentargs == '/quiet', '/x'\" (etc), but this just doesn't make sense from a package creation standpoint.  Everything should be left as extensible as possible.\nUnless it shouldn't :smiley:\nWhat do you think?\nP.S.:\nI'll keep updating the gist as I work out kinks and clean it up.\n. Working on somethung elegent for the 32/64 bit registry alias thing can also help with this as well: https://github.com/chocolatey/chocolatey/issues/341\n. ",
    "Chromebuster": "In the next month or two, I'm going to have my servers up and running again, and at least one of them will be a TFS build server on top of other things, so i'm glad to allow you guys to use it; I'll run stuff on that little guy, and you can have your validation; just tell me what you want set up, and the server will have your TFS CI agent running on it.\n. A VM shouldn\u2019t be required; I have one, going on two, computers (servers, actually), that run all the time, constantly, nonstop.  Invite them into Chocolatey\u2019s service, please.\nFrom: Redsandro [mailto:notifications@github.com]\nSent: Monday, December 23, 2013 8:49 AM\nTo: chocolatey/chocolatey\nCc: Katherine Moss\nSubject: Re: [chocolatey] Improvement for the package triage process (#342)\nCan you elaborate more on this @Redsandrohttps://github.com/Redsandro\nIn this case I'm actually not talking about Boxstarter, but in the light of this being a Chocolatey topic, the talk about VMs gave me this idea. Automatic packages need to be automatically generated on computers running all the time (or at least frequently). I don't run Windows, so I cannot turn my packages into automatic packages.\nWhy not have a VM do this, and have the user Chocolateyhttp://chocolatey.org/profiles/Chocolatey user push them, as described in the community packages repohttps://github.com/chocolatey/chocolatey-coreteampackages.\nFor every package that is stuck unupdated with an unresponsive maintainer, we (or someone who decides this) can just 'kidnap' the stuck package, turn it into an autopackage, and hand it over to the VM/Chocolatey user.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/342#issuecomment-31119912.\n. Package moderation will make more people embrace Chocolatey who aren\u2019t already due to security issues on their end.\nFrom: Rob Reynolds [mailto:notifications@github.com]\nSent: Tuesday, July 29, 2014 14:42\nTo: chocolatey/chocolatey\nCc: Katherine Moss\nSubject: Re: [chocolatey] Improvement for the package triage process (#342)\n@rismoneyhttps://github.com/rismoney The working implementation of chocolatey vPosh is a working solution, nowhere near perfect. I mean just look at all the issues, man! :)\nThe really good solution of chocolatey vNative Exe is going to be worlds closer to stable.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/342#issuecomment-50519727.\n. In the next month or two, I'm going to have my servers up and running again, and at least one of them will be a TFS build server on top of other things, so i'm glad to allow you guys to use it; I'll run stuff on that little guy, and you can have your validation; just tell me what you want set up, and the server will have your TFS CI agent running on it.\n. A VM shouldn\u2019t be required; I have one, going on two, computers (servers, actually), that run all the time, constantly, nonstop.  Invite them into Chocolatey\u2019s service, please.\nFrom: Redsandro [mailto:notifications@github.com]\nSent: Monday, December 23, 2013 8:49 AM\nTo: chocolatey/chocolatey\nCc: Katherine Moss\nSubject: Re: [chocolatey] Improvement for the package triage process (#342)\nCan you elaborate more on this @Redsandrohttps://github.com/Redsandro\nIn this case I'm actually not talking about Boxstarter, but in the light of this being a Chocolatey topic, the talk about VMs gave me this idea. Automatic packages need to be automatically generated on computers running all the time (or at least frequently). I don't run Windows, so I cannot turn my packages into automatic packages.\nWhy not have a VM do this, and have the user Chocolateyhttp://chocolatey.org/profiles/Chocolatey user push them, as described in the community packages repohttps://github.com/chocolatey/chocolatey-coreteampackages.\nFor every package that is stuck unupdated with an unresponsive maintainer, we (or someone who decides this) can just 'kidnap' the stuck package, turn it into an autopackage, and hand it over to the VM/Chocolatey user.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/342#issuecomment-31119912.\n. Package moderation will make more people embrace Chocolatey who aren\u2019t already due to security issues on their end.\nFrom: Rob Reynolds [mailto:notifications@github.com]\nSent: Tuesday, July 29, 2014 14:42\nTo: chocolatey/chocolatey\nCc: Katherine Moss\nSubject: Re: [chocolatey] Improvement for the package triage process (#342)\n@rismoneyhttps://github.com/rismoney The working implementation of chocolatey vPosh is a working solution, nowhere near perfect. I mean just look at all the issues, man! :)\nThe really good solution of chocolatey vNative Exe is going to be worlds closer to stable.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/chocolatey/chocolatey/issues/342#issuecomment-50519727.\n. ",
    "JogoShugh": "Thanks Rob, I will give it a try. And, it does finish. It does not just sit there.\n. Thanks Rob, I will give it a try. And, it does finish. It does not just sit there.\n. ",
    "kopelli": "Is there any reason for the install of the package manually versus relying on the NuSpec dependencies? If you listed the package as a dependency with a constraint on the version I would think it should fit the need. It's possible by having the dependencies node look something like this:\n<dependencies>\n            <dependency id=\"ruby\" version=\"[1, 2)\" />\n        </dependencies>\nThis means that you require Ruby >= 1 and < 2 (so all updates and minor patches up until, and not including, version 2).\n. Deviating from the topic, but if I see multiple major versions of a product as separate packages, I'd assume they can be installed side by side and have no impact on each other (and can be installed in whichever order the user wants). That's not the case with an add-in like ReSharper.\nSo the need is definitely still there.\n. Is there any reason for the install of the package manually versus relying on the NuSpec dependencies? If you listed the package as a dependency with a constraint on the version I would think it should fit the need. It's possible by having the dependencies node look something like this:\n<dependencies>\n            <dependency id=\"ruby\" version=\"[1, 2)\" />\n        </dependencies>\nThis means that you require Ruby >= 1 and < 2 (so all updates and minor patches up until, and not including, version 2).\n. Deviating from the topic, but if I see multiple major versions of a product as separate packages, I'd assume they can be installed side by side and have no impact on each other (and can be installed in whichever order the user wants). That's not the case with an add-in like ReSharper.\nSo the need is definitely still there.\n. ",
    "mvandiest": "I am having an issue running the following in powershell:\ncinst OctopusDeploy.Tentacle -ia 'INSTALLLOCATION=''S:\\Folder with Spaces''' -force\nThe result in debug mode is:\nElevating Permissions and running msiexec /i \n\"C:\\Users\\Michael\\AppData\\Local\\Temp\\chocolatey\\OctopusDeploy.Tentacle\\OctopusDeploy.TentacleInstall.msi\" \n/quiet INSTALLLOCATION=S:\\Folder\nNote that the double ticks are not properly converted by choco as the this doc suggests, resulting in my INSTALLLOCATION to be truncated.\nThe command runs fine a regular cmd window so it's certainly a powershell specific issue with quote replacement. Am I doing something wrong or is this truly a choco bug?\n. I've tried all flavors of escaping the quotes, including your backtick suggestion, none of which seem to work. In all cases my paths containing spaces do not work.\nThe following call:\ncinst OctopusDeploy.Tentacle -version 2.5.2.221 -ia \"INSTALLLOCATION=\"S:\\Program Files\\Octopus Deploy\\Tentacle\"\" -force -debug\nresults in the following log entry:\nElevating Permissions and running msiexec /i \n\"C:\\Users\\Michael\\AppData\\Local\\Temp\\chocolatey\\OctopusDeploy.Tentacle\\OctopusD\neploy.TentacleInstall.msi\" /quiet INSTALLLOCATION=S:\\Program. This may take \nawhile, depending on the statements.\n. Just tried but it leads to invalid escaping in PS so it won't even run.\n. Actually the following got me a little further:\ncinst OctopusDeploy.Tentacle version 2.5.2.221 -ia \"INSTALLLOCATION='^''S:\\Programs Test\\OctopusDeploy\\Tentacle^'''\" -debug -force\nin that it didn't completely truncate my INSTALLLOCATION, however it's still not quoted properly and leads to a failure.\nDebug Output:\nDEBUG: Elevating Permissions and running msiexec /i \n\"C:\\Users\\Michael\\AppData\\Local\\Temp\\chocolatey\\OctopusDeploy.Tentacle\\OctopusD\neploy.TentacleInstall.msi\" /quiet INSTALLLOCATION=S:\\Programs \nTest\\OctopusDeploy\\Tentacle. This may take awhile, depending on the statements.\n. I am having an issue running the following in powershell:\ncinst OctopusDeploy.Tentacle -ia 'INSTALLLOCATION=''S:\\Folder with Spaces''' -force\nThe result in debug mode is:\nElevating Permissions and running msiexec /i \n\"C:\\Users\\Michael\\AppData\\Local\\Temp\\chocolatey\\OctopusDeploy.Tentacle\\OctopusDeploy.TentacleInstall.msi\" \n/quiet INSTALLLOCATION=S:\\Folder\nNote that the double ticks are not properly converted by choco as the this doc suggests, resulting in my INSTALLLOCATION to be truncated.\nThe command runs fine a regular cmd window so it's certainly a powershell specific issue with quote replacement. Am I doing something wrong or is this truly a choco bug?\n. I've tried all flavors of escaping the quotes, including your backtick suggestion, none of which seem to work. In all cases my paths containing spaces do not work.\nThe following call:\ncinst OctopusDeploy.Tentacle -version 2.5.2.221 -ia \"INSTALLLOCATION=\"S:\\Program Files\\Octopus Deploy\\Tentacle\"\" -force -debug\nresults in the following log entry:\nElevating Permissions and running msiexec /i \n\"C:\\Users\\Michael\\AppData\\Local\\Temp\\chocolatey\\OctopusDeploy.Tentacle\\OctopusD\neploy.TentacleInstall.msi\" /quiet INSTALLLOCATION=S:\\Program. This may take \nawhile, depending on the statements.\n. Just tried but it leads to invalid escaping in PS so it won't even run.\n. Actually the following got me a little further:\ncinst OctopusDeploy.Tentacle version 2.5.2.221 -ia \"INSTALLLOCATION='^''S:\\Programs Test\\OctopusDeploy\\Tentacle^'''\" -debug -force\nin that it didn't completely truncate my INSTALLLOCATION, however it's still not quoted properly and leads to a failure.\nDebug Output:\nDEBUG: Elevating Permissions and running msiexec /i \n\"C:\\Users\\Michael\\AppData\\Local\\Temp\\chocolatey\\OctopusDeploy.Tentacle\\OctopusD\neploy.TentacleInstall.msi\" /quiet INSTALLLOCATION=S:\\Programs \nTest\\OctopusDeploy\\Tentacle. This may take awhile, depending on the statements.\n. ",
    "grv87": "Shouldn't it be handled by higher-level instruments like Chef or Puppet?\n. Shouldn't it be handled by higher-level instruments like Chef or Puppet?\n. ",
    "amosjyng": "The chocolatey website still serves Chocolatey version 0.9.8.23, which has this problem. How can I get the updated version?\n. Nevermind, opening a new cmd window solved it.\n. The chocolatey website still serves Chocolatey version 0.9.8.23, which has this problem. How can I get the updated version?\n. Nevermind, opening a new cmd window solved it.\n. ",
    "AaronFriel": "Is there any update on this?\n. @ferventcoder  - Could be binaries like DLLs, but can also just be executables that need to be accessed. \nThe helper doesn't work because the path is versioned, here is my putty-portable path:\nC:\\chocolatey\\lib\\putty.portable.0.63\\tools\nWhat will that be after updating? \nC:\\chocolatey\\lib\\putty.portable.$unknown\\tools \nSo how much good does it do me to add that to my path? It means that some day in the future my path breaks, because I can't add all possible future values of $unknown to my path.\n. Exactly, it's added as a _batch redirect. I can't emphasize that enough. PSFTP.exe is not, itself, on my path, and applications searching for PSFTP.exe _fail.\n. How can I leave the XP world behind and use these shims?\n. Eager to hear about that. Apologies for my harsh reply earlier.\n. Is there any update on this?\n. @ferventcoder  - Could be binaries like DLLs, but can also just be executables that need to be accessed. \nThe helper doesn't work because the path is versioned, here is my putty-portable path:\nC:\\chocolatey\\lib\\putty.portable.0.63\\tools\nWhat will that be after updating? \nC:\\chocolatey\\lib\\putty.portable.$unknown\\tools \nSo how much good does it do me to add that to my path? It means that some day in the future my path breaks, because I can't add all possible future values of $unknown to my path.\n. Exactly, it's added as a _batch redirect. I can't emphasize that enough. PSFTP.exe is not, itself, on my path, and applications searching for PSFTP.exe _fail.\n. How can I leave the XP world behind and use these shims?\n. Eager to hear about that. Apologies for my harsh reply earlier.\n. ",
    "marcelklehr": "Could you release this as open source? I could really use something like this.\n. Could you release this as open source? I could really use something like this.\n. ",
    "georgehemmings": "@ferventcoder have you made any progress on the stripping of quotes issue?\n. @ferventcoder have you made any progress on the stripping of quotes issue?\n. ",
    "pfmoore": "I don't see the sources for shimgen anywhere. Are they available?\n. I don't see the sources for shimgen anywhere. Are they available?\n. ",
    "bill-long": "Love this output. +1 for a Powershell module.\n. Reopening this. I'm a GitHub noob, so I guess merging those commits into my branch closed this pull request?\n. Am I supposed to submit a new pull request with the new code?\nEdit: I think I figured it out. Those changes were merged into master. After merging master into get-binroot-fix, the changes are reflected in this pull request. Let me know if I screwed something up.\n. Alright, since we intend to support being able to set it to C:\\, I am reverting @Redsandro's additions. This means we should probably open a new issue on the fact that if you DO set it to C:\\, Write-FileUpdateLog.ps1 produces a zillion failures.\n. Maybe Write-FileUpdateLog can be updated to just ignore directories it can't access?\nIn any case, I have reverted this to my original, narrow fix, which stops $binRoot from being unintentionally set to C:\\ on new installations where the value is not set. As @Redsandro pointed out, we really should merge this narrow fix ASAP to stop future occurrences, as well as get all packages that directly contain Get-BinRoot.ps1 updated.\nI created #434 to track the additional work that needs to happen after this narrow fix. Either we need to do something similar to @Redsandro's changes that I reverted, or we need to change Write-FileUpdateLog so that it works when bin root is the systemdrive root.\n. Well, I do still have your changes in my master branch, so if @ferventcoder changes his mind, I can just merge them back in. :-)\n. Sure, add me and I'll update the packages. I'm \"bilong\" on chocolatey.org.\n. Still just waiting for this to be pulled. I created #434 for some additional work that needs to be considered, but this needs to be pulled regardless.\n. As noted in #434, if we're going to support setting bin root to C:\\, then we need to fix Write-FileUpdateLog. We should probably continue this discussion there.\n. Is the mailing list the same thing as the google group? I see the contributing.md mentions a mailing list but I can't find anything that says what the mailing list actually is.\n. I just tried this on Windows 8.1 with no problem, so it would seem there's another variable here.\n\n. I noticed in the log you posted the user didn't have %ChocolateyBinRoot% set, whereas in mine, I have it set to C:\\tools. There's an issue in Get-BinRoot.ps1 that causes it to default to C:\\ if it isn't set, so I removed the value to see what would happen.\nFor some reason, it's trying to Get-ChildItem on just about everything, It looks like the command is Get-ChildItem -Recurse $locationToMonitor. That's failing becaue it doesn't have access to everything under C:.\n\nAnd finally:\n\nSo I guess this is a side effect of #421. Since this package actually contains the Get-BinRoot.ps1 script directly, I suppose you could fix it by implementing my #421 fix directly in the package, so that it defaults to C:\\tools like it's supposed to, instead of C:.\nOf course, if someone has actually set %ChocolateyBinRoot% to C:\\ in their environment variables (or if a package with a bad Get-BinRoot.ps1, such as this one, has set the environment variable already from a previous install), then it's still going to fail.\n. In other words, fixing the script in the package will fix this problem for any users who have never run the buggy Get-BinRoot.ps1. For users have that have already run it, the environment variable will already be set to C:\\ (unless they've changed it), so this package will continue failing for them until either they change their bin root to something that makes sense, or until this installer quits trying to recurse every folder under the path.\n. @ferventcoder note that with the updated #421 fix, purposely setting the system drive root as the bin root is no longer possible. See the conversation here: https://github.com/bill-long/chocolatey/pull/1\nIf you did want to allow people to purposely set the system drive root as bin root, we need to back out @Redsandro's additions to #421 and take a different approach.\n. I'm not able to reproduce this. Works fine on Win 7 even with a space in the path:\n\n\nCan you post the exact errors you saw?\n. I noticed in my previous screenshots it was using the 8.3 name, so I disabled 8.3 naming, logged in as a new user with a space in the name, and it still works even without the 8.3 name:\n\n. Is the VM running 32-bit Windows by chance? I just took a quick look at the chocolateyInstall.ps1 for SublimeText3, and it might only work on 64-bit:\n\nDoes that environment variable exist on a 32-bit Windows install? I don't have a 32-bit VM to test at the moment, but if you are indeed running 32-bit, just go to Powershell and type:\n\"$env:ProgramFiles(x86)\"\n\nEdit: Yeah, according to TechNet, that environment variable does not exist on 32-bit Windows. Also, when I nuked that environment variable on one of my 64-bit VMs, SublimeText3 began failing with the same error.\n. Ugh, wrong repo.\n. Love this output. +1 for a Powershell module.\n. Reopening this. I'm a GitHub noob, so I guess merging those commits into my branch closed this pull request?\n. Am I supposed to submit a new pull request with the new code?\nEdit: I think I figured it out. Those changes were merged into master. After merging master into get-binroot-fix, the changes are reflected in this pull request. Let me know if I screwed something up.\n. Alright, since we intend to support being able to set it to C:\\, I am reverting @Redsandro's additions. This means we should probably open a new issue on the fact that if you DO set it to C:\\, Write-FileUpdateLog.ps1 produces a zillion failures.\n. Maybe Write-FileUpdateLog can be updated to just ignore directories it can't access?\nIn any case, I have reverted this to my original, narrow fix, which stops $binRoot from being unintentionally set to C:\\ on new installations where the value is not set. As @Redsandro pointed out, we really should merge this narrow fix ASAP to stop future occurrences, as well as get all packages that directly contain Get-BinRoot.ps1 updated.\nI created #434 to track the additional work that needs to happen after this narrow fix. Either we need to do something similar to @Redsandro's changes that I reverted, or we need to change Write-FileUpdateLog so that it works when bin root is the systemdrive root.\n. Well, I do still have your changes in my master branch, so if @ferventcoder changes his mind, I can just merge them back in. :-)\n. Sure, add me and I'll update the packages. I'm \"bilong\" on chocolatey.org.\n. Still just waiting for this to be pulled. I created #434 for some additional work that needs to be considered, but this needs to be pulled regardless.\n. As noted in #434, if we're going to support setting bin root to C:\\, then we need to fix Write-FileUpdateLog. We should probably continue this discussion there.\n. Is the mailing list the same thing as the google group? I see the contributing.md mentions a mailing list but I can't find anything that says what the mailing list actually is.\n. I just tried this on Windows 8.1 with no problem, so it would seem there's another variable here.\n\n. I noticed in the log you posted the user didn't have %ChocolateyBinRoot% set, whereas in mine, I have it set to C:\\tools. There's an issue in Get-BinRoot.ps1 that causes it to default to C:\\ if it isn't set, so I removed the value to see what would happen.\nFor some reason, it's trying to Get-ChildItem on just about everything, It looks like the command is Get-ChildItem -Recurse $locationToMonitor. That's failing becaue it doesn't have access to everything under C:.\n\nAnd finally:\n\nSo I guess this is a side effect of #421. Since this package actually contains the Get-BinRoot.ps1 script directly, I suppose you could fix it by implementing my #421 fix directly in the package, so that it defaults to C:\\tools like it's supposed to, instead of C:.\nOf course, if someone has actually set %ChocolateyBinRoot% to C:\\ in their environment variables (or if a package with a bad Get-BinRoot.ps1, such as this one, has set the environment variable already from a previous install), then it's still going to fail.\n. In other words, fixing the script in the package will fix this problem for any users who have never run the buggy Get-BinRoot.ps1. For users have that have already run it, the environment variable will already be set to C:\\ (unless they've changed it), so this package will continue failing for them until either they change their bin root to something that makes sense, or until this installer quits trying to recurse every folder under the path.\n. @ferventcoder note that with the updated #421 fix, purposely setting the system drive root as the bin root is no longer possible. See the conversation here: https://github.com/bill-long/chocolatey/pull/1\nIf you did want to allow people to purposely set the system drive root as bin root, we need to back out @Redsandro's additions to #421 and take a different approach.\n. I'm not able to reproduce this. Works fine on Win 7 even with a space in the path:\n\n\nCan you post the exact errors you saw?\n. I noticed in my previous screenshots it was using the 8.3 name, so I disabled 8.3 naming, logged in as a new user with a space in the name, and it still works even without the 8.3 name:\n\n. Is the VM running 32-bit Windows by chance? I just took a quick look at the chocolateyInstall.ps1 for SublimeText3, and it might only work on 64-bit:\n\nDoes that environment variable exist on a 32-bit Windows install? I don't have a 32-bit VM to test at the moment, but if you are indeed running 32-bit, just go to Powershell and type:\n\"$env:ProgramFiles(x86)\"\n\nEdit: Yeah, according to TechNet, that environment variable does not exist on 32-bit Windows. Also, when I nuked that environment variable on one of my 64-bit VMs, SublimeText3 began failing with the same error.\n. Ugh, wrong repo.\n. ",
    "przemoc": "I have to add that while my exemplary gist, linked in the comments about  AOMEI Partition Assistant Standard, is working, it was only a kind of quick and dirty how-it-can-be-done thing. It may work as a first approach, but it's wrong in the long term, because regexps shouldn't be used to parse html - html parser is needed for it.\nQuestion is whether PowerShell has html parser out-of-the-box and if not, which one of open source ones out there (I think there should be at least one, but haven't googled yet) should be included in chocolatey for convenience of package creators.\n. I have to add that while my exemplary gist, linked in the comments about  AOMEI Partition Assistant Standard, is working, it was only a kind of quick and dirty how-it-can-be-done thing. It may work as a first approach, but it's wrong in the long term, because regexps shouldn't be used to parse html - html parser is needed for it.\nQuestion is whether PowerShell has html parser out-of-the-box and if not, which one of open source ones out there (I think there should be at least one, but haven't googled yet) should be included in chocolatey for convenience of package creators.\n. ",
    "cfoellmann": "How about adding \n- https://github.com/chocolatey/chocolatey-coreteampackages/blob/master/automatic/mkvtoolnix/tools/get-fosshublinks.ps1\n- https://github.com/Redsandro/chocolatey/blob/master/autopackages/PartitionAssistant/tools/Get-UrlFromCnet2.ps1\nto https://github.com/chocolatey/chocolateytemplates /helpers ?\nAnd referencing those and future helpers in the docs.\n. How about adding \n- https://github.com/chocolatey/chocolatey-coreteampackages/blob/master/automatic/mkvtoolnix/tools/get-fosshublinks.ps1\n- https://github.com/Redsandro/chocolatey/blob/master/autopackages/PartitionAssistant/tools/Get-UrlFromCnet2.ps1\nto https://github.com/chocolatey/chocolateytemplates /helpers ?\nAnd referencing those and future helpers in the docs.\n. ",
    "djowatts": "I'm having a strange issue. Running clist -source windowsfeatures on my Windows Server 2012 returns 0 results, but running the same command locally on my Win7 machine returns what you would expect. Is this related to this?\nEDIT - Just read the page for version 0.9.9 these features have been temporarily disabled. Google made that far to hard to find!\n. I'm having a strange issue. Running clist -source windowsfeatures on my Windows Server 2012 returns 0 results, but running the same command locally on my Win7 machine returns what you would expect. Is this related to this?\nEDIT - Just read the page for version 0.9.9 these features have been temporarily disabled. Google made that far to hard to find!\n. ",
    "atruelsen": "I've had to patch my local chocolatey install to get around this issue, please update the nuget.exe.\n. I've had to patch my local chocolatey install to get around this issue, please update the nuget.exe.\n. ",
    "da9l": "Thanks Rob!\nHowever, since there is no .ignore file is there any risk that a batch redirect will be created for the installer.exe?\n. Thanks Rob!\nHowever, since there is no .ignore file is there any risk that a batch redirect will be created for the installer.exe?\n. ",
    "geraldcombs": "The generated files use DOS line endings, which makes them unusable from a standard Cygwin environment. Would it be possible to insert something like\n% {$_.replace(\"`r`n\", \"`n\")}\nbefore Out-File in the pipeline?\n. The generated files use DOS line endings, which makes them unusable from a standard Cygwin environment. Would it be possible to insert something like\n% {$_.replace(\"`r`n\", \"`n\")}\nbefore Out-File in the pipeline?\n. ",
    "InPermutation": "PS\nPS> plink -pw vagrant vagrant@192.168.137.193 'whoami && whoami'\nvagrant\nporos\\jacob\nSame results, because the strings \"whoami && whoami\" and 'whoami && whoami' are identical in PowerShell. I'm not sure what \"double quotes don't work very well in powershell\" means - they work exactly as they were designed.\n. @rismoney that is the opposite of the problem we are having - we want to run whoami inside the SSH session, not PowerShell.\n. @ferventcoder should I just wait for the shim exes, then?\n. @ferventcoder Looking forward to it. Thanks.\n. PS\nPS> plink -pw vagrant vagrant@192.168.137.193 'whoami && whoami'\nvagrant\nporos\\jacob\nSame results, because the strings \"whoami && whoami\" and 'whoami && whoami' are identical in PowerShell. I'm not sure what \"double quotes don't work very well in powershell\" means - they work exactly as they were designed.\n. @rismoney that is the opposite of the problem we are having - we want to run whoami inside the SSH session, not PowerShell.\n. @ferventcoder should I just wait for the shim exes, then?\n. @ferventcoder Looking forward to it. Thanks.\n. ",
    "dajoen": "Sorry, fixed it myself. -debug was what I needed to see what went wrong. Deleted all dependencies from lib and everything from lib-bad and now I could install KickAssVim without issues.\n. The issue was that the moving of the package to the lib-false directory was failing. After emptying that directory I was able to reinstall. \n. Sorry, fixed it myself. -debug was what I needed to see what went wrong. Deleted all dependencies from lib and everything from lib-bad and now I could install KickAssVim without issues.\n. The issue was that the moving of the package to the lib-false directory was failing. After emptying that directory I was able to reinstall. \n. ",
    "Dalmirog": "Thx Rob, that update helped me make this work :)\nFor those interested, this is how i got it working. Kind of a dirty solutions, since i'm not actually using a switch\nChocolateyInstall.ps1\n$switch=$false\nif($env:chocolateyPackageParameters = \"true\") #this is a [string], not a [bool]\n{$switch=$true}\nif ($switch){ \"The switch worked!\"}\nelse  {\"The switch did not work :( \"}\nCommand\n \n. Thx Rob, that update helped me make this work :)\nFor those interested, this is how i got it working. Kind of a dirty solutions, since i'm not actually using a switch\nChocolateyInstall.ps1\n$switch=$false\nif($env:chocolateyPackageParameters = \"true\") #this is a [string], not a [bool]\n{$switch=$true}\nif ($switch){ \"The switch worked!\"}\nelse  {\"The switch did not work :( \"}\nCommand\n \n. ",
    "OlduwanSteve": "Hi, first just to say thanks for finding this: I was trying to get 'windowsfeatures' to work properly with puppet, and it turns out I was running into this exact issue.\nAnyway, this is just a note that 'dism' is also called from Chocolatey.List if the source is 'windowsfeatures', so the same fix needs to be applied there.\n. This commit contains a fix. I'll have to read up on pester before I can write tests.\nhttps://github.com/OlduwanSteve/chocolatey/commit/a50984db1f3e18db93ab5f189ef87fbd543616dc\n. I've said something similar on the forum already: I think this is the right way to do redirection, but I'd like to see a good place to hang other redirection schemes (like a file based cache, a rewrite rule, or even a call out to another script). I think that's mainly about breaking out the CSV specific code and making Get-RedirectedWebFileUrl a 'switch' to call other methods. I don't think it would take much to get there from here, and I'm willing to do some of the work.\n. Your first paragraph all sounds good to me.\nI don't know about the extension thing, but if it works as you say then adding a 'null' mapper at the start of the chain would work nicely, e.g. Map-UserRedirectedUrl it would just return $false.\n. No it looks like that file is only in master.\n. Hi, first just to say thanks for finding this: I was trying to get 'windowsfeatures' to work properly with puppet, and it turns out I was running into this exact issue.\nAnyway, this is just a note that 'dism' is also called from Chocolatey.List if the source is 'windowsfeatures', so the same fix needs to be applied there.\n. This commit contains a fix. I'll have to read up on pester before I can write tests.\nhttps://github.com/OlduwanSteve/chocolatey/commit/a50984db1f3e18db93ab5f189ef87fbd543616dc\n. I've said something similar on the forum already: I think this is the right way to do redirection, but I'd like to see a good place to hang other redirection schemes (like a file based cache, a rewrite rule, or even a call out to another script). I think that's mainly about breaking out the CSV specific code and making Get-RedirectedWebFileUrl a 'switch' to call other methods. I don't think it would take much to get there from here, and I'm willing to do some of the work.\n. Your first paragraph all sounds good to me.\nI don't know about the extension thing, but if it works as you say then adding a 'null' mapper at the start of the chain would work nicely, e.g. Map-UserRedirectedUrl it would just return $false.\n. No it looks like that file is only in master.\n. ",
    "davehorner": ":+1:\n. :+1: nice work.\n. :+1:\n. :+1: nice work.\n. ",
    "diegoesp": "OK. Thanks!\n. OK. Thanks!\n. ",
    "dliuzzi": "Thank you guys for your replies. I forgot to mention that along with the Role, I got a few Features installed as well:\nRemote Server Administration Tools\n    Role Administration Tools\n        Web Server (IIS) Tools\nWindows Process Activity Service\n    Process Model\n    .NET Environment\n    Configuration APIs\nThese were not there before installing Chocolatey. I assume it must the same reason (WebPI adding them when it installs .NET 4.)\nNow that you bring up WebPI, I remember when I started playing with Chocolatey, I was unsure on which source to use when there are many. For example ASP.NET MVC 3 can be installed from both the default source (i.e. cinst aspnetmvc.install), as well as the from the webpi source (i.e. choco webpi MVC3). I was under the impression WebPI might be the better choice, as it seems more \"package oriented\" than vanilla MSI, so I was using that. Now I'm not sure. Is the default source better for these cases?\nThanks again.\n. Thank you guys for your replies. I forgot to mention that along with the Role, I got a few Features installed as well:\nRemote Server Administration Tools\n    Role Administration Tools\n        Web Server (IIS) Tools\nWindows Process Activity Service\n    Process Model\n    .NET Environment\n    Configuration APIs\nThese were not there before installing Chocolatey. I assume it must the same reason (WebPI adding them when it installs .NET 4.)\nNow that you bring up WebPI, I remember when I started playing with Chocolatey, I was unsure on which source to use when there are many. For example ASP.NET MVC 3 can be installed from both the default source (i.e. cinst aspnetmvc.install), as well as the from the webpi source (i.e. choco webpi MVC3). I was under the impression WebPI might be the better choice, as it seems more \"package oriented\" than vanilla MSI, so I was using that. Now I'm not sure. Is the default source better for these cases?\nThanks again.\n. ",
    "RichiCoder1": "Seconded.\n. Really? That's very odd. Why was that switch left in the helper then? Just wasn't removed?\n. In that case, I'll shut this PR down.\n. This actually brings up another question of mine. Being powershell, you should be able to do something like:\npowershell\nchocolatey version all | Format-Table\nFor some reason, though, chocolatey's output is just a string.\n. I feel a little dumb now. The output is a string because you're not calling the ps1 directly, but rather chocolatey.cmd which calls chocolatey.ps1. The batch file's output is, of course, a string.\nIf you want to get the output in a nice table, you can do this:\npowershell\nC:\\Chocolatey\\chocolateyinstall\\chocolatey.ps1 Version All | Format-Table name, found, latest, verMessage\nEdit: If you want to get really crazy, you can do something like:\npowershell\nC:\\Chocolatey\\chocolateyinstall\\chocolatey.ps1 Version All | Select-Object -Property @{n = 'Name'; e = {$_.name}}, @{ n = 'Installed'; e = {$_.found}}, @{n = 'Available'; e = {$_.latest}}, @{n = 'Upgradable'; e = { if($_.found -eq $_.latest) { \"N\" } else {\"Y\"}}}\n. Seconded.\n. Really? That's very odd. Why was that switch left in the helper then? Just wasn't removed?\n. In that case, I'll shut this PR down.\n. This actually brings up another question of mine. Being powershell, you should be able to do something like:\npowershell\nchocolatey version all | Format-Table\nFor some reason, though, chocolatey's output is just a string.\n. I feel a little dumb now. The output is a string because you're not calling the ps1 directly, but rather chocolatey.cmd which calls chocolatey.ps1. The batch file's output is, of course, a string.\nIf you want to get the output in a nice table, you can do this:\npowershell\nC:\\Chocolatey\\chocolateyinstall\\chocolatey.ps1 Version All | Format-Table name, found, latest, verMessage\nEdit: If you want to get really crazy, you can do something like:\npowershell\nC:\\Chocolatey\\chocolateyinstall\\chocolatey.ps1 Version All | Select-Object -Property @{n = 'Name'; e = {$_.name}}, @{ n = 'Installed'; e = {$_.found}}, @{n = 'Available'; e = {$_.latest}}, @{n = 'Upgradable'; e = { if($_.found -eq $_.latest) { \"N\" } else {\"Y\"}}}\n. ",
    "qzo": "The uninstall behavior really is quite strange. As mentioned, the uninstaller should remove the wrappers since it has all information it needs. But what really surprised me is that, for some reason, the uninstall procedure recreates all of the wrappers (the operation looks exactly the same as when installing the application). But at least I can see all their names and can remove them manually.\n. The uninstall behavior really is quite strange. As mentioned, the uninstaller should remove the wrappers since it has all information it needs. But what really surprised me is that, for some reason, the uninstall procedure recreates all of the wrappers (the operation looks exactly the same as when installing the application). But at least I can see all their names and can remove them manually.\n. ",
    "georgievrado": "Same here. I am installing Chocolatey on Windows Server 2012 R2 machine through a puppet module which executes the following command:\nSet-ExecutionPolicy -ExecutionPolicy unrestricted; iex ((new-object net.webclient).DownloadString(\\'https://chocolatey.org/install.ps1\\'))\n. @jamiecook I can confirm that the file is not getting downloaded properly. It seems that it got broken last night as it was working yesterday.\n. It seems to be working now.\n. Same here. I am installing Chocolatey on Windows Server 2012 R2 machine through a puppet module which executes the following command:\nSet-ExecutionPolicy -ExecutionPolicy unrestricted; iex ((new-object net.webclient).DownloadString(\\'https://chocolatey.org/install.ps1\\'))\n. @jamiecook I can confirm that the file is not getting downloaded properly. It seems that it got broken last night as it was working yesterday.\n. It seems to be working now.\n. ",
    "jamiecook": "I think this is a problem github - it seems that the 7za.exe file which the install.ps1 downloads to bootstrap the unzipping process is being truncated.\nI've verified this on multiple windows 7 machines and on my mac book. If you look at that file it is marked as being about 587kB but when you wget it it comes down at exactly 512000 bytes. Something is fishy\nhttps://www.dropbox.com/s/bg5f77z4hxn6c03/Screenshot%202014-01-09%2018.12.45.png\n```\nwget https://github.com/chocolatey/chocolatey/blob/master/src/tools/7za.exe?raw=true\n--2014-01-09 18:01:29--  https://github.com/chocolatey/chocolatey/blob/master/src/tools/7za.exe?raw=true\nResolving github.com... 192.30.252.131\nConnecting to github.com|192.30.252.131|:443... connected.\nHTTP request sent, awaiting response... 302 Found\nLocation: https://github.com/chocolatey/chocolatey/raw/master/src/tools/7za.exe [following]\n--2014-01-09 18:01:32--  https://github.com/chocolatey/chocolatey/raw/master/src/tools/7za.exe\nReusing existing connection to github.com:443.\nHTTP request sent, awaiting response... 302 Found\nLocation: https://raw.github.com/chocolatey/chocolatey/master/src/tools/7za.exe [following]\n--2014-01-09 18:01:32--  https://raw.github.com/chocolatey/chocolatey/master/src/tools/7za.exe\nResolving raw.github.com... 103.245.222.133\nConnecting to raw.github.com|103.245.222.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 512000 (500K) [application/octet-stream]\nSaving to: \u20187za.exe?raw=true\u2019\n100%[=====================================================================================================>] 512,000      678KB/s   in 0.7s\n2014-01-09 18:01:37 (678 KB/s) - \u20187za.exe?raw=true\u2019 saved [512000/512000]\n```\n. Interestingly, if I use the secondary raw server (raw2.github.com) it gets the correct sized file - it looks like a corruption of github's primary raw data server - I know there was a problem with their uptime earlier this morning, maybe this is related to that. \nHow would you go about reporting that to them tho?\n```\n\u2234 wget https://raw2.github.com/chocolatey/chocolatey/master/src/tools/7za.exe\n--2014-01-09 18:15:42--  https://raw2.github.com/chocolatey/chocolatey/master/src/tools/7za.exe\nResolving raw2.github.com... 103.245.222.133\nConnecting to raw2.github.com|103.245.222.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 587776 (574K) [application/octet-stream]\nSaving to: \u20187za.exe.1\u2019\n100%[=====================================================================================================>] 587,776      663KB/s   in 0.9s\n2014-01-09 18:15:47 (663 KB/s) - \u20187za.exe.1\u2019 saved [587776/587776]\n```\n. according to status.github.com: \n8:20 UTC - We are currently performing emergency maintenance on one of our fileserver pairs, affecting a small percentage of repositories\nI believe that it was simply a data integrity issue with one file on one github server which they have now resolved.\n9:06 UTC - Everything operating normally.\n. Are you happy for me to create a pull request with the proposed structure?\nIs that (currently assured) assumption about the filename used in other places? The helper method actually returns the full path to the file that it saves so you would imagine that that is what is being used subsequently in the flow but I haven't actually checked\n. I think this is a problem github - it seems that the 7za.exe file which the install.ps1 downloads to bootstrap the unzipping process is being truncated.\nI've verified this on multiple windows 7 machines and on my mac book. If you look at that file it is marked as being about 587kB but when you wget it it comes down at exactly 512000 bytes. Something is fishy\nhttps://www.dropbox.com/s/bg5f77z4hxn6c03/Screenshot%202014-01-09%2018.12.45.png\n```\nwget https://github.com/chocolatey/chocolatey/blob/master/src/tools/7za.exe?raw=true\n--2014-01-09 18:01:29--  https://github.com/chocolatey/chocolatey/blob/master/src/tools/7za.exe?raw=true\nResolving github.com... 192.30.252.131\nConnecting to github.com|192.30.252.131|:443... connected.\nHTTP request sent, awaiting response... 302 Found\nLocation: https://github.com/chocolatey/chocolatey/raw/master/src/tools/7za.exe [following]\n--2014-01-09 18:01:32--  https://github.com/chocolatey/chocolatey/raw/master/src/tools/7za.exe\nReusing existing connection to github.com:443.\nHTTP request sent, awaiting response... 302 Found\nLocation: https://raw.github.com/chocolatey/chocolatey/master/src/tools/7za.exe [following]\n--2014-01-09 18:01:32--  https://raw.github.com/chocolatey/chocolatey/master/src/tools/7za.exe\nResolving raw.github.com... 103.245.222.133\nConnecting to raw.github.com|103.245.222.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 512000 (500K) [application/octet-stream]\nSaving to: \u20187za.exe?raw=true\u2019\n100%[=====================================================================================================>] 512,000      678KB/s   in 0.7s\n2014-01-09 18:01:37 (678 KB/s) - \u20187za.exe?raw=true\u2019 saved [512000/512000]\n```\n. Interestingly, if I use the secondary raw server (raw2.github.com) it gets the correct sized file - it looks like a corruption of github's primary raw data server - I know there was a problem with their uptime earlier this morning, maybe this is related to that. \nHow would you go about reporting that to them tho?\n```\n\u2234 wget https://raw2.github.com/chocolatey/chocolatey/master/src/tools/7za.exe\n--2014-01-09 18:15:42--  https://raw2.github.com/chocolatey/chocolatey/master/src/tools/7za.exe\nResolving raw2.github.com... 103.245.222.133\nConnecting to raw2.github.com|103.245.222.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 587776 (574K) [application/octet-stream]\nSaving to: \u20187za.exe.1\u2019\n100%[=====================================================================================================>] 587,776      663KB/s   in 0.9s\n2014-01-09 18:15:47 (663 KB/s) - \u20187za.exe.1\u2019 saved [587776/587776]\n```\n. according to status.github.com: \n8:20 UTC - We are currently performing emergency maintenance on one of our fileserver pairs, affecting a small percentage of repositories\nI believe that it was simply a data integrity issue with one file on one github server which they have now resolved.\n9:06 UTC - Everything operating normally.\n. Are you happy for me to create a pull request with the proposed structure?\nIs that (currently assured) assumption about the filename used in other places? The helper method actually returns the full path to the file that it saves so you would imagine that that is what is being used subsequently in the flow but I haven't actually checked\n. ",
    "AlexRussak": "Was able to install Chocolatey.\nThanks for looking into this!\n. Was able to install Chocolatey.\nThanks for looking into this!\n. ",
    "jnm2": "I'm getting the exact same error on Windows Server 2012 R2, using the admin command prompt command. I manually downloaded 7za.exe and chocolatey.zip and tried again and nothing changed. I also tried after using the property pages Unblock button on both files. I eventually decided to extract the zip manually and tried the install command and the first error showed up but the install finished successfully.\nHowever, installs all fail with The underlying connection was closed: An unexpected error occurred on a send. WireShark attests to the fact that the downloads and HTTP connections complete successfully, just like with 7za.exe. I'm not sure where it's getting the idea that a failure happened.\nIt would be nice to be given a list of things to troubleshoot when this happens.\n. I'm certain you're right about that. Sure thing. https://github.com/chocolatey/choco/issues/662\n. I'm getting the exact same error on Windows Server 2012 R2, using the admin command prompt command. I manually downloaded 7za.exe and chocolatey.zip and tried again and nothing changed. I also tried after using the property pages Unblock button on both files. I eventually decided to extract the zip manually and tried the install command and the first error showed up but the install finished successfully.\nHowever, installs all fail with The underlying connection was closed: An unexpected error occurred on a send. WireShark attests to the fact that the downloads and HTTP connections complete successfully, just like with 7za.exe. I'm not sure where it's getting the idea that a failure happened.\nIt would be nice to be given a list of things to troubleshoot when this happens.\n. I'm certain you're right about that. Sure thing. https://github.com/chocolatey/choco/issues/662\n. ",
    "Mohammed90": "I have 0.9.8.23\n. This is the result of choco sources :\nID                        URI\n--                        ---\nchocolatey                https://chocolatey.org/api/v2/\nI can browse the Chocolatey website (chocolatey.org) fine with no problems.\nThe change that might be relevant, in terms of proxy/firewall, is that I moved from the US to Saudi Arabia. Any proxy setting is not explicit, but it might be implemented in the ISP infrastructure. My LAN firewall has not changed and is set the same.\nThe latest run of cup all produced the following:\n```\nChocolatey (v0.9.8.23) is installing 'autohotkey_l.portable' and dependencies. By installing you accept the license for\n'autohotkey_l.portable' and each dependency you are installing.\n__ autohotkey_l.portable v1.1.14.01 ____\nDownloading autohotkey_l.portable 64 bit (http://l.autohotkey.net/v/AutoHotkey111401_x64.zip) to C:\\Users\\Mohammed\\AppDa\nta\\Local\\Temp\\chocolatey\\autohotkey_l.portable\\autohotkey_l.portableInstall.zip\nWrite-Error : autohotkey_l.portable did not finish successfully. Boo to the chocolatey gods!\n-----------------------\n[ERROR] Exception calling \"GetResponse\" with \"0\" argument(s): \"The remote server returned an error: (404) Not Found.\"\n-----------------------\nAt C:\\Chocolatey\\chocolateyinstall\\helpers\\functions\\Write-ChocolateyFailure.ps1:30 char:2\n+     Write-Error $errorMessage\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nWrite-Error : Package 'autohotkey_l.portable v1.1.14.01' did not install successfully: Exception calling \"GetResponse\"\nwith \"0\" argument(s): \"The remote server returned an error: (404) Not Found.\"\nAt C:\\Chocolatey\\chocolateyinstall\\functions\\Chocolatey-NuGet.ps1:90 char:17\n+                 Write-Error \"Package `'$installedPackageName v$installedPackageV ...\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nFinished installing 'autohotkey_l.portable' and dependencies - if errors not shown in console, none detected. Check log for errors if unsure.\n``\n. Yes! I don't remember how it was resolved though since the case was 5 months ago.\n. I have 0.9.8.23\n. This is the result ofchoco sources` :\nID                        URI\n--                        ---\nchocolatey                https://chocolatey.org/api/v2/\nI can browse the Chocolatey website (chocolatey.org) fine with no problems.\nThe change that might be relevant, in terms of proxy/firewall, is that I moved from the US to Saudi Arabia. Any proxy setting is not explicit, but it might be implemented in the ISP infrastructure. My LAN firewall has not changed and is set the same.\nThe latest run of cup all produced the following:\n```\nChocolatey (v0.9.8.23) is installing 'autohotkey_l.portable' and dependencies. By installing you accept the license for\n'autohotkey_l.portable' and each dependency you are installing.\n__ autohotkey_l.portable v1.1.14.01 ____\nDownloading autohotkey_l.portable 64 bit (http://l.autohotkey.net/v/AutoHotkey111401_x64.zip) to C:\\Users\\Mohammed\\AppDa\nta\\Local\\Temp\\chocolatey\\autohotkey_l.portable\\autohotkey_l.portableInstall.zip\nWrite-Error : autohotkey_l.portable did not finish successfully. Boo to the chocolatey gods!\n-----------------------\n[ERROR] Exception calling \"GetResponse\" with \"0\" argument(s): \"The remote server returned an error: (404) Not Found.\"\n-----------------------\nAt C:\\Chocolatey\\chocolateyinstall\\helpers\\functions\\Write-ChocolateyFailure.ps1:30 char:2\n+     Write-Error $errorMessage\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nWrite-Error : Package 'autohotkey_l.portable v1.1.14.01' did not install successfully: Exception calling \"GetResponse\"\nwith \"0\" argument(s): \"The remote server returned an error: (404) Not Found.\"\nAt C:\\Chocolatey\\chocolateyinstall\\functions\\Chocolatey-NuGet.ps1:90 char:17\n+                 Write-Error \"Package `'$installedPackageName v$installedPackageV ...\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nFinished installing 'autohotkey_l.portable' and dependencies - if errors not shown in console, none detected. Check log for errors if unsure.\n```\n. Yes! I don't remember how it was resolved though since the case was 5 months ago.\n. ",
    "nomasprime": "lol useful! I'm having a similar issue I think - works through browser but can't ping from command line.\n. It looks like the zip (http://windows.php.net/downloads/releases/php-5.5.13-nts-Win32-VC11-x64.zip) doesn't exist.\nMaybe slightly different issue, create new one #498.\n. Thanks, I will find where they keep all their chocolate. It's probably not as chocolatey as the layered chocolate chip cookie I had at lunch, chocolate overdose!\n. lol useful! I'm having a similar issue I think - works through browser but can't ping from command line.\n. It looks like the zip (http://windows.php.net/downloads/releases/php-5.5.13-nts-Win32-VC11-x64.zip) doesn't exist.\nMaybe slightly different issue, create new one #498.\n. Thanks, I will find where they keep all their chocolate. It's probably not as chocolatey as the layered chocolate chip cookie I had at lunch, chocolate overdose!\n. ",
    "ghost": "Hi, Another vote for this issue.  The documentation regarding non-AD-integrated Proxies is possibly misleading.  As best I can tell the format that should be used when providing SetEnvironmentVariable values should be something like:\nhttp://USERNAME:PASSWORD@PROXYSERVER:PROXYPORT if it is to work with nuget\nhttp://docs.nuget.org/consume/nuget-config-settings\nThis isn't observed outside of nuget\nhttps://github.com/chocolatey/chocolatey/blob/master/src/helpers/functions/Get-WebFile.ps1\nMaybe something can be learnt from the nuget implementation?\nhttp://nuget.codeplex.com/SourceControl/latest#src/Core/Http/ProxyCache.cs\n. Further to this, if chocolate/nuget can detect the EnvironmentVariable for proxy settings, can this not equally be observed in the Download-File function of https://chocolatey.org/install.ps1?  This may simplify the install instructions?\n. This problem persists with v0.9.9.6.\nI've installed chocolatey by manually downloading it and running the installer in powershell. When I tried installing a package it asked me for the credentials, and it also verified them. Providing false credentials resulted in an error. But even with correct crendentials provided, it still fails with (407) Proxy Authentication Required..\n. @ferventcoder seems like it's the same issue as this one. The proxy is configured in IE as per default company policy, and I also have it set in http_proxy and https_proxy environment vairables.\n. Already done, I posted some more information over there.\n. I experienced the same thing with a custom install package for sql management studio 2012 using Choc 0.9.8.27. Why is it not looking in the correct folder. The path is C:\\ProgramData\\chocolatey\\lib\\Database_Client_SQLMgmtStudio_2012_64bit.0.5 \nbut the error is \nGet-ChildItem : Cannot find path 'C:\\ProgramData\\chocolatey\\lib\\Database_Client\n_SQLMgmntStudio_2012_64bit.' because it does not exist.\nAt C:\\ProgramData\\chocolatey\\chocolateyinstall\\functions\\Get-ChocolateyBins.ps1\n:17 char:29\n-       $files = get-childitem <<<<  $packageFolder -include *.exe -recurse\n  - CategoryInfo          : ObjectNotFound: (C:\\ProgramData...dio_2012_64bi\n    t.:String) [Get-ChildItem], ItemNotFoundException\n  - FullyQualifiedErrorId : PathNotFound,Microsoft.PowerShell.Commands.GetCh\n    ildItemCommand\nSo it looks like its cutting off the version number of the path. Any Ideas?\n. Debug Log: \nC:\\Users\\Administrator>choco uninstall Database_Client_SQLMgmntStudio_2012_64bit\n -debug\nDEBUG: Running 'Append-InstallLog' with chocoInstallLog:''\nDEBUG: Arguments: $command = 'uninstall'|$force=False\n|$prerelease=False|$packageNames='Database_Client_SQLMgmntStudio_2012_64bit'\n|$source=''\n|$version=''|$allVersions=False\n|$overrideArguments=False|$InstallArguments=''\n|$localonly=False|$verbosity=False|$debug=True|$quiet=False\n|$name=''|$ignoreDependencies=False|$forceX86=False\n|$packageParameters=''\n|PowerShellVersion=2.0|OSVersion=6.1.7601.65536\nDEBUG: Running 'Chocolatey-Uninstall' for\nDatabase_Client_SQLMgmntStudio_2012_64bit with version:'', installerArguments:\n''\nChocolatey (v0.9.8.27) is uninstalling Database_Client_SQLMgmntStudio_2012_64bit\n...\nDEBUG: Running 'Chocolatey-Version' for\nDatabase_Client_SQLMgmntStudio_2012_64bit with source:''.\nDEBUG: Getting local packages based on all or passed in package name\nDEBUG: Running 'Chocolatey-List' with selector:\n'Database_Client_SQLMgmntStudio_2012_64bit',\nsource:'C:\\ProgramData\\chocolatey\\lib'\nDEBUG: Showing prerelease versions of packages\nDEBUG: Executing command\n[\"C:\\ProgramData\\chocolatey\\chocolateyinstall\\nuget.exe\" list\n\"Database_Client_SQLMgmntStudio_2012_64bit\" -Prerelease -NonInteractive -Source\n \"C:\\ProgramData\\chocolatey\\lib\"]\nDEBUG: Command [\"C:\\ProgramData\\chocolatey\\chocolateyinstall\\nuget.exe\" list\n\"Database_Client_SQLMgmntStudio_2012_64bit\" -Prerelease -NonInteractive -Source\n \"C:\\ProgramData\\chocolatey\\lib\"] exited with '0'.\nDEBUG: Getting Database_Client_SQLMgmntStudio_2012_64bit from returned local\nlist\nDEBUG: Looking for Database_Client_SQLMgmntStudio_2012_64bit.\nUninstalling from folder C:\\ProgramData\\chocolatey\\lib\\Database_Client_SQLMgmntS\ntudio_2012_64bit.\nDEBUG: Running 'Get-ChocolateyBins' for\nC:\\ProgramData\\chocolatey\\lib\\Database_Client_SQLMgmntStudio_2012_64bit.\nDEBUG:   __ Executable Links (.exe) __\nDEBUG: Looking for executables in folder:\nC:\\ProgramData\\chocolatey\\lib\\Database_Client_SQLMgmntStudio_2012_64bit.\nAdding batch files for any executables found to a location on PATH. In other\nwords the executable will be available from ANY command line/powershell prompt.\nGet-ChildItem : Cannot find path 'C:\\ProgramData\\chocolatey\\lib\\Database_Client\n_SQLMgmntStudio_2012_64bit.' because it does not exist.\nAt C:\\ProgramData\\chocolatey\\chocolateyinstall\\functions\\Get-ChocolateyBins.ps1\n:17 char:29\n-       $files = get-childitem <<<<  $packageFolder -include .exe -recurse\n  - CategoryInfo          : ObjectNotFound: (C:\\ProgramData...dio_2012_64bi\n    t.:String) [Get-ChildItem], ItemNotFoundException\n  - FullyQualifiedErrorId : PathNotFound,Microsoft.PowerShell.Commands.GetCh\n    ildItemCommand\nDEBUG: Found '' for batch redirect\nDEBUG: There are no executables (that are not ignored) in the package.\nDEBUG: Running 'Run-ChocolateyPS1' for\nDatabase_Client_SQLMgmntStudio_2012_64bit with\npackageFolder:'C:\\ProgramData\\chocolatey\\lib\\Database_Client_SQLMgmntStudio_201\n2_64bit.', action: 'uninstall'\nDEBUG:    PowerShell uninstall (chocolateyuninstall.ps1) \nDEBUG:   Looking for chocolateyuninstall.ps1 in folder\n'C:\\ProgramData\\chocolatey\\lib\\Database_Client_SQLMgmntStudio_2012_64bit.'. If\nchocolateyuninstall.ps1 is found, it will be run.\nGet-ChildItem : Cannot find path 'C:\\ProgramData\\chocolatey\\lib\\Database_Client\nSQLMgmntStudio_2012_64bit.' because it does not exist.\nAt C:\\ProgramData\\chocolatey\\chocolateyinstall\\functions\\Run-ChocolateyPS1.ps1:\n22 char:25\n-     $ps1 = Get-ChildItem <<<<   $packageFolder -recurse | ?{$.name -match $a\n  ctionFile} | sort name -Descending | select -First 1\n  - CategoryInfo          : ObjectNotFound: (C:\\ProgramData...dio_2012_64bi\n    t.:String) [Get-ChildItem], ItemNotFoundException\n  - FullyQualifiedErrorId : PathNotFound,Microsoft.PowerShell.Commands.GetCh\n    ildItemCommand\nGet-ChildItem : Cannot find path 'C:\\ProgramData\\chocolatey\\lib\\Database_Client\nSQLMgmntStudio_2012_64bit.' because it does not exist.\nAt C:\\ProgramData\\chocolatey\\chocolateyinstall\\functions\\Run-ChocolateyPS1.ps1:\n23 char:32\n-     $installps1 = Get-ChildItem <<<<   $packageFolder -recurse | ?{$.name -m\n  atch 'chocolateyinstall.ps1'} | sort name -Descending | select -First 1\n  - CategoryInfo          : ObjectNotFound: (C:\\ProgramData...dio_2012_64bi\n    t.:String) [Get-ChildItem], ItemNotFoundException\n  - FullyQualifiedErrorId : PathNotFound,Microsoft.PowerShell.Commands.GetCh\n    ildItemCommand\nDEBUG: Action file is ''\nRemove-Item : Cannot find path 'C:\\ProgramData\\chocolatey\\lib\\Database_Client_S\nQLMgmntStudio_2012_64bit.' because it does not exist.\nAt C:\\ProgramData\\chocolatey\\chocolateyinstall\\functions\\Chocolatey-Uninstall.p\ns1:33 char:18\n-       Remove-Item <<<<  -Recurse -Force $packageFolder\n  - CategoryInfo          : ObjectNotFound: (C:\\ProgramData...dio_2012_64bi\n    t.:String) [Remove-Item], ItemNotFoundException\n  - FullyQualifiedErrorId : PathNotFound,Microsoft.PowerShell.Commands.Remov\n    eItemCommand\n. I'm using Chef to deploy packages via chocolatey.\nI was able to reproduce this error by using add/remove programs to uninstall packages installed via the chocolatey framework.\nRemoving each packages folder from the c:\\ProgramData\\chcolatey\\lib folder allows chocolatey to reinstall. I suspect packages remaining in this folder is due to people using add/remove programs to uninstall applications rather than using chocolatey to uninstall it.\nc:> choco uninstall  deletes the folder from the libs directory and allows the application to be reinstalled without issue. I have tested this multiple times and works fine.\nBasically, if you use chocolatey to install a package, use it to remove/uninstall that package.\nI think this issue can be closed.\n. Oh, chocolatey.org/install.ps1 still points to v0.9.8.33, is it intended?\n. So I upgraded using my patched version and unfortunately, the issue is still relevant:\n```\nC:\\Users\\mtman>choco install windirstat\nChocolatey v0.9.9.2\nInstalling the following packages:\nwindirstat\nBy installing you accept licenses for the packages.\nwindirstat v1.1.2.20140225\n Found 'chocolateyInstall.ps1':\n$packageName = 'windirstat'\n$fileType = 'exe'\n$url = 'http://prdownloads.sourceforge.net/windirstat/windirstat1_1_2_setup.exe'\n$silentArgs = '/S'\nInstall-ChocolateyPackage $packageName $fileType \"$silentArgs\" \"$url\"\nDo you want to run the script?\n NOTE: If you choose not to run the script, the installation will\n fail.\n Skip is an advanced option and most likely will never be wanted.\n1) yes\n 2) no [Default - Press Enter]\n 3) skip\nyes\n Get-Item : Cannot find drive. A drive with the name 'Folder is' does not exist.\n At C:\\ProgramData\\chocolatey\\helpers\\chocolateyInstaller.psm1:28 char:1\n + Get-Item $helpersPath\\functions*.ps1 |\n + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n     + CategoryInfo          : ObjectNotFound: (Folder is:String) [Get-Item], DriveNotFoundException\n     + FullyQualifiedErrorId : DriveNotFound,Microsoft.PowerShell.Commands.GetItemCommand\n Join-Path : Cannot find drive. A drive with the name 'Folder is' does not exist.\n At C:\\ProgramData\\chocolatey\\helpers\\chocolateyInstaller.psm1:36 char:19\n + $extensionsPath = Join-Path \"$helpersPath\" '..\\extensions'\n +                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n     + CategoryInfo          : ObjectNotFound: (Folder is:String) [Join-Path], DriveNotFoundException\n     + FullyQualifiedErrorId : DriveNotFound,Microsoft.PowerShell.Commands.JoinPathCommand\n Test-Path : Cannot bind argument to parameter 'Path' because it is null.\n At C:\\ProgramData\\chocolatey\\helpers\\chocolateyInstaller.psm1:37 char:13\n + if(Test-Path($extensionsPath)) {{\n +             ~~~~~~~~~~~~~~~~~\n     + CategoryInfo          : InvalidData: (:) [Test-Path], ParameterBindingValidationException\n     + FullyQualifiedErrorId : ParameterArgumentValidationErrorNullNotAllowed,Microsoft.PowerShell.Commands.TestPathCom\n    mand\n Install-ChocolateyPackage : The term 'Install-ChocolateyPackage' is not recognized as the name of a cmdlet, function, s\n cript file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is cor\n rect and try again.\n At C:\\ProgramData\\chocolatey\\lib\\windirstat\\tools\\chocolateyInstall.ps1:6 char:1\n + Install-ChocolateyPackage $packageName $fileType \"$silentArgs\" \"$url\"\n + ~~~~~~~~~~~~~~~~~~~~~~~~~\n     + CategoryInfo          : ObjectNotFound: (Install-ChocolateyPackage:String) [], CommandNotFoundException\n     + FullyQualifiedErrorId : CommandNotFoundException\nwindirstat install not successful.\nError while running 'C:\\ProgramData\\chocolatey\\lib\\windirstat\\tools\\chocolateyInstall.ps1'.\n See log for details.\nChocolatey installed 0/1 package(s). 1 package(s) failed.\n See the log for details.\nFailures:\n - windirstat\n```\nIt seems that Split-Path is used even more frequently in the new version.\n. You nailed it! I had a split-path.bat script in my path I had no idea about. When I run powershell -noprofile -noexit -command \"gcm split-path\", it finds the script, but then when I repeat the command in the open console AND use autocompletion, it finds the cmdlet. Therefore, I was wrongly assuming I am using the cmdlet.\nI put the script away and the problem is solved.\n. Hi, Another vote for this issue.  The documentation regarding non-AD-integrated Proxies is possibly misleading.  As best I can tell the format that should be used when providing SetEnvironmentVariable values should be something like:\nhttp://USERNAME:PASSWORD@PROXYSERVER:PROXYPORT if it is to work with nuget\nhttp://docs.nuget.org/consume/nuget-config-settings\nThis isn't observed outside of nuget\nhttps://github.com/chocolatey/chocolatey/blob/master/src/helpers/functions/Get-WebFile.ps1\nMaybe something can be learnt from the nuget implementation?\nhttp://nuget.codeplex.com/SourceControl/latest#src/Core/Http/ProxyCache.cs\n. Further to this, if chocolate/nuget can detect the EnvironmentVariable for proxy settings, can this not equally be observed in the Download-File function of https://chocolatey.org/install.ps1?  This may simplify the install instructions?\n. This problem persists with v0.9.9.6.\nI've installed chocolatey by manually downloading it and running the installer in powershell. When I tried installing a package it asked me for the credentials, and it also verified them. Providing false credentials resulted in an error. But even with correct crendentials provided, it still fails with (407) Proxy Authentication Required..\n. @ferventcoder seems like it's the same issue as this one. The proxy is configured in IE as per default company policy, and I also have it set in http_proxy and https_proxy environment vairables.\n. Already done, I posted some more information over there.\n. I experienced the same thing with a custom install package for sql management studio 2012 using Choc 0.9.8.27. Why is it not looking in the correct folder. The path is C:\\ProgramData\\chocolatey\\lib\\Database_Client_SQLMgmtStudio_2012_64bit.0.5 \nbut the error is \nGet-ChildItem : Cannot find path 'C:\\ProgramData\\chocolatey\\lib\\Database_Client\n_SQLMgmntStudio_2012_64bit.' because it does not exist.\nAt C:\\ProgramData\\chocolatey\\chocolateyinstall\\functions\\Get-ChocolateyBins.ps1\n:17 char:29\n-       $files = get-childitem <<<<  $packageFolder -include *.exe -recurse\n  - CategoryInfo          : ObjectNotFound: (C:\\ProgramData...dio_2012_64bi\n    t.:String) [Get-ChildItem], ItemNotFoundException\n  - FullyQualifiedErrorId : PathNotFound,Microsoft.PowerShell.Commands.GetCh\n    ildItemCommand\nSo it looks like its cutting off the version number of the path. Any Ideas?\n. Debug Log: \nC:\\Users\\Administrator>choco uninstall Database_Client_SQLMgmntStudio_2012_64bit\n -debug\nDEBUG: Running 'Append-InstallLog' with chocoInstallLog:''\nDEBUG: Arguments: $command = 'uninstall'|$force=False\n|$prerelease=False|$packageNames='Database_Client_SQLMgmntStudio_2012_64bit'\n|$source=''\n|$version=''|$allVersions=False\n|$overrideArguments=False|$InstallArguments=''\n|$localonly=False|$verbosity=False|$debug=True|$quiet=False\n|$name=''|$ignoreDependencies=False|$forceX86=False\n|$packageParameters=''\n|PowerShellVersion=2.0|OSVersion=6.1.7601.65536\nDEBUG: Running 'Chocolatey-Uninstall' for\nDatabase_Client_SQLMgmntStudio_2012_64bit with version:'', installerArguments:\n''\nChocolatey (v0.9.8.27) is uninstalling Database_Client_SQLMgmntStudio_2012_64bit\n...\nDEBUG: Running 'Chocolatey-Version' for\nDatabase_Client_SQLMgmntStudio_2012_64bit with source:''.\nDEBUG: Getting local packages based on all or passed in package name\nDEBUG: Running 'Chocolatey-List' with selector:\n'Database_Client_SQLMgmntStudio_2012_64bit',\nsource:'C:\\ProgramData\\chocolatey\\lib'\nDEBUG: Showing prerelease versions of packages\nDEBUG: Executing command\n[\"C:\\ProgramData\\chocolatey\\chocolateyinstall\\nuget.exe\" list\n\"Database_Client_SQLMgmntStudio_2012_64bit\" -Prerelease -NonInteractive -Source\n \"C:\\ProgramData\\chocolatey\\lib\"]\nDEBUG: Command [\"C:\\ProgramData\\chocolatey\\chocolateyinstall\\nuget.exe\" list\n\"Database_Client_SQLMgmntStudio_2012_64bit\" -Prerelease -NonInteractive -Source\n \"C:\\ProgramData\\chocolatey\\lib\"] exited with '0'.\nDEBUG: Getting Database_Client_SQLMgmntStudio_2012_64bit from returned local\nlist\nDEBUG: Looking for Database_Client_SQLMgmntStudio_2012_64bit.\nUninstalling from folder C:\\ProgramData\\chocolatey\\lib\\Database_Client_SQLMgmntS\ntudio_2012_64bit.\nDEBUG: Running 'Get-ChocolateyBins' for\nC:\\ProgramData\\chocolatey\\lib\\Database_Client_SQLMgmntStudio_2012_64bit.\nDEBUG:   __ Executable Links (.exe) __\nDEBUG: Looking for executables in folder:\nC:\\ProgramData\\chocolatey\\lib\\Database_Client_SQLMgmntStudio_2012_64bit.\nAdding batch files for any executables found to a location on PATH. In other\nwords the executable will be available from ANY command line/powershell prompt.\nGet-ChildItem : Cannot find path 'C:\\ProgramData\\chocolatey\\lib\\Database_Client\n_SQLMgmntStudio_2012_64bit.' because it does not exist.\nAt C:\\ProgramData\\chocolatey\\chocolateyinstall\\functions\\Get-ChocolateyBins.ps1\n:17 char:29\n-       $files = get-childitem <<<<  $packageFolder -include .exe -recurse\n  - CategoryInfo          : ObjectNotFound: (C:\\ProgramData...dio_2012_64bi\n    t.:String) [Get-ChildItem], ItemNotFoundException\n  - FullyQualifiedErrorId : PathNotFound,Microsoft.PowerShell.Commands.GetCh\n    ildItemCommand\nDEBUG: Found '' for batch redirect\nDEBUG: There are no executables (that are not ignored) in the package.\nDEBUG: Running 'Run-ChocolateyPS1' for\nDatabase_Client_SQLMgmntStudio_2012_64bit with\npackageFolder:'C:\\ProgramData\\chocolatey\\lib\\Database_Client_SQLMgmntStudio_201\n2_64bit.', action: 'uninstall'\nDEBUG:    PowerShell uninstall (chocolateyuninstall.ps1) \nDEBUG:   Looking for chocolateyuninstall.ps1 in folder\n'C:\\ProgramData\\chocolatey\\lib\\Database_Client_SQLMgmntStudio_2012_64bit.'. If\nchocolateyuninstall.ps1 is found, it will be run.\nGet-ChildItem : Cannot find path 'C:\\ProgramData\\chocolatey\\lib\\Database_Client\nSQLMgmntStudio_2012_64bit.' because it does not exist.\nAt C:\\ProgramData\\chocolatey\\chocolateyinstall\\functions\\Run-ChocolateyPS1.ps1:\n22 char:25\n-     $ps1 = Get-ChildItem <<<<   $packageFolder -recurse | ?{$.name -match $a\n  ctionFile} | sort name -Descending | select -First 1\n  - CategoryInfo          : ObjectNotFound: (C:\\ProgramData...dio_2012_64bi\n    t.:String) [Get-ChildItem], ItemNotFoundException\n  - FullyQualifiedErrorId : PathNotFound,Microsoft.PowerShell.Commands.GetCh\n    ildItemCommand\nGet-ChildItem : Cannot find path 'C:\\ProgramData\\chocolatey\\lib\\Database_Client\nSQLMgmntStudio_2012_64bit.' because it does not exist.\nAt C:\\ProgramData\\chocolatey\\chocolateyinstall\\functions\\Run-ChocolateyPS1.ps1:\n23 char:32\n-     $installps1 = Get-ChildItem <<<<   $packageFolder -recurse | ?{$.name -m\n  atch 'chocolateyinstall.ps1'} | sort name -Descending | select -First 1\n  - CategoryInfo          : ObjectNotFound: (C:\\ProgramData...dio_2012_64bi\n    t.:String) [Get-ChildItem], ItemNotFoundException\n  - FullyQualifiedErrorId : PathNotFound,Microsoft.PowerShell.Commands.GetCh\n    ildItemCommand\nDEBUG: Action file is ''\nRemove-Item : Cannot find path 'C:\\ProgramData\\chocolatey\\lib\\Database_Client_S\nQLMgmntStudio_2012_64bit.' because it does not exist.\nAt C:\\ProgramData\\chocolatey\\chocolateyinstall\\functions\\Chocolatey-Uninstall.p\ns1:33 char:18\n-       Remove-Item <<<<  -Recurse -Force $packageFolder\n  - CategoryInfo          : ObjectNotFound: (C:\\ProgramData...dio_2012_64bi\n    t.:String) [Remove-Item], ItemNotFoundException\n  - FullyQualifiedErrorId : PathNotFound,Microsoft.PowerShell.Commands.Remov\n    eItemCommand\n. I'm using Chef to deploy packages via chocolatey.\nI was able to reproduce this error by using add/remove programs to uninstall packages installed via the chocolatey framework.\nRemoving each packages folder from the c:\\ProgramData\\chcolatey\\lib folder allows chocolatey to reinstall. I suspect packages remaining in this folder is due to people using add/remove programs to uninstall applications rather than using chocolatey to uninstall it.\nc:> choco uninstall  deletes the folder from the libs directory and allows the application to be reinstalled without issue. I have tested this multiple times and works fine.\nBasically, if you use chocolatey to install a package, use it to remove/uninstall that package.\nI think this issue can be closed.\n. Oh, chocolatey.org/install.ps1 still points to v0.9.8.33, is it intended?\n. So I upgraded using my patched version and unfortunately, the issue is still relevant:\n```\nC:\\Users\\mtman>choco install windirstat\nChocolatey v0.9.9.2\nInstalling the following packages:\nwindirstat\nBy installing you accept licenses for the packages.\nwindirstat v1.1.2.20140225\n Found 'chocolateyInstall.ps1':\n$packageName = 'windirstat'\n$fileType = 'exe'\n$url = 'http://prdownloads.sourceforge.net/windirstat/windirstat1_1_2_setup.exe'\n$silentArgs = '/S'\nInstall-ChocolateyPackage $packageName $fileType \"$silentArgs\" \"$url\"\nDo you want to run the script?\n NOTE: If you choose not to run the script, the installation will\n fail.\n Skip is an advanced option and most likely will never be wanted.\n1) yes\n 2) no [Default - Press Enter]\n 3) skip\nyes\n Get-Item : Cannot find drive. A drive with the name 'Folder is' does not exist.\n At C:\\ProgramData\\chocolatey\\helpers\\chocolateyInstaller.psm1:28 char:1\n + Get-Item $helpersPath\\functions*.ps1 |\n + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n     + CategoryInfo          : ObjectNotFound: (Folder is:String) [Get-Item], DriveNotFoundException\n     + FullyQualifiedErrorId : DriveNotFound,Microsoft.PowerShell.Commands.GetItemCommand\n Join-Path : Cannot find drive. A drive with the name 'Folder is' does not exist.\n At C:\\ProgramData\\chocolatey\\helpers\\chocolateyInstaller.psm1:36 char:19\n + $extensionsPath = Join-Path \"$helpersPath\" '..\\extensions'\n +                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n     + CategoryInfo          : ObjectNotFound: (Folder is:String) [Join-Path], DriveNotFoundException\n     + FullyQualifiedErrorId : DriveNotFound,Microsoft.PowerShell.Commands.JoinPathCommand\n Test-Path : Cannot bind argument to parameter 'Path' because it is null.\n At C:\\ProgramData\\chocolatey\\helpers\\chocolateyInstaller.psm1:37 char:13\n + if(Test-Path($extensionsPath)) {{\n +             ~~~~~~~~~~~~~~~~~\n     + CategoryInfo          : InvalidData: (:) [Test-Path], ParameterBindingValidationException\n     + FullyQualifiedErrorId : ParameterArgumentValidationErrorNullNotAllowed,Microsoft.PowerShell.Commands.TestPathCom\n    mand\n Install-ChocolateyPackage : The term 'Install-ChocolateyPackage' is not recognized as the name of a cmdlet, function, s\n cript file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is cor\n rect and try again.\n At C:\\ProgramData\\chocolatey\\lib\\windirstat\\tools\\chocolateyInstall.ps1:6 char:1\n + Install-ChocolateyPackage $packageName $fileType \"$silentArgs\" \"$url\"\n + ~~~~~~~~~~~~~~~~~~~~~~~~~\n     + CategoryInfo          : ObjectNotFound: (Install-ChocolateyPackage:String) [], CommandNotFoundException\n     + FullyQualifiedErrorId : CommandNotFoundException\nwindirstat install not successful.\nError while running 'C:\\ProgramData\\chocolatey\\lib\\windirstat\\tools\\chocolateyInstall.ps1'.\n See log for details.\nChocolatey installed 0/1 package(s). 1 package(s) failed.\n See the log for details.\nFailures:\n - windirstat\n```\nIt seems that Split-Path is used even more frequently in the new version.\n. You nailed it! I had a split-path.bat script in my path I had no idea about. When I run powershell -noprofile -noexit -command \"gcm split-path\", it finds the script, but then when I repeat the command in the open console AND use autocompletion, it finds the cmdlet. Therefore, I was wrongly assuming I am using the cmdlet.\nI put the script away and the problem is solved.\n. ",
    "marsjaninzmarsa": "Ok, i'v just fixed this, please accept my pull request and close thist issue:\nhttps://github.com/chocolatey/chocolatey.org/pull/66\n. Ok, i'v just fixed this, please accept my pull request and close thist issue:\nhttps://github.com/chocolatey/chocolatey.org/pull/66\n. ",
    "rubenqba": "When is solved this issue??\n. When is solved this issue??\n. ",
    "garethrepton": "I'm using the Latest version available using the easy install method. I think its v0.9.8.23 although I can't find a version number anywhere. \nI have already installed chocolatey on the buildagent, but I do run a chocolatey install script as the first item as well to ensure new agents get it if they need it.\n. FIXED using gep13's information :)\nI can confirm I'm using v0.9.8.23\nThank you gep13, you're absolutely right. For completeness in case anyone finds themselves here, I had to:\n1. Remove the pre-build chocolatey install from the build script (retain the package install in the script).\n2. Restart the agent (I assume the build agent keeps the same console session open, restarting the agent must reset it).\n3. Run the build again... No error.\n. Thanks for the help.\n. I'm using the Latest version available using the easy install method. I think its v0.9.8.23 although I can't find a version number anywhere. \nI have already installed chocolatey on the buildagent, but I do run a chocolatey install script as the first item as well to ensure new agents get it if they need it.\n. FIXED using gep13's information :)\nI can confirm I'm using v0.9.8.23\nThank you gep13, you're absolutely right. For completeness in case anyone finds themselves here, I had to:\n1. Remove the pre-build chocolatey install from the build script (retain the package install in the script).\n2. Restart the agent (I assume the build agent keeps the same console session open, restarting the agent must reset it).\n3. Run the build again... No error.\n. Thanks for the help.\n. ",
    "ashes999": "I looked for a big, prominent \"download\" button. I didn't see one (nor the text \"download\"). After seeing your comment, I see the icon to copy (now that I know what to look for).\nWould it make sense to include a \"download\" button which links to the PS1 file? I understand the need of the scriptlet. Maybe it's just my bad that I didn't read the page properly.\n. I looked for a big, prominent \"download\" button. I didn't see one (nor the text \"download\"). After seeing your comment, I see the icon to copy (now that I know what to look for).\nWould it make sense to include a \"download\" button which links to the PS1 file? I understand the need of the scriptlet. Maybe it's just my bad that I didn't read the page properly.\n. ",
    "ivabz": ":+1: \n. :+1: \n. ",
    "adamralph": "@RichiCoder1 that's a great workaround in the meantime :sunglasses:.\nThanks very much!\n. A table would be better but I can understand the difficulty in determining column widths. Perhaps a space either side of the pipe symbol would be a bit more readable?\nWhat do you mean by 'pinned'?\n. The problem it causes is that when I run my custom cverall command:\n@powershell -NoProfile -ExecutionPolicy unrestricted -Command \"C:\\ProgramData\\chocolatey\\chocolateyinstall\\chocolatey.ps1 Version All | Format-Table name, found, latest, verMessage\"\nthe output is all jumbled.\nWith 0.9.8.25 I'd get a nice alphabetical listing which would make it easy to see what needs updating, specially when there are a few Foo and Foo.Install packages in list, since they appear next to each other.\nI could, of course, pipe the output of the command through Sort-Object before Format-Table but then I have to wait for the entire comparison to take place before I see any output since a full enumeration has to take place in Sort-Object before anything hits Format-Table. As it is, each line is rendered as the comparison is made (the entire command takes quite a while to run).\nNot the end of the world, but it would be nice if it could be fixed easily.\n. I guess it's also something to take into account when implementing https://github.com/chocolatey/chocolatey/issues/414\n. nice! :+1: \n. @RichiCoder1 that's a great workaround in the meantime :sunglasses:.\nThanks very much!\n. A table would be better but I can understand the difficulty in determining column widths. Perhaps a space either side of the pipe symbol would be a bit more readable?\nWhat do you mean by 'pinned'?\n. The problem it causes is that when I run my custom cverall command:\n@powershell -NoProfile -ExecutionPolicy unrestricted -Command \"C:\\ProgramData\\chocolatey\\chocolateyinstall\\chocolatey.ps1 Version All | Format-Table name, found, latest, verMessage\"\nthe output is all jumbled.\nWith 0.9.8.25 I'd get a nice alphabetical listing which would make it easy to see what needs updating, specially when there are a few Foo and Foo.Install packages in list, since they appear next to each other.\nI could, of course, pipe the output of the command through Sort-Object before Format-Table but then I have to wait for the entire comparison to take place before I see any output since a full enumeration has to take place in Sort-Object before anything hits Format-Table. As it is, each line is rendered as the comparison is made (the entire command takes quite a while to run).\nNot the end of the world, but it would be nice if it could be fixed easily.\n. I guess it's also something to take into account when implementing https://github.com/chocolatey/chocolatey/issues/414\n. nice! :+1: \n. ",
    "nabheet": "Does chocolatey support any kind of version range specification like \"[1.1, 2.0)\"?\n. Does chocolatey support any kind of version range specification like \"[1.1, 2.0)\"?\n. ",
    "jole78": "I like quiet better too but the \"problem\" is that I want the default value to be true, hence always use the \"real\" write-host but this gives us the option to turn that off....the result of that being quiet mode. Ideas?\n. Went with quiet for now, didn't see your comment before I pushed @ferventcoder...sorry. Quiet makes better sense that logout at least.\n. Quiet or Silent seems to be the defacto standard for silent/quiet installers...so either one of those will do I think. Comments?\n. @ferventcoder but isn't that the desired effect...? (keep quiet...use silent mode....??) \nI guess it depends what you mean with output then. With quiet/silent choco wouldn't output anything to the console but the file logger would still be used. \nSo would quiet imply that not even the file logger should be used then? How does a \"normal\" installer behave in quiet mode...does it log to a file anyway?\nIs better to simply \"say\" -WriteHost $false ....hmm not sure that's any better though.\nIs -Feedback $false or -NoFeedback better...I don't know.\nOK, I'm out of ideas now I think...\n. @mwrock exactly. @ferventcoder  :) ...looking forward to a merge then....\n. I like quiet better too but the \"problem\" is that I want the default value to be true, hence always use the \"real\" write-host but this gives us the option to turn that off....the result of that being quiet mode. Ideas?\n. Went with quiet for now, didn't see your comment before I pushed @ferventcoder...sorry. Quiet makes better sense that logout at least.\n. Quiet or Silent seems to be the defacto standard for silent/quiet installers...so either one of those will do I think. Comments?\n. @ferventcoder but isn't that the desired effect...? (keep quiet...use silent mode....??) \nI guess it depends what you mean with output then. With quiet/silent choco wouldn't output anything to the console but the file logger would still be used. \nSo would quiet imply that not even the file logger should be used then? How does a \"normal\" installer behave in quiet mode...does it log to a file anyway?\nIs better to simply \"say\" -WriteHost $false ....hmm not sure that's any better though.\nIs -Feedback $false or -NoFeedback better...I don't know.\nOK, I'm out of ideas now I think...\n. @mwrock exactly. @ferventcoder  :) ...looking forward to a merge then....\n. ",
    "Cephei": "Are there any plans to address this? -Properties and replacement token support would be desirable.\n. Are there any plans to address this? -Properties and replacement token support would be desirable.\n. ",
    "dennismi": "any progress?\n. any progress?\n. ",
    "laurencee": "Not being able to pass properties/tokens like you can to nuget pack is quite a large annoyance unless I've missed this feature somewhere.\n. Not being able to pass properties/tokens like you can to nuget pack is quite a large annoyance unless I've missed this feature somewhere.\n. ",
    "batzen": "I too think that Invoke-ChocolateyFunction should be removed. It really adds zero value at all and only introduces diffucult to find bugs.\nAre there any plans merging the fixes jberezanski made? It's really annoying that uninstalling something does not remove the batch redirects.\n. I don't want to argue and am not that familiar with powershell, but when i look at the code:\nfunction Invoke-ChocolateyFunction ($ChocoFunction,$paramlist) {\n  try {\n    Write-Debug \"Invoke-ChocolateyFunction is calling: `$ChocoFunction='$ChocoFunction'|`@paramlist='@paramlist'\"\n    invoke-expression \"$ChocoFunction @paramlist;\"\n  }\n  #catch {Write-Host $_.exception.message -BackgroundColor Red -ForegroundColor White ;exit 1}\n  catch {\n    Write-Debug \"Caught `'$_`'\"\n    throw \"$($_.Exception.Message)\"\n  }\n}\nIt seems obvious to me that this is just a try{...}catch{rethrow}. The code responsible for providing a proper exit code is commented out.\nAm i wrong, or does everyone agree that this function adds zero value in it's current state?\n. Send a new pull request https://github.com/chocolatey/chocolatey/pull/444\nI hope i did everything right when merging that single commit from my master to my stable and syncing it with your stable. I am pretty new to git and this was my first time merging forks and branches.\nPlease tell me if i made a mistake or if there are more elegant ways.\n. It does. But i don't know why. \nAny ideas on how i messed it up and how i can avoid this in the future?\n. Didn't do that. So that should be the issue.\nAny way i can recover from that state?\n. I too think that Invoke-ChocolateyFunction should be removed. It really adds zero value at all and only introduces diffucult to find bugs.\nAre there any plans merging the fixes jberezanski made? It's really annoying that uninstalling something does not remove the batch redirects.\n. I don't want to argue and am not that familiar with powershell, but when i look at the code:\nfunction Invoke-ChocolateyFunction ($ChocoFunction,$paramlist) {\n  try {\n    Write-Debug \"Invoke-ChocolateyFunction is calling: `$ChocoFunction='$ChocoFunction'|`@paramlist='@paramlist'\"\n    invoke-expression \"$ChocoFunction @paramlist;\"\n  }\n  #catch {Write-Host $_.exception.message -BackgroundColor Red -ForegroundColor White ;exit 1}\n  catch {\n    Write-Debug \"Caught `'$_`'\"\n    throw \"$($_.Exception.Message)\"\n  }\n}\nIt seems obvious to me that this is just a try{...}catch{rethrow}. The code responsible for providing a proper exit code is commented out.\nAm i wrong, or does everyone agree that this function adds zero value in it's current state?\n. Send a new pull request https://github.com/chocolatey/chocolatey/pull/444\nI hope i did everything right when merging that single commit from my master to my stable and syncing it with your stable. I am pretty new to git and this was my first time merging forks and branches.\nPlease tell me if i made a mistake or if there are more elegant ways.\n. It does. But i don't know why. \nAny ideas on how i messed it up and how i can avoid this in the future?\n. Didn't do that. So that should be the issue.\nAny way i can recover from that state?\n. ",
    "fredericseiler": "Nevermind.\n. Nevermind.\n. ",
    "ssteward54": "I'm still having the problem with the Chocolatey bin root being set to C:\\ and causing all the errors when trying to update the log file.  Stepping through the Get-BinRoot script, it looks like $env:ChocolateyBinRoot was never set, and keeps ending up set to C:\\ in the code.\n. It doesn't seem like a package caused the binRoot being set to C:.  I just saw the errors at the end of my setup scripts and everything seemed to install ok.  I looked through all the packages I used and none of them reference binRoot in the install files.  (SVN, TortoiseSvn, custom java.jdk6 adapted from java.jdk, custom eclipse-javaee-kepler adpated from the juno version).\nOne thing I did realize, is the Windows 7 machine had user account access control turned on, I had turned it off, but didn't reboot.  I wonder if this caused a problem setting the Environment variable?  I was having some other problems accessing windows services and IIS without running as admin before rebooting.  I'll be running the setup process again soon and will see if I can pinpoint the cause. \n. I'm still having the problem with the Chocolatey bin root being set to C:\\ and causing all the errors when trying to update the log file.  Stepping through the Get-BinRoot script, it looks like $env:ChocolateyBinRoot was never set, and keeps ending up set to C:\\ in the code.\n. It doesn't seem like a package caused the binRoot being set to C:.  I just saw the errors at the end of my setup scripts and everything seemed to install ok.  I looked through all the packages I used and none of them reference binRoot in the install files.  (SVN, TortoiseSvn, custom java.jdk6 adapted from java.jdk, custom eclipse-javaee-kepler adpated from the juno version).\nOne thing I did realize, is the Windows 7 machine had user account access control turned on, I had turned it off, but didn't reboot.  I wonder if this caused a problem setting the Environment variable?  I was having some other problems accessing windows services and IIS without running as admin before rebooting.  I'll be running the setup process again soon and will see if I can pinpoint the cause. \n. ",
    "dylanmei": "In the nuget.exe version I have bundled with chocolatey (2.1.31022.9038), it exits immediately if the first source fails.\nPS C:\\> & 'C:\\Chocolatey\\chocolateyinstall\\nuget.exe' install VisualStudio2012Professional -Outputdirectory \"C:\\tmp\" -Source \"http://blackhawk-down/jnuget/storages/DefaultSource\" -Source \"https://chocolatey.org/api/v2/\" -NonInteractive -NoCache\nThe remote name could not be resolved: 'blackhawk-down'\nWith the latest nuget.exe version (2.8.50506.491) is behaves as you expect.\nPS C:\\> & 'C:\\Users\\vagrant\\Downloads\\nuget.exe' install VisualStudio2012Professional -Outputdirectory \"C:\\tmp\" -Source \"http://blackhawk-down/jnuget/storages/DefaultSource\" -Source \"https://chocolatey.org/api/v2/\" -NonInteractive -NoCache\nWARNING: The remote name could not be resolved: 'blackhawk-down'\nAttempting to resolve dependency 'DotNet4.5'.\nWARNING: An error occurred while loading packages from 'http://blackhawk-down/jnuget/storages/DefaultSource': The remote name could not be resolved: 'blackhawk-down'\nInstalling 'DotNet4.5 4.5.20120822'.\nSuccessfully installed 'DotNet4.5 4.5.20120822'.\nInstalling 'VisualStudio2012Professional 11.0.1'.\nSuccessfully installed 'VisualStudio2012Professional 11.0.1'.\n. In the nuget.exe version I have bundled with chocolatey (2.1.31022.9038), it exits immediately if the first source fails.\nPS C:\\> & 'C:\\Chocolatey\\chocolateyinstall\\nuget.exe' install VisualStudio2012Professional -Outputdirectory \"C:\\tmp\" -Source \"http://blackhawk-down/jnuget/storages/DefaultSource\" -Source \"https://chocolatey.org/api/v2/\" -NonInteractive -NoCache\nThe remote name could not be resolved: 'blackhawk-down'\nWith the latest nuget.exe version (2.8.50506.491) is behaves as you expect.\nPS C:\\> & 'C:\\Users\\vagrant\\Downloads\\nuget.exe' install VisualStudio2012Professional -Outputdirectory \"C:\\tmp\" -Source \"http://blackhawk-down/jnuget/storages/DefaultSource\" -Source \"https://chocolatey.org/api/v2/\" -NonInteractive -NoCache\nWARNING: The remote name could not be resolved: 'blackhawk-down'\nAttempting to resolve dependency 'DotNet4.5'.\nWARNING: An error occurred while loading packages from 'http://blackhawk-down/jnuget/storages/DefaultSource': The remote name could not be resolved: 'blackhawk-down'\nInstalling 'DotNet4.5 4.5.20120822'.\nSuccessfully installed 'DotNet4.5 4.5.20120822'.\nInstalling 'VisualStudio2012Professional 11.0.1'.\nSuccessfully installed 'VisualStudio2012Professional 11.0.1'.\n. ",
    "bender-the-greatest": "Running 0.10.2\nI can confirm this is happening for me but when running choco search (converse to the post i can install packages when none of my VPN-only sources are available). Though as a workaround i can specify -s chocolatey when searching for now, it's a bit hamhanded.\nWhat's also strange is that it seems to work fine for the few minutes following me disconnecting from the VPN.\n. Running 0.10.2\nI can confirm this is happening for me but when running choco search (converse to the post i can install packages when none of my VPN-only sources are available). Though as a workaround i can specify -s chocolatey when searching for now, it's a bit hamhanded.\nWhat's also strange is that it seems to work fine for the few minutes following me disconnecting from the VPN.\n. ",
    "dtgm": "ferventcoder, can you please add support for passing {{checksum}} with ChocoPkgUp.exe?  It seems as though this useful feature is somewhat lost when it requires manually updating this information if the checksum is not provided via static URL to a file.\n. A workaround is to override the default value by passing Url64bit null:\npowershell\nInstall-ChocolateyZipPackage -PackageName \"$packageName\" `\n                             -Url \"$url\" `\n                             -UnzipLocation \"$toolsDir\" `\n                             -Url64bit \"\" `\n                             -Checksum \"$checksum\" `\n                             -ChecksumType \"$checksumType\"\n. ferventcoder, can you please add support for passing {{checksum}} with ChocoPkgUp.exe?  It seems as though this useful feature is somewhat lost when it requires manually updating this information if the checksum is not provided via static URL to a file.\n. A workaround is to override the default value by passing Url64bit null:\npowershell\nInstall-ChocolateyZipPackage -PackageName \"$packageName\" `\n                             -Url \"$url\" `\n                             -UnzipLocation \"$toolsDir\" `\n                             -Url64bit \"\" `\n                             -Checksum \"$checksum\" `\n                             -ChecksumType \"$checksumType\"\n. ",
    "bbenoist": "Is it really useful to expose those aliases to the masses?\nIMHO, as a package manager which tends to be used for a very large part of the Windows users, Chocolatey should be as non-conflicting as possible by only exposing the choco command. Power users which are worried about their own typing productivity should already know how to make aliases prior to using some of them.\n. Nice :+1: \nAs I have seen it in a lot of examples and documentation during my learning about Chocolatey, I can understand your worries about cinst.\nA smooth approach may be to start prompting about the depreciation when using the related commands with v1 (i.e. in the same way that the KS campaign).\n. Is it really useful to expose those aliases to the masses?\nIMHO, as a package manager which tends to be used for a very large part of the Windows users, Chocolatey should be as non-conflicting as possible by only exposing the choco command. Power users which are worried about their own typing productivity should already know how to make aliases prior to using some of them.\n. Nice :+1: \nAs I have seen it in a lot of examples and documentation during my learning about Chocolatey, I can understand your worries about cinst.\nA smooth approach may be to start prompting about the depreciation when using the related commands with v1 (i.e. in the same way that the KS campaign).\n. ",
    "paulsapps": "I have this problem on appveyor when trying to run cmake's cpack, what has to be executed to remove the aliases? \n. thanks I'll give it a go\n. I have this problem on appveyor when trying to run cmake's cpack, what has to be executed to remove the aliases? \n. thanks I'll give it a go\n. ",
    "pyhedgehog": "Only thing I see usable is cup because there is a mess between choco update and choco upgrade.\n. Only thing I see usable is cup because there is a mess between choco update and choco upgrade.\n. ",
    "RedwoodForest": "Makes sense. In the meantime \"cver all\" is a reasonable way to get this info though it takes a while and also lists packages that don't have updates.\n. Makes sense. In the meantime \"cver all\" is a reasonable way to get this info though it takes a while and also lists packages that don't have updates.\n. ",
    "chucker": "I wrote a slow hacky gist for this in the meantime. Seems \"cver all\" is a lot faster and more correct (my version doesn't compare versions properly), but it also lists packages without updates, which isn't very useful for me.\n. This is essentially covered with 'cup all -noop'.\n. I wrote a slow hacky gist for this in the meantime. Seems \"cver all\" is a lot faster and more correct (my version doesn't compare versions properly), but it also lists packages without updates, which isn't very useful for me.\n. This is essentially covered with 'cup all -noop'.\n. ",
    "mxj4": "modify install.ps1 to download 7za.exe from another source works ( i tested my dropbox)\n. modify install.ps1 to download 7za.exe from another source works ( i tested my dropbox)\n. ",
    "jimpriest": "Same issue here. Will try the local workaround. \n. Same issue here. Will try the local workaround. \n. ",
    "wulftone": "Same issue here!.. was excited to try chocolatey.  Less excited now.\n. I should amend my comment with system info... I'm on Windows 7 Professional SP1, no proxy or anything, just a home computer.  In the meantime I did what @philacs suggested and re-wrote the path in the script.  Got chocolatey installed... now to figure out why it won't remember the chocolatey path between cmd window sessions.\n. Same issue here!.. was excited to try chocolatey.  Less excited now.\n. I should amend my comment with system info... I'm on Windows 7 Professional SP1, no proxy or anything, just a home computer.  In the meantime I did what @philacs suggested and re-wrote the path in the script.  Got chocolatey installed... now to figure out why it won't remember the chocolatey path between cmd window sessions.\n. ",
    "ledsun": "I think the raw download url of github was changed.\nbefore: https://github.com/chocolatey/chocolatey/blob/master/src/tools/7za.exe?raw=true\nafter: https://github.com/chocolatey/chocolatey/raw/master/src/tools/7za.exe\n. I think the raw download url of github was changed.\nbefore: https://github.com/chocolatey/chocolatey/blob/master/src/tools/7za.exe?raw=true\nafter: https://github.com/chocolatey/chocolatey/raw/master/src/tools/7za.exe\n. ",
    "haacked": "Both of those URLs work for me. FWIW, we just experienced a DDOS attack. Could be related.\nAlso, for changes to the GitHub API, I recommend subscribing to the GitHub API blog: http://developer.github.com/changes/\n. Hmm, are you setting the user agent when using the older .NET versions? A while ago, we stopped serving API calls to clients without user agent set. Turns out .NET HttpWebRequest doesn't require it be set (IIRC), even though the HTTP spec does.\n. Both of those URLs work for me. FWIW, we just experienced a DDOS attack. Could be related.\nAlso, for changes to the GitHub API, I recommend subscribing to the GitHub API blog: http://developer.github.com/changes/\n. Hmm, are you setting the user agent when using the older .NET versions? A while ago, we stopped serving API calls to clients without user agent set. Turns out .NET HttpWebRequest doesn't require it be set (IIRC), even though the HTTP spec does.\n. ",
    "chris-carpenter": "The would be issue https://github.com/chocolatey/chocolatey/issues/371 which I discussed in the ticket as not likely the issue since $env:ChocolateyInstall has a value, further if it was the issue, I shouldn't be able to install notepadplusplus or nodejs. Both of which work.\n. bill-long is right. I have tested it on both a 64 bit and 32 bit. It works on the 64 bit, but not the 32 bit version. Since the package that I ran into has a build for both, I'll close this and see about getting the package to resolve it.\n. The would be issue https://github.com/chocolatey/chocolatey/issues/371 which I discussed in the ticket as not likely the issue since $env:ChocolateyInstall has a value, further if it was the issue, I shouldn't be able to install notepadplusplus or nodejs. Both of which work.\n. bill-long is right. I have tested it on both a 64 bit and 32 bit. It works on the 64 bit, but not the 32 bit version. Since the package that I ran into has a build for both, I'll close this and see about getting the package to resolve it.\n. ",
    "jamesgecko": "Yeah, a change like this needs either a more verbose notification message or a URL to a wiki page with step-by-step instructions. I don't know enough about PowerShell to change environment variables without some googling.\n. Here, I wrote a thing. https://github.com/chocolatey/chocolatey/wiki/Migrate-Old-Chocolatey-Directory-to-ProgramData\nFirst draft; it might need improvement.\n. Yeah, a change like this needs either a more verbose notification message or a URL to a wiki page with step-by-step instructions. I don't know enough about PowerShell to change environment variables without some googling.\n. Here, I wrote a thing. https://github.com/chocolatey/chocolatey/wiki/Migrate-Old-Chocolatey-Directory-to-ProgramData\nFirst draft; it might need improvement.\n. ",
    "AnneTheAgile": "docs are a hot topic for me :). What merge conflicts are there? I can't see how to determine what they are? \nThen, if that is ok, is this PR slated to be merged or are docs handled differently now?\nAnneTheAgile\n. @gep13 & @Redsandro , ok thank you! I do indeed like this idea. \nTo see the merge conflicts, I must pull down Redsandro:docGenerator [1] branch and try to pull in this main master [2], right? And then naturally I should see them. I had thought I should be able to see it here on github visually, but I guess not. That's ok, just wanted not to miss something. Ty @Redsandro for the ice and nice lady/gentleman logo!\nAnneTheAgile\n[1] https://github.com/Redsandro/chocolatey-origin/tree/docGenerator\n[2] https://github.com/chocolatey/chocolatey \n. @juliankrispel , I love all your renditions! Your pictures with the post \"The idea is that you can represent your brand in different ways as long as you keep some similarities that make it identifiable.\" really seem gorgeous to me and very unified. \nI vote to keep the colon on the small ones and keep the non-colon, willy womka style on the big ones. Though traditionally I'd say small logos shouldn't \"make you think\", in this case I believe though it does 'stop' me a bit, it gives a terrific 'ah hah'. So maybe on the front page you could have both big/small somewhere.  \nAlso, later down the road if c:\\ becomes obsolete/unfashionable, the colon could be dropped with ease.\n. @jeffchulg , so this issue is solely because on server we often use non-C: drives, right? Could you update the ticket title to indicate the issue is with the drive letter? \nAnneTheAgile, CodeTriage fan\n. docs are a hot topic for me :). What merge conflicts are there? I can't see how to determine what they are? \nThen, if that is ok, is this PR slated to be merged or are docs handled differently now?\nAnneTheAgile\n. @gep13 & @Redsandro , ok thank you! I do indeed like this idea. \nTo see the merge conflicts, I must pull down Redsandro:docGenerator [1] branch and try to pull in this main master [2], right? And then naturally I should see them. I had thought I should be able to see it here on github visually, but I guess not. That's ok, just wanted not to miss something. Ty @Redsandro for the ice and nice lady/gentleman logo!\nAnneTheAgile\n[1] https://github.com/Redsandro/chocolatey-origin/tree/docGenerator\n[2] https://github.com/chocolatey/chocolatey \n. @juliankrispel , I love all your renditions! Your pictures with the post \"The idea is that you can represent your brand in different ways as long as you keep some similarities that make it identifiable.\" really seem gorgeous to me and very unified. \nI vote to keep the colon on the small ones and keep the non-colon, willy womka style on the big ones. Though traditionally I'd say small logos shouldn't \"make you think\", in this case I believe though it does 'stop' me a bit, it gives a terrific 'ah hah'. So maybe on the front page you could have both big/small somewhere.  \nAlso, later down the road if c:\\ becomes obsolete/unfashionable, the colon could be dropped with ease.\n. @jeffchulg , so this issue is solely because on server we often use non-C: drives, right? Could you update the ticket title to indicate the issue is with the drive letter? \nAnneTheAgile, CodeTriage fan\n. ",
    "NJ-Brad": "I had a syntax error in my script. The error message I received didn't help me find it.\nI had a ) at the end of my MSI file name, left over from a bad copy/paste operation.\nThis issue can be closed. I apologize for the false alarm.\n. I had a syntax error in my script. The error message I received didn't help me find it.\nI had a ) at the end of my MSI file name, left over from a bad copy/paste operation.\nThis issue can be closed. I apologize for the false alarm.\n. ",
    "thigg": "ah, I opend an issue for this. Very nice. How long will this feature need to get released?\nBecause I would like to use this productive.\n. Sorry for the long time. My previous post was https://github.com/chocolatey/chocolatey/issues/472.\nBecause it is already done you can delete it.\nThe feature will be added in 0.9.9? I there already a release date planned?\n. Okay, I simply added to Chocolatey-PackagesConfig at line 26\nChocolatey-Install -packageName $.id -source $.source -version $.version -ia \"$.ia\"\nand it looks like its working\n. Ah I see, this is a funny issue :D Ah and thanks for the XML code :)\n. ah, I opend an issue for this. Very nice. How long will this feature need to get released?\nBecause I would like to use this productive.\n. Sorry for the long time. My previous post was https://github.com/chocolatey/chocolatey/issues/472.\nBecause it is already done you can delete it.\nThe feature will be added in 0.9.9? I there already a release date planned?\n. Okay, I simply added to Chocolatey-PackagesConfig at line 26\nChocolatey-Install -packageName $.id -source $.source -version $.version -ia \"$.ia\"\nand it looks like its working\n. Ah I see, this is a funny issue :D Ah and thanks for the XML code :)\n. ",
    "maxlinc": "Does it make sense to change the first item (cinstm) or do you think a lot of people are still using older versions of chocolatey?\nFYI - I did have success with ruby 1.9.3 on a new server, but I have had the issue a few times on clean servers as well. I think 7za.exe probably wasn't on the path.  I tried uninstalling/reinstalling 7zip a few times, but it looks like 7za.exe isn't part of the 7zip package. Seems like its part of the chocolatey install.\n. Does it make sense to change the first item (cinstm) or do you think a lot of people are still using older versions of chocolatey?\nFYI - I did have success with ruby 1.9.3 on a new server, but I have had the issue a few times on clean servers as well. I think 7za.exe probably wasn't on the path.  I tried uninstalling/reinstalling 7zip a few times, but it looks like 7za.exe isn't part of the 7zip package. Seems like its part of the chocolatey install.\n. ",
    "030": "An example to extract a tar.gz was found at http://superuser.com/questions/80019/how-can-i-unzip-a-tar-gz-in-one-step-using-7-zip. Including Cygwin as a dependency and subsequently extract the tar.gz using the following command: tar xvfz packageName.tar.gz -C c:/temp/helloworld extracts the package in a preferred directory\n. Thank you for the example. The tar.gz package has been extracted to the preferred directory.\nInstall-ChocolateyZipPackage -packagename gzip-src -url \"$url\" -unzipLocation (Join-Path $env:chocolateyPackageFolder tmp)\nGet-ChocolateyUnzip -fileFullPath (Join-Path $env:chocolateyPackageFolder tmp\\gzip-srcInstall) -destination \"$installDir\"\n. I would like to create an Install-ChocolateyTarPackage\n. Where does the Install-ChocolateyZipPackage.Test.ps1 reside? I cannot find it at tests/unit. I assume that this does not exist and will start to create it.\n. GH-512 created\n. @gep13 GH-513 has been created\n. ```\nPS C:\\installchocolateyarchive\\tests\\unit> . \"C:\\Chocolatey\\lib\\pes\npester.bat\" .\\Install-ChocolateyArchivePackage.Tests.ps1\nExecuting all tests in C:\\installchocolateyarchive\\tests\\unit\\Insta\nPackage.Tests.ps1\nPlease run chocolatey /? or chocolatey help - chocolatey v0.9.8.24\nDescribing Install-ChocolateyArchivePackage\n  When no packageName parameter is passed to this function\n[+]    should return an error 176ms\n  When no url parameter is passed to this function\n[+]    should return an error 8ms\n  When no unzipLocation parameter is passed to this function\n[+]    should return an error 8ms\n  When required parameters are passed and Zip needs to be installed it should succeed\nDownloading test 64 bit\n  from 'http://apache.mirror1.spango.com/tomcat/tomcat-8/v8.0.9/bin/apache-tomcat-8.0.9-windows-x64.\nExtracting C:\\Users\\r\\AppData\\Local\\Temp\\chocolatey\\test\\testInstall.zip to C:\\installChocolateyArch\nMode                LastWriteTime     Length Name\n----                -------------     ------ ----\nd----        07/13/2014     04:50            zip\nC:\\installChocolateyArchivePackage\\zip\ntest has finished successfully! The chocolatey gods have answered your request!\n[+]    should extract the ZipPackage 83ms\n  When required parameters are passed and Tar.gz needs to be installed it should succeed\nDownloading test 64 bit\n  from 'http://apache.mirror1.spango.com/tomcat/tomcat-8/v8.0.9/bin/apache-tomcat-8.0.9.tar.gz'\nThe default install location has been changed to 'C:\\ProgramData\\chocolatey'.\n  This install will be updated to that location in the next version. It\n  is strongly suggested you move this installation to the new location\n  as soon as possible to limit write access from all users. Do not forget\n  to update PATH & ChocolateyInstall environment variables.\nChocolatey (v0.9.8.24) is installing 'Cygwin' and dependencies. By installing you accept the license\nch dependency you are installing.\n'cygwin 1.7.23.20130814' already installed.\nIf you want to reinstall the current version of an existing package, please use the -force command.\nFinished installing 'Cygwin' and dependencies - if errors not shown in console, none detected. Check\nnsure.\nDirectory: C:\\installChocolateyArchivePackage\n\nMode                LastWriteTime     Length Name\n----                -------------     ------ ----\nd----        07/13/2014     04:51            tarGz\napache-tomcat-8.0.9/bin/catalina.sh\napache-tomcat-8.0.9/bin/configtest.sh\napache-tomcat-8.0.9/bin/daemon.sh\napache-tomcat-8.0.9/bin/digest.sh\n...\napache-tomcat-8.0.9/webapps/manager/index.jsp\napache-tomcat-8.0.9/webapps/manager/status.xsd\napache-tomcat-8.0.9/webapps/manager/xform.xsl\ntest has finished successfully! The chocolatey gods have answered your request!\n[+]    should extract the TarGzPackage 5ms\nRemove test directory C:\\installChocolateyArchivePackage after finishing testing\nTests completed in 281ms\nPassed: 5 Failed: 0\nPS C:\\installchocolateyarchive\\tests\\unit>\n```\n. AKA created in GH-513\nInstall-ChocolateyArchivePackage.Tests created\nExtraction of tar.gz feature created\n. Should a new pull request be created? GH-506 has been created for another feature.\n. Tomcat dependency to test installation of tar.gz and zip replaced by creation of local test tar.gz and zip packages by 7zip\n. May this feature become available in v0.9.9?\n. I have created some code and would like to push it to the master\n. Thank you. I will send you an email.\n. I cannot find the mailing list. Could you indicate where this list could be found?\n. Thank you\n. I have submitted a post but cannot find it\n. Yes it is visible now https://groups.google.com/forum/#!topic/chocolatey/6xq1-TIHigE. Thank you\n. https://github.com/030/chocolatey/blob/master/src/helpers/functions/Install-ChocolateyService.ps1\n. May I build and commit this feature this weekend?\n. Thank you. I am now creating and running tests using Pester. When I have completed the Test class I will follow the next step. Thank you for the link to the process.\n. All 10 test pass, but there are still some issues:\nNew-Item : Cannot find drive. A drive with the name 'TestDrive' does not exist.\nAt C:\\Chocolatey\\lib\\pester.2.1.0\\tools\\Functions\\TestDrive.ps1:109 char:28\n+         $item = $Content | New-Item -Name $Path -Path \"${TestDriveName}:\" -Type  ...\n+                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : ObjectNotFound: (TestDrive:String) [New-Item], DriveNotFoundException\n    + FullyQualifiedErrorId : DriveNotFound,Microsoft.PowerShell.Commands.NewItemCommand\nand\nWARNING: The names of some imported commands from the module 'chocolateyInstaller' include unapproved verbs that might\nmake them less discoverable. To find the commands with unapproved verbs, run the Import-Module command again with the\nVerbose parameter. For a list of approved verbs, type Get-Verb.\nI will check the latter tomorrow by running the test using the verbose parameter\n. Issue:\n```\nNew-Item : Cannot find drive. A drive with the name 'TestDrive' does not exist.\nAt C:\\Chocolatey\\lib\\pester.2.1.0\\tools\\Functions\\TestDrive.ps1:109 char:28\n$item = $Content | New-Item -Name $Path -Path \"${TestDriveName}:\" -Type ...\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    CategoryInfo : ObjectNotFound: (TestDrive:String) [New-Item], DriveNotFoundException\n    FullyQualifiedErrorId : DriveNotFound,Microsoft.PowerShell.Commands.NewItemCommand\n```\npersist. How could this be solved?\n. cinst pester -Version 2.0.2\nand subsequently executing\n```\nPS C:\\chocolatey-1\\tests\\unit> C:\\Chocolatey\\lib\\pester.2.0.2\\tools\\bin\\pester.bat .\\In\nstall-ChocolateyService.Tests.ps1\nExecuting all tests in C:\\chocolatey-1\\tests\\unit\\Install-ChocolateyService.Tests.ps1\nPlease run chocolatey /? or chocolatey help - chocolatey v0.9.8.24\nDescribing Install-ChocolateyService\n  When provided parameters are correct the service should be created and started\nThe default install location has been changed to 'C:\\ProgramData\\chocolatey'.\n  This install will be updated to that location in the next version. It\n  is strongly suggested you move this installation to the new location\n  as soon as possible to limit write access from all users. Do not forget\n  to update PATH & ChocolateyInstall environment variables.\nChocolatey (v0.9.8.24) is installing 'NSSM' and dependencies. By installing you accept the license for 'NSSM' and each d\nependency you are installing.\n'NSSM 2.21.1.0' already installed.\nIf you want to reinstall the current version of an existing package, please use the -force command.\nFinished installing 'NSSM' and dependencies - if errors not shown in console, none detected. Check log for errors if uns\nure.\nC:\\installChocolateyServiceTest directory does not exist and will be created\nDirectory: C:\\\n\nMode                LastWriteTime     Length Name\n----                -------------     ------ ----\nd----        07/08/2014     18:35            installChocolateyServiceTest\ninstallServiceTest service will be installed\nnssm install installServiceTest \"C:\\installChocolateyServiceTest\\testService.bat\"\nService \"installServiceTest\" installed successfully!\ninstallServiceTest service will be started\ninstallServiceTest service has been started\n[+]    service creation should succeed 548ms\n[+]    service start should succeed 46ms\n  When provided parameters are correct and service exist it should be removed, subsequently created and started\nThe default install location has been changed to 'C:\\ProgramData\\chocolatey'.\n  This install will be updated to that location in the next version. It\n  is strongly suggested you move this installation to the new location\n  as soon as possible to limit write access from all users. Do not forget\n  to update PATH & ChocolateyInstall environment variables.\nChocolatey (v0.9.8.24) is installing 'NSSM' and dependencies. By installing you accept the license for 'NSSM' and each d\nependency you are installing.\n'NSSM 2.21.1.0' already installed.\nIf you want to reinstall the current version of an existing package, please use the -force command.\nFinished installing 'NSSM' and dependencies - if errors not shown in console, none detected. Check log for errors if uns\nure.\ninstallServiceTest service already exists and will be removed\n__GENUS          : 2\n__CLASS          : __PARAMETERS\n__SUPERCLASS     :\n__DYNASTY        : __PARAMETERS\n__RELPATH        :\n__PROPERTY_COUNT : 1\n__DERIVATION     : {}\n__SERVER         :\n__NAMESPACE      :\n__PATH           :\nReturnValue      : 0\nPSComputerName   :\ninstallServiceTest service will be installed\nnssm install installServiceTest \"C:\\installChocolateyServiceTest\\testService.bat\"\nService \"installServiceTest\" installed successfully!\ninstallServiceTest service will be started\ninstallServiceTest service has been started\n[+]    service creation should succeed after deletion of previous service 457ms\n[+]    service start should succeed after deletion of previous service 3ms\n  When availablePort parameter is passed to this function and it is in LISTENING state and not available\nThe default install location has been changed to 'C:\\ProgramData\\chocolatey'.\n  This install will be updated to that location in the next version. It\n  is strongly suggested you move this installation to the new location\n  as soon as possible to limit write access from all users. Do not forget\n  to update PATH & ChocolateyInstall environment variables.\nChocolatey (v0.9.8.24) is installing 'NSSM' and dependencies. By installing you accept the license for 'NSSM' and each d\nependency you are installing.\n'NSSM 2.21.1.0' already installed.\nIf you want to reinstall the current version of an existing package, please use the -force command.\nFinished installing 'NSSM' and dependencies - if errors not shown in console, none detected. Check log for errors if uns\nure.\ninstallServiceTest service already exists and will be removed\n__GENUS          : 2\n__CLASS          : __PARAMETERS\n__SUPERCLASS     :\n__DYNASTY        : __PARAMETERS\n__RELPATH        :\n__PROPERTY_COUNT : 1\n__DERIVATION     : {}\n__SERVER         :\n__NAMESPACE      :\n__PATH           :\nReturnValue      : 0\nPSComputerName   :\ninstallServiceTest service will be installed\nnssm install installServiceTest \"C:\\installChocolateyServiceTest\\testService.bat\"\nService \"installServiceTest\" installed successfully!\n135 is in LISTENING state and not available.\n[+]    should return an error 212ms\n  When no packageName parameter is passed to this function\n[+]    should return an error 8ms\n  When no serviceName parameter is passed to this function\n[+]    should return an error 7ms\n  When no createServiceCommand parameter is passed to this function\n[+]    should return an error 8ms\n  When service does not exist\nThe default install location has been changed to 'C:\\ProgramData\\chocolatey'.\n  This install will be updated to that location in the next version. It\n  is strongly suggested you move this installation to the new location\n  as soon as possible to limit write access from all users. Do not forget\n  to update PATH & ChocolateyInstall environment variables.\nChocolatey (v0.9.8.24) is installing 'NSSM' and dependencies. By installing you accept the license for 'NSSM' and each d\nependency you are installing.\n'NSSM 2.21.1.0' already installed.\nIf you want to reinstall the current version of an existing package, please use the -force command.\nFinished installing 'NSSM' and dependencies - if errors not shown in console, none detected. Check log for errors if uns\nure.\nunavailableServiceName service will be installed\nnssm install installServiceTest \"C:\\installChocolateyServiceTest\\testService.bat\"\nError creating service!\n[+]    should return an error 7ms\n  When createServiceCommand is incorrect\nThe default install location has been changed to 'C:\\ProgramData\\chocolatey'.\n  This install will be updated to that location in the next version. It\n  is strongly suggested you move this installation to the new location\n  as soon as possible to limit write access from all users. Do not forget\n  to update PATH & ChocolateyInstall environment variables.\nChocolatey (v0.9.8.24) is installing 'NSSM' and dependencies. By installing you accept the license for 'NSSM' and each d\nependency you are installing.\n'NSSM 2.21.1.0' already installed.\nIf you want to reinstall the current version of an existing package, please use the -force command.\nFinished installing 'NSSM' and dependencies - if errors not shown in console, none detected. Check log for errors if uns\nure.\ninstallServiceTest service already exists and will be removed\n__GENUS          : 2\n__CLASS          : __PARAMETERS\n__SUPERCLASS     :\n__DYNASTY        : __PARAMETERS\n__RELPATH        :\n__PROPERTY_COUNT : 1\n__DERIVATION     : {}\n__SERVER         :\n__NAMESPACE      :\n__PATH           :\nReturnValue      : 0\nPSComputerName   :\ninstallServiceTest service will be installed\nunavailableServiceName \"C:\\installChocolateyServiceTest\\testService.bat\"\n[+]    should return an error 8ms\nRemove test directory after finishing testing\nTests completed in 1.31s\nPassed: 10 Failed: 0\nPS C:\\chocolatey-1\\tests\\unit>\n```\nworks. Thank you.\n. Work on comments @ferventcoder has been done. The code and tests have been created. Looking forward to hear whether the code and tests need to be improved.\n. @ferventcoder Thank you. Pull request (GH-506) has been created.\n. I misunderstood regarding the documentation. It has been added again.\n. Remove-Service has been renamed to Uninstall-ChocolateyService\n. Tests have been run again and everything still works.\n```\nPS C:\\chocolatey-1\\tests\\unit> C:\\Chocolatey\\lib\\pester.2.0.2\\tools\\bin\\pester.bat .\\In\nstall-ChocolateyService.Tests.ps1\nExecuting all tests in C:\\chocolatey-1\\tests\\unit\\Install-ChocolateyService.Tests.ps1\nPlease run chocolatey /? or chocolatey help - chocolatey v0.9.8.24\nDescribing Install-ChocolateyService\n  When provided parameters are correct the service should be created and started\nThe default install location has been changed to 'C:\\ProgramData\\chocolatey'.\n  This install will be updated to that location in the next version. It\n  is strongly suggested you move this installation to the new location\n  as soon as possible to limit write access from all users. Do not forget\n  to update PATH & ChocolateyInstall environment variables.\nChocolatey (v0.9.8.24) is installing 'NSSM' and dependencies. By installing you accept the license for 'NSSM' and each d\nependency you are installing.\n'NSSM 2.21.1.0' already installed.\nIf you want to reinstall the current version of an existing package, please use the -force command.\nFinished installing 'NSSM' and dependencies - if errors not shown in console, none detected. Check log for errors if uns\nure.\nC:\\installChocolateyServiceTest directory does not exist and will be created\nDirectory: C:\\\n\nMode                LastWriteTime     Length Name\n----                -------------     ------ ----\nd----        07/08/2014     22:12            installChocolateyServiceTest\ninstallServiceTest service will be installed\nnssm install installServiceTest \"C:\\installChocolateyServiceTest\\testService.bat\"\nService \"installServiceTest\" installed successfully!\ninstallServiceTest service will be started\ninstallServiceTest service has been started\n[+]    service creation should succeed 722ms\n[+]    service start should succeed 21ms\n  When provided parameters are correct and service exist it should be removed, subsequently created and started\nThe default install location has been changed to 'C:\\ProgramData\\chocolatey'.\n  This install will be updated to that location in the next version. It\n  is strongly suggested you move this installation to the new location\n  as soon as possible to limit write access from all users. Do not forget\n  to update PATH & ChocolateyInstall environment variables.\nChocolatey (v0.9.8.24) is installing 'NSSM' and dependencies. By installing you accept the license for 'NSSM' and each d\nependency you are installing.\n'NSSM 2.21.1.0' already installed.\nIf you want to reinstall the current version of an existing package, please use the -force command.\nFinished installing 'NSSM' and dependencies - if errors not shown in console, none detected. Check log for errors if uns\nure.\ninstallServiceTest service already exists and will be removed\n__GENUS          : 2\n__CLASS          : __PARAMETERS\n__SUPERCLASS     :\n__DYNASTY        : __PARAMETERS\n__RELPATH        :\n__PROPERTY_COUNT : 1\n__DERIVATION     : {}\n__SERVER         :\n__NAMESPACE      :\n__PATH           :\nReturnValue      : 0\nPSComputerName   :\ninstallServiceTest service will be installed\nnssm install installServiceTest \"C:\\installChocolateyServiceTest\\testService.bat\"\nService \"installServiceTest\" installed successfully!\ninstallServiceTest service will be started\ninstallServiceTest service has been started\n[+]    service creation should succeed after deletion of previous service 521ms\n[+]    service start should succeed after deletion of previous service 6ms\n  When availablePort parameter is passed to this function and it is in LISTENING state and not available\nThe default install location has been changed to 'C:\\ProgramData\\chocolatey'.\n  This install will be updated to that location in the next version. It\n  is strongly suggested you move this installation to the new location\n  as soon as possible to limit write access from all users. Do not forget\n  to update PATH & ChocolateyInstall environment variables.\nChocolatey (v0.9.8.24) is installing 'NSSM' and dependencies. By installing you accept the license for 'NSSM' and each d\nependency you are installing.\n'NSSM 2.21.1.0' already installed.\nIf you want to reinstall the current version of an existing package, please use the -force command.\nFinished installing 'NSSM' and dependencies - if errors not shown in console, none detected. Check log for errors if uns\nure.\ninstallServiceTest service already exists and will be removed\n__GENUS          : 2\n__CLASS          : __PARAMETERS\n__SUPERCLASS     :\n__DYNASTY        : __PARAMETERS\n__RELPATH        :\n__PROPERTY_COUNT : 1\n__DERIVATION     : {}\n__SERVER         :\n__NAMESPACE      :\n__PATH           :\nReturnValue      : 0\nPSComputerName   :\ninstallServiceTest service will be installed\nnssm install installServiceTest \"C:\\installChocolateyServiceTest\\testService.bat\"\nService \"installServiceTest\" installed successfully!\n135 is in LISTENING state and not available.\n[+]    should return an error 256ms\n  When no packageName parameter is passed to this function\n[+]    should return an error 9ms\n  When no serviceName parameter is passed to this function\n[+]    should return an error 8ms\n  When no createServiceCommand parameter is passed to this function\n[+]    should return an error 8ms\n  When service does not exist\nThe default install location has been changed to 'C:\\ProgramData\\chocolatey'.\n  This install will be updated to that location in the next version. It\n  is strongly suggested you move this installation to the new location\n  as soon as possible to limit write access from all users. Do not forget\n  to update PATH & ChocolateyInstall environment variables.\nChocolatey (v0.9.8.24) is installing 'NSSM' and dependencies. By installing you accept the license for 'NSSM' and each d\nependency you are installing.\n'NSSM 2.21.1.0' already installed.\nIf you want to reinstall the current version of an existing package, please use the -force command.\nFinished installing 'NSSM' and dependencies - if errors not shown in console, none detected. Check log for errors if uns\nure.\nunavailableServiceName service will be installed\nnssm install installServiceTest \"C:\\installChocolateyServiceTest\\testService.bat\"\nError creating service!\n[+]    should return an error 12ms\n  When createServiceCommand is incorrect\nThe default install location has been changed to 'C:\\ProgramData\\chocolatey'.\n  This install will be updated to that location in the next version. It\n  is strongly suggested you move this installation to the new location\n  as soon as possible to limit write access from all users. Do not forget\n  to update PATH & ChocolateyInstall environment variables.\nChocolatey (v0.9.8.24) is installing 'NSSM' and dependencies. By installing you accept the license for 'NSSM' and each d\nependency you are installing.\n'NSSM 2.21.1.0' already installed.\nIf you want to reinstall the current version of an existing package, please use the -force command.\nFinished installing 'NSSM' and dependencies - if errors not shown in console, none detected. Check log for errors if uns\nure.\ninstallServiceTest service already exists and will be removed\n__GENUS          : 2\n__CLASS          : __PARAMETERS\n__SUPERCLASS     :\n__DYNASTY        : __PARAMETERS\n__RELPATH        :\n__PROPERTY_COUNT : 1\n__DERIVATION     : {}\n__SERVER         :\n__NAMESPACE      :\n__PATH           :\nReturnValue      : 0\nPSComputerName   :\ninstallServiceTest service will be installed\nunavailableServiceName \"C:\\installChocolateyServiceTest\\testService.bat\"\n[+]    should return an error 14ms\nRemove test directory after finishing testing\nTests completed in 1.58s\nPassed: 10 Failed: 0\n``\n. At the moment the createServiceCommand needs to be a valid command. I have tried to add more options to this, but the destinction between the services I would like to create using the Install-ChocolateyService is too large, e.g. apacheds (NSSM + two options), dcm4chee (NSSM + 1 option), tomcatzip (native service.bat) and postgresqlzip (native service.bat). Should I add more examples regarding the creation of a service?\n. @ferventcoder Real live examples have been added\n. Could you specify the label? What does 0-triaging mean in this case? Does it mean that this feature will be dropped or implemented soon?\n. @gep13 Thank you for the explanation\n. If no port is specified the service will not be started as TRUE will be returned\n. The port is optional. E.g. PostgreSQL, DCM4CHEE, Tomcat, JBoss require that ports are available. The script installs a Windows service indeed.\n. ShouldInstall-ChocolateyServicebe renamed toInstall-WindowsService?\n. How to create the alias using powershell? Usingset-aliasin some file?set-alias Install-ChocolateyArchivePackage path/to/Install-ChocolateyArchivePackage.ps1orfunction Install-ChocolateyArchivePackage { Install-ChocolateyArchivePackage }?\n. alias has been created\n. Ok. I will check that Q&A. Thank you.\n. Puttingset-alias Install-ChocolateyArchivePackage Install-ChocolateyZipPackage` at the end of the file solves the issue. I will commit the change ASAP.\n. AKA created\n. @jberezanski Exporting the alias has been implemented as it became clear during testing that setting an alias was insufficient and exporting is required as well. Thank you for the advice.\n. Should a new pull request be created? GH-506 has been created for another feature.\n. Ok. Thank you for the explanation. This ticket could be closed.\n. @gep13 It seems that the Install-ChocolateyShortcut.ps1 does not reside in the \"C:\\Chocolatey\\chocolateyinstall\\functions\" path (0.9.27). Will this function become available in the next release of Chocolatey? Could this function prevent conflicts between executables of different packages, e.g. eclipse vs. eclipse android. \nWhen Install-ChocolateyPinnedTaskBarItem or Install-ChocolateyDesktopLink is used there is a conflict between eclipse.exe of both packages. \nDoes the Install-ChocolateyShortcut.ps1 support passing arrays instead of string, e.g. \nInstall-ChocolateyShortcut one.exe, two.exe \ninstead of \nInstall-ChocolateyShortcut one.exe \nInstall-ChocolateyShortcut two.exe\n?\n. Could you indicate whether the IP 10.200.2.2 is correct? http://superuser.com/questions/794247/how-to-change-the-default-using-this-proxyserver-127-0-0-18888\n. 4.4.1 > 4.402, but according the https://chocolatey.org it is not\n. # chocolateyInstall.ps1\n```\n$packageName = '{{PackageName}}'\n$packageVersion = '{{PackageVersion}}'\n$32BitUrl = '{{DownloadUrl}}'\n$64BitUrl = '{{DownloadUrlx64}}'\n$extractionPath = \"c:\\Program Files\\Eclipse Foundation\\$packageVersion\"\nInstall-ChocolateyZipPackage \"$packageName\" \"$32BitUrl\" \"$extractionPath\" \"$64BitUrl\"\n```\nI was trying to overwrite the parameter $extractionPath while installing the package\n. This works. Thank you. \nWould it be possible to create a function or something? I would like to use this for multiple packages. Is it possible to include this function in InstallChocolatey.ps1. What is your opinion regarding this?\nIf the installDir is overwritten then an issue could occur if the package will be uninstalled as the uninstallChocolatey function contains the default installDirectory as defined in the installChocolatey\n. For example, when an installer is run in Windows it is possible to define a installDirectory that is registered in the registry. Once the uninstaller is run, the installDiretory will be found in the registry and the package will be removed from that directory.\nIn this situation the installDirectory is modified, but once the uninstallChocolatey,ps1 script runs the default installDirectory will be removed. Should the installDirectory be registered on the system somewhere to avoid this issue?\n. Closed as a solution has been found\n. https://github.com/030/chocolateyautomatic/blob/master/common/Uninstall-ChocolateyZipPackage030.ps1 reads the installationZip file and removes the directory. If a custom path had been chosen this is registered in the file and by reading it the package will be removed from the correct location\n. Closed as a solution has been found\n. If none of the Chocolatey scripts could help, a custom script could be made that can be included in nuspec\n$packageName = '{{PackageName}}'\n. \"$PSScriptRoot\\Uninstall-ChocolateyZipPackage030.ps1\"\nUninstall-ChocolateyZipPackage030 \"$packageName\"\ninclude the file in nuspec\n<files>\n  <file src=\"..\\..\\..\\common\\Uninstall-ChocolateyZipPackage030.ps1\" target=\"tools\\Uninstall-ChocolateyZipPackage030.ps1\" />\n. An issue has been created\n. Close as invalid as it seems to work for other packages.\n. An example to extract a tar.gz was found at http://superuser.com/questions/80019/how-can-i-unzip-a-tar-gz-in-one-step-using-7-zip. Including Cygwin as a dependency and subsequently extract the tar.gz using the following command: tar xvfz packageName.tar.gz -C c:/temp/helloworld extracts the package in a preferred directory\n. Thank you for the example. The tar.gz package has been extracted to the preferred directory.\nInstall-ChocolateyZipPackage -packagename gzip-src -url \"$url\" -unzipLocation (Join-Path $env:chocolateyPackageFolder tmp)\nGet-ChocolateyUnzip -fileFullPath (Join-Path $env:chocolateyPackageFolder tmp\\gzip-srcInstall) -destination \"$installDir\"\n. I would like to create an Install-ChocolateyTarPackage\n. Where does the Install-ChocolateyZipPackage.Test.ps1 reside? I cannot find it at tests/unit. I assume that this does not exist and will start to create it.\n. GH-512 created\n. @gep13 GH-513 has been created\n. ```\nPS C:\\installchocolateyarchive\\tests\\unit> . \"C:\\Chocolatey\\lib\\pes\npester.bat\" .\\Install-ChocolateyArchivePackage.Tests.ps1\nExecuting all tests in C:\\installchocolateyarchive\\tests\\unit\\Insta\nPackage.Tests.ps1\nPlease run chocolatey /? or chocolatey help - chocolatey v0.9.8.24\nDescribing Install-ChocolateyArchivePackage\n  When no packageName parameter is passed to this function\n[+]    should return an error 176ms\n  When no url parameter is passed to this function\n[+]    should return an error 8ms\n  When no unzipLocation parameter is passed to this function\n[+]    should return an error 8ms\n  When required parameters are passed and Zip needs to be installed it should succeed\nDownloading test 64 bit\n  from 'http://apache.mirror1.spango.com/tomcat/tomcat-8/v8.0.9/bin/apache-tomcat-8.0.9-windows-x64.\nExtracting C:\\Users\\r\\AppData\\Local\\Temp\\chocolatey\\test\\testInstall.zip to C:\\installChocolateyArch\nMode                LastWriteTime     Length Name\n----                -------------     ------ ----\nd----        07/13/2014     04:50            zip\nC:\\installChocolateyArchivePackage\\zip\ntest has finished successfully! The chocolatey gods have answered your request!\n[+]    should extract the ZipPackage 83ms\n  When required parameters are passed and Tar.gz needs to be installed it should succeed\nDownloading test 64 bit\n  from 'http://apache.mirror1.spango.com/tomcat/tomcat-8/v8.0.9/bin/apache-tomcat-8.0.9.tar.gz'\nThe default install location has been changed to 'C:\\ProgramData\\chocolatey'.\n  This install will be updated to that location in the next version. It\n  is strongly suggested you move this installation to the new location\n  as soon as possible to limit write access from all users. Do not forget\n  to update PATH & ChocolateyInstall environment variables.\nChocolatey (v0.9.8.24) is installing 'Cygwin' and dependencies. By installing you accept the license\nch dependency you are installing.\n'cygwin 1.7.23.20130814' already installed.\nIf you want to reinstall the current version of an existing package, please use the -force command.\nFinished installing 'Cygwin' and dependencies - if errors not shown in console, none detected. Check\nnsure.\nDirectory: C:\\installChocolateyArchivePackage\n\nMode                LastWriteTime     Length Name\n----                -------------     ------ ----\nd----        07/13/2014     04:51            tarGz\napache-tomcat-8.0.9/bin/catalina.sh\napache-tomcat-8.0.9/bin/configtest.sh\napache-tomcat-8.0.9/bin/daemon.sh\napache-tomcat-8.0.9/bin/digest.sh\n...\napache-tomcat-8.0.9/webapps/manager/index.jsp\napache-tomcat-8.0.9/webapps/manager/status.xsd\napache-tomcat-8.0.9/webapps/manager/xform.xsl\ntest has finished successfully! The chocolatey gods have answered your request!\n[+]    should extract the TarGzPackage 5ms\nRemove test directory C:\\installChocolateyArchivePackage after finishing testing\nTests completed in 281ms\nPassed: 5 Failed: 0\nPS C:\\installchocolateyarchive\\tests\\unit>\n```\n. AKA created in GH-513\nInstall-ChocolateyArchivePackage.Tests created\nExtraction of tar.gz feature created\n. Should a new pull request be created? GH-506 has been created for another feature.\n. Tomcat dependency to test installation of tar.gz and zip replaced by creation of local test tar.gz and zip packages by 7zip\n. May this feature become available in v0.9.9?\n. I have created some code and would like to push it to the master\n. Thank you. I will send you an email.\n. I cannot find the mailing list. Could you indicate where this list could be found?\n. Thank you\n. I have submitted a post but cannot find it\n. Yes it is visible now https://groups.google.com/forum/#!topic/chocolatey/6xq1-TIHigE. Thank you\n. https://github.com/030/chocolatey/blob/master/src/helpers/functions/Install-ChocolateyService.ps1\n. May I build and commit this feature this weekend?\n. Thank you. I am now creating and running tests using Pester. When I have completed the Test class I will follow the next step. Thank you for the link to the process.\n. All 10 test pass, but there are still some issues:\nNew-Item : Cannot find drive. A drive with the name 'TestDrive' does not exist.\nAt C:\\Chocolatey\\lib\\pester.2.1.0\\tools\\Functions\\TestDrive.ps1:109 char:28\n+         $item = $Content | New-Item -Name $Path -Path \"${TestDriveName}:\" -Type  ...\n+                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : ObjectNotFound: (TestDrive:String) [New-Item], DriveNotFoundException\n    + FullyQualifiedErrorId : DriveNotFound,Microsoft.PowerShell.Commands.NewItemCommand\nand\nWARNING: The names of some imported commands from the module 'chocolateyInstaller' include unapproved verbs that might\nmake them less discoverable. To find the commands with unapproved verbs, run the Import-Module command again with the\nVerbose parameter. For a list of approved verbs, type Get-Verb.\nI will check the latter tomorrow by running the test using the verbose parameter\n. Issue:\n```\nNew-Item : Cannot find drive. A drive with the name 'TestDrive' does not exist.\nAt C:\\Chocolatey\\lib\\pester.2.1.0\\tools\\Functions\\TestDrive.ps1:109 char:28\n$item = $Content | New-Item -Name $Path -Path \"${TestDriveName}:\" -Type ...\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    CategoryInfo : ObjectNotFound: (TestDrive:String) [New-Item], DriveNotFoundException\n    FullyQualifiedErrorId : DriveNotFound,Microsoft.PowerShell.Commands.NewItemCommand\n```\npersist. How could this be solved?\n. cinst pester -Version 2.0.2\nand subsequently executing\n```\nPS C:\\chocolatey-1\\tests\\unit> C:\\Chocolatey\\lib\\pester.2.0.2\\tools\\bin\\pester.bat .\\In\nstall-ChocolateyService.Tests.ps1\nExecuting all tests in C:\\chocolatey-1\\tests\\unit\\Install-ChocolateyService.Tests.ps1\nPlease run chocolatey /? or chocolatey help - chocolatey v0.9.8.24\nDescribing Install-ChocolateyService\n  When provided parameters are correct the service should be created and started\nThe default install location has been changed to 'C:\\ProgramData\\chocolatey'.\n  This install will be updated to that location in the next version. It\n  is strongly suggested you move this installation to the new location\n  as soon as possible to limit write access from all users. Do not forget\n  to update PATH & ChocolateyInstall environment variables.\nChocolatey (v0.9.8.24) is installing 'NSSM' and dependencies. By installing you accept the license for 'NSSM' and each d\nependency you are installing.\n'NSSM 2.21.1.0' already installed.\nIf you want to reinstall the current version of an existing package, please use the -force command.\nFinished installing 'NSSM' and dependencies - if errors not shown in console, none detected. Check log for errors if uns\nure.\nC:\\installChocolateyServiceTest directory does not exist and will be created\nDirectory: C:\\\n\nMode                LastWriteTime     Length Name\n----                -------------     ------ ----\nd----        07/08/2014     18:35            installChocolateyServiceTest\ninstallServiceTest service will be installed\nnssm install installServiceTest \"C:\\installChocolateyServiceTest\\testService.bat\"\nService \"installServiceTest\" installed successfully!\ninstallServiceTest service will be started\ninstallServiceTest service has been started\n[+]    service creation should succeed 548ms\n[+]    service start should succeed 46ms\n  When provided parameters are correct and service exist it should be removed, subsequently created and started\nThe default install location has been changed to 'C:\\ProgramData\\chocolatey'.\n  This install will be updated to that location in the next version. It\n  is strongly suggested you move this installation to the new location\n  as soon as possible to limit write access from all users. Do not forget\n  to update PATH & ChocolateyInstall environment variables.\nChocolatey (v0.9.8.24) is installing 'NSSM' and dependencies. By installing you accept the license for 'NSSM' and each d\nependency you are installing.\n'NSSM 2.21.1.0' already installed.\nIf you want to reinstall the current version of an existing package, please use the -force command.\nFinished installing 'NSSM' and dependencies - if errors not shown in console, none detected. Check log for errors if uns\nure.\ninstallServiceTest service already exists and will be removed\n__GENUS          : 2\n__CLASS          : __PARAMETERS\n__SUPERCLASS     :\n__DYNASTY        : __PARAMETERS\n__RELPATH        :\n__PROPERTY_COUNT : 1\n__DERIVATION     : {}\n__SERVER         :\n__NAMESPACE      :\n__PATH           :\nReturnValue      : 0\nPSComputerName   :\ninstallServiceTest service will be installed\nnssm install installServiceTest \"C:\\installChocolateyServiceTest\\testService.bat\"\nService \"installServiceTest\" installed successfully!\ninstallServiceTest service will be started\ninstallServiceTest service has been started\n[+]    service creation should succeed after deletion of previous service 457ms\n[+]    service start should succeed after deletion of previous service 3ms\n  When availablePort parameter is passed to this function and it is in LISTENING state and not available\nThe default install location has been changed to 'C:\\ProgramData\\chocolatey'.\n  This install will be updated to that location in the next version. It\n  is strongly suggested you move this installation to the new location\n  as soon as possible to limit write access from all users. Do not forget\n  to update PATH & ChocolateyInstall environment variables.\nChocolatey (v0.9.8.24) is installing 'NSSM' and dependencies. By installing you accept the license for 'NSSM' and each d\nependency you are installing.\n'NSSM 2.21.1.0' already installed.\nIf you want to reinstall the current version of an existing package, please use the -force command.\nFinished installing 'NSSM' and dependencies - if errors not shown in console, none detected. Check log for errors if uns\nure.\ninstallServiceTest service already exists and will be removed\n__GENUS          : 2\n__CLASS          : __PARAMETERS\n__SUPERCLASS     :\n__DYNASTY        : __PARAMETERS\n__RELPATH        :\n__PROPERTY_COUNT : 1\n__DERIVATION     : {}\n__SERVER         :\n__NAMESPACE      :\n__PATH           :\nReturnValue      : 0\nPSComputerName   :\ninstallServiceTest service will be installed\nnssm install installServiceTest \"C:\\installChocolateyServiceTest\\testService.bat\"\nService \"installServiceTest\" installed successfully!\n135 is in LISTENING state and not available.\n[+]    should return an error 212ms\n  When no packageName parameter is passed to this function\n[+]    should return an error 8ms\n  When no serviceName parameter is passed to this function\n[+]    should return an error 7ms\n  When no createServiceCommand parameter is passed to this function\n[+]    should return an error 8ms\n  When service does not exist\nThe default install location has been changed to 'C:\\ProgramData\\chocolatey'.\n  This install will be updated to that location in the next version. It\n  is strongly suggested you move this installation to the new location\n  as soon as possible to limit write access from all users. Do not forget\n  to update PATH & ChocolateyInstall environment variables.\nChocolatey (v0.9.8.24) is installing 'NSSM' and dependencies. By installing you accept the license for 'NSSM' and each d\nependency you are installing.\n'NSSM 2.21.1.0' already installed.\nIf you want to reinstall the current version of an existing package, please use the -force command.\nFinished installing 'NSSM' and dependencies - if errors not shown in console, none detected. Check log for errors if uns\nure.\nunavailableServiceName service will be installed\nnssm install installServiceTest \"C:\\installChocolateyServiceTest\\testService.bat\"\nError creating service!\n[+]    should return an error 7ms\n  When createServiceCommand is incorrect\nThe default install location has been changed to 'C:\\ProgramData\\chocolatey'.\n  This install will be updated to that location in the next version. It\n  is strongly suggested you move this installation to the new location\n  as soon as possible to limit write access from all users. Do not forget\n  to update PATH & ChocolateyInstall environment variables.\nChocolatey (v0.9.8.24) is installing 'NSSM' and dependencies. By installing you accept the license for 'NSSM' and each d\nependency you are installing.\n'NSSM 2.21.1.0' already installed.\nIf you want to reinstall the current version of an existing package, please use the -force command.\nFinished installing 'NSSM' and dependencies - if errors not shown in console, none detected. Check log for errors if uns\nure.\ninstallServiceTest service already exists and will be removed\n__GENUS          : 2\n__CLASS          : __PARAMETERS\n__SUPERCLASS     :\n__DYNASTY        : __PARAMETERS\n__RELPATH        :\n__PROPERTY_COUNT : 1\n__DERIVATION     : {}\n__SERVER         :\n__NAMESPACE      :\n__PATH           :\nReturnValue      : 0\nPSComputerName   :\ninstallServiceTest service will be installed\nunavailableServiceName \"C:\\installChocolateyServiceTest\\testService.bat\"\n[+]    should return an error 8ms\nRemove test directory after finishing testing\nTests completed in 1.31s\nPassed: 10 Failed: 0\nPS C:\\chocolatey-1\\tests\\unit>\n```\nworks. Thank you.\n. Work on comments @ferventcoder has been done. The code and tests have been created. Looking forward to hear whether the code and tests need to be improved.\n. @ferventcoder Thank you. Pull request (GH-506) has been created.\n. I misunderstood regarding the documentation. It has been added again.\n. Remove-Service has been renamed to Uninstall-ChocolateyService\n. Tests have been run again and everything still works.\n```\nPS C:\\chocolatey-1\\tests\\unit> C:\\Chocolatey\\lib\\pester.2.0.2\\tools\\bin\\pester.bat .\\In\nstall-ChocolateyService.Tests.ps1\nExecuting all tests in C:\\chocolatey-1\\tests\\unit\\Install-ChocolateyService.Tests.ps1\nPlease run chocolatey /? or chocolatey help - chocolatey v0.9.8.24\nDescribing Install-ChocolateyService\n  When provided parameters are correct the service should be created and started\nThe default install location has been changed to 'C:\\ProgramData\\chocolatey'.\n  This install will be updated to that location in the next version. It\n  is strongly suggested you move this installation to the new location\n  as soon as possible to limit write access from all users. Do not forget\n  to update PATH & ChocolateyInstall environment variables.\nChocolatey (v0.9.8.24) is installing 'NSSM' and dependencies. By installing you accept the license for 'NSSM' and each d\nependency you are installing.\n'NSSM 2.21.1.0' already installed.\nIf you want to reinstall the current version of an existing package, please use the -force command.\nFinished installing 'NSSM' and dependencies - if errors not shown in console, none detected. Check log for errors if uns\nure.\nC:\\installChocolateyServiceTest directory does not exist and will be created\nDirectory: C:\\\n\nMode                LastWriteTime     Length Name\n----                -------------     ------ ----\nd----        07/08/2014     22:12            installChocolateyServiceTest\ninstallServiceTest service will be installed\nnssm install installServiceTest \"C:\\installChocolateyServiceTest\\testService.bat\"\nService \"installServiceTest\" installed successfully!\ninstallServiceTest service will be started\ninstallServiceTest service has been started\n[+]    service creation should succeed 722ms\n[+]    service start should succeed 21ms\n  When provided parameters are correct and service exist it should be removed, subsequently created and started\nThe default install location has been changed to 'C:\\ProgramData\\chocolatey'.\n  This install will be updated to that location in the next version. It\n  is strongly suggested you move this installation to the new location\n  as soon as possible to limit write access from all users. Do not forget\n  to update PATH & ChocolateyInstall environment variables.\nChocolatey (v0.9.8.24) is installing 'NSSM' and dependencies. By installing you accept the license for 'NSSM' and each d\nependency you are installing.\n'NSSM 2.21.1.0' already installed.\nIf you want to reinstall the current version of an existing package, please use the -force command.\nFinished installing 'NSSM' and dependencies - if errors not shown in console, none detected. Check log for errors if uns\nure.\ninstallServiceTest service already exists and will be removed\n__GENUS          : 2\n__CLASS          : __PARAMETERS\n__SUPERCLASS     :\n__DYNASTY        : __PARAMETERS\n__RELPATH        :\n__PROPERTY_COUNT : 1\n__DERIVATION     : {}\n__SERVER         :\n__NAMESPACE      :\n__PATH           :\nReturnValue      : 0\nPSComputerName   :\ninstallServiceTest service will be installed\nnssm install installServiceTest \"C:\\installChocolateyServiceTest\\testService.bat\"\nService \"installServiceTest\" installed successfully!\ninstallServiceTest service will be started\ninstallServiceTest service has been started\n[+]    service creation should succeed after deletion of previous service 521ms\n[+]    service start should succeed after deletion of previous service 6ms\n  When availablePort parameter is passed to this function and it is in LISTENING state and not available\nThe default install location has been changed to 'C:\\ProgramData\\chocolatey'.\n  This install will be updated to that location in the next version. It\n  is strongly suggested you move this installation to the new location\n  as soon as possible to limit write access from all users. Do not forget\n  to update PATH & ChocolateyInstall environment variables.\nChocolatey (v0.9.8.24) is installing 'NSSM' and dependencies. By installing you accept the license for 'NSSM' and each d\nependency you are installing.\n'NSSM 2.21.1.0' already installed.\nIf you want to reinstall the current version of an existing package, please use the -force command.\nFinished installing 'NSSM' and dependencies - if errors not shown in console, none detected. Check log for errors if uns\nure.\ninstallServiceTest service already exists and will be removed\n__GENUS          : 2\n__CLASS          : __PARAMETERS\n__SUPERCLASS     :\n__DYNASTY        : __PARAMETERS\n__RELPATH        :\n__PROPERTY_COUNT : 1\n__DERIVATION     : {}\n__SERVER         :\n__NAMESPACE      :\n__PATH           :\nReturnValue      : 0\nPSComputerName   :\ninstallServiceTest service will be installed\nnssm install installServiceTest \"C:\\installChocolateyServiceTest\\testService.bat\"\nService \"installServiceTest\" installed successfully!\n135 is in LISTENING state and not available.\n[+]    should return an error 256ms\n  When no packageName parameter is passed to this function\n[+]    should return an error 9ms\n  When no serviceName parameter is passed to this function\n[+]    should return an error 8ms\n  When no createServiceCommand parameter is passed to this function\n[+]    should return an error 8ms\n  When service does not exist\nThe default install location has been changed to 'C:\\ProgramData\\chocolatey'.\n  This install will be updated to that location in the next version. It\n  is strongly suggested you move this installation to the new location\n  as soon as possible to limit write access from all users. Do not forget\n  to update PATH & ChocolateyInstall environment variables.\nChocolatey (v0.9.8.24) is installing 'NSSM' and dependencies. By installing you accept the license for 'NSSM' and each d\nependency you are installing.\n'NSSM 2.21.1.0' already installed.\nIf you want to reinstall the current version of an existing package, please use the -force command.\nFinished installing 'NSSM' and dependencies - if errors not shown in console, none detected. Check log for errors if uns\nure.\nunavailableServiceName service will be installed\nnssm install installServiceTest \"C:\\installChocolateyServiceTest\\testService.bat\"\nError creating service!\n[+]    should return an error 12ms\n  When createServiceCommand is incorrect\nThe default install location has been changed to 'C:\\ProgramData\\chocolatey'.\n  This install will be updated to that location in the next version. It\n  is strongly suggested you move this installation to the new location\n  as soon as possible to limit write access from all users. Do not forget\n  to update PATH & ChocolateyInstall environment variables.\nChocolatey (v0.9.8.24) is installing 'NSSM' and dependencies. By installing you accept the license for 'NSSM' and each d\nependency you are installing.\n'NSSM 2.21.1.0' already installed.\nIf you want to reinstall the current version of an existing package, please use the -force command.\nFinished installing 'NSSM' and dependencies - if errors not shown in console, none detected. Check log for errors if uns\nure.\ninstallServiceTest service already exists and will be removed\n__GENUS          : 2\n__CLASS          : __PARAMETERS\n__SUPERCLASS     :\n__DYNASTY        : __PARAMETERS\n__RELPATH        :\n__PROPERTY_COUNT : 1\n__DERIVATION     : {}\n__SERVER         :\n__NAMESPACE      :\n__PATH           :\nReturnValue      : 0\nPSComputerName   :\ninstallServiceTest service will be installed\nunavailableServiceName \"C:\\installChocolateyServiceTest\\testService.bat\"\n[+]    should return an error 14ms\nRemove test directory after finishing testing\nTests completed in 1.58s\nPassed: 10 Failed: 0\n``\n. At the moment the createServiceCommand needs to be a valid command. I have tried to add more options to this, but the destinction between the services I would like to create using the Install-ChocolateyService is too large, e.g. apacheds (NSSM + two options), dcm4chee (NSSM + 1 option), tomcatzip (native service.bat) and postgresqlzip (native service.bat). Should I add more examples regarding the creation of a service?\n. @ferventcoder Real live examples have been added\n. Could you specify the label? What does 0-triaging mean in this case? Does it mean that this feature will be dropped or implemented soon?\n. @gep13 Thank you for the explanation\n. If no port is specified the service will not be started as TRUE will be returned\n. The port is optional. E.g. PostgreSQL, DCM4CHEE, Tomcat, JBoss require that ports are available. The script installs a Windows service indeed.\n. ShouldInstall-ChocolateyServicebe renamed toInstall-WindowsService?\n. How to create the alias using powershell? Usingset-aliasin some file?set-alias Install-ChocolateyArchivePackage path/to/Install-ChocolateyArchivePackage.ps1orfunction Install-ChocolateyArchivePackage { Install-ChocolateyArchivePackage }?\n. alias has been created\n. Ok. I will check that Q&A. Thank you.\n. Puttingset-alias Install-ChocolateyArchivePackage Install-ChocolateyZipPackage` at the end of the file solves the issue. I will commit the change ASAP.\n. AKA created\n. @jberezanski Exporting the alias has been implemented as it became clear during testing that setting an alias was insufficient and exporting is required as well. Thank you for the advice.\n. Should a new pull request be created? GH-506 has been created for another feature.\n. Ok. Thank you for the explanation. This ticket could be closed.\n. @gep13 It seems that the Install-ChocolateyShortcut.ps1 does not reside in the \"C:\\Chocolatey\\chocolateyinstall\\functions\" path (0.9.27). Will this function become available in the next release of Chocolatey? Could this function prevent conflicts between executables of different packages, e.g. eclipse vs. eclipse android. \nWhen Install-ChocolateyPinnedTaskBarItem or Install-ChocolateyDesktopLink is used there is a conflict between eclipse.exe of both packages. \nDoes the Install-ChocolateyShortcut.ps1 support passing arrays instead of string, e.g. \nInstall-ChocolateyShortcut one.exe, two.exe \ninstead of \nInstall-ChocolateyShortcut one.exe \nInstall-ChocolateyShortcut two.exe\n?\n. Could you indicate whether the IP 10.200.2.2 is correct? http://superuser.com/questions/794247/how-to-change-the-default-using-this-proxyserver-127-0-0-18888\n. 4.4.1 > 4.402, but according the https://chocolatey.org it is not\n. # chocolateyInstall.ps1\n```\n$packageName = '{{PackageName}}'\n$packageVersion = '{{PackageVersion}}'\n$32BitUrl = '{{DownloadUrl}}'\n$64BitUrl = '{{DownloadUrlx64}}'\n$extractionPath = \"c:\\Program Files\\Eclipse Foundation\\$packageVersion\"\nInstall-ChocolateyZipPackage \"$packageName\" \"$32BitUrl\" \"$extractionPath\" \"$64BitUrl\"\n```\nI was trying to overwrite the parameter $extractionPath while installing the package\n. This works. Thank you. \nWould it be possible to create a function or something? I would like to use this for multiple packages. Is it possible to include this function in InstallChocolatey.ps1. What is your opinion regarding this?\nIf the installDir is overwritten then an issue could occur if the package will be uninstalled as the uninstallChocolatey function contains the default installDirectory as defined in the installChocolatey\n. For example, when an installer is run in Windows it is possible to define a installDirectory that is registered in the registry. Once the uninstaller is run, the installDiretory will be found in the registry and the package will be removed from that directory.\nIn this situation the installDirectory is modified, but once the uninstallChocolatey,ps1 script runs the default installDirectory will be removed. Should the installDirectory be registered on the system somewhere to avoid this issue?\n. Closed as a solution has been found\n. https://github.com/030/chocolateyautomatic/blob/master/common/Uninstall-ChocolateyZipPackage030.ps1 reads the installationZip file and removes the directory. If a custom path had been chosen this is registered in the file and by reading it the package will be removed from the correct location\n. Closed as a solution has been found\n. If none of the Chocolatey scripts could help, a custom script could be made that can be included in nuspec\n$packageName = '{{PackageName}}'\n. \"$PSScriptRoot\\Uninstall-ChocolateyZipPackage030.ps1\"\nUninstall-ChocolateyZipPackage030 \"$packageName\"\ninclude the file in nuspec\n<files>\n  <file src=\"..\\..\\..\\common\\Uninstall-ChocolateyZipPackage030.ps1\" target=\"tools\\Uninstall-ChocolateyZipPackage030.ps1\" />\n. An issue has been created\n. Close as invalid as it seems to work for other packages.\n. ",
    "tsaddi": "Closing as duplicate; I didn't realise the pull request would make its own issue.\n. Closing as duplicate; I didn't realise the pull request would make its own issue.\n. ",
    "docwhat": "Absolutely you can use Gem::Version yourself. \nBut the code is pretty simple: https://github.com/rubygems/rubygems/blob/fca24a695d2ee3a0bdb9702b752b34d44def6a53/lib/rubygems/requirement.rb#L23\nJust look up how bump and release work to see the details.\nI'd include more but I'm on a phone. \n. Hmmm. Not familiar with the package files you mention. I'm interested for use in the chef cookbook. But I think it'd be nice anyway. \n. Absolutely you can use Gem::Version yourself. \nBut the code is pretty simple: https://github.com/rubygems/rubygems/blob/fca24a695d2ee3a0bdb9702b752b34d44def6a53/lib/rubygems/requirement.rb#L23\nJust look up how bump and release work to see the details.\nI'd include more but I'm on a phone. \n. Hmmm. Not familiar with the package files you mention. I'm interested for use in the chef cookbook. But I think it'd be nice anyway. \n. ",
    "DanyO": "Yep, you're right! this is a dupe, and in the wrong repo.\n. Yep, you're right! this is a dupe, and in the wrong repo.\n. ",
    "JakeGinnivan": "I have written a blog post about this, hopefully it saves you some time in the future. http://jake.ginnivan.net/blog/2014/06/26/updating-chocolateys-release-notes-with-gitreleasenotes/\nWould love feedback at any rate.\n-Jake\n. Hrrm, actually that function is only powershell 3.0. Is there a way to only execute that if the version of powershell is >= 3.0?\n. Ah, sorry about that, didn't even check\n. I have written a blog post about this, hopefully it saves you some time in the future. http://jake.ginnivan.net/blog/2014/06/26/updating-chocolateys-release-notes-with-gitreleasenotes/\nWould love feedback at any rate.\n-Jake\n. Hrrm, actually that function is only powershell 3.0. Is there a way to only execute that if the version of powershell is >= 3.0?\n. Ah, sorry about that, didn't even check\n. ",
    "kjellski": "I've recently come across this too, if you try to update linqpad to the newest actual release, you should install linqpad4, which is in fact another package then linqpad.\n. I've recently come across this too, if you try to update linqpad to the newest actual release, you should install linqpad4, which is in fact another package then linqpad.\n. ",
    "kevinkuszyk": "Thanks all for your help.  When I installed the correct linqpad4 package everything is working again.\n. Thanks all for your help.  When I installed the correct linqpad4 package everything is working again.\n. ",
    "StefanScherer": "I have found another windows machine with chocolatey 0.9.8.23 and there the cinst firefox still works and installs Firefox 30.0.\nI also have contacted the firefox package maintainers, perhaps they could fix it.\nFor me, I probably switch to Chrome, as a cinst GoogleChrome works with 0.9.8.24 ;-)\n. Thanks of fixing and clearing all details! Keep up the good work.\n. I have found another windows machine with chocolatey 0.9.8.23 and there the cinst firefox still works and installs Firefox 30.0.\nI also have contacted the firefox package maintainers, perhaps they could fix it.\nFor me, I probably switch to Chrome, as a cinst GoogleChrome works with 0.9.8.24 ;-)\n. Thanks of fixing and clearing all details! Keep up the good work.\n. ",
    "vbsql7": "I am having this problem trying to install uru from package uru.0.7.7.nupkg found at https://bitbucket.org/jonforums/uru/wiki/Downloads\n. I downloaded the nupkg file from here and tried to install it locally using choco install 'package name' and got the error:  'Cannot bind argument to parameter 'Path' because it is an empty string'\nChocolatey 'install' failure. This is on Windows 7 64 bit.\n. Thanks, guys. I tried again with a fresh install of Chocolaty and the installation of uru seemed to run without errors this time. The first time above was in the middle of a day when I was trying to install and learn 7 different things, so who knows what my problem was. :)\n. I am having this problem trying to install uru from package uru.0.7.7.nupkg found at https://bitbucket.org/jonforums/uru/wiki/Downloads\n. I downloaded the nupkg file from here and tried to install it locally using choco install 'package name' and got the error:  'Cannot bind argument to parameter 'Path' because it is an empty string'\nChocolatey 'install' failure. This is on Windows 7 64 bit.\n. Thanks, guys. I tried again with a fresh install of Chocolaty and the installation of uru seemed to run without errors this time. The first time above was in the middle of a day when I was trying to install and learn 7 different things, so who knows what my problem was. :)\n. ",
    "avdv": "\nwhat OS are you running this on - Win7 or older, by any chance?\n\nYes, I'm on Windows 7.\n. > what OS are you running this on - Win7 or older, by any chance?\nYes, I'm on Windows 7.\n. ",
    "brettporter": "Yes, completely clean setup of the latest in that directory. Looking closer at the powershell functions now, I can see that other sources for uninstall have not been implemented (as they have for install and list).\n. Yes, completely clean setup of the latest in that directory. Looking closer at the powershell functions now, I can see that other sources for uninstall have not been implemented (as they have for install and list).\n. ",
    "jdulay": "Ok.  I tried the single quotes to the same effect.  The debug output is below.  Please let me know if there is anything else i can do to help troubleshoot.  Thanks for looking into this.\nPS C:\\Windows\\system32> choco -debug install myPackage -source ''https://www.myget.org/F/xyz/;http://chocolatey.org/api/v2/''\nDEBUG: Running 'Append-InstallLog' with chocoInstallLog:''\nDEBUG: Arguments: $command = 'install'|$force=False\n|$prerelease=False|$packageNames='myPackage'\n|$source='https://www.myget.org/F/xyz/'\n|$version=''|$allVersions=False\n|$overrideArguments=False|$InstallArguments=''\n|$localonly=False|$verbosity=False|$debug=True|$quiet=False\n|$name=''|$ignoreDependencies=False|$forceX86=False\n|$packageParameters=''\n|PowerShellVersion=4.0|OSVersion=6.3.9600.0\nDEBUG: Running 'Chocolatey-Install' for 'myPackage' with \nsource: 'https://www.myget.org/F/xyz/', version: '', \ninstallerArguments:''\nDEBUG: Running 'Chocolatey-NuGet' for myPackage with \nsource:'https://www.myget.org/F/xyz/'. Force? False\nChocolatey (v0.9.8.27) is installing 'myPackage' and dependencies. By installing you accept the license for 'myPackage' and each depe\nndency you are installing.\nDEBUG: Installing packages to \"C:\\ProgramData\\chocolatey\\lib\".\nDEBUG: Running 'Run-NuGet' for myPackage with source: \n'https://www.myget.org/F/xyz/', version:''\nDEBUG:  NuGet _\nDEBUG: Using '-Source \"https://www.myget.org/F/xyz/\"' as the source \narguments\nDEBUG: Calling 'C:\\ProgramData\\chocolatey\\chocolateyinstall\\nuget.exe' install \nmyPackage -OutputDirectory \"C:\\ProgramData\\chocolatey\\lib\" \n-Source \"https://www.myget.org/F/xyz/\" -NonInteractive -NoCache\nDEBUG: Using credentials from config. UserName: jdulay\nAttempting to resolve dependency 'VirtualCloneDrive (\u00f2 5.4.7.0)'.\nAttempting to resolve dependency 'xyz.Sumologic (\u00f2 19.67.10)'.\nAttempting to resolve dependency 'xyz.grppolicyconfig (\u00f2 1.0.0.0)'.\nAttempting to resolve dependency 'xyz.winGrpPolicyMgmt (\u00f2 1.0.0.0)'.\nAttempting to resolve dependency 'xyz.iis80config (\u00f2 1.0.0.0)'.\nAttempting to resolve dependency 'xyz.iis80 (\u00f2 8.0)'.\nUnable to resolve dependency 'xyz.iis80 (\u00f2 8.0)'.\nCommand 'install' failed (sometimes this indicates a partial failure). Additional info/packages: myPackage\nDEBUG: Exiting with non-zero exit code.\nhttp://chocolatey.org/api/v2/ : The term 'http://chocolatey.org/api/v2/' is not recognized as the name of a cmdlet, function, script file, or operable program. Check \nthe spelling of the name, or if a path was included, verify that the path is correct and try again.\nAt line:1 char:95\n- ... g/F/xyz/;http://chocolatey.org/api/v2/''\n-                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  - CategoryInfo          : ObjectNotFound: (http://chocolatey.org/api/v2/:String) [], CommandNotFoundException\n  - FullyQualifiedErrorId : CommandNotFoundException\n. Ok.  I tried the single quotes to the same effect.  The debug output is below.  Please let me know if there is anything else i can do to help troubleshoot.  Thanks for looking into this.\nPS C:\\Windows\\system32> choco -debug install myPackage -source ''https://www.myget.org/F/xyz/;http://chocolatey.org/api/v2/''\nDEBUG: Running 'Append-InstallLog' with chocoInstallLog:''\nDEBUG: Arguments: $command = 'install'|$force=False\n|$prerelease=False|$packageNames='myPackage'\n|$source='https://www.myget.org/F/xyz/'\n|$version=''|$allVersions=False\n|$overrideArguments=False|$InstallArguments=''\n|$localonly=False|$verbosity=False|$debug=True|$quiet=False\n|$name=''|$ignoreDependencies=False|$forceX86=False\n|$packageParameters=''\n|PowerShellVersion=4.0|OSVersion=6.3.9600.0\nDEBUG: Running 'Chocolatey-Install' for 'myPackage' with \nsource: 'https://www.myget.org/F/xyz/', version: '', \ninstallerArguments:''\nDEBUG: Running 'Chocolatey-NuGet' for myPackage with \nsource:'https://www.myget.org/F/xyz/'. Force? False\nChocolatey (v0.9.8.27) is installing 'myPackage' and dependencies. By installing you accept the license for 'myPackage' and each depe\nndency you are installing.\nDEBUG: Installing packages to \"C:\\ProgramData\\chocolatey\\lib\".\nDEBUG: Running 'Run-NuGet' for myPackage with source: \n'https://www.myget.org/F/xyz/', version:''\nDEBUG:  NuGet _\nDEBUG: Using '-Source \"https://www.myget.org/F/xyz/\"' as the source \narguments\nDEBUG: Calling 'C:\\ProgramData\\chocolatey\\chocolateyinstall\\nuget.exe' install \nmyPackage -OutputDirectory \"C:\\ProgramData\\chocolatey\\lib\" \n-Source \"https://www.myget.org/F/xyz/\" -NonInteractive -NoCache\nDEBUG: Using credentials from config. UserName: jdulay\nAttempting to resolve dependency 'VirtualCloneDrive (\u00f2 5.4.7.0)'.\nAttempting to resolve dependency 'xyz.Sumologic (\u00f2 19.67.10)'.\nAttempting to resolve dependency 'xyz.grppolicyconfig (\u00f2 1.0.0.0)'.\nAttempting to resolve dependency 'xyz.winGrpPolicyMgmt (\u00f2 1.0.0.0)'.\nAttempting to resolve dependency 'xyz.iis80config (\u00f2 1.0.0.0)'.\nAttempting to resolve dependency 'xyz.iis80 (\u00f2 8.0)'.\nUnable to resolve dependency 'xyz.iis80 (\u00f2 8.0)'.\nCommand 'install' failed (sometimes this indicates a partial failure). Additional info/packages: myPackage\nDEBUG: Exiting with non-zero exit code.\nhttp://chocolatey.org/api/v2/ : The term 'http://chocolatey.org/api/v2/' is not recognized as the name of a cmdlet, function, script file, or operable program. Check \nthe spelling of the name, or if a path was included, verify that the path is correct and try again.\nAt line:1 char:95\n- ... g/F/xyz/;http://chocolatey.org/api/v2/''\n-                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  - CategoryInfo          : ObjectNotFound: (http://chocolatey.org/api/v2/:String) [], CommandNotFoundException\n  - FullyQualifiedErrorId : CommandNotFoundException\n. ",
    "FransBouma": "I don't think I understand what you're saying. I tried cpack -Version  and it didn't pass it on to nuget.exe, (it used the version in the nuspec file). Using nuget.exe with the arguments passed by cpack worked fine. \n. ah... I think I understand. when I did cpack /?, I saw the nuget help, not the cpack help :) Understood. So until it's implemented (if planned), cpack doesn't support -Version, if it's required to use -Version, use nuget pack instead. \n. I don't think I understand what you're saying. I tried cpack -Version  and it didn't pass it on to nuget.exe, (it used the version in the nuspec file). Using nuget.exe with the arguments passed by cpack worked fine. \n. ah... I think I understand. when I did cpack /?, I saw the nuget help, not the cpack help :) Understood. So until it's implemented (if planned), cpack doesn't support -Version, if it's required to use -Version, use nuget pack instead. \n. ",
    "tedsanders": "Thanks for the replies! If I'm not mistaken, in standard Windows command prompt, Ctrl+V does not paste. So I didn't know how to paste the code and ended up typing it all out without knowing any better (that I could right click). Maybe this isn't an issue for most users.\n. Thanks for the replies! If I'm not mistaken, in standard Windows command prompt, Ctrl+V does not paste. So I didn't know how to paste the code and ended up typing it all out without knowing any better (that I could right click). Maybe this isn't an issue for most users.\n. ",
    "SamuelDebruyn": "I tried uninstalling and installing again but that didn't fix it. Now I'm left with no Atom editor at all...\n. ```\nDEBUG: Running 'Append-InstallLog' with chocoInstallLog:''\nDEBUG: Arguments: $command = 'install'|$force=True\n|$prerelease=False|$packageNames='atom'\n|$source=''\n|$version=''|$allVersions=False\n|$overrideArguments=False|$InstallArguments=''\n|$localonly=False|$verbosity=False|$debug=True|$quiet=False\n|$name=''|$ignoreDependencies=False|$forceX86=False\n|$packageParameters=''\n|PowerShellVersion=4.0|OSVersion=6.3.9600.0\nDEBUG: Running 'Chocolatey-Install' for 'atom' with source: '', version: '', installerArguments:''\nDEBUG: Running 'Chocolatey-NuGet' for atom with source:''. Force? True\nChocolatey (v0.9.8.27) is installing 'atom' and dependencies. By installing you accept the license for 'atom' and each dependency you are installing.\nDEBUG: Installing packages to \"C:\\Programs\\chocolatey\\lib\".\nDEBUG: Running 'Run-NuGet' for atom with source: '', version:''\nDEBUG:  NuGet _\nDEBUG: Running 'Get-ConfigValue' with configValue:'useNuGetForSources'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'useNuGetForSources'\nDEBUG: After checking the user config the value of 'useNuGetForSources' is ''\nDEBUG: Value not found in the user config file - checking the global config\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'useNuGetForSources'\nDEBUG: After checking the global config the value of 'useNuGetForSources' is 'false'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'sources'\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'sources'\nDEBUG: Using global sources\nDEBUG: Using '-Source \"https://chocolatey.org/api/v2/;\"' as the source arguments\nDEBUG: Calling 'C:\\Programs\\chocolatey\\chocolateyinstall\\nuget.exe' install atom -OutputDirectory \"C:\\Programs\\chocolatey\\lib\" -Source \n\"https://chocolatey.org/api/v2/;\" -NonInteractive -NoCache\nDEBUG: Installing 'Atom 0.119.0'.\nSuccessfully installed 'Atom 0.119.0'.\nDEBUG: Evaluating NuGet output for line: Installing 'Atom 0.119.0'.\nDEBUG: Evaluating NuGet output for line: Successfully installed 'Atom 0.119.0'.\nDEBUG: NuGet installed Atom. If we are ignoring dependencies (False) then we will clean this up.\nAtom v0.119.0\nDEBUG: Running 'Delete-ExistingErrorLog' for Atom\nDEBUG: Looking for failure log at 'C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\failure.log'\nDEBUG: Found the failure log. Deleting it...\nDEBUG: Running 'Run-ChocolateyPS1' for Atom with packageFolder:'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0', action: 'install'\nDEBUG:    PowerShell install (chocolateyinstall.ps1) \nDEBUG:   Looking for chocolateyinstall.ps1 in folder 'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0'. If chocolateyinstall.ps1 is found, it will be run.\nDEBUG: Action file is 'chocolateyInstall.ps1'\nDEBUG: Running 'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0\\tools\\chocolateyInstall.ps1'\nDEBUG: Running 'Install-ChocolateyZipPackage' for Atom with url:'https://github.com/atom/atom/releases/download/v0.119.0/atom-windows.zip', unzipLocation: \n'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0\\tools', url64bit: 'https://github.com/atom/atom/releases/download/v0.119.0/atom-windows.zip', specificFolder: '', \nchecksum: '', checksumType: '', checksum64: '', checksumType64: '' \nDEBUG: Running 'Get-ChocolateyWebFile' for Atom with url:'https://github.com/atom/atom/releases/download/v0.119.0/atom-windows.zip', \nfileFullPath:'C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\AtomInstall.zip', \nurl64bit:'https://github.com/atom/atom/releases/download/v0.119.0/atom-windows.zip', checksum: '', checksumType: '', checksum64: '', checksumType64: ''\nDEBUG: Running 'Get-ProcessorBits'\nDEBUG: CPU is 64 bit\nDEBUG: Setting url to 'https://github.com/atom/atom/releases/download/v0.119.0/atom-windows.zip' and bitPackage to 64\nDEBUG: Running 'Get-WebHeaders' with url:'https://github.com/atom/atom/releases/download/v0.119.0/atom-windows.zip', userAgent: 'chocolatey command line'\nDEBUG: Setting the UserAgent to 'chocolatey command line'\nDEBUG: Web Headers Received:\nDEBUG:   'x-amz-id-2':'Z7/wv+KMX+geaXAyC4urGhjXhTsW4k/jwMcIGrg2hYnyzO6gwRX8uN1WpFbh1UE4'\nDEBUG:   'x-amz-request-id':'B2ACC242189911CD'\nDEBUG:   'x-amz-meta-surrogate-control':'max-age=31557600'\nDEBUG:   'x-amz-meta-surrogate-key':'repository-3228505 user-3697332'\nDEBUG:   'Content-Disposition':'attachment; filename=atom-windows.zip'\nDEBUG:   'Accept-Ranges':'bytes'\nDEBUG:   'Content-Length':'65003553'\nDEBUG:   'Cache-Control':'max-age=31557600'\nDEBUG:   'Content-Type':'application/octet-stream'\nDEBUG:   'Date':'Sat, 26 Jul 2014 18:55:23 GMT'\nDEBUG:   'ETag':'\"0ff6f320de113a93bfb361e119bbecbe\"'\nDEBUG:   'Last-Modified':'Fri, 25 Jul 2014 15:58:34 GMT'\nDEBUG:   'Server':'AmazonS3'\nDEBUG: Atom's requested file has already been downloaded. Using cached copy at\n  'C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\AtomInstall.zip'.\nDEBUG: Checking that 'C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\AtomInstall.zip' is the size we expect it to be.\nDEBUG: Verifying package provided checksum of '' for 'C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\AtomInstall.zip'.\nDEBUG: Running 'Get-CheckSumValid' with file:'C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\AtomInstall.zip', checksum: '', checksumType: ''\nDEBUG: Running 'Get-ChocolateyUnzip' with fileFullPath:'C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\AtomInstall.zip'', destination: \n'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0\\tools', specificFolder: '`, packageName: 'Atom'\nExtracting C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\AtomInstall.zip to C:\\Programs\\chocolatey\\lib\\Atom.0.119.0\\tools...\nDEBUG: wrapping 7za invocation with Write-FileUpdateLog\nDEBUG: Running 'Write-FileUpdateLog' with logFilePath:'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0\\AtomInstall.zip.txt'', \nlocationToMonitor:C:\\Programs\\chocolatey\\lib\\Atom.0.119.0\\tools, Operation: '\nparam($7zip, $destination, $fileFullPath, [ref]$exitCodeRef)\n\n$process = Start-Process $7zip -ArgumentList \"x -o`\"$destination`\" -y `\"$fileFullPath`\"\" -Wait -WindowStyle Hidden -PassThru\n\n# this is here for specific cases in Posh v3 where -Wait is not honored\n\ntry { if (!($process.HasExited)) { Wait-Process $process } } catch { }\n\n\n\n$exitCodeRef.Value = $process.ExitCode\n\n'\nDEBUG: Tracking current state of 'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0\\tools'\nWrite-Error : Atom did not finish successfully. Boo to the chocolatey gods!\n\n[ERROR] This command cannot be run due to the error: Het systeem kan het opgegeven bestand niet vinden.\nAt C:\\Programs\\chocolatey\\chocolateyinstall\\helpers\\functions\\Write-ChocolateyFailure.ps1:30 char:3\n+   Write-Error $errorMessage\n+   ~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nDEBUG: Running 'Move-BadInstall' for Atom version: '0.119.0', packageFolder:'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0'\nDEBUG: Moving bad package 'Atom v0.119.0' to 'C:\\Programs\\chocolatey\\lib-bad'.\nWrite-Error : Package 'Atom v0.119.0' did not install successfully: This command cannot be run due to the error: Het systeem kan het opgegeven bestand niet vinde\nn.\nAt C:\\Programs\\chocolatey\\chocolateyinstall\\functions\\Chocolatey-NuGet.ps1:90 char:17\n+                 Write-Error \"Package `'$installedPackageName v$installedPackageV ...\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nDEBUG: Evaluating NuGet output for line: \nFinished installing 'atom' and dependencies - if errors not shown in console, none detected. Check log for errors if unsure.\n```\n. Same issue, every install/update seems to fail by the way. I just installed chocolatey a week ago and all I've done past week is Windows Store app development in VS 2013.\n```\nDEBUG: Running 'Append-InstallLog' with chocoInstallLog:''\nDEBUG: Arguments: $command = 'install'|$force=True\n|$prerelease=False|$packageNames='atom'\n|$source=''\n|$version=''|$allVersions=False\n|$overrideArguments=False|$InstallArguments=''\n|$localonly=False|$verbosity=False|$debug=True|$quiet=False\n|$name=''|$ignoreDependencies=False|$forceX86=False\n|$packageParameters=''\n|PowerShellVersion=4.0|OSVersion=6.3.9600.0\nDEBUG: Running 'Chocolatey-Install' for 'atom' with source: '', version: '', installerArguments:''\nDEBUG: Running 'Chocolatey-NuGet' for atom with source:''. Force? True\nChocolatey (v0.9.8.27) is installing 'atom' and dependencies. By installing you accept the license for 'atom' and each dependency you are installing.\nDEBUG: Installing packages to \"C:\\Programs\\chocolatey\\lib\".\nDEBUG: Running 'Run-NuGet' for atom with source: '', version:''\nDEBUG:  NuGet _\nDEBUG: Running 'Get-ConfigValue' with configValue:'useNuGetForSources'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'useNuGetForSources'\nDEBUG: After checking the user config the value of 'useNuGetForSources' is ''\nDEBUG: Value not found in the user config file - checking the global config\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'useNuGetForSources'\nDEBUG: After checking the global config the value of 'useNuGetForSources' is 'false'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'sources'\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'sources'\nDEBUG: Using global sources\nDEBUG: Using '-Source \"https://chocolatey.org/api/v2/;\"' as the source arguments\nDEBUG: Calling 'C:\\Programs\\chocolatey\\chocolateyinstall\\nuget.exe' install atom -OutputDirectory \"C:\\Programs\\chocolatey\\lib\" -Source \n\"https://chocolatey.org/api/v2/;\" -NonInteractive -NoCache\nDEBUG: Installing 'Atom 0.119.0'.\nSuccessfully installed 'Atom 0.119.0'.\nDEBUG: Evaluating NuGet output for line: Installing 'Atom 0.119.0'.\nDEBUG: Evaluating NuGet output for line: Successfully installed 'Atom 0.119.0'.\nDEBUG: NuGet installed Atom. If we are ignoring dependencies (False) then we will clean this up.\nAtom v0.119.0\nDEBUG: Running 'Delete-ExistingErrorLog' for Atom\nDEBUG: Looking for failure log at 'C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\failure.log'\nDEBUG: Running 'Run-ChocolateyPS1' for Atom with packageFolder:'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0', action: 'install'\nDEBUG:    PowerShell install (chocolateyinstall.ps1) \nDEBUG:   Looking for chocolateyinstall.ps1 in folder 'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0'. If chocolateyinstall.ps1 is found, it will be run.\nDEBUG: Action file is 'chocolateyInstall.ps1'\nDEBUG: Running 'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0\\tools\\chocolateyInstall.ps1'\nDEBUG: Running 'Install-ChocolateyZipPackage' for Atom with url:'https://github.com/atom/atom/releases/download/v0.119.0/atom-windows.zip', unzipLocation: \n'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0\\tools', url64bit: 'https://github.com/atom/atom/releases/download/v0.119.0/atom-windows.zip', specificFolder: '', \nchecksum: '', checksumType: '', checksum64: '', checksumType64: '' \nDEBUG: Running 'Get-ChocolateyWebFile' for Atom with url:'https://github.com/atom/atom/releases/download/v0.119.0/atom-windows.zip', \nfileFullPath:'C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\AtomInstall.zip', \nurl64bit:'https://github.com/atom/atom/releases/download/v0.119.0/atom-windows.zip', checksum: '', checksumType: '', checksum64: '', checksumType64: ''\nDEBUG: Running 'Get-ProcessorBits'\nDEBUG: CPU is 64 bit\nDEBUG: Setting url to 'https://github.com/atom/atom/releases/download/v0.119.0/atom-windows.zip' and bitPackage to 64\nDEBUG: Running 'Get-WebHeaders' with url:'https://github.com/atom/atom/releases/download/v0.119.0/atom-windows.zip', userAgent: 'chocolatey command line'\nDEBUG: Setting the UserAgent to 'chocolatey command line'\nDEBUG: Web Headers Received:\nDEBUG:   'x-amz-id-2':'a7vs2MfOdxhyfJjSatcmXkorQAw9AmMtV8gZiSXP/RWy9SvmUUnMOoc50iwZOb6S'\nDEBUG:   'x-amz-request-id':'753744D9E1241FD8'\nDEBUG:   'x-amz-meta-surrogate-control':'max-age=31557600'\nDEBUG:   'x-amz-meta-surrogate-key':'repository-3228505 user-3697332'\nDEBUG:   'Content-Disposition':'attachment; filename=atom-windows.zip'\nDEBUG:   'Accept-Ranges':'bytes'\nDEBUG:   'Content-Length':'65003553'\nDEBUG:   'Cache-Control':'max-age=31557600'\nDEBUG:   'Content-Type':'application/octet-stream'\nDEBUG:   'Date':'Sat, 26 Jul 2014 22:08:46 GMT'\nDEBUG:   'ETag':'\"0ff6f320de113a93bfb361e119bbecbe\"'\nDEBUG:   'Last-Modified':'Fri, 25 Jul 2014 15:58:34 GMT'\nDEBUG:   'Server':'AmazonS3'\nDownloading Atom 64 bit\n  from 'https://github.com/atom/atom/releases/download/v0.119.0/atom-windows.zip'\nDEBUG: Running 'Get-WebFile' for C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\AtomInstall.zip with \nurl:'https://github.com/atom/atom/releases/download/v0.119.0/atom-windows.zip', userAgent: 'chocolatey command line' \nDEBUG: Setting the UserAgent to 'chocolatey command line'\nDEBUG: Checking that 'C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\AtomInstall.zip' is the size we expect it to be.\nDEBUG: Verifying package provided checksum of '' for 'C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\AtomInstall.zip'.\nDEBUG: Running 'Get-CheckSumValid' with file:'C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\AtomInstall.zip', checksum: '', checksumType: ''\nDEBUG: Running 'Get-ChocolateyUnzip' with fileFullPath:'C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\AtomInstall.zip'', destination: \n'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0\\tools', specificFolder: '`, packageName: 'Atom'\nExtracting C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\AtomInstall.zip to C:\\Programs\\chocolatey\\lib\\Atom.0.119.0\\tools...\nDEBUG: wrapping 7za invocation with Write-FileUpdateLog\nDEBUG: Running 'Write-FileUpdateLog' with logFilePath:'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0\\AtomInstall.zip.txt'', \nlocationToMonitor:C:\\Programs\\chocolatey\\lib\\Atom.0.119.0\\tools, Operation: '\nparam($7zip, $destination, $fileFullPath, [ref]$exitCodeRef)\n\n$process = Start-Process $7zip -ArgumentList \"x -o`\"$destination`\" -y `\"$fileFullPath`\"\" -Wait -WindowStyle Hidden -PassThru\n\n# this is here for specific cases in Posh v3 where -Wait is not honored\n\ntry { if (!($process.HasExited)) { Wait-Process $process } } catch { }\n\n\n\n$exitCodeRef.Value = $process.ExitCode\n\n'\nDEBUG: Tracking current state of 'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0\\tools'\nWrite-Error : Atom did not finish successfully. Boo to the chocolatey gods!\n\n[ERROR] This command cannot be run due to the error: Het systeem kan het opgegeven bestand niet vinden.\nAt C:\\Programs\\chocolatey\\chocolateyinstall\\helpers\\functions\\Write-ChocolateyFailure.ps1:30 char:3\n+   Write-Error $errorMessage\n+   ~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nDEBUG: Running 'Move-BadInstall' for Atom version: '0.119.0', packageFolder:'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0'\nDEBUG: Moving bad package 'Atom v0.119.0' to 'C:\\Programs\\chocolatey\\lib-bad'.\nWrite-Error : Package 'Atom v0.119.0' did not install successfully: This command cannot be run due to the error: Het systeem kan het opgegeven bestand niet vinde\nn.\nAt C:\\Programs\\chocolatey\\chocolateyinstall\\functions\\Chocolatey-NuGet.ps1:90 char:17\n+                 Write-Error \"Package `'$installedPackageName v$installedPackageV ...\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nDEBUG: Evaluating NuGet output for line: \nFinished installing 'atom' and dependencies - if errors not shown in console, none detected. Check log for errors if unsure.\n. I'm sorry, I just uninstalled chocolatey. I'll let you know if these errors reoccur when I would reinstall chocolatey.\n. I tried uninstalling and installing again but that didn't fix it. Now I'm left with no Atom editor at all...\n.\nDEBUG: Running 'Append-InstallLog' with chocoInstallLog:''\nDEBUG: Arguments: $command = 'install'|$force=True\n|$prerelease=False|$packageNames='atom'\n|$source=''\n|$version=''|$allVersions=False\n|$overrideArguments=False|$InstallArguments=''\n|$localonly=False|$verbosity=False|$debug=True|$quiet=False\n|$name=''|$ignoreDependencies=False|$forceX86=False\n|$packageParameters=''\n|PowerShellVersion=4.0|OSVersion=6.3.9600.0\nDEBUG: Running 'Chocolatey-Install' for 'atom' with source: '', version: '', installerArguments:''\nDEBUG: Running 'Chocolatey-NuGet' for atom with source:''. Force? True\nChocolatey (v0.9.8.27) is installing 'atom' and dependencies. By installing you accept the license for 'atom' and each dependency you are installing.\nDEBUG: Installing packages to \"C:\\Programs\\chocolatey\\lib\".\nDEBUG: Running 'Run-NuGet' for atom with source: '', version:''\nDEBUG:  NuGet _\nDEBUG: Running 'Get-ConfigValue' with configValue:'useNuGetForSources'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'useNuGetForSources'\nDEBUG: After checking the user config the value of 'useNuGetForSources' is ''\nDEBUG: Value not found in the user config file - checking the global config\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'useNuGetForSources'\nDEBUG: After checking the global config the value of 'useNuGetForSources' is 'false'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'sources'\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'sources'\nDEBUG: Using global sources\nDEBUG: Using '-Source \"https://chocolatey.org/api/v2/;\"' as the source arguments\nDEBUG: Calling 'C:\\Programs\\chocolatey\\chocolateyinstall\\nuget.exe' install atom -OutputDirectory \"C:\\Programs\\chocolatey\\lib\" -Source \n\"https://chocolatey.org/api/v2/;\" -NonInteractive -NoCache\nDEBUG: Installing 'Atom 0.119.0'.\nSuccessfully installed 'Atom 0.119.0'.\nDEBUG: Evaluating NuGet output for line: Installing 'Atom 0.119.0'.\nDEBUG: Evaluating NuGet output for line: Successfully installed 'Atom 0.119.0'.\nDEBUG: NuGet installed Atom. If we are ignoring dependencies (False) then we will clean this up.\nAtom v0.119.0\nDEBUG: Running 'Delete-ExistingErrorLog' for Atom\nDEBUG: Looking for failure log at 'C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\failure.log'\nDEBUG: Found the failure log. Deleting it...\nDEBUG: Running 'Run-ChocolateyPS1' for Atom with packageFolder:'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0', action: 'install'\nDEBUG:    PowerShell install (chocolateyinstall.ps1) \nDEBUG:   Looking for chocolateyinstall.ps1 in folder 'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0'. If chocolateyinstall.ps1 is found, it will be run.\nDEBUG: Action file is 'chocolateyInstall.ps1'\nDEBUG: Running 'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0\\tools\\chocolateyInstall.ps1'\nDEBUG: Running 'Install-ChocolateyZipPackage' for Atom with url:'https://github.com/atom/atom/releases/download/v0.119.0/atom-windows.zip', unzipLocation: \n'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0\\tools', url64bit: 'https://github.com/atom/atom/releases/download/v0.119.0/atom-windows.zip', specificFolder: '', \nchecksum: '', checksumType: '', checksum64: '', checksumType64: '' \nDEBUG: Running 'Get-ChocolateyWebFile' for Atom with url:'https://github.com/atom/atom/releases/download/v0.119.0/atom-windows.zip', \nfileFullPath:'C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\AtomInstall.zip', \nurl64bit:'https://github.com/atom/atom/releases/download/v0.119.0/atom-windows.zip', checksum: '', checksumType: '', checksum64: '', checksumType64: ''\nDEBUG: Running 'Get-ProcessorBits'\nDEBUG: CPU is 64 bit\nDEBUG: Setting url to 'https://github.com/atom/atom/releases/download/v0.119.0/atom-windows.zip' and bitPackage to 64\nDEBUG: Running 'Get-WebHeaders' with url:'https://github.com/atom/atom/releases/download/v0.119.0/atom-windows.zip', userAgent: 'chocolatey command line'\nDEBUG: Setting the UserAgent to 'chocolatey command line'\nDEBUG: Web Headers Received:\nDEBUG:   'x-amz-id-2':'Z7/wv+KMX+geaXAyC4urGhjXhTsW4k/jwMcIGrg2hYnyzO6gwRX8uN1WpFbh1UE4'\nDEBUG:   'x-amz-request-id':'B2ACC242189911CD'\nDEBUG:   'x-amz-meta-surrogate-control':'max-age=31557600'\nDEBUG:   'x-amz-meta-surrogate-key':'repository-3228505 user-3697332'\nDEBUG:   'Content-Disposition':'attachment; filename=atom-windows.zip'\nDEBUG:   'Accept-Ranges':'bytes'\nDEBUG:   'Content-Length':'65003553'\nDEBUG:   'Cache-Control':'max-age=31557600'\nDEBUG:   'Content-Type':'application/octet-stream'\nDEBUG:   'Date':'Sat, 26 Jul 2014 18:55:23 GMT'\nDEBUG:   'ETag':'\"0ff6f320de113a93bfb361e119bbecbe\"'\nDEBUG:   'Last-Modified':'Fri, 25 Jul 2014 15:58:34 GMT'\nDEBUG:   'Server':'AmazonS3'\nDEBUG: Atom's requested file has already been downloaded. Using cached copy at\n  'C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\AtomInstall.zip'.\nDEBUG: Checking that 'C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\AtomInstall.zip' is the size we expect it to be.\nDEBUG: Verifying package provided checksum of '' for 'C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\AtomInstall.zip'.\nDEBUG: Running 'Get-CheckSumValid' with file:'C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\AtomInstall.zip', checksum: '', checksumType: ''\nDEBUG: Running 'Get-ChocolateyUnzip' with fileFullPath:'C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\AtomInstall.zip'', destination: \n'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0\\tools', specificFolder: '`, packageName: 'Atom'\nExtracting C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\AtomInstall.zip to C:\\Programs\\chocolatey\\lib\\Atom.0.119.0\\tools...\nDEBUG: wrapping 7za invocation with Write-FileUpdateLog\nDEBUG: Running 'Write-FileUpdateLog' with logFilePath:'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0\\AtomInstall.zip.txt'', \nlocationToMonitor:C:\\Programs\\chocolatey\\lib\\Atom.0.119.0\\tools, Operation: '\nparam($7zip, $destination, $fileFullPath, [ref]$exitCodeRef)\n\n$process = Start-Process $7zip -ArgumentList \"x -o`\"$destination`\" -y `\"$fileFullPath`\"\" -Wait -WindowStyle Hidden -PassThru\n\n# this is here for specific cases in Posh v3 where -Wait is not honored\n\ntry { if (!($process.HasExited)) { Wait-Process $process } } catch { }\n\n\n\n$exitCodeRef.Value = $process.ExitCode\n\n'\nDEBUG: Tracking current state of 'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0\\tools'\nWrite-Error : Atom did not finish successfully. Boo to the chocolatey gods!\n\n[ERROR] This command cannot be run due to the error: Het systeem kan het opgegeven bestand niet vinden.\nAt C:\\Programs\\chocolatey\\chocolateyinstall\\helpers\\functions\\Write-ChocolateyFailure.ps1:30 char:3\n+   Write-Error $errorMessage\n+   ~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nDEBUG: Running 'Move-BadInstall' for Atom version: '0.119.0', packageFolder:'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0'\nDEBUG: Moving bad package 'Atom v0.119.0' to 'C:\\Programs\\chocolatey\\lib-bad'.\nWrite-Error : Package 'Atom v0.119.0' did not install successfully: This command cannot be run due to the error: Het systeem kan het opgegeven bestand niet vinde\nn.\nAt C:\\Programs\\chocolatey\\chocolateyinstall\\functions\\Chocolatey-NuGet.ps1:90 char:17\n+                 Write-Error \"Package `'$installedPackageName v$installedPackageV ...\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nDEBUG: Evaluating NuGet output for line: \nFinished installing 'atom' and dependencies - if errors not shown in console, none detected. Check log for errors if unsure.\n```\n. Same issue, every install/update seems to fail by the way. I just installed chocolatey a week ago and all I've done past week is Windows Store app development in VS 2013.\n```\nDEBUG: Running 'Append-InstallLog' with chocoInstallLog:''\nDEBUG: Arguments: $command = 'install'|$force=True\n|$prerelease=False|$packageNames='atom'\n|$source=''\n|$version=''|$allVersions=False\n|$overrideArguments=False|$InstallArguments=''\n|$localonly=False|$verbosity=False|$debug=True|$quiet=False\n|$name=''|$ignoreDependencies=False|$forceX86=False\n|$packageParameters=''\n|PowerShellVersion=4.0|OSVersion=6.3.9600.0\nDEBUG: Running 'Chocolatey-Install' for 'atom' with source: '', version: '', installerArguments:''\nDEBUG: Running 'Chocolatey-NuGet' for atom with source:''. Force? True\nChocolatey (v0.9.8.27) is installing 'atom' and dependencies. By installing you accept the license for 'atom' and each dependency you are installing.\nDEBUG: Installing packages to \"C:\\Programs\\chocolatey\\lib\".\nDEBUG: Running 'Run-NuGet' for atom with source: '', version:''\nDEBUG:  NuGet _\nDEBUG: Running 'Get-ConfigValue' with configValue:'useNuGetForSources'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'useNuGetForSources'\nDEBUG: After checking the user config the value of 'useNuGetForSources' is ''\nDEBUG: Value not found in the user config file - checking the global config\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'useNuGetForSources'\nDEBUG: After checking the global config the value of 'useNuGetForSources' is 'false'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'sources'\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'sources'\nDEBUG: Using global sources\nDEBUG: Using '-Source \"https://chocolatey.org/api/v2/;\"' as the source arguments\nDEBUG: Calling 'C:\\Programs\\chocolatey\\chocolateyinstall\\nuget.exe' install atom -OutputDirectory \"C:\\Programs\\chocolatey\\lib\" -Source \n\"https://chocolatey.org/api/v2/;\" -NonInteractive -NoCache\nDEBUG: Installing 'Atom 0.119.0'.\nSuccessfully installed 'Atom 0.119.0'.\nDEBUG: Evaluating NuGet output for line: Installing 'Atom 0.119.0'.\nDEBUG: Evaluating NuGet output for line: Successfully installed 'Atom 0.119.0'.\nDEBUG: NuGet installed Atom. If we are ignoring dependencies (False) then we will clean this up.\nAtom v0.119.0\nDEBUG: Running 'Delete-ExistingErrorLog' for Atom\nDEBUG: Looking for failure log at 'C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\failure.log'\nDEBUG: Running 'Run-ChocolateyPS1' for Atom with packageFolder:'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0', action: 'install'\nDEBUG:    PowerShell install (chocolateyinstall.ps1) \nDEBUG:   Looking for chocolateyinstall.ps1 in folder 'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0'. If chocolateyinstall.ps1 is found, it will be run.\nDEBUG: Action file is 'chocolateyInstall.ps1'\nDEBUG: Running 'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0\\tools\\chocolateyInstall.ps1'\nDEBUG: Running 'Install-ChocolateyZipPackage' for Atom with url:'https://github.com/atom/atom/releases/download/v0.119.0/atom-windows.zip', unzipLocation: \n'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0\\tools', url64bit: 'https://github.com/atom/atom/releases/download/v0.119.0/atom-windows.zip', specificFolder: '', \nchecksum: '', checksumType: '', checksum64: '', checksumType64: '' \nDEBUG: Running 'Get-ChocolateyWebFile' for Atom with url:'https://github.com/atom/atom/releases/download/v0.119.0/atom-windows.zip', \nfileFullPath:'C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\AtomInstall.zip', \nurl64bit:'https://github.com/atom/atom/releases/download/v0.119.0/atom-windows.zip', checksum: '', checksumType: '', checksum64: '', checksumType64: ''\nDEBUG: Running 'Get-ProcessorBits'\nDEBUG: CPU is 64 bit\nDEBUG: Setting url to 'https://github.com/atom/atom/releases/download/v0.119.0/atom-windows.zip' and bitPackage to 64\nDEBUG: Running 'Get-WebHeaders' with url:'https://github.com/atom/atom/releases/download/v0.119.0/atom-windows.zip', userAgent: 'chocolatey command line'\nDEBUG: Setting the UserAgent to 'chocolatey command line'\nDEBUG: Web Headers Received:\nDEBUG:   'x-amz-id-2':'a7vs2MfOdxhyfJjSatcmXkorQAw9AmMtV8gZiSXP/RWy9SvmUUnMOoc50iwZOb6S'\nDEBUG:   'x-amz-request-id':'753744D9E1241FD8'\nDEBUG:   'x-amz-meta-surrogate-control':'max-age=31557600'\nDEBUG:   'x-amz-meta-surrogate-key':'repository-3228505 user-3697332'\nDEBUG:   'Content-Disposition':'attachment; filename=atom-windows.zip'\nDEBUG:   'Accept-Ranges':'bytes'\nDEBUG:   'Content-Length':'65003553'\nDEBUG:   'Cache-Control':'max-age=31557600'\nDEBUG:   'Content-Type':'application/octet-stream'\nDEBUG:   'Date':'Sat, 26 Jul 2014 22:08:46 GMT'\nDEBUG:   'ETag':'\"0ff6f320de113a93bfb361e119bbecbe\"'\nDEBUG:   'Last-Modified':'Fri, 25 Jul 2014 15:58:34 GMT'\nDEBUG:   'Server':'AmazonS3'\nDownloading Atom 64 bit\n  from 'https://github.com/atom/atom/releases/download/v0.119.0/atom-windows.zip'\nDEBUG: Running 'Get-WebFile' for C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\AtomInstall.zip with \nurl:'https://github.com/atom/atom/releases/download/v0.119.0/atom-windows.zip', userAgent: 'chocolatey command line' \nDEBUG: Setting the UserAgent to 'chocolatey command line'\nDEBUG: Checking that 'C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\AtomInstall.zip' is the size we expect it to be.\nDEBUG: Verifying package provided checksum of '' for 'C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\AtomInstall.zip'.\nDEBUG: Running 'Get-CheckSumValid' with file:'C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\AtomInstall.zip', checksum: '', checksumType: ''\nDEBUG: Running 'Get-ChocolateyUnzip' with fileFullPath:'C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\AtomInstall.zip'', destination: \n'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0\\tools', specificFolder: '`, packageName: 'Atom'\nExtracting C:\\Users\\Samuel\\AppData\\Local\\Temp\\chocolatey\\Atom\\AtomInstall.zip to C:\\Programs\\chocolatey\\lib\\Atom.0.119.0\\tools...\nDEBUG: wrapping 7za invocation with Write-FileUpdateLog\nDEBUG: Running 'Write-FileUpdateLog' with logFilePath:'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0\\AtomInstall.zip.txt'', \nlocationToMonitor:C:\\Programs\\chocolatey\\lib\\Atom.0.119.0\\tools, Operation: '\nparam($7zip, $destination, $fileFullPath, [ref]$exitCodeRef)\n\n$process = Start-Process $7zip -ArgumentList \"x -o`\"$destination`\" -y `\"$fileFullPath`\"\" -Wait -WindowStyle Hidden -PassThru\n\n# this is here for specific cases in Posh v3 where -Wait is not honored\n\ntry { if (!($process.HasExited)) { Wait-Process $process } } catch { }\n\n\n\n$exitCodeRef.Value = $process.ExitCode\n\n'\nDEBUG: Tracking current state of 'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0\\tools'\nWrite-Error : Atom did not finish successfully. Boo to the chocolatey gods!\n\n[ERROR] This command cannot be run due to the error: Het systeem kan het opgegeven bestand niet vinden.\nAt C:\\Programs\\chocolatey\\chocolateyinstall\\helpers\\functions\\Write-ChocolateyFailure.ps1:30 char:3\n+   Write-Error $errorMessage\n+   ~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nDEBUG: Running 'Move-BadInstall' for Atom version: '0.119.0', packageFolder:'C:\\Programs\\chocolatey\\lib\\Atom.0.119.0'\nDEBUG: Moving bad package 'Atom v0.119.0' to 'C:\\Programs\\chocolatey\\lib-bad'.\nWrite-Error : Package 'Atom v0.119.0' did not install successfully: This command cannot be run due to the error: Het systeem kan het opgegeven bestand niet vinde\nn.\nAt C:\\Programs\\chocolatey\\chocolateyinstall\\functions\\Chocolatey-NuGet.ps1:90 char:17\n+                 Write-Error \"Package `'$installedPackageName v$installedPackageV ...\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nDEBUG: Evaluating NuGet output for line: \nFinished installing 'atom' and dependencies - if errors not shown in console, none detected. Check log for errors if unsure.\n```\n. I'm sorry, I just uninstalled chocolatey. I'll let you know if these errors reoccur when I would reinstall chocolatey.\n. ",
    "miaulightouch": "It seems cause the same problem with v0.9.10?\nI install chocolatey in a vanilla win7 sp1 that didn't apply any update.\n```\nC:\\Users\\VM>@powershell -NoProfile -ExecutionPolicy Bypass -Command \"iex ((new-o\nbject net.webclient).DownloadString('https://chocolatey.org/install.ps1'))\" && S\nET PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\nDownloading https://packages.chocolatey.org/chocolatey.0.9.10.nupkg to C:\\Users\n\\VM\\AppData\\Local\\Temp\\chocolatey\\chocInstall\\chocolatey.zip\nException calling \"DownloadFile\" with \"2\" argument(s): \"The underlying connecti\non was closed: Could not establish trust relationship for the SSL/TLS secure ch\nannel.\"\nAt line:125 char:27\n+   $downloader.DownloadFile <<<< ($url, $file)\n    + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException\n    + FullyQualifiedErrorId : DotNetMethodException\nDownload 7Zip commandline tool\nDownloading https://chocolatey.org/7za.exe to C:\\Users\\VM\\AppData\\Local\\Temp\\ch\nocolatey\\chocInstall\\7za.exe\nExtracting C:\\Users\\VM\\AppData\\Local\\Temp\\chocolatey\\chocInstall\\chocolatey.zip\n to C:\\Users\\VM\\AppData\\Local\\Temp\\chocolatey\\chocInstall...\n7-Zip (A) 9.20  Copyright (c) 1999-2010 Igor Pavlov  2010-11-18\nError:\ncannot find archive\nInstalling chocolatey on this machine\nThe term 'C:\\Users\\VM\\AppData\\Local\\Temp\\chocolatey\\chocInstall\\tools\\chocolate\nyInstall.ps1' is not recognized as the name of a cmdlet, function, script file,\n or operable program. Check the spelling of the name, or if a path was included\n, verify that the path is correct and try again.\nAt line:161 char:2\n+ & <<<<  $chocInstallPS1\n    + CategoryInfo          : ObjectNotFound: (C:\\Users\\VM\\App...ateyInstall.p\n   s1:String) [], CommandNotFoundException\n    + FullyQualifiedErrorId : CommandNotFoundException\nEnsuring chocolatey commands are on the path\nEnsuring chocolatey.nupkg is in the lib folder\n```\n. It seems cause the same problem with v0.9.10?\nI install chocolatey in a vanilla win7 sp1 that didn't apply any update.\n```\nC:\\Users\\VM>@powershell -NoProfile -ExecutionPolicy Bypass -Command \"iex ((new-o\nbject net.webclient).DownloadString('https://chocolatey.org/install.ps1'))\" && S\nET PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\nDownloading https://packages.chocolatey.org/chocolatey.0.9.10.nupkg to C:\\Users\n\\VM\\AppData\\Local\\Temp\\chocolatey\\chocInstall\\chocolatey.zip\nException calling \"DownloadFile\" with \"2\" argument(s): \"The underlying connecti\non was closed: Could not establish trust relationship for the SSL/TLS secure ch\nannel.\"\nAt line:125 char:27\n+   $downloader.DownloadFile <<<< ($url, $file)\n    + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException\n    + FullyQualifiedErrorId : DotNetMethodException\nDownload 7Zip commandline tool\nDownloading https://chocolatey.org/7za.exe to C:\\Users\\VM\\AppData\\Local\\Temp\\ch\nocolatey\\chocInstall\\7za.exe\nExtracting C:\\Users\\VM\\AppData\\Local\\Temp\\chocolatey\\chocInstall\\chocolatey.zip\n to C:\\Users\\VM\\AppData\\Local\\Temp\\chocolatey\\chocInstall...\n7-Zip (A) 9.20  Copyright (c) 1999-2010 Igor Pavlov  2010-11-18\nError:\ncannot find archive\nInstalling chocolatey on this machine\nThe term 'C:\\Users\\VM\\AppData\\Local\\Temp\\chocolatey\\chocInstall\\tools\\chocolate\nyInstall.ps1' is not recognized as the name of a cmdlet, function, script file,\n or operable program. Check the spelling of the name, or if a path was included\n, verify that the path is correct and try again.\nAt line:161 char:2\n+ & <<<<  $chocInstallPS1\n    + CategoryInfo          : ObjectNotFound: (C:\\Users\\VM\\App...ateyInstall.p\n   s1:String) [], CommandNotFoundException\n    + FullyQualifiedErrorId : CommandNotFoundException\nEnsuring chocolatey commands are on the path\nEnsuring chocolatey.nupkg is in the lib folder\n```\n. ",
    "serialseb": "Thank you for that!\n\u2014\nSebastien Lambla\nhttp://serialseb.com\n. Thank you for that!\n\u2014\nSebastien Lambla\nhttp://serialseb.com\n. ",
    "SpeCter": "This seemed to work, but now it keeps bugging me with security warnings eventhough i set the exectutionpolicy to Unrestricted or bypass.\n. Powershell with Admin rights\n. No, the \"error\" is just powershell bugging me to allow scripts downloaded from the internet.I would need to use the Unblock-File cmdlet on each script to get rid of it.\n. At the moment it is running with bypass, but the same happens with unrestricted too. No clue how ps knows I downloaded it(ntfs magic i guess) or why it does that now(it didn't do that with the command on the front page, but that didn't install correctly) \n. It isn't a policy problem though, the files are just marked as unsave and I have to unmark them each individually. After setting them as save it now works without powershell bugging me about it.\nSo I guess it my first issue could be marked as closed, because with version 0.9.8.27 it installs just fine.Windows just seems to be overprotective somehow ;)\n. This seemed to work, but now it keeps bugging me with security warnings eventhough i set the exectutionpolicy to Unrestricted or bypass.\n. Powershell with Admin rights\n. No, the \"error\" is just powershell bugging me to allow scripts downloaded from the internet.I would need to use the Unblock-File cmdlet on each script to get rid of it.\n. At the moment it is running with bypass, but the same happens with unrestricted too. No clue how ps knows I downloaded it(ntfs magic i guess) or why it does that now(it didn't do that with the command on the front page, but that didn't install correctly) \n. It isn't a policy problem though, the files are just marked as unsave and I have to unmark them each individually. After setting them as save it now works without powershell bugging me about it.\nSo I guess it my first issue could be marked as closed, because with version 0.9.8.27 it installs just fine.Windows just seems to be overprotective somehow ;)\n. ",
    "rchiav": "From looking at the unzip log text file, it looks like deleting in the reverse order would work. I tested adding \nps\n   \\[array\\]::Reverse($zipContents)\nbefore the loop that deletes and it was successful. It also looks like you really don't need to pass in the zip file name because the unzip log file is based on the package name. You could just derive the name from the package like it's generated. I can submit a separate bug for that and/or create a fork and pull request to correct them if it would be helpful. Let me know. \n. Another thought then would be to update the comments/documentation in UnInstall-ChocolateyZipPackage. It asks for a zip file name, but it won't work if you pass in the actual zip file name. The unzip log file gets written to the package lib path for the package as \"{packagename}Install.zip.txt\", and UnInstall-ChocolateyZipPackage looks for a file named $zipFileName + \".txt\". You have to pass in {packagename}Install.zip for it to work, which is odd because there's no zip file named that and it's not a name you'd use anywhere else. \n. From looking at the unzip log text file, it looks like deleting in the reverse order would work. I tested adding \nps\n   \\[array\\]::Reverse($zipContents)\nbefore the loop that deletes and it was successful. It also looks like you really don't need to pass in the zip file name because the unzip log file is based on the package name. You could just derive the name from the package like it's generated. I can submit a separate bug for that and/or create a fork and pull request to correct them if it would be helpful. Let me know. \n. Another thought then would be to update the comments/documentation in UnInstall-ChocolateyZipPackage. It asks for a zip file name, but it won't work if you pass in the actual zip file name. The unzip log file gets written to the package lib path for the package as \"{packagename}Install.zip.txt\", and UnInstall-ChocolateyZipPackage looks for a file named $zipFileName + \".txt\". You have to pass in {packagename}Install.zip for it to work, which is odd because there's no zip file named that and it's not a name you'd use anywhere else. \n. ",
    "DarwinJS": "I believe the code submitted may accidentally expand unrelated EMBEDDED environment variables in the PATH environment variable and it won't catch targets that are actually EMBEDDED environment variables  because this code \"$envPath = $env:PATH\" retrieves the path where it is already expanded.  I'm not sure if Get-EnvironmentVariable and Set-EnvironmentVariable also deal with expanded environment variables\n[Environment]::GetEnvironmentVariable(\"PATH\",\"User_or_Machine\") and [Environment]::SetEnvironmentVariable(\"PATH\",\"User_or_Machine\") keep embedded environment variables intact - for [a] removing an embedded environment variable, [b] not touching other embedded environment variables and for both path retrieval and re-write.\nI have some code to do this while preserving environment variables.\n. It's probably self evident - but mucking up the system path on choco machines could bring a lot of rage it's way :(  Might be good to review whether \"Install-ChocolateyPath\" accidentally expands unrelated environment variables embedded in the path as well?\n. I believe the code submitted may accidentally expand unrelated EMBEDDED environment variables in the PATH environment variable and it won't catch targets that are actually EMBEDDED environment variables  because this code \"$envPath = $env:PATH\" retrieves the path where it is already expanded.  I'm not sure if Get-EnvironmentVariable and Set-EnvironmentVariable also deal with expanded environment variables\n[Environment]::GetEnvironmentVariable(\"PATH\",\"User_or_Machine\") and [Environment]::SetEnvironmentVariable(\"PATH\",\"User_or_Machine\") keep embedded environment variables intact - for [a] removing an embedded environment variable, [b] not touching other embedded environment variables and for both path retrieval and re-write.\nI have some code to do this while preserving environment variables.\n. It's probably self evident - but mucking up the system path on choco machines could bring a lot of rage it's way :(  Might be good to review whether \"Install-ChocolateyPath\" accidentally expands unrelated environment variables embedded in the path as well?\n. ",
    "jgopel": "Folder existed from a previous install of xampp.  I removed the previous xampp install because it was giving me issues and because I'm trying to move stuff over to chocolatey.  Folder was partially read only.  I deleted the folder and am currently re-attempting the install.\n. Throws the same error, with the exception of line 88 (DEBUG line with the date in it) being today instead of yesterday.\n. Perhaps, but I'd been having issues with other package not too long ago that I never really resolved. I can't recall any particular packages unfortunately.  I successfully installed speedfan via chocolatey yesterday, so it's not ALL packages.  I'm willing to try any ideas you have.\n. 0.9.8.27\n. Here's the one from today\n```\nC:\\WINDOWS\\system32>cinst xampp -debug\nDEBUG: Running 'Append-InstallLog' with chocoInstallLog:''\nDEBUG: Arguments: $command = 'install'|$force=False\n|$prerelease=False|$packageNames='xampp'\n|$source=''\n|$version=''|$allVersions=False\n|$overrideArguments=False|$InstallArguments=''\n|$localonly=False|$verbosity=False|$debug=True|$quiet=False\n|$name=''|$ignoreDependencies=False|$forceX86=False\n|$packageParameters=''\n|PowerShellVersion=4.0|OSVersion=6.3.9600.0\nDEBUG: Running 'Chocolatey-Install' for 'xampp' with source: '', version: '',\ninstallerArguments:''\nDEBUG: Running 'Chocolatey-NuGet' for xampp with source:''. Force? False\nChocolatey (v0.9.8.27) is installing 'xampp' and dependencies. By installing you\n accept the license for 'xampp' and each dependency you are installing.\nDEBUG: Installing packages to \"C:\\ProgramData\\chocolatey\\lib\".\nDEBUG: Running 'Run-NuGet' for xampp with source: '', version:''\nDEBUG:  NuGet _\nDEBUG: Running 'Get-ConfigValue' with configValue:'useNuGetForSources'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'useNuGetForSources'\nDEBUG: After checking the user config the value of 'useNuGetForSources' is ''\nDEBUG: Value not found in the user config file - checking the global config\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'useNuGetForSources'\nDEBUG: After checking the global config the value of 'useNuGetForSources' is\n'false'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'sources'\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'sources'\nDEBUG: Using global sources\nDEBUG: Using '-Source \"https://chocolatey.org/api/v2/;\"' as the source\narguments\nDEBUG: Calling 'C:\\ProgramData\\chocolatey\\chocolateyinstall\\nuget.exe' install\nxampp -OutputDirectory \"C:\\ProgramData\\chocolatey\\lib\" -Source\n\"https://chocolatey.org/api/v2/;\" -NonInteractive -NoCache\nDEBUG: Attempting to resolve dependency 'XAMPP.app (= 1.8.1)'.\nInstalling 'XAMPP.app 1.8.1'.\nSuccessfully installed 'XAMPP.app 1.8.1'.\nDEBUG: Evaluating NuGet output for line: Attempting to resolve dependency\n'XAMPP.app (= 1.8.1)'.\nDEBUG: Evaluating NuGet output for line: Installing 'XAMPP.app 1.8.1'.\nDEBUG: Evaluating NuGet output for line: Successfully installed 'XAMPP.app\n1.8.1'.\nDEBUG: NuGet installed XAMPP.app. If we are ignoring dependencies (False) then\nwe will clean this up.\nXAMPP.app v1.8.1\nDEBUG: Running 'Delete-ExistingErrorLog' for XAMPP.app\nDEBUG: Looking for failure log at\n'C:\\Users\\SMART_~1\\AppData\\Local\\Temp\\chocolatey\\XAMPP.app\\failure.log'\nDEBUG: Found the failure log. Deleting it...\nDEBUG: Running 'Run-ChocolateyPS1' for XAMPP.app with\npackageFolder:'C:\\ProgramData\\chocolatey\\lib\\XAMPP.app.1.8.1', action:\n'install'\nDEBUG:    PowerShell install (chocolateyinstall.ps1) \nDEBUG:   Looking for chocolateyinstall.ps1 in folder\n'C:\\ProgramData\\chocolatey\\lib\\XAMPP.app.1.8.1'. If chocolateyinstall.ps1 is\nfound, it will be run.\nDEBUG: Action file is 'chocolateyInstall.ps1'\nDEBUG: Running\n'C:\\ProgramData\\chocolatey\\lib\\XAMPP.app.1.8.1\\tools\\chocolateyInstall.ps1'\nDEBUG: Running 'Install-ChocolateyPackage' for XAMPP.app with\nurl:'http://www.apachefriends.org/download.php?xampp-win32-1.8.1-VC9-installer.\nexe', args: '/S /D=\"C:\\xampp\"', fileType: 'exe', url64bit:\n'http://www.apachefriends.org/download.php?xampp-win32-1.8.1-VC9-installer.exe'\n, checksum: '', checksumType: '', checksum64: '', checksumType64: '',\nvalidExitCodes: '0'\nDEBUG: Running 'Get-ChocolateyWebFile' for XAMPP.app with\nurl:'http://www.apachefriends.org/download.php?xampp-win32-1.8.1-VC9-installer.\nexe',\nfileFullPath:'C:\\Users\\SMART_~1\\AppData\\Local\\Temp\\chocolatey\\XAMPP.app\\XAMPP.a\nppInstall.exe',\nurl64bit:'http://www.apachefriends.org/download.php?xampp-win32-1.8.1-VC9-insta\nller.exe', checksum: '', checksumType: '', checksum64: '', checksumType64: ''\nDEBUG: Running 'Get-ProcessorBits'\nDEBUG: CPU is 64 bit\nDEBUG: Setting url to\n'http://www.apachefriends.org/download.php?xampp-win32-1.8.1-VC9-installer.exe'\n and bitPackage to 64\nDEBUG: Running 'Get-WebHeaders' with\nurl:'http://www.apachefriends.org/download.php?xampp-win32-1.8.1-VC9-installer.\nexe', userAgent: 'chocolatey command line'\nDEBUG: Setting the UserAgent to 'chocolatey command line'\nDEBUG: Web Headers Received:\nDEBUG:   'Strict-Transport-Security':'max-age=63072000; includeSubDomains'\nDEBUG:   'X-Mod-Pagespeed':'1.6.29.2-'\nDEBUG:   'Vary':'Accept-Encoding'\nDEBUG:   'Accept-Ranges':'bytes'\nDEBUG:   'Content-Length':'33688'\nDEBUG:   'Cache-Control':'max-age=0, no-cache'\nDEBUG:   'Content-Type':'text/html; charset=utf-8'\nDEBUG:   'Date':'Tue, 12 Aug 2014 18:56:09 GMT'\nDEBUG:   'Server':'Apache'\nDEBUG: XAMPP.app's requested file has already been downloaded. Using cached\ncopy at\n'C:\\Users\\SMART_~1\\AppData\\Local\\Temp\\chocolatey\\XAMPP.app\\XAMPP.appInstall.exe\n'.\nDEBUG: Checking that\n'C:\\Users\\SMART_~1\\AppData\\Local\\Temp\\chocolatey\\XAMPP.app\\XAMPP.appInstall.exe\n' is the size we expect it to be.\nDEBUG: Verifying package provided checksum of '' for\n'C:\\Users\\SMART_~1\\AppData\\Local\\Temp\\chocolatey\\XAMPP.app\\XAMPP.appInstall.exe\n'.\nDEBUG: Running 'Get-CheckSumValid' with\nfile:'C:\\Users\\SMART_~1\\AppData\\Local\\Temp\\chocolatey\\XAMPP.app\\XAMPP.appInstal\nl.exe', checksum: '', checksumType: ''\nDEBUG: Running 'Install-ChocolateyInstallPackage' for XAMPP.app with\nfile:'C:\\Users\\SMART_~1\\AppData\\Local\\Temp\\chocolatey\\XAMPP.app\\XAMPP.appInstal\nl.exe', args: '/S /D=\"C:\\xampp\"', fileType: 'exe', validExitCodes: '0'\nInstalling XAMPP.app...\nDEBUG: Running 'Start-ChocolateyProcessAsAdmin' with\nexeToRun:'C:\\Users\\SMART_~1\\AppData\\Local\\Temp\\chocolatey\\XAMPP.app\\XAMPP.appIn\nstall.exe', statements: '/S /D=\"C:\\xampp\" '\nDEBUG: Elevating Permissions and running\nC:\\Users\\SMART_~1\\AppData\\Local\\Temp\\chocolatey\\XAMPP.app\\XAMPP.appInstall.exe\n/S /D=\"C:\\xampp\" . This may take awhile, depending on the statements.\nWrite-Error : XAMPP.app did not finish successfully. Boo to the chocolatey gods\n!\n\n[ERROR] Exception calling \"Start\" with \"1\" argument(s): \"The file or directory\nis corrupted and unreadable\"\n\nAt C:\\ProgramData\\chocolatey\\chocolateyinstall\\helpers\\functions\\Write-Chocolat\neyFailure.ps1:30 char:3\n+   Write-Error $errorMessage\n+   ~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorExcep\n   tion\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorExceptio\n   n,Write-Error\nDEBUG: Running 'Move-BadInstall' for XAMPP.app version: '1.8.1',\npackageFolder:'C:\\ProgramData\\chocolatey\\lib\\XAMPP.app.1.8.1'\nDEBUG: Moving bad package 'XAMPP.app v1.8.1' to\n'C:\\ProgramData\\chocolatey\\lib-bad'.\nWrite-Error : Package 'XAMPP.app v1.8.1' did not install successfully: Exceptio\nn calling \"Start\" with \"1\" argument(s): \"The file or directory is corrupted and\n unreadable\"\nAt C:\\ProgramData\\chocolatey\\chocolateyinstall\\functions\\Chocolatey-NuGet.ps1:9\n0 char:17\n+                 Write-Error \"Package `'$installedPackageName v$installedPacka\ngeV ...\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n```\n```\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorExcep\n   tion\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorExceptio\n   n,Write-Error\nDEBUG: Evaluating NuGet output for line:\nFinished installing 'xampp' and dependencies - if errors not shown in console, n\none detected. Check log for errors if unsure.\n```\n. Yes. I had it running fine for a few months before apache started to refuse to launch, so I decided to do a reinstall to see if something dumb was going on or there was some underlying issue that needed to be solved. I attempted to do the reinstall through chocolatey (previous install was before I started using chocolatey) and encountered this issue. I'll go download and install the standalone version to confirm it's not an XAMPP issue.  It'll take a hot minute, the internet here is slow and XAMPP is a slow install.\n. I'll go for 1.8.1, which isn't the latest version, just for consistency with what chocolatey is attempting to install.\n. XAMPP 1.8.1 installs fine, but the issue I was having that caused me to attempt reinstall persists (apache won't launch).\n. I solved the issue I was having with XAMPP, but chocolatey still cannot successfully install it.  The issue I was having was skype reserving port 80 and apache requiring port 80 to launch. If apache is started before skype, there are no issues.  If skype starts first, apache won't start.  Chocolatey cannot install XAMPP regardless of whether or not Skype is running.\n. Folder existed from a previous install of xampp.  I removed the previous xampp install because it was giving me issues and because I'm trying to move stuff over to chocolatey.  Folder was partially read only.  I deleted the folder and am currently re-attempting the install.\n. Throws the same error, with the exception of line 88 (DEBUG line with the date in it) being today instead of yesterday.\n. Perhaps, but I'd been having issues with other package not too long ago that I never really resolved. I can't recall any particular packages unfortunately.  I successfully installed speedfan via chocolatey yesterday, so it's not ALL packages.  I'm willing to try any ideas you have.\n. 0.9.8.27\n. Here's the one from today\n```\nC:\\WINDOWS\\system32>cinst xampp -debug\nDEBUG: Running 'Append-InstallLog' with chocoInstallLog:''\nDEBUG: Arguments: $command = 'install'|$force=False\n|$prerelease=False|$packageNames='xampp'\n|$source=''\n|$version=''|$allVersions=False\n|$overrideArguments=False|$InstallArguments=''\n|$localonly=False|$verbosity=False|$debug=True|$quiet=False\n|$name=''|$ignoreDependencies=False|$forceX86=False\n|$packageParameters=''\n|PowerShellVersion=4.0|OSVersion=6.3.9600.0\nDEBUG: Running 'Chocolatey-Install' for 'xampp' with source: '', version: '',\ninstallerArguments:''\nDEBUG: Running 'Chocolatey-NuGet' for xampp with source:''. Force? False\nChocolatey (v0.9.8.27) is installing 'xampp' and dependencies. By installing you\n accept the license for 'xampp' and each dependency you are installing.\nDEBUG: Installing packages to \"C:\\ProgramData\\chocolatey\\lib\".\nDEBUG: Running 'Run-NuGet' for xampp with source: '', version:''\nDEBUG:  NuGet _\nDEBUG: Running 'Get-ConfigValue' with configValue:'useNuGetForSources'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'useNuGetForSources'\nDEBUG: After checking the user config the value of 'useNuGetForSources' is ''\nDEBUG: Value not found in the user config file - checking the global config\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'useNuGetForSources'\nDEBUG: After checking the global config the value of 'useNuGetForSources' is\n'false'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'sources'\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'sources'\nDEBUG: Using global sources\nDEBUG: Using '-Source \"https://chocolatey.org/api/v2/;\"' as the source\narguments\nDEBUG: Calling 'C:\\ProgramData\\chocolatey\\chocolateyinstall\\nuget.exe' install\nxampp -OutputDirectory \"C:\\ProgramData\\chocolatey\\lib\" -Source\n\"https://chocolatey.org/api/v2/;\" -NonInteractive -NoCache\nDEBUG: Attempting to resolve dependency 'XAMPP.app (= 1.8.1)'.\nInstalling 'XAMPP.app 1.8.1'.\nSuccessfully installed 'XAMPP.app 1.8.1'.\nDEBUG: Evaluating NuGet output for line: Attempting to resolve dependency\n'XAMPP.app (= 1.8.1)'.\nDEBUG: Evaluating NuGet output for line: Installing 'XAMPP.app 1.8.1'.\nDEBUG: Evaluating NuGet output for line: Successfully installed 'XAMPP.app\n1.8.1'.\nDEBUG: NuGet installed XAMPP.app. If we are ignoring dependencies (False) then\nwe will clean this up.\nXAMPP.app v1.8.1\nDEBUG: Running 'Delete-ExistingErrorLog' for XAMPP.app\nDEBUG: Looking for failure log at\n'C:\\Users\\SMART_~1\\AppData\\Local\\Temp\\chocolatey\\XAMPP.app\\failure.log'\nDEBUG: Found the failure log. Deleting it...\nDEBUG: Running 'Run-ChocolateyPS1' for XAMPP.app with\npackageFolder:'C:\\ProgramData\\chocolatey\\lib\\XAMPP.app.1.8.1', action:\n'install'\nDEBUG:    PowerShell install (chocolateyinstall.ps1) \nDEBUG:   Looking for chocolateyinstall.ps1 in folder\n'C:\\ProgramData\\chocolatey\\lib\\XAMPP.app.1.8.1'. If chocolateyinstall.ps1 is\nfound, it will be run.\nDEBUG: Action file is 'chocolateyInstall.ps1'\nDEBUG: Running\n'C:\\ProgramData\\chocolatey\\lib\\XAMPP.app.1.8.1\\tools\\chocolateyInstall.ps1'\nDEBUG: Running 'Install-ChocolateyPackage' for XAMPP.app with\nurl:'http://www.apachefriends.org/download.php?xampp-win32-1.8.1-VC9-installer.\nexe', args: '/S /D=\"C:\\xampp\"', fileType: 'exe', url64bit:\n'http://www.apachefriends.org/download.php?xampp-win32-1.8.1-VC9-installer.exe'\n, checksum: '', checksumType: '', checksum64: '', checksumType64: '',\nvalidExitCodes: '0'\nDEBUG: Running 'Get-ChocolateyWebFile' for XAMPP.app with\nurl:'http://www.apachefriends.org/download.php?xampp-win32-1.8.1-VC9-installer.\nexe',\nfileFullPath:'C:\\Users\\SMART_~1\\AppData\\Local\\Temp\\chocolatey\\XAMPP.app\\XAMPP.a\nppInstall.exe',\nurl64bit:'http://www.apachefriends.org/download.php?xampp-win32-1.8.1-VC9-insta\nller.exe', checksum: '', checksumType: '', checksum64: '', checksumType64: ''\nDEBUG: Running 'Get-ProcessorBits'\nDEBUG: CPU is 64 bit\nDEBUG: Setting url to\n'http://www.apachefriends.org/download.php?xampp-win32-1.8.1-VC9-installer.exe'\n and bitPackage to 64\nDEBUG: Running 'Get-WebHeaders' with\nurl:'http://www.apachefriends.org/download.php?xampp-win32-1.8.1-VC9-installer.\nexe', userAgent: 'chocolatey command line'\nDEBUG: Setting the UserAgent to 'chocolatey command line'\nDEBUG: Web Headers Received:\nDEBUG:   'Strict-Transport-Security':'max-age=63072000; includeSubDomains'\nDEBUG:   'X-Mod-Pagespeed':'1.6.29.2-'\nDEBUG:   'Vary':'Accept-Encoding'\nDEBUG:   'Accept-Ranges':'bytes'\nDEBUG:   'Content-Length':'33688'\nDEBUG:   'Cache-Control':'max-age=0, no-cache'\nDEBUG:   'Content-Type':'text/html; charset=utf-8'\nDEBUG:   'Date':'Tue, 12 Aug 2014 18:56:09 GMT'\nDEBUG:   'Server':'Apache'\nDEBUG: XAMPP.app's requested file has already been downloaded. Using cached\ncopy at\n'C:\\Users\\SMART_~1\\AppData\\Local\\Temp\\chocolatey\\XAMPP.app\\XAMPP.appInstall.exe\n'.\nDEBUG: Checking that\n'C:\\Users\\SMART_~1\\AppData\\Local\\Temp\\chocolatey\\XAMPP.app\\XAMPP.appInstall.exe\n' is the size we expect it to be.\nDEBUG: Verifying package provided checksum of '' for\n'C:\\Users\\SMART_~1\\AppData\\Local\\Temp\\chocolatey\\XAMPP.app\\XAMPP.appInstall.exe\n'.\nDEBUG: Running 'Get-CheckSumValid' with\nfile:'C:\\Users\\SMART_~1\\AppData\\Local\\Temp\\chocolatey\\XAMPP.app\\XAMPP.appInstal\nl.exe', checksum: '', checksumType: ''\nDEBUG: Running 'Install-ChocolateyInstallPackage' for XAMPP.app with\nfile:'C:\\Users\\SMART_~1\\AppData\\Local\\Temp\\chocolatey\\XAMPP.app\\XAMPP.appInstal\nl.exe', args: '/S /D=\"C:\\xampp\"', fileType: 'exe', validExitCodes: '0'\nInstalling XAMPP.app...\nDEBUG: Running 'Start-ChocolateyProcessAsAdmin' with\nexeToRun:'C:\\Users\\SMART_~1\\AppData\\Local\\Temp\\chocolatey\\XAMPP.app\\XAMPP.appIn\nstall.exe', statements: '/S /D=\"C:\\xampp\" '\nDEBUG: Elevating Permissions and running\nC:\\Users\\SMART_~1\\AppData\\Local\\Temp\\chocolatey\\XAMPP.app\\XAMPP.appInstall.exe\n/S /D=\"C:\\xampp\" . This may take awhile, depending on the statements.\nWrite-Error : XAMPP.app did not finish successfully. Boo to the chocolatey gods\n!\n\n[ERROR] Exception calling \"Start\" with \"1\" argument(s): \"The file or directory\nis corrupted and unreadable\"\n\nAt C:\\ProgramData\\chocolatey\\chocolateyinstall\\helpers\\functions\\Write-Chocolat\neyFailure.ps1:30 char:3\n+   Write-Error $errorMessage\n+   ~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorExcep\n   tion\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorExceptio\n   n,Write-Error\nDEBUG: Running 'Move-BadInstall' for XAMPP.app version: '1.8.1',\npackageFolder:'C:\\ProgramData\\chocolatey\\lib\\XAMPP.app.1.8.1'\nDEBUG: Moving bad package 'XAMPP.app v1.8.1' to\n'C:\\ProgramData\\chocolatey\\lib-bad'.\nWrite-Error : Package 'XAMPP.app v1.8.1' did not install successfully: Exceptio\nn calling \"Start\" with \"1\" argument(s): \"The file or directory is corrupted and\n unreadable\"\nAt C:\\ProgramData\\chocolatey\\chocolateyinstall\\functions\\Chocolatey-NuGet.ps1:9\n0 char:17\n+                 Write-Error \"Package `'$installedPackageName v$installedPacka\ngeV ...\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n```\n```\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorExcep\n   tion\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorExceptio\n   n,Write-Error\nDEBUG: Evaluating NuGet output for line:\nFinished installing 'xampp' and dependencies - if errors not shown in console, n\none detected. Check log for errors if unsure.\n```\n. Yes. I had it running fine for a few months before apache started to refuse to launch, so I decided to do a reinstall to see if something dumb was going on or there was some underlying issue that needed to be solved. I attempted to do the reinstall through chocolatey (previous install was before I started using chocolatey) and encountered this issue. I'll go download and install the standalone version to confirm it's not an XAMPP issue.  It'll take a hot minute, the internet here is slow and XAMPP is a slow install.\n. I'll go for 1.8.1, which isn't the latest version, just for consistency with what chocolatey is attempting to install.\n. XAMPP 1.8.1 installs fine, but the issue I was having that caused me to attempt reinstall persists (apache won't launch).\n. I solved the issue I was having with XAMPP, but chocolatey still cannot successfully install it.  The issue I was having was skype reserving port 80 and apache requiring port 80 to launch. If apache is started before skype, there are no issues.  If skype starts first, apache won't start.  Chocolatey cannot install XAMPP regardless of whether or not Skype is running.\n. ",
    "dermeister0": "I got the same error, because HTML page is downloaded instead of EXE installer. Package author must fix that.\n. The first request downloads headers only.\n```\nPS C:\\Users\\Der> cinst inkscape -debug\nDEBUG: Loading community extensions\nDEBUG: Importing 'C:\\ProgramData\\chocolatey\\extensions\\Devbox-Common.extension\\Find-FilenameInPath.psm1'\nDEBUG: Importing 'C:\\ProgramData\\chocolatey\\extensions\\Devbox-Common.extension\\Get-RootPath.psm1'\nDEBUG: Importing 'C:\\ProgramData\\chocolatey\\extensions\\Devbox-Common.extension\\Remove-EnvironmentVariable.psm1'\nDEBUG: Importing 'C:\\ProgramData\\chocolatey\\extensions\\Devbox-Common.extension\\Remove-Path.psm1'\nDEBUG: Importing 'C:\\ProgramData\\chocolatey\\extensions\\Devbox-Common.extension\\Show-AppInfoInstalled.psm1'\nDEBUG: Running 'Append-InstallLog' with chocoInstallLog:''\nDEBUG: Arguments: $command = 'install'|$force=False\n|$prerelease=False|$packageNames='inkscape'\n|$source=''\n|$version=''|$allVersions=False\n|$overrideArguments=False|$InstallArguments=''\n|$localonly=False|$verbosity=False|$debug=True|$quiet=False\n|$name=''|$ignoreDependencies=False|$forceX86=False\n|$packageParameters=''\n|PowerShellVersion=4.0|OSVersion=6.3.9600.0\nDEBUG: Running 'Chocolatey-Install' for 'inkscape' with source: '', version: '', installerArguments:''\nDEBUG: Running 'Chocolatey-NuGet' for inkscape with source:''. Force? False\nChocolatey (v0.9.8.27) is installing 'inkscape' and dependencies. By installing you accept the license for 'inkscape' and each dependency you are installing.\nDEBUG: Installing packages to \"C:\\ProgramData\\chocolatey\\lib\".\nDEBUG: Running 'Run-NuGet' for inkscape with source: '', version:''\nDEBUG:  NuGet _\nDEBUG: Running 'Get-ConfigValue' with configValue:'useNuGetForSources'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'useNuGetForSources'\nDEBUG: After checking the user config the value of 'useNuGetForSources' is ''\nDEBUG: Value not found in the user config file - checking the global config\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'useNuGetForSources'\nDEBUG: After checking the global config the value of 'useNuGetForSources' is 'false'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'sources'\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'sources'\nDEBUG: Using global sources\nDEBUG: Using '-Source \"https://chocolatey.org/api/v2/;\"' as the source arguments\nDEBUG: Calling 'C:\\ProgramData\\chocolatey\\chocolateyinstall\\nuget.exe' install inkscape -OutputDirectory \"C:\\ProgramData\\chocolatey\\lib\" -Source \"https://chocolatey.org/api/v2/;\"\n-NonInteractive -NoCache\nDEBUG: Installing 'InkScape 0.48.5'.\nSuccessfully installed 'InkScape 0.48.5'.\nDEBUG: Evaluating NuGet output for line: Installing 'InkScape 0.48.5'.\nDEBUG: Evaluating NuGet output for line: Successfully installed 'InkScape 0.48.5'.\nDEBUG: NuGet installed InkScape. If we are ignoring dependencies (False) then we will clean this up.\nInkScape v0.48.5\nDEBUG: Running 'Delete-ExistingErrorLog' for InkScape\nDEBUG: Looking for failure log at 'C:\\Users\\Der\\AppData\\Local\\Temp\\chocolatey\\InkScape\\failure.log'\nDEBUG: Running 'Run-ChocolateyPS1' for InkScape with packageFolder:'C:\\ProgramData\\chocolatey\\lib\\InkScape.0.48.5', action: 'install'\nDEBUG:    PowerShell install (chocolateyinstall.ps1) \nDEBUG:   Looking for chocolateyinstall.ps1 in folder 'C:\\ProgramData\\chocolatey\\lib\\InkScape.0.48.5'. If chocolateyinstall.ps1 is found, it will be run.\nDEBUG: Action file is 'chocolateyInstall.ps1'\nDEBUG: Running 'C:\\ProgramData\\chocolatey\\lib\\InkScape.0.48.5\\tools\\chocolateyInstall.ps1'\nDEBUG: Running 'Install-ChocolateyPackage' for InkScape with url:'http://sourceforge.net/projects/inkscape/files/inkscape/0.48.5/Inkscape-0.48.5-1-win32.exe/download', args: '/S',  fileType: 'exe', url64bit: '', checksum: '', checksumType: '', checksum64: '', checksumType64: '', validExitCodes: '0'\nDEBUG: Running 'Get-ChocolateyWebFile' for InkScape with url:'http://sourceforge.net/projects/inkscape/files/inkscape/0.48.5/Inkscape-0.48.5-1-win32.exe/download',\nfileFullPath:'C:\\Users\\Der\\AppData\\Local\\Temp\\chocolatey\\InkScape\\InkScapeInstall.exe', url64bit:'', checksum: '', checksumType: '', checksum64: '', checksumType64: ''\nDEBUG: Running 'Get-ProcessorBits'\nDEBUG: CPU is 64 bit\nDEBUG: Running 'Get-WebHeaders' with url:'http://sourceforge.net/projects/inkscape/files/inkscape/0.48.5/Inkscape-0.48.5-1-win32.exe/download', userAgent: 'chocolatey command\nline'\nDEBUG: Setting the UserAgent to 'chocolatey command line'\nDEBUG: Web Headers Received:\nDEBUG:   'Connection':'close'\nDEBUG:   'Accept-Ranges':'bytes'\nDEBUG:   'Content-Length':'34573304'\nDEBUG:   'Content-Type':'application/octet-stream'\nDEBUG:   'Date':'Sat, 16 Aug 2014 08:03:49 GMT'\nDEBUG:   'ETag':'\"371ea-20f8bf8-4fc7e4d12d000\"'\nDEBUG:   'Last-Modified':'Mon, 23 Jun 2014 10:28:16 GMT'\nDEBUG:   'Server':'Apache/2.2.22 (Ubuntu)'\nDownloading InkScape 32 bit\n  from 'http://sourceforge.net/projects/inkscape/files/inkscape/0.48.5/Inkscape-0.48.5-1-win32.exe/download'\nDEBUG: Running 'Get-WebFile' for C:\\Users\\Der\\AppData\\Local\\Temp\\chocolatey\\InkScape\\InkScapeInstall.exe with\nurl:'http://sourceforge.net/projects/inkscape/files/inkscape/0.48.5/Inkscape-0.48.5-1-win32.exe/download', userAgent: 'chocolatey command line'\nDEBUG: Setting the UserAgent to 'chocolatey command line'\nDEBUG: Checking that 'C:\\Users\\Der\\AppData\\Local\\Temp\\chocolatey\\InkScape\\InkScapeInstall.exe' is the size we expect it to be.\nDEBUG: Verifying package provided checksum of '' for 'C:\\Users\\Der\\AppData\\Local\\Temp\\chocolatey\\InkScape\\InkScapeInstall.exe'.\nDEBUG: Running 'Get-CheckSumValid' with file:'C:\\Users\\Der\\AppData\\Local\\Temp\\chocolatey\\InkScape\\InkScapeInstall.exe', checksum: '', checksumType: ''\nDEBUG: Running 'Install-ChocolateyInstallPackage' for InkScape with file:'C:\\Users\\Der\\AppData\\Local\\Temp\\chocolatey\\InkScape\\InkScapeInstall.exe', args: '/S', fileType: 'exe',\nvalidExitCodes: '0'\nInstalling InkScape...\nDEBUG: Running 'Start-ChocolateyProcessAsAdmin' with exeToRun:'C:\\Users\\Der\\AppData\\Local\\Temp\\chocolatey\\InkScape\\InkScapeInstall.exe', statements: '/S '\nDEBUG: Elevating Permissions and running C:\\Users\\Der\\AppData\\Local\\Temp\\chocolatey\\InkScape\\InkScapeInstall.exe /S . This may take awhile, depending on the statements.\nDEBUG: Finishing 'Start-ChocolateyProcessAsAdmin'\nInkScape has been installed.\nInkScape has finished successfully! The chocolatey gods have answered your request!\nDEBUG: Running 'Get-ChocolateyBins' for C:\\ProgramData\\chocolatey\\lib\\InkScape.0.48.5\nDEBUG:    Executable Links (*.exe) \nDEBUG: Looking for executables in folder: C:\\ProgramData\\chocolatey\\lib\\InkScape.0.48.5\nAdding batch files for any executables found to a location on PATH. In other words the executable will be available from ANY command line/powershell prompt.\nDEBUG: There are no executables (that are not ignored) in the package.\nDEBUG: Evaluating NuGet output for line:\nFinished installing 'inkscape' and dependencies - if errors not shown in console, none detected. Check log for errors if unsure.\n```\n. I got the same error, because HTML page is downloaded instead of EXE installer. Package author must fix that.\n. The first request downloads headers only.\n```\nPS C:\\Users\\Der> cinst inkscape -debug\nDEBUG: Loading community extensions\nDEBUG: Importing 'C:\\ProgramData\\chocolatey\\extensions\\Devbox-Common.extension\\Find-FilenameInPath.psm1'\nDEBUG: Importing 'C:\\ProgramData\\chocolatey\\extensions\\Devbox-Common.extension\\Get-RootPath.psm1'\nDEBUG: Importing 'C:\\ProgramData\\chocolatey\\extensions\\Devbox-Common.extension\\Remove-EnvironmentVariable.psm1'\nDEBUG: Importing 'C:\\ProgramData\\chocolatey\\extensions\\Devbox-Common.extension\\Remove-Path.psm1'\nDEBUG: Importing 'C:\\ProgramData\\chocolatey\\extensions\\Devbox-Common.extension\\Show-AppInfoInstalled.psm1'\nDEBUG: Running 'Append-InstallLog' with chocoInstallLog:''\nDEBUG: Arguments: $command = 'install'|$force=False\n|$prerelease=False|$packageNames='inkscape'\n|$source=''\n|$version=''|$allVersions=False\n|$overrideArguments=False|$InstallArguments=''\n|$localonly=False|$verbosity=False|$debug=True|$quiet=False\n|$name=''|$ignoreDependencies=False|$forceX86=False\n|$packageParameters=''\n|PowerShellVersion=4.0|OSVersion=6.3.9600.0\nDEBUG: Running 'Chocolatey-Install' for 'inkscape' with source: '', version: '', installerArguments:''\nDEBUG: Running 'Chocolatey-NuGet' for inkscape with source:''. Force? False\nChocolatey (v0.9.8.27) is installing 'inkscape' and dependencies. By installing you accept the license for 'inkscape' and each dependency you are installing.\nDEBUG: Installing packages to \"C:\\ProgramData\\chocolatey\\lib\".\nDEBUG: Running 'Run-NuGet' for inkscape with source: '', version:''\nDEBUG:  NuGet _\nDEBUG: Running 'Get-ConfigValue' with configValue:'useNuGetForSources'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'useNuGetForSources'\nDEBUG: After checking the user config the value of 'useNuGetForSources' is ''\nDEBUG: Value not found in the user config file - checking the global config\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'useNuGetForSources'\nDEBUG: After checking the global config the value of 'useNuGetForSources' is 'false'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'sources'\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'sources'\nDEBUG: Using global sources\nDEBUG: Using '-Source \"https://chocolatey.org/api/v2/;\"' as the source arguments\nDEBUG: Calling 'C:\\ProgramData\\chocolatey\\chocolateyinstall\\nuget.exe' install inkscape -OutputDirectory \"C:\\ProgramData\\chocolatey\\lib\" -Source \"https://chocolatey.org/api/v2/;\"\n-NonInteractive -NoCache\nDEBUG: Installing 'InkScape 0.48.5'.\nSuccessfully installed 'InkScape 0.48.5'.\nDEBUG: Evaluating NuGet output for line: Installing 'InkScape 0.48.5'.\nDEBUG: Evaluating NuGet output for line: Successfully installed 'InkScape 0.48.5'.\nDEBUG: NuGet installed InkScape. If we are ignoring dependencies (False) then we will clean this up.\nInkScape v0.48.5\nDEBUG: Running 'Delete-ExistingErrorLog' for InkScape\nDEBUG: Looking for failure log at 'C:\\Users\\Der\\AppData\\Local\\Temp\\chocolatey\\InkScape\\failure.log'\nDEBUG: Running 'Run-ChocolateyPS1' for InkScape with packageFolder:'C:\\ProgramData\\chocolatey\\lib\\InkScape.0.48.5', action: 'install'\nDEBUG:    PowerShell install (chocolateyinstall.ps1) \nDEBUG:   Looking for chocolateyinstall.ps1 in folder 'C:\\ProgramData\\chocolatey\\lib\\InkScape.0.48.5'. If chocolateyinstall.ps1 is found, it will be run.\nDEBUG: Action file is 'chocolateyInstall.ps1'\nDEBUG: Running 'C:\\ProgramData\\chocolatey\\lib\\InkScape.0.48.5\\tools\\chocolateyInstall.ps1'\nDEBUG: Running 'Install-ChocolateyPackage' for InkScape with url:'http://sourceforge.net/projects/inkscape/files/inkscape/0.48.5/Inkscape-0.48.5-1-win32.exe/download', args: '/S',  fileType: 'exe', url64bit: '', checksum: '', checksumType: '', checksum64: '', checksumType64: '', validExitCodes: '0'\nDEBUG: Running 'Get-ChocolateyWebFile' for InkScape with url:'http://sourceforge.net/projects/inkscape/files/inkscape/0.48.5/Inkscape-0.48.5-1-win32.exe/download',\nfileFullPath:'C:\\Users\\Der\\AppData\\Local\\Temp\\chocolatey\\InkScape\\InkScapeInstall.exe', url64bit:'', checksum: '', checksumType: '', checksum64: '', checksumType64: ''\nDEBUG: Running 'Get-ProcessorBits'\nDEBUG: CPU is 64 bit\nDEBUG: Running 'Get-WebHeaders' with url:'http://sourceforge.net/projects/inkscape/files/inkscape/0.48.5/Inkscape-0.48.5-1-win32.exe/download', userAgent: 'chocolatey command\nline'\nDEBUG: Setting the UserAgent to 'chocolatey command line'\nDEBUG: Web Headers Received:\nDEBUG:   'Connection':'close'\nDEBUG:   'Accept-Ranges':'bytes'\nDEBUG:   'Content-Length':'34573304'\nDEBUG:   'Content-Type':'application/octet-stream'\nDEBUG:   'Date':'Sat, 16 Aug 2014 08:03:49 GMT'\nDEBUG:   'ETag':'\"371ea-20f8bf8-4fc7e4d12d000\"'\nDEBUG:   'Last-Modified':'Mon, 23 Jun 2014 10:28:16 GMT'\nDEBUG:   'Server':'Apache/2.2.22 (Ubuntu)'\nDownloading InkScape 32 bit\n  from 'http://sourceforge.net/projects/inkscape/files/inkscape/0.48.5/Inkscape-0.48.5-1-win32.exe/download'\nDEBUG: Running 'Get-WebFile' for C:\\Users\\Der\\AppData\\Local\\Temp\\chocolatey\\InkScape\\InkScapeInstall.exe with\nurl:'http://sourceforge.net/projects/inkscape/files/inkscape/0.48.5/Inkscape-0.48.5-1-win32.exe/download', userAgent: 'chocolatey command line'\nDEBUG: Setting the UserAgent to 'chocolatey command line'\nDEBUG: Checking that 'C:\\Users\\Der\\AppData\\Local\\Temp\\chocolatey\\InkScape\\InkScapeInstall.exe' is the size we expect it to be.\nDEBUG: Verifying package provided checksum of '' for 'C:\\Users\\Der\\AppData\\Local\\Temp\\chocolatey\\InkScape\\InkScapeInstall.exe'.\nDEBUG: Running 'Get-CheckSumValid' with file:'C:\\Users\\Der\\AppData\\Local\\Temp\\chocolatey\\InkScape\\InkScapeInstall.exe', checksum: '', checksumType: ''\nDEBUG: Running 'Install-ChocolateyInstallPackage' for InkScape with file:'C:\\Users\\Der\\AppData\\Local\\Temp\\chocolatey\\InkScape\\InkScapeInstall.exe', args: '/S', fileType: 'exe',\nvalidExitCodes: '0'\nInstalling InkScape...\nDEBUG: Running 'Start-ChocolateyProcessAsAdmin' with exeToRun:'C:\\Users\\Der\\AppData\\Local\\Temp\\chocolatey\\InkScape\\InkScapeInstall.exe', statements: '/S '\nDEBUG: Elevating Permissions and running C:\\Users\\Der\\AppData\\Local\\Temp\\chocolatey\\InkScape\\InkScapeInstall.exe /S . This may take awhile, depending on the statements.\nDEBUG: Finishing 'Start-ChocolateyProcessAsAdmin'\nInkScape has been installed.\nInkScape has finished successfully! The chocolatey gods have answered your request!\nDEBUG: Running 'Get-ChocolateyBins' for C:\\ProgramData\\chocolatey\\lib\\InkScape.0.48.5\nDEBUG:    Executable Links (*.exe) \nDEBUG: Looking for executables in folder: C:\\ProgramData\\chocolatey\\lib\\InkScape.0.48.5\nAdding batch files for any executables found to a location on PATH. In other words the executable will be available from ANY command line/powershell prompt.\nDEBUG: There are no executables (that are not ignored) in the package.\nDEBUG: Evaluating NuGet output for line:\nFinished installing 'inkscape' and dependencies - if errors not shown in console, none detected. Check log for errors if unsure.\n```\n. ",
    "gobins": "We are using 0.9.8.23\n. We are using 0.9.8.23\n. ",
    "nvivo": "I'm sorry, I really didn't see that as I just used \"choco search/install\" from command line.\nHaving said that, this is really confusing. NPM is installed by default with node, so a package called \"nodejs\" should have it included by default also.\nNot having npm is a custom kind of installation, so it would make more sense to package like \"node.core\" or \"node-nonpm\" to install it like this. Jut my 2 cents.\n. I'm sorry, I really didn't see that as I just used \"choco search/install\" from command line.\nHaving said that, this is really confusing. NPM is installed by default with node, so a package called \"nodejs\" should have it included by default also.\nNot having npm is a custom kind of installation, so it would make more sense to package like \"node.core\" or \"node-nonpm\" to install it like this. Jut my 2 cents.\n. ",
    "haf": "Could it be that cpack gives me an error message at the start of the operation?\nThe system cannot find the path specified.\nDEBUG: Running 'Append-InstallLog' with chocoInstallLog:''\nDEBUG: Arguments: $command = 'pack'|$force=False\n|$prerelease=False|$packageNames=''\n|$source=''\n|$version=''|$allVersions=False\n|$overrideArguments=False|$InstallArguments=''\n|$localonly=False|$verbosity=False|$debug=True|$quiet=False\n|$name=''|$ignoreDependencies=False|$forceX86=False\n|$packageParameters=''\n|PowerShellVersion=3.0|OSVersion=6.2.9200.0\nDEBUG: Running 'Chocolatey-Pack' for . If nuspec name is not passed, it will find the nuspec file in the current\nworking directory\nCalling 'C:\\ProgramData\\chocolatey\\chocolateyinstall\\nuget.exe pack  -NoPackageAnalysis -NonInteractive'.\nAttempting to build package from 'Intelliplan.Svc.nuspec'.\nSuccessfully created package 'X:\\build\\Intelliplan.Svc\\Intelliplan.Svc.1.6.3.nupkg'.\nOn 19 aug 2014, at 13:38, Rob Reynolds notifications@github.com wrote:\n\nAttempting this against latest code base\nC:\\code\\mine\\chocolatey-packages\\manual\\poshgit>choco\nPlease run chocolatey /? or chocolatey help - chocolatey v0.9.8.28-alpha2\nC:\\code\\mine\\chocolatey-packages\\manual\\poshgit>cpack -debug\nDEBUG: Running 'Append-InstallLog' with chocoInstallLog:''\nDEBUG: Arguments: $command = 'pack'|$force=False\n|$prerelease=False|$packageNames=''\n|$source=''\n|$version=''|$allVersions=False\n|$overrideArguments=False|$InstallArguments=''\n|$localonly=False|$verbosity=False|$debug=True|$quiet=False\n|$name=''|$ignoreDependencies=False|$forceX86=False\n|$packageParameters=''\n|PowerShellVersion=2.0|OSVersion=6.1.7601.65536\nDEBUG: Current Security Protocol - Ssl3, Tls\nDEBUG: Running 'Chocolatey-Pack' for . If nuspec name is not passed, it will find the nuspec file in the current working directory\nCalling 'C:\\ProgramData\\chocolatey\\chocolateyInstall\\nuget.exe pack  -NoPackageAnalysis -NonInteractive'.\nAttempting to build package from 'poshgit.nuspec'.\nSuccessfully created package 'C:\\code\\mine\\chocolatey-packages\\manual\\poshgit\\poshgit.0.4.0.20120717.nupkg'.\nC:\\code\\mine\\chocolatey-packages\\manual\\poshgit>echo %ERRORLEVEL%\n0\nC:\\code\\mine\\chocolatey-packages\\manual\\poshgit [master]> cpack -debug\nDEBUG: Running 'Append-InstallLog' with chocoInstallLog:''\nDEBUG: Arguments: $command = 'pack'|$force=False\n|$prerelease=False|$packageNames=''\n|$source=''\n|$version=''|$allVersions=False\n|$overrideArguments=False|$InstallArguments=''\n|$localonly=False|$verbosity=False|$debug=True|$quiet=False\n|$name=''|$ignoreDependencies=False|$forceX86=False\n|$packageParameters=''\n|PowerShellVersion=2.0|OSVersion=6.1.7601.65536\nDEBUG: Current Security Protocol - Ssl3, Tls\nDEBUG: Running 'Chocolatey-Pack' for . If nuspec name is not passed, it will find the nuspec file in the current working directory\nCalling 'C:\\ProgramData\\chocolatey\\chocolateyInstall\\nuget.exe pack  -NoPackageAnalysis -NonInteractive'.\nAttempting to build package from 'poshgit.nuspec'.\nSuccessfully created package 'C:\\code\\mine\\chocolatey-packages\\manual\\poshgit\\poshgit.0.4.0.20120717.nupkg'.\nC:\\code\\mine\\chocolatey-packages\\manual\\poshgit [master]> echo $LASTEXITCODE\n0\n\u2014\nReply to this email directly or view it on GitHub.\n. OK, I see. How can I know what Chocolatey isn't finding the path of then?\n\nOn 19 aug 2014, at 13:43, Rob Reynolds notifications@github.com wrote:\n\nOn a different system with 0.9.8.27 installed:\nC:\\code\\mine\\chocolatey-packages\\manual\\poshgit>choco\nSource chocolatey already disabled\nSource chocolateyHttp already exists\nPlease run chocolatey /? or chocolatey help - chocolatey v0.9.8.27\ncmd.exe:\nC:\\code\\mine\\chocolatey-packages\\manual\\poshgit>cpack\nSource chocolatey already disabled\nSource chocolateyHttp already exists\nCalling 'C:\\Documents and Settings\\All Users\\Application Data\\chocolatey\\chocola\nteyinstall\\nuget.exe pack  -NoPackageAnalysis -NonInteractive'.\nAttempting to build package from 'poshgit.nuspec'.\nSuccessfully created package 'C:\\code\\mine\\chocolatey-packages\\manual\\poshgit\\po\nshgit.0.4.0.20120717.nupkg'.\nC:\\code\\mine\\chocolatey-packages\\manual\\poshgit>echo %ERRORLEVEL%\n0\npowershell:\nPS C:\\code\\mine\\chocolatey-packages\\manual\\poshgit> cpack\nSource chocolatey already disabled\nSource chocolateyHttp already exists\nCalling 'C:\\Documents and Settings\\All Users\\Application Data\\chocolatey\\chocola\nteyinstall\\nuget.exe pack  -NoPackageAnalysis -NonInteractive'.\nAttempting to build package from 'poshgit.nuspec'.\nSuccessfully created package 'C:\\code\\mine\\chocolatey-packages\\manual\\poshgit\\po\nshgit.0.4.0.20120717.nupkg'.\nPS C:\\code\\mine\\chocolatey-packages\\manual\\poshgit> echo $LastExitCode\n0\n\u2014\nReply to this email directly or view it on GitHub.\n. I did, that doesn't solve it.\n\nOn 19 aug 2014, at 13:44, Rob Reynolds notifications@github.com wrote:\n\nCould it be that cpack gives me an error message at the start of the operation?\nI think that is precisely it, but why are you getting this? Close and reopen your shell once you install.\n\u2014\nReply to this email directly or view it on GitHub.\n. No, also chocolatey.exe\n\nOn 19 aug 2014, at 13:47, Rob Reynolds notifications@github.com wrote:\n\nIs is just cpack that spews the message?\n\u2014\nReply to this email directly or view it on GitHub.\n. @ferventcoder Thank you, you found the culprit, I would never have ventured to that registry key by myself...\n\n```\nPS X:> Get-ItemProperty \"hkcu:\\Software\\Microsoft\\Command Processor\"\nPathCompletionChar : 9\nEnableExtensions   : 1\nCompletionChar     : 9\nDefaultColor       : 0\nAutoRun            : (if %ANSICON_VER%==^%ANSICON_VER^% \"C:\\Chocolatey\\lib\\ansicon.1.5.0.2\\tools\\ansicon\\ansicon\" -p)\nPSPath             : Microsoft.PowerShell.Core\\Registry::HKEY_CURRENT_USER\\Software\\Microsoft\\Command Processor\nPSParentPath       : Microsoft.PowerShell.Core\\Registry::HKEY_CURRENT_USER\\Software\\Microsoft\nPSChildName        : Command Processor\nPSDrive            : HKCU\nPSProvider         : Microsoft.PowerShell.Core\\Registry\n```\nThat's the incorrect path of ansicon after the chocolatey move, fixing it fixed the problem.\n. If it's XMAS then I wish for an upgrade-script, down-grade script, full uninstall (with remove files) script, uninstall script and finally I wish for you to have a more structured set of functions like this in your environment.\n. +1 \n\nHard to do continuous deployment without this command.\n. Could it be that cpack gives me an error message at the start of the operation?\nThe system cannot find the path specified.\nDEBUG: Running 'Append-InstallLog' with chocoInstallLog:''\nDEBUG: Arguments: $command = 'pack'|$force=False\n|$prerelease=False|$packageNames=''\n|$source=''\n|$version=''|$allVersions=False\n|$overrideArguments=False|$InstallArguments=''\n|$localonly=False|$verbosity=False|$debug=True|$quiet=False\n|$name=''|$ignoreDependencies=False|$forceX86=False\n|$packageParameters=''\n|PowerShellVersion=3.0|OSVersion=6.2.9200.0\nDEBUG: Running 'Chocolatey-Pack' for . If nuspec name is not passed, it will find the nuspec file in the current\nworking directory\nCalling 'C:\\ProgramData\\chocolatey\\chocolateyinstall\\nuget.exe pack  -NoPackageAnalysis -NonInteractive'.\nAttempting to build package from 'Intelliplan.Svc.nuspec'.\nSuccessfully created package 'X:\\build\\Intelliplan.Svc\\Intelliplan.Svc.1.6.3.nupkg'.\nOn 19 aug 2014, at 13:38, Rob Reynolds notifications@github.com wrote:\n\nAttempting this against latest code base\nC:\\code\\mine\\chocolatey-packages\\manual\\poshgit>choco\nPlease run chocolatey /? or chocolatey help - chocolatey v0.9.8.28-alpha2\nC:\\code\\mine\\chocolatey-packages\\manual\\poshgit>cpack -debug\nDEBUG: Running 'Append-InstallLog' with chocoInstallLog:''\nDEBUG: Arguments: $command = 'pack'|$force=False\n|$prerelease=False|$packageNames=''\n|$source=''\n|$version=''|$allVersions=False\n|$overrideArguments=False|$InstallArguments=''\n|$localonly=False|$verbosity=False|$debug=True|$quiet=False\n|$name=''|$ignoreDependencies=False|$forceX86=False\n|$packageParameters=''\n|PowerShellVersion=2.0|OSVersion=6.1.7601.65536\nDEBUG: Current Security Protocol - Ssl3, Tls\nDEBUG: Running 'Chocolatey-Pack' for . If nuspec name is not passed, it will find the nuspec file in the current working directory\nCalling 'C:\\ProgramData\\chocolatey\\chocolateyInstall\\nuget.exe pack  -NoPackageAnalysis -NonInteractive'.\nAttempting to build package from 'poshgit.nuspec'.\nSuccessfully created package 'C:\\code\\mine\\chocolatey-packages\\manual\\poshgit\\poshgit.0.4.0.20120717.nupkg'.\nC:\\code\\mine\\chocolatey-packages\\manual\\poshgit>echo %ERRORLEVEL%\n0\nC:\\code\\mine\\chocolatey-packages\\manual\\poshgit [master]> cpack -debug\nDEBUG: Running 'Append-InstallLog' with chocoInstallLog:''\nDEBUG: Arguments: $command = 'pack'|$force=False\n|$prerelease=False|$packageNames=''\n|$source=''\n|$version=''|$allVersions=False\n|$overrideArguments=False|$InstallArguments=''\n|$localonly=False|$verbosity=False|$debug=True|$quiet=False\n|$name=''|$ignoreDependencies=False|$forceX86=False\n|$packageParameters=''\n|PowerShellVersion=2.0|OSVersion=6.1.7601.65536\nDEBUG: Current Security Protocol - Ssl3, Tls\nDEBUG: Running 'Chocolatey-Pack' for . If nuspec name is not passed, it will find the nuspec file in the current working directory\nCalling 'C:\\ProgramData\\chocolatey\\chocolateyInstall\\nuget.exe pack  -NoPackageAnalysis -NonInteractive'.\nAttempting to build package from 'poshgit.nuspec'.\nSuccessfully created package 'C:\\code\\mine\\chocolatey-packages\\manual\\poshgit\\poshgit.0.4.0.20120717.nupkg'.\nC:\\code\\mine\\chocolatey-packages\\manual\\poshgit [master]> echo $LASTEXITCODE\n0\n\u2014\nReply to this email directly or view it on GitHub.\n. OK, I see. How can I know what Chocolatey isn't finding the path of then?\n\nOn 19 aug 2014, at 13:43, Rob Reynolds notifications@github.com wrote:\n\nOn a different system with 0.9.8.27 installed:\nC:\\code\\mine\\chocolatey-packages\\manual\\poshgit>choco\nSource chocolatey already disabled\nSource chocolateyHttp already exists\nPlease run chocolatey /? or chocolatey help - chocolatey v0.9.8.27\ncmd.exe:\nC:\\code\\mine\\chocolatey-packages\\manual\\poshgit>cpack\nSource chocolatey already disabled\nSource chocolateyHttp already exists\nCalling 'C:\\Documents and Settings\\All Users\\Application Data\\chocolatey\\chocola\nteyinstall\\nuget.exe pack  -NoPackageAnalysis -NonInteractive'.\nAttempting to build package from 'poshgit.nuspec'.\nSuccessfully created package 'C:\\code\\mine\\chocolatey-packages\\manual\\poshgit\\po\nshgit.0.4.0.20120717.nupkg'.\nC:\\code\\mine\\chocolatey-packages\\manual\\poshgit>echo %ERRORLEVEL%\n0\npowershell:\nPS C:\\code\\mine\\chocolatey-packages\\manual\\poshgit> cpack\nSource chocolatey already disabled\nSource chocolateyHttp already exists\nCalling 'C:\\Documents and Settings\\All Users\\Application Data\\chocolatey\\chocola\nteyinstall\\nuget.exe pack  -NoPackageAnalysis -NonInteractive'.\nAttempting to build package from 'poshgit.nuspec'.\nSuccessfully created package 'C:\\code\\mine\\chocolatey-packages\\manual\\poshgit\\po\nshgit.0.4.0.20120717.nupkg'.\nPS C:\\code\\mine\\chocolatey-packages\\manual\\poshgit> echo $LastExitCode\n0\n\u2014\nReply to this email directly or view it on GitHub.\n. I did, that doesn't solve it.\n\nOn 19 aug 2014, at 13:44, Rob Reynolds notifications@github.com wrote:\n\nCould it be that cpack gives me an error message at the start of the operation?\nI think that is precisely it, but why are you getting this? Close and reopen your shell once you install.\n\u2014\nReply to this email directly or view it on GitHub.\n. No, also chocolatey.exe\n\nOn 19 aug 2014, at 13:47, Rob Reynolds notifications@github.com wrote:\n\nIs is just cpack that spews the message?\n\u2014\nReply to this email directly or view it on GitHub.\n. @ferventcoder Thank you, you found the culprit, I would never have ventured to that registry key by myself...\n\n```\nPS X:> Get-ItemProperty \"hkcu:\\Software\\Microsoft\\Command Processor\"\nPathCompletionChar : 9\nEnableExtensions   : 1\nCompletionChar     : 9\nDefaultColor       : 0\nAutoRun            : (if %ANSICON_VER%==^%ANSICON_VER^% \"C:\\Chocolatey\\lib\\ansicon.1.5.0.2\\tools\\ansicon\\ansicon\" -p)\nPSPath             : Microsoft.PowerShell.Core\\Registry::HKEY_CURRENT_USER\\Software\\Microsoft\\Command Processor\nPSParentPath       : Microsoft.PowerShell.Core\\Registry::HKEY_CURRENT_USER\\Software\\Microsoft\nPSChildName        : Command Processor\nPSDrive            : HKCU\nPSProvider         : Microsoft.PowerShell.Core\\Registry\n```\nThat's the incorrect path of ansicon after the chocolatey move, fixing it fixed the problem.\n. If it's XMAS then I wish for an upgrade-script, down-grade script, full uninstall (with remove files) script, uninstall script and finally I wish for you to have a more structured set of functions like this in your environment.\n. +1 \n\nHard to do continuous deployment without this command.\n. ",
    "carolynvs": "After moving Get-TempDir into src/helper/functions I have run into the dependency issue you warned me of. Once in the helpers directory, Get-TempDir is unable to use src/functions/Get-ConfigValue.\nI don't understand the difference between src/functions and src/helper/functions. How would you recommend that I proceed?\n. After moving Get-TempDir into src/helper/functions I have run into the dependency issue you warned me of. Once in the helpers directory, Get-TempDir is unable to use src/functions/Get-ConfigValue.\nI don't understand the difference between src/functions and src/helper/functions. How would you recommend that I proceed?\n. ",
    "Valknjoggr": "Thanks for the quick reply.\nprivate.feed.ca is just a name I used to hide my private feed server from the world. I totally trust it as I made all the nuget listings on it. Sorry for any confusion.\nHere is a test with v0.9.8.27.\n\nC:\\admin\\Chocolatey\\bin>choco install greenfoot -source http://private.feed.ca/PhpNuget3/nuget\nChocolatey (v0.9.8.27) is installing 'greenfoot' and dependencies. By installing you accept the \nlicense for 'greenfoot' and each dependency you are installing.\n'mediacoder 0.8.31.5645' already installed.  If you want to reinstall the current version of an \nexisting package, please use the -force command.\nFinished installing 'greenfoot' and dependencies - if errors not shown in console, none detected. > Check log for errors if unsure.\n\nAgain the wrong package is selected.\nIt appears the version comparsion was a red herring, just happened to sort of match up the first time. \n.  As debug and fiddler output have sensitive information, files have been shared with ferventcoder, via g+. \n. I've tried to alert +RobReynolds_FerventCoder gain in G+. If my G+ skills lacking, and if there's a better way to get these files to you, please let me know.\n. Thanks for the quick reply.\nprivate.feed.ca is just a name I used to hide my private feed server from the world. I totally trust it as I made all the nuget listings on it. Sorry for any confusion.\nHere is a test with v0.9.8.27.\n\nC:\\admin\\Chocolatey\\bin>choco install greenfoot -source http://private.feed.ca/PhpNuget3/nuget\nChocolatey (v0.9.8.27) is installing 'greenfoot' and dependencies. By installing you accept the \nlicense for 'greenfoot' and each dependency you are installing.\n'mediacoder 0.8.31.5645' already installed.  If you want to reinstall the current version of an \nexisting package, please use the -force command.\nFinished installing 'greenfoot' and dependencies - if errors not shown in console, none detected. > Check log for errors if unsure.\n\nAgain the wrong package is selected.\nIt appears the version comparsion was a red herring, just happened to sort of match up the first time. \n.  As debug and fiddler output have sensitive information, files have been shared with ferventcoder, via g+. \n. I've tried to alert +RobReynolds_FerventCoder gain in G+. If my G+ skills lacking, and if there's a better way to get these files to you, please let me know.\n. ",
    "couchand": "It was indeed only on a particular fresh install on a virtual image that I converted from Parallels to VirtualBox, so not exactly a critical use case.  I've been unable to replicate it in any other case so I'm just closing this.\n. It was indeed only on a particular fresh install on a virtual image that I converted from Parallels to VirtualBox, so not exactly a critical use case.  I've been unable to replicate it in any other case so I'm just closing this.\n. ",
    "asgeirn": "I agree with you that it's mainly the responsibility of upstream packages to do removal, but this leaves Chocolatey with a decision to make wrt packages that are less well behaved.\nArguably my sample set might not have been representative -- I tried Atom, cwrsync, mingw, and cygwin.    None of these were MSI based, and none of them registered with Programs and Features, or sported any uninstallation commands.\n. And I suppose it's always going to be like this -- some packages are well kept in this regard, others leave something wanted.\nBut I would very much like Chocolatey to try to improve this where it can.\n. I agree with you that it's mainly the responsibility of upstream packages to do removal, but this leaves Chocolatey with a decision to make wrt packages that are less well behaved.\nArguably my sample set might not have been representative -- I tried Atom, cwrsync, mingw, and cygwin.    None of these were MSI based, and none of them registered with Programs and Features, or sported any uninstallation commands.\n. And I suppose it's always going to be like this -- some packages are well kept in this regard, others leave something wanted.\nBut I would very much like Chocolatey to try to improve this where it can.\n. ",
    "JVimes": "@mwrock, I think you originally wrote the helper. I'm not familiar with the finer details of file association/creation, but maybe Windows Explorer is expecting Notepad++ to have a hook to create .txt files, and it doesn't. Or maybe something is actually inconsistent in the registry.\n. @ferventcoder Let me know what I can do to help. The menu entry is there by default, and it does appear the particular registry data change is what caused the entry to disappear. \n\n. Is there perhaps an ftype argument that adds the label? Either way, thanks\nfor debugging. :)  While you're in the code, I noticed the command opens a\nnew shell window each time. Is that on purpose?\nOn Mon, Sep 1, 2014 at 8:55 PM, Matt Wrock notifications@github.com wrote:\n\nI just did a little research and experimentation and figured out the\nissue. The chocolatey helper uses the DOS commands assoc and ftype to\nmanipulate the association which in turn edits HKCR registry entries. This\nis all a bit wonky. For example if you change associations using the\nwindows explorer gui, it changes a different set in HKCU and will give\nprecedence to that.\nAnyways the problem with the \"New\" context menu is that when ftype\ncreates the new \"content type\" it does not give it a label. The readable\ntext that appears next to each item in the menu. I tried manually adding\nthat to the registry and then the new item appeared.\nSo the fix is pretty straight forward. The command will just need to edit\nthe registry entry after calling fype. When I wrote the helper, I wanted\nto avoid direct registry editing and did not notice the missing New context\nmenu item . As I have many times learned, direct registry editing is a core\naspect that makes up the joy of windows automation Therefore I will be\nhappily adding a PR to do just that after I slip into something a little\nmore comfortable a little later.\n\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/563#issuecomment-54104747\n.\n. I manually installed the two modified files and tried it out. After running the command above, it still opens .txt files in Notepad by default, not Notepad++. Windows 8.1 does tell me \"you have new applications that can open this type of file\" and Notepad++ is on the list. Is that the intended behavior?  Also, the New menu now has \"Notepad++.exe file\" instead of \"text file\", like it would say if I manually tell it to use Notepad++ as the default .txt editor. It's a step in the right direction, but a little unexpected.\n. I've seen those new instruction prompts, too. I wonder if those apps are limited because they aren't running elevated. Worth a little digging. I see that Ftype txtfile=C:\\Program Files (x86)\\Notepad++\\notepad++.exe %1 works for me in an elevated cmd prompt on Windows 10.\n. If the errors are unrelated, is this ready for merge, then?\n. Hah. Never mind. Please close this issue. The problem/solution proposed in the comment thread were a red herring. It fails the first install, but works on the second install (in a row) regardless of which Chocolatey installation alias is used :stuck_out_tongue_closed_eyes:  This makes me think the bug is in the package.\n. @mwrock, I think you originally wrote the helper. I'm not familiar with the finer details of file association/creation, but maybe Windows Explorer is expecting Notepad++ to have a hook to create .txt files, and it doesn't. Or maybe something is actually inconsistent in the registry.\n. @ferventcoder Let me know what I can do to help. The menu entry is there by default, and it does appear the particular registry data change is what caused the entry to disappear. \n\n\n. Is there perhaps an ftype argument that adds the label? Either way, thanks\nfor debugging. :)  While you're in the code, I noticed the command opens a\nnew shell window each time. Is that on purpose?\nOn Mon, Sep 1, 2014 at 8:55 PM, Matt Wrock notifications@github.com wrote:\n\nI just did a little research and experimentation and figured out the\nissue. The chocolatey helper uses the DOS commands assoc and ftype to\nmanipulate the association which in turn edits HKCR registry entries. This\nis all a bit wonky. For example if you change associations using the\nwindows explorer gui, it changes a different set in HKCU and will give\nprecedence to that.\nAnyways the problem with the \"New\" context menu is that when ftype\ncreates the new \"content type\" it does not give it a label. The readable\ntext that appears next to each item in the menu. I tried manually adding\nthat to the registry and then the new item appeared.\nSo the fix is pretty straight forward. The command will just need to edit\nthe registry entry after calling fype. When I wrote the helper, I wanted\nto avoid direct registry editing and did not notice the missing New context\nmenu item . As I have many times learned, direct registry editing is a core\naspect that makes up the joy of windows automation Therefore I will be\nhappily adding a PR to do just that after I slip into something a little\nmore comfortable a little later.\n\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/563#issuecomment-54104747\n.\n. I manually installed the two modified files and tried it out. After running the command above, it still opens .txt files in Notepad by default, not Notepad++. Windows 8.1 does tell me \"you have new applications that can open this type of file\" and Notepad++ is on the list. Is that the intended behavior?  Also, the New menu now has \"Notepad++.exe file\" instead of \"text file\", like it would say if I manually tell it to use Notepad++ as the default .txt editor. It's a step in the right direction, but a little unexpected.\n. I've seen those new instruction prompts, too. I wonder if those apps are limited because they aren't running elevated. Worth a little digging. I see that Ftype txtfile=C:\\Program Files (x86)\\Notepad++\\notepad++.exe %1 works for me in an elevated cmd prompt on Windows 10.\n. If the errors are unrelated, is this ready for merge, then?\n. Hah. Never mind. Please close this issue. The problem/solution proposed in the comment thread were a red herring. It fails the first install, but works on the second install (in a row) regardless of which Chocolatey installation alias is used :stuck_out_tongue_closed_eyes:  This makes me think the bug is in the package.\n. \n",
    "dragon788": "@JVimes I think this is a new behaviour of Windows (that sucks) where they are preventing programs (potentially maliciously) from taking over file associations. This has meant that web browsers and multimedia programs have to tell you how to change the association, they can't simply do it themselves anymore. I've seen this more in Windows 10, but I do recall seeing it back in Windows 8.x as well.\n. I took a screenshot from server-jre since there were no comments there so it make the cropping easier.\nhttps://chocolatey.org/packages/server-jre\n\n. @svnpenn The challenge may be that Chocolatey actually downloads a nupkg from Chocolatey.org first, so are you wanting it to grab the package (.deb) or the actual installer from inside the package (exe pointed to by chocolateyInstall.ps1)? I believe that in the paid versions of Chocolatey they have added a function to just grab the nupkg for modification, and I'd wager you want the latter behavior of getting the installer itself, in this case I agree this would be somewhat handy if you were doing a setup where you wanted to cache all the packages to convert them to internally sourced installs instead of going outside of an enterprise network.\n. @JVimes I think this is a new behaviour of Windows (that sucks) where they are preventing programs (potentially maliciously) from taking over file associations. This has meant that web browsers and multimedia programs have to tell you how to change the association, they can't simply do it themselves anymore. I've seen this more in Windows 10, but I do recall seeing it back in Windows 8.x as well.\n. I took a screenshot from server-jre since there were no comments there so it make the cropping easier.\nhttps://chocolatey.org/packages/server-jre\n\n. @svnpenn The challenge may be that Chocolatey actually downloads a nupkg from Chocolatey.org first, so are you wanting it to grab the package (.deb) or the actual installer from inside the package (exe pointed to by chocolateyInstall.ps1)? I believe that in the paid versions of Chocolatey they have added a function to just grab the nupkg for modification, and I'd wager you want the latter behavior of getting the installer itself, in this case I agree this would be somewhat handy if you were doing a setup where you wanted to cache all the packages to convert them to internally sourced installs instead of going outside of an enterprise network.\n. ",
    "kwill": "Thanks!\n. Thanks!\n. ",
    "bmedlin": "I've had the same problem. The exception thrown from my package's chocolateyInstall.ps1 is not bubbling up - it is being caught in Chocolatey-Nuget.ps1 and not re-thrown (~line 93). There appears to be an attempt to fail the package by setting $chocolateyErrored to $true, but this variable is false again by the time it is evaluated in chocolatey.ps1. Re-throwing the exception appears to resolve the issue. \n. I've had the same problem. The exception thrown from my package's chocolateyInstall.ps1 is not bubbling up - it is being caught in Chocolatey-Nuget.ps1 and not re-thrown (~line 93). There appears to be an attempt to fail the package by setting $chocolateyErrored to $true, but this variable is false again by the time it is evaluated in chocolatey.ps1. Re-throwing the exception appears to resolve the issue. \n. ",
    "bean5": "Sorry, I was escaping the search for a github user by the name of powershell. I updated it to be correct.\n. Will move.\n. Sorry, I was escaping the search for a github user by the name of powershell. I updated it to be correct.\n. Will move.\n. ",
    "bennyhat": "This also appears to affect other files that use Wait-Process, such as Chocolatey-Pack\n. You are correct - 516 appears to be the same. My mistake! I need to improve my searching skills!\n. No worries! Glad to hear that you're doing a rewrite. Sorry for not contacting you first about this.\nBen\n. This also appears to affect other files that use Wait-Process, such as Chocolatey-Pack\n. You are correct - 516 appears to be the same. My mistake! I need to improve my searching skills!\n. No worries! Glad to hear that you're doing a rewrite. Sorry for not contacting you first about this.\nBen\n. ",
    "Stanzilla": "That would/could be a flag in the package manifest, no?\n. Will do!\n. I only found https://github.com/chocolatey/chocolatey/issues/259 and @ferventcoder said that this is something chocolatey will do with v1. Question though, is this already planned out or is the how still open?\n. @ferventcoder Good news, man! Is there already a repo for it?\n. @ferventcoder any ETA on that? Where is the repo for it?\n. Alright, will do! Thanks!\n. That worked, thanks!\n. That message will be removed soon enough, but it still might be a good idea to add a way to toggle settings via commands.\n. That would/could be a flag in the package manifest, no?\n. Will do!\n. I only found https://github.com/chocolatey/chocolatey/issues/259 and @ferventcoder said that this is something chocolatey will do with v1. Question though, is this already planned out or is the how still open?\n. @ferventcoder Good news, man! Is there already a repo for it?\n. @ferventcoder any ETA on that? Where is the repo for it?\n. Alright, will do! Thanks!\n. That worked, thanks!\n. That message will be removed soon enough, but it still might be a good idea to add a way to toggle settings via commands.\n. ",
    "smikims": "OK I changed the %ChocolateyBinRoot% variable (and another one with a similar name) back to C:\\tools and it seems to work OK now. No idea how that got changed in the first place. Leaving the issue open as it was extremely confusing and way too easy to do and I never touched that variable myself until I figured out that was the problem.\n. Can packages change environment variables (other than %PATH%) like that? I just installed chocolatey for the first time yesterday so I'm still figuring out how the whole thing works.\n. OK I changed the %ChocolateyBinRoot% variable (and another one with a similar name) back to C:\\tools and it seems to work OK now. No idea how that got changed in the first place. Leaving the issue open as it was extremely confusing and way too easy to do and I never touched that variable myself until I figured out that was the problem.\n. Can packages change environment variables (other than %PATH%) like that? I just installed chocolatey for the first time yesterday so I'm still figuring out how the whole thing works.\n. ",
    "fibric": "i have no idea about powershell. on my mac i dont have it. i try to draw a picture.\nwhat about having a global read_file function and a global write_file function.\nboth do nothing else then read file and inside a looped try-catch and when ever an exception is catched which is about file access than a timeout is 'executed' and read or write loop is continued.\nread_file x\n    while true\n        try\n            read file x\n        catch exception ex\n            if ex is about file access\n                timeout 200ms\n                continue\n            else\n                bubble up ex\nthat would be my idea. wait 200ms then try again if an access exception was catched. all other exception (no permissions etc) should be bubbled up the chain like it is today.\nthis write function knows maybe some more exception types to continue after waiting. that is why i think about 2 functions.\n. okay so what is the time horizon for this issue?\n. i have no idea about powershell. on my mac i dont have it. i try to draw a picture.\nwhat about having a global read_file function and a global write_file function.\nboth do nothing else then read file and inside a looped try-catch and when ever an exception is catched which is about file access than a timeout is 'executed' and read or write loop is continued.\nread_file x\n    while true\n        try\n            read file x\n        catch exception ex\n            if ex is about file access\n                timeout 200ms\n                continue\n            else\n                bubble up ex\nthat would be my idea. wait 200ms then try again if an access exception was catched. all other exception (no permissions etc) should be bubbled up the chain like it is today.\nthis write function knows maybe some more exception types to continue after waiting. that is why i think about 2 functions.\n. okay so what is the time horizon for this issue?\n. ",
    "AxCoder": "Clarification - I did not mean default proxy - proxy is bypassed in my case according to IE settings - just use credentials for the site.\n. Clarification - I did not mean default proxy - proxy is bypassed in my case according to IE settings - just use credentials for the site.\n. ",
    "MetaMemoryT": ":+1: for Atom\n. :+1: for Atom\n. ",
    "kbauer": "Regarding shims vs mklink: Back when I still used Windows XP I used Windows's *.LNK files as shims for programs I wanted to start from the commandline. \nThe link contents just have to be \n\"EXECUTABLEPATH\" %*\nInstead of just \"EXECUTABLEPATH\", with execution path set appropriately. Then you need to add .LNK to the PATHEXT variable. \nIn order to allow calling the program as COMMAND.exe, adding a second link COMMAND.exe.lnk might do the trick.\nOne advantage of LNK files would be that it inherits the executable's icon. I am not aware of disadvantages. Sadly I'm also not aware of how to generate .LNK files.\n. Regarding shims vs mklink: Back when I still used Windows XP I used Windows's *.LNK files as shims for programs I wanted to start from the commandline. \nThe link contents just have to be \n\"EXECUTABLEPATH\" %*\nInstead of just \"EXECUTABLEPATH\", with execution path set appropriately. Then you need to add .LNK to the PATHEXT variable. \nIn order to allow calling the program as COMMAND.exe, adding a second link COMMAND.exe.lnk might do the trick.\nOne advantage of LNK files would be that it inherits the executable's icon. I am not aware of disadvantages. Sadly I'm also not aware of how to generate .LNK files.\n. ",
    "chernosliv": "sorry guys, I should've considered this. Looks like caused by proxy.\n. sorry guys, I should've considered this. Looks like caused by proxy.\n. ",
    "dhilgarth": "Thanks for the info. I just contacted them.\n. PowerArgs has this feature built in: https://github.com/adamabdelhamed/PowerArgs#tab-completion\nI am pretty sure this is salvageable in a way to support dynamic data, like the list of packages.\n. This issue should go into https://github.com/chocolatey/choco, sorry. I tested this with 0.9.9-rc8. I will create a new issue over there.\n--> https://github.com/chocolatey/choco/issues/126\n. Thanks for the info. I just contacted them.\n. PowerArgs has this feature built in: https://github.com/adamabdelhamed/PowerArgs#tab-completion\nI am pretty sure this is salvageable in a way to support dynamic data, like the list of packages.\n. This issue should go into https://github.com/chocolatey/choco, sorry. I tested this with 0.9.9-rc8. I will create a new issue over there.\n--> https://github.com/chocolatey/choco/issues/126\n. ",
    "DanTup": "I don't have one :(\nhttps://github.com/DanTup/Chocolatey-Packages/blob/master/Dartium/chocolateyInstall.ps1\nI did read through the Chocolatey code briefly but couldn't understand why it was happening :(\n. Example:\n```\nPS M:\\Coding> cinst dart-sdk\nPATH environment variable does not have M:\\Apps\\dart-sdk\\bin in it. Adding...\nPATH environment variable does not have C:\\Users\\Danny\\AppData\\Roaming\\Pub\\Cache\\bin in it. \nPS M:\\Coding> cinst dart-sdk -force\nPATH environment variable does not have M:\\Apps\\dart-sdk\\bin in it. Adding...\nPATH environment variable does not have C:\\Users\\Danny\\AppData\\Roaming\\Pub\\Cache\\bin in it. Adding...\n```\n. The path I pasted was copied from the Windows Advanced System Settings -> Environment Variables section.\nI think this is reliably reproducible if you run the commands I included (cinst dart-sdk then cinst dart-sdk -force).\n. I don't have one :(\nhttps://github.com/DanTup/Chocolatey-Packages/blob/master/Dartium/chocolateyInstall.ps1\nI did read through the Chocolatey code briefly but couldn't understand why it was happening :(\n. Example:\n```\nPS M:\\Coding> cinst dart-sdk\nPATH environment variable does not have M:\\Apps\\dart-sdk\\bin in it. Adding...\nPATH environment variable does not have C:\\Users\\Danny\\AppData\\Roaming\\Pub\\Cache\\bin in it. \nPS M:\\Coding> cinst dart-sdk -force\nPATH environment variable does not have M:\\Apps\\dart-sdk\\bin in it. Adding...\nPATH environment variable does not have C:\\Users\\Danny\\AppData\\Roaming\\Pub\\Cache\\bin in it. Adding...\n```\n. The path I pasted was copied from the Windows Advanced System Settings -> Environment Variables section.\nI think this is reliably reproducible if you run the commands I included (cinst dart-sdk then cinst dart-sdk -force).\n. ",
    "frankred": "No it does not cause problems (I just removed my welcome message, now everything is clean). I thought maybe you are interested in this \"problem\".  \nGood Luck\nFrank Roth\n. No it does not cause problems (I just removed my welcome message, now everything is clean). I thought maybe you are interested in this \"problem\".  \nGood Luck\nFrank Roth\n. ",
    "kaiaie": "@ferventcoder both machines are running PowerShell 2.0\nI upgraded chocolatey on the Win7 box to 0.9.8.28 and tried reinstalling xmlstarlet but got the same error.\n. Installing the app without chocolatey is easy enough-- it's just a .zip file, no msi installer or anything (http://sourceforge.net/projects/xmlstar/files/). In other words, this is not a blocker for me, it's just odd that chocolatey fails for this one package on this one machine and works fine elsewhere...\n. @ferventcoder both machines are running PowerShell 2.0\nI upgraded chocolatey on the Win7 box to 0.9.8.28 and tried reinstalling xmlstarlet but got the same error.\n. Installing the app without chocolatey is easy enough-- it's just a .zip file, no msi installer or anything (http://sourceforge.net/projects/xmlstar/files/). In other words, this is not a blocker for me, it's just odd that chocolatey fails for this one package on this one machine and works fine elsewhere...\n. ",
    "calvn": "Seems that I am running into this issue with chocolatey 0.9.9.8\n```\n2015-06-29 15:30:22,809 [INFO ] - ============================================================\n2015-06-29 15:30:22,809 [INFO ] - Chocolatey v0.9.9.8\n2015-06-29 15:30:22,825 [DEBUG] - Chocolatey is running on Windows v 6.1.7601.65536\n2015-06-29 15:30:22,825 [DEBUG] - Attempting to delete file \"C:/ProgramData/chocolatey/choco.exe.old\".\n2015-06-29 15:30:22,825 [DEBUG] - Attempting to delete file \"C:\\ProgramData\\chocolatey\\choco.exe.old\".\n2015-06-29 15:30:22,825 [DEBUG] - Command line: \"C:\\ProgramData\\chocolatey\\choco.exe\" install consul -version 0.5.2.2015052201 -dvy -source C:/Users/vagrant/AppData/Local/Temp\n2015-06-29 15:30:22,825 [DEBUG] - Received arguments: install consul -version 0.5.2.2015052201 -dvy -source C:/Users/vagrant/AppData/Local/Temp\n2015-06-29 15:30:22,872 [DEBUG] - \nNOTE: Hiding sensitive configuration data! Please double and triple \n check to be sure no sensitive data is shown, especially if copying \n output to a gist for review.\n2015-06-29 15:30:22,887 [DEBUG] - Configuration: CommandName='install'|\nCacheLocation='C:\\Users\\vagrant\\AppData\\Local\\Temp'|\nContainsLegacyPackageInstalls='True'|\nCommandExecutionTimeoutSeconds='2700'|\nSources='C:/Users/vagrant/AppData/Local/Temp'|Debug='True'|\nVerbose='True'|Force='False'|Noop='False'|HelpRequested='False'|\nRegularOutput='True'|PromptForConfirmation='False'|\nAcceptLicense='True'|\nAllowUnofficialBuild='False'|Input='consul'|Version='0.5.2.2015052201'|\nAllVersions='False'|SkipPackageInstallProvider='False'|\nPackageNames='consul'|Prerelease='False'|ForceX86='False'|\nOverrideArguments='False'|NotSilent='False'|IgnoreDependencies='False'|\nAllowMultipleVersions='False'|ForceDependencies='False'|\nInformation.PlatformType='Windows'|\nInformation.PlatformVersion='6.1.7601.65536'|\nInformation.PlatformName='Windows Server 2008 R2'|\nInformation.ChocolateyVersion='0.9.9.8'|\nInformation.ChocolateyProductVersion='0.9.9.8'|\nInformation.FullName='choco, Version=0.9.9.8, Culture=neutral, PublicKeyToken=79d02ea9cad655eb'|\nInformation.Is64Bit='True'|Information.IsInteractive='False'|\nInformation.IsUserAdministrator='True'|\nInformation.IsProcessElevated='True'|Features.AutoUninstaller='False'|\nFeatures.CheckSumFiles='True'|Features.FailOnAutoUninstaller='False'|\nListCommand.LocalOnly='False'|\nListCommand.IncludeRegistryPrograms='False'|\nUpgradeCommand.FailOnUnfound='False'|\nUpgradeCommand.FailOnNotInstalled='False'|\nUpgradeCommand.NotifyOnlyAvailableUpgrades='False'|\nNewCommand.AutomaticPackage='False'|SourceCommand.Command='unknown'|\nFeatureCommand.Command='unknown'|PushCommand.TimeoutInSeconds='0'|\nPinCommand.Command='unknown'|\n2015-06-29 15:30:22,887 [DEBUG] - _ Chocolatey:ChocolateyInstallCommand - Normal Run Mode _\n2015-06-29 15:30:22,918 [INFO ] - Installing the following packages:\n2015-06-29 15:30:22,918 [INFO ] - consul\n2015-06-29 15:30:22,918 [INFO ] - By installing you accept licenses for the packages.\n2015-06-29 15:30:23,231 [INFO ] - [NuGet] Installing 'consul 0.5.2.2015052201'.\n2015-06-29 15:30:23,247 [DEBUG] - [NuGet] Added file '0.5.2_SHA256SUMS' to folder 'consul\\binaries'.\n2015-06-29 15:30:23,247 [DEBUG] - [NuGet] Added file '0.5.2_web_ui.zip' to folder 'consul\\binaries'.\n2015-06-29 15:30:23,247 [DEBUG] - [NuGet] Added file '0.5.2_windows_386.zip' to folder 'consul\\binaries'.\n2015-06-29 15:30:23,262 [DEBUG] - [NuGet] Added file 'nssm-2.24.zip' to folder 'consul\\binaries'.\n2015-06-29 15:30:23,262 [DEBUG] - [NuGet] Added file 'chocolateyInstall.ps1' to folder 'consul\\tools'.\n2015-06-29 15:30:23,262 [DEBUG] - [NuGet] Added file 'chocolateyUninstall.ps1' to folder 'consul\\tools'.\n2015-06-29 15:30:23,262 [DEBUG] - [NuGet] Added file 'consul.nupkg' to folder 'consul'.\n2015-06-29 15:30:23,262 [INFO ] - [NuGet] Successfully installed 'consul 0.5.2.2015052201'.\n2015-06-29 15:30:23,262 [INFO ] - \nconsul v0.5.2.2015052201\n2015-06-29 15:30:23,293 [DEBUG] - Contents of 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\chocolateyInstall.ps1':\n2015-06-29 15:30:23,309 [DEBUG] - try {\n  $binariesPath = $(Join-Path (Split-Path -parent $MyInvocation.MyCommand.Definition) \"..\\binaries\\\")\n  $toolsPath = (Split-Path -Parent $MyInvocation.MyCommand.Definition)\n# NSSM related variables\n  $nssmVersion = '2.24'\n  $nssmSourcePath = $(Join-Path $binariesPath \"nssm-$nssmVersion.zip\")\n# Consul related variables\n  $consulVersion = '0.5.2'\n  $sourcePath = $(Join-Path $binariesPath \"$($consulVersion)_windows_386.zip\")\n  $sourcePathUI = $(Join-Path $binariesPath \"$($consulVersion)_web_ui.zip\")\n# Install NSSM locally within consul\n  Get-ChocolateyUnzip $nssmSourcePath $toolsPath\n$folderToIgnore = 'win32'\n  $forderToRun = 'win64'\nif (Get-ProcessorBits 32) {\n    $folderToIgnore = 'win64'\n    $forderToRun = 'win32'\n  }\nSet-Content -Path ($toolsPath + \"\\nssm-$nssmVersion\\$folderToIgnore\\nssm.exe.ignore\") -Value $null\n  $nssmBinPath = ($toolsPath + \"\\nssm-$nssmVersion\\$forderToRun\\nssm.exe\")\n# Unzip and move Consul\n  Get-ChocolateyUnzip  $sourcePath \"$(Split-Path -parent $MyInvocation.MyCommand.Definition)\"\n  Get-ChocolateyUnzip  $sourcePathUI \"$(Split-Path -parent $MyInvocation.MyCommand.Definition)\"\nWrite-Host \"Creating $env:PROGRAMDATA\\consul\\logs\"\n  New-Item -ItemType directory -Path \"$env:PROGRAMDATA\\consul\\logs\" -ErrorAction SilentlyContinue | Out-Null\n  Write-Host \"Creating $env:PROGRAMDATA\\consul\\config\"\n  New-Item -ItemType directory -Path \"$env:PROGRAMDATA\\consul\\config\" -ErrorAction SilentlyContinue | Out-Null\n# Create event log source\n  # User -Force to avoid \"A key at this path already exists\" exception. Overwrite not an issue since key is not further modified\n  $registryPath = 'HKLM:\\SYSTEM\\CurrentControlSet\\services\\eventlog\\Application'\n  New-Item -Path $registryPath -Name consul -Force | Out-Null\n  # Set EventMessageFile value\n  Set-ItemProperty $registryPath\\consul EventMessageFile \"C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\EventLogMessages.dll\" | Out-Null\n#Uninstall service if it already exists. Stops the service first if it's running\n  $service = Get-Service \"consul\" -ErrorAction SilentlyContinue\n  if ($service) {\n    Write-Host \"Uninstalling existing service\"\n    if ($service.Status -eq \"Running\") {\n      Write-Host \"Stopping consul process ...\"\n      net stop consul | Out-Null\n    }\n$service = Get-WmiObject -Class Win32_Service -Filter \"Name='consul'\"\n$service.delete() | Out-Null\n\n}\nWrite-Host \"Installing the consul service\"\n  # Install the service\n  & $nssmBinPath install consul $(Join-Path $toolsPath \"consul.exe\") agent -config-dir=%PROGRAMDATA%\\consul\\config -data-dir=%PROGRAMDATA%\\consul\\data | Out-Null\n  & $nssmBinPath set consul AppEnvironmentExtra GOMAXPROCS=$env:NUMBER_OF_PROCESSORS | Out-Null\n  & $nssmBinPath set consul ObjectName NetworkService | Out-Null\n  & $nssmBinPath set consul AppStdout \"$env:PROGRAMDATA\\consul\\logs\\consul-output.log\" | Out-Null\n  & $nssmBinPath set consul AppStderr \"$env:PROGRAMDATA\\consul\\logs\\consul-error.log\" | Out-Null\n  & $nssmBinPath set consul AppRotateBytes 10485760 | Out-Null\n  & $nssmBinPath set consul AppRotateFiles 1 | Out-Null\n  & $nssmBinPath set consul AppRotateOnline 1 | Out-Null\n# Restart service on failure natively via Windows sc. There is a memory leak if service restart is performed via NSSM\n  # The NSSM configuration will set the default behavior of NSSM to stop the service if\n  # consul fails (for example, unable to resolve cluster) and end the nssm.exe and consul.exe process.\n  # The sc configuration will set Recovery under the Consul service properties such that a new instance will be started on failure,\n  # spawning new nssm.exe and consul.exe processes. In short, nothing changed from a functionality perspective (the service will\n  # still attempt to restart on failure) but this method kills the nssm.exe process thus avoiding memory hog.\n  & $nssmBinPath set consul AppExit Default Exit | Out-Null\n  cmd.exe /c \"sc failure consul reset= 0 actions= restart/60000\" | Out-Null\nWrite-ChocolateySuccess 'consul'\n} catch {\n  Write-ChocolateyFailure 'consul' $($_.Exception.Message)\n  throw\n}\n2015-06-29 15:30:23,309 [DEBUG] - Calling command ['\"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -NoProfile -NoLogo -ExecutionPolicy Bypass -Command \"[System.Threading.Thread]::CurrentThread.CurrentCulture = '';[System.Threading.Thread]::CurrentThread.CurrentUICulture = ''; & import-module -name 'C:\\ProgramData\\chocolatey\\helpers\\chocolateyInstaller.psm1'; & 'C:\\ProgramData\\chocolatey\\helpers\\chocolateyScriptRunner.ps1' -packageScript 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\chocolateyInstall.ps1' -installArguments '' -packageParameters ''\"']\n2015-06-29 15:30:23,950 [ERROR] -  Process with an Id of 2984 is not running.\n2015-06-29 15:30:23,950 [DEBUG] -  DEBUG: Posh version is 2.0\n2015-06-29 15:30:23,950 [INFO ] -  VERBOSE: Exporting function 'Get-BinRoot'.\n2015-06-29 15:30:23,950 [INFO ] -  VERBOSE: Exporting function 'Get-ChecksumValid'.\n2015-06-29 15:30:23,950 [INFO ] -  VERBOSE: Exporting function 'Get-ChocolateyUnzip'.\n2015-06-29 15:30:23,950 [INFO ] -  VERBOSE: Exporting function 'Get-ChocolateyWebFile'.\n2015-06-29 15:30:23,950 [INFO ] -  VERBOSE: Exporting function 'Get-EnvironmentVariable'.\n2015-06-29 15:30:23,950 [INFO ] -  VERBOSE: Exporting function 'Get-EnvironmentVariableNames'.\n2015-06-29 15:30:23,950 [INFO ] -  VERBOSE: Exporting function 'Get-FtpFile'.\n2015-06-29 15:30:23,950 [INFO ] -  VERBOSE: Exporting function 'Get-ProcessorBits'.\n2015-06-29 15:30:23,950 [INFO ] -  VERBOSE: Exporting function 'Get-UACEnabled'.\n2015-06-29 15:30:23,950 [INFO ] -  VERBOSE: Exporting function 'Get-VirusCheckValid'.\n2015-06-29 15:30:23,950 [INFO ] -  VERBOSE: Exporting function 'Get-WebFile'.\n2015-06-29 15:30:23,950 [INFO ] -  VERBOSE: Exporting function 'Get-WebHeaders'.\n2015-06-29 15:30:23,950 [INFO ] -  VERBOSE: Exporting function 'Install-BinFile'.\n2015-06-29 15:30:23,950 [INFO ] -  VERBOSE: Exporting function 'Install-ChocolateyDesktopLink'.\n2015-06-29 15:30:23,950 [INFO ] -  VERBOSE: Exporting function 'Install-ChocolateyEnvironmentVariable'.\n2015-06-29 15:30:23,950 [INFO ] -  VERBOSE: Exporting function 'Install-ChocolateyExplorerMenuItem'.\n2015-06-29 15:30:23,950 [INFO ] -  VERBOSE: Exporting function 'Install-ChocolateyFileAssociation'.\n2015-06-29 15:30:23,950 [INFO ] -  VERBOSE: Exporting function 'Install-ChocolateyInstallPackage'.\n2015-06-29 15:30:23,950 [ERROR] -  At C:\\ProgramData\\chocolatey\\helpers\\functions\\Write-ChocolateyFailure.ps1:24 c\n2015-06-29 15:30:23,950 [ERROR] -  har:8\n2015-06-29 15:30:23,950 [ERROR] -  +   throw <<<<  \"$failureMessage\"\n2015-06-29 15:30:23,950 [ERROR] -      + CategoryInfo          : OperationStopped: (Process with an...is not runn \n2015-06-29 15:30:23,950 [ERROR] -     ing.:String) [], RuntimeException\n2015-06-29 15:30:23,950 [ERROR] -      + FullyQualifiedErrorId : Process with an Id of 2984 is not running.\n2015-06-29 15:30:23,950 [INFO ] -  VERBOSE: Exporting function 'Install-ChocolateyPackage'.\n2015-06-29 15:30:23,950 [INFO ] -  VERBOSE: Exporting function 'Install-ChocolateyPath'.\n2015-06-29 15:30:23,950 [INFO ] -  VERBOSE: Exporting function 'Install-ChocolateyPinnedTaskBarItem'.\n2015-06-29 15:30:23,965 [INFO ] -  VERBOSE: Exporting function 'Install-ChocolateyPowershellCommand'.\n2015-06-29 15:30:23,965 [INFO ] -  VERBOSE: Exporting function 'Install-ChocolateyShortcut'.\n2015-06-29 15:30:23,965 [INFO ] -  VERBOSE: Exporting function 'Install-ChocolateyVsixPackage'.\n2015-06-29 15:30:23,965 [INFO ] -  VERBOSE: Exporting function 'Install-Vsix'.\n2015-06-29 15:30:23,965 [INFO ] -  VERBOSE: Exporting function 'Install-ChocolateyZipPackage'.\n2015-06-29 15:30:23,965 [INFO ] -  VERBOSE: Exporting function 'Set-EnvironmentVariable'.\n2015-06-29 15:30:23,965 [INFO ] -  VERBOSE: Exporting function 'Start-ChocolateyProcessAsAdmin'.\n2015-06-29 15:30:23,965 [INFO ] -  VERBOSE: Exporting function 'Test-ProcessAdminRights'.\n2015-06-29 15:30:23,965 [INFO ] -  VERBOSE: Exporting function 'Uninstall-BinFile'.\n2015-06-29 15:30:23,965 [INFO ] -  VERBOSE: Exporting function 'Uninstall-ChocolateyPackage'.\n2015-06-29 15:30:23,965 [INFO ] -  VERBOSE: Exporting function 'UnInstall-ChocolateyZipPackage'.\n2015-06-29 15:30:23,965 [INFO ] -  VERBOSE: Exporting function 'Update-SessionEnvironment'.\n2015-06-29 15:30:23,965 [INFO ] -  VERBOSE: Exporting function 'Write-ChocolateyFailure'.\n2015-06-29 15:30:23,965 [INFO ] -  VERBOSE: Exporting function 'Write-ChocolateySuccess'.\n2015-06-29 15:30:23,965 [INFO ] -  VERBOSE: Exporting function 'Write-FileUpdateLog'.\n2015-06-29 15:30:23,965 [INFO ] -  VERBOSE: Exporting alias 'Generate-BinFile'.\n2015-06-29 15:30:23,997 [INFO ] -  VERBOSE: Exporting alias 'Add-BinFile'.\n2015-06-29 15:30:23,997 [INFO ] -  VERBOSE: Exporting alias 'Remove-BinFile'.\n2015-06-29 15:30:23,997 [DEBUG] -  DEBUG: Running 'Get-ChocolateyUnzip' with \n2015-06-29 15:30:23,997 [INFO ] -  fileFullPath:'C:\\ProgramData\\chocolatey\\lib\\consul\\tools..\\binaries\\nssm-2.24.\n2015-06-29 15:30:23,997 [INFO ] -  zip'', destination: 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools', \n2015-06-29 15:30:23,997 [INFO ] -  specificFolder: ', packageName: ''\n2015-06-29 15:30:23,997 [INFO ] -  Extracting C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\..\\binaries\\nssm-2.24.zip to C:\\ProgramData\\chocolatey\\lib\\consul\\tools...\n2015-06-29 15:30:23,997 [DEBUG] -  DEBUG: 7zip found at 'C:\\ProgramData\\chocolatey\\tools\\7za.exe'\n2015-06-29 15:30:23,997 [DEBUG] -  DEBUG: calling 7za directly\n2015-06-29 15:30:23,997 [DEBUG] -  DEBUG: Calling 'C:\\ProgramData\\chocolatey\\tools\\7za.exe x -aoa \n2015-06-29 15:30:23,997 [INFO ] -  -o\"C:\\ProgramData\\chocolatey\\lib\\consul\\tools\" -y \n2015-06-29 15:30:23,997 [INFO ] -  \"C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\..\\binaries\\nssm-2.24.zip\"'\n2015-06-29 15:30:23,997 [DEBUG] -  DEBUG: 7za exit code: 0\n2015-06-29 15:30:23,997 [INFO ] -  C:\\ProgramData\\chocolatey\\lib\\consul\\tools\n2015-06-29 15:30:23,997 [DEBUG] -  DEBUG: Running 'Get-ProcessorBits'\n2015-06-29 15:30:23,997 [DEBUG] -  DEBUG: Running 'Get-ChocolateyUnzip' with \n2015-06-29 15:30:23,997 [INFO ] -  fileFullPath:'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\..\\binaries\\0.5.2_wind\n2015-06-29 15:30:23,997 [INFO ] -  ows_386.zip'', destination: 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools', \n2015-06-29 15:30:23,997 [INFO ] -  specificFolder: ', packageName: ''\n2015-06-29 15:30:23,997 [INFO ] -  Extracting C:\\ProgramData\\chocolatey\\lib\\consul\\tools..\\binaries\\0.5.2_windows_386.zip to C:\\ProgramData\\chocolatey\\lib\\consul\\tools...\n2015-06-29 15:30:23,997 [DEBUG] -  DEBUG: 7zip found at 'C:\\ProgramData\\chocolatey\\tools\\7za.exe'\n2015-06-29 15:30:23,997 [DEBUG] -  DEBUG: calling 7za directly\n2015-06-29 15:30:23,997 [DEBUG] -  DEBUG: Calling 'C:\\ProgramData\\chocolatey\\tools\\7za.exe x -aoa \n2015-06-29 15:30:23,997 [INFO ] -  -o\"C:\\ProgramData\\chocolatey\\lib\\consul\\tools\" -y \n2015-06-29 15:30:23,997 [INFO ] -  \"C:\\ProgramData\\chocolatey\\lib\\consul\\tools..\\binaries\\0.5.2_windows_386.zip\"'\n2015-06-29 15:30:24,012 [WARN ] -  WARNING: Write-ChocolateyFailure is deprecated. If you are the package \n2015-06-29 15:30:24,012 [INFO ] -  maintainer, please use 'throw $_.Exception' instead.\n2015-06-29 15:30:24,012 [DEBUG] - Command ['\"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -NoProfile -NoLogo -ExecutionPolicy Bypass -Command \"[System.Threading.Thread]::CurrentThread.CurrentCulture = '';[System.Threading.Thread]::CurrentThread.CurrentUICulture = ''; & import-module -name 'C:\\ProgramData\\chocolatey\\helpers\\chocolateyInstaller.psm1'; & 'C:\\ProgramData\\chocolatey\\helpers\\chocolateyScriptRunner.ps1' -packageScript 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\chocolateyInstall.ps1' -installArguments '' -packageParameters ''\"'] exited with '1'\n2015-06-29 15:30:24,012 [DEBUG] - Calling command ['\"shutdown\" /a']\n2015-06-29 15:30:24,028 [DEBUG] - Command ['\"shutdown\" /a'] exited with '1116'\n2015-06-29 15:30:24,043 [DEBUG] - Capturing package files in 'C:\\ProgramData\\chocolatey\\lib\\consul'\n2015-06-29 15:30:24,075 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\consul.nupkg'\n  with checksum '66A13E5A10A7E7CA1B20EFF2EA2208AC'\n2015-06-29 15:30:24,075 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\binaries\\0.5.2_SHA256SUMS'\n  with checksum '63289EDFB26AFB48E0E4CD8110629D01'\n2015-06-29 15:30:24,075 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\binaries\\0.5.2_web_ui.zip'\n  with checksum 'EB98BA602BC7E177333EB2E520881F4F'\n2015-06-29 15:30:24,090 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\binaries\\0.5.2_windows_386.zip'\n  with checksum 'D5DE018E601DB10850F89C1E81559D4A'\n2015-06-29 15:30:24,090 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\binaries\\nssm-2.24.zip'\n  with checksum 'B2EDD0E4A7A7BE9D157C0DA0EF65B1BC'\n2015-06-29 15:30:24,090 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\chocolateyInstall.ps1'\n  with checksum '60F66EE4FE81706134EB5E8E2072EA65'\n2015-06-29 15:30:24,090 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\chocolateyUninstall.ps1'\n  with checksum 'D3507DFEF5209948F073295CF6484F6B'\n2015-06-29 15:30:24,137 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\consul.exe'\n  with checksum '974432CDFFAF53462789D8A87ED4D518'\n2015-06-29 15:30:24,137 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\ChangeLog.txt'\n  with checksum '205769831FA302018FB26845D3835962'\n2015-06-29 15:30:24,137 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\README.txt'\n  with checksum 'ED2BC805600C380E85FE240E715ABB81'\n2015-06-29 15:30:24,137 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\account.cpp'\n  with checksum 'B432CC0EDDB92622E68C16944EF65E98'\n2015-06-29 15:30:24,137 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\account.h'\n  with checksum 'C1B1DCFDCE66CB24B458B0F34278C8DB'\n2015-06-29 15:30:24,137 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\console.cpp'\n  with checksum '2B504E046DC126E68BFC90056B2C9E60'\n2015-06-29 15:30:24,137 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\console.h'\n  with checksum '9E242CCE5F18C22854F7E417171E5E67'\n2015-06-29 15:30:24,137 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\env.cpp'\n  with checksum 'F49F53D2A1527B35258B33773D048B9C'\n2015-06-29 15:30:24,137 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\env.h'\n  with checksum 'F3C5C5EC2AEAFA00FF4C2FBE5622521C'\n2015-06-29 15:30:24,137 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\event.cpp'\n  with checksum '53CA1240B593D6277E58A9D3334B537C'\n2015-06-29 15:30:24,137 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\event.h'\n  with checksum 'BD2D50FA5FBBB97285F9984E6CD1E4D4'\n2015-06-29 15:30:24,137 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\gui.cpp'\n  with checksum '87A2C4762F8F544056F223315F6F8A90'\n2015-06-29 15:30:24,137 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\gui.h'\n  with checksum 'A015F901E2ECE542EC8DA0D62A2DEC91'\n2015-06-29 15:30:24,137 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\imports.cpp'\n  with checksum 'B3841F61DF8EAAE6503C4535FFFA2678'\n2015-06-29 15:30:24,137 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\imports.h'\n  with checksum 'BEA805FC9BD24E29F911B4C8AF2E1C67'\n2015-06-29 15:30:24,137 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\io.cpp'\n  with checksum '4A0F774542B30B8D2F89B16A52F4E180'\n2015-06-29 15:30:24,153 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\io.h'\n  with checksum 'D38837B657FD6110F6DFCC464CB5A28A'\n2015-06-29 15:30:24,153 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\messages.mc'\n  with checksum '8CE6DC904ADF43A36CC1874B56FE10E5'\n2015-06-29 15:30:24,153 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\nssm.cpp'\n  with checksum '4C6D4F21F01D8EA96856B9BE08819006'\n2015-06-29 15:30:24,153 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\nssm.h'\n  with checksum '489522C3667DE3BAF5F28A66DD684005'\n2015-06-29 15:30:24,153 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\nssm.ico'\n  with checksum '4288408C2D7F43FBD9D920C8319F1956'\n2015-06-29 15:30:24,153 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\nssm.rc'\n  with checksum 'FFACD065D645999917FF340D7C7E9EE0'\n2015-06-29 15:30:24,153 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\nssm.sln'\n  with checksum 'F779189B1586DFA1D64F9279AD8E23EC'\n2015-06-29 15:30:24,153 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\nssm.vcproj'\n  with checksum '6E6FABD941F67804A55F5D9EE21A7E11'\n2015-06-29 15:30:24,153 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\process.cpp'\n  with checksum 'E58E6825766F138869E72B66085C0758'\n2015-06-29 15:30:24,153 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\process.h'\n  with checksum '7D2B1A9335864BB2C334273FE40CF732'\n2015-06-29 15:30:24,153 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\registry.cpp'\n  with checksum '445B79BFC0A559C5CF4C048C54218566'\n2015-06-29 15:30:24,153 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\registry.h'\n  with checksum '12766774BADE41953CA460AE72168F1B'\n2015-06-29 15:30:24,153 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\resource.h'\n  with checksum 'A06FEE0B96D7CD81E1B0A9CB9E359396'\n2015-06-29 15:30:24,153 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\service.cpp'\n  with checksum '95FB7517F1606492A69D3B3DDEC9C01D'\n2015-06-29 15:30:24,153 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\service.h'\n  with checksum 'E317D08FBC98329115C47D8095190D83'\n2015-06-29 15:30:24,153 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\settings.cpp'\n  with checksum '762C0AC39328C797AECEF896A1319877'\n2015-06-29 15:30:24,153 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\settings.h'\n  with checksum '92BFCAF191385245DF8A907C7DD27E3E'\n2015-06-29 15:30:24,153 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\version.cmd'\n  with checksum '3E67B67B2ECB2D3042DFAA7D216883B1'\n2015-06-29 15:30:24,153 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\win32\\nssm.exe'\n  with checksum 'D9EC6F3A3B2AC7CD5EEF07BD86E3EFBC'\n2015-06-29 15:30:24,153 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\win32\\nssm.exe.ignore'\n  with checksum 'D41D8CD98F00B204E9800998ECF8427E'\n2015-06-29 15:30:24,153 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\win64\\nssm.exe'\n  with checksum 'BECEAE2FDC4F7729A93E94AC2CCD78CC'\n2015-06-29 15:30:24,153 [DEBUG] - Attempting to create directory \"C:\\ProgramData\\chocolatey.chocolatey\".\n2015-06-29 15:30:24,168 [DEBUG] - Attempting to create directory \"C:\\ProgramData\\chocolatey.chocolatey\\consul.0.5.2.2015052201\".\n2015-06-29 15:30:24,215 [DEBUG] - Attempting to delete file \"C:\\ProgramData\\chocolatey.chocolatey\\consul.0.5.2.2015052201.sxs\".\n2015-06-29 15:30:24,215 [DEBUG] - Attempting to delete file \"C:\\ProgramData\\chocolatey.chocolatey\\consul.0.5.2.2015052201.pin\".\n2015-06-29 15:30:24,231 [ERROR] - The install of consul was NOT successful.\n2015-06-29 15:30:24,231 [ERROR] - Error while running 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\chocolateyInstall.ps1'.\n See log for details.\n2015-06-29 15:30:24,231 [DEBUG] - Attempting to create directory \"C:\\ProgramData\\chocolatey\\lib-bad\".\n2015-06-29 15:30:24,231 [DEBUG] - Moving 'C:\\ProgramData\\chocolatey\\lib\\consul'\n to 'C:\\ProgramData\\chocolatey\\lib-bad\\consul'\n2015-06-29 15:30:26,231 [WARN ] - \nChocolatey installed 0/1 package(s). 1 package(s) failed.\n See the log for details (C:\\ProgramData\\chocolatey\\logs\\chocolatey.log).\n2015-06-29 15:30:26,231 [ERROR] - Failures:\n2015-06-29 15:30:26,231 [ERROR] -  - consul\n2015-06-29 15:30:26,231 [DEBUG] - Exiting with 1\n``\n. @ferventcoder the issue is not from the package, as it works perfectly on 0.9.8.27 which is before changes toGet-ChocolateyUnzip.ps1` were made. In any case, I'll open a new issue, but I've pinned  to using 0.9.8.27 for the moment.\n. Seems that I am running into this issue with chocolatey 0.9.9.8\n```\n2015-06-29 15:30:22,809 [INFO ] - ============================================================\n2015-06-29 15:30:22,809 [INFO ] - Chocolatey v0.9.9.8\n2015-06-29 15:30:22,825 [DEBUG] - Chocolatey is running on Windows v 6.1.7601.65536\n2015-06-29 15:30:22,825 [DEBUG] - Attempting to delete file \"C:/ProgramData/chocolatey/choco.exe.old\".\n2015-06-29 15:30:22,825 [DEBUG] - Attempting to delete file \"C:\\ProgramData\\chocolatey\\choco.exe.old\".\n2015-06-29 15:30:22,825 [DEBUG] - Command line: \"C:\\ProgramData\\chocolatey\\choco.exe\" install consul -version 0.5.2.2015052201 -dvy -source C:/Users/vagrant/AppData/Local/Temp\n2015-06-29 15:30:22,825 [DEBUG] - Received arguments: install consul -version 0.5.2.2015052201 -dvy -source C:/Users/vagrant/AppData/Local/Temp\n2015-06-29 15:30:22,872 [DEBUG] - \nNOTE: Hiding sensitive configuration data! Please double and triple \n check to be sure no sensitive data is shown, especially if copying \n output to a gist for review.\n2015-06-29 15:30:22,887 [DEBUG] - Configuration: CommandName='install'|\nCacheLocation='C:\\Users\\vagrant\\AppData\\Local\\Temp'|\nContainsLegacyPackageInstalls='True'|\nCommandExecutionTimeoutSeconds='2700'|\nSources='C:/Users/vagrant/AppData/Local/Temp'|Debug='True'|\nVerbose='True'|Force='False'|Noop='False'|HelpRequested='False'|\nRegularOutput='True'|PromptForConfirmation='False'|\nAcceptLicense='True'|\nAllowUnofficialBuild='False'|Input='consul'|Version='0.5.2.2015052201'|\nAllVersions='False'|SkipPackageInstallProvider='False'|\nPackageNames='consul'|Prerelease='False'|ForceX86='False'|\nOverrideArguments='False'|NotSilent='False'|IgnoreDependencies='False'|\nAllowMultipleVersions='False'|ForceDependencies='False'|\nInformation.PlatformType='Windows'|\nInformation.PlatformVersion='6.1.7601.65536'|\nInformation.PlatformName='Windows Server 2008 R2'|\nInformation.ChocolateyVersion='0.9.9.8'|\nInformation.ChocolateyProductVersion='0.9.9.8'|\nInformation.FullName='choco, Version=0.9.9.8, Culture=neutral, PublicKeyToken=79d02ea9cad655eb'|\nInformation.Is64Bit='True'|Information.IsInteractive='False'|\nInformation.IsUserAdministrator='True'|\nInformation.IsProcessElevated='True'|Features.AutoUninstaller='False'|\nFeatures.CheckSumFiles='True'|Features.FailOnAutoUninstaller='False'|\nListCommand.LocalOnly='False'|\nListCommand.IncludeRegistryPrograms='False'|\nUpgradeCommand.FailOnUnfound='False'|\nUpgradeCommand.FailOnNotInstalled='False'|\nUpgradeCommand.NotifyOnlyAvailableUpgrades='False'|\nNewCommand.AutomaticPackage='False'|SourceCommand.Command='unknown'|\nFeatureCommand.Command='unknown'|PushCommand.TimeoutInSeconds='0'|\nPinCommand.Command='unknown'|\n2015-06-29 15:30:22,887 [DEBUG] - _ Chocolatey:ChocolateyInstallCommand - Normal Run Mode _\n2015-06-29 15:30:22,918 [INFO ] - Installing the following packages:\n2015-06-29 15:30:22,918 [INFO ] - consul\n2015-06-29 15:30:22,918 [INFO ] - By installing you accept licenses for the packages.\n2015-06-29 15:30:23,231 [INFO ] - [NuGet] Installing 'consul 0.5.2.2015052201'.\n2015-06-29 15:30:23,247 [DEBUG] - [NuGet] Added file '0.5.2_SHA256SUMS' to folder 'consul\\binaries'.\n2015-06-29 15:30:23,247 [DEBUG] - [NuGet] Added file '0.5.2_web_ui.zip' to folder 'consul\\binaries'.\n2015-06-29 15:30:23,247 [DEBUG] - [NuGet] Added file '0.5.2_windows_386.zip' to folder 'consul\\binaries'.\n2015-06-29 15:30:23,262 [DEBUG] - [NuGet] Added file 'nssm-2.24.zip' to folder 'consul\\binaries'.\n2015-06-29 15:30:23,262 [DEBUG] - [NuGet] Added file 'chocolateyInstall.ps1' to folder 'consul\\tools'.\n2015-06-29 15:30:23,262 [DEBUG] - [NuGet] Added file 'chocolateyUninstall.ps1' to folder 'consul\\tools'.\n2015-06-29 15:30:23,262 [DEBUG] - [NuGet] Added file 'consul.nupkg' to folder 'consul'.\n2015-06-29 15:30:23,262 [INFO ] - [NuGet] Successfully installed 'consul 0.5.2.2015052201'.\n2015-06-29 15:30:23,262 [INFO ] - \nconsul v0.5.2.2015052201\n2015-06-29 15:30:23,293 [DEBUG] - Contents of 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\chocolateyInstall.ps1':\n2015-06-29 15:30:23,309 [DEBUG] - try {\n  $binariesPath = $(Join-Path (Split-Path -parent $MyInvocation.MyCommand.Definition) \"..\\binaries\\\")\n  $toolsPath = (Split-Path -Parent $MyInvocation.MyCommand.Definition)\n# NSSM related variables\n  $nssmVersion = '2.24'\n  $nssmSourcePath = $(Join-Path $binariesPath \"nssm-$nssmVersion.zip\")\n# Consul related variables\n  $consulVersion = '0.5.2'\n  $sourcePath = $(Join-Path $binariesPath \"$($consulVersion)_windows_386.zip\")\n  $sourcePathUI = $(Join-Path $binariesPath \"$($consulVersion)_web_ui.zip\")\n# Install NSSM locally within consul\n  Get-ChocolateyUnzip $nssmSourcePath $toolsPath\n$folderToIgnore = 'win32'\n  $forderToRun = 'win64'\nif (Get-ProcessorBits 32) {\n    $folderToIgnore = 'win64'\n    $forderToRun = 'win32'\n  }\nSet-Content -Path ($toolsPath + \"\\nssm-$nssmVersion\\$folderToIgnore\\nssm.exe.ignore\") -Value $null\n  $nssmBinPath = ($toolsPath + \"\\nssm-$nssmVersion\\$forderToRun\\nssm.exe\")\n# Unzip and move Consul\n  Get-ChocolateyUnzip  $sourcePath \"$(Split-Path -parent $MyInvocation.MyCommand.Definition)\"\n  Get-ChocolateyUnzip  $sourcePathUI \"$(Split-Path -parent $MyInvocation.MyCommand.Definition)\"\nWrite-Host \"Creating $env:PROGRAMDATA\\consul\\logs\"\n  New-Item -ItemType directory -Path \"$env:PROGRAMDATA\\consul\\logs\" -ErrorAction SilentlyContinue | Out-Null\n  Write-Host \"Creating $env:PROGRAMDATA\\consul\\config\"\n  New-Item -ItemType directory -Path \"$env:PROGRAMDATA\\consul\\config\" -ErrorAction SilentlyContinue | Out-Null\n# Create event log source\n  # User -Force to avoid \"A key at this path already exists\" exception. Overwrite not an issue since key is not further modified\n  $registryPath = 'HKLM:\\SYSTEM\\CurrentControlSet\\services\\eventlog\\Application'\n  New-Item -Path $registryPath -Name consul -Force | Out-Null\n  # Set EventMessageFile value\n  Set-ItemProperty $registryPath\\consul EventMessageFile \"C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\EventLogMessages.dll\" | Out-Null\n#Uninstall service if it already exists. Stops the service first if it's running\n  $service = Get-Service \"consul\" -ErrorAction SilentlyContinue\n  if ($service) {\n    Write-Host \"Uninstalling existing service\"\n    if ($service.Status -eq \"Running\") {\n      Write-Host \"Stopping consul process ...\"\n      net stop consul | Out-Null\n    }\n$service = Get-WmiObject -Class Win32_Service -Filter \"Name='consul'\"\n$service.delete() | Out-Null\n\n}\nWrite-Host \"Installing the consul service\"\n  # Install the service\n  & $nssmBinPath install consul $(Join-Path $toolsPath \"consul.exe\") agent -config-dir=%PROGRAMDATA%\\consul\\config -data-dir=%PROGRAMDATA%\\consul\\data | Out-Null\n  & $nssmBinPath set consul AppEnvironmentExtra GOMAXPROCS=$env:NUMBER_OF_PROCESSORS | Out-Null\n  & $nssmBinPath set consul ObjectName NetworkService | Out-Null\n  & $nssmBinPath set consul AppStdout \"$env:PROGRAMDATA\\consul\\logs\\consul-output.log\" | Out-Null\n  & $nssmBinPath set consul AppStderr \"$env:PROGRAMDATA\\consul\\logs\\consul-error.log\" | Out-Null\n  & $nssmBinPath set consul AppRotateBytes 10485760 | Out-Null\n  & $nssmBinPath set consul AppRotateFiles 1 | Out-Null\n  & $nssmBinPath set consul AppRotateOnline 1 | Out-Null\n# Restart service on failure natively via Windows sc. There is a memory leak if service restart is performed via NSSM\n  # The NSSM configuration will set the default behavior of NSSM to stop the service if\n  # consul fails (for example, unable to resolve cluster) and end the nssm.exe and consul.exe process.\n  # The sc configuration will set Recovery under the Consul service properties such that a new instance will be started on failure,\n  # spawning new nssm.exe and consul.exe processes. In short, nothing changed from a functionality perspective (the service will\n  # still attempt to restart on failure) but this method kills the nssm.exe process thus avoiding memory hog.\n  & $nssmBinPath set consul AppExit Default Exit | Out-Null\n  cmd.exe /c \"sc failure consul reset= 0 actions= restart/60000\" | Out-Null\nWrite-ChocolateySuccess 'consul'\n} catch {\n  Write-ChocolateyFailure 'consul' $($_.Exception.Message)\n  throw\n}\n2015-06-29 15:30:23,309 [DEBUG] - Calling command ['\"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -NoProfile -NoLogo -ExecutionPolicy Bypass -Command \"[System.Threading.Thread]::CurrentThread.CurrentCulture = '';[System.Threading.Thread]::CurrentThread.CurrentUICulture = ''; & import-module -name 'C:\\ProgramData\\chocolatey\\helpers\\chocolateyInstaller.psm1'; & 'C:\\ProgramData\\chocolatey\\helpers\\chocolateyScriptRunner.ps1' -packageScript 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\chocolateyInstall.ps1' -installArguments '' -packageParameters ''\"']\n2015-06-29 15:30:23,950 [ERROR] -  Process with an Id of 2984 is not running.\n2015-06-29 15:30:23,950 [DEBUG] -  DEBUG: Posh version is 2.0\n2015-06-29 15:30:23,950 [INFO ] -  VERBOSE: Exporting function 'Get-BinRoot'.\n2015-06-29 15:30:23,950 [INFO ] -  VERBOSE: Exporting function 'Get-ChecksumValid'.\n2015-06-29 15:30:23,950 [INFO ] -  VERBOSE: Exporting function 'Get-ChocolateyUnzip'.\n2015-06-29 15:30:23,950 [INFO ] -  VERBOSE: Exporting function 'Get-ChocolateyWebFile'.\n2015-06-29 15:30:23,950 [INFO ] -  VERBOSE: Exporting function 'Get-EnvironmentVariable'.\n2015-06-29 15:30:23,950 [INFO ] -  VERBOSE: Exporting function 'Get-EnvironmentVariableNames'.\n2015-06-29 15:30:23,950 [INFO ] -  VERBOSE: Exporting function 'Get-FtpFile'.\n2015-06-29 15:30:23,950 [INFO ] -  VERBOSE: Exporting function 'Get-ProcessorBits'.\n2015-06-29 15:30:23,950 [INFO ] -  VERBOSE: Exporting function 'Get-UACEnabled'.\n2015-06-29 15:30:23,950 [INFO ] -  VERBOSE: Exporting function 'Get-VirusCheckValid'.\n2015-06-29 15:30:23,950 [INFO ] -  VERBOSE: Exporting function 'Get-WebFile'.\n2015-06-29 15:30:23,950 [INFO ] -  VERBOSE: Exporting function 'Get-WebHeaders'.\n2015-06-29 15:30:23,950 [INFO ] -  VERBOSE: Exporting function 'Install-BinFile'.\n2015-06-29 15:30:23,950 [INFO ] -  VERBOSE: Exporting function 'Install-ChocolateyDesktopLink'.\n2015-06-29 15:30:23,950 [INFO ] -  VERBOSE: Exporting function 'Install-ChocolateyEnvironmentVariable'.\n2015-06-29 15:30:23,950 [INFO ] -  VERBOSE: Exporting function 'Install-ChocolateyExplorerMenuItem'.\n2015-06-29 15:30:23,950 [INFO ] -  VERBOSE: Exporting function 'Install-ChocolateyFileAssociation'.\n2015-06-29 15:30:23,950 [INFO ] -  VERBOSE: Exporting function 'Install-ChocolateyInstallPackage'.\n2015-06-29 15:30:23,950 [ERROR] -  At C:\\ProgramData\\chocolatey\\helpers\\functions\\Write-ChocolateyFailure.ps1:24 c\n2015-06-29 15:30:23,950 [ERROR] -  har:8\n2015-06-29 15:30:23,950 [ERROR] -  +   throw <<<<  \"$failureMessage\"\n2015-06-29 15:30:23,950 [ERROR] -      + CategoryInfo          : OperationStopped: (Process with an...is not runn \n2015-06-29 15:30:23,950 [ERROR] -     ing.:String) [], RuntimeException\n2015-06-29 15:30:23,950 [ERROR] -      + FullyQualifiedErrorId : Process with an Id of 2984 is not running.\n2015-06-29 15:30:23,950 [INFO ] -  VERBOSE: Exporting function 'Install-ChocolateyPackage'.\n2015-06-29 15:30:23,950 [INFO ] -  VERBOSE: Exporting function 'Install-ChocolateyPath'.\n2015-06-29 15:30:23,950 [INFO ] -  VERBOSE: Exporting function 'Install-ChocolateyPinnedTaskBarItem'.\n2015-06-29 15:30:23,965 [INFO ] -  VERBOSE: Exporting function 'Install-ChocolateyPowershellCommand'.\n2015-06-29 15:30:23,965 [INFO ] -  VERBOSE: Exporting function 'Install-ChocolateyShortcut'.\n2015-06-29 15:30:23,965 [INFO ] -  VERBOSE: Exporting function 'Install-ChocolateyVsixPackage'.\n2015-06-29 15:30:23,965 [INFO ] -  VERBOSE: Exporting function 'Install-Vsix'.\n2015-06-29 15:30:23,965 [INFO ] -  VERBOSE: Exporting function 'Install-ChocolateyZipPackage'.\n2015-06-29 15:30:23,965 [INFO ] -  VERBOSE: Exporting function 'Set-EnvironmentVariable'.\n2015-06-29 15:30:23,965 [INFO ] -  VERBOSE: Exporting function 'Start-ChocolateyProcessAsAdmin'.\n2015-06-29 15:30:23,965 [INFO ] -  VERBOSE: Exporting function 'Test-ProcessAdminRights'.\n2015-06-29 15:30:23,965 [INFO ] -  VERBOSE: Exporting function 'Uninstall-BinFile'.\n2015-06-29 15:30:23,965 [INFO ] -  VERBOSE: Exporting function 'Uninstall-ChocolateyPackage'.\n2015-06-29 15:30:23,965 [INFO ] -  VERBOSE: Exporting function 'UnInstall-ChocolateyZipPackage'.\n2015-06-29 15:30:23,965 [INFO ] -  VERBOSE: Exporting function 'Update-SessionEnvironment'.\n2015-06-29 15:30:23,965 [INFO ] -  VERBOSE: Exporting function 'Write-ChocolateyFailure'.\n2015-06-29 15:30:23,965 [INFO ] -  VERBOSE: Exporting function 'Write-ChocolateySuccess'.\n2015-06-29 15:30:23,965 [INFO ] -  VERBOSE: Exporting function 'Write-FileUpdateLog'.\n2015-06-29 15:30:23,965 [INFO ] -  VERBOSE: Exporting alias 'Generate-BinFile'.\n2015-06-29 15:30:23,997 [INFO ] -  VERBOSE: Exporting alias 'Add-BinFile'.\n2015-06-29 15:30:23,997 [INFO ] -  VERBOSE: Exporting alias 'Remove-BinFile'.\n2015-06-29 15:30:23,997 [DEBUG] -  DEBUG: Running 'Get-ChocolateyUnzip' with \n2015-06-29 15:30:23,997 [INFO ] -  fileFullPath:'C:\\ProgramData\\chocolatey\\lib\\consul\\tools..\\binaries\\nssm-2.24.\n2015-06-29 15:30:23,997 [INFO ] -  zip'', destination: 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools', \n2015-06-29 15:30:23,997 [INFO ] -  specificFolder: ', packageName: ''\n2015-06-29 15:30:23,997 [INFO ] -  Extracting C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\..\\binaries\\nssm-2.24.zip to C:\\ProgramData\\chocolatey\\lib\\consul\\tools...\n2015-06-29 15:30:23,997 [DEBUG] -  DEBUG: 7zip found at 'C:\\ProgramData\\chocolatey\\tools\\7za.exe'\n2015-06-29 15:30:23,997 [DEBUG] -  DEBUG: calling 7za directly\n2015-06-29 15:30:23,997 [DEBUG] -  DEBUG: Calling 'C:\\ProgramData\\chocolatey\\tools\\7za.exe x -aoa \n2015-06-29 15:30:23,997 [INFO ] -  -o\"C:\\ProgramData\\chocolatey\\lib\\consul\\tools\" -y \n2015-06-29 15:30:23,997 [INFO ] -  \"C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\..\\binaries\\nssm-2.24.zip\"'\n2015-06-29 15:30:23,997 [DEBUG] -  DEBUG: 7za exit code: 0\n2015-06-29 15:30:23,997 [INFO ] -  C:\\ProgramData\\chocolatey\\lib\\consul\\tools\n2015-06-29 15:30:23,997 [DEBUG] -  DEBUG: Running 'Get-ProcessorBits'\n2015-06-29 15:30:23,997 [DEBUG] -  DEBUG: Running 'Get-ChocolateyUnzip' with \n2015-06-29 15:30:23,997 [INFO ] -  fileFullPath:'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\..\\binaries\\0.5.2_wind\n2015-06-29 15:30:23,997 [INFO ] -  ows_386.zip'', destination: 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools', \n2015-06-29 15:30:23,997 [INFO ] -  specificFolder: ', packageName: ''\n2015-06-29 15:30:23,997 [INFO ] -  Extracting C:\\ProgramData\\chocolatey\\lib\\consul\\tools..\\binaries\\0.5.2_windows_386.zip to C:\\ProgramData\\chocolatey\\lib\\consul\\tools...\n2015-06-29 15:30:23,997 [DEBUG] -  DEBUG: 7zip found at 'C:\\ProgramData\\chocolatey\\tools\\7za.exe'\n2015-06-29 15:30:23,997 [DEBUG] -  DEBUG: calling 7za directly\n2015-06-29 15:30:23,997 [DEBUG] -  DEBUG: Calling 'C:\\ProgramData\\chocolatey\\tools\\7za.exe x -aoa \n2015-06-29 15:30:23,997 [INFO ] -  -o\"C:\\ProgramData\\chocolatey\\lib\\consul\\tools\" -y \n2015-06-29 15:30:23,997 [INFO ] -  \"C:\\ProgramData\\chocolatey\\lib\\consul\\tools..\\binaries\\0.5.2_windows_386.zip\"'\n2015-06-29 15:30:24,012 [WARN ] -  WARNING: Write-ChocolateyFailure is deprecated. If you are the package \n2015-06-29 15:30:24,012 [INFO ] -  maintainer, please use 'throw $_.Exception' instead.\n2015-06-29 15:30:24,012 [DEBUG] - Command ['\"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -NoProfile -NoLogo -ExecutionPolicy Bypass -Command \"[System.Threading.Thread]::CurrentThread.CurrentCulture = '';[System.Threading.Thread]::CurrentThread.CurrentUICulture = ''; & import-module -name 'C:\\ProgramData\\chocolatey\\helpers\\chocolateyInstaller.psm1'; & 'C:\\ProgramData\\chocolatey\\helpers\\chocolateyScriptRunner.ps1' -packageScript 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\chocolateyInstall.ps1' -installArguments '' -packageParameters ''\"'] exited with '1'\n2015-06-29 15:30:24,012 [DEBUG] - Calling command ['\"shutdown\" /a']\n2015-06-29 15:30:24,028 [DEBUG] - Command ['\"shutdown\" /a'] exited with '1116'\n2015-06-29 15:30:24,043 [DEBUG] - Capturing package files in 'C:\\ProgramData\\chocolatey\\lib\\consul'\n2015-06-29 15:30:24,075 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\consul.nupkg'\n  with checksum '66A13E5A10A7E7CA1B20EFF2EA2208AC'\n2015-06-29 15:30:24,075 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\binaries\\0.5.2_SHA256SUMS'\n  with checksum '63289EDFB26AFB48E0E4CD8110629D01'\n2015-06-29 15:30:24,075 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\binaries\\0.5.2_web_ui.zip'\n  with checksum 'EB98BA602BC7E177333EB2E520881F4F'\n2015-06-29 15:30:24,090 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\binaries\\0.5.2_windows_386.zip'\n  with checksum 'D5DE018E601DB10850F89C1E81559D4A'\n2015-06-29 15:30:24,090 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\binaries\\nssm-2.24.zip'\n  with checksum 'B2EDD0E4A7A7BE9D157C0DA0EF65B1BC'\n2015-06-29 15:30:24,090 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\chocolateyInstall.ps1'\n  with checksum '60F66EE4FE81706134EB5E8E2072EA65'\n2015-06-29 15:30:24,090 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\chocolateyUninstall.ps1'\n  with checksum 'D3507DFEF5209948F073295CF6484F6B'\n2015-06-29 15:30:24,137 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\consul.exe'\n  with checksum '974432CDFFAF53462789D8A87ED4D518'\n2015-06-29 15:30:24,137 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\ChangeLog.txt'\n  with checksum '205769831FA302018FB26845D3835962'\n2015-06-29 15:30:24,137 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\README.txt'\n  with checksum 'ED2BC805600C380E85FE240E715ABB81'\n2015-06-29 15:30:24,137 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\account.cpp'\n  with checksum 'B432CC0EDDB92622E68C16944EF65E98'\n2015-06-29 15:30:24,137 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\account.h'\n  with checksum 'C1B1DCFDCE66CB24B458B0F34278C8DB'\n2015-06-29 15:30:24,137 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\console.cpp'\n  with checksum '2B504E046DC126E68BFC90056B2C9E60'\n2015-06-29 15:30:24,137 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\console.h'\n  with checksum '9E242CCE5F18C22854F7E417171E5E67'\n2015-06-29 15:30:24,137 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\env.cpp'\n  with checksum 'F49F53D2A1527B35258B33773D048B9C'\n2015-06-29 15:30:24,137 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\env.h'\n  with checksum 'F3C5C5EC2AEAFA00FF4C2FBE5622521C'\n2015-06-29 15:30:24,137 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\event.cpp'\n  with checksum '53CA1240B593D6277E58A9D3334B537C'\n2015-06-29 15:30:24,137 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\event.h'\n  with checksum 'BD2D50FA5FBBB97285F9984E6CD1E4D4'\n2015-06-29 15:30:24,137 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\gui.cpp'\n  with checksum '87A2C4762F8F544056F223315F6F8A90'\n2015-06-29 15:30:24,137 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\gui.h'\n  with checksum 'A015F901E2ECE542EC8DA0D62A2DEC91'\n2015-06-29 15:30:24,137 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\imports.cpp'\n  with checksum 'B3841F61DF8EAAE6503C4535FFFA2678'\n2015-06-29 15:30:24,137 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\imports.h'\n  with checksum 'BEA805FC9BD24E29F911B4C8AF2E1C67'\n2015-06-29 15:30:24,137 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\io.cpp'\n  with checksum '4A0F774542B30B8D2F89B16A52F4E180'\n2015-06-29 15:30:24,153 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\io.h'\n  with checksum 'D38837B657FD6110F6DFCC464CB5A28A'\n2015-06-29 15:30:24,153 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\messages.mc'\n  with checksum '8CE6DC904ADF43A36CC1874B56FE10E5'\n2015-06-29 15:30:24,153 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\nssm.cpp'\n  with checksum '4C6D4F21F01D8EA96856B9BE08819006'\n2015-06-29 15:30:24,153 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\nssm.h'\n  with checksum '489522C3667DE3BAF5F28A66DD684005'\n2015-06-29 15:30:24,153 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\nssm.ico'\n  with checksum '4288408C2D7F43FBD9D920C8319F1956'\n2015-06-29 15:30:24,153 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\nssm.rc'\n  with checksum 'FFACD065D645999917FF340D7C7E9EE0'\n2015-06-29 15:30:24,153 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\nssm.sln'\n  with checksum 'F779189B1586DFA1D64F9279AD8E23EC'\n2015-06-29 15:30:24,153 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\nssm.vcproj'\n  with checksum '6E6FABD941F67804A55F5D9EE21A7E11'\n2015-06-29 15:30:24,153 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\process.cpp'\n  with checksum 'E58E6825766F138869E72B66085C0758'\n2015-06-29 15:30:24,153 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\process.h'\n  with checksum '7D2B1A9335864BB2C334273FE40CF732'\n2015-06-29 15:30:24,153 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\registry.cpp'\n  with checksum '445B79BFC0A559C5CF4C048C54218566'\n2015-06-29 15:30:24,153 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\registry.h'\n  with checksum '12766774BADE41953CA460AE72168F1B'\n2015-06-29 15:30:24,153 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\resource.h'\n  with checksum 'A06FEE0B96D7CD81E1B0A9CB9E359396'\n2015-06-29 15:30:24,153 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\service.cpp'\n  with checksum '95FB7517F1606492A69D3B3DDEC9C01D'\n2015-06-29 15:30:24,153 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\service.h'\n  with checksum 'E317D08FBC98329115C47D8095190D83'\n2015-06-29 15:30:24,153 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\settings.cpp'\n  with checksum '762C0AC39328C797AECEF896A1319877'\n2015-06-29 15:30:24,153 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\settings.h'\n  with checksum '92BFCAF191385245DF8A907C7DD27E3E'\n2015-06-29 15:30:24,153 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\src\\version.cmd'\n  with checksum '3E67B67B2ECB2D3042DFAA7D216883B1'\n2015-06-29 15:30:24,153 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\win32\\nssm.exe'\n  with checksum 'D9EC6F3A3B2AC7CD5EEF07BD86E3EFBC'\n2015-06-29 15:30:24,153 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\win32\\nssm.exe.ignore'\n  with checksum 'D41D8CD98F00B204E9800998ECF8427E'\n2015-06-29 15:30:24,153 [DEBUG] -  Found 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\nssm-2.24\\win64\\nssm.exe'\n  with checksum 'BECEAE2FDC4F7729A93E94AC2CCD78CC'\n2015-06-29 15:30:24,153 [DEBUG] - Attempting to create directory \"C:\\ProgramData\\chocolatey.chocolatey\".\n2015-06-29 15:30:24,168 [DEBUG] - Attempting to create directory \"C:\\ProgramData\\chocolatey.chocolatey\\consul.0.5.2.2015052201\".\n2015-06-29 15:30:24,215 [DEBUG] - Attempting to delete file \"C:\\ProgramData\\chocolatey.chocolatey\\consul.0.5.2.2015052201.sxs\".\n2015-06-29 15:30:24,215 [DEBUG] - Attempting to delete file \"C:\\ProgramData\\chocolatey.chocolatey\\consul.0.5.2.2015052201.pin\".\n2015-06-29 15:30:24,231 [ERROR] - The install of consul was NOT successful.\n2015-06-29 15:30:24,231 [ERROR] - Error while running 'C:\\ProgramData\\chocolatey\\lib\\consul\\tools\\chocolateyInstall.ps1'.\n See log for details.\n2015-06-29 15:30:24,231 [DEBUG] - Attempting to create directory \"C:\\ProgramData\\chocolatey\\lib-bad\".\n2015-06-29 15:30:24,231 [DEBUG] - Moving 'C:\\ProgramData\\chocolatey\\lib\\consul'\n to 'C:\\ProgramData\\chocolatey\\lib-bad\\consul'\n2015-06-29 15:30:26,231 [WARN ] - \nChocolatey installed 0/1 package(s). 1 package(s) failed.\n See the log for details (C:\\ProgramData\\chocolatey\\logs\\chocolatey.log).\n2015-06-29 15:30:26,231 [ERROR] - Failures:\n2015-06-29 15:30:26,231 [ERROR] -  - consul\n2015-06-29 15:30:26,231 [DEBUG] - Exiting with 1\n``\n. @ferventcoder the issue is not from the package, as it works perfectly on 0.9.8.27 which is before changes toGet-ChocolateyUnzip.ps1` were made. In any case, I'll open a new issue, but I've pinned  to using 0.9.8.27 for the moment.\n. ",
    "emcek": "starnge all of location:\nC:\\Program Files (x86)\nC:\\Program Files\nD:\\Program Files (x86)\nD:\\Program Files\ndo not contain chocolatey. Exectables file are in: C:\\ProgramData\\chocolatey\\bin\n. C:\\ProgramData\\chocolatey\\chocolateyInstall\\chocolatey.config worked!\n. starnge all of location:\nC:\\Program Files (x86)\nC:\\Program Files\nD:\\Program Files (x86)\nD:\\Program Files\ndo not contain chocolatey. Exectables file are in: C:\\ProgramData\\chocolatey\\bin\n. C:\\ProgramData\\chocolatey\\chocolateyInstall\\chocolatey.config worked!\n. ",
    "sebagomez": "When I want to edit the chocolately.config file I get it's being used, but searching with procexp shows nothing... who keeps a handle to it? why am I getting that message if nothing is found?\n. Nevermind! It needed Admin rights to edit the file and I was just opening with the Explorer contextual menu... once I opened an editor (Notepad++) as Admin it did let me save the file. \nSometimes you just need to write things down or say it out loud to think clearly :)\n. When I want to edit the chocolately.config file I get it's being used, but searching with procexp shows nothing... who keeps a handle to it? why am I getting that message if nothing is found?\n. Nevermind! It needed Admin rights to edit the file and I was just opening with the Explorer contextual menu... once I opened an editor (Notepad++) as Admin it did let me save the file. \nSometimes you just need to write things down or say it out loud to think clearly :)\n. ",
    "bobodod": "Got it. Sorry about that!\n. Got it. Sorry about that!\n. ",
    "lonniev": "I can raise the following as a new issue if appropriate (this is somewhat related to testing chocolateyInstall.ps1).\nCurrently, within a packer build for Windows 2012 R2, I add the chocolatey.bat script to have chocolatey installed into the image.\nAlthough the installation ps1 script runs to completion, it complains several times that $env:TEMP is not defined. Later attempts to use \"choco\" to install other choco-bits fail because choco isn't in the system path.\nApparently, the caller needs to create C:\\Windows\\TEMP (or similar) and set the TEMP environment variable to it.\nNew to packer, I ask, \"where is the best place in packerdom to make that definition?\" And, new to your GitHub, I suggest, \"perhaps it would be good if chocolateyInstall.ps1 didn't assume that $env:TEMP has a well-formed, existing directory string in it?\"\n. ;-) \u201cpacker\u201d is a set of tools for the construction of vagrant base box images that automates much of the pain of taking a vanilla Windows ISO and adding all the stuff that transforms the VM into something \u201cmanageable\u201d.\nOne of the key additions is the installation of chocolatey.\nPacker has a chocolatey.bat script that does the canonical/typical cmd.exe launch of powershell.exe to run the chocolateyInstall.ps1 script.\nOne of the first lines\u2014as you well know\u2014of that ps1 script is to define a chocTempDir for chocolatey that is within the current TEMP directory. But, in this context, no such directory has been provisioned.\nYes, it\u2019s pilot error for the packer team but the chocolateyInstall.ps1 script could be defensive about its received parameters/context and either bail early or create its own temp dir when none is provided.\n``` bash\n==> virtualbox-iso: Provisioning with shell script: ./scripts/chocolatey.bat\nvirtualbox-iso:\n\nvirtualbox-iso: C:\\Users\\vagrant>powershell -NoProfile -ExecutionPolicy unrestricted -Command \"iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))\"  0<NUL\n\nvirtualbox-iso: Join-Path : Cannot bind argument to parameter 'Path' because it is null.\n\nvirtualbox-iso: At line:21 char:26\n\nvirtualbox-iso: + $chocTempDir = Join-Path $env:TEMP \"chocolatey\"\n\nvirtualbox-iso: +                          ~~~~~~~~~\n\nvirtualbox-iso: + CategoryInfo          : InvalidData: (:) [Join-Path], ParameterBindingVa\n\nvirtualbox-iso: lidationException\n\nvirtualbox-iso: + FullyQualifiedErrorId : ParameterArgumentValidationErrorNullNotAllowed,M\n\nvirtualbox-iso: icrosoft.PowerShell.Commands.JoinPathCommand\n\n```\n. I can raise the following as a new issue if appropriate (this is somewhat related to testing chocolateyInstall.ps1).\nCurrently, within a packer build for Windows 2012 R2, I add the chocolatey.bat script to have chocolatey installed into the image.\nAlthough the installation ps1 script runs to completion, it complains several times that $env:TEMP is not defined. Later attempts to use \"choco\" to install other choco-bits fail because choco isn't in the system path.\nApparently, the caller needs to create C:\\Windows\\TEMP (or similar) and set the TEMP environment variable to it.\nNew to packer, I ask, \"where is the best place in packerdom to make that definition?\" And, new to your GitHub, I suggest, \"perhaps it would be good if chocolateyInstall.ps1 didn't assume that $env:TEMP has a well-formed, existing directory string in it?\"\n. ;-) \u201cpacker\u201d is a set of tools for the construction of vagrant base box images that automates much of the pain of taking a vanilla Windows ISO and adding all the stuff that transforms the VM into something \u201cmanageable\u201d.\nOne of the key additions is the installation of chocolatey.\nPacker has a chocolatey.bat script that does the canonical/typical cmd.exe launch of powershell.exe to run the chocolateyInstall.ps1 script.\nOne of the first lines\u2014as you well know\u2014of that ps1 script is to define a chocTempDir for chocolatey that is within the current TEMP directory. But, in this context, no such directory has been provisioned.\nYes, it\u2019s pilot error for the packer team but the chocolateyInstall.ps1 script could be defensive about its received parameters/context and either bail early or create its own temp dir when none is provided.\n``` bash\n==> virtualbox-iso: Provisioning with shell script: ./scripts/chocolatey.bat\nvirtualbox-iso:\n\nvirtualbox-iso: C:\\Users\\vagrant>powershell -NoProfile -ExecutionPolicy unrestricted -Command \"iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))\"  0<NUL\n\nvirtualbox-iso: Join-Path : Cannot bind argument to parameter 'Path' because it is null.\n\nvirtualbox-iso: At line:21 char:26\n\nvirtualbox-iso: + $chocTempDir = Join-Path $env:TEMP \"chocolatey\"\n\nvirtualbox-iso: +                          ~~~~~~~~~\n\nvirtualbox-iso: + CategoryInfo          : InvalidData: (:) [Join-Path], ParameterBindingVa\n\nvirtualbox-iso: lidationException\n\nvirtualbox-iso: + FullyQualifiedErrorId : ParameterArgumentValidationErrorNullNotAllowed,M\n\nvirtualbox-iso: icrosoft.PowerShell.Commands.JoinPathCommand\n\n```\n. ",
    "jmbeach": "@ferventcoder Thanks for the fix. Is there a way to import the modules so that you can call the ps1 directly? When I try to import, I get:\nCompare-Object : Cannot bind argument to parameter 'ReferenceObject' because it is null.\nAt C:\\ProgramData\\chocolatey\\extensions\\chocolatey-core\\chocolatey-core.psm1:8 char:18\n+ $funcs = compare $pre $post | select -Expand InputObject | select -Ex ...\n+                  ~~~~\n    + CategoryInfo          : InvalidData: (:) [Compare-Object], ParameterBindingValidationException\n    + FullyQualifiedErrorId : ParameterArgumentValidationErrorNullNotAllowed,Microsoft.PowerShell.Commands.CompareO\n   bjectCommand\n. Sorry, didn't realize what the FYI meant. @ferventcoder Thanks for the fix. Is there a way to import the modules so that you can call the ps1 directly? When I try to import, I get:\nCompare-Object : Cannot bind argument to parameter 'ReferenceObject' because it is null.\nAt C:\\ProgramData\\chocolatey\\extensions\\chocolatey-core\\chocolatey-core.psm1:8 char:18\n+ $funcs = compare $pre $post | select -Expand InputObject | select -Ex ...\n+                  ~~~~\n    + CategoryInfo          : InvalidData: (:) [Compare-Object], ParameterBindingValidationException\n    + FullyQualifiedErrorId : ParameterArgumentValidationErrorNullNotAllowed,Microsoft.PowerShell.Commands.CompareO\n   bjectCommand\n. Sorry, didn't realize what the FYI meant. ",
    "gutierri": "Remove the permission of the developer, there Seems to be a good idea even.\nStarting from the principle que there are some outdated packages for a long team, another developer Maintaining que package looks good.\n@gep13 Thank you!\n. @gep13 \nI understand!\nI agree with you.\n. Remove the permission of the developer, there Seems to be a good idea even.\nStarting from the principle que there are some outdated packages for a long team, another developer Maintaining que package looks good.\n@gep13 Thank you!\n. @gep13 \nI understand!\nI agree with you.\n. ",
    "brunowego": "First thanks a lot for try help me (again) @ferventcoder, follow the error of code with -debug flag:\n``` sh\nDEPURAR: Running 'Append-InstallLog' with chocoInstallLog:''\nDEPURAR: Arguments: $command = 'install'|$force=False\n|$prerelease=False|$packageNames='php'\n|$source=''\n|$version=''|$allVersions=False\n|$overrideArguments=False|$InstallArguments=''\n|$localonly=False|$verbosity=False|$debug=True|$quiet=False\n|$name=''|$ignoreDependencies=False|$forceX86=False\n|$packageParameters=''\n|PowerShellVersion=2.0|OSVersion=6.1.7601.65536\nDEPURAR: Current Security Protocol - Ssl3, Tls\nDEPURAR: Running 'Chocolatey-Install' for 'php' with source: '', version: '',\ninstallerArguments:''\nDEPURAR: Running 'Chocolatey-NuGet' for php with source:''. Force? False\nChocolatey (v0.9.8.28) is installing 'php' and dependencies. By installing you accept the license for 'php' and each dependency you are installing.\nDEPURAR: Installing packages to \"C:\\ProgramData\\chocolatey\\lib\".\nDEPURAR: Running 'Run-NuGet' for php with source: '', version:''\nDEPURAR:  NuGet _\nDEPURAR: Running 'Get-ConfigValue' with configValue:'useNuGetForSources'\nDEPURAR: Running 'Get-UserConfigValue' with configValue:'useNuGetForSources'\nDEPURAR: After checking the user config the value of 'useNuGetForSources' is ''\nDEPURAR: Value not found in the user config file - checking the global config\nDEPURAR: Running 'Get-GlobalConfigValue' with configValue:'useNuGetForSources'\nDEPURAR: After checking the global config the value of 'useNuGetForSources' is 'false'\nDEPURAR: Running 'Get-UserConfigValue' with configValue:'sources'\nDEPURAR: Running 'Get-GlobalConfigValue' with configValue:'sources'\nDEPURAR: Using global sources\nDEPURAR: Using '-Source \"https://chocolatey.org/api/v2/;\"' as the source arguments\nDEPURAR: Calling 'C:\\ProgramData\\chocolatey\\chocolateyinstall\\nuget.exe' install php\n-OutputDirectory \"C:\\ProgramData\\chocolatey\\lib\" -Source \"https://chocolatey.org/api/v2/;\"\n-NonInteractive -NoCache\nDEPURAR: Installing 'php 5.6.3'.\nSuccessfully installed 'php 5.6.3'.\nDEPURAR: Evaluating NuGet output for line: Installing 'php 5.6.3'.\nDEPURAR: Evaluating NuGet output for line: Successfully installed 'php 5.6.3'.\nDEPURAR: NuGet installed php. If we are ignoring dependencies (False) then we will clean this up.\nphp v5.6.3\nDEPURAR: Running 'Delete-ExistingErrorLog' for php\nDEPURAR: Looking for failure log at\n'D:\\Users\\BRUNOB~1\\AppData\\Local\\Temp\\chocolatey\\php\\failure.log'\nDEPURAR: Found the failure log. Deleting it...\nDEPURAR: Running 'Run-ChocolateyPS1' for php with\npackageFolder:'C:\\ProgramData\\chocolatey\\lib\\php.5.6.3', action: 'install'\nDEPURAR:    PowerShell install (chocolateyinstall.ps1) \nDEPURAR:   Looking for chocolateyinstall.ps1 in folder 'C:\\ProgramData\\chocolatey\\lib\\php.5.6.3'.\nIf chocolateyinstall.ps1 is found, it will be run.\nDEPURAR: Action file is 'chocolateyInstall.ps1'\nDEPURAR: Running 'C:\\ProgramData\\chocolatey\\lib\\php.5.6.3\\tools\\chocolateyInstall.ps1'\nPlease make sure you have CGI installed in IIS for local hosting\nLocating package...\nChecking archive...\nDEPURAR: Running 'Get-BinRoot'\nDEPURAR: Running 'Install-ChocolateyZipPackage' for php with\nurl:'http://windows.php.net/downloads/releases/archives/php-5.6.3-nts-Win32-VC11-x86.zip',\nunzipLocation: 'C:\\ProgramData\\chocolatey\\bin\\php', url64bit:\n'http://windows.php.net/downloads/releases/archives/php-5.6.3-nts-Win32-VC11-x64.zip',\nspecificFolder: '', checksum: '', checksumType: '', checksum64: '', checksumType64: ''\nDEPURAR: Running 'Get-ChocolateyWebFile' for php with\nurl:'http://windows.php.net/downloads/releases/archives/php-5.6.3-nts-Win32-VC11-x86.zip',\nfileFullPath:'D:\\Users\\BRUNOB~1\\AppData\\Local\\Temp\\chocolatey\\php\\phpInstall.zip',\nurl64bit:'http://windows.php.net/downloads/releases/archives/php-5.6.3-nts-Win32-VC11-x64.zip',\nchecksum: '', checksumType: '', checksum64: '', checksumType64: ''\nDEPURAR: Running 'Get-ProcessorBits'\nDEPURAR: CPU is 64 bit\nDEPURAR: Setting url to\n'http://windows.php.net/downloads/releases/archives/php-5.6.3-nts-Win32-VC11-x64.zip' and\nbitPackage to 64\nDEPURAR: Running 'Get-WebHeaders' with\nurl:'http://windows.php.net/downloads/releases/archives/php-5.6.3-nts-Win32-VC11-x64.zip',\nuserAgent: 'chocolatey command line'\nUsing this proxyserver: 10.200.2.2:8080\nDEPURAR: Setting the UserAgent to 'chocolatey command line'\nDEPURAR: Request Headers:\nDEPURAR:   'Accept':'/'\nDEPURAR:   'User-Agent':'chocolatey command line'\nDEPURAR: Converting Security Protocol to SSL3 only for Powershell v2\nDEPURAR: Running 'Get-WebHeaders' with\nurl:'http://windows.php.net/downloads/releases/archives/php-5.6.3-nts-Win32-VC11-x64.zip',\nuserAgent: 'chocolatey command line'\nUsing this proxyserver: 10.200.2.2:8080\nDEPURAR: Setting the UserAgent to 'chocolatey command line'\nDEPURAR: Request Headers:\nDEPURAR:   'Accept':'/'\nDEPURAR:   'User-Agent':'chocolatey command line'\nWrite-Error : php did not finish successfully. Boo to the chocolatey gods!\n\n[ERROR] Exception calling \"GetResponse\" with \"0\" argument(s): \"The remote server returned an error : (407) Proxy Authentication Required.\"\nAt C:\\ProgramData\\chocolatey\\chocolateyinstall\\helpers\\functions\\Write-ChocolateyFailure.ps1:30 ch ar:14\n+   Write-Error <<<<  $errorMessage\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nDEPURAR: Running 'Move-BadInstall' for php version: '5.6.3',\npackageFolder:'C:\\ProgramData\\chocolatey\\lib\\php.5.6.3'\nDEPURAR: Moving bad package 'php v5.6.3' to 'C:\\ProgramData\\chocolatey\\lib-bad'.\nWrite-Error : Package 'php v5.6.3' did not install successfully: Exception calling \"GetResponse\" w ith \"0\" argument(s): \"The remote server returned an error: (407) Proxy Authentication Required.\"\nAt C:\\ProgramData\\chocolatey\\chocolateyinstall\\functions\\Chocolatey-NuGet.ps1:90 char:28\n+                 Write-Error <<<<  \"Package '$installedPackageName v$installedPackageVersion' d id not install successfully: $($_.Exception.Message)\"\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nDEPURAR: Evaluating NuGet output for line:\nFinished installing 'php' and dependencies - if errors not shown in console, none detected. Check log for errors if unsure.\nDEPURAR: Running 'Get-ConfigValue' with configValue:'ksMessage'\nDEPURAR: Running 'Get-UserConfigValue' with configValue:'ksMessage'\nDEPURAR: After checking the user config the value of 'ksMessage' is ''\nDEPURAR: Value not found in the user config file - checking the global config\nDEPURAR: Running 'Get-GlobalConfigValue' with configValue:'ksMessage'\nDEPURAR: After checking the global config the value of 'ksMessage' is 'true'\n```\n\n. Thanks @ferventcoder :+1: \n. First thanks a lot for try help me (again) @ferventcoder, follow the error of code with -debug flag:\n``` sh\nDEPURAR: Running 'Append-InstallLog' with chocoInstallLog:''\nDEPURAR: Arguments: $command = 'install'|$force=False\n|$prerelease=False|$packageNames='php'\n|$source=''\n|$version=''|$allVersions=False\n|$overrideArguments=False|$InstallArguments=''\n|$localonly=False|$verbosity=False|$debug=True|$quiet=False\n|$name=''|$ignoreDependencies=False|$forceX86=False\n|$packageParameters=''\n|PowerShellVersion=2.0|OSVersion=6.1.7601.65536\nDEPURAR: Current Security Protocol - Ssl3, Tls\nDEPURAR: Running 'Chocolatey-Install' for 'php' with source: '', version: '',\ninstallerArguments:''\nDEPURAR: Running 'Chocolatey-NuGet' for php with source:''. Force? False\nChocolatey (v0.9.8.28) is installing 'php' and dependencies. By installing you accept the license for 'php' and each dependency you are installing.\nDEPURAR: Installing packages to \"C:\\ProgramData\\chocolatey\\lib\".\nDEPURAR: Running 'Run-NuGet' for php with source: '', version:''\nDEPURAR:  NuGet _\nDEPURAR: Running 'Get-ConfigValue' with configValue:'useNuGetForSources'\nDEPURAR: Running 'Get-UserConfigValue' with configValue:'useNuGetForSources'\nDEPURAR: After checking the user config the value of 'useNuGetForSources' is ''\nDEPURAR: Value not found in the user config file - checking the global config\nDEPURAR: Running 'Get-GlobalConfigValue' with configValue:'useNuGetForSources'\nDEPURAR: After checking the global config the value of 'useNuGetForSources' is 'false'\nDEPURAR: Running 'Get-UserConfigValue' with configValue:'sources'\nDEPURAR: Running 'Get-GlobalConfigValue' with configValue:'sources'\nDEPURAR: Using global sources\nDEPURAR: Using '-Source \"https://chocolatey.org/api/v2/;\"' as the source arguments\nDEPURAR: Calling 'C:\\ProgramData\\chocolatey\\chocolateyinstall\\nuget.exe' install php\n-OutputDirectory \"C:\\ProgramData\\chocolatey\\lib\" -Source \"https://chocolatey.org/api/v2/;\"\n-NonInteractive -NoCache\nDEPURAR: Installing 'php 5.6.3'.\nSuccessfully installed 'php 5.6.3'.\nDEPURAR: Evaluating NuGet output for line: Installing 'php 5.6.3'.\nDEPURAR: Evaluating NuGet output for line: Successfully installed 'php 5.6.3'.\nDEPURAR: NuGet installed php. If we are ignoring dependencies (False) then we will clean this up.\nphp v5.6.3\nDEPURAR: Running 'Delete-ExistingErrorLog' for php\nDEPURAR: Looking for failure log at\n'D:\\Users\\BRUNOB~1\\AppData\\Local\\Temp\\chocolatey\\php\\failure.log'\nDEPURAR: Found the failure log. Deleting it...\nDEPURAR: Running 'Run-ChocolateyPS1' for php with\npackageFolder:'C:\\ProgramData\\chocolatey\\lib\\php.5.6.3', action: 'install'\nDEPURAR:    PowerShell install (chocolateyinstall.ps1) \nDEPURAR:   Looking for chocolateyinstall.ps1 in folder 'C:\\ProgramData\\chocolatey\\lib\\php.5.6.3'.\nIf chocolateyinstall.ps1 is found, it will be run.\nDEPURAR: Action file is 'chocolateyInstall.ps1'\nDEPURAR: Running 'C:\\ProgramData\\chocolatey\\lib\\php.5.6.3\\tools\\chocolateyInstall.ps1'\nPlease make sure you have CGI installed in IIS for local hosting\nLocating package...\nChecking archive...\nDEPURAR: Running 'Get-BinRoot'\nDEPURAR: Running 'Install-ChocolateyZipPackage' for php with\nurl:'http://windows.php.net/downloads/releases/archives/php-5.6.3-nts-Win32-VC11-x86.zip',\nunzipLocation: 'C:\\ProgramData\\chocolatey\\bin\\php', url64bit:\n'http://windows.php.net/downloads/releases/archives/php-5.6.3-nts-Win32-VC11-x64.zip',\nspecificFolder: '', checksum: '', checksumType: '', checksum64: '', checksumType64: ''\nDEPURAR: Running 'Get-ChocolateyWebFile' for php with\nurl:'http://windows.php.net/downloads/releases/archives/php-5.6.3-nts-Win32-VC11-x86.zip',\nfileFullPath:'D:\\Users\\BRUNOB~1\\AppData\\Local\\Temp\\chocolatey\\php\\phpInstall.zip',\nurl64bit:'http://windows.php.net/downloads/releases/archives/php-5.6.3-nts-Win32-VC11-x64.zip',\nchecksum: '', checksumType: '', checksum64: '', checksumType64: ''\nDEPURAR: Running 'Get-ProcessorBits'\nDEPURAR: CPU is 64 bit\nDEPURAR: Setting url to\n'http://windows.php.net/downloads/releases/archives/php-5.6.3-nts-Win32-VC11-x64.zip' and\nbitPackage to 64\nDEPURAR: Running 'Get-WebHeaders' with\nurl:'http://windows.php.net/downloads/releases/archives/php-5.6.3-nts-Win32-VC11-x64.zip',\nuserAgent: 'chocolatey command line'\nUsing this proxyserver: 10.200.2.2:8080\nDEPURAR: Setting the UserAgent to 'chocolatey command line'\nDEPURAR: Request Headers:\nDEPURAR:   'Accept':'/'\nDEPURAR:   'User-Agent':'chocolatey command line'\nDEPURAR: Converting Security Protocol to SSL3 only for Powershell v2\nDEPURAR: Running 'Get-WebHeaders' with\nurl:'http://windows.php.net/downloads/releases/archives/php-5.6.3-nts-Win32-VC11-x64.zip',\nuserAgent: 'chocolatey command line'\nUsing this proxyserver: 10.200.2.2:8080\nDEPURAR: Setting the UserAgent to 'chocolatey command line'\nDEPURAR: Request Headers:\nDEPURAR:   'Accept':'/'\nDEPURAR:   'User-Agent':'chocolatey command line'\nWrite-Error : php did not finish successfully. Boo to the chocolatey gods!\n\n[ERROR] Exception calling \"GetResponse\" with \"0\" argument(s): \"The remote server returned an error : (407) Proxy Authentication Required.\"\nAt C:\\ProgramData\\chocolatey\\chocolateyinstall\\helpers\\functions\\Write-ChocolateyFailure.ps1:30 ch ar:14\n+   Write-Error <<<<  $errorMessage\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nDEPURAR: Running 'Move-BadInstall' for php version: '5.6.3',\npackageFolder:'C:\\ProgramData\\chocolatey\\lib\\php.5.6.3'\nDEPURAR: Moving bad package 'php v5.6.3' to 'C:\\ProgramData\\chocolatey\\lib-bad'.\nWrite-Error : Package 'php v5.6.3' did not install successfully: Exception calling \"GetResponse\" w ith \"0\" argument(s): \"The remote server returned an error: (407) Proxy Authentication Required.\"\nAt C:\\ProgramData\\chocolatey\\chocolateyinstall\\functions\\Chocolatey-NuGet.ps1:90 char:28\n+                 Write-Error <<<<  \"Package '$installedPackageName v$installedPackageVersion' d id not install successfully: $($_.Exception.Message)\"\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nDEPURAR: Evaluating NuGet output for line:\nFinished installing 'php' and dependencies - if errors not shown in console, none detected. Check log for errors if unsure.\nDEPURAR: Running 'Get-ConfigValue' with configValue:'ksMessage'\nDEPURAR: Running 'Get-UserConfigValue' with configValue:'ksMessage'\nDEPURAR: After checking the user config the value of 'ksMessage' is ''\nDEPURAR: Value not found in the user config file - checking the global config\nDEPURAR: Running 'Get-GlobalConfigValue' with configValue:'ksMessage'\nDEPURAR: After checking the global config the value of 'ksMessage' is 'true'\n```\n\n. Thanks @ferventcoder :+1: \n. ",
    "cobrabr": "Sure thing. Here's the log for CCleaner:\n```\nDEBUG: Running 'Append-InstallLog' with chocoInstallLog:''\nDEBUG: Arguments: $command = 'update'|$force=False\n|$prerelease=False|$packageNames='ccleaner'\n|$source=''\n|$version=''|$allVersions=False\n|$overrideArguments=False|$InstallArguments=''\n|$localonly=False|$verbosity=False|$debug=True|$quiet=False\n|$name=''|$ignoreDependencies=False|$forceX86=False\n|$packageParameters=''\n|PowerShellVersion=4.0|OSVersion=6.1.7601.65536\nDEBUG: Current Security Protocol - Ssl3, Tls\nDEBUG: Running 'Chocolatey-Update' for 'ccleaner' with source:''.\nDEBUG: Running 'Chocolatey-Version' for ccleaner with source:''.\nDEBUG: Getting local packages based on all or passed in package name\nDEBUG: Running 'Chocolatey-List' with selector: 'ccleaner', source:'C:\\ProgramData\\Chocolatey\\lib'\nDEBUG: Showing prerelease versions of packages\nDEBUG: Executing command [\"C:\\ProgramData\\Chocolatey\\chocolateyinstall\\nuget.exe\" list \"ccleaner\" -Prerelease -NonInteractive -Source\n\"C:\\ProgramData\\Chocolatey\\lib\"]\nDEBUG: Command [\"C:\\ProgramData\\Chocolatey\\chocolateyinstall\\nuget.exe\" list \"ccleaner\" -Prerelease -NonInteractive -Source\n\"C:\\ProgramData\\Chocolatey\\lib\"] exited with '0'.\nDEBUG: Getting ccleaner from returned local list\nDEBUG: Running 'Chocolatey-List' with selector: 'ccleaner', source:''\nDEBUG: Running 'Get-ConfigValue' with configValue:'useNuGetForSources'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'useNuGetForSources'\nDEBUG: After checking the user config the value of 'useNuGetForSources' is ''\nDEBUG: Value not found in the user config file - checking the global config\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'useNuGetForSources'\nDEBUG: After checking the global config the value of 'useNuGetForSources' is 'false'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'sources'\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'sources'\nDEBUG: Using global sources\nDEBUG: Using '-Source \"https://chocolatey.org/api/v2/;\"' as the source arguments\nDEBUG: Executing command [\"C:\\ProgramData\\Chocolatey\\chocolateyinstall\\nuget.exe\" list \"ccleaner\" -NonInteractive -Source\n\"https://chocolatey.org/api/v2/;\"]\nDEBUG: Command [\"C:\\ProgramData\\Chocolatey\\chocolateyinstall\\nuget.exe\" list \"ccleaner\" -NonInteractive -Source \"https://chocolatey.org/api/v2/;\"]\nexited with '0'.\nDEBUG: Getting ccleaner from returned remote list\nDEBUG: Long version of 4.19.4867 is '000000000004.000000000019.000000004867'\nDEBUG: Long version of 4.16.4763 is '000000000004.000000000016.000000004763'\nUpdating ccleaner from 4.16.4763 to 4.19.4867\nDEBUG: Running 'Chocolatey-NuGet' for ccleaner with source:''. Force? False\nChocolatey (v0.9.8.28) is installing 'ccleaner' and dependencies. By installing you accept the license for 'ccleaner' and each dependency you are installing.\nDEBUG: Installing packages to \"C:\\ProgramData\\Chocolatey\\lib\".\nDEBUG: Running 'Run-NuGet' for ccleaner with source: '', version:''\nDEBUG:  NuGet _\nDEBUG: Running 'Get-ConfigValue' with configValue:'useNuGetForSources'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'useNuGetForSources'\nDEBUG: After checking the user config the value of 'useNuGetForSources' is ''\nDEBUG: Value not found in the user config file - checking the global config\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'useNuGetForSources'\nDEBUG: After checking the global config the value of 'useNuGetForSources' is 'false'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'sources'\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'sources'\nDEBUG: Using global sources\nDEBUG: Using '-Source \"https://chocolatey.org/api/v2/;\"' as the source arguments\nDEBUG: Calling 'C:\\ProgramData\\Chocolatey\\chocolateyinstall\\nuget.exe' install ccleaner -OutputDirectory \"C:\\ProgramData\\Chocolatey\\lib\" -Source\n\"https://chocolatey.org/api/v2/;\" -NonInteractive -NoCache\nDEBUG: Installing 'ccleaner 4.19.4867'.\nSuccessfully installed 'ccleaner 4.19.4867'.\nDEBUG: Evaluating NuGet output for line: Installing 'ccleaner 4.19.4867'.\nDEBUG: Evaluating NuGet output for line: Successfully installed 'ccleaner 4.19.4867'.\nDEBUG: NuGet installed ccleaner. If we are ignoring dependencies (False) then we will clean this up.\nccleaner v4.19.4867\nDEBUG: Running 'Delete-ExistingErrorLog' for ccleaner\nDEBUG: Looking for failure log at 'C:\\TEMP\\chocolatey\\ccleaner\\failure.log'\nDEBUG: Found the failure log. Deleting it...\nDEBUG: Running 'Run-ChocolateyPS1' for ccleaner with packageFolder:'C:\\ProgramData\\Chocolatey\\lib\\ccleaner.4.19.4867', action: 'install'\nDEBUG:    PowerShell install (chocolateyinstall.ps1) \nDEBUG:   Looking for chocolateyinstall.ps1 in folder 'C:\\ProgramData\\Chocolatey\\lib\\ccleaner.4.19.4867'. If chocolateyinstall.ps1 is found, it will be run.\nDEBUG: Action file is 'chocolateyInstall.ps1'\nDEBUG: Running 'C:\\ProgramData\\Chocolatey\\lib\\ccleaner.4.19.4867\\tools\\chocolateyInstall.ps1'\nDEBUG: Running 'Start-ChocolateyProcessAsAdmin' with exeToRun:'powershell', statements: '&\n'C:\\ProgramData\\Chocolatey\\lib\\ccleaner.4.19.4867\\tools\\regAdd.ps1''\nDEBUG: Elevating Permissions and running C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoProfile -ExecutionPolicy unrestricted -Command\n\"& import-module -name  'C:\\ProgramData\\Chocolatey\\chocolateyinstall\\helpers\\chocolateyInstaller.psm1'; try{&\n'C:\\ProgramData\\Chocolatey\\lib\\ccleaner.4.19.4867\\tools\\regAdd.ps1'; start-sleep 6;}catch{write-error 'That was not sucessful';start-sleep 8;throw;}\". This may take awhile, depending on the statements.\nWrite-Error : [ERROR] Running C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\powershell.exe with & 'C:\\ProgramData\\Chocolatey\\lib\\ccleaner.4.19.4867\\tools\\regAdd.ps1'; was not successful. Exit code was '121'.\nAt C:\\ProgramData\\Chocolatey\\chocolateyinstall\\helpers\\functions\\Start-ChocolateyProcessAsAdmin.ps1:46 char:5\n+     Write-Error $errorMessage\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nWrite-Error : ccleaner did not finish successfully. Boo to the chocolatey gods!\n[ERROR] [ERROR] Running C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\powershell.exe with & 'C:\\ProgramData\\Chocolatey\\lib\\ccleaner.4.19.4867\\tools\\regAdd.ps1'; was not successful. Exit code was '121'.\nAt C:\\ProgramData\\Chocolatey\\chocolateyinstall\\helpers\\functions\\Write-ChocolateyFailure.ps1:30 char:3\n+   Write-Error $errorMessage\n+   ~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nDEBUG: Running 'Move-BadInstall' for ccleaner version: '4.19.4867', packageFolder:'C:\\ProgramData\\Chocolatey\\lib\\ccleaner.4.19.4867'\nDEBUG: Moving bad package 'ccleaner v4.19.4867' to 'C:\\ProgramData\\Chocolatey\\lib-bad'.\nWrite-Error : Package 'ccleaner v4.19.4867' did not install successfully: [ERROR] Running C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\powershell.exe with & 'C:\\ProgramData\\Chocolatey\\lib\\ccleaner.4.19.4867\\tools\\regAdd.ps1'; was not successful. Exit code was '121'.\nAt C:\\ProgramData\\Chocolatey\\chocolateyinstall\\functions\\Chocolatey-NuGet.ps1:90 char:17\n+                 Write-Error \"Package `'$installedPackageName v$installedPackageV ...\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nDEBUG: Evaluating NuGet output for line:\nFinished installing 'ccleaner' and dependencies - if errors not shown in console, none detected. Check log for errors if unsure.\nDEBUG: Running 'Get-ConfigValue' with configValue:'ksMessage'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'ksMessage'\nDEBUG: After checking the user config the value of 'ksMessage' is ''\nDEBUG: Value not found in the user config file - checking the global config\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'ksMessage'\nDEBUG: After checking the global config the value of 'ksMessage' is 'true'\n``\n. Any news on this issue?\n. @ferventcoder Any news? I've been unable to update several of my Chocolatey-installed applications because of this error...\n. @ferventcoder Any luck with reproducing the issue? I just ran into this problem with yet another package: Nuget Package Explorer (running Chocolatey v0.9.8.32).\n. Still waiting... Chocolatey isn't really useful with this bug happening for more than half the packages I try to install.\n. Will do.\n. I was able to install Nuget Package Explorer with Chocolatey 0.9.9-rc5. I updated the other packages I was having issue with manually, but I will try again soon and I'll keep you posted.\n. Thanks. I was able to upgrade Virtual Box (which was failing with 0.9.8) as well. I'm running into another issue, however: I'm trying to upgrade Git, but since I have posh-git and Git Extensions, runningchoco upgrade git` shows these messages:\n\nChocolatey v0.9.9.0\nUpgrading the following packages:\ngit\nBy installing you accept licenses for the packages.\nYou have git v1.9.5 installed. Version 1.9.5.20150114 is available based on your source(s)\nUnable to uninstall 'git 1.9.5' because 'gitextensions 2.48, poshgit 0.5.0.201401009' depend on it.\n. LOL, alright. I'll give it a try. Thanks. =D\n. Using --ignore-dependencies didn't work, either. Getting the same exact error.\n. Yeah, and TortoiseGit worked (I posted the same on chocolatey/choco#98), but it was a different error that was being reported.\n. @ferventcoder - Tried installing iTunes with Chocolatey 0.9.9-rc5 and got the same error as before:\n\n```\nChocolatey v0.9.9.0\nInstalling the following packages:\nitunes\nBy installing you accept licenses for the packages.\niTunes v12.0.1.20141019 (forced)\n 7-Zip (A) 9.20  Copyright (c) 1999-2010 Igor Pavlov  2010-11-18\n Processing archive: C:\\TEMP\\chocolatey\\iTunes\\iTunesInstall.exe\n Extracting  iTunes64.msi\n Extracting  AppleSoftwareUpdate.msi\n Extracting  AppleApplicationSupport.msi\n Extracting  AppleMobileDeviceSupport64.msi\n Extracting  Bonjour64.msi\n Extracting  SetupAdmin.exe\n Everything is Ok\n Files: 6\n Size:       131784496\n Compressed: 122418480\n Installing appleapplicationsupport...\n appleapplicationsupport has been installed.\n Installing applemobiledevicesupport...\n applemobiledevicesupport has been installed.\n Installing bonjour...\n WARNING: Write-ChocolateyFailure is deprecated. If you are the package\n maintainer, please use 'throw $_.Exception' instead.\n [ERROR] Running msiexec with /i \"C:\\TEMP\\chocolatey\\iTunes\\Bonjour64.msi\"\n /quiet /norestart  was not successful. Exit code was '1603' Error Message:\n .\n At C:\\ProgramData\\chocolatey\\helpers\\functions\\Start-ChocolateyProcessAsAdmin.p\n s1:92 char:5\n +     throw $errorMessage\n +     ~~~~~~~~~~~~~~~~~~~\n     + CategoryInfo          : OperationStopped: ([ERROR] Running...or Message:\n .:String) [], RuntimeException\n     + FullyQualifiedErrorId : [ERROR] Running msiexec with /i \"C:\\TEMP\\chocola\n    tey\\iTunes\\Bonjour64.msi\" /quiet /norestart  was not successful. Exit code\n    was '1603' Error Message:\n .\nitunes install not successful.\nError while running 'C:\\ProgramData\\chocolatey\\lib\\iTunes\\tools\\chocolateyInstall.ps1'.\n See log for details.\nChocolatey installed 0/1 package(s). 1 package(s) failed.\n See the log for details.\nFailures:\n - itunes\n```\nIt may have something to do with the fact that I already had Bonjour installed prior to installing iTunes. I'll try to run some more tests and I'll let you know.\n. Uninstalling Bonjour solved the issue -- maybe that can give you some hint to identify the issue with the previous versions? Perhaps something to do with trying to run installers for components already present in the system was causing Start-ChocolateyProcessAsAdmin to fail (maybe because it was expecting a different exit code from the installers)?\n. Done. :)\n. Sure thing. Here's the log for CCleaner:\n```\nDEBUG: Running 'Append-InstallLog' with chocoInstallLog:''\nDEBUG: Arguments: $command = 'update'|$force=False\n|$prerelease=False|$packageNames='ccleaner'\n|$source=''\n|$version=''|$allVersions=False\n|$overrideArguments=False|$InstallArguments=''\n|$localonly=False|$verbosity=False|$debug=True|$quiet=False\n|$name=''|$ignoreDependencies=False|$forceX86=False\n|$packageParameters=''\n|PowerShellVersion=4.0|OSVersion=6.1.7601.65536\nDEBUG: Current Security Protocol - Ssl3, Tls\nDEBUG: Running 'Chocolatey-Update' for 'ccleaner' with source:''.\nDEBUG: Running 'Chocolatey-Version' for ccleaner with source:''.\nDEBUG: Getting local packages based on all or passed in package name\nDEBUG: Running 'Chocolatey-List' with selector: 'ccleaner', source:'C:\\ProgramData\\Chocolatey\\lib'\nDEBUG: Showing prerelease versions of packages\nDEBUG: Executing command [\"C:\\ProgramData\\Chocolatey\\chocolateyinstall\\nuget.exe\" list \"ccleaner\" -Prerelease -NonInteractive -Source\n\"C:\\ProgramData\\Chocolatey\\lib\"]\nDEBUG: Command [\"C:\\ProgramData\\Chocolatey\\chocolateyinstall\\nuget.exe\" list \"ccleaner\" -Prerelease -NonInteractive -Source\n\"C:\\ProgramData\\Chocolatey\\lib\"] exited with '0'.\nDEBUG: Getting ccleaner from returned local list\nDEBUG: Running 'Chocolatey-List' with selector: 'ccleaner', source:''\nDEBUG: Running 'Get-ConfigValue' with configValue:'useNuGetForSources'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'useNuGetForSources'\nDEBUG: After checking the user config the value of 'useNuGetForSources' is ''\nDEBUG: Value not found in the user config file - checking the global config\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'useNuGetForSources'\nDEBUG: After checking the global config the value of 'useNuGetForSources' is 'false'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'sources'\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'sources'\nDEBUG: Using global sources\nDEBUG: Using '-Source \"https://chocolatey.org/api/v2/;\"' as the source arguments\nDEBUG: Executing command [\"C:\\ProgramData\\Chocolatey\\chocolateyinstall\\nuget.exe\" list \"ccleaner\" -NonInteractive -Source\n\"https://chocolatey.org/api/v2/;\"]\nDEBUG: Command [\"C:\\ProgramData\\Chocolatey\\chocolateyinstall\\nuget.exe\" list \"ccleaner\" -NonInteractive -Source \"https://chocolatey.org/api/v2/;\"]\nexited with '0'.\nDEBUG: Getting ccleaner from returned remote list\nDEBUG: Long version of 4.19.4867 is '000000000004.000000000019.000000004867'\nDEBUG: Long version of 4.16.4763 is '000000000004.000000000016.000000004763'\nUpdating ccleaner from 4.16.4763 to 4.19.4867\nDEBUG: Running 'Chocolatey-NuGet' for ccleaner with source:''. Force? False\nChocolatey (v0.9.8.28) is installing 'ccleaner' and dependencies. By installing you accept the license for 'ccleaner' and each dependency you are installing.\nDEBUG: Installing packages to \"C:\\ProgramData\\Chocolatey\\lib\".\nDEBUG: Running 'Run-NuGet' for ccleaner with source: '', version:''\nDEBUG:  NuGet _\nDEBUG: Running 'Get-ConfigValue' with configValue:'useNuGetForSources'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'useNuGetForSources'\nDEBUG: After checking the user config the value of 'useNuGetForSources' is ''\nDEBUG: Value not found in the user config file - checking the global config\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'useNuGetForSources'\nDEBUG: After checking the global config the value of 'useNuGetForSources' is 'false'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'sources'\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'sources'\nDEBUG: Using global sources\nDEBUG: Using '-Source \"https://chocolatey.org/api/v2/;\"' as the source arguments\nDEBUG: Calling 'C:\\ProgramData\\Chocolatey\\chocolateyinstall\\nuget.exe' install ccleaner -OutputDirectory \"C:\\ProgramData\\Chocolatey\\lib\" -Source\n\"https://chocolatey.org/api/v2/;\" -NonInteractive -NoCache\nDEBUG: Installing 'ccleaner 4.19.4867'.\nSuccessfully installed 'ccleaner 4.19.4867'.\nDEBUG: Evaluating NuGet output for line: Installing 'ccleaner 4.19.4867'.\nDEBUG: Evaluating NuGet output for line: Successfully installed 'ccleaner 4.19.4867'.\nDEBUG: NuGet installed ccleaner. If we are ignoring dependencies (False) then we will clean this up.\nccleaner v4.19.4867\nDEBUG: Running 'Delete-ExistingErrorLog' for ccleaner\nDEBUG: Looking for failure log at 'C:\\TEMP\\chocolatey\\ccleaner\\failure.log'\nDEBUG: Found the failure log. Deleting it...\nDEBUG: Running 'Run-ChocolateyPS1' for ccleaner with packageFolder:'C:\\ProgramData\\Chocolatey\\lib\\ccleaner.4.19.4867', action: 'install'\nDEBUG:    PowerShell install (chocolateyinstall.ps1) \nDEBUG:   Looking for chocolateyinstall.ps1 in folder 'C:\\ProgramData\\Chocolatey\\lib\\ccleaner.4.19.4867'. If chocolateyinstall.ps1 is found, it will be run.\nDEBUG: Action file is 'chocolateyInstall.ps1'\nDEBUG: Running 'C:\\ProgramData\\Chocolatey\\lib\\ccleaner.4.19.4867\\tools\\chocolateyInstall.ps1'\nDEBUG: Running 'Start-ChocolateyProcessAsAdmin' with exeToRun:'powershell', statements: '&\n'C:\\ProgramData\\Chocolatey\\lib\\ccleaner.4.19.4867\\tools\\regAdd.ps1''\nDEBUG: Elevating Permissions and running C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoProfile -ExecutionPolicy unrestricted -Command\n\"& import-module -name  'C:\\ProgramData\\Chocolatey\\chocolateyinstall\\helpers\\chocolateyInstaller.psm1'; try{&\n'C:\\ProgramData\\Chocolatey\\lib\\ccleaner.4.19.4867\\tools\\regAdd.ps1'; start-sleep 6;}catch{write-error 'That was not sucessful';start-sleep 8;throw;}\". This may take awhile, depending on the statements.\nWrite-Error : [ERROR] Running C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\powershell.exe with & 'C:\\ProgramData\\Chocolatey\\lib\\ccleaner.4.19.4867\\tools\\regAdd.ps1'; was not successful. Exit code was '121'.\nAt C:\\ProgramData\\Chocolatey\\chocolateyinstall\\helpers\\functions\\Start-ChocolateyProcessAsAdmin.ps1:46 char:5\n+     Write-Error $errorMessage\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nWrite-Error : ccleaner did not finish successfully. Boo to the chocolatey gods!\n[ERROR] [ERROR] Running C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\powershell.exe with & 'C:\\ProgramData\\Chocolatey\\lib\\ccleaner.4.19.4867\\tools\\regAdd.ps1'; was not successful. Exit code was '121'.\nAt C:\\ProgramData\\Chocolatey\\chocolateyinstall\\helpers\\functions\\Write-ChocolateyFailure.ps1:30 char:3\n+   Write-Error $errorMessage\n+   ~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nDEBUG: Running 'Move-BadInstall' for ccleaner version: '4.19.4867', packageFolder:'C:\\ProgramData\\Chocolatey\\lib\\ccleaner.4.19.4867'\nDEBUG: Moving bad package 'ccleaner v4.19.4867' to 'C:\\ProgramData\\Chocolatey\\lib-bad'.\nWrite-Error : Package 'ccleaner v4.19.4867' did not install successfully: [ERROR] Running C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\powershell.exe with & 'C:\\ProgramData\\Chocolatey\\lib\\ccleaner.4.19.4867\\tools\\regAdd.ps1'; was not successful. Exit code was '121'.\nAt C:\\ProgramData\\Chocolatey\\chocolateyinstall\\functions\\Chocolatey-NuGet.ps1:90 char:17\n+                 Write-Error \"Package `'$installedPackageName v$installedPackageV ...\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Write-Error\nDEBUG: Evaluating NuGet output for line:\nFinished installing 'ccleaner' and dependencies - if errors not shown in console, none detected. Check log for errors if unsure.\nDEBUG: Running 'Get-ConfigValue' with configValue:'ksMessage'\nDEBUG: Running 'Get-UserConfigValue' with configValue:'ksMessage'\nDEBUG: After checking the user config the value of 'ksMessage' is ''\nDEBUG: Value not found in the user config file - checking the global config\nDEBUG: Running 'Get-GlobalConfigValue' with configValue:'ksMessage'\nDEBUG: After checking the global config the value of 'ksMessage' is 'true'\n``\n. Any news on this issue?\n. @ferventcoder Any news? I've been unable to update several of my Chocolatey-installed applications because of this error...\n. @ferventcoder Any luck with reproducing the issue? I just ran into this problem with yet another package: Nuget Package Explorer (running Chocolatey v0.9.8.32).\n. Still waiting... Chocolatey isn't really useful with this bug happening for more than half the packages I try to install.\n. Will do.\n. I was able to install Nuget Package Explorer with Chocolatey 0.9.9-rc5. I updated the other packages I was having issue with manually, but I will try again soon and I'll keep you posted.\n. Thanks. I was able to upgrade Virtual Box (which was failing with 0.9.8) as well. I'm running into another issue, however: I'm trying to upgrade Git, but since I have posh-git and Git Extensions, runningchoco upgrade git` shows these messages:\n\nChocolatey v0.9.9.0\nUpgrading the following packages:\ngit\nBy installing you accept licenses for the packages.\nYou have git v1.9.5 installed. Version 1.9.5.20150114 is available based on your source(s)\nUnable to uninstall 'git 1.9.5' because 'gitextensions 2.48, poshgit 0.5.0.201401009' depend on it.\n. LOL, alright. I'll give it a try. Thanks. =D\n. Using --ignore-dependencies didn't work, either. Getting the same exact error.\n. Yeah, and TortoiseGit worked (I posted the same on chocolatey/choco#98), but it was a different error that was being reported.\n. @ferventcoder - Tried installing iTunes with Chocolatey 0.9.9-rc5 and got the same error as before:\n\n```\nChocolatey v0.9.9.0\nInstalling the following packages:\nitunes\nBy installing you accept licenses for the packages.\niTunes v12.0.1.20141019 (forced)\n 7-Zip (A) 9.20  Copyright (c) 1999-2010 Igor Pavlov  2010-11-18\n Processing archive: C:\\TEMP\\chocolatey\\iTunes\\iTunesInstall.exe\n Extracting  iTunes64.msi\n Extracting  AppleSoftwareUpdate.msi\n Extracting  AppleApplicationSupport.msi\n Extracting  AppleMobileDeviceSupport64.msi\n Extracting  Bonjour64.msi\n Extracting  SetupAdmin.exe\n Everything is Ok\n Files: 6\n Size:       131784496\n Compressed: 122418480\n Installing appleapplicationsupport...\n appleapplicationsupport has been installed.\n Installing applemobiledevicesupport...\n applemobiledevicesupport has been installed.\n Installing bonjour...\n WARNING: Write-ChocolateyFailure is deprecated. If you are the package\n maintainer, please use 'throw $_.Exception' instead.\n [ERROR] Running msiexec with /i \"C:\\TEMP\\chocolatey\\iTunes\\Bonjour64.msi\"\n /quiet /norestart  was not successful. Exit code was '1603' Error Message:\n .\n At C:\\ProgramData\\chocolatey\\helpers\\functions\\Start-ChocolateyProcessAsAdmin.p\n s1:92 char:5\n +     throw $errorMessage\n +     ~~~~~~~~~~~~~~~~~~~\n     + CategoryInfo          : OperationStopped: ([ERROR] Running...or Message:\n .:String) [], RuntimeException\n     + FullyQualifiedErrorId : [ERROR] Running msiexec with /i \"C:\\TEMP\\chocola\n    tey\\iTunes\\Bonjour64.msi\" /quiet /norestart  was not successful. Exit code\n    was '1603' Error Message:\n .\nitunes install not successful.\nError while running 'C:\\ProgramData\\chocolatey\\lib\\iTunes\\tools\\chocolateyInstall.ps1'.\n See log for details.\nChocolatey installed 0/1 package(s). 1 package(s) failed.\n See the log for details.\nFailures:\n - itunes\n```\nIt may have something to do with the fact that I already had Bonjour installed prior to installing iTunes. I'll try to run some more tests and I'll let you know.\n. Uninstalling Bonjour solved the issue -- maybe that can give you some hint to identify the issue with the previous versions? Perhaps something to do with trying to run installers for components already present in the system was causing Start-ChocolateyProcessAsAdmin to fail (maybe because it was expecting a different exit code from the installers)?\n. Done. :)\n. ",
    "caiotoon": "Same issue here, also for Atom.\n. Same issue here, also for Atom.\n. ",
    "jenswachtel": "unfortunately I have the same issue with the latest release\n(e.g. installing visualstudio2013ultimate )\n. unfortunately I have the same issue with the latest release\n(e.g. installing visualstudio2013ultimate )\n. ",
    "ericrange": "this doesnt make sense?!?! why would i subscribe to all packages?? i just need 2 or 3\n. ok \"cup Atom -force\" solved the problem... but its still a bug^^\n. maybe chocolatey could incr. the latest version just AFTER the installation and not before\n. yes, i use choco since 135... and it all worked fine so far. but if something interrupts your installtion, choco will set the latest installed version before all finished... so, if the installer chrashes... choco thinks it has already installed the latest version...\n. +1\n. this doesnt make sense?!?! why would i subscribe to all packages?? i just need 2 or 3\n. ok \"cup Atom -force\" solved the problem... but its still a bug^^\n. maybe chocolatey could incr. the latest version just AFTER the installation and not before\n. yes, i use choco since 135... and it all worked fine so far. but if something interrupts your installtion, choco will set the latest installed version before all finished... so, if the installer chrashes... choco thinks it has already installed the latest version...\n. +1\n. ",
    "juliankrispel": "Awesome! CLA? As in Copyright Licensing Agreement or sth like that?\n\nOn 13 Dec 2014, at 15:23, Rob Reynolds notifications@github.com wrote:\nI think this would be awesome! I am working on a CLA that would be required \nfor us to take something like this in, but if that is fine with you, then \nsweet! \nOn Saturday, December 13, 2014, Julian Krispel-Samsel < \nnotifications@github.com> wrote: \n\nHi. I'm a designer, frontend developer and windows user. Without \nchocolatey my life would be a lot harder so thank you! \nI sometimes offer free branding services to projects \nhttp://clojurecup.com I really like \nhttps://github.com/swannodette/om/issues/215. \nI'd love to do contribute branding to chocolatey. Let me know if you'd \napprove. \nCheers! \nJulian \n\u2014 \nReply to this email directly or view it on GitHub \nhttps://github.com/chocolatey/chocolatey/issues/640. \n\n\nRob \n\"Be passionate in all you do\" \nhttp://devlicio.us/blogs/rob_reynolds \nhttp://ferventcoder.com \nhttp://twitter.com/ferventcoder\n\u2014\nReply to this email directly or view it on GitHub.\n. Ok that's cool! Right, I'll get to work then :)\n. Awesome! I'll have a look!\nOn 13 Dec 2014, at 16:17, Gary Ewan Park notifications@github.com wrote:\n@juliankrispel thanks for the offer of a contribution! ChocolateyGUI would welcome any assistance you can provide as well :-) https://github.com/chocolatey/ChocolateyGUI\n\u2014\nReply to this email directly or view it on GitHub.\n. Right, I'm back in action after a long christmas break. Here are some first ideas.\n\nPersonally I'm not settled on anything yet, want to try out some other ideas, but please let me know your thoughts, it's your product after all.\n\n\n. @gep13 good point. it does look a little like the commodore logo.\nhere's a revised version. I also just did a whole bunch of other versions, will upload them in a sec.\n@rismoney other than having a windows drive letter on a stylized candybar there isn't really much extra meaning there, or hidden meaning.\n\n. @rismoney helpful feedback thanks. I had a feeling it might be too stylized to be recognizable.\nSo another idea I've had was to take it a step further and make it look a lot more like a chocolate bar brand.\nSo the first thing I did was to hand-letter the name in a curvy, indulgent kind of style, not to far removed from brands like catbury.\n\nAnd then I played around with some varieties in different colours and different sizes. I think that could work quite well:\n\n\n\n\n\n\n. @rismoney thanks I didn't know that there are plans for chocolatey on other platforms.\nIn answer to your question. From my experience branding doesn't have to be literal in a sense that it depicts the thing that it stands for i.e. machine package managing. It can be metaphorical. In fact the name 'chocolatey' already does exactly that, it's a metaphor for packaging/wrapping/containing software.\n. @ferventcoder thanks for your extensive feedback, super helpful.\nSo firstly I should have been a little bit clearer. The big chocolate bar with wrapping isn't really a logo in the traditional sense that it works in all sizes. It's more like a treatment of the logo, an illustration.\nThe idea is that you can represent your brand in different ways as long as you keep some similarities that make it identifiable. Different versions for different purposes. A large one with more detail could be used for display purposes like the header of a homepage or an ad, or a tshirt, or something like that. \nAnd a smaller version would then be used for such things as favicons, app icons (like the gui) etc. I've included icons in my last post but here are another couple of treatments, in different sizes:\n\n\n. Excellent! Looking at it on my phone I guess I would need to improve the contrast of it\n\nOn 15 Jan 2015, at 19:42, Gary Ewan Park notifications@github.com wrote:\nI quite like this one:\n\u2014\nReply to this email directly or view it on GitHub.\n. Here you go \n\n\nRight, my next step is to make some compositions that show how these would look in use. Before I go there I'd like to nail the colour of the wrapping. Any suggestions? Also, any further comments on what I've done so far @ferventcoder? Take your time I probably won't get to it until next week, got to do some paid work hehe :)\n. also a decision on wether or not the colon behind the c is appropriate is called for. So far I count one vote for it and one against it. But ultimately I guess this should be the owners decision @ferventcoder.\n. @rismoney very kind words much appreciated thank you!\nJust so you know I didn't take any offence. Doing branding work for a couple of years really helped me learn to not be too attached to my own work. I appreciate the feedback that all of you have given, in fact I rely on it. Wether negative or positive, without feedback I'm flying blind.\nI think the small logo works with or without the colon, so although I sway towards the colon, I don't think it makes or breaks the graphic. \nThe thought behind the colon was that it adds a tiny bit of extra meaning to it. I liked the coincidence that the first letter of the product name is also the first windows drive letter. And a drive letter followed by a colon is significantly windows. I get a little sentimental when I see a C: it takes me back to launching Decent from my MSDOS on my first PC.\n\n. thanks @AnneTheAgile. Very encouraging! \n@ferventcoder first regarding the colour choice,  number one below is using the chocolatey light brown. To quickly get some variety, I headed over to Adobe Color and searched for colour schemes related to chocolate. Then I picked some of them, the results are below. Personally, I think there are better ones than number 1 in there. What do you think?\n\n\n\n. Thanks guys! Personally I think both 6 and 8 are good choices.\nAlso @ferventcoder  here are the two side by side \n\nAnd here are some more variations on that icon-size, but with the packaging theme retained:\n\n. And here are the beginnings of an accompanying redesign of the website, in those two colour schemes. This is really only just kicking it off, there are so many paths to explore in that area as well. Of course as always feedback is welcome.\n\n\n\n@ferventcoder If I'm going to far here at all let me know, also if you do want to discuss any of this outside of a github issue, feel free to ping me on skype or such, I'm julian[dot]krispel on skype\nOn a side note: I'm sick of the notion that mac apps always have better design, or that macs in general are much better for design. So one of my goals with this is to help reverse this trend a little.\n. colourscheme number #8 it is then. And 1b with no colon and a white c! I'll make a final round up of the identity now. The goal is to have a zip file with all assets one could possibly need, on and offline. \n@ferventcoder All the better that the redoing of the website is already in motion. As you know, I'd like to contribute to that as well, so I'll continue to engage with the appropriate issue. I imagine that if you take care of the content I could just chime in with some CSS and html changes. If and when you feel comfortable working on this together, let me know :)\n. @ferventcoder awesome thanks!\n. Oh crap. Forgot about this. Will send tomorrow morning!\nOn Sat, May 16, 2015 at 8:54 PM, Rob Reynolds notifications@github.com\nwrote:\n\nHi @juliankrispel https://github.com/juliankrispel - checking in. I\nnoticed that the CLA I sent has still not been signed and would like to\nmove forward.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/640#issuecomment-102666085\n.\n. Oh, so sorry give me an hour I'll upload all the files (for some reason I\nimagined I already sent you everything, I didn't?)\n\nOn Wed, Mar 30, 2016 at 7:34 AM, Rob Reynolds notifications@github.com\nwrote:\n\nGanache (I already love the name):\n-\n   http://marketplace.veer.com/font/Ganache-UMT9002810?skeywords=script%20or%20handwriting [image:\n   image]\n   https://cloud.githubusercontent.com/assets/63502/14132777/178e2bce-f60f-11e5-8cdb-09b719e1d5f5.png\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/640#issuecomment-203256056\n. of course I wouldn't want all that work go to waste :)\n\nOn Wed, Mar 30, 2016 at 9:22 AM, Gary Ewan Park notifications@github.com\nwrote:\n\n@juliankrispel https://github.com/juliankrispel thanks for getting back\nto us about this, really appreciate it! [image: :smile_cat:]\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/640#issuecomment-203285902\n. I am so sorry rob :( I think I remember receiving one and replying but I\nwas travelling and had the file somewhere else\n\nDid I never send you that .ai file? I sort of imagine I did, but that could\njust be it, my imagination\nOn Wed, Mar 30, 2016 at 2:11 PM, Rob Reynolds notifications@github.com\nwrote:\n\nNot sure what happened @juliankrispel https://github.com/juliankrispel\n- I've sent you about 4-5 emails over the last year with no response. I\n  should have just came back here and mentioned so on GitHub as it appears my\n  emails didn't reach you for some reason. :/\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/640#issuecomment-203400733\n. oh ok, I'll upload all I have this afternoon!\n\nOn Wed, Mar 30, 2016 at 2:52 PM, Rob Reynolds notifications@github.com\nwrote:\n\nI have the AI file but it is only has the assets feom the very first part\nof this discussion. Nothing past #640 (comment)\nhttps://github.com/chocolatey/chocolatey/issues/640#issuecomment-69870283\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/640#issuecomment-203418259\n. I honestly don't know what happened to these other emails that you've sent\nme did you send them to julian [at] goodafternoon [dot] co ?\n\nOn Wed, Mar 30, 2016 at 2:53 PM, Julian Krispel-Samsel \njulian@goodafternoon.co wrote:\n\noh ok, I'll upload all I have this afternoon!\nOn Wed, Mar 30, 2016 at 2:52 PM, Rob Reynolds notifications@github.com\nwrote:\n\nI have the AI file but it is only has the assets feom the very first part\nof this discussion. Nothing past #640 (comment)\nhttps://github.com/chocolatey/chocolatey/issues/640#issuecomment-69870283\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/640#issuecomment-203418259\n. Oh, that explains everything, sorry about that I should have added an\nauto-answer there that I'm not 'really' using that one anymore :)\n\n\nOn Wed, Mar 30, 2016 at 2:57 PM, Rob Reynolds notifications@github.com\nwrote:\n\nI was not using that email (didn't know that one) and that was likely the\nproblem. The email we were communicating on was your yahoo one (same as\nlisted on your github profile).\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/640#issuecomment-203419814\n. thanks @peterhuene I'm very excited to be part of this project again and am looking forward to seeing the design in action on chocolatey :)\n. Awesome! CLA? As in Copyright Licensing Agreement or sth like that?\nOn 13 Dec 2014, at 15:23, Rob Reynolds notifications@github.com wrote:\nI think this would be awesome! I am working on a CLA that would be required \nfor us to take something like this in, but if that is fine with you, then \nsweet! \nOn Saturday, December 13, 2014, Julian Krispel-Samsel < \nnotifications@github.com> wrote: \n\nHi. I'm a designer, frontend developer and windows user. Without \nchocolatey my life would be a lot harder so thank you! \nI sometimes offer free branding services to projects \nhttp://clojurecup.com I really like \nhttps://github.com/swannodette/om/issues/215. \nI'd love to do contribute branding to chocolatey. Let me know if you'd \napprove. \nCheers! \nJulian \n\u2014 \nReply to this email directly or view it on GitHub \nhttps://github.com/chocolatey/chocolatey/issues/640. \n\n\nRob \n\"Be passionate in all you do\" \nhttp://devlicio.us/blogs/rob_reynolds \nhttp://ferventcoder.com \nhttp://twitter.com/ferventcoder\n\u2014\nReply to this email directly or view it on GitHub.\n. Ok that's cool! Right, I'll get to work then :)\n. Awesome! I'll have a look!\nOn 13 Dec 2014, at 16:17, Gary Ewan Park notifications@github.com wrote:\n@juliankrispel thanks for the offer of a contribution! ChocolateyGUI would welcome any assistance you can provide as well :-) https://github.com/chocolatey/ChocolateyGUI\n\u2014\nReply to this email directly or view it on GitHub.\n. Right, I'm back in action after a long christmas break. Here are some first ideas.\n\nPersonally I'm not settled on anything yet, want to try out some other ideas, but please let me know your thoughts, it's your product after all.\n\n\n. @gep13 good point. it does look a little like the commodore logo.\nhere's a revised version. I also just did a whole bunch of other versions, will upload them in a sec.\n@rismoney other than having a windows drive letter on a stylized candybar there isn't really much extra meaning there, or hidden meaning.\n\n. @rismoney helpful feedback thanks. I had a feeling it might be too stylized to be recognizable.\nSo another idea I've had was to take it a step further and make it look a lot more like a chocolate bar brand.\nSo the first thing I did was to hand-letter the name in a curvy, indulgent kind of style, not to far removed from brands like catbury.\n\nAnd then I played around with some varieties in different colours and different sizes. I think that could work quite well:\n\n\n\n\n\n\n. @rismoney thanks I didn't know that there are plans for chocolatey on other platforms.\nIn answer to your question. From my experience branding doesn't have to be literal in a sense that it depicts the thing that it stands for i.e. machine package managing. It can be metaphorical. In fact the name 'chocolatey' already does exactly that, it's a metaphor for packaging/wrapping/containing software.\n. @ferventcoder thanks for your extensive feedback, super helpful.\nSo firstly I should have been a little bit clearer. The big chocolate bar with wrapping isn't really a logo in the traditional sense that it works in all sizes. It's more like a treatment of the logo, an illustration.\nThe idea is that you can represent your brand in different ways as long as you keep some similarities that make it identifiable. Different versions for different purposes. A large one with more detail could be used for display purposes like the header of a homepage or an ad, or a tshirt, or something like that. \nAnd a smaller version would then be used for such things as favicons, app icons (like the gui) etc. I've included icons in my last post but here are another couple of treatments, in different sizes:\n\n\n. Excellent! Looking at it on my phone I guess I would need to improve the contrast of it\n\nOn 15 Jan 2015, at 19:42, Gary Ewan Park notifications@github.com wrote:\nI quite like this one:\n\u2014\nReply to this email directly or view it on GitHub.\n. Here you go \n\n\nRight, my next step is to make some compositions that show how these would look in use. Before I go there I'd like to nail the colour of the wrapping. Any suggestions? Also, any further comments on what I've done so far @ferventcoder? Take your time I probably won't get to it until next week, got to do some paid work hehe :)\n. also a decision on wether or not the colon behind the c is appropriate is called for. So far I count one vote for it and one against it. But ultimately I guess this should be the owners decision @ferventcoder.\n. @rismoney very kind words much appreciated thank you!\nJust so you know I didn't take any offence. Doing branding work for a couple of years really helped me learn to not be too attached to my own work. I appreciate the feedback that all of you have given, in fact I rely on it. Wether negative or positive, without feedback I'm flying blind.\nI think the small logo works with or without the colon, so although I sway towards the colon, I don't think it makes or breaks the graphic. \nThe thought behind the colon was that it adds a tiny bit of extra meaning to it. I liked the coincidence that the first letter of the product name is also the first windows drive letter. And a drive letter followed by a colon is significantly windows. I get a little sentimental when I see a C: it takes me back to launching Decent from my MSDOS on my first PC.\n\n. thanks @AnneTheAgile. Very encouraging! \n@ferventcoder first regarding the colour choice,  number one below is using the chocolatey light brown. To quickly get some variety, I headed over to Adobe Color and searched for colour schemes related to chocolate. Then I picked some of them, the results are below. Personally, I think there are better ones than number 1 in there. What do you think?\n\n\n\n. Thanks guys! Personally I think both 6 and 8 are good choices.\nAlso @ferventcoder  here are the two side by side \n\nAnd here are some more variations on that icon-size, but with the packaging theme retained:\n\n. And here are the beginnings of an accompanying redesign of the website, in those two colour schemes. This is really only just kicking it off, there are so many paths to explore in that area as well. Of course as always feedback is welcome.\n\n\n\n@ferventcoder If I'm going to far here at all let me know, also if you do want to discuss any of this outside of a github issue, feel free to ping me on skype or such, I'm julian[dot]krispel on skype\nOn a side note: I'm sick of the notion that mac apps always have better design, or that macs in general are much better for design. So one of my goals with this is to help reverse this trend a little.\n. colourscheme number #8 it is then. And 1b with no colon and a white c! I'll make a final round up of the identity now. The goal is to have a zip file with all assets one could possibly need, on and offline. \n@ferventcoder All the better that the redoing of the website is already in motion. As you know, I'd like to contribute to that as well, so I'll continue to engage with the appropriate issue. I imagine that if you take care of the content I could just chime in with some CSS and html changes. If and when you feel comfortable working on this together, let me know :)\n. @ferventcoder awesome thanks!\n. Oh crap. Forgot about this. Will send tomorrow morning!\nOn Sat, May 16, 2015 at 8:54 PM, Rob Reynolds notifications@github.com\nwrote:\n\nHi @juliankrispel https://github.com/juliankrispel - checking in. I\nnoticed that the CLA I sent has still not been signed and would like to\nmove forward.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/640#issuecomment-102666085\n.\n. Oh, so sorry give me an hour I'll upload all the files (for some reason I\nimagined I already sent you everything, I didn't?)\n\nOn Wed, Mar 30, 2016 at 7:34 AM, Rob Reynolds notifications@github.com\nwrote:\n\nGanache (I already love the name):\n-\n   http://marketplace.veer.com/font/Ganache-UMT9002810?skeywords=script%20or%20handwriting [image:\n   image]\n   https://cloud.githubusercontent.com/assets/63502/14132777/178e2bce-f60f-11e5-8cdb-09b719e1d5f5.png\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/640#issuecomment-203256056\n. of course I wouldn't want all that work go to waste :)\n\nOn Wed, Mar 30, 2016 at 9:22 AM, Gary Ewan Park notifications@github.com\nwrote:\n\n@juliankrispel https://github.com/juliankrispel thanks for getting back\nto us about this, really appreciate it! [image: :smile_cat:]\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/640#issuecomment-203285902\n. I am so sorry rob :( I think I remember receiving one and replying but I\nwas travelling and had the file somewhere else\n\nDid I never send you that .ai file? I sort of imagine I did, but that could\njust be it, my imagination\nOn Wed, Mar 30, 2016 at 2:11 PM, Rob Reynolds notifications@github.com\nwrote:\n\nNot sure what happened @juliankrispel https://github.com/juliankrispel\n- I've sent you about 4-5 emails over the last year with no response. I\n  should have just came back here and mentioned so on GitHub as it appears my\n  emails didn't reach you for some reason. :/\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/640#issuecomment-203400733\n. oh ok, I'll upload all I have this afternoon!\n\nOn Wed, Mar 30, 2016 at 2:52 PM, Rob Reynolds notifications@github.com\nwrote:\n\nI have the AI file but it is only has the assets feom the very first part\nof this discussion. Nothing past #640 (comment)\nhttps://github.com/chocolatey/chocolatey/issues/640#issuecomment-69870283\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/640#issuecomment-203418259\n. I honestly don't know what happened to these other emails that you've sent\nme did you send them to julian [at] goodafternoon [dot] co ?\n\nOn Wed, Mar 30, 2016 at 2:53 PM, Julian Krispel-Samsel \njulian@goodafternoon.co wrote:\n\noh ok, I'll upload all I have this afternoon!\nOn Wed, Mar 30, 2016 at 2:52 PM, Rob Reynolds notifications@github.com\nwrote:\n\nI have the AI file but it is only has the assets feom the very first part\nof this discussion. Nothing past #640 (comment)\nhttps://github.com/chocolatey/chocolatey/issues/640#issuecomment-69870283\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/640#issuecomment-203418259\n. Oh, that explains everything, sorry about that I should have added an\nauto-answer there that I'm not 'really' using that one anymore :)\n\n\nOn Wed, Mar 30, 2016 at 2:57 PM, Rob Reynolds notifications@github.com\nwrote:\n\nI was not using that email (didn't know that one) and that was likely the\nproblem. The email we were communicating on was your yahoo one (same as\nlisted on your github profile).\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/640#issuecomment-203419814\n. thanks @peterhuene I'm very excited to be part of this project again and am looking forward to seeing the design in action on chocolatey :)\n. \n",
    "peterhuene": "@juliankrispel Just saw this thread and wanted to say you're awesome for having contributed to this effort :+1: \n. @juliankrispel Just saw this thread and wanted to say you're awesome for having contributed to this effort :+1: \n. ",
    "airtonix": "Currently it looks like this: \n``` bash\nVersion: '0.9.8.28'\nInstall Directory: 'C:\\ProgramData\\chocolatey'\n== Chocolatey? ==\n\"I'm a tools enabler, a global silent installer. I met your mother.\n Some want to call me apt-get for Windows, I just want to get #chocolatey!\"\nChocolatey is a package manager for Windows (like apt-get but for Windows).\n It was designed to be a decentralized framework for quickly installing\n applications and tools that you need. It is built on the NuGet\n infrastructure currently using PowerShell as its focus for delivering\n packages from the distros to your door, err computer.\nChocolatey is brought to you by the work and inspiration of the community,\n the work and thankless nights of the Chocolatey Team\n (https://github.com/orgs/chocolatey/members), and Rob (@ferventcoder)\n heading up the direction.\nYou can host your own sources and add them to chocolatey, you can extend\n chocolatey's capabilities, and folks, it's only going to get better.\n== Chocolatey gods? ==\nHumor related to playing off of tiki gods. We like humor. Don't take life\n so seriously, you will never get out alive.\n== Release Notes ==\nhttps://github.com/chocolatey/chocolatey/wiki/ReleaseNotes\n== Package License Acceptance Terms ==\nThe act of running chocolatey to install a package constitutes acceptance\n of the license for the application, executable(s), or other artifacts\n that are brought to your machine as a result of a chocolatey install.\nThis acceptance occurs whether you know the license terms or not. It is\n suggested that you read and understand the license terms of any package\n you plan to install prior to installation through chocolatey.\nIf you do not accept the license of a package you are installing, please\n uninstall it and any artifacts that end up on your machine as a result\n of the install.\n== Waiver of Responsibility ==\nThe use of chocolatey means that an individual using chocolatey assumes\n the responsibility for any changes (including any damages of any sort)\n that occur to the system as a result of using chocolatey.\nThis does not supercede the verbage or enforcement of the license for\n chocolatey (currently Apache 2.0), it is only noted here that you are\n waiving any rights to collect damages by your use of chocolatey.\nIt is recommended you read the license\n (http://www.apache.org/licenses/LICENSE-2.0) to gain a full understanding\n (especially section 8. Limitation of Liability) prior to using chocolatey.\n== Commands ==\nFor all commands check out the command reference at:\n https://github.com/chocolatey/chocolatey/wiki/CommandsReference\n\nSearch - choco search something\nList locally installed packages - choco list -lo\nInstall - choco install baretail\nUpdate - choco update baretail\nUninstall - choco uninstall baretail\nInstall ruby gem - choco install compass -source ruby\nInstall python egg - choco install sphynx -source python\nInstall windows feature - choco install IIS -source windowsfeatures\nInstall webpi feature - choco install IIS7.5Express -source webpi\n\nMore advanced commands and switches listed on the command reference,\n including how you can force a package to install the x86 version of a\n package.\nExamples:\n  * choco install nunit\n  * choco install nunit -version 2.5.7.10213\n  * choco install packages.config\n  * choco update nunit -source http://somelocalfeed.com/nuget/\n  * choco help\n  * choco search nunit\n  * choco list -localonly\n  * choco version\n  * choco version nunit\n  * choco uninstall nunit\n  * choco install sphynx -source python\n== Create Packages? ==\nWe have some great guidance on how to do that. Where? I'll give you a\n hint, it rhymes with sticky!\n https://github.com/chocolatey/chocolatey/wiki/CreatePackages\nIn that mess there is a link to the Helper Reference -\n```\n. Currently it looks like this: \n``` bash\nVersion: '0.9.8.28'\nInstall Directory: 'C:\\ProgramData\\chocolatey'\n== Chocolatey? ==\n\"I'm a tools enabler, a global silent installer. I met your mother.\n Some want to call me apt-get for Windows, I just want to get #chocolatey!\"\nChocolatey is a package manager for Windows (like apt-get but for Windows).\n It was designed to be a decentralized framework for quickly installing\n applications and tools that you need. It is built on the NuGet\n infrastructure currently using PowerShell as its focus for delivering\n packages from the distros to your door, err computer.\nChocolatey is brought to you by the work and inspiration of the community,\n the work and thankless nights of the Chocolatey Team\n (https://github.com/orgs/chocolatey/members), and Rob (@ferventcoder)\n heading up the direction.\nYou can host your own sources and add them to chocolatey, you can extend\n chocolatey's capabilities, and folks, it's only going to get better.\n== Chocolatey gods? ==\nHumor related to playing off of tiki gods. We like humor. Don't take life\n so seriously, you will never get out alive.\n== Release Notes ==\nhttps://github.com/chocolatey/chocolatey/wiki/ReleaseNotes\n== Package License Acceptance Terms ==\nThe act of running chocolatey to install a package constitutes acceptance\n of the license for the application, executable(s), or other artifacts\n that are brought to your machine as a result of a chocolatey install.\nThis acceptance occurs whether you know the license terms or not. It is\n suggested that you read and understand the license terms of any package\n you plan to install prior to installation through chocolatey.\nIf you do not accept the license of a package you are installing, please\n uninstall it and any artifacts that end up on your machine as a result\n of the install.\n== Waiver of Responsibility ==\nThe use of chocolatey means that an individual using chocolatey assumes\n the responsibility for any changes (including any damages of any sort)\n that occur to the system as a result of using chocolatey.\nThis does not supercede the verbage or enforcement of the license for\n chocolatey (currently Apache 2.0), it is only noted here that you are\n waiving any rights to collect damages by your use of chocolatey.\nIt is recommended you read the license\n (http://www.apache.org/licenses/LICENSE-2.0) to gain a full understanding\n (especially section 8. Limitation of Liability) prior to using chocolatey.\n== Commands ==\nFor all commands check out the command reference at:\n https://github.com/chocolatey/chocolatey/wiki/CommandsReference\n\nSearch - choco search something\nList locally installed packages - choco list -lo\nInstall - choco install baretail\nUpdate - choco update baretail\nUninstall - choco uninstall baretail\nInstall ruby gem - choco install compass -source ruby\nInstall python egg - choco install sphynx -source python\nInstall windows feature - choco install IIS -source windowsfeatures\nInstall webpi feature - choco install IIS7.5Express -source webpi\n\nMore advanced commands and switches listed on the command reference,\n including how you can force a package to install the x86 version of a\n package.\nExamples:\n  * choco install nunit\n  * choco install nunit -version 2.5.7.10213\n  * choco install packages.config\n  * choco update nunit -source http://somelocalfeed.com/nuget/\n  * choco help\n  * choco search nunit\n  * choco list -localonly\n  * choco version\n  * choco version nunit\n  * choco uninstall nunit\n  * choco install sphynx -source python\n== Create Packages? ==\nWe have some great guidance on how to do that. Where? I'll give you a\n hint, it rhymes with sticky!\n https://github.com/chocolatey/chocolatey/wiki/CreatePackages\nIn that mess there is a link to the Helper Reference -\n```\n. ",
    "hamdrew": "The installer would have to make a registry edit, which is well-documented: http://msdn.microsoft.com/en-us/library/ie/aa767914%28v=vs.85%29.aspx\n. There's a FAQ about the joke, which implies many users bring it up. The FAQ\nis also condescending and dismissive to the user.\nIt may prevent enterprise use due to the unprofessional messages being\ndisplayed on workstations.\nIt has no value to the project and introduces risk.\nI chuckled when I saw it the first time. I love easter eggs, but displaying\nit every time a package is installed may be excessive.\nI hope this is not disregarded by the maintainers, as I think chocolatey is\na great tool that has a future in endpoint management.\nOn Thu, Jan 29, 2015, 4:57 PM Bardia Noohi notifications@github.com wrote:\n\nhttps://github.com/chocolatey/chocolatey/wiki/ChocolateyFAQs#what-is-with-the-chocolatey-gods-in-the-installs\nAlso, they don't necessarily need to be translated.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/669#issuecomment-72121618\n.\n. Thank you for your response!\n. The installer would have to make a registry edit, which is well-documented: http://msdn.microsoft.com/en-us/library/ie/aa767914%28v=vs.85%29.aspx\n. There's a FAQ about the joke, which implies many users bring it up. The FAQ\nis also condescending and dismissive to the user.\n\nIt may prevent enterprise use due to the unprofessional messages being\ndisplayed on workstations.\nIt has no value to the project and introduces risk.\nI chuckled when I saw it the first time. I love easter eggs, but displaying\nit every time a package is installed may be excessive.\nI hope this is not disregarded by the maintainers, as I think chocolatey is\na great tool that has a future in endpoint management.\nOn Thu, Jan 29, 2015, 4:57 PM Bardia Noohi notifications@github.com wrote:\n\nhttps://github.com/chocolatey/chocolatey/wiki/ChocolateyFAQs#what-is-with-the-chocolatey-gods-in-the-installs\nAlso, they don't necessarily need to be translated.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/669#issuecomment-72121618\n.\n. Thank you for your response!\n. \n",
    "dylan-k": "I don't want to explain this to mum over the phone either but for the curious:\nI found the chocolatey.config file located at C:\\ProgramData\\chocolatey\\chocolateyinstall\\chocolatey.config and was able to edit it with a text editor, but I had to use the text editor as an administrator.\n. I don't want to explain this to mum over the phone either but for the curious:\nI found the chocolatey.config file located at C:\\ProgramData\\chocolatey\\chocolateyinstall\\chocolatey.config and was able to edit it with a text editor, but I had to use the text editor as an administrator.\n. ",
    "TimMurphy": "C:\\ProgramData\\chocolatey\\chocolateyinstall\nOn Thu, Dec 18, 2014 at 8:00 AM, Dylan Kinnett notifications@github.com\nwrote:\n\nI couldn't get my mum on the phone but when I tried to explain the\nfilename to windows search it said \"no items match your search\"\nWhat is the location of the chocolatey.config file?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/644#issuecomment-67393198\n.\n. C:\\ProgramData\\chocolatey\\chocolateyinstall\n\nOn Thu, Dec 18, 2014 at 8:00 AM, Dylan Kinnett notifications@github.com\nwrote:\n\nI couldn't get my mum on the phone but when I tried to explain the\nfilename to windows search it said \"no items match your search\"\nWhat is the location of the chocolatey.config file?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/chocolatey/chocolatey/issues/644#issuecomment-67393198\n.\n. \n",
    "davkean": "Hey, thanks Gary, will do. \n. Hey, thanks Gary, will do. \n. ",
    "ahmedmohiduet": "In my case a new blank window appeared everytime  on top of these windows before they went freeze\n. Hi ferventcoder! Sorry for my delay. I have actually tried it in my office pc today. But couldn't reproduce the issue. I will let know as soon as I am able to reproduce it again. :+1: \n. \nHi Rob,\nI was just able to reproduce it my win 7. First I run \"choco install java\". It says not found.Running \"choco install jdk\" also fails as you can see in the screen and after that new blank window appears it  just freezes nothing happens after that.\n. I guess I will have to check it again. Will let you know after successful reproduce :)\n. In my case a new blank window appeared everytime  on top of these windows before they went freeze\n. Hi ferventcoder! Sorry for my delay. I have actually tried it in my office pc today. But couldn't reproduce the issue. I will let know as soon as I am able to reproduce it again. :+1: \n. \nHi Rob,\nI was just able to reproduce it my win 7. First I run \"choco install java\". It says not found.Running \"choco install jdk\" also fails as you can see in the screen and after that new blank window appears it  just freezes nothing happens after that.\n. I guess I will have to check it again. Will let you know after successful reproduce :)\n. ",
    "ararog": "Can't see any download progressbar on Windows Server 10 Tech Preview 2.\n. Can't see any download progressbar on Windows Server 10 Tech Preview 2.\n. ",
    "Massemassimo": "same\n. same\n. ",
    "stephane-r": "Hi,\nI've add \"C:\\ProgramData\\chocolatey\\lib\\nodejs.commandline.0.10.34\\tools\" on PATH Windows, but no result.\nEdit : now it's ok, I had a space between ; and C: :)\n. Hi,\nI've add \"C:\\ProgramData\\chocolatey\\lib\\nodejs.commandline.0.10.34\\tools\" on PATH Windows, but no result.\nEdit : now it's ok, I had a space between ; and C: :)\n. ",
    "andulv": "Thanks for the feedback.\nI have read the contributors.md and totally understand that you might not accept this PR.\nI implemented this feature for own use. We are in the process of deploying Chocolatey against a private repository, and needed a way to enable clients to execute centrally administered scripts.\nWe will be rolling out this modified version of Chocolatey to our clients, but figured we would like to contribute our efforts upstreams.\nConsider this pull request as my first \"feature request\" for this feature. I will follow up on mailing list. :)\nIf the feature is accepted I can reimplement it in the new C# version. \n. Just filed a issue (#652) where I tried to explain this feature and why we see the need for it.\nI also posted to the mailing list (Google group). But my post just disappeared upon submit. Dont know if was session timeout or something, or if the group is moderated and the post will show up later? (I dont have much experience with Google groups).\n. @gep13 Thanks. Waiting for response. Hopefully others will agree with me, or someone comes up with a better way to achieve the same result.\nBTW: If you guys have read the use-case in the issue I filed, you have probably noticed that we are a potential fit for your business licenses. I also noticed that even though the Kickstarter is funded and closed, that you have sold very few of the larger business pledges.\nWould it be possible to go for one of these pledges even though the Kickstarter is closed? \nSend me an e-mail at anders@definit.no if you want to discuss it. \n. Credit card would be no problem for us, as long as we get at an invoice / receipt that specifies that we have paid for software/support or something similar. But we are a small three-person company so not much bureucracy needed.\nBut, guess we'll have to wait then. Judging from the amount of free support I have received today I believe we will manage without paid support for a while. :)\nAnyway, I think our use case might be a interesting niche for you. We support a lot of standalone desktop computers that are not on the same network or in a domain.\nThere exists tons of solutions for distributing / updating desktop applications and configurations, but all/most of them are based on network shares, login scripts, remote powershell or similar. \nJuding by the success of TeamViewer and similar software, there are quite a lof of small companies like us that support non-corporate-networked desktops.\nThe focus (and userbase) of Chocolatey today seems to be prosumers/developers for desktops and enterprise / developers on servers. Our use case is something of a mix between them. \nI.e. a business license that is valid only for internal use in one company, would probably be impossible for us and other similar shops. A license that allows us to deploy on customers computers would be needed.\n. I am aware that our exact use case is probably a bit off from typical Chocolatey usage. But I believe this feature also opens up for a lot of similar use-cases for example regarding server-management and maintenance.\nI can also see some possible use cases for ordinary public Chocolatey packages.\nConsider: CleanUp-TeamViewer.run - A package that removes all traces of all TV versions from your computer.\nThis would probably be useful to have as Chocolatey package.\nBut without special support for .run packages in Chocolatey, this package will be installed and show up in the list of Installed packages. Uninstalling makes no sense. (Some users will maybe even believe uninstallation will revert the cleanup done).\n. I am not quite sure how to interpret your reply.\nAs Chocolatey is today, it appears to me that \"running a package\" == installing something. I think that is also how most other users perceive it.\nThis appearance is augmented by the fact that all packages are kept track of, and can be uininstalled or upgraded. Especially the automatic update bite (cup all, possibly scheduled).\nIf it is your intention that chocolatey package != install something, I think that this feature (or something similar or better) is exactly what is needed. :)\nBTW: I updated the original issue-post with an additional point under 'Use case vs. existing Chocolatey features':\n..When a new script is published, all installed scripts (read: scripts that have been run atleast once) will ..be automatically rerun when we do cup all. (And if e.g. we publish a defrag script, it will be quite weird ..behaviour to have your disk defragged when you update your applications).\n. Configuratiion changes might be(by my definition) in a \"grey zone\" betweeen .run packages and ordinary packages.  \nIn some cases they might qualify for a .run package, but usually it is something you can apply/update/remove and then it is a normal package. And as you say, you want to keep track of it has been done.\nI have noticed the business use of Chocolatey. Most (other) business cases I have read about have very much been concerned with configuration and deployment to servers. Puppet and its like very seldom mentions client/desktop management.\nOne usage I had thought of is systeminfo scripts:\nchoco install ListDriveInfo.run - Lists all drives with available space.\nchoco install ListSqlServer.run - Lists all installed SQL Server instances, with all databases\nAnother is problemfixing:\nchoco install ResetCustomerDisplay.run - Sends commands to COM port that resets stuck display. This command will only be issued when the display actually is stuck. As soon as we have deployed a version of the POS Application that solves this problem (or replaced the brand of customer displays) we can retire this package.\nOr maintenance:\nchoco install DefragDatabase.run <-connectionstring>\nBut I see your arguments, and I am starting to get less than 110% convinced that this feature really is necessary.\nWe might be able to manage with \"Configuration packages\" and ordinary packages that installs sets of custom utils (which are then executed outside of Chocolatey).\nWe are starting deployment now. I will come back with actual real-word examples of situations where we see the need for .run scripts if/when we encounter them. :)\n. Thanks for the feedback.\nI have read the contributors.md and totally understand that you might not accept this PR.\nI implemented this feature for own use. We are in the process of deploying Chocolatey against a private repository, and needed a way to enable clients to execute centrally administered scripts.\nWe will be rolling out this modified version of Chocolatey to our clients, but figured we would like to contribute our efforts upstreams.\nConsider this pull request as my first \"feature request\" for this feature. I will follow up on mailing list. :)\nIf the feature is accepted I can reimplement it in the new C# version. \n. Just filed a issue (#652) where I tried to explain this feature and why we see the need for it.\nI also posted to the mailing list (Google group). But my post just disappeared upon submit. Dont know if was session timeout or something, or if the group is moderated and the post will show up later? (I dont have much experience with Google groups).\n. @gep13 Thanks. Waiting for response. Hopefully others will agree with me, or someone comes up with a better way to achieve the same result.\nBTW: If you guys have read the use-case in the issue I filed, you have probably noticed that we are a potential fit for your business licenses. I also noticed that even though the Kickstarter is funded and closed, that you have sold very few of the larger business pledges.\nWould it be possible to go for one of these pledges even though the Kickstarter is closed? \nSend me an e-mail at anders@definit.no if you want to discuss it. \n. Credit card would be no problem for us, as long as we get at an invoice / receipt that specifies that we have paid for software/support or something similar. But we are a small three-person company so not much bureucracy needed.\nBut, guess we'll have to wait then. Judging from the amount of free support I have received today I believe we will manage without paid support for a while. :)\nAnyway, I think our use case might be a interesting niche for you. We support a lot of standalone desktop computers that are not on the same network or in a domain.\nThere exists tons of solutions for distributing / updating desktop applications and configurations, but all/most of them are based on network shares, login scripts, remote powershell or similar. \nJuding by the success of TeamViewer and similar software, there are quite a lof of small companies like us that support non-corporate-networked desktops.\nThe focus (and userbase) of Chocolatey today seems to be prosumers/developers for desktops and enterprise / developers on servers. Our use case is something of a mix between them. \nI.e. a business license that is valid only for internal use in one company, would probably be impossible for us and other similar shops. A license that allows us to deploy on customers computers would be needed.\n. I am aware that our exact use case is probably a bit off from typical Chocolatey usage. But I believe this feature also opens up for a lot of similar use-cases for example regarding server-management and maintenance.\nI can also see some possible use cases for ordinary public Chocolatey packages.\nConsider: CleanUp-TeamViewer.run - A package that removes all traces of all TV versions from your computer.\nThis would probably be useful to have as Chocolatey package.\nBut without special support for .run packages in Chocolatey, this package will be installed and show up in the list of Installed packages. Uninstalling makes no sense. (Some users will maybe even believe uninstallation will revert the cleanup done).\n. I am not quite sure how to interpret your reply.\nAs Chocolatey is today, it appears to me that \"running a package\" == installing something. I think that is also how most other users perceive it.\nThis appearance is augmented by the fact that all packages are kept track of, and can be uininstalled or upgraded. Especially the automatic update bite (cup all, possibly scheduled).\nIf it is your intention that chocolatey package != install something, I think that this feature (or something similar or better) is exactly what is needed. :)\nBTW: I updated the original issue-post with an additional point under 'Use case vs. existing Chocolatey features':\n..When a new script is published, all installed scripts (read: scripts that have been run atleast once) will ..be automatically rerun when we do cup all. (And if e.g. we publish a defrag script, it will be quite weird ..behaviour to have your disk defragged when you update your applications).\n. Configuratiion changes might be(by my definition) in a \"grey zone\" betweeen .run packages and ordinary packages.  \nIn some cases they might qualify for a .run package, but usually it is something you can apply/update/remove and then it is a normal package. And as you say, you want to keep track of it has been done.\nI have noticed the business use of Chocolatey. Most (other) business cases I have read about have very much been concerned with configuration and deployment to servers. Puppet and its like very seldom mentions client/desktop management.\nOne usage I had thought of is systeminfo scripts:\nchoco install ListDriveInfo.run - Lists all drives with available space.\nchoco install ListSqlServer.run - Lists all installed SQL Server instances, with all databases\nAnother is problemfixing:\nchoco install ResetCustomerDisplay.run - Sends commands to COM port that resets stuck display. This command will only be issued when the display actually is stuck. As soon as we have deployed a version of the POS Application that solves this problem (or replaced the brand of customer displays) we can retire this package.\nOr maintenance:\nchoco install DefragDatabase.run <-connectionstring>\nBut I see your arguments, and I am starting to get less than 110% convinced that this feature really is necessary.\nWe might be able to manage with \"Configuration packages\" and ordinary packages that installs sets of custom utils (which are then executed outside of Chocolatey).\nWe are starting deployment now. I will come back with actual real-word examples of situations where we see the need for .run scripts if/when we encounter them. :)\n. ",
    "et1975": "I suppose it's a \"user error\", apparently I have to end the URL with a / then it works.\n...closing.\n. I suppose it's a \"user error\", apparently I have to end the URL with a / then it works.\n...closing.\n. ",
    "glennsarti": "Sure.  I changed it because the regular expression that is used expects a colon, not an equals sign  ...+):([`.... The code in the article didn't work.  Also the documentation was inconsistent e.g. One of the changes I made was;\nchoco install  -packageParameters \"/Port:82 /Edition=LicenseKey1\"\nSometimes it used equals, and sometimes it used colon which made me really confused when I was using it.\nIf you'd prefer equals, I guess just need to change the regex to ...+)=([`.... and then test it.  If it works, change all the references in documentation from colon to equals.\n. No problem.  Also, should I be allowed to make changes to wiki like that, or should I be raising an issue first?\n. I'm happy for it to be closed\n. If you add in the empty tag then no error is thrown.\nIn my case when I upgraded chocolatey from x.28 to x.30 it was missing.  However I could be experiencing a one-off error.\nWhile this has a low probability of occuring and the workaround is fairly simple, I feel the logic error still needs attention;\n- If the cacheLocation tag should always be in the config file, then the error 'Write-Error : A configuration value for cacheLocation was not found' should be terminal and perhaps steps how to fix it be presented to the user\nor\n- If it is possible that  the cacheLocation tag to not exist, then the case of $cacheLocation of being $null should be handled in the code as per one of my proposals.\nI realise this is a low priority issue, so I'm happy to make the changes and submit a PR for it.\nAlso happy to write some pester tests for it.\n. Fair enough.\nI'll close the issue.\n. Sure.  I changed it because the regular expression that is used expects a colon, not an equals sign  ...+):([`.... The code in the article didn't work.  Also the documentation was inconsistent e.g. One of the changes I made was;\nchoco install  -packageParameters \"/Port:82 /Edition=LicenseKey1\"\nSometimes it used equals, and sometimes it used colon which made me really confused when I was using it.\nIf you'd prefer equals, I guess just need to change the regex to ...+)=([`.... and then test it.  If it works, change all the references in documentation from colon to equals.\n. No problem.  Also, should I be allowed to make changes to wiki like that, or should I be raising an issue first?\n. I'm happy for it to be closed\n. If you add in the empty tag then no error is thrown.\nIn my case when I upgraded chocolatey from x.28 to x.30 it was missing.  However I could be experiencing a one-off error.\nWhile this has a low probability of occuring and the workaround is fairly simple, I feel the logic error still needs attention;\n- If the cacheLocation tag should always be in the config file, then the error 'Write-Error : A configuration value for cacheLocation was not found' should be terminal and perhaps steps how to fix it be presented to the user\nor\n- If it is possible that  the cacheLocation tag to not exist, then the case of $cacheLocation of being $null should be handled in the code as per one of my proposals.\nI realise this is a low priority issue, so I'm happy to make the changes and submit a PR for it.\nAlso happy to write some pester tests for it.\n. Fair enough.\nI'll close the issue.\n. ",
    "matt-richardson": "Thanks @ferventcoder!\n. This was tested successfully on Windows 2008R2, with both Powershell v2.0 and v4.0.\n. Started investigating how the issue came to be, as I'm sure the original error bubbling worked... \nI presume (just a guess, dont know for certain), it was broken by commit https://github.com/chocolatey/chocolatey/commit/abe8bcc80e0348f14e479d6c830c9f693bac46f9 when it changed from Invoke-Expression to just calling the functions directly.\n. Seems @mwrock went tests as well :) Probably best to close this, and merge his.\nWould love to see a new 0.9.8.x version. Will take a while before we can upgrade to the new shiny.\n. Thanks @ferventcoder!\n. This was tested successfully on Windows 2008R2, with both Powershell v2.0 and v4.0.\n. Started investigating how the issue came to be, as I'm sure the original error bubbling worked... \nI presume (just a guess, dont know for certain), it was broken by commit https://github.com/chocolatey/chocolatey/commit/abe8bcc80e0348f14e479d6c830c9f693bac46f9 when it changed from Invoke-Expression to just calling the functions directly.\n. Seems @mwrock went tests as well :) Probably best to close this, and merge his.\nWould love to see a new 0.9.8.x version. Will take a while before we can upgrade to the new shiny.\n. ",
    "masaeedu": "@ferventcoder Could you please clarify what \"tools\" are in this context? Does this refer to tools used by the chocolatey install/uninstall process? If so, would it not make sense to install these to a /tools folder under whatever ChocolateyPath currently is? \nOn the other hand, if this refers to a location where the artifacts constituting the actual software are to be installed (which is what a lot of packages rightly or wrongly use it as), would it not make sense to return a location under /lib based on the package name?\n. I don't have that much stuff installed. If the message is gone in the next version, I could just nuke my directory, get the latest version, then install again with the same environment vars config (which I'm assuming will land my chocolatey install in C:\\Chocolatey again, sans annoying messages). That way you wouldn't have to add the one off option you're describing.\n. Oh, okay. I've set up the variable you're describing manually. It might be nice to turn the non-actionable message above into a prompt that sets the variable automatically (although that might be overkill).\n. What I don't understand is whether this check for chocolatey being in C:\\chocolatey is going to remain in the codebase on a permanent basis. If not (i.e. you're removing the message and the corresponding check), C:\\Chocolatey should be treated as a normal directory, and setting ChocolateyInstall to C:\\Chocolatey should behave equivalently to setting it to C:\\Users\\Me\\Documents\\Bobs\\Your\\Uncle. Am I misunderstanding what's going on?\n. @ferventcoder Could you please clarify what \"tools\" are in this context? Does this refer to tools used by the chocolatey install/uninstall process? If so, would it not make sense to install these to a /tools folder under whatever ChocolateyPath currently is? \nOn the other hand, if this refers to a location where the artifacts constituting the actual software are to be installed (which is what a lot of packages rightly or wrongly use it as), would it not make sense to return a location under /lib based on the package name?\n. I don't have that much stuff installed. If the message is gone in the next version, I could just nuke my directory, get the latest version, then install again with the same environment vars config (which I'm assuming will land my chocolatey install in C:\\Chocolatey again, sans annoying messages). That way you wouldn't have to add the one off option you're describing.\n. Oh, okay. I've set up the variable you're describing manually. It might be nice to turn the non-actionable message above into a prompt that sets the variable automatically (although that might be overkill).\n. What I don't understand is whether this check for chocolatey being in C:\\chocolatey is going to remain in the codebase on a permanent basis. If not (i.e. you're removing the message and the corresponding check), C:\\Chocolatey should be treated as a normal directory, and setting ChocolateyInstall to C:\\Chocolatey should behave equivalently to setting it to C:\\Users\\Me\\Documents\\Bobs\\Your\\Uncle. Am I misunderstanding what's going on?\n. ",
    "jeffchulg": "Hello,\n@powershell method => didn't work\nPowerShell Through Batch Method => didn't work \nBoth showed the same message.\nAs I install it on database servers, Visual studio isn't installed\n. It doesn't work. I have the exact same message.\nThe problem is clearly when it tries to Import a module, as if the provided module was not the good \none...\nI use a member of the Administrators group. The execution policy is Unrestricted. I even ran it with the \"right click\" run as administrator to be sure.\nI use powershell 2.0.\n. PS F:\\JEL-DBA\\Projets\\Server Installation - SQL Server 2012\\scripts\\chocolatey.0.9.8.31\\tools> .\\chocolateyInstall.ps1\n$toolsPath = F:\\JEL-DBA\\Projets\\Server Installation - SQL Server 2012\\scripts\\chocolatey.0.9.8.31\\tools\n$psm1File = F:\\JEL-DBA\\Projets\\Server Installation - SQL Server 2012\\scripts\\chocolatey.0.9.8.31\\tools\\chocolateysetup.\npsm1\nImport-Module : Lecteur introuvable. Il n'existe aucun lecteur nomm\u00e9 \u00ab\u00a0'T\u00a0\u00bb.\nAu niveau de F:\\JEL-DBA\\Projets\\Server Installation - SQL Server 2012\\scripts\\chocolatey.0.9.8.31\\tools\\chocolateyInsta\nll.ps1\u00a0: 13 Caract\u00e8re\u00a0: 18\n-     import-module <<<<  -name  $psm1File;\n  - CategoryInfo          : ObjectNotFound: ('T:String) [Import-Module], DriveNotFoundException\n  - FullyQualifiedErrorId : DriveNotFound,Microsoft.PowerShell.Commands.ImportModuleCommand\nLe terme \u00ab\u00a0Initialize-Chocolatey\u00a0\u00bb n'est pas reconnu comme nom d'applet de commande, fonction, fichier de script ou pro\ngramme ex\u00e9cutable. V\u00e9rifiez l'orthographe du nom, ou si un chemin d'acc\u00e8s existe, v\u00e9rifiez que le chemin d'acc\u00e8s est co\nrrect et r\u00e9essayez.\nAu niveau de F:\\JEL-DBA\\Projets\\Server Installation - SQL Server 2012\\scripts\\chocolatey.0.9.8.31\\tools\\chocolateyInsta\nll.ps1\u00a0: 16 Caract\u00e8re\u00a0: 22\n- Initialize-Chocolatey <<<<\n  - CategoryInfo          : ObjectNotFound: (Initialize-Chocolatey:String) [], CommandNotFoundException\n  - FullyQualifiedErrorId : CommandNotFoundException\nPS F:\\JEL-DBA\\Projets\\Server Installation - SQL Server 2012\\scripts\\chocolatey.0.9.8.31\\tools>\n. For the other server I tested, \n$toolsPath = S:\\testings\\chocolatey.0.9.8.31\\tools\n$psm1File = S:\\testings\\chocolatey.0.9.8.31\\tools\\chocolateysetup.psm1\n. $env:SystemDrive sends \"C:\". It does exist. \nC: is not a network map. But, there are network mapped drives on those servers.\nI'm out of the office now. I'll check your suggestions tomorrow.\n. Well, actually, yes, they are..\nI changed the location where I start chocolateyInstall.ps1. It stil shows me the same message. One point with the T: is that the network mapped drive is mapped using credentials from an active directory...\nI think I have found the problem. My environment variable $env:PSModulePath is set with references to those network mapped storages. If I set for the installation this variable to only its default value, it works.\nBut once I want to use choco, I get the same error as above.\nI set this variable a while ago because I have PS modules that are on those drives that I want to use globally.\nWould it be a solution to set prior to any run of choco and choco install a command like this but with using current user instead of \"Administrateur\" : \n$env:PSModulePath =  C:\\Users\\Administrateur\\Documents\\WindowsPowerShell\\Modules;;;C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\\n?\n. @AnneTheAgile Done.\n. Hello,\n@powershell method => didn't work\nPowerShell Through Batch Method => didn't work \nBoth showed the same message.\nAs I install it on database servers, Visual studio isn't installed\n. It doesn't work. I have the exact same message.\nThe problem is clearly when it tries to Import a module, as if the provided module was not the good \none...\nI use a member of the Administrators group. The execution policy is Unrestricted. I even ran it with the \"right click\" run as administrator to be sure.\nI use powershell 2.0.\n. PS F:\\JEL-DBA\\Projets\\Server Installation - SQL Server 2012\\scripts\\chocolatey.0.9.8.31\\tools> .\\chocolateyInstall.ps1\n$toolsPath = F:\\JEL-DBA\\Projets\\Server Installation - SQL Server 2012\\scripts\\chocolatey.0.9.8.31\\tools\n$psm1File = F:\\JEL-DBA\\Projets\\Server Installation - SQL Server 2012\\scripts\\chocolatey.0.9.8.31\\tools\\chocolateysetup.\npsm1\nImport-Module : Lecteur introuvable. Il n'existe aucun lecteur nomm\u00e9 \u00ab\u00a0'T\u00a0\u00bb.\nAu niveau de F:\\JEL-DBA\\Projets\\Server Installation - SQL Server 2012\\scripts\\chocolatey.0.9.8.31\\tools\\chocolateyInsta\nll.ps1\u00a0: 13 Caract\u00e8re\u00a0: 18\n-     import-module <<<<  -name  $psm1File;\n  - CategoryInfo          : ObjectNotFound: ('T:String) [Import-Module], DriveNotFoundException\n  - FullyQualifiedErrorId : DriveNotFound,Microsoft.PowerShell.Commands.ImportModuleCommand\nLe terme \u00ab\u00a0Initialize-Chocolatey\u00a0\u00bb n'est pas reconnu comme nom d'applet de commande, fonction, fichier de script ou pro\ngramme ex\u00e9cutable. V\u00e9rifiez l'orthographe du nom, ou si un chemin d'acc\u00e8s existe, v\u00e9rifiez que le chemin d'acc\u00e8s est co\nrrect et r\u00e9essayez.\nAu niveau de F:\\JEL-DBA\\Projets\\Server Installation - SQL Server 2012\\scripts\\chocolatey.0.9.8.31\\tools\\chocolateyInsta\nll.ps1\u00a0: 16 Caract\u00e8re\u00a0: 22\n- Initialize-Chocolatey <<<<\n  - CategoryInfo          : ObjectNotFound: (Initialize-Chocolatey:String) [], CommandNotFoundException\n  - FullyQualifiedErrorId : CommandNotFoundException\nPS F:\\JEL-DBA\\Projets\\Server Installation - SQL Server 2012\\scripts\\chocolatey.0.9.8.31\\tools>\n. For the other server I tested, \n$toolsPath = S:\\testings\\chocolatey.0.9.8.31\\tools\n$psm1File = S:\\testings\\chocolatey.0.9.8.31\\tools\\chocolateysetup.psm1\n. $env:SystemDrive sends \"C:\". It does exist. \nC: is not a network map. But, there are network mapped drives on those servers.\nI'm out of the office now. I'll check your suggestions tomorrow.\n. Well, actually, yes, they are..\nI changed the location where I start chocolateyInstall.ps1. It stil shows me the same message. One point with the T: is that the network mapped drive is mapped using credentials from an active directory...\nI think I have found the problem. My environment variable $env:PSModulePath is set with references to those network mapped storages. If I set for the installation this variable to only its default value, it works.\nBut once I want to use choco, I get the same error as above.\nI set this variable a while ago because I have PS modules that are on those drives that I want to use globally.\nWould it be a solution to set prior to any run of choco and choco install a command like this but with using current user instead of \"Administrateur\" : \n$env:PSModulePath =  C:\\Users\\Administrateur\\Documents\\WindowsPowerShell\\Modules;;;C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\\n?\n. @AnneTheAgile Done.\n. ",
    "BHazel": "Thanks for your posts and apologies for my delayed response!  I am not entirely sure - I'll look a little deeper into the packages and let you know.\n. Sorry for the delay.  It may well be an issue with my machine specifically as the issue is not appearing consistently.  Rebooting the machine always solves the problem.  I'll keep an eye on it and report back if I notice a pattern emerging.\n. It turns out this was caused by the system path being longer than 2047 characters and is therefore not an issue for Chocolatey.  :)\n. Thanks for your posts and apologies for my delayed response!  I am not entirely sure - I'll look a little deeper into the packages and let you know.\n. Sorry for the delay.  It may well be an issue with my machine specifically as the issue is not appearing consistently.  Rebooting the machine always solves the problem.  I'll keep an eye on it and report back if I notice a pattern emerging.\n. It turns out this was caused by the system path being longer than 2047 characters and is therefore not an issue for Chocolatey.  :)\n. ",
    "andyli": "Is it possible to get RefreshEnv to work in powershell too?\nIf it cannot, there should be a warning message if RefreshEnv is used in powershell instead of a silent fail.\n. Do you mean Update-SessionEnvironment? I tried adding it to the end of chocolateyInstall.ps1, but it seems to have no effect - the path var is not updated in powershell.\n. Umm.. I thought the helpers are meant to be called inside chocolateyInstall.ps1...\n. Is it possible to get RefreshEnv to work in powershell too?\nIf it cannot, there should be a warning message if RefreshEnv is used in powershell instead of a silent fail.\n. Do you mean Update-SessionEnvironment? I tried adding it to the end of chocolateyInstall.ps1, but it seems to have no effect - the path var is not updated in powershell.\n. Umm.. I thought the helpers are meant to be called inside chocolateyInstall.ps1...\n. ",
    "ComFreek": "Right, I can confirm it now. It must have been a problem with the CDN.\n. Right, I can confirm it now. It must have been a problem with the CDN.\n. ",
    "BNoohi": "https://github.com/chocolatey/chocolatey/wiki/ChocolateyFAQs#what-is-with-the-chocolatey-gods-in-the-installs\nAlso, they don't necessarily need to be translated.\n. https://github.com/chocolatey/chocolatey/wiki/ChocolateyFAQs#what-is-with-the-chocolatey-gods-in-the-installs\nAlso, they don't necessarily need to be translated.\n. ",
    "rctgamer3": "It's in all of the binary .exe files. Every .exe has a metadata block. I found the executables here, although not sure where they come from:\nhttps://github.com/chocolatey/choco/tree/master/src/chocolatey.resources/redirects\n. It's in all of the binary .exe files. Every .exe has a metadata block. I found the executables here, although not sure where they come from:\nhttps://github.com/chocolatey/choco/tree/master/src/chocolatey.resources/redirects\n. ",
    "dschinkel": "thanks for all the clarification.\n. thanks for all the clarification.\n. ",
    "codejanovic": "No problem, thanks for he fast reply ;-)\n. No problem, thanks for he fast reply ;-)\n. ",
    "christianrondeau": "You are correct, most of my comments apply to chocolatey.org. The closest issue I found was: https://github.com/chocolatey/chocolatey.org/issues/12 though it specifically address the visibility of outdated packages, not their resolution.\nI do believe that it may apply to choco.exe too, but only if it exists in chocolatey.org so I'll just close this one for now.\nIt has been moved as-is here: https://github.com/chocolatey/chocolatey.org/issues/161\nThanks!\n. Moved to choco repo\n. Moved to choco repo\n. Moved to choco repo\n. Moved to choco repo\n. Moved to choco repo\n. Moved to choco repo\n. Moved to choco repo\n. Thanks @ferventcoder - I totally missed that. Note that I initially searched for duplicates for each, not I just moved the items and I'll re-check for duplicates later, if it's not already done.\nMoved to choco repo.\n. Moved to choco repo\n. You are correct, most of my comments apply to chocolatey.org. The closest issue I found was: https://github.com/chocolatey/chocolatey.org/issues/12 though it specifically address the visibility of outdated packages, not their resolution.\nI do believe that it may apply to choco.exe too, but only if it exists in chocolatey.org so I'll just close this one for now.\nIt has been moved as-is here: https://github.com/chocolatey/chocolatey.org/issues/161\nThanks!\n. Moved to choco repo\n. Moved to choco repo\n. Moved to choco repo\n. Moved to choco repo\n. Moved to choco repo\n. Moved to choco repo\n. Moved to choco repo\n. Thanks @ferventcoder - I totally missed that. Note that I initially searched for duplicates for each, not I just moved the items and I'll re-check for duplicates later, if it's not already done.\nMoved to choco repo.\n. Moved to choco repo\n. ",
    "flippingtables": "Excellent, keep up the good work :+1: \n. Excellent, keep up the good work :+1: \n. ",
    "philoushka": "\nHow bad/undesirable would it be to pluralize the name of the param from $extension or $extensions?\n\nI suppose that's a breaking change in the case where someone has this param explicitly named in a call to this function.\nWhat's the sensitivity level to a param name change?\n2. I've unit tested my fix locally. Almost ready to send a PR. I'll include a unit test as per the contrib guidlines.\n. Thanks Rob, will do.\nCan you suggest a good existing example of a unit test for PowerShell helper functions?\nI've realized that an alias for the existing param $extension isn't necessary, as it's a partial match for the new proposed param name $extensions. (I think this feature is called parameter disambiguation, but I'm not entirely clear on its name). Any param out there in the wild will work.\n. Moved to https://github.com/chocolatey/choco/issues/161\n. 1. How bad/undesirable would it be to pluralize the name of the param from $extension or $extensions?\nI suppose that's a breaking change in the case where someone has this param explicitly named in a call to this function.\nWhat's the sensitivity level to a param name change?\n2. I've unit tested my fix locally. Almost ready to send a PR. I'll include a unit test as per the contrib guidlines.\n. Thanks Rob, will do.\nCan you suggest a good existing example of a unit test for PowerShell helper functions?\nI've realized that an alias for the existing param $extension isn't necessary, as it's a partial match for the new proposed param name $extensions. (I think this feature is called parameter disambiguation, but I'm not entirely clear on its name). Any param out there in the wild will work.\n. Moved to https://github.com/chocolatey/choco/issues/161\n. ",
    "esamo": "Choco did not reindex installed packages.\n\nMicrosoft Windows [Wersja 6.1.7601]\nCopyright (c) 2009 Microsoft Corporation. Wszelkie prawa zastrze\u017cone.\nC:\\Windows\\system32>choco list -localonly\nChocolateyGUI 0.12.3\nPowerShell 4.0.20141001\n\nThese 2 listed I've installed right after reinstalling choco. While I had at least 10 entries on previous choco. As I mentioned but maybe not clearly, during choco uninstallation I've deleted folders named as installed packages.\n\nRegards & respect.\n. I've processed the first script on https://chocolatey.org which is \n@powershell -NoProfile -ExecutionPolicy unrestricted -Command \"iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))\" && SET PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\nAnd before that I uninstalled choco as instructed here: https://github.com/chocolatey/chocolatey/wiki/Uninstallation, that is deleting all related files. I didn't disturb logs and errors though....\n\nRegards & respect.\n. Okay. I guess since I'm the only case, no fix is needed.\nRegards & respect.\n. Choco did not reindex installed packages.\n\nMicrosoft Windows [Wersja 6.1.7601]\nCopyright (c) 2009 Microsoft Corporation. Wszelkie prawa zastrze\u017cone.\nC:\\Windows\\system32>choco list -localonly\nChocolateyGUI 0.12.3\nPowerShell 4.0.20141001\n\nThese 2 listed I've installed right after reinstalling choco. While I had at least 10 entries on previous choco. As I mentioned but maybe not clearly, during choco uninstallation I've deleted folders named as installed packages.\n\nRegards & respect.\n. I've processed the first script on https://chocolatey.org which is \n@powershell -NoProfile -ExecutionPolicy unrestricted -Command \"iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))\" && SET PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\nAnd before that I uninstalled choco as instructed here: https://github.com/chocolatey/chocolatey/wiki/Uninstallation, that is deleting all related files. I didn't disturb logs and errors though....\n\nRegards & respect.\n. Okay. I guess since I'm the only case, no fix is needed.\nRegards & respect.\n. ",
    "norbert6": "Just a quick idea: Have you checked if the ChocolateyInstall EnvVar ist still set correctly?\nA few days ago I also noticed that chocolatey was not listing any of my installed packages, because for some reason the EnvVar was changed and therefore I had a fresh, separate chocolatey installation on my hard drive... After changing back to the old location my installed packages where detected again.\n. Just a quick idea: Have you checked if the ChocolateyInstall EnvVar ist still set correctly?\nA few days ago I also noticed that chocolatey was not listing any of my installed packages, because for some reason the EnvVar was changed and therefore I had a fresh, separate chocolatey installation on my hard drive... After changing back to the old location my installed packages where detected again.\n. ",
    "kishore-mohan": "@ferventcoder No iam using Chocolatey (v0.9.8.33) in my windows server 2012. Is this fixed in 0.9.9?\n. @ferventcoder if I use the script which referred in the https://chocolatey.org/ site to install chocolatey, it is installing v9.8.33. why still this link https://chocolatey.org/install.ps1 map with 0.9.8.33.\n. @ferventcoder No iam using Chocolatey (v0.9.8.33) in my windows server 2012. Is this fixed in 0.9.9?\n. @ferventcoder if I use the script which referred in the https://chocolatey.org/ site to install chocolatey, it is installing v9.8.33. why still this link https://chocolatey.org/install.ps1 map with 0.9.8.33.\n. ",
    "lennartb-": "Same issue, can confirm it with 0.9.9.3. Exact same error stack as above.\n. Same issue, can confirm it with 0.9.9.3. Exact same error stack as above.\n. ",
    "hifriend21": "Tried set PATH=%PATH%;%SYSTEMROOT%\\System32\\WindowsPowerShell\\v1.0\nBut 'powershell' is not recognized...\nMySQL error had dissapeared\n. Sure, I did.\nI have written differently, but nothing\n\n. Is not recognized \n. Is there any other ways to install chocolatey?\n. Seems like I really got a lite version of Windows. Which is I can't even install the powershell.Thanks for helping, there is no other ways to get chocolatey, exept cmd?\n. Tried set PATH=%PATH%;%SYSTEMROOT%\\System32\\WindowsPowerShell\\v1.0\nBut 'powershell' is not recognized...\nMySQL error had dissapeared\n. Sure, I did.\nI have written differently, but nothing\n\n. Is not recognized \n. Is there any other ways to install chocolatey?\n. Seems like I really got a lite version of Windows. Which is I can't even install the powershell.Thanks for helping, there is no other ways to get chocolatey, exept cmd?\n. ",
    "mgcrea": "@ferventcoder sorry for the rookie mistake ;-). Thanks!\n. @ferventcoder sorry for the rookie mistake ;-). Thanks!\n. ",
    "magmax": "Tracing the code I see the problems is in nuget code. Closing this issue.\n. Hmmm... I've tried with nssm package(https://chocolatey.org/packages/NSSM) and it worked like a charm.\nSo I've tried to use a non-pre version with my package, as you suggested, and... worked. May be a problem with prerelease packages? Is it already known?\n. I've found the problem and I'm not sure if it is a chocolatey problem or not.\nThe problem was that my packages were named \"foobar-0.0.0.1-Release\" instead of \"foobar.0.0.0.1-Release\". Just renaming them works.\nI'm not sure why whey use the hyphon ('-') instead the dot ('.'), but I will check it.\n. Found. The problem was in my code.\nSorry for the noise an thank you very much!\n. Tracing the code I see the problems is in nuget code. Closing this issue.\n. Hmmm... I've tried with nssm package(https://chocolatey.org/packages/NSSM) and it worked like a charm.\nSo I've tried to use a non-pre version with my package, as you suggested, and... worked. May be a problem with prerelease packages? Is it already known?\n. I've found the problem and I'm not sure if it is a chocolatey problem or not.\nThe problem was that my packages were named \"foobar-0.0.0.1-Release\" instead of \"foobar.0.0.0.1-Release\". Just renaming them works.\nI'm not sure why whey use the hyphon ('-') instead the dot ('.'), but I will check it.\n. Found. The problem was in my code.\nSorry for the noise an thank you very much!\n. ",
    "creativeknights2012": "Will Do\n. Will Do\n. ",
    "nicohvi": "That might be it! Is there any way to force uninstall the package?\n. That might be it! Is there any way to force uninstall the package?\n. ",
    "cavaliercoder": "Thanks, I'll raise it there. Apologies for missing the notice.\n. Thanks for taking a look\n. Thanks, I'll raise it there. Apologies for missing the notice.\n. Thanks for taking a look\n. ",
    "jenshnielsen": "Wrong tap sorry?\n. Wrong tap sorry?\n. ",
    "CWempe": "Sorry for using the wrong repo. :(\nGlad the issue is already fixed in the next milestone and I now know hour to work around the issue.\n. Sorry for using the wrong repo. :(\nGlad the issue is already fixed in the next milestone and I now know hour to work around the issue.\n. ",
    "tiantianwei": "The specific mistake is this:\nERROR: The term 'convertfrom-json' is not recognized as the name of a cmdlet,\nNction, script file, or operable program. Check the spelling of the name, or\nA path was included, verify that the path is correct and try again.\nThe install of bazel was NOT successful. @ferventcoder \nAre you saying that BAZEL package has a problem, or a CHOCOLATEY packet has a problem, should not BAZEL package, because I tried the 0.4.3 version, it had the same problem, but if the CHOCOLATEY package, you are maintenance staff. @ferventcoder \nI am a Chinese, English is not very good, can you read Chinese?. @ferventcoder \nWell, thank you very much.. The specific mistake is this:\nERROR: The term 'convertfrom-json' is not recognized as the name of a cmdlet,\nNction, script file, or operable program. Check the spelling of the name, or\nA path was included, verify that the path is correct and try again.\nThe install of bazel was NOT successful. @ferventcoder \nAre you saying that BAZEL package has a problem, or a CHOCOLATEY packet has a problem, should not BAZEL package, because I tried the 0.4.3 version, it had the same problem, but if the CHOCOLATEY package, you are maintenance staff. @ferventcoder \nI am a Chinese, English is not very good, can you read Chinese?. @ferventcoder \nWell, thank you very much.. "
}