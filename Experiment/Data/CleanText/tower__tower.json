{
    "lancejpollard": "Here's the event API from Tower.Support.EventEmitter (similar to the node.js eventEmitter API):\n``` coffeescript\nclass App.Car extends Tower.Model\ncar = new App.Car(color: \"red\")\ncar.on \"change\", (event) ->\n  event.attribute # \"color\"\n  event.oldValue # \"red\"\n  event.newValue # \"blue\"\n  @changes # {color: [\"red\", \"blue\"]}\ncar.set \"color\", \"blue\"\n```\nNeed to update the main branch with this feature.  But I want to be careful in adding it, because if you don't want events as a developer the code shouldn't be executing event code (dispatching events without any listeners and all that).  You may want this if you're using Knockout.js, since their \"observable\" and \"observableArray\" basically wraps a model/collection and adds event dispatching.  It might be a waste in that case to have event dispatching code built into Tower.\nAs for \"collections\", that's pretty much the same as Knockout.js' \"observableArray\".  Still figuring out a better collection api\u2026  Not sure yet if there needs to be a separate \"Collection\" object, or if you can just have event dispatching off the Tower.Model.Scope object.\n``` coffeescript\nnew Tower.Collection(scope)\nnewCars = new Tower.Collection(App.Car.where(year: \">=\": 2010))\n```\nThe collection object would take the place of something like Knockout.js' observableArray, but I'm not quite sure what the use case is for this yet.\nAnother issue that comes up is how you're notified of an attribute change.  This is where Knockout.js really solves the problem well.  For example, you can add/remove an item to array a bunch of different ways:\ncoffeescript\ntags = [\"ruby\"]\ntags.push(\"javascript\")\ntags = tags.concat([\"node.js\"])\ntags.splice(1, 1) # [\"ruby\", \"node.js\"]\ndelete tags[0] # [undefined, \"node.js\"]\ntags.pop() # [undefined]\ntags.length = 0 # []\nIn all of those cases you modified the array, but no event is going to be dispatched.  Knockout.js solves this by using the observableArray which is basically a custom array class (https://github.com/SteveSanderson/knockout/blob/master/src/subscribables/observableArray.js#L95).\nSo my thinking on one hand is, if you want real event dispatching, use something like Knockout.js because they handle a lot more of those cases.  And rewriting that code is probably out of the scope of Tower.  But on the other hand, having events makes some things easier to do.  Still thinking\u2026\n. Side note, if you're just looking for general \"event dispatching\" functionality for any object, I'd check out a dedicated (and lean) library such as:\n- https://github.com/hij1nx/EventEmitter2\nIf you want a model that has attributes that dispatch change events but that's not necessarily built around the idea of data (like Tower and other \"web app\" MVC frameworks), I'd just build a lean little thing for that, a get and set method with calls to trigger or whatever from EventEmitter2.\n. Update on this feature.  Tower won't be building any sort of EventEmitter or binding functionality like Knockout.js.  There's a potential that Tower will show some demos with these types of binding frameworks and I'll make sure to make everything compatible.\nThere's also the potential that tower uses something like the core ember/ruby object model like we've talked about.\n. True that, will add more to the documentation.  A work in progress...\n. Closing since this is an ongoing process.\n. Still thinking which of these three ways is best:\n1. @belongsTo \"user\", embed: true\nI'm leaning toward this one because it's the least amount of code and the most flexible.  But it is a little abstract so I'm also thinking # 3.\n``` coffeescript\nclass App.User extends Tower.Model\n  @hasMany \"addresses\", embed: true\nclass App.Address extends Tower.Model\n  @belongsTo \"user\", embed: true\n```\nFrom a client perspective, I don't think you really need embed: true necessarily (haven't thought about this in depth though).  And for SQL, you wouldn't embed the documents into a column or whatever, the option would be ignored (future SQL adapters).  You only really need this for MongoDB and probably other document databases.\nSo, having the minimal amount of code would I think make it less confusing while still giving you the full power of embedded documents in MongoDB.\nThe second thing is that this is the most flexible.  Meaning what if you want to embed the Address in User documents in MongoDB for performance reasons, but you have a list of locations for not only users, but groups, events, products, etc.  Maybe you want to store the rest of the addresses in their own documents.  By having the embed: true option on an association, you handle both these cases:\n``` coffeescript\nuser.addresses = [new App.Address]\nuser.save()\nuser document:\n{ _id: 'userId', addresses: [ {_id: 'addressId' ... } ] }\ngroup.addresses = [new App.Address]\ngroup.save()\ngroup document\n{ _id: 'groupId' }\naddress document\n{ _id: 'addressId', addressibleId: 'groupId' }\n```\n2. @embeddedIn \"user\"\nThis one wouldn't allow you to handle both cases.  It's basically saying \"you have to embed this model in this document\".  At least that's what it reads to me.\n``` coffeescript\nclass App.User extends Tower.Model\n  @embedsMany \"addresses\"\nclass App.Address extends Tower.Model\n  @embeddedIn \"user\"\n```\nThe other thing is this adds a few methods to the class that are specific only to document databases.  I'd rather avoid that.\n3. @include EmbeddedDocument\nThis is what you're saying with MongoMapper.\n``` coffeescript\nclass App.User extends Tower.Model\n  @hasMany \"addresses\"\nclass App.Address extends Tower.Model\n  @include EmbeddedDocument\n```\nThis one is more flexible than # 2, so it can be embedded in many different types of records, but you could do this with # 2 by creating a polymorphic association.\nIt's cleaner than both the other two, but I'm not sure if you always want to force a model to be embedded, that's the main thing I still want to get clear.\nBut yeah, this will be in there soon.\n. It should run on any node version 0.4.x and up (you can deploy a Tower app to Heroku, which uses node v0.4.7 as of this post).\nWhat command did you run?\nI get the same error if you run this command:\ntower\nThat line, /usr/lib/node_modules/tower/lib/tower/command.js: 6:19 tries to parse the 3rd item in the process.argv array, which looks like this:\njavascript\n// $ tower\n[ 'node', '/usr/local/bin/tower' ]\n// $ tower new app\n[ 'node', '/usr/local/bin/tower', 'new', 'app' ]\nI'm going to be cleaning up this api soon, but you should be able to generate a new app.  To start the server just run node server.\nLet me know if that helps.\n. Cool, good to hear.\n. Fixed\n```\n$ tower\n  Usage: \n    tower [command] [options]\nCommands:\n    new                     generate a new Tower application in folder \"app-name\"\n    console                           command line prompt to your application\n    generate               generate project files (models, views, controllers, scaffolds, etc.)\nOptions:\n    -h, --help                        output usage information\n    -v, --version                     output version number\n$ tower new\n  Usage:\n    tower new  [options]\nOptions:\n    -T, --title                project title (as opposed to its file name)\n    -D, --description    project tagline (one sentence)\n    -K, --keywords          project keywords (e.g. \"node.js, file uploading, s3\")\n    -n, --namespace        global namespace for your app (defaults to YourProjectName)\n    -h, --help                        output usage information\n    -v, --version                     output version number\n    --skip-procfile                   skip creating a Procfile (for deploying to Heroku)\n    --skip-git                        Skip Git ignores and keeps\n```\n. Yeah two things.\ncake assets:bundle\nYou only need to run this when you're pushing your app to production.  It'll minify and gzip your assets into public/assets.  It takes a few seconds to run because the js/css compressors have to do their work.\nI need to push the updates to this code (changed the api from Tower.assets to Tower.config.assets in the development branch).  But you don't need this for local development so you should be able to get through tonight with the next step: design.io.\ndesign.io\nThe asset part of Tower works by using design.io to compile assets whenever you save a file (or you start the design.io watcher).  There's a screencast on the readme.\n[Technically, you can also just put assets directly into public/x, everything in there is read as a static file.  But you don't need to worry about that with design.io.]\nAnytime you change a JavaScript or CoffeeScript file, it will compile them into public/javascripts/[path].js, and same with Stylus, LESS, or CSS, it will compile them to public/stylesheets.css.\nSo when developing an app, you have your node server, and you have your file watcher process using design.io - 2 terminal windows.  Going to make a screencast on how to build a basic tower app with design.io in the next week or so.\nTo start design.io, here's all you do:\nnpm install -g design.io\ndesign.io start # starts an http server to inject stylesheets into the browser! more on this later in the week.\nThen inside your project directory, run the design.io watcher:\ndesign.io\nDesign.io's not perfect yet, but it's getting there.  It's very close in scope to guard for ruby.  Hope that gets you started.  I'll be around tomorrow and I'll check back.\n. That shouldn't happen (linking to two different ports), but for reference that's happening because design.io needs to have the global http server running (design.io start) to inject the assets into the browser.  This process will all be managed transparently in the next commit so don't worry too much about it.  Working on a commit for this now, along with the instant refreshes.\n. Closing this issue since it was originally about Tower.assets being undefined and that's fixed.  If you're still having issues with design.io let me know.\n. Definitely want to include something like this, need to look into it a bit more first.  I'll take a look at the commit if you have something.\n. Moved to https://github.com/viatropos/mint.js, updated the link on the main site.\n. Thanks for posting, yeah I've had some random issues like this before with coffee-script modules installed in different places, independent of Tower.\nNot sure what the fix is but installing coffee-script like you did works, will keep any eye out.\n. Not yet, but the Tower.Store api was setup to make implementing custom database drivers straightforward.  See these for examples:\n- https://github.com/viatropos/tower/blob/master/src/tower/store/mongodb.coffee\n- https://github.com/viatropos/tower/blob/master/src/tower/store/memory.coffee\nDon't plan on personally implementing a MySQL store for a little while, but I would love to merge a pull request with this feature if you or anyone are up to it!  Even if it's only partially implemented that's a start.\n. Thanks for pointing that out, will update the command line interface.\n. Fixed\n```\n$ tower new\n  Usage:\n    tower new  [options]\nOptions:\n    -T, --title                project title (as opposed to its file name)\n    -D, --description    project tagline (one sentence)\n    -K, --keywords          project keywords (e.g. \"node.js, file uploading, s3\")\n    -n, --namespace        global namespace for your app (defaults to YourProjectName)\n    -h, --help                        output usage information\n    -v, --version                     output version number\n    --skip-procfile                   skip creating a Procfile (for deploying to Heroku)\n    --skip-git                        Skip Git ignores and keeps\n```\n. Will update the command line interface today.  See this issue for details:\n- https://github.com/viatropos/tower/issues/5\n. Fixed\n```\nviatropos:lp viatropos$ tower\n  Usage: \n    tower [command] [options]\nCommands:\n    new                     generate a new Tower application in folder \"app-name\"\n    console                           command line prompt to your application\n    generate               generate project files (models, views, controllers, scaffolds, etc.)\nOptions:\n    -h, --help                        output usage information\n    -v, --version                     output version number\n``\n. Are you running this on ubuntu?  It may be b/cTest.ApplicationControllerisn't loaded, try addingrequire './applicationController'` at the top.  This might be b/c paths are loaded in a different order by default on mac vs. linux, so that should be fixed.\n. Op, this is why:\n- https://github.com/viatropos/tower/tree/master/src/tower/application/server.coffee#L110\nOn line 110 I specifically loaded applicationController before all the other controllers to prevent this problem.  But on line  115, I only required files matching /\\.(js|coffee/, which that doesn't :)\n``` coffeescript\npaths = File.files(\"#{Tower.root}/app/helpers\")\npaths = paths.concat File.files(\"#{Tower.root}/app/models\")\npaths = paths.concat [\"#{Tower.root}/app/controllers/applicationController\"]\nfor path in [\"controllers\", \"mailers\", \"observers\", \"presenters\", \"middleware\"]\n  paths = paths.concat File.files(\"#{Tower.root}/app/#{path}\")\nfor path in paths\n  require(path) if path.match(/.(coffee|js)$/)\n```\nWill fix in next push.\n. Good find.  require('crypto').randomBytes(64) should probably be avoided then, the rest of the app works with at least node 0.4.7 (heroku).  Know of an alternative way to generate random bytes in node 0.4.x?\n. Thanks for the fixes, I'm liking that node-uuid library.\n. I'm checking into this, but make sure you have design.io installed into your project:\nnpm install design.io\nNeed to make that monitor more robust.\n. Can you paste me the code you're using to integrate everyauth into Tower?\nWe are actually using everyauth in a project with Tower, here's how it's been integrated:\n``` coffeescript\nclass App extends Tower.Application\n  @configure ->\n    @use \"favicon\", Tower.publicPath + \"/favicon.ico\"\n    @use \"static\", Tower.publicPath, maxAge: Tower.publicCacheDuration\n    @use \"profiler\" if Tower.env != \"production\"\n    @use \"logger\"\n    @use \"query\"\n    @use \"cookieParser\", Tower.cookieSecret\n@use \"session\",\n  secret: Tower.sessionSecret\n  cookie:\n    domain: \".#{Tower.cookieDomain}\"\n  store: new (require('connect-mongo')(Tower.Store.MongoDB.config[Tower.env]))\n\n@use \"bodyParser\"\n# @use \"csrf\"\n@use \"methodOverride\", \"_method\"\n@use Tower.Middleware.Agent\n@use Tower.Middleware.Location\n\n#if Tower.httpCredentials && Tower.branch != \"development\"\n#  @use \"basicAuth\", Tower.httpCredentials.username, Tower.httpCredentials.password\n\n@use everyauth.middleware()\n@use Tower.Middleware.Router\n\n```\nThen I have this code in config/initializers/authentication.coffee (all files from config/initializers are loaded before the App.configure block is executed:\n``` coffeescript\neveryauth.everymodule.findUserById (userId, callback) ->\n  App.User.find userId, callback\neveryauth.everymodule.handleLogout (request, response) ->\n  # Put you extra logic here\n  request.logout() # The logout method is added for you by everyauth, too\n# And/or put your extra logic here\nresponse.writeHead 303, 'Location': @logoutRedirectPath()\n  response.end()\neveryauth.everymodule.logoutPath('/logout')\neveryauth.everymodule.logoutRedirectPath('/')\neveryauth.facebook\n  .appId(Tower.secrets.facebook.key)\n  .appSecret(Tower.secrets.facebook.secret)\n  .handleAuthCallbackError((request, response) ->\n    # If a user denies your app, Facebook will redirect the user to\n    # /auth/facebook/callback?error_reason=user_denied&error=access_denied&error_description=The+user+denied+your+request.\n    # This configurable route handler defines how you want to respond to\n    # that.\n    # If you do not configure this, everyauth renders a default fallback\n    # view notifying the user that their authentication failed and why.\n  ).findOrCreateUser((session, accessToken, accessTokExtra, fbUserMetadata) ->\n    # find or create user logic goes here\n    promise = new everyauth.Promise\n    App.User.findOrCreateFromFacebook(fbUserMetadata, promise)\n    promise\n  ).redirectPath('/')\n```\nIn short, I think you just need to add the middleware everyauth.middleware() just before Tower.Middleware.Router.  Tower does not use express' app.router code.\nLet me know if that helps.\n. Hmm\u2026 I'm not sure without seeing the full app.  It seems like it's probably because the session/secret key that everyauth sets in the session isn't being properly carried between requests, that's my guess.\nI'd just console.log the request at every stage and make sure the cookies/session/headers/request are all what you'd expect, and that the proper secret token is carried between requests (I haven't messed with everyauth in a couple months, but I think they're setting some session variable here, and I've had trouble with that before).\nAlong those lines, mess around with @use \"session\", secret: Tower.sessionSecret, cookie: {domain: \".#{Tower.cookieDomain}\"} because that's where the something could start going wrong with session.\nI don't think this is a problem with tower, it doesn't do anything with a request.user variable.  But I'll keep this in mind and get back to you if I find anything.\n. Yeah you can't do that because when you do a redirect, the current action is completed - the browser gets a 302 redirect response, and changes the url.  Since the url is changed, it's going to run through the middleware all over again and go to the new controller action for that url.\nThe connect session parses the session and cookies for each request from the raw request.  So the only thing that will persist after a redirect is the raw session and cookie data, which you can set like this:\ncoffeescript\n@session.cookie.expires = new Date(Date.now() + 3600)\nLooks like you then have to save the session data (I haven't used this in a while, but from http://www.senchalabs.org/connect/middleware-session.html):\n@session.save()\nThat will save any custom properties on your session.\n. Are you trying to compile the coffee-script files for tower itself (for developing/testing the tower source)?\nThose tasks are included here:\nhttps://github.com/viatropos/tower/blob/master/Cakefile#L189\nI am not using those anymore though, I'm just using design.io to compile everything (coffeescript, css, etc.).\nIf you are trying to compile the assets for a generated tower app, then this is out of date (I will update the docs and towerjs.org with this).  There is no task named coffee anymore, that was the old way of compiling assets.\nTo compile the assets, you need to use design.io, or write your own watch script (something like coffee --watch --compile --output public/ ./).  The design.io readme tells you how it works.\nIn the latest push of tower, design.io should be running by default when you run:\nnode server\nLet me know if that helps.\n. To boot the tower server, all you need to do is:\nnode server\nYou can also type (which is going to do the same thing as the above command, it's just here for consistency):\ntower server -p 3000\nLet me know if that works.\n. Yeah @wnadeau is right, closing this issue.  Thanks!\n. This was fixed by 0.4.0 [noting for reference].\n. These changes have already been made, thanks tho!\n. To compile the tower codebase, download design.io and run the watch command:\ndesign.io\nIt uses the Watchfile to handle all this.\n. This is no longer an issue with the new way the tower generator builds the session.\n. working on a cleaner view/path system for this\u2026  thanks for the fix tho.\n. Did you run npm install in your project directory after you generated the app?  If not, it might be loading the global tower installation, which doesn't include mongodb and forever because it's (I think) installing only dependencies, not devDependencies which is desired (e.g. you don't need forever in production, and you might want to switch out postgres for mongodb, etc.).\n. Thanks for pointing that out, we need a better way of making sure the compiled files are removed when a coffeescript file is removed.\nAgreed, putting the generators into src is the ideal solution, that just means updating the Watchfile.  Will do that soon.\n. Hey that's a good idea.  There's a few things we should consider though.\nFirst, there's also the build in coffee-script solution.  CoffeeScript automatically converts .coffee files when they are required with require('x').  My concern here is I'd like to minimize the number of dependencies Tower has so as to minimize the size of the compiled slug in production.\nThe solution you just proposed is nice because it prevents having to deal with deleting old files and checking in compiled files.  I want to get rid of the compiled files in the GitHub repo anyway because it just adds to the repo size.  But, this introduces the potential of people not having the right version of coffee-script and so getting started with Tower might become a little more complicated.  If we can make this flawless, then I'm in.\n. The lib directory has been added to .gitignore in the development branch.\n. Can you post all the code you're using, specifically:\n- the paths to your views and controllers\n- your controller code\n- your routes.coffee\n- your version of Tower tower -v\n- and your operating system, node version node -v, and npm version npm -v\nThis problem existed in older versions but I don't see this problem anymore.  Wondering what your specifics are...\n. Updated design.io/lib/client.coffee, which compiles into design.io.js for the client.  Should work now, try it and let me know.  Either replace vendor/javascripts/design.io.js with this, or when you generate a new app it will be downloading that anyway.\nMake sure you start the global socket server with design.io start in some terminal window.  Then in any tower app (or any directory with the design.io node module installed running the watcher with design.io watch), you should get automatic refreshes when you view the page.  Try adding this to app/client/stylesheets/application.styl after you've loaded the default white page at http://localhost:3000:\ncss\nhtml, body\n  background: red\nHope that helps.\n. I am not sure how gzipping works on a PC, but that gzip method will output a gzip encoded file.  I think the issue is that gzip headers aren't served correctly from the node server locally.  If you push those assets to S3 though, Amazon will recognize they're application/x-gzip and they'll be decoded to the javascript/css files.\nWe want the gzipping in there, need to make sure the HTTP headers for gzipping are set correctly on the node server though.\n. Thanks for posting, need to finalize this.\nThe way the dates are going to work in Tower is like this: when you set an attribute on a model, it uses the field definition to convert the value to the actual date object right when it's set.  And [todo] when you do updateAttributes, it will do this as well.  This isn't complete with dates, it only works if given actual Date objects.  Then when you save the model to the database, the Tower.Store implementation will convert the Date value to the database-specific value (the database might only store the data up to the second rather than the millisecond, or needs to convert to some normalized timezone, etc.).\nWith that implementation, the example you posted is invalid:\ncoffeescript\nTower.Store.MongoDB.Serialization.encodeDate(\"1/1/2011\")\nThe goal of the Tower.Store implementations is to take a very normalized and explicit set of parameters to minimize computation.  That's why the Tower.Scope finder/persistence methods take dynamic arguments, while the Tower.Store takes explicit arguments.  This way you can use the Tower.Store to get more low-level control (while still taking advantage of some helpful conventions), but since most people won't need to do that early on, if you do use those methods directly you have to pass explicit args.\nSo, Tower.Store.MongoDB#encodeDate will only accept Date objects.\nThis is still an issue though, I'll get this fixed this week.  Thanks for bringing it up.\n. I have seen that happen somewhat randomly\u2026  Just tried it and it worked, but will look into this more.  If you CTRL-C quit it still will have generated the complete app app though.\n. This doesn't seem to be happening anymore, closing for now.\n. Not yet, this is a useful feature to have though.  Feel free to add it if you're up to it.  I will also look into adding something like this soon.\n. some notes on trying to handle errors better in controllers. In short, I think you'd have to end up wrapping any async call in something like Tower.withContext @request.domain, App.Post.all, (error, posts) => ..., similar to ember's Ember.get(@, 'length').\n- https://github.com/viatropos/tower/commit/c7d6b150c163458208474133770928c289416340\n- https://gist.github.com/3431201\n. This is because mongodb probably isn't running on your computer.  Make sure you have it installed and started (use homebrew to install if this is new):\nbrew install mongodb\nmongod start\nLet me know how that goes.\n. Tower doesn't quite have the following functionality yet, but it's on the list:\ncoffeescript\n@config.generators (g) ->\n  g.orm             \"mongodb\"\n  g.templateEngine  \"coffeekup\"\n  g.testFramework   \"mocha\"\nTower will also be defaulting to mocha, it's just way better :).  Will let you know when this is added.\n. This is for design.io which [temporarily] uses ruby to watch files.  Did you install ruby 1.9.2 with RVM?  If so, make sure you set RVM to use the ruby version you want as the default:\nhttp://beginrescueend.com/rubies/default/\nOtherwise just make sure you have the rb-fsevents gem installed (which design.io should have installed automatically, but if you installed a new version of ruby without running npm install design.io again, won't be installed):\ngem install fs-events\nLet me know if that helps, thanks.\n. Oop, I meant to write this:\n```\nrb-fsevent, not rb-fsevents or fs-events\ngem install rb-fsevent\n```\nTry that.\nIn general, when you get these kind of dependency errors, just look at the stack trace to find what library it's saying is missing (no such file to load -- rb-fsevent):\n[Thu, 15 Mar 2012 09:59:30 GMT] ERROR <internal:lib/rubygems/custom_require>:29:in `require': no such file to load -- rb-fsevent (LoadError)\nThen do gem install x.\n. Yeah, this is the one thing that's been causing the most problems.  Need to find a good cross-platform file watcher solution for node.js.  Right now this ruby hack only works on Mac.\nIf you want to take a stab at it, check out design.io, which is modeled heavily after Guard:\n- https://github.com/viatropos/design.io/tree/master/src/design.io/listener\n- https://github.com/guard/guard/tree/master/lib/guard/listeners\nI want to get rid of this ruby dependency though, but haven't found a good pure-node solution.  This is going to be the next big thing to focus on cleaning up once I finish a few things.\n. No complete example yet, but here's a snippet of code from one of our internal projects that used everyauth.\n- https://github.com/viatropos/tower/issues/18#issuecomment-4278945\nAlso, just a note.  Any documentation in the github wikis (https://github.com/viatropos/tower/wiki/ \u2026) is not complete.  Anything that's roughly complete will be mirrored on the main site http://towerjs.org.\n. Nice solution haha!  Didn't even think of the rails.js file\u2026  Cool it works.\nI had a quick hack in there doing basically what the rails.js file does, grab all links with data-method=delete and convert to ajax POST request with _method='DELETE'.  The real solution is coming with Tower.Store.Ajax, which is almost complete.\nSo for now this is broken and will be fixed in the next release.\nTower.Store.Ajax is a subclass of the memory store handling all the RESTful sync functionality.\n. Made a quick example of this when you use the scaffold generator:\n``` coffeescript\napp/client/controllers/postsController.coffee\nclass App.PostsController extends Tower.Controller\n  @on \"click .post a[data-method='delete']\", \"destroy\"\n# example\n  destroy: (event) ->\n    row       = $(event.target).closest('[data-id]')\n    id        = row.attr('data-id')\nApp.Post.destroy id, (error, resource) =>\n  row.remove()\n\nfalse\n\n```\nStill working on a cleaner way of doing this, but with that it should work.\nTry updating tower with npm install tower in your app and npm install tower -g globally, and grab the latest client-side tower.js, or generate a new app.\n. A lot has changed since this, see the dev branch. Reopen if there are still issues, thanks!\n. I haven't handled the url case yet, but you can do this:\n``` coffeescript\nconfig/databases.coffee\nmodule.exports =\n  mongodb:\n    development:\n      name: \"example-development\"\n      port: 27017\n      host: \"127.0.0.1\"\n    test:\n      name: \"example-test\"\n      port: 27017\n      host: \"127.0.0.1\"\n    staging:\n      name: \"example-staging\"\n      port: 27017\n      host: \"127.0.0.1\"\n    # mongodb://heroku_app123123123:ajsdifjasdfklasjdfa@ds077519.mongolab.com:33591/heroku_app123123123\n    production:\n      name: \"heroku_app123123123\"\n      port: 33591\n      host: \"ds077519.mongolab.com\"\n      username: \"heroku_app123123123\"\n      password: \"ajsdifjasdfklasjdfa\"\n```\nDoes that work?\n. Nice!\nYeah, I got a little carried away in not wanting to commit \"compiled\" things to repos and added the public/assets folder to the .gitignore (I'll make that opt-in in the next release):\nhttps://github.com/viatropos/tower/blob/master/lib/tower/server/generator/generators/tower/app/templates/gitignore\nSo, just open that file, remove those lines, re-commit, and re-push your code, should work then.\ncd your-project\nmate .gitignore\n. Oh ok you're right, looks like the http headers for gzip still haven't been updated.\nhttps://github.com/viatropos/tower/issues/37\nTry doing what he did and comment out the gzip code.  I will fix this soon, but the default should gzip since it's the most optimized.  Basically, if you get rid of gzip the node server will serve the minified version properly, and heroku should show them.\nIf you get through this I'd love to get a pull request with fixes.\nLet me know how it goes.\n. You can try these two plugins, see if they allow you to serve gzipped files locally:\n- https://github.com/nateps/connect-gzip\n- https://github.com/tomgallacher/gzippo\nI don't have the time at the moment to test this out, but that's where I'd start to get gzipping working.\n. Answered on Stack Overflow.\n. [Moved from email response from @viatropos]\nYou're right, the documentation needs to make it clearer how to get started.  The framework is still pretty young, but that's on the todo list.  For the most part though, you should be able to assume anything in Rails and get the rough equivalent in CoffeeScript.\nAbout your urlFor question\u2026  2 things.\nFirst, the implementation isn't complete, so it doesn't look through the routes and everything like you pointed out, I just hacked together something quick to get started.  I'd love for you to contribute a more robust implementation, that'd be awesome!  Otherwise, it's on my list but I may not get around to it for a few weeks.  https://github.com/viatropos/\u200btower/wiki/todo\nSecond, there are a few things in Rails that I wasn't a big fan of, and one of them was the 100's of dynamically generated helper methods (url helpers, dynamic finders like find_by_x, etc.).  I prefer using the low-level API directly for 3 reasons: 1) there's fewer methods in memory, which means faster startup since javascript doesn't have method_missing, and 2) even though it may take one or two extra parameters, it's less mental overhead, and it gives you more power.  I ended up pretty much only using polymorphic_url_for and url_for in Rails.\nSo, I would rather not add this feature, but still have Tower's urlFor be just as robust as Rails'.  But, if it turns out it's only a few lines of code to generate all of those methods and it doesn't really impact startup performance at all, I'm not opposed to adding it.  At the least, it could be a separate plugin.\nFor now though, Tower.urlFor works for simple cases:\ncoffeescript\nurlFor(App.Post) # \"/posts\"\nurlFor(\"admin\", App.Post) # \"/admin/posts\"\nurlFor(new App.Post(id: 10), action: \"edit\") # \"/posts/10/edit\"\nHope that helps, let me know if you have any more questions.\n. [Moved from email response from @kristianmandrup]\nAnother suggestion would be for you to create a Tower-user and Tower-dev Google groups or similar for such discussions take place.\nYou can then select posts to include on the TODO or issues list.\nI would love to help out in improving/extending the framework.\nI agree that Tower.js shouldn't overuse auto-generation of methods such as the _path methods in Rails. Good point. Instead I thought it could use some string/hash conventions. For my example:\ncoffeescript\nurlFor 'Login', path: 'login'\nOR?\ncoffeescript\nurlFor 'Login', 'login_path'\nHere, a quick regexp (or just substring last 5 chars) would on matching with _path resolve the prefix to a registered path/route.\nOR even\ncoffeescript\npathFor 'Login, 'login'\nAND default \ncoffeescript\npathFor 'Login'\nCould resolve to the path name (route alias) as the text underscored and lowercased?\nWhat do you think? How could I make a plugin for this?\nThanks again!\nKris\nPS: If I get started I will contribute a getting started screencast if you like ;)\n. Yeah Tower should include this sort of named route functionality without having generated helper methods.\nSo for something like this route:\ncoffeescript\nTower.Route.draw ->\n  @match \"/login\", as: \"login\"\nHow about doing one of these:\ncoffeescript\nurlFor(route: \"login\") # I'm liking this one\nurlFor(name: \"login\")\nI'd rather it not take an arbitrary string and check for a named route, such as this:\ncoffeescript\nurlFor(\"login\")\nurlFor(\"login_path\")\nurlFor(\"loginPath\")\nThe reasons are these\u2026 First, by using a string-based convention, you'd then have to run every urlFor call through the parser or whatever which isn't ideal.  Also, if you for some reason wanted to have a url be http://localhost:3000/login_path, then the convention of _path would require an extra workaround to override default behavior, which adds more code to the urlFor method and some mental overhead.\nYou should be able to do what you're describing using a parameter like route: 'login', does that work?\nAlso, that'd be awesome to have a getting started screencast, let me know if you make one!\nA guy named Nate Kidwell just created a Google Group for this kind of stuff, waiting for his reply.  We can take this kind of discussion there next time, it was just so rich I wanted to take it out of email to share.\n. Yeah I'm down, I'll get that urlFor route alias feature in this weekend.\n. Sorry guys, wasn't able to get to it this weekend.  If anyone wants to go after it that'd be awesome, otherwise I'll do my best to get this in there this week.\n. Still planning on this! Have had to work on a bunch of model stuff for Tower all week for a project... won't be able to get to this for a little while. If you wanted to try it out, fork/clone the project and mess around with these two files:\n- https://github.com/viatropos/tower/blob/master/src/tower/support/string.coffee#L185\n- https://github.com/viatropos/tower/blob/master/src/tower/http/route/dsl.coffee\nLet me know if you need anything to get started.  I'll definitely get to this at some point in the near future, just don't know exactly when.\nThanks. Have a great weekend.\n. Can you add these to the coffeescript files in src?\n. No problem, adding this to the code, have a few more things to do before it's pushed.  Thanks for posting the solution!\n. Thanks!  Will merge soon.\n. This should be a quick fix, will get to this soon.  It most likely will be a fix to mint.js.\n. This is working for me, are you using the latest version of jade?  Try installing the latest version of tower and try again.\n. No formal feature in here yet but I'm working on this.  It's going to work like Rails' seeds:\ncake db:seed\nThat's a simple task that loads the file from db/seeds.coffee, in which you can write your scripts to add dummy data.\nhttp://archives.ryandaigle.com/articles/2009/5/13/what-s-new-in-edge-rails-database-seeding\nTo make this happen right now, I'd just add a task to Cakefile like this:\n``` coffeescript\ntask 'db:seed', ->\n  require('tower').Application.instance().initialize()\nrequire('./db/seeds')\n```\nAnd then in db/seeds.coffee, something like:\n``` coffeescript\ndb/seeds.coffee\nasync = require('async')\nuser  = null\nasync.series [\n  # clear any existing data\n  (done) => App.User.destroy(done)\n  (done) => App.Post.destroy(done)\n# create users\n  (done) => App.User.create\n    name:   \"Admin\"\n    email:  \"admin@example.com\"\n    (error, record) =>\n      user = record\n      done()\n# create posts\n  (done) => user.posts().create(title: \"Post 1\", done)\n  (done) => user.posts().create(title: \"Post 2\", done)\n], (error) =>\n  if error\n    console.log \"Something went wrong creating seed data... Try running again.\"\n  else\n    console.log \"Successfully created seed data!\"\n```\nAs a side note, Tower will also use the idea of \"factories\" to make creating dummy/test data easier, as well as fakers.\n- https://github.com/thoughtbot/factory_girl\n- https://github.com/marak/Faker.js\nHowever, Tower most likely won't be implementing this as \"fixtures\" the way Rails did, using YAML and all that.  Factories + db/seeds are much more powerful.\nhttp://railscasts.com/episodes/158-factories-not-fixtures?view=asciicast\nHope that helps.\n. Looks like you'll need to wait for MongoDB to initialize, here's the updated task and seed file:\ncoffeescript\ntask 'db:seed', ->\n  # needed to put require inside callback\n  require('tower').Application.instance().initialize =>\n    require './db/seeds'\n``` coffeescript\nasync = require('async')\nperson1  = null\nperson2  = null\nperson3  = null\nasync.series [\n  # clear any existing data\n  (done) => App.Person.destroy(done)\n  (done) => App.Project.destroy(done)\n# create users\n  (done) => App.Person.create\n    name:   \"person1\"\n    (error, record) =>\n      person1 = record\n      availabilities = []\n      assignments = []\n      done()\n  (done) => App.Person.create\n    name:   \"person2\"\n    (error, record) =>\n      person2 = record\n      availabilities = []\n      assignments = []\n      done()\n  (done) => App.Person.create\n    name:   \"person3\"\n    (error, record) =>\n      person3 = record\n      availabilities = []\n      assignments = []\n      done()\n], (error) =>\n  if error\n    console.log \"Something went wrong creating seed data... Try running again.\"\n  else\n    console.log \"Successfully created seed data!\"\n  process.exit() # close task\n``\n. sweet.\n. Yeah, need to write more docs on the client stuff!  But if you generate models, it will add them toconfig/assets.coffee` and they'll be available in the browser.\nThe way I'm currently bootstrapping data to the client is this:\n``` coffeescript\napp/controllers/applicationController.coffee\nclass App.ApplicationController extends Tower.Controller\n  # bootstrapping example\n  index: ->\n    App.User.all (error, users) =>\n      App.Post.all (error, posts) =>\n        @render \"index\", locals: data: {users, posts}\n```\n``` coffeescript\napp/client/config/application.coffee\nclass App extends Tower.Application\n  # json data\n  bootstrap: (data) ->\n    App.User.load(data.users) if data.users\n    App.Post.load(data.posts) if data.posts\n```\nThen in app/views/layouts/application.coffee:\n``` coffeescript\n...\nscript \"App.bootstrap(#{JSON.stringify(@data)})\"\n...\n```\nGoing to clean this up soon.  But with that you can use your models in the client (and client models don't need callbacks, but they work both ways):\n``` coffeescript\ne.g. webkit console\nApp.User.all()\n=> [>User, >User]\n```\n. I've added this functionality to the generator, so when you generate a model it will add it to these bootstrap methods.\n. Hey sync up with master so I can auto merge.\ngit remote add upstream git@github.com:viatropos/tower.git\ngit fetch upstream\ngit merge upstream/master\ngit push # then do the pull request again.\n. Sent you that email, but for reference, here's the two commands:\nnpm test\nThat references the test key in package.json, which looks like this:\nmocha $(find test -name \"*Test.coffee\")\nYou can customize that expression to run a subset of tests if you're developing something and don't want the clutter.\n. Yeah that's old code, I have to update that.  Try replacing Dispatch with HTTP, the new namespace.\n. I've updated the client library to point to HTTP, you can get that here:\nhttps://raw.github.com/viatropos/tower/master/dist/tower.js\n. Thanks for posting, still working on the client side of things.  You can override the click handler (and set global defaults) like this:\ncoffeescript\nclass App.ApplicationController extends Tower.Controller\n  # eventHandler == name + \"Handler\"\n  # dispatcher is set to the window by default.\n  @clickHandler: (name, handler, options) ->\n    $(@dispatcher).on name, (event) =>\nMore on this soon.\n. Updated the client library, works now.\nhttps://raw.github.com/viatropos/tower/master/dist/tower.js\n. Good idea, added generator idea to the roadmap.\n. I'll login to skype later today (4-5ish).  I've also started an IRC group at channel #towerjs.  We should start using that.\n. Will consider, there's also this case:\ncoffeescript\nclass App.User extends Tower.Model\n  @fields firstName: \"String\"\n    middleName:      \"String\"\n    lastName:        \"String\"\n    likeCount:       type: \"Integer\", default: 0\nIdeally it would be able to handle them all.\n. Nice!  I was messing around with that a little too:\nhttps://github.com/viatropos/tower/blob/development/src/tower/model/attributes.coffee#L24\nMade me think though, a reason why we may want to leave it out, even though it may decrease the amount of code you write, is that it makes it more complicated to read.  A big goal is to make it so if anyone see's the code, no matter if they're a coder or not, they will understand (or as close as possible to understanding).\nIf we introduced these 3 different ways of writing fields, consider what this might look like:\n``` coffeescript\nDefine one at a time\nclass App.User extends Tower.Model\n  @field 'firstName'\n  @field 'middleName'\n  @field 'lastName'\n  @field 'email'\n  @field 'likeCount',     type: 'Integer'\n  @field 'activatedAt':   type: 'Date'\n  @field 'active',        type: 'Boolean', default: false\n  @field 'admin',         type: 'Boolean', default: false\n```\n``` coffeescript\nDefine multiple at a time\nclass App.User extends Tower.Model\n  @fields 'firstName', 'middleName', 'lastName', 'email'\n  @fields 'likeCount',        type: 'Integer'\n  @fields 'activatedAt',      type: 'Date'\n  @fields 'active', 'admin',  type: 'Boolean', default: false\n```\n``` coffeescript\nDefine as hash\nclass App.User extends Tower.Model\n  @fields firstName: 'String'\n    middleName:       'String'\n    lastName:         'String'\n    email:            'String'\n    likeCount:        'Integer'\n    activatedAt:      'Date'\n    active:           type: 'Boolean', default: false\n    admin:            type: 'Boolean', default: false\n```\n``` coffeescript\nDefine using all 3!\nclass App.User extends Tower.Model\n  @field 'id', type: 'Id'\n  @fields 'firstName', 'middleName', 'lastName', 'email'\n  @fields likeCount: 'Integer', activatedAt: 'Date'\n  @fields 'active', 'admin', type: 'Boolean', default: false\n```\nThe last case is very hard to quickly grasp functionality.  But, that's what would probably end up happening with all these choices.  The first, while being a little more verbose, makes it so all apps will be easy to read.\nAs a side note, I think sometimes it's okay to make the api robust, particularly when you're writing it a lot.  This is the case with the finder api:\ncoffeescript\nApp.User.find 1\nApp.User.find 1, 2\nApp.User.find [1, 2]\nApp.User.find existingUser # .get('id')\nApp.User.find existingUser, 2\nApp.User.find [existingUser, 2]\nThe reason having multiple ways of writing this api is okay it seems is because it might take arguments in many different ways (from @params in the controller, or writing it by hand in the web console, etc.).  In that case, whatever makes it both easy to write and robust.\nJust some thoughts.\n. Looks pretty cool! Gotta get that screencast on how to create Tower extensions now...  Closing this issue.\n. If you know how to do this I'd love your help.  I'm putting this \"inflection\" code off for a while, until the important stuff in the roadmap is complete.\n. Fixed, now using a better inflection library.\nhttps://github.com/viatropos/tower/commit/e52491d2ab32c74c4b63764dd3cfcc733ec75f0a#L5R188\n. Definitely been thinking about this.  I was never a big fan of how Rails used the select box for this kind of thing because it only works on the belongsTo side (you can say a comment belongsTo a post, and so select the post from the comment form, but what if I wanted to create a bunch of comments from the post form).  The reason is because in a real app there could be thousands of posts the comment can belong to so the select box gets unwieldy.\nAnother approach is to define it as a nested resource, so the comment form would be at /posts/:postId/comments/new and you don't need a select box.  I think the generator should somehow handle this case because it sets your app up more like it should appear in the real world.  Also, if there were 100's of posts to apply a comment to, then you would have to make a DB query and instantiate models on page load, and I'd like to avoid that if possible.\nBut then what if comment belongsTo user as well...  Then you should be able to select a user for the comment when you're at /posts/:postId/comments/new.  Hmm...  I think having some sort of autocomplete thing built in might be a useful solution (an autocomplete that doesn't require a whole jQuery library, something simple).\nLet's think about what would set your app up to be most ready for the real world without requiring a ton of extra code (like a full-fledged autocomplete plugin).\n\nAlso - do I need to explicitly define foreignKey fields in my schema or does defining the relationship handle that?\n\nYou can define foreign keys explicitly, but it will pick a default for you.\ncoffeescript\nclass App.Post extends Tower.Model\n  @belongsTo \"user\", foreignKey: \"adminId\" # defaults to userId\nThere aren't robust tests for custom foreign keys though just realized, need to add that.\n. You can get the model class from the relation like this:\nHere's some code showing how relations work:\n``` coffeescript\nclass App.User extends Tower.Model\n  @hasMany \"posts\"\nclass App.Post extends Tower.Model\n  @belongsTo \"user\"\nrelations = post.constructor.relations() # App.Post.relations()\n=> {user: Tower.Model.Relation.BelongsTo}\nbelongsToRelations  = []\nhasManyRelations    = []\nfor name, relation of relations\n  if relation instanceof Tower.Model.Relation.BelongsTo\n    belongsToRelations(relation)\n  else if relation instanceof Tower.Model.Relation.HasMany\n    hasManyRelations.push(relation)\nuserRelation = belongsToRelations[0]\nuserRelation.name           # \"user\"\nuserRelation.foreignKey     # \"userId\"\nuserRelation.klass()        # App.Post\nuserRelation.targetKlass()  # App.User\n```\nHope that helps.  Note, this \"internal\" API for relations might change, I don't quite like targetKlass and such yet, need to find something better.\n. Fixed in latest release. Try updating tower with npm install tower in your app and npm install tower -g globally, or generate a new app.  Let me know if that works.\n. Working on this one today, thanks for posting!\nAs a side-note, those options --views jade --database mongodb don't actually do anything yet.  The generator only works with coffeekup, but technically you can remove the coffeekup views and replace them with jade ones.\n. You're right, I am going to fix this template issue as well and publish a new version on npm today.  Thanks for posting.\n. Alright pushed 0.4.0-2 and it's working for me.  Try updating tower with npm install tower in your app and npm install tower -g globally, and grab the latest client-side tower.js, or generate a new app.\n. Is this still a problem?  Make sure you have the latest version of Tower installed (and the latest client js)\n. I'm not getting this error, are you sure you've loaded the validator library on the client?\n. This is great!  Been slammed so couldn't take a look right away.  We gotta get the socket stuff awesome.\nI'm going to focus on getting the standards set in place for testing over the next couple days to finish up 0.4.1, in particular:\n- standard way for testing the controllers (and file uploading) - there's currently a pretty standard way for testing models and view rendering server-side\n- testing the client - all of the current test suite should work for the client and be executable from the command line (executing tests in the browser through socket.io with design.io is already setup)\n- tests for the generators (test for reading/writing files)\n- tests that the terminal commands work (tests for executing commands and stdout, etc.)\nIf this is in place I think we'll be able to move at an insane pace.  It's tough to merge this stuff quickly without spending a half-hour/hour testing everything manually.\nStoked to get this going!\n. I'm not sure I understand.  The first example is incorrect, the second one is correct.  This is how it's supposed to work:\ncoffeescript\nApp.Photo.find @params.id, (error, resource) =>\n    console.log resource.attributes.id\nBut, the way you access attributes is like this:\ncoffeescript\nApp.Photo.find @params.id, (error, resource) =>\n    console.log resource.get('id')\nTo get your first example working, you can (although I haven't checked recently) set Tower.accessors = true, which will use Object.defineProperty to create getters/setters in Node.js and the browsers that support them (newer browsers).  Then you can do this:\ncoffeescript\nApp.Photo.find @params.id, (error, resource) =>\n    console.log resource.id\nBut, I suspect, being able to do resource.id previously was a bug, now it's fixed?  Or is this happening on the client?  Let me know.  Thanks for all your posts.\n. Correct, the $ syntax is from the MongoDB Query API.  Tower's using that because it was an already elaborate and tested query language that handled a lot of cases.\nI have not seen Rel before, looks interesting!  I loved Arel.  However, in Rails, I rarely used Arel directly as it was too verbose and difficult to understand, and I ended up using libraries like Squeel.  I'm a fan of being able to read the syntax quickly.\nAlso, you can use <= < > >= and others instead of the $ equivalent.  Check out the map:\nhttps://github.com/viatropos/tower/tree/master/src/tower/store.coffee#L25\nHere's a quick comparison (after scanning the Rel readme):\n``` coffeescript\nusers.where(users.column('name').eq('bob'), users.column('age').lt(25))\nusers.where(name: 'bob', age: \"$lt\": 25)\nusers.where(name: 'bob', age: \"<\": 25)\nusers.where(users.column('name').eq('amy')).project(users.column('id'))\nusers.where(name: 'amy').select('id')\n```\nTower's syntax is much cleaner.\nLike @kristianmandrup said, try making this into a module for Tower, providing the alternate syntax.  I'll still think about this, but seeing some examples would help.\n. I will update the documentation soon, but for now I'll just give you an example.\nThe memory store isn't like a redis store, it's just a simple \"in memory\" store.  To change stores globally, set the store on Tower.Model:\ncoffeescript\nTower.Model.store(Tower.Store.Memory)\nTower.Model.store(Tower.Store.MongoDB)\nTower.Model.store(Tower.Store.Ajax)\nTo change it on a per-model basis, you can do this:\ncoffeescript\nApp.User.store(Tower.Store.Memory)\n. This may be b/c Tower.Store.MongoDB has an initialization hook:\nhttps://github.com/viatropos/tower/tree/master/src/tower/server/store/mongodb.coffee#L22\nWe probably have to change this.  Try messing with that (comment it out) and seeing if you can get it to work.  If you can find a fix that allows opt-out of MongoDB that would be awesome, send me a pull request.  I won't be able to get to this for a couple days.\n. I'll be on IRC more regularly (#towerjs), I hardly ever have used it.\n. You're correct, this is a bug.  You should be able to mess with Tower.View#_readTemplate, changing that store.findPath to something like Tower.View.cache.  I updated this to fix a previous template bug server side, haven't updated client.  Will fix this soon unless you get to it first.\nAlso, we need better ways to test the client side of tower.\n. If you can fix this and send me a pull request that would be awesome.  Otherwise I'll get to this by the end of the week.\nThe code is here:\nhttps://github.com/viatropos/tower/tree/master/src/tower/view/form/field.coffee#L92\n. This is fixed now.\n. https://github.com/viatropos/tower/issues/80#issuecomment-5061913\n. You can now run all tests for a specific store (defaults to memory):\nmocha $(find test -name \"*Test.coffee\") --store mongodb\nThese are abstracted away into the Makefile:\n```\nmake test-memory\nmake test-mongodb\nall of them:\nmake test\n```\n. Thanks for posting, will fix this soon.\n. I have no idea.  Can you print me the error stack trace?\nIt may from the way everyauth is determining node modules from the file extension, maybe you have to define a renderer for it...\n. I am starting to use passport now.  I will post an example project when I get the time.\nFor now, here is some extracted code (hacks now, need a clean way to make those urls in the app in a controller):\n``` coffeescript\nconfig/application.coffee\nglobal.passport   = require 'passport'\nrequire './credentials'\nrequire './session'\nMongoStore = require('connect-mongo')\nFacebookStrategy  = require('passport-facebook').Strategy\npassport.use new FacebookStrategy\n  clientID:     Tower.secrets.facebook.key\n  clientSecret: Tower.secrets.facebook.secret\n  callbackURL:  \"http://localhost:3000/auth/facebook/callback\"\n  (accessToken, refreshToken, profile, done) ->\n    process.nextTick ->\n      global.App.User.findOrCreateFromFacebook profile, (error, user) ->\n        done error, user\nclass App extends Tower.Application\n  @configure ->\n    @use \"favicon\", Tower.publicPath + \"/favicon.ico\"\n    @use 'static', Tower.publicPath, maxAge: Tower.publicCacheDuration\n    @use \"profiler\" if Tower.env != \"production\"\n    @use \"logger\"\n    @use \"query\"\n    @use \"methodOverride\", \"_method\"\nrequire './databases'\nmongostore = _.extend {}, Tower.Store.MongoDB.config[Tower.env]\nmongostore.db = mongostore.name\ndelete mongostore.name\n\n@use 'bodyParser'\n@use 'cookieParser', Tower.config.session.key\n@use 'session', secret: Tower.config.session.secret, store: new MongoStore(mongostore)#, cookie: {domain: \".\" + Tower.config.session.cookie.domain}\n##@use \"csrf\"\n@use passport.initialize()\n@use passport.session()\n\n@get \"/auth/facebook\", passport.authenticate(\"facebook\"), (request, response) ->\n  # The request will be redirected to Facebook for authentication\n\n@get \"/auth/facebook/callback\", passport.authenticate(\"facebook\", failureRedirect: \"/login\"), (request, response) ->\n  response.redirect \"/\"\n\npassport.serializeUser (user, done) ->\n  done null, user.get('id').toString()\n\npassport.deserializeUser (id, done) ->\n  global.App.User.find id, (error, user) ->\n    done error, user\n\n@use Tower.Middleware.Agent\n@use Tower.Middleware.Location\n@use Tower.Middleware.Router\n\nmodule.exports = global.App = new App\n```\n``` coffeescript\nconfig/secrets.coffee\nTower.secrets =\n  facebook:\n    key:    \"your-key\"\n    secret: \"your-secret\"\n```\n``` coffeescript\napp/models/user.coffee\nclass App.User extends Tower.Model\n  @field \"facebookId\"\n  @field \"firstName\"\n  @field \"lastName\"\n  @field \"fullName\"\n  @field \"username\"\n@findOrCreateFromFacebook: (meta, callback) ->\n    data            = {}\n    name            = meta.username\n    name          ||= meta.displayName\n    name          ||= \"\"\n    name            = name.replace(/[^a-z0-9]/gi, \"-\")\n    data.firstName  = meta.name.givenName\n    data.lastName   = meta.name.familyName\n    data.fullName   = meta.displayName\n    data.username   = meta.username\n    data.username ||= name\n    data.facebookId = meta.id\n@create data, callback\n\n```\n``` coffeescript\napp/controllers/applicationController.coffee\nclass App.ApplicationController extends Tower.Controller\n  @layout \"application\"\n@beforeAction \"setCurrentUser\"\nsetCurrentUser: ->\n    @currentUser ||= @request.user\n    true\n```\nHope that helps.\n. That's pretty cool, generates a whole bunch of ideas!\n. Those get things, yes.  But the tricky part is figuring out how to insert those passport.authenticate(\"facebook\") calls.  That's middleware, haven't handle that case.  They could be placed in a beforeAction callback in the controller, but that's not ideal.\n. If @kristianmandrup doesn't get to it first, I'm definitely going to implement CanCan a couple weeks from now.  It's the most elegant solution to the authorization problem I've seen.\n. You're the man! Gotta take a look at it tomorrow, can't wait.\n. Working on this...\nThinking about making it so you have to require the components of tower you want (and the generator will give you defaults while being customizable).  Something like:\n``` coffeescript\nconfig/application.coffee\nrequire 'tower/store/mongodb'\nrequire 'tower/store/memory'\nclass App extends Tower.Application\n...\n```\nI'd like to not have to go down that road, but the alternative is having some sort of config variables like this:\ncoffeescript\nclass App extends Tower.Application\n  @stores: [\"memory\", \"mongodb\"]\nNot sure yet if custom config variables like that are more confusing.  One the other hand, the require method would require we separate tower out into chunks and it's not ready for that yet.\nThe client should work this way too in the end, where you can require minimal amounts of code.  By default, tower.js would give you everything.  But you should also be able to do this:\n/javascripts/tower.core.js\n/javascripts/tower.model.js\n/javascripts/tower.store.memory.js\n/javascripts/tower.controller.js\nOr more fine-grained, if you only wanted non-persisted tower models without chainable scopes:\n/javascripts/tower.core.js\n/javascripts/tower.model.core.js\n/javascripts/tower.model.attributes.js\n/javascripts/tower.model.validations.js\nBut that's the last thing on the roadmap.  Will try and find a short-term workaround.\n. This is going to take some time to fix.\nWhat you don't want to do is make it so if you don't have mongodb installed/running it uses the memory store, because then it may be confusing/difficult to figure out how to start using mongodb. Don't want that barrier.\nOne workaround (what meteor does) is precompile mongodb/node into a .zip file, so when you install tower you get mongodb too. There are too many issues with this though (you have to start dealing with individual operating systems).\nWill think about this some more, I think in the short term having clear documentation showing that you must install and run mongodb (or manually remove databases.coffee or something similiar, such as with a command-line flag), this will become a lot clearer.\n. This is now fixed, try generating a new app and checking out the package.json. MongoDB, socket.io, and coffee-script are now only added to the generated app's package.json, so tower doesn't have those dependencies. If you don't want to use a database at all, then remove the generated mongodb: ... from app/config/databases.coffee, or set default: 'memory' (see the code here for how it works: packages/tower-application/server/application.coffee#L112). Cheers.\n. Try clearing the cache and/or running with sudo:\n[sudo] npm cache clean -g\n[sudo] npm install tower -g\nThese random errors are usually b/c of the npm cache.\n. Have you merged with the latest master?  This seems like it should automatically merge...\n. tests don't pass\n. Thanks, yeah design.io has a ways to go.  What operating system are you on?  It only works on mac, but someone just added linux support.\n. This seems to be working for me, do the tests run for you?\nJust added these:\nhttps://github.com/viatropos/tower/tree/master/test/cases/model/attributesTest.coffee#L201\n. Thanks @au-phiware, merged your pull request into mint.js and bumped tower to 0.4.0-5 with a few other package.json updates.\n. Coercing to express 2.x in package.json until we can make all the updates to get it working with express 3.\n. Fixed, thanks for pointing out!\nFor those of you with existing apps, make sure you update your Watchfile:\nhttps://github.com/viatropos/tower/blob/master/lib/tower/server/generator/generators/tower/app/templates/watch#L15\nSpecifically those 2 javascript sections.\nAlso, delete the files in ./public/javascripts/config.\n. Should make this more bullet proof, in case the Watchfile is changed or anything strange happens where those files are put in public.  Maybe a regex or warning before git commit if there is a file in public matching a pattern.  Or add to gitignore... Will keep in mind.\n. Thanks!\n. Working on more robust tests and such for associations, will get back to you.\n. This is working now.\n. Closing this issue as a lot as changed since then. Check out the development branch and reopen if there are still issues.\n. We need to start pointing to specific commits for the js libraries referenced in the generator.\n. Oops, my bad...\n. How is this now?\n. Will merge, let me think about it a bit first.\n. @edubkendo Yeah that's an error.\nIt creates the record because format[controller.format] is called after the record is created, but format[controller.format] is doing format[\"FORM\"] (looking at your error).\nThat's because this line must not be working:\n/tower/controller/instrumentation.coffee#L65\nThat code require('mime').extension(@request.header(\"content-type\")) needs to be adjusted.  Wanna give it a shot?\n. Thanks!\n. Thanks, will merge in a bit.\n. You're the man, thanks!  Will push a new version soon with these changes.\n. try building the tower client js from source:\ngit clone git@github.com:viatropos/tower.git\ncd tower\nnpm install\ndesign.io\ncake build # dist/tower.js\n. Great discussion topic.\nMy preferred way of testing the client is through design.io + mocha.  Say you have your app open at a specific URL like \"/login\".  You write integration tests testing that the login form has the right labels and highlights the field in red when an input looses focus or whatever.  You can also test that the login form has a specific width, i.e. test all of the css is rendered correctly.\nUsing web sockets like this, you can write tests for your app with your page open and when you hit save it will reload the javascript file your tests are written in, and mocha will re-execute them.  This is very easy to do, we just need to create a watch task for design.io (have done this a bunch before, haven't had time to refactor it out).\n``` coffeescript\nmint = require 'mint'\nwatch /test\\/*Test.coffee/\n  # this is in the Watchfile context\n  update: (path, callback) ->\n    mint.render path: path, (error, result) =>\n      @broadcast body: result\n      callback()\nclient:\n    # this is in the browser context\n    update: (data) ->\n      eval(\"(#{data.body})\") # this is the mocha test code you just saved...\n  mocha.run()\n\n```\nThis way, you can also test multiple-page flows. In an after block in your mocha test, you can do window.location = x, or in one of your tests you can submit a non-ajax form, and if the page changes, it will load the next url and if there are any tests associated with that url, those will run!  That's pretty powerful.  You could create a demo of your app this way, where it looks like a bot is basically performing every action possible on your app, changing pages and everything.\nAnother big benefit is you can have multiple different browser windows open (firefox, opera, etc.) and because of design.io the tests will execute in all of the browsers open!\nYou could probably even do that with Internet Explorer through VMWare fusion or Parallels (I use VMWare fusion now).\nI've used PhantomJS and ZombieJS (and selenium) in the past, and while they are nice, it never really mimics the browser environment...  You end up not being able to test fixes for those cross-browser errors, and testing async/visual javascript is not practical in a headless environment.\nWe should probably have a way to test using PhantomJS and ZombieJS anyway though, because having a browser window open while testing can be annoying sometimes.  But there are other ways around this.\nAlso, it's very easy to programmatically open browser windows from the terminal and run tests, so the design.io/watch solution definitely works as part of a test suite.\nWe also need to consider auto-executing tests on file save in the terminal (like Spork in Rails).  In practice though, I found spork very hard to setup and it was rather annoying having tests auto-run every time you save a file.  The way I test, I usually run 1 test file for the features I'm working on, and every 10 or so changes I run the suite, so if anything breaks I catch it quickly.  This isn't a matter of the suite taking a long time to run, it's more a matter of not being overwhelmed by output (even 750 dots........................ distracts my mind, I'd rather only see the dots I'm focused on at the moment).\nFor client-side tests though, I think we should go with the in-browser solution using design.io.  It's SUPER sick.  Everybody's doing headless tests but they don't cover a lot of the test cases you really should be testing from a UI/client javascript perspective.\nTo do this, we need:\n1. a watch task for design.io\n2. a web console reporter for mocha (outputs the test results in the web console using console.group, very cool.\nI implemented this for Jasmine a while ago, here's the code:\nhttp://github.com/viatropos/design.io-jasmine\nhttps://github.com/viatropos/design.io-jasmine/blob/master/src/design.io-jasmine.coffee\nBasically, we just create a plugin design.io-mocha that takes care of the details.\nWhat do you think?\n. p.s. I'm a fan of doing discussions like this, let's just label issues with discussion and we'll close them once we feel the discussion reaches a reasonable conclusion.  You can always comment on closed discussions or reopen them.  Forget google groups :)\n. Glad we got design.io working on linux!  I agree, we should have a headless option as well.\n. @sebastianhoitz sounds good.  I won't be able to get to it for a couple weeks though, need to get this ember/client stuff finished.\nI agree with you on PhantomJS as well, I've only used it to run the ember test suite and it just didn't feel as nice as zombie.js, no idea why.  I like zombie, have enjoyed using it for other things.\nPerhaps we should think about building something like Capybara for node - at least an \"interface\" to other integration testing frameworks/tools.  Not the biggest fan of having a super rich DSL for test driven development, but Capybara is an excellent project.\n@edubkendo Mocha is the best. Mocha + Zombie will be great.\nP.S.  The main reason I like doing integration testing in the browser (via design.io) instead of headless with zombie is because of the XPath problem.  Testing if certain HTML exists is MUCH easier with jQuery than trying to build another XPath parser with a different API.  In Capybara/Selenium, you had to do this:\nruby\npage.has_xpath?('//table/tr')\nWhereas in jQuery I could do this:\njavascript\n$('table tr').length\nMost people don't even know jQuery has a \"css interface\" over XPath, to query HTML.  They just traverse the DOM the way they intuitively know how to do.  With Capybara/Selenium, it felt like you had to be a master of XPath before you could even start testing.  We should definitely avoid that, make it easy for everyone.\nIf you can figure out how to use jQuery in a headless browser, at least just to take advantage of it's XPath/CSS selector system for testing HTML, that would be awesome.  I think I've seen something like this but haven't tried.\n. This requires an identity map, and/or eager loading. These are a work-in-progress. Actually, it works on the client fine b/c everything is in memory, but with mongodb it requires more sophistication.\n. You're right, the current implementation is very primitive and needs to be made more robust.  It only reloads the changed file.\nCurrently, it tells you the path to the file that's been changed:\n/tower/server/application/watcher.coffee#L45\n``` coffeescript\nTower.Application.Watcher =\n  # ...\n  fileChanged: (path) ->\n    # this is a tmp solution, more robust coming later.\n    if path.match(/app\\/views/)\n      Tower.View.cache = {}\n    return unless path.match(/app\\/(models|controllers)/)\n    path = require.resolve(\"#{Tower.root}/#{path}\")\n    delete require.cache[path]\n    process.nextTick -> require(path)\n```\nWe should just make this method more robust.  It should also be able to handle customization, so if you have some edge case or special way of organizing your code, you should be able to make the reload work.\nIn order to do that, we need a more robust way of tracking the class hierarchies and module inclusions.  Ember shines at this, so we should have this soon, and might work along these lines:\ncoffeescript\nklass = Tower.pathToConstant(path)\n    for subklass in klass.subclasses\n      require(Tower.constantToPath(subklass))\n    for mixin in klass.mixins\n      require(Tower.constantToPath(mixin))\nI'd rather avoid the nodemon solution of restarting the server every time a file is changed.\nWon't be able to get to this for a little while.\n. Oh right.  I think the try/catch solution doesn't work across all browsers (it's basically method_missing).  For now you have to manually require it like you're saying.\n. It is now user.get('company') in 0.4.1.\n. Don't want to do this at the moment b/c Heroku installs all the devDependencies and fails b/c of ruby (last time I tried).  We need to figure out a way to tell Heroku (and nodejitsu and all them) to ignore devDependencies, then I'll merge.\n. Have you started the global design.io server with design.io start?\nOpen 1 terminal window, cd into any project directory with design.io locally installed (node_modules/design.io), and run design.io start.  That starts a \"global\" socket server that will do the pushing for live updates.\nThen in your current app (terminal window 2), run node server (or tower server).  Internally, tower will run design.io so you don't have to have to open a 3rd terminal window.  Now this design.io process will send any file updates to terminal window 1, which will send them to the connected browsers.\nThat one window running design.io start should always be running.  It needs to be executed in a directory containing node_modules/design.io right now, but that should be refactored away so you can run design.io start anywhere on your computer.  For now though, just run it in a node project with design.io installed locally.\nI think the big thing is just that design.io start wasn't executed.\nnpm install design.io -g\ncd random/node/project # window 1\nnpm install design.io\ndesign.io start\n```\ncd the/tower-app # window 2\nnode server\nor the manual version\ncd the/tower-app # window 2\ndesign.io\ncd the/tower-app # window 3\nnode server\n``\n. Do you get live updates when you edit stylus inapp/client/stylesheets?  Or when you edit javascript?  Try addingalert('!')toapp/client/config/application.coffee`, on save the browser should alert.\nThe templates don't live-update yet though.  I started on a watch task in the Watchfile, but it's not complete.  To get templates to auto-refresh you can probably customize that pretty easily.\nDoes that help?\n. I'm not able to replicate.  Here's what I did:\n- design.io start\n- tower new app\n- cd app\n- npm install\n- node server\n- make html, body background: red\n- add alert('!') to app/client/config/application.coffee\nIt's all working for me, also using Chrome.\nThe browser URL shouldn't be changing, that seems strange.  Maybe you can make a quick screencast with something like http://www.screenr.com/jhr and email me?  Don't know what else it would be.\nMake sure there's no errors in the web console, otherwise the javascript may not be executing.  I've had that happen before.\nMake sure design.io-javascripts is installed locally as well.\nAlso, I recommend trying to create your own watch tasks, opens up a lot of possibilities.  The design.io-javascripts plugin just handles a lot of the details/configuration for compiling javascript, just to put it into a clean little bundle.  But you definitely can implement a basic javascript watcher very easily by hand, something like:\n``` coffeescript\nmint  = require 'mint'\nfs    = require 'fs'\nwatch /app\\/.+.(js|coffee)$/\n  # Watchfile's scope\n  update: (path, callback) ->\n    fs.readFile path, 'utf-8', (error, content) =>\n      mint.coffee content, {}, (error, result) =>\n        @broadcast body: result\nclient:\n    # browser's scope\n    update: (data) ->\n      eval(\"(function() { #{data.body} })()\")\n```\n. Perfect!  I see exactly what you're saying.\nTry adding the alert('!') to the top of the file:\n``` coffeescript\nalert \"!\"\nclass App extends Tower.Application\n  @configure ->\n    @use Tower.Middleware.Agent\n    @use Tower.Middleware.Location\n    @use Tower.Middleware.Router\nbootstrap: (data) ->\n```\nThat should show you the javascript is actually reloading.\nYou were putting it in the bootstrap method, which is called in app/views/layouts/application.coffee.  The javascript reloader isn't that sophisticated yet... moving too fast lol.  To make that work, we'd have to start customizing the javascript watcher for every file.  That comes later.\nWhen you save a template in app/views/, it's running through that incomplete template reloading watch task, and it looks like it's refreshing the page:\nhttps://github.com/viatropos/tower/blob/master/lib/tower/server/generator/generators/tower/app/templates/watch#L73\nI wrote that a while ago and never finished it.  Basically, that task was going to watch when any view file changed, recompile the templates.js (all of the views), and update the window with the url for that view, something like that...  Going to get back to that later, once more of the roadmap is finished.\nAlso, any javascript you edit in app/views won't show up until page refresh.  That's because I am treating the views separately from the rest of the coffeescript/javascript in the app.\nSo it looks like everything's working for you, you were just taking it to new levels it hasn't handled yet.\nAlso note, you can create a new javascript file and add the alert to see if it works.  I usually create something like app/client/palette.coffee which is like my coffeescript web console.\nDoes that help?\n. will fix that url thing, you can comment out the client part of that watch task for now:\n``` coffeescript\n  client:\n    update: (data) ->\n      #Tower.View.cache[data.id] = data\n  #if data.reload\n  #  window.location = data.path\n  #else\n  #  Tower.get data.path\n\n``\n. I think this is because when you runtower server`, it's loading the script from the global installation, which looks like this:\n/bin/tower\n```\n!/usr/bin/env node\nrequire('../lib/tower').Command.run(process.argv);\n```\nThat then tries to require all of the libraries from your global set of modules.  I haven't quite figured out a good way to do this, because when you do tower new app you want it to use the global modules since the path is relative.  But when you do tower console and tower server, you don't.\nIt needs to be something like:\n```\n!/usr/bin/env node\n// process.argv == ['node', 'tower', 'server']\nif (process.argv[2] && process.argv[2].match(/new/)\n  require('../lib/tower').Command.run(process.argv);\nelse // will find from local node_modules\n  require('tower').Command.run(process.argv);\n```\nAnyone have a good suggestion?\n. @KingScooty Make sure you have started mongodb.  In a separate terminal window, run:\n[sudo] mongod\nIf you installed this with homebrew via brew install mongodb, they should have given you instructions on how to setup a daemon that automatically starts mongo when your computer restarts.\n. No worries, feel free to add it to the README where you think it would fit best.  Cheers.\n. Thanks!\n. @vjsingh what's your operating system, version, npm version, rvm version, node version, etc.?\nWhat happened to @mauricemach, his online presence stopped like 5 months ago.  I hope he's alright.\nThere's a few things that we have to rebuild in switching to CoffeeCup, mainly the partials.  That's why the delay, I don't have the time atm to get this in.  Looking forward to getting a pull request!\n. @vjsingh hmmm..., yeah can you show me the terminal output when you start it up?\nWhat version of ruby and RVM are you using?\nAlso, try upgrading npm to the latest and reinstalling design.io?  It should work.\nIt may also be b/c the ruby script in design.io is never loading, perhaps because of an older/sudo-protected version of ruby.  Try running sudo design.io?\n. Wait, did you run design.io start or design.io?  You should run design.io.  Here's a breakdown:\n- design.io start starts up the socket server globally, but it does not compile the files\n- design.io is an alias to design.io watch, which does watch the files in your project.\n- design.io start should be run in a node project with design.io installed locally (node_modules/design.io). this is temporary, but it's needed now b/c the globally installed design.io (which handles the design.io start command) tries loading the local design.io to execute.  Again, this is temporary and will be cleaned up later.\n- design.io start listens for notifications for any totally separate project that has executed the design.io (or design.io watch) command.  When it gets that notification, it sends it to the appropriate connected clients.\n- You only have to run design.io start once, and just keep that terminal window open, or run it as a background process.\n- Then, for every project, run design.io to watch the files.\n- design.io start runs on port 4181.  That is where a small express app with socket.io is running.\n- design.io doesn't run on a port, it's just a watch process.\n- design.io uses ruby to watch files, as the node.js file watcher doesn't fully work yet on all platforms.\n- The mac comes with ruby 1.8.7 installed by default, and often requires gems be installed with sudo gem install x.  This has been a problem in the past with design.io.  If you are using mac's default ruby version, make sure you install the ruby watcher with sudo gem install fs-events.  If you do sudo npm install design.io, this will also execute that command.\n- A better approach is to install RVM, the Ruby Version Manager.  Then install ruby 1.9.2 (the recommended version in the community) and set it as the default (in the RVM install docs).  Then you can install design.io with npm install design.io, and no sudo is necessary.\n- Tower executes the design.io command internally - just to make it easier, so you don't have to open 2 terminal windows.  So, running node server in a generated tower app will run design.io (aka design.io watch).\nJust wanted to get that out in case things weren't clear.\nAlso, here is a list of Homebrew commands:\nhttps://github.com/mxcl/homebrew/wiki/The-brew-command\nTo upgrade your version of Node to 0.6.14 (that's what I have, may be higher now), run this:\nbrew upgrade node\nTo update to the latest version of NPM (I have 1.1.16, may be higher now), copy/paste the command from their homepage: http://npmjs.org/\nTry that stuff and see if it gets working.  It definitely should be working.  Here's my setup:\n- Mac OS X 10.6.7\n- Node 0.6.14\n- NPM 1.1.16\n- RVM 1.9.2\n- Ruby 1.9.2 (via RVM)\n. Made the switch in the development branch.\n. Hey, try clearing your npm cache with and without sudo and running again (also try updating your version of npm to >= 1.1.16):\n[sudo] npm cache clean\nnpm install\nThat's usually fixed these seemingly random installation problems.  Let me know how that goes.  If it doesn't work, send me your OS and node version and we'll go from there.\n. No problem. Don't know anything about Fedora, did clearing the cache not work?  If there's a different error message, post that onto a gist too.  Thanks!\n. I also saw this earlier today, don't know anything about native extensions but if this isn't an npm cache issue it looks like the error is talking about a native extension:\nhttps://twitter.com/#!/TooTallNate/status/194927373387448320\n. This was intended. There just needs to be a way to opt-out of (or perhaps opt-in to) using \"resourceful controllers\".  It's borrowed from https://github.com/josevalim/inherited_resources.\nAll of the actions are implemented by default.  If you comment out the route and manually place the routes you want, that's one way to avoid the security hole of potential unwanted actions.  Another approach would be to have a class method that disables/enables default actions:\ncoffeescript\nclass App.PostsControllers extends App.Controller\n  @resourceful()\nWe'll have to think about what we all prefer.  I personally want to have the controller actions implemented by default because they should be exactly the same 90% of the time (fat models, skinny controllers).  But this does mean the app developer would have to take responsibility for making sure no security holes are present (want to minimize this burden as well).\nAlso, you can use only and except to filter actions.\n. Yeah this was most likely because your internet connection was spotty.  We could probably catch these network errors and output a message like \"make sure you have a good internet connection\".\n. I'll look into doing this in the next release.  Let me know if you see it again.\n. Will look into this probably next week.  This is definitely b/c of design.io.  Design.io is basically a wrapper around the pretty cool library hook.io, so let's also make sure hook.io works as expected (I imagine it does, since it's been around for a while and looks like it's been pretty much perfected).\n. It does, tower server calls design.io.\nhttps://github.com/viatropos/tower/blob/master/src/tower/server/application/watcher.coffee#L14\n. Haven't had the time lately to check this out :/  Doesn't look like I'll be able to anytime soon, have a bunch of other things before in line.\nIf you want to take a swing at it I will definitely merge a pull request. If this is preventing you or others from using it at all then I'll move it up in priority, but it seems like there are temporary workarounds at least.\n. I agree, it will be an addon. Just wanted to have it in there to demo initially :). A lot has changed since then, I think this stuff will be much easier to do now anyway with the latest version of Node. Will refactor/extract eventually, feel free to give it a shot as well.\n. @ylluminate @activestylus Going to start working on this now, need to simplify the getting started process and design.io is a pain. Commented a little here https://github.com/viatropos/tower/issues/206#issuecomment-7913200.\nIdeally the asset compilation and \"watch\" system would have these features:\n- Transparent, doesn't require installing a separate app or running a separate command in another window. But, it should [eventually] be able to be run separately/manually if desired, so you can for example keep the watcher constantly running even if your server turns on/off\n- Pure node. Remove this ruby business.\n- Fast/efficient. Some issues with design.io are that it used some JS AST parser to find the require statements, but that's super slow with a large number of files. And also, it used the fs async api, which causes a memory explosion on a large number of files (I think).\n- Should compile the assets instantly when you start your app (right now you have to wait a few seconds).\nWhat are your guys' thoughts. Have you tried grunt? Are there any other tools?\n. Still not able to get notifications from fs.watch on a directory... https://github.com/joyent/node/issues/1986\n. Tower is now no longer using design.io.\nInstead, use grunt. In the generated tower app:\ngrunt start --config ./grunt.coffee\nIn the tower source code, an alias to that:\nmake watch\n. Awesome! Going to push this to npm in the next few days.\nHey so how do you measure the memory usage of the program? I'm no master at system-level commands lol.\n. cool, I'm using the activity monitor as well, just wondered how you might do it in the terminal, will checkout ps aux, thanks.\n. This looks more like it!  One request though.  Can you resubmit this without all the changes to the unnecessary .js files?\nTo do that, create a feature branch, make your changes, commit and push and open a pull request from that feature branch.  Then it'll be just the relevant files.  Just so the commit history isn't saying 14,000 additions, 13,000 deletions everywhere, I already did that on accident once, lol.\n```\nfrom your tower fork\ngit checkout -b issue-107-fix\nadd code, commit, push\n```\nOnce you do that I'll close this request, merge the new one, and push.  Looks good, thank you.\n. sure, though I'm not sure why all of those files were different?\n. You should be able to run design.io in the root of the cloned repo and it'll do all the compiling.\n. Agreed, we should do this.\nIt's also particularly annoying that some commits that were accepted (and lots of my own) say 15,000 additions, 14,000 deletions.  Is there a way to permanently remove everything in the lib folder from git history, such that it 1) doesn't cause any problems such as with people who've already forked the project, and 2) that it also updates the commit graphs (do you know if @GitHub is reading this dynamically or is it permanently there in history no matter if we hard-remove it from the git history?).  If you know how to do this let me know, I've always avoided changing git history in the past b/c it did strange things, but this is a case where we should do it.\nAnother thing we need to do to make this happen: move the generator templates to src, which will require some more sophisticated compiling steps.  Or we can leave it in lib, just need to think about this as well.\nThe last thing is we'll have to go through a thorough testing phase on different operating systems and such to make sure coffee-script compilation works as expected (since you have to compile it on the spot).\nLove how you described the advantages and disadvantages, that's the kind of stuff we need to make good decisions.\n. One solution is to run a post-install hook to generate lib javascripts when you do npm install.  I imagine we may run into conflicts if someone does npm install coffee-script inside a project directory after installing tower, then tower will use that version, which may not be compatible.\nBy precompiling like this, technically you wouldn't even need coffee-script, and could write your whole app in JavaScript.\n. This is happening in the dev branch now.\n. Make sure you've run npm install to install the dependencies in a new app.  If you did that, also make sure you've installed design.io:\nnpm install design.io\nLet me know if that helps.\n. A lot has been changed since this. Try again with tower 0.4.1 and reopen if there are any issues. Thanks!\n. what was the name of your generated app? this may be because a keyword was used, not quite sure yet.\n. This is a bug, thanks for pointing out.  If you want you can submit a pull request with the fix and I'll merge it in, otherwise I'll get to this tonight or tomorrow.\n. Nice\n. Thanks!\n. Updated a lot of this recently, we need to check if it's still broken (and write some tests).\n. I have had my eye on this but haven't gotten to it yet. Probably wont get to this for a few months. Feel free to hack on it and try to integrate it, that would be super awesome :)\n. Cluster support in 0.5.0.\n. This is a missing feature right now.  First, you can do format: {value: /pattern/}, but not format: {with: /pattern/}.  I'm thinking about changing this to match Rails but want to think about it some more first.\nSecond, the custom message: 'Invalid email' key isn't implemented yet.  It's very easy to do, just need to  customize this line here: /tower/model/validator/format.coffee#L21.  The other validators need this too, so we just need to refactor.  Will get to this soon unless you would like to submit a pull request.\n. Fixed in master.\n. Going to change the way this works in the next release, you shouldn't need forever in production. Stay tuned.\n. for reference this is no longer the case in 0.4.1\n. Yeah won't work because the mongo store is asynchronous so it requires a callback.  In the next version of Tower we're pushing out here soon all finder methods that return an array will return a blank array if it's asynchronous, but that same array will be populated with the records once they arrive.  This way you can do users = App.User.all() in the console and an instant later check the value of users and it will contain the records.   For first, last, and find(id), it will return undefined in async stores.\n. Awesome.  I would create a separate file, like Tower.Controller.Flash:\nhttps://github.com/rails/rails/blob/master/actionpack/lib/action_controller/metal/flash.rb\nWhenever you're adding a set of functionality that has more than 1 method I'd just put it into a separate module.  Unless it's just an extension of something that we've already created a module for.\n. The associations are much more robust in the development branch, check it out. Docs coming in the next month or so.\n. Yeah once we clean up development branch and merge it to master I'm going to go through all the documentation and update everything and I'll start marking things as todo or having a more obvious todo section.\nThis would be great to get some help on.  There's a couple things not yet done for the - what's now becoming - \"cursor\" (the 0.4.0 scopes and criteria):\n- includes (eager loading)\n- except/without (specific fields, not sure on naming yet)\n- explain\n- select/with (specific fields, not sure on naming yet)\n- nested paths (where('address.city': 'San Francisco'))\nI'm finishing up a bunch of pagination stuff for that right now.\nThe best way to implement includes is probably just to see how they did it in Rails and go from there.  I haven't looked much into this lately.  It should be able to handle most of the same arguments as Rails:\n``` coffeescript\nApp.Cart.includes('items').first (error, cart) =>\n  cart.get('items').all # no database call\nwhere orderItem belongsTo product and you want both:\nApp.Cart.includes(orderItems: 'product').all\n```\nI remember Rails was using an \"IdentityMap\" class, but I think we can get away with using Tower.Store.Memory somehow.  But, keeping a global store of the instantiated models might just be by id, so it might just be a hash.  We're also going to have to think about keeping any instantiated model in a global \"identity map\", but depending on the complexity we should probably save that for later (at least building with that in mind).\n. Sweet, I'll be IRC #towerjs most of this week.\n. Started to implement this in the development branch but I think it's broken now - doing some work on embedded documents and keeping the associations on the client bound to each other (parent.child == child.parent). It's hard to do on the server and haven't figured out how to do it properly yet (since it's async and dependent on the request, while Rails is sync). This is kind of what I'm thinking for an IdentityMap: https://github.com/viatropos/tower/commit/b996599e4e8069f793a7402d6a78430650e43887\nGoing to work on embedded docs this week, will try and handle this as well.\n. Copy-pasting into dev, thanks! Unless you want to make it a pull request, let me know :)\n. Thanks @edubkendo, excited to take a look. Will get back to you this next week.\n. Fuck yeah brother, this looks awesome!\n. We should definitely add unit tests, and once the feature set starts stabilizing we'll start making the PR process more standardized (having some unit tests and whatnot).  In the short term I'd rather have contributions like this than worry too much about testing though.  Unless testing comes naturally to you which is even better.\n. Sounds good, \"port all rails tests\" is on the roadmap :)\nOne of Tower's goals is going to be to teach all new coders how to be rockstar unit testers from the start. Unit testing is pretty hard to learn how to get into the flow with, so we'll all have to fix that.\n. I'm torn on this one. Most projects have the documentation on their website (ember, rails, jquery for example). A few have it on the wiki (homebrew, d3.js). But people are able to contribute to projects like rails' docs, so contribution is not affected by whether or not it's using a wiki.\nI think we should probably just remove the wiki and put the wiki content into a separate repo, like tower-docs (similar to https://github.com/lifo/docrails). The main issue is that google indexes the content in the wiki but not in the repo. If there was some way to prevent google from indexing the wiki that might make it less confusing. But I get what you're saying, it's confusing now. The docs are incomplete and changing fast right now because of all the development going on. I'm going to refactor the docs soon.\n. Working on a much more robust solution to this.\n. Docs coming in the next month or so, stay tuned.\n. This isn't an issue anymore I don't think. If validations do fail, it will respond with an error code. Reopen if it's still an issue.\n. Hey, the partial method is tailored to Coffeecup currently. We need to add support for the other template engines (or hook into the built in express version). If you'd like to do this I will definitely merge a pull request, otherwise I'll be getting to this in a few weeks.\n. Everything is going to be in handlebars in 0.5.0.\n. Not sure... what version of NPM and node are you using? I haven't tested it myself on Lion yet either.\n. Can't tell from the error message, can you paste any more (such as node-debug.log if there is one)? Try generating again?\n. Can you list out all of the versions of your NPM modules you have installed, both locally and globally?\nnpm list\nnpm list -g\nHere are mine for npm list: https://gist.github.com/2b377dbb7e53dad322e0 (I'm using \"tower 0.4.1\", which is the dev branch, but the dependencies are still the same).\n. I think it probably has to do with that. I recommend trying to install specific versions of modules until it works :/ this will be simplified/fixed in a little while when dev is merged into master. But for now, try doing things like:\nnpm install superagent@0.4.1 --force\nIf you find the solution please post. Hope that helps.\n. Anything in particular fix this? Going to close this unless you're still having issues.\n. Ember is just about to release 1.0: packages/ember/package.json.\nI've been working on file uploading and authentication and am just about finished with that (doing embedded documents this week), in the dev branch. After that I am going to update Ember on Node to use the latest (and try and get them to merge the npm/ember pull requests), and update Ember on the client. Then dev will be in master. I'd say in the next month or so this will all be updated.\n. This is fixed in dev. It's all working, try it out and let me know!\n. Thanks!\n. Awesome. Yeah, there's a lot to do still, feel free to send pull requests whenever. I'm working purely in the development branch now and won't really mess with master until the model layer in dev is working well, which might take a couple more weeks. If you create pull requests for master, I'll merge them in when I merge dev back to master because you're finding things that I haven't noticed in master or dev :) thanks! Since the code base is growing so fast I'm not too rigid about writing lots of tests, but if you do all the better. As the project stabilizes though tests will be key. That's it for now, looking forward to your contributions.\n. Try clearing your global npm cache and reinstalling some of the modules:\nnpm cache clean -g\nnpm uninstall forever tower -g\nnpm install forever tower -g\n. That's cool, didn't realize that was there. The major reason you'd want the actual createdAt field is to be able to query over it:\ncoffeescript\nApp.User.where(createdAt: '>=': _(2).days().ago().toDate()).all()\nIf there wasn't a field like that, we'd have to create a special adapter to convert createdAt into some query function for the id, which I don't even know is possible (or optimal). If it is possible to query the date from within the id let me know, otherwise it's too much a performance hit for this optimization. Closing the issue for now.\nYou would use this optimization for things like metrics though, will be implementing something like this after 0.5.0: http://engineering.foursquare.com/2011/02/09/mongodb-strategies-for-the-disk-averse/\n. Something isn't right with App.ApplicationController.ApplicationController.\n. Closing this issue unless there are still issues with it.\n. I haven't checked in a while (gearing up for merging dev into master, and things are somewhat different), but there is a public/javascripts/app/views/templates.js that gets generated with all of your views compiled in there. They can be used in a controllers render method like you would on the server, just make sure templates.js is loaded in a script tag (or add to config/assets.coffee, /app/views/templates.js). You can use it with render like:\ncoffeescript\nclass App.PostsController extends Tower.Controller\n  index: ->\n    App.Post.all (error, posts) =>\n      @render 'index', locals: {posts}\n      # also may want to try these:\n      # @render 'posts/index', locals: {posts}\n      # @render 'app/views/posts/index', locals: {posts}\n      # @render 'index', locals: {posts}, (error, body) => $('#container').append(body)\nThe templates are all stored in Tower.View.cache.\n. Just pushed a lot of new stuff to dev, rendering now works pretty differently (same API, but I don't think this issue is relevant with the new code). If you're still having issues with this let me know. Closing for now.\n. We shouldn't use a --no-static option b/c that makes it a little more difficult for the newcomer, and they're the one most likely to be confused by why their root route isn't working right.\nI haven't thought that much about having a custom .towerrc file, will consider it more over the next few weeks. But I would like to try to avoid that b/c there's already too many vendor-specific dotfiles in the community, and to me it would make tower feel less flexible for some reason - like we have all these custom build scripts and configuration to get it working. What do you think? Maybe in the future with a larger/regular community, then adding that would feel like the next logical step.\nI don't know what Foundation is, will check that out! If it's an alternative to Twitter Bootstrap we should reconsider including it. I'm over the default Twitter Bootstrap design. Soon we should create a simple/plain \"tower generated app\" twitter bootstrap theme, and use that for this index.coffee file, all put into app/client/stylesheets/application.styl. We should be able to use the same set of styles - minimal minimal styles, like what express gives you, maybe a little more :) - for the default error pages as well.\n. We should add a command-line option for saying either \"no css framework\" or which one you want (bootstrap, foundation, etc.). Something like src/tower/server/command/new.coffee#L20 (it's not implemented anywhere).\n. Closing this since we should implement generator options rather than static html.\n. Thank you for this, very nice!\n. Will do.\n. Interesting take. I've decided to go with 0.0.1 in the past for two main reasons:\n- I like to be further along than people think :), and I thought it was inauthentic (not the right word, something like that, \"cheesy\" maybe) when I ran into gems/plugins that were 0.1.0 that you could tell were just generated from jeweler or whatever along with git commit -m 'first commit'. \n- Subconsciously I expect 0.1.0 to have some unique value and work put into it beyond what an app/plugin generator/template gives you. It's saying \"I've put the effort in to get out what I consider an initial release\", whereas 0.0.1 is \"I just generated this thing\".\nLet's wait and see how others feel about it before we finalize anything.\n. On a side note, we need to also setup the ability to make custom generator templates, along the lines of rails_wizard (not the website, just the configuration part). Others are:\n- https://github.com/RailsApps/rails3-application-templates\n- https://github.com/viatropos/rails-pages\n- https://github.com/intridea/rails_wizard/ (the link's cut off with github's edit button in the corner...)\nSo you could do:\ntower new myapp -t https://raw.github.com/someone/my-tower-templates/master/my-base-template.coffee\nAnd that gives you your custom template.\n. Yeah we need to work on this. One of the big things is forever/hook.io/design.io, I think forever or one of those installs a ton of things.\nAlso, the after hook for the custom coffeescript installation takes a while, not sure why (I think it may be compiling or something). We can fix this by making it so the npm version of tower is pure JS (compiled coffeescript).\nWill work on this in the next few weeks, let me know if you find anything.\n. fixed now.\n. Sugar.js is pretty cool (especially since it basically brings Ruby's ActiveSupport to JavaScript), but I don't think Tower should advocate extending core objects since it's generally not accepted best-practice in the JavaScript community. Instead we should make this all available as underscore helpers.\nI got into trouble with extending core objects in Ember and found jQuery has decided as a team they won't help with bugs that arise from that:\n- https://github.com/emberjs/ember.js/issues/1169\n- http://docs.jquery.com/Won't_Fix#Object.prototype_Issues\n- http://erik.eae.net/archives/2005/06/06/22.13.54/\nInstead, we should have a page on the website/wiki for \"useful\" plugins/modules that includes this one.\n. Sounds good.\n. For the record I personally don't mind extending core objects, that's commonplace in Ruby and a big reason why you can create such clean apis in it. The main reason (from that old link above, and others), is in certain edge cases you ultimately run into, it causes JavaScript not to work like you'd expect, and some plugins/modules might have been built upon that edge case working a certain way.\nI'll take a look at how Sugar.js avoids this in a few days, would be interesting to see how they avoid problems. \nBut the main thing is that, while they may have figured out ways to prevent problems, if we were to advocate extending core objects, people would eventually write code that causes problems. I'm going with the jQuery (and \"JavaScript community in general\"'s) decision to not do this, b/c you know they probably debated about it for years and thought about implications in a ton of different browsers. We should definitely have a good reason why ourselves as well, and create a page in the docs/site that outlines why we came to this decision.\nIdeally the docs will have clear descriptions of all the ways we thought about how to implement something and the pros and cons of each and why we chose what we did in the end. This is one thing I would have loved to have while learning to code, it would have saved a ton of time.\nIn terms of finding the cleanest API, there's no doubt that sugar has a better api than underscore. I was going to use sugar when tower first started b/c of that. But sticking to the principle \"never extend core objects\" left me to try and get the same API joy out of underscore, and I have. The API is not that much different:\n2.days().ago()\n_(2).days().ago()\nPlus you know \"all helper methods are on the _ object\". It's clean, and it keeps the code super organized.\nMaybe down the road, after everything else is working well and we've had a lot of time to write down the pros and cons of extending core objects, we can make a module that extends prototypes that you can opt into (someone will eventually make this anyway). But for now let's go by the principle \"no extending core objects\", just do underscore helpers.\n@edubkendo we're using that underscore.string library in tower already! :) so happy somebody made that.\nThere's a ton of string and other helpers in here as well (and plenty of room for optimization). Check it out:\n- a bunch of helpers for dates, checking if strings match common formats, formatting currencies and numbers, sanitizing strings (xss), and inflection... and soon some sort of string masking functions (to aid in form input masking): https://github.com/viatropos/tower/blob/master/src/tower/support/format.coffee (added with _.mixin at the bottom)\n- and underscore.string! https://github.com/viatropos/tower/blob/master/src/tower/server.coffee#L4\n- side note, all the other ./support/*.coffee code (also underscore helpers) is in need of refactoring as well\nThere's a lot that needs to be done with those, simple stuff such as I think you can only use days on dates, but we need to add:\njavascript\n_(2).seconds().ago()\n_(2).minutes().ago()\n// hours, weeks, months, years, beginningOfSecond, endOfSecond, beginningOfMinute, etc...\n// and a lot of other nice things from active_support/core_ext\n. This is a tmp hack to make debugging easier in development. It's a valid if statement (for one-liners you don't need curly brackets if that's what you mean). If './lib/tower.js' exists (it will if you've compiled tower with design.io), then it'll use the javascript files, otherwise the coffeescript.\nIn the end, I think it should be such that the NPM version only gets the JavaScript version, but in development you should be able to do both.\n. merged this stuff, thanks man.\n. Yeah, we definitely should reduce the amount of code downloaded for a new app, what's there now is temporary. Haven't seen Vendorer before, interesting idea. I'm down for that.\nI've also been thinking about moving something like cached-commons to node, making it work like the NPM registry or rubygems.org, so in the end there's a standard way of pushing your (any) JavaScript library to this CDN (cdnjs is doing a similar thing). The issue with those two now are they require manual intervention - they should work like gem or npm, e.g.:\ncdn install jquery # install jquery\ncdn publish # publish the library the current directory\ncdn list\n...\nIt can work off of package.json. It should be straightforward (and fun) to implement, really want to see this implemented at some point. It can use cloudflare to freely cache the libraries.\nIn the end, this would mean you really can do without downloading any libraries, making your source code that much more lean (the same way most people I think don't download jQuery, just point to google's hosted version).\nThe vendorer solution might be easier/faster to implement, maybe we should create a roadmap?\n. Sounds good! An older roadmap is in the docs: https://github.com/viatropos/tower-docs/blob/master/en/roadmap.md, will move that back to the wiki soon.\n. Bower is now taking care of this: http://twitter.github.com/bower/\n. +1 what @edubkendo wrote\n. The generator has been updated and is using ember, a lot of this has changed. Try it out and let me know if this is still an issue.\n. Nice one. This is the main/big thing I'm working on right now, making the dirty attributes functionality much better. There's a few things that seem to be off, and I want to get rid of that Tower.Model.Data object. Hoping to finish refactoring/fixing this stuff in the next few days. Any help would be awesome, let me know.\n. Also, reload is a method (in case the above isn't pseudocode), so it should be t.reload().\n. FYI, the issue is kind of complicated. Here's a couple of things.\nFirst, the new api isn't going to use new App.User, because Ember doesn't allow this (I asked if they could change but they basically said no). To construct a new Ember.Object they use Ember.Object.create(), but since create on a model is for saving it to the database as well, Tower is using build:\ncoffeescript\nuser = App.User.build(email: 'example@gmail.com')\nThe issue with new App.User(props) is that the mixins in Ember don't get applied.\nThen for the dirtyAttributes... There are two ways models need to be constructed:\n1. Manually, where the developer writes App.User.build(props)\n2. Internally, when you serialize a database record to a model. This (is going to) have the API App.User.build(props, isNew: false). Rails does this as well but it's not very clean/well documented.\nThe reason for this is b/c it changes the way attribute changes are tracked (since initial attributes are different). Right now, the issue is that, while Tower is handling serializing the already-saved attributes properly (so they don't act as changed values), it doesn't track the changes \"properly\" in some cases (this is what I'm figuring out/solving now).\n. Yes I think the documentation for views is out of date. A lot of the view stuff is going to be changing in the weeks ahead, stay tuned. For now I recommend just using plain tag helpers for coffeecup (or ECO/EJS).\n. Yeah, I don't think we have landed on a clear set of cases this method should support, we should do that. What do you think?\n. Yeah, but we don't necessarily have to stick to mongo's api since tower's api will be the same for every database (once they are supported). We can add those extra things that make intuitive sense.\n. Hey @scottkf if you get a chance (and you're not already) checkout the development branch and test it out, I'm planning on merging it this week or the next and publishing all the new stuff. Thanks man.\n. yeah we need a way to fix this. do the tests still pass with this pull request?\n. Fixed with #c0926e7af69ec371e282713ad5ab7f7f3d7fdb5d\n. Thanks for pointing out, updating the docs for the next release. Use:\nnode server.js\n. After dev is merged into master, the master branch is going to be what dev is now. At first I thought master should be the same as what's installed with NPM, but the community doesn't seem to do it this way. Instead we'll have version branches like Rails does, and master will be edge.\n. @avaranovich Good to know. There's a lot of room for improvement in getting started working with the source code. Will focus on this in the upcoming weeks.\n. This should be much easier now and is outlined in the readme: https://github.com/viatropos/tower#contributing-to-tower\n. @scottkf Not sure what this is, but it seems like it's one of these:\n- What's your Ember version for the client? Maybe this is out of date\n- What does the generated JavaScript look like for profile.coffee? It may be the coffee-script branch is off.\n- I haven't tested computable properties that observe associations (i.e. .property('posts')), so there may be some issue with that. Maybe try changing that to property('name') or some other \"simple\" property and see what happens.\n- Just to make sure, you're using the generated tower@0.4.1 in ./dist/tower.js from cake build?\nThat's all I can think of off the top of my head. Let me know if you figure it out.\n. I see, so the generated code is this?\njavascript\nProfile.prototype.playedCount = Ember.computed(function() {\n  return this.get('ownerships').count()\n}).property('ownerships');\nIf so, that's the issue. It means it's not using the custom coffee-script fork. Try running:\nnpm install git://github.com/viatropos/coffeecup.git --force\nnpm install git://github.com/viatropos/coffee-script.git --force\nnode server\nThe generated code should look like this:\njavascript\n__defineProperty(Profile,  \"playedCount\", Ember.computed(function() {\n  return this.get('ownerships').count();\n}).property('ownerships'));\n. > Though it would be convenient, for people new with ember and tower, for Tower to be able to use the simple definition without using Ember.computed and .property.\nWhat did you mean by this? Not quite sure...\nOn another note, we are going to start having a new api for defining models that works similar in convention to ember and other javascript libraries. It's going to be the default API, and you can opt-into the coffeescript/executable-class-bodies version if you'd like.\nSo something like this will be the API:\n``` coffeescript\nApp.User =  Tower.Model.extend\n  email:    Tower.field('string')\n  posts:    Tower.relation('hasMany')\nthe above will be equivalent to this:\nclass App.User extends Tower.Model\n  @field 'email'\n@hasMany 'posts'\n```\nThe two main reasons for this are:\n- it will be usable purely in JavaScript (executable class bodies are tedious to write without coffeescript)\n- you won't be required to use the custom fork of coffeescript\nThe full \"JavaScript API\" needs to be fleshed out (defining validations, callbacks, etc.), but it should be straightforward. Note though, the coffeescript api will still exist, but it is probably going to require a command line flag when generating a new app, such as tower new app --coffee-classes or something.\nIf you guys would like to help I have started hacking away on this in the javascript-api branch.\n. This works if you send the data as JSON:\njavascript\n// the serialized version of this:\n'/posts.json?{sort: [\"createdAt\", \"desc\"]}'\n// this is done using something like this:\nencodeURI(JSON.stringify({sort: [\"createdAt\", \"desc\"]}))\n// which looks like this:\n\"%7B%22sort%22:%5B%22createdAt%22,%22desc%22%5D%7D\"\nNeed to handle the case where it's a human-readable url.\n. I just posted that from memory (pseudocode). You can see the actual queries generated in the web inspector's \"Network\" tab (in Chrome), when you do things like this:\njavascript\nApp.Post.where('title', 'Y').desc('createdAt').fetch()\nThe network tab is saying the /posts url is this:\nhttp://localhost:3000/posts?sort%5B0%5D%5B%5D=createdAt&sort%5B0%5D%5B%5D=desc&conditions%5Btitle%5D=Y&format=json\nNot sure how this is serializing exactly, it's done by jQuery.\n. Really, the commands should be as fast as possible, so they don't even need to use the Tower.Command syntax, it can just be straight up functions like module.exports = (argv) ->.\nThis also entails lazily requiring tower core modules when necessary.\n. Started on this, the tower new command loads close to the minimal amount of modules it can:\nhttps://github.com/viatropos/tower/pull/329\n. Run make build to build dist, and if given commit access to tower make dist will upload it to:\nhttp://cloud.github.com/downloads/viatropos/tower/tower.js\n. Yeah this is actually the real issue. That means you need to run design.io start in some other terminal window, which will start the socket server for live updates.\nBut... design.io is bulky and old school, we made it before the node watcher really worked, and before tools like Grunt.js, etc. We need to get rid of it and build/integrate something simpler/faster. I think design.io was one of my first node modules, and I've learned a lot since then.\nWe should try out grunt. But to get live updates, I think the easiest thing will be to refactor design.io so it:\n1. doesn't use ruby, just node\n2. works on windows (in addition to mac/linux)\n3. doesn't use a separate server, has access to the same environment as your running tower app.\nWe were trying to be too ambitious with it up front, making it so you could have 1 global socket server and could register any number of \"projects\" (directories) to be watched which could reuse the same socket server. It requires too much magic, and in order to make it be performant, it would require a lot more time and effort. Eventually we may end up there, but for now we need to simplify this a lot. Design.io is one of the main things causing problems getting started.\nI want to work on this as soon as possible.\n. Man, grunt is awesome. Really enjoying it @activestylus. I just got the tower source working without design.io: \nhttps://github.com/viatropos/tower/blob/grunt/grunt.coffee\nGoing to try and get the whole build process down today, then see what it would take to make the generated apps use it too.\n. Sweet!\n. Let's keep the last one.\n. No this is good, keep posting! Send pull requests as well, that would be super helpful. Thanks man.\n. https://gist.github.com/3422483#comments\n. nice, will take a look.\n. If you could do this that would be fantastic. All that really needs to happen is to wrap the core mongodb async calls in a fiber/future, the code in tower-store/server/mongodb. There's probably a few other filesystem/http async calls, but not much. Should be straightforward once node fibers are understood, let me know if you figure it out I'm interested.\n. To make the callback chain run in a fiber can you just put the fiber wrapping code in the runCallback method?\npackages/tower-support/shared/callbacks.coffee#L61\n@scottkf if you get started on anything send me a link I'd love to help out.\n. Let me know when you push your stuff, it will be easier for me to see what you're describing.\n. Interesting, I can see the REPL context part being complicated. I'll check this out in a bit, keep moving though it looks like you're gonna get there pretty quick.\n. @scottkf started messing around with your code, thanks for plowing through that eval stuff, was super helpful. got this working:\n``` coffeescript\nmodel/cursor/finders.coffee\nfind: (callback) ->\n    Future = require('fibers/future')\n    future = new Future\n    @_find (error, result) =>\n      future.return([error, result])\n[error, result] = future.wait()\nthrow error if error\nresult\n\n```\n``` coffeescript\ncommand/console.coffee\nrun: ->\n    repl    = require(\"repl\")\n    repl    = repl.start\n      prompt:\"tower> \"\n      useGlobal: true\n      context: @\n      eval:(cmd, context, filename, callback) -> \n        cmd = cmd.slice(1,-1)\n        Fiber(->\n          try\n            callback(null, eval.call(context, cmd))\n          catch error\n            callback(error)\n        ).run()\n```\ntower> App.Post.all()\n[ { isNew: false, errors: {}, readOnly: false },\n  { isNew: false, errors: {}, readOnly: false } ]\ntower> var p = App.Post.all()\nundefined\ntower> p\n[ { isNew: false, errors: {}, readOnly: false },\n  { isNew: false, errors: {}, readOnly: false } ]\nWill try and clean this up a bit.\n. Building off your sync branch:\n- https://github.com/viatropos/tower/tree/sync\n- https://github.com/viatropos/tower/commit/7a0a3eee9734dab7fbb32bc2c53f25ed760d1389\n. merged! we need to add console options and such still.\n. Side note, you can make things synchronous in the web console too by setting jQuery's async to false, which for the model layer is done in this [to be cleaned up] way:\n```\nadd too app/client/config/bootstrap.coffee \"bootstrap\" method:\nTower.StoreTransportAjax.defaults.async = Tower.env != 'development' # false if development, so it's sync.\n```\n. Going to close this, looking good to me. Great work! If issues come up with it we can open those separately.\n. This looks like it's old code, haven't yet pushed master to npm.\npackages/tower-generator/server/generators/tower/app/appGenerator.coffee#L135\n. Fixed, 0.4.1 is pushed to npm.\n. @activestylus This is something that should definitely be built in and easy to modify.\nI've also used https://github.com/norman/friendly_id in the past and it modified find so it could handle slug if I remember correctly. But that's probably not the best way to do it.\nI like having toParam in the model to convert it to a param, but it seems that having some method like @toParam 'permalink' in the controller might make sense too - where it would basically override the findResource to use where(permalink: @params.id)..., something like that.\nSend me a pull request and we can work off that if you'd like.\n. You're the man, thanks!\n. @Maedi great points. This is definitely something to think a lot more about.\n. @adamjacobbecker The main thinking behind converting the CS to JS are to streamline development and to make tower's source accessible to the plain JS developers (of which there's potentially ~5x as many from looking at the GitHub language breakdown). We can convert it by just using the generated JS. I might make a few \"style\" changes to the generated JS, but other than that we wouldn't be spending much time on it.\n@viotech @maedi and @adamjacobbecker I agree with you all that the CS version looks super nice. However we're facing a couple of challenges with that API (and CoffeeScript in general) that's getting in the way of development. Mainly:\n1. We have to spend a lot of time debugging CoffeeScript when new users start trying to use the app.\n2. The CS extensions we've created (./coffee-inheritance.js) aren't compatible with CS 1.4.0 and need to be updated.\n3. I haven't figured out a good way to have the \"executable class bodies\" that CS allows work well with the Ember.Object.extend API (which is how most JS APIs are written).\n4. Since the client is more complicated than the server in some cases (mainly, routes), the extend({}) syntax is better than the DSL in some cases (and the number of cases it's better in seems to be growing).\n5. Having to compile the CS is a turnoff to a large amount of potential contributors, and it also slows down TDD - to develop new features for the client we need to compile files individually and use something like Require.js, but we're not there yet so we have to wait for the entire project to compile for every change! (maybe this is just me though, definitely open to suggestions).\nThe first issue takes a way a lot of time/energy/thought from actual development. If we can get rid of this issue somehow (any ideas?), then that would be a huge plus. It pretty much means solving the other 4 challenges.\nFor the second, there is an issue with the current implementation when you minify the generated JS for production. This would take a few days or a week to fix since I am no expert in language grammars.\nThe third issue is the biggest. Mainly, there needs to be a clear way to append attributes/methods to the prototype (I think it's accessible through Ember.Object.proto()), but should be added as a mixin. Take the model definition now:\ncoffeescript\nclass App.Post extends Tower.Model\n  @field 'title'\n  @field 'text'\nCurrently that is creating 2 mixins, and for every new field it will create a new mixin. That's because @field is essentially just doing @reopen(title: new Tower.Model.Field) for each field. I tried optimizing this by hacking into the last mixin, but it's very brittle and I don't know if there are ways this could cause unpredictable errors. You can see how I did this here:\n- packages/tower-model/shared/attributes.coffee#L45-47\n- The hack: packages/tower-model/shared/attribute.coffee#L153-158\nSo currently that hack works, for the simple case of defining fields on initialize. But the problem is if any of these:\n1. If you define fields at run time (after Ember is initialized) we may need to \"invalidate\" the class' mixins. I'm not sure about this, but to find out we need to write some tests (or deeply understand Ember's source) so we know we don't have to invalidate them. This takes time, it could take a few days to resolve this.\n2. There's issues doing it this way with binding and computed properties that I've run into that were hard to debug (can't recall exactly), so I never dug in further. But it had something to do with auto-updating associations when a record in the system changed I think.\nSo at this point you can see, a lot of the time I've been spending (or thought's I've had to think through) are how to get CoffeeScript APIs to play nice with JS APIs - or, specifically, Ember. One thought is that changing the source code to JS would eliminate this entire field from thought, so I can start focusing on core functionality.\nThe final issue is that things like the routes look better using the Ember.Object.extend API vs. the Rails-like DSL:\n- https://github.com/viatropos/tower/pull/299\nSo at first we started with these APIs using the Rails-like DSL:\n- routes\n- models (fields/associations/validations/callbacks)\n- controllers (params/scopes/callbacks)\nBut now that we're thinking of doing the router with the JS/Object API, we're down to just models/controllers using the DSL. But because we're also thinking about changing the functionality of the controllers (see that routes pull request above), and moving the \"actions\" to the router itself, then we don't need callbacks in the controllers anymore, and we also can get rid of the class methods param and scope so you just create a new controller for the scopes, and params are defined in the router (also detailed in the routes pull request).\nThis means the controller doesn't have any \"executable class bodies\" anymore; it doesn't need them.\nSo now it's just the models.\nI agree the field/association definitions look nicer in CS. But this is the only part of Tower that uses it. And in JS, it is very verbose. Then you add on top of these 2 facts the items from the list above (time spent debugging CS for newcomers, our custom CS extensions not up-to-date, and the non-ideal-ness / performance-loss of creating a new mixin for every field definition), it seems like a waste of time/effort to keep that CS API.\nI personally don't want to work on that atm, I am working on some projects applying Tower and find it is easier just writing the code in JS even if it's not as pretty. However, if the CS API was all working well and we didn't have to spend time regularly making sure it still works, and it was just as optimized as a JS equivalent, then I would probably use it. If any of you want to take the lead on that I will be there to help whenever you need it. Let me know.\nThoughts?\n. @edubkendo interesting notes about coffeescript redux / source maps, will have to check that out at some point.\nI think I've been confusing terms when talking about CS/JS with Tower. The main thing I'm concerned with is that the \"executable class bodies\" part of the CoffeeScript API is not working very nicely with Ember. And when I've been saying \"JS API\" I don't mean writing the code in JavaScript, but rather, using the \"object\" API (or whatever we want to call it), which can be written in CS too:\ncoffeescript\nApp.Post = Tower.Model.extend\n  title: Tower.Model.field('string')\n  body: Tower.Model.field('string')\n\nNote, the API in that code is not the final API, just ideas atm.\n\nWhat I meant by \"moving from CS to JS\" is basically removing the executable class body API. So, the default for a generated tower app could still be CS, I'm cool with that. But the main issue is, unless we can get the executable class body API in CS to be just as good/error-free/optimized as the \"object API\" (above), then when you generate a tower app it should generate \"object API\" code like above rather than the current executable class body api:\ncoffeescript\nclass App.Post extends Tower.Model\n  @field 'title'\n  @field 'text'\nGetting rid of the executable class body API would make it so we can use plain-jane coffee-script. The main thing we need to decide on, then, is an \"object API\", and if everyone's cool with either 1) getting rid of the \"executable class body API\" in favor of the \"object API\", or 2) having both APIs, and defaulting to one of them.\n. Really, we could do the executable class bodies API as well, it would just take a decent amount more time to implement a more generic extension module for coffeescript, where we can more easily make changes. This would also set us up to hook into other x-2-js languages.\n. Not going to change the source or tests to JavaScript until after we try using CoffeeScriptRedux (thanks again for pointing out @edubkendo). If the compiler is as extensible as it seems to be (it doesn't seem to be complete yet https://github.com/michaelficarra/CoffeeScriptRedux/issues/101), then this could open up a lot of doors. Also, I want to try the new grunt watcher and see if we get significant performance improvements.\nIf we can customize the coffeescript compiler, and the watcher doesn't use up a bunch of memory, then it might mean keeping the source in coffeescript could be easier than javascript. Right now its kind of painful though, after a while.\n. We are moving to JavaScript. It's so much more powerful, and I don't think CoffeeScript will be around much longer with ES6. The main thing is, plain JS is much much faster than CoffeeScript. It will lower the barrier to entry as well.\n. This is on the todo list, it gets tricky in some situations b/c of process.on('uncaughtExecption'), which doesn't give you the context of the error so makes it obtuse. Going to fix soon, would love help on this.\n. Not sure I fully understand. Tower doesn't have a built in logger system yet, but you can just use console.log and console.error, etc. Eventually we need to implement/integrate better logging.\n. If you want to take a stab at making/integrating a better logger, let me know and I'll do what I can to help out.\n. Ah, thanks for pointing this out. You're right, we haven't handled this yet, only the resources ones. This area needs a lot of work.\n. Thanks, this just broke when switching from design.io to grunt. Will get to this in a bit.\n. This is fixed now (in master, not npm): https://github.com/viatropos/tower/commit/26766e3e72358174234d956dea00abc1f092e731\n. If you have generated an app using an older version of tower, and are asking how to upgrade it to the new one, you can use the nice one-click installer found here: .\nHaha, no you just have to manually make the changes, no real clean way to do it. It should be straightforward though, most of it's the same.\n. I am able to get running with this:\ngit clone https://github.com/viatropos/tower.git\ncd tower\nnpm install\nnpm link # this makes it globally available\nmake watch\nThen in another window:\ntower new app\ncd app\nnpm link tower # link it to the git repo just installed\nnpm install\n. Other things that you need to change when upgrading an existing project to the latest stuff:\n- First, generate a new app, just so you can grab the files from it.\n- copy/paste ./grunt.coffee from the generated app to your existing app\n- copy/paste ./vendor/javascripts/tower.js\n- copy/paste ./vendor/javascripts/ember.js\n- copy/paste ./vendor/javascripts/handlebars.js\n- really, just copy/paste the vendor directory probably.\n- copy/paste ./test/client.coffee (new stuff removed design.io)\n- copy/paste ./config/assets.coffee (or just remove design.io, and make sure ember and handlebars are in there)\n- remove Watchfile from your existing app\n- remove anything matching design.io in old ./package.json\n- add anything matching grunt in new ./package.json (grunt-less, grunt-stylus)\nFinally, look at your ./config/application.coffee file (if you're existing app was using tower v0.4.0), and compare it to the newly generated app's ./config/application.coffee and ./config/bootstrap.coffee. Essentially, move everything in the old @configure -> block into App.configure -> inside ./config/bootstrap.coffee. All that should be in application.coffee is the namespace declaration.\nTo compile assets in the new app, run this watch command in another window in the project directory:\ngrunt start --config ./grunt.coffee\nTo run your new app:\nnode server\n. Thanks for posting. This was some of the first code I wrote and this specific thing was just hacked in there, been meaning to come back to it. It seems this needs a much more robust solution, not sure though.\nCan you send a pull request?\n. Done\n. This is done. Now you can specify the set of databases allowed, and the default database, in the Tower.Application#initialize method. If you don't want to connect to any databases, just use the memory store:\ncoffeescript\nTower.Application.instance().initialize(databases: ['memory'], defaultDatabase: 'memory')\n. Installing mongodb on windows: http://docs.mongodb.org/manual/tutorial/install-mongodb-on-windows/\n. javascript\nvar s = 'C:\\\\www\\\\Projects\\\\app\\\\app\\\\views\\\\index.coffee'\nvar p = new RegExp(s)\nconsole.log(s.match(p)) // null\nThat's the issue, need to escape better.\n. javascript\nvar s = 'C:\\\\www\\\\Projects\\\\app\\\\app\\\\views\\\\index.coffee'\nvar p = new RegExp(s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\"))\nconsole.log(s.match(p)) // [\"C:\\www\\Projects\\app\\app\\views\\index.coffee\"]\nOr better:\njavascript\nvar s = 'C:\\\\www\\\\Projects\\\\app\\\\app\\\\views\\\\index.coffee'\nvar p = new RegExp(_.regexpEscape(s)) # tower helper\nconsole.log(s.match(p)) // [\"C:\\www\\Projects\\app\\app\\views\\index.coffee\"]\n. Or to test this string, should I be doing this?\njavascript\nvar s = 'C:\\\\\\\\www\\\\\\\\Projects\\\\\\\\app\\\\\\\\app\\\\\\\\views\\\\\\\\index.coffee'\n. @luckysmack is this working for you?\n. So is this a general pattern for escaping file paths on windows?\njavascript\npath.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\")\n. Yeah Rubular is the best for sure, just was never sure about escaping double backslashes, and if the windows paths were single or double backslashes.\n. This seems to be working now, reopen if anything comes up.\n. Grunt is too slow.\n. Will get back to you soon with a detailed response.\n. Posting some links here (for perspective):\n- http://ninjasandrobots.com/html5-page-cache-with-pjax-localstorage-firebase\n- http://stackoverflow.com/questions/9237069/do-i-really-need-an-mvc-framework-like-backbone-js-or-ember-js-in-rails-for-a-si\n- http://asciicasts.com/episodes/294-playing-with-pjax\n- https://github.com/emberjs/ember.js/issues/161\n- http://cantina.co/2012/06/04/a-faster-web-with-pjax/\n- http://engineering.twitter.com/2012/05/improving-performance-on-twittercom.html\nTwitter and GitHub also use a kind of PJAX approach (twitter after trying client-side architecture).\nPros of PJAX:\n- Less javascript to download on the client (potentially much less). But this is only a performance problem on first page load or a forced refresh (which does happen often).\n- Better performance on mobile devices (since most browsers today can handle 500kb+ rich javascript apps just fine, but mobile struggles a little, with things like template rendering).\n- More optimized HTTP requests, since you get back pre-processed HTML that can be inserted into the DOM without any processing.\nCons of PJAX:\n[coming]\n. > but surely JSON over the wire for every secondary page is the fastest? Or is the \"downloading + processing\" time slower than downloading HTML?\n@Maedi We need to benchmark this. I suspect that it's probably about the same for laptop/desktop browsers, but that it's much faster to send HTML from the sever (instead of JSON) for mobile devices. The thing to note is, on the server, you can cache the generated HTML and JSON for a particular request, so assuming you have done that, rendering is basically \"instant\" no matter if you ask for HTML or JSON. So this creates two sub-questions:\n1. What is the size difference between the server's HTML and JSON responses for a particular request, and are these size differences significant? I imagine the HTML response can easily be twice as large as the JSON response (one thing to test), but that this doesn't add any significant time to the response (assuming everything is cached in memcached/redis, then if the response is 200kb vs. 100kb, that is only going to add a couple milliseconds to the response time - another thing to test).\n2. How long does it take to insert server-generated HTML into the DOM vs. compile the JSON into HTML then insert it into the DOM all on the client? I suspect there is no noticeable performance impact for simple HTML structures (simple lists/tables/etc.) on laptop/desktop browsers (something to test), but I suspect there to be a noticeable performance hit for even simple lists on mobile browsers (something to test), and a noticeable performance hit for more complex ui elements on laptop/desktop browsers (though this one is hard to test because you don't run into complex ui elements that often, at least I can't think of any).\n@d4tocchini We should definitely try to integrate both methods of rendering (client and server), and have Tower be intelligent enough to figure out when to use each. I like what you're saying there, will checkout that video. The main difficulty at this point is, if you have the server render the initial page (static HTML, the way twitter is doing it), I don't know how to get ember to then \"backtrack\" and convert that into an \"ember view\" (which you can do with knockout b/c they read the data-bind tags). Ember forces you to put the \"templates\" into <script> blocks, but to get the performance boost from the server generated HTML, you don't want to wrap it in script tags. The question is, if you did that, how do you get Ember to make those views? If we could figure that out then we'd be golden.\n. That's a good/interesting idea, haven't thought about that really. Will think about this more over time. It's all open ground.\n. No you can request additional data, just do:\njavascript\nApp.Post.where('active', true).fetch();\nThat will fetch matching records from the server. You can call that anywhere on the client, I think this issue was just asking if there was event built into ember or the controller or something like that, which you could then use as a hook to make a request like above. Going to close this, thanks for pointing out.\n. You'll be able to opt-in to grunt or brunch.io for 0.5.0. Tower won't be using either by default though, in order to increase performance.\n. This is actually partially implemented:\n- https://github.com/viatropos/tower/blob/master/packages/tower-model/shared/attribute.coffee#L158\n- https://github.com/viatropos/tower/blob/master/packages/tower-model/shared/validator.coffee#L4\nYou can use all of the keys defined in validator.coffee (though some of them haven't been tested):\nhttps://github.com/viatropos/tower/blob/master/test/example/app/models/validatable.coffee\nYou've added some other good examples to think about, this is definitely something to be fleshed out more.\n. ``` coffeescript\nconfig/routes.coffee\nTower.Route.draw ->\n  @resources 'users', ->\n    @resources 'posts'\napp/controllers/postsController.coffee\nclass App.PostsController extends App.ApplicationController\n  @belongsTo 'user'\n```\n/users/10/posts.json\n. The method is all caps: toJSON\n. Other note, the include: ['comments'] I don't think will work, that has not been setup yet.\n. We should, but there are notable exceptions. When a normally all-caps word comes first, it's all lower case, otherwise it's all uppercase:\njavascript\nfunction jsonPrettyPrinter() { }\nfunction toJSON() {}\nThis is a pretty standard convention.\n. Starting to store this in package.json: packages/tower-generator/server/generators/tower/app/templates/pack#L76.\n. Thanks for testing this out on azure!\nThat error code ENOSPC seems to mean \"No space left on device\":\nhttp://pubs.opengroup.org/onlinepubs/009695399/basedefs/errno.h.html\nIs there a limit to the number/types of files you can have on azure? Looks like it may be a problem with installing this file:\nremote: npm ERR! Error: ENOSPC, open 'C:\\DWASFiles\\Sites\\monk-luckysmack\\Temp\\npm-1346181260106\\1346181260481-0.1615335587412119\\package\\lib\\public\\icons\\page_white_compressed.png'\n. Tower now works on Windows Azure:\nhttp://tower-azure-test.azurewebsites.net/\nSome notes here:\n- https://gist.github.com/3815833\n- https://github.com/viatropos/tower/issues/316#issuecomment-9065515\n- https://github.com/viatropos/tower/wiki/Deploying-Tower-Apps#wiki-deploying-tower-apps-to-amazon-ec2 (just below)\n. I have done some testing and it has worked fine so far. Interesting...\nDoes it have anything to do with that \u20ac character? Also, maybe method is a special keyword (random things to try to debug).\nTry also running the mocha command directly:\nmocha $(find test -name \"*Test.coffee\")\n. What does your ./test/server.coffee file look like?\nAlso, if you get a timeout, maybe try increasing the duration of the --timeout option in ./test/mocha.opts, but it doesn't seem like that's the issue here.\n. Finally, try using the assert.equal method from chai, instead of should, I haven't tried should.\n. try pasting the output from npm list, maybe it's a library/version thing? also, what folder is that helper test in?\n(from irc, https://gist.github.com/3505316)\n. also, what os/node/npm versions.\n. I'm on:\n```\n$ node -v\nv0.8.2\n$ npm -v\n1.1.32\nOSX 10.6.7\n```\n. May be a coffee-script compilation thing? Try in the node cli:\n```\n\nconsole.log(require('coffee-script').compile(require('fs').readFileSync('./test/helpers/orderHelperTest.coffee', 'utf-8')))\n```\n. are you perhaps using tabs anywhere (vs. 2 spaces) for indentation?\n. Also try wrapping all the methods in parentheses:\n\ncoffeescript\ndescribe(\"App.OrderHelper\", ->\n  it(\"Should return the correct amount\", ->\n    value = App.OrderHelper.getPriceAsString(300)\n    assert.equal(value, \"3,00 \u20ac\")\n  )\n)\n- Try changing the file to JavaScript and seeing.\n- Try using no App specific code, such as just testing if 1 + 2 = 3.\n- Try returning undefined at the end of your it test function, maybe if it gets a return value something happens.\nBasically, I'm not sure, just try a bunch of stuff.\n. Also try multiple assert statements within the first it method, see if you can do that.\n. What's the state of this now?\n. Some more notes...\nI like the general structure of @krainboltgreene's comment, not necessarily the PAC (vs. MVC) subfolders however. The main issue with the integrated approach is that the top-level folders would also include folders that are really independent of either client or server:\nbin # not often, but sometimes\nlogs\npublic\ntmp\nvendor\nwiki # or docs\nSo, putting the model/view/template/controller/etc files into a top-level apps or app folder might be a good thing, in order to separate it from the other top-level folders that are independent of client/server distinctions. Because, this might be confusing:\nbin\ncontrollers\nlogs\nmodels\npublic\nstylesheets\ntemplates\ntmp\nvendor\nviews\nwiki\nInstead, this may be clearer (where models/views/etc. are in app):\napp\nbin\nlogs\npublic\ntmp\nvendor\nwiki\n. Looking into @luckysmack's comment: https://gist.github.com/1398757#gistcomment-396669\n. I am going to go try out this folder structure now:\n|-- app\n|   |-- config\n|   |   |-- client\n|   |   |   |-- bootstrap.coffee\n|   |   |   `-- routes.coffee\n|   |   |-- server\n|   |   |   |-- assets.coffee\n|   |   |   |-- bootstrap.coffee\n|   |   |   |-- credentials.coffee\n|   |   |   |-- databases.coffee\n|   |   |   |-- emails.coffee\n|   |   |   |-- jobs.coffee\n|   |   |   `-- routes.coffee\n|   |   `-- shared\n|   |-- controllers\n|   |   |-- client\n|   |   |   `-- applicationController.coffee\n|   |   |-- server\n|   |   |   `-- applicationController.coffee\n|   |   `-- shared\n|   |-- models\n|   |   |-- client\n|   |   |-- server\n|   |   |   |-- user\n|   |   |   |   `-- emailConcern.coffee\n|   |   `-- shared\n|   |   |   |-- post.coffee\n|   |   |   `-- user.coffee\n|   |-- stylesheets\n|   |   |-- client\n|   |   |   `-- application.styl\n|   |   `-- server\n|   |   |   `-- email.styl\n|   |-- templates\n|   |   |-- client\n|   |   |-- server\n|   |   |   |-- layouts\n|   |   |   `-- emails\n|   |   `-- shared\n|   |   |   |-- posts\n|   |   |   |   `-- index.coffee\n|   |   |   `-- users\n|   |-- themes\n|   |-- views\n|   |   |-- client\n|   |   |   |-- posts\n|   |   |   `-- users\n|-- data\n|-- logs\n|-- node_modules\n|-- public\n|   |-- images\n|   |-- javascripts\n|   |-- stylesheets\n|   `-- uploads\n|-- tests\n|-- vendor\n`-- wiki\nHere is the rationale behind some of the decisions (add more if you think of any that are left out).\n\nWhy so many client/server controllers?\n\nAt first we thought of top level client and server folders. But that makes it harder for the \"single dev\" to comprehend the entire app, because as a \"full stack\" developer, you're thinking of \"models\", \"templates\", \"views\", \"controllers\", etc., not of \"client\" vs. \"server\" and drilling down to \"server models\". You look for \"models\" first, then \"server\".\n\nWhy not put the files in the shared folder at the parent directory?\n\nThis makes sense to do in the models case, because you're going to be using most/all of the models on both the client and server (at least early on in your app).\nHowever, in the controllers case, the client and server controllers are very different (but they should both still be called \"controllers\"). It might seem strange if most of the controller code is found in server and client, and one or two files at the top level. This is because, in the models case, files at the top-level would be assumed most important / core to the app, whereas in the controller case they wouldn't.\nThe shared folder explicitly states \"these files are used in both places\"; it makes it clear, no ambiguation.\n\nWhy the top-level app folder, why not put models, views, etc. at the top?\n\nBecause then models, views, etc. would be mixed in with totally unrelated folders such as logs, bin, wiki, and public. Conceptually, those folders are unrelated to models/views/controllers/etc.\n\nWhy not optimize the client/server/shared folders for what's most common?\n\nThat is, since views and stylesheets are only for the client (at least as far as I can tell), templates technically are agnostic to the server and client, why not just have this?\n|   |-- views\n|   |   |-- posts\n|   |   |   `-- index.coffee\ninstead of this:\n|   |-- views\n|   |   |-- client\n|   |   |   |-- posts\n|   |   |   |   `-- index.coffee\nStill not 100% on this, but it seems that while having this \"less nested\" file structure is technically \"more optimized\", it leads to more questions that answers... Personally, my mind will look at the other folders and think, \"well, technically, most models are agnostic to client/server, so do the same for them, oh but wait in certain cases... etc.\". So, for now, all folders have this same structure.\nWas not 100% decided on this for the stylesheets, but if you think about emails, then those should technically be \"server side stylesheets\" (which will be converted to inline css, eventually).\n\nIn response to @luckysmack's comments on the gist.\n\nStill need to think about the top-level db vs. data folder. I like calling it data better personally. But the data/tmp folder shouldn't be generated, b/c having multiple tmp folders seems confusing. Instead, having somewhere in the docs/guides that using tmp folders is good practice might be good enough.\nAlso need to think more about a whole themes system. There should be a standard way of adding custom themes to your app, for these reasons:\n1. Sometimes front end coders like to mess around with multiple different themes for their app, and having a folder structure in place for this would be helpful.\n2. Maybe you want to have ipad, browser, etc. themes, for different devices.\nHowever, along those same lines, I am not a big fan of the idea of grouping models/views/controllers/etc. into \"plugins\" or reusable components (like the comments module). While this looks good and feels right conceptually, in my experience it makes it harder to code down the road. Really, the code never gets modular enough that it's a black box you can port to other projects without error. If it does get to that point, it's probably already an npm module (rubygem), and so can accomplish the same thing. Also, when I am fixing some model bug and it's relation to other models, I want all the models to be in one place; having them in a nested module adds too much overhead to that workflow.\n. #towerjs IRC?\nThere aren't any real good alternatives, and I would prefer not to use google groups. IRC and GitHub are ideal for me, what is best for you?\n. Done.\n. Yeah not sure about this one, let me know when you figure it out. Might want to check how/if rails does it. Maybe we can add some hidden file to look for, or just look up to the parent directories until the ls array lists some set of folders we are expecting, such as (pseudocode):\n``` coffeescript\n_path = require('path')\nfs    = require('fs')\ntestIfRoot = (path) ->\n  # first, the path must exist and be a directory\n  return false unless fs.existsSync(path) && fs.statSync(path).isDirectory(path)\n  # then check for package.json\n  return false unless fs.existsSync(_path.join(path, 'package.json'))\n  # then check for some key directories / files\n  return false unless fs.existsSync(_path.join(path, 'config/application.coffee'))\n  # if all pass, then we have the directory\n  path\nsetTowerRoot = ->\n  path = process.cwd()\nwhile !testIfRoot(path) && path != '/' # @todo some check to not traverse all the way to the root \"/\" path (windows and *nix)\n    path = _path.join(path, '..')\nTower.root = path unless path == '/'\n```\n. This is more robust now, you can do one of these:\n``` coffeescript\nThis can be set before any tower code is run, which is nice sometimes\nprocess.env.TOWER_ROOT = __dirname # or anything\nOr you can do it manually\nTower.setRoot(__dirname)\n```\nIt will also try to check up the parent change until it looks like a tower app.\n. Sweet.\n. Yeah that number is far too big, not sure if any computer can handle numbers that large.\n. Haha, totally kidding. No we need a more robust approach to parsing params:\nhttps://github.com/viatropos/tower/blob/master/packages/tower-net/shared/route.coffee#L80\n. can't do b/c server files are not added to the public folder for security.\n. Done, it was in the ./index.js haha.\n. The error is most likely because of the && in this postinstall script:\nnpm install git://github.com/viatropos/coffeecup.git --force && npm install git://github.com/viatropos/coffee-script.git --force\nWe had issues with that on windows before. It turns out the Mac supports && and ; as separators when running multiple commands on a single line. So you can also do this on a Mac:\nnpm install git://github.com/viatropos/coffeecup.git --force ; npm install git://github.com/viatropos/coffee-script.git --force\nI am not very familiar with Linux, if you try running either of these commands what is the output?\n. Here are some of the issues we were facing with that script on windows:\nhttps://gist.github.com/3442680#gistcomment-407106\nI may bundle this into a node script to avoid this in the future, but first let's see if we can fix it for your system. Let me know how it goes.\n. The latest version 0.4.2-1 doesn't run any postinstall scripts for the global version of tower, so you should be good. See https://github.com/viatropos/tower/issues/272#issuecomment-8522405 (and comments above) for more info, mainly about sudo since you're on linux and there's no homebrew :)\n. Going to use gaze and implement a few enhancements for 0.5.0.\n. Yeah this needs to be cleaned up and made more robust. Do you know of a better alternative to node-mime?\nI tried doing what you're suggesting a little while ago but it caused a bunch of the tests to fail (I'm pretty sure) so I switched it back.\ncoffeescript\n@headers['Content-Type'] = \"application/json; charset=UTF-8\"\nIf that works (or we can fix the tests) then that's great. Going to start making the controllers more robust in a few weeks or so, I'll get to this then unless you want to send a PR.\n. This is now fixed: https://github.com/viatropos/tower/commit/72acd23e6d3c8682bf00c54ccf269cc2a61c1b26#L1R22\n. What if you try without sudo?\nnpm install tower -g\nAlso, how did you install node? If you used a method other than HomeBrew then it could be some permissions thing I am not very familiar with. Also, what version of node/npm?\n. @edubkendo I think you're right on that, it's probably a git issue. In the short term we should make sure git is installed (note on the README), but eventually all the dependencies would ideally be installed from the npm link rather than git.\n. @rickcarlino was this because git wasn't installed?\n. @rickcarlino see https://github.com/viatropos/tower/issues/272#issuecomment-8522405\nIf you installed node.js from an installer and are installing modules globally with sudo, it's highly recommend to install node with homebrew. Homebrew will take care of any/all permissions problems you will have on the Mac.\nOther than that, 0.4.2-1 doesn't run any npm install commands when installing tower globally, so you should be good to go.\n. I think it needs to be a POST request, since req.body is only defined for POST requests I'm pretty sure:\nhttps://github.com/senchalabs/connect/tree/master/lib/middleware/methodOverride.js#L28\n. The main reason you'd need to use forms like you've outlined is to support browser environments without javascript. Tower should be able to do that eventually but that's probably a little ways down the road.\nTo do this just use Ember's patterns. So if the form example is a button from a row in a table of Order records, when you check Mark as paid it can run the client App.OrdersController#update method, which calls order.save(), which makes the PUT request. If you bind the check mark's value to the order.isPaid then calling order.save() will only send that key/value pair to the server (probably also updatedAt).\nNot sure how to do this with Ember off the top of my head, but it should be straight forward. Look at the (new) generated form in tower, to see how to bind the values if you're unfamiliar.\n. Closing this since this is part of connect.\n. It may be b/c the comma is missing:\n``` coffeescript\nchange this:\n@namespace 'api' ->\nto this:\n@namespace 'api', ->\n```\n. This is from cloning the repo right? If so, you must compile it. In the tower repo directory, run this:\nmake watch\nDoes that fix it? Maybe later we'll keep a .zip of the compiled js in lib hosted on GitHub Downloads or something, so if make watch isn't run it will still work.\n. This is fixed now, you can also install it from npm.\n. So this was just a git issue? If so I'll close it.\n. As a sidenote, I think we should get rid of the custom coffeescript. All we really need is the ability to have the instance/class methods added as ember mixins. https://gist.github.com/3709713.\n. @g-elke-wowbiz @SwarmShepherd try it now, npm now has 0.4.2-pre:\nnpm install tower -g\n. Did you install node with homebrew? It's some permissions error. Maybe it's a node 0.8.9 error, I'm on node 0.8.2. Hmm...\nMaybe the new OS doesn't allow piping commands like $(./bin/dependencies)?\n. Try it now, removed all custom --global postinstall scripts (0.4.2-1).\n. Ah that's probably it then. Not sure exactly but homebrew installs everything without root permissions I think, but the node installer may have asked to enter your password at some point, which would mean there's some protected paths. Wonder what happens if you do:\nsudo npm install tower@0.4.2-pree -g\nIf you can install node with Homebrew I would do that if I were you, it will make installing other things later much easier.\nGlad 0.4.2 is working!\n. That's why, have you been running all these commands with sudo (in the previous comments)?\n. That's useful info!\nAlthough tower should work with or without sudo, I definitely recommend homebrew, or manually setting up the global node/npm folders so they don't require sudo.\n. http://mxcl.github.com/homebrew (paste into terminal), then:\nbrew install node\nYou'll never look back.\nInstallers all have their own conventions of where to install certain files and what permissions they have, and it's up to the individual/team to manage one specific executable (like node). If you don't already, you'll start installing mongodb, redis, postgresql, mysql, cassandra, imagemagick, tesseract, git, and more from installers that were each built by different people. What ends up happening is the permissions are all different and unpredictable and you run into issues like this one which take a while to resolve.\nThe solution is to have 1 interface to installing these command-line tools, and that's what HomeBrew did. It's a huge and dedicated team that's created a library of forumla, which you just run through the command line instead of an installer (https://github.com/mxcl/homebrew/tree/master/Library/Formula). This makes installing any library very predictable.\nHomeBrew is one of the most valuable tools I use. I haven't had any problems with permissions/installations since I started using it some 2-3 years ago.\n. This is because the client routes are only wired together for @resources and @resource, we need to make it more robust / add it to the @match method. Would you mind taking a look at that? It should be fairly straightforward to implement, see this:\n- packages/tower-net/shared/route/dsl.coffee#L113\nThe state key that is passed into the @match options hash is then handled by the client router:\n- packages/tower-net/client/states.coffee#L90\nThat insertRoute method is called for each route defined in the Tower.Route.draw DSL, and is passed a Tower.Route instance.\nSend a PR if you'd like, otherwise I'll be getting back to the routes in a few weeks (though I'll try and get to this one sooner).\n. For sure, let me know where you're at and I'll help where I can.\n. Feel free to send me a PM on Twitter if you're ever digging into code, my phone goes off so I can respond faster :)\n. Here are some ideas for the API:\nLatest Ideas\n\ncommit: https://github.com/viatropos/tower/commit/8a67921f6d74d489288bec8183284ee89378c5a7\ntest code: 8a67921f6d74d489288bec8183284ee89378c5a7/test/cases/model/shared/bindableCursorCriteriaTest.coffee\n\n``` coffeescript\nnested, properties are grouped, but really that may just be a percieved but not real convenience? Not sure.\ncriteria = Ember.Object.create\n  userIdBinding:  Ember.Binding.oneWay('Tower.currentUser.id')\n  createdAt:  Ember.Object.create\n    $gteBinding:  Ember.Binding.oneWay('Tower.previousTimestamp')\n    $lteBinding:  Ember.Binding.oneWay('Tower.currentTimestamp')\n  tags:       Ember.Object.create\n    $inBinding:   Ember.Binding.oneWay('Tower.currentTags')\nflat and explicit\ncriteria = Ember.Object.create\n  userIdBinding:                        Ember.Binding.oneWay('Tower.currentUser.id')\n  createdAtGreaterThanOrEqualToBinding: Ember.Binding.oneWay('Tower.previousTimestamp')\n  createdAtLessThanOrEqualToBinding:    Ember.Binding.oneWay('Tower.currentTimestamp')\n  tagsInBinding:                        Ember.Binding.oneWay('Tower.currentTags')\n```\nEarlier Ideas\nFrom a35a5f5938b3aa2d45855351b2f0962e09c7397b/test/cases/model/shared/bindableCursorCriteriaTest.coffee#L30\n``` coffeescript\nPros: clear\nCons: this is the simple case, not many cons,\nbut it gets harder to read in more complex cases (below)\n\n...where Tower.Criteria[method] wraps Ember.Binding.oneWay\ncriteria =\n  userIdBinding:    Tower.Criteria.eq('App.currentUser.id')\n  createdAtBinding: Tower.Criteria.gte('App.currentTimestamp')\nCons: too hard to read properties\ncriteria =\n  userIdBinding:    'App.currentUser.id'\n  lteCreatedAtBinding: 'App.currentTimestamp'\n  gteCreatedAtBinding: 'App.previousTimestamp'\nPros: easy to read properties\nCons: not sure what values mean\ncriteria =\n  userIdBinding:    'App.currentUser.id'\n  createdAtBinding:\n    '>=': 'App.previousTimestamp'\n    '<=': 'App.currentTimestamp'\nPros: easy to read properties, values are clear\nCons: verbose\ncriteria =\n  userIdBinding:    Tower.Criteria.eq('App.currentUser.id')\n  createdAtBinding:\n    '>=': Tower.Criteria.gte('App.previousTimestamp')\n    '<=': Tower.Criteria.lte('App.currentTimestamp')\nPros: slightly less verbose\nCons: createdAtBinding value is too unclear\ncriteria =\n  userIdBinding:    Tower.Criteria.eq('App.currentUser.id')\n  createdAtBinding: [\n    Tower.Criteria.gte('App.previousTimestamp')\n    Tower.Criteria.lte('App.currentTimestamp')\n  ]\nPros: easy to read properties\nCons: verbose, kind of confusing\ncriteria =\n  userIdBinding:    Tower.criteria('App.currentUser.id')\n  createdAtBinding: Tower.criteria\n    Tower.Criteria.gte('App.previousTimestamp'),\n    Tower.Criteria.lte('App.currentTimestamp')\nHow the functionality might be implemented if the above...\n_.each criteria, (key, value) ->\n  #if key.match(/Binding$/)\n  #  # ...\n  # but doing this would be doing some of what ember already does,\n  # inventing a slightly different API.\n  # Maybe not a good idea...\nNotes:\n- technically only need to bind to the properties once,\nso don't need multiple App.currentTimestamp for example,\n(say if multiple date props were bound to it).\n- so, the whole cursor just needs to act like a computable property, such as:\ncursor.observes('App.previousTimestamp', 'App.currentTimestamp', 'App.currentUser.id')\n- then whenever even just 1 of those properties changes,\nit will iterate through all of the values on the criteria hash\nand will recompute all the values (most of which will be cached computed properties / bindings),\nand then it will re-filter the data matching the cursor.\n- so the end result is: recompute criteria to find all matching records\n\nWith the above in mind, you could have functions on the criteria,\nwhich will be executed whenever an observer fires:\ncriteria = Tower.criteria(\n  userId: -> App.get('currentUser.id')\n  createdAt:\n    '>=': -> App.get('previousTimestamp')\n    '<=': -> App.get('currentTimestamp')\n).observes('App.currentUser.id', 'App.currentTimestamp', 'App.previousTimestamp')\nBut... that's probably only slightly more optimized than just having bindings on the properties.\n\nYou could just make it work without the Binding suffix,\nbut that may be confusing since you probably don't do that in Ember.\nSo this might be the clearest:\n(it would also probably be the least amount of work)\ncriteria =\n  userIdBinding: Ember.Binding.oneWay('App.currentUser.id')\n  createdAt:\n    $gteBinding: Ember.Binding.oneWay('App.previousTimestamp')\n    $lteBinding: Ember.Binding.oneWay('App.currentTimestamp')\nSo, the rules could be (for each key/value):\n1. If value is a Tower.Criteria one-way binding, then use that,\n2. Otherwise, it's a simple/static value\n```\nThe goal is to be able to handle this use case on the client:\n- You want to filter a list of Post models by currentUser, but currentUser may be undefined when the app first loads, so doing App.Post.where(userId: App.currentUser.id) would be {userId: null} (or throw an error).\nImplementing \"bindable cursor criteria\" will also make things like refreshing the cursor when a timer changes, or you filter some tags, very easy.\nFrom what I can see so far, it looks like it must use Ember Bindings to map properties like App.currentUser.id to the cursor criteria (as opposed to ComputedProperty). So that's what I implemented above.\nThen the issue becomes, how to aggregate all of those changes into one cursor \"refresh\"? So say, in one synchronous block of code, App.currentUser.id and App.previousTimestamp both change. If you add an observer to both of those properties, such as this:\ncoffeescript\ncriteria =\n  userIdBinding: Ember.Binding.oneWay('App.currentUser.id')\n  createdAt:\n    $gteBinding: Ember.Binding.oneWay('App.previousTimestamp')\n    $lteBinding: Ember.Binding.oneWay('App.currentTimestamp')\n  somethingDidChange: Ember.observer(((criteria, key) -> console.log(key, 'changed!')), 'createdAt.$gte', 'userId')\n...then that somethingDidChange function will run twice, which is not desirable (wouldn't want to refresh the cursor ever time the observer ran.\nSo instead, that observer function will just set a boolean such as Ember.set(criteria, 'isDirty', true); even if it sets it multiple times it's a simple operation (I don't know how to prevent setting it multiple times, don't think that's possible).\nThen the cursor (which gets passed the criteria), will get notified that cursor.isDirty changed (haven't got that far yet, but it seems you could do cursor.propertyWillChange('criteria'), then Ember will run cursor.criteriaDidChange() the next frame I'm pretty sure (which is ideal, since now the criteria is fully updated and all changes have been made, so the cursor can refresh just once).\nThe difficult part is in the API. What do you guys like better, the nested or flat version?\nFor the flat version, we will have to iterate through all of the properties passed to methods like cursor.where(criteria), and rip out the attribute/operator/binding from a string like tagsInBinding:\n``` coffeescript\n$1 == \"tags\", $2 == \"In\"\n[key, $1, $2] = \"tagsInBinding\".match(/(\\w+)(In|GreaterThanOrEqualTo|etc)Binding/)\n```\nBut if the \"flatness\" of a cursors criteria is enforced, that is the only semi-expensive operation we will have to do.\nFor the nested version, we have to iterate through the first two levels of the criteria and get the Ember.Binding definitions, since simple \"equals\" operations are 1 level (e.g. userIdBinding), while complex are just 2 (e.g. createdAt: $gteBinding). It won't go any deeper than that other than for $or queries, but that's always complex :).\nWith the binding definitions, we can get the same information from tags: $in: <binding> as we did from tagsInBinding: <binding>:\n``` coffeescript\n$2 = binding._to # \"$in\", same (functionally) as flat's $2 above\nin the flat version, we're using $1 (\"tags\"),\nbut here we're using the other side of the binding: Ember.Binding.oneWay('App.currentTags')\nso: $3 == \"App.currentTags\", while the flat's $1 == \"tags\"\n$3 = binding._from \n```\nBoth flat and nested versions have tradeoffs, so I wanted to get your take.\nIf we enforce the flat version, that seems to be more along the lines of how Ember is doing things, and it is slightly more optimized (you end up creating slightly fewer Ember.Object instances it seems like). But it is more verbose and you lose the DSL, which means we'd have to potentially rethink a lot of the server-side query API:\ncoffeescript\nApp.Post.where(createdAt: '>=': _(2).days().ago())\nWe can allow both as well.\nAlso, random note, I saw that the Freebase MQL uses a syntax like createdAt>=: x, so it puts the operator at the end, which allows you to get rid of the extra JSON object nesting. Something to think about. Having to test every key against a RegExp such as \"createdAt\".match /(\\w+)(>=|<=|etc)/ is probably just as much work as iterating through and testing nested objects from createdAt: '>=': x, so it's something we should consider (pros/cons).\nWould love to know what your guys' thoughts are about this, what you would like to see possible, etc.\nCheers!\n. Perhaps even you could do it like this, which is just a wrapper around either flat or nested:\ncoffeescript\nApp.Post\n  .gte('createdAt', 'App.previousTimestamp', true)\n  .lte('createdAt', 'App.currentTimestamp', true)\n  .in('tags', 'App.currentTags', true)\n...where that last true argument could mean isBinding, or it could be inferred from matching /#{Tower.namespace()}\\./ (\"App\").\nNo not a fan of that...\n. I don't think there's going to be a noticeable difference either way. Yeah I like the nested too, I think it will be easy to get both versions working though.\n. Considering this again from a JS perspective (thinking out loud)...\n``` javascript\n// iterating through ideas...\nApp.PostsController = Tower.ResourcesController.extend({\n  // this one is equivalent to the one right below\n  criteria: Ember.computed(function() {\n    return Tower.Criteria.create().gte('createdAtBinding', 'App.startDate')\n  }),\ncriteria: Ember.computed(function() {\n    return Tower.Criteria.create({\n      createdAtGreaterThanOrEqualToBinding: 'App.startDate'\n    })\n  }),\n// you can accomplish the same thing using extend with no computed property\n  criteria: Tower.Criteria.extend({\n    createdAtGreaterThanOrEqualToBinding: 'App.startDate'\n  }),\n// perhaps you should be able to do it nested too...\n  criteria: Tower.Criteria.extend({\n    createdAt: {\n      gteBinding: 'App.startDate'\n    },\n    // or maybe the reverse\n    gte: {\n      createdAtBinding: 'App.startDate'\n    }\n  }),\n// and Tower.Criteria will be a little smarter, converting\n  // values on gte to Ember.Object.extend:\n  criteria: Tower.Criteria.extend({\n    createdAt: Ember.Object.extend({\n      gteBinding: 'App.startDate'\n    }),\n    // you wouldn't want this b/c you'd then have \"reserved keywords\"\n    // that you could't use as field names on your model, which isn't good\n    gte: Ember.Object.extend({\n      createdAtBinding: 'App.startDate'\n    })\n  }),\n// so that leaves us with this:\n  criteria: Tower.Criteria.extend({\n    createdAt: Ember.Object.extend({\n      gteBinding: 'App.startDate'\n    })\n  }),\n// but you really might want to optimize the queries, and\n  // so keep the query conditions ORDERED (in an Array).\n  // This would be automatically done using the first approach (with computed prop).\n  // But it would be expanded into something like this:\n  criteria: Tower.Criteria.extend({\n    conditions: [\n      Tower.Criterion.extend({\n        attribute: 'createdAt',\n        operator: 'gte'\n        valueBinding: 'App.startDate'\n      }),\n      // but this one doesn't feel right:\n      Tower.Criterion.extend({\n        createdAtBinding: 'App.startDate'\n        operator: 'gte'\n      })\n    ]\n  }),\n// so this is the equivalent of the first computed prop one\n  criteria: Tower.Criteria.extend({\n    conditions: [\n      Ember.Object.extend({attribute: 'createdAt', operator: 'gte' valueBinding: 'App.startDate'}),\n      Ember.Object.extend({attribute: 'createdAt', operator: 'lte' valueBinding: 'App.endDate'})\n    ]\n  }),\n// with the \"conditions\" array, you could make Tower.Criteria an Ember.ArrayProxy\n  // and call \"conditions\" \"content\".\n  criteria: Tower.Criteria.extend({\n    content: [\n      Ember.Object.extend({attribute: 'createdAt', operator: 'gte' valueBinding: 'App.startDate'}),\n      Ember.Object.extend({attribute: 'createdAt', operator: 'gte' valueBinding: 'App.startDate'})\n    ]\n  }),\n// and you could just use plain objects which we'd wrap into Ember.Object on the client:\n  criteria: Tower.Criteria.extend({\n    conditions: [\n      {attribute: 'createdAt', operator: 'gte' valueBinding: 'App.startDate'},\n      {attribute: 'createdAt', operator: 'lte' valueBinding: 'App.endDate'}\n    ]\n  }),\n});\n// It should work with createdAtGteBinding or createdAtGreaterThanOrEqualToBinding\n/*\nIf Tower.Criteria did everything above, the algorithm would work something like this:\n\nfor each key, check if it ends in \"Binding$\"\nif true, try to rip out the attribute like: /(\\w+)(Gte|GreaterThanOrEqualTo)/...\nwith attribute and operator, perform the actual query on the collection\n\n\nelse if _.isHash(value), then convert the value to an ember object\n\n... didn't finish this thought.\n*/\n// based on the controller just above, here's the final proposed approach:\nApp.PostsController = Tower.ResourcesController.extend({\n  // you can build the array manually\n  criteria: Tower.Criteria.extend({\n    conditions: [\n      Ember.Object.extend({attribute: 'createdAt', operator: 'gte' valueBinding: 'App.startDate'}),\n      Ember.Object.extend({attribute: 'createdAt', operator: 'lte' valueBinding: 'App.endDate'})\n    ]\n  }),\n// Or you can use a computed property and it will build the array.\n  // (This is equivalent to the above one).\n  criteria: Ember.computed(function() {\n    return Tower.Criteria.create()\n      .gte('createdAtBinding', 'App.startDate')\n      .lte('createdAtBinding', 'App.endDate')\n  }),\n// or you could not use an array:\n  criteria: Tower.Criteria.extend({\n    createdAt: Ember.Object.extend({\n      gteBinding: 'App.startDate',\n      lteBinding: 'App.endDate'\n    });\n  });\n});\n// this would mean you can do this with a criteria:\ncriteria.get('conditions') // [{attribute: 'createdAt', operator: 'gte' valueBinding: 'App.startDate'}, ...]\ncriteria.toJSON() // {createdAt: {gte: Date, lte: Date}}\n// I think we shouldn't worry about the \"conditions as array vs. object\" optimization for now.\n// Let's just keep it an object, it makes the JSON HTTP much easier.\n// I would like to make it so you could serialize the cursor without \n// having to rebuild the JSON object every time (if that's possible).\n// But... that would probably take manually setting up Ember bindings\n// which is involved.\n// The goal is to be able to just change some criteria.\n// so if you want to show active/inactive users, you would do:\n// App.usersController.set('criteria.active', true) or something,\n// and that would cause the criteria to get reevaluated\nApp.UsersController = Tower.ResourcesController.extend({\n  criteria: Tower.Criteria.extend({\n    active: true\n  })\n});\n```\n. http://stackoverflow.com/questions/9909803/what-is-the-right-emberjs-way-to-switch-between-various-filtering-options\nI think I'm approaching this wrong...\n. ``` javascript\n// after taking a look at Ember.SortableMixin, another idea...\nApp.UsersController = Tower.ResourcesController.extend({\n  sortProperties: ['createdAt'],\nfilterConditions: Ember.Object.extend({\n    active: true,\n    activatedAtGte: _(2).days().ago()\n  })\n});\nApp.UsersView = Ember.View.extend({\n  controllerBinding: 'App.usersController',\nclick: function() {\n    Ember.set(this, 'controller.filterProperties.active', true);\n  }\n});\n```\n. I feel like I'm wasting my time on this, there's too many ways to do it. I just really want to finish this so the server model queries and the client model queries work!!!\nOn the server the chainable api works fine:\njavascript\nApp.Post.where('createdAt').gte(_(2).days().ago()) // etc.\nBut on the client if it should somehow work with the Ember stuff, it's hard to merge both ideas... Really want to finish this but the direction in the above posts doesn't seem to be right. Might just have to tinker more later.\n. Not going to do it this way I don't think, going to be much different with the new router api.\n. This is going to be much simpler in 0.5.0 with the criteria pipeline.\n. You can try something like this:\n``` coffeescript\npaths = _.select require('wrench').readdirSyncRecursive('app/helpers'), (i) ->\n  i.match(/.coffee$/) # only coffee-script files\nfor path in paths\n  Tower.View.helper(require(path))\n```\n- https://github.com/ryanmcgrath/wrench-js\nThere needs to be a cleaner way to do this but I'm not sure it's there. You can add helpers to the controllers like this but I'm not sure they get added to the view as well:\ncoffeescript\nclass App.PostsController extends App.ApplicationController\n  @helper App.TagsHelper\nThere is a lot of room for improvement here, let me know if you see a better way.\n. Note, the Tower.View.helpers object, which Tower.View.helper extends with it's arguments, is only added to the coffeecup engine right now, later it should be added to any engine.\n. Sorry about that, the socket api has changed a lot since the documentation was made, definitely need to update the docs.\nCurrently, that method of manually sending data through sockets has been temporarily disabled so we could focus on automatically syncing Model data, which does work and is using sockets.\nThere's a lot to document so I'll point you to the relevant places in the code. First, the data-syncing is managed via Tower.NetConnection instances, which are stored in a Tower.connections hash by socket.id. On the client there is only 1 id, but the server has many. If you have called App.listen() on the client, this should connect the sockets and store the id in Tower.connections.\nOnce that's setup, the Tower.NetConnection instance has handlers for when both the client and server create/update/destroy records:\n- https://github.com/viatropos/tower/blob/master/packages/tower-net/client/connection.coffee\n- https://github.com/viatropos/tower/blob/master/packages/tower-net/server/connection.coffee\n- https://github.com/viatropos/tower/blob/master/packages/tower-net/shared/connection.coffee\nOn the client, if you call someRecord.save() on a new record, it will POST it to the server. Then on the server, it will call someRecord.save(), which will save it to MongoDB. After save on the server the record gets passed through every connection and is sent to the clients that can (or are authorized to) accept it. That occurs here on Tower.NetConnection#notify:\n- https://github.com/viatropos/tower/blob/master/packages/tower-support/shared/shared.coffee#L41\nThe other connected clients will then receive the message that a record was created:\n- https://github.com/viatropos/tower/blob/master/packages/tower-net/client/connection.coffee#L67\nThat just loads the JSON for that record into the client-side memory store. This triggers any registered Tower.ModelCursors (Ember.ArrayProxy subclass) to add the record to its collection, which triggers templates to auto-update (such as a list of records, etc.).\nThe only thing you need to make this auto-updating work is define cursors with @scope on the client and server controllers, such as:\n``` coffeescript\nserver\nclass App.PostsController extends App.ApplicationController\n  @scope 'all'\nclient\nclass App.PostsController extends Tower.Controller\n  @scope App.Post.where(createdAt: '>=': _(2).days().ago())\n```\nThe controller scopes/cursors are very primitive at this point but this is the general approach to syncing data via web sockets.\nThe ability to add @on 'someMessage' like you're asking was temporarily disabled so we could flesh out this data-syncing thing. We need to go back and fix that but it may be a few weeks until I can get to that. If you'd like to help get it working I can point you further in that direction, it should be straight forward.\nHope that helps.\n. Awesome! To modify the tower code, clone the repo, and compile the coffee-script. You can then link it globally and then locally into an app (that's what the contributors are mainly doing):\n```\ngit clone https://github.com/viatropos/tower\ncd tower\nnpm install\nin another terminal window\nmake watch # compiles everything\nback in the first window\nmake test # runs all tests, can just do make test-memory to only run tests against one store to speed it up.\n```\nWith the watcher running you can change the coffee-script files (everything in packages) and it will recompile.\nIf you want to link it to an app, then:\n```\nin the tower repo directory\nnpm link # links to global npm registry on your computer\nin your app\nnpm link tower\n```\nThen whenever you change the tower source, it will be reflected in your app as well (since it's just a symlink).\nThere are a bunch of tests in ./test/cases, feel free to modify and send pull requests.\n. Good stuff! I like where you're headed with it. Some thoughts that come to mind.\nFirst, about applying \"constraints\" on who can receive what message. @kristianmandrup implemented something very similar to cancan in Tower, for authorization, https://github.com/kristianmandrup/beer_can, and I merged some of that stuff in as well. Tower has an alpha-level Tower.Ability class that wraps currentUser and can be used to test if the user can create/read/update/delete certain data:\n- https://github.com/viatropos/tower/blob/master/packages/tower-model/shared/ability.coffee\n``` coffeescript\nclass App.Ability extends Tower.Ability\n  assign: ->\n    user = @get('user')\n@can 'read', App.Post\n@can 'update', user.get('groups').all()\n@can 'manage', user.get('memberships')\n@can 'read', 'create', App.Membership\n@\n\n```\nTechnically it works (using it now), but it's not documented. Along the same lines as what you're suggesting, the ideal situation would be something like the following for managing data pub/sub...\nThere is a global server-side map of socket ids to a Tower.NetConnection object. That connection object then has a reference to the user and ability, which in the controller were currentUser and currentAbility. Then every request - no matter if it's through AJAX,  plain HTTP, Web Sockets, etc. - somehow has an id that we can use on the server to find the socket/connection. This would mean we can store all the connected users in memory on the server, which is nice as it would prevent those database calls on every request (which you could cache, but still).\nThen, when any data is modified on the server, no matter if it's sent through web sockets or HTTP (or even if it's created through the tower console), it iterates through the Tower.connections hash, and for each connection it tests if the data can be sent to the client - using the Tower.Ability exactly like how you're describing the constraints.\nSo the main thing that's still missing is how you define the plain socket handlers (i.e. your @publish line). I was just thinking of having an @on handler on both the client and server, and on the server you just have a beforeAction filter that tests it against the currentAbility, and if it's unauthorized then return some error response. Not sure though, since you're digging into this you probably have a better idea, what do you think?\n. Ha, that's way too much to type on a phone :)\nYeah man this looks great, I'm on board with the stuff you're describing.\nThe only thing that's unclear to me in looking at it is the type: \"/notification\". [Remembering now] In the initial implementation, what you're calling type we just had be the controller name pluralized, and then your name: \n\"message\" was just the method called on the controller. So this:\ncoffeescript\n@subscribe type: \"/notification\", name: \"message\"\nwas this:\ncoffeescript\n@subscribe 'message'\nwhere the type would be /posts for example, if it was in the App.PostsController.\nLet's aim to use the controller/routing conventions for the sockets unless there are common cases where you'd need more robust functionality.\nFeel free to send a PR once you get something started, I'd love to take a look.\n. Sweet\n. Yeah integrating that would be a great start!\nhttp://rails-admin-tb.herokuapp.com/admin/field_test/158/edit\nWhat are your thoughts?\n. Tower is using something like Formtastic, haven't used nested_form though. If you'd like to take a stab at something like this definitely let me know.\nCheers!\n. Hey!\nThanks for posting. You're totally right with the docs, they are way out of date. Knowing that it's a big barrier to new guys coming to the project is very useful info, I'll make it a higher priority to update them soon. For now though the best documentation is just in reading the code since things are changing so fast, but we will have docs at some point (which the website will reflect).\nThe official \"docs\" are stored here: https://github.com/viatropos/tower-docs. They also haven't been updated in a while but they are more up-to-date than the website. Feel free to send pull requests to the tower-docs repo as you learn things, that would really help for the newcomers.\nRight now assets are auto-loaded on the server, but require manually specifying them for the client. Here are the folders currently auto-loaded on the server:\n- packages/tower-application/server/application.coffee#L12\nFor the client though, you have to add them to app/config/server/assets.coffee:\n- packages/tower-generator/server/generators/tower/app/templates/app/config/server/assets.coffee\nWhen you generate a model for example, such as tower generate scaffold post, it will inject /app/models/shared/post.coffee (and others) into app/config/server/assets.coffee automatically. I may add to the grunt/watch task a feature where when you create a file in app/models, for example, it will inject it into the assets.coffee file, but this may be more complicated than it's worth.\nThe reason for having to manually specify the client assets is that Tower currently doesn't have any sort of browser package manager integrated (such as bower or require.js). Eventually we should do this but when I have tried in the past it ended up being too complicated and time consuming; things have changed since then though so it may be good to take another look at it.\nFinally, the contents of app/config/server/assets.coffee is stored in Tower.config.assets:\n- packages/tower-application/server/application.coffee#L238\nCheers!\n. https://github.com/viatropos/tower/commit/f817609c6581c8fd6f9b5553a837c22507186011\n. What is your version of OSX, node, and npm? Also, see if you have hook.io installed locally and globally.\n. If you git clone the repo and link it to your app and try to install everything, do you get the same issue? Also, it may be because of the hard-coding to that specific version of hook.io, which may not work on OSX 10.8. Try doing >= x for the version of hook.io.\n. Thanks @j-mcnally for that workaround! Seems like the hook.io and node-weak authors should merge in your changes\n- https://github.com/j-mcnally/node-weak/commit/274e3f1b288e2421ff93244a4b650d1b9219bf5a\n- https://github.com/j-mcnally/hook.io/commit/8160fe5e5c5c8a3c6366feaea8ed0cb2b9fc2720\nI will look into removing hook.io temporarily as well, since it's only being used to send data to the browser from records you modify from within tower console:\n- packages/tower-application/server/application.coffee#L187\nThat's just a nice to have, shouldn't require this workaround. Thanks for figuring it out though, helps a lot.\n. Sweet! I'll take a look at this and get to your other posts about it in the morning.\n. Haha, this code in tower is a mess, thanks for digging in anyway!\n. Not quite sure what you're trying to accomplish here. Is this basically a layer between the model and the view?\n. Sweet! We did a little on this too, here's what we have so far:\n- https://github.com/viatropos/tower-authentication-example\n- https://github.com/viatropos/tower-authentication-example/tree/master/app/models\n- server controller: https://github.com/viatropos/tower-authentication-example/blob/master/app/controllers/sessionsController.coffee\n- client controller: https://github.com/viatropos/tower-authentication-example/blob/master/app/client/controllers/usersController.coffee\n- https://github.com/viatropos/tower/blob/master/packages/tower-authentication/server/passport.coffee\nThe passport.coffee is used in the example app in bootstrap.coffee like this: \n``` coffeescript\nMongoStore = require('connect-mongodb')\nApp.configure ->\n  @use 'favicon', Tower.publicPath + '/favicon.png'\n  @use 'static',  Tower.publicPath, maxAge: Tower.publicCacheDuration\n  @use 'profiler' if Tower.env != 'production'\n  @use 'logger'\n  @use 'query'\n  @use 'cookieParser', Tower.config.session.key\n  @use 'session', secret: Tower.config.session.secret, store: new MongoStore(db: Tower.Store.Mongodb.database)#, cookie: {domain: \".\" + Tower.config.session.cookie.domain\n  @use 'bodyParser', uploadDir: './public/uploads'\nTower.Auth.initialize ->\n    @provider 'twitter'\n    @provider 'facebook'\n    @provider 'github'\n    @provider 'google'\n    @provider 'linkedin'\n#@use 'csrf'\n  @use 'methodOverride', '_method'\n  @use Tower.Middleware.Agent\n  @use Tower.Middleware.Location\n  @use Tower.Middleware.Router\n```\n``` coffeescript\nTower.Route.draw ->\n  @match '/auth/:provider/callback', to: 'sessions#create'\n@match '/', to: 'application#welcome'\n```\n``` coffeescript\nsome link in the view which makes a popup:\nscript type: 'text/x-handlebars', 'data-template-name': 'application', ->\n  a '{{action facebookAuth target=\"App.usersController\"}}', 'Login with Facebook'\n  div id: 'facebook-count', '{{App.usersController.facebookCount}} (open up multiple browsers and see)'\n```\nI'll take a deeper look at your post in a bit, looks like you have gone a lot deeper. Cheers!\n. This grunt.coffee file looks out of date, are you using the latest tower (0.4.2-2)?\nThe development server should be reloading the specific files when changed without even having grunt running, since it's using chokidar internally:\nhttps://github.com/viatropos/tower/blob/master/packages/tower-application/server/watcher.coffee#L40\nWhich files specifically are not reloading?\nIf you look here (super messy code to-be-refactored), this is what we're doing when certain files are being changed:\nhttps://github.com/viatropos/tower/blob/master/packages/tower-application/server/watcher.coffee#L107\nAlso, you're on a Mac? Test and see if chokidar is running the watcher.on 'change' callback in that link above and let me know.\n. Ok, yeah with tower 0.4.2 a lot of this installation stuff is much better. When you get a chance try updating (or just use the repo and link it to all your projects if you'd like to stay on edge) and let me know.\n. When developing tower, are you developing against the repo, or the version that gets installed via npm?\nWe should create a grunt task that copies the dist/tower.js to vendor/javascripts/tower.js if the tower repo is linked to an app, that would be cool. Otherwise you'd just have to create a custom grunt task I'd think.\n. Ah yeah, this is because there is a default maximum number of files you can watch (or have open?) at once on the mac. We're working on a fix to this in grunt's watch task itself, but for now you can increase the default max like this:\nulimit -n 65536\nYou have to type that into the current terminal window you're using, I'm not sure how to make this the global default. But that's what I'm using and it works fine.\nhttps://github.com/joyent/node/issues/2479\n. [10:57am] justin_: I'm on osx\n[10:57am] justin_: ulimit returns unlimited\n[10:57am] justin_: justin-dev:tower justin$ ulimit -n 65536\n[10:57am] justin_: -bash: ulimit: open files: cannot modify limit: Invalid argument\n[10:58am] viatropos: this is osx 10.8?\n[10:58am] justin_: yes\n[10:58am] justin_: 10.8.1\n[10:59am] viatropos: maybe it's different on that? I'm still on 10.6.8 :0\n[11:00am] viatropos: not sure, maybe `ulimit -m`? https://discussions.apple.com/thread/4267111?start=0&tstart=0\n[11:02am] justin_: u are correct\n[11:02am] justin_: ulimit -n is 256\n[11:02am] justin_: but how to change it\n[11:03am] viatropos: can you just enter it in the terminal window?\n[11:03am] viatropos: maybe with sudo?\n[11:03am] justin_: o ok\n[11:03am] justin_: no its fine\n[11:03am] justin_: ur number was too big\n[11:03am] viatropos: oh ok\n[11:03am] justin_: from what i know of binary\n[11:03am] justin_: 65535\n[11:03am] justin_: is probably the largest value\n[11:03am] viatropos: oh ok\n[11:03am] justin_: o maybe not\n[11:03am] justin_: still too big\n[11:04am] viatropos: what if you did 16384\n[11:04am] justin_: 1000 seems to be max\n[11:04am] viatropos: hmm\n[11:04am] viatropos: maybe it's the new OS treating it differently? I used 65535\n[11:06am] justin_: hmm\n[11:06am] justin_: ok ill dig around\n[11:06am] viatropos: k\n[11:06am] justin_: 1000 is plenty so far\n[11:07am] justin_: that did fix it\n[11:07am] viatropos: k cool\n. No this is an issue, thanks for pointing it out. Right now the client ./dist/tower.js isn't rebuilt for every change, for the same reason that it adds a lag to development.\nWhat we should do is compile each package into a dist/ file (dist/tower-support.js, etc.). This would be an initial way to speed things up.\nIn the long term we should integrate something like requirejs or some other more formal system. It seems that those approaches would take a while to implement though, so I haven't even really considered them yet.\nFor now we need a grunt task to compile the top-level packages. I think I started that but it's not finished. Do you want to tackle this @TheHydroImpulse? Sounds like you're already almost there. This is definitely a useful thing to have!\n. \\m/ looking forward to it\n. Yeah it would be really great if, when building an app and you ran into some unimplemented feature or bug on the tower client, you could just modify the tower source and refresh the browser and it would load the new tower client code just as if you changed some file in your app. That would be awesome.\nI'm going to try to set this up so it will load each file individually on the client if you're linked to the tower repo.\n. @TheHydroImpulse Have you started doing anything with require.js?\nIf you add the tower module to the static paths in app/config/server/bootstrap.coffee, you can load it easily in the browser:\ncoffeescript\nApp.configure ->\n  @use 'favicon', Tower.publicPath + '/favicon.png'\n  @use 'static',  Tower.publicPath, maxAge: Tower.publicCacheDuration\n  @use 'static',  Tower.joinPath(Tower.root, 'node_modules/tower/lib'), maxAge: 0\n``` coffeescript\nin some app/templates\nscript src: '/tower/client.js'\n``\n. Yeah I want to test the integration of it (it's actually just with chokidar intower-application/server/watch.coffee`, not grunt).\nThere's a lot of these integration-level things that we need to test and I don't yet see a solid pattern for how/when to test them. The insights help. This stuff unexpectedly breaks every now and then and we need a way to prevent that.\n. I'm liking the look of brunch.io. Sidenote: we should allow people to pick between grunt and brunch if they really want (eventually).\n- https://github.com/asciidisco/grunt-requirejs\n- https://github.com/jrburke/almond\n- https://github.com/jrburke/requirejs/blob/master/require.js#L17\n- https://github.com/jrburke/requirejs/blob/955e93f922be7bf31d9f43ec2cbdcaf1655d42af/require.js#L1979-2000\n. Yeah this is because the initializers are loaded before the ./app folder:\n- packages/tower-application/server/application.coffee#L83\nTwo things... The initialization process needs to be more thoroughly thought through (and we should look into the Rails implementation again too), and if you wanted to use some code from a set of code that hasn't been loaded yet (models, controllers, etc., from inside app/config/server/environment or something), there should be a standard way of force-requiring the other code.\nSomething like that. Let me know what you think. I'll take a deeper look tomorrow.\n. I think having the requirejs stuff @TheHydroImpulse is talking about would be the ideal solution. For a temporary workaround, you can just require the files you need at the top of the script.\n. @TheHydroImpulse I really like the api you suggested, that looks clean and clear.\n@j-mcnally Nice little module, uses some things I haven't even seen in node. The one thing is the initializer should work on both client and server.\n. It is only used by the generator: https://github.com/viatropos/tower/blob/master/packages/tower-generator/server/generators/tower/model/templates/model.coffee\nWhat is the issue people are having? I'll be on IRC early tomorrow.\n. It seems the reason it wouldn't install is because they have NODE_ENV set to production, or something like that, which makes it so devDependencies aren't installed. You can change that with:\nnpm config delete NODE_ENV --global\nhttps://npmjs.org/doc/config.html\n. http://stackoverflow.com/questions/5999379/how-to-find-out-the-remote-address-in-node-js-if-it-is-https-request\n. Now you can do @get('ip') in the controller instance: https://github.com/viatropos/tower/commit/beaefe63ed16c321fc2752d8dfefc9dce6043a58\n. Hey, haven't been able to switch gears fully yet. I did pull the changes into a local branch but the client threw this error:\nUncaught Error: assertion failed: You must specify a target state for event 'indexPost' in order to link to it in the current state 'root.index'.\nI just generated a new app with the latest changes and a post model:\n```\ntower new app\ncd app\nnpm link tower\nnpm install\ncopy/paste the latest client dev into vendor/javascripts/tower.js\ntower generate scaffold post title:string body:text\ncake watch\nnode server\n```\nWill dig in further soon. Thanks for the PR!\n. ``` coffeescript\napp/config/shared/routes.coffee\nTower.Route.draw ->\n  @resources 'posts'\n  # @match '(/*path)', to: 'application#index'\n  @match '/', to: 'application#welcome'\n```\n. Haven't forgotten about this :) been finishing up some installation bugs and getting some lower-level things working for demoing, then I'll be digging into the routing stuff. Hope all is well.\n. @edubkendo Ive been thinking a lot about this as well, haven't quite come to a good solution yet. We may want to think about making the routes.coffee more robust (so you can give them ember route/state objects for example) or have hooks in the controller. Still thinking... ideas welcome.\n. Messing with the routes now (https://github.com/viatropos/tower/commit/1ca4eaa321e5bb310d3472dc0fef196284d189c6).\nWhat if the routes worked like this for the client @resources and @resource:\n/posts            # postsController\n  /               # postsController#index\n  /:id            # postsController#find\n    /             # postsController#find -> postsController#show\n    /edit         # postsController#find -> postsController#edit\n    /comments       # postsController#find -> commentsController\n      /             # postsController#find -> commentsController#index\n      /:id          # postsController#find -> commentsController#find\n        /           # postsController#find -> commentsController#show\n        /edit       # postsController#find -> commentsController#edit\nThe only thing that's been enhanced (from the server side routes) is that show is split into find and show. This would make it so if you went to /posts/10/comments, it would set App.postsController.post, but wouldn't render the post. Then it would render the comments index. Otherwise, if it passed through posts#show, it would pass the App.PostShowView to the connectOutlet, then remove it, then add the comments#index.\nAnother way around that is having some config variable in the controllers so you could say \"render both posts#show and authors#index on /posts/10/authors, but only render comments#index on /posts/10/comments\".\nYet another way to do it would be, skip adding that intermediate find action and create a helper method such as @isLeaf() in the controller and have the show action only call @render if the current route is the show route (rather than part of a nested route).\ncoffeescript\nclass App.PostsController extends App.ApplicationController\n  show: ->\n    @findResource (error, resource) =>\n      @render 'show' if @isLeaf()\nBasically this comes down to how the default implementation of nested resourceful routes should work: should it call connectOutlet (and try rendering the show view) for the parent resource, or no? I don't think it should. The reason is, it seems the default app, where there are tables of items and a full page view (like on an admin panel), only shows one resource at a time. You might show the post.title on the comments#index page, but you're not going to show the individual post view. At least for the default. You may want this functionality for your custom app, in which case you would just forward the find action to show on the parent like this:\ncoffeescript\nclass App.PostsController extends App.ApplicationController\n  find: ->\n    @show(arguments...)\n(The potential implementation of client-side show and find here: packages/tower-controller/client/actions.coffee\nOther than that, I've started making the Tower.Route object more robust so we can clean up and better test the way the Ember routes are generated.\n. I think having it like the following, with the @isLeaf() method (or some better name), would be simplest:\n/posts            # postsController\n  /               # postsController#index\n  /:id            # postsController#show\n    /comments       # postsController#show isLeaf == false -> commentsController\n      /             # postsController#show isLeaf == false -> commentsController#index\n      /:id          # postsController#show isLeaf == false -> commentsController#show\n      /:id/edit     # postsController#show isLeaf == false -> commentsController#edit\n  /:id/edit       # postsController#edit\n. Or even, we could just leave it so it would render the parent and the child, and if you want to only render the child, you can define the nested routes differently. So instead of this:\ncoffeescript\nTower.Route.draw ->\n  @resources 'posts', ->\n    @resources 'comments'\nyou'd want to do this:\ncoffeescript\nTower.Route.draw ->\n  @resources 'posts'\n  @resources 'comments', pathPrefix: '/posts/:postId'\nMaybe that's clearer.\nBut... doing it this way would mean the postsController wouldn't set the \"current post\" if you entered the app directly at /posts/10/comments, so you'd have to set up bindings from commentsController#post to postsController#post or whatever. But maybe we should do that anyways.\n. Wanted to get your take on how to create a single DSL/API for defining client and server routes. Here is a rails example:\nhttps://github.com/rails/rails/blob/master/actionpack/test/dispatch/routing_test.rb#L25-530\n``` coffeescript\nTower.Route.draw ->\n  @resources 'projects', controller: 'project', ->\n    @resources 'involvements', 'attachments'\n    @get 'correlationIndexes', on: 'collection'\n@resources 'participants', ->\n  @put 'updateAll', on: 'collection'\n\n@resources 'people', ->\n  member ->\n    @get  'somePathWithName'\n    @put  'accessibleProjects'\n    @post 'resend', 'generateNewPassword'\n\n@namespace 'api', ->\n    @resources 'customers', ->\n      @get recent: \"customers#recent\", as: 'recent', on: 'collection'\n      @get profile: \"customers#profile\", as: 'profile', on: 'member'\n      @post preview: \"customers#preview\", as: 'preview', on: 'new'\nscope ':version', version: /.+/, ->\n  @resources 'users', id: /.+?/, format: /json|xml/\n\n```\nThis would generate the following routes (eyeballing this so it may be slightly off, and only showing a few of them):\n/projects\n/projects/:id\n/projects/:projectId/involvements/:id\n/projects/:projectId/attachments/:id\n/projects/correlationIndexes\n/projects/:projectId/participants/updateAll\n...\n/projects/:projectId/people/:personId/accessibleProjects\n/projects/:projectId/people/:personId/resend\n...\n/api/customers\n/api/customers/:id\n/api/customers/:customerId/edit\n/api/customers/recent\n/api/customers/:customerId/profile\n/api/customers/new/preview\n/api/:version/users\nThe issue is, if you were to do this in Ember I think you'd expect this nesting:\napi.customers.new.preview # for /api/customers/new/preview\napi.users.index # for /api/:version/users\nThat is:\n1. The namespace would be an Ember.State, but it wouldn't map to a controller\n2. The scope (for :version), even though it's defined in a nested way, it doesn't create any nesting. So you have to translate in your head that, even though I'm writing a nested DSL, it's not a nested Ember.State\nStuff like that (and there's more) makes this stuff confusing. I also don't think you even need to have api be a state.\nSo then it's like, well you can define this url:\n/projects/:projectId/people/:personId/accessibleProjects\nusing nested routes (4 levels of nesting, really 3 because member is just grouping the child calls):\ncoffeescript\nTower.Route.draw ->\n  @resources 'projects', controller: 'project', ->\n    @resources 'people', ->\n      member ->\n        @get 'accessibleProjects'\nwhich will give you nested states that somewhat correlate with the DSL nesting (5 levels of nesting):\nprojects.show.people.show.accessibleProjects\nOr you can define every url without any nesting, but then your routes become more verbose:\ncoffeescript\nTower.Route.draw ->\n  @match '/projects/:projectId/people/:personId/accessibleProjects', to: 'people#accessibleProjects'\nI personally think the later is easier to read, but people like to use the DSL to clean up their code in Rails (it removes a lot of duplication when the app gets bigger).\nSo the issue is, the DSL nesting never quite maps to the Ember.State nesting. So the conclusion I'm drawing is: it's not realistic to correlate the DSL nesting with the Ember.State nesting.\nSo then the question is, if there's no correlation, should we get rid of the DSL? I think it works fine for the server, so I think we should keep it.\nThen the question is, can you use the Ember routes on the server, so you could use the plain Ember.Route.extend nested api to define the routes in the router on the client and server? Probably, but that seems like it would be a lot of work. I haven't really looked into this much more, but we should consider it more. If we could do this we'd get rid of the Rails-like DSL. (I've never used the collection, member, get, etc. in Rails, just match and resources really, so I wouldn't be too opposed to getting rid of it all together).\nWhat are your guys' thoughts on this?\nAnother way we could handle this is: the routing DSL generates a flat set of routes (the same way Rails does) that maps to a flat set of Ember.State objects, and it's up to the controller to handle connecting outlets when there are what looks like nested routes. So if you went to a route like this:\n/posts/:postId/comments/:id\nYou'd perform a check in the comments controller like this:\n``` coffeescript\nclass App.CommentsController extends App.ApplicationController\n  show: ->\n    App.get('postsController').connectOutlet('show') if @get('post') # if the parent exists\n@connectOutlet 'show' # or @render 'show'\n\n```\nThis is essentially the standard solution the Rails community is using for nested resources:\n- https://github.com/josevalim/inherited_resources\n- http://railscasts.com/episodes/230-inherited-resources?view=asciicast\n(in the more complex case where you want to see both the global /comments list and scoped /posts/10/comments list, you might need a more complex check than the railscast example is showing, I had to do that before).\nCalling postsController.connectOutlet from the commentsController isn't really that big of a deal in my opinion. People are currently just putting that into the Ember.Router in some Ember.Route#connectOutlet (where the route may be for /posts but they have 3 connectOutlet calls to random/unrelated controllers). It also greatly simplifies how the routing DSL works: it would only generate a flat Ember.Route state machine. It seems the optimization the Ember.Router (state machine) is trying to accomplish (where it enters/exits nested states up to the matching parent state) doesn't really give you that much. What are your thoughts there?\nOne last thing... I'm not the biggest fan of how Ember adds the connectOutlets method to the Ember.Route; it seems like it's adding rendering functionality to the router. I am leaning toward the idea that the router should be purely like a map that maps a URL to a function (a controller action), maybe with a few constraints / configuration variables. Then the controller action handles connecting the outlets (controller renders view based on event/url). What is your perspective?\nIf we go with the idea that the router should just be a map, then we could potentially simplify the nested Ember.Router tree by combining it with the Rails-like routing DSL. We'd just use a subset of the Rails router DSL methods, such as:\ncoffeescript\nTower.Route.draw ->\n  @resources 'projects', ->\n    @resources 'people', ->\n      @get 'accessibleProjects'\nWe would just get rid of the member in that above example, and we'd document that @resources and @resource will generate projects.action methods, so it's a special case.\nI'd like to get your feedback so we can decide the best/simplest/ideal routing API that works on both the client and server. That'll be an awesome thing to check off the roadmap. Cheers.\n. Just in the fact that it's so complicated trying to resolve this, I think it may just be better to have two sets of routes, one for the client and one for the server.\n. @TheHydroImpulse that's a good idea, I'll think more about that. I could see that working. Also reminds me, use 2 spaces for formatting! :) Maybe customizing the DSL will solve the problem... More to think about.\n@edubkendo I think you're right. The ember router is awesome, I just don't know it yet! I need to spend more time tinkering with purely client side Ember demos (I've been distracted with documentation and preparing for the next steps in the codebase). I'm going to spend some time after the talk to mess with pure ember to get a better [intuitive] feel for how Ember apps are built. Really, you guys probably know way more about that stuff than I do. Since starting Tower I've spent a lot of time refining things so they work, but haven't been building apps hardcore like I used to (though that's changing, switching gears soon).\nWhat I think we should do is solve this in stages (short term, medium term, long term).\nShort term, we should get the routes working like they do in Rails, for the client. The direct way to do this is to map them to flattened Ember states. You'll lose the robustness that the Ember router offers, but at least the router will work like Rails - and, let's be real, like any other client-side router since frameworks like Backbone and Sammy can't touch Ember :). This will put us in a position where we can build apps quickly (since client routes are the main bottleneck at this point), and will give us space to start tinkering with the ideal.\nMedium Term, we should test out what @TheHydroImpulse is suggesting on the DSL, and we should test out using the Ember router/state machine on the server, and allow fine-grained access to connectOutlet. We should also provide a way to allow users to write the client-side router using purely Ember, so Tower.Router = Ember.Router.extend(...) on the client. This would make it possible to have both server-side and robust client-side routes.\nLong Term, we find a solid solution that works everywhere. This requires tinkering and time.\n@edubkendo your last two paragraphs particularly resonate. The client-side controller is basically boilerplate from my experience too. And games, oh man. I don't even want to go there :). If Tower could handle games too, that would be INSANE. MVC's don't work in games in my opinion, so we'd have a lot of things to think through. [I came to the decision that \"games are out of the question of what I'm going to do in my career\" during the time I was messing with them in Flex: http://stackoverflow.com/questions/2083516/best-practice-for-transitioning-from-nested-state-to-nested-state-see-diagram]. Well, technically, MVC works in games. But \"web MVC's\" are very different from the original MVC, or MVC \"in general\".\nHowever, after seeing Ember solve this client-side routing problem with a [nested] state machine, I want to consider games again. If we could merge MVC/web-apps with \"game architecture\", that would be unprecedented. I don't know where to begin with this (or really, I just think it's \"too hard\"), but if I can see the light (some beginning demo/example) I will dig in too.\nBack to the client-side controllers. I think we need to implement this in phases. We need to solve the current problems in building apps, in a way that gives us time to figure out better ways to do it. While we're using the [current] client-side Tower controllers in a (perhaps non-ideal) way, they should work and solve the problem. Then in the meantime we will figure out better ways (and come to conclusions on whether or not they're necessary).\nGood discussion guys, love it!\n. @TheHydroImpulse yeah we should have two separate systems for the client and server. But we should do this medium term I think. I can get the routes working on flat Ember states in a few days, then can get the generator and all that to create ember routes (and make sure it's all working) in a couple weeks, though if you guys want to help with this we can get there way faster let me know.\nBesides that, we need to improve the client-side tower src development workflow! :) I tried doing TDD on the client Ember routes today but it was painful because of having to recompile the ./dist/tower.js. I know we're super close.\n. @TheHydroImpulse Yeah I saw that, want to play around with it in a few days. Looks super cool.\n. New idea for the the Router problem! Haven't had time to review this, wrote on the plane. Pretty excited about it though, let me know what you think.\nIf we eventually want to have a pure JavaScript API then the router should be build similar to how Ember does it, rather than the equivalent JavaScript version of the current Rails-like DSL:\njavascript\nTower.Route.draw(function() {\n  this.match('/posts');\n});\nInstead this is cleaner, and basically ends up being the same amount of code:\njavascript\nTower.Route.extend({\n  route: '/posts'\n});\nThe DSL is only really useful in CoffeeScript (or Ruby) because of the concise syntax. In JavaScript, the Ember/Object version is better.\nWhat this means though is awesome.\nFirst, we can define the client and server routes the same way. They'll both use the Ember-like syntax.\nSecond, since the client routes handle a lot of the rendering/database-querying logic anyways, there's really no need for Rails-like controllers on the client. Or rather, the Rails-like \"resourceful\" controller on the client gets merged into the Ember router.\nWe can do the same thing on the server! Get rid of the controller and put the logic into the router:\njavascript\n// on the server\nApp.Router = Tower.Router.extend({\n  root: Tower.Route.extend({\n    route: '/posts'\n    // action == connectOutlets, still need to think about the name\n    action: function() {\n      // write the response or whatever.\n    }\n  })\n});\nWith this pattern, we can bundle the @resources 'posts' routes something like this:\njavascript\nApp.PostRoutes = Tower.ResourceRoutes('posts');\nAnd you could then load them to the router something like this:\njavascript\nApp.Router = Tower.Router.extend({\n  root: Tower.Route.extend({\n    route: '/',\n    postRoutes: App.PostRoutes\n  })\n});\nWe could then implement the Tower.ResourceRoutes differently on the client and server!. Or even, the generator would just generate the complete route set for the client and the server, in place of the Controller!\njavascript\n// app/routes/client/postsRoutes\nApp.PostRoutes = Tower.Route.extend({\n  route: '/posts',\n  index: Tower.Route.extend({\n    route: '/'\n  }),\n  show: Tower.Route.extend({\n    route: '/:id',\n    edit: Tower.Route.extend({\n      route: '/edit'\n    })\n  })\n});\nNow both the client and server have the sama route setup, and you don't really need the controller (as the controller is defined in Rails).\n\nThis means you could have a context object that stores everything specific to the user, and it can be reused between requests!\n``` javascript\nTower.Route.extend({\n  route: '/',\n  action: function(router, context) {\n    context.request // and context.req\n    context.response // and context.res\n    context.params\n    context.store // a place to cache records, a.k.a. an \"identity map\"\n// the router would be unique to, and reused by, the connected client/user\nrouter.userAgent\nrouter.user\nrouter.ability\n\n}\n});\n```\nIt also means you could get the controllers from there, and use it instead of App.Post.all() and other methods called directly on the model class:\n``` javascript\nTower.Route.extend({\n  route: '/',\n  action: function(context, next) {\n    Post = context.postsController;\n    params = context.params;\nPost.find(params.id, next);\n\n}\n});\n```\nThe reason you can do Post = context.postsController is because Tower.Controller would extend Tower.Cursor, which is the same object when you do something like App.Post.all().\nPotentially even, we could make that happen magically on the server using node's vm.runInCustomContext(context), or maybe with(context) (but I've heard ES6 is going to remove that), so that you wouldn't even have to declare the variables:\njavascript\nTower.Route.extend({\n  route: '/',\n  action: function(context, next) {\n    Post.find(params.id, next);\n  }\n});\nWhat this means a few things:\n1. There is one \"router\" per connected user that gets cached until they leave the site. This is the same thing as the current Tower.NetConnection, or the \"manager\" we've been discussing.\n2. We can create a custom store (just a memory cache for example) that's unique to the individual request, so we can cache records queried through associations (an \"identity map\")\n3. The controller essentially becomes just a Tower.Cursor subclass, which is what you'd use inside Tower.Route#action instead of the model class directly (i.e. (Post = postsController).where instead of App.Post.where)\n4. The @param 'title' stuff in the current controllers would then be moved and defined on the Tower.Route instance. This is similar to how express does param parsing.\n5. The @beforeAction 'welcome' and other before/after hooks would just become something like enter and exit on the route! This would make doing things like bootstrapping the raw JSON into the HTML when the user first enters your site very powerful, since if they went to a nested route it would gather (\"eager load\") the data specific to that route while only rendering the leaf route. That would be super powerful.\nSo a more complex route would start looking like this:\njavascript\nTower.Route.extend({\n  route: '/',\n  enter: function(context, next) {\n    context.postsController.page(1).all(function(error, posts) {\n      context.bootstrapData = {posts: posts};\n      next();\n    });\n  },\n  action: function(context, next) {\n    context.response.render('index', context);\n    next();\n  }\n});\nor in coffeescript:\ncoffeescript\nTower.Route.extend\n  route: '/'\n  params:\n    title: 'String'\n  enter: (context, next) ->\n    context.postsController.page(1).all (error, posts) ->\n      context.bootstrapData = posts: posts\n      next()\n  action: (context, next) ->\n    context.response.render('index', context)\n    next()\nAnd the postsController (and other resource-oriented controllers) would have access to the parsed params defined by each nested Tower.Route. So controllers would look like this (JavaScript version):\njavascript\nApp.PostsController = Tower.Controller.extend({});\nAnd since:\njavascript\nTower.Controller = Tower.Cursor.extend();\nThe controller is a Tower.Cursor and so has a criteria property (going to refactor the current cursor to bundle query data into an observable Tower.Criteria object). This means that, based on the route and route-defined params, the postsController.criteria would be modified, which would mean the call to context.postsController.page(1) also includes the criteria! This is pretty powerful, and it would work the same way on the client.\nSo on the client, you would have a traditional Ember.Router with nested routes, each performing their own action, and we'd get rid of the old Tower.Controller rendering \"actions\" idea. So the new client-side Tower.Controller would just be a model cursor - the preferred API to the model. Taking this approach also makes it much clearer how you can use the Tower.Cursor (and how powerful it is). We could probably move the serverDidChange and other socket-related functionality / event handlers from the Tower.NetConnection and into Tower.Controller:\n``` javascript\nApp.PostsController = Tower.Controller.extend({\n  // this would a default implementation (what it currently does, \n  // just loads the models into the memory store).\n  serverDidCreate: function(records) {\n},\n  serverDidUpdate: function(records) {\n},\n  clientDidCreate: function(records) {\n}\n});\n```\nNow you start seeing what else you can do with the controller if we define it like that. You could start having a socket API.\nWell first, we should do something like this: delegate record.save() and related methods to something like record.send('save'), which then sent like a socket event. That would mean you could easily create custom socket events for records, such as record.send('modify') which you might define to mean \"send the modified record to the connected clients, but don't actually save anything to the database\". I could see this being very useful.\nWith that in mind, you'd want to also be able to handle those custom methods in the controller, perhaps like this:\n`` javascript\nApp.PostsController = Tower.Controller.extend({\n  // for our customrecord.send('modify')`\n  serverDidModify: function(records) {\n}\n});\n```\nSide note. Technically, with these serverDidX functions (which are basically just socket event handlers), you could do the same thing and define the controller actions in here, and just call them from the router. This may be a useful pattern (but not necessary):\n``` javascript\n// routes\nApp.PostRoutes = Tower.Route.extend({\n  route: '/posts',\n  action: function(context, next) {\n    context.postsController.index(context, next);\n  }\n})\n// controller\nApp.PostsController = Tower.Controller.extend({\n  index: function(context, next) {\n}\n});\n```\nWith a pattern like that the default Tower.Route#action implementation could just delegate to controller[name] if there was also a route.name or something. This would abstract a way a bit, and potentially make the controllers still feel a bit Rails-like.\nBack to the controller stuff...\nSo originally I was thinking about \"registering cursors\" through each controller like this:\ncoffeescript\nclass App.PostsController extends Tower.Controller\n  @scope 'all'\nBut, at least for the common/basic case, you only need to define 1 @scope or \"cursor\" per controller (instead of @scope 'all' you coud use a more finely tuned cursor, maybe one whose \"criteria\" are bound to the result of some \"Advanced Search\" box). With that in mind, and if the new controller becomes a subclass of Tower.Cursor, you don't have to define it at all; it is the cursor!\nThis would mean, all Tower.Controller subclasses (or maybe Tower.ResourcesController is a better name) automically get registered in the global set of Tower.cursors! That simplifies a lot:\njavascript\nApp.PostsController = Tower.ResourcesController.extend();\nThis also makes the following clearer: what if you wanted multiple \"scopes\" in your controller? Using the old Tower controller, you'd have 2 @scope declarations, but then how do you handle those in each action, etc.? Instead of going down that road, you would just create another controller. This is more along the lines of what Ember is doing, and it makes sense (and it feels so much gentler on my mind).\nThe end result\nSo the end result of all this would look something like this (again, writing in JavaScript but we'd have a CoffeeScript version too that works similar to how it does now):\n``` javascript\n// app/controllers/client/postsController.js\nApp.PostsController = Tower.Controller.extend({\n  index: function(context, next) {\n},\n  serverDidCreate: function(records) {\n},\n  serverDidUpdate: function(records) {\n},\n  clientDidCreate: function(records) {\n},\n  serverDidModify: function(records) {\n}\n});\n```\njavascript\n// app/routes/client/postRoutes.js\nApp.PostRoutes = Tower.Route.extend({\n  route: '/posts',\n  action: function(context, next) {\n    context.postsController.index(context, next);\n  }\n})\njavascript\n// app/config/client/routes.js\nApp.Router = Tower.Router.extend({\n  root: Tower.Route.extend({\n    route: '/',\n    postRoutes: App.PostRoutes\n  })\n});\nAnd it would look pretty much exactly the same on the server (also includes the example enter stuff for bootstrapping JSON to the client):\njavascript\n// app/config/server/routes.js\nApp.Router = Tower.Router.extend({\n  root: Tower.Route.extend({\n    route: '/',\n    enter: function(context, next) {\n      context.postsController.page(1).all(function(error, posts) {\n        context.bootstrapData = {posts: posts};\n        next();\n      });\n    },\n    action: function(context, next) {\n      context.response.render('index', context);\n      next();\n    },\n    postRoutes: App.PostRoutes\n  })\n});\nThe main benefits are:\n1. There is a unified interface to the \"router\" that works both on the client and server, and it allows for nesting on both the client and server.\n2. There is a single \"router\" for each connected user/client on the server, so we can cache the controllers, current user and ability, etc.\n3. There is a single \"context\" object on the server per-request that gets passed to each route's action, which contains a store so we can cache association records and such (\"identity map\") and other things such as the parsed session and cookies, etc. This also makes using the Node.js 0.8+ \"domain\" module possible, which will catch async errors so we can give the users useful error messages (this is pretty awesome).\n4. The Tower.Controller (or perhaps Tower.ResourcesController) becomes a simple Tower.Cursor, which aligns much better with the Ember.Router system, and the general way controllers are being used on the client (in Ember and other client frameworks).\n5. By defining the controller like this, it becomes easier to see how to define/use custom socket events (such as serverDidModify).\nI think this would really work. It moves away from the Rails idea of a \"controller\", but I think that's a good thing. With sockets and client-side stuff, controllers are a whole different thing.\nWhat do you think?\n. Awesome! This is going to take some work but we're definitely going to have to move away from Rails in some spots.\n. I would like to make these big changes in one large swoop. There is nothing that really needs incremental improvement that is higher priority than making a better framework. We need to adjust everything in bulk.\nI'm converting the test suite to JavaScript. After that I will convert the main codebase to plain JS and we'll talk about converting the default to JS. Even though I like coffee-script, I am now fairly convinced that it's not in the best interest of the node/js/tower community. More and more people I have talked to say they prefer using plain JS. I am slowly starting to agree. Looking back, a lot of the bottleneck/difficulty in getting started is in getting coffee-script compiling working.\n. Added Ember 1.0.0-pre.2 support to node, and the ember-application and ember-routing packages so we can start tinkering with the Ember.Router in node, excited!\nhttps://github.com/emberjs/ember.js/pull/771#issuecomment-10002995\n. @TheHydroImpulse yes, pretty much.\n. Making progress on the JS API. It required a bit of refactoring but it's getting there. A lot of it came down to taking a fresh look at the directions Ember and Express (and Node.js in general) are taking for API's, and making sure it aligns well with both.\nExpress and most of the node stuff uses chainable api's for the most part, while Ember uses (don't know what they're called) \"object\" APIs. Chainable APIs are cleaner in my opinion, but it should support both (at least until we figure out best practices and what people prefer).\nOne example is in how validations are defined/stored. To make the validations API more extensible, I'm putting them into a global hash similar to how ember-data transforms are:\njavascript\nTower.validators = {\n  presence: function(object, key, value) {\n    // ...\n  }\n}\nBut the way Express might do this would be:\n``` javascript\nTower.validator('presence', function(object, key, value) {\n});\n```\nIt's taken a while to realize there are these two main ways of making APIs. The reason it's important is because the whole Tower app should have a consistent way of defining the different parts, which will make it easier to extend. So if express defines it's routes like app.post('/'), etc., while you define configuration like this: app.settings.title = x, then things aren't right. This is why express defines settings like this: app.set('title', x) for example. Also thinking about how to get this style to work with Ember.Router.\nIn getting the JS api for the models implemented, I've had to think of ways to define validations on the fields. Now realizing it boils down to these 2 main ways of defining APIs, it makes it easier to come to a final conclusion on how it should be:\njavascript\n// this stuff is working on my end\nApp.User = App.Model.extend({\n    email: App.field().validate('presence').validate('uniqueness').validate('format')\n    email: App.field().validate('presence', 'uniqueness', 'format', {if: 'x'}) // shared options\n    email: App.field().validate('length', function(value) { return value.length > 3 })\n});\nThe issue was, there could be potentially many more ways to pass arguments to that validate method, but by keeping it simliar to the express/chainable api it limits it in a predictable way (at least it's getting there).\nAlong the same lines of standardizing the APIs, this method has made it much clearer how to define serializers, param parsers, modifiers/operators for the database, and global app config, some ideas here:\n- https://gist.github.com/ef874fd122d4b66ef354\n- https://gist.github.com/249240a691c4bfa389c0\n- https://gist.github.com/1c9acd98ac1c1e469355 (nothing good enough yet here, but might open up conversation)\n- https://gist.github.com/d3aa5a9ceb52dd478205\nAs a side note, you're also going to be able to define models using a purely chainable API almost like CoffeeScript (this was just a side effect):\n``` javascript\nApp.User = Tower.Model.extend()\n  .field('email')\n  .hasMany('posts')\n  .validates('email', {presence: true})\n  .classMethods({\n})\n  .instanceMethods({\n})\n```\nSo if you wanted to hack it together you could do that, but these will be the preferred approach:\njavascript\nApp.User = Tower.Model.extend({\n  email: Tower.field().validate('presence'),\n  posts: Tower.hasMany()\n})\n``` coffeescript\nclass App.User extends Tower.Model\n  @field 'email'\n  @hasMany 'posts'\n@validates 'email', presence: true\n```\nWill let you know when it starts getting ready to merge.\n. I personally am spending more and more time purely on the server-side digging into the data. I would love someone to take charge of the client-side stuff, that would help a lot. I'll make sure the router and all the client stuff gets finished and is awesome and implements what we've been describing, but I'd like to focus more of my energy on the data. That will all of course be integrated into Tower in some pluggable way.\nAs a result, I'm defaulting to be more a fan of the node/express api's than ember's, but I see the validity in both and Tower will work to support both to see what works best and is preferred down the road.\nCheers.\n. The routing system is starting to become really awesome. Here are some notes:\nhttps://gist.github.com/viatropos/4689443#comment-764567\nWe're moving to a more DSL-like approach that can be expanded to different frameworks such as Ember and Angular. It turns out this is very similar to the d3.js api, and also solves the problem of how to send tons of data around in a super optimized way (such as for multiplayer games).\nWe landed on the DSL approach after trying to figure out how to get the most performance out of the code. Writing it this way means the server/client code boots up insanely fast (minimal operations at startup, making the terminal start instantly for instance), and the JavaScript the browser will have to load for Tower is a fraction of what it is now. It also changes the way you think about what's happening in the app (more on that in the later comments on that gist).\nYou will also be able to write the expanded version directly (i.e. App.UserIndexRoute = Tower.Route.extend), but it's much easier on the hands/mind to write it using the DSL. I will look into also making it so you can write this stuff in CoffeeScript the same way you do now (if it's easy/quick to do), but that's a secondary goal.\nTo answer your question @maedi, Tower will use the latest Ember Routing API on the client, but is going to build the DSL around it, so when you write your routes on the server, you you don't need to use Ember at all (more on this later, but basically, I don't think you need Ember on the server for most cases).\nDefinitely weight in on the API (gist or this post) if you have any ideas/opinions.\n. Not quite sure what you're asking, are you wondering about the terminal and how to see/inspect data there?\nTo do that there is a helper function _.stringify(App.Post.all(), which just calls JSON.stringify(records, null, 2), but that can be overwhelming.\nWhat do you suggest? Should there be a more robust database-like (mysql-like perhaps) set of helpers for visualizing the data something like this:\n\n\nTwo things actually. First, there should probably be a tower database --mongodb or tower <database> command to directly startup the database. Some people seem to use this (though I never have). Second, we should provide a standard set of \"data formatting\" helpers in the console (and browser) for visualizing the data:\n- in table format (first image above)\n- show individual record (second image above)\n- in json\n- etc.\n\n. Started messing around with a cli to the database:\n- https://github.com/viatropos/tower/commit/dd17e4dbd7732c560517933536cc17638ca16de5\nFor now you can just quickly query data:\ntower select posts --select id,createdAt --where 'createdAt: $gte: _(1).days().ago()' --order createdAt- --limit 10 --page 2\n\nEventually it could even be such that:\n- the printed table is an editable spreadsheet in the terminal, so you can actually modify the raw data directly. The hardest thing was figuring out how to get the position of the terminal's cursor and map it a line of text - then to a model. But ansi.js figured it out! Here is another hack I tried that works, but ansi.js is way better :) https://gist.github.com/3765464\n- you can quickly paginate the database (and queries) using keyboard shortcuts in the terminal.\n- when you edit data in there, it could autocomplete from the rest of the db data.\n- similar visualizations/functionality should be possible from within the tower console js/coffee environment somehow.\nIt's not that bad once it gets figured out how to scroll the terminal cursor up and down and map that to data. Theoretically you can even build a DOM in the terminal using cheerio. It looks like that's what he started here!\n- https://github.com/Marak/ANSIdom\nAll we'd have to do is customize the cheerio.render method to generate ASCII / ANSI strings instead of HTML... Could easily be done in a day!\n- https://github.com/MatthewMueller/cheerio/blob/master/lib/api/render.js\nHere are some other links for learning about ANSI escape sequences (which give you crazy terminal powers):\n- https://github.com/crcn/celeri\n- http://blog.nodejitsu.com/six-nodejs-cli-apps\n- http://stackoverflow.com/questions/10585683/how-do-you-edit-existing-text-and-move-the-cursor-around-in-the-terminal/10830168#10830168\n- https://github.com/hij1nx/cdir/blob/master/cdir.js#L26\n- https://developer.apple.com/library/mac/#documentation/opensource/Conceptual/ShellScripting/AdvancedTechniques/AdvancedTechniques.html\n- http://tldp.org/HOWTO/Bash-Prompt-HOWTO/x361.html\n- http://nodejs.org/api/tty.html\n- https://github.com/TooTallNate/ansi.js\n- http://en.wikipedia.org/wiki/ANSI_escape_code\n- https://github.com/mscdex/node-ncurses\n- https://github.com/jocafa/node-term-ui\n- https://github.com/chjj/pty.js/\n- https://github.com/SchizoDuckie/Node-CLI\n- https://github.com/substack/node-cursory\n- testing clis: https://github.com/LearnBoost/cli-table/blob/master/test/index.test.js\n- https://github.com/visionmedia/node-term-css\n- http://creativejs.com/2012/02/ansi-escapes-js/\n- http://stackoverflow.com/questions/2575037/how-to-get-the-cursor-position-in-bash\n- http://stackoverflow.com/questions/8343250/how-can-i-get-position-of-cursor-in-terminal\n- http://www.markcrocker.com/rexxtipsntricks/rxtt28.2.0773.html\n- https://github.com/unconed/TermKit\n- http://scie.nti.st/2006/12/19/vi-key-bindings-in-rails-console\n- http://stackoverflow.com/questions/9122282/how-do-i-open-a-terminal-application-from-node-js\n- http://www.brankovukelic.com/post/2091037293/turn-vim-into-powerful-javascript-editor\n- http://railscasts.com/episodes/48-console-tricks-revised?view=comments\nCheers.\n. Sweet.\n. @careo this actually does randomly fail (though rarely). Thanks for the pull request! Nice little feature.\n. I think this is because \"nested resources\" aren't yet setup on the ember side.\nDo you only have a server-side nested route for @resource 'shop', -> @resources 'products'? (I'm guessing that's why the 404 on /products).\nThe @get('resource').save() is always going to save using the top-level route [currently]. We need to flesh this out more, specifically:\nWhat should the API be when you have multiple routes for a single \"record\"? So top-level /products and nested /shop/products or whatever.\nSidenote: I understand that in the ideal REST case, there is only 1 URL for a resource, but practically it's common and useful to have multiple - particularly for scoping resources to some parent model.\nCurrently you can generate the two different urls like this:\n``` coffeescript\nshop = App.Shop.first() # id: 10\nproduct = App.Product.first() # id: 20\nTower.urlFor(product) #=> '/products/20'\nTower.urlFor(shop, product) #=> '/shops/10/products/20'\nI don't think we've handled singular routes yet, so this isn't possible:\nTower.urlFor(shop, product) #=> '/shop/products/20'\nYou'd have to do this:\nTower.urlFor('shop', product) # a namespace\n```\nSee the urlFor tests for more examples (they need to be reorganized):\n- https://github.com/viatropos/tower/blob/master/test/cases/support/shared/urlTest.coffee\n- https://github.com/viatropos/tower/blob/master/test/cases/net/shared/urlForTest.coffee\nWhen you call resource.save(), that goes eventually to Tower.StoreTransportAjax#create:\n- https://github.com/viatropos/tower/tree/master/packages/tower-store/client/transport/ajax.coffee#L117\n[Working on the API for that module, it's far from ideal now]\nThe create, update, destroy, and find methods in that Ajax module get the url by calling urlForCreate(record), etc.:\n- https://github.com/viatropos/tower/tree/master/packages/tower-store/client/transport/ajax.coffee#L132\nThey're very primitive, but that's where your issue is probably. Somehow we need to come up with an API to allow nested resource URLs to be generated instead of the /products.\nOpen to suggestions, what are your thoughts?\n. Ember has a method, urlForEvent, that I know I was able to use on the controller, which gets passed the \"context\" from the {{bindAttr showPost post href=true}}, you might want to check into that:\n- https://github.com/emberjs/ember.js/blob/master/packages/ember-routing/lib/router.js#L515\nPotentially it could be added to the generated Ember.Route instances in Tower too:\n- https://github.com/viatropos/tower/blob/c17541d8627ecaca7386e40d99c07ecd1977986d/packages/tower-net/client/states.coffee#L50\nThat urlForEvent method works along the same lines as serialize and deserialize there.\n. The main issue is resource.save(), which [currently] will always save to the /<model-name-plural> path, from here:\npackages/tower-store/client/transport/ajax.coffee#L132\nSo the only way to do this now is to either override that method or to add a top-level route for the server that is @resources 'products'. I'm looking into a more robust API for this but that's all you can really do now.\n. The update and destroy methods on a record weren't fully finished so they have been commented out. Getting them going should be straight though. If you're down to check it out the relevant code is here:\n- Tower.ModelCursor#create packages/tower-model/shared/cursor/persistence.coffee#L94\n- Tower.ModelCursor#update packages/tower-model/shared/cursor/persistence.coffee#L111\n- Tower.ModelCursor#destroy packages/tower-model/shared/cursor/persistence.coffee#L128\nThey were commented out because the way I was originally updating the Ember.View collections (rendering a list of models for example) was slow when it had to recompute the changes, whereas with create it just pushes. On the todo-list, would love your help. Let me know.\n. I think the issues is/was that mergeDeletedRecords on the controller doesn't do anything yet. That gets called at the end of this chain:\n- Tower.NetConnection#serverDidDestroy: packages/tower-net/client/connection.coffee#L73\n- Tower.StoreMemory#unload: packages/tower-store/shared/memory/persistence.coffee#L52\n- Tower.notifyConnections: packages/tower-support/shared/shared.coffee#L41\n- Tower.NetConnection#notify: packages/tower-net/client/connection.coffee#L38\n- Tower.NetConnection#resolve: packages/tower-net/client/connection.coffee#L44\n- Tower.Controller#resolveAgainstCursors: packages/tower-controller/shared/scopes.coffee#L68\n- Tower.ModelCursor#mergeDeletedRecords -> Tower.ModelCursor#pullMatching: packages/tower-model/shared/cursor/finders.coffee#L113\nI never fully tested/got-working that @removeObjects in Ember, there were some issues with it a few months ago but a lot has changed since then. Try testing/breakpointing on the client that when deleting a record it gets deleted, the code gets executed all the way to Tower.ModelCursor#mergeDeletedRecords.\n. Agreed. Also by putting it in a submodule, it will be much easier to add to the tower src grunt tasks to compile the wiki for the website, etc.\nI am redoing the docs, updating them will make it much easier to get started.\n. Yeah tower is using codo for the docs, though I haven't run it in a while so there's probably some formatting issues to update in the comments. You can try with:\nnpm install codo -g\ncodo ./packages\n. Added a make docs task.\n. Nice work on https://github.com/viatropos/tower/wiki/Tower-Beginners-Guide @Maedi!\n. The main reason for the separation is that it should be possible to use the \"templates\" on the server (e.g. server-generated HTML). If you put the templates into the Ember View then you couldn't use them on the server.\nAlso, this distinction seems to be common in the Ember/JavaScript community in general:\n- ember-rails: https://github.com/emberjs/ember-rails/blob/3a9e90239dfd809e3158d0a936872237f50d267c/lib/generators/ember/view_generator.rb#L12\n- chaplin (an mvc layer on top of backbone, this is an example app): https://github.com/chaplinjs/facebook-example/tree/master/js\nI think the disconnect is in coming from Rails, where what they called \"views\" we're now calling \"templates\". I think that is more of a Rails issue than anything (since Rails was purely server, it didn't have to make the \"templates\" distinction).\nHowever, I don't think adding the \"templates\" concept turns MVC into MVTC. Conceptually you know the \"templates\" and \"views\" are tied together and part of the \"view\" layer in MVC.\nIf you went down that road (MVC->MVTC), then \"events\" and \"routes\" and all that other stuff would make it MVTERC... You know what I mean. Also, people in the Rails community often add \"presenters\" to their apps, which makes it more of an MVP, but they also have controllers..\nIn the end though, everyone agrees generally on what MVC means, even if things are broken down a little further in practice.\nI don't think breaking the MVC into more clearly defined sub-components is a bad thing.\nSome other benefits of separate \"templates\" from \"views\":\n- It makes the code DRY (so you can use \"templates\" on just the server, or in Ember \"views\" on the client, for example)\n- It makes it so you encapsulate your logic a little better (methods/etc. go into Ember.View objects rather than the templates, etc.).\n- Also, by having the templates separate, we can run precompilers and other optimizations on them separately from the Ember.View (such as precompiling jade templates).\n. @onyxrev I agree there is still a lot of boilerplate with the views, something we should definitely think about cleaning up.\nFYI, the generated ember views aren't necessary (at least the blank views with just a templateName in them). They were just there to give you a starting point to add more functionality. Really, I think you can just render the views in the main layout HTML with a data-template-name attribute, the same way the application template is rendered, and Tower should create an Ember.View for you. Maybe it doesn't though, not sure, it should be a one-liner to add if not, just making this method more robust:\n- packages/tower-view/client/emberHelper.coffee#L26\n@Maedi I'll mess around with the views/templates nesting to see how it feels. My first impression is that although it makes sense, it's combining two distinct sets of functionality, so that you'd have views/templates and views/users, etc., and/or it would break the convention of having client and server folders just below the app/* folders. It feels similar to if you were to have app/models/data to put in your seed data, or app/controllers/sockets for socket handlers. Really I think all that stuff should go at the top level. More than anything though I think this is all just new territory so everything feels a little strange at first. That ember guide you linked is good.\n. Just wanted to say, you guys probably have more experience than I do with the client views. I haven't had much time to spend on \"apps\" lately, but soon the docs will be updated and I'll have some time to really mess around with the Ember.View. It seems really powerful and a useful abstraction.\nUntil then, looking to you for examples! :)\n. WIll get to this in a bit, thanks a lot for tracking this down and fixing it. Awesome stuff.\n. No worries, I'll change it back. Thanks though, merged and it's all working :)\n. It doesn't necessarily need to go through the router, but I think it should execute the controller action the same way the router does it (that was the initial reason for making it use the router).\n. This is going to be much different in tower 0.5.0 (ember also does this much differently now as well).\n. No, sorry. Ember is a core part of Tower's Object Model.\nIf Angular can work along side Ember, meaning if you could use the \"view\" part of Angular and just not use the Ember views, while still the Ember objects, then it's perhaps possible. But that's something you would have to test and see.\nTower is using Ember and at least for now won't support Angular and Knockout, the primary reasons being that Ember's \"Object Model\", and Ember's \"run loop\" (pretty much a port of Apple Cocoa's run loop), are [in my opinion] unparalleled implementations of observers, data-binding, and classical inheritance (and basically \"multiple inheritance\" through mixins), and Tower is taking advantage of this stuff at the core level.\nThat said, if you can show that Angular templates work with the current tower + ember codebase, I would take another look.\n. We are confident that Ember is a better choice than the related frameworks. Ember has a much more calculated approach to solving the web/mobile problem and is in this for the long term.\nThe code for these larger projects is always likely going to work. So if you have built apps in the past with Angular or Knockout or the like, you have definitely had some success. But the real distinguishing factor between these different frameworks is how well each implements the ideal principles established by the community, and how they go beyond them to invent new ones.\n. @ricick How would you accomplish the same thing on windows? Would love to work through this with your help, I'll be on #towerjs IRC now for the next hour or two if you're around.\n. Specifically the things to solve for windows are:\n- windows equivalent of executing the $(./bin/dependencies).\n- an alternative to the Makefile (we could just go back to using Cakefile, that's probably easiest).\nMost of the Makefile commands are just wrappers around grunt commands, so you should be able to run those.\n. @ricick do the latest changes to master work for you now?\n. Awesome, thanks so much for plowing through this @TheHydroImpulse, it's going to be great having this working on windows!\nWhen you guys get errors on windows, just paste the whole error message in this thread so we can help resolve it faster :)\n@TheHydroImpulse not sure why the pull request didn't merge properly, I tried a few times and the lines I saw that differed I also tried just manually changing so I'll try just copy/pasting your two files in a bit (package.json and tower/server.coffee).\nSome of the windows bugs are going to be related to paths that aren't built using path.sep or path.join, so if you guys see and fix those, would love pull requests.\n. It should fully work on windows now! Let me know if there's anything else. @TheHydroImpulse and his windows batch file chops took care of the hard stuff (I mean wtf? lol). The rest is just making sure paths aren't using / but require('path').sep (which you have to escape for regular expressions, and gets a little messy). Cheers.\n. Can we close this?\n. @pashaie sorry you're running into this issue, we've been trying to get it working on all platforms and we're so close! I think this is the last issue, the BATCH RECURSION stuff.\nThe reason that's happening is because we added the ./make.bat file to the root of tower specifically to allow the windows cmd (which can't / doesn't have make from what I understand) to be able to execute that make install-dependencies command.\nFrom what I understand about windows, there are two ways people use the command line (even though there are multiple shells on windows it seems):\n- The default cmd shell\n- The git bash shell\n[Just rehashing to make sure I understand this correctly]. The git bash shell on windows seems to be the preferred (and better) shell, since it's more UNIX-like and it can install things like make. Is that roughly correct?\nThe thing is, Windows Azure uses the cmd shell, and from what I saw there's no way to install make. However, it is [probably] possible if you skip the simple heroku-like command-line interface to Azure, and just start managing the virtual machines directly; I'm sure you could install git bash and make if you went down that road (and if anyone does I'd love to learn how). That's way too much work though.\nSo instead of requiring all that work to get going on Azure I just wanted to get make working. So we added that ./make.bat and it works! This simple generated Tower app was deployed on Azure:\nhttp://tower-azure-test.azurewebsites.net/\nBut now it seems that, at least on some windows, that make.bat script is causing this BATCH RECURSION issue since you probably already have the actual make installed. Do you know how to make the real make you may have installed on your windows to work alongside this make.bat script? It seems like it should be a straightforward fix but I don't know my way around windows/batch files very well\nOne solution - if there's no way to keep the make.bat and have it work alongside any real make that may be installed on windows - is to somehow remove it in an npm preinstall hook, but I'd like to avoid that if at all possible.\nAny ideas? Looking forward to calling \"windows support\" done :)\n. Just published 0.4.2-14 to npm, was only on GitHub. Glad to see the make stuff has a workaround.\nSo should we keep the make.bat? Is there no way to have it work on windows without first installing devkit or windows make? Either way having that info on the wiki will be great, thanks guys.\n. What's the status of this now, can we close?\n. Thanks!\n. Not sure why isn't ejs getting installed... It's declared in devDependencies:\npackage.json#L75\nDo you have NODE_ENV set globally to production or anything like that? Or perhaps did you run npm install --production? Or maybe windows doesn't install devDepdendencies?\n. Really... lol, I didn't know that devDependencies don't get installed when you install a module globally. Will fix that right now.\n. Fixed the ejs issue, you shouldn't have to globally install it now.\n. @TheHydroImpulse unless you think it's reasonable/possible to get the makefile working on windows, we can instead just limit calling the make commands only to contributors who want to hack on the source (at least in the short term).\nTo do that I can merge localDependencies into dependencies, which will add all those modules to the global install which aren't really necessary, but it would get it working on windows I think. Then to get started hacking on the tower source, you'd have to run the make post-install manually.\nI'd rather have this makefile thing working cross-platform but I don't want us to waste too much more time on it.\nAlso a good solution would be just to document the setup process for getting started on windows (such as \"install make, install ruby dev-kit, etc\" or whatever). As long as there's some way for windows users to get started I'd be happy with that in the short term.\n. The latest push to npm removes make from the npm install postinstall hook, so there's no dependency on make on npm install.\nTo hack on the tower source you'll have to run make install-dependencies after you clone the repo (added to the README). But just to use tower, you should be able to just run:\nnpm install tower -g\ntower new app\nI'd like to get put the make postinstall hook back in, but want to wait for a bit on it.\n. @ginsent if you try now what do you get? It should be v0.4.2-18.\n. Looks like we're getting close :D\n. Yeah that's the last thing!\nP.S. I'll update the site/workflow so we can keep the website roughly in sync with the wiki:\nhttps://github.com/viatropos/towerjs.org/tree/master/public\nGoing to try and finish this today. Need some new design lol... Time for dribbble!\n. Looks like you're good to go, did you start the cake watch command? I think the assets just need to be compiled.\nYou'll have two windows, one running the server and one compiling/processing files when they change:\n```\nfirst window\ntower new app\ncd app\nnpm install\ntower generate scaffold post title:string body:text\nnode server\n```\n```\nsecond window\ncd app\ncake watch # or, if that fails which it shouldn't anymore, grunt start --config grunt.coffee\n```\nAlternatively, you can compile the assets on a one-off basis by running cake build instead of cake watch.\nDoes that solve it @ricick?\n. Awesome!!\n. @TheHydroImpulse I'm going to bump 0.4.2-20 to 0.4.3 without the make.bat fix, unless you want to squeeze that in there (not necessary).\n. Can the which command in node-which be abstracted/included in the Makefile?\n. For the cake watch error, if you do:\nnpm install which\nthen in the interactive node, I'm getting:\n```\n\nrequire('which').sync('cake')\n'/usr/local/bin/cake'\n```\n\nDoes this mean windows users should be doing:\n/usr/local/bin/cake watch\n(or whatever the full path to the cake command is)?\nIf so, is there a way to transparently create an alias to it on windows? Maybe so that when you first npm install tower -g, it checks if cake exists, and if not, adds an alias. That would be nice.\n. I'm on 10.6.7 (Snow Leopard) and node bin/dependencies just returns the string:\nnpm install stylus uglify-js mocha chai sinon eco mustache jade kue mongodb coffee-script coffeecup gzip chokidar knox socket.io socket.io-client fibers cli-table ttys cheerio colors\nBut if it's wrapped in the Makefile command you made:\ninstall-dependencies:\n    $(shell $(DEPENDENCIES))\nit works fine. It works with package.json postinstall: \"make install-dependencies\". Does that work for you?\n. Thank you by the way, this is very cool having the dev environment work on windows.\n. Hmm...what is that? The make install-dependencies works for me, does it not you?\nLol, but now that fix to tower/server.coffee with the path.sep.length > 1 doesn't work on travisci, since everything is in a top-level directory:\n/home/app/config/shared/application\nIs there an alternative solution that works on windows?\n. Cool. I tried this and it's working for me and travisci, how about you?\nhttps://github.com/viatropos/tower/commit/372a9cba0883f4956d48e4bfca66d3524e89ac1d#L92\n. What if it was while ... && !path.match(/(?:\\\\|\\/)$/) or something like that?\n. think this is already in there, seems to be working!\n. I merged it in just now but it's not autoclosing the pr.\n. Try logging the object you're in:\ncoffeescript\n    block = (callback) =>\n      console.log @constructor.toString(), @\n      try\n        @[@action].call @, callback\n      catch error\n        callback(error)\nOften if you get an error here saying the action isn't defined it's because it's calling it on ApplicationController for some reason (haven't fully solved that problem yet, but). The reason this is happening might be because it's [for some reason] not finding any matching routes, but the route @root '/' may match, but it still also parses the action (if this is the case we need to write tests to fix and resolve this more permanently. It has also happened because the coffee-script compilation didn't use the ./coffee-inheritance.js code, so subclasses of App.ApplicationController may not be registering correctly and so App.PostsController.toString() might result in \"ApplicationController\" - I have seen that before.\nCopy/paste the output of logging this.constructor.toString() and this from the code above into a gist and let me know, that may offer more info.\nAnother useful thing to do is console.log(this.constructor.metadata()) and make sure that is correct.\nAnother thing to inspect is if the class is being defined multiple times. In the past - when working on automatically reloading code on the server when a file changed - reloading the file redefines the class, but there is some reference that's still around using the old code (this shouldn't be happening b/c all references classes, such as in the associations, are stored as strings until they're being called, but it still may). This might cause unexpected/random errors like this.\nOh, and since this is on windows, it's possible that the controllers (and others) aren't being loaded b/c of the windows/*nix path differences, so try inspecting _.keys(App) and see if everything that should be defined is.\nOnce we figure out why this is happening we should write tests to make it doesn't happen in the future because this is definitely an error that's difficult to debug.\n. Yep that's it then, it's probably using ApplicationController when it should be using some subclass. What is the url you're accessing? And the route mapping that url to the controller action (or just paste your whole routes.coffee).\nIs there an index action defined on your ApplicationController?\n. If you copy/paste your code from\napp/controllers/server/applicationController.coffee\nto\napp/controllers/client/applicationController.coffee\nThen it will compile it to\n./public/javascripts/app/controllers/client/applicationController.js\n(This is just a hack to see the compiled output quickly, since only client files get compiled to ./public). Once you do that, what does the code from that file look like?\n./public/javascripts/app/controllers/client/applicationController.js\nSince you do have a route pointing to application#index and the index method is defined, the only reason I can think of that it's not working is because the coffee-script isn't compiled correctly for Ember.\nGiven this:\ncoffeescript\nclass App.ApplicationController extends Tower.Controller\n  index: ->\n    @render 'index'\nPlain-old CoffeeScript will generate this:\n``` javascript\nvar hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super = parent.prototype; return child; };\nApp.ApplicationController = (function(_super) {\n__extends(ApplicationController, _super);\nfunction ApplicationController() {\n    return ApplicationController.super.constructor.apply(this, arguments);\n  }\nApplicationController.prototype.index = function() {\n    return this.render('index');\n  };\nreturn ApplicationController;\n})(Tower.Controller);\n```\nBut Tower's ./coffee-inheritance.js extensions will generate this:\n``` javascript\n(function() {\n  var defineProperty = function(clazz, key, value) {\n  if (typeof clazz.__defineProperty == 'function') return clazz.__defineProperty(key, value);\n  return clazz.prototype[key] = value;\n},\n    __hasProp = {}.hasOwnProperty,\n    __extends =   function(child, parent) {\n    if (typeof parent.__extend == 'function') return parent.__extend(child);\n    for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } \n    function ctor() { this.constructor = child; } \n    ctor.prototype = parent.prototype; \n    child.prototype = new ctor; \n    child.__super = parent.prototype; \n    if (typeof parent.extended == 'function') parent.extended(child); \n    return child; \n};\nApp.ApplicationController = (function(_super) {\n    var ApplicationController;\nfunction ApplicationController() {\n  return ApplicationController.__super__.constructor.apply(this, arguments);\n}\n\nApplicationController = __extends(ApplicationController, _super);\n\n__defineProperty(ApplicationController,  \"index\", function() {\n  return this.render('index');\n});\n\nreturn ApplicationController;\n\n})(Tower.Controller);\n}).call(this);\n```\nThe main difference is that Tower customizes CoffeeScript to define instance methods like this:\njavascript\n__defineProperty(ApplicationController,  \"index\", function() {\n  return this.render('index');\n});\nwhereas plain CoffeeScript sets it on the prototype directly:\njavascript\nApplicationController.prototype.index = function() {\n  return this.render('index');\n};\nCore objects in Tower define that method (packages/tower-support/shared/class.coffee#L17) like this:\ncoffeescript\nTower.Controller.reopenClass\n  __defineProperty: (key, value) ->\n    object = {}\n    object[key] = value\n    @reopen(object)\nSo the controller is actually being defined like this:\ncoffeescript\nclass App.ApplicationController extends Tower.Controller\n  @reopen\n    index: ->\n      @render 'index'\nThis is required so when you instantiate a new controller (or any core object in Tower), the instance gets the correct methods in the prototype/mixin/inheritance chain. Otherwise, Ember doesn't pass methods directly defined on the prototype to class instances, like this:\ncoffeescript\nApplicationController.prototype.index = function() {\n  return this.render('index');\n};\nThat could be the reason why the action is undefined in your case.\n. Awesome! Yeah that second error is tower-application/server/watcher.coffee path issues...\nSo how did you fix the problem? It should be able to read the code from server/applicationController.coffee.\n. The benefit is just being able to use the full range of coffee-script syntax (such as executable class bodies), and because ember needs to have instance methods defined in reopen, and class methods defined in reopenClass; you can't define methods on an ember object using the prototype directly if you want to use computable properties or have it inherited in subclasses. So this won't work properly in ember:\ncoffeescript\nApp.User.prototype.welcome = ->\n  # deliver welcome email\nit must be done like this:\ncoffeescript\nApp.User.reopen({\n  welcome: ->\n})\nSo the extensions make it possible to use the simplicity of coffee-script in the API, while also being able to use ember.\n. Can you paste the coffee-script that's getting generated? (So I can see what you mean by \"it's not wrapping a self invoking function around the rest of the compiled javascript\")\nThis may be happening b/c coffee-script may be working slightly different on windows (unlikely), or maybe the extensions are tied to *nix (also unlikely), or maybe the coffee-script grunt task isn't setting the right default options on windows. Not sure, post the code that's being generated and your version of coffee-script (local and global), that will help.\nThanks.\n. Hmm... what is the difference between postsController.coffee and applicationController.coffee (what are their paths)?\nTechnically the ApplicationController code you posted above should still work since it will just execute straight through - it wouldn't work if it was wrapped like this:\n``` javascript\n(function(){\n});\n```\nBut since these errors are occurring for you on the client (not server) it probably does have to do w/ the fact that it's not wrapped because some variables may be being defined globally at that point.\nWhat specific errors are you getting on the client?\n. And your routes are like this (since you're switching to welcome action)?\ncoffeescript\nTower.Route.draw -> \n  @match '/', to: 'application#welcome'\nIf the client controller is blank, then the error could be b/c the client routing implementation doesn't handle blank actions (not sure about this). By default the generated routes are in a shared folder so they are loaded on the client and server. If you want to have custom routes for the client vs. server, then you can move them to app/config/client and app/config/server instead of app/config/shared.\nIt seems that it's working now then?\n. Been messing around with it for a bit on azure, it looks like it could be one of two things.\nFirst, it could be an issue with how the ./coffee-inheritance.js overrides are applied... By that I mean, when you require('coffee-script') in your app, and it's also required in the tower source, there could be two coffee-scripts installed:\n./node_modules/coffee-script\n./node_modules/tower/node_modules/coffee-script\nI'm don't know 100% how the modules are resolved, but it seems like these are the rules:\n- On installation, if the module is already installed at the parent level, it won't install it into it's own node_modules folder. So if you already have installed coffee-script in your app, then when you npm install tower in your app it won't install it's own coffee-script in tower/node_modules/coffee-script. Not sure if this is the case but it seems like it is.\n- Then when you call require('coffee-script'), it will do a lookup up the chain, starting from the __dirname of the current file. So if you put require('coffee-script') inside tower/lib/tower.js, then it will lookup in tower's node_modules before your apps. Again, not sure about this but it seems the case. If you check require.cache you can see more about it.\nSo I was thinking it could be that we are applying the coffee-script extensions to a version of coffee-script installed in tower, but not the app. So I added coffee-script to tower's package.json so it got installed there, and removed it from the app, and made sure the only require('coffee-script') call was from tower/index.js in the tower source. But that didn't help. Still, there may be some issue with this.\nThe second thing is, it could be because Ember's run-loop isn't being called until later, so somehow the mixins aren't being added properly? I say that because of this:\n``` coffeescript\ncalling this in a generated app, from app/config/server/bootstrap.coffee at the top of the file\nnone of the app/controllers/* code has been loaded by this point.\ngetting the full path to the controller\ncontrollerPath = require('path').join(Tower.root, 'app/controllers/server/applicationController.coffee')\nloadOrReload = ->\n  try require.resolve(controllerPath)\n  delete require.cache[controllerPath]\n  require(controllerPath)\nseeIfExists = ->\n  try\n    console.log 'App.ApplicationController#welcome', App.ApplicationController.create().welcome\n  catch error\n    console.log 'App.ApplicationController#welcome', error\nit has never been loaded so this will fail\nseeIfExists() #=> error\nattempt 1\nIf you require it, you'll get App.ApplicationController,\nbut the welcome method will be undefined.\nThat is the error that you're getting\nloadOrReload()\nseeIfExists() #=> undefined\nattempt 2\nIf I instead run this inside an Ember.run block,\nwhich forces ember to compile it's modules,\nthen it seems to work:\nEmber.run =>\n  loadOrReload()\n  seeIfExists() #=> [Function]\n```\nThere could be some issue where the same file is being loaded twice because of some [more random] path issues on windows, such as maybe one version of applicationController is starting with \\\\\\\\ and another with C:\\\\\\\\, so it's loaded twice.\nOther than that, the last issue is making sure the template paths resolve correctly, which should be easier.\nHope that helps.\n. So it looks like it could be as simple as both the client and server applicationController.coffee files are being loaded o_o:\njavascript\n// on azure\nconsole.log(Object.keys(require.cache));\n[\n...\n'\\\\\\\\10.207.104.177\\\\volume-22-default\\\\some-hash\\\\another-hash\\\\site\\\\wwwroot\\\\app\\\\controllers\\\\server\\\\applicationController.coffee'\n...\n'\\\\\\\\10.207.104.177\\\\volume-22-default\\\\some-hash\\\\another-hash\\\\site\\\\wwwroot\\\\app\\\\controllers\\\\client\\\\applicationController.coffee'\n]\n. http://tower-azure-test.azurewebsites.net/\n. One more note, if you're building a startup and need to have your product out in like 3 weeks or something, then definitely use something more established like plain express. There's still a few edge cases to work out with the way requests are parsed in Tower before I'd say otherwise.\nThat said, everything is working and things are moving pretty fast, so if you're more talking 3 months, then definitely give it a shot. The server-side model and controller layers are the most robust part of Tower (and what I am working on finishing first), so we'll be tackling any issues that come up with \"api\" stuff first.\nIf you have any questions feel free to post issues or meet us in #towerjs IRC.\nGood luck!\n. What is you operating system, node version, and npm version? It should be working, we're just fine tuning windows installation and installation may have broken elsewhere but should be easy to fix.\n. @bendangelo were you able to get past this? going to close the issue if so, let me know. thanks!\n. Thanks!\n. > When a background task finished, it would emit a socket event. You could then listen and emit jobs.\nI love this idea. Very cool, wanna hear more about that.\nIt seems this would be a very clean way to do file uploading. Also other common background tasks like emailing or fetching and processing a webpage.\nNot sure how I feel about putting that @on code in the controller instead of the model though, will think about more. Socket events do seem like they should come from the controller from a high level, but maybe they're hooked into a callback defined on the model, something like:\n``` coffeescript\nclass App.Video extends Tower.Model\n  @after 'create', 'upload'\nupload: (done) ->\n    @enqueue 'upload', @get('id')\n@upload: (id, done) ->\n    # do upload...\n    done() # which calls back to the socket @on handler in the controller.\n```\nWhat are your thoughts?\n. Though I did hear people are starting to avoid callbacks like @after 'create' and choosing to define those actions in the controller, so maybe it is a preferred pattern putting it in the controller...\n. I like where you're going with this. This would definitely make creating a demo app very easy.\nSeems like you know what should be done here, so I just have some high-level comments on the API.\nFirst, when I ran into this situation (uploading videos, or even testing with resizing images but that's pretty fast), I did something like this:\n``` coffeescript\napp/controllers/server/videosController.coffee\nclass App.VideosController extends App.ApplicationController\n  create: ->\n    video = App.Video.build(@params.video)\n# this is called after create, after the http response was sent back to the user,\n# so this just going to emit socket events\nvideo.on 'upload', (percentComplete) =>\n  # emit only sends to current user, through web sockets.\n  # the exact api wasn't/isn't implement, but basically just\n  # send the current user who uploaded the video the data they need...\n  json = video.toJSON()\n  # maybe this is a computed property on the video or something...\n  json.percentComplete = percentComplete\n  @emit 'uploaded', json\n\n# normal save and responding to HTTP\nvideo.save (error) =>\n  if error\n    @render json: {error: error}, status: 404\n  else\n    @render json: json, status: 200\n\n```\nThe way that would be implemented, all the \"background job with redis\" code is abstracted away into the Tower.Model base class, so you'd implement it like this:\n``` coffeescript\nclass App.Video extends Tower.Model\n  @after 'create', 'upload'\nupload: (done) ->\n    @enqueue 'upload', @get('id')\n@upload: (job, done) ->\n    job.on 'complete', done\n    job # return job or something, or somehow attach this to the video.on event handler in the controller.\n```\nThat way, you can run jobs from the command line without worrying about the controllers. But if a job was requested through the controller (uploading video), then you hook into it from the controller.\nI don't like the way I did that in the controller though, and it should be done more like what you're saying (I like the @on controller method rather than calling App.Job.on, which is too meta :) So maybe something like this:\n``` coffeescript\nclass App.VideoController extends App.ApplicationController\n  # these 3 methods are equivalent\n  @on 'upload', 'upload'\n  @event 'upload'\n  @hook 'upload'\nupload: (job) ->\n```\nThen whenever a hook is defined it will register a handler on a record when instantiated (abstracted away into some Tower controller mixin).\nThe only issue with doing that is it seems a little abstract and may be confusing to beginners. Some of these simple abstractions make it harder for people to get started, so just another factor to consider. That's why maybe just manually writing the handler with @emit like the first example could be preferred even though it's more verbose.\nEither way (API-wise), there will be a clean way to send socket notifications to the user who just made the request, vs. everyone (or a subset of everyone). Socket.io uses broadcast vs. emit which I like, what do you think?\nThe last thing is the job object. Right now the tower-model/server/queue.coffee code encapsulates the logic for running background jobs using kue, and they have their own job object (and I like how they've built it). I wasn't really ever a fan of how background jobs were done in rails, as classes such as in resque:\n``` ruby\nclass Archive\n  @queue = :file_serve\ndef self.perform(repo_id, branch = 'master')\n    repo = Repository.find(repo_id)\n    repo.create_archive(branch)\n  end\nend\n```\nReally, all jobs just have one method, perform, and emit events at different phases in their lifecycle. The kue api handles this better in my opinion. There's no need to create 1 class for each job type. Still, we need to think through how we want to represent/define jobs in Tower (haven't had much time for this yet).\nWhat are your thoughts?\n. Sounds good, want to send a PR?\n. I like the idea of having a centralized interface to all things related to the user:\n- user record\n- authorization (permissions, roles, etc.)\n- scopes (records via cursors, etc.)\n- socket\n- even, potentially, controller instances so tower would only have to instantiate 1 controller per class per user (a small but perhaps useful optimization). There's a few issues with this one though, mainly that we'd have to redo the controller api not to use any instance variables, but to work more like express' app.use(function(req, res, next)) system, which I'm kinda starting to like more than how Rails did it.\nAt the same time this interface - entry point to the \"user\" stuff - should be as as simple as possible. But, because the server has multiple users it has to keep track of (whereas the client only has one), we can't make it this simple:\n``` coffeescript\nApp.user # or App.currentUser\nApp.socket\n...\n```\nbecause the server would need to wrap that in what you're calling the Tower.NetManager object (currently Tower.NetConnection), so like this:\ncoffeescript\nApp.connection.user\nApp.connection.socket\nWith that we can also do neat things on the client like wrap those in Handlebars helpers, such as:\n`` coffeescript\nHandlebars.registerHelper 'currentUser', ->\n  # since behind the scenesApp == Tower.Application.instance()`\n  Tower.Application.instance().connection.user\nHandlebars.registerHelper 'currentAbility', ->\n  Tower.Application.instance().connection.ability\n```\nand then in the views do something like this:\nhtml\n{{if currentUser}}\n<h1>Welcome {{currentUser.name}}</h1>\n<a {{bindAttr logout href=true}}>Logout</a>\n{{else}}\n<a {{bindAttr login href=true}}>Login</a>\n{{/if}}\nIn terms of the class_instances idea, I like this kind of thing and have been thinking a lot about it too, but it seems to be pretty complex to implement and I'm not sure how much benefit we will get out of it (mainly in terms of performance). For the client it makes sense, it's pretty much what we're doing now. But for the server it gets more complicated. Here are some of the issues on the server.\nFirst, for the controllers, we'd have to refactor all the actions to be passed parameters instead of setting request, response, params, headers, etc. to the controller instance, so actions would go from this (current):\n``` coffeescript\non the server\nclass App.PostsController extends App.Application\n  index: ->\n    App.Post.all (error, posts) =>\n      @respondWith (format) =>\n        format.html => @render 'index', collection: posts\n        format.json => @render json: posts, status: 200\n```\nto something like this:\n``` coffeescript\non the server\nclass App.PostsController extends App.Application\n  index: (request, response, next) ->\n    App.Post.all (error, posts) =>\n      @respondWith (format) =>\n        format.html => response.render 'index', collection: posts, next\n        format.json => response.render json: @collection, status: 200, next\n```\nThe reason is because if we're going to cache the controller object, then what if the current user sends two async requests, and the second one finishes before the first... If they both go to the same instance and set variables, the state would get messed up. So there can't be any state kept in server-side controllers; everything would need to be passed as arguments like app.use (req, res, next) ->. By implementing that pattern, we stick more closely to express' API, and it is cleaner because we can now cache the controller instances. But at the same time, the API becomes more verbose (we have to manually manage a bunch of common/boilerplate code), and the controller actions start revolving around the request and response objects, rather than the controller itself. This would mean - if we want to keep the API on the client and server pretty consistent - we need to introduce the request object on the client, which isn't really necessary (at least it doesn't seem necessary at the moment).\nSo then it comes down to, what is the benefit we gain by caching the controller instances on the server per-user? Pretty much, it comes down to performance - we could potentially shave off some milliseconds from the request by not creating a controller instance for each request. But that's all speculation, I haven't tested that. And I'm starting to think that it wouldn't be large enough to sacrifice the simplicity of the current controller action API.\nThat's my main concern in terms of caching controller instances on a per-user basis.\nIn terms of models, having a central object for each user/socket/session would not only standardize the way all-things-user get accessed (through some net manager/connection object), but it would also allow us to create an identity map. We could scope all the data for a request to the current \"connection\", so associations/reflections wouldn't have to reload data that's already loaded. I think that's pretty cool. And we can do that with the current or express-style controller action api (above), so we could leave it the same and still accomplish this.\nThose are my main concerns/thoughts for the server.\nFor the client, we should/can definitely cache everything on a central object, and maybe alias it to App, so:\ncoffeescript\nApp.currentUser == App.connection.user\nOne issue with this is Ember already has ideas on how this stuff should work, so we have to work with/around that. For example, they lazily-instantiate controller instances on the App.router object, and we can't change that (at least it seems). So Tower just aliases App.postsController to App.router.postsController essentially. If we made this work around a \"connection\" object, then we'd have to take that kind of stuff into account.\nIn terms of caching Ember.View instances on the client, I like that idea but there are lots of things to consider with that. The benefit of doing this is that if you append a view to the DOM a second time, it doesn't have to rebuild it's own DOM, since it was done the first time. This makes rendering noticeably faster [on some browsers, not Firefox or IE it seems though, where it doesn't even matter]. The main issue with this is that all the bindings and such that Ember.View has created stay in memory, so we have to either have the developer manually manage memory, or do some fanciness in Tower, which could get complex. I tried going down that road once but it seemed it would take a lot of time and not produce that much fruit. The cost of manually \"disabling\" Ember bindings and such on \"non-visible\" (cached) views quickly becomes just as expensive as just destroying and re-creating the view.\nThe one situation where it would be useful is if the view doesn't contain much dynamic data (such as a page-specific menu that might get added/removed when the URL changes, but doesn't change it's content). In that situation it may be beneficial to cache the views.\nOverall, I agree with you that we should refactor the Tower.NetConnection interface so that it's a cleaner interface to all things user. Seems like you have a solid idea of what should happen and it only really comes down to the specific API. Let me know what you're thinking next, this is definitely a powerful component that will be very useful when simplified.\n. @edubkendo for sure, we're going to do as much as possible with streams, they are great. Just created an issue so we can discuss it further b/c there's some cool stuff.\n. Sweet, so it sounds like we're all on the same page. No view caching, and we can worry about controller caching optimizations in the future if it becomes clear there's a need.\n@TheHydroImpulse do what you think is best in terms of how you want to approach the problem. I personally like to map out the entire api and [sort of] document it, and then get it working from there (vs. trying to build the api for just one chunk, then when that's done, the next chunk, etc.). It makes it clear the big API changes that we're making, so we can easily discuss/modify/agree on them.\nFor that Tower.Manager (this is the all-things-user object), I liked the name connection, but it's not perfect. I'm not really a fan of \"Manager\" in code (Flex's fault). Manager's make MVCs feel too bulky and/or complex in my opinion, and I think it's because of their history coming from [it seems to me] Java Design Patterns. I was thinking Tower.Client but that's confusing, any term related to user is confusing (user, userAgent, agent, client, etc.), even though that's kind of what we're doing. I'm sure we'll think of something. If you really want to change it feel free, but we'll probably come back to it. A lot of the naming has to be cleaned up too (the ugliness of Tower.StoreMongodb and all that is b/c I \"flattened\" nested namespaces (Tower.Store.Mongodb). Same with Tower.Net.Connection.\nOne last thing. I recommend implementing in as small chunks as possible. I made the mistake of creating a huge development branch to merge in Ember and it took many many months to complete and nobody really knew what branch to use (and it became too much work to manage both master and development). I see this happen in a lot of projects, it's easy to take 6 months to a year to merge in such a branch.\nSo instead we should strive [it's an ideal, so it's often not practical, but it's still to be strived for] to spend a few days to a week or two and merge the stuff into master. If you make big API changes those can usually be done in a few days since they don't usually change functionality, so we can push those to master, then work on adding some specific thing, merge that in etc.\nAlthough [counter point], I personally prefer to work on many different things at once (so maybe in this case it would be the API, the emit/broadcast stuff, the jobs/queue code in the model, the controller hooks on model jobs, emitting controller hooks to sockets, etc.). The tendency might be to put those into one branch like net-refactoring and start at it. But it gets overwhelming pretty quickly and often takes too long. Instead lets aim to make each one of those into branches, and merge into the main branch. So:\ngit branch net-refactoring\ngit branch emit-broadcast-stuff\ngit branch jobs-queue-stuff\n...\nAnd just merge those into master. If you find it useful to create an intermediate branch to merge all the \"net related\" stuff into before master (kind of like staging), then try it out, but I have found it slows down my progress the larger the changes are. It's easier to just have small feature branches that you can finish in a week or less [ideal, but still worth striving for].\nNot sure if that's what you were asking lol, just some thoughts on branching :)\nReally, all this stuff would be cool to have, so it doesn't matter to me what we do first. Let me know when you get started.\nExcited!\n. Cool, sounds good.\n. Messing around with this a little. One note, you can create a socket \"client\" from the terminal (or even from within the node server process), so on the \"server\" portion of Tower there needs to be both client and server \"connection\" objects.\nImplementing basic support where if you modify data in the tower console process, it will sync to the browsers. I started with hook.io, but since that's deprecated I started with require('net') and raw TCP sockets, but then it sends streams of data and you have to create a JSON parser to handle the model syncing stuff. So that's solved by socket.io, and you can require('socket.io-client') in node and use it the same you would from the browser.\n. Haven't quite fully wrapped my mind around what you're suggesting, though I get the gist of it.\nLet me see if I'm following, basically, the goal is to have a clear set of objects and to manage them with what you're calling the Container. This would make it so you could easily swap out the objects (that are set to variables on Container). This makes things like testing easier because you can then easily swap out mock objects for actual objects (like your view rendering example, mock out the db so you're just testing the rendering, not the db too).\nYou'd also be able to set nested dependencies pretty easily (from what you're suggesting), such as:\n``` coffeescript\npseudocode\nApp.set('Router.Controller.View.Template.Response', new MockResponse)\n```\nI definitely agree that the API in Tower should be clean/clear enough that it's easy to mock out objects like this. It's not there yet but that's definitely the direction we're going.\nI think Dependency Injection / Inversion of Control are very powerful and useful patterns. They help us define clear separations in our code, and make it easy to do things like mocking (or having swappable datastores for example).\nHowever, I think Dependency Injection is something that should be hidden from the developer using the framework. There should be no docs saying \"Dependency Injection\". The reason is because, at least to me, it also makes the framework feel bulky and complicated, and brings with it that sense of Java-ness that just overcomplicates things.\nI used Dependency Injection a lot when I used Flex (mate framework, swiz framework dependency injection, etc.). Those patterns were definitely the most robust ways to write your code, and it simplified a lot in the codebase. But, it also required a lot of mental overhead - it took a lot to learn and to use, even though it simplified the code you had to write a lot. Maybe that's just me but that's the way I felt about it. I would use it for sure, but I think most people would rather use something simpler.\nThat said, Tower should strive to have the public API be super simple and not require any [as little] knowledge of design patterns and such as possible. It shouldn't require the use of Dependency Injection. Everyone has to learn MVC/MV* if they want to become good at coding, but I don't think everyone needs to learn Dependency Injection. That kind of thing.\nSo if the public API is simple I'd be down to explore dependency injection as you're describing it some more, but I think we can accomplish the same thing your suggesting without using those formal design patterns per say.\nThoughts?\n. Makes sense, yeah I like where you're going with this! It'll be very powerful when done right.\n. Nice! Will dig into it further soon (just took a glance, saw aliases).\nCheck out Ember.alias too if you haven't, it might be useful.\n. We are implementing this in 0.5.0.\n. Good point, I'll probably just have it say something like this:\n```\nPlease install git and mongodb before continuing:\nhttp://github.com/viatropos/tower/wiki/Development Environment\n```\nAlso, going to have this only run when installed globally, since it would probably be overkill printing this out when installing in every app (since the instructions are pretty much for creating an app anyway).\n. Perfect, that'll work, yeah that'd be good on the wiki.\n. This is definitely going to need more robust testing to make the \"dependency checks\" better (such as checking for sudo, or if rvm is installed then their default gemset for heroku, etc.). Eventually this stuff could turn into a separate node module (independent from tower). It should eventually be able to check cross-platform for any installed script.\nGoing to merge it now, not pushing to npm yet though, few other things to do.\n. Haha nice.\n. Hmm... okay, this I think may be because of this:\npackages/tower/server.coffee#L93\nWhat is the value of Tower.root?\nAlso, did you update the global and local versions of tower?\nnpm install tower -g\nnpm install tower # in project\nLast thing, that Tower.setRoot function first checks process.env.TOWER_ROOT, which is now set in server.js. See if setting that helps:\ntower-generator/server/generators/tower/app/templates/server.js\n. Nice @TheHydroImpulse, forgot about that line, that's where it is!\n. Also @stevenrace what is the value of $myprojectpathhere? The reason is if the project is created at the top-level, such as /my-app (and so having /my-app/node_modules, etc.), it may cause issues in the way the root is calculated (when it's missing). If not then it should be fine.\n. @edubkendo and @TheHydroImpulse If you all get a chance, would love to know if this works on your end (linux / windows). I changed a few things with the post-install hook and want to make sure it's still working. Cheers!\n. saweet\n. p.s. tower console is way better now, just added a few things:\n- cursor.toJSON(), so you can do App.Post.all().toJSON() and it will print colored JSON (from node's own console.log stuff)\n- App.Post.destroy(), update(), and create() all work on n number of records, using the synchronous option, so you can do App.Post.update(public: true).toJSON() and see the records you just updated.\n- You can press up/down to go through the repl history, even when you exit out and start the console again (it's stored in ./tmp/replHistory.coffee). Only setup for the coffee repl so far, but it's very easy to port.\n- After entering code in the repl and pressing enter, it will always resolve on the tower> prompt, whereas before you sometimes had to press enter to reset it (super annoying).\nThis readline stuff is super powerful stuff, check out the code it's by far the best documentation on it:\nhttps://github.com/joyent/node/blob/master/lib/readline.js\nCheers!\n. I'm down for this, it would be great for all the reasons you mention (allow for lazy loading modules, would make breaking up the client scripts possible, simplifying development and optimizing, etc.).\nFeel free to start a branch and start messing with it. I want to get to this at some point but will probably hold off personally until some more of the API stuff is solid (and 0.4.3 is reached, though I may break 0.4.3 into smaller parts lol, it's getting big). The sooner we start on this the better though, it's going to require modifying the way we write code in Tower to some degree I imagine.\n. Sweet, sounds good.\n. Now that is fucking awesome. Very interesting idea!!\nIt seems strange that the browser somehow doesn't have this built in, but I guess it makes sense (the 'loading everything as a string and evaluating on some user action' part).\nWe definitely should test this out and see how it works, at first glance it seems like this could be a pretty hardcore optimization.\nAlong the lines of caching/optimization, we should consider integrating the HTML5 cache manifest to the equation: http://www.html5rocks.com/en/tutorials/appcache/beginner/.\nI'd love to see a test/example of this on the tower codebase (or some other thing I can clone and test) to get a better feel for it. Have you started messing around with the lazy evaluation stuff you're describing yet?\n. This looks pretty awesome @TheHydroImpulse. I don't 100% have my head wrapped around it yet, need to spend some more time looking at the source (not sure how you're handling require('model') yet in the example just briefly looking).\nIf this works - and with that little amount of code - this will be extremely useful for any project.\nNice name too, resolve.js! Don't forget to register it to npm.\n. Awesome! Really excited to test it out.\n. New link. https://github.com/TradeMe/bootup.js\n. I wonder if this has anything to do with nvm vs npm? The reason this may be happening is because the tower source is trying to require('socket.io'), but the socket.io dependency is installed in the app, so it would be like this:\n./node_modules/socket.io\n./node_modules/tower\nbut I'm not sure if ./node_modules/tower can load a module defined above it (I've had issues with this in the past, but it works fine now for me). What I know will work is this:\n./node_modules/tower\n./node_modules/tower/node_modules/socket.io\nI would just like to avoid that b/c we'd have to add socket.io as a hard dependency for Tower which it isn't.\n. Yes @edubkendo @jeremysavoy that is the issue. If you install tower globally, then do npm link tower in your project, it's not going to work.\nThe reason is because when you do npm install tower -g to install tower globally, it only installs the few modules required for the tower new <app-name>, and a few other tower commands. It doesn't need express, socket.io, and a lot of other stuff because, essentially, the tower command just needs to generate an app. Then you install tower in your app, and it includes many more modules (express, socket.io, etc.) required to actually run the server and all that.\nHowever, if you clone the tower repo, then npm link that globally, then you can npm link tower in your app. This is because when you clone the tower repo and run npm install, it's going to install everything required for testing tower. So when you link it globally, then to your app, you already have every possible module tower will need. But if you try to link the global version of tower you installed with npm install tower -g, it won't have all those extra modules installed.\nTry this instead:\nnpm install tower -g\ntower new app\ncd app\nnpm install\nIf you're working off the tower repo though, you can npm link it:\n``\ngit clone https://github.com/viatropos/tower.git\ncd tower\nnpm install # will install **everything** for testing\nmake # compile coffee-script's and such, ormake watch` for persistent compilation\nnpm link # makes it global\nthen in some other directory\ntower new app\ncd app\nnpm link tower # link to github repo version of tower\nnpm install\n``\n. This may be kind of confusing, so I might just get rid of that installation optimization and just install everything everywhere. We'll see.\n. Oh cool no worries. Your tutorial has been super helpful so far. Cheers.\n. For theusers/indexissue, check theTower.View.cacheandEmber.TEMPLATES` objects and copy/paste the keys into a comment here, the paths may be using windows vs. mac in one place:\njavascript\nconsole.log(_.keys(Tower.View.cache), _.keys(Ember.TEMPLATES));\n. The way templates are being compiled currently, they are just being written to 1 file:\napp/public/javascripts/templates.js\nThat occurs within this grunt helper:\npackages/tower-tasks/tasks/index.coffee#L15\nInside the generated templates.js you should find the compiled templates, so it looks something like this:\n``` javascript\nTower.View.cache = {\n  // lots of other templates...\n  'posts/index': Ember.Handlebars.compile('...'),\n  'welcome': Ember.Handlebars.compile('Welcome to Tower.js')\n};\n_.extend(Ember.TEMPLATES, Tower.View.cache);\n```\nThe complete templates.js, from a newly generated app with a scaffolded Post model looks like this:\nhttps://gist.github.com/3854729\nWhat do you have inside that file? Copy/paste the whole thing into a gist and link it here, that would help. Thanks!\n. Also paste the output from cake watch, this is mine:\n```\n$ cake watch\nDefault database not set, using Memory store\nRunning \"copy:js\" (copy) task\nCopied 35 files.\nRunning \"copy:css\" (copy) task\nCopied 2 files.\nRunning \"coffee:all\" (coffee) task\nRunning \"less:bootstrap\" (less) task\nFile public/stylesheets/vendor/stylesheets/bootstrap/bootstrap.css created.\nRunning \"stylus:compile\" (stylus) task\nFile public/stylesheets/app/stylesheets/client/application.css created.\nRunning \"templates:all\" (templates) task\nRunning \"watch\" task\nWaiting...\n``\n. That's probably it then, the value ofTower.pathSeparatorEscapedon windows should be the string'\\\\', which when passed intonew RegExp` in packages/tower-tasks/tasks/index.coffee#L22-35 should be:\n``` coffeescript\npathSeparatorEscaped = Tower.pathSeparatorEscaped\ntemplatePath = new RegExp(\"app#{pathSeparatorEscaped}templates#{pathSeparatorEscaped}.+.coffee$\")\non mac with pathSeparatorEscaped == '/'\nconsole.log(templatePath)\n/app/templates/.+.coffee$/\non windows with pathSeparatorEscaped == '\\\\'\n/app\\templates\\.+.coffee$/\n```\nWhat are the values there if you log result and the patterns just after that for loop?\n``` coffeescript\njust after loop\nconsole.log(result)\nconsole.log(templatePath, layoutPath, namePattern)\n```\nIt could also be packages/tower-tasks/tasks/index.coffee#L19:\n``` coffeescript\nmaybe grunt's file.expand only understands / for paths?\nfiles   = grunt.file.expand([\"app#{_path.sep}templates#{_path.sep}*#{_path.sep}.coffee\"])\n```\nWhat is the value of console.log(files) after that line?\n. That's it then, grunt returns nice path's for us :), didn't realize that. So we don't need to use the path separator here, so templatePath should be /app\\/templates\\/.+.coffee$/ for both windows and mac.\nWill fix in a bit unless y'all get to it first.\n. Not sure what you mean?\n. That could be because it was initially doing:\ngrunt watch --config ./grunt.coffee\nbut from my knowledge ./<path> doesn't work on windows (prefix with ./). So it's been changed to\ngrunt watch --config /full/path/to/grunt.coffee\nTry replacing your cakefile with the new one here and let me know how that goes:\npackages/tower-generator/server/generators/tower/app/templates/cake\n. @pashaie also, what's the value of grunt --version, mine is:\n$ grunt --version\ngrunt v0.3.15\nIt could also be an issue with grunt versions.\n. @TheHydroImpulse does the full path change (copy/pasting the new Cakefile) work for you on windows?\n. That example (and the docs on the site) are out of date (will be updated soon). That functionality is already included in the model so you don't need to include it directly.\nDoes that solve your issue? If not, paste your model code, that will help. Thanks!\n. As a less-robust solution for now, does the last commit work for you?\n. @yagooar It looks like that generated code for io needs to be delayed until it's defined:\nhttps://github.com/viatropos/tower/blob/4ff0b9d3a08faf3c8173759a959d3977ea50f7e2/packages/tower-application/server/application.coffee#L186\nTry waiting until the next tick:\ncoffeescript\nApp.configure ->\n  # ...\n  # For \"web sockets\" on heroku:\n  process.nextTick ->\n    App.io.configure 'production', ->\n      App.io.set('transports', ['xhr-polling'])\nHeroku doesn't support web sockets so all this is doing is telling socket.io to fall back to ajax polling (https://devcenter.heroku.com/articles/using-socket-io-with-node-js-on-heroku). Amazon is probably the best place (and nodejitsu if it's public yet) to really test out web sockets.\n. Yeah there is a lot of room to improve the way tests are written in Tower's src, feel free to refactor it so it becomes more useable, I will definitely merge pull requests for this stuff.\nA few notes. We should break up tests into as small of units as possible, but sometimes it's clearest/simpler to group a couple assertions into a single test (Rails' test suite has 2-3 assertions per test often).\nAlso, you can run single tests at a time by matching patterns in the test string:\nmocha $(find test -name \"*someTest.coffee\") -g \"some pattern\"\nThat helps at times. But refactoring the tests so you don't have to comment out assertions while you're fixing something is a great idea, let me know if you have any questions.\n. I've started porting the test suite to JavaScript:\nhttps://github.com/viatropos/tower/blob/tests2js/test/cases/model/shared/attributesTest.js\nEventually the source code will be in JavaScript too.\nThe only thing left in that tests2js branch is creating the JavaScript API for the models/controllers, something like the stuff in this gist:\nhttps://gist.github.com/8e78b21b37d21f43c495#file_test.js\nComing along! With pure JS we can sneak in many more optimizations. If anyone wants to help convert to JS (basically just copy the generated JS and clean it up a bit) feel free. Will take any-sized pull requests!\n. Didn't think that was possible to get 100% haha, nice! Yeah, I'm liking the Ember object / JS API better than the CS API, even though the CS API is \"cleaner\" (or more readable). It just feels more powerful.\nI'm going to get the JS API for the model working on the tests2js branch, but I've also started on a src2js branch. Only converted one file so far (slightly modified the generated coffeescript file, will cleanup more):\nhttps://github.com/viatropos/tower/blob/src2js/packages/tower/server.js\nThat src2js branch also has a better grunt file, which will copy any .js from packages to lib.\n. What version of node are you using? This is I think b/c either node 0.6 or 0.8 moved path.existsSync to fs.existsSync, so if you're using an old version of node then fs.existsSync will be broken.\nTry upgrading your node version and let me know if that fixes it.\n. I think the directions may be off. The watcher doesn't currently notice when files are created I don't think (this is an issue with grunt, but grunt 0.4.0 which is going to be released soon fixes this).\nIf you run the scaffold generator, and then run cake watch, does it work then?\n. On the road, will get more into this with u in a bit. Check these things though:\n- node version\n- coffeescript version (global and local)\n- tower version\n- grunt version (global, maybe local but I don't think were using local grunt)\n- OS version\nThis seems like a coffeescript compilation problem. Try to npm install it in your app. Also, are you using a linked tower (via npm link tower where your linking a locally cloned version of the tower repo from github) or did you npm install it?\nAlso make sure both the local and global versions of tower are the same, and grunt should be 0.3.x, not 0.4.x (they may have updated in which case I will need to update tower.\nLet me know if any luck!\n. Hmm... everything looks fine.\nI am using:\n- coffee-script 1.3.3 (it's now 1.4.0 which you're using). Upgrading mine didn't change anything, still works.\n- grunt 0.3.16\n- node 0.8.2\nNone of these things should affect it.\nSo it looks like the original error this issue was for is because the App.User model doesn't exist. This may be happening because the controller code is being required before the model code. I'd make sure the models are loaded before the controller just so we can scratch this off the list, but I don't think this is the issue.\nThe error occurs in the @scope method which tries to get the App.User class to setup data syncing stuff. But if the model isn't yet required, that could cause the error.\nAnother thing it could be... Try logging the value of @metadata() in the controller on startup:\n``` coffeescript\napp/controllers/server/usersController.coffee\nchange this:\nclass App.UsersController extends App.Application\n  @scope 'all'\nto this:\nclass App.UsersController extends App.Application\nconsole.log App.UsersController.metadata()\n```\nAlso do the same thing in the client controller, just to make sure the client controller isn't being required (it shouldn't be being required at all):\n``` coffeescript\napp/controllers/client/usersController.coffee\nclass App.UsersController extends App.Application\nconsole.log App.UsersController.metadata()\n```\nIt could be that the value of metadata().resourceType is blank. This is what App.UsersController.metadata() should look like (params/callback may be different, but the strings are what are important):\njavascript\n{ className: 'UsersController',\n  resourceName: 'user',\n  resourceType: 'User',\n  collectionName: 'users',\n  params: {},\n  renderers: {},\n  mimes: { json: {}, html: {} },\n  callbacks: { action: { before: [Object], after: [] } },\n  helpers: [],\n  belongsTo: [],\n  subscriptions: [],\n  layout: 'application',\n  scopes: {},\n  scopeNames: [] }\nIf metadata().resourceType is different, I think this is because of a coffee-script compilation problem (I have run into your issue before). To test that the coffee-script version of the file is correct... OH! I think I know what it is now.\nTower has coffee-script extensions that basically allow coffee-script's class declaration to be translated to Ember's class system (one of these other issues goes into detail on how/why this is necessary).\nThe problem you are facing may be because coffee-script is installed in your app directly and in tower's source. This is a problem because in the tower module, it is overriding its own coffee-script with the extensions, but that may be a different coffee-script than what your app is using:\n./node_modules/coffee-script\n./node_modules/tower/node_modules/coffee-script\nIf your app calls require('coffee-script') anywhere, it will cause NPM to use the ./node_modules/coffee-script version instead of the ./node_modules/tower/node_modules/coffee-script one. If that happens then in tower/blob/master/coffee-inheritance.js, which is required from tower/blob/master/index.js, will only be applied to the coffee-script used in ./node_modules/tower, but not in your app. However, if your app doesn't require coffee-script directly, then the coffee-script used in Tower will be used everywhere. Hope that's not too confusing.\nAnyway, try removing the coffee-script module in your app (delete ./node_modules/coffee-script). Let me know how that goes.\n. Building off @TheHydroImpulse's comment, you can just not use client-side routing and every route will hit the server and you can have it render plain HTML the same way Rails would. In the future we're going to implement some sort of way to get both client-side views/routing (dynamic pages) and SEO/static pages, but we're going to have to work with Ember on that one. For now though, you can get SEO benefits by rendering static HTML.\n. Thanks for posting. This hasn't been fully implemented yet, you are welcome to work on it and send a pull request if you'd like!\nThis should first be implemented using the server-side tableFor code, but should also be implemented in Ember on the client using the Ember.View in some way (maybe a mixin?).\n. This is a bug that has to do with the coffee-script extensions in ./coffee-inheritance.js. We just need to change this (coffee-script output for an App.Address model):\n``` javascript\nApp.Address = (function(_super) {\n  // since this is being declared as a local variable, uglify.js will minify it,\n  // making it App.r or some random shortened name, vs. App.Address.\n  var Address;\nfunction Address() {\n    return Address.super.constructor.apply(this, arguments);\n  }\nAddress = __extends(Address, _super);\n// ...\nreturn Address;\n})(Tower.Model);\n```\nIf you would like to fix this let me know, I'll do what I can to help. Won't be able to get to this for a bit (workaround at the bottom of this post).\nOne approach is to change this line:\njavascript\nAddress = __extends(Address, _super);\nto something like this:\njavascript\nAddress = __extends('Address', _super);\nThat way it passes the string 'Address' to __extend, and we can use that to set the class name. The way we're hooking into this is found here:\npackages/tower-support/shared/class.coffee#L8-12\ncoffeescript\n__extend: (child) ->\n  object = Ember.Object.extend.apply @\n  object.__name__ = child.name\n  @extended.call(object) if @extended\n  object\nBy passing a string instead of the result of var Address into that function, the __extend method above would just do this:\ncoffeescript\n__extend: (name) ->\n  object = Ember.Object.extend.apply @\n  object.__name__ = name\n  @extended.call(object) if @extended\n  object\nTo make this change, we have to modify the ./coffee-inheritance.js file so it passes a string, like above:\njavascript\nAddress = __extends('Address', _super);\nI haven't dug into the coffeescript compiler that hardcore so haven't been able to implement this. Would love help.\n\nNote: A temporary workaround is to set the @__name__ property on your model, like this:\n\ncoffeescript\nclass App.Address extends Tower.Model\n  @__name__: 'Address'\n. @edubkendo Ideally I'd think it would be useful to solve the custom coffee-script stuff (maybe using CoffeeScriptRedux like you mentioned). If we can get it to work just as we originally desired (with custom overrides for extends for Ember, etc.) then if anyone who really loved CS and it's class declaration syntax used tower, they would be greeted with a super complete API.\nI would like to support those things, but it would be purely just to round out the experience with the API for CS users. This kind of stuff will really just be extras to the API; everything will still default to JS/CS like you're saying.\nSo I personally probably wont work on this \"CS API stuff\" in the short term, but it's cool if anyone wants to make a pull request for this. I will still be working on the JS API (which will make updates to the CS api too).\n. Just taking a brief look at this, it looks like what you're doing is correct but this may not be fully implemented in Tower yet.\n. nice, thanks!\n. If you want to try making a simple node wrapper to this ruby gem, the watcher will become seriously optimized:\nhttps://github.com/guard/listen\nI was getting <2% CPU after initialization.\nMaybe we can say, \"if you want better performance with the watcher, then gem install listen if you have ruby installed.\" Then we just check if we can spawn a simple ruby script that just streams the output from the listen gem. This is all it really takes:\n- run the ruby script from node.js: https://github.com/viatropos/design.io/blob/master/src/design.io/listener/mac.coffee#L7-L22\n- and the ruby script looks like this: https://github.com/viatropos/design.io/blob/master/lib/design.io/listener/mac.rb\nSo for the listen gem, the ruby script would probably just be like:\n``` ruby\nrequire 'rubygems'\nrequire 'listen'\nrequire 'json'\nSTDOUT.sync = true\nio          = STDOUT\ndirectory   = ARGV[0] || Dir.pwd\nlatency     = ARGV[1] || 0.2\nlistener = Listen.to(directory)\nlistener.latency(latency)\nlistener.change do |modified, added, removed|\n  # just parse this json stream in node.\n  io.write(JSON.stringify('modified' => modified, 'added' => added, 'removed' => removed))\nend\nlistener.start\n```\nIf anyone's interested in getting this going let me know.\n. What would be even more awesome is if we wrapped this in a top-level API for Tower, so you could watch files in an optimized way anywhere you want, such as:\ncoffeescript\nTower.watch process.cwd(), (files) ->\n  files.changed # ['package.json']\n  files.added # []\n  files.removed # []\nwhere Tower.watch would try to use this custom listen wrapper if possible, otherwise falling back to fs.watch (or better, gaze).\n. @edubkendo and @tremby if you gem install listen, which uses rb-inotify (https://github.com/guard/listen/blob/master/lib/listen/adapters/linux.rb), and run the following to watch the entire directory tree, is it still using the same (large) amount of CPU?\n``` ruby\nfile named watch.rb\nrequire 'rubygems'\nrequire 'listen'\nlistener = Listen.to(Dir.pwd)\nlistener = listener.latency(0.2)\nlistener = listener.change do |modified, added, removed|\n  puts modified, added, removed\nend\nlistener.start\n```\nIf you add that to the root of your tower repo, name it watch.rb, and run:\nruby watch.rb\nand then change some nested files, you should see the names of the changed files in the terminal.\nWhen you do this, what does your CPU usage look like?\nMy CPU, on a MacBook Pro upgraded to 10.8.2 with Xcode 4.5.2 installed, is only at <1%. The best part is, I can change any file in the directory tree and will get notified; it doesn't seem to matter how many files there are. Though, this listen gem is computing a fingerprint from the file if the mtime hasn't changed, which can be kind of slow on very large files (more than a few megabytes, which isn't relevant when it comes to watching source code files, only PDFs, data-dumps, images, etc.).\nOn a Mac this watch method is WAY better than what Node.js does. Node's watcher on the Mac uses kqueue, which gives you file-level notifications. The alternative is FSEvent which gives you directory-level notifications, on entire trees of files. For kqueue, you have to watch each individual file, for FSEvent, only a single directory.\nOn Linux though, Node.js uses inotify, and this listen rubygem uses it also. So there may be no benefit there on Linux, but I'm interested to see if you guys see any performance improvement. If so, I'll make a watcher module for Node that wraps this gem, otherwise I'll just do something simpler for Mac-only.\nSome relevant node.js issues on their watcher:\n- https://github.com/joyent/node/issues/1986\n- https://github.com/joyent/node/issues/2023\n- https://github.com/joyent/node/issues/2062\n- https://github.com/thibaudgg/rb-fsevent/issues/38\n. @TheHydroImpulse good to know. So if you find out more about which gem/module is the most optimized for the different operating systems (windows, linux, mac), definitely post a link. Over time perhaps we can compile a list of the best/fastest watchers for each OS and wrap them up for node.\n- https://github.com/thibaudgg/rb-fsevent is the fastest on a Mac. We could wrap the raw C binary @ttilley created (the fsevent_watch command https://github.com/thibaudgg/rb-fsevent/issues/38#issuecomment-10925351).\n- https://github.com/guard/listen wraps rb-fsevent, and has linux/windows adapters, but I only know rb-fsevent is the best for Mac. This listen gem also has a nice bit of code wrapping rb-fsevent so it gives you the exact file that changed, whereas FSEvent only tells you of the directory.\n. Yeah that sounds good. Ideally there is a general module (like https://github.com/shama/gaze, which is a good start for node) that anyone can use for better, intuitive, fast file watching support in node. Then we wrap that in Tower so you can do:\njavascript\nTower.watch('./**/*.js', function(files) {\n  files.changed\n  files.added\n  files.removed\n});\nThe API could also be similar to guard/listen:\njavascript\nTower.watch('./**/*.js')\n  .ignore(/node_modules/)\n  .filter(/Test\\.js$/)\n  .latency(0.2)\n  .forcePolling(true)\n  .pollingFallbackMessage(false)\n  .on('changed', function(files) { })\n  .on('removed', function(files) { })\n  .on('added', function(files) { })\n  .start();\n...where essentially Tower.watch() is just returning something like a stream.\nI'll be messing with rb-fsevent and the executable (https://github.com/thibaudgg/rb-fsevent/issues/38#issuecomment-10925351) to speed up node development for Tower - and to stop killing my fan, which now has to be replaced :p\n. How about this:\n``` coffeescript\nclass App.Address extends Tower.Model\n  @validates 'state', in: ['ON', ...], if: 'countryIsCA'\ncountryIsCA: ->\n    @get('country') == 'CA'\n```\nor a lambda/anonymous version:\ncoffeescript\nclass App.Address extends Tower.Model\n  @validates 'state', in: ['ON', ...], if: -> @get('country') == 'CA'\nand maybe even, if in is an array of objects, then this:\ncoffeescript\nclass App.Address extends Tower.Model\n  @validates 'state', in: [\n      value: ['ON', ...], if: 'countryIsCA'\n    , value: ['NY', ...], if: 'countryIsUS'\n  ]\nor this (where if is the key):\ncoffeescript\nclass App.Address extends Tower.Model\n  @validates 'state', in:\n    countryIsCA: ['ON', ...]\n    countryIsUS: ['NY', ...]\nOr maybe having that sort of DSL is overkill, and just doing it manually is better like what you're suggesting (the more I think about it, it's probably easier this way):\ncoffeescript\nclass App.Address extends Tower.Model\n  @validates 'state', in: ->\n    if @get('country') == 'CA'\n      ['ON', 'QC', 'NS', 'NB', 'MB', 'BC', 'PE', 'SK', 'AB', 'NL', 'NT', 'YT', 'NU']\n    else\n      null\n. Thanks!\n. We're working on the new site, very excited about it!\n. I haven't used vhosts much yet, but server-side Tower is built on Express, and they have a simple API for doing this:\nhttp://stackoverflow.com/questions/5791260/how-can-i-configure-multiple-sub-domains-in-express-js-or-connect-js\nIn Tower you can access the \"express\" server via App.app (and the http server itself via App.server, going to clean this api up in the future). You can add the vhost functionality in app/config/server/bootstrap.coffee for now, something like:\n``` coffeescript\napp/config/server/bootstrap.coffee\nApp.configure ->\n  # ...\n  @use('vhost', 'm.mysite.com', require('/path/to/m').app)\n  @use('vhost', 'sync.mysite.com', require('/path/to/sync').app)\n  # ...\n  @use Tower.MiddlewareRouter\n```\nThe @use method just delegates to the express server:\npackages/tower-application/server/application.coffee#L114-L123\nIf you want to manipulate the express server directly, you could do that like this:\ncoffeescript\nApp.configure ->\n  express = @app # or App.server, same thing\n  # ...\nLet me know if you get vhosts running with this, would be nice to add to the wiki.\nIs this what you're asking?\n. Cool, so all of your sub-apps are going to be tower apps as well?\nThere might be a couple little issues with this to think through:\n1. How the sub apps' client-side code gets loaded.\n2. How the multiple App objects related to each other.\nQuestion, do the sub apps run in a totally separate contexts/vm's, or are they all sharing the same global context?\nIf they're sharing the global context, then we may have to modify the App object, which is an Ember.Application object, which only allows one instance to be created. Let me know if this needs to be done. If not, then each sub-app would have it's own App object.\nAlso, the sub apps should export the App, which they aren't doing right now. That is defined in app/config/shared/application.coffee, so maybe changing it to this:\ncoffeescript\nglobal.App = module.exports = Tower.Application.create()\nIf you did that, then your require('/path/to/m/tower/app').app would work.\nI'll have to look more into sub-apps/vhosts, but if they can all share the same App instance, that would be ideal. Otherwise we'll have to discuss naming conventions and whatnot for the subapps, which might mean starting to implement something like railties in Tower.\nThoughts?\n. Awesome, thanks!\n. The defaults work by first checking if the field is undefined, and if so, it will call the function:\npackages/tower-model/shared/attribute.coffee#L117-L119, specifically:\n``` coffeescript\nwhen you call record.get('x'), and it's undefined and you've defined a default value...\n...\nvalue = @getAttribute(key)\nvalue = field.defaultValue(@) if value == undefined\nfield.decode(value, @)\n...\n```\nThe way you defined the default is pretty much correct, the only thing is that type: 'Hash' is a ruby-like hash, or simple JavaScript object, such as {key: 'value', key2: 'value2'} (for more info on JavaScript hash vs. object, see this: underscore/test/objects.js#L421-L449). So I would just change it to type: 'String'. Also, that crypto module only works on the server, so you might also need to check if Tower.isServer first.\nAlso, Tower is adding many useful/rails-like helpers to underscore, such as date helpers, so you can use those too (Time.now doesn't exist in Tower, but _.now does, more here: packages/tower-support/shared/format.coffee#L69-L121. Sidenote: currently, _.now is just new Date, so why not just use new Date? The reason is I'm thinking of adding functionality so that, if you wanted to run your app in the past (maybe you want to generate fake data where createdAt etc. is in the past), whenever you called _.now() it will be \"now\" in the past's frame of reference. You can't easily do that if you have new Date all through your code.\nFinally, instead of checking @isNew, if all you care about is if secret is undefined, then you can simplify the default function.\nSo this is the end result:\n``` coffeescript\nclass App.Application extends Tower.Model\n  @field 'secret', type: 'String', default: -> @doHash()\n  @field 'name', type: 'String'\n@timestamps()\ndoHash: ->\n    crypto('md5').update(_.now(), 'utf-8', 'hex') if Tower.isServer\n```\nLet me know if that works.\n. To load external libs, you can just install the node module through npm and require it:\ncoffeescript\ndoHash: ->\n  require('crypto')('md5').update(_.now(), 'utf-8', 'hex') if Tower.isServer\nNode uses CommonJS which just asks that you require(moduleName) any module you want.\nAlso, Tower lazy-loads a couple common modules (packages/tower/server.coffee#L24-L41), which you can access like this\ncoffeescript\ncrypto = Tower.module('crypto')\nThere are two main reasons for this approach:\n1. So you don't have to manually require the module at the top of your model/controller/etc files, which will slow down server startup the more modules your whole app requires at once.\n2. So the browser can also require modules (until we integrate a more robust solution).\nSo, in your specific case, you can just do this:\ncoffeescript\ndoHash: ->\n  Tower.module('crypto')('md5').update(_.now(), 'utf-8', 'hex') if Tower.isServer\nOne final note\nSince this code of yours is dealing specifically with server-side functionality, and since it is relating to security, it's up to you to prevent this code from being compiled to the ./public directory - where anyone can view it.\nHere's the recommended approach for doing that.\n1. Put any server-side code into the server folder for your specific app/* folder. If you're creating a server-side-only model, then you can put it in app/models/server/myModel.coffee. You can also put in model \"mixins\" or helpers in that folder too, but, similar to how you have in Rails app/helpers which you can include into app/controllers, I like the idea of having \"mixins\" in app/concerns which you include in app/models. Maybe there is a better approach to this, open to ideas. The reason you'd want to do this is, the files in app/concerns are loaded before app/models, so it just works. If you put mixins into app/models, you would have to make sure your mixins are manually required before the model.\n2. Include that mixin in your model code, which in your case is app/models/shared/application.coffee (or could also just be app/models/application.coffee).\n``` coffeescript\napp/concerns/server/application/secretsMixin.coffee\n\nor, a perhaps simpler approach,\nbut you have to make sure the files are loaded in the right order:\n\napp/models/server/applicationSecretsMixin.coffee\nApp.ApplicationSecretsMixin =\n  # included is a special method that is called when the mixin is included in a class. \n  included: ->\n    @field 'secret', type: 'String', default: -> @doHash()\ndoHash: ->\n    Tower.module('crypto')('md5').update(_.now(), 'utf-8', 'hex')\n```\n``` coffeescript\napp/models/application.coffee\nclass App.Application extends Tower.Model\n  @include App.ApplicationSecretsMixin if Tower.isServer\n@field 'name', type: 'String'\n@timestamps()\n```\nBy separating your code like this, your crypto code won't be compiled to the ./public folder, so it's secure. FYI, anything in a app/*/server folder will not be compiled to ./public.\nAlso one last note FYI. An additional benefit of placing \"model mixin code\" into app/concerns/<modelName>/someMixin.coffee is once you get into that pattern, you start really being able to modularize your code well, and minimize the amount of code the client gets. For example, if you are building an app that publishes to Facebook/Twitter/etc., you may want to create a few functions for each server on your model (maybe it's an App.User model, and they've authenticated via OAuth to these providers). So you could do this:\n``` coffeescript\napp/models/user.coffee\nclass App.User extends Tower.Model\n  if Tower.isServer\n    @include App.UserFacebookMixin\n    @include App.UserTwitterMixin\n    @include App.UserGitHubMixin\n    # etc.\n# other client/server shared code below\n```\n``` coffeescript\napp/concerns/user/facebookMixin.coffee\nApp.UserFacebookMixin =\n  postToFacebook: (post, callback) ->\n    # do some facebook api thing here\napp/concerns/user/twitterMixin.coffee\nApp.UserTwitterMixin =\n  postToTwitter: (post, callback) ->\n    # do some facebook api thing here\n```\nHope that helps.\n. Oh one other note in terms of security. Make sure to add that secret property to the set of protected attributes, so people can't pass a value in through a request. Not sure if you're familiar with this so this is just for reference (see the Rails Security Guide's section on mass assignment.\nThis is how GitHub got hacked.\nBasically, people can submit anything they want to your app, so they might send params that get parsed into the @params object, maybe they send this:\n``` coffeescript\nconsole.log(@params)\n=> {\"application\":{\"name\":\"My App\",\"secret\":\"hacked-secret\"}}\nApp.Application.create(@params)\n```\nSo they were able to create a record with their own secret.\nTo avoid, this, all you need is:\n``` coffeescript\nclass App.Application extends Tower.Model\n  @field 'secret', type: 'String', default: -> @doHash()\n@protected 'secret'\n```\nNow, if that attribute is passed into App.Application.create(secret: 'asdf') (or App.Application.build or record.updateAttributes), it will just get deleted from the hash/object.\nTo set protected attributes, you just have to set it manually:\ncoffeescript\nclass App.ApplicationsController extends Tower.Controller\n  create: ->\n    record = App.Application.build(@params.application)\n    # and if you wanted to set the secret manually:\n    record.set('secret', record.doSecret())\nFinally, you can assign \"roles\" to protected attributes, which allows you to override them. So say any admin can include secret in their params hash, but by default nobody can. You can do that with this:\ncoffeescript\nApp.Application.build({secret: 'asdf'}, as: 'admin')\nSee that mass assignment section in the Rails Security Guide for more details if you're interested, it's all mostly implemented in Tower. Also the tests show more examples:\ntest/cases/model/shared/massAssignmentTest.coffee\n. @1xizt you're right, MongoDB is great but it's not acid compliant for ecommerce type transactions. Glad to hear you're enjoying coffeescript :)\nIf you'd like to take a swing at making a SQL adapter for Tower, let me know. It should be easy to do, the main thing that needs to be done is parsing the SQL command strings. But I think that's already been done somewhere in the node community, so all you'd really need to do is plugin their parser, and plug that into Tower. I'll work with you on that if you're interested, let me know!\nHere's some notes on how to create a custom store:\nhttps://github.com/viatropos/tower/wiki/Creating-a-Custom-Store-in-Tower\nYou can tinker with them here (I've created the classes w/o implementation so far):\nhttps://github.com/viatropos/tower/tree/master/packages/tower-store/server\nAs a side note, having a SQL adapter would also make it possible to use SQLite in the browser, which would be cool for client-side-only demos.\nSome examples:\n- https://github.com/kripken/sql.js\n- https://github.com/hiddentao/squel (http://hiddentao.github.com/squel/)\n- https://github.com/forward/sql-parser\n- pegjs, you could probably build a solid SQL parser pretty quickly with this: http://pegjs.majda.cz/online (they built a javascript parser in it! https://github.com/dmajda/pegjs/blob/master/examples/javascript.pegjs)\n- https://github.com/1602/jugglingdb/blob/master/lib/sql.js\nIf you find any better parsers/examples, please post.\n. Awesome that would be great! Sequelize looks perfect. Looking at the package.json it looks like it loads node-mysql and can load the popular sqlite and postgres node libs as well.\nIt seems that you could combine sequelize with squel (for building the SQL query strings), and then wrap each db with with a Tower.MysqlStore, Tower.PostgresStore, etc.\nLooking quickly at node-mysql and sequelize, it doesn't seem there is a clean way to build the SQL string, which is why I recommended squel. But if sequelize does support it, then you would only need that.\nTo connect this with tower, you would just create a custom store (from that wiki link above). See the memory and mongodb stores in the tower source code for examples.\nThe real meat comes in with the cursor, which is passed in as the first argument to find, insert, update, destroy, count, and exists. The cursor is a Tower.ModelCursor instance. This is the return value from common API calls such as:\ncoffeescript\nApp.User.all()\nApp.User.where(active: true).count()\nBasically, when you call App.Model.where or any other \"chainable scope\" methods (borrowing the Rails term), it internally keeps a \"cursor\" object that contains all of the query parameters you pass into where/order/page/etc. Once you call all, find, create, update, destroy, count, exists on that \"chainable scope\", it \"compiles\" the query parameters into the cursor, and passes that to the specific database's (Tower.Store instance) corresponding method.\nNote, the Tower.ModelScope api (which just wraps the Tower.ModelCursor API, it's pretty much just there for the DSL), adds the additional method all, and uses create instead of insert. It also has first and last. The Tower.Store only has find, insert, update, destroy, count, and exists. This is because all, find, first, and last on the Tower.ModelCursor are just sugar syntax; for example, first just adds limit: 1 to the cursor just before passing it to the Tower.Store.\nSo all you need to know is that, in your custom store, the first argument to those 6 methods is a Tower.ModelCursor. From that, you can call cursor.toParams() and it will compile it to a simple hash such as:\njavascript\n{\n  sort: [['createdAt', 'desc']],\n  page: 2,\n  conditions: {\n    firstName: 'John',\n    active: true,\n    createdAt: {'>=': Date(Nov 19, 2012)}\n  },\n  limit: 20\n}\nSee the Tower.MongodbStoreSerializer for examples of how to manipulate the cursor's params. Basically, you would just go through the cursor.toParams().conditions hash, and pass it to the squel query string builder.\n``` javascript\nstore = this;\nsquel.select()\n  .from(_.camelize(store.className), \"*\")\n  .where(prop, val)\n```\nThen pass that query string to sequelize!\nSo (a simple/pseudo) Tower.MysqlStore#find might look like this:\n``` coffeescript\nclass Tower.MysqlStore extends Tower.Store\n  find: (cursor, callback) ->\n    params = cursor.toParams()\n    conditions = params.conditions\nqueryString = require('squel').where(conditions)\n\nrequire('sequelize').execute queryString, (error, rows) =>\n  for row, i in rows\n    rows[i] = @serializeModel(row) # constructs model instance, see superclass\n\n  callback(null, rows)\n\n```\nLet me know if you have any questions, I'll be here.\n. Damn @TheHydroImpulse, making serious progress, pretty sweet. Any chance you can post a list of the different events/states/phases/etc. that we would want to provide dependency load hooks for? That would help finalize it.\nRandom thoughts...\nMy first impression is that having this sort of API would definitely be powerful for:\n- hooking your module/package into the load process\n- lazy loading your package's internal dependencies (using that string/eval bit you posted if possible!)\n- having a consistent/easy way for defining both client and server dependencies\nNot sure exactly what you mean when talking about concatenating/production/etc., but I think all of that should be done with Grunt from now on (moving the tower-application/server/assets.coffee code to grunt for example). Development should load raw files, but compiled languages like coffeescript/stylus/etc. should be compiled to the target language first, even in development (until error handling is exact). But the compiled coffeescript should stay in individual files during development (direct 1-1 map), only concatenating in production.\nI'm also thinking we don't want to create a package management framework that's separate from NPM. What advantages does Meteor's package management system have over NPM, or rather, what makes it awesome from your experience? (I haven't used it).\nThe main thing is, developers should be able to create a server-side only, client-side only, or server-and-client module/plugin using the default tools they're used to (npm on the server, nothing, or jQuery, on the client). Then essentially this package API would make integration more powerful, something like that.\nI like the way you've described it:\n\na specific API to communicate and modify the core and flow of the application\n\nNPM can't really do that. So I'm wondering what your thoughts are of how this would play alongside with NPM.\nThe last thing is I'm starting to move to simpler/shorter APIs wherever possible. Specifically I'm thinking:\n- Minimize the use of methods on namespaces. Only use a method on a namespace if the method is very specific and only used on that class/object, such as Tower.Model.field (which I'm even thinking should be simplified to just Tower.field, or at least aliased).\n- Make the methods chainable wherever possible. So you could do this.addFile('client.js', 'client').addFile('server.js', 'server')...\nSo instead of Tower.Ready.x, just Tower.ready. I'm doing this with validators, operators, modifiers, serializers, and a few other things right now in getting this better model api going. I'll be jotting notes down for the new API here (though it's just notes, only some of which has been implemented: https://gist.github.com/b6c811c7a27ee944317d). The goal is to merge express and ember api's where possible.\nAlso might be possible, where the Tower.Ready.new and Tower.Ready.is both run the callback Tower.ready based on the state of the application. I think jQuery does this - so if you lazy load a jQuery plugin, and it has $(document).ready, it will still execute.\nVery excited to see this coming along.\nThoughts?\n. Compiling Tower's client-side source code \nI get that rebuilding the entire dist/tower.js for the client is slow, but kind of confused from the first part about the tmp file system. If the goal is to speed up development, one other approach would be to make it so the tower-<module-name>/client.coffee file only has a bunch of require './x.coffee', and then use that to create a set of <script> tags using grunt. Then we just load all of the tower files individually on the client during development; there won't be any require calls b/c grunt will convert them to <script> for the browser. That would be simple and would speed things up. Maybe a short term solution.\nThe copy:js task should only be run once, when you first start running the watcher for developing (or contributing to) the tower source (in coffeescript). But once the watcher is running (make watch), the copy:js command shouldn't run again. So that 5s lag shouldn't be an issue if I'm understanding correctly, but if you can speed it up that'd be cool too.\nAlso not sure why the grunt watch task takes 5 seconds to run every time you save a file, that definitely shouldn't be happening. It should, however, be the case if you are talking \"recompiling the dist/tower.js file for the client every time you change any file in the tower src\", because it's concatenating all the files from scratch and then compiling the coffeescript to javascript...\nIn the end, at least for the simple solution to making development of the tower client-side src faster, I think the following should work:\n- make tower-<module>/client.coffee only contain require statements\n- compile those require statements into an array of <script> tags\n- load those script tags into the browser.\nSo right now, the tower-controller/client.coffee looks like this:\n``` coffeescript\nrequire './shared'\nrequire './client/controller'\nrequire './client/actions'\nrequire './client/elements'\nrequire './client/events'\nrequire './client/instrumentation'\nrequire './client/states'\nrequire './client/flash'\nTower.Controller.include Tower.ControllerActions\nTower.Controller.include Tower.ControllerElements\nTower.Controller.include Tower.ControllerEvents\nTower.Controller.include Tower.ControllerInstrumentation\nTower.Controller.include Tower.ControllerStates\nTower.Controller.include Tower.ControllerFlash\n```\nBut if you put all that Tower.Controller.include code into another file, then you would end up with this:\ncoffeescript\nrequire './shared'\nrequire './client/controller'\nrequire './client/actions'\nrequire './client/elements'\nrequire './client/events'\nrequire './client/instrumentation'\nrequire './client/states'\nrequire './client/flash'\nrequire './client/includes'\nThen grunt will watch for any changes to tower-*/client.coffee, and compile the script tags:\nhtml\n<!-- the contents from `shared` ... -->\n<script src=\"/tower/lib/tower-controller/client/controller.js\"></script>\n<script src=\"/tower/lib/tower-controller/client/actions.js\"></script>\n<script src=\"/tower/lib/tower-controller/client/elements.js\"></script>\n<script src=\"/tower/lib/tower-controller/client/events.js\"></script>\n<script src=\"/tower/lib/tower-controller/client/instrumentation.js\"></script>\n<script src=\"/tower/lib/tower-controller/client/states.js\"></script>\n<script src=\"/tower/lib/tower-controller/client/flash.js\"></script>\n<script src=\"/tower/lib/tower-controller/client/includes.js\"></script>\nAnd if there is just some single hook in the server-side templates, then you can put into coffeekup a helper such as javascripts towerSrc, and it would expand to all of those script tags.\nThat would mean this:\n- individual files are compiled one at a time for the client (just as they are on the server now)\n- it's fast, there's no recompiling all of dist/tower.js at once, which is super slow like you're saying\n- we don't need another package management system\nAt least for the short term.\nPackage management\nI love the idea of unifying the client/server package management system. I am not a fan of creating another package management system specifically for Tower. I am a fan of creating a generic client/server package management system for JavaScript, which definitely seems like the direction you're going. When it comes to package management, Tower should use what the community uses. Right now there is a nice/standard node package manager, but no nice/standard browser package manager. A lot of people have tried, some include:\n- https://github.com/twitter/bower\n- https://github.com/bpm/bpm (I think this is what Ember uses, or used to use)\n- https://github.com/bpm/spade (bpm may have evolved to this)\nI started integrating bower (that's the component.json in the tower repo), but it's not perfect yet.\nMy thinking is, you're digging really deep into this package management stuff, and if you find a solid solution like you're getting too, I'd create another project like your resolve.js and make that a generic client/server package manager.\nBut I also think that it would be easier and more adoptable to develop on top of NPM if at all possible. I'm tending toward not having tower package x mainly because it starts creating some sort of \"vendor lockin\".\nPotentials for integrating client-side stuff with NPM are to either:\n1. add custom config variables to package.json\n2. add custom run-script hooks that tower looks for\n3. add a file such as tower.init.js, or your tower-package.lock\nPersonally I am most a fan of the first one, because you could basically just define browserDependencies, and maybe an order to them, and then w/ grunt (watching a generated tower app), it would check each package in node_modules for browserDependencies, and compile them to vendor/javascripts or public/javascripts or whatever. This way, people can build libraries for tower without any additional knowledge.\nThen to hook into customizing the app startup or whatever (the hooks), if there was a tower.init.js (similar to how you add the railtie.rb file), tower could load that.\nI'm also a fan of what you're saying, that this thing would wrap your modules with the callback stuff. That's clean.\n. Looking good.\nI like the idea that ready states are the names of each package, and you can have sub-events like sockets:initialized, that's solid.\n\nPackages would have to be independent from each other. One would need to have dependencies, that's where the package.js comes in. You would specify other packages you need. controllers would need models and models would need sockets or something.\n\nIs there a way to do this with just package.json? The \"other packages\" could be tower- or non-tower-specific modules, installable from NPM, so instead of a package.js specifying the tower packages, could we just figure that out by inspecting the packages in dependencies and devDependencies, etc? That would be cool.\nYou could also add a boolean to the package.json, such as \"tower\": true, to aid in the traversal. This seems like it would be equivalent to adding a package.js to each sub-package.\nFor the package API, what if it was just a separate client/server git repo, maybe packager.js, so the api was this:\njavascript\npackager.register(function(){\n  // same stuff you posted above in Tower.Package.register\n});\nThis would make it usable outside Tower. I would love using something like this, that worked the same on the client and server. Maybe for both node.js and browser support:\n``` javascript\n// so it's global both in node and the browser\nvar root = typeof window === 'undefined' ? global : window;\nroot.packager = {\n  register: function() {}\n};\n```\nAlso starting to wonder if we can somehow make this packaging stuff a grunt-contrib package. This way if your project uses grunt to do all its build stuff, we can just look for some grunt function such as grunt package:client and run that, which would output a package.client.js and package.server.js with the packager.register code in it. Just throwing out ideas.\nI'm onboard with the things you've described in the last few posts. Let me know when I can mess around with it. Going to do a bunch of API stuff today. Cheers.\n. Sweet, this sounds great. Yeah calling it package.js makes sense.\n. When you start the cake watch process, the vendor/javascripts are copied.\n. awesome.\n. I totally agree, when 0.5.0 gets released we should have a few screencasts, a new site, and up-to-date documentation ready to go. I haven't thought of that blog idea, but it sounds great - every few weeks posting what we've been working on, new developments, challenges, etc.\nI also agree that it's pretty rare that frameworks/projects in the past had enough docs/screencasts. It's because it takes a lot of time, and it's tough to say \"this screencast is good enough\" if you're not in the flow of making screencasts regularly (like, perhaps, railscasts or peepcode).\nDo you have any ideas for screencasts and/or posts in mind? Maybe creating a list of desired docs/videos would be inspiring.\nI have been doing a lot to standardize the API, and keep it local so as not to confuse anyone. It would be nice to have such docs/screencasts using a stable API so we can publicly discuss that kind of stuff.\n. Does /posts/:postId/comments/new work instead? Then you access the App.Post in the comments controller like this:\ncoffeescript\nnew: ->\n  App.Post.find @params.postId, (error, post) =>\n    # ...\n. see #388\n. Will include this in 0.5.0, it will be super optimized :). An early version is here: https://github.com/viatropos/tgen/blob/master/server.js (but it's going to move soon to https://github.com/tower/tower).\n. I think this is fixed now, yeah?\n. This is an error with the way params are rendered.\nThe router sets the controller's action calls postsController.call, and passes the params (id for the show action):\npackages/tower-controller/client/instrumentation.coffee#L25\nThat method calls controller.propertyDidChange('resource'), so that the next time you call controller.get('resource') (which is the default for the show action) it returns the new record:\npackages/tower-controller/client/instrumentation.coffee#L9\nI don't think this is fully set up. Notice the params right above that line (tower-controller/client/instrumentation.coffee#L4) are also volatile. The problem is that the id from your /posts/:id url isn't saved to the params property... what I was trying to do is save the params in the router via router.send('stashContext', params) (tower-controller/client/instrumentation.coffee#L27), and then have controller.get('params') return the router's stashed context. (This makes it so the router stores the params and the controllers just bind to it).\nBut the default show action in the controller is doing App.Post.find(@params.id), which is going to be a blank hash because Ember won't update the computed property until the next frame. This is where the error is. Notice that if you grab the params in the web console (after Ember has had a chance to run the next frame), the params has the id.\ncoffeescript\nApp.get('postsController.params.id')\nThis needs to be better implemented, any ideas? Working on this.. Try tinkering with setting the params directly in that controller.call method, and removing/modifying the params: Ember.computed... in the vendor/javascripts/tower.js and let me know if you find a solution.\n. We're refactoring/developing and preparing for a new release soon, may be a month or so. A lot of new stuff in the works.\n. In this for the long haul as well.\nI definitely agree with you guys @btbinhtran and @haohello. There needs to be a foundation set up, been considering ways of doing this. When @TheHydroImpulse and I (and anyone else interested) get the new stuff merged for release, considering moving this repo to github.com/tower/tower (same with /tower/towerjs.org) and starting to have things revolve around that (similar to jQuery, Ember, Rails, etc.).\n@btbinhtran If you would like to take lead on creating a new site that would be awesome and I'll be here to help whenever you need it (we can connect through email/skype as well). What are you planning with the main site in regards to having an immediate impact?\nI am all about improving SEO if you have any suggestions, haven't done anything in this area.\nHaving someone focused on branding would be very helpful as well. I am not a designer but love high quality design. The major things we can do to improve the website in terms of branding are:\n- creating a logo (I literally just grabbed this: http://thenounproject.com/noun/eiffel-tower/#icon-No891).\n- creating a color scheme (back then I loved the look of http://www.dangersoffracking.com/, which is where the colors come from, but I have no opinion on the best color scheme right now).\n- creating a responsive layout (that's optimized/fast, such as http://responsejs.com/)\nThe main site should just render GitHub flavored markdown, but down the road we can possibly customize this so we can add more interactive elements (such as a repl like http://try.redis.io/ or http://repl.it/languages/JavaScript, or d3 graphics/dashboards such as http://square.github.com/cubism/ since there will be docs showing how to create real-time dashboards). So in terms of improving the site now, the theme/design can be developed independently from the content, and integrating a new design would have an immediate impact. To get this out like tomorrow, it's fine with me if you even just start with the Ember website and change the look and feel, that would get us moving (https://github.com/emberjs/website).\nIf anyone has anything in particular they would like to help out on definitely let us know. If you'd rather discuss it over email or something else, don't hesitate to email me :)\n. No way. This is awesome!\n. This should be fixed now.\n. Try uninstalling the global tower then reinstalling:\nnpm uninstall tower -g\nnpm install tower -g\nAlso, if you have ever run npm link from within a cloned version of the GitHub repo, then cd into that repo and run npm unlink.\n. Maybe npm executables aren't found. Try adding your /usr/local/share/npm/bin path to your ~/.bash_profile (http://dandean.com/nodejs-npm-express-osx/#telling-your-system-where-to-find-node).\nYour ~/.bash_profile should looks something like below (this is how mine looks):\nbash\nexport PATH=\"$HOME/.rbenv/bin:/usr/local/share/npm/bin:/usr/local/bin:$HOME/bin:$PATH\"\n. See https://github.com/viatropos/tower/issues/386\n. I really like the font but sorry you can't copy the Ember tower thingy and use it for the logo :)\n\nWe have a great graphic designer onboard working on this. It's going to be awesome.\n. Try installing grunt 0.3.x, such as this:\n```\ninside your app:\nnpm uninstall grunt\nnpm install grunt@0.3.17\n``\n. Grunt 0.4.0 installed a separategrunt-cli` npm, maybe try uninstalling that too:\nnpm uninstall grunt -g\nnpm uninstall grunt-cli -g\nnpm install grunt@0.3.17 -g\nAlso, try to run the grunt executable locally (it seems you tried but I don't think you were referencing the local executable):\n```\nin your app directory:\n./node_modules/grunt/bin/grunt\nor maybe ./node_modules/.bin/grunt\n```\nIf that works, then you can change the reference in the Cakefile (from the cake watch command) to point to ./node_modules/grunt/bin/grunt rather than grunt.\n. I don't think you can run commands from inside those directories, because npm looks for modules, e.g. require('some-lib'), in relation to the app's root (I think), which has the ./node_modules folder. I think the error you just got is because of this.\nTry running the commands only from your app's root directory.\nTo manually change the Cakefile, go to Cakefile#L11 and change it to:\ncoffeescript\nwatcher = spawn('./node_modules/grunt/bin/grunt', args)\n. Ok, making progress :)\nSo that Unable to find \"grunt.js\" error is a Grunt 0.3.0 error. Grunt 0.4.0 looks for Gruntfile.js, while 0.3.0 looks for grunt.js.\nFor Grunt 0.3.x, you can also specify the path to the grunt file, so what we were doing is this (since we were using coffeescript instead of javascript):\ngrunt --config ./grunt.coffee\nSo, try running this:\ngrunt --config ./grunt.coffee\nThat x1 is not a valid Win32 application error, I have no idea... It could be because of file paths (unix uses / while windows uses \\). So if there are any paths you're writing (such as ./node_modules/grunt/bin/grunt), try using backslashes.\n. Also, that error failed to connect to [127.0.0.27017] is because mongodb isn't running. Make sure mongodb is installed and is running.\nhttp://docs.mongodb.org/manual/tutorial/install-mongodb-on-windows/\n. Yes, execute that:\ngrunt --config ./grunt.coffee\nThe cake watch command should have abstracted that, see Cakefile#L8.\n. Looks like you're close.\nTry uninstalling all the grunt modules in your app, and installing the ones that match the 0.3.17 grunt you installed. (By uninstalling grunt-contrib-less and grunt-contrib-stylus, but keeping your grunt@0.3.17, when you run npm install in your app, it will [I think] install the grunt less/stylus versions that match grunt@0.3.17). So try:\n```\nin your app directory:\nnpm uninstall grunt-contrib-less grunt-contrib-stylus grunt-contrib\nnpm install\n```\nIf you get any errors with npm install, try running the above uninstall grunt-contrib... command again, followed by npm cache clean, then run npm install again.\n. I would look in that grunt-contrib-less/package/json file and see what version of grunt it requires (in it's dependencies hash).\nAlso make sure that the ./node_modules/grunt/package.json is 0.3.17.\nYou'll have to trace the error to that grunt-contrib-less line, I can't dig any further on it. It has something to do with versions between the different grunt/grunt-contrib modules. You can also comment out grunt.coffee#L42-45 and see if that works.\n. Make sure it has specified the coffee-script config:\ngrunt --config ./grunt.coffee\nThe Cakefile should also be doing that, but since you're on windows, it's probably something like:\n```\ngrunt --config grunt.coffee\nor\ngrunt --config .\\grunt.coffee\n```\nI have never used windows so not sure. Once you know how to specify the path to the ./grunt.coffee file using the windows-specific path format, then you should be good to go.\n. Cakefile#L8-11\n. I'm not sure if this works:\ncoffeescript\n  args.push('--config', path.join(process.cwd(), '.\\grunt.coffee'))\nThat backslash \\ might be interpreted as trying to escape the g, as in \\g. Try tinkering with that, such as doing .\\\\grunt.coffee. I'm not sure if windows includes the . in relative paths either. How does windows handle relative paths, any ideas?\n. If you can get the following to work, then you are good to go:\ngrunt --config .\\grunt.coffee # or however you point windows to that path\nand in a separate window:\nnode server\nThe cake watch command can be accomplished by using the above grunt --config ./grunt.coffee.\n. Yeah, that just starts the watcher to watch your files for changes. Keep that open in one terminal window.\nThen in another terminal window (the main one you'll work from), run:\nnode server\n. Try:\ngrunt start --config ./grunt.coffee\ngrunt start compiles and watches for changes, while grunt just compiles.\n. Awesome. Yes, Tower 0.5.0 won't have this issue :). Let me know if you have you have any other questions/ideas.\n. Like @btbinhtran said too, 0.5.0 will be out soon, but if anyone would like to make this work with Grunt 0.4.0, send a pull request. Having this work between now and then would be very helpful. Any questions you have on what to do let us know.\n. Thank you!\n. Try 'yields'\n. I can merge this in the meantime, can anyone verify that this works?\n. Done.\n. Hey, have you installed with npm install tower -g?\nIt looks like we left that off the README.\n. @casgit hmm.. it looks like the tower/cli module's executable isn't being set when installed globally. For now try installing tower-cli globally:\nnpm install tower-cli -g\n. @casgit nice :)\nhmm, which docs are you following? we've changed the ways the generators work since 0.4.0, so generators are just built from cookbooks. But I don't think we've done the last bit to have default generators yet, try this (what's your OS by the way?):\n```\ncd into home directory\ncd ~\ncreate a .tower folder (your \"workstation\")\nmkdir .tower\ncd .tower\nadd a simple package.json to it\necho '{\"name\":\"tower-workstation\"}' >> package.json\n```\nThen from within that .tower directory, try installing the component-cookbook:\nnpm install tower-component-cookbook\nNow the component cookbook should be accessible from the CLI. You can use it like this (from any directory):\ntower create component my-component\nWe haven't gotten to the app-cookbook yet really, we wanted to flesh out the basics first, so it's open to suggestions.\nWhat I've been doing personally (for the moment, to create custom cookbooks) is just tower create component x, and then add a \"cookbook\": \"x\" to the package.json for it (see the component-cookbook for the implementation details). That makes it so you can do tower <action> <cookbook-name>.\nYou can also just clone the component-cookbook into that .tower/node_modules/ directory, and customize the generator however you'd like.\nLet me know how that goes for you.\n. This setup stuff should all happen when the CLI is installed, just haven't been able to get to it.\nBasically, when you npm install tower, it should install the CLI and give you the command, and also create the basic \"workstation\" setup like above (just creating that .tower directory pretty much).\nThen it should install a \"cookbook\" cookbook, and maybe a few default cookbooks, so you can get off and running with generators and other cool things, just from running npm install tower. At the same time, it should be set up so when you install tower on the production server, it doesn't add this extra stuff. So maybe this means you have to install cookbooks manually all the time, not quite sure yet.\nThoughts?\n. @casgit so the way cookbooks work, it's all just tower <action> <cookbook>, where \"actions\" are just methods on the module exports for your cookbook.\nBut, tower new my-app is just a special case for getting started, it just delegates to tower create app my-app.\nhttps://github.com/tower/cli/blob/master/bin/tower#L159-L177\n. @casgit awesome, yeah the official docs are on towerjs.org in the guide section, which is just generated from this:\nhttps://github.com/tower/guides/tree/master/guides\n. Hey @yudho I'll be in the IRC for the next hour or two if you want to dig in.\nI haven't gotten to the app cookbook yet, still working on the directives. Got an awesome lightweight setup for data binding just about finished.\n. @yudho #towerjs is the channel. Yeah you don't really need the app cookbook right now, you could just manually start building an app from scratch. That was one of the goals this time around, make it so you could just have a single index.html and one index.js, and just build your app, that's all it really takes.\nThe todomvc app is a demo, though it needs to be cleaned up and updated with the latest code:\nhttps://github.com/tower/todomvc\n. Alright this is fixed now. The tower executable is now part of the tower/tower repo, and I've deleted the tower/cli repo. Make sure you can do this after installing:\n$ tower -v\n0.5.1\nAlso, the cookbooks are setup too. You can install a component generating cookbook like this:\nnpm install tower-component-cookbook -g\nThen you can run it anywhere like this:\ntower create component my-component\n. @kristianmandrup definitely agree with your points. Large monolithic projects take too much effort for the vast majority of developers to contribute to. When tower was one monolithic repo I personally felt like I reached a point where I could not keep it all in my head. I felt like I reached a wall where it was too much effort to go further. But then we switched to using components and it opened up a whole new set of possibilities. Now it feels like there is no mental limit that can be reached. Since every component is highly specialized and self contained, when you code a specific module, you only have to keep that in memory. Once that's done, you can combine that as part of a higher-level component, and mentally it feels no more demanding than building the part. We have been able to move much faster using this approach. We have to continue tinkering to find ways to isolate and specialize each component, but we are getting close to a simple solution.\nIt seems corporate backing like Google provides the ability to slowly chip away at monolithic projects b/c they have dozens if not hundreds of developers working on it. But this doesn't mean that's what it takes to build something in that arena. It just means we need to take a different approach, come at it from a new angle. Newcomers always have the opportunity to make something way more valuable than the existing large corporations, even if it's just one or two individuals.\nAlso wanted to say that while it may seem like there is a lack of motivation b/c of the lack of visibility/movement on the main tower repo, @TheHydroImpulse and I are working full time at startups and slowly finding ways to abstract away what we're doing into reusable components that come together into a unified framework. Doesn't matter how long it takes or if we go down a road that turns out a failure and we have to try again. Even though some people like piecing together the perfect parts (I often prefer that as well), having a unified framework will make it much easier for the vast majority of developers to make awesome stuff without having to think super hard about the details or stay on the edge of open source. It's like building a computer from the parts vs. buying a Mac. The Mac just makes it so much simpler to work with for the majority of users.\n. yep, check out https://github.com/tower/template. the /test folder has the basic examples of how it works\n. It seems that Tower docs could essentially be an intro to modular app development, with an outline of how common things in different areas are done, and the way the different sub-organizations and projects accomplish this, and what plans are for solving the rest of the workflow/development problems.\n. Yeah that's good, pretty much how it is now. I like the idea of the cookbooks (but probably a better name). It can be accomplished with peerDependencies in the package.json. The main thing is, we would be delegating for the most part to other smaller orgs/projects under the hood. This would make it really nice as an easy way to get started and to keep the API simple, but if you wanted to get more hardcore/low-level you could just use the raw tools.\n. Boom! That'll be awesome :)\n. Here's the event API from Tower.Support.EventEmitter (similar to the node.js eventEmitter API):\n``` coffeescript\nclass App.Car extends Tower.Model\ncar = new App.Car(color: \"red\")\ncar.on \"change\", (event) ->\n  event.attribute # \"color\"\n  event.oldValue # \"red\"\n  event.newValue # \"blue\"\n  @changes # {color: [\"red\", \"blue\"]}\ncar.set \"color\", \"blue\"\n```\nNeed to update the main branch with this feature.  But I want to be careful in adding it, because if you don't want events as a developer the code shouldn't be executing event code (dispatching events without any listeners and all that).  You may want this if you're using Knockout.js, since their \"observable\" and \"observableArray\" basically wraps a model/collection and adds event dispatching.  It might be a waste in that case to have event dispatching code built into Tower.\nAs for \"collections\", that's pretty much the same as Knockout.js' \"observableArray\".  Still figuring out a better collection api\u2026  Not sure yet if there needs to be a separate \"Collection\" object, or if you can just have event dispatching off the Tower.Model.Scope object.\n``` coffeescript\nnew Tower.Collection(scope)\nnewCars = new Tower.Collection(App.Car.where(year: \">=\": 2010))\n```\nThe collection object would take the place of something like Knockout.js' observableArray, but I'm not quite sure what the use case is for this yet.\nAnother issue that comes up is how you're notified of an attribute change.  This is where Knockout.js really solves the problem well.  For example, you can add/remove an item to array a bunch of different ways:\ncoffeescript\ntags = [\"ruby\"]\ntags.push(\"javascript\")\ntags = tags.concat([\"node.js\"])\ntags.splice(1, 1) # [\"ruby\", \"node.js\"]\ndelete tags[0] # [undefined, \"node.js\"]\ntags.pop() # [undefined]\ntags.length = 0 # []\nIn all of those cases you modified the array, but no event is going to be dispatched.  Knockout.js solves this by using the observableArray which is basically a custom array class (https://github.com/SteveSanderson/knockout/blob/master/src/subscribables/observableArray.js#L95).\nSo my thinking on one hand is, if you want real event dispatching, use something like Knockout.js because they handle a lot more of those cases.  And rewriting that code is probably out of the scope of Tower.  But on the other hand, having events makes some things easier to do.  Still thinking\u2026\n. Side note, if you're just looking for general \"event dispatching\" functionality for any object, I'd check out a dedicated (and lean) library such as:\n- https://github.com/hij1nx/EventEmitter2\nIf you want a model that has attributes that dispatch change events but that's not necessarily built around the idea of data (like Tower and other \"web app\" MVC frameworks), I'd just build a lean little thing for that, a get and set method with calls to trigger or whatever from EventEmitter2.\n. Update on this feature.  Tower won't be building any sort of EventEmitter or binding functionality like Knockout.js.  There's a potential that Tower will show some demos with these types of binding frameworks and I'll make sure to make everything compatible.\nThere's also the potential that tower uses something like the core ember/ruby object model like we've talked about.\n. True that, will add more to the documentation.  A work in progress...\n. Closing since this is an ongoing process.\n. Still thinking which of these three ways is best:\n1. @belongsTo \"user\", embed: true\nI'm leaning toward this one because it's the least amount of code and the most flexible.  But it is a little abstract so I'm also thinking # 3.\n``` coffeescript\nclass App.User extends Tower.Model\n  @hasMany \"addresses\", embed: true\nclass App.Address extends Tower.Model\n  @belongsTo \"user\", embed: true\n```\nFrom a client perspective, I don't think you really need embed: true necessarily (haven't thought about this in depth though).  And for SQL, you wouldn't embed the documents into a column or whatever, the option would be ignored (future SQL adapters).  You only really need this for MongoDB and probably other document databases.\nSo, having the minimal amount of code would I think make it less confusing while still giving you the full power of embedded documents in MongoDB.\nThe second thing is that this is the most flexible.  Meaning what if you want to embed the Address in User documents in MongoDB for performance reasons, but you have a list of locations for not only users, but groups, events, products, etc.  Maybe you want to store the rest of the addresses in their own documents.  By having the embed: true option on an association, you handle both these cases:\n``` coffeescript\nuser.addresses = [new App.Address]\nuser.save()\nuser document:\n{ _id: 'userId', addresses: [ {_id: 'addressId' ... } ] }\ngroup.addresses = [new App.Address]\ngroup.save()\ngroup document\n{ _id: 'groupId' }\naddress document\n{ _id: 'addressId', addressibleId: 'groupId' }\n```\n2. @embeddedIn \"user\"\nThis one wouldn't allow you to handle both cases.  It's basically saying \"you have to embed this model in this document\".  At least that's what it reads to me.\n``` coffeescript\nclass App.User extends Tower.Model\n  @embedsMany \"addresses\"\nclass App.Address extends Tower.Model\n  @embeddedIn \"user\"\n```\nThe other thing is this adds a few methods to the class that are specific only to document databases.  I'd rather avoid that.\n3. @include EmbeddedDocument\nThis is what you're saying with MongoMapper.\n``` coffeescript\nclass App.User extends Tower.Model\n  @hasMany \"addresses\"\nclass App.Address extends Tower.Model\n  @include EmbeddedDocument\n```\nThis one is more flexible than # 2, so it can be embedded in many different types of records, but you could do this with # 2 by creating a polymorphic association.\nIt's cleaner than both the other two, but I'm not sure if you always want to force a model to be embedded, that's the main thing I still want to get clear.\nBut yeah, this will be in there soon.\n. It should run on any node version 0.4.x and up (you can deploy a Tower app to Heroku, which uses node v0.4.7 as of this post).\nWhat command did you run?\nI get the same error if you run this command:\ntower\nThat line, /usr/lib/node_modules/tower/lib/tower/command.js: 6:19 tries to parse the 3rd item in the process.argv array, which looks like this:\njavascript\n// $ tower\n[ 'node', '/usr/local/bin/tower' ]\n// $ tower new app\n[ 'node', '/usr/local/bin/tower', 'new', 'app' ]\nI'm going to be cleaning up this api soon, but you should be able to generate a new app.  To start the server just run node server.\nLet me know if that helps.\n. Cool, good to hear.\n. Fixed\n```\n$ tower\n  Usage: \n    tower [command] [options]\nCommands:\n    new                     generate a new Tower application in folder \"app-name\"\n    console                           command line prompt to your application\n    generate               generate project files (models, views, controllers, scaffolds, etc.)\nOptions:\n    -h, --help                        output usage information\n    -v, --version                     output version number\n$ tower new\n  Usage:\n    tower new  [options]\nOptions:\n    -T, --title                project title (as opposed to its file name)\n    -D, --description    project tagline (one sentence)\n    -K, --keywords          project keywords (e.g. \"node.js, file uploading, s3\")\n    -n, --namespace        global namespace for your app (defaults to YourProjectName)\n    -h, --help                        output usage information\n    -v, --version                     output version number\n    --skip-procfile                   skip creating a Procfile (for deploying to Heroku)\n    --skip-git                        Skip Git ignores and keeps\n```\n. Yeah two things.\ncake assets:bundle\nYou only need to run this when you're pushing your app to production.  It'll minify and gzip your assets into public/assets.  It takes a few seconds to run because the js/css compressors have to do their work.\nI need to push the updates to this code (changed the api from Tower.assets to Tower.config.assets in the development branch).  But you don't need this for local development so you should be able to get through tonight with the next step: design.io.\ndesign.io\nThe asset part of Tower works by using design.io to compile assets whenever you save a file (or you start the design.io watcher).  There's a screencast on the readme.\n[Technically, you can also just put assets directly into public/x, everything in there is read as a static file.  But you don't need to worry about that with design.io.]\nAnytime you change a JavaScript or CoffeeScript file, it will compile them into public/javascripts/[path].js, and same with Stylus, LESS, or CSS, it will compile them to public/stylesheets.css.\nSo when developing an app, you have your node server, and you have your file watcher process using design.io - 2 terminal windows.  Going to make a screencast on how to build a basic tower app with design.io in the next week or so.\nTo start design.io, here's all you do:\nnpm install -g design.io\ndesign.io start # starts an http server to inject stylesheets into the browser! more on this later in the week.\nThen inside your project directory, run the design.io watcher:\ndesign.io\nDesign.io's not perfect yet, but it's getting there.  It's very close in scope to guard for ruby.  Hope that gets you started.  I'll be around tomorrow and I'll check back.\n. That shouldn't happen (linking to two different ports), but for reference that's happening because design.io needs to have the global http server running (design.io start) to inject the assets into the browser.  This process will all be managed transparently in the next commit so don't worry too much about it.  Working on a commit for this now, along with the instant refreshes.\n. Closing this issue since it was originally about Tower.assets being undefined and that's fixed.  If you're still having issues with design.io let me know.\n. Definitely want to include something like this, need to look into it a bit more first.  I'll take a look at the commit if you have something.\n. Moved to https://github.com/viatropos/mint.js, updated the link on the main site.\n. Thanks for posting, yeah I've had some random issues like this before with coffee-script modules installed in different places, independent of Tower.\nNot sure what the fix is but installing coffee-script like you did works, will keep any eye out.\n. Not yet, but the Tower.Store api was setup to make implementing custom database drivers straightforward.  See these for examples:\n- https://github.com/viatropos/tower/blob/master/src/tower/store/mongodb.coffee\n- https://github.com/viatropos/tower/blob/master/src/tower/store/memory.coffee\nDon't plan on personally implementing a MySQL store for a little while, but I would love to merge a pull request with this feature if you or anyone are up to it!  Even if it's only partially implemented that's a start.\n. Thanks for pointing that out, will update the command line interface.\n. Fixed\n```\n$ tower new\n  Usage:\n    tower new  [options]\nOptions:\n    -T, --title                project title (as opposed to its file name)\n    -D, --description    project tagline (one sentence)\n    -K, --keywords          project keywords (e.g. \"node.js, file uploading, s3\")\n    -n, --namespace        global namespace for your app (defaults to YourProjectName)\n    -h, --help                        output usage information\n    -v, --version                     output version number\n    --skip-procfile                   skip creating a Procfile (for deploying to Heroku)\n    --skip-git                        Skip Git ignores and keeps\n```\n. Will update the command line interface today.  See this issue for details:\n- https://github.com/viatropos/tower/issues/5\n. Fixed\n```\nviatropos:lp viatropos$ tower\n  Usage: \n    tower [command] [options]\nCommands:\n    new                     generate a new Tower application in folder \"app-name\"\n    console                           command line prompt to your application\n    generate               generate project files (models, views, controllers, scaffolds, etc.)\nOptions:\n    -h, --help                        output usage information\n    -v, --version                     output version number\n``\n. Are you running this on ubuntu?  It may be b/cTest.ApplicationControllerisn't loaded, try addingrequire './applicationController'` at the top.  This might be b/c paths are loaded in a different order by default on mac vs. linux, so that should be fixed.\n. Op, this is why:\n- https://github.com/viatropos/tower/tree/master/src/tower/application/server.coffee#L110\nOn line 110 I specifically loaded applicationController before all the other controllers to prevent this problem.  But on line  115, I only required files matching /\\.(js|coffee/, which that doesn't :)\n``` coffeescript\npaths = File.files(\"#{Tower.root}/app/helpers\")\npaths = paths.concat File.files(\"#{Tower.root}/app/models\")\npaths = paths.concat [\"#{Tower.root}/app/controllers/applicationController\"]\nfor path in [\"controllers\", \"mailers\", \"observers\", \"presenters\", \"middleware\"]\n  paths = paths.concat File.files(\"#{Tower.root}/app/#{path}\")\nfor path in paths\n  require(path) if path.match(/.(coffee|js)$/)\n```\nWill fix in next push.\n. Good find.  require('crypto').randomBytes(64) should probably be avoided then, the rest of the app works with at least node 0.4.7 (heroku).  Know of an alternative way to generate random bytes in node 0.4.x?\n. Thanks for the fixes, I'm liking that node-uuid library.\n. I'm checking into this, but make sure you have design.io installed into your project:\nnpm install design.io\nNeed to make that monitor more robust.\n. Can you paste me the code you're using to integrate everyauth into Tower?\nWe are actually using everyauth in a project with Tower, here's how it's been integrated:\n``` coffeescript\nclass App extends Tower.Application\n  @configure ->\n    @use \"favicon\", Tower.publicPath + \"/favicon.ico\"\n    @use \"static\", Tower.publicPath, maxAge: Tower.publicCacheDuration\n    @use \"profiler\" if Tower.env != \"production\"\n    @use \"logger\"\n    @use \"query\"\n    @use \"cookieParser\", Tower.cookieSecret\n@use \"session\",\n  secret: Tower.sessionSecret\n  cookie:\n    domain: \".#{Tower.cookieDomain}\"\n  store: new (require('connect-mongo')(Tower.Store.MongoDB.config[Tower.env]))\n\n@use \"bodyParser\"\n# @use \"csrf\"\n@use \"methodOverride\", \"_method\"\n@use Tower.Middleware.Agent\n@use Tower.Middleware.Location\n\n#if Tower.httpCredentials && Tower.branch != \"development\"\n#  @use \"basicAuth\", Tower.httpCredentials.username, Tower.httpCredentials.password\n\n@use everyauth.middleware()\n@use Tower.Middleware.Router\n\n```\nThen I have this code in config/initializers/authentication.coffee (all files from config/initializers are loaded before the App.configure block is executed:\n``` coffeescript\neveryauth.everymodule.findUserById (userId, callback) ->\n  App.User.find userId, callback\neveryauth.everymodule.handleLogout (request, response) ->\n  # Put you extra logic here\n  request.logout() # The logout method is added for you by everyauth, too\n# And/or put your extra logic here\nresponse.writeHead 303, 'Location': @logoutRedirectPath()\n  response.end()\neveryauth.everymodule.logoutPath('/logout')\neveryauth.everymodule.logoutRedirectPath('/')\neveryauth.facebook\n  .appId(Tower.secrets.facebook.key)\n  .appSecret(Tower.secrets.facebook.secret)\n  .handleAuthCallbackError((request, response) ->\n    # If a user denies your app, Facebook will redirect the user to\n    # /auth/facebook/callback?error_reason=user_denied&error=access_denied&error_description=The+user+denied+your+request.\n    # This configurable route handler defines how you want to respond to\n    # that.\n    # If you do not configure this, everyauth renders a default fallback\n    # view notifying the user that their authentication failed and why.\n  ).findOrCreateUser((session, accessToken, accessTokExtra, fbUserMetadata) ->\n    # find or create user logic goes here\n    promise = new everyauth.Promise\n    App.User.findOrCreateFromFacebook(fbUserMetadata, promise)\n    promise\n  ).redirectPath('/')\n```\nIn short, I think you just need to add the middleware everyauth.middleware() just before Tower.Middleware.Router.  Tower does not use express' app.router code.\nLet me know if that helps.\n. Hmm\u2026 I'm not sure without seeing the full app.  It seems like it's probably because the session/secret key that everyauth sets in the session isn't being properly carried between requests, that's my guess.\nI'd just console.log the request at every stage and make sure the cookies/session/headers/request are all what you'd expect, and that the proper secret token is carried between requests (I haven't messed with everyauth in a couple months, but I think they're setting some session variable here, and I've had trouble with that before).\nAlong those lines, mess around with @use \"session\", secret: Tower.sessionSecret, cookie: {domain: \".#{Tower.cookieDomain}\"} because that's where the something could start going wrong with session.\nI don't think this is a problem with tower, it doesn't do anything with a request.user variable.  But I'll keep this in mind and get back to you if I find anything.\n. Yeah you can't do that because when you do a redirect, the current action is completed - the browser gets a 302 redirect response, and changes the url.  Since the url is changed, it's going to run through the middleware all over again and go to the new controller action for that url.\nThe connect session parses the session and cookies for each request from the raw request.  So the only thing that will persist after a redirect is the raw session and cookie data, which you can set like this:\ncoffeescript\n@session.cookie.expires = new Date(Date.now() + 3600)\nLooks like you then have to save the session data (I haven't used this in a while, but from http://www.senchalabs.org/connect/middleware-session.html):\n@session.save()\nThat will save any custom properties on your session.\n. Are you trying to compile the coffee-script files for tower itself (for developing/testing the tower source)?\nThose tasks are included here:\nhttps://github.com/viatropos/tower/blob/master/Cakefile#L189\nI am not using those anymore though, I'm just using design.io to compile everything (coffeescript, css, etc.).\nIf you are trying to compile the assets for a generated tower app, then this is out of date (I will update the docs and towerjs.org with this).  There is no task named coffee anymore, that was the old way of compiling assets.\nTo compile the assets, you need to use design.io, or write your own watch script (something like coffee --watch --compile --output public/ ./).  The design.io readme tells you how it works.\nIn the latest push of tower, design.io should be running by default when you run:\nnode server\nLet me know if that helps.\n. To boot the tower server, all you need to do is:\nnode server\nYou can also type (which is going to do the same thing as the above command, it's just here for consistency):\ntower server -p 3000\nLet me know if that works.\n. Yeah @wnadeau is right, closing this issue.  Thanks!\n. This was fixed by 0.4.0 [noting for reference].\n. These changes have already been made, thanks tho!\n. To compile the tower codebase, download design.io and run the watch command:\ndesign.io\nIt uses the Watchfile to handle all this.\n. This is no longer an issue with the new way the tower generator builds the session.\n. working on a cleaner view/path system for this\u2026  thanks for the fix tho.\n. Did you run npm install in your project directory after you generated the app?  If not, it might be loading the global tower installation, which doesn't include mongodb and forever because it's (I think) installing only dependencies, not devDependencies which is desired (e.g. you don't need forever in production, and you might want to switch out postgres for mongodb, etc.).\n. Thanks for pointing that out, we need a better way of making sure the compiled files are removed when a coffeescript file is removed.\nAgreed, putting the generators into src is the ideal solution, that just means updating the Watchfile.  Will do that soon.\n. Hey that's a good idea.  There's a few things we should consider though.\nFirst, there's also the build in coffee-script solution.  CoffeeScript automatically converts .coffee files when they are required with require('x').  My concern here is I'd like to minimize the number of dependencies Tower has so as to minimize the size of the compiled slug in production.\nThe solution you just proposed is nice because it prevents having to deal with deleting old files and checking in compiled files.  I want to get rid of the compiled files in the GitHub repo anyway because it just adds to the repo size.  But, this introduces the potential of people not having the right version of coffee-script and so getting started with Tower might become a little more complicated.  If we can make this flawless, then I'm in.\n. The lib directory has been added to .gitignore in the development branch.\n. Can you post all the code you're using, specifically:\n- the paths to your views and controllers\n- your controller code\n- your routes.coffee\n- your version of Tower tower -v\n- and your operating system, node version node -v, and npm version npm -v\nThis problem existed in older versions but I don't see this problem anymore.  Wondering what your specifics are...\n. Updated design.io/lib/client.coffee, which compiles into design.io.js for the client.  Should work now, try it and let me know.  Either replace vendor/javascripts/design.io.js with this, or when you generate a new app it will be downloading that anyway.\nMake sure you start the global socket server with design.io start in some terminal window.  Then in any tower app (or any directory with the design.io node module installed running the watcher with design.io watch), you should get automatic refreshes when you view the page.  Try adding this to app/client/stylesheets/application.styl after you've loaded the default white page at http://localhost:3000:\ncss\nhtml, body\n  background: red\nHope that helps.\n. I am not sure how gzipping works on a PC, but that gzip method will output a gzip encoded file.  I think the issue is that gzip headers aren't served correctly from the node server locally.  If you push those assets to S3 though, Amazon will recognize they're application/x-gzip and they'll be decoded to the javascript/css files.\nWe want the gzipping in there, need to make sure the HTTP headers for gzipping are set correctly on the node server though.\n. Thanks for posting, need to finalize this.\nThe way the dates are going to work in Tower is like this: when you set an attribute on a model, it uses the field definition to convert the value to the actual date object right when it's set.  And [todo] when you do updateAttributes, it will do this as well.  This isn't complete with dates, it only works if given actual Date objects.  Then when you save the model to the database, the Tower.Store implementation will convert the Date value to the database-specific value (the database might only store the data up to the second rather than the millisecond, or needs to convert to some normalized timezone, etc.).\nWith that implementation, the example you posted is invalid:\ncoffeescript\nTower.Store.MongoDB.Serialization.encodeDate(\"1/1/2011\")\nThe goal of the Tower.Store implementations is to take a very normalized and explicit set of parameters to minimize computation.  That's why the Tower.Scope finder/persistence methods take dynamic arguments, while the Tower.Store takes explicit arguments.  This way you can use the Tower.Store to get more low-level control (while still taking advantage of some helpful conventions), but since most people won't need to do that early on, if you do use those methods directly you have to pass explicit args.\nSo, Tower.Store.MongoDB#encodeDate will only accept Date objects.\nThis is still an issue though, I'll get this fixed this week.  Thanks for bringing it up.\n. I have seen that happen somewhat randomly\u2026  Just tried it and it worked, but will look into this more.  If you CTRL-C quit it still will have generated the complete app app though.\n. This doesn't seem to be happening anymore, closing for now.\n. Not yet, this is a useful feature to have though.  Feel free to add it if you're up to it.  I will also look into adding something like this soon.\n. some notes on trying to handle errors better in controllers. In short, I think you'd have to end up wrapping any async call in something like Tower.withContext @request.domain, App.Post.all, (error, posts) => ..., similar to ember's Ember.get(@, 'length').\n- https://github.com/viatropos/tower/commit/c7d6b150c163458208474133770928c289416340\n- https://gist.github.com/3431201\n. This is because mongodb probably isn't running on your computer.  Make sure you have it installed and started (use homebrew to install if this is new):\nbrew install mongodb\nmongod start\nLet me know how that goes.\n. Tower doesn't quite have the following functionality yet, but it's on the list:\ncoffeescript\n@config.generators (g) ->\n  g.orm             \"mongodb\"\n  g.templateEngine  \"coffeekup\"\n  g.testFramework   \"mocha\"\nTower will also be defaulting to mocha, it's just way better :).  Will let you know when this is added.\n. This is for design.io which [temporarily] uses ruby to watch files.  Did you install ruby 1.9.2 with RVM?  If so, make sure you set RVM to use the ruby version you want as the default:\nhttp://beginrescueend.com/rubies/default/\nOtherwise just make sure you have the rb-fsevents gem installed (which design.io should have installed automatically, but if you installed a new version of ruby without running npm install design.io again, won't be installed):\ngem install fs-events\nLet me know if that helps, thanks.\n. Oop, I meant to write this:\n```\nrb-fsevent, not rb-fsevents or fs-events\ngem install rb-fsevent\n```\nTry that.\nIn general, when you get these kind of dependency errors, just look at the stack trace to find what library it's saying is missing (no such file to load -- rb-fsevent):\n[Thu, 15 Mar 2012 09:59:30 GMT] ERROR <internal:lib/rubygems/custom_require>:29:in `require': no such file to load -- rb-fsevent (LoadError)\nThen do gem install x.\n. Yeah, this is the one thing that's been causing the most problems.  Need to find a good cross-platform file watcher solution for node.js.  Right now this ruby hack only works on Mac.\nIf you want to take a stab at it, check out design.io, which is modeled heavily after Guard:\n- https://github.com/viatropos/design.io/tree/master/src/design.io/listener\n- https://github.com/guard/guard/tree/master/lib/guard/listeners\nI want to get rid of this ruby dependency though, but haven't found a good pure-node solution.  This is going to be the next big thing to focus on cleaning up once I finish a few things.\n. No complete example yet, but here's a snippet of code from one of our internal projects that used everyauth.\n- https://github.com/viatropos/tower/issues/18#issuecomment-4278945\nAlso, just a note.  Any documentation in the github wikis (https://github.com/viatropos/tower/wiki/ \u2026) is not complete.  Anything that's roughly complete will be mirrored on the main site http://towerjs.org.\n. Nice solution haha!  Didn't even think of the rails.js file\u2026  Cool it works.\nI had a quick hack in there doing basically what the rails.js file does, grab all links with data-method=delete and convert to ajax POST request with _method='DELETE'.  The real solution is coming with Tower.Store.Ajax, which is almost complete.\nSo for now this is broken and will be fixed in the next release.\nTower.Store.Ajax is a subclass of the memory store handling all the RESTful sync functionality.\n. Made a quick example of this when you use the scaffold generator:\n``` coffeescript\napp/client/controllers/postsController.coffee\nclass App.PostsController extends Tower.Controller\n  @on \"click .post a[data-method='delete']\", \"destroy\"\n# example\n  destroy: (event) ->\n    row       = $(event.target).closest('[data-id]')\n    id        = row.attr('data-id')\nApp.Post.destroy id, (error, resource) =>\n  row.remove()\n\nfalse\n\n```\nStill working on a cleaner way of doing this, but with that it should work.\nTry updating tower with npm install tower in your app and npm install tower -g globally, and grab the latest client-side tower.js, or generate a new app.\n. A lot has changed since this, see the dev branch. Reopen if there are still issues, thanks!\n. I haven't handled the url case yet, but you can do this:\n``` coffeescript\nconfig/databases.coffee\nmodule.exports =\n  mongodb:\n    development:\n      name: \"example-development\"\n      port: 27017\n      host: \"127.0.0.1\"\n    test:\n      name: \"example-test\"\n      port: 27017\n      host: \"127.0.0.1\"\n    staging:\n      name: \"example-staging\"\n      port: 27017\n      host: \"127.0.0.1\"\n    # mongodb://heroku_app123123123:ajsdifjasdfklasjdfa@ds077519.mongolab.com:33591/heroku_app123123123\n    production:\n      name: \"heroku_app123123123\"\n      port: 33591\n      host: \"ds077519.mongolab.com\"\n      username: \"heroku_app123123123\"\n      password: \"ajsdifjasdfklasjdfa\"\n```\nDoes that work?\n. Nice!\nYeah, I got a little carried away in not wanting to commit \"compiled\" things to repos and added the public/assets folder to the .gitignore (I'll make that opt-in in the next release):\nhttps://github.com/viatropos/tower/blob/master/lib/tower/server/generator/generators/tower/app/templates/gitignore\nSo, just open that file, remove those lines, re-commit, and re-push your code, should work then.\ncd your-project\nmate .gitignore\n. Oh ok you're right, looks like the http headers for gzip still haven't been updated.\nhttps://github.com/viatropos/tower/issues/37\nTry doing what he did and comment out the gzip code.  I will fix this soon, but the default should gzip since it's the most optimized.  Basically, if you get rid of gzip the node server will serve the minified version properly, and heroku should show them.\nIf you get through this I'd love to get a pull request with fixes.\nLet me know how it goes.\n. You can try these two plugins, see if they allow you to serve gzipped files locally:\n- https://github.com/nateps/connect-gzip\n- https://github.com/tomgallacher/gzippo\nI don't have the time at the moment to test this out, but that's where I'd start to get gzipping working.\n. Answered on Stack Overflow.\n. [Moved from email response from @viatropos]\nYou're right, the documentation needs to make it clearer how to get started.  The framework is still pretty young, but that's on the todo list.  For the most part though, you should be able to assume anything in Rails and get the rough equivalent in CoffeeScript.\nAbout your urlFor question\u2026  2 things.\nFirst, the implementation isn't complete, so it doesn't look through the routes and everything like you pointed out, I just hacked together something quick to get started.  I'd love for you to contribute a more robust implementation, that'd be awesome!  Otherwise, it's on my list but I may not get around to it for a few weeks.  https://github.com/viatropos/\u200btower/wiki/todo\nSecond, there are a few things in Rails that I wasn't a big fan of, and one of them was the 100's of dynamically generated helper methods (url helpers, dynamic finders like find_by_x, etc.).  I prefer using the low-level API directly for 3 reasons: 1) there's fewer methods in memory, which means faster startup since javascript doesn't have method_missing, and 2) even though it may take one or two extra parameters, it's less mental overhead, and it gives you more power.  I ended up pretty much only using polymorphic_url_for and url_for in Rails.\nSo, I would rather not add this feature, but still have Tower's urlFor be just as robust as Rails'.  But, if it turns out it's only a few lines of code to generate all of those methods and it doesn't really impact startup performance at all, I'm not opposed to adding it.  At the least, it could be a separate plugin.\nFor now though, Tower.urlFor works for simple cases:\ncoffeescript\nurlFor(App.Post) # \"/posts\"\nurlFor(\"admin\", App.Post) # \"/admin/posts\"\nurlFor(new App.Post(id: 10), action: \"edit\") # \"/posts/10/edit\"\nHope that helps, let me know if you have any more questions.\n. [Moved from email response from @kristianmandrup]\nAnother suggestion would be for you to create a Tower-user and Tower-dev Google groups or similar for such discussions take place.\nYou can then select posts to include on the TODO or issues list.\nI would love to help out in improving/extending the framework.\nI agree that Tower.js shouldn't overuse auto-generation of methods such as the _path methods in Rails. Good point. Instead I thought it could use some string/hash conventions. For my example:\ncoffeescript\nurlFor 'Login', path: 'login'\nOR?\ncoffeescript\nurlFor 'Login', 'login_path'\nHere, a quick regexp (or just substring last 5 chars) would on matching with _path resolve the prefix to a registered path/route.\nOR even\ncoffeescript\npathFor 'Login, 'login'\nAND default \ncoffeescript\npathFor 'Login'\nCould resolve to the path name (route alias) as the text underscored and lowercased?\nWhat do you think? How could I make a plugin for this?\nThanks again!\nKris\nPS: If I get started I will contribute a getting started screencast if you like ;)\n. Yeah Tower should include this sort of named route functionality without having generated helper methods.\nSo for something like this route:\ncoffeescript\nTower.Route.draw ->\n  @match \"/login\", as: \"login\"\nHow about doing one of these:\ncoffeescript\nurlFor(route: \"login\") # I'm liking this one\nurlFor(name: \"login\")\nI'd rather it not take an arbitrary string and check for a named route, such as this:\ncoffeescript\nurlFor(\"login\")\nurlFor(\"login_path\")\nurlFor(\"loginPath\")\nThe reasons are these\u2026 First, by using a string-based convention, you'd then have to run every urlFor call through the parser or whatever which isn't ideal.  Also, if you for some reason wanted to have a url be http://localhost:3000/login_path, then the convention of _path would require an extra workaround to override default behavior, which adds more code to the urlFor method and some mental overhead.\nYou should be able to do what you're describing using a parameter like route: 'login', does that work?\nAlso, that'd be awesome to have a getting started screencast, let me know if you make one!\nA guy named Nate Kidwell just created a Google Group for this kind of stuff, waiting for his reply.  We can take this kind of discussion there next time, it was just so rich I wanted to take it out of email to share.\n. Yeah I'm down, I'll get that urlFor route alias feature in this weekend.\n. Sorry guys, wasn't able to get to it this weekend.  If anyone wants to go after it that'd be awesome, otherwise I'll do my best to get this in there this week.\n. Still planning on this! Have had to work on a bunch of model stuff for Tower all week for a project... won't be able to get to this for a little while. If you wanted to try it out, fork/clone the project and mess around with these two files:\n- https://github.com/viatropos/tower/blob/master/src/tower/support/string.coffee#L185\n- https://github.com/viatropos/tower/blob/master/src/tower/http/route/dsl.coffee\nLet me know if you need anything to get started.  I'll definitely get to this at some point in the near future, just don't know exactly when.\nThanks. Have a great weekend.\n. Can you add these to the coffeescript files in src?\n. No problem, adding this to the code, have a few more things to do before it's pushed.  Thanks for posting the solution!\n. Thanks!  Will merge soon.\n. This should be a quick fix, will get to this soon.  It most likely will be a fix to mint.js.\n. This is working for me, are you using the latest version of jade?  Try installing the latest version of tower and try again.\n. No formal feature in here yet but I'm working on this.  It's going to work like Rails' seeds:\ncake db:seed\nThat's a simple task that loads the file from db/seeds.coffee, in which you can write your scripts to add dummy data.\nhttp://archives.ryandaigle.com/articles/2009/5/13/what-s-new-in-edge-rails-database-seeding\nTo make this happen right now, I'd just add a task to Cakefile like this:\n``` coffeescript\ntask 'db:seed', ->\n  require('tower').Application.instance().initialize()\nrequire('./db/seeds')\n```\nAnd then in db/seeds.coffee, something like:\n``` coffeescript\ndb/seeds.coffee\nasync = require('async')\nuser  = null\nasync.series [\n  # clear any existing data\n  (done) => App.User.destroy(done)\n  (done) => App.Post.destroy(done)\n# create users\n  (done) => App.User.create\n    name:   \"Admin\"\n    email:  \"admin@example.com\"\n    (error, record) =>\n      user = record\n      done()\n# create posts\n  (done) => user.posts().create(title: \"Post 1\", done)\n  (done) => user.posts().create(title: \"Post 2\", done)\n], (error) =>\n  if error\n    console.log \"Something went wrong creating seed data... Try running again.\"\n  else\n    console.log \"Successfully created seed data!\"\n```\nAs a side note, Tower will also use the idea of \"factories\" to make creating dummy/test data easier, as well as fakers.\n- https://github.com/thoughtbot/factory_girl\n- https://github.com/marak/Faker.js\nHowever, Tower most likely won't be implementing this as \"fixtures\" the way Rails did, using YAML and all that.  Factories + db/seeds are much more powerful.\nhttp://railscasts.com/episodes/158-factories-not-fixtures?view=asciicast\nHope that helps.\n. Looks like you'll need to wait for MongoDB to initialize, here's the updated task and seed file:\ncoffeescript\ntask 'db:seed', ->\n  # needed to put require inside callback\n  require('tower').Application.instance().initialize =>\n    require './db/seeds'\n``` coffeescript\nasync = require('async')\nperson1  = null\nperson2  = null\nperson3  = null\nasync.series [\n  # clear any existing data\n  (done) => App.Person.destroy(done)\n  (done) => App.Project.destroy(done)\n# create users\n  (done) => App.Person.create\n    name:   \"person1\"\n    (error, record) =>\n      person1 = record\n      availabilities = []\n      assignments = []\n      done()\n  (done) => App.Person.create\n    name:   \"person2\"\n    (error, record) =>\n      person2 = record\n      availabilities = []\n      assignments = []\n      done()\n  (done) => App.Person.create\n    name:   \"person3\"\n    (error, record) =>\n      person3 = record\n      availabilities = []\n      assignments = []\n      done()\n], (error) =>\n  if error\n    console.log \"Something went wrong creating seed data... Try running again.\"\n  else\n    console.log \"Successfully created seed data!\"\n  process.exit() # close task\n``\n. sweet.\n. Yeah, need to write more docs on the client stuff!  But if you generate models, it will add them toconfig/assets.coffee` and they'll be available in the browser.\nThe way I'm currently bootstrapping data to the client is this:\n``` coffeescript\napp/controllers/applicationController.coffee\nclass App.ApplicationController extends Tower.Controller\n  # bootstrapping example\n  index: ->\n    App.User.all (error, users) =>\n      App.Post.all (error, posts) =>\n        @render \"index\", locals: data: {users, posts}\n```\n``` coffeescript\napp/client/config/application.coffee\nclass App extends Tower.Application\n  # json data\n  bootstrap: (data) ->\n    App.User.load(data.users) if data.users\n    App.Post.load(data.posts) if data.posts\n```\nThen in app/views/layouts/application.coffee:\n``` coffeescript\n...\nscript \"App.bootstrap(#{JSON.stringify(@data)})\"\n...\n```\nGoing to clean this up soon.  But with that you can use your models in the client (and client models don't need callbacks, but they work both ways):\n``` coffeescript\ne.g. webkit console\nApp.User.all()\n=> [>User, >User]\n```\n. I've added this functionality to the generator, so when you generate a model it will add it to these bootstrap methods.\n. Hey sync up with master so I can auto merge.\ngit remote add upstream git@github.com:viatropos/tower.git\ngit fetch upstream\ngit merge upstream/master\ngit push # then do the pull request again.\n. Sent you that email, but for reference, here's the two commands:\nnpm test\nThat references the test key in package.json, which looks like this:\nmocha $(find test -name \"*Test.coffee\")\nYou can customize that expression to run a subset of tests if you're developing something and don't want the clutter.\n. Yeah that's old code, I have to update that.  Try replacing Dispatch with HTTP, the new namespace.\n. I've updated the client library to point to HTTP, you can get that here:\nhttps://raw.github.com/viatropos/tower/master/dist/tower.js\n. Thanks for posting, still working on the client side of things.  You can override the click handler (and set global defaults) like this:\ncoffeescript\nclass App.ApplicationController extends Tower.Controller\n  # eventHandler == name + \"Handler\"\n  # dispatcher is set to the window by default.\n  @clickHandler: (name, handler, options) ->\n    $(@dispatcher).on name, (event) =>\nMore on this soon.\n. Updated the client library, works now.\nhttps://raw.github.com/viatropos/tower/master/dist/tower.js\n. Good idea, added generator idea to the roadmap.\n. I'll login to skype later today (4-5ish).  I've also started an IRC group at channel #towerjs.  We should start using that.\n. Will consider, there's also this case:\ncoffeescript\nclass App.User extends Tower.Model\n  @fields firstName: \"String\"\n    middleName:      \"String\"\n    lastName:        \"String\"\n    likeCount:       type: \"Integer\", default: 0\nIdeally it would be able to handle them all.\n. Nice!  I was messing around with that a little too:\nhttps://github.com/viatropos/tower/blob/development/src/tower/model/attributes.coffee#L24\nMade me think though, a reason why we may want to leave it out, even though it may decrease the amount of code you write, is that it makes it more complicated to read.  A big goal is to make it so if anyone see's the code, no matter if they're a coder or not, they will understand (or as close as possible to understanding).\nIf we introduced these 3 different ways of writing fields, consider what this might look like:\n``` coffeescript\nDefine one at a time\nclass App.User extends Tower.Model\n  @field 'firstName'\n  @field 'middleName'\n  @field 'lastName'\n  @field 'email'\n  @field 'likeCount',     type: 'Integer'\n  @field 'activatedAt':   type: 'Date'\n  @field 'active',        type: 'Boolean', default: false\n  @field 'admin',         type: 'Boolean', default: false\n```\n``` coffeescript\nDefine multiple at a time\nclass App.User extends Tower.Model\n  @fields 'firstName', 'middleName', 'lastName', 'email'\n  @fields 'likeCount',        type: 'Integer'\n  @fields 'activatedAt',      type: 'Date'\n  @fields 'active', 'admin',  type: 'Boolean', default: false\n```\n``` coffeescript\nDefine as hash\nclass App.User extends Tower.Model\n  @fields firstName: 'String'\n    middleName:       'String'\n    lastName:         'String'\n    email:            'String'\n    likeCount:        'Integer'\n    activatedAt:      'Date'\n    active:           type: 'Boolean', default: false\n    admin:            type: 'Boolean', default: false\n```\n``` coffeescript\nDefine using all 3!\nclass App.User extends Tower.Model\n  @field 'id', type: 'Id'\n  @fields 'firstName', 'middleName', 'lastName', 'email'\n  @fields likeCount: 'Integer', activatedAt: 'Date'\n  @fields 'active', 'admin', type: 'Boolean', default: false\n```\nThe last case is very hard to quickly grasp functionality.  But, that's what would probably end up happening with all these choices.  The first, while being a little more verbose, makes it so all apps will be easy to read.\nAs a side note, I think sometimes it's okay to make the api robust, particularly when you're writing it a lot.  This is the case with the finder api:\ncoffeescript\nApp.User.find 1\nApp.User.find 1, 2\nApp.User.find [1, 2]\nApp.User.find existingUser # .get('id')\nApp.User.find existingUser, 2\nApp.User.find [existingUser, 2]\nThe reason having multiple ways of writing this api is okay it seems is because it might take arguments in many different ways (from @params in the controller, or writing it by hand in the web console, etc.).  In that case, whatever makes it both easy to write and robust.\nJust some thoughts.\n. Looks pretty cool! Gotta get that screencast on how to create Tower extensions now...  Closing this issue.\n. If you know how to do this I'd love your help.  I'm putting this \"inflection\" code off for a while, until the important stuff in the roadmap is complete.\n. Fixed, now using a better inflection library.\nhttps://github.com/viatropos/tower/commit/e52491d2ab32c74c4b63764dd3cfcc733ec75f0a#L5R188\n. Definitely been thinking about this.  I was never a big fan of how Rails used the select box for this kind of thing because it only works on the belongsTo side (you can say a comment belongsTo a post, and so select the post from the comment form, but what if I wanted to create a bunch of comments from the post form).  The reason is because in a real app there could be thousands of posts the comment can belong to so the select box gets unwieldy.\nAnother approach is to define it as a nested resource, so the comment form would be at /posts/:postId/comments/new and you don't need a select box.  I think the generator should somehow handle this case because it sets your app up more like it should appear in the real world.  Also, if there were 100's of posts to apply a comment to, then you would have to make a DB query and instantiate models on page load, and I'd like to avoid that if possible.\nBut then what if comment belongsTo user as well...  Then you should be able to select a user for the comment when you're at /posts/:postId/comments/new.  Hmm...  I think having some sort of autocomplete thing built in might be a useful solution (an autocomplete that doesn't require a whole jQuery library, something simple).\nLet's think about what would set your app up to be most ready for the real world without requiring a ton of extra code (like a full-fledged autocomplete plugin).\n\nAlso - do I need to explicitly define foreignKey fields in my schema or does defining the relationship handle that?\n\nYou can define foreign keys explicitly, but it will pick a default for you.\ncoffeescript\nclass App.Post extends Tower.Model\n  @belongsTo \"user\", foreignKey: \"adminId\" # defaults to userId\nThere aren't robust tests for custom foreign keys though just realized, need to add that.\n. You can get the model class from the relation like this:\nHere's some code showing how relations work:\n``` coffeescript\nclass App.User extends Tower.Model\n  @hasMany \"posts\"\nclass App.Post extends Tower.Model\n  @belongsTo \"user\"\nrelations = post.constructor.relations() # App.Post.relations()\n=> {user: Tower.Model.Relation.BelongsTo}\nbelongsToRelations  = []\nhasManyRelations    = []\nfor name, relation of relations\n  if relation instanceof Tower.Model.Relation.BelongsTo\n    belongsToRelations(relation)\n  else if relation instanceof Tower.Model.Relation.HasMany\n    hasManyRelations.push(relation)\nuserRelation = belongsToRelations[0]\nuserRelation.name           # \"user\"\nuserRelation.foreignKey     # \"userId\"\nuserRelation.klass()        # App.Post\nuserRelation.targetKlass()  # App.User\n```\nHope that helps.  Note, this \"internal\" API for relations might change, I don't quite like targetKlass and such yet, need to find something better.\n. Fixed in latest release. Try updating tower with npm install tower in your app and npm install tower -g globally, or generate a new app.  Let me know if that works.\n. Working on this one today, thanks for posting!\nAs a side-note, those options --views jade --database mongodb don't actually do anything yet.  The generator only works with coffeekup, but technically you can remove the coffeekup views and replace them with jade ones.\n. You're right, I am going to fix this template issue as well and publish a new version on npm today.  Thanks for posting.\n. Alright pushed 0.4.0-2 and it's working for me.  Try updating tower with npm install tower in your app and npm install tower -g globally, and grab the latest client-side tower.js, or generate a new app.\n. Is this still a problem?  Make sure you have the latest version of Tower installed (and the latest client js)\n. I'm not getting this error, are you sure you've loaded the validator library on the client?\n. This is great!  Been slammed so couldn't take a look right away.  We gotta get the socket stuff awesome.\nI'm going to focus on getting the standards set in place for testing over the next couple days to finish up 0.4.1, in particular:\n- standard way for testing the controllers (and file uploading) - there's currently a pretty standard way for testing models and view rendering server-side\n- testing the client - all of the current test suite should work for the client and be executable from the command line (executing tests in the browser through socket.io with design.io is already setup)\n- tests for the generators (test for reading/writing files)\n- tests that the terminal commands work (tests for executing commands and stdout, etc.)\nIf this is in place I think we'll be able to move at an insane pace.  It's tough to merge this stuff quickly without spending a half-hour/hour testing everything manually.\nStoked to get this going!\n. I'm not sure I understand.  The first example is incorrect, the second one is correct.  This is how it's supposed to work:\ncoffeescript\nApp.Photo.find @params.id, (error, resource) =>\n    console.log resource.attributes.id\nBut, the way you access attributes is like this:\ncoffeescript\nApp.Photo.find @params.id, (error, resource) =>\n    console.log resource.get('id')\nTo get your first example working, you can (although I haven't checked recently) set Tower.accessors = true, which will use Object.defineProperty to create getters/setters in Node.js and the browsers that support them (newer browsers).  Then you can do this:\ncoffeescript\nApp.Photo.find @params.id, (error, resource) =>\n    console.log resource.id\nBut, I suspect, being able to do resource.id previously was a bug, now it's fixed?  Or is this happening on the client?  Let me know.  Thanks for all your posts.\n. Correct, the $ syntax is from the MongoDB Query API.  Tower's using that because it was an already elaborate and tested query language that handled a lot of cases.\nI have not seen Rel before, looks interesting!  I loved Arel.  However, in Rails, I rarely used Arel directly as it was too verbose and difficult to understand, and I ended up using libraries like Squeel.  I'm a fan of being able to read the syntax quickly.\nAlso, you can use <= < > >= and others instead of the $ equivalent.  Check out the map:\nhttps://github.com/viatropos/tower/tree/master/src/tower/store.coffee#L25\nHere's a quick comparison (after scanning the Rel readme):\n``` coffeescript\nusers.where(users.column('name').eq('bob'), users.column('age').lt(25))\nusers.where(name: 'bob', age: \"$lt\": 25)\nusers.where(name: 'bob', age: \"<\": 25)\nusers.where(users.column('name').eq('amy')).project(users.column('id'))\nusers.where(name: 'amy').select('id')\n```\nTower's syntax is much cleaner.\nLike @kristianmandrup said, try making this into a module for Tower, providing the alternate syntax.  I'll still think about this, but seeing some examples would help.\n. I will update the documentation soon, but for now I'll just give you an example.\nThe memory store isn't like a redis store, it's just a simple \"in memory\" store.  To change stores globally, set the store on Tower.Model:\ncoffeescript\nTower.Model.store(Tower.Store.Memory)\nTower.Model.store(Tower.Store.MongoDB)\nTower.Model.store(Tower.Store.Ajax)\nTo change it on a per-model basis, you can do this:\ncoffeescript\nApp.User.store(Tower.Store.Memory)\n. This may be b/c Tower.Store.MongoDB has an initialization hook:\nhttps://github.com/viatropos/tower/tree/master/src/tower/server/store/mongodb.coffee#L22\nWe probably have to change this.  Try messing with that (comment it out) and seeing if you can get it to work.  If you can find a fix that allows opt-out of MongoDB that would be awesome, send me a pull request.  I won't be able to get to this for a couple days.\n. I'll be on IRC more regularly (#towerjs), I hardly ever have used it.\n. You're correct, this is a bug.  You should be able to mess with Tower.View#_readTemplate, changing that store.findPath to something like Tower.View.cache.  I updated this to fix a previous template bug server side, haven't updated client.  Will fix this soon unless you get to it first.\nAlso, we need better ways to test the client side of tower.\n. If you can fix this and send me a pull request that would be awesome.  Otherwise I'll get to this by the end of the week.\nThe code is here:\nhttps://github.com/viatropos/tower/tree/master/src/tower/view/form/field.coffee#L92\n. This is fixed now.\n. https://github.com/viatropos/tower/issues/80#issuecomment-5061913\n. You can now run all tests for a specific store (defaults to memory):\nmocha $(find test -name \"*Test.coffee\") --store mongodb\nThese are abstracted away into the Makefile:\n```\nmake test-memory\nmake test-mongodb\nall of them:\nmake test\n```\n. Thanks for posting, will fix this soon.\n. I have no idea.  Can you print me the error stack trace?\nIt may from the way everyauth is determining node modules from the file extension, maybe you have to define a renderer for it...\n. I am starting to use passport now.  I will post an example project when I get the time.\nFor now, here is some extracted code (hacks now, need a clean way to make those urls in the app in a controller):\n``` coffeescript\nconfig/application.coffee\nglobal.passport   = require 'passport'\nrequire './credentials'\nrequire './session'\nMongoStore = require('connect-mongo')\nFacebookStrategy  = require('passport-facebook').Strategy\npassport.use new FacebookStrategy\n  clientID:     Tower.secrets.facebook.key\n  clientSecret: Tower.secrets.facebook.secret\n  callbackURL:  \"http://localhost:3000/auth/facebook/callback\"\n  (accessToken, refreshToken, profile, done) ->\n    process.nextTick ->\n      global.App.User.findOrCreateFromFacebook profile, (error, user) ->\n        done error, user\nclass App extends Tower.Application\n  @configure ->\n    @use \"favicon\", Tower.publicPath + \"/favicon.ico\"\n    @use 'static', Tower.publicPath, maxAge: Tower.publicCacheDuration\n    @use \"profiler\" if Tower.env != \"production\"\n    @use \"logger\"\n    @use \"query\"\n    @use \"methodOverride\", \"_method\"\nrequire './databases'\nmongostore = _.extend {}, Tower.Store.MongoDB.config[Tower.env]\nmongostore.db = mongostore.name\ndelete mongostore.name\n\n@use 'bodyParser'\n@use 'cookieParser', Tower.config.session.key\n@use 'session', secret: Tower.config.session.secret, store: new MongoStore(mongostore)#, cookie: {domain: \".\" + Tower.config.session.cookie.domain}\n##@use \"csrf\"\n@use passport.initialize()\n@use passport.session()\n\n@get \"/auth/facebook\", passport.authenticate(\"facebook\"), (request, response) ->\n  # The request will be redirected to Facebook for authentication\n\n@get \"/auth/facebook/callback\", passport.authenticate(\"facebook\", failureRedirect: \"/login\"), (request, response) ->\n  response.redirect \"/\"\n\npassport.serializeUser (user, done) ->\n  done null, user.get('id').toString()\n\npassport.deserializeUser (id, done) ->\n  global.App.User.find id, (error, user) ->\n    done error, user\n\n@use Tower.Middleware.Agent\n@use Tower.Middleware.Location\n@use Tower.Middleware.Router\n\nmodule.exports = global.App = new App\n```\n``` coffeescript\nconfig/secrets.coffee\nTower.secrets =\n  facebook:\n    key:    \"your-key\"\n    secret: \"your-secret\"\n```\n``` coffeescript\napp/models/user.coffee\nclass App.User extends Tower.Model\n  @field \"facebookId\"\n  @field \"firstName\"\n  @field \"lastName\"\n  @field \"fullName\"\n  @field \"username\"\n@findOrCreateFromFacebook: (meta, callback) ->\n    data            = {}\n    name            = meta.username\n    name          ||= meta.displayName\n    name          ||= \"\"\n    name            = name.replace(/[^a-z0-9]/gi, \"-\")\n    data.firstName  = meta.name.givenName\n    data.lastName   = meta.name.familyName\n    data.fullName   = meta.displayName\n    data.username   = meta.username\n    data.username ||= name\n    data.facebookId = meta.id\n@create data, callback\n\n```\n``` coffeescript\napp/controllers/applicationController.coffee\nclass App.ApplicationController extends Tower.Controller\n  @layout \"application\"\n@beforeAction \"setCurrentUser\"\nsetCurrentUser: ->\n    @currentUser ||= @request.user\n    true\n```\nHope that helps.\n. That's pretty cool, generates a whole bunch of ideas!\n. Those get things, yes.  But the tricky part is figuring out how to insert those passport.authenticate(\"facebook\") calls.  That's middleware, haven't handle that case.  They could be placed in a beforeAction callback in the controller, but that's not ideal.\n. If @kristianmandrup doesn't get to it first, I'm definitely going to implement CanCan a couple weeks from now.  It's the most elegant solution to the authorization problem I've seen.\n. You're the man! Gotta take a look at it tomorrow, can't wait.\n. Working on this...\nThinking about making it so you have to require the components of tower you want (and the generator will give you defaults while being customizable).  Something like:\n``` coffeescript\nconfig/application.coffee\nrequire 'tower/store/mongodb'\nrequire 'tower/store/memory'\nclass App extends Tower.Application\n...\n```\nI'd like to not have to go down that road, but the alternative is having some sort of config variables like this:\ncoffeescript\nclass App extends Tower.Application\n  @stores: [\"memory\", \"mongodb\"]\nNot sure yet if custom config variables like that are more confusing.  One the other hand, the require method would require we separate tower out into chunks and it's not ready for that yet.\nThe client should work this way too in the end, where you can require minimal amounts of code.  By default, tower.js would give you everything.  But you should also be able to do this:\n/javascripts/tower.core.js\n/javascripts/tower.model.js\n/javascripts/tower.store.memory.js\n/javascripts/tower.controller.js\nOr more fine-grained, if you only wanted non-persisted tower models without chainable scopes:\n/javascripts/tower.core.js\n/javascripts/tower.model.core.js\n/javascripts/tower.model.attributes.js\n/javascripts/tower.model.validations.js\nBut that's the last thing on the roadmap.  Will try and find a short-term workaround.\n. This is going to take some time to fix.\nWhat you don't want to do is make it so if you don't have mongodb installed/running it uses the memory store, because then it may be confusing/difficult to figure out how to start using mongodb. Don't want that barrier.\nOne workaround (what meteor does) is precompile mongodb/node into a .zip file, so when you install tower you get mongodb too. There are too many issues with this though (you have to start dealing with individual operating systems).\nWill think about this some more, I think in the short term having clear documentation showing that you must install and run mongodb (or manually remove databases.coffee or something similiar, such as with a command-line flag), this will become a lot clearer.\n. This is now fixed, try generating a new app and checking out the package.json. MongoDB, socket.io, and coffee-script are now only added to the generated app's package.json, so tower doesn't have those dependencies. If you don't want to use a database at all, then remove the generated mongodb: ... from app/config/databases.coffee, or set default: 'memory' (see the code here for how it works: packages/tower-application/server/application.coffee#L112). Cheers.\n. Try clearing the cache and/or running with sudo:\n[sudo] npm cache clean -g\n[sudo] npm install tower -g\nThese random errors are usually b/c of the npm cache.\n. Have you merged with the latest master?  This seems like it should automatically merge...\n. tests don't pass\n. Thanks, yeah design.io has a ways to go.  What operating system are you on?  It only works on mac, but someone just added linux support.\n. This seems to be working for me, do the tests run for you?\nJust added these:\nhttps://github.com/viatropos/tower/tree/master/test/cases/model/attributesTest.coffee#L201\n. Thanks @au-phiware, merged your pull request into mint.js and bumped tower to 0.4.0-5 with a few other package.json updates.\n. Coercing to express 2.x in package.json until we can make all the updates to get it working with express 3.\n. Fixed, thanks for pointing out!\nFor those of you with existing apps, make sure you update your Watchfile:\nhttps://github.com/viatropos/tower/blob/master/lib/tower/server/generator/generators/tower/app/templates/watch#L15\nSpecifically those 2 javascript sections.\nAlso, delete the files in ./public/javascripts/config.\n. Should make this more bullet proof, in case the Watchfile is changed or anything strange happens where those files are put in public.  Maybe a regex or warning before git commit if there is a file in public matching a pattern.  Or add to gitignore... Will keep in mind.\n. Thanks!\n. Working on more robust tests and such for associations, will get back to you.\n. This is working now.\n. Closing this issue as a lot as changed since then. Check out the development branch and reopen if there are still issues.\n. We need to start pointing to specific commits for the js libraries referenced in the generator.\n. Oops, my bad...\n. How is this now?\n. Will merge, let me think about it a bit first.\n. @edubkendo Yeah that's an error.\nIt creates the record because format[controller.format] is called after the record is created, but format[controller.format] is doing format[\"FORM\"] (looking at your error).\nThat's because this line must not be working:\n/tower/controller/instrumentation.coffee#L65\nThat code require('mime').extension(@request.header(\"content-type\")) needs to be adjusted.  Wanna give it a shot?\n. Thanks!\n. Thanks, will merge in a bit.\n. You're the man, thanks!  Will push a new version soon with these changes.\n. try building the tower client js from source:\ngit clone git@github.com:viatropos/tower.git\ncd tower\nnpm install\ndesign.io\ncake build # dist/tower.js\n. Great discussion topic.\nMy preferred way of testing the client is through design.io + mocha.  Say you have your app open at a specific URL like \"/login\".  You write integration tests testing that the login form has the right labels and highlights the field in red when an input looses focus or whatever.  You can also test that the login form has a specific width, i.e. test all of the css is rendered correctly.\nUsing web sockets like this, you can write tests for your app with your page open and when you hit save it will reload the javascript file your tests are written in, and mocha will re-execute them.  This is very easy to do, we just need to create a watch task for design.io (have done this a bunch before, haven't had time to refactor it out).\n``` coffeescript\nmint = require 'mint'\nwatch /test\\/*Test.coffee/\n  # this is in the Watchfile context\n  update: (path, callback) ->\n    mint.render path: path, (error, result) =>\n      @broadcast body: result\n      callback()\nclient:\n    # this is in the browser context\n    update: (data) ->\n      eval(\"(#{data.body})\") # this is the mocha test code you just saved...\n  mocha.run()\n\n```\nThis way, you can also test multiple-page flows. In an after block in your mocha test, you can do window.location = x, or in one of your tests you can submit a non-ajax form, and if the page changes, it will load the next url and if there are any tests associated with that url, those will run!  That's pretty powerful.  You could create a demo of your app this way, where it looks like a bot is basically performing every action possible on your app, changing pages and everything.\nAnother big benefit is you can have multiple different browser windows open (firefox, opera, etc.) and because of design.io the tests will execute in all of the browsers open!\nYou could probably even do that with Internet Explorer through VMWare fusion or Parallels (I use VMWare fusion now).\nI've used PhantomJS and ZombieJS (and selenium) in the past, and while they are nice, it never really mimics the browser environment...  You end up not being able to test fixes for those cross-browser errors, and testing async/visual javascript is not practical in a headless environment.\nWe should probably have a way to test using PhantomJS and ZombieJS anyway though, because having a browser window open while testing can be annoying sometimes.  But there are other ways around this.\nAlso, it's very easy to programmatically open browser windows from the terminal and run tests, so the design.io/watch solution definitely works as part of a test suite.\nWe also need to consider auto-executing tests on file save in the terminal (like Spork in Rails).  In practice though, I found spork very hard to setup and it was rather annoying having tests auto-run every time you save a file.  The way I test, I usually run 1 test file for the features I'm working on, and every 10 or so changes I run the suite, so if anything breaks I catch it quickly.  This isn't a matter of the suite taking a long time to run, it's more a matter of not being overwhelmed by output (even 750 dots........................ distracts my mind, I'd rather only see the dots I'm focused on at the moment).\nFor client-side tests though, I think we should go with the in-browser solution using design.io.  It's SUPER sick.  Everybody's doing headless tests but they don't cover a lot of the test cases you really should be testing from a UI/client javascript perspective.\nTo do this, we need:\n1. a watch task for design.io\n2. a web console reporter for mocha (outputs the test results in the web console using console.group, very cool.\nI implemented this for Jasmine a while ago, here's the code:\nhttp://github.com/viatropos/design.io-jasmine\nhttps://github.com/viatropos/design.io-jasmine/blob/master/src/design.io-jasmine.coffee\nBasically, we just create a plugin design.io-mocha that takes care of the details.\nWhat do you think?\n. p.s. I'm a fan of doing discussions like this, let's just label issues with discussion and we'll close them once we feel the discussion reaches a reasonable conclusion.  You can always comment on closed discussions or reopen them.  Forget google groups :)\n. Glad we got design.io working on linux!  I agree, we should have a headless option as well.\n. @sebastianhoitz sounds good.  I won't be able to get to it for a couple weeks though, need to get this ember/client stuff finished.\nI agree with you on PhantomJS as well, I've only used it to run the ember test suite and it just didn't feel as nice as zombie.js, no idea why.  I like zombie, have enjoyed using it for other things.\nPerhaps we should think about building something like Capybara for node - at least an \"interface\" to other integration testing frameworks/tools.  Not the biggest fan of having a super rich DSL for test driven development, but Capybara is an excellent project.\n@edubkendo Mocha is the best. Mocha + Zombie will be great.\nP.S.  The main reason I like doing integration testing in the browser (via design.io) instead of headless with zombie is because of the XPath problem.  Testing if certain HTML exists is MUCH easier with jQuery than trying to build another XPath parser with a different API.  In Capybara/Selenium, you had to do this:\nruby\npage.has_xpath?('//table/tr')\nWhereas in jQuery I could do this:\njavascript\n$('table tr').length\nMost people don't even know jQuery has a \"css interface\" over XPath, to query HTML.  They just traverse the DOM the way they intuitively know how to do.  With Capybara/Selenium, it felt like you had to be a master of XPath before you could even start testing.  We should definitely avoid that, make it easy for everyone.\nIf you can figure out how to use jQuery in a headless browser, at least just to take advantage of it's XPath/CSS selector system for testing HTML, that would be awesome.  I think I've seen something like this but haven't tried.\n. This requires an identity map, and/or eager loading. These are a work-in-progress. Actually, it works on the client fine b/c everything is in memory, but with mongodb it requires more sophistication.\n. You're right, the current implementation is very primitive and needs to be made more robust.  It only reloads the changed file.\nCurrently, it tells you the path to the file that's been changed:\n/tower/server/application/watcher.coffee#L45\n``` coffeescript\nTower.Application.Watcher =\n  # ...\n  fileChanged: (path) ->\n    # this is a tmp solution, more robust coming later.\n    if path.match(/app\\/views/)\n      Tower.View.cache = {}\n    return unless path.match(/app\\/(models|controllers)/)\n    path = require.resolve(\"#{Tower.root}/#{path}\")\n    delete require.cache[path]\n    process.nextTick -> require(path)\n```\nWe should just make this method more robust.  It should also be able to handle customization, so if you have some edge case or special way of organizing your code, you should be able to make the reload work.\nIn order to do that, we need a more robust way of tracking the class hierarchies and module inclusions.  Ember shines at this, so we should have this soon, and might work along these lines:\ncoffeescript\nklass = Tower.pathToConstant(path)\n    for subklass in klass.subclasses\n      require(Tower.constantToPath(subklass))\n    for mixin in klass.mixins\n      require(Tower.constantToPath(mixin))\nI'd rather avoid the nodemon solution of restarting the server every time a file is changed.\nWon't be able to get to this for a little while.\n. Oh right.  I think the try/catch solution doesn't work across all browsers (it's basically method_missing).  For now you have to manually require it like you're saying.\n. It is now user.get('company') in 0.4.1.\n. Don't want to do this at the moment b/c Heroku installs all the devDependencies and fails b/c of ruby (last time I tried).  We need to figure out a way to tell Heroku (and nodejitsu and all them) to ignore devDependencies, then I'll merge.\n. Have you started the global design.io server with design.io start?\nOpen 1 terminal window, cd into any project directory with design.io locally installed (node_modules/design.io), and run design.io start.  That starts a \"global\" socket server that will do the pushing for live updates.\nThen in your current app (terminal window 2), run node server (or tower server).  Internally, tower will run design.io so you don't have to have to open a 3rd terminal window.  Now this design.io process will send any file updates to terminal window 1, which will send them to the connected browsers.\nThat one window running design.io start should always be running.  It needs to be executed in a directory containing node_modules/design.io right now, but that should be refactored away so you can run design.io start anywhere on your computer.  For now though, just run it in a node project with design.io installed locally.\nI think the big thing is just that design.io start wasn't executed.\nnpm install design.io -g\ncd random/node/project # window 1\nnpm install design.io\ndesign.io start\n```\ncd the/tower-app # window 2\nnode server\nor the manual version\ncd the/tower-app # window 2\ndesign.io\ncd the/tower-app # window 3\nnode server\n``\n. Do you get live updates when you edit stylus inapp/client/stylesheets?  Or when you edit javascript?  Try addingalert('!')toapp/client/config/application.coffee`, on save the browser should alert.\nThe templates don't live-update yet though.  I started on a watch task in the Watchfile, but it's not complete.  To get templates to auto-refresh you can probably customize that pretty easily.\nDoes that help?\n. I'm not able to replicate.  Here's what I did:\n- design.io start\n- tower new app\n- cd app\n- npm install\n- node server\n- make html, body background: red\n- add alert('!') to app/client/config/application.coffee\nIt's all working for me, also using Chrome.\nThe browser URL shouldn't be changing, that seems strange.  Maybe you can make a quick screencast with something like http://www.screenr.com/jhr and email me?  Don't know what else it would be.\nMake sure there's no errors in the web console, otherwise the javascript may not be executing.  I've had that happen before.\nMake sure design.io-javascripts is installed locally as well.\nAlso, I recommend trying to create your own watch tasks, opens up a lot of possibilities.  The design.io-javascripts plugin just handles a lot of the details/configuration for compiling javascript, just to put it into a clean little bundle.  But you definitely can implement a basic javascript watcher very easily by hand, something like:\n``` coffeescript\nmint  = require 'mint'\nfs    = require 'fs'\nwatch /app\\/.+.(js|coffee)$/\n  # Watchfile's scope\n  update: (path, callback) ->\n    fs.readFile path, 'utf-8', (error, content) =>\n      mint.coffee content, {}, (error, result) =>\n        @broadcast body: result\nclient:\n    # browser's scope\n    update: (data) ->\n      eval(\"(function() { #{data.body} })()\")\n```\n. Perfect!  I see exactly what you're saying.\nTry adding the alert('!') to the top of the file:\n``` coffeescript\nalert \"!\"\nclass App extends Tower.Application\n  @configure ->\n    @use Tower.Middleware.Agent\n    @use Tower.Middleware.Location\n    @use Tower.Middleware.Router\nbootstrap: (data) ->\n```\nThat should show you the javascript is actually reloading.\nYou were putting it in the bootstrap method, which is called in app/views/layouts/application.coffee.  The javascript reloader isn't that sophisticated yet... moving too fast lol.  To make that work, we'd have to start customizing the javascript watcher for every file.  That comes later.\nWhen you save a template in app/views/, it's running through that incomplete template reloading watch task, and it looks like it's refreshing the page:\nhttps://github.com/viatropos/tower/blob/master/lib/tower/server/generator/generators/tower/app/templates/watch#L73\nI wrote that a while ago and never finished it.  Basically, that task was going to watch when any view file changed, recompile the templates.js (all of the views), and update the window with the url for that view, something like that...  Going to get back to that later, once more of the roadmap is finished.\nAlso, any javascript you edit in app/views won't show up until page refresh.  That's because I am treating the views separately from the rest of the coffeescript/javascript in the app.\nSo it looks like everything's working for you, you were just taking it to new levels it hasn't handled yet.\nAlso note, you can create a new javascript file and add the alert to see if it works.  I usually create something like app/client/palette.coffee which is like my coffeescript web console.\nDoes that help?\n. will fix that url thing, you can comment out the client part of that watch task for now:\n``` coffeescript\n  client:\n    update: (data) ->\n      #Tower.View.cache[data.id] = data\n  #if data.reload\n  #  window.location = data.path\n  #else\n  #  Tower.get data.path\n\n``\n. I think this is because when you runtower server`, it's loading the script from the global installation, which looks like this:\n/bin/tower\n```\n!/usr/bin/env node\nrequire('../lib/tower').Command.run(process.argv);\n```\nThat then tries to require all of the libraries from your global set of modules.  I haven't quite figured out a good way to do this, because when you do tower new app you want it to use the global modules since the path is relative.  But when you do tower console and tower server, you don't.\nIt needs to be something like:\n```\n!/usr/bin/env node\n// process.argv == ['node', 'tower', 'server']\nif (process.argv[2] && process.argv[2].match(/new/)\n  require('../lib/tower').Command.run(process.argv);\nelse // will find from local node_modules\n  require('tower').Command.run(process.argv);\n```\nAnyone have a good suggestion?\n. @KingScooty Make sure you have started mongodb.  In a separate terminal window, run:\n[sudo] mongod\nIf you installed this with homebrew via brew install mongodb, they should have given you instructions on how to setup a daemon that automatically starts mongo when your computer restarts.\n. No worries, feel free to add it to the README where you think it would fit best.  Cheers.\n. Thanks!\n. @vjsingh what's your operating system, version, npm version, rvm version, node version, etc.?\nWhat happened to @mauricemach, his online presence stopped like 5 months ago.  I hope he's alright.\nThere's a few things that we have to rebuild in switching to CoffeeCup, mainly the partials.  That's why the delay, I don't have the time atm to get this in.  Looking forward to getting a pull request!\n. @vjsingh hmmm..., yeah can you show me the terminal output when you start it up?\nWhat version of ruby and RVM are you using?\nAlso, try upgrading npm to the latest and reinstalling design.io?  It should work.\nIt may also be b/c the ruby script in design.io is never loading, perhaps because of an older/sudo-protected version of ruby.  Try running sudo design.io?\n. Wait, did you run design.io start or design.io?  You should run design.io.  Here's a breakdown:\n- design.io start starts up the socket server globally, but it does not compile the files\n- design.io is an alias to design.io watch, which does watch the files in your project.\n- design.io start should be run in a node project with design.io installed locally (node_modules/design.io). this is temporary, but it's needed now b/c the globally installed design.io (which handles the design.io start command) tries loading the local design.io to execute.  Again, this is temporary and will be cleaned up later.\n- design.io start listens for notifications for any totally separate project that has executed the design.io (or design.io watch) command.  When it gets that notification, it sends it to the appropriate connected clients.\n- You only have to run design.io start once, and just keep that terminal window open, or run it as a background process.\n- Then, for every project, run design.io to watch the files.\n- design.io start runs on port 4181.  That is where a small express app with socket.io is running.\n- design.io doesn't run on a port, it's just a watch process.\n- design.io uses ruby to watch files, as the node.js file watcher doesn't fully work yet on all platforms.\n- The mac comes with ruby 1.8.7 installed by default, and often requires gems be installed with sudo gem install x.  This has been a problem in the past with design.io.  If you are using mac's default ruby version, make sure you install the ruby watcher with sudo gem install fs-events.  If you do sudo npm install design.io, this will also execute that command.\n- A better approach is to install RVM, the Ruby Version Manager.  Then install ruby 1.9.2 (the recommended version in the community) and set it as the default (in the RVM install docs).  Then you can install design.io with npm install design.io, and no sudo is necessary.\n- Tower executes the design.io command internally - just to make it easier, so you don't have to open 2 terminal windows.  So, running node server in a generated tower app will run design.io (aka design.io watch).\nJust wanted to get that out in case things weren't clear.\nAlso, here is a list of Homebrew commands:\nhttps://github.com/mxcl/homebrew/wiki/The-brew-command\nTo upgrade your version of Node to 0.6.14 (that's what I have, may be higher now), run this:\nbrew upgrade node\nTo update to the latest version of NPM (I have 1.1.16, may be higher now), copy/paste the command from their homepage: http://npmjs.org/\nTry that stuff and see if it gets working.  It definitely should be working.  Here's my setup:\n- Mac OS X 10.6.7\n- Node 0.6.14\n- NPM 1.1.16\n- RVM 1.9.2\n- Ruby 1.9.2 (via RVM)\n. Made the switch in the development branch.\n. Hey, try clearing your npm cache with and without sudo and running again (also try updating your version of npm to >= 1.1.16):\n[sudo] npm cache clean\nnpm install\nThat's usually fixed these seemingly random installation problems.  Let me know how that goes.  If it doesn't work, send me your OS and node version and we'll go from there.\n. No problem. Don't know anything about Fedora, did clearing the cache not work?  If there's a different error message, post that onto a gist too.  Thanks!\n. I also saw this earlier today, don't know anything about native extensions but if this isn't an npm cache issue it looks like the error is talking about a native extension:\nhttps://twitter.com/#!/TooTallNate/status/194927373387448320\n. This was intended. There just needs to be a way to opt-out of (or perhaps opt-in to) using \"resourceful controllers\".  It's borrowed from https://github.com/josevalim/inherited_resources.\nAll of the actions are implemented by default.  If you comment out the route and manually place the routes you want, that's one way to avoid the security hole of potential unwanted actions.  Another approach would be to have a class method that disables/enables default actions:\ncoffeescript\nclass App.PostsControllers extends App.Controller\n  @resourceful()\nWe'll have to think about what we all prefer.  I personally want to have the controller actions implemented by default because they should be exactly the same 90% of the time (fat models, skinny controllers).  But this does mean the app developer would have to take responsibility for making sure no security holes are present (want to minimize this burden as well).\nAlso, you can use only and except to filter actions.\n. Yeah this was most likely because your internet connection was spotty.  We could probably catch these network errors and output a message like \"make sure you have a good internet connection\".\n. I'll look into doing this in the next release.  Let me know if you see it again.\n. Will look into this probably next week.  This is definitely b/c of design.io.  Design.io is basically a wrapper around the pretty cool library hook.io, so let's also make sure hook.io works as expected (I imagine it does, since it's been around for a while and looks like it's been pretty much perfected).\n. It does, tower server calls design.io.\nhttps://github.com/viatropos/tower/blob/master/src/tower/server/application/watcher.coffee#L14\n. Haven't had the time lately to check this out :/  Doesn't look like I'll be able to anytime soon, have a bunch of other things before in line.\nIf you want to take a swing at it I will definitely merge a pull request. If this is preventing you or others from using it at all then I'll move it up in priority, but it seems like there are temporary workarounds at least.\n. I agree, it will be an addon. Just wanted to have it in there to demo initially :). A lot has changed since then, I think this stuff will be much easier to do now anyway with the latest version of Node. Will refactor/extract eventually, feel free to give it a shot as well.\n. @ylluminate @activestylus Going to start working on this now, need to simplify the getting started process and design.io is a pain. Commented a little here https://github.com/viatropos/tower/issues/206#issuecomment-7913200.\nIdeally the asset compilation and \"watch\" system would have these features:\n- Transparent, doesn't require installing a separate app or running a separate command in another window. But, it should [eventually] be able to be run separately/manually if desired, so you can for example keep the watcher constantly running even if your server turns on/off\n- Pure node. Remove this ruby business.\n- Fast/efficient. Some issues with design.io are that it used some JS AST parser to find the require statements, but that's super slow with a large number of files. And also, it used the fs async api, which causes a memory explosion on a large number of files (I think).\n- Should compile the assets instantly when you start your app (right now you have to wait a few seconds).\nWhat are your guys' thoughts. Have you tried grunt? Are there any other tools?\n. Still not able to get notifications from fs.watch on a directory... https://github.com/joyent/node/issues/1986\n. Tower is now no longer using design.io.\nInstead, use grunt. In the generated tower app:\ngrunt start --config ./grunt.coffee\nIn the tower source code, an alias to that:\nmake watch\n. Awesome! Going to push this to npm in the next few days.\nHey so how do you measure the memory usage of the program? I'm no master at system-level commands lol.\n. cool, I'm using the activity monitor as well, just wondered how you might do it in the terminal, will checkout ps aux, thanks.\n. This looks more like it!  One request though.  Can you resubmit this without all the changes to the unnecessary .js files?\nTo do that, create a feature branch, make your changes, commit and push and open a pull request from that feature branch.  Then it'll be just the relevant files.  Just so the commit history isn't saying 14,000 additions, 13,000 deletions everywhere, I already did that on accident once, lol.\n```\nfrom your tower fork\ngit checkout -b issue-107-fix\nadd code, commit, push\n```\nOnce you do that I'll close this request, merge the new one, and push.  Looks good, thank you.\n. sure, though I'm not sure why all of those files were different?\n. You should be able to run design.io in the root of the cloned repo and it'll do all the compiling.\n. Agreed, we should do this.\nIt's also particularly annoying that some commits that were accepted (and lots of my own) say 15,000 additions, 14,000 deletions.  Is there a way to permanently remove everything in the lib folder from git history, such that it 1) doesn't cause any problems such as with people who've already forked the project, and 2) that it also updates the commit graphs (do you know if @GitHub is reading this dynamically or is it permanently there in history no matter if we hard-remove it from the git history?).  If you know how to do this let me know, I've always avoided changing git history in the past b/c it did strange things, but this is a case where we should do it.\nAnother thing we need to do to make this happen: move the generator templates to src, which will require some more sophisticated compiling steps.  Or we can leave it in lib, just need to think about this as well.\nThe last thing is we'll have to go through a thorough testing phase on different operating systems and such to make sure coffee-script compilation works as expected (since you have to compile it on the spot).\nLove how you described the advantages and disadvantages, that's the kind of stuff we need to make good decisions.\n. One solution is to run a post-install hook to generate lib javascripts when you do npm install.  I imagine we may run into conflicts if someone does npm install coffee-script inside a project directory after installing tower, then tower will use that version, which may not be compatible.\nBy precompiling like this, technically you wouldn't even need coffee-script, and could write your whole app in JavaScript.\n. This is happening in the dev branch now.\n. Make sure you've run npm install to install the dependencies in a new app.  If you did that, also make sure you've installed design.io:\nnpm install design.io\nLet me know if that helps.\n. A lot has been changed since this. Try again with tower 0.4.1 and reopen if there are any issues. Thanks!\n. what was the name of your generated app? this may be because a keyword was used, not quite sure yet.\n. This is a bug, thanks for pointing out.  If you want you can submit a pull request with the fix and I'll merge it in, otherwise I'll get to this tonight or tomorrow.\n. Nice\n. Thanks!\n. Updated a lot of this recently, we need to check if it's still broken (and write some tests).\n. I have had my eye on this but haven't gotten to it yet. Probably wont get to this for a few months. Feel free to hack on it and try to integrate it, that would be super awesome :)\n. Cluster support in 0.5.0.\n. This is a missing feature right now.  First, you can do format: {value: /pattern/}, but not format: {with: /pattern/}.  I'm thinking about changing this to match Rails but want to think about it some more first.\nSecond, the custom message: 'Invalid email' key isn't implemented yet.  It's very easy to do, just need to  customize this line here: /tower/model/validator/format.coffee#L21.  The other validators need this too, so we just need to refactor.  Will get to this soon unless you would like to submit a pull request.\n. Fixed in master.\n. Going to change the way this works in the next release, you shouldn't need forever in production. Stay tuned.\n. for reference this is no longer the case in 0.4.1\n. Yeah won't work because the mongo store is asynchronous so it requires a callback.  In the next version of Tower we're pushing out here soon all finder methods that return an array will return a blank array if it's asynchronous, but that same array will be populated with the records once they arrive.  This way you can do users = App.User.all() in the console and an instant later check the value of users and it will contain the records.   For first, last, and find(id), it will return undefined in async stores.\n. Awesome.  I would create a separate file, like Tower.Controller.Flash:\nhttps://github.com/rails/rails/blob/master/actionpack/lib/action_controller/metal/flash.rb\nWhenever you're adding a set of functionality that has more than 1 method I'd just put it into a separate module.  Unless it's just an extension of something that we've already created a module for.\n. The associations are much more robust in the development branch, check it out. Docs coming in the next month or so.\n. Yeah once we clean up development branch and merge it to master I'm going to go through all the documentation and update everything and I'll start marking things as todo or having a more obvious todo section.\nThis would be great to get some help on.  There's a couple things not yet done for the - what's now becoming - \"cursor\" (the 0.4.0 scopes and criteria):\n- includes (eager loading)\n- except/without (specific fields, not sure on naming yet)\n- explain\n- select/with (specific fields, not sure on naming yet)\n- nested paths (where('address.city': 'San Francisco'))\nI'm finishing up a bunch of pagination stuff for that right now.\nThe best way to implement includes is probably just to see how they did it in Rails and go from there.  I haven't looked much into this lately.  It should be able to handle most of the same arguments as Rails:\n``` coffeescript\nApp.Cart.includes('items').first (error, cart) =>\n  cart.get('items').all # no database call\nwhere orderItem belongsTo product and you want both:\nApp.Cart.includes(orderItems: 'product').all\n```\nI remember Rails was using an \"IdentityMap\" class, but I think we can get away with using Tower.Store.Memory somehow.  But, keeping a global store of the instantiated models might just be by id, so it might just be a hash.  We're also going to have to think about keeping any instantiated model in a global \"identity map\", but depending on the complexity we should probably save that for later (at least building with that in mind).\n. Sweet, I'll be IRC #towerjs most of this week.\n. Started to implement this in the development branch but I think it's broken now - doing some work on embedded documents and keeping the associations on the client bound to each other (parent.child == child.parent). It's hard to do on the server and haven't figured out how to do it properly yet (since it's async and dependent on the request, while Rails is sync). This is kind of what I'm thinking for an IdentityMap: https://github.com/viatropos/tower/commit/b996599e4e8069f793a7402d6a78430650e43887\nGoing to work on embedded docs this week, will try and handle this as well.\n. Copy-pasting into dev, thanks! Unless you want to make it a pull request, let me know :)\n. Thanks @edubkendo, excited to take a look. Will get back to you this next week.\n. Fuck yeah brother, this looks awesome!\n. We should definitely add unit tests, and once the feature set starts stabilizing we'll start making the PR process more standardized (having some unit tests and whatnot).  In the short term I'd rather have contributions like this than worry too much about testing though.  Unless testing comes naturally to you which is even better.\n. Sounds good, \"port all rails tests\" is on the roadmap :)\nOne of Tower's goals is going to be to teach all new coders how to be rockstar unit testers from the start. Unit testing is pretty hard to learn how to get into the flow with, so we'll all have to fix that.\n. I'm torn on this one. Most projects have the documentation on their website (ember, rails, jquery for example). A few have it on the wiki (homebrew, d3.js). But people are able to contribute to projects like rails' docs, so contribution is not affected by whether or not it's using a wiki.\nI think we should probably just remove the wiki and put the wiki content into a separate repo, like tower-docs (similar to https://github.com/lifo/docrails). The main issue is that google indexes the content in the wiki but not in the repo. If there was some way to prevent google from indexing the wiki that might make it less confusing. But I get what you're saying, it's confusing now. The docs are incomplete and changing fast right now because of all the development going on. I'm going to refactor the docs soon.\n. Working on a much more robust solution to this.\n. Docs coming in the next month or so, stay tuned.\n. This isn't an issue anymore I don't think. If validations do fail, it will respond with an error code. Reopen if it's still an issue.\n. Hey, the partial method is tailored to Coffeecup currently. We need to add support for the other template engines (or hook into the built in express version). If you'd like to do this I will definitely merge a pull request, otherwise I'll be getting to this in a few weeks.\n. Everything is going to be in handlebars in 0.5.0.\n. Not sure... what version of NPM and node are you using? I haven't tested it myself on Lion yet either.\n. Can't tell from the error message, can you paste any more (such as node-debug.log if there is one)? Try generating again?\n. Can you list out all of the versions of your NPM modules you have installed, both locally and globally?\nnpm list\nnpm list -g\nHere are mine for npm list: https://gist.github.com/2b377dbb7e53dad322e0 (I'm using \"tower 0.4.1\", which is the dev branch, but the dependencies are still the same).\n. I think it probably has to do with that. I recommend trying to install specific versions of modules until it works :/ this will be simplified/fixed in a little while when dev is merged into master. But for now, try doing things like:\nnpm install superagent@0.4.1 --force\nIf you find the solution please post. Hope that helps.\n. Anything in particular fix this? Going to close this unless you're still having issues.\n. Ember is just about to release 1.0: packages/ember/package.json.\nI've been working on file uploading and authentication and am just about finished with that (doing embedded documents this week), in the dev branch. After that I am going to update Ember on Node to use the latest (and try and get them to merge the npm/ember pull requests), and update Ember on the client. Then dev will be in master. I'd say in the next month or so this will all be updated.\n. This is fixed in dev. It's all working, try it out and let me know!\n. Thanks!\n. Awesome. Yeah, there's a lot to do still, feel free to send pull requests whenever. I'm working purely in the development branch now and won't really mess with master until the model layer in dev is working well, which might take a couple more weeks. If you create pull requests for master, I'll merge them in when I merge dev back to master because you're finding things that I haven't noticed in master or dev :) thanks! Since the code base is growing so fast I'm not too rigid about writing lots of tests, but if you do all the better. As the project stabilizes though tests will be key. That's it for now, looking forward to your contributions.\n. Try clearing your global npm cache and reinstalling some of the modules:\nnpm cache clean -g\nnpm uninstall forever tower -g\nnpm install forever tower -g\n. That's cool, didn't realize that was there. The major reason you'd want the actual createdAt field is to be able to query over it:\ncoffeescript\nApp.User.where(createdAt: '>=': _(2).days().ago().toDate()).all()\nIf there wasn't a field like that, we'd have to create a special adapter to convert createdAt into some query function for the id, which I don't even know is possible (or optimal). If it is possible to query the date from within the id let me know, otherwise it's too much a performance hit for this optimization. Closing the issue for now.\nYou would use this optimization for things like metrics though, will be implementing something like this after 0.5.0: http://engineering.foursquare.com/2011/02/09/mongodb-strategies-for-the-disk-averse/\n. Something isn't right with App.ApplicationController.ApplicationController.\n. Closing this issue unless there are still issues with it.\n. I haven't checked in a while (gearing up for merging dev into master, and things are somewhat different), but there is a public/javascripts/app/views/templates.js that gets generated with all of your views compiled in there. They can be used in a controllers render method like you would on the server, just make sure templates.js is loaded in a script tag (or add to config/assets.coffee, /app/views/templates.js). You can use it with render like:\ncoffeescript\nclass App.PostsController extends Tower.Controller\n  index: ->\n    App.Post.all (error, posts) =>\n      @render 'index', locals: {posts}\n      # also may want to try these:\n      # @render 'posts/index', locals: {posts}\n      # @render 'app/views/posts/index', locals: {posts}\n      # @render 'index', locals: {posts}, (error, body) => $('#container').append(body)\nThe templates are all stored in Tower.View.cache.\n. Just pushed a lot of new stuff to dev, rendering now works pretty differently (same API, but I don't think this issue is relevant with the new code). If you're still having issues with this let me know. Closing for now.\n. We shouldn't use a --no-static option b/c that makes it a little more difficult for the newcomer, and they're the one most likely to be confused by why their root route isn't working right.\nI haven't thought that much about having a custom .towerrc file, will consider it more over the next few weeks. But I would like to try to avoid that b/c there's already too many vendor-specific dotfiles in the community, and to me it would make tower feel less flexible for some reason - like we have all these custom build scripts and configuration to get it working. What do you think? Maybe in the future with a larger/regular community, then adding that would feel like the next logical step.\nI don't know what Foundation is, will check that out! If it's an alternative to Twitter Bootstrap we should reconsider including it. I'm over the default Twitter Bootstrap design. Soon we should create a simple/plain \"tower generated app\" twitter bootstrap theme, and use that for this index.coffee file, all put into app/client/stylesheets/application.styl. We should be able to use the same set of styles - minimal minimal styles, like what express gives you, maybe a little more :) - for the default error pages as well.\n. We should add a command-line option for saying either \"no css framework\" or which one you want (bootstrap, foundation, etc.). Something like src/tower/server/command/new.coffee#L20 (it's not implemented anywhere).\n. Closing this since we should implement generator options rather than static html.\n. Thank you for this, very nice!\n. Will do.\n. Interesting take. I've decided to go with 0.0.1 in the past for two main reasons:\n- I like to be further along than people think :), and I thought it was inauthentic (not the right word, something like that, \"cheesy\" maybe) when I ran into gems/plugins that were 0.1.0 that you could tell were just generated from jeweler or whatever along with git commit -m 'first commit'. \n- Subconsciously I expect 0.1.0 to have some unique value and work put into it beyond what an app/plugin generator/template gives you. It's saying \"I've put the effort in to get out what I consider an initial release\", whereas 0.0.1 is \"I just generated this thing\".\nLet's wait and see how others feel about it before we finalize anything.\n. On a side note, we need to also setup the ability to make custom generator templates, along the lines of rails_wizard (not the website, just the configuration part). Others are:\n- https://github.com/RailsApps/rails3-application-templates\n- https://github.com/viatropos/rails-pages\n- https://github.com/intridea/rails_wizard/ (the link's cut off with github's edit button in the corner...)\nSo you could do:\ntower new myapp -t https://raw.github.com/someone/my-tower-templates/master/my-base-template.coffee\nAnd that gives you your custom template.\n. Yeah we need to work on this. One of the big things is forever/hook.io/design.io, I think forever or one of those installs a ton of things.\nAlso, the after hook for the custom coffeescript installation takes a while, not sure why (I think it may be compiling or something). We can fix this by making it so the npm version of tower is pure JS (compiled coffeescript).\nWill work on this in the next few weeks, let me know if you find anything.\n. fixed now.\n. Sugar.js is pretty cool (especially since it basically brings Ruby's ActiveSupport to JavaScript), but I don't think Tower should advocate extending core objects since it's generally not accepted best-practice in the JavaScript community. Instead we should make this all available as underscore helpers.\nI got into trouble with extending core objects in Ember and found jQuery has decided as a team they won't help with bugs that arise from that:\n- https://github.com/emberjs/ember.js/issues/1169\n- http://docs.jquery.com/Won't_Fix#Object.prototype_Issues\n- http://erik.eae.net/archives/2005/06/06/22.13.54/\nInstead, we should have a page on the website/wiki for \"useful\" plugins/modules that includes this one.\n. Sounds good.\n. For the record I personally don't mind extending core objects, that's commonplace in Ruby and a big reason why you can create such clean apis in it. The main reason (from that old link above, and others), is in certain edge cases you ultimately run into, it causes JavaScript not to work like you'd expect, and some plugins/modules might have been built upon that edge case working a certain way.\nI'll take a look at how Sugar.js avoids this in a few days, would be interesting to see how they avoid problems. \nBut the main thing is that, while they may have figured out ways to prevent problems, if we were to advocate extending core objects, people would eventually write code that causes problems. I'm going with the jQuery (and \"JavaScript community in general\"'s) decision to not do this, b/c you know they probably debated about it for years and thought about implications in a ton of different browsers. We should definitely have a good reason why ourselves as well, and create a page in the docs/site that outlines why we came to this decision.\nIdeally the docs will have clear descriptions of all the ways we thought about how to implement something and the pros and cons of each and why we chose what we did in the end. This is one thing I would have loved to have while learning to code, it would have saved a ton of time.\nIn terms of finding the cleanest API, there's no doubt that sugar has a better api than underscore. I was going to use sugar when tower first started b/c of that. But sticking to the principle \"never extend core objects\" left me to try and get the same API joy out of underscore, and I have. The API is not that much different:\n2.days().ago()\n_(2).days().ago()\nPlus you know \"all helper methods are on the _ object\". It's clean, and it keeps the code super organized.\nMaybe down the road, after everything else is working well and we've had a lot of time to write down the pros and cons of extending core objects, we can make a module that extends prototypes that you can opt into (someone will eventually make this anyway). But for now let's go by the principle \"no extending core objects\", just do underscore helpers.\n@edubkendo we're using that underscore.string library in tower already! :) so happy somebody made that.\nThere's a ton of string and other helpers in here as well (and plenty of room for optimization). Check it out:\n- a bunch of helpers for dates, checking if strings match common formats, formatting currencies and numbers, sanitizing strings (xss), and inflection... and soon some sort of string masking functions (to aid in form input masking): https://github.com/viatropos/tower/blob/master/src/tower/support/format.coffee (added with _.mixin at the bottom)\n- and underscore.string! https://github.com/viatropos/tower/blob/master/src/tower/server.coffee#L4\n- side note, all the other ./support/*.coffee code (also underscore helpers) is in need of refactoring as well\nThere's a lot that needs to be done with those, simple stuff such as I think you can only use days on dates, but we need to add:\njavascript\n_(2).seconds().ago()\n_(2).minutes().ago()\n// hours, weeks, months, years, beginningOfSecond, endOfSecond, beginningOfMinute, etc...\n// and a lot of other nice things from active_support/core_ext\n. This is a tmp hack to make debugging easier in development. It's a valid if statement (for one-liners you don't need curly brackets if that's what you mean). If './lib/tower.js' exists (it will if you've compiled tower with design.io), then it'll use the javascript files, otherwise the coffeescript.\nIn the end, I think it should be such that the NPM version only gets the JavaScript version, but in development you should be able to do both.\n. merged this stuff, thanks man.\n. Yeah, we definitely should reduce the amount of code downloaded for a new app, what's there now is temporary. Haven't seen Vendorer before, interesting idea. I'm down for that.\nI've also been thinking about moving something like cached-commons to node, making it work like the NPM registry or rubygems.org, so in the end there's a standard way of pushing your (any) JavaScript library to this CDN (cdnjs is doing a similar thing). The issue with those two now are they require manual intervention - they should work like gem or npm, e.g.:\ncdn install jquery # install jquery\ncdn publish # publish the library the current directory\ncdn list\n...\nIt can work off of package.json. It should be straightforward (and fun) to implement, really want to see this implemented at some point. It can use cloudflare to freely cache the libraries.\nIn the end, this would mean you really can do without downloading any libraries, making your source code that much more lean (the same way most people I think don't download jQuery, just point to google's hosted version).\nThe vendorer solution might be easier/faster to implement, maybe we should create a roadmap?\n. Sounds good! An older roadmap is in the docs: https://github.com/viatropos/tower-docs/blob/master/en/roadmap.md, will move that back to the wiki soon.\n. Bower is now taking care of this: http://twitter.github.com/bower/\n. +1 what @edubkendo wrote\n. The generator has been updated and is using ember, a lot of this has changed. Try it out and let me know if this is still an issue.\n. Nice one. This is the main/big thing I'm working on right now, making the dirty attributes functionality much better. There's a few things that seem to be off, and I want to get rid of that Tower.Model.Data object. Hoping to finish refactoring/fixing this stuff in the next few days. Any help would be awesome, let me know.\n. Also, reload is a method (in case the above isn't pseudocode), so it should be t.reload().\n. FYI, the issue is kind of complicated. Here's a couple of things.\nFirst, the new api isn't going to use new App.User, because Ember doesn't allow this (I asked if they could change but they basically said no). To construct a new Ember.Object they use Ember.Object.create(), but since create on a model is for saving it to the database as well, Tower is using build:\ncoffeescript\nuser = App.User.build(email: 'example@gmail.com')\nThe issue with new App.User(props) is that the mixins in Ember don't get applied.\nThen for the dirtyAttributes... There are two ways models need to be constructed:\n1. Manually, where the developer writes App.User.build(props)\n2. Internally, when you serialize a database record to a model. This (is going to) have the API App.User.build(props, isNew: false). Rails does this as well but it's not very clean/well documented.\nThe reason for this is b/c it changes the way attribute changes are tracked (since initial attributes are different). Right now, the issue is that, while Tower is handling serializing the already-saved attributes properly (so they don't act as changed values), it doesn't track the changes \"properly\" in some cases (this is what I'm figuring out/solving now).\n. Yes I think the documentation for views is out of date. A lot of the view stuff is going to be changing in the weeks ahead, stay tuned. For now I recommend just using plain tag helpers for coffeecup (or ECO/EJS).\n. Yeah, I don't think we have landed on a clear set of cases this method should support, we should do that. What do you think?\n. Yeah, but we don't necessarily have to stick to mongo's api since tower's api will be the same for every database (once they are supported). We can add those extra things that make intuitive sense.\n. Hey @scottkf if you get a chance (and you're not already) checkout the development branch and test it out, I'm planning on merging it this week or the next and publishing all the new stuff. Thanks man.\n. yeah we need a way to fix this. do the tests still pass with this pull request?\n. Fixed with #c0926e7af69ec371e282713ad5ab7f7f3d7fdb5d\n. Thanks for pointing out, updating the docs for the next release. Use:\nnode server.js\n. After dev is merged into master, the master branch is going to be what dev is now. At first I thought master should be the same as what's installed with NPM, but the community doesn't seem to do it this way. Instead we'll have version branches like Rails does, and master will be edge.\n. @avaranovich Good to know. There's a lot of room for improvement in getting started working with the source code. Will focus on this in the upcoming weeks.\n. This should be much easier now and is outlined in the readme: https://github.com/viatropos/tower#contributing-to-tower\n. @scottkf Not sure what this is, but it seems like it's one of these:\n- What's your Ember version for the client? Maybe this is out of date\n- What does the generated JavaScript look like for profile.coffee? It may be the coffee-script branch is off.\n- I haven't tested computable properties that observe associations (i.e. .property('posts')), so there may be some issue with that. Maybe try changing that to property('name') or some other \"simple\" property and see what happens.\n- Just to make sure, you're using the generated tower@0.4.1 in ./dist/tower.js from cake build?\nThat's all I can think of off the top of my head. Let me know if you figure it out.\n. I see, so the generated code is this?\njavascript\nProfile.prototype.playedCount = Ember.computed(function() {\n  return this.get('ownerships').count()\n}).property('ownerships');\nIf so, that's the issue. It means it's not using the custom coffee-script fork. Try running:\nnpm install git://github.com/viatropos/coffeecup.git --force\nnpm install git://github.com/viatropos/coffee-script.git --force\nnode server\nThe generated code should look like this:\njavascript\n__defineProperty(Profile,  \"playedCount\", Ember.computed(function() {\n  return this.get('ownerships').count();\n}).property('ownerships'));\n. > Though it would be convenient, for people new with ember and tower, for Tower to be able to use the simple definition without using Ember.computed and .property.\nWhat did you mean by this? Not quite sure...\nOn another note, we are going to start having a new api for defining models that works similar in convention to ember and other javascript libraries. It's going to be the default API, and you can opt-into the coffeescript/executable-class-bodies version if you'd like.\nSo something like this will be the API:\n``` coffeescript\nApp.User =  Tower.Model.extend\n  email:    Tower.field('string')\n  posts:    Tower.relation('hasMany')\nthe above will be equivalent to this:\nclass App.User extends Tower.Model\n  @field 'email'\n@hasMany 'posts'\n```\nThe two main reasons for this are:\n- it will be usable purely in JavaScript (executable class bodies are tedious to write without coffeescript)\n- you won't be required to use the custom fork of coffeescript\nThe full \"JavaScript API\" needs to be fleshed out (defining validations, callbacks, etc.), but it should be straightforward. Note though, the coffeescript api will still exist, but it is probably going to require a command line flag when generating a new app, such as tower new app --coffee-classes or something.\nIf you guys would like to help I have started hacking away on this in the javascript-api branch.\n. This works if you send the data as JSON:\njavascript\n// the serialized version of this:\n'/posts.json?{sort: [\"createdAt\", \"desc\"]}'\n// this is done using something like this:\nencodeURI(JSON.stringify({sort: [\"createdAt\", \"desc\"]}))\n// which looks like this:\n\"%7B%22sort%22:%5B%22createdAt%22,%22desc%22%5D%7D\"\nNeed to handle the case where it's a human-readable url.\n. I just posted that from memory (pseudocode). You can see the actual queries generated in the web inspector's \"Network\" tab (in Chrome), when you do things like this:\njavascript\nApp.Post.where('title', 'Y').desc('createdAt').fetch()\nThe network tab is saying the /posts url is this:\nhttp://localhost:3000/posts?sort%5B0%5D%5B%5D=createdAt&sort%5B0%5D%5B%5D=desc&conditions%5Btitle%5D=Y&format=json\nNot sure how this is serializing exactly, it's done by jQuery.\n. Really, the commands should be as fast as possible, so they don't even need to use the Tower.Command syntax, it can just be straight up functions like module.exports = (argv) ->.\nThis also entails lazily requiring tower core modules when necessary.\n. Started on this, the tower new command loads close to the minimal amount of modules it can:\nhttps://github.com/viatropos/tower/pull/329\n. Run make build to build dist, and if given commit access to tower make dist will upload it to:\nhttp://cloud.github.com/downloads/viatropos/tower/tower.js\n. Yeah this is actually the real issue. That means you need to run design.io start in some other terminal window, which will start the socket server for live updates.\nBut... design.io is bulky and old school, we made it before the node watcher really worked, and before tools like Grunt.js, etc. We need to get rid of it and build/integrate something simpler/faster. I think design.io was one of my first node modules, and I've learned a lot since then.\nWe should try out grunt. But to get live updates, I think the easiest thing will be to refactor design.io so it:\n1. doesn't use ruby, just node\n2. works on windows (in addition to mac/linux)\n3. doesn't use a separate server, has access to the same environment as your running tower app.\nWe were trying to be too ambitious with it up front, making it so you could have 1 global socket server and could register any number of \"projects\" (directories) to be watched which could reuse the same socket server. It requires too much magic, and in order to make it be performant, it would require a lot more time and effort. Eventually we may end up there, but for now we need to simplify this a lot. Design.io is one of the main things causing problems getting started.\nI want to work on this as soon as possible.\n. Man, grunt is awesome. Really enjoying it @activestylus. I just got the tower source working without design.io: \nhttps://github.com/viatropos/tower/blob/grunt/grunt.coffee\nGoing to try and get the whole build process down today, then see what it would take to make the generated apps use it too.\n. Sweet!\n. Let's keep the last one.\n. No this is good, keep posting! Send pull requests as well, that would be super helpful. Thanks man.\n. https://gist.github.com/3422483#comments\n. nice, will take a look.\n. If you could do this that would be fantastic. All that really needs to happen is to wrap the core mongodb async calls in a fiber/future, the code in tower-store/server/mongodb. There's probably a few other filesystem/http async calls, but not much. Should be straightforward once node fibers are understood, let me know if you figure it out I'm interested.\n. To make the callback chain run in a fiber can you just put the fiber wrapping code in the runCallback method?\npackages/tower-support/shared/callbacks.coffee#L61\n@scottkf if you get started on anything send me a link I'd love to help out.\n. Let me know when you push your stuff, it will be easier for me to see what you're describing.\n. Interesting, I can see the REPL context part being complicated. I'll check this out in a bit, keep moving though it looks like you're gonna get there pretty quick.\n. @scottkf started messing around with your code, thanks for plowing through that eval stuff, was super helpful. got this working:\n``` coffeescript\nmodel/cursor/finders.coffee\nfind: (callback) ->\n    Future = require('fibers/future')\n    future = new Future\n    @_find (error, result) =>\n      future.return([error, result])\n[error, result] = future.wait()\nthrow error if error\nresult\n\n```\n``` coffeescript\ncommand/console.coffee\nrun: ->\n    repl    = require(\"repl\")\n    repl    = repl.start\n      prompt:\"tower> \"\n      useGlobal: true\n      context: @\n      eval:(cmd, context, filename, callback) -> \n        cmd = cmd.slice(1,-1)\n        Fiber(->\n          try\n            callback(null, eval.call(context, cmd))\n          catch error\n            callback(error)\n        ).run()\n```\ntower> App.Post.all()\n[ { isNew: false, errors: {}, readOnly: false },\n  { isNew: false, errors: {}, readOnly: false } ]\ntower> var p = App.Post.all()\nundefined\ntower> p\n[ { isNew: false, errors: {}, readOnly: false },\n  { isNew: false, errors: {}, readOnly: false } ]\nWill try and clean this up a bit.\n. Building off your sync branch:\n- https://github.com/viatropos/tower/tree/sync\n- https://github.com/viatropos/tower/commit/7a0a3eee9734dab7fbb32bc2c53f25ed760d1389\n. merged! we need to add console options and such still.\n. Side note, you can make things synchronous in the web console too by setting jQuery's async to false, which for the model layer is done in this [to be cleaned up] way:\n```\nadd too app/client/config/bootstrap.coffee \"bootstrap\" method:\nTower.StoreTransportAjax.defaults.async = Tower.env != 'development' # false if development, so it's sync.\n```\n. Going to close this, looking good to me. Great work! If issues come up with it we can open those separately.\n. This looks like it's old code, haven't yet pushed master to npm.\npackages/tower-generator/server/generators/tower/app/appGenerator.coffee#L135\n. Fixed, 0.4.1 is pushed to npm.\n. @activestylus This is something that should definitely be built in and easy to modify.\nI've also used https://github.com/norman/friendly_id in the past and it modified find so it could handle slug if I remember correctly. But that's probably not the best way to do it.\nI like having toParam in the model to convert it to a param, but it seems that having some method like @toParam 'permalink' in the controller might make sense too - where it would basically override the findResource to use where(permalink: @params.id)..., something like that.\nSend me a pull request and we can work off that if you'd like.\n. You're the man, thanks!\n. @Maedi great points. This is definitely something to think a lot more about.\n. @adamjacobbecker The main thinking behind converting the CS to JS are to streamline development and to make tower's source accessible to the plain JS developers (of which there's potentially ~5x as many from looking at the GitHub language breakdown). We can convert it by just using the generated JS. I might make a few \"style\" changes to the generated JS, but other than that we wouldn't be spending much time on it.\n@viotech @maedi and @adamjacobbecker I agree with you all that the CS version looks super nice. However we're facing a couple of challenges with that API (and CoffeeScript in general) that's getting in the way of development. Mainly:\n1. We have to spend a lot of time debugging CoffeeScript when new users start trying to use the app.\n2. The CS extensions we've created (./coffee-inheritance.js) aren't compatible with CS 1.4.0 and need to be updated.\n3. I haven't figured out a good way to have the \"executable class bodies\" that CS allows work well with the Ember.Object.extend API (which is how most JS APIs are written).\n4. Since the client is more complicated than the server in some cases (mainly, routes), the extend({}) syntax is better than the DSL in some cases (and the number of cases it's better in seems to be growing).\n5. Having to compile the CS is a turnoff to a large amount of potential contributors, and it also slows down TDD - to develop new features for the client we need to compile files individually and use something like Require.js, but we're not there yet so we have to wait for the entire project to compile for every change! (maybe this is just me though, definitely open to suggestions).\nThe first issue takes a way a lot of time/energy/thought from actual development. If we can get rid of this issue somehow (any ideas?), then that would be a huge plus. It pretty much means solving the other 4 challenges.\nFor the second, there is an issue with the current implementation when you minify the generated JS for production. This would take a few days or a week to fix since I am no expert in language grammars.\nThe third issue is the biggest. Mainly, there needs to be a clear way to append attributes/methods to the prototype (I think it's accessible through Ember.Object.proto()), but should be added as a mixin. Take the model definition now:\ncoffeescript\nclass App.Post extends Tower.Model\n  @field 'title'\n  @field 'text'\nCurrently that is creating 2 mixins, and for every new field it will create a new mixin. That's because @field is essentially just doing @reopen(title: new Tower.Model.Field) for each field. I tried optimizing this by hacking into the last mixin, but it's very brittle and I don't know if there are ways this could cause unpredictable errors. You can see how I did this here:\n- packages/tower-model/shared/attributes.coffee#L45-47\n- The hack: packages/tower-model/shared/attribute.coffee#L153-158\nSo currently that hack works, for the simple case of defining fields on initialize. But the problem is if any of these:\n1. If you define fields at run time (after Ember is initialized) we may need to \"invalidate\" the class' mixins. I'm not sure about this, but to find out we need to write some tests (or deeply understand Ember's source) so we know we don't have to invalidate them. This takes time, it could take a few days to resolve this.\n2. There's issues doing it this way with binding and computed properties that I've run into that were hard to debug (can't recall exactly), so I never dug in further. But it had something to do with auto-updating associations when a record in the system changed I think.\nSo at this point you can see, a lot of the time I've been spending (or thought's I've had to think through) are how to get CoffeeScript APIs to play nice with JS APIs - or, specifically, Ember. One thought is that changing the source code to JS would eliminate this entire field from thought, so I can start focusing on core functionality.\nThe final issue is that things like the routes look better using the Ember.Object.extend API vs. the Rails-like DSL:\n- https://github.com/viatropos/tower/pull/299\nSo at first we started with these APIs using the Rails-like DSL:\n- routes\n- models (fields/associations/validations/callbacks)\n- controllers (params/scopes/callbacks)\nBut now that we're thinking of doing the router with the JS/Object API, we're down to just models/controllers using the DSL. But because we're also thinking about changing the functionality of the controllers (see that routes pull request above), and moving the \"actions\" to the router itself, then we don't need callbacks in the controllers anymore, and we also can get rid of the class methods param and scope so you just create a new controller for the scopes, and params are defined in the router (also detailed in the routes pull request).\nThis means the controller doesn't have any \"executable class bodies\" anymore; it doesn't need them.\nSo now it's just the models.\nI agree the field/association definitions look nicer in CS. But this is the only part of Tower that uses it. And in JS, it is very verbose. Then you add on top of these 2 facts the items from the list above (time spent debugging CS for newcomers, our custom CS extensions not up-to-date, and the non-ideal-ness / performance-loss of creating a new mixin for every field definition), it seems like a waste of time/effort to keep that CS API.\nI personally don't want to work on that atm, I am working on some projects applying Tower and find it is easier just writing the code in JS even if it's not as pretty. However, if the CS API was all working well and we didn't have to spend time regularly making sure it still works, and it was just as optimized as a JS equivalent, then I would probably use it. If any of you want to take the lead on that I will be there to help whenever you need it. Let me know.\nThoughts?\n. @edubkendo interesting notes about coffeescript redux / source maps, will have to check that out at some point.\nI think I've been confusing terms when talking about CS/JS with Tower. The main thing I'm concerned with is that the \"executable class bodies\" part of the CoffeeScript API is not working very nicely with Ember. And when I've been saying \"JS API\" I don't mean writing the code in JavaScript, but rather, using the \"object\" API (or whatever we want to call it), which can be written in CS too:\ncoffeescript\nApp.Post = Tower.Model.extend\n  title: Tower.Model.field('string')\n  body: Tower.Model.field('string')\n\nNote, the API in that code is not the final API, just ideas atm.\n\nWhat I meant by \"moving from CS to JS\" is basically removing the executable class body API. So, the default for a generated tower app could still be CS, I'm cool with that. But the main issue is, unless we can get the executable class body API in CS to be just as good/error-free/optimized as the \"object API\" (above), then when you generate a tower app it should generate \"object API\" code like above rather than the current executable class body api:\ncoffeescript\nclass App.Post extends Tower.Model\n  @field 'title'\n  @field 'text'\nGetting rid of the executable class body API would make it so we can use plain-jane coffee-script. The main thing we need to decide on, then, is an \"object API\", and if everyone's cool with either 1) getting rid of the \"executable class body API\" in favor of the \"object API\", or 2) having both APIs, and defaulting to one of them.\n. Really, we could do the executable class bodies API as well, it would just take a decent amount more time to implement a more generic extension module for coffeescript, where we can more easily make changes. This would also set us up to hook into other x-2-js languages.\n. Not going to change the source or tests to JavaScript until after we try using CoffeeScriptRedux (thanks again for pointing out @edubkendo). If the compiler is as extensible as it seems to be (it doesn't seem to be complete yet https://github.com/michaelficarra/CoffeeScriptRedux/issues/101), then this could open up a lot of doors. Also, I want to try the new grunt watcher and see if we get significant performance improvements.\nIf we can customize the coffeescript compiler, and the watcher doesn't use up a bunch of memory, then it might mean keeping the source in coffeescript could be easier than javascript. Right now its kind of painful though, after a while.\n. We are moving to JavaScript. It's so much more powerful, and I don't think CoffeeScript will be around much longer with ES6. The main thing is, plain JS is much much faster than CoffeeScript. It will lower the barrier to entry as well.\n. This is on the todo list, it gets tricky in some situations b/c of process.on('uncaughtExecption'), which doesn't give you the context of the error so makes it obtuse. Going to fix soon, would love help on this.\n. Not sure I fully understand. Tower doesn't have a built in logger system yet, but you can just use console.log and console.error, etc. Eventually we need to implement/integrate better logging.\n. If you want to take a stab at making/integrating a better logger, let me know and I'll do what I can to help out.\n. Ah, thanks for pointing this out. You're right, we haven't handled this yet, only the resources ones. This area needs a lot of work.\n. Thanks, this just broke when switching from design.io to grunt. Will get to this in a bit.\n. This is fixed now (in master, not npm): https://github.com/viatropos/tower/commit/26766e3e72358174234d956dea00abc1f092e731\n. If you have generated an app using an older version of tower, and are asking how to upgrade it to the new one, you can use the nice one-click installer found here: .\nHaha, no you just have to manually make the changes, no real clean way to do it. It should be straightforward though, most of it's the same.\n. I am able to get running with this:\ngit clone https://github.com/viatropos/tower.git\ncd tower\nnpm install\nnpm link # this makes it globally available\nmake watch\nThen in another window:\ntower new app\ncd app\nnpm link tower # link it to the git repo just installed\nnpm install\n. Other things that you need to change when upgrading an existing project to the latest stuff:\n- First, generate a new app, just so you can grab the files from it.\n- copy/paste ./grunt.coffee from the generated app to your existing app\n- copy/paste ./vendor/javascripts/tower.js\n- copy/paste ./vendor/javascripts/ember.js\n- copy/paste ./vendor/javascripts/handlebars.js\n- really, just copy/paste the vendor directory probably.\n- copy/paste ./test/client.coffee (new stuff removed design.io)\n- copy/paste ./config/assets.coffee (or just remove design.io, and make sure ember and handlebars are in there)\n- remove Watchfile from your existing app\n- remove anything matching design.io in old ./package.json\n- add anything matching grunt in new ./package.json (grunt-less, grunt-stylus)\nFinally, look at your ./config/application.coffee file (if you're existing app was using tower v0.4.0), and compare it to the newly generated app's ./config/application.coffee and ./config/bootstrap.coffee. Essentially, move everything in the old @configure -> block into App.configure -> inside ./config/bootstrap.coffee. All that should be in application.coffee is the namespace declaration.\nTo compile assets in the new app, run this watch command in another window in the project directory:\ngrunt start --config ./grunt.coffee\nTo run your new app:\nnode server\n. Thanks for posting. This was some of the first code I wrote and this specific thing was just hacked in there, been meaning to come back to it. It seems this needs a much more robust solution, not sure though.\nCan you send a pull request?\n. Done\n. This is done. Now you can specify the set of databases allowed, and the default database, in the Tower.Application#initialize method. If you don't want to connect to any databases, just use the memory store:\ncoffeescript\nTower.Application.instance().initialize(databases: ['memory'], defaultDatabase: 'memory')\n. Installing mongodb on windows: http://docs.mongodb.org/manual/tutorial/install-mongodb-on-windows/\n. javascript\nvar s = 'C:\\\\www\\\\Projects\\\\app\\\\app\\\\views\\\\index.coffee'\nvar p = new RegExp(s)\nconsole.log(s.match(p)) // null\nThat's the issue, need to escape better.\n. javascript\nvar s = 'C:\\\\www\\\\Projects\\\\app\\\\app\\\\views\\\\index.coffee'\nvar p = new RegExp(s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\"))\nconsole.log(s.match(p)) // [\"C:\\www\\Projects\\app\\app\\views\\index.coffee\"]\nOr better:\njavascript\nvar s = 'C:\\\\www\\\\Projects\\\\app\\\\app\\\\views\\\\index.coffee'\nvar p = new RegExp(_.regexpEscape(s)) # tower helper\nconsole.log(s.match(p)) // [\"C:\\www\\Projects\\app\\app\\views\\index.coffee\"]\n. Or to test this string, should I be doing this?\njavascript\nvar s = 'C:\\\\\\\\www\\\\\\\\Projects\\\\\\\\app\\\\\\\\app\\\\\\\\views\\\\\\\\index.coffee'\n. @luckysmack is this working for you?\n. So is this a general pattern for escaping file paths on windows?\njavascript\npath.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\")\n. Yeah Rubular is the best for sure, just was never sure about escaping double backslashes, and if the windows paths were single or double backslashes.\n. This seems to be working now, reopen if anything comes up.\n. Grunt is too slow.\n. Will get back to you soon with a detailed response.\n. Posting some links here (for perspective):\n- http://ninjasandrobots.com/html5-page-cache-with-pjax-localstorage-firebase\n- http://stackoverflow.com/questions/9237069/do-i-really-need-an-mvc-framework-like-backbone-js-or-ember-js-in-rails-for-a-si\n- http://asciicasts.com/episodes/294-playing-with-pjax\n- https://github.com/emberjs/ember.js/issues/161\n- http://cantina.co/2012/06/04/a-faster-web-with-pjax/\n- http://engineering.twitter.com/2012/05/improving-performance-on-twittercom.html\nTwitter and GitHub also use a kind of PJAX approach (twitter after trying client-side architecture).\nPros of PJAX:\n- Less javascript to download on the client (potentially much less). But this is only a performance problem on first page load or a forced refresh (which does happen often).\n- Better performance on mobile devices (since most browsers today can handle 500kb+ rich javascript apps just fine, but mobile struggles a little, with things like template rendering).\n- More optimized HTTP requests, since you get back pre-processed HTML that can be inserted into the DOM without any processing.\nCons of PJAX:\n[coming]\n. > but surely JSON over the wire for every secondary page is the fastest? Or is the \"downloading + processing\" time slower than downloading HTML?\n@Maedi We need to benchmark this. I suspect that it's probably about the same for laptop/desktop browsers, but that it's much faster to send HTML from the sever (instead of JSON) for mobile devices. The thing to note is, on the server, you can cache the generated HTML and JSON for a particular request, so assuming you have done that, rendering is basically \"instant\" no matter if you ask for HTML or JSON. So this creates two sub-questions:\n1. What is the size difference between the server's HTML and JSON responses for a particular request, and are these size differences significant? I imagine the HTML response can easily be twice as large as the JSON response (one thing to test), but that this doesn't add any significant time to the response (assuming everything is cached in memcached/redis, then if the response is 200kb vs. 100kb, that is only going to add a couple milliseconds to the response time - another thing to test).\n2. How long does it take to insert server-generated HTML into the DOM vs. compile the JSON into HTML then insert it into the DOM all on the client? I suspect there is no noticeable performance impact for simple HTML structures (simple lists/tables/etc.) on laptop/desktop browsers (something to test), but I suspect there to be a noticeable performance hit for even simple lists on mobile browsers (something to test), and a noticeable performance hit for more complex ui elements on laptop/desktop browsers (though this one is hard to test because you don't run into complex ui elements that often, at least I can't think of any).\n@d4tocchini We should definitely try to integrate both methods of rendering (client and server), and have Tower be intelligent enough to figure out when to use each. I like what you're saying there, will checkout that video. The main difficulty at this point is, if you have the server render the initial page (static HTML, the way twitter is doing it), I don't know how to get ember to then \"backtrack\" and convert that into an \"ember view\" (which you can do with knockout b/c they read the data-bind tags). Ember forces you to put the \"templates\" into <script> blocks, but to get the performance boost from the server generated HTML, you don't want to wrap it in script tags. The question is, if you did that, how do you get Ember to make those views? If we could figure that out then we'd be golden.\n. That's a good/interesting idea, haven't thought about that really. Will think about this more over time. It's all open ground.\n. No you can request additional data, just do:\njavascript\nApp.Post.where('active', true).fetch();\nThat will fetch matching records from the server. You can call that anywhere on the client, I think this issue was just asking if there was event built into ember or the controller or something like that, which you could then use as a hook to make a request like above. Going to close this, thanks for pointing out.\n. You'll be able to opt-in to grunt or brunch.io for 0.5.0. Tower won't be using either by default though, in order to increase performance.\n. This is actually partially implemented:\n- https://github.com/viatropos/tower/blob/master/packages/tower-model/shared/attribute.coffee#L158\n- https://github.com/viatropos/tower/blob/master/packages/tower-model/shared/validator.coffee#L4\nYou can use all of the keys defined in validator.coffee (though some of them haven't been tested):\nhttps://github.com/viatropos/tower/blob/master/test/example/app/models/validatable.coffee\nYou've added some other good examples to think about, this is definitely something to be fleshed out more.\n. ``` coffeescript\nconfig/routes.coffee\nTower.Route.draw ->\n  @resources 'users', ->\n    @resources 'posts'\napp/controllers/postsController.coffee\nclass App.PostsController extends App.ApplicationController\n  @belongsTo 'user'\n```\n/users/10/posts.json\n. The method is all caps: toJSON\n. Other note, the include: ['comments'] I don't think will work, that has not been setup yet.\n. We should, but there are notable exceptions. When a normally all-caps word comes first, it's all lower case, otherwise it's all uppercase:\njavascript\nfunction jsonPrettyPrinter() { }\nfunction toJSON() {}\nThis is a pretty standard convention.\n. Starting to store this in package.json: packages/tower-generator/server/generators/tower/app/templates/pack#L76.\n. Thanks for testing this out on azure!\nThat error code ENOSPC seems to mean \"No space left on device\":\nhttp://pubs.opengroup.org/onlinepubs/009695399/basedefs/errno.h.html\nIs there a limit to the number/types of files you can have on azure? Looks like it may be a problem with installing this file:\nremote: npm ERR! Error: ENOSPC, open 'C:\\DWASFiles\\Sites\\monk-luckysmack\\Temp\\npm-1346181260106\\1346181260481-0.1615335587412119\\package\\lib\\public\\icons\\page_white_compressed.png'\n. Tower now works on Windows Azure:\nhttp://tower-azure-test.azurewebsites.net/\nSome notes here:\n- https://gist.github.com/3815833\n- https://github.com/viatropos/tower/issues/316#issuecomment-9065515\n- https://github.com/viatropos/tower/wiki/Deploying-Tower-Apps#wiki-deploying-tower-apps-to-amazon-ec2 (just below)\n. I have done some testing and it has worked fine so far. Interesting...\nDoes it have anything to do with that \u20ac character? Also, maybe method is a special keyword (random things to try to debug).\nTry also running the mocha command directly:\nmocha $(find test -name \"*Test.coffee\")\n. What does your ./test/server.coffee file look like?\nAlso, if you get a timeout, maybe try increasing the duration of the --timeout option in ./test/mocha.opts, but it doesn't seem like that's the issue here.\n. Finally, try using the assert.equal method from chai, instead of should, I haven't tried should.\n. try pasting the output from npm list, maybe it's a library/version thing? also, what folder is that helper test in?\n(from irc, https://gist.github.com/3505316)\n. also, what os/node/npm versions.\n. I'm on:\n```\n$ node -v\nv0.8.2\n$ npm -v\n1.1.32\nOSX 10.6.7\n```\n. May be a coffee-script compilation thing? Try in the node cli:\n```\n\nconsole.log(require('coffee-script').compile(require('fs').readFileSync('./test/helpers/orderHelperTest.coffee', 'utf-8')))\n```\n. are you perhaps using tabs anywhere (vs. 2 spaces) for indentation?\n. Also try wrapping all the methods in parentheses:\n\ncoffeescript\ndescribe(\"App.OrderHelper\", ->\n  it(\"Should return the correct amount\", ->\n    value = App.OrderHelper.getPriceAsString(300)\n    assert.equal(value, \"3,00 \u20ac\")\n  )\n)\n- Try changing the file to JavaScript and seeing.\n- Try using no App specific code, such as just testing if 1 + 2 = 3.\n- Try returning undefined at the end of your it test function, maybe if it gets a return value something happens.\nBasically, I'm not sure, just try a bunch of stuff.\n. Also try multiple assert statements within the first it method, see if you can do that.\n. What's the state of this now?\n. Some more notes...\nI like the general structure of @krainboltgreene's comment, not necessarily the PAC (vs. MVC) subfolders however. The main issue with the integrated approach is that the top-level folders would also include folders that are really independent of either client or server:\nbin # not often, but sometimes\nlogs\npublic\ntmp\nvendor\nwiki # or docs\nSo, putting the model/view/template/controller/etc files into a top-level apps or app folder might be a good thing, in order to separate it from the other top-level folders that are independent of client/server distinctions. Because, this might be confusing:\nbin\ncontrollers\nlogs\nmodels\npublic\nstylesheets\ntemplates\ntmp\nvendor\nviews\nwiki\nInstead, this may be clearer (where models/views/etc. are in app):\napp\nbin\nlogs\npublic\ntmp\nvendor\nwiki\n. Looking into @luckysmack's comment: https://gist.github.com/1398757#gistcomment-396669\n. I am going to go try out this folder structure now:\n|-- app\n|   |-- config\n|   |   |-- client\n|   |   |   |-- bootstrap.coffee\n|   |   |   `-- routes.coffee\n|   |   |-- server\n|   |   |   |-- assets.coffee\n|   |   |   |-- bootstrap.coffee\n|   |   |   |-- credentials.coffee\n|   |   |   |-- databases.coffee\n|   |   |   |-- emails.coffee\n|   |   |   |-- jobs.coffee\n|   |   |   `-- routes.coffee\n|   |   `-- shared\n|   |-- controllers\n|   |   |-- client\n|   |   |   `-- applicationController.coffee\n|   |   |-- server\n|   |   |   `-- applicationController.coffee\n|   |   `-- shared\n|   |-- models\n|   |   |-- client\n|   |   |-- server\n|   |   |   |-- user\n|   |   |   |   `-- emailConcern.coffee\n|   |   `-- shared\n|   |   |   |-- post.coffee\n|   |   |   `-- user.coffee\n|   |-- stylesheets\n|   |   |-- client\n|   |   |   `-- application.styl\n|   |   `-- server\n|   |   |   `-- email.styl\n|   |-- templates\n|   |   |-- client\n|   |   |-- server\n|   |   |   |-- layouts\n|   |   |   `-- emails\n|   |   `-- shared\n|   |   |   |-- posts\n|   |   |   |   `-- index.coffee\n|   |   |   `-- users\n|   |-- themes\n|   |-- views\n|   |   |-- client\n|   |   |   |-- posts\n|   |   |   `-- users\n|-- data\n|-- logs\n|-- node_modules\n|-- public\n|   |-- images\n|   |-- javascripts\n|   |-- stylesheets\n|   `-- uploads\n|-- tests\n|-- vendor\n`-- wiki\nHere is the rationale behind some of the decisions (add more if you think of any that are left out).\n\nWhy so many client/server controllers?\n\nAt first we thought of top level client and server folders. But that makes it harder for the \"single dev\" to comprehend the entire app, because as a \"full stack\" developer, you're thinking of \"models\", \"templates\", \"views\", \"controllers\", etc., not of \"client\" vs. \"server\" and drilling down to \"server models\". You look for \"models\" first, then \"server\".\n\nWhy not put the files in the shared folder at the parent directory?\n\nThis makes sense to do in the models case, because you're going to be using most/all of the models on both the client and server (at least early on in your app).\nHowever, in the controllers case, the client and server controllers are very different (but they should both still be called \"controllers\"). It might seem strange if most of the controller code is found in server and client, and one or two files at the top level. This is because, in the models case, files at the top-level would be assumed most important / core to the app, whereas in the controller case they wouldn't.\nThe shared folder explicitly states \"these files are used in both places\"; it makes it clear, no ambiguation.\n\nWhy the top-level app folder, why not put models, views, etc. at the top?\n\nBecause then models, views, etc. would be mixed in with totally unrelated folders such as logs, bin, wiki, and public. Conceptually, those folders are unrelated to models/views/controllers/etc.\n\nWhy not optimize the client/server/shared folders for what's most common?\n\nThat is, since views and stylesheets are only for the client (at least as far as I can tell), templates technically are agnostic to the server and client, why not just have this?\n|   |-- views\n|   |   |-- posts\n|   |   |   `-- index.coffee\ninstead of this:\n|   |-- views\n|   |   |-- client\n|   |   |   |-- posts\n|   |   |   |   `-- index.coffee\nStill not 100% on this, but it seems that while having this \"less nested\" file structure is technically \"more optimized\", it leads to more questions that answers... Personally, my mind will look at the other folders and think, \"well, technically, most models are agnostic to client/server, so do the same for them, oh but wait in certain cases... etc.\". So, for now, all folders have this same structure.\nWas not 100% decided on this for the stylesheets, but if you think about emails, then those should technically be \"server side stylesheets\" (which will be converted to inline css, eventually).\n\nIn response to @luckysmack's comments on the gist.\n\nStill need to think about the top-level db vs. data folder. I like calling it data better personally. But the data/tmp folder shouldn't be generated, b/c having multiple tmp folders seems confusing. Instead, having somewhere in the docs/guides that using tmp folders is good practice might be good enough.\nAlso need to think more about a whole themes system. There should be a standard way of adding custom themes to your app, for these reasons:\n1. Sometimes front end coders like to mess around with multiple different themes for their app, and having a folder structure in place for this would be helpful.\n2. Maybe you want to have ipad, browser, etc. themes, for different devices.\nHowever, along those same lines, I am not a big fan of the idea of grouping models/views/controllers/etc. into \"plugins\" or reusable components (like the comments module). While this looks good and feels right conceptually, in my experience it makes it harder to code down the road. Really, the code never gets modular enough that it's a black box you can port to other projects without error. If it does get to that point, it's probably already an npm module (rubygem), and so can accomplish the same thing. Also, when I am fixing some model bug and it's relation to other models, I want all the models to be in one place; having them in a nested module adds too much overhead to that workflow.\n. #towerjs IRC?\nThere aren't any real good alternatives, and I would prefer not to use google groups. IRC and GitHub are ideal for me, what is best for you?\n. Done.\n. Yeah not sure about this one, let me know when you figure it out. Might want to check how/if rails does it. Maybe we can add some hidden file to look for, or just look up to the parent directories until the ls array lists some set of folders we are expecting, such as (pseudocode):\n``` coffeescript\n_path = require('path')\nfs    = require('fs')\ntestIfRoot = (path) ->\n  # first, the path must exist and be a directory\n  return false unless fs.existsSync(path) && fs.statSync(path).isDirectory(path)\n  # then check for package.json\n  return false unless fs.existsSync(_path.join(path, 'package.json'))\n  # then check for some key directories / files\n  return false unless fs.existsSync(_path.join(path, 'config/application.coffee'))\n  # if all pass, then we have the directory\n  path\nsetTowerRoot = ->\n  path = process.cwd()\nwhile !testIfRoot(path) && path != '/' # @todo some check to not traverse all the way to the root \"/\" path (windows and *nix)\n    path = _path.join(path, '..')\nTower.root = path unless path == '/'\n```\n. This is more robust now, you can do one of these:\n``` coffeescript\nThis can be set before any tower code is run, which is nice sometimes\nprocess.env.TOWER_ROOT = __dirname # or anything\nOr you can do it manually\nTower.setRoot(__dirname)\n```\nIt will also try to check up the parent change until it looks like a tower app.\n. Sweet.\n. Yeah that number is far too big, not sure if any computer can handle numbers that large.\n. Haha, totally kidding. No we need a more robust approach to parsing params:\nhttps://github.com/viatropos/tower/blob/master/packages/tower-net/shared/route.coffee#L80\n. can't do b/c server files are not added to the public folder for security.\n. Done, it was in the ./index.js haha.\n. The error is most likely because of the && in this postinstall script:\nnpm install git://github.com/viatropos/coffeecup.git --force && npm install git://github.com/viatropos/coffee-script.git --force\nWe had issues with that on windows before. It turns out the Mac supports && and ; as separators when running multiple commands on a single line. So you can also do this on a Mac:\nnpm install git://github.com/viatropos/coffeecup.git --force ; npm install git://github.com/viatropos/coffee-script.git --force\nI am not very familiar with Linux, if you try running either of these commands what is the output?\n. Here are some of the issues we were facing with that script on windows:\nhttps://gist.github.com/3442680#gistcomment-407106\nI may bundle this into a node script to avoid this in the future, but first let's see if we can fix it for your system. Let me know how it goes.\n. The latest version 0.4.2-1 doesn't run any postinstall scripts for the global version of tower, so you should be good. See https://github.com/viatropos/tower/issues/272#issuecomment-8522405 (and comments above) for more info, mainly about sudo since you're on linux and there's no homebrew :)\n. Going to use gaze and implement a few enhancements for 0.5.0.\n. Yeah this needs to be cleaned up and made more robust. Do you know of a better alternative to node-mime?\nI tried doing what you're suggesting a little while ago but it caused a bunch of the tests to fail (I'm pretty sure) so I switched it back.\ncoffeescript\n@headers['Content-Type'] = \"application/json; charset=UTF-8\"\nIf that works (or we can fix the tests) then that's great. Going to start making the controllers more robust in a few weeks or so, I'll get to this then unless you want to send a PR.\n. This is now fixed: https://github.com/viatropos/tower/commit/72acd23e6d3c8682bf00c54ccf269cc2a61c1b26#L1R22\n. What if you try without sudo?\nnpm install tower -g\nAlso, how did you install node? If you used a method other than HomeBrew then it could be some permissions thing I am not very familiar with. Also, what version of node/npm?\n. @edubkendo I think you're right on that, it's probably a git issue. In the short term we should make sure git is installed (note on the README), but eventually all the dependencies would ideally be installed from the npm link rather than git.\n. @rickcarlino was this because git wasn't installed?\n. @rickcarlino see https://github.com/viatropos/tower/issues/272#issuecomment-8522405\nIf you installed node.js from an installer and are installing modules globally with sudo, it's highly recommend to install node with homebrew. Homebrew will take care of any/all permissions problems you will have on the Mac.\nOther than that, 0.4.2-1 doesn't run any npm install commands when installing tower globally, so you should be good to go.\n. I think it needs to be a POST request, since req.body is only defined for POST requests I'm pretty sure:\nhttps://github.com/senchalabs/connect/tree/master/lib/middleware/methodOverride.js#L28\n. The main reason you'd need to use forms like you've outlined is to support browser environments without javascript. Tower should be able to do that eventually but that's probably a little ways down the road.\nTo do this just use Ember's patterns. So if the form example is a button from a row in a table of Order records, when you check Mark as paid it can run the client App.OrdersController#update method, which calls order.save(), which makes the PUT request. If you bind the check mark's value to the order.isPaid then calling order.save() will only send that key/value pair to the server (probably also updatedAt).\nNot sure how to do this with Ember off the top of my head, but it should be straight forward. Look at the (new) generated form in tower, to see how to bind the values if you're unfamiliar.\n. Closing this since this is part of connect.\n. It may be b/c the comma is missing:\n``` coffeescript\nchange this:\n@namespace 'api' ->\nto this:\n@namespace 'api', ->\n```\n. This is from cloning the repo right? If so, you must compile it. In the tower repo directory, run this:\nmake watch\nDoes that fix it? Maybe later we'll keep a .zip of the compiled js in lib hosted on GitHub Downloads or something, so if make watch isn't run it will still work.\n. This is fixed now, you can also install it from npm.\n. So this was just a git issue? If so I'll close it.\n. As a sidenote, I think we should get rid of the custom coffeescript. All we really need is the ability to have the instance/class methods added as ember mixins. https://gist.github.com/3709713.\n. @g-elke-wowbiz @SwarmShepherd try it now, npm now has 0.4.2-pre:\nnpm install tower -g\n. Did you install node with homebrew? It's some permissions error. Maybe it's a node 0.8.9 error, I'm on node 0.8.2. Hmm...\nMaybe the new OS doesn't allow piping commands like $(./bin/dependencies)?\n. Try it now, removed all custom --global postinstall scripts (0.4.2-1).\n. Ah that's probably it then. Not sure exactly but homebrew installs everything without root permissions I think, but the node installer may have asked to enter your password at some point, which would mean there's some protected paths. Wonder what happens if you do:\nsudo npm install tower@0.4.2-pree -g\nIf you can install node with Homebrew I would do that if I were you, it will make installing other things later much easier.\nGlad 0.4.2 is working!\n. That's why, have you been running all these commands with sudo (in the previous comments)?\n. That's useful info!\nAlthough tower should work with or without sudo, I definitely recommend homebrew, or manually setting up the global node/npm folders so they don't require sudo.\n. http://mxcl.github.com/homebrew (paste into terminal), then:\nbrew install node\nYou'll never look back.\nInstallers all have their own conventions of where to install certain files and what permissions they have, and it's up to the individual/team to manage one specific executable (like node). If you don't already, you'll start installing mongodb, redis, postgresql, mysql, cassandra, imagemagick, tesseract, git, and more from installers that were each built by different people. What ends up happening is the permissions are all different and unpredictable and you run into issues like this one which take a while to resolve.\nThe solution is to have 1 interface to installing these command-line tools, and that's what HomeBrew did. It's a huge and dedicated team that's created a library of forumla, which you just run through the command line instead of an installer (https://github.com/mxcl/homebrew/tree/master/Library/Formula). This makes installing any library very predictable.\nHomeBrew is one of the most valuable tools I use. I haven't had any problems with permissions/installations since I started using it some 2-3 years ago.\n. This is because the client routes are only wired together for @resources and @resource, we need to make it more robust / add it to the @match method. Would you mind taking a look at that? It should be fairly straightforward to implement, see this:\n- packages/tower-net/shared/route/dsl.coffee#L113\nThe state key that is passed into the @match options hash is then handled by the client router:\n- packages/tower-net/client/states.coffee#L90\nThat insertRoute method is called for each route defined in the Tower.Route.draw DSL, and is passed a Tower.Route instance.\nSend a PR if you'd like, otherwise I'll be getting back to the routes in a few weeks (though I'll try and get to this one sooner).\n. For sure, let me know where you're at and I'll help where I can.\n. Feel free to send me a PM on Twitter if you're ever digging into code, my phone goes off so I can respond faster :)\n. Here are some ideas for the API:\nLatest Ideas\n\ncommit: https://github.com/viatropos/tower/commit/8a67921f6d74d489288bec8183284ee89378c5a7\ntest code: 8a67921f6d74d489288bec8183284ee89378c5a7/test/cases/model/shared/bindableCursorCriteriaTest.coffee\n\n``` coffeescript\nnested, properties are grouped, but really that may just be a percieved but not real convenience? Not sure.\ncriteria = Ember.Object.create\n  userIdBinding:  Ember.Binding.oneWay('Tower.currentUser.id')\n  createdAt:  Ember.Object.create\n    $gteBinding:  Ember.Binding.oneWay('Tower.previousTimestamp')\n    $lteBinding:  Ember.Binding.oneWay('Tower.currentTimestamp')\n  tags:       Ember.Object.create\n    $inBinding:   Ember.Binding.oneWay('Tower.currentTags')\nflat and explicit\ncriteria = Ember.Object.create\n  userIdBinding:                        Ember.Binding.oneWay('Tower.currentUser.id')\n  createdAtGreaterThanOrEqualToBinding: Ember.Binding.oneWay('Tower.previousTimestamp')\n  createdAtLessThanOrEqualToBinding:    Ember.Binding.oneWay('Tower.currentTimestamp')\n  tagsInBinding:                        Ember.Binding.oneWay('Tower.currentTags')\n```\nEarlier Ideas\nFrom a35a5f5938b3aa2d45855351b2f0962e09c7397b/test/cases/model/shared/bindableCursorCriteriaTest.coffee#L30\n``` coffeescript\nPros: clear\nCons: this is the simple case, not many cons,\nbut it gets harder to read in more complex cases (below)\n\n...where Tower.Criteria[method] wraps Ember.Binding.oneWay\ncriteria =\n  userIdBinding:    Tower.Criteria.eq('App.currentUser.id')\n  createdAtBinding: Tower.Criteria.gte('App.currentTimestamp')\nCons: too hard to read properties\ncriteria =\n  userIdBinding:    'App.currentUser.id'\n  lteCreatedAtBinding: 'App.currentTimestamp'\n  gteCreatedAtBinding: 'App.previousTimestamp'\nPros: easy to read properties\nCons: not sure what values mean\ncriteria =\n  userIdBinding:    'App.currentUser.id'\n  createdAtBinding:\n    '>=': 'App.previousTimestamp'\n    '<=': 'App.currentTimestamp'\nPros: easy to read properties, values are clear\nCons: verbose\ncriteria =\n  userIdBinding:    Tower.Criteria.eq('App.currentUser.id')\n  createdAtBinding:\n    '>=': Tower.Criteria.gte('App.previousTimestamp')\n    '<=': Tower.Criteria.lte('App.currentTimestamp')\nPros: slightly less verbose\nCons: createdAtBinding value is too unclear\ncriteria =\n  userIdBinding:    Tower.Criteria.eq('App.currentUser.id')\n  createdAtBinding: [\n    Tower.Criteria.gte('App.previousTimestamp')\n    Tower.Criteria.lte('App.currentTimestamp')\n  ]\nPros: easy to read properties\nCons: verbose, kind of confusing\ncriteria =\n  userIdBinding:    Tower.criteria('App.currentUser.id')\n  createdAtBinding: Tower.criteria\n    Tower.Criteria.gte('App.previousTimestamp'),\n    Tower.Criteria.lte('App.currentTimestamp')\nHow the functionality might be implemented if the above...\n_.each criteria, (key, value) ->\n  #if key.match(/Binding$/)\n  #  # ...\n  # but doing this would be doing some of what ember already does,\n  # inventing a slightly different API.\n  # Maybe not a good idea...\nNotes:\n- technically only need to bind to the properties once,\nso don't need multiple App.currentTimestamp for example,\n(say if multiple date props were bound to it).\n- so, the whole cursor just needs to act like a computable property, such as:\ncursor.observes('App.previousTimestamp', 'App.currentTimestamp', 'App.currentUser.id')\n- then whenever even just 1 of those properties changes,\nit will iterate through all of the values on the criteria hash\nand will recompute all the values (most of which will be cached computed properties / bindings),\nand then it will re-filter the data matching the cursor.\n- so the end result is: recompute criteria to find all matching records\n\nWith the above in mind, you could have functions on the criteria,\nwhich will be executed whenever an observer fires:\ncriteria = Tower.criteria(\n  userId: -> App.get('currentUser.id')\n  createdAt:\n    '>=': -> App.get('previousTimestamp')\n    '<=': -> App.get('currentTimestamp')\n).observes('App.currentUser.id', 'App.currentTimestamp', 'App.previousTimestamp')\nBut... that's probably only slightly more optimized than just having bindings on the properties.\n\nYou could just make it work without the Binding suffix,\nbut that may be confusing since you probably don't do that in Ember.\nSo this might be the clearest:\n(it would also probably be the least amount of work)\ncriteria =\n  userIdBinding: Ember.Binding.oneWay('App.currentUser.id')\n  createdAt:\n    $gteBinding: Ember.Binding.oneWay('App.previousTimestamp')\n    $lteBinding: Ember.Binding.oneWay('App.currentTimestamp')\nSo, the rules could be (for each key/value):\n1. If value is a Tower.Criteria one-way binding, then use that,\n2. Otherwise, it's a simple/static value\n```\nThe goal is to be able to handle this use case on the client:\n- You want to filter a list of Post models by currentUser, but currentUser may be undefined when the app first loads, so doing App.Post.where(userId: App.currentUser.id) would be {userId: null} (or throw an error).\nImplementing \"bindable cursor criteria\" will also make things like refreshing the cursor when a timer changes, or you filter some tags, very easy.\nFrom what I can see so far, it looks like it must use Ember Bindings to map properties like App.currentUser.id to the cursor criteria (as opposed to ComputedProperty). So that's what I implemented above.\nThen the issue becomes, how to aggregate all of those changes into one cursor \"refresh\"? So say, in one synchronous block of code, App.currentUser.id and App.previousTimestamp both change. If you add an observer to both of those properties, such as this:\ncoffeescript\ncriteria =\n  userIdBinding: Ember.Binding.oneWay('App.currentUser.id')\n  createdAt:\n    $gteBinding: Ember.Binding.oneWay('App.previousTimestamp')\n    $lteBinding: Ember.Binding.oneWay('App.currentTimestamp')\n  somethingDidChange: Ember.observer(((criteria, key) -> console.log(key, 'changed!')), 'createdAt.$gte', 'userId')\n...then that somethingDidChange function will run twice, which is not desirable (wouldn't want to refresh the cursor ever time the observer ran.\nSo instead, that observer function will just set a boolean such as Ember.set(criteria, 'isDirty', true); even if it sets it multiple times it's a simple operation (I don't know how to prevent setting it multiple times, don't think that's possible).\nThen the cursor (which gets passed the criteria), will get notified that cursor.isDirty changed (haven't got that far yet, but it seems you could do cursor.propertyWillChange('criteria'), then Ember will run cursor.criteriaDidChange() the next frame I'm pretty sure (which is ideal, since now the criteria is fully updated and all changes have been made, so the cursor can refresh just once).\nThe difficult part is in the API. What do you guys like better, the nested or flat version?\nFor the flat version, we will have to iterate through all of the properties passed to methods like cursor.where(criteria), and rip out the attribute/operator/binding from a string like tagsInBinding:\n``` coffeescript\n$1 == \"tags\", $2 == \"In\"\n[key, $1, $2] = \"tagsInBinding\".match(/(\\w+)(In|GreaterThanOrEqualTo|etc)Binding/)\n```\nBut if the \"flatness\" of a cursors criteria is enforced, that is the only semi-expensive operation we will have to do.\nFor the nested version, we have to iterate through the first two levels of the criteria and get the Ember.Binding definitions, since simple \"equals\" operations are 1 level (e.g. userIdBinding), while complex are just 2 (e.g. createdAt: $gteBinding). It won't go any deeper than that other than for $or queries, but that's always complex :).\nWith the binding definitions, we can get the same information from tags: $in: <binding> as we did from tagsInBinding: <binding>:\n``` coffeescript\n$2 = binding._to # \"$in\", same (functionally) as flat's $2 above\nin the flat version, we're using $1 (\"tags\"),\nbut here we're using the other side of the binding: Ember.Binding.oneWay('App.currentTags')\nso: $3 == \"App.currentTags\", while the flat's $1 == \"tags\"\n$3 = binding._from \n```\nBoth flat and nested versions have tradeoffs, so I wanted to get your take.\nIf we enforce the flat version, that seems to be more along the lines of how Ember is doing things, and it is slightly more optimized (you end up creating slightly fewer Ember.Object instances it seems like). But it is more verbose and you lose the DSL, which means we'd have to potentially rethink a lot of the server-side query API:\ncoffeescript\nApp.Post.where(createdAt: '>=': _(2).days().ago())\nWe can allow both as well.\nAlso, random note, I saw that the Freebase MQL uses a syntax like createdAt>=: x, so it puts the operator at the end, which allows you to get rid of the extra JSON object nesting. Something to think about. Having to test every key against a RegExp such as \"createdAt\".match /(\\w+)(>=|<=|etc)/ is probably just as much work as iterating through and testing nested objects from createdAt: '>=': x, so it's something we should consider (pros/cons).\nWould love to know what your guys' thoughts are about this, what you would like to see possible, etc.\nCheers!\n. Perhaps even you could do it like this, which is just a wrapper around either flat or nested:\ncoffeescript\nApp.Post\n  .gte('createdAt', 'App.previousTimestamp', true)\n  .lte('createdAt', 'App.currentTimestamp', true)\n  .in('tags', 'App.currentTags', true)\n...where that last true argument could mean isBinding, or it could be inferred from matching /#{Tower.namespace()}\\./ (\"App\").\nNo not a fan of that...\n. I don't think there's going to be a noticeable difference either way. Yeah I like the nested too, I think it will be easy to get both versions working though.\n. Considering this again from a JS perspective (thinking out loud)...\n``` javascript\n// iterating through ideas...\nApp.PostsController = Tower.ResourcesController.extend({\n  // this one is equivalent to the one right below\n  criteria: Ember.computed(function() {\n    return Tower.Criteria.create().gte('createdAtBinding', 'App.startDate')\n  }),\ncriteria: Ember.computed(function() {\n    return Tower.Criteria.create({\n      createdAtGreaterThanOrEqualToBinding: 'App.startDate'\n    })\n  }),\n// you can accomplish the same thing using extend with no computed property\n  criteria: Tower.Criteria.extend({\n    createdAtGreaterThanOrEqualToBinding: 'App.startDate'\n  }),\n// perhaps you should be able to do it nested too...\n  criteria: Tower.Criteria.extend({\n    createdAt: {\n      gteBinding: 'App.startDate'\n    },\n    // or maybe the reverse\n    gte: {\n      createdAtBinding: 'App.startDate'\n    }\n  }),\n// and Tower.Criteria will be a little smarter, converting\n  // values on gte to Ember.Object.extend:\n  criteria: Tower.Criteria.extend({\n    createdAt: Ember.Object.extend({\n      gteBinding: 'App.startDate'\n    }),\n    // you wouldn't want this b/c you'd then have \"reserved keywords\"\n    // that you could't use as field names on your model, which isn't good\n    gte: Ember.Object.extend({\n      createdAtBinding: 'App.startDate'\n    })\n  }),\n// so that leaves us with this:\n  criteria: Tower.Criteria.extend({\n    createdAt: Ember.Object.extend({\n      gteBinding: 'App.startDate'\n    })\n  }),\n// but you really might want to optimize the queries, and\n  // so keep the query conditions ORDERED (in an Array).\n  // This would be automatically done using the first approach (with computed prop).\n  // But it would be expanded into something like this:\n  criteria: Tower.Criteria.extend({\n    conditions: [\n      Tower.Criterion.extend({\n        attribute: 'createdAt',\n        operator: 'gte'\n        valueBinding: 'App.startDate'\n      }),\n      // but this one doesn't feel right:\n      Tower.Criterion.extend({\n        createdAtBinding: 'App.startDate'\n        operator: 'gte'\n      })\n    ]\n  }),\n// so this is the equivalent of the first computed prop one\n  criteria: Tower.Criteria.extend({\n    conditions: [\n      Ember.Object.extend({attribute: 'createdAt', operator: 'gte' valueBinding: 'App.startDate'}),\n      Ember.Object.extend({attribute: 'createdAt', operator: 'lte' valueBinding: 'App.endDate'})\n    ]\n  }),\n// with the \"conditions\" array, you could make Tower.Criteria an Ember.ArrayProxy\n  // and call \"conditions\" \"content\".\n  criteria: Tower.Criteria.extend({\n    content: [\n      Ember.Object.extend({attribute: 'createdAt', operator: 'gte' valueBinding: 'App.startDate'}),\n      Ember.Object.extend({attribute: 'createdAt', operator: 'gte' valueBinding: 'App.startDate'})\n    ]\n  }),\n// and you could just use plain objects which we'd wrap into Ember.Object on the client:\n  criteria: Tower.Criteria.extend({\n    conditions: [\n      {attribute: 'createdAt', operator: 'gte' valueBinding: 'App.startDate'},\n      {attribute: 'createdAt', operator: 'lte' valueBinding: 'App.endDate'}\n    ]\n  }),\n});\n// It should work with createdAtGteBinding or createdAtGreaterThanOrEqualToBinding\n/*\nIf Tower.Criteria did everything above, the algorithm would work something like this:\n\nfor each key, check if it ends in \"Binding$\"\nif true, try to rip out the attribute like: /(\\w+)(Gte|GreaterThanOrEqualTo)/...\nwith attribute and operator, perform the actual query on the collection\n\n\nelse if _.isHash(value), then convert the value to an ember object\n\n... didn't finish this thought.\n*/\n// based on the controller just above, here's the final proposed approach:\nApp.PostsController = Tower.ResourcesController.extend({\n  // you can build the array manually\n  criteria: Tower.Criteria.extend({\n    conditions: [\n      Ember.Object.extend({attribute: 'createdAt', operator: 'gte' valueBinding: 'App.startDate'}),\n      Ember.Object.extend({attribute: 'createdAt', operator: 'lte' valueBinding: 'App.endDate'})\n    ]\n  }),\n// Or you can use a computed property and it will build the array.\n  // (This is equivalent to the above one).\n  criteria: Ember.computed(function() {\n    return Tower.Criteria.create()\n      .gte('createdAtBinding', 'App.startDate')\n      .lte('createdAtBinding', 'App.endDate')\n  }),\n// or you could not use an array:\n  criteria: Tower.Criteria.extend({\n    createdAt: Ember.Object.extend({\n      gteBinding: 'App.startDate',\n      lteBinding: 'App.endDate'\n    });\n  });\n});\n// this would mean you can do this with a criteria:\ncriteria.get('conditions') // [{attribute: 'createdAt', operator: 'gte' valueBinding: 'App.startDate'}, ...]\ncriteria.toJSON() // {createdAt: {gte: Date, lte: Date}}\n// I think we shouldn't worry about the \"conditions as array vs. object\" optimization for now.\n// Let's just keep it an object, it makes the JSON HTTP much easier.\n// I would like to make it so you could serialize the cursor without \n// having to rebuild the JSON object every time (if that's possible).\n// But... that would probably take manually setting up Ember bindings\n// which is involved.\n// The goal is to be able to just change some criteria.\n// so if you want to show active/inactive users, you would do:\n// App.usersController.set('criteria.active', true) or something,\n// and that would cause the criteria to get reevaluated\nApp.UsersController = Tower.ResourcesController.extend({\n  criteria: Tower.Criteria.extend({\n    active: true\n  })\n});\n```\n. http://stackoverflow.com/questions/9909803/what-is-the-right-emberjs-way-to-switch-between-various-filtering-options\nI think I'm approaching this wrong...\n. ``` javascript\n// after taking a look at Ember.SortableMixin, another idea...\nApp.UsersController = Tower.ResourcesController.extend({\n  sortProperties: ['createdAt'],\nfilterConditions: Ember.Object.extend({\n    active: true,\n    activatedAtGte: _(2).days().ago()\n  })\n});\nApp.UsersView = Ember.View.extend({\n  controllerBinding: 'App.usersController',\nclick: function() {\n    Ember.set(this, 'controller.filterProperties.active', true);\n  }\n});\n```\n. I feel like I'm wasting my time on this, there's too many ways to do it. I just really want to finish this so the server model queries and the client model queries work!!!\nOn the server the chainable api works fine:\njavascript\nApp.Post.where('createdAt').gte(_(2).days().ago()) // etc.\nBut on the client if it should somehow work with the Ember stuff, it's hard to merge both ideas... Really want to finish this but the direction in the above posts doesn't seem to be right. Might just have to tinker more later.\n. Not going to do it this way I don't think, going to be much different with the new router api.\n. This is going to be much simpler in 0.5.0 with the criteria pipeline.\n. You can try something like this:\n``` coffeescript\npaths = _.select require('wrench').readdirSyncRecursive('app/helpers'), (i) ->\n  i.match(/.coffee$/) # only coffee-script files\nfor path in paths\n  Tower.View.helper(require(path))\n```\n- https://github.com/ryanmcgrath/wrench-js\nThere needs to be a cleaner way to do this but I'm not sure it's there. You can add helpers to the controllers like this but I'm not sure they get added to the view as well:\ncoffeescript\nclass App.PostsController extends App.ApplicationController\n  @helper App.TagsHelper\nThere is a lot of room for improvement here, let me know if you see a better way.\n. Note, the Tower.View.helpers object, which Tower.View.helper extends with it's arguments, is only added to the coffeecup engine right now, later it should be added to any engine.\n. Sorry about that, the socket api has changed a lot since the documentation was made, definitely need to update the docs.\nCurrently, that method of manually sending data through sockets has been temporarily disabled so we could focus on automatically syncing Model data, which does work and is using sockets.\nThere's a lot to document so I'll point you to the relevant places in the code. First, the data-syncing is managed via Tower.NetConnection instances, which are stored in a Tower.connections hash by socket.id. On the client there is only 1 id, but the server has many. If you have called App.listen() on the client, this should connect the sockets and store the id in Tower.connections.\nOnce that's setup, the Tower.NetConnection instance has handlers for when both the client and server create/update/destroy records:\n- https://github.com/viatropos/tower/blob/master/packages/tower-net/client/connection.coffee\n- https://github.com/viatropos/tower/blob/master/packages/tower-net/server/connection.coffee\n- https://github.com/viatropos/tower/blob/master/packages/tower-net/shared/connection.coffee\nOn the client, if you call someRecord.save() on a new record, it will POST it to the server. Then on the server, it will call someRecord.save(), which will save it to MongoDB. After save on the server the record gets passed through every connection and is sent to the clients that can (or are authorized to) accept it. That occurs here on Tower.NetConnection#notify:\n- https://github.com/viatropos/tower/blob/master/packages/tower-support/shared/shared.coffee#L41\nThe other connected clients will then receive the message that a record was created:\n- https://github.com/viatropos/tower/blob/master/packages/tower-net/client/connection.coffee#L67\nThat just loads the JSON for that record into the client-side memory store. This triggers any registered Tower.ModelCursors (Ember.ArrayProxy subclass) to add the record to its collection, which triggers templates to auto-update (such as a list of records, etc.).\nThe only thing you need to make this auto-updating work is define cursors with @scope on the client and server controllers, such as:\n``` coffeescript\nserver\nclass App.PostsController extends App.ApplicationController\n  @scope 'all'\nclient\nclass App.PostsController extends Tower.Controller\n  @scope App.Post.where(createdAt: '>=': _(2).days().ago())\n```\nThe controller scopes/cursors are very primitive at this point but this is the general approach to syncing data via web sockets.\nThe ability to add @on 'someMessage' like you're asking was temporarily disabled so we could flesh out this data-syncing thing. We need to go back and fix that but it may be a few weeks until I can get to that. If you'd like to help get it working I can point you further in that direction, it should be straight forward.\nHope that helps.\n. Awesome! To modify the tower code, clone the repo, and compile the coffee-script. You can then link it globally and then locally into an app (that's what the contributors are mainly doing):\n```\ngit clone https://github.com/viatropos/tower\ncd tower\nnpm install\nin another terminal window\nmake watch # compiles everything\nback in the first window\nmake test # runs all tests, can just do make test-memory to only run tests against one store to speed it up.\n```\nWith the watcher running you can change the coffee-script files (everything in packages) and it will recompile.\nIf you want to link it to an app, then:\n```\nin the tower repo directory\nnpm link # links to global npm registry on your computer\nin your app\nnpm link tower\n```\nThen whenever you change the tower source, it will be reflected in your app as well (since it's just a symlink).\nThere are a bunch of tests in ./test/cases, feel free to modify and send pull requests.\n. Good stuff! I like where you're headed with it. Some thoughts that come to mind.\nFirst, about applying \"constraints\" on who can receive what message. @kristianmandrup implemented something very similar to cancan in Tower, for authorization, https://github.com/kristianmandrup/beer_can, and I merged some of that stuff in as well. Tower has an alpha-level Tower.Ability class that wraps currentUser and can be used to test if the user can create/read/update/delete certain data:\n- https://github.com/viatropos/tower/blob/master/packages/tower-model/shared/ability.coffee\n``` coffeescript\nclass App.Ability extends Tower.Ability\n  assign: ->\n    user = @get('user')\n@can 'read', App.Post\n@can 'update', user.get('groups').all()\n@can 'manage', user.get('memberships')\n@can 'read', 'create', App.Membership\n@\n\n```\nTechnically it works (using it now), but it's not documented. Along the same lines as what you're suggesting, the ideal situation would be something like the following for managing data pub/sub...\nThere is a global server-side map of socket ids to a Tower.NetConnection object. That connection object then has a reference to the user and ability, which in the controller were currentUser and currentAbility. Then every request - no matter if it's through AJAX,  plain HTTP, Web Sockets, etc. - somehow has an id that we can use on the server to find the socket/connection. This would mean we can store all the connected users in memory on the server, which is nice as it would prevent those database calls on every request (which you could cache, but still).\nThen, when any data is modified on the server, no matter if it's sent through web sockets or HTTP (or even if it's created through the tower console), it iterates through the Tower.connections hash, and for each connection it tests if the data can be sent to the client - using the Tower.Ability exactly like how you're describing the constraints.\nSo the main thing that's still missing is how you define the plain socket handlers (i.e. your @publish line). I was just thinking of having an @on handler on both the client and server, and on the server you just have a beforeAction filter that tests it against the currentAbility, and if it's unauthorized then return some error response. Not sure though, since you're digging into this you probably have a better idea, what do you think?\n. Ha, that's way too much to type on a phone :)\nYeah man this looks great, I'm on board with the stuff you're describing.\nThe only thing that's unclear to me in looking at it is the type: \"/notification\". [Remembering now] In the initial implementation, what you're calling type we just had be the controller name pluralized, and then your name: \n\"message\" was just the method called on the controller. So this:\ncoffeescript\n@subscribe type: \"/notification\", name: \"message\"\nwas this:\ncoffeescript\n@subscribe 'message'\nwhere the type would be /posts for example, if it was in the App.PostsController.\nLet's aim to use the controller/routing conventions for the sockets unless there are common cases where you'd need more robust functionality.\nFeel free to send a PR once you get something started, I'd love to take a look.\n. Sweet\n. Yeah integrating that would be a great start!\nhttp://rails-admin-tb.herokuapp.com/admin/field_test/158/edit\nWhat are your thoughts?\n. Tower is using something like Formtastic, haven't used nested_form though. If you'd like to take a stab at something like this definitely let me know.\nCheers!\n. Hey!\nThanks for posting. You're totally right with the docs, they are way out of date. Knowing that it's a big barrier to new guys coming to the project is very useful info, I'll make it a higher priority to update them soon. For now though the best documentation is just in reading the code since things are changing so fast, but we will have docs at some point (which the website will reflect).\nThe official \"docs\" are stored here: https://github.com/viatropos/tower-docs. They also haven't been updated in a while but they are more up-to-date than the website. Feel free to send pull requests to the tower-docs repo as you learn things, that would really help for the newcomers.\nRight now assets are auto-loaded on the server, but require manually specifying them for the client. Here are the folders currently auto-loaded on the server:\n- packages/tower-application/server/application.coffee#L12\nFor the client though, you have to add them to app/config/server/assets.coffee:\n- packages/tower-generator/server/generators/tower/app/templates/app/config/server/assets.coffee\nWhen you generate a model for example, such as tower generate scaffold post, it will inject /app/models/shared/post.coffee (and others) into app/config/server/assets.coffee automatically. I may add to the grunt/watch task a feature where when you create a file in app/models, for example, it will inject it into the assets.coffee file, but this may be more complicated than it's worth.\nThe reason for having to manually specify the client assets is that Tower currently doesn't have any sort of browser package manager integrated (such as bower or require.js). Eventually we should do this but when I have tried in the past it ended up being too complicated and time consuming; things have changed since then though so it may be good to take another look at it.\nFinally, the contents of app/config/server/assets.coffee is stored in Tower.config.assets:\n- packages/tower-application/server/application.coffee#L238\nCheers!\n. https://github.com/viatropos/tower/commit/f817609c6581c8fd6f9b5553a837c22507186011\n. What is your version of OSX, node, and npm? Also, see if you have hook.io installed locally and globally.\n. If you git clone the repo and link it to your app and try to install everything, do you get the same issue? Also, it may be because of the hard-coding to that specific version of hook.io, which may not work on OSX 10.8. Try doing >= x for the version of hook.io.\n. Thanks @j-mcnally for that workaround! Seems like the hook.io and node-weak authors should merge in your changes\n- https://github.com/j-mcnally/node-weak/commit/274e3f1b288e2421ff93244a4b650d1b9219bf5a\n- https://github.com/j-mcnally/hook.io/commit/8160fe5e5c5c8a3c6366feaea8ed0cb2b9fc2720\nI will look into removing hook.io temporarily as well, since it's only being used to send data to the browser from records you modify from within tower console:\n- packages/tower-application/server/application.coffee#L187\nThat's just a nice to have, shouldn't require this workaround. Thanks for figuring it out though, helps a lot.\n. Sweet! I'll take a look at this and get to your other posts about it in the morning.\n. Haha, this code in tower is a mess, thanks for digging in anyway!\n. Not quite sure what you're trying to accomplish here. Is this basically a layer between the model and the view?\n. Sweet! We did a little on this too, here's what we have so far:\n- https://github.com/viatropos/tower-authentication-example\n- https://github.com/viatropos/tower-authentication-example/tree/master/app/models\n- server controller: https://github.com/viatropos/tower-authentication-example/blob/master/app/controllers/sessionsController.coffee\n- client controller: https://github.com/viatropos/tower-authentication-example/blob/master/app/client/controllers/usersController.coffee\n- https://github.com/viatropos/tower/blob/master/packages/tower-authentication/server/passport.coffee\nThe passport.coffee is used in the example app in bootstrap.coffee like this: \n``` coffeescript\nMongoStore = require('connect-mongodb')\nApp.configure ->\n  @use 'favicon', Tower.publicPath + '/favicon.png'\n  @use 'static',  Tower.publicPath, maxAge: Tower.publicCacheDuration\n  @use 'profiler' if Tower.env != 'production'\n  @use 'logger'\n  @use 'query'\n  @use 'cookieParser', Tower.config.session.key\n  @use 'session', secret: Tower.config.session.secret, store: new MongoStore(db: Tower.Store.Mongodb.database)#, cookie: {domain: \".\" + Tower.config.session.cookie.domain\n  @use 'bodyParser', uploadDir: './public/uploads'\nTower.Auth.initialize ->\n    @provider 'twitter'\n    @provider 'facebook'\n    @provider 'github'\n    @provider 'google'\n    @provider 'linkedin'\n#@use 'csrf'\n  @use 'methodOverride', '_method'\n  @use Tower.Middleware.Agent\n  @use Tower.Middleware.Location\n  @use Tower.Middleware.Router\n```\n``` coffeescript\nTower.Route.draw ->\n  @match '/auth/:provider/callback', to: 'sessions#create'\n@match '/', to: 'application#welcome'\n```\n``` coffeescript\nsome link in the view which makes a popup:\nscript type: 'text/x-handlebars', 'data-template-name': 'application', ->\n  a '{{action facebookAuth target=\"App.usersController\"}}', 'Login with Facebook'\n  div id: 'facebook-count', '{{App.usersController.facebookCount}} (open up multiple browsers and see)'\n```\nI'll take a deeper look at your post in a bit, looks like you have gone a lot deeper. Cheers!\n. This grunt.coffee file looks out of date, are you using the latest tower (0.4.2-2)?\nThe development server should be reloading the specific files when changed without even having grunt running, since it's using chokidar internally:\nhttps://github.com/viatropos/tower/blob/master/packages/tower-application/server/watcher.coffee#L40\nWhich files specifically are not reloading?\nIf you look here (super messy code to-be-refactored), this is what we're doing when certain files are being changed:\nhttps://github.com/viatropos/tower/blob/master/packages/tower-application/server/watcher.coffee#L107\nAlso, you're on a Mac? Test and see if chokidar is running the watcher.on 'change' callback in that link above and let me know.\n. Ok, yeah with tower 0.4.2 a lot of this installation stuff is much better. When you get a chance try updating (or just use the repo and link it to all your projects if you'd like to stay on edge) and let me know.\n. When developing tower, are you developing against the repo, or the version that gets installed via npm?\nWe should create a grunt task that copies the dist/tower.js to vendor/javascripts/tower.js if the tower repo is linked to an app, that would be cool. Otherwise you'd just have to create a custom grunt task I'd think.\n. Ah yeah, this is because there is a default maximum number of files you can watch (or have open?) at once on the mac. We're working on a fix to this in grunt's watch task itself, but for now you can increase the default max like this:\nulimit -n 65536\nYou have to type that into the current terminal window you're using, I'm not sure how to make this the global default. But that's what I'm using and it works fine.\nhttps://github.com/joyent/node/issues/2479\n. [10:57am] justin_: I'm on osx\n[10:57am] justin_: ulimit returns unlimited\n[10:57am] justin_: justin-dev:tower justin$ ulimit -n 65536\n[10:57am] justin_: -bash: ulimit: open files: cannot modify limit: Invalid argument\n[10:58am] viatropos: this is osx 10.8?\n[10:58am] justin_: yes\n[10:58am] justin_: 10.8.1\n[10:59am] viatropos: maybe it's different on that? I'm still on 10.6.8 :0\n[11:00am] viatropos: not sure, maybe `ulimit -m`? https://discussions.apple.com/thread/4267111?start=0&tstart=0\n[11:02am] justin_: u are correct\n[11:02am] justin_: ulimit -n is 256\n[11:02am] justin_: but how to change it\n[11:03am] viatropos: can you just enter it in the terminal window?\n[11:03am] viatropos: maybe with sudo?\n[11:03am] justin_: o ok\n[11:03am] justin_: no its fine\n[11:03am] justin_: ur number was too big\n[11:03am] viatropos: oh ok\n[11:03am] justin_: from what i know of binary\n[11:03am] justin_: 65535\n[11:03am] justin_: is probably the largest value\n[11:03am] viatropos: oh ok\n[11:03am] justin_: o maybe not\n[11:03am] justin_: still too big\n[11:04am] viatropos: what if you did 16384\n[11:04am] justin_: 1000 seems to be max\n[11:04am] viatropos: hmm\n[11:04am] viatropos: maybe it's the new OS treating it differently? I used 65535\n[11:06am] justin_: hmm\n[11:06am] justin_: ok ill dig around\n[11:06am] viatropos: k\n[11:06am] justin_: 1000 is plenty so far\n[11:07am] justin_: that did fix it\n[11:07am] viatropos: k cool\n. No this is an issue, thanks for pointing it out. Right now the client ./dist/tower.js isn't rebuilt for every change, for the same reason that it adds a lag to development.\nWhat we should do is compile each package into a dist/ file (dist/tower-support.js, etc.). This would be an initial way to speed things up.\nIn the long term we should integrate something like requirejs or some other more formal system. It seems that those approaches would take a while to implement though, so I haven't even really considered them yet.\nFor now we need a grunt task to compile the top-level packages. I think I started that but it's not finished. Do you want to tackle this @TheHydroImpulse? Sounds like you're already almost there. This is definitely a useful thing to have!\n. \\m/ looking forward to it\n. Yeah it would be really great if, when building an app and you ran into some unimplemented feature or bug on the tower client, you could just modify the tower source and refresh the browser and it would load the new tower client code just as if you changed some file in your app. That would be awesome.\nI'm going to try to set this up so it will load each file individually on the client if you're linked to the tower repo.\n. @TheHydroImpulse Have you started doing anything with require.js?\nIf you add the tower module to the static paths in app/config/server/bootstrap.coffee, you can load it easily in the browser:\ncoffeescript\nApp.configure ->\n  @use 'favicon', Tower.publicPath + '/favicon.png'\n  @use 'static',  Tower.publicPath, maxAge: Tower.publicCacheDuration\n  @use 'static',  Tower.joinPath(Tower.root, 'node_modules/tower/lib'), maxAge: 0\n``` coffeescript\nin some app/templates\nscript src: '/tower/client.js'\n``\n. Yeah I want to test the integration of it (it's actually just with chokidar intower-application/server/watch.coffee`, not grunt).\nThere's a lot of these integration-level things that we need to test and I don't yet see a solid pattern for how/when to test them. The insights help. This stuff unexpectedly breaks every now and then and we need a way to prevent that.\n. I'm liking the look of brunch.io. Sidenote: we should allow people to pick between grunt and brunch if they really want (eventually).\n- https://github.com/asciidisco/grunt-requirejs\n- https://github.com/jrburke/almond\n- https://github.com/jrburke/requirejs/blob/master/require.js#L17\n- https://github.com/jrburke/requirejs/blob/955e93f922be7bf31d9f43ec2cbdcaf1655d42af/require.js#L1979-2000\n. Yeah this is because the initializers are loaded before the ./app folder:\n- packages/tower-application/server/application.coffee#L83\nTwo things... The initialization process needs to be more thoroughly thought through (and we should look into the Rails implementation again too), and if you wanted to use some code from a set of code that hasn't been loaded yet (models, controllers, etc., from inside app/config/server/environment or something), there should be a standard way of force-requiring the other code.\nSomething like that. Let me know what you think. I'll take a deeper look tomorrow.\n. I think having the requirejs stuff @TheHydroImpulse is talking about would be the ideal solution. For a temporary workaround, you can just require the files you need at the top of the script.\n. @TheHydroImpulse I really like the api you suggested, that looks clean and clear.\n@j-mcnally Nice little module, uses some things I haven't even seen in node. The one thing is the initializer should work on both client and server.\n. It is only used by the generator: https://github.com/viatropos/tower/blob/master/packages/tower-generator/server/generators/tower/model/templates/model.coffee\nWhat is the issue people are having? I'll be on IRC early tomorrow.\n. It seems the reason it wouldn't install is because they have NODE_ENV set to production, or something like that, which makes it so devDependencies aren't installed. You can change that with:\nnpm config delete NODE_ENV --global\nhttps://npmjs.org/doc/config.html\n. http://stackoverflow.com/questions/5999379/how-to-find-out-the-remote-address-in-node-js-if-it-is-https-request\n. Now you can do @get('ip') in the controller instance: https://github.com/viatropos/tower/commit/beaefe63ed16c321fc2752d8dfefc9dce6043a58\n. Hey, haven't been able to switch gears fully yet. I did pull the changes into a local branch but the client threw this error:\nUncaught Error: assertion failed: You must specify a target state for event 'indexPost' in order to link to it in the current state 'root.index'.\nI just generated a new app with the latest changes and a post model:\n```\ntower new app\ncd app\nnpm link tower\nnpm install\ncopy/paste the latest client dev into vendor/javascripts/tower.js\ntower generate scaffold post title:string body:text\ncake watch\nnode server\n```\nWill dig in further soon. Thanks for the PR!\n. ``` coffeescript\napp/config/shared/routes.coffee\nTower.Route.draw ->\n  @resources 'posts'\n  # @match '(/*path)', to: 'application#index'\n  @match '/', to: 'application#welcome'\n```\n. Haven't forgotten about this :) been finishing up some installation bugs and getting some lower-level things working for demoing, then I'll be digging into the routing stuff. Hope all is well.\n. @edubkendo Ive been thinking a lot about this as well, haven't quite come to a good solution yet. We may want to think about making the routes.coffee more robust (so you can give them ember route/state objects for example) or have hooks in the controller. Still thinking... ideas welcome.\n. Messing with the routes now (https://github.com/viatropos/tower/commit/1ca4eaa321e5bb310d3472dc0fef196284d189c6).\nWhat if the routes worked like this for the client @resources and @resource:\n/posts            # postsController\n  /               # postsController#index\n  /:id            # postsController#find\n    /             # postsController#find -> postsController#show\n    /edit         # postsController#find -> postsController#edit\n    /comments       # postsController#find -> commentsController\n      /             # postsController#find -> commentsController#index\n      /:id          # postsController#find -> commentsController#find\n        /           # postsController#find -> commentsController#show\n        /edit       # postsController#find -> commentsController#edit\nThe only thing that's been enhanced (from the server side routes) is that show is split into find and show. This would make it so if you went to /posts/10/comments, it would set App.postsController.post, but wouldn't render the post. Then it would render the comments index. Otherwise, if it passed through posts#show, it would pass the App.PostShowView to the connectOutlet, then remove it, then add the comments#index.\nAnother way around that is having some config variable in the controllers so you could say \"render both posts#show and authors#index on /posts/10/authors, but only render comments#index on /posts/10/comments\".\nYet another way to do it would be, skip adding that intermediate find action and create a helper method such as @isLeaf() in the controller and have the show action only call @render if the current route is the show route (rather than part of a nested route).\ncoffeescript\nclass App.PostsController extends App.ApplicationController\n  show: ->\n    @findResource (error, resource) =>\n      @render 'show' if @isLeaf()\nBasically this comes down to how the default implementation of nested resourceful routes should work: should it call connectOutlet (and try rendering the show view) for the parent resource, or no? I don't think it should. The reason is, it seems the default app, where there are tables of items and a full page view (like on an admin panel), only shows one resource at a time. You might show the post.title on the comments#index page, but you're not going to show the individual post view. At least for the default. You may want this functionality for your custom app, in which case you would just forward the find action to show on the parent like this:\ncoffeescript\nclass App.PostsController extends App.ApplicationController\n  find: ->\n    @show(arguments...)\n(The potential implementation of client-side show and find here: packages/tower-controller/client/actions.coffee\nOther than that, I've started making the Tower.Route object more robust so we can clean up and better test the way the Ember routes are generated.\n. I think having it like the following, with the @isLeaf() method (or some better name), would be simplest:\n/posts            # postsController\n  /               # postsController#index\n  /:id            # postsController#show\n    /comments       # postsController#show isLeaf == false -> commentsController\n      /             # postsController#show isLeaf == false -> commentsController#index\n      /:id          # postsController#show isLeaf == false -> commentsController#show\n      /:id/edit     # postsController#show isLeaf == false -> commentsController#edit\n  /:id/edit       # postsController#edit\n. Or even, we could just leave it so it would render the parent and the child, and if you want to only render the child, you can define the nested routes differently. So instead of this:\ncoffeescript\nTower.Route.draw ->\n  @resources 'posts', ->\n    @resources 'comments'\nyou'd want to do this:\ncoffeescript\nTower.Route.draw ->\n  @resources 'posts'\n  @resources 'comments', pathPrefix: '/posts/:postId'\nMaybe that's clearer.\nBut... doing it this way would mean the postsController wouldn't set the \"current post\" if you entered the app directly at /posts/10/comments, so you'd have to set up bindings from commentsController#post to postsController#post or whatever. But maybe we should do that anyways.\n. Wanted to get your take on how to create a single DSL/API for defining client and server routes. Here is a rails example:\nhttps://github.com/rails/rails/blob/master/actionpack/test/dispatch/routing_test.rb#L25-530\n``` coffeescript\nTower.Route.draw ->\n  @resources 'projects', controller: 'project', ->\n    @resources 'involvements', 'attachments'\n    @get 'correlationIndexes', on: 'collection'\n@resources 'participants', ->\n  @put 'updateAll', on: 'collection'\n\n@resources 'people', ->\n  member ->\n    @get  'somePathWithName'\n    @put  'accessibleProjects'\n    @post 'resend', 'generateNewPassword'\n\n@namespace 'api', ->\n    @resources 'customers', ->\n      @get recent: \"customers#recent\", as: 'recent', on: 'collection'\n      @get profile: \"customers#profile\", as: 'profile', on: 'member'\n      @post preview: \"customers#preview\", as: 'preview', on: 'new'\nscope ':version', version: /.+/, ->\n  @resources 'users', id: /.+?/, format: /json|xml/\n\n```\nThis would generate the following routes (eyeballing this so it may be slightly off, and only showing a few of them):\n/projects\n/projects/:id\n/projects/:projectId/involvements/:id\n/projects/:projectId/attachments/:id\n/projects/correlationIndexes\n/projects/:projectId/participants/updateAll\n...\n/projects/:projectId/people/:personId/accessibleProjects\n/projects/:projectId/people/:personId/resend\n...\n/api/customers\n/api/customers/:id\n/api/customers/:customerId/edit\n/api/customers/recent\n/api/customers/:customerId/profile\n/api/customers/new/preview\n/api/:version/users\nThe issue is, if you were to do this in Ember I think you'd expect this nesting:\napi.customers.new.preview # for /api/customers/new/preview\napi.users.index # for /api/:version/users\nThat is:\n1. The namespace would be an Ember.State, but it wouldn't map to a controller\n2. The scope (for :version), even though it's defined in a nested way, it doesn't create any nesting. So you have to translate in your head that, even though I'm writing a nested DSL, it's not a nested Ember.State\nStuff like that (and there's more) makes this stuff confusing. I also don't think you even need to have api be a state.\nSo then it's like, well you can define this url:\n/projects/:projectId/people/:personId/accessibleProjects\nusing nested routes (4 levels of nesting, really 3 because member is just grouping the child calls):\ncoffeescript\nTower.Route.draw ->\n  @resources 'projects', controller: 'project', ->\n    @resources 'people', ->\n      member ->\n        @get 'accessibleProjects'\nwhich will give you nested states that somewhat correlate with the DSL nesting (5 levels of nesting):\nprojects.show.people.show.accessibleProjects\nOr you can define every url without any nesting, but then your routes become more verbose:\ncoffeescript\nTower.Route.draw ->\n  @match '/projects/:projectId/people/:personId/accessibleProjects', to: 'people#accessibleProjects'\nI personally think the later is easier to read, but people like to use the DSL to clean up their code in Rails (it removes a lot of duplication when the app gets bigger).\nSo the issue is, the DSL nesting never quite maps to the Ember.State nesting. So the conclusion I'm drawing is: it's not realistic to correlate the DSL nesting with the Ember.State nesting.\nSo then the question is, if there's no correlation, should we get rid of the DSL? I think it works fine for the server, so I think we should keep it.\nThen the question is, can you use the Ember routes on the server, so you could use the plain Ember.Route.extend nested api to define the routes in the router on the client and server? Probably, but that seems like it would be a lot of work. I haven't really looked into this much more, but we should consider it more. If we could do this we'd get rid of the Rails-like DSL. (I've never used the collection, member, get, etc. in Rails, just match and resources really, so I wouldn't be too opposed to getting rid of it all together).\nWhat are your guys' thoughts on this?\nAnother way we could handle this is: the routing DSL generates a flat set of routes (the same way Rails does) that maps to a flat set of Ember.State objects, and it's up to the controller to handle connecting outlets when there are what looks like nested routes. So if you went to a route like this:\n/posts/:postId/comments/:id\nYou'd perform a check in the comments controller like this:\n``` coffeescript\nclass App.CommentsController extends App.ApplicationController\n  show: ->\n    App.get('postsController').connectOutlet('show') if @get('post') # if the parent exists\n@connectOutlet 'show' # or @render 'show'\n\n```\nThis is essentially the standard solution the Rails community is using for nested resources:\n- https://github.com/josevalim/inherited_resources\n- http://railscasts.com/episodes/230-inherited-resources?view=asciicast\n(in the more complex case where you want to see both the global /comments list and scoped /posts/10/comments list, you might need a more complex check than the railscast example is showing, I had to do that before).\nCalling postsController.connectOutlet from the commentsController isn't really that big of a deal in my opinion. People are currently just putting that into the Ember.Router in some Ember.Route#connectOutlet (where the route may be for /posts but they have 3 connectOutlet calls to random/unrelated controllers). It also greatly simplifies how the routing DSL works: it would only generate a flat Ember.Route state machine. It seems the optimization the Ember.Router (state machine) is trying to accomplish (where it enters/exits nested states up to the matching parent state) doesn't really give you that much. What are your thoughts there?\nOne last thing... I'm not the biggest fan of how Ember adds the connectOutlets method to the Ember.Route; it seems like it's adding rendering functionality to the router. I am leaning toward the idea that the router should be purely like a map that maps a URL to a function (a controller action), maybe with a few constraints / configuration variables. Then the controller action handles connecting the outlets (controller renders view based on event/url). What is your perspective?\nIf we go with the idea that the router should just be a map, then we could potentially simplify the nested Ember.Router tree by combining it with the Rails-like routing DSL. We'd just use a subset of the Rails router DSL methods, such as:\ncoffeescript\nTower.Route.draw ->\n  @resources 'projects', ->\n    @resources 'people', ->\n      @get 'accessibleProjects'\nWe would just get rid of the member in that above example, and we'd document that @resources and @resource will generate projects.action methods, so it's a special case.\nI'd like to get your feedback so we can decide the best/simplest/ideal routing API that works on both the client and server. That'll be an awesome thing to check off the roadmap. Cheers.\n. Just in the fact that it's so complicated trying to resolve this, I think it may just be better to have two sets of routes, one for the client and one for the server.\n. @TheHydroImpulse that's a good idea, I'll think more about that. I could see that working. Also reminds me, use 2 spaces for formatting! :) Maybe customizing the DSL will solve the problem... More to think about.\n@edubkendo I think you're right. The ember router is awesome, I just don't know it yet! I need to spend more time tinkering with purely client side Ember demos (I've been distracted with documentation and preparing for the next steps in the codebase). I'm going to spend some time after the talk to mess with pure ember to get a better [intuitive] feel for how Ember apps are built. Really, you guys probably know way more about that stuff than I do. Since starting Tower I've spent a lot of time refining things so they work, but haven't been building apps hardcore like I used to (though that's changing, switching gears soon).\nWhat I think we should do is solve this in stages (short term, medium term, long term).\nShort term, we should get the routes working like they do in Rails, for the client. The direct way to do this is to map them to flattened Ember states. You'll lose the robustness that the Ember router offers, but at least the router will work like Rails - and, let's be real, like any other client-side router since frameworks like Backbone and Sammy can't touch Ember :). This will put us in a position where we can build apps quickly (since client routes are the main bottleneck at this point), and will give us space to start tinkering with the ideal.\nMedium Term, we should test out what @TheHydroImpulse is suggesting on the DSL, and we should test out using the Ember router/state machine on the server, and allow fine-grained access to connectOutlet. We should also provide a way to allow users to write the client-side router using purely Ember, so Tower.Router = Ember.Router.extend(...) on the client. This would make it possible to have both server-side and robust client-side routes.\nLong Term, we find a solid solution that works everywhere. This requires tinkering and time.\n@edubkendo your last two paragraphs particularly resonate. The client-side controller is basically boilerplate from my experience too. And games, oh man. I don't even want to go there :). If Tower could handle games too, that would be INSANE. MVC's don't work in games in my opinion, so we'd have a lot of things to think through. [I came to the decision that \"games are out of the question of what I'm going to do in my career\" during the time I was messing with them in Flex: http://stackoverflow.com/questions/2083516/best-practice-for-transitioning-from-nested-state-to-nested-state-see-diagram]. Well, technically, MVC works in games. But \"web MVC's\" are very different from the original MVC, or MVC \"in general\".\nHowever, after seeing Ember solve this client-side routing problem with a [nested] state machine, I want to consider games again. If we could merge MVC/web-apps with \"game architecture\", that would be unprecedented. I don't know where to begin with this (or really, I just think it's \"too hard\"), but if I can see the light (some beginning demo/example) I will dig in too.\nBack to the client-side controllers. I think we need to implement this in phases. We need to solve the current problems in building apps, in a way that gives us time to figure out better ways to do it. While we're using the [current] client-side Tower controllers in a (perhaps non-ideal) way, they should work and solve the problem. Then in the meantime we will figure out better ways (and come to conclusions on whether or not they're necessary).\nGood discussion guys, love it!\n. @TheHydroImpulse yeah we should have two separate systems for the client and server. But we should do this medium term I think. I can get the routes working on flat Ember states in a few days, then can get the generator and all that to create ember routes (and make sure it's all working) in a couple weeks, though if you guys want to help with this we can get there way faster let me know.\nBesides that, we need to improve the client-side tower src development workflow! :) I tried doing TDD on the client Ember routes today but it was painful because of having to recompile the ./dist/tower.js. I know we're super close.\n. @TheHydroImpulse Yeah I saw that, want to play around with it in a few days. Looks super cool.\n. New idea for the the Router problem! Haven't had time to review this, wrote on the plane. Pretty excited about it though, let me know what you think.\nIf we eventually want to have a pure JavaScript API then the router should be build similar to how Ember does it, rather than the equivalent JavaScript version of the current Rails-like DSL:\njavascript\nTower.Route.draw(function() {\n  this.match('/posts');\n});\nInstead this is cleaner, and basically ends up being the same amount of code:\njavascript\nTower.Route.extend({\n  route: '/posts'\n});\nThe DSL is only really useful in CoffeeScript (or Ruby) because of the concise syntax. In JavaScript, the Ember/Object version is better.\nWhat this means though is awesome.\nFirst, we can define the client and server routes the same way. They'll both use the Ember-like syntax.\nSecond, since the client routes handle a lot of the rendering/database-querying logic anyways, there's really no need for Rails-like controllers on the client. Or rather, the Rails-like \"resourceful\" controller on the client gets merged into the Ember router.\nWe can do the same thing on the server! Get rid of the controller and put the logic into the router:\njavascript\n// on the server\nApp.Router = Tower.Router.extend({\n  root: Tower.Route.extend({\n    route: '/posts'\n    // action == connectOutlets, still need to think about the name\n    action: function() {\n      // write the response or whatever.\n    }\n  })\n});\nWith this pattern, we can bundle the @resources 'posts' routes something like this:\njavascript\nApp.PostRoutes = Tower.ResourceRoutes('posts');\nAnd you could then load them to the router something like this:\njavascript\nApp.Router = Tower.Router.extend({\n  root: Tower.Route.extend({\n    route: '/',\n    postRoutes: App.PostRoutes\n  })\n});\nWe could then implement the Tower.ResourceRoutes differently on the client and server!. Or even, the generator would just generate the complete route set for the client and the server, in place of the Controller!\njavascript\n// app/routes/client/postsRoutes\nApp.PostRoutes = Tower.Route.extend({\n  route: '/posts',\n  index: Tower.Route.extend({\n    route: '/'\n  }),\n  show: Tower.Route.extend({\n    route: '/:id',\n    edit: Tower.Route.extend({\n      route: '/edit'\n    })\n  })\n});\nNow both the client and server have the sama route setup, and you don't really need the controller (as the controller is defined in Rails).\n\nThis means you could have a context object that stores everything specific to the user, and it can be reused between requests!\n``` javascript\nTower.Route.extend({\n  route: '/',\n  action: function(router, context) {\n    context.request // and context.req\n    context.response // and context.res\n    context.params\n    context.store // a place to cache records, a.k.a. an \"identity map\"\n// the router would be unique to, and reused by, the connected client/user\nrouter.userAgent\nrouter.user\nrouter.ability\n\n}\n});\n```\nIt also means you could get the controllers from there, and use it instead of App.Post.all() and other methods called directly on the model class:\n``` javascript\nTower.Route.extend({\n  route: '/',\n  action: function(context, next) {\n    Post = context.postsController;\n    params = context.params;\nPost.find(params.id, next);\n\n}\n});\n```\nThe reason you can do Post = context.postsController is because Tower.Controller would extend Tower.Cursor, which is the same object when you do something like App.Post.all().\nPotentially even, we could make that happen magically on the server using node's vm.runInCustomContext(context), or maybe with(context) (but I've heard ES6 is going to remove that), so that you wouldn't even have to declare the variables:\njavascript\nTower.Route.extend({\n  route: '/',\n  action: function(context, next) {\n    Post.find(params.id, next);\n  }\n});\nWhat this means a few things:\n1. There is one \"router\" per connected user that gets cached until they leave the site. This is the same thing as the current Tower.NetConnection, or the \"manager\" we've been discussing.\n2. We can create a custom store (just a memory cache for example) that's unique to the individual request, so we can cache records queried through associations (an \"identity map\")\n3. The controller essentially becomes just a Tower.Cursor subclass, which is what you'd use inside Tower.Route#action instead of the model class directly (i.e. (Post = postsController).where instead of App.Post.where)\n4. The @param 'title' stuff in the current controllers would then be moved and defined on the Tower.Route instance. This is similar to how express does param parsing.\n5. The @beforeAction 'welcome' and other before/after hooks would just become something like enter and exit on the route! This would make doing things like bootstrapping the raw JSON into the HTML when the user first enters your site very powerful, since if they went to a nested route it would gather (\"eager load\") the data specific to that route while only rendering the leaf route. That would be super powerful.\nSo a more complex route would start looking like this:\njavascript\nTower.Route.extend({\n  route: '/',\n  enter: function(context, next) {\n    context.postsController.page(1).all(function(error, posts) {\n      context.bootstrapData = {posts: posts};\n      next();\n    });\n  },\n  action: function(context, next) {\n    context.response.render('index', context);\n    next();\n  }\n});\nor in coffeescript:\ncoffeescript\nTower.Route.extend\n  route: '/'\n  params:\n    title: 'String'\n  enter: (context, next) ->\n    context.postsController.page(1).all (error, posts) ->\n      context.bootstrapData = posts: posts\n      next()\n  action: (context, next) ->\n    context.response.render('index', context)\n    next()\nAnd the postsController (and other resource-oriented controllers) would have access to the parsed params defined by each nested Tower.Route. So controllers would look like this (JavaScript version):\njavascript\nApp.PostsController = Tower.Controller.extend({});\nAnd since:\njavascript\nTower.Controller = Tower.Cursor.extend();\nThe controller is a Tower.Cursor and so has a criteria property (going to refactor the current cursor to bundle query data into an observable Tower.Criteria object). This means that, based on the route and route-defined params, the postsController.criteria would be modified, which would mean the call to context.postsController.page(1) also includes the criteria! This is pretty powerful, and it would work the same way on the client.\nSo on the client, you would have a traditional Ember.Router with nested routes, each performing their own action, and we'd get rid of the old Tower.Controller rendering \"actions\" idea. So the new client-side Tower.Controller would just be a model cursor - the preferred API to the model. Taking this approach also makes it much clearer how you can use the Tower.Cursor (and how powerful it is). We could probably move the serverDidChange and other socket-related functionality / event handlers from the Tower.NetConnection and into Tower.Controller:\n``` javascript\nApp.PostsController = Tower.Controller.extend({\n  // this would a default implementation (what it currently does, \n  // just loads the models into the memory store).\n  serverDidCreate: function(records) {\n},\n  serverDidUpdate: function(records) {\n},\n  clientDidCreate: function(records) {\n}\n});\n```\nNow you start seeing what else you can do with the controller if we define it like that. You could start having a socket API.\nWell first, we should do something like this: delegate record.save() and related methods to something like record.send('save'), which then sent like a socket event. That would mean you could easily create custom socket events for records, such as record.send('modify') which you might define to mean \"send the modified record to the connected clients, but don't actually save anything to the database\". I could see this being very useful.\nWith that in mind, you'd want to also be able to handle those custom methods in the controller, perhaps like this:\n`` javascript\nApp.PostsController = Tower.Controller.extend({\n  // for our customrecord.send('modify')`\n  serverDidModify: function(records) {\n}\n});\n```\nSide note. Technically, with these serverDidX functions (which are basically just socket event handlers), you could do the same thing and define the controller actions in here, and just call them from the router. This may be a useful pattern (but not necessary):\n``` javascript\n// routes\nApp.PostRoutes = Tower.Route.extend({\n  route: '/posts',\n  action: function(context, next) {\n    context.postsController.index(context, next);\n  }\n})\n// controller\nApp.PostsController = Tower.Controller.extend({\n  index: function(context, next) {\n}\n});\n```\nWith a pattern like that the default Tower.Route#action implementation could just delegate to controller[name] if there was also a route.name or something. This would abstract a way a bit, and potentially make the controllers still feel a bit Rails-like.\nBack to the controller stuff...\nSo originally I was thinking about \"registering cursors\" through each controller like this:\ncoffeescript\nclass App.PostsController extends Tower.Controller\n  @scope 'all'\nBut, at least for the common/basic case, you only need to define 1 @scope or \"cursor\" per controller (instead of @scope 'all' you coud use a more finely tuned cursor, maybe one whose \"criteria\" are bound to the result of some \"Advanced Search\" box). With that in mind, and if the new controller becomes a subclass of Tower.Cursor, you don't have to define it at all; it is the cursor!\nThis would mean, all Tower.Controller subclasses (or maybe Tower.ResourcesController is a better name) automically get registered in the global set of Tower.cursors! That simplifies a lot:\njavascript\nApp.PostsController = Tower.ResourcesController.extend();\nThis also makes the following clearer: what if you wanted multiple \"scopes\" in your controller? Using the old Tower controller, you'd have 2 @scope declarations, but then how do you handle those in each action, etc.? Instead of going down that road, you would just create another controller. This is more along the lines of what Ember is doing, and it makes sense (and it feels so much gentler on my mind).\nThe end result\nSo the end result of all this would look something like this (again, writing in JavaScript but we'd have a CoffeeScript version too that works similar to how it does now):\n``` javascript\n// app/controllers/client/postsController.js\nApp.PostsController = Tower.Controller.extend({\n  index: function(context, next) {\n},\n  serverDidCreate: function(records) {\n},\n  serverDidUpdate: function(records) {\n},\n  clientDidCreate: function(records) {\n},\n  serverDidModify: function(records) {\n}\n});\n```\njavascript\n// app/routes/client/postRoutes.js\nApp.PostRoutes = Tower.Route.extend({\n  route: '/posts',\n  action: function(context, next) {\n    context.postsController.index(context, next);\n  }\n})\njavascript\n// app/config/client/routes.js\nApp.Router = Tower.Router.extend({\n  root: Tower.Route.extend({\n    route: '/',\n    postRoutes: App.PostRoutes\n  })\n});\nAnd it would look pretty much exactly the same on the server (also includes the example enter stuff for bootstrapping JSON to the client):\njavascript\n// app/config/server/routes.js\nApp.Router = Tower.Router.extend({\n  root: Tower.Route.extend({\n    route: '/',\n    enter: function(context, next) {\n      context.postsController.page(1).all(function(error, posts) {\n        context.bootstrapData = {posts: posts};\n        next();\n      });\n    },\n    action: function(context, next) {\n      context.response.render('index', context);\n      next();\n    },\n    postRoutes: App.PostRoutes\n  })\n});\nThe main benefits are:\n1. There is a unified interface to the \"router\" that works both on the client and server, and it allows for nesting on both the client and server.\n2. There is a single \"router\" for each connected user/client on the server, so we can cache the controllers, current user and ability, etc.\n3. There is a single \"context\" object on the server per-request that gets passed to each route's action, which contains a store so we can cache association records and such (\"identity map\") and other things such as the parsed session and cookies, etc. This also makes using the Node.js 0.8+ \"domain\" module possible, which will catch async errors so we can give the users useful error messages (this is pretty awesome).\n4. The Tower.Controller (or perhaps Tower.ResourcesController) becomes a simple Tower.Cursor, which aligns much better with the Ember.Router system, and the general way controllers are being used on the client (in Ember and other client frameworks).\n5. By defining the controller like this, it becomes easier to see how to define/use custom socket events (such as serverDidModify).\nI think this would really work. It moves away from the Rails idea of a \"controller\", but I think that's a good thing. With sockets and client-side stuff, controllers are a whole different thing.\nWhat do you think?\n. Awesome! This is going to take some work but we're definitely going to have to move away from Rails in some spots.\n. I would like to make these big changes in one large swoop. There is nothing that really needs incremental improvement that is higher priority than making a better framework. We need to adjust everything in bulk.\nI'm converting the test suite to JavaScript. After that I will convert the main codebase to plain JS and we'll talk about converting the default to JS. Even though I like coffee-script, I am now fairly convinced that it's not in the best interest of the node/js/tower community. More and more people I have talked to say they prefer using plain JS. I am slowly starting to agree. Looking back, a lot of the bottleneck/difficulty in getting started is in getting coffee-script compiling working.\n. Added Ember 1.0.0-pre.2 support to node, and the ember-application and ember-routing packages so we can start tinkering with the Ember.Router in node, excited!\nhttps://github.com/emberjs/ember.js/pull/771#issuecomment-10002995\n. @TheHydroImpulse yes, pretty much.\n. Making progress on the JS API. It required a bit of refactoring but it's getting there. A lot of it came down to taking a fresh look at the directions Ember and Express (and Node.js in general) are taking for API's, and making sure it aligns well with both.\nExpress and most of the node stuff uses chainable api's for the most part, while Ember uses (don't know what they're called) \"object\" APIs. Chainable APIs are cleaner in my opinion, but it should support both (at least until we figure out best practices and what people prefer).\nOne example is in how validations are defined/stored. To make the validations API more extensible, I'm putting them into a global hash similar to how ember-data transforms are:\njavascript\nTower.validators = {\n  presence: function(object, key, value) {\n    // ...\n  }\n}\nBut the way Express might do this would be:\n``` javascript\nTower.validator('presence', function(object, key, value) {\n});\n```\nIt's taken a while to realize there are these two main ways of making APIs. The reason it's important is because the whole Tower app should have a consistent way of defining the different parts, which will make it easier to extend. So if express defines it's routes like app.post('/'), etc., while you define configuration like this: app.settings.title = x, then things aren't right. This is why express defines settings like this: app.set('title', x) for example. Also thinking about how to get this style to work with Ember.Router.\nIn getting the JS api for the models implemented, I've had to think of ways to define validations on the fields. Now realizing it boils down to these 2 main ways of defining APIs, it makes it easier to come to a final conclusion on how it should be:\njavascript\n// this stuff is working on my end\nApp.User = App.Model.extend({\n    email: App.field().validate('presence').validate('uniqueness').validate('format')\n    email: App.field().validate('presence', 'uniqueness', 'format', {if: 'x'}) // shared options\n    email: App.field().validate('length', function(value) { return value.length > 3 })\n});\nThe issue was, there could be potentially many more ways to pass arguments to that validate method, but by keeping it simliar to the express/chainable api it limits it in a predictable way (at least it's getting there).\nAlong the same lines of standardizing the APIs, this method has made it much clearer how to define serializers, param parsers, modifiers/operators for the database, and global app config, some ideas here:\n- https://gist.github.com/ef874fd122d4b66ef354\n- https://gist.github.com/249240a691c4bfa389c0\n- https://gist.github.com/1c9acd98ac1c1e469355 (nothing good enough yet here, but might open up conversation)\n- https://gist.github.com/d3aa5a9ceb52dd478205\nAs a side note, you're also going to be able to define models using a purely chainable API almost like CoffeeScript (this was just a side effect):\n``` javascript\nApp.User = Tower.Model.extend()\n  .field('email')\n  .hasMany('posts')\n  .validates('email', {presence: true})\n  .classMethods({\n})\n  .instanceMethods({\n})\n```\nSo if you wanted to hack it together you could do that, but these will be the preferred approach:\njavascript\nApp.User = Tower.Model.extend({\n  email: Tower.field().validate('presence'),\n  posts: Tower.hasMany()\n})\n``` coffeescript\nclass App.User extends Tower.Model\n  @field 'email'\n  @hasMany 'posts'\n@validates 'email', presence: true\n```\nWill let you know when it starts getting ready to merge.\n. I personally am spending more and more time purely on the server-side digging into the data. I would love someone to take charge of the client-side stuff, that would help a lot. I'll make sure the router and all the client stuff gets finished and is awesome and implements what we've been describing, but I'd like to focus more of my energy on the data. That will all of course be integrated into Tower in some pluggable way.\nAs a result, I'm defaulting to be more a fan of the node/express api's than ember's, but I see the validity in both and Tower will work to support both to see what works best and is preferred down the road.\nCheers.\n. The routing system is starting to become really awesome. Here are some notes:\nhttps://gist.github.com/viatropos/4689443#comment-764567\nWe're moving to a more DSL-like approach that can be expanded to different frameworks such as Ember and Angular. It turns out this is very similar to the d3.js api, and also solves the problem of how to send tons of data around in a super optimized way (such as for multiplayer games).\nWe landed on the DSL approach after trying to figure out how to get the most performance out of the code. Writing it this way means the server/client code boots up insanely fast (minimal operations at startup, making the terminal start instantly for instance), and the JavaScript the browser will have to load for Tower is a fraction of what it is now. It also changes the way you think about what's happening in the app (more on that in the later comments on that gist).\nYou will also be able to write the expanded version directly (i.e. App.UserIndexRoute = Tower.Route.extend), but it's much easier on the hands/mind to write it using the DSL. I will look into also making it so you can write this stuff in CoffeeScript the same way you do now (if it's easy/quick to do), but that's a secondary goal.\nTo answer your question @maedi, Tower will use the latest Ember Routing API on the client, but is going to build the DSL around it, so when you write your routes on the server, you you don't need to use Ember at all (more on this later, but basically, I don't think you need Ember on the server for most cases).\nDefinitely weight in on the API (gist or this post) if you have any ideas/opinions.\n. Not quite sure what you're asking, are you wondering about the terminal and how to see/inspect data there?\nTo do that there is a helper function _.stringify(App.Post.all(), which just calls JSON.stringify(records, null, 2), but that can be overwhelming.\nWhat do you suggest? Should there be a more robust database-like (mysql-like perhaps) set of helpers for visualizing the data something like this:\n\n\nTwo things actually. First, there should probably be a tower database --mongodb or tower <database> command to directly startup the database. Some people seem to use this (though I never have). Second, we should provide a standard set of \"data formatting\" helpers in the console (and browser) for visualizing the data:\n- in table format (first image above)\n- show individual record (second image above)\n- in json\n- etc.\n\n. Started messing around with a cli to the database:\n- https://github.com/viatropos/tower/commit/dd17e4dbd7732c560517933536cc17638ca16de5\nFor now you can just quickly query data:\ntower select posts --select id,createdAt --where 'createdAt: $gte: _(1).days().ago()' --order createdAt- --limit 10 --page 2\n\nEventually it could even be such that:\n- the printed table is an editable spreadsheet in the terminal, so you can actually modify the raw data directly. The hardest thing was figuring out how to get the position of the terminal's cursor and map it a line of text - then to a model. But ansi.js figured it out! Here is another hack I tried that works, but ansi.js is way better :) https://gist.github.com/3765464\n- you can quickly paginate the database (and queries) using keyboard shortcuts in the terminal.\n- when you edit data in there, it could autocomplete from the rest of the db data.\n- similar visualizations/functionality should be possible from within the tower console js/coffee environment somehow.\nIt's not that bad once it gets figured out how to scroll the terminal cursor up and down and map that to data. Theoretically you can even build a DOM in the terminal using cheerio. It looks like that's what he started here!\n- https://github.com/Marak/ANSIdom\nAll we'd have to do is customize the cheerio.render method to generate ASCII / ANSI strings instead of HTML... Could easily be done in a day!\n- https://github.com/MatthewMueller/cheerio/blob/master/lib/api/render.js\nHere are some other links for learning about ANSI escape sequences (which give you crazy terminal powers):\n- https://github.com/crcn/celeri\n- http://blog.nodejitsu.com/six-nodejs-cli-apps\n- http://stackoverflow.com/questions/10585683/how-do-you-edit-existing-text-and-move-the-cursor-around-in-the-terminal/10830168#10830168\n- https://github.com/hij1nx/cdir/blob/master/cdir.js#L26\n- https://developer.apple.com/library/mac/#documentation/opensource/Conceptual/ShellScripting/AdvancedTechniques/AdvancedTechniques.html\n- http://tldp.org/HOWTO/Bash-Prompt-HOWTO/x361.html\n- http://nodejs.org/api/tty.html\n- https://github.com/TooTallNate/ansi.js\n- http://en.wikipedia.org/wiki/ANSI_escape_code\n- https://github.com/mscdex/node-ncurses\n- https://github.com/jocafa/node-term-ui\n- https://github.com/chjj/pty.js/\n- https://github.com/SchizoDuckie/Node-CLI\n- https://github.com/substack/node-cursory\n- testing clis: https://github.com/LearnBoost/cli-table/blob/master/test/index.test.js\n- https://github.com/visionmedia/node-term-css\n- http://creativejs.com/2012/02/ansi-escapes-js/\n- http://stackoverflow.com/questions/2575037/how-to-get-the-cursor-position-in-bash\n- http://stackoverflow.com/questions/8343250/how-can-i-get-position-of-cursor-in-terminal\n- http://www.markcrocker.com/rexxtipsntricks/rxtt28.2.0773.html\n- https://github.com/unconed/TermKit\n- http://scie.nti.st/2006/12/19/vi-key-bindings-in-rails-console\n- http://stackoverflow.com/questions/9122282/how-do-i-open-a-terminal-application-from-node-js\n- http://www.brankovukelic.com/post/2091037293/turn-vim-into-powerful-javascript-editor\n- http://railscasts.com/episodes/48-console-tricks-revised?view=comments\nCheers.\n. Sweet.\n. @careo this actually does randomly fail (though rarely). Thanks for the pull request! Nice little feature.\n. I think this is because \"nested resources\" aren't yet setup on the ember side.\nDo you only have a server-side nested route for @resource 'shop', -> @resources 'products'? (I'm guessing that's why the 404 on /products).\nThe @get('resource').save() is always going to save using the top-level route [currently]. We need to flesh this out more, specifically:\nWhat should the API be when you have multiple routes for a single \"record\"? So top-level /products and nested /shop/products or whatever.\nSidenote: I understand that in the ideal REST case, there is only 1 URL for a resource, but practically it's common and useful to have multiple - particularly for scoping resources to some parent model.\nCurrently you can generate the two different urls like this:\n``` coffeescript\nshop = App.Shop.first() # id: 10\nproduct = App.Product.first() # id: 20\nTower.urlFor(product) #=> '/products/20'\nTower.urlFor(shop, product) #=> '/shops/10/products/20'\nI don't think we've handled singular routes yet, so this isn't possible:\nTower.urlFor(shop, product) #=> '/shop/products/20'\nYou'd have to do this:\nTower.urlFor('shop', product) # a namespace\n```\nSee the urlFor tests for more examples (they need to be reorganized):\n- https://github.com/viatropos/tower/blob/master/test/cases/support/shared/urlTest.coffee\n- https://github.com/viatropos/tower/blob/master/test/cases/net/shared/urlForTest.coffee\nWhen you call resource.save(), that goes eventually to Tower.StoreTransportAjax#create:\n- https://github.com/viatropos/tower/tree/master/packages/tower-store/client/transport/ajax.coffee#L117\n[Working on the API for that module, it's far from ideal now]\nThe create, update, destroy, and find methods in that Ajax module get the url by calling urlForCreate(record), etc.:\n- https://github.com/viatropos/tower/tree/master/packages/tower-store/client/transport/ajax.coffee#L132\nThey're very primitive, but that's where your issue is probably. Somehow we need to come up with an API to allow nested resource URLs to be generated instead of the /products.\nOpen to suggestions, what are your thoughts?\n. Ember has a method, urlForEvent, that I know I was able to use on the controller, which gets passed the \"context\" from the {{bindAttr showPost post href=true}}, you might want to check into that:\n- https://github.com/emberjs/ember.js/blob/master/packages/ember-routing/lib/router.js#L515\nPotentially it could be added to the generated Ember.Route instances in Tower too:\n- https://github.com/viatropos/tower/blob/c17541d8627ecaca7386e40d99c07ecd1977986d/packages/tower-net/client/states.coffee#L50\nThat urlForEvent method works along the same lines as serialize and deserialize there.\n. The main issue is resource.save(), which [currently] will always save to the /<model-name-plural> path, from here:\npackages/tower-store/client/transport/ajax.coffee#L132\nSo the only way to do this now is to either override that method or to add a top-level route for the server that is @resources 'products'. I'm looking into a more robust API for this but that's all you can really do now.\n. The update and destroy methods on a record weren't fully finished so they have been commented out. Getting them going should be straight though. If you're down to check it out the relevant code is here:\n- Tower.ModelCursor#create packages/tower-model/shared/cursor/persistence.coffee#L94\n- Tower.ModelCursor#update packages/tower-model/shared/cursor/persistence.coffee#L111\n- Tower.ModelCursor#destroy packages/tower-model/shared/cursor/persistence.coffee#L128\nThey were commented out because the way I was originally updating the Ember.View collections (rendering a list of models for example) was slow when it had to recompute the changes, whereas with create it just pushes. On the todo-list, would love your help. Let me know.\n. I think the issues is/was that mergeDeletedRecords on the controller doesn't do anything yet. That gets called at the end of this chain:\n- Tower.NetConnection#serverDidDestroy: packages/tower-net/client/connection.coffee#L73\n- Tower.StoreMemory#unload: packages/tower-store/shared/memory/persistence.coffee#L52\n- Tower.notifyConnections: packages/tower-support/shared/shared.coffee#L41\n- Tower.NetConnection#notify: packages/tower-net/client/connection.coffee#L38\n- Tower.NetConnection#resolve: packages/tower-net/client/connection.coffee#L44\n- Tower.Controller#resolveAgainstCursors: packages/tower-controller/shared/scopes.coffee#L68\n- Tower.ModelCursor#mergeDeletedRecords -> Tower.ModelCursor#pullMatching: packages/tower-model/shared/cursor/finders.coffee#L113\nI never fully tested/got-working that @removeObjects in Ember, there were some issues with it a few months ago but a lot has changed since then. Try testing/breakpointing on the client that when deleting a record it gets deleted, the code gets executed all the way to Tower.ModelCursor#mergeDeletedRecords.\n. Agreed. Also by putting it in a submodule, it will be much easier to add to the tower src grunt tasks to compile the wiki for the website, etc.\nI am redoing the docs, updating them will make it much easier to get started.\n. Yeah tower is using codo for the docs, though I haven't run it in a while so there's probably some formatting issues to update in the comments. You can try with:\nnpm install codo -g\ncodo ./packages\n. Added a make docs task.\n. Nice work on https://github.com/viatropos/tower/wiki/Tower-Beginners-Guide @Maedi!\n. The main reason for the separation is that it should be possible to use the \"templates\" on the server (e.g. server-generated HTML). If you put the templates into the Ember View then you couldn't use them on the server.\nAlso, this distinction seems to be common in the Ember/JavaScript community in general:\n- ember-rails: https://github.com/emberjs/ember-rails/blob/3a9e90239dfd809e3158d0a936872237f50d267c/lib/generators/ember/view_generator.rb#L12\n- chaplin (an mvc layer on top of backbone, this is an example app): https://github.com/chaplinjs/facebook-example/tree/master/js\nI think the disconnect is in coming from Rails, where what they called \"views\" we're now calling \"templates\". I think that is more of a Rails issue than anything (since Rails was purely server, it didn't have to make the \"templates\" distinction).\nHowever, I don't think adding the \"templates\" concept turns MVC into MVTC. Conceptually you know the \"templates\" and \"views\" are tied together and part of the \"view\" layer in MVC.\nIf you went down that road (MVC->MVTC), then \"events\" and \"routes\" and all that other stuff would make it MVTERC... You know what I mean. Also, people in the Rails community often add \"presenters\" to their apps, which makes it more of an MVP, but they also have controllers..\nIn the end though, everyone agrees generally on what MVC means, even if things are broken down a little further in practice.\nI don't think breaking the MVC into more clearly defined sub-components is a bad thing.\nSome other benefits of separate \"templates\" from \"views\":\n- It makes the code DRY (so you can use \"templates\" on just the server, or in Ember \"views\" on the client, for example)\n- It makes it so you encapsulate your logic a little better (methods/etc. go into Ember.View objects rather than the templates, etc.).\n- Also, by having the templates separate, we can run precompilers and other optimizations on them separately from the Ember.View (such as precompiling jade templates).\n. @onyxrev I agree there is still a lot of boilerplate with the views, something we should definitely think about cleaning up.\nFYI, the generated ember views aren't necessary (at least the blank views with just a templateName in them). They were just there to give you a starting point to add more functionality. Really, I think you can just render the views in the main layout HTML with a data-template-name attribute, the same way the application template is rendered, and Tower should create an Ember.View for you. Maybe it doesn't though, not sure, it should be a one-liner to add if not, just making this method more robust:\n- packages/tower-view/client/emberHelper.coffee#L26\n@Maedi I'll mess around with the views/templates nesting to see how it feels. My first impression is that although it makes sense, it's combining two distinct sets of functionality, so that you'd have views/templates and views/users, etc., and/or it would break the convention of having client and server folders just below the app/* folders. It feels similar to if you were to have app/models/data to put in your seed data, or app/controllers/sockets for socket handlers. Really I think all that stuff should go at the top level. More than anything though I think this is all just new territory so everything feels a little strange at first. That ember guide you linked is good.\n. Just wanted to say, you guys probably have more experience than I do with the client views. I haven't had much time to spend on \"apps\" lately, but soon the docs will be updated and I'll have some time to really mess around with the Ember.View. It seems really powerful and a useful abstraction.\nUntil then, looking to you for examples! :)\n. WIll get to this in a bit, thanks a lot for tracking this down and fixing it. Awesome stuff.\n. No worries, I'll change it back. Thanks though, merged and it's all working :)\n. It doesn't necessarily need to go through the router, but I think it should execute the controller action the same way the router does it (that was the initial reason for making it use the router).\n. This is going to be much different in tower 0.5.0 (ember also does this much differently now as well).\n. No, sorry. Ember is a core part of Tower's Object Model.\nIf Angular can work along side Ember, meaning if you could use the \"view\" part of Angular and just not use the Ember views, while still the Ember objects, then it's perhaps possible. But that's something you would have to test and see.\nTower is using Ember and at least for now won't support Angular and Knockout, the primary reasons being that Ember's \"Object Model\", and Ember's \"run loop\" (pretty much a port of Apple Cocoa's run loop), are [in my opinion] unparalleled implementations of observers, data-binding, and classical inheritance (and basically \"multiple inheritance\" through mixins), and Tower is taking advantage of this stuff at the core level.\nThat said, if you can show that Angular templates work with the current tower + ember codebase, I would take another look.\n. We are confident that Ember is a better choice than the related frameworks. Ember has a much more calculated approach to solving the web/mobile problem and is in this for the long term.\nThe code for these larger projects is always likely going to work. So if you have built apps in the past with Angular or Knockout or the like, you have definitely had some success. But the real distinguishing factor between these different frameworks is how well each implements the ideal principles established by the community, and how they go beyond them to invent new ones.\n. @ricick How would you accomplish the same thing on windows? Would love to work through this with your help, I'll be on #towerjs IRC now for the next hour or two if you're around.\n. Specifically the things to solve for windows are:\n- windows equivalent of executing the $(./bin/dependencies).\n- an alternative to the Makefile (we could just go back to using Cakefile, that's probably easiest).\nMost of the Makefile commands are just wrappers around grunt commands, so you should be able to run those.\n. @ricick do the latest changes to master work for you now?\n. Awesome, thanks so much for plowing through this @TheHydroImpulse, it's going to be great having this working on windows!\nWhen you guys get errors on windows, just paste the whole error message in this thread so we can help resolve it faster :)\n@TheHydroImpulse not sure why the pull request didn't merge properly, I tried a few times and the lines I saw that differed I also tried just manually changing so I'll try just copy/pasting your two files in a bit (package.json and tower/server.coffee).\nSome of the windows bugs are going to be related to paths that aren't built using path.sep or path.join, so if you guys see and fix those, would love pull requests.\n. It should fully work on windows now! Let me know if there's anything else. @TheHydroImpulse and his windows batch file chops took care of the hard stuff (I mean wtf? lol). The rest is just making sure paths aren't using / but require('path').sep (which you have to escape for regular expressions, and gets a little messy). Cheers.\n. Can we close this?\n. @pashaie sorry you're running into this issue, we've been trying to get it working on all platforms and we're so close! I think this is the last issue, the BATCH RECURSION stuff.\nThe reason that's happening is because we added the ./make.bat file to the root of tower specifically to allow the windows cmd (which can't / doesn't have make from what I understand) to be able to execute that make install-dependencies command.\nFrom what I understand about windows, there are two ways people use the command line (even though there are multiple shells on windows it seems):\n- The default cmd shell\n- The git bash shell\n[Just rehashing to make sure I understand this correctly]. The git bash shell on windows seems to be the preferred (and better) shell, since it's more UNIX-like and it can install things like make. Is that roughly correct?\nThe thing is, Windows Azure uses the cmd shell, and from what I saw there's no way to install make. However, it is [probably] possible if you skip the simple heroku-like command-line interface to Azure, and just start managing the virtual machines directly; I'm sure you could install git bash and make if you went down that road (and if anyone does I'd love to learn how). That's way too much work though.\nSo instead of requiring all that work to get going on Azure I just wanted to get make working. So we added that ./make.bat and it works! This simple generated Tower app was deployed on Azure:\nhttp://tower-azure-test.azurewebsites.net/\nBut now it seems that, at least on some windows, that make.bat script is causing this BATCH RECURSION issue since you probably already have the actual make installed. Do you know how to make the real make you may have installed on your windows to work alongside this make.bat script? It seems like it should be a straightforward fix but I don't know my way around windows/batch files very well\nOne solution - if there's no way to keep the make.bat and have it work alongside any real make that may be installed on windows - is to somehow remove it in an npm preinstall hook, but I'd like to avoid that if at all possible.\nAny ideas? Looking forward to calling \"windows support\" done :)\n. Just published 0.4.2-14 to npm, was only on GitHub. Glad to see the make stuff has a workaround.\nSo should we keep the make.bat? Is there no way to have it work on windows without first installing devkit or windows make? Either way having that info on the wiki will be great, thanks guys.\n. What's the status of this now, can we close?\n. Thanks!\n. Not sure why isn't ejs getting installed... It's declared in devDependencies:\npackage.json#L75\nDo you have NODE_ENV set globally to production or anything like that? Or perhaps did you run npm install --production? Or maybe windows doesn't install devDepdendencies?\n. Really... lol, I didn't know that devDependencies don't get installed when you install a module globally. Will fix that right now.\n. Fixed the ejs issue, you shouldn't have to globally install it now.\n. @TheHydroImpulse unless you think it's reasonable/possible to get the makefile working on windows, we can instead just limit calling the make commands only to contributors who want to hack on the source (at least in the short term).\nTo do that I can merge localDependencies into dependencies, which will add all those modules to the global install which aren't really necessary, but it would get it working on windows I think. Then to get started hacking on the tower source, you'd have to run the make post-install manually.\nI'd rather have this makefile thing working cross-platform but I don't want us to waste too much more time on it.\nAlso a good solution would be just to document the setup process for getting started on windows (such as \"install make, install ruby dev-kit, etc\" or whatever). As long as there's some way for windows users to get started I'd be happy with that in the short term.\n. The latest push to npm removes make from the npm install postinstall hook, so there's no dependency on make on npm install.\nTo hack on the tower source you'll have to run make install-dependencies after you clone the repo (added to the README). But just to use tower, you should be able to just run:\nnpm install tower -g\ntower new app\nI'd like to get put the make postinstall hook back in, but want to wait for a bit on it.\n. @ginsent if you try now what do you get? It should be v0.4.2-18.\n. Looks like we're getting close :D\n. Yeah that's the last thing!\nP.S. I'll update the site/workflow so we can keep the website roughly in sync with the wiki:\nhttps://github.com/viatropos/towerjs.org/tree/master/public\nGoing to try and finish this today. Need some new design lol... Time for dribbble!\n. Looks like you're good to go, did you start the cake watch command? I think the assets just need to be compiled.\nYou'll have two windows, one running the server and one compiling/processing files when they change:\n```\nfirst window\ntower new app\ncd app\nnpm install\ntower generate scaffold post title:string body:text\nnode server\n```\n```\nsecond window\ncd app\ncake watch # or, if that fails which it shouldn't anymore, grunt start --config grunt.coffee\n```\nAlternatively, you can compile the assets on a one-off basis by running cake build instead of cake watch.\nDoes that solve it @ricick?\n. Awesome!!\n. @TheHydroImpulse I'm going to bump 0.4.2-20 to 0.4.3 without the make.bat fix, unless you want to squeeze that in there (not necessary).\n. Can the which command in node-which be abstracted/included in the Makefile?\n. For the cake watch error, if you do:\nnpm install which\nthen in the interactive node, I'm getting:\n```\n\nrequire('which').sync('cake')\n'/usr/local/bin/cake'\n```\n\nDoes this mean windows users should be doing:\n/usr/local/bin/cake watch\n(or whatever the full path to the cake command is)?\nIf so, is there a way to transparently create an alias to it on windows? Maybe so that when you first npm install tower -g, it checks if cake exists, and if not, adds an alias. That would be nice.\n. I'm on 10.6.7 (Snow Leopard) and node bin/dependencies just returns the string:\nnpm install stylus uglify-js mocha chai sinon eco mustache jade kue mongodb coffee-script coffeecup gzip chokidar knox socket.io socket.io-client fibers cli-table ttys cheerio colors\nBut if it's wrapped in the Makefile command you made:\ninstall-dependencies:\n    $(shell $(DEPENDENCIES))\nit works fine. It works with package.json postinstall: \"make install-dependencies\". Does that work for you?\n. Thank you by the way, this is very cool having the dev environment work on windows.\n. Hmm...what is that? The make install-dependencies works for me, does it not you?\nLol, but now that fix to tower/server.coffee with the path.sep.length > 1 doesn't work on travisci, since everything is in a top-level directory:\n/home/app/config/shared/application\nIs there an alternative solution that works on windows?\n. Cool. I tried this and it's working for me and travisci, how about you?\nhttps://github.com/viatropos/tower/commit/372a9cba0883f4956d48e4bfca66d3524e89ac1d#L92\n. What if it was while ... && !path.match(/(?:\\\\|\\/)$/) or something like that?\n. think this is already in there, seems to be working!\n. I merged it in just now but it's not autoclosing the pr.\n. Try logging the object you're in:\ncoffeescript\n    block = (callback) =>\n      console.log @constructor.toString(), @\n      try\n        @[@action].call @, callback\n      catch error\n        callback(error)\nOften if you get an error here saying the action isn't defined it's because it's calling it on ApplicationController for some reason (haven't fully solved that problem yet, but). The reason this is happening might be because it's [for some reason] not finding any matching routes, but the route @root '/' may match, but it still also parses the action (if this is the case we need to write tests to fix and resolve this more permanently. It has also happened because the coffee-script compilation didn't use the ./coffee-inheritance.js code, so subclasses of App.ApplicationController may not be registering correctly and so App.PostsController.toString() might result in \"ApplicationController\" - I have seen that before.\nCopy/paste the output of logging this.constructor.toString() and this from the code above into a gist and let me know, that may offer more info.\nAnother useful thing to do is console.log(this.constructor.metadata()) and make sure that is correct.\nAnother thing to inspect is if the class is being defined multiple times. In the past - when working on automatically reloading code on the server when a file changed - reloading the file redefines the class, but there is some reference that's still around using the old code (this shouldn't be happening b/c all references classes, such as in the associations, are stored as strings until they're being called, but it still may). This might cause unexpected/random errors like this.\nOh, and since this is on windows, it's possible that the controllers (and others) aren't being loaded b/c of the windows/*nix path differences, so try inspecting _.keys(App) and see if everything that should be defined is.\nOnce we figure out why this is happening we should write tests to make it doesn't happen in the future because this is definitely an error that's difficult to debug.\n. Yep that's it then, it's probably using ApplicationController when it should be using some subclass. What is the url you're accessing? And the route mapping that url to the controller action (or just paste your whole routes.coffee).\nIs there an index action defined on your ApplicationController?\n. If you copy/paste your code from\napp/controllers/server/applicationController.coffee\nto\napp/controllers/client/applicationController.coffee\nThen it will compile it to\n./public/javascripts/app/controllers/client/applicationController.js\n(This is just a hack to see the compiled output quickly, since only client files get compiled to ./public). Once you do that, what does the code from that file look like?\n./public/javascripts/app/controllers/client/applicationController.js\nSince you do have a route pointing to application#index and the index method is defined, the only reason I can think of that it's not working is because the coffee-script isn't compiled correctly for Ember.\nGiven this:\ncoffeescript\nclass App.ApplicationController extends Tower.Controller\n  index: ->\n    @render 'index'\nPlain-old CoffeeScript will generate this:\n``` javascript\nvar hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super = parent.prototype; return child; };\nApp.ApplicationController = (function(_super) {\n__extends(ApplicationController, _super);\nfunction ApplicationController() {\n    return ApplicationController.super.constructor.apply(this, arguments);\n  }\nApplicationController.prototype.index = function() {\n    return this.render('index');\n  };\nreturn ApplicationController;\n})(Tower.Controller);\n```\nBut Tower's ./coffee-inheritance.js extensions will generate this:\n``` javascript\n(function() {\n  var defineProperty = function(clazz, key, value) {\n  if (typeof clazz.__defineProperty == 'function') return clazz.__defineProperty(key, value);\n  return clazz.prototype[key] = value;\n},\n    __hasProp = {}.hasOwnProperty,\n    __extends =   function(child, parent) {\n    if (typeof parent.__extend == 'function') return parent.__extend(child);\n    for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } \n    function ctor() { this.constructor = child; } \n    ctor.prototype = parent.prototype; \n    child.prototype = new ctor; \n    child.__super = parent.prototype; \n    if (typeof parent.extended == 'function') parent.extended(child); \n    return child; \n};\nApp.ApplicationController = (function(_super) {\n    var ApplicationController;\nfunction ApplicationController() {\n  return ApplicationController.__super__.constructor.apply(this, arguments);\n}\n\nApplicationController = __extends(ApplicationController, _super);\n\n__defineProperty(ApplicationController,  \"index\", function() {\n  return this.render('index');\n});\n\nreturn ApplicationController;\n\n})(Tower.Controller);\n}).call(this);\n```\nThe main difference is that Tower customizes CoffeeScript to define instance methods like this:\njavascript\n__defineProperty(ApplicationController,  \"index\", function() {\n  return this.render('index');\n});\nwhereas plain CoffeeScript sets it on the prototype directly:\njavascript\nApplicationController.prototype.index = function() {\n  return this.render('index');\n};\nCore objects in Tower define that method (packages/tower-support/shared/class.coffee#L17) like this:\ncoffeescript\nTower.Controller.reopenClass\n  __defineProperty: (key, value) ->\n    object = {}\n    object[key] = value\n    @reopen(object)\nSo the controller is actually being defined like this:\ncoffeescript\nclass App.ApplicationController extends Tower.Controller\n  @reopen\n    index: ->\n      @render 'index'\nThis is required so when you instantiate a new controller (or any core object in Tower), the instance gets the correct methods in the prototype/mixin/inheritance chain. Otherwise, Ember doesn't pass methods directly defined on the prototype to class instances, like this:\ncoffeescript\nApplicationController.prototype.index = function() {\n  return this.render('index');\n};\nThat could be the reason why the action is undefined in your case.\n. Awesome! Yeah that second error is tower-application/server/watcher.coffee path issues...\nSo how did you fix the problem? It should be able to read the code from server/applicationController.coffee.\n. The benefit is just being able to use the full range of coffee-script syntax (such as executable class bodies), and because ember needs to have instance methods defined in reopen, and class methods defined in reopenClass; you can't define methods on an ember object using the prototype directly if you want to use computable properties or have it inherited in subclasses. So this won't work properly in ember:\ncoffeescript\nApp.User.prototype.welcome = ->\n  # deliver welcome email\nit must be done like this:\ncoffeescript\nApp.User.reopen({\n  welcome: ->\n})\nSo the extensions make it possible to use the simplicity of coffee-script in the API, while also being able to use ember.\n. Can you paste the coffee-script that's getting generated? (So I can see what you mean by \"it's not wrapping a self invoking function around the rest of the compiled javascript\")\nThis may be happening b/c coffee-script may be working slightly different on windows (unlikely), or maybe the extensions are tied to *nix (also unlikely), or maybe the coffee-script grunt task isn't setting the right default options on windows. Not sure, post the code that's being generated and your version of coffee-script (local and global), that will help.\nThanks.\n. Hmm... what is the difference between postsController.coffee and applicationController.coffee (what are their paths)?\nTechnically the ApplicationController code you posted above should still work since it will just execute straight through - it wouldn't work if it was wrapped like this:\n``` javascript\n(function(){\n});\n```\nBut since these errors are occurring for you on the client (not server) it probably does have to do w/ the fact that it's not wrapped because some variables may be being defined globally at that point.\nWhat specific errors are you getting on the client?\n. And your routes are like this (since you're switching to welcome action)?\ncoffeescript\nTower.Route.draw -> \n  @match '/', to: 'application#welcome'\nIf the client controller is blank, then the error could be b/c the client routing implementation doesn't handle blank actions (not sure about this). By default the generated routes are in a shared folder so they are loaded on the client and server. If you want to have custom routes for the client vs. server, then you can move them to app/config/client and app/config/server instead of app/config/shared.\nIt seems that it's working now then?\n. Been messing around with it for a bit on azure, it looks like it could be one of two things.\nFirst, it could be an issue with how the ./coffee-inheritance.js overrides are applied... By that I mean, when you require('coffee-script') in your app, and it's also required in the tower source, there could be two coffee-scripts installed:\n./node_modules/coffee-script\n./node_modules/tower/node_modules/coffee-script\nI'm don't know 100% how the modules are resolved, but it seems like these are the rules:\n- On installation, if the module is already installed at the parent level, it won't install it into it's own node_modules folder. So if you already have installed coffee-script in your app, then when you npm install tower in your app it won't install it's own coffee-script in tower/node_modules/coffee-script. Not sure if this is the case but it seems like it is.\n- Then when you call require('coffee-script'), it will do a lookup up the chain, starting from the __dirname of the current file. So if you put require('coffee-script') inside tower/lib/tower.js, then it will lookup in tower's node_modules before your apps. Again, not sure about this but it seems the case. If you check require.cache you can see more about it.\nSo I was thinking it could be that we are applying the coffee-script extensions to a version of coffee-script installed in tower, but not the app. So I added coffee-script to tower's package.json so it got installed there, and removed it from the app, and made sure the only require('coffee-script') call was from tower/index.js in the tower source. But that didn't help. Still, there may be some issue with this.\nThe second thing is, it could be because Ember's run-loop isn't being called until later, so somehow the mixins aren't being added properly? I say that because of this:\n``` coffeescript\ncalling this in a generated app, from app/config/server/bootstrap.coffee at the top of the file\nnone of the app/controllers/* code has been loaded by this point.\ngetting the full path to the controller\ncontrollerPath = require('path').join(Tower.root, 'app/controllers/server/applicationController.coffee')\nloadOrReload = ->\n  try require.resolve(controllerPath)\n  delete require.cache[controllerPath]\n  require(controllerPath)\nseeIfExists = ->\n  try\n    console.log 'App.ApplicationController#welcome', App.ApplicationController.create().welcome\n  catch error\n    console.log 'App.ApplicationController#welcome', error\nit has never been loaded so this will fail\nseeIfExists() #=> error\nattempt 1\nIf you require it, you'll get App.ApplicationController,\nbut the welcome method will be undefined.\nThat is the error that you're getting\nloadOrReload()\nseeIfExists() #=> undefined\nattempt 2\nIf I instead run this inside an Ember.run block,\nwhich forces ember to compile it's modules,\nthen it seems to work:\nEmber.run =>\n  loadOrReload()\n  seeIfExists() #=> [Function]\n```\nThere could be some issue where the same file is being loaded twice because of some [more random] path issues on windows, such as maybe one version of applicationController is starting with \\\\\\\\ and another with C:\\\\\\\\, so it's loaded twice.\nOther than that, the last issue is making sure the template paths resolve correctly, which should be easier.\nHope that helps.\n. So it looks like it could be as simple as both the client and server applicationController.coffee files are being loaded o_o:\njavascript\n// on azure\nconsole.log(Object.keys(require.cache));\n[\n...\n'\\\\\\\\10.207.104.177\\\\volume-22-default\\\\some-hash\\\\another-hash\\\\site\\\\wwwroot\\\\app\\\\controllers\\\\server\\\\applicationController.coffee'\n...\n'\\\\\\\\10.207.104.177\\\\volume-22-default\\\\some-hash\\\\another-hash\\\\site\\\\wwwroot\\\\app\\\\controllers\\\\client\\\\applicationController.coffee'\n]\n. http://tower-azure-test.azurewebsites.net/\n. One more note, if you're building a startup and need to have your product out in like 3 weeks or something, then definitely use something more established like plain express. There's still a few edge cases to work out with the way requests are parsed in Tower before I'd say otherwise.\nThat said, everything is working and things are moving pretty fast, so if you're more talking 3 months, then definitely give it a shot. The server-side model and controller layers are the most robust part of Tower (and what I am working on finishing first), so we'll be tackling any issues that come up with \"api\" stuff first.\nIf you have any questions feel free to post issues or meet us in #towerjs IRC.\nGood luck!\n. What is you operating system, node version, and npm version? It should be working, we're just fine tuning windows installation and installation may have broken elsewhere but should be easy to fix.\n. @bendangelo were you able to get past this? going to close the issue if so, let me know. thanks!\n. Thanks!\n. > When a background task finished, it would emit a socket event. You could then listen and emit jobs.\nI love this idea. Very cool, wanna hear more about that.\nIt seems this would be a very clean way to do file uploading. Also other common background tasks like emailing or fetching and processing a webpage.\nNot sure how I feel about putting that @on code in the controller instead of the model though, will think about more. Socket events do seem like they should come from the controller from a high level, but maybe they're hooked into a callback defined on the model, something like:\n``` coffeescript\nclass App.Video extends Tower.Model\n  @after 'create', 'upload'\nupload: (done) ->\n    @enqueue 'upload', @get('id')\n@upload: (id, done) ->\n    # do upload...\n    done() # which calls back to the socket @on handler in the controller.\n```\nWhat are your thoughts?\n. Though I did hear people are starting to avoid callbacks like @after 'create' and choosing to define those actions in the controller, so maybe it is a preferred pattern putting it in the controller...\n. I like where you're going with this. This would definitely make creating a demo app very easy.\nSeems like you know what should be done here, so I just have some high-level comments on the API.\nFirst, when I ran into this situation (uploading videos, or even testing with resizing images but that's pretty fast), I did something like this:\n``` coffeescript\napp/controllers/server/videosController.coffee\nclass App.VideosController extends App.ApplicationController\n  create: ->\n    video = App.Video.build(@params.video)\n# this is called after create, after the http response was sent back to the user,\n# so this just going to emit socket events\nvideo.on 'upload', (percentComplete) =>\n  # emit only sends to current user, through web sockets.\n  # the exact api wasn't/isn't implement, but basically just\n  # send the current user who uploaded the video the data they need...\n  json = video.toJSON()\n  # maybe this is a computed property on the video or something...\n  json.percentComplete = percentComplete\n  @emit 'uploaded', json\n\n# normal save and responding to HTTP\nvideo.save (error) =>\n  if error\n    @render json: {error: error}, status: 404\n  else\n    @render json: json, status: 200\n\n```\nThe way that would be implemented, all the \"background job with redis\" code is abstracted away into the Tower.Model base class, so you'd implement it like this:\n``` coffeescript\nclass App.Video extends Tower.Model\n  @after 'create', 'upload'\nupload: (done) ->\n    @enqueue 'upload', @get('id')\n@upload: (job, done) ->\n    job.on 'complete', done\n    job # return job or something, or somehow attach this to the video.on event handler in the controller.\n```\nThat way, you can run jobs from the command line without worrying about the controllers. But if a job was requested through the controller (uploading video), then you hook into it from the controller.\nI don't like the way I did that in the controller though, and it should be done more like what you're saying (I like the @on controller method rather than calling App.Job.on, which is too meta :) So maybe something like this:\n``` coffeescript\nclass App.VideoController extends App.ApplicationController\n  # these 3 methods are equivalent\n  @on 'upload', 'upload'\n  @event 'upload'\n  @hook 'upload'\nupload: (job) ->\n```\nThen whenever a hook is defined it will register a handler on a record when instantiated (abstracted away into some Tower controller mixin).\nThe only issue with doing that is it seems a little abstract and may be confusing to beginners. Some of these simple abstractions make it harder for people to get started, so just another factor to consider. That's why maybe just manually writing the handler with @emit like the first example could be preferred even though it's more verbose.\nEither way (API-wise), there will be a clean way to send socket notifications to the user who just made the request, vs. everyone (or a subset of everyone). Socket.io uses broadcast vs. emit which I like, what do you think?\nThe last thing is the job object. Right now the tower-model/server/queue.coffee code encapsulates the logic for running background jobs using kue, and they have their own job object (and I like how they've built it). I wasn't really ever a fan of how background jobs were done in rails, as classes such as in resque:\n``` ruby\nclass Archive\n  @queue = :file_serve\ndef self.perform(repo_id, branch = 'master')\n    repo = Repository.find(repo_id)\n    repo.create_archive(branch)\n  end\nend\n```\nReally, all jobs just have one method, perform, and emit events at different phases in their lifecycle. The kue api handles this better in my opinion. There's no need to create 1 class for each job type. Still, we need to think through how we want to represent/define jobs in Tower (haven't had much time for this yet).\nWhat are your thoughts?\n. Sounds good, want to send a PR?\n. I like the idea of having a centralized interface to all things related to the user:\n- user record\n- authorization (permissions, roles, etc.)\n- scopes (records via cursors, etc.)\n- socket\n- even, potentially, controller instances so tower would only have to instantiate 1 controller per class per user (a small but perhaps useful optimization). There's a few issues with this one though, mainly that we'd have to redo the controller api not to use any instance variables, but to work more like express' app.use(function(req, res, next)) system, which I'm kinda starting to like more than how Rails did it.\nAt the same time this interface - entry point to the \"user\" stuff - should be as as simple as possible. But, because the server has multiple users it has to keep track of (whereas the client only has one), we can't make it this simple:\n``` coffeescript\nApp.user # or App.currentUser\nApp.socket\n...\n```\nbecause the server would need to wrap that in what you're calling the Tower.NetManager object (currently Tower.NetConnection), so like this:\ncoffeescript\nApp.connection.user\nApp.connection.socket\nWith that we can also do neat things on the client like wrap those in Handlebars helpers, such as:\n`` coffeescript\nHandlebars.registerHelper 'currentUser', ->\n  # since behind the scenesApp == Tower.Application.instance()`\n  Tower.Application.instance().connection.user\nHandlebars.registerHelper 'currentAbility', ->\n  Tower.Application.instance().connection.ability\n```\nand then in the views do something like this:\nhtml\n{{if currentUser}}\n<h1>Welcome {{currentUser.name}}</h1>\n<a {{bindAttr logout href=true}}>Logout</a>\n{{else}}\n<a {{bindAttr login href=true}}>Login</a>\n{{/if}}\nIn terms of the class_instances idea, I like this kind of thing and have been thinking a lot about it too, but it seems to be pretty complex to implement and I'm not sure how much benefit we will get out of it (mainly in terms of performance). For the client it makes sense, it's pretty much what we're doing now. But for the server it gets more complicated. Here are some of the issues on the server.\nFirst, for the controllers, we'd have to refactor all the actions to be passed parameters instead of setting request, response, params, headers, etc. to the controller instance, so actions would go from this (current):\n``` coffeescript\non the server\nclass App.PostsController extends App.Application\n  index: ->\n    App.Post.all (error, posts) =>\n      @respondWith (format) =>\n        format.html => @render 'index', collection: posts\n        format.json => @render json: posts, status: 200\n```\nto something like this:\n``` coffeescript\non the server\nclass App.PostsController extends App.Application\n  index: (request, response, next) ->\n    App.Post.all (error, posts) =>\n      @respondWith (format) =>\n        format.html => response.render 'index', collection: posts, next\n        format.json => response.render json: @collection, status: 200, next\n```\nThe reason is because if we're going to cache the controller object, then what if the current user sends two async requests, and the second one finishes before the first... If they both go to the same instance and set variables, the state would get messed up. So there can't be any state kept in server-side controllers; everything would need to be passed as arguments like app.use (req, res, next) ->. By implementing that pattern, we stick more closely to express' API, and it is cleaner because we can now cache the controller instances. But at the same time, the API becomes more verbose (we have to manually manage a bunch of common/boilerplate code), and the controller actions start revolving around the request and response objects, rather than the controller itself. This would mean - if we want to keep the API on the client and server pretty consistent - we need to introduce the request object on the client, which isn't really necessary (at least it doesn't seem necessary at the moment).\nSo then it comes down to, what is the benefit we gain by caching the controller instances on the server per-user? Pretty much, it comes down to performance - we could potentially shave off some milliseconds from the request by not creating a controller instance for each request. But that's all speculation, I haven't tested that. And I'm starting to think that it wouldn't be large enough to sacrifice the simplicity of the current controller action API.\nThat's my main concern in terms of caching controller instances on a per-user basis.\nIn terms of models, having a central object for each user/socket/session would not only standardize the way all-things-user get accessed (through some net manager/connection object), but it would also allow us to create an identity map. We could scope all the data for a request to the current \"connection\", so associations/reflections wouldn't have to reload data that's already loaded. I think that's pretty cool. And we can do that with the current or express-style controller action api (above), so we could leave it the same and still accomplish this.\nThose are my main concerns/thoughts for the server.\nFor the client, we should/can definitely cache everything on a central object, and maybe alias it to App, so:\ncoffeescript\nApp.currentUser == App.connection.user\nOne issue with this is Ember already has ideas on how this stuff should work, so we have to work with/around that. For example, they lazily-instantiate controller instances on the App.router object, and we can't change that (at least it seems). So Tower just aliases App.postsController to App.router.postsController essentially. If we made this work around a \"connection\" object, then we'd have to take that kind of stuff into account.\nIn terms of caching Ember.View instances on the client, I like that idea but there are lots of things to consider with that. The benefit of doing this is that if you append a view to the DOM a second time, it doesn't have to rebuild it's own DOM, since it was done the first time. This makes rendering noticeably faster [on some browsers, not Firefox or IE it seems though, where it doesn't even matter]. The main issue with this is that all the bindings and such that Ember.View has created stay in memory, so we have to either have the developer manually manage memory, or do some fanciness in Tower, which could get complex. I tried going down that road once but it seemed it would take a lot of time and not produce that much fruit. The cost of manually \"disabling\" Ember bindings and such on \"non-visible\" (cached) views quickly becomes just as expensive as just destroying and re-creating the view.\nThe one situation where it would be useful is if the view doesn't contain much dynamic data (such as a page-specific menu that might get added/removed when the URL changes, but doesn't change it's content). In that situation it may be beneficial to cache the views.\nOverall, I agree with you that we should refactor the Tower.NetConnection interface so that it's a cleaner interface to all things user. Seems like you have a solid idea of what should happen and it only really comes down to the specific API. Let me know what you're thinking next, this is definitely a powerful component that will be very useful when simplified.\n. @edubkendo for sure, we're going to do as much as possible with streams, they are great. Just created an issue so we can discuss it further b/c there's some cool stuff.\n. Sweet, so it sounds like we're all on the same page. No view caching, and we can worry about controller caching optimizations in the future if it becomes clear there's a need.\n@TheHydroImpulse do what you think is best in terms of how you want to approach the problem. I personally like to map out the entire api and [sort of] document it, and then get it working from there (vs. trying to build the api for just one chunk, then when that's done, the next chunk, etc.). It makes it clear the big API changes that we're making, so we can easily discuss/modify/agree on them.\nFor that Tower.Manager (this is the all-things-user object), I liked the name connection, but it's not perfect. I'm not really a fan of \"Manager\" in code (Flex's fault). Manager's make MVCs feel too bulky and/or complex in my opinion, and I think it's because of their history coming from [it seems to me] Java Design Patterns. I was thinking Tower.Client but that's confusing, any term related to user is confusing (user, userAgent, agent, client, etc.), even though that's kind of what we're doing. I'm sure we'll think of something. If you really want to change it feel free, but we'll probably come back to it. A lot of the naming has to be cleaned up too (the ugliness of Tower.StoreMongodb and all that is b/c I \"flattened\" nested namespaces (Tower.Store.Mongodb). Same with Tower.Net.Connection.\nOne last thing. I recommend implementing in as small chunks as possible. I made the mistake of creating a huge development branch to merge in Ember and it took many many months to complete and nobody really knew what branch to use (and it became too much work to manage both master and development). I see this happen in a lot of projects, it's easy to take 6 months to a year to merge in such a branch.\nSo instead we should strive [it's an ideal, so it's often not practical, but it's still to be strived for] to spend a few days to a week or two and merge the stuff into master. If you make big API changes those can usually be done in a few days since they don't usually change functionality, so we can push those to master, then work on adding some specific thing, merge that in etc.\nAlthough [counter point], I personally prefer to work on many different things at once (so maybe in this case it would be the API, the emit/broadcast stuff, the jobs/queue code in the model, the controller hooks on model jobs, emitting controller hooks to sockets, etc.). The tendency might be to put those into one branch like net-refactoring and start at it. But it gets overwhelming pretty quickly and often takes too long. Instead lets aim to make each one of those into branches, and merge into the main branch. So:\ngit branch net-refactoring\ngit branch emit-broadcast-stuff\ngit branch jobs-queue-stuff\n...\nAnd just merge those into master. If you find it useful to create an intermediate branch to merge all the \"net related\" stuff into before master (kind of like staging), then try it out, but I have found it slows down my progress the larger the changes are. It's easier to just have small feature branches that you can finish in a week or less [ideal, but still worth striving for].\nNot sure if that's what you were asking lol, just some thoughts on branching :)\nReally, all this stuff would be cool to have, so it doesn't matter to me what we do first. Let me know when you get started.\nExcited!\n. Cool, sounds good.\n. Messing around with this a little. One note, you can create a socket \"client\" from the terminal (or even from within the node server process), so on the \"server\" portion of Tower there needs to be both client and server \"connection\" objects.\nImplementing basic support where if you modify data in the tower console process, it will sync to the browsers. I started with hook.io, but since that's deprecated I started with require('net') and raw TCP sockets, but then it sends streams of data and you have to create a JSON parser to handle the model syncing stuff. So that's solved by socket.io, and you can require('socket.io-client') in node and use it the same you would from the browser.\n. Haven't quite fully wrapped my mind around what you're suggesting, though I get the gist of it.\nLet me see if I'm following, basically, the goal is to have a clear set of objects and to manage them with what you're calling the Container. This would make it so you could easily swap out the objects (that are set to variables on Container). This makes things like testing easier because you can then easily swap out mock objects for actual objects (like your view rendering example, mock out the db so you're just testing the rendering, not the db too).\nYou'd also be able to set nested dependencies pretty easily (from what you're suggesting), such as:\n``` coffeescript\npseudocode\nApp.set('Router.Controller.View.Template.Response', new MockResponse)\n```\nI definitely agree that the API in Tower should be clean/clear enough that it's easy to mock out objects like this. It's not there yet but that's definitely the direction we're going.\nI think Dependency Injection / Inversion of Control are very powerful and useful patterns. They help us define clear separations in our code, and make it easy to do things like mocking (or having swappable datastores for example).\nHowever, I think Dependency Injection is something that should be hidden from the developer using the framework. There should be no docs saying \"Dependency Injection\". The reason is because, at least to me, it also makes the framework feel bulky and complicated, and brings with it that sense of Java-ness that just overcomplicates things.\nI used Dependency Injection a lot when I used Flex (mate framework, swiz framework dependency injection, etc.). Those patterns were definitely the most robust ways to write your code, and it simplified a lot in the codebase. But, it also required a lot of mental overhead - it took a lot to learn and to use, even though it simplified the code you had to write a lot. Maybe that's just me but that's the way I felt about it. I would use it for sure, but I think most people would rather use something simpler.\nThat said, Tower should strive to have the public API be super simple and not require any [as little] knowledge of design patterns and such as possible. It shouldn't require the use of Dependency Injection. Everyone has to learn MVC/MV* if they want to become good at coding, but I don't think everyone needs to learn Dependency Injection. That kind of thing.\nSo if the public API is simple I'd be down to explore dependency injection as you're describing it some more, but I think we can accomplish the same thing your suggesting without using those formal design patterns per say.\nThoughts?\n. Makes sense, yeah I like where you're going with this! It'll be very powerful when done right.\n. Nice! Will dig into it further soon (just took a glance, saw aliases).\nCheck out Ember.alias too if you haven't, it might be useful.\n. We are implementing this in 0.5.0.\n. Good point, I'll probably just have it say something like this:\n```\nPlease install git and mongodb before continuing:\nhttp://github.com/viatropos/tower/wiki/Development Environment\n```\nAlso, going to have this only run when installed globally, since it would probably be overkill printing this out when installing in every app (since the instructions are pretty much for creating an app anyway).\n. Perfect, that'll work, yeah that'd be good on the wiki.\n. This is definitely going to need more robust testing to make the \"dependency checks\" better (such as checking for sudo, or if rvm is installed then their default gemset for heroku, etc.). Eventually this stuff could turn into a separate node module (independent from tower). It should eventually be able to check cross-platform for any installed script.\nGoing to merge it now, not pushing to npm yet though, few other things to do.\n. Haha nice.\n. Hmm... okay, this I think may be because of this:\npackages/tower/server.coffee#L93\nWhat is the value of Tower.root?\nAlso, did you update the global and local versions of tower?\nnpm install tower -g\nnpm install tower # in project\nLast thing, that Tower.setRoot function first checks process.env.TOWER_ROOT, which is now set in server.js. See if setting that helps:\ntower-generator/server/generators/tower/app/templates/server.js\n. Nice @TheHydroImpulse, forgot about that line, that's where it is!\n. Also @stevenrace what is the value of $myprojectpathhere? The reason is if the project is created at the top-level, such as /my-app (and so having /my-app/node_modules, etc.), it may cause issues in the way the root is calculated (when it's missing). If not then it should be fine.\n. @edubkendo and @TheHydroImpulse If you all get a chance, would love to know if this works on your end (linux / windows). I changed a few things with the post-install hook and want to make sure it's still working. Cheers!\n. saweet\n. p.s. tower console is way better now, just added a few things:\n- cursor.toJSON(), so you can do App.Post.all().toJSON() and it will print colored JSON (from node's own console.log stuff)\n- App.Post.destroy(), update(), and create() all work on n number of records, using the synchronous option, so you can do App.Post.update(public: true).toJSON() and see the records you just updated.\n- You can press up/down to go through the repl history, even when you exit out and start the console again (it's stored in ./tmp/replHistory.coffee). Only setup for the coffee repl so far, but it's very easy to port.\n- After entering code in the repl and pressing enter, it will always resolve on the tower> prompt, whereas before you sometimes had to press enter to reset it (super annoying).\nThis readline stuff is super powerful stuff, check out the code it's by far the best documentation on it:\nhttps://github.com/joyent/node/blob/master/lib/readline.js\nCheers!\n. I'm down for this, it would be great for all the reasons you mention (allow for lazy loading modules, would make breaking up the client scripts possible, simplifying development and optimizing, etc.).\nFeel free to start a branch and start messing with it. I want to get to this at some point but will probably hold off personally until some more of the API stuff is solid (and 0.4.3 is reached, though I may break 0.4.3 into smaller parts lol, it's getting big). The sooner we start on this the better though, it's going to require modifying the way we write code in Tower to some degree I imagine.\n. Sweet, sounds good.\n. Now that is fucking awesome. Very interesting idea!!\nIt seems strange that the browser somehow doesn't have this built in, but I guess it makes sense (the 'loading everything as a string and evaluating on some user action' part).\nWe definitely should test this out and see how it works, at first glance it seems like this could be a pretty hardcore optimization.\nAlong the lines of caching/optimization, we should consider integrating the HTML5 cache manifest to the equation: http://www.html5rocks.com/en/tutorials/appcache/beginner/.\nI'd love to see a test/example of this on the tower codebase (or some other thing I can clone and test) to get a better feel for it. Have you started messing around with the lazy evaluation stuff you're describing yet?\n. This looks pretty awesome @TheHydroImpulse. I don't 100% have my head wrapped around it yet, need to spend some more time looking at the source (not sure how you're handling require('model') yet in the example just briefly looking).\nIf this works - and with that little amount of code - this will be extremely useful for any project.\nNice name too, resolve.js! Don't forget to register it to npm.\n. Awesome! Really excited to test it out.\n. New link. https://github.com/TradeMe/bootup.js\n. I wonder if this has anything to do with nvm vs npm? The reason this may be happening is because the tower source is trying to require('socket.io'), but the socket.io dependency is installed in the app, so it would be like this:\n./node_modules/socket.io\n./node_modules/tower\nbut I'm not sure if ./node_modules/tower can load a module defined above it (I've had issues with this in the past, but it works fine now for me). What I know will work is this:\n./node_modules/tower\n./node_modules/tower/node_modules/socket.io\nI would just like to avoid that b/c we'd have to add socket.io as a hard dependency for Tower which it isn't.\n. Yes @edubkendo @jeremysavoy that is the issue. If you install tower globally, then do npm link tower in your project, it's not going to work.\nThe reason is because when you do npm install tower -g to install tower globally, it only installs the few modules required for the tower new <app-name>, and a few other tower commands. It doesn't need express, socket.io, and a lot of other stuff because, essentially, the tower command just needs to generate an app. Then you install tower in your app, and it includes many more modules (express, socket.io, etc.) required to actually run the server and all that.\nHowever, if you clone the tower repo, then npm link that globally, then you can npm link tower in your app. This is because when you clone the tower repo and run npm install, it's going to install everything required for testing tower. So when you link it globally, then to your app, you already have every possible module tower will need. But if you try to link the global version of tower you installed with npm install tower -g, it won't have all those extra modules installed.\nTry this instead:\nnpm install tower -g\ntower new app\ncd app\nnpm install\nIf you're working off the tower repo though, you can npm link it:\n``\ngit clone https://github.com/viatropos/tower.git\ncd tower\nnpm install # will install **everything** for testing\nmake # compile coffee-script's and such, ormake watch` for persistent compilation\nnpm link # makes it global\nthen in some other directory\ntower new app\ncd app\nnpm link tower # link to github repo version of tower\nnpm install\n``\n. This may be kind of confusing, so I might just get rid of that installation optimization and just install everything everywhere. We'll see.\n. Oh cool no worries. Your tutorial has been super helpful so far. Cheers.\n. For theusers/indexissue, check theTower.View.cacheandEmber.TEMPLATES` objects and copy/paste the keys into a comment here, the paths may be using windows vs. mac in one place:\njavascript\nconsole.log(_.keys(Tower.View.cache), _.keys(Ember.TEMPLATES));\n. The way templates are being compiled currently, they are just being written to 1 file:\napp/public/javascripts/templates.js\nThat occurs within this grunt helper:\npackages/tower-tasks/tasks/index.coffee#L15\nInside the generated templates.js you should find the compiled templates, so it looks something like this:\n``` javascript\nTower.View.cache = {\n  // lots of other templates...\n  'posts/index': Ember.Handlebars.compile('...'),\n  'welcome': Ember.Handlebars.compile('Welcome to Tower.js')\n};\n_.extend(Ember.TEMPLATES, Tower.View.cache);\n```\nThe complete templates.js, from a newly generated app with a scaffolded Post model looks like this:\nhttps://gist.github.com/3854729\nWhat do you have inside that file? Copy/paste the whole thing into a gist and link it here, that would help. Thanks!\n. Also paste the output from cake watch, this is mine:\n```\n$ cake watch\nDefault database not set, using Memory store\nRunning \"copy:js\" (copy) task\nCopied 35 files.\nRunning \"copy:css\" (copy) task\nCopied 2 files.\nRunning \"coffee:all\" (coffee) task\nRunning \"less:bootstrap\" (less) task\nFile public/stylesheets/vendor/stylesheets/bootstrap/bootstrap.css created.\nRunning \"stylus:compile\" (stylus) task\nFile public/stylesheets/app/stylesheets/client/application.css created.\nRunning \"templates:all\" (templates) task\nRunning \"watch\" task\nWaiting...\n``\n. That's probably it then, the value ofTower.pathSeparatorEscapedon windows should be the string'\\\\', which when passed intonew RegExp` in packages/tower-tasks/tasks/index.coffee#L22-35 should be:\n``` coffeescript\npathSeparatorEscaped = Tower.pathSeparatorEscaped\ntemplatePath = new RegExp(\"app#{pathSeparatorEscaped}templates#{pathSeparatorEscaped}.+.coffee$\")\non mac with pathSeparatorEscaped == '/'\nconsole.log(templatePath)\n/app/templates/.+.coffee$/\non windows with pathSeparatorEscaped == '\\\\'\n/app\\templates\\.+.coffee$/\n```\nWhat are the values there if you log result and the patterns just after that for loop?\n``` coffeescript\njust after loop\nconsole.log(result)\nconsole.log(templatePath, layoutPath, namePattern)\n```\nIt could also be packages/tower-tasks/tasks/index.coffee#L19:\n``` coffeescript\nmaybe grunt's file.expand only understands / for paths?\nfiles   = grunt.file.expand([\"app#{_path.sep}templates#{_path.sep}*#{_path.sep}.coffee\"])\n```\nWhat is the value of console.log(files) after that line?\n. That's it then, grunt returns nice path's for us :), didn't realize that. So we don't need to use the path separator here, so templatePath should be /app\\/templates\\/.+.coffee$/ for both windows and mac.\nWill fix in a bit unless y'all get to it first.\n. Not sure what you mean?\n. That could be because it was initially doing:\ngrunt watch --config ./grunt.coffee\nbut from my knowledge ./<path> doesn't work on windows (prefix with ./). So it's been changed to\ngrunt watch --config /full/path/to/grunt.coffee\nTry replacing your cakefile with the new one here and let me know how that goes:\npackages/tower-generator/server/generators/tower/app/templates/cake\n. @pashaie also, what's the value of grunt --version, mine is:\n$ grunt --version\ngrunt v0.3.15\nIt could also be an issue with grunt versions.\n. @TheHydroImpulse does the full path change (copy/pasting the new Cakefile) work for you on windows?\n. That example (and the docs on the site) are out of date (will be updated soon). That functionality is already included in the model so you don't need to include it directly.\nDoes that solve your issue? If not, paste your model code, that will help. Thanks!\n. As a less-robust solution for now, does the last commit work for you?\n. @yagooar It looks like that generated code for io needs to be delayed until it's defined:\nhttps://github.com/viatropos/tower/blob/4ff0b9d3a08faf3c8173759a959d3977ea50f7e2/packages/tower-application/server/application.coffee#L186\nTry waiting until the next tick:\ncoffeescript\nApp.configure ->\n  # ...\n  # For \"web sockets\" on heroku:\n  process.nextTick ->\n    App.io.configure 'production', ->\n      App.io.set('transports', ['xhr-polling'])\nHeroku doesn't support web sockets so all this is doing is telling socket.io to fall back to ajax polling (https://devcenter.heroku.com/articles/using-socket-io-with-node-js-on-heroku). Amazon is probably the best place (and nodejitsu if it's public yet) to really test out web sockets.\n. Yeah there is a lot of room to improve the way tests are written in Tower's src, feel free to refactor it so it becomes more useable, I will definitely merge pull requests for this stuff.\nA few notes. We should break up tests into as small of units as possible, but sometimes it's clearest/simpler to group a couple assertions into a single test (Rails' test suite has 2-3 assertions per test often).\nAlso, you can run single tests at a time by matching patterns in the test string:\nmocha $(find test -name \"*someTest.coffee\") -g \"some pattern\"\nThat helps at times. But refactoring the tests so you don't have to comment out assertions while you're fixing something is a great idea, let me know if you have any questions.\n. I've started porting the test suite to JavaScript:\nhttps://github.com/viatropos/tower/blob/tests2js/test/cases/model/shared/attributesTest.js\nEventually the source code will be in JavaScript too.\nThe only thing left in that tests2js branch is creating the JavaScript API for the models/controllers, something like the stuff in this gist:\nhttps://gist.github.com/8e78b21b37d21f43c495#file_test.js\nComing along! With pure JS we can sneak in many more optimizations. If anyone wants to help convert to JS (basically just copy the generated JS and clean it up a bit) feel free. Will take any-sized pull requests!\n. Didn't think that was possible to get 100% haha, nice! Yeah, I'm liking the Ember object / JS API better than the CS API, even though the CS API is \"cleaner\" (or more readable). It just feels more powerful.\nI'm going to get the JS API for the model working on the tests2js branch, but I've also started on a src2js branch. Only converted one file so far (slightly modified the generated coffeescript file, will cleanup more):\nhttps://github.com/viatropos/tower/blob/src2js/packages/tower/server.js\nThat src2js branch also has a better grunt file, which will copy any .js from packages to lib.\n. What version of node are you using? This is I think b/c either node 0.6 or 0.8 moved path.existsSync to fs.existsSync, so if you're using an old version of node then fs.existsSync will be broken.\nTry upgrading your node version and let me know if that fixes it.\n. I think the directions may be off. The watcher doesn't currently notice when files are created I don't think (this is an issue with grunt, but grunt 0.4.0 which is going to be released soon fixes this).\nIf you run the scaffold generator, and then run cake watch, does it work then?\n. On the road, will get more into this with u in a bit. Check these things though:\n- node version\n- coffeescript version (global and local)\n- tower version\n- grunt version (global, maybe local but I don't think were using local grunt)\n- OS version\nThis seems like a coffeescript compilation problem. Try to npm install it in your app. Also, are you using a linked tower (via npm link tower where your linking a locally cloned version of the tower repo from github) or did you npm install it?\nAlso make sure both the local and global versions of tower are the same, and grunt should be 0.3.x, not 0.4.x (they may have updated in which case I will need to update tower.\nLet me know if any luck!\n. Hmm... everything looks fine.\nI am using:\n- coffee-script 1.3.3 (it's now 1.4.0 which you're using). Upgrading mine didn't change anything, still works.\n- grunt 0.3.16\n- node 0.8.2\nNone of these things should affect it.\nSo it looks like the original error this issue was for is because the App.User model doesn't exist. This may be happening because the controller code is being required before the model code. I'd make sure the models are loaded before the controller just so we can scratch this off the list, but I don't think this is the issue.\nThe error occurs in the @scope method which tries to get the App.User class to setup data syncing stuff. But if the model isn't yet required, that could cause the error.\nAnother thing it could be... Try logging the value of @metadata() in the controller on startup:\n``` coffeescript\napp/controllers/server/usersController.coffee\nchange this:\nclass App.UsersController extends App.Application\n  @scope 'all'\nto this:\nclass App.UsersController extends App.Application\nconsole.log App.UsersController.metadata()\n```\nAlso do the same thing in the client controller, just to make sure the client controller isn't being required (it shouldn't be being required at all):\n``` coffeescript\napp/controllers/client/usersController.coffee\nclass App.UsersController extends App.Application\nconsole.log App.UsersController.metadata()\n```\nIt could be that the value of metadata().resourceType is blank. This is what App.UsersController.metadata() should look like (params/callback may be different, but the strings are what are important):\njavascript\n{ className: 'UsersController',\n  resourceName: 'user',\n  resourceType: 'User',\n  collectionName: 'users',\n  params: {},\n  renderers: {},\n  mimes: { json: {}, html: {} },\n  callbacks: { action: { before: [Object], after: [] } },\n  helpers: [],\n  belongsTo: [],\n  subscriptions: [],\n  layout: 'application',\n  scopes: {},\n  scopeNames: [] }\nIf metadata().resourceType is different, I think this is because of a coffee-script compilation problem (I have run into your issue before). To test that the coffee-script version of the file is correct... OH! I think I know what it is now.\nTower has coffee-script extensions that basically allow coffee-script's class declaration to be translated to Ember's class system (one of these other issues goes into detail on how/why this is necessary).\nThe problem you are facing may be because coffee-script is installed in your app directly and in tower's source. This is a problem because in the tower module, it is overriding its own coffee-script with the extensions, but that may be a different coffee-script than what your app is using:\n./node_modules/coffee-script\n./node_modules/tower/node_modules/coffee-script\nIf your app calls require('coffee-script') anywhere, it will cause NPM to use the ./node_modules/coffee-script version instead of the ./node_modules/tower/node_modules/coffee-script one. If that happens then in tower/blob/master/coffee-inheritance.js, which is required from tower/blob/master/index.js, will only be applied to the coffee-script used in ./node_modules/tower, but not in your app. However, if your app doesn't require coffee-script directly, then the coffee-script used in Tower will be used everywhere. Hope that's not too confusing.\nAnyway, try removing the coffee-script module in your app (delete ./node_modules/coffee-script). Let me know how that goes.\n. Building off @TheHydroImpulse's comment, you can just not use client-side routing and every route will hit the server and you can have it render plain HTML the same way Rails would. In the future we're going to implement some sort of way to get both client-side views/routing (dynamic pages) and SEO/static pages, but we're going to have to work with Ember on that one. For now though, you can get SEO benefits by rendering static HTML.\n. Thanks for posting. This hasn't been fully implemented yet, you are welcome to work on it and send a pull request if you'd like!\nThis should first be implemented using the server-side tableFor code, but should also be implemented in Ember on the client using the Ember.View in some way (maybe a mixin?).\n. This is a bug that has to do with the coffee-script extensions in ./coffee-inheritance.js. We just need to change this (coffee-script output for an App.Address model):\n``` javascript\nApp.Address = (function(_super) {\n  // since this is being declared as a local variable, uglify.js will minify it,\n  // making it App.r or some random shortened name, vs. App.Address.\n  var Address;\nfunction Address() {\n    return Address.super.constructor.apply(this, arguments);\n  }\nAddress = __extends(Address, _super);\n// ...\nreturn Address;\n})(Tower.Model);\n```\nIf you would like to fix this let me know, I'll do what I can to help. Won't be able to get to this for a bit (workaround at the bottom of this post).\nOne approach is to change this line:\njavascript\nAddress = __extends(Address, _super);\nto something like this:\njavascript\nAddress = __extends('Address', _super);\nThat way it passes the string 'Address' to __extend, and we can use that to set the class name. The way we're hooking into this is found here:\npackages/tower-support/shared/class.coffee#L8-12\ncoffeescript\n__extend: (child) ->\n  object = Ember.Object.extend.apply @\n  object.__name__ = child.name\n  @extended.call(object) if @extended\n  object\nBy passing a string instead of the result of var Address into that function, the __extend method above would just do this:\ncoffeescript\n__extend: (name) ->\n  object = Ember.Object.extend.apply @\n  object.__name__ = name\n  @extended.call(object) if @extended\n  object\nTo make this change, we have to modify the ./coffee-inheritance.js file so it passes a string, like above:\njavascript\nAddress = __extends('Address', _super);\nI haven't dug into the coffeescript compiler that hardcore so haven't been able to implement this. Would love help.\n\nNote: A temporary workaround is to set the @__name__ property on your model, like this:\n\ncoffeescript\nclass App.Address extends Tower.Model\n  @__name__: 'Address'\n. @edubkendo Ideally I'd think it would be useful to solve the custom coffee-script stuff (maybe using CoffeeScriptRedux like you mentioned). If we can get it to work just as we originally desired (with custom overrides for extends for Ember, etc.) then if anyone who really loved CS and it's class declaration syntax used tower, they would be greeted with a super complete API.\nI would like to support those things, but it would be purely just to round out the experience with the API for CS users. This kind of stuff will really just be extras to the API; everything will still default to JS/CS like you're saying.\nSo I personally probably wont work on this \"CS API stuff\" in the short term, but it's cool if anyone wants to make a pull request for this. I will still be working on the JS API (which will make updates to the CS api too).\n. Just taking a brief look at this, it looks like what you're doing is correct but this may not be fully implemented in Tower yet.\n. nice, thanks!\n. If you want to try making a simple node wrapper to this ruby gem, the watcher will become seriously optimized:\nhttps://github.com/guard/listen\nI was getting <2% CPU after initialization.\nMaybe we can say, \"if you want better performance with the watcher, then gem install listen if you have ruby installed.\" Then we just check if we can spawn a simple ruby script that just streams the output from the listen gem. This is all it really takes:\n- run the ruby script from node.js: https://github.com/viatropos/design.io/blob/master/src/design.io/listener/mac.coffee#L7-L22\n- and the ruby script looks like this: https://github.com/viatropos/design.io/blob/master/lib/design.io/listener/mac.rb\nSo for the listen gem, the ruby script would probably just be like:\n``` ruby\nrequire 'rubygems'\nrequire 'listen'\nrequire 'json'\nSTDOUT.sync = true\nio          = STDOUT\ndirectory   = ARGV[0] || Dir.pwd\nlatency     = ARGV[1] || 0.2\nlistener = Listen.to(directory)\nlistener.latency(latency)\nlistener.change do |modified, added, removed|\n  # just parse this json stream in node.\n  io.write(JSON.stringify('modified' => modified, 'added' => added, 'removed' => removed))\nend\nlistener.start\n```\nIf anyone's interested in getting this going let me know.\n. What would be even more awesome is if we wrapped this in a top-level API for Tower, so you could watch files in an optimized way anywhere you want, such as:\ncoffeescript\nTower.watch process.cwd(), (files) ->\n  files.changed # ['package.json']\n  files.added # []\n  files.removed # []\nwhere Tower.watch would try to use this custom listen wrapper if possible, otherwise falling back to fs.watch (or better, gaze).\n. @edubkendo and @tremby if you gem install listen, which uses rb-inotify (https://github.com/guard/listen/blob/master/lib/listen/adapters/linux.rb), and run the following to watch the entire directory tree, is it still using the same (large) amount of CPU?\n``` ruby\nfile named watch.rb\nrequire 'rubygems'\nrequire 'listen'\nlistener = Listen.to(Dir.pwd)\nlistener = listener.latency(0.2)\nlistener = listener.change do |modified, added, removed|\n  puts modified, added, removed\nend\nlistener.start\n```\nIf you add that to the root of your tower repo, name it watch.rb, and run:\nruby watch.rb\nand then change some nested files, you should see the names of the changed files in the terminal.\nWhen you do this, what does your CPU usage look like?\nMy CPU, on a MacBook Pro upgraded to 10.8.2 with Xcode 4.5.2 installed, is only at <1%. The best part is, I can change any file in the directory tree and will get notified; it doesn't seem to matter how many files there are. Though, this listen gem is computing a fingerprint from the file if the mtime hasn't changed, which can be kind of slow on very large files (more than a few megabytes, which isn't relevant when it comes to watching source code files, only PDFs, data-dumps, images, etc.).\nOn a Mac this watch method is WAY better than what Node.js does. Node's watcher on the Mac uses kqueue, which gives you file-level notifications. The alternative is FSEvent which gives you directory-level notifications, on entire trees of files. For kqueue, you have to watch each individual file, for FSEvent, only a single directory.\nOn Linux though, Node.js uses inotify, and this listen rubygem uses it also. So there may be no benefit there on Linux, but I'm interested to see if you guys see any performance improvement. If so, I'll make a watcher module for Node that wraps this gem, otherwise I'll just do something simpler for Mac-only.\nSome relevant node.js issues on their watcher:\n- https://github.com/joyent/node/issues/1986\n- https://github.com/joyent/node/issues/2023\n- https://github.com/joyent/node/issues/2062\n- https://github.com/thibaudgg/rb-fsevent/issues/38\n. @TheHydroImpulse good to know. So if you find out more about which gem/module is the most optimized for the different operating systems (windows, linux, mac), definitely post a link. Over time perhaps we can compile a list of the best/fastest watchers for each OS and wrap them up for node.\n- https://github.com/thibaudgg/rb-fsevent is the fastest on a Mac. We could wrap the raw C binary @ttilley created (the fsevent_watch command https://github.com/thibaudgg/rb-fsevent/issues/38#issuecomment-10925351).\n- https://github.com/guard/listen wraps rb-fsevent, and has linux/windows adapters, but I only know rb-fsevent is the best for Mac. This listen gem also has a nice bit of code wrapping rb-fsevent so it gives you the exact file that changed, whereas FSEvent only tells you of the directory.\n. Yeah that sounds good. Ideally there is a general module (like https://github.com/shama/gaze, which is a good start for node) that anyone can use for better, intuitive, fast file watching support in node. Then we wrap that in Tower so you can do:\njavascript\nTower.watch('./**/*.js', function(files) {\n  files.changed\n  files.added\n  files.removed\n});\nThe API could also be similar to guard/listen:\njavascript\nTower.watch('./**/*.js')\n  .ignore(/node_modules/)\n  .filter(/Test\\.js$/)\n  .latency(0.2)\n  .forcePolling(true)\n  .pollingFallbackMessage(false)\n  .on('changed', function(files) { })\n  .on('removed', function(files) { })\n  .on('added', function(files) { })\n  .start();\n...where essentially Tower.watch() is just returning something like a stream.\nI'll be messing with rb-fsevent and the executable (https://github.com/thibaudgg/rb-fsevent/issues/38#issuecomment-10925351) to speed up node development for Tower - and to stop killing my fan, which now has to be replaced :p\n. How about this:\n``` coffeescript\nclass App.Address extends Tower.Model\n  @validates 'state', in: ['ON', ...], if: 'countryIsCA'\ncountryIsCA: ->\n    @get('country') == 'CA'\n```\nor a lambda/anonymous version:\ncoffeescript\nclass App.Address extends Tower.Model\n  @validates 'state', in: ['ON', ...], if: -> @get('country') == 'CA'\nand maybe even, if in is an array of objects, then this:\ncoffeescript\nclass App.Address extends Tower.Model\n  @validates 'state', in: [\n      value: ['ON', ...], if: 'countryIsCA'\n    , value: ['NY', ...], if: 'countryIsUS'\n  ]\nor this (where if is the key):\ncoffeescript\nclass App.Address extends Tower.Model\n  @validates 'state', in:\n    countryIsCA: ['ON', ...]\n    countryIsUS: ['NY', ...]\nOr maybe having that sort of DSL is overkill, and just doing it manually is better like what you're suggesting (the more I think about it, it's probably easier this way):\ncoffeescript\nclass App.Address extends Tower.Model\n  @validates 'state', in: ->\n    if @get('country') == 'CA'\n      ['ON', 'QC', 'NS', 'NB', 'MB', 'BC', 'PE', 'SK', 'AB', 'NL', 'NT', 'YT', 'NU']\n    else\n      null\n. Thanks!\n. We're working on the new site, very excited about it!\n. I haven't used vhosts much yet, but server-side Tower is built on Express, and they have a simple API for doing this:\nhttp://stackoverflow.com/questions/5791260/how-can-i-configure-multiple-sub-domains-in-express-js-or-connect-js\nIn Tower you can access the \"express\" server via App.app (and the http server itself via App.server, going to clean this api up in the future). You can add the vhost functionality in app/config/server/bootstrap.coffee for now, something like:\n``` coffeescript\napp/config/server/bootstrap.coffee\nApp.configure ->\n  # ...\n  @use('vhost', 'm.mysite.com', require('/path/to/m').app)\n  @use('vhost', 'sync.mysite.com', require('/path/to/sync').app)\n  # ...\n  @use Tower.MiddlewareRouter\n```\nThe @use method just delegates to the express server:\npackages/tower-application/server/application.coffee#L114-L123\nIf you want to manipulate the express server directly, you could do that like this:\ncoffeescript\nApp.configure ->\n  express = @app # or App.server, same thing\n  # ...\nLet me know if you get vhosts running with this, would be nice to add to the wiki.\nIs this what you're asking?\n. Cool, so all of your sub-apps are going to be tower apps as well?\nThere might be a couple little issues with this to think through:\n1. How the sub apps' client-side code gets loaded.\n2. How the multiple App objects related to each other.\nQuestion, do the sub apps run in a totally separate contexts/vm's, or are they all sharing the same global context?\nIf they're sharing the global context, then we may have to modify the App object, which is an Ember.Application object, which only allows one instance to be created. Let me know if this needs to be done. If not, then each sub-app would have it's own App object.\nAlso, the sub apps should export the App, which they aren't doing right now. That is defined in app/config/shared/application.coffee, so maybe changing it to this:\ncoffeescript\nglobal.App = module.exports = Tower.Application.create()\nIf you did that, then your require('/path/to/m/tower/app').app would work.\nI'll have to look more into sub-apps/vhosts, but if they can all share the same App instance, that would be ideal. Otherwise we'll have to discuss naming conventions and whatnot for the subapps, which might mean starting to implement something like railties in Tower.\nThoughts?\n. Awesome, thanks!\n. The defaults work by first checking if the field is undefined, and if so, it will call the function:\npackages/tower-model/shared/attribute.coffee#L117-L119, specifically:\n``` coffeescript\nwhen you call record.get('x'), and it's undefined and you've defined a default value...\n...\nvalue = @getAttribute(key)\nvalue = field.defaultValue(@) if value == undefined\nfield.decode(value, @)\n...\n```\nThe way you defined the default is pretty much correct, the only thing is that type: 'Hash' is a ruby-like hash, or simple JavaScript object, such as {key: 'value', key2: 'value2'} (for more info on JavaScript hash vs. object, see this: underscore/test/objects.js#L421-L449). So I would just change it to type: 'String'. Also, that crypto module only works on the server, so you might also need to check if Tower.isServer first.\nAlso, Tower is adding many useful/rails-like helpers to underscore, such as date helpers, so you can use those too (Time.now doesn't exist in Tower, but _.now does, more here: packages/tower-support/shared/format.coffee#L69-L121. Sidenote: currently, _.now is just new Date, so why not just use new Date? The reason is I'm thinking of adding functionality so that, if you wanted to run your app in the past (maybe you want to generate fake data where createdAt etc. is in the past), whenever you called _.now() it will be \"now\" in the past's frame of reference. You can't easily do that if you have new Date all through your code.\nFinally, instead of checking @isNew, if all you care about is if secret is undefined, then you can simplify the default function.\nSo this is the end result:\n``` coffeescript\nclass App.Application extends Tower.Model\n  @field 'secret', type: 'String', default: -> @doHash()\n  @field 'name', type: 'String'\n@timestamps()\ndoHash: ->\n    crypto('md5').update(_.now(), 'utf-8', 'hex') if Tower.isServer\n```\nLet me know if that works.\n. To load external libs, you can just install the node module through npm and require it:\ncoffeescript\ndoHash: ->\n  require('crypto')('md5').update(_.now(), 'utf-8', 'hex') if Tower.isServer\nNode uses CommonJS which just asks that you require(moduleName) any module you want.\nAlso, Tower lazy-loads a couple common modules (packages/tower/server.coffee#L24-L41), which you can access like this\ncoffeescript\ncrypto = Tower.module('crypto')\nThere are two main reasons for this approach:\n1. So you don't have to manually require the module at the top of your model/controller/etc files, which will slow down server startup the more modules your whole app requires at once.\n2. So the browser can also require modules (until we integrate a more robust solution).\nSo, in your specific case, you can just do this:\ncoffeescript\ndoHash: ->\n  Tower.module('crypto')('md5').update(_.now(), 'utf-8', 'hex') if Tower.isServer\nOne final note\nSince this code of yours is dealing specifically with server-side functionality, and since it is relating to security, it's up to you to prevent this code from being compiled to the ./public directory - where anyone can view it.\nHere's the recommended approach for doing that.\n1. Put any server-side code into the server folder for your specific app/* folder. If you're creating a server-side-only model, then you can put it in app/models/server/myModel.coffee. You can also put in model \"mixins\" or helpers in that folder too, but, similar to how you have in Rails app/helpers which you can include into app/controllers, I like the idea of having \"mixins\" in app/concerns which you include in app/models. Maybe there is a better approach to this, open to ideas. The reason you'd want to do this is, the files in app/concerns are loaded before app/models, so it just works. If you put mixins into app/models, you would have to make sure your mixins are manually required before the model.\n2. Include that mixin in your model code, which in your case is app/models/shared/application.coffee (or could also just be app/models/application.coffee).\n``` coffeescript\napp/concerns/server/application/secretsMixin.coffee\n\nor, a perhaps simpler approach,\nbut you have to make sure the files are loaded in the right order:\n\napp/models/server/applicationSecretsMixin.coffee\nApp.ApplicationSecretsMixin =\n  # included is a special method that is called when the mixin is included in a class. \n  included: ->\n    @field 'secret', type: 'String', default: -> @doHash()\ndoHash: ->\n    Tower.module('crypto')('md5').update(_.now(), 'utf-8', 'hex')\n```\n``` coffeescript\napp/models/application.coffee\nclass App.Application extends Tower.Model\n  @include App.ApplicationSecretsMixin if Tower.isServer\n@field 'name', type: 'String'\n@timestamps()\n```\nBy separating your code like this, your crypto code won't be compiled to the ./public folder, so it's secure. FYI, anything in a app/*/server folder will not be compiled to ./public.\nAlso one last note FYI. An additional benefit of placing \"model mixin code\" into app/concerns/<modelName>/someMixin.coffee is once you get into that pattern, you start really being able to modularize your code well, and minimize the amount of code the client gets. For example, if you are building an app that publishes to Facebook/Twitter/etc., you may want to create a few functions for each server on your model (maybe it's an App.User model, and they've authenticated via OAuth to these providers). So you could do this:\n``` coffeescript\napp/models/user.coffee\nclass App.User extends Tower.Model\n  if Tower.isServer\n    @include App.UserFacebookMixin\n    @include App.UserTwitterMixin\n    @include App.UserGitHubMixin\n    # etc.\n# other client/server shared code below\n```\n``` coffeescript\napp/concerns/user/facebookMixin.coffee\nApp.UserFacebookMixin =\n  postToFacebook: (post, callback) ->\n    # do some facebook api thing here\napp/concerns/user/twitterMixin.coffee\nApp.UserTwitterMixin =\n  postToTwitter: (post, callback) ->\n    # do some facebook api thing here\n```\nHope that helps.\n. Oh one other note in terms of security. Make sure to add that secret property to the set of protected attributes, so people can't pass a value in through a request. Not sure if you're familiar with this so this is just for reference (see the Rails Security Guide's section on mass assignment.\nThis is how GitHub got hacked.\nBasically, people can submit anything they want to your app, so they might send params that get parsed into the @params object, maybe they send this:\n``` coffeescript\nconsole.log(@params)\n=> {\"application\":{\"name\":\"My App\",\"secret\":\"hacked-secret\"}}\nApp.Application.create(@params)\n```\nSo they were able to create a record with their own secret.\nTo avoid, this, all you need is:\n``` coffeescript\nclass App.Application extends Tower.Model\n  @field 'secret', type: 'String', default: -> @doHash()\n@protected 'secret'\n```\nNow, if that attribute is passed into App.Application.create(secret: 'asdf') (or App.Application.build or record.updateAttributes), it will just get deleted from the hash/object.\nTo set protected attributes, you just have to set it manually:\ncoffeescript\nclass App.ApplicationsController extends Tower.Controller\n  create: ->\n    record = App.Application.build(@params.application)\n    # and if you wanted to set the secret manually:\n    record.set('secret', record.doSecret())\nFinally, you can assign \"roles\" to protected attributes, which allows you to override them. So say any admin can include secret in their params hash, but by default nobody can. You can do that with this:\ncoffeescript\nApp.Application.build({secret: 'asdf'}, as: 'admin')\nSee that mass assignment section in the Rails Security Guide for more details if you're interested, it's all mostly implemented in Tower. Also the tests show more examples:\ntest/cases/model/shared/massAssignmentTest.coffee\n. @1xizt you're right, MongoDB is great but it's not acid compliant for ecommerce type transactions. Glad to hear you're enjoying coffeescript :)\nIf you'd like to take a swing at making a SQL adapter for Tower, let me know. It should be easy to do, the main thing that needs to be done is parsing the SQL command strings. But I think that's already been done somewhere in the node community, so all you'd really need to do is plugin their parser, and plug that into Tower. I'll work with you on that if you're interested, let me know!\nHere's some notes on how to create a custom store:\nhttps://github.com/viatropos/tower/wiki/Creating-a-Custom-Store-in-Tower\nYou can tinker with them here (I've created the classes w/o implementation so far):\nhttps://github.com/viatropos/tower/tree/master/packages/tower-store/server\nAs a side note, having a SQL adapter would also make it possible to use SQLite in the browser, which would be cool for client-side-only demos.\nSome examples:\n- https://github.com/kripken/sql.js\n- https://github.com/hiddentao/squel (http://hiddentao.github.com/squel/)\n- https://github.com/forward/sql-parser\n- pegjs, you could probably build a solid SQL parser pretty quickly with this: http://pegjs.majda.cz/online (they built a javascript parser in it! https://github.com/dmajda/pegjs/blob/master/examples/javascript.pegjs)\n- https://github.com/1602/jugglingdb/blob/master/lib/sql.js\nIf you find any better parsers/examples, please post.\n. Awesome that would be great! Sequelize looks perfect. Looking at the package.json it looks like it loads node-mysql and can load the popular sqlite and postgres node libs as well.\nIt seems that you could combine sequelize with squel (for building the SQL query strings), and then wrap each db with with a Tower.MysqlStore, Tower.PostgresStore, etc.\nLooking quickly at node-mysql and sequelize, it doesn't seem there is a clean way to build the SQL string, which is why I recommended squel. But if sequelize does support it, then you would only need that.\nTo connect this with tower, you would just create a custom store (from that wiki link above). See the memory and mongodb stores in the tower source code for examples.\nThe real meat comes in with the cursor, which is passed in as the first argument to find, insert, update, destroy, count, and exists. The cursor is a Tower.ModelCursor instance. This is the return value from common API calls such as:\ncoffeescript\nApp.User.all()\nApp.User.where(active: true).count()\nBasically, when you call App.Model.where or any other \"chainable scope\" methods (borrowing the Rails term), it internally keeps a \"cursor\" object that contains all of the query parameters you pass into where/order/page/etc. Once you call all, find, create, update, destroy, count, exists on that \"chainable scope\", it \"compiles\" the query parameters into the cursor, and passes that to the specific database's (Tower.Store instance) corresponding method.\nNote, the Tower.ModelScope api (which just wraps the Tower.ModelCursor API, it's pretty much just there for the DSL), adds the additional method all, and uses create instead of insert. It also has first and last. The Tower.Store only has find, insert, update, destroy, count, and exists. This is because all, find, first, and last on the Tower.ModelCursor are just sugar syntax; for example, first just adds limit: 1 to the cursor just before passing it to the Tower.Store.\nSo all you need to know is that, in your custom store, the first argument to those 6 methods is a Tower.ModelCursor. From that, you can call cursor.toParams() and it will compile it to a simple hash such as:\njavascript\n{\n  sort: [['createdAt', 'desc']],\n  page: 2,\n  conditions: {\n    firstName: 'John',\n    active: true,\n    createdAt: {'>=': Date(Nov 19, 2012)}\n  },\n  limit: 20\n}\nSee the Tower.MongodbStoreSerializer for examples of how to manipulate the cursor's params. Basically, you would just go through the cursor.toParams().conditions hash, and pass it to the squel query string builder.\n``` javascript\nstore = this;\nsquel.select()\n  .from(_.camelize(store.className), \"*\")\n  .where(prop, val)\n```\nThen pass that query string to sequelize!\nSo (a simple/pseudo) Tower.MysqlStore#find might look like this:\n``` coffeescript\nclass Tower.MysqlStore extends Tower.Store\n  find: (cursor, callback) ->\n    params = cursor.toParams()\n    conditions = params.conditions\nqueryString = require('squel').where(conditions)\n\nrequire('sequelize').execute queryString, (error, rows) =>\n  for row, i in rows\n    rows[i] = @serializeModel(row) # constructs model instance, see superclass\n\n  callback(null, rows)\n\n```\nLet me know if you have any questions, I'll be here.\n. Damn @TheHydroImpulse, making serious progress, pretty sweet. Any chance you can post a list of the different events/states/phases/etc. that we would want to provide dependency load hooks for? That would help finalize it.\nRandom thoughts...\nMy first impression is that having this sort of API would definitely be powerful for:\n- hooking your module/package into the load process\n- lazy loading your package's internal dependencies (using that string/eval bit you posted if possible!)\n- having a consistent/easy way for defining both client and server dependencies\nNot sure exactly what you mean when talking about concatenating/production/etc., but I think all of that should be done with Grunt from now on (moving the tower-application/server/assets.coffee code to grunt for example). Development should load raw files, but compiled languages like coffeescript/stylus/etc. should be compiled to the target language first, even in development (until error handling is exact). But the compiled coffeescript should stay in individual files during development (direct 1-1 map), only concatenating in production.\nI'm also thinking we don't want to create a package management framework that's separate from NPM. What advantages does Meteor's package management system have over NPM, or rather, what makes it awesome from your experience? (I haven't used it).\nThe main thing is, developers should be able to create a server-side only, client-side only, or server-and-client module/plugin using the default tools they're used to (npm on the server, nothing, or jQuery, on the client). Then essentially this package API would make integration more powerful, something like that.\nI like the way you've described it:\n\na specific API to communicate and modify the core and flow of the application\n\nNPM can't really do that. So I'm wondering what your thoughts are of how this would play alongside with NPM.\nThe last thing is I'm starting to move to simpler/shorter APIs wherever possible. Specifically I'm thinking:\n- Minimize the use of methods on namespaces. Only use a method on a namespace if the method is very specific and only used on that class/object, such as Tower.Model.field (which I'm even thinking should be simplified to just Tower.field, or at least aliased).\n- Make the methods chainable wherever possible. So you could do this.addFile('client.js', 'client').addFile('server.js', 'server')...\nSo instead of Tower.Ready.x, just Tower.ready. I'm doing this with validators, operators, modifiers, serializers, and a few other things right now in getting this better model api going. I'll be jotting notes down for the new API here (though it's just notes, only some of which has been implemented: https://gist.github.com/b6c811c7a27ee944317d). The goal is to merge express and ember api's where possible.\nAlso might be possible, where the Tower.Ready.new and Tower.Ready.is both run the callback Tower.ready based on the state of the application. I think jQuery does this - so if you lazy load a jQuery plugin, and it has $(document).ready, it will still execute.\nVery excited to see this coming along.\nThoughts?\n. Compiling Tower's client-side source code \nI get that rebuilding the entire dist/tower.js for the client is slow, but kind of confused from the first part about the tmp file system. If the goal is to speed up development, one other approach would be to make it so the tower-<module-name>/client.coffee file only has a bunch of require './x.coffee', and then use that to create a set of <script> tags using grunt. Then we just load all of the tower files individually on the client during development; there won't be any require calls b/c grunt will convert them to <script> for the browser. That would be simple and would speed things up. Maybe a short term solution.\nThe copy:js task should only be run once, when you first start running the watcher for developing (or contributing to) the tower source (in coffeescript). But once the watcher is running (make watch), the copy:js command shouldn't run again. So that 5s lag shouldn't be an issue if I'm understanding correctly, but if you can speed it up that'd be cool too.\nAlso not sure why the grunt watch task takes 5 seconds to run every time you save a file, that definitely shouldn't be happening. It should, however, be the case if you are talking \"recompiling the dist/tower.js file for the client every time you change any file in the tower src\", because it's concatenating all the files from scratch and then compiling the coffeescript to javascript...\nIn the end, at least for the simple solution to making development of the tower client-side src faster, I think the following should work:\n- make tower-<module>/client.coffee only contain require statements\n- compile those require statements into an array of <script> tags\n- load those script tags into the browser.\nSo right now, the tower-controller/client.coffee looks like this:\n``` coffeescript\nrequire './shared'\nrequire './client/controller'\nrequire './client/actions'\nrequire './client/elements'\nrequire './client/events'\nrequire './client/instrumentation'\nrequire './client/states'\nrequire './client/flash'\nTower.Controller.include Tower.ControllerActions\nTower.Controller.include Tower.ControllerElements\nTower.Controller.include Tower.ControllerEvents\nTower.Controller.include Tower.ControllerInstrumentation\nTower.Controller.include Tower.ControllerStates\nTower.Controller.include Tower.ControllerFlash\n```\nBut if you put all that Tower.Controller.include code into another file, then you would end up with this:\ncoffeescript\nrequire './shared'\nrequire './client/controller'\nrequire './client/actions'\nrequire './client/elements'\nrequire './client/events'\nrequire './client/instrumentation'\nrequire './client/states'\nrequire './client/flash'\nrequire './client/includes'\nThen grunt will watch for any changes to tower-*/client.coffee, and compile the script tags:\nhtml\n<!-- the contents from `shared` ... -->\n<script src=\"/tower/lib/tower-controller/client/controller.js\"></script>\n<script src=\"/tower/lib/tower-controller/client/actions.js\"></script>\n<script src=\"/tower/lib/tower-controller/client/elements.js\"></script>\n<script src=\"/tower/lib/tower-controller/client/events.js\"></script>\n<script src=\"/tower/lib/tower-controller/client/instrumentation.js\"></script>\n<script src=\"/tower/lib/tower-controller/client/states.js\"></script>\n<script src=\"/tower/lib/tower-controller/client/flash.js\"></script>\n<script src=\"/tower/lib/tower-controller/client/includes.js\"></script>\nAnd if there is just some single hook in the server-side templates, then you can put into coffeekup a helper such as javascripts towerSrc, and it would expand to all of those script tags.\nThat would mean this:\n- individual files are compiled one at a time for the client (just as they are on the server now)\n- it's fast, there's no recompiling all of dist/tower.js at once, which is super slow like you're saying\n- we don't need another package management system\nAt least for the short term.\nPackage management\nI love the idea of unifying the client/server package management system. I am not a fan of creating another package management system specifically for Tower. I am a fan of creating a generic client/server package management system for JavaScript, which definitely seems like the direction you're going. When it comes to package management, Tower should use what the community uses. Right now there is a nice/standard node package manager, but no nice/standard browser package manager. A lot of people have tried, some include:\n- https://github.com/twitter/bower\n- https://github.com/bpm/bpm (I think this is what Ember uses, or used to use)\n- https://github.com/bpm/spade (bpm may have evolved to this)\nI started integrating bower (that's the component.json in the tower repo), but it's not perfect yet.\nMy thinking is, you're digging really deep into this package management stuff, and if you find a solid solution like you're getting too, I'd create another project like your resolve.js and make that a generic client/server package manager.\nBut I also think that it would be easier and more adoptable to develop on top of NPM if at all possible. I'm tending toward not having tower package x mainly because it starts creating some sort of \"vendor lockin\".\nPotentials for integrating client-side stuff with NPM are to either:\n1. add custom config variables to package.json\n2. add custom run-script hooks that tower looks for\n3. add a file such as tower.init.js, or your tower-package.lock\nPersonally I am most a fan of the first one, because you could basically just define browserDependencies, and maybe an order to them, and then w/ grunt (watching a generated tower app), it would check each package in node_modules for browserDependencies, and compile them to vendor/javascripts or public/javascripts or whatever. This way, people can build libraries for tower without any additional knowledge.\nThen to hook into customizing the app startup or whatever (the hooks), if there was a tower.init.js (similar to how you add the railtie.rb file), tower could load that.\nI'm also a fan of what you're saying, that this thing would wrap your modules with the callback stuff. That's clean.\n. Looking good.\nI like the idea that ready states are the names of each package, and you can have sub-events like sockets:initialized, that's solid.\n\nPackages would have to be independent from each other. One would need to have dependencies, that's where the package.js comes in. You would specify other packages you need. controllers would need models and models would need sockets or something.\n\nIs there a way to do this with just package.json? The \"other packages\" could be tower- or non-tower-specific modules, installable from NPM, so instead of a package.js specifying the tower packages, could we just figure that out by inspecting the packages in dependencies and devDependencies, etc? That would be cool.\nYou could also add a boolean to the package.json, such as \"tower\": true, to aid in the traversal. This seems like it would be equivalent to adding a package.js to each sub-package.\nFor the package API, what if it was just a separate client/server git repo, maybe packager.js, so the api was this:\njavascript\npackager.register(function(){\n  // same stuff you posted above in Tower.Package.register\n});\nThis would make it usable outside Tower. I would love using something like this, that worked the same on the client and server. Maybe for both node.js and browser support:\n``` javascript\n// so it's global both in node and the browser\nvar root = typeof window === 'undefined' ? global : window;\nroot.packager = {\n  register: function() {}\n};\n```\nAlso starting to wonder if we can somehow make this packaging stuff a grunt-contrib package. This way if your project uses grunt to do all its build stuff, we can just look for some grunt function such as grunt package:client and run that, which would output a package.client.js and package.server.js with the packager.register code in it. Just throwing out ideas.\nI'm onboard with the things you've described in the last few posts. Let me know when I can mess around with it. Going to do a bunch of API stuff today. Cheers.\n. Sweet, this sounds great. Yeah calling it package.js makes sense.\n. When you start the cake watch process, the vendor/javascripts are copied.\n. awesome.\n. I totally agree, when 0.5.0 gets released we should have a few screencasts, a new site, and up-to-date documentation ready to go. I haven't thought of that blog idea, but it sounds great - every few weeks posting what we've been working on, new developments, challenges, etc.\nI also agree that it's pretty rare that frameworks/projects in the past had enough docs/screencasts. It's because it takes a lot of time, and it's tough to say \"this screencast is good enough\" if you're not in the flow of making screencasts regularly (like, perhaps, railscasts or peepcode).\nDo you have any ideas for screencasts and/or posts in mind? Maybe creating a list of desired docs/videos would be inspiring.\nI have been doing a lot to standardize the API, and keep it local so as not to confuse anyone. It would be nice to have such docs/screencasts using a stable API so we can publicly discuss that kind of stuff.\n. Does /posts/:postId/comments/new work instead? Then you access the App.Post in the comments controller like this:\ncoffeescript\nnew: ->\n  App.Post.find @params.postId, (error, post) =>\n    # ...\n. see #388\n. Will include this in 0.5.0, it will be super optimized :). An early version is here: https://github.com/viatropos/tgen/blob/master/server.js (but it's going to move soon to https://github.com/tower/tower).\n. I think this is fixed now, yeah?\n. This is an error with the way params are rendered.\nThe router sets the controller's action calls postsController.call, and passes the params (id for the show action):\npackages/tower-controller/client/instrumentation.coffee#L25\nThat method calls controller.propertyDidChange('resource'), so that the next time you call controller.get('resource') (which is the default for the show action) it returns the new record:\npackages/tower-controller/client/instrumentation.coffee#L9\nI don't think this is fully set up. Notice the params right above that line (tower-controller/client/instrumentation.coffee#L4) are also volatile. The problem is that the id from your /posts/:id url isn't saved to the params property... what I was trying to do is save the params in the router via router.send('stashContext', params) (tower-controller/client/instrumentation.coffee#L27), and then have controller.get('params') return the router's stashed context. (This makes it so the router stores the params and the controllers just bind to it).\nBut the default show action in the controller is doing App.Post.find(@params.id), which is going to be a blank hash because Ember won't update the computed property until the next frame. This is where the error is. Notice that if you grab the params in the web console (after Ember has had a chance to run the next frame), the params has the id.\ncoffeescript\nApp.get('postsController.params.id')\nThis needs to be better implemented, any ideas? Working on this.. Try tinkering with setting the params directly in that controller.call method, and removing/modifying the params: Ember.computed... in the vendor/javascripts/tower.js and let me know if you find a solution.\n. We're refactoring/developing and preparing for a new release soon, may be a month or so. A lot of new stuff in the works.\n. In this for the long haul as well.\nI definitely agree with you guys @btbinhtran and @haohello. There needs to be a foundation set up, been considering ways of doing this. When @TheHydroImpulse and I (and anyone else interested) get the new stuff merged for release, considering moving this repo to github.com/tower/tower (same with /tower/towerjs.org) and starting to have things revolve around that (similar to jQuery, Ember, Rails, etc.).\n@btbinhtran If you would like to take lead on creating a new site that would be awesome and I'll be here to help whenever you need it (we can connect through email/skype as well). What are you planning with the main site in regards to having an immediate impact?\nI am all about improving SEO if you have any suggestions, haven't done anything in this area.\nHaving someone focused on branding would be very helpful as well. I am not a designer but love high quality design. The major things we can do to improve the website in terms of branding are:\n- creating a logo (I literally just grabbed this: http://thenounproject.com/noun/eiffel-tower/#icon-No891).\n- creating a color scheme (back then I loved the look of http://www.dangersoffracking.com/, which is where the colors come from, but I have no opinion on the best color scheme right now).\n- creating a responsive layout (that's optimized/fast, such as http://responsejs.com/)\nThe main site should just render GitHub flavored markdown, but down the road we can possibly customize this so we can add more interactive elements (such as a repl like http://try.redis.io/ or http://repl.it/languages/JavaScript, or d3 graphics/dashboards such as http://square.github.com/cubism/ since there will be docs showing how to create real-time dashboards). So in terms of improving the site now, the theme/design can be developed independently from the content, and integrating a new design would have an immediate impact. To get this out like tomorrow, it's fine with me if you even just start with the Ember website and change the look and feel, that would get us moving (https://github.com/emberjs/website).\nIf anyone has anything in particular they would like to help out on definitely let us know. If you'd rather discuss it over email or something else, don't hesitate to email me :)\n. No way. This is awesome!\n. This should be fixed now.\n. Try uninstalling the global tower then reinstalling:\nnpm uninstall tower -g\nnpm install tower -g\nAlso, if you have ever run npm link from within a cloned version of the GitHub repo, then cd into that repo and run npm unlink.\n. Maybe npm executables aren't found. Try adding your /usr/local/share/npm/bin path to your ~/.bash_profile (http://dandean.com/nodejs-npm-express-osx/#telling-your-system-where-to-find-node).\nYour ~/.bash_profile should looks something like below (this is how mine looks):\nbash\nexport PATH=\"$HOME/.rbenv/bin:/usr/local/share/npm/bin:/usr/local/bin:$HOME/bin:$PATH\"\n. See https://github.com/viatropos/tower/issues/386\n. I really like the font but sorry you can't copy the Ember tower thingy and use it for the logo :)\n\nWe have a great graphic designer onboard working on this. It's going to be awesome.\n. Try installing grunt 0.3.x, such as this:\n```\ninside your app:\nnpm uninstall grunt\nnpm install grunt@0.3.17\n``\n. Grunt 0.4.0 installed a separategrunt-cli` npm, maybe try uninstalling that too:\nnpm uninstall grunt -g\nnpm uninstall grunt-cli -g\nnpm install grunt@0.3.17 -g\nAlso, try to run the grunt executable locally (it seems you tried but I don't think you were referencing the local executable):\n```\nin your app directory:\n./node_modules/grunt/bin/grunt\nor maybe ./node_modules/.bin/grunt\n```\nIf that works, then you can change the reference in the Cakefile (from the cake watch command) to point to ./node_modules/grunt/bin/grunt rather than grunt.\n. I don't think you can run commands from inside those directories, because npm looks for modules, e.g. require('some-lib'), in relation to the app's root (I think), which has the ./node_modules folder. I think the error you just got is because of this.\nTry running the commands only from your app's root directory.\nTo manually change the Cakefile, go to Cakefile#L11 and change it to:\ncoffeescript\nwatcher = spawn('./node_modules/grunt/bin/grunt', args)\n. Ok, making progress :)\nSo that Unable to find \"grunt.js\" error is a Grunt 0.3.0 error. Grunt 0.4.0 looks for Gruntfile.js, while 0.3.0 looks for grunt.js.\nFor Grunt 0.3.x, you can also specify the path to the grunt file, so what we were doing is this (since we were using coffeescript instead of javascript):\ngrunt --config ./grunt.coffee\nSo, try running this:\ngrunt --config ./grunt.coffee\nThat x1 is not a valid Win32 application error, I have no idea... It could be because of file paths (unix uses / while windows uses \\). So if there are any paths you're writing (such as ./node_modules/grunt/bin/grunt), try using backslashes.\n. Also, that error failed to connect to [127.0.0.27017] is because mongodb isn't running. Make sure mongodb is installed and is running.\nhttp://docs.mongodb.org/manual/tutorial/install-mongodb-on-windows/\n. Yes, execute that:\ngrunt --config ./grunt.coffee\nThe cake watch command should have abstracted that, see Cakefile#L8.\n. Looks like you're close.\nTry uninstalling all the grunt modules in your app, and installing the ones that match the 0.3.17 grunt you installed. (By uninstalling grunt-contrib-less and grunt-contrib-stylus, but keeping your grunt@0.3.17, when you run npm install in your app, it will [I think] install the grunt less/stylus versions that match grunt@0.3.17). So try:\n```\nin your app directory:\nnpm uninstall grunt-contrib-less grunt-contrib-stylus grunt-contrib\nnpm install\n```\nIf you get any errors with npm install, try running the above uninstall grunt-contrib... command again, followed by npm cache clean, then run npm install again.\n. I would look in that grunt-contrib-less/package/json file and see what version of grunt it requires (in it's dependencies hash).\nAlso make sure that the ./node_modules/grunt/package.json is 0.3.17.\nYou'll have to trace the error to that grunt-contrib-less line, I can't dig any further on it. It has something to do with versions between the different grunt/grunt-contrib modules. You can also comment out grunt.coffee#L42-45 and see if that works.\n. Make sure it has specified the coffee-script config:\ngrunt --config ./grunt.coffee\nThe Cakefile should also be doing that, but since you're on windows, it's probably something like:\n```\ngrunt --config grunt.coffee\nor\ngrunt --config .\\grunt.coffee\n```\nI have never used windows so not sure. Once you know how to specify the path to the ./grunt.coffee file using the windows-specific path format, then you should be good to go.\n. Cakefile#L8-11\n. I'm not sure if this works:\ncoffeescript\n  args.push('--config', path.join(process.cwd(), '.\\grunt.coffee'))\nThat backslash \\ might be interpreted as trying to escape the g, as in \\g. Try tinkering with that, such as doing .\\\\grunt.coffee. I'm not sure if windows includes the . in relative paths either. How does windows handle relative paths, any ideas?\n. If you can get the following to work, then you are good to go:\ngrunt --config .\\grunt.coffee # or however you point windows to that path\nand in a separate window:\nnode server\nThe cake watch command can be accomplished by using the above grunt --config ./grunt.coffee.\n. Yeah, that just starts the watcher to watch your files for changes. Keep that open in one terminal window.\nThen in another terminal window (the main one you'll work from), run:\nnode server\n. Try:\ngrunt start --config ./grunt.coffee\ngrunt start compiles and watches for changes, while grunt just compiles.\n. Awesome. Yes, Tower 0.5.0 won't have this issue :). Let me know if you have you have any other questions/ideas.\n. Like @btbinhtran said too, 0.5.0 will be out soon, but if anyone would like to make this work with Grunt 0.4.0, send a pull request. Having this work between now and then would be very helpful. Any questions you have on what to do let us know.\n. Thank you!\n. Try 'yields'\n. I can merge this in the meantime, can anyone verify that this works?\n. Done.\n. Hey, have you installed with npm install tower -g?\nIt looks like we left that off the README.\n. @casgit hmm.. it looks like the tower/cli module's executable isn't being set when installed globally. For now try installing tower-cli globally:\nnpm install tower-cli -g\n. @casgit nice :)\nhmm, which docs are you following? we've changed the ways the generators work since 0.4.0, so generators are just built from cookbooks. But I don't think we've done the last bit to have default generators yet, try this (what's your OS by the way?):\n```\ncd into home directory\ncd ~\ncreate a .tower folder (your \"workstation\")\nmkdir .tower\ncd .tower\nadd a simple package.json to it\necho '{\"name\":\"tower-workstation\"}' >> package.json\n```\nThen from within that .tower directory, try installing the component-cookbook:\nnpm install tower-component-cookbook\nNow the component cookbook should be accessible from the CLI. You can use it like this (from any directory):\ntower create component my-component\nWe haven't gotten to the app-cookbook yet really, we wanted to flesh out the basics first, so it's open to suggestions.\nWhat I've been doing personally (for the moment, to create custom cookbooks) is just tower create component x, and then add a \"cookbook\": \"x\" to the package.json for it (see the component-cookbook for the implementation details). That makes it so you can do tower <action> <cookbook-name>.\nYou can also just clone the component-cookbook into that .tower/node_modules/ directory, and customize the generator however you'd like.\nLet me know how that goes for you.\n. This setup stuff should all happen when the CLI is installed, just haven't been able to get to it.\nBasically, when you npm install tower, it should install the CLI and give you the command, and also create the basic \"workstation\" setup like above (just creating that .tower directory pretty much).\nThen it should install a \"cookbook\" cookbook, and maybe a few default cookbooks, so you can get off and running with generators and other cool things, just from running npm install tower. At the same time, it should be set up so when you install tower on the production server, it doesn't add this extra stuff. So maybe this means you have to install cookbooks manually all the time, not quite sure yet.\nThoughts?\n. @casgit so the way cookbooks work, it's all just tower <action> <cookbook>, where \"actions\" are just methods on the module exports for your cookbook.\nBut, tower new my-app is just a special case for getting started, it just delegates to tower create app my-app.\nhttps://github.com/tower/cli/blob/master/bin/tower#L159-L177\n. @casgit awesome, yeah the official docs are on towerjs.org in the guide section, which is just generated from this:\nhttps://github.com/tower/guides/tree/master/guides\n. Hey @yudho I'll be in the IRC for the next hour or two if you want to dig in.\nI haven't gotten to the app cookbook yet, still working on the directives. Got an awesome lightweight setup for data binding just about finished.\n. @yudho #towerjs is the channel. Yeah you don't really need the app cookbook right now, you could just manually start building an app from scratch. That was one of the goals this time around, make it so you could just have a single index.html and one index.js, and just build your app, that's all it really takes.\nThe todomvc app is a demo, though it needs to be cleaned up and updated with the latest code:\nhttps://github.com/tower/todomvc\n. Alright this is fixed now. The tower executable is now part of the tower/tower repo, and I've deleted the tower/cli repo. Make sure you can do this after installing:\n$ tower -v\n0.5.1\nAlso, the cookbooks are setup too. You can install a component generating cookbook like this:\nnpm install tower-component-cookbook -g\nThen you can run it anywhere like this:\ntower create component my-component\n. @kristianmandrup definitely agree with your points. Large monolithic projects take too much effort for the vast majority of developers to contribute to. When tower was one monolithic repo I personally felt like I reached a point where I could not keep it all in my head. I felt like I reached a wall where it was too much effort to go further. But then we switched to using components and it opened up a whole new set of possibilities. Now it feels like there is no mental limit that can be reached. Since every component is highly specialized and self contained, when you code a specific module, you only have to keep that in memory. Once that's done, you can combine that as part of a higher-level component, and mentally it feels no more demanding than building the part. We have been able to move much faster using this approach. We have to continue tinkering to find ways to isolate and specialize each component, but we are getting close to a simple solution.\nIt seems corporate backing like Google provides the ability to slowly chip away at monolithic projects b/c they have dozens if not hundreds of developers working on it. But this doesn't mean that's what it takes to build something in that arena. It just means we need to take a different approach, come at it from a new angle. Newcomers always have the opportunity to make something way more valuable than the existing large corporations, even if it's just one or two individuals.\nAlso wanted to say that while it may seem like there is a lack of motivation b/c of the lack of visibility/movement on the main tower repo, @TheHydroImpulse and I are working full time at startups and slowly finding ways to abstract away what we're doing into reusable components that come together into a unified framework. Doesn't matter how long it takes or if we go down a road that turns out a failure and we have to try again. Even though some people like piecing together the perfect parts (I often prefer that as well), having a unified framework will make it much easier for the vast majority of developers to make awesome stuff without having to think super hard about the details or stay on the edge of open source. It's like building a computer from the parts vs. buying a Mac. The Mac just makes it so much simpler to work with for the majority of users.\n. yep, check out https://github.com/tower/template. the /test folder has the basic examples of how it works\n. It seems that Tower docs could essentially be an intro to modular app development, with an outline of how common things in different areas are done, and the way the different sub-organizations and projects accomplish this, and what plans are for solving the rest of the workflow/development problems.\n. Yeah that's good, pretty much how it is now. I like the idea of the cookbooks (but probably a better name). It can be accomplished with peerDependencies in the package.json. The main thing is, we would be delegating for the most part to other smaller orgs/projects under the hood. This would make it really nice as an easy way to get started and to keep the API simple, but if you wanted to get more hardcore/low-level you could just use the raw tools.\n. Boom! That'll be awesome :)\n. ",
    "benatkin": "I noticed that GitHub picked up your numbers as issue references. Perhaps prefixing them with a \\ will work, like #2.\nEdit: nope. :/\n. There's a broken link on the README too.\n. I noticed that GitHub picked up your numbers as issue references. Perhaps prefixing them with a \\ will work, like #2.\nEdit: nope. :/\n. There's a broken link on the README too.\n. ",
    "webdesserts": "Node v0.4.9\nNPM 1.0.106\nI didn't realize my Node version was so low, Just freshly installed not to long ago. Gunna try upgrading.\nUPDATE\nOk upgrade Node to v0.6.11 but it's still not working.\n. Ahh, you're right. I'm pretty sure I was trying to use tower and/or tower help just as a confirmation that it worked . Creating a new app works fine. Guess I shouldn't have let the first error stop me. Thanks for the help!\n. Yes, I'm running on Ubuntu and yep, that fixed it.\nI'll use the workaround for now. \nIf you have any idea on how to check for launch order I can try to run a test for you.\n. Node v0.4.9\nNPM 1.0.106\nI didn't realize my Node version was so low, Just freshly installed not to long ago. Gunna try upgrading.\nUPDATE\nOk upgrade Node to v0.6.11 but it's still not working.\n. Ahh, you're right. I'm pretty sure I was trying to use tower and/or tower help just as a confirmation that it worked . Creating a new app works fine. Guess I shouldn't have let the first error stop me. Thanks for the help!\n. Yes, I'm running on Ubuntu and yep, that fixed it.\nI'll use the workaround for now. \nIf you have any idea on how to check for launch order I can try to run a test for you.\n. ",
    "buhrmi": "Is there a command I have to invoke to have the assets put into the public folder? cake assets:bundle will crash with Tower.assets being undefined.\n. Thanks for the response!\nI've done some troubleshooting too. As it turns out, design.io in it's current state won't watch anything unless it's installed locally without -g.\nThe offender is in command.js:45, appending /node_modules/design.io/lib/design.io/command/watch.js to the process dir, which is my project root.\nI also had to install async, pathfinder, mint, less, javascripts and stylesheets extension manually.\nLooks as if it's working now.\n. All right, heading home now.\nThings I did not get to work were:\n- Code Change reloading (had to restart server after each template/partial/controller/etc. change)\n- Instant Browser refreshes. Websocket was connected, design.io watcher was busy recompiling CSS and templates in the other window, but did not send anything.\n. Is there a command I have to invoke to have the assets put into the public folder? cake assets:bundle will crash with Tower.assets being undefined.\n. Thanks for the response!\nI've done some troubleshooting too. As it turns out, design.io in it's current state won't watch anything unless it's installed locally without -g.\nThe offender is in command.js:45, appending /node_modules/design.io/lib/design.io/command/watch.js to the process dir, which is my project root.\nI also had to install async, pathfinder, mint, less, javascripts and stylesheets extension manually.\nLooks as if it's working now.\n. All right, heading home now.\nThings I did not get to work were:\n- Code Change reloading (had to restart server after each template/partial/controller/etc. change)\n- Instant Browser refreshes. Websocket was connected, design.io watcher was busy recompiling CSS and templates in the other window, but did not send anything.\n. ",
    "moodyallen": "Hey guys,\nI'm having the same issues with design.io\nWith node server.js\nI am getting errors cos the app is on :3000 (default) and socket.io is watching :4181\nWith tower server -p 4181 everything seams to be fine, but still got no sweet instant refreshes\n. Hey guys,\nI'm having the same issues with design.io\nWith node server.js\nI am getting errors cos the app is on :3000 (default) and socket.io is watching :4181\nWith tower server -p 4181 everything seams to be fine, but still got no sweet instant refreshes\n. ",
    "satlavida": "Ok thanks. \n. Ok thanks. \n. ",
    "ylluminate": "Any updates on effort in this direction?  I am curious about the use of JugglingDB with Tower: https://github.com/1602/jugglingdb\nI think this would be a very nice addition and would solve this sore spot.\n. node v0.6.15 & npm 1.1.16\nIt did eventually finished...  I am guessing that this particular instance was some kind of network unavailability; are files pulled down from some location at this point in the process of creating the project?\nSo many of these node.js:201 issues around the web lead me to think that we need some better verbosity or error messages of some kind.\n. Well @viatropos strange thing is that I have a business class connection that's blazing fast and I actually tested it during the issue.  Every other app and network test (I'm also a network admin) came back fine.  So it seems something queer relating to node.js singularly.   \nBut I seriously believe that there should be stronger error handling on some of these issues, yes.  At least if it would give an indication of the cause of an error it would help in the long run.  Great exception handling and messages go a long way at helping a marvelous framework like you've put together here really gain traction.\n. Any luck @activestylus or @viatropos with addressing this one so far on the dev branch?\n. Any updates on effort in this direction?  I am curious about the use of JugglingDB with Tower: https://github.com/1602/jugglingdb\nI think this would be a very nice addition and would solve this sore spot.\n. node v0.6.15 & npm 1.1.16\nIt did eventually finished...  I am guessing that this particular instance was some kind of network unavailability; are files pulled down from some location at this point in the process of creating the project?\nSo many of these node.js:201 issues around the web lead me to think that we need some better verbosity or error messages of some kind.\n. Well @viatropos strange thing is that I have a business class connection that's blazing fast and I actually tested it during the issue.  Every other app and network test (I'm also a network admin) came back fine.  So it seems something queer relating to node.js singularly.   \nBut I seriously believe that there should be stronger error handling on some of these issues, yes.  At least if it would give an indication of the cause of an error it would help in the long run.  Great exception handling and messages go a long way at helping a marvelous framework like you've put together here really gain traction.\n. Any luck @activestylus or @viatropos with addressing this one so far on the dev branch?\n. ",
    "abovethewater": "If you are simply using it to create a UUID then the following may be useful:\nhttps://github.com/broofa/node-uuid\nwhich in turn references:\nhttps://gist.github.com/982883\nhttps://gist.github.com/1308368\n. If you are simply using it to create a UUID then the following may be useful:\nhttps://github.com/broofa/node-uuid\nwhich in turn references:\nhttps://gist.github.com/982883\nhttps://gist.github.com/1308368\n. ",
    "sjerrys": "I am transfering my old code to tower. mongoose-auth is the mongoose version everyauth also from @bnoguchi \nhere is the app/auth.coffee:\n``` coffeescript\nmongoose= require \"mongoose\"\ndb = require('../config/databases.coffee').mongodb[Tower.env]\nmongoose.connect \"mongodb://#{db.host}/#{db.name}\"\nSchema = mongoose.Schema\nmongooseAuth = require \"mongoose-auth\"\nUserSchema = new Schema {}\nUserSchema.plugin mongooseAuth,\n  everymodule:\n    everyauth:\n      User: ->User\n  password:\n    loginWith: \"email\"\n    extraParams:\n      name: String\n    everyauth:\n      getLoginPath: \"/login\"\n      postLoginPath: \"/login\"\n      loginView: \"login.jade\"\n      getRegisterPath: \"/register\"\n      postRegisterPath: \"/register\"\n      registerView: \"register.jade\"\n      loginSuccessRedirect: \"/loggedin\"\n      registerSuccessRedirect: \"/registed\"\nmongoose.model \"User\", UserSchema\nUser = mongoose.model \"User\"\nexports.mongooseAuth = mongooseAuth\n```\nand the config/application.coffee\ncoffeescript\nauth = require('../app/auth')\nmongooseAuth = auth.mongooseAuth\nclass Market extends Tower.Application\n  @configure ->\n    @server.set 'views', './app/views' \n    @use \"static\",  Tower.publicPath, maxAge: Tower.publicCacheDuration\n    @use \"profiler\" if Tower.env != \"production\"\n    @use \"logger\"\n    @use \"query\"\n    @use \"cookieParser\", Tower.cookieSecret\n    @use \"session\", secret: Tower.sessionSecret, cookie: {domain: \".#{Tower.cookieDomain}\"}\n    @use \"bodyParser\"\n    @use \"methodOverride\", \"_method\"\n    @use Tower.Middleware.Agent\n    @use Tower.Middleware.Location\n    @use mongooseAuth.middleware()\n    @use Tower.Middleware.Router\nand the router:\ncoffeescript\n  @match \"/loggedin\",to: \"application#loggedin\"\n  @match \"/registed\",to: \"application#registed\"\n  @match \"(/*path)\", to: \"application#index\"\neverything fine with the /login until i can not get @request.user or @session.auth at applicationController.coffee\n``` coffeescript\nclass Market.ApplicationController extends Tower.Controller\n  @layout \"application\"\n  loggedin: ()->\n    console.log @request.user\n    console.log @session\n    Market.createSession @request,@response,()=>\n      @redirect \"/\"\n```\n. I am testing tower since i do this with other express kind framework:\nIs that I cant set value to @request or @session like this? or what I am doing is something wrong?\na \"Tower new app\" and do this:\n``` coffeescript\nclass Towertest.ApplicationController extends Tower.Controller\n  @layout \"application\"\ntest: ->\n    console.log @request.user #undefined\n    console.log @session #auth undefined\n    @render template: \"index\"\n  index: ->\n    @session.auth=100\n    @request.user = 'sjerrys'\n    console.log @request.user #ok\n    console.log require('util').inspect @session #ok\n    console.log \"done\"\n    @response.redirect '/test'\n```\n. I found the reason why the session and everyauth is not working:\nin config/application.coffee\ncoffeescript\n@use \"session\", secret: Tower.sessionSecret, cookie: {domain: \".#{Tower.cookieDomain}\"}\nif I didn't set a right value for domain, the session cookie will fail to set.\neverything goes great after I set the domain OR just delete cookie: {domain: \".#{Tower.cookieDomain}\n. I am using mongoose-auth(from everyauth too) with tower, so far so good....\nwhat is your problem so? \n. HI viatropos, just want you know that my web still working good in production (tower version 0.3.9-7).\ni got user auth, shopping stuff, blog posts on the site. \nThousands PV each day.\neverything is light but stable. \ntower is realy a potential one. \nCant wait to see the 0.5 birth.\n. I am transfering my old code to tower. mongoose-auth is the mongoose version everyauth also from @bnoguchi \nhere is the app/auth.coffee:\n``` coffeescript\nmongoose= require \"mongoose\"\ndb = require('../config/databases.coffee').mongodb[Tower.env]\nmongoose.connect \"mongodb://#{db.host}/#{db.name}\"\nSchema = mongoose.Schema\nmongooseAuth = require \"mongoose-auth\"\nUserSchema = new Schema {}\nUserSchema.plugin mongooseAuth,\n  everymodule:\n    everyauth:\n      User: ->User\n  password:\n    loginWith: \"email\"\n    extraParams:\n      name: String\n    everyauth:\n      getLoginPath: \"/login\"\n      postLoginPath: \"/login\"\n      loginView: \"login.jade\"\n      getRegisterPath: \"/register\"\n      postRegisterPath: \"/register\"\n      registerView: \"register.jade\"\n      loginSuccessRedirect: \"/loggedin\"\n      registerSuccessRedirect: \"/registed\"\nmongoose.model \"User\", UserSchema\nUser = mongoose.model \"User\"\nexports.mongooseAuth = mongooseAuth\n```\nand the config/application.coffee\ncoffeescript\nauth = require('../app/auth')\nmongooseAuth = auth.mongooseAuth\nclass Market extends Tower.Application\n  @configure ->\n    @server.set 'views', './app/views' \n    @use \"static\",  Tower.publicPath, maxAge: Tower.publicCacheDuration\n    @use \"profiler\" if Tower.env != \"production\"\n    @use \"logger\"\n    @use \"query\"\n    @use \"cookieParser\", Tower.cookieSecret\n    @use \"session\", secret: Tower.sessionSecret, cookie: {domain: \".#{Tower.cookieDomain}\"}\n    @use \"bodyParser\"\n    @use \"methodOverride\", \"_method\"\n    @use Tower.Middleware.Agent\n    @use Tower.Middleware.Location\n    @use mongooseAuth.middleware()\n    @use Tower.Middleware.Router\nand the router:\ncoffeescript\n  @match \"/loggedin\",to: \"application#loggedin\"\n  @match \"/registed\",to: \"application#registed\"\n  @match \"(/*path)\", to: \"application#index\"\neverything fine with the /login until i can not get @request.user or @session.auth at applicationController.coffee\n``` coffeescript\nclass Market.ApplicationController extends Tower.Controller\n  @layout \"application\"\n  loggedin: ()->\n    console.log @request.user\n    console.log @session\n    Market.createSession @request,@response,()=>\n      @redirect \"/\"\n```\n. I am testing tower since i do this with other express kind framework:\nIs that I cant set value to @request or @session like this? or what I am doing is something wrong?\na \"Tower new app\" and do this:\n``` coffeescript\nclass Towertest.ApplicationController extends Tower.Controller\n  @layout \"application\"\ntest: ->\n    console.log @request.user #undefined\n    console.log @session #auth undefined\n    @render template: \"index\"\n  index: ->\n    @session.auth=100\n    @request.user = 'sjerrys'\n    console.log @request.user #ok\n    console.log require('util').inspect @session #ok\n    console.log \"done\"\n    @response.redirect '/test'\n```\n. I found the reason why the session and everyauth is not working:\nin config/application.coffee\ncoffeescript\n@use \"session\", secret: Tower.sessionSecret, cookie: {domain: \".#{Tower.cookieDomain}\"}\nif I didn't set a right value for domain, the session cookie will fail to set.\neverything goes great after I set the domain OR just delete cookie: {domain: \".#{Tower.cookieDomain}\n. I am using mongoose-auth(from everyauth too) with tower, so far so good....\nwhat is your problem so? \n. HI viatropos, just want you know that my web still working good in production (tower version 0.3.9-7).\ni got user auth, shopping stuff, blog posts on the site. \nThousands PV each day.\neverything is light but stable. \ntower is realy a potential one. \nCant wait to see the 0.5 birth.\n. ",
    "kristianmandrup": "Would be nice with a complete example on setting up authentication with Tower. \n. Would be really nice to fill in the wiki with some example code on setting up authentication. I'd also like there to be a recipe for making Tower extensions (plugins) for example for various authentication solutions.\n. urlFor(route: \"login\") # I'm liking this one\n+1\nYeah, I'm \"all in\" with regards to Mongo ;) A major reason why I like the Tower framework :) So natural with JSON from client to server to DB, JSON which is by nature document structures. \nSo @viatropos, can you do a quick patch to implement this \"route-alias lookup\" feature for urlFor this weekend?\n. Hi there, are you still planning to add that feature or too busy? I wouldn't know where to start...\nThanks! Have a nice weekend!\n. _extractOptions:\n name            = @_extractName(options)\n_extractName: (options) ->\n    options.as || options.name\nSo name should already be set to the :as alias if defined as part of the route (DSL).\nBut where are the Routes registered? I assume it is some kind of Array of hashes?\nIn Tower.Support.String.urlFor I simply need to make a lookup in this registry. Would be nice if it was a hash, with the keys= the name of the route for fast lookup.\n. I've just pushed to my localization branch. Now with locales in coffee and also for model validations.\n. OK, I have been looking at the Roadmap for 0.4.1 and would like to help.\nkmandrup:tower (development) $ make test\nmake: Nothing to be done for `test'.\nkmandrup:tower (development) $ mocha\n\u2714 0 tests complete (1322ms)\nI got the tests running last time, but I forgot the magic keywords... can't find anything on the wiki page on how to run the tests.\nAnyways, would like to help out with these little tasks:\ngenerate test/models with example code for scaffold\ngenerate test/routes or test/controllers with example code for scaffold\nI know generators and rspec pretty well in Rails. \nIn Tower I see:\n- lib/tower/server/generator/generators/jasmine\n- lib/tower/server/generator/generators/mocha\nSo I guess you want better generators here somewhere?\n. I would really like to chat with you so I can better help contribute. Could you please log onto Skype or whichever channel you prefer, thanks :)\n. OK, I'm on the IRC channel... I'm reading through the wiki while trying to fix/improve it a little.\n. I will play around with that ;) It's a good little mini feature in order to get started contributing.\n. ``` coffeescript\nfields: (names..., options) ->\n  for name of names\n    @field name, options\n  @_fields   ||= {}\nset_fields: (attributes) ->\n  for name, options of attributes\n    @field name, options\n```\nin the test_app\ncoffeescript\nclass App.Address extends Tower.Model\n  @field \"coordinates\", type: \"Geo\"\n  @field \"street\"\n  @field \"city\"\n  @fields \"state\", \"zip\", type: 'String'\n  @fields \"other\", \"house\"\n  @set_fields my: \"String\", your: \"Integer\"\nCompiling manually and inserting\nTower.Model.Attributes = {\n  ClassMethods: {\n    fields: function() {\n      var name, names, options, _i;\n      names = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), options = arguments[_i++];\n      for (name in names) {\n        this.field(name, options);\n      }\n      return this._fields || (this._fields = {});\n    },\n    set_fields: function(attributes) {\n      var name, options, _results;\n      _results = [];\n      for (name in attributes) {\n        options = attributes[name];\n        _results.push(this.field(name, options));\n      }\n      return _results;\n    }\n$ npm test\n\u2714 373 tests complete (6533ms)\nNot sure how to merge the fields and set_fields method to handle all cases...\n. I made it work like this in js:\n``` javascript\n    fields: function() {\n      var name, names, options, _i, attributes, first_arg;\n  names = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), options = arguments[_i++];\n  first_arg = _.first(names) || names;\n\n  if (_.isEmpty(first_arg) || _.isString(first_arg)) {\n    // handle as array of strings        \n    for (name in names) {\n      this.field(name, options);\n    }\n  } else {\n    attributes = arguments;\n    // handle as hash of field_key, type\n    for (name in attributes) {\n      this.field(name, attributes[name]);\n    }                \n  }\n  return this._fields || (this._fields = {});\n}\n\n```\nI don't mind that developers have the option to write in more concise and DRY. You can never guard against ugly coding styles. \nI would think most developers would do sth like this:\n``` coffeescript\nclass App.User extends Tower.Model\n  @field 'id', type: 'Id'\n  @field likeCount: 'Integer'\n# strings\n  @fields 'firstName', 'middleName', 'lastName', 'email'\n# booleans\n  @fields 'active', 'admin', type: 'Boolean', default: false\n# dates\n  @fields 'activatedAt', 'createdAt', 'startDate', 'endDate', type: 'Date'\n```\nThe old alternative\n``` coffeescript\nclass App.User extends Tower.Model\n  @field 'id', type: 'Id'\n  @field likeCount: 'Integer'\n# strings\n  @field 'firstName'\n  @field 'middleName'\n  @field 'lastName'\n  @field 'email'\n# booleans\n  @field 'active', type: 'Boolean', default: false\n  @field 'admin', type: 'Boolean', default: false\n# dates\n  @field 'activatedAt', type: 'Date'\n  @field 'createdAt', type: 'Date'\n  @field 'startDate', type: 'Date'\n  @field 'endDate', type: 'Date'\n```\nReadable but a bit long and bloated IMO. At least now there is the option to write it shorter and more DRY. All power can be misused of course ;)\n. Another variant could be this:\ncoffeescript\nclass App.User extends Tower.Model\n  @id 'id'\n  @integers 'likeCount'\n  @strings 'firstName', 'middleName', 'lastName', 'email'\n  @booleans 'active', 'admin', default: false\n  @dates 'activatedAt', 'createdAt', 'startDate', 'endDate'\nFor the common built-in types. For other types use the field/fields or for custom types even have some hook to allow them to define their own smart type macro? Just some crazy ideas...\n. My attempt at a #strings macro\njavascript\n    strings: function(args) {\n      var names, options, _i;\n      names = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), options = arguments[_i++];\n      if (!options || _.isString(options))\n        options = {} \n      $.extend(options, {type: 'String'});\n      fields(names, options)\n    },\nThe #extend from jQuery should be able to merge objects, but I get:\nReferenceError: $ is not defined\n      at Function.strings (/Users/kmandrup/private/repos/tower/lib/tower/model/attributes.js:14:7)\n. I would actually like to make this available as an example of a Tower extension (plugin). \nWould be nice if you could help me do that and it would serve as a nice tutorial for Tower \"plugin development\" as well.\nI think you are correct, that it shouldn't be part of Tower core.\nCheers and Happy Easter!\n. I have now tried to create such a Tower plugin as a Node.js module.\nPlease see it here and let me know what you think. I'm not yet sure how to write the tests and how to test it :P\nhttps://github.com/kristianmandrup/tower_fields\nWhen I get this working I will move on and try to make a plugin for Passport authentication.\n. I think that the $ syntax is part of mongoose which is using the native Mongo DB query. Mongoid and other Mongo-Rails mappers provide a layer on top of this query syntax to make it more AR-like. Mongo DB is not a relational DB, and so I don't think rel would work.\nIf this syntax is a hurdle, consider wrapping the Mongo advanced query API and make it a Tower plugin/extension. Just my take on it. I did this for the Geo parts of MongoDB that became a Mongoid extension (mongoid_spatial gem).\nhttp://www.mongodb.org/display/DOCS/Querying\nhttp://www.mongodb.org/display/DOCS/Advanced+Queries\n. Here is my untested attempt at wrapping the Passport configuration in a more Object Oriented way. \nFeel free to modify as needed:\n``` coffeescript\nclass App extends Tower.Application\n  @configure ->\n    # ...\n    @use 'bodyParser'\n    @use 'cookieParser', Tower.config.session.key\n    @use 'session', secret: Tower.config.session.secret, store: new Tower.Store.Mongo()\n@auth = new Tower.Auth.Passport(@)\n\n# middleware\n@use Tower.Middleware.Agent\n@use Tower.Middleware.Location\n\nTower.Store.Mongo extends Tower.Class\n  constructor: (options = {}) ->\n    @initialize options\n# cookie: {domain: \".\" + Tower.config.session.cookie.domain}\n  initialize: (options = {}) ->\n    require './databases'\n    @mongostore = .extend Tower.Store.MongoDB.config[Tower.env]\n    @mongostore.db = @mongostore.name\n    delete @mongostore.name\n    new MongoStore(@mongostore, .extend(options, store_options) \nstore_options: ->\n    cookie: {domain: \".\" + Tower.config.session.cookie.domain}\nPassport configuration\nTower.Auth = {}\nclass Tower.Auth.Passport extends Tower.Class\n  @configure: ->  \n    @app.use passport.initialize()\n    @app.use passport.session()\n    @passport = @app.passport\nstrategy: (name) ->\n    strategy_found = Tower.Auth.Passport[_.camelize(name)]\n    throw Error \"Passport strategy #{name} not defined\" if not strategy_found\n    strategy_found\nconstructor: (app) ->\n    @initialize app\ninitialize: (app, strategies) ->\n    @app = app\n    @configure\n    new Tower.Auth.Passport.strategy(name)(@passport)  \nclass Tower.Auth.Passport.Strategy extends Tower.Class\n  constructor: (passport) ->\n    @initialize passport\ninitialize: (passport) ->\n    passport.serializeUser (user, done) ->\n      done null, user.get('id').toString()\npassport.deserializeUser (id, done) ->\n  global.App.User.find id, (error, user) ->\n    done error, user\n\nclass Tower.Auth.Passport.Facebook extends Tower.Auth.Passport.Strategy\n  constructor: (passport) ->\n    @initialize passport\ninitialize: (passport) ->\n    super(passport)\n    new Routes(passport)\nclass Tower.Auth.Passport.Facebook.Routes extends Tower.HTTP.Route\n  constructor: (passport) ->\n    @initialize passport\ninitialize: (passport) ->\n    get \"/auth/facebook\", passport.authenticate(\"facebook\"), (request, response) ->\n      # The request will be redirected to Facebook for authentication\nget \"/auth/facebook/callback\", passport.authenticate(\"facebook\", failureRedirect: \"/login\"), (request, response) ->\n  response.redirect \"/\"\n\n``\n. Thanks. Likely should beRoutes.draw` ?\n. Great :) I think the problem lies in openid as you point out :) Would be great with some more sample implementations of PassPort integration and similar auth solutions :) Let us know if the openid patch solves your problem.\n. Are you using this one? https://github.com/liamcurry/passport-steam\n. Cool :) Could you share your \"full\" passport setup example on a gist or something ;)\n. Way to go! :) This is excellent news... \nWould be nice with a small sample application illustrating authentication setup this way. Then we could mix in an authorization solution later perhaps ;) \n``` coffeescript\nif can(current_user, :read, @post)\n  # render some template\nelse\n  # render some other template or perhaps no template?\nor perhaps\nif current_user.can(:read).the(@post)\nif current_user.can(:read).all_the(@posts)\nif current_user.can(:read).any_of_the(@posts)\n```\nhttps://github.com/ryanb/cancan/wiki/Defining-Abilities\ncoffeescript\nTower.Authorization.Cannibal extends Class\n  can -> (user, actions, models)\n    ...\n  cannot -> (user, actions, models)    \n    !can(user, actions, models)\ncoffeescript\nMyApp.Ability extends Tower.Cannibal.Ability\n  initialize -> (subject, options = {})\n    subject.can('read').any(Post)\ncoffeescript\nTower.Cannibal.Ability extends Class\n     can -> (actions)\n        action_rule = new Tower.Cannibal.ActionRule(actions)\n        @rules.concat action_rule if action_rule\n``` coffeescript\nTower.Cannibal.ActionRule extends Class\n    initialize -> (actions)\n      @actions = actions\n any -> (model_classes)\n   @model_classes = model_classes\n   new Rule(@)\n\n the -> (model)\n   @model = model\n   new Rule(@)\n\n all_the ->\n any_of_the ->\n\n```\n``` coffeescript\nsimilar to CanCan Rule\nTower.Cannibal.Rule extends Class\n  initialize -> (options = {})\n# other can be an object or functio returning object for relation\n  by -> (method_name, other)\n# fun is a function\n  when -> (fun)\n```\nJust some initial ideas ;)\n. I will get on it today. I agree, but I think it could be much better, especially the DSL could be improved and no reason why it should be limited to operate on current_user only.\n. Here is my attempt at porting a subset of CanCan:\nhttps://github.com/kristianmandrup/beer_can\nNote, no tests and surely some pieces missing. Is all I had time for now (grunt work). Cheers!\n. I've just made a lot of fixes to BeerCan so I think it now provides a pretty good foundation for a CanCan-like Authorization implementation. Just needs some more love and care from someone more expert in Tower, coffeescript and javascript frameworks... The basic tests/specs should now be in place.\n. Now finally starting to look usable ;) ttyl. Have a nice wkend.\n. I've now setup beer_can with jasmine and coffeescript-guard for BDD. This in turn has let me debug and fix the syntax errors. However I still have problems running jasmine (via ruby). \nI'm still not able to load the beer_can module from spec_helper before running each individual spec. \nCould you have a look? Thanks.\nhttps://github.com/kristianmandrup/beer_can\n. +1 \" new node compatible port of cssmin\"\n. Excellent :)\n. See https://github.com/visionmedia/express/issues/867\nAnd https://github.com/visionmedia/express/commit/75c29bd42a809f33ff84738f93aa7acc4c955cae\nNot it's just var app = express();\n. In tower/lib/tower/server/application.js line 87\nthis.server || (this.server = require('express').createServer());\nshould likely just be:\nthis.server || (this.server = require('express'));\n. Recently someone added some nice socket.io changes/features. I'm sure whoever did these commits could help you get on the right track...\n. I searched on socket.io in the tower repo:\ntower/server/application.js L194: \ncoffeescript\n      this.io || (this.io = require('socket.io').listen(this.server));\nLooks like the use of the 'socket.io' library is currently hardcoded\nBut I'm sure you could make it more flexible... perhaps something like:\n``` coffeescript\nTower.libs.register('socket') = require('socket.io')\nmuch later\nthis.io || (this.io = Tower.lib('socket').listen(this.server));\n```\nJust some wild ideas :P\nNote: This libs infrastructure is NOT in place, just an idea...\n. Would it be possible to create some kind of Tower adapter to encapsulate the main API of different socket solutions?\n. Sweet :)\n. \"Authentication so far, though I might add some stuff to make it more of an Authentication Library backed by passport, instead of just being powered by passport. But I'll try to make it modular so that someone can use their own implementation of an authentication or should it be bolted in?\" \nHmm, we had some discussion about Auth libraries previously in a different issue thread I think. Maybe you can get some input from there and pseudo-code etc. as well for inspiration. I think it would be nice if Tower came with a simple Auth lib \"built-in\" while still making it easy to extend this or add a custom one. This is such core functionality for almost any web app. I also see a strong move to using Auth provider solutions over having a complete \"auth solution\" in every app... Nice to her that my BeerCan project was useful. I never got around to finish it off.. Cheers!\n. So did this get completely resolved now? Do we have a socket solution with security i.e. authentication/authorization that can be configured on top or what? I'm just starting to get back on board with Tower again... Now with some basic knowledge of Node, Express etc. I'm ready to dig in this time!\n. Wow! Thanks a lot for the update @TheHydroImpulse :)\nIt looks like you are definitely on the right track with many of these development!! I embrace the fact that you dropped Ember.js. I spent a month trying to get my grips on it and then pulled away and never looked back. I also felt it was way to inflexible for customization etc.\nExcited about Koa and Co. You might consider Bacon.js as weel to simplify working with event steams.\nI'll defintiely look more into Tower and see if I can contribute! Great work guys :)\n. I am curious to know why you decided to implement your own directives implementation similar to fx Angular and Derby and not just let the user leverage Angular directives (via Angular) if he so chooses? \n. Awesome! I think it's the right way to proceed and move forward. We keep learning from past mistakes and other frameworks that get bogged down by complexity and become too monolithic... I'm just learning the power of TRUE functional programming done right, like Bacon.js and others, fx using currying to tidy up and making the code super pretty and DRY.\nhttp://hughfdjackson.com/javascript/2013/07/06/why-curry-helps/\nhttps://github.com/CrossEye/ramda\nhttp://allong.es/\nhttps://github.com/baconjs/bacon.js\nI think using this style of coding is the future for sure and would be a great addition to your framework. Is the style that all frameworks need now in order to move forward I think. OK, sorry, I know this is not the forum for this kind of discussion - but just very excited to have my eyes opened to a radically different but beautiful new style of coding that is so sweet :)\nWhen I'm up to speed with this new style I will gladly help out and use your framework and start improving documentation and main screencasts. Haven't been so excited since I switched from Java to Ruby and then Rails... and lately to Node.js. Cheers!\njavascript\nreturn mapWith(maybe(getWith('name')))(customerList);\nInstead of:\njavascript\nreturn customerList.map(function (customer) { if (customer) {\nreturn customer.name }\n});\n. Unfortunately.... most frameworks die a slow death :( I think the best we can do sometimes, is to salvage the best pieces and start up something new combining the best approaches from multiple frameworks etc.\nIt is very hard to sustain the motivation for huge projects like this unless you have a lot of community support, but most users are just leechers and not contributors. Such is the fact of open source. Coz large projects take a huge effort to really dig into and contribute to in most cases... I think the whole idea of trying to design frameworks to cover the whole spectrum are doomed to fail in the end, unless you got huge corporate backing to boot like Google etc.\nBetter to have smaller, self contained, specialize frameworks and them combine them as you like IMO\nWhich as the philosophy of this (and many other frameworks) but which is rarely \"really\" achieved...\n. Wow! Great to hear that you are beginning to have it divided into many more smaller parts. I made the same realization a few times by now, when I also hit the wall with too big projects that I could no longer mentally manage.\nWhen even the author of a project can no longer cope with the size of the project, it definitely is a warning that it is time to split it up into smaller, self-contained modules that can be managed individually. I agree, that size doesn't matter, which Microsoft proved again and again... hehe\nIn the end it is about the right ideas and clever designs. I think a lot could be simplified by going \"all in\" with a socket/real time updates approach, which is more similar to desktop apps, and only use the REST part to interface with other systems (data API). For the REST part, a Rails like MVC system makes sense, but for the User Application part I think we need a radically different approach more like Angular with Firebase or Meteor etc.\nBonne chance! I wish you guys all the best :) \n. Would be nice with a complete example on setting up authentication with Tower. \n. Would be really nice to fill in the wiki with some example code on setting up authentication. I'd also like there to be a recipe for making Tower extensions (plugins) for example for various authentication solutions.\n. urlFor(route: \"login\") # I'm liking this one\n+1\nYeah, I'm \"all in\" with regards to Mongo ;) A major reason why I like the Tower framework :) So natural with JSON from client to server to DB, JSON which is by nature document structures. \nSo @viatropos, can you do a quick patch to implement this \"route-alias lookup\" feature for urlFor this weekend?\n. Hi there, are you still planning to add that feature or too busy? I wouldn't know where to start...\nThanks! Have a nice weekend!\n. _extractOptions:\n name            = @_extractName(options)\n_extractName: (options) ->\n    options.as || options.name\nSo name should already be set to the :as alias if defined as part of the route (DSL).\nBut where are the Routes registered? I assume it is some kind of Array of hashes?\nIn Tower.Support.String.urlFor I simply need to make a lookup in this registry. Would be nice if it was a hash, with the keys= the name of the route for fast lookup.\n. I've just pushed to my localization branch. Now with locales in coffee and also for model validations.\n. OK, I have been looking at the Roadmap for 0.4.1 and would like to help.\nkmandrup:tower (development) $ make test\nmake: Nothing to be done for `test'.\nkmandrup:tower (development) $ mocha\n\u2714 0 tests complete (1322ms)\nI got the tests running last time, but I forgot the magic keywords... can't find anything on the wiki page on how to run the tests.\nAnyways, would like to help out with these little tasks:\ngenerate test/models with example code for scaffold\ngenerate test/routes or test/controllers with example code for scaffold\nI know generators and rspec pretty well in Rails. \nIn Tower I see:\n- lib/tower/server/generator/generators/jasmine\n- lib/tower/server/generator/generators/mocha\nSo I guess you want better generators here somewhere?\n. I would really like to chat with you so I can better help contribute. Could you please log onto Skype or whichever channel you prefer, thanks :)\n. OK, I'm on the IRC channel... I'm reading through the wiki while trying to fix/improve it a little.\n. I will play around with that ;) It's a good little mini feature in order to get started contributing.\n. ``` coffeescript\nfields: (names..., options) ->\n  for name of names\n    @field name, options\n  @_fields   ||= {}\nset_fields: (attributes) ->\n  for name, options of attributes\n    @field name, options\n```\nin the test_app\ncoffeescript\nclass App.Address extends Tower.Model\n  @field \"coordinates\", type: \"Geo\"\n  @field \"street\"\n  @field \"city\"\n  @fields \"state\", \"zip\", type: 'String'\n  @fields \"other\", \"house\"\n  @set_fields my: \"String\", your: \"Integer\"\nCompiling manually and inserting\nTower.Model.Attributes = {\n  ClassMethods: {\n    fields: function() {\n      var name, names, options, _i;\n      names = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), options = arguments[_i++];\n      for (name in names) {\n        this.field(name, options);\n      }\n      return this._fields || (this._fields = {});\n    },\n    set_fields: function(attributes) {\n      var name, options, _results;\n      _results = [];\n      for (name in attributes) {\n        options = attributes[name];\n        _results.push(this.field(name, options));\n      }\n      return _results;\n    }\n$ npm test\n\u2714 373 tests complete (6533ms)\nNot sure how to merge the fields and set_fields method to handle all cases...\n. I made it work like this in js:\n``` javascript\n    fields: function() {\n      var name, names, options, _i, attributes, first_arg;\n  names = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), options = arguments[_i++];\n  first_arg = _.first(names) || names;\n\n  if (_.isEmpty(first_arg) || _.isString(first_arg)) {\n    // handle as array of strings        \n    for (name in names) {\n      this.field(name, options);\n    }\n  } else {\n    attributes = arguments;\n    // handle as hash of field_key, type\n    for (name in attributes) {\n      this.field(name, attributes[name]);\n    }                \n  }\n  return this._fields || (this._fields = {});\n}\n\n```\nI don't mind that developers have the option to write in more concise and DRY. You can never guard against ugly coding styles. \nI would think most developers would do sth like this:\n``` coffeescript\nclass App.User extends Tower.Model\n  @field 'id', type: 'Id'\n  @field likeCount: 'Integer'\n# strings\n  @fields 'firstName', 'middleName', 'lastName', 'email'\n# booleans\n  @fields 'active', 'admin', type: 'Boolean', default: false\n# dates\n  @fields 'activatedAt', 'createdAt', 'startDate', 'endDate', type: 'Date'\n```\nThe old alternative\n``` coffeescript\nclass App.User extends Tower.Model\n  @field 'id', type: 'Id'\n  @field likeCount: 'Integer'\n# strings\n  @field 'firstName'\n  @field 'middleName'\n  @field 'lastName'\n  @field 'email'\n# booleans\n  @field 'active', type: 'Boolean', default: false\n  @field 'admin', type: 'Boolean', default: false\n# dates\n  @field 'activatedAt', type: 'Date'\n  @field 'createdAt', type: 'Date'\n  @field 'startDate', type: 'Date'\n  @field 'endDate', type: 'Date'\n```\nReadable but a bit long and bloated IMO. At least now there is the option to write it shorter and more DRY. All power can be misused of course ;)\n. Another variant could be this:\ncoffeescript\nclass App.User extends Tower.Model\n  @id 'id'\n  @integers 'likeCount'\n  @strings 'firstName', 'middleName', 'lastName', 'email'\n  @booleans 'active', 'admin', default: false\n  @dates 'activatedAt', 'createdAt', 'startDate', 'endDate'\nFor the common built-in types. For other types use the field/fields or for custom types even have some hook to allow them to define their own smart type macro? Just some crazy ideas...\n. My attempt at a #strings macro\njavascript\n    strings: function(args) {\n      var names, options, _i;\n      names = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), options = arguments[_i++];\n      if (!options || _.isString(options))\n        options = {} \n      $.extend(options, {type: 'String'});\n      fields(names, options)\n    },\nThe #extend from jQuery should be able to merge objects, but I get:\nReferenceError: $ is not defined\n      at Function.strings (/Users/kmandrup/private/repos/tower/lib/tower/model/attributes.js:14:7)\n. I would actually like to make this available as an example of a Tower extension (plugin). \nWould be nice if you could help me do that and it would serve as a nice tutorial for Tower \"plugin development\" as well.\nI think you are correct, that it shouldn't be part of Tower core.\nCheers and Happy Easter!\n. I have now tried to create such a Tower plugin as a Node.js module.\nPlease see it here and let me know what you think. I'm not yet sure how to write the tests and how to test it :P\nhttps://github.com/kristianmandrup/tower_fields\nWhen I get this working I will move on and try to make a plugin for Passport authentication.\n. I think that the $ syntax is part of mongoose which is using the native Mongo DB query. Mongoid and other Mongo-Rails mappers provide a layer on top of this query syntax to make it more AR-like. Mongo DB is not a relational DB, and so I don't think rel would work.\nIf this syntax is a hurdle, consider wrapping the Mongo advanced query API and make it a Tower plugin/extension. Just my take on it. I did this for the Geo parts of MongoDB that became a Mongoid extension (mongoid_spatial gem).\nhttp://www.mongodb.org/display/DOCS/Querying\nhttp://www.mongodb.org/display/DOCS/Advanced+Queries\n. Here is my untested attempt at wrapping the Passport configuration in a more Object Oriented way. \nFeel free to modify as needed:\n``` coffeescript\nclass App extends Tower.Application\n  @configure ->\n    # ...\n    @use 'bodyParser'\n    @use 'cookieParser', Tower.config.session.key\n    @use 'session', secret: Tower.config.session.secret, store: new Tower.Store.Mongo()\n@auth = new Tower.Auth.Passport(@)\n\n# middleware\n@use Tower.Middleware.Agent\n@use Tower.Middleware.Location\n\nTower.Store.Mongo extends Tower.Class\n  constructor: (options = {}) ->\n    @initialize options\n# cookie: {domain: \".\" + Tower.config.session.cookie.domain}\n  initialize: (options = {}) ->\n    require './databases'\n    @mongostore = .extend Tower.Store.MongoDB.config[Tower.env]\n    @mongostore.db = @mongostore.name\n    delete @mongostore.name\n    new MongoStore(@mongostore, .extend(options, store_options) \nstore_options: ->\n    cookie: {domain: \".\" + Tower.config.session.cookie.domain}\nPassport configuration\nTower.Auth = {}\nclass Tower.Auth.Passport extends Tower.Class\n  @configure: ->  \n    @app.use passport.initialize()\n    @app.use passport.session()\n    @passport = @app.passport\nstrategy: (name) ->\n    strategy_found = Tower.Auth.Passport[_.camelize(name)]\n    throw Error \"Passport strategy #{name} not defined\" if not strategy_found\n    strategy_found\nconstructor: (app) ->\n    @initialize app\ninitialize: (app, strategies) ->\n    @app = app\n    @configure\n    new Tower.Auth.Passport.strategy(name)(@passport)  \nclass Tower.Auth.Passport.Strategy extends Tower.Class\n  constructor: (passport) ->\n    @initialize passport\ninitialize: (passport) ->\n    passport.serializeUser (user, done) ->\n      done null, user.get('id').toString()\npassport.deserializeUser (id, done) ->\n  global.App.User.find id, (error, user) ->\n    done error, user\n\nclass Tower.Auth.Passport.Facebook extends Tower.Auth.Passport.Strategy\n  constructor: (passport) ->\n    @initialize passport\ninitialize: (passport) ->\n    super(passport)\n    new Routes(passport)\nclass Tower.Auth.Passport.Facebook.Routes extends Tower.HTTP.Route\n  constructor: (passport) ->\n    @initialize passport\ninitialize: (passport) ->\n    get \"/auth/facebook\", passport.authenticate(\"facebook\"), (request, response) ->\n      # The request will be redirected to Facebook for authentication\nget \"/auth/facebook/callback\", passport.authenticate(\"facebook\", failureRedirect: \"/login\"), (request, response) ->\n  response.redirect \"/\"\n\n``\n. Thanks. Likely should beRoutes.draw` ?\n. Great :) I think the problem lies in openid as you point out :) Would be great with some more sample implementations of PassPort integration and similar auth solutions :) Let us know if the openid patch solves your problem.\n. Are you using this one? https://github.com/liamcurry/passport-steam\n. Cool :) Could you share your \"full\" passport setup example on a gist or something ;)\n. Way to go! :) This is excellent news... \nWould be nice with a small sample application illustrating authentication setup this way. Then we could mix in an authorization solution later perhaps ;) \n``` coffeescript\nif can(current_user, :read, @post)\n  # render some template\nelse\n  # render some other template or perhaps no template?\nor perhaps\nif current_user.can(:read).the(@post)\nif current_user.can(:read).all_the(@posts)\nif current_user.can(:read).any_of_the(@posts)\n```\nhttps://github.com/ryanb/cancan/wiki/Defining-Abilities\ncoffeescript\nTower.Authorization.Cannibal extends Class\n  can -> (user, actions, models)\n    ...\n  cannot -> (user, actions, models)    \n    !can(user, actions, models)\ncoffeescript\nMyApp.Ability extends Tower.Cannibal.Ability\n  initialize -> (subject, options = {})\n    subject.can('read').any(Post)\ncoffeescript\nTower.Cannibal.Ability extends Class\n     can -> (actions)\n        action_rule = new Tower.Cannibal.ActionRule(actions)\n        @rules.concat action_rule if action_rule\n``` coffeescript\nTower.Cannibal.ActionRule extends Class\n    initialize -> (actions)\n      @actions = actions\n any -> (model_classes)\n   @model_classes = model_classes\n   new Rule(@)\n\n the -> (model)\n   @model = model\n   new Rule(@)\n\n all_the ->\n any_of_the ->\n\n```\n``` coffeescript\nsimilar to CanCan Rule\nTower.Cannibal.Rule extends Class\n  initialize -> (options = {})\n# other can be an object or functio returning object for relation\n  by -> (method_name, other)\n# fun is a function\n  when -> (fun)\n```\nJust some initial ideas ;)\n. I will get on it today. I agree, but I think it could be much better, especially the DSL could be improved and no reason why it should be limited to operate on current_user only.\n. Here is my attempt at porting a subset of CanCan:\nhttps://github.com/kristianmandrup/beer_can\nNote, no tests and surely some pieces missing. Is all I had time for now (grunt work). Cheers!\n. I've just made a lot of fixes to BeerCan so I think it now provides a pretty good foundation for a CanCan-like Authorization implementation. Just needs some more love and care from someone more expert in Tower, coffeescript and javascript frameworks... The basic tests/specs should now be in place.\n. Now finally starting to look usable ;) ttyl. Have a nice wkend.\n. I've now setup beer_can with jasmine and coffeescript-guard for BDD. This in turn has let me debug and fix the syntax errors. However I still have problems running jasmine (via ruby). \nI'm still not able to load the beer_can module from spec_helper before running each individual spec. \nCould you have a look? Thanks.\nhttps://github.com/kristianmandrup/beer_can\n. +1 \" new node compatible port of cssmin\"\n. Excellent :)\n. See https://github.com/visionmedia/express/issues/867\nAnd https://github.com/visionmedia/express/commit/75c29bd42a809f33ff84738f93aa7acc4c955cae\nNot it's just var app = express();\n. In tower/lib/tower/server/application.js line 87\nthis.server || (this.server = require('express').createServer());\nshould likely just be:\nthis.server || (this.server = require('express'));\n. Recently someone added some nice socket.io changes/features. I'm sure whoever did these commits could help you get on the right track...\n. I searched on socket.io in the tower repo:\ntower/server/application.js L194: \ncoffeescript\n      this.io || (this.io = require('socket.io').listen(this.server));\nLooks like the use of the 'socket.io' library is currently hardcoded\nBut I'm sure you could make it more flexible... perhaps something like:\n``` coffeescript\nTower.libs.register('socket') = require('socket.io')\nmuch later\nthis.io || (this.io = Tower.lib('socket').listen(this.server));\n```\nJust some wild ideas :P\nNote: This libs infrastructure is NOT in place, just an idea...\n. Would it be possible to create some kind of Tower adapter to encapsulate the main API of different socket solutions?\n. Sweet :)\n. \"Authentication so far, though I might add some stuff to make it more of an Authentication Library backed by passport, instead of just being powered by passport. But I'll try to make it modular so that someone can use their own implementation of an authentication or should it be bolted in?\" \nHmm, we had some discussion about Auth libraries previously in a different issue thread I think. Maybe you can get some input from there and pseudo-code etc. as well for inspiration. I think it would be nice if Tower came with a simple Auth lib \"built-in\" while still making it easy to extend this or add a custom one. This is such core functionality for almost any web app. I also see a strong move to using Auth provider solutions over having a complete \"auth solution\" in every app... Nice to her that my BeerCan project was useful. I never got around to finish it off.. Cheers!\n. So did this get completely resolved now? Do we have a socket solution with security i.e. authentication/authorization that can be configured on top or what? I'm just starting to get back on board with Tower again... Now with some basic knowledge of Node, Express etc. I'm ready to dig in this time!\n. Wow! Thanks a lot for the update @TheHydroImpulse :)\nIt looks like you are definitely on the right track with many of these development!! I embrace the fact that you dropped Ember.js. I spent a month trying to get my grips on it and then pulled away and never looked back. I also felt it was way to inflexible for customization etc.\nExcited about Koa and Co. You might consider Bacon.js as weel to simplify working with event steams.\nI'll defintiely look more into Tower and see if I can contribute! Great work guys :)\n. I am curious to know why you decided to implement your own directives implementation similar to fx Angular and Derby and not just let the user leverage Angular directives (via Angular) if he so chooses? \n. Awesome! I think it's the right way to proceed and move forward. We keep learning from past mistakes and other frameworks that get bogged down by complexity and become too monolithic... I'm just learning the power of TRUE functional programming done right, like Bacon.js and others, fx using currying to tidy up and making the code super pretty and DRY.\nhttp://hughfdjackson.com/javascript/2013/07/06/why-curry-helps/\nhttps://github.com/CrossEye/ramda\nhttp://allong.es/\nhttps://github.com/baconjs/bacon.js\nI think using this style of coding is the future for sure and would be a great addition to your framework. Is the style that all frameworks need now in order to move forward I think. OK, sorry, I know this is not the forum for this kind of discussion - but just very excited to have my eyes opened to a radically different but beautiful new style of coding that is so sweet :)\nWhen I'm up to speed with this new style I will gladly help out and use your framework and start improving documentation and main screencasts. Haven't been so excited since I switched from Java to Ruby and then Rails... and lately to Node.js. Cheers!\njavascript\nreturn mapWith(maybe(getWith('name')))(customerList);\nInstead of:\njavascript\nreturn customerList.map(function (customer) { if (customer) {\nreturn customer.name }\n});\n. Unfortunately.... most frameworks die a slow death :( I think the best we can do sometimes, is to salvage the best pieces and start up something new combining the best approaches from multiple frameworks etc.\nIt is very hard to sustain the motivation for huge projects like this unless you have a lot of community support, but most users are just leechers and not contributors. Such is the fact of open source. Coz large projects take a huge effort to really dig into and contribute to in most cases... I think the whole idea of trying to design frameworks to cover the whole spectrum are doomed to fail in the end, unless you got huge corporate backing to boot like Google etc.\nBetter to have smaller, self contained, specialize frameworks and them combine them as you like IMO\nWhich as the philosophy of this (and many other frameworks) but which is rarely \"really\" achieved...\n. Wow! Great to hear that you are beginning to have it divided into many more smaller parts. I made the same realization a few times by now, when I also hit the wall with too big projects that I could no longer mentally manage.\nWhen even the author of a project can no longer cope with the size of the project, it definitely is a warning that it is time to split it up into smaller, self-contained modules that can be managed individually. I agree, that size doesn't matter, which Microsoft proved again and again... hehe\nIn the end it is about the right ideas and clever designs. I think a lot could be simplified by going \"all in\" with a socket/real time updates approach, which is more similar to desktop apps, and only use the REST part to interface with other systems (data API). For the REST part, a Rails like MVC system makes sense, but for the User Application part I think we need a radically different approach more like Angular with Firebase or Meteor etc.\nBonne chance! I wish you guys all the best :) \n. ",
    "winfred": "Hmm, I can't replicate this with the most recent code. I dunno about the npm package, but it's probably best to use dev code and help out while the project is still still <1.0.\nDo you still see this after npm linking to a local tower dev branch?\n. This isn't specific to Tower.\nThose are issues for underscore.string and moment. Specifically, they haven't updated the NPM package to include the newer NPM constraint of hash-based dependency references. Look in your node_modules/underscore.string/package.json to see that it still says \njavascript\n...\n \"dependencies\": [],\n...\nhttp://search.npmjs.org/#/underscore.string\n. Hmm, I can't replicate this with the most recent code. I dunno about the npm package, but it's probably best to use dev code and help out while the project is still still <1.0.\nDo you still see this after npm linking to a local tower dev branch?\n. This isn't specific to Tower.\nThose are issues for underscore.string and moment. Specifically, they haven't updated the NPM package to include the newer NPM constraint of hash-based dependency references. Look in your node_modules/underscore.string/package.json to see that it still says \njavascript\n...\n \"dependencies\": [],\n...\nhttp://search.npmjs.org/#/underscore.string\n. ",
    "activestylus": "Running this on edge does indeed fix the issue. Cheers!\n. I fixed this error by installing npm package within my app. It is worth mentioning that the first time failed because the generated app did not include knox in the package.json\nNow I am facing the problem of missing cake task. I had assumed that the coffee an spec tasks were included in core but when I try to run them cake complains\ncake coffee\nNo such task: coffee\nWas looking at the towerjs demo app and the Cakefile is the same as mine. What am I missing?\n. Yes running node server does indeed fire up design.io. I can even see my changes taking place in realtime in the console. The only problem is that I dont see these changes when I look at the browser, no matter how many times I reload or clear the cache. Here's what happens when I edit a page title from \"New Site\" to \"New Sitez\"\n```\n[Sat, 03 Mar 2012 12:06:47 GMT] INFO updated app/views/sites/new.coffee\ninfo:  Name: design.io-watcher::wordup exec                                     Type: hook            Data: {\"body\":\"contentFor \\\"title\\\", \\\"New Sitez\\\"\\n\\npa ... \ninfo:  Name: design.io-watcher::wordup-0 design.io-watcher::wordup-0::exec        Type: hook            Data: {\"body\":\"contentFor \\\"title\\\", \\\"New Sitez\\\"\\n\\npa ... \n[Sat, 03 Mar 2012 12:06:48 GMT] INFO updated public/javascripts/app/views/templates.js\n  Processing by SitesController#new as HTML\n  Parameters:\n{ format: null, action: 'new' }\nGET /sites/new\n  response time: 42ms\n  memory rss: 3.94mb\n  memory vsize: NaNgb\n  heap before: 16.09mb / 18.12mb\n  heap after: 18.51mb / 22.22mb\n``\n. I've pushed a copy of my test app to github so you can have a poke at it: https://github.com/activestylus/towerjs-test\n. I neglected to add that if I restart the tower server, I can see my changes in the browser. Let me know if you need any other info\n. I am closing this issue and starting a new one to address the current problem since the original issue has been resolved\n. Working. Thanks!\n. OK thanks for clearing that up!\n. Still not working. Here is what I did, starting from scratch\n1.npm install design.io -g2.npm install tower -g3.design.io start4. New terminal window\n5.tower new design-test && cd design-test6.npm install -d7.tower server -p 3000`\nAt this point the app is running. But no matter what changes I make, whether it's to view templates or application.styl, they are not reflected in the browser (even after refreshing) I manually updated design.io.js and no luck there either.\nFWIW I got this working with plain old Express and a simple kckr install https://github.com/pthrasher/kckr\n. Just a heads up - I updated tower.js and design.io and this is no longer a problem. I am facing a whole other issue now but its worth opening another ticket for that. Cheers\n. Yes, the design.io process was started in a separate terminal session, you can see the output above, followed by the log output of tower server. As a habit I tend to install dependencies locally with npm install -d and I ran design.io start from the app's directory\nMind you the templates are changing when I refresh the page, but design.io only succeeds in changing the URL in my active browser window whenever I save\n. OK it's definitely working when I change app/client/stylesheets/application.styl. Works a treat - the page is updated and design.io does not change my URL\nHowever I when I change app/client/config/application.coffee I face the same problem as with my views. No alert shows, the only thing that changes is the browser's URL (I'm using Chrome FWIW)\nAre you able to replicate?\n. I made a quick screencast with iShowU: http://www.filedropper.com/design-io-test\n. Yes that helps a great deal. Thanks for the prompt replies and good luck with these new features. The view refresh probably deserves the most attention since it makes development a bit of a pain (cant refresh currently active page if the url is changed)\n. Reopening for now so I get pinged when you fix the url issue\n. After further poking, the culprit is definitely design.io. It takes up not only all my RAM, but also 94% of my CPU, leaving my OS all wonky. Eventually the process crashes.\nAlso figured out this happens even when design.io is on its own. Must have some sort of blocking going on in that lib\n. Okay so its not just design.io - plain old tower server process eventually eats into all available ram/cpu.\n. Ok so when I start the server, two node processes are fired up. One of them hovers around 35MB memory usage. Here is the one that eats up all the RAM (inspect from Activity Monitor)\n```\n/Users/homebass/Desktop/Code/node/apps/wordup\n/Users/homebass/local/bin/node\n/usr/lib/libutil1.0.dylib\n/Users/homebass/Desktop/Code/node/apps/wordup/node_modules/forever/node_modules/daemon/lib/daemon.v0.6.13-pre.node\n/Users/homebass/Desktop/Code/node/apps/wordup/node_modules/forever/node_modules/node-fork/lib/createpair.v0.6.13-pre.node\n/Users/homebass/Desktop/Code/node/apps/wordup/node_modules/forever/node_modules/microtime/build/Release/microtime.node\n/Users/homebass/Desktop/Code/node/apps/wordup/node_modules/design.io/node_modules/hook.io/node_modules/weak/build/Release/weakref.node\n/usr/lib/dyld\n/private/var/db/dyld/dyld_shared_cache_x86_64\n->0x0e5b7bc0\n->0x0e5b64b4\n->0x0e5b5d48\ncount=1, state=0\n->0x0e5b70d0\n->0x0e5b62c0\n/Users/homebass/.forever/lX2v.log\nadobe-dns-4.adobe.com:commplex-main\n/Users/homebass/.forever/4D-9.log\n/Users/homebass/Desktop/Code/node/apps/wordup/public/stylesheets/app/client/controllers/sitesController.coffee\n/Users/homebass/.forever/gMNX.log\n/Users/homebass/.forever/sock/worker.1335863482251554.sock\n->0x0acfef3c\n->0x0e5b56a4\n/Users/homebass/Desktop/Code/node/apps/wordup/public/javascripts/app/client/controllers/sitesController.js\n->0x08a5b7d8\n``\n. Interesting - does the tower server itself call design.io or hook.io? Because I had similar issues just runningtower server`\n. Any luck?\n. Yeah I have to admit the memory thing has kept me from using this for anything more than a sandbox/playground.\nHere's the thing - I have no need whatsoever for design.io (as cool as it is) My current setup leverages LiveReload. Perhaps in the future this should be more of an add-on for tower, rather than integrate it with the server. Ideally I would be able to use it without design.io at all.\n. Ok just updated tower npm install tower -g and generated a new app. CD'd into the app and ran npm install and for some reason it still tries to install design.io. (note: errors are because i didnt run it with sudo)\n```\n\ndesign.io@0.3.1 install /Users/homebass/Desktop/Code/node/apps/skyscraper/node_modules/design.io\ngem install rb-fsevent rb-inotify --no-ri --no-rdoc\n\nFetching: rb-fsevent-0.9.1.gem (100%)\nERROR:  While executing gem ... (Gem::FilePermissionError)\n    You don't have write permissions into the /Users/homebass/.rvm/gems/ruby-1.9.3-p194-falcon directory.\nnpm ERR! error installing design.io@0.3.1\n...\nnpm not ok\n```\n. Running a test app right now. HUGE difference! Currently looking at a memory footprint of about 27MB which is a welcome change from the 3GB it was eating up before. All we need to do now is make sure that design.io is not packaged with tower on install and this issue can be closed. Nice work!\nbtw - I love how you've tweaked the logger so we can see memory usage for each request. Very useful\n. I used to just run ps aux but nowadays I opt for OS X's Activity Monitor (in the Applications/Utility folder) I like being able to sort the list and pole around at the processes.\n. Hey Lance, glad to hear you are moving on this.\nIt is hard for me to comment on node based build systems as I rely on Sprockets + LiveReload\nI do agree that keeping it all js based is the smart thing to do, and YES you should minimize any dependencies.\nWhat I can do this week is play around with grunt and a few others and give you some feedback.\n. A little inspiration for you - yes its Ruby but it appears to implement a simple middlewear which injects the free version of LiveReload into your scripts. It has worked pretty well for me - the memory usage is practically nil too.\nhttps://github.com/guard/guard-livereload\n. Sweet\n. Running this on edge does indeed fix the issue. Cheers!\n. I fixed this error by installing npm package within my app. It is worth mentioning that the first time failed because the generated app did not include knox in the package.json\nNow I am facing the problem of missing cake task. I had assumed that the coffee an spec tasks were included in core but when I try to run them cake complains\ncake coffee\nNo such task: coffee\nWas looking at the towerjs demo app and the Cakefile is the same as mine. What am I missing?\n. Yes running node server does indeed fire up design.io. I can even see my changes taking place in realtime in the console. The only problem is that I dont see these changes when I look at the browser, no matter how many times I reload or clear the cache. Here's what happens when I edit a page title from \"New Site\" to \"New Sitez\"\n```\n[Sat, 03 Mar 2012 12:06:47 GMT] INFO updated app/views/sites/new.coffee\ninfo:  Name: design.io-watcher::wordup exec                                     Type: hook            Data: {\"body\":\"contentFor \\\"title\\\", \\\"New Sitez\\\"\\n\\npa ... \ninfo:  Name: design.io-watcher::wordup-0 design.io-watcher::wordup-0::exec        Type: hook            Data: {\"body\":\"contentFor \\\"title\\\", \\\"New Sitez\\\"\\n\\npa ... \n[Sat, 03 Mar 2012 12:06:48 GMT] INFO updated public/javascripts/app/views/templates.js\n  Processing by SitesController#new as HTML\n  Parameters:\n{ format: null, action: 'new' }\nGET /sites/new\n  response time: 42ms\n  memory rss: 3.94mb\n  memory vsize: NaNgb\n  heap before: 16.09mb / 18.12mb\n  heap after: 18.51mb / 22.22mb\n``\n. I've pushed a copy of my test app to github so you can have a poke at it: https://github.com/activestylus/towerjs-test\n. I neglected to add that if I restart the tower server, I can see my changes in the browser. Let me know if you need any other info\n. I am closing this issue and starting a new one to address the current problem since the original issue has been resolved\n. Working. Thanks!\n. OK thanks for clearing that up!\n. Still not working. Here is what I did, starting from scratch\n1.npm install design.io -g2.npm install tower -g3.design.io start4. New terminal window\n5.tower new design-test && cd design-test6.npm install -d7.tower server -p 3000`\nAt this point the app is running. But no matter what changes I make, whether it's to view templates or application.styl, they are not reflected in the browser (even after refreshing) I manually updated design.io.js and no luck there either.\nFWIW I got this working with plain old Express and a simple kckr install https://github.com/pthrasher/kckr\n. Just a heads up - I updated tower.js and design.io and this is no longer a problem. I am facing a whole other issue now but its worth opening another ticket for that. Cheers\n. Yes, the design.io process was started in a separate terminal session, you can see the output above, followed by the log output of tower server. As a habit I tend to install dependencies locally with npm install -d and I ran design.io start from the app's directory\nMind you the templates are changing when I refresh the page, but design.io only succeeds in changing the URL in my active browser window whenever I save\n. OK it's definitely working when I change app/client/stylesheets/application.styl. Works a treat - the page is updated and design.io does not change my URL\nHowever I when I change app/client/config/application.coffee I face the same problem as with my views. No alert shows, the only thing that changes is the browser's URL (I'm using Chrome FWIW)\nAre you able to replicate?\n. I made a quick screencast with iShowU: http://www.filedropper.com/design-io-test\n. Yes that helps a great deal. Thanks for the prompt replies and good luck with these new features. The view refresh probably deserves the most attention since it makes development a bit of a pain (cant refresh currently active page if the url is changed)\n. Reopening for now so I get pinged when you fix the url issue\n. After further poking, the culprit is definitely design.io. It takes up not only all my RAM, but also 94% of my CPU, leaving my OS all wonky. Eventually the process crashes.\nAlso figured out this happens even when design.io is on its own. Must have some sort of blocking going on in that lib\n. Okay so its not just design.io - plain old tower server process eventually eats into all available ram/cpu.\n. Ok so when I start the server, two node processes are fired up. One of them hovers around 35MB memory usage. Here is the one that eats up all the RAM (inspect from Activity Monitor)\n```\n/Users/homebass/Desktop/Code/node/apps/wordup\n/Users/homebass/local/bin/node\n/usr/lib/libutil1.0.dylib\n/Users/homebass/Desktop/Code/node/apps/wordup/node_modules/forever/node_modules/daemon/lib/daemon.v0.6.13-pre.node\n/Users/homebass/Desktop/Code/node/apps/wordup/node_modules/forever/node_modules/node-fork/lib/createpair.v0.6.13-pre.node\n/Users/homebass/Desktop/Code/node/apps/wordup/node_modules/forever/node_modules/microtime/build/Release/microtime.node\n/Users/homebass/Desktop/Code/node/apps/wordup/node_modules/design.io/node_modules/hook.io/node_modules/weak/build/Release/weakref.node\n/usr/lib/dyld\n/private/var/db/dyld/dyld_shared_cache_x86_64\n->0x0e5b7bc0\n->0x0e5b64b4\n->0x0e5b5d48\ncount=1, state=0\n->0x0e5b70d0\n->0x0e5b62c0\n/Users/homebass/.forever/lX2v.log\nadobe-dns-4.adobe.com:commplex-main\n/Users/homebass/.forever/4D-9.log\n/Users/homebass/Desktop/Code/node/apps/wordup/public/stylesheets/app/client/controllers/sitesController.coffee\n/Users/homebass/.forever/gMNX.log\n/Users/homebass/.forever/sock/worker.1335863482251554.sock\n->0x0acfef3c\n->0x0e5b56a4\n/Users/homebass/Desktop/Code/node/apps/wordup/public/javascripts/app/client/controllers/sitesController.js\n->0x08a5b7d8\n``\n. Interesting - does the tower server itself call design.io or hook.io? Because I had similar issues just runningtower server`\n. Any luck?\n. Yeah I have to admit the memory thing has kept me from using this for anything more than a sandbox/playground.\nHere's the thing - I have no need whatsoever for design.io (as cool as it is) My current setup leverages LiveReload. Perhaps in the future this should be more of an add-on for tower, rather than integrate it with the server. Ideally I would be able to use it without design.io at all.\n. Ok just updated tower npm install tower -g and generated a new app. CD'd into the app and ran npm install and for some reason it still tries to install design.io. (note: errors are because i didnt run it with sudo)\n```\n\ndesign.io@0.3.1 install /Users/homebass/Desktop/Code/node/apps/skyscraper/node_modules/design.io\ngem install rb-fsevent rb-inotify --no-ri --no-rdoc\n\nFetching: rb-fsevent-0.9.1.gem (100%)\nERROR:  While executing gem ... (Gem::FilePermissionError)\n    You don't have write permissions into the /Users/homebass/.rvm/gems/ruby-1.9.3-p194-falcon directory.\nnpm ERR! error installing design.io@0.3.1\n...\nnpm not ok\n```\n. Running a test app right now. HUGE difference! Currently looking at a memory footprint of about 27MB which is a welcome change from the 3GB it was eating up before. All we need to do now is make sure that design.io is not packaged with tower on install and this issue can be closed. Nice work!\nbtw - I love how you've tweaked the logger so we can see memory usage for each request. Very useful\n. I used to just run ps aux but nowadays I opt for OS X's Activity Monitor (in the Applications/Utility folder) I like being able to sort the list and pole around at the processes.\n. Hey Lance, glad to hear you are moving on this.\nIt is hard for me to comment on node based build systems as I rely on Sprockets + LiveReload\nI do agree that keeping it all js based is the smart thing to do, and YES you should minimize any dependencies.\nWhat I can do this week is play around with grunt and a few others and give you some feedback.\n. A little inspiration for you - yes its Ruby but it appears to implement a simple middlewear which injects the free version of LiveReload into your scripts. It has worked pretty well for me - the memory usage is practically nil too.\nhttps://github.com/guard/guard-livereload\n. Sweet\n. ",
    "CoderBounty": "A bounty has been placed on this issue, check it out at Coder Bounty! http://coderbounty.com/#14\n. activestylus, you have won a bounty at Coder Bounty!  Login and verify your Github username to claim it.  http://coderbounty.com\n. A bounty has been placed on this issue, check it out at Coder Bounty! http://coderbounty.com/#14\n. activestylus, you have won a bounty at Coder Bounty!  Login and verify your Github username to claim it.  http://coderbounty.com\n. ",
    "elmacnifico": "same problem here...the example app doesn't have any csrf fields in the forms either but seems to work...were is my mistake?\n. same problem here...the example app doesn't have any csrf fields in the forms either but seems to work...were is my mistake?\n. ",
    "yusugomori": "You can manually put\ninput type: \"hidden\", name: \"_csrf\", value: @request.session._csrf\nin the form.\n. Ah, got it. I mistook the code.\nSo, just using node server with\n$ node server.js -e production\ncan't fix the problem (still trying to find a way to serve application/x-gzip),\nbut using nginx, or I can say setting nginx.conf, will fix it.\n. I wrote sample codes on gist.\nChek them on\nconfig/application.coffee\nhttps://gist.github.com/2318167\nconfig/initializers/authentication.coffee\nhttps://gist.github.com/2318237\napp/models/user.coffee\nhttps://gist.github.com/2318251\nI hope it will help.\nComments are written in Japanese, so feel free to ask me questions.\n. You can manually put\ninput type: \"hidden\", name: \"_csrf\", value: @request.session._csrf\nin the form.\n. Ah, got it. I mistook the code.\nSo, just using node server with\n$ node server.js -e production\ncan't fix the problem (still trying to find a way to serve application/x-gzip),\nbut using nginx, or I can say setting nginx.conf, will fix it.\n. I wrote sample codes on gist.\nChek them on\nconfig/application.coffee\nhttps://gist.github.com/2318167\nconfig/initializers/authentication.coffee\nhttps://gist.github.com/2318237\napp/models/user.coffee\nhttps://gist.github.com/2318251\nI hope it will help.\nComments are written in Japanese, so feel free to ask me questions.\n. ",
    "jipiboily": "I think that should have been reported here instead: https://github.com/viatropos/towerjs.org/issues\n. I think that should have been reported here instead: https://github.com/viatropos/towerjs.org/issues\n. ",
    "tomchentw": "[ Edited ]\nAfter trying the fix at the correct line, it solved. Thanks !!!\n\nI'm not sure if I got the same issue here...\nI've tried :\ntower new app\ncd app\ntower generate scaffold Post title:string body:text belongsTo:user\ntower generate scaffold User email:string firstName:string lastName:string hasMany:posts\nthen starting the server.\nHowever, when I first click the \"user\" navigation on the top bar, it redirects to /users => index right?\nNow, I click \"post\" and navigate to /posts => index, but here comes the problem:\n1. The title is not refreshed to \"Posts\"\n2. The content of table > tbody is all the script include tag, which should be loaded outside the table tag.\nWhat can I do now...? Thanks!\n. Just a little suggestion: @viatropos maybe u'll like what rails_admin do?\nhttps://github.com/sferik/rails_admin\nheres the demo site\nhttp://rails-admin-tb.herokuapp.com/admin/team/new\na searchable dropdown for belongsTo\na two column widget for hasMany\n. [ Edited ]\nAfter trying the fix at the correct line, it solved. Thanks !!!\n\nI'm not sure if I got the same issue here...\nI've tried :\ntower new app\ncd app\ntower generate scaffold Post title:string body:text belongsTo:user\ntower generate scaffold User email:string firstName:string lastName:string hasMany:posts\nthen starting the server.\nHowever, when I first click the \"user\" navigation on the top bar, it redirects to /users => index right?\nNow, I click \"post\" and navigate to /posts => index, but here comes the problem:\n1. The title is not refreshed to \"Posts\"\n2. The content of table > tbody is all the script include tag, which should be loaded outside the table tag.\nWhat can I do now...? Thanks!\n. Just a little suggestion: @viatropos maybe u'll like what rails_admin do?\nhttps://github.com/sferik/rails_admin\nheres the demo site\nhttp://rails-admin-tb.herokuapp.com/admin/team/new\na searchable dropdown for belongsTo\na two column widget for hasMany\n. ",
    "awnist": "can confirm that scaffolding seems broken as @tomap41017 is describing. Getting inconsistent templates depending on order.\n. can confirm that scaffolding seems broken as @tomap41017 is describing. Getting inconsistent templates depending on order.\n. ",
    "marvin": "npm version is 1.1.2 and node is v0.6.12-pre\ninstallation was fine and I created a new tower app via \n    tower new towertestapp\nwhen i tried to start it via node server.js it told me mongodb was missing, I installed it and then it told me forever was missing, installed that too.\nthen node server.js is working and I can acces the welcome page\nsystem is ubuntu 11.10 by the way\n. didnt know that. will try that out! thanks\n. alright did the tower new towertestapp and ran npm install and i get the following\n```\n\nmicrotime@0.2.0 install /home/david/development/towertestapp/node_modules/forever/node_modules/microtime\nnode-waf configure build\n\nTraceback (most recent call last):\n  File \"/usr/local/bin/node-waf\", line 14, in \n    import Scripting\nImportError: No module named Scripting\nnpm ERR! error installing microtime@0.2.0\nnpm ERR! error installing forever@0.8.5\nnpm http GET https://registry.npmjs.org/mkdirp\nnpm ERR! error rolling back forever@0.8.5 Error: UNKNOWN, unknown error '/home/david/development/towertestapp/node_modules/forever/node_modules/___flatiron.npm/package/examples'\nnpm ERR! microtime@0.2.0 install: node-waf configure build\nnpm ERR! sh \"-c\" \"node-waf configure build\" failed with 1\nnpm ERR! \nnpm ERR! Failed at the microtime@0.2.0 install script.\nnpm ERR! This is most likely a problem with the microtime package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     node-waf configure build\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls microtime\nnpm ERR! There is likely additional logging output above.\nnpm ERR! \nnpm ERR! System Linux 3.0.0-16-generic\nnpm ERR! command \"node\" \"/usr/local/bin/npm\" \"install\"\nnpm ERR! cwd /home/david/development/towertestapp\nnpm ERR! node -v v0.6.12-pre\nnpm ERR! npm -v 1.1.2\nnpm ERR! code ELIFECYCLE\nnpm ERR! message microtime@0.2.0 install: node-waf configure build\nnpm ERR! message sh \"-c\" \"node-waf configure build\" failed with 1\nnpm ERR! errno {}\nnpm http GET https://registry.npmjs.org/lru-cache\nnpm ERR! Error: ENOENT, no such file or directory '/home/david/development/towertestapp/node_modules/forever/node_modules/utile.npm/package/lib/file.js'\nnpm ERR! You may report this log at:\nnpm ERR!     http://github.com/isaacs/npm/issues\nnpm ERR! or email it to:\nnpm ERR!     npm-@googlegroups.com\nnpm ERR! \nnpm ERR! System Linux 3.0.0-16-generic\nnpm ERR! command \"node\" \"/usr/local/bin/npm\" \"install\"\nnpm ERR! cwd /home/david/development/towertestapp\nnpm ERR! node -v v0.6.12-pre\nnpm ERR! npm -v 1.1.2\nnpm ERR! path /home/david/development/towertestapp/nodemodules/forever/node_modules/_utile.npm/package/lib/file.js\nnpm ERR! fstream_path /home/david/development/towertestapp/node_modules/forever/node_modules/utile.npm/package/lib/file.js\nnpm ERR! fstreamtype File\nnpm ERR! fstream_class FileWriter\nnpm ERR! code ENOENT\nnpm ERR! message ENOENT, no such file or directory '/home/david/development/towertestapp/node_modules/forever/node_modules/_utile.npm/package/lib/file.js'\nnpm ERR! errno {}\nnpm ERR! fstream_stack Object.oncomplete (/usr/local/lib/node_modules/npm/node_modules/fstream/lib/writer.js:204:26)\nnpm ERR! \nnpm ERR! Additional logging details can be found in:\nnpm ERR!     /home/david/development/towertestapp/npm-debug.log\nnpm not ok\n```\n. good stuff will do. thanks for your help\n. upgrade node to v0.6.12 and update npm\ndid npm cache clean and ran npm install within the project folder again and getting\n```\nnpm http GET https://registry.npmjs.org/loggly\nnpm http GET https://registry.npmjs.org/stack-trace\nnot found \n/home/david/development/towertestapp/node_modules/design.io/node_modules/hook.io/node_modules/mdns/wscript:28: error: the configuration failed (see '/home/david/development/towertestapp/node_modules/design.io/node_modules/hook.io/node_modules/mdns/out/config.log')\nnpm ERR! error installing mdns@0.0.5\nnpm ERR! error installing hook.io@0.8.7-1\nnpm http 304 https://registry.npmjs.org/ini\nnpm ERR! error rolling back hook.io@0.8.7-1 Error: UNKNOWN, unknown error '/home/david/development/towertestapp/node_modules/design.io/node_modules/hook.io/node_modules/___npm.npm/package/lib/utils/npm-registry-client'\nnpm ERR! error installing design.io@0.3.0-6\nnpm http 304 https://registry.npmjs.org/stack-trace\nnpm ERR! Error: ENOENT, no such file or directory '/home/david/development/towertestapp/node_modules/design.io/node_modules/hook.io/node_modules/socket.io-client.npm/package/lib/vendor/web-socket-js/flash-src/com/hurlant/crypto/symmetric/NullPad.as'\nnpm ERR! You may report this log at:\nnpm ERR!     http://github.com/isaacs/npm/issues\nnpm ERR! or email it to:\nnpm ERR!     npm-@googlegroups.com\nnpm ERR! \nnpm ERR! System Linux 3.0.0-16-generic\nnpm ERR! command \"node\" \"/usr/local/bin/npm\" \"install\"\nnpm ERR! cwd /home/david/development/towertestapp\nnpm ERR! node -v v0.6.12\nnpm ERR! npm -v 1.1.4\nnpm ERR! path /home/david/development/towertestapp/nodemodules/design.io/node_modules/hook.io/node_modules/_socket.io-client.npm/package/lib/vendor/web-socket-js/flash-src/com/hurlant/crypto/symmetric/NullPad.as\nnpm ERR! fstream_path /home/david/development/towertestapp/node_modules/design.io/node_modules/hook.io/node_modules/socket.io-client.npm/package/lib/vendor/web-socket-js/flash-src/com/hurlant/crypto/symmetric/NullPad.as\nnpm ERR! fstreamtype File\nnpm ERR! fstream_class FileWriter\nnpm ERR! fstream_finish_call chmod\nnpm ERR! code ENOENT\nnpm ERR! message ENOENT, no such file or directory '/home/david/development/towertestapp/node_modules/design.io/node_modules/hook.io/node_modules/_socket.io-client.npm/package/lib/vendor/web-socket-js/flash-src/com/hurlant/crypto/symmetric/NullPad.as'\nnpm ERR! errno {}\nnpm ERR! fstream_stack Object.oncomplete (/usr/local/lib/node_modules/npm/node_modules/tar/node_modules/fstream/lib/writer.js:285:17)\nnpm http 304 https://registry.npmjs.org/redis/0.6.7\nnpm http 304 https://registry.npmjs.org/policyfile/0.0.4\nnpm ERR! error rolling back design.io@0.3.0-6 Error: UNKNOWN, unknown error '/home/david/development/towertestapp/node_modules/design.io/node_modules/hook.io/node_modules/nconf/node_modules/___ini.npm/package/test'\nnpm ERR! mdns@0.0.5 preinstall: node-waf clean || (exit 0); node-waf configure build\nnpm ERR! sh \"-c\" \"node-waf clean || (exit 0); node-waf configure build\" failed with 1\nnpm ERR! \nnpm ERR! Failed at the mdns@0.0.5 preinstall script.\nnpm ERR! This is most likely a problem with the mdns package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     node-waf clean || (exit 0); node-waf configure build\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls mdns\nnpm ERR! There is likely additional logging output above.\nnpm ERR! \nnpm ERR! System Linux 3.0.0-16-generic\nnpm ERR! command \"node\" \"/usr/local/bin/npm\" \"install\"\nnpm ERR! cwd /home/david/development/towertestapp\nnpm ERR! node -v v0.6.12\nnpm ERR! npm -v 1.1.4\nnpm ERR! code ELIFECYCLE\nnpm ERR! message mdns@0.0.5 preinstall: node-waf clean || (exit 0); node-waf configure build\nnpm ERR! message sh \"-c\" \"node-waf clean || (exit 0); node-waf configure build\" failed with 1\nnpm ERR! errno {}\nnpm ERR! \nnpm ERR! Additional logging details can be found in:\nnpm ERR!     /home/david/development/towertestapp/npm-debug.log\nnpm not ok\n```\n. my first comment on top included that its ubuntu. the live systems are freebsd.\nnode is build from github source and python version is 2.7.2+\nhad to get some sleep because it was 3 am in the morning at my last post :)\n. alright i did the \"tower new towerapp\" again just to make sure everything is clean.\nI did \"sudo npm update -g\" just to make sure everything is up-to-date\nnpm is version 1.1.4 and node is version v0.6.12\nthen I did npm install within the project folder. so far so good write?!\n```\n\nmicrotime@0.2.0 install /home/david/development/towerapp/node_modules/forever/node_modules/microtime\nnode-waf configure build\n\nTraceback (most recent call last):\n  File \"/usr/local/bin/node-waf\", line 14, in \n    import Scripting\nImportError: No module named Scripting\nnpm ERR! error installing microtime@0.2.0\nnpm ERR! error installing forever@0.8.5\nnpm http GET https://registry.npmjs.org/mkdirp\nnpm http GET https://registry.npmjs.org/lru-cache\nnpm ERR! error installing timespan@2.0.1\nnpm ERR! error rolling back forever@0.8.5 Error: UNKNOWN, unknown error '/home/david/development/towerapp/node_modules/forever/node_modules/___utile.npm/package/lib'\nnpm ERR! microtime@0.2.0 install: node-waf configure build\nnpm ERR! sh \"-c\" \"node-waf configure build\" failed with 1\nnpm ERR! \nnpm ERR! Failed at the microtime@0.2.0 install script.\nnpm ERR! This is most likely a problem with the microtime package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     node-waf configure build\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls microtime\nnpm ERR! There is likely additional logging output above.\nnpm ERR! \nnpm ERR! System Linux 3.0.0-16-generic\nnpm ERR! command \"node\" \"/usr/local/bin/npm\" \"install\"\nnpm ERR! cwd /home/david/development/towerapp\nnpm ERR! node -v v0.6.12\nnpm ERR! npm -v 1.1.4\nnpm ERR! code ELIFECYCLE\nnpm ERR! message microtime@0.2.0 install: node-waf configure build\nnpm ERR! message sh \"-c\" \"node-waf configure build\" failed with 1\nnpm ERR! errno {}\nnpm http 304 https://registry.npmjs.org/hashish\nnpm http 304 https://registry.npmjs.org/chainsaw\nnpm ERR! Error: ENOENT, no such file or directory '/home/david/development/towerapp/node_modules/forever/node_modules/optimist.npm/package/examples/linecount.js'\nnpm ERR! You may report this log at:\nnpm ERR!     http://github.com/isaacs/npm/issues\nnpm ERR! or email it to:\nnpm ERR!     npm-@googlegroups.com\nnpm ERR! \nnpm ERR! System Linux 3.0.0-16-generic\nnpm ERR! command \"node\" \"/usr/local/bin/npm\" \"install\"\nnpm ERR! cwd /home/david/development/towerapp\nnpm ERR! node -v v0.6.12\nnpm ERR! npm -v 1.1.4\nnpm ERR! path /home/david/development/towerapp/node_modules/forever/node_modules/_optimist.npm/package/examples/line_count.js\nnpm ERR! code ENOENT\nnpm ERR! message ENOENT, no such file or directory '/home/david/development/towerapp/node_modules/forever/node_modules/___optimist.npm/package/examples/line_count.js'\nnpm ERR! errno {}\nnpm ERR! \nnpm ERR! Additional logging details can be found in:\nnpm ERR!     /home/david/development/towerapp/npm-debug.log\nnpm not ok\n```\n. issue seems with node-waf that it cant import Scripting if i run it as user.\ncan you close the issue cause it has nothing to do directly with tower. if I got any new or other issues related to tower i will open a new issue.\nI have a blank arch machine here and will do a clean node and npm install and then test tower again.\nthanks guys\n. after i did the above steps and did \"sudo npm install\" within the project it works ^^\n. npm version is 1.1.2 and node is v0.6.12-pre\ninstallation was fine and I created a new tower app via \n    tower new towertestapp\nwhen i tried to start it via node server.js it told me mongodb was missing, I installed it and then it told me forever was missing, installed that too.\nthen node server.js is working and I can acces the welcome page\nsystem is ubuntu 11.10 by the way\n. didnt know that. will try that out! thanks\n. alright did the tower new towertestapp and ran npm install and i get the following\n```\n\nmicrotime@0.2.0 install /home/david/development/towertestapp/node_modules/forever/node_modules/microtime\nnode-waf configure build\n\nTraceback (most recent call last):\n  File \"/usr/local/bin/node-waf\", line 14, in \n    import Scripting\nImportError: No module named Scripting\nnpm ERR! error installing microtime@0.2.0\nnpm ERR! error installing forever@0.8.5\nnpm http GET https://registry.npmjs.org/mkdirp\nnpm ERR! error rolling back forever@0.8.5 Error: UNKNOWN, unknown error '/home/david/development/towertestapp/node_modules/forever/node_modules/___flatiron.npm/package/examples'\nnpm ERR! microtime@0.2.0 install: node-waf configure build\nnpm ERR! sh \"-c\" \"node-waf configure build\" failed with 1\nnpm ERR! \nnpm ERR! Failed at the microtime@0.2.0 install script.\nnpm ERR! This is most likely a problem with the microtime package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     node-waf configure build\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls microtime\nnpm ERR! There is likely additional logging output above.\nnpm ERR! \nnpm ERR! System Linux 3.0.0-16-generic\nnpm ERR! command \"node\" \"/usr/local/bin/npm\" \"install\"\nnpm ERR! cwd /home/david/development/towertestapp\nnpm ERR! node -v v0.6.12-pre\nnpm ERR! npm -v 1.1.2\nnpm ERR! code ELIFECYCLE\nnpm ERR! message microtime@0.2.0 install: node-waf configure build\nnpm ERR! message sh \"-c\" \"node-waf configure build\" failed with 1\nnpm ERR! errno {}\nnpm http GET https://registry.npmjs.org/lru-cache\nnpm ERR! Error: ENOENT, no such file or directory '/home/david/development/towertestapp/node_modules/forever/node_modules/utile.npm/package/lib/file.js'\nnpm ERR! You may report this log at:\nnpm ERR!     http://github.com/isaacs/npm/issues\nnpm ERR! or email it to:\nnpm ERR!     npm-@googlegroups.com\nnpm ERR! \nnpm ERR! System Linux 3.0.0-16-generic\nnpm ERR! command \"node\" \"/usr/local/bin/npm\" \"install\"\nnpm ERR! cwd /home/david/development/towertestapp\nnpm ERR! node -v v0.6.12-pre\nnpm ERR! npm -v 1.1.2\nnpm ERR! path /home/david/development/towertestapp/nodemodules/forever/node_modules/_utile.npm/package/lib/file.js\nnpm ERR! fstream_path /home/david/development/towertestapp/node_modules/forever/node_modules/utile.npm/package/lib/file.js\nnpm ERR! fstreamtype File\nnpm ERR! fstream_class FileWriter\nnpm ERR! code ENOENT\nnpm ERR! message ENOENT, no such file or directory '/home/david/development/towertestapp/node_modules/forever/node_modules/_utile.npm/package/lib/file.js'\nnpm ERR! errno {}\nnpm ERR! fstream_stack Object.oncomplete (/usr/local/lib/node_modules/npm/node_modules/fstream/lib/writer.js:204:26)\nnpm ERR! \nnpm ERR! Additional logging details can be found in:\nnpm ERR!     /home/david/development/towertestapp/npm-debug.log\nnpm not ok\n```\n. good stuff will do. thanks for your help\n. upgrade node to v0.6.12 and update npm\ndid npm cache clean and ran npm install within the project folder again and getting\n```\nnpm http GET https://registry.npmjs.org/loggly\nnpm http GET https://registry.npmjs.org/stack-trace\nnot found \n/home/david/development/towertestapp/node_modules/design.io/node_modules/hook.io/node_modules/mdns/wscript:28: error: the configuration failed (see '/home/david/development/towertestapp/node_modules/design.io/node_modules/hook.io/node_modules/mdns/out/config.log')\nnpm ERR! error installing mdns@0.0.5\nnpm ERR! error installing hook.io@0.8.7-1\nnpm http 304 https://registry.npmjs.org/ini\nnpm ERR! error rolling back hook.io@0.8.7-1 Error: UNKNOWN, unknown error '/home/david/development/towertestapp/node_modules/design.io/node_modules/hook.io/node_modules/___npm.npm/package/lib/utils/npm-registry-client'\nnpm ERR! error installing design.io@0.3.0-6\nnpm http 304 https://registry.npmjs.org/stack-trace\nnpm ERR! Error: ENOENT, no such file or directory '/home/david/development/towertestapp/node_modules/design.io/node_modules/hook.io/node_modules/socket.io-client.npm/package/lib/vendor/web-socket-js/flash-src/com/hurlant/crypto/symmetric/NullPad.as'\nnpm ERR! You may report this log at:\nnpm ERR!     http://github.com/isaacs/npm/issues\nnpm ERR! or email it to:\nnpm ERR!     npm-@googlegroups.com\nnpm ERR! \nnpm ERR! System Linux 3.0.0-16-generic\nnpm ERR! command \"node\" \"/usr/local/bin/npm\" \"install\"\nnpm ERR! cwd /home/david/development/towertestapp\nnpm ERR! node -v v0.6.12\nnpm ERR! npm -v 1.1.4\nnpm ERR! path /home/david/development/towertestapp/nodemodules/design.io/node_modules/hook.io/node_modules/_socket.io-client.npm/package/lib/vendor/web-socket-js/flash-src/com/hurlant/crypto/symmetric/NullPad.as\nnpm ERR! fstream_path /home/david/development/towertestapp/node_modules/design.io/node_modules/hook.io/node_modules/socket.io-client.npm/package/lib/vendor/web-socket-js/flash-src/com/hurlant/crypto/symmetric/NullPad.as\nnpm ERR! fstreamtype File\nnpm ERR! fstream_class FileWriter\nnpm ERR! fstream_finish_call chmod\nnpm ERR! code ENOENT\nnpm ERR! message ENOENT, no such file or directory '/home/david/development/towertestapp/node_modules/design.io/node_modules/hook.io/node_modules/_socket.io-client.npm/package/lib/vendor/web-socket-js/flash-src/com/hurlant/crypto/symmetric/NullPad.as'\nnpm ERR! errno {}\nnpm ERR! fstream_stack Object.oncomplete (/usr/local/lib/node_modules/npm/node_modules/tar/node_modules/fstream/lib/writer.js:285:17)\nnpm http 304 https://registry.npmjs.org/redis/0.6.7\nnpm http 304 https://registry.npmjs.org/policyfile/0.0.4\nnpm ERR! error rolling back design.io@0.3.0-6 Error: UNKNOWN, unknown error '/home/david/development/towertestapp/node_modules/design.io/node_modules/hook.io/node_modules/nconf/node_modules/___ini.npm/package/test'\nnpm ERR! mdns@0.0.5 preinstall: node-waf clean || (exit 0); node-waf configure build\nnpm ERR! sh \"-c\" \"node-waf clean || (exit 0); node-waf configure build\" failed with 1\nnpm ERR! \nnpm ERR! Failed at the mdns@0.0.5 preinstall script.\nnpm ERR! This is most likely a problem with the mdns package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     node-waf clean || (exit 0); node-waf configure build\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls mdns\nnpm ERR! There is likely additional logging output above.\nnpm ERR! \nnpm ERR! System Linux 3.0.0-16-generic\nnpm ERR! command \"node\" \"/usr/local/bin/npm\" \"install\"\nnpm ERR! cwd /home/david/development/towertestapp\nnpm ERR! node -v v0.6.12\nnpm ERR! npm -v 1.1.4\nnpm ERR! code ELIFECYCLE\nnpm ERR! message mdns@0.0.5 preinstall: node-waf clean || (exit 0); node-waf configure build\nnpm ERR! message sh \"-c\" \"node-waf clean || (exit 0); node-waf configure build\" failed with 1\nnpm ERR! errno {}\nnpm ERR! \nnpm ERR! Additional logging details can be found in:\nnpm ERR!     /home/david/development/towertestapp/npm-debug.log\nnpm not ok\n```\n. my first comment on top included that its ubuntu. the live systems are freebsd.\nnode is build from github source and python version is 2.7.2+\nhad to get some sleep because it was 3 am in the morning at my last post :)\n. alright i did the \"tower new towerapp\" again just to make sure everything is clean.\nI did \"sudo npm update -g\" just to make sure everything is up-to-date\nnpm is version 1.1.4 and node is version v0.6.12\nthen I did npm install within the project folder. so far so good write?!\n```\n\nmicrotime@0.2.0 install /home/david/development/towerapp/node_modules/forever/node_modules/microtime\nnode-waf configure build\n\nTraceback (most recent call last):\n  File \"/usr/local/bin/node-waf\", line 14, in \n    import Scripting\nImportError: No module named Scripting\nnpm ERR! error installing microtime@0.2.0\nnpm ERR! error installing forever@0.8.5\nnpm http GET https://registry.npmjs.org/mkdirp\nnpm http GET https://registry.npmjs.org/lru-cache\nnpm ERR! error installing timespan@2.0.1\nnpm ERR! error rolling back forever@0.8.5 Error: UNKNOWN, unknown error '/home/david/development/towerapp/node_modules/forever/node_modules/___utile.npm/package/lib'\nnpm ERR! microtime@0.2.0 install: node-waf configure build\nnpm ERR! sh \"-c\" \"node-waf configure build\" failed with 1\nnpm ERR! \nnpm ERR! Failed at the microtime@0.2.0 install script.\nnpm ERR! This is most likely a problem with the microtime package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     node-waf configure build\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls microtime\nnpm ERR! There is likely additional logging output above.\nnpm ERR! \nnpm ERR! System Linux 3.0.0-16-generic\nnpm ERR! command \"node\" \"/usr/local/bin/npm\" \"install\"\nnpm ERR! cwd /home/david/development/towerapp\nnpm ERR! node -v v0.6.12\nnpm ERR! npm -v 1.1.4\nnpm ERR! code ELIFECYCLE\nnpm ERR! message microtime@0.2.0 install: node-waf configure build\nnpm ERR! message sh \"-c\" \"node-waf configure build\" failed with 1\nnpm ERR! errno {}\nnpm http 304 https://registry.npmjs.org/hashish\nnpm http 304 https://registry.npmjs.org/chainsaw\nnpm ERR! Error: ENOENT, no such file or directory '/home/david/development/towerapp/node_modules/forever/node_modules/optimist.npm/package/examples/linecount.js'\nnpm ERR! You may report this log at:\nnpm ERR!     http://github.com/isaacs/npm/issues\nnpm ERR! or email it to:\nnpm ERR!     npm-@googlegroups.com\nnpm ERR! \nnpm ERR! System Linux 3.0.0-16-generic\nnpm ERR! command \"node\" \"/usr/local/bin/npm\" \"install\"\nnpm ERR! cwd /home/david/development/towerapp\nnpm ERR! node -v v0.6.12\nnpm ERR! npm -v 1.1.4\nnpm ERR! path /home/david/development/towerapp/node_modules/forever/node_modules/_optimist.npm/package/examples/line_count.js\nnpm ERR! code ENOENT\nnpm ERR! message ENOENT, no such file or directory '/home/david/development/towerapp/node_modules/forever/node_modules/___optimist.npm/package/examples/line_count.js'\nnpm ERR! errno {}\nnpm ERR! \nnpm ERR! Additional logging details can be found in:\nnpm ERR!     /home/david/development/towerapp/npm-debug.log\nnpm not ok\n```\n. issue seems with node-waf that it cant import Scripting if i run it as user.\ncan you close the issue cause it has nothing to do directly with tower. if I got any new or other issues related to tower i will open a new issue.\nI have a blank arch machine here and will do a clean node and npm install and then test tower again.\nthanks guys\n. after i did the above steps and did \"sudo npm install\" within the project it works ^^\n. ",
    "chrixian": "These last few errors you posted aren't a tower.js issue, they have to do with node-waf not being properly symlinked if memory serves.  There is a good chance it will fix it self if you upgrade to node v0.6.12 release from the 12-pre and NPM to 1.1.4 and once those are installed do a npm cache clean and it should work.\n. Are you running ArchLinux by any chance?\n. Rather than wait for you to say yes or no I'll just throw a few more suggestions out there... \n1) Are you building from source by checking node out from github or are you installing via a package manage of some kind? If you are using a package manager you need to check if there is an additional dev tools package, somethin like 'node-dev' or 'nodejs-dev', etc. etc. If you're building from github then you have the dev tools.\n2) Check what version of python your system runs by default when you enter python at the prompt... node-waf needs Python 2.6 so make sure the python command doesn't point to Python 2.4 or 3.0 etc.\n. These last few errors you posted aren't a tower.js issue, they have to do with node-waf not being properly symlinked if memory serves.  There is a good chance it will fix it self if you upgrade to node v0.6.12 release from the 12-pre and NPM to 1.1.4 and once those are installed do a npm cache clean and it should work.\n. Are you running ArchLinux by any chance?\n. Rather than wait for you to say yes or no I'll just throw a few more suggestions out there... \n1) Are you building from source by checking node out from github or are you installing via a package manage of some kind? If you are using a package manager you need to check if there is an additional dev tools package, somethin like 'node-dev' or 'nodejs-dev', etc. etc. If you're building from github then you have the dev tools.\n2) Check what version of python your system runs by default when you enter python at the prompt... node-waf needs Python 2.6 so make sure the python command doesn't point to Python 2.4 or 3.0 etc.\n. ",
    "jaigouk": "It was merged. yay! :D\n. It was merged. yay! :D\n. ",
    "ludicast": "The awesome sockjs is written in coffeescript and does a compile-on-install (note the empty lib directory in their github).\nhttps://github.com/sockjs/sockjs-node\nI basically ripped that approach for my box.net libs (https://github.com/ludicast/node-box) and it works well.\nI could do a demo of that for tower if you would consider this approach (which would avoid checking generated files into the repo).\n. Yeah, I'll run with this over the next week or two (unless someone gets to it first).  In the makefile for sockjs they call coffee compiler like:\nCOFFEE:=./node_modules/.bin/coffee\nso something like that should work well for tower.\n. Good thread (off topic - I've used Kristian's mongoid-geo code plenty of times).\nFollowing his above suggestion for a dev group, I just added a towerjs-dev google group so now you have\nhttps://groups.google.com/group/towerjs-dev\nand\nhttps://groups.google.com/group/towerjs\n. actually since your \"contributing\" doc wants the commits merged together, I'll clean up and reissue.  sorry for the drama :).\n. actually this would override in times where no layout is needed so i'll pull this pull\n. okay, after investigating the above errors (with \"Can't render headers after they are sent to the client\") were definitely from this: https://github.com/viatropos/tower/issues/30.\n. I use sockjs instead of socket.io (it's way better ;p), but all I needed to do was override its creation in the config/application.coffee's @configure method like:\n@io = require('../lib/sockjsGenerator').generate @server\nand this prevents tower from creating a socketio instance.\nI imagine if you had your socket.io generator in there it would work its magic the same way, though I don't know if it would let you have socket callbacks in your controllers (I don't have need for that myself).\n. The awesome sockjs is written in coffeescript and does a compile-on-install (note the empty lib directory in their github).\nhttps://github.com/sockjs/sockjs-node\nI basically ripped that approach for my box.net libs (https://github.com/ludicast/node-box) and it works well.\nI could do a demo of that for tower if you would consider this approach (which would avoid checking generated files into the repo).\n. Yeah, I'll run with this over the next week or two (unless someone gets to it first).  In the makefile for sockjs they call coffee compiler like:\nCOFFEE:=./node_modules/.bin/coffee\nso something like that should work well for tower.\n. Good thread (off topic - I've used Kristian's mongoid-geo code plenty of times).\nFollowing his above suggestion for a dev group, I just added a towerjs-dev google group so now you have\nhttps://groups.google.com/group/towerjs-dev\nand\nhttps://groups.google.com/group/towerjs\n. actually since your \"contributing\" doc wants the commits merged together, I'll clean up and reissue.  sorry for the drama :).\n. actually this would override in times where no layout is needed so i'll pull this pull\n. okay, after investigating the above errors (with \"Can't render headers after they are sent to the client\") were definitely from this: https://github.com/viatropos/tower/issues/30.\n. I use sockjs instead of socket.io (it's way better ;p), but all I needed to do was override its creation in the config/application.coffee's @configure method like:\n@io = require('../lib/sockjsGenerator').generate @server\nand this prevents tower from creating a socketio instance.\nI imagine if you had your socket.io generator in there it would work its magic the same way, though I don't know if it would let you have socket callbacks in your controllers (I don't have need for that myself).\n. ",
    "timstephenson": "Thanks!\n. I figured it out. For anyone who is interested. The request is available in the controller as @request. So to get the host:\n@request.headers.host\nI was looking too deep.\n. I tried doing this too:\nproduction\n  name: \"appBLABLA\"\n  port: 10076\n  host: \"mongodb://heroku:blablablablabla@staff.mongohq.com\"\nShould the user name and password go somewhere else?\n. Hi Thanks.\nYes it worked. I'm getting close now. The app works, but the bootstrap assets, css etc aren't available. I ran cake assets:bundle and then committed the assets to the repo. For testing purposes is it possible to just include the assets, or should they always be uploaded to s3?\nThank you very much for your help.\n. Thanks. I changed the .gitignore file, but no luck. I noticed that if I run node server.js -e production locally that it does the same thing as on heroku. I think I must have missed a step somewhere.\nI'll review the docs. I noticed the files in the assets directory are binary. Should I not have done the cake assets:bundle step? Thanks again for all the advice.\nBest\n. Thanks. I'll let you know how it goes and hopefully get a pull request for you.\n. Cool. Thanks. I'll take a look this evening and tomorrow.\n. Still working on it. Got busy so I haven't finished. A couple notes.\nI tried using both gzippo and connect-gzip by adding to the tower/server/application.js file\ngzippo = require('gzippo');\nor\ngzip = require('connect-gzip');\nAnd then changing this.use(connect.static(Tower.publicPath to:\nthis.use(gzip.staticGzip(Tower.publicPath, {\n      maxAge: Tower.publicCacheDuration\n    }));\ntesting both, this one is for connect-gzip. Am I in the right area?\nAlso, I noticed that if I comment out ./node_modules/tower/lib/server/application/assets.js, line 60\n// return gzip(result, function(error, result) {\n  fs.writeFileSync(digestPath, result);\n  return next();\n// });\nAnd bundle the assets, then run locally as production, I get some css, but there is javascript error \"ReferenceError: Can't find variable: DesignIO\" \nWhere should I look for that. \nHopefully I'll have more time in the next couple of days and I can continue working on it.\nThanks\n. Thanks!\n. I figured it out. For anyone who is interested. The request is available in the controller as @request. So to get the host:\n@request.headers.host\nI was looking too deep.\n. I tried doing this too:\nproduction\n  name: \"appBLABLA\"\n  port: 10076\n  host: \"mongodb://heroku:blablablablabla@staff.mongohq.com\"\nShould the user name and password go somewhere else?\n. Hi Thanks.\nYes it worked. I'm getting close now. The app works, but the bootstrap assets, css etc aren't available. I ran cake assets:bundle and then committed the assets to the repo. For testing purposes is it possible to just include the assets, or should they always be uploaded to s3?\nThank you very much for your help.\n. Thanks. I changed the .gitignore file, but no luck. I noticed that if I run node server.js -e production locally that it does the same thing as on heroku. I think I must have missed a step somewhere.\nI'll review the docs. I noticed the files in the assets directory are binary. Should I not have done the cake assets:bundle step? Thanks again for all the advice.\nBest\n. Thanks. I'll let you know how it goes and hopefully get a pull request for you.\n. Cool. Thanks. I'll take a look this evening and tomorrow.\n. Still working on it. Got busy so I haven't finished. A couple notes.\nI tried using both gzippo and connect-gzip by adding to the tower/server/application.js file\ngzippo = require('gzippo');\nor\ngzip = require('connect-gzip');\nAnd then changing this.use(connect.static(Tower.publicPath to:\nthis.use(gzip.staticGzip(Tower.publicPath, {\n      maxAge: Tower.publicCacheDuration\n    }));\ntesting both, this one is for connect-gzip. Am I in the right area?\nAlso, I noticed that if I comment out ./node_modules/tower/lib/server/application/assets.js, line 60\n// return gzip(result, function(error, result) {\n  fs.writeFileSync(digestPath, result);\n  return next();\n// });\nAnd bundle the assets, then run locally as production, I get some css, but there is javascript error \"ReferenceError: Can't find variable: DesignIO\" \nWhere should I look for that. \nHopefully I'll have more time in the next couple of days and I can continue working on it.\nThanks\n. ",
    "hotrannam": "Once you mentioned it was a problem before, I try using node (0.6.12) and tower (0.3.9-11), the problem is disappeared. Thanks for awesome work!\n. Once you mentioned it was a problem before, I try using node (0.6.12) and tower (0.3.9-11), the problem is disappeared. Thanks for awesome work!\n. ",
    "fauzias": "@viatropos same issue happen here, and that also include the controller code changes, nothing will be reloaded in the browser (either automatic refresh nor manual refresh), and all i have to do was exiting the server.js and rerun it again, such a wasted time shall not happen\n. @viatropos same issue happen here, and that also include the controller code changes, nothing will be reloaded in the browser (either automatic refresh nor manual refresh), and all i have to do was exiting the server.js and rerun it again, such a wasted time shall not happen\n. ",
    "stereosteve": "Gotcha.  I just started using Tower yesterday.  I ran the scaffold generator with a date type and got this error because the controller passes the String directly thru to the encodeDate function.\nAlso I was confused by this block.  Took me a minute to realize the Date and Array cases will never be matched because typeof returns a string.\nswitch typeof(value)\n  time = require('moment')\n  when \"string\"\n    time.parse(value)\n  when Date\n    time.local(value.year, value.month, value.day, value.hour, value.min, value.sec)\n  when Array\n    time.local(value)\n  else\n    value\nFor now I'll parse the Date at the controller level and close this issue.\nAnyways, Tower looks pretty awesome so far - lots of nice features.  Keep up the good work!\nSteve\n. Gotcha.  I just started using Tower yesterday.  I ran the scaffold generator with a date type and got this error because the controller passes the String directly thru to the encodeDate function.\nAlso I was confused by this block.  Took me a minute to realize the Date and Array cases will never be matched because typeof returns a string.\nswitch typeof(value)\n  time = require('moment')\n  when \"string\"\n    time.parse(value)\n  when Date\n    time.local(value.year, value.month, value.day, value.hour, value.min, value.sec)\n  when Array\n    time.local(value)\n  else\n    value\nFor now I'll parse the Date at the controller level and close this issue.\nAnyways, Tower looks pretty awesome so far - lots of nice features.  Keep up the good work!\nSteve\n. ",
    "fabnoe": "Oh, yeah. You are right. But now i get this error:\nnode server\ninfo  - socket.io started\n[Wed, 14 Mar 2012 07:33:28 GMT] INFO Tower development server listening on port 3000\ninfo:  Name: design.io-watcher::demo hook::listening                          Type: hook            Data: 5000\ninfo:  Name: design.io-watcher::demo hook::started                            Type: hook            Data: 5000\ninfo:  Name: design.io-watcher::demo hook::ready                              Type: hook            Data: {\"name\":\"design.io-watcher::demo\",\"type\":\"hook\",\"p ... \ninfo:  Name: design.io-watcher::demo ready                                    Type: hook            Data: {\"name\":\"design.io-watcher::demo\",\"type\":\"hook\",\"p ... \n[Wed, 14 Mar 2012 07:33:46 GMT] ERROR /Users/johndoe/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby/1.9.1/rubygems/custom_require.rb:36:in require'\n[Wed, 14 Mar 2012 07:33:46 GMT] ERROR :\n[Wed, 14 Mar 2012 07:33:46 GMT] ERROR no such file to load -- rb-fsevent (LoadError)\n    from /Users/johndoe/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby/1.9.1/rubygems/custom_require.rb:36:inrequire'\n    from /Users/johndoe/Development/Workspaces/2012/nodejs/demo/node_modules/design.io/lib/design.io/listener/mac.rb:2:in <main>'\n[Wed, 14 Mar 2012 07:33:46 GMT] ERROR /Users/johndoe/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby/1.9.1/rubygems/custom_require.rb:36:inrequire'\n[Wed, 14 Mar 2012 07:33:46 GMT] ERROR :\n[Wed, 14 Mar 2012 07:33:46 GMT] ERROR no such file to load -- rb-fsevent\n[Wed, 14 Mar 2012 07:33:46 GMT] ERROR (\n. Ok it's running. I had to install a ruby gem:\ngem install rb-fsevent\n. Oh, yeah. You are right. But now i get this error:\nnode server\ninfo  - socket.io started\n[Wed, 14 Mar 2012 07:33:28 GMT] INFO Tower development server listening on port 3000\ninfo:  Name: design.io-watcher::demo hook::listening                          Type: hook            Data: 5000\ninfo:  Name: design.io-watcher::demo hook::started                            Type: hook            Data: 5000\ninfo:  Name: design.io-watcher::demo hook::ready                              Type: hook            Data: {\"name\":\"design.io-watcher::demo\",\"type\":\"hook\",\"p ... \ninfo:  Name: design.io-watcher::demo ready                                    Type: hook            Data: {\"name\":\"design.io-watcher::demo\",\"type\":\"hook\",\"p ... \n[Wed, 14 Mar 2012 07:33:46 GMT] ERROR /Users/johndoe/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby/1.9.1/rubygems/custom_require.rb:36:in require'\n[Wed, 14 Mar 2012 07:33:46 GMT] ERROR :\n[Wed, 14 Mar 2012 07:33:46 GMT] ERROR no such file to load -- rb-fsevent (LoadError)\n    from /Users/johndoe/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby/1.9.1/rubygems/custom_require.rb:36:inrequire'\n    from /Users/johndoe/Development/Workspaces/2012/nodejs/demo/node_modules/design.io/lib/design.io/listener/mac.rb:2:in <main>'\n[Wed, 14 Mar 2012 07:33:46 GMT] ERROR /Users/johndoe/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby/1.9.1/rubygems/custom_require.rb:36:inrequire'\n[Wed, 14 Mar 2012 07:33:46 GMT] ERROR :\n[Wed, 14 Mar 2012 07:33:46 GMT] ERROR no such file to load -- rb-fsevent\n[Wed, 14 Mar 2012 07:33:46 GMT] ERROR (\n. Ok it's running. I had to install a ruby gem:\ngem install rb-fsevent\n. ",
    "maedi": "Could this be put in a getting started guide?\n. Is it possible to create an alias \"tower server\" too? Coming from Rails, was my main point of confusion when first trying Tower.\nBy the way \"node server\" also works for me.\n. I haven't contributed any code either so apologies as well, but I agree with you @adamjacobbecker\n. After shedding a tear for the elegance of 'self executing class bodies' I too would be happy with a more Ember like CoffeeScript API. Making Tower behave like Ember is a good move. EmberScript is a nice idea too.\nHopefully the future compiler will allow the @field syntax and work with Ember? Ultimately you want the same syntax everywhere.\n. From the Twitter article:\n\"In our fully client-side architecture, you don\u2019t see anything until our JavaScript is downloaded and executed [...] The bottom line is that a client-side architecture leads to slower performance because most of the code is being executed on our users' machines rather than our own. [...] We took the execution of JavaScript completely out of our render path. By rendering our page content on the server and deferring all JavaScript execution until well after that content has been rendered, we've dropped the time to first Tweet to one-fifth of what it was.\"\nIs this what we currently have with Ember? Is there a way to render the initial variables on the server for the first page render? I think Twitter are correct in saying that JS affects the first page load, but surely JSON over the wire for every secondary page is the fastest? Or is the \"downloading + processing\" time slower than downloading HTML?\n. Tower is the Ruby on Rails of the Node world, while Meteor tries to move away from MVC and let the developer decide the structure and flow. Meteor is primarily client side, Tower is both. They both have auto syncing of data on multiple browsers.\nThese articles indirectly compare both:\nRailwayJS vs TowerJS\nOur take on Derby vs. Meteor\n\n\nCriteriaTowerMeteor\n\n\n\nFramework styleMVCRoll your own\n\n\nSimilar frameworkRailsDerby (also Node)\n\n\nPhilosophyConvention over configurationRoll your own\n\n\nDefault languageCoffeeScriptJavaScript\n\n\nClient JS frameworkEmberMeteor\n\n\nTemplate engineCoffeeCup + HandlebarsHandlebars\n\n\n\nIn my opinion Tower is easier to understand and nicer to look at. Coming from Rails the MVC structure feels familiar.\n. Yes I think I'm experiencing this issue as well\n. Hey @edubkendo just so you know you're heard. I agree. Though if Tower were to become more Ember-like I'd still prefer CoffeeScript to be the default.\n. So will Tower use v1 or v2?\n. _.stringify is the sort of thing I'm after, thanks. In a perfect world App.Post.all() would return this too. Even though it's overbearing, it's actually doing what the .all() implies, rather than an Ember object.\nRegarding MySQL, I've found MongoHub (Mac) can help to visualize the data if you click the 'Query' icon.\nWith the database console idea, this sounds really useful. I'm currently using something like this to reset my DB, but not to inspect:\nmongo\nshow dbs\nuse [databasename]\ndb.dropDatabase();\n. Cool! This could be quite powerful...\n. The _form.coffee template in \"templates/shared/products\":\ncoffeescript\ntext '{{#with resource}}'\nform ->\n  fieldset ->\n    ul class: 'fields', ->\n      li class: 'control-group', ->\n        div class: 'controls', ->\n          label 'Name:'\n          text '{{view Ember.TextField valueBinding=\"name\"}}'\n          text '{{#with errors}}'\n          span class: 'help-inline error', '{{name}}'\n          text '{{/with}}'\n      li class: 'control-group', ->\n        div class: 'controls', ->\n          label 'Price:'\n          text '{{view Ember.TextField valueBinding=\"price\"}}'\n          text '{{#with errors}}'\n          span class: 'help-inline error', '{{price}}'\n          text '{{/with}}'\n      li ->\n        a '{{action submit target=\"resource\"}}', 'Submit'\ntext '{{/with}}'\nIn the Views directory there are product views for edit, index and show, but no 'new'. Could this be it?\n. Yes\n. Here's what I see:\n\napp/templates/shared/products/new.coffee\ncoffeescript\n@title = \"New Product\"\npartial \"flash\"\npartial \"form\"\nAnd the form partial that this references is above.\napp/views/client/products/form.coffee\n``` coffeescript\nApp.ProductsEditView = Ember.View.extend\n  templateName: 'products/edit'\n  resourceBinding: 'controller.resource'\n  # You can also use an object controller (Ember.ObjectProxy) \n  # as a layer between the view and the model if you'd like more control.\n  # resourceControllerBinding: 'controller.resourceController'\nsubmit: (event) ->\n    # @todo\n    # if @get('resource.isNew')\n    #   @get('controller.target').send('createProduct')\n    # else\n    #   @get('controller.target').send('updateProduct', @get('resource'))\n    @get('resource').save()\n    Tower.router.transitionTo('products.index')\n    return false\n``\n. Yes I only have a nested route inapp/config/shared/routes.coffee. How do I modify the nesting for the Ember/client side of things? Maybe routes.coffee shouldn't be in theshared` folder?\n. Thanks. I've added a draft beginners guide to the wiki:\nhttps://github.com/viatropos/tower/wiki/Tower-Beginners-Guide\n. I can see that some views have submit actions and bindings as well, though I don't see a reason why this can't all be included in the one file?\n``` coffeescript\nApp.PostsEditView = Ember.View.extend\n  templateName: 'posts/edit'\n  resourceBinding: 'controller.resource'\n  # You can also use an object controller (Ember.ObjectProxy) \n  # as a layer between the view and the model if you'd like more control.\n  # resourceControllerBinding: 'controller.resourceController'\nsubmit: (event) ->\n    # @todo\n    # if @get('resource.isNew')\n    #   @get('controller.target').send('createPost')\n    # else\n    #   @get('controller.target').send('updatePost', @get('resource'))\n    @get('resource').save()\n    Tower.router.transitionTo('posts.index')\n    return false\n``\n. Oh okay, would love to hear viatropos's thoughts on this...\n. I now agree. Would just add that iftemplatesare within theviewsparadigm, then maybe their folder structure should beviews/templates. As a new user this would have made more sense to me. I think the extra click is worth it (or you can get rid ofserverandsharedinsidetemplates` since it is the View/Tower that decides between client or server render.\nThough this does appear to be a technical limitation. While a purely client-side EmberJS application might make sense with templates, Tower has a different architecture that makes more sense with the view and template merged. Agree that Rails is the way I'm thinking here, but so will a lot of converts.\n\nI think the disconnect is in coming from Rails, where what they called \"views\" we're now calling \"templates\".\n\nWhat are our views then? Because of EmberJS they look more like controllers. I guess this is another architectural difference between server MVC and client MVC.\n. Great, that makes sense. In a way Rails wasn't setup for the complex interactions within a page.\nWhat are you thoughts on views/templates?\n. No worries, by the way this guide nicely explains the client/server differences:\nhttp://emberjs.com/guides/ember_mvc/#toc_differences-from-ruby-on-rails\n. I can't argue with your client/server logic, though in your example I think views/users would be views/client/users.\nYeah I feel familiar with the current folder setup already. Thinking through the typical user interaction workflow, the current structure is starting to make sense:\napp\n  |-- config         1. Initial configuration\n  |-- controllers    2. The user requests a page\n  |-- models         3. The controller responds with data from the model \n  |-- stylesheets\n  |-- templates      4. Data is pushed into the views template\n  |-- views          5. Views displays page and directs further requests to controller\nStill a part of me says that templates are so closely related to views that they need to be children, they are the same concept (the presentation), just different interfaces. The data and sockets directory are relatively different concepts compared to models and controllers respectively.\nIn the above example I had templates as the 4th step and views as the 5th, but really it is the other way round. The view outputs to the template. Contrasting this to data/seeds example where the seeds output to the model, not the model to the seeds.\nTechnically you could get away with:\nviews\n  |-- client\n    |-- layout\n    |-- users\n  |-- shared\n    |-- templates\n      |-- layout\n      |-- users\nor just:\nviews\n  |-- client\n    |-- layout\n    |-- users\n  |-- templates\n    |-- layout\n    |-- users\nJust thinking aloud.\n. Oh... and I'd just got the hang of Ember :) But AngularJS also looks really good.\nI'm assuming it's going to be hard, considering how tightly Ember is already integrated with Tower.\n. I would argue that Tower is more feature complete and active than Locomotive. And does the client/server separation really well. But Locomotive looks fine, though it looks like a purely server side framework?\n. So the Tower devs are rebuilding the Router and other aspects of Tower at the moment. Looks like this will have to wait until the new Router is in place etc.\n. Regarding nested routes https://github.com/viatropos/tower/wiki/Routing-and-WebSockets\n. Yeah I get this too, not sure how to debug it...\n. Great stuff @btbinhtran!\n. Could this be put in a getting started guide?\n. Is it possible to create an alias \"tower server\" too? Coming from Rails, was my main point of confusion when first trying Tower.\nBy the way \"node server\" also works for me.\n. I haven't contributed any code either so apologies as well, but I agree with you @adamjacobbecker\n. After shedding a tear for the elegance of 'self executing class bodies' I too would be happy with a more Ember like CoffeeScript API. Making Tower behave like Ember is a good move. EmberScript is a nice idea too.\nHopefully the future compiler will allow the @field syntax and work with Ember? Ultimately you want the same syntax everywhere.\n. From the Twitter article:\n\"In our fully client-side architecture, you don\u2019t see anything until our JavaScript is downloaded and executed [...] The bottom line is that a client-side architecture leads to slower performance because most of the code is being executed on our users' machines rather than our own. [...] We took the execution of JavaScript completely out of our render path. By rendering our page content on the server and deferring all JavaScript execution until well after that content has been rendered, we've dropped the time to first Tweet to one-fifth of what it was.\"\nIs this what we currently have with Ember? Is there a way to render the initial variables on the server for the first page render? I think Twitter are correct in saying that JS affects the first page load, but surely JSON over the wire for every secondary page is the fastest? Or is the \"downloading + processing\" time slower than downloading HTML?\n. Tower is the Ruby on Rails of the Node world, while Meteor tries to move away from MVC and let the developer decide the structure and flow. Meteor is primarily client side, Tower is both. They both have auto syncing of data on multiple browsers.\nThese articles indirectly compare both:\nRailwayJS vs TowerJS\nOur take on Derby vs. Meteor\n\n\nCriteriaTowerMeteor\n\n\n\nFramework styleMVCRoll your own\n\n\nSimilar frameworkRailsDerby (also Node)\n\n\nPhilosophyConvention over configurationRoll your own\n\n\nDefault languageCoffeeScriptJavaScript\n\n\nClient JS frameworkEmberMeteor\n\n\nTemplate engineCoffeeCup + HandlebarsHandlebars\n\n\n\nIn my opinion Tower is easier to understand and nicer to look at. Coming from Rails the MVC structure feels familiar.\n. Yes I think I'm experiencing this issue as well\n. Hey @edubkendo just so you know you're heard. I agree. Though if Tower were to become more Ember-like I'd still prefer CoffeeScript to be the default.\n. So will Tower use v1 or v2?\n. _.stringify is the sort of thing I'm after, thanks. In a perfect world App.Post.all() would return this too. Even though it's overbearing, it's actually doing what the .all() implies, rather than an Ember object.\nRegarding MySQL, I've found MongoHub (Mac) can help to visualize the data if you click the 'Query' icon.\nWith the database console idea, this sounds really useful. I'm currently using something like this to reset my DB, but not to inspect:\nmongo\nshow dbs\nuse [databasename]\ndb.dropDatabase();\n. Cool! This could be quite powerful...\n. The _form.coffee template in \"templates/shared/products\":\ncoffeescript\ntext '{{#with resource}}'\nform ->\n  fieldset ->\n    ul class: 'fields', ->\n      li class: 'control-group', ->\n        div class: 'controls', ->\n          label 'Name:'\n          text '{{view Ember.TextField valueBinding=\"name\"}}'\n          text '{{#with errors}}'\n          span class: 'help-inline error', '{{name}}'\n          text '{{/with}}'\n      li class: 'control-group', ->\n        div class: 'controls', ->\n          label 'Price:'\n          text '{{view Ember.TextField valueBinding=\"price\"}}'\n          text '{{#with errors}}'\n          span class: 'help-inline error', '{{price}}'\n          text '{{/with}}'\n      li ->\n        a '{{action submit target=\"resource\"}}', 'Submit'\ntext '{{/with}}'\nIn the Views directory there are product views for edit, index and show, but no 'new'. Could this be it?\n. Yes\n. Here's what I see:\n\napp/templates/shared/products/new.coffee\ncoffeescript\n@title = \"New Product\"\npartial \"flash\"\npartial \"form\"\nAnd the form partial that this references is above.\napp/views/client/products/form.coffee\n``` coffeescript\nApp.ProductsEditView = Ember.View.extend\n  templateName: 'products/edit'\n  resourceBinding: 'controller.resource'\n  # You can also use an object controller (Ember.ObjectProxy) \n  # as a layer between the view and the model if you'd like more control.\n  # resourceControllerBinding: 'controller.resourceController'\nsubmit: (event) ->\n    # @todo\n    # if @get('resource.isNew')\n    #   @get('controller.target').send('createProduct')\n    # else\n    #   @get('controller.target').send('updateProduct', @get('resource'))\n    @get('resource').save()\n    Tower.router.transitionTo('products.index')\n    return false\n``\n. Yes I only have a nested route inapp/config/shared/routes.coffee. How do I modify the nesting for the Ember/client side of things? Maybe routes.coffee shouldn't be in theshared` folder?\n. Thanks. I've added a draft beginners guide to the wiki:\nhttps://github.com/viatropos/tower/wiki/Tower-Beginners-Guide\n. I can see that some views have submit actions and bindings as well, though I don't see a reason why this can't all be included in the one file?\n``` coffeescript\nApp.PostsEditView = Ember.View.extend\n  templateName: 'posts/edit'\n  resourceBinding: 'controller.resource'\n  # You can also use an object controller (Ember.ObjectProxy) \n  # as a layer between the view and the model if you'd like more control.\n  # resourceControllerBinding: 'controller.resourceController'\nsubmit: (event) ->\n    # @todo\n    # if @get('resource.isNew')\n    #   @get('controller.target').send('createPost')\n    # else\n    #   @get('controller.target').send('updatePost', @get('resource'))\n    @get('resource').save()\n    Tower.router.transitionTo('posts.index')\n    return false\n``\n. Oh okay, would love to hear viatropos's thoughts on this...\n. I now agree. Would just add that iftemplatesare within theviewsparadigm, then maybe their folder structure should beviews/templates. As a new user this would have made more sense to me. I think the extra click is worth it (or you can get rid ofserverandsharedinsidetemplates` since it is the View/Tower that decides between client or server render.\nThough this does appear to be a technical limitation. While a purely client-side EmberJS application might make sense with templates, Tower has a different architecture that makes more sense with the view and template merged. Agree that Rails is the way I'm thinking here, but so will a lot of converts.\n\nI think the disconnect is in coming from Rails, where what they called \"views\" we're now calling \"templates\".\n\nWhat are our views then? Because of EmberJS they look more like controllers. I guess this is another architectural difference between server MVC and client MVC.\n. Great, that makes sense. In a way Rails wasn't setup for the complex interactions within a page.\nWhat are you thoughts on views/templates?\n. No worries, by the way this guide nicely explains the client/server differences:\nhttp://emberjs.com/guides/ember_mvc/#toc_differences-from-ruby-on-rails\n. I can't argue with your client/server logic, though in your example I think views/users would be views/client/users.\nYeah I feel familiar with the current folder setup already. Thinking through the typical user interaction workflow, the current structure is starting to make sense:\napp\n  |-- config         1. Initial configuration\n  |-- controllers    2. The user requests a page\n  |-- models         3. The controller responds with data from the model \n  |-- stylesheets\n  |-- templates      4. Data is pushed into the views template\n  |-- views          5. Views displays page and directs further requests to controller\nStill a part of me says that templates are so closely related to views that they need to be children, they are the same concept (the presentation), just different interfaces. The data and sockets directory are relatively different concepts compared to models and controllers respectively.\nIn the above example I had templates as the 4th step and views as the 5th, but really it is the other way round. The view outputs to the template. Contrasting this to data/seeds example where the seeds output to the model, not the model to the seeds.\nTechnically you could get away with:\nviews\n  |-- client\n    |-- layout\n    |-- users\n  |-- shared\n    |-- templates\n      |-- layout\n      |-- users\nor just:\nviews\n  |-- client\n    |-- layout\n    |-- users\n  |-- templates\n    |-- layout\n    |-- users\nJust thinking aloud.\n. Oh... and I'd just got the hang of Ember :) But AngularJS also looks really good.\nI'm assuming it's going to be hard, considering how tightly Ember is already integrated with Tower.\n. I would argue that Tower is more feature complete and active than Locomotive. And does the client/server separation really well. But Locomotive looks fine, though it looks like a purely server side framework?\n. So the Tower devs are rebuilding the Router and other aspects of Tower at the moment. Looks like this will have to wait until the new Router is in place etc.\n. Regarding nested routes https://github.com/viatropos/tower/wiki/Routing-and-WebSockets\n. Yeah I get this too, not sure how to debug it...\n. Great stuff @btbinhtran!\n. ",
    "panosru": "design.io has issues on installation...\n. I updated to ruby 1.9.2 and latest version of ruby gems and now I get this errors:\n```\nroot@dev:/home/panosru/domains/example.com/app# node server.js \n   info  - socket.io started\n[Thu, 15 Mar 2012 09:59:23 GMT] INFO Tower development server listening on port 3000\ninfo:  Name: design.io-watcher::app hook::listening                          Type: hook            Data: 5000\ninfo:  Name: design.io-watcher::app hook::started                            Type: hook            Data: 5000\ninfo:  Name: design.io-watcher::app hook::ready                              Type: hook            Data: {\"name\":\"design.io-watcher::app\",\"type\":\"hook\",\"pk ... \ninfo:  Name: design.io-watcher::app ready                                    Type: hook            Data: {\"name\":\"design.io-watcher::app\",\"type\":\"hook\",\"pk ... \n[Thu, 15 Mar 2012 09:59:30 GMT] ERROR :29:in require': no such file to load -- rb-fsevent (LoadError)\n    from <internal:lib/rubygems/custom_require>:29:inrequire'\n    from /home/panosru/domains/example.com/app/node_modules/design.io/lib/design.io/listener/mac.rb:2:in <main>'\n[Thu, 15 Mar 2012 09:59:30 GMT] ERROR <internal:lib/rubygems/custom_require>:29:inrequire': no such file to load -- rb-fsevent (LoadError)\n    from :29:in require'\n    from /home/panosru/domains/example.com/app/node_modules/design.io/lib/design.io/listener/mac.rb:2:in'\n[Thu, 15 Mar 2012 09:59:30 GMT] ERROR :29:in require': no such file to load -- rb-fsevent (LoadError)\n    from <internal:lib/rubygems/custom_require>:29:inrequire'\n    from /home/panosru/domains/example.com/app/node_modules/design.io/lib/design.io/listener/mac.rb:2:in <main>'\n[Thu, 15 Mar 2012 09:59:30 GMT] ERROR <internal:lib/rubygems/custom_require>:29:inrequire': no such file to load -- rb-fsevent (LoadError)\n    from :29:in require'\n    from /home/panosru/domains/example.com/app/node_modules/design.io/lib/design.io/listener/mac.rb:2:in'\n[Thu, 15 Mar 2012 09:59:30 GMT] ERROR :29:in require': no such file to load -- rb-fsevent (LoadError)\n    from <internal:lib/rubygems/custom_require>:29:inrequire'\n    from /home/panosru/domains/example.com/app/node_modules/design.io/lib/design.io/listener/mac.rb:2:in <main>'\n[Thu, 15 Mar 2012 09:59:31 GMT] ERROR <internal:lib/rubygems/custom_require>:29:inrequire': no such file to load -- rb-fsevent (LoadError)\n    from :29:in require'\n    from /home/panosru/domains/example.com/app/node_modules/design.io/lib/design.io/listener/mac.rb:2:in'\n[Thu, 15 Mar 2012 09:59:31 GMT] ERROR :29:in require': no such file to load -- rb-fsevent (LoadError)\n    from <internal:lib/rubygems/custom_require>:29:inrequire'\n    from /home/panosru/domains/example.com/app/node_modules/design.io/lib/design.io/listener/mac.rb:2:in <main>'\n[Thu, 15 Mar 2012 09:59:31 GMT] ERROR <internal:lib/rubygems/custom_require>:29:inrequire': no such file to load -- rb-fsevent (LoadError)\n    from :29:in require'\n    from /home/panosru/domains/example.com/app/node_modules/design.io/lib/design.io/listener/mac.rb:2:in'\n[Thu, 15 Mar 2012 09:59:31 GMT] ERROR :29:in require': no such file to load -- rb-fsevent (LoadError)\n    from <internal:lib/rubygems/custom_require>:29:inrequire'\n    from /home/panosru/domains/example.com/app/node_modules/design.io/lib/design.io/listener/mac.rb:2:in <main>'\n[Thu, 15 Mar 2012 09:59:31 GMT] ERROR <internal:lib/rubygems/custom_require>:29:inrequire': no such file to load -- rb-fsevent (LoadError)\n    from :29:in require'\n    from /home/panosru/domains/example.com/app/node_modules/design.io/lib/design.io/listener/mac.rb:2:in'\n```\n. @viatropos hello, no I didn't installed ruby with rvm, I used debian's package \nroot@dev# ruby --version\nruby 1.9.2p0 (2010-08-18 revision 29036) [x86_64-linux]\nyou can check the output of my issue here as you can see the gem is installed (I tried rb-fsevents at first but it could not be found but in any case if you notice it is installed successfully by design.io so it shouldn't be the problem...)\nIt is a debian 6 64bit\n. @viatropos \nHello, thanks a lot for the support, yes I saw the debug trace and I already tried to install rb-fsevent but I'm still getting errors when I run node server.js...\n```\nroot@dev:/home/panosru/domains/example.com/test# gem install rb-fsevent\nSuccessfully installed rb-fsevent-0.9.0\n1 gem installed\nInstalling ri documentation for rb-fsevent-0.9.0...\nInstalling RDoc documentation for rb-fsevent-0.9.0...\nroot@dev:/home/panosru/domains/example.com/test# node server.js \n   info  - socket.io started\n[Mon, 19 Mar 2012 22:11:26 GMT] INFO Tower development server listening on port 3000\ninfo:  Name: design.io-watcher::test hook::listening                          Type: hook            Data: 5000\ninfo:  Name: design.io-watcher::test hook::started                            Type: hook            Data: 5000\ninfo:  Name: design.io-watcher::test hook::ready                              Type: hook            Data: {\"name\":\"design.io-watcher::test\",\"type\":\"hook\",\"p ... \ninfo:  Name: design.io-watcher::test ready                                    Type: hook            Data: {\"name\":\"design.io-watcher::test\",\"type\":\"hook\",\"p ... \n[Mon, 19 Mar 2012 22:11:58 GMT] ERROR :29:in require': no such file to load -- rb-fsevent (LoadError)\n    from <internal:lib/rubygems/custom_require>:29:inrequire'\n    from /home/panosru/domains/example.com/test/node_modules/design.io/lib/design.io/listener/mac.rb:2:in <main>'\n[Mon, 19 Mar 2012 22:12:02 GMT] ERROR <internal:lib/rubygems/custom_require>:29:inrequire': no such file to load -- rb-fsevent (LoadError)\n    from :29:in require'\n    from /home/panosru/domains/example.com/test/node_modules/design.io/lib/design.io/listener/mac.rb:2:in'\n[Mon, 19 Mar 2012 22:12:04 GMT] ERROR :29:in require': no such file to load -- rb-fsevent (LoadError)\n    from <internal:lib/rubygems/custom_require>:29:inrequire'\n    from /home/panosru/domains/example.com/test/node_modules/design.io/lib/design.io/listener/mac.rb:2:in <main>'\n[Mon, 19 Mar 2012 22:12:05 GMT] ERROR <internal:lib/rubygems/custom_require>:29:inrequire': no such file to load -- rb-fsevent (LoadError)\n    from :29:in require'\n    from /home/panosru/domains/example.com/test/node_modules/design.io/lib/design.io/listener/mac.rb:2:in'\n[Mon, 19 Mar 2012 22:12:05 GMT] ERROR :29:in require': no such file to load -- rb-fsevent (LoadError)\n    from <internal:lib/rubygems/custom_require>:29:inrequire'\n    from /home/panosru/domains/example.com/test/node_modules/design.io/lib/design.io/listener/mac.rb:2:in <main>'\n[Mon, 19 Mar 2012 22:12:07 GMT] ERROR <internal:lib/rubygems/custom_require>:29:inrequire'\n[Mon, 19 Mar 2012 22:12:07 GMT] ERROR :\n[Mon, 19 Mar 2012 22:12:07 GMT] ERROR no such file to load -- rb-fsevent\n[Mon, 19 Mar 2012 22:12:07 GMT] ERROR (\n[Mon, 19 Mar 2012 22:12:07 GMT] ERROR LoadError\n[Mon, 19 Mar 2012 22:12:07 GMT] ERROR )\n[Mon, 19 Mar 2012 22:12:07 GMT] ERROR from :29:in require'\n[Mon, 19 Mar 2012 22:12:07 GMT] ERROR from /home/panosru/domains/example.com/test/node_modules/design.io/lib/design.io/listener/mac.rb:2:in'\n[Mon, 19 Mar 2012 22:12:08 GMT] ERROR :29:in require': no such file to load -- rb-fsevent (LoadError)\n    from <internal:lib/rubygems/custom_require>:29:inrequire'\n    from /home/panosru/domains/example.com/test/node_modules/design.io/lib/design.io/listener/mac.rb:2:in <main>'\n[Mon, 19 Mar 2012 22:12:08 GMT] ERROR <internal:lib/rubygems/custom_require>:29:inrequire': no such file to load -- rb-fsevent (LoadError)\n    from :29:in require'\n    from /home/panosru/domains/example.com/test/node_modules/design.io/lib/design.io/listener/mac.rb:2:in'\n[Mon, 19 Mar 2012 22:12:09 GMT] ERROR :29:in require'\n[Mon, 19 Mar 2012 22:12:09 GMT] ERROR :\n[Mon, 19 Mar 2012 22:12:09 GMT] ERROR no such file to load -- rb-fsevent\n[Mon, 19 Mar 2012 22:12:09 GMT] ERROR (\n[Mon, 19 Mar 2012 22:12:09 GMT] ERROR LoadError\n[Mon, 19 Mar 2012 22:12:09 GMT] ERROR )\n[Mon, 19 Mar 2012 22:12:09 GMT] ERROR from <internal:lib/rubygems/custom_require>:29:inrequire'\n[Mon, 19 Mar 2012 22:12:09 GMT] ERROR from /home/panosru/domains/example.com/test/node_modules/design.io/lib/design.io/listener/mac.rb:2:in <main>'\n[Mon, 19 Mar 2012 22:12:09 GMT] ERROR <internal:lib/rubygems/custom_require>:29:inrequire'\n[Mon, 19 Mar 2012 22:12:09 GMT] ERROR :\n[Mon, 19 Mar 2012 22:12:09 GMT] ERROR no such file to load -- rb-fsevent\n[Mon, 19 Mar 2012 22:12:09 GMT] ERROR (\n[Mon, 19 Mar 2012 22:12:09 GMT] ERROR LoadError\n[Mon, 19 Mar 2012 22:12:09 GMT] ERROR )\n[Mon, 19 Mar 2012 22:12:09 GMT] ERROR from :29:in require'\n[Mon, 19 Mar 2012 22:12:09 GMT] ERROR from /home/panosru/domains/example.com/test/node_modules/design.io/lib/design.io/listener/mac.rb:2:in'\n```\nReally strange and I really love the work you done with Tower, I want to try it but these errors prevent me :(\nThanks again for your support...\nPS: Can't you make design.io not being depended on ruby gem? (I haven't seen the code of design.io but I'm curious if you have such plans)\n. design.io has issues on installation...\n. I updated to ruby 1.9.2 and latest version of ruby gems and now I get this errors:\n```\nroot@dev:/home/panosru/domains/example.com/app# node server.js \n   info  - socket.io started\n[Thu, 15 Mar 2012 09:59:23 GMT] INFO Tower development server listening on port 3000\ninfo:  Name: design.io-watcher::app hook::listening                          Type: hook            Data: 5000\ninfo:  Name: design.io-watcher::app hook::started                            Type: hook            Data: 5000\ninfo:  Name: design.io-watcher::app hook::ready                              Type: hook            Data: {\"name\":\"design.io-watcher::app\",\"type\":\"hook\",\"pk ... \ninfo:  Name: design.io-watcher::app ready                                    Type: hook            Data: {\"name\":\"design.io-watcher::app\",\"type\":\"hook\",\"pk ... \n[Thu, 15 Mar 2012 09:59:30 GMT] ERROR :29:in require': no such file to load -- rb-fsevent (LoadError)\n    from <internal:lib/rubygems/custom_require>:29:inrequire'\n    from /home/panosru/domains/example.com/app/node_modules/design.io/lib/design.io/listener/mac.rb:2:in <main>'\n[Thu, 15 Mar 2012 09:59:30 GMT] ERROR <internal:lib/rubygems/custom_require>:29:inrequire': no such file to load -- rb-fsevent (LoadError)\n    from :29:in require'\n    from /home/panosru/domains/example.com/app/node_modules/design.io/lib/design.io/listener/mac.rb:2:in'\n[Thu, 15 Mar 2012 09:59:30 GMT] ERROR :29:in require': no such file to load -- rb-fsevent (LoadError)\n    from <internal:lib/rubygems/custom_require>:29:inrequire'\n    from /home/panosru/domains/example.com/app/node_modules/design.io/lib/design.io/listener/mac.rb:2:in <main>'\n[Thu, 15 Mar 2012 09:59:30 GMT] ERROR <internal:lib/rubygems/custom_require>:29:inrequire': no such file to load -- rb-fsevent (LoadError)\n    from :29:in require'\n    from /home/panosru/domains/example.com/app/node_modules/design.io/lib/design.io/listener/mac.rb:2:in'\n[Thu, 15 Mar 2012 09:59:30 GMT] ERROR :29:in require': no such file to load -- rb-fsevent (LoadError)\n    from <internal:lib/rubygems/custom_require>:29:inrequire'\n    from /home/panosru/domains/example.com/app/node_modules/design.io/lib/design.io/listener/mac.rb:2:in <main>'\n[Thu, 15 Mar 2012 09:59:31 GMT] ERROR <internal:lib/rubygems/custom_require>:29:inrequire': no such file to load -- rb-fsevent (LoadError)\n    from :29:in require'\n    from /home/panosru/domains/example.com/app/node_modules/design.io/lib/design.io/listener/mac.rb:2:in'\n[Thu, 15 Mar 2012 09:59:31 GMT] ERROR :29:in require': no such file to load -- rb-fsevent (LoadError)\n    from <internal:lib/rubygems/custom_require>:29:inrequire'\n    from /home/panosru/domains/example.com/app/node_modules/design.io/lib/design.io/listener/mac.rb:2:in <main>'\n[Thu, 15 Mar 2012 09:59:31 GMT] ERROR <internal:lib/rubygems/custom_require>:29:inrequire': no such file to load -- rb-fsevent (LoadError)\n    from :29:in require'\n    from /home/panosru/domains/example.com/app/node_modules/design.io/lib/design.io/listener/mac.rb:2:in'\n[Thu, 15 Mar 2012 09:59:31 GMT] ERROR :29:in require': no such file to load -- rb-fsevent (LoadError)\n    from <internal:lib/rubygems/custom_require>:29:inrequire'\n    from /home/panosru/domains/example.com/app/node_modules/design.io/lib/design.io/listener/mac.rb:2:in <main>'\n[Thu, 15 Mar 2012 09:59:31 GMT] ERROR <internal:lib/rubygems/custom_require>:29:inrequire': no such file to load -- rb-fsevent (LoadError)\n    from :29:in require'\n    from /home/panosru/domains/example.com/app/node_modules/design.io/lib/design.io/listener/mac.rb:2:in'\n```\n. @viatropos hello, no I didn't installed ruby with rvm, I used debian's package \nroot@dev# ruby --version\nruby 1.9.2p0 (2010-08-18 revision 29036) [x86_64-linux]\nyou can check the output of my issue here as you can see the gem is installed (I tried rb-fsevents at first but it could not be found but in any case if you notice it is installed successfully by design.io so it shouldn't be the problem...)\nIt is a debian 6 64bit\n. @viatropos \nHello, thanks a lot for the support, yes I saw the debug trace and I already tried to install rb-fsevent but I'm still getting errors when I run node server.js...\n```\nroot@dev:/home/panosru/domains/example.com/test# gem install rb-fsevent\nSuccessfully installed rb-fsevent-0.9.0\n1 gem installed\nInstalling ri documentation for rb-fsevent-0.9.0...\nInstalling RDoc documentation for rb-fsevent-0.9.0...\nroot@dev:/home/panosru/domains/example.com/test# node server.js \n   info  - socket.io started\n[Mon, 19 Mar 2012 22:11:26 GMT] INFO Tower development server listening on port 3000\ninfo:  Name: design.io-watcher::test hook::listening                          Type: hook            Data: 5000\ninfo:  Name: design.io-watcher::test hook::started                            Type: hook            Data: 5000\ninfo:  Name: design.io-watcher::test hook::ready                              Type: hook            Data: {\"name\":\"design.io-watcher::test\",\"type\":\"hook\",\"p ... \ninfo:  Name: design.io-watcher::test ready                                    Type: hook            Data: {\"name\":\"design.io-watcher::test\",\"type\":\"hook\",\"p ... \n[Mon, 19 Mar 2012 22:11:58 GMT] ERROR :29:in require': no such file to load -- rb-fsevent (LoadError)\n    from <internal:lib/rubygems/custom_require>:29:inrequire'\n    from /home/panosru/domains/example.com/test/node_modules/design.io/lib/design.io/listener/mac.rb:2:in <main>'\n[Mon, 19 Mar 2012 22:12:02 GMT] ERROR <internal:lib/rubygems/custom_require>:29:inrequire': no such file to load -- rb-fsevent (LoadError)\n    from :29:in require'\n    from /home/panosru/domains/example.com/test/node_modules/design.io/lib/design.io/listener/mac.rb:2:in'\n[Mon, 19 Mar 2012 22:12:04 GMT] ERROR :29:in require': no such file to load -- rb-fsevent (LoadError)\n    from <internal:lib/rubygems/custom_require>:29:inrequire'\n    from /home/panosru/domains/example.com/test/node_modules/design.io/lib/design.io/listener/mac.rb:2:in <main>'\n[Mon, 19 Mar 2012 22:12:05 GMT] ERROR <internal:lib/rubygems/custom_require>:29:inrequire': no such file to load -- rb-fsevent (LoadError)\n    from :29:in require'\n    from /home/panosru/domains/example.com/test/node_modules/design.io/lib/design.io/listener/mac.rb:2:in'\n[Mon, 19 Mar 2012 22:12:05 GMT] ERROR :29:in require': no such file to load -- rb-fsevent (LoadError)\n    from <internal:lib/rubygems/custom_require>:29:inrequire'\n    from /home/panosru/domains/example.com/test/node_modules/design.io/lib/design.io/listener/mac.rb:2:in <main>'\n[Mon, 19 Mar 2012 22:12:07 GMT] ERROR <internal:lib/rubygems/custom_require>:29:inrequire'\n[Mon, 19 Mar 2012 22:12:07 GMT] ERROR :\n[Mon, 19 Mar 2012 22:12:07 GMT] ERROR no such file to load -- rb-fsevent\n[Mon, 19 Mar 2012 22:12:07 GMT] ERROR (\n[Mon, 19 Mar 2012 22:12:07 GMT] ERROR LoadError\n[Mon, 19 Mar 2012 22:12:07 GMT] ERROR )\n[Mon, 19 Mar 2012 22:12:07 GMT] ERROR from :29:in require'\n[Mon, 19 Mar 2012 22:12:07 GMT] ERROR from /home/panosru/domains/example.com/test/node_modules/design.io/lib/design.io/listener/mac.rb:2:in'\n[Mon, 19 Mar 2012 22:12:08 GMT] ERROR :29:in require': no such file to load -- rb-fsevent (LoadError)\n    from <internal:lib/rubygems/custom_require>:29:inrequire'\n    from /home/panosru/domains/example.com/test/node_modules/design.io/lib/design.io/listener/mac.rb:2:in <main>'\n[Mon, 19 Mar 2012 22:12:08 GMT] ERROR <internal:lib/rubygems/custom_require>:29:inrequire': no such file to load -- rb-fsevent (LoadError)\n    from :29:in require'\n    from /home/panosru/domains/example.com/test/node_modules/design.io/lib/design.io/listener/mac.rb:2:in'\n[Mon, 19 Mar 2012 22:12:09 GMT] ERROR :29:in require'\n[Mon, 19 Mar 2012 22:12:09 GMT] ERROR :\n[Mon, 19 Mar 2012 22:12:09 GMT] ERROR no such file to load -- rb-fsevent\n[Mon, 19 Mar 2012 22:12:09 GMT] ERROR (\n[Mon, 19 Mar 2012 22:12:09 GMT] ERROR LoadError\n[Mon, 19 Mar 2012 22:12:09 GMT] ERROR )\n[Mon, 19 Mar 2012 22:12:09 GMT] ERROR from <internal:lib/rubygems/custom_require>:29:inrequire'\n[Mon, 19 Mar 2012 22:12:09 GMT] ERROR from /home/panosru/domains/example.com/test/node_modules/design.io/lib/design.io/listener/mac.rb:2:in <main>'\n[Mon, 19 Mar 2012 22:12:09 GMT] ERROR <internal:lib/rubygems/custom_require>:29:inrequire'\n[Mon, 19 Mar 2012 22:12:09 GMT] ERROR :\n[Mon, 19 Mar 2012 22:12:09 GMT] ERROR no such file to load -- rb-fsevent\n[Mon, 19 Mar 2012 22:12:09 GMT] ERROR (\n[Mon, 19 Mar 2012 22:12:09 GMT] ERROR LoadError\n[Mon, 19 Mar 2012 22:12:09 GMT] ERROR )\n[Mon, 19 Mar 2012 22:12:09 GMT] ERROR from :29:in require'\n[Mon, 19 Mar 2012 22:12:09 GMT] ERROR from /home/panosru/domains/example.com/test/node_modules/design.io/lib/design.io/listener/mac.rb:2:in'\n```\nReally strange and I really love the work you done with Tower, I want to try it but these errors prevent me :(\nThanks again for your support...\nPS: Can't you make design.io not being depended on ruby gem? (I haven't seen the code of design.io but I'm curious if you have such plans)\n. ",
    "s0nspark": "Awesome ... sounds great!\n. Awesome ... sounds great!\n. ",
    "pyboosted": "I have some problems with rb-fsevent too. I installed ruby and gem using rvm. So, when i try: node server server starts and application works, but I see a lot of error messages in terminal:\nrvm use 1.9.3\nnode server\n\ninfo  - socket.io started\n[Wed, 21 Mar 2012 05:54:48 GMT] INFO Tower development server listening on port 3000\ninfo:  Name: design.io-watcher::tower_app hook::listening                          Type: hook            Data: 5000\ninfo:  Name: design.io-watcher::tower_app hook::started                            Type: hook            Data: 5000\ninfo:  Name: design.io-watcher::tower_app hook::ready                              Type: hook            Data: {\"name\":\"design.io-> watcher::tower_app\",\"type\":\"hoo ... \ninfo:  Name: design.io-watcher::tower_app ready                                    Type: hook            Data: {\"name\":\"design.io-watcher::tower_app\",\"type\":\"hoo ... \n[Wed, 21 Mar 2012 05:54:49 GMT] ERROR /home/pythonic/.rvm/gems/ruby-1.9.3-p0/gems/rb-fsevent-0.9.0/bin/fsevent_watch: 1: cannot open \u0001\ufffd\ufffd: No such file\n/home/pythonic/.rvm/gems/ruby-1.9.3-p0/gems/rb-fsevent-0.9.0/bin/fsevent_watch: 1: \ufffd\ufffd\ufffd\ufffd\u0001\ufffd\u0010\ufffd\u0010\n                                                                                              \ufffdt\ufffd\n                                                                                                  \ufffd\ufffd\ufffd\ufffd\u0001\ufffd\u00100: not found\n/home/pythonic/.rvm/gems/ruby-1.9.3-p0/gems/rb-fsevent-0.9.0/bin/fsevent_watch: 2: Syntax error: word unexpected (expecting \")\")\n[Wed, 21 Mar 2012 05:54:49 GMT] ERROR /home/pythonic/.rvm/gems/ruby-1.9.3-p0/gems/rb-fsevent-0.9.0/bin/fsevent_watch: 1: cannot open \u0001\ufffd\ufffd: No such file\n/home/pythonic/.rvm/gems/ruby-1.9.3-p0/gems/rb-fsevent-0.9.0/bin/fsevent_watch: 1: \ufffd\ufffd\ufffd\ufffd\u0001\ufffd\u0010\ufffd\u0010\n                                                                                              \ufffdt\ufffd\n                                                                                                  \ufffd\ufffd\ufffd\ufffd\u0001\ufffd\u00100: not found\n/home/pythonic/.rvm/gems/ruby-1.9.3-p0/gems/rb-fsevent-0.9.0/bin/fsevent_watch: 2: Syntax error: word unexpected (expecting \")\")\n\nrvm use 1.9.2\nnode server\n\ninfo:  Name: design.io-watcher::tower_app hook::listening                          Type: hook            Data: 5000\ninfo:  Name: design.io-watcher::tower_app hook::started                            Type: hook            Data: 5000\ninfo:  Name: design.io-watcher::tower_app hook::ready                              Type: hook            Data: {\"name\":\"design.io-watcher::tower_app\",\"type\":\"hoo ... \ninfo:  Name: design.io-watcher::tower_app ready                                    Type: hook            Data: {\"name\":\"design.io-watcher::tower_app\",\"type\":\"hoo ... \n[Wed, 21 Mar 2012 06:00:57 GMT] ERROR /home/pythonic/.rvm/gems/ruby-1.9.2-p290/gems/rb-fsevent-0.9.0/lib/rb-fsevent/fsevent.rb:115: in popen: Exec format error - /home/pythonic/.rvm/gems/ruby-1.9.2-p290/gems/rb-fsevent-0.9.0/bin/fsevent_watch  /var/www/tower_app (Errno::ENOEXEC)\n  from /home/pythonic/.rvm/gems/ruby-1.9.2-p290/gems/rb-fsevent-0.9.0/lib/rb-fsevent/fsevent.rb:115:in pipe'\n  from /home/pythonic/.rvm/gems/ruby-1.9.2-p290/gems/rb-fsevent-0.9.0/lib/rb-fsevent/fsevent.rb:46:instop'\n  from /home/pythonic/.rvm/gems/ruby-1.9.2-p290/gems/rb-fsevent-0.9.0/lib/rb-fsevent/fsevent.rb:42:in ensure in run'\n  from /home/pythonic/.rvm/gems/ruby-1.9.2-p290/gems/rb-fsevent-0.9.0/lib/rb-fsevent/fsevent.rb:42:inrun'\n  from /var/www/tower_app/node_modules/design.io/lib/design.io/listener/mac.rb:13:in `'\n\nAs i understand - rb-fsevent-0.9.9/bin/fsevent_watch is a mac only binary, and it wouldnt run on Ubuntu. So, server starts, but design.io doesnt work here.\n. I have some problems with rb-fsevent too. I installed ruby and gem using rvm. So, when i try: node server server starts and application works, but I see a lot of error messages in terminal:\nrvm use 1.9.3\nnode server\n\ninfo  - socket.io started\n[Wed, 21 Mar 2012 05:54:48 GMT] INFO Tower development server listening on port 3000\ninfo:  Name: design.io-watcher::tower_app hook::listening                          Type: hook            Data: 5000\ninfo:  Name: design.io-watcher::tower_app hook::started                            Type: hook            Data: 5000\ninfo:  Name: design.io-watcher::tower_app hook::ready                              Type: hook            Data: {\"name\":\"design.io-> watcher::tower_app\",\"type\":\"hoo ... \ninfo:  Name: design.io-watcher::tower_app ready                                    Type: hook            Data: {\"name\":\"design.io-watcher::tower_app\",\"type\":\"hoo ... \n[Wed, 21 Mar 2012 05:54:49 GMT] ERROR /home/pythonic/.rvm/gems/ruby-1.9.3-p0/gems/rb-fsevent-0.9.0/bin/fsevent_watch: 1: cannot open \u0001\ufffd\ufffd: No such file\n/home/pythonic/.rvm/gems/ruby-1.9.3-p0/gems/rb-fsevent-0.9.0/bin/fsevent_watch: 1: \ufffd\ufffd\ufffd\ufffd\u0001\ufffd\u0010\ufffd\u0010\n                                                                                              \ufffdt\ufffd\n                                                                                                  \ufffd\ufffd\ufffd\ufffd\u0001\ufffd\u00100: not found\n/home/pythonic/.rvm/gems/ruby-1.9.3-p0/gems/rb-fsevent-0.9.0/bin/fsevent_watch: 2: Syntax error: word unexpected (expecting \")\")\n[Wed, 21 Mar 2012 05:54:49 GMT] ERROR /home/pythonic/.rvm/gems/ruby-1.9.3-p0/gems/rb-fsevent-0.9.0/bin/fsevent_watch: 1: cannot open \u0001\ufffd\ufffd: No such file\n/home/pythonic/.rvm/gems/ruby-1.9.3-p0/gems/rb-fsevent-0.9.0/bin/fsevent_watch: 1: \ufffd\ufffd\ufffd\ufffd\u0001\ufffd\u0010\ufffd\u0010\n                                                                                              \ufffdt\ufffd\n                                                                                                  \ufffd\ufffd\ufffd\ufffd\u0001\ufffd\u00100: not found\n/home/pythonic/.rvm/gems/ruby-1.9.3-p0/gems/rb-fsevent-0.9.0/bin/fsevent_watch: 2: Syntax error: word unexpected (expecting \")\")\n\nrvm use 1.9.2\nnode server\n\ninfo:  Name: design.io-watcher::tower_app hook::listening                          Type: hook            Data: 5000\ninfo:  Name: design.io-watcher::tower_app hook::started                            Type: hook            Data: 5000\ninfo:  Name: design.io-watcher::tower_app hook::ready                              Type: hook            Data: {\"name\":\"design.io-watcher::tower_app\",\"type\":\"hoo ... \ninfo:  Name: design.io-watcher::tower_app ready                                    Type: hook            Data: {\"name\":\"design.io-watcher::tower_app\",\"type\":\"hoo ... \n[Wed, 21 Mar 2012 06:00:57 GMT] ERROR /home/pythonic/.rvm/gems/ruby-1.9.2-p290/gems/rb-fsevent-0.9.0/lib/rb-fsevent/fsevent.rb:115: in popen: Exec format error - /home/pythonic/.rvm/gems/ruby-1.9.2-p290/gems/rb-fsevent-0.9.0/bin/fsevent_watch  /var/www/tower_app (Errno::ENOEXEC)\n  from /home/pythonic/.rvm/gems/ruby-1.9.2-p290/gems/rb-fsevent-0.9.0/lib/rb-fsevent/fsevent.rb:115:in pipe'\n  from /home/pythonic/.rvm/gems/ruby-1.9.2-p290/gems/rb-fsevent-0.9.0/lib/rb-fsevent/fsevent.rb:46:instop'\n  from /home/pythonic/.rvm/gems/ruby-1.9.2-p290/gems/rb-fsevent-0.9.0/lib/rb-fsevent/fsevent.rb:42:in ensure in run'\n  from /home/pythonic/.rvm/gems/ruby-1.9.2-p290/gems/rb-fsevent-0.9.0/lib/rb-fsevent/fsevent.rb:42:inrun'\n  from /var/www/tower_app/node_modules/design.io/lib/design.io/listener/mac.rb:13:in `'\n\nAs i understand - rb-fsevent-0.9.9/bin/fsevent_watch is a mac only binary, and it wouldnt run on Ubuntu. So, server starts, but design.io doesnt work here.\n. ",
    "rbraley": "This is a blocker for me as well please evaluate the pull request on https://github.com/viatropos/design.io/pull/9\n. This is a blocker for me as well please evaluate the pull request on https://github.com/viatropos/design.io/pull/9\n. ",
    "edubkendo": "I've taken the liberty of providing rough translations of the Japanese code comments. This was probably unnecessary as the code seems quite clear, but thought it might possibly be helpful to someone. I can't be sure my translations are accurate, so  please ask yusugomori any questions. Hope this wasn't out of line in any way. \n. @avastou @sebastianhoitz did either of you guys ever get an example of this together? I really can't seem to make heads/tails of this at present although I haven't been at it long. Currently looking through the source code to try to figure out how it's implemented, because so far, in my controllers, I'm basically getting \"undefined\" on anything I try to do to access the socket. Always comes up undefined. Would LOVE an example that showed what to put in each file and where to put it just to get some very basic functionality. I can build from there.\n. Hmm, tried using your version and that exact bit of code in my controller. But still getting an error. Is there some other place where I need to require or configure something? Or should this work dropped right into a fresh tower project?\n. Looks like @viatropos gave you a pretty thorough rundown in a different issue, so yeah. If you aren't making anything proprietary, I'd love to peep your example code when you get this running @TheHydroImpulse \n. So it looks like this is taking every redirect and when it goes through the if/else conditional its being sent to either /custom/ or /custom/1 . Under what circumstances are we actually wanting it to redirect to custom and/or custom/1 ?\n. Hmmm so would something like this work:\ncoffeescript\n   if NODE_ENV is 'test'\n     if options.action == 'index'\n       url = \"/custom\"\n     else\n       url = \"/custom/1\"\n. This is fine on my end. @sebastianhoitz ?\n. yup, I'll see what I can do\n. changing that line to \ncoffeescript\n   require('mime').extension(@controller.request.header(\"content-type\"))\ncauses the format come back as \"html\" instead of \"form\" but now it keeps trying to redirect o a page called /custom/1 which then gives the error:\nNo path matches /custom/1\nKind of unsure where to look next. If anyone has any hints I'd appreciate them.\n. Thanks sebastian. After the change I made to instrumentation.coffee, which I've issued a pull request, and commenting out the custom hardcoded redirects from issue #104 , I am now seeing the expected behavior.  Awesome.\n. The recent change back to \ncoffeescript\n    require('mime').extension(@request.header(\"content-type\"))\ncauses the original problem to return, although the error messages no longer show up, it once again tries to post as format:form , and returns an empty page.\n. Ok, I have a fix for this in the simple case, which doesn't break any tests:\ncoffeescript\n      unless @params.format\n        try @params.format = require('mime').extension(@request.header(\"content-type\"))\n        if @params.format is \"form\"\n          @params.format = \"html\"\n        @params.format ||= \"html\"\nbut there are tons of mime types that could possibly come back, and any of those besides \"form\" will just create the same set of errors all over again, or so it seems to me. \nSomething that might also work here, and cover the more general case is something like:\ncoffeescript\nunless @params.format is \"json\"\n    @params.format = \"html\"\nSince it seems like those are the only two formats tower is actually looking for, but I didn't know how this would effect things like uploading files, etc.  It doesn't seem like tower is actually using the information stored here in @params.format to deal with anything like that, just to decide whether to send back html or json, but I wanted to be sure before I put together a pull request.\n. fixed with most recent pull request.\n. Two things-- mocha has a watch option to autotest-on-save that's baked in, I actually really like testing this way because I also use the growl option so that I can focus on coding or whatever while tests are running, then get a quick notification through libnotify (but mocha uses growl for mac or windows) that just pops up in the corner of the screen with my results pass/fail. Then, if its a fail I can go look more closely at the output in the terminal to see why. \nThe open-browser solution your talking about sounds pretty awesome, but I'd like a headless option as well simply because it kind of depends WHAT your testing on the client side whether you really need a real browser or not. Also, as far as I can tell, design.io still only works for Mac folks right?  \nIn the js/node world those of us using linux might be the minority, but I think we're a BIG minority.  I don't mind not being able to use design.io too much, I mean, I would REALLY like to be able to use it, but I can live without it. I can't live without being able to easily set up automated testing on client side code. And it sounds like, without design.io, unless we have some sort of headless option baked in, that's pretty much what the situation would be.\n. For what it's worth:\nzombieJS appears to be quite easy to use with Mocha, ie https://github.com/mizchi/zombie-tester-example .  Whereas using PhantomJS with Mocha seems to be a more difficult proposition: https://github.com/visionmedia/mocha/issues/160 . \n. zombie actually implements sizzle.js for CSS selectors, which is also what jquery uses. It looks like this comes pretty close to what you are wanting, though I could certainly be misunderstanding. From the zombiejs homepage :\n\nThere are several ways you can inspect the contents of a document. For starters, there's the DOM API, which you can use to find > elements and traverse the document tree.\nYou can also use CSS selectors to pick a specific element or node list. Zombie.js implements the DOM Selector API. \nThese functions are available from every element, the document, and the Browser object itself...\n\n``` javascript\n// Make sure we have an element with the ID brains.\nassert.ok(browser.query(\"#brains\"));\n// Make sure body has two elements with the class hand.\nassert.lengthOf(browser.body.queryAll(\".hand\"), 2);\n// Check the document title.\nassert.equal(browser.text(\"title\"), \"The Living Dead\");\n// Show me the document contents.\nconsole.log(browser.html());\n// Show me the contents of the parts table:\nconsole.log(browser.html(\"table.parts\"));\n```\n\nCSS selectors are implemented by Sizzle.js. In addition to CSS 3 selectors you get additional and quite useful\nextensions, such as :not(selector), [NAME!=VALUE], :contains(TEXT), :first/:last and so forth. Check out the Sizzle.js\ndocumentation for more details.\n\nSo, if I haven't misunderstood, I think you can get what you want from zombie fairly easily, which would be awesome, as I agree that is much easier to use.\n. first question, did you do, \"npm install . \" after creating the new project to install the dependencies in the package.json file?\n. ah see @viatropos answer, beneath mine.\n. +1. The coffeekup author appears to have abandoned his open source projects, at least for the time-being.  Both major projects that I know of have been forked by the community and given proper updates. \n. Added the changes to appGenerator to update the twitter-bootstrap references for labels and badges.\n. What versions of Node and npm are using?\nI've seen similar errors recently but running:\nnpm cache clean\nAnd then re-trying usually seems to clear it up for me right away.\n. So basically, just submit the changed coffee file without doing the recompile?\n. Me being silly and re-compiling the entire src folder, i think.  Still getting the hang of everything. Should have this sorted in a couple minutes, though.\n. yeah been meaning to mention this, I'm on linux and \"design.io start\" now works great for pushing changes in something i am working on to the browser and stuff, but \"design.io\" for compiling tower itself and whatnot just sits there, doesnt do anything, and doesnt seem to compile anything at all. But, I compiled JUST the instrumentation.coffee file for the pull request on the new one, and used a topic branch as you reccomended. Hopefully got everything right this time. Sorry for the trouble.\n. dope. sounds like that will be better then. at the time I wrote this, it was one of the major frustrations I encountered in trying to get an app on heroku. \n. These are just about done. Should have a pull request up this weekend.\n. Done.\n. @sebastianhoitz Did you check out https://github.com/viatropos/tower/wiki/1-1 ? That has examples of the @hasOne relationship. Also, @viatropos response to my question about hasMany/belongsTo on SO might be helpful: http://stackoverflow.com/questions/10749758/how-do-i-use-one-to-many-relationships-in-tower-js .\n. @robak1987 first, read through the stackoverflow link I posted above, then checkout https://github.com/edubkendo/demoApp for a step-by-step on how I setup hasMany/belongsTo\n. I see what you mean now. Yes, looking at the source, it looks like hasOne is still incomplete. Also, I noticed that in relations.coffee, hasOne, hasMany and belongsTo all have class methods, while hasManyThrough does not. Dunno if it doesn't because it is different or if it is just incomplete also, but wanted to mention that here for reference.\n. @viatropos wiki page with screenshots: https://github.com/viatropos/tower/wiki/Flash-Messages\n. I actually wanted to write tests for these but just didn't have any clue where to even begin. I've read enough about TDD to know intuitively that it feels \"correct\", but reading about writing tests in a largely abstract way and  actually writing them, especially when it involves a large body of code someone else wrote, is a very different story. Guidance on how to do this, in the docs or something, would really be awesome.\n. So looking at tower's code here, it appears that the length validation and related methods all actually work on numbers, not strings (which is what is implied by both the name \"length\" and the examples in the wiki). I verified this by making a few examples and trying them out and it is definitely the case. For instance:\n@validates 'lols', length: 10\nworks when 'lols' is a field which takes an integer, and you give it the number 10. \n@validates 'lols', max: 10\nWorks similarly, except allows 10 and less to pass, while failing 11 and up.  I don't think, at least on length itself, that this is what was intended, though we definitely NEED validations for testing numbers, we also need validations to test the length of strings. But, not 100% sure what the intent was here...\n. Looks like the uniqueness validation also has errors.  Setting a uniqueness vld on my post model:\n@validates 'title', uniqueness: true\nand trying to create an identical post, triggers this error:\nnode\nError: Translation doesn't exist for 'model.errors.uniqueness'\n    at Object.lookup (/home/eric/git/community/tower/lib/tower/support/i18n.js:55:13)\n    at Object.<anonymous> (/home/eric/git/community/tower/lib/tower/support/i18n.js:34:34)\n    at Object.t (/home/eric/git/community/tower/lib/tower/application/shared.js:74:50)\n    at MongoDB.<anonymous> (/home/eric/git/community/tower/lib/tower/model/validator/uniqueness.js:25:63)\n    at /home/eric/git/community/tower/lib/tower/server/store/mongodb/finders.js:63:25\n    at [object Object].<anonymous> (/home/eric/git/community/tower/node_modules/mongodb/lib/mongodb/collection.js:521:7)\n    at [object Object].g (events.js:156:14)\n    at [object Object].emit (events.js:88:20)\n    at Db._callHandler (/home/eric/git/community/tower/node_modules/mongodb/lib/mongodb/db.js:1296:25)\n    at /home/eric/git/community/tower/node_modules/mongodb/lib/mongodb/connection/server.js:386:30\n. Once pull request #159 and #160 are accepted, this issue will be resolved, so I'm going to go ahead and close it.\n. +1 keeping a second set in a \"tower docs\" repo.\nI really like the idea of having two sets of docs, a semi-permanent, this stuff works, very unlikely to change much set of documentation on the towerjs website, and an easy to add-to, alter, etc set that is kind of in flux, and easy for anyone in the community to build on. Of course as development slows down, new features become less common, etc, having the second set may be less useful, but for now I personally like it very much. I think it encourages community contributions when they can see the effects right away, etc. At the same time, having a set of less mutable docs that I know have been vetted and 'finalized' is awesome. I think moving the docs that are in the wiki now into a separate repo so they dont get indexed is a great idea. Also, eagerly looking forward to your refactoring of the docs and all the other cool stuff coming soon.\n. Maybe a really obvious question, but did you set up belongsTo on the post model or just hasMany on the user?\n. Yup, did a bunch of experiments myself trying to make this work and I agree it's not reciprocal.  Anything you try involving post.user() comes back very different from what you would expect.\n. Temporary workaround, if you haven't worked this one out for yourself, is something like:\ncoffeescript\n  show:  ->\n    App.Post.find @params.id, (error, @post) =>\n      if @post\n        @user = {}\n        @post.user().where(id: @post.attributes.userId).all (error, @user) =>\n          console.log @user\n          @render \"show\"\n      else\n        @redirectTo \"index\"\nMeanwhile, taking a look into the root problem here, if @viatropos doesn't get to it first.\n. @viatropos Ok. Best I can tell, the problem seems to be in the BelongsTo.Criteria subclass, and specifically with the pseudo-constructor ToCriteria method. If it worked right, it is what would work to narrow down the scope to return the specific record(s) that the owner record belongs to.  \nAs far as I can tell, however, this ToCriteria method never gets called from anywhere in the codebase, nor run in any other way, so the scope on a BelongsTo query ends up being the generic Criteria, in other words, wide open. I may be wrong, as this has been the most complex part of Tower I've attempted to wrap my whole head around at once yet.  \nNothing I've tried doing to fix the error (such as attempts to turn ToCriteria into \"constructor\" and some other attemots), but i will look into it some more Monday if it isnt figured out by then.\n. What does the command you are entering in the terminal look like?  I know that \ntower generate scaffold Post title:string body:text userId:integer\nworks correctly for me.\n. See Issue #157 , there are known issues with the model validations.\n. +1 for generator templates\n. @viatropos @krainboltgreene have you guys seen https://github.com/epeli/underscore.string ? While it doesn't provide nearly the range of awesomeness that sugar.js provides, it does extend underscore quite a bit, and could be a good start on building TowerSupport \uff3c(^o^)\uff0f , without fooling around with core objects. For what its worth, sugar seems to be about as safe as you can get, as far as extending these go.  That said, I think we should be extremely careful of adding anything to Tower that would be a majorly divisive issue within the community, fly in the face of established best practices, etc. What we don't want to create is a situation where people say of Tower something like, \"Yeah, it looks cool but it extends core objects so...\" without having very good reasons for doing so (ie. it adds some enormous benefit that can't be gotten any other way). It seems to me that the way to move forward would be A) create a plugin/module that makes it easy for people to add sugar.js to their tower projects, without putting sugar.js in tower itself B) begin/continue work on building Tower.Support through extending the _ object.\n. I've used scaffolding successfully, with some instructions here: https://github.com/edubkendo/demoApp and destroy has always worked. Of course, destroy/delete is handled by javascript on the client side . Your client side controller should look something like this: \n``` cofeescript\nclass App.PostsController extends Tower.Controller\n  @on \"click .post a[data-method='delete']\", \"destroy\"\n# example\n  destroy: (event) ->\n    row       = $(event.target).closest('[data-id]')\n    id        = row.attr('data-id')\ntry\n  @resourceKlass().destroy id, (error, resource) =>\n    row.remove()\ncatch error\n  console.log error\n\nfalse\n\n```\nDid you alter the client-side controllers, also, what did you type in the terminal to generate your scaffold? Correct syntax is something like:\ntower generate scaffold User email:string firstName:string lastName:string hasMany:posts\nAnyways, those are the first two things I can think of, also, is javascript enabled in your browser? I feel like that's an obvious question but thought I'd ask anyways.\nEdited to clarify: That client-side code is what the scaffold should have generated, and that is what actually handles the deletion.  If you didn't alter it, verify that it was generated by the scaffold generator.\n. @viatropos using the development branch of tower, I run into this same issue. When I looked into it, for whatever reason, the client side controller code was not generated by the scaffold, only \ncoffeescript\nclass App.UsersController extends Tower.Controller\n  @scope 'all'\nWhen I copy the above-referenced code into the controller then it works as expected.\n. Looks like the function you are referencing will be handled differently in the next version of tower (0.4.1) which will be released soon. In it, url is assigned as you say, \"url = ...\" . Did you try changing it in the file to see if your code would run?\nBy the way, when you quote code here on github, if you put  three backticks followed by \"javascript \" (or coffeescript, or ruby, or whatever) on the line above, and three backticks on the line below, you'll get pretty formatting with syntax highlighting which makes it a lot easier to read.\n. Ah, toying around with the browser console a bit, I think I figured it out. You have to use the proper accessors to change those properties. So:\ncoffeescript\nuser.set('email', login)\nuser.set('password', password)\nuser.save()\nSimilarly, to retrieve object properties, use the 'get' accessor.\ncoffeescript\nemail = user.get('email')\npassword = user.get('password')\nHopefully this will work. I'm running the development branch, with Ember.objects built in, so things may still be different from your set up but I think this should do it.\n. For the record, this log is from the most recent attempt, and while he found a workaround for getting it to run, he was never able to properly create and run an app. My hunch is that the later issues he was having were related to the install issues he had, but it could be two seperate issue. @viatropos please take a look when you can.\n<DrGigabit> btw, regarding dev branch, if I build it and install using make install; then I try smth. like tower console; I get module.js:340\n<DrGigabit>     throw err;\n<DrGigabit>           ^\n<DrGigabit> Error: Cannot find module '../lib/tower'\n<DrGigabit> obviously I don't have tower forked in /usr/local/lib\n<e_dub> also, check out  the \"Contributor Note\" here : https://github.com/viatropos/tower/tree/development   and the roadmap here: https://github.com/viatropos/tower/wiki  ... cuz i think what your talking about is mentioned in one of those... just when you get a chance\n<e_dub> ah yeah, you gotta use cake ... hold on, I'll dig up the log where viatropos walked me through install\n<DrGigabit> tower@0.4.1 installed into /usr/local/lib/node_modules/tower; but seems it expects the tower folder to be in the /usr/local/lib\n<e_dub> ok this is kind of a mess, but: https://gist.github.com/3346889\n<e_dub> this may be easier to read: https://dl.dropbox.com/u/24245334/towerjslog.txt\n<e_dub> this also: https://dl.dropbox.com/u/24245334/towerlog2.txt DrGigabit \n<e_dub> also made it a gist: https://gist.github.com/3346943\n<DrGigabit> the discussion you posted seems to be around desing-io issues; in fact for me everything compiles\n<e_dub> so you have everything working fine now?\n<e_dub> you can get node to see tower wherever you have it installed by going into that directory and just using \"npm link\"\n<DrGigabit> nope, I can build/install, but cannot run tower console inside the app folder\n<DrGigabit> Error: Cannot find module '../lib/tower'\n<e_dub> then in projects you make with it, just go into the project and before you run \"npm install\" , just do, \"npm link tower\"\n<DrGigabit> let me see\n<e_dub> and it will link back through the earlier link to where you have tower cloned\n<DrGigabit> yes, it did\n<DrGigabit> but\n<DrGigabit> Error: Cannot find module '../lib/tower'\n<DrGigabit> shouldn't it be ../lib/node_modules/tower?\n<e_dub> hmm that is odd, yeah\n<e_dub> most of my node globals are in usr/local/lib/node_modules and my npm link is linked from there\n<e_dub> but it seems like you followed a very different install path from the one i used\n<DrGigabit> I just did make build; make install :-)\n<e_dub> I forked tower, cloned into a folder in $HOME/git/community, ran npm install, then ran design.io to compile the source to javascript, then did \"npm link\" as this is what viatropos told me to do\n<e_dub> something like that\n<e_dub> I thought there was a cake step in there also, but looking back, that was for compiling the client side tower.js file\n<DrGigabit> let me try npm install\n<e_dub> oh and before i ran design.io to do the compile, I also did, \"npm install design.io\" and \"npm install design.io-javascripts\" because those are left out of the package.json file because of heroku or something\n<DrGigabit> yes, I also did this step\n<e_dub> hmm very weird\n<e_dub> can u run any of the tower binary commands?\n<DrGigabit> module.js:340\n<DrGigabit>     throw err;\n<DrGigabit>           ^\n<DrGigabit> Error: Cannot find module '../lib/tower'\n<DrGigabit>     at Function.Module._resolveFilename (module.js:338:15)\n<DrGigabit>     at Function.Module._load (module.js:280:25)\n<DrGigabit>     at Module.require (module.js:362:17)\n<DrGigabit>     at require (module.js:378:17)\n<DrGigabit>     at Object.<anonymous> (/usr/local/lib/node_modules/tower/bin/tower:3:1)\n<DrGigabit> obviously this is a path issue\n<e_dub> yeah\n<DrGigabit> perhaps I should symlink the lib folder\n<e_dub> that might work\n<DrGigabit> so, here is a workaround: in the /usr/local/lib/node_modules/tower\n<DrGigabit> I created lib -> /usr/local/lib/node_modules\n<DrGigabit> lib -> /usr/local/lib/node_modules\n<DrGigabit> lib pointing to /usr/local/lib/node_modules\n<e_dub> that's really weird you had that issue, but definitely good to know about for future\n<DrGigabit> seems that generator is not yet stable; /usr/local/lib/node_modules/tower/packages/tower-generator/server/generator.coffee:36\n<DrGigabit>       return new klass(options);\n<DrGigabit>              ^\n<DrGigabit> TypeError: undefined is not a function\n<DrGigabit> when I tried tower generate foo with a new towerjs\n* Maedi (~maedi@mail.digitalink.com.au) has joined #towerjs\n<e_dub> hmm if you read those logs, i got that same error until he pushed a tweak to the generator file\n<e_dub> wondering why you are getting it though\n<e_dub> I'm gonna make these logs a gist and point viatropos to it so he can take a look at the issues your running into\n<e_dub> unless you feel like creating issues\n<e_dub> what was the exact \"tower generate\" command you ran DrGigabit ? I want to try it and see if I get issues\n<DrGigabit> tower generate foo\n<e_dub> k\n<e_dub> ah i get same error, but I'm thinking that's because \"foo\" is not proper syntax for the generator\n<e_dub> try \"tower generate scaffold foo\"\n<DrGigabit> Did you actually try to run any apps generated with the new towerjs? I am trying to \"node server\" for my existing app, and I get an expection\n<DrGigabit>         throw err;\n<DrGigabit>               ^\n<DrGigabit> TypeError: Cannot read property 'handle' of undefined\n<DrGigabit>     at HTTPServer.app.use (/usr/local/lib/node_modules/tower/node_modules/express/lib/http.js:216:17)\n<DrGigabit>     at Tower.Application._this [as use] (/usr/local/lib/node_modules/tower/packages/tower-application/server/application.coffee:203:41)\n<DrGigabit>     at null.<anonymous> (/Users/avaranovich/projects/SeeUMe/source/seeume/config/bootstrap.coffee:39:10)\n<DrGigabit>     at Tower.Application._ref [as stack] (/usr/local/lib/node_modules/tower/packages/tower-application/server/application.coffee:247:16)\n<DrGigabit>     at Tower.Application.initializer (/usr/local/lib/node_modules/tower/packages/tower-application/server/application.coffee:168:17)\n<DrGigabit>     at Tower.Application._i (/usr/local/lib/node_modules/tower/packages/tower-application/server/application.coffee:237:27)\n<DrGigabit>     at _.extend.parallel (/usr/local/lib/node_modules/tower/packages/tower-support/shared/shared.coffee:331:22)\n<DrGigabit>     at Tower.StoreMongodbDatabase.ClassMethods.initialize (/usr/local/lib/node_modules/tower/packages/tower-store/server/mongodb/database.coffee:50:26)\n<DrGigabit>     at Tower.StoreMongodbDatabase.ClassMethods.initialize.applyIndexes (/usr/local/lib/node_modules/tower/packages/tower-store/server/mongodb/database.coffee:24:22)\n<DrGigabit>     at Tower.StoreMongodbDatabase.ClassMethods.initialize (/usr/local/lib/node_modules/tower/packages/tower-store/server/mongodb/database.coffee:48:22)\n<DrGigabit> On line 39 I have the following     @use Tower.Middleware.Agent\n<e_dub> yeah use either \"node server.js\" or \"tower server -e development\"\n<DrGigabit> getting the same  /usr/local/lib/node_modules/mongodb/lib/mongodb/connection/server.js:423\n<DrGigabit>         throw err;\n<DrGigabit>               ^\n<DrGigabit> TypeError: Cannot read property 'handle' of undefined\n* Maedi_ (~maedi@1.157.31.62) has joined #towerjs\n* Maedi has quit (Ping timeout: 272 seconds)\n* Maedi_ is now known as Maedi\n<DrGigabit> here is an exemption I get https://gist.github.com/3347224\n<DrGigabit> the only line related to the app is     at null.<anonymous> (/Users/avaranovich/projects/App/config/bootstrap.coffee:39:10)\n<e_dub> do you have an instance of mongodb running on your machine?\n<DrGigabit> the trouble is that I have only 28 lines in that file; yes - mongodb is runnig\n<e_dub> I just fetched the most recent version of tower --development branch, created a new app, ran npm link tower, npm install, and then ran it with \"node server.js\"\n<e_dub> runs fine\n<DrGigabit> did you compile it?\n<e_dub> i need to copy a fresh copy of towerjs into my app's vendor folder to get it running in the browser, but the server side stuff is running\n<e_dub> did i compile what?\n<e_dub> oh what I fetched\n<e_dub> no\n<e_dub> good point\n<DrGigabit> Actually the generator seems does not generate bootstrap.cofee file, so you would not run your app by default anyhow\n<DrGigabit> but it now requires bootstrap.coffee by default\n<e_dub> ok, things are working here with latest\n<DrGigabit> hm\n<e_dub> and if i copy this file: https://dl.dropbox.com/u/24245334/tower.js  into /vendor/javascripts in my app, replacing the one thats there, it works in the browser too\n<e_dub> make an issue, and copy this irc log into it, so viatropos can see before he merges... some weird stuff going on with your install.  my guess is that its something to do with how you installed, but not sure what at all. \n* Maedi has quit (Quit: Colloquy for iPhone - http://colloquy.mobi)\n<DrGigabit> Perhaps we just leave the issue you created\n<e_dub> ok, I can add this log as a comment to it, so he can see some of the issues you were running into\n<DrGigabit> let me link this expection https://gist.github.com/3347224\n<e_dub> ok, hopefully we'll get this all sorted out and make it easier for folks to contribute at the same time\n. @scottkf if I do:\n``` coffeescript\nclass App.Message extends Tower.Model\n  @field 'user', type: 'String'\n  @field 'body', type: 'String'\nuserAndBody: Ember.computed(->\n    user = @get('user')\n    body = @get('body')\n    return \"#{user}: #{body}\"\n  ).property('user', 'body')\n```\nThen go to the console and do:\n``` javascript\nmessages = App.Message.find()\nmessage = messages.objectAt(0)\nmessage.toJSON()\n/ body: \"Hello there how are you today?\"\ncreatedAt: \"2012-08-20T16:11:50.414Z\"\ngistId: undefined\nid: \"503261c67c7a2e8e22000002\"\nupdatedAt: \"2012-08-20T16:11:50.413Z\"\nuser: \"e_dub\"\nproto: Object /\nmessage.get('userAndBody')\n// \"e_dub: Hello there how are you today?\"\n```\nAs you can see, it works, but it only shows up when I specifically call it. It doesn't seem to exist as part of the object, at least represented as JSON, I guess because its a function?\nAlso, notice I wrap the function that I pass to Ember.computed in parens. Not sure why, or whether this matters here, but in my current rails/ember project I get errors if I don't, so I went ahead and did that here. Might be worth a try.\n. Just realized what you are doing is a bit more complex, involving counts on relationships. Going to play with this a bit more and see if it holds up or fails on me.\nEdit:\nNope, still working for me. If I do:\n``` coffeescript\nclass App.User extends Tower.Model\n  @field 'email', type: 'String'\n  @field 'firstName', type: 'String'\n  @field 'lastName', type: 'String'\n@hasMany 'posts'\npostcount: Ember.computed(->\n    return @get('posts').count()\n  ).property('posts')\n```\nAnd in the browser console:\n``` javascript\nusers = App.User.find()\nuser = users.objectAt(1)\nuser.toJSON()\n/ createdAt: \"2012-08-20T16:34:12.353Z\"\nemail: \"bob@bob.com\"\nfirstName: \"bob\"\nid: \"503267041de1182223000001\"\nlastName: \"bob\"\nupdatedAt: \"2012-08-20T16:34:12.353Z\"\nproto: Object /\nuser.get('postcount')\n// 2\n```\nStill works. Not sure why you are having troubles. I'm running the development branch of tower, though, and just realized I'm not sure if you are or not.\nEdited Again:\nOk, so I modified show.coffee to see if it would render properly in the browser... nope. Nothing shows up. Obviously the variable is available, so this may be something you hack in to make available in the view. Going to experiment some more to see what's up.  Seems pretty odd to me.  If this is what you were getting at all along, sorry.\n. I am just guessing this is related, but on most page-loads, using Chrome, I get:\n```\nhttp://localhost:4181/socket.io/1/?t=1345548330232\nFailed to load resource\n```\n. Whoa so I had completely forgotten about \"design.io start\" . Anyways, as far as grunt goes, +1 from me. This seems like it will reduce complexity and make it easier for people to get started using tower, which is great.\nAnyways, the error I'm getting now is:\n```\nXMLHttpRequest cannot load http://localhost:4181/socket.io/1/?t=1345595074171. \nOrigin http://localhost:3000 is not allowed by Access-Control-Allow-Origin.\n```\n. Using the recent build of Tower with grunt upgrade, I'm not getting that error so that's awesome.\n. Similar error about the multiple \"uniqueness\" properties, this was when running \"cake build\": https://gist.github.com/3414073\n. The \"toLabel()\" error actually gets fixed by my pull request, so that just leaves the other one.\n. These are cleaned up now.\n. +1\nthis would make the console much easier to use. would love to see this happen.\n. This is really dope. Pretty amazing. I'll let you know if I encounter any bugs on edge cases, but for the simple case it's working amazingly well. Really impressed with how quickly you got this working. \n. going to rebase and squash these. please don't pull until after.\n. Ok, much better.\n. Ah damn, so the coffeescript API is going to quit being supported entirely?\n. So, it seems like the issue (ignoring a couple of issues which are getting kind of smashed together here, but really need to be talked about entirely seperately) is in trying to force coffee-script to generate code that isn't really the Javascript the compiler was designed to generate in an attempt to make the original Tower API fit 1:1 with Ember's API. So, I think the solution, for those of us who want to keep using coffee-script, is to figure out what needs to change in order to just use the plain-jane coffee-script compiler. I've written plenty of Ember code in coffee-script, and plenty of server-side node code too, using just ordinary coffee-script, and imo it's still far preferable to writing either in javascript, even if it means that it winds up looking a little bit different from the way Tower code is written currently. That API is kind of in a state of flux anyways. \nAs far as the part about waiting while it compiles to javascript, I think the solution to that is pretty easy too, DON'T compile to javascript. When I write coffee-script for other projects I never do, I just require coffee-script at my app's entry point, and use it that way. it never makes debugging an issue, you just skip looking at line numbers, and instead you look at the function and object names. Besides, source maps are working in the coffee-script redux project, which is supposed to be a drop in replacement for the current compiler, so it gives you totally accurate coffee-script line numbers, both in the browser and in node.\nI kind of don't know where to start with all this, and I'm not sure if I want to take it on, I need to give it some thought. I guess a starting point would be to figure out exactly where Ember and coffee-script are currently butting heads, so anyways, there's that. I'll comment on some of the other stuff at issue later. Any thoughts guys?\n. breathes a HUGE sigh of relief\nfuck me backwards, lol. That's a huge difference.\nI'm fine with changing the API to use Ember.extends instead of CS classes in the places where trying to use classes makes it a problem. I rarely use coffee-script's classes in my own code anyways. Usually just for meta-programming stuff, which would still be do-able in this situation. \nAs far as the executable class bodies go, I don't know a lot yet about the problems or their solutions, because I haven't really looked at it deeply before now, but CoffeeScriptRedux has extensibility hooks that might make it feasible to easily address these issues. Check out: Hacking the CoffeeScript Redux Compiler and EmberScript for some examples.  Finally, here's a bit of info on CoffeeScript Source Maps. Just glancing at the list of his current issues, it looks like he's in the home stretch now and just cleaning up the bugs, so it's probably time we take a serious look at this.\nAnyways, really glad that got cleared up as I was at wit's end. So, to be clear, tower new myVeryAwesomeApp will still generate .coffee files, or at least something like tower new myVeryAwesomeApps --use-coffee will? They just will have a more Ember-like and slightly less Rails-like API to them? This isn't a big deal for me. I really like the current API for models, but I was the one pushing hardest for the Ember-style router, or at least for keeping access to the Ember style router, so I am ok with re-working the Model API to something that doesnt cause problems. I'm definitely on the same page with you then, I think.\n. See this comment, also, btw: http://codebrief.com/2012/08/hacking-the-coffeescript-compiler/#comment-621296454\n. @panbhag cd into your tower directory, run \"make watch\", copy the file /dist/tower.js into your app's vendor/javascripts folder, replacing the copy that is there. update the copy of ember.js in that folder to https://github.com/downloads/emberjs/ember.js/ember-1.0.pre.min.js and you should mostly be good to go.\n. Do you guys know http://rubular.com/ ? It's specifically for ruby, but I find it useful for testing regex's of all types.\n. Alright, first things first: Got the SublimeREPL plug-in working 99% with the tower console. It turned out to be easier than I thought because Sublime Text's api exposes a variable just for this sort of thing, $project_path. So I was able to just swap this out for $file_path in the profile I'd made for tower console in the plug-in and (after a bit of debugging where things weren't getting properly passed and needed to be ordered correctly), got it.\nSo, for those developing tower apps using Sublime Text, if you would like, check it out: https://github.com/wuub/SublimeREPL/pull/67 . I don't know if he'll accept my pull request since tower is a framework and not a language, but we'll see. Either way, you can just install my fork like this:\ncd into the directory where Sublime installs packages and then clone the \"adds-tower\" branch. on Ubuntu this would be:\n```\n$ cd .config/sublime-text-2/Packages\n$ git clone https://github.com/edubkendo/SublimeREPL.git -b adds-tower\n```\nAnd you should be set. Seems like it's still a little wonky sometimes. Easiest thing to do, when you first open sublime text with your project, open up a coffeescript file in the project's root like the cakefile and then start the REPL (cmd + shift + P, type tower). Now you can close those and should have zero problems re-opening the REPL no matter where you are. All this will be fixed when the real issue is addressed, which gets to the next part:\nYes, you can run the rails console from anywhere in your project. I checked it out with an old rails project of mine. Works fine. When I looked into the code though, this is it:\n``` ruby\n!/usr/bin/env ruby\nrequire File.expand_path('../../load_paths', FILE)\nrequire 'rails/all'\nrequire 'active_support/all'\nrequire 'irb'\nrequire 'irb/completion'\nIRB.start\n```\nSo, no help there. I have some ideas, actually from looking at some other sublime plug-ins, specifically the ones that work with git.  so adding this to my to-do list, lol.\n. Yup, this has proven much more reliable. I made a tweak to the SublimeREPL plugin so that it works with this change in place. Now you can summon up tower console from any open file in your project.\nWorks great from the terminal too.\n. yes lets. not a priority, but annoying lol\n. I've installed tower on Ubuntu 12.04 multiple times. It can be installed. Don't use \"sudo\" though. Take ownership of the folder.\n. yeah that's another equally valid approach. I've also had it set up this way. I changed it at some point because I ran into an issue and thought this was causing the problem. It turned out not to be, but I never changed it back. In fact, I might do that, because it is a cleaner approach.\n. try this: cd into the tower directory and run \"make watch\". That should create the missing library.\n@viatropos shouldn't the version on npm have this step already completed though?\n. try :\nnpm install -g grunt\nThen, when that finishes, try \nmake watch\nin the tower directory again. Don't forget the -g when you install grunt.\n. also, and this is odd, I just ran \"npm install tower\" in an empty directory just to see what was getting installed, and it had everything it needed.  I'm wondering something else. Did you remove all the old stuff from your earlier attempts before you did this new install of node and tower? If any of that stuff is hanging around, it may be looking at the wrong tower.\n. look at the contents of the tower folder and see what's in there. Should have \nbin\nbuild\ndist\nlib\nnode_modules\npackages\ntest\ntmp\n. ok, its missing like, everything. try running \nnpm cache clean\nthen \nnpm install -g tower\nSee if it installs those folders.\n. ok, here's an idea. try just installing tower non-globally but into this folder. in other words, cd into the directory \"node-latest-install\" and then running \"npm install tower\". See if it puts in those missing folders.\n. if it does work, it may just work since npm has already created the executable. If not, just cd into where it installed tower and tell it \"npm link\".\n. @rickcarlino @viatropos guys have a look at this. I'm thinking this might explain some of the errors we are seeing pop up with tower installs lately:\nhttps://github.com/isaacs/npm/issues/2792\nLooks like some very similar error messages to what you were having @rickcarlino , in the bottom part, but i think the entire thread may well be applicable.\n. @g-elke-wowbiz on MacOS check out this , I think this could be part of the problem. Note there is a 3 part solution: https://github.com/isaacs/npm/issues/2792\n. @g-elke-wowbiz was your first attempt with sudo ? Also, have you tried cleaning your cache ( npm cache clean ) between attempts? Try installing as root, after cleaning your cache, and using sudo, if you haven't yet. You could also try installing tower locally instead of globally just to see if it works. Finally, you could try installing from source, and then doing npm link afterwards. I have instructions for that in this post: http://nodehed.com/?p=69 . If you install from source, when you get to the npm install step, if it fails, clean your cache, then try running these seperately:\nnpm install git://github.com/viatropos/coffeecup.git --force\nand:\nnpm install git://github.com/viatropos/coffee-script.git --force\nIf those go, go into the package.json and remove the postinstall hook (remember, this is only IF an initial attempt at npm install fails) and then run npm install . Then just continue with make watch and npm link. Dunno if this will work, just trying to work around whatever is going on here.\nOh, another question, what version of node do you have installed? Today I read a post on stackoverflow today where the problem the person had ended up being that it wouldn't install on 0.8.7 but would on 0.8.8.  \nAnyways, just tossing some thing out there, let us know what does or doesn't end up working.\n. @viatropos I completely agree. That will reduce our dependencies, and it seems to be the main place where people are having issues in installation.\n. @j-mcnally new guides/documentation on ember's router is really good. May be helpful for understanding how to get them to play well with tower: https://github.com/sgharms/website/blob/160477fd0ab1789915ff46bdceb04a6faa74ef18/source/guides/router_primer.md\n. Because it is no longer using Design.IO, you have to run \"cake watch\" first.\n. Just from a readability point of view, nested looks much better to me. I don't know what the performance hit is, though.  Like, how big a difference are we talking about?\n. I think we need to look at replacing hook.io or forking the repo because this is going to stop lots of dev's in their tracks\n. you might want to have a look at how: http://brunch.io/ does it. Especially https://github.com/icholy/ember-brunch  . I don't think we need another build tool (grunt is awesome) but I do think brunch does a pretty good job of making require.js work well. There is also the way a lot of people doing Rails w/ ember work, using Rake Pipeline and minispade. Might be useful for inspiration. Here's a good example of a workflow that seems to be popular: http://blog.nulayer.com/post/23294069876/building-simple-javascript-libraries-with-rake-pipeline\n. @viatropos I think, even moreso than a way to force-require other code (though we probably need that too) is a place to put stuff you want to run after everything is loaded. Something like jquery's ready event.\n. @viatropos I myself have been wondering lately how one accesses Ember's router and the connectOutlet's stuff from within a tower app. I will probably just dig into the source code , but thought I'd ask here just to see.\n. I don't currently know enough about how the two are working together to say. Or what @j-mcnally did/attempted to do to address this in his patch.\nI wonder if the best thing might be to split the two apart into two seperate files, like how they work in a rails/ember app. We could then still create a basic pattern that could be auto-generated when creating new apps and scaffolds and stuff, but it would be easy to change and manipulate for anyone who wants. Also, the ember router gives a lot of fine-grained control so it might make it easier for people wanting to route to additional pages and stuff that don't fall under the typical set of resources , without having to do a lot of extra work on the router itself. Basically, push all navigation onto the  client-side ember router.\n. Aha, so I've been playing around a bit. It's a little bit of work, and definitely wouldn't be at all intuitive to someone who hasn't worked with ember much, but you can get at all these stuffs from within your app.  I'll give an example of how I did this stuff:\nSo first in routes.coffee I added:\ncoffeescript\n@match '/login', to: 'application#login'\nThen, in the application controller's\n``` coffeescript\nserver\nlogin: ->\n    @render 'login'\nclient\nlogin: ->\n    connectOutlets: () ->\n      router = App.router\n      console.log \"Connecting Outlets!\"\n      router.get('applicationController').connectOutlet('login')    \n```\nNow you just create a view and template and your good! Hopefully this will help some other people, and maybe we can think about how to make this a bit easier/simpler.\n. nevermind, this seemed like it was working but now it isn't so I'm not sure what's up.\n. Got it: On that client-side controller, just do this:\n``` coffeescript\nclient\nlogin: ->\n    router = App.get('router')\n    console.log \"Connecting Outlets!\"\n    router.get('applicationController').connectOutlet('login')\n```\nI was just trying to copy Ember.router code a little too literally.\n. Also, @yagooar I got a link in the nav to it working like this:\ncoffeescript\ndiv class: 'nav-collapse', ->\n  ul class: 'nav', ->\n    li '{{bindAttr class=\"App.UserController.isActive:active\"}}', ->\n      a '{{action indexUser href=true}}', t('links.users')\n    li '{{bindAttr class=\"App.ApplicationController.isActive:active\"}}', ->\n      a '{{action loginApplication href=true}}', 'Login'      \n    li '{{bindAttr class=\"App.PostController.isActive:active\"}}', ->\n      a '{{action indexPost href=true}}', t('links.posts')\n. Will you set up some hooks for making it easy to work directly with the outlets, for instance, for apps using multiple outlets?\n. Two things, then some thoughts: \nOne, in the simple case, you should be able to generate a scaffold and it just works, like currently. And I think for most cases we want to reduce/limit verbosity in general with simple, concise DSL.\nTwo, You should be able to take direct control of the outlets so that in more complex cases you can connect those up how you want. \nI think the reason that connectOutlets has typically been included in the router is that it lets you basically think of your page with each section almost like an individual page itself. So one might have three different outlets visible at one time, each connected to a different view and doing something independent of the others, but yet, when the user shares that url on facebook, it needs to link back to a page that has each of the three outlets in the same state as when she first linked it (given the person clicking the link is properly authorized, etc). connectOutlets is serving kind of like a router within the router. So the router routes us from the url to one state, then in that state, connectOutlet routes each outlet to its appropriate view. It IS also a bit like rendering, as you say, and I think we are at one of those annoying places where idioms from the server just don't translate perfectly to the client.\nWhat I can say is that having done one Rails/Ember app, the Ember router is awesome, and absolutely my favorite part of Ember. It is extremely powerful, precise, and easy to work with.\nBut, what works in that situation, where rails is just serving json, and ember is doing all the navigation, etc and so you are pretty much purely routing through the Ember router, may not be what works in Tower. I dunno. I did find it a bit weird in Ember that the controller is essentially just an empty container. If you look at people's rails/ember apps, nobody is using them for anything. They \"might\" have a computed property or two on them, but that's it. Basically they just become boilerplate you write so that your models have somewhere to hang out .  In that case, why have them at all? So maybe the controller IS where the connectOutlet should go, but that seems a bit weird since the controller's are actually what you are connecting, although it does SEEM like you are connecting views, your actually connecting the controllers, and then the views associated with those by convention get connected as well. So which controller do you stick it on? \nSo, the short answer is, I dunno? One thing to keep in mind is that not everything going into the various outlets will always be something that falls under the kind of REST/CRUD sort of resources we are used to thinking about. You might have a game in one, or a widget, or a box for IMs or any number of other thing that isn't just a list of data. We definitely don't want to limit the kind of thing tower is good for. I for one, actually wouldn't mind having a server-side rail's like router AND a client side Ember router, or just have the server send json automatically and just let Ember do all the navigation. But I may well be in the minority on that. Anyways, just some thoughts. It will definitely be awesome to see this finished though.\n. I definitely agree with you @viatropos , a short term solution that just works for now, so tower can really start being used to really build stuff, and then in the mid to long term we can try out some different options in some feature branches and see what we like best. \n. @viatropos I think that you've really tapped into what was bothering us before, and come up with a very powerful solution.  As far as moving away from the Rails model goes, Tower is more than Rails, because it's both client and server, so it makes sense that it will take some of its abstractions from Ember instead.  This is the first time I've really been happy with the proposed solution since we started discussing this, but I could never come up with something better to offer. Damn, I'm excited.\n. I really dislike javascript. Just putting that out there. Every semi-colon and bracket feels like, to quote @topfunky , a stab in the eye. And cleaner syntax is just the tiniest win that you get with coffee-script. I do understand the political motivations behind such a change. There is a lot of highly misplaced dislike of coffee-script within the Javascript community, but it IS misplaced, and seems to come solely from some silly idea that Coffee-scripters don't know Javascript and that because the javascript that's produced isn't the same as the javascript they would write by hand, it's somehow inferior. But it doesn't need to be the same, because it's not meant to be directly interacted with by humans. \nSure, you can say that one has to use the javascript for debugging, and that debugging coffee-script is difficult, but source-maps are here, the coffee-script 2 compiler is pretty much done, and it comes with source maps, which will make debugging the same for coffee-script as it is for js. Besides, I think anyone who really takes the time to get good at writing coffee-script code can tell you, most of the time, all this stuff about \"being more difficult to debug\" amounts to very little. Definitely nowhere near the enormous gains in productivity one gets from things like list comprehensions, or the simplicity of knowing your globals will automatically be scoped predictably for you, without needing to remember to use var.\nI love coffee-script. It's the language I feel most at home in. Coffee-script brought me to Node, and node brought me to Tower.  To see the code-base change to javascript, to see the default change to javascript, this makes me sad. I understand at least some of the motivation behind it, but I can't say that its a decision I agree with. I think Tower could be what pushes coffee-script to dominance, the way Rails pushed Ruby.  More than that, though, I think coffee-script is a big part of Tower's identity and that identity is what made me fall in love with it, made me devote so much time to learning it, advocating it, and contributing to it.\nTo me, one of Tower's core principles has always seemed to be ease of development, and developer enjoyment. In the node.js community they have a saying: \"JIFASNIF: Javascript is Fun and so Node is Fun\" Except javascript is really not much fun, but coffee-script sure as hell is. Maybe it's the old fashioned syntax, or the many places where it disagrees with itself semantically (Just google \"Wat Gary Bernhardt\" if you want to see what I mean), maybe it's the weird way it does OO... I think it's the cumulative effect of all these things, but it makes reading and writing javascript boring and tedious... at least to me.  Coffee-script eliminates many of these problems while retaining the things that ARE fun about the language: it's flexibility and simplicity.\nWe've spoken about this before, and I've never really voiced my full opinion about it, In fact, because I really do understand some of the motivation behind it, I had myself half-convinced that I was in agreement. But now that it's really here before us, and the change is underway, I've realized how strongly I feel. I may be wrong. This may be the right move for tower, this may be the only way forward for Tower, for all that I know. I certainly do not expect Tower to remain in cofffee-script, or with coffee-script as a default just because of my opinions. I think you need to make the changes you feel best serves Tower as a framework and the community as a whole. I'm ok with that.\nAnd I may end up getting totally flamed for speaking so bluntly about javascript here. I'm ok with all that too. \nWhat I wasn't ok with was letting this change go by without speaking up about it. I've done that now, so I'll try to let it go now. These are just my thoughts. I love Tower and want the very best for it, as we all do. Cheers.\n. hey @maedi I'm actually 100% behind Tower's router becoming the Ember router, or more like the Ember router, or at least giving the developer access to the Ember router. Ember's router is amazing. It is a little weird at first, mostly because it was designed to tackle problems that just hadnt been tackled yet, at least, not tackled well, so it's full of new idioms. It doesn't take much time with it though, to realize how awesome and powerful it really is for controlling and manipulating Web UI's and State.\nAll I was disagreeing with was Tower's source and defaults being moved to javascript. I'll probably never agree with that, but I don't really want to get stuck on this either. If javascript defaults are the way forward for Tower, then they are, and like I said before, as long as I can continue using coffee-script, I'll continue using Tower. It's too awesome not to use just because I have to add a --use-coffeescripts or something at the command line. It probably will reduce my contributions to the source code, unfortunately, just because I really hate writing javascript that much. But I do plan to continue writing tutorials and articles into the foreseeable future, and THOSE will be in 100% coffee-script, so in that way I can continue to contribute to Tower's community, as well as answering questions, etc. I do wonder, though, if the kind of hardcore node people who hate coffeescript so much will ever actually use Tower or contribute to it anyways, since they all seem to slam frameworks, and rails, and Ember all the time too... =/\nAnyways, I'm excited to see Tower move towards production-ready, so I can start using it in earnst. I've actually held off finishing my tutorial up because it seemed clear that there would be some api changes happening, and I wanted to wait for those before moving into the client-side code. Hope you are doing well @maedi. Let's not get too hung up on the javascript stuff, or stay too long on negativity. I don't want to make the same mistake I feel hardcore javascript people are, and write off an amazing framework just because I dont care for the language it's implemented in.\n. lol, \nWow, this is almost entirely different. It actually looks like Ember is moving to an API a lot like the one we'd just decided to set aside in favor of their current API. I'm not even sure what I think tbh. I was really incredibly happy with the other Ember API. I don't understand why it was \"hard\" to use. It could be a bit verbose at times, depending on what you wanted to do, but it gave you exactly as much fine-grained control of what was happening as you wanted to take, with clever abstractions to remove muchc of that verbosity in the simpler case. Well, I guess the decisions we make depend a lot on Ember, and how easy/difficult it is to make the Tower api we choose work with whatever Ember is deciding on.\n. no, actually hadnt had time enough to dig around for conversations on this and whatnot, so all i had done was scanned over that link you posted, so these were exactly the questions I had. This sounds good then. I agree the \"bare bones\" API definitely seems like it would be easier to build on top of.\n. Interesting. @viatropos did you see @wycats latest gist ? It looks more and more like Ember's router is moving towards exactly what we are moving away from. \n. To loop through the results what I usually do is something like:\n``` coffeescript\nApp.User.all (err, users) =>\nApp.User.count (err, count) =>\nfor num in [0...count]\n  user = users.objectAt(num)\n  console.log user.toJSON()  #this will show you just the user object and it's properties.\n  # do something to user\n\n```\nIt's slightly awkward, but a small price to pay for the conveniences Ember brings.\n. I can get around this by changing my client side controller's to look like this:\n``` coffeescript\nclass App.UsersController extends Tower.Controller\n  @scope 'all'\n# @todo refactor\n  destroy: ->\n    resource = @get('resource')\n    App.User.destroy(resource)\n```\nWith \"User\" being replaced by whatever the model for that particular controller should be. This does not, however, cause it to sync across browsers. As @TheHydroImpulse points out, it appears that the only action currently bound to the scope, and thus, registering in multiple clients from the server, is the create action. I'll make a seperate issue for that, though.\n. This is fixed in my pull request, both parts actually, so gonna close this to keep issues tidy.\n. These do two different things. get() during project generation fetches files that go in \"vendor\" and run on the client-side, including the client-side version of tower.js. npm install installs all the node_modules which go into the node_modules folder, including a necessary local copy of tower.\n. A bit stuck, changed tower-model/shared/cursor/persistence.coffee like this:\n``` coffeescript\n_destroy: (callback) ->\n    if @instantiate\n      iterator = (record, next) ->\n        Tower.notifyConnections('destroy', [record])\n        record.destroy(next)\n  @_each(@, iterator, callback)\nelse\n  @select('id').find (error, recordsWithOnlyIds) =>\n    @store.destroy @, (error, records) =>\n      Tower.notifyConnections('destroy', recordsWithOnlyIds) unless error\n      callback.call(@, error, records) if callback\n    # this should go into some Ember runLoop thing\n    # it should also be moved to the store\n@\n\n```\nSo now the connection fires to the clients like it should, but the record is still not removed in other clients. It looks like in tower-model/shared/persistence.coffee there is an unload function which gets called on the other clients. This is getting called like it should, but then the function it in turn calls never fires for some reason. It's twin \"load\" function, which gets called on create, etc does just what its supposed to. I can't figure out why the heck the unload never fires. If you put a console.log above the call that goes, but the call itself does not.\n. What those load and unload functions are calling are parallel load and unload functions in tower-store/shared/memory/persistence.coffee. At least, that seems to be it. \n. Got destroy working yesterday, problem was a mistyped variable name. Update is proving trickier. Problem seems to be that when you call load for update, it swaps out the action so when it goes to resolveAgainstCursors, the wrong action shows up (load instead of update). That was pretty easy to hack around, but if you DO set it up so that the action stays update, it gets caught in a never-ending loop of update notifications and the original client keeps pinging the server with the update over and over. Kind of stuck here now.\n. Should add, these are problems beyond the initial fact that the persistence methods for update and delete don't return a record, so those had to be modified to send the right thing instead of sending the result of the action, which was \"undefined\"\n. I think we still need to address the fact that it feels like documentation is in a million different places, and none of it seems to agree with each other, but all in all, I think having the docs in a wiki so its really easy to modify is a good thing. Currently, it feels like a pain to work on them, and I often forget all about doing so. I think making the docs easy to access is probably the most important factor.\n. In working with ember, and building a rails/ember app a while ago, I looked at tons of ember applications and never saw the templates included in the view. They were always either separated out into their own template files, or else included in html and then referenced from the ember.view. Here's one really good example: https://github.com/joliss/better-tweet-feed . Notice how even though she keeps all her views together in this file: https://github.com/joliss/better-tweet-feed/blob/master/app/assets/javascripts/views.js.coffee , the templates have a folder of their own dedicated to them: https://github.com/joliss/better-tweet-feed/tree/master/app/assets/javascripts/templates . To me, this makes a lot of sense, because in the templates you have a description of the pages structure, leaving the views to handle the code that backs that structure up. \nI think what makes this harder than anything is that tower is something brand new. Nobody else has done exactly what tower is attempting to do, so we don't have clear reference points for how to use all these different parts that tower has. As people begin putting together examples and tutorials and guides over the next few months, and tower's documentation improves, it will begin to become more clear how these parts work together and how best to use them to make the apps you want to make. To top things off, Tower changed massively about a month ago, when @viatropos merged in the code from Ember, and so even the few people like myself who have been working with and playing with tower for several months now are learning our way around again.\nEmber itself was essentially designed to be used in a particular way (though part of its strength lies in the way it's been built as a system of smaller packages so that any part or part of it can be used seperately), as one component in a system of other components (including Rails, Ember.Data, etc) so even existing ember documentation, guides and tutorials can only help us so much. Many of the idioms and whatnot I learned while working on that rails/ember app are suddenly of no use with Tower, because those other parts are not there, or because Tower brings the two routers together. Now instead of having essentially a \"dumb\" server side JSON API, with most/all of your logic on the client, you have a much more symbiotic system thats entwined far more closely. It's a complex thing, and it is still under construction.\nAll this said, I want to encourage you to continue working with tower. I believe strongly this is the way forward, and just because it seems unclear now how best to use it, doesn't make it any less awesome. Once we find our footing with Tower, we'll be masters of something incredibly useful, tremendously powerful, and far more capable of making the kinds of awesome applications we all want to be making. It may seem difficult now, but everything about tower exists to make development easier.\n. Controller's (I think I understand) handle what happens as you go from state-to-state, view-to-view. Views handle the logic that takes place as you interact WITH a particular view. Things like events, but also things like the values and labels of things on the screen, and how those should change and react to the user.\n. Even better way of thinking about it: Controller's should handle the logic of how the user interacts with the data, views handle the logic of how the user interacts with the presentation.\n. I don't have a strong feeling either way, but if others would be happier with it I would be fine with that. I think that was discussed at one point though I am not certain.\n. Got the updates. Wow, trickiest \"bug\" I've ever had the \"pleasure\" of tracking down and fixing. Thankfully, Chrome Dev. Tools made it a lot easier to do than would have been otherwise. Now maybe I can get some sleep. Was quite cool seeing all these actions finally working in sync in two browsers.\n. Ah no, I think you are right about that isDirty, i was trying that at one point and just forgot to change it back.\n. word. found that reload method, btw, by setting debugger in the middle of that load method and then just typing \"record.\" into chrome's console scrolling through the suggestions trying different ones and seeing if it caused the update to finish\n. Nearly every object in the Tower system inherits from Ember. Because of this, we get all kinds of perks, including the meteorjs/socketio-type data-binding nearly for free. It is incredibly powerful and useful. Tower.js is a FULL-stack framework that means server and client. But it also means that in many cases you only have to write code once, and it works in both places.  The real problem isn't that we don't support Angular, or Backbone, or any of these other frameworks people keep asking about. The real problem is that there aren't good tutorials/examples/screencasts available to demonstrate how easy and awesome this stuff really is. Unfortunately, none of us want to make those yet because Tower is still heavily under  construction and anything we did now would be obsolete in a month. The good news is that I talked with @viatropos last night, and he's hard at work on tying these changes up and says he'll be done soon. So, I'm guessing that will put us at 0.5.0, which should mean the API is fairly settled and we can start putting those kinds of things together. In the meantime though, I encourage you to really give this a chance, there will be plenty of projects where you can use Angular if that's what you like, but I think you'll find that Tower is way too powerful to ignore.\n. @pashaie you can fix that with:\nnpm install -g ejs\nThis has something to do with your node environment, causing ejs not to get installed when the rest of tower's dependencies are.\nEDIT: Actually, it looks like when you commented out that line in make.bat, that also comments out all the setup that file does, which includes installing tower's dependencies.\n. yeah the \"watch\" task means it continues to run and watches the directory, just leave it running while you develop or run the server. (obviously you can turn it off when you arent working). Then in another tab just run your node server.js.\n. @Maedi completely agree tower is definitely much more active and complete than locomotive. If I were going to use something for production right now, I'd simply build on express. As far as the purely server-side part, i think that is all @panbhag is looking for, when he said he just wanted to build an API. Again, though I'd go with express and either build my own ORM, use mongoose, or use tower and chip in to help bring it to 0.5.0 If you look at locomotivejs, it hasnt been updated in at least two months. There is http://flatironjs.org/ , which is being actively developed and is backed by nodejitsu, which I'd go with over locomotivejs. Not to knock locomotive, but if you are looking for production-ready frameworks, I'd assume support is a big deal. I would wager that tower is probably more capable of handling production than locomotive is, at this point. Versioning is, of course, somewhat relative, but locomotive is only at version 0.3.1 and has seemingly slowed or halted in development.\nEdit: just saw it looks like you've already used locomotivejs. If that is the case and its working for you, then ignore my previous comments.\n. @bendangelo it looks like when you created your new app, and cd'ed into it, you didn't run \"npm install\" to install the app's dependencies. This is why you were having to install tower and other things by hand.  The ejs thing is a seperate weird issue, you shouldn't have had to install that manually. \n. to clarify, creating a new app should go like this:\ntower new myAwesomeApp\ncd myAwesomeApp\nnpm install\ncake watch\nThen, open a second terminal tab and run your server, run generators, etc. Also, if you run a generator, you may need to re-start the \"cake watch\" task, though normally it should pick up changes to your app on its own, I'm not sure if it picks up newly generated stuff without being restarted. Pretty sure this info is available in the README\n. do you have coffeescript installed globally? cake is coffeescript's version of make/rake/jake/etc\n. I like some of where this is going. I definitely think we should keep the controller's how they are. The change seems to add a lot of boilerplate and complexity, without paying off much. Same with the views. Trying to deviate here, and basically undoing a lot of the work ember already does for us, doesn't seem to pay off nearly well enough.\nCleaning up the network stuff, though, sounds like major win to me. Having recently trawled through this repeatedly, I can definitely agree that simplifying this stuff would be really good.  Having a single connection object to work with on each client will be really helpful, and makes implementing some security features much easier. After working with the sync-between-browser stuff recently, I know I had concerns and others voiced them as well, about making sure information you don't want populated to every client can be filtered in some way. This would go a long way towards making that do-able.\nAs far as how to go about working on it: of course it makes sense to work on a topic branch while you work, that way if you want to work on something else you can check out a branch from a clean master to work from that doesn't have the other, unfinished changes in it. But as far as when to merge it in, I'd say we should make a goal of getting a fairly stable API for common uses and things settled and in place as soon as possible, so models, views, controllers, routers, sockets, auth/auth. Then yeah, other more experimental ideas can be worked on more seperately.  You mention greatly changing some core tower stuff, where do you mean? It seems like we all pretty much agree that the things which would cause sweeping API changes were probably more trouble than they were worth?\nOne thing I've been wondering about recently, are there places where tower's internals, or even API, could benefit from using more streams. Mostly because I've been reading a lot of @substack stuff lately, like this: https://github.com/substack/stream-handbook  .  Way off topic, I know, but just been on my mind and wanted to toss it out there since we're talking about changing stuff. Sorry, random.\n. For linux, \nto install coffeescript:\nnpm install -g coffee-script\nMongoDB:\nhttp://www.mongodb.org/display/DOCS/Quickstart\nI was going to list the specific instructions for installing mongodb on ubuntu, but it is actually several steps, so just linking to the install guide is probably best, at least to get the proper version of it. Also, that would be ubuntu specific, but this way its applicable for all linux users.\n. best directions for installing git: http://git-scm.com/book/ch1-4.html . Guess I could just go update the wiki with these since you're gonna point there.\n. https://github.com/viatropos/tower/wiki/Development-environment is no longer a blank ;)\n. This turned out to be a case of the original project had been generated with a version of tower that pre-dated the change in folder structure. When he ran npm update, his version of tower was updated, and so tower was looking for the files in the wrong places. \n. everything working great here.\n. @viatropos If you use my fork of SublimeREPL (cause I'm not sure if he ever merged my pull request) you can use Tower's console in sublime text, with it's code completion, syntax highlighting, and all. Pretty awesome stuff. As far as pulling that out of sublime and into the terminal or something, that would go deeper into sublime's internals than I've tried to do.  Also, installing this package: https://github.com/alienhard/SublimeAllAutocomplete  will give you autocompletions for all open files, so you can have completions for everything in the console that your currently working on, which is awesome. There's a SublimeCodeIntel package, which would be even more awesome except it doesn't currently support coffeescript. I'm currently watching it closely and have made that feature request along with numerous other people so hopefully we'll see it happen. I'm also planning to port the node.js package by @tanepiper to coffeescript, so those snippets will work with completion in coffee files, as well as starting a collection of tower specific snippets which would be useful. LOL. so much to do.\n. NVM shouldn't cause problems with npm, it's node version manager, and just installs instances of node into a folder in the user's home directory so as to avoid having to use so much sudo, and to make it easier to manage installing and uninstalling multiple versions. Perhaps the user could try deleting his node_module's folder, then:\nnpm cache clean\nnpm install .\nAnd then repeating \ncake watch\nnode server\nPerhaps without linking tower (so that a copy is installed in the app's node_modules folder) this will work properly.\n. It was my mistake, sorry, instructions in my tutorial. At the time I started writing it that (linking from the global install) was still working. I've updated those now.\n. Ran into this problem in irc today, person having an issue with \"Comment\" model, getting the exact same error. Grepping tower's source didnt reveal any use of \"comment\", so it must be in Ember. Whatever the case, we definitely need your permanent solution to this issue @TheHydroImpulse . Between Tower and Ember, there's just so many words in use, we're bound to start seeing more and more cases of this as tower picks up users and use cases.\n. Yeah, the validations are kind of weakly implemented. I worked on them a little bit, which is why you had an example that worked, prior to that, length validations were actually comparing Numbers or something really broken like that. A robust solution would be awesome. I don't have a preference on max/maximum, but left it as \"max\" when I worked on them because that's what was already in the code. @viatropos should weigh in though.\n. @viatropos arent we going to be moving away from the custom coffeescript compile stuff? should anyone be worrying about fixing that stuff or would it be better just to use temp. workarounds until we change the api?\n. Did you see my screenshot ? Was I reading that correctly? I believe I'm getting a drastically different result: https://dl.dropbox.com/u/24245334/grunt_htop.png\n. Ah ok, I wasn't seeing that line lol. I was seeing the line lower down, where it said grunt was using 1%. And completely missed the one higher up until just now. Just literally didn't see it.\n. If you set a minimum string length, and then leave the field blank, isn't the string actually shorter than the minimum length? That's probably why its failing. ie. the empty string is shorter than whatever length you set as a minimum.\n. awesome @1xizt I'm sure you'll figure it out. It will be great for someone to finally add support for another database. I am HIGHLY interested in graph db's like neo4j , as is @viatropos , so this is exciting.\n. Definitely interested in seeing what you do with this @1xizt . Of course it's understandable that you are busy. Keep at it though. Will be awesome to see SQL-db's working with tower.\nAs far as Angular, it probably is much simpler than ember, but there's no way it is more powerful. Sometimes simplicity = power, but in this case I'd say the opposite is true. Ember solves and simplifies a whole host of very difficult, complex problems. In doing so it simplifies them, but it can only simplify them so much. Other frameworks appear to be simpler, but only because they completely fail to address (or deliberately choose not to address) some of the problems that Ember addresses quite well. This particular talk by @tomdale (one of Ember's core contrib's) is about ember-data. Tower doesn't need ember-data because it has its own models which fulfill that function, but, I think the talk demonstrates very well some of the very hard problems ember chooses to address that other frameworks do not. There is definitely a place in the world for simpler frameworks like angular and backbone, but what emerges from the synthesis of tower and ember is a full-stack solution to web development that makes hard problems like real-time data syncing, url/browser history and programatic state, sharing models between client and server, and I'm sure @viatropos could give you a much longer list. Even our routing solution, when it's complete, will draw on ember to make it super simple to use a single router for both server and client if desired (as i understand the current design plans). Without ember, tower would basically be a rails clone on node.js, to put it quite bluntly (a really , really fast rails clone with built in websocket support and a bunch of other cool stuff, but still, a rails clone). And ember would be ( is ) a very nice client-side framework that solves a lot of problems. But damn when you put the two together, like viatropos painstakingly did over the summer,  makes for something completely new, something that will simplify web application development in a way that nothing currently available can do.\nOn Sun, Dec 16, 2012 at 11:30 PM, 1xizt notifications@github.com wrote:\nSorry for the delay buddy, I've been doing some research on the drivers for mysql and postgres. I'm buried to my neck in a large scale email app with a bunch of admin functions. Can you guys bear with me for a week so I can get back to solving this part of the puzzle? \nI did look at angular and ember in more details, to me still angular looks more powerful and simpler. I am going through the link on Quora to get a better understanding. Prob I'll have to try both to get a real world feel. I really like most of the choices you've made on toolset in Tower tho, especially use of Coffeescript and haml style layouts. \n. @ragulka Sorry you ran into this. Some of the information on the website http://towerjs.org is quite outdated. The most updated information is in the README.md and the wiki where there is in fact a Beginner's Guide. You might also check out the tutorial on my blog, Build Your Own Towerbot. It should carry you a long way. \n. Glad you're up and running, just let us know if you run into anything else. You can also always stop by the chat,  #towerjs on irc.freenode.net , and someone will try to help you if possible. I often leave it running, even if I'm away from the keyboard, so I may not see your question right away but will try to get to it when I can.\n. @TheHydroImpulse have you checked out https://github.com/component/component btw? might be useful\n. I think one thing that would be super useful, in getting the docs ready, is if we had a list of ALL public API's, and whether or not they have yet been documented. I know that in the past I wanted to make a go at working on the docs and then just didnt really know what to do beyond reading through what was already there and updating/making some corrections. Of course, since this is in flux right now it's not something that could be finished right away, but it might be something that could start being listed out as its being worked on. Just a thought.\n. Awesome work! Glad you found a solution.\n. @vraptor75011 this isn't a simple blog app, but this is a pretty detailed tutorial that will carry you a long way: http://nodehed.com/?p=15\n. @viatropos yeah, can't get this to work either. Was gonna put together an example for him, but nothing I'm trying here gets anything to work. Any attempts to visit /posts/:postId/comments/new or any variation on that and it just takes me back to a screwed up version of /posts/:postId/ with all the info missing. The relationships definitely work, because I can manipulate those from the console all I want, or even customize the existing pages to display the desired information, but there's no way to get there via url.  Of course, since the router will be changing soon, this may all be moot, but anyways, that's what I arrived at after about an hour of trying to get it working.\n@vraptor75011 sorry, yeah, this seems to be broken right now, at least for me.\n. do you happen to have grunt installed globally? Try npm install -g grunt and then see if cake watch works.\n. Good deal!\n. I know in chat I said I didn't know where to start, but on this actually, I took a look and this is where I'd start on implementing this : https://github.com/viatropos/tower/tree/master/packages/tower-command \n@viatropos will be able to give you better guidance, but this is where I'd start, specifically looking at how https://github.com/viatropos/tower/blob/master/packages/tower-command/server/generate.coffee is implemented, since you'll be essentially reversing this process.\n. My gut instinct would be to go ahead and implement it. I dont know when the proposed refactor will occur, but it is probably not in the immediate future. Tower.js has a long to-do list. Also, if you go ahead and implement \"destroy\", it will be easy to refactor, vs. being unwritten and needing to be written from scratch. Having the feature written, even if it requires refactoring later, would seem to me preferrable to not having it at all.\n. I sent him a message to take a look, so hopefully he'll get to this one soon.\n. grunt has to be installed globally: npm install -g grunt but from what I understand the current version of grunt doesnt work, so you'll deliberately need to install an older version of it. I don't know what the exact version number is, but maybe @TheHydroImpulse can tell us? anyways, these errors will be resolved in the next version of tower, coming in a couple weeks, as the install process (as well as everything else) has been vastly streamlined.\n. As far as I know, Tower has actually been using the \"coffeecup\" repo for a really long time now, it just calls it coffeekup in the documentation because that's the recognizable name. If you check the package.json, though, you;ll see it' says:\njavascript\n\"coffeecup\": \">= 0.3.17\"\n. That site, and those guides, are horribly outdated and I believe they are soon to be replaced.\nThe most current docs are here: https://github.com/viatropos/tower/wiki\nI have written a Tower tutorial here: http://nodehed.com/?p=15\n@btbinhtran has a Tower guide available as a PDF here and located at this repo: https://github.com/btbinhtran/towerjs-tutorial\nAny of these may be out of date in parts because Tower v0.5 is due out very soon now, and will radically change the API from what I understand (simplified and awesome-ized), so I know that I, for one, and probably others too, have not been putting a lot of effort into updating soon to be obsolete documentation. If you need Tower now, feel free to use the current version. But my recommendation would be to spend the time learning Ember really well, as Tower is built on Ember from top to bottom, and by getting a good grip on Ember now will put you in the best position for learning Tower when it emerges. Hopefully really soon, eh @viatropos ? @TheHydroImpulse ?\n. @deepanshumehndiratta @jmtoball Tower is being completely rebuilt for version 0.5.0, This is being very actively/aggressively developed from my understanding, though mostly being done behind-the-scenes . There will be an entirely new site, new docs, better build process, clean install process, etc. \nAs it stands, this current version of Tower has many issues with its dependencies, especially grunt, which is why you two are experiencing these problems. If you look through the issues, a number of people have developed workarounds for these issues which may or may not work for you.  My advice though: just wait on 0.5.0. It will be a pretty dramatic change from everything I've been told, faster, cleaner, more modular, and with a dramatically simplified API.\nI'm not currently developing with Tower, but your messages showed up in my inbox and I thought I'd take a moment to try to spare you the pain of continuing to be frustrated with this.\n. @viatropos @TheHydroImpulse how about officially deprecating this version of Tower, with a big warning on the Readme and on the oldsite that explains the current situation. Something in big, bold letters that will grab attention and a link to direct them to somewhere they can watch for news about 0.5? These dependency issues are only going to get worse.\n. WOOT!!\n. I've taken the liberty of providing rough translations of the Japanese code comments. This was probably unnecessary as the code seems quite clear, but thought it might possibly be helpful to someone. I can't be sure my translations are accurate, so  please ask yusugomori any questions. Hope this wasn't out of line in any way. \n. @avastou @sebastianhoitz did either of you guys ever get an example of this together? I really can't seem to make heads/tails of this at present although I haven't been at it long. Currently looking through the source code to try to figure out how it's implemented, because so far, in my controllers, I'm basically getting \"undefined\" on anything I try to do to access the socket. Always comes up undefined. Would LOVE an example that showed what to put in each file and where to put it just to get some very basic functionality. I can build from there.\n. Hmm, tried using your version and that exact bit of code in my controller. But still getting an error. Is there some other place where I need to require or configure something? Or should this work dropped right into a fresh tower project?\n. Looks like @viatropos gave you a pretty thorough rundown in a different issue, so yeah. If you aren't making anything proprietary, I'd love to peep your example code when you get this running @TheHydroImpulse \n. So it looks like this is taking every redirect and when it goes through the if/else conditional its being sent to either /custom/ or /custom/1 . Under what circumstances are we actually wanting it to redirect to custom and/or custom/1 ?\n. Hmmm so would something like this work:\ncoffeescript\n   if NODE_ENV is 'test'\n     if options.action == 'index'\n       url = \"/custom\"\n     else\n       url = \"/custom/1\"\n. This is fine on my end. @sebastianhoitz ?\n. yup, I'll see what I can do\n. changing that line to \ncoffeescript\n   require('mime').extension(@controller.request.header(\"content-type\"))\ncauses the format come back as \"html\" instead of \"form\" but now it keeps trying to redirect o a page called /custom/1 which then gives the error:\nNo path matches /custom/1\nKind of unsure where to look next. If anyone has any hints I'd appreciate them.\n. Thanks sebastian. After the change I made to instrumentation.coffee, which I've issued a pull request, and commenting out the custom hardcoded redirects from issue #104 , I am now seeing the expected behavior.  Awesome.\n. The recent change back to \ncoffeescript\n    require('mime').extension(@request.header(\"content-type\"))\ncauses the original problem to return, although the error messages no longer show up, it once again tries to post as format:form , and returns an empty page.\n. Ok, I have a fix for this in the simple case, which doesn't break any tests:\ncoffeescript\n      unless @params.format\n        try @params.format = require('mime').extension(@request.header(\"content-type\"))\n        if @params.format is \"form\"\n          @params.format = \"html\"\n        @params.format ||= \"html\"\nbut there are tons of mime types that could possibly come back, and any of those besides \"form\" will just create the same set of errors all over again, or so it seems to me. \nSomething that might also work here, and cover the more general case is something like:\ncoffeescript\nunless @params.format is \"json\"\n    @params.format = \"html\"\nSince it seems like those are the only two formats tower is actually looking for, but I didn't know how this would effect things like uploading files, etc.  It doesn't seem like tower is actually using the information stored here in @params.format to deal with anything like that, just to decide whether to send back html or json, but I wanted to be sure before I put together a pull request.\n. fixed with most recent pull request.\n. Two things-- mocha has a watch option to autotest-on-save that's baked in, I actually really like testing this way because I also use the growl option so that I can focus on coding or whatever while tests are running, then get a quick notification through libnotify (but mocha uses growl for mac or windows) that just pops up in the corner of the screen with my results pass/fail. Then, if its a fail I can go look more closely at the output in the terminal to see why. \nThe open-browser solution your talking about sounds pretty awesome, but I'd like a headless option as well simply because it kind of depends WHAT your testing on the client side whether you really need a real browser or not. Also, as far as I can tell, design.io still only works for Mac folks right?  \nIn the js/node world those of us using linux might be the minority, but I think we're a BIG minority.  I don't mind not being able to use design.io too much, I mean, I would REALLY like to be able to use it, but I can live without it. I can't live without being able to easily set up automated testing on client side code. And it sounds like, without design.io, unless we have some sort of headless option baked in, that's pretty much what the situation would be.\n. For what it's worth:\nzombieJS appears to be quite easy to use with Mocha, ie https://github.com/mizchi/zombie-tester-example .  Whereas using PhantomJS with Mocha seems to be a more difficult proposition: https://github.com/visionmedia/mocha/issues/160 . \n. zombie actually implements sizzle.js for CSS selectors, which is also what jquery uses. It looks like this comes pretty close to what you are wanting, though I could certainly be misunderstanding. From the zombiejs homepage :\n\nThere are several ways you can inspect the contents of a document. For starters, there's the DOM API, which you can use to find > elements and traverse the document tree.\nYou can also use CSS selectors to pick a specific element or node list. Zombie.js implements the DOM Selector API. \nThese functions are available from every element, the document, and the Browser object itself...\n\n``` javascript\n// Make sure we have an element with the ID brains.\nassert.ok(browser.query(\"#brains\"));\n// Make sure body has two elements with the class hand.\nassert.lengthOf(browser.body.queryAll(\".hand\"), 2);\n// Check the document title.\nassert.equal(browser.text(\"title\"), \"The Living Dead\");\n// Show me the document contents.\nconsole.log(browser.html());\n// Show me the contents of the parts table:\nconsole.log(browser.html(\"table.parts\"));\n```\n\nCSS selectors are implemented by Sizzle.js. In addition to CSS 3 selectors you get additional and quite useful\nextensions, such as :not(selector), [NAME!=VALUE], :contains(TEXT), :first/:last and so forth. Check out the Sizzle.js\ndocumentation for more details.\n\nSo, if I haven't misunderstood, I think you can get what you want from zombie fairly easily, which would be awesome, as I agree that is much easier to use.\n. first question, did you do, \"npm install . \" after creating the new project to install the dependencies in the package.json file?\n. ah see @viatropos answer, beneath mine.\n. +1. The coffeekup author appears to have abandoned his open source projects, at least for the time-being.  Both major projects that I know of have been forked by the community and given proper updates. \n. Added the changes to appGenerator to update the twitter-bootstrap references for labels and badges.\n. What versions of Node and npm are using?\nI've seen similar errors recently but running:\nnpm cache clean\nAnd then re-trying usually seems to clear it up for me right away.\n. So basically, just submit the changed coffee file without doing the recompile?\n. Me being silly and re-compiling the entire src folder, i think.  Still getting the hang of everything. Should have this sorted in a couple minutes, though.\n. yeah been meaning to mention this, I'm on linux and \"design.io start\" now works great for pushing changes in something i am working on to the browser and stuff, but \"design.io\" for compiling tower itself and whatnot just sits there, doesnt do anything, and doesnt seem to compile anything at all. But, I compiled JUST the instrumentation.coffee file for the pull request on the new one, and used a topic branch as you reccomended. Hopefully got everything right this time. Sorry for the trouble.\n. dope. sounds like that will be better then. at the time I wrote this, it was one of the major frustrations I encountered in trying to get an app on heroku. \n. These are just about done. Should have a pull request up this weekend.\n. Done.\n. @sebastianhoitz Did you check out https://github.com/viatropos/tower/wiki/1-1 ? That has examples of the @hasOne relationship. Also, @viatropos response to my question about hasMany/belongsTo on SO might be helpful: http://stackoverflow.com/questions/10749758/how-do-i-use-one-to-many-relationships-in-tower-js .\n. @robak1987 first, read through the stackoverflow link I posted above, then checkout https://github.com/edubkendo/demoApp for a step-by-step on how I setup hasMany/belongsTo\n. I see what you mean now. Yes, looking at the source, it looks like hasOne is still incomplete. Also, I noticed that in relations.coffee, hasOne, hasMany and belongsTo all have class methods, while hasManyThrough does not. Dunno if it doesn't because it is different or if it is just incomplete also, but wanted to mention that here for reference.\n. @viatropos wiki page with screenshots: https://github.com/viatropos/tower/wiki/Flash-Messages\n. I actually wanted to write tests for these but just didn't have any clue where to even begin. I've read enough about TDD to know intuitively that it feels \"correct\", but reading about writing tests in a largely abstract way and  actually writing them, especially when it involves a large body of code someone else wrote, is a very different story. Guidance on how to do this, in the docs or something, would really be awesome.\n. So looking at tower's code here, it appears that the length validation and related methods all actually work on numbers, not strings (which is what is implied by both the name \"length\" and the examples in the wiki). I verified this by making a few examples and trying them out and it is definitely the case. For instance:\n@validates 'lols', length: 10\nworks when 'lols' is a field which takes an integer, and you give it the number 10. \n@validates 'lols', max: 10\nWorks similarly, except allows 10 and less to pass, while failing 11 and up.  I don't think, at least on length itself, that this is what was intended, though we definitely NEED validations for testing numbers, we also need validations to test the length of strings. But, not 100% sure what the intent was here...\n. Looks like the uniqueness validation also has errors.  Setting a uniqueness vld on my post model:\n@validates 'title', uniqueness: true\nand trying to create an identical post, triggers this error:\nnode\nError: Translation doesn't exist for 'model.errors.uniqueness'\n    at Object.lookup (/home/eric/git/community/tower/lib/tower/support/i18n.js:55:13)\n    at Object.<anonymous> (/home/eric/git/community/tower/lib/tower/support/i18n.js:34:34)\n    at Object.t (/home/eric/git/community/tower/lib/tower/application/shared.js:74:50)\n    at MongoDB.<anonymous> (/home/eric/git/community/tower/lib/tower/model/validator/uniqueness.js:25:63)\n    at /home/eric/git/community/tower/lib/tower/server/store/mongodb/finders.js:63:25\n    at [object Object].<anonymous> (/home/eric/git/community/tower/node_modules/mongodb/lib/mongodb/collection.js:521:7)\n    at [object Object].g (events.js:156:14)\n    at [object Object].emit (events.js:88:20)\n    at Db._callHandler (/home/eric/git/community/tower/node_modules/mongodb/lib/mongodb/db.js:1296:25)\n    at /home/eric/git/community/tower/node_modules/mongodb/lib/mongodb/connection/server.js:386:30\n. Once pull request #159 and #160 are accepted, this issue will be resolved, so I'm going to go ahead and close it.\n. +1 keeping a second set in a \"tower docs\" repo.\nI really like the idea of having two sets of docs, a semi-permanent, this stuff works, very unlikely to change much set of documentation on the towerjs website, and an easy to add-to, alter, etc set that is kind of in flux, and easy for anyone in the community to build on. Of course as development slows down, new features become less common, etc, having the second set may be less useful, but for now I personally like it very much. I think it encourages community contributions when they can see the effects right away, etc. At the same time, having a set of less mutable docs that I know have been vetted and 'finalized' is awesome. I think moving the docs that are in the wiki now into a separate repo so they dont get indexed is a great idea. Also, eagerly looking forward to your refactoring of the docs and all the other cool stuff coming soon.\n. Maybe a really obvious question, but did you set up belongsTo on the post model or just hasMany on the user?\n. Yup, did a bunch of experiments myself trying to make this work and I agree it's not reciprocal.  Anything you try involving post.user() comes back very different from what you would expect.\n. Temporary workaround, if you haven't worked this one out for yourself, is something like:\ncoffeescript\n  show:  ->\n    App.Post.find @params.id, (error, @post) =>\n      if @post\n        @user = {}\n        @post.user().where(id: @post.attributes.userId).all (error, @user) =>\n          console.log @user\n          @render \"show\"\n      else\n        @redirectTo \"index\"\nMeanwhile, taking a look into the root problem here, if @viatropos doesn't get to it first.\n. @viatropos Ok. Best I can tell, the problem seems to be in the BelongsTo.Criteria subclass, and specifically with the pseudo-constructor ToCriteria method. If it worked right, it is what would work to narrow down the scope to return the specific record(s) that the owner record belongs to.  \nAs far as I can tell, however, this ToCriteria method never gets called from anywhere in the codebase, nor run in any other way, so the scope on a BelongsTo query ends up being the generic Criteria, in other words, wide open. I may be wrong, as this has been the most complex part of Tower I've attempted to wrap my whole head around at once yet.  \nNothing I've tried doing to fix the error (such as attempts to turn ToCriteria into \"constructor\" and some other attemots), but i will look into it some more Monday if it isnt figured out by then.\n. What does the command you are entering in the terminal look like?  I know that \ntower generate scaffold Post title:string body:text userId:integer\nworks correctly for me.\n. See Issue #157 , there are known issues with the model validations.\n. +1 for generator templates\n. @viatropos @krainboltgreene have you guys seen https://github.com/epeli/underscore.string ? While it doesn't provide nearly the range of awesomeness that sugar.js provides, it does extend underscore quite a bit, and could be a good start on building TowerSupport \uff3c(^o^)\uff0f , without fooling around with core objects. For what its worth, sugar seems to be about as safe as you can get, as far as extending these go.  That said, I think we should be extremely careful of adding anything to Tower that would be a majorly divisive issue within the community, fly in the face of established best practices, etc. What we don't want to create is a situation where people say of Tower something like, \"Yeah, it looks cool but it extends core objects so...\" without having very good reasons for doing so (ie. it adds some enormous benefit that can't be gotten any other way). It seems to me that the way to move forward would be A) create a plugin/module that makes it easy for people to add sugar.js to their tower projects, without putting sugar.js in tower itself B) begin/continue work on building Tower.Support through extending the _ object.\n. I've used scaffolding successfully, with some instructions here: https://github.com/edubkendo/demoApp and destroy has always worked. Of course, destroy/delete is handled by javascript on the client side . Your client side controller should look something like this: \n``` cofeescript\nclass App.PostsController extends Tower.Controller\n  @on \"click .post a[data-method='delete']\", \"destroy\"\n# example\n  destroy: (event) ->\n    row       = $(event.target).closest('[data-id]')\n    id        = row.attr('data-id')\ntry\n  @resourceKlass().destroy id, (error, resource) =>\n    row.remove()\ncatch error\n  console.log error\n\nfalse\n\n```\nDid you alter the client-side controllers, also, what did you type in the terminal to generate your scaffold? Correct syntax is something like:\ntower generate scaffold User email:string firstName:string lastName:string hasMany:posts\nAnyways, those are the first two things I can think of, also, is javascript enabled in your browser? I feel like that's an obvious question but thought I'd ask anyways.\nEdited to clarify: That client-side code is what the scaffold should have generated, and that is what actually handles the deletion.  If you didn't alter it, verify that it was generated by the scaffold generator.\n. @viatropos using the development branch of tower, I run into this same issue. When I looked into it, for whatever reason, the client side controller code was not generated by the scaffold, only \ncoffeescript\nclass App.UsersController extends Tower.Controller\n  @scope 'all'\nWhen I copy the above-referenced code into the controller then it works as expected.\n. Looks like the function you are referencing will be handled differently in the next version of tower (0.4.1) which will be released soon. In it, url is assigned as you say, \"url = ...\" . Did you try changing it in the file to see if your code would run?\nBy the way, when you quote code here on github, if you put  three backticks followed by \"javascript \" (or coffeescript, or ruby, or whatever) on the line above, and three backticks on the line below, you'll get pretty formatting with syntax highlighting which makes it a lot easier to read.\n. Ah, toying around with the browser console a bit, I think I figured it out. You have to use the proper accessors to change those properties. So:\ncoffeescript\nuser.set('email', login)\nuser.set('password', password)\nuser.save()\nSimilarly, to retrieve object properties, use the 'get' accessor.\ncoffeescript\nemail = user.get('email')\npassword = user.get('password')\nHopefully this will work. I'm running the development branch, with Ember.objects built in, so things may still be different from your set up but I think this should do it.\n. For the record, this log is from the most recent attempt, and while he found a workaround for getting it to run, he was never able to properly create and run an app. My hunch is that the later issues he was having were related to the install issues he had, but it could be two seperate issue. @viatropos please take a look when you can.\n<DrGigabit> btw, regarding dev branch, if I build it and install using make install; then I try smth. like tower console; I get module.js:340\n<DrGigabit>     throw err;\n<DrGigabit>           ^\n<DrGigabit> Error: Cannot find module '../lib/tower'\n<DrGigabit> obviously I don't have tower forked in /usr/local/lib\n<e_dub> also, check out  the \"Contributor Note\" here : https://github.com/viatropos/tower/tree/development   and the roadmap here: https://github.com/viatropos/tower/wiki  ... cuz i think what your talking about is mentioned in one of those... just when you get a chance\n<e_dub> ah yeah, you gotta use cake ... hold on, I'll dig up the log where viatropos walked me through install\n<DrGigabit> tower@0.4.1 installed into /usr/local/lib/node_modules/tower; but seems it expects the tower folder to be in the /usr/local/lib\n<e_dub> ok this is kind of a mess, but: https://gist.github.com/3346889\n<e_dub> this may be easier to read: https://dl.dropbox.com/u/24245334/towerjslog.txt\n<e_dub> this also: https://dl.dropbox.com/u/24245334/towerlog2.txt DrGigabit \n<e_dub> also made it a gist: https://gist.github.com/3346943\n<DrGigabit> the discussion you posted seems to be around desing-io issues; in fact for me everything compiles\n<e_dub> so you have everything working fine now?\n<e_dub> you can get node to see tower wherever you have it installed by going into that directory and just using \"npm link\"\n<DrGigabit> nope, I can build/install, but cannot run tower console inside the app folder\n<DrGigabit> Error: Cannot find module '../lib/tower'\n<e_dub> then in projects you make with it, just go into the project and before you run \"npm install\" , just do, \"npm link tower\"\n<DrGigabit> let me see\n<e_dub> and it will link back through the earlier link to where you have tower cloned\n<DrGigabit> yes, it did\n<DrGigabit> but\n<DrGigabit> Error: Cannot find module '../lib/tower'\n<DrGigabit> shouldn't it be ../lib/node_modules/tower?\n<e_dub> hmm that is odd, yeah\n<e_dub> most of my node globals are in usr/local/lib/node_modules and my npm link is linked from there\n<e_dub> but it seems like you followed a very different install path from the one i used\n<DrGigabit> I just did make build; make install :-)\n<e_dub> I forked tower, cloned into a folder in $HOME/git/community, ran npm install, then ran design.io to compile the source to javascript, then did \"npm link\" as this is what viatropos told me to do\n<e_dub> something like that\n<e_dub> I thought there was a cake step in there also, but looking back, that was for compiling the client side tower.js file\n<DrGigabit> let me try npm install\n<e_dub> oh and before i ran design.io to do the compile, I also did, \"npm install design.io\" and \"npm install design.io-javascripts\" because those are left out of the package.json file because of heroku or something\n<DrGigabit> yes, I also did this step\n<e_dub> hmm very weird\n<e_dub> can u run any of the tower binary commands?\n<DrGigabit> module.js:340\n<DrGigabit>     throw err;\n<DrGigabit>           ^\n<DrGigabit> Error: Cannot find module '../lib/tower'\n<DrGigabit>     at Function.Module._resolveFilename (module.js:338:15)\n<DrGigabit>     at Function.Module._load (module.js:280:25)\n<DrGigabit>     at Module.require (module.js:362:17)\n<DrGigabit>     at require (module.js:378:17)\n<DrGigabit>     at Object.<anonymous> (/usr/local/lib/node_modules/tower/bin/tower:3:1)\n<DrGigabit> obviously this is a path issue\n<e_dub> yeah\n<DrGigabit> perhaps I should symlink the lib folder\n<e_dub> that might work\n<DrGigabit> so, here is a workaround: in the /usr/local/lib/node_modules/tower\n<DrGigabit> I created lib -> /usr/local/lib/node_modules\n<DrGigabit> lib -> /usr/local/lib/node_modules\n<DrGigabit> lib pointing to /usr/local/lib/node_modules\n<e_dub> that's really weird you had that issue, but definitely good to know about for future\n<DrGigabit> seems that generator is not yet stable; /usr/local/lib/node_modules/tower/packages/tower-generator/server/generator.coffee:36\n<DrGigabit>       return new klass(options);\n<DrGigabit>              ^\n<DrGigabit> TypeError: undefined is not a function\n<DrGigabit> when I tried tower generate foo with a new towerjs\n* Maedi (~maedi@mail.digitalink.com.au) has joined #towerjs\n<e_dub> hmm if you read those logs, i got that same error until he pushed a tweak to the generator file\n<e_dub> wondering why you are getting it though\n<e_dub> I'm gonna make these logs a gist and point viatropos to it so he can take a look at the issues your running into\n<e_dub> unless you feel like creating issues\n<e_dub> what was the exact \"tower generate\" command you ran DrGigabit ? I want to try it and see if I get issues\n<DrGigabit> tower generate foo\n<e_dub> k\n<e_dub> ah i get same error, but I'm thinking that's because \"foo\" is not proper syntax for the generator\n<e_dub> try \"tower generate scaffold foo\"\n<DrGigabit> Did you actually try to run any apps generated with the new towerjs? I am trying to \"node server\" for my existing app, and I get an expection\n<DrGigabit>         throw err;\n<DrGigabit>               ^\n<DrGigabit> TypeError: Cannot read property 'handle' of undefined\n<DrGigabit>     at HTTPServer.app.use (/usr/local/lib/node_modules/tower/node_modules/express/lib/http.js:216:17)\n<DrGigabit>     at Tower.Application._this [as use] (/usr/local/lib/node_modules/tower/packages/tower-application/server/application.coffee:203:41)\n<DrGigabit>     at null.<anonymous> (/Users/avaranovich/projects/SeeUMe/source/seeume/config/bootstrap.coffee:39:10)\n<DrGigabit>     at Tower.Application._ref [as stack] (/usr/local/lib/node_modules/tower/packages/tower-application/server/application.coffee:247:16)\n<DrGigabit>     at Tower.Application.initializer (/usr/local/lib/node_modules/tower/packages/tower-application/server/application.coffee:168:17)\n<DrGigabit>     at Tower.Application._i (/usr/local/lib/node_modules/tower/packages/tower-application/server/application.coffee:237:27)\n<DrGigabit>     at _.extend.parallel (/usr/local/lib/node_modules/tower/packages/tower-support/shared/shared.coffee:331:22)\n<DrGigabit>     at Tower.StoreMongodbDatabase.ClassMethods.initialize (/usr/local/lib/node_modules/tower/packages/tower-store/server/mongodb/database.coffee:50:26)\n<DrGigabit>     at Tower.StoreMongodbDatabase.ClassMethods.initialize.applyIndexes (/usr/local/lib/node_modules/tower/packages/tower-store/server/mongodb/database.coffee:24:22)\n<DrGigabit>     at Tower.StoreMongodbDatabase.ClassMethods.initialize (/usr/local/lib/node_modules/tower/packages/tower-store/server/mongodb/database.coffee:48:22)\n<DrGigabit> On line 39 I have the following     @use Tower.Middleware.Agent\n<e_dub> yeah use either \"node server.js\" or \"tower server -e development\"\n<DrGigabit> getting the same  /usr/local/lib/node_modules/mongodb/lib/mongodb/connection/server.js:423\n<DrGigabit>         throw err;\n<DrGigabit>               ^\n<DrGigabit> TypeError: Cannot read property 'handle' of undefined\n* Maedi_ (~maedi@1.157.31.62) has joined #towerjs\n* Maedi has quit (Ping timeout: 272 seconds)\n* Maedi_ is now known as Maedi\n<DrGigabit> here is an exemption I get https://gist.github.com/3347224\n<DrGigabit> the only line related to the app is     at null.<anonymous> (/Users/avaranovich/projects/App/config/bootstrap.coffee:39:10)\n<e_dub> do you have an instance of mongodb running on your machine?\n<DrGigabit> the trouble is that I have only 28 lines in that file; yes - mongodb is runnig\n<e_dub> I just fetched the most recent version of tower --development branch, created a new app, ran npm link tower, npm install, and then ran it with \"node server.js\"\n<e_dub> runs fine\n<DrGigabit> did you compile it?\n<e_dub> i need to copy a fresh copy of towerjs into my app's vendor folder to get it running in the browser, but the server side stuff is running\n<e_dub> did i compile what?\n<e_dub> oh what I fetched\n<e_dub> no\n<e_dub> good point\n<DrGigabit> Actually the generator seems does not generate bootstrap.cofee file, so you would not run your app by default anyhow\n<DrGigabit> but it now requires bootstrap.coffee by default\n<e_dub> ok, things are working here with latest\n<DrGigabit> hm\n<e_dub> and if i copy this file: https://dl.dropbox.com/u/24245334/tower.js  into /vendor/javascripts in my app, replacing the one thats there, it works in the browser too\n<e_dub> make an issue, and copy this irc log into it, so viatropos can see before he merges... some weird stuff going on with your install.  my guess is that its something to do with how you installed, but not sure what at all. \n* Maedi has quit (Quit: Colloquy for iPhone - http://colloquy.mobi)\n<DrGigabit> Perhaps we just leave the issue you created\n<e_dub> ok, I can add this log as a comment to it, so he can see some of the issues you were running into\n<DrGigabit> let me link this expection https://gist.github.com/3347224\n<e_dub> ok, hopefully we'll get this all sorted out and make it easier for folks to contribute at the same time\n. @scottkf if I do:\n``` coffeescript\nclass App.Message extends Tower.Model\n  @field 'user', type: 'String'\n  @field 'body', type: 'String'\nuserAndBody: Ember.computed(->\n    user = @get('user')\n    body = @get('body')\n    return \"#{user}: #{body}\"\n  ).property('user', 'body')\n```\nThen go to the console and do:\n``` javascript\nmessages = App.Message.find()\nmessage = messages.objectAt(0)\nmessage.toJSON()\n/ body: \"Hello there how are you today?\"\ncreatedAt: \"2012-08-20T16:11:50.414Z\"\ngistId: undefined\nid: \"503261c67c7a2e8e22000002\"\nupdatedAt: \"2012-08-20T16:11:50.413Z\"\nuser: \"e_dub\"\nproto: Object /\nmessage.get('userAndBody')\n// \"e_dub: Hello there how are you today?\"\n```\nAs you can see, it works, but it only shows up when I specifically call it. It doesn't seem to exist as part of the object, at least represented as JSON, I guess because its a function?\nAlso, notice I wrap the function that I pass to Ember.computed in parens. Not sure why, or whether this matters here, but in my current rails/ember project I get errors if I don't, so I went ahead and did that here. Might be worth a try.\n. Just realized what you are doing is a bit more complex, involving counts on relationships. Going to play with this a bit more and see if it holds up or fails on me.\nEdit:\nNope, still working for me. If I do:\n``` coffeescript\nclass App.User extends Tower.Model\n  @field 'email', type: 'String'\n  @field 'firstName', type: 'String'\n  @field 'lastName', type: 'String'\n@hasMany 'posts'\npostcount: Ember.computed(->\n    return @get('posts').count()\n  ).property('posts')\n```\nAnd in the browser console:\n``` javascript\nusers = App.User.find()\nuser = users.objectAt(1)\nuser.toJSON()\n/ createdAt: \"2012-08-20T16:34:12.353Z\"\nemail: \"bob@bob.com\"\nfirstName: \"bob\"\nid: \"503267041de1182223000001\"\nlastName: \"bob\"\nupdatedAt: \"2012-08-20T16:34:12.353Z\"\nproto: Object /\nuser.get('postcount')\n// 2\n```\nStill works. Not sure why you are having troubles. I'm running the development branch of tower, though, and just realized I'm not sure if you are or not.\nEdited Again:\nOk, so I modified show.coffee to see if it would render properly in the browser... nope. Nothing shows up. Obviously the variable is available, so this may be something you hack in to make available in the view. Going to experiment some more to see what's up.  Seems pretty odd to me.  If this is what you were getting at all along, sorry.\n. I am just guessing this is related, but on most page-loads, using Chrome, I get:\n```\nhttp://localhost:4181/socket.io/1/?t=1345548330232\nFailed to load resource\n```\n. Whoa so I had completely forgotten about \"design.io start\" . Anyways, as far as grunt goes, +1 from me. This seems like it will reduce complexity and make it easier for people to get started using tower, which is great.\nAnyways, the error I'm getting now is:\n```\nXMLHttpRequest cannot load http://localhost:4181/socket.io/1/?t=1345595074171. \nOrigin http://localhost:3000 is not allowed by Access-Control-Allow-Origin.\n```\n. Using the recent build of Tower with grunt upgrade, I'm not getting that error so that's awesome.\n. Similar error about the multiple \"uniqueness\" properties, this was when running \"cake build\": https://gist.github.com/3414073\n. The \"toLabel()\" error actually gets fixed by my pull request, so that just leaves the other one.\n. These are cleaned up now.\n. +1\nthis would make the console much easier to use. would love to see this happen.\n. This is really dope. Pretty amazing. I'll let you know if I encounter any bugs on edge cases, but for the simple case it's working amazingly well. Really impressed with how quickly you got this working. \n. going to rebase and squash these. please don't pull until after.\n. Ok, much better.\n. Ah damn, so the coffeescript API is going to quit being supported entirely?\n. So, it seems like the issue (ignoring a couple of issues which are getting kind of smashed together here, but really need to be talked about entirely seperately) is in trying to force coffee-script to generate code that isn't really the Javascript the compiler was designed to generate in an attempt to make the original Tower API fit 1:1 with Ember's API. So, I think the solution, for those of us who want to keep using coffee-script, is to figure out what needs to change in order to just use the plain-jane coffee-script compiler. I've written plenty of Ember code in coffee-script, and plenty of server-side node code too, using just ordinary coffee-script, and imo it's still far preferable to writing either in javascript, even if it means that it winds up looking a little bit different from the way Tower code is written currently. That API is kind of in a state of flux anyways. \nAs far as the part about waiting while it compiles to javascript, I think the solution to that is pretty easy too, DON'T compile to javascript. When I write coffee-script for other projects I never do, I just require coffee-script at my app's entry point, and use it that way. it never makes debugging an issue, you just skip looking at line numbers, and instead you look at the function and object names. Besides, source maps are working in the coffee-script redux project, which is supposed to be a drop in replacement for the current compiler, so it gives you totally accurate coffee-script line numbers, both in the browser and in node.\nI kind of don't know where to start with all this, and I'm not sure if I want to take it on, I need to give it some thought. I guess a starting point would be to figure out exactly where Ember and coffee-script are currently butting heads, so anyways, there's that. I'll comment on some of the other stuff at issue later. Any thoughts guys?\n. breathes a HUGE sigh of relief\nfuck me backwards, lol. That's a huge difference.\nI'm fine with changing the API to use Ember.extends instead of CS classes in the places where trying to use classes makes it a problem. I rarely use coffee-script's classes in my own code anyways. Usually just for meta-programming stuff, which would still be do-able in this situation. \nAs far as the executable class bodies go, I don't know a lot yet about the problems or their solutions, because I haven't really looked at it deeply before now, but CoffeeScriptRedux has extensibility hooks that might make it feasible to easily address these issues. Check out: Hacking the CoffeeScript Redux Compiler and EmberScript for some examples.  Finally, here's a bit of info on CoffeeScript Source Maps. Just glancing at the list of his current issues, it looks like he's in the home stretch now and just cleaning up the bugs, so it's probably time we take a serious look at this.\nAnyways, really glad that got cleared up as I was at wit's end. So, to be clear, tower new myVeryAwesomeApp will still generate .coffee files, or at least something like tower new myVeryAwesomeApps --use-coffee will? They just will have a more Ember-like and slightly less Rails-like API to them? This isn't a big deal for me. I really like the current API for models, but I was the one pushing hardest for the Ember-style router, or at least for keeping access to the Ember style router, so I am ok with re-working the Model API to something that doesnt cause problems. I'm definitely on the same page with you then, I think.\n. See this comment, also, btw: http://codebrief.com/2012/08/hacking-the-coffeescript-compiler/#comment-621296454\n. @panbhag cd into your tower directory, run \"make watch\", copy the file /dist/tower.js into your app's vendor/javascripts folder, replacing the copy that is there. update the copy of ember.js in that folder to https://github.com/downloads/emberjs/ember.js/ember-1.0.pre.min.js and you should mostly be good to go.\n. Do you guys know http://rubular.com/ ? It's specifically for ruby, but I find it useful for testing regex's of all types.\n. Alright, first things first: Got the SublimeREPL plug-in working 99% with the tower console. It turned out to be easier than I thought because Sublime Text's api exposes a variable just for this sort of thing, $project_path. So I was able to just swap this out for $file_path in the profile I'd made for tower console in the plug-in and (after a bit of debugging where things weren't getting properly passed and needed to be ordered correctly), got it.\nSo, for those developing tower apps using Sublime Text, if you would like, check it out: https://github.com/wuub/SublimeREPL/pull/67 . I don't know if he'll accept my pull request since tower is a framework and not a language, but we'll see. Either way, you can just install my fork like this:\ncd into the directory where Sublime installs packages and then clone the \"adds-tower\" branch. on Ubuntu this would be:\n```\n$ cd .config/sublime-text-2/Packages\n$ git clone https://github.com/edubkendo/SublimeREPL.git -b adds-tower\n```\nAnd you should be set. Seems like it's still a little wonky sometimes. Easiest thing to do, when you first open sublime text with your project, open up a coffeescript file in the project's root like the cakefile and then start the REPL (cmd + shift + P, type tower). Now you can close those and should have zero problems re-opening the REPL no matter where you are. All this will be fixed when the real issue is addressed, which gets to the next part:\nYes, you can run the rails console from anywhere in your project. I checked it out with an old rails project of mine. Works fine. When I looked into the code though, this is it:\n``` ruby\n!/usr/bin/env ruby\nrequire File.expand_path('../../load_paths', FILE)\nrequire 'rails/all'\nrequire 'active_support/all'\nrequire 'irb'\nrequire 'irb/completion'\nIRB.start\n```\nSo, no help there. I have some ideas, actually from looking at some other sublime plug-ins, specifically the ones that work with git.  so adding this to my to-do list, lol.\n. Yup, this has proven much more reliable. I made a tweak to the SublimeREPL plugin so that it works with this change in place. Now you can summon up tower console from any open file in your project.\nWorks great from the terminal too.\n. yes lets. not a priority, but annoying lol\n. I've installed tower on Ubuntu 12.04 multiple times. It can be installed. Don't use \"sudo\" though. Take ownership of the folder.\n. yeah that's another equally valid approach. I've also had it set up this way. I changed it at some point because I ran into an issue and thought this was causing the problem. It turned out not to be, but I never changed it back. In fact, I might do that, because it is a cleaner approach.\n. try this: cd into the tower directory and run \"make watch\". That should create the missing library.\n@viatropos shouldn't the version on npm have this step already completed though?\n. try :\nnpm install -g grunt\nThen, when that finishes, try \nmake watch\nin the tower directory again. Don't forget the -g when you install grunt.\n. also, and this is odd, I just ran \"npm install tower\" in an empty directory just to see what was getting installed, and it had everything it needed.  I'm wondering something else. Did you remove all the old stuff from your earlier attempts before you did this new install of node and tower? If any of that stuff is hanging around, it may be looking at the wrong tower.\n. look at the contents of the tower folder and see what's in there. Should have \nbin\nbuild\ndist\nlib\nnode_modules\npackages\ntest\ntmp\n. ok, its missing like, everything. try running \nnpm cache clean\nthen \nnpm install -g tower\nSee if it installs those folders.\n. ok, here's an idea. try just installing tower non-globally but into this folder. in other words, cd into the directory \"node-latest-install\" and then running \"npm install tower\". See if it puts in those missing folders.\n. if it does work, it may just work since npm has already created the executable. If not, just cd into where it installed tower and tell it \"npm link\".\n. @rickcarlino @viatropos guys have a look at this. I'm thinking this might explain some of the errors we are seeing pop up with tower installs lately:\nhttps://github.com/isaacs/npm/issues/2792\nLooks like some very similar error messages to what you were having @rickcarlino , in the bottom part, but i think the entire thread may well be applicable.\n. @g-elke-wowbiz on MacOS check out this , I think this could be part of the problem. Note there is a 3 part solution: https://github.com/isaacs/npm/issues/2792\n. @g-elke-wowbiz was your first attempt with sudo ? Also, have you tried cleaning your cache ( npm cache clean ) between attempts? Try installing as root, after cleaning your cache, and using sudo, if you haven't yet. You could also try installing tower locally instead of globally just to see if it works. Finally, you could try installing from source, and then doing npm link afterwards. I have instructions for that in this post: http://nodehed.com/?p=69 . If you install from source, when you get to the npm install step, if it fails, clean your cache, then try running these seperately:\nnpm install git://github.com/viatropos/coffeecup.git --force\nand:\nnpm install git://github.com/viatropos/coffee-script.git --force\nIf those go, go into the package.json and remove the postinstall hook (remember, this is only IF an initial attempt at npm install fails) and then run npm install . Then just continue with make watch and npm link. Dunno if this will work, just trying to work around whatever is going on here.\nOh, another question, what version of node do you have installed? Today I read a post on stackoverflow today where the problem the person had ended up being that it wouldn't install on 0.8.7 but would on 0.8.8.  \nAnyways, just tossing some thing out there, let us know what does or doesn't end up working.\n. @viatropos I completely agree. That will reduce our dependencies, and it seems to be the main place where people are having issues in installation.\n. @j-mcnally new guides/documentation on ember's router is really good. May be helpful for understanding how to get them to play well with tower: https://github.com/sgharms/website/blob/160477fd0ab1789915ff46bdceb04a6faa74ef18/source/guides/router_primer.md\n. Because it is no longer using Design.IO, you have to run \"cake watch\" first.\n. Just from a readability point of view, nested looks much better to me. I don't know what the performance hit is, though.  Like, how big a difference are we talking about?\n. I think we need to look at replacing hook.io or forking the repo because this is going to stop lots of dev's in their tracks\n. you might want to have a look at how: http://brunch.io/ does it. Especially https://github.com/icholy/ember-brunch  . I don't think we need another build tool (grunt is awesome) but I do think brunch does a pretty good job of making require.js work well. There is also the way a lot of people doing Rails w/ ember work, using Rake Pipeline and minispade. Might be useful for inspiration. Here's a good example of a workflow that seems to be popular: http://blog.nulayer.com/post/23294069876/building-simple-javascript-libraries-with-rake-pipeline\n. @viatropos I think, even moreso than a way to force-require other code (though we probably need that too) is a place to put stuff you want to run after everything is loaded. Something like jquery's ready event.\n. @viatropos I myself have been wondering lately how one accesses Ember's router and the connectOutlet's stuff from within a tower app. I will probably just dig into the source code , but thought I'd ask here just to see.\n. I don't currently know enough about how the two are working together to say. Or what @j-mcnally did/attempted to do to address this in his patch.\nI wonder if the best thing might be to split the two apart into two seperate files, like how they work in a rails/ember app. We could then still create a basic pattern that could be auto-generated when creating new apps and scaffolds and stuff, but it would be easy to change and manipulate for anyone who wants. Also, the ember router gives a lot of fine-grained control so it might make it easier for people wanting to route to additional pages and stuff that don't fall under the typical set of resources , without having to do a lot of extra work on the router itself. Basically, push all navigation onto the  client-side ember router.\n. Aha, so I've been playing around a bit. It's a little bit of work, and definitely wouldn't be at all intuitive to someone who hasn't worked with ember much, but you can get at all these stuffs from within your app.  I'll give an example of how I did this stuff:\nSo first in routes.coffee I added:\ncoffeescript\n@match '/login', to: 'application#login'\nThen, in the application controller's\n``` coffeescript\nserver\nlogin: ->\n    @render 'login'\nclient\nlogin: ->\n    connectOutlets: () ->\n      router = App.router\n      console.log \"Connecting Outlets!\"\n      router.get('applicationController').connectOutlet('login')    \n```\nNow you just create a view and template and your good! Hopefully this will help some other people, and maybe we can think about how to make this a bit easier/simpler.\n. nevermind, this seemed like it was working but now it isn't so I'm not sure what's up.\n. Got it: On that client-side controller, just do this:\n``` coffeescript\nclient\nlogin: ->\n    router = App.get('router')\n    console.log \"Connecting Outlets!\"\n    router.get('applicationController').connectOutlet('login')\n```\nI was just trying to copy Ember.router code a little too literally.\n. Also, @yagooar I got a link in the nav to it working like this:\ncoffeescript\ndiv class: 'nav-collapse', ->\n  ul class: 'nav', ->\n    li '{{bindAttr class=\"App.UserController.isActive:active\"}}', ->\n      a '{{action indexUser href=true}}', t('links.users')\n    li '{{bindAttr class=\"App.ApplicationController.isActive:active\"}}', ->\n      a '{{action loginApplication href=true}}', 'Login'      \n    li '{{bindAttr class=\"App.PostController.isActive:active\"}}', ->\n      a '{{action indexPost href=true}}', t('links.posts')\n. Will you set up some hooks for making it easy to work directly with the outlets, for instance, for apps using multiple outlets?\n. Two things, then some thoughts: \nOne, in the simple case, you should be able to generate a scaffold and it just works, like currently. And I think for most cases we want to reduce/limit verbosity in general with simple, concise DSL.\nTwo, You should be able to take direct control of the outlets so that in more complex cases you can connect those up how you want. \nI think the reason that connectOutlets has typically been included in the router is that it lets you basically think of your page with each section almost like an individual page itself. So one might have three different outlets visible at one time, each connected to a different view and doing something independent of the others, but yet, when the user shares that url on facebook, it needs to link back to a page that has each of the three outlets in the same state as when she first linked it (given the person clicking the link is properly authorized, etc). connectOutlets is serving kind of like a router within the router. So the router routes us from the url to one state, then in that state, connectOutlet routes each outlet to its appropriate view. It IS also a bit like rendering, as you say, and I think we are at one of those annoying places where idioms from the server just don't translate perfectly to the client.\nWhat I can say is that having done one Rails/Ember app, the Ember router is awesome, and absolutely my favorite part of Ember. It is extremely powerful, precise, and easy to work with.\nBut, what works in that situation, where rails is just serving json, and ember is doing all the navigation, etc and so you are pretty much purely routing through the Ember router, may not be what works in Tower. I dunno. I did find it a bit weird in Ember that the controller is essentially just an empty container. If you look at people's rails/ember apps, nobody is using them for anything. They \"might\" have a computed property or two on them, but that's it. Basically they just become boilerplate you write so that your models have somewhere to hang out .  In that case, why have them at all? So maybe the controller IS where the connectOutlet should go, but that seems a bit weird since the controller's are actually what you are connecting, although it does SEEM like you are connecting views, your actually connecting the controllers, and then the views associated with those by convention get connected as well. So which controller do you stick it on? \nSo, the short answer is, I dunno? One thing to keep in mind is that not everything going into the various outlets will always be something that falls under the kind of REST/CRUD sort of resources we are used to thinking about. You might have a game in one, or a widget, or a box for IMs or any number of other thing that isn't just a list of data. We definitely don't want to limit the kind of thing tower is good for. I for one, actually wouldn't mind having a server-side rail's like router AND a client side Ember router, or just have the server send json automatically and just let Ember do all the navigation. But I may well be in the minority on that. Anyways, just some thoughts. It will definitely be awesome to see this finished though.\n. I definitely agree with you @viatropos , a short term solution that just works for now, so tower can really start being used to really build stuff, and then in the mid to long term we can try out some different options in some feature branches and see what we like best. \n. @viatropos I think that you've really tapped into what was bothering us before, and come up with a very powerful solution.  As far as moving away from the Rails model goes, Tower is more than Rails, because it's both client and server, so it makes sense that it will take some of its abstractions from Ember instead.  This is the first time I've really been happy with the proposed solution since we started discussing this, but I could never come up with something better to offer. Damn, I'm excited.\n. I really dislike javascript. Just putting that out there. Every semi-colon and bracket feels like, to quote @topfunky , a stab in the eye. And cleaner syntax is just the tiniest win that you get with coffee-script. I do understand the political motivations behind such a change. There is a lot of highly misplaced dislike of coffee-script within the Javascript community, but it IS misplaced, and seems to come solely from some silly idea that Coffee-scripters don't know Javascript and that because the javascript that's produced isn't the same as the javascript they would write by hand, it's somehow inferior. But it doesn't need to be the same, because it's not meant to be directly interacted with by humans. \nSure, you can say that one has to use the javascript for debugging, and that debugging coffee-script is difficult, but source-maps are here, the coffee-script 2 compiler is pretty much done, and it comes with source maps, which will make debugging the same for coffee-script as it is for js. Besides, I think anyone who really takes the time to get good at writing coffee-script code can tell you, most of the time, all this stuff about \"being more difficult to debug\" amounts to very little. Definitely nowhere near the enormous gains in productivity one gets from things like list comprehensions, or the simplicity of knowing your globals will automatically be scoped predictably for you, without needing to remember to use var.\nI love coffee-script. It's the language I feel most at home in. Coffee-script brought me to Node, and node brought me to Tower.  To see the code-base change to javascript, to see the default change to javascript, this makes me sad. I understand at least some of the motivation behind it, but I can't say that its a decision I agree with. I think Tower could be what pushes coffee-script to dominance, the way Rails pushed Ruby.  More than that, though, I think coffee-script is a big part of Tower's identity and that identity is what made me fall in love with it, made me devote so much time to learning it, advocating it, and contributing to it.\nTo me, one of Tower's core principles has always seemed to be ease of development, and developer enjoyment. In the node.js community they have a saying: \"JIFASNIF: Javascript is Fun and so Node is Fun\" Except javascript is really not much fun, but coffee-script sure as hell is. Maybe it's the old fashioned syntax, or the many places where it disagrees with itself semantically (Just google \"Wat Gary Bernhardt\" if you want to see what I mean), maybe it's the weird way it does OO... I think it's the cumulative effect of all these things, but it makes reading and writing javascript boring and tedious... at least to me.  Coffee-script eliminates many of these problems while retaining the things that ARE fun about the language: it's flexibility and simplicity.\nWe've spoken about this before, and I've never really voiced my full opinion about it, In fact, because I really do understand some of the motivation behind it, I had myself half-convinced that I was in agreement. But now that it's really here before us, and the change is underway, I've realized how strongly I feel. I may be wrong. This may be the right move for tower, this may be the only way forward for Tower, for all that I know. I certainly do not expect Tower to remain in cofffee-script, or with coffee-script as a default just because of my opinions. I think you need to make the changes you feel best serves Tower as a framework and the community as a whole. I'm ok with that.\nAnd I may end up getting totally flamed for speaking so bluntly about javascript here. I'm ok with all that too. \nWhat I wasn't ok with was letting this change go by without speaking up about it. I've done that now, so I'll try to let it go now. These are just my thoughts. I love Tower and want the very best for it, as we all do. Cheers.\n. hey @maedi I'm actually 100% behind Tower's router becoming the Ember router, or more like the Ember router, or at least giving the developer access to the Ember router. Ember's router is amazing. It is a little weird at first, mostly because it was designed to tackle problems that just hadnt been tackled yet, at least, not tackled well, so it's full of new idioms. It doesn't take much time with it though, to realize how awesome and powerful it really is for controlling and manipulating Web UI's and State.\nAll I was disagreeing with was Tower's source and defaults being moved to javascript. I'll probably never agree with that, but I don't really want to get stuck on this either. If javascript defaults are the way forward for Tower, then they are, and like I said before, as long as I can continue using coffee-script, I'll continue using Tower. It's too awesome not to use just because I have to add a --use-coffeescripts or something at the command line. It probably will reduce my contributions to the source code, unfortunately, just because I really hate writing javascript that much. But I do plan to continue writing tutorials and articles into the foreseeable future, and THOSE will be in 100% coffee-script, so in that way I can continue to contribute to Tower's community, as well as answering questions, etc. I do wonder, though, if the kind of hardcore node people who hate coffeescript so much will ever actually use Tower or contribute to it anyways, since they all seem to slam frameworks, and rails, and Ember all the time too... =/\nAnyways, I'm excited to see Tower move towards production-ready, so I can start using it in earnst. I've actually held off finishing my tutorial up because it seemed clear that there would be some api changes happening, and I wanted to wait for those before moving into the client-side code. Hope you are doing well @maedi. Let's not get too hung up on the javascript stuff, or stay too long on negativity. I don't want to make the same mistake I feel hardcore javascript people are, and write off an amazing framework just because I dont care for the language it's implemented in.\n. lol, \nWow, this is almost entirely different. It actually looks like Ember is moving to an API a lot like the one we'd just decided to set aside in favor of their current API. I'm not even sure what I think tbh. I was really incredibly happy with the other Ember API. I don't understand why it was \"hard\" to use. It could be a bit verbose at times, depending on what you wanted to do, but it gave you exactly as much fine-grained control of what was happening as you wanted to take, with clever abstractions to remove muchc of that verbosity in the simpler case. Well, I guess the decisions we make depend a lot on Ember, and how easy/difficult it is to make the Tower api we choose work with whatever Ember is deciding on.\n. no, actually hadnt had time enough to dig around for conversations on this and whatnot, so all i had done was scanned over that link you posted, so these were exactly the questions I had. This sounds good then. I agree the \"bare bones\" API definitely seems like it would be easier to build on top of.\n. Interesting. @viatropos did you see @wycats latest gist ? It looks more and more like Ember's router is moving towards exactly what we are moving away from. \n. To loop through the results what I usually do is something like:\n``` coffeescript\nApp.User.all (err, users) =>\nApp.User.count (err, count) =>\nfor num in [0...count]\n  user = users.objectAt(num)\n  console.log user.toJSON()  #this will show you just the user object and it's properties.\n  # do something to user\n\n```\nIt's slightly awkward, but a small price to pay for the conveniences Ember brings.\n. I can get around this by changing my client side controller's to look like this:\n``` coffeescript\nclass App.UsersController extends Tower.Controller\n  @scope 'all'\n# @todo refactor\n  destroy: ->\n    resource = @get('resource')\n    App.User.destroy(resource)\n```\nWith \"User\" being replaced by whatever the model for that particular controller should be. This does not, however, cause it to sync across browsers. As @TheHydroImpulse points out, it appears that the only action currently bound to the scope, and thus, registering in multiple clients from the server, is the create action. I'll make a seperate issue for that, though.\n. This is fixed in my pull request, both parts actually, so gonna close this to keep issues tidy.\n. These do two different things. get() during project generation fetches files that go in \"vendor\" and run on the client-side, including the client-side version of tower.js. npm install installs all the node_modules which go into the node_modules folder, including a necessary local copy of tower.\n. A bit stuck, changed tower-model/shared/cursor/persistence.coffee like this:\n``` coffeescript\n_destroy: (callback) ->\n    if @instantiate\n      iterator = (record, next) ->\n        Tower.notifyConnections('destroy', [record])\n        record.destroy(next)\n  @_each(@, iterator, callback)\nelse\n  @select('id').find (error, recordsWithOnlyIds) =>\n    @store.destroy @, (error, records) =>\n      Tower.notifyConnections('destroy', recordsWithOnlyIds) unless error\n      callback.call(@, error, records) if callback\n    # this should go into some Ember runLoop thing\n    # it should also be moved to the store\n@\n\n```\nSo now the connection fires to the clients like it should, but the record is still not removed in other clients. It looks like in tower-model/shared/persistence.coffee there is an unload function which gets called on the other clients. This is getting called like it should, but then the function it in turn calls never fires for some reason. It's twin \"load\" function, which gets called on create, etc does just what its supposed to. I can't figure out why the heck the unload never fires. If you put a console.log above the call that goes, but the call itself does not.\n. What those load and unload functions are calling are parallel load and unload functions in tower-store/shared/memory/persistence.coffee. At least, that seems to be it. \n. Got destroy working yesterday, problem was a mistyped variable name. Update is proving trickier. Problem seems to be that when you call load for update, it swaps out the action so when it goes to resolveAgainstCursors, the wrong action shows up (load instead of update). That was pretty easy to hack around, but if you DO set it up so that the action stays update, it gets caught in a never-ending loop of update notifications and the original client keeps pinging the server with the update over and over. Kind of stuck here now.\n. Should add, these are problems beyond the initial fact that the persistence methods for update and delete don't return a record, so those had to be modified to send the right thing instead of sending the result of the action, which was \"undefined\"\n. I think we still need to address the fact that it feels like documentation is in a million different places, and none of it seems to agree with each other, but all in all, I think having the docs in a wiki so its really easy to modify is a good thing. Currently, it feels like a pain to work on them, and I often forget all about doing so. I think making the docs easy to access is probably the most important factor.\n. In working with ember, and building a rails/ember app a while ago, I looked at tons of ember applications and never saw the templates included in the view. They were always either separated out into their own template files, or else included in html and then referenced from the ember.view. Here's one really good example: https://github.com/joliss/better-tweet-feed . Notice how even though she keeps all her views together in this file: https://github.com/joliss/better-tweet-feed/blob/master/app/assets/javascripts/views.js.coffee , the templates have a folder of their own dedicated to them: https://github.com/joliss/better-tweet-feed/tree/master/app/assets/javascripts/templates . To me, this makes a lot of sense, because in the templates you have a description of the pages structure, leaving the views to handle the code that backs that structure up. \nI think what makes this harder than anything is that tower is something brand new. Nobody else has done exactly what tower is attempting to do, so we don't have clear reference points for how to use all these different parts that tower has. As people begin putting together examples and tutorials and guides over the next few months, and tower's documentation improves, it will begin to become more clear how these parts work together and how best to use them to make the apps you want to make. To top things off, Tower changed massively about a month ago, when @viatropos merged in the code from Ember, and so even the few people like myself who have been working with and playing with tower for several months now are learning our way around again.\nEmber itself was essentially designed to be used in a particular way (though part of its strength lies in the way it's been built as a system of smaller packages so that any part or part of it can be used seperately), as one component in a system of other components (including Rails, Ember.Data, etc) so even existing ember documentation, guides and tutorials can only help us so much. Many of the idioms and whatnot I learned while working on that rails/ember app are suddenly of no use with Tower, because those other parts are not there, or because Tower brings the two routers together. Now instead of having essentially a \"dumb\" server side JSON API, with most/all of your logic on the client, you have a much more symbiotic system thats entwined far more closely. It's a complex thing, and it is still under construction.\nAll this said, I want to encourage you to continue working with tower. I believe strongly this is the way forward, and just because it seems unclear now how best to use it, doesn't make it any less awesome. Once we find our footing with Tower, we'll be masters of something incredibly useful, tremendously powerful, and far more capable of making the kinds of awesome applications we all want to be making. It may seem difficult now, but everything about tower exists to make development easier.\n. Controller's (I think I understand) handle what happens as you go from state-to-state, view-to-view. Views handle the logic that takes place as you interact WITH a particular view. Things like events, but also things like the values and labels of things on the screen, and how those should change and react to the user.\n. Even better way of thinking about it: Controller's should handle the logic of how the user interacts with the data, views handle the logic of how the user interacts with the presentation.\n. I don't have a strong feeling either way, but if others would be happier with it I would be fine with that. I think that was discussed at one point though I am not certain.\n. Got the updates. Wow, trickiest \"bug\" I've ever had the \"pleasure\" of tracking down and fixing. Thankfully, Chrome Dev. Tools made it a lot easier to do than would have been otherwise. Now maybe I can get some sleep. Was quite cool seeing all these actions finally working in sync in two browsers.\n. Ah no, I think you are right about that isDirty, i was trying that at one point and just forgot to change it back.\n. word. found that reload method, btw, by setting debugger in the middle of that load method and then just typing \"record.\" into chrome's console scrolling through the suggestions trying different ones and seeing if it caused the update to finish\n. Nearly every object in the Tower system inherits from Ember. Because of this, we get all kinds of perks, including the meteorjs/socketio-type data-binding nearly for free. It is incredibly powerful and useful. Tower.js is a FULL-stack framework that means server and client. But it also means that in many cases you only have to write code once, and it works in both places.  The real problem isn't that we don't support Angular, or Backbone, or any of these other frameworks people keep asking about. The real problem is that there aren't good tutorials/examples/screencasts available to demonstrate how easy and awesome this stuff really is. Unfortunately, none of us want to make those yet because Tower is still heavily under  construction and anything we did now would be obsolete in a month. The good news is that I talked with @viatropos last night, and he's hard at work on tying these changes up and says he'll be done soon. So, I'm guessing that will put us at 0.5.0, which should mean the API is fairly settled and we can start putting those kinds of things together. In the meantime though, I encourage you to really give this a chance, there will be plenty of projects where you can use Angular if that's what you like, but I think you'll find that Tower is way too powerful to ignore.\n. @pashaie you can fix that with:\nnpm install -g ejs\nThis has something to do with your node environment, causing ejs not to get installed when the rest of tower's dependencies are.\nEDIT: Actually, it looks like when you commented out that line in make.bat, that also comments out all the setup that file does, which includes installing tower's dependencies.\n. yeah the \"watch\" task means it continues to run and watches the directory, just leave it running while you develop or run the server. (obviously you can turn it off when you arent working). Then in another tab just run your node server.js.\n. @Maedi completely agree tower is definitely much more active and complete than locomotive. If I were going to use something for production right now, I'd simply build on express. As far as the purely server-side part, i think that is all @panbhag is looking for, when he said he just wanted to build an API. Again, though I'd go with express and either build my own ORM, use mongoose, or use tower and chip in to help bring it to 0.5.0 If you look at locomotivejs, it hasnt been updated in at least two months. There is http://flatironjs.org/ , which is being actively developed and is backed by nodejitsu, which I'd go with over locomotivejs. Not to knock locomotive, but if you are looking for production-ready frameworks, I'd assume support is a big deal. I would wager that tower is probably more capable of handling production than locomotive is, at this point. Versioning is, of course, somewhat relative, but locomotive is only at version 0.3.1 and has seemingly slowed or halted in development.\nEdit: just saw it looks like you've already used locomotivejs. If that is the case and its working for you, then ignore my previous comments.\n. @bendangelo it looks like when you created your new app, and cd'ed into it, you didn't run \"npm install\" to install the app's dependencies. This is why you were having to install tower and other things by hand.  The ejs thing is a seperate weird issue, you shouldn't have had to install that manually. \n. to clarify, creating a new app should go like this:\ntower new myAwesomeApp\ncd myAwesomeApp\nnpm install\ncake watch\nThen, open a second terminal tab and run your server, run generators, etc. Also, if you run a generator, you may need to re-start the \"cake watch\" task, though normally it should pick up changes to your app on its own, I'm not sure if it picks up newly generated stuff without being restarted. Pretty sure this info is available in the README\n. do you have coffeescript installed globally? cake is coffeescript's version of make/rake/jake/etc\n. I like some of where this is going. I definitely think we should keep the controller's how they are. The change seems to add a lot of boilerplate and complexity, without paying off much. Same with the views. Trying to deviate here, and basically undoing a lot of the work ember already does for us, doesn't seem to pay off nearly well enough.\nCleaning up the network stuff, though, sounds like major win to me. Having recently trawled through this repeatedly, I can definitely agree that simplifying this stuff would be really good.  Having a single connection object to work with on each client will be really helpful, and makes implementing some security features much easier. After working with the sync-between-browser stuff recently, I know I had concerns and others voiced them as well, about making sure information you don't want populated to every client can be filtered in some way. This would go a long way towards making that do-able.\nAs far as how to go about working on it: of course it makes sense to work on a topic branch while you work, that way if you want to work on something else you can check out a branch from a clean master to work from that doesn't have the other, unfinished changes in it. But as far as when to merge it in, I'd say we should make a goal of getting a fairly stable API for common uses and things settled and in place as soon as possible, so models, views, controllers, routers, sockets, auth/auth. Then yeah, other more experimental ideas can be worked on more seperately.  You mention greatly changing some core tower stuff, where do you mean? It seems like we all pretty much agree that the things which would cause sweeping API changes were probably more trouble than they were worth?\nOne thing I've been wondering about recently, are there places where tower's internals, or even API, could benefit from using more streams. Mostly because I've been reading a lot of @substack stuff lately, like this: https://github.com/substack/stream-handbook  .  Way off topic, I know, but just been on my mind and wanted to toss it out there since we're talking about changing stuff. Sorry, random.\n. For linux, \nto install coffeescript:\nnpm install -g coffee-script\nMongoDB:\nhttp://www.mongodb.org/display/DOCS/Quickstart\nI was going to list the specific instructions for installing mongodb on ubuntu, but it is actually several steps, so just linking to the install guide is probably best, at least to get the proper version of it. Also, that would be ubuntu specific, but this way its applicable for all linux users.\n. best directions for installing git: http://git-scm.com/book/ch1-4.html . Guess I could just go update the wiki with these since you're gonna point there.\n. https://github.com/viatropos/tower/wiki/Development-environment is no longer a blank ;)\n. This turned out to be a case of the original project had been generated with a version of tower that pre-dated the change in folder structure. When he ran npm update, his version of tower was updated, and so tower was looking for the files in the wrong places. \n. everything working great here.\n. @viatropos If you use my fork of SublimeREPL (cause I'm not sure if he ever merged my pull request) you can use Tower's console in sublime text, with it's code completion, syntax highlighting, and all. Pretty awesome stuff. As far as pulling that out of sublime and into the terminal or something, that would go deeper into sublime's internals than I've tried to do.  Also, installing this package: https://github.com/alienhard/SublimeAllAutocomplete  will give you autocompletions for all open files, so you can have completions for everything in the console that your currently working on, which is awesome. There's a SublimeCodeIntel package, which would be even more awesome except it doesn't currently support coffeescript. I'm currently watching it closely and have made that feature request along with numerous other people so hopefully we'll see it happen. I'm also planning to port the node.js package by @tanepiper to coffeescript, so those snippets will work with completion in coffee files, as well as starting a collection of tower specific snippets which would be useful. LOL. so much to do.\n. NVM shouldn't cause problems with npm, it's node version manager, and just installs instances of node into a folder in the user's home directory so as to avoid having to use so much sudo, and to make it easier to manage installing and uninstalling multiple versions. Perhaps the user could try deleting his node_module's folder, then:\nnpm cache clean\nnpm install .\nAnd then repeating \ncake watch\nnode server\nPerhaps without linking tower (so that a copy is installed in the app's node_modules folder) this will work properly.\n. It was my mistake, sorry, instructions in my tutorial. At the time I started writing it that (linking from the global install) was still working. I've updated those now.\n. Ran into this problem in irc today, person having an issue with \"Comment\" model, getting the exact same error. Grepping tower's source didnt reveal any use of \"comment\", so it must be in Ember. Whatever the case, we definitely need your permanent solution to this issue @TheHydroImpulse . Between Tower and Ember, there's just so many words in use, we're bound to start seeing more and more cases of this as tower picks up users and use cases.\n. Yeah, the validations are kind of weakly implemented. I worked on them a little bit, which is why you had an example that worked, prior to that, length validations were actually comparing Numbers or something really broken like that. A robust solution would be awesome. I don't have a preference on max/maximum, but left it as \"max\" when I worked on them because that's what was already in the code. @viatropos should weigh in though.\n. @viatropos arent we going to be moving away from the custom coffeescript compile stuff? should anyone be worrying about fixing that stuff or would it be better just to use temp. workarounds until we change the api?\n. Did you see my screenshot ? Was I reading that correctly? I believe I'm getting a drastically different result: https://dl.dropbox.com/u/24245334/grunt_htop.png\n. Ah ok, I wasn't seeing that line lol. I was seeing the line lower down, where it said grunt was using 1%. And completely missed the one higher up until just now. Just literally didn't see it.\n. If you set a minimum string length, and then leave the field blank, isn't the string actually shorter than the minimum length? That's probably why its failing. ie. the empty string is shorter than whatever length you set as a minimum.\n. awesome @1xizt I'm sure you'll figure it out. It will be great for someone to finally add support for another database. I am HIGHLY interested in graph db's like neo4j , as is @viatropos , so this is exciting.\n. Definitely interested in seeing what you do with this @1xizt . Of course it's understandable that you are busy. Keep at it though. Will be awesome to see SQL-db's working with tower.\nAs far as Angular, it probably is much simpler than ember, but there's no way it is more powerful. Sometimes simplicity = power, but in this case I'd say the opposite is true. Ember solves and simplifies a whole host of very difficult, complex problems. In doing so it simplifies them, but it can only simplify them so much. Other frameworks appear to be simpler, but only because they completely fail to address (or deliberately choose not to address) some of the problems that Ember addresses quite well. This particular talk by @tomdale (one of Ember's core contrib's) is about ember-data. Tower doesn't need ember-data because it has its own models which fulfill that function, but, I think the talk demonstrates very well some of the very hard problems ember chooses to address that other frameworks do not. There is definitely a place in the world for simpler frameworks like angular and backbone, but what emerges from the synthesis of tower and ember is a full-stack solution to web development that makes hard problems like real-time data syncing, url/browser history and programatic state, sharing models between client and server, and I'm sure @viatropos could give you a much longer list. Even our routing solution, when it's complete, will draw on ember to make it super simple to use a single router for both server and client if desired (as i understand the current design plans). Without ember, tower would basically be a rails clone on node.js, to put it quite bluntly (a really , really fast rails clone with built in websocket support and a bunch of other cool stuff, but still, a rails clone). And ember would be ( is ) a very nice client-side framework that solves a lot of problems. But damn when you put the two together, like viatropos painstakingly did over the summer,  makes for something completely new, something that will simplify web application development in a way that nothing currently available can do.\nOn Sun, Dec 16, 2012 at 11:30 PM, 1xizt notifications@github.com wrote:\nSorry for the delay buddy, I've been doing some research on the drivers for mysql and postgres. I'm buried to my neck in a large scale email app with a bunch of admin functions. Can you guys bear with me for a week so I can get back to solving this part of the puzzle? \nI did look at angular and ember in more details, to me still angular looks more powerful and simpler. I am going through the link on Quora to get a better understanding. Prob I'll have to try both to get a real world feel. I really like most of the choices you've made on toolset in Tower tho, especially use of Coffeescript and haml style layouts. \n. @ragulka Sorry you ran into this. Some of the information on the website http://towerjs.org is quite outdated. The most updated information is in the README.md and the wiki where there is in fact a Beginner's Guide. You might also check out the tutorial on my blog, Build Your Own Towerbot. It should carry you a long way. \n. Glad you're up and running, just let us know if you run into anything else. You can also always stop by the chat,  #towerjs on irc.freenode.net , and someone will try to help you if possible. I often leave it running, even if I'm away from the keyboard, so I may not see your question right away but will try to get to it when I can.\n. @TheHydroImpulse have you checked out https://github.com/component/component btw? might be useful\n. I think one thing that would be super useful, in getting the docs ready, is if we had a list of ALL public API's, and whether or not they have yet been documented. I know that in the past I wanted to make a go at working on the docs and then just didnt really know what to do beyond reading through what was already there and updating/making some corrections. Of course, since this is in flux right now it's not something that could be finished right away, but it might be something that could start being listed out as its being worked on. Just a thought.\n. Awesome work! Glad you found a solution.\n. @vraptor75011 this isn't a simple blog app, but this is a pretty detailed tutorial that will carry you a long way: http://nodehed.com/?p=15\n. @viatropos yeah, can't get this to work either. Was gonna put together an example for him, but nothing I'm trying here gets anything to work. Any attempts to visit /posts/:postId/comments/new or any variation on that and it just takes me back to a screwed up version of /posts/:postId/ with all the info missing. The relationships definitely work, because I can manipulate those from the console all I want, or even customize the existing pages to display the desired information, but there's no way to get there via url.  Of course, since the router will be changing soon, this may all be moot, but anyways, that's what I arrived at after about an hour of trying to get it working.\n@vraptor75011 sorry, yeah, this seems to be broken right now, at least for me.\n. do you happen to have grunt installed globally? Try npm install -g grunt and then see if cake watch works.\n. Good deal!\n. I know in chat I said I didn't know where to start, but on this actually, I took a look and this is where I'd start on implementing this : https://github.com/viatropos/tower/tree/master/packages/tower-command \n@viatropos will be able to give you better guidance, but this is where I'd start, specifically looking at how https://github.com/viatropos/tower/blob/master/packages/tower-command/server/generate.coffee is implemented, since you'll be essentially reversing this process.\n. My gut instinct would be to go ahead and implement it. I dont know when the proposed refactor will occur, but it is probably not in the immediate future. Tower.js has a long to-do list. Also, if you go ahead and implement \"destroy\", it will be easy to refactor, vs. being unwritten and needing to be written from scratch. Having the feature written, even if it requires refactoring later, would seem to me preferrable to not having it at all.\n. I sent him a message to take a look, so hopefully he'll get to this one soon.\n. grunt has to be installed globally: npm install -g grunt but from what I understand the current version of grunt doesnt work, so you'll deliberately need to install an older version of it. I don't know what the exact version number is, but maybe @TheHydroImpulse can tell us? anyways, these errors will be resolved in the next version of tower, coming in a couple weeks, as the install process (as well as everything else) has been vastly streamlined.\n. As far as I know, Tower has actually been using the \"coffeecup\" repo for a really long time now, it just calls it coffeekup in the documentation because that's the recognizable name. If you check the package.json, though, you;ll see it' says:\njavascript\n\"coffeecup\": \">= 0.3.17\"\n. That site, and those guides, are horribly outdated and I believe they are soon to be replaced.\nThe most current docs are here: https://github.com/viatropos/tower/wiki\nI have written a Tower tutorial here: http://nodehed.com/?p=15\n@btbinhtran has a Tower guide available as a PDF here and located at this repo: https://github.com/btbinhtran/towerjs-tutorial\nAny of these may be out of date in parts because Tower v0.5 is due out very soon now, and will radically change the API from what I understand (simplified and awesome-ized), so I know that I, for one, and probably others too, have not been putting a lot of effort into updating soon to be obsolete documentation. If you need Tower now, feel free to use the current version. But my recommendation would be to spend the time learning Ember really well, as Tower is built on Ember from top to bottom, and by getting a good grip on Ember now will put you in the best position for learning Tower when it emerges. Hopefully really soon, eh @viatropos ? @TheHydroImpulse ?\n. @deepanshumehndiratta @jmtoball Tower is being completely rebuilt for version 0.5.0, This is being very actively/aggressively developed from my understanding, though mostly being done behind-the-scenes . There will be an entirely new site, new docs, better build process, clean install process, etc. \nAs it stands, this current version of Tower has many issues with its dependencies, especially grunt, which is why you two are experiencing these problems. If you look through the issues, a number of people have developed workarounds for these issues which may or may not work for you.  My advice though: just wait on 0.5.0. It will be a pretty dramatic change from everything I've been told, faster, cleaner, more modular, and with a dramatically simplified API.\nI'm not currently developing with Tower, but your messages showed up in my inbox and I thought I'd take a moment to try to spare you the pain of continuing to be frustrated with this.\n. @viatropos @TheHydroImpulse how about officially deprecating this version of Tower, with a big warning on the Readme and on the oldsite that explains the current situation. Something in big, bold letters that will grab attention and a link to direct them to somewhere they can watch for news about 0.5? These dependency issues are only going to get worse.\n. WOOT!!\n. ",
    "svasva": "I have added an everyauth example here: https://github.com/viatropos/tower/wiki/Everyauth-integration-example\nIf anyone can add something to this one, that would be nice.\n. you can set npm to use the git-master package, like this (in package.json):\n{\n...\n    \"tower\": \"git://github.com/viatropos/tower.git\",\n...\n}\n. I have added an everyauth example here: https://github.com/viatropos/tower/wiki/Everyauth-integration-example\nIf anyone can add something to this one, that would be nice.\n. you can set npm to use the git-master package, like this (in package.json):\n{\n...\n    \"tower\": \"git://github.com/viatropos/tower.git\",\n...\n}\n. ",
    "sebastianhoitz": "+1\nI today ran into the same issues. What is the current state of this? Is there anything we can help with?\n. Yes I used the latest version and ran into this problem.\n. Closed, as this is referenced in issue #77.\n. @viatropos What do you think about this pull request?\nDo you have any additional thoughts?\n. I noticed this with forms. I have a scaffold that was generated using the generator. With the latest tower version, no data is displayed inside my forms anymore.\nI also get this error:\nTypeError: Cannot read property 'required' of undefined\nat new Field (/Library/WebServer/Documents/prisma/prisma-box-app_towerjs/node_modules/tower/lib/tower/view/form/field.js:53:25)\nat Builder.field (/Library/WebServer/Documents/prisma/prisma-box-app_towerjs/node_modules/tower/lib/tower/view/form/builder.js:105:12)\nat eval at <anonymous> (eval at <anonymous> (/Library/WebServer/Documents/prisma/prisma-box-app_towerjs/node_modules/tower/node_modules/coffeekup/lib/coffeekup.js:344:12))\nat Builder.render (/Library/WebServer/Documents/prisma/prisma-box-app_towerjs/node_modules/tower/lib/tower/view/form/builder.js:138:12)\nat View.<anonymous> (/Library/WebServer/Documents/prisma/prisma-box-app_towerjs/node_modules/tower/lib/tower/view/form/fieldset.js:37:30)\nat Object.render_contents (eval at <anonymous> (/Library/WebServer/Documents/prisma/prisma-box-app_towerjs/node_modules/tower/node_modules/coffeekup/lib/coffeekup.js:344:12))\nat Object.render_tag (eval at <anonymous> (/Library/WebServer/Documents/prisma/prisma-box-app_towerjs/node_modules/tower/node_modules/coffeekup/lib/coffeekup.js:344:12))\nat View.<anonymous> (eval at <anonymous> (/Library/WebServer/Documents/prisma/prisma-box-app_towerjs/node_modules/tower/node_modules/coffeekup/lib/coffeekup.js:344:12))\nat Object.tag (eval at <anonymous> (/Library/WebServer/Documents/prisma/prisma-box-app_towerjs/node_modules/tower/node_modules/coffeekup/lib/coffeekup.js:344:12))\nat Fieldset.tag (/Library/WebServer/Documents/prisma/prisma-box-app_towerjs/node_modules/tower/lib/tower/view/component.js:29:26)\nThat happens for the field \"filename\" on one of my models. Prior to using towerJS 0.4.0-2, this used to work.\n. Ok, the error was on my side. I did not pass the model to the view.\nHowever, now that I do this, the form helper still seems to have problems showing the values in the form. But I will open a separate issue for that.\n. This is merged in as of pull request #111.\nWhat do you think?\n. It depends on the context you are in. You can use the @render method the same way you would use it on the server side.\nSo, assuming you are within the applicationController:\ncoffeescript\nitem = @render \"_tweet\", locals: tweet\nshould give you the correct item. Does that work for you?\n. Skip the \"shared/application\".\nJust use @render \"_tweet\" like you would do on the server side.\nOn Mon, May 7, 2012 at 4:03 PM, avastou <\nreply@reply.github.com\n\nwrote:\nit's in my client side controller, i use this :\ncoffee\nitem = @render \"shared/application/_tweet\", locals: {tweet: tweet}\nbut this does not work.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/viatropos/tower/issues/81#issuecomment-5550638\n. Yes, the tests run for me, too.\n\nI did some further experiments and noticed, that when I change the field definition from \ncoffeescript\n@field \"published\", type: \"Boolean\", default: true\nto\ncoffeescript\n@field \"published\", type: \"Boolean\", default: false\neverything works as expected.\nI will add a model + test case for this and make a pull request.\n. I noticed that tower seemed to have problems creating the folders and files for me.\nHowever, after I ran towerJS for a while in development, I think all the files were created for me and I could use cake assets:bundle to create the production files.\nWhat errors does your Chrome developer tab show you in your console?\n. I will add some examples on how to use socket.io in TowerJS soon. \nHere is the email I sent @avastou, which contains some (limited) information:\n\nHi!\nActually, you can use it pretty much according to the documentation.\nThe server-side controller can listen to socket events by calling\ncoffeescript\n@on \"socket_event\", \"onEvent\"\nonEvent: -> console.log arguments\nOne thing you should do, is to add the current @socket instance, like this:\n``` coffeescript\n@on \"connection\", \"registerHandler\"\nregisterHandler: (socket) ->\n  @socket = socket\n```\nthat way, you can later in a method send messages to your client like this:\ncoffeescript\n@socket.emit \"myMessage\", foo: \"bar\"\nDoes that sound good? ;)\nviatropos added some unit test cases for the socket.io stuff. You can check that out to see some implementation examples.\nGreetings,\nSebastian\n. Actually I think that is whats planned. You have a controller trait, that currently has method stubs for sockets.\n\nCheck out src/tower/server/controller/sockets.coffee\nWe will have to implement functionality in there, in order to get this to work. That is one of the outstanding tasks I want to implement.\n. I just want to get some more unit testing in place before I do this.\nHowever, for some reason I have problems using socketio for unit tests. As soon as I have more than 1 test, they time out.\nYou can look at that here: https://github.com/viatropos/tower/blob/development/test/cases/server/controller/socketsTest.coffee\nOnce you copy the test, the second test will fail. I couldn't figure yet out why that is happening.\n. I haven't tried the most current version. It seems like @avastou did a lot of refactoring in there.\nWe are currently using a version off of our own branch: https://github.com/komola/tower/tree/komola\nYou can register a socket object in your controller by doing this:\n``` coffeescript\n@on \"connection\", \"registerConnection\"\nregisterConnection: (@sockets) ->\n  console.log \"I am connected\", @sockets\n```\nThen you can do @sockets.emit \"test\" and in your clients listen to this using @on \"test\", \"testHandler\"\n. Yes, I do. It is actually really simple and you don't need any other middleware.\nJust have a form that can do file uploads and a file input.\nWhen you POST that form, you can get the file details like this:\n``` coffeescript\nclass App.PhotosController extends App.ApplicationController\n  create: ->\n    file = @request.files.file\n@handleUpload file, (err) =>\n  if err\n    console.error \"Could not store the image\", err\n\n  @redirectTo action: \"show\"\n\nhandleUpload: (resource, file, callback) =>\n    filename = Tower.root + \"/\" + file.name\n    fs.rename file.path, filename, callback\n```\n. This was added for some unit tests I think.\n. Yeah that should work.\nOn Wed, Apr 25, 2012 at 7:14 PM, edubkendo <\nreply@reply.github.com\n\nwrote:\nHmmm so would something like this work:\ncoffeescript\n  if NODE_ENV is 'test'\n    if options.action == 'index'\n      url = \"/custom\"\n    else\n      url = \"/custom/1\"\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/viatropos/tower/issues/104#issuecomment-5336724\n. This is fixed in pull request #106.\n. Yup, that should fix the issue.\n\nThis error was introduced, when node-mime was used to detect which format is requested.\n. That wrong redirect is listed as an issue here: #104\nYou could just remove those hardcoded redirects in your local tower installation until we have a fix pushed for that.\n. So, @viatropos do you think you could implement the design.io testing on the client-side? I assume you know best how to implement that. ;)\nAnd then @edubkendo or I could implement headless testing. I think I prefer zombieJS, because it looks like it would better fit the unit-testing style.\nPhantomJS looks more like web-scraping. What are your thoughts?\nPS: I wasn't allowed to add labels to the issue. Otherwise I would have :)\n. There is some information here on how to remove a folder from history: http://progit.org/book/ch9-7.html But I don't know if/how this works on Github.\nWe have our own coffee-script as a dependency, right?\nWe could just hard-wire it to that binary. So when npm installing tower, we could do something like this:\n./node_modules/coffee-script/bin/coffee -b -o lib -c src\nwhere the coffee-script is our custom coffee-script.\n. Another possiblity would be to just use the .coffee files and execute the server using coffee.\nThis way we wouldn't have to generate the JS files at all. What do you think about this? This would mean, though, that you can't easily use tower without CoffeeScript. Then you would have to generate the JS files.\n. Did you also do the changes in the .coffee files? Since these are, where the actual code lies.\nThe js files just get compiled every time the .coffee files change.\n. Thanks! Ok I think I might have skipped some things then. I will try again.\n. Ah... just noticed: This is still on the roadmap.\nCould we maybe point those things that are still on the roadmap and not ready yet out in the documentation?\n\nAnd when we are already on this: What would be the best way to implement this? I can help out with this if wanted. @viatropos What do you think?\n. Ok, I'll try to have a shot at this. Mostly the includes functionality first, because that is one part that we need in our own app with tower soon.\n. Ok, awesome. Will definitely hit you up then.\nJust for the record, this is where rails handles the eager loading: https://github.com/rails/rails/tree/master/activerecord/lib/active_record/associations/preloader\nI'll try to model my implementation close to theirs.\n. I came up with a solution for this.\nI created a new Boolean param class:\n``` coffeescript\nclass Tower.HTTP.Param.Boolean extends Tower.HTTP.Param\n  parse: (value) ->\n    values  = []\n    array   = value.toString().split(/[,\\|]/)\nfor string in array\n  string    = string.replace(/^\\^/, \"\")\n\n  values.push [@parseValue(string, [\"$eq\"])]\n\nvalues\n\nparseValue: (value, operators) ->\n    super((/^(true|1)$/i).test(value), operators)\n    # super(parseFloat(value), operators)\nmodule.exports = Tower.HTTP.Param.Boolean\n```\nYou can use it like this in your controller:\ncoffeescript\n@param \"isPublished\", type: \"Boolean\"\nIt allows queries containing 1 and true:\n?isPublished=true\n?isPublished=1\n. +1 Very nice! They look awesome!\nShould we add unit tests for such a functionality? Or is that too much?\n. +1 on unit testing when everything is more stable.\nI just don't want tower to become a huge mess of untested code ;)\nSo maybe we should put it as a todo item once the API has matured?\n. I'd think one way to test these is to create a very simple controller that has two methods: One that sets a flash message, and one that shows it.\nThat way you can\n- test that no message is shown if there was none set yet\n- test that you can issue a request to the action that sets the flash message\n- and when you now make a request to the action that shows it, it should be visible\n- and when you now make a request to this action again, it should be gone.\nAny ideas?\n. This is my ./test/server.coffee:\n``` coffeescript\nrequire 'tower'\nglobal.chai     = require \"chai\"\nglobal.assert   = chai.assert\nglobal.expect   = chai.expect\nglobal.sinon    = require 'sinon'\nglobal.async    = require 'async'\nglobal.test     = it\nglobal.cb       = true # some library has a global leak...\nglobal.factory  = -> Tower.Factory.create(arguments...)\nglobal.urlFor   = Tower.urlFor\nglobal.get      = .get\nglobal.post     = .post\nglobal.put      = .put\nglobal.destroy  = .destroy\nglobal.app      = Tower.Application.instance()\nInitialize the app before everything.\nbefore (done) ->\n  app.initialize done\nRun this before each action\nbeforeEach (done) ->\n  if Tower.client\n    Tower.StoreMemory.clean(done)\n  else\n    Tower.StoreMongodb.clean(done)\n```\nI simplified the file down to this:\n``` coffeescript\ndescribe \"App.OrderHelper\", ->\n  it \"Should return the correct amount\", ->\n    value = App.OrderHelper.getPriceAsString 300\n    assert.equal value, \"3,00 \u20ac\"\nit \"Should return 10 cents\", ->\n    value = App.OrderHelper.getPriceAsString 10\n    console.log \"Got this\", value\n    assert.equal value, \"0,10 \u20ac\"\n```\nThis is the response while running mocha:\n``\n$ node_modules/mocha/bin/mocha $(find test -name \"*Test.coffee\")\npath.existsSync is now calledfs.existsSync`.\nApp.OrderHelper\n    \u2713 Should return the correct amount \n    \u25e6 Should return 10 cents: $\n```\nIt does not really go into executing the second test. I can put a console.log in there, and nothing happens.\n. npm list: https://gist.github.com/3505316\nThis is what my test folder looks like:\ntest/\n\u251c\u2500\u2500 client.coffee\n\u251c\u2500\u2500 helpers\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 orderHelperTest.coffee\n\u251c\u2500\u2500 mocha.opts\n\u251c\u2500\u2500 models\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 customerTest.coffee\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 eventTest.coffee\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 itemTest.coffee\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 orderTest.coffee\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 paperTest.coffee\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 photoTest.coffee\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 sessionTest.coffee\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 userTest.coffee\n\u2514\u2500\u2500 server.coffee\nthe other test files are all commented out. This error also occurs when I just run the orderHelperTest test.\n```\n$ uname -a\nDarwin Sebastian-Hoitzs-MacBook-Pro.local 12.0.0 Darwin Kernel Version 12.0.0: Sun Jun 24 23:00:16 PDT 2012; root:xnu-2050.7.9~1/RELEASE_X86_64 x86_64\nThats Mountain Lion.\n$ node -v\nv0.8.8\n$ npm -v\n1.1.59\n```\n. Weird. It must have something to do with mountain lion. When I try to start the server, I get a \n[Wed, 29 Aug 2012 08:27:08 GMT] INFO Tower development server listening on port 4000\nSegmentation fault: 11\nWhen I run this on my workstation in the office (Snow Leopard), everything is fine and I can also run the unit tests. Weird...\n. I still can't get it to run on my MacBook on Mountain Lion. But on my workstation iMac it runs perfectly. Also on our Debian servers. So I think this is a problem with my macbook.\n. Ah, ok. Shoot, I thought this was possible.\nI have a lot of buttons in my code that toggle one single boolean switch in\nmy models. Right now I have a lot of actions that do the single change.\nNow I will probably have to implement a lot of forms that do that logic,\nright?\nLike this:\nhtml\n<form action=\"/orders/#id\" method=\"post\">\n  <input type=\"hidden\" name=\"_method\" value=\"put\">\n  <input type=\"hidden\" name=\"order[isPaid]\" value=\"true\">\n  <input type=\"submit\" name=\"submit\" value=\"Mark as paid\">\n</form>\nI think it would be cool for tower to provide a view helper to do this kind\nof stuff. What do you think?\nOn Mon, Sep 10, 2012 at 11:07 PM, Lance Pollard notifications@github.comwrote:\n\nI think it needs to be a POST request, since req.body is only defined for\nPOST requests I'm pretty sure:\nhttps://github.com/senchalabs/connect/tree/master/lib/middleware/methodOverride.js#L28https://github.com/senchalabs/connect/blob/15bb7e2598d1f3c18b3063673a6f7900e919ac69/lib/middleware/methodOverride.js#L28\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/269#issuecomment-8438415.\n\n\nSebastian Hoitz\nGesch\u00e4ftsf\u00fchrer, Entwickler, Coffee 2 Code converter\nkomola UG (haftungsbeschr\u00e4nkt)\nRebenring 33\n38106 Braunschweig\nTelefon: +49 531 3804200\nMobil: +49 175 2517038\nGesch\u00e4ftsf\u00fchrer: Sebastian Hoitz, Thomas Schaaf\nAmtsgericht Braunschweig | HRB 201595\n. I took a quick look at the Tower.constant method.\nIt seems like this would prevent developers from using any model names, that are also existent in the global namespace, since those are given a higher priority:\nhttps://github.com/viatropos/tower/blob/master/packages/tower-support/shared/shared.coffee#L255\n. Wow that sounds cool!\nWhat about switching classes to mock objects for unit tests? Is that possible, too?\n. Sweet :+1: Can't wait for it! :)\n. +1\nI today ran into the same issues. What is the current state of this? Is there anything we can help with?\n. Yes I used the latest version and ran into this problem.\n. Closed, as this is referenced in issue #77.\n. @viatropos What do you think about this pull request?\nDo you have any additional thoughts?\n. I noticed this with forms. I have a scaffold that was generated using the generator. With the latest tower version, no data is displayed inside my forms anymore.\nI also get this error:\nTypeError: Cannot read property 'required' of undefined\nat new Field (/Library/WebServer/Documents/prisma/prisma-box-app_towerjs/node_modules/tower/lib/tower/view/form/field.js:53:25)\nat Builder.field (/Library/WebServer/Documents/prisma/prisma-box-app_towerjs/node_modules/tower/lib/tower/view/form/builder.js:105:12)\nat eval at <anonymous> (eval at <anonymous> (/Library/WebServer/Documents/prisma/prisma-box-app_towerjs/node_modules/tower/node_modules/coffeekup/lib/coffeekup.js:344:12))\nat Builder.render (/Library/WebServer/Documents/prisma/prisma-box-app_towerjs/node_modules/tower/lib/tower/view/form/builder.js:138:12)\nat View.<anonymous> (/Library/WebServer/Documents/prisma/prisma-box-app_towerjs/node_modules/tower/lib/tower/view/form/fieldset.js:37:30)\nat Object.render_contents (eval at <anonymous> (/Library/WebServer/Documents/prisma/prisma-box-app_towerjs/node_modules/tower/node_modules/coffeekup/lib/coffeekup.js:344:12))\nat Object.render_tag (eval at <anonymous> (/Library/WebServer/Documents/prisma/prisma-box-app_towerjs/node_modules/tower/node_modules/coffeekup/lib/coffeekup.js:344:12))\nat View.<anonymous> (eval at <anonymous> (/Library/WebServer/Documents/prisma/prisma-box-app_towerjs/node_modules/tower/node_modules/coffeekup/lib/coffeekup.js:344:12))\nat Object.tag (eval at <anonymous> (/Library/WebServer/Documents/prisma/prisma-box-app_towerjs/node_modules/tower/node_modules/coffeekup/lib/coffeekup.js:344:12))\nat Fieldset.tag (/Library/WebServer/Documents/prisma/prisma-box-app_towerjs/node_modules/tower/lib/tower/view/component.js:29:26)\nThat happens for the field \"filename\" on one of my models. Prior to using towerJS 0.4.0-2, this used to work.\n. Ok, the error was on my side. I did not pass the model to the view.\nHowever, now that I do this, the form helper still seems to have problems showing the values in the form. But I will open a separate issue for that.\n. This is merged in as of pull request #111.\nWhat do you think?\n. It depends on the context you are in. You can use the @render method the same way you would use it on the server side.\nSo, assuming you are within the applicationController:\ncoffeescript\nitem = @render \"_tweet\", locals: tweet\nshould give you the correct item. Does that work for you?\n. Skip the \"shared/application\".\nJust use @render \"_tweet\" like you would do on the server side.\nOn Mon, May 7, 2012 at 4:03 PM, avastou <\nreply@reply.github.com\n\nwrote:\nit's in my client side controller, i use this :\ncoffee\nitem = @render \"shared/application/_tweet\", locals: {tweet: tweet}\nbut this does not work.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/viatropos/tower/issues/81#issuecomment-5550638\n. Yes, the tests run for me, too.\n\nI did some further experiments and noticed, that when I change the field definition from \ncoffeescript\n@field \"published\", type: \"Boolean\", default: true\nto\ncoffeescript\n@field \"published\", type: \"Boolean\", default: false\neverything works as expected.\nI will add a model + test case for this and make a pull request.\n. I noticed that tower seemed to have problems creating the folders and files for me.\nHowever, after I ran towerJS for a while in development, I think all the files were created for me and I could use cake assets:bundle to create the production files.\nWhat errors does your Chrome developer tab show you in your console?\n. I will add some examples on how to use socket.io in TowerJS soon. \nHere is the email I sent @avastou, which contains some (limited) information:\n\nHi!\nActually, you can use it pretty much according to the documentation.\nThe server-side controller can listen to socket events by calling\ncoffeescript\n@on \"socket_event\", \"onEvent\"\nonEvent: -> console.log arguments\nOne thing you should do, is to add the current @socket instance, like this:\n``` coffeescript\n@on \"connection\", \"registerHandler\"\nregisterHandler: (socket) ->\n  @socket = socket\n```\nthat way, you can later in a method send messages to your client like this:\ncoffeescript\n@socket.emit \"myMessage\", foo: \"bar\"\nDoes that sound good? ;)\nviatropos added some unit test cases for the socket.io stuff. You can check that out to see some implementation examples.\nGreetings,\nSebastian\n. Actually I think that is whats planned. You have a controller trait, that currently has method stubs for sockets.\n\nCheck out src/tower/server/controller/sockets.coffee\nWe will have to implement functionality in there, in order to get this to work. That is one of the outstanding tasks I want to implement.\n. I just want to get some more unit testing in place before I do this.\nHowever, for some reason I have problems using socketio for unit tests. As soon as I have more than 1 test, they time out.\nYou can look at that here: https://github.com/viatropos/tower/blob/development/test/cases/server/controller/socketsTest.coffee\nOnce you copy the test, the second test will fail. I couldn't figure yet out why that is happening.\n. I haven't tried the most current version. It seems like @avastou did a lot of refactoring in there.\nWe are currently using a version off of our own branch: https://github.com/komola/tower/tree/komola\nYou can register a socket object in your controller by doing this:\n``` coffeescript\n@on \"connection\", \"registerConnection\"\nregisterConnection: (@sockets) ->\n  console.log \"I am connected\", @sockets\n```\nThen you can do @sockets.emit \"test\" and in your clients listen to this using @on \"test\", \"testHandler\"\n. Yes, I do. It is actually really simple and you don't need any other middleware.\nJust have a form that can do file uploads and a file input.\nWhen you POST that form, you can get the file details like this:\n``` coffeescript\nclass App.PhotosController extends App.ApplicationController\n  create: ->\n    file = @request.files.file\n@handleUpload file, (err) =>\n  if err\n    console.error \"Could not store the image\", err\n\n  @redirectTo action: \"show\"\n\nhandleUpload: (resource, file, callback) =>\n    filename = Tower.root + \"/\" + file.name\n    fs.rename file.path, filename, callback\n```\n. This was added for some unit tests I think.\n. Yeah that should work.\nOn Wed, Apr 25, 2012 at 7:14 PM, edubkendo <\nreply@reply.github.com\n\nwrote:\nHmmm so would something like this work:\ncoffeescript\n  if NODE_ENV is 'test'\n    if options.action == 'index'\n      url = \"/custom\"\n    else\n      url = \"/custom/1\"\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/viatropos/tower/issues/104#issuecomment-5336724\n. This is fixed in pull request #106.\n. Yup, that should fix the issue.\n\nThis error was introduced, when node-mime was used to detect which format is requested.\n. That wrong redirect is listed as an issue here: #104\nYou could just remove those hardcoded redirects in your local tower installation until we have a fix pushed for that.\n. So, @viatropos do you think you could implement the design.io testing on the client-side? I assume you know best how to implement that. ;)\nAnd then @edubkendo or I could implement headless testing. I think I prefer zombieJS, because it looks like it would better fit the unit-testing style.\nPhantomJS looks more like web-scraping. What are your thoughts?\nPS: I wasn't allowed to add labels to the issue. Otherwise I would have :)\n. There is some information here on how to remove a folder from history: http://progit.org/book/ch9-7.html But I don't know if/how this works on Github.\nWe have our own coffee-script as a dependency, right?\nWe could just hard-wire it to that binary. So when npm installing tower, we could do something like this:\n./node_modules/coffee-script/bin/coffee -b -o lib -c src\nwhere the coffee-script is our custom coffee-script.\n. Another possiblity would be to just use the .coffee files and execute the server using coffee.\nThis way we wouldn't have to generate the JS files at all. What do you think about this? This would mean, though, that you can't easily use tower without CoffeeScript. Then you would have to generate the JS files.\n. Did you also do the changes in the .coffee files? Since these are, where the actual code lies.\nThe js files just get compiled every time the .coffee files change.\n. Thanks! Ok I think I might have skipped some things then. I will try again.\n. Ah... just noticed: This is still on the roadmap.\nCould we maybe point those things that are still on the roadmap and not ready yet out in the documentation?\n\nAnd when we are already on this: What would be the best way to implement this? I can help out with this if wanted. @viatropos What do you think?\n. Ok, I'll try to have a shot at this. Mostly the includes functionality first, because that is one part that we need in our own app with tower soon.\n. Ok, awesome. Will definitely hit you up then.\nJust for the record, this is where rails handles the eager loading: https://github.com/rails/rails/tree/master/activerecord/lib/active_record/associations/preloader\nI'll try to model my implementation close to theirs.\n. I came up with a solution for this.\nI created a new Boolean param class:\n``` coffeescript\nclass Tower.HTTP.Param.Boolean extends Tower.HTTP.Param\n  parse: (value) ->\n    values  = []\n    array   = value.toString().split(/[,\\|]/)\nfor string in array\n  string    = string.replace(/^\\^/, \"\")\n\n  values.push [@parseValue(string, [\"$eq\"])]\n\nvalues\n\nparseValue: (value, operators) ->\n    super((/^(true|1)$/i).test(value), operators)\n    # super(parseFloat(value), operators)\nmodule.exports = Tower.HTTP.Param.Boolean\n```\nYou can use it like this in your controller:\ncoffeescript\n@param \"isPublished\", type: \"Boolean\"\nIt allows queries containing 1 and true:\n?isPublished=true\n?isPublished=1\n. +1 Very nice! They look awesome!\nShould we add unit tests for such a functionality? Or is that too much?\n. +1 on unit testing when everything is more stable.\nI just don't want tower to become a huge mess of untested code ;)\nSo maybe we should put it as a todo item once the API has matured?\n. I'd think one way to test these is to create a very simple controller that has two methods: One that sets a flash message, and one that shows it.\nThat way you can\n- test that no message is shown if there was none set yet\n- test that you can issue a request to the action that sets the flash message\n- and when you now make a request to the action that shows it, it should be visible\n- and when you now make a request to this action again, it should be gone.\nAny ideas?\n. This is my ./test/server.coffee:\n``` coffeescript\nrequire 'tower'\nglobal.chai     = require \"chai\"\nglobal.assert   = chai.assert\nglobal.expect   = chai.expect\nglobal.sinon    = require 'sinon'\nglobal.async    = require 'async'\nglobal.test     = it\nglobal.cb       = true # some library has a global leak...\nglobal.factory  = -> Tower.Factory.create(arguments...)\nglobal.urlFor   = Tower.urlFor\nglobal.get      = .get\nglobal.post     = .post\nglobal.put      = .put\nglobal.destroy  = .destroy\nglobal.app      = Tower.Application.instance()\nInitialize the app before everything.\nbefore (done) ->\n  app.initialize done\nRun this before each action\nbeforeEach (done) ->\n  if Tower.client\n    Tower.StoreMemory.clean(done)\n  else\n    Tower.StoreMongodb.clean(done)\n```\nI simplified the file down to this:\n``` coffeescript\ndescribe \"App.OrderHelper\", ->\n  it \"Should return the correct amount\", ->\n    value = App.OrderHelper.getPriceAsString 300\n    assert.equal value, \"3,00 \u20ac\"\nit \"Should return 10 cents\", ->\n    value = App.OrderHelper.getPriceAsString 10\n    console.log \"Got this\", value\n    assert.equal value, \"0,10 \u20ac\"\n```\nThis is the response while running mocha:\n``\n$ node_modules/mocha/bin/mocha $(find test -name \"*Test.coffee\")\npath.existsSync is now calledfs.existsSync`.\nApp.OrderHelper\n    \u2713 Should return the correct amount \n    \u25e6 Should return 10 cents: $\n```\nIt does not really go into executing the second test. I can put a console.log in there, and nothing happens.\n. npm list: https://gist.github.com/3505316\nThis is what my test folder looks like:\ntest/\n\u251c\u2500\u2500 client.coffee\n\u251c\u2500\u2500 helpers\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 orderHelperTest.coffee\n\u251c\u2500\u2500 mocha.opts\n\u251c\u2500\u2500 models\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 customerTest.coffee\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 eventTest.coffee\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 itemTest.coffee\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 orderTest.coffee\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 paperTest.coffee\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 photoTest.coffee\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 sessionTest.coffee\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 userTest.coffee\n\u2514\u2500\u2500 server.coffee\nthe other test files are all commented out. This error also occurs when I just run the orderHelperTest test.\n```\n$ uname -a\nDarwin Sebastian-Hoitzs-MacBook-Pro.local 12.0.0 Darwin Kernel Version 12.0.0: Sun Jun 24 23:00:16 PDT 2012; root:xnu-2050.7.9~1/RELEASE_X86_64 x86_64\nThats Mountain Lion.\n$ node -v\nv0.8.8\n$ npm -v\n1.1.59\n```\n. Weird. It must have something to do with mountain lion. When I try to start the server, I get a \n[Wed, 29 Aug 2012 08:27:08 GMT] INFO Tower development server listening on port 4000\nSegmentation fault: 11\nWhen I run this on my workstation in the office (Snow Leopard), everything is fine and I can also run the unit tests. Weird...\n. I still can't get it to run on my MacBook on Mountain Lion. But on my workstation iMac it runs perfectly. Also on our Debian servers. So I think this is a problem with my macbook.\n. Ah, ok. Shoot, I thought this was possible.\nI have a lot of buttons in my code that toggle one single boolean switch in\nmy models. Right now I have a lot of actions that do the single change.\nNow I will probably have to implement a lot of forms that do that logic,\nright?\nLike this:\nhtml\n<form action=\"/orders/#id\" method=\"post\">\n  <input type=\"hidden\" name=\"_method\" value=\"put\">\n  <input type=\"hidden\" name=\"order[isPaid]\" value=\"true\">\n  <input type=\"submit\" name=\"submit\" value=\"Mark as paid\">\n</form>\nI think it would be cool for tower to provide a view helper to do this kind\nof stuff. What do you think?\nOn Mon, Sep 10, 2012 at 11:07 PM, Lance Pollard notifications@github.comwrote:\n\nI think it needs to be a POST request, since req.body is only defined for\nPOST requests I'm pretty sure:\nhttps://github.com/senchalabs/connect/tree/master/lib/middleware/methodOverride.js#L28https://github.com/senchalabs/connect/blob/15bb7e2598d1f3c18b3063673a6f7900e919ac69/lib/middleware/methodOverride.js#L28\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/269#issuecomment-8438415.\n\n\nSebastian Hoitz\nGesch\u00e4ftsf\u00fchrer, Entwickler, Coffee 2 Code converter\nkomola UG (haftungsbeschr\u00e4nkt)\nRebenring 33\n38106 Braunschweig\nTelefon: +49 531 3804200\nMobil: +49 175 2517038\nGesch\u00e4ftsf\u00fchrer: Sebastian Hoitz, Thomas Schaaf\nAmtsgericht Braunschweig | HRB 201595\n. I took a quick look at the Tower.constant method.\nIt seems like this would prevent developers from using any model names, that are also existent in the global namespace, since those are given a higher priority:\nhttps://github.com/viatropos/tower/blob/master/packages/tower-support/shared/shared.coffee#L255\n. Wow that sounds cool!\nWhat about switching classes to mock objects for unit tests? Is that possible, too?\n. Sweet :+1: Can't wait for it! :)\n. ",
    "searchinnerpeace": "+1\nWaiting\n. Thanks! I will try this\n. +1\nWaiting\n. Thanks! I will try this\n. ",
    "Voronchuk": "I recommend to add stuff about MongoHQ config settings here: https://github.com/viatropos/tower/wiki/heroku\nHave to search all issues to solve same trouble\n. Done\n. Sent a pull request with quick fix for that, through this issue need some discussion to resolve it fully.\nAnother trouble now is with actual assets stored on S3, it seem that browser can't decode them properly:\nhttps://s3.amazonaws.com/igt/stylesheets/vendor-25398bb2e46ea86597e5e6d5a29f5457.css\nI gues it's smth with their gzip encoder or s3 settings, not sure that I can fix that myself, need help. Don't wish to disable gzip alltogather.\n. https://forums.aws.amazon.com/thread.jspa?messageID=276427\nIt seem that files shouldn't be stored in gzipped form. Their server should do the work himself by Content-Encoding header. Will try to test that and post my results.\n. Ok. On my side I fixed S3 issues, and now deploy work as intended. Made a pull request with fixes, review if you need them.\n. Good point, missed /src folder has the same stuff. Will add fixes there also.\n. I recommend to add stuff about MongoHQ config settings here: https://github.com/viatropos/tower/wiki/heroku\nHave to search all issues to solve same trouble\n. Done\n. Sent a pull request with quick fix for that, through this issue need some discussion to resolve it fully.\nAnother trouble now is with actual assets stored on S3, it seem that browser can't decode them properly:\nhttps://s3.amazonaws.com/igt/stylesheets/vendor-25398bb2e46ea86597e5e6d5a29f5457.css\nI gues it's smth with their gzip encoder or s3 settings, not sure that I can fix that myself, need help. Don't wish to disable gzip alltogather.\n. https://forums.aws.amazon.com/thread.jspa?messageID=276427\nIt seem that files shouldn't be stored in gzipped form. Their server should do the work himself by Content-Encoding header. Will try to test that and post my results.\n. Ok. On my side I fixed S3 issues, and now deploy work as intended. Made a pull request with fixes, review if you need them.\n. Good point, missed /src folder has the same stuff. Will add fixes there also.\n. ",
    "j-mcnally": "I am having this same issue again, i just installed tower today and get this when using\ninclude shared/nav\n. The make watch fixed it for me, however i still needed to run make watch when install via npm install tower -g\n. Are you running npm as root? are u using sudo? the EACCESS in the log points to this being part of the issue?\n. the issue seems to be with git not tower actually, how did you install git?\n. i would try brew install git\n. I'm in I'd love to work on stuff I tried to fix it myself but haven't had a\nchance to dig through how everything is currently laid out\nOn Sep 14, 2012 6:51 PM, \"Lance Pollard\" notifications@github.com wrote:\n\nThis is because the client routes are only wired together for @resourcesand\n@resource, we need to make it more robust / add it to the @match method.\nWould you mind taking a look at that? It should be a fairly straightforward\nto implement, see this:\n- packages/tower-net/shared/route/dsl.coffee#L113https://github.com/viatropos/tower/blob/43f69b9d472fcee852bea5cecbf82e412a7fa56f/packages/tower-net/shared/route/dsl.coffee#L113\nThe state key that is passed into the @match options hash is then handled\nby the client router:\n- packages/tower-net/client/states.coffee#L90https://github.com/viatropos/tower/blob/43f69b9d472fcee852bea5cecbf82e412a7fa56f/packages/tower-net/client/states.coffee#L90\nThat insertRoute method is called for each route defined in the\nTower.Route.draw DSL, and is passed a Tower.Route instance.\nSend a PR if you'd like, otherwise I'll be getting back to the routes in a\nfew weeks (though I'll try and get to this one sooner).\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/273#issuecomment-8579313.\n. Thanks so much lance I'm a huge fan of rails but if tower gets better I'd\nmuch rather use it. The ember integration rocks and I'd love to be a\ncontributor of this awesome platform.\nOn Sep 14, 2012 7:19 PM, \"Lance Pollard\" notifications@github.com wrote:\nFeel free to send me a PM on Twitter if you're ever digging into code, my\nphone goes off so I can respond faster :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/273#issuecomment-8579996.\n. this can be fixed in documentation:\n\nadding action: \"index\", state: \"home.index\", name: 'home', method: ['GET'] to the route line\nfixes the issues\n. Outstanding is that the / route is pushed to /root which is a bug that I am looking at now.\n. This breaks route, sorry got too excited, will fix and submit new PR\n. this actually works correctly, however, embers sees the route as '' so the href isnt rendered correctly. If i patch ember i can fix it but this seems like a bad idea. Any ideas @viatropos ?\n. @TheHydroImpulse  hook.io is deprecated and uses an old version of weak that uses waf which does not work in 10.8. I have a work around but it requires you build tower from src.\nhttps://gist.github.com/3740178\nIf you have problems following this join us in #towerjs on irc.freenode.net\n. @viatropos , I think a DSL for setting properties would be nice, i feel like it could get a bit redundant, i'd build that out if you think this is a good idea.\n. Gist: https://gist.github.com/3738653\n. Yeah this is older Tower 0.4.1 i had problems updating the project I am working on right now, it might just be my project is out of date, things are moving quickly I can tell. I guess I was just sharing my work around. I am on OSX. When I have a bit more time i'll try updating everything again, i think my issue was not moving tower.js from dist to /vendor when building the new tower from src.\n. Speaking of moving dist to vendor, If i'm developing tower inside of a project is there some sort of automation i can use to move tower.js from dist to vendor, or is my best bet to extend grunt to do this for me?\n. neat for now im using the built in version since i am a little behind, which im working on updating now. I'll close this out since I am just behind.\n. i think rails has evented loads so you can hook code to run after something has initialized\nala\nActiveSupport.on_load(:active_record) do\n  self.include_root_in_json = false\nend\n. I wrote a module for this if anyone wants to see if they can add it to tower support or come up with a dsl?\nhttps://github.com/j-mcnally/node-obj-watch\nother wise i'll loop back around after some feedback and try to clean it up\n. 5c4e1ff\n. Updated this pull request to actually fix the router!\n. I will look into this can u send me your routes coffee\nOn Sep 22, 2012 4:30 AM, \"Lance Pollard\" notifications@github.com wrote:\n\nHey, haven't been able to switch gears fully yet. I did pull the changes\ninto a local branch but the client threw this error:\nUncaught Error: assertion failed: You must specify a target state for event 'indexPost' in order to link to it in the current state 'root.index'.\nI just generated a new app with the latest changes and a post model:\ntower new app\ncd app\nnpm link tower\nnpm install\ncopy/paste the latest client dev into vendor/javascripts/tower.js\ntower generate scaffold post title:string body:text\ncake watch\nnode server\nWill dig in further soon. Thanks for the PR, makes things move fast!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/pull/299#issuecomment-8787073.\n. @viatropos i think the issue is my router uses the name: attribute from the route to scaffold out\n\nmethodName = route.options.name\nTower.router.root[methodName] = Ember.State.transitionTo(route.options.state)\n      Tower.router.root.eventTransitions[methodName] = route.options.state\nas methodName = 'posts'\nbut the view scaffold assumes \"index#{many}\" idk what we want to do. I think it makes more sense if all theses things key off of some definition. perferably the key given in the route. Let me know what you want to do. the simplest approach would be to modify the view generator, but we can always change the router around.\n. im a newb with git sorry i added some new stuff for evented object loading and i guess it got added here\n. you can check out that module here:\nhttps://github.com/j-mcnally/node-obj-watch\n. Sorry for being MIA, been doing a bunch of rails work for clients. Yes Edub, you are on the right path. My pull request aimed to make this simpler by handling all the client side needs too by modifying some of the state stuff.\n. My routes were just very verbose and didn't take advantage of alot from the DSL\n@match '/blog', to: 'blogs#index', action: 'index', state: 'blog.index', name: 'indexBlog', method: ['GET']\n@match '/blog/posts/:slug', to: 'blogs#show', action: 'show', state: 'blog.showpost', name: 'showPost', method: ['GET']\nthis would allow the index blog page to be called with {{action indexBlog}} etc. basically what ever the name attr is.\nthis syntax should wire up the connect outlets automagically.\n. theres a bit of awkward ness with ember coming into play here i think\ngrunt actually compiles all your templates into /public/javascripts/templates.js take a look, i havent looked at how to abstract this but i think its the reason this wouldnt work as simple as you think it might.\n. would the create function ever happen through the router outside of this implementation tho?\n. I am having this same issue again, i just installed tower today and get this when using\ninclude shared/nav\n. The make watch fixed it for me, however i still needed to run make watch when install via npm install tower -g\n. Are you running npm as root? are u using sudo? the EACCESS in the log points to this being part of the issue?\n. the issue seems to be with git not tower actually, how did you install git?\n. i would try brew install git\n. I'm in I'd love to work on stuff I tried to fix it myself but haven't had a\nchance to dig through how everything is currently laid out\nOn Sep 14, 2012 6:51 PM, \"Lance Pollard\" notifications@github.com wrote:\n\nThis is because the client routes are only wired together for @resourcesand\n@resource, we need to make it more robust / add it to the @match method.\nWould you mind taking a look at that? It should be a fairly straightforward\nto implement, see this:\n- packages/tower-net/shared/route/dsl.coffee#L113https://github.com/viatropos/tower/blob/43f69b9d472fcee852bea5cecbf82e412a7fa56f/packages/tower-net/shared/route/dsl.coffee#L113\nThe state key that is passed into the @match options hash is then handled\nby the client router:\n- packages/tower-net/client/states.coffee#L90https://github.com/viatropos/tower/blob/43f69b9d472fcee852bea5cecbf82e412a7fa56f/packages/tower-net/client/states.coffee#L90\nThat insertRoute method is called for each route defined in the\nTower.Route.draw DSL, and is passed a Tower.Route instance.\nSend a PR if you'd like, otherwise I'll be getting back to the routes in a\nfew weeks (though I'll try and get to this one sooner).\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/273#issuecomment-8579313.\n. Thanks so much lance I'm a huge fan of rails but if tower gets better I'd\nmuch rather use it. The ember integration rocks and I'd love to be a\ncontributor of this awesome platform.\nOn Sep 14, 2012 7:19 PM, \"Lance Pollard\" notifications@github.com wrote:\nFeel free to send me a PM on Twitter if you're ever digging into code, my\nphone goes off so I can respond faster :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/273#issuecomment-8579996.\n. this can be fixed in documentation:\n\nadding action: \"index\", state: \"home.index\", name: 'home', method: ['GET'] to the route line\nfixes the issues\n. Outstanding is that the / route is pushed to /root which is a bug that I am looking at now.\n. This breaks route, sorry got too excited, will fix and submit new PR\n. this actually works correctly, however, embers sees the route as '' so the href isnt rendered correctly. If i patch ember i can fix it but this seems like a bad idea. Any ideas @viatropos ?\n. @TheHydroImpulse  hook.io is deprecated and uses an old version of weak that uses waf which does not work in 10.8. I have a work around but it requires you build tower from src.\nhttps://gist.github.com/3740178\nIf you have problems following this join us in #towerjs on irc.freenode.net\n. @viatropos , I think a DSL for setting properties would be nice, i feel like it could get a bit redundant, i'd build that out if you think this is a good idea.\n. Gist: https://gist.github.com/3738653\n. Yeah this is older Tower 0.4.1 i had problems updating the project I am working on right now, it might just be my project is out of date, things are moving quickly I can tell. I guess I was just sharing my work around. I am on OSX. When I have a bit more time i'll try updating everything again, i think my issue was not moving tower.js from dist to /vendor when building the new tower from src.\n. Speaking of moving dist to vendor, If i'm developing tower inside of a project is there some sort of automation i can use to move tower.js from dist to vendor, or is my best bet to extend grunt to do this for me?\n. neat for now im using the built in version since i am a little behind, which im working on updating now. I'll close this out since I am just behind.\n. i think rails has evented loads so you can hook code to run after something has initialized\nala\nActiveSupport.on_load(:active_record) do\n  self.include_root_in_json = false\nend\n. I wrote a module for this if anyone wants to see if they can add it to tower support or come up with a dsl?\nhttps://github.com/j-mcnally/node-obj-watch\nother wise i'll loop back around after some feedback and try to clean it up\n. 5c4e1ff\n. Updated this pull request to actually fix the router!\n. I will look into this can u send me your routes coffee\nOn Sep 22, 2012 4:30 AM, \"Lance Pollard\" notifications@github.com wrote:\n\nHey, haven't been able to switch gears fully yet. I did pull the changes\ninto a local branch but the client threw this error:\nUncaught Error: assertion failed: You must specify a target state for event 'indexPost' in order to link to it in the current state 'root.index'.\nI just generated a new app with the latest changes and a post model:\ntower new app\ncd app\nnpm link tower\nnpm install\ncopy/paste the latest client dev into vendor/javascripts/tower.js\ntower generate scaffold post title:string body:text\ncake watch\nnode server\nWill dig in further soon. Thanks for the PR, makes things move fast!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/pull/299#issuecomment-8787073.\n. @viatropos i think the issue is my router uses the name: attribute from the route to scaffold out\n\nmethodName = route.options.name\nTower.router.root[methodName] = Ember.State.transitionTo(route.options.state)\n      Tower.router.root.eventTransitions[methodName] = route.options.state\nas methodName = 'posts'\nbut the view scaffold assumes \"index#{many}\" idk what we want to do. I think it makes more sense if all theses things key off of some definition. perferably the key given in the route. Let me know what you want to do. the simplest approach would be to modify the view generator, but we can always change the router around.\n. im a newb with git sorry i added some new stuff for evented object loading and i guess it got added here\n. you can check out that module here:\nhttps://github.com/j-mcnally/node-obj-watch\n. Sorry for being MIA, been doing a bunch of rails work for clients. Yes Edub, you are on the right path. My pull request aimed to make this simpler by handling all the client side needs too by modifying some of the state stuff.\n. My routes were just very verbose and didn't take advantage of alot from the DSL\n@match '/blog', to: 'blogs#index', action: 'index', state: 'blog.index', name: 'indexBlog', method: ['GET']\n@match '/blog/posts/:slug', to: 'blogs#show', action: 'show', state: 'blog.showpost', name: 'showPost', method: ['GET']\nthis would allow the index blog page to be called with {{action indexBlog}} etc. basically what ever the name attr is.\nthis syntax should wire up the connect outlets automagically.\n. theres a bit of awkward ness with ember coming into play here i think\ngrunt actually compiles all your templates into /public/javascripts/templates.js take a look, i havent looked at how to abstract this but i think its the reason this wouldnt work as simple as you think it might.\n. would the create function ever happen through the router outside of this implementation tho?\n. ",
    "cbou": "Thanks, I have a problem when calling cake db:seed :\nnode.js:201\n        throw e; // process.nextTick error, or 'error' event on first tick\n              ^\nTypeError: Cannot read property 'slaveOk' of undefined\n    at new Collection (.../node_modules/mongodb/lib/mongodb/collection.js:52:65)\n    at MongoDB.collection (.../node_modules/tower/lib/tower/server/store/mongodb/database.js:45:26)\n    at MongoDB.find (.../node_modules/tower/lib/tower/server/store/mongodb/finders.js:16:10)\n    at Scope._each (.../node_modules/tower/lib/tower/model/scope/persistence.js:106:23)\n    at Scope._destroy (.../node_modules/tower/lib/tower/model/scope/persistence.js:99:19)\n    at Scope.destroy (.../node_modules/tower/lib/tower/model/scope/persistence.js:34:17)\n    at Function.destroy (.../node_modules/tower/lib/tower/model/scopes.js:58:41)\n    at .../db/seeds.js:15:25\n    at .../node_modules/async/lib/async.js:486:21\n    at .../node_modules/async/lib/async.js:185:13\nMy seed look like this:\n``` coffeescript\nasync = require('async')\nperson1  = null\nperson2  = null\nperson3  = null\nasync.series [\n  # clear any existing data\n  (done) => App.Person.destroy(done)\n  (done) => App.Project.destroy(done)\n# create users\n  (done) => App.Person.create\n    name:   \"person1\"\n    (error, record) =>\n      person1 = record\n      availabilities = []\n      assignments = []\n      done()\n  (done) => App.Person.create\n    name:   \"person2\"\n    (error, record) =>\n      person2 = record\n      availabilities = []\n      assignments = []\n      done()\n  (done) => App.Person.create\n    name:   \"person3\"\n    (error, record) =>\n      person3 = record\n      availabilities = []\n      assignments = []\n      done()\n], (error) =>\n  if error\n    console.log \"Something went wrong creating seed data... Try running again.\"\n  else\n    console.log \"Successfully created seed data!\"\n```\nDo you have any idea ?\n. Thanks it works :)\n. Thanks, I have a problem when calling cake db:seed :\nnode.js:201\n        throw e; // process.nextTick error, or 'error' event on first tick\n              ^\nTypeError: Cannot read property 'slaveOk' of undefined\n    at new Collection (.../node_modules/mongodb/lib/mongodb/collection.js:52:65)\n    at MongoDB.collection (.../node_modules/tower/lib/tower/server/store/mongodb/database.js:45:26)\n    at MongoDB.find (.../node_modules/tower/lib/tower/server/store/mongodb/finders.js:16:10)\n    at Scope._each (.../node_modules/tower/lib/tower/model/scope/persistence.js:106:23)\n    at Scope._destroy (.../node_modules/tower/lib/tower/model/scope/persistence.js:99:19)\n    at Scope.destroy (.../node_modules/tower/lib/tower/model/scope/persistence.js:34:17)\n    at Function.destroy (.../node_modules/tower/lib/tower/model/scopes.js:58:41)\n    at .../db/seeds.js:15:25\n    at .../node_modules/async/lib/async.js:486:21\n    at .../node_modules/async/lib/async.js:185:13\nMy seed look like this:\n``` coffeescript\nasync = require('async')\nperson1  = null\nperson2  = null\nperson3  = null\nasync.series [\n  # clear any existing data\n  (done) => App.Person.destroy(done)\n  (done) => App.Project.destroy(done)\n# create users\n  (done) => App.Person.create\n    name:   \"person1\"\n    (error, record) =>\n      person1 = record\n      availabilities = []\n      assignments = []\n      done()\n  (done) => App.Person.create\n    name:   \"person2\"\n    (error, record) =>\n      person2 = record\n      availabilities = []\n      assignments = []\n      done()\n  (done) => App.Person.create\n    name:   \"person3\"\n    (error, record) =>\n      person3 = record\n      availabilities = []\n      assignments = []\n      done()\n], (error) =>\n  if error\n    console.log \"Something went wrong creating seed data... Try running again.\"\n  else\n    console.log \"Successfully created seed data!\"\n```\nDo you have any idea ?\n. Thanks it works :)\n. ",
    "jede": "Thanks! Really powerful stuff! Would probably be quite easy to make some helpers for this. Got it working with some modifications:\n``` coffeescript\napp/controllers/applicationController.coffee\n    #...\n    @render \"index\", locals: data: {users: users, posts: posts}\n\n```\n``` coffeescript\napp/views/layouts/application.coffee\nscript \"$(function(){ App.bootstrap(#{JSON.stringify(@data)}) })\"\n```\n``` coffeescript\napp/client/config/application.coffee\nclass App extends Tower.Application\n  # json data\n  bootstrap: (data) ->\n    @User.load(data.users) if data.users\n    @Post.load(data.posts) if data.posts\n```\n. Thanks! Really powerful stuff! Would probably be quite easy to make some helpers for this. Got it working with some modifications:\n``` coffeescript\napp/controllers/applicationController.coffee\n    #...\n    @render \"index\", locals: data: {users: users, posts: posts}\n\n```\n``` coffeescript\napp/views/layouts/application.coffee\nscript \"$(function(){ App.bootstrap(#{JSON.stringify(@data)}) })\"\n```\n``` coffeescript\napp/client/config/application.coffee\nclass App extends Tower.Application\n  # json data\n  bootstrap: (data) ->\n    @User.load(data.users) if data.users\n    @Post.load(data.posts) if data.posts\n```\n. ",
    "jamespeerless": "I can patch this up, makes sense to put it off.  For now I just avoided using a name that ended in ss =)\n. Also - do I need to explicitly define foreignKey fields in my schema or does defining the relationship handle that?\n. Thanks for the quick response.  I guess the use case I was considering was for scaffolding out an admin panel.  I may want to add a bunch of categories, groups, etc things that other models would belongTo.  When adding things manually via an admin panel it just makes sense to be able to select what it belongsTo in a select box.  Autocomplete idea sounds interesting too. I agree this use case isn't one that would appear in a user-facing ui that often.  \nI was going to try to add a form helper for doing this but I'd need to be able to reference the Model the resource belongsTo so I could use Model.All to retrieve all the possible models to pick from.  I just started looking at your source today, could you point me in the right direction?\n. Hey this is same issue as #30: https://github.com/viatropos/tower/issues/30\nFix suggested in that thread works for me but it's not part of repo yet.\n. I can patch this up, makes sense to put it off.  For now I just avoided using a name that ended in ss =)\n. Also - do I need to explicitly define foreignKey fields in my schema or does defining the relationship handle that?\n. Thanks for the quick response.  I guess the use case I was considering was for scaffolding out an admin panel.  I may want to add a bunch of categories, groups, etc things that other models would belongTo.  When adding things manually via an admin panel it just makes sense to be able to select what it belongsTo in a select box.  Autocomplete idea sounds interesting too. I agree this use case isn't one that would appear in a user-facing ui that often.  \nI was going to try to add a form helper for doing this but I'd need to be able to reference the Model the resource belongsTo so I could use Model.All to retrieve all the possible models to pick from.  I just started looking at your source today, could you point me in the right direction?\n. Hey this is same issue as #30: https://github.com/viatropos/tower/issues/30\nFix suggested in that thread works for me but it's not part of repo yet.\n. ",
    "contentfree": "Shouldn't Tower.Support.String use these? It appears to have it's own, non-_ methods for inflection and are used in important places (like Relations).\n. The documentation at http://towerjs.org/models says that resource.id should work (according to the section \"Getting and Setting Field Values\"). That section shows the user.get(\"firstName\") method as well as the getter/setter method user.firstName method. I'm finding that the getter/setter doesn't work. \nMy example:\ntest \"name\", ->\n      company.name.should.equal(\"Test Company\") # Fails with \"TypeError: Cannot read property 'should' of undefined\"\n      company.get(\"name\").should.equal(\"Test Company\") # Works\nSo are getters/setters supposed to be working currently?\n. It would be interesting to borrow Rails' convention and have the top-level index be the environment (instead of the adapter as it seems it currently is) and then have the store parsed from that when the configuration is loaded. If that isn't doable (yet) then I suppose the config/environments/* (currently empty files) could be used in combo with your example above. \n. Does Tower default to Mongo? I've commented out everything in databases.coffee and tried npm test which failed due to not being able to connect to a database on some port. \n. Are you ever on IRC? I've jumped on a few times to an empty channel. It might be a good chance to talk about implementing Rails' style DB config file \u2013 environment -> adapter \u2013 vs the current Tower way of adapter -> environments.\n. I like Rails' approach better: You specify the store per environment. You could then configure dev and test to use Memory and staging and production to use Mongo (or MySQL / Postgres eventually). This would all be in databases.coffee. I've got a check-in that removes the references to Mongo in the tests and defaults to the Memory store... need to submit the pull request.\n. My pull request includes design.io-javascripts as a devDependency.\n. Not sure why it wants to pull 63 commits... there are changes to some of them. Mostly references to Mongo in the tests.\n. I'm not following, I'm not talking about reloading files (though that will be useful). I'm talking about autoloading dependencies. Given:\n```\napp/models/baseModel.coffee\nclass App.BaseModel extends Tower.Model\n  # stuff\napp/models/address.coffee\nclass App.Address extends App.BaseModel\n  # Throws an error because App.BaseModel is not loaded yet and doesn't autoload when not found.\n```\nProbably needs a try/catch block that will catch the Module Not Found errors and look in the autoload paths for the Thing.\n. To make App.Address work in this case I have to prepend require \"#{Tower.root}/app/models/baseModel\" to it.\n. And please don't pay attention to the actual code above. It's a simplified case from my own app where the problem exists.\n. My database configuration update will have this change too, so I'm going to close this.\n. Some day I'll figure out the proper way to do github pull requests so it doesn't pull in the merges from upstream :)\n. Shouldn't Tower.Support.String use these? It appears to have it's own, non-_ methods for inflection and are used in important places (like Relations).\n. The documentation at http://towerjs.org/models says that resource.id should work (according to the section \"Getting and Setting Field Values\"). That section shows the user.get(\"firstName\") method as well as the getter/setter method user.firstName method. I'm finding that the getter/setter doesn't work. \nMy example:\ntest \"name\", ->\n      company.name.should.equal(\"Test Company\") # Fails with \"TypeError: Cannot read property 'should' of undefined\"\n      company.get(\"name\").should.equal(\"Test Company\") # Works\nSo are getters/setters supposed to be working currently?\n. It would be interesting to borrow Rails' convention and have the top-level index be the environment (instead of the adapter as it seems it currently is) and then have the store parsed from that when the configuration is loaded. If that isn't doable (yet) then I suppose the config/environments/* (currently empty files) could be used in combo with your example above. \n. Does Tower default to Mongo? I've commented out everything in databases.coffee and tried npm test which failed due to not being able to connect to a database on some port. \n. Are you ever on IRC? I've jumped on a few times to an empty channel. It might be a good chance to talk about implementing Rails' style DB config file \u2013 environment -> adapter \u2013 vs the current Tower way of adapter -> environments.\n. I like Rails' approach better: You specify the store per environment. You could then configure dev and test to use Memory and staging and production to use Mongo (or MySQL / Postgres eventually). This would all be in databases.coffee. I've got a check-in that removes the references to Mongo in the tests and defaults to the Memory store... need to submit the pull request.\n. My pull request includes design.io-javascripts as a devDependency.\n. Not sure why it wants to pull 63 commits... there are changes to some of them. Mostly references to Mongo in the tests.\n. I'm not following, I'm not talking about reloading files (though that will be useful). I'm talking about autoloading dependencies. Given:\n```\napp/models/baseModel.coffee\nclass App.BaseModel extends Tower.Model\n  # stuff\napp/models/address.coffee\nclass App.Address extends App.BaseModel\n  # Throws an error because App.BaseModel is not loaded yet and doesn't autoload when not found.\n```\nProbably needs a try/catch block that will catch the Module Not Found errors and look in the autoload paths for the Thing.\n. To make App.Address work in this case I have to prepend require \"#{Tower.root}/app/models/baseModel\" to it.\n. And please don't pay attention to the actual code above. It's a simplified case from my own app where the problem exists.\n. My database configuration update will have this change too, so I'm going to close this.\n. Some day I'll figure out the proper way to do github pull requests so it doesn't pull in the merges from upstream :)\n. ",
    "jameswyse": "Ah I see this seems to be the same issue reported here: #30\nSorry for the duplicate!\n. Ah I see this seems to be the same issue reported here: #30\nSorry for the duplicate!\n. ",
    "goldibex": "I would just like to add that Tower rocks, by the way.\n. I would just like to add that Tower rocks, by the way.\n. ",
    "kynan": "I don't understand how to globally change the store. At which point would I Tower.Model.store(Tower.Store.Memory)?\n. I don't understand how to globally change the store. At which point would I Tower.Model.store(Tower.Store.Memory)?\n. ",
    "avastou": "I need help to fix this bug.\nSomeone already corrected or could help me?\n. I do not see how to use it.\nIs this correct:\ncoffee\n    item = @render \"shared/application/_tweet\", locals: tweet\n    $(item).hide().prependTo(\".tweet-container\").fadeIn(1500);\nbecause it seems not to work\n. it's in my client side controller, i use this : \ncoffee\nitem = @render \"shared/application/_tweet\", locals: {tweet: tweet}\nbut this does not work.\n. thanks for help.\n. i have a small probleme with :\nclass Tower.Auth.Passport.Local.Routes extends Tower.HTTP.Route\n  constructor: (passport) ->\n    @initialize passport\n    console.log passport\ninitialize: (passport) ->\n    @post \"/auth/login\", passport.authenticate(\"local\", failureRedirect: \"/login\"), (request, response) ->\n      response.redirect \"/\"\nError:\nTypeError: Object # has no method 'post'\nAND is it possible to do something like this in the models ( user.verifyPassword(password) ) ?\n  global.App.User.findOne\n    username: username\n  , (err, user) ->\n    return done(null, false)  unless user.verifyPassword(password)\n. I got to run with this sample code base.\nI do not know if this is the best practice, but it works.\nclient side controller\nclass App.ApplicationController extends Tower.Controller\n    #ui event\n    @on \"click .btnSend\", \"sendMessage\"\n```\nsocket.io event\n@on \"displayMessage\", \"displayMessage\", type: 'socket'\nsendMessage: (event) ->\n    console.log(\"add message with socket.io\")\n    message = frames[0].document.body.innerHTML\n    socket = io.connect()\n    room = socket.of('/Applications')\n    room.emit(\"addMessage\", { msg: message })\ndisplayMessage: (event)->\n    console.log(\"SOCKET RECEIVED: SHow MESSAGE\")\n    message =  @params.msg\n    console.log message\n```\nserver side controller\nclass App.ApplicationController extends Tower.Controller\n    #socket.io event\n    @on \"addMessage\", \"addMessage\", type: 'socket'\naddMessage: (event)->\n    console.log \"ADD MESSAGE\"\n    message = @params.msg\n    # server side socket, add in bdd and notify\n    socket = Tower.Application.instance().io\n    room = socket.of('/Applications')\n    room.emit(\"displayMessage\", { msg: message })\n. any suggestion for use session in socket.io ?\nThanks.\n. thanks @sebastianhoitz.\nI'll post a few lines of code soon to illustrate concretely the use of socket with towerjs\n. I have the same result when I use the @belongsTo\nAny suggestion?\n. //--- lib/Tower/model/relation.js\nline 133 - if (relation.targetType === this.ownerType) {\n         + if (Tower.namespaced(relation.targetType) === this.ownerType) {\nwork for me but I do not know the possible consequences ..\n. The above code generates an error:\ncoffee\n  TypeError: Object #<Mongo> has no method 'get'\nI did not find the solution, an idea?\nuntil I use this code that works\n``` coffee\nconfig/application.coffee\nclass App extends Tower.Application\n  @configure ->\n    #../...\n    mongostore = _.extend Tower.Store.MongoDB.config[Tower.env]\n    mongostore.db = mongostore.name\n    delete mongostore.name\n#@sessionStore = new Tower.Store.Mongo()\nconnect = require('connect')\nMongoStore = require('connect-mongo')(connect)\n@sessionStore = new MongoStore(mongostore)\n\n@use \"session\",\n  secret: Tower.config.session.secret\n  #cookie:\n    #domain: \".#{Tower.cookieDomain}\"\n  store: @sessionStore\n\n```\n. I do not see how to use it.\nIs this correct:\ncoffee\n    item = @render \"shared/application/_tweet\", locals: tweet\n    $(item).hide().prependTo(\".tweet-container\").fadeIn(1500);\nbecause it seems not to work\n. this does not work, I think I know why.\nFile vendor/tower.js is not updated, it does not contain the commits (tower is installed with npm install tower - version 0.4.0-13).\nHow to update this ?\nOne more, I think this  (tower.js - line 6819): \n\u0300\nresult = this.constructor.cache[cachePath] || require('fs').readFileSync(path, 'utf-8').toString();\nrequire(\"fs\"); not working on client side\n. I need help to fix this bug.\nSomeone already corrected or could help me?\n. I do not see how to use it.\nIs this correct:\ncoffee\n    item = @render \"shared/application/_tweet\", locals: tweet\n    $(item).hide().prependTo(\".tweet-container\").fadeIn(1500);\nbecause it seems not to work\n. it's in my client side controller, i use this : \ncoffee\nitem = @render \"shared/application/_tweet\", locals: {tweet: tweet}\nbut this does not work.\n. thanks for help.\n. i have a small probleme with :\nclass Tower.Auth.Passport.Local.Routes extends Tower.HTTP.Route\n  constructor: (passport) ->\n    @initialize passport\n    console.log passport\ninitialize: (passport) ->\n    @post \"/auth/login\", passport.authenticate(\"local\", failureRedirect: \"/login\"), (request, response) ->\n      response.redirect \"/\"\nError:\nTypeError: Object # has no method 'post'\nAND is it possible to do something like this in the models ( user.verifyPassword(password) ) ?\n  global.App.User.findOne\n    username: username\n  , (err, user) ->\n    return done(null, false)  unless user.verifyPassword(password)\n. I got to run with this sample code base.\nI do not know if this is the best practice, but it works.\nclient side controller\nclass App.ApplicationController extends Tower.Controller\n    #ui event\n    @on \"click .btnSend\", \"sendMessage\"\n```\nsocket.io event\n@on \"displayMessage\", \"displayMessage\", type: 'socket'\nsendMessage: (event) ->\n    console.log(\"add message with socket.io\")\n    message = frames[0].document.body.innerHTML\n    socket = io.connect()\n    room = socket.of('/Applications')\n    room.emit(\"addMessage\", { msg: message })\ndisplayMessage: (event)->\n    console.log(\"SOCKET RECEIVED: SHow MESSAGE\")\n    message =  @params.msg\n    console.log message\n```\nserver side controller\nclass App.ApplicationController extends Tower.Controller\n    #socket.io event\n    @on \"addMessage\", \"addMessage\", type: 'socket'\naddMessage: (event)->\n    console.log \"ADD MESSAGE\"\n    message = @params.msg\n    # server side socket, add in bdd and notify\n    socket = Tower.Application.instance().io\n    room = socket.of('/Applications')\n    room.emit(\"displayMessage\", { msg: message })\n. any suggestion for use session in socket.io ?\nThanks.\n. thanks @sebastianhoitz.\nI'll post a few lines of code soon to illustrate concretely the use of socket with towerjs\n. I have the same result when I use the @belongsTo\nAny suggestion?\n. //--- lib/Tower/model/relation.js\nline 133 - if (relation.targetType === this.ownerType) {\n         + if (Tower.namespaced(relation.targetType) === this.ownerType) {\nwork for me but I do not know the possible consequences ..\n. The above code generates an error:\ncoffee\n  TypeError: Object #<Mongo> has no method 'get'\nI did not find the solution, an idea?\nuntil I use this code that works\n``` coffee\nconfig/application.coffee\nclass App extends Tower.Application\n  @configure ->\n    #../...\n    mongostore = _.extend Tower.Store.MongoDB.config[Tower.env]\n    mongostore.db = mongostore.name\n    delete mongostore.name\n#@sessionStore = new Tower.Store.Mongo()\nconnect = require('connect')\nMongoStore = require('connect-mongo')(connect)\n@sessionStore = new MongoStore(mongostore)\n\n@use \"session\",\n  secret: Tower.config.session.secret\n  #cookie:\n    #domain: \".#{Tower.cookieDomain}\"\n  store: @sessionStore\n\n```\n. I do not see how to use it.\nIs this correct:\ncoffee\n    item = @render \"shared/application/_tweet\", locals: tweet\n    $(item).hide().prependTo(\".tweet-container\").fadeIn(1500);\nbecause it seems not to work\n. this does not work, I think I know why.\nFile vendor/tower.js is not updated, it does not contain the commits (tower is installed with npm install tower - version 0.4.0-13).\nHow to update this ?\nOne more, I think this  (tower.js - line 6819): \n\u0300\nresult = this.constructor.cache[cachePath] || require('fs').readFileSync(path, 'utf-8').toString();\nrequire(\"fs\"); not working on client side\n. ",
    "hadesgames": "I have run in to the same problem. \nThe problem seems to be that everyauth.password wants to render the login view (and there is no way to overide this)\nSo everyauth renders the view directly without passing through tower. The .coffee files that tower uses are actualy .coffeekup files and thus there is no engine installed to render .coffee files\nI though of two solutions for this problem:\n1. Rename your login views from .coffee to .coffeekup. This worked for me but the files had to be in /views forlder not /app/views. One workaround for this is to have the path to the files something  like ../app/views/login.coffeekup\n2. Overload the displayLogin function which is the actual funtion that calls the rendering. The problem here is that I wasn't able to find out how to render a view, with tower, outside of a Controller. Some documentation for this would be extremely useful. \n. I have run in to the same problem. \nThe problem seems to be that everyauth.password wants to render the login view (and there is no way to overide this)\nSo everyauth renders the view directly without passing through tower. The .coffee files that tower uses are actualy .coffeekup files and thus there is no engine installed to render .coffee files\nI though of two solutions for this problem:\n1. Rename your login views from .coffee to .coffeekup. This worked for me but the files had to be in /views forlder not /app/views. One workaround for this is to have the path to the files something  like ../app/views/login.coffeekup\n2. Overload the displayLogin function which is the actual funtion that calls the rendering. The problem here is that I wasn't able to find out how to render a view, with tower, outside of a Controller. Some documentation for this would be extremely useful. \n. ",
    "marcinrogacki": "I done something like this to force .coffee extension:\n``` coffeescript\nconfig/application.coffee\neveryauth = require \"everyauth\"\ncoffeekup = require \"tower/node_modules/coffeekup\"\nclass App extends Tower.Application  \n  @configure ->\n    ...snip...\n    @server.set 'views', './app/views' # everyauth use this path\n    @server.register \".coffee\", coffeekup.adapters.express # register engine with given extension \n    @server.set \"view engine\", 'coffeekup' # view engine for everyauth\n    everyauth.helpExpress @server  # register view helper in express\n    @use everyauth.middleware()\n    @use Tower.Middleware.Router\nmodule.exports = global.App = new App\n```\nBut as hadesgames said, everyauth renders the view directly without passing through tower, giving another issue:\nError: failed to locate view \"layout\"\nI can add next configuration line:\n@server.set \"view options\", { layout: Tower.publicPath + \"/../app/views/layouts/application.coffee\" }\nand the next issue:\nTemplateError: Error rendering /home/marcin/Pulpit/towerApp/public/../app/views/layouts/application.coffee: failed to locate view \"shared/meta\"\nSo it looks pointless, cuz it's going to creating separate view engine.\n. I noticed that Wiki Has-one looks outdated so I tried example from model/relations.coffee#L14\nBut it also does not works, giving error:\nTypeError: Object #<error> has no method 'createFacebookUser'\nSo I tried method from Has-Many model/relations.coffee#L35:\nuser.facebookUser().create()\nIt saves record, but without id reference (userId: null):\n```\nmongo query\ndb.facebookUsers.find({})\n{ \"fbId\" : , \"userId\" : null, ...snip....  }\n```\nSomeone uses it with successful? I'll be grateful for answer.\n. Thank you for answer and app demo :)\nI also set up hasMany feature, but I have problem with hasOne. HasMany creates id reference, but hasOne doesn't.  I have checked towerjs source and it looks like hasOne is unimplemented: hasOne vs hasMany\n. Yes, I do. Oh, I forgot about ur demo API. Tomorrow I'll check it. If it still fails, I'll push some my demo :)\ngreets\n. Ok, it does not work. I forked your app demo and I added displaying post owner(s)\nhttps://github.com/robak1987/demoApp.git\nCodes of getting parent of post:\n@post.user().all (error, @users) => # fetchs all users in db\n@post.user().first (error, @user) => # fetchs first user of all users in db\n@post.user().last (error, @user) => # to more funny it fetch also FIRST user of all users in db :)\n. Yes, also I did this workaround. Maybe just this feature is not yet refactored (so how you got the answer here Stackoverflow on-to-many. Anyway I posted issue to others. Thanks for support :)\n. I done something like this to force .coffee extension:\n``` coffeescript\nconfig/application.coffee\neveryauth = require \"everyauth\"\ncoffeekup = require \"tower/node_modules/coffeekup\"\nclass App extends Tower.Application  \n  @configure ->\n    ...snip...\n    @server.set 'views', './app/views' # everyauth use this path\n    @server.register \".coffee\", coffeekup.adapters.express # register engine with given extension \n    @server.set \"view engine\", 'coffeekup' # view engine for everyauth\n    everyauth.helpExpress @server  # register view helper in express\n    @use everyauth.middleware()\n    @use Tower.Middleware.Router\nmodule.exports = global.App = new App\n```\nBut as hadesgames said, everyauth renders the view directly without passing through tower, giving another issue:\nError: failed to locate view \"layout\"\nI can add next configuration line:\n@server.set \"view options\", { layout: Tower.publicPath + \"/../app/views/layouts/application.coffee\" }\nand the next issue:\nTemplateError: Error rendering /home/marcin/Pulpit/towerApp/public/../app/views/layouts/application.coffee: failed to locate view \"shared/meta\"\nSo it looks pointless, cuz it's going to creating separate view engine.\n. I noticed that Wiki Has-one looks outdated so I tried example from model/relations.coffee#L14\nBut it also does not works, giving error:\nTypeError: Object #<error> has no method 'createFacebookUser'\nSo I tried method from Has-Many model/relations.coffee#L35:\nuser.facebookUser().create()\nIt saves record, but without id reference (userId: null):\n```\nmongo query\ndb.facebookUsers.find({})\n{ \"fbId\" : , \"userId\" : null, ...snip....  }\n```\nSomeone uses it with successful? I'll be grateful for answer.\n. Thank you for answer and app demo :)\nI also set up hasMany feature, but I have problem with hasOne. HasMany creates id reference, but hasOne doesn't.  I have checked towerjs source and it looks like hasOne is unimplemented: hasOne vs hasMany\n. Yes, I do. Oh, I forgot about ur demo API. Tomorrow I'll check it. If it still fails, I'll push some my demo :)\ngreets\n. Ok, it does not work. I forked your app demo and I added displaying post owner(s)\nhttps://github.com/robak1987/demoApp.git\nCodes of getting parent of post:\n@post.user().all (error, @users) => # fetchs all users in db\n@post.user().first (error, @user) => # fetchs first user of all users in db\n@post.user().last (error, @user) => # to more funny it fetch also FIRST user of all users in db :)\n. Yes, also I did this workaround. Maybe just this feature is not yet refactored (so how you got the answer here Stackoverflow on-to-many. Anyway I posted issue to others. Thanks for support :)\n. ",
    "Akkuma": "I'm having an interesting problem getting passport to work. I verified I'm not an idiot by getting express installed, running, and using the same quick passport test to limit it to something within Tower.\nThe actual error:\n/[appName]/node_modules/passport-google/node_modules/passport-openid/node_modules/openid/openid.js:333\n  provider.endpoint = service.uri;\n                             ^\nTypeError: Cannot read property 'uri' of undefined\n  at /[appName]/node_modules/passport-google/node_modules/passport-openid/node_modules/openid/openid.js:333:32\n  at /[appName]/node_modules/passport-google/node_modules/passport-openid/node_modules/openid/openid.js:477:25\n  at /[appName]/node_modules/passport-google/node_modules/passport-openid/node_modules/openid/openid.js:207:9\n  at IncomingMessage.<anonymous> (/[appName]/node_modules/passport-google/node_modules/passport-openid/node_modules/openid/openid.js:211:32)\n  at IncomingMessage.emit (events.js:88:20)\n  at HTTPParser.onMessageComplete (http.js:137:23)\n  at CleartextStream.ondata (http.js:1150:24)\n  at CleartextStream._push (tls.js:375:27)\n  at SecurePair.cycle (tls.js:734:20)\n  at EncryptedStream.write (tls.js:130:13)\nThe reason this is happening is that within openid there is the following code:\n``` javascript\n  for(var s in services)\n  {\n    var service = services[s];\n    var provider = {};\nprovider.endpoint = service.uri;\n\n```\nThe for loop is picking up isEnumerable, since there is no hasOwnProperty check and then throws an error. I'm not sure what is adding this or where it is coming from, so I figured I'd raise it here. At the same time it seems that node-openid shouldn't be using a for in on an Array anyway.\nI submitted a patch/pull request to node-openid for their side of the problem, which resolved everything on my end, but perhaps TowerJS should take a look into the isEnumerable portion as well.\n. @kristianmandrup Yes, the patch I submitted resolved the issues I had with Tower when it comes to Google OpenID authentication. I'm sure it would resolve it for the others I'll be adding soon. \n. It looks like I found another case where node-openid was using for in when they really shouldn't have been. Aside from all the fixes I made, I found I can't get the Steam OpenID working for me.\n. @kristianmandrup Yes that is correct. I verified it is not working in a simple Express app as well, so the issue doesn't stem from Tower.\nAdditionally, I've gotten a fairly clean way to do authentication while using the Routes without any sort of framework required. It probably is the simplest and most elegant solution right now.\ncoffeescript\n  @match '/auth/:provider', to: 'application#auth'\nInside of my Application Controller:\ncoffeescript\n  auth: ->\n    passport.authenticate(@params.provider) @request, @response, -> console.log arguments\n. As requested a \"full\" passport setup example https://gist.github.com/2429021\n. I come from a ASP.NET background, so the way we handled authorization where I worked was through an Authorization Attribute. Basically, you threw it onto the controller actions that required authorization .\nIt might almost be worth it for someone to try porting CanCan to node, especially with the goal of this framework to largely replicate RoR and the ideas it has like you threw out there seems to jive well with how authorization could work.\n. I'm having an interesting problem getting passport to work. I verified I'm not an idiot by getting express installed, running, and using the same quick passport test to limit it to something within Tower.\nThe actual error:\n/[appName]/node_modules/passport-google/node_modules/passport-openid/node_modules/openid/openid.js:333\n  provider.endpoint = service.uri;\n                             ^\nTypeError: Cannot read property 'uri' of undefined\n  at /[appName]/node_modules/passport-google/node_modules/passport-openid/node_modules/openid/openid.js:333:32\n  at /[appName]/node_modules/passport-google/node_modules/passport-openid/node_modules/openid/openid.js:477:25\n  at /[appName]/node_modules/passport-google/node_modules/passport-openid/node_modules/openid/openid.js:207:9\n  at IncomingMessage.<anonymous> (/[appName]/node_modules/passport-google/node_modules/passport-openid/node_modules/openid/openid.js:211:32)\n  at IncomingMessage.emit (events.js:88:20)\n  at HTTPParser.onMessageComplete (http.js:137:23)\n  at CleartextStream.ondata (http.js:1150:24)\n  at CleartextStream._push (tls.js:375:27)\n  at SecurePair.cycle (tls.js:734:20)\n  at EncryptedStream.write (tls.js:130:13)\nThe reason this is happening is that within openid there is the following code:\n``` javascript\n  for(var s in services)\n  {\n    var service = services[s];\n    var provider = {};\nprovider.endpoint = service.uri;\n\n```\nThe for loop is picking up isEnumerable, since there is no hasOwnProperty check and then throws an error. I'm not sure what is adding this or where it is coming from, so I figured I'd raise it here. At the same time it seems that node-openid shouldn't be using a for in on an Array anyway.\nI submitted a patch/pull request to node-openid for their side of the problem, which resolved everything on my end, but perhaps TowerJS should take a look into the isEnumerable portion as well.\n. @kristianmandrup Yes, the patch I submitted resolved the issues I had with Tower when it comes to Google OpenID authentication. I'm sure it would resolve it for the others I'll be adding soon. \n. It looks like I found another case where node-openid was using for in when they really shouldn't have been. Aside from all the fixes I made, I found I can't get the Steam OpenID working for me.\n. @kristianmandrup Yes that is correct. I verified it is not working in a simple Express app as well, so the issue doesn't stem from Tower.\nAdditionally, I've gotten a fairly clean way to do authentication while using the Routes without any sort of framework required. It probably is the simplest and most elegant solution right now.\ncoffeescript\n  @match '/auth/:provider', to: 'application#auth'\nInside of my Application Controller:\ncoffeescript\n  auth: ->\n    passport.authenticate(@params.provider) @request, @response, -> console.log arguments\n. As requested a \"full\" passport setup example https://gist.github.com/2429021\n. I come from a ASP.NET background, so the way we handled authorization where I worked was through an Authorization Attribute. Basically, you threw it onto the controller actions that required authorization .\nIt might almost be worth it for someone to try porting CanCan to node, especially with the goal of this framework to largely replicate RoR and the ideas it has like you threw out there seems to jive well with how authorization could work.\n. ",
    "vjsingh": "Making Tower more modular would definitely make it more useful in the future, I think. Especially since it already has so many features.\nAbout the 2 different version of requiring, they seem roughly equivalent to me. If anything I like the second one more, although if there end up being lots of optional requires then the first one is probably neater.\nThat said, its usually not a huge issue to just set up a mongoDB database, so I agree this isn't the most urgent issue.\n. Or, only initialize mongoDB if the user adds it in databases.coffee? So removing all of databases.coffee would prevent mongoDB from being initialized, and you could default to using in-memory store.\n. design.io wasn't working (even after running design.io start and then watch, it didn't update my coffee files).\nI'll try and get it to work, fix the patch and resubmit it.\n. Mac... design.io is working for my own Tower app, but not for the tower repo.\nSpecifically, in the top level tower folder:\ndesign.io start&\ndesign.io watch (says hooks are ready)\nedit and save src/tower/view/rendering/coffee\nlib/tower/view/rendering.js is not updated\n. I'd try and fix my pull request except I can't get design.io working\n. mac 10.6.8, npm 1.1.0-beta-4, node 0.6.6\nIf it helps, I put a console log in the 'write' function in Watchfile, and its never executed\n. ruby 1.8.7 (2010-01-10 patchlevel 249) [universal-darwin10.0]\nI don't have RVM installed, and v0.6.6 appears to be the latest for node,\naccording to brew?\nAnd I re-installed design.io, and it still doesnt work :(\noutput (no output from design.io watch command):\ndesign.io start\ninfo: socket.io started\ninfo:  Name: design.io-server     hook::listening\n Type: hook            Data: 5000\ninfo:  Name: design.io-server     hook::started\n Type: hook            Data: 5000\ninfo:  Name: design.io-server     hook::ready\n Type: hook            Data:\n{\"name\":\"design.io-server\",\"type\":\"hook\",\"pkginfo\" ...\n[Mon, 23 Apr 2012 20:44:28 GMT] INFO Design.io started on port 4181\nOn Mon, Apr 23, 2012 at 4:29 PM, Lance Pollard <\nreply@reply.github.com\n\nwrote:\n@vjsingh hmmm..., yeah can you show me the terminal output when you start\nit up?\nWhat version of ruby and RVM are you using?\nAlso, try upgrading npm to the latest and reinstalling design.io?  It\nshould work.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/viatropos/tower/issues/122#issuecomment-5290959\n. Nice, I missed that. I'll close the issue\n. Making Tower more modular would definitely make it more useful in the future, I think. Especially since it already has so many features.\n\nAbout the 2 different version of requiring, they seem roughly equivalent to me. If anything I like the second one more, although if there end up being lots of optional requires then the first one is probably neater.\nThat said, its usually not a huge issue to just set up a mongoDB database, so I agree this isn't the most urgent issue.\n. Or, only initialize mongoDB if the user adds it in databases.coffee? So removing all of databases.coffee would prevent mongoDB from being initialized, and you could default to using in-memory store.\n. design.io wasn't working (even after running design.io start and then watch, it didn't update my coffee files).\nI'll try and get it to work, fix the patch and resubmit it.\n. Mac... design.io is working for my own Tower app, but not for the tower repo.\nSpecifically, in the top level tower folder:\ndesign.io start&\ndesign.io watch (says hooks are ready)\nedit and save src/tower/view/rendering/coffee\nlib/tower/view/rendering.js is not updated\n. I'd try and fix my pull request except I can't get design.io working\n. mac 10.6.8, npm 1.1.0-beta-4, node 0.6.6\nIf it helps, I put a console log in the 'write' function in Watchfile, and its never executed\n. ruby 1.8.7 (2010-01-10 patchlevel 249) [universal-darwin10.0]\nI don't have RVM installed, and v0.6.6 appears to be the latest for node,\naccording to brew?\nAnd I re-installed design.io, and it still doesnt work :(\noutput (no output from design.io watch command):\ndesign.io start\ninfo: socket.io started\ninfo:  Name: design.io-server     hook::listening\n Type: hook            Data: 5000\ninfo:  Name: design.io-server     hook::started\n Type: hook            Data: 5000\ninfo:  Name: design.io-server     hook::ready\n Type: hook            Data:\n{\"name\":\"design.io-server\",\"type\":\"hook\",\"pkginfo\" ...\n[Mon, 23 Apr 2012 20:44:28 GMT] INFO Design.io started on port 4181\nOn Mon, Apr 23, 2012 at 4:29 PM, Lance Pollard <\nreply@reply.github.com\n\nwrote:\n@vjsingh hmmm..., yeah can you show me the terminal output when you start\nit up?\nWhat version of ruby and RVM are you using?\nAlso, try upgrading npm to the latest and reinstalling design.io?  It\nshould work.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/viatropos/tower/issues/122#issuecomment-5290959\n. Nice, I missed that. I'll close the issue\n. \n",
    "rafaelmotta": "News about this issue?\n. News about this issue?\n. ",
    "sean": "Any updates on this issue? It's unfortunate that creating a new Tower.js app and then following the README results in this:\n```$ npm start\n\nlaunchpad@0.0.1 start /Users/sean/Projects/launchpad\nnode server.js -e production\n\npath.existsSync is now called fs.existsSync.\n   info  - socket.io started\n[Mon, 30 Jul 2012 01:09:53 GMT] INFO Tower production server listening on port 3000\n/Users/sean/Projects/launchpad/node_modules/tower/lib/tower/server/store/mongodb/database.js:39\n            throw error;\n                  ^\nError: failed to connect to [127.0.0.1:27017]\n    at Server.connect.connectionPool.on.server._serverState (/Users/sean/Projects/launchpad/node_modules/mongodb/lib/mongodb/connection/server.js:473:73)\n    at EventEmitter.emit (events.js:115:20)\n    at connection.on._self._poolState (/Users/sean/Projects/launchpad/node_modules/mongodb/lib/mongodb/connection/connection_pool.js:92:15)\n    at EventEmitter.emit (events.js:91:17)\n    at Socket.errorHandler (/Users/sean/Projects/launchpad/node_modules/mongodb/lib/mongodb/connection/connection.js:387:10)\n    at Socket.EventEmitter.emit (events.js:88:17)\n    at Socket._destroy.self.errorEmitted (net.js:329:14)\n    at process.startup.processNextTick.process._tickCallback (node.js:244:9)\nnpm ERR! launchpad@0.0.1 start: node server.js -e production\nnpm ERR! sh \"-c\" \"node server.js -e production\" failed with 1\nnpm ERR! \nnpm ERR! Failed at the launchpad@0.0.1 start script.\nnpm ERR! This is most likely a problem with the launchpad package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     node server.js -e production\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls launchpad\nnpm ERR! There is likely additional logging output above.\nnpm ERR! System Darwin 11.4.0\nnpm ERR! command \"node\" \"/usr/local/bin/npm\" \"start\"\nnpm ERR! cwd /Users/sean/Projects/launchpad\nnpm ERR! node -v v0.8.3\nnpm ERR! npm -v 1.1.43\nnpm ERR! code ELIFECYCLE\nnpm ERR! stack Error: launchpad@0.0.1 start: node server.js -e production\nnpm ERR! stack sh \"-c\" \"node server.js -e production\" failed with 1\nnpm ERR! stack     at ChildProcess. (/usr/local/lib/node_modules/npm/lib/utils/exec.js:56:20)\nnpm ERR! stack     at ChildProcess.EventEmitter.emit (events.js:91:17)\nnpm ERR! stack     at Process._handle.onexit (child_process.js:674:10)\nnpm ERR! \nnpm ERR! Additional logging details can be found in:\nnpm ERR!     /Users/sean/Projects/launchpad/npm-debug.log\nnpm ERR! not ok code 0```\n. Excellent! Thank you.\n. Any updates on this issue? It's unfortunate that creating a new Tower.js app and then following the README results in this:\n```$ npm start\n\nlaunchpad@0.0.1 start /Users/sean/Projects/launchpad\nnode server.js -e production\n\npath.existsSync is now called fs.existsSync.\n   info  - socket.io started\n[Mon, 30 Jul 2012 01:09:53 GMT] INFO Tower production server listening on port 3000\n/Users/sean/Projects/launchpad/node_modules/tower/lib/tower/server/store/mongodb/database.js:39\n            throw error;\n                  ^\nError: failed to connect to [127.0.0.1:27017]\n    at Server.connect.connectionPool.on.server._serverState (/Users/sean/Projects/launchpad/node_modules/mongodb/lib/mongodb/connection/server.js:473:73)\n    at EventEmitter.emit (events.js:115:20)\n    at connection.on._self._poolState (/Users/sean/Projects/launchpad/node_modules/mongodb/lib/mongodb/connection/connection_pool.js:92:15)\n    at EventEmitter.emit (events.js:91:17)\n    at Socket.errorHandler (/Users/sean/Projects/launchpad/node_modules/mongodb/lib/mongodb/connection/connection.js:387:10)\n    at Socket.EventEmitter.emit (events.js:88:17)\n    at Socket._destroy.self.errorEmitted (net.js:329:14)\n    at process.startup.processNextTick.process._tickCallback (node.js:244:9)\nnpm ERR! launchpad@0.0.1 start: node server.js -e production\nnpm ERR! sh \"-c\" \"node server.js -e production\" failed with 1\nnpm ERR! \nnpm ERR! Failed at the launchpad@0.0.1 start script.\nnpm ERR! This is most likely a problem with the launchpad package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     node server.js -e production\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls launchpad\nnpm ERR! There is likely additional logging output above.\nnpm ERR! System Darwin 11.4.0\nnpm ERR! command \"node\" \"/usr/local/bin/npm\" \"start\"\nnpm ERR! cwd /Users/sean/Projects/launchpad\nnpm ERR! node -v v0.8.3\nnpm ERR! npm -v 1.1.43\nnpm ERR! code ELIFECYCLE\nnpm ERR! stack Error: launchpad@0.0.1 start: node server.js -e production\nnpm ERR! stack sh \"-c\" \"node server.js -e production\" failed with 1\nnpm ERR! stack     at ChildProcess. (/usr/local/lib/node_modules/npm/lib/utils/exec.js:56:20)\nnpm ERR! stack     at ChildProcess.EventEmitter.emit (events.js:91:17)\nnpm ERR! stack     at Process._handle.onexit (child_process.js:674:10)\nnpm ERR! \nnpm ERR! Additional logging details can be found in:\nnpm ERR!     /Users/sean/Projects/launchpad/npm-debug.log\nnpm ERR! not ok code 0```\n. Excellent! Thank you.\n. ",
    "ravidsrk": "Thanks for the quick reply. It worked like an chram.\nEagerly waiting to contribute something to this project.\nThis project is just awesome.\n. Thanks for the quick reply. It worked like an chram.\nEagerly waiting to contribute something to this project.\nThis project is just awesome.\n. ",
    "aniston": "npm cache clean -g\nThanks, this worked for me too, had a similar problem, though not related to 'tower'\n. npm cache clean -g\nThanks, this worked for me too, had a similar problem, though not related to 'tower'\n. ",
    "au-phiware": "From memory, there were no errors, but I'll double check (I was burning the midnight oil).\nI did inspect the CSS rules applied to the navbar and compare the two, and production simply appeared to be missing some rules, eg. there was no background-color.\nWhat's doing the CSS compression? Should I be updating that lib?\n(Thanks for the quick reply.)\n. Ok, to answer my own question: mint.yui\nI see that public/assets/vendor.css is passed through mint.yui to produce the final vendor stylesheet. By inspecting these two files I see that none of the rules after line 1171 made it into the final product. Removing that line resolves my problem... I'll make a pull request.\nAlso, this brings the compression of vendor.css down to 15.8%, which is way more reasonable for css.\n. Ok, so I made https://github.com/twitter/bootstrap/pull/3068 which fixes the issue ~~and added a test for yuicommpressor: https://github.com/stoyan/yuicompressor/pull/4~~\n. Ok, there's clearly a lot of history that I'm missing here but here goes...\nTower depends on mint.js (of the same author, @viatropos). Mint.js appears to use cssmin function from @stoyan's fork of yuicompressor (last updated 10 months ago). (BTW this fork breaks the tests.) @yui has a 12 month old pull request making the js port node compatible. Considering, that @yui's js port is actually the most recent (7 months old) and that pull request has id=1 and not yet been closed, it appears that @yui has no interest in the node community :(\nAt risk of being shot down, I propose a new node compatible port of cssmin that meets one simply goal: be forward compatible with future yuicompressor releases. See my fork of yuicompressor, which contains a wrapper for node.js. I've made a pull request to include this into mint.js: Update yuicompressor code.\nA good alternative would be to use @cloudhead's version of cssmin, which simply adds an export for the compressor object. This means a minor change to mint.js, also.\n. It would seem that I spoke too soon...\nhttp://search.npmjs.org/#/css-compressor\n. From memory, there were no errors, but I'll double check (I was burning the midnight oil).\nI did inspect the CSS rules applied to the navbar and compare the two, and production simply appeared to be missing some rules, eg. there was no background-color.\nWhat's doing the CSS compression? Should I be updating that lib?\n(Thanks for the quick reply.)\n. Ok, to answer my own question: mint.yui\nI see that public/assets/vendor.css is passed through mint.yui to produce the final vendor stylesheet. By inspecting these two files I see that none of the rules after line 1171 made it into the final product. Removing that line resolves my problem... I'll make a pull request.\nAlso, this brings the compression of vendor.css down to 15.8%, which is way more reasonable for css.\n. Ok, so I made https://github.com/twitter/bootstrap/pull/3068 which fixes the issue ~~and added a test for yuicommpressor: https://github.com/stoyan/yuicompressor/pull/4~~\n. Ok, there's clearly a lot of history that I'm missing here but here goes...\nTower depends on mint.js (of the same author, @viatropos). Mint.js appears to use cssmin function from @stoyan's fork of yuicompressor (last updated 10 months ago). (BTW this fork breaks the tests.) @yui has a 12 month old pull request making the js port node compatible. Considering, that @yui's js port is actually the most recent (7 months old) and that pull request has id=1 and not yet been closed, it appears that @yui has no interest in the node community :(\nAt risk of being shot down, I propose a new node compatible port of cssmin that meets one simply goal: be forward compatible with future yuicompressor releases. See my fork of yuicompressor, which contains a wrapper for node.js. I've made a pull request to include this into mint.js: Update yuicompressor code.\nA good alternative would be to use @cloudhead's version of cssmin, which simply adds an export for the compressor object. This means a minor change to mint.js, also.\n. It would seem that I spoke too soon...\nhttp://search.npmjs.org/#/css-compressor\n. ",
    "nov": "Cool.\nThanks for your quick fix ;)\n. Or just make them JSON files?\n. Cool.\nThanks for your quick fix ;)\n. Or just make them JSON files?\n. ",
    "darthdeus": ":bomb: ... trollface.jpg\n. :bomb: ... trollface.jpg\n. ",
    "thehydroimpulse": "did anyone find a solution to this yet?\n. @edubkendo Yeah! When I have something working I'll for sure let you and everyone else know. \n. I'm guessing, if we could fix these issues with coffee-script, in particular, https://github.com/emberjs/ember.js/issues/599 , I think could lead to a different coffee-script api then it's Javascript counter part. This means, you could use the simplified, or Ember-like, Javascript API, or use the traditional coffee-script classes like it's done atm. \nThe main problem, though, is the client-side development process with Tower. Atm it's pretty complex and requires a ton of overhead to build a single file. Coffee-script isn't the biggest culprit, but it's a small factor in the process.\n. :+1: \n. aha fixed the problem. Thanks :)\n. No worries. That sounds great! Thanks for taking the time to explain it. Yeah I'd love to help and give a hand. I'll take a closer look at studying the code once again to understand what's going on. Oh and a quick question for modifying the tower code locally: Do I have to compile all the javascript back into coffeescript? Or download straight from github?\n. Ok Awesome! Thanks for the pointers :)\n. lol I was on my phone while typing this up and so it switch to contrains instead of contraints.\nAnyways, that sounds awesome with the ability class. I just took a look at it a little while ago and that would simplify things. Not sure if you want to have to option to use a different authentication solution or the built-in Tower one? \nYeah the currentUser and currentAbility objects would simplify the load a little bit. \nI was thinking on the same lines as you according to the @on methods. Right now I'm just using a boilerplate @publish / @subscribe to differentiate the result at first, then once it works i'll merge the syntax into @on since i'll have to make some checks (on the client) whether it's a socket event or not.  \nI was thinking of placing the socket accessibility code in the default Tower.Controller class, that way you can use @pub / @sub / @on whenever you want. Though an alias to a Tower.Socket could make it more modular and separated. \nActually, I was just browsing inside the tower-controller and the ControllerSockets class has I'm guessing the old code for push notifications? That may be the perfect place to add the pub, sub, on methods:\n``` coffee\n@module\nTower.ControllerSockets =\n  # @emit \n  publish: (type, name, data, constraint) ->\n      Tower.NetConnection.Socket.publish(type,name,data,constraint)\n# @on\n  subscribe: ->\n      Tower.NetConnection.Socket.subscribe(type, name, method) \n      # You'd have to get the actual method, as it would just be simple text.\nmodule.exports = Tower.ControllerSockets\n```\nAn example of a possible lambda function with sockets: \n``` coffee\nclass App.AdminController extends App.ApplicationController\n@subscribe type: \"/notification\", name: \"message\", method: -> (socket)\n      # Do something in here. This could possibly cut down on boilerplate code.\n```\nSo i'll check up on the Ability class and the Authentication so far, though I might add some stuff to make it more of an Authentication Library backed by passport, instead of just being powered by passport. But I'll try to make it modular so that someone can use their own implementation of an authentication or should it be bolted in?\n. haha ok sounds good! Yeah thats a much cleaner syntax! \nI'll go continue implementing all this stuff and i'll get back to you when I got something working!\n. Yeah i'll take a look at the previous issues. Yeah a nice authentication solution that has much of the boilerplate code would be best. Then if other users want all the extra bells and whistles they could implement a driver or something. \nThough to make the constraints and the sockets work a little better, there's gonna need an auth solution to combine everything or centralize it.\nJust some thought,\nCheers!\n. @kristianmandrup So Lance mentioned on the other issue that we:\n- Moved to pure JavaScript. Coffeescript became a huge burden (probably because of how it was being built). Now it's much simpler for people to jump right in.\n- Everything is separated into individual modules (https://github.com/tower). This creates a slight burden on getting the development environment up and running as you need to clone many of the repos (and there's a lot of them). I'll probably work on this within the next 3 weeks and get it working extremely well to where you can just clone the main Tower repo and they'll be a executable you can run that'll clone everything for you.\nOther Stuff:\n- We dropped Ember.js on the front-end. Ember is the bigger client-side framework today (that's popular). It was also extremely hard to always wrap around Ember and work with it. We decided to drop it in favour of starting from scratch on the client-side with components. This allows to have a fully modularized client-side environment. We already have a lot of progress on the client-side.\n- A DOM-based templating engine. Similar to Batman and Angular, where we use DOM attributes to embed data bindings and logic with some use (very little) of a mustache-like syntax {{var}}. That's just used for tiny inline interpolation.\n- Currently, we're transitioning to a Koa backed server system, instead of express. Koa is authored by the same guy (TJ) as the one who created Express and Connect. It's basically like a new connect that's much more slimmed down and uses Co to use harmony generators. This allows you to build everything in a synchronous style, avoiding the callback hell.\n``` js\nvar route = require('tower-route');\nroute.get('index', '/')\n .action(function*() { // Note the * symbol to denote the generator.\n   this.scope.users = yield model('users').all(); // Yielding will \"pause\" the function as we perform the operation.\n   this.render('index');\n });\n```\n- We're developing a lot of the environment so you can quickly get to building the actual web app. This includes having a Meteor-like development style, but better. Everything will be modular, we'll be using NPM and Components for client and server modules respectively (and a higher-level package system that combines the two...). I'm currently building the asset builder/pipeline that'll automatically reload the server process (thanks to tower-proxy) and will save the current state in the browser, reload the page, then restore the state (much like Meteor).\n- A consistent API for almost everything on the client and server-side. The context might just vary.\njs\nmodel('users').find(1);\nroute('index').action();\nresource('user');\n...\nSo all in all, we have a much clearer vision with an EXTREMELY modular backbone (especially with the recently added Tower modules - Not implemented yet thought). This definitely speeds up development and helps concentrating on specific pieces. It's also all about separation of concerns. Modules do ONE thing and does that thing very well. The templating system (server-side) is backed by at least 6-7 modules. I might also separate it even more.\nJust an fyi, the templating system:\nhtml\n<!-- Main Template -->\n<!DOCTYPE html>\n<html>\n  <head>\n    <title data-text=\"title\"></title>\n    <div data-import data-load=\"app\" data-type=\"css\"></div> <!-- Will be converted appropriately -->\n  </head>\n  <body>\n    <div data-child></div> <!-- Similar to Ember's {{outlet}} -->\n    <div data-import data-load=\"app\" data-type=\"js\"></div>\n  </body>\n</html>\nTemplate\nhtml\n<h1>Hello World</h1>\nis powered by the tower-server-dom which is a new HTML5 DOM implementation in Node that's super lean and clean that uses Gumbo (Open sourced by Google).\nAnyways, that's just an overview of what's going on.\n. @kristianmandrup Angular's codebase is so monolithic and mixed together with everything else, it's impossible to reuse anything. We also make heavy use of components and creating super small, compose-able modules that people can use with Tower, or without. It's not tied to Tower directly, it may just depend on a few more Tower modules that are again, super small and simple.\nWe also simplified the system greatly. Our goal for the templating system is to merge some of Ember's performance like their runloop which I reimplemented in a modular, super small component. \nWe also didn't really want to depend on another framework. Angular is fairly opinionated and it probably wouldn't work to wrap it as we did with Ember.\n. Awesome, and no worries. \nI'm a huge proponent of functional programming. I've mainly done work in Lisp and Lisp dialects such as Clojure, Scheme, etc... Clojure is an amazing platform and it gets you thinking beyond traditional imperative programming.\nThat's why our API is mostly composed of flat functions. Now, it's hard to be truly functional in JavaScript with immutable data and such, but the API is primarily just made up of functions that have some chain-ability. \nI haven't spent too much time with Bacon.js, but it looks really interesting. I spent some time reading about functional reactive programming.\n. Running mountain lion (10.8)\nNode -> v0.8.9\nNPM -> 1.1.61\nHook.io was originally installed locally, but i also tried global and it made no difference. \n. Still the same effect. I posted a new issue on the hook.io project but the project is no longer in development, which could be the reason why it doesn't work on mountain lion. \n. @j-mcnally Thanks! This solved the problem.\n. yup. It road blocked me for a few days at least. Maybe updating the README file to alert mac developers running mountain lion.\n. Thanks for the response. Yeah i'll take a look. I got the grunt all figured out now so i'll see what needs to be done. And I do like the requirejs implementation. Possibly having each package file become it's own module just like in the coffeescript. Possibly even having a lazy-loading feature to kick-start the application faster? Though there is a lot of boilerplate code that needs to be loaded right away it could be something to do in the optimization steps.\nI'll keep you posted about the grunt. I'm almost done with the sockets too.\n. @viatropos That's pretty sweet. A much cleaner version of what I did; just used symlinks from the tower source to any tower project. But this is a much better alternative.\nNo I haven't started on require.js per say, I'm working on implementing the IoC first to get some centralization going, but then I'll take a look at require.js, especially on the client-side. \n. +1\n. @j-mcnally Yeah evented loads or \"hooks\" would be very useful!\n. Possibly having a config file to specify which events to hook into and provide a class or function:\n``` coffee\napp/config/server/events.coffee\nTower.Events.draw ->\n@register \"pre_controller_load\", (event) ->\n         # Load some class here.. Possibly another library or custom code.\n         anotherClass = new SomeRandomClassHere()\n\n@register \"pre_routing_load\", (event) ->\n        # Do something else here...\n\n@register \"pre_shutdown\", (event) ->\n        # Cleanup....\n\n```\n. ahh that makes sense. I guess it confused some people because it wasn't included in the dependencies and they had to install it manually. Of course it's a simple step install, but for new comers they might not know what to do when presented by those errors.\n. @yagooar Last time I heard singular routes weren't yet implemented, but that could have changed. I think the goal would be to have something like:\ncoffeescript\n@resource \"plan\"\nJust like what rails have.\n. The last example seems like the Ember way of doing things and is similar to traditional ember routing. \n. It's hard to decide which routing is better and which is more useful as Ember.js and Rails style routing have two different functions. \nEmber.js\nYour application has a set of states. The URL is just a reflection of the current state and not the state itself. The URL will just serialize into a readable application state that you can then act upon. I'd like to think of controllers like state handlers in this case. \nRails Style\nThis is quite obvious as routing in this style is simply matching the URL directly. The URL becomes the current state and the application just reflects that!\nMaybe we could give a flexible environment for routing on the client side to match both Rails-style (possibly default) and Ember.js style (more options). The ember.js style would be somewhat similar to it's default routing system but abstract the boilerplate stuff.\n``` coffeescript\nTower.Route.draw ->\n @route 'index' ->\n       @root '/'\n       @controller 'application#index'\n\n @route 'posts.show' ->\n       @root '/posts/:id'\n       @controller 'posts#show'\n\n```\nMaybe even simplifying it:\n``` coffeescript\nTower.Route.draw ->\n@route ->\n    @root '/'\n    @controller 'application#index'\n\n```\nOr even:\n``` coffeescript\nTower.Route.draw ->\n@route '/', controller: 'application#index', ->\n         @route '/:userId', controller: 'user#show', ->\n```\nJust some thoughts!\n. @viatropos Yeah still getting used to converting my habits to spaces instead of tabs :). \n(Off Topic): On the note of games, coming from a C++ / C background, I think applying some common techniques in other languages and platforms to the web could be empowering! Most notably state machines (hierarchical state machines and finite state machines) was extremely fun to implement. But with the ability to incorporate a plugin architecture, people could use Tower how they want to.\n(On topic): Having two routing systems would be imo best. This would give the benefit of using raw Ember routes if people wanted to.\n. @viatropos I'll be able to help in a week or so.\nDid you take a look at my example Resolve.js for module loading? If we incorporate that into the system, it would greatly speed things up. All we have to do is provide a build task (except it doesn't take long at all), it would scan the file system and taking the pathname and the contents for each file and placing them like (After it has compiled the coffeescript):\njavascript\n// tower.js\ncontainer.module('path/to/file.js', 'javascripthere...');\nI'm thinking that this could workout really well in the end. The calls for require could also be kept, with a slight modification to the loader.\n(Oh and inside any dev tool, it'll seem like were loading individual files (all the modules) but in reality they are still all stored inside the single file as strings. https://developers.google.com/chrome-developer-tools/docs/scripts-breakpoints , goto 'Breakpoints in Dynamic JavaScript' for more information. It's really useful.)\n. Wow!\nI'll definitely have to re-read this a few times to really understand what's going on. But from the first read, it sounds pretty epic.\nI'm personally a fan of \"moving away from Rails' concept of controllers\" and defining Tower's way of doing things. This also means that the tag line \"modeled after Ruby on Rails\", goes out the window. But then people don't look at Tower and think, oh, it's just another Rails clone. \nI really do love how Ember does routing and incorporating the same concept within Tower would be insane. This would also split up the routes, which would become a lot cleaner, and this would allow a nicer Javascript API, which I love more and more after using CoffeeScript (not sure why...). This would mean that controllers (Rails' style) would be split up between the new \"routes\" and the new \"controllers\" or \"ResourcesController\", which would bring a LOT of power.\nBeing able to cache an instance of a router for each client, each with it's own stored contexts, such as ability, currentUser, etc.... I think this would simplify AND add a ton more power into Tower. Rails is a bit outdated tbh, and I think this could be a good switch to a unique style. \nIt also seems that there would be more emphasis on the client-resources (controllers, models, views, and templates) then the servers'. \nI was also thinking of maybe incorporating a mix-match language for the framework...Meaning you could write some files in coffeescript and others in javascript. Though this might confuse users, and make it less manageable?  But a thought nonetheless. That could also be a nice step stone for newcomers not really knowing Coffeescript too well. \nI give this two thumps up :+1:  :+1: \n. How big is this on the list? Is this planned for the next version? It seems like a big refactor would need to take place, but I'm all for it. Also, would improving the client-side development (Tower Source) be more important, to streamline the development process? I'll be testing Resolve.js with Ember.js, and then with Tower to see how we'll it performs, and how well it improves the workflow. Cause right now, it's kinda a pain working on anything client-side.\n. Sounds Good!\nI have a mixed feeling about coffee-script vs Javascript in node.js. Maybe it was the frameworks and methods used at the time, but Javascript felt ugly when modeled in a Ruby on Rails structure (That's before I learned Coffee-Script). After I've gone through and learned it, it made node.js very much more appealing, and plain, old Javascript was not fun to go back to. Now though, maybe because of Coffee-Script, Javascript feels so much better, and is super powerful. Maybe because I learned what Coffee-Script outputted and how good Javascript code was written. \nI'd be willing to go both ways (coffeescript or js), but going with JavaScript would seem simpler, and would require less of a hurdle when using the framework. \n. @edubkendo Completely understandable. I still really do love coffee-script and there's something about Tower and coffee-script that just fits. I'm not sure what Tower with vanilla Javascript would look like, maybe having two versions would help decide which is better for the framework. \nI'm not sure why people assume coffee-scripters don't know Javascript, it's a false view. \nA Question, or two, though: \n- Wasn't there an issue with caching controllers for each user, because you'd have to use (request, response, next) in each controller? \n  - Or has this been (theoretically) resolved, because of the router being cached as a whole within the Ember \"world\"?\n- Are controllers completely different now (going to be)? With the examples given here, it seems like postsController, for example, is just an alias to a cursor? Are we creating route controller's instead? or a mix of a new kind of controller (extremely slimmed down), and a route controller (not sure of what to call it). \nSo far, with my current understanding of this, seems to be extremely intuitive, though, it does bring some questions up.\n. So is everything going to be based on Ember? Server and client? For example, is the server's router implementation going to become similar to the client without most of the state management? \n. @edubkendo Well said. The main issue, as @viatropos mentioned, is the added complexity that coffee-script adds in the development of Tower. I'm personally one to go out of my way in terms of complexity if it gives me some benefit in the end. Nonetheless I feel like Ember is doing a great job creating an awesome Javascript API that doesn't try to make Javascript into something else, like rails, or ruby, with things like classes, constructors, etc... It, instead brings the Javascript way of doing things. Maybe that's why \"majority\" (I'll generalize here) of the nodejs community or Javascript community don't love coffeescript, as it's trying to turn Javascript into something it's not. \nEmber, on the other hand, is trying, in my opinion, to embrace the Javascript idioms. \nThough working with Ember inside coffeescript is a true pleasure, as it simplified the syntax a bit, using Javascript isn't that different and I'm getting to like it more as I use it. Sure the syntax is still C-like, but that's where my background comes from, so it's natural, I guess. \n. @viatropos Are you going to base the new router abstractions off of Ember's V1 routing or V2 (https://gist.github.com/3981133)? I guess a lot of people complained that the first implementation was too hard or something, not sure why, as it's fairly straightforward. \n. @edubkendo Tom Dale, one of the main Ember guys, said it would only become an option to use the new routing API. It's simply a semantic look that translates down to the current, so just an abstraction. Before I saw this, and before Tom tweeted it, people were freaking out, but both APIs will stay. One is just a more \"bare bones\" approach (Though it's not really complex, nor is it hard. It's basically a bunch of states, and connecting outlets most of the time), and the other is an abstraction on-top of the current system.\nNot sure if you knew that or not, but I thought I'd clarify just to make sure.\nI actually started trying to implement the new proposed Tower routing API against Emberjs and it's pretty easier to abstract Ember tbh. Though there is a lot of recursion and state management needed, I think it would be easier to build on top of the \"bare bones\" instead of the new one.\n. @viatropos Any progress on plans or implementation of the new stuff (router, js api, etc...)?\n. Sweet, sounds good. I love the new ideas, especially with the consistency\nin APIs.\nFor controllers, I tend to prefer the coffee script full classes (but in\nJavaScript) instead of embers hash api. Mainly because the hash doesn't\nexactly let you add custom things that are not properties but just some\nmethod call, like @on or something. Again, I think this would be solved by\nproviding a streamlined api.\nI'd like to volunteer for all the client-side stuff of Tower. I think if we\nreally split things up, well get things done a lot quicker and faster. I'm\nworking on a few things for the client side of tower,  one of which is to\nstreamline the development environment, which I think is an important next\nstep to make things a little more efficient.\nThen we could decide on a module system on the client side that works for\neveryone, AMD, CommonJS, and other optimization techniques like local\nstorage, hybrid-string, etc...\nOn Nov 24, 2012 7:23 AM, \"Lance Pollard\" notifications@github.com wrote:\n\nI personally am spending more and more time purely on the server-side\ndigging more into the data. I would love someone to take ownership of the\nclient-side stuff, that would help a lot. I'll make sure the router and all\nthe client stuff gets finished and is awesome and implements what we've\nbeen describing, but I'd like to focus more of my energy on the data. That\nwill all of course be integrated into Tower in some pluggable way down the\nroad. Cheers.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/pull/299#issuecomment-10678113.\n. @edubkendo Looks interesting.... Not sure how I feel about the new radical changes in their API, though, again, it's just a semantic addition to the current router. It certainly looks easier to use then the current one, everything is in one place. I'd still prefer the proposed Tower router API then Ember's new one. \n. @egeozcan We're actually basically rewriting Tower in JavaScript with different principles. Completely modular design (~40 separate npm modules). http://github.com/tower\n\nI can't give out a timeline, but things are taking shape.\n. Yup it's a common problem apparently. This also relates to the syncing for resources - create works but update and delete don't sync up. Might have to write those two methods.\n. Could you post your views? Specifically where the new link is?\n. Did you generate through scaffolding?\n. mmm. I'm assuming you are using views within the templates directory? When I used the scaffold it generated all of the required files including *new.coffee. When I rename the new.coffee file the app doesn't break....... I'm probably too tired and doing something wrong. If no one gets to this by the morning i'll take a shot.\n. Right now tower is extremely tightly built around ember. To support angular\nwould require full modularization. But, you don't really use Ember\ndirectly, tower abstracts most of it so I'm not sure if supporting angular\nwould do anything.\nOn Jan 9, 2013 8:50 AM, \"philip andrew\" notifications@github.com wrote:\n\nI think that being restricted to Ember is one reason that people might\npass this project on.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/310#issuecomment-12050162.\n. Tower is built around Ember.js since the beginning. It uses Ember.js on the client-side and server-side (using the object system, etc...). The only way to support Angular would be to modularize Tower completely and that would require it to be completely re-designed. Right now Ember is the only framework supported, because everything works around Ember and it's design, especially the object system, data syncing, etc...\n. I find Ember.js a lot better then Angular, one of the reasons is because Ember's view system is completely separate from the DOM (string-based templates), while angular is forced to be tied with the DOM which makes pre-compile templates not possible. Having string-based templates allows you to manipulate it and pre-compile it on the server-side where there is no DOM. Just one example of the differences.\n. Yes, we are going to spend lots of time on marketing, polishing, etc... website, documentation, tutorials, and screencasts are all on the list. \n. Yes. This is because Tower's package.json has: (https://github.com/viatropos/tower/blob/master/package.json#L126) \n\n\"scripts\": {\n    \"test\": \"make test\",\n    \"start\": \"grunt start --config ./grunt.coffee\",\n    \"docs\": \"make docs\",\n    \"postinstall\": \"$(./bin/dependencies)\"\n  }\nWhen you install tower it would run these scripts. The postinstall is the issue as it uses bash functionality. The $ and the ./ are specifically bash. The ./ runs a script locally inside /bin/dependencies/. \nTo solve this you could \ngit clone git://github.com/viatropos/tower.git tower\nThen edit the packages.json everything inside the scripts key. Make is again not available on windows by default. This is a unix functionality. \nAfter editing the file, open cmd and cd into the tower directory that you downloaded through git.\nType this:\nnpm link\nThis will link tower globally through npm. Then when you create an app:\ntower new app_name \ncd app_name\nnpm install\nNow again within cmd after installing the modules type:\nnpm link tower\nThis will link the edited tower version against this app instead of the default tower module that npm install will download.\nHope this helps.\n. @ginsent What went wrong? viatropos and I fixed some of the issues but some still remain.\n. mmmm. I'm running the same command and it returns fine.\n. After trying it inside cmd it does end up failing. I'm guessing that tower on npm isn't up-to-date with the github version. I had replaced the command $(./bin/dependencies) yesterday and if you look in the packages.json file within the scripts: {} it now uses make install-dependencies instead to work with windows.\nFor now until npm is updated you'll have to do some manual tuning. \nFirst clone the github tower repository and cd into the new directory:\nbash\ngit clone git://github.com/viatropos/tower.git tower && cd tower\nNow run:\nbash\nmake install\nOnce it's finished installing all the dependencies link the local tower repo globally against npm:\nbash\nnpm link\nThis should install tower. There are a few more bugs that you'll run into when running tower on windows. I'm trying to sort them out, but until then you can somewhat install tower.\n. mmmm. That's a little bit weird. When I run npm link I get:\n```\nC:\\Users\\Daniel\\Documents\\Projects\\tower111>npm link\n\nchokidar@0.4.0 postinstall C:\\Users\\Daniel\\Documents\\Projects\\tower111\\node_modules\\chokidar\nnode setup.js postinstall\nfibers@0.6.9 install C:\\Users\\Daniel\\Documents\\Projects\\tower111\\node_modules\\fibers\nnode ./build.js\n\nwin32-x64-v8-3.11 exists; skipping build\n\ntower@0.4.2-4 postinstall C:\\Users\\Daniel\\Documents\\Projects\\tower111\nmake install-dependencies\n\nmake: `install-dependencies' is up to date.\nC:\\Users\\Daniel\\AppData\\Roaming\\npm\\tower -> C:\\Users\\Daniel\\AppData\\Roaming\\npm\\node_modules\\tower\\bin\\tower\nC:\\Users\\Daniel\\AppData\\Roaming\\npm\\node_modules\\tower -> C:\\Users\\Daniel\\Documents\\Projects\\tower111\n```\nTo address the process hanging I found the issue once again. It's within packages/tower/server.coffee#92 and I and viatropos added some windows specific root path trigger but it appears the pull request didn't get the change or I might not have added it. I'll quickly push that up among other fixes to make Tower work on windows.\nI'll keep you posted. I just pushed the fixes to my fork of Tower and submitted a pull request. Until it gets accepted you can clone my repo instead: git clone https://github.com/TheHydroImpulse/tower\nThe procedures are the exact same, hopefully you won't get any errors. \n. Windows now somewhat fully works on my end. There might be one last issue in terms of the controllers but other than that it's fully functional!\n. The latest pull request I submitted should fix one of the regular expressions on windows.\n. @pashaie @liferealized What terminal are you guys using? (cmd, powershell, cygwin, or git bash?) \nFor starters make does not work on git bash even if you have the actual make installed.  (at least in my case it doesn't. Possibly a git bash issue.)\nSeems a little strange that some people can't get make.bat to work but others can. I'm running it perfectly fine with both make install and make.bat. Even all the commands such as make watch still work. \nIt might be an issue with which.bat or where. The bat file make.bat I made uses where, an actual windows default program. Try opening cmd and typing where make. \nI've noticed that if you have ruby's devkit installed, it has it's own make program. I'm not sure if it's the same as others but it could be the culprit. \nIf you have the devkit installed, running .\\where make (powershell), where make (cmd) you receive two locations both on separate lines. \nC:\\Users\\Daniel\\Documents\\Projects\\TowerSource>where make\nC:\\Users\\Daniel\\Documents\\Projects\\TowerSource\\make.bat\nC:\\RailsInstaller\\DevKit\\bin\\make.exe\nThe bat file make.bat will choose the first line it finds. So in this case it will run the make.bat. But if you run which.bat make, the results will be inverted and will run devkit's version.\nTry running (inside the tower directory) where make and comment the result. \nTry running (inside the tower directory) which.bat make and comment the result.\nFinally, try editing the make.bat file and replacing the contents on line 10 with:\nFOR /F \"\" %%i in ('which make') do SET PPath=%%i\n. @pashaie No worries. Glad to be of assistance. \nDid you try running: where make and which make? Try those and copy the results here, that will give quite a bit of info.\n. That's a bit odd as not having any make programs in the path works on azure. I'll be sure to add that in the documentation; to add either devkit or windows make. \nahh yes that error is windows related. Are you running the latest Tower version (0.4.2-13)? I'm pretty sure my pull request (that was accepted yesterday) fixed that error but I'm not sure. Nevertheless I was able to fix that error. If not on the pull request then locally. \n. @viatropos I'm working on a much better bat file as there was the recursion problem when no make.exe was found.\nRight now I've gotten an alternative to the makefile for all the installation stuff (node .\\bin\\install dependencies) but only outputs \nnpm install stylus uglify-js mocha chai sinon eco mustache jade kue mongodb coffeecup gzip chokidar knox socket.io socket.io-client fibers cli-table ttys cheerio colors mime async mint qs crc express URIjs moment node-uuid geolib validator accounting ember-metal-node ember-runtime-node ember-states-node coffee-script useragent gm temp connect fresh grunt-contrib-less\nBut never executes it. How did we fix this previously? I kinda forgot...\n. @haustraliaer I'll be submitting a pull request soon that will resolve this problem. \n. @viatropos nvm got it.\n. It works for me on windows , not sure about anyone else.\n. The errors in the first post is probably because of the installation change after I had made the new make.bat but I'm not 100% sure. It does seem like something's outputting an acii table with instructions or help menus and it's trying to execute it. I'll take a look at it tomorrow sometime. \n@ginsent Does everything else work?\n- Generating a new app?\n- Running cake watch?\n- Running node server?\n- Testing the demo app in the browser?\n. You'll need to install ejs globally: npm install ejs -g.\nCake is a task or built tool that comes shipped with coffeescript. If you have coffeescript, you'll have cake: npm install coffeescript -g\nThat should take care of the errors. If you have any more module not found errors, try installing them manually with the -g flag.\n. @haustraliaer FYI the towerjs website is outdated and may not work. Are you running the scaffolding command within a tower application? Sometimes it can be skipped to cd into the directory first. Also you would need to run npm install after you cd into your new app directory. \n. @viatropos I'll take a look at the make.bat file. If it works on multiple machines then we can put the postinstall back in. Is this the last thing until 0.4.3?\n. @ginsent Nice! So everything works now?\n. The paths seem right. If you take a look at public/javascripts you'll see a vender folder and within that, you'll see another javascripts folder. \nDid you run cake watch before running the server? It happened a few times to me.\nAnd that error isn't an issue just a warning that you won't get the native (C / C++) module version. Instead you'll get the Javascript that is completely functional. The difference is just speed as stated in the message. If you want it to install the native modules, you'll need python, and Visual C++ 2010 (Though the 2012, renamed from 2011 beta, has the ability to use the 2010 compiler and features but it may not work correctly.). \n. I guess @viatropos beat me to it! lol\n. There is currently a small error when generating a new app (within windows of course) and running \nbash\ncake watch\nafter running:\nbash\nnpm install\nError\nC:\\Users\\Daniel\\Documents\\app_test>cake watch\nCreateProcessW: The system cannot find the file specified.\nIf you search it up you find that it's apart of grunt: https://github.com/cowboy/grunt/issues/155\nJust thought people should know that there is still a wall before working on windows but this might not be tower's fault. \n. What doesn't work on mac? I'm trying it on mountain lion and so far everything seems fine.\n. Yeah that works but just running node bin/dependencies does print out text and it's because of the missing $(). Writting $(bin/dependencies) or $(./bin/dependencies) works fine.\n. @viatropos No worries. Helps expand things a little.\n. But I guess that brings us back to the original problem.\n. Ok. Yes the make install-dependencies does work and I changed that in the new pull request.\n. So path != _path.sep instead of path.sep.length > 1?\n. @viatropos Ok I think it may work now. Try this: \ncoffee\nwhile !Tower.testIfRoot(path) && path != _path.sep && !path.match /^([A-Za-z:]*){2}/`\n. Because windows uses drives the root path is never / or \\. When I printed every loop and it's value it ended up printing: C:\\. But not everyone's master drive is C:\\. Try to see if that works.\n. It works on mountain lion so far.\n. Yup that works too.\n. Not sure how to remove that one commit....\n. Ok so having:\ncoffee\nconsole.log @constructor.toString, @\nReturns: https://gist.github.com/3808368\ncoffee\nconsole.log @constructor.metadata()\nReturns: \nProcessing by ApplicationController#index as HTML (GET)\n  Parameters: { action: 'index', format: 'html' }\n{ className: 'ApplicationController',\n  resourceName: 'application',\n  resourceType: 'Application',\n  collectionName: 'application',\n  params: {},\n  renderers: {},\n  mimes: { json: {}, html: {} },\n  callbacks: {},\n  helpers: [],\n  belongsTo: [],\n  subscriptions: [],\n  layout: undefined,\n  scopes: {},\n  scopeNames: [] }\ncoffee\nconsole.log _.keys(App)\nReturns:\nProcessing by ApplicationController#index as HTML (GET)\n  Parameters: { action: 'index', format: 'html' }\n[ 'app',\n  'server',\n  '__ember1349037332463_name',\n  'io',\n  'isStacked',\n  'Post',\n  'User',\n  'ApplicationController',\n  'PostsController',\n  'UsersController' ]\n. My routes:\ncoffee\nTower.Route.draw -> \n  # @match '(/*path)', to: 'application#index' \n  @match '/', to: 'application#index'\nI had tried scaffolding other controllers but the output was the exact same. I also tried the welcome action vs the index action and it returned the same output. And yes there is an index method defined.\n. Yup that fixes it! Thanks!\nI just copied the contents of my server controller to the client and things ran as expected. There is just one small issue left in the watcher on windows... everytime you change a file the server will exit with an error stating: \"\nSyntaxError: Invalid regular expression: /\\client\\/: \\ at end of pattern\" but i'll take a look at it.\nSo it seems windows indeed works.\n. Well so far I fixed the regular expression by changing it to: @fileUpdated(path) unless path.match(\"\\#{_path.sep}client\\#{_path.sep}\") not sure if that will do it but it works for now.\nI tried adding a posts resource generated by the scaffolding. It only has a @scope 'all' and a destroy method and it works. But trying the same thing within the ApplicationController on the client leads to more errors. It seems the application controller needs to have it's methods defined such as the bootstrap and welcome method identical to the server. Maybe it's not reading the server's version?\n. Oh and a question... What's the benefit of changing coffeescript's way of achieving classes? \nOk so I now I see why it's failing here. The coffeescript is being compiled but not properly. For some reason it's not wrapping a self invoking function around the rest of the compiled Javascript. Adding it manually fixes the whole problem. Not sure how this could be related to Windows as I've never experienced this on any other platform.\n. ``` coffee\nclass App.ApplicationController extends Tower.Controller \n    index: ->\n        @render 'welcome'\n```\nCompiles to:\n``` javascript\nvar defineProperty = function(clazz, key, value) {\n  if (typeof clazz.__defineProperty == 'function') return clazz.__defineProperty(key, value);\n  return clazz.prototype[key] = value;\n},\n  __hasProp = {}.hasOwnProperty,\n  __extends =   function(child, parent) {\n    if (typeof parent.__extend == 'function') return parent.__extend(child);\n    for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } \n    function ctor() { this.constructor = child; } \n    ctor.prototype = parent.prototype; \n    child.prototype = new ctor; \n    child.__super = parent.prototype; \n    if (typeof parent.extended == 'function') parent.extended(child); \n    return child; \n};\nApp.ApplicationController = (function(_super) {\n  var ApplicationController;\nfunction ApplicationController() {\n    return ApplicationController.super.constructor.apply(this, arguments);\n  }\nApplicationController = __extends(ApplicationController, _super);\n__defineProperty(ApplicationController,  \"index\", function() {\n    return this.render('welcome');\n  });\nreturn ApplicationController;\n})(Tower.Controller);\n```\nwhen every other controller, for example the 'posts' controller compiles to:\n``` javascript\n(function() {\n  var defineProperty = function(clazz, key, value) {\n  if (typeof clazz.__defineProperty == 'function') return clazz.__defineProperty(key, value);\n  return clazz.prototype[key] = value;\n},\n    __hasProp = {}.hasOwnProperty,\n    __extends =   function(child, parent) {\n    if (typeof parent.__extend == 'function') return parent.__extend(child);\n    for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } \n    function ctor() { this.constructor = child; } \n    ctor.prototype = parent.prototype; \n    child.prototype = new ctor; \n    child.__super = parent.prototype; \n    if (typeof parent.extended == 'function') parent.extended(child); \n    return child; \n};\nApp.PostsController = (function(_super) {\n    var PostsController;\nfunction PostsController() {\n  return PostsController.__super__.constructor.apply(this, arguments);\n}\n\nPostsController = __extends(PostsController, _super);\n\nPostsController.scope('all');\n\n__defineProperty(PostsController,  \"destroy\", function() {\n  return this.get('resource').destroy();\n});\n\nreturn PostsController;\n\n})(Tower.Controller);\n}).call(this);\n```\nAs you can see the ApplicationController doesn't have a wrapping:\n``` javascript\n(function(){\n}).call(this);\n```\nWhich would make sense why it's not working as it's not being called.\n. Error:\nTypeError: undefined is not a function\n    at Tower.ControllerInstrumentation.process.block (C:\\Users\\Daniel\\Documents\\tower_3\\lib\\tower-controller\\shared\\instrumentation.js:60:16)\n    at Tower.SupportCallbacks.runCallbacks (C:\\Users\\Daniel\\Documents\\tower_3\\lib\\tower-support\\shared\\callbacks.js:71:15)\n    at Tower.ControllerInstrumentation.process (C:\\Users\\Daniel\\Documents\\tower_3\\lib\\tower-controller\\shared\\instrumentation.js:71:17)\n    at Tower.ControllerInstrumentation.call (C:\\Users\\Daniel\\Documents\\tower_3\\lib\\tower-controller\\shared\\instrumentation.js:47:17)\n    at Function.Tower.NetRoute.NetRoute.reopenClass.findController (C:\\Users\\Daniel\\Documents\\tower_3\\lib\\tower-net\\shared\\route.js:99:20)\n    at Function._.extend.find (C:\\Users\\Daniel\\Documents\\tower_3\\lib\\tower-middleware\\server\\router.js:20:27)\n    at Function._.extend.render (C:\\Users\\Daniel\\Documents\\tower_3\\lib\\tower-middleware\\server\\router.js:23:28)\n    at C:\\Users\\Daniel\\Documents\\tower_3\\lib\\tower-middleware\\server\\router.js:11:37\n    at Tower.Application.Application.reopen._loadApp (C:\\Users\\Daniel\\Documents\\tower_3\\lib\\tower-application\\server\\application.js:348:16)\n    at Object.Tower.MiddlewareRouter [as handle] (C:\\Users\\Daniel\\Documents\\tower_3\\lib\\tower-middleware\\server\\router.js:10:41)\nOk so I guess it's not the wrapping function but it seems that Tower is trying to load the client controller action instead of the servers. When I have a blank client ApplicationController it leads to the previous error. But when I mach the server controller's method ApplicationController#welcome and define it within the client it works without any errors. Also the coffeescript is being compiled correctly. \n. PostsController\nServer: app/controllers/server/postsController.coffee\n``` coffee\nclass App.PostsController extends App.ApplicationController \n  @param 'title' \n  @param 'body' \n@scope 'all' \n```\nClient: app/controllers/client/postsController.coffee\n``` coffee\nclass App.PostsController extends Tower.Controller \n  @scope 'all' \n# @todo refactor \n  destroy: -> \n    @get('resource').destroy() \n```\nApplicationController\nServer: app/controllers/server/applicationController.coffee\n``` coffee\nclass App.ApplicationController extends Tower.Controller \n  @layout 'application' \n@param 'page', type: 'Number', allowRange: false, allowNegative: false \n  @param 'limit', type: 'Number', allowRange: false, allowNegative: false \n  @param 'sort', type: 'Order' \n  @param 'fields', type: 'Array' \n  @param 'createdAt', type: 'Date' \n  @param 'updatedAt', type: 'Date' \n@beforeAction 'bootstrap'#, only: 'welcome' \nwelcome: -> \n    @render 'welcome', locals: {@bootstrapData} \n# Example of how you might bootstrap a one-page application. \n  bootstrap: (callback) -> \n    data = @bootstrapData = {} \n# for every model you add, you can add it to the bootstrap \n# dataset by using this async helper. \n_.series [ \n  (next) => App.User.all (error, users) =>\n    data.users = users\n    next()\n  (next) => App.Post.all (error, posts) =>\n    data.posts = posts\n    next()\n], callback\n\n```\nClient: app/controllers/client/applicationController.coffee\ncoffee\nclass App.ApplicationController extends Tower.Controller\nOh and these are all generated resources. I haven't introduced custom code so that shouldn't be a problem.\n. That makes a lot of sense as to why it didn't work before. I'll try it in a little bit...\n. @viatropos Is the npm version up-to-date with github's?\n. I've had this problem before so i'll try to remember what I did to fix it...\nWhat OS are you using? (Mac?)\nDid you install grunt globally? sudo npm install grunt -g\nTry running grunt directly and skip cake: grunt start --config ./grunt.coffee\n. There is no problem. The process runs in a 'loop' so to speak. It needs to keep watching the file system for changes in each file (add, delete, update). \nSo it seems like your good to go. The normal environment as suggested by @viatropos is to have a terminal window for each project. Inside each terminal window you'll have a minimum of two tabs: Node.js Server, and cake watch process. You could have another tab for using other cake commands and / or scaffolding feature. It may seem a little strange at first having to run a separate command to watch for changes but that's how it's done.\n. While Tower is not \"production\" status right now (there are still stuff missing and some optimizations. So 0.5 would be straight production mode?)\n1. If your only implementing an api then you have a few options. Using tower is one of them.\nHonestly building an api in solid express would work. You would just need to abstract a routing system and combine an orm of your choice. \nTower would be the simpler choice as it already has the routing in place as well as really good data export (json, html, etc...)\n2. I haven't done any benchmarks on Tower so I have nothing to compare it. But I don't see any immediate problems in terms of performance. I believe version 0.5 will have a tone of optimizations done.\n3.  Again haven't done any benchmarking but the orm seems solid in Tower. There are no many-to-many direct relationships (last I checked) because of poor performance. Instead you use a third model to link two other models. This is just an example of a performance boost done to the orm using mongodb.\n4. Extending Tower is fairly easy. Because Tower is built on express and connect your able to create your own middleware. In https://github.com/viatropos/tower/blob/master/test/example/app/config/server/bootstrap.coffee your able to define custom connect / express middleware.\nIf you need complete custom functionality that isn't built into Tower you can always modify Tower's source code and patch where needed. It may take a little while to learn how the system works and what does what, but after that you should be able to mod where needed.\nTry building simple Tower apps or start the api in Tower. If you like the system and how things work then go for it, otherwise you can always fallback on express / connect.\n. @edubkendo Doing exactly what you pointed out. Contributing to Tower as much as I can so that I can use it to build some of my applications. Instead of rolling my own, or going with another framework (Rails), I would much rather contribute to a growing community.\n. What didn't work with cake watch?\n. Can you close the issue?\n. No Worries.\n. I haven't tried this on unix so let me know.\n. Sorry for all the independent commits. \n. I actually rather have that in the model tbh. As background jobs are a type of data source. Maybe a mix of both?\nInstead of only having the controller have the control, maybe let the model have the hooks. So you would listen through the model?\nMaybe we could implement some helper functions in the controller for jobs.\n``` coffee\nclass App.VideoController extends App.ApplicationController\n  App.Job.On 'upload', 'upload'\nupload: (job) ->\n    # This could be a client-side controller that would then present\n    # a message to the user in some way.\n```\nA mix of models and controllers would be perfect but we would need to find the perfect api..\nThoughts?\n. But I also think that the controller should be responsible on acting on events. In this case it would easily allow a client-side controller to present another view, partial, or popup message. The controller could call a particular view class to act on the given data.\ncoffee\nclass App.ApplicationView extends Ember.View\n  uploadComplete: (job) ->\n    # Now you can update the current view to include some sort of alert (popup, partial, transition to a different view)\n    # You can then access the correct data through `job`.\n``` coffee\nclass App.VideoController extends App.ApplicationController\n  App.Job.On \"upload\", \"upload\"\nupload: (job) ->\n    # Call the view object\n    # Or create a new flash message:\n    @flash \"success\", \"Your video has been uploaded. You can view it here -> #{job.video.url}\"\n```\nIn this particular example a specific user uploads a video. Because you don't want to send out this event to all connected users, this could be plugged into a constraints system. The job itself would pass a constraints based on the job type. In this case it would use an Constraint.Authentication or maybe even Constraint.Authorization to check if the user is allowed to view the model (Video). \nThis would be a very nice addition and would make developing these types of application extremely easy! You specify a few controllers, views, and jobs to process the data / upload files and you've got a working demo.\nThoughts?\n. Sounds good, I like where this is headed. \nServer Controller Caching: I thought of this as well and it may be simpler not to have it honestly. Dramatically changing the api and constantly adding boilerplate code might not be the best of options but we'll see. Maybe down the road it could be a possibility.\nView Caching: It seems like the negatives out weigh the positives in terms of caching. The data-bindings atm seem like a solid one.\nSo I guess it pretty much comes down to Networking (Sockets, Ajax), Authorization, Authentication, and client-side controller caching and model \"caching\" (not really caching but still). \nBecause the client will only have one connection, it [api] may be different in some places. Though in the controllers, models, and views it will all be the same which will make things extremely easy. This will also simplify background jobs, uploads, and other modules that could use this functionality. \nHaving everything inside the App object is a lot cleaner. Things like App.connection.user or App.connections.user could access the global repository or directory of all connected users. This would possibly increase speed when working with authentication and authorization by caching it between requests. \nSo I guess the next step is planning the implementation of such centralized system. \n1. Refactor Tower.NetConnection and Tower.connections to be used in a centralized manner\n2. Create the interfaces for storing, accessing, and managing all the resources. Should it be Tower.Manager or something?\n3. Make it easy for modules to plug into this interface. For example the authentication, and authorization modules. (But these will most likely be manually implemented at this stage)\nWe can start with the sockets and add more things as it comes. But this would greatly change some core Tower stuff. Should this become another branch to build and make it work? Once it's stable and fully works in all conditions it could be merged into master?\nThis could add some really awesome things into Tower imo and could get better.\n. @edubkendo By Tower core I meant networking (sockets, ajax, etc..).. I kinda count that as being core. But yes I do agree with leaving the controllers and views alone. It won't bring too many benefits right now. \nThis would bring a huge win imo to Tower. \n. @viatropos Yeah we'll have to get the naming right, but we can always change it later. I'll work around Tower.Manager and see where it goes in terms of naming. \nThanks for the tips on branching n' stuff. I think implementing in smaller working chunks would be easiest. \nI'll keep you posted on thoughts, ideas, etc... (I typically write everything in google docs first. Makes it 100% easier)\n. So I've been thinking on how to best approach this. I messed around with a few things and here is where I got to.\nThe first goal is to bring a level of centralization to the mix. Knowing exactly where each instance is at all times in all environments (testing, in a controller, in a model, etc..). So basically this is essentially a service locator pattern. This has both pros and cons in it-self. It really becomes a registry type model. (every time I hear that term I think of goddamn Windows and it's bad design. lol) \nFor staters, this isn't bad. It's just very limited on what it can do. The next option would be dependent on if you like it or not as it's quite different and it seems like it's not very used in the node.js world, though other platforms heavily use it (more noticeably static typed language.)\nDependency Injection would be perfect to fit the bill. Having a DiC (Dependency Injection Container) that would control (in the single context as you could have many containers running at the same time) the dependency injection. \nImagine having a simple controller like the following:\ncoffeescript\nclass App.ApplicationController extends Tower.Controller \n  index: ->\n    # Some Database call on the users model...\n    @render 'index'\nLet's say you want to test view rendering within a controller. This would create problems as your depending on the database statically here (kinda). This means your not actually testing the view rendering in your controller but also the dependency it has on the database. If the database fails then so does this test.\nA nice solution would be to use a DiC and have some mock objects. You could then nullify the database component in your test code while leaving all your controllers or actual logic alone. \nHere's an example on retrieving or resolving a component:\ncoffeescript\nContainer.resolve(\"Controller\") # Returns the controller object / instance. \nContainer.resolve(\"Controller\").index() # Loads the index method and fails because of the database.\nContainer.mock 'Database', new (class Database\n  find: ->\n    null\n)\nContainer.resolve(\"Controller\").index() # Passes successfully because the database doesn't perform any actions.\nYou could extend this much further by offering a deep-nesting of dependencies. So you could have a chain of dependencies like \nApp -> Router -> Controller -> View -> Template -> Response ....\nBut in each and every file you wouldn't have any require calls. You wouldn't have any explicit class calls. You would just in turn go to the container to retrieve and resolve the dependencies. \nOf course that syntax may not be \"pretty\" so you can have an alias like:\ncoffeescript\nApp.Controller # = Container.resolve(\"Controller\")\nApp.Router # = Container.resolve(\"Router\")\nThough again this doesn't eliminate the need for a socket manager, but you could easily implement that as another dependency. This also allows for lazy-loading and file maps for all your dependencies (possibly even creating a graphical map outlining everything...mmmmm). \nI just wrote a quick DiC / IoC library for this: https://github.com/TheHydroImpulse/Ettore and so far all the features mentioned here are all functional and working (though I still need to create some tests for them). \nNext features I'll probably implement are:\n- Asynchronous model\n- A better string storage model (You could use this to store currentUser or something)\n- Promises \nThoughts?\n. Exactly! Most frameworks apart from ones built using static typed languages typically hide the DiC. And for some reason, dependency injection is a lot harder to wrap your mind around it. Maybe because it complicates things at first to make it easier in the end, but it is a hard pattern to learn. \nThis would definitely make it harder for people to get going with Tower if we mention dependency injection everywhere. We could however have an \"advanced\" page where users comfortable with the topic could learn more about how it works in Tower. \nSo technically it would seem like a service locator, acting like a bunch of setters and getters through a centralized object. This is fairly easy to understand and is pretty simple to get going with as it's pretty much everywhere. Users would also not need to know about the DiC (Dependency Injection Container at all or it's components. Users would just naturally use the front interface:\n``` coffee\nApp.get(\"Tower.Controller\")\nor\nApp.resolve(\"Tower.Controller\")\nor\nApp.Tower.Controller\nor\nTower.Controller \nYou could have a number of global objects outside of the app but this would just become an alias. But would make things a little easier.\n```\nIn testing however users could have access to the \"mocking\" or \"faking\" functionality of a DiC without actually knowing much about it. Though we would have to explain it to them in a way that isn't strange or weird.\nIn the end this could be a very powerful pattern to work with, if it's done right. I'm gonna research some more about DiC and many techniques used by other frameworks.\nAlso this wouldn't be hard to change in Tower as it's a change as you go type of thing. Some things would need to be changed together of course, but overall you could easily incorporate the DiC without much trouble. This also has the ability to lazy-load modules. Though i'd have to look at the file watcher system a little more to really understand how things are uncached or \"reloaded\" so that it could be brought into or tied into the DiC.\n. @viatropos So I've been improving the IoC library that I'm making to allow a bunch of useful features. https://github.com/TheHydroImpulse/Ettore\nRight now it supports:\n- Get / Resolving dependencies\n- Mocking objects\n- Asynchronous Resolving (More efficient on large objects or databases for example)\n- File Maps\n- Lazy-Loading files\n- has function to check if a module exists.\n- Promises (Still working on this)\n- Aliases (Still working on this)\nAlises\nThis is a cool feature that let's you mimic an array and object. Meaning:\n``` coffeescript\nIoC.resolve(\"Tower.Controller\")\nwould be the same as writting:\nTower.Controller\nor\nApp.Tower.Controller\nor\nApp.Controller\n```\nYou'll be able to define how the aliasing works and the naming of it's objects. But in reality calling:\ncoffeescript\nApp.Controller\nwould effectively (in the background) run:\ncoffeescript\nIoC.resolve(IoC.alias(\"Controller\"))\nSo this could lead to pretty powerful stuff, and in the end, you don't actually touch the IoC up-front, as it's all behind the scenes.\nThough I want it to be 100% tested before it goes into Tower or before I start implementing it, into Tower.\n. I'll that check that out, thanks.\n. Ok so a little update on the progress....\nI never knew how much power Javascript has with the new harmony proxies. Unfortunately not all browsers or javascript engines support this new feature. Node (Because V8 supports it) has it built in, but you need to add a run flag to enable it (kinda a pain). Luckily there are a few libraries out there for browsers and node (node-proxy) to make sure this feature is available. Mainly because Aliases in my library needs this feature. \nSo I've been working on the aliasing feature letting you do:\ncoffeescript\nTower.Controller.Action\nwhich actually runs (in the background)\ncoffeescript\nIoC.resolve(\"Tower.Controller.Action\")\nAs of right now, this successfully works! (albeit a couple of bugs that I need to fix)\nThe api of creating an alias is very simple and it allows you to control the naming in the end.\nSo for example, let's say you have the following component:\ncoffeescript\nIoC.set \"Tower.Controller.Action\", \"Success!\"\nMaybe you don't want to use the full long Tower.Controller.Action every time to access it. Well, with aliases you can define the top-level namespace you want to start with:\ncoffeescript\nController = IoC.alias \"Tower.Controller\"\nYou can now access the same component with:\ncoffeescript\nController.Action # = \"Success!\"\nThis lets you have a lot more power over your objects and you can create a slew of namespaces. I believe before you had shortened Tower.Net.Connection to Tower.NetConnection because of javascript objects vs how ember works. I'll have to experiment to know for sure, but I'm thinking you might be able to use traditional naming conventions without shortening the name because they are all stored as strings and are all individual objects.\n. So there are a few issues in this technique, but I'm seeing, if there are other solutions out there. \nFor starters, there is a limitation on the following issue.\nWe need to find a way to find a difference in the following two calls:\nTower.Controller.Action\nTower.Controller.Action.Index\nBecause if the first returns a dependency, then we can't call other aliases on it. In this example, the '.Index'. As this system works on a recursive design always returning a proxy object. So we need to somehow, need to find a difference in the previous call, because if we are wanting the Action dependency, we return that, but if we need the Index dependency, then we need to return a proxy object on Action, to be able to call Index.\nKinda a weird problem, but for now we need to use a sorta promise method to return the dependency, if there are naming conflicts in part of the fully qualified naming.\nTower.Controller.Action.then ->\n    @get # returns a valid dependency.\nTower.Controller.Action.Index # returns a valid dependency.\n. Ok, I have a kind of buggy solution, but one that might work under certain naming conventions. \nThe rule of naming currently is plural vs singular fashion. This is only one naming option available.\nSingular - Getting Dependencies\nIf you want to access the dependency, you would use the singular version of the word.\ne.g\ncoffeescript\nTower.Controller # Returns dependency\nPlural - Chaining\nTo continue going through the proxy chain to go deeper in naming to access another dependency then you use a plural version of each word.\ne.g\ncoffeescript\nTower.Controllers.Action # Returns a dependency, because \"Action\" is singular, but keeps the chaining going because \"Controllers\" is plural.\nI guess for now this would work, until I can find a better alternative. But also keep in mind that the \"actual\" stored naming is not effected by the different of plural vs singular.\n``` coffeescript\nThe keys are the same as before with traditional naming conventions. Only calling these dependencies through\nthe aliasing feature will you have to use; plural vs singular methods.\nIoC.set \"Tower.Controller.Action\", {default: \"index\"}\n``\n. I'm really digging that installation setup! Will definitely help people out when they adopt to Tower.\n. I'm guessing this a path issue. [Line #34](https://github.com/viatropos/tower/blob/master/packages/tower-application/server/application.coffee#L34) shows it's using static path separators instead of_path.sep`, but because your on a unix platform the separators should be correct. \nTower.root could be the culprit as we had issues with it in the past. I had updated that section to work on windows and mac osx but maybe ubuntu was failing on it. \nI'll fire up my vm of ubuntu and see if I can't replicate the problem.\n. Just a side note: The towerjs website is extremely outdated. You should use https://github.com/viatropos/tower the instructions here (though they may be the same in some places it's still best to make sure)\nI'm assuming you have installed tower globally? I believe i've had this error a while back but forgot to how I fixed it (I should write it down!). \n. Yes the gyp (build tool for native modules - though not exclusive to node) will most likely fail if you don't have python and visual studio build tools. If it fails it will use the non-native version which is perfectly fine. \ncake watch is an alias command to grunt start --config ./grunt.coffee (grunt is also a build tool but in javascript) which watches your coffeescript files for changes. It will always say \"Waiting...\" as it's waiting for an event to happen (add file, delete or update your files). This is a common technique called hot push, live reload, etc... and makes it possible to \"refresh\" your node server without restarting it or losing connections.\nWe should probably update the docs to mention this as many people were wondering about this. So you need to keep cake watch open when your running your server. You will then (after running cake watch) start your server in another tab, or terminal window. \nIn windows this is a slight problem as by default cmd, powershell does not have tabs or much customization options. (I personally think the DOS system is pure crap compared to the unix shell - which is amazing!) \nYou can download a program called \"Console2\" which is better alternative to powershell, and cmd. It supports tabs and many customization options albeit missing some aesthetic touch.\nAlso the npm install command shouldn't take that long, though it does run several other dependency commands that are unique to tower which do add up. It should take around a minute to complete as far as I can tell. \nYour database is not the problem. Tower will automatically connect to mongodb if it's running on the default port. A nice no-config solution.\n. Can you find that template file or does it really not exist?\nA little bit odd, but when you generate a resource through the scaffolding feature it should generate the templates within  app\\templates\\shared\\users\\ for example. Within this folder you should have some partial and method views. \nIf you cannot find these files or they do not exist, try deleting that app and try to re-generate everything. Sometimes this fixes it. \n. Ok so I went ahead and tried the same thing with the new version of tower and also get the same error. When you generate new resources be sure to restart the server and the cake process. This will fix a lot of the missing js errors.\nI'll try to go through and see what is happening...\n. Ok sounds good. I'll start with the DiC or Centralization which might solve the lazy-loading. But i'll see if and how require.js would fit into the system.\n. I believe I found a good alternative to require.js that would provide an EXTREMELY fast lazy-loaded (by default) system. It's used by many of the ember.js guys, in their development environment. \nSo right now let's say everything is concatenated into a single file. When a user visits the webpage, the script is downloaded into a single HTTP request. Just downloading contains two parts; latency, and download. On, let's say, an iphone 3, the latency and downloading, accounts for over 1/4th or 1/3rd of the total time. \nAfter downloading a Javascript file, you need to parse it which also takes into account for 1/6th, if not a 1/5rd of the total time. The last part is the evaluation, which takes most of time. \nWithout Caching\n\nThis is all done when loading a page and before any actions can occur. \nWith Caching\n\nLoading JQuery\n\nAs you can see, this is a huge drawback! All this evaluation and parsing is done on EVERY SINGLE PAGE REQUEST!\nThe Solution\nWhile lazy-loading the downloading isn't the solution, as there are many problems that can occur and you end up paying twice as much in bandwidth then a single file.\nThe solution is to instead, store each module within a string:\ncoffeescript\nmodules = []\nmodules['Tower.Controller'] = \"console.log 123\"\nmodules['Tower.Something.Else'] = \"console.log 345\"\nParsing strings are a LOT more efficient then straight javascript. This will also lead to lazy-loading of both parsing and evaluation which is awesome.\nWithout HTTP Caching:\n\nWith HTTP Caching:\n\nComparing\nComparing this new technique with the original, single file, load everything model you get the following data on an Ipad2\n\nResult\nYou can get speed boosts by a factor of over 10!\nThis could also be built in conjunction with the IoC system to provide a natural flow and simplicity. \n. Oh and the dependencies are ALL resolved on runtime. You could even have specific dependencies or modules for specific platforms (mobile, pc, etc..). You could stay with the require statement and also form it into the IoC.\n``` coffeescript\nCreate a new instance of the IoC container that will store each dependency and each file.\nContainer = new Container()\nContainer.set 'Tower.Controller', Container.file 'tower/controller' # Load contents of file.\nGlobal objects:\nwindow.Tower = Container.alias 'Tower'\nwindow.App    = Container.alias 'App'\n```\n``` coffeescript\n*.coffee\nBecause we previously set a file to load, we can use it in two ways.\nrequire './tower/controller' # This would trigger the Container to resolve this file and parse it.\nOr:\nApp.PostsController extends Tower.Controller # This would also trigger the Container to resolve this file and parse it if it's not already loaded!\n```\nAny thoughts / ideas?\n. More info:\nhttp://calendar.perfplanet.com/2011/lazy-evaluation-of-commonjs-modules/\nhttp://tomdale.net/2012/01/amd-is-not-the-answer/\n. I have a working example here that I made really quickly: https://github.com/TheHydroImpulse/resolve.js\nI also added the sourceURL option that when appended to code, will appear as separate files in dev tools. So in this example, the controller.js will appear as a separate file in the chrome dev tools.\n. Each file needs to have the following structure (if it's a coffee-script class) to use the previous implementations (as of now): http://jsbin.com/ijiquz/1/edit\n``` javascript\nmodule = (function() {\n    var controller;\n    controller = (function() {\n        function controller() {\n           // alert('Controller constructor has been loaded.');\n        }\n        controller.prototype.get = function(route) {\n            console.log(133);\n        };\n        return controller;\n    })();\n    return (controller);\n});\nmodule = new (module())();\nmodule.get(); // 133\n```\nThe module wrapping function isn't actually apart of the code but when you call: new Function(); it will wrap the code with this function.\n. So the module loader I made works 100% and is quite powerful tbh. You can clone it and see the awesomeness working. I wanted to try loading jquery or underscore with this, but it's hard putting these huge libraries within quotes \".\nBut i'll try some more and see if it works again. \nIt also seems that a combination with html5 cache manifest and this loader would explode in speed. I'll try that soon. \n. A little update on the module system here, though maybe this isn't the place for it?\nI've settle down with a CommonJS type system. This simplifies everything, because you aren't changing anything from Node.js to the browser. All: require, exports, and module.exports work the same as in Node.js. \nAn example module:\n``` javascript\n// controller.js\nvar Controller, model;\nmodel = require('model.js');\nController = (function() {\nfunction Controller() {\n    console.log(\"Controller constructor...\");\n    this.model = model;\n}\n\nreturn Controller;\n\n})();\nmodule.exports = Controller;\n```\nAs you can see, the syntax is the exact same. I'm currently working on some aliasing and relative module lookup. I'll also add coffeescript support and multiple file extensions. Would it make sense to use the same ./ notion as in node.js for local modules? Maybe you could then define system module, for Tower, let's say.\n``` coffeescript\nrequire 'tower-application.coffee'\nor\nrequire 'tower-application' \n```\nInstead of\ncoffeescript\nrequire './folder/to/module/tower-application'\nI also made a pretty simple Cake task to build all the files. It will search within a specified path, grab each file and stringify the code into app.js along with the module loader. It also uses UglifyJS to concatenate and do some fancy shortening on part of the code (there are some issues with the mangle and squeeze with the system, not sure why.).\nHere's what a resulting app.js looks like with two class modules:\njavascript\n(function(){\"use strict\";var e;e=function(){function e(){}return e.prototype.modules={},e.prototype.loaded_modules={},e.prototype.module=function(e,t){return this.modules[e]=this.appendSource(t,e)},e.prototype.appendSource=function(e,t){return e+\" //@ sourceURL=\"+t},e.prototype.resolve=function(e){if(this.modules[e]!==null&&typeof this.modules[e]!=\"undefined\")return this.loaded_modules[e]!==null&&typeof this.modules[e]!=\"undefined\"?(this.loaded_modules[e]=this.parse(this.modules[e]),this.loaded_modules[e]):this.loaded_modules[e]},e.prototype.parse=function(e){try{var t;return window.exports={},window.module={exports:null},t=(new Function(e))(),window.module.exports!==null?window.module.exports:exports}catch(n){return new Error(\"Error while parsing module. Error: \"+n)}},e}(),window.container=new e,container.module(\"controller.js\",'var Controller,model;model=container.resolve(\"model.js\");Controller=function(){function Controller(){console.log(\"Controller constructor...\");this.model=model}return Controller}();module.exports=Controller'),container.module(\"model.js\",'var Model;Model=function(){function Model(){console.log(\"Model constructor...\")}return Model}();module.exports=Model')})()\nPretty nifty heh? I could probably shorten the module loader by 30% or so, because I'm using CoffeeScript classes written in Javascript (I love writing Javascript after knowing how to properly write out classes and stuff). \nI want to unit test the system, but then I'll be able to start and experiment merging this and Tower on my own branch. Though a proper build system is properly needed, maybe I'll integrate GruntJS, along with Cake(just for a shorter command). Cause it's kinda hacky atm.\nRepository: https://github.com/TheHydroImpulse/resolve.js\nEdit:\nI still need to think of a way to auto-load specific modules. Sorta like a starting module so you can execute some code. Right now, I'm just using the console in chrome, but I'll need to think about it more.\nThoughts?\n. Thanks! I'm just cleaning up the files atm, then I'll push to npm :) \nrequire('model') is simply an alias to container.resolve('module'). It's just a simple regular expression replacement for simplicity. \nI'm currently adding a watcher ability (using chokidar :)) that would recompile the files. I'm also testing Ember.js into the system, and it's currently going well so far. \nI'm also redoing the documentation, and having full specs in the README. Possibly make it easier for people to understand the concept a little more.\n. Just a little fyi here...\nI've added a whole bunch of tests and it seems to work in most browsers (including IE 7), which is pretty awesome. I've also added a full build step that is super quick using grunt. It's simply a bunch of grunt tasks and helpers, along with some config options that I'll most likely be moving into a Resolve.json file to simplify things. The build script will minify and concatenate, along with the usual UglifyJS optimizations (squeeze, mangle, etc...). So far there is no lag in building, and it's not optimized at all. \nI also added the ability to require modules in three different, simple ways. \n- Fully Qualified Namespace\n- Semi Qualified Namespace\n- Non Qualified Namespace\nFully Qualified Namespace is fairly simple. It's an absolute path with the module extension (js).\ne.g:\njavascript\nrequire(\"/app/controllers/client/postsController.js\");\nSemi Qualified Namespace is an absolute naming but without the file extension\ne.g:\njavascript\nrequire(\"/app/controllers/client/postsController\");\nLastly, Non Qualified Namespace is a relative pathing that has an optional file extension (either way works :))\ne.g: (This uses the same syntax as CommonJS (node))\njavascript\n// app/controllers/client/postsController.js\nrequire(\"./../workingController\");\nrequire(\"./../workingController.js\");\nI've matched the syntax to the CommonJS format to make it easier to use it along side node. Doesn't matter which style you require modules in, the loader will convert it to a readable format (Fully Qualified Namespace).\nI've also been working on a \"require call cache\" feature. Basically recording every require call and creating a map. This makes relative paths work because at any time you'll have a module.parent object in each module that will output the callee module. You could use this feature to draw an actual map and see all the dependencies live or something. \nI've been reading a ton about AMD, cons and pros, and peoples opinions about it. I'm not a fan of it, though, I do agree on some of it's goals, mainly, having a single module format that's universal. But some people might want to utilize Tower in an AMD format, which is why I might implement a \"compiler\" or \"transpiler\" to convert the CommonJS to AMD using the \"hybrid string\" method. This would allow people to decide which method they would like to use in development or production. \nWith that said, I found out SoundCloud (the upcoming, not launched yet, version) is using the \"hybrid string\" (the one I'm building) and a CommonJS to AMD conversion. http://backstage.soundcloud.com/2012/06/building-the-next-soundcloud/ and specifically one of the dev's comment: http://backstage.soundcloud.com/2012/06/building-the-next-soundcloud/#comment-557577776\nInteresting what people are using in production in large scale systems. \n. Got a new proposition for client side (and server side) module organization. \nCommonJS:\n``` javascript\n// controller.js\nfunction Controller(){\n     console.log(this.name);\n}\nController.prototype.name = \"John\";\nmodule.exports = Controller; // exporting.\n```\nI'm a pretty big fan of CommonJS and would rather it's techniques than AMD's. Right now, the client side is going toward AMD support with Yeoman, RequireJS, and a ton of libraries are giving support right now. I'm not too keen on AMD, especially with the new ECMAScript Harmony modules coming out, or, is already out for specific browsers. \nSoundCloud is going to the ECMAScript modules and CommonJS. They have a \"transpiler\" (source-to-source compiler) to convert between module systems. Throughout development, they would use either AMD (asynchronous loading, and the ability to loose the build tool), or ECMAScript modules. When they move into \"production\" or testing, they would run their build tools, which would convert either systems into the hybrid-string end system. This, in turn, provides huge capabilities for development, such as loosing build tools, that would increase productivity and the speed of testing. \nThe hybrid-strings solution is pretty good, and I'm in the process of creating a Yeoman generator and tool for it, to where, you can, within a new directory, run the yeoman init command, yeoman init resolvejs, and it would create some configuration files that would hold settings such as, the source folder, the lib, or temp folder, and the output / dist folder. You could then run the yeoman build command, and your files would be watched, built, and outputted. Because you have the temp folder, the first time the build tool would run, it would compile (minify, concatenate) each module into lib, but would keep it's directory structure. When a file is changed, only the single file is re-minified and concatenated, then, every file inside the lib folder would be built in the following way:\njavascript\nmodules['currentmodulepath'] = 'encodedcode'; // uses encodeURIComponent to prevent special character messing and escaping the quotes used to surround the code.\nThe build task would also place the loader and the needed code with it. Right now, even without Yeoman, it compiles near real-time. Though it's sorta complicated on setting it up because of the statically typed directories, etc...\nBecause the source is going to straight Javascript, we could loose the bulky build system for development (but have the options to change the module system) and provide an AMD or ECMAScript module system. \nWe would still need some kind of transpiler to convert to, and from module format. The solution could be within: http://sweetjs.org/\nIt's backed by Mozilla and kinda by Brendan Eich (creator of Javascript), so it's only going to get better. This would allow one to write in any of the module formats, and the end result could be a different module system. \nTo use a macro within sweet.js (and this might be in ECMAScript 7... long time away though) you need to define the following:\n``` javascript\nmacro module {\n  case $module:ident {\n    $(export $x;) ... } => {\n    var cmodule = {};\n    cmodule.exports = {};\n    (function(){\n        $(cmodule.exports = $x; ) ...\n    })();\n\n}\n}\n```\nI'll admit the syntax is a little weird, but it gets easier when you spend time tinkering with it. This macro converts a ECMAScript module to a CommonJS module.\n\nECMAScript to CommonJS\nECMAScript:\njavascript\nmodule A {\n    export 1;\n    export 2;\n}\nCommonJS:\njavascript\nvar cmodule = {};\ncmodule.exports = {};\n(function () {\n    cmodule.exports = 1;\n    cmodule.exports = 2;\n}());\nWith the macro, you'll need to have cmodule instead of module. This isn't that much of a problem and will be fixed when I figure it out (only spent an hour or so on sweet.js). \nA work in progress, but this could provide a huge boost in productivity. CommonJS in the browser currently requires build tools (well the hybrid-strings solution does), but AMD is pretty nifty in asynchronous fetching of modules. \n\nCommonJS to AMD\n``` javascript\nvar helper = require(\"some/path/to/helper\");\nfunction Controller () {\n   this.name = \"Nope\";\n   console.log(this.name);\n}\nController.prototype.name = \"John\";\nmodule.exports = Controller;\n```\n``` javascript\ndefine(['some/path/to/helper'], function(helper){\n   function Controller () {\n       this.name = \"Nope\";\n       console.log(this.name);\n   }\nController.prototype.name = \"John\";\nreturn Controller;\n});\n```\n\nECMAScript to AMD\n``` javascript\nmodule ControllerModule {\n    function Controller () {\n       this.name = \"Nope\";\n       console.log(this.name);\n    }\nController.prototype.name = \"John\";\n\nexport Controller;\n\n};\n```\n``` javascript\ndefine([], function(){\n   function Controller () {\n       this.name = \"Nope\";\n       console.log(this.name);\n   }\nController.prototype.name = \"John\";\nreturn Controller;\n});\n```\nSome pretty nifty stuff. Sweet.js now has browser support, which would simplify things and it's extremely fast and only getting faster.\nThoughts?\n. If your not changing tower's source you don't need npm link tower. A simple:\n```\nnpm install tower -g\nnpm install grunt -g\nnpm install coffee-script -g\ntower new towerBot\ncd towerBot\nnpm install\nStart mongodb... Different for every OS...\nStart Redis if you want / have.\ncake watch  # leave it open. It will watch for all your file changes.\nnode server.js # Run this in another tab.\n```\nWith the latest version of Tower all these steps will succeed. (You may get another error #335 -> Still getting worked out.)\nTo make sure you have the latest Tower version you can run Tower -v and it should equal 0.4.2-14\n. Ok so the issue is tied to the module loading in tower. Line #23 is the starting of the module loading and more specifically on line #35 has the socket.io module. \nOnly if it can require socket.io is it going to include it. Try manually installing socket.io within your app directory:\nnpm install socket.io\n. @viatropos You could add socket.io as an optional dependency in the package.json. You can find the documentation  at https://npmjs.org/doc/json.html towards the middle of the page. Not sure if this would partially solve it...\n. cake watch\n``\nC:\\Users\\Daniel\\Documents\\Projects\\TestingTowerApplication>cake watch\npath.existsSync is now calledfs.existsSync`.\nDefault database not set, using Memory store\nRunning \"copy:js\" (copy) task\nCopied 35 files.\nRunning \"copy:css\" (copy) task\nCopied 2 files.\nRunning \"coffee:all\" (coffee) task\nRunning \"less:bootstrap\" (less) task\nRunning \"stylus:compile\" (stylus) task\nFile 'public/stylesheets/app/stylesheets/client/application.css' created.\nRunning \"templates:all\" (templates) task\nRunning \"watch\" task\nWaiting...\n```\ncoffeescript\nconsole.log(_.keys(Tower.View.cache), _.keys(Ember.TEMPLATES));\nand I get:\n[\"application\"] [\"application\"]\nIn public/javascripts/templates.js I get:\nTower.View.cache = _.extend(Ember.TEMPLATES, Tower.View.cache);\n. I also quickly browsed the task file and specifically the template task and didn't see any OS specific paths or anything, though I didn't spend much time looking.\n. This is what I get:\n[] # result\n/app\\\\templates\\\\.+.coffee$/ /layout\\\\application/ /app\\\\templates\\\\(?:client|shared)\\\\/\npathSeparatorEscaped does equal \\\\\ncoffeescript\nconsole.log(templatePath + \"\\n\")\nconsole.log(layoutPath + \"\\n\")\nconsole.log(namePattern + \"\\n\")\nReturns: (Just to be clear)\n/app\\\\templates\\\\.+.coffee$/\n/layout\\\\application/\n/app\\\\templates\\\\(?:client|shared)\\\\/\nfiles equals:\n[ 'app/templates/server/layout/application.coffee',\n  'app/templates/server/layout/_meta.coffee',\n  'app/templates/shared/layout/_body.coffee',\n  'app/templates/shared/layout/_flash.coffee',\n  'app/templates/shared/layout/_footer.coffee',\n  'app/templates/shared/layout/_header.coffee',\n  'app/templates/shared/layout/_navigation.coffee',\n  'app/templates/shared/layout/_sidebar.coffee',\n  'app/templates/shared/posts/edit.coffee',\n  'app/templates/shared/posts/index.coffee',\n  'app/templates/shared/posts/new.coffee',\n  'app/templates/shared/posts/show.coffee',\n  'app/templates/shared/posts/_flash.coffee',\n  'app/templates/shared/posts/_form.coffee',\n  'app/templates/shared/posts/_item.coffee',\n  'app/templates/shared/posts/_list.coffee',\n  'app/templates/shared/posts/_table.coffee',\n  'app/templates/shared/users/edit.coffee',\n  'app/templates/shared/users/index.coffee',\n  'app/templates/shared/users/new.coffee',\n  'app/templates/shared/users/show.coffee',\n  'app/templates/shared/users/_flash.coffee',\n  'app/templates/shared/users/_form.coffee',\n  'app/templates/shared/users/_item.coffee',\n  'app/templates/shared/users/_list.coffee',\n  'app/templates/shared/users/_table.coffee',\n  'app/templates/shared/welcome.coffee' ]\nSo that's all good.\nAlso when printing (in the loop):\ncoffeescript\nfor file in files\n   console.log file\nReturns every second output to null. Though this isn't a problem as it won't match the regex, but I thought i'd point it out.\n. Ok so that fixes the empty result but it seems like extra folders after app/templates/shared/ is erased. For example, app/templates/shared/layout/_flash.coffee actually turns into app/templates/shared/_flash.coffee. \n. yup all fixed!\n. This may of be the last issue with windows....\n. It fully works on my side so it may not be a windows problem (Sometimes the ./ works and sometimes it doesn't on windows... unreliable...)\n. Both work.\n. @pashaie Did you update Tower? There were a few fixes in the tasks file to make it work. Try (within your app) removing tower npm rm tower and then reinstalling everything npm install. That should get you the latest fixes. \n. The inversion-of-control container and more specifically, the service locator will fix this issue entirely. Basically, you will technically never access any resources like: \ncoffeescript\nTower.Controller\nApp.ModelName\nYou will write it out as such, but behind the scenes (using harmony proxies ftw), there's a huge system just to access and set resources. \nAn example using this feature from scratch (isn't just Tower specific as I made a separate repository):\n``` coffeescript\nContext = require 'ettore'\nContainer = Context.create 'App'\nYou can set properties or objects like:\nContainer.set 'Tower.Events', new (class Events extends Container.get('Tower.Class'))\nContainer.set 'App.PostsController', new (class PostsController extends Container.get('Tower.Controller'))\nContainer.configure ->\n    @set 'Tower.Controller.Action', new (class Hello extends @get('Tower.Class')' # You can use the lazy-loading feature or just use node's require statement.\n```\nBut you don't want to be using getters and setters in your whole applications; so you can create a bunch of aliases!\n``` coffeescript\nContinuing from previous snippet:\nglobal.App = Container.alias 'App'\nglobal.Tower = Container.alias 'Tower'\nTo access the previous resources you can use the new variables:\nApp.PostsController # Returns instance of class 'PostsController'.\nTower.Controller.Action # Returns instance of class 'Hello'\n```\nYou can do a much of cool things. You can also (working on this atm) create two different containers. One for the app, and one for Tower objects. This will have a clean separation between objects and will also allow you to specify fallback containers if an object is not found within the current container. \nYou can get more info here: #325\nThere might be a quicker solution to implement, but this would definitely have a resulting effect.\n. Yes, the system fully supports mocking objects.\nOn Oct 22, 2012 11:57 AM, \"Sebastian Hoitz\" notifications@github.com\nwrote:\n\nWow that sounds cool!\nWhat about switching classes to mock objects for unit tests? Is that\npossible, too?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/337#issuecomment-9673852.\n. :)\n\nI'm almost done unit testing it, after which I'll start implementing it within Tower on another branch. Got a lot of ideas to go along with it, especially with optimizations of the front-end... The front-end or client-side IoC will be slightly different, with possibly having it's own module loader, that's a bit, awesome! Instead of lazy-loading on download, you lazy-load on parsing and execution, which makes the initial page load extremely fast. http://hydrocodedesign.com/blog/2012/10/21/javascript-modules/\n. I hear ya. I've had that same problem with another framework and its quite\nannoying.\nOnce I'm done the packages, I'll finish the IOC. Not sure when exactly, but\nin a couple weeks for sure. Still trying yo get around some limitations or\nweirdness in proxies.\nOn Dec 6, 2012 10:48 PM, \"edubkendo\" notifications@github.com wrote:\n\nRan into this problem in irc today, person having an issue with \"Comment\"\nmodel, getting the exact same error. Grepping tower's source didnt reveal\nany use of \"comment\", so it must be in Ember. Whatever the case, we\ndefinitely need your permanent solution to this issue @TheHydroImpulsehttps://github.com/TheHydroImpulse. Between Tower and Ember, there's just so many words in use, we're bound\nto start seeing more and more cases of this as tower picks up users and use\ncases.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/337#issuecomment-11119750.\n. Last time I heard heroku didn't support web sockets and you had to change\nsocket.io to use long polling or flash sockets. This might be the issue but\nthe undefined error might be something else.\nOn Oct 18, 2012 12:55 PM, \"Mateusz Sojka\" notifications@github.com wrote:\nI have been trying to deploy a Tower app to Heroku.\nIn /app/app/config/server/bootstrap.coffee there is this:\nApp.configure ->\n  @use 'favicon', Tower.publicPath + '/favicon.png'\n  [...]  lots of stufff\n# For \"web sockets\" on heroku:\n    # App.io.configure ->\n    #   App.io.set('transports', ['xhr-polling'])\nSo following the instruction I commented these lines in. Everything looks\nfine until I deploy and get this error message:\n2012-10-18T18:51:24+00:00 app[web.1]: /app/app/config/server/bootstrap.coffee:29\n2012-10-18T18:51:24+00:00 app[web.1]:     return this.io.configure(function() {\n2012-10-18T18:51:24+00:00 app[web.1]: TypeError: Cannot call method 'configure' of undefined\n2012-10-18T18:51:24+00:00 app[web.1]:                    ^\n2012-10-18T18:51:24+00:00 app[web.1]:     at null. (/app/app/config/server/bootstrap.coffee:29:20)\nWhat am I missing?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/338.\n. @yagooar I'll check up with that error sometime today. \n\nIf you want to go hard core, check out amazon ec2. You can get a free micro instance, but remember, it's just a virtual machine (linux). You'll have to install everything yourself. I plan on using Tower in production within the next year (maybe earlier) and I'm going with ec2 at around 10-20 instances to test everything out. \nBut, if your looking for a PaaS service, then heroku would be your best bet.\n. I've heard of a lot of PaaS but only used a handful of them. My personal favorite is Pagodabox, albeit only being for PHP at the moment... There support is AMAZING. Hands down the best. I've asked them if there opening support for other platforms, notably node.js and it's their main priority. \nBut yes, i'll take a look at the internals to the problem here, I've got a bunch of free time today.\n. Although I haven't really checked out the testing suite of Tower, its quite\ncommon to have more than one assertion in a single test; though, there is\nan excess amount.\nWe could, if @viatropos wanted, make each test, and each test file small to\nmake it a rad quicker st running specific tests.\nOn Oct 19, 2012 10:13 AM, \"Mateusz Sojka\" notifications@github.com wrote:\n\nI have been working on a issue related to the validations and I have\nrealized that the corresponding testing file is really large and that lots\nof assertations are grouped together. This made testing separate, smaller\nissues very difficult, because of the verbosity of the tests and the lack\nof options to decide which tests should be run inside the file (well,\ncommenting out the code was my solution...).\nI think tests should be splitted up into smaller, logical units and there\nshouldn't normally be more than one expectation for a single test so that\nidentifying the error is more focused, faster and easier.\nOf course this doesn't need to be done all at once, but it should be an\nimportant topic because a nice testing environment makes people test more,\nand that's what we want, don't we? [image: :smile:]\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/340.\n. I'm currently working on a inversion of control container and more\nspecifically a service locator (#325) which will be used throughout tower\nonce its tested and integrate. This will however, change how you test (it\nwill make it extremely easy because of mocking and faking objects).\n\nSo when this goes into tower ,  we can split everything into smaller parts.\nOn Oct 19, 2012 11:01 AM, \"Mateusz Sojka\" notifications@github.com wrote:\n\nYou're right, you can have more assertions in a single test, but only if\nthere is a logical unit that justifies it.\nBack to the validation example, all validations are tested in one single\nfile, which will probably grow over the time, so I think it is a good idea\nto start refactoring the test suit so that testing is more comfortable.\nStill, I know it's not priority no. 1, but let's keep it in the backlog.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/340#issuecomment-9608382.\n. Yeah node.js is super complicated, especially with all this realtime stuff.\nBut after a few weeks of ticketing around the source code and asking\nquestions you should start to get the hang of things.\nOn Oct 19, 2012 11:38 AM, \"Mateusz Sojka\" notifications@github.com wrote:\nThis sounds great, I'm still trying to get into this \"brand new world\" of\nNode.js, so I want to start small and do fixes here and there so I get a\nbetter feeling of the Tower framework as a whole.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/340#issuecomment-9609522.\n. @viatropos looks really good. I think coffee script and Ember made me love JavaScript even more. That api seems a lot more down to earth in a sense or low level. I also love having everything (or almost everything) an Ember object in some way. \n\nI'll definitely take a wack at converting stuff to JavaScript. That'll let me experiment with Resolve.js (which got 100% on chromes speed test and profiler using JQuery,  handlebars, emberjs, and a few views, templates and controllers)\n. I'm pretty sure tower has not yet migrated to 0.4.0a. It seems like there\nare more differences in the newest version and previous versions that just\nthe filename. That would explain why your getting more errors. Just go npm\ninstall  and npm install grunt -g and you should be on a compatible\nversion. I tried it out this morning and everything works out.\nOn Oct 25, 2012 10:49 AM, \"C. Spencer Beggs\" notifications@github.com\nwrote:\n\nStill looking into this. I installed grunt 0.4.0a:\nnpm install -g grunt@0.4.0a\nand then ran through the vanilla install again:\ntower new app\ncd app\nnpm install\nLooks like grunt 0.4.0a requires Gruntfile.js instead of grunt.js so:\nmv grunt.coffee Gruntfile.coffee\nBut when I run cake watch I get:\nLoading \"Gruntfile.coffee\" tasks...\nERROR\n\n\nTypeError: Object # has no method 'registerHelper'\nWarning: Task \"start\" not found. Use --force to continue.\n\n\nAborted due to warnings.\nIf I run node server I don't get an error, but of course things aren't\nbuilt the right way.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/342#issuecomment-9785026.\n. Now I can see how coffee-script really does complicate everything (while also simplifying it).\n. For all I know, Tower render's it's first request from the server which allows crawlers to find the content. I'm not sure if this has changed with all the additions, but could be implemented either way. I believe meteor has this problem for sure, because they are mostly client-side. \n. @viatropos Haven't tried this on Linux, but using that ruby watcher runs at around 10Mb of RAM, compared to node (watchr) at 21Mb. Seems like watchr (https://github.com/bevry/watchr) uses less memory then grunt's watcher or chokidar, on Windows at least.\n. Not sure why Node has so much problem with file watchers. \n\nYou could create a rb-fsevent \"clone\" in C or C++ that would become a Node module or part-module for the mac part. FSEvent is a fairly straight forward system: https://developer.apple.com/library/mac/#documentation/Darwin/Conceptual/FSEvents_ProgGuide/UsingtheFSEventsFramework/UsingtheFSEventsFramework.html \nMaybe we should create a Tower.watch wrapper around many different other solutions. \n- fsevent or rb-fsevent are the fastest (Mac)\n- kqueue uses file descriptors for identification of monitored files - Meaning it has to open each file it watches.\n- inotify is the only linux solution, though dnotify exists, inotify replaces it as it's much better. EDIT: fschange would  be fastest.\n- Windows only has it's one event: ReadDirectoryChangesW\nAlso inotify cannot recursively watch sub-directories. You have to create a new watcher for each of them. \"dnotify and inotify are the current file change notification services in the Linux kernel. Unfortunately, they share a couple of shortcomings that make it difficult to use them for efficient (real-time) file system indexing under Linux. One of them is their unability to detect content-preserving file changes, i.e. write operations that only affect a tiny portion of a file. It is impossible to use inotify in order to determine what part of a file has actually been modified. A second problem is that you have to open every directory once before you can register for changes within that directory. This is very unconvenient, especially if you want to watch large file systems, as it requires a full scan of the file system.\" - http://stefan.buettcher.org/cs/fschange/index.html\nIt appears that linux has another solution called fschange that is much more efficient. The problem is that you need to patch your kernel or replace some files within the kernel to use it. A solution would be to use their fschange daemon: http://stefan.buettcher.org/cs/fschange/inotifyd-2005-11-19.tgz that emulates fschange using inotify. \nThis might solve the problem for all platforms. Though you'd need to create some C/C++ node modules, but that's not really a big deal. \n. @viatropos If I remember correctly gaze doesn't work on Windows, or partially work. deleted and added events don't fire. But other then that, it's a really good watcher. Love the minimatch/glob support.\n. @viatropos @shama ahh yes, gaze does indeed fully work on Windows. \n. @tremby An empty string isn't null but rather a string:\njavascript\n\"\" === null // false\nSo if you make a minimum length validation of 5, an empty string would pass. You would need an extra validation of presence and minimum length to pass.\n. @tremby Tower moved on to 0.5, which is a new codebase. 0.4 isn't being supported anymore.\n. Yeah this has been discussed many times. There are currently plans for a complete overhaul of the website butt i think the priorities right now are feature set, new api and especially all the new client side stuff that @viatropos has been working on. I'll take some time this week to maybe get a proper web design and documentation going. \n. Oh yeah. But I'm also thinking a good solid website would help new comers a\nton instead of using github wikis.\nOn Nov 19, 2012 7:18 AM, \"bobobo1618\" notifications@github.com wrote:\n\n@TheHydroImpulse https://github.com/TheHydroImpulse I'm not talking\nabout the overhaul or anything like that. I'm saying go and put, on the\nwebsite you have now, on the index, or header something like\nWiki has more info, go here..\nLeave everything else the way it is, just leave a notice until you do the\noverhaul.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/353#issuecomment-10514849.\n. The websites source is on github. I'll submit a PR when I get to it.\n\nThough once the new APIs come out, we'll really need a proper website with\nexamples, screen casts, demos, etc... But for now, a little notice should\nbe enough.\nOn Nov 19, 2012 7:34 AM, \"bobobo1618\" notifications@github.com wrote:\n\n@TheHydroImpulse https://github.com/TheHydroImpulse I agree but as you\nsaid, that issue has been discussed many times :P\nThis is a separate issue.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/353#issuecomment-10515399.\n. Are you just wanting an alias for multiple apps?\nOn Nov 19, 2012 10:14 AM, \"norman784\" notifications@github.com wrote:\nThere is a way to support vhost on tower or just I need create separate\napps to support multiple domains / subdomains?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/354.\n. So you want to let's say run your api on a sub domain? That kind of thing?\nOn Nov 19, 2012 11:06 AM, \"norman784\" notifications@github.com wrote:\nWhat I do is run a single application running daemon owner of domain /\nsubdomain, I am not aware if recommended to do that or in separate\nprocesses (as in this case applications are interrelated) one would be the\nfrontend / backend and server api.\nFor example:\napi.mydomain.com -> api / tower app\ndevelopers.mydomain.com -> developers / tower app\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/354#issuecomment-10523955.\n. I believe only MongoDB is supported as of now, but there are plans for other databases to be included. Sessions are used within controllers and it uses the expressjs / connect sessions. \n\nYou can access the session object through the request object in any controller:\ncoffeescript\nrequest.session\n. I'd say it's a couple months away. Though you can use it now, there are some bugs, and lots of features that are missing. The client-side stuff right now, especially the router isn't finished, but that'll change when the new stuff drops in. Also, there might be several improvements to be made, speed wise, as I've never profiled Tower, yet, that's another thing on the list.\n. But, I'll also add, that you can start using Tower for your project, and when new features or changes come into the mix, you can simply change were needed. Though that all depends on the length of your project.\n. Personally, I'd go with Rails and Ember.js, though, if you'd have to spend lots of time learning all the stuff, then stick to Coldfusion. If you already have your app in Ember.js, then porting is, or will be, extremely easy, as Tower is built on Ember.js. That's what I'm personally doing atm for a number of projects, though I'm using nodejs as the backend.\nThere are plans to have an admin panel generator or module similar to ActiveAdmin, though, that's a long ways away.\nI believe there was another issue opened with concern about using Zurb Foundation, instead of Twitter Bootstrap.\n. I'm not that familiar with knockout, but it's not as complete as Ember.js is. It also tightly bound to DOM elements, which I personally hate. Because of some missing pieces, some people have to implement those themselves. That's why I love Ember so much. It's fully featured and all the pieces are there.\n. Probably this article helped a lot: http://trek.github.com/ . It's made by Trek, one of the core members of Ember. I think the Router, Templates, Contexts, Views, and Outlets are the hardest thing to comprehend. Outlets, I'll tell you right now, is the SIMPLEST thing once you get it. Outlets are view holdplacers.\nMeaning, if you have a main page with a header and a body, well the header wouldn't change across the other pages, only the body content would. So you would place an outlet {{outlet}} where you want your body content of the different pages to appear.\nhtml\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Random Title</title>\n  </head>\n  <body>\n        <div id=\"wrapper\">\n           <script type=\"text/x-handlebars\" data-template-name=\"application\">\n               <header><!-- header stuff --></header>\n               <div id=\"content\">{{outlet}}</div>\n           </script>\n        </div>\n        <!-- Scripts to load ember, jquery, handlebars -->\n  </body>\n</html>\nThen, in the router you would \"connect\" the outlet(s) (you can have more than one outlet, for example, sidebars), to the appropriate template.\n``` javascript\nApp.Router = Ember.Router.extend({\n  root: Ember.Route.extend({\n    index: Ember.Route.extend({\n       route: \"/\",\n   connectOutlets: function(router) {\n       // Connect the {{outlet}} in the \"application\" template to the \"home\" template.\n       // In simpler terms... Grab the contents of the \"home\" template and replace the {{outlet}} in the \"application\" template with it.\n       router.get('applicationController').connectOutlet('home'); \n   } \n});\n\n});\n});\n```\nYou would do this for all the different routes. Again, pretty simple, but it stays simple for complex applications. Once you understand the object system, router, contexts, outlets, and views, you'll find it extremely awesome.\nI'm starting to make Ember.js tutorials on my Youtube channel, as there are none atm. Maybe that'll help some people out.\n. No Problem! If you want a little more insight on comparisons of Ember.js and other frameworks, http://www.quora.com/Ember-js/Which-one-of-angular-js-and-ember-js-is-the-better-choice is an AWESOME read. The answer (main / first one) is written by Tom Dale, one of the core members of Ember.js, an ex-Apple employee that also created SproutCore that was the framework used in huge apps like iCloud, which they (Tom, and Yehuda - another Ember dev) also created.\nAngularJS and Knockout have a lot of similarities, especially in their bindings. \nTom Dale also wrote a blog post explaining their [Ember.js] implementation of the Router. http://tomdale.net/2012/05/ember-routing/\nA very interesting read, and it shows just how powerful it is. I haven't spent much time with Angular's router, nor Knockout, but Angular uses a Rails like routing, which I don't think is front-end friendly.\n. Angular is by far more complex, especially in it's terms and theoretical background. But that doesn't mean it's more, or less powerful. Both Ember.js and Angular are just as powerful, though, they some of them are better at some tasks then others.\n. Make sure grunt's version isn't >=0.4.0 and that you can run it.\n. @missinglink This project has not been abandoned just this version (0.4.x). Were working hard on 0.5.0 behind the scenes which is a complete rewrite of Tower in pure JavaScript. We'll be announcing the release when it's done and when all the documentation is top notch.\n. Awesome, I love where this is going....\nSo first, right now, grunt, even in development, within Tower's source is concatenating and sometime minifying all of the client-side code. If a single file changes, grunt re-calculates everything, not just that one file. I solved this problem by having a \"temp\" folder, or a lib folder for client-side code. When grunt starts up, it builds and compiles everything. Building would minify all the client-side scripts and clone the filesystem. Meaning if we have files like: packages/tower-application/client we would get, as a result, tmp/packages/tower-application/client/. This allows the use of require and not having to worry about whether the path changes when building. <-- 1:1 mapping as you said.\nCompiling would be concatenation. But first, when a file changes, only that file is re-minified. Concatenation or compiling would be different. All the minified files, even if a single file changes, would be concatenated if were in production or something. My ResolveJS build system has maybe a 1/3 a second of lag, but that's not even noticeable. \nNot sure if it's just me, but having only the copy:js task has a noticeable lag of 5-7 seconds. The task isn't laggy, but the watch trigger is. When you edit a file, grunt's watch task doesn't trigger until 5 seconds later. But that's an aside point. \nI think having coffee-script support as a Tower package, like meteor does it (again, another example from meteor. I think they do a lot right, and we could learn from them). But meteor doesn't compile the coffee-script (not a 100% sure, but that's what it seems) and so they don't have some of the complications we do. Though the Tower's source is a bit different. \nI personally have never used meteor's package management system, but from what I've seen it has a few advantages. NPM is strictly for server-side code, that's it, though you can have client-side code, and assets, someone using your package wouldn't know how to leverage those components. I think one of the node.js/npm developers wrote a blog post on how NPM should leverage these components, but nothing has been set. \nI think Tower could leverage NPM and abstract it to provide a powerful package management but uses NPM for the actual fetching of packages. We could have tower package install auth, as an example, the authentication would most likely come with Tower. The result would be to create a new tower-packages.lock or something, and provide a json list of packages installed. We would then simply call npm and install the package. We could, however, have aliased names for packages. That means, one could type: tower package install righton, but that package might be taken in NPM, so it could be called righton for tower and righton-tower-package in NPM and git. Just some thoughts, but it could work. The package system would then look for a tower-packages.lock and see all the npm installed tower packages. Though one could create a vendor/packages folder and create an application specific package. \nWe would still use NPM, because it's an extremely powerful system, but we would alias it behind our own command. \nThe goal is just like you said, a single API to provide a way to create a server-side package, or client-side package, or both. With the ability to have assets and other components. \n\nNPM can't really do that. So I'm wondering what your thoughts are of how this would play alongside with NPM.\nI think the mix of our own solution in combination of NPM could solve this. Though there could be a better way down the line and we could change things if it's not going to break anything.\n\nI also think this could make contributing a lot easier. They wouldn't have to spend hours studying the codebase and figuring out how everything works. We could provide a nice, powerful API and heavy documentation that goes along with it. One could provide html5 boilerplate instead of bootstrap, or in combination. \nI think Tower.ready is better, much better. To set a component as ready, you could call Tower.ready('routing', true) and when checking if a component is ready you could call: \njavascript\nTower.ready('routing', function(){\n  // Stuff here....\n});\nBasically, each package would \"essentially\" be surrounded by this code for each dependencies they have. \npackage.js\njavascript\nthis.dependencies(['routing', 'routes', 'sockets:connected']);\napp.js\n``` javascript\n(function(){\nvar Class = (function(){\n         ///....\n   })();\n}();\n```\nwould theoretically become: \n``` javascript\nTower.ready('routing', function(){\n   Tower.ready('routes', function(){\n      Tower.ready('sockets:connected', function(){\n           (function(){\n                 var Class = (function(){\n             })();\n       })();\n  });\n\n});\n});\n```\nAgain, theoretically. The package system would simply wrap callback.apply({}); with all these Tower.ready statements. A simple, but elegant solution.\nOne could still call Tower.ready synchronously, and it'll all work. \nHooks:\nI'm still trying to think of all the hooks, events, ready states. So if you have any suggestions just let me know. I've made a wiki page, so that we can keep a list of hooks, ready states, etc... https://github.com/viatropos/tower/wiki/Packages\nAlso, the API inside package.js would be chainable. Just for sake of simplicity. \nAlso, I'm writing everything in JavaScript, not sure why, but I just really like making APIs in JavaScript compared to CoffeeScript. \n. I guess we have a few options here... Some might work, others might not....\nSo I guess for development we decided that we should serve raw files. We would just have a ton of script tags, and that's perfectly fine as we don't need to compile anything (except coffee-script). \nNow it's deciding or finding the perfect way for require statements. I don't think we need any \"module systems\", we just need a way to communicate between modules. \nSolution A:\nWe could have Tower become a bunch of packages in the way they are already. We'd have to modify them a tad bit, to follow a packages API, but this could have increasing flexibility. This means, the ready states would become each package. Each package, though, could have sub-ready states like: sockets:initialized and sockets:connected, purely as an example. \nIndependent:\nPackages would have to be independent from each other. One would need to have dependencies, that's where the package.js comes in. You would specify other packages you need. controllers would need models and models would need sockets or something.\nClient Side:\nBecause we don't have any require statements anywhere, we could follow the package.js file, read all the client-side files in each module, and concatenate them. Concatenating isn't slow, minifying is. Concatenating smaller files also isn't slow and would be 50x faster then concatenating a single tower.js file. That means, each package would return a single file for the client-side.\npackages/controllers/client.js\npackages/controllers/shared.js\npackages/controllers/client/pattern.js\npackages/controllers/client/events.js\npackages/controllers/client/notifications.js\nWould return a single:\nlib/controllers.js\nOr:\nlib/controllers.client.js\nDepending on the naming. \nWe could also have packages decide how it's concatenated:\n``` javascript\nTower.Package.register(function(){\n// Add information to the package.\nthis.info({\n    name: \"Controllers\",\n    description: \"\",\n    version: \"0.5.0\",\n    author: \"\"\n});\n\nthis.dependencies([\"models\", \"sockets\", \"application\", \"http\"]);\n\n// Register files the package is going to use:\nthis.addFile('client.js', 'client')\n     .addFile('server.js', 'server')\n     .addFile('shared.js', '*')\n     .addFile('client/events.js', 'client');\n     .addFile('client/notifications.js', 'client');\n\nthis.build('client', function(){\n       this.file(this.default, [\n             'client.js',\n             'shared.js'\n       ]);\n   this.file('controller.events.js', [\n         'client/events.js',\n         'client/notifications.js'\n   ]);\n\n});\n});\n```\nThis API is completely off the top of my head, but might work. With a few modifications, I think this could work. This would eliminate the need for require calls completely (client-side) and we wouldn't need any module system!\nServer Side:\nThe server side could use the require statement, so there's no change there, and the build API would only be for the client-side. \nThe second thing would be for custom packages. I think we could drop the tower package install ___ and replace it with raw npm. Right now, the package system will look in the packages/ folder and will look in each sub-folder. It only view it as a package if theres a package.js file. We could have app specific packages put inside vendor/packages and npm install packages in node_modules. We wouldn't need to have a tower-packages.lock or anything, though we could, and that might speed up the process a little bit, depending on how slow filtering through each node module. \nThe build process would be the exact same for custom packages. They could have the same this.build() method, if they want to customize it. Assets would also need to be registered as a file: this.addFile('images/*, 'client');. The \"builder\" would copy the assets invendor/imagesfor images,vendor/stylesheets/for css files, etc... It would also concatenate the client javascript and place the resulting package's javascript invendor/javascripts`. \nWe could have a packages.lock json file that would, when building each package, write the package, and it's outputting JavaScript files' location. \nSo for controllers package with a default build, you would get this result packages.lock\njson\n{\n  [\n     \"controllers\": [\n         {\"type\":\"js\", \"src\": \"/vendor/javascripts/controllers.client.js\"}\n     ]\n  ]\n}\nThe coffeecup helper would look at this file and make the script tags for all of them, in order of occurrence. \nFrom I've explained here, I think this could work, but not having used this system I can't say if it's effective or not. Having Tower's source a bunch of packages isn't necessary, but it would simplify things and make things consistent. \nThoughts?\n. The only noticeable downside would be order of dependencies and to decouple everything as much as possible. Or make sure that order is right. \n. Another solution, instead of concatenating, it would order the script tags in order of file inclusion:\njavascript\nthis.addFile('client.js', 'client');\nthis.addFile('shared.js', '*');\nthis.addFile('client/controller.js', 'client');\nthis.addFile('client/events.js', 'client');\nWould result in the following script tags:\nhtml\n<script type=\"text/javascript\" src=\"vendor/javascripts/controllers/client.js\"></script>\n<script type=\"text/javascript\" src=\"vendor/javascripts/controllers/shared.js\"></script>\n<script type=\"text/javascript\" src=\"vendor/javascripts/controllers/client/controller.js\"></script>\n<script type=\"text/javascript\" src=\"vendor/javascripts/controllers/events.js\"></script>\nI think this solution would be MUCH better then the previous. This would eliminate require statements completely, now relying on the order of file inclusion.\nThoughts?\n. So right now I made the packages system look in these three default locations. You can customize it by changing package.json's tower.packages.lookup array.\njson\n[\n  \"vendor/packages\",\n  \"node_modules/\",\n  \"packages/\"\n]\nWith the current amount of node.js modules within node_modules it's not slow whatsoever. We could also check the global node_modules but that would get a little tricky and OS specific, unless NPM has a helper for that. But for now it's all local. We could have a tower search or something to check if a module is tower specific, or you could list the currently available modules either in the command line or on the website/wiki. \nI think leveraging NPM is the best solution, because each package could have node module dependencies that they could bring in, or bower dependencies. \n. > Is there a way to do this with just package.json? The \"other packages\" could be tower- or non-tower-specific modules, installable from NPM, so instead of a package.js specifying the tower packages, could we just figure that out by inspecting the packages in dependencies and devDependencies, etc? That would be cool.\nFor the dependencies you could, but you'd also need to have a package.js somewhere for each package. Especially for the client-side, it'll take care of file inclusion, building, etc... I personally like the programmable approach to a \"settings\" file, but for the basic settings, such as name, description, even dependencies, we could place that inside the package.json. \nWe could have that tower: true in the package.json for  each dependencies or devDependencies. The package,js is to provide a more advanced configuration file for each package. They can include NPM modules, with a this.use(); statement, file inclusion (mainly for the client-side, but since were going for consistency, we can do the same for server-side), etc...\npackage.js is purely the first idea that came up, we could use packager.js or anything else. I think having the Packager or packager variables their own global. That way people could just include the packager system, and they'll be good to go. I'll make it as customizable as possible, that way people could use it with Tower, or their own projects and they'll be able to customize hooks, ready states, etc...\nYes, packages will be for both client/server. They could either wrap each file within a package with: packager.ready(function(){}); and this would fetch the dependencies in the package file, or they could add extra dependencies as a parameter. In Tower, though, they could leave this little bit of ceremonial code and leave it to the bundler. This would fix some of the dependency issues with having a ton of script tags. Just an idea. \nI'll start experimenting with all these ideas, and possibly get a demo out. \n. Just wondering, when you place javascript files inside vendor/javascripts do they automatically copy themselves in public/javascripts/vendor/? Or is it just when you start the server, does it copy?\nRight now, the bundler system works really well. It places all javascript files for each package inside: 'vendor/javascripts/packages/{name}`. It also adds to a json file for each file we add in those folders. You could search through each file recursively to find all the files and create script tags for them, but that wouldn't be extremely efficient. \n. Ok that's what I thought. \nSo far the packages are in good progress. I even successfully made a coffee-script package that compiles coffeescript files in any other package and serves them appropriately. Most notable in client-side code, right now, every client-side javascript file in packages are served as is (raw), so compiling each file independently, when it changes is extremely fast. But it was more of a test then anything else. \nI was also thinking of aligning the package system as similar as meteor's packages. Though the API in the actual packages will be different, that we cannot change, the boilerplate stuff could be identical. Might open some doors to package transferring between both frameworks.  \nI'll have a working demo sometime soon, not sure how I'll merge my stuff as I'm writing it all in JavaScript, and Tower's source is staying in coffee-script, so you can just clone my fork of Tower until I figure it out. \nBut we'll see were it goes. \n. Example coffee-script package: https://github.com/TheHydroImpulse/tower-coffee-script/ . Just a demo of a fully working compiler for packages. In any package (when using the coffee-script package) you're able to write coffee-script files. When a file changes (within a package) the file will go through the bundler. The coffee-script package simply extends the bundler by registering a new extension and processing each file when it changes, added, etc...\n. @mikesmullin They'll be a dependency problem libgd2-xpm-dev being only for linux. Tower would need to work for all platforms. \n. Awesome! Screencasts is the tricky one. I've been doing tutorial screencasts on Youtube for a couple years now and still have lots to improve. But it doesn't matter if we try 50 times and every time we start over, I think if we can get a really solid first few screencasts up, it'll get extremely easier over time. I think people, especially newcomers, need direction. They need steps 1 to 50, and transitions to each step. A lot of frameworks / screencasts (meteor for example) show a sped up version of step 1 and then skip to random steps there afterwords. It confuses the users who don't know where to start. Especially with this new technology, I would classify Meteor and Tower in the same group for future web apps, just an all-around new way to make applications. Users aren't used to this kind of thinking, programming, or concepts. Though Tower is more feature-full I'd say, and that means we would need more stuff out there. \nWritten documentation would be the hardest one, as it's very tedious, and there will have lots of it. But there's a lot of people, myself included that would try to improve/finish it as much as possible. \nScreencasts Ideas:\n- Introduction: A simple, yet intuitive introduction video that explains what Tower is, how it roughly works, and how to get started. An all-around well explained video.\n- Real-time: Because Tower is built on this real-time approach, we should explain what the heck it is, how it roughly works (with references to future videos), etc...\n- MVC/App Structure: This would be a simple video, but basically showing how an app structure look like and showing the controllers, models, views, and templates, and explaining each part separately.\n- JS or Coffee: Probably not a long video, but something that demonstrates using both languages in Tower. I'm not sure where we are in that decision, so that'll impact this video.\n- Scaffolding a New Application: Exactly that, we would start with installing Tower from npm, creating a new app and getting started. Maybe we should come up with a good demo app that would show the power that Tower has. Todo-lists are too simple. Blogs are again, too simple, though you could increase the feature-set of a blog, it's still in the past, though. I think something like what Meteor did in their screencasts. Something completely custom, yet somewhat simple.\n- Controllers: Explaining all the different controller concepts, APIs, etc... both client and server-side.\n- Models: How they work, etc...\n- Views: x\n- Templates: x\n- Router: A somewhat big video demonstrating everything you can do with it, client and server. Possibly splitting it into smaller parts (i.e 3 10 minute videos are better then 1 30 minute video.) Because we explained the controllers, models, views, and templates previously, we can go ahead and introduce them to joining all the parts with the router.\n- Backgroung Jobs: We still need to decide on a proper API, I think that'll come, we have some really good options, but we just need to get the balance right (model vs controller, etc...). \n- Authentication: Probably a later video, they'll definitely be more \"basic\" videos in-between, but we should definitely show how to build membership sites.\n- Packages: Not sure if this should be in 0.5.0, but I think it could be. Lot's of tuning will have to be done, but it's pretty straight forward. Anyways, showing how they could create a package, distribute it with NPM, and we could possibly have a \"Packages\" section on the Tower website where people could add their packages to it. Though the packages would be stored on github/npm, it would just become a directory or yellowpages of sort.\nI've got lots of ideas for screencasts, so this is just the beginning. If we have a strong documentation, video and written, we'll be rock solid. \nFor blog posts, we could have the following:\n- API decisions:\n- Polls: Where we ask the community what they think of a particular part of Tower\n- Progress: Explain, possibly weekly or bi-weekly at least where we are in progress, feature-set, improvements, fixes, etc...\n- Releases: An obvious one. When we release a new version, we'd post up what's included, the things changed in bullet points. Breaking changes, etc...\n- Interesting Problems: Things like the data synchronization, and other problems that we either have multiple solutions in mind or we actually solved the problem. \nI'm sure other people would have plenty of suggestions for topics, and once we release 0.5.0, new users would be perfect to ask what we can improve on.\n. @edubkendo I'm pretty sure it was in a previous issue where nested routes didn't work. That's why people started sending PR for the client-side router trying to fix it, and now were basically restarting the router.\n. On the list. There's a hacky authentication example, but it's not a full solution. Once I'm done implementing a few features I've been working on, I'll get started with this.\n. @btbinhtran @viatropos I'm currently working on a better testing environment for 0.5.0. You'll be able to run the following: tower test which will run all the tests. Because everything will become a package (even your application), the tests will reside inside their respective package. This makes the whole testing structure extremely modular. Your package file could look like this:\njavascript\nTower.Packager.create('example-package')\n  .server()\n    .add('server.js', true) // True marks this file for initialization search.\n    .tests('tests/server/**/*')\n.client()\n    .add('client.js', true)\n    .tests('tests/client/**/*')\nStill in the prototype stage and the API can change but that's basically the gist of it.\nYou'll also be able to do the following (still thinking of the syntax)\nshell\ntower test include,filename,pattern=/[A-Za-z0-9](hello\\_world)/\nYou could do the same with exclude searching, and you could search for something other than the filename, maybe a pattern for test names it('should ...') or group names describe('hello world'). Still thinking of other possibilities, but this could dramatically increase the testing environment. \nMaybe, if you're inside a Tower app, running tower test would only run the app's tests and not the frameworks. Maybe having a flag like tower test include,tower then you can specify which tests you want to run like: \nshell\ntower test include,packages=['tower-cli', 'tower', 'tower-generator']\nSearching types could be:\n- include\n- exclude\nHaven't thought of anything else.\nAnd, you could have the following criterias:\n- packages\n- package\n- filename\n- group\n- test\nThoughts?\n. Yeah, so right now, I'm basically writing an extremely light lexer and parser for the test syntax. It's currently super fast, and works with strings, regex, numbers, etc...\nOnce Tower 0.5.0's repository is up, then we'll be able to test it out to see how we can improve it.\n. Could you concatenate all those commits into one?\n. yeah that's weird. I heard Lance (viatropos) is fairly busy right now, so don't worry if your PR is sitting there for a little bit.\n. I don't think an example ATM would be very useful as things are going to rapidly change. I think an example would be best when 0.5.0 comes out.\n. This has been fixed in a pull request: https://github.com/viatropos/tower/pull/376 though it hasn't been merged yet.\n. Not sure if the pull request didn't go through or if the npm version isn't\nup to date with the repo.\nEither way, were working hard on 0.5.0 which will dramatically change\nthings up. Thats why these issues might not be the first priority.\nOn Feb 8, 2013 12:18 PM, \"Mark\" notifications@github.com wrote:\n\nWorked for me, thanks, will this be addressed in a more permanent way?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/375#issuecomment-13306500..\n. Lance (@viatropos) and I. I don't know any plans on getting a foundation up, but I'm definitely staying for the long haul. Once we hit 0.5 we'll be a lot more visible as were trying to keep things quite a little bit. You can check my fork https://github.com/TheHydroImpulse/tower were I do most of my work, though, I typically work locally then only push when things work. You can also check out the gist account of both Lance and I, that's where we put some of our ideas. \n. Well, I'm Canadian, so we aren't really fans of the Superbowl, lol.\n\nAnyways, I plan on updating my blog with weekly or bi-weekly (This can mean either every two weeks, or twice a week - some people get confused) with Tower news - http://hydrocodedesign.com\nWe got a lot of awesome stuff being worked on. You can view some of the new APIs on gist.github.com under @viatropos or myself.\nIf you have any suggestions, requests, etc.. Just let me know. \n. This is still very raw, and not done, but while the server is down, all incoming connections (http, https, web sockets - yes even websockets) will be queued up with Buffers until the server is back up again. That means there won't be any loss in data or transactions failing. \n. I plan on integrating the bundler's watcher into this new system. This means that we can easily have multiple tower instances running all going through the single proxy. Because tower is now actually being spawned as a child process. \nOn another note, I had to remove the node_modules file watcher for the packages. Its wayyy to slow for the current watcher.\n. This is most likely related to downloading through github instead of using the npm version. When you install through npm, it'll run some installation scripts. The packages folder is for the source code, and the actually runned files are compiled within the lib folder. I'm assuming the compilation of the coffeescript didn't complete or failed.\nTry cd-ing into the tower folder inside node_modules and run `make watch and it'll compile the files.\n. Ahh, I see.\nWe had worked on some windows platform fixes a few months ago, but sorta\ntook them out because of the increasing complexity. Because of that I'm\nworking on 0.5.0 to work on windows really well, currently using Jake\ninstead of make (not sure if that'll last - well see).\nTo work with the towers source code ATM (not includimg 0.5.0) you'll need\nmake.\nNot sure why you're getting that error, never seen that before. Try looking\nin your global tower folder for a lib folder. Also check to see if you\nhaven't installed a local version of tower through npm's repo.\nOn Feb 8, 2013 2:06 PM, \"neverfox\" notifications@github.com wrote:\n\nJust to be clear, when I say that I used the github version, I mean as an\nargument to npm install. In other words, I first ran npm install -g tower,\nwhich gave me the problem I described. Only then did I try npm install -g\ngit://github.com/viatropos/tower.git, on a whim. Neither approach gave me\na version where cake watch worked. Also, coffee-script and grunt are also\ninstalled globally in npm.\nI'll try your suggestion. Do you mean failing during the npm installation\nof tower? Any idea as to why this might be happening? If it relies on makebeing available, that could definitely be the issue, given that this is a\nWindows machine and make needs to be explicitly installed.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/381#issuecomment-13311241..\n. Once I get home I'll see what the issue is. You should be able to run npm install within your app to get started. Do you get any specific errors other than the task one?\n\nThe main issues with Tower (prior to 0.5.0) are:\n- It uses Make\n- Uses unix commands for tests, etc...\n- Has some hard coded path separator (/ instead if \\ on windows)\n- Requires at least two tabs open, which is a problem with windows (unless you're using console2 or something) which has shitty command line system.\nI think that's it. Most of the path separators or platform specific things seemed to be fixed for the most part. \nUnfortunately my branch is completely unstable since it has many of the 0.5.0 stuff.\n. I do my work on a Windows machine and everything works fine, so it must be an issue with one of the latest patches or changes to the code base. I would suggest to wait for 0.5.0. I consider 0.4.3 to be unstable - both in performance/stability and in efficient environment (make, grunt, impossible client-side development (Tower source)). \nThat's the only problem with Ember, it's not a full-stack client/server framework. So you're required to have another server-side mashup which isn't ideal. Lot's of time spent on boilerplate code and not your app. 0.5.0 is going to be much much better. Were leaving the \"rails clone\" tagline and embarrassing our own unique style. Router, Resources, controllers, models, packages, IoC, events are all new. \nWe should have some pretty cool stuff going on in the next few weeks.\n. That chmod error is because you need root privilege to install modules\nglobally.\nOn Feb 14, 2013 10:41 AM, \"Gilbert Bishop-White\" notifications@github.com\nwrote:\n\nI tried installing tower using '''npm install -g tower''' is appeared to\nwork fine but '''tower''' was not a recognised command. I then tried '''npm\ncache clean''' and then '''npm install -g tower'''. But it failed\nconsole log & log file: https://gist.github.com/gilbertbw/4951927\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/383.\n. Right now I'm guessing that Tower won't move to grunt 0.4 unless someone sends a PR and that will become useless for reasons I'll share below. Were working hard on Tower version 0.5.0. I don't want to say too much at this point, but let's just say it's different, very different. As a result, we are dropping grunt all together. \n. @pocesar Because 0.4.0 is quite different than the previous version.\n. I'm guessing you're running grunt 0.4 which Tower doesn't support. You'll have to downgrade to a previous version.\n. Tower does not support grunt 0.4.0. Please downgrade to 0.3.*.\n. npm install grunt@3.x.x -g\n. Yes, we are aware of that. Were working on the next version 0.5.0 that basically changes everything. 0.4.x isn't ready for use. I'd personally wait till 0.5.0 as to not waste your time on 0.4.x.\n. No worries. I can't talk about any specifics (of the new version), just wanted to let you know were still working on Tower. We'll annonce things when were ready. \n\nHaven't seen that error before, but there have been many weird errors on different platforms or setups. If things keep not working, I'd definitely wait till 0.5.0 where things will work.\nThanks.\n. A quick guess is that the less grunt task is for the newer 0.4.0 version and not 3.x.x.\n. I don't really remember. Try 0.3.5 or something. Make sure you have the grunt-contrib-less at version 0.3.0.\n. Sorry, but were not updating version 0.4.x anymore (unless someone steps in). Were putting the effort towards 0.5.0 instead.\n. @Cacteye Are you talking about 0.5.0?\n. @Cacteye Yes. Grunt is gone for 0.5.0. Tower will only use a single console tab to operate, instead of two. Were opting for an extremely light-weight bundler. \n. @Cacteye Yes. The bundler or bundle will perform everything regarding to assets. JavaScript is the primary language.\n. @wamatt http://github.com/tower #0.5\n. @wamatt @Cacteye Although that's greatly outdated, it might be useful. Once we release 0.5.0, we'll be very public on what's going on.\n. @wamatt We don't want to draw too much attention yet, at least not until it's ready. That's why there isn't anything on there. \nYes, that's the new home and it's also composed of components.\n. As far as I know many-to-many relationships were taken out because of performance reasons. You'd need to use the has_many :through alternative. Similar to Rails.\n. Tower 0.5.0 will work 100% on 0.10.\n. mmm. I've never seen this error before. I apologize for the complicated setup. I would just wait for 0.5.0 which is coming soon. It'll be a much more streamlined process.\n. @edubkendo Yeah, I've noticed that more and more problems are arising. I'll see what I can do.\n. @edubkendo @btbinhtran I'll talk with @viatropos and see how we want to organize this. Yes, that's where tower 0.5.0 is being held at. We wanted to keep it under a tight lid while we did most of the development. We were originally going to go with a single repository and we previously discussed splitting it up into smaller modules but decided not to. We came to the conclusion that separating Tower into small modules was a much easier way to work and created a more organized environment. This does create a bit of work if you want to work on multiple modules locally as you need to link all of them using npm but once your environment is setup, it only gets better. We opted for a component and npm workflow. Component is used for managing client-side modules and npm for server-side.\nThis model works incredibly well and provides independent, testable modules. We are also no longer using any globals and work with a more functional, chain-able API.\nI do feel like contributing will be decentralized but it will make it easier (I think) for people to contribute right away. Previously, you had to really dig deep into the source code and everything was tied together. This new model allows people to work exclusively on specific modules without touching any other ones.\nAlso, there will be a repo under tower/tower which will be the main repository. All issues will most likely be placed under this repo for anything Tower related. We'll be transferring the current tower repo over to the organization. All commits and contributions will also be transfered and not lost.\nIf you have any questions, just let me know.\n. Added a bit of info to my last comment.\n. @mfjohansson no worries. That roadmap is outdated. I don't want to spoil everything just yet but I'll enlighten you on some of the things happening.\nWhen is it going to be released? We haven't put a date on the release yet.\n0.5.0 is a complete rewrite from 0.4.x. Why? Because were now operating in pure JavaScript as a basis instead of CoffeeScript. We went for a more modular approach with more than 50+ modules comprising Tower. We will be releasing a lot more information when were close to the release of Tower with proper documentation.\n. @octopusinc We're almost ready. \n. @maximkott Is that the full output?\nAlso, are you running npm install tower -g?\n. @maximkott The tower binary is included in the tower-cli package, that's why you're running into errors. Try running npm install tower-cli -g. We might have to put some sort of wrapper executable in this repository for simplicity.\n. @tamvo @kbups @eleung Tower is not ready to be used right now. Many of the components are still being developed.\n. @muminoff Yes, Tower is currently not ready for use. While many of the modules are almost done, we still need to finish them, and integrate everything together to make everything work.\n. @tarun1793 Hey, the main repo doesn't change because most of the functionality has been moved in independent repos across the tower organization.\nTower isn't as much of a framework, but a collection of many independent components. I'll be working on integrating much of the platform to make it a framework, or make it easier to use all these components.\n. @tarun1793 Yeah, I mean Tower still kinda is a framework, or that's the goal, but not in the Rails sense of the word. The framework part is still under wraps and being developed while the underlying mechanics are pretty much there. The final effort is to streamline the process, and stuff.\nWe like to get away from the Rails notion of a framework definition. Node is very much different from how Ruby works, in terms of community, principles, etc... \n. @tarun1793 Awesome. Let me know if you need help. There's virtually no docs or anything, which is something on the horizon. \n. @tarun1793 Oops, forgot to reply. fyi @viatropos posted that answer on SO. I should also note that the comparison was for earlier versions of Tower and Railwayjs (I think they changed names).\nLance and myself and decided to concentrate efforts on small portions of Tower at a time, and start branding it as an experiment for modular apps.\n. @andreyvit Hey,\ntowerjs.org should be redirecting to tower.github.io. We did have a towerjs.org our previous site for an older version of Tower.\nI'll be getting some stuff in the README that explains what the current Tower is all about.\n. @tarun1793 mmmm, that's a bit strange. It works for me, but I'll see what's going on.\n. @tarun1793 the previous version was written in coffee script. The current version is in JavaScript.\n. @tarun1793 Didn't get a notification for that last message. Coffee-script added a barrier to entry and to participate. It also added unnecessary complexity.\n. @dts Our templating engine supports both the client-side and server-side. The client-side portion is a little bit messy, and we have old repos laying around.\nThe server-side is rendered through server-dom and the actual template library is under the new branch (https://github.com/tower/server-template/tree/new). I'll merge it in to the master branch and update NPM if you'd like. \nThe client-side will be much cleaner, almost exactly like the server-side. So server and client compatible.\nI might just make the template repo server & client to simplify everything.\n. @dts It's not \"production ready\", I wouldn't say. Right now, I wouldn't classify Tower as anything close to a framework. Right now, it's a bunch of small modules that can be used independently, or together. I'm currently putting my effort into the view system (server & client). The templating system is pretty much complete, the view system is just a higher abstraction.\nThe main effort in getting the templates to work seamlessly client and server is a pipeline of sort. Where we package up all the templates to be used on the client-side. That's a future goal, and pretty easy to accomplish.\nI'm currently using many of the Tower modules in production for @titananalytics. @viatropos and I are getting the ideology of Tower together, and the process of building apps with our modules.\n. This would also alleviate a lot of the burden in setting up a new component. We could just a simple command: tower g component foo and all the required stuff will be generated. Moreover, we can easily wrap testing and everything behind a single, integrated cli. For example, testing against phantom: tower test phantom. \nAgain, many of these commands can be deferred to more specialized tools like component-test.\n. @lancejpollard Working on the cli stuff under @clijs. It'll be extremely easy to start creating the tower cli to generate components and such.\n``` js\nvar cli = require('tower-cli');\nvar tower = cli('tower');\nvar generator = require('tower-generator');\ntower.command('create {name}', function(name) {\n   return generator('./generators/component', process.cwd(), { name: name });\n}).then(function(ok) {\n    cli.success(ok);\n}).catch(function(err) {\n    cli.error(err);\n});\nvar gen = tower.command('generate');\ngen.command('model {name}', function(name) {\n    // Same as the previous generator.\n});\ngen.command('migration {name}', function(name) {\n    // Same as the previous generator.\n});\n```\nThese commands can then be run with:\nbash\ntower create foo\ntower generate model user\ntower generate migration create-user\n. @Albinzr it's been left in a mostly not useful state for the past 3 years. You're better off using React or any of the popular frameworks to build apps.. did anyone find a solution to this yet?\n. @edubkendo Yeah! When I have something working I'll for sure let you and everyone else know. \n. I'm guessing, if we could fix these issues with coffee-script, in particular, https://github.com/emberjs/ember.js/issues/599 , I think could lead to a different coffee-script api then it's Javascript counter part. This means, you could use the simplified, or Ember-like, Javascript API, or use the traditional coffee-script classes like it's done atm. \nThe main problem, though, is the client-side development process with Tower. Atm it's pretty complex and requires a ton of overhead to build a single file. Coffee-script isn't the biggest culprit, but it's a small factor in the process.\n. :+1: \n. aha fixed the problem. Thanks :)\n. No worries. That sounds great! Thanks for taking the time to explain it. Yeah I'd love to help and give a hand. I'll take a closer look at studying the code once again to understand what's going on. Oh and a quick question for modifying the tower code locally: Do I have to compile all the javascript back into coffeescript? Or download straight from github?\n. Ok Awesome! Thanks for the pointers :)\n. lol I was on my phone while typing this up and so it switch to contrains instead of contraints.\nAnyways, that sounds awesome with the ability class. I just took a look at it a little while ago and that would simplify things. Not sure if you want to have to option to use a different authentication solution or the built-in Tower one? \nYeah the currentUser and currentAbility objects would simplify the load a little bit. \nI was thinking on the same lines as you according to the @on methods. Right now I'm just using a boilerplate @publish / @subscribe to differentiate the result at first, then once it works i'll merge the syntax into @on since i'll have to make some checks (on the client) whether it's a socket event or not.  \nI was thinking of placing the socket accessibility code in the default Tower.Controller class, that way you can use @pub / @sub / @on whenever you want. Though an alias to a Tower.Socket could make it more modular and separated. \nActually, I was just browsing inside the tower-controller and the ControllerSockets class has I'm guessing the old code for push notifications? That may be the perfect place to add the pub, sub, on methods:\n``` coffee\n@module\nTower.ControllerSockets =\n  # @emit \n  publish: (type, name, data, constraint) ->\n      Tower.NetConnection.Socket.publish(type,name,data,constraint)\n# @on\n  subscribe: ->\n      Tower.NetConnection.Socket.subscribe(type, name, method) \n      # You'd have to get the actual method, as it would just be simple text.\nmodule.exports = Tower.ControllerSockets\n```\nAn example of a possible lambda function with sockets: \n``` coffee\nclass App.AdminController extends App.ApplicationController\n@subscribe type: \"/notification\", name: \"message\", method: -> (socket)\n      # Do something in here. This could possibly cut down on boilerplate code.\n```\nSo i'll check up on the Ability class and the Authentication so far, though I might add some stuff to make it more of an Authentication Library backed by passport, instead of just being powered by passport. But I'll try to make it modular so that someone can use their own implementation of an authentication or should it be bolted in?\n. haha ok sounds good! Yeah thats a much cleaner syntax! \nI'll go continue implementing all this stuff and i'll get back to you when I got something working!\n. Yeah i'll take a look at the previous issues. Yeah a nice authentication solution that has much of the boilerplate code would be best. Then if other users want all the extra bells and whistles they could implement a driver or something. \nThough to make the constraints and the sockets work a little better, there's gonna need an auth solution to combine everything or centralize it.\nJust some thought,\nCheers!\n. @kristianmandrup So Lance mentioned on the other issue that we:\n- Moved to pure JavaScript. Coffeescript became a huge burden (probably because of how it was being built). Now it's much simpler for people to jump right in.\n- Everything is separated into individual modules (https://github.com/tower). This creates a slight burden on getting the development environment up and running as you need to clone many of the repos (and there's a lot of them). I'll probably work on this within the next 3 weeks and get it working extremely well to where you can just clone the main Tower repo and they'll be a executable you can run that'll clone everything for you.\nOther Stuff:\n- We dropped Ember.js on the front-end. Ember is the bigger client-side framework today (that's popular). It was also extremely hard to always wrap around Ember and work with it. We decided to drop it in favour of starting from scratch on the client-side with components. This allows to have a fully modularized client-side environment. We already have a lot of progress on the client-side.\n- A DOM-based templating engine. Similar to Batman and Angular, where we use DOM attributes to embed data bindings and logic with some use (very little) of a mustache-like syntax {{var}}. That's just used for tiny inline interpolation.\n- Currently, we're transitioning to a Koa backed server system, instead of express. Koa is authored by the same guy (TJ) as the one who created Express and Connect. It's basically like a new connect that's much more slimmed down and uses Co to use harmony generators. This allows you to build everything in a synchronous style, avoiding the callback hell.\n``` js\nvar route = require('tower-route');\nroute.get('index', '/')\n .action(function*() { // Note the * symbol to denote the generator.\n   this.scope.users = yield model('users').all(); // Yielding will \"pause\" the function as we perform the operation.\n   this.render('index');\n });\n```\n- We're developing a lot of the environment so you can quickly get to building the actual web app. This includes having a Meteor-like development style, but better. Everything will be modular, we'll be using NPM and Components for client and server modules respectively (and a higher-level package system that combines the two...). I'm currently building the asset builder/pipeline that'll automatically reload the server process (thanks to tower-proxy) and will save the current state in the browser, reload the page, then restore the state (much like Meteor).\n- A consistent API for almost everything on the client and server-side. The context might just vary.\njs\nmodel('users').find(1);\nroute('index').action();\nresource('user');\n...\nSo all in all, we have a much clearer vision with an EXTREMELY modular backbone (especially with the recently added Tower modules - Not implemented yet thought). This definitely speeds up development and helps concentrating on specific pieces. It's also all about separation of concerns. Modules do ONE thing and does that thing very well. The templating system (server-side) is backed by at least 6-7 modules. I might also separate it even more.\nJust an fyi, the templating system:\nhtml\n<!-- Main Template -->\n<!DOCTYPE html>\n<html>\n  <head>\n    <title data-text=\"title\"></title>\n    <div data-import data-load=\"app\" data-type=\"css\"></div> <!-- Will be converted appropriately -->\n  </head>\n  <body>\n    <div data-child></div> <!-- Similar to Ember's {{outlet}} -->\n    <div data-import data-load=\"app\" data-type=\"js\"></div>\n  </body>\n</html>\nTemplate\nhtml\n<h1>Hello World</h1>\nis powered by the tower-server-dom which is a new HTML5 DOM implementation in Node that's super lean and clean that uses Gumbo (Open sourced by Google).\nAnyways, that's just an overview of what's going on.\n. @kristianmandrup Angular's codebase is so monolithic and mixed together with everything else, it's impossible to reuse anything. We also make heavy use of components and creating super small, compose-able modules that people can use with Tower, or without. It's not tied to Tower directly, it may just depend on a few more Tower modules that are again, super small and simple.\nWe also simplified the system greatly. Our goal for the templating system is to merge some of Ember's performance like their runloop which I reimplemented in a modular, super small component. \nWe also didn't really want to depend on another framework. Angular is fairly opinionated and it probably wouldn't work to wrap it as we did with Ember.\n. Awesome, and no worries. \nI'm a huge proponent of functional programming. I've mainly done work in Lisp and Lisp dialects such as Clojure, Scheme, etc... Clojure is an amazing platform and it gets you thinking beyond traditional imperative programming.\nThat's why our API is mostly composed of flat functions. Now, it's hard to be truly functional in JavaScript with immutable data and such, but the API is primarily just made up of functions that have some chain-ability. \nI haven't spent too much time with Bacon.js, but it looks really interesting. I spent some time reading about functional reactive programming.\n. Running mountain lion (10.8)\nNode -> v0.8.9\nNPM -> 1.1.61\nHook.io was originally installed locally, but i also tried global and it made no difference. \n. Still the same effect. I posted a new issue on the hook.io project but the project is no longer in development, which could be the reason why it doesn't work on mountain lion. \n. @j-mcnally Thanks! This solved the problem.\n. yup. It road blocked me for a few days at least. Maybe updating the README file to alert mac developers running mountain lion.\n. Thanks for the response. Yeah i'll take a look. I got the grunt all figured out now so i'll see what needs to be done. And I do like the requirejs implementation. Possibly having each package file become it's own module just like in the coffeescript. Possibly even having a lazy-loading feature to kick-start the application faster? Though there is a lot of boilerplate code that needs to be loaded right away it could be something to do in the optimization steps.\nI'll keep you posted about the grunt. I'm almost done with the sockets too.\n. @viatropos That's pretty sweet. A much cleaner version of what I did; just used symlinks from the tower source to any tower project. But this is a much better alternative.\nNo I haven't started on require.js per say, I'm working on implementing the IoC first to get some centralization going, but then I'll take a look at require.js, especially on the client-side. \n. +1\n. @j-mcnally Yeah evented loads or \"hooks\" would be very useful!\n. Possibly having a config file to specify which events to hook into and provide a class or function:\n``` coffee\napp/config/server/events.coffee\nTower.Events.draw ->\n@register \"pre_controller_load\", (event) ->\n         # Load some class here.. Possibly another library or custom code.\n         anotherClass = new SomeRandomClassHere()\n\n@register \"pre_routing_load\", (event) ->\n        # Do something else here...\n\n@register \"pre_shutdown\", (event) ->\n        # Cleanup....\n\n```\n. ahh that makes sense. I guess it confused some people because it wasn't included in the dependencies and they had to install it manually. Of course it's a simple step install, but for new comers they might not know what to do when presented by those errors.\n. @yagooar Last time I heard singular routes weren't yet implemented, but that could have changed. I think the goal would be to have something like:\ncoffeescript\n@resource \"plan\"\nJust like what rails have.\n. The last example seems like the Ember way of doing things and is similar to traditional ember routing. \n. It's hard to decide which routing is better and which is more useful as Ember.js and Rails style routing have two different functions. \nEmber.js\nYour application has a set of states. The URL is just a reflection of the current state and not the state itself. The URL will just serialize into a readable application state that you can then act upon. I'd like to think of controllers like state handlers in this case. \nRails Style\nThis is quite obvious as routing in this style is simply matching the URL directly. The URL becomes the current state and the application just reflects that!\nMaybe we could give a flexible environment for routing on the client side to match both Rails-style (possibly default) and Ember.js style (more options). The ember.js style would be somewhat similar to it's default routing system but abstract the boilerplate stuff.\n``` coffeescript\nTower.Route.draw ->\n @route 'index' ->\n       @root '/'\n       @controller 'application#index'\n\n @route 'posts.show' ->\n       @root '/posts/:id'\n       @controller 'posts#show'\n\n```\nMaybe even simplifying it:\n``` coffeescript\nTower.Route.draw ->\n@route ->\n    @root '/'\n    @controller 'application#index'\n\n```\nOr even:\n``` coffeescript\nTower.Route.draw ->\n@route '/', controller: 'application#index', ->\n         @route '/:userId', controller: 'user#show', ->\n```\nJust some thoughts!\n. @viatropos Yeah still getting used to converting my habits to spaces instead of tabs :). \n(Off Topic): On the note of games, coming from a C++ / C background, I think applying some common techniques in other languages and platforms to the web could be empowering! Most notably state machines (hierarchical state machines and finite state machines) was extremely fun to implement. But with the ability to incorporate a plugin architecture, people could use Tower how they want to.\n(On topic): Having two routing systems would be imo best. This would give the benefit of using raw Ember routes if people wanted to.\n. @viatropos I'll be able to help in a week or so.\nDid you take a look at my example Resolve.js for module loading? If we incorporate that into the system, it would greatly speed things up. All we have to do is provide a build task (except it doesn't take long at all), it would scan the file system and taking the pathname and the contents for each file and placing them like (After it has compiled the coffeescript):\njavascript\n// tower.js\ncontainer.module('path/to/file.js', 'javascripthere...');\nI'm thinking that this could workout really well in the end. The calls for require could also be kept, with a slight modification to the loader.\n(Oh and inside any dev tool, it'll seem like were loading individual files (all the modules) but in reality they are still all stored inside the single file as strings. https://developers.google.com/chrome-developer-tools/docs/scripts-breakpoints , goto 'Breakpoints in Dynamic JavaScript' for more information. It's really useful.)\n. Wow!\nI'll definitely have to re-read this a few times to really understand what's going on. But from the first read, it sounds pretty epic.\nI'm personally a fan of \"moving away from Rails' concept of controllers\" and defining Tower's way of doing things. This also means that the tag line \"modeled after Ruby on Rails\", goes out the window. But then people don't look at Tower and think, oh, it's just another Rails clone. \nI really do love how Ember does routing and incorporating the same concept within Tower would be insane. This would also split up the routes, which would become a lot cleaner, and this would allow a nicer Javascript API, which I love more and more after using CoffeeScript (not sure why...). This would mean that controllers (Rails' style) would be split up between the new \"routes\" and the new \"controllers\" or \"ResourcesController\", which would bring a LOT of power.\nBeing able to cache an instance of a router for each client, each with it's own stored contexts, such as ability, currentUser, etc.... I think this would simplify AND add a ton more power into Tower. Rails is a bit outdated tbh, and I think this could be a good switch to a unique style. \nIt also seems that there would be more emphasis on the client-resources (controllers, models, views, and templates) then the servers'. \nI was also thinking of maybe incorporating a mix-match language for the framework...Meaning you could write some files in coffeescript and others in javascript. Though this might confuse users, and make it less manageable?  But a thought nonetheless. That could also be a nice step stone for newcomers not really knowing Coffeescript too well. \nI give this two thumps up :+1:  :+1: \n. How big is this on the list? Is this planned for the next version? It seems like a big refactor would need to take place, but I'm all for it. Also, would improving the client-side development (Tower Source) be more important, to streamline the development process? I'll be testing Resolve.js with Ember.js, and then with Tower to see how we'll it performs, and how well it improves the workflow. Cause right now, it's kinda a pain working on anything client-side.\n. Sounds Good!\nI have a mixed feeling about coffee-script vs Javascript in node.js. Maybe it was the frameworks and methods used at the time, but Javascript felt ugly when modeled in a Ruby on Rails structure (That's before I learned Coffee-Script). After I've gone through and learned it, it made node.js very much more appealing, and plain, old Javascript was not fun to go back to. Now though, maybe because of Coffee-Script, Javascript feels so much better, and is super powerful. Maybe because I learned what Coffee-Script outputted and how good Javascript code was written. \nI'd be willing to go both ways (coffeescript or js), but going with JavaScript would seem simpler, and would require less of a hurdle when using the framework. \n. @edubkendo Completely understandable. I still really do love coffee-script and there's something about Tower and coffee-script that just fits. I'm not sure what Tower with vanilla Javascript would look like, maybe having two versions would help decide which is better for the framework. \nI'm not sure why people assume coffee-scripters don't know Javascript, it's a false view. \nA Question, or two, though: \n- Wasn't there an issue with caching controllers for each user, because you'd have to use (request, response, next) in each controller? \n  - Or has this been (theoretically) resolved, because of the router being cached as a whole within the Ember \"world\"?\n- Are controllers completely different now (going to be)? With the examples given here, it seems like postsController, for example, is just an alias to a cursor? Are we creating route controller's instead? or a mix of a new kind of controller (extremely slimmed down), and a route controller (not sure of what to call it). \nSo far, with my current understanding of this, seems to be extremely intuitive, though, it does bring some questions up.\n. So is everything going to be based on Ember? Server and client? For example, is the server's router implementation going to become similar to the client without most of the state management? \n. @edubkendo Well said. The main issue, as @viatropos mentioned, is the added complexity that coffee-script adds in the development of Tower. I'm personally one to go out of my way in terms of complexity if it gives me some benefit in the end. Nonetheless I feel like Ember is doing a great job creating an awesome Javascript API that doesn't try to make Javascript into something else, like rails, or ruby, with things like classes, constructors, etc... It, instead brings the Javascript way of doing things. Maybe that's why \"majority\" (I'll generalize here) of the nodejs community or Javascript community don't love coffeescript, as it's trying to turn Javascript into something it's not. \nEmber, on the other hand, is trying, in my opinion, to embrace the Javascript idioms. \nThough working with Ember inside coffeescript is a true pleasure, as it simplified the syntax a bit, using Javascript isn't that different and I'm getting to like it more as I use it. Sure the syntax is still C-like, but that's where my background comes from, so it's natural, I guess. \n. @viatropos Are you going to base the new router abstractions off of Ember's V1 routing or V2 (https://gist.github.com/3981133)? I guess a lot of people complained that the first implementation was too hard or something, not sure why, as it's fairly straightforward. \n. @edubkendo Tom Dale, one of the main Ember guys, said it would only become an option to use the new routing API. It's simply a semantic look that translates down to the current, so just an abstraction. Before I saw this, and before Tom tweeted it, people were freaking out, but both APIs will stay. One is just a more \"bare bones\" approach (Though it's not really complex, nor is it hard. It's basically a bunch of states, and connecting outlets most of the time), and the other is an abstraction on-top of the current system.\nNot sure if you knew that or not, but I thought I'd clarify just to make sure.\nI actually started trying to implement the new proposed Tower routing API against Emberjs and it's pretty easier to abstract Ember tbh. Though there is a lot of recursion and state management needed, I think it would be easier to build on top of the \"bare bones\" instead of the new one.\n. @viatropos Any progress on plans or implementation of the new stuff (router, js api, etc...)?\n. Sweet, sounds good. I love the new ideas, especially with the consistency\nin APIs.\nFor controllers, I tend to prefer the coffee script full classes (but in\nJavaScript) instead of embers hash api. Mainly because the hash doesn't\nexactly let you add custom things that are not properties but just some\nmethod call, like @on or something. Again, I think this would be solved by\nproviding a streamlined api.\nI'd like to volunteer for all the client-side stuff of Tower. I think if we\nreally split things up, well get things done a lot quicker and faster. I'm\nworking on a few things for the client side of tower,  one of which is to\nstreamline the development environment, which I think is an important next\nstep to make things a little more efficient.\nThen we could decide on a module system on the client side that works for\neveryone, AMD, CommonJS, and other optimization techniques like local\nstorage, hybrid-string, etc...\nOn Nov 24, 2012 7:23 AM, \"Lance Pollard\" notifications@github.com wrote:\n\nI personally am spending more and more time purely on the server-side\ndigging more into the data. I would love someone to take ownership of the\nclient-side stuff, that would help a lot. I'll make sure the router and all\nthe client stuff gets finished and is awesome and implements what we've\nbeen describing, but I'd like to focus more of my energy on the data. That\nwill all of course be integrated into Tower in some pluggable way down the\nroad. Cheers.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/pull/299#issuecomment-10678113.\n. @edubkendo Looks interesting.... Not sure how I feel about the new radical changes in their API, though, again, it's just a semantic addition to the current router. It certainly looks easier to use then the current one, everything is in one place. I'd still prefer the proposed Tower router API then Ember's new one. \n. @egeozcan We're actually basically rewriting Tower in JavaScript with different principles. Completely modular design (~40 separate npm modules). http://github.com/tower\n\nI can't give out a timeline, but things are taking shape.\n. Yup it's a common problem apparently. This also relates to the syncing for resources - create works but update and delete don't sync up. Might have to write those two methods.\n. Could you post your views? Specifically where the new link is?\n. Did you generate through scaffolding?\n. mmm. I'm assuming you are using views within the templates directory? When I used the scaffold it generated all of the required files including *new.coffee. When I rename the new.coffee file the app doesn't break....... I'm probably too tired and doing something wrong. If no one gets to this by the morning i'll take a shot.\n. Right now tower is extremely tightly built around ember. To support angular\nwould require full modularization. But, you don't really use Ember\ndirectly, tower abstracts most of it so I'm not sure if supporting angular\nwould do anything.\nOn Jan 9, 2013 8:50 AM, \"philip andrew\" notifications@github.com wrote:\n\nI think that being restricted to Ember is one reason that people might\npass this project on.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/310#issuecomment-12050162.\n. Tower is built around Ember.js since the beginning. It uses Ember.js on the client-side and server-side (using the object system, etc...). The only way to support Angular would be to modularize Tower completely and that would require it to be completely re-designed. Right now Ember is the only framework supported, because everything works around Ember and it's design, especially the object system, data syncing, etc...\n. I find Ember.js a lot better then Angular, one of the reasons is because Ember's view system is completely separate from the DOM (string-based templates), while angular is forced to be tied with the DOM which makes pre-compile templates not possible. Having string-based templates allows you to manipulate it and pre-compile it on the server-side where there is no DOM. Just one example of the differences.\n. Yes, we are going to spend lots of time on marketing, polishing, etc... website, documentation, tutorials, and screencasts are all on the list. \n. Yes. This is because Tower's package.json has: (https://github.com/viatropos/tower/blob/master/package.json#L126) \n\n\"scripts\": {\n    \"test\": \"make test\",\n    \"start\": \"grunt start --config ./grunt.coffee\",\n    \"docs\": \"make docs\",\n    \"postinstall\": \"$(./bin/dependencies)\"\n  }\nWhen you install tower it would run these scripts. The postinstall is the issue as it uses bash functionality. The $ and the ./ are specifically bash. The ./ runs a script locally inside /bin/dependencies/. \nTo solve this you could \ngit clone git://github.com/viatropos/tower.git tower\nThen edit the packages.json everything inside the scripts key. Make is again not available on windows by default. This is a unix functionality. \nAfter editing the file, open cmd and cd into the tower directory that you downloaded through git.\nType this:\nnpm link\nThis will link tower globally through npm. Then when you create an app:\ntower new app_name \ncd app_name\nnpm install\nNow again within cmd after installing the modules type:\nnpm link tower\nThis will link the edited tower version against this app instead of the default tower module that npm install will download.\nHope this helps.\n. @ginsent What went wrong? viatropos and I fixed some of the issues but some still remain.\n. mmmm. I'm running the same command and it returns fine.\n. After trying it inside cmd it does end up failing. I'm guessing that tower on npm isn't up-to-date with the github version. I had replaced the command $(./bin/dependencies) yesterday and if you look in the packages.json file within the scripts: {} it now uses make install-dependencies instead to work with windows.\nFor now until npm is updated you'll have to do some manual tuning. \nFirst clone the github tower repository and cd into the new directory:\nbash\ngit clone git://github.com/viatropos/tower.git tower && cd tower\nNow run:\nbash\nmake install\nOnce it's finished installing all the dependencies link the local tower repo globally against npm:\nbash\nnpm link\nThis should install tower. There are a few more bugs that you'll run into when running tower on windows. I'm trying to sort them out, but until then you can somewhat install tower.\n. mmmm. That's a little bit weird. When I run npm link I get:\n```\nC:\\Users\\Daniel\\Documents\\Projects\\tower111>npm link\n\nchokidar@0.4.0 postinstall C:\\Users\\Daniel\\Documents\\Projects\\tower111\\node_modules\\chokidar\nnode setup.js postinstall\nfibers@0.6.9 install C:\\Users\\Daniel\\Documents\\Projects\\tower111\\node_modules\\fibers\nnode ./build.js\n\nwin32-x64-v8-3.11 exists; skipping build\n\ntower@0.4.2-4 postinstall C:\\Users\\Daniel\\Documents\\Projects\\tower111\nmake install-dependencies\n\nmake: `install-dependencies' is up to date.\nC:\\Users\\Daniel\\AppData\\Roaming\\npm\\tower -> C:\\Users\\Daniel\\AppData\\Roaming\\npm\\node_modules\\tower\\bin\\tower\nC:\\Users\\Daniel\\AppData\\Roaming\\npm\\node_modules\\tower -> C:\\Users\\Daniel\\Documents\\Projects\\tower111\n```\nTo address the process hanging I found the issue once again. It's within packages/tower/server.coffee#92 and I and viatropos added some windows specific root path trigger but it appears the pull request didn't get the change or I might not have added it. I'll quickly push that up among other fixes to make Tower work on windows.\nI'll keep you posted. I just pushed the fixes to my fork of Tower and submitted a pull request. Until it gets accepted you can clone my repo instead: git clone https://github.com/TheHydroImpulse/tower\nThe procedures are the exact same, hopefully you won't get any errors. \n. Windows now somewhat fully works on my end. There might be one last issue in terms of the controllers but other than that it's fully functional!\n. The latest pull request I submitted should fix one of the regular expressions on windows.\n. @pashaie @liferealized What terminal are you guys using? (cmd, powershell, cygwin, or git bash?) \nFor starters make does not work on git bash even if you have the actual make installed.  (at least in my case it doesn't. Possibly a git bash issue.)\nSeems a little strange that some people can't get make.bat to work but others can. I'm running it perfectly fine with both make install and make.bat. Even all the commands such as make watch still work. \nIt might be an issue with which.bat or where. The bat file make.bat I made uses where, an actual windows default program. Try opening cmd and typing where make. \nI've noticed that if you have ruby's devkit installed, it has it's own make program. I'm not sure if it's the same as others but it could be the culprit. \nIf you have the devkit installed, running .\\where make (powershell), where make (cmd) you receive two locations both on separate lines. \nC:\\Users\\Daniel\\Documents\\Projects\\TowerSource>where make\nC:\\Users\\Daniel\\Documents\\Projects\\TowerSource\\make.bat\nC:\\RailsInstaller\\DevKit\\bin\\make.exe\nThe bat file make.bat will choose the first line it finds. So in this case it will run the make.bat. But if you run which.bat make, the results will be inverted and will run devkit's version.\nTry running (inside the tower directory) where make and comment the result. \nTry running (inside the tower directory) which.bat make and comment the result.\nFinally, try editing the make.bat file and replacing the contents on line 10 with:\nFOR /F \"\" %%i in ('which make') do SET PPath=%%i\n. @pashaie No worries. Glad to be of assistance. \nDid you try running: where make and which make? Try those and copy the results here, that will give quite a bit of info.\n. That's a bit odd as not having any make programs in the path works on azure. I'll be sure to add that in the documentation; to add either devkit or windows make. \nahh yes that error is windows related. Are you running the latest Tower version (0.4.2-13)? I'm pretty sure my pull request (that was accepted yesterday) fixed that error but I'm not sure. Nevertheless I was able to fix that error. If not on the pull request then locally. \n. @viatropos I'm working on a much better bat file as there was the recursion problem when no make.exe was found.\nRight now I've gotten an alternative to the makefile for all the installation stuff (node .\\bin\\install dependencies) but only outputs \nnpm install stylus uglify-js mocha chai sinon eco mustache jade kue mongodb coffeecup gzip chokidar knox socket.io socket.io-client fibers cli-table ttys cheerio colors mime async mint qs crc express URIjs moment node-uuid geolib validator accounting ember-metal-node ember-runtime-node ember-states-node coffee-script useragent gm temp connect fresh grunt-contrib-less\nBut never executes it. How did we fix this previously? I kinda forgot...\n. @haustraliaer I'll be submitting a pull request soon that will resolve this problem. \n. @viatropos nvm got it.\n. It works for me on windows , not sure about anyone else.\n. The errors in the first post is probably because of the installation change after I had made the new make.bat but I'm not 100% sure. It does seem like something's outputting an acii table with instructions or help menus and it's trying to execute it. I'll take a look at it tomorrow sometime. \n@ginsent Does everything else work?\n- Generating a new app?\n- Running cake watch?\n- Running node server?\n- Testing the demo app in the browser?\n. You'll need to install ejs globally: npm install ejs -g.\nCake is a task or built tool that comes shipped with coffeescript. If you have coffeescript, you'll have cake: npm install coffeescript -g\nThat should take care of the errors. If you have any more module not found errors, try installing them manually with the -g flag.\n. @haustraliaer FYI the towerjs website is outdated and may not work. Are you running the scaffolding command within a tower application? Sometimes it can be skipped to cd into the directory first. Also you would need to run npm install after you cd into your new app directory. \n. @viatropos I'll take a look at the make.bat file. If it works on multiple machines then we can put the postinstall back in. Is this the last thing until 0.4.3?\n. @ginsent Nice! So everything works now?\n. The paths seem right. If you take a look at public/javascripts you'll see a vender folder and within that, you'll see another javascripts folder. \nDid you run cake watch before running the server? It happened a few times to me.\nAnd that error isn't an issue just a warning that you won't get the native (C / C++) module version. Instead you'll get the Javascript that is completely functional. The difference is just speed as stated in the message. If you want it to install the native modules, you'll need python, and Visual C++ 2010 (Though the 2012, renamed from 2011 beta, has the ability to use the 2010 compiler and features but it may not work correctly.). \n. I guess @viatropos beat me to it! lol\n. There is currently a small error when generating a new app (within windows of course) and running \nbash\ncake watch\nafter running:\nbash\nnpm install\nError\nC:\\Users\\Daniel\\Documents\\app_test>cake watch\nCreateProcessW: The system cannot find the file specified.\nIf you search it up you find that it's apart of grunt: https://github.com/cowboy/grunt/issues/155\nJust thought people should know that there is still a wall before working on windows but this might not be tower's fault. \n. What doesn't work on mac? I'm trying it on mountain lion and so far everything seems fine.\n. Yeah that works but just running node bin/dependencies does print out text and it's because of the missing $(). Writting $(bin/dependencies) or $(./bin/dependencies) works fine.\n. @viatropos No worries. Helps expand things a little.\n. But I guess that brings us back to the original problem.\n. Ok. Yes the make install-dependencies does work and I changed that in the new pull request.\n. So path != _path.sep instead of path.sep.length > 1?\n. @viatropos Ok I think it may work now. Try this: \ncoffee\nwhile !Tower.testIfRoot(path) && path != _path.sep && !path.match /^([A-Za-z:]*){2}/`\n. Because windows uses drives the root path is never / or \\. When I printed every loop and it's value it ended up printing: C:\\. But not everyone's master drive is C:\\. Try to see if that works.\n. It works on mountain lion so far.\n. Yup that works too.\n. Not sure how to remove that one commit....\n. Ok so having:\ncoffee\nconsole.log @constructor.toString, @\nReturns: https://gist.github.com/3808368\ncoffee\nconsole.log @constructor.metadata()\nReturns: \nProcessing by ApplicationController#index as HTML (GET)\n  Parameters: { action: 'index', format: 'html' }\n{ className: 'ApplicationController',\n  resourceName: 'application',\n  resourceType: 'Application',\n  collectionName: 'application',\n  params: {},\n  renderers: {},\n  mimes: { json: {}, html: {} },\n  callbacks: {},\n  helpers: [],\n  belongsTo: [],\n  subscriptions: [],\n  layout: undefined,\n  scopes: {},\n  scopeNames: [] }\ncoffee\nconsole.log _.keys(App)\nReturns:\nProcessing by ApplicationController#index as HTML (GET)\n  Parameters: { action: 'index', format: 'html' }\n[ 'app',\n  'server',\n  '__ember1349037332463_name',\n  'io',\n  'isStacked',\n  'Post',\n  'User',\n  'ApplicationController',\n  'PostsController',\n  'UsersController' ]\n. My routes:\ncoffee\nTower.Route.draw -> \n  # @match '(/*path)', to: 'application#index' \n  @match '/', to: 'application#index'\nI had tried scaffolding other controllers but the output was the exact same. I also tried the welcome action vs the index action and it returned the same output. And yes there is an index method defined.\n. Yup that fixes it! Thanks!\nI just copied the contents of my server controller to the client and things ran as expected. There is just one small issue left in the watcher on windows... everytime you change a file the server will exit with an error stating: \"\nSyntaxError: Invalid regular expression: /\\client\\/: \\ at end of pattern\" but i'll take a look at it.\nSo it seems windows indeed works.\n. Well so far I fixed the regular expression by changing it to: @fileUpdated(path) unless path.match(\"\\#{_path.sep}client\\#{_path.sep}\") not sure if that will do it but it works for now.\nI tried adding a posts resource generated by the scaffolding. It only has a @scope 'all' and a destroy method and it works. But trying the same thing within the ApplicationController on the client leads to more errors. It seems the application controller needs to have it's methods defined such as the bootstrap and welcome method identical to the server. Maybe it's not reading the server's version?\n. Oh and a question... What's the benefit of changing coffeescript's way of achieving classes? \nOk so I now I see why it's failing here. The coffeescript is being compiled but not properly. For some reason it's not wrapping a self invoking function around the rest of the compiled Javascript. Adding it manually fixes the whole problem. Not sure how this could be related to Windows as I've never experienced this on any other platform.\n. ``` coffee\nclass App.ApplicationController extends Tower.Controller \n    index: ->\n        @render 'welcome'\n```\nCompiles to:\n``` javascript\nvar defineProperty = function(clazz, key, value) {\n  if (typeof clazz.__defineProperty == 'function') return clazz.__defineProperty(key, value);\n  return clazz.prototype[key] = value;\n},\n  __hasProp = {}.hasOwnProperty,\n  __extends =   function(child, parent) {\n    if (typeof parent.__extend == 'function') return parent.__extend(child);\n    for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } \n    function ctor() { this.constructor = child; } \n    ctor.prototype = parent.prototype; \n    child.prototype = new ctor; \n    child.__super = parent.prototype; \n    if (typeof parent.extended == 'function') parent.extended(child); \n    return child; \n};\nApp.ApplicationController = (function(_super) {\n  var ApplicationController;\nfunction ApplicationController() {\n    return ApplicationController.super.constructor.apply(this, arguments);\n  }\nApplicationController = __extends(ApplicationController, _super);\n__defineProperty(ApplicationController,  \"index\", function() {\n    return this.render('welcome');\n  });\nreturn ApplicationController;\n})(Tower.Controller);\n```\nwhen every other controller, for example the 'posts' controller compiles to:\n``` javascript\n(function() {\n  var defineProperty = function(clazz, key, value) {\n  if (typeof clazz.__defineProperty == 'function') return clazz.__defineProperty(key, value);\n  return clazz.prototype[key] = value;\n},\n    __hasProp = {}.hasOwnProperty,\n    __extends =   function(child, parent) {\n    if (typeof parent.__extend == 'function') return parent.__extend(child);\n    for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } \n    function ctor() { this.constructor = child; } \n    ctor.prototype = parent.prototype; \n    child.prototype = new ctor; \n    child.__super = parent.prototype; \n    if (typeof parent.extended == 'function') parent.extended(child); \n    return child; \n};\nApp.PostsController = (function(_super) {\n    var PostsController;\nfunction PostsController() {\n  return PostsController.__super__.constructor.apply(this, arguments);\n}\n\nPostsController = __extends(PostsController, _super);\n\nPostsController.scope('all');\n\n__defineProperty(PostsController,  \"destroy\", function() {\n  return this.get('resource').destroy();\n});\n\nreturn PostsController;\n\n})(Tower.Controller);\n}).call(this);\n```\nAs you can see the ApplicationController doesn't have a wrapping:\n``` javascript\n(function(){\n}).call(this);\n```\nWhich would make sense why it's not working as it's not being called.\n. Error:\nTypeError: undefined is not a function\n    at Tower.ControllerInstrumentation.process.block (C:\\Users\\Daniel\\Documents\\tower_3\\lib\\tower-controller\\shared\\instrumentation.js:60:16)\n    at Tower.SupportCallbacks.runCallbacks (C:\\Users\\Daniel\\Documents\\tower_3\\lib\\tower-support\\shared\\callbacks.js:71:15)\n    at Tower.ControllerInstrumentation.process (C:\\Users\\Daniel\\Documents\\tower_3\\lib\\tower-controller\\shared\\instrumentation.js:71:17)\n    at Tower.ControllerInstrumentation.call (C:\\Users\\Daniel\\Documents\\tower_3\\lib\\tower-controller\\shared\\instrumentation.js:47:17)\n    at Function.Tower.NetRoute.NetRoute.reopenClass.findController (C:\\Users\\Daniel\\Documents\\tower_3\\lib\\tower-net\\shared\\route.js:99:20)\n    at Function._.extend.find (C:\\Users\\Daniel\\Documents\\tower_3\\lib\\tower-middleware\\server\\router.js:20:27)\n    at Function._.extend.render (C:\\Users\\Daniel\\Documents\\tower_3\\lib\\tower-middleware\\server\\router.js:23:28)\n    at C:\\Users\\Daniel\\Documents\\tower_3\\lib\\tower-middleware\\server\\router.js:11:37\n    at Tower.Application.Application.reopen._loadApp (C:\\Users\\Daniel\\Documents\\tower_3\\lib\\tower-application\\server\\application.js:348:16)\n    at Object.Tower.MiddlewareRouter [as handle] (C:\\Users\\Daniel\\Documents\\tower_3\\lib\\tower-middleware\\server\\router.js:10:41)\nOk so I guess it's not the wrapping function but it seems that Tower is trying to load the client controller action instead of the servers. When I have a blank client ApplicationController it leads to the previous error. But when I mach the server controller's method ApplicationController#welcome and define it within the client it works without any errors. Also the coffeescript is being compiled correctly. \n. PostsController\nServer: app/controllers/server/postsController.coffee\n``` coffee\nclass App.PostsController extends App.ApplicationController \n  @param 'title' \n  @param 'body' \n@scope 'all' \n```\nClient: app/controllers/client/postsController.coffee\n``` coffee\nclass App.PostsController extends Tower.Controller \n  @scope 'all' \n# @todo refactor \n  destroy: -> \n    @get('resource').destroy() \n```\nApplicationController\nServer: app/controllers/server/applicationController.coffee\n``` coffee\nclass App.ApplicationController extends Tower.Controller \n  @layout 'application' \n@param 'page', type: 'Number', allowRange: false, allowNegative: false \n  @param 'limit', type: 'Number', allowRange: false, allowNegative: false \n  @param 'sort', type: 'Order' \n  @param 'fields', type: 'Array' \n  @param 'createdAt', type: 'Date' \n  @param 'updatedAt', type: 'Date' \n@beforeAction 'bootstrap'#, only: 'welcome' \nwelcome: -> \n    @render 'welcome', locals: {@bootstrapData} \n# Example of how you might bootstrap a one-page application. \n  bootstrap: (callback) -> \n    data = @bootstrapData = {} \n# for every model you add, you can add it to the bootstrap \n# dataset by using this async helper. \n_.series [ \n  (next) => App.User.all (error, users) =>\n    data.users = users\n    next()\n  (next) => App.Post.all (error, posts) =>\n    data.posts = posts\n    next()\n], callback\n\n```\nClient: app/controllers/client/applicationController.coffee\ncoffee\nclass App.ApplicationController extends Tower.Controller\nOh and these are all generated resources. I haven't introduced custom code so that shouldn't be a problem.\n. That makes a lot of sense as to why it didn't work before. I'll try it in a little bit...\n. @viatropos Is the npm version up-to-date with github's?\n. I've had this problem before so i'll try to remember what I did to fix it...\nWhat OS are you using? (Mac?)\nDid you install grunt globally? sudo npm install grunt -g\nTry running grunt directly and skip cake: grunt start --config ./grunt.coffee\n. There is no problem. The process runs in a 'loop' so to speak. It needs to keep watching the file system for changes in each file (add, delete, update). \nSo it seems like your good to go. The normal environment as suggested by @viatropos is to have a terminal window for each project. Inside each terminal window you'll have a minimum of two tabs: Node.js Server, and cake watch process. You could have another tab for using other cake commands and / or scaffolding feature. It may seem a little strange at first having to run a separate command to watch for changes but that's how it's done.\n. While Tower is not \"production\" status right now (there are still stuff missing and some optimizations. So 0.5 would be straight production mode?)\n1. If your only implementing an api then you have a few options. Using tower is one of them.\nHonestly building an api in solid express would work. You would just need to abstract a routing system and combine an orm of your choice. \nTower would be the simpler choice as it already has the routing in place as well as really good data export (json, html, etc...)\n2. I haven't done any benchmarks on Tower so I have nothing to compare it. But I don't see any immediate problems in terms of performance. I believe version 0.5 will have a tone of optimizations done.\n3.  Again haven't done any benchmarking but the orm seems solid in Tower. There are no many-to-many direct relationships (last I checked) because of poor performance. Instead you use a third model to link two other models. This is just an example of a performance boost done to the orm using mongodb.\n4. Extending Tower is fairly easy. Because Tower is built on express and connect your able to create your own middleware. In https://github.com/viatropos/tower/blob/master/test/example/app/config/server/bootstrap.coffee your able to define custom connect / express middleware.\nIf you need complete custom functionality that isn't built into Tower you can always modify Tower's source code and patch where needed. It may take a little while to learn how the system works and what does what, but after that you should be able to mod where needed.\nTry building simple Tower apps or start the api in Tower. If you like the system and how things work then go for it, otherwise you can always fallback on express / connect.\n. @edubkendo Doing exactly what you pointed out. Contributing to Tower as much as I can so that I can use it to build some of my applications. Instead of rolling my own, or going with another framework (Rails), I would much rather contribute to a growing community.\n. What didn't work with cake watch?\n. Can you close the issue?\n. No Worries.\n. I haven't tried this on unix so let me know.\n. Sorry for all the independent commits. \n. I actually rather have that in the model tbh. As background jobs are a type of data source. Maybe a mix of both?\nInstead of only having the controller have the control, maybe let the model have the hooks. So you would listen through the model?\nMaybe we could implement some helper functions in the controller for jobs.\n``` coffee\nclass App.VideoController extends App.ApplicationController\n  App.Job.On 'upload', 'upload'\nupload: (job) ->\n    # This could be a client-side controller that would then present\n    # a message to the user in some way.\n```\nA mix of models and controllers would be perfect but we would need to find the perfect api..\nThoughts?\n. But I also think that the controller should be responsible on acting on events. In this case it would easily allow a client-side controller to present another view, partial, or popup message. The controller could call a particular view class to act on the given data.\ncoffee\nclass App.ApplicationView extends Ember.View\n  uploadComplete: (job) ->\n    # Now you can update the current view to include some sort of alert (popup, partial, transition to a different view)\n    # You can then access the correct data through `job`.\n``` coffee\nclass App.VideoController extends App.ApplicationController\n  App.Job.On \"upload\", \"upload\"\nupload: (job) ->\n    # Call the view object\n    # Or create a new flash message:\n    @flash \"success\", \"Your video has been uploaded. You can view it here -> #{job.video.url}\"\n```\nIn this particular example a specific user uploads a video. Because you don't want to send out this event to all connected users, this could be plugged into a constraints system. The job itself would pass a constraints based on the job type. In this case it would use an Constraint.Authentication or maybe even Constraint.Authorization to check if the user is allowed to view the model (Video). \nThis would be a very nice addition and would make developing these types of application extremely easy! You specify a few controllers, views, and jobs to process the data / upload files and you've got a working demo.\nThoughts?\n. Sounds good, I like where this is headed. \nServer Controller Caching: I thought of this as well and it may be simpler not to have it honestly. Dramatically changing the api and constantly adding boilerplate code might not be the best of options but we'll see. Maybe down the road it could be a possibility.\nView Caching: It seems like the negatives out weigh the positives in terms of caching. The data-bindings atm seem like a solid one.\nSo I guess it pretty much comes down to Networking (Sockets, Ajax), Authorization, Authentication, and client-side controller caching and model \"caching\" (not really caching but still). \nBecause the client will only have one connection, it [api] may be different in some places. Though in the controllers, models, and views it will all be the same which will make things extremely easy. This will also simplify background jobs, uploads, and other modules that could use this functionality. \nHaving everything inside the App object is a lot cleaner. Things like App.connection.user or App.connections.user could access the global repository or directory of all connected users. This would possibly increase speed when working with authentication and authorization by caching it between requests. \nSo I guess the next step is planning the implementation of such centralized system. \n1. Refactor Tower.NetConnection and Tower.connections to be used in a centralized manner\n2. Create the interfaces for storing, accessing, and managing all the resources. Should it be Tower.Manager or something?\n3. Make it easy for modules to plug into this interface. For example the authentication, and authorization modules. (But these will most likely be manually implemented at this stage)\nWe can start with the sockets and add more things as it comes. But this would greatly change some core Tower stuff. Should this become another branch to build and make it work? Once it's stable and fully works in all conditions it could be merged into master?\nThis could add some really awesome things into Tower imo and could get better.\n. @edubkendo By Tower core I meant networking (sockets, ajax, etc..).. I kinda count that as being core. But yes I do agree with leaving the controllers and views alone. It won't bring too many benefits right now. \nThis would bring a huge win imo to Tower. \n. @viatropos Yeah we'll have to get the naming right, but we can always change it later. I'll work around Tower.Manager and see where it goes in terms of naming. \nThanks for the tips on branching n' stuff. I think implementing in smaller working chunks would be easiest. \nI'll keep you posted on thoughts, ideas, etc... (I typically write everything in google docs first. Makes it 100% easier)\n. So I've been thinking on how to best approach this. I messed around with a few things and here is where I got to.\nThe first goal is to bring a level of centralization to the mix. Knowing exactly where each instance is at all times in all environments (testing, in a controller, in a model, etc..). So basically this is essentially a service locator pattern. This has both pros and cons in it-self. It really becomes a registry type model. (every time I hear that term I think of goddamn Windows and it's bad design. lol) \nFor staters, this isn't bad. It's just very limited on what it can do. The next option would be dependent on if you like it or not as it's quite different and it seems like it's not very used in the node.js world, though other platforms heavily use it (more noticeably static typed language.)\nDependency Injection would be perfect to fit the bill. Having a DiC (Dependency Injection Container) that would control (in the single context as you could have many containers running at the same time) the dependency injection. \nImagine having a simple controller like the following:\ncoffeescript\nclass App.ApplicationController extends Tower.Controller \n  index: ->\n    # Some Database call on the users model...\n    @render 'index'\nLet's say you want to test view rendering within a controller. This would create problems as your depending on the database statically here (kinda). This means your not actually testing the view rendering in your controller but also the dependency it has on the database. If the database fails then so does this test.\nA nice solution would be to use a DiC and have some mock objects. You could then nullify the database component in your test code while leaving all your controllers or actual logic alone. \nHere's an example on retrieving or resolving a component:\ncoffeescript\nContainer.resolve(\"Controller\") # Returns the controller object / instance. \nContainer.resolve(\"Controller\").index() # Loads the index method and fails because of the database.\nContainer.mock 'Database', new (class Database\n  find: ->\n    null\n)\nContainer.resolve(\"Controller\").index() # Passes successfully because the database doesn't perform any actions.\nYou could extend this much further by offering a deep-nesting of dependencies. So you could have a chain of dependencies like \nApp -> Router -> Controller -> View -> Template -> Response ....\nBut in each and every file you wouldn't have any require calls. You wouldn't have any explicit class calls. You would just in turn go to the container to retrieve and resolve the dependencies. \nOf course that syntax may not be \"pretty\" so you can have an alias like:\ncoffeescript\nApp.Controller # = Container.resolve(\"Controller\")\nApp.Router # = Container.resolve(\"Router\")\nThough again this doesn't eliminate the need for a socket manager, but you could easily implement that as another dependency. This also allows for lazy-loading and file maps for all your dependencies (possibly even creating a graphical map outlining everything...mmmmm). \nI just wrote a quick DiC / IoC library for this: https://github.com/TheHydroImpulse/Ettore and so far all the features mentioned here are all functional and working (though I still need to create some tests for them). \nNext features I'll probably implement are:\n- Asynchronous model\n- A better string storage model (You could use this to store currentUser or something)\n- Promises \nThoughts?\n. Exactly! Most frameworks apart from ones built using static typed languages typically hide the DiC. And for some reason, dependency injection is a lot harder to wrap your mind around it. Maybe because it complicates things at first to make it easier in the end, but it is a hard pattern to learn. \nThis would definitely make it harder for people to get going with Tower if we mention dependency injection everywhere. We could however have an \"advanced\" page where users comfortable with the topic could learn more about how it works in Tower. \nSo technically it would seem like a service locator, acting like a bunch of setters and getters through a centralized object. This is fairly easy to understand and is pretty simple to get going with as it's pretty much everywhere. Users would also not need to know about the DiC (Dependency Injection Container at all or it's components. Users would just naturally use the front interface:\n``` coffee\nApp.get(\"Tower.Controller\")\nor\nApp.resolve(\"Tower.Controller\")\nor\nApp.Tower.Controller\nor\nTower.Controller \nYou could have a number of global objects outside of the app but this would just become an alias. But would make things a little easier.\n```\nIn testing however users could have access to the \"mocking\" or \"faking\" functionality of a DiC without actually knowing much about it. Though we would have to explain it to them in a way that isn't strange or weird.\nIn the end this could be a very powerful pattern to work with, if it's done right. I'm gonna research some more about DiC and many techniques used by other frameworks.\nAlso this wouldn't be hard to change in Tower as it's a change as you go type of thing. Some things would need to be changed together of course, but overall you could easily incorporate the DiC without much trouble. This also has the ability to lazy-load modules. Though i'd have to look at the file watcher system a little more to really understand how things are uncached or \"reloaded\" so that it could be brought into or tied into the DiC.\n. @viatropos So I've been improving the IoC library that I'm making to allow a bunch of useful features. https://github.com/TheHydroImpulse/Ettore\nRight now it supports:\n- Get / Resolving dependencies\n- Mocking objects\n- Asynchronous Resolving (More efficient on large objects or databases for example)\n- File Maps\n- Lazy-Loading files\n- has function to check if a module exists.\n- Promises (Still working on this)\n- Aliases (Still working on this)\nAlises\nThis is a cool feature that let's you mimic an array and object. Meaning:\n``` coffeescript\nIoC.resolve(\"Tower.Controller\")\nwould be the same as writting:\nTower.Controller\nor\nApp.Tower.Controller\nor\nApp.Controller\n```\nYou'll be able to define how the aliasing works and the naming of it's objects. But in reality calling:\ncoffeescript\nApp.Controller\nwould effectively (in the background) run:\ncoffeescript\nIoC.resolve(IoC.alias(\"Controller\"))\nSo this could lead to pretty powerful stuff, and in the end, you don't actually touch the IoC up-front, as it's all behind the scenes.\nThough I want it to be 100% tested before it goes into Tower or before I start implementing it, into Tower.\n. I'll that check that out, thanks.\n. Ok so a little update on the progress....\nI never knew how much power Javascript has with the new harmony proxies. Unfortunately not all browsers or javascript engines support this new feature. Node (Because V8 supports it) has it built in, but you need to add a run flag to enable it (kinda a pain). Luckily there are a few libraries out there for browsers and node (node-proxy) to make sure this feature is available. Mainly because Aliases in my library needs this feature. \nSo I've been working on the aliasing feature letting you do:\ncoffeescript\nTower.Controller.Action\nwhich actually runs (in the background)\ncoffeescript\nIoC.resolve(\"Tower.Controller.Action\")\nAs of right now, this successfully works! (albeit a couple of bugs that I need to fix)\nThe api of creating an alias is very simple and it allows you to control the naming in the end.\nSo for example, let's say you have the following component:\ncoffeescript\nIoC.set \"Tower.Controller.Action\", \"Success!\"\nMaybe you don't want to use the full long Tower.Controller.Action every time to access it. Well, with aliases you can define the top-level namespace you want to start with:\ncoffeescript\nController = IoC.alias \"Tower.Controller\"\nYou can now access the same component with:\ncoffeescript\nController.Action # = \"Success!\"\nThis lets you have a lot more power over your objects and you can create a slew of namespaces. I believe before you had shortened Tower.Net.Connection to Tower.NetConnection because of javascript objects vs how ember works. I'll have to experiment to know for sure, but I'm thinking you might be able to use traditional naming conventions without shortening the name because they are all stored as strings and are all individual objects.\n. So there are a few issues in this technique, but I'm seeing, if there are other solutions out there. \nFor starters, there is a limitation on the following issue.\nWe need to find a way to find a difference in the following two calls:\nTower.Controller.Action\nTower.Controller.Action.Index\nBecause if the first returns a dependency, then we can't call other aliases on it. In this example, the '.Index'. As this system works on a recursive design always returning a proxy object. So we need to somehow, need to find a difference in the previous call, because if we are wanting the Action dependency, we return that, but if we need the Index dependency, then we need to return a proxy object on Action, to be able to call Index.\nKinda a weird problem, but for now we need to use a sorta promise method to return the dependency, if there are naming conflicts in part of the fully qualified naming.\nTower.Controller.Action.then ->\n    @get # returns a valid dependency.\nTower.Controller.Action.Index # returns a valid dependency.\n. Ok, I have a kind of buggy solution, but one that might work under certain naming conventions. \nThe rule of naming currently is plural vs singular fashion. This is only one naming option available.\nSingular - Getting Dependencies\nIf you want to access the dependency, you would use the singular version of the word.\ne.g\ncoffeescript\nTower.Controller # Returns dependency\nPlural - Chaining\nTo continue going through the proxy chain to go deeper in naming to access another dependency then you use a plural version of each word.\ne.g\ncoffeescript\nTower.Controllers.Action # Returns a dependency, because \"Action\" is singular, but keeps the chaining going because \"Controllers\" is plural.\nI guess for now this would work, until I can find a better alternative. But also keep in mind that the \"actual\" stored naming is not effected by the different of plural vs singular.\n``` coffeescript\nThe keys are the same as before with traditional naming conventions. Only calling these dependencies through\nthe aliasing feature will you have to use; plural vs singular methods.\nIoC.set \"Tower.Controller.Action\", {default: \"index\"}\n``\n. I'm really digging that installation setup! Will definitely help people out when they adopt to Tower.\n. I'm guessing this a path issue. [Line #34](https://github.com/viatropos/tower/blob/master/packages/tower-application/server/application.coffee#L34) shows it's using static path separators instead of_path.sep`, but because your on a unix platform the separators should be correct. \nTower.root could be the culprit as we had issues with it in the past. I had updated that section to work on windows and mac osx but maybe ubuntu was failing on it. \nI'll fire up my vm of ubuntu and see if I can't replicate the problem.\n. Just a side note: The towerjs website is extremely outdated. You should use https://github.com/viatropos/tower the instructions here (though they may be the same in some places it's still best to make sure)\nI'm assuming you have installed tower globally? I believe i've had this error a while back but forgot to how I fixed it (I should write it down!). \n. Yes the gyp (build tool for native modules - though not exclusive to node) will most likely fail if you don't have python and visual studio build tools. If it fails it will use the non-native version which is perfectly fine. \ncake watch is an alias command to grunt start --config ./grunt.coffee (grunt is also a build tool but in javascript) which watches your coffeescript files for changes. It will always say \"Waiting...\" as it's waiting for an event to happen (add file, delete or update your files). This is a common technique called hot push, live reload, etc... and makes it possible to \"refresh\" your node server without restarting it or losing connections.\nWe should probably update the docs to mention this as many people were wondering about this. So you need to keep cake watch open when your running your server. You will then (after running cake watch) start your server in another tab, or terminal window. \nIn windows this is a slight problem as by default cmd, powershell does not have tabs or much customization options. (I personally think the DOS system is pure crap compared to the unix shell - which is amazing!) \nYou can download a program called \"Console2\" which is better alternative to powershell, and cmd. It supports tabs and many customization options albeit missing some aesthetic touch.\nAlso the npm install command shouldn't take that long, though it does run several other dependency commands that are unique to tower which do add up. It should take around a minute to complete as far as I can tell. \nYour database is not the problem. Tower will automatically connect to mongodb if it's running on the default port. A nice no-config solution.\n. Can you find that template file or does it really not exist?\nA little bit odd, but when you generate a resource through the scaffolding feature it should generate the templates within  app\\templates\\shared\\users\\ for example. Within this folder you should have some partial and method views. \nIf you cannot find these files or they do not exist, try deleting that app and try to re-generate everything. Sometimes this fixes it. \n. Ok so I went ahead and tried the same thing with the new version of tower and also get the same error. When you generate new resources be sure to restart the server and the cake process. This will fix a lot of the missing js errors.\nI'll try to go through and see what is happening...\n. Ok sounds good. I'll start with the DiC or Centralization which might solve the lazy-loading. But i'll see if and how require.js would fit into the system.\n. I believe I found a good alternative to require.js that would provide an EXTREMELY fast lazy-loaded (by default) system. It's used by many of the ember.js guys, in their development environment. \nSo right now let's say everything is concatenated into a single file. When a user visits the webpage, the script is downloaded into a single HTTP request. Just downloading contains two parts; latency, and download. On, let's say, an iphone 3, the latency and downloading, accounts for over 1/4th or 1/3rd of the total time. \nAfter downloading a Javascript file, you need to parse it which also takes into account for 1/6th, if not a 1/5rd of the total time. The last part is the evaluation, which takes most of time. \nWithout Caching\n\nThis is all done when loading a page and before any actions can occur. \nWith Caching\n\nLoading JQuery\n\nAs you can see, this is a huge drawback! All this evaluation and parsing is done on EVERY SINGLE PAGE REQUEST!\nThe Solution\nWhile lazy-loading the downloading isn't the solution, as there are many problems that can occur and you end up paying twice as much in bandwidth then a single file.\nThe solution is to instead, store each module within a string:\ncoffeescript\nmodules = []\nmodules['Tower.Controller'] = \"console.log 123\"\nmodules['Tower.Something.Else'] = \"console.log 345\"\nParsing strings are a LOT more efficient then straight javascript. This will also lead to lazy-loading of both parsing and evaluation which is awesome.\nWithout HTTP Caching:\n\nWith HTTP Caching:\n\nComparing\nComparing this new technique with the original, single file, load everything model you get the following data on an Ipad2\n\nResult\nYou can get speed boosts by a factor of over 10!\nThis could also be built in conjunction with the IoC system to provide a natural flow and simplicity. \n. Oh and the dependencies are ALL resolved on runtime. You could even have specific dependencies or modules for specific platforms (mobile, pc, etc..). You could stay with the require statement and also form it into the IoC.\n``` coffeescript\nCreate a new instance of the IoC container that will store each dependency and each file.\nContainer = new Container()\nContainer.set 'Tower.Controller', Container.file 'tower/controller' # Load contents of file.\nGlobal objects:\nwindow.Tower = Container.alias 'Tower'\nwindow.App    = Container.alias 'App'\n```\n``` coffeescript\n*.coffee\nBecause we previously set a file to load, we can use it in two ways.\nrequire './tower/controller' # This would trigger the Container to resolve this file and parse it.\nOr:\nApp.PostsController extends Tower.Controller # This would also trigger the Container to resolve this file and parse it if it's not already loaded!\n```\nAny thoughts / ideas?\n. More info:\nhttp://calendar.perfplanet.com/2011/lazy-evaluation-of-commonjs-modules/\nhttp://tomdale.net/2012/01/amd-is-not-the-answer/\n. I have a working example here that I made really quickly: https://github.com/TheHydroImpulse/resolve.js\nI also added the sourceURL option that when appended to code, will appear as separate files in dev tools. So in this example, the controller.js will appear as a separate file in the chrome dev tools.\n. Each file needs to have the following structure (if it's a coffee-script class) to use the previous implementations (as of now): http://jsbin.com/ijiquz/1/edit\n``` javascript\nmodule = (function() {\n    var controller;\n    controller = (function() {\n        function controller() {\n           // alert('Controller constructor has been loaded.');\n        }\n        controller.prototype.get = function(route) {\n            console.log(133);\n        };\n        return controller;\n    })();\n    return (controller);\n});\nmodule = new (module())();\nmodule.get(); // 133\n```\nThe module wrapping function isn't actually apart of the code but when you call: new Function(); it will wrap the code with this function.\n. So the module loader I made works 100% and is quite powerful tbh. You can clone it and see the awesomeness working. I wanted to try loading jquery or underscore with this, but it's hard putting these huge libraries within quotes \".\nBut i'll try some more and see if it works again. \nIt also seems that a combination with html5 cache manifest and this loader would explode in speed. I'll try that soon. \n. A little update on the module system here, though maybe this isn't the place for it?\nI've settle down with a CommonJS type system. This simplifies everything, because you aren't changing anything from Node.js to the browser. All: require, exports, and module.exports work the same as in Node.js. \nAn example module:\n``` javascript\n// controller.js\nvar Controller, model;\nmodel = require('model.js');\nController = (function() {\nfunction Controller() {\n    console.log(\"Controller constructor...\");\n    this.model = model;\n}\n\nreturn Controller;\n\n})();\nmodule.exports = Controller;\n```\nAs you can see, the syntax is the exact same. I'm currently working on some aliasing and relative module lookup. I'll also add coffeescript support and multiple file extensions. Would it make sense to use the same ./ notion as in node.js for local modules? Maybe you could then define system module, for Tower, let's say.\n``` coffeescript\nrequire 'tower-application.coffee'\nor\nrequire 'tower-application' \n```\nInstead of\ncoffeescript\nrequire './folder/to/module/tower-application'\nI also made a pretty simple Cake task to build all the files. It will search within a specified path, grab each file and stringify the code into app.js along with the module loader. It also uses UglifyJS to concatenate and do some fancy shortening on part of the code (there are some issues with the mangle and squeeze with the system, not sure why.).\nHere's what a resulting app.js looks like with two class modules:\njavascript\n(function(){\"use strict\";var e;e=function(){function e(){}return e.prototype.modules={},e.prototype.loaded_modules={},e.prototype.module=function(e,t){return this.modules[e]=this.appendSource(t,e)},e.prototype.appendSource=function(e,t){return e+\" //@ sourceURL=\"+t},e.prototype.resolve=function(e){if(this.modules[e]!==null&&typeof this.modules[e]!=\"undefined\")return this.loaded_modules[e]!==null&&typeof this.modules[e]!=\"undefined\"?(this.loaded_modules[e]=this.parse(this.modules[e]),this.loaded_modules[e]):this.loaded_modules[e]},e.prototype.parse=function(e){try{var t;return window.exports={},window.module={exports:null},t=(new Function(e))(),window.module.exports!==null?window.module.exports:exports}catch(n){return new Error(\"Error while parsing module. Error: \"+n)}},e}(),window.container=new e,container.module(\"controller.js\",'var Controller,model;model=container.resolve(\"model.js\");Controller=function(){function Controller(){console.log(\"Controller constructor...\");this.model=model}return Controller}();module.exports=Controller'),container.module(\"model.js\",'var Model;Model=function(){function Model(){console.log(\"Model constructor...\")}return Model}();module.exports=Model')})()\nPretty nifty heh? I could probably shorten the module loader by 30% or so, because I'm using CoffeeScript classes written in Javascript (I love writing Javascript after knowing how to properly write out classes and stuff). \nI want to unit test the system, but then I'll be able to start and experiment merging this and Tower on my own branch. Though a proper build system is properly needed, maybe I'll integrate GruntJS, along with Cake(just for a shorter command). Cause it's kinda hacky atm.\nRepository: https://github.com/TheHydroImpulse/resolve.js\nEdit:\nI still need to think of a way to auto-load specific modules. Sorta like a starting module so you can execute some code. Right now, I'm just using the console in chrome, but I'll need to think about it more.\nThoughts?\n. Thanks! I'm just cleaning up the files atm, then I'll push to npm :) \nrequire('model') is simply an alias to container.resolve('module'). It's just a simple regular expression replacement for simplicity. \nI'm currently adding a watcher ability (using chokidar :)) that would recompile the files. I'm also testing Ember.js into the system, and it's currently going well so far. \nI'm also redoing the documentation, and having full specs in the README. Possibly make it easier for people to understand the concept a little more.\n. Just a little fyi here...\nI've added a whole bunch of tests and it seems to work in most browsers (including IE 7), which is pretty awesome. I've also added a full build step that is super quick using grunt. It's simply a bunch of grunt tasks and helpers, along with some config options that I'll most likely be moving into a Resolve.json file to simplify things. The build script will minify and concatenate, along with the usual UglifyJS optimizations (squeeze, mangle, etc...). So far there is no lag in building, and it's not optimized at all. \nI also added the ability to require modules in three different, simple ways. \n- Fully Qualified Namespace\n- Semi Qualified Namespace\n- Non Qualified Namespace\nFully Qualified Namespace is fairly simple. It's an absolute path with the module extension (js).\ne.g:\njavascript\nrequire(\"/app/controllers/client/postsController.js\");\nSemi Qualified Namespace is an absolute naming but without the file extension\ne.g:\njavascript\nrequire(\"/app/controllers/client/postsController\");\nLastly, Non Qualified Namespace is a relative pathing that has an optional file extension (either way works :))\ne.g: (This uses the same syntax as CommonJS (node))\njavascript\n// app/controllers/client/postsController.js\nrequire(\"./../workingController\");\nrequire(\"./../workingController.js\");\nI've matched the syntax to the CommonJS format to make it easier to use it along side node. Doesn't matter which style you require modules in, the loader will convert it to a readable format (Fully Qualified Namespace).\nI've also been working on a \"require call cache\" feature. Basically recording every require call and creating a map. This makes relative paths work because at any time you'll have a module.parent object in each module that will output the callee module. You could use this feature to draw an actual map and see all the dependencies live or something. \nI've been reading a ton about AMD, cons and pros, and peoples opinions about it. I'm not a fan of it, though, I do agree on some of it's goals, mainly, having a single module format that's universal. But some people might want to utilize Tower in an AMD format, which is why I might implement a \"compiler\" or \"transpiler\" to convert the CommonJS to AMD using the \"hybrid string\" method. This would allow people to decide which method they would like to use in development or production. \nWith that said, I found out SoundCloud (the upcoming, not launched yet, version) is using the \"hybrid string\" (the one I'm building) and a CommonJS to AMD conversion. http://backstage.soundcloud.com/2012/06/building-the-next-soundcloud/ and specifically one of the dev's comment: http://backstage.soundcloud.com/2012/06/building-the-next-soundcloud/#comment-557577776\nInteresting what people are using in production in large scale systems. \n. Got a new proposition for client side (and server side) module organization. \nCommonJS:\n``` javascript\n// controller.js\nfunction Controller(){\n     console.log(this.name);\n}\nController.prototype.name = \"John\";\nmodule.exports = Controller; // exporting.\n```\nI'm a pretty big fan of CommonJS and would rather it's techniques than AMD's. Right now, the client side is going toward AMD support with Yeoman, RequireJS, and a ton of libraries are giving support right now. I'm not too keen on AMD, especially with the new ECMAScript Harmony modules coming out, or, is already out for specific browsers. \nSoundCloud is going to the ECMAScript modules and CommonJS. They have a \"transpiler\" (source-to-source compiler) to convert between module systems. Throughout development, they would use either AMD (asynchronous loading, and the ability to loose the build tool), or ECMAScript modules. When they move into \"production\" or testing, they would run their build tools, which would convert either systems into the hybrid-string end system. This, in turn, provides huge capabilities for development, such as loosing build tools, that would increase productivity and the speed of testing. \nThe hybrid-strings solution is pretty good, and I'm in the process of creating a Yeoman generator and tool for it, to where, you can, within a new directory, run the yeoman init command, yeoman init resolvejs, and it would create some configuration files that would hold settings such as, the source folder, the lib, or temp folder, and the output / dist folder. You could then run the yeoman build command, and your files would be watched, built, and outputted. Because you have the temp folder, the first time the build tool would run, it would compile (minify, concatenate) each module into lib, but would keep it's directory structure. When a file is changed, only the single file is re-minified and concatenated, then, every file inside the lib folder would be built in the following way:\njavascript\nmodules['currentmodulepath'] = 'encodedcode'; // uses encodeURIComponent to prevent special character messing and escaping the quotes used to surround the code.\nThe build task would also place the loader and the needed code with it. Right now, even without Yeoman, it compiles near real-time. Though it's sorta complicated on setting it up because of the statically typed directories, etc...\nBecause the source is going to straight Javascript, we could loose the bulky build system for development (but have the options to change the module system) and provide an AMD or ECMAScript module system. \nWe would still need some kind of transpiler to convert to, and from module format. The solution could be within: http://sweetjs.org/\nIt's backed by Mozilla and kinda by Brendan Eich (creator of Javascript), so it's only going to get better. This would allow one to write in any of the module formats, and the end result could be a different module system. \nTo use a macro within sweet.js (and this might be in ECMAScript 7... long time away though) you need to define the following:\n``` javascript\nmacro module {\n  case $module:ident {\n    $(export $x;) ... } => {\n    var cmodule = {};\n    cmodule.exports = {};\n    (function(){\n        $(cmodule.exports = $x; ) ...\n    })();\n\n}\n}\n```\nI'll admit the syntax is a little weird, but it gets easier when you spend time tinkering with it. This macro converts a ECMAScript module to a CommonJS module.\n\nECMAScript to CommonJS\nECMAScript:\njavascript\nmodule A {\n    export 1;\n    export 2;\n}\nCommonJS:\njavascript\nvar cmodule = {};\ncmodule.exports = {};\n(function () {\n    cmodule.exports = 1;\n    cmodule.exports = 2;\n}());\nWith the macro, you'll need to have cmodule instead of module. This isn't that much of a problem and will be fixed when I figure it out (only spent an hour or so on sweet.js). \nA work in progress, but this could provide a huge boost in productivity. CommonJS in the browser currently requires build tools (well the hybrid-strings solution does), but AMD is pretty nifty in asynchronous fetching of modules. \n\nCommonJS to AMD\n``` javascript\nvar helper = require(\"some/path/to/helper\");\nfunction Controller () {\n   this.name = \"Nope\";\n   console.log(this.name);\n}\nController.prototype.name = \"John\";\nmodule.exports = Controller;\n```\n``` javascript\ndefine(['some/path/to/helper'], function(helper){\n   function Controller () {\n       this.name = \"Nope\";\n       console.log(this.name);\n   }\nController.prototype.name = \"John\";\nreturn Controller;\n});\n```\n\nECMAScript to AMD\n``` javascript\nmodule ControllerModule {\n    function Controller () {\n       this.name = \"Nope\";\n       console.log(this.name);\n    }\nController.prototype.name = \"John\";\n\nexport Controller;\n\n};\n```\n``` javascript\ndefine([], function(){\n   function Controller () {\n       this.name = \"Nope\";\n       console.log(this.name);\n   }\nController.prototype.name = \"John\";\nreturn Controller;\n});\n```\nSome pretty nifty stuff. Sweet.js now has browser support, which would simplify things and it's extremely fast and only getting faster.\nThoughts?\n. If your not changing tower's source you don't need npm link tower. A simple:\n```\nnpm install tower -g\nnpm install grunt -g\nnpm install coffee-script -g\ntower new towerBot\ncd towerBot\nnpm install\nStart mongodb... Different for every OS...\nStart Redis if you want / have.\ncake watch  # leave it open. It will watch for all your file changes.\nnode server.js # Run this in another tab.\n```\nWith the latest version of Tower all these steps will succeed. (You may get another error #335 -> Still getting worked out.)\nTo make sure you have the latest Tower version you can run Tower -v and it should equal 0.4.2-14\n. Ok so the issue is tied to the module loading in tower. Line #23 is the starting of the module loading and more specifically on line #35 has the socket.io module. \nOnly if it can require socket.io is it going to include it. Try manually installing socket.io within your app directory:\nnpm install socket.io\n. @viatropos You could add socket.io as an optional dependency in the package.json. You can find the documentation  at https://npmjs.org/doc/json.html towards the middle of the page. Not sure if this would partially solve it...\n. cake watch\n``\nC:\\Users\\Daniel\\Documents\\Projects\\TestingTowerApplication>cake watch\npath.existsSync is now calledfs.existsSync`.\nDefault database not set, using Memory store\nRunning \"copy:js\" (copy) task\nCopied 35 files.\nRunning \"copy:css\" (copy) task\nCopied 2 files.\nRunning \"coffee:all\" (coffee) task\nRunning \"less:bootstrap\" (less) task\nRunning \"stylus:compile\" (stylus) task\nFile 'public/stylesheets/app/stylesheets/client/application.css' created.\nRunning \"templates:all\" (templates) task\nRunning \"watch\" task\nWaiting...\n```\ncoffeescript\nconsole.log(_.keys(Tower.View.cache), _.keys(Ember.TEMPLATES));\nand I get:\n[\"application\"] [\"application\"]\nIn public/javascripts/templates.js I get:\nTower.View.cache = _.extend(Ember.TEMPLATES, Tower.View.cache);\n. I also quickly browsed the task file and specifically the template task and didn't see any OS specific paths or anything, though I didn't spend much time looking.\n. This is what I get:\n[] # result\n/app\\\\templates\\\\.+.coffee$/ /layout\\\\application/ /app\\\\templates\\\\(?:client|shared)\\\\/\npathSeparatorEscaped does equal \\\\\ncoffeescript\nconsole.log(templatePath + \"\\n\")\nconsole.log(layoutPath + \"\\n\")\nconsole.log(namePattern + \"\\n\")\nReturns: (Just to be clear)\n/app\\\\templates\\\\.+.coffee$/\n/layout\\\\application/\n/app\\\\templates\\\\(?:client|shared)\\\\/\nfiles equals:\n[ 'app/templates/server/layout/application.coffee',\n  'app/templates/server/layout/_meta.coffee',\n  'app/templates/shared/layout/_body.coffee',\n  'app/templates/shared/layout/_flash.coffee',\n  'app/templates/shared/layout/_footer.coffee',\n  'app/templates/shared/layout/_header.coffee',\n  'app/templates/shared/layout/_navigation.coffee',\n  'app/templates/shared/layout/_sidebar.coffee',\n  'app/templates/shared/posts/edit.coffee',\n  'app/templates/shared/posts/index.coffee',\n  'app/templates/shared/posts/new.coffee',\n  'app/templates/shared/posts/show.coffee',\n  'app/templates/shared/posts/_flash.coffee',\n  'app/templates/shared/posts/_form.coffee',\n  'app/templates/shared/posts/_item.coffee',\n  'app/templates/shared/posts/_list.coffee',\n  'app/templates/shared/posts/_table.coffee',\n  'app/templates/shared/users/edit.coffee',\n  'app/templates/shared/users/index.coffee',\n  'app/templates/shared/users/new.coffee',\n  'app/templates/shared/users/show.coffee',\n  'app/templates/shared/users/_flash.coffee',\n  'app/templates/shared/users/_form.coffee',\n  'app/templates/shared/users/_item.coffee',\n  'app/templates/shared/users/_list.coffee',\n  'app/templates/shared/users/_table.coffee',\n  'app/templates/shared/welcome.coffee' ]\nSo that's all good.\nAlso when printing (in the loop):\ncoffeescript\nfor file in files\n   console.log file\nReturns every second output to null. Though this isn't a problem as it won't match the regex, but I thought i'd point it out.\n. Ok so that fixes the empty result but it seems like extra folders after app/templates/shared/ is erased. For example, app/templates/shared/layout/_flash.coffee actually turns into app/templates/shared/_flash.coffee. \n. yup all fixed!\n. This may of be the last issue with windows....\n. It fully works on my side so it may not be a windows problem (Sometimes the ./ works and sometimes it doesn't on windows... unreliable...)\n. Both work.\n. @pashaie Did you update Tower? There were a few fixes in the tasks file to make it work. Try (within your app) removing tower npm rm tower and then reinstalling everything npm install. That should get you the latest fixes. \n. The inversion-of-control container and more specifically, the service locator will fix this issue entirely. Basically, you will technically never access any resources like: \ncoffeescript\nTower.Controller\nApp.ModelName\nYou will write it out as such, but behind the scenes (using harmony proxies ftw), there's a huge system just to access and set resources. \nAn example using this feature from scratch (isn't just Tower specific as I made a separate repository):\n``` coffeescript\nContext = require 'ettore'\nContainer = Context.create 'App'\nYou can set properties or objects like:\nContainer.set 'Tower.Events', new (class Events extends Container.get('Tower.Class'))\nContainer.set 'App.PostsController', new (class PostsController extends Container.get('Tower.Controller'))\nContainer.configure ->\n    @set 'Tower.Controller.Action', new (class Hello extends @get('Tower.Class')' # You can use the lazy-loading feature or just use node's require statement.\n```\nBut you don't want to be using getters and setters in your whole applications; so you can create a bunch of aliases!\n``` coffeescript\nContinuing from previous snippet:\nglobal.App = Container.alias 'App'\nglobal.Tower = Container.alias 'Tower'\nTo access the previous resources you can use the new variables:\nApp.PostsController # Returns instance of class 'PostsController'.\nTower.Controller.Action # Returns instance of class 'Hello'\n```\nYou can do a much of cool things. You can also (working on this atm) create two different containers. One for the app, and one for Tower objects. This will have a clean separation between objects and will also allow you to specify fallback containers if an object is not found within the current container. \nYou can get more info here: #325\nThere might be a quicker solution to implement, but this would definitely have a resulting effect.\n. Yes, the system fully supports mocking objects.\nOn Oct 22, 2012 11:57 AM, \"Sebastian Hoitz\" notifications@github.com\nwrote:\n\nWow that sounds cool!\nWhat about switching classes to mock objects for unit tests? Is that\npossible, too?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/337#issuecomment-9673852.\n. :)\n\nI'm almost done unit testing it, after which I'll start implementing it within Tower on another branch. Got a lot of ideas to go along with it, especially with optimizations of the front-end... The front-end or client-side IoC will be slightly different, with possibly having it's own module loader, that's a bit, awesome! Instead of lazy-loading on download, you lazy-load on parsing and execution, which makes the initial page load extremely fast. http://hydrocodedesign.com/blog/2012/10/21/javascript-modules/\n. I hear ya. I've had that same problem with another framework and its quite\nannoying.\nOnce I'm done the packages, I'll finish the IOC. Not sure when exactly, but\nin a couple weeks for sure. Still trying yo get around some limitations or\nweirdness in proxies.\nOn Dec 6, 2012 10:48 PM, \"edubkendo\" notifications@github.com wrote:\n\nRan into this problem in irc today, person having an issue with \"Comment\"\nmodel, getting the exact same error. Grepping tower's source didnt reveal\nany use of \"comment\", so it must be in Ember. Whatever the case, we\ndefinitely need your permanent solution to this issue @TheHydroImpulsehttps://github.com/TheHydroImpulse. Between Tower and Ember, there's just so many words in use, we're bound\nto start seeing more and more cases of this as tower picks up users and use\ncases.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/337#issuecomment-11119750.\n. Last time I heard heroku didn't support web sockets and you had to change\nsocket.io to use long polling or flash sockets. This might be the issue but\nthe undefined error might be something else.\nOn Oct 18, 2012 12:55 PM, \"Mateusz Sojka\" notifications@github.com wrote:\nI have been trying to deploy a Tower app to Heroku.\nIn /app/app/config/server/bootstrap.coffee there is this:\nApp.configure ->\n  @use 'favicon', Tower.publicPath + '/favicon.png'\n  [...]  lots of stufff\n# For \"web sockets\" on heroku:\n    # App.io.configure ->\n    #   App.io.set('transports', ['xhr-polling'])\nSo following the instruction I commented these lines in. Everything looks\nfine until I deploy and get this error message:\n2012-10-18T18:51:24+00:00 app[web.1]: /app/app/config/server/bootstrap.coffee:29\n2012-10-18T18:51:24+00:00 app[web.1]:     return this.io.configure(function() {\n2012-10-18T18:51:24+00:00 app[web.1]: TypeError: Cannot call method 'configure' of undefined\n2012-10-18T18:51:24+00:00 app[web.1]:                    ^\n2012-10-18T18:51:24+00:00 app[web.1]:     at null. (/app/app/config/server/bootstrap.coffee:29:20)\nWhat am I missing?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/338.\n. @yagooar I'll check up with that error sometime today. \n\nIf you want to go hard core, check out amazon ec2. You can get a free micro instance, but remember, it's just a virtual machine (linux). You'll have to install everything yourself. I plan on using Tower in production within the next year (maybe earlier) and I'm going with ec2 at around 10-20 instances to test everything out. \nBut, if your looking for a PaaS service, then heroku would be your best bet.\n. I've heard of a lot of PaaS but only used a handful of them. My personal favorite is Pagodabox, albeit only being for PHP at the moment... There support is AMAZING. Hands down the best. I've asked them if there opening support for other platforms, notably node.js and it's their main priority. \nBut yes, i'll take a look at the internals to the problem here, I've got a bunch of free time today.\n. Although I haven't really checked out the testing suite of Tower, its quite\ncommon to have more than one assertion in a single test; though, there is\nan excess amount.\nWe could, if @viatropos wanted, make each test, and each test file small to\nmake it a rad quicker st running specific tests.\nOn Oct 19, 2012 10:13 AM, \"Mateusz Sojka\" notifications@github.com wrote:\n\nI have been working on a issue related to the validations and I have\nrealized that the corresponding testing file is really large and that lots\nof assertations are grouped together. This made testing separate, smaller\nissues very difficult, because of the verbosity of the tests and the lack\nof options to decide which tests should be run inside the file (well,\ncommenting out the code was my solution...).\nI think tests should be splitted up into smaller, logical units and there\nshouldn't normally be more than one expectation for a single test so that\nidentifying the error is more focused, faster and easier.\nOf course this doesn't need to be done all at once, but it should be an\nimportant topic because a nice testing environment makes people test more,\nand that's what we want, don't we? [image: :smile:]\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/340.\n. I'm currently working on a inversion of control container and more\nspecifically a service locator (#325) which will be used throughout tower\nonce its tested and integrate. This will however, change how you test (it\nwill make it extremely easy because of mocking and faking objects).\n\nSo when this goes into tower ,  we can split everything into smaller parts.\nOn Oct 19, 2012 11:01 AM, \"Mateusz Sojka\" notifications@github.com wrote:\n\nYou're right, you can have more assertions in a single test, but only if\nthere is a logical unit that justifies it.\nBack to the validation example, all validations are tested in one single\nfile, which will probably grow over the time, so I think it is a good idea\nto start refactoring the test suit so that testing is more comfortable.\nStill, I know it's not priority no. 1, but let's keep it in the backlog.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/340#issuecomment-9608382.\n. Yeah node.js is super complicated, especially with all this realtime stuff.\nBut after a few weeks of ticketing around the source code and asking\nquestions you should start to get the hang of things.\nOn Oct 19, 2012 11:38 AM, \"Mateusz Sojka\" notifications@github.com wrote:\nThis sounds great, I'm still trying to get into this \"brand new world\" of\nNode.js, so I want to start small and do fixes here and there so I get a\nbetter feeling of the Tower framework as a whole.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/340#issuecomment-9609522.\n. @viatropos looks really good. I think coffee script and Ember made me love JavaScript even more. That api seems a lot more down to earth in a sense or low level. I also love having everything (or almost everything) an Ember object in some way. \n\nI'll definitely take a wack at converting stuff to JavaScript. That'll let me experiment with Resolve.js (which got 100% on chromes speed test and profiler using JQuery,  handlebars, emberjs, and a few views, templates and controllers)\n. I'm pretty sure tower has not yet migrated to 0.4.0a. It seems like there\nare more differences in the newest version and previous versions that just\nthe filename. That would explain why your getting more errors. Just go npm\ninstall  and npm install grunt -g and you should be on a compatible\nversion. I tried it out this morning and everything works out.\nOn Oct 25, 2012 10:49 AM, \"C. Spencer Beggs\" notifications@github.com\nwrote:\n\nStill looking into this. I installed grunt 0.4.0a:\nnpm install -g grunt@0.4.0a\nand then ran through the vanilla install again:\ntower new app\ncd app\nnpm install\nLooks like grunt 0.4.0a requires Gruntfile.js instead of grunt.js so:\nmv grunt.coffee Gruntfile.coffee\nBut when I run cake watch I get:\nLoading \"Gruntfile.coffee\" tasks...\nERROR\n\n\nTypeError: Object # has no method 'registerHelper'\nWarning: Task \"start\" not found. Use --force to continue.\n\n\nAborted due to warnings.\nIf I run node server I don't get an error, but of course things aren't\nbuilt the right way.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/342#issuecomment-9785026.\n. Now I can see how coffee-script really does complicate everything (while also simplifying it).\n. For all I know, Tower render's it's first request from the server which allows crawlers to find the content. I'm not sure if this has changed with all the additions, but could be implemented either way. I believe meteor has this problem for sure, because they are mostly client-side. \n. @viatropos Haven't tried this on Linux, but using that ruby watcher runs at around 10Mb of RAM, compared to node (watchr) at 21Mb. Seems like watchr (https://github.com/bevry/watchr) uses less memory then grunt's watcher or chokidar, on Windows at least.\n. Not sure why Node has so much problem with file watchers. \n\nYou could create a rb-fsevent \"clone\" in C or C++ that would become a Node module or part-module for the mac part. FSEvent is a fairly straight forward system: https://developer.apple.com/library/mac/#documentation/Darwin/Conceptual/FSEvents_ProgGuide/UsingtheFSEventsFramework/UsingtheFSEventsFramework.html \nMaybe we should create a Tower.watch wrapper around many different other solutions. \n- fsevent or rb-fsevent are the fastest (Mac)\n- kqueue uses file descriptors for identification of monitored files - Meaning it has to open each file it watches.\n- inotify is the only linux solution, though dnotify exists, inotify replaces it as it's much better. EDIT: fschange would  be fastest.\n- Windows only has it's one event: ReadDirectoryChangesW\nAlso inotify cannot recursively watch sub-directories. You have to create a new watcher for each of them. \"dnotify and inotify are the current file change notification services in the Linux kernel. Unfortunately, they share a couple of shortcomings that make it difficult to use them for efficient (real-time) file system indexing under Linux. One of them is their unability to detect content-preserving file changes, i.e. write operations that only affect a tiny portion of a file. It is impossible to use inotify in order to determine what part of a file has actually been modified. A second problem is that you have to open every directory once before you can register for changes within that directory. This is very unconvenient, especially if you want to watch large file systems, as it requires a full scan of the file system.\" - http://stefan.buettcher.org/cs/fschange/index.html\nIt appears that linux has another solution called fschange that is much more efficient. The problem is that you need to patch your kernel or replace some files within the kernel to use it. A solution would be to use their fschange daemon: http://stefan.buettcher.org/cs/fschange/inotifyd-2005-11-19.tgz that emulates fschange using inotify. \nThis might solve the problem for all platforms. Though you'd need to create some C/C++ node modules, but that's not really a big deal. \n. @viatropos If I remember correctly gaze doesn't work on Windows, or partially work. deleted and added events don't fire. But other then that, it's a really good watcher. Love the minimatch/glob support.\n. @viatropos @shama ahh yes, gaze does indeed fully work on Windows. \n. @tremby An empty string isn't null but rather a string:\njavascript\n\"\" === null // false\nSo if you make a minimum length validation of 5, an empty string would pass. You would need an extra validation of presence and minimum length to pass.\n. @tremby Tower moved on to 0.5, which is a new codebase. 0.4 isn't being supported anymore.\n. Yeah this has been discussed many times. There are currently plans for a complete overhaul of the website butt i think the priorities right now are feature set, new api and especially all the new client side stuff that @viatropos has been working on. I'll take some time this week to maybe get a proper web design and documentation going. \n. Oh yeah. But I'm also thinking a good solid website would help new comers a\nton instead of using github wikis.\nOn Nov 19, 2012 7:18 AM, \"bobobo1618\" notifications@github.com wrote:\n\n@TheHydroImpulse https://github.com/TheHydroImpulse I'm not talking\nabout the overhaul or anything like that. I'm saying go and put, on the\nwebsite you have now, on the index, or header something like\nWiki has more info, go here..\nLeave everything else the way it is, just leave a notice until you do the\noverhaul.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/353#issuecomment-10514849.\n. The websites source is on github. I'll submit a PR when I get to it.\n\nThough once the new APIs come out, we'll really need a proper website with\nexamples, screen casts, demos, etc... But for now, a little notice should\nbe enough.\nOn Nov 19, 2012 7:34 AM, \"bobobo1618\" notifications@github.com wrote:\n\n@TheHydroImpulse https://github.com/TheHydroImpulse I agree but as you\nsaid, that issue has been discussed many times :P\nThis is a separate issue.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/353#issuecomment-10515399.\n. Are you just wanting an alias for multiple apps?\nOn Nov 19, 2012 10:14 AM, \"norman784\" notifications@github.com wrote:\nThere is a way to support vhost on tower or just I need create separate\napps to support multiple domains / subdomains?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/354.\n. So you want to let's say run your api on a sub domain? That kind of thing?\nOn Nov 19, 2012 11:06 AM, \"norman784\" notifications@github.com wrote:\nWhat I do is run a single application running daemon owner of domain /\nsubdomain, I am not aware if recommended to do that or in separate\nprocesses (as in this case applications are interrelated) one would be the\nfrontend / backend and server api.\nFor example:\napi.mydomain.com -> api / tower app\ndevelopers.mydomain.com -> developers / tower app\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/354#issuecomment-10523955.\n. I believe only MongoDB is supported as of now, but there are plans for other databases to be included. Sessions are used within controllers and it uses the expressjs / connect sessions. \n\nYou can access the session object through the request object in any controller:\ncoffeescript\nrequest.session\n. I'd say it's a couple months away. Though you can use it now, there are some bugs, and lots of features that are missing. The client-side stuff right now, especially the router isn't finished, but that'll change when the new stuff drops in. Also, there might be several improvements to be made, speed wise, as I've never profiled Tower, yet, that's another thing on the list.\n. But, I'll also add, that you can start using Tower for your project, and when new features or changes come into the mix, you can simply change were needed. Though that all depends on the length of your project.\n. Personally, I'd go with Rails and Ember.js, though, if you'd have to spend lots of time learning all the stuff, then stick to Coldfusion. If you already have your app in Ember.js, then porting is, or will be, extremely easy, as Tower is built on Ember.js. That's what I'm personally doing atm for a number of projects, though I'm using nodejs as the backend.\nThere are plans to have an admin panel generator or module similar to ActiveAdmin, though, that's a long ways away.\nI believe there was another issue opened with concern about using Zurb Foundation, instead of Twitter Bootstrap.\n. I'm not that familiar with knockout, but it's not as complete as Ember.js is. It also tightly bound to DOM elements, which I personally hate. Because of some missing pieces, some people have to implement those themselves. That's why I love Ember so much. It's fully featured and all the pieces are there.\n. Probably this article helped a lot: http://trek.github.com/ . It's made by Trek, one of the core members of Ember. I think the Router, Templates, Contexts, Views, and Outlets are the hardest thing to comprehend. Outlets, I'll tell you right now, is the SIMPLEST thing once you get it. Outlets are view holdplacers.\nMeaning, if you have a main page with a header and a body, well the header wouldn't change across the other pages, only the body content would. So you would place an outlet {{outlet}} where you want your body content of the different pages to appear.\nhtml\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Random Title</title>\n  </head>\n  <body>\n        <div id=\"wrapper\">\n           <script type=\"text/x-handlebars\" data-template-name=\"application\">\n               <header><!-- header stuff --></header>\n               <div id=\"content\">{{outlet}}</div>\n           </script>\n        </div>\n        <!-- Scripts to load ember, jquery, handlebars -->\n  </body>\n</html>\nThen, in the router you would \"connect\" the outlet(s) (you can have more than one outlet, for example, sidebars), to the appropriate template.\n``` javascript\nApp.Router = Ember.Router.extend({\n  root: Ember.Route.extend({\n    index: Ember.Route.extend({\n       route: \"/\",\n   connectOutlets: function(router) {\n       // Connect the {{outlet}} in the \"application\" template to the \"home\" template.\n       // In simpler terms... Grab the contents of the \"home\" template and replace the {{outlet}} in the \"application\" template with it.\n       router.get('applicationController').connectOutlet('home'); \n   } \n});\n\n});\n});\n```\nYou would do this for all the different routes. Again, pretty simple, but it stays simple for complex applications. Once you understand the object system, router, contexts, outlets, and views, you'll find it extremely awesome.\nI'm starting to make Ember.js tutorials on my Youtube channel, as there are none atm. Maybe that'll help some people out.\n. No Problem! If you want a little more insight on comparisons of Ember.js and other frameworks, http://www.quora.com/Ember-js/Which-one-of-angular-js-and-ember-js-is-the-better-choice is an AWESOME read. The answer (main / first one) is written by Tom Dale, one of the core members of Ember.js, an ex-Apple employee that also created SproutCore that was the framework used in huge apps like iCloud, which they (Tom, and Yehuda - another Ember dev) also created.\nAngularJS and Knockout have a lot of similarities, especially in their bindings. \nTom Dale also wrote a blog post explaining their [Ember.js] implementation of the Router. http://tomdale.net/2012/05/ember-routing/\nA very interesting read, and it shows just how powerful it is. I haven't spent much time with Angular's router, nor Knockout, but Angular uses a Rails like routing, which I don't think is front-end friendly.\n. Angular is by far more complex, especially in it's terms and theoretical background. But that doesn't mean it's more, or less powerful. Both Ember.js and Angular are just as powerful, though, they some of them are better at some tasks then others.\n. Make sure grunt's version isn't >=0.4.0 and that you can run it.\n. @missinglink This project has not been abandoned just this version (0.4.x). Were working hard on 0.5.0 behind the scenes which is a complete rewrite of Tower in pure JavaScript. We'll be announcing the release when it's done and when all the documentation is top notch.\n. Awesome, I love where this is going....\nSo first, right now, grunt, even in development, within Tower's source is concatenating and sometime minifying all of the client-side code. If a single file changes, grunt re-calculates everything, not just that one file. I solved this problem by having a \"temp\" folder, or a lib folder for client-side code. When grunt starts up, it builds and compiles everything. Building would minify all the client-side scripts and clone the filesystem. Meaning if we have files like: packages/tower-application/client we would get, as a result, tmp/packages/tower-application/client/. This allows the use of require and not having to worry about whether the path changes when building. <-- 1:1 mapping as you said.\nCompiling would be concatenation. But first, when a file changes, only that file is re-minified. Concatenation or compiling would be different. All the minified files, even if a single file changes, would be concatenated if were in production or something. My ResolveJS build system has maybe a 1/3 a second of lag, but that's not even noticeable. \nNot sure if it's just me, but having only the copy:js task has a noticeable lag of 5-7 seconds. The task isn't laggy, but the watch trigger is. When you edit a file, grunt's watch task doesn't trigger until 5 seconds later. But that's an aside point. \nI think having coffee-script support as a Tower package, like meteor does it (again, another example from meteor. I think they do a lot right, and we could learn from them). But meteor doesn't compile the coffee-script (not a 100% sure, but that's what it seems) and so they don't have some of the complications we do. Though the Tower's source is a bit different. \nI personally have never used meteor's package management system, but from what I've seen it has a few advantages. NPM is strictly for server-side code, that's it, though you can have client-side code, and assets, someone using your package wouldn't know how to leverage those components. I think one of the node.js/npm developers wrote a blog post on how NPM should leverage these components, but nothing has been set. \nI think Tower could leverage NPM and abstract it to provide a powerful package management but uses NPM for the actual fetching of packages. We could have tower package install auth, as an example, the authentication would most likely come with Tower. The result would be to create a new tower-packages.lock or something, and provide a json list of packages installed. We would then simply call npm and install the package. We could, however, have aliased names for packages. That means, one could type: tower package install righton, but that package might be taken in NPM, so it could be called righton for tower and righton-tower-package in NPM and git. Just some thoughts, but it could work. The package system would then look for a tower-packages.lock and see all the npm installed tower packages. Though one could create a vendor/packages folder and create an application specific package. \nWe would still use NPM, because it's an extremely powerful system, but we would alias it behind our own command. \nThe goal is just like you said, a single API to provide a way to create a server-side package, or client-side package, or both. With the ability to have assets and other components. \n\nNPM can't really do that. So I'm wondering what your thoughts are of how this would play alongside with NPM.\nI think the mix of our own solution in combination of NPM could solve this. Though there could be a better way down the line and we could change things if it's not going to break anything.\n\nI also think this could make contributing a lot easier. They wouldn't have to spend hours studying the codebase and figuring out how everything works. We could provide a nice, powerful API and heavy documentation that goes along with it. One could provide html5 boilerplate instead of bootstrap, or in combination. \nI think Tower.ready is better, much better. To set a component as ready, you could call Tower.ready('routing', true) and when checking if a component is ready you could call: \njavascript\nTower.ready('routing', function(){\n  // Stuff here....\n});\nBasically, each package would \"essentially\" be surrounded by this code for each dependencies they have. \npackage.js\njavascript\nthis.dependencies(['routing', 'routes', 'sockets:connected']);\napp.js\n``` javascript\n(function(){\nvar Class = (function(){\n         ///....\n   })();\n}();\n```\nwould theoretically become: \n``` javascript\nTower.ready('routing', function(){\n   Tower.ready('routes', function(){\n      Tower.ready('sockets:connected', function(){\n           (function(){\n                 var Class = (function(){\n             })();\n       })();\n  });\n\n});\n});\n```\nAgain, theoretically. The package system would simply wrap callback.apply({}); with all these Tower.ready statements. A simple, but elegant solution.\nOne could still call Tower.ready synchronously, and it'll all work. \nHooks:\nI'm still trying to think of all the hooks, events, ready states. So if you have any suggestions just let me know. I've made a wiki page, so that we can keep a list of hooks, ready states, etc... https://github.com/viatropos/tower/wiki/Packages\nAlso, the API inside package.js would be chainable. Just for sake of simplicity. \nAlso, I'm writing everything in JavaScript, not sure why, but I just really like making APIs in JavaScript compared to CoffeeScript. \n. I guess we have a few options here... Some might work, others might not....\nSo I guess for development we decided that we should serve raw files. We would just have a ton of script tags, and that's perfectly fine as we don't need to compile anything (except coffee-script). \nNow it's deciding or finding the perfect way for require statements. I don't think we need any \"module systems\", we just need a way to communicate between modules. \nSolution A:\nWe could have Tower become a bunch of packages in the way they are already. We'd have to modify them a tad bit, to follow a packages API, but this could have increasing flexibility. This means, the ready states would become each package. Each package, though, could have sub-ready states like: sockets:initialized and sockets:connected, purely as an example. \nIndependent:\nPackages would have to be independent from each other. One would need to have dependencies, that's where the package.js comes in. You would specify other packages you need. controllers would need models and models would need sockets or something.\nClient Side:\nBecause we don't have any require statements anywhere, we could follow the package.js file, read all the client-side files in each module, and concatenate them. Concatenating isn't slow, minifying is. Concatenating smaller files also isn't slow and would be 50x faster then concatenating a single tower.js file. That means, each package would return a single file for the client-side.\npackages/controllers/client.js\npackages/controllers/shared.js\npackages/controllers/client/pattern.js\npackages/controllers/client/events.js\npackages/controllers/client/notifications.js\nWould return a single:\nlib/controllers.js\nOr:\nlib/controllers.client.js\nDepending on the naming. \nWe could also have packages decide how it's concatenated:\n``` javascript\nTower.Package.register(function(){\n// Add information to the package.\nthis.info({\n    name: \"Controllers\",\n    description: \"\",\n    version: \"0.5.0\",\n    author: \"\"\n});\n\nthis.dependencies([\"models\", \"sockets\", \"application\", \"http\"]);\n\n// Register files the package is going to use:\nthis.addFile('client.js', 'client')\n     .addFile('server.js', 'server')\n     .addFile('shared.js', '*')\n     .addFile('client/events.js', 'client');\n     .addFile('client/notifications.js', 'client');\n\nthis.build('client', function(){\n       this.file(this.default, [\n             'client.js',\n             'shared.js'\n       ]);\n   this.file('controller.events.js', [\n         'client/events.js',\n         'client/notifications.js'\n   ]);\n\n});\n});\n```\nThis API is completely off the top of my head, but might work. With a few modifications, I think this could work. This would eliminate the need for require calls completely (client-side) and we wouldn't need any module system!\nServer Side:\nThe server side could use the require statement, so there's no change there, and the build API would only be for the client-side. \nThe second thing would be for custom packages. I think we could drop the tower package install ___ and replace it with raw npm. Right now, the package system will look in the packages/ folder and will look in each sub-folder. It only view it as a package if theres a package.js file. We could have app specific packages put inside vendor/packages and npm install packages in node_modules. We wouldn't need to have a tower-packages.lock or anything, though we could, and that might speed up the process a little bit, depending on how slow filtering through each node module. \nThe build process would be the exact same for custom packages. They could have the same this.build() method, if they want to customize it. Assets would also need to be registered as a file: this.addFile('images/*, 'client');. The \"builder\" would copy the assets invendor/imagesfor images,vendor/stylesheets/for css files, etc... It would also concatenate the client javascript and place the resulting package's javascript invendor/javascripts`. \nWe could have a packages.lock json file that would, when building each package, write the package, and it's outputting JavaScript files' location. \nSo for controllers package with a default build, you would get this result packages.lock\njson\n{\n  [\n     \"controllers\": [\n         {\"type\":\"js\", \"src\": \"/vendor/javascripts/controllers.client.js\"}\n     ]\n  ]\n}\nThe coffeecup helper would look at this file and make the script tags for all of them, in order of occurrence. \nFrom I've explained here, I think this could work, but not having used this system I can't say if it's effective or not. Having Tower's source a bunch of packages isn't necessary, but it would simplify things and make things consistent. \nThoughts?\n. The only noticeable downside would be order of dependencies and to decouple everything as much as possible. Or make sure that order is right. \n. Another solution, instead of concatenating, it would order the script tags in order of file inclusion:\njavascript\nthis.addFile('client.js', 'client');\nthis.addFile('shared.js', '*');\nthis.addFile('client/controller.js', 'client');\nthis.addFile('client/events.js', 'client');\nWould result in the following script tags:\nhtml\n<script type=\"text/javascript\" src=\"vendor/javascripts/controllers/client.js\"></script>\n<script type=\"text/javascript\" src=\"vendor/javascripts/controllers/shared.js\"></script>\n<script type=\"text/javascript\" src=\"vendor/javascripts/controllers/client/controller.js\"></script>\n<script type=\"text/javascript\" src=\"vendor/javascripts/controllers/events.js\"></script>\nI think this solution would be MUCH better then the previous. This would eliminate require statements completely, now relying on the order of file inclusion.\nThoughts?\n. So right now I made the packages system look in these three default locations. You can customize it by changing package.json's tower.packages.lookup array.\njson\n[\n  \"vendor/packages\",\n  \"node_modules/\",\n  \"packages/\"\n]\nWith the current amount of node.js modules within node_modules it's not slow whatsoever. We could also check the global node_modules but that would get a little tricky and OS specific, unless NPM has a helper for that. But for now it's all local. We could have a tower search or something to check if a module is tower specific, or you could list the currently available modules either in the command line or on the website/wiki. \nI think leveraging NPM is the best solution, because each package could have node module dependencies that they could bring in, or bower dependencies. \n. > Is there a way to do this with just package.json? The \"other packages\" could be tower- or non-tower-specific modules, installable from NPM, so instead of a package.js specifying the tower packages, could we just figure that out by inspecting the packages in dependencies and devDependencies, etc? That would be cool.\nFor the dependencies you could, but you'd also need to have a package.js somewhere for each package. Especially for the client-side, it'll take care of file inclusion, building, etc... I personally like the programmable approach to a \"settings\" file, but for the basic settings, such as name, description, even dependencies, we could place that inside the package.json. \nWe could have that tower: true in the package.json for  each dependencies or devDependencies. The package,js is to provide a more advanced configuration file for each package. They can include NPM modules, with a this.use(); statement, file inclusion (mainly for the client-side, but since were going for consistency, we can do the same for server-side), etc...\npackage.js is purely the first idea that came up, we could use packager.js or anything else. I think having the Packager or packager variables their own global. That way people could just include the packager system, and they'll be good to go. I'll make it as customizable as possible, that way people could use it with Tower, or their own projects and they'll be able to customize hooks, ready states, etc...\nYes, packages will be for both client/server. They could either wrap each file within a package with: packager.ready(function(){}); and this would fetch the dependencies in the package file, or they could add extra dependencies as a parameter. In Tower, though, they could leave this little bit of ceremonial code and leave it to the bundler. This would fix some of the dependency issues with having a ton of script tags. Just an idea. \nI'll start experimenting with all these ideas, and possibly get a demo out. \n. Just wondering, when you place javascript files inside vendor/javascripts do they automatically copy themselves in public/javascripts/vendor/? Or is it just when you start the server, does it copy?\nRight now, the bundler system works really well. It places all javascript files for each package inside: 'vendor/javascripts/packages/{name}`. It also adds to a json file for each file we add in those folders. You could search through each file recursively to find all the files and create script tags for them, but that wouldn't be extremely efficient. \n. Ok that's what I thought. \nSo far the packages are in good progress. I even successfully made a coffee-script package that compiles coffeescript files in any other package and serves them appropriately. Most notable in client-side code, right now, every client-side javascript file in packages are served as is (raw), so compiling each file independently, when it changes is extremely fast. But it was more of a test then anything else. \nI was also thinking of aligning the package system as similar as meteor's packages. Though the API in the actual packages will be different, that we cannot change, the boilerplate stuff could be identical. Might open some doors to package transferring between both frameworks.  \nI'll have a working demo sometime soon, not sure how I'll merge my stuff as I'm writing it all in JavaScript, and Tower's source is staying in coffee-script, so you can just clone my fork of Tower until I figure it out. \nBut we'll see were it goes. \n. Example coffee-script package: https://github.com/TheHydroImpulse/tower-coffee-script/ . Just a demo of a fully working compiler for packages. In any package (when using the coffee-script package) you're able to write coffee-script files. When a file changes (within a package) the file will go through the bundler. The coffee-script package simply extends the bundler by registering a new extension and processing each file when it changes, added, etc...\n. @mikesmullin They'll be a dependency problem libgd2-xpm-dev being only for linux. Tower would need to work for all platforms. \n. Awesome! Screencasts is the tricky one. I've been doing tutorial screencasts on Youtube for a couple years now and still have lots to improve. But it doesn't matter if we try 50 times and every time we start over, I think if we can get a really solid first few screencasts up, it'll get extremely easier over time. I think people, especially newcomers, need direction. They need steps 1 to 50, and transitions to each step. A lot of frameworks / screencasts (meteor for example) show a sped up version of step 1 and then skip to random steps there afterwords. It confuses the users who don't know where to start. Especially with this new technology, I would classify Meteor and Tower in the same group for future web apps, just an all-around new way to make applications. Users aren't used to this kind of thinking, programming, or concepts. Though Tower is more feature-full I'd say, and that means we would need more stuff out there. \nWritten documentation would be the hardest one, as it's very tedious, and there will have lots of it. But there's a lot of people, myself included that would try to improve/finish it as much as possible. \nScreencasts Ideas:\n- Introduction: A simple, yet intuitive introduction video that explains what Tower is, how it roughly works, and how to get started. An all-around well explained video.\n- Real-time: Because Tower is built on this real-time approach, we should explain what the heck it is, how it roughly works (with references to future videos), etc...\n- MVC/App Structure: This would be a simple video, but basically showing how an app structure look like and showing the controllers, models, views, and templates, and explaining each part separately.\n- JS or Coffee: Probably not a long video, but something that demonstrates using both languages in Tower. I'm not sure where we are in that decision, so that'll impact this video.\n- Scaffolding a New Application: Exactly that, we would start with installing Tower from npm, creating a new app and getting started. Maybe we should come up with a good demo app that would show the power that Tower has. Todo-lists are too simple. Blogs are again, too simple, though you could increase the feature-set of a blog, it's still in the past, though. I think something like what Meteor did in their screencasts. Something completely custom, yet somewhat simple.\n- Controllers: Explaining all the different controller concepts, APIs, etc... both client and server-side.\n- Models: How they work, etc...\n- Views: x\n- Templates: x\n- Router: A somewhat big video demonstrating everything you can do with it, client and server. Possibly splitting it into smaller parts (i.e 3 10 minute videos are better then 1 30 minute video.) Because we explained the controllers, models, views, and templates previously, we can go ahead and introduce them to joining all the parts with the router.\n- Backgroung Jobs: We still need to decide on a proper API, I think that'll come, we have some really good options, but we just need to get the balance right (model vs controller, etc...). \n- Authentication: Probably a later video, they'll definitely be more \"basic\" videos in-between, but we should definitely show how to build membership sites.\n- Packages: Not sure if this should be in 0.5.0, but I think it could be. Lot's of tuning will have to be done, but it's pretty straight forward. Anyways, showing how they could create a package, distribute it with NPM, and we could possibly have a \"Packages\" section on the Tower website where people could add their packages to it. Though the packages would be stored on github/npm, it would just become a directory or yellowpages of sort.\nI've got lots of ideas for screencasts, so this is just the beginning. If we have a strong documentation, video and written, we'll be rock solid. \nFor blog posts, we could have the following:\n- API decisions:\n- Polls: Where we ask the community what they think of a particular part of Tower\n- Progress: Explain, possibly weekly or bi-weekly at least where we are in progress, feature-set, improvements, fixes, etc...\n- Releases: An obvious one. When we release a new version, we'd post up what's included, the things changed in bullet points. Breaking changes, etc...\n- Interesting Problems: Things like the data synchronization, and other problems that we either have multiple solutions in mind or we actually solved the problem. \nI'm sure other people would have plenty of suggestions for topics, and once we release 0.5.0, new users would be perfect to ask what we can improve on.\n. @edubkendo I'm pretty sure it was in a previous issue where nested routes didn't work. That's why people started sending PR for the client-side router trying to fix it, and now were basically restarting the router.\n. On the list. There's a hacky authentication example, but it's not a full solution. Once I'm done implementing a few features I've been working on, I'll get started with this.\n. @btbinhtran @viatropos I'm currently working on a better testing environment for 0.5.0. You'll be able to run the following: tower test which will run all the tests. Because everything will become a package (even your application), the tests will reside inside their respective package. This makes the whole testing structure extremely modular. Your package file could look like this:\njavascript\nTower.Packager.create('example-package')\n  .server()\n    .add('server.js', true) // True marks this file for initialization search.\n    .tests('tests/server/**/*')\n.client()\n    .add('client.js', true)\n    .tests('tests/client/**/*')\nStill in the prototype stage and the API can change but that's basically the gist of it.\nYou'll also be able to do the following (still thinking of the syntax)\nshell\ntower test include,filename,pattern=/[A-Za-z0-9](hello\\_world)/\nYou could do the same with exclude searching, and you could search for something other than the filename, maybe a pattern for test names it('should ...') or group names describe('hello world'). Still thinking of other possibilities, but this could dramatically increase the testing environment. \nMaybe, if you're inside a Tower app, running tower test would only run the app's tests and not the frameworks. Maybe having a flag like tower test include,tower then you can specify which tests you want to run like: \nshell\ntower test include,packages=['tower-cli', 'tower', 'tower-generator']\nSearching types could be:\n- include\n- exclude\nHaven't thought of anything else.\nAnd, you could have the following criterias:\n- packages\n- package\n- filename\n- group\n- test\nThoughts?\n. Yeah, so right now, I'm basically writing an extremely light lexer and parser for the test syntax. It's currently super fast, and works with strings, regex, numbers, etc...\nOnce Tower 0.5.0's repository is up, then we'll be able to test it out to see how we can improve it.\n. Could you concatenate all those commits into one?\n. yeah that's weird. I heard Lance (viatropos) is fairly busy right now, so don't worry if your PR is sitting there for a little bit.\n. I don't think an example ATM would be very useful as things are going to rapidly change. I think an example would be best when 0.5.0 comes out.\n. This has been fixed in a pull request: https://github.com/viatropos/tower/pull/376 though it hasn't been merged yet.\n. Not sure if the pull request didn't go through or if the npm version isn't\nup to date with the repo.\nEither way, were working hard on 0.5.0 which will dramatically change\nthings up. Thats why these issues might not be the first priority.\nOn Feb 8, 2013 12:18 PM, \"Mark\" notifications@github.com wrote:\n\nWorked for me, thanks, will this be addressed in a more permanent way?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/375#issuecomment-13306500..\n. Lance (@viatropos) and I. I don't know any plans on getting a foundation up, but I'm definitely staying for the long haul. Once we hit 0.5 we'll be a lot more visible as were trying to keep things quite a little bit. You can check my fork https://github.com/TheHydroImpulse/tower were I do most of my work, though, I typically work locally then only push when things work. You can also check out the gist account of both Lance and I, that's where we put some of our ideas. \n. Well, I'm Canadian, so we aren't really fans of the Superbowl, lol.\n\nAnyways, I plan on updating my blog with weekly or bi-weekly (This can mean either every two weeks, or twice a week - some people get confused) with Tower news - http://hydrocodedesign.com\nWe got a lot of awesome stuff being worked on. You can view some of the new APIs on gist.github.com under @viatropos or myself.\nIf you have any suggestions, requests, etc.. Just let me know. \n. This is still very raw, and not done, but while the server is down, all incoming connections (http, https, web sockets - yes even websockets) will be queued up with Buffers until the server is back up again. That means there won't be any loss in data or transactions failing. \n. I plan on integrating the bundler's watcher into this new system. This means that we can easily have multiple tower instances running all going through the single proxy. Because tower is now actually being spawned as a child process. \nOn another note, I had to remove the node_modules file watcher for the packages. Its wayyy to slow for the current watcher.\n. This is most likely related to downloading through github instead of using the npm version. When you install through npm, it'll run some installation scripts. The packages folder is for the source code, and the actually runned files are compiled within the lib folder. I'm assuming the compilation of the coffeescript didn't complete or failed.\nTry cd-ing into the tower folder inside node_modules and run `make watch and it'll compile the files.\n. Ahh, I see.\nWe had worked on some windows platform fixes a few months ago, but sorta\ntook them out because of the increasing complexity. Because of that I'm\nworking on 0.5.0 to work on windows really well, currently using Jake\ninstead of make (not sure if that'll last - well see).\nTo work with the towers source code ATM (not includimg 0.5.0) you'll need\nmake.\nNot sure why you're getting that error, never seen that before. Try looking\nin your global tower folder for a lib folder. Also check to see if you\nhaven't installed a local version of tower through npm's repo.\nOn Feb 8, 2013 2:06 PM, \"neverfox\" notifications@github.com wrote:\n\nJust to be clear, when I say that I used the github version, I mean as an\nargument to npm install. In other words, I first ran npm install -g tower,\nwhich gave me the problem I described. Only then did I try npm install -g\ngit://github.com/viatropos/tower.git, on a whim. Neither approach gave me\na version where cake watch worked. Also, coffee-script and grunt are also\ninstalled globally in npm.\nI'll try your suggestion. Do you mean failing during the npm installation\nof tower? Any idea as to why this might be happening? If it relies on makebeing available, that could definitely be the issue, given that this is a\nWindows machine and make needs to be explicitly installed.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/381#issuecomment-13311241..\n. Once I get home I'll see what the issue is. You should be able to run npm install within your app to get started. Do you get any specific errors other than the task one?\n\nThe main issues with Tower (prior to 0.5.0) are:\n- It uses Make\n- Uses unix commands for tests, etc...\n- Has some hard coded path separator (/ instead if \\ on windows)\n- Requires at least two tabs open, which is a problem with windows (unless you're using console2 or something) which has shitty command line system.\nI think that's it. Most of the path separators or platform specific things seemed to be fixed for the most part. \nUnfortunately my branch is completely unstable since it has many of the 0.5.0 stuff.\n. I do my work on a Windows machine and everything works fine, so it must be an issue with one of the latest patches or changes to the code base. I would suggest to wait for 0.5.0. I consider 0.4.3 to be unstable - both in performance/stability and in efficient environment (make, grunt, impossible client-side development (Tower source)). \nThat's the only problem with Ember, it's not a full-stack client/server framework. So you're required to have another server-side mashup which isn't ideal. Lot's of time spent on boilerplate code and not your app. 0.5.0 is going to be much much better. Were leaving the \"rails clone\" tagline and embarrassing our own unique style. Router, Resources, controllers, models, packages, IoC, events are all new. \nWe should have some pretty cool stuff going on in the next few weeks.\n. That chmod error is because you need root privilege to install modules\nglobally.\nOn Feb 14, 2013 10:41 AM, \"Gilbert Bishop-White\" notifications@github.com\nwrote:\n\nI tried installing tower using '''npm install -g tower''' is appeared to\nwork fine but '''tower''' was not a recognised command. I then tried '''npm\ncache clean''' and then '''npm install -g tower'''. But it failed\nconsole log & log file: https://gist.github.com/gilbertbw/4951927\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/383.\n. Right now I'm guessing that Tower won't move to grunt 0.4 unless someone sends a PR and that will become useless for reasons I'll share below. Were working hard on Tower version 0.5.0. I don't want to say too much at this point, but let's just say it's different, very different. As a result, we are dropping grunt all together. \n. @pocesar Because 0.4.0 is quite different than the previous version.\n. I'm guessing you're running grunt 0.4 which Tower doesn't support. You'll have to downgrade to a previous version.\n. Tower does not support grunt 0.4.0. Please downgrade to 0.3.*.\n. npm install grunt@3.x.x -g\n. Yes, we are aware of that. Were working on the next version 0.5.0 that basically changes everything. 0.4.x isn't ready for use. I'd personally wait till 0.5.0 as to not waste your time on 0.4.x.\n. No worries. I can't talk about any specifics (of the new version), just wanted to let you know were still working on Tower. We'll annonce things when were ready. \n\nHaven't seen that error before, but there have been many weird errors on different platforms or setups. If things keep not working, I'd definitely wait till 0.5.0 where things will work.\nThanks.\n. A quick guess is that the less grunt task is for the newer 0.4.0 version and not 3.x.x.\n. I don't really remember. Try 0.3.5 or something. Make sure you have the grunt-contrib-less at version 0.3.0.\n. Sorry, but were not updating version 0.4.x anymore (unless someone steps in). Were putting the effort towards 0.5.0 instead.\n. @Cacteye Are you talking about 0.5.0?\n. @Cacteye Yes. Grunt is gone for 0.5.0. Tower will only use a single console tab to operate, instead of two. Were opting for an extremely light-weight bundler. \n. @Cacteye Yes. The bundler or bundle will perform everything regarding to assets. JavaScript is the primary language.\n. @wamatt http://github.com/tower #0.5\n. @wamatt @Cacteye Although that's greatly outdated, it might be useful. Once we release 0.5.0, we'll be very public on what's going on.\n. @wamatt We don't want to draw too much attention yet, at least not until it's ready. That's why there isn't anything on there. \nYes, that's the new home and it's also composed of components.\n. As far as I know many-to-many relationships were taken out because of performance reasons. You'd need to use the has_many :through alternative. Similar to Rails.\n. Tower 0.5.0 will work 100% on 0.10.\n. mmm. I've never seen this error before. I apologize for the complicated setup. I would just wait for 0.5.0 which is coming soon. It'll be a much more streamlined process.\n. @edubkendo Yeah, I've noticed that more and more problems are arising. I'll see what I can do.\n. @edubkendo @btbinhtran I'll talk with @viatropos and see how we want to organize this. Yes, that's where tower 0.5.0 is being held at. We wanted to keep it under a tight lid while we did most of the development. We were originally going to go with a single repository and we previously discussed splitting it up into smaller modules but decided not to. We came to the conclusion that separating Tower into small modules was a much easier way to work and created a more organized environment. This does create a bit of work if you want to work on multiple modules locally as you need to link all of them using npm but once your environment is setup, it only gets better. We opted for a component and npm workflow. Component is used for managing client-side modules and npm for server-side.\nThis model works incredibly well and provides independent, testable modules. We are also no longer using any globals and work with a more functional, chain-able API.\nI do feel like contributing will be decentralized but it will make it easier (I think) for people to contribute right away. Previously, you had to really dig deep into the source code and everything was tied together. This new model allows people to work exclusively on specific modules without touching any other ones.\nAlso, there will be a repo under tower/tower which will be the main repository. All issues will most likely be placed under this repo for anything Tower related. We'll be transferring the current tower repo over to the organization. All commits and contributions will also be transfered and not lost.\nIf you have any questions, just let me know.\n. Added a bit of info to my last comment.\n. @mfjohansson no worries. That roadmap is outdated. I don't want to spoil everything just yet but I'll enlighten you on some of the things happening.\nWhen is it going to be released? We haven't put a date on the release yet.\n0.5.0 is a complete rewrite from 0.4.x. Why? Because were now operating in pure JavaScript as a basis instead of CoffeeScript. We went for a more modular approach with more than 50+ modules comprising Tower. We will be releasing a lot more information when were close to the release of Tower with proper documentation.\n. @octopusinc We're almost ready. \n. @maximkott Is that the full output?\nAlso, are you running npm install tower -g?\n. @maximkott The tower binary is included in the tower-cli package, that's why you're running into errors. Try running npm install tower-cli -g. We might have to put some sort of wrapper executable in this repository for simplicity.\n. @tamvo @kbups @eleung Tower is not ready to be used right now. Many of the components are still being developed.\n. @muminoff Yes, Tower is currently not ready for use. While many of the modules are almost done, we still need to finish them, and integrate everything together to make everything work.\n. @tarun1793 Hey, the main repo doesn't change because most of the functionality has been moved in independent repos across the tower organization.\nTower isn't as much of a framework, but a collection of many independent components. I'll be working on integrating much of the platform to make it a framework, or make it easier to use all these components.\n. @tarun1793 Yeah, I mean Tower still kinda is a framework, or that's the goal, but not in the Rails sense of the word. The framework part is still under wraps and being developed while the underlying mechanics are pretty much there. The final effort is to streamline the process, and stuff.\nWe like to get away from the Rails notion of a framework definition. Node is very much different from how Ruby works, in terms of community, principles, etc... \n. @tarun1793 Awesome. Let me know if you need help. There's virtually no docs or anything, which is something on the horizon. \n. @tarun1793 Oops, forgot to reply. fyi @viatropos posted that answer on SO. I should also note that the comparison was for earlier versions of Tower and Railwayjs (I think they changed names).\nLance and myself and decided to concentrate efforts on small portions of Tower at a time, and start branding it as an experiment for modular apps.\n. @andreyvit Hey,\ntowerjs.org should be redirecting to tower.github.io. We did have a towerjs.org our previous site for an older version of Tower.\nI'll be getting some stuff in the README that explains what the current Tower is all about.\n. @tarun1793 mmmm, that's a bit strange. It works for me, but I'll see what's going on.\n. @tarun1793 the previous version was written in coffee script. The current version is in JavaScript.\n. @tarun1793 Didn't get a notification for that last message. Coffee-script added a barrier to entry and to participate. It also added unnecessary complexity.\n. @dts Our templating engine supports both the client-side and server-side. The client-side portion is a little bit messy, and we have old repos laying around.\nThe server-side is rendered through server-dom and the actual template library is under the new branch (https://github.com/tower/server-template/tree/new). I'll merge it in to the master branch and update NPM if you'd like. \nThe client-side will be much cleaner, almost exactly like the server-side. So server and client compatible.\nI might just make the template repo server & client to simplify everything.\n. @dts It's not \"production ready\", I wouldn't say. Right now, I wouldn't classify Tower as anything close to a framework. Right now, it's a bunch of small modules that can be used independently, or together. I'm currently putting my effort into the view system (server & client). The templating system is pretty much complete, the view system is just a higher abstraction.\nThe main effort in getting the templates to work seamlessly client and server is a pipeline of sort. Where we package up all the templates to be used on the client-side. That's a future goal, and pretty easy to accomplish.\nI'm currently using many of the Tower modules in production for @titananalytics. @viatropos and I are getting the ideology of Tower together, and the process of building apps with our modules.\n. This would also alleviate a lot of the burden in setting up a new component. We could just a simple command: tower g component foo and all the required stuff will be generated. Moreover, we can easily wrap testing and everything behind a single, integrated cli. For example, testing against phantom: tower test phantom. \nAgain, many of these commands can be deferred to more specialized tools like component-test.\n. @lancejpollard Working on the cli stuff under @clijs. It'll be extremely easy to start creating the tower cli to generate components and such.\n``` js\nvar cli = require('tower-cli');\nvar tower = cli('tower');\nvar generator = require('tower-generator');\ntower.command('create {name}', function(name) {\n   return generator('./generators/component', process.cwd(), { name: name });\n}).then(function(ok) {\n    cli.success(ok);\n}).catch(function(err) {\n    cli.error(err);\n});\nvar gen = tower.command('generate');\ngen.command('model {name}', function(name) {\n    // Same as the previous generator.\n});\ngen.command('migration {name}', function(name) {\n    // Same as the previous generator.\n});\n```\nThese commands can then be run with:\nbash\ntower create foo\ntower generate model user\ntower generate migration create-user\n. @Albinzr it's been left in a mostly not useful state for the past 3 years. You're better off using React or any of the popular frameworks to build apps.. ",
    "michaelsbradleyjr": "This is still failing for me on Ubuntu 11.10, node v0.6.15, mongod v2.0.4, fresh clone of tower, npm test:\n```\n$ npm test\n\ntower@0.4.0-12 test /home/michael/repos/other/tower\nnode_modules/mocha/bin/mocha $(find test -name \"*Test.coffee\")\n\n...\n3) Issue105 handle request with unknown format:\n     expected { attributes: \n   { id: 4f9a3a7d89fc3a6c0900047c,\n     title: null,\n     rating: 4,\n     type: 'Post',\n     tags: [],\n     meta: null,\n     userIds: [],\n     userId: null,\n     createdAt: Fri, 27 Apr 2012 06:19:41 GMT,\n     updatedAt: Fri, 27 Apr 2012 06:19:41 GMT,\n     likeCount: 0 },\n  relations: {},\n  changes: \n   { before: \n      { title: null,\n        rating: null,\n        type: 'Post',\n        tags: [],\n        meta: null,\n        userIds: [],\n        userId: undefined,\n        createdAt: undefined,\n        updatedAt: undefined,\n        likeCount: 0,\n        id: undefined },\n     after: { '$set': [Object] },\n     title: [ undefined, null ],\n     rating: [ undefined, 4 ],\n     tags: [ [], [] ],\n     meta: [ undefined, null ],\n     userIds: [ [], [] ],\n     userId: [ undefined, null ],\n     createdAt: [ undefined, Fri, 27 Apr 2012 06:19:41 GMT ],\n     updatedAt: [ undefined, Fri, 27 Apr 2012 06:19:41 GMT ],\n     id: [ undefined, 4f9a3a7d89fc3a6c0900047c ] },\n  errors: {},\n  operations: \n   [ { '$set': [Object] },\n     { '$set': [Object] },\n     { '$set': [Object] },\n     { '$set': [Object] },\n     { '$set': [Object] },\n     { '$set': [Object] },\n     { '$set': [Object] },\n     { '$set': [Object] },\n     { '$set': [Object] },\n     { '$set': [Object] },\n     { '$set': [Object] } ],\n  operationIndex: 11,\n  readOnly: false,\n  persistent: true } to equal undefined\nnpm ERR! tower@0.4.0-12 test: node_modules/mocha/bin/mocha $(find test -name \"*Test.coffee\")\nnpm ERR! sh \"-c\" \"node_modules/mocha/bin/mocha $(find test -name \\\"*Test.coffee\\\")\" failed with 3\n...\n```\n. This is still failing for me on Ubuntu 11.10, node v0.6.15, mongod v2.0.4, fresh clone of tower, npm test:\n```\n$ npm test\n\ntower@0.4.0-12 test /home/michael/repos/other/tower\nnode_modules/mocha/bin/mocha $(find test -name \"*Test.coffee\")\n\n...\n3) Issue105 handle request with unknown format:\n     expected { attributes: \n   { id: 4f9a3a7d89fc3a6c0900047c,\n     title: null,\n     rating: 4,\n     type: 'Post',\n     tags: [],\n     meta: null,\n     userIds: [],\n     userId: null,\n     createdAt: Fri, 27 Apr 2012 06:19:41 GMT,\n     updatedAt: Fri, 27 Apr 2012 06:19:41 GMT,\n     likeCount: 0 },\n  relations: {},\n  changes: \n   { before: \n      { title: null,\n        rating: null,\n        type: 'Post',\n        tags: [],\n        meta: null,\n        userIds: [],\n        userId: undefined,\n        createdAt: undefined,\n        updatedAt: undefined,\n        likeCount: 0,\n        id: undefined },\n     after: { '$set': [Object] },\n     title: [ undefined, null ],\n     rating: [ undefined, 4 ],\n     tags: [ [], [] ],\n     meta: [ undefined, null ],\n     userIds: [ [], [] ],\n     userId: [ undefined, null ],\n     createdAt: [ undefined, Fri, 27 Apr 2012 06:19:41 GMT ],\n     updatedAt: [ undefined, Fri, 27 Apr 2012 06:19:41 GMT ],\n     id: [ undefined, 4f9a3a7d89fc3a6c0900047c ] },\n  errors: {},\n  operations: \n   [ { '$set': [Object] },\n     { '$set': [Object] },\n     { '$set': [Object] },\n     { '$set': [Object] },\n     { '$set': [Object] },\n     { '$set': [Object] },\n     { '$set': [Object] },\n     { '$set': [Object] },\n     { '$set': [Object] },\n     { '$set': [Object] },\n     { '$set': [Object] } ],\n  operationIndex: 11,\n  readOnly: false,\n  persistent: true } to equal undefined\nnpm ERR! tower@0.4.0-12 test: node_modules/mocha/bin/mocha $(find test -name \"*Test.coffee\")\nnpm ERR! sh \"-c\" \"node_modules/mocha/bin/mocha $(find test -name \\\"*Test.coffee\\\")\" failed with 3\n...\n```\n. ",
    "scottkf": "I created a groupBy method, like rails has, I'll post an example later. \n. ``` coffeescript\nTower.SupportGroupBy = \n  emberGroupBy: (emberArray, val) ->\n    result = {}\n    l = emberArray.length\n    iterator = if _.isFunction(val) then val else (obj) -> obj.get(val) if obj\n    for i in [0..l-1]\n      value = emberArray.objectAt(i)\n      key   = iterator(value,i)\n      (result[key] or (result[key] = [])).push(value) if value && key\n    return result\nTower._.mixin Tower.SupportGroupBy\n```\nNow you can do things like:\ncoffeescript\nApp.User.all (err, @comments) =>\n  App.Post.all (err, @posts) =>\n    @posts = _.emberGroupBy @posts, 'userId'\n      render ...\n``` coffeescript\nfor post in @posts\n    li ->\n        h3 @posts.get('title')\n        hr/\n        for comment in @comments[@posts.get('id')]\n            p -> ...\n```\nHowever, if you have a lot of relational data, you should really consider using a relational database as joins don't really exist in mongo. You can't join then order the data together, and lots of other things.\n. This has actually been happening intermittently and I haven't discovered the cause yet\n. As a side note, thanks for towerjs! I'll probably stick with towerjs for a while (I need to move a high performance sites to node, and I don't want  to reinvent the wheel), and will have quite a few more things. I'd be happy to submit pull requests and tests, do you have any guidelines for pull requests?\n. I'll give this a try if I can get routing working temporarily, or when you get it working. Thanks!\n. The only issue I've seen with a new project is the root view won't display, does it need a view?\ncoffeescript\nApp.IndexView = Ember.View.extend\n  templateName: 'welcome'\nVariations of that didn't really work\n. It was just pseudocode, in order to get what I was working on working, I just used an Integer with bitwise operations instead of a Hash, but I'll keep digging tomorrow and write some tests\n. To fix it the encode method would have to be something like this: \n``` coffeescript\n  encode: (field, value, operation) ->\n    return value unless field\nmethod = @[\"encode#{field.encodingType}\"]\nif _.isArray(value)\n  value = (method.call(@, v, operation) for v in value)\nelse if method\n  value = method.call(@, value, operation)\nvalue = [value] if operation == '$in' && !_.isArray(value)\n\n```\n. Sounds good, but wouldn't this only come up where the value (the function parameter) was an array? Mongo doesn't really expect any other values, right? Only an array, a hash, or a value? And it looks like the hashes get ripped apart and encoded separately \n. Good point, as I use tower more I'm sure I will come across things\n. Ah, nope, I thought it was old code, I'll look into it a little more\n. If instead of defining playedCount as a function, I do this:\ncoffeescript\n@field 'playedCount',\n  get: (value) ->\n    return @get('ownerships').count()\nI receive the correct results, so there must be a bug in class.coffee? Or maybe something else weird with the installation\n. Yes, I could've been a little more detailed, but essentially it's not showing up in the browser, I haven't looked into it more yet. This is on the development branch\n. Ember's version is 1.0.pre, and javascript was correct, I checked a couple times to be sure :) tower.js is the latest as well, and checking to a simpler property had no effect as well. When creating a prototype function for a model in towerjs, it gets translated to\njavascript\n    Profile.prototype.playedCount = Ember.computed(function() {\n      return this.get('ownerships').count()\n    }).property('ownerships');\nWhere when using field, field gets all this fancy stuff: from ModelAttributes constructor: \ncoffeescript\n    @_setDefault(options)\n    @_defineAccessors(options)\n    @_defineAttribute(options)\n    @_addValidations(options)\n    @_addIndex(options)\nI'm going to guess it's somewhere there\n. This corrected the behavior assuming I use the following definition:\n``` coffeescript\nplayedCount: Ember.computed ->\n    return @get('ownerships').count()\n  .property('ownerships')\n```\nThough it would be convenient, for people new with ember and tower, for Tower to be able to use the simple definition without using Ember.computed and .property. Or maybe just document that you need to use @field or Ember.computed when dealing with views. \n. After wrapping the mongodbfinders calls in a future, how would you notify all of the models to use the new find method, do you have to reopen it? Or..\nSomething like this should work:\ncoffeescript\nFuture = require('fibers/future')\nwait = Future.wait\nTower.StoreMongodb.wrappedFind = Future.wrap(Tower.StoreMongodb.find, 1)\nTower.StoreMongodb.find = -> Fiber(-> return Tower.StoreMongodb.wrappedFind.call(Tower.StoreMongodb, arguments[0]).wait()).run()\n. So, it's not really as simple as I thought above. For this to work the entire callback chain would have to be enclosed in a fiber. But, it might be possible to make the console run in a fiber and share the fiber with the console and just call the synchronous versions\n. Possibly, but even then, the fiber is only blocking within the fiber\nitself, so the console would have to be run in a fiber as well, which I was\nable to do by wrapping find in the cursor, but the context was lost each\ntime.\nWill the runCallback method return execution callback to the console, or\nthe finder functions?\nI'll work on this some more tomorrow now that I have a better understanding of how the fiber implementation works. I'll push it to my repo. \n. https://github.com/scottkf/tower/tree/sync\nYou can do this, then the context gets polluted:\ncoffeescript\nc = App.Ownership.count()\nreturn c\nThe context is crazy because REPL doesn't seem to want to run in a fiber, so the code has to be eval'd within a fiber (or a Sync). For example, this doesn't want to work:\ncoffeescript\nSync =>\n    repl    = repl.start\n      prompt:\"tower> \"\n      useGlobal: true\n      context: @\nIf I can get the context right it would work\n. Alright, options finished in #226, works w/coffeescript console. And it's great, it'll make everything a lot easier for sure. You can't quite chain commands things with relationships yet: App.Post.first().get('comments').count() won't work, but the fact I don't have to type out a callback syntax is already a lot better. There's probably other bugs lingering there too, when mixing sync and async code, try it out @edubkendo\n. I believe I got part of this working by by adding toParam: -> \"#{@get('id')}-#{@get('permalink')}\" to the model when I first tried tower. The url generation wasnt there though, but the finders worked. You can override buildResource, createResource and findResource in the controller, and probably resource too. The former are functions and the latter is an object\n. Shouldn't grunt test for this? Or are you testing your integration of grunt? If so, you can setup a simple test gruntfile just for grunt so it performs faster\n. I created a groupBy method, like rails has, I'll post an example later. \n. ``` coffeescript\nTower.SupportGroupBy = \n  emberGroupBy: (emberArray, val) ->\n    result = {}\n    l = emberArray.length\n    iterator = if _.isFunction(val) then val else (obj) -> obj.get(val) if obj\n    for i in [0..l-1]\n      value = emberArray.objectAt(i)\n      key   = iterator(value,i)\n      (result[key] or (result[key] = [])).push(value) if value && key\n    return result\nTower._.mixin Tower.SupportGroupBy\n```\nNow you can do things like:\ncoffeescript\nApp.User.all (err, @comments) =>\n  App.Post.all (err, @posts) =>\n    @posts = _.emberGroupBy @posts, 'userId'\n      render ...\n``` coffeescript\nfor post in @posts\n    li ->\n        h3 @posts.get('title')\n        hr/\n        for comment in @comments[@posts.get('id')]\n            p -> ...\n```\nHowever, if you have a lot of relational data, you should really consider using a relational database as joins don't really exist in mongo. You can't join then order the data together, and lots of other things.\n. This has actually been happening intermittently and I haven't discovered the cause yet\n. As a side note, thanks for towerjs! I'll probably stick with towerjs for a while (I need to move a high performance sites to node, and I don't want  to reinvent the wheel), and will have quite a few more things. I'd be happy to submit pull requests and tests, do you have any guidelines for pull requests?\n. I'll give this a try if I can get routing working temporarily, or when you get it working. Thanks!\n. The only issue I've seen with a new project is the root view won't display, does it need a view?\ncoffeescript\nApp.IndexView = Ember.View.extend\n  templateName: 'welcome'\nVariations of that didn't really work\n. It was just pseudocode, in order to get what I was working on working, I just used an Integer with bitwise operations instead of a Hash, but I'll keep digging tomorrow and write some tests\n. To fix it the encode method would have to be something like this: \n``` coffeescript\n  encode: (field, value, operation) ->\n    return value unless field\nmethod = @[\"encode#{field.encodingType}\"]\nif _.isArray(value)\n  value = (method.call(@, v, operation) for v in value)\nelse if method\n  value = method.call(@, value, operation)\nvalue = [value] if operation == '$in' && !_.isArray(value)\n\n```\n. Sounds good, but wouldn't this only come up where the value (the function parameter) was an array? Mongo doesn't really expect any other values, right? Only an array, a hash, or a value? And it looks like the hashes get ripped apart and encoded separately \n. Good point, as I use tower more I'm sure I will come across things\n. Ah, nope, I thought it was old code, I'll look into it a little more\n. If instead of defining playedCount as a function, I do this:\ncoffeescript\n@field 'playedCount',\n  get: (value) ->\n    return @get('ownerships').count()\nI receive the correct results, so there must be a bug in class.coffee? Or maybe something else weird with the installation\n. Yes, I could've been a little more detailed, but essentially it's not showing up in the browser, I haven't looked into it more yet. This is on the development branch\n. Ember's version is 1.0.pre, and javascript was correct, I checked a couple times to be sure :) tower.js is the latest as well, and checking to a simpler property had no effect as well. When creating a prototype function for a model in towerjs, it gets translated to\njavascript\n    Profile.prototype.playedCount = Ember.computed(function() {\n      return this.get('ownerships').count()\n    }).property('ownerships');\nWhere when using field, field gets all this fancy stuff: from ModelAttributes constructor: \ncoffeescript\n    @_setDefault(options)\n    @_defineAccessors(options)\n    @_defineAttribute(options)\n    @_addValidations(options)\n    @_addIndex(options)\nI'm going to guess it's somewhere there\n. This corrected the behavior assuming I use the following definition:\n``` coffeescript\nplayedCount: Ember.computed ->\n    return @get('ownerships').count()\n  .property('ownerships')\n```\nThough it would be convenient, for people new with ember and tower, for Tower to be able to use the simple definition without using Ember.computed and .property. Or maybe just document that you need to use @field or Ember.computed when dealing with views. \n. After wrapping the mongodbfinders calls in a future, how would you notify all of the models to use the new find method, do you have to reopen it? Or..\nSomething like this should work:\ncoffeescript\nFuture = require('fibers/future')\nwait = Future.wait\nTower.StoreMongodb.wrappedFind = Future.wrap(Tower.StoreMongodb.find, 1)\nTower.StoreMongodb.find = -> Fiber(-> return Tower.StoreMongodb.wrappedFind.call(Tower.StoreMongodb, arguments[0]).wait()).run()\n. So, it's not really as simple as I thought above. For this to work the entire callback chain would have to be enclosed in a fiber. But, it might be possible to make the console run in a fiber and share the fiber with the console and just call the synchronous versions\n. Possibly, but even then, the fiber is only blocking within the fiber\nitself, so the console would have to be run in a fiber as well, which I was\nable to do by wrapping find in the cursor, but the context was lost each\ntime.\nWill the runCallback method return execution callback to the console, or\nthe finder functions?\nI'll work on this some more tomorrow now that I have a better understanding of how the fiber implementation works. I'll push it to my repo. \n. https://github.com/scottkf/tower/tree/sync\nYou can do this, then the context gets polluted:\ncoffeescript\nc = App.Ownership.count()\nreturn c\nThe context is crazy because REPL doesn't seem to want to run in a fiber, so the code has to be eval'd within a fiber (or a Sync). For example, this doesn't want to work:\ncoffeescript\nSync =>\n    repl    = repl.start\n      prompt:\"tower> \"\n      useGlobal: true\n      context: @\nIf I can get the context right it would work\n. Alright, options finished in #226, works w/coffeescript console. And it's great, it'll make everything a lot easier for sure. You can't quite chain commands things with relationships yet: App.Post.first().get('comments').count() won't work, but the fact I don't have to type out a callback syntax is already a lot better. There's probably other bugs lingering there too, when mixing sync and async code, try it out @edubkendo\n. I believe I got part of this working by by adding toParam: -> \"#{@get('id')}-#{@get('permalink')}\" to the model when I first tried tower. The url generation wasnt there though, but the finders worked. You can override buildResource, createResource and findResource in the controller, and probably resource too. The former are functions and the latter is an object\n. Shouldn't grunt test for this? Or are you testing your integration of grunt? If so, you can setup a simple test gruntfile just for grunt so it performs faster\n. ",
    "KingScooty": "I seem to be getting this error when running node server. Any ideas?\n```\n   info  - socket.io started\n[Mon, 23 Apr 2012 16:40:33 GMT] INFO Tower development server listening on port 3000\nnode.js:201\n        throw e; // process.nextTick error, or 'error' event on first tick\n              ^\nError: failed to connect to [127.0.0.1:27017]\n    at [object Object]. (/Users/KingScooty/Sites/_dev/app_tower_test/node_modules/mongodb/lib/mongodb/connection/server.js:408:73)\n    at [object Object].emit (events.js:88:20)\n    at [object Object]. (/Users/KingScooty/Sites/_dev/app_tower_test/node_modules/mongodb/lib/mongodb/connection/connection_pool.js:93:15)\n    at [object Object].emit (events.js:70:17)\n    at Socket. (/Users/KingScooty/Sites/_dev/app_tower_test/node_modules/mongodb/lib/mongodb/connection/connection.js:382:10)\n    at Socket.emit (events.js:67:17)\n    at Array.0 (net.js:301:14)\n    at EventEmitter._tickCallback (node.js:192:40)\n``\n. A-ha! You know what, that did cross my mind, but i didn't think to actually try it as it wasn't mentioned in thegeneratesection of the README. Apologies for the ignorance.\n. +1 \n. I seem to be getting this error when runningnode server`. Any ideas?\n```\n   info  - socket.io started\n[Mon, 23 Apr 2012 16:40:33 GMT] INFO Tower development server listening on port 3000\nnode.js:201\n        throw e; // process.nextTick error, or 'error' event on first tick\n              ^\nError: failed to connect to [127.0.0.1:27017]\n    at [object Object]. (/Users/KingScooty/Sites/_dev/app_tower_test/node_modules/mongodb/lib/mongodb/connection/server.js:408:73)\n    at [object Object].emit (events.js:88:20)\n    at [object Object]. (/Users/KingScooty/Sites/_dev/app_tower_test/node_modules/mongodb/lib/mongodb/connection/connection_pool.js:93:15)\n    at [object Object].emit (events.js:70:17)\n    at Socket. (/Users/KingScooty/Sites/_dev/app_tower_test/node_modules/mongodb/lib/mongodb/connection/connection.js:382:10)\n    at Socket.emit (events.js:67:17)\n    at Array.0 (net.js:301:14)\n    at EventEmitter._tickCallback (node.js:192:40)\n``\n. A-ha! You know what, that did cross my mind, but i didn't think to actually try it as it wasn't mentioned in thegenerate` section of the README. Apologies for the ignorance.\n. +1 \n. ",
    "moizr": "I actually had not run npm install . after creating the new project.\nI just tried it and now I'm getting errors about a c++ compiler not being available. I just installed Lion so I need to first get the new XCode before I try this.\n. @edubkendo Tried npm install . followed by running tower server -e development and I'm still not able to start the server\n. I actually had not run npm install . after creating the new project.\nI just tried it and now I'm getting errors about a c++ compiler not being available. I just installed Lion so I need to first get the new XCode before I try this.\n. @edubkendo Tried npm install . followed by running tower server -e development and I'm still not able to start the server\n. ",
    "protolif": "This was very helpful to me.\n. This was very helpful to me.\n. ",
    "kane-thornwyrd": "So,\nFedora 16 Verne\n$ uname -a\nLinux lucian3.local 3.3.2-6.fc16.x86_64 #1 SMP Sat Apr 21 12:43:20 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux\n$ node --version\nv0.6.15\n$ npm -v\n1.1.18\nThanks for the lightningfast reply !\n. Strangely \n$ npm cache clean\nas\n$ sudo npm cache clean\ndidn't output anything\u2026\nAsserting that's normal I relaunched:\n$ npm install (still inside myProject folder) and:\nhttps://gist.github.com/2497302\n. I don't have time right now to dig further, it's not officially part of the project I'm on, but I'll look for the solution tonight (in ~10hours) and hope to solve this, if this isn't by the way. I really want to use the almighty Tower goodness !\n. So,\nFedora 16 Verne\n$ uname -a\nLinux lucian3.local 3.3.2-6.fc16.x86_64 #1 SMP Sat Apr 21 12:43:20 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux\n$ node --version\nv0.6.15\n$ npm -v\n1.1.18\nThanks for the lightningfast reply !\n. Strangely \n$ npm cache clean\nas\n$ sudo npm cache clean\ndidn't output anything\u2026\nAsserting that's normal I relaunched:\n$ npm install (still inside myProject folder) and:\nhttps://gist.github.com/2497302\n. I don't have time right now to dig further, it's not officially part of the project I'm on, but I'll look for the solution tonight (in ~10hours) and hope to solve this, if this isn't by the way. I really want to use the almighty Tower goodness !\n. ",
    "Zenithar": "I'm experiencing to same problem, with node 0.8.9, I think it's a http proxy using issue.\n. I'm experiencing to same problem, with node 0.8.9, I think it's a http proxy using issue.\n. ",
    "gagginaspinnata": "I dont know what went wrong, but after creating a new project everything is working fine.\nThank you\n. I dont know what went wrong, but after creating a new project everything is working fine.\nThank you\n. ",
    "willyjl": "my generated app is my-app.\nI retried it under the name towerapp and reinstalled all the dependencies via command :\nsudo npm install underscore underscore.string mongodb redis coffee-resque coffee-script mint tower stylus less uglify-js pathfinder async mocha chai sinon design.io design.io-javascripts design.io-stylesheets knox gzip forever cli-table\nit gave me error messages :\n```\n\ndesign.io@0.3.1 install /Users/willyjansen/Documents/Private/node-workspace/towerapp/node_modules/design.io\ngem install rb-fsevent rb-inotify --no-ri --no-rdoc\n\nERROR:  While executing gem ... (Gem::FilePermissionError)\n    You don't have write permissions into the /opt/local/lib/ruby/gems/1.8 directory.\nnpm ERR! design.io@0.3.1 install: gem install rb-fsevent rb-inotify --no-ri --no-rdoc\nnpm ERR! sh \"-c\" \"gem install rb-fsevent rb-inotify --no-ri --no-rdoc\" failed with 1\nnpm ERR! \nnpm ERR! Failed at the design.io@0.3.1 install script.\nnpm ERR! This is most likely a problem with the design.io package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     gem install rb-fsevent rb-inotify --no-ri --no-rdoc\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls design.io\nnpm ERR! There is likely additional logging output above.\nnpm ERR! \nnpm ERR! System Darwin 11.3.0\nnpm ERR! command \"node\" \"/opt/local/bin/npm\" \"install\" \"underscore\" \"underscore.string\" \"mongodb\" \"redis\" \"coffee-resque\" \"coffee-script\" \"mint\" \"tower\" \"stylus\" \"less\" \"uglify-js\" \"pathfinder\" \"async\" \"mocha\" \"chai\" \"sinon\" \"design.io\" \"design.io-javascripts\" \"design.io-stylesheets\" \"knox\" \"gzip\" \"forever\" \"cli-table\"\nnpm ERR! cwd /Users/willyjansen/Documents/Private/node-workspace/towerapp\nnpm ERR! node -v v0.6.17\nnpm ERR! npm -v 1.1.21\nnpm ERR! code ELIFECYCLE\nnpm ERR! message design.io@0.3.1 install: gem install rb-fsevent rb-inotify --no-ri --no-rdoc\nnpm ERR! message sh \"-c\" \"gem install rb-fsevent rb-inotify --no-ri --no-rdoc\" failed with 1\nnpm ERR! errno {}\nnpm ERR! \nnpm ERR! Additional logging details can be found in:\nnpm ERR!     /Users/willyjansen/Documents/Private/node-workspace/towerapp/npm-debug.log\nnpm not ok\n```\nbut then I retried this command using root privilege and it works!\nI applied the same dependencies installation to my-app and it also works. Now I don't know what cause the earlier error, perhaps one or two packages were not installed properly yet.\n. my generated app is my-app.\nI retried it under the name towerapp and reinstalled all the dependencies via command :\nsudo npm install underscore underscore.string mongodb redis coffee-resque coffee-script mint tower stylus less uglify-js pathfinder async mocha chai sinon design.io design.io-javascripts design.io-stylesheets knox gzip forever cli-table\nit gave me error messages :\n```\n\ndesign.io@0.3.1 install /Users/willyjansen/Documents/Private/node-workspace/towerapp/node_modules/design.io\ngem install rb-fsevent rb-inotify --no-ri --no-rdoc\n\nERROR:  While executing gem ... (Gem::FilePermissionError)\n    You don't have write permissions into the /opt/local/lib/ruby/gems/1.8 directory.\nnpm ERR! design.io@0.3.1 install: gem install rb-fsevent rb-inotify --no-ri --no-rdoc\nnpm ERR! sh \"-c\" \"gem install rb-fsevent rb-inotify --no-ri --no-rdoc\" failed with 1\nnpm ERR! \nnpm ERR! Failed at the design.io@0.3.1 install script.\nnpm ERR! This is most likely a problem with the design.io package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     gem install rb-fsevent rb-inotify --no-ri --no-rdoc\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls design.io\nnpm ERR! There is likely additional logging output above.\nnpm ERR! \nnpm ERR! System Darwin 11.3.0\nnpm ERR! command \"node\" \"/opt/local/bin/npm\" \"install\" \"underscore\" \"underscore.string\" \"mongodb\" \"redis\" \"coffee-resque\" \"coffee-script\" \"mint\" \"tower\" \"stylus\" \"less\" \"uglify-js\" \"pathfinder\" \"async\" \"mocha\" \"chai\" \"sinon\" \"design.io\" \"design.io-javascripts\" \"design.io-stylesheets\" \"knox\" \"gzip\" \"forever\" \"cli-table\"\nnpm ERR! cwd /Users/willyjansen/Documents/Private/node-workspace/towerapp\nnpm ERR! node -v v0.6.17\nnpm ERR! npm -v 1.1.21\nnpm ERR! code ELIFECYCLE\nnpm ERR! message design.io@0.3.1 install: gem install rb-fsevent rb-inotify --no-ri --no-rdoc\nnpm ERR! message sh \"-c\" \"gem install rb-fsevent rb-inotify --no-ri --no-rdoc\" failed with 1\nnpm ERR! errno {}\nnpm ERR! \nnpm ERR! Additional logging details can be found in:\nnpm ERR!     /Users/willyjansen/Documents/Private/node-workspace/towerapp/npm-debug.log\nnpm not ok\n```\nbut then I retried this command using root privilege and it works!\nI applied the same dependencies installation to my-app and it also works. Now I don't know what cause the earlier error, perhaps one or two packages were not installed properly yet.\n. ",
    "cacois": "For what its worth, I got this error even when using sudo, and solved it by using RVM and switching my default ruby to something other than the OSX system install of 1.8.7. \n. For what its worth, I got this error even when using sudo, and solved it by using RVM and switching my default ruby to something other than the OSX system install of 1.8.7. \n. ",
    "avaranovich": "Is that related to the issue being fixed? http://stackoverflow.com/questions/11558346/how-to-upload-towerjs-assets-to-s3\n. Closing the issue since it was a module-related.\n. It solved the issue indeed. Thanks!\n. I looked at tower.js\njavascript\n Ajax.prototype.createRequest = function(records, options) {\n       .....\n       json = this.toJSON(records);\n       Tower.urlFor(records.constructor); // should this be url = Tower.urlFor(records.constructor); ??\n       return this.queue(function() {\n         var params;\n         params = {\n           url: url, //otherwise it is not clear where this url is assigned\n           type: \"POST\",\n           data: json\n         };\n        return _this.ajax(options, params).success(_this.createSuccess(records)).error(_this.createFailure(records));\n      });\n. If I change the url, then I see the following data being send to the server as a POST request:\njson\n{\"user\":{\"id\":\"0\",\"createdAt\":\"2012-08-09T13:33:38.659Z\",\"updatedAt\":\"2012-08-09T13:33:38.659Z\"}}\nAnd I get another error on completion:\nUncaught TypeError: Cannot call method 'conditions' of undefined tower.js:2346\nTower.Store.Memory.Finders.find tower.js:2346\nTower.Store.Ajax.Ajax.createSuccess tower.js:2957\nf.Callbacks.n jquery.min.js:2\nf.Callbacks.o.fireWith jquery.min.js:2\nw jquery.min.js:4\nf.support.ajax.f.ajaxTransport.send.d\nSo basically the User properties (email and password) are not sent to the server. Any ideas?\nthe same happens if I use \njavascript\nuser.save()\n. @edubkendo That was the trick indeed. I am actually quite puzzled now, since I can create only one user. Perhaps this is related to the other error I reported above (Uncaught TypeError: Cannot call method 'conditions' of undefined tower.js:2346) I still see in the console that the data comes to the controller:\n Processing by UsersController#create as JSON\n  Parameters:\n....\nBut the 2nd user is not saved to the database.\n. The issues seems to be that _id was not generated, and the entity in fact saved with _id = 0.\n. Based on IRC discussion, this exception might be related to the way I installed towerjs from dev branch https://gist.github.com/3347224  (I do have mongodb running, even there are 5 connections coming on start)\n. The issue is more about how to start working with the source code; we where facing multiple issues while trying to build/install tower from sources (in the dev branch).\n. Is that related to the issue being fixed? http://stackoverflow.com/questions/11558346/how-to-upload-towerjs-assets-to-s3\n. Closing the issue since it was a module-related.\n. It solved the issue indeed. Thanks!\n. I looked at tower.js\njavascript\n Ajax.prototype.createRequest = function(records, options) {\n       .....\n       json = this.toJSON(records);\n       Tower.urlFor(records.constructor); // should this be url = Tower.urlFor(records.constructor); ??\n       return this.queue(function() {\n         var params;\n         params = {\n           url: url, //otherwise it is not clear where this url is assigned\n           type: \"POST\",\n           data: json\n         };\n        return _this.ajax(options, params).success(_this.createSuccess(records)).error(_this.createFailure(records));\n      });\n. If I change the url, then I see the following data being send to the server as a POST request:\njson\n{\"user\":{\"id\":\"0\",\"createdAt\":\"2012-08-09T13:33:38.659Z\",\"updatedAt\":\"2012-08-09T13:33:38.659Z\"}}\nAnd I get another error on completion:\nUncaught TypeError: Cannot call method 'conditions' of undefined tower.js:2346\nTower.Store.Memory.Finders.find tower.js:2346\nTower.Store.Ajax.Ajax.createSuccess tower.js:2957\nf.Callbacks.n jquery.min.js:2\nf.Callbacks.o.fireWith jquery.min.js:2\nw jquery.min.js:4\nf.support.ajax.f.ajaxTransport.send.d\nSo basically the User properties (email and password) are not sent to the server. Any ideas?\nthe same happens if I use \njavascript\nuser.save()\n. @edubkendo That was the trick indeed. I am actually quite puzzled now, since I can create only one user. Perhaps this is related to the other error I reported above (Uncaught TypeError: Cannot call method 'conditions' of undefined tower.js:2346) I still see in the console that the data comes to the controller:\n Processing by UsersController#create as JSON\n  Parameters:\n....\nBut the 2nd user is not saved to the database.\n. The issues seems to be that _id was not generated, and the entity in fact saved with _id = 0.\n. Based on IRC discussion, this exception might be related to the way I installed towerjs from dev branch https://gist.github.com/3347224  (I do have mongodb running, even there are 5 connections coming on start)\n. The issue is more about how to start working with the source code; we where facing multiple issues while trying to build/install tower from sources (in the dev branch).\n. ",
    "amacgregor": "I deleted the VM that I was using for testing tower and reacreated, working properly now.\n. I deleted the VM that I was using for testing tower and reacreated, working properly now.\n. ",
    "mhuggins": "I realized I did edit the user views and controller a bit.  The views were edited to display only encrypted_password (not password or password_confirmation), and the controller does not accept encrypted_password as a parameter.  So I suppose I could have messed something up there too, but it doesn't seem likely.\n. I realized I did edit the user views and controller a bit.  The views were edited to display only encrypted_password (not password or password_confirmation), and the controller does not accept encrypted_password as a parameter.  So I suppose I could have messed something up there too, but it doesn't seem likely.\n. ",
    "eoliphan": "Pretty current, Here ya go:\nerich-oliphants-MacBook-Pro:projects eoliphan$ npm -v\n1.1.24\nerich-oliphants-MacBook-Pro:projects eoliphan$ node -v\nv0.6.19\n. ACtually I just noticed some weirdness with my node install, redoing it from scratch then will try again.,\n. lol, well I've upgraded everything:\nerich-oliphants-MacBook-Pro:projects eoliphan$ node -v\nv0.8.1\nerich-oliphants-MacBook-Pro:projects eoliphan$ npm -v\n1.1.36\nBut still have the same problem.\nI've regenerated from scratch a few times, I get the issue consistently.\nNo log was generated.  Is there a switch or  something I can turn on?\nFYI, the http.js error occurs on a different line since the upgrade:\n```\n create : tapp/Watchfile\n   create : tapp/vendor/stylesheets/prettify.css\nhttp.js:1457\n  var socket = req.socket;\n                  ^\nTypeError: Cannot read property 'socket' of undefined\n    at Stream.responseOnEnd (http.js:1457:19)\n    at Stream.EventEmitter.emit (events.js:115:20)\n    at Unzip.exports.unzip._on (/opt/local/lib/node_modules/tower/node_modules/superagent/lib/node/utils.js:112:19)\n    at Unzip.EventEmitter.emit (events.js:115:20)\n    at zlib.js:349:10\n    at Zlib.callback (zlib.js:439:13)\n```\n. Here's mine looking at yours\nnpm list:\nerich-oliphants-MacBook-Pro:projects eoliphan$ npm list\n/Users/eoliphan\n\u251c\u2500\u252c bogart@0.3.38 \n\u2502 \u251c\u2500\u2500 commander@1.0.0 \n\u2502 \u251c\u2500\u2500 jsgi@0.2.4ssl \n\u2502 \u251c\u2500\u2500 mkdirp@0.3.3 \n\u2502 \u251c\u2500\u2500 mustache@0.3.1-dev \n\u2502 \u251c\u2500\u2500 node-uuid@1.3.3 \n\u2502 \u251c\u2500\u2500 oauth@0.9.5 \n\u2502 \u251c\u2500\u252c parted@0.0.8 \n\u2502 \u2502 \u2514\u2500\u2500 qs@0.5.0 \n\u2502 \u251c\u2500\u2500 promised-io@0.2.3 \n\u2502 \u251c\u2500\u2500 request@2.2.9 \n\u2502 \u2514\u2500\u2500 underscore@1.3.3 \n\u251c\u2500\u252c connect@2.3.6 \n\u2502 \u251c\u2500\u2500 bytes@0.0.1 \n\u2502 \u251c\u2500\u2500 cookie@0.0.4 \n\u2502 \u251c\u2500\u2500 crc@0.2.0 \n\u2502 \u251c\u2500\u2500 debug@0.7.0 \n\u2502 \u251c\u2500\u2500 formidable@1.0.11 \n\u2502 \u251c\u2500\u2500 fresh@0.0.1 \n\u2502 \u251c\u2500\u2500 mime@1.2.4 \n\u2502 \u251c\u2500\u2500 qs@0.4.2 \n\u2502 \u2514\u2500\u2500 range-parser@0.0.4 \n\u2514\u2500\u252c express@2.5.11 \n  \u251c\u2500\u252c connect@1.9.1 \n  \u2502 \u2514\u2500\u2500 formidable@1.0.11 \n  \u251c\u2500\u2500 mime@1.2.4 \n  \u251c\u2500\u2500 mkdirp@0.3.0 \n  \u2514\u2500\u2500 qs@0.4.2 \nnpm list -g:\n\u251c\u2500\u252c npm@1.1.36 \n\u2502 \u251c\u2500\u2500 abbrev@1.0.3 \n\u2502 \u251c\u2500\u2500 ansi@0.1.2 \n\u2502 \u251c\u2500\u2500 archy@0.0.2 \n\u2502 \u251c\u2500\u2500 block-stream@0.0.5 \n\u2502 \u251c\u2500\u2500 chownr@0.0.1 \n\u2502 \u251c\u2500\u2500 fstream@0.1.18 \n\u2502 \u251c\u2500\u252c fstream-npm@0.1.0 \n\u2502 \u2502 \u2514\u2500\u2500 fstream-ignore@0.0.5 \n\u2502 \u251c\u2500\u2500 glob@3.1.10 \n\u2502 \u251c\u2500\u2500 graceful-fs@1.1.8 \n\u2502 \u251c\u2500\u2500 inherits@1.0.0 \n\u2502 \u251c\u2500\u2500 ini@1.0.2 \n\u2502 \u251c\u2500\u252c init-package-json@0.0.4 \n\u2502 \u2502 \u2514\u2500\u2500 promzard@0.1.5 \n\u2502 \u251c\u2500\u2500 lockfile@0.2.1 \n\u2502 \u251c\u2500\u2500 lru-cache@1.1.0 \n\u2502 \u251c\u2500\u2500 minimatch@0.2.5 \n\u2502 \u251c\u2500\u2500 mkdirp@0.3.3 \n\u2502 \u251c\u2500\u2500 node-gyp@0.5.2 \n\u2502 \u251c\u2500\u2500 node-uuid@1.3.3 \n\u2502 \u251c\u2500\u2500 nopt@1.0.10 \n\u2502 \u251c\u2500\u2500 npm-registry-client@0.0.8 \n\u2502 \u251c\u2500\u2500 npmlog@0.0.2 \n\u2502 \u251c\u2500\u2500 osenv@0.0.3 \n\u2502 \u251c\u2500\u2500 proto-list@1.0.0 \n\u2502 \u251c\u2500\u2500 read@0.1.0 \n\u2502 \u251c\u2500\u2500 read-installed@0.0.1 \n\u2502 \u251c\u2500\u2500 read-package-json@0.0.12 \n\u2502 \u251c\u2500\u2500 request@2.9.203 \n\u2502 \u251c\u2500\u2500 retry@0.6.0 \n\u2502 \u251c\u2500\u2500 rimraf@2.0.2 \n\u2502 \u251c\u2500\u2500 semver@1.0.14 \n\u2502 \u251c\u2500\u2500 slide@1.1.3 \n\u2502 \u251c\u2500\u2500 tar@0.1.13 \n\u2502 \u251c\u2500\u2500 uid-number@0.0.3 \n\u2502 \u2514\u2500\u2500 which@1.0.5 \n\u2514\u2500\u252c tower@0.4.0-13 \n  \u251c\u2500\u2500 accounting@0.3.2 \n  \u251c\u2500\u2500 async@0.1.22 \n  \u251c\u2500\u2500 coffee-script@1.3.3 \n  \u251c\u2500\u2500 coffeekup@0.3.1 \n  \u251c\u2500\u2500 commander@1.0.0 \n  \u251c\u2500\u2500 ejs@0.7.2 \n  \u251c\u2500\u2500 ember-metal@0.9.2 \n  \u251c\u2500\u2500 ember-runtime@0.9.2 \n  \u251c\u2500\u252c express@2.5.11 \n  \u2502 \u251c\u2500\u252c connect@1.9.1 \n  \u2502 \u2502 \u2514\u2500\u2500 formidable@1.0.11 \n  \u2502 \u251c\u2500\u2500 mime@1.2.4 \n  \u2502 \u251c\u2500\u2500 mkdirp@0.3.0 \n  \u2502 \u2514\u2500\u2500 qs@0.4.2 \n  \u251c\u2500\u2500 geolib@1.1.7 \n  \u251c\u2500\u2500 inflection@1.2.1 \n  \u251c\u2500\u2500 mime@1.2.6 \n  \u251c\u2500\u2500 mint@0.3.5 \n  \u251c\u2500\u2500 moment@1.6.2 \n  \u251c\u2500\u2500 node-uuid@1.3.3 \n  \u251c\u2500\u252c pathfinder@0.3.0-1 \n  \u2502 \u251c\u2500\u252c detective@0.1.1 \n  \u2502 \u2502 \u2514\u2500\u2500 uglify-js@1.2.6 \n  \u2502 \u251c\u2500\u252c findit@0.1.2 \n  \u2502 \u2502 \u2514\u2500\u252c seq@0.3.5 \n  \u2502 \u2502   \u251c\u2500\u252c chainsaw@0.0.9 \n  \u2502 \u2502   \u2502 \u2514\u2500\u2500 traverse@0.3.9 \n  \u2502 \u2502   \u2514\u2500\u252c hashish@0.0.4 \n  \u2502 \u2502     \u2514\u2500\u2500 traverse@0.6.3 \n  \u2502 \u2514\u2500\u2500 mkdirp@0.3.3 \n  \u251c\u2500\u2500 qs@0.5.0 \n  \u251c\u2500\u252c socket.io@0.9.6 \n  \u2502 \u251c\u2500\u2500 policyfile@0.0.4 \n  \u2502 \u251c\u2500\u2500 redis@0.6.7 \n  \u2502 \u2514\u2500\u252c socket.io-client@0.9.6 \n  \u2502   \u251c\u2500\u252c active-x-obfuscator@0.0.1 \n  \u2502   \u2502 \u2514\u2500\u2500 zeparser@0.0.5 \n  \u2502   \u251c\u2500\u2500 uglify-js@1.2.5 \n  \u2502   \u251c\u2500\u252c ws@0.4.20 \n  \u2502   \u2502 \u251c\u2500\u2500 commander@0.6.1 \n  \u2502   \u2502 \u251c\u2500\u2500 options@0.0.3 \n  \u2502   \u2502 \u2514\u2500\u2500 tinycolor@0.0.1 \n  \u2502   \u2514\u2500\u2500 xmlhttprequest@1.2.2 \n  \u251c\u2500\u252c superagent@0.5.0 \n  \u2502 \u251c\u2500\u2500 emitter-component@0.0.1 \n  \u2502 \u251c\u2500\u2500 formidable@1.0.9 \n  \u2502 \u251c\u2500\u2500 mime@1.2.5 \n  \u2502 \u2514\u2500\u2500 qs@0.4.2 \n  \u251c\u2500\u2500 underscore@1.3.3 \n  \u251c\u2500\u2500 underscore.logger@0.3.1 \n  \u251c\u2500\u2500 underscore.string@2.2.0rc \n  \u251c\u2500\u2500 URIjs@1.4.2 \n  \u251c\u2500\u252c useragent@1.1.0 \n  \u2502 \u251c\u2500\u2500 request@2.9.202 \n  \u2502 \u251c\u2500\u2500 semver@1.0.14 \n  \u2502 \u2514\u2500\u2500 yamlparser@0.0.2 \n  \u251c\u2500\u2500 validator@0.4.9 \n  \u2514\u2500\u2500 wrench@1.3.9 \n. I definitely have some newer versions of modules (async, etc)\n. Pretty current, Here ya go:\nerich-oliphants-MacBook-Pro:projects eoliphan$ npm -v\n1.1.24\nerich-oliphants-MacBook-Pro:projects eoliphan$ node -v\nv0.6.19\n. ACtually I just noticed some weirdness with my node install, redoing it from scratch then will try again.,\n. lol, well I've upgraded everything:\nerich-oliphants-MacBook-Pro:projects eoliphan$ node -v\nv0.8.1\nerich-oliphants-MacBook-Pro:projects eoliphan$ npm -v\n1.1.36\nBut still have the same problem.\nI've regenerated from scratch a few times, I get the issue consistently.\nNo log was generated.  Is there a switch or  something I can turn on?\nFYI, the http.js error occurs on a different line since the upgrade:\n```\n create : tapp/Watchfile\n   create : tapp/vendor/stylesheets/prettify.css\nhttp.js:1457\n  var socket = req.socket;\n                  ^\nTypeError: Cannot read property 'socket' of undefined\n    at Stream.responseOnEnd (http.js:1457:19)\n    at Stream.EventEmitter.emit (events.js:115:20)\n    at Unzip.exports.unzip._on (/opt/local/lib/node_modules/tower/node_modules/superagent/lib/node/utils.js:112:19)\n    at Unzip.EventEmitter.emit (events.js:115:20)\n    at zlib.js:349:10\n    at Zlib.callback (zlib.js:439:13)\n```\n. Here's mine looking at yours\nnpm list:\nerich-oliphants-MacBook-Pro:projects eoliphan$ npm list\n/Users/eoliphan\n\u251c\u2500\u252c bogart@0.3.38 \n\u2502 \u251c\u2500\u2500 commander@1.0.0 \n\u2502 \u251c\u2500\u2500 jsgi@0.2.4ssl \n\u2502 \u251c\u2500\u2500 mkdirp@0.3.3 \n\u2502 \u251c\u2500\u2500 mustache@0.3.1-dev \n\u2502 \u251c\u2500\u2500 node-uuid@1.3.3 \n\u2502 \u251c\u2500\u2500 oauth@0.9.5 \n\u2502 \u251c\u2500\u252c parted@0.0.8 \n\u2502 \u2502 \u2514\u2500\u2500 qs@0.5.0 \n\u2502 \u251c\u2500\u2500 promised-io@0.2.3 \n\u2502 \u251c\u2500\u2500 request@2.2.9 \n\u2502 \u2514\u2500\u2500 underscore@1.3.3 \n\u251c\u2500\u252c connect@2.3.6 \n\u2502 \u251c\u2500\u2500 bytes@0.0.1 \n\u2502 \u251c\u2500\u2500 cookie@0.0.4 \n\u2502 \u251c\u2500\u2500 crc@0.2.0 \n\u2502 \u251c\u2500\u2500 debug@0.7.0 \n\u2502 \u251c\u2500\u2500 formidable@1.0.11 \n\u2502 \u251c\u2500\u2500 fresh@0.0.1 \n\u2502 \u251c\u2500\u2500 mime@1.2.4 \n\u2502 \u251c\u2500\u2500 qs@0.4.2 \n\u2502 \u2514\u2500\u2500 range-parser@0.0.4 \n\u2514\u2500\u252c express@2.5.11 \n  \u251c\u2500\u252c connect@1.9.1 \n  \u2502 \u2514\u2500\u2500 formidable@1.0.11 \n  \u251c\u2500\u2500 mime@1.2.4 \n  \u251c\u2500\u2500 mkdirp@0.3.0 \n  \u2514\u2500\u2500 qs@0.4.2 \nnpm list -g:\n\u251c\u2500\u252c npm@1.1.36 \n\u2502 \u251c\u2500\u2500 abbrev@1.0.3 \n\u2502 \u251c\u2500\u2500 ansi@0.1.2 \n\u2502 \u251c\u2500\u2500 archy@0.0.2 \n\u2502 \u251c\u2500\u2500 block-stream@0.0.5 \n\u2502 \u251c\u2500\u2500 chownr@0.0.1 \n\u2502 \u251c\u2500\u2500 fstream@0.1.18 \n\u2502 \u251c\u2500\u252c fstream-npm@0.1.0 \n\u2502 \u2502 \u2514\u2500\u2500 fstream-ignore@0.0.5 \n\u2502 \u251c\u2500\u2500 glob@3.1.10 \n\u2502 \u251c\u2500\u2500 graceful-fs@1.1.8 \n\u2502 \u251c\u2500\u2500 inherits@1.0.0 \n\u2502 \u251c\u2500\u2500 ini@1.0.2 \n\u2502 \u251c\u2500\u252c init-package-json@0.0.4 \n\u2502 \u2502 \u2514\u2500\u2500 promzard@0.1.5 \n\u2502 \u251c\u2500\u2500 lockfile@0.2.1 \n\u2502 \u251c\u2500\u2500 lru-cache@1.1.0 \n\u2502 \u251c\u2500\u2500 minimatch@0.2.5 \n\u2502 \u251c\u2500\u2500 mkdirp@0.3.3 \n\u2502 \u251c\u2500\u2500 node-gyp@0.5.2 \n\u2502 \u251c\u2500\u2500 node-uuid@1.3.3 \n\u2502 \u251c\u2500\u2500 nopt@1.0.10 \n\u2502 \u251c\u2500\u2500 npm-registry-client@0.0.8 \n\u2502 \u251c\u2500\u2500 npmlog@0.0.2 \n\u2502 \u251c\u2500\u2500 osenv@0.0.3 \n\u2502 \u251c\u2500\u2500 proto-list@1.0.0 \n\u2502 \u251c\u2500\u2500 read@0.1.0 \n\u2502 \u251c\u2500\u2500 read-installed@0.0.1 \n\u2502 \u251c\u2500\u2500 read-package-json@0.0.12 \n\u2502 \u251c\u2500\u2500 request@2.9.203 \n\u2502 \u251c\u2500\u2500 retry@0.6.0 \n\u2502 \u251c\u2500\u2500 rimraf@2.0.2 \n\u2502 \u251c\u2500\u2500 semver@1.0.14 \n\u2502 \u251c\u2500\u2500 slide@1.1.3 \n\u2502 \u251c\u2500\u2500 tar@0.1.13 \n\u2502 \u251c\u2500\u2500 uid-number@0.0.3 \n\u2502 \u2514\u2500\u2500 which@1.0.5 \n\u2514\u2500\u252c tower@0.4.0-13 \n  \u251c\u2500\u2500 accounting@0.3.2 \n  \u251c\u2500\u2500 async@0.1.22 \n  \u251c\u2500\u2500 coffee-script@1.3.3 \n  \u251c\u2500\u2500 coffeekup@0.3.1 \n  \u251c\u2500\u2500 commander@1.0.0 \n  \u251c\u2500\u2500 ejs@0.7.2 \n  \u251c\u2500\u2500 ember-metal@0.9.2 \n  \u251c\u2500\u2500 ember-runtime@0.9.2 \n  \u251c\u2500\u252c express@2.5.11 \n  \u2502 \u251c\u2500\u252c connect@1.9.1 \n  \u2502 \u2502 \u2514\u2500\u2500 formidable@1.0.11 \n  \u2502 \u251c\u2500\u2500 mime@1.2.4 \n  \u2502 \u251c\u2500\u2500 mkdirp@0.3.0 \n  \u2502 \u2514\u2500\u2500 qs@0.4.2 \n  \u251c\u2500\u2500 geolib@1.1.7 \n  \u251c\u2500\u2500 inflection@1.2.1 \n  \u251c\u2500\u2500 mime@1.2.6 \n  \u251c\u2500\u2500 mint@0.3.5 \n  \u251c\u2500\u2500 moment@1.6.2 \n  \u251c\u2500\u2500 node-uuid@1.3.3 \n  \u251c\u2500\u252c pathfinder@0.3.0-1 \n  \u2502 \u251c\u2500\u252c detective@0.1.1 \n  \u2502 \u2502 \u2514\u2500\u2500 uglify-js@1.2.6 \n  \u2502 \u251c\u2500\u252c findit@0.1.2 \n  \u2502 \u2502 \u2514\u2500\u252c seq@0.3.5 \n  \u2502 \u2502   \u251c\u2500\u252c chainsaw@0.0.9 \n  \u2502 \u2502   \u2502 \u2514\u2500\u2500 traverse@0.3.9 \n  \u2502 \u2502   \u2514\u2500\u252c hashish@0.0.4 \n  \u2502 \u2502     \u2514\u2500\u2500 traverse@0.6.3 \n  \u2502 \u2514\u2500\u2500 mkdirp@0.3.3 \n  \u251c\u2500\u2500 qs@0.5.0 \n  \u251c\u2500\u252c socket.io@0.9.6 \n  \u2502 \u251c\u2500\u2500 policyfile@0.0.4 \n  \u2502 \u251c\u2500\u2500 redis@0.6.7 \n  \u2502 \u2514\u2500\u252c socket.io-client@0.9.6 \n  \u2502   \u251c\u2500\u252c active-x-obfuscator@0.0.1 \n  \u2502   \u2502 \u2514\u2500\u2500 zeparser@0.0.5 \n  \u2502   \u251c\u2500\u2500 uglify-js@1.2.5 \n  \u2502   \u251c\u2500\u252c ws@0.4.20 \n  \u2502   \u2502 \u251c\u2500\u2500 commander@0.6.1 \n  \u2502   \u2502 \u251c\u2500\u2500 options@0.0.3 \n  \u2502   \u2502 \u2514\u2500\u2500 tinycolor@0.0.1 \n  \u2502   \u2514\u2500\u2500 xmlhttprequest@1.2.2 \n  \u251c\u2500\u252c superagent@0.5.0 \n  \u2502 \u251c\u2500\u2500 emitter-component@0.0.1 \n  \u2502 \u251c\u2500\u2500 formidable@1.0.9 \n  \u2502 \u251c\u2500\u2500 mime@1.2.5 \n  \u2502 \u2514\u2500\u2500 qs@0.4.2 \n  \u251c\u2500\u2500 underscore@1.3.3 \n  \u251c\u2500\u2500 underscore.logger@0.3.1 \n  \u251c\u2500\u2500 underscore.string@2.2.0rc \n  \u251c\u2500\u2500 URIjs@1.4.2 \n  \u251c\u2500\u252c useragent@1.1.0 \n  \u2502 \u251c\u2500\u2500 request@2.9.202 \n  \u2502 \u251c\u2500\u2500 semver@1.0.14 \n  \u2502 \u2514\u2500\u2500 yamlparser@0.0.2 \n  \u251c\u2500\u2500 validator@0.4.9 \n  \u2514\u2500\u2500 wrench@1.3.9 \n. I definitely have some newer versions of modules (async, etc)\n. ",
    "krainboltgreene": "Ok, so I'm going to chime in here because I've had a bone to pick with i18n done the Rails way (see here: https://gist.github.com/2866752#gistcomment-342072). This might be a good chance to make a pull request and see my vision in Tower.js.\n. I don't know Tower.js enough yet, but I have screwed up a lot in Rails. This makes me think there's an auto-loading problem, in that the model hasn't been instantiated yet (aka before the Model.all call).\n. Haha, ok, so different icon. I couldn't find one, and I'm no artist!\nWhat kind of \"tower\" would you want? Tower of Babel? Office Tower? etc?\nTower.js feels like, to me, it's the best framework for getting things shipped. Some imagery that fits that would be awesome.\n. Re: Static File\nI definitely agree with you on the static bit. Having to remove it every time sucks, in Rails.\nSo we can do this two ways:\n1. We can have a flag like --no-static, never creates it. This also leaves open to the idea of having a .towerrc file that populates the options field for pro-users.\n2. A dynamic file.\nNumber 2 brings the problem of Foundation Vs. Bootstrap. I built the index page using Foundation because it was suuuuper simple and different.\n. You could add copy to the index.html saying to delete it next.\nAgain, the only problem with the dynamic one is the Foundation Vs.\nBootstrap. I don't the page will look half as good using bootstrap,\nbut I'd be willing to look at it. I'm beginning to really like\nFoundation over Bootstrap.\nOn Sun, Jul 29, 2012 at 6:39 AM, Lance Pollard\nreply@reply.github.com\nwrote:\n\nWe shouldn't use a --no-static option b/c that makes it a little more difficult for the newcomer, and they're the one most likely to be confused by why their root route isn't working right.\nI haven't thought that much about having a custom .towerrc file, will consider it more over the next few weeks. But I would like to try to avoid that b/c there's already too many vendor-specific dotfiles in the community, and to me it would make tower feel less flexible for some reason - like we have all these custom build scripts and configuration to get it working. Maybe in the future with a larger/regular community, then adding that would feel like the next logical step.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/viatropos/tower/pull/177#issuecomment-7352144\n\n\nKurtis Rainbolt-Greene, Hacker\nDifference Engineers, LLC\n643 Magazine St. #102\nNew Orleans, LA 70130\n. I'll see what I can do.\n. You'll have to get someone who knows NPM better than I do to fill out the NPM ignore.\n. More than 65% of gems never make it past 0.1.0, mainly because developers never remember to bump version or worse they don't see the merit in going to 0.1.0.\nTruth is because of how awesome Tower can be your app starts off with some functionality, which I think warrants 0.1.0. It's a bit of a pet peeve of mine.\n. New issue with Feature flag? That's definitely something that would\ncompliment contract developers.\nOn Sun, Jul 29, 2012 at 6:26 AM, Lance Pollard\nreply@reply.github.com\nwrote:\n\nOn a side note, we need to also setup the ability to make custom generator templates, along the lines of rails_wizard (not the website, just the configuration part). Others are:\n- https://github.com/RailsApps/rails3-application-templates\n- https://github.com/viatropos/rails-pages\nSo you could do:\ntower new myapp -t https://raw.github.com/someone/my-tower-templates/master/i-use-version-0.1.0.coffee\nAnd that gives you your custom template.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/viatropos/tower/pull/179#issuecomment-7351890\n\n\nKurtis Rainbolt-Greene, Hacker\nDifference Engineers, LLC\n643 Magazine St. #102\nNew Orleans, LA 70130\n. Yeah, this is directly related to #187. I'll see what I can't chop out.\n. Looks like you know about this from Issue #120, so I'll just try to fix it.\n. Apparently the core maintainer of Sugar.js has found a way to avoid problems with JQuery and Ember. He/she seems highly certain it won't make problems. That said, I'll give i a shot and make a PR to see how it works out later.\n. I agree and disagree. On one hand I say, \"fuck em, sugar makes JavaScript less of a supreme pain.\" and on the other...adoptability Is paramount for Tower right now.  \n\nKurtis Rainbolt-Greene\nDifference Engineers\n643 Magazine St STE #102,\nNew Orleans, LA 70130\n202-643-2263\nOn Sunday, July 29, 2012 at 1:27 AM, edubkendo wrote:\n\n@viatropos @krainboltgreene have you guys seen https://github.com/epeli/underscore.string ? While it doesn't provide nearly the range of awesomeness that sugar.js provides, it does extend underscore quite a bit, and could be a good start on building TowerSupport \uff3c(^o^)\uff0f , without fooling around with core objects. For what its worth, sugar seems to be about as safe as you can get, as far as extending these go. That said, I think we should be extremely careful of adding anything to Tower that would be a majorly divisive issue within the community, fly in the face of established best practices, etc. What we don't want to create is a situation where people say of Tower something like, \"Yeah, it looks cool but it extends core objects so...\" without having very good reasons for doing so (ie. it adds some enormous benefit that can't be gotten any other way). It seems to me that the way to move forward would be A) create a plugin/module that makes it easy for people to add sugar\n.js to their tower projects, without putting sugar.js in tower itself B) begin/continue work on building Tower.Support through extending the _ object.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/viatropos/tower/issues/184#issuecomment-7350222\n. First iteration like vendorer, second iteration like you describe? Sounds good to me. Wiki the roadmap? \n. Aweeesome!\n\nOn Tue, Sep 25, 2012 at 9:19 PM, Lance Pollard notifications@github.comwrote:\n\nBower is now taking care of this: http://twitter.github.com/bower/\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/187#issuecomment-8876900.\n\n\nKurtis Rainbolt-Greene, Hacker\nDifference Engineers, LLC\n1631 8th Street\nNew Orleans, LA 70115\n. I'm currently weathering the after effects of a tropica storm, but this is on my reading list.\n. I wish there was a better venue for discussing this. Perhaps we should break it down into smaller discussions?  \n\nKurtis Rainbolt-Greene\nDifference Engineers\n643 Magazine St STE #102,\nNew Orleans, LA 70130\n202-643-2263\nOn Friday, August 31, 2012 at 6:09 PM, Lance Pollard wrote:\n\nI am going to go try out this folder structure now:\n|-- app | |-- config | | |-- client | | | |-- bootstrap.coffee | | | -- routes.coffee | | |-- server | | | |-- assets.coffee | | | |-- bootstrap.coffee | | | |-- credentials.coffee | | | |-- databases.coffee | | | |-- emails.coffee | | | |-- jobs.coffee | | |-- routes.coffee | | -- shared | |-- controllers | | |-- client | | |-- applicationController.coffee | | |-- server | | | -- applicationController.coffee | |-- shared | |-- models | | |-- client | | |-- server | | | |-- user | | | | -- emailConcern.coffee | |-- shared | | | |-- post.coffee | | | -- user.coffee | |-- stylesheets | | |-- client | | |-- application.styl | | -- server | | |-- email.styl | |-- templates | | |-- client | | |-- server | | | |-- layouts | | | -- emails | |-- shared | | | |-- posts | | | | -- index.coffee | | |-- users | |-- views | | |-- client | | | |-- posts | | | -- users |-- node_modules |-- public |-- vendor-- wiki\nHere is the rationale behind some of the decisions (add more if you think of any that are left out).\n\nWhy so many client/server controllers?\n\nAt first we thought of top level client and server folders. But that makes it harder for the \"single dev\" to comprehend the entire app, because as a \"full stack\" developer, you're thinking of \"models\", \"templates\", \"views\", \"controllers\", etc., not of \"client\" vs. \"server\" and drilling down to \"server models\". You look for \"models\" first, then \"server\".\n\nWhy not put the files in the shared folder at the parent directory?\n\nThis makes sense to do in the models case, because you're going to be using most/all of the models on both the client and server (at least early on in your app).\nHowever, in the controllers case, the client and server controllers are very different (but they should both still be called \"controllers\"). It might seem strange if most of the controller code is found in server and client, and one or two files at the top level. This is because, in the models case, files at the top-level would be assumed most important / core to the app, whereas in the controller case they wouldn't.\nThe shared folder explicitly states \"these files are used in both places\"; it makes it clear, no ambiguation.\n\nWhy the top-level app folder, why not put models, views, etc. at the top?\n\nBecause then models, views, etc. would be mixed in with totally unrelated folders such as logs, bin, wiki, and public. Conceptually, those folders are unrelated to models/views/controllers/etc.\n\nWhy not optimize the client/server/shared folders for what's most common?\n\nThat is, since views and stylesheets are only for the client (at least as far as I can tell), templates technically are agnostic to the server and client, why not just have this?\n| |-- views | | |-- posts | | | -- index.coffee  \ninstead of this:\n| |-- views | | |-- client | | | |-- posts | | | |-- index.coffee\nStill not 100% on this, but it seems that while having this \"less nested\" file structure is technically \"more optimized\", it leads to more questions that answers... Personally, my mind will look at the other folders and think, \"well, technically, most models are agnostic to client/server, so do the same for them, oh but wait in certain cases... etc.\". So, for now, all folders have this same structure.\nWas not 100% decided on this for the stylesheets, but if you think about emails, then those should technically be \"server side stylesheets\" (which will be converted to inline css, eventually).\n\nIn response to @luckysmack (https://github.com/luckysmack)'s comments on the gist.\n\nStill need to think about the top-level db vs. data folder. I like calling it data better personally. But the data/tmp folder shouldn't be generated, b/c having multiple tmp folders seems confusing. Instead, having somewhere in the docs/guides that using tmp folders is good practice might be good enough.\nAlso need to think more about a whole themes system. There should be a standard way of adding custom themes to your app, for these reasons:\nSometimes front end coders like to mess around with multiple different themes for their app, and having a folder structure in place for this would be helpful.\nMaybe you want to have ipad, browser, etc. themes, for different devices.\nHowever, along those same lines, I am not a big fan of the idea of grouping models/views/controllers/etc. into \"plugins\" or reusable components (like the comments module). While this looks good and feels right conceptually, in my experience it makes it harder to code down the road. Really, the code never gets modular enough that it's a black box you can port to other projects without error. If it does get to that point, it's probably already an npm module (rubygem), and so can accomplish the same thing. Also, when I am fixing some model bug and it's relation to other models, I want all the models to be in one place; having them in a nested module adds too much overhead to that workflow.\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/viatropos/tower/issues/253#issuecomment-8207351).\n. Ok, so I'm going to chime in here because I've had a bone to pick with i18n done the Rails way (see here: https://gist.github.com/2866752#gistcomment-342072). This might be a good chance to make a pull request and see my vision in Tower.js.\n. I don't know Tower.js enough yet, but I have screwed up a lot in Rails. This makes me think there's an auto-loading problem, in that the model hasn't been instantiated yet (aka before the Model.all call).\n. Haha, ok, so different icon. I couldn't find one, and I'm no artist!\n\nWhat kind of \"tower\" would you want? Tower of Babel? Office Tower? etc?\nTower.js feels like, to me, it's the best framework for getting things shipped. Some imagery that fits that would be awesome.\n. Re: Static File\nI definitely agree with you on the static bit. Having to remove it every time sucks, in Rails.\nSo we can do this two ways:\n1. We can have a flag like --no-static, never creates it. This also leaves open to the idea of having a .towerrc file that populates the options field for pro-users.\n2. A dynamic file.\nNumber 2 brings the problem of Foundation Vs. Bootstrap. I built the index page using Foundation because it was suuuuper simple and different.\n. You could add copy to the index.html saying to delete it next.\nAgain, the only problem with the dynamic one is the Foundation Vs.\nBootstrap. I don't the page will look half as good using bootstrap,\nbut I'd be willing to look at it. I'm beginning to really like\nFoundation over Bootstrap.\nOn Sun, Jul 29, 2012 at 6:39 AM, Lance Pollard\nreply@reply.github.com\nwrote:\n\nWe shouldn't use a --no-static option b/c that makes it a little more difficult for the newcomer, and they're the one most likely to be confused by why their root route isn't working right.\nI haven't thought that much about having a custom .towerrc file, will consider it more over the next few weeks. But I would like to try to avoid that b/c there's already too many vendor-specific dotfiles in the community, and to me it would make tower feel less flexible for some reason - like we have all these custom build scripts and configuration to get it working. Maybe in the future with a larger/regular community, then adding that would feel like the next logical step.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/viatropos/tower/pull/177#issuecomment-7352144\n\n\nKurtis Rainbolt-Greene, Hacker\nDifference Engineers, LLC\n643 Magazine St. #102\nNew Orleans, LA 70130\n. I'll see what I can do.\n. You'll have to get someone who knows NPM better than I do to fill out the NPM ignore.\n. More than 65% of gems never make it past 0.1.0, mainly because developers never remember to bump version or worse they don't see the merit in going to 0.1.0.\nTruth is because of how awesome Tower can be your app starts off with some functionality, which I think warrants 0.1.0. It's a bit of a pet peeve of mine.\n. New issue with Feature flag? That's definitely something that would\ncompliment contract developers.\nOn Sun, Jul 29, 2012 at 6:26 AM, Lance Pollard\nreply@reply.github.com\nwrote:\n\nOn a side note, we need to also setup the ability to make custom generator templates, along the lines of rails_wizard (not the website, just the configuration part). Others are:\n- https://github.com/RailsApps/rails3-application-templates\n- https://github.com/viatropos/rails-pages\nSo you could do:\ntower new myapp -t https://raw.github.com/someone/my-tower-templates/master/i-use-version-0.1.0.coffee\nAnd that gives you your custom template.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/viatropos/tower/pull/179#issuecomment-7351890\n\n\nKurtis Rainbolt-Greene, Hacker\nDifference Engineers, LLC\n643 Magazine St. #102\nNew Orleans, LA 70130\n. Yeah, this is directly related to #187. I'll see what I can't chop out.\n. Looks like you know about this from Issue #120, so I'll just try to fix it.\n. Apparently the core maintainer of Sugar.js has found a way to avoid problems with JQuery and Ember. He/she seems highly certain it won't make problems. That said, I'll give i a shot and make a PR to see how it works out later.\n. I agree and disagree. On one hand I say, \"fuck em, sugar makes JavaScript less of a supreme pain.\" and on the other...adoptability Is paramount for Tower right now.  \n\nKurtis Rainbolt-Greene\nDifference Engineers\n643 Magazine St STE #102,\nNew Orleans, LA 70130\n202-643-2263\nOn Sunday, July 29, 2012 at 1:27 AM, edubkendo wrote:\n\n@viatropos @krainboltgreene have you guys seen https://github.com/epeli/underscore.string ? While it doesn't provide nearly the range of awesomeness that sugar.js provides, it does extend underscore quite a bit, and could be a good start on building TowerSupport \uff3c(^o^)\uff0f , without fooling around with core objects. For what its worth, sugar seems to be about as safe as you can get, as far as extending these go. That said, I think we should be extremely careful of adding anything to Tower that would be a majorly divisive issue within the community, fly in the face of established best practices, etc. What we don't want to create is a situation where people say of Tower something like, \"Yeah, it looks cool but it extends core objects so...\" without having very good reasons for doing so (ie. it adds some enormous benefit that can't be gotten any other way). It seems to me that the way to move forward would be A) create a plugin/module that makes it easy for people to add sugar\n.js to their tower projects, without putting sugar.js in tower itself B) begin/continue work on building Tower.Support through extending the _ object.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/viatropos/tower/issues/184#issuecomment-7350222\n. First iteration like vendorer, second iteration like you describe? Sounds good to me. Wiki the roadmap? \n. Aweeesome!\n\nOn Tue, Sep 25, 2012 at 9:19 PM, Lance Pollard notifications@github.comwrote:\n\nBower is now taking care of this: http://twitter.github.com/bower/\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/187#issuecomment-8876900.\n\n\nKurtis Rainbolt-Greene, Hacker\nDifference Engineers, LLC\n1631 8th Street\nNew Orleans, LA 70115\n. I'm currently weathering the after effects of a tropica storm, but this is on my reading list.\n. I wish there was a better venue for discussing this. Perhaps we should break it down into smaller discussions?  \n\nKurtis Rainbolt-Greene\nDifference Engineers\n643 Magazine St STE #102,\nNew Orleans, LA 70130\n202-643-2263\nOn Friday, August 31, 2012 at 6:09 PM, Lance Pollard wrote:\n\nI am going to go try out this folder structure now:\n|-- app | |-- config | | |-- client | | | |-- bootstrap.coffee | | | -- routes.coffee | | |-- server | | | |-- assets.coffee | | | |-- bootstrap.coffee | | | |-- credentials.coffee | | | |-- databases.coffee | | | |-- emails.coffee | | | |-- jobs.coffee | | |-- routes.coffee | | -- shared | |-- controllers | | |-- client | | |-- applicationController.coffee | | |-- server | | | -- applicationController.coffee | |-- shared | |-- models | | |-- client | | |-- server | | | |-- user | | | | -- emailConcern.coffee | |-- shared | | | |-- post.coffee | | | -- user.coffee | |-- stylesheets | | |-- client | | |-- application.styl | | -- server | | |-- email.styl | |-- templates | | |-- client | | |-- server | | | |-- layouts | | | -- emails | |-- shared | | | |-- posts | | | | -- index.coffee | | |-- users | |-- views | | |-- client | | | |-- posts | | | -- users |-- node_modules |-- public |-- vendor-- wiki\nHere is the rationale behind some of the decisions (add more if you think of any that are left out).\n\nWhy so many client/server controllers?\n\nAt first we thought of top level client and server folders. But that makes it harder for the \"single dev\" to comprehend the entire app, because as a \"full stack\" developer, you're thinking of \"models\", \"templates\", \"views\", \"controllers\", etc., not of \"client\" vs. \"server\" and drilling down to \"server models\". You look for \"models\" first, then \"server\".\n\nWhy not put the files in the shared folder at the parent directory?\n\nThis makes sense to do in the models case, because you're going to be using most/all of the models on both the client and server (at least early on in your app).\nHowever, in the controllers case, the client and server controllers are very different (but they should both still be called \"controllers\"). It might seem strange if most of the controller code is found in server and client, and one or two files at the top level. This is because, in the models case, files at the top-level would be assumed most important / core to the app, whereas in the controller case they wouldn't.\nThe shared folder explicitly states \"these files are used in both places\"; it makes it clear, no ambiguation.\n\nWhy the top-level app folder, why not put models, views, etc. at the top?\n\nBecause then models, views, etc. would be mixed in with totally unrelated folders such as logs, bin, wiki, and public. Conceptually, those folders are unrelated to models/views/controllers/etc.\n\nWhy not optimize the client/server/shared folders for what's most common?\n\nThat is, since views and stylesheets are only for the client (at least as far as I can tell), templates technically are agnostic to the server and client, why not just have this?\n| |-- views | | |-- posts | | | -- index.coffee  \ninstead of this:\n| |-- views | | |-- client | | | |-- posts | | | |-- index.coffee\nStill not 100% on this, but it seems that while having this \"less nested\" file structure is technically \"more optimized\", it leads to more questions that answers... Personally, my mind will look at the other folders and think, \"well, technically, most models are agnostic to client/server, so do the same for them, oh but wait in certain cases... etc.\". So, for now, all folders have this same structure.\nWas not 100% decided on this for the stylesheets, but if you think about emails, then those should technically be \"server side stylesheets\" (which will be converted to inline css, eventually).\n\nIn response to @luckysmack (https://github.com/luckysmack)'s comments on the gist.\n\nStill need to think about the top-level db vs. data folder. I like calling it data better personally. But the data/tmp folder shouldn't be generated, b/c having multiple tmp folders seems confusing. Instead, having somewhere in the docs/guides that using tmp folders is good practice might be good enough.\nAlso need to think more about a whole themes system. There should be a standard way of adding custom themes to your app, for these reasons:\nSometimes front end coders like to mess around with multiple different themes for their app, and having a folder structure in place for this would be helpful.\nMaybe you want to have ipad, browser, etc. themes, for different devices.\nHowever, along those same lines, I am not a big fan of the idea of grouping models/views/controllers/etc. into \"plugins\" or reusable components (like the comments module). While this looks good and feels right conceptually, in my experience it makes it harder to code down the road. Really, the code never gets modular enough that it's a black box you can port to other projects without error. If it does get to that point, it's probably already an npm module (rubygem), and so can accomplish the same thing. Also, when I am fixing some model bug and it's relation to other models, I want all the models to be in one place; having them in a nested module adds too much overhead to that workflow.\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/viatropos/tower/issues/253#issuecomment-8207351).\n. \n",
    "jiahut": "do not support nodejs_v.0.8.3 ? I didn't write any code until encounter problem.\n. do not support nodejs_v.0.8.3 ? I didn't write any code until encounter problem.\n. ",
    "juanpaco": "I was looking into this one today.  When a route is ultimately drawn in tower-net/route/dsl.coffee, it checks for the current scope's path member.  Only that member is never set anywhere in the file.  You can fake it by doing something like:\n@scope path: \"api\"\nbut then nesting becomes a problem.  There's also code in the dsl file checking @_scope.name, but that member is also never set.\nI mean, it looks like it could be as simple as modifying that scope function to build the scope properly, but as I've spent all of 1 hour looking at the code, there may be ramifications I'm missing.\nHas anyone else done any work on this issue?  I'm happy to look into it some.  I really don't want to have to define all of my scope manually.\n. @jisaacks - once you fixed it in your local installation, how did you get that change to be picked up by your server?  I made the same change, and I get the same error.  I also put a console.log in that function, and I didn't see the console.log output.  Then I put in some very obviously syntactically incorrect garbage, and it didn't fail on that either, which leads me to believe there's some sort of compilation step required to get that change picked up.\n. Well shucks, okay.  Thanks for the reply.\nI blew away my node_modules directory and then pointed the packages at the git-master package, so I'm up and running again.\n. I was looking into this one today.  When a route is ultimately drawn in tower-net/route/dsl.coffee, it checks for the current scope's path member.  Only that member is never set anywhere in the file.  You can fake it by doing something like:\n@scope path: \"api\"\nbut then nesting becomes a problem.  There's also code in the dsl file checking @_scope.name, but that member is also never set.\nI mean, it looks like it could be as simple as modifying that scope function to build the scope properly, but as I've spent all of 1 hour looking at the code, there may be ramifications I'm missing.\nHas anyone else done any work on this issue?  I'm happy to look into it some.  I really don't want to have to define all of my scope manually.\n. @jisaacks - once you fixed it in your local installation, how did you get that change to be picked up by your server?  I made the same change, and I get the same error.  I also put a console.log in that function, and I didn't see the console.log output.  Then I put in some very obviously syntactically incorrect garbage, and it didn't fail on that either, which leads me to believe there's some sort of compilation step required to get that change picked up.\n. Well shucks, okay.  Thanks for the reply.\nI blew away my node_modules directory and then pointed the packages at the git-master package, so I'm up and running again.\n. ",
    "elemenofi": "That is what happened to me.  regenerating the scaffold was the only solution.\n. Just to clarify this is no longer an issue :)\n. That is what happened to me.  regenerating the scaffold was the only solution.\n. Just to clarify this is no longer an issue :)\n. ",
    "Zearin": ":+1: Yup. For a while now.\n. np :)\n. :+1: Yup. For a while now.\n. np :)\n. ",
    "vegarituwall": "Hi Lance,\nI have been trying to get the sorted list and I get random errors, for \nexample when I try the encoded version of:\n/posts.json?{%22sort%22:[%22createdAt%22,%22desc%22]}\nit redirects me to:\n/posts.json?{%22sort%22:[%22createdAt%22,%22desc%22]}\nAny clues of what is going on?\n\nJV\nOn 8/21/12 12:09 AM, Lance Pollard wrote:\n\nThis works if you send the data as JSON:\n// the serialized version of this:\n\"/posts.json?{sort: [\"createdAt\",\"desc\"]}\"\n// this is done using something like this:\nencodeURI(JSON.stringify({sort:  [\"createdAt\",  \"desc\"]}))\n// which looks like this:\n\"%7B%22sort%22:%5B%22createdAt%22,%22desc%22%5D%7D\"\nNeed to handle the case where it's a human-readable url.\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/viatropos/tower/issues/201#issuecomment-7893368.\n. Hi Lance,\n\nI have been trying to get the sorted list and I get random errors, for \nexample when I try the encoded version of:\n/posts.json?{%22sort%22:[%22createdAt%22,%22desc%22]}\nit redirects me to:\n/posts.json?{%22sort%22:[%22createdAt%22,%22desc%22]}\nAny clues of what is going on?\n\nJV\nOn 8/21/12 12:09 AM, Lance Pollard wrote:\n\nThis works if you send the data as JSON:\n// the serialized version of this:\n\"/posts.json?{sort: [\"createdAt\",\"desc\"]}\"\n// this is done using something like this:\nencodeURI(JSON.stringify({sort:  [\"createdAt\",  \"desc\"]}))\n// which looks like this:\n\"%7B%22sort%22:%5B%22createdAt%22,%22desc%22%5D%7D\"\nNeed to handle the case where it's a human-readable url.\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/viatropos/tower/issues/201#issuecomment-7893368.\n. \n",
    "travisbot": "This pull request fails (merged 213d9b72 into 767718da).\n. This pull request fails (merged e6d72133 into 6227d744).\n. This pull request fails (merged 63bb626a into 6227d744).\n. This pull request fails (merged 42642d04 into 6227d744).\n. This pull request passes (merged 4e0b46b6 into 42d9f6a2).\n. This pull request passes (merged cd39772e into 42d9f6a2).\n. This pull request passes (merged 84495841 into 4800e1ca).\n. This pull request fails (merged f6cc3b94 into 4800e1ca).\n. This pull request passes (merged 9fcbeb9e into ce23f0e5).\n. This pull request passes (merged 108794b0 into c48b8c1b).\n. This pull request passes (merged 58884bdf into c48b8c1b).\n. This pull request passes (merged a2240b8b into 85dc19d5).\n. This pull request passes (merged 822e49f2 into 85dc19d5).\n. This pull request passes (merged 2935bdde into 85dc19d5).\n. This pull request fails (merged 213d9b72 into 767718da).\n. This pull request fails (merged e6d72133 into 6227d744).\n. This pull request fails (merged 63bb626a into 6227d744).\n. This pull request fails (merged 42642d04 into 6227d744).\n. This pull request passes (merged 4e0b46b6 into 42d9f6a2).\n. This pull request passes (merged cd39772e into 42d9f6a2).\n. This pull request passes (merged 84495841 into 4800e1ca).\n. This pull request fails (merged f6cc3b94 into 4800e1ca).\n. This pull request passes (merged 9fcbeb9e into ce23f0e5).\n. This pull request passes (merged 108794b0 into c48b8c1b).\n. This pull request passes (merged 58884bdf into c48b8c1b).\n. This pull request passes (merged a2240b8b into 85dc19d5).\n. This pull request passes (merged 822e49f2 into 85dc19d5).\n. This pull request passes (merged 2935bdde into 85dc19d5).\n. ",
    "d4tocchini": "Unless the cure is trivial, could be a use case for Web workers so waiting for connection doesn't block main thread\n. @Maedi, your questions hit the nail on the head.  Yes, server-side rendering is faster for initial load.  And, yes, JSON over the network for views created asyncly from user generated data is faster then sending the JSON to the server and then waiting for the server to respond with HTML.  \nThe problem with the old Twitter client-side architecture was that it was \"fully\" client-side.  The ideal situation is to have both client-side and server-side view rendering via Javascript.  Tower is pure js that lives in the browser and node, it thus has a unique ability to render views everywhere.  Ideally a Tower app could optimize itself by using server-side or client-side depending on the circumstances.\nHere's a talk from the guys at Yahoo (Douglas Crockford peeps) that explains this ideal situation\nA presentation on \"Views Anywhere\"\nBasically, the benefits of pure a JavaScript framework that runs on the client and server renders this a non-issue because it unifies view rendering infrastructures.  This is why the guys at Rails probably should stick with server-side view rendering, otherwise they would have to begin building an entirely new infrastructure like Ember in the browser.  Likewise, Ember is pure client-side (at least for now), so it's more optimized for ambitious single page applications where there is only a single \"initial-load\" to be concerned with.  The question shouldn't be server-side or client-side view rendering, it should be: how can we have both & and when should we use one over the other?  Tower is in a unique postion to offer both and bake in conventions that use the right one for the right circumstance...\n. You're right @viatropos - the missing piece is how do we get server-rendered views to hook-up to Ember runtime?  ...  I know Ember-Data does something similar with Rails...\nI think Yehuda's tweet sums up 37 signals perspective: \n\n\"@BrendanEich You missed the joke ;) 37Signals thinks JS is so hard that they're doing caching instead (see https://37signals.com/svn/posts/3112-how-basecamp-next-got-to-be-so-damn-fast-without-using-much-client-side-ui \u2026)\"\n\nThat video from the Yahoo team explains that bootstrapping JSON and pushing all the views to the client for rendering is ideal in the unique circumstance when the entire app is a single page that is comprised of many smaller encapsulated elements, ie. MyYahoo.  Douglas Crockford supports this perspective in the Crockford on JavaScript Lectures, i think he mentions this on the last lecture...\nIf you're building a more synchronous App with many initial page loads, server-side view rendering would help for sure, but you would still need the client-side templates in order for the views to reflect changes to the data.\nYehuda's 2010 announcement of handlebars touches on some of these issues:\n\n\"I have been active in server-side development (through Merb and then Rails). Recently, I\u2019ve released a couple of libraries (jQuery Offline and Rack::Offline), designed to make it easier to build applications that can withstand both flaky connections and a complete lack of connectivity. Of course, those libraries leveraged features in modern browsers, and have gotten a bunch of use.\nFor jQuery Offline, the basic strategy is that instead of requesting a new JSON object before you can show anything on the page, you first try to retrieve that data from cache, show some stale content. In parallel, you\u2019d download the new content (if possible), and update the display with the content in question. You\u2019ve probably seen this pattern at work in applications like the official Twitter application for the iPhone, which shows stale content when you first boot the app, and downloads new content if you have Internet connectivity in the background....\"\n\nThe guy behind mustache had a great write-up on the future of Mustache where he talks about the trade-offs of an ideal template system and ease-of-use.  His sentiment: \n\n\u201cBy the time the browser has downloaded, parsed and compiled your smart compiler, my dumb parser is done rendering the template.\u201d\n\nhahaha\n. Unless the cure is trivial, could be a use case for Web workers so waiting for connection doesn't block main thread\n. @Maedi, your questions hit the nail on the head.  Yes, server-side rendering is faster for initial load.  And, yes, JSON over the network for views created asyncly from user generated data is faster then sending the JSON to the server and then waiting for the server to respond with HTML.  \nThe problem with the old Twitter client-side architecture was that it was \"fully\" client-side.  The ideal situation is to have both client-side and server-side view rendering via Javascript.  Tower is pure js that lives in the browser and node, it thus has a unique ability to render views everywhere.  Ideally a Tower app could optimize itself by using server-side or client-side depending on the circumstances.\nHere's a talk from the guys at Yahoo (Douglas Crockford peeps) that explains this ideal situation\nA presentation on \"Views Anywhere\"\nBasically, the benefits of pure a JavaScript framework that runs on the client and server renders this a non-issue because it unifies view rendering infrastructures.  This is why the guys at Rails probably should stick with server-side view rendering, otherwise they would have to begin building an entirely new infrastructure like Ember in the browser.  Likewise, Ember is pure client-side (at least for now), so it's more optimized for ambitious single page applications where there is only a single \"initial-load\" to be concerned with.  The question shouldn't be server-side or client-side view rendering, it should be: how can we have both & and when should we use one over the other?  Tower is in a unique postion to offer both and bake in conventions that use the right one for the right circumstance...\n. You're right @viatropos - the missing piece is how do we get server-rendered views to hook-up to Ember runtime?  ...  I know Ember-Data does something similar with Rails...\nI think Yehuda's tweet sums up 37 signals perspective: \n\n\"@BrendanEich You missed the joke ;) 37Signals thinks JS is so hard that they're doing caching instead (see https://37signals.com/svn/posts/3112-how-basecamp-next-got-to-be-so-damn-fast-without-using-much-client-side-ui \u2026)\"\n\nThat video from the Yahoo team explains that bootstrapping JSON and pushing all the views to the client for rendering is ideal in the unique circumstance when the entire app is a single page that is comprised of many smaller encapsulated elements, ie. MyYahoo.  Douglas Crockford supports this perspective in the Crockford on JavaScript Lectures, i think he mentions this on the last lecture...\nIf you're building a more synchronous App with many initial page loads, server-side view rendering would help for sure, but you would still need the client-side templates in order for the views to reflect changes to the data.\nYehuda's 2010 announcement of handlebars touches on some of these issues:\n\n\"I have been active in server-side development (through Merb and then Rails). Recently, I\u2019ve released a couple of libraries (jQuery Offline and Rack::Offline), designed to make it easier to build applications that can withstand both flaky connections and a complete lack of connectivity. Of course, those libraries leveraged features in modern browsers, and have gotten a bunch of use.\nFor jQuery Offline, the basic strategy is that instead of requesting a new JSON object before you can show anything on the page, you first try to retrieve that data from cache, show some stale content. In parallel, you\u2019d download the new content (if possible), and update the display with the content in question. You\u2019ve probably seen this pattern at work in applications like the official Twitter application for the iPhone, which shows stale content when you first boot the app, and downloads new content if you have Internet connectivity in the background....\"\n\nThe guy behind mustache had a great write-up on the future of Mustache where he talks about the trade-offs of an ideal template system and ease-of-use.  His sentiment: \n\n\u201cBy the time the browser has downloaded, parsed and compiled your smart compiler, my dumb parser is done rendering the template.\u201d\n\nhahaha\n. ",
    "autoferrit": "In all honesty, I was never a bug fan of coffee script. But reading through the docs page, and seeing how it also translates into html (reminds me of haml), at that point, i thought 'whoah that is cool and super easy to read' . while looking through the examples im starting to understand who coffee compares to vanilla js, some areas im still not sure about. But, if your main love is CS and you want the core to be expressed in that way, then keep it. Offer vanilla js as an alternative. it doesnt mean you cant have both options available.\ntower new --vanilla myApp (for straight js)\nwhich would set a variable somewhere in the generated app to use non coffee for the project. also keep in mind you could configure coffeekup separately. because after seeing it I could still consider using that for html files. it is kinda cool. since coffee is supposed to compile into js so reliably, I think you could potentially support both, which means you could cater to both crowds. When you have examples, you could set them up in a way to show coffee and have a tab at the top of a code snippet to show either the coffee or plain js version of the code. its the same thing microsoft does for their .net api. you have the same api and choose which language to view the example in.\nI think being able to support both could get the best of both worlds audience wise. and leaving the default as coffee would still leave you with the warm fuzzy feeling you get. and when others start using it with js, you can still get bug reports and if they are interested some may even help with keeping the api for plain js.\nbasically if you love CS as much as you say, I would keep it as js, offer the plain api, and have both options. I think it would get more people willing to try coffee (have a script to convert project files to coffee), and could get more people to use it. also helping get more peeps to like coffee in the mornings.\n. for logging, i dont know all the tools out there, but node-bunyan seemed like a good logger.\nhttps://github.com/trentm/node-bunyan\n. well if youre using tower via cloning and not npm, wouldnt you just run 'git pull origin master\" ? then at that point you just have to make sure api changes wont effect your app, and update your functions if they are effected to reflect the new api\n. ill be able to test this tomorrow (saturday). Ill post my results here, unless youre in irc then ill ping you.\n. ``` javascript\n\nvar s = 'C:\\www\\Projects\\app\\app\\views\\index.coffee'\nundefined\nvar p = new RegExp(s.replace(/[-[]{}()*+?.,\\^$|#\\s]/g, \"\\$&\"))\nundefined\nconsole.log(s.match(p))\n[ 'C:\\www\\Projects\\app\\app\\views\\index.coffee',\n  index: 0,\n  input: 'C:\\www\\Projects\\app\\app\\views\\index.coffee' ]\nundefined\n```\n\n``` javascript\n\nvar s = 'C:\\\\www\\\\Projects\\\\app\\\\app\\\\views\\\\index.coffee'\nundefined\nvar p = new RegExp(s.replace(/[-[]{}()*+?.,\\^$|#\\s]/g, \"\\$&\"))\nundefined\nconsole.log(s.match(p))\n[ 'C:\\\\www\\\\Projects\\\\app\\\\app\\\\views\\\\index.coffee',\n  index: 0,\n  input: 'C:\\\\www\\\\Projects\\\\app\\\\app\\\\views\\\\index.coffee' ]\nundefined\n```\n. looks like it should work yea. but im not sure if there are any better or worse ones.\n. Great article, having support for something like that would be great. Makes me think a lot about how here at work were using json so much to transfer data, and whether or not we should do it differently\n. i didnt see any limits anywhere listed. so im not sure.\n. Heres how the OS's support those characters:\n\n;\n- Windows: doesnt work\n- Mac/Linux: supported. will run each command after each other. command1 ; command2 whether command 1 fails, OR succeeds, command 2 will still run.\n&\nWindows. same as ; for linux/mac\nlinux/mac: totally different purpose. this will run the command entirely in the background and continue the next thing whether or not the first command is done. when the command is done, it will finish normally.\n&&\nI believe this method, is the same on all systems. this will run each command in succession. on at a time. however, as soon as one command fails, any further commands will not be processed and the entire line will completely stop regardless of what is after the next &&\n. as for having to run sudo, on linux I installed node from source. although i did this:\nbash\n$ ./configure --prefix=/home/shawn/lib/node\n$ make\n$ make install\nthis will install node into your home directory. and any time you install something globally from npm with\n$ npm install [package] -g\n$ npm link\nyou wont have to use the sudo command. because all the node_modules are in your home directory. when I did this, it seemed to prevent various issued i had with permissions in node/npm/tower.\n. In all honesty, I was never a bug fan of coffee script. But reading through the docs page, and seeing how it also translates into html (reminds me of haml), at that point, i thought 'whoah that is cool and super easy to read' . while looking through the examples im starting to understand who coffee compares to vanilla js, some areas im still not sure about. But, if your main love is CS and you want the core to be expressed in that way, then keep it. Offer vanilla js as an alternative. it doesnt mean you cant have both options available.\ntower new --vanilla myApp (for straight js)\nwhich would set a variable somewhere in the generated app to use non coffee for the project. also keep in mind you could configure coffeekup separately. because after seeing it I could still consider using that for html files. it is kinda cool. since coffee is supposed to compile into js so reliably, I think you could potentially support both, which means you could cater to both crowds. When you have examples, you could set them up in a way to show coffee and have a tab at the top of a code snippet to show either the coffee or plain js version of the code. its the same thing microsoft does for their .net api. you have the same api and choose which language to view the example in.\nI think being able to support both could get the best of both worlds audience wise. and leaving the default as coffee would still leave you with the warm fuzzy feeling you get. and when others start using it with js, you can still get bug reports and if they are interested some may even help with keeping the api for plain js.\nbasically if you love CS as much as you say, I would keep it as js, offer the plain api, and have both options. I think it would get more people willing to try coffee (have a script to convert project files to coffee), and could get more people to use it. also helping get more peeps to like coffee in the mornings.\n. for logging, i dont know all the tools out there, but node-bunyan seemed like a good logger.\nhttps://github.com/trentm/node-bunyan\n. well if youre using tower via cloning and not npm, wouldnt you just run 'git pull origin master\" ? then at that point you just have to make sure api changes wont effect your app, and update your functions if they are effected to reflect the new api\n. ill be able to test this tomorrow (saturday). Ill post my results here, unless youre in irc then ill ping you.\n. ``` javascript\n\nvar s = 'C:\\www\\Projects\\app\\app\\views\\index.coffee'\nundefined\nvar p = new RegExp(s.replace(/[-[]{}()*+?.,\\^$|#\\s]/g, \"\\$&\"))\nundefined\nconsole.log(s.match(p))\n[ 'C:\\www\\Projects\\app\\app\\views\\index.coffee',\n  index: 0,\n  input: 'C:\\www\\Projects\\app\\app\\views\\index.coffee' ]\nundefined\n```\n\n``` javascript\n\nvar s = 'C:\\\\www\\\\Projects\\\\app\\\\app\\\\views\\\\index.coffee'\nundefined\nvar p = new RegExp(s.replace(/[-[]{}()*+?.,\\^$|#\\s]/g, \"\\$&\"))\nundefined\nconsole.log(s.match(p))\n[ 'C:\\\\www\\\\Projects\\\\app\\\\app\\\\views\\\\index.coffee',\n  index: 0,\n  input: 'C:\\\\www\\\\Projects\\\\app\\\\app\\\\views\\\\index.coffee' ]\nundefined\n```\n. looks like it should work yea. but im not sure if there are any better or worse ones.\n. Great article, having support for something like that would be great. Makes me think a lot about how here at work were using json so much to transfer data, and whether or not we should do it differently\n. i didnt see any limits anywhere listed. so im not sure.\n. Heres how the OS's support those characters:\n\n;\n- Windows: doesnt work\n- Mac/Linux: supported. will run each command after each other. command1 ; command2 whether command 1 fails, OR succeeds, command 2 will still run.\n&\nWindows. same as ; for linux/mac\nlinux/mac: totally different purpose. this will run the command entirely in the background and continue the next thing whether or not the first command is done. when the command is done, it will finish normally.\n&&\nI believe this method, is the same on all systems. this will run each command in succession. on at a time. however, as soon as one command fails, any further commands will not be processed and the entire line will completely stop regardless of what is after the next &&\n. as for having to run sudo, on linux I installed node from source. although i did this:\nbash\n$ ./configure --prefix=/home/shawn/lib/node\n$ make\n$ make install\nthis will install node into your home directory. and any time you install something globally from npm with\n$ npm install [package] -g\n$ npm link\nyou wont have to use the sudo command. because all the node_modules are in your home directory. when I did this, it seemed to prevent various issued i had with permissions in node/npm/tower.\n. ",
    "ajb": "Just want to chime in here, hope I'm not out of place since I've only recently found out about this project and am not a contributor (yet).\nFrom my outside standpoint, Tower looks amazing and I can't wait for it to be production-ready. So I was a little disappointed when I saw that development time was going to be spent on converting the already-written source to javascript, especially since there's nothing keeping the end-user from using javascript in their project, even if Tower is written in Coffee.\n. Just want to chime in here, hope I'm not out of place since I've only recently found out about this project and am not a contributor (yet).\nFrom my outside standpoint, Tower looks amazing and I can't wait for it to be production-ready. So I was a little disappointed when I saw that development time was going to be spent on converting the already-written source to javascript, especially since there's nothing keeping the end-user from using javascript in their project, even if Tower is written in Coffee.\n. ",
    "mjcloutier": "I agree with @maedi and @adamjacobbecker Tower.js looks absolutely beautiful with coffeescript, hopefully it will remain the default. Looking forward to studying/developing with it soon!\n. I agree with @maedi and @adamjacobbecker Tower.js looks absolutely beautiful with coffeescript, hopefully it will remain the default. Looking forward to studying/developing with it soon!\n. ",
    "panbhag": "ok\n. Not yet. Still getting familiar with the code. Will surely let you know\nwhen I want to get on it.\nTill then, console will work fine.\nOn Thu, Aug 23, 2012 at 10:17 AM, Lance Pollard notifications@github.comwrote:\n\nIf you want to take a stab at making/integrating a better logger, let me\nknow and I'll do what I can to help out.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/218#issuecomment-7959863.\n. exactly. Other than that, there are a couple of files which are generated\nby node when generating the application which would need to be updated, ex\nthe  javascript files and the css files generated in the vendor directory,\nthe configuration files etc. I was just wondering if we can have a command\nto re-generate these files.\n\nOn Thu, Aug 23, 2012 at 10:45 AM, shawn notifications@github.com wrote:\n\nwell if youre using tower via cloning and not npm, wouldnt you just run\n'git pull origin master\" ? then at that point you just have to make sure\napi changes wont effect your app, and update your functions if they are\neffected to reflect the new api\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/224#issuecomment-7960157.\n. Thats exactly what I was looking for :)\n\nOn Fri, Aug 24, 2012 at 2:40 AM, Lance Pollard notifications@github.comwrote:\n\nOther things that you need to change when upgrading an existing project to\nthe latest stuff:\n- First, generate a new app, just so you can grab the files from it.\n- copy/paste ./grunt.coffee from the generated app to your existing app\n- copy/paste ./vendor/javascripts/tower.js\n- copy/paste ./vendor/javascripts/ember.js\n- copy/paste ./vendor/javascripts/tower.js\n- copy/paste ./test/client.coffee (new stuff removed design.io)\n- copy/paste ./config/assets.coffee (or just remove design.io, and\n  make sure ember and handlebars are in there)\n- remove Watchfile from your existing app\n- remove anything matching design.io in old ./package.json\n- add anything matching grunt in new ./package.json (grunt-less,\n  grunt-stylus)\nFinally, look at your ./config/application.coffee file (if you're\nexisting app was using tower v0.4.0), and compare it to the newly generated\napp's ./config/application.coffee and ./config/bootstrap.coffee.\nEssentially, move everything in the old @configure -> block into App.configure\n-> inside ./config/bootstrap.coffee. All that should be in\napplication.coffee is the namespace declaration.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/224#issuecomment-7984184.\n. ok, should we not be sticking to javascript camel casing convention?\n\nOn Sun, Aug 26, 2012 at 11:41 AM, Lance Pollard notifications@github.comwrote:\n\nOther note, the include: ['comments'] I don't think will work, that has\nnot been setup yet.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/246#issuecomment-8030558.\n. Thanks for the info.  I think I would wait for tower to go into production. Till then I will go ahead with http://locomotivejs.org/.\n\nThanks,\nPankaj\n. Completely agree with you. I would love to use tower when its production\nready. At this point our needs are very less. Locomotive is lean, stable\nand satisfies all our needs now. Thus decided to go ahead with the same.\nYup its completely server side. We already have an independent client side\nimplemented, so just need apis.I would wait for tower to go to production,\nand would definitely consider it to use in the next release.\nThat said, I am really impressed by the responsiveness of the towerjs team.\nThe team is available all time, and I get responses in few minutes most of\nthe times!\nPankaj\nOn Thu, Oct 4, 2012 at 11:45 AM, Maedi notifications@github.com wrote:\n\nI would argue that Tower is more feature complete and active than\nLocomotive. And does the client/server separation really well. But\nLocomotive looks fine, though it looks like a purely server side framework?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/318#issuecomment-9131675.\n. @edubkendo flatironjs look v good. but i feel it will have a learning curve. Locomotive is almost same as express with a structure added , plus rails like controllers and router. Being from Rails background, and with time crunch, thought it would be a better choice than express. So decided to move ahead with locomotive. Still I will give a shot to flatironjs as well. If I can start using it quickly, then I may use it. \n\nThanks\n. ok\n. Not yet. Still getting familiar with the code. Will surely let you know\nwhen I want to get on it.\nTill then, console will work fine.\nOn Thu, Aug 23, 2012 at 10:17 AM, Lance Pollard notifications@github.comwrote:\n\nIf you want to take a stab at making/integrating a better logger, let me\nknow and I'll do what I can to help out.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/218#issuecomment-7959863.\n. exactly. Other than that, there are a couple of files which are generated\nby node when generating the application which would need to be updated, ex\nthe  javascript files and the css files generated in the vendor directory,\nthe configuration files etc. I was just wondering if we can have a command\nto re-generate these files.\n\nOn Thu, Aug 23, 2012 at 10:45 AM, shawn notifications@github.com wrote:\n\nwell if youre using tower via cloning and not npm, wouldnt you just run\n'git pull origin master\" ? then at that point you just have to make sure\napi changes wont effect your app, and update your functions if they are\neffected to reflect the new api\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/224#issuecomment-7960157.\n. Thats exactly what I was looking for :)\n\nOn Fri, Aug 24, 2012 at 2:40 AM, Lance Pollard notifications@github.comwrote:\n\nOther things that you need to change when upgrading an existing project to\nthe latest stuff:\n- First, generate a new app, just so you can grab the files from it.\n- copy/paste ./grunt.coffee from the generated app to your existing app\n- copy/paste ./vendor/javascripts/tower.js\n- copy/paste ./vendor/javascripts/ember.js\n- copy/paste ./vendor/javascripts/tower.js\n- copy/paste ./test/client.coffee (new stuff removed design.io)\n- copy/paste ./config/assets.coffee (or just remove design.io, and\n  make sure ember and handlebars are in there)\n- remove Watchfile from your existing app\n- remove anything matching design.io in old ./package.json\n- add anything matching grunt in new ./package.json (grunt-less,\n  grunt-stylus)\nFinally, look at your ./config/application.coffee file (if you're\nexisting app was using tower v0.4.0), and compare it to the newly generated\napp's ./config/application.coffee and ./config/bootstrap.coffee.\nEssentially, move everything in the old @configure -> block into App.configure\n-> inside ./config/bootstrap.coffee. All that should be in\napplication.coffee is the namespace declaration.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/224#issuecomment-7984184.\n. ok, should we not be sticking to javascript camel casing convention?\n\nOn Sun, Aug 26, 2012 at 11:41 AM, Lance Pollard notifications@github.comwrote:\n\nOther note, the include: ['comments'] I don't think will work, that has\nnot been setup yet.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/246#issuecomment-8030558.\n. Thanks for the info.  I think I would wait for tower to go into production. Till then I will go ahead with http://locomotivejs.org/.\n\nThanks,\nPankaj\n. Completely agree with you. I would love to use tower when its production\nready. At this point our needs are very less. Locomotive is lean, stable\nand satisfies all our needs now. Thus decided to go ahead with the same.\nYup its completely server side. We already have an independent client side\nimplemented, so just need apis.I would wait for tower to go to production,\nand would definitely consider it to use in the next release.\nThat said, I am really impressed by the responsiveness of the towerjs team.\nThe team is available all time, and I get responses in few minutes most of\nthe times!\nPankaj\nOn Thu, Oct 4, 2012 at 11:45 AM, Maedi notifications@github.com wrote:\n\nI would argue that Tower is more feature complete and active than\nLocomotive. And does the client/server separation really well. But\nLocomotive looks fine, though it looks like a purely server side framework?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/318#issuecomment-9131675.\n. @edubkendo flatironjs look v good. but i feel it will have a learning curve. Locomotive is almost same as express with a structure added , plus rails like controllers and router. Being from Rails background, and with time crunch, thought it would be a better choice than express. So decided to move ahead with locomotive. Still I will give a shot to flatironjs as well. If I can start using it quickly, then I may use it. \n\nThanks\n. ",
    "DominikGuzei": "Does this mean that there is currently no way of requesting additional data form the client-side?\n. Does this mean that there is currently no way of requesting additional data form the client-side?\n. ",
    "iMagdy": "It's so weird, didn't work for me, I'm using Ubuntu Server 12.04. Linux normally understand && without an issue.\nI tried \"sudo install tower -g\" in a coworker machine, the installation completed successfully, but when I type \"tower new app\", it says, command not found. :(\nIt's the first time I see this issue, I tried Geddy, Flatiron, RailwayJS, they're all installed without any issues, I think it's something in the package, but I'm not sure what exactly is this :(\nCan you verify this on a Linux machine? VM?\n. I tried this tutorial: https://www.digitalocean.com/community/articles/how-to-install-node-js-on-ubuntu-12-04\nTo install NodeJS as a local user instead of root, and then ran the command npm install tower, and it succeeded! I got this:\ncoffeecup@0.3.11 node_modules/coffeecup\n\u251c\u2500\u2500 optparse@1.0.3\n\u251c\u2500\u2500 uglify-js@1.3.3\n\u2514\u2500\u2500 stylus@0.29.0 (debug@0.7.0, mkdirp@0.3.4, cssom@0.2.5)\ntower@0.4.1 node_modules/tower\n\u251c\u2500\u2500 ember-states-node@0.9.7-1-1\n\u251c\u2500\u2500 knox@0.0.11\n\u251c\u2500\u2500 temp@0.4.0\n\u251c\u2500\u2500 underscore.logger@0.3.1\n\u251c\u2500\u2500 inflection@1.2.3\n\u251c\u2500\u2500 wrench@1.3.9\n\u251c\u2500\u2500 node-uuid@1.3.3\n\u251c\u2500\u2500 async@0.1.22\n\u251c\u2500\u2500 mime@1.2.7\n\u251c\u2500\u2500 URIjs@1.7.2\n\u251c\u2500\u2500 ember-runtime-node@0.9.7-1-1\n\u251c\u2500\u2500 ember-metal-node@0.9.7-1-1\n\u251c\u2500\u2500 validator@0.4.11\n\u251c\u2500\u2500 mint@0.3.5\n\u251c\u2500\u2500 ejs@0.8.2\n\u251c\u2500\u2500 underscore@1.3.3\n\u251c\u2500\u2500 underscore.string@2.2.0rc\n\u251c\u2500\u2500 qs@0.5.0\n\u251c\u2500\u2500 coffee-script@1.3.2\n\u251c\u2500\u2500 accounting@0.3.2\n\u251c\u2500\u2500 gm@1.4.2\n\u251c\u2500\u2500 moment@1.7.0\n\u251c\u2500\u2500 commander@1.0.4 (keypress@0.1.0)\n\u251c\u2500\u2500 useragent@1.1.0 (yamlparser@0.0.2, semver@1.0.14, request@2.9.202)\n\u251c\u2500\u2500 superagent@0.9.0 (methods@0.0.1, emitter-component@0.0.1, cookiejar@1.3.0, qs@0.4.2, mime@1.2.5, formidable@1.0.9)\n\u251c\u2500\u2500 geolib@1.1.8 (googlemaps@0.1.7)\n\u251c\u2500\u2500 express@2.5.11 (qs@0.4.2, mime@1.2.4, mkdirp@0.3.0, connect@1.9.2)\n\u251c\u2500\u2500 pathfinder@0.3.0-1 (mkdirp@0.3.4, detective@0.2.1, findit@0.1.2)\n\u251c\u2500\u2500 socket.io@0.9.10 (policyfile@0.0.4, redis@0.7.2, socket.io-client@0.9.10)\n\u2514\u2500\u2500 nodemailer@0.3.25 (optimist@0.3.4, simplesmtp@0.1.21, mailcomposer@0.1.19)\nBut when I type tower in the terminal, I get:\nimagdy@imagdy:/var/www$ tower\nNo command 'tower' found, did you mean:\n Command 'towers' from package 'sgt-puzzles' (universe)\ntower: command not found\n:(\n. O, I forgot to add the -g to the Tower installation line, but when I did that (npm install tower -g) I got:\nimagdy@imagdy:/var/www$ tower new todos\nmodule.js:340\n    throw err;\n          ^\nError: Cannot find module '../lib/tower'\n    at Function.Module._resolveFilename (module.js:338:15)\n    at Function.Module._load (module.js:280:25)\n    at Module.require (module.js:362:17)\n    at require (module.js:378:17)\n    at Object. (/home/imagdy/local/lib/node_modules/tower/bin/tower:2:1)\n    at Module._compile (module.js:449:26)\n    at Object.Module._extensions..js (module.js:467:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Module.runMain (module.js:492:10)\n. Thanks Edubkendo, I did it and got this:\nimagdy@imagdy:~/node-latest-install/node_modules/tower$ make watch\ngrunt start --config ./grunt.coffee\nLoading \"grunt.coffee\" tasks and helpers...ERROR\n\n\nError: Cannot find module './build/tasks'\n Task \"start\" not found. Use --force to continue. \n\n\nAborted due to warnings.\nmake: *** [watch] Error 3\n. I installed Grunt, with the -g parameter, then I got:\ngrunt@0.3.15 /home/imagdy/local/lib/node_modules/grunt\n\u251c\u2500\u2500 dateformat@1.0.2-1.2.3\n\u251c\u2500\u2500 colors@0.6.0-1\n\u251c\u2500\u2500 semver@1.0.14\n\u251c\u2500\u2500 async@0.1.22\n\u251c\u2500\u2500 hooker@0.2.3\n\u251c\u2500\u2500 underscore@1.2.4\n\u251c\u2500\u2500 underscore.string@2.1.1\n\u251c\u2500\u2500 uglify-js@1.3.3\n\u251c\u2500\u2500 nopt@1.0.10 (abbrev@1.0.3)\n\u251c\u2500\u2500 temporary@0.0.4 (package@1.0.1)\n\u251c\u2500\u2500 gzip-js@0.3.1 (crc32@0.2.2, deflate-js@0.2.2)\n\u251c\u2500\u2500 glob-whatev@0.1.8 (minimatch@0.2.6)\n\u251c\u2500\u2500 jshint@0.5.9 (argsparser@0.0.6, minimatch@0.2.6)\n\u251c\u2500\u2500 connect@2.4.5 (fresh@0.1.0, pause@0.0.1, bytes@0.1.0, cookie@0.0.4, crc@0.2.0, debug@0.7.0, qs@0.4.2, formidable@1.0\n.11, send@0.0.4)\n\u251c\u2500\u2500 prompt@0.1.12 (pkginfo@0.2.3, winston@0.5.11)\n\u2514\u2500\u2500 nodeunit@0.7.4 (tap@0.3.1)\nThen make watch gave me:\ngrunt start --config ./grunt.coffee\nLoading \"grunt.coffee\" tasks and helpers...ERROR\n\n\nError: Cannot find module './build/tasks'\n Task \"start\" not found. Use --force to continue. \n\n\nAborted due to warnings.\nmake: *** [watch] Error 3\n. I think I removed all the old stuff, that's why npm is keeping on installing packages into my home folder.\n. I have these:\nimagdy@imagdy:~/node-latest-install/node_modules/tower$ ll\ntotal 100\ndrwxrwxr-x  5 imagdy imagdy  4096 Sep  6 22:23 ./\ndrwxrwxr-x  4 imagdy imagdy  4096 Sep  6 22:23 ../\ndrwxrwxrwx  2 imagdy imagdy  4096 Sep  1 14:10 bin/\n-rw-rw-rw-  1 imagdy imagdy  5080 Sep  1 14:10 grunt.coffee\n-rw-rw-rw-  1 imagdy imagdy   248 Sep  1 14:10 index.js\n-rw-rw-rw-  1 imagdy imagdy  1571 Sep  1 14:10 INSTALL.md\n-rw-rw-rw-  1 imagdy imagdy   948 Sep  1 14:10 Makefile\n-rw-rw-rw-  1 imagdy imagdy  1121 Sep  1 14:10 MIT-LICENSE.md\ndrwxrwxr-x 34 imagdy imagdy  4096 Sep  6 22:25 node_modules/\n-rw-rw-rw-  1 imagdy imagdy   120 Sep  1 14:10 .npmignore\n-rw-rw-rw-  1 imagdy imagdy 26898 Sep  6 22:21 package.json\ndrwxrwxrwx 16 imagdy imagdy  4096 Sep  6 22:21 packages/\n-rw-rw-rw-  1 imagdy imagdy 23040 Sep  1 14:10 README.md\n. I don't have these: \"build\", \"dist\", \"lib\", \"test\", \"tmp\"\n. Same thing same thing.. Here's the whole story:\nimagdy@imagdy:~/node-latest-install/node_modules/tower$ npm cache clean\nimagdy@imagdy:~/node-latest-install/node_modules/tower$ cd ..\nimagdy@imagdy:~/node-latest-install/node_modules$ npm install -g tower\nnpm http GET https://registry.npmjs.org/underscore\nnpm http GET https://registry.npmjs.org/underscore.string\nnpm http GET https://registry.npmjs.org/mime\nnpm http GET https://registry.npmjs.org/qs\nnpm http GET https://registry.npmjs.org/async\nnpm http GET https://registry.npmjs.org/underscore.logger\nnpm http GET https://registry.npmjs.org/mint\nnpm http GET https://registry.npmjs.org/ejs\nnpm http GET https://registry.npmjs.org/pathfinder\nnpm http GET https://registry.npmjs.org/commander\nnpm http GET https://registry.npmjs.org/express\nnpm http GET https://registry.npmjs.org/socket.io\nnpm http GET https://registry.npmjs.org/useragent\nnpm http GET https://registry.npmjs.org/URIjs\nnpm http GET https://registry.npmjs.org/moment\nnpm http GET https://registry.npmjs.org/node-uuid\nnpm http GET https://registry.npmjs.org/geolib\nnpm http GET https://registry.npmjs.org/validator\nnpm http GET https://registry.npmjs.org/accounting\nnpm http GET https://registry.npmjs.org/inflection\nnpm http GET https://registry.npmjs.org/superagent\nnpm http GET https://registry.npmjs.org/ember-metal-node\nnpm http GET https://registry.npmjs.org/ember-runtime-node\nnpm http GET https://registry.npmjs.org/ember-states-node\nnpm http GET https://registry.npmjs.org/wrench\nnpm http GET https://registry.npmjs.org/temp\nnpm http GET https://registry.npmjs.org/knox/0.0.11\nnpm http GET https://registry.npmjs.org/gm\nnpm http GET https://registry.npmjs.org/nodemailer\nnpm http 200 https://registry.npmjs.org/underscore.string\nnpm http GET https://registry.npmjs.org/underscore.string/-/underscore.string-2.2.0rc.tgz\nnpm http 200 https://registry.npmjs.org/qs\nnpm http GET https://registry.npmjs.org/qs/-/qs-0.5.0.tgz\nnpm http 200 https://registry.npmjs.org/mime\nnpm http GET https://registry.npmjs.org/mime/-/mime-1.2.7.tgz\nnpm http 200 https://registry.npmjs.org/underscore\nnpm http GET https://registry.npmjs.org/underscore/-/underscore-1.3.3.tgz\nnpm http 200 https://registry.npmjs.org/underscore.logger\nnpm http GET https://registry.npmjs.org/underscore.logger/-/underscore.logger-0.3.1.tgz\nnpm http 200 https://registry.npmjs.org/mint\nnpm http GET https://registry.npmjs.org/mint/-/mint-0.3.5.tgz\nnpm http 200 https://registry.npmjs.org/pathfinder\nnpm http GET https://registry.npmjs.org/pathfinder/-/pathfinder-0.3.0-1.tgz\nnpm http 200 https://registry.npmjs.org/ejs\nnpm http GET https://registry.npmjs.org/ejs/-/ejs-0.8.2.tgz\nnpm http 200 https://registry.npmjs.org/useragent\nnpm http GET https://registry.npmjs.org/useragent/-/useragent-1.1.0.tgz\nnpm http 200 https://registry.npmjs.org/commander\nnpm http GET https://registry.npmjs.org/commander/-/commander-1.0.4.tgz\nnpm http 200 https://registry.npmjs.org/URIjs\nnpm http GET https://registry.npmjs.org/URIjs/-/URIjs-1.7.2.tgz\nnpm http 200 https://registry.npmjs.org/moment\nnpm http GET https://registry.npmjs.org/moment/-/moment-1.7.0.tgz\nnpm http 200 https://registry.npmjs.org/node-uuid\nnpm http GET https://registry.npmjs.org/node-uuid/-/node-uuid-1.3.3.tgz\nnpm http 200 https://registry.npmjs.org/geolib\nnpm http GET https://registry.npmjs.org/geolib/-/geolib-1.1.8.tgz\nnpm http 200 https://registry.npmjs.org/async\nnpm http GET https://registry.npmjs.org/async/-/async-0.1.22.tgz\nnpm http 200 https://registry.npmjs.org/accounting\nnpm http GET https://registry.npmjs.org/accounting/-/accounting-0.3.2.tgz\nnpm http 200 https://registry.npmjs.org/express\nnpm http GET https://registry.npmjs.org/express/-/express-2.5.11.tgz\nnpm http 200 https://registry.npmjs.org/inflection\nnpm http GET https://registry.npmjs.org/inflection/-/inflection-1.2.3.tgz\nnpm http 200 https://registry.npmjs.org/ember-metal-node\nnpm http GET https://registry.npmjs.org/ember-metal-node/-/ember-metal-node-0.9.7-1-1.tgz\nnpm http 200 https://registry.npmjs.org/ember-runtime-node\nnpm http GET https://registry.npmjs.org/ember-runtime-node/-/ember-runtime-node-0.9.7-1-1.tgz\nnpm http 200 https://registry.npmjs.org/socket.io\nnpm http GET https://registry.npmjs.org/socket.io/-/socket.io-0.9.10.tgz\nnpm http 200 https://registry.npmjs.org/superagent\nnpm http GET https://registry.npmjs.org/superagent/-/superagent-0.9.0.tgz\nnpm http 200 https://registry.npmjs.org/ember-states-node\nnpm http GET https://registry.npmjs.org/ember-states-node/-/ember-states-node-0.9.7-1-1.tgz\nnpm http 200 https://registry.npmjs.org/wrench\nnpm http GET https://registry.npmjs.org/wrench/-/wrench-1.3.9.tgz\nnpm http 200 https://registry.npmjs.org/temp\nnpm http GET https://registry.npmjs.org/temp/-/temp-0.4.0.tgz\nnpm http 200 https://registry.npmjs.org/knox/0.0.11\nnpm http GET https://registry.npmjs.org/knox/-/knox-0.0.11.tgz\nnpm http 200 https://registry.npmjs.org/underscore.string/-/underscore.string-2.2.0rc.tgz\nnpm http 200 https://registry.npmjs.org/qs/-/qs-0.5.0.tgz\nnpm http 200 https://registry.npmjs.org/validator\nnpm http GET https://registry.npmjs.org/validator/-/validator-0.4.11.tgz\nnpm http 200 https://registry.npmjs.org/mime/-/mime-1.2.7.tgz\nnpm http 200 https://registry.npmjs.org/underscore/-/underscore-1.3.3.tgz\nnpm http 200 https://registry.npmjs.org/gm\nnpm http GET https://registry.npmjs.org/gm/-/gm-1.4.2.tgz\nnpm http 200 https://registry.npmjs.org/underscore.logger/-/underscore.logger-0.3.1.tgz\nnpm http 200 https://registry.npmjs.org/mint/-/mint-0.3.5.tgz\nnpm http 200 https://registry.npmjs.org/pathfinder/-/pathfinder-0.3.0-1.tgz\nnpm http 200 https://registry.npmjs.org/ejs/-/ejs-0.8.2.tgz\nnpm http 200 https://registry.npmjs.org/useragent/-/useragent-1.1.0.tgz\nnpm http 200 https://registry.npmjs.org/commander/-/commander-1.0.4.tgz\nnpm http 200 https://registry.npmjs.org/URIjs/-/URIjs-1.7.2.tgz\nnpm http 200 https://registry.npmjs.org/moment/-/moment-1.7.0.tgz\nnpm http 200 https://registry.npmjs.org/node-uuid/-/node-uuid-1.3.3.tgz\nnpm http 200 https://registry.npmjs.org/geolib/-/geolib-1.1.8.tgz\nnpm WARN package.json geolib@1.1.8 No README.md file found!\nnpm http 200 https://registry.npmjs.org/async/-/async-0.1.22.tgz\nnpm http 200 https://registry.npmjs.org/accounting/-/accounting-0.3.2.tgz\nnpm http 200 https://registry.npmjs.org/express/-/express-2.5.11.tgz\nnpm http 200 https://registry.npmjs.org/inflection/-/inflection-1.2.3.tgz\nnpm http 200 https://registry.npmjs.org/ember-metal-node/-/ember-metal-node-0.9.7-1-1.tgz\nnpm http 200 https://registry.npmjs.org/ember-runtime-node/-/ember-runtime-node-0.9.7-1-1.tgz\nnpm http 200 https://registry.npmjs.org/socket.io/-/socket.io-0.9.10.tgz\nnpm WARN package.json ember-metal-node@0.9.7-1-1 No README.md file found!\nnpm http 200 https://registry.npmjs.org/superagent/-/superagent-0.9.0.tgz\nnpm WARN package.json ember-runtime-node@0.9.7-1-1 No README.md file found!\nnpm http 200 https://registry.npmjs.org/ember-states-node/-/ember-states-node-0.9.7-1-1.tgz\nnpm http 200 https://registry.npmjs.org/wrench/-/wrench-1.3.9.tgz\nnpm WARN package.json ember-states-node@0.9.7-1-1 No README.md file found!\nnpm http 200 https://registry.npmjs.org/temp/-/temp-0.4.0.tgz\nnpm http 200 https://registry.npmjs.org/knox/-/knox-0.0.11.tgz\nnpm http 200 https://registry.npmjs.org/validator/-/validator-0.4.11.tgz\nnpm http 200 https://registry.npmjs.org/gm/-/gm-1.4.2.tgz\nnpm http 200 https://registry.npmjs.org/nodemailer\nnpm http GET https://registry.npmjs.org/nodemailer/-/nodemailer-0.3.25.tgz\nnpm http 200 https://registry.npmjs.org/nodemailer/-/nodemailer-0.3.25.tgz\nnpm http GET https://registry.npmjs.org/googlemaps\nnpm http GET https://registry.npmjs.org/keypress\nnpm http GET https://registry.npmjs.org/yamlparser/0.0.2\nnpm http GET https://registry.npmjs.org/request/2.9.202\nnpm http GET https://registry.npmjs.org/semver/1.0.14\nnpm http GET https://registry.npmjs.org/mime/1.2.5\nnpm http GET https://registry.npmjs.org/methods/0.0.1\nnpm http GET https://registry.npmjs.org/emitter-component/0.0.1\nnpm http GET https://registry.npmjs.org/cookiejar/1.3.0\nnpm http GET https://registry.npmjs.org/qs/0.4.2\nnpm http GET https://registry.npmjs.org/formidable/1.0.9\nnpm http GET https://registry.npmjs.org/connect\nnpm http GET https://registry.npmjs.org/mime/1.2.4\nnpm http GET https://registry.npmjs.org/mailcomposer\nnpm http GET https://registry.npmjs.org/simplesmtp\nnpm http GET https://registry.npmjs.org/optimist\nnpm http GET https://registry.npmjs.org/mkdirp/0.3.0\nnpm http GET https://registry.npmjs.org/qs\nnpm http GET https://registry.npmjs.org/socket.io-client/0.9.10\nnpm http GET https://registry.npmjs.org/policyfile/0.0.4\nnpm http GET https://registry.npmjs.org/detective\nnpm http GET https://registry.npmjs.org/findit\nnpm http GET https://registry.npmjs.org/redis/0.7.2\nnpm http GET https://registry.npmjs.org/mkdirp\nnpm http 200 https://registry.npmjs.org/yamlparser/0.0.2\nnpm http 200 https://registry.npmjs.org/semver/1.0.14\nnpm http GET https://registry.npmjs.org/yamlparser/-/yamlparser-0.0.2.tgz\nnpm http GET https://registry.npmjs.org/semver/-/semver-1.0.14.tgz\nnpm http 200 https://registry.npmjs.org/request/2.9.202\nnpm http GET https://registry.npmjs.org/request/-/request-2.9.202.tgz\nnpm http 200 https://registry.npmjs.org/mime/1.2.5\nnpm http GET https://registry.npmjs.org/mime/-/mime-1.2.5.tgz\nnpm http 200 https://registry.npmjs.org/methods/0.0.1\nnpm http GET https://registry.npmjs.org/methods/-/methods-0.0.1.tgz\nnpm http 200 https://registry.npmjs.org/keypress\nnpm http GET https://registry.npmjs.org/keypress/-/keypress-0.1.0.tgz\nnpm http 200 https://registry.npmjs.org/googlemaps\nnpm http GET https://registry.npmjs.org/googlemaps/-/googlemaps-0.1.7.tgz\nnpm http 200 https://registry.npmjs.org/cookiejar/1.3.0\nnpm http GET https://registry.npmjs.org/cookiejar/-/cookiejar-1.3.0.tgz\nnpm http 200 https://registry.npmjs.org/qs/0.4.2\nnpm http GET https://registry.npmjs.org/qs/-/qs-0.4.2.tgz\nnpm http 200 https://registry.npmjs.org/emitter-component/0.0.1\nnpm http GET https://registry.npmjs.org/emitter-component/-/emitter-component-0.0.1.tgz\nnpm http 200 https://registry.npmjs.org/mime/1.2.4\nnpm http GET https://registry.npmjs.org/mime/-/mime-1.2.4.tgz\nnpm http 200 https://registry.npmjs.org/formidable/1.0.9\nnpm http GET https://registry.npmjs.org/formidable/-/formidable-1.0.9.tgz\nnpm http 200 https://registry.npmjs.org/mkdirp/0.3.0\nnpm http GET https://registry.npmjs.org/mkdirp/-/mkdirp-0.3.0.tgz\nnpm http 304 https://registry.npmjs.org/qs\nnpm http 200 https://registry.npmjs.org/optimist\nnpm http GET https://registry.npmjs.org/optimist/-/optimist-0.3.4.tgz\nnpm http 200 https://registry.npmjs.org/socket.io-client/0.9.10\nnpm http GET https://registry.npmjs.org/socket.io-client/-/socket.io-client-0.9.10.tgz\nnpm http 200 https://registry.npmjs.org/policyfile/0.0.4\nnpm http GET https://registry.npmjs.org/policyfile/-/policyfile-0.0.4.tgz\nnpm http 200 https://registry.npmjs.org/detective\nnpm http GET https://registry.npmjs.org/detective/-/detective-0.2.1.tgz\nnpm http 200 https://registry.npmjs.org/findit\nnpm http GET https://registry.npmjs.org/findit/-/findit-0.1.2.tgz\nnpm http 200 https://registry.npmjs.org/mkdirp\nnpm http GET https://registry.npmjs.org/mkdirp/-/mkdirp-0.3.4.tgz\nnpm http 200 https://registry.npmjs.org/mailcomposer\nnpm http GET https://registry.npmjs.org/mailcomposer/-/mailcomposer-0.1.19.tgz\nnpm http 200 https://registry.npmjs.org/redis/0.7.2\nnpm http GET https://registry.npmjs.org/redis/-/redis-0.7.2.tgz\nnpm http 200 https://registry.npmjs.org/yamlparser/-/yamlparser-0.0.2.tgz\nnpm http 200 https://registry.npmjs.org/semver/-/semver-1.0.14.tgz\nnpm http 200 https://registry.npmjs.org/request/-/request-2.9.202.tgz\nnpm http 200 https://registry.npmjs.org/mime/-/mime-1.2.5.tgz\nnpm http 200 https://registry.npmjs.org/methods/-/methods-0.0.1.tgz\nnpm http 200 https://registry.npmjs.org/connect\nnpm http GET https://registry.npmjs.org/connect/-/connect-1.9.2.tgz\nnpm WARN package.json methods@0.0.1 No README.md file found!\nnpm http 200 https://registry.npmjs.org/keypress/-/keypress-0.1.0.tgz\nnpm http 200 https://registry.npmjs.org/googlemaps/-/googlemaps-0.1.7.tgz\nnpm http 200 https://registry.npmjs.org/cookiejar/-/cookiejar-1.3.0.tgz\nnpm http 200 https://registry.npmjs.org/qs/-/qs-0.4.2.tgz\nnpm http 200 https://registry.npmjs.org/emitter-component/-/emitter-component-0.0.1.tgz\nnpm http 200 https://registry.npmjs.org/mime/-/mime-1.2.4.tgz\nnpm http 200 https://registry.npmjs.org/formidable/-/formidable-1.0.9.tgz\nnpm http 200 https://registry.npmjs.org/mkdirp/-/mkdirp-0.3.0.tgz\nnpm http 200 https://registry.npmjs.org/optimist/-/optimist-0.3.4.tgz\nnpm http GET https://registry.npmjs.org/request\nnpm http GET https://registry.npmjs.org/waitress\nnpm http 200 https://registry.npmjs.org/socket.io-client/-/socket.io-client-0.9.10.tgz\nnpm http 200 https://registry.npmjs.org/policyfile/-/policyfile-0.0.4.tgz\nnpm http 200 https://registry.npmjs.org/detective/-/detective-0.2.1.tgz\nnpm http 200 https://registry.npmjs.org/simplesmtp\nnpm http GET https://registry.npmjs.org/simplesmtp/-/simplesmtp-0.1.21.tgz\nnpm http 200 https://registry.npmjs.org/findit/-/findit-0.1.2.tgz\nnpm http 200 https://registry.npmjs.org/mkdirp/-/mkdirp-0.3.4.tgz\nnpm http 200 https://registry.npmjs.org/mailcomposer/-/mailcomposer-0.1.19.tgz\nnpm WARN excluding symbolic link test/symlinks/dir1/dangling-symlink -> does-not-exist\nnpm http 200 https://registry.npmjs.org/redis/-/redis-0.7.2.tgz\nnpm http 200 https://registry.npmjs.org/connect/-/connect-1.9.2.tgz\nnpm http GET https://registry.npmjs.org/esprima\nnpm http GET https://registry.npmjs.org/seq\nnpm http 200 https://registry.npmjs.org/simplesmtp/-/simplesmtp-0.1.21.tgz\nnpm http 200 https://registry.npmjs.org/waitress\nnpm http GET https://registry.npmjs.org/waitress/-/waitress-0.1.2.tgz\nnpm http GET https://registry.npmjs.org/wordwrap\nnpm http GET https://registry.npmjs.org/rai\nnpm http GET https://registry.npmjs.org/mimelib\nnpm http 200 https://registry.npmjs.org/esprima\nnpm http GET https://registry.npmjs.org/esprima/-/esprima-0.9.9.tgz\nnpm http 200 https://registry.npmjs.org/waitress/-/waitress-0.1.2.tgz\nnpm http 200 https://registry.npmjs.org/seq\nnpm http GET https://registry.npmjs.org/seq/-/seq-0.3.5.tgz\nnpm WARN package.json connect@1.9.2 No README.md file found!\nnpm http GET https://registry.npmjs.org/formidable\nnpm http 200 https://registry.npmjs.org/wordwrap\nnpm http GET https://registry.npmjs.org/wordwrap/-/wordwrap-0.0.2.tgz\nnpm http 200 https://registry.npmjs.org/rai\nnpm http GET https://registry.npmjs.org/rai/-/rai-0.1.6.tgz\nnpm http 200 https://registry.npmjs.org/esprima/-/esprima-0.9.9.tgz\nnpm http 200 https://registry.npmjs.org/seq/-/seq-0.3.5.tgz\nnpm http 200 https://registry.npmjs.org/request\nnpm http GET https://registry.npmjs.org/request/-/request-2.2.9.tgz\nnpm http 200 https://registry.npmjs.org/mimelib\nnpm http GET https://registry.npmjs.org/mimelib/-/mimelib-0.2.4.tgz\nnpm http 200 https://registry.npmjs.org/wordwrap/-/wordwrap-0.0.2.tgz\nnpm http GET https://registry.npmjs.org/chainsaw\nnpm http GET https://registry.npmjs.org/hashish\nnpm http 200 https://registry.npmjs.org/rai/-/rai-0.1.6.tgz\nnpm http 200 https://registry.npmjs.org/request/-/request-2.2.9.tgz\nnpm http 200 https://registry.npmjs.org/formidable\nnpm http GET https://registry.npmjs.org/formidable/-/formidable-1.0.11.tgz\nnpm http 200 https://registry.npmjs.org/mimelib/-/mimelib-0.2.4.tgz\nnpm http 200 https://registry.npmjs.org/chainsaw\nnpm http GET https://registry.npmjs.org/chainsaw/-/chainsaw-0.0.9.tgz\nnpm http 200 https://registry.npmjs.org/hashish\nnpm http GET https://registry.npmjs.org/hashish/-/hashish-0.0.4.tgz\nnpm http 200 https://registry.npmjs.org/formidable/-/formidable-1.0.11.tgz\nnpm http 200 https://registry.npmjs.org/chainsaw/-/chainsaw-0.0.9.tgz\nnpm http 200 https://registry.npmjs.org/hashish/-/hashish-0.0.4.tgz\nnpm http GET https://registry.npmjs.org/traverse\nnpm http GET https://registry.npmjs.org/traverse\nnpm http 200 https://registry.npmjs.org/traverse\nnpm http GET https://registry.npmjs.org/traverse/-/traverse-0.6.3.tgz\nnpm http GET https://registry.npmjs.org/encoding\nnpm http GET https://registry.npmjs.org/addressparser\nnpm http 200 https://registry.npmjs.org/traverse\nnpm http GET https://registry.npmjs.org/traverse/-/traverse-0.3.9.tgz\nnpm http 200 https://registry.npmjs.org/addressparser\nnpm http GET https://registry.npmjs.org/addressparser/-/addressparser-0.1.1.tgz\nnpm http 200 https://registry.npmjs.org/traverse/-/traverse-0.3.9.tgz\nnpm http 200 https://registry.npmjs.org/traverse/-/traverse-0.6.3.tgz\nnpm http 200 https://registry.npmjs.org/addressparser/-/addressparser-0.1.1.tgz\nnpm http 200 https://registry.npmjs.org/encoding\nnpm http GET https://registry.npmjs.org/encoding/-/encoding-0.1.3.tgz\nnpm http 200 https://registry.npmjs.org/encoding/-/encoding-0.1.3.tgz\nnpm http GET https://registry.npmjs.org/iconv-lite\nnpm http GET https://registry.npmjs.org/iconv\nnpm http 200 https://registry.npmjs.org/iconv-lite\nnpm http 200 https://registry.npmjs.org/iconv\nnpm http GET https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.2.5.tgz\nnpm http GET https://registry.npmjs.org/iconv/-/iconv-1.2.3.tgz\nnpm http 200 https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.2.5.tgz\nnpm http 200 https://registry.npmjs.org/iconv/-/iconv-1.2.3.tgz\nnpm http GET https://registry.npmjs.org/hiredis\nnpm http GET https://registry.npmjs.org/uglify-js/1.2.5\nnpm http GET https://registry.npmjs.org/ws\nnpm http GET https://registry.npmjs.org/xmlhttprequest/1.4.2\nnpm http GET https://registry.npmjs.org/active-x-obfuscator/0.0.1\nnpm http 200 https://registry.npmjs.org/hiredis\nnpm http GET https://registry.npmjs.org/hiredis/-/hiredis-0.1.14.tgz\nnpm http 200 https://registry.npmjs.org/uglify-js/1.2.5\nnpm http GET https://registry.npmjs.org/uglify-js/-/uglify-js-1.2.5.tgz\nnpm http 200 https://registry.npmjs.org/xmlhttprequest/1.4.2\nnpm http GET https://registry.npmjs.org/xmlhttprequest/-/xmlhttprequest-1.4.2.tgz\nnpm http 200 https://registry.npmjs.org/active-x-obfuscator/0.0.1\nnpm http GET https://registry.npmjs.org/active-x-obfuscator/-/active-x-obfuscator-0.0.1.tgz\nnpm http 200 https://registry.npmjs.org/hiredis/-/hiredis-0.1.14.tgz\nnpm http 200 https://registry.npmjs.org/uglify-js/-/uglify-js-1.2.5.tgz\nnpm http 200 https://registry.npmjs.org/xmlhttprequest/-/xmlhttprequest-1.4.2.tgz\nnpm http 200 https://registry.npmjs.org/active-x-obfuscator/-/active-x-obfuscator-0.0.1.tgz\nnpm http 200 https://registry.npmjs.org/ws\nnpm http GET https://registry.npmjs.org/ws/-/ws-0.4.21.tgz\nnpm WARN package.json hiredis@0.1.14 No README.md file found!\n\nhiredis@0.1.14 preinstall /home/imagdy/local/lib/node_modules/tower/node_modules/socket.io/node_modules/redis/node_mod\nules/hiredis\nmake || gmake\n\ncd deps/hiredis && make static\nmake[1]: Entering directory /home/imagdy/local/lib/node_modules/tower/node_modules/socket.io/node_modules/redis/node_mo\ndules/hiredis/deps/hiredis'\ncc -std=c99 -pedantic -c -O3 -fPIC  -Wall -W -Wstrict-prototypes -Wwrite-strings -g -ggdb net.c\ncc -std=c99 -pedantic -c -O3 -fPIC  -Wall -W -Wstrict-prototypes -Wwrite-strings -g -ggdb hiredis.c\nnpm http 200 https://registry.npmjs.org/ws/-/ws-0.4.21.tgz\ncc -std=c99 -pedantic -c -O3 -fPIC  -Wall -W -Wstrict-prototypes -Wwrite-strings -g -ggdb sds.c\ncc -std=c99 -pedantic -c -O3 -fPIC  -Wall -W -Wstrict-prototypes -Wwrite-strings -g -ggdb async.c\nar rcs libhiredis.a net.o hiredis.o sds.o async.o\nmake[1]: Leaving directory/home/imagdy/local/lib/node_modules/tower/node_modules/socket.io/node_modules/redis/node_mod\nules/hiredis/deps/hiredis'\nnode-waf configure build\nSetting srcdir to                        : /home/imagdy/local/lib/node_modules/tower/node_modules/socket.io/node_modules\n/redis/node_modules/hiredis\nSetting blddir to                        : /home/imagdy/local/lib/node_modules/tower/node_modules/socket.io/node_modules\n/redis/node_modules/hiredis/build\nChecking for program g++ or c++          : /usr/bin/g++\nChecking for program cpp                 : /usr/bin/cpp\nChecking for program ar                  : /usr/bin/ar\nChecking for program ranlib              : /usr/bin/ranlib\nChecking for g++                         : ok\nChecking for node path                   : not found\nChecking for node prefix                 : ok /home/imagdy/local\n'configure' finished successfully (0.072s)\nWaf: Entering directory /home/imagdy/local/lib/node_modules/tower/node_modules/socket.io/node_modules/redis/node_module\ns/hiredis/build'\n[1/3] cxx: hiredis.cc -> build/Release/hiredis_1.o\n[2/3] cxx: reader.cc -> build/Release/reader_1.o\n[3/3] cxx_link: build/Release/hiredis_1.o build/Release/reader_1.o -> build/Release/hiredis.node\nWaf: Leaving directory/home/imagdy/local/lib/node_modules/tower/node_modules/socket.io/node_modules/redis/node_modules\n/hiredis/build'\n'build' finished successfully (1.980s)\nnpm http GET https://registry.npmjs.org/zeparser/0.0.5\nnpm http GET https://registry.npmjs.org/tinycolor\nnpm http GET https://registry.npmjs.org/commander\nnpm http GET https://registry.npmjs.org/options\nnpm http 304 https://registry.npmjs.org/commander\nnpm http GET https://registry.npmjs.org/commander/-/commander-0.6.1.tgz\nnpm http 200 https://registry.npmjs.org/zeparser/0.0.5\nnpm http GET https://registry.npmjs.org/zeparser/-/zeparser-0.0.5.tgz\nnpm http 200 https://registry.npmjs.org/tinycolor\nnpm http GET https://registry.npmjs.org/tinycolor/-/tinycolor-0.0.1.tgz\nnpm http 200 https://registry.npmjs.org/options\nnpm http GET https://registry.npmjs.org/options/-/options-0.0.3.tgz\nnpm http 200 https://registry.npmjs.org/commander/-/commander-0.6.1.tgz\nnpm http 200 https://registry.npmjs.org/zeparser/-/zeparser-0.0.5.tgz\nnpm http 200 https://registry.npmjs.org/tinycolor/-/tinycolor-0.0.1.tgz\nnpm http 200 https://registry.npmjs.org/options/-/options-0.0.3.tgz\n\nws@0.4.21 install /home/imagdy/local/lib/node_modules/tower/node_modules/socket.io/node_modules/socket.io-client/node_\nmodules/ws\nnode install.js\n\n[ws v0.4.21] Attempting to compile blazing fast native extensions.\n[ws v0.4.21] Native extension compilation successful!\n\niconv@1.2.3 install /home/imagdy/local/lib/node_modules/tower/node_modules/nodemailer/node_modules/mailcomposer/node_m\nodules/mimelib/node_modules/encoding/node_modules/iconv\nnode-gyp rebuild\n\nmake: Entering directory /home/imagdy/local/lib/node_modules/tower/node_modules/nodemailer/node_modules/mailcomposer/no\nde_modules/mimelib/node_modules/encoding/node_modules/iconv/build'\n  CC(target) Release/obj.target/iconv/deps/libiconv/libcharset/lib/localcharset.o\n  CC(target) Release/obj.target/iconv/deps/libiconv/lib/iconv.o\n  CXX(target) Release/obj.target/iconv/binding.o\n  SOLINK_MODULE(target) Release/obj.target/iconv.node\n  SOLINK_MODULE(target) Release/obj.target/iconv.node: Finished\n  COPY Release/iconv.node\nmake: Leaving directory/home/imagdy/local/lib/node_modules/tower/node_modules/nodemailer/node_modules/mailcomposer/nod\ne_modules/mimelib/node_modules/encoding/node_modules/iconv/build'\n/home/imagdy/local/bin/tower -> /home/imagdy/local/lib/node_modules/tower/bin/tower\n\ntower@0.4.1 postinstall /home/imagdy/local/lib/node_modules/tower\nnpm install git://github.com/viatropos/coffeecup.git git://github.com/viatropos/coffee-script.git --force\n\n/home/imagdy/local/bin/coffee -> /home/imagdy/local/lib/node_modules/coffee-script/bin/coffee\n/home/imagdy/local/bin/cake -> /home/imagdy/local/lib/node_modules/coffee-script/bin/cake\nnpm http GET https://registry.npmjs.org/optparse\nnpm http GET https://registry.npmjs.org/uglify-js\nnpm http GET https://registry.npmjs.org/stylus\nnpm http 200 https://registry.npmjs.org/optparse\nnpm http GET https://registry.npmjs.org/optparse/-/optparse-1.0.3.tgz\nnpm http 200 https://registry.npmjs.org/uglify-js\nnpm http GET https://registry.npmjs.org/uglify-js/-/uglify-js-1.3.3.tgz\nnpm http 200 https://registry.npmjs.org/stylus\nnpm http GET https://registry.npmjs.org/stylus/-/stylus-0.29.0.tgz\nnpm http 200 https://registry.npmjs.org/optparse/-/optparse-1.0.3.tgz\nnpm http 200 https://registry.npmjs.org/uglify-js/-/uglify-js-1.3.3.tgz\nnpm http 200 https://registry.npmjs.org/stylus/-/stylus-0.29.0.tgz\nnpm http GET https://registry.npmjs.org/cssom\nnpm http GET https://registry.npmjs.org/debug\nnpm http GET https://registry.npmjs.org/mkdirp\nnpm http 304 https://registry.npmjs.org/mkdirp\nnpm http GET https://registry.npmjs.org/mkdirp/-/mkdirp-0.3.4.tgz\nnpm http 200 https://registry.npmjs.org/debug\nnpm http GET https://registry.npmjs.org/debug/-/debug-0.7.0.tgz\nnpm http 200 https://registry.npmjs.org/cssom\nnpm http GET https://registry.npmjs.org/cssom/-/cssom-0.2.5.tgz\nnpm http 200 https://registry.npmjs.org/mkdirp/-/mkdirp-0.3.4.tgz\nnpm http 200 https://registry.npmjs.org/debug/-/debug-0.7.0.tgz\nnpm http 200 https://registry.npmjs.org/cssom/-/cssom-0.2.5.tgz\n/home/imagdy/local/bin/coffeecup -> /home/imagdy/local/lib/node_modules/coffeecup/bin/coffeecup\ncoffee-script@1.3.2 /home/imagdy/local/lib/node_modules/coffee-script\ncoffeecup@0.3.11 /home/imagdy/local/lib/node_modules/coffeecup\n\u251c\u2500\u2500 optparse@1.0.3\n\u251c\u2500\u2500 uglify-js@1.3.3\n\u2514\u2500\u2500 stylus@0.29.0 (debug@0.7.0, mkdirp@0.3.4, cssom@0.2.5)\ntower@0.4.1 /home/imagdy/local/lib/node_modules/tower\n\u251c\u2500\u2500 knox@0.0.11\n\u251c\u2500\u2500 ember-states-node@0.9.7-1-1\n\u251c\u2500\u2500 temp@0.4.0\n\u251c\u2500\u2500 inflection@1.2.3\n\u251c\u2500\u2500 underscore.logger@0.3.1\n\u251c\u2500\u2500 wrench@1.3.9\n\u251c\u2500\u2500 node-uuid@1.3.3\n\u251c\u2500\u2500 mime@1.2.7\n\u251c\u2500\u2500 async@0.1.22\n\u251c\u2500\u2500 URIjs@1.7.2\n\u251c\u2500\u2500 ember-runtime-node@0.9.7-1-1\n\u251c\u2500\u2500 ember-metal-node@0.9.7-1-1\n\u251c\u2500\u2500 validator@0.4.11\n\u251c\u2500\u2500 mint@0.3.5\n\u251c\u2500\u2500 ejs@0.8.2\n\u251c\u2500\u2500 underscore@1.3.3\n\u251c\u2500\u2500 underscore.string@2.2.0rc\n\u251c\u2500\u2500 qs@0.5.0\n\u251c\u2500\u2500 accounting@0.3.2\n\u251c\u2500\u2500 coffee-script@1.3.2\n\u251c\u2500\u2500 gm@1.4.2\n\u251c\u2500\u2500 moment@1.7.0\n\u251c\u2500\u2500 commander@1.0.4 (keypress@0.1.0)\n\u251c\u2500\u2500 useragent@1.1.0 (yamlparser@0.0.2, semver@1.0.14, request@2.9.202)\n\u251c\u2500\u2500 superagent@0.9.0 (methods@0.0.1, cookiejar@1.3.0, emitter-component@0.0.1, qs@0.4.2, mime@1.2.5, formidable@1.0.9)\n\u251c\u2500\u2500 geolib@1.1.8 (googlemaps@0.1.7)\n\u251c\u2500\u2500 express@2.5.11 (qs@0.4.2, mime@1.2.4, mkdirp@0.3.0, connect@1.9.2)\n\u251c\u2500\u2500 pathfinder@0.3.0-1 (mkdirp@0.3.4, findit@0.1.2, detective@0.2.1)\n\u251c\u2500\u2500 socket.io@0.9.10 (policyfile@0.0.4, redis@0.7.2, socket.io-client@0.9.10)\n\u2514\u2500\u2500 nodemailer@0.3.25 (optimist@0.3.4, simplesmtp@0.1.21, mailcomposer@0.1.19)\nimagdy@imagdy:~/node-latest-install/node_modules$\nimagdy@imagdy:~/node-latest-install/node_modules$\nimagdy@imagdy:~/node-latest-install/node_modules$\nimagdy@imagdy:~/node-latest-install/node_modules$ tower\nmodule.js:340\n    throw err;\n          ^\nError: Cannot find module '../lib/tower'\n    at Function.Module._resolveFilename (module.js:338:15)\n    at Function.Module._load (module.js:280:25)\n    at Module.require (module.js:362:17)\n    at require (module.js:378:17)\n    at Object. (/home/imagdy/local/lib/node_modules/tower/bin/tower:2:1)\n    at Module._compile (module.js:449:26)\n    at Object.Module._extensions..js (module.js:467:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Module.runMain (module.js:492:10)\n. Using version v0.6.19 I'll try to upgrade to the current version and update you. Thanks :+1: \n. Wow! this fixed the problem!! :):):)\n. Thank you!\n. It's so weird, didn't work for me, I'm using Ubuntu Server 12.04. Linux normally understand && without an issue.\nI tried \"sudo install tower -g\" in a coworker machine, the installation completed successfully, but when I type \"tower new app\", it says, command not found. :(\nIt's the first time I see this issue, I tried Geddy, Flatiron, RailwayJS, they're all installed without any issues, I think it's something in the package, but I'm not sure what exactly is this :(\nCan you verify this on a Linux machine? VM?\n. I tried this tutorial: https://www.digitalocean.com/community/articles/how-to-install-node-js-on-ubuntu-12-04\nTo install NodeJS as a local user instead of root, and then ran the command npm install tower, and it succeeded! I got this:\ncoffeecup@0.3.11 node_modules/coffeecup\n\u251c\u2500\u2500 optparse@1.0.3\n\u251c\u2500\u2500 uglify-js@1.3.3\n\u2514\u2500\u2500 stylus@0.29.0 (debug@0.7.0, mkdirp@0.3.4, cssom@0.2.5)\ntower@0.4.1 node_modules/tower\n\u251c\u2500\u2500 ember-states-node@0.9.7-1-1\n\u251c\u2500\u2500 knox@0.0.11\n\u251c\u2500\u2500 temp@0.4.0\n\u251c\u2500\u2500 underscore.logger@0.3.1\n\u251c\u2500\u2500 inflection@1.2.3\n\u251c\u2500\u2500 wrench@1.3.9\n\u251c\u2500\u2500 node-uuid@1.3.3\n\u251c\u2500\u2500 async@0.1.22\n\u251c\u2500\u2500 mime@1.2.7\n\u251c\u2500\u2500 URIjs@1.7.2\n\u251c\u2500\u2500 ember-runtime-node@0.9.7-1-1\n\u251c\u2500\u2500 ember-metal-node@0.9.7-1-1\n\u251c\u2500\u2500 validator@0.4.11\n\u251c\u2500\u2500 mint@0.3.5\n\u251c\u2500\u2500 ejs@0.8.2\n\u251c\u2500\u2500 underscore@1.3.3\n\u251c\u2500\u2500 underscore.string@2.2.0rc\n\u251c\u2500\u2500 qs@0.5.0\n\u251c\u2500\u2500 coffee-script@1.3.2\n\u251c\u2500\u2500 accounting@0.3.2\n\u251c\u2500\u2500 gm@1.4.2\n\u251c\u2500\u2500 moment@1.7.0\n\u251c\u2500\u2500 commander@1.0.4 (keypress@0.1.0)\n\u251c\u2500\u2500 useragent@1.1.0 (yamlparser@0.0.2, semver@1.0.14, request@2.9.202)\n\u251c\u2500\u2500 superagent@0.9.0 (methods@0.0.1, emitter-component@0.0.1, cookiejar@1.3.0, qs@0.4.2, mime@1.2.5, formidable@1.0.9)\n\u251c\u2500\u2500 geolib@1.1.8 (googlemaps@0.1.7)\n\u251c\u2500\u2500 express@2.5.11 (qs@0.4.2, mime@1.2.4, mkdirp@0.3.0, connect@1.9.2)\n\u251c\u2500\u2500 pathfinder@0.3.0-1 (mkdirp@0.3.4, detective@0.2.1, findit@0.1.2)\n\u251c\u2500\u2500 socket.io@0.9.10 (policyfile@0.0.4, redis@0.7.2, socket.io-client@0.9.10)\n\u2514\u2500\u2500 nodemailer@0.3.25 (optimist@0.3.4, simplesmtp@0.1.21, mailcomposer@0.1.19)\nBut when I type tower in the terminal, I get:\nimagdy@imagdy:/var/www$ tower\nNo command 'tower' found, did you mean:\n Command 'towers' from package 'sgt-puzzles' (universe)\ntower: command not found\n:(\n. O, I forgot to add the -g to the Tower installation line, but when I did that (npm install tower -g) I got:\nimagdy@imagdy:/var/www$ tower new todos\nmodule.js:340\n    throw err;\n          ^\nError: Cannot find module '../lib/tower'\n    at Function.Module._resolveFilename (module.js:338:15)\n    at Function.Module._load (module.js:280:25)\n    at Module.require (module.js:362:17)\n    at require (module.js:378:17)\n    at Object. (/home/imagdy/local/lib/node_modules/tower/bin/tower:2:1)\n    at Module._compile (module.js:449:26)\n    at Object.Module._extensions..js (module.js:467:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Module.runMain (module.js:492:10)\n. Thanks Edubkendo, I did it and got this:\nimagdy@imagdy:~/node-latest-install/node_modules/tower$ make watch\ngrunt start --config ./grunt.coffee\nLoading \"grunt.coffee\" tasks and helpers...ERROR\n\n\nError: Cannot find module './build/tasks'\n Task \"start\" not found. Use --force to continue. \n\n\nAborted due to warnings.\nmake: *** [watch] Error 3\n. I installed Grunt, with the -g parameter, then I got:\ngrunt@0.3.15 /home/imagdy/local/lib/node_modules/grunt\n\u251c\u2500\u2500 dateformat@1.0.2-1.2.3\n\u251c\u2500\u2500 colors@0.6.0-1\n\u251c\u2500\u2500 semver@1.0.14\n\u251c\u2500\u2500 async@0.1.22\n\u251c\u2500\u2500 hooker@0.2.3\n\u251c\u2500\u2500 underscore@1.2.4\n\u251c\u2500\u2500 underscore.string@2.1.1\n\u251c\u2500\u2500 uglify-js@1.3.3\n\u251c\u2500\u2500 nopt@1.0.10 (abbrev@1.0.3)\n\u251c\u2500\u2500 temporary@0.0.4 (package@1.0.1)\n\u251c\u2500\u2500 gzip-js@0.3.1 (crc32@0.2.2, deflate-js@0.2.2)\n\u251c\u2500\u2500 glob-whatev@0.1.8 (minimatch@0.2.6)\n\u251c\u2500\u2500 jshint@0.5.9 (argsparser@0.0.6, minimatch@0.2.6)\n\u251c\u2500\u2500 connect@2.4.5 (fresh@0.1.0, pause@0.0.1, bytes@0.1.0, cookie@0.0.4, crc@0.2.0, debug@0.7.0, qs@0.4.2, formidable@1.0\n.11, send@0.0.4)\n\u251c\u2500\u2500 prompt@0.1.12 (pkginfo@0.2.3, winston@0.5.11)\n\u2514\u2500\u2500 nodeunit@0.7.4 (tap@0.3.1)\nThen make watch gave me:\ngrunt start --config ./grunt.coffee\nLoading \"grunt.coffee\" tasks and helpers...ERROR\n\n\nError: Cannot find module './build/tasks'\n Task \"start\" not found. Use --force to continue. \n\n\nAborted due to warnings.\nmake: *** [watch] Error 3\n. I think I removed all the old stuff, that's why npm is keeping on installing packages into my home folder.\n. I have these:\nimagdy@imagdy:~/node-latest-install/node_modules/tower$ ll\ntotal 100\ndrwxrwxr-x  5 imagdy imagdy  4096 Sep  6 22:23 ./\ndrwxrwxr-x  4 imagdy imagdy  4096 Sep  6 22:23 ../\ndrwxrwxrwx  2 imagdy imagdy  4096 Sep  1 14:10 bin/\n-rw-rw-rw-  1 imagdy imagdy  5080 Sep  1 14:10 grunt.coffee\n-rw-rw-rw-  1 imagdy imagdy   248 Sep  1 14:10 index.js\n-rw-rw-rw-  1 imagdy imagdy  1571 Sep  1 14:10 INSTALL.md\n-rw-rw-rw-  1 imagdy imagdy   948 Sep  1 14:10 Makefile\n-rw-rw-rw-  1 imagdy imagdy  1121 Sep  1 14:10 MIT-LICENSE.md\ndrwxrwxr-x 34 imagdy imagdy  4096 Sep  6 22:25 node_modules/\n-rw-rw-rw-  1 imagdy imagdy   120 Sep  1 14:10 .npmignore\n-rw-rw-rw-  1 imagdy imagdy 26898 Sep  6 22:21 package.json\ndrwxrwxrwx 16 imagdy imagdy  4096 Sep  6 22:21 packages/\n-rw-rw-rw-  1 imagdy imagdy 23040 Sep  1 14:10 README.md\n. I don't have these: \"build\", \"dist\", \"lib\", \"test\", \"tmp\"\n. Same thing same thing.. Here's the whole story:\nimagdy@imagdy:~/node-latest-install/node_modules/tower$ npm cache clean\nimagdy@imagdy:~/node-latest-install/node_modules/tower$ cd ..\nimagdy@imagdy:~/node-latest-install/node_modules$ npm install -g tower\nnpm http GET https://registry.npmjs.org/underscore\nnpm http GET https://registry.npmjs.org/underscore.string\nnpm http GET https://registry.npmjs.org/mime\nnpm http GET https://registry.npmjs.org/qs\nnpm http GET https://registry.npmjs.org/async\nnpm http GET https://registry.npmjs.org/underscore.logger\nnpm http GET https://registry.npmjs.org/mint\nnpm http GET https://registry.npmjs.org/ejs\nnpm http GET https://registry.npmjs.org/pathfinder\nnpm http GET https://registry.npmjs.org/commander\nnpm http GET https://registry.npmjs.org/express\nnpm http GET https://registry.npmjs.org/socket.io\nnpm http GET https://registry.npmjs.org/useragent\nnpm http GET https://registry.npmjs.org/URIjs\nnpm http GET https://registry.npmjs.org/moment\nnpm http GET https://registry.npmjs.org/node-uuid\nnpm http GET https://registry.npmjs.org/geolib\nnpm http GET https://registry.npmjs.org/validator\nnpm http GET https://registry.npmjs.org/accounting\nnpm http GET https://registry.npmjs.org/inflection\nnpm http GET https://registry.npmjs.org/superagent\nnpm http GET https://registry.npmjs.org/ember-metal-node\nnpm http GET https://registry.npmjs.org/ember-runtime-node\nnpm http GET https://registry.npmjs.org/ember-states-node\nnpm http GET https://registry.npmjs.org/wrench\nnpm http GET https://registry.npmjs.org/temp\nnpm http GET https://registry.npmjs.org/knox/0.0.11\nnpm http GET https://registry.npmjs.org/gm\nnpm http GET https://registry.npmjs.org/nodemailer\nnpm http 200 https://registry.npmjs.org/underscore.string\nnpm http GET https://registry.npmjs.org/underscore.string/-/underscore.string-2.2.0rc.tgz\nnpm http 200 https://registry.npmjs.org/qs\nnpm http GET https://registry.npmjs.org/qs/-/qs-0.5.0.tgz\nnpm http 200 https://registry.npmjs.org/mime\nnpm http GET https://registry.npmjs.org/mime/-/mime-1.2.7.tgz\nnpm http 200 https://registry.npmjs.org/underscore\nnpm http GET https://registry.npmjs.org/underscore/-/underscore-1.3.3.tgz\nnpm http 200 https://registry.npmjs.org/underscore.logger\nnpm http GET https://registry.npmjs.org/underscore.logger/-/underscore.logger-0.3.1.tgz\nnpm http 200 https://registry.npmjs.org/mint\nnpm http GET https://registry.npmjs.org/mint/-/mint-0.3.5.tgz\nnpm http 200 https://registry.npmjs.org/pathfinder\nnpm http GET https://registry.npmjs.org/pathfinder/-/pathfinder-0.3.0-1.tgz\nnpm http 200 https://registry.npmjs.org/ejs\nnpm http GET https://registry.npmjs.org/ejs/-/ejs-0.8.2.tgz\nnpm http 200 https://registry.npmjs.org/useragent\nnpm http GET https://registry.npmjs.org/useragent/-/useragent-1.1.0.tgz\nnpm http 200 https://registry.npmjs.org/commander\nnpm http GET https://registry.npmjs.org/commander/-/commander-1.0.4.tgz\nnpm http 200 https://registry.npmjs.org/URIjs\nnpm http GET https://registry.npmjs.org/URIjs/-/URIjs-1.7.2.tgz\nnpm http 200 https://registry.npmjs.org/moment\nnpm http GET https://registry.npmjs.org/moment/-/moment-1.7.0.tgz\nnpm http 200 https://registry.npmjs.org/node-uuid\nnpm http GET https://registry.npmjs.org/node-uuid/-/node-uuid-1.3.3.tgz\nnpm http 200 https://registry.npmjs.org/geolib\nnpm http GET https://registry.npmjs.org/geolib/-/geolib-1.1.8.tgz\nnpm http 200 https://registry.npmjs.org/async\nnpm http GET https://registry.npmjs.org/async/-/async-0.1.22.tgz\nnpm http 200 https://registry.npmjs.org/accounting\nnpm http GET https://registry.npmjs.org/accounting/-/accounting-0.3.2.tgz\nnpm http 200 https://registry.npmjs.org/express\nnpm http GET https://registry.npmjs.org/express/-/express-2.5.11.tgz\nnpm http 200 https://registry.npmjs.org/inflection\nnpm http GET https://registry.npmjs.org/inflection/-/inflection-1.2.3.tgz\nnpm http 200 https://registry.npmjs.org/ember-metal-node\nnpm http GET https://registry.npmjs.org/ember-metal-node/-/ember-metal-node-0.9.7-1-1.tgz\nnpm http 200 https://registry.npmjs.org/ember-runtime-node\nnpm http GET https://registry.npmjs.org/ember-runtime-node/-/ember-runtime-node-0.9.7-1-1.tgz\nnpm http 200 https://registry.npmjs.org/socket.io\nnpm http GET https://registry.npmjs.org/socket.io/-/socket.io-0.9.10.tgz\nnpm http 200 https://registry.npmjs.org/superagent\nnpm http GET https://registry.npmjs.org/superagent/-/superagent-0.9.0.tgz\nnpm http 200 https://registry.npmjs.org/ember-states-node\nnpm http GET https://registry.npmjs.org/ember-states-node/-/ember-states-node-0.9.7-1-1.tgz\nnpm http 200 https://registry.npmjs.org/wrench\nnpm http GET https://registry.npmjs.org/wrench/-/wrench-1.3.9.tgz\nnpm http 200 https://registry.npmjs.org/temp\nnpm http GET https://registry.npmjs.org/temp/-/temp-0.4.0.tgz\nnpm http 200 https://registry.npmjs.org/knox/0.0.11\nnpm http GET https://registry.npmjs.org/knox/-/knox-0.0.11.tgz\nnpm http 200 https://registry.npmjs.org/underscore.string/-/underscore.string-2.2.0rc.tgz\nnpm http 200 https://registry.npmjs.org/qs/-/qs-0.5.0.tgz\nnpm http 200 https://registry.npmjs.org/validator\nnpm http GET https://registry.npmjs.org/validator/-/validator-0.4.11.tgz\nnpm http 200 https://registry.npmjs.org/mime/-/mime-1.2.7.tgz\nnpm http 200 https://registry.npmjs.org/underscore/-/underscore-1.3.3.tgz\nnpm http 200 https://registry.npmjs.org/gm\nnpm http GET https://registry.npmjs.org/gm/-/gm-1.4.2.tgz\nnpm http 200 https://registry.npmjs.org/underscore.logger/-/underscore.logger-0.3.1.tgz\nnpm http 200 https://registry.npmjs.org/mint/-/mint-0.3.5.tgz\nnpm http 200 https://registry.npmjs.org/pathfinder/-/pathfinder-0.3.0-1.tgz\nnpm http 200 https://registry.npmjs.org/ejs/-/ejs-0.8.2.tgz\nnpm http 200 https://registry.npmjs.org/useragent/-/useragent-1.1.0.tgz\nnpm http 200 https://registry.npmjs.org/commander/-/commander-1.0.4.tgz\nnpm http 200 https://registry.npmjs.org/URIjs/-/URIjs-1.7.2.tgz\nnpm http 200 https://registry.npmjs.org/moment/-/moment-1.7.0.tgz\nnpm http 200 https://registry.npmjs.org/node-uuid/-/node-uuid-1.3.3.tgz\nnpm http 200 https://registry.npmjs.org/geolib/-/geolib-1.1.8.tgz\nnpm WARN package.json geolib@1.1.8 No README.md file found!\nnpm http 200 https://registry.npmjs.org/async/-/async-0.1.22.tgz\nnpm http 200 https://registry.npmjs.org/accounting/-/accounting-0.3.2.tgz\nnpm http 200 https://registry.npmjs.org/express/-/express-2.5.11.tgz\nnpm http 200 https://registry.npmjs.org/inflection/-/inflection-1.2.3.tgz\nnpm http 200 https://registry.npmjs.org/ember-metal-node/-/ember-metal-node-0.9.7-1-1.tgz\nnpm http 200 https://registry.npmjs.org/ember-runtime-node/-/ember-runtime-node-0.9.7-1-1.tgz\nnpm http 200 https://registry.npmjs.org/socket.io/-/socket.io-0.9.10.tgz\nnpm WARN package.json ember-metal-node@0.9.7-1-1 No README.md file found!\nnpm http 200 https://registry.npmjs.org/superagent/-/superagent-0.9.0.tgz\nnpm WARN package.json ember-runtime-node@0.9.7-1-1 No README.md file found!\nnpm http 200 https://registry.npmjs.org/ember-states-node/-/ember-states-node-0.9.7-1-1.tgz\nnpm http 200 https://registry.npmjs.org/wrench/-/wrench-1.3.9.tgz\nnpm WARN package.json ember-states-node@0.9.7-1-1 No README.md file found!\nnpm http 200 https://registry.npmjs.org/temp/-/temp-0.4.0.tgz\nnpm http 200 https://registry.npmjs.org/knox/-/knox-0.0.11.tgz\nnpm http 200 https://registry.npmjs.org/validator/-/validator-0.4.11.tgz\nnpm http 200 https://registry.npmjs.org/gm/-/gm-1.4.2.tgz\nnpm http 200 https://registry.npmjs.org/nodemailer\nnpm http GET https://registry.npmjs.org/nodemailer/-/nodemailer-0.3.25.tgz\nnpm http 200 https://registry.npmjs.org/nodemailer/-/nodemailer-0.3.25.tgz\nnpm http GET https://registry.npmjs.org/googlemaps\nnpm http GET https://registry.npmjs.org/keypress\nnpm http GET https://registry.npmjs.org/yamlparser/0.0.2\nnpm http GET https://registry.npmjs.org/request/2.9.202\nnpm http GET https://registry.npmjs.org/semver/1.0.14\nnpm http GET https://registry.npmjs.org/mime/1.2.5\nnpm http GET https://registry.npmjs.org/methods/0.0.1\nnpm http GET https://registry.npmjs.org/emitter-component/0.0.1\nnpm http GET https://registry.npmjs.org/cookiejar/1.3.0\nnpm http GET https://registry.npmjs.org/qs/0.4.2\nnpm http GET https://registry.npmjs.org/formidable/1.0.9\nnpm http GET https://registry.npmjs.org/connect\nnpm http GET https://registry.npmjs.org/mime/1.2.4\nnpm http GET https://registry.npmjs.org/mailcomposer\nnpm http GET https://registry.npmjs.org/simplesmtp\nnpm http GET https://registry.npmjs.org/optimist\nnpm http GET https://registry.npmjs.org/mkdirp/0.3.0\nnpm http GET https://registry.npmjs.org/qs\nnpm http GET https://registry.npmjs.org/socket.io-client/0.9.10\nnpm http GET https://registry.npmjs.org/policyfile/0.0.4\nnpm http GET https://registry.npmjs.org/detective\nnpm http GET https://registry.npmjs.org/findit\nnpm http GET https://registry.npmjs.org/redis/0.7.2\nnpm http GET https://registry.npmjs.org/mkdirp\nnpm http 200 https://registry.npmjs.org/yamlparser/0.0.2\nnpm http 200 https://registry.npmjs.org/semver/1.0.14\nnpm http GET https://registry.npmjs.org/yamlparser/-/yamlparser-0.0.2.tgz\nnpm http GET https://registry.npmjs.org/semver/-/semver-1.0.14.tgz\nnpm http 200 https://registry.npmjs.org/request/2.9.202\nnpm http GET https://registry.npmjs.org/request/-/request-2.9.202.tgz\nnpm http 200 https://registry.npmjs.org/mime/1.2.5\nnpm http GET https://registry.npmjs.org/mime/-/mime-1.2.5.tgz\nnpm http 200 https://registry.npmjs.org/methods/0.0.1\nnpm http GET https://registry.npmjs.org/methods/-/methods-0.0.1.tgz\nnpm http 200 https://registry.npmjs.org/keypress\nnpm http GET https://registry.npmjs.org/keypress/-/keypress-0.1.0.tgz\nnpm http 200 https://registry.npmjs.org/googlemaps\nnpm http GET https://registry.npmjs.org/googlemaps/-/googlemaps-0.1.7.tgz\nnpm http 200 https://registry.npmjs.org/cookiejar/1.3.0\nnpm http GET https://registry.npmjs.org/cookiejar/-/cookiejar-1.3.0.tgz\nnpm http 200 https://registry.npmjs.org/qs/0.4.2\nnpm http GET https://registry.npmjs.org/qs/-/qs-0.4.2.tgz\nnpm http 200 https://registry.npmjs.org/emitter-component/0.0.1\nnpm http GET https://registry.npmjs.org/emitter-component/-/emitter-component-0.0.1.tgz\nnpm http 200 https://registry.npmjs.org/mime/1.2.4\nnpm http GET https://registry.npmjs.org/mime/-/mime-1.2.4.tgz\nnpm http 200 https://registry.npmjs.org/formidable/1.0.9\nnpm http GET https://registry.npmjs.org/formidable/-/formidable-1.0.9.tgz\nnpm http 200 https://registry.npmjs.org/mkdirp/0.3.0\nnpm http GET https://registry.npmjs.org/mkdirp/-/mkdirp-0.3.0.tgz\nnpm http 304 https://registry.npmjs.org/qs\nnpm http 200 https://registry.npmjs.org/optimist\nnpm http GET https://registry.npmjs.org/optimist/-/optimist-0.3.4.tgz\nnpm http 200 https://registry.npmjs.org/socket.io-client/0.9.10\nnpm http GET https://registry.npmjs.org/socket.io-client/-/socket.io-client-0.9.10.tgz\nnpm http 200 https://registry.npmjs.org/policyfile/0.0.4\nnpm http GET https://registry.npmjs.org/policyfile/-/policyfile-0.0.4.tgz\nnpm http 200 https://registry.npmjs.org/detective\nnpm http GET https://registry.npmjs.org/detective/-/detective-0.2.1.tgz\nnpm http 200 https://registry.npmjs.org/findit\nnpm http GET https://registry.npmjs.org/findit/-/findit-0.1.2.tgz\nnpm http 200 https://registry.npmjs.org/mkdirp\nnpm http GET https://registry.npmjs.org/mkdirp/-/mkdirp-0.3.4.tgz\nnpm http 200 https://registry.npmjs.org/mailcomposer\nnpm http GET https://registry.npmjs.org/mailcomposer/-/mailcomposer-0.1.19.tgz\nnpm http 200 https://registry.npmjs.org/redis/0.7.2\nnpm http GET https://registry.npmjs.org/redis/-/redis-0.7.2.tgz\nnpm http 200 https://registry.npmjs.org/yamlparser/-/yamlparser-0.0.2.tgz\nnpm http 200 https://registry.npmjs.org/semver/-/semver-1.0.14.tgz\nnpm http 200 https://registry.npmjs.org/request/-/request-2.9.202.tgz\nnpm http 200 https://registry.npmjs.org/mime/-/mime-1.2.5.tgz\nnpm http 200 https://registry.npmjs.org/methods/-/methods-0.0.1.tgz\nnpm http 200 https://registry.npmjs.org/connect\nnpm http GET https://registry.npmjs.org/connect/-/connect-1.9.2.tgz\nnpm WARN package.json methods@0.0.1 No README.md file found!\nnpm http 200 https://registry.npmjs.org/keypress/-/keypress-0.1.0.tgz\nnpm http 200 https://registry.npmjs.org/googlemaps/-/googlemaps-0.1.7.tgz\nnpm http 200 https://registry.npmjs.org/cookiejar/-/cookiejar-1.3.0.tgz\nnpm http 200 https://registry.npmjs.org/qs/-/qs-0.4.2.tgz\nnpm http 200 https://registry.npmjs.org/emitter-component/-/emitter-component-0.0.1.tgz\nnpm http 200 https://registry.npmjs.org/mime/-/mime-1.2.4.tgz\nnpm http 200 https://registry.npmjs.org/formidable/-/formidable-1.0.9.tgz\nnpm http 200 https://registry.npmjs.org/mkdirp/-/mkdirp-0.3.0.tgz\nnpm http 200 https://registry.npmjs.org/optimist/-/optimist-0.3.4.tgz\nnpm http GET https://registry.npmjs.org/request\nnpm http GET https://registry.npmjs.org/waitress\nnpm http 200 https://registry.npmjs.org/socket.io-client/-/socket.io-client-0.9.10.tgz\nnpm http 200 https://registry.npmjs.org/policyfile/-/policyfile-0.0.4.tgz\nnpm http 200 https://registry.npmjs.org/detective/-/detective-0.2.1.tgz\nnpm http 200 https://registry.npmjs.org/simplesmtp\nnpm http GET https://registry.npmjs.org/simplesmtp/-/simplesmtp-0.1.21.tgz\nnpm http 200 https://registry.npmjs.org/findit/-/findit-0.1.2.tgz\nnpm http 200 https://registry.npmjs.org/mkdirp/-/mkdirp-0.3.4.tgz\nnpm http 200 https://registry.npmjs.org/mailcomposer/-/mailcomposer-0.1.19.tgz\nnpm WARN excluding symbolic link test/symlinks/dir1/dangling-symlink -> does-not-exist\nnpm http 200 https://registry.npmjs.org/redis/-/redis-0.7.2.tgz\nnpm http 200 https://registry.npmjs.org/connect/-/connect-1.9.2.tgz\nnpm http GET https://registry.npmjs.org/esprima\nnpm http GET https://registry.npmjs.org/seq\nnpm http 200 https://registry.npmjs.org/simplesmtp/-/simplesmtp-0.1.21.tgz\nnpm http 200 https://registry.npmjs.org/waitress\nnpm http GET https://registry.npmjs.org/waitress/-/waitress-0.1.2.tgz\nnpm http GET https://registry.npmjs.org/wordwrap\nnpm http GET https://registry.npmjs.org/rai\nnpm http GET https://registry.npmjs.org/mimelib\nnpm http 200 https://registry.npmjs.org/esprima\nnpm http GET https://registry.npmjs.org/esprima/-/esprima-0.9.9.tgz\nnpm http 200 https://registry.npmjs.org/waitress/-/waitress-0.1.2.tgz\nnpm http 200 https://registry.npmjs.org/seq\nnpm http GET https://registry.npmjs.org/seq/-/seq-0.3.5.tgz\nnpm WARN package.json connect@1.9.2 No README.md file found!\nnpm http GET https://registry.npmjs.org/formidable\nnpm http 200 https://registry.npmjs.org/wordwrap\nnpm http GET https://registry.npmjs.org/wordwrap/-/wordwrap-0.0.2.tgz\nnpm http 200 https://registry.npmjs.org/rai\nnpm http GET https://registry.npmjs.org/rai/-/rai-0.1.6.tgz\nnpm http 200 https://registry.npmjs.org/esprima/-/esprima-0.9.9.tgz\nnpm http 200 https://registry.npmjs.org/seq/-/seq-0.3.5.tgz\nnpm http 200 https://registry.npmjs.org/request\nnpm http GET https://registry.npmjs.org/request/-/request-2.2.9.tgz\nnpm http 200 https://registry.npmjs.org/mimelib\nnpm http GET https://registry.npmjs.org/mimelib/-/mimelib-0.2.4.tgz\nnpm http 200 https://registry.npmjs.org/wordwrap/-/wordwrap-0.0.2.tgz\nnpm http GET https://registry.npmjs.org/chainsaw\nnpm http GET https://registry.npmjs.org/hashish\nnpm http 200 https://registry.npmjs.org/rai/-/rai-0.1.6.tgz\nnpm http 200 https://registry.npmjs.org/request/-/request-2.2.9.tgz\nnpm http 200 https://registry.npmjs.org/formidable\nnpm http GET https://registry.npmjs.org/formidable/-/formidable-1.0.11.tgz\nnpm http 200 https://registry.npmjs.org/mimelib/-/mimelib-0.2.4.tgz\nnpm http 200 https://registry.npmjs.org/chainsaw\nnpm http GET https://registry.npmjs.org/chainsaw/-/chainsaw-0.0.9.tgz\nnpm http 200 https://registry.npmjs.org/hashish\nnpm http GET https://registry.npmjs.org/hashish/-/hashish-0.0.4.tgz\nnpm http 200 https://registry.npmjs.org/formidable/-/formidable-1.0.11.tgz\nnpm http 200 https://registry.npmjs.org/chainsaw/-/chainsaw-0.0.9.tgz\nnpm http 200 https://registry.npmjs.org/hashish/-/hashish-0.0.4.tgz\nnpm http GET https://registry.npmjs.org/traverse\nnpm http GET https://registry.npmjs.org/traverse\nnpm http 200 https://registry.npmjs.org/traverse\nnpm http GET https://registry.npmjs.org/traverse/-/traverse-0.6.3.tgz\nnpm http GET https://registry.npmjs.org/encoding\nnpm http GET https://registry.npmjs.org/addressparser\nnpm http 200 https://registry.npmjs.org/traverse\nnpm http GET https://registry.npmjs.org/traverse/-/traverse-0.3.9.tgz\nnpm http 200 https://registry.npmjs.org/addressparser\nnpm http GET https://registry.npmjs.org/addressparser/-/addressparser-0.1.1.tgz\nnpm http 200 https://registry.npmjs.org/traverse/-/traverse-0.3.9.tgz\nnpm http 200 https://registry.npmjs.org/traverse/-/traverse-0.6.3.tgz\nnpm http 200 https://registry.npmjs.org/addressparser/-/addressparser-0.1.1.tgz\nnpm http 200 https://registry.npmjs.org/encoding\nnpm http GET https://registry.npmjs.org/encoding/-/encoding-0.1.3.tgz\nnpm http 200 https://registry.npmjs.org/encoding/-/encoding-0.1.3.tgz\nnpm http GET https://registry.npmjs.org/iconv-lite\nnpm http GET https://registry.npmjs.org/iconv\nnpm http 200 https://registry.npmjs.org/iconv-lite\nnpm http 200 https://registry.npmjs.org/iconv\nnpm http GET https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.2.5.tgz\nnpm http GET https://registry.npmjs.org/iconv/-/iconv-1.2.3.tgz\nnpm http 200 https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.2.5.tgz\nnpm http 200 https://registry.npmjs.org/iconv/-/iconv-1.2.3.tgz\nnpm http GET https://registry.npmjs.org/hiredis\nnpm http GET https://registry.npmjs.org/uglify-js/1.2.5\nnpm http GET https://registry.npmjs.org/ws\nnpm http GET https://registry.npmjs.org/xmlhttprequest/1.4.2\nnpm http GET https://registry.npmjs.org/active-x-obfuscator/0.0.1\nnpm http 200 https://registry.npmjs.org/hiredis\nnpm http GET https://registry.npmjs.org/hiredis/-/hiredis-0.1.14.tgz\nnpm http 200 https://registry.npmjs.org/uglify-js/1.2.5\nnpm http GET https://registry.npmjs.org/uglify-js/-/uglify-js-1.2.5.tgz\nnpm http 200 https://registry.npmjs.org/xmlhttprequest/1.4.2\nnpm http GET https://registry.npmjs.org/xmlhttprequest/-/xmlhttprequest-1.4.2.tgz\nnpm http 200 https://registry.npmjs.org/active-x-obfuscator/0.0.1\nnpm http GET https://registry.npmjs.org/active-x-obfuscator/-/active-x-obfuscator-0.0.1.tgz\nnpm http 200 https://registry.npmjs.org/hiredis/-/hiredis-0.1.14.tgz\nnpm http 200 https://registry.npmjs.org/uglify-js/-/uglify-js-1.2.5.tgz\nnpm http 200 https://registry.npmjs.org/xmlhttprequest/-/xmlhttprequest-1.4.2.tgz\nnpm http 200 https://registry.npmjs.org/active-x-obfuscator/-/active-x-obfuscator-0.0.1.tgz\nnpm http 200 https://registry.npmjs.org/ws\nnpm http GET https://registry.npmjs.org/ws/-/ws-0.4.21.tgz\nnpm WARN package.json hiredis@0.1.14 No README.md file found!\n\nhiredis@0.1.14 preinstall /home/imagdy/local/lib/node_modules/tower/node_modules/socket.io/node_modules/redis/node_mod\nules/hiredis\nmake || gmake\n\ncd deps/hiredis && make static\nmake[1]: Entering directory /home/imagdy/local/lib/node_modules/tower/node_modules/socket.io/node_modules/redis/node_mo\ndules/hiredis/deps/hiredis'\ncc -std=c99 -pedantic -c -O3 -fPIC  -Wall -W -Wstrict-prototypes -Wwrite-strings -g -ggdb net.c\ncc -std=c99 -pedantic -c -O3 -fPIC  -Wall -W -Wstrict-prototypes -Wwrite-strings -g -ggdb hiredis.c\nnpm http 200 https://registry.npmjs.org/ws/-/ws-0.4.21.tgz\ncc -std=c99 -pedantic -c -O3 -fPIC  -Wall -W -Wstrict-prototypes -Wwrite-strings -g -ggdb sds.c\ncc -std=c99 -pedantic -c -O3 -fPIC  -Wall -W -Wstrict-prototypes -Wwrite-strings -g -ggdb async.c\nar rcs libhiredis.a net.o hiredis.o sds.o async.o\nmake[1]: Leaving directory/home/imagdy/local/lib/node_modules/tower/node_modules/socket.io/node_modules/redis/node_mod\nules/hiredis/deps/hiredis'\nnode-waf configure build\nSetting srcdir to                        : /home/imagdy/local/lib/node_modules/tower/node_modules/socket.io/node_modules\n/redis/node_modules/hiredis\nSetting blddir to                        : /home/imagdy/local/lib/node_modules/tower/node_modules/socket.io/node_modules\n/redis/node_modules/hiredis/build\nChecking for program g++ or c++          : /usr/bin/g++\nChecking for program cpp                 : /usr/bin/cpp\nChecking for program ar                  : /usr/bin/ar\nChecking for program ranlib              : /usr/bin/ranlib\nChecking for g++                         : ok\nChecking for node path                   : not found\nChecking for node prefix                 : ok /home/imagdy/local\n'configure' finished successfully (0.072s)\nWaf: Entering directory /home/imagdy/local/lib/node_modules/tower/node_modules/socket.io/node_modules/redis/node_module\ns/hiredis/build'\n[1/3] cxx: hiredis.cc -> build/Release/hiredis_1.o\n[2/3] cxx: reader.cc -> build/Release/reader_1.o\n[3/3] cxx_link: build/Release/hiredis_1.o build/Release/reader_1.o -> build/Release/hiredis.node\nWaf: Leaving directory/home/imagdy/local/lib/node_modules/tower/node_modules/socket.io/node_modules/redis/node_modules\n/hiredis/build'\n'build' finished successfully (1.980s)\nnpm http GET https://registry.npmjs.org/zeparser/0.0.5\nnpm http GET https://registry.npmjs.org/tinycolor\nnpm http GET https://registry.npmjs.org/commander\nnpm http GET https://registry.npmjs.org/options\nnpm http 304 https://registry.npmjs.org/commander\nnpm http GET https://registry.npmjs.org/commander/-/commander-0.6.1.tgz\nnpm http 200 https://registry.npmjs.org/zeparser/0.0.5\nnpm http GET https://registry.npmjs.org/zeparser/-/zeparser-0.0.5.tgz\nnpm http 200 https://registry.npmjs.org/tinycolor\nnpm http GET https://registry.npmjs.org/tinycolor/-/tinycolor-0.0.1.tgz\nnpm http 200 https://registry.npmjs.org/options\nnpm http GET https://registry.npmjs.org/options/-/options-0.0.3.tgz\nnpm http 200 https://registry.npmjs.org/commander/-/commander-0.6.1.tgz\nnpm http 200 https://registry.npmjs.org/zeparser/-/zeparser-0.0.5.tgz\nnpm http 200 https://registry.npmjs.org/tinycolor/-/tinycolor-0.0.1.tgz\nnpm http 200 https://registry.npmjs.org/options/-/options-0.0.3.tgz\n\nws@0.4.21 install /home/imagdy/local/lib/node_modules/tower/node_modules/socket.io/node_modules/socket.io-client/node_\nmodules/ws\nnode install.js\n\n[ws v0.4.21] Attempting to compile blazing fast native extensions.\n[ws v0.4.21] Native extension compilation successful!\n\niconv@1.2.3 install /home/imagdy/local/lib/node_modules/tower/node_modules/nodemailer/node_modules/mailcomposer/node_m\nodules/mimelib/node_modules/encoding/node_modules/iconv\nnode-gyp rebuild\n\nmake: Entering directory /home/imagdy/local/lib/node_modules/tower/node_modules/nodemailer/node_modules/mailcomposer/no\nde_modules/mimelib/node_modules/encoding/node_modules/iconv/build'\n  CC(target) Release/obj.target/iconv/deps/libiconv/libcharset/lib/localcharset.o\n  CC(target) Release/obj.target/iconv/deps/libiconv/lib/iconv.o\n  CXX(target) Release/obj.target/iconv/binding.o\n  SOLINK_MODULE(target) Release/obj.target/iconv.node\n  SOLINK_MODULE(target) Release/obj.target/iconv.node: Finished\n  COPY Release/iconv.node\nmake: Leaving directory/home/imagdy/local/lib/node_modules/tower/node_modules/nodemailer/node_modules/mailcomposer/nod\ne_modules/mimelib/node_modules/encoding/node_modules/iconv/build'\n/home/imagdy/local/bin/tower -> /home/imagdy/local/lib/node_modules/tower/bin/tower\n\ntower@0.4.1 postinstall /home/imagdy/local/lib/node_modules/tower\nnpm install git://github.com/viatropos/coffeecup.git git://github.com/viatropos/coffee-script.git --force\n\n/home/imagdy/local/bin/coffee -> /home/imagdy/local/lib/node_modules/coffee-script/bin/coffee\n/home/imagdy/local/bin/cake -> /home/imagdy/local/lib/node_modules/coffee-script/bin/cake\nnpm http GET https://registry.npmjs.org/optparse\nnpm http GET https://registry.npmjs.org/uglify-js\nnpm http GET https://registry.npmjs.org/stylus\nnpm http 200 https://registry.npmjs.org/optparse\nnpm http GET https://registry.npmjs.org/optparse/-/optparse-1.0.3.tgz\nnpm http 200 https://registry.npmjs.org/uglify-js\nnpm http GET https://registry.npmjs.org/uglify-js/-/uglify-js-1.3.3.tgz\nnpm http 200 https://registry.npmjs.org/stylus\nnpm http GET https://registry.npmjs.org/stylus/-/stylus-0.29.0.tgz\nnpm http 200 https://registry.npmjs.org/optparse/-/optparse-1.0.3.tgz\nnpm http 200 https://registry.npmjs.org/uglify-js/-/uglify-js-1.3.3.tgz\nnpm http 200 https://registry.npmjs.org/stylus/-/stylus-0.29.0.tgz\nnpm http GET https://registry.npmjs.org/cssom\nnpm http GET https://registry.npmjs.org/debug\nnpm http GET https://registry.npmjs.org/mkdirp\nnpm http 304 https://registry.npmjs.org/mkdirp\nnpm http GET https://registry.npmjs.org/mkdirp/-/mkdirp-0.3.4.tgz\nnpm http 200 https://registry.npmjs.org/debug\nnpm http GET https://registry.npmjs.org/debug/-/debug-0.7.0.tgz\nnpm http 200 https://registry.npmjs.org/cssom\nnpm http GET https://registry.npmjs.org/cssom/-/cssom-0.2.5.tgz\nnpm http 200 https://registry.npmjs.org/mkdirp/-/mkdirp-0.3.4.tgz\nnpm http 200 https://registry.npmjs.org/debug/-/debug-0.7.0.tgz\nnpm http 200 https://registry.npmjs.org/cssom/-/cssom-0.2.5.tgz\n/home/imagdy/local/bin/coffeecup -> /home/imagdy/local/lib/node_modules/coffeecup/bin/coffeecup\ncoffee-script@1.3.2 /home/imagdy/local/lib/node_modules/coffee-script\ncoffeecup@0.3.11 /home/imagdy/local/lib/node_modules/coffeecup\n\u251c\u2500\u2500 optparse@1.0.3\n\u251c\u2500\u2500 uglify-js@1.3.3\n\u2514\u2500\u2500 stylus@0.29.0 (debug@0.7.0, mkdirp@0.3.4, cssom@0.2.5)\ntower@0.4.1 /home/imagdy/local/lib/node_modules/tower\n\u251c\u2500\u2500 knox@0.0.11\n\u251c\u2500\u2500 ember-states-node@0.9.7-1-1\n\u251c\u2500\u2500 temp@0.4.0\n\u251c\u2500\u2500 inflection@1.2.3\n\u251c\u2500\u2500 underscore.logger@0.3.1\n\u251c\u2500\u2500 wrench@1.3.9\n\u251c\u2500\u2500 node-uuid@1.3.3\n\u251c\u2500\u2500 mime@1.2.7\n\u251c\u2500\u2500 async@0.1.22\n\u251c\u2500\u2500 URIjs@1.7.2\n\u251c\u2500\u2500 ember-runtime-node@0.9.7-1-1\n\u251c\u2500\u2500 ember-metal-node@0.9.7-1-1\n\u251c\u2500\u2500 validator@0.4.11\n\u251c\u2500\u2500 mint@0.3.5\n\u251c\u2500\u2500 ejs@0.8.2\n\u251c\u2500\u2500 underscore@1.3.3\n\u251c\u2500\u2500 underscore.string@2.2.0rc\n\u251c\u2500\u2500 qs@0.5.0\n\u251c\u2500\u2500 accounting@0.3.2\n\u251c\u2500\u2500 coffee-script@1.3.2\n\u251c\u2500\u2500 gm@1.4.2\n\u251c\u2500\u2500 moment@1.7.0\n\u251c\u2500\u2500 commander@1.0.4 (keypress@0.1.0)\n\u251c\u2500\u2500 useragent@1.1.0 (yamlparser@0.0.2, semver@1.0.14, request@2.9.202)\n\u251c\u2500\u2500 superagent@0.9.0 (methods@0.0.1, cookiejar@1.3.0, emitter-component@0.0.1, qs@0.4.2, mime@1.2.5, formidable@1.0.9)\n\u251c\u2500\u2500 geolib@1.1.8 (googlemaps@0.1.7)\n\u251c\u2500\u2500 express@2.5.11 (qs@0.4.2, mime@1.2.4, mkdirp@0.3.0, connect@1.9.2)\n\u251c\u2500\u2500 pathfinder@0.3.0-1 (mkdirp@0.3.4, findit@0.1.2, detective@0.2.1)\n\u251c\u2500\u2500 socket.io@0.9.10 (policyfile@0.0.4, redis@0.7.2, socket.io-client@0.9.10)\n\u2514\u2500\u2500 nodemailer@0.3.25 (optimist@0.3.4, simplesmtp@0.1.21, mailcomposer@0.1.19)\nimagdy@imagdy:~/node-latest-install/node_modules$\nimagdy@imagdy:~/node-latest-install/node_modules$\nimagdy@imagdy:~/node-latest-install/node_modules$\nimagdy@imagdy:~/node-latest-install/node_modules$ tower\nmodule.js:340\n    throw err;\n          ^\nError: Cannot find module '../lib/tower'\n    at Function.Module._resolveFilename (module.js:338:15)\n    at Function.Module._load (module.js:280:25)\n    at Module.require (module.js:362:17)\n    at require (module.js:378:17)\n    at Object. (/home/imagdy/local/lib/node_modules/tower/bin/tower:2:1)\n    at Module._compile (module.js:449:26)\n    at Object.Module._extensions..js (module.js:467:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Module.runMain (module.js:492:10)\n. Using version v0.6.19 I'll try to upgrade to the current version and update you. Thanks :+1: \n. Wow! this fixed the problem!! :):):)\n. Thank you!\n. ",
    "RickCarlino": "@viatropos Truth be told, I am only now just starting with node (Tower is my first hands on experience with node). Do you mean if git is installed on the system? Or a git dependency for node? Git is installed on this system, but I havent touched anything on node hardly outside of installing coffeescript and npm etc.\n. @viatropos Truth be told, I am only now just starting with node (Tower is my first hands on experience with node). Do you mean if git is installed on the system? Or a git dependency for node? Git is installed on this system, but I havent touched anything on node hardly outside of installing coffeescript and npm etc.\n. ",
    "ghost": "same on Mac OS X\n```\nnpm ERR! Error: EACCES, open '/Users/gregor/.npm/e18f6569-thub-com-viatropos-coffeecup-git.lock'\nnpm ERR!  { [Error: EACCES, open '/Users/gregor/.npm/e18f6569-thub-com-viatropos-coffeecup-git.lock']\nnpm ERR!   errno: 3,\nnpm ERR!   code: 'EACCES',\nnpm ERR!   path: '/Users/gregor/.npm/e18f6569-thub-com-viatropos-coffeecup-git.lock' }\nnpm ERR! \nnpm ERR! Please try running this command again as root/Administrator.\nnpm ERR! System Darwin 11.4.0\nnpm ERR! command \"node\" \"/usr/local/bin/npm\" \"install\" \"git://github.com/viatropos/coffeecup.git\" \"--force\"\nnpm ERR! cwd /usr/local/lib/node_modules/tower\nnpm ERR! node -v v0.8.8\nnpm ERR! npm -v 1.1.59\nnpm ERR! path /Users/gregor/.npm/e18f6569-thub-com-viatropos-coffeecup-git.lock\nnpm ERR! code EACCES\nnpm ERR! errno 3\nnpm ERR! stack Error: EACCES, open '/Users/gregor/.npm/e18f6569-thub-com-viatropos-coffeecup-git.lock'\nnpm ERR! \nnpm ERR! Additional logging details can be found in:\nnpm ERR!     /usr/local/lib/node_modules/tower/npm-debug.log\nnpm ERR! not ok code 0\nnpm ERR! tower@0.4.1 postinstall: npm install git://github.com/viatropos/coffeecup.git --force && npm install git://github.com/viatropos/coffee-script.git --force\nnpm ERR! sh \"-c\" \"npm install git://github.com/viatropos/coffeecup.git --force && npm install git://github.com/viatropos/coffee-script.git --force\" failed with 3\nnpm ERR! \nnpm ERR! Failed at the tower@0.4.1 postinstall script.\nnpm ERR! This is most likely a problem with the tower package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     npm install git://github.com/viatropos/coffeecup.git --force && npm install git://github.com/viatropos/coffee-script.git --force\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls tower\nnpm ERR! There is likely additional logging output above.\nnpm ERR! System Darwin 11.4.0\nnpm ERR! command \"node\" \"/usr/local/bin/npm\" \"install\" \"-g\" \"tower\"\nnpm ERR! cwd /Users/gregor/projects/netbreeze/summary\nnpm ERR! node -v v0.8.8\nnpm ERR! npm -v 1.1.59\nnpm ERR! code ELIFECYCLE\nnpm ERR! \nnpm ERR! Additional logging details can be found in:\nnpm ERR!     /Users/gregor/projects/netbreeze/summary/npm-debug.log\nnpm ERR! not ok code 0\n```\n. @edubkendo i tried with a bash in root mode, but its still failing. i'm not sure why is it failing then.\n@j-mcnally not sure about your questions direction. my call was with sudo (su is not working on mac os)\n. @viatropos not for me. i have git installed, its definitly not that, as you can see in the error message:\nnpm ERR! \nnpm ERR! Please try running this command again as root/Administrator.\nthere is not a \"cant find command git\"\n. @j-mcnally it's a preinstalled. git version 1.7.7.5 (Apple Git-26)\n. @viatropos @edubkendo i aggree. you definitly should get rid of custom deps. i'm wondering why you postinstall them via a call to npm instead of just place it in the package.json\nfor me, personally, i judge a tool already on installing. if it fails, or need to do more than just one or two simple calls, it big minus. may be it's too hard, but thats my philosophy about software, you should never have to fight it.\n. @viatropos another fail:\n```\nnpm ERR! Error: EACCES, open '/Users/gregor/.npm/bcdf6e5f-ejs.lock'\nnpm ERR!  { [Error: EACCES, open '/Users/gregor/.npm/bcdf6e5f-ejs.lock']\nnpm ERR!   errno: 3,\nnpm ERR!   code: 'EACCES',\nnpm ERR!   path: '/Users/gregor/.npm/bcdf6e5f-ejs.lock' }\nnpm ERR! \nnpm ERR! Please try running this command again as root/Administrator.\nnpm ERR! System Darwin 11.4.0\nnpm ERR! command \"node\" \"/usr/local/bin/npm\" \"install\" \"ejs\"\nnpm ERR! cwd /usr/local/lib/node_modules/tower\nnpm ERR! node -v v0.8.9\nnpm ERR! npm -v 1.1.61\nnpm ERR! path /Users/gregor/.npm/bcdf6e5f-ejs.lock\nnpm ERR! code EACCES\nnpm ERR! errno 3\nnpm ERR! stack Error: EACCES, open '/Users/gregor/.npm/bcdf6e5f-ejs.lock'\nnpm ERR! \nnpm ERR! Additional logging details can be found in:\nnpm ERR!     /usr/local/lib/node_modules/tower/npm-debug.log\nnpm ERR! not ok code 0\nnpm ERR! tower@0.4.2-pree postinstall: $(./bin/dependencies)\nnpm ERR! sh \"-c\" \"$(./bin/dependencies)\" failed with 3\nnpm ERR! \nnpm ERR! Failed at the tower@0.4.2-pree postinstall script.\nnpm ERR! This is most likely a problem with the tower package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     $(./bin/dependencies)\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls tower\nnpm ERR! There is likely additional logging output above.\nnpm ERR! System Darwin 11.4.0\nnpm ERR! command \"node\" \"/usr/local/bin/npm\" \"install\" \"tower\" \"-g\"\nnpm ERR! cwd /Users/gregor/projects/netbreeze/summary/TopicSummary\nnpm ERR! node -v v0.8.9\nnpm ERR! npm -v 1.1.61\nnpm ERR! code ELIFECYCLE\nnpm ERR! \nnpm ERR! Additional logging details can be found in:\nnpm ERR!     /Users/gregor/projects/netbreeze/summary/TopicSummary/npm-debug.log\nnpm ERR! not ok code 0\n```\n. @viatropos i installed node via macos installer\n0.4.2-1 installation worked\ndunno about piping in osx :)\n. @viatropos yes, the installer worked under root permissions to access global folders to place aliasses and so on. i always sudo -g installs, i did it with the 0.4.2-pre also.\nwell, i never needed homebrew before :) \n. uh, and i wonder about centos installation. @SwarmShepherd  is it fixed?\n. yes, always\n. well if that so, than the macos installer should take care of it also, should'nt it? :)\n. Still experiencing this issue, installed grunt -g before running cake watch but \nroot@ps:/home/me/app# cake watch\n/home/me/app/node_modules/which/which.js:83\n  throw new Error(\"not found: \"+cmd)\n        ^\nError: not found: grunt\n    at whichSync (/home/me/app/node_modules/which/which.js:83:9)\n    at spawnGrunt (/home/me/app/Cakefile:20:13)\n    at Object.Tower.ApplicationAssets.bundle.minify as action\n    at helpers.extend.invoke (/usr/local/lib/node_modules/coffee-script/lib/coffee-script/cake.js:44:26)\n    at Object.exports.run (/usr/local/lib/node_modules/coffee-script/lib/coffee-script/cake.js:69:21)\n    at Object. (/usr/local/lib/node_modules/coffee-script/bin/cake:7:38)\n    at Module._compile (module.js:456:26)\n    at Object.Module._extensions..js (module.js:474:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Module.runMain (module.js:497:10)\n    at process._tickCallback (node.js:427:13)\n. pretty much abandoned towerjs because I could not get started even using the solutions listed here and the outdated documentation. Maybe when 0.5.0 comes out I'll have a look but if you hadn't noticed Towerjs is not the only kid on the block.\n. still doesn't work after running npm install -g grunt\n. how do I do that?\n. ^Croot@ps:/home/me/app# cake watch\nDefault database not set, using Memory store\nRunning \"copy:stylesheets\" (copy) task\nCopied 2 files.\nRunning \"copy:javascripts\" (copy) task\nCopied 34 files.\nRunning \"copy:images\" (copy) task\nCopied 0 files.\nRunning \"coffee:compile\" (coffee) task\nRunning \"less:bootstrap\" (less) task\nTypeError: Object # has no method 'options'\n    at Object. (/home/me/app/node_modules/grunt-contrib-less/tasks/less.js:24:24)\n    at Object. (/usr/local/lib/node_modules/grunt/lib/grunt/task.js:109:15)\n    at Object.thisTask.fn (/usr/local/lib/node_modules/grunt/lib/grunt/task.js:58:16)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:343:36)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:319:9)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:346:11)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:319:9)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:346:11)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:319:9)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:346:11)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:319:9)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:346:11)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:319:9)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:346:11)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:319:9)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:346:11)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:319:9)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:346:11)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:319:9)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:346:11)\n    at Task.start (/usr/local/lib/node_modules/grunt/lib/util/task.js:359:5)\n    at Object.grunt.tasks (/usr/local/lib/node_modules/grunt/lib/grunt.js:143:8)\n    at Object.module.exports as cli\n    at Object. (/usr/local/lib/node_modules/grunt/bin/grunt:19:14)\n    at Module._compile (module.js:456:26)\n    at Object.Module._extensions..js (module.js:474:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Module.runMain (module.js:497:10)\n    at process._tickCallback (node.js:427:13)\nroot@ps:/home/me/app#\n. I think these things should make it to the website tutorial guide, I nearly abandoned Tower.js out of frustration because of this issue but I really want to make this work, it looks like a very promising but these little quirks definitely need to be ironed out if it wants to gain traction of continued users and it's maturity.\n. Thank you, and once again I really want Tower.js to thrive and I might have sounded blunt but there was no other way to put it. I'm glad it's already being looked at, I apologize I've been awake for the past 48 hours trying out various frameworks to no avail. I've really drawn the line at CompoundJS and Tower.js and leaning towards the latter.\nI digress, I am going to look at this tomorrow..any temporary work around?\nwhen is 0.5.0 coming out? I see there was a thread a month ago about it.\nThanks again for your great work!\n. I think this is grunt specific so I will research my findings there and post back the solution.\nI look forward to 0.5.0, hopefully in the near future.\nCheers.\n. What was the last version of grunt reported working? I installed 0.3.9 and it throws that message.\n. I installed 0.3.3, it complains about grunt-contrib-less, upon attemping to install the latter, it asks for grunt 0.4.0....\nokay im going to bed for real now.\n. Some more information ....\nI've re-installed everything from scratch, including a new Ubuntu VM, new node.js install, new NPM install, again all the prerequisites, and then finally tower.js. Still getting the same \"No command 'tower' found ..\".\nSo, I've installed derby.js on the same machine. Worked 100% out the box, first time round.\nHas anyone else experienced the same issue?\nThanks!\n. @viatropos, yes I have installed tower and all the prerequisites as global.\n. @viatropos, ah now we're getting somewhere. I can execute the tower command now, but when trying to cerate a new app, I now get this message: \"Cookbook [app] not found.\".\n. @viatropos I've used the docs on towerjs.org. I'm going to try the cook-book install now, and will let you know.\n. @viatropos So, once I have installed the app-cookbook and created the component, should I be able to run tower new  without any issues?\n. @viatropos Awesome! Thanks for all the help. Where do I find the official docs for tower? Is it on towerjs.org?\n. same on Mac OS X\n```\nnpm ERR! Error: EACCES, open '/Users/gregor/.npm/e18f6569-thub-com-viatropos-coffeecup-git.lock'\nnpm ERR!  { [Error: EACCES, open '/Users/gregor/.npm/e18f6569-thub-com-viatropos-coffeecup-git.lock']\nnpm ERR!   errno: 3,\nnpm ERR!   code: 'EACCES',\nnpm ERR!   path: '/Users/gregor/.npm/e18f6569-thub-com-viatropos-coffeecup-git.lock' }\nnpm ERR! \nnpm ERR! Please try running this command again as root/Administrator.\nnpm ERR! System Darwin 11.4.0\nnpm ERR! command \"node\" \"/usr/local/bin/npm\" \"install\" \"git://github.com/viatropos/coffeecup.git\" \"--force\"\nnpm ERR! cwd /usr/local/lib/node_modules/tower\nnpm ERR! node -v v0.8.8\nnpm ERR! npm -v 1.1.59\nnpm ERR! path /Users/gregor/.npm/e18f6569-thub-com-viatropos-coffeecup-git.lock\nnpm ERR! code EACCES\nnpm ERR! errno 3\nnpm ERR! stack Error: EACCES, open '/Users/gregor/.npm/e18f6569-thub-com-viatropos-coffeecup-git.lock'\nnpm ERR! \nnpm ERR! Additional logging details can be found in:\nnpm ERR!     /usr/local/lib/node_modules/tower/npm-debug.log\nnpm ERR! not ok code 0\nnpm ERR! tower@0.4.1 postinstall: npm install git://github.com/viatropos/coffeecup.git --force && npm install git://github.com/viatropos/coffee-script.git --force\nnpm ERR! sh \"-c\" \"npm install git://github.com/viatropos/coffeecup.git --force && npm install git://github.com/viatropos/coffee-script.git --force\" failed with 3\nnpm ERR! \nnpm ERR! Failed at the tower@0.4.1 postinstall script.\nnpm ERR! This is most likely a problem with the tower package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     npm install git://github.com/viatropos/coffeecup.git --force && npm install git://github.com/viatropos/coffee-script.git --force\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls tower\nnpm ERR! There is likely additional logging output above.\nnpm ERR! System Darwin 11.4.0\nnpm ERR! command \"node\" \"/usr/local/bin/npm\" \"install\" \"-g\" \"tower\"\nnpm ERR! cwd /Users/gregor/projects/netbreeze/summary\nnpm ERR! node -v v0.8.8\nnpm ERR! npm -v 1.1.59\nnpm ERR! code ELIFECYCLE\nnpm ERR! \nnpm ERR! Additional logging details can be found in:\nnpm ERR!     /Users/gregor/projects/netbreeze/summary/npm-debug.log\nnpm ERR! not ok code 0\n```\n. @edubkendo i tried with a bash in root mode, but its still failing. i'm not sure why is it failing then.\n@j-mcnally not sure about your questions direction. my call was with sudo (su is not working on mac os)\n. @viatropos not for me. i have git installed, its definitly not that, as you can see in the error message:\nnpm ERR! \nnpm ERR! Please try running this command again as root/Administrator.\nthere is not a \"cant find command git\"\n. @j-mcnally it's a preinstalled. git version 1.7.7.5 (Apple Git-26)\n. @viatropos @edubkendo i aggree. you definitly should get rid of custom deps. i'm wondering why you postinstall them via a call to npm instead of just place it in the package.json\nfor me, personally, i judge a tool already on installing. if it fails, or need to do more than just one or two simple calls, it big minus. may be it's too hard, but thats my philosophy about software, you should never have to fight it.\n. @viatropos another fail:\n```\nnpm ERR! Error: EACCES, open '/Users/gregor/.npm/bcdf6e5f-ejs.lock'\nnpm ERR!  { [Error: EACCES, open '/Users/gregor/.npm/bcdf6e5f-ejs.lock']\nnpm ERR!   errno: 3,\nnpm ERR!   code: 'EACCES',\nnpm ERR!   path: '/Users/gregor/.npm/bcdf6e5f-ejs.lock' }\nnpm ERR! \nnpm ERR! Please try running this command again as root/Administrator.\nnpm ERR! System Darwin 11.4.0\nnpm ERR! command \"node\" \"/usr/local/bin/npm\" \"install\" \"ejs\"\nnpm ERR! cwd /usr/local/lib/node_modules/tower\nnpm ERR! node -v v0.8.9\nnpm ERR! npm -v 1.1.61\nnpm ERR! path /Users/gregor/.npm/bcdf6e5f-ejs.lock\nnpm ERR! code EACCES\nnpm ERR! errno 3\nnpm ERR! stack Error: EACCES, open '/Users/gregor/.npm/bcdf6e5f-ejs.lock'\nnpm ERR! \nnpm ERR! Additional logging details can be found in:\nnpm ERR!     /usr/local/lib/node_modules/tower/npm-debug.log\nnpm ERR! not ok code 0\nnpm ERR! tower@0.4.2-pree postinstall: $(./bin/dependencies)\nnpm ERR! sh \"-c\" \"$(./bin/dependencies)\" failed with 3\nnpm ERR! \nnpm ERR! Failed at the tower@0.4.2-pree postinstall script.\nnpm ERR! This is most likely a problem with the tower package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     $(./bin/dependencies)\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls tower\nnpm ERR! There is likely additional logging output above.\nnpm ERR! System Darwin 11.4.0\nnpm ERR! command \"node\" \"/usr/local/bin/npm\" \"install\" \"tower\" \"-g\"\nnpm ERR! cwd /Users/gregor/projects/netbreeze/summary/TopicSummary\nnpm ERR! node -v v0.8.9\nnpm ERR! npm -v 1.1.61\nnpm ERR! code ELIFECYCLE\nnpm ERR! \nnpm ERR! Additional logging details can be found in:\nnpm ERR!     /Users/gregor/projects/netbreeze/summary/TopicSummary/npm-debug.log\nnpm ERR! not ok code 0\n```\n. @viatropos i installed node via macos installer\n0.4.2-1 installation worked\ndunno about piping in osx :)\n. @viatropos yes, the installer worked under root permissions to access global folders to place aliasses and so on. i always sudo -g installs, i did it with the 0.4.2-pre also.\nwell, i never needed homebrew before :) \n. uh, and i wonder about centos installation. @SwarmShepherd  is it fixed?\n. yes, always\n. well if that so, than the macos installer should take care of it also, should'nt it? :)\n. Still experiencing this issue, installed grunt -g before running cake watch but \nroot@ps:/home/me/app# cake watch\n/home/me/app/node_modules/which/which.js:83\n  throw new Error(\"not found: \"+cmd)\n        ^\nError: not found: grunt\n    at whichSync (/home/me/app/node_modules/which/which.js:83:9)\n    at spawnGrunt (/home/me/app/Cakefile:20:13)\n    at Object.Tower.ApplicationAssets.bundle.minify as action\n    at helpers.extend.invoke (/usr/local/lib/node_modules/coffee-script/lib/coffee-script/cake.js:44:26)\n    at Object.exports.run (/usr/local/lib/node_modules/coffee-script/lib/coffee-script/cake.js:69:21)\n    at Object. (/usr/local/lib/node_modules/coffee-script/bin/cake:7:38)\n    at Module._compile (module.js:456:26)\n    at Object.Module._extensions..js (module.js:474:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Module.runMain (module.js:497:10)\n    at process._tickCallback (node.js:427:13)\n. pretty much abandoned towerjs because I could not get started even using the solutions listed here and the outdated documentation. Maybe when 0.5.0 comes out I'll have a look but if you hadn't noticed Towerjs is not the only kid on the block.\n. still doesn't work after running npm install -g grunt\n. how do I do that?\n. ^Croot@ps:/home/me/app# cake watch\nDefault database not set, using Memory store\nRunning \"copy:stylesheets\" (copy) task\nCopied 2 files.\nRunning \"copy:javascripts\" (copy) task\nCopied 34 files.\nRunning \"copy:images\" (copy) task\nCopied 0 files.\nRunning \"coffee:compile\" (coffee) task\nRunning \"less:bootstrap\" (less) task\nTypeError: Object # has no method 'options'\n    at Object. (/home/me/app/node_modules/grunt-contrib-less/tasks/less.js:24:24)\n    at Object. (/usr/local/lib/node_modules/grunt/lib/grunt/task.js:109:15)\n    at Object.thisTask.fn (/usr/local/lib/node_modules/grunt/lib/grunt/task.js:58:16)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:343:36)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:319:9)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:346:11)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:319:9)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:346:11)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:319:9)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:346:11)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:319:9)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:346:11)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:319:9)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:346:11)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:319:9)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:346:11)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:319:9)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:346:11)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:319:9)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:346:11)\n    at Task.start (/usr/local/lib/node_modules/grunt/lib/util/task.js:359:5)\n    at Object.grunt.tasks (/usr/local/lib/node_modules/grunt/lib/grunt.js:143:8)\n    at Object.module.exports as cli\n    at Object. (/usr/local/lib/node_modules/grunt/bin/grunt:19:14)\n    at Module._compile (module.js:456:26)\n    at Object.Module._extensions..js (module.js:474:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Module.runMain (module.js:497:10)\n    at process._tickCallback (node.js:427:13)\nroot@ps:/home/me/app#\n. I think these things should make it to the website tutorial guide, I nearly abandoned Tower.js out of frustration because of this issue but I really want to make this work, it looks like a very promising but these little quirks definitely need to be ironed out if it wants to gain traction of continued users and it's maturity.\n. Thank you, and once again I really want Tower.js to thrive and I might have sounded blunt but there was no other way to put it. I'm glad it's already being looked at, I apologize I've been awake for the past 48 hours trying out various frameworks to no avail. I've really drawn the line at CompoundJS and Tower.js and leaning towards the latter.\nI digress, I am going to look at this tomorrow..any temporary work around?\nwhen is 0.5.0 coming out? I see there was a thread a month ago about it.\nThanks again for your great work!\n. I think this is grunt specific so I will research my findings there and post back the solution.\nI look forward to 0.5.0, hopefully in the near future.\nCheers.\n. What was the last version of grunt reported working? I installed 0.3.9 and it throws that message.\n. I installed 0.3.3, it complains about grunt-contrib-less, upon attemping to install the latter, it asks for grunt 0.4.0....\nokay im going to bed for real now.\n. Some more information ....\nI've re-installed everything from scratch, including a new Ubuntu VM, new node.js install, new NPM install, again all the prerequisites, and then finally tower.js. Still getting the same \"No command 'tower' found ..\".\nSo, I've installed derby.js on the same machine. Worked 100% out the box, first time round.\nHas anyone else experienced the same issue?\nThanks!\n. @viatropos, yes I have installed tower and all the prerequisites as global.\n. @viatropos, ah now we're getting somewhere. I can execute the tower command now, but when trying to cerate a new app, I now get this message: \"Cookbook [app] not found.\".\n. @viatropos I've used the docs on towerjs.org. I'm going to try the cook-book install now, and will let you know.\n. @viatropos So, once I have installed the app-cookbook and created the component, should I be able to run tower new  without any issues?\n. @viatropos Awesome! Thanks for all the help. Where do I find the official docs for tower? Is it on towerjs.org?\n. ",
    "SwarmShepherd": "UPDATING NODEJS (via nvm -  builds from source) to -v 0.8.9  +  updating npm made a big difference.  Install is actually successful and starting the server is successful (now serving on port 3000 mssg) but then chokes and dies on a DB issue yet to be resolved.\nI had the (wrong?) 1st impression that HomeBrew is for OSX (only)- but will definitely grab for it next time I have issues like this.  Thanks for hints! \nAs a Ruby programmer I have been \"spoiled\" by a system of tools that have been changing much less rapidly in the last years.  Almost forgot what it was like in the earlier days.  \nIt will be a day to remember when Node hits 1.0.0  !\nThanks for all the thoughtful and useful comments...\n. UPDATING NODEJS (via nvm -  builds from source) to -v 0.8.9  +  updating npm made a big difference.  Install is actually successful and starting the server is successful (now serving on port 3000 mssg) but then chokes and dies on a DB issue yet to be resolved.\nI had the (wrong?) 1st impression that HomeBrew is for OSX (only)- but will definitely grab for it next time I have issues like this.  Thanks for hints! \nAs a Ruby programmer I have been \"spoiled\" by a system of tools that have been changing much less rapidly in the last years.  Almost forgot what it was like in the earlier days.  \nIt will be a day to remember when Node hits 1.0.0  !\nThanks for all the thoughtful and useful comments...\n. ",
    "kennu": "Does this issue mean that a Tower app cannot have a home page (at /)? I just tried to create a new app, and it doesn't show anything in the home page, except for the surrounding layouts. I.e. whatever I put in app/templates/shared/welcome.coffee is not shown.\n. I can confirm jridgway's solution. A generated virgin app starts working when you rm -rf node_modules, change the package.json coffee-script dependency to \"= 1.3.3\", and rerun npm install.\n. Does this issue mean that a Tower app cannot have a home page (at /)? I just tried to create a new app, and it doesn't show anything in the home page, except for the surrounding layouts. I.e. whatever I put in app/templates/shared/welcome.coffee is not shown.\n. I can confirm jridgway's solution. A generated virgin app starts working when you rm -rf node_modules, change the package.json coffee-script dependency to \"= 1.3.3\", and rerun npm install.\n. ",
    "ivoreis": "You are saying to create associations in the views? Something like rails_admin use to create their associations? \n. This  rails_admin feature is supported by the Ryan's nested_form and the core of this feature can be found here https://github.com/ryanb/nested_form/blob/master/lib/nested_form/builder_mixin.rb and already have a ruby support for formtastic (I think you use it in tower, maybe i'm wrong)\n. You are saying to create associations in the views? Something like rails_admin use to create their associations? \n. This  rails_admin feature is supported by the Ryan's nested_form and the core of this feature can be found here https://github.com/ryanb/nested_form/blob/master/lib/nested_form/builder_mixin.rb and already have a ruby support for formtastic (I think you use it in tower, maybe i'm wrong)\n. ",
    "denisos": "ulimit -n 1000   worked for me too..thanks!\n. ulimit -n 1000   worked for me too..thanks!\n. ",
    "sebv": "To set to 65536 do the following in ML:\nsudo sysctl -w kern.maxfiles=65536\nsudo ulimit -n 65536\nIt is reset with each reboot.\n. To set to 65536 do the following in ML:\nsudo sysctl -w kern.maxfiles=65536\nsudo ulimit -n 65536\nIt is reset with each reboot.\n. ",
    "yagooar": "I don't know if this is related to your pull request, but actually I have seen the code in the current master branch so I assume the bug may be also in the current npm version.\nThe thing is, I have just created two scaffolds for \"classic\" resources.\nThen, I needed a view which is unique, so I created the controller and the views. The thing is, this controller's name is singular:\nclass App.PlanController extends Tower.Controller\nIn my router, I have this:\n```\nTower.Route.draw ->\n@match '/plan', to: 'plan#index'\n@resources 'projects'\n# @match '(/*path)', to: 'application#index'\n  @match '/', to: 'application#welcome'\n```\nThen, I have the typical _navigation.coffee view which tries to display the routes for the controllers:\n```\na '{{action showRoot href=true}}', class: 'brand', -> t('title')\ndiv class: 'nav-collapse', ->\n  ul class: 'nav', ->\n    li '{{bindAttr class=\"App.planController.isActive:active\"}}', ->\n      a '{{action indexPlan href=true}}', t('links.plans')\n    li '{{bindAttr class=\"App.projectsController.isActive:active\"}}', ->\n      a '{{action indexProject href=true}}', t('links.projects')\n```\nAnd now, when I try to render the page, there is an error:\nError: assertion failed: You must specify a target state for event 'indexPlan' in order to link to it in the current state 'root.index'.\nAll other actions work if I comment out the affected line.\nThe question now is, how should I declare the action of the PlanController? I assumed I can have an index action only if it wasn't a really resource I am trying to connect to.\nIf there is a convention on have to call these actions, I'd like to find them somewhere, because it seems like a little bit \"voodoo magic\" to me right now.\nBTW: Thank you guys for what you are trying to achieve, this project really feels great and I'm putting my hopes in it. I come from the Rails world and this is so much fun, even if you aren't a coffee/javascript expert.\n. Thanks for the answer, @TheHydroImpulse. I think it would be enough to define more clearly the connection between Tower routes and Ember routes so that it is clear how they are translated to make a proper use of them in the views.\n. The error says that the io variable is undefined, thus why calling configure on it causes the error. Is it possible that the internal Tower API has changed and socket.io isn't defined under App.io anymore?\n. And another question, I want to deploy my app as soon as possible to get an idea about how \"production ready\" Tower actually is. Any recommendations on a hosting service that supports all the technology stack that Tower uses? It doesn't need to be free.\n. @TheHydroImpulse thanks for the recommendation. Yes I know AWS pretty well but I'm not a big fan of it because of the pricing / capability relation.\nDo you know AppFog? They offer PaaS on AWS and Rackspace. I have been using it for Ruby on Rails projects and it is just awesome. They also offer Node.js servers combined with their free option (which is pretty nice). It would be nice to figure out if Tower.js is possible on it (and document it), as it would invite people to check it out in the early days of the framework.\nStill, going back to my question, it would be nice if someone who knows more about the internals of Tower could take a look at the io configuration. Thank you for your help once again!\n. OK, next observation:\nIf you do\n``` coffeescript\nclass App.Foo extends Tower.Model\n  @field 'foo', type: 'String'\n@validates 'foo', length: { min: 1, max: 3 }\n```\nthen the validation only checks the \"min\" value, ignoring completely the max value. This is obviously a bug and should also be fixed. As I said before, I'll do it once there is a decision about the naming of the min(imum) and max(imum) keys.\n. OK so I have been pushing myself through the validation model and have tried to fix this issue. You can watch the changes I made at my fork:\nhttps://github.com/yagooar/tower/commit/0de69adc854168c5ffc3731e1e92df5709992260\nI have tried to make possible the following inside a model definition:\ncoffeescript\n@validates 'foo', length: { min: 1, max: 3 }\nThe main issue I discovered was at packages/tower-model/shared/validator.coffee:44\ncoffeescript\nif typeof name == 'object'\nIt seems that name is always a string, as it defines the type of validation itself, so the condition was always false.\nThen, I realized that actually this kind of definitions is unique amongst all other, because it includes actually two different validations: one for the minimum and one for the maximum value.\nSo I went one step back and changed the @createAll method so it can iterate over the elements of the hash and create more validators.\nEverything works fine, tests are green, buuuut... I have tried this in an application and the problem now is:\ncoffeescript\n@validates 'foo', length: { min: 2, max: 5 }\nWhen I try to persist a model with this validation, 2 things happen:\n-> If the attribute is too short, the validation works just fine, throwing an error\n-> If the attribute is too long, the validation doesn't work, it seems like the model was persisted, but then if you reload it, no changes have been actually done to the attribute.\nThis is far beyond my current knowledge about the framework, so I'm asking you guys for help finding why this happens and how we could fix it. Take a look at my commit or checkout my fork and try this out.\n. You're right, you can have more assertions in a single test, but only if there is a logical unit that justifies it.\nBack to the validation example, all validations are tested in one single file, which will probably grow over the time, so I think it is a good idea to start refactoring the test suit so that testing is more comfortable.\nStill, I know it's not priority no. 1, but let's keep it in the backlog.\n. This sounds great, I'm still trying to get into this \"brand new world\" of Node.js, so I want to start small and do fixes here and there so I get a better feeling of the Tower framework as a whole.\n. @viatropos thanks for the \"pattern\" tip, it sounds pretty good for now. @TheHydroImpulse commented he is working on some important internal changes that will affect the testing suite as well, so I'm looking forward to see it \"in action\".\n. I don't know if this is related to your pull request, but actually I have seen the code in the current master branch so I assume the bug may be also in the current npm version.\nThe thing is, I have just created two scaffolds for \"classic\" resources.\nThen, I needed a view which is unique, so I created the controller and the views. The thing is, this controller's name is singular:\nclass App.PlanController extends Tower.Controller\nIn my router, I have this:\n```\nTower.Route.draw ->\n@match '/plan', to: 'plan#index'\n@resources 'projects'\n# @match '(/*path)', to: 'application#index'\n  @match '/', to: 'application#welcome'\n```\nThen, I have the typical _navigation.coffee view which tries to display the routes for the controllers:\n```\na '{{action showRoot href=true}}', class: 'brand', -> t('title')\ndiv class: 'nav-collapse', ->\n  ul class: 'nav', ->\n    li '{{bindAttr class=\"App.planController.isActive:active\"}}', ->\n      a '{{action indexPlan href=true}}', t('links.plans')\n    li '{{bindAttr class=\"App.projectsController.isActive:active\"}}', ->\n      a '{{action indexProject href=true}}', t('links.projects')\n```\nAnd now, when I try to render the page, there is an error:\nError: assertion failed: You must specify a target state for event 'indexPlan' in order to link to it in the current state 'root.index'.\nAll other actions work if I comment out the affected line.\nThe question now is, how should I declare the action of the PlanController? I assumed I can have an index action only if it wasn't a really resource I am trying to connect to.\nIf there is a convention on have to call these actions, I'd like to find them somewhere, because it seems like a little bit \"voodoo magic\" to me right now.\nBTW: Thank you guys for what you are trying to achieve, this project really feels great and I'm putting my hopes in it. I come from the Rails world and this is so much fun, even if you aren't a coffee/javascript expert.\n. Thanks for the answer, @TheHydroImpulse. I think it would be enough to define more clearly the connection between Tower routes and Ember routes so that it is clear how they are translated to make a proper use of them in the views.\n. The error says that the io variable is undefined, thus why calling configure on it causes the error. Is it possible that the internal Tower API has changed and socket.io isn't defined under App.io anymore?\n. And another question, I want to deploy my app as soon as possible to get an idea about how \"production ready\" Tower actually is. Any recommendations on a hosting service that supports all the technology stack that Tower uses? It doesn't need to be free.\n. @TheHydroImpulse thanks for the recommendation. Yes I know AWS pretty well but I'm not a big fan of it because of the pricing / capability relation.\nDo you know AppFog? They offer PaaS on AWS and Rackspace. I have been using it for Ruby on Rails projects and it is just awesome. They also offer Node.js servers combined with their free option (which is pretty nice). It would be nice to figure out if Tower.js is possible on it (and document it), as it would invite people to check it out in the early days of the framework.\nStill, going back to my question, it would be nice if someone who knows more about the internals of Tower could take a look at the io configuration. Thank you for your help once again!\n. OK, next observation:\nIf you do\n``` coffeescript\nclass App.Foo extends Tower.Model\n  @field 'foo', type: 'String'\n@validates 'foo', length: { min: 1, max: 3 }\n```\nthen the validation only checks the \"min\" value, ignoring completely the max value. This is obviously a bug and should also be fixed. As I said before, I'll do it once there is a decision about the naming of the min(imum) and max(imum) keys.\n. OK so I have been pushing myself through the validation model and have tried to fix this issue. You can watch the changes I made at my fork:\nhttps://github.com/yagooar/tower/commit/0de69adc854168c5ffc3731e1e92df5709992260\nI have tried to make possible the following inside a model definition:\ncoffeescript\n@validates 'foo', length: { min: 1, max: 3 }\nThe main issue I discovered was at packages/tower-model/shared/validator.coffee:44\ncoffeescript\nif typeof name == 'object'\nIt seems that name is always a string, as it defines the type of validation itself, so the condition was always false.\nThen, I realized that actually this kind of definitions is unique amongst all other, because it includes actually two different validations: one for the minimum and one for the maximum value.\nSo I went one step back and changed the @createAll method so it can iterate over the elements of the hash and create more validators.\nEverything works fine, tests are green, buuuut... I have tried this in an application and the problem now is:\ncoffeescript\n@validates 'foo', length: { min: 2, max: 5 }\nWhen I try to persist a model with this validation, 2 things happen:\n-> If the attribute is too short, the validation works just fine, throwing an error\n-> If the attribute is too long, the validation doesn't work, it seems like the model was persisted, but then if you reload it, no changes have been actually done to the attribute.\nThis is far beyond my current knowledge about the framework, so I'm asking you guys for help finding why this happens and how we could fix it. Take a look at my commit or checkout my fork and try this out.\n. You're right, you can have more assertions in a single test, but only if there is a logical unit that justifies it.\nBack to the validation example, all validations are tested in one single file, which will probably grow over the time, so I think it is a good idea to start refactoring the test suit so that testing is more comfortable.\nStill, I know it's not priority no. 1, but let's keep it in the backlog.\n. This sounds great, I'm still trying to get into this \"brand new world\" of Node.js, so I want to start small and do fixes here and there so I get a better feeling of the Tower framework as a whole.\n. @viatropos thanks for the \"pattern\" tip, it sounds pretty good for now. @TheHydroImpulse commented he is working on some important internal changes that will affect the testing suite as well, so I'm looking forward to see it \"in action\".\n. ",
    "egeozcan": "I'd like to start a new weekend project with Tower.js sometime and I really dislike writing and (especially) reading coffee-script code. A JavaScript API would've been awesome. Do you have a timeline for finishing this? Are they any areas a \"JavaScript hacker\" would be able to help? =)\n. @TheHydroImpulse that sounds great, i'd sure give it a try when you finish. \n. I'd like to start a new weekend project with Tower.js sometime and I really dislike writing and (especially) reading coffee-script code. A JavaScript API would've been awesome. Do you have a timeline for finishing this? Are they any areas a \"JavaScript hacker\" would be able to help? =)\n. @TheHydroImpulse that sounds great, i'd sure give it a try when you finish. \n. ",
    "careo": "This is is exactly the use case for the cluster module (http://nodejs.org/api/cluster.html) in Node.js. It provides everything you'd need to manage a pool of workers, including some slick event support and hooks to automatically ensure the children are sharing the sockets.\nSadly, I don't think Node.js has a copy-on-write friendly GC, so the workers won't end up using all that much memory from the master.\n. Hm. Not so sure that issue was due to a failure in get() afterall. I can reproduce the issue now by simply failing to run npm install ....\n. For docs, would there be any value in using one of the automatic doc generators for JS? \nIs there anything for coffee like that? \n. This is is exactly the use case for the cluster module (http://nodejs.org/api/cluster.html) in Node.js. It provides everything you'd need to manage a pool of workers, including some slick event support and hooks to automatically ensure the children are sharing the sockets.\nSadly, I don't think Node.js has a copy-on-write friendly GC, so the workers won't end up using all that much memory from the master.\n. Hm. Not so sure that issue was due to a failure in get() afterall. I can reproduce the issue now by simply failing to run npm install ....\n. For docs, would there be any value in using one of the automatic doc generators for JS? \nIs there anything for coffee like that? \n. ",
    "onyxrev": "I've been following this conversation since trying to put something together with the new ember integration.  Some clarification on how the templates would be useful to produce server-generated HTML would be helpful.  \nMy main beef with this arrangement is purely the number of places one has to go to get something to render in the browser when one adds an action.  You need to modify the server controller, possibly the client controller, the routes, make a view, and make a template.  That's a lot of things!  This could potentially be alleviated by an action generator, but that doesn't solve the maintenance burden, just the initial burden of touching the files.\nIs there any way for Tower to infer the Ember view from the template?  Each ember client view seems awfully boilerplate.  I'll admit I don't know a lot about Ember in particular, but I don't see those needing much customization.  So maybe we can apply some convention and do away with the client view files?\n. I've been following this conversation since trying to put something together with the new ember integration.  Some clarification on how the templates would be useful to produce server-generated HTML would be helpful.  \nMy main beef with this arrangement is purely the number of places one has to go to get something to render in the browser when one adds an action.  You need to modify the server controller, possibly the client controller, the routes, make a view, and make a template.  That's a lot of things!  This could potentially be alleviated by an action generator, but that doesn't solve the maintenance burden, just the initial burden of touching the files.\nIs there any way for Tower to infer the Ember view from the template?  Each ember client view seems awfully boilerplate.  I'll admit I don't know a lot about Ember in particular, but I don't see those needing much customization.  So maybe we can apply some convention and do away with the client view files?\n. ",
    "PhilAndrew": "I think that being restricted to Ember is one reason that people might pass this project on.\n. Yes I don't actually know how TowerJS uses Ember, except that I enjoyed programming in AngularJS on the client side and came to the decision that AngularJS is really really god.\n. I want to ask, does this use Ember on the client side? or is it using Ember somehow on the server side? Also I don't understand how its using Ember. My problem is, what if I start to want to use AngularJS on the client side which I have used for other projects, is this going to be incompatible with this project? \nLets say I want to set up some bindings with AngularJS form and a model,... is it going to work? I guess I can just try and see or look at your source code, but if you give me any hints its good .. thanks, Philip\n. I see. I looked at the source code and also see that its closely tied with Ember. Maybe I will just compromise and use Ember instead of AngularJS, even though I enjoyed working with AngularJS.\n. Hi, yes, well - my comments are out of scope of this issue but I think from what I read in TowerJS it fits what I want, I like CoffeeKup, Coffeescript, the code looks good, concise. I don't see any problem yet apart from this issue from a choice point of view regarding these ... but from a practical point of view, EmberJS will get the job done anyhow.\nTowerJS needs some improvements, the website needs to be more cool and attractive, right now it looks very ordinary. This is a psychological issue, sales issue, first impressions do count. Also needs a video on the homepage as the sales pitch and simple explanation that can be understood in 5 minutes. People are busy comparing these JS frameworks and trying to work out what to use for their project, like myself.\nPlease integrate with Yeoman http://yeoman.io/. Also I don't want Twitter Bootstrap, I want Foundation CSS.\n. AngularJS vs Ember, I don't know which is better except that I was successful with AngularJS, however it seems Ember can do everything AngularJS can do, at least in the area of what I want, so I shouldn't worry.\n. I think that being restricted to Ember is one reason that people might pass this project on.\n. Yes I don't actually know how TowerJS uses Ember, except that I enjoyed programming in AngularJS on the client side and came to the decision that AngularJS is really really god.\n. I want to ask, does this use Ember on the client side? or is it using Ember somehow on the server side? Also I don't understand how its using Ember. My problem is, what if I start to want to use AngularJS on the client side which I have used for other projects, is this going to be incompatible with this project? \nLets say I want to set up some bindings with AngularJS form and a model,... is it going to work? I guess I can just try and see or look at your source code, but if you give me any hints its good .. thanks, Philip\n. I see. I looked at the source code and also see that its closely tied with Ember. Maybe I will just compromise and use Ember instead of AngularJS, even though I enjoyed working with AngularJS.\n. Hi, yes, well - my comments are out of scope of this issue but I think from what I read in TowerJS it fits what I want, I like CoffeeKup, Coffeescript, the code looks good, concise. I don't see any problem yet apart from this issue from a choice point of view regarding these ... but from a practical point of view, EmberJS will get the job done anyhow.\nTowerJS needs some improvements, the website needs to be more cool and attractive, right now it looks very ordinary. This is a psychological issue, sales issue, first impressions do count. Also needs a video on the homepage as the sales pitch and simple explanation that can be understood in 5 minutes. People are busy comparing these JS frameworks and trying to work out what to use for their project, like myself.\nPlease integrate with Yeoman http://yeoman.io/. Also I don't want Twitter Bootstrap, I want Foundation CSS.\n. AngularJS vs Ember, I don't know which is better except that I was successful with AngularJS, however it seems Ember can do everything AngularJS can do, at least in the area of what I want, so I shouldn't worry.\n. ",
    "ginsent": "@viatropos Lance, you do an amazing job, thousands of people are constantly checking for updates of tower.js. Another thousands of people, those who on windows, are constantly coming back to see if it started working on their computers. I can tell you, that once it does, I'll probably quit django, and most likely stop watching mojito.\nAnd no, your latest changes to the master didn't work for me yet. \n. @TheHydroImpulse Hi, Daniel! \nI've just run npm install tower -g and got the same problem as the topic starter rickick had: \nC:\\Users\\flyer\\nodist\\bin\\tower -> C:\\Users\\flyer\\nodist\\bin\\node_modules\\tower\\\nbin\\tower\n\ntower@0.4.2-4 postinstall C:\\Users\\flyer\\nodist\\bin\\node_modules\\tower\n$(./bin/dependencies)\n\n\"$\" \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0439 \u0438\u043b\u0438 \u0432\u043d\u0435\u0448\u043d\u0435\u0439\n\u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439, \u0438\u0441\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043e\u0439 \u0438\u043b\u0438 \u043f\u0430\u043a\u0435\u0442\u043d\u044b\u043c \u0444\u0430\u0439\u043b\u043e\u043c.\nnpm ERR! tower@0.4.2-4 postinstall: $(./bin/dependencies)\nnpm ERR! cmd \"/c\" \"$(./bin/dependencies)\" failed with 1\nnpm ERR!\nnpm ERR! Failed at the tower@0.4.2-4 postinstall script.\nnpm ERR! This is most likely a problem with the tower package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     $(./bin/dependencies)\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls tower\nnpm ERR! There is likely additional logging output above.\nnpm ERR! System Windows_NT 6.1.7600\nnpm ERR! command \"C:\\Users\\flyer\\nodist\\bin\\..\\node.exe\" \"C:\\Users\\fly\ner\\nodist\\bin\\node_modules\\npm\\cli.js\" \"install\" \"tower\" \"-g\"\nnpm ERR! cwd C:\\Users\\flyer\nnpm ERR! node -v v0.8.9\nnpm ERR! npm -v 1.1.59\nnpm ERR! code ELIFECYCLE\nnpm ERR!\nnpm ERR! Additional logging details can be found in:\nnpm ERR!     C:\\Users\\flyer\\npm-debug.log\nnpm ERR! not ok code 0\n. The way, described by TheHydroImpulse works. You've got to install make for windows http://gnuwin32.sourceforge.net/packages/make.htm before running \"make install\". \n. Okay, this is what I get after npm link: \n```\nC:\\tower>npm link\n\ntower@0.4.2-4 postinstall C:\\tower\nmake install-dependencies\n\nprocess_begin: CreateProcess(NULL, env node C:\\tower\\bin\\dependencies, ...) failed.\nmake: `install-dependencies' \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f. (in English: \"doesn't require update\")\nC:\\Users\\flyer\\AppData\\Roaming\\npm\\tower -> C:\\Users\\flyer\\AppData\\Roaming\\npm\\node_modules\\tower\\bin\\tower\nC:\\Users\\flyer\\AppData\\Roaming\\npm\\node_modules\\tower -> C:\\tower\n```\nIs this how it supposed to be or something wrong? Cause after that, running \"tower new app\" or just \"tower\" or just \"node c:\\tower\\bin\\tower\" doesn't do anything, i.e. process hangs and nothing happens.\n. okay, now git clone https://github.com/TheHydroImpulse/tower works for me as well, after make install and npm link I could successfully run tower new app. But not further, cause after \ncd app\nnpm install\nI got a load of errors. But this is probably a subject for another issue. Anyway, how the work progresses is amazing. I'm convinced, that Tower.js has huge chances to become defacto standard web development framework on node.js.\n. Guys, let me reinstall clean node.js and do npm install tower -g and i'll give you what I get. \n. this is what I get after make: \n```\nMake cannot be found. Installing dependencies manually...\n\"/---------------------------------------------------------------------------\\\"\nis not internal or external \ncommand, executable by program or batch file.\nUnexpected apperance: |.\nUnexpected apperance: |.    / This is translated by me, ginsent, from Russian /\n\u041d\u0435\u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435: |.\n\u041d\u0435\u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435: |.\n\u041d\u0435\u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435: |.\n\u041d\u0435\u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435: |.\n\u041d\u0435\u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435: |.\n\u041d\u0435\u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435: |.\n\u041d\u0435\u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435: |.\n\u041d\u0435\u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435: |.\n\u041d\u0435\u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435: |.\n\u041d\u0435\u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435: |.\n\u041d\u0435\u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435: |.\n\u041d\u0435\u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435: |.\n\u041d\u0435\u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435: |.\n\u041d\u0435\u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435: |.\n\u041d\u0435\u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435: |.\n\u041d\u0435\u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435: |.\n\u041d\u0435\u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435: |.\n\u041d\u0435\u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435: |.\n\u041d\u0435\u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435: |.\n\u041d\u0435\u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435: |.\n\u041d\u0435\u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435: |.\n\"---------------------------------------------------------------------------\" \nis not internal or external \ncommand, executable by program or batch file.\ntower@0.4.2-16 C:\\Users\\flyer\\AppData\\Roaming\\npm\\node_modules\\tower\n\u251c\u2500\u2500 which@1.0.5\n\u251c\u2500\u2500 inflection@1.2.3\n\u251c\u2500\u2500 wrench@1.3.9\n\u251c\u2500\u2500 ansi@0.1.2\n\u251c\u2500\u2500 mime@1.2.7\n\u251c\u2500\u2500 node-uuid@1.3.3\n\u251c\u2500\u2500 underscore@1.4.2\n\u251c\u2500\u2500 underscore.string@2.3.0\n\u251c\u2500\u2500 commander@1.0.4 (keypress@0.1.0)\n\u251c\u2500\u2500 superagent@0.9.5 (methods@0.0.1, cookiejar@1.3.0, emitter-component@0.0.5, q\ns@0.4.2, mime@1.2.5, formidable@1.0.9)\n\u251c\u2500\u2500 term-css@1.0.0 (css@1.0.1)\n\u2514\u2500\u2500 pathfinder@0.3.0-1 (async@0.1.22, mkdirp@0.3.4, mint@0.3.5, detective@0.2.1,\n findit@0.1.2)\nC:\\towertry>\n```\n. and this I get having installed GnuWin32 Make\n```\nprocess_begin: CreateProcess(NULL, env node C:\\Users\\flyer\\AppData\\Roaming\\npm\\n\node_modules\\tower\\bin\\install dependencies, ...) failed.\nprocess_begin: CreateProcess(NULL, env node C:\\Users\\flyer\\AppData\\Roaming\\npm\\n\node_modules\\tower\\bin\\install message, ...) failed.\nmake (e=2): \u041d\u0435 \u0443\u0434\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0439\u0442\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u0444\u0430\u0439\u043b.\nmake: *** [install-message] \u041e\u0448\u0438\u0431\u043a\u0430 2\ntower@0.4.2-16 C:\\Users\\flyer\\AppData\\Roaming\\npm\\node_modules\\tower\n\u251c\u2500\u2500 which@1.0.5\n\u251c\u2500\u2500 inflection@1.2.3\n\u251c\u2500\u2500 wrench@1.3.9\n\u251c\u2500\u2500 ansi@0.1.2\n\u251c\u2500\u2500 mime@1.2.7\n\u251c\u2500\u2500 node-uuid@1.3.3\n\u251c\u2500\u2500 underscore@1.4.2\n\u251c\u2500\u2500 underscore.string@2.3.0\n\u251c\u2500\u2500 superagent@0.9.5 (methods@0.0.1, cookiejar@1.3.0, emitter-component@0.0.5, m\nime@1.2.5, qs@0.4.2, formidable@1.0.9)\n\u251c\u2500\u2500 commander@1.0.4 (keypress@0.1.0)\n\u251c\u2500\u2500 term-css@1.0.0 (css@1.0.1)\n\u2514\u2500\u2500 pathfinder@0.3.0-1 (async@0.1.22, mkdirp@0.3.4, mint@0.3.5, detective@0.2.1,\n findit@0.1.2)\nC:\\Users\\flyer>\n``\n.tower new app` doesn't work\n```\nC:\\towertry>tower new app\nmodule.js:340\n    throw err;\n          ^\nError: Cannot find module 'ejs'\n    at Function.Module._resolveFilename (module.js:338:15)\n    at Function.Module._load (module.js:280:25)\n    at Module.require (module.js:362:17)\n    at require (module.js:378:17)\n    at GeneratorAppGenerator.Tower.GeneratorActions.render (C:\\Users\\flyer\\AppDa\nta\\Roaming\\npm\\node_modules\\tower\\lib\\tower-generator\\server\\actions.js:197:12)\n    at GeneratorAppGenerator.Tower.GeneratorActions.template (C:\\Users\\flyer\\App\nData\\Roaming\\npm\\node_modules\\tower\\lib\\tower-generator\\server\\actions.js:190:17\n)\n    at GeneratorAppGenerator. (C:\\Users\\flyer\\AppData\\Roaming\\npm\\nod\ne_modules\\tower\\lib\\tower-generator\\server\\generators\\tower\\app\\appGenerator.js:\n61:14)\n    at GeneratorAppGenerator.Tower.GeneratorActions.inside (C:\\Users\\flyer\\AppDa\nta\\Roaming\\npm\\node_modules\\tower\\lib\\tower-generator\\server\\actions.js:166:11)\n    at GeneratorAppGenerator.run (C:\\Users\\flyer\\AppData\\Roaming\\npm\\node_module\ns\\tower\\lib\\tower-generator\\server\\generators\\tower\\app\\appGenerator.js:57:17)\n    at C:\\Users\\flyer\\AppData\\Roaming\\npm\\node_modules\\tower\\lib\\tower-generator\n\\server\\generator.js:68:22\nC:\\towertry>\n```\nand I dont' have cake :( \n. OMG, it worked all the way down to node server. Well, I still needed to delete folder node_modules and do npm install again, but it worked!! \n. @viatropos Lance, you do an amazing job, thousands of people are constantly checking for updates of tower.js. Another thousands of people, those who on windows, are constantly coming back to see if it started working on their computers. I can tell you, that once it does, I'll probably quit django, and most likely stop watching mojito.\nAnd no, your latest changes to the master didn't work for me yet. \n. @TheHydroImpulse Hi, Daniel! \nI've just run npm install tower -g and got the same problem as the topic starter rickick had: \nC:\\Users\\flyer\\nodist\\bin\\tower -> C:\\Users\\flyer\\nodist\\bin\\node_modules\\tower\\\nbin\\tower\n\ntower@0.4.2-4 postinstall C:\\Users\\flyer\\nodist\\bin\\node_modules\\tower\n$(./bin/dependencies)\n\n\"$\" \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0439 \u0438\u043b\u0438 \u0432\u043d\u0435\u0448\u043d\u0435\u0439\n\u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439, \u0438\u0441\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043e\u0439 \u0438\u043b\u0438 \u043f\u0430\u043a\u0435\u0442\u043d\u044b\u043c \u0444\u0430\u0439\u043b\u043e\u043c.\nnpm ERR! tower@0.4.2-4 postinstall: $(./bin/dependencies)\nnpm ERR! cmd \"/c\" \"$(./bin/dependencies)\" failed with 1\nnpm ERR!\nnpm ERR! Failed at the tower@0.4.2-4 postinstall script.\nnpm ERR! This is most likely a problem with the tower package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     $(./bin/dependencies)\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls tower\nnpm ERR! There is likely additional logging output above.\nnpm ERR! System Windows_NT 6.1.7600\nnpm ERR! command \"C:\\Users\\flyer\\nodist\\bin\\..\\node.exe\" \"C:\\Users\\fly\ner\\nodist\\bin\\node_modules\\npm\\cli.js\" \"install\" \"tower\" \"-g\"\nnpm ERR! cwd C:\\Users\\flyer\nnpm ERR! node -v v0.8.9\nnpm ERR! npm -v 1.1.59\nnpm ERR! code ELIFECYCLE\nnpm ERR!\nnpm ERR! Additional logging details can be found in:\nnpm ERR!     C:\\Users\\flyer\\npm-debug.log\nnpm ERR! not ok code 0\n. The way, described by TheHydroImpulse works. You've got to install make for windows http://gnuwin32.sourceforge.net/packages/make.htm before running \"make install\". \n. Okay, this is what I get after npm link: \n```\nC:\\tower>npm link\n\ntower@0.4.2-4 postinstall C:\\tower\nmake install-dependencies\n\nprocess_begin: CreateProcess(NULL, env node C:\\tower\\bin\\dependencies, ...) failed.\nmake: `install-dependencies' \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f. (in English: \"doesn't require update\")\nC:\\Users\\flyer\\AppData\\Roaming\\npm\\tower -> C:\\Users\\flyer\\AppData\\Roaming\\npm\\node_modules\\tower\\bin\\tower\nC:\\Users\\flyer\\AppData\\Roaming\\npm\\node_modules\\tower -> C:\\tower\n```\nIs this how it supposed to be or something wrong? Cause after that, running \"tower new app\" or just \"tower\" or just \"node c:\\tower\\bin\\tower\" doesn't do anything, i.e. process hangs and nothing happens.\n. okay, now git clone https://github.com/TheHydroImpulse/tower works for me as well, after make install and npm link I could successfully run tower new app. But not further, cause after \ncd app\nnpm install\nI got a load of errors. But this is probably a subject for another issue. Anyway, how the work progresses is amazing. I'm convinced, that Tower.js has huge chances to become defacto standard web development framework on node.js.\n. Guys, let me reinstall clean node.js and do npm install tower -g and i'll give you what I get. \n. this is what I get after make: \n```\nMake cannot be found. Installing dependencies manually...\n\"/---------------------------------------------------------------------------\\\"\nis not internal or external \ncommand, executable by program or batch file.\nUnexpected apperance: |.\nUnexpected apperance: |.    / This is translated by me, ginsent, from Russian /\n\u041d\u0435\u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435: |.\n\u041d\u0435\u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435: |.\n\u041d\u0435\u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435: |.\n\u041d\u0435\u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435: |.\n\u041d\u0435\u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435: |.\n\u041d\u0435\u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435: |.\n\u041d\u0435\u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435: |.\n\u041d\u0435\u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435: |.\n\u041d\u0435\u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435: |.\n\u041d\u0435\u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435: |.\n\u041d\u0435\u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435: |.\n\u041d\u0435\u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435: |.\n\u041d\u0435\u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435: |.\n\u041d\u0435\u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435: |.\n\u041d\u0435\u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435: |.\n\u041d\u0435\u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435: |.\n\u041d\u0435\u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435: |.\n\u041d\u0435\u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435: |.\n\u041d\u0435\u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435: |.\n\u041d\u0435\u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435: |.\n\u041d\u0435\u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435: |.\n\"---------------------------------------------------------------------------\" \nis not internal or external \ncommand, executable by program or batch file.\ntower@0.4.2-16 C:\\Users\\flyer\\AppData\\Roaming\\npm\\node_modules\\tower\n\u251c\u2500\u2500 which@1.0.5\n\u251c\u2500\u2500 inflection@1.2.3\n\u251c\u2500\u2500 wrench@1.3.9\n\u251c\u2500\u2500 ansi@0.1.2\n\u251c\u2500\u2500 mime@1.2.7\n\u251c\u2500\u2500 node-uuid@1.3.3\n\u251c\u2500\u2500 underscore@1.4.2\n\u251c\u2500\u2500 underscore.string@2.3.0\n\u251c\u2500\u2500 commander@1.0.4 (keypress@0.1.0)\n\u251c\u2500\u2500 superagent@0.9.5 (methods@0.0.1, cookiejar@1.3.0, emitter-component@0.0.5, q\ns@0.4.2, mime@1.2.5, formidable@1.0.9)\n\u251c\u2500\u2500 term-css@1.0.0 (css@1.0.1)\n\u2514\u2500\u2500 pathfinder@0.3.0-1 (async@0.1.22, mkdirp@0.3.4, mint@0.3.5, detective@0.2.1,\n findit@0.1.2)\nC:\\towertry>\n```\n. and this I get having installed GnuWin32 Make\n```\nprocess_begin: CreateProcess(NULL, env node C:\\Users\\flyer\\AppData\\Roaming\\npm\\n\node_modules\\tower\\bin\\install dependencies, ...) failed.\nprocess_begin: CreateProcess(NULL, env node C:\\Users\\flyer\\AppData\\Roaming\\npm\\n\node_modules\\tower\\bin\\install message, ...) failed.\nmake (e=2): \u041d\u0435 \u0443\u0434\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0439\u0442\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u0444\u0430\u0439\u043b.\nmake: *** [install-message] \u041e\u0448\u0438\u0431\u043a\u0430 2\ntower@0.4.2-16 C:\\Users\\flyer\\AppData\\Roaming\\npm\\node_modules\\tower\n\u251c\u2500\u2500 which@1.0.5\n\u251c\u2500\u2500 inflection@1.2.3\n\u251c\u2500\u2500 wrench@1.3.9\n\u251c\u2500\u2500 ansi@0.1.2\n\u251c\u2500\u2500 mime@1.2.7\n\u251c\u2500\u2500 node-uuid@1.3.3\n\u251c\u2500\u2500 underscore@1.4.2\n\u251c\u2500\u2500 underscore.string@2.3.0\n\u251c\u2500\u2500 superagent@0.9.5 (methods@0.0.1, cookiejar@1.3.0, emitter-component@0.0.5, m\nime@1.2.5, qs@0.4.2, formidable@1.0.9)\n\u251c\u2500\u2500 commander@1.0.4 (keypress@0.1.0)\n\u251c\u2500\u2500 term-css@1.0.0 (css@1.0.1)\n\u2514\u2500\u2500 pathfinder@0.3.0-1 (async@0.1.22, mkdirp@0.3.4, mint@0.3.5, detective@0.2.1,\n findit@0.1.2)\nC:\\Users\\flyer>\n``\n.tower new app` doesn't work\n```\nC:\\towertry>tower new app\nmodule.js:340\n    throw err;\n          ^\nError: Cannot find module 'ejs'\n    at Function.Module._resolveFilename (module.js:338:15)\n    at Function.Module._load (module.js:280:25)\n    at Module.require (module.js:362:17)\n    at require (module.js:378:17)\n    at GeneratorAppGenerator.Tower.GeneratorActions.render (C:\\Users\\flyer\\AppDa\nta\\Roaming\\npm\\node_modules\\tower\\lib\\tower-generator\\server\\actions.js:197:12)\n    at GeneratorAppGenerator.Tower.GeneratorActions.template (C:\\Users\\flyer\\App\nData\\Roaming\\npm\\node_modules\\tower\\lib\\tower-generator\\server\\actions.js:190:17\n)\n    at GeneratorAppGenerator. (C:\\Users\\flyer\\AppData\\Roaming\\npm\\nod\ne_modules\\tower\\lib\\tower-generator\\server\\generators\\tower\\app\\appGenerator.js:\n61:14)\n    at GeneratorAppGenerator.Tower.GeneratorActions.inside (C:\\Users\\flyer\\AppDa\nta\\Roaming\\npm\\node_modules\\tower\\lib\\tower-generator\\server\\actions.js:166:11)\n    at GeneratorAppGenerator.run (C:\\Users\\flyer\\AppData\\Roaming\\npm\\node_module\ns\\tower\\lib\\tower-generator\\server\\generators\\tower\\app\\appGenerator.js:57:17)\n    at C:\\Users\\flyer\\AppData\\Roaming\\npm\\node_modules\\tower\\lib\\tower-generator\n\\server\\generator.js:68:22\nC:\\towertry>\n```\nand I dont' have cake :( \n. OMG, it worked all the way down to node server. Well, I still needed to delete folder node_modules and do npm install again, but it worked!! \n. ",
    "liferealized": "Just tried to install tower on vanilla windows 7. After installing make for windows and running 'make install' i received this error.\n**  B A T C H   R E C U R S I O N  exceeds STACK limits *\nRecursion Count=593, Stack Usage=90 percent\n*       B A T C H   PROCESSING IS   A B O R T E D      ****\n. Just tried to install tower on vanilla windows 7. After installing make for windows and running 'make install' i received this error.\n**  B A T C H   R E C U R S I O N  exceeds STACK limits *\nRecursion Count=593, Stack Usage=90 percent\n*       B A T C H   PROCESSING IS   A B O R T E D      ****\n. ",
    "pashaie": "@liferealized, I got same error when installing latest version (4.2-12)\nAfter some investigation, I find out that make.bat file is calling itself on an infinite loop. make.bat#10\nSo, I commented out call %PPath% in make.bat to bypass that infinite loop.\nBut when I execute tower new app, it cause error which says ejs module not found.\n------------ npm-debug.log\n11588 info install tower@0.4.2-12\n11589 info postinstall tower@0.4.2-12\n11590 verbose unsafe-perm in lifecycle true\n11591 silly exec cmd \"/c\" \"make install-dependencies\"\n11592 silly cmd,/c,make install-dependencies,C:\\Users\\Pasha\\AppData\\Roaming\\npm\\node_modules\\tower spawning\n11593 info tower@0.4.2-12 Failed to exec postinstall script\n11594 info C:\\Users\\Pasha\\AppData\\Roaming\\npm\\node_modules\\tower unbuild\n11595 verbose from cache C:\\Users\\Pasha\\AppData\\Roaming\\npm\\node_modules\\tower\\package.json\n11596 info preuninstall tower@0.4.2-12\n11597 info uninstall tower@0.4.2-12\n11598 verbose true,C:\\Users\\Pasha\\AppData\\Roaming\\npm\\node_modules,C:\\Users\\Pasha\\AppData\\Roaming\\npm\\node_modules unbuild tower@0.4.2-12\n11599 verbose C:\\Users\\Pasha\\AppData\\Roaming\\npm,[object Object] binRoot\n11600 info postuninstall tower@0.4.2-12\n11601 error tower@0.4.2-12 postinstall: make install-dependencies\n11601 error cmd \"/c\" \"make install-dependencies\" failed with 255\n11602 error Failed at the tower@0.4.2-12 postinstall script.\n11602 error This is most likely a problem with the tower package,\n11602 error not with npm itself.\n11602 error Tell the author that this fails on your system:\n11602 error     make install-dependencies\n11602 error You can get their info via:\n11602 error     npm owner ls tower\n11602 error There is likely additional logging output above.\n11603 error System Windows_NT 6.1.7601\n11604 error command \"C:\\Program Files\\nodejs\\node.exe\" \"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js\" \"install\" \"tower\" \"-g\"\n11605 error cwd D:\\MyProgramming\\js\\brick\n11606 error node -v v0.8.11\n11607 error npm -v 1.1.62\n11608 error code ELIFECYCLE\n11609 verbose exit [ 1, true ]\n--------- console error\n**  B A T C H   R E C U R S I O N  exceeds STACK limits *\nRecursion Count=593, Stack Usage=90 percent\n*       B A T C H   PROCESSING IS   A B O R T E D      ****\nnpm ERR! tower@0.4.2-12 postinstall: make install-dependencies\nnpm ERR! cmd \"/c\" \"make install-dependencies\" failed with 255\nnpm ERR!\nnpm ERR! Failed at the tower@0.4.2-12 postinstall script.\nnpm ERR! This is most likely a problem with the tower package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     make install-dependencies\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls tower\nnpm ERR! There is likely additional logging output above.\nnpm ERR! System Windows_NT 6.1.7601\nnpm ERR! command \"C:\\Program Files\\nodejs\\node.exe\" \"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js\" \"install\" \"tower\" \"-g\"\nnpm ERR! cwd D:\\MyProgramming\\js\\brick\nnpm ERR! node -v v0.8.11\nnpm ERR! npm -v 1.1.62\nnpm ERR! code ELIFECYCLE\nnpm ERR!\nnpm ERR! Additional logging details can be found in:\nnpm ERR!     D:\\MyProgramming\\js\\brick\\npm-debug.log\nnpm ERR! not ok code 0\n. @edubkendo yeah, make file is supposed to call some command to take care of post-installation step. But instead, it's calling itself! \nI installed ejs, but still got error:\nevents.js:68\n        throw arguments[1]; // Unhandled 'error' event\n                       ^\nError: connect ETIMEDOUT\n    at errnoException (net.js:769:11)\n    at Object.afterConnect as oncomplete\n. @TheHydroImpulse  I've tried cmd, powershell and gitshell. but steel same thing.\nThe result of make watch was: \n   INFO: Could not find files for the given pattern(s). '\nI'll install ruby devkit and see what happens.\nbtw, @TheHydroImpulse and @viatropos thanks for your response. It's great to see such a wonderful support. \n. Adding devkit's bin to path, installation was successful. So, it's seems one must have devkit which is based on msys, before installing tower.\nwhen using tower I got another error, which i suspect this issue isn't right place to report it, but just for the record :\nafter creating a new app, when running tower generate scaffold Post title:string body:text belongsTo:user I got \nmodule.js:340\n    throw err;\n          ^\nError: Cannot find module 'scripts\\tower'\n    at Function.Module._resolveFilename (module.js:338:15)\n    at Function.Module._load (module.js:280:25)\n    at Module.require (module.js:362:17)\n    at require (module.js:378:17)\n    at Object. (C:\\Users\\pasha\\AppData\\Roaming\\npm\\node_modules\\tower\\bin\\tower:8:3)\n    at Module._compile (module.js:449:26)\n    at Object.Module._extensions..js (module.js:467:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Module.runMain (module.js:492:10)\nnote that i'm running this command inside d:\\myprogramming\\js\\app and there is a scripts\\tower\nThank you guys. \n. Yeah, I installed it with -g.\nUsing steps inside https://github.com/viatropos/tower, process seems to be successful, though step 3 npm install was very long (about 5min) and reported some error and warning in gyp(?) 's rebuild process.\nAnd what cake watch does? after running it, it says \n  Running \"watch\" task\n  Waiting...\nAnd stays that way, so I exited that process and continued on.\nRunning server, I think there is something wrong, cause when clicking on Posts or Users, nothings happen!\nI didn't done any database configuration, just stared mongodb, maybe that's the problem?\n. Thanks dude, your comments are very helpful. I appreciate it.\nLooking at chrome console, there is an Ember error.\nUncaught Error: App.UsersIndexView:ember479 - Unable to find template \"users/index\". \nEmber.View.Ember.Object.extend.templateForName ember.js:12078\nEmber.View.Ember.Object.extend.template ember.js:12026\nComputedPropertyPrototype.get ember.js:2949\nget ember.js:1355\nEmber.View.Ember.Object.extend.render ember.js:12348\nEmber.View.Ember.Object.extend.renderToBuffer ember.js:13017\nEmber.View.Ember.Object.extend.createElement ember.js:12814\nEmber.View.states.preRender.insertElement ember.js:13702\nEmber.View.Ember.Object.extend.invokeForState ember.js:12384\ninvoke ember.js:3377\niter ember.js:3424\nRunLoop.flush ember.js:3480\nRunLoop.end ember.js:3396\nEmber.run.end ember.js:3588\nautorun\nThere is mentioned file (index.js) in app\\public\\javascripts\\app\\views\\client\\users.\n. The folder exists with this files:\n- _flash.coffee\n- _form.coffee\n- _item.coffee\n- _list.coffee\n- _table.coffee\n- edit.coffee\n- index.coffee\n- new.coffee\n- show.coffee\nTo be sure, I deleted app folder and started from towel new app, but still same error. And also cake watch was running.\nThe carious thing is, when starting for first time, some of js files aren't on the server, I think it take time to compile all coffeescripts to js. \n. So I will close this issue cause this issue Cannot find module 'tower' has been resolved, thanks to @TheHydroImpulse .\nBut I'll create new issue to address Uncaught Error: App.UsersIndexView:ember479 - Unable to find template \"users/index\".\nThanks.\n. @viatropos, running that command in chrome console, result was\n[\"application\"] [\"application\"]\n. I noticed that app\\public\\javascripts\\app\\templates\\client folder has only index.js. I'm new to Nodejs or even Tower and Ember, but isn't it necessary to have  app\\app\\templates\\shared\\posts and app\\app\\templates\\shared\\users folders there with it's content compiled from coffescript to javascript?\n. Thanks guys.\nBut how can I rebuild templates?\nRestarting cake watch and server didn't work.\ngrunt templates caused <FATAL> Unable to find \"grunt.js\" config file. Do you need any --help? </FATAL> \nI even tried npm install :D\n. @viatropos actually using --config ./grunt.coffee worked.\nbut running grunt templates --config ./grunt.coffee still template file (app\\public\\javascripts\\templates.js) only contains Tower.View.cache = _.extend(Ember.TEMPLATES, Tower.View.cache); though I've edited app\\node_modules\\tower\\packages\\tower-tasks\\tasks\\index.coffee#22 to pathSeparator = '/'\nbtw, my grunt version is grunt v0.3.16\n. @TheHydroImpulse thanks, it worked!\n@viatropos I didn't replace packages/tower-generator/server/generators/tower/app/templates/cake so, may be that wasn't necessary. Thanks. I really appreciate that. \n. @liferealized, I got same error when installing latest version (4.2-12)\nAfter some investigation, I find out that make.bat file is calling itself on an infinite loop. make.bat#10\nSo, I commented out call %PPath% in make.bat to bypass that infinite loop.\nBut when I execute tower new app, it cause error which says ejs module not found.\n------------ npm-debug.log\n11588 info install tower@0.4.2-12\n11589 info postinstall tower@0.4.2-12\n11590 verbose unsafe-perm in lifecycle true\n11591 silly exec cmd \"/c\" \"make install-dependencies\"\n11592 silly cmd,/c,make install-dependencies,C:\\Users\\Pasha\\AppData\\Roaming\\npm\\node_modules\\tower spawning\n11593 info tower@0.4.2-12 Failed to exec postinstall script\n11594 info C:\\Users\\Pasha\\AppData\\Roaming\\npm\\node_modules\\tower unbuild\n11595 verbose from cache C:\\Users\\Pasha\\AppData\\Roaming\\npm\\node_modules\\tower\\package.json\n11596 info preuninstall tower@0.4.2-12\n11597 info uninstall tower@0.4.2-12\n11598 verbose true,C:\\Users\\Pasha\\AppData\\Roaming\\npm\\node_modules,C:\\Users\\Pasha\\AppData\\Roaming\\npm\\node_modules unbuild tower@0.4.2-12\n11599 verbose C:\\Users\\Pasha\\AppData\\Roaming\\npm,[object Object] binRoot\n11600 info postuninstall tower@0.4.2-12\n11601 error tower@0.4.2-12 postinstall: make install-dependencies\n11601 error cmd \"/c\" \"make install-dependencies\" failed with 255\n11602 error Failed at the tower@0.4.2-12 postinstall script.\n11602 error This is most likely a problem with the tower package,\n11602 error not with npm itself.\n11602 error Tell the author that this fails on your system:\n11602 error     make install-dependencies\n11602 error You can get their info via:\n11602 error     npm owner ls tower\n11602 error There is likely additional logging output above.\n11603 error System Windows_NT 6.1.7601\n11604 error command \"C:\\Program Files\\nodejs\\node.exe\" \"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js\" \"install\" \"tower\" \"-g\"\n11605 error cwd D:\\MyProgramming\\js\\brick\n11606 error node -v v0.8.11\n11607 error npm -v 1.1.62\n11608 error code ELIFECYCLE\n11609 verbose exit [ 1, true ]\n--------- console error\n**  B A T C H   R E C U R S I O N  exceeds STACK limits *\nRecursion Count=593, Stack Usage=90 percent\n*       B A T C H   PROCESSING IS   A B O R T E D      ****\nnpm ERR! tower@0.4.2-12 postinstall: make install-dependencies\nnpm ERR! cmd \"/c\" \"make install-dependencies\" failed with 255\nnpm ERR!\nnpm ERR! Failed at the tower@0.4.2-12 postinstall script.\nnpm ERR! This is most likely a problem with the tower package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     make install-dependencies\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls tower\nnpm ERR! There is likely additional logging output above.\nnpm ERR! System Windows_NT 6.1.7601\nnpm ERR! command \"C:\\Program Files\\nodejs\\node.exe\" \"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js\" \"install\" \"tower\" \"-g\"\nnpm ERR! cwd D:\\MyProgramming\\js\\brick\nnpm ERR! node -v v0.8.11\nnpm ERR! npm -v 1.1.62\nnpm ERR! code ELIFECYCLE\nnpm ERR!\nnpm ERR! Additional logging details can be found in:\nnpm ERR!     D:\\MyProgramming\\js\\brick\\npm-debug.log\nnpm ERR! not ok code 0\n. @edubkendo yeah, make file is supposed to call some command to take care of post-installation step. But instead, it's calling itself! \nI installed ejs, but still got error:\nevents.js:68\n        throw arguments[1]; // Unhandled 'error' event\n                       ^\nError: connect ETIMEDOUT\n    at errnoException (net.js:769:11)\n    at Object.afterConnect as oncomplete\n. @TheHydroImpulse  I've tried cmd, powershell and gitshell. but steel same thing.\nThe result of make watch was: \n   INFO: Could not find files for the given pattern(s). '\nI'll install ruby devkit and see what happens.\nbtw, @TheHydroImpulse and @viatropos thanks for your response. It's great to see such a wonderful support. \n. Adding devkit's bin to path, installation was successful. So, it's seems one must have devkit which is based on msys, before installing tower.\nwhen using tower I got another error, which i suspect this issue isn't right place to report it, but just for the record :\nafter creating a new app, when running tower generate scaffold Post title:string body:text belongsTo:user I got \nmodule.js:340\n    throw err;\n          ^\nError: Cannot find module 'scripts\\tower'\n    at Function.Module._resolveFilename (module.js:338:15)\n    at Function.Module._load (module.js:280:25)\n    at Module.require (module.js:362:17)\n    at require (module.js:378:17)\n    at Object. (C:\\Users\\pasha\\AppData\\Roaming\\npm\\node_modules\\tower\\bin\\tower:8:3)\n    at Module._compile (module.js:449:26)\n    at Object.Module._extensions..js (module.js:467:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Module.runMain (module.js:492:10)\nnote that i'm running this command inside d:\\myprogramming\\js\\app and there is a scripts\\tower\nThank you guys. \n. Yeah, I installed it with -g.\nUsing steps inside https://github.com/viatropos/tower, process seems to be successful, though step 3 npm install was very long (about 5min) and reported some error and warning in gyp(?) 's rebuild process.\nAnd what cake watch does? after running it, it says \n  Running \"watch\" task\n  Waiting...\nAnd stays that way, so I exited that process and continued on.\nRunning server, I think there is something wrong, cause when clicking on Posts or Users, nothings happen!\nI didn't done any database configuration, just stared mongodb, maybe that's the problem?\n. Thanks dude, your comments are very helpful. I appreciate it.\nLooking at chrome console, there is an Ember error.\nUncaught Error: App.UsersIndexView:ember479 - Unable to find template \"users/index\". \nEmber.View.Ember.Object.extend.templateForName ember.js:12078\nEmber.View.Ember.Object.extend.template ember.js:12026\nComputedPropertyPrototype.get ember.js:2949\nget ember.js:1355\nEmber.View.Ember.Object.extend.render ember.js:12348\nEmber.View.Ember.Object.extend.renderToBuffer ember.js:13017\nEmber.View.Ember.Object.extend.createElement ember.js:12814\nEmber.View.states.preRender.insertElement ember.js:13702\nEmber.View.Ember.Object.extend.invokeForState ember.js:12384\ninvoke ember.js:3377\niter ember.js:3424\nRunLoop.flush ember.js:3480\nRunLoop.end ember.js:3396\nEmber.run.end ember.js:3588\nautorun\nThere is mentioned file (index.js) in app\\public\\javascripts\\app\\views\\client\\users.\n. The folder exists with this files:\n- _flash.coffee\n- _form.coffee\n- _item.coffee\n- _list.coffee\n- _table.coffee\n- edit.coffee\n- index.coffee\n- new.coffee\n- show.coffee\nTo be sure, I deleted app folder and started from towel new app, but still same error. And also cake watch was running.\nThe carious thing is, when starting for first time, some of js files aren't on the server, I think it take time to compile all coffeescripts to js. \n. So I will close this issue cause this issue Cannot find module 'tower' has been resolved, thanks to @TheHydroImpulse .\nBut I'll create new issue to address Uncaught Error: App.UsersIndexView:ember479 - Unable to find template \"users/index\".\nThanks.\n. @viatropos, running that command in chrome console, result was\n[\"application\"] [\"application\"]\n. I noticed that app\\public\\javascripts\\app\\templates\\client folder has only index.js. I'm new to Nodejs or even Tower and Ember, but isn't it necessary to have  app\\app\\templates\\shared\\posts and app\\app\\templates\\shared\\users folders there with it's content compiled from coffescript to javascript?\n. Thanks guys.\nBut how can I rebuild templates?\nRestarting cake watch and server didn't work.\ngrunt templates caused <FATAL> Unable to find \"grunt.js\" config file. Do you need any --help? </FATAL> \nI even tried npm install :D\n. @viatropos actually using --config ./grunt.coffee worked.\nbut running grunt templates --config ./grunt.coffee still template file (app\\public\\javascripts\\templates.js) only contains Tower.View.cache = _.extend(Ember.TEMPLATES, Tower.View.cache); though I've edited app\\node_modules\\tower\\packages\\tower-tasks\\tasks\\index.coffee#22 to pathSeparator = '/'\nbtw, my grunt version is grunt v0.3.16\n. @TheHydroImpulse thanks, it worked!\n@viatropos I didn't replace packages/tower-generator/server/generators/tower/app/templates/cake so, may be that wasn't necessary. Thanks. I really appreciate that. \n. ",
    "haustraliaer": "Just ran into the same problems that others are installing from the npm ... seems like you guys are working on this right now! \nHere's my npm-debug.log results in case they help.\n``\n******  B A T C H   R E C U R S I O N  exceeds STACK limits ******\nRecursion Count=703, Stack Usage=90 percent\n******       B A T C H   PROCESSING IS   A B O R T E D      ******\nnpm ERR! tower@0.4.2-14 postinstall:make post-installnpm ERR!cmd \"/c\" \"make post-install\"` failed with 255\nnpm ERR!\nnpm ERR! Failed at the tower@0.4.2-14 postinstall script.\nnpm ERR! This is most likely a problem with the tower package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     make post-install\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls tower\nnpm ERR! There is likely additional logging output above.\nnpm ERR! System Windows_NT 6.1.7601\nnpm ERR! command \"C:\\Program Files (x86)\\nodejs\\\\node.exe\" \"C:\\Program Files (x86)\\nodejs\\node_modules\\n\npm\\bin\\npm-cli.js\" \"install\" \"tower\" \"-g\"\nnpm ERR! cwd C:\\repos\\towerjs\nnpm ERR! node -v v0.8.11\nnpm ERR! npm -v 1.1.62\nnpm ERR! code ELIFECYCLE\nnpm ERR!\nnpm ERR! Additional logging details can be found in:\nnpm ERR!     C:\\repos\\towerjs\\npm-debug.log\nnpm ERR! not ok code 0\n``\n. ok just gave it a fresh install vianpm install tower -g... seeingv0.4.2-18` as expected.\nFollowing along here: http://towerjs.org/\nI can get through tower new app fine. cd into the app..\nTrying the next line though... tower generate scaffold Post title:string body:text belongsTo:user\nDumps me with the following:\n```\nmodule.js:340\n    throw err;\n          ^\nError: Cannot find module 'tower'\n    at Function.Module._resolveFilename (module.js:338:15)\n    at Function.Module._load (module.js:280:25)\n    at Module.require (module.js:362:17)\n    at require (module.js:378:17)\n    at Object. (C:_repos_tower\\app\\scripts\\tower:3:1)\n    at Module._compile (module.js:449:26)\n    at Object.Module._extensions..js (module.js:467:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Module.require (module.js:362:17)\n```\nNot sure if I'm meant to be able to do that yet - if it's part of the make file or anything?\nOr do I need another dependency installed manually?\n. Just ran into the same problems that others are installing from the npm ... seems like you guys are working on this right now! \nHere's my npm-debug.log results in case they help.\n``\n******  B A T C H   R E C U R S I O N  exceeds STACK limits ******\nRecursion Count=703, Stack Usage=90 percent\n******       B A T C H   PROCESSING IS   A B O R T E D      ******\nnpm ERR! tower@0.4.2-14 postinstall:make post-installnpm ERR!cmd \"/c\" \"make post-install\"` failed with 255\nnpm ERR!\nnpm ERR! Failed at the tower@0.4.2-14 postinstall script.\nnpm ERR! This is most likely a problem with the tower package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     make post-install\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls tower\nnpm ERR! There is likely additional logging output above.\nnpm ERR! System Windows_NT 6.1.7601\nnpm ERR! command \"C:\\Program Files (x86)\\nodejs\\\\node.exe\" \"C:\\Program Files (x86)\\nodejs\\node_modules\\n\npm\\bin\\npm-cli.js\" \"install\" \"tower\" \"-g\"\nnpm ERR! cwd C:\\repos\\towerjs\nnpm ERR! node -v v0.8.11\nnpm ERR! npm -v 1.1.62\nnpm ERR! code ELIFECYCLE\nnpm ERR!\nnpm ERR! Additional logging details can be found in:\nnpm ERR!     C:\\repos\\towerjs\\npm-debug.log\nnpm ERR! not ok code 0\n``\n. ok just gave it a fresh install vianpm install tower -g... seeingv0.4.2-18` as expected.\nFollowing along here: http://towerjs.org/\nI can get through tower new app fine. cd into the app..\nTrying the next line though... tower generate scaffold Post title:string body:text belongsTo:user\nDumps me with the following:\n```\nmodule.js:340\n    throw err;\n          ^\nError: Cannot find module 'tower'\n    at Function.Module._resolveFilename (module.js:338:15)\n    at Function.Module._load (module.js:280:25)\n    at Module.require (module.js:362:17)\n    at require (module.js:378:17)\n    at Object. (C:_repos_tower\\app\\scripts\\tower:3:1)\n    at Module._compile (module.js:449:26)\n    at Object.Module._extensions..js (module.js:467:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Module.require (module.js:362:17)\n```\nNot sure if I'm meant to be able to do that yet - if it's part of the make file or anything?\nOr do I need another dependency installed manually?\n. ",
    "ricick": "All seems to install correctly.\nnode init myapp works fine\nnpm install inside the project works but gives the following warning (not sure if this is a problem):\n```\n\niconv@1.2.3 install c:\\Users\\Phil\\projects\\towertest3\\node_modules\\nodemailer\\\nnode_modules\\mailcomposer\\node_modules\\mimelib\\node_modules\\encoding\\node_module\ns\\iconv\nnode-gyp rebuild\n\nc:\\Users\\Phil\\projects\\towertest3\\node_modules\\nodemailer\\node_modules\\mailcompo\nser\\node_modules\\mimelib\\node_modules\\encoding\\node_modules\\iconv>node \"c:\\nodej\ns\\node_modules\\npm\\bin\\node-gyp-bin\\....\\node_modules\\node-gyp\\bin\\node-gyp.js\n\" rebuild\nc:\\Users\\Phil\\projects\\towertest3\\node_modules\\nodemailer\\node_modules\\mailcomp\noser\\node_modules\\mimelib\\node_modules\\encoding\\node_modules\\iconv\\build\\iconv.\nvcxproj(1,680): error MSB4019: The imported project \"c:\\Microsoft.Cpp.Default.p\nrops\" was not found. Confirm that the path in the  declaration is corre\nct, and that the file exists on disk.\ngyp ERR! rebuild error Error: C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\msb\nuild.exe failed with exit code: 1\ngyp ERR! rebuild error     at ChildProcess.onExit (c:\\nodejs\\node_modules\\npm\\no\nde_modules\\node-gyp\\lib\\build.js:214:23)\ngyp ERR! rebuild error     at ChildProcess.EventEmitter.emit (events.js:91:17)\ngyp ERR! rebuild error     at Process._handle.onexit (child_process.js:674:10)\ngyp ERR! not ok\n[ws v0.4.22] Native code compile failed (but the module will still work):\n[ws v0.4.22] The native extensions are faster, but not required.\n[ws v0.4.22] On Windows, native extensions require Visual Studio and Python.\n[ws v0.4.22] On Unix, native extensions require Python, make and a C++ compiler.\n[ws v0.4.22] Start npm with --ws:verbose to show compilation output (if any).\nnpm WARN optional dep failed, continuing iconv@1.2.3\n```\nnode server starts up and runs on 3000, but going to http://localhost:3000/ I get 404 errors for all the javascript and stylesheets etc\nGET http://localhost:3000/stylesheets/vendor/stylesheets/bootstrap/bootstrap.css 404 (Not Found) localhost:12\nGET http://localhost:3000/stylesheets/vendor/stylesheets/prettify.css 404 (Not Found) localhost:13\nGET http://localhost:3000/stylesheets/app/stylesheets/client/application.css 404 (Not Found) localhost:14\nGET http://localhost:3000/javascripts/vendor/javascripts/underscore.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/vendor/javascripts/underscore.string.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/vendor/javascripts/moment.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/vendor/javascripts/geolib.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/vendor/javascripts/validator.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/vendor/javascripts/accounting.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/vendor/javascripts/inflection.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/vendor/javascripts/async.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/vendor/javascripts/socket.io.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/vendor/javascripts/handlebars.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/vendor/javascripts/ember.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/vendor/javascripts/jstorage.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/vendor/javascripts/tower.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/vendor/javascripts/bootstrap/bootstrap-dropdown.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/vendor/javascripts/mocha.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/vendor/javascripts/chai.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/test/client.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/app/config/shared/application.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/app/config/client/bootstrap.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/app/config/client/watch.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/app/config/shared/routes.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/templates.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/app/controllers/client/applicationController.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/app/views/client/layout/application.js 404 (Not Found) localhost:18\nUncaught ReferenceError: App is not defined localhost:100\nThose paths look wrong. javascripts/vendor/javascripts/ i'm guessing is meant to be just javascripts/. Any ideas?\n. oops didnt mean to close sorry\n. Woohoo! all working. Excellent work guys!\n. All seems to install correctly.\nnode init myapp works fine\nnpm install inside the project works but gives the following warning (not sure if this is a problem):\n```\n\niconv@1.2.3 install c:\\Users\\Phil\\projects\\towertest3\\node_modules\\nodemailer\\\nnode_modules\\mailcomposer\\node_modules\\mimelib\\node_modules\\encoding\\node_module\ns\\iconv\nnode-gyp rebuild\n\nc:\\Users\\Phil\\projects\\towertest3\\node_modules\\nodemailer\\node_modules\\mailcompo\nser\\node_modules\\mimelib\\node_modules\\encoding\\node_modules\\iconv>node \"c:\\nodej\ns\\node_modules\\npm\\bin\\node-gyp-bin\\....\\node_modules\\node-gyp\\bin\\node-gyp.js\n\" rebuild\nc:\\Users\\Phil\\projects\\towertest3\\node_modules\\nodemailer\\node_modules\\mailcomp\noser\\node_modules\\mimelib\\node_modules\\encoding\\node_modules\\iconv\\build\\iconv.\nvcxproj(1,680): error MSB4019: The imported project \"c:\\Microsoft.Cpp.Default.p\nrops\" was not found. Confirm that the path in the  declaration is corre\nct, and that the file exists on disk.\ngyp ERR! rebuild error Error: C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\msb\nuild.exe failed with exit code: 1\ngyp ERR! rebuild error     at ChildProcess.onExit (c:\\nodejs\\node_modules\\npm\\no\nde_modules\\node-gyp\\lib\\build.js:214:23)\ngyp ERR! rebuild error     at ChildProcess.EventEmitter.emit (events.js:91:17)\ngyp ERR! rebuild error     at Process._handle.onexit (child_process.js:674:10)\ngyp ERR! not ok\n[ws v0.4.22] Native code compile failed (but the module will still work):\n[ws v0.4.22] The native extensions are faster, but not required.\n[ws v0.4.22] On Windows, native extensions require Visual Studio and Python.\n[ws v0.4.22] On Unix, native extensions require Python, make and a C++ compiler.\n[ws v0.4.22] Start npm with --ws:verbose to show compilation output (if any).\nnpm WARN optional dep failed, continuing iconv@1.2.3\n```\nnode server starts up and runs on 3000, but going to http://localhost:3000/ I get 404 errors for all the javascript and stylesheets etc\nGET http://localhost:3000/stylesheets/vendor/stylesheets/bootstrap/bootstrap.css 404 (Not Found) localhost:12\nGET http://localhost:3000/stylesheets/vendor/stylesheets/prettify.css 404 (Not Found) localhost:13\nGET http://localhost:3000/stylesheets/app/stylesheets/client/application.css 404 (Not Found) localhost:14\nGET http://localhost:3000/javascripts/vendor/javascripts/underscore.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/vendor/javascripts/underscore.string.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/vendor/javascripts/moment.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/vendor/javascripts/geolib.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/vendor/javascripts/validator.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/vendor/javascripts/accounting.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/vendor/javascripts/inflection.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/vendor/javascripts/async.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/vendor/javascripts/socket.io.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/vendor/javascripts/handlebars.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/vendor/javascripts/ember.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/vendor/javascripts/jstorage.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/vendor/javascripts/tower.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/vendor/javascripts/bootstrap/bootstrap-dropdown.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/vendor/javascripts/mocha.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/vendor/javascripts/chai.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/test/client.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/app/config/shared/application.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/app/config/client/bootstrap.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/app/config/client/watch.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/app/config/shared/routes.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/templates.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/app/controllers/client/applicationController.js 404 (Not Found) localhost:18\nGET http://localhost:3000/javascripts/app/views/client/layout/application.js 404 (Not Found) localhost:18\nUncaught ReferenceError: App is not defined localhost:100\nThose paths look wrong. javascripts/vendor/javascripts/ i'm guessing is meant to be just javascripts/. Any ideas?\n. oops didnt mean to close sorry\n. Woohoo! all working. Excellent work guys!\n. ",
    "jupy": "My OS is Ubuntu 12.04.1 LTS\nI've installed grunt globally. Here is the result:\n\ncake watch\npath.existsSync is now called fs.existsSync.\nDefault database not set, using Memory store\nRunning \"copy:js\" (copy) task\nCopied 35 files.\nRunning \"copy:css\" (copy) task\nCopied 2 files.\nRunning \"coffee:all\" (coffee) task\nRunning \"less:bootstrap\" (less) task\nRunning \"stylus:compile\" (stylus) task\nFile 'public/stylesheets/app/stylesheets/client/application.css' created.\nRunning \"templates:all\" (templates) task\nRunning \"watch\" task\nWaiting...\nIt seems cake hangs after 'Running \"watch\" task'.\nIf I run grunt directly, I have the same result.\nCould you help?\n. Ok. Thank you very much.\n. My OS is Ubuntu 12.04.1 LTS\nI've installed grunt globally. Here is the result:\n\ncake watch\npath.existsSync is now called fs.existsSync.\nDefault database not set, using Memory store\nRunning \"copy:js\" (copy) task\nCopied 35 files.\nRunning \"copy:css\" (copy) task\nCopied 2 files.\nRunning \"coffee:all\" (coffee) task\nRunning \"less:bootstrap\" (less) task\nRunning \"stylus:compile\" (stylus) task\nFile 'public/stylesheets/app/stylesheets/client/application.css' created.\nRunning \"templates:all\" (templates) task\nRunning \"watch\" task\nWaiting...\nIt seems cake hangs after 'Running \"watch\" task'.\nIf I run grunt directly, I have the same result.\nCould you help?\n. Ok. Thank you very much.\n. ",
    "bendangelo": "Ok, so i'm following the generator commands:\ncd app\ntower generate scaffold Post title:string body:text belongsTo:user\nI got an issue running tower generate:\nError: Cannot find module 'tower'\nFixed it by running:\nnpm install tower\nAm I doing this right?\n. Looks like I had to install lots of packages to even run:\n    tower server -p 3000\nI think these should be added as dependencies or mentioned on the site:\n    socket.io, mongodb, coffeecup, coffee-script and chokidar\nNow i'm getting an error:\n    Error: Constant 'App.' wasn't found\n        at _.extend.constant (/home/blah/app/node_modules/tower/lib/tower-support/shared/shared.js:270:15)\nI was hoping the installation would go smoother. Great work so far.\n. Those steps worked for me. Except:\n    cake watch\nI'm on Ubuntu 12.04 x64. Nodejs 0.8.11. Npm 1.1.62\n. Oh sorry. It says cake is currently not installed. I couldn't find anything in npm. What is it?\n. Ok I ran:\nnpm install coffee-script -g\nand it worked. Thanks.\n. Ok, so i'm following the generator commands:\ncd app\ntower generate scaffold Post title:string body:text belongsTo:user\nI got an issue running tower generate:\nError: Cannot find module 'tower'\nFixed it by running:\nnpm install tower\nAm I doing this right?\n. Looks like I had to install lots of packages to even run:\n    tower server -p 3000\nI think these should be added as dependencies or mentioned on the site:\n    socket.io, mongodb, coffeecup, coffee-script and chokidar\nNow i'm getting an error:\n    Error: Constant 'App.' wasn't found\n        at _.extend.constant (/home/blah/app/node_modules/tower/lib/tower-support/shared/shared.js:270:15)\nI was hoping the installation would go smoother. Great work so far.\n. Those steps worked for me. Except:\n    cake watch\nI'm on Ubuntu 12.04 x64. Nodejs 0.8.11. Npm 1.1.62\n. Oh sorry. It says cake is currently not installed. I couldn't find anything in npm. What is it?\n. Ok I ran:\nnpm install coffee-script -g\nand it worked. Thanks.\n. ",
    "stevenrace": "@viatropos, I just used that to censor my user and project name.  It's something like /home/myname/towerjs_project/...\nRan npm update && npm install tower -g && npm install tower - didn't seem to change.\nThanks for the prompt help.  I'm in IRC (adriftatsea) if it's easier to discuss there...\n. Exactly (although it required npm update -g && npm install tower -g and creating a new project and merging existing content over.  No biggie.). \nThanks guys for the help.\n. Howdy,\nJust bringing this back up, as I get the above error when starting a new Towerjs project within Linux.  The above fix of forcing coffee-script to =1.3.3 within package.json works.\n. Just chiming in to point out I have this problem as well.\nFresh clone,  archlinux, etc...\n. Awesome, but the issue #376 link is '500'ing at the moment.  :/\nCan you post of the change in a gist or something in the meantime?\n. @viatropos, I just used that to censor my user and project name.  It's something like /home/myname/towerjs_project/...\nRan npm update && npm install tower -g && npm install tower - didn't seem to change.\nThanks for the prompt help.  I'm in IRC (adriftatsea) if it's easier to discuss there...\n. Exactly (although it required npm update -g && npm install tower -g and creating a new project and merging existing content over.  No biggie.). \nThanks guys for the help.\n. Howdy,\nJust bringing this back up, as I get the above error when starting a new Towerjs project within Linux.  The above fix of forcing coffee-script to =1.3.3 within package.json works.\n. Just chiming in to point out I have this problem as well.\nFresh clone,  archlinux, etc...\n. Awesome, but the issue #376 link is '500'ing at the moment.  :/\nCan you post of the change in a gist or something in the meantime?\n. ",
    "vraptor75011": "I m the one wha had the problem with model Comment today and talked with @edubkendo .\nIt seems that Tower.constant bugged because window.Comment is part of the DOM.\n. Sorry, spent 2 days playing with Towerjs and unable to get any results.\n. Already went thru the 5 parts of this tutorial and the repo Ircbot. Could not find answers to my simple questions.\nStarting from scratch \n\ntower new TowerBlog\ntower generate scaffold User name:string hasMany:posts\ntower generate scaffold Post title:string belongsTo:user\ncake build && node server\n\nFirst I create a user, then I do this \n\nhttp://0.0.0.0:3000/users/50c82d654adea12eb0000001/posts, gives \"No path matches /users/50c82d654adea12eb0000001/posts\"\nhttp://0.0.0.0:3000/users/50c82d654adea12eb0000001/posts/new, gives \"No path matches /users/50c82d654adea12eb0000001/posts/new\"\n\nI tried to write controllers either on server or client side and couldn't get this behavior.\nIf I nest the resources like this\nTower.Route.draw ->\n  @resources 'users', ->\n    @resources 'posts'\n\nhttp://0.0.0.0:3000/users/50c82d654adea12eb0000001/posts, returns to http://0.0.0.0:3000/users/50c82d654adea12eb0000001/ with a null user\non the client side, there is a userPosts action/event/controller? which I don t know how to use\n\nI m not trying more complicated at the moment. Just want to create a user, create posts that belongs to him.\nFairly simple in Rails, but here, I get stuck ...\n. I m the one wha had the problem with model Comment today and talked with @edubkendo .\nIt seems that Tower.constant bugged because window.Comment is part of the DOM.\n. Sorry, spent 2 days playing with Towerjs and unable to get any results.\n. Already went thru the 5 parts of this tutorial and the repo Ircbot. Could not find answers to my simple questions.\nStarting from scratch \n\ntower new TowerBlog\ntower generate scaffold User name:string hasMany:posts\ntower generate scaffold Post title:string belongsTo:user\ncake build && node server\n\nFirst I create a user, then I do this \n\nhttp://0.0.0.0:3000/users/50c82d654adea12eb0000001/posts, gives \"No path matches /users/50c82d654adea12eb0000001/posts\"\nhttp://0.0.0.0:3000/users/50c82d654adea12eb0000001/posts/new, gives \"No path matches /users/50c82d654adea12eb0000001/posts/new\"\n\nI tried to write controllers either on server or client side and couldn't get this behavior.\nIf I nest the resources like this\nTower.Route.draw ->\n  @resources 'users', ->\n    @resources 'posts'\n\nhttp://0.0.0.0:3000/users/50c82d654adea12eb0000001/posts, returns to http://0.0.0.0:3000/users/50c82d654adea12eb0000001/ with a null user\non the client side, there is a userPosts action/event/controller? which I don t know how to use\n\nI m not trying more complicated at the moment. Just want to create a user, create posts that belongs to him.\nFairly simple in Rails, but here, I get stuck ...\n. ",
    "tremby": "I had this issue too. Considered adding a helpful error message in this case?\n. So, we have discovered that Tower doesn't accept that nested object and the message key, so it should just be\n``` coffeescript\nclass App.Address extends Tower.Model\n  @field 'streetDirection', type: 'String'\n  @validates 'streetDirection'\n    in: ['N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW']\n@timestamps()\n```\nThe pull request I referenced this in, come to think of it, has nothing to do with this. It was kind of a follow on point.\nThis should probably stay open to remind of the documentation bug, your call.\n. Different result? Looks like the same result to me -- grunt is taking up 70% of one of your cores. That's just madness for watching for file system changes. Must be something funky happening.\n. I think if you do think conditional validation is something to add, your third example\nclass App.Address extends Tower.Model\n  @validates 'state', in: [\n      value: ['ON', ...], if: 'countryIsCA'\n    , value: ['NY', ...], if: 'countryIsUS'\n  ]\nwins for me. But I think I prefer just returning null from the function if you want to skip the validation. If you accept this suggestion, it would make sense to implement it for all the other validator types too.\nOr maybe having the function return a boolean should pass (true) or fail (false) the validation. That could potentially be more useful than just null to skip (pass) it. What seems most intuitive to you?\n. I'd argue that null (which by saying you don't want to check for presence you are allowing as a valid value) isn't a string at all, and so the string length restrictions should not apply.\n. Of course an empty string is not the same as null. I was not saying that.\n1. The way I see it, if \"presence\" is required, null is not allowed but the empty string is. Null should fail validation, empty string and strings of any length should pass. (If no value at all was given, i.e. null was not passed explicitly, the default if there is one obviously takes effect.)\n2. If you do not want to allow null or the empty string, but rather want to require a string at least 1 character long, you should validate both presence and a minimum length of 1. Now null fails, empty string fails, any string of 1 character or longer passes.\n3. If you DO want to allow null OR an empty string and have them treated differently (this is a totally valid use case) you should not require presence and have no minimum string length. Now both no value at all (null) or an empty string should pass validation, as well as longer strings.\n4. And now, my current requirement in the project I'm working on, if you DO want to allow null, or a string but that string must be two characters long, I want to validate a minimum and maximum string length of 2, but not presence. Null should pass validation, an empty string should fail, a string of length 1 should fail, a string of length 2 should pass and a string of length 3 or more should fail.\nThere are four different sets of requirements and all should be supported. It seems to me that treating \"presence\" as synonymous with \"null not allowed\" (which is what I assumed it did anyway) would solve this.\n. Was this resolved?\n. I had this issue too. Considered adding a helpful error message in this case?\n. So, we have discovered that Tower doesn't accept that nested object and the message key, so it should just be\n``` coffeescript\nclass App.Address extends Tower.Model\n  @field 'streetDirection', type: 'String'\n  @validates 'streetDirection'\n    in: ['N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW']\n@timestamps()\n```\nThe pull request I referenced this in, come to think of it, has nothing to do with this. It was kind of a follow on point.\nThis should probably stay open to remind of the documentation bug, your call.\n. Different result? Looks like the same result to me -- grunt is taking up 70% of one of your cores. That's just madness for watching for file system changes. Must be something funky happening.\n. I think if you do think conditional validation is something to add, your third example\nclass App.Address extends Tower.Model\n  @validates 'state', in: [\n      value: ['ON', ...], if: 'countryIsCA'\n    , value: ['NY', ...], if: 'countryIsUS'\n  ]\nwins for me. But I think I prefer just returning null from the function if you want to skip the validation. If you accept this suggestion, it would make sense to implement it for all the other validator types too.\nOr maybe having the function return a boolean should pass (true) or fail (false) the validation. That could potentially be more useful than just null to skip (pass) it. What seems most intuitive to you?\n. I'd argue that null (which by saying you don't want to check for presence you are allowing as a valid value) isn't a string at all, and so the string length restrictions should not apply.\n. Of course an empty string is not the same as null. I was not saying that.\n1. The way I see it, if \"presence\" is required, null is not allowed but the empty string is. Null should fail validation, empty string and strings of any length should pass. (If no value at all was given, i.e. null was not passed explicitly, the default if there is one obviously takes effect.)\n2. If you do not want to allow null or the empty string, but rather want to require a string at least 1 character long, you should validate both presence and a minimum length of 1. Now null fails, empty string fails, any string of 1 character or longer passes.\n3. If you DO want to allow null OR an empty string and have them treated differently (this is a totally valid use case) you should not require presence and have no minimum string length. Now both no value at all (null) or an empty string should pass validation, as well as longer strings.\n4. And now, my current requirement in the project I'm working on, if you DO want to allow null, or a string but that string must be two characters long, I want to validate a minimum and maximum string length of 2, but not presence. Null should pass validation, an empty string should fail, a string of length 1 should fail, a string of length 2 should pass and a string of length 3 or more should fail.\nThere are four different sets of requirements and all should be supported. It seems to me that treating \"presence\" as synonymous with \"null not allowed\" (which is what I assumed it did anyway) would solve this.\n. Was this resolved?\n. ",
    "jridgway": "I just ran into this as well.\n. I get the following after running cake watch:\n``` bash\n$ cake watch\nDefault database not set, using Memory store\nLoading \"grunt.coffee\" tasks and helpers...ERROR\n\n\nError: Constant 'App.' wasn't found\n Task \"start\" not found. Use --force to continue. \n\n\nAborted due to warnings.\n```\n. Same here. I'm digging into Tower to figure out what is going on but no luck so far.\n. @viatropos, I'm totally stuck here. I'm very excited to use your framework, but I can't even take it for a spin. Can you help out? Any tips would be greatly appreciated. Running cake watch/build before and after generating code doesn't help.\n. My node is version 0.8.12. I noticed that 0.8.13 is the latest but not the current Mac OS package version or the brew version. Should I install 0.8.13 from source? Also, I installed coffee-script and grunt locally, but no luck. Tower version is 0.4.12. Thanks for the tips! i'll keep trying.\n. Oh, I'm on Mac OS 10.6.8.\n. If it helps, here are my global modules:\n$ npm list -g\n/usr/local/lib\n\u251c\u2500\u2500 coffee-script@1.4.0\n\u251c\u2500\u252c grunt@0.3.17\n\u2502 \u251c\u2500\u2500 async@0.1.22\n\u2502 \u251c\u2500\u2500 colors@0.6.0-1\n\u2502 \u251c\u2500\u252c connect@2.4.6\n\u2502 \u2502 \u251c\u2500\u2500 bytes@0.1.0\n\u2502 \u2502 \u251c\u2500\u2500 cookie@0.0.4\n\u2502 \u2502 \u251c\u2500\u2500 crc@0.2.0\n\u2502 \u2502 \u251c\u2500\u2500 debug@0.7.0\n\u2502 \u2502 \u251c\u2500\u2500 formidable@1.0.11\n\u2502 \u2502 \u251c\u2500\u2500 fresh@0.1.0\n\u2502 \u2502 \u251c\u2500\u2500 pause@0.0.1\n\u2502 \u2502 \u251c\u2500\u2500 qs@0.5.1\n\u2502 \u2502 \u2514\u2500\u252c send@0.0.4\n\u2502 \u2502   \u251c\u2500\u2500 mime@1.2.6\n\u2502 \u2502   \u2514\u2500\u2500 range-parser@0.0.4\n\u2502 \u251c\u2500\u2500 dateformat@1.0.2-1.2.3\n\u2502 \u251c\u2500\u252c glob-whatev@0.1.8\n\u2502 \u2502 \u2514\u2500\u252c minimatch@0.2.9\n\u2502 \u2502   \u251c\u2500\u2500 lru-cache@2.0.4\n\u2502 \u2502   \u2514\u2500\u2500 sigmund@1.0.0\n\u2502 \u251c\u2500\u252c gzip-js@0.3.1\n\u2502 \u2502 \u251c\u2500\u2500 crc32@0.2.2\n\u2502 \u2502 \u2514\u2500\u2500 deflate-js@0.2.2\n\u2502 \u251c\u2500\u2500 hooker@0.2.3\n\u2502 \u251c\u2500\u252c jshint@0.9.1\n\u2502 \u2502 \u251c\u2500\u252c cli@0.4.3\n\u2502 \u2502 \u2502 \u2514\u2500\u252c glob@3.1.14\n\u2502 \u2502 \u2502   \u251c\u2500\u2500 graceful-fs@1.1.14\n\u2502 \u2502 \u2502   \u251c\u2500\u2500 inherits@1.0.0\n\u2502 \u2502 \u2502   \u2514\u2500\u252c minimatch@0.2.9\n\u2502 \u2502 \u2502     \u251c\u2500\u2500 lru-cache@2.0.4\n\u2502 \u2502 \u2502     \u2514\u2500\u2500 sigmund@1.0.0\n\u2502 \u2502 \u2514\u2500\u252c minimatch@0.0.5\n\u2502 \u2502   \u2514\u2500\u2500 lru-cache@1.0.6\n\u2502 \u251c\u2500\u252c nodeunit@0.7.4\n\u2502 \u2502 \u2514\u2500\u252c tap@0.3.1\n\u2502 \u2502   \u251c\u2500\u2500 buffer-equal@0.0.0\n\u2502 \u2502   \u251c\u2500\u2500 deep-equal@0.0.0\n\u2502 \u2502   \u251c\u2500\u252c difflet@0.2.3\n\u2502 \u2502   \u2502 \u251c\u2500\u2500 charm@0.0.8\n\u2502 \u2502   \u2502 \u2514\u2500\u2500 traverse@0.6.3\n\u2502 \u2502   \u251c\u2500\u2500 inherits@1.0.0\n\u2502 \u2502   \u251c\u2500\u2500 mkdirp@0.3.4\n\u2502 \u2502   \u251c\u2500\u252c nopt@2.0.0\n\u2502 \u2502   \u2502 \u2514\u2500\u2500 abbrev@1.0.3\n\u2502 \u2502   \u251c\u2500\u252c runforcover@0.0.2\n\u2502 \u2502   \u2502 \u2514\u2500\u252c bunker@0.1.2\n\u2502 \u2502   \u2502   \u2514\u2500\u252c burrito@0.2.12\n\u2502 \u2502   \u2502     \u251c\u2500\u2500 traverse@0.5.2\n\u2502 \u2502   \u2502     \u2514\u2500\u2500 uglify-js@1.1.1\n\u2502 \u2502   \u251c\u2500\u2500 slide@1.1.3\n\u2502 \u2502   \u2514\u2500\u2500 yamlish@0.0.5\n\u2502 \u251c\u2500\u252c nopt@1.0.10\n\u2502 \u2502 \u2514\u2500\u2500 abbrev@1.0.3\n\u2502 \u251c\u2500\u252c prompt@0.1.12\n\u2502 \u2502 \u251c\u2500\u2500 pkginfo@0.2.3\n\u2502 \u2502 \u2514\u2500\u252c winston@0.5.11\n\u2502 \u2502   \u251c\u2500\u2500 eyes@0.1.8\n\u2502 \u2502   \u251c\u2500\u252c loggly@0.3.11\n\u2502 \u2502   \u2502 \u251c\u2500\u2500 request@2.9.203\n\u2502 \u2502   \u2502 \u2514\u2500\u2500 timespan@2.2.0\n\u2502 \u2502   \u2514\u2500\u2500 stack-trace@0.0.6\n\u2502 \u251c\u2500\u2500 semver@1.0.14\n\u2502 \u251c\u2500\u252c temporary@0.0.4\n\u2502 \u2502 \u2514\u2500\u2500 package@1.0.1\n\u2502 \u251c\u2500\u2500 uglify-js@1.3.4\n\u2502 \u251c\u2500\u2500 underscore@1.2.4\n\u2502 \u2514\u2500\u2500 underscore.string@2.1.1\n\u251c\u2500\u252c npm@1.1.63\n\u2502 \u251c\u2500\u2500 abbrev@1.0.3\n\u2502 \u251c\u2500\u2500 ansi@0.1.2\n\u2502 \u251c\u2500\u2500 archy@0.0.2\n\u2502 \u251c\u2500\u2500 block-stream@0.0.6\n\u2502 \u251c\u2500\u2500 chownr@0.0.1\n\u2502 \u251c\u2500\u2500 fstream@0.1.19\n\u2502 \u251c\u2500\u252c fstream-npm@0.1.2\n\u2502 \u2502 \u2514\u2500\u2500 fstream-ignore@0.0.5\n\u2502 \u251c\u2500\u2500 glob@3.1.13\n\u2502 \u251c\u2500\u2500 graceful-fs@1.1.14\n\u2502 \u251c\u2500\u2500 inherits@1.0.0\n\u2502 \u251c\u2500\u2500 ini@1.0.5\n\u2502 \u251c\u2500\u252c init-package-json@0.0.6\n\u2502 \u2502 \u2514\u2500\u2500 promzard@0.2.0\n\u2502 \u251c\u2500\u2500 lockfile@0.2.1\n\u2502 \u251c\u2500\u2500 lru-cache@2.0.4\n\u2502 \u251c\u2500\u2500 minimatch@0.2.6\n\u2502 \u251c\u2500\u2500 mkdirp@0.3.4\n\u2502 \u251c\u2500\u2500 node-gyp@0.7.0\n\u2502 \u251c\u2500\u2500 nopt@2.0.0\n\u2502 \u251c\u2500\u252c npm-registry-client@0.2.9\n\u2502 \u2502 \u2514\u2500\u2500 couch-login@0.1.15\n\u2502 \u251c\u2500\u252c npmconf@0.0.16\n\u2502 \u2502 \u2514\u2500\u252c config-chain@1.1.2\n\u2502 \u2502   \u2514\u2500\u2500 proto-list@1.2.2\n\u2502 \u251c\u2500\u2500 npmlog@0.0.2\n\u2502 \u251c\u2500\u2500 once@1.1.1\n\u2502 \u251c\u2500\u2500 opener@1.3.0\n\u2502 \u251c\u2500\u2500 osenv@0.0.3\n\u2502 \u251c\u2500\u252c read@1.0.4\n\u2502 \u2502 \u2514\u2500\u2500 mute-stream@0.0.3\n\u2502 \u251c\u2500\u2500 read-installed@0.0.3\n\u2502 \u251c\u2500\u2500 read-package-json@0.1.7\n\u2502 \u251c\u2500\u2500 request@2.9.203\n\u2502 \u251c\u2500\u2500 retry@0.6.0\n\u2502 \u251c\u2500\u2500 rimraf@2.0.2\n\u2502 \u251c\u2500\u2500 semver@1.1.0\n\u2502 \u251c\u2500\u2500 slide@1.1.3\n\u2502 \u251c\u2500\u2500 tar@0.1.13\n\u2502 \u251c\u2500\u2500 uid-number@0.0.3\n\u2502 \u2514\u2500\u2500 which@1.0.5\n\u2514\u2500\u252c tower@0.4.2-20\n  \u251c\u2500\u2500 accounting@0.3.2\n  \u251c\u2500\u2500 ansi@0.1.2\n  \u251c\u2500\u2500 async@0.1.22\n  \u251c\u2500\u252c commander@1.0.5\n  \u2502 \u2514\u2500\u2500 keypress@0.1.0\n  \u251c\u2500\u252c connect@2.6.1\n  \u2502 \u251c\u2500\u2500 bytes@0.1.0\n  \u2502 \u251c\u2500\u2500 cookie@0.0.4\n  \u2502 \u251c\u2500\u2500 cookie-signature@0.0.1\n  \u2502 \u251c\u2500\u2500 debug@0.7.0\n  \u2502 \u251c\u2500\u2500 formidable@1.0.11\n  \u2502 \u251c\u2500\u2500 pause@0.0.1\n  \u2502 \u2514\u2500\u252c send@0.1.0\n  \u2502   \u251c\u2500\u2500 mime@1.2.6\n  \u2502   \u2514\u2500\u2500 range-parser@0.0.4\n  \u251c\u2500\u2500 crc@0.2.0\n  \u251c\u2500\u2500 ejs@0.8.3\n  \u251c\u2500\u2500 ember-metal-node@1.0.0-pre\n  \u251c\u2500\u2500 ember-runtime-node@1.0.0-pre\n  \u251c\u2500\u2500 ember-states-node@1.0.0-pre\n  \u251c\u2500\u252c express@3.0.0\n  \u2502 \u251c\u2500\u2500 commander@0.6.1\n  \u2502 \u251c\u2500\u252c connect@2.6.0\n  \u2502 \u2502 \u251c\u2500\u2500 bytes@0.1.0\n  \u2502 \u2502 \u251c\u2500\u2500 formidable@1.0.11\n  \u2502 \u2502 \u251c\u2500\u2500 pause@0.0.1\n  \u2502 \u2502 \u2514\u2500\u252c send@0.0.4\n  \u2502 \u2502   \u2514\u2500\u2500 mime@1.2.6\n  \u2502 \u251c\u2500\u2500 cookie@0.0.4\n  \u2502 \u251c\u2500\u2500 debug@0.7.0\n  \u2502 \u251c\u2500\u2500 methods@0.0.1\n  \u2502 \u251c\u2500\u2500 mkdirp@0.3.3\n  \u2502 \u251c\u2500\u2500 range-parser@0.0.4\n  \u2502 \u2514\u2500\u252c send@0.1.0\n  \u2502   \u2514\u2500\u2500 mime@1.2.6\n  \u251c\u2500\u2500 fresh@0.1.0\n  \u251c\u2500\u2500 geolib@1.2.2\n  \u251c\u2500\u2500 gm@1.4.2\n  \u251c\u2500\u252c grunt-contrib-less@0.3.2\n  \u2502 \u251c\u2500\u2500 grunt-lib-contrib@0.3.0\n  \u2502 \u2514\u2500\u2500 less@1.3.1\n  \u251c\u2500\u2500 inflection@1.2.3\n  \u251c\u2500\u2500 mime@1.2.7\n  \u251c\u2500\u2500 mint@0.3.5\n  \u251c\u2500\u2500 moment@1.7.2\n  \u251c\u2500\u2500 node-uuid@1.4.0\n  \u251c\u2500\u2500 qs@0.5.1\n  \u251c\u2500\u252c superagent@0.9.7\n  \u2502 \u251c\u2500\u2500 cookiejar@1.3.0\n  \u2502 \u251c\u2500\u2500 emitter-component@0.0.5\n  \u2502 \u251c\u2500\u2500 formidable@1.0.9\n  \u2502 \u251c\u2500\u2500 methods@0.0.1\n  \u2502 \u251c\u2500\u2500 mime@1.2.5\n  \u2502 \u2514\u2500\u2500 qs@0.4.2\n  \u251c\u2500\u2500 temp@0.4.0\n  \u251c\u2500\u252c term-css@1.0.0\n  \u2502 \u2514\u2500\u252c css@1.0.1\n  \u2502   \u251c\u2500\u252c css-parse@1.0.1\n  \u2502   \u2502 \u2514\u2500\u2500 debug@0.7.0\n  \u2502   \u2514\u2500\u2500 css-stringify@1.0.1\n  \u251c\u2500\u2500 underscore@1.4.2\n  \u251c\u2500\u2500 underscore.string@2.3.0\n  \u251c\u2500\u2500 URIjs@1.7.4\n  \u251c\u2500\u252c useragent@1.1.0\n  \u2502 \u251c\u2500\u2500 request@2.9.202\n  \u2502 \u251c\u2500\u2500 semver@1.0.14\n  \u2502 \u2514\u2500\u2500 yamlparser@0.0.2\n  \u251c\u2500\u2500 validator@0.4.13\n  \u251c\u2500\u2500 which@1.0.5\n  \u2514\u2500\u2500 wrench@1.3.9\nAnd here are my local:\n$ npm list\ngdg@0.1.0 /Users/jridgway/gdg\n\u251c\u2500\u2500 async@0.1.22\n\u251c\u2500\u2500 chai@1.3.0\n\u251c\u2500\u2500 chokidar@0.4.0\n\u251c\u2500\u252c cli-table@0.2.0\n\u2502 \u2514\u2500\u2500 colors@0.3.0\n\u251c\u2500\u2500 coffee-script@1.4.0\n\u251c\u2500\u252c coffeecup@0.3.17\n\u2502 \u251c\u2500\u2500 coffee-script@1.3.3\n\u2502 \u251c\u2500\u2500 optparse@1.0.3\n\u2502 \u251c\u2500\u252c stylus@0.27.2\n\u2502 \u2502 \u251c\u2500\u2500 cssom@0.2.5\n\u2502 \u2502 \u251c\u2500\u2500 debug@0.7.0\n\u2502 \u2502 \u2514\u2500\u2500 mkdirp@0.3.4\n\u2502 \u2514\u2500\u2500 uglify-js@1.2.6\n\u251c\u2500\u2500 ejs@0.8.3\n\u251c\u2500\u2500 Faker@0.1.3\n\u251c\u2500\u2500 fibers@0.6.9\n\u251c\u2500\u252c grunt-contrib@0.3.0\n\u2502 \u251c\u2500\u252c grunt-contrib-clean@0.3.1\n\u2502 \u2502 \u251c\u2500\u2500 grunt-lib-contrib@0.3.0\n\u2502 \u2502 \u2514\u2500\u252c rimraf@2.0.2\n\u2502 \u2502   \u2514\u2500\u2500 graceful-fs@1.1.14\n\u2502 \u251c\u2500\u252c grunt-contrib-coffee@0.3.2\n\u2502 \u2502 \u251c\u2500\u2500 coffee-script@1.3.3\n\u2502 \u2502 \u2514\u2500\u2500 grunt-lib-contrib@0.3.0\n\u2502 \u251c\u2500\u252c grunt-contrib-compress@0.3.2\n\u2502 \u2502 \u251c\u2500\u2500 archiver@0.1.0\n\u2502 \u2502 \u251c\u2500\u252c fstream@0.1.19\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 graceful-fs@1.1.14\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 inherits@1.0.0\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 mkdirp@0.3.4\n\u2502 \u2502 \u251c\u2500\u2500 grunt-lib-contrib@0.3.0\n\u2502 \u2502 \u251c\u2500\u252c rimraf@2.0.2\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 graceful-fs@1.1.14\n\u2502 \u2502 \u2514\u2500\u252c tar@0.1.13\n\u2502 \u2502   \u251c\u2500\u2500 block-stream@0.0.6\n\u2502 \u2502   \u2514\u2500\u2500 inherits@1.0.0\n\u2502 \u251c\u2500\u252c grunt-contrib-copy@0.3.2\n\u2502 \u2502 \u2514\u2500\u2500 grunt-lib-contrib@0.3.0\n\u2502 \u251c\u2500\u252c grunt-contrib-handlebars@0.3.2\n\u2502 \u2502 \u251c\u2500\u2500 grunt-lib-contrib@0.3.0\n\u2502 \u2502 \u2514\u2500\u252c handlebars@1.0.7\n\u2502 \u2502   \u251c\u2500\u252c optimist@0.3.5\n\u2502 \u2502   \u2502 \u2514\u2500\u2500 wordwrap@0.0.2\n\u2502 \u2502   \u2514\u2500\u2500 uglify-js@1.2.6\n\u2502 \u251c\u2500\u252c grunt-contrib-jade@0.3.1\n\u2502 \u2502 \u251c\u2500\u2500 grunt-lib-contrib@0.3.0\n\u2502 \u2502 \u2514\u2500\u252c jade@0.27.6\n\u2502 \u2502   \u251c\u2500\u2500 commander@0.6.1\n\u2502 \u2502   \u2514\u2500\u2500 mkdirp@0.3.4\n\u2502 \u251c\u2500\u252c grunt-contrib-jst@0.3.1\n\u2502 \u2502 \u251c\u2500\u2500 grunt-lib-contrib@0.3.0\n\u2502 \u2502 \u2514\u2500\u2500 underscore@1.3.3\n\u2502 \u251c\u2500\u252c grunt-contrib-mincss@0.3.1\n\u2502 \u2502 \u251c\u2500\u252c clean-css@0.4.2\n\u2502 \u2502 \u2502 \u2514\u2500\u252c optimist@0.3.5\n\u2502 \u2502 \u2502   \u2514\u2500\u2500 wordwrap@0.0.2\n\u2502 \u2502 \u251c\u2500\u2500 grunt-lib-contrib@0.3.0\n\u2502 \u2502 \u2514\u2500\u252c gzip-js@0.3.1\n\u2502 \u2502   \u251c\u2500\u2500 crc32@0.2.2\n\u2502 \u2502   \u2514\u2500\u2500 deflate-js@0.2.2\n\u2502 \u251c\u2500\u252c grunt-contrib-requirejs@0.3.3\n\u2502 \u2502 \u251c\u2500\u2500 grunt-lib-contrib@0.3.0\n\u2502 \u2502 \u2514\u2500\u2500 requirejs@2.1.1\n\u2502 \u2514\u2500\u252c grunt-contrib-yuidoc@0.3.2\n\u2502   \u251c\u2500\u2500 grunt-lib-contrib@0.3.0\n\u2502   \u2514\u2500\u252c yuidocjs@0.3.30\n\u2502     \u251c\u2500\u252c express@2.5.11\n\u2502     \u2502 \u251c\u2500\u252c connect@1.9.2\n\u2502     \u2502 \u2502 \u2514\u2500\u2500 formidable@1.0.11\n\u2502     \u2502 \u251c\u2500\u2500 mime@1.2.4\n\u2502     \u2502 \u251c\u2500\u2500 mkdirp@0.3.0\n\u2502     \u2502 \u2514\u2500\u2500 qs@0.4.2\n\u2502     \u251c\u2500\u2500 graceful-fs@1.1.14\n\u2502     \u251c\u2500\u252c minimatch@0.1.5\n\u2502     \u2502 \u2514\u2500\u2500 lru-cache@1.0.6\n\u2502     \u251c\u2500\u2500 node-markdown@0.1.1\n\u2502     \u251c\u2500\u2500 rimraf@2.0.2\n\u2502     \u2514\u2500\u252c yui@3.7.3\n\u2502       \u2514\u2500\u2500 request@2.9.202\n\u251c\u2500\u252c grunt-contrib-less@0.3.2\n\u2502 \u2514\u2500\u2500 grunt-lib-contrib@0.3.0\n\u251c\u2500\u252c grunt-contrib-stylus@0.3.1\n\u2502 \u251c\u2500\u2500 grunt-lib-contrib@0.3.0\n\u2502 \u251c\u2500\u2500 nib@0.8.2\n\u2502 \u2514\u2500\u252c stylus@0.29.0\n\u2502   \u251c\u2500\u2500 cssom@0.2.5\n\u2502   \u251c\u2500\u2500 debug@0.7.0\n\u2502   \u2514\u2500\u2500 mkdirp@0.3.4\n\u251c\u2500\u2500 gzip@0.1.0\n\u251c\u2500\u252c knox@0.3.1\n\u2502 \u2514\u2500\u2500 mime@1.2.7\n\u251c\u2500\u252c kue@0.4.0\n\u2502 \u251c\u2500\u252c express@2.5.10\n\u2502 \u2502 \u251c\u2500\u252c connect@1.9.2\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 formidable@1.0.11\n\u2502 \u2502 \u251c\u2500\u2500 mime@1.2.4\n\u2502 \u2502 \u251c\u2500\u2500 mkdirp@0.3.0\n\u2502 \u2502 \u2514\u2500\u2500 qs@0.4.2\n\u2502 \u251c\u2500\u252c jade@0.26.3\n\u2502 \u2502 \u251c\u2500\u2500 commander@0.6.1\n\u2502 \u2502 \u2514\u2500\u2500 mkdirp@0.3.0\n\u2502 \u251c\u2500\u2500 nib@0.5.0\n\u2502 \u251c\u2500\u252c redis@0.7.2\n\u2502 \u2502 \u2514\u2500\u2500 hiredis@0.1.14\n\u2502 \u251c\u2500\u252c reds@0.1.4\n\u2502 \u2502 \u2514\u2500\u252c natural@0.0.69\n\u2502 \u2502   \u251c\u2500\u2500 apparatus@0.0.6\n\u2502 \u2502   \u251c\u2500\u2500 sylvester@0.0.21\n\u2502 \u2502   \u2514\u2500\u2500 underscore@1.4.2\n\u2502 \u2514\u2500\u252c stylus@0.27.2\n\u2502   \u251c\u2500\u2500 cssom@0.2.5\n\u2502   \u251c\u2500\u2500 debug@0.7.0\n\u2502   \u2514\u2500\u2500 mkdirp@0.3.4\n\u251c\u2500\u2500 less@1.3.1\n\u251c\u2500\u252c mocha@1.6.0\n\u2502 \u251c\u2500\u2500 commander@0.6.1\n\u2502 \u251c\u2500\u2500 debug@0.7.0\n\u2502 \u251c\u2500\u2500 diff@1.0.2\n\u2502 \u251c\u2500\u2500 growl@1.5.1\n\u2502 \u251c\u2500\u252c jade@0.26.3\n\u2502 \u2502 \u2514\u2500\u2500 mkdirp@0.3.0\n\u2502 \u251c\u2500\u2500 mkdirp@0.3.3\n\u2502 \u2514\u2500\u2500 ms@0.3.0\n\u251c\u2500\u252c mongodb@1.1.11\n\u2502 \u2514\u2500\u2500 bson@0.1.5\n\u251c\u2500\u252c nodemailer@0.3.28\n\u2502 \u251c\u2500\u252c mailcomposer@0.1.21\n\u2502 \u2502 \u251c\u2500\u2500 mime@1.2.7\n\u2502 \u2502 \u2514\u2500\u252c mimelib@0.2.7\n\u2502 \u2502   \u251c\u2500\u2500 addressparser@0.1.3\n\u2502 \u2502   \u2514\u2500\u252c encoding@0.1.4\n\u2502 \u2502     \u251c\u2500\u2500 iconv@1.2.3\n\u2502 \u2502     \u2514\u2500\u2500 iconv-lite@0.2.5\n\u2502 \u251c\u2500\u252c optimist@0.3.5\n\u2502 \u2502 \u2514\u2500\u2500 wordwrap@0.0.2\n\u2502 \u2514\u2500\u252c simplesmtp@0.1.25\n\u2502   \u251c\u2500\u2500 rai@0.1.6\n\u2502   \u2514\u2500\u252c xoauth2@0.1.3\n\u2502     \u2514\u2500\u252c request@2.11.4\n\u2502       \u251c\u2500\u252c form-data@0.0.3\n\u2502       \u2502 \u251c\u2500\u2500 async@0.1.9\n\u2502       \u2502 \u2514\u2500\u252c combined-stream@0.0.3\n\u2502       \u2502   \u2514\u2500\u2500 delayed-stream@0.0.5\n\u2502       \u2514\u2500\u2500 mime@1.2.7\n\u251c\u2500\u252c sinon@1.5.0\n\u2502 \u2514\u2500\u252c buster-format@0.5.5\n\u2502   \u2514\u2500\u2500 buster-core@0.6.4\n\u251c\u2500\u252c socket.io@0.9.10\n\u2502 \u251c\u2500\u2500 policyfile@0.0.4\n\u2502 \u2514\u2500\u252c redis@0.7.2\n\u2502   \u2514\u2500\u2500 hiredis@0.1.14\n\u251c\u2500\u252c socket.io-client@0.9.10\n\u2502 \u251c\u2500\u252c active-x-obfuscator@0.0.1\n\u2502 \u2502 \u2514\u2500\u2500 zeparser@0.0.5\n\u2502 \u251c\u2500\u2500 uglify-js@1.2.5\n\u2502 \u251c\u2500\u252c ws@0.4.22\n\u2502 \u2502 \u251c\u2500\u2500 commander@0.6.1\n\u2502 \u2502 \u251c\u2500\u2500 options@0.0.3\n\u2502 \u2502 \u2514\u2500\u2500 tinycolor@0.0.1\n\u2502 \u2514\u2500\u2500 xmlhttprequest@1.4.2\n\u251c\u2500\u252c stylus@0.30.1\n\u2502 \u251c\u2500\u2500 cssom@0.2.5\n\u2502 \u251c\u2500\u2500 debug@0.7.0\n\u2502 \u2514\u2500\u2500 mkdirp@0.3.4\n\u251c\u2500\u252c superagent@0.9.7\n\u2502 \u251c\u2500\u2500 cookiejar@1.3.0\n\u2502 \u251c\u2500\u2500 emitter-component@0.0.5\n\u2502 \u251c\u2500\u2500 formidable@1.0.9\n\u2502 \u251c\u2500\u2500 methods@0.0.1\n\u2502 \u251c\u2500\u2500 mime@1.2.5\n\u2502 \u2514\u2500\u2500 qs@0.4.2\n\u251c\u2500\u252c tower@0.4.2-20\n\u2502 \u251c\u2500\u2500 accounting@0.3.2\n\u2502 \u251c\u2500\u2500 ansi@0.1.2\n\u2502 \u251c\u2500\u252c commander@1.0.5\n\u2502 \u2502 \u2514\u2500\u2500 keypress@0.1.0\n\u2502 \u251c\u2500\u252c connect@2.6.1\n\u2502 \u2502 \u251c\u2500\u2500 bytes@0.1.0\n\u2502 \u2502 \u251c\u2500\u2500 cookie@0.0.4\n\u2502 \u2502 \u251c\u2500\u2500 cookie-signature@0.0.1\n\u2502 \u2502 \u251c\u2500\u2500 debug@0.7.0\n\u2502 \u2502 \u251c\u2500\u2500 formidable@1.0.11\n\u2502 \u2502 \u251c\u2500\u2500 pause@0.0.1\n\u2502 \u2502 \u2514\u2500\u252c send@0.1.0\n\u2502 \u2502   \u251c\u2500\u2500 mime@1.2.6\n\u2502 \u2502   \u2514\u2500\u2500 range-parser@0.0.4\n\u2502 \u251c\u2500\u2500 crc@0.2.0\n\u2502 \u251c\u2500\u2500 ember-metal-node@1.0.0-pre\n\u2502 \u251c\u2500\u2500 ember-runtime-node@1.0.0-pre\n\u2502 \u251c\u2500\u2500 ember-states-node@1.0.0-pre\n\u2502 \u251c\u2500\u252c express@3.0.0\n\u2502 \u2502 \u251c\u2500\u2500 commander@0.6.1\n\u2502 \u2502 \u251c\u2500\u252c connect@2.6.0\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 bytes@0.1.0\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 formidable@1.0.11\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 pause@0.0.1\n\u2502 \u2502 \u2502 \u2514\u2500\u252c send@0.0.4\n\u2502 \u2502 \u2502   \u2514\u2500\u2500 mime@1.2.6\n\u2502 \u2502 \u251c\u2500\u2500 cookie@0.0.4\n\u2502 \u2502 \u251c\u2500\u2500 debug@0.7.0\n\u2502 \u2502 \u251c\u2500\u2500 methods@0.0.1\n\u2502 \u2502 \u251c\u2500\u2500 mkdirp@0.3.3\n\u2502 \u2502 \u251c\u2500\u2500 range-parser@0.0.4\n\u2502 \u2502 \u2514\u2500\u252c send@0.1.0\n\u2502 \u2502   \u2514\u2500\u2500 mime@1.2.6\n\u2502 \u251c\u2500\u2500 fresh@0.1.0\n\u2502 \u251c\u2500\u2500 geolib@1.2.2\n\u2502 \u251c\u2500\u2500 gm@1.4.2\n\u2502 \u251c\u2500\u2500 inflection@1.2.3\n\u2502 \u251c\u2500\u2500 mime@1.2.7\n\u2502 \u251c\u2500\u2500 mint@0.3.5\n\u2502 \u251c\u2500\u2500 moment@1.7.2\n\u2502 \u251c\u2500\u2500 node-uuid@1.4.0\n\u2502 \u251c\u2500\u2500 qs@0.5.1\n\u2502 \u251c\u2500\u2500 temp@0.4.0\n\u2502 \u251c\u2500\u252c term-css@1.0.0\n\u2502 \u2502 \u2514\u2500\u252c css@1.0.1\n\u2502 \u2502   \u251c\u2500\u252c css-parse@1.0.1\n\u2502 \u2502   \u2502 \u2514\u2500\u2500 debug@0.7.0\n\u2502 \u2502   \u2514\u2500\u2500 css-stringify@1.0.1\n\u2502 \u251c\u2500\u2500 underscore@1.4.2\n\u2502 \u251c\u2500\u2500 underscore.string@2.3.0\n\u2502 \u251c\u2500\u2500 URIjs@1.7.4\n\u2502 \u251c\u2500\u252c useragent@1.1.0\n\u2502 \u2502 \u251c\u2500\u2500 request@2.9.202\n\u2502 \u2502 \u251c\u2500\u2500 semver@1.0.14\n\u2502 \u2502 \u2514\u2500\u2500 yamlparser@0.0.2\n\u2502 \u2514\u2500\u2500 validator@0.4.13\n\u251c\u2500\u2500 uglify-js@1.3.4\n\u251c\u2500\u2500 which@1.0.5\n\u2514\u2500\u2500 wrench@1.3.9\n. I installed tower with npm install, not link. I am not using a github clone, however, I did at one point try installing (npm install) from the github master branch with no luck. I'm currently using the npm install tower -g method.\n. Same here. I did notice though that coffee-script was installed multiple times at 1.3.3 and 1.4.0. It looks like Tower wants both somehow. I forced it so that it was using 1.3.3 both in my app and in Tower but no luck. I'll keep swinging. Thanks for all the feedback!\n. This is what I get from cake build with console.log App.UsersController.metadata() in both the server and client users controllers:\nbash\n$ cake build\nDefault database not set, using Memory store\n{ className: 'Controller',\n  resourceName: '',\n  resourceType: '',\n  collectionName: '',\n  params: \n   { page: \n      { controller: undefined,\n        key: 'page',\n        attribute: 'page',\n        modelName: undefined,\n        exact: false,\n        default: undefined,\n        allowNegative: false,\n        allowFloat: true,\n        allowRange: false },\n     limit: \n      { controller: undefined,\n        key: 'limit',\n        attribute: 'limit',\n        modelName: undefined,\n        exact: false,\n        default: undefined,\n        allowNegative: false,\n        allowFloat: true,\n        allowRange: false },\n     sort: \n      { controller: undefined,\n        key: 'sort',\n        attribute: 'sort',\n        modelName: undefined,\n        exact: false,\n        default: undefined },\n     fields: \n      { controller: undefined,\n        key: 'fields',\n        attribute: 'fields',\n        modelName: undefined,\n        exact: false,\n        default: undefined },\n     createdAt: \n      { controller: undefined,\n        key: 'createdAt',\n        attribute: 'createdAt',\n        modelName: undefined,\n        exact: false,\n        default: undefined },\n     updatedAt: \n      { controller: undefined,\n        key: 'updatedAt',\n        attribute: 'updatedAt',\n        modelName: undefined,\n        exact: false,\n        default: undefined } },\n  renderers: { text: [Function], json: [Function] },\n  mimes: { json: {}, html: {} },\n  callbacks: { action: { before: [Object], after: [] } },\n  helpers: [],\n  belongsTo: [],\n  subscriptions: [],\n  layout: 'application',\n  scopes: {},\n  scopeNames: [] }\n. I think you're right @viatropos about coffee-inheritance.js, I just don't know how to go about fixing it.\n. Hey, I finally worked through it by explicitly requiring coffee-script to version 1.3.3 in packages.json rather than requiring any version >= 1.3.3:  \"coffee-script\": \"= 1.3.3\",\n. I just ran into this as well.\n. I get the following after running cake watch:\n``` bash\n$ cake watch\nDefault database not set, using Memory store\nLoading \"grunt.coffee\" tasks and helpers...ERROR\n\n\nError: Constant 'App.' wasn't found\n Task \"start\" not found. Use --force to continue. \n\n\nAborted due to warnings.\n```\n. Same here. I'm digging into Tower to figure out what is going on but no luck so far.\n. @viatropos, I'm totally stuck here. I'm very excited to use your framework, but I can't even take it for a spin. Can you help out? Any tips would be greatly appreciated. Running cake watch/build before and after generating code doesn't help.\n. My node is version 0.8.12. I noticed that 0.8.13 is the latest but not the current Mac OS package version or the brew version. Should I install 0.8.13 from source? Also, I installed coffee-script and grunt locally, but no luck. Tower version is 0.4.12. Thanks for the tips! i'll keep trying.\n. Oh, I'm on Mac OS 10.6.8.\n. If it helps, here are my global modules:\n$ npm list -g\n/usr/local/lib\n\u251c\u2500\u2500 coffee-script@1.4.0\n\u251c\u2500\u252c grunt@0.3.17\n\u2502 \u251c\u2500\u2500 async@0.1.22\n\u2502 \u251c\u2500\u2500 colors@0.6.0-1\n\u2502 \u251c\u2500\u252c connect@2.4.6\n\u2502 \u2502 \u251c\u2500\u2500 bytes@0.1.0\n\u2502 \u2502 \u251c\u2500\u2500 cookie@0.0.4\n\u2502 \u2502 \u251c\u2500\u2500 crc@0.2.0\n\u2502 \u2502 \u251c\u2500\u2500 debug@0.7.0\n\u2502 \u2502 \u251c\u2500\u2500 formidable@1.0.11\n\u2502 \u2502 \u251c\u2500\u2500 fresh@0.1.0\n\u2502 \u2502 \u251c\u2500\u2500 pause@0.0.1\n\u2502 \u2502 \u251c\u2500\u2500 qs@0.5.1\n\u2502 \u2502 \u2514\u2500\u252c send@0.0.4\n\u2502 \u2502   \u251c\u2500\u2500 mime@1.2.6\n\u2502 \u2502   \u2514\u2500\u2500 range-parser@0.0.4\n\u2502 \u251c\u2500\u2500 dateformat@1.0.2-1.2.3\n\u2502 \u251c\u2500\u252c glob-whatev@0.1.8\n\u2502 \u2502 \u2514\u2500\u252c minimatch@0.2.9\n\u2502 \u2502   \u251c\u2500\u2500 lru-cache@2.0.4\n\u2502 \u2502   \u2514\u2500\u2500 sigmund@1.0.0\n\u2502 \u251c\u2500\u252c gzip-js@0.3.1\n\u2502 \u2502 \u251c\u2500\u2500 crc32@0.2.2\n\u2502 \u2502 \u2514\u2500\u2500 deflate-js@0.2.2\n\u2502 \u251c\u2500\u2500 hooker@0.2.3\n\u2502 \u251c\u2500\u252c jshint@0.9.1\n\u2502 \u2502 \u251c\u2500\u252c cli@0.4.3\n\u2502 \u2502 \u2502 \u2514\u2500\u252c glob@3.1.14\n\u2502 \u2502 \u2502   \u251c\u2500\u2500 graceful-fs@1.1.14\n\u2502 \u2502 \u2502   \u251c\u2500\u2500 inherits@1.0.0\n\u2502 \u2502 \u2502   \u2514\u2500\u252c minimatch@0.2.9\n\u2502 \u2502 \u2502     \u251c\u2500\u2500 lru-cache@2.0.4\n\u2502 \u2502 \u2502     \u2514\u2500\u2500 sigmund@1.0.0\n\u2502 \u2502 \u2514\u2500\u252c minimatch@0.0.5\n\u2502 \u2502   \u2514\u2500\u2500 lru-cache@1.0.6\n\u2502 \u251c\u2500\u252c nodeunit@0.7.4\n\u2502 \u2502 \u2514\u2500\u252c tap@0.3.1\n\u2502 \u2502   \u251c\u2500\u2500 buffer-equal@0.0.0\n\u2502 \u2502   \u251c\u2500\u2500 deep-equal@0.0.0\n\u2502 \u2502   \u251c\u2500\u252c difflet@0.2.3\n\u2502 \u2502   \u2502 \u251c\u2500\u2500 charm@0.0.8\n\u2502 \u2502   \u2502 \u2514\u2500\u2500 traverse@0.6.3\n\u2502 \u2502   \u251c\u2500\u2500 inherits@1.0.0\n\u2502 \u2502   \u251c\u2500\u2500 mkdirp@0.3.4\n\u2502 \u2502   \u251c\u2500\u252c nopt@2.0.0\n\u2502 \u2502   \u2502 \u2514\u2500\u2500 abbrev@1.0.3\n\u2502 \u2502   \u251c\u2500\u252c runforcover@0.0.2\n\u2502 \u2502   \u2502 \u2514\u2500\u252c bunker@0.1.2\n\u2502 \u2502   \u2502   \u2514\u2500\u252c burrito@0.2.12\n\u2502 \u2502   \u2502     \u251c\u2500\u2500 traverse@0.5.2\n\u2502 \u2502   \u2502     \u2514\u2500\u2500 uglify-js@1.1.1\n\u2502 \u2502   \u251c\u2500\u2500 slide@1.1.3\n\u2502 \u2502   \u2514\u2500\u2500 yamlish@0.0.5\n\u2502 \u251c\u2500\u252c nopt@1.0.10\n\u2502 \u2502 \u2514\u2500\u2500 abbrev@1.0.3\n\u2502 \u251c\u2500\u252c prompt@0.1.12\n\u2502 \u2502 \u251c\u2500\u2500 pkginfo@0.2.3\n\u2502 \u2502 \u2514\u2500\u252c winston@0.5.11\n\u2502 \u2502   \u251c\u2500\u2500 eyes@0.1.8\n\u2502 \u2502   \u251c\u2500\u252c loggly@0.3.11\n\u2502 \u2502   \u2502 \u251c\u2500\u2500 request@2.9.203\n\u2502 \u2502   \u2502 \u2514\u2500\u2500 timespan@2.2.0\n\u2502 \u2502   \u2514\u2500\u2500 stack-trace@0.0.6\n\u2502 \u251c\u2500\u2500 semver@1.0.14\n\u2502 \u251c\u2500\u252c temporary@0.0.4\n\u2502 \u2502 \u2514\u2500\u2500 package@1.0.1\n\u2502 \u251c\u2500\u2500 uglify-js@1.3.4\n\u2502 \u251c\u2500\u2500 underscore@1.2.4\n\u2502 \u2514\u2500\u2500 underscore.string@2.1.1\n\u251c\u2500\u252c npm@1.1.63\n\u2502 \u251c\u2500\u2500 abbrev@1.0.3\n\u2502 \u251c\u2500\u2500 ansi@0.1.2\n\u2502 \u251c\u2500\u2500 archy@0.0.2\n\u2502 \u251c\u2500\u2500 block-stream@0.0.6\n\u2502 \u251c\u2500\u2500 chownr@0.0.1\n\u2502 \u251c\u2500\u2500 fstream@0.1.19\n\u2502 \u251c\u2500\u252c fstream-npm@0.1.2\n\u2502 \u2502 \u2514\u2500\u2500 fstream-ignore@0.0.5\n\u2502 \u251c\u2500\u2500 glob@3.1.13\n\u2502 \u251c\u2500\u2500 graceful-fs@1.1.14\n\u2502 \u251c\u2500\u2500 inherits@1.0.0\n\u2502 \u251c\u2500\u2500 ini@1.0.5\n\u2502 \u251c\u2500\u252c init-package-json@0.0.6\n\u2502 \u2502 \u2514\u2500\u2500 promzard@0.2.0\n\u2502 \u251c\u2500\u2500 lockfile@0.2.1\n\u2502 \u251c\u2500\u2500 lru-cache@2.0.4\n\u2502 \u251c\u2500\u2500 minimatch@0.2.6\n\u2502 \u251c\u2500\u2500 mkdirp@0.3.4\n\u2502 \u251c\u2500\u2500 node-gyp@0.7.0\n\u2502 \u251c\u2500\u2500 nopt@2.0.0\n\u2502 \u251c\u2500\u252c npm-registry-client@0.2.9\n\u2502 \u2502 \u2514\u2500\u2500 couch-login@0.1.15\n\u2502 \u251c\u2500\u252c npmconf@0.0.16\n\u2502 \u2502 \u2514\u2500\u252c config-chain@1.1.2\n\u2502 \u2502   \u2514\u2500\u2500 proto-list@1.2.2\n\u2502 \u251c\u2500\u2500 npmlog@0.0.2\n\u2502 \u251c\u2500\u2500 once@1.1.1\n\u2502 \u251c\u2500\u2500 opener@1.3.0\n\u2502 \u251c\u2500\u2500 osenv@0.0.3\n\u2502 \u251c\u2500\u252c read@1.0.4\n\u2502 \u2502 \u2514\u2500\u2500 mute-stream@0.0.3\n\u2502 \u251c\u2500\u2500 read-installed@0.0.3\n\u2502 \u251c\u2500\u2500 read-package-json@0.1.7\n\u2502 \u251c\u2500\u2500 request@2.9.203\n\u2502 \u251c\u2500\u2500 retry@0.6.0\n\u2502 \u251c\u2500\u2500 rimraf@2.0.2\n\u2502 \u251c\u2500\u2500 semver@1.1.0\n\u2502 \u251c\u2500\u2500 slide@1.1.3\n\u2502 \u251c\u2500\u2500 tar@0.1.13\n\u2502 \u251c\u2500\u2500 uid-number@0.0.3\n\u2502 \u2514\u2500\u2500 which@1.0.5\n\u2514\u2500\u252c tower@0.4.2-20\n  \u251c\u2500\u2500 accounting@0.3.2\n  \u251c\u2500\u2500 ansi@0.1.2\n  \u251c\u2500\u2500 async@0.1.22\n  \u251c\u2500\u252c commander@1.0.5\n  \u2502 \u2514\u2500\u2500 keypress@0.1.0\n  \u251c\u2500\u252c connect@2.6.1\n  \u2502 \u251c\u2500\u2500 bytes@0.1.0\n  \u2502 \u251c\u2500\u2500 cookie@0.0.4\n  \u2502 \u251c\u2500\u2500 cookie-signature@0.0.1\n  \u2502 \u251c\u2500\u2500 debug@0.7.0\n  \u2502 \u251c\u2500\u2500 formidable@1.0.11\n  \u2502 \u251c\u2500\u2500 pause@0.0.1\n  \u2502 \u2514\u2500\u252c send@0.1.0\n  \u2502   \u251c\u2500\u2500 mime@1.2.6\n  \u2502   \u2514\u2500\u2500 range-parser@0.0.4\n  \u251c\u2500\u2500 crc@0.2.0\n  \u251c\u2500\u2500 ejs@0.8.3\n  \u251c\u2500\u2500 ember-metal-node@1.0.0-pre\n  \u251c\u2500\u2500 ember-runtime-node@1.0.0-pre\n  \u251c\u2500\u2500 ember-states-node@1.0.0-pre\n  \u251c\u2500\u252c express@3.0.0\n  \u2502 \u251c\u2500\u2500 commander@0.6.1\n  \u2502 \u251c\u2500\u252c connect@2.6.0\n  \u2502 \u2502 \u251c\u2500\u2500 bytes@0.1.0\n  \u2502 \u2502 \u251c\u2500\u2500 formidable@1.0.11\n  \u2502 \u2502 \u251c\u2500\u2500 pause@0.0.1\n  \u2502 \u2502 \u2514\u2500\u252c send@0.0.4\n  \u2502 \u2502   \u2514\u2500\u2500 mime@1.2.6\n  \u2502 \u251c\u2500\u2500 cookie@0.0.4\n  \u2502 \u251c\u2500\u2500 debug@0.7.0\n  \u2502 \u251c\u2500\u2500 methods@0.0.1\n  \u2502 \u251c\u2500\u2500 mkdirp@0.3.3\n  \u2502 \u251c\u2500\u2500 range-parser@0.0.4\n  \u2502 \u2514\u2500\u252c send@0.1.0\n  \u2502   \u2514\u2500\u2500 mime@1.2.6\n  \u251c\u2500\u2500 fresh@0.1.0\n  \u251c\u2500\u2500 geolib@1.2.2\n  \u251c\u2500\u2500 gm@1.4.2\n  \u251c\u2500\u252c grunt-contrib-less@0.3.2\n  \u2502 \u251c\u2500\u2500 grunt-lib-contrib@0.3.0\n  \u2502 \u2514\u2500\u2500 less@1.3.1\n  \u251c\u2500\u2500 inflection@1.2.3\n  \u251c\u2500\u2500 mime@1.2.7\n  \u251c\u2500\u2500 mint@0.3.5\n  \u251c\u2500\u2500 moment@1.7.2\n  \u251c\u2500\u2500 node-uuid@1.4.0\n  \u251c\u2500\u2500 qs@0.5.1\n  \u251c\u2500\u252c superagent@0.9.7\n  \u2502 \u251c\u2500\u2500 cookiejar@1.3.0\n  \u2502 \u251c\u2500\u2500 emitter-component@0.0.5\n  \u2502 \u251c\u2500\u2500 formidable@1.0.9\n  \u2502 \u251c\u2500\u2500 methods@0.0.1\n  \u2502 \u251c\u2500\u2500 mime@1.2.5\n  \u2502 \u2514\u2500\u2500 qs@0.4.2\n  \u251c\u2500\u2500 temp@0.4.0\n  \u251c\u2500\u252c term-css@1.0.0\n  \u2502 \u2514\u2500\u252c css@1.0.1\n  \u2502   \u251c\u2500\u252c css-parse@1.0.1\n  \u2502   \u2502 \u2514\u2500\u2500 debug@0.7.0\n  \u2502   \u2514\u2500\u2500 css-stringify@1.0.1\n  \u251c\u2500\u2500 underscore@1.4.2\n  \u251c\u2500\u2500 underscore.string@2.3.0\n  \u251c\u2500\u2500 URIjs@1.7.4\n  \u251c\u2500\u252c useragent@1.1.0\n  \u2502 \u251c\u2500\u2500 request@2.9.202\n  \u2502 \u251c\u2500\u2500 semver@1.0.14\n  \u2502 \u2514\u2500\u2500 yamlparser@0.0.2\n  \u251c\u2500\u2500 validator@0.4.13\n  \u251c\u2500\u2500 which@1.0.5\n  \u2514\u2500\u2500 wrench@1.3.9\nAnd here are my local:\n$ npm list\ngdg@0.1.0 /Users/jridgway/gdg\n\u251c\u2500\u2500 async@0.1.22\n\u251c\u2500\u2500 chai@1.3.0\n\u251c\u2500\u2500 chokidar@0.4.0\n\u251c\u2500\u252c cli-table@0.2.0\n\u2502 \u2514\u2500\u2500 colors@0.3.0\n\u251c\u2500\u2500 coffee-script@1.4.0\n\u251c\u2500\u252c coffeecup@0.3.17\n\u2502 \u251c\u2500\u2500 coffee-script@1.3.3\n\u2502 \u251c\u2500\u2500 optparse@1.0.3\n\u2502 \u251c\u2500\u252c stylus@0.27.2\n\u2502 \u2502 \u251c\u2500\u2500 cssom@0.2.5\n\u2502 \u2502 \u251c\u2500\u2500 debug@0.7.0\n\u2502 \u2502 \u2514\u2500\u2500 mkdirp@0.3.4\n\u2502 \u2514\u2500\u2500 uglify-js@1.2.6\n\u251c\u2500\u2500 ejs@0.8.3\n\u251c\u2500\u2500 Faker@0.1.3\n\u251c\u2500\u2500 fibers@0.6.9\n\u251c\u2500\u252c grunt-contrib@0.3.0\n\u2502 \u251c\u2500\u252c grunt-contrib-clean@0.3.1\n\u2502 \u2502 \u251c\u2500\u2500 grunt-lib-contrib@0.3.0\n\u2502 \u2502 \u2514\u2500\u252c rimraf@2.0.2\n\u2502 \u2502   \u2514\u2500\u2500 graceful-fs@1.1.14\n\u2502 \u251c\u2500\u252c grunt-contrib-coffee@0.3.2\n\u2502 \u2502 \u251c\u2500\u2500 coffee-script@1.3.3\n\u2502 \u2502 \u2514\u2500\u2500 grunt-lib-contrib@0.3.0\n\u2502 \u251c\u2500\u252c grunt-contrib-compress@0.3.2\n\u2502 \u2502 \u251c\u2500\u2500 archiver@0.1.0\n\u2502 \u2502 \u251c\u2500\u252c fstream@0.1.19\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 graceful-fs@1.1.14\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 inherits@1.0.0\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 mkdirp@0.3.4\n\u2502 \u2502 \u251c\u2500\u2500 grunt-lib-contrib@0.3.0\n\u2502 \u2502 \u251c\u2500\u252c rimraf@2.0.2\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 graceful-fs@1.1.14\n\u2502 \u2502 \u2514\u2500\u252c tar@0.1.13\n\u2502 \u2502   \u251c\u2500\u2500 block-stream@0.0.6\n\u2502 \u2502   \u2514\u2500\u2500 inherits@1.0.0\n\u2502 \u251c\u2500\u252c grunt-contrib-copy@0.3.2\n\u2502 \u2502 \u2514\u2500\u2500 grunt-lib-contrib@0.3.0\n\u2502 \u251c\u2500\u252c grunt-contrib-handlebars@0.3.2\n\u2502 \u2502 \u251c\u2500\u2500 grunt-lib-contrib@0.3.0\n\u2502 \u2502 \u2514\u2500\u252c handlebars@1.0.7\n\u2502 \u2502   \u251c\u2500\u252c optimist@0.3.5\n\u2502 \u2502   \u2502 \u2514\u2500\u2500 wordwrap@0.0.2\n\u2502 \u2502   \u2514\u2500\u2500 uglify-js@1.2.6\n\u2502 \u251c\u2500\u252c grunt-contrib-jade@0.3.1\n\u2502 \u2502 \u251c\u2500\u2500 grunt-lib-contrib@0.3.0\n\u2502 \u2502 \u2514\u2500\u252c jade@0.27.6\n\u2502 \u2502   \u251c\u2500\u2500 commander@0.6.1\n\u2502 \u2502   \u2514\u2500\u2500 mkdirp@0.3.4\n\u2502 \u251c\u2500\u252c grunt-contrib-jst@0.3.1\n\u2502 \u2502 \u251c\u2500\u2500 grunt-lib-contrib@0.3.0\n\u2502 \u2502 \u2514\u2500\u2500 underscore@1.3.3\n\u2502 \u251c\u2500\u252c grunt-contrib-mincss@0.3.1\n\u2502 \u2502 \u251c\u2500\u252c clean-css@0.4.2\n\u2502 \u2502 \u2502 \u2514\u2500\u252c optimist@0.3.5\n\u2502 \u2502 \u2502   \u2514\u2500\u2500 wordwrap@0.0.2\n\u2502 \u2502 \u251c\u2500\u2500 grunt-lib-contrib@0.3.0\n\u2502 \u2502 \u2514\u2500\u252c gzip-js@0.3.1\n\u2502 \u2502   \u251c\u2500\u2500 crc32@0.2.2\n\u2502 \u2502   \u2514\u2500\u2500 deflate-js@0.2.2\n\u2502 \u251c\u2500\u252c grunt-contrib-requirejs@0.3.3\n\u2502 \u2502 \u251c\u2500\u2500 grunt-lib-contrib@0.3.0\n\u2502 \u2502 \u2514\u2500\u2500 requirejs@2.1.1\n\u2502 \u2514\u2500\u252c grunt-contrib-yuidoc@0.3.2\n\u2502   \u251c\u2500\u2500 grunt-lib-contrib@0.3.0\n\u2502   \u2514\u2500\u252c yuidocjs@0.3.30\n\u2502     \u251c\u2500\u252c express@2.5.11\n\u2502     \u2502 \u251c\u2500\u252c connect@1.9.2\n\u2502     \u2502 \u2502 \u2514\u2500\u2500 formidable@1.0.11\n\u2502     \u2502 \u251c\u2500\u2500 mime@1.2.4\n\u2502     \u2502 \u251c\u2500\u2500 mkdirp@0.3.0\n\u2502     \u2502 \u2514\u2500\u2500 qs@0.4.2\n\u2502     \u251c\u2500\u2500 graceful-fs@1.1.14\n\u2502     \u251c\u2500\u252c minimatch@0.1.5\n\u2502     \u2502 \u2514\u2500\u2500 lru-cache@1.0.6\n\u2502     \u251c\u2500\u2500 node-markdown@0.1.1\n\u2502     \u251c\u2500\u2500 rimraf@2.0.2\n\u2502     \u2514\u2500\u252c yui@3.7.3\n\u2502       \u2514\u2500\u2500 request@2.9.202\n\u251c\u2500\u252c grunt-contrib-less@0.3.2\n\u2502 \u2514\u2500\u2500 grunt-lib-contrib@0.3.0\n\u251c\u2500\u252c grunt-contrib-stylus@0.3.1\n\u2502 \u251c\u2500\u2500 grunt-lib-contrib@0.3.0\n\u2502 \u251c\u2500\u2500 nib@0.8.2\n\u2502 \u2514\u2500\u252c stylus@0.29.0\n\u2502   \u251c\u2500\u2500 cssom@0.2.5\n\u2502   \u251c\u2500\u2500 debug@0.7.0\n\u2502   \u2514\u2500\u2500 mkdirp@0.3.4\n\u251c\u2500\u2500 gzip@0.1.0\n\u251c\u2500\u252c knox@0.3.1\n\u2502 \u2514\u2500\u2500 mime@1.2.7\n\u251c\u2500\u252c kue@0.4.0\n\u2502 \u251c\u2500\u252c express@2.5.10\n\u2502 \u2502 \u251c\u2500\u252c connect@1.9.2\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 formidable@1.0.11\n\u2502 \u2502 \u251c\u2500\u2500 mime@1.2.4\n\u2502 \u2502 \u251c\u2500\u2500 mkdirp@0.3.0\n\u2502 \u2502 \u2514\u2500\u2500 qs@0.4.2\n\u2502 \u251c\u2500\u252c jade@0.26.3\n\u2502 \u2502 \u251c\u2500\u2500 commander@0.6.1\n\u2502 \u2502 \u2514\u2500\u2500 mkdirp@0.3.0\n\u2502 \u251c\u2500\u2500 nib@0.5.0\n\u2502 \u251c\u2500\u252c redis@0.7.2\n\u2502 \u2502 \u2514\u2500\u2500 hiredis@0.1.14\n\u2502 \u251c\u2500\u252c reds@0.1.4\n\u2502 \u2502 \u2514\u2500\u252c natural@0.0.69\n\u2502 \u2502   \u251c\u2500\u2500 apparatus@0.0.6\n\u2502 \u2502   \u251c\u2500\u2500 sylvester@0.0.21\n\u2502 \u2502   \u2514\u2500\u2500 underscore@1.4.2\n\u2502 \u2514\u2500\u252c stylus@0.27.2\n\u2502   \u251c\u2500\u2500 cssom@0.2.5\n\u2502   \u251c\u2500\u2500 debug@0.7.0\n\u2502   \u2514\u2500\u2500 mkdirp@0.3.4\n\u251c\u2500\u2500 less@1.3.1\n\u251c\u2500\u252c mocha@1.6.0\n\u2502 \u251c\u2500\u2500 commander@0.6.1\n\u2502 \u251c\u2500\u2500 debug@0.7.0\n\u2502 \u251c\u2500\u2500 diff@1.0.2\n\u2502 \u251c\u2500\u2500 growl@1.5.1\n\u2502 \u251c\u2500\u252c jade@0.26.3\n\u2502 \u2502 \u2514\u2500\u2500 mkdirp@0.3.0\n\u2502 \u251c\u2500\u2500 mkdirp@0.3.3\n\u2502 \u2514\u2500\u2500 ms@0.3.0\n\u251c\u2500\u252c mongodb@1.1.11\n\u2502 \u2514\u2500\u2500 bson@0.1.5\n\u251c\u2500\u252c nodemailer@0.3.28\n\u2502 \u251c\u2500\u252c mailcomposer@0.1.21\n\u2502 \u2502 \u251c\u2500\u2500 mime@1.2.7\n\u2502 \u2502 \u2514\u2500\u252c mimelib@0.2.7\n\u2502 \u2502   \u251c\u2500\u2500 addressparser@0.1.3\n\u2502 \u2502   \u2514\u2500\u252c encoding@0.1.4\n\u2502 \u2502     \u251c\u2500\u2500 iconv@1.2.3\n\u2502 \u2502     \u2514\u2500\u2500 iconv-lite@0.2.5\n\u2502 \u251c\u2500\u252c optimist@0.3.5\n\u2502 \u2502 \u2514\u2500\u2500 wordwrap@0.0.2\n\u2502 \u2514\u2500\u252c simplesmtp@0.1.25\n\u2502   \u251c\u2500\u2500 rai@0.1.6\n\u2502   \u2514\u2500\u252c xoauth2@0.1.3\n\u2502     \u2514\u2500\u252c request@2.11.4\n\u2502       \u251c\u2500\u252c form-data@0.0.3\n\u2502       \u2502 \u251c\u2500\u2500 async@0.1.9\n\u2502       \u2502 \u2514\u2500\u252c combined-stream@0.0.3\n\u2502       \u2502   \u2514\u2500\u2500 delayed-stream@0.0.5\n\u2502       \u2514\u2500\u2500 mime@1.2.7\n\u251c\u2500\u252c sinon@1.5.0\n\u2502 \u2514\u2500\u252c buster-format@0.5.5\n\u2502   \u2514\u2500\u2500 buster-core@0.6.4\n\u251c\u2500\u252c socket.io@0.9.10\n\u2502 \u251c\u2500\u2500 policyfile@0.0.4\n\u2502 \u2514\u2500\u252c redis@0.7.2\n\u2502   \u2514\u2500\u2500 hiredis@0.1.14\n\u251c\u2500\u252c socket.io-client@0.9.10\n\u2502 \u251c\u2500\u252c active-x-obfuscator@0.0.1\n\u2502 \u2502 \u2514\u2500\u2500 zeparser@0.0.5\n\u2502 \u251c\u2500\u2500 uglify-js@1.2.5\n\u2502 \u251c\u2500\u252c ws@0.4.22\n\u2502 \u2502 \u251c\u2500\u2500 commander@0.6.1\n\u2502 \u2502 \u251c\u2500\u2500 options@0.0.3\n\u2502 \u2502 \u2514\u2500\u2500 tinycolor@0.0.1\n\u2502 \u2514\u2500\u2500 xmlhttprequest@1.4.2\n\u251c\u2500\u252c stylus@0.30.1\n\u2502 \u251c\u2500\u2500 cssom@0.2.5\n\u2502 \u251c\u2500\u2500 debug@0.7.0\n\u2502 \u2514\u2500\u2500 mkdirp@0.3.4\n\u251c\u2500\u252c superagent@0.9.7\n\u2502 \u251c\u2500\u2500 cookiejar@1.3.0\n\u2502 \u251c\u2500\u2500 emitter-component@0.0.5\n\u2502 \u251c\u2500\u2500 formidable@1.0.9\n\u2502 \u251c\u2500\u2500 methods@0.0.1\n\u2502 \u251c\u2500\u2500 mime@1.2.5\n\u2502 \u2514\u2500\u2500 qs@0.4.2\n\u251c\u2500\u252c tower@0.4.2-20\n\u2502 \u251c\u2500\u2500 accounting@0.3.2\n\u2502 \u251c\u2500\u2500 ansi@0.1.2\n\u2502 \u251c\u2500\u252c commander@1.0.5\n\u2502 \u2502 \u2514\u2500\u2500 keypress@0.1.0\n\u2502 \u251c\u2500\u252c connect@2.6.1\n\u2502 \u2502 \u251c\u2500\u2500 bytes@0.1.0\n\u2502 \u2502 \u251c\u2500\u2500 cookie@0.0.4\n\u2502 \u2502 \u251c\u2500\u2500 cookie-signature@0.0.1\n\u2502 \u2502 \u251c\u2500\u2500 debug@0.7.0\n\u2502 \u2502 \u251c\u2500\u2500 formidable@1.0.11\n\u2502 \u2502 \u251c\u2500\u2500 pause@0.0.1\n\u2502 \u2502 \u2514\u2500\u252c send@0.1.0\n\u2502 \u2502   \u251c\u2500\u2500 mime@1.2.6\n\u2502 \u2502   \u2514\u2500\u2500 range-parser@0.0.4\n\u2502 \u251c\u2500\u2500 crc@0.2.0\n\u2502 \u251c\u2500\u2500 ember-metal-node@1.0.0-pre\n\u2502 \u251c\u2500\u2500 ember-runtime-node@1.0.0-pre\n\u2502 \u251c\u2500\u2500 ember-states-node@1.0.0-pre\n\u2502 \u251c\u2500\u252c express@3.0.0\n\u2502 \u2502 \u251c\u2500\u2500 commander@0.6.1\n\u2502 \u2502 \u251c\u2500\u252c connect@2.6.0\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 bytes@0.1.0\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 formidable@1.0.11\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 pause@0.0.1\n\u2502 \u2502 \u2502 \u2514\u2500\u252c send@0.0.4\n\u2502 \u2502 \u2502   \u2514\u2500\u2500 mime@1.2.6\n\u2502 \u2502 \u251c\u2500\u2500 cookie@0.0.4\n\u2502 \u2502 \u251c\u2500\u2500 debug@0.7.0\n\u2502 \u2502 \u251c\u2500\u2500 methods@0.0.1\n\u2502 \u2502 \u251c\u2500\u2500 mkdirp@0.3.3\n\u2502 \u2502 \u251c\u2500\u2500 range-parser@0.0.4\n\u2502 \u2502 \u2514\u2500\u252c send@0.1.0\n\u2502 \u2502   \u2514\u2500\u2500 mime@1.2.6\n\u2502 \u251c\u2500\u2500 fresh@0.1.0\n\u2502 \u251c\u2500\u2500 geolib@1.2.2\n\u2502 \u251c\u2500\u2500 gm@1.4.2\n\u2502 \u251c\u2500\u2500 inflection@1.2.3\n\u2502 \u251c\u2500\u2500 mime@1.2.7\n\u2502 \u251c\u2500\u2500 mint@0.3.5\n\u2502 \u251c\u2500\u2500 moment@1.7.2\n\u2502 \u251c\u2500\u2500 node-uuid@1.4.0\n\u2502 \u251c\u2500\u2500 qs@0.5.1\n\u2502 \u251c\u2500\u2500 temp@0.4.0\n\u2502 \u251c\u2500\u252c term-css@1.0.0\n\u2502 \u2502 \u2514\u2500\u252c css@1.0.1\n\u2502 \u2502   \u251c\u2500\u252c css-parse@1.0.1\n\u2502 \u2502   \u2502 \u2514\u2500\u2500 debug@0.7.0\n\u2502 \u2502   \u2514\u2500\u2500 css-stringify@1.0.1\n\u2502 \u251c\u2500\u2500 underscore@1.4.2\n\u2502 \u251c\u2500\u2500 underscore.string@2.3.0\n\u2502 \u251c\u2500\u2500 URIjs@1.7.4\n\u2502 \u251c\u2500\u252c useragent@1.1.0\n\u2502 \u2502 \u251c\u2500\u2500 request@2.9.202\n\u2502 \u2502 \u251c\u2500\u2500 semver@1.0.14\n\u2502 \u2502 \u2514\u2500\u2500 yamlparser@0.0.2\n\u2502 \u2514\u2500\u2500 validator@0.4.13\n\u251c\u2500\u2500 uglify-js@1.3.4\n\u251c\u2500\u2500 which@1.0.5\n\u2514\u2500\u2500 wrench@1.3.9\n. I installed tower with npm install, not link. I am not using a github clone, however, I did at one point try installing (npm install) from the github master branch with no luck. I'm currently using the npm install tower -g method.\n. Same here. I did notice though that coffee-script was installed multiple times at 1.3.3 and 1.4.0. It looks like Tower wants both somehow. I forced it so that it was using 1.3.3 both in my app and in Tower but no luck. I'll keep swinging. Thanks for all the feedback!\n. This is what I get from cake build with console.log App.UsersController.metadata() in both the server and client users controllers:\nbash\n$ cake build\nDefault database not set, using Memory store\n{ className: 'Controller',\n  resourceName: '',\n  resourceType: '',\n  collectionName: '',\n  params: \n   { page: \n      { controller: undefined,\n        key: 'page',\n        attribute: 'page',\n        modelName: undefined,\n        exact: false,\n        default: undefined,\n        allowNegative: false,\n        allowFloat: true,\n        allowRange: false },\n     limit: \n      { controller: undefined,\n        key: 'limit',\n        attribute: 'limit',\n        modelName: undefined,\n        exact: false,\n        default: undefined,\n        allowNegative: false,\n        allowFloat: true,\n        allowRange: false },\n     sort: \n      { controller: undefined,\n        key: 'sort',\n        attribute: 'sort',\n        modelName: undefined,\n        exact: false,\n        default: undefined },\n     fields: \n      { controller: undefined,\n        key: 'fields',\n        attribute: 'fields',\n        modelName: undefined,\n        exact: false,\n        default: undefined },\n     createdAt: \n      { controller: undefined,\n        key: 'createdAt',\n        attribute: 'createdAt',\n        modelName: undefined,\n        exact: false,\n        default: undefined },\n     updatedAt: \n      { controller: undefined,\n        key: 'updatedAt',\n        attribute: 'updatedAt',\n        modelName: undefined,\n        exact: false,\n        default: undefined } },\n  renderers: { text: [Function], json: [Function] },\n  mimes: { json: {}, html: {} },\n  callbacks: { action: { before: [Object], after: [] } },\n  helpers: [],\n  belongsTo: [],\n  subscriptions: [],\n  layout: 'application',\n  scopes: {},\n  scopeNames: [] }\n. I think you're right @viatropos about coffee-inheritance.js, I just don't know how to go about fixing it.\n. Hey, I finally worked through it by explicitly requiring coffee-script to version 1.3.3 in packages.json rather than requiring any version >= 1.3.3:  \"coffee-script\": \"= 1.3.3\",\n. ",
    "WesKetch": "Same here, I followed the instructions at towerjs.org to get an app up and running and got the same error.\n. Same here, I followed the instructions at towerjs.org to get an app up and running and got the same error.\n. ",
    "br8kpoint": "strike three!\nI have been looking for a solution for this today as well. I was able to get cake watch to work without error if you do vanilla install without running the generator which makes me think something is wrong in the generator.\n. killing cake watch and executing again produces the same error.\nAlso running node server will produce \n```\n   info  - socket.io started\nTower development server listening on port 3000\n/home/mike/Work/callcenter_tower/node_modules/tower/lib/tower-support/shared/shared.js:242\n        throw new Error(\"Constant '\" + string + \"' wasn't found\");\n              ^\nError: Constant 'App.' wasn't found\n    at .extend.constant (/home/mike/Work/callcenter_tower/node_modules/tower/lib/tower-support/shared/shared.js:242:15)\n    at .extend.constant (/home/mike/Work/callcenter_tower/node_modules/tower/lib/tower-support/shared/shared.js:240:22)\n    at Function.Tower.ControllerScopes.ClassMethods.scope (/home/mike/Work/callcenter_tower/node_modules/tower/lib/tower-controller/shared/scopes.js:13:25)\n    at /home/mike/Work/callcenter_tower/app/controllers/server/usersController.coffee:27:21\n    at Object. (/home/mike/Work/callcenter_tower/app/controllers/server/usersController.coffee:31:5)\n    at Object. (/home/mike/Work/callcenter_tower/app/controllers/server/usersController.coffee:33:4)\n    at Module._compile (module.js:449:26)\n    at Object.require.extensions..coffee (/home/mike/Work/callcenter_tower/node_modules/coffeecup/node_modules/coffee-script/lib/coffee-script/coffee-script.js:22:21)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n```\n. after deleting ./node_modules/coffee-script and running cake watch I get \n```\n$ cake watch\n{ [Error: Cannot find module 'coffee-script'] code: 'MODULE_NOT_FOUND' }\n{ [Error: Cannot find module 'coffee-script'] code: 'MODULE_NOT_FOUND' }\nDefault database not set, using Memory store\nLoading \"grunt.coffee\" tasks and helpers...\nERROR\n\n\nError: Constant 'App.' wasn't found\n Task \"start\" not found. Use --force to continue. \n\n\nAborted due to warnings.\n```\nand running node server gives\n```\n$ node server\n{ [Error: Cannot find module 'coffee-script'] code: 'MODULE_NOT_FOUND' }\n   info  - socket.io started\nTower development server listening on port 3000\n/home/mike/Work/callcenter_tower/node_modules/tower/lib/tower-support/shared/shared.js:242\n        throw new Error(\"Constant '\" + string + \"' wasn't found\");\n              ^\nError: Constant 'App.' wasn't found\n    at .extend.constant (/home/mike/Work/callcenter_tower/node_modules/tower/lib/tower-support/shared/shared.js:242:15)\n    at .extend.constant (/home/mike/Work/callcenter_tower/node_modules/tower/lib/tower-support/shared/shared.js:240:22)\n    at Function.Tower.ControllerScopes.ClassMethods.scope (/home/mike/Work/callcenter_tower/node_modules/tower/lib/tower-controller/shared/scopes.js:13:25)\n    at /home/mike/Work/callcenter_tower/app/controllers/server/usersController.coffee:27:21\n    at Object. (/home/mike/Work/callcenter_tower/app/controllers/server/usersController.coffee:31:5)\n    at Object. (/home/mike/Work/callcenter_tower/app/controllers/server/usersController.coffee:33:4)\n    at Module._compile (module.js:449:26)\n    at Object.require.extensions..coffee (/home/mike/Work/callcenter_tower/node_modules/coffeecup/node_modules/coffee-script/lib/coffee-script/coffee-script.js:22:21)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n```\nSo that did not fix the issue\n. strike three!\nI have been looking for a solution for this today as well. I was able to get cake watch to work without error if you do vanilla install without running the generator which makes me think something is wrong in the generator.\n. killing cake watch and executing again produces the same error.\nAlso running node server will produce \n```\n   info  - socket.io started\nTower development server listening on port 3000\n/home/mike/Work/callcenter_tower/node_modules/tower/lib/tower-support/shared/shared.js:242\n        throw new Error(\"Constant '\" + string + \"' wasn't found\");\n              ^\nError: Constant 'App.' wasn't found\n    at .extend.constant (/home/mike/Work/callcenter_tower/node_modules/tower/lib/tower-support/shared/shared.js:242:15)\n    at .extend.constant (/home/mike/Work/callcenter_tower/node_modules/tower/lib/tower-support/shared/shared.js:240:22)\n    at Function.Tower.ControllerScopes.ClassMethods.scope (/home/mike/Work/callcenter_tower/node_modules/tower/lib/tower-controller/shared/scopes.js:13:25)\n    at /home/mike/Work/callcenter_tower/app/controllers/server/usersController.coffee:27:21\n    at Object. (/home/mike/Work/callcenter_tower/app/controllers/server/usersController.coffee:31:5)\n    at Object. (/home/mike/Work/callcenter_tower/app/controllers/server/usersController.coffee:33:4)\n    at Module._compile (module.js:449:26)\n    at Object.require.extensions..coffee (/home/mike/Work/callcenter_tower/node_modules/coffeecup/node_modules/coffee-script/lib/coffee-script/coffee-script.js:22:21)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n```\n. after deleting ./node_modules/coffee-script and running cake watch I get \n```\n$ cake watch\n{ [Error: Cannot find module 'coffee-script'] code: 'MODULE_NOT_FOUND' }\n{ [Error: Cannot find module 'coffee-script'] code: 'MODULE_NOT_FOUND' }\nDefault database not set, using Memory store\nLoading \"grunt.coffee\" tasks and helpers...\nERROR\n\n\nError: Constant 'App.' wasn't found\n Task \"start\" not found. Use --force to continue. \n\n\nAborted due to warnings.\n```\nand running node server gives\n```\n$ node server\n{ [Error: Cannot find module 'coffee-script'] code: 'MODULE_NOT_FOUND' }\n   info  - socket.io started\nTower development server listening on port 3000\n/home/mike/Work/callcenter_tower/node_modules/tower/lib/tower-support/shared/shared.js:242\n        throw new Error(\"Constant '\" + string + \"' wasn't found\");\n              ^\nError: Constant 'App.' wasn't found\n    at .extend.constant (/home/mike/Work/callcenter_tower/node_modules/tower/lib/tower-support/shared/shared.js:242:15)\n    at .extend.constant (/home/mike/Work/callcenter_tower/node_modules/tower/lib/tower-support/shared/shared.js:240:22)\n    at Function.Tower.ControllerScopes.ClassMethods.scope (/home/mike/Work/callcenter_tower/node_modules/tower/lib/tower-controller/shared/scopes.js:13:25)\n    at /home/mike/Work/callcenter_tower/app/controllers/server/usersController.coffee:27:21\n    at Object. (/home/mike/Work/callcenter_tower/app/controllers/server/usersController.coffee:31:5)\n    at Object. (/home/mike/Work/callcenter_tower/app/controllers/server/usersController.coffee:33:4)\n    at Module._compile (module.js:449:26)\n    at Object.require.extensions..coffee (/home/mike/Work/callcenter_tower/node_modules/coffeecup/node_modules/coffee-script/lib/coffee-script/coffee-script.js:22:21)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n```\nSo that did not fix the issue\n. ",
    "spencerbeggs": "Still looking into this. I installed grunt 0.4.0a:\nnpm install -g grunt@0.4.0a\nand then ran through the vanilla install again:\ntower new app\ncd app\nnpm install\nLooks like grunt 0.4.0a requires Gruntfile.js instead of grunt.js so:\nmv grunt.coffee Gruntfile.coffee\nBut when I run cake watch I get:\n```\nLoading \"Gruntfile.coffee\" tasks...\nERROR\n\n\nTypeError: Object # has no method 'registerHelper'\nWarning: Task \"start\" not found. Use --force to continue.\n\n\nAborted due to warnings.\n```\nIf I run node server I don't get an error, but of course things aren't built the right way.\n. You were able to do a vanilla install with a generator per the example? I can get it to boot up after install, but once I use a generator I get Error: Constant 'App.' wasn't found\n. Still looking into this. I installed grunt 0.4.0a:\nnpm install -g grunt@0.4.0a\nand then ran through the vanilla install again:\ntower new app\ncd app\nnpm install\nLooks like grunt 0.4.0a requires Gruntfile.js instead of grunt.js so:\nmv grunt.coffee Gruntfile.coffee\nBut when I run cake watch I get:\n```\nLoading \"Gruntfile.coffee\" tasks...\nERROR\n\n\nTypeError: Object # has no method 'registerHelper'\nWarning: Task \"start\" not found. Use --force to continue.\n\n\nAborted due to warnings.\n```\nIf I run node server I don't get an error, but of course things aren't built the right way.\n. You were able to do a vanilla install with a generator per the example? I can get it to boot up after install, but once I use a generator I get Error: Constant 'App.' wasn't found\n. ",
    "ttilley": "I know very little about creating proper node.js extension modules, but the code in fsevent_watch is fairly straightforward and takes care of frustrating issues such as building on 10.5 while still using features from 10.7 when running there. This just involves a small amount of compatibility code and a gestalt check (to see what version of OSX you're currently running on). It's unfortunate that compile-time and run-time checks need to both be performed, but I wanted a build of fsevent_watch to just work and run anywhere. I'd assume you would want the same for a compiled extension.\n...hell, it might be fun to take the time to learn the API for extending node.\n. I know very little about creating proper node.js extension modules, but the code in fsevent_watch is fairly straightforward and takes care of frustrating issues such as building on 10.5 while still using features from 10.7 when running there. This just involves a small amount of compatibility code and a gestalt check (to see what version of OSX you're currently running on). It's unfortunate that compile-time and run-time checks need to both be performed, but I wanted a build of fsevent_watch to just work and run anywhere. I'd assume you would want the same for a compiled extension.\n...hell, it might be fun to take the time to learn the API for extending node.\n. ",
    "shama": "@TheHydroImpulse gaze should fully work on Windows, if not please open an issue :)\n. @TheHydroImpulse gaze should fully work on Windows, if not please open an issue :)\n. ",
    "mildfuzz": "I think that there would be more use cases of people wanting to use a minimum string length as a presence validation that people who would need a minimum string validation to pass when empty. \nI think @TheHydroImpulse has the right of it, a length range validation seems appropriate in this context.\n. I think that there would be more use cases of people wanting to use a minimum string length as a presence validation that people who would need a minimum string validation to pass when empty. \nI think @TheHydroImpulse has the right of it, a length range validation seems appropriate in this context.\n. ",
    "bobobo1618": "@TheHydroImpulse I'm not talking about the overhaul or anything like that. I'm saying go and put, on the website you have now, on the index or header something like \n<a href=\"wiki URL\"><h1 style=\"font-color:#FF0000;\">Wiki has more info, go here.</h1></a>.\nLeave everything else the way it is, just leave a notice until you do the overhaul.\n. @TheHydroImpulse I agree but as you said, that issue has been discussed many times :P\nThis is a separate issue.\n. @TheHydroImpulse I'm not talking about the overhaul or anything like that. I'm saying go and put, on the website you have now, on the index or header something like \n<a href=\"wiki URL\"><h1 style=\"font-color:#FF0000;\">Wiki has more info, go here.</h1></a>.\nLeave everything else the way it is, just leave a notice until you do the overhaul.\n. @TheHydroImpulse I agree but as you said, that issue has been discussed many times :P\nThis is a separate issue.\n. ",
    "norman784": "What I do is run a single application running daemon owner of domain / subdomain, I am not aware if recommended to do that or in separate processes (as in this case applications are interrelated) one would be the frontend / backend and server api.\nFor example:\napi.mydomain.com -> api / tower app\ndevelopers.mydomain.com -> developers / tower app\n. Yes, that is, then I've another question to get started (because i'm just today start with coffee-script and towerjs) I need to create an tower app with this configuration, then require other towers apps?\n``` coffeescript\nvhost-app/config/server/bootstrap.coffee\nApp.configure ->\n  # ...\n  @use('vhost', 'm.mysite.com', require('/path/to/m/tower/app').app)\n  @use('vhost', 'sync.mysite.com', require('/path/to/sync/tower/app').app)\n  # ...\n  @use Tower.MiddlewareRouter\n```\nIs that so? I would test this later, because I'm migrating my backend from express to towerjs now...\n. Seems much like the way im handling now the vhosts on express, I would try this...\nMy apps are running on the same server and the same enviroment, just an normal LAMP server (using apache proxy).\nThere is a nice express example where I borrow the code adding the virtual host layer\n. Let me check it... how I load external libs? just put under the vendors folder? or towerjs autoloads all the node_modules?\n. What I do is run a single application running daemon owner of domain / subdomain, I am not aware if recommended to do that or in separate processes (as in this case applications are interrelated) one would be the frontend / backend and server api.\nFor example:\napi.mydomain.com -> api / tower app\ndevelopers.mydomain.com -> developers / tower app\n. Yes, that is, then I've another question to get started (because i'm just today start with coffee-script and towerjs) I need to create an tower app with this configuration, then require other towers apps?\n``` coffeescript\nvhost-app/config/server/bootstrap.coffee\nApp.configure ->\n  # ...\n  @use('vhost', 'm.mysite.com', require('/path/to/m/tower/app').app)\n  @use('vhost', 'sync.mysite.com', require('/path/to/sync/tower/app').app)\n  # ...\n  @use Tower.MiddlewareRouter\n```\nIs that so? I would test this later, because I'm migrating my backend from express to towerjs now...\n. Seems much like the way im handling now the vhosts on express, I would try this...\nMy apps are running on the same server and the same enviroment, just an normal LAMP server (using apache proxy).\nThere is a nice express example where I borrow the code adding the virtual host layer\n. Let me check it... how I load external libs? just put under the vendors folder? or towerjs autoloads all the node_modules?\n. ",
    "1xizt": "Thanks. MongoDB is great, only not acid compliant for ecommerce type transactions. Would that be right? I've been learning coffeescript to use with tower.js, its surprisingly elegant and close to english.\nOn Nov 23, 2012, at 8:46 PM, Daniel wrote:\n\nI believe only MongoDB is supported as of now, but there are plans for other databases to be included. Sessions are used within controllers and it uses the expressjs / connect sessions.\nYou can access the session object through the request object in any controller:\nrequest.session\n\u2014\nReply to this email directly or view it on GitHub.\n. Hi Lance, I'd be happy to give it a shot. Just bear in mind I'm a js noob with the exception of using jquery plugins for years and coding for transitions, etc. \n\nStarted reading up on Coffeescript last night, looks v neat, easy to understand. Little Book of Coffeescript v helpful. So I'd be happy to try it out, it will be a learning experience.\nI saw a mysql node adapter at which looks pretty solid:\nhttps://github.com/felixge/node-mysql\nAnd there's a bunch more at:\nhttps://github.com/joyent/node/wiki/modules#wiki-web-frameworks-full\nAny particular one you'd like me to try? I'll email you if I have any ?, for sure I will :)\nOn Nov 24, 2012, at 6:31 AM, Lance Pollard wrote:\n\n@1xizt you're right, MongoDB is great but it's not acid compliant for ecommerce type transactions. Glad to hear you're enjoying coffeescript :)\nIf you'd like to take a swing at making a SQL adapter for Tower, let me know. It should be easy to do, the main thing that needs to be done is parsing the SQL command strings. But I think that's already been done somewhere in the node community, so all you'd really need to do is plugin their parser, and plug that into Tower. I'll work with you on that if you're interested, let me know!\n\u2014\nReply to this email directly or view it on GitHub.\n. Would it make sense maybe to use Sequelze as it already supports mysql, postgres and sqllite? \n\nhttps://github.com/sdepold/sequelize\nOn Nov 24, 2012, at 6:31 AM, Lance Pollard wrote:\n\n@1xizt you're right, MongoDB is great but it's not acid compliant for ecommerce type transactions. Glad to hear you're enjoying coffeescript :)\nIf you'd like to take a swing at making a SQL adapter for Tower, let me know. It should be easy to do, the main thing that needs to be done is parsing the SQL command strings. But I think that's already been done somewhere in the node community, so all you'd really need to do is plugin their parser, and plug that into Tower. I'll work with you on that if you're interested, let me know!\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks for the input Lance, will look through it. Only reason I need mysql or postgres is for ecommerce where we need ACID compliant transactions. \n\nOtherwise I could have prob got by on mongodb, which btw is my first foray into the nosql world. I'm bored in the coldfusion world, they're just not progressive in terms of MVC, rest, no sql, best use of js on client side, etc. I kept looking at ruby on rails world for inspiration, but rails is a bit flakey for deployment and I'm not as close to the metal as I'd like to be.\nSo anyhow, this server/client side world all on the same language and using coffee script and coffee cup looks v compelling. Some v nice default choices made. Only point of diff is stylus vs sass, but its not a biggie, v minor diff. Both do the same thing anyhow.\nOn Nov 24, 2012, at 3:17 PM, Lance Pollard wrote:\n\nAwesome that would be great! Sequelize looks perfect. Looking at the package.json it looks like it loads node-mysql and can load the popular sqlite and postgres node libs as well.\nIt seems that you could combine sequelize with squel (for building the SQL query strings), and then wrap each db with with a Tower.MysqlStore, Tower.PostgresStore, etc.\nLooking quickly at node-mysql and sequelize, it doesn't seem there is a clean way to build the SQL string, which is why I recommended squel. But if sequelize does support it, then you would only need that.\nTo connect this with tower, you would just create a custom store (from that wiki link above). See the memory and mongodb stores in the tower source code for examples.\nThe real meat comes in with the cursor, which is passed in as the first argument to find, insert, update, destroy, count, and exists. The cursor is a Tower.ModelCursor instance. This is the return value from common API calls such as:\nApp.User.all()\nApp.User.where(active: true).count()\nBasically, when you call App.Model.where or any other \"chainable scope\" methods (borrowing the Rails term), it internally keeps a \"cursor\" object that contains all of the query parameters you pass into where/order/page/etc. Once you call all, find, create, update, destroy, count, exists on that \"chainable scope\", it \"compiles\" the query parameters into the cursor, and passes that to the specific database's (Tower.Store instance) corresponding method.\nNote, the Tower.ModelScope api (which just wraps the Tower.ModelCursor API, it's pretty much just there for the DSL), adds the additional method all, and uses create instead of insert. It also has first and last. The Tower.Store only has find, insert, update, destroy, count, and exists. This is because all, find, first, and last on the Tower.ModelCursor are just sugar syntax; for example, first just adds limit: 1 to the cursor just before passing it to the Tower.Store.\nSo all you need to know is that, in your custom store, the first argument to those 6 methods is a Tower.ModelCursor. From that, you can call cursor.toParams() and it will compile it to a simple hash such as:\n{\n  sort: [['createdAt', 'desc']],\n  page: 2,\n  conditions: {\n    firstName: 'John',\n    active: true,\n    createdAt: {'>=': Date(Nov 19, 2012)}\n  },\n  limit: 20\n}\nSee the Tower.MongodbStoreSerializer for examples of how to manipulate the cursor's params. Basically, you would just go through the cursor.toParams().conditions hash, and pass it to the squel query string builder.\nstore = this;\nsquel.select()\n  .from(_.camelize(store.className), \"*\")\n  .where(prop, val)\nThen pass that query string to sequelize!\nLet me know if you have any questions, I'll be back later today.\n\u2014\nReply to this email directly or view it on GitHub.\n. Btw, a lot of what you said is double dutch, but I will figure it out. I want to stretch and grow as a coder. Coldfusion was a fantastic language, v user friendly, super elegant syntax, however it shields you from a lot of coding practices like using classes, arrays and json. Even its json output isn't standard the way jquery likes it, I could work around it but its time to move on. \n\nI found Zurb Foundation so that settles my grid as its really slick on the responsive front. Leaning on knockout.js for bindings at the mo, sass for css. Rest is wide open.\nWould you say Tower is ready for production or a month or two away?\nOn Nov 24, 2012, at 3:17 PM, Lance Pollard wrote:\n\nAwesome that would be great! Sequelize looks perfect. Looking at the package.json it looks like it loads node-mysql and can load the popular sqlite and postgres node libs as well.\nIt seems that you could combine sequelize with squel (for building the SQL query strings), and then wrap each db with with a Tower.MysqlStore, Tower.PostgresStore, etc.\nLooking quickly at node-mysql and sequelize, it doesn't seem there is a clean way to build the SQL string, which is why I recommended squel. But if sequelize does support it, then you would only need that.\nTo connect this with tower, you would just create a custom store (from that wiki link above). See the memory and mongodb stores in the tower source code for examples.\nThe real meat comes in with the cursor, which is passed in as the first argument to find, insert, update, destroy, count, and exists. The cursor is a Tower.ModelCursor instance. This is the return value from common API calls such as:\nApp.User.all()\nApp.User.where(active: true).count()\nBasically, when you call App.Model.where or any other \"chainable scope\" methods (borrowing the Rails term), it internally keeps a \"cursor\" object that contains all of the query parameters you pass into where/order/page/etc. Once you call all, find, create, update, destroy, count, exists on that \"chainable scope\", it \"compiles\" the query parameters into the cursor, and passes that to the specific database's (Tower.Store instance) corresponding method.\nNote, the Tower.ModelScope api (which just wraps the Tower.ModelCursor API, it's pretty much just there for the DSL), adds the additional method all, and uses create instead of insert. It also has first and last. The Tower.Store only has find, insert, update, destroy, count, and exists. This is because all, find, first, and last on the Tower.ModelCursor are just sugar syntax; for example, first just adds limit: 1 to the cursor just before passing it to the Tower.Store.\nSo all you need to know is that, in your custom store, the first argument to those 6 methods is a Tower.ModelCursor. From that, you can call cursor.toParams() and it will compile it to a simple hash such as:\n{\n  sort: [['createdAt', 'desc']],\n  page: 2,\n  conditions: {\n    firstName: 'John',\n    active: true,\n    createdAt: {'>=': Date(Nov 19, 2012)}\n  },\n  limit: 20\n}\nSee the Tower.MongodbStoreSerializer for examples of how to manipulate the cursor's params. Basically, you would just go through the cursor.toParams().conditions hash, and pass it to the squel query string builder.\nstore = this;\nsquel.select()\n  .from(_.camelize(store.className), \"*\")\n  .where(prop, val)\nThen pass that query string to sequelize!\nLet me know if you have any questions, I'll be back later today.\n\u2014\nReply to this email directly or view it on GitHub.\n. I think what I'll do right now is launch in coldfusion, and then port over in Jan or Feb. I need to go live with it, but I'll build a mirror in Tower so its easy to port when we get everything polished up.\n\nBtw, do you have auto crf creation for forms?\nMaybe an auto admin panel ala Django, that kinda stuff gets ppl horny :)\nAlso Twitter Bootstrap or Zurb Foundation as default css layout libraries. Having tried both, I much prefer Foundation for the grid, its really slick in that you can code the same view for mobile at the same time. It adapts pretty well for tablets and phones.\nThing I like most about what you did in Tower is extensive use of coffeescript, that's such a cool user friendly tool. And coffee cup for layouts as I'm a fan of HAML, but there's no equivalent for it in the coldfusion world. Those guys have an open source engine better than Adobe's commercial version, but again they're not really following the smartest design patterns, they leave it up to other folks and that community just ain't as progressive as the rails crowd.\nThe app I launch with in meantime, would you recommend doing it in rails instead of coldfusion, or rails not ideal in your opinion despite the hype?\nOn Nov 24, 2012, at 3:40 PM, Daniel wrote:\n\nBut, I'll also add, that you can start using Tower for your project, and when new features or changes come into the mix, you can simply change were needed. Though that all depends on the length of your project.\n\u2014\nReply to this email directly or view it on GitHub.\n. Gotcha, I found knockout.js easier to understand than ember, but I can make the effort to figure it out.\n\nWhat was the issue on Foundation. The main thing I like about is the grid, I mixed in widgets from Bootstrap into the Foundation grid to get best of both worlds.\nI know rails fairly well, I spent some time getting familiar with it. So may just go that route for the educational value.\nOn Nov 24, 2012, at 4:03 PM, Daniel wrote:\n\nPersonally, I'd go with Rails and Ember.js, though, if you'd have to spend lots of time learning all the stuff, then stick to Coldfusion. If you already have your app in Ember.js, then porting is, or will be, extremely easy, as Tower is built on Ember.js. That's what I'm personally doing atm for a number of projects, though I'm using nodejs as the backend.\nThere are plans to have an admin panel generator or module similar to ActiveAdmin, though, that's a long ways away.\nI believe there was another issue opened with concern about using Zurb Foundation, instead of Twitter Bootstrap.\n\u2014\nReply to this email directly or view it on GitHub.\n. What resources did you tap into to compress your learning curve on ember? That's by Katz right?\n\nOn Nov 24, 2012, at 4:20 PM, Daniel wrote:\n\nI'm not that familiar with knockout, but it's not as complete as Ember.js is. It also tightly bound to DOM elements, which I personally hate. Because of some missing pieces, some people have to implement those themselves. That's why I love Ember so much. It's fully featured and all the pieces are there.\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks, that makes sense ref the outlets. I'll just have to bite the bullet and obsess on it till I get that aha moment. Appreciate the tips. I was planning on avoiding it altogether having read articles comparing it to knockout and angular, but if its a tower universe and you guys settled on it, that's the route I'll go so we're in sync, smoothest path forward.\n\nOn Nov 24, 2012, at 4:41 PM, Daniel wrote:\n\nProbably this article helped a lot: http://trek.github.com/ . It's made by Trek, one of the core members of Ember. I think the Router, Templates, Contexts, Views, and Outlets are the hardest thing to comprehend. Outlets, I'll tell you right now, is the SIMPLEST thing once you get it. Outlets are view holdplacers.\nMeaning, if you have a main page with a header and a body, well the header wouldn't change across the other pages, only the body content would. So you would place an outlet {{outlet}} where you want your body content of the different pages to appear.\n<!DOCTYPE html>\n\n\nRandom Title\n\n\n\n\n               <header><!-- header stuff --></header>\n               <div id=\"content\">{{outlet}}</div>\n           \n\n Scripts to load ember, jquery, handlebars \n\n\nThen, in the router you would \"connect\" the outlet(s) (you can have more than one outlet, for example, sidebars), to the appropriate template.\nApp.Router = Ember.Router.extend({\n  root: Ember.Route.extend({\n    index: Ember.Route.extend({\n       route: \"/\",\nconnectOutlets: function(router) {\n       // Connect the {{outlet}} in the \"application\" template to the \"home\" template.\n       // In simpler terms... Grab the contents of the \"home\" template and replace the {{outlet}} in the \"application\" template with it.\n       router.get('applicationController').connectOutlet('home'); \n   } \n});\n});\n});\nYou would do this for all the different routes. Again, pretty simple, but it stays simple for complex applications. Once you understand the object system, router, contexts, outlets, and views, you'll find it extremely awesome.\nI'm starting to make Ember.js tutorials on my Youtube channel, as there are none atm. Maybe that'll help some people out.\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks, much appreciated, will check it out. I was just thinking today, for how disinterested I was in studying at school, I've done nothing but studying and reading since I started coding. I always thought at some point I'll be done but about a year ago I got comfy with the concept of perpetual learning as a desirable virtue and pleasure vs a pain :) Net dev is quite inspiring in terms of rate of progressiveness and generosity. So ember it is, I'll crack the nut, there's a nice vid on Peepcode with Katz also, will get that.\n\nOn Nov 24, 2012, at 5:20 PM, Daniel wrote:\n\nNo Problem! If you want a little more insight on comparisons of Ember.js and other frameworks, http://www.quora.com/Ember-js/Which-one-of-angular-js-and-ember-js-is-the-better-choice is an AWESOME read. The answer (main / first one) is written by Tom Dale, one of the core members of Ember.js, an ex-Apple employee that also created SproutCore that was the framework used in huge apps like iCloud, which they (Tom, and Yehuda - another Ember dev) also created.\nAngularJS and Knockout have a lot of similarities, especially in their bindings.\nTom Dale also wrote a blog post explaining their [Ember.js] implementation of the Router. http://tomdale.net/2012/05/ember-routing/\nA very interesting read, and it shows just how powerful it is. I haven't spent much time with Angular's router, nor Knockout, but Angular uses a Rails like routing, which I don't think is front-end friendly.\n\u2014\nReply to this email directly or view it on GitHub.\n. Sorry for the delay buddy, I've been doing some research on the drivers for mysql and postgres. I'm buried to my neck in a large scale email app with a bunch of admin functions. Can you guys bear with me for a week so I can get back to solving this part of the puzzle? \n\nI did look at angular and ember in more details, to me still angular looks more powerful and simpler. I am going through the link on Quora to get a better understanding. Prob I'll have to try both to get a real world feel. I really like most of the choices you've made on toolset in Tower tho, especially use of Coffeescript and haml style layouts.\nOn Nov 24, 2012, at 5:20 PM, Daniel wrote:\n\nNo Problem! If you want a little more insight on comparisons of Ember.js and other frameworks, http://www.quora.com/Ember-js/Which-one-of-angular-js-and-ember-js-is-the-better-choice is an AWESOME read. The answer (main / first one) is written by Tom Dale, one of the core members of Ember.js, an ex-Apple employee that also created SproutCore that was the framework used in huge apps like iCloud, which they (Tom, and Yehuda - another Ember dev) also created.\nAngularJS and Knockout have a lot of similarities, especially in their bindings.\nTom Dale also wrote a blog post explaining their [Ember.js] implementation of the Router. http://tomdale.net/2012/05/ember-routing/\nA very interesting read, and it shows just how powerful it is. I haven't spent much time with Angular's router, nor Knockout, but Angular uses a Rails like routing, which I don't think is front-end friendly.\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks. MongoDB is great, only not acid compliant for ecommerce type transactions. Would that be right? I've been learning coffeescript to use with tower.js, its surprisingly elegant and close to english.\n\nOn Nov 23, 2012, at 8:46 PM, Daniel wrote:\n\nI believe only MongoDB is supported as of now, but there are plans for other databases to be included. Sessions are used within controllers and it uses the expressjs / connect sessions.\nYou can access the session object through the request object in any controller:\nrequest.session\n\u2014\nReply to this email directly or view it on GitHub.\n. Hi Lance, I'd be happy to give it a shot. Just bear in mind I'm a js noob with the exception of using jquery plugins for years and coding for transitions, etc. \n\nStarted reading up on Coffeescript last night, looks v neat, easy to understand. Little Book of Coffeescript v helpful. So I'd be happy to try it out, it will be a learning experience.\nI saw a mysql node adapter at which looks pretty solid:\nhttps://github.com/felixge/node-mysql\nAnd there's a bunch more at:\nhttps://github.com/joyent/node/wiki/modules#wiki-web-frameworks-full\nAny particular one you'd like me to try? I'll email you if I have any ?, for sure I will :)\nOn Nov 24, 2012, at 6:31 AM, Lance Pollard wrote:\n\n@1xizt you're right, MongoDB is great but it's not acid compliant for ecommerce type transactions. Glad to hear you're enjoying coffeescript :)\nIf you'd like to take a swing at making a SQL adapter for Tower, let me know. It should be easy to do, the main thing that needs to be done is parsing the SQL command strings. But I think that's already been done somewhere in the node community, so all you'd really need to do is plugin their parser, and plug that into Tower. I'll work with you on that if you're interested, let me know!\n\u2014\nReply to this email directly or view it on GitHub.\n. Would it make sense maybe to use Sequelze as it already supports mysql, postgres and sqllite? \n\nhttps://github.com/sdepold/sequelize\nOn Nov 24, 2012, at 6:31 AM, Lance Pollard wrote:\n\n@1xizt you're right, MongoDB is great but it's not acid compliant for ecommerce type transactions. Glad to hear you're enjoying coffeescript :)\nIf you'd like to take a swing at making a SQL adapter for Tower, let me know. It should be easy to do, the main thing that needs to be done is parsing the SQL command strings. But I think that's already been done somewhere in the node community, so all you'd really need to do is plugin their parser, and plug that into Tower. I'll work with you on that if you're interested, let me know!\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks for the input Lance, will look through it. Only reason I need mysql or postgres is for ecommerce where we need ACID compliant transactions. \n\nOtherwise I could have prob got by on mongodb, which btw is my first foray into the nosql world. I'm bored in the coldfusion world, they're just not progressive in terms of MVC, rest, no sql, best use of js on client side, etc. I kept looking at ruby on rails world for inspiration, but rails is a bit flakey for deployment and I'm not as close to the metal as I'd like to be.\nSo anyhow, this server/client side world all on the same language and using coffee script and coffee cup looks v compelling. Some v nice default choices made. Only point of diff is stylus vs sass, but its not a biggie, v minor diff. Both do the same thing anyhow.\nOn Nov 24, 2012, at 3:17 PM, Lance Pollard wrote:\n\nAwesome that would be great! Sequelize looks perfect. Looking at the package.json it looks like it loads node-mysql and can load the popular sqlite and postgres node libs as well.\nIt seems that you could combine sequelize with squel (for building the SQL query strings), and then wrap each db with with a Tower.MysqlStore, Tower.PostgresStore, etc.\nLooking quickly at node-mysql and sequelize, it doesn't seem there is a clean way to build the SQL string, which is why I recommended squel. But if sequelize does support it, then you would only need that.\nTo connect this with tower, you would just create a custom store (from that wiki link above). See the memory and mongodb stores in the tower source code for examples.\nThe real meat comes in with the cursor, which is passed in as the first argument to find, insert, update, destroy, count, and exists. The cursor is a Tower.ModelCursor instance. This is the return value from common API calls such as:\nApp.User.all()\nApp.User.where(active: true).count()\nBasically, when you call App.Model.where or any other \"chainable scope\" methods (borrowing the Rails term), it internally keeps a \"cursor\" object that contains all of the query parameters you pass into where/order/page/etc. Once you call all, find, create, update, destroy, count, exists on that \"chainable scope\", it \"compiles\" the query parameters into the cursor, and passes that to the specific database's (Tower.Store instance) corresponding method.\nNote, the Tower.ModelScope api (which just wraps the Tower.ModelCursor API, it's pretty much just there for the DSL), adds the additional method all, and uses create instead of insert. It also has first and last. The Tower.Store only has find, insert, update, destroy, count, and exists. This is because all, find, first, and last on the Tower.ModelCursor are just sugar syntax; for example, first just adds limit: 1 to the cursor just before passing it to the Tower.Store.\nSo all you need to know is that, in your custom store, the first argument to those 6 methods is a Tower.ModelCursor. From that, you can call cursor.toParams() and it will compile it to a simple hash such as:\n{\n  sort: [['createdAt', 'desc']],\n  page: 2,\n  conditions: {\n    firstName: 'John',\n    active: true,\n    createdAt: {'>=': Date(Nov 19, 2012)}\n  },\n  limit: 20\n}\nSee the Tower.MongodbStoreSerializer for examples of how to manipulate the cursor's params. Basically, you would just go through the cursor.toParams().conditions hash, and pass it to the squel query string builder.\nstore = this;\nsquel.select()\n  .from(_.camelize(store.className), \"*\")\n  .where(prop, val)\nThen pass that query string to sequelize!\nLet me know if you have any questions, I'll be back later today.\n\u2014\nReply to this email directly or view it on GitHub.\n. Btw, a lot of what you said is double dutch, but I will figure it out. I want to stretch and grow as a coder. Coldfusion was a fantastic language, v user friendly, super elegant syntax, however it shields you from a lot of coding practices like using classes, arrays and json. Even its json output isn't standard the way jquery likes it, I could work around it but its time to move on. \n\nI found Zurb Foundation so that settles my grid as its really slick on the responsive front. Leaning on knockout.js for bindings at the mo, sass for css. Rest is wide open.\nWould you say Tower is ready for production or a month or two away?\nOn Nov 24, 2012, at 3:17 PM, Lance Pollard wrote:\n\nAwesome that would be great! Sequelize looks perfect. Looking at the package.json it looks like it loads node-mysql and can load the popular sqlite and postgres node libs as well.\nIt seems that you could combine sequelize with squel (for building the SQL query strings), and then wrap each db with with a Tower.MysqlStore, Tower.PostgresStore, etc.\nLooking quickly at node-mysql and sequelize, it doesn't seem there is a clean way to build the SQL string, which is why I recommended squel. But if sequelize does support it, then you would only need that.\nTo connect this with tower, you would just create a custom store (from that wiki link above). See the memory and mongodb stores in the tower source code for examples.\nThe real meat comes in with the cursor, which is passed in as the first argument to find, insert, update, destroy, count, and exists. The cursor is a Tower.ModelCursor instance. This is the return value from common API calls such as:\nApp.User.all()\nApp.User.where(active: true).count()\nBasically, when you call App.Model.where or any other \"chainable scope\" methods (borrowing the Rails term), it internally keeps a \"cursor\" object that contains all of the query parameters you pass into where/order/page/etc. Once you call all, find, create, update, destroy, count, exists on that \"chainable scope\", it \"compiles\" the query parameters into the cursor, and passes that to the specific database's (Tower.Store instance) corresponding method.\nNote, the Tower.ModelScope api (which just wraps the Tower.ModelCursor API, it's pretty much just there for the DSL), adds the additional method all, and uses create instead of insert. It also has first and last. The Tower.Store only has find, insert, update, destroy, count, and exists. This is because all, find, first, and last on the Tower.ModelCursor are just sugar syntax; for example, first just adds limit: 1 to the cursor just before passing it to the Tower.Store.\nSo all you need to know is that, in your custom store, the first argument to those 6 methods is a Tower.ModelCursor. From that, you can call cursor.toParams() and it will compile it to a simple hash such as:\n{\n  sort: [['createdAt', 'desc']],\n  page: 2,\n  conditions: {\n    firstName: 'John',\n    active: true,\n    createdAt: {'>=': Date(Nov 19, 2012)}\n  },\n  limit: 20\n}\nSee the Tower.MongodbStoreSerializer for examples of how to manipulate the cursor's params. Basically, you would just go through the cursor.toParams().conditions hash, and pass it to the squel query string builder.\nstore = this;\nsquel.select()\n  .from(_.camelize(store.className), \"*\")\n  .where(prop, val)\nThen pass that query string to sequelize!\nLet me know if you have any questions, I'll be back later today.\n\u2014\nReply to this email directly or view it on GitHub.\n. I think what I'll do right now is launch in coldfusion, and then port over in Jan or Feb. I need to go live with it, but I'll build a mirror in Tower so its easy to port when we get everything polished up.\n\nBtw, do you have auto crf creation for forms?\nMaybe an auto admin panel ala Django, that kinda stuff gets ppl horny :)\nAlso Twitter Bootstrap or Zurb Foundation as default css layout libraries. Having tried both, I much prefer Foundation for the grid, its really slick in that you can code the same view for mobile at the same time. It adapts pretty well for tablets and phones.\nThing I like most about what you did in Tower is extensive use of coffeescript, that's such a cool user friendly tool. And coffee cup for layouts as I'm a fan of HAML, but there's no equivalent for it in the coldfusion world. Those guys have an open source engine better than Adobe's commercial version, but again they're not really following the smartest design patterns, they leave it up to other folks and that community just ain't as progressive as the rails crowd.\nThe app I launch with in meantime, would you recommend doing it in rails instead of coldfusion, or rails not ideal in your opinion despite the hype?\nOn Nov 24, 2012, at 3:40 PM, Daniel wrote:\n\nBut, I'll also add, that you can start using Tower for your project, and when new features or changes come into the mix, you can simply change were needed. Though that all depends on the length of your project.\n\u2014\nReply to this email directly or view it on GitHub.\n. Gotcha, I found knockout.js easier to understand than ember, but I can make the effort to figure it out.\n\nWhat was the issue on Foundation. The main thing I like about is the grid, I mixed in widgets from Bootstrap into the Foundation grid to get best of both worlds.\nI know rails fairly well, I spent some time getting familiar with it. So may just go that route for the educational value.\nOn Nov 24, 2012, at 4:03 PM, Daniel wrote:\n\nPersonally, I'd go with Rails and Ember.js, though, if you'd have to spend lots of time learning all the stuff, then stick to Coldfusion. If you already have your app in Ember.js, then porting is, or will be, extremely easy, as Tower is built on Ember.js. That's what I'm personally doing atm for a number of projects, though I'm using nodejs as the backend.\nThere are plans to have an admin panel generator or module similar to ActiveAdmin, though, that's a long ways away.\nI believe there was another issue opened with concern about using Zurb Foundation, instead of Twitter Bootstrap.\n\u2014\nReply to this email directly or view it on GitHub.\n. What resources did you tap into to compress your learning curve on ember? That's by Katz right?\n\nOn Nov 24, 2012, at 4:20 PM, Daniel wrote:\n\nI'm not that familiar with knockout, but it's not as complete as Ember.js is. It also tightly bound to DOM elements, which I personally hate. Because of some missing pieces, some people have to implement those themselves. That's why I love Ember so much. It's fully featured and all the pieces are there.\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks, that makes sense ref the outlets. I'll just have to bite the bullet and obsess on it till I get that aha moment. Appreciate the tips. I was planning on avoiding it altogether having read articles comparing it to knockout and angular, but if its a tower universe and you guys settled on it, that's the route I'll go so we're in sync, smoothest path forward.\n\nOn Nov 24, 2012, at 4:41 PM, Daniel wrote:\n\nProbably this article helped a lot: http://trek.github.com/ . It's made by Trek, one of the core members of Ember. I think the Router, Templates, Contexts, Views, and Outlets are the hardest thing to comprehend. Outlets, I'll tell you right now, is the SIMPLEST thing once you get it. Outlets are view holdplacers.\nMeaning, if you have a main page with a header and a body, well the header wouldn't change across the other pages, only the body content would. So you would place an outlet {{outlet}} where you want your body content of the different pages to appear.\n<!DOCTYPE html>\n\n\nRandom Title\n\n\n\n\n               <header><!-- header stuff --></header>\n               <div id=\"content\">{{outlet}}</div>\n           \n\n Scripts to load ember, jquery, handlebars \n\n\nThen, in the router you would \"connect\" the outlet(s) (you can have more than one outlet, for example, sidebars), to the appropriate template.\nApp.Router = Ember.Router.extend({\n  root: Ember.Route.extend({\n    index: Ember.Route.extend({\n       route: \"/\",\nconnectOutlets: function(router) {\n       // Connect the {{outlet}} in the \"application\" template to the \"home\" template.\n       // In simpler terms... Grab the contents of the \"home\" template and replace the {{outlet}} in the \"application\" template with it.\n       router.get('applicationController').connectOutlet('home'); \n   } \n});\n});\n});\nYou would do this for all the different routes. Again, pretty simple, but it stays simple for complex applications. Once you understand the object system, router, contexts, outlets, and views, you'll find it extremely awesome.\nI'm starting to make Ember.js tutorials on my Youtube channel, as there are none atm. Maybe that'll help some people out.\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks, much appreciated, will check it out. I was just thinking today, for how disinterested I was in studying at school, I've done nothing but studying and reading since I started coding. I always thought at some point I'll be done but about a year ago I got comfy with the concept of perpetual learning as a desirable virtue and pleasure vs a pain :) Net dev is quite inspiring in terms of rate of progressiveness and generosity. So ember it is, I'll crack the nut, there's a nice vid on Peepcode with Katz also, will get that.\n\nOn Nov 24, 2012, at 5:20 PM, Daniel wrote:\n\nNo Problem! If you want a little more insight on comparisons of Ember.js and other frameworks, http://www.quora.com/Ember-js/Which-one-of-angular-js-and-ember-js-is-the-better-choice is an AWESOME read. The answer (main / first one) is written by Tom Dale, one of the core members of Ember.js, an ex-Apple employee that also created SproutCore that was the framework used in huge apps like iCloud, which they (Tom, and Yehuda - another Ember dev) also created.\nAngularJS and Knockout have a lot of similarities, especially in their bindings.\nTom Dale also wrote a blog post explaining their [Ember.js] implementation of the Router. http://tomdale.net/2012/05/ember-routing/\nA very interesting read, and it shows just how powerful it is. I haven't spent much time with Angular's router, nor Knockout, but Angular uses a Rails like routing, which I don't think is front-end friendly.\n\u2014\nReply to this email directly or view it on GitHub.\n. Sorry for the delay buddy, I've been doing some research on the drivers for mysql and postgres. I'm buried to my neck in a large scale email app with a bunch of admin functions. Can you guys bear with me for a week so I can get back to solving this part of the puzzle? \n\nI did look at angular and ember in more details, to me still angular looks more powerful and simpler. I am going through the link on Quora to get a better understanding. Prob I'll have to try both to get a real world feel. I really like most of the choices you've made on toolset in Tower tho, especially use of Coffeescript and haml style layouts.\nOn Nov 24, 2012, at 5:20 PM, Daniel wrote:\n\nNo Problem! If you want a little more insight on comparisons of Ember.js and other frameworks, http://www.quora.com/Ember-js/Which-one-of-angular-js-and-ember-js-is-the-better-choice is an AWESOME read. The answer (main / first one) is written by Tom Dale, one of the core members of Ember.js, an ex-Apple employee that also created SproutCore that was the framework used in huge apps like iCloud, which they (Tom, and Yehuda - another Ember dev) also created.\nAngularJS and Knockout have a lot of similarities, especially in their bindings.\nTom Dale also wrote a blog post explaining their [Ember.js] implementation of the Router. http://tomdale.net/2012/05/ember-routing/\nA very interesting read, and it shows just how powerful it is. I haven't spent much time with Angular's router, nor Knockout, but Angular uses a Rails like routing, which I don't think is front-end friendly.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "ragulka": "@edubkendo thanks, that is a much better guide, although I am stuck at cake watch - I get an error saying: \n/Library/WebServer/Documents/tests/testapp/node_modules/which/which.js:83\n  throw new Error(\"not found: \"+cmd)\n        ^\nError: not found: grunt\n    at whichSync (/Library/WebServer/Documents/tests/testapp/node_modules/which/which.js:83:9)\n    at spawnGrunt (/Library/WebServer/Documents/tests/testapp/Cakefile:20:13)\n    at Object.Tower.ApplicationAssets.bundle.minify [as action] (/Library/WebServer/Documents/tests/testapp/Cakefile:33:12)\n    at helpers.extend.invoke (/usr/local/lib/node_modules/coffee-script/lib/coffee-script/cake.js:42:26)\n    at Object.exports.run (/usr/local/lib/node_modules/coffee-script/lib/coffee-script/cake.js:67:21)\n    at Object.<anonymous> (/usr/local/lib/node_modules/coffee-script/bin/cake:7:38)\n    at Module._compile (module.js:449:26)\n    at Object.Module._extensions..js (module.js:467:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\nI did run npm install\n. Ah, got it. I had to install grunt using npm install grunt -g before running cake watch. \n. @edubkendo thanks, that is a much better guide, although I am stuck at cake watch - I get an error saying: \n/Library/WebServer/Documents/tests/testapp/node_modules/which/which.js:83\n  throw new Error(\"not found: \"+cmd)\n        ^\nError: not found: grunt\n    at whichSync (/Library/WebServer/Documents/tests/testapp/node_modules/which/which.js:83:9)\n    at spawnGrunt (/Library/WebServer/Documents/tests/testapp/Cakefile:20:13)\n    at Object.Tower.ApplicationAssets.bundle.minify [as action] (/Library/WebServer/Documents/tests/testapp/Cakefile:33:12)\n    at helpers.extend.invoke (/usr/local/lib/node_modules/coffee-script/lib/coffee-script/cake.js:42:26)\n    at Object.exports.run (/usr/local/lib/node_modules/coffee-script/lib/coffee-script/cake.js:67:21)\n    at Object.<anonymous> (/usr/local/lib/node_modules/coffee-script/bin/cake:7:38)\n    at Module._compile (module.js:449:26)\n    at Object.Module._extensions..js (module.js:467:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\nI did run npm install\n. Ah, got it. I had to install grunt using npm install grunt -g before running cake watch. \n. ",
    "drnikki": "So I'm just going to drop all of my errors so that someone else searching for it can find the answer (which is much easier than all of the steps I took).  Intially, I had the same error as above.\nThe instructions here http://gruntjs.com/getting-started got grunt working for me, but then I ended up with \nA valid Gruntfile could not be found. Please see the getting started guide for\nmore information on how to configure grunt: http://gruntjs.com/getting-started\nFatal error: Unable to find Gruntfile.\nBut that happened because, grunt was the lateset version.  See: https://github.com/viatropos/tower/issues/390\nnpm install grunt@0.3.17 -g\nworked until I ended up with:\n```\nRunning \"less:bootstrap\" (less) task\nTypeError: Object # has no method 'options'\n    at Object.module.exports.grunt.util._.extend.filename (/Users/nikki/work/ikenga/node_modules/grunt-contrib-less/tasks/less.js:24:24)\n    at Object.task.registerMultiTask.thisTask (/usr/local/lib/node_modules/grunt/lib/grunt/task.js:109:15)\n    at Object.task.registerTask.thisTask.fn (/usr/local/lib/node_modules/grunt/lib/grunt/task.js:58:16)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:343:36)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:319:9)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:346:11)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:319:9)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:346:11)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:319:9)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:346:11)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:319:9)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:346:11)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:319:9)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:346:11)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:319:9)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:346:11)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:319:9)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:346:11)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:319:9)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:346:11)\n    at Task.start (/usr/local/lib/node_modules/grunt/lib/util/task.js:359:5)\n    at Object.grunt.tasks (/usr/local/lib/node_modules/grunt/lib/grunt.js:143:8)\n    at Object.module.exports [as cli] (/usr/local/lib/node_modules/grunt/lib/grunt/cli.js:36:9)\n    at Object. (/usr/local/lib/node_modules/grunt/bin/grunt:19:14)\n    at Module._compile (module.js:449:26)\n    at Object.Module._extensions..js (module.js:467:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Module.runMain (module.js:492:10)\n    at process.startup.processNextTick.process._tickCallback (node.js:244:9)\n```\nso THEN, I applied \nhttps://github.com/viatropos/tower/issues/375#issuecomment-12204491, but that didn't work.  \nNext: https://github.com/viatropos/tower/issues/388.  Using the full package.json file, but with the tower git URL as the tower source\n\"tower\": \"git://github.com/viatropos/tower.git\",\nThen uninstall, and complete reinstall. Cake watch works fine now.\nTLDR\nhttps://github.com/viatropos/tower/issues/388.  Using the full package.json file, but with the tower git URL as the tower source\n\"tower\": \"git://github.com/viatropos/tower.git\",\nuninstall; reinstall; go!\n. So I'm just going to drop all of my errors so that someone else searching for it can find the answer (which is much easier than all of the steps I took).  Intially, I had the same error as above.\nThe instructions here http://gruntjs.com/getting-started got grunt working for me, but then I ended up with \nA valid Gruntfile could not be found. Please see the getting started guide for\nmore information on how to configure grunt: http://gruntjs.com/getting-started\nFatal error: Unable to find Gruntfile.\nBut that happened because, grunt was the lateset version.  See: https://github.com/viatropos/tower/issues/390\nnpm install grunt@0.3.17 -g\nworked until I ended up with:\n```\nRunning \"less:bootstrap\" (less) task\nTypeError: Object # has no method 'options'\n    at Object.module.exports.grunt.util._.extend.filename (/Users/nikki/work/ikenga/node_modules/grunt-contrib-less/tasks/less.js:24:24)\n    at Object.task.registerMultiTask.thisTask (/usr/local/lib/node_modules/grunt/lib/grunt/task.js:109:15)\n    at Object.task.registerTask.thisTask.fn (/usr/local/lib/node_modules/grunt/lib/grunt/task.js:58:16)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:343:36)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:319:9)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:346:11)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:319:9)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:346:11)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:319:9)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:346:11)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:319:9)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:346:11)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:319:9)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:346:11)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:319:9)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:346:11)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:319:9)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:346:11)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:319:9)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:346:11)\n    at Task.start (/usr/local/lib/node_modules/grunt/lib/util/task.js:359:5)\n    at Object.grunt.tasks (/usr/local/lib/node_modules/grunt/lib/grunt.js:143:8)\n    at Object.module.exports [as cli] (/usr/local/lib/node_modules/grunt/lib/grunt/cli.js:36:9)\n    at Object. (/usr/local/lib/node_modules/grunt/bin/grunt:19:14)\n    at Module._compile (module.js:449:26)\n    at Object.Module._extensions..js (module.js:467:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Module.runMain (module.js:492:10)\n    at process.startup.processNextTick.process._tickCallback (node.js:244:9)\n```\nso THEN, I applied \nhttps://github.com/viatropos/tower/issues/375#issuecomment-12204491, but that didn't work.  \nNext: https://github.com/viatropos/tower/issues/388.  Using the full package.json file, but with the tower git URL as the tower source\n\"tower\": \"git://github.com/viatropos/tower.git\",\nThen uninstall, and complete reinstall. Cake watch works fine now.\nTLDR\nhttps://github.com/viatropos/tower/issues/388.  Using the full package.json file, but with the tower git URL as the tower source\n\"tower\": \"git://github.com/viatropos/tower.git\",\nuninstall; reinstall; go!\n. ",
    "missinglink": "The website examples are seriously out-of-date, impossible for new users to get started. Has the project been abandoned?\n. The website examples are seriously out-of-date, impossible for new users to get started. Has the project been abandoned?\n. ",
    "mikesmullin": "fyi: it breaks the travis build because ubuntu needs a lib installed for the node-gd bindings to work. something about that would also need to be added to Tower installation process.\nbash\nsudo apt-get install libgd2-xpm-dev # on ubuntu, for css image sprite processing\nbtw including the dependency is all we need for it to start working with Tower assuming this pull request (https://github.com/gruntjs/grunt-contrib-stylus/pull/6) for grunt-contrib-stylus is approved. i noticed mint.js is also capable of compiling stylus but doesn't seem to actually handle any of it in the Tower project; let me know if i am wrong about that assumption.\n. ya true i may have to do some cross-platform testing to find the install instructions for OS/X and Windows. FWIW the node-gd install instructions only list a dependency issue for Ubuntu, but it could be that that's all they've tested, as well. :/\n. well people can add it easily enough with npm install stylus-lemonade --save if they want.\n. fyi: it breaks the travis build because ubuntu needs a lib installed for the node-gd bindings to work. something about that would also need to be added to Tower installation process.\nbash\nsudo apt-get install libgd2-xpm-dev # on ubuntu, for css image sprite processing\nbtw including the dependency is all we need for it to start working with Tower assuming this pull request (https://github.com/gruntjs/grunt-contrib-stylus/pull/6) for grunt-contrib-stylus is approved. i noticed mint.js is also capable of compiling stylus but doesn't seem to actually handle any of it in the Tower project; let me know if i am wrong about that assumption.\n. ya true i may have to do some cross-platform testing to find the install instructions for OS/X and Windows. FWIW the node-gd install instructions only list a dependency issue for Ubuntu, but it could be that that's all they've tested, as well. :/\n. well people can add it easily enough with npm install stylus-lemonade --save if they want.\n. ",
    "TimothyDespair": "That's fixed it! Thanks.\n. That's fixed it! Thanks.\n. ",
    "pocesar": "for the current version of tower, npm should be npm install grunt@~0.3.0 -g\n. why can't the tasks files be upgraded to version 0.4 of grunt, since it's stable now?\n. ah ok, my bad\n. this is no use if the generated package.json from tower new app is not locked, it's still generating dependencies with >=, had to manually lock them, but most users won't take notice before doing an npm install\n. that fixed it. so there's a typo in http://towerjs.org/guides showing yield \"templates\"\n. nice pull\n. doesn't work with node 0.10, stick with 0.8.22\n. parseInt('0755', 8) or just make it use 0755, the same effect (Javascript supports octals without the need of extra parseInt)\n. for the current version of tower, npm should be npm install grunt@~0.3.0 -g\n. why can't the tasks files be upgraded to version 0.4 of grunt, since it's stable now?\n. ah ok, my bad\n. this is no use if the generated package.json from tower new app is not locked, it's still generating dependencies with >=, had to manually lock them, but most users won't take notice before doing an npm install\n. that fixed it. so there's a typo in http://towerjs.org/guides showing yield \"templates\"\n. nice pull\n. doesn't work with node 0.10, stick with 0.8.22\n. parseInt('0755', 8) or just make it use 0755, the same effect (Javascript supports octals without the need of extra parseInt)\n. ",
    "btbinhtran": "I agree edubkendo. There is just one concern that I read in the code comments that said the commands would be switched from classes to their own functions. I could start by making a destroy class, but not sure it will add more work for migrating the Command classes to be only separate functions. My guess is that this refactor improves the commands run speed.\n. Your syntax idea seems like a good start.\nPossible syntax assuming the singular search criteria can be a string or regex:\n- For multiple files, packages, ... the user can have an array of filename search strings and regex:\n  tower test include,filenames=['filename1', /A-Za-z0-9/, 'filename2'],packages=['pack1', /tower/] exclude,filenames=['filename3', /*.txt/]\n- For 1 file, package, ... the search criteria can be a search string or regex:\n  tower test include,filename='filename1' package='pack1' exclude,filename='filename2'\n. I concatenated all the commits into one which solves issue 365 and 371, but I'm not sure why the pull request closed on my end.\nI had to revert my branch because I did some additional commits on top of master, then rebase.\nWhen I pushed the rebased issue365destroycommand branch it closed the pull request.\nHope all is well.\n. I agree with haohello. There needs to be a foundation where new developers are feeling empowered by the momentum of the project to keep watching the project. Our foundation would be the main site.\nThe least we can do right now is to update the main site.\nRepository located https://github.com/viatropos/towerjs.org\nI'm willing to do that.\nLet's discuss what updates to do on the main site that will have an immediate impact.\nFirst, we can improve the site SEO. We're not even getting on the first page of Google results for \"tower\".\nSecond, we can brand ourselves better with a larger Tower image.\n. Following the Ember design is a great idea. It gives us a similar theme for people to relate Tower with Ember.\nThe first few things that I plan to do:\n- Add an original logo\n- An API section\n- A guide section\n- A quick flash-bang tutorial guide\n- A more in-depth guide Towerjs Tutorial\n- Orient theme towards a Tower that goes \"high in the sky\"\nAlso, having a weekly or biweekly posting of updates onto a blog or any social platform would help gain and maintain interest in Tower. I'm also still trying to write the Towerjs Tutorial.\nI'll get things rolling on Monday. Enjoy your Superbowl weekend.\n. What are the error messages?\nAlso, which version of Tower are you using?\nThe one from NPM Registry or the cutting edge from this repository?\n. Good to know.\n. This link should have all the info you need.\nhttps://github.com/viatropos/tower/wiki/Models\nCheers!\n. Take a look at issue386. https://github.com/viatropos/tower/issues/386\n. Ok, your issue has to do with your grunt-contrib, grunt-contrib-less, and grunt-contrib-stylus package versions.\nFirst, uninstall grunt-contrib, grunt-contrib-less, and grunt-contrib-stylus by running\nnpm uninstall grunt-contrib-less grunt-contrib-stylus grunt-contrib\nThen in your app's package.json you need to change lines:\n\"grunt-contrib-less\": \">= 0.3.0\",\n\"grunt-contrib-stylus\": \">= 0.3.0\",\n\"grunt-contrib\": \">= 0.2.0\",\nto\n\"grunt-contrib-less\": \"~0.3.2\",\n\"grunt-contrib-stylus\": \"~0.3.1\",\n\"grunt-contrib\": \"~0.3.0\",\nThe updated package.json should look almost exactly like this without my name:\n```\n{\n  \"name\": \"app\",\n  \"private\": true,\n  \"version\": \"0.1.0\",\n  \"description\": \"\",\n  \"homepage\": \"http://User.github.com/app\",\n  \"main\": \"./server.js\",\n  \"subdomain\": \"app\",\n  \"author\": \"'Binh Tran' btbinhtran@gmail.com\",\n  \"keywords\": [\n    \"node\"\n  ],\n  \"maintainers\": [{\n    \"name\": \"Binh Tran\",\n    \"email\": \"btbinhtran@gmail.com\"\n  }],\n  \"contributors\": [\n],\n  \"licenses\": [\n    {\n      \"type\": \"MIT\",\n      \"url\": \"http://mths.be/mit\"\n    }\n  ],\n  \"bugs\": {\n    \"url\": \"https://github.com/User/app/issues\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/User/app.git\"\n  },\n  \"engines\": {\n    \"node\": \">= 0.6.0\",\n    \"npm\": \">= 1\"\n  },\n  \"dependencies\": {\n    \"async\": \">= 0.1.22\",\n    \"coffee-script\": \"1.3.3\",\n    \"mongodb\": \">= 1.1.10\",\n    \"coffeecup\": \">= 0.3.17\",\n    \"socket.io\": \">= 0.8.7\",\n    \"socket.io-client\": \">= 0.9.5\",\n    \"tower\": \">= 0.4.2\",\n    \"which\": \">= 1.0.5\"\n  },\n  \"optionalDependencies\": {\n    \"nodemailer\": \">= 0.3.28\",\n    \"kue\": \">= 0.3.4\"\n  },\n  \"devDependencies\": {\n    \"chokidar\": \"~0.4.0\",\n    \"stylus\": \">= 0.29.0\",\n    \"Faker\": \">= 0.1.3\",\n    \"less\": \">= 1.2.2\",\n    \"uglify-js\": \">= 1.1.1\",\n    \"mocha\": \">= 0.12.1\",\n    \"chai\": \">= 0.3.3\",\n    \"sinon\": \">= 1.3.1\",\n    \"knox\": \">= 0.0.11\",\n    \"gzip\": \">= 0.1.0\",\n    \"cli-table\": \">= 0.0.1\",\n    \"grunt-contrib-less\": \"~0.3.2\",\n    \"grunt-contrib-stylus\": \"~0.3.1\",\n    \"grunt-contrib\": \"~0.3.0\",\n    \"superagent\": \">= 0.9.5\",\n    \"wrench\": \">= 1.3.8\",\n    \"fibers\": \"~0.6.8\",\n    \"ejs\": \">= 0.6.1\"\n  },\n  \"scripts\": {\n    \"test\": \"./node_modules/mocha/bin/mocha $(find test -name \\\"Test.coffee\\\")\",\n    \"prepublish\": \"npm prune; rm -rf node_modules//{test,example,bench}*\",\n    \"start\": \"node server.js -e production\"\n  },\n  \"tower\": {\n    \"stylesheets\": \"styl\",\n    \"scripts\": \"coffee\",\n    \"templates\": \"coffee\"\n  }\n}\n```\nNow run:\nnpm install\nRun\ncake watch\nand you should be set.\nIn the future, these library version issues will be resolved by using the safe package patch versions with \"~(version #)\" instead of \">= (version #)\"\nThat's the proper way to install packages in Node.js.\n. I was able to get it working with a clean install of Node.js version 0.8.21 with NVM (Node Version Manager).\nTry a clean install with NVM and Node.js version 0.8.21 to isolate the problem as much as possible.\nIf you haven't setup NVM already, see https://github.com/creationix/nvm\nWith NVM, install Node.js version 0.8.21 by running\nnvm install 0.8.21\nYou should make a default alias to the latest Node.js version by running\nnvm alias default 0.8.21\nMake sure you are using Node.js version 0.8.21 by running either\nnvm use 0.8.21\nor\nnvm use default\nNow you should check you are using Node.js version 0.8.21 by running\nnode -v\nThat should output\nv0.8.21\nAlso, check your NPM (Node Package Manager) version by running\nnpm -v\nwhich should output\n1.2.11\nIf all is good so far, let's install Tower globally by running\nnpm install tower -g\nNext, install Grunt version 0.3.17 globally by running\nnpm install grunt@0.3.17 -g\nLater versions of Grunt are not working with Tower.\nAlso, install CoffeeScript version 1.4.0 by running\nnpm install coffee-script@1.4.0 -g\nAt the moment, only CoffeeScript version 1.4.0 is working well with Tower.\nCheck your Tower version by running\ntower -V\nwhich should output\n0.4.2-25\nNow, install MongoDB with brew if you haven't installed it yet\nbrew install mongodb\nRun the MongoDB server by running\nmongod\nAfter all that installation, let's get started with your first app.\nIn your terminal, generate your app by running\ntower new app\nEdit your app's package.json like we discussed earlier.\nIn your app's package.json you need to change lines:\n\"grunt-contrib-less\": \">= 0.3.0\",\n\"grunt-contrib-stylus\": \">= 0.3.0\",\n\"grunt-contrib\": \">= 0.2.0\",\nto\n\"grunt-contrib-less\": \"~0.3.2\",\n\"grunt-contrib-stylus\": \"~0.3.1\",\n\"grunt-contrib\": \"~0.3.0\",\nThe updated package.json should look almost exactly like this without my name:\n```\n{\n  \"name\": \"app\",\n  \"private\": true,\n  \"version\": \"0.1.0\",\n  \"description\": \"\",\n  \"homepage\": \"http://User.github.com/app\",\n  \"main\": \"./server.js\",\n  \"subdomain\": \"app\",\n  \"author\": \"'Binh Tran' btbinhtran@gmail.com\",\n  \"keywords\": [\n    \"node\"\n  ],\n  \"maintainers\": [{\n    \"name\": \"Binh Tran\",\n    \"email\": \"btbinhtran@gmail.com\"\n  }],\n  \"contributors\": [\n],\n  \"licenses\": [\n    {\n      \"type\": \"MIT\",\n      \"url\": \"http://mths.be/mit\"\n    }\n  ],\n  \"bugs\": {\n    \"url\": \"https://github.com/User/app/issues\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/User/app.git\"\n  },\n  \"engines\": {\n    \"node\": \">= 0.6.0\",\n    \"npm\": \">= 1\"\n  },\n  \"dependencies\": {\n    \"async\": \">= 0.1.22\",\n    \"coffee-script\": \"1.3.3\",\n    \"mongodb\": \">= 1.1.10\",\n    \"coffeecup\": \">= 0.3.17\",\n    \"socket.io\": \">= 0.8.7\",\n    \"socket.io-client\": \">= 0.9.5\",\n    \"tower\": \">= 0.4.2\",\n    \"which\": \">= 1.0.5\"\n  },\n  \"optionalDependencies\": {\n    \"nodemailer\": \">= 0.3.28\",\n    \"kue\": \">= 0.3.4\"\n  },\n  \"devDependencies\": {\n    \"chokidar\": \"~0.4.0\",\n    \"stylus\": \">= 0.29.0\",\n    \"Faker\": \">= 0.1.3\",\n    \"less\": \">= 1.2.2\",\n    \"uglify-js\": \">= 1.1.1\",\n    \"mocha\": \">= 0.12.1\",\n    \"chai\": \">= 0.3.3\",\n    \"sinon\": \">= 1.3.1\",\n    \"knox\": \">= 0.0.11\",\n    \"gzip\": \">= 0.1.0\",\n    \"cli-table\": \">= 0.0.1\",\n    \"grunt-contrib-less\": \"~0.3.2\",\n    \"grunt-contrib-stylus\": \"~0.3.1\",\n    \"grunt-contrib\": \"~0.3.0\",\n    \"superagent\": \">= 0.9.5\",\n    \"wrench\": \">= 1.3.8\",\n    \"fibers\": \"~0.6.8\",\n    \"ejs\": \">= 0.6.1\"\n  },\n  \"scripts\": {\n    \"test\": \"./node_modules/mocha/bin/mocha $(find test -name \\\"Test.coffee\\\")\",\n    \"prepublish\": \"npm prune; rm -rf node_modules//{test,example,bench}*\",\n    \"start\": \"node server.js -e production\"\n  },\n  \"tower\": {\n    \"stylesheets\": \"styl\",\n    \"scripts\": \"coffee\",\n    \"templates\": \"coffee\"\n  }\n}\n```\nThen run\nnpm install\nNext, start your app server\nnode server\nThen, in a second terminal, start the watcher. This will automatically compile files when they change:\ncd app\ncake watch\nGo to localhost:3000 in your browser and you should get something like this\n\n. Take a look at https://github.com/viatropos/tower/issues/388\nLook at the last comment.\nOther than that, wait for the 0.5.0 release. It will be out soon.\nCheers!\n. tower new app is generating dependencies with ~.\nCheck the files changed https://github.com/viatropos/tower/commit/935a8f854448139c4cce2f55bd0aed70b961b4cb\nMake sure tower is linked properly with npm link in the tower source directory.\n. I agree with @edubkendo about getting a good grip on Ember. A really good resource is https://peepcode.com/products/emberjs\nOnce Tower v0.5 is out, the guides, docs, and the Towerjs Tutorial will be updated.\nAlso, @viatropos and @TheHydroImpulse are working as fast as they can to get the 0.5 release out the door.\nIn the future, merge requests will be processed faster because we will have more contributors having merge request authorization.\n. @TheHydroImpulse Delegate us work if you can. To clarify, the new Tower github url is at https://github.com/tower\nIt's actually a user named Tower with multiple repositories being the separate components of tower. Is that how we want to go about this? I was under the impression we would have a user tower with one main repository named tower containing the separate components. This would make it easier for contributors to track one repository.\nWhat am I missing?\n. I agree edubkendo. There is just one concern that I read in the code comments that said the commands would be switched from classes to their own functions. I could start by making a destroy class, but not sure it will add more work for migrating the Command classes to be only separate functions. My guess is that this refactor improves the commands run speed.\n. Your syntax idea seems like a good start.\nPossible syntax assuming the singular search criteria can be a string or regex:\n- For multiple files, packages, ... the user can have an array of filename search strings and regex:\n  tower test include,filenames=['filename1', /A-Za-z0-9/, 'filename2'],packages=['pack1', /tower/] exclude,filenames=['filename3', /*.txt/]\n- For 1 file, package, ... the search criteria can be a search string or regex:\n  tower test include,filename='filename1' package='pack1' exclude,filename='filename2'\n. I concatenated all the commits into one which solves issue 365 and 371, but I'm not sure why the pull request closed on my end.\nI had to revert my branch because I did some additional commits on top of master, then rebase.\nWhen I pushed the rebased issue365destroycommand branch it closed the pull request.\nHope all is well.\n. I agree with haohello. There needs to be a foundation where new developers are feeling empowered by the momentum of the project to keep watching the project. Our foundation would be the main site.\nThe least we can do right now is to update the main site.\nRepository located https://github.com/viatropos/towerjs.org\nI'm willing to do that.\nLet's discuss what updates to do on the main site that will have an immediate impact.\nFirst, we can improve the site SEO. We're not even getting on the first page of Google results for \"tower\".\nSecond, we can brand ourselves better with a larger Tower image.\n. Following the Ember design is a great idea. It gives us a similar theme for people to relate Tower with Ember.\nThe first few things that I plan to do:\n- Add an original logo\n- An API section\n- A guide section\n- A quick flash-bang tutorial guide\n- A more in-depth guide Towerjs Tutorial\n- Orient theme towards a Tower that goes \"high in the sky\"\nAlso, having a weekly or biweekly posting of updates onto a blog or any social platform would help gain and maintain interest in Tower. I'm also still trying to write the Towerjs Tutorial.\nI'll get things rolling on Monday. Enjoy your Superbowl weekend.\n. What are the error messages?\nAlso, which version of Tower are you using?\nThe one from NPM Registry or the cutting edge from this repository?\n. Good to know.\n. This link should have all the info you need.\nhttps://github.com/viatropos/tower/wiki/Models\nCheers!\n. Take a look at issue386. https://github.com/viatropos/tower/issues/386\n. Ok, your issue has to do with your grunt-contrib, grunt-contrib-less, and grunt-contrib-stylus package versions.\nFirst, uninstall grunt-contrib, grunt-contrib-less, and grunt-contrib-stylus by running\nnpm uninstall grunt-contrib-less grunt-contrib-stylus grunt-contrib\nThen in your app's package.json you need to change lines:\n\"grunt-contrib-less\": \">= 0.3.0\",\n\"grunt-contrib-stylus\": \">= 0.3.0\",\n\"grunt-contrib\": \">= 0.2.0\",\nto\n\"grunt-contrib-less\": \"~0.3.2\",\n\"grunt-contrib-stylus\": \"~0.3.1\",\n\"grunt-contrib\": \"~0.3.0\",\nThe updated package.json should look almost exactly like this without my name:\n```\n{\n  \"name\": \"app\",\n  \"private\": true,\n  \"version\": \"0.1.0\",\n  \"description\": \"\",\n  \"homepage\": \"http://User.github.com/app\",\n  \"main\": \"./server.js\",\n  \"subdomain\": \"app\",\n  \"author\": \"'Binh Tran' btbinhtran@gmail.com\",\n  \"keywords\": [\n    \"node\"\n  ],\n  \"maintainers\": [{\n    \"name\": \"Binh Tran\",\n    \"email\": \"btbinhtran@gmail.com\"\n  }],\n  \"contributors\": [\n],\n  \"licenses\": [\n    {\n      \"type\": \"MIT\",\n      \"url\": \"http://mths.be/mit\"\n    }\n  ],\n  \"bugs\": {\n    \"url\": \"https://github.com/User/app/issues\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/User/app.git\"\n  },\n  \"engines\": {\n    \"node\": \">= 0.6.0\",\n    \"npm\": \">= 1\"\n  },\n  \"dependencies\": {\n    \"async\": \">= 0.1.22\",\n    \"coffee-script\": \"1.3.3\",\n    \"mongodb\": \">= 1.1.10\",\n    \"coffeecup\": \">= 0.3.17\",\n    \"socket.io\": \">= 0.8.7\",\n    \"socket.io-client\": \">= 0.9.5\",\n    \"tower\": \">= 0.4.2\",\n    \"which\": \">= 1.0.5\"\n  },\n  \"optionalDependencies\": {\n    \"nodemailer\": \">= 0.3.28\",\n    \"kue\": \">= 0.3.4\"\n  },\n  \"devDependencies\": {\n    \"chokidar\": \"~0.4.0\",\n    \"stylus\": \">= 0.29.0\",\n    \"Faker\": \">= 0.1.3\",\n    \"less\": \">= 1.2.2\",\n    \"uglify-js\": \">= 1.1.1\",\n    \"mocha\": \">= 0.12.1\",\n    \"chai\": \">= 0.3.3\",\n    \"sinon\": \">= 1.3.1\",\n    \"knox\": \">= 0.0.11\",\n    \"gzip\": \">= 0.1.0\",\n    \"cli-table\": \">= 0.0.1\",\n    \"grunt-contrib-less\": \"~0.3.2\",\n    \"grunt-contrib-stylus\": \"~0.3.1\",\n    \"grunt-contrib\": \"~0.3.0\",\n    \"superagent\": \">= 0.9.5\",\n    \"wrench\": \">= 1.3.8\",\n    \"fibers\": \"~0.6.8\",\n    \"ejs\": \">= 0.6.1\"\n  },\n  \"scripts\": {\n    \"test\": \"./node_modules/mocha/bin/mocha $(find test -name \\\"Test.coffee\\\")\",\n    \"prepublish\": \"npm prune; rm -rf node_modules//{test,example,bench}*\",\n    \"start\": \"node server.js -e production\"\n  },\n  \"tower\": {\n    \"stylesheets\": \"styl\",\n    \"scripts\": \"coffee\",\n    \"templates\": \"coffee\"\n  }\n}\n```\nNow run:\nnpm install\nRun\ncake watch\nand you should be set.\nIn the future, these library version issues will be resolved by using the safe package patch versions with \"~(version #)\" instead of \">= (version #)\"\nThat's the proper way to install packages in Node.js.\n. I was able to get it working with a clean install of Node.js version 0.8.21 with NVM (Node Version Manager).\nTry a clean install with NVM and Node.js version 0.8.21 to isolate the problem as much as possible.\nIf you haven't setup NVM already, see https://github.com/creationix/nvm\nWith NVM, install Node.js version 0.8.21 by running\nnvm install 0.8.21\nYou should make a default alias to the latest Node.js version by running\nnvm alias default 0.8.21\nMake sure you are using Node.js version 0.8.21 by running either\nnvm use 0.8.21\nor\nnvm use default\nNow you should check you are using Node.js version 0.8.21 by running\nnode -v\nThat should output\nv0.8.21\nAlso, check your NPM (Node Package Manager) version by running\nnpm -v\nwhich should output\n1.2.11\nIf all is good so far, let's install Tower globally by running\nnpm install tower -g\nNext, install Grunt version 0.3.17 globally by running\nnpm install grunt@0.3.17 -g\nLater versions of Grunt are not working with Tower.\nAlso, install CoffeeScript version 1.4.0 by running\nnpm install coffee-script@1.4.0 -g\nAt the moment, only CoffeeScript version 1.4.0 is working well with Tower.\nCheck your Tower version by running\ntower -V\nwhich should output\n0.4.2-25\nNow, install MongoDB with brew if you haven't installed it yet\nbrew install mongodb\nRun the MongoDB server by running\nmongod\nAfter all that installation, let's get started with your first app.\nIn your terminal, generate your app by running\ntower new app\nEdit your app's package.json like we discussed earlier.\nIn your app's package.json you need to change lines:\n\"grunt-contrib-less\": \">= 0.3.0\",\n\"grunt-contrib-stylus\": \">= 0.3.0\",\n\"grunt-contrib\": \">= 0.2.0\",\nto\n\"grunt-contrib-less\": \"~0.3.2\",\n\"grunt-contrib-stylus\": \"~0.3.1\",\n\"grunt-contrib\": \"~0.3.0\",\nThe updated package.json should look almost exactly like this without my name:\n```\n{\n  \"name\": \"app\",\n  \"private\": true,\n  \"version\": \"0.1.0\",\n  \"description\": \"\",\n  \"homepage\": \"http://User.github.com/app\",\n  \"main\": \"./server.js\",\n  \"subdomain\": \"app\",\n  \"author\": \"'Binh Tran' btbinhtran@gmail.com\",\n  \"keywords\": [\n    \"node\"\n  ],\n  \"maintainers\": [{\n    \"name\": \"Binh Tran\",\n    \"email\": \"btbinhtran@gmail.com\"\n  }],\n  \"contributors\": [\n],\n  \"licenses\": [\n    {\n      \"type\": \"MIT\",\n      \"url\": \"http://mths.be/mit\"\n    }\n  ],\n  \"bugs\": {\n    \"url\": \"https://github.com/User/app/issues\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/User/app.git\"\n  },\n  \"engines\": {\n    \"node\": \">= 0.6.0\",\n    \"npm\": \">= 1\"\n  },\n  \"dependencies\": {\n    \"async\": \">= 0.1.22\",\n    \"coffee-script\": \"1.3.3\",\n    \"mongodb\": \">= 1.1.10\",\n    \"coffeecup\": \">= 0.3.17\",\n    \"socket.io\": \">= 0.8.7\",\n    \"socket.io-client\": \">= 0.9.5\",\n    \"tower\": \">= 0.4.2\",\n    \"which\": \">= 1.0.5\"\n  },\n  \"optionalDependencies\": {\n    \"nodemailer\": \">= 0.3.28\",\n    \"kue\": \">= 0.3.4\"\n  },\n  \"devDependencies\": {\n    \"chokidar\": \"~0.4.0\",\n    \"stylus\": \">= 0.29.0\",\n    \"Faker\": \">= 0.1.3\",\n    \"less\": \">= 1.2.2\",\n    \"uglify-js\": \">= 1.1.1\",\n    \"mocha\": \">= 0.12.1\",\n    \"chai\": \">= 0.3.3\",\n    \"sinon\": \">= 1.3.1\",\n    \"knox\": \">= 0.0.11\",\n    \"gzip\": \">= 0.1.0\",\n    \"cli-table\": \">= 0.0.1\",\n    \"grunt-contrib-less\": \"~0.3.2\",\n    \"grunt-contrib-stylus\": \"~0.3.1\",\n    \"grunt-contrib\": \"~0.3.0\",\n    \"superagent\": \">= 0.9.5\",\n    \"wrench\": \">= 1.3.8\",\n    \"fibers\": \"~0.6.8\",\n    \"ejs\": \">= 0.6.1\"\n  },\n  \"scripts\": {\n    \"test\": \"./node_modules/mocha/bin/mocha $(find test -name \\\"Test.coffee\\\")\",\n    \"prepublish\": \"npm prune; rm -rf node_modules//{test,example,bench}*\",\n    \"start\": \"node server.js -e production\"\n  },\n  \"tower\": {\n    \"stylesheets\": \"styl\",\n    \"scripts\": \"coffee\",\n    \"templates\": \"coffee\"\n  }\n}\n```\nThen run\nnpm install\nNext, start your app server\nnode server\nThen, in a second terminal, start the watcher. This will automatically compile files when they change:\ncd app\ncake watch\nGo to localhost:3000 in your browser and you should get something like this\n\n. Take a look at https://github.com/viatropos/tower/issues/388\nLook at the last comment.\nOther than that, wait for the 0.5.0 release. It will be out soon.\nCheers!\n. tower new app is generating dependencies with ~.\nCheck the files changed https://github.com/viatropos/tower/commit/935a8f854448139c4cce2f55bd0aed70b961b4cb\nMake sure tower is linked properly with npm link in the tower source directory.\n. I agree with @edubkendo about getting a good grip on Ember. A really good resource is https://peepcode.com/products/emberjs\nOnce Tower v0.5 is out, the guides, docs, and the Towerjs Tutorial will be updated.\nAlso, @viatropos and @TheHydroImpulse are working as fast as they can to get the 0.5 release out the door.\nIn the future, merge requests will be processed faster because we will have more contributors having merge request authorization.\n. @TheHydroImpulse Delegate us work if you can. To clarify, the new Tower github url is at https://github.com/tower\nIt's actually a user named Tower with multiple repositories being the separate components of tower. Is that how we want to go about this? I was under the impression we would have a user tower with one main repository named tower containing the separate components. This would make it easier for contributors to track one repository.\nWhat am I missing?\n. ",
    "DiegoSalazar": "I get the same thing. I also tried running \n``` javascript\n \u2794 cake watch\nDefault database not set, using Memory store\nRunning \"copy:stylesheets\" (copy) task\nCopied 2 files.\nRunning \"copy:javascripts\" (copy) task\nCopied 35 files.\nRunning \"copy:images\" (copy) task\nCopied 0 files.\nRunning \"coffee:compile\" (coffee) task\nRunning \"less:bootstrap\" (less) task\nFile public/stylesheets/vendor/stylesheets/bootstrap/bootstrap.css created.\nRunning \"stylus:compile\" (stylus) task\nFile public/stylesheets/app/stylesheets/client/application.css created.\nRunning \"templates:compile\" (templates) task\nRunning \"watch\" task\nWaiting...\n```\nbut the same error comes up even after a server restart. Not sure where to go from here\n. I get the same thing. I also tried running \n``` javascript\n \u2794 cake watch\nDefault database not set, using Memory store\nRunning \"copy:stylesheets\" (copy) task\nCopied 2 files.\nRunning \"copy:javascripts\" (copy) task\nCopied 35 files.\nRunning \"copy:images\" (copy) task\nCopied 0 files.\nRunning \"coffee:compile\" (coffee) task\nRunning \"less:bootstrap\" (less) task\nFile public/stylesheets/vendor/stylesheets/bootstrap/bootstrap.css created.\nRunning \"stylus:compile\" (stylus) task\nFile public/stylesheets/app/stylesheets/client/application.css created.\nRunning \"templates:compile\" (templates) task\nRunning \"watch\" task\nWaiting...\n```\nbut the same error comes up even after a server restart. Not sure where to go from here\n. ",
    "gawnecoding": "As a quick workaround I set the flags on lines 13-15 of C:\\Code\\js\\towertest\\node_modules\\tower\\lib\\tower-middleware\\server\\agent.js manually:\n...\nmac: false,\nwindows: true,\nlinux: false\n...\n. As a quick workaround I set the flags on lines 13-15 of C:\\Code\\js\\towertest\\node_modules\\tower\\lib\\tower-middleware\\server\\agent.js manually:\n...\nmac: false,\nwindows: true,\nlinux: false\n...\n. ",
    "SebastianThiebaud": "Thank you so much @gawnecoding. Works perfectly with your update.\n. Thank you so much @gawnecoding. Works perfectly with your update.\n. ",
    "o-nix": "Found this bug today on my Windows 7. Thanks @gawnecoding.\n. Found this bug today on my Windows 7. Thanks @gawnecoding.\n. ",
    "cramhead": "Works for me. Thanks\n. Works for me. Thanks\n. ",
    "curioushuman": "Diamond @gawnecoding - great temp fix.\n. Diamond @gawnecoding - great temp fix.\n. ",
    "Tolmark12": "Worked for me, thanks, will this be addressed in a more permanent way?\n. Worked for me, thanks, will this be addressed in a more permanent way?\n. ",
    "jisaacks": "This fixed for me too. When will a new release with this fix be released? I just manually edited my local install for now.\n. @erundook thanks I was trying to figure out how to do that!\n. @juanpaco I don't recall doing anything except restarting the server. \n. This fixed for me too. When will a new release with this fix be released? I just manually edited my local install for now.\n. @erundook thanks I was trying to figure out how to do that!\n. @juanpaco I don't recall doing anything except restarting the server. \n. ",
    "rwwagner90": "Can someone please explain how to fix this error in detail? I've spent the past hour trying to figure it out. \n@erundook @juanpaco @jisaacks @viatropos \n. Can someone please explain how to fix this error in detail? I've spent the past hour trying to figure it out. \n@erundook @juanpaco @jisaacks @viatropos \n. ",
    "bryanhales": "@rwwagner90 In your project, go to node_modules/tower/lib/tower-middleware/server/agent.js and replace lines 13-15 with:\njavascript\nmac: !!agent.os.family.match(/mac/i),\nwindows: !!agent.os.family.match(/win/i),\nlinux: !!agent.os.family.match(/linux/i)\nor as @juanpaco suggested, delete your node_modules directory (in your project), update your package.json file to point to \"git://github.com/viatropos/tower.git\" instead of a specific version of tower, then run npm install from within your project's directory in terminal.\n. @rwwagner90 In your project, go to node_modules/tower/lib/tower-middleware/server/agent.js and replace lines 13-15 with:\njavascript\nmac: !!agent.os.family.match(/mac/i),\nwindows: !!agent.os.family.match(/win/i),\nlinux: !!agent.os.family.match(/linux/i)\nor as @juanpaco suggested, delete your node_modules directory (in your project), update your package.json file to point to \"git://github.com/viatropos/tower.git\" instead of a specific version of tower, then run npm install from within your project's directory in terminal.\n. ",
    "haohello": "I'm curious to know how many guys are now developing tower.js? And do you have any plans to set up a foundation to back up the tower.js development? You know currently the development is rather slow and it'll eventually diminish everyone's confidence for the future of the project.\n. I'm curious to know how many guys are now developing tower.js? And do you have any plans to set up a foundation to back up the tower.js development? You know currently the development is rather slow and it'll eventually diminish everyone's confidence for the future of the project.\n. ",
    "neverfox": "Just to be clear, when I say that I used the github version, I mean as an argument to npm install. In other words, I first ran npm install -g tower, which gave me the problem I described. Only then did I try npm install -g git://github.com/viatropos/tower.git, on a whim. Neither approach gave me a version where cake watch worked. Also, coffee-script and grunt are also installed globally in npm.\nI'll try your suggestion. Do you mean failing during the npm installation of tower? Any idea as to why this might be happening? If it relies on make being available, that could definitely be the issue, given that this is a Windows machine and make needs to be explicitly installed.\n. I do have the lib folder in my global tower folder. I don't, however, have one in the local version of the new tower app after running npm install from the app's folder, which seems to be the cause of the problem. I'm going to try starting from scratch with my node packages after reading about some quirks with node and Windows. In the meantime, would you recommend using your fork of tower at all or is it too unstable?\n. Thank you. If you think there is a reasonable set of hacks I could make to 0.4 to patch it for now, I'd be willing to try to make them. Otherwise, it might just be that I have to resign myself to waiting for 0.5.0 before attempting a Tower project. I have a demo app for my job to finish by the beginning of March and I was very much hoping it would be a tower app. Windows isn't optional so, instead, I may have to jump into straight Ember (maybe with Brunch), Knockback or the like. But what drew me to Tower is that I really want something that is full-stack out-of-the-box (node/express/mongodb backend ideally) so that I can concentrate on the app logic and templates rather than hooking up plumbing. Tower seems to be moving in the right direction even if it's not ready for Windows, and the only really similar product of any maturity seems to be CompoundJS.\n. Running grunt start --config ./grunt.coffee from the app's node_modules\\tower folder finally built the lib folder, along with other things, and now stuff works. I had also installed make so not sure if that helped. I still don't know why it doesn't run correctly during the original npm install; probably something with Unix paths.\n. Just to be clear, when I say that I used the github version, I mean as an argument to npm install. In other words, I first ran npm install -g tower, which gave me the problem I described. Only then did I try npm install -g git://github.com/viatropos/tower.git, on a whim. Neither approach gave me a version where cake watch worked. Also, coffee-script and grunt are also installed globally in npm.\nI'll try your suggestion. Do you mean failing during the npm installation of tower? Any idea as to why this might be happening? If it relies on make being available, that could definitely be the issue, given that this is a Windows machine and make needs to be explicitly installed.\n. I do have the lib folder in my global tower folder. I don't, however, have one in the local version of the new tower app after running npm install from the app's folder, which seems to be the cause of the problem. I'm going to try starting from scratch with my node packages after reading about some quirks with node and Windows. In the meantime, would you recommend using your fork of tower at all or is it too unstable?\n. Thank you. If you think there is a reasonable set of hacks I could make to 0.4 to patch it for now, I'd be willing to try to make them. Otherwise, it might just be that I have to resign myself to waiting for 0.5.0 before attempting a Tower project. I have a demo app for my job to finish by the beginning of March and I was very much hoping it would be a tower app. Windows isn't optional so, instead, I may have to jump into straight Ember (maybe with Brunch), Knockback or the like. But what drew me to Tower is that I really want something that is full-stack out-of-the-box (node/express/mongodb backend ideally) so that I can concentrate on the app logic and templates rather than hooking up plumbing. Tower seems to be moving in the right direction even if it's not ready for Windows, and the only really similar product of any maturity seems to be CompoundJS.\n. Running grunt start --config ./grunt.coffee from the app's node_modules\\tower folder finally built the lib folder, along with other things, and now stuff works. I had also installed make so not sure if that helped. I still don't know why it doesn't run correctly during the original npm install; probably something with Unix paths.\n. ",
    "gilbertbw": "with 'sudo npm install -g tower' the install runs without error but running 'tower' I receive the error '-bash: tower: command not found'\nOn 14 Feb 2013, at 19:07, Daniel notifications@github.com wrote:\n\nThat chmod error is because you need root privilege to install modules \nglobally. \nOn Feb 14, 2013 10:41 AM, \"Gilbert Bishop-White\" notifications@github.com \nwrote: \n\nI tried installing tower using '''npm install -g tower''' is appeared to \nwork fine but '''tower''' was not a recognised command. I then tried '''npm \ncache clean''' and then '''npm install -g tower'''. But it failed \nconsole log & log file: https://gist.github.com/gilbertbw/4951927 \n\u2014 \nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/383. \n\u2014\nReply to this email directly or view it on GitHub.\n. I ran the both commands 'sudo', with no success. I then uninstalled 'sudo' and reinstalled with standard permissions, the install ran fine but 'tower' is still unrecognised.\nOn 14 Feb 2013, at 23:59, Lance Pollard notifications@github.com wrote:\n\nTry uninstalling the global tower then reinstalling:\nnpm uninstall tower -g\nnpm install tower -g\nAlso, if you have ever run npm link from within a cloned version of the GitHub repo, then cd into that repo and run npm unlink.\n\u2014\nReply to this email directly or view it on GitHub.\n. with 'sudo npm install -g tower' the install runs without error but running 'tower' I receive the error '-bash: tower: command not found'\nOn 14 Feb 2013, at 19:07, Daniel notifications@github.com wrote:\nThat chmod error is because you need root privilege to install modules \nglobally. \nOn Feb 14, 2013 10:41 AM, \"Gilbert Bishop-White\" notifications@github.com \nwrote: \n\nI tried installing tower using '''npm install -g tower''' is appeared to \nwork fine but '''tower''' was not a recognised command. I then tried '''npm \ncache clean''' and then '''npm install -g tower'''. But it failed \nconsole log & log file: https://gist.github.com/gilbertbw/4951927 \n\u2014 \nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/issues/383. \n\u2014\nReply to this email directly or view it on GitHub.\n. I ran the both commands 'sudo', with no success. I then uninstalled 'sudo' and reinstalled with standard permissions, the install ran fine but 'tower' is still unrecognised.\nOn 14 Feb 2013, at 23:59, Lance Pollard notifications@github.com wrote:\n\nTry uninstalling the global tower then reinstalling:\nnpm uninstall tower -g\nnpm install tower -g\nAlso, if you have ever run npm link from within a cloned version of the GitHub repo, then cd into that repo and run npm unlink.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "paxer": "adding  /usr/local/share/npm/bin  - fix the problem for me. Thanks!\n. adding  /usr/local/share/npm/bin  - fix the problem for me. Thanks!\n. ",
    "devinrhode2": "View rendered readme here: https://github.com/devinrhode2/tower/blob/236d3f9042737a69f2e691e1576013300b06a91f/README.md\n. sweet. yeah I just searched dribbble for 'tower' and had some fun, awesome\nto hear there a graphic designer on board!\n-Devin http://zerply.com/DevinRhode2\n http://zerply.com/devinrhode2\nOn Sun, Feb 24, 2013 at 1:56 AM, Lance Pollard notifications@github.comwrote:\n\nI really like the font but sorry you can't copy the Ember tower thingy and\nuse it for the logo :)\n[image: Ember tower thingy]https://a248.e.akamai.net/camo.github.com/c135b524025f187d64073211c3a5303425b8f5ee/687474703a2f2f656d6265726a732e636f6d2f696d616765732f61626f75742f656d6265722d7374727563747572652d736d2e706e67\nWe have a great graphic designer onboard working on this. It's going to be\nawesome.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/pull/385#issuecomment-14006079.\n. View rendered readme here: https://github.com/devinrhode2/tower/blob/236d3f9042737a69f2e691e1576013300b06a91f/README.md\n. sweet. yeah I just searched dribbble for 'tower' and had some fun, awesome\nto hear there a graphic designer on board!\n\n-Devin http://zerply.com/DevinRhode2\n http://zerply.com/devinrhode2\nOn Sun, Feb 24, 2013 at 1:56 AM, Lance Pollard notifications@github.comwrote:\n\nI really like the font but sorry you can't copy the Ember tower thingy and\nuse it for the logo :)\n[image: Ember tower thingy]https://a248.e.akamai.net/camo.github.com/c135b524025f187d64073211c3a5303425b8f5ee/687474703a2f2f656d6265726a732e636f6d2f696d616765732f61626f75742f656d6265722d7374727563747572652d736d2e706e67\nWe have a great graphic designer onboard working on this. It's going to be\nawesome.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/viatropos/tower/pull/385#issuecomment-14006079.\n. \n",
    "Dynebe": "Ok i try npm install -g grunt@0.3.x both locally and globally and i receive another error.\nThe grunt.js is located in the folder\n\n. I still have the same prob after installing grunt@0.3.17. Please help!!\n. I run the grunt in the app directory and receive this error. \n\nAnd also can you show me how to change the reference in the Cakefile?\n. Ok i tried and this is what i get\n\n. Ok i solved the server prob. The grunt i still receive some errors. \n\nHow to you fixed grunt to read grunt.coffee instead of grunt.js? Do I have to execute this grunt --config ./grunt.coffee everytime?\n. Ok but when i execute cake watch i still get the above error. \nWhen i execute grunt --config ./grunt.coffee, I get this,\n\n. Same result and it does not install the ones that match the 0.3.17 grunt when i does that.\n. ok i solved the grunt-contrib prob its due to the grunt-contrib-less dependencies. I reinstall those and its ok. But when i run cake watch i still get this error\n\n. btw cake watch is under which module? I have try everything i could but still receive that same error\n. This is part of my codes in Cakefile: \n``` coffeescript\nrequire 'tower'\nknox  = require('knox')\nspawn = require('child_process').spawn\nwhich = require('which').sync\npath  = require('path')\nspawnGrunt = (args = []) ->\n  args.push('--config', path.join(process.cwd(), '.\\grunt.coffee'))\ngrunt   = which('grunt')\n  watcher = spawn('.\\node_modules\\grunt\\bin\\grunt', args) \n  watcher.stdout.setEncoding('utf8')\n  watcher.stderr.setEncoding('utf8')\n  watcher.stdout.on 'data', (data) ->\n    console.log data.replace(/\\n$/m, '') # remove extra line\n  watcher.stderr.on 'data', (data) ->\n    console.log data.replace(/\\n$/m, '')\n```\nI still get that error. I have no idea why as the grunt --config .\\grunt.coffee works\n. http://msdn.microsoft.com/en-us/library/windows/desktop/aa365247(v=vs.85).aspx#paths\nI still cannot get it to work. If i am gonna use grunt --config ./grunt.coffee, thats all right?\nEdited, Ok i got it to work using grunt --config ./grunt.coffee but it will not update as the server is running right?\n. \nWhen its done it just end, so is it really watching the files for changes?\n. ok thx i solve it. Looking forward to Tower 0.5.0\n. Ok i try npm install -g grunt@0.3.x both locally and globally and i receive another error.\nThe grunt.js is located in the folder\n\n. I still have the same prob after installing grunt@0.3.17. Please help!!\n. I run the grunt in the app directory and receive this error. \n\nAnd also can you show me how to change the reference in the Cakefile?\n. Ok i tried and this is what i get\n\n. Ok i solved the server prob. The grunt i still receive some errors. \n\nHow to you fixed grunt to read grunt.coffee instead of grunt.js? Do I have to execute this grunt --config ./grunt.coffee everytime?\n. Ok but when i execute cake watch i still get the above error. \nWhen i execute grunt --config ./grunt.coffee, I get this,\n\n. Same result and it does not install the ones that match the 0.3.17 grunt when i does that.\n. ok i solved the grunt-contrib prob its due to the grunt-contrib-less dependencies. I reinstall those and its ok. But when i run cake watch i still get this error\n\n. btw cake watch is under which module? I have try everything i could but still receive that same error\n. This is part of my codes in Cakefile: \n``` coffeescript\nrequire 'tower'\nknox  = require('knox')\nspawn = require('child_process').spawn\nwhich = require('which').sync\npath  = require('path')\nspawnGrunt = (args = []) ->\n  args.push('--config', path.join(process.cwd(), '.\\grunt.coffee'))\ngrunt   = which('grunt')\n  watcher = spawn('.\\node_modules\\grunt\\bin\\grunt', args) \n  watcher.stdout.setEncoding('utf8')\n  watcher.stderr.setEncoding('utf8')\n  watcher.stdout.on 'data', (data) ->\n    console.log data.replace(/\\n$/m, '') # remove extra line\n  watcher.stderr.on 'data', (data) ->\n    console.log data.replace(/\\n$/m, '')\n```\nI still get that error. I have no idea why as the grunt --config .\\grunt.coffee works\n. http://msdn.microsoft.com/en-us/library/windows/desktop/aa365247(v=vs.85).aspx#paths\nI still cannot get it to work. If i am gonna use grunt --config ./grunt.coffee, thats all right?\nEdited, Ok i got it to work using grunt --config ./grunt.coffee but it will not update as the server is running right?\n. \nWhen its done it just end, so is it really watching the files for changes?\n. ok thx i solve it. Looking forward to Tower 0.5.0\n. ",
    "mitchpolska": "I have resolved problem by removing @scopeall from controllers. Thank you for your response.\n. I don't want create another issue (I think the problem is trivial). Maybe you know how to update model ? I have created model named chat but now I want to add another fields to it. How to do this ?\n. Doesn't work. Anyway, thank you !\n. Thank you very much but now I have this errors:\nDefault database not set, using Memory store\nRunning \"copy:stylesheets\" (copy) task\nCopied 2 files.\nRunning \"copy:javascripts\" (copy) task\nCopied 35 files.\nRunning \"copy:images\" (copy) task\nCopied 0 files.\nRunning \"coffee:compile\" (coffee) task\nRunning \"less:bootstrap\" (less) task\nTypeError: Object # has no method 'options'\n    at Object.module.exports.grunt.util._.extend.filename (/Users/kopankom/projects/node/tow/node_modules/grunt-contrib-less/tasks/less.js:24:24)\n    at Object.task.registerMultiTask.thisTask (/usr/local/lib/node_modules/grunt/lib/grunt/task.js:109:15)\n    at Object.task.registerTask.thisTask.fn (/usr/local/lib/node_modules/grunt/lib/grunt/task.js:58:16)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:343:36)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:319:9)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:346:11)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:319:9)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:346:11)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:319:9)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:346:11)\n. Thank you for your response but still doesn't work:\nERROR\n\n\nTypeError: Object # has no method 'registerHelper'\nWarning: Task \"start\" not found. Use --force to continue.\nAborted due to warnings.\nI had copied all of your package.json and executed npm install\n. I have resolved problem by removing @scopeall from controllers. Thank you for your response.\n. I don't want create another issue (I think the problem is trivial). Maybe you know how to update model ? I have created model named chat but now I want to add another fields to it. How to do this ?\n. Doesn't work. Anyway, thank you !\n. Thank you very much but now I have this errors:\nDefault database not set, using Memory store\nRunning \"copy:stylesheets\" (copy) task\nCopied 2 files.\n\n\nRunning \"copy:javascripts\" (copy) task\nCopied 35 files.\nRunning \"copy:images\" (copy) task\nCopied 0 files.\nRunning \"coffee:compile\" (coffee) task\nRunning \"less:bootstrap\" (less) task\nTypeError: Object # has no method 'options'\n    at Object.module.exports.grunt.util._.extend.filename (/Users/kopankom/projects/node/tow/node_modules/grunt-contrib-less/tasks/less.js:24:24)\n    at Object.task.registerMultiTask.thisTask (/usr/local/lib/node_modules/grunt/lib/grunt/task.js:109:15)\n    at Object.task.registerTask.thisTask.fn (/usr/local/lib/node_modules/grunt/lib/grunt/task.js:58:16)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:343:36)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:319:9)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:346:11)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:319:9)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:346:11)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:319:9)\n    at Task. (/usr/local/lib/node_modules/grunt/lib/util/task.js:346:11)\n. Thank you for your response but still doesn't work:\nERROR\n\n\nTypeError: Object # has no method 'registerHelper'\nWarning: Task \"start\" not found. Use --force to continue.\nAborted due to warnings.\nI had copied all of your package.json and executed npm install\n. \n\n",
    "cyrilf": "Thanks @btbinhtran ! You saved me from a headache ;)\n. Thanks @btbinhtran ! You saved me from a headache ;)\n. ",
    "kuhsaft": "Thanks! I'm going to try to fix the Travis CI build tonight. It might not be done until tomorrow though.\n. Fixing the builder had a ton of issues and since grunt is going to be (mostly?) removed in light of a bundler; the refactorization of the code is practically useless.\n. Yes, I am\n. @TheHydroImpulse Will it be removed for the compilation too? I know that you stated that the source will be written in JavaScript instead of CoffeeScript.\n. @wamatt Also a great link to @TheHydroImpulse 's blog post: http://hydrocodedesign.com/blog/2013/01/18/whats-up-with-tower-dot-js/\n. Nice! Can't wait! :smiley:\n. Thanks! I'm going to try to fix the Travis CI build tonight. It might not be done until tomorrow though.\n. Fixing the builder had a ton of issues and since grunt is going to be (mostly?) removed in light of a bundler; the refactorization of the code is practically useless.\n. Yes, I am\n. @TheHydroImpulse Will it be removed for the compilation too? I know that you stated that the source will be written in JavaScript instead of CoffeeScript.\n. @wamatt Also a great link to @TheHydroImpulse 's blog post: http://hydrocodedesign.com/blog/2013/01/18/whats-up-with-tower-dot-js/\n. Nice! Can't wait! :smiley:\n. ",
    "wamatt": "Is tower.js still being worked on?\n. @Cacteye @TheHydroImpulse  thanks chaps. I see, yeah, maybe throw up a link on the readme of this repo?. Easy to assume it's been abandoned.\n0.5 looks great. I'm assuming the new home will be https://github.com/tower and that's where the action is happening?\nAlso it looks like it will be more heavily componentized (is that a word hehe)? Kinda like what socketstream was trying to do?\n. @TheHydroImpulse ok. Look forward to reading about the 0.5 when you launch. Good luck :+1: \n. Is tower.js still being worked on?\n. @Cacteye @TheHydroImpulse  thanks chaps. I see, yeah, maybe throw up a link on the readme of this repo?. Easy to assume it's been abandoned.\n0.5 looks great. I'm assuming the new home will be https://github.com/tower and that's where the action is happening?\nAlso it looks like it will be more heavily componentized (is that a word hehe)? Kinda like what socketstream was trying to do?\n. @TheHydroImpulse ok. Look forward to reading about the 0.5 when you launch. Good luck :+1: \n. ",
    "deepanshumehndiratta": "I get the following error on downgrading to 0.8.22\nIts been almost 3 days since I'm trying to set up Tower. Can some one tell me exact step by step procedure, since most resources I have found end up throwing some kind of error.\n```\n   create : test/vendor/javascripts/socket.io.js\nevents.js:71\n        throw arguments[1]; // Unhandled 'error' event\n                       ^\nError: socket hang up\n    at createHangUpError (http.js:1373:15)\n    at CleartextStream.socketCloseListener (http.js:1424:23)\n    at CleartextStream.EventEmitter.emit (events.js:126:20)\n    at SecurePair.destroy (tls.js:956:22)\n    at process.startup.processNextTick.process._tickCallback (node.js:245:9)\n```\n. I was finally able to set-up Tower without any setup errors. But I have run into a ton of problems during runtime.\nPlease look into the following open issues: #397 \n. The page content was finally rendered after removing:\nscript type: 'text/x-handlebars', 'data-template-name': 'application', ->\nFrom app/templates/server/layout/application.coffee\nAlthough, the 'javascripts' and 'stylesheets' folder inside public directory are empty, because of which no scripts or stylesheets are being loaded. Anyway to cure this?\nAlso, cake watch gives the following error:\n``\ncake watch\npath.existsSync is now calledfs.existsSync`.\n\n\nNpm module \"grunt-contrib-stylus\" not found. Is it installed?\nDefault database not set, using Memory store\n Task \"stylus\" not found. Use --force to continue. \n\n\nAborted due to warnings.\n```\n. I get the following error on downgrading to 0.8.22\nIts been almost 3 days since I'm trying to set up Tower. Can some one tell me exact step by step procedure, since most resources I have found end up throwing some kind of error.\n```\n   create : test/vendor/javascripts/socket.io.js\nevents.js:71\n        throw arguments[1]; // Unhandled 'error' event\n                       ^\nError: socket hang up\n    at createHangUpError (http.js:1373:15)\n    at CleartextStream.socketCloseListener (http.js:1424:23)\n    at CleartextStream.EventEmitter.emit (events.js:126:20)\n    at SecurePair.destroy (tls.js:956:22)\n    at process.startup.processNextTick.process._tickCallback (node.js:245:9)\n```\n. I was finally able to set-up Tower without any setup errors. But I have run into a ton of problems during runtime.\nPlease look into the following open issues: #397 \n. The page content was finally rendered after removing:\nscript type: 'text/x-handlebars', 'data-template-name': 'application', ->\nFrom app/templates/server/layout/application.coffee\nAlthough, the 'javascripts' and 'stylesheets' folder inside public directory are empty, because of which no scripts or stylesheets are being loaded. Anyway to cure this?\nAlso, cake watch gives the following error:\n``\ncake watch\npath.existsSync is now calledfs.existsSync`.\n\n\nNpm module \"grunt-contrib-stylus\" not found. Is it installed?\nDefault database not set, using Memory store\n Task \"stylus\" not found. Use --force to continue. \n\n\nAborted due to warnings.\n```\n. ",
    "jmtoball": "Same here. I would have expected the initial app code and the stuff generated by scaffold to work as is.\nNode: 0.8.23\nTower: 0.4.2-25\nWhat I did:\n$ tower new test\n$ npm install\n$ node server\nserver is running and serving, but the html output is in the handlebars-scripttag and no stylesheets or javascripts are served.\n. Same here. I would have expected the initial app code and the stuff generated by scaffold to work as is.\nNode: 0.8.23\nTower: 0.4.2-25\nWhat I did:\n$ tower new test\n$ npm install\n$ node server\nserver is running and serving, but the html output is in the handlebars-scripttag and no stylesheets or javascripts are served.\n. ",
    "mfjohansson": "Sorry for asking in this issue thread, but I wonder if there is somewhere I can read on about v0.5, like when it's expected to be released etc? I've seen a roadmap here in this repo, but is that up to date?\n. Thanks for your response. I think that (without having any experience with this particular project) most open source projects needs a rewrite after a few releases since they quite often go through big changes in direction. So it's probably a clever decision.\nI wondered because I'm currently evaluating a few node MVC frameworks and fell for tower just by looking at the documentation. Since I have the same problems as discussed in this issue and can't get a tower-app to run, I'm eager to get a glance at the next version. I understand that you don't want to build any expectations, but is there some kind of plan for when there'll be an update (e.g. before summer or even this year)?\n. Sorry for asking in this issue thread, but I wonder if there is somewhere I can read on about v0.5, like when it's expected to be released etc? I've seen a roadmap here in this repo, but is that up to date?\n. Thanks for your response. I think that (without having any experience with this particular project) most open source projects needs a rewrite after a few releases since they quite often go through big changes in direction. So it's probably a clever decision.\nI wondered because I'm currently evaluating a few node MVC frameworks and fell for tower just by looking at the documentation. Since I have the same problems as discussed in this issue and can't get a tower-app to run, I'm eager to get a glance at the next version. I understand that you don't want to build any expectations, but is there some kind of plan for when there'll be an update (e.g. before summer or even this year)?\n. ",
    "aharbick": "P.S. OS X 10.6.8\n. This is what the diff looks like... https://github.com/aharbick/tower/commit/fbbcc2bb1fb28977f34898968c790fb7156b33cb\n. P.S. OS X 10.6.8\n. This is what the diff looks like... https://github.com/aharbick/tower/commit/fbbcc2bb1fb28977f34898968c790fb7156b33cb\n. ",
    "octopusinc": "Let's get this party started!  I'm waiting on you guys to push this out so I don't have to downgrade Node.\n. Nice work!  I'm excited\u2026\nOn Jun 17, 2013, at 11:16 PM, Daniel notifications@github.com wrote:\n\n@octopusinc We're almost ready.\n\u2014\nReply to this email directly or view it on GitHub.\n. Let's get this party started!  I'm waiting on you guys to push this out so I don't have to downgrade Node.\n. Nice work!  I'm excited\u2026\n\nOn Jun 17, 2013, at 11:16 PM, Daniel notifications@github.com wrote:\n\n@octopusinc We're almost ready.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "yudho": "I experienced same problem where it shows \"Cookbook [app] not found\" and \"Cookbook [component] not found\".\nI have went through your workaround by installing tower-component-cookbook. It was successful, now \"tower create component my-component\" works perfectly. However, the app cookbook still has problem.\nI would be glad if you could show me some workaround for that problem.\nThanks\n. sure..what s the channel?\n. @viatropos , is it possible to build a new app without app cookbook?\nand looking forward to that awesome thing :)\n. I experienced same problem where it shows \"Cookbook [app] not found\" and \"Cookbook [component] not found\".\nI have went through your workaround by installing tower-component-cookbook. It was successful, now \"tower create component my-component\" works perfectly. However, the app cookbook still has problem.\nI would be glad if you could show me some workaround for that problem.\nThanks\n. sure..what s the channel?\n. @viatropos , is it possible to build a new app without app cookbook?\nand looking forward to that awesome thing :)\n. ",
    "maximkott": "@TheHydroImpulse this is the last part of the output. \nI used: npm install -g tower\n. @TheHydroImpulse this is the last part of the output. \nI used: npm install -g tower\n. ",
    "kbups": "Hello,\nI have the same error. Do you find a solution?\nThanks in advance.\n. Hello,\nI have the same error. Do you find a solution?\nThanks in advance.\n. ",
    "tamvm": "I don't play with tower anymore :(\n. Really? Great! We will get back when it's really :+1: and try to contribute if I can. \n. I don't play with tower anymore :(\n. Really? Great! We will get back when it's really :+1: and try to contribute if I can. \n. ",
    "eleung": "Tower is a lost cause, the unresponsiveness of there devs, and total lack of support is ridiculous. Ended up going with Derby.js and have no regrets.  \nEdmond Leung\nOn Friday, November 8, 2013 at 12:39 PM, Tam Vo wrote:\n\nI don't play with tower anymore :(\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/tower/tower/issues/407#issuecomment-28024571).\n. Tower is a lost cause, the unresponsiveness of there devs, and total lack of support is ridiculous. Ended up going with Derby.js and have no regrets.  \n\nEdmond Leung\nOn Friday, November 8, 2013 at 12:39 PM, Tam Vo wrote:\n\nI don't play with tower anymore :(\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/tower/tower/issues/407#issuecomment-28024571).\n. \n",
    "tarun1793": "Ok. Most would be coming from a convention of a framework, so seeing such low activity on primary face of the module/organisation they may, like me, assume that the project is at a stand still.\nI would say keep this issue open until we reach a point to make it a full framework. maybe for a quick job merge the other repos into this one.so that installing this module will make all other available.\n. And Hey!!\n. Yap, agree on that. \nNever been a ruby guy, PHP, Yii, .NET was my thing.\nI will be looking at some code, will love to help if able to!\n. Your answer on SO was extremely helpful.\nThis might figure low in priority given the #things to be done. Will be great if you may do a fair comparison for a few major ones, like sails or geddy. \n+-----------------------+------------------------------+------------------------------------+\n|                       | RailwayJS                    | Tower.js                           |\n+-----------------------+------------------------------+------------------------------------+\n| First commit          | Jan 2011                     | Oct 2011                           |\n| Rails                 | 2.3.x                        | 3.x                                |\n| Node.js               | >= 0.4.x                     | >= 0.4.x                           |\n| Server                | \u2713                            | \u2713                                  |\n| Client                |                              | \u2713                                  |\n| Template agnostic     | \u2713                            | \u2713                                  |\n| Default engine        | EJS                          | CoffeeKup                          |\n| Database agnostic     | \u2713                            | \u2713                                  |\n| Default datastore     | MongoDB                      | MongoDB                            |\n| Model validations     | validatesPresenceOf('email') | validates('email', presence: true) |\n| Query scopes          | \u2713                            | \u2713                                  |\n| Chainable scopes      |                              | \u2713                                  |\n| Param parsing         |                              | \u2713                                  |\n| Controllers           | \u2713                            | \u2713                                  |\n| Resource controllers  |                              | \u2713                                  |\n| File naming           | users_controller.js          | usersController.coffee             |\n| vm.runInCustomContext | \u2713                            |                                    |\n| Asset pipeline        |                              | \u2713                                  |\n| Asset compression     |                              | \u2713                                  |\n| Routing               | map.resources('posts')       | @resources 'posts'                 |\n| Nested routes         | \u2713                            | \u2713                                  |\n| Generated url helpers | \u2713                            |                                    |\n| Generators            | \u2713                            | \u2713                                  |\n| Command-line api      | \u2713                            | \u2713                                  |\n| REPL (console)        | \u2713                            | \u2713                                  |\n| CoffeeScript console  |                              | \u2713                                  |\n| Asset cache method    | timestamp                    | md5 hash                           |\n| Production asset path | /app.css?123123123           | /app-859c828c89288hc8918741.css    |\n| Preferred Language    | JavaScript                   | CoffeeScript                       |\n| CoffeeScript support  | \u2713                            | \u2713                                  |\n| Internationalization  | \u2713                            | \u2713                                  |\n| Heroku support        | \u2713                            | \u2713                                  |\n| String case           | snake_case                   | camelCase                          |\n| Form builder          | \u2713                            | \u2713                                  |\n| Semantic form builder |                              | \u2713                                  |\n| Table builer          |                              | \u2713                                  |\n| File watcher API      |                              | \u2713                                  |\n| Live-reload assets    |                              | \u2713                                  |\n| Test suite            |                              | \u2713                                  |\n| Generators for tests  |                              | \u2713                                  |\n| Twitter Bootstrap     | \u2713                            | \u2713                                  |\n| HTML5 Boilerplate     |                              | \u2713                                  |\n+-----------------------+------------------------------+------------------------------------+\n. This table could happily reside on the readme as well\n. bump.\n. It certainly doesn't redirect.\nOn Thu, Feb 6, 2014 at 12:39 AM, Daniel notifications@github.com wrote:\n\n@andreyvit https://github.com/andreyvit Hey,\ntowerjs.org should be redirecting to tower.github.io. We did have a\ntowerjs.org our previous site for an older version of Tower.\nI'll be getting some stuff in the README that explains what the current\nTower is all about.\n\nReply to this email directly or view it on GitHubhttps://github.com/tower/tower/issues/410#issuecomment-34225458\n.\n. Thanks.\nI was under an impression that coffeeScript is present at the core of Tower, yet everywhere examples are in plain JS. \nAny links to that documentations? or is  it a work in progress?\n\nI have used Spine.js before and they way they embrace the Class functionality is great\n. Why? :(\n. Ok. Most would be coming from a convention of a framework, so seeing such low activity on primary face of the module/organisation they may, like me, assume that the project is at a stand still.\nI would say keep this issue open until we reach a point to make it a full framework. maybe for a quick job merge the other repos into this one.so that installing this module will make all other available.\n. And Hey!!\n. Yap, agree on that. \nNever been a ruby guy, PHP, Yii, .NET was my thing.\nI will be looking at some code, will love to help if able to!\n. Your answer on SO was extremely helpful.\nThis might figure low in priority given the #things to be done. Will be great if you may do a fair comparison for a few major ones, like sails or geddy. \n+-----------------------+------------------------------+------------------------------------+\n|                       | RailwayJS                    | Tower.js                           |\n+-----------------------+------------------------------+------------------------------------+\n| First commit          | Jan 2011                     | Oct 2011                           |\n| Rails                 | 2.3.x                        | 3.x                                |\n| Node.js               | >= 0.4.x                     | >= 0.4.x                           |\n| Server                | \u2713                            | \u2713                                  |\n| Client                |                              | \u2713                                  |\n| Template agnostic     | \u2713                            | \u2713                                  |\n| Default engine        | EJS                          | CoffeeKup                          |\n| Database agnostic     | \u2713                            | \u2713                                  |\n| Default datastore     | MongoDB                      | MongoDB                            |\n| Model validations     | validatesPresenceOf('email') | validates('email', presence: true) |\n| Query scopes          | \u2713                            | \u2713                                  |\n| Chainable scopes      |                              | \u2713                                  |\n| Param parsing         |                              | \u2713                                  |\n| Controllers           | \u2713                            | \u2713                                  |\n| Resource controllers  |                              | \u2713                                  |\n| File naming           | users_controller.js          | usersController.coffee             |\n| vm.runInCustomContext | \u2713                            |                                    |\n| Asset pipeline        |                              | \u2713                                  |\n| Asset compression     |                              | \u2713                                  |\n| Routing               | map.resources('posts')       | @resources 'posts'                 |\n| Nested routes         | \u2713                            | \u2713                                  |\n| Generated url helpers | \u2713                            |                                    |\n| Generators            | \u2713                            | \u2713                                  |\n| Command-line api      | \u2713                            | \u2713                                  |\n| REPL (console)        | \u2713                            | \u2713                                  |\n| CoffeeScript console  |                              | \u2713                                  |\n| Asset cache method    | timestamp                    | md5 hash                           |\n| Production asset path | /app.css?123123123           | /app-859c828c89288hc8918741.css    |\n| Preferred Language    | JavaScript                   | CoffeeScript                       |\n| CoffeeScript support  | \u2713                            | \u2713                                  |\n| Internationalization  | \u2713                            | \u2713                                  |\n| Heroku support        | \u2713                            | \u2713                                  |\n| String case           | snake_case                   | camelCase                          |\n| Form builder          | \u2713                            | \u2713                                  |\n| Semantic form builder |                              | \u2713                                  |\n| Table builer          |                              | \u2713                                  |\n| File watcher API      |                              | \u2713                                  |\n| Live-reload assets    |                              | \u2713                                  |\n| Test suite            |                              | \u2713                                  |\n| Generators for tests  |                              | \u2713                                  |\n| Twitter Bootstrap     | \u2713                            | \u2713                                  |\n| HTML5 Boilerplate     |                              | \u2713                                  |\n+-----------------------+------------------------------+------------------------------------+\n. This table could happily reside on the readme as well\n. bump.\n. It certainly doesn't redirect.\nOn Thu, Feb 6, 2014 at 12:39 AM, Daniel notifications@github.com wrote:\n\n@andreyvit https://github.com/andreyvit Hey,\ntowerjs.org should be redirecting to tower.github.io. We did have a\ntowerjs.org our previous site for an older version of Tower.\nI'll be getting some stuff in the README that explains what the current\nTower is all about.\n\nReply to this email directly or view it on GitHubhttps://github.com/tower/tower/issues/410#issuecomment-34225458\n.\n. Thanks.\nI was under an impression that coffeeScript is present at the core of Tower, yet everywhere examples are in plain JS. \nAny links to that documentations? or is  it a work in progress?\n\nI have used Spine.js before and they way they embrace the Class functionality is great\n. Why? :(\n. ",
    "dts": "If the functionality is ready, I'd say merge and push out to NPM.  How would you describe the \"production readiness\" of tower?  How many people are using it?  Are there any demos for the new system?\n. If the functionality is ready, I'd say merge and push out to NPM.  How would you describe the \"production readiness\" of tower?  How many people are using it?  Are there any demos for the new system?\n. ",
    "kxpvcr": "Hey @thehydroimpulse let me know if you need any help with this, it's been open for a while :)\n. Hey @thehydroimpulse let me know if you need any help with this, it's been open for a while :)\n. "
}