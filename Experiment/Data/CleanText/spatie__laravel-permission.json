{
    "freekmurze": "Thanks :+1: \n. Thanks!\n. Thanks!\n. I'll add a config file to the package to allow naming of the tables in the near future.\n. I've added some comments to your PR.\n. Solved in v1.2.0 of the package\n. In essence your changes are ok, but there a few issues. Could you please change the following things:\n- the tests are failing because you renamed the migration-file. It was a stub to avoid composers warnings when installed\n- rename the key \"tables\" to \"tableNames\" in the config\n- above that line in the config file add a comment that describes what these values do.\n- add instructions in the readme on how to publish the config file (cfr the other spatie packages)\n- the environment variables have a \"ACL_\" prefix, change the prefix to \"PERMISSIONS_TABLE_NAME_\"\n- do not create properties on the migration class. Just use the config value directly where necessary.\nThanks!\n. @sebastiandedeyne made the argument not to use env-variables by to define the table names. I agree. It's beter to have a optinally publishable config file where the names of the tables are hard coded by default.\nIf someone wants to make the table names vary by environment (a use case that won't occur often), env variables can be introduced manually in the config file.\n. The tests are failing, can you look into that?\n. I'm closing this for now, reopen if you still want to make the necessary changes.\n. Well, the permission and role tables are just normal Eloquent models and regular db tables. If you need an extra field just add a migration to add it to a table.\n. Hi, currently there are no plans to add a team-layer. I haven't looked at in in detail, but I suppose that Laravel Spark will offer team based authentication out of the box.\n. @cyberhicham Nope. The permission and role tables are just normal Eloquent models and regular db tables. If you need an extra field just add a migration to add it to a table.\n. I'm guessing that you didn't add the Spatie\\Permission\\Traits\\HasRole to the User.\nIf you want to learn more about creating seeders, take a look at the official documentation\n. You imported the namespace but did not add the trait to the model.\nChange the line\nphp\nuse Authenticatable, Authorizable, CanResetPassword;\nto \nphp\nuse Authenticatable, Authorizable, CanResetPassword, HasRoles;\n. :+1: \n. Sounds good. Don't forget to add some tests and update the readme with some examples.\nThanks!\n. :+1: \n. I think it's a good idea to have that functionality, but I don't like the naming. \nThis would be better:\nphp\n@role('administrator')\n<some html/php here>\n@endrole\n@can does not have an else so I think @role shouldn't have else.  @norole would be better.\nOf course the directives should handle both strings and arrays.\nIf you would make a PR for this, I'd likely accept it.\n. In that case our blade directives should have an @else has well. Thanks for correcting me on this. \nGood idea on the naming. Blade directives are generally lowercase so I prefer if the ones you add are lowercase as well. On top of the ones you're proposing a @role one (that has the behaviour of @hasanyrole) would be nice. @norole is still valuable so you aren't required to use an else.\nThoughts?\n. :+1: go forth and code!\n. Did you register the service provider?\n. @AEK-BKF Did you register the service provider? Which error are you getting?\n. @jpmurray nice, I'm glad you found the solution quickly :+1: \n. No, see #31\nOn Sunday, 10 January 2016, Jean-Philippe Murray notifications@github.com\nwrote:\n\n@freekmurze https://github.com/freekmurze although are the permissions\nfunctions (can, hasPermissionTo, etc) works with $roles ?\nCurently trying to do a $role->hasPermissionTo($permission->name) that\nresults a Call to undefined method\nIlluminate\\Database\\Query\\Builder::hasPermissionTo()...\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/spatie/laravel-permission/issues/13#issuecomment-170360211\n.\n\n\nFreek Van der Herten\nhttps://spatie.be\n+32 495 84 27 91\n. Normally if you the service provider is registered correctly, the package will register all permissions at the gate.\nThis package has tests to prove that the provided functionality is working. If you are still having problem, could you please submit a failing test? That would help me immensely in finding the problem/solution. \n. Could you PR a failing test?\n. Nice! On first glance this looks ok. Are the blade directives coming soon as well? If so, I'll wait on those before tagging a new version.\n. Could you also provide an example in the readme?\n. :+1: \n. This PR seems fine, but at my end phpunit is running just fine already. Which error are you trying to solve? \n\n. Thank you very much! Will review it thoroughly, change some small nitpicks and tag it as a new version.\n. The blade directives do not seem to be working. Have you tested them in a project of your own?\nThis test seems to be failing: https://github.com/spatie/laravel-permission/blob/master/tests/BladeTest.php#L46\n. I made some modifications so the directives won't break when nobody is logged in. All tests are working now!\nI've tagged a new versions. All the new features are present in v1.1.0.\nThanks again! :+1: \n. You can fetch all permission for a user like this:\nphp\n$user->permissions;\n. Using a config file to specify the model classes and removing the hardcoded imports seems like an excellent idea. I'll try to make this happen in the near future. If you need this quick, feel free to submit a PR.\n. Solved in v1.2.0 of the package\n. I think that most developers with a bit of experience developing Laravel 5 apps will understand how to use the package. \nCurrently there is no way to use your own model. Other users have requested this as well and I'm open for merging PR that adds this (see #18)\nYou're also free to sumit a PR to improve the docs with more clear examples.\n. On first glance this looks like a quality PR! :+1: I'll review in in detail in the coming days.\n. Fellow artisans,\nthank you for your contributions.  I'll soon review both your PR's and pick the changes I like. \n. I've decided to go for @DraperStudio 's. But I still greatly appreciate the work you have put into this.\n. There are multiple approaches to do this. In the most easy one you don't even have to use this package. Just registeren a permission at the gate were you check if a given models is associated with the user.\n. Please check if the class you specified in the role-option of the config file exists. Reopen this issue if you continue to have problems.\n. $role->permissions is indeed the easiest way to get the permissions of a role.\nA function to get the names of all permissions of a role could be handy.  The usage of pluck in your example seems fine. I'd accept a PR that adds this to the package.\n. You can use Laravel's built in @can for this.\n. Version 1.3.0 adds compatibility with Laravel 5.2\nI hardcoded the value to users in the migration. I left a little note in the readme for people who are using a differently named users table.\n. Let's handle this in #13 \n. Could you change the line\nphp\nLog::alert('Could not register permissions');\nto:\nphp\nLog::alert('Could not register permissions'. $e->getMessage() . $e->getTraceAsString());\nand run artisan again?\nLet me know what gets written to the log.\n. @ghermans I think you made an error altering the log statement. Does that logline end with a ;?\n. We're planning on changing our Laravel template so it'll use backend users en frontend users. When that happens I'll take a look at adding support for multi auth to this package. \nETA a few months. If you need support for multi auth quick, I'll be happy to pull a PR that adds this to package.\n. If your changes are good, I'll merge and tag them.\n. My thinking is that you it's better to check the permissions of a user, instead of checking the permissions of a role. \nThe only time you might want to retrieve the permissions is when builiding a screen to administer the permissions of a role. But then you could just loop through the permission relation on role.\n. If you want to save using sync is indeed the best option. In the example above I was thinking about rendering a list.\n. Thanks!\n. Fixed in v1.3.1\n. I can't reproduce this. In your first example, is $permission a string? \n. Here is the test that handles your case. It seems to work.\nCould you please create a failing test?\n. hasDirectPermission isn't supposed to be called from your application code. That's why it's protected.\n. I think adding a helper for this in the package would be overkill. You can easily check wether a permission exists in your application logic.\n. Could you please give a little bit more context on the error you're getting?\nHave you add the Spatie\\Permission\\Traits\\HasRoles-trait to your model?\n. I don't think the current code would error out. Using a non-existing permission the function will result in an exception being thrown. This is expected behaviour. \nIf you are getting another exception/error than this one, please provide a failing test.\n. I'm not seeing where this exception would happen. Let's talk code. Could you please modify this test to illustrate the problem?\n. Np! Be sure to open up another issue if you have another question/problem.\n. Good catch! Thanks!\n. Are you sure you are logged in with a user that has the President role?\nOn Wednesday, 10 February 2016, Caleb Smith notifications@github.com\nwrote:\n\nI have been trying to get @can https://github.com/can to work for the\npast hour..\nI have a permission setup for the role \"President\" with the permission\n\"full-access\". All have been assigned and my test user has been assigned\nthe role of president.\nWhen I do\n@can('full-access')\nSee This\n@endcan\nI can't actually see that. Am I doing something wrong in this setup?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/spatie/laravel-permission/issues/43.\n\n\nFreek Van der Herten\nhttps://spatie.be\n+32 495 84 27 91\n. This package does not provide a middleware to check roles.\nOur authorization package provides a middleware to check permissions.\n. This is too little information to determine what's going one. What is the error? Please go over the installation instructions in detail. Probably you've missed a small step.\nTry installing the package one by one and determine when the error does occur.\n. Hi, thanks for contributing!\nTwo reason why I probably won't pull this:\n- I'm very particular about the names of blade directives, \"haspermissionto\" just feel a bit too long\n- I think the fuctionality already exists: https://laravel.com/docs/5.2/authorization#within-blade-templates\n. Np!\n. I'll add support for it, when I need the functionality myself. So it could be a few months. If you need this quick, feel free to submit a PR.\n. v2 of the package has support for multiple guards.. Nice catch. Thank you very much for correcting it.\n. Spot on! Thanks again. :+1: \n. This is indeed a bug, and I'm working on a fix. Thanks for letting me know.\n. Fixed in version 1.3.4\n. You can use Laravel's native @can directive to check if a user has a certain permission.\n. This package does not have functionality to define a super user, but you can intercept authorization checks in Laravel.\nphp\n$gate->before(function ($user, $ability) {\n    if ($user->isSuperAdmin()) {\n        return true;\n    }\n});\nTake a look at the documentation on authorization.\n. @can is native Laravel directive. So it's best to ask your question at the Laravel Framework repo.\n. As it stands that's the only way to do this. I'd accept a PR that adds a hasPermission-function to the Role model.\n. I'm glad you like the package! :smile: \nI'm thinking that checking permissions of a role is not really necessary. You should always check if a user has a certain permission.  This can be done with Laravel's native can function. If you want to loop through the permissions a certain role has, just use the  relation on the model.\n. I don't see generating slugs as a core responsability of the package. So if you need this, implement it in your application logic.\n. If you followed the installation instructions your model should use the HasRoles-trait.\nThat trait will give your model a roles-relation that works like any other eloquent relation. You can use that to build up your list.\n. Nope, no rationale behind that. And you're right that permissions/roles should have unique names. I'd accept a PR that modifies the migration so that the names will be unique.\n. Could you please only edit the original migration. A second migration is not needed.\n. Thanks!\n. A PR that adds the query scope would definitely be accepted.\n. Did you publish the migration included in this package and did you run php artisan migrate afterwards?\n. If you follow the instructions provided in the readme it all should work.\n. I cannot reproduce this error. Could you try installing the package in a fresh installation of Laravel?\n. In the example above you could change get() to first() to make it work:\n$user = User::where('email', 'tom@example.com')->first(); //returns instance of User (if a record was found)\n. @Gonzalo2324 does the user_has_permissions exist? Does it have a role_id column?\n. Reopen if you're still having troubles.\n. Thanks!\n. Nope, that's something you should handle in your application.\n. We'll handle this in the PR.\n. I'm kinda liking that the timestamp is dynamic. There is a check around the migration to make sure that it isn't published twice.\n. Could you trying dumping composer's autoloader immediately after publishing the migration? This will make the class known to the rest of the code preventing the migration from being published twice.\n. I'm liking the fact that, when using the current solution, the migration does have the right timestamp and that you can see in the migrations of a project when it was added.\n. I guess we have different opinions on which solution is better/cleaner \ud83d\ude04\nI'm going to leave it like this. If you need this changed, adapt your  installation manager by running the dump of the autoloader. Or you can also fork this package and maintain your own copy.\n. I'm not a big fan of this. I'm thinking that permissions should always be positive. \nMaybe you could remove the \"validate-papers\" permission from the \"reviewer\" role and create a new role \"paperValidator\" with a permission \"validate-papers\" and assign that role to users that may validate papers.\nYou don't even need need a role. Permissions can be granted to users directly without the need for a role.\n. You can do this by registering a permission named \"article\" on the Gate where you handle that case.\n. Hi Nicolas,\nthanks for whipping up this code.\nI'm thinking that role doesn't real need separate hasPermissionTo and hasDirectPermission functions. A role's permissions are always direct.  I'd accept a PR that add a hasPermissionTo to the Role class (please add some tests \ud83d\ude04).\n. Your PR has been merged. A new version 1.4.0 has been tagged with these changes.\n. Thank you!\n. The tests seem to prove that can should be working as intented: https://github.com/spatie/laravel-permission/blob/master/tests/GateTest.php#L23\nCould you please add a failing test?\n. That code seems ok and seems like a good way to go about it.\nIf you want to improve the code of this package, feel free to submit a PR. There are a lot of unit tests that'll help if your refactor works. \n. It should work with the database driver, not sure why this is giving problems.\nI'd accept a PR that would add a cache_store_name in the config file and let the package use that cache store.\nIn that way you can have a separate cache which won't be cleared when flushing the main cache.\n. It's best to approach permissions as additive, not subtractive.\nIf you don't want a user to have a certain permission just don't give that user a role that has that permission. Create a separate role without that permission.\n. If the most common case is that users have every permission, I'd create an admin role and assign that to all users. If there's an exception for a specific user I'd revoke the role and start granting the individual permissions. What a few helper functions in your app this would not be that difficult to implement.\nSeven different permissions is not that many. Maybe it's just simpler to create them separately and assign them all to every user.\nI'd probably never accept a PR that adds subtractive permission behaviour to this package. So if you want that, you're of course free to fork this package and implement it yourself.\n. Thanks for correcting this.\n. The Perimssion/Role models implement the Permission/Role contract. So importing the Contract namespaces should be ok.\nDid you try this is a fresh install of Laravel?\n. No problem, have fun using the package.\n. Hi,\nThe proposed functionality makes sense but I'd probably not accept a PR for this because:\n- it would add some complexity to the package\n- not many users needs this\n- I don't need this \ud83d\ude04 \nYou're of course free to fork this package and add the features you need.\n. Reopen if this is still a problem and if possible submit a failing test.\n. Yup, I'd must certainly would accept a PR that adds the example above to the readme.\n. Reviewing it now \ud83d\ude04 \n. Did you use the HasRoles trait on your user model?\nhttps://github.com/spatie/laravel-permission#usage\n. The tests seem to confirm that can is working. Please add a failing test if the problems persist.\n. Thanks!\n. What @jryd said. \ud83d\udc4d \n. Thanks!\n. Granting multiple permission at once would be a nice features. How about making it work like this\nphp\n$user->givePermissionTo('permission-one'); // grant a single permission\n$user->givePermissionTo(['permission-one', 'persion-two']) // granting multiple permission with an array\n$user->givePermissionTo('permission-one', 'persion-two', ...) // granting multiple permission with arguments\nTo make that last example work we could leverage argument unpacking introduced in PHP5.6. The package currently support PHP5.5, but I'm willing to up the requirements to PHP 5.6, as PHP 5.5 is not maintained anymore.\nIf you create a PR for this (with tests) I'll probably accept it.\n. Hi Nicolas,\nI'm ok with adding a syncRoles function.\nI've I'm not mistaken the native sync method will already take both id's and model.\nphp\n$this->roles()->sync($ids); // ok\n$this->roles()->sync($arrayWIthRoleModels); // also ok\nSo the only thing that's not supported out of the box are an array with the names of permission names.\nphp\n$this->roles()->sync(['permission-one', 'permission-two']);\nSo the syncRoles function could do something like this\n``` php\npublic function syncRoles(array $roles)\n{\n     $roles = collect($roles)->map(\n     ... // convert int / strings to roles models\n     );\n$this->roles()->sync($roles);\n\n}\n```\nIf would be super nice if there also was a equivalent function syncPermissions.\nAnd of course tests are mandatory \ud83d\ude04 \nThoughts?\n. I did have some time to implement it myself.\nAdded syncRoles and syncPermissions in version 1.5.0.\n. You're right, I'll fix the example.\n. Hi, thank you for this PR. I'm not ready to pull it yet. Could you take a look at the comments I added to the code. Also take a look at #96 for some guidelines.\n. I'll pull but do some cleanup to make the code a bit more cleaner. You've provided a good base and tests to work on. Thanks!\n. I refactored your changes. The power of the collection is strong with this one.\n``` php\n    public function givePermissionTo(...$permissions)\n    {\n        collect($permissions)\n            ->flatten()\n            ->map(function ($permission) {\n                return $this->getStoredPermission($permission);\n            })\n            ->each(function (Permission $permission) {\n                return $this->permissions()->save($permission);\n            });\n    $this->forgetCachedPermissions();\n\n    return $this;\n}\n\n```\n. You're absolutely right. \nThis is how it works now:\n``` php\npublic function givePermissionTo(...$permissions)\n    {\n        $permissions = collect($permissions)\n            ->flatten()\n            ->map(function ($permission) {\n                return $this->getStoredPermission($permission);\n            });\n    $this->permissions()->saveMany($permissions);\n\n    $this->forgetCachedPermissions();\n\n    return $this;\n}\n\n```\n. Why would you want to disable the caching?\n. You're certainly right, the cache does get deleted whenever the user gets updated. \nUnless you have some benchmarks that prove otherwise, I don't think the extra overhead of the deletion of the cache has a big hit on the performance of the package. So I'd like to keep it simple and just leave the code as it is.\n. Currently I'm not in favour of including a label field by default because I'd like the package as simple as possible.\nIf you need this you could just add the field in your own project. \n. I added a little comment in the docs.\n. Hi,\nI'd like to keep this package simple, so I'm not likely to merge such a PR in.\nThere are a few options you can try out. In the config file you can choose your own model that you could modify to your own needs. You can also edit the migration if you need some extra fields.\nIf that does not provide enough functionality, I suggest you just fork your package and maintain your own copy that can handle your specific requirements.\n. Thank you!\nI'll fix the tests on Travis.\n. I'm glad you like the package \ud83d\ude04 \nI'd accept a PR that adds this to the package. Be sure to include a lot of tests to make sure the introduced functionality works properly and convers all the edge cases.\n. I'd accept a PR with tests that adds this to the package.\n. Closing this for now, will reopen when you have time to work on this.\n. Would it be more easy to have permissions view and edit and check the roles at the Gate?\nIt always feels kinda dirty to check which role a user has.\n. You can easily modify the migration after you have published it and before you run php artisan migrate.\n. Probably not, I think you should automate it in your own app.\n. Not everyone needs this column. You can easily add it in your own project.\n. I like the simplicity of the current example, so I'm probably not going to pull this PR.\nIf you'd publish your middleware in a blogpost (do you have a blog?), I'd happily add a link to it in our readme.\n. Because not everyone needs this and you can easily add it in your own project.\n. You can add this to your own project.\n. Hi, I'm glad you like this package \ud83d\ude04 \nI'm not going to add this to our readme. I expect that users of the package already have knowledge about Laravels Gate.\n. To be precise, the package only throws the exception. It's the app the makes a 500 out of it because it isn't catched.\nI was thinking about returning false when creating the package but I chose an Exception because when dealing with security it's probably a good thing to be very explicit when something goes wrong.\nIn most cases the permission to be added will exist.  If in your project this isn't the case, make your own hasPermissionTo function that eats up the thrown exception by this package.\n. Thanks!\n. Pretty sure this has something to do with your project. The namespace is correct: https://github.com/spatie/laravel-permission/blob/master/src/Models/Permission.php#L3\n. I don't think this feature is needed for most users.\nOn Sunday, 16 October 2016, MrMashy notifications@github.com wrote:\n\nNot much to say title says it all but is it possible to add role\ninheritance in the future?\nEg: Admin can do everything moderator can do\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/spatie/laravel-permission/issues/128, or mute the\nthread\nhttps://github.com/notifications/unsubscribe-auth/AAdiDanLOB0kxWS2lf4dOnV3D6Ca5WIKks5q0dJGgaJpZM4KX6Us\n.\n\n\nFreek Van der Herten\nhttps://spatie.be\n+32 495 84 27 91\n. Eloquent has you covered with the whereHas method. It can be used to query relations of a model.\nThis is how you use it:\nphp\nUser::whereHas('role', function(Builder $query) {\n   return $query->name === 'trial user';\n});\nDisclaimer: untested code \ud83d\ude04  If it doesn't work, just search the Laravel docs for whereHas.\n. To my knowledge givePermissionTo won't auto create roles.  If you want this behaviour just override the assignRole function of the trait with your own method.\n. What is the content of the exception at this line?\n. Just add a dd or var_dump statement there\nOn Friday, 28 October 2016, Tim Joosten notifications@github.com wrote:\n\nHow can i check that?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/spatie/laravel-permission/issues/132#issuecomment-256964181,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAdiDRmkNtgDMwTRjoMKRQ8sL3nlq3KOks5q4iDXgaJpZM4KjEyk\n.\n\n\nFreek Van der Herten\nhttps://spatie.be\n+32 495 84 27 91\n. The tests seem to running fine both on my machine and on Travis, so I think there's a problem with your specific setup.\nThe stack trace seems to indicate that the permissions table is not created, so you might want to look into that.\n. If change the database to use :memory: but still the tests seem to pass on Travis.. All the tests in the package use :memory:\nhttps://github.com/spatie/laravel-permission/blob/master/tests/TestCase.php#L64. These tests indicated that hasPermissionTo is working as intended.\nCould you submit a failing test or give detailed instruction on how this error can be recreated in a vanilla Laravel app?\n. You're passing in an array into givePermissionTo. It expects a string.\nMake this change:\nphp\n$this->user->givePermissionTo($permiso);\n. This test proves that the can function does consider permissions given to the role of a user.\nWhat are you doing differently from this test?\n. The can function is part of Laravel itself. Because this package registers all permission at Laravel's Gate you may you use the can function to check permissions.\n. I do not think this problem is related to the package. Could you please submit a failing test, if you find out that the problem is caused by our code?\n. Thank you for this PR.\nIn my opinion this functionality is not generic enough to be included by default in the package.\nMake these changes in your own project.\n. You need PHP 7 to use this package.. I'd try to set some dd statements in your middleware to see where exactly the 403 is generated and what value the middleware receives.. Try this:\nphp\n... 'middleware' => ['role:admin,other'] .... roles on Permission returns a \\Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany relation so you could probably just use that attach method in your example.. Currently groups are not supported, you'll need to do this in your own project.. There's a permission key in the config file where you can specify the model to be used.. I'd accept a PR that adds a little note on this in the readme.. There current tests use an in memory db. They appear to be run fine.. Can you check if the current dev-master fixes this problem?. Thanks. Did you follow all installation instructions? \nAre you getting a specific error?. The tests seems to indicate that the @role directive is working as intended.\nhttps://github.com/spatie/laravel-permission/blob/master/tests/BladeTest.php#L50\nCould you try installing the package in a fresh copy of Laravel and see if that works? If not, send me over a copy of that application.. Try to find the differences between the fresh copy of Laravel you used and your actually project. Pretty sure the problem is caused by something specific to your project.. Hi, thanks for contributing. \nfor most users these commands are a bit overkill. \nIf you want to do some stuff manually, it's very easy to open up a tinker session and quickly create your roles and permissions there.\nOf course you can still use your commands in your own projects are make a separate package out of them.. Mmm, this check should avoid that from happening: https://github.com/spatie/laravel-permission/pull/150/files#diff-755935efe1800dd1a082f9d41af34f05R23. After adding permission or roles to a user it's best to retrieve a fresh copy of the user before calling can in the same request.\nphp\n$user = Auth::user();\n$user->givePermissionTo('edit');\n$user = $user->fresh();\nif ($user->can('edit')) {\n   ...\n}\nIf this does not work in your project, could you please PR a failing test for me to look at?. Closing this for now. Closing this for now. If you're still having problems, please reopen with a clear explanation of what you mean with \"role wise permissions\".. Where are you using the middleware? Are you passing in the 4th argument?. Sure thing.\nphp\n$user->assignRole('firstRole');\n$user->assignRole('anotherRole');. Great work, thanks!\nI'll refactor it a little bit and tag a new release.. I've completed my refactor. \nThough your code surely did work correctly, it could be improved. I didn't like that the query was being built up several times in the function. When creating a flexible function that can handle multiple kinds of input, I generally like to normalise that input to a common format first (in this case an array with Role objects) and then perform the processing (in this case building up the query) only once.\nYour tests were in extremely helpful with this refactor.\nI've also add support for a Collection to be passed. \nA new version 1.6.0 containing the scope has been tagged. Thanks again for your work on this.. Out of the box the package doesn't contain a middleware to check roles, but there's an example in the docs on how to create it yourself.\nRole and Permission are just regular Eloquent models. If you just need some extra fields, just add the to the db and you'll be able to use them. If you want to add some behaviour to the models, that you need to register your custom model. This too is explained in the docs.. Thanks for your suggestion, but I probably won't merge such a PR. I'd like to keep this package simple and easy.\nOf course you're free to fork the package and maintain your own copy with this feature implemented.. On Travis and locally on my machine the test seem to run just fine. Please not that the test use a sqlite db. . Hi,\nthank you for the kind words on our packages. When trying out your suggestions, some tests are failing. So I'm not going to make this change for now.. Thank you for your suggestion.\nIt seems that the current implementation is fine as it is. \nIf you feel there is an error, please submit a failing test.. Thanks!. Could you add tests to ensure that the added functionality works correctly?. @ttomdewit perfect answer \ud83d\udc4d . Thanks!. Currently busy updating all our package for L5.4. \nThis one will be updated rather soonish.. Version 1.7.0 can be installed in Laravel 5.4. Not many users will override the name of the primary key. This specific use case doesn't warrant introducing a new key in the config file.\nThe best solution would indeed to override the roles method.\n. Hi, \nwhat does your postcard look like, then I'll check if we got it \ud83d\ude04  Thanks for sending it \ud83d\udc4d \nThis seems something specific for your project. I'd create canAny method on your user model that leverages the built in canmethod.. Agreeing with @drbyte on this. Do this in your own application. Or, if you want to make the community happy, create your own wrapper package around this one where you add the functionality.. Use hasAllRoles to check if a user has all given roles.. What's your use case where you need to call hasDirectPermission directly?. Ok, I'll accept a PR that makes the method public + adds tests for that method + updates the readme with an example.. You can do it \ud83d\udc4d . Great thanks!. All permission are being read primarly to register them at Laravel's gate.\nI get that the long log message can be a bit annoying. Maybe we can introduce a setting in the config file that enables/disables that logging of the exception.\nThoughts?. @AlexVanderbist can you create a fully tested PR that add the config option. Default can be logging enabled. To ensure backwards compatibility assume true when the option does not exist. Thanks!. I don't think there every was and exists method provided by this package. I'd accept a fully tested PR (with updates to the readme) that adds this.. Fix by @AlexVanderbist is tagged as 1.9.0. Thanks!. That package does not provide that out of the box. If you need it to work with multiple user tables, you'll have to write your own glue code.. Much appreciated!. Well spotted, good fix!. Yup, this package can help you with that use case.\nlaravel-permission allows you store those roles and permissions in the database. It will register those permissions at Laravel's gate.. The permissions are registered at the gate in this function\nIt will put an exception in your log if for some reason it's unable to register those permissions.\nDo you see a notice in your log? If not, try to determine if that function is being called.. Could you try installing the package in a vanilla Laravel app and test if it works there?. Thanks!. Tagged as v1.11.0. v1.11.0 introduces these new methods: getDirectPermissions, getPermissionsViaRoles, getAllPermissions. . Thanks!. Thanks!. Sorry, I did not see a question in your original issue. I thought that you were simply sharing your solution.\nI think it's a good solution if you're using a table that is not called users. I'm not going to include this in the package itself because probably most people will just have a table called users.. You're right, for multi auth this is needed. Reopening... Would you like to PR this change?. Tagged as 1.12.0. You can use '@can' for checking permissions in your views.. See #214 . I'm assuming that you can if the user in your view has a permission. You can use the blade directive @can for that. \nIf you want to test if a role itself has a certain permission your can use the hasPermissionTo on a role.\nphp\n$role->hasPermissionTo($permissionName); // returns boolean. Hi, \nthank you for this. Changes seems good.\nThe test can be improved. Could you test this by making multiple calls to hasPermissionTo and assert that the amount of executing queries does not increase (cfr the other tests in CacheTest?. Thank you!. You don't need this package to handle that use case. This package is only needed if you need to store additional roles and permission in the database. \nIn your case you can just leverage the user_id already present on the post. Please review the Laravel docs on authorization to learn more.\nhttps://laravel.com/docs/5.4/authorization. Thanks. Tagged as 1.12.0. You can run\nphp\napp(\\Spatie\\PermissionPermissionRegistrar::class)->forgetCachedPermissions();\nto forget all cached permissions.. I can pull in that version without any problems. So it must be something in your specific project that is holding you back. To make sure, try installing the package in a vanilla Laravel app.\nA better constraint would be ^1.0.0, so you always get the latest and greatest stable version.. This package does not support Lumen.. Seem to have take care of this myself after you've submitted this PR.\nThank you nonetheless.. Great PR! Much appreciated \ud83d\udc4d. In which situation a user would have multiple of the same roles or permissions?. Thanks for your PR, but I'm not going to merge it in.\nBecause this package revolves around security, I'm a fan of letting it fail easily instead of silently passing wrong input.. This is breaking in the sense that if you uses something numeric as your permission name, this will now fail.\nBut since that's such an uncommon use case I'm willing to merge this in.\nCould you add some tests to prove that your change works?. After seeing those these and get a bit of a feel for the functionality, I've reconsidered my opinion. I'm not so confortable with the breaking nature of the changes. If just feels a bit unnatural to allow id's.\nSo I'm not going to merge this is.\nIf you need this just add it to your own project.\nNevertheless thank you for your work on this.. In v1 this is not possible. @AlexVanderbist has started work on v2where this use case will be supported. ETA: a few weeks.. I'll do my review in a couple of days after this has been merged in.\nOn first sight, looks pretty good.. What's the output of auth()->user() and auth()->user()->hasRole($roleNameYouAreChecking) if you put those lines right before the failing @hasrole() directive? Do you see the roles on the user that is being returned there?. I cannot reproduce this error. If your model has hasRoles trait applied to it, it'll gain a roles relation that returns a collection when empty. Not sure why this fails on your end.\nThis is the line that I believe is failing at your end https://github.com/spatie/laravel-permission/blob/master/src/Traits/HasRoles.php#L131\nCould you add a dd($this, $this->roles) statement right before that line to see what roles is set to there?. Do you use any magic methods in your model? Could you try setting this package up in a vanilla installation of Laravel?. It all looks good time me. I'm thinking that a call to roles should always return a collection. Not sure why in your case it returns null. @AlexVanderbist is going to investigate this further soon.. Personally I'm not a fan of asserting against the role a user has. In most\ncases asserting against permissions is a lot easier.\nWhat about just adding a permission \"loging-to-\" suffixed by the subdomain\nname?\nOn Fri, 7 Apr 2017 at 10:17, Anand Siddharth notifications@github.com\nwrote:\nThank you for your attention @AlexVanderbist\nhttps://github.com/AlexVanderbist\nThe middleware thing is slightly different from my question, I just simply\nwant to know if their is way to authenticate only admin user in the admin\nauth controller not the regular user.\nI have subdomains of 2 different types of users. It should act as 2\ndifferent application. One solution could be that I could redirect the\nspecific user to his respective domain after login.\nIs their any solution that I can set user role value in Auth class so that\nit will authenticate user with that particluar role.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/spatie/laravel-permission/issues/253#issuecomment-292472706,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAdiDUmg_ilLm-zC_J9U3W7iVaM7UnVeks5rtfEugaJpZM4M2fUa\n.\n-- \nFreek Van der Herten https://spatie.be +32 495 84 27 91\n. In your User model you can get all role names with:\nphp\n$this->roles->pluck('name');\nNotice that we're using roles as a property, not as a function.. \ud83d\udc4d. Although it's certainly technically possible I'm not planning on upgrading from v1 to v2 in any of my projects. That's why I didn't write a migration script or notes on how to achieve it.\nI'm thinking the best way to approach this would be to completely uninstall v1 (but keep your permissions and roles tables somewhere safe) and install v2 from scratch. The values from the old permissions and roles tables must that be imported into the new tables. The structure is somewhat the same. The most important addition is the added guard_name column. In mos cases you should set this to the name of your default guard.\nI surely accept a PR to the readme that explains how to migrate from v1 to v2.\n. Check in create seems fine.\nThanks!. This is fixed in v2.1.3.. Thanks!. I don't get what you mean with duplicate gates. I'd have only one edit-post check that first checks if a user is and admin and then if the user is the owner of the post.. Could you elaborate on that question? Eventually submit some code examples on what you're trying to achieve?. The tests seem to point out that the current service provider + directives are working.\nI suspect something app specific is causing troubles. Could you please try installing the package in a vanilla Laravel app?. Closing this for now, reopen if this fails for you in a vanilla app.. @sebastiandedeyne yea, it was introduced fairly recently by @AlexVanderbist \nI'd accept a PR that adds a troubleshooting section to the readme.. An easy way to go about this is to suffix the role names and permission names with a tenant id: owner_1, 'persmission_1`, ... I'm thinking that should work without making any any changes to the package.. I don't know your app, but if some permissions or roles would have the same name but are used for different tenants, you might get in trouble.. Thank you! \ud83d\udc4c. \ud83d\udc4d. You don't need to pass a guard name. The package will handle this behind the screens.\nWhen using assignRole on a user it will automatically search for a Role with the given name that has the same guard_name as the user it being called upon.. Could you try clearing the your cache with config:clear, and maybe cache:clear and try again?\nReopen this issue of you can recreate it in a vanilla version of Laravel.. It isn't included because in most cases this is not needed. Permissions can be checked via the Gate using the can function or Blade directive.. The columns are used for the polymorphic relation to a users table.. There's an example on how to do this in the readme.. Although I like the solution, I'm afraid of performance problems. \nBut if you create a fully tested, backwards compatible PR, I'd consider pulling it in.. Thanks for bringing this to my attention.\nI've just tagged a new release that fixes this.. Hi,\nthanks for this proposal, but as we don't need this functionality ourselves, we're probably not going to add it to the package.\nSo keep on using your modded version \ud83d\udc4d . Looks like you're importing the wrong namespace in your RoleTransformer. In the class replace\nphp\nuse App\\Models\\Role;\nby \nphp\nuse Spatie\\Permission\\Models\\Role;. Hi, I'm going to close this as your question is about an edge case problem where most users won't run into. If you find a good solution for this, I'd appreciate you posting it here, as it may prove helpful for users hitting the same problem.. A user can have direct permissions and permissions via the roles. These permissions do not have to be the same. That why $user->permissions() and $user->roles()->permissions() do not return the same result.\nYou can get all permissions with $user->getAllPermissions().. We'll probably tag new releases with L5.5 compatibilty as soon as it is released. We have a good track record on that.\nHaving a seperate branch for all our repo's now is just too much overhead.\nFork the package and update the constrait there.. This problem is not related to this package. Not sure why adding it to hidden doesn't work.\nBest to open up an issue at Laravel framework.. Setting a roles property on the window object (like you did in the article) seems like a nice way to go about this.\nI feel an ExposePermissions is out of scope for this package.. Thanks. Thanks for you suggestion. I'd like to keep this package a simple as it can be. Like you discovered, a description column can easily be added by those who need it.. I'd accept a fully tested PR that fixes this.. It seems like there already is a test that seems to confirm that \nphp\n@role($role, $guard)\n    has role for guard\n@else\n    does not have role for guard\n@endrole\nis working.\nTest: https://github.com/spatie/laravel-permission/blob/af3f6b7/tests/BladeTest.php#L90-L95\nBlade view: https://github.com/spatie/laravel-permission/blob/1c7964a/tests/resources/views/guardRole.blade.php\nIf this is still causing problems, please PR a failing test for me to fix.\n. > This makes sense to me as there is obviously no auth guard associated with a non-auth model like the one described above.\nSounds logical to me too.\n\nI'm happy enough to set the the guard_name like this but I just want to check I'm not storing up trouble for myself down the line? I would guess that I'll be unable to use the multiple guards feature of the package but for the forseeable future I don't think this will be an issue.\n\nIf you aren't planning on using multiple guards, you'll be fine.. The tests seem to prove that passing a string to givePermissionTo should just work: https://github.com/spatie/laravel-permission/blob/37ed4c9243806a40c7797a203a069852e9ecfce7/tests/HasRolesTest.php#L315\nIs your application using multiple guards?\n. This was a bug. I've tagged a new released that fixes this.\nThis is how you can check if a user has permission for a specific guard:\n```php\n$permissionName = 'edit articles';\n$guardName = 'api';\n$user->hasPermissionTo($permissionName, $guardName);\n``\n. @mohamedsabil83 The solution proposed by @FourStacks seems like the way to go. Reopen if you have further questions.. Seems like your code snippet does not paint the full picture. Where are you checking on a role namedgebruiker?. Next question: did you create a role namedgebruikerin the db?. Do you have a guard namedgebruikerinconfig/auth.php?. isgebruikeryour default driver?. Sorry I meant default guard. You can set that inconfig/auth.php, key:defaults`. The readme of the package now contains a section on database seeding.. We'll handle this further in #316. Actually, unless there are actually incompatibilities with Laravel 5.5, I prefer no having no PRs for upgrading yet.. Hi, I'm going to pass on this for now.\nI'll tag a L5.5 compatible version as soon as L5.5 is officially released.. Save the user first before assigning roles to it.. Thanks!. Cool!. > why you prefer to use a .php.stub file instead of a standard named migration file\nI don't have  reason for using .stub. When I was creating the package it seems like a nice way to mark the file as a stub.\n\nIt would be nice if we could auto load the migrations out of the box instead of having to publish them, and optionally add a config option.\n\nI'm not a fan our autoloading migrations in this way. The added value of maintaining this custom solution is just to low versus the well known practice of publishing migrations.. Could you send a PR to the readme? Thanks!\nFreek Van der Herten\nSamberstraat 69 D\n2060 Antwerpen\nT:  +32 3 292 56 79\nM: +32 495 84 27 91\nhttps://spatie.be\nOn 15 June 2017 at 16:13, limvus notifications@github.com wrote:\n\nThanks @diazemiliano https://github.com/diazemiliano\nThat solved the issue.\nAlso, I think the ReadMe section should be updated with correct script -\nwithout quotes.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/spatie/laravel-permission/issues/321#issuecomment-308746013,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAdiDRen4US5eO9z2IC2BCJjeY0ZDw85ks5sETwIgaJpZM4N6qsa\n.\n. Thanks!. Syncing permission can indeed generate quite some queries. I'd accept a fully tests PR that improves this. Closing this for now. If you have any more questions around this feel free to reopen.. You're right. I've fixed this in the readme.. Your error is likely not related to this package. Probably there's nobody logged in and that's why auth()->user() returns null.. What is de output of dd(auth()->user()) in that view?\n\nOn Sun, 18 Jun 2017 at 19:04, kjdion84 notifications@github.com wrote:\n\n@if (auth()->guest())\n     Guest Menu \nis('login') ? 'class=active' : '') }}>Login\n    @if (config('lion.allow_registration'))\n        is('register') ? 'class=active' : '') }}>Register\n    @endif\n@else\n     Auth Menu \n    @if (auth()->user()->hasAnyPermission(['View Users', 'View Roles']))\n        \n\n                Settings \n\n\n                @can('View Users')\n                    is('users') ? 'class=active' : '') }}>Users\n                @endcan\n                @can('View Roles')\n                    is('roles') ? 'class=active' : '') }}>Roles\n                @endcan\n            \n\n    @endif\n    \n\n            {{ auth()->user()->name }} \n\n\nis('profile') ? 'class=active' : '') }}>Profile\nLogout\n\n\n@endif\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/spatie/laravel-permission/issues/325#issuecomment-309289791,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAdiDbv2R2ggLu8fJbqTnASg4tEjGsDnks5sFViKgaJpZM4N9gIx\n.\n-- \nFreek Van der Herten https://spatie.be +32 495 84 27 91\n. Are you sure the reported line is the one given your troubles?\n\nWhat is the output of\ndd(auth()->user(), auth()->user()->hasAnyPermission(['View Users', 'View Roles']));\nwhen you put it in a controller?\n. You need to create the role yourself.. Thank you for this.\nFailing tests + conflicting files prevent me from pulling this in.\nCould you also make this a configuration option that is set to false by default (for backwards compatibility reasons) and add a test to prove that this setting works?\n. Please add a test to make sure this works.. Closing this because of lack of tests.. What's the output of dd(Permission::find(4)) and dd(Permission::findByName('client::update'))? Is it exactly the same?\nCould you PR a failing test for me to look at?. Currently this is not supported, and I'm not planning on adding this soon. You can solve this in your own project by adding a table that holds user ids or role ids that can edit your model. You could then use Laravel's Authorization policies to check if a user can edit the model.\n. Try clearing your configuration cache. \u261d\ufe0f\ud83d\udc4d. > Is there any Extra Instruction if i Have multi auth?\nhttps://github.com/spatie/laravel-permission#using-multiple-guards\nTo all other questions, I believe the answer is yes. If you have any problems, with this open up a new issue or PR a failing tests if you think something is off with this package.. Don't know what you're trying to do. This breaks tests. What is Moloquent?. I don't know exactly what you're trying to build and I can't give you advice for your specific app, but you can let the package use custom models by specifying their class names in the config file.. For that to work I don't think it necessary to use custom model. But you'll have to override the hasRole method on your user mode and add your own logic to check that systemId.. On first sight I don't see the cause of the problem.\nI'd put some dd statements in that middleware to check if there is a logged in user, and take a look at which permissions it has there.\nClosing this as this problem is probably related to your app and not to this package.. Hi, thank you. I'm pulling this in an work a little bit on it myself.. Hi,\nthank you for this but I'm going to pass. I'm thinking the bulk of users of this package don't need this. If you want to share this logic, create and maintain your package with this code.. This problem is not related to this package. \nIs the name of your file correct? Try dumping the autoloader.. Thanks!. So you're seeing I have none of these roles... right?\nThe tests seem to prove that the blade directive is working as intented: https://github.com/spatie/laravel-permission/blob/3adad0f/tests/BladeTest.php#L145-L152. @BAKTETE are you using the latest version of the package?. I'd accept a PR that adds an example of that method to the docs.. @ctf0 Sure, send a PR that adds this to the docs.. You should do that in your own project with the standard validation capibilities of Laravel.. Models are not self validating by default. The most common way would be to validate the http request that will change the Role name.\nMore on Laravel's validation here: https://laravel.com/docs/5.4/validation. No, in my mind permissions should always be additive. Subtractive permissions are not supported by this package.. We consider modifying the migration file as a breaking change. So inside a major version it won't get modified. If you just publish the migration the first time you install the package, you should be fine.. To me this makes perfect sense. It's kinda best practice to, in your composer.json file, to require the package in such a way that you stay in a major version. \nIn case we release a new major version (which we don't often do), there will be probably be more breaking changes than just a changed migration.\nI'm not really a fan of those automatic publishing of migrations.. Thank you for this, but I'm going to pass. \nI feel that the majority of users don't need this scope and those who do can easily add it into their own project.. I'm not going to pull in your PR, but sure you can follow @drbyte 's suggestion in your own project.. Thanks for adding the problem/solution here.. It seems that under normal circumstances, the guard_name should be filled automatically with the active guard name.\nhttps://github.com/spatie/laravel-permission/blob/21079a4/src/Models/Role.php#L33\nSo I'm a bit hesitant to accept your PR.. Thanks for the explanation, but I'm not sure I understand your question correctly.\nAre you aware that you can associate users with permissions directly? A role is just an optional thing. \nLaravel also allows some logic to be run before checking the permission. This is useful for creating super admin like capabilities. More info here: https://laravel.com/docs/5.4/authorization#gates\n. All models in this package are just plain Eloquent models, so you can use Laravel's regular query builder methods to query the models in any way you want.\nFor getting users with a specific role a scope is included in the package.\nphp\n$users = User::role('writer')->get();. Closing because this issue has nothing to do with this repo.\nFor general help on Laravel and/or Vue try posting your question on one of these channels:\nhttps://laracasts.com/discuss\nhttps://laravel.io/\nhttps://larachat.co/. Thanks for answering this one @drbyte . I'd accept a fully tested PR that fixes this.. > but sadly dont know anything about writing tests\nResearch the subject a bit, your future self will be thankful. It may be a bit overwhelming in the beginning, but it's not too difficult.\nTake a look around in the code in the tests directory of this package. You can run vendor/bin/phpunit to run them.. Thanks!. I'd accept a fully tested PR that fixes this.. Thanks!. I've just tagged v2.3.2 that fixes this bug.. Thanks!. Could you add tests?. Could you also update the readme with a little example of how to use these new commands?. I'd like to keep this package unopinionated on which permission names to allow. If you like to implement some rules around the naming, do it in your own project.. Thank you for this, but I'm holding out to make any changes around this until L5.5 is publicly available.. Because I simply don't have the time to create and maintain separate L5.5 dev branches for all our packages. I prefer to do all the necessary work for all our stuff in one go shortly after L5.5 is publicly available.\nFor now you can fork the repo, do the necessary modifications and use that in your projects.. Thanks, I'll fix the remaining nitpicks myself.. Duplicate of #371. You can manually set the connection property on a model to specify which connection to use.\nI don't know how you expect the commands to work.... Ok, got it now. We'll fix this soon.. Thanks. The problem has already been fixed, but thanks anyway for your work on this.. Thanks, I'll fix the remaining nitpicks myself. The tests seem to indicate that hasanyrole is working as intended when you passing it some roles seperated by a |.\nhttps://github.com/spatie/laravel-permission/blob/master/tests/BladeTest.php#L145-L152\nhttps://github.com/spatie/laravel-permission/blob/master/tests/resources/views/guardHasAnyRolePipe.blade.php\nCould you PR a failing test for me to look at?. Could you add a test to the testsuite of the package to prove that there is indeed a problem?. There seems indeed to be a problem when you use a pipe operator in a blade view. View #389 for more info. I'd highly appreciate a PR that fixes this.. This is fixed by @drbyte in the latest version of the package.. You can already give admins all permission by leveraging the before method of the Gate. You could use that to return true for all admins.\nMore info: https://laravel.com/docs/5.4/authorization. Is web your default guard?\nWhat is the contents of the roles and permission tables?\n```php\n$user->givePermissionTo('edit articles');\n$user->givePermissionTo('edit articles', 'delete articles');\n$user->assignRole('writer');\n$user->assignRole('writer', 'admin');\n```\nThe guard_name should be set in those tables. If not, fill it manually and see if that works.. Could you PR a failing test for me to look at?. @jurgenbosch \n\n\"Method assignRole does not exist.\"\n\nThat's probably not the same issue. If you applied the HasRoles trait correctly on your model, you should have the assignRole function.\nIt's clearly defined in the trait: https://github.com/spatie/laravel-permission/blob/laravel-55/src/Traits/HasRoles.php#L93. You can use the gate's before method to achieve that behaviour:\n$gate->before(function ($user, $ability) {\n    if ($user->isSuperAdmin()) {\n        return true;\n    }\n});\nMore info: https://laravel.com/docs/5.1/authorization. Thank for answering this one @pmestre-pt \ud83d\udc4d . @ilgala Does the answer by @azeemhassni work for you?. I like that this package is kinda strict about it and does not automatically create permissions.. There seems to be something very off with the blade directives and using a string with a pipe character.\nThe problems is that in this line the $roles variable still contains a string \"$roles\". It will be resolved to the contents of the real $roles variable when the blade view is rendered.  The conversions from the pipestring to an array of roles should be done later.\nI'd accept a PR that fixes this.. I don't get your question. \nLook in the readme of the package to get some good examples. Reading the Laravel docs on authorization could also be helpful: https://laravel.com/docs/5.4/authorization\nFeel free to reopen this issue if you have a more concrete question.. Thanks for the suggesion, but going to leave it as it is for now.. @LKDevelopment could you close all similar PRs on our other repos?. In my mind a role name should remain unique. I don't plan on adding the functionality you described. I'd like to keep this package simple. Maybe it's possible in Bouncer, check there.\nThe guard name is used to check if the permission is valid for the currently active guard. I haven't tested it out, but I guess things will break if you fill that up with a random value;. Great addition, thanks!. You need PHP 7 to use this package.. Haven't got around creating a L5.5 compatible version yet for this package.\nI really want to have #389 solved first, so the blade directives work in both L5.4 and 5.5.\nIf anybody has some time to fix the issue presented in that PR, I'd be very grateful.. Now that #389 has been resolved, I've created a branch called laravel-55. My intention is to not make breaking changes so that the package stays compatible with L5.4 en L5.5.. Much appreciated, Chris! \ud83d\udc4d . Thank you for this.\nI'm going to remove that addGlobalScope though as this results in much more queries being executed. You can easily add a with property in your own project if you want to load relations automatically.. Could you PR a failing test (and a fix \ud83d\ude2c) for this?. The current behaviour of sycnRoles is what most users would expect. If you need a syncRoleWithoutDetaching, add it to your own project.. Thanks, but this change has already been done on  the laravel-55 branch.. Thanks. I'm going to leave this as it is for now. I'm thinking you should never run vendor:publish without using the --provider option.\nConcerning the upgrade guide, there really are too many steps to follow to type out a whole guide that works for everyone. To upgrade, It's best to remove the previous version, install the new version and migrate the data.. Thanks for this, but like @drbyte mentioned that exception is not thrown by this package, but by Laravel. Send a PR to their docs.. What @faustbrian said. If you try to use a permission that doesn't exist the package will throw a PermissionDoesNotExist  exception.  You can catch that exception in Laravel's exception handler to do something custom, like aborting with a 403.. Remove the platform key mentioned by @drbyte and try again.. Thanks!. > Most of your documentations are not practical\nWe try to make things as clear as possible. If you see something that can explained better, please let us know. Generally we're very open for PRs that improve the code and docs.. > I just read the thread again and I would like to apologise if I sounded rude... I have a personality disorder and it affects me at times\nNo apologies needed. I welcome any kind of feedback that makes this package better. \nFeel free to send PRs to the docs to improve them. Personally I think the current docs are fine for most beginners too. But yeah, like using most packages, you should take the effort to go through the docs at least once.. Great work \ud83d\udc4d \nThank you!. > Such a scope cannot find users who have a permission granted via a role.\nI wonder if this potential \"gotcha\" is the reason why such a scope was not included in this package originally?\nYup, I thought it's better not to include this to avoid tears down the road \ud83d\ude04 . If the tests still pass when the blade extensions are registered in register, I'm fine with it.. Thanks!. \ud83d\udc4d . Thank you for this. It's clear that you put a lot of work into this.\nI'd like to keep this package as simple as it can be.Support for grouping isn't important for the vast majority of users of this package.\nIf you want to use your changes in your application I suggest you fork our package and do the modifications in your fork.. There's probably some kind of error that Bugsnag tries to report but isn't able to because it hasn't got a valid API key yet. Could you give Bugsnag a valid API key and see what error it is reporting?\nAlternatively you could dive into the code and put a dd statement around the error right before Bugsnag tries to send it over the wire.. Not really outside from the fact that you now can easily see when the migration was published.. If you dump your autoloader the class will exist and this check will not be true.\nhttps://github.com/spatie/laravel-permission/blob/e36ddb9fa6a68e4da4ce93078256e3dab782bd24/src/PermissionServiceProvider.php#L18. After dumping the autoloader it will exist, right?. The tests seem to indicate that this should be working, could you provide a failing test?\nMaybe it's cache related at your end. You could try running php artisan cache:forget spatie.permission.cache and see if it works after that.. Closing this for now. Reopen if you're still having troubles.. Kinda interesting, but holding off on this for now.. @drbyte feel free to merge this in and tag a new release.. Thanks!. Thanks!. I don't think you can stop those by leveraging events. Put the calls to the sync methods inside a  if config('owl.demo') { ... } block.. We'll handle this further in #454 . Yes. I don't think this is necessary. Could you PR a test that demonstrates the issue you are having?. Thanks Chris!. Thanks!. Last remark: could you also add a little explanation + example of the new functionality in the readme?. Thanks!. Because there are a lot of differences between v1 and v2, upgrading is a manual process. We aren't going to automate that.. This screenshot provides almost no information on your problem and expected output.  \nThe tests of this package seem to indicate that the Blade directives are working as intended. \nPlease make sure that you installed the package correctly. . I've just tagged v2.5.4. Does that version solve your issue?. Just to be on the save side i've just tagged v2.5.4 which moves the registration of the blade directives back to the register method. Does that change solve your problem?. How can we reproduce your issue?. Reopen if this is still a problem.. This package does not require an API key. The error is probably origination from some other package in your app.. Thank you, I appreciate this very very much! Beers are on me at Laracon 2018. Thanks!\nPulling it in for now, but as soon as we need features not available in L5.3, we'll drop support it.. \ud83d\udc4d\ud83d\udc4d\ud83d\udc4d for simplifying this package.\n\nmaintaining two branches: one with- and one without support for guards.\nIt'll be too much work, so let's don't do that.\ncompletely dropping support for guards\n\nThe nuclear option, but given that not so much users need multi-guard support, this is certainly an option.\n\nThis means any model can have roles and permissions\n\nHow would that look like in the db? I'm guessing not many people are going to need this, so if we go this route it has to be really really simple.\n\nMaybe caching should be limited to a single request lifecycle by default and configurable for anyone that needs more anything else\n\nGood idea, let's do that!\nLet's also drop support for anything below Laravel 5.5. Thanks!. Perfect, thanks!. Kinda hate SoftDeletes but this seems an ok fix to me. Wouldn't mind dropping support for SoftDeletes in the next major version.. I'll leave it up to you to merge this in. Seems good to me!. Thanks!. I'm not really a fan of this. Not a lot of users need this kind of functionality. To me this way of handling permissions feels kinda brittle. \nI like to keep the package very light. If you need this you can use a custom model and add the necessary functions there.. It's a no I'm afraid.\nLevel based permissions could just be it's own lightweight package. Stuffing the solution for that use case in laravel-permission doesn't feel right to me.\nThank you for your detailed proposal.. Thank you for your proposal, but we're going to keep things the way they are now.. Replacing aborting by a configurable redirect is a nice improvement, but I think we can do even better.\nIf we replace the abort by throwing a custom exception than users can just add their wanted behaviour in Laravel's exception handler. \nUnfortunately moving to a custom exception is kinda of breaking. Current users could rely on that 403 status code that we're returning now.\nI propose we do this change when creating a new major version.\nThoughts?. Let's add a config key called throw_on_unauthorized (or something with a better name). If it is null (and that should be the default value) then the package will just abort like it's doing now. This way we ensure backwards compatibility for the current version of the package. If the config key is set to an exception, then we throw that exception instead of aborting.\nIn the next major version we could remove that config key and just always throw an exception.\nUnless @drbyte or @AlexVanderbist have some remarks/thoughts about this, we'd accept a fully tested PR that adds this. Make sure you update the readme as well with an example on how to use the new functionality.. Perfect, feel free to merge this in. Thank you for this, but in my mind this functionality is a little bit too esoteric for us to maintain.\n. We'd like to keep this package as simple as it can be. For our projects we don't have any need for multitenancy and don't want to maintain the code in this PR.\nYou're of course free put your trait and extra coe in a repo of your own, we'd be happy to put a link to it in our readme.. Not going to pull this in now because it's a breaking change. \nSeems like a good change for the next major version.. Thanks! We'll migrate the readme to our docs site at https://docs.spatie.be when we create a new major version of this package.. This is not really an issue with this package but with Composer. Try again, and if it should fail again open up an issue at their repo. . I'm thinking it's pretty save to merge this. I don't think it's a breaking change.. Thanks for your work on this @drbyte \nWe could also instruct users to use a custom permission / role / ... model and set the $connection property on that custom model. That way no code changes to our code base are required to support a feature that isn't needed for most users.. It's a lot of code here for us to maintain.\nCouldn't you just rely on the events that Eloquent already fires?. Thanks. Thank you for this, but this functionality is out of scope for this package.\nI suggest you create a repo of your own to maintain the code.. The packages focuses on using a database. Storing roles and permissions in a file is out of scope for this package.. \ud83d\udc4d . Thanks!. I won't just ignore it. People might think they've just attached a permission/role, while in fact it has not been attached.\nWhat you could do is, if the model doesn't exist yet, register an saved binding that will sync the permission/roles as soon as the model is saved. Here's some code from another package where we do this: https://github.com/spatie/nova-tags-field/blob/df74a82748acd6b905b59cca404b2b3e4ea61324/src/Tags.php#L73-L75\n. The fully qualified class name of our Role model is Spatie\\Permission\\Models\\Role. Make sure you import that namespace in every class where you're using the Role class.. We've never had to use this package in combination with Passport. If this integration is easy and testable code, feel free to PR it to this package. \nIf the integration is rather complicated, we don't want to maintain it ourselves. In that case, create your own package and we'll happily add a link to your package in our readme.. Hi @jamelwa,\nthat's a question not about this package, but on general Laravel development. Could you post your question on public fora like the Laracasts forum, Laravel.io or Stack Overlow?\nGood luck!. What does this do function do? Could you give an example? \nI'd rather see that givePermissionTo has only one parameter.\n. Best to leave this out. This should be done in a global .gitignore file.\nhttps://murze.be/2014/12/create-a-global-gitignore/\n. hurray for tests \ud83d\udc4d \n. Could you make this work with method signature givePermissionTo(...$permissions)? I'm not sure why params is needed.\n. Create an new exception for this in the Exceptions dir. I'll rename it myself if I can improve on it after pulling.\n. It felt better to have these as regular function and not as accessors. These functions are mentioned in the readme.. The current tests should not be modified to test config('permission.cache'). Could you revert those changes.\nI'm thinking that one test where you do some assertions on the amount of queries should be enough.. This method name is a bit too long for my taste. What do you think about losing the use_pipe_for_the_given_guard part? (same remarks for the other test you added). I've not followed it in detail, but my gut says that this could / should be solved in a much simpler way. Since the tests prove that this work, it should be relatively save to attempt to refactor this.\nAlso: this logic is being repeated for the other blade directive. If it can't be made simpler, create a new function so that logic appears only once in the codebase.. Could you also add a test that checks if does not have any of the given roles is returned when a user has none of the requested roles?. Could you add a tests the checks if does not have all of the given roles when the user does not have all the given roles?. Small typo: aswell. yeah, sorry for the typo confusion \ud83d\ude04 . Could you use explode here?. Please wrap all class names and paths in backticks. It seems odd that the RoleMiddleware can accept multiple roles, but this middleware cannot.\nCould you add support for multiple permissions?. This doesn't seem right. It looks like guest can now access protected page. Could you add a test that makes sure that guest cannot access protected pages and fix this?. This doesn't seem right. It looks like guest can now access protected page. Could you add a test that makes sure that guest cannot access protected pages and fix this?. Could you change if_user to if_the_user in every added test?. permiss --> permission. The simplest solution would be to just abort(403). People can do the redirection in the exception handler if they wish.. I'm not a fan of using the expectedException annotation. Could you use the equivalent method instead?. The name of this test feels a bit off. Could you make this more readable eg a_guest_cannot_access_a_route_protected_by_the_role_middleware or something better?. Do this for all new test methods. Remove the annotation on the other new methods as well.. That block\n$middleware->handle($request, function ($request) {\n             return (new Response())->setContent('<html></html>');\n         }, 'testRole');\nis something that is used a lot.\nWrap it into a protected helper method called testMiddleware or something better.\nphp\nfunction testMiddleware($middleware, $parameter) {\n   $middleware->handle($request, function () {\n        return (new Response())->setContent('<html></html>');\n    }, $parameter)\n}. Could you, instead of replace the current assertions, create a PR that adds your news ones. You can put them in the same methods as the current assertions.. This is a breaking change. Please restore the old behaviour and old versions of readme / config. I like the use of the facade better in this situation. Please revert back to the facade everywhere you replace it by the function.. I don't think these changes are necessary. Could you please revert back to the old behaviour?. Wouldn't it make more sense to use a custom model and use the connection instance variable to set the connection? Than we wouldn't need all this code.. The function signatures is clear enough and contains all info. Let's remove that docblock. Let's rename $permission to `$permissions (this should be done on line 16 as well).\nGenerally speaking I don't like abbreviations. Could you rename $p to $permission?. Does this line work?\nFrom the docs:\nif ($user->can('create', Post::class)) {\n    // Executes the \"create\" method on the relevant policy...\n}\nThe second parameter should be a model, no mention about next parameters.. I'm thinking the middleware will now only work by chance if there is only one permission passed. It'll not work correctly when 2 or more permissions are passed and the 2nd, 3th, ... parameters is an ability the user can do. \nphp\nif (Auth::user()->can(...$permissions)) {\nshould be changed to \nphp\nif (Auth::user()->can($permissions)) {\nBest to add some tests to prove that my thinking is correct/wrong \ud83d\ude04 . We could use that shiny new array_wrap function here.. This could be cleaned up greatly. Right now this map operation does two things. Making sure the permissions are models and building up that rolesWithPermissions. Do this in two steps (with two map operations I guess) for clarity (so when can use that nasty &). O how I dislike else statements. Refactor this to it's own protected function where you can use an early return.. Looks good!. remove this comment, I think the code is clear enough.. I can always appreciate a PR that adds tests \ud83d\udc4d . Remove this comment. You know what do to \ud83d\ude04 . Let's put everything between line 96 and 108 in it's own dedicated protected function convertToPermissionModels. seems to me that this is a reduce operation. Let's use array_reduce here.. Really great idea to leverage the gate's before function here. \u2764\ufe0f. ",
    "anhtuank7c": "I found your problem.\nThe primary cannot be nullable.\nSo please remove ->nullable(); in permission_role and role_user:\n\n\nSo, well done.\nBut when you rollback migration, we met an error :D (not yet perfect ha).\n\nWell, let fix it.\nAt the end of migrate file, you call #dropTable# function, but this function doest not exists in laravel 5.1 any more. Change to #drop# like this:\n(You also forget to delete role_user table too.)\n        Schema::drop('role_user');\n        Schema::drop('permission_role');\n        Schema::drop('roles');\n        Schema::drop('permissions');\n\nRetest migrate:reset. Wao. it's work like a boss.\n. ",
    "michaeljhopkins": "Working on a PR just to get the functionality there. However you'll likely need to touch it up a bit\n. see if that change works for you!\ncheers\n-m\n. ",
    "cyberhicham": "Hello,\nI have the very similar need @francoismart : how did you manage it finally ?\n@freekmurze : any updated plans about this team-layer ?. @francoismart : I see, not exactly what I have in mind. Thanks :). ",
    "francoismart": "hello\nwe've segregated  teams at database level. need maintenance (1 db per team) but works. \nmajor drawback is how you connect to db and how to associate to subdomain.\nOur code is not generic enough to share. But one package to check is https://laravel-tenancy.com\n(did to test it but use same tactics)\nhope it helps\nFran\u00e7ois\n. ",
    "triabiy": "Here my User model :\nphp namespace App;\n\n<puse Illuminate\\Auth\\Authenticatable;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Auth\\Passwords\\CanResetPassword;\nuse Illuminate\\Foundation\\Auth\\Access\\Authorizable;\nuse Illuminate\\Contracts\\Auth\\Authenticatable as AuthenticatableContract;\nuse Illuminate\\Contracts\\Auth\\Access\\Authorizable as AuthorizableContract;\nuse Illuminate\\Contracts\\Auth\\CanResetPassword as CanResetPasswordContract;\nuse Spatie\\Permission\\Traits\\HasRoles;\nclass User extends Model implements AuthenticatableContract,\n                                    AuthorizableContract,\n                                    CanResetPasswordContract\n{\n    use Authenticatable, Authorizable, CanResetPassword;\n```\nprotected $table = 'users';\nprotected $fillable = ['name', 'email', 'password'];\nprotected $hidden = ['password', 'remember_token'];\npublic function roles()\n{\n    return $this->belongsToMany(Role::class);\n}\npublic function assignRole($role)\n{\n    return $this->roles()->attach($role);\n}\n```\n}\n. Ok, it's work.\nMany thanks \n. ",
    "Omazon": "I tried that and it still does not work. I have the same error but with \"assingRole\" using \"tinker\", I have tried everything. My \"user\" model has \"HasRoles\", can create roles without problems, but when I assign it to a user, it gives me the same error. I am about to shoot me in the head.. Hi, could you explain how you solved the problem, I have problem too, thanks. I finally managed to make it work, was that you said, problem solved at last.. ",
    "drbyte": "Closing the loop on this. As @Omazon said in https://github.com/spatie/laravel-permission/issues/305#issuecomment-362651530 the wrong User model was imported.. When adding the HasRole trait to the User model, the givePermissionTo() isn't part of the Eloquent query-builder chain.\nThis works:\nphp\n$user = User::find(4); // returns an instance of \\App\\User\n$user->givePermissionTo('edit posts');\n//or\n$user->assignRole('moderator');\nbut this does not:\nphp\n$user = User::where('email', 'tom@example.com')->get(); // returns an Eloquent Collection\n$user->givePermissionTo('foo');\n// or\n$user->assignRole('bar');\n. Closing the loop on this. As @Omazon said in https://github.com/spatie/laravel-permission/issues/305#issuecomment-362651530 the wrong User model was imported.. @inzig wrote:\n\nAs @sebastiandedeyne wrote, that is something you must resolve in your app. It's not a problem with this package.\nThe solution posted by @sagearslan is a good way to deal with it.. Is there value in this middleware example being added to the README for this project?\n. Fair ... I know spatie is generally very open to useful PRs ;)\n. Kudos. Thanks for adding this.\n. Have you tried:\nphp\nuse \\Illuminate\\Support\\Facades\\Artisan;\nand then in your setup do:\nphp\n        Artisan::call('migrate');\n        Artisan::call('db:seed');\n. True. That's not specific to Laravel 5.3 though. You'd still need to import that class in any version to use the Auth::guest() call.\n. Travis seems to be failing ... but seems to be related to package dependencies ....... surely not from the changes in this PR \n:D \n. See #120 for how I handled it in one situation I ran into.\n. Not sure that having a switch for InnoDB would be necessary: I would think that MyISAM is actually better for these tables, since they're not transactional. They're write-once-read-many, for the most part, and thus cache quite well in the myisam default query-cache.\n(Understandably there might be other reasons, not performance-related, for using InnoDB here, but they're probably more infrastructure-related.)\nYou can always change their storage engine after-the-fact if necessary, with ALTER TABLE.\nAdditionally, if you're wanting to use InnoDB as default, particularly for installing new stuff, why not change your server's default?\nJust my 2-pence worth, things to consider.\n. The only way I can create these symptoms is to:\n- forget to actually composer require spatie/laravel-permission\n- or delete it via composer without cleaning up my code\n- or manually mangle the files in the vendor directory \n- or any other thing that breaks composer so that autoload isn't working properly\nUnfortunately that means whatever is causing Class Permission not found is something wrong in your project.. Or something akin to this may help if you're also considering supporting multiple optional roles, and allowing to specify a string of \"null\" for permissions that can be unspecified: https://github.com/spatie/laravel-permission/pull/120/files. Can you be more specific about what you wish to use it for?. I posted a workaround to a related issue the other day. Perhaps these comments may help: https://github.com/spatie/laravel-permission/issues/457#issuecomment-329313222. Have you run the command to make the permission first? It must be in the db in order to be granted:\nPermission::create(['name' => 'create post']);\n. Ya. In this case $user needs to  be of an object that extends the Eloquent relation features of BelongsToMany, etc, which shares things from collections too. Those are what provide the saveMany capability.. What you're describing is more application-level logic than what this package does. \nThis package lets you specify roles and permissions, assign them to users, and later query whether a given user has a specified permission.\nIn your case you might add a role for Approves Permissions or a permission to grant permission requests, and then anyone who has that privilege could perform changes for others. Lots of directions one can take the application from there.. What if you change can to hasPermissionTo ?\ndiff\n-        if (! $request->user()->can($permission)) {\n+        if (! $request->user()->hasPermissionTo($permission)) {. Ref: https://laravel-news.com/laravel-5-4-key-too-long-error. One line: \nphp\n$members = \\App\\User::with('roles')->get();\nOr in a controller method, like:\n```php\n    public function report_roles()\n    {\n        // get all roles, for \n        $roles = \\Spatie\\Permission\\Models\\Role::all();\n    // get all users with all roles\n    $members = \\App\\User::with('roles')->get();\n\n    // filter to list those without the \"Member\" role\n    $nonmembers = $members->reject(function ($user, $key) {\n        return $user->hasRole('Member');\n    });\n\n    return view('admin.report_roles', ['roles'=>$roles, 'nonmembers' => $nonmembers]);\n}\n\n``. Using SequelPro or phpMyAdmin etc, what's the ID number of thatview_admin_top_menu` permission in the database?  \nSorry if this sounds like a basic question: Are you sure there's no typo in its name?\nAlso, @hasrole() is dealing with roles, not permissions. @can deals with permissions.\n. Hmmm ... I would think PermissionServiceProvider.php should take care of that already .... > @AlexVanderbist wrote:\n\nMaybe we should make cache expiration configurable and set it to 24h by default. This way if something goes wrong at least it'll fix itself.\n\n24h is reasonable, even on sites with lots of permissions;  \n7d could be used if one still wanted to have the \"never expires\" mindset.\nYou could make it a configuration setting, or you could make it a property in the trait, since one can override that in their model.. Hmmm ... normally the cache should flush itself every time a new permission or role is added or updated.. I'm guessing you're not passing all the parameters in your route definition.. > You need to clear the cache every time you assign a permission to a role.\n@sebastiandedeyne Since the package is used to assign permissions to roles, shouldn't the package take care of updating the cache automatically?\n. I agree that we can't stop users from manually manipulating the database themselves, and in such cases they must clear the cache themselves too, specifically spatie.permission.cache\nI just browsed through the package's source again, and see that it does indeed clear the cache when the package's methods are used to assign/revoke permissions/roles. This is what I thought you were saying was not happening, in your prior post.\nCaching is great, but it's been the most common problem subject in this package's \"issues\" since caching was introduced to it.  And the readme makes no mention of caching or which cache tag to clear, etc. That might be a worthwhile addition, perhaps for a \"troubleshooting\", or \"not seeing your changes?\" section?. How are you implementing multi-tenancy? (bespoke code? using a package? which package?)\nAre you using separate databases per tenant, to keep all their tenant-specific data separate? If no, why not? If yes, I imagine simply setting this package's tables in the config is all that's required.. > @omarjebari wrote: \n\nremove 'pivot' from the data returned as i can't imagine a scenario where users want this in the returned data.\n\nLet's discuss: what are the negative side-effects of setting $hidden = ['pivot'] on the role and permission models? What breaking changes could that introduce?. I fully understand the desire and reason to remove the pivot data. \nI'm just trying to make sure we're not creating a backward-compatibility break.. Have you considered pointing your vuex package to a ResourceCollection response, where you can customize the output?\nhttps://laravel.com/docs/5.7/eloquent-resources\nhttps://scotch.io/tutorials/laravel-eloquent-api-resources. I hear you ;). In the example you quoted (and unfortunately also in the readme), technically you're not passing an array. You're actually passing 2 string params as separate arguments to the hasRole() function, which only accepts 1 param. The 2nd param is being ignored. \nInsert the array notation and it should be fine:\ndiff\n-@role('superadmin', 'admin')\n+@role(['superadmin', 'admin'])\n. @xerod Please create another issue for your situation, and explain exactly what your goal is and what problem you're encountering. Even better, please share your app code too. The more code you share the better.. @meysamjavadi wrote:\n\nI have this problem with version 5.3 of laravel. What should i do?\n\nBy \"this problem\", did you mean to actually say that you're getting \"Your requirements could not be resolved to an installable set of packages.\"?  It's always helpful to post exact details instead of \"me too\".\nFrom the README: \n\nThis package can be used in Laravel 5.4 or higher. If you are using an older version of Laravel, take a look at the v1 branch of this package.\n\nSo, for your older Laravel version, you will need to use composer require spatie/laravel-permission:\"^1.15\". Mine offers the tips for assignRole() and hasPermissionTo() etc.\nMaybe you need to just run php artisan ide-helper:generate?\n. @ttomdewit wrote:\n\nI'd love to give it a go this weekend and try and get caching integrated (backwards compatible). Would you consider merging such PR?\nThe way I'd try and implement it is update the HasRoles trait and wrap the roles() and permissions() content in a call to Laravel's caching facade. Given some configuration flag it either caches the results or skips caching (by default, backwards compatibility).\n\nI'd be interested in seeing what you come up with!. @ttomdewit  @rdgout @ctf0 @Nowi5 the https://github.com/GeneaLabs/laravel-model-caching package might work for this, if you also add to your User model(s) the following:\nphp\nuse \\GeneaLabs\\LaravelModelCaching\\Traits\\Cachable;\nprotected $with = ['roles.permissions', 'permissions'];\nI haven't tested this extensively to be sure no undesired cache results are obtained, but it does appear to reduce the queries because the data is cached.\n. @sehgal10 make sure when you're calling the models you actually call the models, not their contracts:\nSpatie\\Permission\\Models\\Permission\nnot\nSpatie\\Permission\\Contracts\\Permission\n. @darwinluague wrote:\n\nLooks like the problem why $gate->before will not work when using middleware is because the middleware is using Auth::user()->hasAnyPermission(...$permission) instead of Auth::user()->can(...$permission).\n\nI'm not sure that's the root issue, since hasAnyPermission is an alias for can anyway.\nFor simple super-admin implementation, the gate->before works fine, as long as all tests for authorization use a test for the \"permission\", and not for a \"role\".   ie: user->can('something') or @can('something') .... not user->hasRole('role name'). @darwinluague I see your point:\nAs of v2.5.0, the PermissionMiddleware uses hasAnyPermission, which does a direct database lookup, ignoring the cache.\n(My point earlier about can being an alias is only correct insomuch as can does the same lookup, but from cache first. Not the other way around.)\nGranted, apart from doing extra database queries because it's ignoring the cache, it should still be giving the same results. \nToying with a PR to fix this discrepancy, by making the PermissionMiddleware use can directly: https://github.com/spatie/laravel-permission/pull/444. @ediblemanager I think you mean this? \nhttps://github.com/spatie/laravel-permission/wiki/Global-%22Admin%22-role. Apologies, yes, the Gate interactions with this package are all permission-related, not role-related.\nI suppose you could copy the RoleMiddleware into your app and customize it to first check whether the logged in user has your super-admin role.. @ediblemanager \nI've always found it better to base my app on permissions. I use roles to assign those permissions to the users as a way of \"grouping\" those assignments. But in my application logic I base things primarily around permission to do whatever action or gain access to whatever controller, etc.\nInitially I started doing things based on roles but most of the time ended up having to break things down into smaller chunks and therefore just determined it simpler to work with smaller moving parts. I can't recall where I read someone posting about moving strictly to permissions as well, but after taking the plunge I've found most apps more manageable this way.\nI'm sure there are excellent use-cases for focusing on roles only. I just haven't found it practical.. @Julian wrote:\n\nI think it would be cool if the package gets an build in scope for permissions like the role scope\n$users = User::permission('edit-post')->get();\nto get each user with a specific permission\n\n\nAs you say, for roles, a scope is built-in.\nFor permissions, you could add your own to your User model. \nFor v1 of this package something like the following will work.\n```php\n    /\n     * Scope the user query to certain permissions only.\n     \n     * @param string|array|Permission|\\Illuminate\\Support\\Collection $permissions\n     \n     * @return bool\n     */\n    public function scopePermission($query, $permissions)\n    {\n        if ($permissions instanceof Collection) {\n            $permissions = $permissions->toArray();\n        }\n    if (! is_array($permissions)) {\n        $permissions = [$permissions];\n    }\n\n    $permissions = array_map(function ($permission) {\n        if ($permission instanceof Permission) {\n            return $permission;\n        }\n\n        return app(Permission::class)->findByName($permission);\n    }, $permissions);\n\n    return $query->whereHas('permissions', function ($query) use ($permissions) {\n        $query->where(function ($query) use ($permissions) {\n            foreach ($permissions as $permission) {\n                $query->orWhere(config('laravel-permission.table_names.permission').'.id', $permission->id);\n            }\n        });\n    });\n}\n\n```\nNote: The above doesn't catch the exception if the specified permission doesn't exist.\nFor v2, you can do similarly by cloning the scopeRole() method from the HasRoles trait and adapting to permissions accordingly.\n. @if(Auth::user()->hasAnyPermission(['list companies', 'list users']). To accomplish similarly, in one of my projects I have separate collections for the grouped permissions, and then I just assign (or sync) those collections to the role.\n(Using this approach means the \"department\" prefixes \"may\" be redundant, depending on the implementation. Of course, the examples given are simple, so prefixes may serve a larger purpose than just visual cues.)\nie: using your example above, would go something like:\n```php\n$marketingRole->givePermissionTo($marketingPermissions);\n$salesRole->givePermissionTo($salesPermissions);\n$managerRole->givePermissionTo($marketingPermissions);\n$managerRole->givePermissionTo($salesPermissions);\n...\n```. Somewhat related: Awhile back @eduardoarandah posted an alternate middleware to handle some cascading levels, which might also be of interest: https://github.com/spatie/laravel-permission/issues/440. @benyanke Would the permissions wildcard code referenced in #440 do what you were looking for ?\nOr were you really more interested in doing Role assignment using wildcard patterns?. Cool. I'll be looking at it again as we put together a v3 roadmap. \nIn the meantime, that middleware appears to be pretty much \"drop in and go\". If you have a chance to give it a try, post about it over in #440 \n@twf-nikhila your thoughts are welcome too!. 1. The scenario posted by @cschoeni is a result of using misspelled permission names against the wrong guard, and mismatched role vs guard names.\n\n\n@abishekrsrikaanth didn't reply with further details. If there is still an issue, please post a new issue with more detail, or preferably a PR with failing tests.\n\n\n@liran-co didn't post any details. If there's actually an issue, please create a new Issue ticket with specific details.\n\n\nThe scenario by @jurgenbosch was answered by @freekmurze .\n\n\nClosing this issue, since it's becoming a catch-all but people aren't posting enough data for help to be offered.. @ultrasamad please open a new issue for your Lumen-specific role issues. It would be helpful if you included code samples, or a link to a github repo where we can look at your code.. @azeemhassni  ... so, for example, in AuthServiceProvider:\n```php\nuse Illuminate\\Contracts\\Auth\\Access\\Gate as GateContract;\n...\npublic function boot(GateContract $gate)\n{\n    $this->registerPolicies();\n\n    // Grant \"Super Admin\" users all permissions (assuming they are verified using can() and other gate-related functions):\n    $gate->before(function ($user, $ability) {\n        if ($user->hasRole('Super Admin')) {\n            return true;\n        }\n    });\n}\n\n```. The same as I posted above. Or to avoid dependency injection, use the Gate facade:\n```diff\n    public function boot()\n    {\n        $this->registerPolicies();\n\n// Grant \"Super Admin\" users all permissions (assuming they are verified using can() and other gate-related functions):\n$gate->before(function ($user, $ability) {\nGate::before(function ($user, $ability) {\nif ($user->hasRole('Super Admin')) {\nreturn true;\n}\n});\n    }\n```. ... because otherwise you'll need to inject a $gate object as I did in my previous example, above.. Just simpler. \n\nIf you want to use Dependency Injection, that's fine too. Do what suits your app's needs best.. > After defining Gate::before it will not trigger before method in the policy class if Gate::before return true.\n@asnawisaharuddin can you post your code? \nI think what you're asking is a broader Laravel issue, more than just about this package. But happy to look at more details if you provide them.. This package has the ability to authorize against roles and permissions. If you need to authorize against additional rules as well, then your application will need to provide that logic in addition. \nIn the example you posted it seems you should completely ignore the Gate::before approach, since it is not specific enough for your application's needs. In this case your UserPolicy is sufficient.. Since RoleAlreadyExists extends InvalidArgumentException, can't you just add your wanted behaviour in Laravel's (your app's) exception handler?\n. > We solved it back then by adding a organisation_id column to the table, which is required for the application we are working on.\nSo that means you basically adapted things to be multi-tenant (multi-organization), allowing each organization to have its own set of named Roles, right? And thus it won't fire a RoleAlreadyExists because it's unique per organization.\nThat feels like the best approach for your application. (Insomuch as the amount of detail you've supplied here so far.)\n. I read that the Spatie team are working on upgrading their packages to support Laravel 5.5 ... but some are not ready yet, including this one. \nIn the meantime, you could fork it and make your updates, and point your composer.json to your own fork instead.. You should never manually insert ANY records into the roles/permissions table. ALWAYS use the provided methods as documented.\nAdditionally, the README contains a section which mentions the commands that support custom guards if you need them: https://github.com/spatie/laravel-permission/blob/master/README.md#using-multiple-guards. Since v2.5.1 you can use $user->getRoleNames(), which returns a collection of role names associated with that user. \nAnd then you can access that collection using all the normal collection methods.. There might be some guard limitations there.\nWould you submit a fully tested PR for this?. My sense is that the implementation of roles+guards could use some expansion. Merely caching the roles->withPermissions relationship won't also cache the associated guards, and the lookups for the role+guard relationships would need some additional helpers.\nFeel free to submit a PR with tests.. @nille Those errors are because of the backpack/permissionmanager package's limitations which make it work only with v1.x of this package.\nIf you want to use the backpack package, you'll need to specify the old 1.x version of spatie/laravel-permission:\ncomposer require spatie/laravel-permission:^1. Yes that is probably the most effective approach.. Your tests are failing because you're using global helpers which expect a different kind of User object. \nIt would be better in my opinion to NOT use global helpers. Instead, add one getter (ie: getRoleNames()) for retrieving raw role names to the HasRoles trait, which plucks names and returns a collection. \nThen in your own app if you want to format the returned collection to a string or to a ucwords() string, do that in your own code, not in the package.\nThis would also make your code testable (albeit with a bit of refactoring away from using the old global helpers).\nImplemented cleanly like this might make it more likely to be accepted. Granted, I don't have any influence over those decisions, so can't promise anything.\nBe sure to also add an entry to the README which mentions that $user->getRoleNames() will return a list of the user's assigned roles. There are already getters for retrieving all the user's permissions. \n(If one wants to get roles for a specific user, outside the model, they can use User::find($id)->getRoleNames(), instead of using a global helper.)\n. See addition in v2.5.1: #442 . Thanks. Why would you have different permissions in different environments?\nThis package throws various exceptions if assignments are attempted on permissions/roles that don't exist: https://github.com/spatie/laravel-permission/tree/master/src/Exceptions \nand returns false when checking for permissions not associated with the model. \nThe package expects a relatively tight coupling of code with the permissions which the code creates and supports. \nBut from your question it's not really clear what you're asking.. That's probably because you've got this in your composer.json:\njson\n        \"platform\": {\n            \"php\": \"5.6.4\"\n        }. Are you talking about 3 permissions? or 3000?\nAre you using roles too? or just permissions?. If you need to control each combination separately, then you'll need to have copies of each configurable permission on each guard, as you're doing today.\nTo speed the process, App\\User::getGuardNames() will give you a Collection of configured guards, which you could loop through when creating new permissions (with some caveats depending on your configuration, model and model property overrides).. 1. \n\nI want to create an app with certain roles and permissions already defined\nFrom the documentation I can't see where to just create roles and permissions without it being dynamic\n\nFor hard-coded roles and permissions, you could use the example Database Seed from the readme:\n```php\nuse Illuminate\\Database\\Seeder;\nuse Spatie\\Permission\\Models\\Role;\nuse Spatie\\Permission\\Models\\Permission;\nclass RolesAndPermissionsSeeder extends Seeder\n{\n    public function run()\n    {\n        // Reset cached roles and permissions\n        app()['cache']->forget('spatie.permission.cache');\n    // create permissions\n    Permission::create(['name' => 'edit posts']);\n    Permission::create(['name' => 'delete posts']);\n    Permission::create(['name' => 'delete users']);\n\n    // create roles and assign existing permissions\n    $role = Role::create(['name' => 'Author']);\n    $role->givePermissionTo('edit posts');\n    $role->givePermissionTo('delete posts');\n\n    $role = Role::create(['name' => 'Manager']);\n    $role->givePermissionTo('delete users');\n}\n\n}\n```\nOr if you don't like using a seeder, you can put the same code into your app anywhere you wish.\n\n\n\nthe only thing needed would be to assign it to users.\n\n\n\nTo assign roles to users, you can:\n```php\n$user = User::find($id);\n// Adding permissions to a user\n$user->givePermissionTo('edit posts');\n// or\n// Adding permissions via a role\n$user->assignRole('Author');\n```\nAnd then you can use @can('edit posts') or auth()->user()->can('edit posts') to conditionally test for authorization against those permissions.\n3.\n\ninstead I'm getting confused with functionalities I probably won't need\n\nNot everyone will use every feature. But, which ones do you think you won't need, and why? Perhaps discussing some specifics may help us give you clarity.\n\n\n\nThe Documentation is not practical enough for me to see how to apply it to my application\n\n\n\nGot an example of the kind of documentation you consider to be \"practical enough\"? Perhaps we can use that as inspiration to make improvements to our own.. Two things:\n\n\nDo you mind updating the HasPermissionsTest to include tests for this permission scope?\nSimilar to https://github.com/spatie/laravel-permission/blob/master/tests/HasRolesTest.php#L142-L209\n\n\nAre you aware that using a permission scope will ONLY fetch users with matching direct permissions?  Such a scope cannot find users who have a permission granted via a role. \nI wonder if this potential \"gotcha\" is the reason why such a scope was not included in this package originally?. > Yup, I thought it's better not to include this to avoid tears down the road \ud83d\ude04\n\n\nI tend to agree. \n. This may be a good idea.\n@freekmurze was there an intention behind the choice to register the blade extensions in register instead of boot which fires after all registration/setup is prepped and ready?. I do not think you need a \"permission\" package for that. \nThis permissions package is not built around dynamic rules. (You can combine permission rules with other business logic, but what you described is only dynamic rules, not related to a role/permission like this package provides. At least, that's my interpretation of what you wrote.)\nThere are several other ways to do it directly in Laravel:\na) controller logic to simply test for \"active/inactive\", and deny if not allowed\nb) Use Laravel's built-in Gate logic, and create a policy for your User.\nSee https://laravel.com/docs/5.4/authorization\nand https://mattstauffer.co/blog/acl-access-control-list-authorization-in-laravel-5-1/\nc) perhaps your logic belongs in the store's \"basket\" object instead of the User object?\n. I suppose you can still use this package for part of that. But your enforcement of a certain \"number of products\" tied to a permission/role will have to be done outside this package.\nie:\n- Permissions: \"add 3 products\", \"select from 4 subcategories\"\n\nController: \nphp\n  if (auth()->user()->can('add 3 products') && $cart->containsItems()->count() <= 3) {\n    // true\n  }\n\nCombining the permission name from this package with logic in your application can work. But you have to build the logic to accommodate any enforcing of dynamic numbers.\n. That's not related to this package.\nI suspect you have something unconfigured in your .env for another package.. Hmmmm ... there's no API key involved with this package.. This is puzzling.\nI just installed a fresh Laravel 5.5.0, plus artisan make:auth and composer require spatie/laravel-permission and I get no errors at all.\n```\nme@mypc \ue0b0 ~/Sites \ue0b0 laravel new issue434\nCrafting application...\nLoading composer repositories with package information\nInstalling dependencies (including require-dev) from lock file\nPackage operations: 68 installs, 0 updates, 0 removals\n(several lines removed here for brevity)\n  - Installing laravel/framework (v5.5.0): Loading from cache\n  - Installing fideloper/proxy (3.3.4): Loading from cache\n  - Installing laravel/tinker (v1.0.2): Loading from cache\n  - Installing filp/whoops (2.1.10): Loading from cache\n  - Installing fzaninotto/faker (v1.7.1): Loading from cache\n  - Installing phpunit/phpunit (6.3.0): Loading from cache\nGenerating optimized autoload files\n\n@php -r \"file_exists('.env') || copy('.env.example', '.env');\"\n@php artisan key:generate\nApplication key [base64:HhcCh8uDctQu7wtDM3VX4uucvHVcF0M/VBbKH9kWEeQ=] set successfully.\nIlluminate\\Foundation\\ComposerScripts::postAutoloadDump\n@php artisan package:discover\nDiscovered Package: fideloper/proxy\nDiscovered Package: laravel/tinker\nPackage manifest generated successfully.\nApplication ready! Build something amazing.\n\nme@mypc \ue0b0 ~/Sites \ue0b0 cd issue434\nme@mypc \ue0b0 ~/Sites/issue434 \ue0b0 php artisan make:auth\nAuthentication scaffolding generated successfully.\nme@mypc \ue0b0 ~/Sites/issue434 \ue0b0 composer require spatie/laravel-permission\nUsing version ^2.5 for spatie/laravel-permission\n./composer.json has been updated\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\nPackage operations: 1 install, 0 updates, 0 removals\n  - Installing spatie/laravel-permission (2.5.0): Loading from cache\nWriting lock file\nGenerating optimized autoload files\n\nIlluminate\\Foundation\\ComposerScripts::postAutoloadDump\n@php artisan package:discover\nDiscovered Package: fideloper/proxy\nDiscovered Package: laravel/tinker\nDiscovered Package: spatie/laravel-permission\nPackage manifest generated successfully.\n``\n. What's the content of yourcomposer.json` file?. 1.13.0 has now been tagged, supports Laravel 5.5. @blacktrue I can't recreate this scenario.\n\nAs @freekmurze suggested, perhaps it's a cache issue in your site.. You said they're both on the same server, correct?\nIt's probably appropriate to give each site its own unique cache prefix in /config/cache.php ... the default prefix is \"laravel\", but that doesn't differentiate between apps. Always prudent to customize this for each site. . Okay. Done.. What's your use-case for this?  ie: \"why?\". That makes sense. I see your point. \nThe changes in closed PR #426 could be used to lookup (only) \"direct\" permissions.\nOr, you could write a custom lookup.  \nI'm working on something to expand #426 a bit in hopes of it accommodating what you're after. Working on getting the tests to pass properly first though :|\nThe quickest solution, although it might not fit your current approach to Roles and Permissions is to just create and assign a specific Role, and use App\\User::role('Approve Reviews')->get()\n. You could replace the RoleMiddleware and accept a $guard parameter, and test using auth()->user()->hasRole(Role::findByName($role, $guard))\nOr you could use permissions instead of roles ... and then you could replace the PermissionMiddleware with something that accepts another parameter $guard and then tests with auth()->user()->hasPermissionTo($role, $guard). Deferring to @AlexVanderbist for comment.. I have a PR that needs testing: https://github.com/spatie/laravel-permission/pull/704 It adds the ability to pass a $guard parameter to can(), similar to what you're after. \nAre you able to try it out? and in your middleware go back to using can() but pass $guard as an optional parameter.. @halilcosdu wrote:\n\nRoute::middleware('permission:SYSTEM_MANAGEMENT,api')->group(function () { Route::resource('permissions', 'PermissionController'); });\nGuys I have multiple guards, any idea why it's not working.\n\nThe middleware currently provided in this package doesn't check for a specific guard. You could modify it similar to how @elerocks did above if you wanted to use your own custom middleware for it.. Your question is unclear. \nPlease explain \"why\" you want this. \nYou can list all roles with Role:all() and you can list all permissions with Permission:all()\nYou can list all permissions assigned to a role with $permission->roles and all roles assigned to permissions with $role->permissions.\nYou can list all permissions assigned to all users using App\\User::with('roles')->get()\nSome of these are listed in the README.\nIt would help to know the \"why\" behind your question.. This package doesn't support assigning permissions to a role by the permission's id number. \nWith $role->givePermissionTo() you can pass permission name, an array of names, a collection of names, or a Permission object or a collection of Permission objects.. Update: back in February 2018, v2.9.1 was released to allow the ability to pass (integer) model ids to givePermissionTo() and hasPermissionTo(), which I believe is what @hakimihamdan88 was looking for.\nThe code tests for is_int() to perform this, so will not work by passing something like a UUID which typically contains hyphens.. This is very similar to what I had come up with. It appears to sufficiently allow the ability to scope users who are authorized for a specified permission whether directly or via a role. \n\ud83d\udc4d . I set up a demo application with 2.5.3 in order to test this issue (of blade directives being registered with gate during tests).\nWhile the app is basic, and so are the tests, the granting of roles and then subsequent testing of roles and permissions using both hasPermissionTo and can are working properly:\nhttps://github.com/drbyte/spatie-permissions-demo/blob/master/tests/Unit/RolePermissionGrantTest.php\n. @uxweb You are correct: Laravel boots the PermissionServiceProvider before the tests are run. Thus there are no permissions in the database (file or memory, whatever) for it to register.\nIt appears that you will need to fire registerPermissions() after any creating-on-the-fly of roles and permissions you are doing in your tests.\nActually, in this package's tests, it both clears the cache and re-registers the permissions: https://github.com/spatie/laravel-permission/blob/master/tests/TestCase.php#L128-L130 after creating the base permissions in the database at https://github.com/spatie/laravel-permission/blob/master/tests/TestCase.php#L37-L39. All the tests are passing.\nThe package is working fine on several sites I've witnessed.\nPerhaps the problem is a result of a conflict with other packages you are using or other boot directives? What are all the packages in your composer.json?. Using v2.5.3 of this package, blade directives are properly registered and function correctly when located in the boot method.\nHere's a demo app to specifically demonstrate this point:\nhttps://github.com/drbyte/spatie-permissions-demo\nI suspect something else in your app is creating conflicts.\nHere's the output:\n\nHere's the view code:\n\n. Can you try a test? \nIn that package's register() method:\ndiff\n-        $this->app->resolving('view', function () {\n+        $this->app->resolving('blade.compiler', function () {\nPotentially also related:\nhttps://github.com/LaravelCollective/html/issues/330\n. Great! Probably a good idea to make the suggestion to them over there.. This package does not offer a \"rename\" command. Therefore, if you're renaming a role or permission, that means you've been editing the database contents directly. If you're going to do direct edits to database data, then you'll also need to manually clear the cache as described in the README.. That's a bug in that Manager application. They've overridden the spatie role relationship with their own:\nhttps://github.com/LaravelDaily/laravel-roles-permissions-manager/blob/master/app/User.php#L37\n. I suppose you could create your own additional scope on your User model, which essentially defers to the actual real scope:\nphp\n    /**\n     * defer to the Spatie package for role scope\n     */\n    public function scopeHasRoles(\\Illuminate\\Database\\Eloquent\\Builder $query, $roles)\n    {\n        return $this->scopeRole($query, $roles);\n    }\nAnd then use the new scope like: User::hasRoles('administrator')->get(). Role::findByName('role_name_here')->permissions will return a collection of permissions associated with that role.. Nah, I don't see it in the documentation.  It's fairly clear in the code though.. This package supports \"additive\" permissions only. \nIt doesn't have features to \"take away permissions already-granted by roles\".\nOne workaround would be to create two separate roles: one with, and one without, the delete permission you're trying to control. . I suppose the ultraware/roles package (which also adds a numeric 'level') might help you consider an alternate structure for your roles and permissions.. What caching engine are you using? Is it overloaded with too much content, or is it failing in some way that causes no data to be returned?. 1. That depends also on what your .env file has set for CACHE_DRIVER.\nJudging from your other screenshot error messages it's probably also set to file there.\n\nYour screenshots are showing a server filesystem error indicating that you don't have write permissions to store cached data.\nSo, it would seem the issue is that your server is either running out of allowed disk space (caused by logs, caches, view-caching, and more) and thus is not able to properly update the cache, which could in turn cause the cache to not be readable reliably ... which in turn will cause this package to not return true for configured permissions, because the lookup for permissions is failing due to cache errors.\n\nSo, it would seem this package is merely exposing a separate problem you have, and this package is in itself not the actual problem.\nI recommend taking these concerns to your Ops team for investigation. \nOne alternative could be to switch your cache layer to use redis or mysql. But you'll still need to resolve your filesystem permissions errors, as those could be causing other (somewhat silent, but fatal) problems in your system.. Please list all the packages you've added in composer.json\nWhich packages have you added recently? It's likely that one of them is interfering.. I wonder if it's caused by the impersonate package.\nYou can test this by making their service provider not load (lots of ways to do that: most common is to simply uninstall the package, and remove code that invokes it)\nOr you could apply the proposed fix posted here: https://github.com/404labfr/laravel-impersonate/pull/25/files\n. Puzzling.. Package history: \n- v2.5.3 moved blade registration into the ServiceProvider boot method, per Laravel Docs\n- v2.5.4 returned it back to the register method (where it was in v2.5.2 and earlier)\nYou said earlier that you\n\ntried rolling back to different versions of the package\n\nI apologize if the following is a repeat of what you tried when \"rolling back\". I'm posting it here for two purposes:  1) to ask you to confirm that this is what you tried, and 2) to aid others in the future who might follow this discussion.\nTo test using the package with the Blade directive registration relocated to boot, change the line in composer.json to:\n\"spatie/laravel-permission\": \"2.5.3\",\nthen run composer update\nDoes the problem persist?. Puzzling for sure!\nThanks for posting back with the update.. A quick way to handle this in your own code is to override the trait method by redefining the method in your model: \n- copy the method code into your model: https://github.com/spatie/laravel-permission/blob/master/src/Traits/HasRoles.php#L23-L35\n- adjust as necessary, such as the change you proposed above.\nGranted, this is slightly more complicated if you're applying it to dozens of models.. Usually when someone runs into this situation it is a result of:\na) cache infrastructure problems\nb) problems with custom gate\nc) package conflicts preventing things from registering properly in the Service Provider\nd) customizations that have resulted in an order-of-operations conflict\nHere's a demo app where your same scenario works properly: https://github.com/drbyte/spatie-permissions-demo\nPerhaps some comparisons can help you determine what may be conflicting in your own app?. Have you added the Bugsnag package but not configured its API key yet? \nhttps://github.com/spatie/laravel-permission/issues/434. You are correct. Thanks!. Quick thought, without doing any simulating yet:\nJudging from line 79, perhaps passing your api permission name as an array (instead of as a string like in your example) might bypass the use of only the default(web) guard used on line 76.. @barryvanveen agreed. Something's incomplete there. Seems like it's putting the cart before the horse a bit.\nPinging @AlexVanderbist to take a peek ;). > contains a typo and is completely broken\nWow -- can't believe I missed that whereId too! (blush). What version of Laravel?. > [2017-09-26 17:03:26] local.ERROR: BadMethodCallException: Method getAllPermissions does not exist. in /vendor/laravel/framework/src/Illuminate/Support/Traits/Macroable.php:74\nStack trace:\n0 /app/Console/Commands/AssignDefaultPermissions.php(140): Illuminate\\Support\\Collection->__call('getAllPermissio...', Array)\nPlease post your /app/Console/Commands/AssignDefaultPermissions.php contents.. Note: Travis here isn't running tests for package combinations lower than Laravel 5.4.0, even in this PR.. These are great discussion points!\nSome additional features I've seen requested semi-repeatedly are:\n- heirarchical/cascading permissions (see https://github.com/spatie/laravel-permission/issues/382#issuecomment-332627484 and #440 and #512)\n- inheritance (a variation on the above, and part of https://github.com/ultraware/roles )\nI'd like to see us resolve https://github.com/spatie/laravel-permission/issues/480 either before v3, or as part of v3.\nAnd, related, would be preferable to allow devs to not have to manually trigger the PermissionRegistrar after creating permissions during unit tests.\nEDIT: #480 has been resolved via #505 . @Epistol  wrote: \n\nA request : making an artisan command for joining role & permission, as we do to create a role or a permission.\n\nCan you please explain your intended use of this?  Are you planning to write batch files full of artisan commands? Why do you want it on the CLI instead of being part of your app?. @benyanke wrote:\n\nAnother request: Give an option to delete all roles and permissions.\nI built a frontend which dynamically creates and assigns permissions to users - it would be very nice to be able to flush all the permissions so I can rebuild from a clean slate.\n\nTo clarify: did you mean a command to purge all roles/permissions for a specified model/user? Or a complete reset of everything (ALL roles/permissions/cache, a total purge)?. @barryvanveen ... you wrote:\n\nAlthough I cannot easily estimate the effort of maintaining support for multiple guards, I would consider it a missed opportunity if support is dropped.\nThe Laravel authorization system includes the ability to use multiple guards. Many new applications now include an \"api\" guard (or something similar). Personally, I think the usage of multiple guards is not going to lessen. it might only increase in the future.\nIs there a way to maintain support and still make life easier for users and maintainers of this package?\n\nAlex and I will be talking more about multiple guard support over the next few weeks.\nWould you (and others) mind listing here some scenarios where an app's business rules require very different permissions for each guard? \nI find a lot of apps can happily use identical permissions for both 'web' and 'api' guards, especially when using model policies to manage guard-specific filtering. So a list of cases we should consider would be helpful so we're not shortsighted as we consider the future path here! It will also help justify retaining the feature if we decide to do so.. Thanks @barryvanveen - your feedback is appreciated!\nYour last comment leads me to another question:\nIf this package became guard-agnostic, how would you have to re-architect those apps that are using that feature now?\nBy guard-agnostic I mean: middleware/gate/policies would respect guards as part of the normal Laravel execution chain, but this package wouldn't make decisions or cause any influence one way or another in relation to which guard is active during execution.\n(I'm asking for 2 reasons: first, to consider/understand the larger impact and possibly strategize ways around the biggest complexities, and second to ascertain how to explain to \"upgraders\" what they would need to consider/change in their app.). @shirshak55 That's kinda my point. \nI don't call it \"namespacing\" per s\u00e9, but the whole \"multiple-guards\" bit feels like bloat, and that's what I'm hoping to see removed.\nBut in doing so I'm trying to understand the ways in which people are currently using that \"namespaced\" or \"multiple guard\" feature, in order to assist with an ideal migration path to a new approach, or at least be able to clearly define what people will lose if they upgrade, etc.. Awhile back in this thread, @benyanke @pedzed @hrabbit mentioned wishing for some variation of:\n\nCreate Permissions -> No Error if Not Exists (Make idempotent)\nPermission::createIdempotently(['name' => 'permission.namespace.name.here');\nPermission::createOrFail(['name' => 'permission.namespace.name.here');\ncreateOrFail works although sounds like an exception should be fired (IMO).\ncreateOrSkip sounds closer to what I would want to be achieved (of course, this is all semantics).\n\nOf course if you've been using this package since then you've probably already seen this, but ... \nv2.9.2 added findOrCreate which basically accomplishes the same.\nJust posting this to close the loop on what's been requested vs completed.. Closing this Issue, as it covers too many things at once, and we're starting work on v3 shortly.\nIf you've got comments for one of the questions I've posed in the last couple weeks, feel free to reply here.\nNew thoughts should be posted as new issues.. @hackel wrote:\n\nI believe that a Service Provider should only register functions and never perform any actual work or connect to external resources.\n\nI tend to agree.\nYour proposed code change introduces 2 main differences (in addition to altering the (bool) return type):\n1. Wrapping the whole thing in thebefore hook of the gate.\n2. Setting and checking a static property to force single execution.\nDropping it in and running the test suite fails badly ... caching, blade, middleware, gate, logging tests.\nI think making this change will require some significant reworking.. @bloggervista wrote:\n\nWe store all permissions in a file.\n\nIf all your permissions are in a file, and always/only used directly from that file, then you don't need this package.\nThis package ties permissions with models, using Eloquent. By nature that uses the database\nThis Issue ticket is not related to \"store all permissions in a file\". Instead, it is proposing a logic change so that the actual database access \"step\" happens \"after\" the ServiceProvider fires, not \"during\" the registration/boot of the ServiceProvider.. #505 looks to resolve this.. @viteksafronov wrote:\n\nwe do artisan optimize on docker image build\n\nNote: artisan optimize does nothing in Laravel 5.5, and will be removed in Laravel 5.6 (so running that command will trigger an error, and will break automated builds starting in 5.6). This package registers its permissions by reading them from the database, when the ServiceProvider is booted.\nSince your unit tests don't create the permissions until after that registration is done, you need to manually re-register them. \nThis is explained in the README :\n```php\n public function setUp()\n    {\n        parent::setUp();\n    $this->app->make(PermissionRegistrar::class)->registerPermissions();\n}\n\n```\n. Example in demo app: https://github.com/drbyte/spatie-permissions-demo/blob/master/tests/Unit/RolePermissionGrantTest.php#L24. This package only provides information related to roles and permissions.\nIf you want to check whether a certain user is the author/owner of a post or other model, you do that with your own code.\nFor an example using a Content Policy see:  https://github.com/spatie/laravel-permission/issues/471\nI've also seen it done in the controller, albeit rather verbose:\nphp\npublic function update(Request $request, Post $post) {\n    if ($post->author !== auth()->user()->id || auth()->user()->cannot('edit posts'))\n        abort(404);// or some other \n    }\n}\nsimilarly in blade, also verbose:\n@if(auth()->user()->can('edit posts') || $post->author === auth()->user()->id)\n  // show Edit button/form\n@endif. To be clear:\nThere are 2 steps involved in the examples provided above:\n\nCheck whether the current user has the specified role/permission.\nand\nCheck any other model-specific permissions ... such as \"they are the author of the post\" (user id matches author id, for example).\n\nWrapping those into bespoke if statements in various places may be sufficient, but as your application grows, or to control things with broader granularity, using model-specific policies will encapsulate things better. Particularly if you're using RESTful controller methods.\nSimilarly, for controlling permissions around \"editing users\", you'd want to both a) check whether they \"are\" the current user ($user->id == auth()->user()->id) (to let them edit their own profile), and probably also an \"or\" test of b) whether they have an \"edit users\" permission (such as admins/managers). \nDoing this with a Policy will allow simpler Blade directives:\n@can('update', $user)\nMore info about policies in the Laravel docs.. FWIW I set up a basic example of using a Policy to control authorization actions on a Post model, which leverages both the basic \"I own the post so I can edit/update/delete it\" and also an Admin role which has permissions to override in cases where the admin isn't also the owner of the post.\nCode is here: https://github.com/drbyte/spatie-permissions-demo/pull/2/files. In v2 they are called model_has_roles and model_has_permissions, as described in your /config/permissions.php: https://github.com/spatie/laravel-permission/blob/master/config/permission.php#L49-L63\nIn v1 they were formerly called user_has_roles and user_has_permissions. But that's only applicable to v1.. I don't understand your question.  This package already manages that if you use its built-in functions as described in the readme.\nYour question suggests that you're trying to do direct database manipulation separately?\nWhat are you doing that led you to post this issue?. What error message did you get? \nThis package doesn't limit the role name to 10 characters. It uses a string field in the database ... which will allow for over 190 characters.\nI just created a role with 29 characters:\n```sh\n\nphp artisan tinker\nPsy Shell v0.8.11 (PHP 7.2.0-dev \u2014 cli) by Justin Hileman\n\n\nuse Spatie\\Permission\\Models\\Role;\n$role = Role::create(['name' => 'This is a very long role name']);\n=> Spatie\\Permission\\Models\\Role {#772\n     name: \"This is a very long role name\",\n     guard_name: \"web\",\n     updated_at: \"2017-10-03 13:43:33\",\n     created_at: \"2017-10-03 13:43:33\",\n     id: 5,\n   }\nRole::all();\n=> Illuminate\\Database\\Eloquent\\Collection {#755\n     all: [\n       Spatie\\Permission\\Models\\Role {#770\n         id: 5,\n         name: \"This is a very long role name\",\n         guard_name: \"web\",\n         created_at: \"2017-10-03 13:43:33\",\n         updated_at: \"2017-10-03 13:43:33\",\n       },\n     ],\n   }\n```. > However, is it possible to disable some of the permissions on the role only for one particular user?\n\n\n\nNo. This package does \"additive\" permissions. It does not have support for dynamically removing something already granted by a role.\n\ncould also be nice that roles could inherit each other so maybe admin role inherit also the user role\n\nDo you mean that you want \"admins\" to have \"all\" permissions? \nThat can be done in the Gate, and does not require this package.\nSeveral examples of this are shown in https://github.com/spatie/laravel-permission/issues/384\n. Guessing you're using an older version of the package that did permission caching during the register stage, instead of in the boot stage.. >   [PDOException (42P01)]                                                                \n  SQLSTATE[42P01]: Undefined table: 7 \u041e\u0428\u0418\u0411\u041a\u0410:  \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \"users_has_roles\" \u043d\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442\n  LINE 1: delete from \"users_has_roles\" where \"model_id\" = $1 and \"mod...                 \nYour query is trying to access a table named users_has_roles, but this package doesn't have such a table.  There is model_has_roles in v2, or in v1 there was user_has_roles.. v1 supports PHP 5.6\ncomposer require spatie/laravel-permission:^1\n... but be mindful that v1 is no longer being actively developed.. Ya, switching it to the inverse also won't get the desired results.\ngetDefaultGuardName() is invoked (directly or indirectly) by pretty much all of the Permission-related functions, ie: hasPermissionTo, givePermissionTo, revokePermissionTo, and by scopes like scopePermission and scopeRole. \nFortunately or unfortunately that means changing that code will affect everything. \nPinging @AlexVanderbist for input ...\n. Thanks!. The package's tests show that the @hasanyrole directive is working with multiple pipe-delimited options: https://github.com/spatie/laravel-permission/blob/master/tests/BladeTest.php#L135\nHave you customized any guards in your Laravel app?\nAt what point in your app is this failing? Can you share your code?\n. I tried some simulations, but can't trigger this scenario in production code. \nIs this happening in your unit tests? Or in production?. Closing due to inactivity. If this problem still persists, please post back again with answers to the various questions asked above .... Please show your code.. Please try removing the inside quotes:\ndiff\n-@hasanyrole('Promotor pedagogico'|'Coordinador de seguimiento')\n+@hasanyrole('Promotor pedagogico|Coordinador de seguimiento')\nIf that doesn't solve it, please post the output of auth()->user()->roles. Apart from my minor questions about the tests, this looks good.\n(Also works well on v1 too.). Thanks!. Hi @Stahoo , Glad you're getting started with Laravel!\nYou raised 2 questions:\n1. Should you edit the sidebar view directly? \nAnswer: yes. That is code you control yourself. (But, like any views which are obtained by publishing assets from a vendor package, be aware that if you re-publish their assets in your project you might accidentally wipe out your customizations.)\n\nShould you edit the PermissionCrudController.php directly? \nYou are correct that \"best practice\" is to not edit vendor package code directly. \nBut this question (how to bring role/permission control into the controller) is really something you should ask the Laravel Backpack team, since it's their package you're asking about. \n(Backpack is imply leveraging the role/permission capabilities from this spatie package; but how you implement more of the spatie package's features inside Backpack is a Backpack-specific question.)\n\nDoes that help?. Not at this time. \nPresently all permission names are unrelated strings, with no inheritances/heirarchies based on patterns used in your naming conventions.. I think you're just running into basic Eloquent model \"state\".\nYou've created a $user object.\nThen you used this package to add permissions to \"the user\", but you didn't update the $user object itself. \nWhen this package adds permissions to the user, it doesn't update that object in memory. You need to call fresh() on the $user object to get the updated associated properties.\n$user->fresh()->getAllPermissions() will show the updated permissions.\nIf you want to actually update the $user object, use $user = $user->fresh();. Ya, the romanbican package has the extra numeric level tier which can be used as you describe.\nThat package isn't maintained anymore, but ultraware/roles is a newer and maintained fork of it.\nI was toying with the idea of adding that sort of feature to this spatie package, but the project I was considering it for got canceled, so I don't need the feature now, and didn't write code for it.. I'm all for the idea of having a numbered heirarchy that's user-configurable (not auto-incremented), where the numbers are merely a secondary way to access the same thing, but with \"greater than\"/\"less than\" support, etc.\nIn practice, I'd be inclined to assign numeric values in jumps of 10, not 1 (ie: user:10, author:20, moderator:80, super-admin:90, etc) ... that way I can insert other things in between those numbers with relative ease and not have to edit previous records.\n@AlexVanderbist do take a look at the ultraware package for a few ideas of what they've done with it, in case it helps round out the features you envision.. Thanks for the input everyone.  We're toying with a few ideas for V3. The feedback is appreciated.. @johannesschobel @lmartins @robinsonryan @NickGiacopuzzi \nIt's been awhile since this discussion was started (and #685 also). \nWhat approaches have you taken in the meantime?\nI'm looking at next steps with this package and it would be helpful to have feedback about what direction you've taken in the absence of this feature so far.. @robinsonryan wrote:\n\nmy solution above does not work with different guards and that is one of my favorite parts of this package.\n\nDo you specifically require different roles/permissions defined down to the \"per guard\" detail?\nIf so, can you explain why that needs to be dynamic (database-stored) in your app, vs coded into model Policies (and the database is unaware of the specific guard used)?. Thanks @johannesschobel . In most apps I've worked on that \"started out with\" a concept of numbered \"levels\" we realized that named permissions and roles were sufficient when we simply used policies to enforce additional logic related to \"levels\", meaning we no longer required the complexity of \"levels\" stored in the database and all the logic to enforce them that way.\nNevertheless, if you need a quick way to implement numbered \"levels\", the ultraware package can handle that.. That's strange. This package doesn't do anything with routes directly.. Looks ready for review. Pinging @AlexVanderbist or @freekmurze to consider whether they want this.. We wouldn't even need a config switch if we just change the abort(403) to throw an exception that is a child of same thing abort does, right? \nSo, the overall code changes would be:\n- create exception which extends appropriately\n- change abort to throw exception\n- add/update tests\n(No need for trait or config key). Did you run the publish command?\nphp artisan vendor:publish --provider=\"Spatie\\Permission\\PermissionServiceProvider\" --tag=\"migrations\". Maybe the double-quotes are problematic in your environment?  Ref #321 . Thanks!. I'm inclined to suggest that you create a pivot table, one-to-many, like article_contributors which pivots around article_id and user_id.\nThat wouldn't necessarily leverage this package at all, but you could create a gate/policy that combines the checks:\nphp\n  return $user->can('edit all articles') \n         || $user->hasRole('articles moderator') \n         || $article->author === $user->id\n         || $article->contributors->contains($user->id);. Right. This package provides role/permission support based on \"membership to a permission/role (or combinations)\", and some degree of connection of those to specific models. \nBut your userland model logic is outside this scope, and that's where model policies come in. As you say, nesting the two layers together.. @zarya Here's an example of implementing a model policy which incorporates permissions managed by this package\nhttps://github.com/drbyte/spatie-permissions-demo/pull/2/files. If this is something you'll need for additional single instances, then it might be necessary to expand the schema to add an instance-id (and make the primary-key include that instance-id), and of course the associated queries.. Which version of this package are you using?\nWhat's the output of composer show | grep laravel ?  (looking for both the Laravel and Spatie versions, so all the output of that will be useful)\nWhat's the content of your /config/laravel-permission.php file? What changes have you made to it and why? \nDo you have any other packages providing role/permission functionality installed?\nCan you post your User model? Maybe you've got some overridden methods/properties that are interfering?. > when I'm trying to get a role permissions\nCan you show code where you're trying to get role permissions? . Backporting this improvement to v1 branch.. You might save another query by using the relationship:\nRole::findByName('writer')->permissions returns a collection.. It was available on dev-master immediately after it was merged.\nBut I've tagged a 2.7.3 release for you, which contains the merged changes. It should show on Packagist in a few minutes.. Thanks!. The pending PR at #538 appears to resolve this problem.. Can you explain in more detail?. Agreed. \nDo you mind writing a couple unit tests for this?\nFixes #536 \nFixes #539 . That looks good. For v3 we might consider adding a test for a gate on a specific model; this would serve as an example too.. Please go ahead with merge and tag.. A pull request is in-progress to fix that: #538 \nIn the meantime, you could go back to version 2.7.1 if it is breaking other gate activities.. See #54, and #275 and #384 for examples.. I think that's an integration where the 2FA middleware you employ on your site simply needs to be extended to do a simple call to this package's role/permission check, but the rest is up to the 2FA logic.. Pinging @freekmurze for review on whether this is something he wants in this package.\nIt would be helpful if there were unit tests to support the added commands.. @andrubeldie is this what you envisioned, converting where to filter ? \n```diff\n    public static function findByName(string $name, $guardName = null): PermissionContract\n    {\n        $guardName = $guardName ?? config('auth.defaults.guard');\n\n$permission = static::getPermissions()->where('name', $name)->where('guard_name', $guardName)->first();\n$permission = static::getPermissions()\n->filter(function ($value, $key) use ($name, $guardName) {\nif (! is_null($guardName)) {\nreturn $value['name'] === $name && $value['guard_name'] === $guardName;\n}\n+\nreturn $value['name'] === $name;\n})->first();if (! $permission) {\n    throw PermissionDoesNotExist::create($name, $guardName);\n}\n\nreturn $permission;\n\n}\n```. > atm any of the hasPermission methods call the permission relation but as we already have the permission cached , cant we use the cached copy instead ?\n\n\nThis package registers all permissions with Laravel's Gate, using the cache. So, when you call can() on the user, you're leveraging the cache.. Fixed in v2.11.0 -- Thanks to everyone for their input and collaboration!. Since there is no group_id or readable_name field in this package's Permission model, it's clear that you've extended the class and added additional functionality. \nI suspect the problem is in your customized Permission model.  Can you post the code for that? And also post any other code you've overridden/extended?. > A multi-tenant functionality is completely optional and should the user not need that part they do not need to use it \nLike @AlexVanderbist I'm happy that it's not forced on people.\nHowever, your PR as it stands now changes all the documentation from instructing to use HasRole trait to HasTenant ... which basically makes HasTenant looking like it's the primary use case for the package. While that might be convenient for a couple people, it may create confusion for the masses. \nAdditionally, it's important to note that this implementation of multi-tenant is only one of many possible ways it can be done. Wondering how that can be described for those needing support in that direction.. PR #545 is attempting to avoid errors for already-assigned roles/permissions.\nIn the case of errors creating duplicate permissions/roles, you could catch PermissionAlreadyExists and RoleAlreadyExists in your code.. You'll need to trace back your code to determine why $request->user() is returning an object of Illuminate\\Auth\\GenericUser instead of the App\\User class to which you added the use HasRoles trait.. It would seem that you've most likely made various changes to the default Authentication and User functionality. Your issues will be in those changes. Things like changing the config/auth.php user model, using a custom Auth provider, etc. Maybe even a custom Request class. \nWithout seeing your complete app code it's hard to tell ... there are lots of directions to look.. The tables mentioned in the error message are from v1.\nYou are using a v2 config/permission.php \nI'm guessing you also have a v1 config/laravel-permission.php\nThis package has 2 versions: v1 for older Laravel. v2 for latest Laravel\nv1 and v2 are not compatible with each other. And there is no \"upgrade\" path from v1 to v2.\n. \ud83d\udc4d \nWhile I don't have a Lumen site set up to test this on, I'm satisfied that these proposed changes are safe.. Thanks!. Closed per #565. Hi! Can you explain a bit of detail about how you differentiate between \"locations\" in this sort of scenario? How \"multi-tenant\" is this setup? \nAnd,... if you were to temporarily envision this scenario as one where this \"user\" were two different users in your system, and those two different users had the necessary roles/permissions to do exactly as you described, .... then what factors would have to be \"merged\" in order to allow these separations to operate for just the single user, so they only require a single login instead of multiple separate accounts?\n(I imagine you've already thought of most of these, but if you can share some more of those details, it may help us reply with a solution even more relevant to your situation/context.). Thanks!. Thanks to Joseph Silber Laravel 5.7 will allow registering as a Gate after callback, which will resolve much of this complication.\nThat said, for 5.5 and 5.6, I like the proposed code posted by @LastDragon-ru because it links up well with Laravel conventions for Policy method names and retains normal Gate behavior.\nHowever, with it the Spatie\\Permission\\Test\\GateTest::it_allows_other_gate_before_callbacks_to_run ... test is failing. \n. Update: for v3 we are leaning towards Gate::after for L5.7. I've read various reports in various projects of similar problems, where on some Windows environments you can't use double-quotes around the provider or tag names; use single-quotes instead. \nWhether you're using Windows or not, try changing the quotes, in case it's something in your environment.. Closing due to inactivity. Feel free to post further if you have answers to Alex's questions.. @iiDestiny wrote:\n\nI try to edit the permissions of a role. After editing, the permission detection method can () failed.\n\nPlease explain \"how\" you edited the permissions of the role.\nThis package clears the cache automatically when you use the supplied methods for manipulating roles and permissions. See: https://github.com/spatie/laravel-permission#cache. Closing due to inactivity. Feel free to post further if you have answers to the posed questions.. Thanks!. Question from @ultrasamad answered in #602.. @benjamincrozat any thoughts on this?. \ud83d\udc4d . The more I look at this, the more I agree with it. \nBut is it a breaking change for existing sites?\nOLD BEHAVIOR:\n- if model has a $guard_name property, return it\n- else if model has any guards in config, use the first one\n- else return default guard\nNEW BEHAVIOR:\n- if the default guard is one of:\n -- $guard_name property on the model\n -- one of the guards in config\nthen return it\n- else return the $guard_name property, if set, or the first configured guard in config\n. Note: #622 has been merged, which changes the signature of where the changes from this PR are located. So merge conflicts will need to be fixed.\nI'm still considering the BC impact of this proposed change ... not because the logic is wrong, but because projects may be coding for the accidental behavior of this, and changing/correcting it could be a breaking change.. It seems the changes in #622 mitigate the circumstances that gave rise to the proposal in this PR. \nClosing this one. \nThanks for submitting!. Assuming the Teacher model extends the User model and the User model has the HasRoles trait applied, then the role('rolename') scope already exists, which you could leverage, even if your query needs to also still join to another table to match teacher with a specific class, etc.\nYou'd then also have additional available methods like $user->hasRole('teacher').\n. @agrove91 wrote:\n\nadding Artisan::call('cache:clear'); didn't seem to work for me.\n\nSorry, your post doesn't contain any of the information needed in order to be of assistance to you. \nIf you're having a problem, please post your code for your model, your seeders, and your routes ... in a NEW issue.. Ok.\nTip: The cache:clear is equivalent to forget on all keys ... so you only need one or the other, not both.. >  Call to undefined method Illuminate\\Database\\Query\\Builder::getRoleNames()\nThat's telling you you've got an instance of the Query\\Builder, not a User. \nYou need a User in order to run getRoleNames(). Yes, ::find() is supposed to return the model object if successful, else null.\nNot sure why you're getting a querybuilder instance, unless you've created a find() method in your User class.\n$user = \\App\\User::with('roles')->find($id); will normally fetch the user by $id along with all their roles. Kinda like the example in #589 . Something's wrong with your User model ... which is causing it to return a query builder object instead of a model instance.\nHere's an example of it working in a simple Laravel app: https://github.com/drbyte/spatie-permissions-demo/commit/a722ad2820c1c667fbe5b5c2fd6db148cde499ca. No, it was never backported to the v1 branch. \nIt's easily done in your own code though:\nphp\n$user = \\App\\User::find(1);\n$roles = $user->roles->pluck('name');\nnote: $user must still be an instance of a User model, not of Query Builder. @ultrasamad similar to my reply to your post in #383, it would be helpful if these code examples (and actually even more, such as your code to configure your guard, your User model, etc) were part of a new issue for your Lumen-specific issues. A link to a github repo where we can look at your code would be easiest to support you with. . The Role model has a permissions property/relationship.\nSo you could retrieve Role::with('permissions')->all(), which gives you a collection, and then iterate through each role and its permissions (also a collection) to reduce down to just the combinations you're seeking. . I think that's a question for @AlexVanderbist \nAlex, was this intentional? \nRef #526 and #517 . A PR is welcome.. Yes, is true. The tables created by this package's migration do have auto-increment id fields where needed. Other tables have a hybrid primary key across multiple fields, so there is no added value in having an auto-increment field in those cases.. Simplest way is to use migrations.\nFor example:\n```php\n<?php\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Spatie\\Permission\\Models\\Role;\nuse Spatie\\Permission\\Models\\Permission;\nclass AddMorePermissions extends Migration\n{\n    public function up()\n    {\n        Permission::create(['name' => 'test_permission']);\n    $role = Role::create(['name' => 'TESTROLE']);\n    $role->givePermissionTo('test_permission');\n}\n\npublic function down()\n{\n    $role = Role::findByName('TESTROLE');\n    $role->revokePermissionTo('test_permission');\n    $role->delete();\n\n    $permission = Permission::findByName('test_permission');\n    $permission->delete();\n}\n\n}\n```. Thanks!\nCloses #600 . Judging from your other posts  that you added to #383 and #591 I'm guessing you resolved this problem enabling the package on Lumen?. Okay, I found the issue: just need to rename the migration file to have the date/time prefix. For example: 2017_12_26_020418_create_permission_tables.php. Hi,\nTo use a different database table and structure, you would have to extend the package by writing an adapter that overrides all the lookups done to the package's tables and have it read and translate the meaning from your own tables. \nYou will notice that the config file names the tablenames, but that's only part of the matter: you have to change the Role model and related traits because your table structure and field-name-meanings are different. . php artisan tinker\n$user = \\App\\User::find(1);\nthen:\nFrom the README: https://github.com/spatie/laravel-permission#using-permissions-via-roles\n$user->assignRole('writer'); ... where writer could be super-duper-admin-role or whatever the role name.. @benjamincrozat curious if you have any comment for this situation.. Thanks!. Per the README: https://github.com/spatie/laravel-permission#database-seeding you'll want to reset the cached data when seeding your tests using app()['cache']->forget('spatie.permission.cache'). Some examples:\nhttps://github.com/drbyte/spatie-permissions-demo/blob/master/tests/Feature/PostsTest.php\nhttps://github.com/drbyte/spatie-permissions-demo/blob/master/tests/Feature/ExamplesTest.php. Are you using multiple guards in your application?\nWe're working on a possible update, based on how the default guard is calculated.  In the meantime you may find my description of \"OLD BEHAVIOR\" here to be helpful: https://github.com/spatie/laravel-permission/pull/587#issuecomment-353913215. \"Method users doesn't exists\" sounds like an application error, not something caused by this package.\nie: \nIf you call auth()->users() then you will get \"Method users doesn't exist\". But that's a typo in your own application code causing Laravel to tell you your syntax is wrong.. No, it's auth()->user()->hasRole():\nhttps://github.com/spatie/laravel-permission/blob/master/src/PermissionServiceProvider.php#L66\nI don't know where your code is getting something different.. Thanks for confirming that the issue is resolved.. Thanks for pointing that out.\nDid you run into actual PHP errors because of it? Or just an IDE complaint? . Agreed. \nI've updated the package. It will be included in the next tagged release.\nThanks for reaching out!\nTIP: When creating Github Issues, please be sure your \"Title\" clearly explains what needs fixing. In this case \"Incomplete Migration\" isn't very descriptive. \n(You can click the Edit button to update it). No worries. Thanks for updating it!\nAnd thanks for contributing!. @benjamincrozat  ... Here's another Lumen scenario you may have more insight into than I do.. Those are my thoughts as well.  It feels like something within the application, which may only be surfacing because this package uses the cache, whereas the application may have no other reason to. . NOTE: This creates a lot more overhead because the retrieval of permissions would have to load both from cache and from the entire permissions table, and then intelligently combine them while also considering clashes.\nIt makes me wonder whether using roles/permissions in the way you are proposing in #612 is really the best approach? It seems unnecessarily granular by forcing the pivot of ALL records in a given model into the Gate ... thus making ALL gate operations everywhere in the site, even on other models, be forced to wade thru everything added for that other model. . Despite the addition to the README being quite lengthy, I like the updates here.\nI have no objection to it being merged.\nMerci!. Given it's unaltered, a link may be equally sufficient. And/or a link to instructions on configuring auth in Lumen may contribute value too.. I like it. \n\ud83d\udc4d . Merci pour vos contributions!. have you customized your table names in the config file? Or is the config file untouched?\nIs it possible that you've configured your Roles tablename to user_roles instead of roles?\nI'm wondering if #577 creates a breaking change for you?. Okay, so yes there appears to be a breaking change in such cases. \ud83d\udc4e \nYou'd need to manually update your pivot table field names to match the changes in your config file. . Working on backing out that breaking change. This way no db changes will be required.\nShould be up within the hour.  . v2.7.8 has been released.\nBest not to use 2.7.7.\nIf you were using 2.7.7 you'll need to change the db schema for your pivot tables.. Thanks for the detailed post.\nI've released Version 2.34.0 to address this.. Can you please explain in more detail what the symptoms are with \"permissions randomly not working\", including specific error messages, etc.. You're correct that the remember_token triggers the saved or updated event, which then triggers the cache flush ... which is thrashes the cache more than necessary. \nHowever, I'm not sure that we'll make changes to the v1 branch of this package to address that.\nIf one were to address it, one way could be to intercept the booted updated event and check for  $user->timestamps == false and skip the cache-flush in that isolated scenario.\n. Role::findByName('Admin')->permissions will give you a collection back.\nRole::findByName('Admin')->permissions->pluck('name') will give you a list of permission names.. Mind showing your code?. ```php\n    $role = Role::findOrFail($id);\ndd($role->permisions);\n\n``\nWhat is the output of bothdd($role->permissions)anddd($role)?. Thanks!. Your screenshot shows that you created those roles using guard_name ofapi`.\nWhat does your config/auth.php list as your default guard? If you're not using the web guard, does switching the order of guards (move api before web, or remove web altogether) in the config file resolve your problem?  See: https://github.com/laravel/laravel/blob/master/config/auth.php#L16-L48. This package hasn't been built to use UUIDs for the model_id relationship.\nBut, as you say, manually changing your schema to support the alternate field type will probably be enough.. @freekmurze While #587 attempts to address the same issue, I think this is more thorough.\nAre you okay with this architectural change?. Thanks!. PRs #587 and #622 propose to solve this. Which of those PRs works best to solve the problem with your application? . Does today's 2.8.0 release help resolve this? . Closing due to no response.. In your example without the @else, what is the generated PHP in the cached/compiled view file?\nAnd, does it actually \"show nothing\" for \"other people\"? Or does it output the @hasanyrole... literally?. Hi @benyanke, thanks for submitting this.\nThe styleci review wants a few changes: remove unnecessary blank lines; change double-quotes to single-quotes in the implode call, and no spaces around the . concatenator. (Personally I like having those spaces around the ., but styleci doesn't.)\nBut I have a bigger suggestion for the code, related to DRY. Can you set $permStr to blank, then in your if you can do your implode to change $permStr. But don't do a return from inside the if. Instead, simply add the .$permStr to the existing return line.. > Thanks for the patience - this is my first non-docs PR iirc.\nWoot!  Good on you for stretching yourself!. Thanks @benyanke !. Can you please add tests to verify that the passed array can be accessed when the exception is thrown.\nAfter the PR #628 is merged then we'll review your copy of their contribution along with your changes for merging.. Thanks @Jigsaw5279 !. I don't think this issue is specific to the laravel-permission package. This package simply makes calls to the caching layer. Nothing fancy about its implementation.\nYour error message appears to be coming from the Laravel Framework, related to your specific driver:\nhttps://github.com/laravel/framework/blob/5.5/src/Illuminate/Cache/CacheManager.php#L107. > To me it sound like this package is using some cache functionality before the custom driver is setup\nOn that point you are correct. \nI'm still not sure it's the package's fault. \nIt's a chicken/egg issue related to Laravel's Auto-Discovery.\nLaravel's Auto-Discovery is inserting this package's ServiceProvider into the boot order above your AppServiceProvider, so when the package's boot method fires and resolves the Cache Repository, it hasn't seen your custom extend, and so it legitimately doesn't know about your custom driver yet.\nYou can verify this by looking at your /bootstrap/cache/services.php.\nOne solution is very simple: don't use auto-discovery for this package.\n1. Add to the composer.json dont-discover: \"spatie/laravel-permission\"\n2. Edit your /config/app.php and add this package after your AppServiceProvider:\nphp\n        App\\Providers\\AppServiceProvider::class,\n        ...\n        Spatie\\Permission\\PermissionServiceProvider::class,\nYou will probably run into a similar issue with other packages that leverage caching services in their service providers. \nRelated:\nhttps://github.com/laravel/framework/issues/22198\nhttps://github.com/ethanhann/Laravel-RedisStore/issues/3\nhttps://laracasts.com/discuss/channels/laravel/custom-cache-driver-in-55\n. Travis-CI demonstrations:\nFailing build: https://travis-ci.org/drbyte/spatie-permissions-demo/builds/332500310\nFixed build after using dont-discover: https://travis-ci.org/drbyte/spatie-permissions-demo/builds/332506018\nDemo example branch: https://github.com/drbyte/spatie-permissions-demo/tree/ehann-redis-test\nFixing commit: https://github.com/drbyte/spatie-permissions-demo/commit/d22c4f6cf30f0b31f66e92677a92176507035283. Did reworking the load-order solve this issue for your project's use of custom cache driver?. Small change:\ndiff\n-        if($user->role('Admin')){\n+        if($user->hasRole('Admin')){. At first glance, yes, I think extending things is probably what's needed to adapt it to your project's unique needs.. \"Where\" in your app is it breaking? In the app? or in tests? \nIs it related to a specific guard? \nPlease share your model's code and the code that's firing that middleware.. Quick check: does changing to version 2.7.9 instead of 2.8.0 make any difference?\ncomposer require spatie/laravel-permission: \"2.7.9\"\nI don't think it's related, since the change in 2.8.0 was related to guards, but it's worth checking to be sure. \nIs this on the User model? In what ways has your User model been altered from Laravel default? \nHow has your config/auth.php been altered?. > If I roll this package back to 2.5.1 it works great, but I'm sure I losing some good functionality going that far back.\nThat's interesting. 2.5.2 changed the middleware to use the cached permission data.\nSo that suggests to me that your app has middleware dependencies or alterations that are interfering. \nOr that your application's Gate infrastructure has been altered such that the way this package leverages it is incompatible with your app.\n\n\"Call to undefined method Illuminate\\Database\\Query\\Builder::can()\"\n\nThe can method must be fired on the User objection, not on a query.\nThe fact that your error message shows that you've got a Query\\Builder object, it suggests that something has changed the compatibility of the normal app('auth')->user() response signature ... which is actually alarming.  \nWithout seeing all of your app's code, there are a lot of unknowns here. \nI suppose you could try turning off package-discovery by specifying this package in dont-discover in composer.json, and then manually register this package in your config/app.php AFTER all your other app dependencies, basically as the last item in that array. Not sure if a load-order change will resolve any conflicts with other packages' alterations. It did for another one that had different caching dependencies.. This is a simple Eloquent in-memory object issue.  If you reload the relations it will give you the correct results.\nAfter $user->givePermissionTo() you will need to run $user = $user->fresh(); or $user = User::find($id);  to reload the relations. Then the hasPermissionTo() will reflect the changes.. >  I have to clear the cache (cache:clear) before they can login again.\nI'm confused: This package doesn't do anything with preventing logins based on roles or permissions. . Did you find out why your app is preventing logins?  What is the code that you've used to tie permissions into login capability?. Thanks!. Thanks!. Yes. Or at least save() the User first.. This issue is resolved with v2.8.1. You're right: the hasPermissionTo() doesn't accept ints.  But it does accept Permission objects or names.\nIt sounds like something in your app has built yet another relation to permission IDs beyond the relationships in this package.\nCan you explain or show how your app is geared solely around IDs instead of permission names/objects? . Thanks for sharing the details - that context is helpful!\nIs the Permission ID number ever used anywhere else? \nI'm wondering whether you need to store the ID number anywhere at all, since it's always based on the 'permission_name_' . $report->slug. \nIf you do use it elsewhere, that's fine. But if not then maybe it's over-engineered? (been there, done that! :) )\nI suppose there could be n+1 considerations, however, given that the Permission data is already cached it may already be equally performant.\nIf the int is indeed needed, then, as per your last comment, you could explore keeping keep your int storage and connecting it using a belongsTo relationship.  I haven't found a need to do that myself yet, so am just trying to follow along with your thinking.. Duplicate. \nClosing.. Ya, it's a bit funky. I'm not sure it needs to be broken up into other commits.\nI'd rather have @AlexVanderbist chime in on whether to do this in v2 or as part of upcoming v3.. Thanks @mattdfloyd . @AlexVanderbist note: users still can't use HasPermissions trait directly (they couldn't previously either), especially since it has a dependency on the HasRoles::hasRole() method. I guess we could add an abstract method for hasRole(), but technically it depends on other things in the HasRoles trait, and around the circle we go ... \nSo, really, the \"usage signature\" hasn't changed: one still must add just the HasRoles trait. . Do you mind adding a test to cover this use-case?. Thanks!. (Technically it does work by implementing the contract ... but extending often feels like the \"only\" approach because in many cases you will also want most of what's already in the model. Both approaches are correct, depending on the intentions or needs.)\nThanks for pointing out that it could be clearer.. The usual Spatie release pattern is to publish a release shortly after a new Laravel version is published.  Never before. \nIf all goes well, I expect to see something either the same day or the next day after the Laravel release.. Laravel 5.6 support is now added. See v2.9.0. You have a Query\\Builder object, not an App\\User object. \nThis usually occurs when you've swapped out the normal App\\User, or the normal Laravel authentication infrastructure, for one provided by another package. \nFor further help, please post the following:\n- the code from the controller method that is calling your blade view\n- the __construct() method from that controller\n- the route definition that's leading to calling that controller method, including any middleware connected with that route definition\n- your App\\User code\n- your composer.json\n. Hasn't been PR'd.\nAlthough, I must ask: What's your \"use case\"?. Are you comfortable submitting a pull request which includes the changes needed, and supporting tests?. > @Barzin73 wrote:\n\nThis site has been working for five months, But this problem happened suddenly.\n\nThat's the sort of symptom that points to something being changed in your app or on your server. . This package doesn't allow you to \"subtract from a role\" for a specific user. Only add.\nIf a user has a role that contains the permission to dj, then they have that permission.\nIf you want to give them \"less\" permissions, create a different role with fewer permissions.. From the README:\n$user->assignRole('writer');\n... where $user is an App\\User object, such as $user = App\\User::find(1);\n... and 'writer' is the name of the role you created.\n. @rathesDot wrote:\n\nYou can only assign the role by passing the object.\n\nSorry, no, that is not correct. The string name of the role can be passed as documented: $user->assignRole('string name');. You're right: you'll need to add your own pivot tables to define the necessary relationships.. Here's an example: https://github.com/drbyte/spatie-permissions-demo/blob/master/app/Policies/PostPolicy.php. Agreed.\nThanks!. Try:\n$roles = Role::get();\nand\ndiff\n<label>Roles</label><br>\n<select data-placeholder=\"Select a Roles\" class=\"form-control tagsselector\" name=\"roles[]\" multiple=\"multiple\">\n  @foreach($roles as $role)\n-    <option value=\"{{ $role->id }}\"  {{ $role->id == ' ' ? 'selected' : '' }}>{{ $role->name }}</option>\n+    <option value=\"{{ $role->id }}\"  {{ $user->roles->contains($role->id) ? 'selected' : '' }}>{{ $role->name }}</option>\n  @endforeach\n</select>\n. Looks good @pkeogan - Thanks for submitting this!. How StyleCi works in a nutshell: The StyleCI review suggests code changes, either for formatting or optimal syntax. You can take their suggestions and apply them to your code and commit them to the PR, or you could go a step further and link StyleCI to your github account and let it do a PR against your repo so you can just merge their suggestions directly.. @andyunleashed wrote:\n\nit appears that the package caches all permissions, but not a user's specific permissions\n\nYes, that is correct.. The tests are failing because your code change causes the model-specific defined guards, and all other possible overrides, to be completely ignored if a config default is set (which usually is not blank, so will always be set).\n. @bussnet wrote:\n\nIm sure this is a bug, cause why would someone prefer the first guard in an list instead of the explicit defined default guard?\n\nFair question.\nHowever, an equally fair question is: why would someone want a Default guard when a model-specific guard has been specified? Defaults are usually used for fallbacks when something more specific isn't offered.. This change cannot be merged because it breaks the primary uses of guard rules.\nDo you mind sharing the middleware you've written which requires the change you proposed?. I wonder if adding something like this to the Guard class might accommodate the need? \n```diff\n    public static function getDefaultName($class): string\n    {\n        $default = config('auth.defaults.guard');\n+\n+        $override = config('auth.defaults.guard_override', null);\n\nreturn static::getNames($class)->first() ?: $default;\nreturn $override ?? static::getNames($class)->first() ?: $default;\n    }\n```\n\n... then you could leverage the new auth.defaults.guard_override config setting.\nStill, I think it'd be helpful to look at your middleware code in order to see some of the broader context of what you're doing.. Your point is understood. That's why I requested to see your code in order to study the bigger picture, in hopes of helping find a more generic solution.. @bussnet wrote:\n\nI think the best solution were to change the guard globally: Permission::setActiveGuard($guard)\n\nYes, that feels sensible.\nIf its purpose is to always override ALL other default behavior, then I guess setActiveGuard is an okay name.\nPerhaps add it to the Guard model: Guard::setActiveGuard($guard).. I see where some of the confusion has come from: Laravel's AuthManager specifically uses that config value for passing guard state. Unfortunately while it's opinionated about that, it has no opinion or practice at the per-model level.. @schajee wrote:\n\nI have a scenario where I need to check for both Role and Permissions assigned to a user. Right now I am using something similar to if ($user->role('role') || $user->can('permission')).\n\nCan you give more details about why your role in this case doesn't already contain the permission? . Or just use $user->fresh() to reload the user's assigned relations. . I see. By \"group\" you meant \"assign a sort order\".\nYou could also simply name the permissions with a group/sort prefix, and then have your UI display them according to that group/sort strategy.. Deferring to @AlexVanderbist for consideration in v3.. Please explain \"why\" you are requesting this.. For maximum flexibility with multilanguage applications, using the name field as the \"key\" and using language-translation of it (everywhere you want to display it) generally works best.. 1. It does. See lines 36 and 48 https://github.com/spatie/laravel-permission/blob/master/database/migrations/create_permission_tables.php.stub#L36\n\nIt should be using model_id.  The old v1.9 used user_id, but the schema in v2 is different. . You may want to explore overriding the roles method from the trait by copying it into your model, and customizing it in a similar way as your CU() method.\nGranted, it's a MorphToMany instead of a BelongsTo relationship, so may require some different handling. \n\nYou could also copy it over with a different name like roles_custom, so that the original roles trait can still function as-is, and make your changes to roles_custom without negatively impacting other parts of your application. Then \"use\" it via with('roles_custom') instead of with('roles').. First, I do NOT know if this will give you what you're looking for.\nBut what I was trying to suggest was adding something like this to your model along with the HasRoles trait which you've already added:\npublic function roles_custom(){\n        return $this->morphToMany(\n            config('permission.models.role'),\n            'model',\n            config('permission.table_names.model_has_roles'),\n            'model_id',\n            'role_id'\n        )->select('id','name');\n    }\nAnd then instead of with('roles'), use with('roles_custom').\n. @AlexVanderbist do you have any insights to share here?. @t0n1zz Have you tried just adding a MorphOne relationship?\nSome ideas for consideration: https://medium.com/@aschmelyun/a-few-helpful-gems-tucked-away-in-laravel-eloquent-6a76e7c926e5. The error you're getting is NOT coming from this package.\nIt is telling you that your self-written RolePermissionController doesn't have a permissionmethod in it, which is correct, since your method is named addPermission.. Do you mind sharing your complete controller class, and the route that's triggering the error? . > After running the update the permissions worked.\nI suppose the composer autoload data might have been damaged, and therefore the composer update repaired them.. I'm not surprised that a seeder would run into those sorts of errors, because the cache doesn't get a chance to be refreshed. \nSee: https://github.com/spatie/laravel-permission#database-seeding\n.. and you might want to trigger the cache-refresh mid-seed.. > As a note. I had to switch to DB cache as file cache still was not getting refreshed with either command (in the seeder or in the cli)\nInteresting. For my demo app, my dev environment uses file, and CI (Travis) uses array, and seeder tests are passing.. What's the guard_name property on your User model (whatever your $user object is created from)?. Sigh. Thanks for catching that. I misread the last post as being a resolution.. I was just reviewing this again. \nI think it is resolved. \nRole::create and assignRole() both use this package's ->getDefaultGuardName(), which first looks for $guard_name as a property on the model, and if not found will fallback to Laravel's default guard.\n. What is the code you used to create the permissions you are attempting to assign?  (permissions must be created before they can be assigned to a role). After you make the manual edits to the database content, are you clearing the laravel cache?. @gregoriochiko you mentioned permissions and didn't say anything about roles, so I'll assume your'e only interested in specific permissions.\nThis also assumes you want to assign permissions for all guards, and have already created separate permissions for all guards.\n// pick a permission name\n$permission_name = 'whatever';\n// lookup all defined permissions, regardless of guard\n$permissions = app(PermissionRegistrar::class)->getPermissions()\n   // filter down to just those matching the specified name\n    ->filter(function ($permission) use ($permission_name) {\n        return $permission->name === $permission_name;\n    });\n// grant those specific permissions to the user\n$user->givePermissionTo($permissions);\n. v2.9.2 is now released, and contains this feature. @joveice wrote:\n\neach time I update it\n\nWhat do you mean by \"update it\"?  Are you referring to when you add new features to your code and add more roles/permissions, and want to add them to new deployments? In that case you could use database migrations: the up method can be used to add the new roles and permissions as part of regular deployment activities.. Is this part of the same issue as #679 you posted?\nEdit: oops, posted wrong issue number.. I suspect there's an order-of-operations clash between your commands and cache reset.\nHere's a demo project where I've demonstrated most of the commands in the README, including seeds, tests, and some views: https://github.com/drbyte/spatie-permissions-demo. Glad you've been able to solve it.. @lemonjp That suggests that you're using file-based caching and all your files are owned by another user. If that's not intentional then you may want to adjust your filesystem permissions. This is a server-config/laravel issue, not an issue with the laravel-permission package.. If you haven't specified to your User model that you wish a certain default guard, then it will default to the default guard specified in your config/auth.php, which is usually web. That's why your route isn't finding a match, since your user has a permission specific to the api guard, not web.. Did you get this sorted out?. Yes, the v2 code uses the model guard first, and only uses the \"default\" as the last fallback.\nWe may revisit this in v3 since it has caused confusion for some.. Nothing special required, since the data is all in Eloquent models. \nRole has a users relationship, so $role->users gives a collection of related objects.\nUsers has a roles relationship, so $user->roles gives a collection of roles.\nExample controller method, where it also filters for a set of \"non-members\" based on role, is :\nphp\n    public function report_roles()\n    {\n        $roles = Spatie\\Permission\\Models\\Role::all();\n        $users = \\App\\User::with('roles')->get();\n        $nonmembers = $users->reject(function ($user, $key) {\n            return $user->hasRole('Member');\n        });\n        return view('admin.report_roles', ['roles'=>$roles, 'nonmembers' => $nonmembers]);\n    }\nand corresponding view:\n```blade\n  \n\n\n    <div class=\"panel panel-default\">\n      <div class=\"panel-heading panel-title\">Role Assignments</div>\n      <div class=\"panel-body\">\n\n        <p>Available roles:</p>\n        @foreach($roles as $r)\n          @if($r->name == 'Member')\n            @continue\n          @endif\n          <ul class=\"listBox\">\n            <li>{{$r->name}}\n              <ul class=\"listBox\">\n                @foreach ($r->users as $u)\n                  <li>{{$u->name}}</li>\n                @endforeach\n              </ul>\n            </li>\n          </ul>\n        @endforeach\n      </div>\n    </div>\n  </div>\n\n  <div class=\"col-md-5\">\n\n    <div class=\"panel panel-default\">\n      <div class=\"panel-heading panel-title\">Role Assignments</div>\n      <div class=\"panel-body\">\n\n        <p>Users WITHOUT \"Member\" role:</p>\n        <ul class=\"listBox\">\n          @foreach($nonmembers as $u)\n            <li><a href=\"/members/{{ $u->id }}\">{{ $u->name }}</a> ({{ $u->weekend }})</li>\n          @endforeach\n        </ul>\n      </div>\n    </div>\n\n\n  </div>\n</div>\n\n\n``. Yes. That's what theonCascade('delete')clause is for in the database foreign-key relationships.\nie: https://github.com/spatie/laravel-permission/blob/master/database/migrations/create_permission_tables.php.stub#L39. Currently this package treats the model's $guard property as the authority, not theconfig` array.\nHowever, as you point out, Laravel treats the config as the guard authority ... because it has no knowledge of model-specific rules:\nhttps://github.com/laravel/framework/blob/5.6/src/Illuminate/Auth/Middleware/Authenticate.php#L39-L62\nhttps://github.com/laravel/framework/blob/5.6/src/Illuminate/Auth/AuthManager.php#L186-L212\nOthers have reported similar confusion, and usually have fixed it by specifying a guard on the model ... at least where that works for them in their specific app.\nChanging this would be a breaking change, so I've marked it for v3 consideration, as I think we need to review and make adjustments for this to work more seamlessly.. Do you really mean \"hierarchy\"?  Or did you mean \"inheritance\"?. I understand your interpretation of Inheritance; and while I don't think I'd use \"hierarchy\" to only mean the opposite, you've described better what you're looking for, so that's good.\nI perhaps should have suggested \"reverse-inheritance\". But that's just semantics. \nThis package will never pass something from parent \"role\" down to child \"permissions\", as that wouldn't make sense.\nBut making multi-tiered roles is a different architecture. I suppose the role relationship could be defined to also have sub-roles. But I'm guessing that's way more complex than what Spatie originally envisioned.\nHowever, in saying that, given that you specifically mentioned wanting \"Admin\" to have basically ALL the permissions of everyone else, why not bypass the complexity of that and just let Admin automatically respond true for all permission checks?  This way, as long as you use the native auth/gate methods of can(), cannot(), @can, @cannot Admin will always be allowed. To do this just use Laravel's Gate::before(). Example here: https://github.com/spatie/laravel-permission/wiki/Global-%22Admin%22-role\n.\nEdit: tagging #512 due to similarities. > Since you tagged this issue for v3, I guess that's mean this will be implemented for v3 right ?\nNo, it's tagged as revisit for v3 ... as in re-visit the idea for consideration. Not promised. \nNo ETAs at this time.. @Rihoj @robov @bmichotte @lucas-quinn-guru @ereztdev @ntraykov @Phunky\nIt's been awhile since this discussion was started. \nWhat approaches have you taken in the meantime?\nI'm looking at next steps with this package and it would be helpful to have feedback about what direction you've taken in the absence of this feature so far.. For named (string) role hierarchy, #440 offers a good option. . I'm not sure I understand your post.. @canvural wrote:\n\nBut this shouldn't be necessary.\n\nI understand, and agree. We're rewriting a number of things for v3 and aim to improve this... particularly the way it handles guards. (Right now it looks to the model as the primary source of truth, and if not set there then falls back to other options based on configs.). True, this is better: https://github.com/spatie/laravel-permission/wiki/Global-%22Admin%22-role. From the readme:\nCreate the role/permission:\n```php\nuse Spatie\\Permission\\Models\\Role;\nuse Spatie\\Permission\\Models\\Permission;\n$role = Role::create(['name' => 'writer']);\n$permission = Permission::create(['name' => 'edit articles']);\n$role->givePermissionTo($permission);\n```\nAnd then assign to the user:\n```php\n// Get $user using any normal methods, such as:  \\App\\User::find(1);\n$user->assignRole('writer');\n```\n. Nice catch. \nThanks!\n. Yes. The contracts were updated as part of the 2.9.2 release via #677 \nIt didn't cause any breaking issues in the various projects I tested it on.\nBut it appears you're extending the contract maybe?\nHow did your App\\Security\\Role class come to be? . Looks like that code is a copy of an older Role model, which you haven't updated to keep in sync with the one in this package. You're missing some 2.9.0 components, as well as the 2.9.2 updates.\nWhat was the reason for copying it in the first place?. This package's README contains an example already: https://github.com/spatie/laravel-permission#catching-role-and-permission-failures. Thanks. @mr-mmmmore wrote:\n\nDoes the package prevent the use of simple Authorizable models?\n\nNo, it doesn't intentionally prevent that. To adjust for supportability of that, can you post a repo of your app code so we can use it for testing? (feel free to simplify/remove parts that aren't related to this auth requirement). Yes, good point. \nI'd be open to a PR for that change.. Thanks!. Currently #577 is NOT in the code, as it caused breaking changes with multiple implementations.\nIt will be revisited as part of future major releases where breaking changes are acceptable.\nIn the meantime, you could for the repo, re-merge #577 and configure to suit your needs.\nOr, if the feature-set of v1 still suits your needs, you could go back to using that version.. 1. You haven't clearly stated which tables are found on which connections. It would be helpful to understand which data is stored on which connection and why. \n\n\nAnd also which connection is configured as primary (guessing it's mysql, from what you posted).\n\n\nIf you (temporarily for testing) add your connection property protected $connection = 'pgsql'; to the vendor/Spatie/Permission/src/Models/Permission.php and Role.php models, does it solve your problem?\n\n\nYou only mentioned using this with the User model, which appears to be on your pgsql connection. Will there be other models you use this package on? and will their data be on the same connection?. See PR #719 for an attempt at supporting this.. Use normal eloquent relations:   Users::with('roles')->all();\nMore details in the README.. Sorry, I don't know of one.. Is the following inconsistency between \"default_role\" and \"admin\" just a mistake in posting example data, and not an error in your implementation? \n\n\n// Create Roles\n    $super_admin    = Role::create(['name' => config('access.users.admin_role')]);\n    $admin          = Role::create(['name' => config('access.users.default_role')]);\nUser::find(1)->assignRole(config('access.users.admin_role')); //'super-admin'\n    User::find(2)->assignRole(config('access.users.admin_role')); //'admin'\n    User::find(3)->assignRole('admin');. > When a user (with the correct role) attempts to visit a protected route, they are presented with the following exception:\n    Symfony \\ Component \\ HttpKernel \\ Exception \\ AccessDenied\n    HttpException\n    This action is unauthorized.\nThis is curious, since this package throws Spatie...[UnauthorizedException](https://github.com/spatie/laravel-permission/blob/master/src/Exceptions/UnauthorizedException.php) ... which gives a different error than you're quoting. \nPerhaps a different middleware is actually causing your problems?. Question: is this manifesting in your test suite? or is it while clicking through the app in dev/prod? \nReason for question: the test suite environment instantiates things very differently than the app does when being hit via the browser, which affects the order of how caching interacts with the auth/guard layer.\nContext is important. Helpful to know the behavior encountered in both environments.. 1. If you are manually inserting records into the tables, then you need to also manually clear the cache.\nYou should NOT be manually editing the database. Use the methods provided in the README.\n\nThe $user->can() and blade @can() function similar to the $user->hasPermissionTo(), but they do it using the Laravel Gate infrastructure so that permissions are registered very early in the bootstrap process. If you have other guards or middleware that are interfering then you may get unexpected results.. > I already did this operation with older version of laravel-permission on L5.5 without any problem.\n\nWhich older version of laravel-permission? \nIs this new scenario also on L5.5 ?. In your local test environment, can you try out the changes I made in this PR, which addresses your can() issue:  https://github.com/spatie/laravel-permission/pull/704/files. This may help close #702 and close #703 . FEEDBACK WELCOME.\nUndecided whether to merge this:\n- is it needed? \n- BC breaks?\n- Given that v3 will likely drop Guard support, why add this now?. It seems like you haven't persisted your $user object to the database yet. Perhaps you're using User::make() (which only creates objects in memory), but should be using User::create() (which creates objects and saves them to the database)?. From the Readme:\n\n// get a list of all permissions directly assigned to the user\n$permissions = $user->permissions;\n// get all permissions inherited by the user via roles\n$permissions = $user->getAllPermissions();\n// get a collection of all defined roles\n$roles = $user->getRoleNames(); // Returns a collection\n\nSo you could loop through your users, and use one of the above methods to obtain their permissions or role names.\n. This seems like an issue with your app. Can you put your code up into a github repository for further inspection? . Perhaps you have a global gate policy registered to always return true? \neg: https://github.com/spatie/laravel-permission/wiki/Global-%22Admin%22-role. I'm convinced there's something at the app level that's causing your undesired outcome.\nSimply adding either a permission or role middleware to the controller works as expected -- example at: https://github.com/drbyte/spatie-permissions-demo/commit/5ebbcbe2910581c3bdca25ecbc28d3f413dcddb4 (you can see in the example that I've included both a role and permission middleware (associated with the seeded data); only one is needed; and if you change the role to admin instead of writer then the appropriate exception is thrown.). This package doesn't do anything with user passwords or page-submit buttons. Those are all in your app's domain.. The assignRole method adds records to the model_has_roles table in relationship to the roles table entries.\nIn what ways have you altered the table structures or added foreign keys connecting this package's tables to other tables? . Why did you add more foreign keys?. > Because I have roles and users table before\nOkay, that makes sense.\nYes, in that case you'd need to customize the migrations to match up to your existing table.. Thanks for submitting this!\nThoughts doing findOrCreate as well? \nWhat are your thoughts on doing similarly with the Role model? I can see there being some degree of benefit there, but given that your head is already on the subject, I'd be interested in your thoughts.. Thanks @barryvanveen !. In your app it appears you may have a typo. Was this intentional?\ngetSutdentdata\ndiff\n-                    $compare_user= $this->UserRepository->getSutdentdata($value->s_id);\n+                    $compare_user= $this->UserRepository->getStudentdata($value->s_id);. User::insert() will return a boolean in some cases.\nWhy aren't you using the standard User::create([array $data]). This will return the object of the created user, which you can then run assignRole against.. Your SQL error shows only the timestamp fields being inserted. This tells me there's a logic error in your code. \nUpon further inspection, I see you're filling $user as an array of users, but then trying to insert it as an array of new users (but insert or create only allows a single record, not an array of records; you need to loop through them).\nWhy not just move your create-user logic up inside your if(compare_user) loop? You wouldnt' need the empty() check then either would you? . Hi @NiDo0o \nIt's best to start a \"New Issue\" (see green button in the top right of the page) if your question is not directly related to the specific subject of another conversation, such as this one. \nThat said, the README does explain the basics quite well, and if you'd like to see an example implementation of it, check out my demo repository at: https://github.com/drbyte/spatie-permissions-demo/commits/master ... if you look at those commits in reverse order you can see me building up the app step by step. It's not a video, but it is real code. \nOr there's a good written tutorial (for Laravel 5.4) at https://scotch.io/tutorials/user-authorization-in-laravel-54-with-spatie-laravel-permission\nIf you have other questions, please start a new Issue for that discussion. Let's not hijack this current one ;). This package's middleware will thrown an UnauthorizedException which includes the name of the requested permission for which they were not authorized.. I'm guessing you have something else firing before it, either a different route group defined for that same route action or a different middleware interrupting.. Did you get this sorted?. Are you getting these errors via FeatureTests? Or by using the browser?. I'm pretty certain your AccessDeniedHttpException is coming from something outside the operation of this package.. Thanks!. Drop the ->get(). This package contains all the required models and migrations already.\nWhy are you creating models manually?. You've changed the code by extending it, but haven't shown the code; it's hard to support your code without seeing it.\nThese commands work fine with the package itself, unaltered:\n```\n\n\n\n$role = Role::create(['name'=>'test2']);\n=> Spatie\\Permission\\Models\\Role {#2367\n     name: \"test2\",\n     guard_name: \"web\",\n     updated_at: \"2018-04-25 12:57:48\",\n     created_at: \"2018-04-25 12:57:48\",\n     id: 10,\n   }\n$permissions = Permission::where('id', '>', 0)->pluck('name','name');\n=> Illuminate\\Support\\Collection {#2362\n     all: [\n       \"view unpublished posts\" => \"view unpublished posts\",\n       \"create posts\" => \"create posts\",\n       \"edit own posts\" => \"edit own posts\",\n       \"edit all posts\" => \"edit all posts\",\n       \"delete own posts\" => \"delete own posts\",\n       \"delete any post\" => \"delete any post\",\n     ],\n   }\n$role->givePermissionTo($permissions);\n=> Spatie\\Permission\\Models\\Role {#2367\n     name: \"test2\",\n     guard_name: \"web\",\n     updated_at: \"2018-04-25 12:57:48\",\n     created_at: \"2018-04-25 12:57:48\",\n     id: 10,\n   }\n$role->permissions;\n=> Illuminate\\Database\\Eloquent\\Collection {#2445\n     all: [\n       Spatie\\Permission\\Models\\Permission {#2414\n         id: 8,\n         name: \"view unpublished posts\",\n         guard_name: \"web\",\n         created_at: \"2018-04-23 15:56:49\",\n         updated_at: \"2018-04-23 15:56:49\",\n         pivot: Illuminate\\Database\\Eloquent\\Relations\\Pivot {#2379\n           role_id: 10,\n           permission_id: 8,\n         },\n       },\n       Spatie\\Permission\\Models\\Permission {#2399\n         id: 9,\n         name: \"create posts\",\n         guard_name: \"web\",\n         created_at: \"2018-04-23 15:56:49\",\n         updated_at: \"2018-04-23 15:56:49\",\n         pivot: Illuminate\\Database\\Eloquent\\Relations\\Pivot {#2454\n           role_id: 10,\n           permission_id: 9,\n         },\n       },\n       Spatie\\Permission\\Models\\Permission {#2369\n         id: 10,\n         name: \"edit own posts\",\n         guard_name: \"web\",\n         created_at: \"2018-04-23 15:56:49\",\n         updated_at: \"2018-04-23 15:56:49\",\n         pivot: Illuminate\\Database\\Eloquent\\Relations\\Pivot {#2443\n           role_id: 10,\n           permission_id: 10,\n         },\n       },\n       Spatie\\Permission\\Models\\Permission {#2444\n         id: 11,\n         name: \"edit all posts\",\n         guard_name: \"web\",\n         created_at: \"2018-04-23 15:56:49\",\n         updated_at: \"2018-04-23 15:56:49\",\n         pivot: Illuminate\\Database\\Eloquent\\Relations\\Pivot {#2428\n           role_id: 10,\n           permission_id: 11,\n         },\n       },\n       Spatie\\Permission\\Models\\Permission {#2389\n         id: 12,\n         name: \"delete own posts\",\n         guard_name: \"web\",\n         created_at: \"2018-04-23 15:56:49\",\n         updated_at: \"2018-04-23 15:56:49\",\n         pivot: Illuminate\\Database\\Eloquent\\Relations\\Pivot {#2386\n           role_id: 10,\n           permission_id: 12,\n         },\n       },\n       Spatie\\Permission\\Models\\Permission {#2394\n         id: 13,\n         name: \"delete any post\",\n         guard_name: \"web\",\n         created_at: \"2018-04-23 15:56:49\",\n         updated_at: \"2018-04-23 15:56:49\",\n         pivot: Illuminate\\Database\\Eloquent\\Relations\\Pivot {#2465\n           role_id: 10,\n           permission_id: 13,\n         },\n       },\n     ],\n   }\n```. Did you sort out the issue with this?. FEEDBACK WELCOME.  At the present time I'm not using this in an app that requires these multiple connections.\nIs there any negative side-effect to this? Backward compatibility breaks I've missed?. > This means that I'm forced to change any authorization call by passing the guard name before any other parameter. This shouldn't be a backward compatible update.\n\n\n\nArgh. \nYou're right.\nThe testing focused mostly around calls to the gate via can(), not authorize as used with a policy.\nStick with v2.11 until we sort this out.  Apologies!. @fsavina I have a short bit of time to look into this more deeply in about half an hour. But I don't have a project using authorize() calls that way handy to test with (although I realize it's not terribly complicated). Are you able to share a copy of your code base (even privately, click my name above to get my email address from my GH profile); that'll help ensure I catch any edge cases too ;). Ya, I was thinking the exact same. Then remembered that I have policies set up in my permissions-demo repo ... and yet all its tests are passing when using 2.12.0\nhttps://github.com/drbyte/spatie-permissions-demo/blob/master/app/Policies/PostPolicy.php\nhttps://github.com/drbyte/spatie-permissions-demo/blob/master/app/Providers/AuthServiceProvider.php#L19\nMaybe it's because it's using authorizeResource(), instead of writing an authorize() call in each method: https://github.com/drbyte/spatie-permissions-demo/blob/master/app/Http/Controllers/PostsController.php#L13. Nope. \nauthorizeResource() passes, \nand so does using individual authorize() calls: https://github.com/drbyte/spatie-permissions-demo/blob/master/app/Http/Controllers/PostsController.php#L107\nGranted, this demo app is only using the default web guard; it doesn't demo any specialized guard functionality of the spatie package.\nSo, not sure what's different between this demo app and yours.. Released 2.12.1 which reverts the 2.12.0 changes. Apologies!. Currently this package treats the model's $guard_name property as the authority, not the config array.\nWe will probably switch to using the config array as first authority after a rewrite for v3.\nIn the meantime, I've found that using auth('api')->user()->can() will return expected results for api.. Yes, that could be done. In fact a few PRs have come and gone for variations of that. But I'm pretty sure that would be a breaking change for people who have coded their apps to work with the way things are right now. . Does App\\Entities\\Admin have a protected $guard_name = 'admin'; property defined?. @role() requires a role name, not a permission name. In your example, you said you're using @role('view_orders', 'admin') but 'view_orders' is a permission, not a role.. @ssheduardo I'm pretty sure it's finding the wrong guard because of the order of lookup, as explained in https://github.com/spatie/laravel-permission/issues/72. Hi @leopado \nThanks for submitting this PR.\nClearly you've put a lot of work into writing all these additions.\nI'm going to confer with @freekmurze for further input, as I think these changes may be beyond the scope of what this package is aiming to provide. . There's a morphsToMany relation from the User to their Roles, if you've added the HasRoles trait to your User model:\nhttps://github.com/spatie/laravel-permission/blob/master/src/Traits/HasRoles.php#L28\nand vice-versa:\nhttps://github.com/spatie/laravel-permission/blob/master/src/Models/Role.php#L61\nAccessible via the following:\n- $user->roles()\n- $user->getRoleNames()\n- $user->role('role to filter by')\n- $user->hasRole()\n- $role->users()\n- and more, documented in the Readme.. You're right: there's no supplied method to directly sync a group of users to a specific role. Users is just one of many models that roles can be attached to.\nHowever, you can sync roles to users using $user->syncRoles()\nhttps://github.com/spatie/laravel-permission/blob/master/src/Traits/HasRoles.php#L110-L122\nFor mass-assigning users to roles you can use that same method with a slight adjustment to your posted code:\nphp\n// assumes $users is an array of integer ids; This could be altered to handle objects as well.\nforeach($users as $user) {\n  if ($user = User::find($user)) {\n    $user->syncRoles($role->id);\n  }\n}\nYou could similarly use each() on a collection.\nThe benefit of using the supplied methods is that it also keeps the cache fresh at the same time.. You could extend the package using customizations like I made in #719 related to #697 . Do you mean something other than combining the two results with something like a merge() \nhttps://laravel.com/docs/5.6/collections#method-merge. I'm not sure I fully understand your question.\nIf you don't want to put the code in your controller, then use middleware in your routes: role:Maintainer\nAlternatively you could use model policies.. Hi @klincheg, Thanks for submitting this.\n\n\nFirst, it appears that your code is reversing the performance improvements added in #710.  Please revert your changes to those parts of the Permissions model. \n\n\nIt appears that this PR is intended to improve the caching-lookup speed by adding more granular cache key levels.\nPerhaps we can re-title this PR to indicate that it's changing the caching strategy, to improve lookup speed?\n. @drbyte wrote:\n\nit appears that your code is reversing the performance improvements added in #710. Please revert your changes to those parts of the Permissions model.\n\n\n\n@klincheg replied:\n\nI can't revert it because in my PR code selects only needed data. In previous version it was \"select all and after that filter\" But in old version i have a time problem if there are more than 150 permissions in the table (old code in some cases worked more than 2-3 secs, and after my changes time was reduced to 300-500ms)\n\nThere were benchmark measurements done in #710 and #550 both for exposing performance problems and demonstrating the improvements realized by the changes.\nI'm not interested in undoing the improvements made by #710 without substantial proof that they are problematic. In my experience they were positive improvements.\nAre you saying that the changes in #710 actually made performance worse?\nIf so, then let's create a test application to demonstrate the problem, showing before-and-after speed statistics.. @klincheg I've been looking at this further, and note the performance gains from caching this way.\nIt needs some changes to allow for caching systems that don't support tagging though.\nAnd, since the caching approach is changed, instructions for clearing the cache will need to change as well, including https://github.com/spatie/laravel-permission#manual-cache-reset. @fullstackfool I've been meaning to set up a few scenarios to run performance benchmarks.\nI figure creating a few seeders which can pre-populate the simulated scenarios, and then running some hits against it, should suffice.\nYou could help by either offering a checklist of components to consider in building the seeders, or offering such a seeder. \nSince you've posted that this has helped you, I'd like to know more about your environment, such as number of roles, permissions, users-with-roles, users-with-specific-permissions, variations of user models (or any other models associated with roles/permissions), whether you focus primarily on permissions vs roles, and the sort of app execution path that uses the roles/permissions (web-based hits put load on roles/permissions via routes, controllers, model-policies, and blade templates; api hits are more likely to hit a middleware or controller, but not templates). Sorry, that list got big very quickly!. I've done a bunch of simulating and testing with just creating hundreds of roles/permissions/users and linking them up (not necessarily reflective of any \"specific\" app type, just very generic), and this PR gives about a 5x performance boost. So that's good. \nUnfortunately this PR relies on a cache system that supports tagging (cannot use flush() if tagging is not supported).\nFurther, when using a fallback if TaggableStore is not detected, tests using CACHE_DRIVER of array and file gave different cached-response results, so there's something inconsistent there. Maybe the length of the cache key?\nMaybe you wanna test the alterations I've been working with:\n```php\nclass PermissionRegistrar\n{\n    //\n    /* @var boolean /\n    protected $cacheIsTaggable = false;\npublic function __construct(Gate $gate, Repository $cache)\n{\n    //\n    $this->cacheIsTaggable = $cache->getStore() instanceOf \\Illuminate\\Cache\\TaggableStore;\n}\n\n//\npublic function forgetCachedPermissions()\n{\n    if ($this->cacheIsTaggable) {\n        $this->cache->tags($this->cacheKey)->flush();\n        return;\n    }\n\n    $this->cache->forget($this->cacheKey);\n}\n\npublic function getPermissions($params = null): Collection\n{\n    $permissionClass = $this->getPermissionClass();\n\n    if ($this->cacheIsTaggable) {\n        $key = $this->cacheKey . ($params ? '.' . implode('.', array_values($params)) : '');\n        return $this->cache\n            ->tags($this->cacheKey)\n            ->remember($key, config('permission.cache_expiration_time'), function () use ($params, $permissionClass) {\n                if ($params) {\n                    return $permissionClass->where($params)->with('roles')->get();\n                }\n                return $permissionClass->with('roles')->get();\n            });\n    }\n\n    return $this->cache\n        ->remember($this->cacheKey, config('permission.cache_expiration_time'), function () use ($params, $permissionClass) {\n            return $permissionClass->where($params)->with('roles')->get();\n        });\n}\n\n```. @fullstackfool wrote: \n\nThis set of 'permissions' is more along the lines of a can do b when c.d.e. This leads to a possible permission list of >400,000. Of course, we're not sure whether this should be treated as a set of permissions yet - we may be trying to fit a square peg in a round hole\n\nYa, sometimes it's tempting to use \"dynamic\" permissions where the rules are really app-encoded and don't need the added overhead of being stored in the db. In such cases I find that implementing a strategy geared around Policy use is not only more performant, but also easier to debug and easier for the dev team to grok.. Sure. It'll be easier to discuss as a separate PR.. Closed in favor of #926 . It does sound a bit like a cache issue. Cache issues are common when doing direct edits to the database or when attempting to seed the database and run tests against that, and sometimes when using tinker. At the app level if roles and permissions are created and assigned and checked using the supplied methods then caching issues are less common. . @Mutahhar did you sort out the problem?. @Mutahhar I haven't been able to duplicate these symptoms, which leads me to think there's an issue at your app level where perhaps there are other methods or other packages interfering with the methods offered by this package's traits.. Do you mean like extending artisan route:list to add a reverse-lookup of all permissions associated with all middlewares assigned to all routes?\nNo, that's not a feature of this package.. As of v2.8.0 of this package, guard-matching is done in the following order:\n1. protected $guard_name on the model\n2. config lookups for auth.guards where auth.providers has a guard defined for the model\n3. config for auth.defaults.guard\nhttps://github.com/spatie/laravel-permission/blob/master/src/Guard.php#L15-L50\nI'm aware that many people would prefer to rely on auth.defaults.guard so they can programmatically set it and depend on it as the first match, particularly in some middleware processing, amongst other places. I'm hoping we can make that change as part of a future update without it being a backward-compatibility mess.\nDoes that help answer your question?. > Please let me know if 2.8.0 is stable, I can't find any documentation on that version\nYou can use the latest version. I was just pointing out that it's been that way since v2.8.0.\n(before that it was not always detecting the model-defined $guard_name). @ereztdev wrote:\n\nI am looking to have permissions rely on 2 conditions role and group, I thought I could somehow use guard_name as a group.\n\nHow are you utilizing the guard to differentiate users now? ie: for your sales group (or r&d in your other example), are you using (or planning to use) sales as ...\n- blade filters via can rules?\n- routing?\n- middleware filtering?\nTo be sure we're looking at your objective from the same angle, do you have example code or an example app you could post to a repo? \nI understand your wish to do additional groupings, but would like to see how you are wishing to implement it with guards.. Thanks. \nFrom your various posts I get the sense that you're not already using any guards other than the defaults of web and api. Is that correct? \nAnd you're using this package currently in some form, but I guessing without any leveraging of its guard support?\nOr am I misreading where you're at currently?\nI'm trying to ascertain what you're ultimately asking for here. Are you asking:\n- \"How do we start adding guards to our application?\"\n- \"We have a few guards; how do we wire them up to this package?\"\n- \"How can we refactor our group policies to be enforced by guards and middleware?\"\n- \"We would like to expand our existing use of guards to provide group policies. How?.\"\nI'm happy to help. Just trying to know what direction to go.. Maybe some of the watchers of this repo can share examples of how they've extended Roles?\n. @ereztdev Did you sort out your need for groups or extending code? . Great! That sounds like it's probably even more flexible that the original direction of this thread.\nPlus if we add some sort of hierarchical structure or prefixing in a future version that might naturally tie into what you're already doing.. We are \"considering\" this as a possible feature to add in v3. Not decided yet. \nhttps://github.com/spatie/laravel-permission/issues/479. @vahidalvandi \nThanks for your submission. \nThe tests are failing because you didn't mark those fields as nullable(), and didn't update the models to insert a non-null name if no display-name was set.\nAs @ankurk91 pointed out, there's more that needs to be done to this before it could be merged: there would need to be method calls that allow setting the display-name programmatically, as well as tests included to confirm it functions correctly.\nWe hope to consider additional fields as part of v3, but haven't fully determined what features will actually be in v3 yet. \nClosing this PR for now.. Hi @enricouniurb , \nThis package currently responds to all role/permission requests equally. ie: it doesn't exclude \"admin\" under certain conditions.\nIn your example you listed 2 roles, but \nAre you wanting the user to choose 1 role from 2-5 options, and have only the rights associated with that 1 role? Where would you want them to choose that?\nOr are you specifically wanting to treat \"admin\" different from \"everything else\"?  \nThe approaches for each may be different. I'd like to understand your need better.. @enricouniurb this package provides roles/permissions responses based on all defined relationships assigned for that model member.\nTo change that within your app by restricting it to a lower level would require adding an intermediate layer which translates what your app wants vs what the package provides.\nYou would probably need to override the HasPermissionViaRole() method to maybe return nothing, or return a conditional response based on the role the user selected at login, and then ensure that inside your app you never use any hasRole() methods, but instead always use hasPermissionTo() for testing authorization.. getRoleNames() was added in v2.5.1 and is part of the HasRoles trait:\nhttps://github.com/spatie/laravel-permission/blob/master/src/Traits/HasRoles.php#L206\nPerhaps you're using a very old version?. I wonder if you have a clash of dependencies?\nThis demo app built on the principles in the readme doesn't give that error ... but it doesn't have those other packages installed either: https://github.com/drbyte/spatie-permissions-demo/\nHere's fresh output from that app, for App\\User::permission('edit articles')->get();:\n```sh\n$ cd permissions-demo\n$ php artisan migrate:fresh --seed\nDropped all tables successfully.\nMigration table created successfully.\nMigrating: 2014_10_12_000000_create_users_table\nMigrated:  2014_10_12_000000_create_users_table\nMigrating: 2014_10_12_100000_create_password_resets_table\nMigrated:  2014_10_12_100000_create_password_resets_table\nMigrating: 2017_09_10_183759_create_permission_tables\nMigrated:  2017_09_10_183759_create_permission_tables\nMigrating: 2017_12_18_214801_create_posts_table\nMigrated:  2017_12_18_214801_create_posts_table\nSeeding: PermissionsDemoSeeder\n$ php artisan tinker\nPsy Shell v0.9.3 (PHP 7.2.5 \u2014 cli) by Justin Hileman\n\n\n\nApp\\User::permission('edit articles')->get();\n=> Illuminate\\Database\\Eloquent\\Collection {#2360\n     all: [\n       App\\User {#2371\n         id: 1,\n         name: \"Example User\",\n         email: \"test@example.com\",\n         created_at: \"2018-05-18 12:47:48\",\n         updated_at: \"2018-05-18 12:47:48\",\n       },\n     ],\n   }\n``\n. Thanks!. When extending you must still be certain that your code provides anamefield to the model, as it is a required field. Even if you translate it to something else via a related table, you must still provide aname, since thatnameis what the code uses to do all its lookups for authorization activities such as middleware and hasRole() etc calls.\nSo, while you may wish to translate the name of a role for \"display to the user\" in various languages, you must still assign a primaryname` which is stored in the model.. Sounds like you're doing a manual delete from the database, but not clearing the package's cache, and therefore you're getting the cached results back.\n\n\n\nThe Readme explains the use of built-in functions for managing roles and permissions in a way that auto-updates the cache, and how to clear the cache manually if you aren't using the built-in methods:\nhttps://github.com/spatie/laravel-permission#cache. This package is based on a set of tables configurable via the config/permissions.php file, and the code is attached to models via traits to empower those models to provide role/permission results to authorization requests either through defined policies or specific gate checks.\nYou didn't explain what you mean by \"different companies\" ... whether those \"companies\" are \"tenants\" in a multi-tenant app, or whether those companies are all model-members of a companies table in a single-tenant app. \nThere are many ways to approach either case.\nOne way to handle multi-tenant is with separate databases for each tenant , in which case your permissions would be assigned inside each tenant, allowing granular control over what each person can do. If you needed to have super-users who have cross-tenant permissions, you could build an extra layer that grants them additional (but completely separately-maintained) permissions across tenants. \nThat's one way.\nFor a single-tenant environment, you may want to name all your permissions with \"company-name\" as a prefix. \nOr maybe skip that prefix and have an additional set of permissions or roles that are prefixed with something like \"global.\" to allow access everywhere. \nAnd/Or add an additional pivot of some sort that associates users across companies.\nDoes that help?. Just a few thoughts on how you might approach it:\nIn the case of a multi-tenant app using multiple databases, permissions/roles would be assigned separately in each tenant's database. You could build an admin console which could clone permissions between tenants for specific users; or inside a given tenant's admin area perhaps they could specify which \"external\" users-from-other-tenants they're granting permission to.. Okay, single-db ... which means you're probably altering table schemas to identify the tenant in each record. \nHow many roles and permissions are you implementing? 10 or 1000?\nAre you talking about hundreds of users having cross-tenant permissions? Or just 3 users?\nIf the number is small, then at the design level I'd suggest just storing their associations just like any other users. You could still provide some admin interfaces for doing the necessary cloning/revoking.. Context question: can you explain \"why\" these users have permissions on other tenants?\n(I don't know for certain, are they \"administrators\"? are they employees of multiple tenants? Are they IT support techs who need certain access across tenants? Are they traveling professors who need certain permissions at multiple places where they teach?)\nWill the permissions across tenants be \"identical\"? ie: will user A have exactly same permissions in company X and company Y? Will user B also have exact same permissions as user A, just maybe with company Z and X?\nI don't know if it matters, but this context info may help in considering implementation approaches.. I feel like this package could work for that. \nI imagine you've probably already extended the User model to store a specific tenant id for each User. Therefore I'm guessing these cross-tenant Users have multiple almost-identical User records.\nSo the normal installation of this package by adding the HasRoles trait to this model will probably be sufficient.\n. How do you control access for those users, per tenant, now?. Earlier you said:\n\nit's a multi-tennant single database\n. Okay. Then you've got a pivot table for Users-to-Tenants, and probably a corresponding Model.\nYou could extend things to leverage this package to work with that.\nI don't have code samples for you, but I think that's the direction I'd suggest exploring for now.\n\nAlternatively, if that becomes too complex, you could look at the JosephSilber/Bouncer package. It has some multi-tenant features, but implements roles and permissions in a different way than this package does.. You're welcome.\nHopefully something in our conversation will lead to an eventual solution.\nDo we need to keep this Issue open?. Question: does your own implementation currently extend the model itself, or the Contracts?\nRef: https://github.com/spatie/laravel-permission/blob/master/src/PermissionServiceProvider.php#L52-L58\n. @lk77 wrote:\n\nPS: if you think wildcard capabilities is something useful for this package, i can try to implement it in another PR if you want.\n\nIf you're talking about something different than #382 or #440 then please open an Issue to discuss this. I'd like to understand more about what you envision. Or add to the discussion in #382 if it's the same thing as being discussed there.. @lk77 I see you went through several iterations here, presumably because you found more efficient ways of doing it.\nDid you discover any potential breaking changes with this?\nCan you think of a Feature Test that we could add to make sure it is correctly fixed? \n. \ud83d\udc4d . There's a caching layer that may be causing you to see the unexpected results.\nDoes this make any difference?\n```diff\n$user->assignRole('admin');\n$emailUser = \\App\\EmailOnlyUser()->find(1); // This gets the above user BUT it's using the sub-class\n-if ($user->hasRole('admin') === false) {\n+if ($user->fresh()->hasRole('admin') === false) {\n  die('Why are we not an admin?');\n}\n```\n. Okay, I see your point.\nMaybe there's a bug there.\nI can't investigate this until early next week.  If you're already got an idea you want to PR, that's welcome too.. Apologies for the delay. I've finally had some time to look into this further, and I understand what you're saying and what you're wishing for.\nThanks for indulging my early responses: duh, I dunno why I made the cache comment! :s \nUnfortunately you may not like my answer: At this point I see it as expected behavior.\nThat said, I haven't dug into investigating whether the MorphToMany relationship can be told to inherit from parent classes when retrieving relations. The MorphMap might be leveragable, but isn't really for that purpose.. Hmmm ... The Role::class contract registration does do a lookup from config/permission.php for the correct class:\nhttps://github.com/spatie/laravel-permission/blob/2affce0021cb9b6f4e249f7c5d94eb68039ffccc/src/PermissionServiceProvider.php#L54-L57. > \"message\": \"SQLSTATE[42S22]: Column not found: 1054 Unknown column 'model_id' in 'field list' (SQL: updaterolessetupdated_at= 2018-05-25 22:43:49,model_id= 20 whereid= 1)\"\nThe error message is telling you that the model_id field doesn't exist in the roles table.\nThis can be caused by 3 scenarios:\n\n\nYou previously had a roles table, so you skipped running the supplied migration as provided, and didn't update the migration to apply the necessary schema changes to support what this package requires.\n\n\nOr you previously used v1 of this package and had tables from it, but then you upgraded to v2, which is not compatible with the v1 data. \nIf you are upgrading from v1 to v2 you need to manually convert your data to the new format. There is no \"upgrade\" script provided for the change from v1 to v2.\n\n\nAnother possibility is that you might have mistakenly run incomplete migrations on your localhost and not yet full migrations on the vagrant machine. . It's working fine in a Spark 6 app I'm running. \n\n\nQuick setup for proof of concept, following readme:\nSetup for any Laravel app:\n- composer require spatie/laravel-permission\n- publish the migration\n- run the migration\n- add the HasRoles trait to the User model\n- create your permissions/roles\n- if you want to use middleware to enforce them, register them (see lower in readme)\n- assign the roles/permissions to your users\nProof of concept:\n- create a demo role\n- create a page, protected by the middleware, such as role:demo\n- create a permission see demo\n- within a page, protect a section via @can('see demo') ... @endcan. You might find the proposed customizations in https://github.com/spatie/laravel-permission/pull/724 useful for your situation.. That can be done generally with Laravel's policy functionality: first define all the CRUD operation policies, and then augment them with role/permission logic.\nAn example of adding basic Policy support to an app can be seen here: https://github.com/drbyte/spatie-permissions-demo/pull/2/files. You will need to define in your app what a Manager means. That includes determining how you implement the idea of a \"manager has users\". That might include some polymorphic relationships; perhaps some belongsToManyThrough relations defined on the models, and then enforced with your defined policies.. Closing this for now. \nIf there's a need for multiple intermediary discussion affecting this package, we can start another issue for that ... preferably with code samples to start from.. Thanks for posting the performance stats. Clearly those results are compelling.\nI'd be interested in the larger memory footprint introduced by the changes. Granted, the overall impact is probably limited, since the data is always being passed around at some point, just not retained for as long.\nPR https://github.com/spatie/laravel-permission/pull/732/files adds more granular memoizing at the per-permission-combination level, but has the caveat of requiring a cache system that supports tagging in order to make cache-flushing possible. Looking for a way to remove that dependency.\nI imagine there's a happy hybrid somewhere in these discussions .... Good points. I hope to look at both of these more over the weekend.\nYour custom cache-of-the-cache is a fun workaround. :D. Thanks!\nI've updated it to keep the _primary suffix, since that's still the same overall length as the other generated index names, and retains some of the semantics.. Hi @JPT62089,\nI see where the confusion exists. Yes, the README examples do kinda suggest an \"OR\" operation.\nHowever, Laravel's middleware operates as AND when you specify multiple middleware rules. (That's why there are the except() and only() methods chainable when declaring middleware in the controller.\nA couple workarounds:\n\nWrite a custom middleware which provides the OR check for the conditions you mention. Perhaps you might name it roleOrPermission and then you'd call it like this:\n\ndiff\n-Route::group(['middleware' => ['role:super-admin', 'permission:edit events']], function() {\n+Route::group(['middleware' => ['roleOrPermission:super-admin,edit events']], function() {\n It would receive super-admin as the first additional parameter, and edit events as the second. Then your middleware logic would need to check those in an OR fashion. See middleware parameters in the Laravel docs.\n\nA potentially simpler approach would be to treat Super-Admin as an \"everything\" role, and then it will always receive true from permission-checks (ie: can). An example of that is in the Wiki: https://github.com/spatie/laravel-permission/wiki/Global-%22Admin%22-role \n\n. @Kyslik thanks for this.\nI agree: let's get this clarified.\nCan we improve it even more? \nDoes the following give the same clarity you were looking for? (vs what you were finding confusing?)\ndiff\n-By default \n+When creating new permissions and roles, if no guard is specified, then\n-the default guard (`config('auth.defaults.guard')`) will be used\n-as the guard for new permissions and roles.\n+the **first** defined guard in `auth.guards` config array will be used.\nWhen creating permissions and roles for specific guards you'll have \nto specify their `guard_name` on the model:\nand somewhere in this same section, perhaps after the \"create\" examples, explain the \"lookup\" logic\ndiff\n+When determining whether a role/permission is valid on a given model, \n+it chooses the guard in this order: \n+First the `$guard_name` property of the model; \n+then the guard in the config (through a provider); \n+then the first-defined guard in the `auth.guards` config array, \n+then the `auth.defaults.guard` config.\n. \ud83d\udc4d \nThanks!. Hi @hollycoder \nAt the present time, with this package, roles don't \"extend\" other roles.\nHere are 3 options to consider:\n\n\nCheck for multiple roles:  @hasanyrole('Admin|Super Admin')\n\n\n\"Extend\" the roles by granting all permissions for Admin to Super Admin as well (yes, that means a small amount of duplication in assigned permissions), and then build your application around @can rules instead of ever checking for roles at all. \n  (Using can and avoiding role-checking wherever possible is generally a best-practice.)\n\n\nGrant Super Admin \"everything\" permission. This requires using can everywhere, and then setting up a Gate before hook as described in this Wiki article: https://github.com/spatie/laravel-permission/wiki/Global-%22Admin%22-role\n\n\nThis 3rd approach is what I embrace in most of my projects.\nDoes that help?. Thanks for this. You raise good points.\nCan you describe the workflow or app conditions that you're finding are introducing the \"corner use cases\" that you mention?. @dimitvassilev ,\nApologies for the delay in replying. \nI agree with you. The assumption that the unchecked \"type\" is a valid one ought to be made more strict.\nA tested PR is welcome. (I'm not sure if you were offering.)\nI've made a note to include this in a future release.. Not at the present time.\nCan you describe the scenario you're working with and the problem you're trying to solve?. I see your point.\nWhen I run into this sort of scenario it makes me strongly lean towards abstracting that combination of permissions into a policy. This way I can also name it something semantic (which also encourages me to consider additional opportunities elsewhere in my code).\nOne thing you could do in the short term is change hasPermissionTo() to just can(), since all permissions are pushed into the Gate so calls to can() and @can() can be used in your code and templates respectively.. We're happy to review all pull requests! Especially those that are explained well and include supporting tests.\nWhile you're coding ...\nOne thing to keep in mind about permissions (that's different from roles) is that since roles currently support only one tier, the \"hasAnyRole\" is a very simple lookup. But permissions might exist in other roles held by the user/model. \nWhile simply making hasAnyPermission($permissions) do a looped lookup is \"one\" way to tackle it, there may be a more performant solution that could be explored.. Closing because this is essentially a duplicate of #670 . Closing, because this is a duplicate of other open issues.. Thanks!. Looks like a typo in the readme.\nLater down it describes them like this:\n\n// Direct permissions\n$user->getDirectPermissions() // Or $user->permissions;\n// Permissions inherited from the user's roles\n$user->getPermissionsViaRoles();\n// All permissions which apply on the user (inherited and direct)\n$user->getAllPermissions();. @ereztdev \nTo clarify:\n- $request->permissions is an array of numeric IDs.\n- when you say \"if permissions or roles return null (user has no permissions and/or no roles)\" you mean \"if the user no longer has any permissions or roles, based on the $request array\", right? (not that they had none \"before\" the $request was submitted)\n\nI'm a bit reluctant to have it silently ignore nulls or empty arrays, or even invalid models, but throwing an exception when syncing may be too aggressive as well, since a sync could legitimately have empty inputs.. It was decided in the design process for building v2 that there would NOT be any clear upgrade path provided.\nThat said, in my experience, the way to upgrade is to build a simple extraction of all roles and permissions, along with which users are assigned to those roles/permissions, and then re-build and re-assign all those roles, permissions, and users-and-relationships.\nOn a couple smaller apps with limited number of users and roles/permissions I found this was a quick exercise.\nOn a couple much larger apps, I've found that sticking with v1.x has been perfectly satisfactory.\n(And indeed that's why I've been keeping the v1.x branch compatible with later Laravel versions, instead of letting it die completely.)\nThe primary missing \"feature\" in v1 is that v2 added additional support for model-specific-guards. If you don't need that feature, there's less compelling reason to upgrade.\n(And in fact for v3 there's a very strong likelihood that the guard-specific code will be removed.)\nHope that's helpful.. @TaylorFoster90 Glad you got it sorted out. Was the issue you ran into something that might be useful for others to understand as a possible gotcha? . Thanks @fabricecw !. Yes, if the {client} id is invalid, you'll get ModelNotFoundException because without a retrieved model this package can never check for permissions, so it can never fire UnauthorizedException.. Perhaps. \nIt feels like a chicken-vs-egg conflict.\nPerhaps changing your middleware registration order may help? See brief discussion of similar sort of situation at https://github.com/laravel/ideas/issues/716#issuecomment-321926444. In the examples, $user could be any user/model about whom you want to check role/permission status.\nIn the case of the currently-logged-in-user, in Laravel there are several ways to determine that:\n- $user where $user is an injected instance of \\App\\User (or whatever your User model is)\n- auth()->user()\n- Auth::user()\n- request()->user()\n- $request->user where $request is an injected instance of Request\n. The Class not found message is mostly self explanatory: it can't find the class ... presumably because the composer autoloader doesn't have it indexed ... which usually means it's not installed locally.\nYou said this happened \"after doing composer update\". What version of this package did you have before the update? What version does it have now?  Did you remove this package from your composer.json file? Do you have a syntax error in your composer.json, that's causing things not to load?\nI can't think of anything \"specific to this package\" that would be causing any of your symptoms. Possible troubleshooting might include running composer update, or composer show or composer outdated.\nI've seen one scenario where a cloned package (not the original package) will sometimes get \"removed\" by composer during a composer update, and simply running composer update again will resolve it. It's rare, but I offer it as a possible troubleshooting step.. True, overriding the nested traits is indeed a challenge.  So is helping prevent forgetting to include all the necessary traits.\nHmmmm ... . I would accept a tested PR much like you did with https://github.com/spatie/laravel-model-status/pull/40. Thanks!\nThis opens up options for #793 . From this section of the README:\nhttps://github.com/spatie/laravel-permission#using-direct-permissions-see-below-to-use-both-roles-and-permissions\n$user->givePermissionTo('delete articles');\n. Thanks!. How are your users authenticating when connecting with javascript? What sort of auth are you implementing here?. > ... creates a cookie that it sends with every request.\nLaravel is able to validate that cookie for authentication on the user that is performing the request. Once that user is known the role or permission can be checked by Spatie's laravel-permission package.\n\ud83d\udc4d . I don't see anything in your screenshots or code that is forcing it to web.\nInstead, I see that your CustomerController is calling assignRole, and the error is saying role-does-not-exist for admin, which maybe isn't surprising since the screenshot of your database shows it as being defined as Admin.\n. I'm not sure I understand your question fully.\nYour posts indicate that you have 2 models: User and Admin, associated with guard web and admin respectively.\nSince the non-Admin model is User, to create one you would User::create().. Closing for now. If this is still an issue, please post back.. @programmermarvin wrote:\n\nCan i use both api and web guard??\n\nYes and no. Depends what you're really asking. Do you mind opening a separate issue to discuss it, and provide more explanation of what you're trying to accomplish and the reasoning behind it?. @Nvservicing if you need to be that specific, you can do the assignment like this:\nphp\n$roleToAssign = Role:: findByName('administrator', 'api');\n$user->assignRole($roleToAssign); . I think there's something else conflicting.\nIn this demo app, the constructor middleware ->only call works properly: https://github.com/drbyte/spatie-permissions-demo/commit/7eb7fdef32ff38ebbaa4b64d6e999c66bbfd42af. @pankajsanam  The original issue posted by @ xdasty was (most likely) fixed by editing config/auth.php to switch order of which guard is listed first, so that when the original lookups fail the first-listed one would be selected.\nI'm not sure where @zgldh is getting the need to cast roles as an array. That feels unrelated and even probably limiting (it should be discussed in a separate Issue post).. Yes, that's correct. \nwhen() must be applied to the model first if you wish to use it for filtering that model's objects using the provided callback, and then apply the scope-via-related-tables to that result.\nAside: whereHas() wouldn't be needed in your example, but is worth noting: https://medium.com/@aschmelyun/a-few-helpful-gems-tucked-away-in-laravel-eloquent-6a76e7c926e5. This package's goal is to provide just the association of the model (user) and roles/permissions, for the purpose of providing authorization support.\nOther associations should be handled in your app's own schema. Even role-related information that's unique to each related model (ie: an instructor's own degrees/credentials) varies per instructor, and isn't related to authorization details.\nWhether your app needs an additional pivot table, or just additional fields on your (user) model table, is up to you. If it's display-only information perhaps an additional field may suit; but if it's something you might query on or filter/group by, then a related table may be preferable.\nHope that helps.. If the servers are not configured to share a caching resource, then spawning a new server will build a new cache, since there isn't one already. And after that point each separate server's cache will be out of sync with each other.\nIf you're scaling horizontally I suggest the best-practice of utilizing a shared cache server. @fideloper has posted a great series of videos on Scaling Laravel at https://serversforhackers.com/scaling-laravel and particularly on how to do it with Forge: https://serversforhackers.com/scaling-laravel/forge. This package doesn't dictate how to do multi-tenant implementations. It can be done with a few variations as you mention, along with some app-specific adapter wrapping.\n@Nowi5 the traits would need where conditions, and the models probably need global scope as well as additional attribute handling for the extra data. If all the tenants choose from a core set of roles and permissions and the only variation is who they assign those to, then it's simpler. \n. I think something in your app is interfering. This package doesn't directly reference a user_id column on the permissions table.. You can use Laravel's Gate::before() method for that, as explained here: https://github.com/spatie/laravel-permission/wiki/Global-%22Admin%22-role. This package currently supports just one db connection. If you need multiple connections, consider the suggestions I posted in https://github.com/spatie/laravel-permission/issues/728\nChanging the prefix after creating the tables would require manually adjusting tablenames.. @vpratfr with #827 merged, what do you think of a PR to update the above methods, to test for UUID/GUID and lookup accordingly?. Closing because there are no plans to implement this at this time.. This package remembers the role assignment based on the model you were using when you made the assignment.\nCan you share the code where you're assigning roles? Which model are you doing it from? . Hmmm ... I could be wrong, but I think that given the way Eloquent handles those relations automatically, you'd have to code the relationship yourself.\nPerhaps:\nphp\n$agent = Agent::create($data)\nUser::find($agent->id)->assignRole('agent');\nBut, this begs a larger question: \nYou stated the following, but didn't say \"why\". Is this the ONLY reason for this inquiry? And, is there any \"other\" reason for never wanting Agents roles to be associated with the Agent model?\n\nwhen I try to get all the users with 'admin' role .... @markandrewkato \nCorrect. The scope will only return matching records of the same model type.\n\nUser::role('admin') will bring back App\\User models with 'admin' role.\nAgent::role('admin') will bring back App\\Agent models with 'admin' role.. As long as you are using v2.9.1 or greater, this will work:\n$user->hasPermissionTo($permission_id). Can you share an example of your code which exposes this problem?. This is a general Laravel issue with polymorphic relations (there are StackOverflow posts going back to Laravel 4.1 complaining of the same sort of issue).\nManually converting the backslash to double-backslash can be complicated, but is certainly one workaround, and is probably the simplest. But it would require intercepting the query before executing it.\nAn alternate, which is not something this package can easily automate, is to use Relation::morphMap() as described in this excellent article by Joseph Silber: https://josephsilber.com/posts/2018/07/02/eloquent-polymorphic-relations-morph-map. ```php\n// get logged-in user\n$user = auth()->user();\n// get all inherited permissions for that user\n$permissions = $user->getAllPermissions();\ndd($permissions);\n``. I would think the best way for this is to use Laravel Policies.\nHere's an example: \nhttps://github.com/drbyte/spatie-permissions-demo/commit/fbb35a3589f57453a37c99dab2a265e97e3bb301. You may want to useauthorizeResourcein your controller constructor -- example in https://josephsilber.com/posts/2016/08/03/authorization-improvements-in-laravel-5-3. You said you used:->middleware('can:clients.view, clients.create, clients.update, clients.delete')Did you try:->middleware('permission:clients.view|clients.create|clients.update|clients.delete'). ThehasPermissionTo()is made available via theHasPermissions` trait. \nIn your custom middleware your Auth::user() call is doing a lookup that's finding a Illuminate\\Auth\\GenericUser model, which doesn't have the HasPermissions trait on it. \nYou'll need to fix your code.. Note: Due to the risk of breaking changes, we will be waiting to fix this in v3.. Note: release 2.24.0 added the checkPermissionTo() method which returns a boolean.. @fabricecw I'm not currently using L5.3 anywhere, but in looking at the code diffs perhaps something with the Gate changes in the PermissionRegistrar may be contributing to the problem? I don't recall those changes being \"breaking\" between Laravel versions, but you might want to look at what's happening there?\nhttps://github.com/spatie/laravel-permission/compare/1.12.0...1.16.1. You said: \n\nRequest duration (measured with Debugbar)\n1.12.0: 400ms\n1.16.1: 8300ms\nQueries:\nIn both versions the same duration.\n\nQuestion: Did you note whether the number-of-queries is much different too? . That's interesting. I guess the cache insulates against any variation in permission queries.\nBefore #505 the registration of permissions was done by loading all permissions from db/cache and then register a callback for each one into the Gate::$abilities array. When checking allow/deny that would lookup whether an ability was defined, and run it ... which ultimately would run $user->hasPermissionTo($permission) for the requested ability.\nThe change made in #505 (and also #538) registers (not an array of all permissions, but) a single callback for the Authenticatable contract. Thus when an allow/deny request is made, it fires that callback with the passed arguments and does the lookup ... which also ultimately runs $user->hasPermissionTo($permission) for the requested ability.\nSince the change uses a single callback instead of adding every permission to the call stack I would have expected it to be more performant, not less. . @fabricecw Is this still an issue?\nHow long is this app likely to be on L5.3? \nI have an app using v1.x of this package, but it's not having noticeable performance issues. Granted, it's running L5.6, not L5.3.\n(Edit: actually, there are a lot of gate-related queries, but no notable change in measured speed). Great. Closing this issue for now.. @fabricecw,\nIt makes sense that it would do fewer calls, since it only reads permissions once, and sets a Gate rule for each of them. The gate->before approach is different in that it hits the gate individually for each call, which is less performant. \nI'm looking into going back to the define approach. However, directly using the code you quoted (from v1) most of the v2 tests to break due to db chicken/egg presence problems.\nEven wrapping it inside a gate->before call like was proposed in #480 doesn't fully fix it, as 6+ tests fail (all the ones calling can).\nI don't think it's related only to guards, but that was my first suspect.\nA PR is welcome.. @lkreher wanna help debug the failing tests that this introduces? Basically all the can() calls fail.. https://github.com/spatie/laravel-permission/releases/tag/2.35.0 contains the excellent fixes from @matthewgoslett which should help with these performance issues.. I'd love to hear what others are doing too!\nWhile the following isn't an example of mass amounts of seeded permissions, it's the only public repo I have for showing code examples right now; Here are two approaches used in my demo:\nhttps://github.com/drbyte/spatie-permissions-demo/blob/master/tests/Feature/PostsTest.php\nhttps://github.com/drbyte/spatie-permissions-demo/blob/master/database/seeds/PermissionsDemoSeeder.php. Note: If your composer.json lists spatie/laravel-permission:^2.9 and you've run composer update, then it should have actually installed the latest version (the ^ in ^2.9 means use the newest 2.xx release). \n. I think you're using the API wrong:\nFor eager loading use ->with('roles') (plural \"roles\", not \"role\")\nThe scope App\\User::role($roleName) is used to limit the query to a specified role, not to do eager-loading.. false !== strpos($roles, '|') translates to:\n\"if the position of | (pipe) in $roles is not false\", \n...which means \"it is found somewhere in the string\"\nSo, the overall logic of the code you quoted is:\n\"if $roles is a string and there is no pipe in $roles, then convert the pipe-delimited string to an array\"\nI think it's doing what it is intended to do.. hasRole and hasAllRoles are slightly different in what they do. Yes there's a small bit of duplication but it's necessary. And it's minimal enough that it doesn't really need extracting to another method. Nevertheless, thanks for mentioning it. It's always good to look for overuse of duplication etc.. I don't understand your question.\nThe package requires its tables: permissions, roles, model_has_permissions, model_has_roles, role_has_permissions. Yes, the v1 branch used some tables that v2 does not. \nYou should remove those manually. We will not automatically remove old tables.\nThe v1 table names which are no longer used in v2 are:\nrole_has_permissions, user_has_roles, user_has_permissions. Hi @vagifrzada \nThanks for posting. \nIs your problem the same as #770?. Okay. Thanks.\nI will close this issue and we can continue relevant discussion over in #770.. @AlexVanderbist and I are a bit concerned that this may introduce breaking changes for a few sites.\nThus will likely tag it for a major release. \nLeaving this open and will direct it to another branch before merging.\nAlso still contemplating naming for a few things.. @Te7a-Houdini as of v2.24.0 the hasAnyPermission() calls the new checkPermissionTo() which returns a boolean.\nGiven that a boolean can be returned from checkPermissionTo(), do we still need this PR? . Great! \nThanks for all your work on this PR. It took us down the right road of considering more carefully how we handle these requests. In our next major version we'll revisit where we throw exceptions more thoroughly.\nThanks again!. AccessDeniedHttpException is thrown by AuthorizationException, which could be thrown by anything doing authorization.\nThis package doesn't throw either of those directly, but in Laravel lots of things could throw that, including: the auth middleware and any Gate or Policy or FormRequest that checks for authorization.. Hmmm ... what you did is correct: \nphp\n$user = User::where($foo, $bar)->first();\n$user->givePermissionTo('add student');\n$user->hasPermissionTo('add student'); // should give true\nHowever, if you're doing it via Tinker then you have to exit Tinker before running the hasPermissionTo since the cache gets changed during the givePermissionTo and Tinker won't see it until it is restarted. \nSimilarly, your app in the browser won't see it until the \"next\" request cycle.. In a typical app you will do the \"giving\" and the \"checking\" in two separate requests, right? \nie: in some Admin panel you'll \"give permission to\" someone for something.\nThen that user will login in another browser session and attempt to \"view\" the specified page.\nDoing both the giving and checking inside the same controller method may give unexpected results because the cache gets a reset during the \"give\" call.\nI gather you're just testing how it works, and I completely understand that it's convenient to drop a bunch of sequential commands into a single controller method. But that won't work in this case. (We're considering simplifying this specific thing in v3 though!). No worries -- been there, done that myself!. I'm not sure I understand. I think you may need to add another middleware mention into your routing.\nBut without seeing your code it's hard to help.\nI don't think this is a problem with this permissions package, but rather something missing in your app.. It could be because in your route middleware you are using 2 colons instead of one: \n'permission::browse admin'. You experience the redirect when not logged in because the auth middleware does a redirect when not authenticated.\nThe permission middleware does not do a redirect. It throws an UnauthorizedException: https://github.com/spatie/laravel-permission/blob/master/src/Middlewares/PermissionMiddleware.php#L27\nYou can add your own redirect by catching that exception in your app's exception handler.. You should be able to flash session data in your redirect:\nhttps://laravel.com/docs/5.6/redirects#redirecting-with-flashed-session-data. Thanks!. @ikidnapmyself ,\nThanks for your work on this.\nWould you mind adding some tests as well?. Hmmmm ... while working on a way to add tests that could reasonably allow for app-specific User contracts, it became clear that this PR is brittle in that it makes assumptions about the app that we probably don't want to do in this package. (ie: assumes \\App\\User is the one and only model type and namespace that is ever used)\nAs such I'm going to close this PR. \nNevertheless, thanks for your contribution - I know it takes time to submit something. It is still appreciated even though it isn't a good fit for this package's objectives. \nThanks!. @dariuszjastrzebski v2.14.0 was released which adds some more flexibility in the polymorphic relationships by addressing #777 via #827 . I'm not sure I understand the question.\nThis package doesn't provide a User model. That's part of your app.\nSo you would extend the User model the same way you would extend any other model: \nclass foo extends bar\n. Okay, if your question is about scopes, this package provides the ability to return models associated with a certain role or permission, like these examples:\nphp\n$admin_role_name = 'administration';\n$administrators = \\App\\User::role($admin_role_name);\nor\nphp\n$users_with_write_permission = \\App\\User::permission('write');\n. This package focuses on Authorization, not on Authentication.\nTo handle Authentication, simple do your app's authentication checks before triggering features related to Authorization provided by this package.\nFor example:\n\nIs the user a guest? (not authenticated yet) (Laravel's own Auth functions for that)\nIs the user banned? (use your own app's functions for this, or another package, whatever)\nThen if it passes both of those and you log them in, then check for roles/permissions to authorize access to corresponding abilities.. No, with this package you cannot add permissions/roles to a non-authenticated User, ie: guest.\nThis package can only provide permission/role verification associated with actual registered users. This is because it creates a database pivot entry associated with the model ID number of the indicated user. A not-logged-in guest is not associated with a User record.\n\nSo, to provide what you're looking for, you need to handle guest-only access-control in your app at a point before you check for Authorization provided by this package. A policy might be the ideal way to centralize the code for this and thus keep your controller cleaner, but that's entirely your choice.. Thanks @vpratfr !. Hi @gabrieljo \nDid you intend to post an empty issue?. Thanks. \nSpatie usually updates for new Laravel versions after Laravel officially tags the next major release.\nWill merge your PR then. . Thanks!. Not at this time.\nHowever if your permissions are named as described in #440 you could use the middleware posted there.\nOr you could use the idea as inspiration and adapt it to your needs.\nWe may integrate some sort of wildcard strategy in v3.. To include the roles of each user when you query the Eloquent model, include the roles relationship:\n$users = User::with('roles')->all();. No. The roles relationship is already set by the HasRoles trait:\nhttps://github.com/spatie/laravel-permission/blob/master/src/Traits/HasRoles.php#L40\nSince it's a polymorphic relationship, the pivot details are different, hence the error you get in your basic belongsToMany attempt.. Ya, that's a PHP configuration issue on your end. Nothing to do with this package.. Have you bound app('auth') to something other than Laravel's default? What specifically?. @yashjethva Did you resolve your problem?. I'm not sure I understand your question. How is your question related to this permissions package?\nYou can generate passwords in your model factories directly in your app. Discussed at https://laravel.com/docs/5.6/seeding#writing-seeders. Okay. That's a basic Laravel operation.\nJust pass a password value to the create command. Something like:\nphp\n$password = str_random(10);\n$user = User::create([\n  'first' => $name,  \n  'last' => $lastname,\n  'password' => bcrypt($password),\n  // other attributes\n]);\n  . I assume you've already determined how to send an email.\nSo just send the value of $password as part of that email.\nhttps://laracasts.com/discuss/channels/laravel/laravel-how-to-send-email-on-new-user-registration-only-to-admin-email\nhttps://laracasts.com/series/laravel-from-scratch-2017/episodes/19\n. This package doesn't do anything specific to Vue.\nThe answer to your question is general to Laravel/Vue.\nHere are some articles to consider for learning how to bring back-end server logic to the front-end:\nhttps://pineco.de/implementing-laravels-authorization-front-end/\nhttps://stackoverflow.com/questions/45868924/using-laravels-gate-authorization-in-vuejs\nhttps://vuejsdevelopers.com/2018/01/08/vue-js-roles-permissions-casl/\nhttps://vegibit.com/how-to-use-vuejs-with-laravel-blade/\n. In what way are you wanting to use the data obtained through the inverse relationship?\nAnd, can you clarify how the permissions/roles features of this package are related to your question?. @ediblemanager Did you sort out what you needed?. You could create a permission for download-documents and assign that permission to whatever users you wish, and then control their access using @can('download-documents')\nThere is no other \"tagging\" concept in this package.. You can get a collection of all roles assigned to a user via $user->roles relation. Then filter out the ones you aren't interested in.. @paulcanning wrote:\n\nthe dump is empty, despite the user having an assigned role.\n\nWithout more context of your app and how you are running that code, it's hard to give a concrete answer. Lots of unknowns when trying to respond to 2 lines of code.\nThings to consider:\n- maybe the cache is outdated because you assigned the role with bespoke code instead of calling the provided functions\n- while your example shows an immediate dd() call after querying the User, if you're actually also doing other things in between the lines of code you quoted, maybe the retrieved object needs a ->fresh() call against it to retrieve assignments you've done in the meantime?\n- calling ->getRoles() on $user will run this package's functions to do the actual retrieval, instead of writing your own bespoke code to query things. We will tag a 5.7 compatible release when 5.7 comes out.\nhttps://github.com/spatie/laravel-permission/pull/829#issuecomment-413176994. New release tagged.. I'm not sure what question you're really asking.\nto show permissions, retrieve permissions (lots of examples how in the readme) and display them in your views\nto add or sync permissions to a user, there are also instructions in the readme.. Hmmmm.\nI tried replicating the problem using a tinker session in a basic demo app I have for this package, and get no error on removeRole():\nPHP 7.2.8\nLaravel 5.5.42\nPermissions v2.17.0\n```\ntinker\nPsy Shell v0.9.7 (PHP 7.3.0beta2 \u2014 cli) by Justin Hileman\n\n\n\n$user = App\\User::first();\n=> App\\User {#2894\n     id: 4,\n     name: \"Vernie Runte\",\n     email: \"wintheiser.eloy@example.com\",\n     created_at: \"2018-08-04 03:21:55\",\n     updated_at: \"2018-08-04 03:21:55\",\n   }\n$user->fresh()->roles;\n=> Illuminate\\Database\\Eloquent\\Collection {#2899\n     all: [],\n   }\n$user->assignRole('author');\n=> App\\User {#2894\n     id: 4,\n     name: \"Vernie Runte\",\n     email: \"wintheiser.eloy@example.com\",\n     created_at: \"2018-08-04 03:21:55\",\n     updated_at: \"2018-08-04 03:21:55\",\n   }\n$user->fresh()->roles;\n=> Illuminate\\Database\\Eloquent\\Collection {#2908\n     all: [\n       Spatie\\Permission\\Models\\Role {#2904\n         id: 8,\n         name: \"author\",\n         guard_name: \"web\",\n         created_at: \"2018-08-04 03:21:55\",\n         updated_at: \"2018-08-04 03:21:55\",\n         pivot: Illuminate\\Database\\Eloquent\\Relations\\MorphPivot {#2902\n           model_id: 4,\n           role_id: 8,\n         },\n       },\n     ],\n   }\n$user->removeRole('author');\n=> null\n$user->fresh()->roles;\n=> Illuminate\\Database\\Eloquent\\Collection {#2897\n     all: [],\n   }\n```\n\n\n\nI'd be curious about what your model does differently than this simple demo app at https://github.com/drbyte/spatie-permissions-demo. Oh the joys of polymorphic relations. \nWhen you assign roles (or permissions for that matter) to a user, its model class name is recorded in the pivot table, essentially hard-linking it to that specific model.\nSo, if you assign roles to an App/Models/User' object, it recordsApp/Models/Userin the database, and therefore an attempt to view relations by another object such asApp/Models/Admin/User` will not return those roles assigned to the other object.\nOne way I've gotten around this is by reverting to v1 of this package, which doesn't use polymorphism. It's a simpler relation structure and skips this issue because it assumes only one type of user model. This has its pros and cons.\n(Note: if you wanna give it a try, revert and delete the migrations for the v2 and rebuild all your roles/permissions assignments fresh in v1 -- the 2 schemas are incompatible with each other.). @laxsmi,\nA few questions:\n- Can you point me to your research which suggests high demand for this feature? (because I'd like to investigate their specific use-cases to find a solution).\n- What about v2 of the package do you want/need that v1 doesn't offer?  One big difference is the polymorphism, but of course that's also the cause of the main pain point this discussion is about\n- Can you share code for a project where we could collaborate or at least discuss with specifics?\n. $user->roles->pluck('id');. You can copy the code for that method from the trait into your model and customize it there. \n\nOn Aug 29, 2018, at 4:56 PM, Enrique Berm\u00fadez notifications@github.com wrote:\nHi! I want to extend the assignRole method so I can work with new field on my model_has_role table and this field would be: code. Why so? Well, if I do this:\n$user->assignRole('writer');\nIt will throw an error because the field code can't be null. Is there any way to change this method to work like this:\n$user->assignRole('writer', 'TT000');\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. You can add your own new relation for roles which adds a custom withPivot declaration in order to retrieve those extra fields.\n\nRefs: https://laravel.com/docs/eloquent-relationships#many-to-many\nhttps://stackoverflow.com/questions/26566675/getting-the-value-of-an-extra-pivot-table-column-laravel\nhttps://laracasts.com/discuss/channels/eloquent/how-to-access-data-of-a-pivot-table\nhttps://laracasts.com/discuss/channels/eloquent/laravel-52-getting-a-pivot-table-additional-attribute. Oops - you're right. The README is outdated. \nNow you just change\ndiff\n-$table->unsignedBigInteger($columnNames['model_morph_key']);\n+$table->uuid($columnNames['model_morph_key']);\nand change the model_morph_key in the config file to model_uuid or whatever you want the column called for consistency.\nREADME is getting updated.. I would use a Gate::before() call, similar to https://github.com/spatie/laravel-permission/wiki/Global-%22Admin%22-role\nYou could do it by registering a new one, or by simply expanding the conditions (insert another if case before the one that does the db checks) of the one in the wiki example.. For v2 of this package, since your app is using only the api guard, changing the guard position in the config file is sufficient. Otherwise you must specify the guard in every request and every affected model.. Two parts required:\n\n\n(as you've done) In the constructor or the route.\neg https://github.com/drbyte/spatie-permissions-demo/blob/master/app/Http/Controllers/HomeController.php#L18\n\n\nAdd the middleware to your app so that it knows how to resolve role:\nhttps://github.com/drbyte/spatie-permissions-demo/blob/master/app/Http/Kernel.php#L60\n. Currently v2  of this package works best when a model is associated with 1 guard, specified as $guard_name in the model. That means if you have a need for multiple guards, it is easiest to create a new model to associate with it.\n\n\nBut most apps don't require separate permissions per guard. If that's also your case, you could use v1 of this package.. That sounds like your cache table's key and/or value fields might be too short.. > If you look at the SQL query, the value seems to be cut off at the first '.\nYes, I noticed that. \nSounds like a Laravel-Cache-vs-PostgreSQL bug.  \nI don't see anything where this package is doing something to interfere with simply letting the framework handle all the aspects of querying and serializing in/out of the database or caching system.. You've identified Users has being a certain \"type\". And it sounds like the \"type\" is static (ie: a User can only be EITHER a guest or standard or premium.\nDo Entries also classify as a static \"type\"?  ie: when a Premium user posts something, is that \"post\" considered permanently \"premium\"?. Okay, so if a Post can always only be one \"kind\" of post, and viewers are allowed to see things based on that one status, why not just put a field in your blog Posts model denoting post_type, and then simply use Model Policies to enforce \"who\" can read which kinds of posts. The Policy can do the checking about whether the active user has rights to do the kind of reading based on the Post model entry's type.. Okay, conceptually I'd call your post-levels \"enums\" (not in the context of storing them as a database \"enum\" field-type though).\nTo code for that in Laravel you could just use some class-constants, but instead I wholeheartedly recommend the Laravel Enum package by @bensampo :\n- https://laravel-news.com/laravel-enum-package\n- https://github.com/BenSampo/laravel-enum\n- https://sampo.co.uk/blog/using-enums-in-laravel\nI suggest: \n1. Use the Enum package concepts to store the post-type in each Post record.\n2. Then use a Post Model Policy to read the Enum value of the record and check against the User's allowed permissions. This keeps Controllers cleaner.\nHere's an example of adding a simple Model Policy which implements this Permissions package:\nhttps://github.com/drbyte/spatie-permissions-demo/pull/2\nAnd here's an update to show how to use authorize() calls in controllers instead of relying on authorizesResource. You can use either concept; this just shows that it can be done either way.\nhttps://github.com/drbyte/spatie-permissions-demo/commit/aa90b3820020b476265a2f215a87f442bec19040. When you add the HasRoles trait to your User model, it will add the HasPermissions trait.\nThe HasPermissions trait defines the getAllPermissions() method:\nhttps://github.com/spatie/laravel-permission/blob/63ef871cf85d664babc4556c6e5b826cda9f141e/src/Traits/HasPermissions.php#L245-L251\n... which refers to $this->permissions, which is from the permissions() relationship also defined inside the HasPermissions trait:\nhttps://github.com/spatie/laravel-permission/blob/63ef871cf85d664babc4556c6e5b826cda9f141e/src/Traits/HasPermissions.php#L41-L50\nIf you're getting \"Undefined property: App\\\\User::$permissions\" errors, then it would seem that you've done something which overrides the code or inheritances supplied by the traits in this package.. Shouldn't that be:\ndiff\n-return ($request->user()->roles());\n+return ($request->user()->roles);. I think more details are needed. \nWhat are the two systems? \nHow do they relate to each other? \nHow do they interact?\nHow are permissions used on each?\nWhat is the business problem you\u2019re trying to solve? (The background which prompted your question)\n. Yes. There are normal Laravel relationships which you can query:\n```php\nuse \\Spatie\\Permission\\Models\\Role;\n$role = Role::findByName('insert role name');\n$permissions = $role->permissions;\n``. The simplest would be to use blade's@unless` directive\nblade\n@unless($user->hasRole('production-only'))\nAlternatively we could consider adding an unlessrole directive to this package.. v2.19.0 released with @unlessrole directive. Thanks!. $role = Role::findByName();\nor \n$role = Role::findById();\nthen since it's just an Eloquent model, a normal Eloquent command to delete will work:\n$role->delete();\n. In your Eloquent model for App\\User, what is the column-type for your id field? \nThis package expects it to match the model_id type of the model_has_roles table.. What is the value for model_morph_key in your config/permission.php?\nhttps://github.com/spatie/laravel-permission/blob/master/config/permission.php#L83. No, it should be model_id.\nThis is puzzling. I think you've changed something in your App\\User model that's causing it.\nIt's hard to troubleshoot this without seeing your code.. Can you share the code where you're trying to assign and sync roles to users?. You can't sync something to a model that hasn't been persisted yet.\nYou must call $user->save() before you sync or assign.. Since the error message says PermissionMiddleware::handle() isn't receiving correct parameters, and you've defined permission to be the middleware that calls it, you need to look at everywhere your app which attempts to use the permission middleware and make sure you're actually passing the name of permission you want the middleware to check for.. @freekmurze @AlexVanderbist \nAre you okay with this just ignoring the sync? Or prefer to create and throw another exception which explains that the sync hasn't been done?. @futzlarson See version 2.19.2. Since it's just a typical Laravel model, you just need to load the relations if you want to query them.\nVarious ways to do that, but in your context the following will probably suffice:\nphp\n$role = Role::findById($id);\n$role->load('permissions');\n. The @can and @role directives work on the currently authenticated user, determined by the configuration of your app: If you are not using \\App\\User then you need to specify your model in config/auth.php.\nNote: You did not need to add your table name to the config/permissions.php file.. (Edited after re-reading your post a few times)\nYes, the way v2 of this package works, you must either define a specific guard for a specific model (meaning multiple models if using multiple guards), or if you are really only using one guard, then make it be the first in the config array.\nThe trait collision would need to be resolved in your app if you wish to use that model with this package.\nIf this issue is fixed for you, then you can close it by clicking below.. Agreed. I've updated the readme to add additional clarity.\nIt's unfortunate that this multiple-guards complexity exists (wish we'd done it differently), but changing it is a BC break so we're waiting to a major release before tampering with it.. I cannot duplicate this, which suggests it's something unique to your application.\nCan you share your code and config?  config/permission.php, config/auth.php, config/app.php, app/User.php, and any code related to your uses of Auth::user()->hasPermissionTo('permission_name'). That appears to be a problem with your site and/or Backpack, not this package.\nAccording to the error message, whatever user you're logged in as doesn't have the necessary permissions assigned.. Use v1 of this package, not v2.. Since composer has already installed some packages for newer dependencies, try deleting your composer.lock file and your vendor directory first.\nThen since you've said you need to only support old stuff, force it to only load packages compatible with PHP 5.6 by running: composer config platform.php 5.6.38\nThen run composer install and/or composer require spatie/laravel-permission:^1\nIf it's still not working, please post your composer.json file contents.. @hamid80386 wrote:\n\nAnd in Laravel 5.6.38 everything are ok, but in 5.4 we have error\n\nI just created a fresh Laravel 5.4 application, installed this package, created a role and assigned your users_manage permission to that role, and then created a user and assigned that role to the user. Then I put your if (! Gate::allows('users_manage')) { return abort(401); } into the index method of my HomeController, and visited the site with the browser. It properly displayed the home page without error.\nThus I conclude there is not a problem with this package, but rather the problem is in your app.. If it's related to .gitignore or .env or vendor directory, those are all things related to your app or how you've installed your app code on your home computer. \nThey are not indications of a problem with this package.\nIf you believe there is a problem with this package, please provide complete code samples that can be put onto a fresh Laravel install in order to consistently recreate the problem. And/Or provide tests which clearly demonstrate the problem. \nWe will be happy to address a problem that can be recreated using the details provided.. @hamid80386 wrote:\n\nit seem if a permission does not exist in database , we'll get this error.\n\nI tried adding if (! Gate::allows('users_manage')) { return abort(401); } into the HomeController@index method in this simple demo package, where users_manage does not exist, and it properly throws a 401 ... but no App\\Role error.. Interesting. \nThat suggests something strangely amuck with your app or environment. Maybe a composer problem. \nAs Freek said, not an issue with this package. \n. There may be additional incompatibilities as well, since Twill has its own \"roles\" logic for users, managed by Enum properties: https://github.com/area17/twill/blob/1.2/src/Models/Enums/UserRole.php\nThe Twill folks are fairly responsive. You may be able to get them to fix whatever is conflicting if you report a clear set of instructions on how to create the problem on a new project.. Thanks. Do you envision something like this? \ndiff\n    public function getPermissionsViaRoles(): Collection\n    {\n+        $roles = $this->load('roles', 'roles.permissions')->roles;\n+\n+        if (! $roles) {\n+            return collect();\n+        }\n+\n-        return $this->load('roles', 'roles.permissions')\n-            ->roles->flatMap(function ($role) {\n+        return $roles->flatMap(function ($role) {\n                return $role->permissions;\n            })->sort()->values();\n    }. No, it should have been closed.. @can is part of core Laravel's Gate features.\nThis package registers authorized permissions with the gate, and then when you call @can it simply fires Laravel's gate callbacks to test for the permission.\nhttps://github.com/spatie/laravel-permission/blob/5415d29d54d15985b8cf56fef30d7514c8608309/src/PermissionRegistrar.php#L39-L46\nMaybe your application code is conflicting due to method/permission names?\nDo you happen to have a Policy defined which also provide an edit check?. This package associates role/permission models with other (usually User) models using polymorphic relations.\nBut it doesn't link in a 3rd relationship such as Company. \nHowever, you are free to extend the package code to link in other relationships as you wish.\nAlternatively if your application supports it, having a different User object/model per-company could give you quick implementation with minimal code complexity.. @dennis1502 did you sort out adding the additional column into your custom code?. See \nhttps://github.com/spatie/laravel-permission/issues/888#issuecomment-426207657. Hmm, I haven't run into this.\nUsually when something's working differently when queued it means some dependency is not provided to it, particularly something that needed to be serialized when it was queued, or some property hasn't been properly set/declared.\nI wonder if it's an issue with Nova? These may be useful to help you debug:\nhttps://github.com/laravel/nova-issues/issues/736\nhttps://github.com/laravel/nova-issues/issues/194. I haven't. But I don't see why you couldn't. \nKeep in mind: this laravel-permission package provides authorization resources, in conjunction with Laravel's own authorization Gate infrastructure.\nThe jwt-auth package provides authorization, which is different.\nThey should be able to co-exist fine.. Are you using this package to actually grant different permissions based on the guard? Or are your app's roles/permissions guard-agnostic?\nI usually find that people actually need no different roles/permissions at the per-guard level, and the only reason they're specifying guards at all is because v2 of this package kinda forces you into it. \nIs that true for you too? \nNote: v1 of this package doesn't force anything about guards, but is less polymorphic in that it only works with the primary user model specified in config('auth.model').. > But I didn't yet understand regarding my first question, if we specify the guard_name in model, then how it can be shared between all guard?\nThe only way I've done that is create a separate model for the different guard.\n(This package uses the guard-defined model as first priority, overriding any middleware guard or config guard. Changing that to make the config setting override it is a breaking change which we won't do in a minor point release. And in fact we're largely decided on dropping guard-specific rules inside this package since they can pretty much be controlled at the app level without requiring dynamic control using db storage. Hence my questions above.). v2 guard lookup currently looks to the model's guard_name property, with fallbacks down to finally the first available guard in your config array of guards (not the one listed as \"default\"). Null doesn't disable this lookup.\nSo, wherever you don't specify a guard when doing a permission check, it does the lookup according to that pattern I just described.. Or better yet, instead of linking up a bunch of permissions and having to maintain that list for a super-admin, use a Gate::before policy hook as explained at: https://github.com/spatie/laravel-permission/wiki/Global-%22Admin%22-role. > Is missing in doc example with guard_name on [permission] middleware route.\nWell, it's missing from the docs because there's no option provided for that currently.\n. This package doesn't use the auth middleware. . A more common practice for super-admin handling is to NOT assign every permission to the super-admin, but rather to use the Gate to identify a super-admin by their role, and treat them as though they have every permission. This can be done with a few lines of code like this: \nhttps://github.com/spatie/laravel-permission/wiki/Global-%22Admin%22-role. givePermissionTo() can accept a collection of Permission objects. So instead of assigning one-by-one, you can pass a collection, which will skip some of the lookups it has to do.. > I went from ~400 gate checks to 1 when I switched out my blade directives.\nIf you don't use the @can Gate directive, then yes your gate checks will go down because you're completely bypassing the Gate.\nThis package currently registers a Gate callback for permission checks. The query which feeds the results of that is cached. But the calls to the gate itself are not cached.. Thanks!. This package is not currently built around storing the data that way.\nYou've posted in multiple other issues suggesting that you want json instead. You're welcome to use your own fork of the package which flattens the storage to drop the polymorphic relation and store json text instead.. You posted in https://github.com/spatie/laravel-permission/issues/250#issuecomment-292992729 suggesting that you have the same root cause as the other person posting there: your model contains a roles property (or db field).\nIf your model contains a roles property, then $this->roles will always contain what your model-property(table) has, and not what this package's polymorphic relation has.\nIf you want to use this package, your model must not contain a roles or permissions property or fields in the model's table.. Thanks!. @josepostiga When you worked on this, did you intentionally use || in the middleware test, instead of && ?\nI'm thinking that if the meaning of \"role or permission\" means \"any of the passed roles or permissions is required\", then the does not have any of the roles OR does not have any of the permissions logic should actually be AND in order to trigger the UnauthorizedException. \nOr am I missing something here?. Ya, there are mixed scenarios: if ALL roles AND ALL permissions are NOT matched, then the OR operator properly gives a 403.  But an AND operator lets it pass with a 200. :(. Great. \nNOTE: There's a related bug that needs fixing in your original PR:\nTo see it, in your MiddlewareTest, add:\ndiff\npublic function a_user_can_access_a_route_protected_by_permission_or_role_middleware_if_has_this_permission_or_role()\n    //\n    //\n        $this->testUser->removeRole('testRole');\n+        $this->refreshTestUser();\nThis was exposed by work I'm doing after merging #916 to refresh the relations after remove as well.. FWIW I'm not bothered by the use of the try-catch of PermissionDoesNotExist in the interim until #814 goes in.. Thanks!\nCloses #886 . Thanks!\nCloses #904 . $role->permissions. This package only supports soft-deletes at the User model level, not the role/permission level. \nThere are no plans to change this.\nYou will need to override the various trait methods to add your custom logic for handling soft-deletes safely.. Haha @4unkur I can spit a mean rhyme, but I'm not the same guy. :). Why are you using 200 instead of 191?\nhttps://laravel-news.com/laravel-5-4-key-too-long-error. Not with v2.\nHowever, with v1 of this package, there is no differentiation between guards. I use v1 in a few projects for this reason.\nBut keep in mind that v1 also ties directly with a User model, not polymorphically to multiple models.\nAlso, v3 aims to be guard-agnostic, but also retain the polymorphism that v2 supports. There's no ETA set yet for v3 release.. I once had that happen on a project that had a package installed that had done something to interfere with registering of directives by the service provider. \nI don't recall now which package it was. However, you may wish to review all the ways in which your app is different from a fresh Laravel install, including which packages you've added.. > Package htmlmin/htmlmin was causing issue with blade optimization.\nThanks for posting the resolution!. After assigning the role, your in-memory $user model is stale/outdated.\nYou need to refresh it with \nphp\n$user = $user->fresh();. Yes, but in the scenario presented earlier, there were no other relations loaded, so fresh is sufficient. One could use refresh() if that met their needs more thoroughly.. You could clone that role_or_permission middleware into your app namespace and add the check to it. Then register your custom middleware, with a new name, and use that new middleware in your route.. Thanks!. Note: with further testing I've discovered that we probably should have also done the reload on \"remove\" operations as well, for parity. But that then makes some middleware tests fail.. $role->permissions is a standard BelongsToMany relationship, and therefore will give you all the permission (object records) associated with the given $role.\nSo, you could write your own gate rules to test a role-permission relationship independent of a model being associated.\nBut, this package doesn't provide any commands for doing that, so it will need to be done inside your own app code.. Thanks!\nI've updated it slightly to simplify the code by using an early return.. You can use the role scope provided with the package:\nphp\n$admins = User::role('Admin');. There are a few ways, but perhaps the simplest is to just use Laravel's collection methods to filter out the ones you don't want:\n```php\n// $users = \n// $admins = \n$users = $users->reject(function($user) use ($admins) {\n    return $admins->contains($user);\n});\n``. The code I posted above will replace$userswith the original values in$users, after removing any that were in$admins`.\nYou can do the same for other roles or reasons. It's just regular Laravel Collections stuff.. Ya, that newly contributed role_or_permission middleware probably needs some more work, since you're hitting a case it wasn't primarily designed for (permissions not named the same as the role you're authorizing against).\nA much better approach is to use a global Admin role detector so you can stop always checking for admin role in every middleware check. Instead you can simply use the permission middleware.. Thanks.\nWhat's the intended outcome if ALL roles-and-permissions passed to this middleware don't actually exist? . Hi @swerwajod \nDoes your app need to be assigning and using specific roles \"per guard\", in a db-stored-dynamic manner?\nie: role \"editor\" has different responsibilities for the \"team\" guard than it does for the \"office\" guard, and where those editor-to-team and editor-to-office relationships need to be alterable by the end user and not coded into the app?\nOr is the guard implementation at this level something that could be merely a \"pass-thru\" if this package didn't define specific roles per-guard?\nI'm asking because your answer affects the response to your question :)\n(And because almost every app I've encountered has no need to define roles/permissions \"per guard\" in a dynamic way like this package \"forces\" one to do.)\n. Okay, I think I understand your situation.\nTo get a collection of all roles with guard names, you could just access the Eloquent model directly: \nSpatie\\Permission\\Models\\Role::all()\nAnd as far as a particular User, given the following scenario: a user has been assigned 3 roles, associated with 2 different guards.\n... running the following in tinker gives this output:\n```\n\n\n\n$roles = $user->roles->pluck('guard_name', 'name')\n=> Illuminate\\Support\\Collection {#2914\n     all: [\n       \"writer\" => \"web\",\n       \"admin\" => \"web\",\n       \"apiRole\" => \"api\",\n     ],\n   }\n```\n\n\n\nHope that's helpful.. You could set it in a session variable, and define a Gate rule to check against that value.\nDo you mind explaining the bigger picture of how/why this temporarily permission works in your case? Maybe there's an even better solution?. Yes, that's exactly why you'd use a session variable.\n\nAuthServiceProvider\nDeclare a can permission which checks both the session var and the user's normal permissions. Then in your app, always this this permission (not the one in the \"permissions\" db).\nGate::define('my-permission', function ($user) {\n    return ($user->can('my-db-permission-name') || session('key-name') == 'truthy-value');\n});\n\nLogin action\nSet the session var:  session('key-name', 'truthy-value');\n\n\nApp logic\nAlways test against my-permission and not my-db-permission-name.\n\n\nhttps://laravel.com/docs/5.7/session. Thanks!. @fullstackfool Thanks for this.\nI think your questions/areas requesting more feedback all have merit.\nI'm debating whether to tag a new major version release for them. \nI want to test it a bit before making such decisions though.. Additional questions that come to mind:\n- Should there be more tests added to cover testing the tagging features?\n- Should the duplication of code for caching be consolidated somehow?\nEdit: \n- I see the tag() call is indeed present in the PermissionRegistrar::getPermissions method.. Thinking aloud: Should we make it assume a taggable cache being a first-class citizen? ie: refactor to stuff the less-wanted behavior inside the \"if\" (\"if it isn't taggable, then do X\"). 1. getTaggedPermissions vs getUntaggedPermissions ... if $params is null, aren't they identical (ie: the when would be skipped, thus leaving them the same)? Couldn't there be just one version of this? It wouldn't need to be a separate method then either. \n\nIn your revised forgetCachedPermissions(), you removed the ->tags() call in the flush. Was that intentional? is that because of your changed declaration of $this->cache in the constructor?\nreturn self::$cacheIsTaggable ? $this->cache->flush() : $this->cache->forget($this->cacheKey);\n\n. Turns out we can't just check for when($params). Needs to also test for taggable.\nThis seems to work better across various cache stores: \n->when($params && self::$cacheIsTaggable, function ($query) use ($params) {\nFor the tag() thing, I think what you're proposing is fine. I was just trying to follow the bouncing ball while comparing diffs. I don't think it's wrong (it works); it's just different than what you'd done before, so I wanted to be sure I followed your thinking. . > The naming of checkHasPermissionTo() inside HasPermissions could be confused with the newly added method checkPermissionTo()\nI wonder if renaming the new checkHasPermissionTo to uncachedHasPermissionTo would suit. It's more explicit on its intent so doesn't require documenting.. > Is the current cache busting effective enough for these changes? I reviewed the tests and ran through some real-world examples and had no issues, but a second opinion would be great.\nI think so. \n\nThe changes to the config could be breaking\n\nYes, they are. Especially since you're referencing the config values as array elements. If those are missing, there will be errors. The use of the array is speedier than calling the config() helper repeatedly, but it prevents the ability to declare any fallbacks.\n\nClutter. I'm concious this has added a fair bit of new methods and checks, and I don't want to clutter up the package.\n\nYa, my eye is on the many added cache-related helper methods in the HasPermissions trait. I find myself itching for a separate class for cache handling, but wonder if they fit in the Registrar just as well. Unfortunately since they're all context-relevant to Permissions, they do also fit equally well there in the trait ... it's just that it's getting so big .... What if we downgrade slightly and undo the breaking change on the cache config file.\nThen we could merge as-is without tagging a major version.\nThen we could extract things along with the breaking changes?. A couple nitpicks with the posted code today:\nCan't return bool here. Returns void.\npublic function forgetCachedPermissions(): bool\n\"and\" should be \"an\":\n* Get and instance of. >are you sure we can't add the return type here?\nI got errors while executing, saying \"return type bool expected, void received\".. While looking at this proposed update I realized that flattening the cache config introduces more complication for upgraders in the future, because here we're adding 2 new keys which would later get relocated. And that's all to save the pain of referencing 1 key that we're trying to relocate now. Your original approach was indeed the better one, and I went in search of trying to figure out a way to minimize the pain. \nIn the end I stumbled on a great discovery:\nhttps://github.com/spatie/laravel-permission/blob/74eea48352d9d5931a034054814f818efaca5167/src/PermissionServiceProvider.php#L48-L51\nThis auto-merges the configs, which ends up adding the missing values from the default config stub.\nGiven that this avoids throwing errors due to missing keys, I'm satisfied with tagging a non-major release.  There's the side caveat that people who have customized the expiry time will find it being ignored in favor of the value inside the cache sub array.  But we could mitigate in the constructor by doing a config('old-key', config('new-key')) lookup instead of just new-key.. > A nice solution. The only catch I can find is that it uses array_merge, so only merges one level deep. Anyone declaring the cache key in a local permissions config will need to ensure they declare all the sub-keys\nArgh. Good catch.\nIf we add a default in our use of the config() helper, that should provide a reasonable safety net, since in this case the keys we're adding are new.\nI'll document the new keys in the release notes as well, as a help to bring awareness to the matter.\n. In both of your code posts above you had declared a $cacheMinutes property in PermissionRegistrar. What if we continue with that and read it in the trait? Either with a getter or by using a class constant like the $cacheIsTaggable.\nWhile we'd still need to do the config() call in hasPermissionTo, we could drop it in getAllPermissions.. Does it make sense to sort out the duplication in a separate PR?  Or does fixing it here have a material benefit?. I ran it through a bunch of other cache tests I have for testing array/file/database/redis, and they all pass.\nIn reviewing the code there's just the one config default param to fix, and then I think it's good for merging!\nDid you wanna squash it down into 2 or 3 commits (to preserve authorship of @ klincheg which you were kind enough to do!) instead of 20 commits?. Ya, 4 is great!\nReviewing now.... Looks great! \nThanks for all your work on this!. > It seems when ever the storage/cache/data/85/ file is cleaned\nWhat is doing the \"cleaning\" of files in your storage folder?. Well, the problem could be in 4 places:\n- how your server's caching is configured\n  Maybe you should switch from \"file\" caching to \"database\" or \"redis\"?\n\n\nyour application code\n  It's possible that you've got something in your code that is triggering the caching to happen against wrong data.\n\n\nthis package\n  Without having a complete copy of your application code in order to use it to run new tests against this package, I'm inclined to think this package isn't the problem. All its tests are passing, even when run against multiple caching drivers.\n\n\nserver deployment\n  Maybe something is changing the files on your server, when they shouldn't be touched.\n. Ya, it seems like something odd on the server.\n\n\nThe package does delete cached permissions on save, but rebuilds them again on the first query.\nAgain, switching from file-based caching to a different cache driver may reveal something useful in your debugging process. Instead of file, try array. Then you can try database if you create the cache table in the db (run php artisan cache:table to create a migration for that table). If you have redis on your server, you can install predis/predis with composer and change to redis for your cache driver.\nYou didn't mention which Laravel version.\nWhat's the content of your composer.json?. I suspect something wrong in your app. \nI just created a fresh application using Laravel 5.7, added your seeder plus some dump() statements to show that the seeder works, and it works without errors:\nsh\nshell> ~/Sites > laravel new seedtest\nCrafting application...\nLoading composer repositories with package information\nInstalling dependencies (including require-dev) from lock file\nPackage operations: 72 installs, 0 updates, 0 removals\n//\nApplication ready! Build something amazing.\nshell> ~/Sites > cd seedtest\nshell> ~/Sites/seedtest > php artisan make:auth\nAuthentication scaffolding generated successfully.\nshell> ~/Sites/seedtest > composer require spatie/laravel-permission\nUsing version ^2.25 for spatie/laravel-permission\n  - Installing spatie/laravel-permission (2.25.0): Loading from cache\nPackage manifest generated successfully.\nshell> ~/Sites/seedtest > cp .env.example .env\nshell> ~/Sites/seedtest > subl .env #specified db=sqlite\nshell> ~/Sites/seedtest > touch database/database.sqlite\nshell> ~/Sites/seedtest > php artisan vendor:publish\nCopied File [/vendor/spatie/laravel-permission/config/permission.php] To [/config/permission.php]\nCopied File [/vendor/spatie/laravel-permission/database/migrations/create_permission_tables.php.stub] To [/database/migrations/2018_11_10_053446_create_permission_tables.php]\nPublishing complete.\nshell> ~/Sites/seedtest > php artisan make:seeder InitialRoleSeeder\nSeeder created successfully.\nshell> ~/Sites/seedtest > subl database/seeds/InitialRoleSeeder.php ## pasted in code posted by @matheparet and added dump statements\nshell> ~/Sites/seedtest > subl database/seeds/DatabaseSeeder.php  ## specified InitialRoleSeeder as the class to run\nshell> ~/Sites/seedtest > php artisan migrate:fresh --seed\nDropped all tables successfully.\nMigration table created successfully.\nMigrating: 2014_10_12_000000_create_users_table\nMigrated:  2014_10_12_000000_create_users_table\nMigrating: 2014_10_12_100000_create_password_resets_table\nMigrated:  2014_10_12_100000_create_password_resets_table\nMigrating: 2018_11_10_053446_create_permission_tables\nMigrated:  2018_11_10_053446_create_permission_tables\nSeeding: InitialRoleSeeder\nIlluminate\\Support\\Collection {#836\n  #items: array:4 [\n    \"User\" => \"web\"\n    \"Staff Basic\" => \"web\"\n    \"Manage Users\" => \"web\"\n    \"Manage Roles\" => \"web\"\n  ]\n}\nIlluminate\\Support\\Collection {#860\n  #items: array:11 [\n    \"User: View\" => \"web\"\n    \"User: Delete\" => \"web\"\n    \"User: Delete Own Account\" => \"web\"\n    \"User: Update Others Profile\" => \"web\"\n    \"User: Update Roles\" => \"web\"\n    \"User: Suspend\" => \"web\"\n    \"User: Force Verify\" => \"web\"\n    \"User: Impersonate\" => \"web\"\n    \"User: View Roles\" => \"web\"\n    \"Role: View\" => \"web\"\n    \"Role: Manage\" => \"web\"\n  ]\n}\nDatabase seeding completed successfully.\nHere's the code I added to your seeder:\n```diff\nclass InitialRoleSeeder extends Seeder\n{\n    /\n     * Run the database seeds.\n     \n     * @return void\n     /\n    public function run()\n    {\n//\n//\n//\n        $role = Role::create(['name' => 'Manage Roles']);\n        $role->givePermissionTo('Role: Manage');\n\n$roles = Role::all()->pluck('guard_name', 'name');\n$permissions = Permission::all()->pluck('guard_name', 'name');\ndump($roles ,$permissions);\n    }\n}\n```\n\nI suspect something else in your app is conflicting.. Yes, one thing to remember: seeders are generally designed to be run once. Usually running them again requires purging the database first. Such as for running tests, or for initial deployments.\nGlad it's sorted out.. Thanks. I think I'd start by adding some extra logging to various stages in the assignRole function:\nhttps://github.com/spatie/laravel-permission/blob/master/src/Traits/HasRoles.php#L88-L132\nTemporarily editing the code directly in the vendor folder would work for debugging, however, remember that a composer update will wipe out those changes if composer has an update for this package.. @mgsmus I did some testing in a local app here and can't recreate this symptom.\nI'm curious what you discover in your debugging.. This package should be auto-merging missing configs (in memory, not into your config file), if not found in your config file. \nAre you saying that if that config entry is missing then your problems exist, but putting it in resolves the matter?. Permissions and Roles can be given names that are strings.\nYour app can apply other logic around enforcing limits or other rules based on the name.. This package provide permission/role authorization based on comparing the string name of the requested permission against the string name of the permission in the database.\nIt does not provide any means for interpreting/converting it to some other dynamic value.\nIf your permission name is limit = 5 then this package will allow you to test for that permission using various approaches, such as:\n- $user->can('limit = 5')\n- blade `@can('limit = 5')\nYou could create several permissions with different numbers on them, like:\nlimit = 1\nlimit = 2\nlimit = 5\nlimit = 10\nAnd then your app could check using combined strings like:\n- $user->can('limit = ' . $val)\n- blade@if($user->can('limit = ' . $val))`\n. Interesting scenario.\nReason: The can call (and your global admin Gate rule) is handled by Laravel itself, and hasAllPermissions is handled by this package.\nThe can function only works with a single rule-name at a time.\nOptions:\n- if your app has only this one instance of checking multiple permissions, I'd just do it as you posted.\n- if the situation is common in your app, perhaps it warrants implementing a model Policy, which moves all the permission checks into one place.\n- alternatively you could write a Gate helper method on your User model to check for \"many\", like the following:\nphp\npublic function can_all (array $abilities_needed = [], $model)\n{\n    foreach($abilities_needed as $ability) {\n        if (Gate::denies($ability, $model)) return false;\n    }\n    return true;\n}\n(example taken from a Laracasts post ). Another alternative, in the rare likelihood that that part of your app could be controlled by middleware, is to clone the PermissionMiddleware.php and add a HasAll lookup combined with the can_all mentioned above.. Sorry, I'm unable to recreate the problem you're reporting. \nPlease provide code examples including your routes and defined gate rules and AuthProvider code.. @fullstackfool do you have any thoughts on the best approach for both things requested here? . A few observations:\n\n\nHaving your server flush the cache before its entries have properly expired sounds like a mismatch in strategies. I'm sure you have your reasons, but I don't see why that's an issue with this package.\n\n\nI've pushed PR #940 which allows you to specify a separate cache driver by indicating which configured cache.store you want it to use. Please test whether it solves your problem.\n\n\nNote that using array for the cache driver effectively expires the cache immediately after the current request.. v2.27.0 has been released, which contains the ability to specify a cache driver\n. Can you explain the reason why you're using Laravel 5.5 ?\nAre you now adding Permissions support to an old app? Or are you working on a new app but chose an old version of Laravel?. I've tested by installing a fresh copy of Laravel 5.5 and then adding this package to it. It gives no errors about the Route::macro() call. Thus I believe your problem is something inside your own app.\nThis package assumes that your app resolves a compatible instance of Illuminate\\Routing\\Route, so perhaps the error you're getting indicates that you've bound a different incompatible instance of Route, either in your app or in another package you've installed.\n. I had trouble creating the problem too. \nFeel free to re-open with additional details if more help is needed.. Ya, that or I've seen some prefer this format:\napp()[\\Spatie\\Permission\\PermissionRegistrar::class]->forgetCachedPermissions();\nApologies for the copy/paste error in the readme - it's been updated.. Thanks!. A couple references which may help you:\n- You will need to alter the migration\n- Set the model_morph_key in your config/permission.php file to match your custom field name\n- While there have been code changes in the package since this discussion, you may find it helpful to your needs: https://github.com/spatie/laravel-permission/issues/793. Thanks for posting the link.. I just recreated your app based only on the code you posted.\nFirst, your Seeder doesn't create any Roles, so the error is no role exists with id 2 when your controller runs Role::findById(2).\nBut then updating the seeder to create 2 roles allows the role lookup as well as the permission assignment.\nSo, after fixing the seeder in your app, the permission assignment works.\nAlso worth noting: after updating the seeder class you must re-seed your database. And, since seeders are primarily intended for fresh databases (not adding-to existing databases), it is best to also run artisan migrate:refresh --seed to get a clean database with fresh migrations and fresh seeding.\nYou can see the working app code at https://github.com/drbyte/test3ubeen3/commits/master\nThe README contains all the steps to recreate the app from fresh:\nsh\nlaravel new test3ubeen3\ncd test3ubeen3\ngit init\ngit add .\ngit commit -m \"Fresh Laravel 5.7.14\"\ncomposer require spatie/laravel-permission\nphp artisan vendor:publish --provider=\"Spatie\\Permission\\PermissionServiceProvider\" --tag=\"migrations\"\nphp artisan vendor:publish --provider=\"Spatie\\Permission\\PermissionServiceProvider\" --tag=\"config\"\ntouch database/database.sqlite\nnano .env # edit .env file to set database to sqlite\ngit add composer.json\ngit add config/permission.php\ngit add database/migrations/2018_11_21_160026_create_permission_tables.php\ngit commit -m \"Add spatie/laravel-permission pkg\"\nphp artisan make:seeder PermissionTableSeeder\nnano database/seeds/DatabaseSeeder.php # edit to add new seeder\ngit add database/seeds/DatabaseSeeder.php database/seeds/PermissionTableSeeder.php\ngit commit -m \"Add seeder\"\nphp artisan make:controller MyController\nphp artisan migrate:refresh --seed\ngit add app/Http/Controllers/MyController.php routes/web.php\ngit commit -m \"Add MyController\"\nphp artisan migrate:refresh --seed\nnano database/seeds/PermissionTableSeeder.php #fix seeder to add roles\ngit add database/seeds/PermissionTableSeeder.php\ngit commit -m \"Fix seeder to also create the required roles\". Your problem is in your application. I think your user object isn't being saved.\nI set up a demo project similar to yours and it gave errors about the password not being savable. If for some reason your exception handling is intercepting and ignoring the error, then the assignRole would fail because you'd have a query object instead of a persisted user object.\n. By \"tree\", if you mean you want an array of roles containing sub-arrays of associated permissions, you can get that with a simple Eloquent relation query:\n$roles_with_permissions = \\Spatie\\Permission\\Models\\Role::with('permissions')->get();. There are no plans to add the complexity of tree-traversal to this package.. Thanks.. Yes, you must pass the associative array when creating Roles using an Eloquent call.\nExample from the README:\n```php\nuse Spatie\\Permission\\Models\\Role;\nuse Spatie\\Permission\\Models\\Permission;\n$role = Role::create(['name' => 'writer']);\n$permission = Permission::create(['name' => 'edit articles']);\n``. WithCACHE_DRIVERset tofileyou can't benefit fromtaggedcaching, but theredis` driver supports tagging, where we are able to be more performant.\nHence the difference between the two drivers.\nThe actual policy hits are handled by Laravel's Gate.. Thanks!. Hi @bjuppa ,\nWould you explain your workflow, to help me understand why you're re-publishing migrations?\nI just want to understand your use-case as we consider the right fix.. @bjuppa I think I've got a working solution for this:\nhttps://github.com/spatie/laravel-permission/pull/962/files. I think you'll need to share your application code.\nIn addition to the package tests passing, I just tested it myself with my basic demo app, and it works properly:\n. Can you explain the workflow where you would want this?\nIt strikes me that when one is refreshing the migration that that's also the ideal time to use a seeder, so seeding makes good sense. But your idea comes from another line of thinking: would you share your use case?. > I have an extra migration file that DB inserts the initial default role values.\nThat's an acceptable alternative to using a db seeder. \nBoth approaches can be used, depending on your needs and your overall dev strategy.\nI don't think there's any need to change this package for that.\nA third approach you could use is to create your permissions in a specific test's setUp() method. You can see an example of that here: \nhttps://github.com/drbyte/spatie-permissions-demo/blob/master/tests/Feature/PermissionsDemoTest.php\n(You could also put it in the setUp() of TestCase, to share with all test classes.). This package simply provides a means of doing Authorization checks to see if an action should be allowed.\nSimply perform those checks in your code where needed.. Authentication and Authorization are different things, but they interact with each other all the time in every app, everywhere.\nAuthentication methods include combinations of sessions, JWT, Passport/OAUTH, etc.\nAuthorization methods in Laravel are driven by Gate and Policy rules. This package provides data for the Gate layer, which you can leverage with your own policies, middleware, etc.\nSo, while I've not personally used it with Passport, I don't see why it would have any conflict.\nYou can use Passport for what Passport does, and use this package for what this package does. Your own application code can do the necessary bridging between functionalities.. What is your use-case for this? \nBy saying \"role has many documents through user\", does that mean you're looking for a means of getting \"when I specify a role, I can use the user relationship to find all documents associated with all users assigned to that role\"?\nI'm trying to understand whether you're asking a question about this package specifically, vs a general question about using existing Laravel relationships to do additional lookups?. 2 things you can try:\n\n\nPerhaps first create Super Admin before running assignRole('Super Admin') \n\n\nIf relevant, move your role/permission creation into setUp(), before registerPermissions() is called.. Just to be clear, am I correct in observing that you are creating identical sets of roles and permissions for every guard?\nAnd that if this package were to allow the guard factor to simply pass through to your app and allow the app take care of guard logic, that the roles/permissions would stand as sufficient on their own?\n\n\nI find that the vast majority of apps are in exactly this situation, and therefore v3 of this package will be dropping logic for intercepting and defining guard-specific Authorization activities, and allow the app to handle that part.. Great! I think you'll like the simplification of v3 with guard-specific logic removed.\nWe have a few more things to sort out with it, so unfortunately it's not quite ready to go yet.\nThanks for sharing your suggestion. Fortunately it should become moot when v3 is ready.. I don't know which video you're referring to, but perhaps it isn't guiding you correctly.\nIf you follow the README you'll see that you add the hasRoles trait to your model. In your case you've retrieved an instance of GenericUser, which does not have the trait applied. . Apologies. We should fix that!. In the meantime you could use version 2.25.0 of the package.. The latest, version 2.28.1 should work properly as well.. Thanks for posting this.\nI believe it is a bug, introduced in v2.20.0 with #874.\nWorkaround: If you call $user->save() before calling $user->assignRole() then this bug will not be triggered.. @freekmurze in looking at your comment from #874, I wonder if you have a suggestion for a fix to this bug, which is caused by the registered saved binding (and I wonder if it affects your other project as well):\nhttps://github.com/spatie/laravel-permission/blob/1b5a0631f77d72f06a8949b9e065ba0804ec93a3/src/Traits/HasRoles.php#L121-L126\nHere is a failing test, which I will add to HasRolesTest.php:\n```php\n    /* @test /\n    public function calling_assignRole_before_saving_object_doesnt_interfere_with_other_objects()\n    {\n        $user = new User(['email' => 'test@user.com']);\n        $user->assignRole('testRole');\n        $user->save();\n    $admin_user = new User(['email' => 'admin@user.com']);\n    $admin_user->assignRole('testRole2');\n    $admin_user->save();\n\n    $this->assertTrue($admin_user->fresh()->hasRole('testRole2'));\n    $this->assertFalse($admin_user->fresh()->hasRole('testRole'));\n}\n\n``\n(same problem happens forsyncRoles()andgivePermissionTo()andsyncPermissions()`, so will add equivalent tests/fixes.). This package doesn't touch login credentials.\nI think your problem is somewhere else in your app.\nIf you believe there is a problem with this package, please post all your code so I can set up the same situation here to recreate the problem.. Please provide detailed instructions on how to recreate this problem on a fresh new Laravel install.. Thanks!. Thanks!. Thanks!. Hey, thanks for this.\nI like your suggestion.\nI think we should also apply it to the other middleware, since they have the same limitation.\nSome of them use app('auth')-> instead of the Auth:: facade syntax, but the change is basically the same.\nBut we should also add some tests for this. Are you comfortable writing a test that demonstrates the need for this change?. Certainly!. There's no specific planned ETA, but I was hoping to make some noteworthy progress with some spare time over the holidays.\nThe biggest hurdle is in recalculating the 2nd half of the polymorphism since the guard formerly provided that because it was a hardcoded relationship.\nThat said, if you don't need the forced guard declarations that v2 uses, and don't need the polymorphism, v1 works fine (but it's designed for a single User model per app).. Your post suggests that the Gate is incorrectly resolved, and therefore must be manually retrieved from the Container, and that this is a new problem introduced in 2.26.0\nHowever, the Gate has been being resolved as a dependency injection since v1 of this package, and the gate->before call has been present since 2.0.0.\nIf 2.25.0 works but 2.26.0 doesn't, then it's more likely that you've got something conflicting at the cache layer, not with the Gate resolution.\nSwoole support is not a priority for this package; however, if you want to submit a PR with appropriate compatibility fixes, including passing tests, we will consider it for inclusion.. Closing this because you said your problem is fixed.. Thanks!. Instead of overriding authenticated, shouldn't you be doing it with redirectTo()?\nSomething like:\n```php\n    /\n     * determine the redirect URL after login\n     \n     * @param  \\Illuminate\\Http\\Request $request\n     * @return string\n     /\n    protected function redirectTo(Request $request)\n    {\n        if ( $request->user()->hasAnyRole(['super-admin', 'admin']) ) {\n            return route('admin.dashboard');\n        }\n    return '/home';\n}\n\n``. I've just recreated your app, based on what you posted here, and it works fine, even with theauthenticated()instead ofredirectTo()`.\n\nLogin as Member = redirects to /\nLogin as Admin = redirects to /admin\n(There are other cases not covered here, such as what to do when the user from the wrong role is logged in and tries to go to the unauthorized route, but that's beyond the scope of what you posted about here.)\n\nHere's the entire code, with commits split out for reference: https://github.com/drbyte/permtesting-jpunx/commits/master\nHopefully it'll help you find what else is interfering from within your app.. Yes, simply add the Eloquent relation to your query:\nUser::all() becomes User::with('roles')->all()\nUser::select([]) becomes User::select([])->with('roles'). $user->assignRole adds the additional role to existing roles for that user. It does not remove prior roles.\nIf you WANT it to remove prior roles first, and ONLY give it the new roles, use $user->syncRoles instead.. This package is registered as stable, so it seems your problem is something related to either the composer command you entered, or other limitations by other packages already in your app.\nThe correct installation instructions are listed in the README.. Composer checks your existing app's requirements before adding another package, and if the new package isn't compatible with all the requirements your existing app's composer.json and your existing packages' composer.json rule dictate, then it won't install the new package.\nNormally composer doesn't throw a bunch of exceptions like you're reporting, so either something's wrong with your composer or php setup, or your machine's filesystem permissions, or your app has something in its composer.json which is making composer very confused.\nInstallation of this spatie package is incredibly simple. Here's how to create a new laravel app and add this package to it: \n```php\nlaravel new myApp\ncd myApp\ncomposer require spatie/laravel-permission\nphp artisan vendor:publish\nphp artisan make:auth\n```\nAnd then manually\n- add HasRoles trait to User.php\n- add middlewares to Kernel.php\nThat's it.\nIf that's failing, then you'll need to fix your composer or php or permissions or app.. Hi,\nThanks for your contribution.\nPlease remove the changes you made to PermissionRegistrar, as they are breaking the tests, and would be better as a separate PR anyway.\nIt would be prudent to add tests for your new blade directive as well.. > I'll remove the PermissionRegistrar changes, as that was not intended on this PR.\nTip for future: instead of using master, create a separate branch for each PR, so that other changes you explore don't get accidentally included into the PR.\n. As for naming branches, my suggestion is just to use something meaningful, which indicates context. \nIn the case of this pr, perhaps add-hasanypermission-directive.\nSome people follow the \"git-flow\" naming conventions to varying degrees, where they prefix things with the word \"feature-\". However, in the long run in my experience it has little impact if your commit subject-lines and the PR title are properly explanatory.. Others may have some specific recommendations, but I'll just point out a related post from which you might find some ideas or inspiration: \nhttps://github.com/spatie/laravel-permission/issues/839. For checking multiple roles in blade, the @hasanyrole directive does it.\nblade\n@hasanyrole('writer|admin')\n    I am either a writer or an admin or both!\n@else\n    I have none of these roles...\n@endhasanyrole. @can checks permissions, not roles.\nSo, if @can is working, then in your app you have created permissions instead of roles.. > i have another issue. Gives exception while using\n\nRoute::get('/orders/create', 'OrderController@create')->middleware('role:manager');\nand this error comes\nClass Spatie\\Permission\\Middlewares\\RoleMiddleware does not exist\n\nDid you forget the beginning \\ in front of \\Spatie\\Permission\\Middlewares\\RoleMiddleware::class, when registering the middleware in your kernel?. > I have slash in the beginning of \\Spatie\\Permission\\Middlewares\\RoleMiddleware::class, but still getting this error\nThen I guess you're not using v2 of this package. \nNote that v1 doesn't contain the middleware, but if you read the v1 readme it explains how to create it for yourself within your app and to register it.. Currently when you run composer require spatie/laravel-permission it will give you v2.\nYou can confirm this by looking in the require section of your composer.json. It should say something like:\n\"spatie/laravel-permission\": \"^2.29.0\",. Leave it as v1. \nLook at the v1 README and create your own middleware for it using the code provided:\nhttps://github.com/spatie/laravel-permission/tree/v1#using-a-middleware\n(Upgrading to v2 requires rebuilding all your role/permission data. There's a script to help with that in the v2 readme. But treat upgrading as a separate project. It may not even be necessary. But if you're posting here for help, always mention you're using v1.). You could try changing your v1 middleware like this:\ndiff\n-    if (! $request->user()->hasRole($role)) {\n-        abort(403);\n-    }\n+    $roles = is_array($role) ? $role : explode('|', $role);\n+    if (! $request->user()->hasAnyRole($roles)) {\n+        abort(403);\n+    }. I'm confused. Why not use the built-in public accessor methods getRequiredPermissions() and getRequiredRoles()?. No worries. Thanks for offering your contribution!. Try: \nphp\n    return $this->hasMany(User::class)->role('user');. For sure. \nFYI - that's just a \"scope\". Albeit the logic is a little more complex than you're probably used to. You can see the code for it here: \nhttps://github.com/spatie/laravel-permission/blob/0d2bd2ae84fcff084bb0f73827df985748d87b0d/src/Traits/HasRoles.php#L51-L86. #480 . > But this way seem that have other issue in performance, see #804\nYes. But you'll see there that making that change breaks all the tests.\n\nI see someone are using controller callAction() by overriding it like:\nWhat do you think to define here the permissions?\n\nDoesn't callAction() have to be registered in the controller itself? That feels like the wrong direction for a package to go.\n. Yes that could be done. \nBut I don't think that's a good solution for this package. And I don't think it's the ideal solution to the mentioned problem.\nThat said, thanks for making suggestions though. Other angles of thinking are helpful.. It's in a state of flux, moving towards removing the exception altogether. Fixing either is a breaking change.\nQuestion:\nAre you \"wanting\" the exception to be thrown because you \"need\" it for your app?\nOr are you simply pointing out an inconsistency caused by the fact that hasPermissionTo throws it and thus your app is forced to do something with the exception?. You may have to get creative with middleware, maybe by making your rate-limit detection happen later than it normally does in the default laravel workflow (ie: after you do a lookup of abilities after identifying the user).. This package requires that you add the HasRoles trait to your User model. This trait then automatically also adds the HasPermissions trait, which in turn adds the permissions property.\nTherefore if you're getting Trying to get property 'permissions' of non-object then it would appear that you've got something interfering with this package. Perhaps a different permissions package? Perhaps your User model is not directly extending Laravel's Eloquent model? Or has other traits whose methods are interfering with this package's methods and properties?. I guess something's wrong in your app.\nI just created a demo app for you, which gives no errors for getAllPermissions(): \nhttps://github.com/drbyte/permtesting-marcelo-2605\nYou can see all the steps to create the demo, both in the README and in the commit history.\nI suggest comparing it against the code in your own app to see what's different.. NOTE: since $user->roles and $user->permissions are both ALREADY present because of the trait, you shouldn't be re-assigning them. What you're doing is redundant.. Hi,\nMore context is necessary to investigate.\nPlease explain how to re-create this situation, starting from a fresh new Laravel install. Please list all packages added, and show the code needed to create your custom models and guards in order to trigger this same problem.. Hi,\nThanks for offering a contribution.\nSpatie generally prefers to use non-dated migration stubs, inserting the date only when publishing.\nPlease explain what specific problem you're trying to solve here. What's your workflow which made this necessary for you?. Is this specific to using SQL Server 2014? Does the same happen if you run it against sqlite or mysql?. Thanks for checking.\nI don't have a SQL Server db to test against. \nI do agree that this seems more like an issue at the Laravel level, and not with this package. \nThe migration syntax matches the very same as in the Laravel docs: https://laravel.com/docs/5.7/migrations#foreign-key-constraints\nYou might also want to test against a newer version of Laravel, in case they've fixed an issue there that's not in your 5.5 version.. Good catch. Thanks!. Things that come to mind:\n- how many records are in the table? and in the roles table? and in the permissions table?\n- are the foreign key relationships causing the slowdown? (more specifically, is the relationship forcing a lookup/validation on those tables, and is that what's slow?)\n- are the indexes on the foreign-relationship tables performant? (are there too many? too few?)\nIn your example of inserting (51, 125), if that's the highest number of records in both of the related tables, it feels really strange that there'd be a slowdown at the db level.\nIs this MySQL? Have you tried running an optimize or repair on this and the related tables?. > I am using laravel 5.6 and followed as the tutorial. Not sure what i am missing here\nWhich tutorial?\nWhat was the output message when you ran the migrations?. You still didn't say which \"tutorial\" you followed. Did you mean the README in this github project? Or were you using somebody's tutorial on a blog somewhere?\nI'm guessing there's something wrong with the database you're using?\nI just did a fresh app install, and it created the tables fine. In this case I used Sqlite. I did an app deploy yesterday with it on MySQL/mariadb.\nHere are the commands and their output:\nlaravel new testapp\nApplication ready! Build something amazing.\ncd testapp\n(edit my .env file to specify a database)\ncomposer require spatie/laravel-permission\n```\nUsing version ^2.29 for spatie/laravel-permission\n./composer.json has been updated\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\nPackage operations: 1 install, 0 updates, 0 removals\n  - Installing spatie/laravel-permission (2.29.0): Loading from cache\nWriting lock file\nGenerating optimized autoload files\n\nIlluminate\\Foundation\\ComposerScripts::postAutoloadDump\n@php artisan package:discover --ansi\nDiscovered Package: beyondcode/laravel-dump-server\nDiscovered Package: fideloper/proxy\nDiscovered Package: laravel/nexmo-notification-channel\nDiscovered Package: laravel/slack-notification-channel\nDiscovered Package: laravel/tinker\nDiscovered Package: nesbot/carbon\nDiscovered Package: nunomaduro/collision\nDiscovered Package: spatie/laravel-permission\nPackage manifest generated successfully.\n```\n\nphp artisan vendor:publish --provider=\"Spatie\\Permission\\PermissionServiceProvider\"\nCopied File [/vendor/spatie/laravel-permission/config/permission.php] To [/config/permission.php]\nCopied File [/vendor/spatie/laravel-permission/database/migrations/create_permission_tables.php.stub] To [/database/migrations/2019_01_19_222331_create_permission_tables.php]\nPublishing complete.\nphp artisan migrate\nMigration table created successfully.\nMigrating: 2014_10_12_000000_create_users_table\nMigrated:  2014_10_12_000000_create_users_table\nMigrating: 2014_10_12_100000_create_password_resets_table\nMigrated:  2014_10_12_100000_create_password_resets_table\nMigrating: 2019_01_19_222331_create_permission_tables\nMigrated:  2019_01_19_222331_create_permission_tables\nCheck for tables in database:\nsqlite3 database/database.sqlite\nSQLite version 3.24.0 2018-06-04 14:10:15\nEnter \".help\" for usage hints.\nsqlite> .tables\nmigrations             password_resets        roles\nmodel_has_permissions  permissions            users\nmodel_has_roles        role_has_permissions. That GuardDoesNotMatch::create() must be of the type string, null given error may be a bug.\nHowever, to avoid it, there are a couple things you could consider:\n\n\nI wonder if you even need to do a role lookup with Role::where() at all, since you've already got the $role object from when you called $role->save();\n\n\n... or if the $role->save() isn't giving you the proper guard-name, I wonder if calling Role::create might be better?\nie:\n```diff\n\n$role = new Role();\n$role->name = $name;\n$role->save();\n\n$role = Role::create(['name' => $name]);\n```\n\n\nAfter that, if you find you still need to do a role lookup, instead of doing your own eloquent where, you could use the following to properly resolve the guard_name property for you.\n```diff\n\n$role = Role::where('name', '=', $name)->first();\n$role = Role::findByName($name);\n. While attempting to create a failing test for this, I was reminded that the Role class constructor fills in the guard_name if one is not provided, so the guard_name is never null.\nThus, it would seem that your app must be overriding this package's Role model and is not firing the default constructor.\nI suggest revisiting your customizations, and/or using the code optimizations I posted above.. Each role has a permissions property:\n$role = Role::find(1);\ndd($role->permissions);\n```. \"didn't work for me\" is kinda vague.\n\nYou expected \"something\" to happen, and \"something else\" happened. What were those \"something\"s?. Any error messages?\nAny custom guards? or just using the default web guard?. 1. I'll have to set up a custom app to try to recreate this. Is there anything I need to know to make sure my new Laravel 5.7 app works just like yours?\n\nHave you tried not chaining the assignment? ie:\n```diff\nprotected function create(array $data)\n    {\nreturn User::create([\n$user = User::create([\n            'name' => $data['name'],\n            'email' => $data['email'],\n            'password' => Hash::make($data['password']),\n])->assignRole('client');\n]);\n$user->assignRole('client');\nreturn $user;\n    }\n``. > \"SQLSTATE[HY000]: General error: 1364 Field 'instance_id' doesn't have a default value (SQL: insert intolanguage_lines`\"\n\nThe db error message you posted quotes the SQL statement insert into 'language_lines'. The language_lines table isn't part of this Spatie permissions package.\nTwo things to consider: \n1. Is this error really related to this spatie package?\n2. When adding new fields to the database, you can specify a default value for those fields as part of your database schema in the migration logic, or directly in the database itself.\nSee https://laravel.com/docs/5.7/migrations#column-modifiers for the ->default() syntax.\n. I usually find that when people are asking for that it's because they want to do some sort of wildcard authorization granting, usually with a cascading strategy. For a pseudo-hierarchy/pseudo-grouping that allows for cascading, you could add this middleware inspired by #440 into your app: https://github.com/spatie/laravel-permission/blob/d58615ac37e822221d1c2dd269a6ef868d3248f9/src/Middlewares/CascadePermissionMiddleware.php (this link is to the v3 branch where it's slated to be included in v3 of this package at an undetermined future date). For now you'd need to put it in your app folders and change the namespace, and register the middleware to your app.. Nothing built-in to specifically link individual permissions with a \"group\". \nGranted, it's totally geared around linking permissions to \"roles\", which in themselves are a \"group\".\nSpatie has preferred to refrain from adding fields that the package itself doesn't use. However, you could extend/override the model and add your own fields if you needed that granular level of control.. Alternatively, another strategy I've seen work well is to name your permissions akin to what I posted links for above, and then use the Translations layer in Laravel to handle putting human-friendly names into your UI for the very limited places where you ever display a permission/role \"name\" anywhere.\nThe side benefit to that is it would be instantly multilingual-ready if you did that.. I think there's something in your app that's causing the unexpected result.\nHere's an app I created for you which shows the hasPermissionTo() call working as expected:\nhttps://github.com/drbyte/permtesting-spaceemotion1011\n. If I understand your situation correctly, I think all you need to do is catch the exception. For example:\nphp\n        try {\n            // your code to check the permission\n        } catch (PermissionDoesNotExist $e) {\n            return false; // or whatever other response you wish\n        }. It depends how much extra complexity it adds to the code base, or excess configuration cognitive load added for limited use cases.\n(Strictly speaking, if you use the package's API and don't directly link to the tables in your own app code, you'd never run into collisions if you never renamed the fields.) (I'm not saying that to tell you not to do it for your app, just pointing out that there's often no need for userland code to access this package's tables outside the package.)\nApart from the pivot tables, and the \"guard_name\" column, I'm pretty sure there are no other columns affected, right? . Thanks!\n(I adjusted it slightly for L5.3 compatibility.). @mo7amed-3bdalla7 Thanks for this.\nWhere in your app are you using this? Is it in controlling access to things, or is it in a UI where you are assigning/removing roles to users? or something else?. Thanks. \nI have no problem with this PR, other than that there\u2019s no test for this feature addition. \nI\u2019m asking questions because the next major version is likely dropping guard-specific pairings in the db, which will require leaving the guard logic to your app ... and I'd like to understand the impact of that change on how you'd be using the feature added by this PR, since it would be removed in the next version.\n. Instead of User::role, use \\App\\User::role or add a use \\App\\User; statement to the top of your controller's imports list.. That command calls the create method on the model, which already does a lookup to prevent duplicates, and throws an exception it already exists:\nhttps://github.com/spatie/laravel-permission/blob/5f9960854295c6aec1c706aaa3b146962d6ee905/src/Models/Permission.php#L39-L41. Interesting. \nThe cache should be updated because of the RefreshesPermissionCache trait on that model.\nWill mark it as a bug. \nThanks!. Sounds like you're having issues with composer not installing things properly, or files not transferring to your server fully.. I'd first find out whether the package files are actually on the server.\nThen I'd check whether the composer-generated autoload files are on the server.\nI'd probably try running composer directly on the server.\nAlso, I'm generally use git for deployments, where the server does a git pull from the github repo. (followed by other deployment steps like a composer install, db migrate, etc).\nThis bypasses any FTP client app filters and server-side FTP upload filters.\nLaravel Forge makes this very simple. Optionally Envoyer adds even more sugar to it.. Judging from the combination of this post and your other one at #1027 it seems you have some general issues with your combination of app/server/deployment processes.\nAs far as \"permissions don't work but roles do\", you might investigate where your app has done anything to/with laravel's Gate layer.. Forge expects you to have Forge run composer install (with some standard production parameters it automatically adds to the default deploy script) to build the proper /vendor folder for the production environment. That means you normally would not commit the vendor folder to git, but you would commit the composer.lock file. The default contents of a new Laravel project's .gitignore should take care of not committing the vendor folder.\nThis is all done pretty cleanly automatically if you're using command-line git commands ... but I've sometimes seen Windows users who rely on GUI Apps for doing all their git stuff end up skipping the dot-prefixed files (like .gitignore) since they're often hidden from display. Turning on \"display hidden files\" can help with that. Not sure if that's what you're encountering, but I offer it in case it's a factor.. It's not \"random\". It's quite specific.\nIt first checks the guard_name property of the model (checked both via the model and with Reflection), and if that isn't set, it uses the first defined guard, matching the model for the provider, from the config file. If that isn't found, it picks the declared default.\nBack-story: There is some contention over the initial v2 design choice / interpretation of the meaning of \"default guard\". Right or wrong, this package made the choice that v2 would treat the config file as a higher priority than any app-overwritten \"default\" when selecting a guard.\nAnd, since \"fixing\" that to allow the app to override that in real-time would cause breaking changes, we've deferred \"fixing\" that to a future major version. We've also largely decided that the next major version will also drop guard-specific mapping altogether since controlling that in userland is far more preferable. (Majority of users are duplicating permissions in multiple guards \"just because this package requires it\", and not because their app actually does something specifically different at the per-permission-per-guard level ... and Policies would easily take care of all those instead.)\n. In your app, are you using multiple User models? Or just 1? \nAre you using different role/permissions \"per guard\", or is this guard thing even needed for your app?\nIf it's just 1 user model, and you don't need the polymorphism of relating roles/permissions to multiple models, and don't need per-guard-specific-permissions, v1 of this package works swimmingly (just set composer to use ^1.17.0). Not all of the v2 features have been backported, but I've used it with great success on multiple occasions. Using Policies to check HasRole and HasPermissionTo etc is a happy balance.\nGranted, downgrading requires a bunch of manual work at the database level because the db schemas are very different. I'd drop the tables and start over.\n. > What would you suggest would be the best way to remedy this? I don't really like the idea of hard coding the guard name into the model, but I guess this is the only way because getting to the default guard is basically not possible?\nIf you need to stick with v2, then the simplest approach is to hard-code the guard_name into the model.. This package registers your defined permissions with Laravel's Gate layer, and then the @can directive simply responds to whether Laravel's Gate agrees that the permission is allowed at this time.\nSo, if @can is not responding as expected, then multiple things could be at play:\n- the permission is not registered for the current user, for the guard the user is using\n- another package is interfering\n- your own app code is interfering\n. The package tests for @can and @role pass, and you can see a demo app here where the directives work: https://github.com/drbyte/spatie-permissions-demo/\nSo, something must be wrong in your app. . Given that you say it works fine in dev but not in production, the first place I'd look is your caching config.\nNext would be to make sure your migrations/seeders are actually fully correct such that all your permission/role dependencies have been created correctly with the expected guards.\nThe other place I'd look if it wasn't just a mismatch between dev vs prod, would be in your code if you're using multiple guards and it's legitimately not finding a match because your non-primary guard isn't being declared in your code. But it would be failing in dev too if that were it.\nIn summary, I suspect it's related to either a server-config thing or it's a provisioning/deployment thing.. Cache is configured in your .env file, and greater granular control in your /config/cache.php file.\nIf your dev environment is configured for a different caching strategy than your server then that might explain the anomaly.\nGranted, I would have expected roles to be broken too.\nI don't think I'd ever just import the SQL without running migrations. The whole purpose of migrations is to keep schemas in sync, and to allow code-driven updates so that deployments can apply updates to the db structure/data as needed. ie: while your initial load might be conveniently deployable by just exporting/importing your dev db content, once your app is live you won't be able to control the db that way anymore. Anyway, that's a devops issue.\nSteps I'd take if it was my server would be to compare the complete config between both environments, starting with .env and progressing from there. Forge may have chosen some defaults that your dev environment does differently. \nI'd be inclined to create app tests that run before/during deployment, so that you know before deploy that everything's working consistently in multiple environments. If your tests fail then you can fix things before it goes to production. Again this gets into DevOps, but it sounds like your workflow might benefit from the peace of mind of knowing whatever environmental issue is causing this malfunction.. The model_has_permissions table is Laravel's pivot table for the morphToMany relationship between permissions and your various User models.\nhttps://github.com/spatie/laravel-permission/blob/982f280618b5be70887f0c094aec75c832f1328d/src/Models/Permission.php#L61-L73\nSince you can associate multiple User models with their own permissions, this needs to be tracked somewhere. That table stores those relationships.\nSame with model_has_roles table.\nYou should never directly access that table. Let Eloquent do that, by using the commands this package provides. They're all documented in the README.\nFor example:\nphp\n$user = User::where('email_address', 'test@example.com')->first(); // uses the \\App\\User model\n$user->givePermissionTo('edit-articles'); // stores the relationship\nThe above would store the App\\User model_type and the $user->id model_id and the permission_id associated with the permissions table record id for edit-articles into the model_has_permissions table.\nAgain, you never access that table directly with any SQL queries, whether for reading or for writing. Always let Eloquent do it, using the functionality provided.\nYou can learn more about MorphToMany relationships in the Laravel docs and numerous blog posts online.. Where in your app are you doing this Artisan call? \nIs it in Tests?\nIs it in core app code?\nWhy are you using an Artisan call instead of just calling the service provider directly? \n(I'm asking because understanding your reasoning helps us determine the best way to resolve your reported issue.). @ahmedkandel Can you list some packages whose artisan commands \"do\" work with the approach you're trying?. Interesting. Neither of those run the check in the serviceProvider to only register \"when in console mode\", like this package does. Theoretically that's because one of them is already a console-only tool, and the other is a non-production tool.. Given that #1031 suggests there may be an issue with caching for certain drivers, a couple questions:\n1. What cache driver are you using?\n2. Does downgrading to version 2.25.0 improve the performance issue? (the caching logic was changed in 2.26.0). @JinalSomaiya is this query issue \"new\" for you? Or when did it start?. > ... after updating to the latest version ...\nWhat version were you using before you \"updated\"?. @Zolak94 to downgrade to 2.25.0, you can run: composer require spatie/laravel-permission:\"2.25.0\"\nAlternatively you can specify the version you want in your composer.json and then run composer update.. https://github.com/spatie/laravel-permission/releases/tag/2.35.0 contains the excellent fixes from @matthewgoslett which should help with these performance issues.. On the \"permission name contains a space\" I get all the package tests passing for other drivers, but need to re-install memcached to test that.\nOn the separate performance comment, #804 began some discussion and investigation on improving performance, but it's been stalled awhile.. Confirmed. Spaces in permission names are indeed a problem when using memcached/array/redis cache drivers.. @matthewgoslett I'm thinking the following changes to CacheTest.php should be a suitable test for a possible fix:\n```diff\n    /* @test /\n    public function has_permission_to_should_use_the_cache()\n    {\n+        app(Permission::class)->create(['name' => 'with spaces']);\n-        $this->testUserRole->givePermissionTo(['edit-articles', 'edit-news']);\n+        $this->testUserRole->givePermissionTo(['edit-articles', 'edit-news', 'with spaces']);\n        $this->testUser->assignRole('testRole');\n    $this->resetQueryCount();\n    $this->assertTrue($this->testUser->hasPermissionTo('edit-articles'));\n    $this->assertQueryCount($this->cache_init_count + $this->cache_load_count + $this->cache_run_count + $this->cache_relations_count);\n\n    $this->resetQueryCount();\n    $this->assertTrue($this->testUser->hasPermissionTo('edit-news'));\n    $this->assertQueryCount($this->cache_run_count + $this->cache_untagged_count);\n\n    $this->resetQueryCount();\n\n\n$this->assertTrue($this->testUser->hasPermissionTo('with spaces'));\n        $this->assertTrue($this->testUser->hasPermissionTo('edit-articles'));\n        $this->assertQueryCount($this->cache_init_count);\n    }\n``. https://github.com/spatie/laravel-permission/releases/tag/2.35.0 is released, with @matthewgoslett fixes. 2.35.0 fixed a bug with permission names containing spaces. Perhaps that will help.. Nice catch. Thanks.. Thanks!. The package currently offers aroles` scope to let you find users which DO have the specified roles:\nhttps://github.com/spatie/laravel-permission/blob/087a53cf8ec0cf79ad326f612b0d171364f0d9b6/src/Traits/HasRoles.php#L51-L88\n\nYou could rework your logic to work with that (either to determine a \"with\" instead of \"without\" logic flow, or simply grab a collection of all the \"other\" roles and pass that to the scope), or you could add your own scope to your model to perform the reverse \"not\" lookup.. @helmut Thanks for your work on this. And the research you've done. And for explaining it in detail!\n\nThe cause of the issue is that the Laravel configuration value auth.defaults.guard can be changed during runtime.\nOn further thought it does seem to be that Laravel relies heavily on the (changing) default guard throughout the code. \nFor example the @can blade directives and the can middleware completely rely on the default guard because they fetch the default user from auth.\n\nYes, and this is a mismatch in implementation expectations many have complained about, because this package (well, v2.x anyway) expects a more rigid implementation of the \"default\" guard, not a \"default\" that's ever-changing as Laravel does it. We haven't changed/\"fixed\" it because it's a BC change.\n\nPerhaps this is not something that should be added to the middleware for this package after all. I'm coming to the conclusion that adding guards to the middleware adds more problems than it solves.\n\nI tend to agree.\nThe plan is to have v3 of this package remove the guard-specific matching since for majority of implementations it's overkill and just duplicates what can be done in less code directly in the app already.. @matthewgoslett Thanks for this.\nI've been reviewing and testing a bit.\nCurious: in your testing, while you said you observed time improvements, what's the RAM impact? Granted it probably requires a larger dataset to compare outcomes.. To explore: Given that this PR moves to a single cache key for everything, I wonder if we can safely remove all the tagged-cache infrastructure too?. To investigate: why do the cache hit counts (tests) break when database is selected as the cache driver?. \ud83d\udc4d Thumbs up!\nI came up with pretty much the same while toying with it yesterday. I didn't have time then to sort out the failing tests that happen in database caching mode, but I'll merge this and then make those adjustments separately.\nThanks!. #1054 removed an extra loop iteration. I wonder how that would be affecting things?\n1056 is not merged yet, but I'd be interested in your feedback about its impact. What cache driver are you using with this package?. I've added another cache test to ensure that the cache respects multiple guards.\nhttps://github.com/spatie/laravel-permission/commit/fbf7458fb164ae11f66218afb1b000f46bc412a0. Please explain \"why\".\nThe package already enforces unique combinations, via code.. I'm not convinced this is necessary. Particularly when there are future plans to drop guard-specific db storage.\nHow in your application is there a need for this?. Release 2.33.0 already adds Laravel 5.8 support.. Yes, the PermissionAlreadyExists will fire when the permission is already present in the table.\nAnd, since your call to create doesn't specify a guard, the web guard is being detected from the config automatically. \nThis is by design.. Thanks!. Do you have permissions directly registered to the user? or are they connected via roles? \nAre you using SoftDeletes?\nThe HasPermissions and HasRoles traits register a deleting event action to detach permissions from the model, and it specifically checks for force-deleting.\n. thanks. Have you used PHP's built-in trait method overloading?\nSee example posted by @robjbrain at https://github.com/spatie/laravel-permission/issues/754#issuecomment-468228085\nphp\ntrait HasRolesTrait\n{\n    use HasRoles {\n        assignRole as protected originalAssignRole;\n        removeRole as protected originalRemoveRole;\n        syncRoles as protected originalSyncRoles;\n    }\n//...\n}. Agreed.\nI haven't run into the problem myself, so haven't had to explore alternatives that deeply. :(. @highstrike, the feedback I've gotten by consulting some colleagues is that the approach you've taken is the right one.. Thanks. v1.18.0 has just been published!. You could, instead of passing $permissions as strings, pass a collection of Permission objects which you've already retrieved by querying them with the required guard.\nFYI: In a future version we're planning to remove guard-specific relations (ie: no longer register permissions directly to a guard by storing that in the db), since that can be handled in the app with policies.. Thanks!. I agree - the cons aren't ideal.. While you're benchmarking, does removing ->with('roles') change performance much in your app?. Ya, those tests fail just because they're based on actual numbers of what's needed in order to do the relation load. But removing that should be a separate PR anyway.. This looks good. \nThanks!. Hm, I haven't run into that (and the test suite shows the tests are passing), but do the symptoms change if you edit your composer.json to set this package to version 2.35.0 and run composer update?  Then test 2.34.0.\nAlso, it would help to see your app code, or at least explain how exactly I could recreate the same symptoms on a fresh L5.8 install.. Thanks. Researching the \"why\", to figure out a broader solution.\nIn your app are you doing anything guard-specific? Or just using the default web guard?. > How to overcome this issue??\nNo idea. We can't guess what your code is doing, especially since you've provided no troubleshooting information.\nSupply complete details for how I could recreate your exact same problem starting with a new Laravel app.\n. I'm not surprised that displaying 10,000 users on one page is \"slow\" (and you didn't define how slow is \"slow\"), regardless of application. Even without using a datatable strategy or package.\nBut this package isn't providing datatables.. Laravel has built-in pagination capabilities with Eloquent.\nhttps://laravel.com/docs/5.8/pagination. > Is it true to say that the wiki https://github.com/spatie/laravel-permission/wiki/Global-%22Admin%22-role is miss leading or wrong\n\nWhy would they say:\nIf you want an \"Admin\" role to respond true to all permissions, without needing to assign all those permissions to a role, you can use Laravel's Gate::before() method.\nif it does NOT work with any laravel-permission methods and ONLY works with Laravels Native\nauth()->user()->can('some.permissions')\n\nThe Wiki article is correct.\n- can uses Laravel's Gate layer, which combines the Gate::before with real permission record lookups.\n- hasPermissionTo/etc only looks for real permission records\n- hasRole/etc only looks for real role records\nIt is best-practice to use can for all your permission-checking everywhere in your app.. Thanks!. Please don't start this with $, because it means triple-click to copy-and-paste the whole line will include the unnecessary $.\nSame in several other places in this PR.. 'to except roles' might be better stated as \"to exclude roles\".. \"a array\" should be \"an array\". \"which not having the role\" should be \"which do not have the role\". You're talking about the migration suggested by Laravel itself, right? \nie: https://github.com/laravel/framework/blob/5.4/src/Illuminate/Cache/Console/stubs/cache.stub\n... and nothing to do with the Spatie laravel-permission package, right?. Agreed.. True. Thanks.. The tests are passing. Not sure if there are additional tests needed to prove the middleware is firing correctly. \nI have the code working on a production site, and it appears to be properly functional. . In playing with the tests, it appears you are correct :)\nI've added some more tests: passing an array (even though most middleware calls will be string and not array), and re-ordering options so that the first option isn't the only one under test.. Is this return true; needed?\nI know it used to return a boolean that was checked in dozens of tests (never understood why that was done), but it appears you've removed that check from the tests, so this true may not be needed.. If it's been cached, shouldn't the queryCount be 0?. Isn't this reset a duplicate of line 61 below?. Update: I see, you've declared its return type as boolean, so it's gotta return \"something\" boolean.\nBut I'm not sure why a boolean is needed, since nothing is ever returned otherwise.\n(The \"important\" return is inside the closure.). resetQueryCount() doesn't take any parameters, so the 1 here is superfluous.. Sigh - I missed that you didn't do a \"reset\" in between, unlike the other tests. :)\nSo, this is correct: should return the same as it did 2 statements earlier.\n\ud83d\udc4d . With this removed, can we also remove shouldLogException() from PermissionRegistrar.php ?. I'll accept that. \nMaybe consider a change in v3 if suitable then.. I think you just merged in something that was removed in the release published earlier today ... :(. > Permissions chache was cleard\nA couple typos here ;). You could do that, but I think @AlexVanderbist meant to just remove the elseif clause, like this:\nphp\nif (is_numeric($role)) {\n   return foo;\n}\nreturn bar;. I'm not sure this is the right assertion here. Wouldn't it be better to check that the other-permission now exists, or that assigning other-permission to the user is successful?. Would this be more performant to call $guardNames->first() instead of rerunning $this->getGuardNames() a second time?\n(I'm still not sure that I agree with the overall proposed logic change, but if it is to go ahead, it feels like it should be optimized.). The migration MUST have the date prefix on the filename, else it will trigger an error. . Supported: \"token\" vs the driver=>'api' below.\nIs there an update needed here for consistency?. I can accept that :). Clarification: these changes were primarily to prevent having to enable Facade support in Lumen config, correct?. \ud83d\udc4d . Note: can't leave this true || in here for the PR merge. ;). Do you mind moving this test to HasPermissionsTest?\nPerhaps near https://github.com/spatie/laravel-permission/blob/master/tests/HasPermissionsTest.php#L105. What are your thoughts about whether this public method should also be part of the interface? \nI'm okay with leaving it public since (well, the trait needs it public, but also) it can probably be adapted to support uuid/guid (which are strings). But that makes me wonder whether another name might be better for this method.  (If it was protected/private then renaming is more trivial.)\nWhat were your thoughts when coming up with naming here?. Okay -- your thinking process was the same as mine. :)\nI want to think a bit further about the best naming for the public method, since I'd like to expand to uuid as well.\nAnd then must decide whether the Interface/Contract should require the method also.. @AlexVanderbist are you okay with this no longer throwing an exception if permission does not exist? \nIs this sort of change too significant to not be considered a breaking change in Spatie terms?. Did you mean to also include model_morph_type in the config file and in the migration? \nThe README example here will get nulls if a fallback isn't provided and if it's not defined in the config file.. Great timing :)  I see you addressed this in da20346\nhttps://github.com/spatie/laravel-permission/pull/827/commits/da2034676fe954c7407440e0cebb83090a034ebd. Ya, the unused config key is still mentioned here in the readme.\nEvidently you're actively looking at it ... so I'll review it a bit later ;). While I too like having PHPStorm align variable names when reformatting, one thing it does poorly is this scenario when it shoves in 30+ spaces and actually creates more confusion instead of improving readability.\nSo in this package we opt to turn off that \"alignment\" setting. \nPlease remove the extra spaces added in docblocks.. No worries - I'm always catching myself doing that too!. The second one should be cache_expiration_time with underscore, right?. This will probably work better:\nphp\n            app('cache')\n            ->store(config('permission.cache.store') != 'default' ? config('permission.cache.store') : null)\n            ->forget(config('permission.cache.key'));. Given this is returning a hash of the entire key string, we probably don't need the PermissionRegistrar::$cacheKey.'.' prefix included a couple lines above, right?. Thanks for submitting this.\nQuestion: since this getPermissions() call is initiated by the Permission model (ie: typically via findByName), which immediately calls first() again on this response, is there yet another opportunity here to improve performance even further? I'd be curious about your benchmark results.. True. ",
    "lowerends": "I started working on this and should have something ready later this week.\n. I'm using @can with an @else part successfully. I think it will be important that you can define what needs to happen if the user doesn't have any or all of the roles.\nAs for the naming, it may be even better to make them consistent with the other PR I'm working on, to have @hasAnyRole and @hasAllRoles.\n. Agree, also with the fact that @norole can still be valuable.\nSo to sum up, we would have:\n@role = @hasanyrole\n@hasallroles\n@else\n@endrole, @endhasanyrole, @endhasallroles\n@norole\n. I was just working on that :)\n. Moving on to adding the blade directives now.\n. The error I got was ErrorException: mkdir(): File exists for all tests. This PR first checks if the directory exists before attempting to create it.\n. With pleasure! Just ping me if needed.\n. I tested them locally and they seemed to work fine. I did notice that I forgot the use statement for Illuminate\\View\\Compilers\\BladeCompiler while copying into the PR, but I've seen you noticed that already as well. Sorry for that.\nI noticed that you've added tests as well and made some modifications to the directives. Is it working out for you? Definitely let me know if I can be of any assistance.\n. Can you post the relevant lines in your config/app.php file. Also, which error are you getting when running php artisan?\n. Is there anything logged in the storage/logs directory?\n. ",
    "AEK-BKF": "same issue with me !!!\n. Yes I did, @role works fine, but @can always returns true if the permission exists, and false when not.\nhere my User Model code :\n<?php \nnamespace App\\Models;\nuse Illuminate\\Auth\\Authenticatable;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Auth\\Passwords\\CanResetPassword;\nuse Illuminate\\Foundation\\Auth\\Access\\Authorizable;\nuse Illuminate\\Contracts\\Auth\\Authenticatable as AuthenticatableContract;\nuse Illuminate\\Contracts\\Auth\\CanResetPassword as CanResetPasswordContract;\nuse Illuminate\\Contracts\\Auth\\Access\\Authorizable as AuthorizableContract;\nuse Illuminate\\Database\\Eloquent\\softDeletes;\nuse Spatie\\Permission\\Traits\\HasRoles;\nclass User extends Model implements AuthenticatableContract,\n                                    AuthorizableContract,\n                                    CanResetPasswordContract\n{\n    use Authenticatable, CanResetPassword, Authorizable, SoftDeletes, hasRoles; \n. I solved my issue by editing hasRole & PermissionServiceProvider classes like this :\nFunction hasDirectPermission in hasRole class :\n public function hasDirectPermission($permissions)\n    {\n        if (is_string($permissions)) {\n            return $this->permissions->contains('name', $permissions);\n        }\n        if ($permissions instanceof Permission) {\n            return $this->permissions->contains('id', $permissions->id);\n        }       \nreturn $this->permissions->contains('name', $permissions);\n}\nregisterBladeExtensions in PermissionServiceProvider class :\nAdd these lines :\n $bladeCompiler->directive('permission', function ($permission) {\n                return \"<?php if(auth()->check() && auth()->user()->hasDirectPermission({$permission})): ?>\";\n            });\n            $bladeCompiler->directive('endpermission', function () {\n                return '<?php endif; ?>';\n            });\nAnd all is working fine , I can use this : @permission('Add-User')  it works :))\nTry it @jpmurray  and tell me if it's ok ^^'\n. Yes there is ^^, \n@can(name)\n@endcan\n. Are you trying to migrate laravel-permissions ? (i.e : php artisan migrate) \n. Delete roles, permissions, roles-has-permissions, users-has-permissions, roles-has-permissions records from migration table, and drop them from DB, finaly re-execute the command: php artisan migrate.\nThis error occurs when you're trying to migrate tables already exist in DB.\n. It does not work with me, but I edited hasRoles class like this :\n public function hasDirectPermission($permission)\n    {...}\nand \nprotected function hasPermissionViaRole($permission)\n    {...}\nand it works fine :)\nThanks.\n. Yes ! \n. When I set :\nprotected function hasDirectPermission(Permission $permission)\nI get this error :\nCall to undefined method Illuminate\\Database\\Query\\Builder::hasDirectPermission() \nWhen I set this :\npublic function hasDirectPermission(Permission $permission)\nI get :\nErrorException in HasRoles.php line 168: Argument 1 passed to App\\Models\\User::hasDirectPermission() must implement interface Spatie\\Permission\\Contracts\\Permission, string given\n. Hi @freekmurze \nAny news about multi-auth ? I'm using L5.4 and I've two Auths : User and Admin.. Please could you add that attribute 'user_foreignkey' in the config file ? \nWhat did you say about my proposition ? thanks.. Thanks for quick answer,\nI think it's recommended since multi-auth,\nAlso, since you set possibility to change 'users' table name, this update should be added ! otherwise people who change users table name, will get that error ! \nThanks.. Thanks for answer,\nUnfortunately I can't, but the code works fine if i put a role in the middleware instead of permission.\nLike this :\npublic function __construct()\n    {        \n       $this->middleware('role:Inst Manager')->only('index');       \n    }\nIt works fine, but if I put only permission, it always returns True.\nNB: In my conception, I can give to user both roles and permissions, or just permissions.. ",
    "jpmurray": "I'm not sure if I'm having the same trouble, but...\n$permission = Permission::create(['name' => 'create user']);\n$role = Role::findByName('superadmin');\n$role->givePermissionTo('create user');\nWorks fine.For the current user, $user->hasRole('superadmin'); returns true.\nBut trying to do $user->can('create user'); will result in\nFatalErrorException in Model.php line 1011:\nClass name must be a valid object or a string\nAny idea?\nEDIT: yes, everyting looks fine in the database. and I do have the service provider registered.\n. I'll wait for @freekmurze input on that before messing with the package files ;-)\n. Welp, shame on me. My issue is basically related to me not scrolling enough in my files. I just found a old stray \"permissions\" function in my User model. Now that it's gone, everything works fine :/\n. @freekmurze although are the permissions functions (can, hasPermissionTo, etc) works with $roles ?\nCurently trying to do a $role->hasPermissionTo($permission->name) that results a Call to undefined method Illuminate\\Database\\Query\\Builder::hasPermissionTo()...\n(EDIT: I'm actually trying to have an interface update a role, I think I'll try Laravel's attach, detach to the Model, let's see if that works!)\n(EDIT 2 : And of course, sync() is the way to go! I don't know what I was stuborn and kept trying to just loop through them :P Oh well!)\n. @freekmurze : just curious, what makes looping through it more of a better option then $role->permissions()->sync($array_for_permissions_id); ?\n. Just to leave a trace, if anyone is looking for this, I couldn't make the code above from @freekmurze work, so I went on and checked the Laravel docs ;-)\nThis would work:\nUser::whereHas('roles', function ($query) {\n    return $query->where('name', 'name-of-role');\n});\nWhat I changed was \"role\" to \"roles\" as the relationship on the hasRoles trait uses the word in plural, and I couldn't query the \"name\" field directly, had to search for it.\nMy use case was that I needed to find the person holding the role \"owner\" on a certain model, so I went on and created an accessor on said model:\npublic function getOwnerAttribute()\n    {\n        return $this->users()->whereHas('roles', function ($query) {\n            return $query->where('name', 'owner');\n        })->first();\n    }\nSo also, thanks Freek, I actually never had a use case for whereHas before, now I'll probably use it everywhere I can! :D. ",
    "razikallayi": "What is the final answer? @can is not working for me too. \n. Or please let me know if there is any better solution\n. Ok.Thank you.\nAnd a big thanks for the project.\n. ",
    "desaijay": "```\n public function boot(GateContract $gate)\n    {\n        $this->registerPolicies($gate);\n     foreach ($this->getPermissions() as $permission) {\n        $gate->define($permission->name, function ($user) use ($permission) {\n            return $user->hasPermission($permission);\n        });\n    }\n}\n\n  protected function getPermissions()\n{\n    return Permission::with('roles')->get();\n}\n\n```\nadd this to the AuthServiceProvider.php file and you can then use @can ???\nI dont know wat @freekmurze  will suggest, but even after registering the service provider class in app.php, @can doesnt work.\nWell i dnt know whether to mess thecode or try it like @AEK-BKF did.\nthe only problems you can face is when assigning multiple roles andmultiple permissions. I think that multiple permissions can be assigned to a role, but users should be only given the role and then the role must check whether the user is assigned the role and it has certain permissions on it.\n. it was just a suggestion to above user, for me this package is working perfectly except @can is not working in blade templates and my testing is little poor, so cnt help you out much, lots of usage coming across the way.\nI had jut one simple question, i had done something from the scratch , and was able to relate all the users roles and permission, and assigning the roles the permissions, and fetching, revoking and updating the roles and permission.\nBut i am still figuring how will i use the middleware to check the role of  the user and then redirect to following path , and also the routes should be served to that roles only.\nI have tried your another package, n thats works perfectly for me, but if you can help me from scratch.\nThere is function redirectPath , which i have modified in authcontroller.php, and it works with the redirection of particular type if users.\nBut this should be more normalised and i dnt want to mess with the authcontroller file, any help/hint would be good for me?\n. ",
    "Sekonda": "I know this issue was closed, but I'm still running into the same issue. I've registered the service provider. \ncan() returns false even though the user has the permission through the role(s) assigned. \n_hasPermission_To returns correctly\n. ",
    "arcanedev-maroc": "@Propaganistas Yeah, there is no config file for this package to customize or extend it.\n. The hasAnyRole() method except only string, Collection object or Role Model as $roles argument.\nIs it a bug ? Yes.\nYou can check the source code https://github.com/spatie/laravel-permission/blob/master/src/Traits/HasRoles.php#L70.\n. ",
    "Propaganistas": "I just noticed DraperStudio also submitted a PR (#20) concerning these features while I wrote this PR. Quite cool if you compare the similarities in approach and naming convention, 'cause the PR list was empty when I started working on it :-)\nAnyhow, an objective summary of both pull requests:\nThis PR only exposes the Eloquent model classes to use for Role and Permission. It hereby deducts its table names from the model class as regular Eloquent models would do. If custom models are provided, custom migrations need to be created as well.  Everything related to this package is extracted into a Contract, resulting in 4 Contracts in total.\nThe other PR explicitly asks for table names and injects it dynamically into the supplied migration table. The provided contracts however do not enforce the additional behavior currently present in traits (e.g. revokeRole etc.). Docblocks aren't updated to use the contracts.\n. Hi @DraperStudio! Thanks for joining the discussion. Just a quick comment:\nTable names: I felt that adding a config for them would be overkill since the described behavior in #5 is quite niche and the desired functionality is simply achieved using a regular Eloquent model specifying its table explicitly.\nMigrations: this is a matter of, let's say, preference. If I as a developer implement a custom Role model, I might also add some additional fields to the pivot table (role_has_permissions). That's why I put it into the roles migration. It is therefore assumed that if a custom Role model and table is used, the corresponding relation tables are also set up manually.\nAnyway, this isn't a competition so I would advise the maintainer to review both PRs and take best of both worlds. \n. ",
    "ghost": "\nThe table names are configurable to solve this issue https://github.com/spatie/laravel-permission/issues/5\nThe DocBlocks didn't needed to be updated because I named the contracts the same as the Models, so it was just a matter of replacing the use statements.\nThe Provided contracts are explicitly for the Models that should be bound to the IoC. I did it that way because if a Model is compliant with a Contract which would enforce compliance with the Trait doesn't really matter just for the binding into the IoC.\n\nI can see how it would be beneficial to have Contracts for the Traits and also split up the migrations since a User can have permissions without roles so I might add that later.\nThough, there is one issue I see with your migrations. If people want to use roles without permissions and they just run the create_roles_table migration Laravel should throw an exception because the table permissions won't exist when role_has_permissions gets created so the foreign key creation should fail for permission_id.\n\nphp\n[Illuminate\\Database\\QueryException]\n  SQLSTATE[HY000]: General error: 1215 Cannot add foreign key constraint (SQL: alter table `role_has_permissions` add constraint role_has_pe\n  rmissions_permission_id_foreign foreign key (`permission_id`) references `permissions` (`id`) on delete cascade)\n\nI guess you could solve this two ways.\n1. Keep the role_has_permissions schema were it is and check if the permissions table exists and only then you run the migration.\n2. Move the role_has_permissions migration into the create_permissions_table migration.\n. I needed to use App\\User, but I was doing use Illuminate\\Foundation\\Auth\\User. adding Artisan::call('cache:clear'); didn't seem to work for me.. Apologies. I realize that wasn't very helpful. I found it was due to manipulation of the database so doing php artisan cache:forget spatie.permission.cache then php artisan cache:clear worked. This solved my issue.\n\n. ",
    "appkr": "Thanks.\n. ",
    "ghermans": "These lines are set in the laravel-permission config file:\n'models' => [\n        /*\n        |--------------------------------------------------------------------------\n        | Permission Model\n        |--------------------------------------------------------------------------\n        */\n        'permission' => Spatie\\Permission\\Models\\Permission::class,\n        /*\n        |--------------------------------------------------------------------------\n        | Role Model\n        |--------------------------------------------------------------------------\n       */\n        'role' => Spatie\\Permission\\Models\\Role::class,\n    ],\nI thought that this was pointing to the vendor/spatie dir? \nbtw thanks for the quick response on a Sunday @freekmurze  ;)\n. @freekmurze  any suggestions?\n. ``` php\n[2016-01-01 18:34:52] local.ERROR: Symfony\\Component\\Debug\\Exception\\FatalThrowableError: Fatal error: Class 'App\\Role' not found in /home/vagrant/timecontrol/bootstrap/cache/compiled.php:10223\nStack trace:\n0 /home/vagrant/timecontrol/app/User.php(43): Illuminate\\Database\\Eloquent\\Model->belongsToMany('App\\Role')\n1 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(10925): App\\User->roles()\n2 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(10914): Illuminate\\Database\\Eloquent\\Model->getRelationshipFromMethod('roles')\n3 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(10891): Illuminate\\Database\\Eloquent\\Model->getRelationValue('roles')\n4 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(11211): Illuminate\\Database\\Eloquent\\Model->getAttribute('roles')\n5 /home/vagrant/timecontrol/vendor/spatie/laravel-permission/src/Traits/HasRoles.php(73): Illuminate\\Database\\Eloquent\\Model->__get('roles')\n6 /home/vagrant/timecontrol/storage/framework/views/b236f9316f106af841d4ba903d059477(2): App\\User->hasRole('writer')\n7 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(14626): include('/home/vagrant/t...')\n8 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(14662): Illuminate\\View\\Engines\\PhpEngine->evaluatePath('/home/vagrant/t...', Array)\n9 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(14495): Illuminate\\View\\Engines\\CompilerEngine->get('/home/vagrant/t...', Array)\n10 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(14483): Illuminate\\View\\View->getContents()\n11 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(14474): Illuminate\\View\\View->renderContents()\n12 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(15623): Illuminate\\View\\View->render()\n13 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(15138): Illuminate\\Http\\Response->setContent(Object(Illuminate\\View\\View))\n14 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(7688): Symfony\\Component\\HttpFoundation\\Response->__construct(Object(Illuminate\\View\\View))\n15 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(8915): Illuminate\\Routing\\Router->prepareResponse(Object(Illuminate\\Http\\Request), Object(Illuminate\\View\\View))\n16 [internal function]: Illuminate\\Routing\\ControllerDispatcher->Illuminate\\Routing{closure}(Object(Illuminate\\Http\\Request))\n17 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(9585): call_user_func(Object(Closure), Object(Illuminate\\Http\\Request))\n18 /home/vagrant/timecontrol/app/Http/Middleware/Authenticate.php(45): Illuminate\\Pipeline\\Pipeline->Illuminate\\Pipeline{closure}(Object(Illuminate\\Http\\Request))\n19 [internal function]: App\\Http\\Middleware\\Authenticate->handle(Object(Illuminate\\Http\\Request), Object(Closure))\n20 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(9577): call_user_func_array(Array, Array)\n21 [internal function]: Illuminate\\Pipeline\\Pipeline->Illuminate\\Pipeline{closure}(Object(Illuminate\\Http\\Request))\n22 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(9567): call_user_func(Object(Closure), Object(Illuminate\\Http\\Request))\n23 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(8916): Illuminate\\Pipeline\\Pipeline->then(Object(Closure))\n24 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(8901): Illuminate\\Routing\\ControllerDispatcher->callWithinStack(Object(App\\Http\\Controllers\\StaffController), Object(Illuminate\\Routing\\Route), Object(Illuminate\\Http\\Request), '$\n25 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(7855): Illuminate\\Routing\\ControllerDispatcher->dispatch(Object(Illuminate\\Routing\\Route), Object(Illuminate\\Http\\Request), 'App\\Http\\Contro...', 'edit')\n26 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(7826): Illuminate\\Routing\\Route->runWithCustomDispatcher(Object(Illuminate\\Http\\Request))\n27 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(7479): Illuminate\\Routing\\Route->run(Object(Illuminate\\Http\\Request))\n28 [internal function]: Illuminate\\Routing\\Router->Illuminate\\Routing{closure}(Object(Illuminate\\Http\\Request))\n29 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(9585): call_user_func(Object(Closure), Object(Illuminate\\Http\\Request))\n30 [internal function]: Illuminate\\Pipeline\\Pipeline->Illuminate\\Pipeline{closure}(Object(Illuminate\\Http\\Request))\n31 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(9567): call_user_func(Object(Closure), Object(Illuminate\\Http\\Request))\n32 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(7480): Illuminate\\Pipeline\\Pipeline->then(Object(Closure))\n33 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(7468): Illuminate\\Routing\\Router->runRouteWithinStack(Object(Illuminate\\Routing\\Route), Object(Illuminate\\Http\\Request))\n34 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(7453): Illuminate\\Routing\\Router->dispatchToRoute(Object(Illuminate\\Http\\Request))\n35 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(2302): Illuminate\\Routing\\Router->dispatch(Object(Illuminate\\Http\\Request))\n36 [internal function]: Illuminate\\Foundation\\Http\\Kernel->Illuminate\\Foundation\\Http{closure}(Object(Illuminate\\Http\\Request))\n37 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(9585): call_user_func(Object(Closure), Object(Illuminate\\Http\\Request))\n38 /home/vagrant/timecontrol/vendor/barryvdh/laravel-debugbar/src/Middleware/Debugbar.php(49): Illuminate\\Pipeline\\Pipeline->Illuminate\\Pipeline{closure}(Object(Illuminate\\Http\\Request))\n39 [internal function]: Barryvdh\\Debugbar\\Middleware\\Debugbar->handle(Object(Illuminate\\Http\\Request), Object(Closure))\n40 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(9577): call_user_func_array(Array, Array)\n41 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(2926): Illuminate\\Pipeline\\Pipeline->Illuminate\\Pipeline{closure}(Object(Illuminate\\Http\\Request))\n42 [internal function]: Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken->handle(Object(Illuminate\\Http\\Request), Object(Closure))\n43 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(9577): call_user_func_array(Array, Array)\n44 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(12949): Illuminate\\Pipeline\\Pipeline->Illuminate\\Pipeline{closure}(Object(Illuminate\\Http\\Request))\n45 [internal function]: Illuminate\\View\\Middleware\\ShareErrorsFromSession->handle(Object(Illuminate\\Http\\Request), Object(Closure))\n46 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(9577): call_user_func_array(Array, Array)\n47 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(11536): Illuminate\\Pipeline\\Pipeline->Illuminate\\Pipeline{closure}(Object(Illuminate\\Http\\Request))\n48 [internal function]: Illuminate\\Session\\Middleware\\StartSession->handle(Object(Illuminate\\Http\\Request), Object(Closure))\n49 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(9577): call_user_func_array(Array, Array)\n50 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(12686): Illuminate\\Pipeline\\Pipeline->Illuminate\\Pipeline{closure}(Object(Illuminate\\Http\\Request))\n51 [internal function]: Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse->handle(Object(Illuminate\\Http\\Request), Object(Closure))\n52 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(9577): call_user_func_array(Array, Array)\n53 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(12623): Illuminate\\Pipeline\\Pipeline->Illuminate\\Pipeline{closure}(Object(Illuminate\\Http\\Request))\n. php\n<?php\nnamespace App\\Http\\Controllers;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\nuse Spatie\\Permission\\Models\\Role;\nuse Spatie\\Permission\\Models\\Permission;\n. php\n//The config file settings\n<?php\nreturn [\n/*\n|--------------------------------------------------------------------------\n| Authorization Models\n|--------------------------------------------------------------------------\n*/\n\n'models' => [\n\n    /*\n    |--------------------------------------------------------------------------\n    | Permission Model\n    |--------------------------------------------------------------------------\n    |\n    | When using the \"HasRoles\" trait from this package, we need to know which\n    | Eloquent model should be used to retrieve your permissions. Of course, it\n    | is often just the \"Permission\" model but you may use whatever you like.\n    |\n    | The model you want to use as a Permission model needs to implement the\n    | `Spatie\\Permission\\Contracts\\Permission` contract.\n    |\n    */\n\n    'permission' => Spatie\\Permission\\Models\\Permission::class,\n\n    /*\n    |--------------------------------------------------------------------------\n    | Role Model\n    |--------------------------------------------------------------------------\n    |\n    | When using the \"HasRoles\" trait from this package, we need to know which\n    | Eloquent model should be used to retrieve your roles. Of course, it\n    | is often just the \"Role\" model but you may use whatever you like.\n    |\n    | The model you want to use as a Role model needs to implement the\n    | `Spatie\\Permission\\Contracts\\Role` contract.\n    |\n    */\n\n    'role' => Spatie\\Permission\\Models\\Role::class,\n\n],\n\n. @louisdboyd  :+1: , i have the same issue\n.\n[2016-01-01 17:42:37] local.ERROR: ParseError: syntax error, unexpected 'return' (T_RETURN) in /home/vagrant/timecontrol/vendor/spatie/laravel-permission/src/PermissionRegistrar.php:58\nStack trace:\n0 /home/vagrant/timecontrol/vendor/composer/ClassLoader.php(301): Composer\\Autoload\\includeFile('/home/vagrant/t...')\n1 [internal function]: Composer\\Autoload\\ClassLoader->loadClass('Spatie\\Permissi...')\n2 [internal function]: spl_autoload_call('Spatie\\Permissi...')\n3 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(1214): ReflectionParameter->getClass()\n4 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(1195): Illuminate\\Container\\Container->addDependencyForCallParameter(Object(ReflectionParameter), Array, Array)\n5 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(1181): Illuminate\\Container\\Container->getMethodDependencies(Array, Array)\n6 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(1800): Illuminate\\Container\\Container->call(Array)\n7 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(1792): Illuminate\\Foundation\\Application->bootProvider(Object(Spatie\\Permission\\PermissionServiceProvider))\n8 [internal function]: Illuminate\\Foundation\\Application->Illuminate\\Foundation{closure}(Object(Spatie\\Permission\\PermissionServiceProvider), 15)\n9 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(1793): array_walk(Array, Object(Closure))\n10 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(2131): Illuminate\\Foundation\\Application->boot()\n11 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(1579): Illuminate\\Foundation\\Bootstrap\\BootProviders->bootstrap(Object(Illuminate\\Foundation\\Application))\n12 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(2295): Illuminate\\Foundation\\Application->bootstrapWith(Array)\n13 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(2248): Illuminate\\Foundation\\Http\\Kernel->bootstrap()\n14 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(2232): Illuminate\\Foundation\\Http\\Kernel->sendRequestThroughRouter(Object(Illuminate\\Http\\Request))\n15 /home/vagrant/timecontrol/public/index.php(53): Illuminate\\Foundation\\Http\\Kernel->handle(Object(Illuminate\\Http\\Request))\n16 {main}\nNext ReflectionException: Class Spatie\\Permission\\PermissionRegistrar does not exist in /home/vagrant/timecontrol/bootstrap/cache/compiled.php:1214\nStack trace:\n0 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(1214): ReflectionParameter->getClass()\n1 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(1195): Illuminate\\Container\\Container->addDependencyForCallParameter(Object(ReflectionParameter), Array, Array)\n2 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(1181): Illuminate\\Container\\Container->getMethodDependencies(Array, Array)\n3 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(1800): Illuminate\\Container\\Container->call(Array)\n4 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(1792): Illuminate\\Foundation\\Application->bootProvider(Object(Spatie\\Permission\\PermissionServiceProvider))\n5 [internal function]: Illuminate\\Foundation\\Application->Illuminate\\Foundation{closure}(Object(Spatie\\Permission\\PermissionServiceProvider), 15)\n6 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(1793): array_walk(Array, Object(Closure))\n7 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(2131): Illuminate\\Foundation\\Application->boot()\n8 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(1579): Illuminate\\Foundation\\Bootstrap\\BootProviders->bootstrap(Object(Illuminate\\Foundation\\Application))\n9 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(2295): Illuminate\\Foundation\\Application->bootstrapWith(Array)\n10 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(2248): Illuminate\\Foundation\\Http\\Kernel->bootstrap()\n11 /home/vagrant/timecontrol/bootstrap/cache/compiled.php(2232): Illuminate\\Foundation\\Http\\Kernel->sendRequestThroughRouter(Object(Illuminate\\Http\\Request))\n12 /home/vagrant/timecontrol/public/index.php(53): Illuminate\\Foundation\\Http\\Kernel->handle(Object(Illuminate\\Http\\Request))\n13 {main}\n```\n. :+1: \n. ",
    "bernardomacedo": "Thanks! I guess I am too newbie for Laravel still!\n. ",
    "Louuu": "Hi,\n'providers' => [\n```\n    /\n     * Laravel Framework Service Providers...\n     /\n    Illuminate\\Auth\\AuthServiceProvider::class,\n    Illuminate\\Broadcasting\\BroadcastServiceProvider::class,\n    Illuminate\\Bus\\BusServiceProvider::class,\n    Illuminate\\Cache\\CacheServiceProvider::class,\n    Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider::class,\n    Illuminate\\Cookie\\CookieServiceProvider::class,\n    Illuminate\\Database\\DatabaseServiceProvider::class,\n    Illuminate\\Encryption\\EncryptionServiceProvider::class,\n    Illuminate\\Filesystem\\FilesystemServiceProvider::class,\n    Illuminate\\Foundation\\Providers\\FoundationServiceProvider::class,\n    Illuminate\\Hashing\\HashServiceProvider::class,\n    Illuminate\\Mail\\MailServiceProvider::class,\n    Illuminate\\Pagination\\PaginationServiceProvider::class,\n    Illuminate\\Pipeline\\PipelineServiceProvider::class,\n    Illuminate\\Queue\\QueueServiceProvider::class,\n    Illuminate\\Redis\\RedisServiceProvider::class,\n    Illuminate\\Auth\\Passwords\\PasswordResetServiceProvider::class,\n    Illuminate\\Session\\SessionServiceProvider::class,\n    Illuminate\\Translation\\TranslationServiceProvider::class,\n    Illuminate\\Validation\\ValidationServiceProvider::class,\n    Illuminate\\View\\ViewServiceProvider::class,\n/*\n * Application Service Providers...\n */\nApp\\Providers\\AppServiceProvider::class,\nApp\\Providers\\AuthServiceProvider::class,\nApp\\Providers\\EventServiceProvider::class,\nApp\\Providers\\RouteServiceProvider::class,\nSpatie\\Permission\\PermissionServiceProvider::class,\n\n],\n```\nI am not receiving any errors when running php artisan, just nothing is output from the command line.\n. There was nothing in the log file about it, cleared the logs and it now\nappears to work\nOn Sat, Dec 26, 2015 at 2:13 PM, lowerends notifications@github.com wrote:\n\nIs there anything logged in the storage/logs directory?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/spatie/laravel-permission/issues/29#issuecomment-167327264\n.\n. I've just done a clean install of Laravel and I receive the following message \n[2015-12-26 15:01:56] local.ALERT: Could not register permissions\n. Yes , this occurs during the migrate stage, all database tables exist, I can create roles, but I can't assign or create permissions\n. I have performed a clean installation and I receive the same error message as previously - Could not register permissions\n\nBelow is the contents of the Migrations Table\n2014_10_12_000000_create_users_table\n2014_10_12_100000_create_password_resets_table\n2015_12_30_141351_create_permission_tables\nFollowing the advice above, I have deleted the relevant tables and remove the create_permissions_tables row from migrations.\nI have also cleared the Laravel Log File. Re-executed php artisan migrate and the following was written to the cleared log file\n[2015-12-30 14:21:56] local.ALERT: Could not register permissions \n. ",
    "ITNhatLam": "you do the following steps:\n1. Comment current \"Spatie\\Permission\\PermissionServiceProvider::class,\" in App\\config.php\n2. Run command : \"composer update\"\nCheck again. ",
    "djallits": "I believe you can rename the pivot tables via the provided config file.\n. ",
    "hiendv": "@djallits It's not that simple I'm afraid. For example, you have 2 drivers: frontend and backend. Configuring twice, publishing twice and being forced to edit the later configuration is painful ! Imagine n drivers?\n@freekmurze Ping ! Let me hear your thought !\n. So can I create a branch for Laravel 5.2.* and you will merge it later?\n. ",
    "sebastiandedeyne": "Laravel already has this built in! The directive is @can though, not @hasPermission.\nMore info: https://laravel.com/docs/5.2/authorization#within-blade-templates\n. Could you run composer dump-autoload and try again?\n. Did you add the Spatie\\Permission\\Traits\\HasRoles trait to your user model?\n. Cool :+1: \n. I added a quick mention that the HasRoles trait adds standard eloquent relationships.\nhttps://github.com/spatie/laravel-permission/commit/7020a7b403d4acaeaa99bbb3a9aeb559fa4fc2de\n. Hi, sorry for the late reply.\nIt's not related to #42, I think it's due to how Laravel determines foreign key names. Since you're probably calling the scope via User::admin(), Laravel thinks admin is the relationship name, and not user (it bases the name on the function you're calling):\nhttps://github.com/laravel/framework/blob/5.2/src/Illuminate/Database/Eloquent/Model.php#L1094-L1105\nI'd suggest implementing your own relations, and provide the correct keys so Laravel doesn't try to determine them for you (just overwrite these methods, the rest of the trait should be ok).\nphp\n/**\n * A user may have multiple roles.\n *\n * @return \\Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany\n */\npublic function roles()\n{\n    return $this->belongsToMany(\n        config('laravel-permission.models.role'),\n        config('laravel-permission.table_names.user_has_roles'),\n        'user_id',\n        'role_id',\n        'user'\n    );\n}\n/**\n * A user may have multiple direct permissions.\n *\n * @return \\Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany\n */\npublic function permissions()\n{\n    return $this->belongsToMany(\n        config('laravel-permission.models.permission'),\n        config('laravel-permission.table_names.user_has_permissions'),\n        'user_id',\n        'permission_id',\n        'user'\n    );\n}\n. You have to specify the namespace in your view: @hasanyrole(Spatie\\Permission\\Models\\Role::all()).\nBut it's considered bad practice to give your views the responsibility of retrieving the roles from the database. You're probably better off retrieving them in the controller, and sharing them with the view.\n``` php\n<?php\nnamespace App\\Http\\Controllers;\nuse Spatie\\Permission\\Models\\Role;\nclass clientArea extends Controller\n{\n    public function index()\n    {\n        $roles = Role::all();\n    return view('page.clientArea.index', ['roles' => $roles]);\n}\n\n}\n```\n@hasanyrole($roles)\n    I have one or more of these roles!\n@else\n    I have none of these roles...\n@endhasanyrole\n. Thanks!\n. hasPermissionTo is a method on the model itself (it's not a query scope), so you'd have to filter the users after retrieving them.\nphp\nUser::all()->filter(function (User $user) { return $user->hasPermissionTo('write_post'); });\nA PR adding query scopes to this package would be nice I think (pinging @freekmurze for a second opinion).\n. Not really, this is always the case when truncating tables that have foreign keys.\n. Hmm, the parameter mismatch error mostly occurs when arrays get passed in somewhere instead of strings, or some attribute isn't being casted correctly. Could you post some code snippets?\n. Roles and permissions have a plain Eloquent many-to-many relationship, so you should be able to use the sync method:\nphp\n$role->permissions()->sync([$permissionA, $permissionB]);\n. Thanks!\n. Could you post the method signature of RoleMiddleware::handle? Since you're only passing in one parameter (role), it should be something like public function handle($request, Closure $next, $role).\n. In your route declaration, you're only passing one extra parameter ($role):\n'role:admin'\nIf you're middleware requires two parameters they both need to get passed, for example:\n'role:admin,doStuff'\nWhere doStuff will be the value of permission.\nAlternatively, if permissions aren't always necessary, you could make the parameter nullable:\npublic function handle($request, Closure $next, $role, $permission = null)\n{\n    // ...\n}\n. Hmm use Auth; should do te trick.\nIsn't the HttpException caused by abort?\n. If your role middleware also should parse the permission, it needs to be passed in as part of the role middleware, not in can.\nphp\nRoute::group(['middleware' => ['role:staff,manage-enrolement']], ...\n. You probably need to use the model's fully qualified class name, e.g. App\\Models\\Role.\n. If I understand correctly, you bound a class that doesn't adhere to the Illuminate\\Contracts\\Logging\\Log interface to that interface. The correct solution here would be to write your own Log implementation that calls Bugsnag under the hood, instead of directly binding Log to Bugsnag in the IoC container.. You can use a policy filter to return true or false for any can call (scroll a bit down in this link)\nhttps://laravel.com/docs/5.4/authorization#gates. Half-ignore the last comment, it's not a policy filter, but the Gate facade allows you to define a before closure.\nphp\nGate::before(function ($user) {\n    if ($user->hasRole('Admin')) {\n        return true;\n    }\n});. Could you try clearing you cache between creating and assigning the role?\nIf you're using the default guard, you don't need to worry about that.. Since you're dealing with multiple guards, instead of passing a string try to assign an actual object with assignRole ($user->assignRole($viewerRole)). You can't \"share\" roles between different guards. Different guards require different roles. If you need need one for two guards, create a second role with the same name.. Could you share the configuration of your guards in config/auth.php?. Think something's wrong on our end here. Created a new issue (#294) to follow this up, I'll try to get to this soon.. @wyudong Could you require in dev-master and see if your issue is resolved?. No that's perfect!\nIf you're using multiple guards, I recommend using objects over strings, otherwise the package needs to guess with role/permission you want to use in the case of having two roles/permissions with the same names and different guards.\nI just released these changes in 2.5.1.. I meant 2.1.5 apparently, so this should be resolved!. The HasRoles trait should be enough. Could you clear your cache after assigning the permission to the role and try again?. > but do i have to clear the cache every time i create new roles and permissions and assign these to a user/role\nYou need to clear the cache every time you assign a permission to a role.\n\nand now that I am here, is there a way to auto assign a permission to a role each time a new permission is created\n\nThis really depends on what your needs are. For things like this, I'd recommend looking in to model events and Eloquent observers: https://laravel.com/docs/5.4/eloquent#events. Interesting question. Since it's via the database, nothing's stopping users from using plain relationship methods or queries to assign permissions to roles. In that case, a cache clear would need to happen manually.\nI'd rather say that users always need to ensure the cache is cleared, than sometimes.\n~~Also, I think the default cache driver is used often, so sometimes flushing the cache would flush way more than just the permissions. I don't want our package to have such an invisible impact on an application.~~. > This is what I thought you were saying was not happening, in your prior post.\nWhoops \ud83d\ude05  Didn't write this package so misinformed myself there\nIt's true though that this seems to be a reoccurring issue, what do you think @freekmurze, a note in the readme?. Could it be that you have a wrong use statement in your RoleTransformer?\nShould be use Spatie\\Permission\\Models\\Role, your error shows that you currently have use App\\Models\\Role.. Hi @CupCoffee,\nWe're probably not going to decouple this package from Eloquent, because it would add a lot of complexity, and Eloquent is definitely good enough for the 90% use-case.\nNot sure what I can say to help you out, since it all depends on how the API is set up. I think some calls in this package need to do a few database queries to determine the permission, if that'd be translated to HTTP requests, you'd have a really slow application.\nMaybe you could write a sync to map API contents to your database, and keep using this package? That way you'd be able to keep using this package, and you'll most likely need to keep the data cached locally anyway, two birds with one stone :). This package is indeed compatible with 5.2. You might get an older version though, but it will work!. I don't see what this has to do with IDE support, PhpStorm is perfectly capable of determining the available methods extending the Model class. Eloquent is simply an alias for Model.. You can pluck them from the roles.\nphp\n$user->roles->pluck('name');. Laravel's version constraints don't mean that packages need to follow the same requirements. All of our packages require php 7.0, here's our reasoning on that subject: https://murze.be/2016/01/why-we-are-requiring-php-7-for-our-new-packages/. ",
    "JiberBoom": "@can it does't work in laravel5.4 ,why?. but \uff0ci did it ,it does't work,so what. ",
    "widlturk": "HasRoles add model file  yes\nI used incorrectly. sorry .\n. ",
    "webpixels": "Just did it. It worked. Thanks!\n. I am trying to assign a role to one user and it throws this: \n\"Call to undefined method Illuminate\\Database\\Query\\Builder::assignRole()\"\n. Yes. I added that. Also in my controller I added \n`\n      use Spatie\\Permission\\Models\\Role;\n       use Spatie\\Permission\\Models\\Permission;\n```\n    $user_id = User::create([\n        'first_name' => $request['first_name'],\n        'last_name' => $request['last_name'],\n        'username' => $request['username'],\n        'email' => $request['email'],\n        'password' => bcrypt($request['password']),\n        'is_admin' => true,\n        'is_public' => true\n    ])->id;\n$user = User::find($user_id);\n\n$user->assignRole('admin');\n\n```\n`\nAlso, instead of assigning a role by name, I would like to do it by ID. Is it possible?\n. I solved it.\n. @caleboki Could you specify the issue exactly? It passed some time since I met that problem and don't remember exactly which was the problem so I can help you.\n. ",
    "caleboki": "Hello @webpixels please could you share how you solved it? As I am having a similar challenge with the role and permission relationship\n. I solved it by putting Spatie\\Permission\\Models\\Role and Spatie\\Permission\\Models\\Permission on top of the controller I am calling the givePermissionTo() method from. That is I did\nuse Spatie\\Permission\\Models\\Role;\nuse Spatie\\Permission\\Models\\Permission;\n. @warlord0 what do you mean?\n. ",
    "vexsolutions": "@webpixels would be nice if you included how you \"solved\" it for those coming to this thread with a similar issue. \n. Ive just run into this (sort of) as well... I ran \nphp artisan vendor:publish --provider='Spatie\\Permission\\PermissionServiceProvider' --tag='migrations'\non a new install of 5.5  (Auth was already installed) and only the roles role_user tables were created. . Just check and the service providers wasn't registered either. . This is a face palm moment if ever there was one. Thank you @drbyte you have show me the error of my ways. ",
    "tomschlick": "It's not that the permission being passed in doesn't exist. Its that the $this->permissions array is null if there are no permissions records for that object. \nSo for instance if I'm a new user and have 0 direct permissions (maybe just the role has the permissions) then that method will error out.\n. Odd... the test you just provided is returning an empty collection which satisfies the ->contains() call but my app is returning null for the ->permissions which throws the error. Looking into this further to see why.\n. My bad.\nTurns out an old permissions column was still active in our DB schema from our previous auth system. It was removed from the $visible array at the top of our user class so I wasn't able to see it when dumping.\nSo that was the cause of the null returns from $this->permissions. \nSorry for the trouble! :smile: \n. ",
    "bh-rat": "Same goes for $role->users.\n. Thanks for the solution @sebastiandedeyne . I'll soon try and update here for future reference.\n. @sebastiandedeyne Is this causing #41 ?\n. ",
    "alirzayev": "@bh-rat put it in your User Model.\npublic function roles()\n    {\n            return $this->belongsToMany(\n                config('permission.models.role'),\n                config('permission.table_names.model_has_roles'),\n                'model_id',\n                'role_id'\n            );\n    }. ",
    "CalebJTSmith": "Yes - I had to double check to make sure. This is coming from a fairly fresh install, so I should be good to go... I just can't figure out what I could be missing. Once I assign the permissions to roles in the system, I should be good to go right?\n. I can do @if(count($user->permissions->where('name', 'full-access')) >= 1) as a work around and pull in per user permissions - so that's good at least! I'll continue to investigate why '@can' is failing and then give it another shot later.\n. ",
    "JFOC": "Solved !\nForgot to adding into app.php\nSpatie\\Permission\\PermissionServiceProvider::class,\n. ",
    "nafil16": "This Solved My problem\nSolved !\nForgot to adding into app.php\nSpatie\\Permission\\PermissionServiceProvider::class,. ",
    "Maxeee09": "Yes @freekmurze I understand your choice. I didn't noticed that you can use permission with default laravel \"can\" (or \"cannot\") blade directive. My bad\n. ",
    "adaojunior": "I just noticed that hasDirectPermission is type hinting $permission as Permission, but it stills checks if $permission is string.\nShould we change it to hasDirectPermission($permission), otherwise it is gonna fail when trying to pass a string.\n. @freekmurze what about hasDirectPermission expecting a Permission ?\n. https://github.com/spatie/laravel-permission/pull/51\n. no problem, thank you for this great library\n. ",
    "danielsdeboer": "Thanks, done.\n. On second thought, this isn't going to work properly with new installs because it publishes both migrations and the second one will fail.\n. ",
    "SpacePossum": ":+1: \n. ",
    "stefro": "Thanks @sebastiandedeyne \nSo, after all, it was just me :-)\n. I can also confirm this happens when using :memory: as a testing database (sqlite). I think @nisbeti figured it out:\nWhen using in memory sqlite database for testing the migrations may not be run until after the boot method, so the $permissionLoader->registerPermissions(); call will fail if called from boot()\nHe has created a PR for this. I wasn't able to test this myself. \nI'm curious @freekmurze do you also use SQLite in :memory: for your tests? Until now I've always been using MySQL with database transactions. Lately (and after starting the TDD course from Adam) I was thinking about switching to SQLite for faster speed in my tests.. Thanks Freek. I'm going to schedule some time next week to figure it out why I'm getting this problem. If I can find it, I will post it. Thanks again!. I finaly figured it out after looking at the TestCase.php from the package! The trick was to add this method to the TestCase.php in my Project:\nprotected function reloadPermissions()\n    {\n        return app(PermissionRegistrar::class)->registerPermissions();\n    }\nAnd of course call this method in the setUp() of the testcase.. ",
    "volkeransmann": "Hi again,\ni just discovered after flushing the \"storage/framework/cache\" folder \"can\" is working as expected.\nBut I have to do so after every change in the role<->permission relations.\nSeems something is not refreshing the cache properly?\n. Ok. figured it out.\nJust in case someone wonders - you can't just change relations in the DB directly. Always go the programmatical way - this way \"RefreshesPermissionCache\" - Trait is used.\n. ",
    "Gonzalo2324": "And how I can do that you say?\n2016-04-11 16:24 GMT-05:00 Freek Van der Herten notifications@github.com:\n\nDid you publish the migration included in this package and did you run php\nartisan migrate afterwards?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/spatie/laravel-permission/issues/68#issuecomment-208568955\n. Call to undefined method\nIlluminate\\Database\\Query\\Builder::givePermissionTo()\npublic function store(Request $request)\n    {\n\n```\n    $permission = \\App\\Permission::find($request['idp']);\n    $role = \\App\\Role::find($request['idr']);\n    $role->givePermissionTo($permission->name);\nreturn view('roles.permissions');\n\n}\n```\n2016-04-11 16:40 GMT-05:00 Freek Van der Herten notifications@github.com:\n\nIf you follow the instructions provided in the readme it all should work.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/spatie/laravel-permission/issues/68#issuecomment-208574335\n. I have the same problem...\n. And how I can assign to a role a permission?\nBy applying:\n$ Permission = \\ App \\ Permission :: find ($ request ['idp']);\n\n$ Roles = \\ App \\ Role :: find ($ request ['IDR']) -> first ();\n     $ Roles -> givePermissionTo ($ permission-> name);\nsentence givePermissionTo () attempts to insert the data into the table 'user_has_permissions' being that should insert data into the table 'role_has_permissions'\n.  I tried and told me but I throw this error\nPDOException in Connection.php line 390: SQLSTATE[42S22]: Column not found: 1054 Unknown column 'role_id' in 'field list'\nin Connection.php line 390\nat PDO->prepare('insert into `user_has_permissions` (`permission_id`, `role_id`) values (?, ?)') in C:\\xampp\\htdocs\\SystemLaravel2\\vendor\\laravel\\framework\\src\\Illuminate\\Database\\Connection.php line 390\nat Connection->Illuminate\\Database\\{closure}(object(MySqlConnection), 'insert into `user_has_permissions` (`permission_id`, `role_id`) values (?, ?)', array('1', '1')) in Connection.php line 648\nat Connection->runQueryCallback('insert into `user_has_permissions` (`permission_id`, `role_id`) values (?, ?)', array('1', '1'), object(Closure)) in Connection.php line 611\nat Connection->run('insert into `user_has_permissions` (`permission_id`, `role_id`) values (?, ?)', array('1', '1'), object(Closure)) in Connection.php line 391\nat Connection->statement('insert into `user_has_permissions` (`permission_id`, `role_id`) values (?, ?)', array('1', '1')) in Connection.php line 347\nat Connection->insert('insert into `user_has_permissions` (`permission_id`, `role_id`) values (?, ?)', array('1', '1')) in Builder.php line 1805\nat Builder->insert(array(array('role_id' => '1', 'permission_id' => '1'))) in BelongsToMany.php line 898\nat BelongsToMany->attach('1', array(), true) in BelongsToMany.php line 558\nat BelongsToMany->save(object(Permission)) in HasPermissions.php line 18\nat Role->givePermissionTo('crear usuarios') in AuxpermisosController.php line 68\nat AuxpermisosController->store(object(Request))\nat call_user_func_array(array(object(AuxpermisosController), 'store'), array(object(Request))) in Controller.php line 256\nat Controller->callAction('store', array(object(Request))) in ControllerDispatcher.php line 164\nat ControllerDispatcher->call(object(AuxpermisosController), object(Route), 'store') in ControllerDispatcher.php line 112\nat ControllerDispatcher->Illuminate\\Routing\\{closure}(object(Request))\nat call_user_func(object(Closure), object(Request)) in Pipeline.php line 139\nat Pipeline->Illuminate\\Pipeline\\{closure}(object(Request))\nat call_user_func(object(Closure), object(Request)) in Pipeline.php line 103\nat Pipeline->then(object(Closure)) in ControllerDispatcher.php line 114\nat ControllerDispatcher->callWithinStack(object(AuxpermisosController), object(Route), object(Request), 'store') in ControllerDispatcher.php line 69\nat ControllerDispatcher->dispatch(object(Route), object(Request), 'App\\Http\\Controllers\\AuxpermisosController', 'store') in Route.php line 203\nat Route->runWithCustomDispatcher(object(Request)) in Route.php line 134\nat Route->run(object(Request)) in Router.php line 708\nat Router->Illuminate\\Routing\\{closure}(object(Request))\nat call_user_func(object(Closure), object(Request)) in Pipeline.php line 139\nat Pipeline->Illuminate\\Pipeline\\{closure}(object(Request))\nat call_user_func(object(Closure), object(Request)) in Pipeline.php line 103\nat Pipeline->then(object(Closure)) in Router.php line 710\nat Router->runRouteWithinStack(object(Route), object(Request)) in Router.php line 675\nat Router->dispatchToRoute(object(Request)) in Router.php line 635\nat Router->dispatch(object(Request)) in Kernel.php line 236\nat Kernel->Illuminate\\Foundation\\Http\\{closure}(object(Request))\nat call_user_func(object(Closure), object(Request)) in Pipeline.php line 139\nat Pipeline->Illuminate\\Pipeline\\{closure}(object(Request)) in Debugbar.php line 49\nat Debugbar->handle(object(Request), object(Closure))\nat call_user_func_array(array(object(Debugbar), 'handle'), array(object(Request), object(Closure))) in Pipeline.php line 124\nat Pipeline->Illuminate\\Pipeline\\{closure}(object(Request)) in VerifyCsrfToken.php line 50\nat VerifyCsrfToken->handle(object(Request), object(Closure))\nat call_user_func_array(array(object(VerifyCsrfToken), 'handle'), array(object(Request), object(Closure))) in Pipeline.php line 124\nat Pipeline->Illuminate\\Pipeline\\{closure}(object(Request)) in ShareErrorsFromSession.php line 49\nat ShareErrorsFromSession->handle(object(Request), object(Closure))\nat call_user_func_array(array(object(ShareErrorsFromSession), 'handle'), array(object(Request), object(Closure))) in Pipeline.php line 124\nat Pipeline->Illuminate\\Pipeline\\{closure}(object(Request)) in StartSession.php line 62\nat StartSession->handle(object(Request), object(Closure))\nat call_user_func_array(array(object(StartSession), 'handle'), array(object(Request), object(Closure))) in Pipeline.php line 124\nat Pipeline->Illuminate\\Pipeline\\{closure}(object(Request)) in AddQueuedCookiesToResponse.php line 37\nat AddQueuedCookiesToResponse->handle(object(Request), object(Closure))\nat call_user_func_array(array(object(AddQueuedCookiesToResponse), 'handle'), array(object(Request), object(Closure))) in Pipeline.php line 124\nat Pipeline->Illuminate\\Pipeline\\{closure}(object(Request)) in EncryptCookies.php line 59\nat EncryptCookies->handle(object(Request), object(Closure))\nat call_user_func_array(array(object(EncryptCookies), 'handle'), array(object(Request), object(Closure))) in Pipeline.php line 124\nat Pipeline->Illuminate\\Pipeline\\{closure}(object(Request)) in CheckForMaintenanceMode.php line 44\nat CheckForMaintenanceMode->handle(object(Request), object(Closure))\nat call_user_func_array(array(object(CheckForMaintenanceMode), 'handle'), array(object(Request), object(Closure))) in Pipeline.php line 124\nat Pipeline->Illuminate\\Pipeline\\{closure}(object(Request))\nat call_user_func(object(Closure), object(Request)) in Pipeline.php line 103\nat Pipeline->then(object(Closure)) in Kernel.php line 122\nat Kernel->sendRequestThroughRouter(object(Request)) in Kernel.php line 87\nat Kernel->handle(object(Request)) in index.php line 54\n. Thanks @drbyte but how could I make relations with the user model?. ",
    "kortby": "Add this to your User Model:\n```\nuse Illuminate\\Notifications\\Notifiable;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nuse Spatie\\Permission\\Traits\\HasRoles;\nclass User extends Authenticatable\n{\n    use  Notifiable, HasRoles;\n```\n. Add this to your User Model\nuse Illuminate\\Notifications\\Notifiable;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nuse Spatie\\Permission\\Traits\\HasRoles;\nclass User extends Authenticatable\n{\n    use  Notifiable, HasRoles;. ",
    "inzig": "facing the same error.. ",
    "LKaemmerling": "@freekmurze This Check doesn't work correctly. \n\"Cannot redeclare class CreatePermissionTables\"\nWhen i vendor:push every times a new migration will be created.\n. That fix the issue but isn't as clean as possible. It's cleaner to have a static file name (and the possible to check the file exisits in the migrations dir).\n. Year the fact is nice, but it would be cleaner to put the filename static and add a Comment into the Migration with the current timestamp\n. I think it is a bug.. You should install a package once, and a package publish the migrations and so one, once. But so you can publish it unlimited times (without run composer dump-autoload)\n\n. Can't reproduce this on Laravel 5.2.39\n. @freekmurze This is mergeable (all Tests are OK). ",
    "nWidart": "I was able to add the required logic on the Role model with this:\n``` php\npublic function hasPermissionTo($permission)\n{\n    if (is_string($permission)) {\n        $permission = app(Permission::class)->findByName($permission);\n    }\nreturn $this->hasDirectPermission($permission);\n\n}\nprotected function hasDirectPermission($permission)\n{\n    if (is_string($permission)) {\n        $permission = app(Permission::class)->findByName($permission);\n    if (!$permission) {\n        return false;\n    }\n}\n\nreturn $this->permissions->contains('id', $permission->id);\n\n}\n```\nWould a PR with adding this be ok, or do I keep it in my extended Role class ? \n. It has been a while since I wanted to use this package. \ud83d\ude04 \nPR sent, #78 .\n. Awesome, thank you! \ud83d\udc4d \n. That's awesome, thanks! \ud83d\ude04 \n. ",
    "vdhicts": "Thank you for the reply. The test indeed proves I'm doing something wrong. I've also tested it on a fresh laravel installation and it works. The test your pointing to, gave me an idea to find the solution for my problem. \nFor others who might experience this problem:\nOn the multi-tenant project I'm using this for, the database is selected manually and the permission service providers run before the database selection. When manually registering the service provider after the database selection, this problem doesn't occur anymore.\nRegistering service providers manually can be done by:\napp()->register(\\Spatie\\Permission\\PermissionServiceProvider\\PermissionServiceProvider::class);\n. ",
    "rickselby": "I'm having the same issue, and would appreciate any assistance in sorting it.\nI don't think I'm doing anything clever with database selection, but the project is already quite large, so there might be something in there causing a similar issue.\nWhere would I manually register the provider to get around this?\n. It's working again now; it was a cache issue.\n. Ah, I know what the issue was now. I'm adding this to our in-house users module. I added the users module provider to the service provider list, but not the PermissionServiceProvider, so the Contracts won't have been registered, causing the error.\nSorry!\n. ",
    "graphem": "I am experiencing the same issue, with cache database, the permissions seems to not be respected. I get this error: Could not register permissions. Seems like the cache is not storing the Eloquent object.\n. ",
    "JiovannaMx": "It happends when value field of cache table is text type, you need to change it to longText.. ",
    "waylaidwanderer": "Let's say I have this role with the following permissions:\nRole::create(['name' => 'regular'])->givePermissionTo('add funds')\n                                    ->givePermissionTo('withdraw balance')\n                                    ->givePermissionTo('chat')\n                                    ->givePermissionTo('buy')\n                                    ->givePermissionTo('deposit items')\n                                    ->givePermissionTo('withdraw items');\nI want the ability to revoke all these permissions modularly for a singular user. Is my only alternative to assign these permissions to every user that is created, or create a role that doesn't have said permission? What if I want to remove more than one permission? If the former, it seems kind of excessive, and would be a lot of extra rows in the user_has_permissions table, and the latter just isn't feasible.\n. Thanks for the reply, Freek. I appreciate your thoughts on this issue.\n. ",
    "Rjs37": "Fair enough, cheers for the prompt reply :). I won't bother doing it as a fork as I'd rather keep to the original repo. I'll stick to doing it separate from the package. \n. ",
    "kingsloi": "Weird as I also have v5.2.39. I did definitely dump composer, clear cache views, etc. I'll have another look!\n. ",
    "peterquentin": "@Cannonb4ll Here's how I do it:\nphp artisan make:middleware RoleMiddleware\nThis will create a RoleMiddleware for you and here is a gist of mine: https://gist.github.com/peterquentin/7c7fbe49b9f2d34ab20f0b2b2b50c84a\nDon't forget to add the route middleware to your App\\HTTP\\Kernel\nAnd last but not least protect your routes with the middleware:\nRoute::group(['middleware' => ['role:admin,access_backend']], function () {\n    //\n});\n. I'd say yes, though it's not up to me ;D\n. @freekmurze Pull request  #92 made, please review if it's to your liking. :grin: \n. Okay I've removed the joinings option because it wouldn't be used anyway. Also I was not sure what guidelines you ment when you reffered to #96. Anyhow please check again :)\n. @freekmurze can you pull this now?\n. Hi Freek,\nSweet, I was under the impression that saveMany would use 1 INSERT query. \nAm I right about that or totally wrong? thanks for pulling!\n. Currently you should either pass in an array of roles or just a single role or a collection of roles.\nphp\n$request->user()->hasAnyRole(['Moderator', 'Gamemaster', 'Developer', 'Manager'])\nor\nphp\n$request->user()->hasAnyRole(Role::whereIn('name', ['Moderator', 'Gamemaster', 'Developer', 'Manager'])->get())\nShould both work. I guess I could make a quick pull request to also allow multiple arguments. Would that be okay?\n. I realize as i'm typing to explain this it's silly, I was trying to give the user the option to use the joinings option that saveMany on Eloquent has. I'll remove this because in this particular case we can work without it.\n. Ah learned something already, thnx!\n. I could ofcourse, here is the ripple effect though.\nThe method no longer requires you to pass a parameter to givePermissionTo()  even though we do need at least one. Therefore I would need to write one more test to ensure we have one argument if not Throw a proper exception.\nIf you like it that way I will implement it, any suggestions on the Exception and Exception message?\n. Okay, it's done :+1: \n. ",
    "Cannonb4ll": "Thanks mate! Great solution :)\n. I currently have this solved in another way. I just made the Download model also Roleable and I am syncing the roles to that specific model.\nThen I just check in a global function inside the Download model if the user is permitted to see the file.\nBasically, Downloads also have roles and I compare them with the User's roles.. ",
    "YoruNoTori": "Ok, sorry, I just figure it out, I can only use here\" return redirect\" to a certain route, not a view, but it works just fine with me\n. ",
    "Reydesel": "Ok that worked, sorry i was using it on the controller. Thanks \n. ",
    "ergonomicus": "@dylanharbour I have had the same issue. Try deleting everything in storage/framework/cache folder. In my case 'php artisan cache:clear' didn't do anything, so I manually deleted those files and it started working.\nFrom my experience (not so long) file permissions on system cause 95% of all of the problems, and 5% are typos. So I tend to first try with 'sudo chmod -R 777 storage/ bootstrap/cache/' and if that doesn't help - find the typo!\n. Thanks for prompt response. I don't have snippets, I had to deliver some demo fast, so I ended up looping through all permissions on some role, revoking them, and then looping again through selected permissions (returned from form, via checkboxes) and assigning them again. This looks like a really bad approach, so my question is how do you sync permissions on some role after they have been created? I don't see that part in the docs. \n. ",
    "the94air": "It took me a lot of time to realize that php artisan cache:clear will not work and I need to deleted any folder in storage/framework/cache manually. Every thing is working very well. You made my day. Thanks @ergonomicus.. I had the same problem but I solved it by implementing Role or Permission models to my app and every thing is working fine.\nhttps://github.com/spatie/laravel-permission#extending. At first I got the same exception but after making my own models every thing is working.\n```php\n<?php\n// App\\Permission\nnamespace App;\nuse Spatie\\Permission\\Contracts\\Permission as PermissionInterface;\nuse Spatie\\Permission\\Models\\Permission as PermissionModel;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass Permission extends PermissionModel implements PermissionInterface\n{\n    protected $guard_name = 'admin';\n}\nphp\n<?php\n// App\\Role\nnamespace App;\nuse Spatie\\Permission\\Contracts\\Role as RoleInterface;\nuse Spatie\\Permission\\Models\\Role as RoleModel;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass Role extends RoleModel implements RoleInterface\n{\n    protected $guard_name = 'admin';\n}\n```. @c00p3r I think that will do the same with multi guard. Is it fixed now?. ",
    "jryd": "You can use the relationships between user and role to retrieve this.\nI've been doing it like this:\n1. Retrieve the role; $role= Role::findOrFail($id); inside the controller and pass it to the view\n2. In my view access it through $role->users->username where username can be whatever you want to retrieve.\nIn your case it seems like you are wanting to list them all, the following should do the trick, although I haven't tested it:\n$users_list= Role::findOrFail($id)->users->lists('name', 'id');\n. Putting it in to an array worked perfectly.\n. ",
    "stijnvanouplines": "Thanks @jryd, this worked for me:\n$users_list= Role::findOrFail($role_id)->users()\n    ->select(DB::raw(\"CONCAT(first_name,' ', last_name) AS full_name, id\"))\n    ->lists('full_name', 'id')\n    ->all();\n. ",
    "csspcc": "Correct me if i'm wrong, but the cache gets reset every time you create/update/delete some model.\nFor example, I have \"last_seen\" date for User, every time user loads a page, the \"last_seen\" date gets updated and the cache gets reset, so for me there is no point in caching and I would disable it. \nBut it would be cool to reset cache only when changes are made to roles and permissions tables, if this is a viable option.\n. ",
    "sazo": "I got a good argument - Testing.\nI need to clear the cache before each test. Woot be nice just to disable it.. ",
    "timgavin": "Never mind; realized I could do @hasanyrole(['manager', 'employee']) instead :)\n. @meNESS I was having a similar issue; publishing the bugsnag config file and flushing the cache fixed it.\nphp artisan vendor:publish\nphp artisan cache:clear. Thanks. I actually tried it as well and it works. I should have closed this question but forgot. :P. ",
    "kirgy": "There is another parameter. Removing that solves the problem but creates another:\nClass 'App\\Http\\Middleware\\Auth' not found\nI am thinking I've missed something... also, some functions in that class rely on that parameter.\nHere is the whole class:\n```\n// RoleMiddleware.php\nnamespace App\\Http\\Middleware;\nuse Closure;\nclass RoleMiddleware\n{\n    /\n     * Handle an incoming request.\n     \n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\Closure  $next\n     * @return mixed\n     /\n    public function handle($request, Closure $next, $role, $permission)\n    {\n        if (Auth::guest()) {\n            return redirect($urlOfYourLoginPage);\n        }\n    if (! $request->user()->hasRole($role)) {\n       abort(403);\n    }\n\n    if (! $request->user()->can($permission)) {\n       abort(403);\n    }\n\n    return $next($request);\n}\n\n}\n```\n. Thanks for your help @sebastiandedeyne.\nI see, so I've nulled the permissions parameter which seems to solve these issues. The only issue now is use of the Auth class:\n\nFatalErrorException in RoleMiddleware.php line 18:\nClass 'App\\Http\\Middleware\\Auth' not found\n\nIncluding the Auth fascade or directly referencing in the namespace via either:\n```\nuse Auth;\n// or\nuse Illuminate\\Support\\Facades\\Auth\n```\nthrows this:\n\nHttpException in Application.php line 905:\nWhich is part of the \"getSttyColumns()\" function in that file. I'm baffled now.\n. Ah yes, where I was going wrong is I never set a catch around the permissions as I don't want to always parse permissions to the middleware. This was the cause of all my woes!\n\nWould be nice to have this as a feature in the package:\n```\n    /\n     * Handle an incoming request.\n     \n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\Closure  $next\n     * @return mixed\n     /\n    public function handle($request, Closure $next, $role, $permission = null)\n    {\n        if (Auth::guest()) {\n            return redirect($urlOfYourLoginPage);\n        }\n    if (! $request->user()->hasRole($role)) {\n       abort(403);\n    }\n\n    if($permission != null) {\n        if (! $request->user()->can($permission)) {\n           abort(403);\n        }\n    }\n\n    return $next($request);\n}\n\n```\n. I'm revisiting this error some days on now I also need to check for \"permissions\" explicitly in routing middleware.\nI've attached permissions to roles, and want to check that someone who's role has the permission \"manage-enrolement\" can access the route. The user must also be a staff member. The routing is as follows:\nRoute::group(['middleware' => ['role:staff', 'can:manage-enrolement']], function () {\n    Route::get('/people', 'PeopleController@index');\n});\nHowever, Autorize.php returns \"This action is unauthorized.\" The \"RoleMiddleware.php\" file does get called, but the 4th parameter is never parsed for the permissions.\nAny idea what could be wrong here?\n. Thanks @sebastiandedeyne , a syntax difference from the other permissions provider I had used seemed to have tripped me up here. Working perfectly. Thanks \ud83d\udc4d \n. ",
    "mstralka": "I figured out a workaround, but I don't think I'll be able to use in-memory sqlite.  I created a connection  in database.php file like this:\n'sqlite_testing' => [\n        'driver' => 'sqlite',\n        'database' => database_path('testing.sqlite'),\n        'prefix' => '',\n    ]\nMy test class now implements setUpBeforeClass like this:\npublic static function setUpBeforeClass()\n {\n    parent::setUpBeforeClass();\n    $p = new Process('php artisan migrate:refresh --seed --database=sqlite_testing');\n    $p->run();\n}\nThen instead of using the DatabaseMigrations trait, I use the DatabaseTransactions trait.  Doing this eliminates the errors in the log.\nThanks\n. Thank you for the suggestion.  I tried that too, but this package's PermissionServiceProvider is trying to load the Permission objects from the database during the application's bootstrap process.\nI can't run Artisan::call('migrate') before the application is bootstrapped inside of the parent setUp() method, and I can't make it run during the bootstrap process, before PermissionServiceProvider is booted.  I could write a custom ServiceProvider and inserted it before PermissionServiceProvider in config/app.php, but that seems strange.  \nSo I guess I'll settle for testing against a database on the file system and seed it as noted above.\nThank you\n. ",
    "Mahmoudz": "Same error, below is my output for:\nLog::alert('Could not register permissions');\n            Log::alert($e->getMessage());\n            Log::alert($e->getTraceAsString());\nRunning this from PHPUnit using in memory SQLite.\nI think #143 is going to solve this!\n```shell\n[2016-12-30 14:51:34] testing.ALERT: Could not register permissions\n[2016-12-30 14:51:34] testing.ALERT: SQLSTATE[HY000] General error: 1 no such table: permissions (SQL: select * from \"permissions\")\n[2016-12-30 14:51:34] testing.ALERT: #0 /Users/mz/Codes/Projects/Prints-OMS/Prints-OMS/vendor/laravel/framework/src/Illuminate/Database/Connection.php(726): Illuminate\\Database\\Connection->runQueryCallback('select * from \"...', Array, Object(Closure))\n1 /Users/mz/Codes/Projects/Prints-OMS/Prints-OMS/vendor/laravel/framework/src/Illuminate/Database/Connection.php(351): Illuminate\\Database\\Connection->run('select * from \"...', Array, Object(Closure))\n2 /Users/mz/Codes/Projects/Prints-OMS/Prints-OMS/vendor/laravel/framework/src/Illuminate/Database/Query/Builder.php(1648): Illuminate\\Database\\Connection->select('select * from \"...', Array, true)\n3 /Users/mz/Codes/Projects/Prints-OMS/Prints-OMS/vendor/laravel/framework/src/Illuminate/Database/Query/Builder.php(1634): Illuminate\\Database\\Query\\Builder->runSelect()\n4 /Users/mz/Codes/Projects/Prints-OMS/Prints-OMS/vendor/laravel/framework/src/Illuminate/Database/Eloquent/Builder.php(636): Illuminate\\Database\\Query\\Builder->get(Array)\n5 /Users/mz/Codes/Projects/Prints-OMS/Prints-OMS/vendor/laravel/framework/src/Illuminate/Database/Eloquent/Builder.php(327): Illuminate\\Database\\Eloquent\\Builder->getModels(Array)\n6 /Users/mz/Codes/Projects/Prints-OMS/Prints-OMS/vendor/spatie/laravel-permission/src/PermissionRegistrar.php(77): Illuminate\\Database\\Eloquent\\Builder->get()\n7 /Users/mz/Codes/Projects/Prints-OMS/Prints-OMS/vendor/laravel/framework/src/Illuminate/Cache/Repository.php(349): Spatie\\Permission\\PermissionRegistrar->Spatie\\Permission{closure}()\n8 /Users/mz/Codes/Projects/Prints-OMS/Prints-OMS/vendor/spatie/laravel-permission/src/PermissionRegistrar.php(78): Illuminate\\Cache\\Repository->rememberForever('spatie.permissi...', Object(Closure))\n9 /Users/mz/Codes/Projects/Prints-OMS/Prints-OMS/vendor/spatie/laravel-permission/src/PermissionRegistrar.php(46): Spatie\\Permission\\PermissionRegistrar->getPermissions()\n10 /Users/mz/Codes/Projects/Prints-OMS/Prints-OMS/vendor/spatie/laravel-permission/src/PermissionServiceProvider.php(37): Spatie\\Permission\\PermissionRegistrar->registerPermissions()\n11 [internal function]: Spatie\\Permission\\PermissionServiceProvider->boot(Object(Spatie\\Permission\\PermissionRegistrar))\n12 /Users/mz/Codes/Projects/Prints-OMS/Prints-OMS/vendor/laravel/framework/src/Illuminate/Container/Container.php(508): call_user_func_array(Array, Array)\n13 /Users/mz/Codes/Projects/Prints-OMS/Prints-OMS/vendor/laravel/framework/src/Illuminate/Foundation/Application.php(769): Illuminate\\Container\\Container->call(Array)\n14 /Users/mz/Codes/Projects/Prints-OMS/Prints-OMS/vendor/laravel/framework/src/Illuminate/Foundation/Application.php(752): Illuminate\\Foundation\\Application->bootProvider(Object(Spatie\\Permission\\PermissionServiceProvider))\n15 [internal function]: Illuminate\\Foundation\\Application->Illuminate\\Foundation{closure}(Object(Spatie\\Permission\\PermissionServiceProvider), 40)\n16 /Users/mz/Codes/Projects/Prints-OMS/Prints-OMS/vendor/laravel/framework/src/Illuminate/Foundation/Application.php(753): array_walk(Array, Object(Closure))\n17 /Users/mz/Codes/Projects/Prints-OMS/Prints-OMS/vendor/laravel/framework/src/Illuminate/Foundation/Bootstrap/BootProviders.php(17): Illuminate\\Foundation\\Application->boot()\n18 /Users/mz/Codes/Projects/Prints-OMS/Prints-OMS/vendor/laravel/framework/src/Illuminate/Foundation/Application.php(203): Illuminate\\Foundation\\Bootstrap\\BootProviders->bootstrap(Object(Illuminate\\Foundation\\Application))\n19 /Users/mz/Codes/Projects/Prints-OMS/Prints-OMS/vendor/laravel/framework/src/Illuminate/Foundation/Console/Kernel.php(267): Illuminate\\Foundation\\Application->bootstrapWith(Array)\n20 /Users/mz/Codes/Projects/Prints-OMS/Prints-OMS/app/Port/Tests/PHPUnit/Abstracts/TestCase.php(66): Illuminate\\Foundation\\Console\\Kernel->bootstrap()\n21 /Users/mz/Codes/Projects/Prints-OMS/Prints-OMS/vendor/laravel/framework/src/Illuminate/Foundation/Testing/TestCase.php(91): App\\Port\\Tests\\PHPUnit\\Abstracts\\TestCase->createApplication()\n22 /Users/mz/Codes/Projects/Prints-OMS/Prints-OMS/vendor/laravel/framework/src/Illuminate/Foundation/Testing/TestCase.php(66): Illuminate\\Foundation\\Testing\\TestCase->refreshApplication()\n23 /Users/mz/Codes/Projects/Prints-OMS/Prints-OMS/app/Port/Tests/PHPUnit/Abstracts/TestCase.php(33): Illuminate\\Foundation\\Testing\\TestCase->setUp()\n24 /Users/mz/Codes/Projects/Prints-OMS/Prints-OMS/vendor/phpunit/phpunit/src/Framework/TestCase.php(950): App\\Port\\Tests\\PHPUnit\\Abstracts\\TestCase->setUp()\n25 /Users/mz/Codes/Projects/Prints-OMS/Prints-OMS/vendor/phpunit/phpunit/src/Framework/TestResult.php(701): PHPUnit_Framework_TestCase->runBare()\n26 /Users/mz/Codes/Projects/Prints-OMS/Prints-OMS/vendor/phpunit/phpunit/src/Framework/TestCase.php(909): PHPUnit_Framework_TestResult->run(Object(App\\Containers\\User\\UI\\API\\Tests\\Functional\\RegisterUserThatWasNotVisitorTest))\n27 /Users/mz/Codes/Projects/Prints-OMS/Prints-OMS/vendor/phpunit/phpunit/src/Framework/TestSuite.php(728): PHPUnit_Framework_TestCase->run(Object(PHPUnit_Framework_TestResult))\n28 /Users/mz/Codes/Projects/Prints-OMS/Prints-OMS/vendor/phpunit/phpunit/src/Framework/TestSuite.php(728): PHPUnit_Framework_TestSuite->run(Object(PHPUnit_Framework_TestResult))\n29 /Users/mz/Codes/Projects/Prints-OMS/Prints-OMS/vendor/phpunit/phpunit/src/TextUI/TestRunner.php(487): PHPUnit_Framework_TestSuite->run(Object(PHPUnit_Framework_TestResult))\n30 /Users/mz/Codes/Projects/Prints-OMS/Prints-OMS/vendor/phpunit/phpunit/src/TextUI/Command.php(188): PHPUnit_TextUI_TestRunner->doRun(Object(PHPUnit_Framework_TestSuite), Array, true)\n31 /Users/mz/Codes/Projects/Prints-OMS/Prints-OMS/vendor/phpunit/phpunit/src/TextUI/Command.php(118): PHPUnit_TextUI_Command->run(Array, true)\n32 /Users/mz/Codes/Projects/Prints-OMS/Prints-OMS/vendor/phpunit/phpunit/phpunit(52): PHPUnit_TextUI_Command::main()\n33 {main}\n```\n. Hi @AlexVanderbist, thanks for your reply.\nI forget to mention that all my test are passing. But still getting the above alert logged before every single test. Only in the testing environment.\nAlso that's not related to upgrading Laravel, I just remembered that I used to have the logging line commented out, because I didn't know why I'm getting this in my Log while everything seems working fine. But now after updating my dependencies obviously the line is not commented out anymore.\nYes I am migrating the DB on the right time. The problem is internal in the package I guess! When registering the PermissionServiceProvider, the boot function calls registerPermissions which calls getPermissions() and this executes app(Permission::class)->with('roles')->get(); which executes this query select * from \"permissions\" in order to cache them..\nBut what I'm not getting is why executing a query during the service providers registration when migrations are not prepared!! maybe if the config file has enable_cache = false feature where we can turn it off could be a quick work around!\n. ",
    "arenowebdev": "Will look at and work on the StyleCI and TravisCI failures tomorrow. For some reason didn't think to check PHP 5.6 \ud83d\ude28 \n. This is the one line I'm not certain you want in here since your hasPermissionTo method doesn't attempt to catch any missing permissions. Would love to hear the feedback and am available to update the PR as necessary.\n. ",
    "lukasoppermann": "Did you try it like this:\nphp\nRoute::group(['prefix' => 'task', 'middleware' => ['role:Task User,Task Owner,Task Manager']], function() {\n. No, true, I think you are right and this is not possible. I do think it might be a valuable concept, so maybe you can send in a pull request, @freekmurze ?\n. That does make sense. But this would still require a PR, correct? I think I deleted the part from the middleware, that requires a role to pass, so that I can just check for permissions. Or is this already possible out of the box? I might have messed that up.\nHowever I agree that the permission solution seems more appropriate.\n. ",
    "warlord0": "I did, but because the RoleMiddleware handle function expects $role, $permission it wouldn't be right.\nAlso if I do a dump/dd of the $role within the function I only see the first role passed. So I'm guessing that even if I use several middlware role: statements that it would fail on the first one that returned false. I think I somehow need to pass an array of roles to the middleware. But suspect there's something parsing the middleware before it gets called.\n. I could go the permission only route. But I'd have to name each permission carefully and then probably just have one Role.\neg.\nRole\\Task View\nRole\\Task Update Own\nRole\\Task Update Any\nNot impossible. A bit of a mod to the RoleMiddleware to remove the need for role/overwrite it with \"Role\".\nIn fact it's started me thinking a bit differently about the whole thing :D\n. This seems to work for the case I'm looking for so far.\nUpdate the Roles and Permissions\nRole: Task <- the root Role\nPermission: Read, Update, Manage\nRole: Task Reader\nPermission: Read\nRole: Task Owner\nPermission: Read, Update\nRole: Task Manager\nPermission: Read, Update, Manage\nThen I give the root role \"Task\" all of the permissions associated with Task and in the route use role:Task,[permission] to determine if a user can/can't access it. So I think the key for me was just creating the root role.\nThen I use @can instead of @hasrole in the blades.\n. I've been blazing away at this and after some rethinking realised that role checking wasn't what I was after :D I originally imagined Roles and Permissions like a tree structure, when actually it's a much more fluid setup. Roles are simply a collection of Permissions. Because Permissions can exists in many Roles there seemed little point in checking the Role and the Permission.\nMy middleware doesn't even bother with Role checking anymore. A simple can('Task Read') or can('Task Edit') is all that's needed to control routes and blades.\nI've now almost setup a user/role/permissions admin panel so they can be edited in a a web ui. I originally looked at backpack, but it was too complete to be an include it what I wanted.\nQuite pleased with it so far.\n\n\n\n. @can and @endcan ?\n. There is no @haspermission. it's @can\nThere's a @hasrole - see here https://github.com/spatie/laravel-permission#using-blade-directives\n. Why not use syncRoles if you're passing roles and not just a role? No need for duplicate checking then.. You sir are a gent. Many thanks that nailed it perfectly.. ",
    "darkgoldblade01": "I found a way to do this if anyone is still looking:\nclass RoleMiddleware\n{\n    /**\n     * Handle an incoming request.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\Closure  $next\n     * @return mixed\n     */\n    public function handle($request, Closure $next, $role = null, $permission = null)\n    {\n        if (Auth::guest()) {\n            return redirect()->route('welcome');\n        }\n\n        if($role != null) {\n            if (!$request->user()->hasAnyRole(explode(\"|\", $role))) {\n                abort(403);\n            }\n        }\n        if($permission != null) {\n            if (! $request->user()->can($permission)) {\n                abort(403);\n            }\n        }\n\n        return $next($request);\n    }\n}\n\nThen, in the middleware, you can make it be:\nRoute::group(['middleware' => ['role:Admin|Developer']); and it works! . ",
    "webfactorybulgaria": "Of course, but this adds a tedious step to the installation process. Also in my case the installation process of a new application is automated so I can't jump in between to update the migration.\nIf I make this optional/configurable and send you a pull request will you accept it?\n. ",
    "zohaib-zix": "still have same issue. ",
    "chiefscript": "Did you get a solution to the error? I'm facing it right now. @SeoRoman What have you set as your guard_name? I was facing the same issue until I set it as 'web'. I believe it's beacuse that is the default guard set on 'auth.php'. ",
    "azorpax": "try to add default parameter value.\npublic function handle($request, Closure $next, $role, $permission = '')\n. ",
    "mojoblanco": "I tried using an empty string as a default parameter value as suggested by @azorpax  and it seems to be working . ",
    "ScooterSam": "I was just about to post about how my theory failed and had another idea. So for people looking to get around the same issue, with the feature not implemented, here's what you can do:\n$role = Role::where('name', 'admin')->first();\n        $usersOfRole = $role->users()->get();\n. ",
    "Tjoosten": "How can i check that?\n. I love to see this also in v1. Is it ok that i set pr's ready for when L5.5 is out?\n. ",
    "nakedgun": "Same issue. Laravel 5.3. Setup a simple test case and include the DatabaseMigrations trait:\n``` php\n<?php\nuse Illuminate\\Foundation\\Testing\\DatabaseMigrations;\nclass ExampleTest extends TestCase\n{\n    use DatabaseMigrations;\npublic function testSomething()\n{\n    $this->assertEquals(true,true);\n}\n\n}\n```\nRun the test :\n```\n[2016-10-29 08:03:43] testing.ALERT: Could not register permissions SQLSTATE[HY000]: General error: 1 no such table: permissions (SQL: select * from \"permissions\")#0 /home/vagrant/m-api/vendor/laravel/framework/src/Illuminate/Database/Connection.php(717): Illuminate\\Database\\Connection->runQueryCallback('select * from \"...', Array, Object(Closure))\n1 /home/vagrant/m-api/vendor/laravel/framework/src/Illuminate/Database/Connection.php(351): Illuminate\\Database\\Connection->run('select * from \"...', Array, Object(Closure))\n2 /home/vagrant/m-api/vendor/laravel/framework/src/Illuminate/Database/Query/Builder.php(1648): Illuminate\\Database\\Connection->select('select * from \"...', Array, true)\n3 /home/vagrant/m-api/vendor/laravel/framework/src/Illuminate/Database/Query/Builder.php(1634): Illuminate\\Database\\Query\\Builder->runSelect()\n4 /home/vagrant/m-api/vendor/laravel/framework/src/Illuminate/Database/Eloquent/Builder.php(613): Illuminate\\Database\\Query\\Builder->get(Array)\n5 /home/vagrant/m-api/vendor/laravel/framework/src/Illuminate/Database/Eloquent/Builder.php(318): Illuminate\\Database\\Eloquent\\Builder->getModels(Array)\n6 /home/vagrant/m-api/vendor/spatie/laravel-permission/src/PermissionRegistrar.php(76): Illuminate\\Database\\Eloquent\\Builder->get()\n7 /home/vagrant/m-api/vendor/laravel/framework/src/Illuminate/Cache/Repository.php(349): Spatie\\Permission\\PermissionRegistrar->Spatie\\Permission{closure}()\n8 /home/vagrant/m-api/vendor/spatie/laravel-permission/src/PermissionRegistrar.php(77): Illuminate\\Cache\\Repository->rememberForever('spatie.permissi...', Object(Closure))\n9 /home/vagrant/m-api/vendor/spatie/laravel-permission/src/PermissionRegistrar.php(46): Spatie\\Permission\\PermissionRegistrar->getPermissions()\n10 /home/vagrant/m-api/vendor/spatie/laravel-permission/src/PermissionServiceProvider.php(31): Spatie\\Permission\\PermissionRegistrar->registerPermissions()\n11 [internal function]: Spatie\\Permission\\PermissionServiceProvider->boot(Object(Spatie\\Permission\\PermissionRegistrar))\n12 /home/vagrant/m-api/vendor/laravel/framework/src/Illuminate/Container/Container.php(508): call_user_func_array(Array, Array)\n13 /home/vagrant/m-api/vendor/laravel/framework/src/Illuminate/Foundation/Application.php(769): Illuminate\\Container\\Container->call(Array)\n14 /home/vagrant/m-api/vendor/laravel/framework/src/Illuminate/Foundation/Application.php(752): Illuminate\\Foundation\\Application->bootProvider(Object(Spatie\\Permission\\PermissionServiceProvider))\n15 [internal function]: Illuminate\\Foundation\\Application->Illuminate\\Foundation{closure}(Object(Spatie\\Permission\\PermissionServiceProvider), 13)\n16 /home/vagrant/m-api/vendor/laravel/framework/src/Illuminate/Foundation/Application.php(753): array_walk(Array, Object(Closure))\n17 /home/vagrant/m-api/vendor/laravel/framework/src/Illuminate/Foundation/Bootstrap/BootProviders.php(17): Illuminate\\Foundation\\Application->boot()\n18 /home/vagrant/m-api/vendor/laravel/framework/src/Illuminate/Foundation/Application.php(203): Illuminate\\Foundation\\Bootstrap\\BootProviders->bootstrap(Object(Illuminate\\Foundation\\Application))\n19 /home/vagrant/m-api/vendor/laravel/framework/src/Illuminate/Foundation/Console/Kernel.php(262): Illuminate\\Foundation\\Application->bootstrapWith(Array)\n20 /home/vagrant/m-api/tests/TestCase.php(29): Illuminate\\Foundation\\Console\\Kernel->bootstrap()\n21 /home/vagrant/m-api/vendor/laravel/framework/src/Illuminate/Foundation/Testing/TestCase.php(91): TestCase->createApplication()\n22 /home/vagrant/m-api/vendor/laravel/framework/src/Illuminate/Foundation/Testing/TestCase.php(66): Illuminate\\Foundation\\Testing\\TestCase->refreshApplication()\n23 /home/vagrant/m-api/tests/TestCase.php(36): Illuminate\\Foundation\\Testing\\TestCase->setUp()\n24 phar:///usr/local/bin/phpunit/phpunit/Framework/TestCase.php(950): TestCase->setUp()\n25 phar:///usr/local/bin/phpunit/phpunit/Framework/TestResult.php(701): PHPUnit_Framework_TestCase->runBare()\n26 phar:///usr/local/bin/phpunit/phpunit/Framework/TestCase.php(909): PHPUnit_Framework_TestResult->run(Object(Test2))\n27 phar:///usr/local/bin/phpunit/phpunit/Framework/TestSuite.php(753): PHPUnit_Framework_TestCase->run(Object(PHPUnit_Framework_TestResult))\n28 phar:///usr/local/bin/phpunit/phpunit/Framework/TestSuite.php(753): PHPUnit_Framework_TestSuite->run(Object(PHPUnit_Framework_TestResult))\n29 phar:///usr/local/bin/phpunit/phpunit/TextUI/TestRunner.php(465): PHPUnit_Framework_TestSuite->run(Object(PHPUnit_Framework_TestResult))\n30 phar:///usr/local/bin/phpunit/phpunit/TextUI/Command.php(185): PHPUnit_TextUI_TestRunner->doRun(Object(PHPUnit_Framework_TestSuite), Array, true)\n31 phar:///usr/local/bin/phpunit/phpunit/TextUI/Command.php(115): PHPUnit_TextUI_Command->run(Array, true)\n32 /usr/local/bin/phpunit(572): PHPUnit_TextUI_Command::main()\n33 {main}\n```\nI haven't looked into it any further since my tests (which cover permissions) still work, though the log file is noisy. I'm using a separate sqlite (in memory DB) for testing.\n. ",
    "Punksolid": "I have the same problem, it happens when you use :memory: as testing database as it says here @\nhttps://github.com/spatie/laravel-permission/issues/109. ",
    "stevebauman": "Thanks @stefro, this worked great!!. ",
    "darwinsalinas": "ok, I has been using a code like this in a controller:\n``` php\n$module='purchase.request';\n        $this->permisos = [\n            'create' => $module.'.create',\n            'update' => $module.'.update'\n        ];\n        foreach ($this->permisos as $permiso) {\n            Permission::create(['name' => \"$permiso\"]);\n            $this->user->givePermissionTo(['name' => \"$permiso\"]);\n        }\n        dd($this->user->hasPermissionTo($this->permisos['create']));\n// output\n// FatalThrowableError in HasRoles.php line 217:\n// Call to a member function contains() on null\n```\n. the code is working, the permissions are added into the database and assigned to the user, \nbut always returns Error.\n. I'am using Laravel 5.3\n. ",
    "khendrickx": "I am not doing anything differently in my opinion. Following piece of code creates the permission, role and assigns it to the user. When I check the database I can find the relations between the role, permission and the user, so that seems OK as well.\nThe HasRoles trait does not implement the can method, but I assume the usage of Authorizable does cover this?\n``` php\n$permission = new Permission(['name' => 'edit-articles']);\n$permission->save();\n$role = new Role(['name' => 'edit']);\n$role->save();\n$role->givePermissionTo($permission);\nUser::find(2)->assignRole($role);\nif (User::find(2)->can('edit-articles')){\n            return 'ok';\n}\n``\n. Ok, tracked back the issue. Seems that the cache file (storage/framework/cache/) does not always update and theGate` therefore could not check the permission.\nAny idea if the cache issue is related to this package?\n. Digging further in the code, I noticed this function in PermissionRegistrar.php\nphp\nprotected function getPermissions()\n    {\n        return $this->cache->rememberForever($this->cacheKey, function () {\n            return app(Permission::class)->with('roles')->get();\n        });\n    }\nTo my understanding, using the rememberForever might cause the cache issue? Checking a permission of a user, then updating his permissions and re-checking might cause the can function to return false instead of true, doesn't it?\n. ",
    "sebacruz": "I am having the same issue with the cached permissions.\nIf you change the permissions directly in the DB and don't clean the cache it will return false positives.. ",
    "notflip": "Well I'm using the middleware from the example in the README.md\nBut so the syntax I posted is correct? Then I'll look further. \nThank you. That's also not working, I guess because in the Middleware we're only expecting one role? \nOr am I wrong here?\n\nThank you!. Solved by using: \n```\n    public function handle($request, Closure $next, $role, $role2)\n    {\n        if(Auth::guest()) {\n            return redirect()->route('login');\n        }\n    if(! $request->user()->hasRole($role) && ! $request->user()->hasRole($role2)) {\n        abort(403);\n    }\n\n    return $next($request);\n}\n\n```\nThanks!. Is there an example Model of this? do we need to copy all the code from the default model in order for this to work? and probably also change the migration to add a new field?\nThank you!. ",
    "envision": "Apparently there is no such general solution for Laravel yet, nor any articles...haven't found yet yet atleast.\nMy needs are to have this kind of relation:\nuser <> permission/role <> group\nOne way would be to link user <> group, and check if user has proper permission/role...without linking permission/role <> group.\nI would also need to have an organization structure...like groups, supergroups, organization...or just nested groups.. ",
    "bryannielsen": "@freekmurze The reason it's working fine in the package tests is because the permissions are explicitly reloaded in the TestCase@setUp() after the database migrations run (https://github.com/spatie/laravel-permission/blob/master/tests/TestCase.php#L35).\nI think there should either be a note for developers to add a similar refresh in their tests (I did this) or change the registration like this PR suggests.. @scottgrayson you can look at the refresh example here - https://github.com/spatie/laravel-permission/blob/master/tests/TestCase.php#L35\nLooking at this closer I think doing the refresh in your tests is the only way to do it, the application is fully booted by the time the DatabaseMigrations trait is called and it doesn't look like that trait fires any events to hook into.  Maybe we can just add a note to the readme for this.. ",
    "colynb": "I don't see any documentation that says to use the booted method... I don't see that in Laravel's lifecycle explanation. When is that method called? When I just add that method in one of the providers, there's no indication that it's being called.. ",
    "scottgrayson": "@bryannielsen could you give an example of how you added a refresh in tests. The exception that got logged used to be much shorter: Could not register permissions\nIt was easy to ignore then. Now that its a full stack trace for every test. It makes the log pretty awful to read during TDD.\nCould this be changed to not Log the error? Maybe throw a custom Exception so whoever is using the package can handle it instead of sending it straight to logs. Is something like this possible?\nhttps://github.com/scottgrayson/laravel-permission/commit/bcfb46acd160661a08b7673291c8a3f1d873ab06\n. A config option would solve the issue for me. ",
    "nisbeti": "@colynb booted is used and documented in Laravel Spark which itself is a laravel package. . Still getting the Alerts on Laravel 5.3 and Spark 3:\n```\n[2017-02-05 10:08:47] testing.ALERT: Could not register permissions because SQLSTATE[HY000]: General error: 1 no such table: permissions (SQL: select * from \"permissions\")\n0 C:\\Users\\657\\Documents\\Private\\dev\\sites\\mytime\\vendor\\laravel\\framework\\src\\Illuminate\\Database\\Connection.php(726): Illuminate\\Database\\Connection->runQueryCallback('select * from \"...', Array, Object(Closure))\n1 C:\\Users\\657\\Documents\\Private\\dev\\sites\\mytime\\vendor\\laravel\\framework\\src\\Illuminate\\Database\\Connection.php(351): Illuminate\\Database\\Connection->run('select * from \"...', Array, Object(Closure))\n2 C:\\Users\\657\\Documents\\Private\\dev\\sites\\mytime\\vendor\\laravel\\framework\\src\\Illuminate\\Database\\Query\\Builder.php(1648): Illuminate\\Database\\Connection->select('select * from \"...', Array, true)\n3 C:\\Users\\657\\Documents\\Private\\dev\\sites\\mytime\\vendor\\laravel\\framework\\src\\Illuminate\\Database\\Query\\Builder.php(1634): Illuminate\\Database\\Query\\Builder->runSelect()\n4 C:\\Users\\657\\Documents\\Private\\dev\\sites\\mytime\\vendor\\laravel\\framework\\src\\Illuminate\\Database\\Eloquent\\Builder.php(638): Illuminate\\Database\\Query\\Builder->get(Array)\n5 C:\\Users\\657\\Documents\\Private\\dev\\sites\\mytime\\vendor\\laravel\\framework\\src\\Illuminate\\Database\\Eloquent\\Builder.php(327): Illuminate\\Database\\Eloquent\\Builder->getModels(Array)\n6 C:\\Users\\657\\Documents\\Private\\dev\\sites\\mytime\\vendor\\spatie\\laravel-permission\\src\\PermissionRegistrar.php(78): Illuminate\\Database\\Eloquent\\Builder->get()\n7 C:\\Users\\657\\Documents\\Private\\dev\\sites\\mytime\\vendor\\laravel\\framework\\src\\Illuminate\\Cache\\Repository.php(349): Spatie\\Permission\\PermissionRegistrar->Spatie\\Permission{closure}()\n8 C:\\Users\\657\\Documents\\Private\\dev\\sites\\mytime\\vendor\\spatie\\laravel-permission\\src\\PermissionRegistrar.php(79): Illuminate\\Cache\\Repository->rememberForever('spatie.permissi...', Object(Closure))\n9 C:\\Users\\657\\Documents\\Private\\dev\\sites\\mytime\\vendor\\spatie\\laravel-permission\\src\\PermissionRegistrar.php(46): Spatie\\Permission\\PermissionRegistrar->getPermissions()\n10 C:\\Users\\657\\Documents\\Private\\dev\\sites\\mytime\\vendor\\spatie\\laravel-permission\\src\\PermissionServiceProvider.php(37): Spatie\\Permission\\PermissionRegistrar->registerPermissions()\n11 [internal function]: Spatie\\Permission\\PermissionServiceProvider->boot(Object(Spatie\\Permission\\PermissionRegistrar))\n12 C:\\Users\\657\\Documents\\Private\\dev\\sites\\mytime\\vendor\\laravel\\framework\\src\\Illuminate\\Container\\Container.php(508): call_user_func_array(Array, Array)\n13 C:\\Users\\657\\Documents\\Private\\dev\\sites\\mytime\\vendor\\laravel\\framework\\src\\Illuminate\\Foundation\\Application.php(769): Illuminate\\Container\\Container->call(Array)\n14 C:\\Users\\657\\Documents\\Private\\dev\\sites\\mytime\\vendor\\laravel\\framework\\src\\Illuminate\\Foundation\\Application.php(752): Illuminate\\Foundation\\Application->bootProvider(Object(Spatie\\Permission\\PermissionServiceProvider))\n15 [internal function]: Illuminate\\Foundation\\Application->Illuminate\\Foundation{closure}(Object(Spatie\\Permission\\PermissionServiceProvider), 13)\n16 C:\\Users\\657\\Documents\\Private\\dev\\sites\\mytime\\vendor\\laravel\\framework\\src\\Illuminate\\Foundation\\Application.php(753): array_walk(Array, Object(Closure))\n17 C:\\Users\\657\\Documents\\Private\\dev\\sites\\mytime\\vendor\\laravel\\framework\\src\\Illuminate\\Foundation\\Bootstrap\\BootProviders.php(17): Illuminate\\Foundation\\Application->boot()\n18 C:\\Users\\657\\Documents\\Private\\dev\\sites\\mytime\\vendor\\laravel\\framework\\src\\Illuminate\\Foundation\\Application.php(203): Illuminate\\Foundation\\Bootstrap\\BootProviders->bootstrap(Object(Illuminate\\Foundation\\Application))\n19 C:\\Users\\657\\Documents\\Private\\dev\\sites\\mytime\\vendor\\laravel\\framework\\src\\Illuminate\\Foundation\\Console\\Kernel.php(267): Illuminate\\Foundation\\Application->bootstrapWith(Array)\n20 C:\\Users\\657\\Documents\\Private\\dev\\sites\\mytime\\tests\\TestCase.php(35): Illuminate\\Foundation\\Console\\Kernel->bootstrap()\n21 C:\\Users\\657\\Documents\\Private\\dev\\sites\\mytime\\vendor\\laravel\\framework\\src\\Illuminate\\Foundation\\Testing\\TestCase.php(92): TestCase->createApplication()\n22 C:\\Users\\657\\Documents\\Private\\dev\\sites\\mytime\\vendor\\laravel\\framework\\src\\Illuminate\\Foundation\\Testing\\TestCase.php(67): Illuminate\\Foundation\\Testing\\TestCase->refreshApplication()\n23 C:\\Users\\657\\Documents\\Private\\dev\\sites\\mytime\\tests\\TestCase.php(22): Illuminate\\Foundation\\Testing\\TestCase->setUp()\n24 C:\\Users\\657\\Documents\\Private\\dev\\sites\\mytime\\vendor\\phpunit\\phpunit\\src\\Framework\\TestCase.php(967): TestCase->setUp()\n25 C:\\Users\\657\\Documents\\Private\\dev\\sites\\mytime\\vendor\\phpunit\\phpunit\\src\\Framework\\TestResult.php(709): PHPUnit_Framework_TestCase->runBare()\n26 C:\\Users\\657\\Documents\\Private\\dev\\sites\\mytime\\vendor\\phpunit\\phpunit\\src\\Framework\\TestCase.php(926): PHPUnit_Framework_TestResult->run(Object(AddUsersFromKioskTest))\n27 C:\\Users\\657\\Documents\\Private\\dev\\sites\\mytime\\vendor\\phpunit\\phpunit\\src\\Framework\\TestSuite.php(728): PHPUnit_Framework_TestCase->run(Object(PHPUnit_Framework_TestResult))\n28 C:\\Users\\657\\Documents\\Private\\dev\\sites\\mytime\\vendor\\phpunit\\phpunit\\src\\Framework\\TestSuite.php(728): PHPUnit_Framework_TestSuite->run(Object(PHPUnit_Framework_TestResult))\n29 C:\\Users\\657\\Documents\\Private\\dev\\sites\\mytime\\vendor\\phpunit\\phpunit\\src\\TextUI\\TestRunner.php(521): PHPUnit_Framework_TestSuite->run(Object(PHPUnit_Framework_TestResult))\n30 C:\\Users\\657\\Documents\\Private\\dev\\sites\\mytime\\vendor\\phpunit\\phpunit\\src\\TextUI\\Command.php(188): PHPUnit_TextUI_TestRunner->doRun(Object(PHPUnit_Framework_TestSuite), Array, true)\n31 C:\\Users\\657\\Documents\\Private\\dev\\sites\\mytime\\vendor\\phpunit\\phpunit\\src\\TextUI\\Command.php(118): PHPUnit_TextUI_Command->run(Array, true)\n32 C:\\Users\\657\\Documents\\Private\\dev\\sites\\mytime\\vendor\\phpunit\\phpunit\\phpunit(52): PHPUnit_TextUI_Command::main()\n33 {main}\n```. ",
    "AntonioGiangrave": "Yes of course, i follow instruction and repeat N time.\nIn a new 5.2 installation work correctly, in my site appear @role @endrole plain in output\n. In a fresh copy of laravel working correctly, but in my project (https://github.com/AntonioGiangrave/kairosformazione) but in my project the @Role directives are ignored. I tried to take the test that you have shown me but apart from the \"Integrity constraint violation\" I can not see anything useful.. no way out, I had to use a new installation of L5.2 and move all my code on it. So Spatie-permission works properly.\nThank you. ",
    "fahmiardi": "Ah I see.. Make sense. Thanks for point of view. . ",
    "dducro": "True, but only if you have your migrations in the \"base project\" in source control.\nWe ignored the migrations there because we manage them from a package.\nThis way we ensure that the newest migrations are published after a new deploy.\n. This issue is probably related: #269 . ",
    "waqas-mehmood-pk": "May be i am wrong, i think i figure out this issue. @can  work properly and role wise permission also working fine... but the issue raised in this following situation.\nStep 1: Create Role\nStep 2: Create User and assign role too\nStep 3: Create Permission\nStep 4: Assign Permissions to specific role.\nif assigned permission to my role by using these above steps than the following code not working.\n@if(\\Auth::user()->can( 'show_campus_menu'))\n< li id = \"admin-setup-campus\">< a href = \"{{url('admin/campus')}}\"><i class = \"\"></i> Campus</a></li>\n@endif\n@can( 'show_campus_menu'))\n< li id = \"admin-setup-campus\">< a href = \"{{url('admin/campus')}}\"><i class = \"\"></i> Campus</a></li>\n@endcan\nand after that when i create new role or permission then my previous assigned permissions to role working fine... \nI think problem in caching... . Sorry @freekmurze  i am not good in tests. that's why i write the complete situation.\nand i am not talking givePermissionTo to user i was talk give permission to role give permission to user working fine in my projects.. @freekmurze should I change according to @drbyte or not?. ",
    "mtb3": "Hello, I came across this issue (as well as #134) while researching my own issues using gates (i.e., calls to can) after adding or removing permissions from a role.\nWhat I have discovered is that one must always be sure to use laravel-permission's givePermissionTo / revokePermissionTo methods when adding or removing permissions, to ensure that laravel-permission's cache is updated properly:\n- Direct database manipulations bypass any possibility for laravel-permission to update the cache\n- Even when making changes via Eloquent models (implementing the Role / Permission contracts), the laravel-permission RefreshesPermissionCache trait does not apply to adding/removing associations between objects\n@freekmurze I suppose one hypothetical/possible change to laravel-permission itself would be to define the gates to look up the permission by name on each invocation, by implementing registerPermisisons in PermissionRegistrar as follows, calling hasPermissionTo($permission->name) instead of hasPermissionTo($permission):\n```php\n    public function registerPermissions()\n    {\n        try {\n            $this->getPermissions()->map(function ($permission) {\n                $this->gate->define($permission->name, function ($user) use ($permission) {\n                    return $user->hasPermissionTo($permission->name);\n                });\n            });\n        return true;\n    } catch (Exception $e) {\n        Log::alert('Could not register permissions');\n\n        return false;\n    }\n}\n\n```\nThis would, however, make gates less efficient -- and would somewhat/largely defeat the purpose of caching.. ",
    "Eductiveo": "I have fixed this, I had deleted the perm in my routes:\nRoute::group(['middleware' => ['role:admin,admin.index']], function () {\nNow this work. Can I also give an user multiple roles?. And if I want to add in my roles like: description, display_name,... Do I need to have some updates around my models? Or.... I can visit it when I only use\n@if(Auth::user()->hasPermissionTo('admin-access'))\n       <li><a href=\"{{ url('/admin') }}\">admincp</a></li>\n@endif\nBut when I use the route, then it keeps redirecting to '/'. Problem solved! . ",
    "DominusVilicus": "I could create a pull request if you want this to be a part of the project, currently no other role package supports inheritence, and I've seen many developers ask for one.\nI haven't tested permissions but I believe they should work.. ",
    "ziming": "I was reading the 2 inheritance suggestions. Strangely in all my work so far that need me to do ACL, role inheritance is an often demanded feature no matter how hard I try to push it aside.\nI especially like the way romanbican/roles handles role inheritance. He had a role_level value, roles with higher levels inherit the permissions of roles with lower level. If you do not wish to use it, just have every role use the default level of 0 and it will be your typical role based permission package.\nToo bad he didn't update it for 2+ years now. It's fine if it's a no too, just sharing my thoughts.\nhttps://github.com/romanbican/roles\n. @AlexVanderbist \nAh, the project uses posgreSQL. Comparing an integer and a string will result in an error so if model_id is of string type and another table id field is an auto increment integer type. Trying to do comparison or joins will get error (model_id = something.id). It doesn't do loose comparison. I may assign roles or permissions to other models as well afterall.\nI settled the issue in the end currently by adding a separate field called username. Then since I can't override users() as it defined MorphToMany, I create my own model class and wrap around Spatie Role and Permission class like an adapter. then write my own users() method but return type set to BelongsToMany. so model_type is App\\User and username is the user's username while model_id is null for that record.\nThe methods on BelongsToMany and MorphToMany are the same I believe except that when you call attach(), save() on a MorphToMany, it fills in model_id and model_type. But that should be transparent behind the scene as MorphToMany is a subclass of BelongsToMany.\nOf course I could just not name that method users() too and leave a note on the project not to call $role/permission->users().. I wanted to, but got an emergency company site issue I have to handle now. =/. It would be great if someone can take over. Any takers?. ",
    "nsbucky": "Ok well that is good then. Maybe its something with my setup? If this continues and I can track it down I will try and provide more information. Thank you for the quick response.. ",
    "elambro": "I'm having the same problem. Did you find a way to work around this?. ",
    "seeya": "Hey @drbyte,\nYes I have ran that function before. I've also double checked that the row was created in the db.\nI also tried running the 2 commands together but it still gives the same error.\nPermission::create(['name' => 'create post']);\n$user->givePermissionTo('create post');\nI am suspecting that the problem could be the $user object is missing some functionalities provided by this package. The $user object is returning a class 'Parse\\ParseUser'. Also my database is separated into 2 parts. MySQL contains only the tables created by this package and Parse(MongoDB) which has all my other tables in it (including Users). . Thanks for pointing out that. If that is the case I would need to create my own custom way of handling roles and permission. . ",
    "MarkVesterskov": "Gave it my best shot. I'm not world champion of Pull Requests yet, but i hope i did it right!. ",
    "ttomdewit": "Hi @donnygunawan93,\nLooking at the source code and the package's tests, it looks like it's expected behaviour. As soon as it checks for a role by name, it'll throw a PermissionDoesNotExist error, as you can see in Permission.php starting at line 66:\n```php\npublic static function findByName($name)\n{\n    $permission = static::where('name', $name)->first();\nif (! $permission) {\n    throw new PermissionDoesNotExist();\n}\n\nreturn $permission;\n\n}\n```\nI was trying to come up with a solution that would fit your needs and make a Pull Request, but having given it a little thought, I think the current solution is the correct one, given the fact that what you're looking for simply is not there and it should tell you so.\nIf create is part of your permissions, the following code will either return true or false based on the authenticated user's given permissions.\nphp\nauth()->user()->hasPermissionTo('create');\nTo me, personally, that makes perfect sense. You know for a fact that create is part of your permissions, thus returning false means that the authenticated user does not have the aforementioned permission. Returning true would mean they do have permission to create.\nThrowing an exception simply lets you know \"Hey, I can't find what you are looking for so it must not exist\" meaning it can't return true or false.. I think I agree with @Frondor. Looking at the queries in Laravel Debugbar I always see the the following queries:\nsql\nselect `roles`.*, `model_has_roles`.`model_id` as `pivot_model_id`, `model_has_roles`.`role_id` as `pivot_role_id` from `roles` inner join `model_has_roles` on `roles`.`id` = `model_has_roles`.`role_id` where `model_has_roles`.`model_id` in ('4') and `model_has_roles`.`model_type` = 'App\\Models\\User'\nsql\nselect `permissions`.*, `model_has_permissions`.`model_id` as `pivot_model_id`, `model_has_permissions`.`permission_id` as `pivot_permission_id` from `permissions` inner join `model_has_permissions` on `permissions`.`id` = `model_has_permissions`.`permission_id` where `model_has_permissions`.`model_id` in ('4') and `model_has_permissions`.`model_type` = 'App\\Models\\User'\nI tried adding the following snippet to the User class, but that did not work as I'd expected:\nphp\n/**\n * The relations to eager load on every query.\n *\n * @var array\n */\nprotected $with = [\n    'roles',\n    'permissions',\n];\nI'd love to give it a go this weekend and try and get caching integrated (backwards compatible). Would you consider merging such PR?\nThe way I'd try and implement it is update the HasRoles trait and wrap the roles() and permissions() content in a call to Laravel's caching facade. Given some configuration flag it either caches the results or skips caching (by default, backwards compatibility).. @drbyte Thank you for reminding me of this, I haven't actually worked on it (forgot to write it down).. ",
    "donnygunawan93": "Yes you're right, the current one was good, thx. I miss understanding before.. wrong post, I want to post to another repo hahahaha, sorry.. wrong repo akakakak sorry I want to post on tymon jwt-auth repo. ",
    "cdarken": "My opinion is that in case the permission doesn't exist the assumption that should be made is that you don't have the permission, because you cannot actually have it assigned.\nFor everyone that wants to override this behavior, here's how I did it:\nimport the trait and rename the method\nuse HasRoles {\n    hasPermissionTo as traitHasPermissionTo;\n}\nrewrite the method:\npublic function hasPermissionTo($permission)\n  {\n        try {\n            return $this->traitHasPermissionTo($permission);\n        } catch (PermissionDoesNotExist $e) {\n            return false;\n        }\n  }. ",
    "matbeard": "Apologies. This was the same caching issue described in issue #134.\nClosing. I thought it could be something to do with that, but I've manually cleared the cache on both applications (just to be sure), and it's not fixed the issue (I've also tried your above suggestion).\nThe thing is, it's working in the other Laravel app which also uses my own Role and Permission models. So it must be reading the correct models from the config file.\nI thought it could be something to do with the relationship models, but surely if it was using the wrong connection for these it would throws a different error?. ",
    "Frozire": "I am closing this issue.\nWhen I think about It I have no reason to use ->can instead of ->hasPermission when I am only checking for permissions.\n. ",
    "Vasiliy-Bondarenko": "Thanx.. ",
    "amenk": "There is hasAnyRole so I think it would fit ... do you know if different middlewares can be OR-combined (instead of AND) ?\nThe postcard was a christmas card from iMi, reqesting the license to use the module :-). ",
    "andrewhood125": "Hmm.. I see what you're saying. I suppose determining who would be _authorized_to approve such a request is opening a can of worms. \nI'll leave this open in case anyone wants to continue the conversation but maintainers feel free to close it.. ",
    "bakhtiyor": "Thank you for the quick reply. I have a form where permissions are set for various operations for users and roles. As permissions of roles are inherited to the user automatically additional permissions also can be added particularly to this user. But inherited permissions shouldn't be changed. That is why we need to check whether its a direct permission of the user or inherited one. Hope I could explain the situation. If you have further questions I am happy to answer. Thank you!. Thank you so much. Do you want me to do it or there is somebody else who is responsible for that?. OK thanks. Made changes and created a pull request. . ",
    "AlexVanderbist": "Hi @Mahmoudz,\nAre you sure you performed the necessary migrations before your test? As the error reads; the permission can't be created because the permissions table doesn't exist... \nIf you're sure the migrations have ran and the permissions table exists when the test is running please provide a simplified example that triggers the error. This way we can replicate the error as well.\nThanks!. Right, I can see how this is annoying when testing. Personally I like the enable_cache flag approach but I'll check with @freekmurze on monday. Thanks!. Thanks for the PR, @Mahmoudz ! I've just added some tests to it in a new PR.. Hi, \nI couldn't replicate the issue even if I used exactly the same query. This might be because we're on different mysql versions (or different database drivers in general).\nI did however submit a PR adding a table prefix to the only ambiguous part of the query (around ('id' = ? or 'id' = ?)). This might fix the issue you're having.. This should fix #191 . This is the same caching issue as #231. You can use the following command to flush your cache and resolve the issue:\nbash\nphp artisan cache:forget spatie.permission.cache\nGood luck!. Hi @scottmcdhome !\nI've tried to reproduce your issue but I everything seemed to work for me using Laravel 5.3.30 and scaffold-interface 1.7.1 (on PHP 7.1).\nHowever I did find out the error occurs when you put the 4 providers at the top of the providers array. Could you make sure you've placed the providers bellow the Illuminate providers in config/app.php? The correct place is bellow the following comment: \nphp\n/*\n * Package Service Providers...\n */\nIf this doesn't solve your issue please let us know which Laravel, scaffold-interface and PHP versions you are using. Thanks! . Hi @hawkleaf \nThere is a log_registration_exception config entry all the way at the bottom of config/laravel-permission.php. Set this to false to disable logging the exception you're getting.\nAn even better solution would be to only disable the log_registration_exception when the APP_ENV is testing or something similar.\nGood luck!. Hi all,\nI was looking into this issue but didn't manage to replicate the issue. When creating Permissions/Roles or assigning them to models the permission cache is automatically cleared... \nThe only way I managed to trigger the error was by trying to givePermissionTo() with a non-existent permission.\nObviously there is a problem here so if anyone could provide some instructions to replicate the issue starting from a clean Laravel install, that would be great! \nThanks. Hey @eeeeek-da-cat \nI really can't seem to replicate this... Does clearing the cache solve the issue?\nUpdate:\nLooking at the diff between 1.11 and 1.12 (https://github.com/spatie/laravel-permission/compare/1.11.0...1.12.0) the only notable change is that hasPermissionTo now comes from cache anyways. So if anything goes wrong it's probably because the cache is outdated. Now normally it should flush itself every time a new permission or role is added or updated but maybe something went wrong there... . That'd be great. I've been messing with it for a while now and I really can't seem to trigger it.\nIt's probably a discrepancy like you said. If something were to manually update/create a permission/role the cache would be invalid but since it's set never to expire the problem remains...\nMaybe we should make cache expiration configurable and set it to 24h by default. This way if something goes wrong at least it'll fix itself. Any thought?. I've added the cache_expiration_time config key in the v2 branch! Feel free to mess around with it. Release will be in a couple of weeks.. @Frondor there is a model observer for the Role and Permissions models. However updating relations doesn't trigger any of these events, in that case the cache is flushed manually.\nIn this specific case I think the cache was corrupted at some point in time (maybe by editing db records directly). When updating to 1.12.0 the (corrupt) cache is being used a lot more in the findByName method. Downgrading fixed the issue because 1.11.0 didn't use the cache in that crucial place.\nI do agree that in an ideal world the cache would only need to be flushed when a model is updated. In practice the cache gets corrupted quite often when people mess around in the database or manually assign permissions or roles.. +1 for the commands, sometimes you just want to quickly assign some roles and start using them without having to setup any kind of UI or commands of your own. However I think I'd still quickly edit the DB and flush the cache rather than use the commands. \nOn top of that, it might get users into bad habits. If your application relies on certain roles and permissions it's probably best to keep them in a seeder anyways to keep them persistent. Imagine cloning the project and having to figure out what permissions and roles you used to recreate them with the commands.\n. @archy-bold All methods to manage permissions/roles the package provides will take care of the cache for you.\nHowever when you change the database manually (for example through seeds), you'll have to flush the cache yourself. Nothing wrong with that, just something to keep in mind.. @archy-bold yep, if you don't want to lose the rest of your cache every time you can use php artisan cache:forget spatie.permission.cache as well. That'll only clear the cache for this package.. Hi @yc-public \nThis is because the RoleDoesNotExist exception is thrown without a message. That's why $e->getMessage() doesn't log anything.\nI suggest you just log the entire $e exception instance. This way the __toString() magic method will kick in and print some useful information:\nphp\ntry {\n     //\n} catch (RoleDoesNotExist $e) {\n    Log::error('Register Failed: ' . $e, $this->_logRoute);\n}. Hi @jonasva \nI think this is because the permission cache still thinks the permissions you just deleted in your seeder still exist, including the 'access employee portal' permission (with its old id).\nYou can try clearing the permission cache with:\nbash\nphp artisan cache:forget spatie.permission.cache\nThis should solve your issue!\nGood luck!. Hey @Scarwolf \nDid clearing the cache solve the issue for you or does it still occur when adding/removing permissions to a role?\nThanks. Thanks! \ud83d\udc4d . Hi @benrasmusen \nI've installed all the Backpack packages you've mentioned and wasn't able to reproduce this issue... Did you add any other customizations that might've led to this? Any non-default settings for Laravel's database or caching?\nI take it the roles and permissions aren't visible on the user page either? Does it throw an error or just display a blank table cell?\n(shot in the dark; we've had some issues with caching before, you can always try flushing the permission cache with php artisan cache:forget spatie.permission.cache). Hm, the relationships seem to have loaded alright but somehow a roles attribute is being set to null on the User model. What does your user table look like?\n. Hi @anandsiddharth \nYou can have a look at implementing a middleware to check for the admin role and redirecting if that's not the case. You'll find a section on creating your own middleware in the readme.\nLet me know if you need any help! . The package doesn't provide a way to authenticate users based on their roles or permissions out of the box.\nI think the way you're doing it right now could work tho: if you want to check the roles of the user without logging the user in first you could do something like this:\n```php\n$user = Auth::getProvider()->retrieveByCredentials($credentials);\nif($user && $user->hasRole('admin')){\n    $rememberUser = true;\n    Auth::login($user, $rememberUser);\n    return redirect()->to('/dashboard');\n}\nreturn redirect()->back();\n```\nGood luck!. Hi @davidavz \nIf you're gonna be doing integration tests (like your example) you'll want the application to be completely functional. That includes doing the migrations and seeding any necessary entries to make the application work.\nSo I'd say yes, definitely the way to deal with the issue.. I seem to have mixed up the foreignKey and relatedKey in the relation. Not sure how that didn't surface during testing...\nFixed it in 2.0.1. Hi! \nDo you have a default guard set in your authentication config file? . Can you dump the $guardName bellow the following line?\nphp\n$guardName = $guardName ?? config('auth.defaults.guard');\ndump($guardName); // add this\nAt that point $guardName should never be null if your config file is set correctly.... Did you by any chance move the User model to another namespace and forgot to update the auth.php file accordingly? (I saw that this is the case in the laravel-starter project: https://github.com/arados-io/laravel-starter/blob/master/config/auth.php#L70). Or should the duplicates check happen on the saving event instead of the create method?. Thanks for reporting this, there appears to be an issue with the roles()/permissions() relation to the user model. I'm currently looking into it and will push a fix later today! . Hi, the package only caches permissions and roles internally, not their relation to users or queries on the Permission or Role models directly (e.g. Permission::all()).\nThis means that every time you check if a user has a role or permission a DB query will still be executed.\nHopefully this clears some things up.. @jelgervisser Any errors? Are you sure the auth.defaults.guard config key is set correctly in config/auth.php?. Hi! \nMake sure you've got your User and Admin models set up correctly in your auth.php providers. It should look something like this:\nphp\n 'providers' => [\n        'user' => [\n            'driver' => 'eloquent',\n            'model' => App\\User::class,\n        ],\n        'admin' => [\n            'driver' => 'eloquent',\n            'model' => App\\Admin::class,\n        ],\n    ],\nAfter that you can start creating roles and adding permissions as described in the readme. (More specifically here for multi-guard stuff: https://github.com/spatie/laravel-permission#using-multiple-guards).\nFinally, if I'm not mistaken, the @can directive uses the currently authenticated user. Which in your case is probably based on your auth middleware. \nFor example if you use @can('edit_articles') on a route with middleware auth:admin, @can will check if the current logged in admin can edit articles.\nIf you have both an Admin and a User logged in at the same time on an auth route you can use something like auth('admin')->can('edit_articles') or auth('user')->can('edit_articles').\nHopefully this helps you to get started! \ud83d\udc4d . Hi! \nFirst of all thanks for contributing. However not everyone using the package will have the same roles and set-up. We can't just assume that there's an Admin role and assign it all permissions. That's application logic to be added in userland.. You should be able to create your own Role model with any custom properties you like. Make sure to implement the Spatie\\Permission\\Contracts\\Role contract and update models.role in the config file.\nLet me know if you need any help!. Yep, you'll need to change the migration to include anything you might need. \nI just realised: if you only need to add some basic properties to the Role model (for example a readable_name) you can just update the migration and create your Roles like you would with any other model: \nphp\n$role = Role::create([\n    'name' => 'admin', \n    'readable_name' => 'Administrator',\n    'another_custom_property' => 'foo',\n]);\nIf you really need a custom model (maybe you want to add some custom methods or mutators) you can extend the Spatie\\Permission\\Models\\Role model which will end up looking something like this:\n```php\n<?php\nnamespace App\\Role;\nuse Spatie\\Permission\\Models\\Role as BaseRole;\nclass Role extends BaseRole {\n    //\n}\n```. Hi,\nThe user_has_roles and user_has_permissions tables were used in v1 of the package. They've been replaced in v2 by model_has_permissions and model_has_roles to support permissions for multiple guards.\nHopefully this clears some things up! Let me know if you need any more help :) . Can you run php artisan optimize -vvv and post the exception's stack trace here?. Hi! \nThis package doesn't handle user specific permissions. I'd suggest you use Laravel's policies in combination with this package to get the required functionality.\nSomething like this should do the trick (untested):\nphp\nclass ContentPolicy\n{\n    public function update(User $user, Content $content)\n    {\n        // Allow updates from any user with `can edit` permission or the content author\n        return $user->can('can edit') || $user->id === $content->author_id;\n    }\n}\nHopefully this points you in the right direction. Let me know if you need any help!\n. Hi! \nWhat version of Laravel are you using? If it's < 5.5 you'll have to add the serviceprovider in config/app.php:\nphp\nSpatie\\Permission\\PermissionServiceProvider::class,\nCan you post the contents of your permission.php config file as well please?. You're correct, for any of the the example code to work you would need to import the Role and Permission namespaces into the controller/view you're using.\nIn practice however namespaces are rarely imported in blade views. The readme just hints at the possibility of passing a collection of roles to the @hasanyrole directive.\nFor example something like this: \n```php\n// In your controller\nuse Spatie\\Permission\\Models\\Role;\npublic function index() {\n    $roles = Role::all();\nreturn view('anyView', compact('roles'));\n\n}\nblade\n{{-- in anyView.blade.php --}}\n@hasanyrole($roles)\n    We have at least one of the roles.\n@endhasanyrole\n``. Hi! I finally took some time to look into this and if I understand correctly you've got two guards set up (apiandweb) that both use the sameUser` model.\nIf this is the case I'm afraid $user->givePermissionTo(\"my_api_permission_name\"); is gonna be difficult to achieve as a User instance doesn't know to which guard it belongs to.\nAs a solution I would simply propose passing Permission instances (instead of strings) to $user->givePermissionTo():\nphp\n$myWebPermission = Permission::findByName('my_web_permission_name', 'web');\n$user->givePermissionTo($myWebPermission);\nAnother option is adding a guard_name property to your User models. Maybe even adding a ApiUser class that simply extends the User class and overwrites guard_name with api. This way getDefaultGuardName() will return the correct guard.\nHopefully this all makes sense. If you need any help let us know \ud83d\udc4d . On a side note: the code for retrieving multiple permissions using getStoredPermission contains a typo and is completely broken. However it looks like it's never used so I think we can safely remove that is_array section and change the HasPermissions interface in the next major version.\nTo fix this thread's issue we could try to do something like the following in getStoredPermission: \nphp\nreturn app(Permission::class)\n    ->where('name', $permission) \n    ->whereIn('guard_name', $this->getGuardNames()) \n    ->first();\nBut that will cause problems when the same permission exists for multiple guards... So I'm not sure how to fix this without explicitly specifying the guard_name on the model you're trying to give permissions.. Thanks for the feedback!\nSo the way support for guards works right now is mainly through polymorphic relations. A permission/role can simply belong to any other model. On top of that there's some logic dealing with guards specifically.\nMy idea is to keep the polymorphic relationships on the Permission and Role models but drop all logic related to guards. Any model can simply have it's own set of permissions/roles and that's it. \nIn the PermissionRegistrar all permissions will still be registered as gates so @can('permission name', 'guard') and user()->can('permission name') will still work.\nFor creating Permissions and Roles I'd propose using User::createPermission('name') instead of Permission::create('name', 'guard'). This way we no longer need to specify a guard or model the permission belongs to.\nWhen using multiple guards users will need to have a different model for each guard to properly use the package. This can be easily accomplished by extending for example User to an ApiUser and WebUser.\nThis way WebUser::givePermissionTo('do something') will work just like before, without having to assume what guard is being used.\nHopefully this makes sense. This feels like the easiest way to support multiple guards but also keep the package simple enough for anyone that doesn't use guards. Any remarks/suggestions welcome \ud83d\ude42\n. I agree on #480, if I've got some free time I'll start with that one and tag it before starting on v3. \nFor the testing issue I think it would suffice to define a new gate when the Permission::created event is fired. (Maybe we can even extend Laravel's Gate and check for permissions there?) I'll test that and add it in v3 as well.. At first thought this is due to the internal caching of roles and permissions. This cache isn't cleared when changing permissions and roles in the database directly (and thus remains empty in your case as no roles/permissions have been created in your separate app). \nI'd suggest lowering the cache_expiration_time config in your separate Laravel app, maybe even completely disabling it. We're looking for a better solution for this issue in v3 of the package.. It looks like you're right. Even though the right connection is set for the User model, the default connection is still used for Permission and Role models. I'd suggest extending those two classes and adding the $connection property. Don't forget to change your permission.php config to use the new classes as well.\n. Glad you got it working without any issues! Thanks for letting us know.. @ctf0 good call, added a note here: https://github.com/spatie/laravel-permission/commit/a43527854652987ddf0b84a29c64cfa8d7ac5a38. Hi! $role->delete() should delete the role without any issues. There's a foreign key constraint on the model_has_roles table that will delete any related rows to avoid issues.\nLet me know if you need any more help :). Hi! Personally I've never used Postgres but running migrate:refresh using a mysql database doesn't throw any exceptions for me.\nJudging by the delete query something is going wrong on the down migration but I'm not too sure. Could you run the command again using artisan migrate:refresh -vvv and post the output here? \nAs a fix I'd also suggest running artisan migrate:fresh instead of refresh. This will simply drop all tables without running down methods on the migrations.. Hi! Thanks for the PR but I'm not sure this is a fix for the attached issue. If detaching is somehow unsuccessful we wouldn't want to rollback and simply log the error before continuing to delete the model anyways... Closing this for now. Hi, what exactly is stopping you from changing the migration to allows strings as the model_id in all tables and extending the users(), permsissions() and roles() methods to use username as the relatedKey? \nFor example when extending the Permission class and overwriting the users() method:\nphp\n    public function users(): MorphToMany\n    {\n        return $this->morphedByMany(\n            getModelForGuard($this->attributes['guard_name']),\n            'model',\n            config('permission.table_names.model_has_permissions'),\n            'permission_id',\n            'model_id',\n            'id',\n            'username'\n        );\n    }\nI agree removing the strict return type would make things more flexible but it would also be a breaking change (I think). I'd rather address this in v3 of the package (#479).. Closing this to due to inactivity. I'll update the return type to something sensible in v3 of the package.. There's no automated migration. You'll have to manually go over the related tables and update the column names/rows accordingly. Have a look at the current migrations to get an idea what the schema looks like. Good luck! . When getting the default guard name using getDefaultGuardName I assumed the following order:\n\nIf the user has explicitly specified the guard_name on the model use that as the default guard name\nIf the model is assigned directly to a guard in the config (through a provider) return that guard's name\nIf multiple guards are assigned to the model in the config return the first guard's name\nIf the model (somehow) isn't assigned to any guard in the config return the auth.defaults.guard name\n\nI agree that when getGuardNames() returns the default auth.defaults.guard as one of the guard names it should probably use that as the default (instead of the first one). However I can't think of a way to implement this without making breaking changes...\nI'd suggest using different models for every guard for the time being. This can easily be accomplished by extending the User model in an ApiUser class or something similar.. @Kyslik thanks for pointing this out. Feel free to PR a change to the docs and we'll merge it in. Hi, I can't seem to replicate this issue. The model_type field should be automatically filled in by Laravel's morphToMany relationship. \nAre you by any chance using morph maps or any other packages that might influence this? What version of the Laravel and the package are you using? . You can quickly fix this by overwriting the bootHasRoles method in your User class: \n```php\n    public static function bootHasRoles()\n    {\n        static::deleting(function ($model) {\n            if (! $model->isForceDeleting()) {\n                // don't do anything if we're only soft deleting the model\n                return;\n            }\n        $model->roles()->detach();\n        $model->permissions()->detach();\n    });\n}\n\n```\nHowever I'm not sure what the expected behaviour would be in this case. I'll check and might tag a fix later today.. Added to the package in v2.7.1!. >Have you customized any guards in your Laravel app?\n\nAt what point in your app is this failing? Can you share your code?\n\nAlso, can you post the output of auth()->user()->roles?. Hey @Stahoo, \n\nWhat should I do? How to secure editor access to the mentioned modules.\n\nInstead of checking for the admin role in the PermissionCrudController directly you can also check for the admin role in the route middleware. \nSomewhere in your Laravel Backpack project you'll have the permissionmanager.php routes file: \nhttps://github.com/Laravel-Backpack/PermissionManager/blob/1f922c539ebb71b11173b872114ad355690de4a6/src/routes/backpack/permissionmanager.php\nIn the group middleware you can define a third role:admin middleware which will check if the user accessing one of the permission routes has a given role (in this case admin): \n'middleware' => ['web', 'admin', 'role:admin'],\nGood luck! . Hi @wreighsantos \nThis is because can uses Laravel's gate. We only register all permission to the gate once during app boot (in PermissionRegistrar@registerPermissions). \nIf you really need the can method to work right after you assigned a permission to a user you could use app(PermissionRegistrar::class)->registerPermissions() to re-register all permissions on Laravel's gate immediately.\nThis will be fixed in v3 or when #505 gets merged.. I agree with @andyjh07. Here's some more information about model observers: https://laravel.com/docs/5.5/eloquent#observers. Hi @johannesschobel \nThanks for the suggestions! However I feel like this is a pretty specific use case. You should be able to easily extend the package's Role model and overwrite some methods from in HasRoles to implement this logic in your own application.\nI'll leave this issue open for now to get some feedback from other people.. I like the idea of levels to have another \"simple\" way to allow access to certain functionality. However I'm not sure whether the majority of users need this functionality. In most use cases I think something like hasAtLeastRoleLevel(5) or isAtLeastRole('editor') can easily be refactored to check for the relevant permissions (hasPermissionTo('edit')).\nI'd be happy to implement it if @drbyte and @freekmurze like it tho! . Hi @shankhadevpadam \nHow are you assigning roles and permissions to your users? Can you provide us with a small code example?. @shankhadevpadam Can you try updating the package to v2.7.2 and checking if that made any difference? We've made some changes to gate-related functionality.. No idea, it definitely feels like a caching issue. But I'm not sure how deleting the cached routes file is solving the issue...  Maybe route:clear triggers the emptying of the permission cache somehow? \nI'm not sure either why the caching issue still occurs either. As long as there's no direct database editing involved it should be fine.. Closing this due to inactivity of OP \u2013 we'll reopen this if the issues persists.. Hi @mostafamaklad \nWe don't support L5.3 anymore. You can have a look at the v1 branch of this package which should work for L5.3: https://github.com/spatie/laravel-permission/tree/v1. Looks good to me!. What's stopping us from setting throw_on_unauthorized to UnauthorizedHttpException (which extends from HttpException) by default already? All abort does is raise a HttpException anyways so it would still be backwards compatible.. Not introducing any new config keys sounds great. Definitely the best solution so far imo, @drbyte! :D \n. Sounds good, thanks for the initial PR! :). Thanks for the PR! Is there any reason you can't cache:clear or even more specifically cache:forget spatie.permission.cache?. This is a good commit but gonna close this for now. We've already got the php artisan cache:forget spatie.permission.cache command documented in the readme and I don't think changing that to a custom command (which internally does the same thing) would make much difference.. Good idea, I'll add this in soon.. There was an interesting thread regarding multi-tenancy here: #280. Personally I've never thought about how to implement multi-tenancy in this package however I might look into it for v3. \nJoseph Silber's Bouncer looks promising for multi-tenancy. You might want to look into that as well: https://github.com/JosephSilber/bouncer/issues/217. Hi, thanks for letting us know. Feel free to PR this change and we'll merge it in!. Fixed in v2.7.5!. I can see how this is a problem. However you can easily update the permissions table migration to include a display_name column. The Permission class is an eloquent model so you can set that display name property like this: \nphp\nPermission::create(['name' => 'articles.edit', 'display_name' => \"Edit articles\"]);\nI'm not sure if we want to include this in the actual package as it's something you can easily do yourself. Maybe we can include a section in the readme about custom properties? (mentioning #479 so I don't forget). On it :). @drbyte any other tests you'd like to see for this? . Fixed in v2.7.5!. Hi,\nThis package doesn't currently support \"teams\" the way Laratrust does. \nAs to your question regarding groups I'm not sure what you mean. We do support roles which are essentially groups of permissions that can be assigned to users (just like Laratrust).. I'd suggest only comparing the permissions' name properties, not the entire object. This will be more performant and avoid your issue with the pivot property altogether.\nFeel free to PR a fix as well to make getAllPermissions() return the right (custom) models.\nThanks!. Gonna close this one for now. I agree that this might be confusing and it's worth revisiting soon when we introduce some more breaking changes.. Hi, I totally agree. I'll look into this for v3 of the package, for now I think you should be able to use local query scopes to do this. Thanks for the suggestion :) . Hm, I'll have to look into the way scout works then...\nFor v3 there's an issue going here: https://github.com/spatie/laravel-permission/issues/479 \ud83d\udc4d . I totally agree, let's continue this issue in your PR.. This looks really good! Thanks for fixing the random spelling errors as well ;) . Merging this in.\nThanks again for the PR! . Hi, \nThanks for all your work looking into this. Ideally these cached permissions would come from app(PermissionRegistrar::class)->getPermissions() as they're already being cached there. \nThis is definitely something we'll address in the next version of the package! \nThanks again!. Good catch as well, very interesting how these methods differ so much in performance... Thanks a lot! . Hey, sorry for not checking in on this issue earlier. Feel free to PR a fix and add me as a reviewer and we'll take a look \ud83d\udc4d . Hi,\nSadly there's no (easy) way to do that right now. That's definitely something I'm looking at for v3. \nThe best way to go at this with the current state of the package is probably to use events to give the user the appropriate roles when he's associated with a team... but this is not ideal.\nGood luck! . You can auth()->user()->getRoleNames() to get a collection of role names that can be passed into your Vue component.\nFor example in your blade view:\nblade\n<vue-component :user-roles=\"{{ json_encode(auth()->user()->getRoleNames()) }}\"></vue-component>\nIn your component you can then simple check if a certain role is in that array with \nhtml\n<div v-if=\"userRoles.includes('writer')\">\n    I'm a writer.\n</div>\n<div v-else>\n    Not a writer.\n</div>\nHopefully this is what you're looking for?. Pivot table to support a many-to-many relationship between roles and reports sounds about right. Laravel docs are pretty good at explaining this as well as this cheat sheet.\nIf you need any more help, let us know. Good luck! . Hi,\nAre you sure you're using the latest version of the package? The new exceptions were only tagged 2 weeks ago in https://github.com/spatie/laravel-permission/releases/tag/2.7.3. I think a composer update should do the trick.. Hi,\nAre you sure your seeder doesn't accidentally run twice? \nYou could add the following code at the beginning of your seeder to make sure the table & cache start empty before being seeded:\n```php\nSchema::disableForeignKeyConstraints();\nDB::table('permissions')->truncate();\nSchema::enableForeignKeyConstraints();\napp(PermissionRegistrar::class)->forgetCachedPermissions();\n```. First of all, thanks for all your work! This looks really interesting. I'd love to see something like this in the actual package but also keeping it simple enough if you don't know about multi-tenancy.\nIs there any way we can implement this on the \"main\" branch whilst keeping it compatible with people who don't have multi-tenancy? For v3 we're planning a lot of breaking changes so that wouldn't be a problem.. This looks really promising! Will read through the code and try it out soon.\n\nAdded a new migration stub for tenant db. It was more of a boiler plate than anything as I assume most people wanting to have multi-tenant functionality already have a tenant table.\n\nIf at all possible I'd like to keep boilerplate like that out of the package. Is there any way we can put the necessary methods for the Tenant interface in a trait? This way we can move the Tenant model and migration to the tests directory and use them solely for testing.\n\nA multi-tenant functionality is completely optional and should the user not need that part they do not need to use it \n\n\ud83d\udc4c\ud83d\udc4c\ud83d\udc4c\n\nthe use of guards is not supported in the multi-tenant relationship\n\nUsing the guard names explicitly will be dropped in v3 anyways so don't worry about that too much.\nThanks a lot for the PR!. For the failing tests: looks like setKeyType was only added in 5.4.17: https://github.com/illuminate/database/commit/3e2215e21c06bb8eff7d5eb5871ab8178a787239. Feel free to set a minimum requirement for that version in composer.json. . Looks like you're calling hasRole() on a GenericUser class that doesn't have the necessary traits for the package to work...\nCan you post some code/provide some context where you're calling hasRole()?\nThanks\n. Closing due to inactivity of OP. Feel free to open a new issue if you're still experiencing issues.. Hi,\nThe user_has_roles and user_has_permissions tables were used in v1 of the package. They've been replaced in v2 by model_has_permissions and model_has_roles to support permissions for multiple guards.\nHopefully this clears some things up! Let me know if you need any more help :). Hi!\nThere's no \"magic\" way to do this in the package. Using eloquent you should be able to create this query yourself.\nGood luck!. Hi @raftalks, when you try to assign a permission to one of your $usera, the package doesn't know what guard this $user is using. In this case it'll try to look for the permission or role in the first guard (in this case web) and not find the given console permission. \nYou could solve this (as @introwit suggested) by using different models and different providers for these different types of users. (They could still all extend the same User class.). >It is impossible to check role with specific guard in middlewares\nBUT it is possible to do that inside your controller methods\nso this solution might help a bit to someone\nYou could also write a custom middleware that does the same thing as the HasRole middleware but with your custom guard hardcoded in there. \nCan this issue be closed? . Thanks, looks good! . Thanks for the PR! Let's continue this issue in there. Hi @syedabuthahirm \nIf I recall correctly you can simply call $this->gate->before() a second time in your own service provider to chain on your own callback. \nCheck out the comment and the implementation in Laravel's code here.\nLet me know if this is what you're after :) . Hm, I see.\nWould it be possible to create standard Laravel policy called ProjectPolicy that does something like this?\nphp\nclass ProjectPolicy\n{    \n    public function update(User $user, Project $project)\n    {\n        return $user->can('edit_projects') || $project->client->id === $user->id;\n    }\n}\nIn your controller you could then simply do $this->authorize('update', $project).\nThat feels like the easiest laravel-way to solve this issue.... Hi @dflow, I just tried this on a fresh Laravel install and this seems to be working. What command are you using to publish the migrations? \nIs there any output other than the Publishing complete at the end?. Autodiscovery was only added in Laravel 5.5. You'll have to register the service provider yourself (in config/app.php).\nAre the migrations being published when using the single quotes? It should be one file containing several tables.. Hi @Develeapment \nThis is actually working as intended. The query you've posted retrieves the permissions for a specific user. We only cache a collection of all permissions \u2013 not their related models.\nHopefully this answers your question. If you need any more help, let me know :) . Thanks for the suggestion! Feel free to make a PR for this. \nFor now you could also do something like this:\nphp\n$usersWithoutPermission = User::whereDoesntHave('permissions', function ($query) {\n    $query->where('name', 'permission name');\n})->get();. Hi @iiDestiny \nCan you provide us with some more information? What error are you getting? How is the can() method invalid? Can you show us some example code? Thanks :) . >Seems like it'd be useful for debugging if it was included in the output\nThat was the case. The exception message used to be something along the lines of \"User does not have the right permissions. Necessary permissions are ...\" but I left that out because it felt like it was exposing too much information.\nWouldn't mind having that in there again tho :). Hi @hinet \nThanks for the PR, however this is something that should be managed in your own application. You could for example use the the permission names as keys for Laravel's localization: \n```php\n<?php\n// resources/lang/en/permissionFlags.php\nreturn [\n    'editArticles' => 'Edit Articles',\n];\n```\nphp\necho __(\"permissionFlags.{$permission->name}\");. Thanks for the PR! Added a reply on #594 why we're not pulling this one in.. Hi @Doublemedia \nI just gave this a test and it seems like you can't create the array inside of the directive. It has to be either a variable or a string (optionally using pipes) as described in the readme.\nIn this case the easiest fix for you would be the string notation:\nblade\n@hasanyrole('mod|admin')\n    Hello admin\n@else\n    Hello other people\n@endhasanyrole\nGood luck! . I'd really love to see this merged into v2. It'd be great to have this cleaned up before forking v3 as well.\nDoes this introduce any breaking changes? Feels like it shouldn't (even if a user would use HasPermissions directly) but I'm not 100% sure.  . The only way I can see this happening if the cache has been invalidated or you've significantly changed the way getPermissions() works. If the cache is the issue (it usually is)php artisan cache:clear will probably fix it.. Thanks!. The package only allows you to add & check for permissions/roles. It wont stop anyone from updating models. It sounds like you're looking for Laravel's model policies (which can be combined with this package). Have a look at https://laravel.com/docs/5.5/authorization#creating-policies. \nIf you've got any more questions, let me know :). Sounds good! Thanks for the PR, we'll continue discussing this in there \ud83d\udc4d . Hi @yougotnet, you're looking for multi-tenancy. If you want to support this you'll need some extra columns and custom models. There was an interesting thread about it here: #280.\nJoseph Silber's Bouncer looks promising for multi-tenancy as well. You might want to look into that as well: https://github.com/JosephSilber/bouncer. Hi, thanks for the PR! Gonna hold off merging this one for now. The exception messages in this package are mainly to be used during development. I wouldn't recommend returning them to your front users. Instead you can use validation rules to avoid most of these exceptions to be thrown.\nIf you really want to translate these exception messages in your application you can always surround your code with a try-catch and manually throw new exceptions or flash error messages using your translated strings.\nThanks again and good luck \ud83d\udc4d . Hey @patogalarzar \n\n\nYes for test purposes, I specify the connection property protected $connection = 'pgsql'; to the vendor/Spatie/Permission/src/Models/Permission.php and Role.php models and it worked, I could read and write in the database.\n\n\nYou can always copy those models to your own codebase and update the permissions.php config file to use those models instead.\n. Thanks for all the hard work you've been putting into this package the last few months! (sorry, I've been slacking)\nI agree with Freek here \u2013\u00a0Adding wrappers around existing eloquent features feels a bit wrong if it's not super-relevant for the package. People can always create their own models to add this extra functionality manually. . The registerPermissions method used to return true on success and false if an exception was thrown. Useful or not, chances are people are using this in their code and thus changing it would be breaking (which is what I wanted avoid).. Yep, you're right!. Yep, I've removed it now \ud83d\udc4d . Absolutely :) . All credit goes to @hackel!. Can we make this into a config value for an url instead of a route name? I'd suggest redirect_unauthorized_users_to_url.. These 6 lines of code are being used in 4 different places. Can we put them somewhere in their own method? handleUnauthorized() or something similar. Maybe use a trait that can be used in both PermissionMiddleware and RoleMiddleware?. Don't forget to update this to a relevant variable name for the updated config key $unauthorizedRedirectUrl or something.. Not everyone is using named routes. Defining this as an url gives us a bit more freedom as well, e.g. passing route params(not sure why you would need this but still). Good for me, alternative would be handleUnauthorized() as it's still part of the middleware handle method but up to you! . This can be changed to a single if statement as the previous statement will return if true.. Maybe we can use a filter method on the collection here to filter out permissions that are already given to the user? Same for the assignRole method.. Can we use the FQCN here?. Can we move this test to the HasPermissionsTest? I think that'd be a more appropriate context . FQCN as well :). Hi! As discussed over email; I definitely agree on not throwing the exception. It's been bugging me for a while but I wasn't sure about removing it as that would probably be a breaking change. \nI'm not sure if this would even be considered a feature. I can't imagine anyone checking if a permission exists based on that exception being thrown... If it's not a feature we can tag it as a patch.. ",
    "Doublemedia": "I see that it's checking the database if there are any rows in the cache table.\nselect * from cache where key = 'mlmspatie.permission.cache' limit 1\nAnd then it's trying to update a row. But there arent any rows in the cache table. So it keeps retrieving alle the permissions from the database.\nI have checked the laravel.log file but that one is empty.. I can see the @hasanyrole tags in the source code. So it's not parsed by the PermissionServiceProvider blade compiler.. I have tested it with the pipes, but this results in the same error as before.\nThe parsed code in the cache is also the same as before.\nThe else is parsed, but the @hasanyrole isn't.. $this->app->afterResolving('blade.compiler', function (BladeCompiler $bladeCompiler) {\nThis is not executed. Debugging before this show the output. But in it doensn't.. Solved. Cleaning cached fixed it. I though I did this already ... . ",
    "aginev": "Yep same for me...\nRole Permissions:\naccess.backend\nview.properties\ncreate.properties\nedit.properties\nview.clients\ncreate.clients\nedit.clients\nDirect Permissions: none\nAll Permissions:\naccess.backend\nview.properties\ncreate.properties\nedit.properties\nview.clients\ncreate.clients\nedit.clients\n(at)can('view.sliders') => true\nauth()->user()->hasPermissionTo('view.sliders') => false. ",
    "mathieutu": "I think Travis has a problem: tests passed on 7.0 and 7.1 but all other build have failed, but not only on my PR. And it's blocked on \"pending\" for the last 3 hours... And for Scrutinizer \"issues\" I understand and I may fix it if you want, but it could bring some conflict with Laravel (I've already experienced the same situation, where an abstract function is declared several times).. My pleasure! :D. ",
    "gcphost": "\nfreekmurze released this 2 minutes ago\n\nNice :D . ",
    "svenluijten": "Ok, I can kind of see how StyleCI fails (though all the other docblocks contradict that), but Travis failing isn't this PR's fault, right? \ud83d\ude15 . ",
    "scottmcdhome": "That is what I ended up figuring out on my own. Glad it wasn't just me. \nThanks for responding.\nI don't recall the document saying anything about this. Might be worth noting.. ",
    "meta0102": "$role->users()->get();\n$permission->users()->get();. ",
    "lednhatkhanh": "Oh, I found the solution:\nI just need to save the role before I can assign the permission and save the user before I can assign the role!. ",
    "derekmd": "I've widened the scope of that test to instead make assertions on database queries.. It is hit.\nThe problem is a serialized Eloquent Collection object in the Redis store is a 1.8mb string. That is fetched from Redis by each request. With sufficient traffic, that becomes its own bottleneck as it affects Redis hits (even outside permissions) for all other requests.\nI managed to lower the role/permission Collection memory footprint but 1.2mb is still excessive. I'll have to rethink the permission scheme as one-to-one Permission-to-route name isn't feasible for hundreds of routes.. My quick fix has been to lower the memory footprint of the serialized Collection.\n\nMerge roles that had about the same users in its grouping.\nRemove permissions no longer needed.\nRemove timestamps from the permissions and roles tables.\n\n```php\n  use Illuminate\\Support\\Facades\\Schema;\n  use Illuminate\\Database\\Migrations\\Migration;\nclass AlterPermissionsDropTimestamps extends Migration\n  {\n      public function up()\n      {\n          $config = config('laravel-permission.table_names');\n      Schema::table($config['roles'], function ($table) {\n          $table->dropColumn('created_at', 'updated_at');\n      });\n\n      Schema::table($config['permissions'], function ($table) {\n          $table->dropColumn('created_at', 'updated_at');\n      });\n  }\n\n}\n  ``\n* Whitelist superadmin-only routes (as I'm doing one-to-one mapping withpermissions) and remove those routes from thepermissionstable. In theUser` model:\n```php\n  use HasRoles {\n      hasPermissionTo as spatieHasPermissionTo;\n  }\npublic function hasPermissionTo($permission)\n  {\n      if ($this->isAdmin()) {\n          return true;\n      }\n  try {\n      return $this->spatieHasPermissionTo($permission);\n  } catch (PermissionDoesNotExist $e) {\n      return false;\n  }\n\n}\n  ```\nThat will only hit the roles table without touching the cache.\nEventually I want to:\n\ncall PermissionRegistrar@registrarPermissions() conditionally as it's not needed for certain request URI namespaces like /api/.\nmake permissions based on resourceful admin.resource.* rather than each admin.resource.index, admin.resource.create, admin.resource.destroy, etc. Unfortunately these controllers have been sloppily done by not using RESTful resource controller verbs (for both method names and route name aliases) so it stands a lengthy task to get right. Consider it another reason to DHH a Laravel project's controllers from the outset.. \n",
    "kabeda": "Thanks a lot, it's a clue.. ",
    "meness": "@freekmurze I'm going to make this package support Lumen as well, but it keep saying\n\nTarget [Illuminate\\Contracts\\Logging\\Log] is not instantiable\n\nDo you know how to fix this?. @timgavin It didn't help. ",
    "dilantha": "No worries. ",
    "bjarn": "@drbyte I am using Sequel Pro indeed, it has ID 1.\nI just found an article saying I have to change my boot() in AuthServiceProvider to:\n```\n  public function boot(GateContract $gate)\n  {\n    $this->registerPolicies($gate);\nforeach ($this->getPermissions() as $permission) {\n  $gate->define($permission->name, function ($user) use ($permission) {\n    return $user->hasPermission($permission);\n  });\n}\n\n}\n```\nin order to make can() work in blade, which didn't work before. Seems to work now :). The PermissionServiceProvider.php is in my config/app.php, so that shouldn't be the issue. But I hope it gets solved soon, no hurries for me since it works now :). Update: @can() now works if a user has the permission, but if the user has a role which has that permission, it doesn't work...\n//Double checked, it was me not adding the permission to the role. Doesn't explain the issues I mentioned earlier tho :)\n//Another update: Seems like the blade directives work perfectly, but when using a Middleware to check page permissions, it returns PermissionDoesNotExist. @eeeeek-da-cat Also downgraded to 1.11, fixed it for me too.. @komphet5139 I am not going to edit vendor files, if it is the permanent solution, why not add a pull request? \ud83d\udc4d . ",
    "eeeeek-da-cat": "I am experiencing similar issues (permissions suposedly not existing, while they are present in DB) since bump to 1.12 ...reverting to 1.11 fixes all issues for me.. Create a new project and force it to use 1.11 ... create some permissions and then upgrade to 1.12. Issues started quite soon after upgrading ... maybe even immediately but I noticed after a few hours. I think there is a missmatch with cache keys ... anyway ... succes met oplossen ;) . Hey @AlexVanderbist \nI just did a clean install of my project on my dev-laptop and set my composer.json for 1.12 straight away ... no issues whatsoever (yet) ... somehow there must've been a discrepancy in the cache on upgrading.  I can do some more test scenarios tonight if needed.. Yeah ... that seems like a good idea. I am quite certain it was the cache since I can't reproduce it when I try it in a blank folder from scratch. Still weird though,  because like you said cache should flush itself, maybe it was a combination of other packages that got updated simultaneous that somehow rendered cache invalid, or permissions still active in session  .... either way ... after a clean setup my project seems to be working fine on 1.12 too. . ",
    "jdcrecur": "Exact same problem for me. But it definitely has something to do with the caching system within package.\nA fresh db migraiton and seed results in everything working fine... continue to develop the app then out of nowhere the permission is gone and the throw new PermissionDoesNotExist(); is called from vendor/spatie/laravel-permission/src/Models/Permission.php @ line 71.\nDowngrading to 1.11 to see if the issue presists.\n--- update ---\nDowngrading to 1.11 fixed the issue for me too.. ",
    "otono": "Had the same problem with $role->givePermissionTo(). Downgrading to 1.11 helps.. ",
    "komphet": "Here is problem file\n\nvendor/spatie/laravel-permission/src/PermissionRegistrar.php@getPermissions()\n\nI change form\nreturn $this->cache->rememberForever($this->cacheKey, function () {\n            return app(Permission::class)->with('roles')->get();\n        });\nTo\nreturn app(Permission::class)->with('roles')->get();\nIt's work!\n. ",
    "Frondor": "Permission cache shouldn't expire until Role model got its permissions updated.\nShouldn't this logic reside on a Model observer? Every time  Role is saved (permissions updated), permission cache should be flushed (simply deleted).. @AlexVanderbist mmm then it could be good to provide artisan commands so users dont mess under any circunstance with DB, and there's no need to create an admin panel.\nphp artisan permison:make see_menu\nphp artisan permission:grant see_menu --user=FooUser\nphp artisan permission:grant see_menu --role=BarRole\nphp artisan permission:revoke see_menu --role=BarRole\nphp artisan role:make admin_role\nphp artisan role:grant admin_role --user=FooUser\nphp artisan role:revoke admin_role --user=FooUser\nAnd we can even make use of CLI i/o to pull  all roles/permissions to set them dinamically... its just an  idea for a feature I think this package lacks . @AlexVanderbist you can always \\Artisan::call('role:make admin'); for consistency, which internally does the same than Role::create(). I don't know but if I must create an ui for permission management I'd use the commands and leverage the logic to this package.. @AlexVanderbist \nWhat about conditionally adding support for $user->roles, $role->permissions relationship caching? This way, if $config['laravel-permission]['cache_relationships'] is true both methods assignRole and givePermissionTo shall flush that relationship cache (parent model usually). \nI hope I explained myself.. That means I have to manually uninstall previous migration, delete it and publish the new one every time a major version comes out. That doesn't make any sense to me to be honest.\nIf you are always using the same file, you should be loading it already from the service provider with loadMigrationsFrom() (you can even control it using a config key, so those who for some weird reason have to edit the migration -which in my opinion should never happen, fork this repo instead- can do it) in my opinion. Or just stop calculating the file timestamp at the moment publishing it.. ",
    "archy-bold": "I have the same issue.\nDowngrading to 1.11 only works for $user->hasPermissionTo($permName) and not for $user->can($permName). I add my permissions to roles with database seeds that simply inserts with the DB facade:\nDB::table('permissions')->insert([\n    'name' => $permName,\n]);\nIs there something wrong with doing it that way?\nI managed to fix the issue by running php artisan cache:clear but how can I prevent the cache going out of sync?. Ah cool, so provided I run php artisan cache:clear after every php artisan db:seed I'll be ok?. ",
    "aliworkshop": "go to vendor/spatie/laravel-permission/src/Models/Permission.php\nin line 80 \nremove  :\n        $permission = static::getPermissions()->where('name', $name)->where('guard_name', $guardName)->first();\nreplace :\n        $permission = Permission::where('name', $name)->where('guard_name', $guardName)->first();\nproblem will be solved. https://github.com/spatie/laravel-permission/issues/231#issuecomment-314103176. https://github.com/spatie/laravel-permission/issues/231#issuecomment-314103176. ",
    "rizerzero": "an other reason could be adding manually a permission on the table \n never forget to clear cache with this method \nforgetCachedPermissions . cache:clearclears the global cache of the entire app, but the main reason for adding this command is that it allows us to know that permissions are cached by the package without digging in the code.\ni was creating some rules for testing and making some changes directly on the database but i did not see the effect so i had to search and find out about the caching by myself this  command would have saved me some time ;). thanks for the corrections . ",
    "EngEryx": "I solved my case by first querying and passing the instance of that model to the $user->givePermissionTo .... ",
    "Longhot": "php artisan make:auth. ",
    "developeritsme": "It happens only when you pass same roles/permissions :)\nI had a situation where I was creating roles array depending on various (multiple/different) API responses.\nThis is not actually any bug in package but I thought it should prevent such (developer's) error. \n. ",
    "webdevium": "Yes, of course.. ",
    "Scarwolf": "Ok, found out this is also related to the caching mentioned in #231 . Clearung the cache using php artisan cache:clear solves it.. ",
    "benrasmusen": "@freekmurze here is a gist with the output: \nhttps://gist.github.com/benrasmusen/a96ecf5ea9582bb63da6207b45560bfd\nThe call to Auth::user()->hasRole('Admin') throws the same error as the directive. But you'll see that the dump of Auth::user() does contain the proper roles.. Yeah, it's really strange. The relations seem to be attached properly, but $this->roles isn't working as it should... it's frustrating. :/\nI put the debug inside this conditional, above the return:\nif (is_string($roles)) {\n    return $this->roles->contains('name', $roles);\n}\nHere is $this: https://gist.github.com/benrasmusen/24af1b0503a289269554ffb996d06ca8\n$this->roles returns null. Here is my entire User.php model:\n```php\n<?php\nnamespace App\\Models;\nuse Backpack\\CRUD\\CrudTrait;\nuse Spatie\\Permission\\Traits\\HasRoles;\nuse Illuminate\\Notifications\\Notifiable;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nuse Backpack\\Base\\app\\Notifications\\ResetPasswordNotification as ResetPasswordNotification;\nclass User extends Authenticatable\n{\n    use Notifiable;\n    use CrudTrait;\n    use HasRoles;\nprotected $with = ['roles', 'permissions'];\n\n/**\n * The attributes that are mass assignable.\n *\n * @var array\n */\nprotected $fillable = [\n    'first_name', 'last_name', 'email', 'password',\n];\n\n/**\n * The attributes that should be hidden for arrays.\n *\n * @var array\n */\nprotected $hidden = [\n    'password', 'remember_token',\n];\n\n/**\n * Send the password reset notification.\n *\n * @param  string  $token\n * @return void\n */\npublic function sendPasswordResetNotification($token)\n{\n    $this->notify(new ResetPasswordNotification($token));\n}\n\npublic function getFullNameAttribute()\n{\n    return ucfirst($this->first_name) . ' ' . ucfirst($this->last_name);\n}\n\npublic function notes()\n{\n    return $this->belongsToMany('App\\Model\\StudentNotes');\n}\n\n}\n```\nNOTE: I recently added the protected $with = ['roles', 'permissions']; param to retrieve the associations for user management in my CRUD controller. But I was experiencing the issue before I added that line.\nDoes anything look amiss to you? \nIf you don't see anything obviously wrong then I'll try to set something more vanilla up for testing. Since you're not able to recreate it, it seems like it's probably something wrong with my code.. Hey @AlexVanderbist thanks for jumping in! :)\nI haven't done much to modify anything related to the User model or Authentication. The only thing I can think of is that I move it from app/User.php -> app/Models/User.php not sure if that would affect anything...?\nNot sure if this helps, but I did discover that if I use this: $this->roles()->get() instead of $this->roles it does return the correct roles for that user.\nAs to your question about the user edit page, it does actually retrieve the correct \"roles\" and \"permissions\" without any extra code. So, that's even more strange!\nCan I dump any additional variable, or provide any more code to help diagnose the issue?. Wow, I feel like a complete idiot. \ud83e\udd26\u200d\u2642\ufe0f \nThere is a roles column in the users table. I created the schema for this awhile ago and haven't thought to check back on it since implementing laravel-permission.\nIf I remove that column everything is working as expected.\nI am so sorry for wasting your time! I really appreciate all your help @AlexVanderbist and @freekmurze!. ",
    "elhawy": "i have the same problem but can not remove this column now because re factor @AlexVanderbist and @freekmurze!. Thank for your time  . error  on guard\nOn Thu, Oct 11, 2018, 7:33 PM Chris Brown notifications@github.com wrote:\n\nClosed #901 https://github.com/spatie/laravel-permission/issues/901.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/spatie/laravel-permission/issues/901#event-1898858852,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AQFdhznctwkzd6yNw-sjI6_aYR_stDmaks5uj4DsgaJpZM4XX8lo\n.\n. \n",
    "anandsiddharth": "Thank you for your attention @AlexVanderbist \nThe middleware thing is slightly different from my question, I just simply want to know if their is way to authenticate only admin user in the admin auth controller not the regular user.\nI have subdomains of 2 different types of users. It should act as 2 different application. One solution could be that I could redirect the specific user to his respective domain after login.\nIs their any solution that I can set user role value in Auth class so that it will authenticate user with that particluar role.. this is a much better way instead of authenticating and then checking,\nthanx @AlexVanderbist . ",
    "bambamboole": "I've got the same problem with getting roles and permissions in json.\ni wrote this in User Model:\n```\n    protected $appends = [ 'roles' ];\npublic function getRolesAttribute() {\n    $this->roles;\n}\n\n```\nbut get this error:\nUndefined property: App\\User::$roles\nWhat's my failure?. ",
    "AbbyJanke": "looks like its not working as intended, will send a new one once fixed.. ",
    "fabricecw": "Check #771 for migration script.. I wrote a migration script for V1 to V2.28. If someone wants to upgrade from V1 to V2, you may use my \nUpdate spatie/laravel permission tables from V1 to V2 Gist.. @drbyte You're right. It seems that the changes from issue #505 is the bottleneck. If I replace the registerPermissions() method in the PermissionRegistrar with the code from 1.12.0 everything works fine. But if I'm honest, I don't fully understand the logic of the new code. Maybe someone can explain the changes to me :-). The number of executed queries are in both versions the same. The permission queries also looks the same. . @drbyte We have planned to update the app at least to L5.5 in a few weeks. I will let you know if the performance is better then. Thank you for taking the time.. We updated our application to L5.7 and also upgraded from V1.13 to the V2.28 version of laravel-permission. But unfortunately, the performance issue still exists.\nIf I replace the following code in the PermissionRegistrar.php:\n```\npublic function registerPermissions(): bool\n    {\n        $this->gate->before(function (Authorizable $user, string $ability) {\n            try {\n                if (method_exists($user, 'hasPermissionTo')) {\n                    return $user->hasPermissionTo($ability) ?: null;\n                }\n            } catch (PermissionDoesNotExist $e) {\n            }\n        });\n    return true;\n}\n\n```\nwith the following code:\npublic function registerPermissions()\n    {\n        $this->getPermissions()->map(function ($permission) {\n            $this->gate->define($permission->name, function ($user) use ($permission) {\n                return $user->hasPermissionTo($permission);\n            });\n        });\n    }\nwe don't have any problems. Depending on the amount of orders displayed in the view, Laravel loads between 80 and 200 gates. The view checks each order with the @can() Blade function. The user's permission are loaded through a role (user has one role). All permissions are assigned to roles.\nIf I use the default code, 40 gates lead to loading time of ~1500MS. With 80 gates, the loading time increases up to ~2500MS.\nIf I use the registerPermissions() from V1.13, 80 gates needs a loading time of ~120MS, 200 gates ~140MS.\n. I tested it again in my code and wrapped the old approach into the before callback.\n```\n/\n     * Register the permission check method on the gate.\n     \n     * @return bool\n     /\n    public function registerPermissions(): bool\n    {\n        $this->gate->before(function() {\n            $this->loadPermissionsToGate();\n        });\n    return true;\n}\n\n/**\n * Load the permissions to the gate.\n *\n * @return bool\n */\npublic function loadPermissionsToGate(): bool\n{\n    $this->getPermissions()->map(function ($permission) {\n        $this->gate->define($permission->name, function (Authorizable $user) use ($permission) {\n            try {\n                if (method_exists($user, 'hasPermissionTo')) {\n                    return $user->hasPermissionTo($permission) ?: null;\n                }\n            } catch (PermissionDoesNotExist $e) {\n            }\n\n            return true;\n        });\n    });\n\n    return true;\n}\n\n```\nExecution time: 2980ms\n```\nIf I call the define directly:\n/\n     * Register the permission check method on the gate.\n     \n     * @return bool\n     /\n    public function registerPermissions(): bool\n    {\n        $this->loadPermissionsToGate();\n    return true;\n}\n\n/**\n * Load the permissions to the gate.\n *\n * @return bool\n */\npublic function loadPermissionsToGate(): bool\n{\n    $this->getPermissions()->map(function ($permission) {\n        $this->gate->define($permission->name, function (Authorizable $user) use ($permission) {\n            try {\n                if (method_exists($user, 'hasPermissionTo')) {\n                    return $user->hasPermissionTo($permission) ?: null;\n                }\n            } catch (PermissionDoesNotExist $e) {\n            }\n\n            return true;\n        });\n    });\n\n    return true;\n}\n\n```\nExecution time: 105ms\nIt doesn't make sense for me, because as I understand it, Gate::before only collect callback functions.. @drbyte I\u2018ll take a look at them.. ",
    "mohd-isa": "Thanks. Yes, it's \"web\"\nOn Apr 12, 2017 9:01 AM, \"Alex Vanderbist\" notifications@github.com wrote:\n\nHi!\nDo you have a default guard set in your authentication config file?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/spatie/laravel-permission/issues/264#issuecomment-293481973,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ACj0-k2WRCY8J4M31UqKA6woGa1wb8AZks5rvGjLgaJpZM4M6_C1\n.\n. Yes, I've already did that and it's giving me an empty string.\n\neven though I never touched auth.php and the value of guard is set to \"web\"\nthere\nOn Apr 12, 2017 10:36 AM, \"Alex Vanderbist\" notifications@github.com\nwrote:\n\nCan you dump the $guardName bellow the following line?\n$guardName = $guardName ?? config('auth.defaults.guard');dump($guardName); // add this\nAt that point $guardName should never be null if your config file is set\ncorrectly...\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/spatie/laravel-permission/issues/264#issuecomment-293498281,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ACj0-prvC924G6H_n6-Y28A2Di16owpFks5rvH72gaJpZM4M6_C1\n.\n. this check $guardName = $guardName ?? config('auth.defaults.guard'); fails because of the empty string.. Yea, that's right.. this fixed the issue.. Thanks.. @connor11528  If you changed User model namespace, make sure you update it in auth.php as well. \n",
    "connor11528": "I am getting this same error. What was the update to the auth.php file?\nI am using this starter package: https://github.com/LaravelDaily/laravel-roles-permissions-manager. Clearing out the cache and reseeding the database helped me out with this (#359)\nFor the namespaces you changed I'm a bit unfamiliar with how they work in PHP. This is my User.php file\n```\nnamespace App;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nuse Illuminate\\Notifications\\Notifiable;\nuse Spatie\\Permission\\Traits\\HasRoles;\nuse Hash;\nclass User extends Authenticatable\n{\n    use Notifiable;\n    use HasRoles;\n    ....\n```\nAnd my auth.php file:\n```\n<?php\nreturn [\n'defaults' => [\n    'guard' => 'web',\n    'passwords' => 'users',\n],\n\n'guards' => [\n    'web' => [\n        'driver' => 'session',\n        'provider' => 'users',\n    ],\n\n    'api' => [\n        'driver' => 'token',\n        'provider' => 'users',\n    ],\n],\n\n'providers' => [\n    'users' => [\n        'driver' => 'eloquent',\n        'model' => App\\User::class,\n    ],\n\n    // 'users' => [\n    //     'driver' => 'database',\n    //     'table' => 'users',\n    // ],\n],\n\n'passwords' => [\n    'users' => [\n        'provider' => 'users',\n        'table' => 'password_resets',\n        'expire' => 60,\n    ],\n],\n\n];\n```\nI think the namespaces are all good so maybe it was something to do with the cached data that cleared it out. Same error with php artisan migrate:refresh --seed\nMy PermissionSeed file looks like this:\n```\n<?php\nuse Illuminate\\Database\\Seeder;\nuse Spatie\\Permission\\Models\\Permission;\nclass PermissionSeed extends Seeder\n{\n    /\n     * Run the database seeds.\n     \n     * @return void\n     /\n    public function run()\n    {\n        Permission::create(['name' => 'users_manage']);\n    }\n}\n```\nIf I comment out the Permission::create seed it moves onto the RoleSeed and I get an error: There is no permission named 'users_manage' for guard 'web'.\nThe RoleSeed looks like this:\n```\n<?php\nuse Illuminate\\Database\\Seeder;\nuse Spatie\\Permission\\Models\\Role;\nclass RoleSeed extends Seeder\n{\n    /\n     * Run the database seeds.\n     \n     * @return void\n     /\n    public function run()\n    {\n        $role = Role::create(['name' => 'administrator']);\n        $role->givePermissionTo('users_manage');\n    }\n}\n```. I had to clear the permission cache!\nRunning:\nphp artisan cache:forget spatie.permission.cache\nphp artisan cache:clear\nGot me going again! Thank you\nhttps://github.com/spatie/laravel-permission/issues/231. ",
    "GrahamCampbell": "\nIf I understand correctly, you bound a class that doesn't adhere to the Illuminate\\Contracts\\Logging\\Log interface to that interface.\n\nBugsnag does provide a class that does though: https://github.com/bugsnag/bugsnag-laravel/blob/master/src/MultiLogger.php.. ",
    "kjdion84": "Thank you!. @if (auth()->guest())\n    <!-- Guest Menu -->\n    <li {{ (request()->is('login') ? 'class=active' : '') }}><a href=\"{{ route('login') }}\">Login</a></li>\n    @if (config('lion.allow_registration'))\n        <li {{ (request()->is('register') ? 'class=active' : '') }}><a href=\"{{ route('register') }}\">Register</a></li>\n    @endif\n@else\n    <!-- Auth Menu -->\n    @if (auth()->user()->hasAnyPermission(['View Users', 'View Roles']))\n        <li class=\"dropdown\">\n            <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-expanded=\"false\">\n                Settings <span class=\"caret\"></span>\n            </a>\n            <ul class=\"dropdown-menu\" role=\"menu\">\n                @can('View Users')\n                    <li {{ (request()->is('users') ? 'class=active' : '') }}><a href=\"{{ route('users') }}\">Users</a></li>\n                @endcan\n                @can('View Roles')\n                    <li {{ (request()->is('roles') ? 'class=active' : '') }}><a href=\"{{ route('roles') }}\">Roles</a></li>\n                @endcan\n            </ul>\n        </li>\n    @endif\n    <li class=\"dropdown\">\n        <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-expanded=\"false\">\n            {{ auth()->user()->name }} <span class=\"caret\"></span>\n        </a>\n        <ul class=\"dropdown-menu\" role=\"menu\">\n            <li {{ (request()->is('profile') ? 'class=active' : '') }}><a href=\"{{ route('profile') }}\">Profile</a></li>\n            <li><a href=\"{{ route('logout') }}\">Logout</a></li>\n        </ul>\n    </li>\n@endif. User {#230 \u25bc\n  #fillable: array:3 [\u25b6]\n  #hidden: array:2 [\u25b6]\n  #connection: \"mysql\"\n  #table: null\n  #primaryKey: \"id\"\n  #keyType: \"int\"\n  +incrementing: true\n  #with: []\n  #withCount: []\n  #perPage: 15\n  +exists: true\n  +wasRecentlyCreated: false\n  #attributes: array:7 [\u25b6]\n  #original: array:7 [\u25b6]\n  #casts: []\n  #dates: []\n  #dateFormat: null\n  #appends: []\n  #events: []\n  #observables: []\n  #relations: array:1 [\u25b6]\n  #touches: []\n  +timestamps: true\n  #visible: []\n  #guarded: array:1 [\u25b6]\n  #rememberTokenName: \"remember_token\"\n}. I think I almost have it. I created a new blade directive in my app service provider but it still isn't working properly:\n```\n       Blade::directive('hasanypermission', function ($permissions) {\n            $permissions = array_map('trim', explode(',', $permissions));\n            $has = false;\n        foreach ($permissions as $permission) {\n            if (auth()->user()->hasPermission($permission)) {\n                $has = true;\n            }\n        }\n\n        return \"<?php if ($has): ?>\";\n    });\n    Blade::directive('endhasanypermission', function () {\n        return '<?php endif; ?>';\n    });\n\n```\nBlade:\n@hasanypermission('Read Users, Read Roles')\nStill doesn't work properly though but I feel like I am close.... This works but it is ugly:\n@if (Gate::check('Read Users') || Gate::check('Read Roles'))\nWould be nice if I could just do:\n@hasAnyPermission(['Read Users', 'Read Roles']). I figured it out by combining the two things:\n```\n        Blade::directive('hasanypermission', function ($permissions) {\n            $permissions = explode(',', $permissions);\n            $conditional = [];\n        foreach ($permissions as $permission) {\n            $conditional[] = \"Gate::check($permission)\";\n        }\n\n        return \"<?php if (\".implode(' || ', $conditional).\"): ?>\";\n    });\n    Blade::directive('endhasanypermission', function () {\n        return '<?php endif; ?>';\n    });\n\n```\nBlade:\n@hasanypermission ('Read Users', 'Read Roles'). Check out the blade directive I made. It works great for me.. Well I figured it out by adding an additional array value to the create() method, a bit hacky but it works:\n$role = Role::create(array_add(request()->all(), 'guard_name', config('auth.defaults.guard')));. Use the  ->default() method in your migration and set it to the config value I mentioned.. This is a bad idea:\n$role = Role::create(['name' => 'super-admin']);\n$role->givePermissionTo(Permission::all());\n\nBecause when new permissions are added, super-admin will not have perm.\nIt is much better to do this through Laravel Gate:\nGate::before(function (User $user) {\n    if ($user->hasRole('super-admin')) {\n        return true;\n    }\n});.\n",
    "hilioski": "@sebastiandedeyne  I try to clear cache but problem still here.\nMy default guard is web but my role viewer has guard_name = api . Maybe this is the problem but this must be like this because I have users on production and all must have viewer role.. Error: The given role or permission should use guardwebinstead ofapi.\nviewer role has quard_name = api, but my default guard is set to web. I think that there is the problem.... ",
    "wyudong": "@sebastiandedeyne I don't not quite understand assignRole($user->assignRole($viewerRole)) you said. I have two different guards, web and api. So how shall I assign a role whose guard_name = api to a registered user?\n// register\n$user = User::create($inputList);\n$user->assignRole($user->assignRole('composer', 'api'));    // error\n\nThanks!. @sebastiandedeyne Here is my config/auth.php\n```php\n<?php\nreturn [\n    'defaults' => [\n        // 'guard' => 'web',\n        'guard' => 'api',\n        'passwords' => 'users',\n    ],\n'guards' => [\n    'web' => [\n        'driver' => 'session',\n        'provider' => 'users',\n    ],\n\n    'api' => [\n        // 'driver' => 'token',\n        // 'driver' => 'passport',\n        'driver' => 'jwt',\n        'provider' => 'users',\n    ],\n],\n\n'providers' => [\n    'users' => [\n        'driver' => 'eloquent',\n        'model' => App\\Models\\User::class,\n    ],\n\n    // 'users' => [\n    //     'driver' => 'database',\n    //     'table' => 'users',\n    // ],\n],\n\n'passwords' => [\n    'users' => [\n        'provider' => 'users',\n        'table' => 'password_resets',\n        'expire' => 60,\n    ],\n],\n\n];\n```. @sebastiandedeyne I think we've made a step forward. I can now assign role to a user in this way:\nphp\n$user->assignRole(Role::findByName('composer', 'api'));\nI don't know if it is the correct way to assign an actual object with assignRole.\n. @SeoRoman Have you resolved your issue?. @ChiefScript Check latest comments in issue #276. ",
    "nelson6e65": "\n@sebastiandedeyne I just released these changes in 2.5.1.\n\n\ud83d\ude15  The latest version available at the moment is 2.4.2:. Still not working for $user->syncRoles('Administrator'). By using @wyudong workaround (Role::findByName('Administrator', 'api')) seems to work, but it does not when I use string.. ",
    "cyberfly": "Extended example of @wyudong answer\n```\npublic function update(UpdateUserRequest $request, $id)\n    {\n        $user = $this->user->findOrFailUuid($id);\n    $user->fill($request->all());\n\n    $user->save();\n\n    //sync roles\n\n    if ($request->filled('roles')) {\n\n        $roles = [];\n\n        foreach ($request->roles as $role_name) {\n\n            $role = Role::findByName($role_name, 'api');\n\n            if ($role) {\n                $roles[] = $role;\n            }\n        }\n\n        if (!empty($roles)) {\n            $user->syncRoles($roles);\n        }\n    }\n\n    return new UserResource($user->load('roles'));\n}\n\n```. ",
    "BartHuis": "i see the service provider of entrust calls the blade directive different, and had everything in the boot instead of registering it:\nhttps://github.com/Zizaco/entrust/blob/master/src/Entrust/EntrustServiceProvider.php\ni don't know enough about boot/register and everything to understand what's happening here, but when i change the way of calling /Blade, it's not working, when i put everything from register to boot, it doesn't work, but if i do both, it works.\nso when i change your service provider to:\n```\n<?php\nnamespace Spatie\\Permission;\nuse Illuminate\\Support\\ServiceProvider;\nuse Illuminate\\View\\Compilers\\BladeCompiler;\nuse Spatie\\Permission\\Contracts\\Role as RoleContract;\nuse Spatie\\Permission\\Contracts\\Permission as PermissionContract;\nclass PermissionServiceProvider extends ServiceProvider\n{\n    public function boot(PermissionRegistrar $permissionLoader)\n    {\n        $this->publishes([\n            DIR.'/../config/permission.php' => $this->app->configPath().'/permission.php',\n        ], 'config');\n    if (! class_exists('CreatePermissionTables')) {\n        $timestamp = date('Y_m_d_His', time());\n\n        $this->publishes([\n            __DIR__.'/../database/migrations/create_permission_tables.php.stub' => $this->app->databasePath().\"/migrations/{$timestamp}_create_permission_tables.php\",\n        ], 'migrations');\n    }\n\n    $this->registerModelBindings();\n\n    $permissionLoader->registerPermissions();\n\n    $this->mergeConfigFrom(\n        __DIR__.'/../config/permission.php',\n        'permission'\n    );\n    $this->registerBladeExtensions();\n}\n\npublic function register()\n{\n}\n\nprotected function registerModelBindings()\n{\n    $config = $this->app->config['permission.models'];\n\n    $this->app->bind(PermissionContract::class, $config['permission']);\n    $this->app->bind(RoleContract::class, $config['role']);\n}\n\nprotected function registerBladeExtensions()\n{\n\n    \\Blade::directive('role', function ($arguments) {\n        list($role, $guard) = explode(',', $arguments.',');\n\n        return \"<?php if(auth({$guard})->check() && auth({$guard})->user()->hasRole({$role})): ?>\";\n    });\n\n    \\Blade::directive('endrole', function ($arguments) {\n        return '<?php endif; ?>';\n    });\n\n    \\Blade::directive('hasrole', function ($arguments) {\n            list($role, $guard) = explode(',', $arguments.',');\n\n            return \"<?php if(auth({$guard})->check() && auth({$guard})->user()->hasRole({$role})): ?>\";\n        });\n    \\Blade::directive('endhasrole', function () {\n            return '<?php endif; ?>';\n        });\n\n    \\Blade::directive('hasanyrole', function ($arguments) {\n            list($roles, $guard) = explode(',', $arguments.',');\n\n            return \"<?php if(auth({$guard})->check() && auth({$guard})->user()->hasAnyRole({$roles})): ?>\";\n        });\n    \\Blade::directive('endhasanyrole', function () {\n            return '<?php endif; ?>';\n        });\n\n    \\Blade::directive('hasallroles', function ($arguments) {\n            list($roles, $guard) = explode(',', $arguments.',');\n\n            return \"<?php if(auth({$guard})->check() && auth({$guard})->user()->hasAllRoles({$roles})): ?>\";\n        });\n    \\Blade::directive('endhasallroles', function () {\n            return '<?php endif; ?>';\n        });\n}\n\n}\n```\nthe role directive works. is there something wrong with my setup why you original doesn't work for me? of is there a change in laravel why this change is needed?\ni see everyone at entrust having problems with the blade directives are advised to replace their serviceprovider, so maybe there's a change in laravel or something?\nhttps://github.com/Zizaco/entrust/issues/418. Zal morgen ff kijken, koningsdag gevierd vandaag ;). Good morning @freekmurze,\ni'll try the vanilla app later, as this temp fix works for us, first some prio's to do.. hmm, i don't have any directions yet in my app service provider, so don't think that's the problem here, but we just moved to santigarcor/laratrust, no problems anymore.... ",
    "bahjaat": "I am moving from Entrust to this one, but also won't execute the code within 'afterRosolving':\n$this->app->afterResolving('blade.compiler', function (BladeCompiler $bladeCompiler) {\n....\nHave you fixed this issue @BartHuis ? \nps: in a vanilla Laravel project the BladeDirectives are working BTW!. Solved. see: https://laracasts.com/discuss/channels/laravel/registerbladeextensions-afterresolving-not-working. That's right indeed. But maybe nice to have it here in the troubleshooting-section, because this package is also using Laravel's cache system.. ",
    "jespersgaard": "thank you that did the trick.\nbut do i have to clear the cache every time i create new roles and permissions and assign these to a user/role?. and now that I am here, is there a way to auto assign a permission to a role each time a new permission is created?\nthank you for your help :-). ",
    "jonagoldman": "@drbyte multi-tenancy is implemented using a 'tenantId' column on relevant tables and a simple middleware that looks in the request header for a 'Tenant-Id' param . There is no need for extra security or data isolation so a single database is good enough in this situation, and much easier to maintain.\nI  just want to know in this case what will be the cleaner solution to have tenants in the roles table so each tenant can create its own set of roles.. @freekmurze the second option being adding a column to the roles table?. ",
    "antony2kx": "What i did was extend the base models\nPermission and Role\nI override the findbyname and create functions to include the company_id which i had put into the migration.\nThe only problem is with the Registrar on boot\nIt is fetching all the permissions and innerjoining them with roles\nselect * from permissions\n270\u03bcs\n/vendor/spatie/laravel-permission/src/PermissionRegistrar.php:63\nselect roles.*, role_has_permissions.permission_id as pivot_permission_id, role_has_permissions.role_id as pivot_role_id from roles inner join role_has_permissions on roles.id = role_has_permissions.role_id where role_has_permissions.permission_id in ('1', '2', '3', '4')\n300\u03bcs\n/vendor/spatie/laravel-permission/src/PermissionRegistrar.php:63\nat this point i would like to add where company_id={} but i cannot because its loaded directly from the package using app(\"Permission::class\")\nand a trait wont solve it.\nnot sure\n. So i got it to work by just using the trait alone and extending the class.\nnamespace App;\nuse Spatie\\Permission\\Models\\Permission AS BasePermission;\nuse App\\Traits\\AppendCompany;\nclass Permission extends BasePermission\n{\n    //\n      use AppendCompany;\n}\nAND\nphp\n\n<pnamespace App;\nuse Spatie\\Permission\\Models\\Role AS BaseRole;\nuse App\\Traits\\AppendCompany;\nclass Role extends BaseRole\n{\n    //\n      use AppendCompany;\n}\nAll i had to do after was change the classes inside config/permission.php to my extended classes like so\n         */\n    'permission' => App\\Permission::class,\n\n    /*\n     * When using the \"HasRoles\" trait from this package, we need to know which\n     * Eloquent model should be used to retrieve your roles. Of course, it\n     * is often just the \"Role\" model but you may use whatever you like.\n     *\n     * The model you want to use as a Role model needs to implement the\n     * `Spatie\\Permission\\Contracts\\Role` contract.\n     */\n\n    'role' => App\\Role::class,\n\n. @SwainPrasad  I created my own roleModel\n```php\n<?php\nnamespace App;\nuse Spatie\\Permission\\Models\\Role AS BaseRole;\nuse App\\Traits\\AppendCompany;\nuse Illuminate\\Database\\Eloquent\\SoftDeletes;\nuse App\\Traits\\Trackable;\nclass Role extends BaseRole\n{\n    //\n  use AppendCompany;\n\n  use SoftDeletes, Trackable;\n\n\n  protected $dates = ['deleted_at'];\n\n}\n```\nand permission model\n```php\n<?php\nnamespace App;\nuse Spatie\\Permission\\Models\\Permission AS BasePermission;\nuse App\\Traits\\AppendCompany;\nuse Illuminate\\Database\\Eloquent\\SoftDeletes;\nuse App\\Traits\\Trackable;\nclass Permission extends BasePermission\n{\n    //\n      use AppendCompany;\n      use SoftDeletes, Trackable;\n  protected $dates = ['deleted_at'];\n\n}\n```\nI then modify app/config/permissions.php\nand changed  based models to\n```php\nreturn [\n'models' => [\n\n    /*\n     * When using the \"HasRoles\" trait from this package, we need to know which\n     * Eloquent model should be used to retrieve your permissions. Of course, it\n     * is often just the \"Permission\" model but you may use whatever you like.\n     *\n     * The model you want to use as a Permission model needs to implement the\n     * `Spatie\\Permission\\Contracts\\Permission` contract.\n     */\n\n    'permission' => App\\Permission::class,\n\n    /*\n     * When using the \"HasRoles\" trait from this package, we need to know which\n     * Eloquent model should be used to retrieve your roles. Of course, it\n     * is often just the \"Role\" model but you may use whatever you like.\n     *\n     * The model you want to use as a Role model needs to implement the\n     * `Spatie\\Permission\\Contracts\\Role` contract.\n     */\n\n    'role' => App\\Role::class,\n\n],\n\n```\nthe models that i created\nI also created a scope called\n```php\n<?php\nnamespace App\\Scopes;\n// Scope\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Illuminate\\Database\\Eloquent\\Scope;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass CompanyScope implements Scope\n{\npublic function apply(Builder $builder, Model $model)\n{\n  $builder->where('company_id', '=', app('App\\Company')->id);\n}\n\n}\n```\nappend company and load it into a trait\nThis will append company_id to all your queries when fetching roles\nYou also need to make sure this \"company_id\" exists on your tables\nAnd you are done\n. So i only added company_id to the permissions table with an index and cascade on delete\n```php\n<?php\nnamespace App\\Traits;\ntrait AppendCompany\n{\npublic static function bootAppendCompany()\n{\n\n    static::addGlobalScope(new \\App\\Scopes\\CompanyScope);\n\n}\n\n}\n```\nsee above,\nI apply to company scope to all tables, even the users table\n```php\nnamespace App;\nuse Illuminate\\Notifications\\Notifiable;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nuse App\\Traits\\AppendTenant;\nclass User extends Authenticatable\n{\nuse AppendTenant;\n\n```\nthat is it really, very simple.\nyou can hit me up via gmail at antony2kx [at] gmail [dot] com if you need help.\n. ",
    "SwainPrasad": "@antony2kx We are also looking for the same thing which you have already did. Kindly create package with your changes so that it will be helpful for all.. ",
    "sebastiaanluca": "Looking for a similar solution use multi-tenancy with one database per tenant.\nCan't keep the package's tables in the tenant's database as we only have one set of roles and permissions (we define these, not the tenant). But keeping them in a shared database requires a role/permission to be set for a specific tenant (somewhat like Bouncer does but broader, per role). Yet this makes it difficult to use @can and other helpers as we'd need to check the current tenant and prevent access if the user has no such role or doesn't have it for this tenant.\n@antony2kx Can you post the AppendCompany trait too? Where do you apply the company scope (just to roles and permissions?) and how does your roles and permissions tables look (with an extra company_id field?)?\nThanks in advance! Would really help in deciding the best approach.. Both really helpful!\n@CodeAn Keeping the tenant/company ID in the roles/permissions tables and in the shared database is indeed the way to go. Allows me to define a role per tenant and check which role applies when in that tenant context. No need to seed roles per tenant, just in the shared database.. ",
    "CodeAn": "Make sure to alter the migration. \nIf you want to use global roles, but a multi tenant / company user application, you need a different solution.\nAdd this to model_has_* tables:\n$table->integer('company_id')->unsigned();\n$table->foreign('company_id')\n                ->references('id')\n                ->on(config('tablenames.companies'));\n[note: I have my tables in a config file, change it to match your companies table]\nFurther, make sure to edit the primary keys of those tables:\n$table->primary(['permission_id', 'company_id', 'model_id', 'model_type'], 'model_has_permission_primary');\n$table->primary(['role_id', 'company_id', 'model_id', 'model_type'], 'model_has_roles_primary');\nMake sure you overwrite the function assignRole and assignPermission (and anything related/needed with assigning/deleting/syncing permissions and roles with users), as you need to store the extra company id on the relations table.\nIt depends on your app's requirements how you do this.\nE.g. it's always value x in session.. ",
    "JGamboa": "Can someone helps me a litte :D?. im having the problem of RoleAlreadyExists . @pablorsk  I already did and overwrite to support multi companys, i have one of my applications working that way.\n. fix. ",
    "Talmon": "Run this command :\nphp artisan cache:forget spatie.permission.cache\nThen try running your vendor:publish commands,it should work.. ",
    "eduarguz": "Well, I found a particular use case where I needed to list all the users with one permission, \nUser::permission('access_feature')->pluck('email')->toArray();\nBut yes, thats a particular case, anyway other users may find this useful. ",
    "carlosrgzm": "In the readme file example, you are setting ['middleware' => ['role:admin,access_backend']], but access_backend is a passed as a permission when it comes to the middleware, not as a role param. So is that possible add more than one role ? . ",
    "pcfreak": "Try Route::group(['middleware' => ['role:admin|editor']]. ",
    "acacha": "What do you think? I could propose a PR if you think the solution could be using event models.... Thanks I will use $user->getAllPermissions()!. ",
    "SeoRoman": "Additional Comment: I have already gone through and performed the clear cache as it stated as well... just in case :D. From what I can gather...\nit's using the guard 'web' in my whoops debugger: \nRole::findByName('admin', 'web')\noh, I think I see what the reasoning is for this... testing in a second and I will delete if I figured it out :D. ",
    "sushantDev": "I had the same issue and have figured out the solution and i.e.\nFirst add \"protected $guard_name = 'api';\" in User.php (Model file).\n\nThen, Change your field guard_name to \"api\" in your roles table as shown in screenshot below.\n\nEnjoy Coding :)\nFeel Free to Reply for any issues regarding this.\n. ",
    "odoogit": "@sushantDev Thank you soo much it's working...(after searching many googling ;-) ). ",
    "devingray": "Face Palms. ",
    "morloderex": "I have a question for you! \nWhy is it that your redis cache does not hit all the time after the first request? . ",
    "omarjebari": "Setting $hidden = ['pivot'] on the Spatie Role and Permission models does fix this problem but they are a part of the vendor packages so shouldn't be changed. The only existing solution is to extend these models but this seems excessive given that it's often only to accomplish this.\nI think it is a good idea for the package to be modified to remove 'pivot' from the data returned as i can't imagine a scenario where users want this in the returned data.\nThe alternative is to add extra functions like 'getAllPermssionsWithoutPivot'.\nPlease implement a fix for this.. Thanks for your quick response.\nIs there a scenario where the pivot fields are useful? The data in them (user_id/role_id/permission_id) are all available anyway so why is this relationship required?\nIn most cases the developer wants to pass the models to the frontend where the pivots are redundant.\nIt seems excessive to have to extend the Spatie Role and Permission models simply to set the $hidden variable. I think if you can think of a single use case where they are needed then it makes sense to leave them as they are. Currently i'm using a vuex package that allows you to map backend data directly to frontend models and i have to remove the pivot field to do so as i don't need it in the frontend. Going forward i think that there is a trend where more js packages will encourage the mapping of models between backend and frontend and the 'pivot' field just gets in the way. It serves no purpose, purely an Eloquent hangover.. Yep fair enough. Ok i can do this, happy for you to close this ticket.\nBear in mind that i have to do this on every project though so it almost feels a bit like a bug ;). ",
    "koenverburg": "I have tried it like that, can't access my code right now, but I believe that was not working either. I will give an update when I can access my code.\nUPDATE:\nIm currently testing your method which seems to be a good one, but Im getting an error with it.\nCode @role(['superadmin', 'admin])\nError Parse error: syntax error, unexpected ']', expecting ',' or ')' (View: /var/www/resources/views/notes/index.blade.php)\nI have tried @hasRole and with an @else and it I use and else with hasRole it also errors for some reason\nthe error I get with hasRole and an @else is Parse error: syntax error, unexpected 'else' (T_ELSE), expecting end of file (View: /var/www/resources/views/notes/index.blade.php). found a workaround like this\nphp\n                        @php\n                            $admins = array(\"superadmin\", \"admin\");\n                        @endphp\n                        @role( $admins ) . ",
    "fourstacks": "@freekmurze Awesome, thanks for the response Freek (postcard will be forthcoming!). @mohamedsabil83 - your use case sounds similar to mine (#310)\nIf you are adding roles to a model that is not authenticable (e.g. like the default User model) then there are no guards associated with that model.  You'll need to set the Role on the Account model and explicitly set the guard_name to '' both when creating the role and when assigning the role\nI don't know the structure of your app but you might want to consider an intermediate model to store the users role for a given account account e.g.\nUser > hasMany > AccountProfiles (new model) > belongsTo > Account\nWhen you think about it the Account model shouldn't be assigned a Role, the User should.  But as a User can have many Accounts there needs to be some model/s owned by the User that store info associated with that account for the user.\nIf each Account need to have a unique set of roles then that's a bit of a larger architecture question relating to multi-tenancy but I don't want to assume too much about your app at this stage. ",
    "bryandonwhite": "What I mean is:\n```\nuse Illuminate\\Database\\Seeder;\nuse Spatie\\Permission\\Models\\Role;\nuse Spatie\\Permission\\Models\\Permission;\n$admin_role = Role::where('name','admin')->first();\n$admin_role->givePermissionTo('post_new_blog');\n```\nThe above gives a PermissionDoesNotExist error (the permission DOES exist). BUT:\n$admin_role = Role::where('name','admin')->first();\n$permission = Permission::where('name','post_new_blog')->first();\n$admin_role->givePermissionTo($permission);\nWorks fine. Like I said in my original post, I have to pass a whole permission object to givePermissionTo(). I feel like I must be missing something obvious, that the code at the top is supposed to work according to the documentation. Laravel 5.4.\nI'd really like to understand this before I proceed further - thanks in advance!. No custom guards at all, certainly not multiple. I'm just getting started with this package. But, I can tell you that for example hasRole() and hasPermissionTo() do work with simple strings. It's exactly my example that is driving me crazy.. Am I missing something required that I need to useor otherwise include?. Using 2.1.6, I am still having to use objects instead of the name string for roles/permissions. If I do:\nif($user->hasPermissionTo('post new content')){ // do_stuff(); }\nI get the error: There is no permission named post new content for guard web. The permission is in the database for guard \"web\". If I do: \n$permission = Permission::where('name','post new content')->first();\nif($user->hasPermissionTo($permission)){ // do_stuff(); }\nThat works. I am not intending to report a bug, as I think it is me that is doing something wrong. Can someone clarify what my issue is?. Disregard: This turned out to be a cache issue. It works as expected now.\nImportant note: I had run the artisan commands to clear cache, but that fails silently if there is a filesystem permissions issue that prevents the cache files from being cleared. I only realized what was happening when I did a recursive grep through my entire site instance.... ",
    "thoresuenert": "this works:\n$permission1 = Permission::create(['name' => 'manage-company']);\n        $permission2 = Permission::create(['name' => 'manage-app']);\n        $this->user->givePermissionTo($permission1);\n        $this->user->givePermissionTo($permission2);\ni have a similiar issue:\npublic function setUp()\n    {\n        parent::setUp();\n        $this->user =  factory(User::class)->states('worker')->create();\n        Permission::create(['name' => 'manage-company']);\n        Permission::create(['name' => 'manage-app']);\n        var_dump(Permission::all()->toArray());\n        $this->user->givePermissionTo(['manage-company', 'manage-app']);\n        $this->actingAs($this->user, 'api');\n    }\nthrows:\n```\narray(2) {\n  [0]=>\n  array(5) {\n    [\"id\"]=>\n    int(1)\n    [\"name\"]=>\n    string(14) \"manage-company\"\n    [\"guard_name\"]=>\n    string(3) \"api\"\n    [\"created_at\"]=>\n    string(19) \"2017-06-05 22:19:33\"\n    [\"updated_at\"]=>\n    string(19) \"2017-06-05 22:19:33\"\n  }\n  [1]=>\n  array(5) {\n    [\"id\"]=>\n    int(2)\n    [\"name\"]=>\n    string(10) \"manage-app\"\n    [\"guard_name\"]=>\n    string(3) \"api\"\n    [\"created_at\"]=>\n    string(19) \"2017-06-05 22:19:33\"\n    [\"updated_at\"]=>\n    string(19) \"2017-06-05 22:19:33\"\n  }\n}\nTime: 383 ms, Memory: 16.00MB\nThere were 2 errors:\n1) Tests\\Feature\\ShowMeTest::show_logged_in_user\nSpatie\\Permission\\Exceptions\\PermissionDoesNotExist: There is no permission named manage-company.\n/Users/thoresuenert/dev/kussgmbh-api/vendor/spatie/laravel-permission/src/Exceptions/PermissionDoesNotExist.php:11\n/Users/thoresuenert/dev/kussgmbh-api/vendor/spatie/laravel-permission/src/Models/Permission.php:83\n/Users/thoresuenert/dev/kussgmbh-api/vendor/spatie/laravel-permission/src/Traits/HasPermissions.php:76\n/Users/thoresuenert/dev/kussgmbh-api/vendor/spatie/laravel-permission/src/Traits/HasPermissions.php:24\n/Users/thoresuenert/dev/kussgmbh-api/vendor/laravel/framework/src/Illuminate/Support/Collection.php:702\n/Users/thoresuenert/dev/kussgmbh-api/vendor/spatie/laravel-permission/src/Traits/HasPermissions.php:25\n/Users/thoresuenert/dev/kussgmbh-api/tests/Feature/ShowMeTest.php:23\n```. i had web and api guard active. when i comment out \"web\" it works\nWhich is the right way to tell permission checks to use a guard?. ",
    "skapeyi": "Turned out to be a cache issue too. php artisan config:cache solved the issue.. ",
    "Sjoerrdd": "I'm sorry.\nI updated the snippet.. Yes, the name and guard_name are \"gebruiker\".. Yes, I have.\nIt looks like this:\n```\n'guards' => [\n        'web' => [\n            'driver' => 'session',\n            'provider' => 'users',\n        ],\n'gebruiker' => [\n            'driver' => 'session',\n            'provider' => 'users',\n        ],\n    'api' => [\n        'driver' => 'token',\n        'provider' => 'users',\n    ],\n],\n\n``. Where can I setgebruiker` as default driver?. Yes, I have.. Solved!\nI had a typo overlooked, thanks for the help!. ",
    "xerod": "@Sjoerrdd i have the same problem, could you tell me how to solve this? i don't understand why this isn't working. I have use HasRole on my User model from the beginning but the code still didn't work for me.. @drbyte the user that have register get a client role, but there's nothing happen in model_has_roles.. no error, no custom guards, i'm just using the web guard.\n```\n    'guards' => [\n        'web' => [\n            'driver' => 'session',\n            'provider' => 'users',\n        ],\n    'api' => [\n        'driver' => 'token',\n        'provider' => 'users',\n    ],\n],\n\n```. 1. i'm using backpack permission manage that used spatie/laravel-permission (2.28.2), and Laravel 5.7.21\n\ni've tried to chaining the assignment before but still gives nothing :(\n\nUpdate: i've tried to change the role name right from the database just to check is the assignRole() will return any error. And it returns no error, basically it's not doing anything :(. I create some workaround to solve this, i think this is not the laravel-permission issue. it's just the backpack. So i think i should set the issue as closed.. ",
    "nekromoff": "I just want to add that clearing cache via artisan does not help at all. Even clearing cache just for this module does not help.. ",
    "francisco-gamonal": "I have same problem, but searching the method getPermissions in the class Spatie\\Permission\\PermissionRegistrar:\n```sh\npublic function getPermissions(): Collection\n{\n    return app(Permission::class)->with('roles')->get(); // <- don't use the cache\nreturn $this->cache->remember($this->cacheKey, config('permission.cache_expiration_time'), function () {\n    return app(Permission::class)->with('roles')->get();\n});\n\n}\n```\nIt works now, but it is a terrible idea to do this.\nUpdate:\nThe solution\nsh\nphp artisan cache:forget spatie.permission.cache. ",
    "cbloss": "We are having the same problem here. Clearing the cache didn't help. It only fails on one that was newly created called admin.oauth. We tried changing the name, but get the same error. This is done via a migration.. Note: We discovered that if you pass in a collection and not an array of names, it works. So weird.. ",
    "gijs89": "I have the same issue. Seems to be a caching issue. Everything works fine when I set my cache expire time to 0 in the permission config file.\n'cache_expiration_time' => 0,. @montyclt yes, publish the config file and set \"cache_expiration_time\" to 0. ",
    "montyclt": "Is possible disable cache? Can be useful in devs environments.. Is not the same output:\ndd(Permission::find(4)):\nPermission {#375 \u25bc\n  +guarded: array:1 [\u25bc\n    0 => \"id\"\n  ]\n  #connection: \"mysql\"\n  #table: \"permissions\"\n  #primaryKey: \"id\"\n  #keyType: \"int\"\n  +incrementing: true\n  #with: []\n  #withCount: []\n  #perPage: 15\n  +exists: true\n  +wasRecentlyCreated: false\n  #attributes: array:5 [\u25bc\n    \"id\" => 4\n    \"name\" => \"client::update\"\n    \"guard_name\" => \"web\"\n    \"created_at\" => \"2017-06-19 13:24:47\"\n    \"updated_at\" => \"2017-06-19 13:24:47\"\n  ]\n  #original: array:5 [\u25bc\n    \"id\" => 4\n    \"name\" => \"client::update\"\n    \"guard_name\" => \"web\"\n    \"created_at\" => \"2017-06-19 13:24:47\"\n    \"updated_at\" => \"2017-06-19 13:24:47\"\n  ]\n  #casts: []\n  #dates: []\n  #dateFormat: null\n  #appends: []\n  #events: []\n  #observables: []\n  #relations: []\n  #touches: []\n  +timestamps: true\n  #hidden: []\n  #visible: []\n  #fillable: []\n}\nPermission::findByName('client::update'):\nPermission {#376 \u25bc\n  +guarded: array:1 [\u25bc\n    0 => \"id\"\n  ]\n  #connection: \"mysql\"\n  #table: \"permissions\"\n  #primaryKey: \"id\"\n  #keyType: \"int\"\n  +incrementing: true\n  #with: []\n  #withCount: []\n  #perPage: 15\n  +exists: true\n  +wasRecentlyCreated: false\n  #attributes: array:5 [\u25bc\n    \"id\" => 4\n    \"name\" => \"client::update\"\n    \"guard_name\" => \"web\"\n    \"created_at\" => \"2017-06-19 13:24:47\"\n    \"updated_at\" => \"2017-06-19 13:24:47\"\n  ]\n  #original: array:5 [\u25bc\n    \"id\" => 4\n    \"name\" => \"client::update\"\n    \"guard_name\" => \"web\"\n    \"created_at\" => \"2017-06-19 13:24:47\"\n    \"updated_at\" => \"2017-06-19 13:24:47\"\n  ]\n  #casts: []\n  #dates: []\n  #dateFormat: null\n  #appends: []\n  #events: []\n  #observables: []\n  #relations: array:1 [\u25bc\n    \"roles\" => Collection {#377 \u25bc\n      #items: []\n    }\n  ]\n  #touches: []\n  +timestamps: true\n  #hidden: []\n  #visible: []\n  #fillable: []\n}\nIn the findByName('client::update') method output, the relations array has a empty collection named roles. In the find(4) method, the relations array is empty.. Ok, was solved flushing the cache. I think the problem is the cache is not flushing assigning roles via Tinker (I used $user->assignRole('role-name') method) or the cache flushing ussing this method via Tinker is failing for me.. ",
    "murtazasultani": "how to solve the error There is no permission named Administer roles & permissions for guard web.\nSpatie \\ Permission \\ Exceptions \\ PermissionDoesNotExist\n. ",
    "meysamjavadi": "I have this problem with version 5.3 of laravel. What should i do?. ",
    "diazemiliano": "Youre welcome. \ud83d\ude04 . Ok, Thanks for the reply. \ud83d\udc4d . Hi @limvus ,\nYou have to remove the quotes like...\nbash\nphp artisan vendor:publish --provider=Spatie\\Permission\\PermissionServiceProvider --tag=migrations\nphp artisan vendor:publish --provider=Spatie\\Permission\\PermissionServiceProvider --tag=config\nMaybe it's a good idea to remove them from the readme.md.. ",
    "limvus": "Thanks @diazemiliano \nThat solved the issue.\nAlso, I think the ReadMe section should be updated with correct script - without quotes.. my pleasure... ",
    "sl-georgejimenez": "I tried with no quotes but it is not working for me.\nI am using Laravel 5.4.34\nWhen I try php artisan migrate, there is no new migration.\n. ",
    "JoranSchipper": "I'm experiencing the same issue on Laravel v5.4.32. Any news on this one?. @sl-georgejimenez You might want to clear your configuration cache before publishing\nphp artisan config:clear\nThis solved my problem.. ",
    "xadrijo": "Thanks, @JoranSchipper, that works for me.. ",
    "nscherneck": "Just want to add that I was having the same issue with publishing the migration, tried to omit the quotes (didn't work), did a php artisan config:clear, tried to publish the migration again without quotes (didn't work), tried again with quotes (worked).. @AlexVanderbist thanks for the response.  You're correct.  I updated from 2.7.2 to 2.7.5 and it works as expected, per the docs.  Thanks again!. ",
    "madsem": "ok thanks @freekmurze. Wasn't sure if I'm doing it right, still learning. Will try to submit a PR with tests once I learned how to ;). ",
    "ItsRD": "@freekmurze @kjdion84 I've got the same error \"Trying to get property of non-object\"\nI'm logged in, but I think I know what caused this problem:\nWhen sending an array as a parameter to hasAnyPermission, the method creates another array from the array.\narray:1 [\u25bc\n  0 => array:2 [\u25bc\n    0 => \"can-access-dashboard\"\n    1 => \"can-access-users\"\n  ]\n]\nWhen removing the ... from the hasAnyPermission method it doesn't give any error and checks wether you have the permission to access the page.\nMiddleware code:\nif (! $request->user()->hasAnyPermission(['can-access-dashboard', 'can-access-users'])) {\n            abort(403);\n        }\nPlease correct me if I'm wrong.. I removed the ... for now . ",
    "theemfs": "PR 328. ",
    "akteur13": "Yes, thank you! Now it works. I just want to add extra column in roles table (system id) and then have a possibility to create role and then check the user with two parameters \n$role = Role::create(['system_id' => '3', 'name' => 'superadmin']); \n$user->hasRole($roleName, $systemId);. ",
    "vaughany": "I am very new to this so this might not be the best solution, but I simply added nullable to the field definition within the migration, changing this:\n$table->string('guard_name');\n...to this:\n$table->string('guard_name')->nullable();\n...twice: once for the roles definition, and one for permissions.. Understood. I may well have been doing something incorrectly. I will investigate further.. Sorry @freekmurze, was a mistake on my part which caused the errors I was trying to correct.. Embarrassingly @jelgervisser, I believe I missed use Spatie\\Permission\\Traits\\HasRoles; from the top of my user model and use HasRoles from within the user class.. So you want to check if a user has a specific permission ('edit articles') or has a specific role ('superadmin')?. I understand. In the app I am putting together, there are three roles, but it's such a small app that what I have done is exactly what you want to avoid: just added all the permissions to the superuser role.\nWhat I think you need is to create the 'do anything' permission, add it to the admin role, and then use the method hasAnyPermission to check:\n$user->hasAnyPermission(['edit articles', 'do anything']);. No problem. Hadn't realised it was there myself until I started reading through the code. This is a great package, so thank you for putting it together.\nPS. great Laracon talk too! :). What version of laravel-permission are you using? I don't have those commands in version 2.2.0 but after running composer update and updating to 2.3.1, I can now see them.. Given a fresh install of both Laravel and Permission, the only thing I can think of that may prevent the commands appearing within Artisan is that you may have missed the bit where you have to add the service provider in config/app.php: \n'providers' => [\n    // ...\n    Spatie\\Permission\\PermissionServiceProvider::class,\n];\nTaking that line out of my config/app.php file prevents the permission commands from appearing, and adding it in returns them. . Sorry to point out all the obvious things!. ",
    "ctf0": "@AlexVanderbist actually we only have caching for permissions https://github.com/spatie/laravel-permission/blob/master/src/PermissionRegistrar.php#L63\nso using Permission::get() is equal to cache('spatie.permission.cache') except with the later u dont make a call to the db\nbut yes, caching relations is sadly not available. syncPermissions should be added to the docs. @freekmurze can we also add protected $guard_name = 'web'; to the docs\nhttps://github.com/spatie/laravel-permission/issues/358#issuecomment-315971019. u literally saved me from insanity.\ni was having an issue because am using a model outside the App namespace and adding \nphp\nprotected $guard_name = 'web';\nto the model did the trick, this have to be added to the docs . i can make a PR, but sadly dont know anything about writing tests \ud83d\ude22 . @bhill77 its okay, you can make it \ud83d\udc4d . @bhill77  what i meant is if u tried to delete ex.user that have a permission or role, the user will be removed but the record in the pivot table will remain which may cuz issues if u tried to add a new user with the same permissions and roles to the db as the pivot records will be already in the table.. @cschoeni why use different guard names ? , why not simply assign roles & perms to users and let the middleware do the rest ?. @freekmurze any news on this ?. > There might be some guard limitations there.\ncan u elaborate more ?. yes u r correct, but this also duplicate the migration on each publish. i can make a gif to prove that it doesnt work if you would like, both this package and https://github.com/spatie/laravel-medialibrary/issues/739. @freekmurze the check depends on /vendor/composer/autoload_classmap.php array, correct ?, if yes, it will always fail because the class is never added.. sadly no \ud83d\ude1e . @AlexVanderbist can u add this to the docs ?. @roblesterjr04 are u using Cache::get('spatie.permission.cache') ? \nif so something went wrong with the package and for some reason its not creating this key anymore.. @drbyte atm any of the hasPermission methods call the permission relation but as we already have the permission cached , cant we use the cached copy instead ?. @drbyte i was talking about hasAnyPermission which is used in a middleware, which is why you probably updated the package middleware to\nhttps://github.com/spatie/laravel-permission/blob/94940d81c2436b4f211990236c8f0ab1b7de9f37/src/Middlewares/PermissionMiddleware.php#L21-L25\ninstead. u mean as well ?. done \ud83d\udc4d . i removed it because cache gets cleared on each create/update/delete event, so why the extra clearing each 24hrs ?. ",
    "Nowi5": "Do we have now a final solution for this?. Hi, why is the closed even if there is no solution in place? I ALWAYS have the calls at debugbar:\nselect `permissions`.*, `model_has_permissions`.`model_id` as `pivot_model_id`, `model_has_permissions`.`permission_id` as `pivot_permission_id`, `model_has_permissions`.`model_type` as `pivot_model_type` from `permissions` inner join `model_has_permissions` on `permissions`.`id` = `model_has_permissions`.`permission_id` where `model_has_permissions`.`model_id` = '1' and `model_has_permissions`.`model_type` = 'App\\Models\\User' and `permissions`.`deleted_at` is null`\n`select `roles`.*, `model_has_roles`.`model_id` as `pivot_model_id`, `model_has_roles`.`role_id` as `pivot_role_id`, `model_has_roles`.`model_type` as `pivot_model_type` from `roles` inner join `model_has_roles` on `roles`.`id` = `model_has_roles`.`role_id` where `model_has_roles`.`model_id` = '1' and `model_has_roles`.`model_type` = 'App\\Models\\User' and `roles`.`deleted_at` is null\n`. I agree, users permission does not change such often and can be cached, sometimes for longer time. Is there any development ongoing to improve that behavior. I have for each page load 2 sql queries which run both for ~480\u03bcs. Not such bad but can be still improved by total caching.. Cab we may define per config if the system should load all entries from DB or only the needed? I think the developer should decide base on the use case. As I wrote at #759 we need to get more flexible on that, which also depends on environment (data/file cache vs mem etc). Can we close here? I think there is no general issue. Similar to #766. Yes we need to find a way that the permissions and roles are cached totally and only set invalid in case of change on user level. The Singleton is a good start which I support to lower the serialize issue. In worst case, yes we need a cache per call and a over all cache.\nThe current reading of all permissions from DB is only effective for a small list of permissions or when there are stored across sessions within the mem. I believe we need to give a new config parameter to define if totally mem-cache will be used, all permissions will be read each time from db (current default behavior) or if only a subset of permissions will be loaded (as before #710/#550).\nWhat do you think? We need to set ourself the goal to manage over 2000 permissions without any big effort. This is a realistic number in todays SaaS / Multiple Tenant System.. Yes you can do. Just run a migration after installing Spatie which add the column. Define your own model, set the config right and done. I use this to have a role description.. Can you maybe split the roles into separate table or change the where condition, so that not all 4000 roles are loaded? Instead only those roles will be loaded which belongs to the tenant. Please do not forget to change the caching key for that. Which multiple tenant system do you use? Maybe we can create together a fork? I have just added a column as website_id. If this is null, it is across all tenants. If it has an ID it is only for one tenant.. Hi, not sure if only extending the Trait helps, I believe you need to attach a scope to all selections. Maybe some of the others can provide feedback on my idea first. \n@all: Where beside the traits I would have to attach additional where conditions?. Solved by define getPermissions() function within own Permission Model. Thanks. I'm sorry... Still I question why so many things are redundant of hasAllRoles and hasRole.... ```\n$roles = $request->input('roles') ? $request->input('roles') : [];\nforeach($roles as $role){\n          if(!$user->hasRole($role)){\n            $user->assignRole($role);\n          }\n        }\n``` . Because syncRoles would delete all other roles. To use syncRoles I would need to read all roles, put it into an array, add my new role (if not already exists) and than use syncRoles. But more important, a php function should never let a mysql dump unhandled.. Had another issue in the query, the Debugbar just showed the unescaped version, although it were escaped.. Thank you very much for solving #808. ",
    "phoenixg": "I have the same issue, how to cache this SQL triggered by vendor/spatie/laravel-permission/src/Traits/HasPermissions.php:345\nI'm using spatie/laravel-permission 2.28 version\nsql\nselect\n  `nova_permissions`.*,\n  `nova_model_has_permissions`.`model_id` as `pivot_model_id`,\n  `nova_model_has_permissions`.`permission_id` as `pivot_permission_id`,\n  `nova_model_has_permissions`.`model_type` as `pivot_model_type`\nfrom\n  `nova_permissions`\n  inner join `nova_model_has_permissions` on `nova_permissions`.`id` = `nova_model_has_permissions`.`permission_id`\nwhere\n  `nova_model_has_permissions`.`model_id` = \"07166164102339\"\n  and `nova_model_has_permissions`.`model_type` = \"App\\Model\\NovaUser\". ",
    "sehgal10": "@knox2 What was the issue and the resolution?\nI'm facing the same.\nThanks in Advance,\nSukhwinder. ",
    "knox2": "@sehgal10 Make sure you use the correct namespaces to both Permission and Roles. ",
    "coderkk": "Sorry, it has bug here. I will commit another with unittest. Hi,  I have done the request change.. I have composer update my spatie/laravel-permission to 2.2.0. And it work with my application. \nHere I interest what happen with your application. Hope I can help you too.\n. OK, I will change it. OK, I will add another test for not match. OK, I will add another test for not match. Sure, no problem. ",
    "dicarlosystems": "No worries, I'll continue to maintain my fork then!\n. ",
    "BAKTETE": "i did the following and it's working\n\n\ncomposer dump-autoload to pop up the error \n\n\nrenamed the file clearance under  app\\Http\\Middleware to ClearanceMiddleware\n\n\nSorry for the intrusion i know it's not a package related\nby the way thank you so much for this great package really helped me a lot in my project . I was running composer update everyday but the package ain't updating until last night it's on the latest version and it's working now thank u. @cesargb  i'm getting this : \n(1/1) InvalidArgumentException\nThe \"spatie.permission.cache\" argument does not exist.. @cesargb thank you i appreciate ur help i've tried the documentation but i was unsuccessful it's working now \ud83d\udc4d . i managed to solve the problem\nin PermissionServiceProvider.php\ni found that the public function register() is not returning $this->registerBladeExtensions();\n```\npublic function register()\n    {\n        $this->mergeConfigFrom(\n            DIR.'/../config/permission.php',\n            'permission'\n        );\n}\n\n``\nCould you please confirm this . @mostafamaklad \nbut it's not rendrenig@role('') @endrolein blade . @mostafamaklad \ni did but still didn't work \ni've tried to return$this->registerBladeExtensions();insidepublic function register()` and it worked\nbut is it really a practical move or is it just a bug need fixing . @freekmurze \nyes that change solved my problem \n@drbyte \nthis is my composer.json of laravel 5.5\n\"require\": {\n        \"php\": \">=7.0.0\",\n        \"albertcht/invisible-recaptcha\": \"^1.6\",\n        \"fideloper/proxy\": \"~3.3\",\n        \"intervention/image\": \"^2.4\",\n        \"laravel/framework\": \"5.5.*\",\n        \"laravel/tinker\": \"~1.0\",\n        \"laravelcollective/html\": \"^5.5\",\n        \"laravelista/ekko\": \"^1.3\",\n        \"spatie/laravel-permission\": \"^2.5\"\n    },\n    \"require-dev\": {\n        \"filp/whoops\": \"~2.0\",\n        \"fzaninotto/faker\": \"~1.4\",\n        \"mockery/mockery\": \"0.9.*\",\n        \"phpunit/phpunit\": \"~6.0\"\n    },\nPS : the @can('') is working just fine the problem was only in the @rule('') when $this->registerBladeExtensions(); was in the boot function. @drbyte \ni guess i found what's causing the conflict a package called albertcht/invisible-recaptcha\nin InvisibleReCaptchaServiceProvider.php i removed the following \n```\n    /\n     * Register any application services.\n     \n     * @return void\n     /\n    public function register()\n    {\n        $this->app->singleton('captcha', function ($app) {\n            return new InvisibleReCaptcha(\n                $app['config']['captcha.siteKey'],\n                $app['config']['captcha.secretKey'],\n                $app['config']['captcha.hideBadge'],\n                $app['config']['captcha.dataBadge'],\n                $app['config']['captcha.debug']\n            );\n        });\n    $this->app->resolving('view', function () {\n        $this->addBladeDirective($this->app['blade.compiler']);\n    });\n}\n\n``\nafter that blade directives are properly registered and function correctly when located in theboot method\nso my question is should i notify the owner of this packagealbertcht/invisible-recaptchaabout that conflict he is causing . @drbyte \nafter making the changes you have mentioned blade directives are properly registered and function correctly when located in theboot method.\nthank you for the clarification \ni'll open new issue over there. @drbyte \nnot overloaded for now i'm the only one who have access and i logged in only twice \ni'm using the following cache engine'default' => env('CACHE_DRIVER', 'file'),`. @drbyte \nthank you for your rich informations i will take this to my team but i'm sure the solution is within your post. ",
    "MichaelMarkos": "What solved this problem I encountered the same problem \n. ",
    "SiliconSurfers": "Hi Sir,\nActually I am very new to Laravel . Can you tell me which file I need to edit to edit validation for Role Model.. Thanks Its very helpful.. ",
    "johanleroux": "Yes you can\nAlso \n\nIf you are using a Laravel version lower than 5.2.28, and want a drop-in middleware to check permissions, check out our authorize package.. \n",
    "SpiderEvgn": "https://github.com/spatie/laravel-permission/issues/262\nfind an explanation here. ",
    "goyne": "@vaughany I'm facing the same problem. What was your mistake? Can't find any bugs in my code.... ",
    "abr4xas": "@freekmurze thanks!! . @GDanielRG Me neither, but what I did was to create the number of roles needed according to my application with the corresponding permissions and it works without problems.. @GDanielRG yes, super admin with all permissions and admin with few.. I think you need two middleware:\n1.- to check role\n2.- to check permission\n. Sorry... My mistake, i was calling my route from other file :sweat_smile: . ",
    "GDanielRG": "so i created a superadmin role and gave it permission to \"do everything\". what do I need to do so that every permission check that I make, it allows a user with the permission \"do everything\" to do it eventhough the super admin user does not have specific permission to do that?\nsay i wanna check $user->hasPermissionTo('edit articles');\nit should allow it because the user has the permission \"do everything\". I believe gates and auth help with this but I don't know how to implement it :(. @abr4xas but you don't have the concept of super admin right?. @abr4xas but I don't want to add every permission to the super admin role, I want it to autmatically always give permission to the superadmin role, so if I create new roles with different permissions in the future, I don't want to need to add them to the super admin. both. Specifically what I want to do is avoid having to give all the existing permissions to the super admin and the future ones. By the default whener I check for a permission if the user is superadmin just allow it eventhough the user may not have that specific permission im checking for.. I was trying to avoid something like that. Looking for some code modification in the auth or something I dunno. I guess that works but i will need to do it that way across the whole project. Thanks @vaughany . I got it to work! \nBasically, I changed the:\n$table->morphs('model');\nfor:\n$table->string('model_id');\n$table->string('model_type');\nin both occurrences of the migration.\nI also had to add:\npublic $incrementing = false;\nto the models using the string ID, so the Id is correctly saved on the 'model_id' columns.\nI don't know if this should be added to the package, my guess is that most people go with integer Ids and maybe doing it this way will use a lot of space because of the string columns, but anyways feel free to consider it. I believe it will work with both string and integers.. ",
    "darwinluague": "Looks like the problem why $gate->before will not work when using middleware is because the middleware is using Auth::user()->hasAnyPermission(...$permission) instead of Auth::user()->can(...$permission).\nhttps://github.com/spatie/laravel-permission/blob/master/src/Middlewares/PermissionMiddleware.php. When you call hasAnyPermission the gate->before will not trigger because it checks directly to the database/cache. . Actually can can accept array so no need to loop permissions. We can just replace hasAnyPermission to can. Like so, if (! Auth::user()->can(...$permission)) { . Based on the code the second parameter is optional.\nhttps://github.com/laravel/framework/blob/5.5/src/Illuminate/Foundation/Auth/Access/Authorizable.php. ",
    "ediblemanager": "Realise this is almost a year old, but this is the first mention of the below (using roles for super admin) that I've seen in the issues:\n\nFor simple super-admin implementation, the gate->before works fine, as long as all tests for authorization use a test for the \"permission\", and not for a \"role\". ie: user->can('something') or @can('something') .... not user->hasRole('role name')\n\nThis is where I'm struggling - I could add \"super_admin\" role to every route, but this is tedious. Is there a better way? As I understand it, the Gate::before functionality wouldn't work for that.... @drbyte I might be misunderstanding, but doesn't the Gate::before only apply when using permissions? In my routes I use roles to determine access. I'd gladly be wrong on this and have it working!. @drbyte thanks for the heads up - I'll take a look at this. Is the way I'm doing things with roles ill-advised and therefore not supported, or just uncommon? Don't want to fall into a nasty trap!. I can see why the granularity that using permissions appeals. I'll stick with roles at the moment, but will probably find myself moving to permissions like you did.\nThanks for your help, @drbyte !. @halilcosdu,\nAfter setting up another guard, I did something like this: \nphp\nRoute::group(['prefix' => 'whatever', 'middleware' => ['auth:member,admin' ,'role:super_admin|another_role']], function() {\n...\n});. Yeah, I'm daft, closing this as I've found a solution. Nah, thought I had a solution, but I don't.\nIn trying to work backwards from a Member to a User, I'm finding it difficult to get the relationship right and avoid the relationship returning the first row with the matching model_id, which could be an Administrator or a Member:\n```php\nclass Member extends BaseModel implements HasPresenter \n{\n... \n    public function user()\n    {\n        return $this->hasOne(User::class, 'model_id', 'id');\n    }\n...\n}\nclass User extends Authenticatable\n{\n    public $with = ['administrator', 'member'];\n...\n    public function member()\n    {\n         return $this->hasOne(Member::class, 'id', 'model_id');\n    }\n...\n}\n``. The purpose of accessingusers: I've added some columns tousersthat I'd like to access when accessing aMember(last_loginetc.), or a collection ofMember`'s. \nThe relationship between the users table, model_has_roles table and my members table is where my conundrum lies: like mentioned in the paragraph above, I want to be able to access data for the member which is stored in users. Since this package is managing that, I guessed this was the place to ask!\nHow does users get linked to model_has_roles? I see that there's a role_id and a model_id (the latter the same as on users), but I don't understand how they are linked when you use this package to access a user. This is probably a weak understanding of a Laravel concept, apologies if so!. I reckon I'm using Laravel's built in Auth wrong (I log in, then check roles and redirect appropriately), using the same guard for both Admin and Member users. I'll investigate using two different user models for this.. I did. I figured out where I was going wrong in implementing two guards and got things working. Thanks for your help!. ",
    "colinjo": "Didnt help, but found out something else. I'd moved my User model to another folder.\nMake sure you have a proper model filled in your auth config file: auth.providers.users.model. If the class cant be found the Guard::getNames() function will result in an empty collection which throws an exception later on. I was just setting up the project and tests failed. So maybe someone will make the same stupid mistake like i did. . ",
    "belzaaron": "Try php artisan migrate:refresh --seed.\nAlso ensure in your PermissionSeed that you are ONLY defining one instance of users_manage.\nLet me know how it goes!\nOR you can paste your PermissionSeed here so we can see if the problem is in there.\n:). ",
    "pablofior": "Same problem here.\nExact same problem.\nYour solution worked, thats great.\nHope the devs find a solution, 'cause its not so cool to clear the cache every :refresh --seed\nAnyway, thank you for the fix.. For me sometimes it works and sometimes it doesnt =(((\nVery anoying bug. ",
    "st-bobb": "php artisan cache:forget spatie.role.cache is also needed. ",
    "fede90": "It didn't worked for me :( \nI created the permissions in the DB, not using seed. . ",
    "oxbadwolf": "Besides the clearing of the cache and all that, try to check if permissions and roles already exist. This way you can run your seeder as often as you like without errors ... even extend it and rerun it, if you forgot something ;)\ntry {\n    $a_role = Role::findByName('my_role');\n} catch (Exception $e) {\n    $a_role = Role::create(['name' => 'my_role']);\n}\nand\ntry {\n    $a_permission = Permission::create(['name' => 'my_permission']);\n} catch (Exception $e) {\n    $a_permission = 'my_permission';\n}\nand\nif (!$a_role->hasPermissionTo($a_permission)) {\n    $a_role->givePermissionTo($a_permission);\n}\n. ",
    "ibtissambth": "\n. ",
    "bhill77": "may I make PR for this? or you will do it @ctf0?. sorry @ctf0, I don't really understand what you mean by deleting model. Do you mean delete model class? or what?. ",
    "mazedlx": "@freekmurze this should be closed. I had an old version of your package installed, everything works as expected with the current release (2.2.0) Thanks!. ",
    "kmcluckie": "I had the hasAnyPermission issue to. I looked at the method signature and noticed it uses argument unpacking. So I just removed the array square brackets and it worked:\nauth()->user()->hasAnyPermission('admin')\nIf you want to pass an array of permissions:\nauth()->user()->hasAnyPermission(...$permission_array). ",
    "cesargb": "Yes sure, in this moment i think in user a regex with other option, perhaps /[\\|,]/ and can split by other character and get other behavior. But  you are right and is more efficient.\nI change  this, thanks!. Sure!\n. Thank Sebastian, you are right.\n. Yes, sure. But i must admit that im a newbie with github. I was delete my fork and refork it newly. I try solve in my side the conficts. But i have in local the change, i suppose than need other pull request. Please be patient with me. . @DanDvoracek Can you try this command? \ncomposer dumpautoload \nIf the problem persists, Would you mind sending us the contents of the file composer.lock?. @DanDvoracek I think that you have a old version of spatie/laravel-framework, for this line:\nphp\n           \"name\": \"spatie/laravel-permission\",\n            \"version\": \"1.12.0\",\nThis commands was supported since v2.3.0\nRequire upgrade the package, but i dont know in this moment if you have something incompatibility with current tables if you upgrade since v1.x to v2.x\nYou said ... \n\non a fresh Laravel install\n\nPehaps yo can remove the package and reinstall.. Hi @freekmurze I was see this commit: https://github.com/spatie/laravel-permission/commit/f590a3f006a85435a1636d5cbee132383c524fd9\nI think that, now we can change this code in PermissionMiddleware.php:\nphp\n        if (! Auth::user()->hasAnyPermission(...$permission)) {\n            abort(403);\n        }\nfor this other:\nphp\n        if (! Auth::user()->hasAnyPermission($permission)) {\n            abort(403);\n        }\nPerhaps, the function hasAnyRole, Should I have the same behavior?\n. @BAKTETE try this:\nphp\nArtisan::call('cache:forget', ['spatie.permission.cache' => true]);\n. @BAKTETE Im sorry, when i was answer, i dont testing the code. The problem was that argument name is key. Try this: \nphp\nArtisan::call('cache:forget', ['key' => 'spatie.permission.cache'])\nNow, must work fine. . @bbdangar Hi! I suspect that you have the version v1.* of this package. This middleware is supported since version 2.4.\nYou can run this command to get your current version:\nbash\ncomposer info spatie/laravel-permission\nThe v2 require php 7.x. If you already have php 7, perhaps this issue was in the file composer.json of your project.\nEdit the composer.json and find this part:\nphp\n        \"platform\": {\n            \"php\": \"5.6.4\"\n        }\nIf exists, then replace this part:\nphp\n    \"config\": {\n        \"preferred-install\": \"dist\",\n        \"sort-packages\": true,\n        \"optimize-autoloader\": true,\n        \"platform\": {\n            \"php\": \"5.6.4\"\n        }\n    }\nfor this other:\nphp\n    \"config\": {\n        \"preferred-install\": \"dist\",\n        \"sort-packages\": true,\n        \"optimize-autoloader\": true\n    }\nthen run this command for upgrade the package at v2:\nbash\ncomposer require spatie/laravel-permission\nPlease, let me known if this resolve this issue. I think that this issue occur when start a new project laravel with command laravel new .... @freekmurze I need resolve this  line  return redirect($urlOfYourLoginPage);\nMy first thought was create a config element to replace $urlOfYourLoginPage. But then why this work not would correspond to middelware Auth?\nBut when you say this, I understand your position. \nI return my initial idea, add config params to define url to redirect. Perhaps ... ?\nphp\nif (Auth::guest()) {\n    return redirect(config('permission.url_redirect_guest', '/login'));\n. ",
    "lk77": "i need to know if this package will work with laravel 5.5 before it's publicly available,\nwhy not create a 5.5.x-dev branch so we can install laravel 5.5 right now and see if it works ?. My implementation override the model itself by extending it, and the default model is still beeing called,\nAnd yes it's the same kind of things that #382 \nI'm not sure about calling config each time to recover class name, perhaps it's time consuming, i have not tested it. I've done this way, because i feared that the used class will not change if the class in the config have changed once initialized, if the class name was keeped in any way, like in a property of PermissionRegistrar, via a getPermissionClass and getRoleClass methods for example.. I've updated my PR, using config helper is too time consuming.\n```\nPHPUnit 6.2.3 by Sebastian Bergmann and contributors.\nRuntime:       PHP 7.2.0alpha3\nConfiguration: /var/www/laravel-permission/phpunit.xml.dist\n...............................................................  63 / 127 ( 49%)\n............................................................... 126 / 127 ( 99%)\n.                                                               127 / 127 (100%)\nTime: 1.81 seconds, Memory: 26.00MB\nOK (127 tests, 223 assertions)\n```\ni've created two methods in PremissionRegistrar that recover an instance of Role and Permission class, from the class names defined in config, but recovered only one time.\ntell me what you think, if it's a good solution to avoir overhead or not.. And also, i think that we should replace getPermissions function in Permission model by something like that : \n```\npublic static $permissions;\n[...]\n    /*\n     * Get the current cached permissions.\n     /\n    protected static function getPermissions(): Collection\n    {\n        if(static::$permissions === null)\n        {\n            static::$permissions = app(PermissionRegistrar::class)->getPermissions();\n        }\n    return static::$permissions;\n}\n\n```\nCalling the cache for each record is too slow (when using @permission on datatables for example)\nof course it can cause problems because permissions will not refresh until next request, but i noticied great improvements, my load time divided by 6 at least.. ```\nQuestion: does your own implementation currently extend the model itself, or the Contracts?\n```\nI'm updating the config at runtime in my service provider, so the registered class do not match anymore.. For me there is no breaking change, unless someone changed the default class by a custom one dynamically and there is a bug in the custom one, but it was never called, and now it will be.\nWe could add a test to ensure that the new behaviour works alongside the old one.. Hello,\ni'm not sure about this, hasPermissionTo checks if a user has a permission,\nbut it's not normal that the permission doesn't exist in database, and we should show a warning no ?\nIf we change that, it will silently hide the true problem, that the permission actually doesn't exist.. Hello,\nperhaps you are calling ->newQuery() or ->query() somewhere,\nand resetting the query parameters by mistake.\nif Auth::user() don't return the logged in user, there is something wrong in your model.\n. I don't know,\nthe problem for me is the use of load,\nit's reloading the roles each time a permission is checked,\nsomething like that will keep the result for further checks :\n```\n    /*\n     * Return all the permissions the model has via roles.\n     /\n    public function getPermissionsViaRoles(): Collection\n    {\n        $roles = $this->roles;\n    if (! $roles) {\n                return collect();\n    }\n\n    return $roles->load('roles', 'roles.permissions')->flatMap(function ($role) {\n        return $role->permissions;\n    })->sort()->values();\n}\n\n```\nif there is a role, it will still query the permissions like before.. ",
    "ronnievisser": "I believe you haven't actually read the issue...\nthe commands are not using the models specified in config. i have overriden the config with custom models which extends yours. on my custom model I have set the connection property.. Yeah well I don\u2019t agree. It\u2019s indeed thrown over there and it\u2019s caused by this package. Without this package it\u2019s working like a rocket. It cannot even complete the auto discover when this package is included in composer.json because it fails.\nTo me it sound like this package is using some cache functionality before the custom driver is setup\nOn 23 Jan 2018, 17:18 +0100, Chris Brown notifications@github.com, wrote:\n\nI don't think this issue is specific to the laravel-permission package. This package simply makes calls to the caching layer. Nothing fancy about its implementation.\nYour error message appears to be coming from the Laravel Framework, related to your specific driver:\nhttps://github.com/laravel/framework/blob/5.5/src/Illuminate/Cache/CacheManager.php#L107\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Ok cool! I will try that approach!\n\nThanks for your time on this!\nOn 23 Jan 2018, 22:28 +0100, Chris Brown notifications@github.com, wrote:\n\nTravis-CI demonstrations:\nFailing build: https://travis-ci.org/drbyte/spatie-permissions-demo/builds/332500310\nFixed build after using dont-discover: https://travis-ci.org/drbyte/spatie-permissions-demo/builds/332506018\nDemo example branch: https://github.com/drbyte/spatie-permissions-demo/tree/ehann-redis-test\nFixing commit: drbyte/spatie-permissions-demo@d22c4f6\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Hi,\n\nYes, using don\u2019t discover and the correct order solved it!\nOn 25 Jan 2018, 16:31 +0100, Chris Brown notifications@github.com, wrote:\n\nDid reworking the load-order solve this issue for your project's use of custom cache driver?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "DanDvoracek": "The latest one. Also using the latest Laravel. Literally created a fresh project to test this plugin. As I found the commands to be a nice to have (compared to other plugins), I would love to get them working. However, I haven't been able to find any related issue or documentation.\nDo you have any idea at what moment in the process (of installing the plugin) they usually get set up?\nThanks. Nope, it's in. Strange hu? It bugs me a bit. Thanks anyway ;). It's fine ;) I will be able to work without these commands. It would have been handy that's all! And well, probably worth pointing out as well.. I did run the composer dumpautoload and it had no effect. Here is the composer.lock:\njson\n{\n    \"_readme\": [\n        \"This file locks the dependencies of your project to a known state\",\n        \"Read more about it at https://getcomposer.org/doc/01-basic-usage.md#composer-lock-the-lock-file\",\n        \"This file is @generated automatically\"\n    ],\n    \"content-hash\": \"93a271d4681641cab99434e0aad8e26b\",\n    \"packages\": [\n        {\n            \"name\": \"dnoegel/php-xdg-base-dir\",\n            \"version\": \"0.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/dnoegel/php-xdg-base-dir.git\",\n                \"reference\": \"265b8593498b997dc2d31e75b89f053b5cc9621a\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/dnoegel/php-xdg-base-dir/zipball/265b8593498b997dc2d31e75b89f053b5cc9621a\",\n                \"reference\": \"265b8593498b997dc2d31e75b89f053b5cc9621a\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.2\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"@stable\"\n            },\n            \"type\": \"project\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"XdgBaseDir\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"description\": \"implementation of xdg base directory specification for php\",\n            \"time\": \"2014-10-24T07:27:01+00:00\"\n        },\n        {\n            \"name\": \"doctrine/inflector\",\n            \"version\": \"v1.1.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/doctrine/inflector.git\",\n                \"reference\": \"90b2128806bfde671b6952ab8bea493942c1fdae\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/doctrine/inflector/zipball/90b2128806bfde671b6952ab8bea493942c1fdae\",\n                \"reference\": \"90b2128806bfde671b6952ab8bea493942c1fdae\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.2\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"4.*\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.1.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-0\": {\n                    \"Doctrine\\\\Common\\\\Inflector\\\\\": \"lib/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Roman Borschel\",\n                    \"email\": \"roman@code-factory.org\"\n                },\n                {\n                    \"name\": \"Benjamin Eberlei\",\n                    \"email\": \"kontakt@beberlei.de\"\n                },\n                {\n                    \"name\": \"Guilherme Blanco\",\n                    \"email\": \"guilhermeblanco@gmail.com\"\n                },\n                {\n                    \"name\": \"Jonathan Wage\",\n                    \"email\": \"jonwage@gmail.com\"\n                },\n                {\n                    \"name\": \"Johannes Schmitt\",\n                    \"email\": \"schmittjoh@gmail.com\"\n                }\n            ],\n            \"description\": \"Common String Manipulations with regard to casing and singular/plural rules.\",\n            \"homepage\": \"http://www.doctrine-project.org\",\n            \"keywords\": [\n                \"inflection\",\n                \"pluralize\",\n                \"singularize\",\n                \"string\"\n            ],\n            \"time\": \"2015-11-06T14:35:42+00:00\"\n        },\n        {\n            \"name\": \"erusev/parsedown\",\n            \"version\": \"1.6.3\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/erusev/parsedown.git\",\n                \"reference\": \"728952b90a333b5c6f77f06ea9422b94b585878d\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/erusev/parsedown/zipball/728952b90a333b5c6f77f06ea9422b94b585878d\",\n                \"reference\": \"728952b90a333b5c6f77f06ea9422b94b585878d\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.0\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-0\": {\n                    \"Parsedown\": \"\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Emanuil Rusev\",\n                    \"email\": \"hello@erusev.com\",\n                    \"homepage\": \"http://erusev.com\"\n                }\n            ],\n            \"description\": \"Parser for Markdown.\",\n            \"homepage\": \"http://parsedown.org\",\n            \"keywords\": [\n                \"markdown\",\n                \"parser\"\n            ],\n            \"time\": \"2017-05-14T14:47:48+00:00\"\n        },\n        {\n            \"name\": \"jakub-onderka/php-console-color\",\n            \"version\": \"0.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/JakubOnderka/PHP-Console-Color.git\",\n                \"reference\": \"e0b393dacf7703fc36a4efc3df1435485197e6c1\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/JakubOnderka/PHP-Console-Color/zipball/e0b393dacf7703fc36a4efc3df1435485197e6c1\",\n                \"reference\": \"e0b393dacf7703fc36a4efc3df1435485197e6c1\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.2\"\n            },\n            \"require-dev\": {\n                \"jakub-onderka/php-code-style\": \"1.0\",\n                \"jakub-onderka/php-parallel-lint\": \"0.*\",\n                \"jakub-onderka/php-var-dump-check\": \"0.*\",\n                \"phpunit/phpunit\": \"3.7.*\",\n                \"squizlabs/php_codesniffer\": \"1.*\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-0\": {\n                    \"JakubOnderka\\\\PhpConsoleColor\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-2-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Jakub Onderka\",\n                    \"email\": \"jakub.onderka@gmail.com\",\n                    \"homepage\": \"http://www.acci.cz\"\n                }\n            ],\n            \"time\": \"2014-04-08T15:00:19+00:00\"\n        },\n        {\n            \"name\": \"jakub-onderka/php-console-highlighter\",\n            \"version\": \"v0.3.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/JakubOnderka/PHP-Console-Highlighter.git\",\n                \"reference\": \"7daa75df45242c8d5b75a22c00a201e7954e4fb5\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/JakubOnderka/PHP-Console-Highlighter/zipball/7daa75df45242c8d5b75a22c00a201e7954e4fb5\",\n                \"reference\": \"7daa75df45242c8d5b75a22c00a201e7954e4fb5\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"jakub-onderka/php-console-color\": \"~0.1\",\n                \"php\": \">=5.3.0\"\n            },\n            \"require-dev\": {\n                \"jakub-onderka/php-code-style\": \"~1.0\",\n                \"jakub-onderka/php-parallel-lint\": \"~0.5\",\n                \"jakub-onderka/php-var-dump-check\": \"~0.1\",\n                \"phpunit/phpunit\": \"~4.0\",\n                \"squizlabs/php_codesniffer\": \"~1.5\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-0\": {\n                    \"JakubOnderka\\\\PhpConsoleHighlighter\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Jakub Onderka\",\n                    \"email\": \"acci@acci.cz\",\n                    \"homepage\": \"http://www.acci.cz/\"\n                }\n            ],\n            \"time\": \"2015-04-20T18:58:01+00:00\"\n        },\n        {\n            \"name\": \"laravel/framework\",\n            \"version\": \"v5.4.30\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/laravel/framework.git\",\n                \"reference\": \"b9a64955f4278f45ac348a6e000b5ecc85da167a\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/laravel/framework/zipball/b9a64955f4278f45ac348a6e000b5ecc85da167a\",\n                \"reference\": \"b9a64955f4278f45ac348a6e000b5ecc85da167a\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"doctrine/inflector\": \"~1.0\",\n                \"erusev/parsedown\": \"~1.6\",\n                \"ext-mbstring\": \"*\",\n                \"ext-openssl\": \"*\",\n                \"league/flysystem\": \"~1.0\",\n                \"monolog/monolog\": \"~1.11\",\n                \"mtdowling/cron-expression\": \"~1.0\",\n                \"nesbot/carbon\": \"~1.20\",\n                \"paragonie/random_compat\": \"~1.4|~2.0\",\n                \"php\": \">=5.6.4\",\n                \"ramsey/uuid\": \"~3.0\",\n                \"swiftmailer/swiftmailer\": \"~5.4\",\n                \"symfony/console\": \"~3.2\",\n                \"symfony/debug\": \"~3.2\",\n                \"symfony/finder\": \"~3.2\",\n                \"symfony/http-foundation\": \"~3.2\",\n                \"symfony/http-kernel\": \"~3.2\",\n                \"symfony/process\": \"~3.2\",\n                \"symfony/routing\": \"~3.2\",\n                \"symfony/var-dumper\": \"~3.2\",\n                \"tijsverkoyen/css-to-inline-styles\": \"~2.2\",\n                \"vlucas/phpdotenv\": \"~2.2\"\n            },\n            \"replace\": {\n                \"illuminate/auth\": \"self.version\",\n                \"illuminate/broadcasting\": \"self.version\",\n                \"illuminate/bus\": \"self.version\",\n                \"illuminate/cache\": \"self.version\",\n                \"illuminate/config\": \"self.version\",\n                \"illuminate/console\": \"self.version\",\n                \"illuminate/container\": \"self.version\",\n                \"illuminate/contracts\": \"self.version\",\n                \"illuminate/cookie\": \"self.version\",\n                \"illuminate/database\": \"self.version\",\n                \"illuminate/encryption\": \"self.version\",\n                \"illuminate/events\": \"self.version\",\n                \"illuminate/exception\": \"self.version\",\n                \"illuminate/filesystem\": \"self.version\",\n                \"illuminate/hashing\": \"self.version\",\n                \"illuminate/http\": \"self.version\",\n                \"illuminate/log\": \"self.version\",\n                \"illuminate/mail\": \"self.version\",\n                \"illuminate/notifications\": \"self.version\",\n                \"illuminate/pagination\": \"self.version\",\n                \"illuminate/pipeline\": \"self.version\",\n                \"illuminate/queue\": \"self.version\",\n                \"illuminate/redis\": \"self.version\",\n                \"illuminate/routing\": \"self.version\",\n                \"illuminate/session\": \"self.version\",\n                \"illuminate/support\": \"self.version\",\n                \"illuminate/translation\": \"self.version\",\n                \"illuminate/validation\": \"self.version\",\n                \"illuminate/view\": \"self.version\",\n                \"tightenco/collect\": \"self.version\"\n            },\n            \"require-dev\": {\n                \"aws/aws-sdk-php\": \"~3.0\",\n                \"doctrine/dbal\": \"~2.5\",\n                \"mockery/mockery\": \"~0.9.4\",\n                \"pda/pheanstalk\": \"~3.0\",\n                \"phpunit/phpunit\": \"~5.7\",\n                \"predis/predis\": \"~1.0\",\n                \"symfony/css-selector\": \"~3.2\",\n                \"symfony/dom-crawler\": \"~3.2\"\n            },\n            \"suggest\": {\n                \"aws/aws-sdk-php\": \"Required to use the SQS queue driver and SES mail driver (~3.0).\",\n                \"doctrine/dbal\": \"Required to rename columns and drop SQLite columns (~2.5).\",\n                \"fzaninotto/faker\": \"Required to use the eloquent factory builder (~1.4).\",\n                \"guzzlehttp/guzzle\": \"Required to use the Mailgun and Mandrill mail drivers and the ping methods on schedules (~6.0).\",\n                \"laravel/tinker\": \"Required to use the tinker console command (~1.0).\",\n                \"league/flysystem-aws-s3-v3\": \"Required to use the Flysystem S3 driver (~1.0).\",\n                \"league/flysystem-rackspace\": \"Required to use the Flysystem Rackspace driver (~1.0).\",\n                \"nexmo/client\": \"Required to use the Nexmo transport (~1.0).\",\n                \"pda/pheanstalk\": \"Required to use the beanstalk queue driver (~3.0).\",\n                \"predis/predis\": \"Required to use the redis cache and queue drivers (~1.0).\",\n                \"pusher/pusher-php-server\": \"Required to use the Pusher broadcast driver (~2.0).\",\n                \"symfony/css-selector\": \"Required to use some of the crawler integration testing tools (~3.2).\",\n                \"symfony/dom-crawler\": \"Required to use most of the crawler integration testing tools (~3.2).\",\n                \"symfony/psr-http-message-bridge\": \"Required to psr7 bridging features (0.2.*).\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"5.4-dev\"\n                }\n            },\n            \"autoload\": {\n                \"files\": [\n                    \"src/Illuminate/Foundation/helpers.php\",\n                    \"src/Illuminate/Support/helpers.php\"\n                ],\n                \"psr-4\": {\n                    \"Illuminate\\\\\": \"src/Illuminate/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Taylor Otwell\",\n                    \"email\": \"taylor@laravel.com\"\n                }\n            ],\n            \"description\": \"The Laravel Framework.\",\n            \"homepage\": \"https://laravel.com\",\n            \"keywords\": [\n                \"framework\",\n                \"laravel\"\n            ],\n            \"time\": \"2017-07-19T19:26:19+00:00\"\n        },\n        {\n            \"name\": \"laravel/tinker\",\n            \"version\": \"v1.0.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/laravel/tinker.git\",\n                \"reference\": \"203978fd67f118902acff95925847e70b72e3daf\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/laravel/tinker/zipball/203978fd67f118902acff95925847e70b72e3daf\",\n                \"reference\": \"203978fd67f118902acff95925847e70b72e3daf\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"illuminate/console\": \"~5.1\",\n                \"illuminate/contracts\": \"~5.1\",\n                \"illuminate/support\": \"~5.1\",\n                \"php\": \">=5.5.9\",\n                \"psy/psysh\": \"0.7.*|0.8.*\",\n                \"symfony/var-dumper\": \"~3.0\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"~4.0|~5.0\"\n            },\n            \"suggest\": {\n                \"illuminate/database\": \"The Illuminate Database package (~5.1).\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.0-dev\"\n                },\n                \"laravel\": {\n                    \"providers\": [\n                        \"Laravel\\\\Tinker\\\\TinkerServiceProvider\"\n                    ]\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Laravel\\\\Tinker\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Taylor Otwell\",\n                    \"email\": \"taylor@laravel.com\"\n                }\n            ],\n            \"description\": \"Powerful REPL for the Laravel framework.\",\n            \"keywords\": [\n                \"REPL\",\n                \"Tinker\",\n                \"laravel\",\n                \"psysh\"\n            ],\n            \"time\": \"2017-07-13T13:11:05+00:00\"\n        },\n        {\n            \"name\": \"laravelcollective/html\",\n            \"version\": \"v5.4.8\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/LaravelCollective/html.git\",\n                \"reference\": \"9b8f51e7a2368911c896f5d42757886bae0717b5\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/LaravelCollective/html/zipball/9b8f51e7a2368911c896f5d42757886bae0717b5\",\n                \"reference\": \"9b8f51e7a2368911c896f5d42757886bae0717b5\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"illuminate/http\": \"5.4.*\",\n                \"illuminate/routing\": \"5.4.*\",\n                \"illuminate/session\": \"5.4.*\",\n                \"illuminate/support\": \"5.4.*\",\n                \"illuminate/view\": \"5.4.*\",\n                \"php\": \">=5.6.4\"\n            },\n            \"require-dev\": {\n                \"illuminate/database\": \"5.4.*\",\n                \"mockery/mockery\": \"~0.9.4\",\n                \"phpunit/phpunit\": \"~5.4\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Collective\\\\Html\\\\\": \"src/\"\n                },\n                \"files\": [\n                    \"src/helpers.php\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Taylor Otwell\",\n                    \"email\": \"taylorotwell@gmail.com\"\n                },\n                {\n                    \"name\": \"Adam Engebretson\",\n                    \"email\": \"adam@laravelcollective.com\"\n                }\n            ],\n            \"description\": \"HTML and Form Builders for the Laravel Framework\",\n            \"homepage\": \"http://laravelcollective.com\",\n            \"time\": \"2017-05-22T06:35:07+00:00\"\n        },\n        {\n            \"name\": \"league/flysystem\",\n            \"version\": \"1.0.40\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/thephpleague/flysystem.git\",\n                \"reference\": \"3828f0b24e2c1918bb362d57a53205d6dc8fde61\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/thephpleague/flysystem/zipball/3828f0b24e2c1918bb362d57a53205d6dc8fde61\",\n                \"reference\": \"3828f0b24e2c1918bb362d57a53205d6dc8fde61\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.5.9\"\n            },\n            \"conflict\": {\n                \"league/flysystem-sftp\": \"<1.0.6\"\n            },\n            \"require-dev\": {\n                \"ext-fileinfo\": \"*\",\n                \"mockery/mockery\": \"~0.9\",\n                \"phpspec/phpspec\": \"^2.2\",\n                \"phpunit/phpunit\": \"~4.8\"\n            },\n            \"suggest\": {\n                \"ext-fileinfo\": \"Required for MimeType\",\n                \"league/flysystem-aws-s3-v2\": \"Allows you to use S3 storage with AWS SDK v2\",\n                \"league/flysystem-aws-s3-v3\": \"Allows you to use S3 storage with AWS SDK v3\",\n                \"league/flysystem-azure\": \"Allows you to use Windows Azure Blob storage\",\n                \"league/flysystem-cached-adapter\": \"Flysystem adapter decorator for metadata caching\",\n                \"league/flysystem-copy\": \"Allows you to use Copy.com storage\",\n                \"league/flysystem-eventable-filesystem\": \"Allows you to use EventableFilesystem\",\n                \"league/flysystem-rackspace\": \"Allows you to use Rackspace Cloud Files\",\n                \"league/flysystem-sftp\": \"Allows you to use SFTP server storage via phpseclib\",\n                \"league/flysystem-webdav\": \"Allows you to use WebDAV storage\",\n                \"league/flysystem-ziparchive\": \"Allows you to use ZipArchive adapter\",\n                \"spatie/flysystem-dropbox\": \"Allows you to use Dropbox storage\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.1-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"League\\\\Flysystem\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Frank de Jonge\",\n                    \"email\": \"info@frenky.net\"\n                }\n            ],\n            \"description\": \"Filesystem abstraction: Many filesystems, one API.\",\n            \"keywords\": [\n                \"Cloud Files\",\n                \"WebDAV\",\n                \"abstraction\",\n                \"aws\",\n                \"cloud\",\n                \"copy.com\",\n                \"dropbox\",\n                \"file systems\",\n                \"files\",\n                \"filesystem\",\n                \"filesystems\",\n                \"ftp\",\n                \"rackspace\",\n                \"remote\",\n                \"s3\",\n                \"sftp\",\n                \"storage\"\n            ],\n            \"time\": \"2017-04-28T10:15:08+00:00\"\n        },\n        {\n            \"name\": \"monolog/monolog\",\n            \"version\": \"1.23.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/Seldaek/monolog.git\",\n                \"reference\": \"fd8c787753b3a2ad11bc60c063cff1358a32a3b4\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/Seldaek/monolog/zipball/fd8c787753b3a2ad11bc60c063cff1358a32a3b4\",\n                \"reference\": \"fd8c787753b3a2ad11bc60c063cff1358a32a3b4\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.0\",\n                \"psr/log\": \"~1.0\"\n            },\n            \"provide\": {\n                \"psr/log-implementation\": \"1.0.0\"\n            },\n            \"require-dev\": {\n                \"aws/aws-sdk-php\": \"^2.4.9 || ^3.0\",\n                \"doctrine/couchdb\": \"~1.0@dev\",\n                \"graylog2/gelf-php\": \"~1.0\",\n                \"jakub-onderka/php-parallel-lint\": \"0.9\",\n                \"php-amqplib/php-amqplib\": \"~2.4\",\n                \"php-console/php-console\": \"^3.1.3\",\n                \"phpunit/phpunit\": \"~4.5\",\n                \"phpunit/phpunit-mock-objects\": \"2.3.0\",\n                \"ruflin/elastica\": \">=0.90 <3.0\",\n                \"sentry/sentry\": \"^0.13\",\n                \"swiftmailer/swiftmailer\": \"^5.3|^6.0\"\n            },\n            \"suggest\": {\n                \"aws/aws-sdk-php\": \"Allow sending log messages to AWS services like DynamoDB\",\n                \"doctrine/couchdb\": \"Allow sending log messages to a CouchDB server\",\n                \"ext-amqp\": \"Allow sending log messages to an AMQP server (1.0+ required)\",\n                \"ext-mongo\": \"Allow sending log messages to a MongoDB server\",\n                \"graylog2/gelf-php\": \"Allow sending log messages to a GrayLog2 server\",\n                \"mongodb/mongodb\": \"Allow sending log messages to a MongoDB server via PHP Driver\",\n                \"php-amqplib/php-amqplib\": \"Allow sending log messages to an AMQP server using php-amqplib\",\n                \"php-console/php-console\": \"Allow sending log messages to Google Chrome\",\n                \"rollbar/rollbar\": \"Allow sending log messages to Rollbar\",\n                \"ruflin/elastica\": \"Allow sending log messages to an Elastic Search server\",\n                \"sentry/sentry\": \"Allow sending log messages to a Sentry server\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Monolog\\\\\": \"src/Monolog\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Jordi Boggiano\",\n                    \"email\": \"j.boggiano@seld.be\",\n                    \"homepage\": \"http://seld.be\"\n                }\n            ],\n            \"description\": \"Sends your logs to files, sockets, inboxes, databases and various web services\",\n            \"homepage\": \"http://github.com/Seldaek/monolog\",\n            \"keywords\": [\n                \"log\",\n                \"logging\",\n                \"psr-3\"\n            ],\n            \"time\": \"2017-06-19T01:22:40+00:00\"\n        },\n        {\n            \"name\": \"mtdowling/cron-expression\",\n            \"version\": \"v1.2.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/mtdowling/cron-expression.git\",\n                \"reference\": \"9504fa9ea681b586028adaaa0877db4aecf32bad\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/mtdowling/cron-expression/zipball/9504fa9ea681b586028adaaa0877db4aecf32bad\",\n                \"reference\": \"9504fa9ea681b586028adaaa0877db4aecf32bad\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.2\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"~4.0|~5.0\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Cron\\\\\": \"src/Cron/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Michael Dowling\",\n                    \"email\": \"mtdowling@gmail.com\",\n                    \"homepage\": \"https://github.com/mtdowling\"\n                }\n            ],\n            \"description\": \"CRON for PHP: Calculate the next or previous run date and determine if a CRON expression is due\",\n            \"keywords\": [\n                \"cron\",\n                \"schedule\"\n            ],\n            \"time\": \"2017-01-23T04:29:33+00:00\"\n        },\n        {\n            \"name\": \"nesbot/carbon\",\n            \"version\": \"1.22.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/briannesbitt/Carbon.git\",\n                \"reference\": \"7cdf42c0b1cc763ab7e4c33c47a24e27c66bfccc\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/briannesbitt/Carbon/zipball/7cdf42c0b1cc763ab7e4c33c47a24e27c66bfccc\",\n                \"reference\": \"7cdf42c0b1cc763ab7e4c33c47a24e27c66bfccc\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.0\",\n                \"symfony/translation\": \"~2.6 || ~3.0\"\n            },\n            \"require-dev\": {\n                \"friendsofphp/php-cs-fixer\": \"~2\",\n                \"phpunit/phpunit\": \"~4.0 || ~5.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.23-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Carbon\\\\\": \"src/Carbon/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Brian Nesbitt\",\n                    \"email\": \"brian@nesbot.com\",\n                    \"homepage\": \"http://nesbot.com\"\n                }\n            ],\n            \"description\": \"A simple API extension for DateTime.\",\n            \"homepage\": \"http://carbon.nesbot.com\",\n            \"keywords\": [\n                \"date\",\n                \"datetime\",\n                \"time\"\n            ],\n            \"time\": \"2017-01-16T07:55:07+00:00\"\n        },\n        {\n            \"name\": \"nikic/php-parser\",\n            \"version\": \"v3.0.6\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/nikic/PHP-Parser.git\",\n                \"reference\": \"0808939f81c1347a3c8a82a5925385a08074b0f1\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/nikic/PHP-Parser/zipball/0808939f81c1347a3c8a82a5925385a08074b0f1\",\n                \"reference\": \"0808939f81c1347a3c8a82a5925385a08074b0f1\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-tokenizer\": \"*\",\n                \"php\": \">=5.5\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"~4.0|~5.0\"\n            },\n            \"bin\": [\n                \"bin/php-parse\"\n            ],\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"PhpParser\\\\\": \"lib/PhpParser\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Nikita Popov\"\n                }\n            ],\n            \"description\": \"A PHP parser written in PHP\",\n            \"keywords\": [\n                \"parser\",\n                \"php\"\n            ],\n            \"time\": \"2017-06-28T20:53:48+00:00\"\n        },\n        {\n            \"name\": \"paragonie/random_compat\",\n            \"version\": \"v2.0.10\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/paragonie/random_compat.git\",\n                \"reference\": \"634bae8e911eefa89c1abfbf1b66da679ac8f54d\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/paragonie/random_compat/zipball/634bae8e911eefa89c1abfbf1b66da679ac8f54d\",\n                \"reference\": \"634bae8e911eefa89c1abfbf1b66da679ac8f54d\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.2.0\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"4.*|5.*\"\n            },\n            \"suggest\": {\n                \"ext-libsodium\": \"Provides a modern crypto API that can be used to generate random bytes.\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"files\": [\n                    \"lib/random.php\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Paragon Initiative Enterprises\",\n                    \"email\": \"security@paragonie.com\",\n                    \"homepage\": \"https://paragonie.com\"\n                }\n            ],\n            \"description\": \"PHP 5.x polyfill for random_bytes() and random_int() from PHP 7\",\n            \"keywords\": [\n                \"csprng\",\n                \"pseudorandom\",\n                \"random\"\n            ],\n            \"time\": \"2017-03-13T16:27:32+00:00\"\n        },\n        {\n            \"name\": \"psr/log\",\n            \"version\": \"1.0.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/php-fig/log.git\",\n                \"reference\": \"4ebe3a8bf773a19edfe0a84b6585ba3d401b724d\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/php-fig/log/zipball/4ebe3a8bf773a19edfe0a84b6585ba3d401b724d\",\n                \"reference\": \"4ebe3a8bf773a19edfe0a84b6585ba3d401b724d\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Psr\\\\Log\\\\\": \"Psr/Log/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"PHP-FIG\",\n                    \"homepage\": \"http://www.php-fig.org/\"\n                }\n            ],\n            \"description\": \"Common interface for logging libraries\",\n            \"homepage\": \"https://github.com/php-fig/log\",\n            \"keywords\": [\n                \"log\",\n                \"psr\",\n                \"psr-3\"\n            ],\n            \"time\": \"2016-10-10T12:19:37+00:00\"\n        },\n        {\n            \"name\": \"psy/psysh\",\n            \"version\": \"v0.8.10\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/bobthecow/psysh.git\",\n                \"reference\": \"7ab97e5a32202585309f3ee35a0c08d2a8e588b1\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/bobthecow/psysh/zipball/7ab97e5a32202585309f3ee35a0c08d2a8e588b1\",\n                \"reference\": \"7ab97e5a32202585309f3ee35a0c08d2a8e588b1\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"dnoegel/php-xdg-base-dir\": \"0.1\",\n                \"jakub-onderka/php-console-highlighter\": \"0.3.*\",\n                \"nikic/php-parser\": \"~1.3|~2.0|~3.0\",\n                \"php\": \">=5.3.9\",\n                \"symfony/console\": \"~2.3.10|^2.4.2|~3.0\",\n                \"symfony/var-dumper\": \"~2.7|~3.0\"\n            },\n            \"require-dev\": {\n                \"friendsofphp/php-cs-fixer\": \"~1.11\",\n                \"hoa/console\": \"~3.16|~1.14\",\n                \"phpunit/phpunit\": \"~4.4|~5.0\",\n                \"symfony/finder\": \"~2.1|~3.0\"\n            },\n            \"suggest\": {\n                \"ext-pcntl\": \"Enabling the PCNTL extension makes PsySH a lot happier :)\",\n                \"ext-pdo-sqlite\": \"The doc command requires SQLite to work.\",\n                \"ext-posix\": \"If you have PCNTL, you'll want the POSIX extension as well.\",\n                \"ext-readline\": \"Enables support for arrow-key history navigation, and showing and manipulating command history.\",\n                \"hoa/console\": \"A pure PHP readline implementation. You'll want this if your PHP install doesn't already support readline or libedit.\"\n            },\n            \"bin\": [\n                \"bin/psysh\"\n            ],\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-develop\": \"0.8.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"files\": [\n                    \"src/Psy/functions.php\"\n                ],\n                \"psr-4\": {\n                    \"Psy\\\\\": \"src/Psy/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Justin Hileman\",\n                    \"email\": \"justin@justinhileman.info\",\n                    \"homepage\": \"http://justinhileman.com\"\n                }\n            ],\n            \"description\": \"An interactive shell for modern PHP.\",\n            \"homepage\": \"http://psysh.org\",\n            \"keywords\": [\n                \"REPL\",\n                \"console\",\n                \"interactive\",\n                \"shell\"\n            ],\n            \"time\": \"2017-07-22T15:14:19+00:00\"\n        },\n        {\n            \"name\": \"ramsey/uuid\",\n            \"version\": \"3.6.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/ramsey/uuid.git\",\n                \"reference\": \"4ae32dd9ab8860a4bbd750ad269cba7f06f7934e\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/ramsey/uuid/zipball/4ae32dd9ab8860a4bbd750ad269cba7f06f7934e\",\n                \"reference\": \"4ae32dd9ab8860a4bbd750ad269cba7f06f7934e\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"paragonie/random_compat\": \"^1.0|^2.0\",\n                \"php\": \"^5.4 || ^7.0\"\n            },\n            \"replace\": {\n                \"rhumsaa/uuid\": \"self.version\"\n            },\n            \"require-dev\": {\n                \"apigen/apigen\": \"^4.1\",\n                \"codeception/aspect-mock\": \"^1.0 | ^2.0\",\n                \"doctrine/annotations\": \"~1.2.0\",\n                \"goaop/framework\": \"1.0.0-alpha.2 | ^1.0 | ^2.1\",\n                \"ircmaxell/random-lib\": \"^1.1\",\n                \"jakub-onderka/php-parallel-lint\": \"^0.9.0\",\n                \"mockery/mockery\": \"^0.9.4\",\n                \"moontoast/math\": \"^1.1\",\n                \"php-mock/php-mock-phpunit\": \"^0.3|^1.1\",\n                \"phpunit/phpunit\": \"^4.7|>=5.0 <5.4\",\n                \"satooshi/php-coveralls\": \"^0.6.1\",\n                \"squizlabs/php_codesniffer\": \"^2.3\"\n            },\n            \"suggest\": {\n                \"ext-libsodium\": \"Provides the PECL libsodium extension for use with the SodiumRandomGenerator\",\n                \"ext-uuid\": \"Provides the PECL UUID extension for use with the PeclUuidTimeGenerator and PeclUuidRandomGenerator\",\n                \"ircmaxell/random-lib\": \"Provides RandomLib for use with the RandomLibAdapter\",\n                \"moontoast/math\": \"Provides support for converting UUID to 128-bit integer (in string form).\",\n                \"ramsey/uuid-console\": \"A console application for generating UUIDs with ramsey/uuid\",\n                \"ramsey/uuid-doctrine\": \"Allows the use of Ramsey\\\\Uuid\\\\Uuid as Doctrine field type.\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Ramsey\\\\Uuid\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Marijn Huizendveld\",\n                    \"email\": \"marijn.huizendveld@gmail.com\"\n                },\n                {\n                    \"name\": \"Thibaud Fabre\",\n                    \"email\": \"thibaud@aztech.io\"\n                },\n                {\n                    \"name\": \"Ben Ramsey\",\n                    \"email\": \"ben@benramsey.com\",\n                    \"homepage\": \"https://benramsey.com\"\n                }\n            ],\n            \"description\": \"Formerly rhumsaa/uuid. A PHP 5.4+ library for generating RFC 4122 version 1, 3, 4, and 5 universally unique identifiers (UUID).\",\n            \"homepage\": \"https://github.com/ramsey/uuid\",\n            \"keywords\": [\n                \"guid\",\n                \"identifier\",\n                \"uuid\"\n            ],\n            \"time\": \"2017-03-26T20:37:53+00:00\"\n        },\n        {\n            \"name\": \"spatie/laravel-permission\",\n            \"version\": \"1.12.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/spatie/laravel-permission.git\",\n                \"reference\": \"837ff988016824318efe30c32947146c393a273f\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/spatie/laravel-permission/zipball/837ff988016824318efe30c32947146c393a273f\",\n                \"reference\": \"837ff988016824318efe30c32947146c393a273f\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"illuminate/contracts\": \"~5.1.0|~5.2.0|~5.3.0|~5.4.0\",\n                \"laravel/framework\": \"~5.1.11|~5.2.0|~5.3.0|~5.4.0\",\n                \"php\": \">=5.6.0\"\n            },\n            \"require-dev\": {\n                \"monolog/monolog\": \"^1.22\",\n                \"orchestra/testbench\": \"~3.3.0|~3.4.0\",\n                \"phpunit/phpunit\": \"^5.7.8\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Spatie\\\\Permission\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Freek Van der Herten\",\n                    \"email\": \"freek@spatie.be\",\n                    \"homepage\": \"https://spatie.be\",\n                    \"role\": \"Developer\"\n                }\n            ],\n            \"description\": \"Permission handling for Laravel 5.1 and up\",\n            \"homepage\": \"https://github.com/spatie/laravel-permission\",\n            \"keywords\": [\n                \"acl\",\n                \"laravel\",\n                \"permission\",\n                \"security\",\n                \"spatie\"\n            ],\n            \"time\": \"2017-03-14T19:14:04+00:00\"\n        },\n        {\n            \"name\": \"swiftmailer/swiftmailer\",\n            \"version\": \"v5.4.8\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/swiftmailer/swiftmailer.git\",\n                \"reference\": \"9a06dc570a0367850280eefd3f1dc2da45aef517\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/swiftmailer/swiftmailer/zipball/9a06dc570a0367850280eefd3f1dc2da45aef517\",\n                \"reference\": \"9a06dc570a0367850280eefd3f1dc2da45aef517\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.3\"\n            },\n            \"require-dev\": {\n                \"mockery/mockery\": \"~0.9.1\",\n                \"symfony/phpunit-bridge\": \"~3.2\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"5.4-dev\"\n                }\n            },\n            \"autoload\": {\n                \"files\": [\n                    \"lib/swift_required.php\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Chris Corbyn\"\n                },\n                {\n                    \"name\": \"Fabien Potencier\",\n                    \"email\": \"fabien@symfony.com\"\n                }\n            ],\n            \"description\": \"Swiftmailer, free feature-rich PHP mailer\",\n            \"homepage\": \"http://swiftmailer.org\",\n            \"keywords\": [\n                \"email\",\n                \"mail\",\n                \"mailer\"\n            ],\n            \"time\": \"2017-05-01T15:54:03+00:00\"\n        },\n        {\n            \"name\": \"symfony/console\",\n            \"version\": \"v3.3.5\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/console.git\",\n                \"reference\": \"a97e45d98c59510f085fa05225a1acb74dfe0546\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/console/zipball/a97e45d98c59510f085fa05225a1acb74dfe0546\",\n                \"reference\": \"a97e45d98c59510f085fa05225a1acb74dfe0546\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.5.9\",\n                \"symfony/debug\": \"~2.8|~3.0\",\n                \"symfony/polyfill-mbstring\": \"~1.0\"\n            },\n            \"conflict\": {\n                \"symfony/dependency-injection\": \"<3.3\"\n            },\n            \"require-dev\": {\n                \"psr/log\": \"~1.0\",\n                \"symfony/config\": \"~3.3\",\n                \"symfony/dependency-injection\": \"~3.3\",\n                \"symfony/event-dispatcher\": \"~2.8|~3.0\",\n                \"symfony/filesystem\": \"~2.8|~3.0\",\n                \"symfony/http-kernel\": \"~2.8|~3.0\",\n                \"symfony/process\": \"~2.8|~3.0\"\n            },\n            \"suggest\": {\n                \"psr/log\": \"For using the console logger\",\n                \"symfony/event-dispatcher\": \"\",\n                \"symfony/filesystem\": \"\",\n                \"symfony/process\": \"\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.3-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\Console\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Fabien Potencier\",\n                    \"email\": \"fabien@symfony.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony Console Component\",\n            \"homepage\": \"https://symfony.com\",\n            \"time\": \"2017-07-03T13:19:36+00:00\"\n        },\n        {\n            \"name\": \"symfony/css-selector\",\n            \"version\": \"v3.3.5\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/css-selector.git\",\n                \"reference\": \"4d882dced7b995d5274293039370148e291808f2\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/css-selector/zipball/4d882dced7b995d5274293039370148e291808f2\",\n                \"reference\": \"4d882dced7b995d5274293039370148e291808f2\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.5.9\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.3-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\CssSelector\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Jean-Fran\u00e7ois Simon\",\n                    \"email\": \"jeanfrancois.simon@sensiolabs.com\"\n                },\n                {\n                    \"name\": \"Fabien Potencier\",\n                    \"email\": \"fabien@symfony.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony CssSelector Component\",\n            \"homepage\": \"https://symfony.com\",\n            \"time\": \"2017-05-01T15:01:29+00:00\"\n        },\n        {\n            \"name\": \"symfony/debug\",\n            \"version\": \"v3.3.5\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/debug.git\",\n                \"reference\": \"63b85a968486d95ff9542228dc2e4247f16f9743\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/debug/zipball/63b85a968486d95ff9542228dc2e4247f16f9743\",\n                \"reference\": \"63b85a968486d95ff9542228dc2e4247f16f9743\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.5.9\",\n                \"psr/log\": \"~1.0\"\n            },\n            \"conflict\": {\n                \"symfony/http-kernel\": \">=2.3,<2.3.24|~2.4.0|>=2.5,<2.5.9|>=2.6,<2.6.2\"\n            },\n            \"require-dev\": {\n                \"symfony/http-kernel\": \"~2.8|~3.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.3-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\Debug\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Fabien Potencier\",\n                    \"email\": \"fabien@symfony.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony Debug Component\",\n            \"homepage\": \"https://symfony.com\",\n            \"time\": \"2017-07-05T13:02:37+00:00\"\n        },\n        {\n            \"name\": \"symfony/event-dispatcher\",\n            \"version\": \"v3.3.5\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/event-dispatcher.git\",\n                \"reference\": \"67535f1e3fd662bdc68d7ba317c93eecd973617e\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/event-dispatcher/zipball/67535f1e3fd662bdc68d7ba317c93eecd973617e\",\n                \"reference\": \"67535f1e3fd662bdc68d7ba317c93eecd973617e\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.5.9\"\n            },\n            \"conflict\": {\n                \"symfony/dependency-injection\": \"<3.3\"\n            },\n            \"require-dev\": {\n                \"psr/log\": \"~1.0\",\n                \"symfony/config\": \"~2.8|~3.0\",\n                \"symfony/dependency-injection\": \"~3.3\",\n                \"symfony/expression-language\": \"~2.8|~3.0\",\n                \"symfony/stopwatch\": \"~2.8|~3.0\"\n            },\n            \"suggest\": {\n                \"symfony/dependency-injection\": \"\",\n                \"symfony/http-kernel\": \"\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.3-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\EventDispatcher\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Fabien Potencier\",\n                    \"email\": \"fabien@symfony.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony EventDispatcher Component\",\n            \"homepage\": \"https://symfony.com\",\n            \"time\": \"2017-06-09T14:53:08+00:00\"\n        },\n        {\n            \"name\": \"symfony/finder\",\n            \"version\": \"v3.3.5\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/finder.git\",\n                \"reference\": \"baea7f66d30854ad32988c11a09d7ffd485810c4\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/finder/zipball/baea7f66d30854ad32988c11a09d7ffd485810c4\",\n                \"reference\": \"baea7f66d30854ad32988c11a09d7ffd485810c4\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.5.9\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.3-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\Finder\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Fabien Potencier\",\n                    \"email\": \"fabien@symfony.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony Finder Component\",\n            \"homepage\": \"https://symfony.com\",\n            \"time\": \"2017-06-01T21:01:25+00:00\"\n        },\n        {\n            \"name\": \"symfony/http-foundation\",\n            \"version\": \"v3.3.5\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/http-foundation.git\",\n                \"reference\": \"e307abe4b79ccbbfdced9b91c132fd128f456bc5\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/http-foundation/zipball/e307abe4b79ccbbfdced9b91c132fd128f456bc5\",\n                \"reference\": \"e307abe4b79ccbbfdced9b91c132fd128f456bc5\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.5.9\",\n                \"symfony/polyfill-mbstring\": \"~1.1\"\n            },\n            \"require-dev\": {\n                \"symfony/expression-language\": \"~2.8|~3.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.3-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\HttpFoundation\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Fabien Potencier\",\n                    \"email\": \"fabien@symfony.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony HttpFoundation Component\",\n            \"homepage\": \"https://symfony.com\",\n            \"time\": \"2017-07-17T14:07:10+00:00\"\n        },\n        {\n            \"name\": \"symfony/http-kernel\",\n            \"version\": \"v3.3.5\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/http-kernel.git\",\n                \"reference\": \"16ceea64d23abddf58797a782ae96a5242282cd8\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/http-kernel/zipball/16ceea64d23abddf58797a782ae96a5242282cd8\",\n                \"reference\": \"16ceea64d23abddf58797a782ae96a5242282cd8\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.5.9\",\n                \"psr/log\": \"~1.0\",\n                \"symfony/debug\": \"~2.8|~3.0\",\n                \"symfony/event-dispatcher\": \"~2.8|~3.0\",\n                \"symfony/http-foundation\": \"~3.3\"\n            },\n            \"conflict\": {\n                \"symfony/config\": \"<2.8\",\n                \"symfony/dependency-injection\": \"<3.3\",\n                \"symfony/var-dumper\": \"<3.3\",\n                \"twig/twig\": \"<1.34|<2.4,>=2\"\n            },\n            \"require-dev\": {\n                \"psr/cache\": \"~1.0\",\n                \"symfony/browser-kit\": \"~2.8|~3.0\",\n                \"symfony/class-loader\": \"~2.8|~3.0\",\n                \"symfony/config\": \"~2.8|~3.0\",\n                \"symfony/console\": \"~2.8|~3.0\",\n                \"symfony/css-selector\": \"~2.8|~3.0\",\n                \"symfony/dependency-injection\": \"~3.3\",\n                \"symfony/dom-crawler\": \"~2.8|~3.0\",\n                \"symfony/expression-language\": \"~2.8|~3.0\",\n                \"symfony/finder\": \"~2.8|~3.0\",\n                \"symfony/process\": \"~2.8|~3.0\",\n                \"symfony/routing\": \"~2.8|~3.0\",\n                \"symfony/stopwatch\": \"~2.8|~3.0\",\n                \"symfony/templating\": \"~2.8|~3.0\",\n                \"symfony/translation\": \"~2.8|~3.0\",\n                \"symfony/var-dumper\": \"~3.3\"\n            },\n            \"suggest\": {\n                \"symfony/browser-kit\": \"\",\n                \"symfony/class-loader\": \"\",\n                \"symfony/config\": \"\",\n                \"symfony/console\": \"\",\n                \"symfony/dependency-injection\": \"\",\n                \"symfony/finder\": \"\",\n                \"symfony/var-dumper\": \"\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.3-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\HttpKernel\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Fabien Potencier\",\n                    \"email\": \"fabien@symfony.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony HttpKernel Component\",\n            \"homepage\": \"https://symfony.com\",\n            \"time\": \"2017-07-17T19:08:23+00:00\"\n        },\n        {\n            \"name\": \"symfony/polyfill-mbstring\",\n            \"version\": \"v1.4.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/polyfill-mbstring.git\",\n                \"reference\": \"f29dca382a6485c3cbe6379f0c61230167681937\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/polyfill-mbstring/zipball/f29dca382a6485c3cbe6379f0c61230167681937\",\n                \"reference\": \"f29dca382a6485c3cbe6379f0c61230167681937\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.3\"\n            },\n            \"suggest\": {\n                \"ext-mbstring\": \"For best performance\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.4-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Polyfill\\\\Mbstring\\\\\": \"\"\n                },\n                \"files\": [\n                    \"bootstrap.php\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Nicolas Grekas\",\n                    \"email\": \"p@tchwork.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony polyfill for the Mbstring extension\",\n            \"homepage\": \"https://symfony.com\",\n            \"keywords\": [\n                \"compatibility\",\n                \"mbstring\",\n                \"polyfill\",\n                \"portable\",\n                \"shim\"\n            ],\n            \"time\": \"2017-06-09T14:24:12+00:00\"\n        },\n        {\n            \"name\": \"symfony/process\",\n            \"version\": \"v3.3.5\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/process.git\",\n                \"reference\": \"07432804942b9f6dd7b7377faf9920af5f95d70a\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/process/zipball/07432804942b9f6dd7b7377faf9920af5f95d70a\",\n                \"reference\": \"07432804942b9f6dd7b7377faf9920af5f95d70a\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.5.9\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.3-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\Process\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Fabien Potencier\",\n                    \"email\": \"fabien@symfony.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony Process Component\",\n            \"homepage\": \"https://symfony.com\",\n            \"time\": \"2017-07-13T13:05:09+00:00\"\n        },\n        {\n            \"name\": \"symfony/routing\",\n            \"version\": \"v3.3.5\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/routing.git\",\n                \"reference\": \"dc70bbd0ca7b19259f63cdacc8af370bc32a4728\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/routing/zipball/dc70bbd0ca7b19259f63cdacc8af370bc32a4728\",\n                \"reference\": \"dc70bbd0ca7b19259f63cdacc8af370bc32a4728\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.5.9\"\n            },\n            \"conflict\": {\n                \"symfony/config\": \"<2.8\",\n                \"symfony/dependency-injection\": \"<3.3\",\n                \"symfony/yaml\": \"<3.3\"\n            },\n            \"require-dev\": {\n                \"doctrine/annotations\": \"~1.0\",\n                \"doctrine/common\": \"~2.2\",\n                \"psr/log\": \"~1.0\",\n                \"symfony/config\": \"~2.8|~3.0\",\n                \"symfony/dependency-injection\": \"~3.3\",\n                \"symfony/expression-language\": \"~2.8|~3.0\",\n                \"symfony/http-foundation\": \"~2.8|~3.0\",\n                \"symfony/yaml\": \"~3.3\"\n            },\n            \"suggest\": {\n                \"doctrine/annotations\": \"For using the annotation loader\",\n                \"symfony/config\": \"For using the all-in-one router or any loader\",\n                \"symfony/dependency-injection\": \"For loading routes from a service\",\n                \"symfony/expression-language\": \"For using expression matching\",\n                \"symfony/http-foundation\": \"For using a Symfony Request object\",\n                \"symfony/yaml\": \"For using the YAML loader\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.3-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\Routing\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Fabien Potencier\",\n                    \"email\": \"fabien@symfony.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony Routing Component\",\n            \"homepage\": \"https://symfony.com\",\n            \"keywords\": [\n                \"router\",\n                \"routing\",\n                \"uri\",\n                \"url\"\n            ],\n            \"time\": \"2017-06-24T09:29:48+00:00\"\n        },\n        {\n            \"name\": \"symfony/translation\",\n            \"version\": \"v3.3.5\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/translation.git\",\n                \"reference\": \"35dd5fb003c90e8bd4d8cabdf94bf9c96d06fdc3\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/translation/zipball/35dd5fb003c90e8bd4d8cabdf94bf9c96d06fdc3\",\n                \"reference\": \"35dd5fb003c90e8bd4d8cabdf94bf9c96d06fdc3\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.5.9\",\n                \"symfony/polyfill-mbstring\": \"~1.0\"\n            },\n            \"conflict\": {\n                \"symfony/config\": \"<2.8\",\n                \"symfony/yaml\": \"<3.3\"\n            },\n            \"require-dev\": {\n                \"psr/log\": \"~1.0\",\n                \"symfony/config\": \"~2.8|~3.0\",\n                \"symfony/intl\": \"^2.8.18|^3.2.5\",\n                \"symfony/yaml\": \"~3.3\"\n            },\n            \"suggest\": {\n                \"psr/log\": \"To use logging capability in translator\",\n                \"symfony/config\": \"\",\n                \"symfony/yaml\": \"\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.3-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\Translation\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Fabien Potencier\",\n                    \"email\": \"fabien@symfony.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony Translation Component\",\n            \"homepage\": \"https://symfony.com\",\n            \"time\": \"2017-06-24T16:45:30+00:00\"\n        },\n        {\n            \"name\": \"symfony/var-dumper\",\n            \"version\": \"v3.3.5\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/var-dumper.git\",\n                \"reference\": \"0f32b62d21991700250fed5109b092949007c5b3\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/var-dumper/zipball/0f32b62d21991700250fed5109b092949007c5b3\",\n                \"reference\": \"0f32b62d21991700250fed5109b092949007c5b3\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.5.9\",\n                \"symfony/polyfill-mbstring\": \"~1.0\"\n            },\n            \"conflict\": {\n                \"phpunit/phpunit\": \"<4.8.35|<5.4.3,>=5.0\"\n            },\n            \"require-dev\": {\n                \"ext-iconv\": \"*\",\n                \"twig/twig\": \"~1.34|~2.4\"\n            },\n            \"suggest\": {\n                \"ext-iconv\": \"To convert non-UTF-8 strings to UTF-8 (or symfony/polyfill-iconv in case ext-iconv cannot be used).\",\n                \"ext-symfony_debug\": \"\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.3-dev\"\n                }\n            },\n            \"autoload\": {\n                \"files\": [\n                    \"Resources/functions/dump.php\"\n                ],\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\VarDumper\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Nicolas Grekas\",\n                    \"email\": \"p@tchwork.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony mechanism for exploring and dumping PHP variables\",\n            \"homepage\": \"https://symfony.com\",\n            \"keywords\": [\n                \"debug\",\n                \"dump\"\n            ],\n            \"time\": \"2017-07-10T14:18:27+00:00\"\n        },\n        {\n            \"name\": \"tijsverkoyen/css-to-inline-styles\",\n            \"version\": \"2.2.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/tijsverkoyen/CssToInlineStyles.git\",\n                \"reference\": \"ab03919dfd85a74ae0372f8baf9f3c7d5c03b04b\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/tijsverkoyen/CssToInlineStyles/zipball/ab03919dfd85a74ae0372f8baf9f3c7d5c03b04b\",\n                \"reference\": \"ab03919dfd85a74ae0372f8baf9f3c7d5c03b04b\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^5.5 || ^7\",\n                \"symfony/css-selector\": \"^2.7|~3.0\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"~4.8|5.1.*\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"TijsVerkoyen\\\\CssToInlineStyles\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Tijs Verkoyen\",\n                    \"email\": \"css_to_inline_styles@verkoyen.eu\",\n                    \"role\": \"Developer\"\n                }\n            ],\n            \"description\": \"CssToInlineStyles is a class that enables you to convert HTML-pages/files into HTML-pages/files with inline styles. This is very useful when you're sending emails.\",\n            \"homepage\": \"https://github.com/tijsverkoyen/CssToInlineStyles\",\n            \"time\": \"2016-09-20T12:50:39+00:00\"\n        },\n        {\n            \"name\": \"vlucas/phpdotenv\",\n            \"version\": \"v2.4.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/vlucas/phpdotenv.git\",\n                \"reference\": \"3cc116adbe4b11be5ec557bf1d24dc5e3a21d18c\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/vlucas/phpdotenv/zipball/3cc116adbe4b11be5ec557bf1d24dc5e3a21d18c\",\n                \"reference\": \"3cc116adbe4b11be5ec557bf1d24dc5e3a21d18c\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.9\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^4.8 || ^5.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.4-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Dotenv\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause-Attribution\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Vance Lucas\",\n                    \"email\": \"vance@vancelucas.com\",\n                    \"homepage\": \"http://www.vancelucas.com\"\n                }\n            ],\n            \"description\": \"Loads environment variables from `.env` to `getenv()`, `$_ENV` and `$_SERVER` automagically.\",\n            \"keywords\": [\n                \"dotenv\",\n                \"env\",\n                \"environment\"\n            ],\n            \"time\": \"2016-09-01T10:05:43+00:00\"\n        }\n    ],\n    \"packages-dev\": [\n        {\n            \"name\": \"doctrine/instantiator\",\n            \"version\": \"1.0.5\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/doctrine/instantiator.git\",\n                \"reference\": \"8e884e78f9f0eb1329e445619e04456e64d8051d\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/doctrine/instantiator/zipball/8e884e78f9f0eb1329e445619e04456e64d8051d\",\n                \"reference\": \"8e884e78f9f0eb1329e445619e04456e64d8051d\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3,<8.0-DEV\"\n            },\n            \"require-dev\": {\n                \"athletic/athletic\": \"~0.1.8\",\n                \"ext-pdo\": \"*\",\n                \"ext-phar\": \"*\",\n                \"phpunit/phpunit\": \"~4.0\",\n                \"squizlabs/php_codesniffer\": \"~2.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Doctrine\\\\Instantiator\\\\\": \"src/Doctrine/Instantiator/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Marco Pivetta\",\n                    \"email\": \"ocramius@gmail.com\",\n                    \"homepage\": \"http://ocramius.github.com/\"\n                }\n            ],\n            \"description\": \"A small, lightweight utility to instantiate objects in PHP without invoking their constructors\",\n            \"homepage\": \"https://github.com/doctrine/instantiator\",\n            \"keywords\": [\n                \"constructor\",\n                \"instantiate\"\n            ],\n            \"time\": \"2015-06-14T21:17:01+00:00\"\n        },\n        {\n            \"name\": \"fzaninotto/faker\",\n            \"version\": \"v1.6.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/fzaninotto/Faker.git\",\n                \"reference\": \"44f9a286a04b80c76a4e5fb7aad8bb539b920123\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/fzaninotto/Faker/zipball/44f9a286a04b80c76a4e5fb7aad8bb539b920123\",\n                \"reference\": \"44f9a286a04b80c76a4e5fb7aad8bb539b920123\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^5.3.3|^7.0\"\n            },\n            \"require-dev\": {\n                \"ext-intl\": \"*\",\n                \"phpunit/phpunit\": \"~4.0\",\n                \"squizlabs/php_codesniffer\": \"~1.5\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": []\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Faker\\\\\": \"src/Faker/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Fran\u00e7ois Zaninotto\"\n                }\n            ],\n            \"description\": \"Faker is a PHP library that generates fake data for you.\",\n            \"keywords\": [\n                \"data\",\n                \"faker\",\n                \"fixtures\"\n            ],\n            \"time\": \"2016-04-29T12:21:54+00:00\"\n        },\n        {\n            \"name\": \"hamcrest/hamcrest-php\",\n            \"version\": \"v1.2.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/hamcrest/hamcrest-php.git\",\n                \"reference\": \"b37020aa976fa52d3de9aa904aa2522dc518f79c\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/hamcrest/hamcrest-php/zipball/b37020aa976fa52d3de9aa904aa2522dc518f79c\",\n                \"reference\": \"b37020aa976fa52d3de9aa904aa2522dc518f79c\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.2\"\n            },\n            \"replace\": {\n                \"cordoval/hamcrest-php\": \"*\",\n                \"davedevelopment/hamcrest-php\": \"*\",\n                \"kodova/hamcrest-php\": \"*\"\n            },\n            \"require-dev\": {\n                \"phpunit/php-file-iterator\": \"1.3.3\",\n                \"satooshi/php-coveralls\": \"dev-master\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"classmap\": [\n                    \"hamcrest\"\n                ],\n                \"files\": [\n                    \"hamcrest/Hamcrest.php\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD\"\n            ],\n            \"description\": \"This is the PHP port of Hamcrest Matchers\",\n            \"keywords\": [\n                \"test\"\n            ],\n            \"time\": \"2015-05-11T14:41:42+00:00\"\n        },\n        {\n            \"name\": \"mockery/mockery\",\n            \"version\": \"0.9.9\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/mockery/mockery.git\",\n                \"reference\": \"6fdb61243844dc924071d3404bb23994ea0b6856\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/mockery/mockery/zipball/6fdb61243844dc924071d3404bb23994ea0b6856\",\n                \"reference\": \"6fdb61243844dc924071d3404bb23994ea0b6856\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"hamcrest/hamcrest-php\": \"~1.1\",\n                \"lib-pcre\": \">=7.0\",\n                \"php\": \">=5.3.2\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"~4.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"0.9.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-0\": {\n                    \"Mockery\": \"library/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Padraic Brady\",\n                    \"email\": \"padraic.brady@gmail.com\",\n                    \"homepage\": \"http://blog.astrumfutura.com\"\n                },\n                {\n                    \"name\": \"Dave Marshall\",\n                    \"email\": \"dave.marshall@atstsolutions.co.uk\",\n                    \"homepage\": \"http://davedevelopment.co.uk\"\n                }\n            ],\n            \"description\": \"Mockery is a simple yet flexible PHP mock object framework for use in unit testing with PHPUnit, PHPSpec or any other testing framework. Its core goal is to offer a test double framework with a succinct API capable of clearly defining all possible object operations and interactions using a human readable Domain Specific Language (DSL). Designed as a drop in alternative to PHPUnit's phpunit-mock-objects library, Mockery is easy to integrate with PHPUnit and can operate alongside phpunit-mock-objects without the World ending.\",\n            \"homepage\": \"http://github.com/padraic/mockery\",\n            \"keywords\": [\n                \"BDD\",\n                \"TDD\",\n                \"library\",\n                \"mock\",\n                \"mock objects\",\n                \"mockery\",\n                \"stub\",\n                \"test\",\n                \"test double\",\n                \"testing\"\n            ],\n            \"time\": \"2017-02-28T12:52:32+00:00\"\n        },\n        {\n            \"name\": \"myclabs/deep-copy\",\n            \"version\": \"1.6.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/myclabs/DeepCopy.git\",\n                \"reference\": \"8e6e04167378abf1ddb4d3522d8755c5fd90d102\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/myclabs/DeepCopy/zipball/8e6e04167378abf1ddb4d3522d8755c5fd90d102\",\n                \"reference\": \"8e6e04167378abf1ddb4d3522d8755c5fd90d102\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.4.0\"\n            },\n            \"require-dev\": {\n                \"doctrine/collections\": \"1.*\",\n                \"phpunit/phpunit\": \"~4.1\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"DeepCopy\\\\\": \"src/DeepCopy/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"description\": \"Create deep copies (clones) of your objects\",\n            \"homepage\": \"https://github.com/myclabs/DeepCopy\",\n            \"keywords\": [\n                \"clone\",\n                \"copy\",\n                \"duplicate\",\n                \"object\",\n                \"object graph\"\n            ],\n            \"time\": \"2017-04-12T18:52:22+00:00\"\n        },\n        {\n            \"name\": \"phpdocumentor/reflection-common\",\n            \"version\": \"1.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/phpDocumentor/ReflectionCommon.git\",\n                \"reference\": \"144c307535e82c8fdcaacbcfc1d6d8eeb896687c\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/phpDocumentor/ReflectionCommon/zipball/144c307535e82c8fdcaacbcfc1d6d8eeb896687c\",\n                \"reference\": \"144c307535e82c8fdcaacbcfc1d6d8eeb896687c\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.5\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^4.6\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"phpDocumentor\\\\Reflection\\\\\": [\n                        \"src\"\n                    ]\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Jaap van Otterdijk\",\n                    \"email\": \"opensource@ijaap.nl\"\n                }\n            ],\n            \"description\": \"Common reflection classes used by phpdocumentor to reflect the code structure\",\n            \"homepage\": \"http://www.phpdoc.org\",\n            \"keywords\": [\n                \"FQSEN\",\n                \"phpDocumentor\",\n                \"phpdoc\",\n                \"reflection\",\n                \"static analysis\"\n            ],\n            \"time\": \"2015-12-27T11:43:31+00:00\"\n        },\n        {\n            \"name\": \"phpdocumentor/reflection-docblock\",\n            \"version\": \"3.2.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/phpDocumentor/ReflectionDocBlock.git\",\n                \"reference\": \"46f7e8bb075036c92695b15a1ddb6971c751e585\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/phpDocumentor/ReflectionDocBlock/zipball/46f7e8bb075036c92695b15a1ddb6971c751e585\",\n                \"reference\": \"46f7e8bb075036c92695b15a1ddb6971c751e585\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.5\",\n                \"phpdocumentor/reflection-common\": \"^1.0@dev\",\n                \"phpdocumentor/type-resolver\": \"^0.4.0\",\n                \"webmozart/assert\": \"^1.0\"\n            },\n            \"require-dev\": {\n                \"mockery/mockery\": \"^0.9.4\",\n                \"phpunit/phpunit\": \"^4.4\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"phpDocumentor\\\\Reflection\\\\\": [\n                        \"src/\"\n                    ]\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Mike van Riel\",\n                    \"email\": \"me@mikevanriel.com\"\n                }\n            ],\n            \"description\": \"With this component, a library can provide support for annotations via DocBlocks or otherwise retrieve information that is embedded in a DocBlock.\",\n            \"time\": \"2017-07-15T11:38:20+00:00\"\n        },\n        {\n            \"name\": \"phpdocumentor/type-resolver\",\n            \"version\": \"0.4.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/phpDocumentor/TypeResolver.git\",\n                \"reference\": \"9c977708995954784726e25d0cd1dddf4e65b0f7\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/phpDocumentor/TypeResolver/zipball/9c977708995954784726e25d0cd1dddf4e65b0f7\",\n                \"reference\": \"9c977708995954784726e25d0cd1dddf4e65b0f7\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^5.5 || ^7.0\",\n                \"phpdocumentor/reflection-common\": \"^1.0\"\n            },\n            \"require-dev\": {\n                \"mockery/mockery\": \"^0.9.4\",\n                \"phpunit/phpunit\": \"^5.2||^4.8.24\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"phpDocumentor\\\\Reflection\\\\\": [\n                        \"src/\"\n                    ]\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Mike van Riel\",\n                    \"email\": \"me@mikevanriel.com\"\n                }\n            ],\n            \"time\": \"2017-07-14T14:27:02+00:00\"\n        },\n        {\n            \"name\": \"phpspec/prophecy\",\n            \"version\": \"v1.7.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/phpspec/prophecy.git\",\n                \"reference\": \"93d39f1f7f9326d746203c7c056f300f7f126073\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/phpspec/prophecy/zipball/93d39f1f7f9326d746203c7c056f300f7f126073\",\n                \"reference\": \"93d39f1f7f9326d746203c7c056f300f7f126073\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"doctrine/instantiator\": \"^1.0.2\",\n                \"php\": \"^5.3|^7.0\",\n                \"phpdocumentor/reflection-docblock\": \"^2.0|^3.0.2\",\n                \"sebastian/comparator\": \"^1.1|^2.0\",\n                \"sebastian/recursion-context\": \"^1.0|^2.0|^3.0\"\n            },\n            \"require-dev\": {\n                \"phpspec/phpspec\": \"^2.5|^3.2\",\n                \"phpunit/phpunit\": \"^4.8 || ^5.6.5\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.6.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-0\": {\n                    \"Prophecy\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Konstantin Kudryashov\",\n                    \"email\": \"ever.zet@gmail.com\",\n                    \"homepage\": \"http://everzet.com\"\n                },\n                {\n                    \"name\": \"Marcello Duarte\",\n                    \"email\": \"marcello.duarte@gmail.com\"\n                }\n            ],\n            \"description\": \"Highly opinionated mocking framework for PHP 5.3+\",\n            \"homepage\": \"https://github.com/phpspec/prophecy\",\n            \"keywords\": [\n                \"Double\",\n                \"Dummy\",\n                \"fake\",\n                \"mock\",\n                \"spy\",\n                \"stub\"\n            ],\n            \"time\": \"2017-03-02T20:05:34+00:00\"\n        },\n        {\n            \"name\": \"phpunit/php-code-coverage\",\n            \"version\": \"4.0.8\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/php-code-coverage.git\",\n                \"reference\": \"ef7b2f56815df854e66ceaee8ebe9393ae36a40d\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/php-code-coverage/zipball/ef7b2f56815df854e66ceaee8ebe9393ae36a40d\",\n                \"reference\": \"ef7b2f56815df854e66ceaee8ebe9393ae36a40d\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-dom\": \"*\",\n                \"ext-xmlwriter\": \"*\",\n                \"php\": \"^5.6 || ^7.0\",\n                \"phpunit/php-file-iterator\": \"^1.3\",\n                \"phpunit/php-text-template\": \"^1.2\",\n                \"phpunit/php-token-stream\": \"^1.4.2 || ^2.0\",\n                \"sebastian/code-unit-reverse-lookup\": \"^1.0\",\n                \"sebastian/environment\": \"^1.3.2 || ^2.0\",\n                \"sebastian/version\": \"^1.0 || ^2.0\"\n            },\n            \"require-dev\": {\n                \"ext-xdebug\": \"^2.1.4\",\n                \"phpunit/phpunit\": \"^5.7\"\n            },\n            \"suggest\": {\n                \"ext-xdebug\": \"^2.5.1\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"4.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sb@sebastian-bergmann.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Library that provides collection, processing, and rendering functionality for PHP code coverage information.\",\n            \"homepage\": \"https://github.com/sebastianbergmann/php-code-coverage\",\n            \"keywords\": [\n                \"coverage\",\n                \"testing\",\n                \"xunit\"\n            ],\n            \"time\": \"2017-04-02T07:44:40+00:00\"\n        },\n        {\n            \"name\": \"phpunit/php-file-iterator\",\n            \"version\": \"1.4.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/php-file-iterator.git\",\n                \"reference\": \"3cc8f69b3028d0f96a9078e6295d86e9bf019be5\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/php-file-iterator/zipball/3cc8f69b3028d0f96a9078e6295d86e9bf019be5\",\n                \"reference\": \"3cc8f69b3028d0f96a9078e6295d86e9bf019be5\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.3\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.4.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sb@sebastian-bergmann.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"FilterIterator implementation that filters files based on a list of suffixes.\",\n            \"homepage\": \"https://github.com/sebastianbergmann/php-file-iterator/\",\n            \"keywords\": [\n                \"filesystem\",\n                \"iterator\"\n            ],\n            \"time\": \"2016-10-03T07:40:28+00:00\"\n        },\n        {\n            \"name\": \"phpunit/php-text-template\",\n            \"version\": \"1.2.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/php-text-template.git\",\n                \"reference\": \"31f8b717e51d9a2afca6c9f046f5d69fc27c8686\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/php-text-template/zipball/31f8b717e51d9a2afca6c9f046f5d69fc27c8686\",\n                \"reference\": \"31f8b717e51d9a2afca6c9f046f5d69fc27c8686\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.3\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Simple template engine.\",\n            \"homepage\": \"https://github.com/sebastianbergmann/php-text-template/\",\n            \"keywords\": [\n                \"template\"\n            ],\n            \"time\": \"2015-06-21T13:50:34+00:00\"\n        },\n        {\n            \"name\": \"phpunit/php-timer\",\n            \"version\": \"1.0.9\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/php-timer.git\",\n                \"reference\": \"3dcf38ca72b158baf0bc245e9184d3fdffa9c46f\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/php-timer/zipball/3dcf38ca72b158baf0bc245e9184d3fdffa9c46f\",\n                \"reference\": \"3dcf38ca72b158baf0bc245e9184d3fdffa9c46f\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^5.3.3 || ^7.0\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^4.8.35 || ^5.7 || ^6.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sb@sebastian-bergmann.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Utility class for timing\",\n            \"homepage\": \"https://github.com/sebastianbergmann/php-timer/\",\n            \"keywords\": [\n                \"timer\"\n            ],\n            \"time\": \"2017-02-26T11:10:40+00:00\"\n        },\n        {\n            \"name\": \"phpunit/php-token-stream\",\n            \"version\": \"1.4.11\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/php-token-stream.git\",\n                \"reference\": \"e03f8f67534427a787e21a385a67ec3ca6978ea7\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/php-token-stream/zipball/e03f8f67534427a787e21a385a67ec3ca6978ea7\",\n                \"reference\": \"e03f8f67534427a787e21a385a67ec3ca6978ea7\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-tokenizer\": \"*\",\n                \"php\": \">=5.3.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"~4.2\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.4-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                }\n            ],\n            \"description\": \"Wrapper around PHP's tokenizer extension.\",\n            \"homepage\": \"https://github.com/sebastianbergmann/php-token-stream/\",\n            \"keywords\": [\n                \"tokenizer\"\n            ],\n            \"time\": \"2017-02-27T10:12:30+00:00\"\n        },\n        {\n            \"name\": \"phpunit/phpunit\",\n            \"version\": \"5.7.21\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/phpunit.git\",\n                \"reference\": \"3b91adfb64264ddec5a2dee9851f354aa66327db\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/phpunit/zipball/3b91adfb64264ddec5a2dee9851f354aa66327db\",\n                \"reference\": \"3b91adfb64264ddec5a2dee9851f354aa66327db\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-dom\": \"*\",\n                \"ext-json\": \"*\",\n                \"ext-libxml\": \"*\",\n                \"ext-mbstring\": \"*\",\n                \"ext-xml\": \"*\",\n                \"myclabs/deep-copy\": \"~1.3\",\n                \"php\": \"^5.6 || ^7.0\",\n                \"phpspec/prophecy\": \"^1.6.2\",\n                \"phpunit/php-code-coverage\": \"^4.0.4\",\n                \"phpunit/php-file-iterator\": \"~1.4\",\n                \"phpunit/php-text-template\": \"~1.2\",\n                \"phpunit/php-timer\": \"^1.0.6\",\n                \"phpunit/phpunit-mock-objects\": \"^3.2\",\n                \"sebastian/comparator\": \"^1.2.4\",\n                \"sebastian/diff\": \"^1.4.3\",\n                \"sebastian/environment\": \"^1.3.4 || ^2.0\",\n                \"sebastian/exporter\": \"~2.0\",\n                \"sebastian/global-state\": \"^1.1\",\n                \"sebastian/object-enumerator\": \"~2.0\",\n                \"sebastian/resource-operations\": \"~1.0\",\n                \"sebastian/version\": \"~1.0.3|~2.0\",\n                \"symfony/yaml\": \"~2.1|~3.0\"\n            },\n            \"conflict\": {\n                \"phpdocumentor/reflection-docblock\": \"3.0.2\"\n            },\n            \"require-dev\": {\n                \"ext-pdo\": \"*\"\n            },\n            \"suggest\": {\n                \"ext-xdebug\": \"*\",\n                \"phpunit/php-invoker\": \"~1.1\"\n            },\n            \"bin\": [\n                \"phpunit\"\n            ],\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"5.7.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"The PHP Unit Testing framework.\",\n            \"homepage\": \"https://phpunit.de/\",\n            \"keywords\": [\n                \"phpunit\",\n                \"testing\",\n                \"xunit\"\n            ],\n            \"time\": \"2017-06-21T08:11:54+00:00\"\n        },\n        {\n            \"name\": \"phpunit/phpunit-mock-objects\",\n            \"version\": \"3.4.4\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/phpunit-mock-objects.git\",\n                \"reference\": \"a23b761686d50a560cc56233b9ecf49597cc9118\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/phpunit-mock-objects/zipball/a23b761686d50a560cc56233b9ecf49597cc9118\",\n                \"reference\": \"a23b761686d50a560cc56233b9ecf49597cc9118\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"doctrine/instantiator\": \"^1.0.2\",\n                \"php\": \"^5.6 || ^7.0\",\n                \"phpunit/php-text-template\": \"^1.2\",\n                \"sebastian/exporter\": \"^1.2 || ^2.0\"\n            },\n            \"conflict\": {\n                \"phpunit/phpunit\": \"<5.4.0\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^5.4\"\n            },\n            \"suggest\": {\n                \"ext-soap\": \"*\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.2.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sb@sebastian-bergmann.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Mock Object library for PHPUnit\",\n            \"homepage\": \"https://github.com/sebastianbergmann/phpunit-mock-objects/\",\n            \"keywords\": [\n                \"mock\",\n                \"xunit\"\n            ],\n            \"time\": \"2017-06-30T09:13:00+00:00\"\n        },\n        {\n            \"name\": \"sebastian/code-unit-reverse-lookup\",\n            \"version\": \"1.0.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/code-unit-reverse-lookup.git\",\n                \"reference\": \"4419fcdb5eabb9caa61a27c7a1db532a6b55dd18\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/code-unit-reverse-lookup/zipball/4419fcdb5eabb9caa61a27c7a1db532a6b55dd18\",\n                \"reference\": \"4419fcdb5eabb9caa61a27c7a1db532a6b55dd18\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^5.6 || ^7.0\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^5.7 || ^6.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                }\n            ],\n            \"description\": \"Looks up which function or method a line of code belongs to\",\n            \"homepage\": \"https://github.com/sebastianbergmann/code-unit-reverse-lookup/\",\n            \"time\": \"2017-03-04T06:30:41+00:00\"\n        },\n        {\n            \"name\": \"sebastian/comparator\",\n            \"version\": \"1.2.4\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/comparator.git\",\n                \"reference\": \"2b7424b55f5047b47ac6e5ccb20b2aea4011d9be\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/comparator/zipball/2b7424b55f5047b47ac6e5ccb20b2aea4011d9be\",\n                \"reference\": \"2b7424b55f5047b47ac6e5ccb20b2aea4011d9be\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.3\",\n                \"sebastian/diff\": \"~1.2\",\n                \"sebastian/exporter\": \"~1.2 || ~2.0\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"~4.4\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.2.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Jeff Welch\",\n                    \"email\": \"whatthejeff@gmail.com\"\n                },\n                {\n                    \"name\": \"Volker Dusch\",\n                    \"email\": \"github@wallbash.com\"\n                },\n                {\n                    \"name\": \"Bernhard Schussek\",\n                    \"email\": \"bschussek@2bepublished.at\"\n                },\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                }\n            ],\n            \"description\": \"Provides the functionality to compare PHP values for equality\",\n            \"homepage\": \"http://www.github.com/sebastianbergmann/comparator\",\n            \"keywords\": [\n                \"comparator\",\n                \"compare\",\n                \"equality\"\n            ],\n            \"time\": \"2017-01-29T09:50:25+00:00\"\n        },\n        {\n            \"name\": \"sebastian/diff\",\n            \"version\": \"1.4.3\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/diff.git\",\n                \"reference\": \"7f066a26a962dbe58ddea9f72a4e82874a3975a4\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/diff/zipball/7f066a26a962dbe58ddea9f72a4e82874a3975a4\",\n                \"reference\": \"7f066a26a962dbe58ddea9f72a4e82874a3975a4\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^5.3.3 || ^7.0\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^4.8.35 || ^5.7 || ^6.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.4-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Kore Nordmann\",\n                    \"email\": \"mail@kore-nordmann.de\"\n                },\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                }\n            ],\n            \"description\": \"Diff implementation\",\n            \"homepage\": \"https://github.com/sebastianbergmann/diff\",\n            \"keywords\": [\n                \"diff\"\n            ],\n            \"time\": \"2017-05-22T07:24:03+00:00\"\n        },\n        {\n            \"name\": \"sebastian/environment\",\n            \"version\": \"2.0.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/environment.git\",\n                \"reference\": \"5795ffe5dc5b02460c3e34222fee8cbe245d8fac\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/environment/zipball/5795ffe5dc5b02460c3e34222fee8cbe245d8fac\",\n                \"reference\": \"5795ffe5dc5b02460c3e34222fee8cbe245d8fac\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^5.6 || ^7.0\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^5.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                }\n            ],\n            \"description\": \"Provides functionality to handle HHVM/PHP environments\",\n            \"homepage\": \"http://www.github.com/sebastianbergmann/environment\",\n            \"keywords\": [\n                \"Xdebug\",\n                \"environment\",\n                \"hhvm\"\n            ],\n            \"time\": \"2016-11-26T07:53:53+00:00\"\n        },\n        {\n            \"name\": \"sebastian/exporter\",\n            \"version\": \"2.0.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/exporter.git\",\n                \"reference\": \"ce474bdd1a34744d7ac5d6aad3a46d48d9bac4c4\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/exporter/zipball/ce474bdd1a34744d7ac5d6aad3a46d48d9bac4c4\",\n                \"reference\": \"ce474bdd1a34744d7ac5d6aad3a46d48d9bac4c4\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.3\",\n                \"sebastian/recursion-context\": \"~2.0\"\n            },\n            \"require-dev\": {\n                \"ext-mbstring\": \"*\",\n                \"phpunit/phpunit\": \"~4.4\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Jeff Welch\",\n                    \"email\": \"whatthejeff@gmail.com\"\n                },\n                {\n                    \"name\": \"Volker Dusch\",\n                    \"email\": \"github@wallbash.com\"\n                },\n                {\n                    \"name\": \"Bernhard Schussek\",\n                    \"email\": \"bschussek@2bepublished.at\"\n                },\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                },\n                {\n                    \"name\": \"Adam Harvey\",\n                    \"email\": \"aharvey@php.net\"\n                }\n            ],\n            \"description\": \"Provides the functionality to export PHP variables for visualization\",\n            \"homepage\": \"http://www.github.com/sebastianbergmann/exporter\",\n            \"keywords\": [\n                \"export\",\n                \"exporter\"\n            ],\n            \"time\": \"2016-11-19T08:54:04+00:00\"\n        },\n        {\n            \"name\": \"sebastian/global-state\",\n            \"version\": \"1.1.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/global-state.git\",\n                \"reference\": \"bc37d50fea7d017d3d340f230811c9f1d7280af4\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/global-state/zipball/bc37d50fea7d017d3d340f230811c9f1d7280af4\",\n                \"reference\": \"bc37d50fea7d017d3d340f230811c9f1d7280af4\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"~4.2\"\n            },\n            \"suggest\": {\n                \"ext-uopz\": \"*\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                }\n            ],\n            \"description\": \"Snapshotting of global state\",\n            \"homepage\": \"http://www.github.com/sebastianbergmann/global-state\",\n            \"keywords\": [\n                \"global state\"\n            ],\n            \"time\": \"2015-10-12T03:26:01+00:00\"\n        },\n        {\n            \"name\": \"sebastian/object-enumerator\",\n            \"version\": \"2.0.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/object-enumerator.git\",\n                \"reference\": \"1311872ac850040a79c3c058bea3e22d0f09cbb7\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/object-enumerator/zipball/1311872ac850040a79c3c058bea3e22d0f09cbb7\",\n                \"reference\": \"1311872ac850040a79c3c058bea3e22d0f09cbb7\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.6\",\n                \"sebastian/recursion-context\": \"~2.0\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"~5\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                }\n            ],\n            \"description\": \"Traverses array structures and object graphs to enumerate all referenced objects\",\n            \"homepage\": \"https://github.com/sebastianbergmann/object-enumerator/\",\n            \"time\": \"2017-02-18T15:18:39+00:00\"\n        },\n        {\n            \"name\": \"sebastian/recursion-context\",\n            \"version\": \"2.0.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/recursion-context.git\",\n                \"reference\": \"2c3ba150cbec723aa057506e73a8d33bdb286c9a\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/recursion-context/zipball/2c3ba150cbec723aa057506e73a8d33bdb286c9a\",\n                \"reference\": \"2c3ba150cbec723aa057506e73a8d33bdb286c9a\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"~4.4\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Jeff Welch\",\n                    \"email\": \"whatthejeff@gmail.com\"\n                },\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                },\n                {\n                    \"name\": \"Adam Harvey\",\n                    \"email\": \"aharvey@php.net\"\n                }\n            ],\n            \"description\": \"Provides functionality to recursively process PHP variables\",\n            \"homepage\": \"http://www.github.com/sebastianbergmann/recursion-context\",\n            \"time\": \"2016-11-19T07:33:16+00:00\"\n        },\n        {\n            \"name\": \"sebastian/resource-operations\",\n            \"version\": \"1.0.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/resource-operations.git\",\n                \"reference\": \"ce990bb21759f94aeafd30209e8cfcdfa8bc3f52\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/resource-operations/zipball/ce990bb21759f94aeafd30209e8cfcdfa8bc3f52\",\n                \"reference\": \"ce990bb21759f94aeafd30209e8cfcdfa8bc3f52\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.6.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                }\n            ],\n            \"description\": \"Provides a list of PHP built-in functions that operate on resources\",\n            \"homepage\": \"https://www.github.com/sebastianbergmann/resource-operations\",\n            \"time\": \"2015-07-28T20:34:47+00:00\"\n        },\n        {\n            \"name\": \"sebastian/version\",\n            \"version\": \"2.0.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/version.git\",\n                \"reference\": \"99732be0ddb3361e16ad77b68ba41efc8e979019\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/version/zipball/99732be0ddb3361e16ad77b68ba41efc8e979019\",\n                \"reference\": \"99732be0ddb3361e16ad77b68ba41efc8e979019\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.6\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Library that helps with managing the version number of Git-hosted PHP projects\",\n            \"homepage\": \"https://github.com/sebastianbergmann/version\",\n            \"time\": \"2016-10-03T07:35:21+00:00\"\n        },\n        {\n            \"name\": \"symfony/yaml\",\n            \"version\": \"v3.3.5\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/yaml.git\",\n                \"reference\": \"1f93a8d19b8241617f5074a123e282575b821df8\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/yaml/zipball/1f93a8d19b8241617f5074a123e282575b821df8\",\n                \"reference\": \"1f93a8d19b8241617f5074a123e282575b821df8\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.5.9\"\n            },\n            \"require-dev\": {\n                \"symfony/console\": \"~2.8|~3.0\"\n            },\n            \"suggest\": {\n                \"symfony/console\": \"For validating YAML files using the lint command\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.3-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\Yaml\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Fabien Potencier\",\n                    \"email\": \"fabien@symfony.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony Yaml Component\",\n            \"homepage\": \"https://symfony.com\",\n            \"time\": \"2017-06-15T12:58:50+00:00\"\n        },\n        {\n            \"name\": \"webmozart/assert\",\n            \"version\": \"1.2.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/webmozart/assert.git\",\n                \"reference\": \"2db61e59ff05fe5126d152bd0655c9ea113e550f\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/webmozart/assert/zipball/2db61e59ff05fe5126d152bd0655c9ea113e550f\",\n                \"reference\": \"2db61e59ff05fe5126d152bd0655c9ea113e550f\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^5.3.3 || ^7.0\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^4.6\",\n                \"sebastian/version\": \"^1.0.1\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.3-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Webmozart\\\\Assert\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Bernhard Schussek\",\n                    \"email\": \"bschussek@gmail.com\"\n                }\n            ],\n            \"description\": \"Assertions to validate method input/output with nice error messages.\",\n            \"keywords\": [\n                \"assert\",\n                \"check\",\n                \"validate\"\n            ],\n            \"time\": \"2016-11-23T20:04:58+00:00\"\n        }\n    ],\n    \"aliases\": [],\n    \"minimum-stability\": \"stable\",\n    \"stability-flags\": [],\n    \"prefer-stable\": false,\n    \"prefer-lowest\": false,\n    \"platform\": {\n        \"php\": \">=5.6.4\"\n    },\n    \"platform-dev\": []\n}. That's strange, thanks for the input. As I used the composer require spatie/laravel-permission command I didn't even think this could be wrong tbh. I'll dig it a bit more, thanks.. Aaah! I might have an idea why it downloaded the oldest version. I tried to manually edit the composer.json to force the download of the plugin latest version, and it says I don't have the correct php version installed on my machine. That will be why then. Thanks a lot, I think I can drive on my own from there. . ",
    "emielmolenaar": "Nice changes! :clap: . > Could you add a test to the testsuite of the package to prove that there is indeed a problem?\nhttps://github.com/spatie/laravel-permission/pull/389\n\nTo solve the problem I added the code on top of the hasRole method in the HasRoles.php file.\n\nA bit hacky if you ask me, if you've been fiddling around in the vendor directory. Be nice and create a PR with a decent fix :wink: . Nice, thanks. ",
    "UriLucioWald": "Hi,\nThanks for the reply , The test was with user admin (Laravel 5.4)\nthe following fail\n@hasanyrole('admin|teacher')\nsuccess\n@else\nfailed\n@endhasanyrole\nWill output failed\nThe following\n@hasanyrole('admin')\nsuccess\n@else\nfailed\n@endhasanyrole\nWill output success. ",
    "pmestre-pt": "Hi,\nI am exactly with the same problem. When it is added to both roles not applied in the filter. Have you found a solution yet?\nTesting in Laravel 5.4. Hi, \nSo I checked the problem is that each role is not being validated separately, but rather as a complete string. To solve the problem I added the code on top of the hasRole method in the HasRoles.php file.\n    if(stripos($roles, '|') !== false){\n        $roles = explode('|', $roles);\n\n        foreach ($roles as $role) {\n            if($this->roles->contains('name', $role) !== false) {\n                return true;\n            }\n        }\n\n        return false;\n    }. Hi,\n\nPlease check the code below to see if the help.\nGet all roles:\n$roles = \\Spatie\\Permission\\Models\\Role::all();\nGet all users with relations:\n$users = \\App\\User::with('roles')->get();\n. ",
    "benyanke": "I would also find wildcard permission, but with string checks.\nFor example, if I have the following permissions:\n\nsales.emailClient\nsales.emailInternal\nsales.viewClients\nmarketing.viewJobs\nmarketing.makeAd\nmarketing.viewJobs\nceo.thing1\nceo.thing2\n\nAnd the following roles:\n\nMarketingUser\nSalesUser\nManagement\nCeo\n\nI could apply all permissions by running:\n```php\n$marketingRole->givePermissionTo('marketing.*');\n$salesRole->givePermissionTo('sales.*');\n$managerRole->givePermissionTo('marketing.');\n$managerRole->givePermissionTo('sales.');\n$ceoRole->givePermissionTo('*');\n```\nThis would be extremely valuable for my workflow, and would bring down the number of unneeded code lines. Currently what I'm accomplishing with 5 lines above would be 30-40 without wildcards.\nAny chance this might get added, or would you be open to a PR?. Not quite as flexible as I'd hoped, but great idea @drbyte - that'll help me move along with this project much quicker in absence of a wildcard. I'll probably be having hundreds of permissions in this app, so this will be a major time saver.. Yes, that would cover every use case I am using wildcards for.\nCurrently I've hacked things into place with a preprocessor which loops though all available permissions and assigns them one at a time, selecting via the wildcard and LDAP group membership. \nHaving cascading permissions would allow me to scrap all that.. @VictorAvelar : I believe he is talking about the User ID, not the permission ID.\nTo the potential implementer of this feature:\nI'd also note that please be aware not every laravel app uses the default ID column, so please be aware it may be a string, or in my case, a GUID.. While my guids are stored without hyphens, just as pure he, you are correct that this would still break.\nFeature request: a method for allowing alternate datatype keys. Version 5.4.\nI will post the full code tomorrow when I get back to work, but the test code I mentioned above is the notable part of the AssignDefaultPermissions.php. The rest is just wrapper code to make it an artisan command. I'm early enough along I'm just only using a line or two of the permission code while I'm developing.. I'm sorry @introwit, et al, I forgot to close the ticket - I believe I got it all working. Not sure what the issue was in the end, I ended up destroying the branch, and following the Readme implementation steps again. I assume I had missed a step or something trivial.\nThis library is quite useful, expect a postcard at the end of the year when this goes to prod.. Would love some sort of wildcard implementation for granting permissions to groups, ala #382. Depending on the context, using the ID allows you to skip a needless DB query. I'll put it this way - if this library is inserting the ID into the database in the end, and you already have the ID in your app from another task, why wouldn't you want to juse use the ID?. Request: \nCreate Permissions -> No Error if Not Exists (Make idempotent)\nCurrently, a permission creation call fails if the permission already exists. I would propose an option to allow this to be an idempotent call, which would silently continue instead of throw an error if it already exists. This allows much easier use in provisioning scripts.\nCurrently, the syntax is:\nPermission::create(['name' => 'permission.namespace.name.here']);\nI would propose an optional option, such as:\nPermission::create(['name' => 'permission.namespace.name.here' , 'no_error_if_exists' => true]);\nSuch an option would allow the permission create function to be called multiple times, with no error.\nIf the maintainers are open to this, I might even be able to work on the patch myself, as this will be a major plus to my application. In my case, this functionality would allow me to refresh permissions from an Active Directory periodically, based on some rules.. I like the createOrFail method, as it more clearly explains the function, but if the maintainers prefer to keep the compatibility, something like createIdempotently would well work too.. Another request: Give an option to delete all roles and permissions.\nI built a frontend which dynamically creates and assigns permissions to users - it would be very nice to be able to flush all the permissions so I can rebuild from a clean slate. . Doesn't sound that  hard to do, but what would be a real life use case of that feature?. Also, another proposal:\nAn option to load a user's full permissionset into cache once per request.\nCurrently, I'm doing some advanced use of this, for displaying elements on pages and such, and this can sometimes result in things like 10-20 queries (one to check each permission as the view is loaded).\nIf there was a call which could load all of a user's permission, or even just an array of permissions you know you'll need later, and store the boolean (user has permission / user does not have permission) in ram during the request, this could massively speed up some of my requests.\nThis could, of course, be built on top of spatie/blink.. @drbyte\nBoth, ideally. I know I can't be the only one who needs to programmatically create permissions. And if you are programmatically creating them based on a ruleset, it's likely an implementation like that would also want to start with a clean slate.. This is what I had to do in the top of my user model to make it work:\npublic $incrementing = false;\n    protected $primaryKey = 'guid';. That seems like a feature that would be useful if(config('app.debug')). Or perhaps as it's own config.. PR written above.. @AlexVanderbist . Good thoughts - will look at later today.\nThanks for the patience - this is my first non-docs PR iirc.. Ok, I fixed the issues you mentioned, but styleCI still failed. Where can I see what styleCI is not liking? I just see PR info, no errors there.. Figured it out - found the diff option which displays the issue. I think this PR is ready to go @drbyte. \nStyleCI is pretty awesome, I might have to implement that at work for my dev.... Very helpful, thank you!. ",
    "eduardoarandah": "Hello! \nMy middleware lets you organize permissions as you would with a domain. \nThe code is simple, about 30 lines:\nhttps://github.com/eduardoarandah/spatie-laravel-permission-permission-middleware/blob/master/PermissionMiddleware.php. ",
    "abishekrsrikaanth": "@freekmurze I seem to have the same issue when the assigning a role. ",
    "liran-co": "I'm having the same issue.. ",
    "jurgenbosch": "Same issue here @freekmurze I'm running on the laravel-55 branch on Laravel 5.5 dev. \nMy user model contains the HasRoles trait but it does not work. \nAlso the $user->roles property is not working. \n\"Property [roles] does not exist on this collection instance.\"\nWeb is my default guard and just to be sure I specified it in my User model. \n$user = User::where('email', 'abc@def.com')->get();\n$user->assignRole('Administrator');\nResults in: \n\"Method assignRole does not exist.\"\n. Any ideas?. I fixed it. \nI added Laravel passport to the application. \nSee: https://laravel.com/docs/5.6/passport and also pay attention to the Javascript API section https://laravel.com/docs/5.6/passport#consuming-your-api-with-javascript\nOnce done I added a group in my api routes with 2 middlewares; auth:api and role:manager. \nDone! :) \nPassport with javascript support creates a cookie that it sends with every request. \nLaravel is able to validate that cookie for authentication on the user that is performing the request. Once that user is known the role or permission can be checked by Spatie's laravel-permission package. \nActually quite cool \ud83e\udd47 \nThis is how my route group looks like in api.php\nRoute::group(['middleware' => ['auth:api', 'role:manager']], function() \n{\n// Routes here\n});. ",
    "ultrasamad": "@freekmurze I keep hearing people always asking whether the default guard is web. Does it mean it can't work with the api guard, because I'm also facing the issue of no role named writer when in actual sense I have one. My guard is api and it's registered in the roles and permissions table columns.. @drbyte I'm using the api guard as my default. When I created a role, create a permission and assign the permission to the role like so,\n```\n    $role = Spatie\\Permission\\Models\\Role::create(['name' => 'writer']);\n    $permission = Spatie\\Permission\\Models\\Permission::create(['name' => 'edit articles']);\n\nwhen I tried\n$user = auth()->guard()->user();\n $user->assignRole('writer');\n``\nI getNo role named writer`. But I can see the role in the roles table with guard name as api.. ",
    "cfreak": "How can i do that in Laravel 5.5?\nDoes anyone have an hint for me?. ",
    "azeemhassni": "@drbyte why do you think using the facade would be better?. That was exactly my question. Why using the facade is better than DI? is there a performance improvement or it's better just because you save yourself type hinting a class?. You'll need to run the following artisan command before running the seeder.\nbash\nphp artisan cache:forget spatie.permission.cache\n. ",
    "asnawisaharuddin": "After defining Gate::before it will not trigger before method in the policy class if Gate::before return true. \nis there a way to only allow super admin bypass only permissions defined in this library?. in my Authserviceprovider.php i have define a Gate::before to bypass all the permission for admin.\nphp\nGate::before(function ($user, $ability) {\n   if ($user->isAdmin()) {\n       return true;\n   }\n});\nI also have policy in UserPolicy.php which only allow admin user and the admin user must belong to the same organisation.\nphp\npublic function view(User $auth_user, User $user)\n{\n    return $auth_user->isAdmin() && $this->isBelongToSameOrganization($auth_user, $user);\n}\nit seems Gate::before will bypass all the policy defined. I have checked on Illuminate\\Auth\\Access\\Gate class. By declare Gate::before will bypass all the policies defined if the Gate::before function return true.\nIs there a way to bypass all the permission defined in the package without bypass the policies. Because Im using multi-tenant. I need an extra checking when accessing user.. ",
    "johana57": "Thanks a lot :dancer: . ",
    "ilgala": "@freekmurze Yes, I've added this code to my table seeder...\n```\nclass RolesAndPermissionsTableSeeder extends Seeder\n{\n/**\n * Run the database seeds.\n *\n * @return void\n */\npublic function run()\n{\n    // Clear cache\n    app()['cache']->forget('spatie.permission.cache');\n\n    // [ ... ] And so on...\n}\n\n}\n```\nAnd everything works fine!. ",
    "borger": "Oops.. I apologize.. I didn't see you had fixed it already.. I was using an older version.. \nThat's a great package by the way, thank you!. ",
    "twf-nikhila": "I need a functionality similar to as @CrixuAMG described. Maybe we can add a setting in permissions.php to enable/disable Duplicate role check.\nWhat are your thoughts? @freekmurze . ",
    "CrixuAMG": "Which basically means creating a try-catch (like) functionality, which I am not not planning on doing since it just sounds ridiculous.\nWe solved it back then by adding a organisation_id column to the table, which is required for the application we are working on.\nSince this is such an integral part of the system (the permissions and roles that are connected to organisations and users) it needs to be streamlined and logical, which would not be achieved by adding error dodging of any kind to it.\nEither the package needs to change to allow for this basic functionality, or people need to use the solution we came up with to get around this issue.. ",
    "OliverZiegler": "So with some more googling I found:\nphp\npublic function getMorphClass()\n{\n    return User::class;\n}\nwith which it works perfectly..... ",
    "lucabartoli": "Wow, I was just going to work on this. Great, Chris!. ",
    "ankurk91": "If you don't specify any guard then it will default to \"web\".\nphp\nRole::create(['name' => 'admin']);\nAlways use provided methods to insert. Don't insert by other means.\nRead the docs. I think there should be an upgrade guide; what steps to follow when a developer wants to update this package.\nI believe each time we publish migration; will create new migration file but with different time-stamp.\n. I have faced similar issue in past.\nRight now both role and permission tables have a single database column name that is being used as unique slug.\nFor example the permission name is create_post and i want to show Ability to create posts on UI.\nSame goes with role.\nI would like to have a new column to hold display_name that we can allow our customer to change without the need of changing the slug (name).\n. @vahidalvandi\nHow are you supposed to store display_name by just updating the schema?\nYou should be discussing the topic here\nhttps://github.com/spatie/laravel-permission/issues/479. ",
    "RobinH12": "So I can just add the \"web\" guard for a role? Or can I also add my own guard like Admin and all the admin users are in there?\nBut if I make a new guard \"Admin\", then do I need to do something else with it or just add in roles table guard-type: \"Admin\"?. ",
    "bbdangar": "True, this is the issue of PHP version, thanks @cesargb . ",
    "nille": "I did this as well but now instead I get this error message when running composer require spatie/laravel-permission:\n```\nUsing version ^2.4 for spatie/laravel-permission\n./composer.json has been updated\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\nYour requirements could not be resolved to an installable set of packages.\nProblem 1\n    - backpack/permissionmanager 2.1.18 requires spatie/laravel-permission ^1.4 -> satisfiable by spatie/laravel-permission[1.10.0, 1.11.0, 1.11.1, 1.12.0, 1.4.0, 1.5.0, 1.5.1, 1.5.2, 1.5.3, 1.6.0, 1.6.1, 1.7.0, 1.8.0, 1.9.0, v1.x-dev] but these conflict with your requirements or minimum-stability.\n    - backpack/permissionmanager 2.1.18 requires spatie/laravel-permission ^1.4 -> satisfiable by spatie/laravel-permission[1.10.0, 1.11.0, 1.11.1, 1.12.0, 1.4.0, 1.5.0, 1.5.1, 1.5.2, 1.5.3, 1.6.0, 1.6.1, 1.7.0, 1.8.0, 1.9.0, v1.x-dev] but these conflict with your requirements or minimum-stability.\n    - backpack/permissionmanager 2.1.18 requires spatie/laravel-permission ^1.4 -> satisfiable by spatie/laravel-permission[1.10.0, 1.11.0, 1.11.1, 1.12.0, 1.4.0, 1.5.0, 1.5.1, 1.5.2, 1.5.3, 1.6.0, 1.6.1, 1.7.0, 1.8.0, 1.9.0, v1.x-dev] but these conflict with your requirements or minimum-stability.\n    - Installation request for backpack/permissionmanager (locked at 2.1.18, required as ^2.1) -> satisfiable by backpack/permissionmanager[2.1.18].\nInstallation failed, reverting ./composer.json to its original content.\n```. ",
    "BTeodorWork": "Maybe https://laravel.com/docs/5.4/authorization#creating-policies. ",
    "ekstro": "I know that but need to know that it is only way to do it - first authorize library permission and next from my policy?\npublic function view(Request $request)\n{\n    $this->authorize('view_enquiries'); // from library\n    $this->authorize(Enquiry::class); // my policy\n}\n. ",
    "mehi-shokri": "@freekmurze does the provided snippet suffice?. ",
    "ameya-woxi": "I got solution.. \nI was not using Role and Permission models from package's folder. I had to implement \"findByName()\" method. \nThank you.. ",
    "faustbrian": "In most projects you will just have one PermissionSeeder that you will run after deploying the application and for local development. The package will throw an exception if the permission is missing.\nIf you want to have a test for that just assert that the permissions the seeder creates are the ones you expect to be created.. ",
    "Reegan01": "Problem 1\n    - spatie/laravel-permission 2.4.2 requires php >=7.0 -> your PHP version (7.1.8) overridden by \"config.platform.php\" version (5.6.4) does not satisfy that requirement.\n    - spatie/laravel-permission 2.4.1 requires php >=7.0 -> your PHP version (7.1.8) overridden by \"config.platform.php\" version (5.6.4) does not satisfy that requirement.\n    - spatie/laravel-permission 2.4.0 requires php >=7.0 -> your PHP version (7.1.8) overridden by \"config.platform.php\" version (5.6.4) does not satisfy that requirement.\n    - Installation request for spatie/laravel-permission ^2.4 -> satisfiable by spatie/laravel-permission[2.4.0, 2.4.1, 2.4.2]\nI got this error when I manually add this line \"spatie/laravel-permission\": \"^2.4\" inside the composer.json file. ",
    "edmandiesamonte": "I have around 105 permissions, and I have 3 different auth guards. In an Internet-of-Things platform, I have the User, the Customer and the Device, all accessing the API endpoint (note: different endpoints for each). The maker which is the User, can give permissions to both Customer and Device which actions can be done by them. I find it messy having 315 permissions in the database. And if we expand, it would be tedious to always create multiple copies of a permission for each auth guard.. ",
    "david-saint": "Thank you for clarifying it out for me \nMost of your documentations are not practical the most practical one is the mediaLibrary one  . I just read the thread again and I would like to apologise if I sounded rude... I have a personality disorder and it affects me at times\nI think your docs are from the point of view of talented coders like yourselves but it doesn't really take into consideration noobs like me and some others \nWhen I read your documentation it's like I'm reading through an api... like a it's just a list of functions and methods and all\nI think you can try to see from the point of view of some of us that are on a deadline and don't have time to go through the whole docs... it should show how to get started quick without having to do too much...\nLike that data are seed was at the bottom of the docs so I'm already confused halfway reading through a bunch of methods I don't need trying to grasp it. ",
    "hosseinnedaee": "thankyou @drbyte\nI need this package beacause I have many roles and permission not just active and inactive but its not enough: for example, user have permission(use this package) to add product but just 3 number(limitation).\nthere is many limitations such as number of products that user can add, number of sub categories and .. so I think is better to save them in database and use laravel Gate logic to authorize. I'm right?. ",
    "aTanCS": "It look like it was not a good idea to merge it with laravel-55 branch. All its commits are in this pull request now. Or am I missing something? It is my first pull request.. ",
    "shankhadevpadam": "i configure mention above but didn't work, so i have configure own my ways like this. In every admin controller.\npublic function __construct()\n{\n      config()->set('auth.defaults.guard', 'admin');\n}\nNow it's work fine for me.. This is my role controller \n```\n<?php\nnamespace App\\Http\\Controllers\\Admin;\nuse App\\Role;\nuse App\\Permission;\nuse App\\Authorizable;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nclass RoleController extends Controller\n{\n    use Authorizable;\npublic function __construct()\n{\n    config()->set('auth.defaults.guard', 'admin');\n}\n\n/**\n * Display a listing of the resource.\n *\n * @return \\Illuminate\\Http\\Response\n */\npublic function index()\n{\n    $title = 'Role';\n    $roles = Role::all();\n    $permissions = Permission::all();\n\n    return view('admin.roles.index', compact('title', 'roles', 'permissions'));\n}\n\npublic function create()\n{\n    $title = 'Role';\n    $permissions = Permission::all();\n\n    return view('admin.roles.create', compact('title', 'permissions'));\n}\n\n/**\n * Store a newly created resource in storage.\n *\n * @param  \\Illuminate\\Http\\Request  $request\n * @return \\Illuminate\\Http\\Response\n */\npublic function store(Request $request)\n{\n    $this->validate($request, [\n            'name' => 'required|unique:roles|max:10',\n            'permission' => 'required'\n        ]);\n\n    Role::create(['guard_name' => 'admin', 'name' => $request->name]);\n\n    foreach (request('permission') as $permission) {\n        $p = Permission::where('id', '=', $permission)->firstOrFail();\n        $role = Role::where('name', '=', request('name'))->first(); \n        $role->givePermissionTo($p);\n    }\n\n    flash('Role created successfully.')->success()->important();\n    return redirect()->route('roles.index');\n}\n\npublic function edit($id)\n{\n    $title = 'Role';\n    $role = Role::findOrFail($id);\n    $has_permission = array_pluck($role->permissions->toArray(), 'name');\n    $permissions = Permission::all();\n    //dd(Permission::all()->groupBy('table_name')->sortBy('table_name'));\n    return view('admin.roles.edit', compact('title', 'role', 'permissions', 'has_permission'));\n}\n\n/**\n * Update the specified resource in storage.\n *\n * @param  \\Illuminate\\Http\\Request  $request\n * @param  int  $id\n * @return \\Illuminate\\Http\\Response\n */\npublic function update(Request $request, $id)\n{\n    if($role = Role::findOrFail($id)) {\n        // admin role has everything\n        if($role->name === 'Admin') {\n            $role->syncPermissions(Permission::all());\n            return redirect()->route('roles.index');\n        }\n        $permissions = $request->permission;\n        $role->syncPermissions($permissions);\n    }\n\n    flash('Role has been updated.')->success()->important();\n    return redirect()->route('roles.index');\n}\n\npublic function destroy($id)\n{\n    Role::findOrFail($id)->delete();\n\n    flash('Role Delete successfully.')->success()->important();\n    return redirect()->route('roles.index');\n}\n\n}\n```. But i have 2 guards one for admin panel and one for front end user. If i didn't load 'auth.defaults.guard' guard in constructor for admin panel then @can gate doesn't work.. The problem is solved after run php artisan config:clear. But this is not the solution, every time i need to run this command after deployment in my production server.. Thanks for your support. . ",
    "irfan88": "i have same issue. after follow above not work't for me.\non debug gate have error \narray:4 [\u25bc\n  \"ability\" => \"view_product-list\"\n  \"result\" => false\n  \"user\" => 1\n  \"arguments\" => \"[]\"\n]\nWhat i do?. @shankhadevpadam. I have same issue, are u has resolve?\ni was googling but not found answer.\nmy error \narray:4 [\u25bc\n  \"ability\" => \"view_roles\"\n  \"result\" => false\n  \"user\" => 1\n  \"arguments\" => \"[]\"\n]. ",
    "codebyray": "I would think the same thing except for the fact I only get that error when installing this package. \nAfter I remove this package, everything works fine. \nNo issues installing other packages at all. . I have not API keys in my .env file for it to interact with. If I remove the package everything works fine:\n```\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\nPackage operations: 0 installs, 0 updates, 1 removal\n  - Removing spatie/laravel-permission (2.5.0)\nWriting lock file\nGenerating optimized autoload files\n\nIlluminate\\Foundation\\ComposerScripts::postAutoloadDump\n@php artisan package:discover\nDiscovered Package: fideloper/proxy\nDiscovered Package: laravel/tinker\nDiscovered Package: owen-it/laravel-auditing\nDiscovered Package: intervention/image\nDiscovered Package: spatie/laravel-medialibrary\nPackage manifest generated successfully.\n```. I did the same with no issue kind of weird.\n\n```\n{\n    \"name\": \"laravel/laravel\",\n    \"description\": \"The Laravel Framework.\",\n    \"keywords\": [\"framework\", \"laravel\"],\n    \"license\": \"MIT\",\n    \"type\": \"project\",\n    \"require\": {\n        \"php\": \">=7.0.0\",\n        \"barryvdh/laravel-debugbar\": \"^2.4\",\n        \"bugsnag/bugsnag-laravel\": \"^2.0\",\n        \"fideloper/proxy\": \"~3.3\",\n        \"laravel/framework\": \"5.5.\",\n        \"laravel/tinker\": \"~1.0\",\n        \"owen-it/laravel-auditing\": \"^4.1\",\n        \"predis/predis\": \"^1.1\",\n        \"spatie/laravel-medialibrary\": \"^6.0.0\",\n        \"spatie/laravel-permission\": \"^2.5\"\n    },\n    \"require-dev\": {\n        \"filp/whoops\": \"~2.0\",\n        \"fzaninotto/faker\": \"~1.4\",\n        \"mockery/mockery\": \"0.9.\",\n        \"phpunit/phpunit\": \"~6.0\"\n    },\n    \"autoload\": {\n        \"classmap\": [\n            \"database\"\n        ],\n        \"psr-4\": {\n            \"Dbn\\\": \"app/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Tests\\\": \"tests/\"\n        }\n    },\n    \"extra\": {\n        \"laravel\": {\n            \"dont-discover\": [\n            ]\n        }\n    },\n    \"scripts\": {\n        \"post-root-package-install\": [\n            \"@php -r \\\"file_exists('.env') || copy('.env.example', '.env');\\\"\"\n        ],\n        \"post-create-project-cmd\": [\n            \"@php artisan key:generate\"\n        ],\n        \"post-autoload-dump\": [\n            \"Illuminate\\Foundation\\ComposerScripts::postAutoloadDump\",\n            \"@php artisan package:discover\"\n        ]\n    },\n    \"config\": {\n        \"preferred-install\": \"dist\",\n        \"sort-packages\": true,\n        \"optimize-autoloader\": true\n    }\n}\n```. It is an issue with bugsnag. I removed that package and the error goes away. The weird part is that when I install other packages this error does not occur. Only when installing this package.. ",
    "Barcelonczyk": "@freekmurze when do you plan to release the new version with this fix?. Thanks :). ",
    "stephenbennett-uk": "Ah! Thank-you so much :)\nI was starting to come to the conclusion it must be something like that and was wondering how that might be configured. I'm a bit of a caching novice. So thank-you very much for this. The problem is solved!. ",
    "amirshawn": "Hi @drbyte \nI have a review form and when it's submitted I'm sending an email to all the admins who have permission to review  it.   It would be nice if we could do something like this:\n$permission = Permission::withName('approve_reviews)->first();\nreturn $permission->users;`\nand have that return all users who either have direct permission or pemission through roles.\n BTW, I've been a long time Zen Cart user  and it's exciting to see you involved  in the Laravel community!. Thank you, I  really appreciate it :)  I'm camping for the weekend but when I get home I'll try it out.  Have a great weekend!. ",
    "inet123": "Just opened a PR #454 to deal with this. my pleasure, thank you for the notes.. ",
    "oknixus": "@drbyte Happy New Year!\nYou mean to replace RoleMiddleware or PermissionMiddleware to auth()->user()->*($role,$guard) in middleware ?\nI don't understand your answer. Could you give a more detailed one ? \nThanks\n. ",
    "elerocks": "Hello,\nI followed your advice @drbyte \nI have two guards (web and api)\nI modified the file PermissionMiddleware.php like this:\n <?php\n\n namespace Spatie\\Permission\\Middlewares;\n\n use Closure;\n use Illuminate\\Support\\Facades\\Auth;\n use Spatie\\Permission\\Exceptions\\UnauthorizedException;\n\n class PermissionMiddleware\n {\n     public function handle($request, Closure $next, $permission, $guard)\n     {\n         if (app('auth')->guest()) {\n             throw UnauthorizedException::notLoggedIn();\n         }\n\n         $permissions = is_array($permission)\n             ? $permission\n             : explode('|', $permission);\n         foreach ($permissions as $permission) {\n             if (app('auth')->user()->hasPermissionTo($permission, $guard)) {\n                 return $next($request);\n             }\n             /* \n             if (app('auth')->user()->can($permission)) {\n                 return $next($request);\n             }*/\n         }\n\n         throw UnauthorizedException::forPermissions($permissions);\n     }\n }\n\nand RoleMiddleware.php similarly.\nThen from routes I can call the laravel-permission like this:\nroutes from api.php:\nRoute::middleware('auth:api', 'permission:get from api,api')->get('/test', function (Request $request) {\n    return json_encode (\"Welcome to REST API, \".Auth::user()->username);\n});\n\nroutes from web.php\nRoute::get('/', function () {\n    return view('/homepage');\n})->name('homepage')->middleware('permission:access homepage,web');\n\nEverything is working great and as expected. My question: is this correct approach? (e.g. am I not slowing down the app?). And silly question, why isn't this already in laravel-permission? How else could I differentiate different permissions for different guards from middleware?\nThanks a lot\n. ",
    "halilcosdu": "Route::middleware('permission:SYSTEM_MANAGEMENT,api')->group(function () {\n    Route::resource('permissions', 'PermissionController');\n});\nGuys I have multiple guards, any idea why it's not working.\n. ",
    "GaryRojas": "@ediblemanager thanks for your comment. Works perfectly :). ",
    "VictorAvelar": "I will say that is not convenient, how are you supposed to remember after a while the ids of all your permissions? Would that represent an extra query each time you like to give someone a new permission?\nIf you use semantic and convenient names as suggested in the README file it is pretty easy to keep things going, but hey that is just me.\nIf all my assumptions are wrong please provide some insights into your specific use case.\nRegards.. ",
    "MrJmpl3": "You can pull this fix ? Or is innecessary?. ",
    "uxweb": "I have the same issue when running my tests.. Hi!\nI just discovered that this issue is related to the time that the PermissionRegistrar is being called when running tests. I still don't know why the database migrations run after the registrar is called.\nI was able to solve this issue by adding this line to the setUp method in my tests:\n```\n    public function setUp()\n    {\n        parent::setUp();\n    $this->app->make(PermissionRegistrar::class)->registerPermissions();\n}\n\n```\nHope this is useful while the issue is solved.. @freekmurze \nI just upgrated to v2.5.4 but the issue is still happening.\nI upgraded to Laravel 5.5 a few hours ago. I guess it has something to do on how migrations are running. I think that migrations are running within a transaction that has isolation from reads, and I guess that's why maybe the registrar is not able to add the permissions to the Gate. I still don't have evidence to prove it, this is just my guess.\nI'll be investigating more.\nThanks. @drbyte \nFor the record, I'm using sqlite :memory: database when running the tests.\nYou are using a file database with permissions and roles already seeded.\nThe registrar is trying to register permissions in the gate before the permissions are actually inserted in the database.\nI think it has to do with the order that service providers are being called?.\nThanks!. ",
    "timothyvictor": "Hello @freekmurze - still getting the same issue with v2.5.4\nThanks @uxweb that certainly does solve the issue in the meantime. \nI'll have a root around myself and see if I can spot anything useful. . ",
    "mostafamaklad": "@BAKTETE \n$this->registerBladeExtensions(); now in the boot. @BAKTETE it is working in the test cases could you check the composer update . Closed because travis-ci didn't run the test cases  . Have Issue with the soft deleting in laravel 5.3. @AlexVanderbist Need your help \nsoft deleting doesn't work properly in Laravel 5.3. you could use this package laravel-permission-mongodb if you are using laravel-mongodb package.. ",
    "Ravensborn": "@drbyte is there any kind of solution?. ",
    "tysonlist": "Awesome! Did i just miss it or is this in the documentation?. Thanks. ",
    "ruverd": "I have more than 30 pages where this could happen so it is really hard to create N roles.\nDo you know another packed where can I do that?. ",
    "PilloryBarnDesign": "These are my packages.\nAll have been installed since the day 5.5 was released as that's when I started this app, the only one that wasn't was Ramsey's UUID which I've just this minute installed. \n```\n\"require\": {\n    \"php\": \">=5.6.4\",\n    \"lab404/laravel-impersonate\": \"^1.2\",\n    \"laravel/framework\": \"5.5.\",\n    \"laravel/tinker\": \"~1.0\",\n    \"ramsey/uuid\": \"^3.7\",\n    \"spatie/laravel-permission\": \"^2.5\",\n    \"uxweb/sweet-alert\": \"^1.4\"\n},\n\"require-dev\": {\n    \"fzaninotto/faker\": \"~1.4\",\n    \"laravel/dusk\": \"^2.0\",\n    \"mockery/mockery\": \"0.9.\",\n    \"phpunit/phpunit\": \"~6.0\"\n},\n````. @drbyte Interesting, I'll take a look. Thank you :). @drbyte tried the fix but no luck (assuming I did it correctly). Still have the same issues. @drbyte doing that and changing the @role to @hasrole in my layout has worked. I also tried setting it back to 2.6.0 and that's worked too. Okay weirdly switching it back to @ role is working now too \ud83e\udd14 Laravel just updated to 5.5.9 as well. And now the whole thing is back working again, even with rolling the impersonate package back to what it was. Madness. Thanks for your help!. ",
    "shirshak55": "hmm are you running on production or development. I guess changing config on production creates such problem.. @freekmurze  Thanks. Its very hard to develop the app for mobile device using this package and that is due to name spacing issue. I guess we can drop guards  so that it will work on both. But we cannot ignore the fact that using guards have some use case. I guess we can decide using guard or not according to null value on table etc..\nAnd I do agree dropping support below laravel 5.5 is good as Laravel 5.5 is LTS. Exactly I also face problem . I wanted to make mobile apps where admin can control many thing. But due to this namespacing issue I also fell in this trap. \nI guess there should be easy way without duplication of such roles and permissions.. yea those additional feature can take this package to another level :) . Is therw any advantage of using id? Although laravel provide such things in\necosystem\nOn Oct 30, 2017 2:53 PM, \"hakimihamdan88\" notifications@github.com wrote:\n\nSupport giving permissions by id number, #450\nhttps://github.com/spatie/laravel-permission/issues/450\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/spatie/laravel-permission/issues/479#issuecomment-340383818,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AHuOYZ8reSWeza0BqPfnwk6DsDp3YTlgks5sxZIBgaJpZM4Pnc7B\n.\n. @drbyte Hi,\n\nwas there any reason for namespacing roles and permissions for API and WEB guards? I think it only creates duplication like I need to have same permissions for API and WEB. And think today most people use SPA for coding so namespacing will be useless .. @drbyte  I guess this package implements wordpress way. But if we implement drupal way than we don't need to worry about database connection for permissions. We store all permissions in a file. As it is in file i guess it will be cached using config:cache artisan command. But the downside is it will change api too much right? \nAnd i guess permissions will not change that much in production.. hmm. Thats really strange as this package has nothing to do with routes. \nCan you give a way to regenerate this issue.. may be config()->set('auth.defaults.guard', 'admin'); creating problem?. many problem seems to happen on production due to config cache etc.. As config is cached your guard may have not been loaded. Please clear config cache and check if its the issue.\n. @shankhadevpadam  you told you use capistrano . You can add that command to clear after each push. \nBut the main thing is its the way laravel works. If you read docs it clearly says after changing conf in production and if you have cached then you will need to clear it.\nbut i am still not sure why route:clear is working for you :(. @AlexVanderbist  is there any reason why route:clear is working for him . I have read this codebase twice still cannot figure out where is that link.. @Pulsahr.\nCan you add php to your path file.\nAnd to your project directory and try to do\nphp artisan vendor:publish --provider=\"Spatie\\Permission\\PermissionServiceProvider\" --tag=\"migrations\"\nand can you confirm if there is that permission service provider on that project > vendor> spatie > permissions.\nit was working for me properly.. but have you cleared config cache. If you have cached the config may be spatie config will not be loaded and it results no migration?. try php artisan config:clear\n. No thats not your fault . Windows is always like that . Sometimes file name problem sometime quote problem etc. Thats why many devs recommend homestead.. ",
    "joselfonseca": "Thank for the reply, I encounter the problem after upgrading to 2.6.0 in the tests for a starter kit i maintain (https://github.com/joselfonseca/laravel-api/) . it was not giving any issues before and when i started working on the 5.5 upgrade i also upgraded to permissions 2.6.0, I was in 2.4\na) Is running the tests so the cache is basically an array\nb) No custom gate is being used, only the API provided by Passport and Laravel.\nc) The only extra package updated is Permissions besides Laravel.\nd) I can't recall any customizations to the package, in fact we use what it offers out of the box.\nLooking at the example you sent me i can't find the scenario I posted here in that repo, if you can point me to a branch or release where i can see that i will be able to compare. However the only thing done is add the permissions middleware to the controller like this:\nphp\n/**\n     * UsersController constructor.\n     *\n     * @param User $model\n     */\n    public function __construct(User $model)\n    {\n        $this->model = $model;\n        $this->middleware('permission:List users')->only('index');\n        $this->middleware('permission:List users')->only('show');\n        $this->middleware('permission:Create users')->only('store');\n        $this->middleware('permission:Update users')->only('update');\n        $this->middleware('permission:Delete users')->only('destroy');\n    }\nAnd the Kernel.php is like this\nphp\n/**\n     * The application's route middleware.\n     *\n     * These middleware may be assigned to groups or used individually.\n     *\n     * @var array\n     */\n    protected $routeMiddleware = [\n        'auth' => \\Illuminate\\Auth\\Middleware\\Authenticate::class,\n        'auth.basic' => \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class,\n        'bindings' => \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n        'can' => \\Illuminate\\Auth\\Middleware\\Authorize::class,\n        'guest' => \\App\\Http\\Middleware\\RedirectIfAuthenticated::class,\n        'throttle' => \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,\n        'role' => \\Spatie\\Permission\\Middlewares\\RoleMiddleware::class,\n        'permission' => \\Spatie\\Permission\\Middlewares\\PermissionMiddleware::class,\n    ];\nif you want to replicate, you can clone the master branch on my starter kit and run vendor/bin/phpunit --filter test_it_can_list_permissions you will see that the test fails for a 403 when it is expecting 200 as the user running the test has the permission for that endpoint via the role. If I add a new middleware and use $user->hasPermissionTo($permission) instead of $user->can($permission) it will pass. \nI can understand if you can't take a look, and i can just use another middleware. I just want to bring this to the radar in case is a bug.\nThanks again. . Also worth mention that if this is by design as the permission by role is not really being registered in the gate but as a relationship in the role (as far as i can tell) then it is fine, I just have to use a different middleware.. I found a solution here https://github.com/spatie/laravel-permission/issues/457\nI added this to the set up $this->app->make(PermissionRegistrar::class)->registerPermissions(); and now it works. Thanks!. ",
    "khaninejad": "But when I add this package it happens\nOn Mon, Sep 25, 2017 at 1:32 PM, Freek Van der Herten \nnotifications@github.com wrote:\n\nThis package does not require an API key. The error is probably\norigination from some other package in your app.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/spatie/laravel-permission/issues/470#issuecomment-331835423,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AEM1FEicxkM33KxSp_vl4eor9ZhAZcK-ks5sl3omgaJpZM4PieeV\n.\n. yes, but it configured and has env key API.\n\nOn Mon, Sep 25, 2017 at 4:38 PM, Chris Brown notifications@github.com\nwrote:\n\nHave you added the Bugsnag package but not configured its API key yet?\n434 https://github.com/spatie/laravel-permission/issues/434\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/spatie/laravel-permission/issues/470#issuecomment-331875313,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AEM1FE2dBCRk7bIWlnYXgO1zF_WOYcPLks5sl6XEgaJpZM4PieeV\n.\n. \n",
    "barryvanveen": "Thanks for thinking with me @drbyte and you're close to an answer. The givePermissionTo() method iterates over all permissions and calls getStoredPermission() individually as you can see in the relevant code:\nhttps://github.com/spatie/laravel-permission/blob/ed4f2180bf93ea948bc9e9ff1878713cb2459d4d/src/Traits/HasPermissions.php#L19-L36\nThis is exactly what struck me as odd, the different behavior for retrieving stored permissions. When you retrieve a single permission it checks for the default guard. If however you retrieve an array of permissions it checks for all guards related to the model.. > Maybe even adding a ApiUser class that simply extends the User class and overwrites guard_name with api. This way getDefaultGuardName() will return the correct guard.\nThis, I think, is the best solution and it works well for me. So, having a seperate Model for each guard is a best practice and makes it easier to use this package. \nAs I re-read the documentation now, it does mention using multiple models and adding the guard_name attribute. But, I think it could be written down in a more direct way, maybe even using a simple example. I'll add my input to #479.\nThank you @drbyte and @AlexVanderbist!. Although I cannot easily estimate the effort of maintaining support for multiple guards, I would consider it a missed opportunity if support is dropped. \nThe Laravel authorization system includes the ability to use multiple guards. Many new applications now include an \"api\" guard (or something similar). Personally, I think the usage of multiple guards is not going to lessen. it might only increase in the future.\nIs there a way to maintain support and still make life easier for users and maintainers of this package? \nFor me the problem with using multiple guards only arose during database seeding and testing. Those are the moments that I work in a \"web-guarded environment\" and want to assign \"api-guarded\" roles and permissions. Maybe the docs could be clearer about these situations. \nIf you try to do this\nphp\n$user = new User();\n$user->name = 'API user';\n$user->save();\n$user->assignRole('MyApiRole');\nand get a RoleDoesNotExist exception, then try this:\n```php\n$role = Role::findByName('MyApiRole', 'api');\n$user = new User();\n$user->name = 'API user';\n$user->save();\n$user->assignRole($role);\n```\nSame thing goes for the PermissionDoesNotExist exception.. @drbyte, thanks for remembering that remark and for asking for my input. It is much appreciated :)\nMy opinion on this has changed since my previous comment. As you mention, checking permissions is done through model policies. So, even if different types of users (API-users vs web-users) require a different set of permissions, these will still be checked using the same policies.\nThe reason I like multiple guards is that you can (try to) completely split both types of users and their associated permissions. This works for the user models (i.e. \\App\\User vs \\App\\ApiUser) and for the roles and permissions, but as you note these permissions will probably still apply to the same domain models, and hence be using the same policies.\nSo, in effect the multiple guard system has only allowed me to split permissions and roles. In our applications roles can be configured using a CMS-like page. API-permissions can be assigned to API-roles and web-permissions to web-roles. API-users can be given API-roles, web-users can be given web-roles. They can't be mixed. This was easier because all necessary information and methods were already available in the package.\nI'd call that a minor advantage if the cost of maintaining such functionality is high. Also, it can be recreated by extending the Role- and Permissions-models. \nBut, and this has not changed, we do use the guard-functionality and would have to find a workaround if you would decide to remove it :)\nHope this helps your discussion. If there is anything I can clarify, please don't hesitate to ask!. @drbyte Users from previous versions already have the correct database information. This means that permissions and roles are linked to a specific guard. What you would lose after upgrading is a way to select a permission or role by its name/id and its guard.\nTo fix that users would have to extend the Permission and Role classes and for example add a local scope to each. Something like this:\nphp\npublic function scopeGuard(Builder $query, string $guard_name)\n{\n    return $query->where('guard_name', $guard_name);\n}\nIn my application the guard-system was used to separate (or namespace if you will) API-users from web-users. Since an API-user can never have web-roles or web-permissions, there is no need for checking guard_names during each request. That is why I wouldn't miss that functionality and no further upgrade actions would be required.\nIt might be interesting to know if other users have assigned data of multiple guards to a single user, because that would lead to a different problem. . I think other methods will benefit from this optimization too.  However, in most cases it will have less of an impact because checking permissions is done more often. At least it will improve consistency throughout the code.\nWill try to update this PR today and change other occurrences of the where methods.. All instances of the Collection::where method have been changed to Collection::filter. What remains are calls to the where method on the query builder, which is unrelated to the performance-issues mentioned in #550.\n@drbyte, could you have another look at this PR?. ",
    "introwit": "@benyanke Hi Ben :) Where are you printing $user->getAllPermissions() ?. @Lawrence-Dawson Hi :) We need to set the $user right? I mean when we do things like $user = Auth::user() we say that use the properties of that authenticated user, so in $user->roles roles will have some user to go and ask to, but in the class when you say $this->roles, it looks for a property/variable called roles on the class. Let me know if this isn't the answer you were looking for :). Thanks @drbyte :). @raftalks Hi :) We have a good documentation around the use of guards with this package here Hope that helps, let me know if that still doesn't solve your problem :). @raftalks so the role root belongs to the guard console but you want to assign that role root to the User and the User belongs to a different guard than console?. @raftalks what I would do in such situation is create different providers for each guard especially when there is authorization to manage too. From the package point of view of assigning roles from a custom guard to a user, it would be nice to have @freekmurze 's thoughts on it :). I would do what @drbyte said :) I think that solves your issue. Reopen if it's still not what you were looking for.. Thanks @drbyte :). ",
    "hakimihamdan88": "Support giving permissions by id number, #450 . @drbyte what I'm trying to do is output permissions on checkbox for every role. But when adding new permission for articles (edit others article) for example, it will be on bottom. As for now, I create another order_by field, so it will be after edit articles.. ",
    "pedzed": "(I wanted to create a new issue for this feature request, but it seems that it is more welcome to be thrown into this issue)\nFeature: wildcard permissions\nCurrent way:\n```php\n$superadmin->givePermissionTo('create clients');\n$superadmin->givePermissionTo('read clients');\n$superadmin->givePermissionTo('update clients');\n$superadmin->givePermissionTo('delete clients');\n$superadmin->givePermissionTo('create campaigns');\n$superadmin->givePermissionTo('read campaigns');\n$superadmin->givePermissionTo('update campaigns');\n$superadmin->givePermissionTo('delete campaigns');\n$developer->givePermissionTo('read clients');\n$developer->givePermissionTo('create campaigns');\n$developer->givePermissionTo('read campaigns');\n$developer->givePermissionTo('update campaigns');\n$developer->givePermissionTo('delete campaigns');\n```\nNew wildcard way:\n```php\n$superadmin->givePermissionTo('*');\n$developer->givePermissionTo('read clients');\n$developer->givePermissionTo('* campaigns');\n```\nWildcards should be able to be used alone, before, after or in the middle of a permission.\nphp\n$role->givePermissionTo('*'); // alone\n$role->givePermissionTo('* users'); // before\n$role->givePermissionTo('read *'); // after\n$role->givePermissionTo('create * users'); // middle\nPerhaps for consistency, wildcard roles should be added too, but I cannot quickly think of a real world example of why one would want it.. ~@benabbottnz~ @benyanke  I stumbled upon it upon seeding the database as well. In that case, it should apply to roles and other tables as well.\nMy opinion about your example however, is that it is bad practice to use another argument to implement this. I would create another method, which is better for those nifty IDE features like autocomplete and error checking. Something like this, but perhaps with a better name:\nphp\nPermission::createIdempotently(['name' => 'permission.namespace.name.here');\nOr perhaps switch the way how it works and use your feature request as default, but leave room for those who want to catch errors on such occasions.\nphp\nPermission::createOrFail(['name' => 'permission.namespace.name.here');\n// Eventually throws PermissionAlreadyExistsException. >createOrFail works although sounds like an exception should be fired (IMO).\nThank you for confirming what I already wrote :)\n(Read the comment in the example code, two comment posts above). >I would love to see a \"key / tenant\" column\nI am strongly against this one, because this package is laravel-permissions. It is completely unrelated to tenants.\nDon't get me wrong, I use tenants as well for some of my projects, but my point is that the package should focus on what the package is for.\nIf you want an extra column, just write your own class and inherit from Role and Permission.. ",
    "hrabbit": "createOrFail works although sounds like an exception should be fired (IMO).\ncreateOrSkip sounds closer to what I would want to be achieved (of course, this is all semantics).\n. @pedzed \n\nThank you for confirming what I already wrote :)\n\nSorry about that, was just purely stating an observation from my own view.\nAt present, to get around this behaviour, I use the following (which also matches your Permission::createIdempotently method, but leverages existing Eloquent methods).\n$permission = Permission::firstOrCreate(['name' => 'my_permission', 'guard_name' => 'my_guard]);\nI realise this is a feature/future request thread but I can't help but feel that there is a little re-invention around this area. (Of course, I could have missed the point somewhere in here).. Not directly in the document but is in the source.\n$superAdmin = Role::findByName('superAdmin');\ndd($superAdmin->users);\nOf course, that's a Collection so things like...\n$superAdmin->users->each(function($user)\n{\n    dump($user->name);\n});\nBehave nicely too. :). I might be missing the overall point here but I think what you are asking for is effectively an extra field attached to the role or permission (or maybe even model_has_roles, model_has_permissions or role_has_permissions) tables in order to define a different \"location\" for each role (or permission). I think you could do that easily just by creating a new role, permission, model_has_roles, model_has_permissions or role_has_permissions table model and extending the current one (Remember to update the config). Afterwards, add your morph details (relationships) to this model.\nAs an example, I do something similar but apply a \"Flags\" table to the roles and permission models in order to add miscellaneous information. (In this case, it's used for a friendly description).\nBelow is an \"untested\" snippet from a morph that connects to my Roles (It's actually a trait in my system so can be applied to anything) but I've extracted it directly into the model for visual ease.\n```\n<?php\nnamespace App\\Models;\nclass Role extends \\Spatie\\Permission\\Models\\Role\n{\n    public static function boot()\n    {\n        static::addGlobalScope('Location', function ($builder) {\n            $builder->with('Location');\n        });\n    }\npublic function Location()\n{\n    return $this->morphMany('App\\Models\\Location', 'location');\n}\n\n}\n```\nPS. I know I could use more \"use\" options here but I like to see the full namespaces. (Personal preference).\nApologise if that is way off the mark from what you are trying to produce.. @llhilton, I'm not sure you can over-write a method from within a trait as the trait itself is treated as part of the calling class directly. (This can cause naming conflicts)\nAs for your situation, I was thinking a little further on it, and if you wanted to have a particular role specific to a particular location, you could probably create a new migration that adds the extra location_id column to the model_has_roles table (That would allow any model to have a location), then create your own model_has_roles class that extends the Spatie model_has_roles model and include the relationship itself. \nSide effects of this are that every model in the roles table has a location, even if you didn't want it to. Again, not sure if that affects your situation or not.\nBut as @drbyte mentioned, without very clear understandings of how your locations <> roles work, we would be stumbling around in the dark.\n. @llhilton Okay, only blurbed over this so far but my first thought is not to mess with the models from the laravel-permission package itself (will hurt you with upgrades), instead just create a migration that adds the extra columns to the existing database tables.\nI'm trying to get a sense of your security model, and I think I can see where you are going with it. I do question what happens when you want to a allow a role to have access to something more finite than a class though. (Alas, not the conversation at hand, just an observation).\nActually, I think we might be going about this all wrong. The package already has model_has_permission and model_has_roles which would allow a single user to be related to the model itself.\n```\nsp1@localhost:sp1> select * from model_has_roles;\n+-----------+------------+-----------------+\n|   role_id |   model_id | model_type      |\n|-----------+------------+-----------------|\n|         1 |          1 | App\\Models\\User |\n|         3 |          1 | App\\Models\\User |\n|        13 |          1 | App\\Models\\User |\n|        11 |          1 | App\\Models\\User |\n|         7 |          1 | App\\Models\\User |\n|        11 |          5 | App\\Models\\News |\n|         7 |          5 | App\\Models\\News |\n|         9 |          5 | App\\Models\\News |\n+-----------+------------+-----------------+\n```\nWith that logic, a user (App\\Model\\User::find(1) in this instance) is attached to the role_id of X.\nAnd... this is the part you want App\\Models\\News also has rights which can be used to restrict access from other models (Roles) based on permissions.\nExample of the news model with roles\n<?php\nnamespace App\\Models;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass News extends Model\n{\n    use \\Spatie\\Permission\\Traits\\HasRoles;\n    protected $table = 'news';\n    protected $guard_name = 'web';\n}. @llhilton I think you are right about looking at this too much and over thinking it. I think what you really want is just a pivot from your user table to your project table with a role_id column.\nAssigning a user to a project is then as easy as selecting the role you want assigned and linking the 3 places together. As for checking permissions on your model, you would need to write a couple of methods to check permissions themselves but you might be able to deal with that in a global scope in the project model itself. If you want blade directive then you can add them also.\nSorry it took me this look to understand your requirement, every time I read the details I would confuddle (real word right?? :wink:) myself.. ",
    "IlCallo": "My enhancement, restrict roles and permissions given to a certain model to only work with a second given model #292, was rejected some time ago because not needed and API breaking, but I saw someone else had my same use case (#576).\nCan it be inserted in v3?\nIt works by adding a nullableMorph field on roles and permissions pivot tables, all methods signature have been changed to take an array instead of a ...$args because the second parameter would be an instance of the model to which the role/permission has been restricted to.\nIf no restrictable method is specified, the package behaves like it does now. This is something I implemented a while ago for myself but wasn't accepted by the maintainers #292\nI'll propose to add this in v3 version of the package, fell free to copy the code or take some insights. ",
    "Epistol": "A request : making an artisan command for joining role & permission, as we do to create a role or a permission. . For testing purpose, being able to add and remove permission join without having to write the entire system for it (I suppose it could be something people would need). ",
    "Neve12ende12": "I would love to see a \"key / tenant\" column added to roles and permissions so that you can store multiple roles with the same name & guard in the same table, but that kind of dream is probably just pie in the sky.\nExample:\nGuard  Key             Permission\n    Web     Project X    Create User\n    Web     Project Y    Create User. ",
    "greggilbert": "I was just read #660, and it seems like a deeper version of that is something that could be built into the next version. For example, perhaps adding another layer of polymorphism on model_has_permissions to have target_type and target_type, and then be able to assign permissions to a specific target for a specific user (or whatever).. ",
    "sixlive": "Looking at this today, I'm personally for \n\ndrop guard support but keep Permissions and Roles polymorphic relations. This means any model can have roles and permissions but there's no extra functionality related to guards.\n\nI think this would simplify things a lot.. ",
    "bjuppa": "This is a very interesting discussion, thanks for taking your time to investigate the question of multiple guards.\nMyself, I've only used multiple guards to separate admin users for the backend from web users. In addition to the standard web guard I've had an \"admin\" guard that also uses an eloquent user provider, but with an admin user model.. I'm not sure this solves your problem, but to display permission and role names in a more user friendly way in the interface, perhaps you could pass names through the Laravel translation functions, like\nphp\n__($role->name)\nand define the display string you want in the language files?\nhttps://laravel.com/docs/5.5/localization#using-translation-strings-as-keys. Sure @drbyte !\nI have a situation where I've required spatie/laravel-permission in a Laravel app and I've published the migrations for the package once, run the migrations, and commit migrations to version control. Everything is fine at this point!\nLater I require another package that also publishes its migrations under the tag migrations so I run php artisan vendor:publish --tag=migrations ...and that's when a second migration from laravel-permission is published in the app's migrations directory, along with the new package's migrations.\nIf I'm diligent at that point, I'll notice and just remove the new \"duplicate\" migration file, but if I'm not and I run php artisan migrate I get an error about tables already existing.\nSo the problem will never reach production, which is great, but it may be confusing that the flow differs from other publishing scenarios, like assets or views, where the filename is fixed, not containing a timestamp. One expects artisan's publish command to skip any files that already exists with a warning (and you can overwrite them with the --force flag if you really want to).\nI guess the class-checking if-statement in the service provider was originally meant for avoiding these duplicates. I wonder if earlier versions of Laravel did load migration classes into the global namespace, perhaps at one time it was working as intended?. Impressive work @drbyte, very elegant!. ",
    "viteksafronov": "It is a very important issue. Our application is running in Docker and we do artisan optimize on docker image build. We obviously don't have a database connection on building machine so there are frustrating errors at this step. Maybe we may not register the permissions service provider in console mode? Is it really needed?. ",
    "saqueib": "Thanks for pointing this out, I will keep it in mind for permission testing, \nBut I am only testing for user roles. I have added above setUp code but it still doesn't work.\nhere how test looks like now\n```php\nclass RoleTest extends TestCase\n{\n    use RefreshDatabase;\npublic function setUp()\n{\n    parent::setUp();\n\n    Role::create(['name' => 'Admin']);\n    Role::create(['name' => 'User']);\n\n    $this->app->make(PermissionRegistrar::class)->registerPermissions();\n}\n\n/**\n* user can have roles assigned\n*\n* @test\n*/\nfunction user_can_have_roles_assigned()\n{\n    $user = factory(User::class)->create();\n\n    $this->assertFalse($user->hasRole('Admin'));\n    $user->assignRole('Admin');\n    $this->assertTrue($user->hasRole('Admin'));\n\n    $this->assertFalse($user->hasRole('User'));\n    $user->assignRole('User');\n    $this->assertTrue($user->hasRole('User'));\n\n    $this->assertTrue($user->hasAllRoles('User', 'Admin'));\n}\n\n}\n``. @drbyte Issue was with $user already loaded so it was unable to fetch the assigned role, callingfresh()` on eloquent model before assertion fixed it.  \n```php\nfunction user_can_have_roles_assigned()\n    {\n        $user = factory(User::class)->create();\n    $this->assertFalse($user->fresh()->hasRole('Admin'));\n    $user->assignRole('Admin');\n    $this->assertTrue($user->hasRole('Admin'));\n\n    $this->assertFalse($user->fresh()->hasRole('User'));\n    $user->assignRole('User');\n    $this->assertTrue($user->fresh()->hasRole('User'));\n\n    $this->assertTrue($user->fresh()->hasAllRoles('User', 'Admin'));\n}\n\n```. ",
    "ionesculiviucristian": "Thanks for the reply. It would seem that is the most suitable approach here.. ",
    "dashracer": "I think there is something missing on the doc.\nWe need to update user model too.  \n```\nclass User extends Authenticatable\n{\n    ....\n// Add this 3 lines to override laravel default setting\n    protected $primaryKey = 'id';\n    public $incrementing = false;\n    protected $keyType = 'string';\n...\n\n}\n```. ",
    "dariuszjastrzebski": "@dashracer in my case it doesn't work with $incrementing = false . Only $keyType resolved the issue. Are you sure that $incrementing should be set to false according to UUID?. @benyanke it's weird. Can you look at my issue: #824 ?. ",
    "lloricode": "\ud83d\udc4d\ud83d\ude0a\ud83d\ude0a\ud83d\ude0a\nOn Oct 6, 2017 4:48 PM, \"Freek Van der Herten\" notifications@github.com\nwrote:\n\nThanks!\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/spatie/laravel-permission/pull/490#issuecomment-334696526,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AH3n0Du2C9xv34w7xTIWoIrIhc1snUoWks5spelagaJpZM4Pv6Tq\n.\n. @drbyte, is this ok now? . @AlexVanderbist, great! :) . @AlexVanderbist, maybe i need to add unit test for this.. ive push this because unit test is passed, ive nitice also that calling helper rediect inside trait has a problem..\n\nsorry i just push.. because i need to sleep from work.. \ud83d\ude11 \ni will try to fix this \ud83d\ude0a . i try make a custome class exception\nit works fine also setting up url on added config index. but in unit test\nit gives error\n. yes, i think it will resolve all of this.\nso maybe i can remove the new index on config.. then remove also a redirec\njust replace all with custome exception?\nso user can handle it all even adding a redirect inside laravel exception\nhandler?, if exception is equal of new spatie permission exception.\nis this ok? if it is i will push later \ud83d\ude0a\nOn Oct 20, 2017 6:58 AM, \"Freek Van der Herten\" notifications@github.com\nwrote:\n\nReplacing aborting by a configurable redirect is a nice improvement, but I\nthink we can do even better.\nIf we replace the abort by throwing a custom exception than users can just\nadd their wanted behaviour in Laravel's exception handler.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/spatie/laravel-permission/pull/517#issuecomment-338060814,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AH3n0GXBOfgrABhFjNnDCeXP59axBItGks5st9QZgaJpZM4P9omR\n.\n. @AlexVanderbist  great, so can we close this now?\nthis is resolve with https://github.com/spatie/laravel-permission/pull/526#pullrequestreview-70871106. :) welcome. hi @AlexVanderbist @freekmurze @drbyte ,\nis when we pull this on packagist? imean in composer update\ni made a enhance on this https://github.com/rappasoft/laravel-5-boilerplate/pull/894 \n\nThanks :). Thanks @drbyte  :). I see @AlexVanderbist , :+1:  Thanks. we can add this as blade directive?\n```php\n   Blade::directive('hasPermissionTo', function ($permission) {\n        if (!auth()->check()) {\n            return false;\n        }\n        return auth()->user()->hasPermissionTo($permission);\n    });\n\n// @hasPermissionTo('view backend')\n```. aw waits i will fix this. HI @drbyte,\nYes it already has, I made this PR to also optimize migration according to code implementation.. > Particularly when there are future plans to drop guard-specific db storage.\n@drbyte you right thanks :+1: . hmmm, so we need to remove log_registration_exception?. @AlexVanderbist , yes much better that, i will push another commit later :). @AlexVanderbist, we can, but it is easy to retrive a url with a route name because it is already decleared on route/web.php, to make easy manage url's.\nwhat you think?. but it is ok to set as what you want. :+1: . @AlexVanderbist, yes i will :). @AlexVanderbist, is the function name is good?. much better your idea @AlexVanderbist :+1: . much better :). ",
    "pauls6832": "How did you fix this? I have the same problem. The database exists but I have not created the tables. When I try to run any artisan commands I get an error that the permissions table does not exist.\n```\n$ artisan\n[Illuminate\\Database\\QueryException]                                                                                                    \n  SQLSTATE[42S02]: Base table or view not found: 1146 Table 'testdb.permissions' doesn't exist (SQL: select name from permissions \n  order by name asc)                                                                                                                    \n```                         \n. ",
    "tarampampam": "Maked #494 PR for fixing this issue. If we have any User model, on rollbacking migration \"create_users_table\" postges (as I think) try to delete any rows inside it. So, on deleting \"User\" model laravel try to call \"bootHasRoles\" method inside trait \"HasRoles\", but tables with roles and repmissions already deleted, and we have this exception.\np.s. Sorry for my english. Yes, I know.\nSorry dudes, it was my mistake - in some old migration on down() method I tried to remove some user model with User::find()->forceDelete(). So, now:\nphp\nDB::table(User::getTableName())\n            ->where('login', '=', 'some_user_name')\n            ->delete();\nAnd all works fine.. @freekmurze | @AlexVanderbist - can you check, apply PR and release updated version?. ",
    "umefarooq": "one more question, if i want to update laravel/permission from old to latest version how will be relation migration.. ",
    "williamoliveira": "Got it, thank you guys. Some additional data from Xdebug\n(times in ms; calls ordered by own time; total request time at the bottom of the images)\nThe code as it is\n\nWith memoization of PermissionRegistrar::getPermissions\n\nWith memoization of  PermissionRegistrar::getPermissions + memoization of HasPermissions::hasPermissionTo\n\nI am using file cache store, but I am pretty sure this problem exists with all other cache stores except array. Memory wise, I actually saw a decrease from 25mb to 11mb at this page I tested (reported by Laravel Debugbar).\n732 doesn't seems to solve the problem fully as it still calls the cache directly, and consequentially unserialize, on every permission check. But it sure would make a big diference as it just unserializes one permission each time instead of the whole thing.\nA solution I found to this 'unserialize every time' problem, without any change to PermissionRegistrar, was to make a custom cache store that uses both array store and the default cache store (file in my case), the array store acts basically as a cache to the cache :P. @mailnike you just place it in the register method of a Service Provider, AppServiceProvider will do. ",
    "Kyslik": "This should be documented, I just spent hour debugging why I get web guard instead of api...\nLine from the docs (quoted below) is lie misleading:\n\nBy default the default guard (config('auth.defaults.guard')) will be used as the guard for new permissions and roles. \n. @AlexVanderbist hey, I am non-native english speaker, and I can not imagine formulating a good sentence. Will this do?\nBy default the default guard is a guard which is first defined in auth.guards config array.\n\n\ud83d\ude06  three times guard term is used, sure its confusing.... This is still not documented I think.. @drbyte see changes; thanks for helping me out to formulate this properly.. ",
    "tranvanthuc": "@AlexVanderbist wow, I fixed it, Thank you so much <3 . ",
    "enghelewa": "I am using laravel 5.5 without any extra packages other that \"laravel-permission\".\nI only changes these lines in migrations:\n$table->morphs('user');\n$table->primary(['permission_id', 'user_id', 'user_type']);\nAnd I did not use morphToMany. But I used my own Role and Permission model and make it extends Spatie models. Is there any thing I should take care of when do that?\nAnother thing to mention is that I tried to set App\\User as a default value from mysql, But when I call $user->assignRole('master'); the user_id in the inserted row of role_users is 0. I found the problem, its because I have this function in my User model.\npublic function roles(){\n        return $this->belongsToMany(Role::class,'role_users','user_id','role_id');\n    }\nI thought that the trait HasRoles will take care of this relation. So I removed it and it worked fin. But still the model_id stored as 0. The zero problem was solved by public $incrementing = false; for User model.\nI think all these problems are made by me \ud83e\udd47 . @drbyte thank you. #275 solved my problem. ",
    "devcircus": "First time using the package. Love it so far. Learned that you can pass parameters to the boot method of a service provider....who knew??? Thanks for the merge!. ",
    "jonlod": "I tested the code and it seems to be working fine. Thanks a lot! . ",
    "pulkitarunsharma": "In production state. ",
    "sadalsuud": "I have the same problem ... not work . I don't change guards. Login with email and password. Any idea? ... What part? ... Here I use for menu for users\n @hasanyrole('Promotor pedagogico'|'Coordinador de seguimiento')\n<li class=\"menu-item\">\n<a class=\"menu-link\" href=\"#\">\n<span class=\"icon ti-user\"></span>\n<span class=\"title\">Registro de Usuarios</span>\n<span class=\"arrow\"></span>\n</a>\n<ul class=\"menu-submenu\">\n@role('Promotor pedagogico')\n<li class=\"menu-item\">\n<a class=\"menu-link\" href=\"{{ url('/agente-educativa/create') }}\">\n<span class=\"dot\"></span>\n<span class=\"title\">Registro agente educativa</span>\n</a>\n</li>\n@endrole\n@role('Coordinador de seguimiento')\n<li class=\"menu-item active\">\n<a class=\"menu-link\" href=\"{{ url('/usuarios') }}\">\n<span class=\"dot\"></span>\n<span class=\"title\">Registro Usuarios</span>\n</a>\n</li>\n@endrole\n</ul>\n</li>\n@endhasanyrole. humm ... I already understand my mistake... thanks! It is work again :D . ",
    "Stahoo": "thank you very much. You have confirmed me that it is not implemented (I think it should be obvious;)). Now :). I will write to the authors. For now, I extends CrudController the role checking with big note TODO. When I get an answer I will share it here. Thank you again. @AlexVanderbist \nI try this solution, but i have problems. I try this today again.\nThx. ",
    "wreighsantos": "Ok, it worked. But why can't I use the can function with the direct permission I just gave to a user? Noting that I've already done $user = $user->fresh();.\nI can see the direct permission when calling getAllPermissions() on the user, but when I use $user->can('direct permission'), it always return false.. ",
    "andyjh07": "You could create a UserObserver and do something like:\npublic function created(User $user)\n{\n    $user->assignRole('Partner');\n}\nI wouldn't let the user/user create method determine any new roles. I would assume you'd have some security issues if users can create their own roles. ",
    "robertnicjoo": "@andyjh07 No I just needed to create the role for first time in case admin forget to create and be checked for next time, but is ok i just assign existing one.\n\nThank you for respond.. @hamidafghan It returns empty\n\nhere is my function\nphp\n$roles = Role::get();\nQ. why I get all roles instead of only roles assigned to users?\nA. because I might need to add or remove roles to user.. @drbyte  works perfectly, thank you.. @drbyte hi, thanks for the answer it's working perfectly, as following this question: how can i except this role users from total users? is there a way to do so?\nI have\nphp\n$users = User::withTrashed()->orderby('id', 'desc')->get(); //getting everyone including admins\n$admins = User::role('Admin')->get();  //getting admins only\n\nWhat I want is now that I have admins separately , in $users getting all users except admins.\n\nany idea?. Does this get second value? like we filter admin and editors from users both?\n. ",
    "johannesschobel": "Hey @AlexVanderbist \nthank you very much for your response. Before your package, i used to rely on romanbican/roles (see this package), which supported this kind of level.\nWouldn't adding the level at first be a good idea? There is no need (at least for now) to add the hasAtLeastRoleLevel() method as well.. \nI would provide a PR if you would accept it.. . Hey @drbyte , thanks for pointing this out. However, switching to another package might not be possible for me at the moment. \nTherefore, I was suggesting to implement it in this package here, as - at least I think - this would be a valuable contribution... hey @AlexVanderbist and @drbyte , just wanted to drop by and ask about any updates on this!? What do you think about the proposal?\nCheers from Germany. Woooooooooooooooha, that is awesome news @AlexVanderbist \nThen let's hope they agree on implementing it!. thanks for the positive feedback for my proposal! Glad you like the idea.. Looking forward for your implementation!. so its no then, @freekmurze ? \ud83d\ude1e \nYou don't know, if \"a lot of users don't need this kind of functionality\", because the users don't have it.. maybe they would use it , if they were able to use it \"out of the box\"...\nBoth, @AlexVanderbist and @drbyte like the idea as well and could see a need for it.. This would, in fact, allow to use the package in much more \"lightweight\" version, in fact, because for easy setups you could completely \"remove\" (i.e., not adding) Permissions. You may be able to do this entirely by role-level instead... oh boys.. if i would have bet money on this.. . @drbyte : i implemented it as i initially described in my post.. i added a level param to the role and added some specific check functions via Traits to the User model.. Pretty straight forward i guess - nothing fancy.. but for my use-case it was sufficient..\nall the best. ",
    "lmartins": "While I appreciate the authors point on this one, I do think a role level is kinda essential if you are also building the UI to manage users. \nIf you have an application with roles like Super Admin, Admin and Editor, and you want to give admins the ability to edit other users, it would make sense to have a built in way to allow that without risking Admins creating or giving themselves Super Admin credentials.. ",
    "robinsonryan": "lmartins is exactly the problem I'm running into. I have users that can have the roles owner, admin, manager, and user. Owners can create users with any role. Admins can create users with any role except owner. Managers can create managers and users. It would be nice to have a level column so that I can pull all Roles where (Role->level) <= (User->Role->level) for creating forms and validating that users aren't assigning roles they shouldn't. I'm going to implement this in my app, but just wanted to add my thoughts since I really love the way this package works.. I didn't do anything fancy.  I just created a migration to add a \"level\" column to the 'roles' table.  The, I extended you 'Role' model like so\n```\nnamespace App\\Models;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Spatie\\Permission\\Models\\Role as BaseRole;\nuse Illuminate\\Support\\Facades\\DB;\nclass Role extends BaseRole\n{\n    public static function createInsert($attributes) {\n    if(!$attributes['level']) $attributes['level'] = 0;\n\n    DB::table('Roles')->where('level', '>=', $attributes['level'])->increment('level');\n\n    return static::create($attributes);\n}\n\npublic function scopeByLevel($query, $level) {\n    return $query->where('level', '<=', $level);\n}\n\n}\n```\nThe createInsert method is used when creating a new Role.  It will increase the level of all the other roles above it. Deleting a role will leave a gap in the sequence, but won't have negative effects on the hierarchy. I will probably eventually write a delete method that handles removing the gap, but it works as is.\nThen, when I am creating a new user, I populate the roles field on the 'create' view with this data: \n$roles = Role::byLevel(Auth::user()->role()->level)->get();\nI am also working on adding code to my validator that checks that the 'level' key doesn't contain a level higher than what the current user is allowed to pass, but the above code has things working for now and the validator is pretty far down the list at this point.\nThis probably isn't the most flexible solution, but it got the job done for me.. BTW - my solution above does not work with different guards and that is one of my favorite parts of this package. I'm sure it can be made to work with multiple guards, I just haven't had time to write and test an implementation.\nSimply adding an additional where clause in createInsert where('guard', '=', $attributes['guard'] may be enough.. ",
    "NickGiacopuzzi": "@robinsonryan this is the exact issue I have as well. I need a hierarchy for users. \n. ",
    "timothymarois": "I would also like to see a \"level\" system implemented. This would allow you to make sure users are not allowed to modify other users of the same or higher level than them. RIght now the roles are generic, there isn't a higher order of them, it doesnt understand if \"Manager\" is higher than \"Staff\". ",
    "Pulsahr": "Yes, I followed the install instructions step by step. Here is my command log:\n\nphp.exe C:\\pathtoproject\\artisan vendor:publish --provider=\\\"Spatie\\Permission\\PermissionServiceProvider\\\" --tag=\\\"migrations\\\"\nPublishing complete.\nProcess finished with exit code 0 at 15:30:25.\nExecution time: 1\u00a0250 ms.\nphp.exe C:\\pathtoproject\\artisan migrate\nNothing to migrate.\n\n. I will try this again tomorrow on a temporary branch, in a raw console instead of phpstorm console. I'll keep you updated.. I tried to reproduce the error, here is the list of command line entered in the Windows powershell with console output, and edit actions:\ncomposer require spatie/laravel-permission\n\nUsing version ^2.7 for spatie/laravel-permission\n./composer.json has been updated\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\nPackage operations: 0 installs, 1 update, 0 removals\n  - Updating spatie/laravel-permission (2.7.1 => 2.7.3): Downloading (100%)\nWriting lock file\nGenerating optimized autoload files\n> Illuminate\\Foundation\\ComposerScripts::postUpdate\n\nEdited app.php file to add Spatie\\Permission\\PermissionServiceProvider::class, in providers.\nphp artisan vendor:publish --provider=\"Spatie\\Permission\\PermissionServiceProvider\" --tag=\"migrations\"\n\nCopied File [\\vendor\\spatie\\laravel-permission\\database\\migrations\\create_permission_tables.php.stub] To [\\database\\migrations\\2017_10_24_142942_create_permission_tables.php]\nPublishing complete.\n\nphp artisan migrate\nAaaaand, everything went fine. I don't know what didn't work first, but it seems everything is ok right now, and I checked, I have the same version on the branch that had the mistake and the test I made.\nSorry for the false alarm.. ",
    "grantholle": "Thanks @drbyte \nIt's sort of like a nested role/permission. So I would use general site roles/permissions, but also individual roles/permissions per article.\nI think you're on the right track with using gates and policies in some sort of combination. Thanks again. There's another popular roles/permissions package called Bouncer, which has this functionality of restricting permissions to a model and specific model instance.. ",
    "zarya": "Tnx i figured most of those parts out my only issue is that i was looking for a option to have many authors with different permissions for a single instance of Post. Sorry looks to be duplicate of #520 . ",
    "ImadSalimi": "I doubt you still need an answer to this, but this might help someone who stumbles on this issue in the future.\nA smart solution to accomplish what you want would be: if for example I want a user to have permission edit articles, but only on article with ID 45, then the permission name should be a concatenation of these two; i.e: edit articles 45.\nI'm looking to implement this package myself in a personal project and thought of the same issue, but only now did I figure out the way and I'm sharing it with you :) . @tylerwiegand I wouldn't say it slows the queries since the package caches the roles & permissions, but it's a bit excessive in terms of how many rows you would have in those tables.. ",
    "tylerwiegand": "Struggling with this concept as well, @ImadSalimi have you found that your method doesn't yield slow queries for permission checks? I'm concerned that 4-5 of these in one page will drastically slow down load times.... ",
    "xcarlos": "I'm using version 2.7 of this package and laravel 5.4.\nI didn't change anything from the configuration file:\n`<?php\nreturn [\n'models' => [\n\n    /*\n     * When using the \"HasRoles\" trait from this package, we need to know which\n     * Eloquent model should be used to retrieve your permissions. Of course, it\n     * is often just the \"Permission\" model but you may use whatever you like.\n     *\n     * The model you want to use as a Permission model needs to implement the\n     * `Spatie\\Permission\\Contracts\\Permission` contract.\n     */\n\n    'permission' => Spatie\\Permission\\Models\\Permission::class,\n\n    /*\n     * When using the \"HasRoles\" trait from this package, we need to know which\n     * Eloquent model should be used to retrieve your roles. Of course, it\n     * is often just the \"Role\" model but you may use whatever you like.\n     *\n     * The model you want to use as a Role model needs to implement the\n     * `Spatie\\Permission\\Contracts\\Role` contract.\n     */\n\n    'role' => Spatie\\Permission\\Models\\Role::class,\n\n],\n\n'table_names' => [\n\n    /*\n     * When using the \"HasRoles\" trait from this package, we need to know which\n     * table should be used to retrieve your roles. We have chosen a basic\n     * default value but you may easily change it to any table you like.\n     */\n\n    'roles' => 'roles',\n\n    /*\n     * When using the \"HasRoles\" trait from this package, we need to know which\n     * table should be used to retrieve your permissions. We have chosen a basic\n     * default value but you may easily change it to any table you like.\n     */\n\n    'permissions' => 'permissions',\n\n    /*\n     * When using the \"HasRoles\" trait from this package, we need to know which\n     * table should be used to retrieve your models permissions. We have chosen a\n     * basic default value but you may easily change it to any table you like.\n     */\n\n    'model_has_permissions' => 'model_has_permissions',\n\n    /*\n     * When using the \"HasRoles\" trait from this package, we need to know which\n     * table should be used to retrieve your models roles. We have chosen a\n     * basic default value but you may easily change it to any table you like.\n     */\n\n    'model_has_roles' => 'model_has_roles',\n\n    /*\n     * When using the \"HasRoles\" trait from this package, we need to know which\n     * table should be used to retrieve your roles permissions. We have chosen a\n     * basic default value but you may easily change it to any table you like.\n     */\n\n    'role_has_permissions' => 'role_has_permissions',\n],\n\n/*\n * By default all permissions will be cached for 24 hours unless a permission or\n * role is updated. Then the cache will be flushed immediately.\n */\n\n'cache_expiration_time' => 60 * 24,\n\n/*\n * By default we'll make an entry in the application log when the permissions\n * could not be loaded. Normally this only occurs while installing the packages.\n *\n * If for some reason you want to disable that logging, set this value to false.\n */\n\n'log_registration_exception' => true,\n\n];\n`\nI'm not using any other package to provide this functionality.\nThis is my User model:\n`<?php\nnamespace App\\Models;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nuse Spatie\\Permission\\Traits\\HasRoles;\nclass User extends Authenticatable\n{\n    use HasRoles;\n/**\n * The attributes that are mass assignable.\n *\n * @var array\n */\nprotected $fillable = [\n    'name', 'email', 'password',\n];\n\n/**\n * The attributes that should be hidden for arrays.\n *\n * @var array\n */\nprotected $hidden = [\n    'password', 'remember_token',\n];\n\npublic function branch()\n{\n    return $this->belongsTo('App\\Models\\Branches');\n}\n\n}\n. This is the line that is causing the problem$per_found = $role->hasPermissionTo($perm->name);`. Hey drbyte, thank you for you time. I was able to trace the issue.\nThe problem was that my model is called \"Roles\" which is extending the package's \"Role\" model, it that model the relationship with the permission table is set using:\npublic function permissions(): BelongsToMany\n    {\n        return $this->belongsToMany(\n            config('permission.models.permission'),\n            config('permission.table_names.role_has_permissions')\n        );\n    }\nThe belongsToMany function tries to figure out the name of the foreign key by using the name of the model, and since the model is \"Roles\" that is why uses roles_id as the foreign key.\nThe solution is just to pass the name of the foreign key:\npublic function permissions(): BelongsToMany\n    {\n        return $this->belongsToMany(\n            config('permission.models.permission'),\n            config('permission.table_names.role_has_permissions'),\n        'role_id'\n        );\n    }. ",
    "holymp2006": "Never mind, I solved this.\n```\n public function show(Role $role, $role_name)\n    {\n        try {\n            if ($role = $role->findByName($role_name)) {\n                $permissions = $role->permissions()->get();\n            return $this->response->array(compact('role', 'permissions'));\n        }\n    } catch (Exception $e) {\n        throw new NotFoundHttpException('Role not found');\n    }\n}\n\n```. ",
    "blancomaberino": "It seems it was an issue with config cache. It was caching User Model and, because of that, it was throwing the error.. ",
    "roblesterjr04": "It looks like it was a permissions issue on my server. The errors in the console are not helpful enough. Thanks. We can close this.. ",
    "omar10594": "I'm having the same problem.\nChange to config_path i think is a good idea.\nAnd if you are using lumen, you could use https://github.com/irazasyed/larasupport\n~~you should change databasePath to database_path too.~~. ",
    "elceka": "Closed, problem on the code of implementation after refactoring.. ",
    "swat199538": "sorry i use Collection. I'm sorry I forgot.. Because of my background to the management of these rights and role, but I was using Chinese, I can not directly show these permissions and role values, the user will feel strange, so I had to create a new table to do these permissions and roles of the Chinese show that if you can support the alias native so tell me about the demand will be easier to use.. ",
    "omenejoseph": "how was this issue resolved?. ",
    "nikklass": "i used  groups to refer to same thing as teams.. Ok. I was looking for a situation where i can assign roles/ permissions to an individual user? Or if needed also assign roles/permissions to a group, like u just said. Do i have to implement the group association myself? And if so, do i have to assign the HasRoles trait to both group and user models?. Ok. Thats fine. my initial question was based on teams. I wanted a scenario where i have teams. Each team has users in them. A user can belong to many teams. The user will have different permissions based on which team(s) they belong to. When logged in, the user can browse each team they belong to, and perform CRUD actions as allowed in the allocated permissions. How wud i tackle that with spatie?. i think laratrust is the package to solve all these. Thanks.. ",
    "alexbowers": "@nikklass It does support groups. I've done it that way.\nI've built it so that a user is part of a group, and a group has many users, with a User and a Group model.\nOn the Group model, I've put the HasRoles trait.\nFrom there, it works exactly as it normally would.. You can do it where you can assign to both.\nThe way I have it is thetrait is on the group, and there is a relationship between the user and the group. Then I assign a role to the group, and a user belongs to a group.\nThen, when doing my checks i jsut get the group that the user belongs to and check it that way.\nI have yet to find a way to check what roles a user has without using the group relationship.. Yeah i've done it with local query scopes, but unfortunately, that doesn't let me use Scout to search (that im aware of).\nThanks though. Any idea when V3 will be worked on, and is there a feature list?\nI'd like to contribute to that if able.. ",
    "xtrasmal": "@freekmurze Hoi Freek, how have you been? \nI needed to check for routes that did not have 'role' or 'permission' middleware yet. All our routes need the proper permissions or roles and so I've created these commands to give me a list of those that do not have role/permission middleware.\nI thought I'd share, cause the might be folks out there that have the same use-case.. ",
    "tomlankhorst": "Why only add numeric syncs for roles, not permissions? \n(Willing to add this). ",
    "andrubeldie": "in order to test what is slow in the process, I used a console command like this:\nphp\n    public function handle()\n    {\n        Auth::loginUsingId(SOME_VALID_USER_ID);\n        for ($i=0; $i<100; $i++){\n            $time_start = microtime(true);\n            auth()->user()->can('some_existent_permission');\n            $time_end = microtime(true);\n            $t = $time_end - $time_start;\n            $time[] = $t;\n        }\n        dd($time, array_sum($time));\n    }. lovely!\nI would also strongly recommend use ->filter() instead of ->where() on collections (i.e. findByName method of Permission::class) as is 10-15 times faster.\n```php\n    public function handle()\n    {\n        $collection_size = 1000;\n        $faker = Faker::create();\n        for ($i=0; $i < $collection_size; $i++) {\n            $a[] = ['firstname' => $faker->firstNameMale, 'lastname' => $faker->lastName];\n        }\n        $a[] = ['firstname' => 'John', 'lastname' => 'Doe'];\n        $c = collect($a);\n    $iterations = 1000;\n    $tstartwhere = microtime(true);\n    for($i=0; $i < $iterations; $i++){\n        $c->where('firstname', 'John')->where('lastname', 'Doe');\n    }\n    $tendwhere = microtime(true);\n    $twhere = $tendwhere - $tstartwhere;\n    $tstartfilter = microtime(true);\n    for($i=0; $i < $iterations; $i++){\n        $c->filter(function($value, $key){\n            return $value['firstname'] == 'John' && $value['lastname'] == 'Doe';\n        });\n    }\n    $tendfilter = microtime(true);\n    $tfilter = $tendfilter - $tstartfilter;\n\n    dd($twhere, $tfilter);\n}\n\n```. @thibaultlavoisey seems to be still there ...\nhttps://github.com/spatie/laravel-permission/blob/4d47ef1644ed451f1ea99d1c44443a3ad9bacfd4/src/Models/Permission.php#L87. @thibaultlavoisey: arf! it's all yours, go for it. :). ",
    "thibaultlavoisey": "Hello @AlexVanderbist,\nIs this issue fixed in the latest version? Our use case is the same as @andrubeldie and we have an overhead of 200% :/\nThank you!. @andrubeldie Arf! :/\n@AlexVanderbist @freekmurze Is it possible to reopen this issue? Can we help you with a PR to fix this bug ASAP? \nThank you!. @andrubeldie Do you want to make the PR as you're the first person that has reported this issue?. ",
    "cosecantt": "I think you need a report_role table between them with report_id and role_id fields as many to many relationship. Which means report may belong to many roles or a role may have many reports. Once you know the role_id or name (e.g id of CEO) you can retreive those reports that belongs to CEO:\n$role = App\\Role::where('name', 'CEO')->get();\nforeach ($role->reports as $report) {\n    //\n}\nThat way you can only retrieve and show the corresponding data to the related roles.. ",
    "naknode": "Yeah, a pivot table. Am I using that term correctly? Exactly what I was thinking. Roles can have many reports to view and reports can have many roles to allow it.. I was able to get it once I did a full read-through the documents you just listed hours after I posted that comment! Thank you nonetheless. Great library!. ",
    "lparede": "@AlexVanderbist \nThank you for your reply, but that solution didn't work. I still got the same message; \"[Spatie\\Permission\\Exceptions\\PermissionAlreadyExists] A access-users permission already exists for guard web.\". This is the code I'm using on seed file:\n```php\n        Schema::disableForeignKeyConstraints();\n        DB::table('permissions')->truncate();\n        Schema::enableForeignKeyConstraints();\n    app(PermissionRegistrar::class)->forgetCachedPermissions();\n\n    // Reset cached roles and permissions\n    app()['cache']->forget('spatie.permission.cache');\n\n    ////////// Create permissions //////////\n    $permissions = [];\n\n    // Users\n    $permissionGroup = PermissionGroup::create(['readable_name' => 'Users']);\n\n    Permission::create(['group_id' => $permissionGroup->id, 'name' => 'access-users', 'readable_name' => 'Access users']);\n    $permissions[] = 'access-users';\n\n    Permission::create(['group_id' => $permissionGroup->id, 'name' => 'create-users', 'readable_name' => 'Create users']);\n    $permissions[] = 'create-users';\n\n    Permission::create(['group_id' => $permissionGroup->id, 'name' => 'edit-users', 'readable_name' => 'Edit users']);\n    $permissions[] = 'edit-users';\n\n    Permission::create(['group_id' => $permissionGroup->id, 'name' => 'delete-users', 'readable_name' => 'Delete users']);\n    $permissions[] = 'delete-users';\n\n    Permission::create(['group_id' => $permissionGroup->id, 'name' => 'restore-users', 'readable_name' => 'Restore users']);\n    $permissions[] = 'restore-users';\n\n    Permission::create(['group_id' => $permissionGroup->id, 'name' => 'access-profile', 'readable_name' => 'Access profile']);\n    $permissions[] = 'access-profile';\n\n    Permission::create(['group_id' => $permissionGroup->id, 'name' => 'edit-profile', 'readable_name' => 'Edit profile']);\n    $permissions[] = 'edit-profile';\n\n    ////////// Create roles and assign existing permissions //////////\n    $role = Role::create(['name' => 'administrator', 'readable_name' => 'Administrator']);\n    $role->syncPermissions($permissions);\n\n```. Any news on this subject?. @drbyte No changes made to the model. I just added two more fields to the migration.\nAnyway, I solved the problem.\nWhile logged to the server as a normal user, this problem as started after a few migrations resets and seeding.\nI try to log as root, run migration and seed and it worked!\nAfter that, I logged again as a normal user, run migrations again and everything went ok.\nSo, problem solved! :)\nThank's for the supports, guys. . ",
    "ThibaultModat": "i've got the same issue. You don't need to do the migration as root, just the cache:forget as root, then the migration (and/or seed) with your regular user.\n. ",
    "kavience": "@ThibaultModat  Thank you ! On my macbook air ,it's works.you are great !!!. ",
    "ChadLRoss": "I see some of the issues are failing with styleci most of these are not my issues.  I am happy to fix off all of them in a different PR if you'd like.. Hey Alex you could merge this into the main branch everything is backwards compatible and you don't need to know about the tenant stuff at all.  I purposely create a new HasTenant class, a user could easily  continue to use HasRoles and never see or use any of the Tenant information.  I also created the migration separately to abstract it one step further.\nFurthermore a user could run the migration, use HasTenants and still use the package as it is today.  I did not override any of the previous functionally, in fact in the application I am using it for I uses both the tenant and the non-tenant calls throughout.. I am going to decline this PR and submit another, there were some PSR-2 failures and a test was failing after I squashed.  Let me fix and re-submit.. I am not sure why builds are failing with --prefer-lowest it I shows that you're requiring illuminate/database as 5.4 and it appear that setKeyType was available in that version.\nhttps://github.com/illuminate/database/blob/5.4/Eloquent/Model.php#L1168\nThoughts?. Great feedback.  moving it to a trait makes perfect sense.  Thanks for checking into the failing tests for me, I'll get that updated as well.  Should have time next week to knock those out.  Thanks for the response. ",
    "sagearslan": "This is perfect, I've been sweating creating a custom implementation. Any ETA for merging into master?. ",
    "curtisblackwell": "Ah, right. Duh. Thanks.. ",
    "yamenarahman": "Okay, Glad to be a part of the next release. . Thanks @drbyte . . ",
    "coatesjonathan": "Hey Alex,\nThis is the controller method I'm trying to use it in:\n```\npublic function index(Request $request)\n    {\n        $user = $request->user();\n    dd( $user->hasRole('admin') );\n\n    $jobs = \n        DB::table('jobs')\n        ->where('user_id', $user->id)\n        ->orderBy('created_at', 'desc')\n        ->paginate(5);\n\n    $applications = \n        DB::table('applications')\n         ->where('user_id', $user->id)\n         ->orderBy('created_at', 'desc')\n         ->paginate(5);\n\n        return view('auth/dashboard/profile', compact('jobs', 'applications'));\n}\n\n```. Thanks @drbyte any idea where I should start looking?. Thanks @AlexVanderbist It was a very simple issue, I have the wrong model in the provider section of Config/auth.php..\nIt needed to be:\n\n'model' => App\\User::class,. \n",
    "Albertcuicas": "Using L5.1.* with laravel-permission & laravel-authorize\nI have deleted the contracts:\nuse Illuminate\\Contracts\\Auth\\Access\\Authorizable as AuthorizableContract;\nuse Illuminate\\Contracts\\Auth\\CanResetPassword as CanResetPasswordContract;\nfrom my Usuario Model and it worked.\nI hope this could be helpful for someone. ",
    "piep14": "Bonjour,\nJ'ai le m\u00eame souci et je ne sais pas ce que je dois modifier. Dans mon fichier de config/permission.php, j'ai bien les nouvelles donn\u00e9es : \n'model_has_roles' => 'model_has_roles',\n'model_has_permissions' => 'model_has_permissions',\n'role_has_permissions' => 'role_has_permissions',\nL'erreur est la suivante : \nNext Illuminate\\Database\\QueryException: SQLSTATE[42S02]: Base table or view not found: 1146 Table 'hps_bdd.user_has_roles' doesn't exist (SQL: selectnamefromrolesinner joinuser_has_rolesonroles.id=user_has_roles.role_idwhereuser_has_roles.user_id= 302) in ..../vendor/laravel/framework/src/Illuminate/Database/Connection.php:647\nMerci de votre aide.\n. Pourtant \u00e7a marche sur mon local. Je ne comprend pas ce que je dois faire pour que \u00e7a fonctionne correctement :(. ",
    "benjamincrozat": "Ok nevermind, I messed up my Exceptions Handler.\n```php\n// app/Exceptions/Handler.php\n/\n * Render an exception into an HTTP response.\n \n * @param  \\Illuminate\\Http\\Request  $request\n * @param  \\Exception  $e\n * @return \\Illuminate\\Http\\Response\n /\npublic function render($request, Exception $e)\n{\n    if (!method_exists($e, 'getStatusCode') || !$request->wantsJson()) {\n        return parent::render($request, $e);\n    }\nreturn response()->json([\n    'error' => $e->getStatusCode(),\n    'message' => $e->getMessage(),\n], $e->getStatusCode());\n\n}\n```. Great, thank you!. Yep, that's fixed in my PR. You should always register config files before the provider.. Just updated the documentation. Indeed, I forgot to mention to register the middlewares. My bad.. This package is probably not responsible for this. For now, I don't see anything in the code that enforces the Memcached driver.. De rien !\nWe could link to https://github.com/laravel/lumen-framework/blob/5.5/config/auth.php too. :). Done. :). Fixed. :). Well, I'm not sure. If you take a look at the original file, you'll see the same thing: https://github.com/laravel/lumen-framework/blob/5.5/config/auth.php Maybe I'm missing something, so that's why I kept it.. Yep.. ",
    "raftalks": "@introwit the documentation only shows how to create roles and permissions under multiple guards, but one can't assign a user with a role or permission giving a a specific guard.. When seeding a user, I am creating the roles under certain guard and don't see any way I can assign the roles for a user instance created when seeding.\nWhen I do try to assign a role, it seems this library is looking for the roles under default guard. This doesn't work well if I have different guards for different resources of an API, where users are not strictly set for a specific guard\n. @introwit In my current project, I am assuming I can use this library to set roles and permissions by different guards set to different resources. Lets say, I am simply using the same User Providers under each of the custom guards set on my Laravel project.\n```\n'guards' => [\n        'web' => [\n            'driver' => 'session',\n            'provider' => 'users',\n        ],\n    'api' => [\n        'driver' => 'passport',\n        'provider' => 'users',\n    ],\n    'console' => [\n        'driver' => 'passport',\n        'provider' => 'users',\n    ],\n\n  // ... some more custom guards\n],\n\n```\nand then I have route groups with middleware set to work with auth:console, auth:api, etc.\nTell me if this approach is wrong for using custom guard roles and permissions, the idea I had in mind was that I can set separate set of roles and permissions based on which guard the user have used to access the resource.\nThe issue I am facing is at the time of assigning Roles from a custom guard to a generated user account, such as when using Seeder, it is trying to find the role from the default guard which is web on my application.\nam I doing this wrong?. ",
    "c00p3r": "Hi everyone!\nStumbled upon same stuff as @raftalks.\nDon't wanna write my own user provider (that's not simple you know...)\nAnd I just can't use another model (because project is already running live)\nSo any other suggestions? (besides writing own method instead \"assignRole\" and \"getStoredRole\")\n@the94air could you share your solution, please?\n@raftalks have you come up with smthn?. Here's what I've came up with (don't throw rocks on me):\n````\npublic function assignRole($roles, string $guard = null)\n    {\n        $roles = \\is_string($roles) ? [$roles] : $roles;\n        $guard = $guard ? : $this->getDefaultGuardName();\n    $roles = collect($roles)\n        ->flatten()\n        ->map(function ($role) use ($guard) {\n            return $this->getStoredRole($role, $guard);\n        })\n        ->each(function ($role) {\n            $this->ensureModelSharesGuard($role);\n        })\n        ->all();\n\n    $this->roles()->saveMany($roles);\n\n    $this->forgetCachedPermissions();\n\n    return $this;\n}\n\nprotected function getStoredRole($role, string $guard): Role\n{\n    if (\\is_string($role)) {\n        return app(Role::class)->findByName($role, $guard);\n    }\n\n    return $role;\n}\n\nUsage:\n$user->assignRole('admin'); // guard will be default\n$user->assignRole('admin', 'api'); // explcitly setting the guard\n```\nAnd it kinda works...\nWaiting for your comments.... @the94air  so you're using only one guard 'admin'?\nWhat I'm after is some universal/general solution.some code was here`\nbut I researched and figured out that this thing is done by Laravel auth core already\n. @the94air if you use only one guard then you're kinda off-topic here. Because the issue is in that when you use 2 or more guards in your app, you can't assign roles for other guards except default one. I believe I'll make a PR and see what core dev team say. @AlexVanderbist u said: \n\nYou could solve this by using different models\n\nso I'll need 2 separate DB tables (like api_users, web_users)?. @doghap you are right\nbut I solved only the issue with 'assigning' role to guard\nNOT checking it via middleware\nIt is impossible to check role with specific guard in middlewares\nBUT it is possible to do that inside your controller methods\nso this solution might help a bit to someone\n. @doghap making separate models (providers) for each guard is another solution too. I think this should be closed\nEspecially after reading https://github.com/spatie/laravel-permission/issues/479. ",
    "doghap": "i have the same issure here. but add a new function $user->assignRole('admin', 'api'); is not a good solution, because u will meet another problem: middleware. the permission middleware uses the function registerPermissions() in PermissionRegistrar.php. u cant  pass your guard name to that function (i think its impossible), so it will use the default guard too. what you need todo is set table, primaryKey attributes and set the foreignkeys to user_id in your relationship functions. just like this.\n ```\nclass User extends Authenticatable\n{\nuse HasApiTokens, HasRoles;\n\nprotected $table = 'users';\n\nprotected $primaryKey = 'id';\n\npublic function merchant() {\n    return $this->hasOne(Merchant::class, 'user_id');\n}\n\n}\nand extend user model:\nclass MerchantUser extends User {\n    protected $guard_name = 'merchant';\n}\nyou maybe want to set your guard's provider's model to MerchantUser in auth.php.. ",
    "artissant": "Hi, nice one for looking over it, I've pushed those tweaks up now.. ",
    "llhilton": "@hrabbit, that's along the lines of what I was thinking. I haven't done any customizing of packages in this way, so I wasn't sure if it was possible or how to go about it. (Always something new to learn!) :) I'm actually thinking of doing this in a couple of different applications. One would be a rework of stuff I've done before, but another would be a new use (whose requirements are less explicitly stated than I might like!) \nThanks for your help!. So for the traits, I could make a trait that uses the package traits and just over-write any of the functions I need to?. So, this is the migration I would need to do what I want\nhttps://pastebin.com/Pae9puVs\nA role or permission might have a class that it would be restricted to. Then, the model_has_role and model_has_permission would need to be \"restricted\" to an instance of that class via the \"restrict_to\" morphs. \nTo implement this, though, most of the functions that would need to be updated appear to be in the HasRole trait, where I'd need to check not only the permission itself but also the restrict_to morphs. \nFor example, we might have a role of admin that has the restrict_to_class of \"App\\Models\\Project.\" Then, when a user is assigned that role, an instance of the Project class has to be assigned as well. So then, that user might be an admin for project \"divers\" but not for project \"scaffolding.\" So when checking if the user can do something, I would need to check not only the permission but that the model_has_role has the right instance of the project. But, most of the methods that do that in the package appear to be on traits or in other places I'm not so clear on how to tinker with. \nSome things I'm thinking of:\n\n\nPulling the restrict_to morphs up to the role level. So, you could have a role that's admin for the divers project and a role that's admin for the scaffolding project, and maybe another admin for a different project as well. I'm not 100% sure that will help much. For example, the scopeRole in the HasRole trait would need to be updated to also include the restrict_to morph checks. \n\n\nDitch the package, keep the migration set-up, but just do the checks via the Laravel policy stuff. Because I've done this way before, I'm more comfortable with it, but that might not mean it's the best approach. For me, it would probably be faster to set up, but I'm not sure about maintaining it and for the other dev to get on board with. \n\n\nMake my own package building off of this package. (This is probably the most terrifying option to me, because I've not done it before.) :)\n\n\nAny thoughts or suggestions or questions welcome. . So, replace News with Projects. We have coordinators and dispatchers on each project, and on each project, those roles would have different permissions. For example, a coordinator might be able to view, approve and reject an application, but a dispatcher can only view them on one project. But on another project, a coordinator can view, approve, and reject, and a dispatcher can, as well.\nSo a project can't have permissions by itself via model_has_permission, because they need to be different depending on the role, but the role can't just have permissions by itself via role_has_permission, because they need to be different depending on the project. \nThe more I chew on this, the more I think it will just make sense to add a project_id to the roles table. That will be needed to create and differentiate the role (ie project A admin vs project B admin). But then they're just different roles, even if they're both called \"admin.\" Then the user is assigned to a particular role, and the package will work as expected. \nSo, erm, I may have totally over-thought this before. As is my usual MO. :D Now to see how the implementation of this will look!. Thanks everybody for the help on this! Looks like I've got it working as needed, so I'm going to close the issue. . ",
    "mohamednagy": "ok, done :). ",
    "syedabuthahirm": "Here is my implementation.\n```php\n    /\n     * Check the permission has corresponding policy callback\n     \n     * @param string $ability\n     * @return mixed\n     /\n    public function checkPolicyMethod($ability) {\n        foreach( $this->gate->policies() as $model => $policy ) {\n            if( method_exists( $policy,$ability ) ) {\n                return $policy;\n            }\n        }\n        return false;\n    }\npublic function registerPermissions(): bool\n{\n   // new one \n   // it uses the Gate core define method to register all of my permissoins to respective policies.\n    foreach($this->getPermissions() as $permission) {\n        $ability = $permission->name;\n        // here we check the policy method \n        if( $policy = $this->checkPolicyMethod( $ability ) ) {\n            $this->gate->define( $ability, $policy . '@' . $ability );\n        } else { // default callback \n            $this->gate->define( $ability, function(Authenticatable $user) use($ability){\n                return $user->hasPermissionTo($ability) ?: null;\n            });\n        }\n    }\n\n   // old code\n    // $this->gate->before(function (Authenticatable $user, string $ability) {\n    //     try {\n    //         if (method_exists($user, 'hasPermissionTo')) {\n    //             return $user->hasPermissionTo($ability) ?: null;\n    //         }\n    //     } catch (PermissionDoesNotExist $e) {\n    //     }\n    // });\n\n    return true;\n}\n\n``. **Edited**\nWe have opportunity to add multiple callbacks but unfortunately loop terminate when any of our callbacks return true. by default ourhasPermission()method return true so loop doesn't check any other callbacks.\ncheck out thecallBeforeCallbacks()function [Here](https://github.com/laravel/framework/blob/09126e4f39d1c28b2e0499491066c32e1bd9107f/src/Illuminate/Auth/Access/Gate.php#L349).. If i use different permission name it's possible. but i think i need to remember their corresponding permission name over all time likeedit_projectspermission refer to my own callbackupdateinProjectPolicy`.\nMaybe we can allow user to extend their permissions by providing simple configuration something like this\nIn permissions config file\nphp\n'custom_callbacks' => [\n    'edit_projects'     => '\\App\\Policy\\ProjectPolicy@update',\n    'delete_projects' => '\\App\\Policy\\ProjectPolicy@delete'\n];\nIn PermissionRegistrar.php\nphp\npublic function registerPermissions(): bool\n    {\n       $customCallbacks = config('permission.custom_callbacks');\n        $this->gate->before(function (Authenticatable $user, string $ability) {\n            try {\n                // return null immediately for allowing to perform custom callbacks\n                if ( in_array( array_keys( $ability ), $customCallbacks  ) {\n                     return null; \n                }\n                if (method_exists($user, 'hasPermissionTo')) {\n                    return $user->hasPermissionTo($ability) ?: null;\n                }\n            } catch (PermissionDoesNotExist $e) {\n            }\n        });\n        // register our custom callbacks.\n        foreach($customCallbacks as $ability => $policyCallback) {\n             $this->gate->define( $ability , $policyCallback  );\n        }\n        return true;\n    }. Add with('roles') in your code like below\nphp\n$users = User::with('roles')\n                        ->where('username', 'like', \"%$search%\")\n                        ->orWhere('email', 'like', \"%$search%\")\n                        ->selectRaw($selects)\n                        ->orderBy($field, $sort)\n                        ->paginate($perpage, ['*'], 'page', $page);\n. ",
    "LastDragon-ru": "For laravel 5.5.. but it has one difference from current behavior:\n Current: If hasPermissionTo() == false, callback will return null => gate/policy will called\n* New:\n  * If hasPermissionTo() == false callback will return false => gate/policy will not called \n  *  If hasPermissionTo() == true you will can use standard gate/policy to addittion checks\n  * Permission name must be like my-permission-name, and it will be mapped to MyPolicy::myPermissionName()\n```php\n    public function registerPermissions(): bool {\n        $this->gate->before(function (Authenticatable $user, string $ability, array $arguments) {\n            try {\n                if (method_exists($user, 'hasPermissionTo')) {\n                    // SEE Illuminate\\Auth\\Access\\Gate::formatAbilityToMethod($ability)\n                    $method        = strpos($ability, '-') !== false\n                        ? Str::camel($ability)\n                        : $ability;\n                    $policy        = isset($arguments[0])\n                        ? $this->gate->getPolicyFor($arguments[0])\n                        : null;\n                    $hasGate       = $this->gate->has($ability);\n                    $hasPolicy     = $policy && method_exists($policy, $method);\n                    $hasPermission = $user->hasPermissionTo($ability);\n                return $hasPermission\n                    ? ($hasGate || $hasPolicy ? null : true)\n                    : false;\n            }\n        } catch (PermissionDoesNotExist $e) {\n        }\n    });\n\n    return true;\n}\n\n```. ",
    "dflow": "php artisan vendor:publish --provider=\"Spatie\\Permission\\PermissionServiceProvider\" --tag=\"migrations\"\nno other output,\nthis is not a fresh install of Laravel, but never used roles or permissions. ",
    "Bsheghembe": "I did php artisan config:cache\nAnd It worked. ",
    "Develeapment": "Ok that might be my misinterpretation, thanks for clarifying! . ",
    "samfrjn11": "@AlexVanderbist what's the purpose of only caching a collection of all permissions? Could you give me an example where it shows the advantage of the caching you're talking about?. What's the value of your name column in your permissions table?. Yes, but do you have a record in that table where name is exactly product.update?. Only thing I can think of in your case, is that it's looking for a permission under a different guard\nare all your guards on 'web'? and in your config/auth.php defaults => guard = web?. laravel-permission registers your permission in the Laravel Gates, but with \nGate::before(function ($user, $ability) {\nreturn $user->hasRole('Admin#' . $user->business_id) ? true : null;\n});\nyou basically say: \"if the user has the Admin#BUSINESS_ID role, grant access to everything and don't do any further permission checks\"\nSo if you'd $user->can('kill a bug') it will ALWAYS return true, because your before gate already has granted permission.\nBUT:\nIf you use the laravel-permission methods like $user->hasPermission(), laravel-permission will fetch  all the permission for this particular user from the database.\nSo if you have no database relation between the user and the permission or relation between a user with a role (where the role has a relation with the permission) it will return false.. So in your example:\nauth()->user()->hasAnyPermission(['some.permission']) returns false because the user is probably not associated with this permission in any way\nauth()->user()->can('some.permissions') returns true because the user has been granted access via the Gate::before because he has the role Admin#BUSINESS_ID. > If you want an \"Admin\" role to respond true to all permissions, without needing to assign all those permissions to a role, you can use Laravel's\nThat is actually correct.. In case you use that Gate::before and it returns true, it will return true for any can() without having to assign any permission to a user.. In your case you check if the user has the role with $user->hasRole('Admin#' . $user->business_id), but you could perfectly do $user->id == 1 to give a user the permission to can() everything. ",
    "Audit-a-la-Carte": "Hi @AlexVanderbist no specific reason, just noticed a request for every call. If your website has heavy load, you'd like to reduce the amount of queries in general. Caching the permissions per user for just 1 min could save a lot ;). ",
    "iiDestiny": "I use Laravel 5.3 and V1 branch, after I set up the permissions of the role, I try to edit the permissions of a role. After editing, the permission detection method can () failed. After I cleared redis, I checked success. So I think the editing permission 'redis` inside the data did not change successfully.. ",
    "kwen8": "maybe you are using different guard, can you show your config/auth.php?. I have read the source code, i found that in HasPermission.php in line 117\n```php\nprotected function getDefaultGuardName(): string\n    {\n        $default = config('auth.defaults.guard');\n    return $this->getGuardNames()->first() ?: $default;\n}\n\n```\nI think it's a bug because when i use Role('admin') which guard is api, it always use web guard\nso i see auth.php \nphp\n    'guards' => [\n        'web' => [\n            'driver' => 'session',\n            'provider' => 'users',\n        ],\n        'api' => [\n            'driver' => 'jwt',\n            'provider' => 'users',\n        ],\n    ],\nso when i try getDefaultGuardName, i will always get web guard because it's in first position, so i try \nphp\n    'guards' => [\n        'api' => [\n            'driver' => 'jwt',\n            'provider' => 'users',\n        ],\n        'web' => [\n            'driver' => 'session',\n            'provider' => 'users',\n        ],\n    ],\nthen it fix my problem.\ni think it's a bug. ",
    "jacktyler2318": "Hi kwen8,\nThank you for your response. I am only using web guard. Anyway, I have fixed by reinstalling laravel again. It looks like a cache issue that does not clear even if I cleared it. \nWe can close this thread now and thanks again for your time.. ",
    "startupengine": "I too just ran into this issue on Laravel 5.5. Trying to use this package on both api and web guards, but the check always returns results for the web guard, even when 'api' is specified like so:\n$role->hasPermissionTo('browse feeds', 'web')\nI noticed this was happening only with permissions I added via GUI, and found that I was able to work around it by adding  Artisan::call('cache:clear'); in the controller after saving a new permission to the DB. . ",
    "steveleblanc": "I was able to fix mine by deleting the users in the database then registering a new admin user again. ",
    "javiertoledos": "I got the same bug as @kwen8. I'm using laravel 5.6 with JWT and api guard. . ",
    "lithium-li": "i got the same bug as @kwen8 too. i set guard name in App/User then it fix my problem.\nphp\nclass User extends Authenticatable\n{\n    protected $guard_name = 'api';\n    ...\n}. ",
    "bostonmacosx": "OK thanks. \nSo I have the User model but I also have a UserSetting model which contains extra information about the user. \nCould you enlighten me as how to get back the combined data from both models and then look up what role the User has. I'm just not making the connection between putting the three of these together.\nI thought ::find would return a model and not a query builder instance.\n. Ok so no way have I been able to return the model object....\n$user = \\App\\User::where('id','=',\\Auth::id());\nor $user = \\Auth::user();\nor anything else I use doesn't return a $user which I can use\n\\Log::info('Userinfo:'.$user->getRoleNames());\n\nto get the role of the user.\nnope...\nCall to undefined method Illuminate\\Database\\Query\\Builder::getRoleNames()\nCan anyone enlighten me on how to do this... very frustrating.. Did this method not exist in the 1 branch? only in the 2?. ",
    "promatik": "Just for future reference, I was having issues with querying user roles, and the problem was I had 2 different User Models, my \\App\\Admin\\User Model extended the base \\App\\User Model, the model_type stored in the user_has_roles table was the child, and I was trying to access it via the parent Model.\nLong story short, make sure you're using the right model_type \ud83d\udc4d . ",
    "flashadvocate": "Seems like it'd be useful for debugging if it was included in the output. ",
    "Jigsaw5279": "Resolved in #629 . Wouldn't it make sense to pass down the array instead of converting it to a string? Or at least store them within the exception, so you can decide what to do with them yourself (instead of having to parse them from the string again..). Added PR #629 which does exactly what I described. Sure, solving my own problems here :P. ",
    "maxca": "Thank you.. ",
    "vpratfr": "Looks like a pretty good way to do it. Even though I find it a little too verbose.\nMaybe having a PermissionMigration class with some helper methods would make that nicer to use.\nSomething like\n$this->appendRolePermissions([\n    'role1' => ['p1', 'p2', ], // Update role 1 and add those permissions\n    'role2' => ['p1', 'p4', ], // Update role 2 and add those permissions\n    'role3' => ['p7', 'p3', ], // Create role 3 and add those permissions\n]);\nThanks for the starting point. That will cover the most usual use-case which is to append new permissions to existing roles.. Yep. Got the same kind of issue in https://github.com/spatie/laravel-model-status/issues/39 too ;). Will do when I get some time.. Done ;). A better check would be if (Uuid::isValid($role))\nWould be nice to be able to have a PK name uuid instead of id too.. I had a quick look while doing the other PR, but that is clearly another story :) \nOne would need:\n\nAbility to provide custom PK name\nClean way of integrating the UUID generation code \nChecking all queries which are currently done on the model class, with the hardcoded id field which is supposed to be the model PK\n\nCurrently slightly out of time for that. But I will consider having a look when I get some time.\nOur current application is using regular IDs for roles/permissions. And on the user side, we only refer to names (never IDs), hence the switch to IDs for those 2 models is not critical to us for now.. README should be fine now. No, sorry, that was an attempt to make the other column configurable too, but Laravel will not allow a custom type column name on MorphToMany relationships.\nHence I reverted the change in the code. But forgot to do it in the docs.. ",
    "nenads": "`<?php\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Spatie\\Permission\\Models\\Role;\nuse Spatie\\Permission\\Models\\Permission;\nclass RolesAndPermissionsMigrate extends Migration\n{\n    /\n     * Run the migrations.\n     \n     * @return void\n     /\n    public function up()\n    {\n      app()[\\Spatie\\Permission\\PermissionRegistrar::class]->forgetCachedPermissions();\n  foreach ($this->permissions as $permission) {\n     Permission::create(['name' => $permission]);\n  }\n\n  foreach ($this->roles as $role_up) {\n     $role = Role::create(['name' => $role_up]);\n\n     foreach ($this->rolePermissions($role_up) as $role_permissions) {\n       $role->givePermissionTo($role_permissions);\n     }\n  }\n}\n\n/**\n * Reverse the migrations.\n *\n * @return void\n */\npublic function down()\n{\n  foreach ($this->roles as $role_down) {\n    $role = Role::findByName($role_down);\n\n    foreach ($this->rolePermissions($role_down) as $role_permissions) {\n      $role->revokePermissionTo($role_permissions);\n    }\n\n    $role->delete();\n  }\n\n  foreach ($this->permissions as $permission_down) {\n    $permission = Permission::findByName($permission_down);\n    $permission->delete();\n  }\n\n  app()[\\Spatie\\Permission\\PermissionRegistrar::class]->forgetCachedPermissions();\n\n}\n\nprivate $permissions = [\n                        'blog edit',\n                       ];\n\nprivate $roles       = [\n                        'super-admin',\n                        'admin',\n                       ];\n\nprivate function rolePermissions($role){\n\n  $role_permissions = [\n    'super-admin' => ['blog edit'],\n    'admin' => ['blog edit'],\n  ];\n\n  return (isset($role_permissions[$role]))? $role_permissions[$role] : [];\n}\n\n}\n?>\n`. ",
    "tripex": "Thanks dr byte.\nActually I had tried to select the user this way: $user = App\\User::where('id',1)->get();\nAnd then it throwed an error, but your suggestion got it all to work. \ud83d\udc4d . ",
    "judgej": "@tripex just for info, get() would return a collection of one user. You needed to have used first(). The App may also have needed a back-slaseh profix () but I'm not sure what namespace tinker runs in, so maybe not.. ",
    "traceyjas": "@drbyte That does not work. when i download and run this test i get author does not exist\nhttps://github.com/drbyte/spatie-permissions-demo/blob/master/tests/Feature/PostsTest.php. I fixed it on my user class i added this line protected $guard_name = 'api';\nI was using it in an api so it was created under api but when i was calling it is was calling it under web\nThanks for the help guys. @drbyte is there anyway to set the guard to be api by default so i don't need to specify it?. I fixed the authorization issue by setting my default auth guard to api. ",
    "yeligoth": "I only use the package directives, the transpilation from @role is \"auth()->users()\". The solution was upgrade the package. In the version 2.0 the transpilation is bad.\nThanks.... ",
    "Otisz": "This is just a PhpStorm complaint, but I think it would be good if you would use it because the hints are useful.. I agree with you about the title.\nI'm sorry, but that was my first issue.\nUpdated title.. ",
    "Wintereise": "Hi @drbyte @benjamincrozat The cache itself functions just fine otherwise.\nI can write values into it and then read them out in other requests, no problems. I'll try to isolate it into a bare repository and get back to you after new years.\nThanks.. Hi team,\nSo, weirdly enough, this only seems to happen with Apache and DSO PHP.\nnginx+fpm, or even the built in PHP webserver does not run into it. I'll assume it's something wrong with my DSO PHP env and close this out. Sorry for the noise.. ",
    "GioChocolateBro": "+1\nWant to do the same for my page module. \"only these roles can view this page\"\nIn the process of solving this by making it myself.\nGoing to make a new pivot table to set the page id ( and the role id.\nThen I'll make a authorized function thats called just before loading the page that will check if this page has any roles in the pivot, if so check if the user has these roles too. \nIf not ill throw a 403.\nSeeing as you can include the trait on other models beside the user model you can probably solve this differently.\nI've tried solving it this way, the problem I ran into had to do with the fact that I'm using multiple guards. You can only set one guard for your model meaning you can only attach a role for one guard/user type I'm using 2 or more guards and I need to be able to attach roles for any guard.. ",
    "rohithmeethal": "@Cannonb4ll I usually check for permissions instead of roles to determine authorization.\nThat is instead of \nphp\nif($user->hasAnyRole(['admin','paid user'])) // check if user can download song file\nI would prefer \nphp\nif($user->can('download song'))\nWhich is way cleaner than the first one.\nNow coming back to your usecase, you wont be able to use a generic permission  predefined to check if user can download the file. Instead of that let us create permissions for specific resource.\nAt the time of creating a resource (here example resource Song) I would generate a permission for the download for the specific song\nphp\n$song = Song::create(['name'=>'Gagnam Style','file'=>'a7623hfgf.mp3']);\nPermission::create(['name'=>\"download song::$song->id\"]);\nNow your decides which all roles can download the specific song, so what we just have to do is give permission to the selected roles.\nphp\n$songPermission = Permission::findByName(\"download song::$song->id\");\n$songPermission->roles()->sync(Request::input('download_allowed_role_ids'));\n// You will have to clear permissions cache, I am not sure if it is necessary ?\napp(Spatie\\Permission\\PermissionRegistrar::class)->forgetCachedPermissions();\nNow on downloading action you just have to check\nphp\nif($user->can(\"download song::$song->id\"))\nAlso if you want to say which roles can download the song just check which all roles are given the specific permission\nphp\n$songPermission = Permission::findByName(\"download song::$song->id\");\n$downloadAllowedRoles = $songPermission->roles;\n@GioChocolateBro  I think if you follow this way you wont need to create another pivot table\nPS: dont forget to delete the permission, when you delete the resource\nThanks for this question, since this usecase made me clear why dynamically creatable permissions are useful.\nI am not sure, how well this solution will scale since permissions are cached. That is if there are 10000 songs, there will be 10000 permissions\n~~I feel there should be two kind of permissions in this package, cache-able and non cache-able~~\n. I don't think my suggestion above https://github.com/spatie/laravel-permission/issues/612#issuecomment-354566249 is a right method to deal with the usecase, I think you should go ahead and create a table to link the resource and resources instead. . @drbyte I think you are right, even I had my doubts if this is right way to approach the solution. Closing this issue \ud83d\udc4d . ",
    "MadMikeyB": "```\n<?php\nreturn [\n'models' => [\n\n    /*\n     * When using the \"HasRoles\" trait from this package, we need to know which\n     * Eloquent model should be used to retrieve your permissions. Of course, it\n     * is often just the \"Permission\" model but you may use whatever you like.\n     *\n     * The model you want to use as a Permission model needs to implement the\n     * `Spatie\\Permission\\Contracts\\Permission` contract.\n     */\n\n    'permission' => Spatie\\Permission\\Models\\Permission::class,\n\n    /*\n     * When using the \"HasRoles\" trait from this package, we need to know which\n     * Eloquent model should be used to retrieve your roles. Of course, it\n     * is often just the \"Role\" model but you may use whatever you like.\n     *\n     * The model you want to use as a Role model needs to implement the\n     * `Spatie\\Permission\\Contracts\\Role` contract.\n     */\n\n    'role' => Spatie\\Permission\\Models\\Role::class,\n\n],\n\n'table_names' => [\n\n    /*\n     * When using the \"HasRoles\" trait from this package, we need to know which\n     * table should be used to retrieve your roles. We have chosen a basic\n     * default value but you may easily change it to any table you like.\n     */\n\n    'roles' => 'user_roles',\n\n    /*\n     * When using the \"HasRoles\" trait from this package, we need to know which\n     * table should be used to retrieve your permissions. We have chosen a basic\n     * default value but you may easily change it to any table you like.\n     */\n\n    'permissions' => 'user_permissions',\n\n    /*\n     * When using the \"HasRoles\" trait from this package, we need to know which\n     * table should be used to retrieve your models permissions. We have chosen a\n     * basic default value but you may easily change it to any table you like.\n     */\n\n    'model_has_permissions' => 'model_has_permissions',\n\n    /*\n     * When using the \"HasRoles\" trait from this package, we need to know which\n     * table should be used to retrieve your models roles. We have chosen a\n     * basic default value but you may easily change it to any table you like.\n     */\n\n    'model_has_roles' => 'model_has_roles',\n\n    /*\n     * When using the \"HasRoles\" trait from this package, we need to know which\n     * table should be used to retrieve your roles permissions. We have chosen a\n     * basic default value but you may easily change it to any table you like.\n     */\n\n    'role_has_permissions' => 'role_has_permissions',\n],\n\n/*\n * By default all permissions will be cached for 24 hours unless a permission or\n * role is updated. Then the cache will be flushed immediately.\n */\n\n'cache_expiration_time' => 60 * 24,\n\n/*\n * By default we'll make an entry in the application log when the permissions\n * could not be loaded. Normally this only occurs while installing the packages.\n *\n * If for some reason you want to disable that logging, set this value to false.\n */\n\n'log_registration_exception' => true,\n\n];\n```\nIs my config - looks like I have indeed changed my roles table to user_roles - though it was so long ago I cannot recall.\nThanks for the fast reply @drbyte . @drbyte I assume reverting the breaking change isnt an option?. Thanks @drbyte for the fast response! \ud83d\udc4d . Thanks @drbyte I'll give that a shot. Trust me to use it wrong!. Alas, the old General error: 1390 Prepared statement contains too many placeholders\nI suspect my dataset is far too large to eager load.\nAnyway, this is not your problem @drbyte , this is mine.\nThanks for the support man.. @newtekDev I believe I refactored the query I was running, I don't think there's a one size fits all solution.. ",
    "bsmathiasmoser": "i have the same problem. also changed table names in config/permission.php.\nmy solution so far:\ni updated foreign key field names in the tables model_has_permissions, model_has_roles and role_has_permissions to fit conventions.\ne.g: Permissions Table: bs_user_permissions, so i changed foreign key field to bs_user_permission_id\nbut i still have a problem with some model relations:\n- Permission::roles()\ni think the pivotKeyNames in the belongsToMany method are missing\n```\n public function roles(): BelongsToMany\n    {\n        $permissionsForeignKeyName = str_singular(config('permission.table_names.permissions')).'_id';\n        $rolesForeignKeyName = str_singular(config('permission.table_names.roles')).'_id';\n    return $this->belongsToMany(\n        config('permission.models.role'),\n        config('permission.table_names.role_has_permissions'),\n        $permissionsForeignKeyName,\n        $rolesForeignKeyName\n    );\n}\n\n```\n- Role::permissions()\nthe same here\nCan somebody confirm this Bug in the Model Relations?. Thanks for the fast update!!. ",
    "robjbrain": "This still seems to be an issue for me (using 2.33.0)\nWhen using a model called UserRole I constantly get the following error: \n\nColumn not found: 1054 Unknown column 'user_role_id' in 'where clause' (SQL: select permission_id from role_has_permissions where user_role_id = 2)\n\nThis happens even when using the default config (deleted my own config).\nI also put back the config with the only thing changed being the models.role class name.\nSo presumably it's based on the class name rather than a config setting?\nFrom what I can tell the permissions() method on the Role class needs to force the role_id:\nBEFORE\npublic function permissions(): BelongsToMany\n    {\n        return $this->belongsToMany(\n            config('permission.models.permission'),\n            config('permission.table_names.role_has_permissions')\n        );\n    }\nAFTER\npublic function permissions(): BelongsToMany\n    {\n        return $this->belongsToMany(\n            config('permission.models.permission'),\n            config('permission.table_names.role_has_permissions'),\n            'role_id'\n        );\n    }. Actually caching was throwing me, it seems like you also need it in the roles() method of the permissions class.. I gave an example of how to add your own events in the simplest way in this issue: https://github.com/spatie/laravel-permission/issues/754#issuecomment-468229002. I found the easiest way was to overload the trait, in this example i'm using Spatie's activity logger to log every action:\n```php\nnamespace App\\Models\\Traits;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Spatie\\Permission\\Traits\\HasRoles;\n/*\n * @mixin \\App\\Models\\BaseModel\n /\ntrait HasRolesTrait\n{\n    use HasRoles {\n        assignRole as protected originalAssignRole;\n        removeRole as protected originalRemoveRole;\n        syncRoles as protected originalSyncRoles;\n    }\n/**\n * @param mixed ...$roles\n * @return $this\n */\npublic function assignRole(...$roles)\n{\n    $this->originalAssignRole(...$roles);\n\n    $this->logRoleAssigned($roles);\n\n    return $this;\n}\n\n/**\n * @param $role\n * @return bool\n */\npublic function logRoleAssigned($role): bool\n{\n    if (is_array($role)) {\n        return array_walk($role, [$this, 'logRoleAssigned']);\n    }\n\n    $role = $this->getStoredRole($role);\n\n    activity()\n        ->useLog('role_assigned')\n        ->causedBy(Auth::user())\n        ->performedOn($this)\n        ->withProperties([\n            'role_name' => $role->name\n        ])\n        ->log(':subject.name was assigned the role :properties.role_name by :causer.name');\n\n    return true;\n}\n\n/**\n * @param $role\n */\npublic function removeRole($role)\n{\n    $this->originalRemoveRole($role);\n}\n\n/**\n * @param $role\n * @return bool\n */\npublic function logRoleRemoved($role): bool\n{\n    if (is_iterable($role)) {\n        return array_walk($role, [$this, 'logRoleRemoved']);\n    }\n\n    $role = $this->getStoredRole($role);\n\n    activity()\n        ->useLog('role_removed')\n        ->causedBy(Auth::user())\n        ->performedOn($this)\n        ->withProperties([\n            'role_name' => $role->name\n        ])\n        ->log(':subject.name was removed from the role :properties.role_name by :causer.name');\n\n    return true;\n}\n\n}\n```\n. You could quite easily use the same method to fire events instead:\n```php\nnamespace App\\Models\\Traits;\nuse Spatie\\Permission\\Traits\\HasRoles;\n/*\n * @mixin \\App\\Models\\BaseModel\n /\ntrait HasRolesTrait\n{\n    use HasRoles {\n        assignRole as protected originalAssignRole;\n        removeRole as protected originalRemoveRole;\n        syncRoles as protected originalSyncRoles;\n    }\n/**\n * @param mixed ...$roles\n * @return $this\n */\npublic function assignRole(...$roles)\n{\n    $this->originalAssignRole(...$roles);\n\n    $this->fireRoleAssignedEvent($roles);\n\n    return $this;\n}\n\n/**\n * @param $role\n * @return bool\n */\npublic function fireRoleAssignedEvent($role)\n{\n    if (is_iterable($role)) {\n        return array_walk($role, [$this, 'fireRoleAssignedEvent']);\n    }\n\n    event(new RoleAssignedEvent($this, $this->getStoredRole($role)));\n\n    return true;\n}\n\n/**\n * @param $role\n * @return $this\n */\npublic function removeRole($role)\n{\n    $this->originalRemoveRole($role);\n\n    $this->fireRoleRemovedEvent($role);\n\n    return $this;\n}\n\n/**\n * @param $role\n * @return bool\n */\npublic function fireRoleRemovedEvent($role)\n{\n    if (is_iterable($role)) {\n        return array_walk($role, [$this, 'fireRoleRemovedEvent']);\n    }\n\n    event(new RoleRemovedEvent($this, $this->getStoredRole($role)));\n\n    return true;\n}\n\n}\n```. ",
    "i906": "In my Blade views, I have several links to menus that appear according to permission granted to the user. E.g.:\nblade\n<a>Dashboard</a>\n@can(Permission::MANAGE_ITEM)\n    <a>Items</a>\n@endcan\n@can(Permission::VIEW_REPORT)\n    <a>Report</a>\n@endcan\nWhen a user with all permissions logs in, the Dashboard, Items, and Report should appear. Occasionally, they'll only see Dashboard. After logging out and relogin, the issue would go away for a while.\nI made a workaround, and the users have not reported of this issue yet:\nphp\n// in AppServiceProvider\n$this->app->bind(\\Spatie\\Permission\\PermissionRegistrar::class, PermissionRegistrar::class);\nphp\nclass PermissionRegistrar extends BaseRegistrar\n{\n    public function forgetCachedPermissions()\n    {\n        // Instead of clearing the cache, we just update the cache with a newer value\n        $permissions = app(Permission::class)->with('roles')->get();\n        $this->cache->forever($this->cacheKey, $permissions);\n    }\n}\nI am using Redis as the cache driver.. ",
    "daveismyname": "strange as that is exactly what I'm doing but the collection is empty.\nreturn Role::findByName('Admin')->permissions;. sure thing, my controller:\nuse Spatie\\Permission\\Models\\Role;\n```\npublic function edit($id)\n{\n    $role = Role::findOrFail($id);\ndd($role->permisions);\nreturn view('roles::admin.edit')->with(compact('role'));\n\n}\n```\nRoles table\n```\nmysql> select * from roles;\n+----+-------+------------+---------------------+---------------------+\n| id | name  | guard_name | created_at          | updated_at          |\n+----+-------+------------+---------------------+---------------------+\n|  1 | Admin | web        | 2018-01-03 14:31:04 | 2018-01-03 14:31:04 |\n|  2 | User  | web        | 2018-01-03 14:31:04 | 2018-01-03 14:31:04 |\n+----+-------+------------+---------------------+---------------------+\n2 rows in set (0.00 sec)\n```\nrole permissions\nmysql> select * from role_has_permissions;\n+---------------+---------+\n| permission_id | role_id |\n+---------------+---------+\n|             3 |       1 |\n|             4 |       1 |\n|             1 |       2 |\n|             2 |       2 |\n+---------------+---------+\n4 rows in set (0.05 sec). actually, it's working now I've been working on other parts of the system I must have had something that interfered with this.. Figured it out by adding my handling inside app/Exceptions/Handler.php \n```\n/\n * Render an exception into an HTTP response.\n \n * @param  \\Illuminate\\Http\\Request  $request\n * @param  \\Exception  $exception\n * @return \\Illuminate\\Http\\Response\n /\npublic function render($request, Exception $e)\n{\nif ($e instanceof \\Symfony\\Component\\HttpKernel\\Exception\\HttpException) {\n    flash($e->getMessage(), 'danger');\n    return back();\n}\n\nreturn parent::render($request, $e);\n\n}\n```. ",
    "webmasterdro": "Hi,\nDefault guard is api. I'm using the assignRole method inside the class that receives a request from a API (fetchUser).. Hi again @drbyte\nI follow your tip and comment the web guard. \nI got a new error: `SQLSTATE[01000]: Warning: 1265 Data truncated for column 'model_id' at row 1 (SQL: insert intomodel_has_roles(model_id,model_type,role_id) values (931d5f40-f600-11e7-ad4d-bfb47746a32a, App\\User, 1))\n`\nBut this errors appears because I use uuid instead of sequencial IDs for users. I change model_id column to varchar(36) instead of int. Can I use without problems or will appears unexpected effects? (Fix the issue). Sure.\nThanks!. ",
    "mfaisaltanveer": "class User extends Authenticatable \n{\n//declare your guard name in your model\n    protected $guard_name = 'web';. ",
    "rkgarcia": "Thanks @mostafamaklad . ",
    "growlab": "For me yes. \nI use this and work fine.\nPassing parameter only for sync.. ",
    "billabrian6": "It is breaking on page load, and using the default guard 'web'.\nThis is how I'm using the middleware:\nRoute::group(['middleware' => ['auth', 'permission:view']], function () {\n    Route::get('/', function () {\n        return Redirect::route('dashboard.index');\n    })->name('dashboard');\n}\nLaravel error says undefined method call, but if I replace it with hasAnyPermission it works.\n. I was only meaning to say that I'm using 2.8.0. My wording my have been confusing, sorry to make it seem like I was blaming that version. I did still attempt to use 2.7.9, but the issue is the same.\nMy User model has a few hasOne/hasMany methods and a 'saved' event.\nauth.php has been modified to use ldap:\n```\n'providers' => [\n    'users' => [\n        'driver' => 'adldap',\n        'model' => App\\Models\\User::class,\n    ],\n// 'users' => [\n//     'driver' => 'database',\n//     'table' => 'users',\n// ],\n\n],\nIssue:\n`\"Call to undefined method Illuminate\\Database\\Query\\Builder::can()\"`\n     * @param  string  $method\n     * @param  array   $parameters\n     * @return mixed\n     \n     * @throws \\BadMethodCallException\n     /\n    public function __call($method, $parameters)\n    {\n        if (static::hasMacro($method)) {\n            return $this->macroCall($method, $parameters);\n        }\n    if (Str::startsWith($method, 'where')) {\n        return $this->dynamicWhere($method, $parameters);\n    }\n\n    $className = static::class;\n\n    throw new BadMethodCallException(\"Call to undefined method {$className}::{$method}()\");\n}\n\n```\nDo you think using ldap is contributing to the issue?. If I roll this package back to 2.5.1 it works great, but I'm sure I losing some good functionality going that far back.. We are using ldap to authenticate with active directory using Adldap2-Laravel.\nThis is the only thing I can find may do what you've suggested.. Updating to the newest version of Adldap2-Laravel fixes the issue. @drbyte, thanks for trying to help me fix the issue!. ",
    "vanrijs": "Hi DrByte, is has nothing to do with the preventing logins. Suddenly the permissions are not available and the users get \"no permission to view this page\". We swiched last week from memcached to file caching. I know its slower but it works.. I will check the memcached settings later this week. . ",
    "mattdfloyd": "Use case:\n$roles = Role::whereIn('name', ['super', 'admin'])->get();\nUser::role($roles)->get();\nThis is an improvement over the following, which make a database call for each role that is passed.\nUser::role(['super', 'admin'])->get();. ",
    "rafaelxim": "Solved with this....I needed to assign AFTER querying for the user.\n$user = User::orderBy('id', 'desc')->first();\n$user->assignRole('cliente');   . ",
    "youyi1314": "Thanks @drbyte. ",
    "Naoray": "@drbyte  in v2.9.1 the error is still occurring \nYour changes aren't in the release => https://github.com/spatie/laravel-permission/blob/2.9.1/src/helpers.php#L10-L13\nDo you want to add this PR or should I?\nThanks,. ",
    "Barrykilby": "@drbyte  I have had just had the same problem but getting triggered by helpers.php when Spark is installed with Nova and attempting to use https://novapackages.com/packages/vyuldashev/nova-permission to manage things. Below seems to solve it.\nfunction getModelForGuard(string $guard)\n{\n    return collect(config('auth.guards'))\n        ->map(function ($guard) {\n            if (! isset($guard['provider'])) {\n                return;\n            }\n            return config(\"auth.providers.{$guard['provider']}.model\");\n        })->get($guard);\n}. ",
    "pkeogan": "I sense I am possibly integrating the use of this lovely package wrong, so I apologize, if after you reading this reply you think to yourself \"what is this guy thinking...\".\nIn my application, I am restricting the ability to CRUD on dynamically created objects.\nFor example, I have a Report model. This model has an associated  the basic CRUD functions. Upon the construct of this object, permissions from this package are dynamical created then associated to this object.\nHere is what the Report model migration would look like\n```\n// In Report Migration File\n...\n            $table->integer('view_report_permission')->nullable();\n            $table->integer('create_report_permission')->nullable();\n            $table->integer('view_deleted_reports_permission')->nullable();\n            $table->integer('edit_report_permission')->nullable();\n            $table->integer('delete_report_permission')->nullable();\n            $table->integer('restore_report_permission')->nullable();\n            $table->integer('permanently_delete_report_permission')->nullable();\n            $table->softDeletes();\n...\n```\nUpon construct of the  Report model, these permissions would be created, then saved to the model.\nforeach CRUD ability\n```\n$report->slug = 'foo';\n...\n   //Created a Permission, with a name of 'view_report_foo', and id of '100'\n  Permission::create(['name' => 'view_report_' . $report->slug]);\n//Find the permission, with the name of  'view_report_foo', then gets it's ID (100), then save that to the report\n  $report->view_report_permission = Permission::all()->firstWhere('name', 'view_report_' . $report->slug)->id;\n...\n   //This would end up with the following on the Report model\n   $report->slug == 'foo';\n   $report->view_report_permission == '100'\n...\n```\nFurther on in the program, when needing to view said report, with a slug of 'foo', I could call a method in a blade.php file\n// In a blade.php View\n$report = Report::firstWhere('slug', 'foo');\n...\n   @permission($report->view_report_permission) // \n        // Do Something\n   @endpermission\n...\nThe custom blade directive would be from here\n```\n// In a custom Service Provider\n...\n    /\n     * Check if current User has the Permission ID Supplied, If user does, return true, if not, return false.\n     \n     * @param Int $permissionID\n     \n     * @return boolean\n     */\n     Blade::directive('permission', function ($permissionID) { return \"<?php  if(Auth::user()->hasPermissionTo(App\\Models\\Auth\\Permission::find(\" . $permissionID . \")->name)): ?>\"; });\n/**\n * Return the endif for a @permission Blade Directive\n *\n * @return void\n */\n Blade::directive('endpermission', function () { return '<?php endif; ?>'; });\n\n...\n```\nSo in long, that is how my app is geared to solely using ID's instead of permissions names/objects, and exactly how its being implemented.. Would it be better/more optimized if I used Permission Objects?\nFor example\n//In Report Relationships Trait\n...\n    public function viewPermission()\n    {\n        return $this->belongsTo(Permission:class);\n    }\n...\nThen I could make the following call\n...\n    if(Auth::user()->hasPermissionTo($this->viewPermission)) // Not sure if $this-> is a valid replacement for (Auth::user()->, but you can get the point\n    {\n        //do something\n    }\n...\n. > Is the Permission ID number ever used anywhere else?\n\nI'm wondering whether you need to store the ID number anywhere at all, since it's always based on the 'permission_name_' . $report->slug.\nIf you do use it elsewhere, that's fine. But if not then maybe it's over-engineered? (been there, done that! :) )\n\nAt one point, I did have the same thought, but I came to this conclusion;, in order to create a even more robust and dynamic system, I wanted to be able to edit a model's CRUD Permissions. So if for some reason during production, you wanted change a model's crud permissions you could. Sorry if that is hard to follow. \n\nIf the int is indeed needed, then, as per your last comment, you could explore keeping keep your int storage and connecting it using a belongsTo relationship. I haven't found a need to do that myself yet, so am just trying to follow along with your thinking.\n\nI believe I will continue to explore the use of IDs of permissions with this package, and then submit a pull request when I develop something worthwhile and stable. I appreciate all of your input greatly!. Never honestly used StyleCI, so let me know what you want for that to pass.. @drbyte Thanks for the info. I'll remove the PermissionRegistrar changes, as that was not intended on this PR. I will also create a unit test for the new blade directive and resubmit into this PR.. @drbyte I'll close this PR, untill I have the unit testing done, I'll also use a branch like you suggested. That makes alot more sense. is there any naming in the prefix I should use?\nsuch as:\ndev-fix-1. ",
    "fitztrev": "No problem. Tests added.. ",
    "lguima": "I have a seeder class for permissions and roles. As I create a new permission I sync with the role already created or not.. @drbyte, there's some upcoming release that will make this feature available?. Great! Thank you! :+1: . ",
    "KalanaPerera": "Above comment mistakenly removed. sorry for that. \nActually, I got solution after going through your account. \nFrom here: https://github.com/drbyte/spatie-permissions-demo/blob/master/database/seeds/PermissionsDemoSeeder.php\nI think we have to improve code samples ( Suggestion and I'll also help )\nAnyway thanks for fast reply. . ",
    "rathesDot": "Was running in the same issue as well.\nIn the docs at Using permissions via roles it says that $user->assignRole('writer'); would work, so I assumed that I could assign a role by name, but that does not work. You can only assign the role by passing the object.\nI think that should be updated in the docs.. ",
    "pablorsk": "I need a something very similar (one database, users can have different roles and permissions on each organization/company).\nAny recipes for this? On my case, also, every organization/tenant has the same set of available permissions.\nA some of issues about this was opened, but #280 is the most complete. Also, a some discussions  mention another library: https://github.com/JosephSilber/bouncer#multi-tenancy. Hi @drbyte,\n\n\nAn example, takes ~0.1s\nSLOW QUERY 0.09502s QUERY: insert into role_has_permissions (permission_id, role_id) values (9,152)\npermission:200 records.  roles: 144 records.\n\n\nlaravel-permission only has foreing onDelete. Could this be the problem? The slowly queries are SELECT or INSERT.\n\n\nI have original migrations of laravel-permision. I dont change anything.\n\n\nTest are runned into a docker clean machine :/. Specifically with nanobox.. ",
    "hamidafghan": "you are welcome.. As the relationship between user and role is many to many so you have to  user foreach for user roles.\n<select data-placeholder=\"Select a Roles\" class=\"form-control tagsselector\" name=\"roles[]\" multiple=\"multiple\">\n  @foreach($user->roles as $role)\n    <option value=\"{{ $role->id }}\"  {{ $role->id == ' ' ? 'selected' : '' }}>{{ $role->name }}</option>\n  @endforeach\n</select>\nMay be you assign just a role for user so you have to select the ->first() laravel function.\n . You are welcome.. Any code snippets please. . Make sure the user is authenticated before attempting to Route::group(['middleware' => ['role:Admin']], function () {\n} routes. . Where did you use the hasAnyRole middleware exactly?  I mean which route.. ",
    "Brotzka": "Ok, I found the error (two errors): \nFirst I've tried to access $user->role instead of $user['role'].\nSecond $user was overwritten by User::create(). Renaming the variable to $new_user fixed the problem.\nThis is my code now:\n```\nprivate function createOrUpdateDefaultUsers()\n{\n        foreach($this->users as $user){\n            $new_user = User::updateOrCreate([\n                'name' => $user['name'],\n                'email' => $user['email']\n            ],[\n                'password' => bcrypt($user['password'])\n            ]);\n        try {\n            $new_user->assignRole($user['role']);\n        }catch(\\Exception $ex){\n            $this->error($ex->getMessage());\n        }\n    }\n\n}\n```. ",
    "justinmoh": "Really this example is the missing piece that connects Laravel Authorisation and Spatie/Permission.\nAs most laravel developers probably already using @can('view', $post) from Laravel Model Policy, the usefulness of this package becomes a little confusing. \nI understanding is, in general spatie/permission cannot support so-called row-level permission, because there are arbitrary conditions that you'd like to check before you may grant the permission.\nspatie/permission grants permission explicitly, and serves as an additional layer on top of (with or without) Laravel Model Policy.. ",
    "ojovent": "@COLABORATI \nDid you find any solution for this?. ",
    "andyunleashed": "I am having this problem also - causing some issues in a system where we return HTML rows for some services and there is a permission check on each row. Might return a thousand rows, and therefore tries to check the permission 1000 times.. Just to add to my previous - I think the caching part is easy to misread - it appears that the package caches all permissions, but not a user's specific permissions. So each ->can() or ->hasPermissionTo() checks each time.\nTo get around this in my app when doing the search I'm doing it once and then passing a boolean into blade to avoid having to check for each row being returned.. ",
    "younus93": "@andyunleashed Thanks for the suggestion. \n@drbyte Will this be taken into consideration in the upcoming releases? . ",
    "bussnet": "\nHowever, an equally fair question is: why would someone want a Default guard when a model-specific guard has been specified? Defaults are usually used for fallbacks when something more specific isn't offered.\n\nBecause this is the only option to globally set/change the guard. ;)\nWe have one user table (also one model) with 4 guards and change the guard in a middleware which detects which guard is required for the requested url. (The guard checks if the user is allowed to login in this url)\n. @drbyte thanks for your help. I solved our specific problem with overwriting the getDefaultGuardName() in the model and returning the auth.defaults.guard.\nI just want to help to solve a generic problem, cause it doesn't seem right to return the first item of a list instead of a selected default. But in case the different guards are for different models, it does make more sense.. OK, got you. The code is to complex to post it, but the structure is this:\nWe have 5 RouteGroups, every group has his own middleware and is mapped to a subdomain.\nIn the middleware we do a specific config of the system, also define the guard for this subdomain with \\Config::set('auth.defaults.guard', $this->guard);.\nI think the best solution (changing the default.guard config param is not good) were to change the guard globally: Permission::setActiveGuard($guard)\n. ",
    "spatie-bot": "Dear contributor, \nbecause this pull request seems to be inactive for quite some time now, I've automatically closed it. If you feel this pull request deserves some attention from my human colleagues feel free to reopen it.. Dear contributor, \nbecause this issue seems to be inactive for quite some time now, I've automatically closed it. If you feel this issue deserves some attention from my human colleagues feel free to reopen it.. Dear contributor, \nbecause this issue seems to be inactive for quite some time now, I've automatically closed it. If you feel this issue deserves some attention from my human colleagues feel free to reopen it.. Dear contributor, \nbecause this issue seems to be inactive for quite some time now, I've automatically closed it. If you feel this issue deserves some attention from my human colleagues feel free to reopen it.. ",
    "ultrono": "I've not seen anything specific for this package, but you could add a simple helper method onto your user model. Something along the lines of (may vary depending your use case and how strict you wish to be):\npublic function ability(array $roles, array $permissions) : bool\n{\n   return $this->hasAnyRole($roles) && $this->hasAnyPermission($permissions);\n}. @schajee - the code I posted is just an quick untested idea. As your requirement is fairly specific I'd image some more robust code would be required your end. i.e. https://github.com/Zizaco/entrust/blob/master/src/Entrust/Traits/EntrustUserTrait.php#L186-L243. ",
    "schajee": "Thanks, but now it throws a Spatie\\Permission\\Exceptions\\PermissionDoesNotExist whenever the said permissions don't exist. I guess I can check for permissions with app(Permission::class)->findByName() and return false. \nBut since this is more of a requirement in Blade, I think I'll continue with @role ... @else @can ... @else ... @endcan @endrole structure. For some reason the exception is not thrown in this case if the permission doesn't exist. . @drbyte My usual setup would include administrator and user roles; the administrator would be allowed to do anything or everything, and the user would be given permission on a need basis. So now when I want the admin to be able to create-node I can check @ability(['admin'],['create-node']) instead of assigning him permissions every time there is something new added to the system and then checking via can('create-node'). \nThis setup is required more often during development than after it. But in situations where capabilities keep changing I'd rather have the ability to do something quickly rather than permit the admin to do it. \nPs. I can also counter this by permitting admin every time I create a new permission. . ",
    "EminRahmanov": "Because it seems to be inconsistent.\nWhen the role name is \"admin\", it will be better to appear on the site as \"Admin\".. ",
    "thomasfw": "I agree it would be really useful for permissions to have some more human readable attributes in addition to the \"key\" used to do the actual permission checks. To maintain backwards compatability, name would still be used as the \"key\" to check against, but each permissions could also store an optional displayname and description. \nAs to the why, we'd be able to make a much better front-end experience for assigning/revoking roles and permissions if we had some more information stored for each one...\n[  ] {{ permission.displayname }} - Allow {{ user.name }} to {{ permission.description }}.\n[ \u2713 ] Edit Users - Allow Jane to add, update and delete users?\n[ \u2713 ] Edit Other's Posts - Allow Jane to edit and trash other user's posts?\nWe can obviously just make the existing name field more readable for administration purposes, but imo it also doesn't feel right to be doing my checks against a key string containing capitalisation/spaces, although that could just be a personal preference of mine.\nAll of the above applies for Roles too.. ",
    "lucasdcrk": "I also think a key column is needed.\nMy apps are in french so the roles must be displayed in french, wich leads to awfull php code:\n$user->hasRole('Administrateur')\n. Yeah but that mean you could'nt create new role on your admin panel for exemple. See https://github.com/spatie/laravel-permission/issues/685. I mean having a config file with roles and permissions. ",
    "Okipa": "You also could use the name attribute as a key to translate in your views like this example : \nphp\n    @lang('roles.name.' . $role->name)\nThis way, your role name would be well translated for all your app languages.\nBut I agree that a key attribute would have been more comprehensive than a name field.\nAnd in the other hand, the role translated role name would not been editable in a backoffice.\nMaybe using one of the following packages could do the trick : \n- https://github.com/spatie/laravel-translatable\n- https://github.com/dimsav/laravel-translatable. ",
    "t0n1zz": "hmmm sorry i don't quite understand how it is works like what you explained.... hmmm sorry but what i really wanted it to make it not returning an array but a single object only just like what we always get when using belongsTo relationship.... ",
    "Rihoj": "Controller class:\n```\nnamespace App\\Http\\Controllers;\nuse Illuminate\\Http\\Request;\nuse App\\User;\nuse Auth;\nclass UserController extends Controller\n{\n    /\n     * Create a new controller instance.\n     \n     * @return void\n     /\n    public function __construct()\n    {\n        $this->middleware('auth');\n    }\npublic function patch(Request $request, $id)\n{\n    if (!Auth::user()->hasPermissionTo('edit_user') && $id != Auth::user()->id) {\n        abort(403, 'Unauthorized action.');\n    }\n    $rules = [\n        'name' => 'required|max:255',\n    ];\n    if (Auth::user()->email !== $request->email) {\n        // $rules[\"email\"] = \"required|unique:users\";\n    }\n    $request->flashExcept('password');\n    $validatedData = $request->validate($rules);\n\n    $user = User::findOrFail($id);\n    $user->fill($request->all());\n    $user->save();\n    return view('/user/settings',['user'=>$user]);\n}\n/**\n * Show the application dashboard.\n *\n * @return \\Illuminate\\Http\\Response\n */\npublic function settings($id=null)\n{\n    if(!is_null($id)){\n        if (!Auth::user()->hasPermissionTo('edit_user') && $id != Auth::user()->id) {\n            abort(403, 'Unauthorized action.');\n        }\n        $user = User::findOrFail($id);\n    }else{\n        $user = Auth::user();\n    }\n    return view('/user/settings', ['user'=>$user]);\n}\n\n}\n```\nroute (in web.php with web as default guard)\nRoute::patch('user/{id}/settings', 'UserController@patch')->name('user.settings.patch');\nSome additional information. I have tried running php artisan cache:clear and that did not work. I did run a composer update spatie/laravel-permission and got the following information:\n```\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\nNothing to install or update\nGenerating optimized autoload files\n\nIlluminate\\Foundation\\ComposerScripts::postAutoloadDump\n@php artisan package:discover\nDiscovered Package: fideloper/proxy\nDiscovered Package: laravel/socialite\nDiscovered Package: spatie/laravel-permission\nDiscovered Package: laravel/tinker\nDiscovered Package: intervention/image\nDiscovered Package: graham-campbell/markdown\nDiscovered Package: laravelcollective/html\nDiscovered Package: yab/formmaker\nDiscovered Package: yab/crudmaker\nDiscovered Package: yab/laracogs\nDiscovered Package: yab/quarx\nDiscovered Package: pragmarx/yaml\nDiscovered Package: pragmarx/version\nPackage manifest generated successfully.\n```\n\nAfter running the update the permissions worked.. I tried to do some more testing today, and I am getting the error again. Here is how it started. I migrate and seed my db. I then changed the naming convention of my permission. Then I started getting the error.\nI changed the permission from \"can edit user\" to \"edit user\".\nMigrating and seeding with command php artisan migrate:fresh --seed\nUsersTableSeeder.php\n```\nuse Illuminate\\Database\\Seeder;\nuse Spatie\\Permission\\Models\\Role;\nuse Spatie\\Permission\\Models\\Permission;\nuse App\\User;\nclass UsersTableSeeder extends Seeder\n{\n    /\n     * Run the database seeds.\n     \n     * @return void\n     /\n    public function run()\n    {\n        DB::table('users')->insert([\n            'name' => \"James\",\n            'email' => \"example@example.com\",\n            'password' => bcrypt('secret'),\n        ]);\n        $role = Role::create(['name'=>'admin']);\n    $canEditUserPerm = Permission::create(['name'=>'edit user']);\n    $role->givePermissionTo($canEditUserPerm);\n    $user = User::find(1);\n    $user->assignRole('admin');\n\n    $role = Role::create(['name'=>'client']);\n}\n\n}\n```. Awesome! Thank you! I am sorry I missed that in the documentation. Thank you for taking the time to step through this with me.. As a note. I had to switch to DB cache as file cache still was not getting refreshed with either command (in the seeder or in the cli). That is interesting. I wonder if it has something to do with file permissions on my end. My production environment uses DB for now so I don't mind being on DB.. Inheritance to me means the parent class (role in this case) passes on values, methods, etc to the child. Whereas hierarchy to me is the inverse, where the child passes it's values up to the parent.\nAdmin is higher than manger so it would be there parent. It contains it's permissions and that of it's children. Manager is a child of Admin and contains a subset of permissions.\nThis is if course just my understanding, if I am wrong here let me know please.. Thank you for that clarification. Reverse-inheritance might fit my question better.\nIn this specific situation you would be correct, just allowing true for Admin would work. However, in the app that I am making that spawned this thought process I actually have 4 roles. Site Admin, Admin, Manager, Client. Site Admin could also be seen as the Owner of the system, so they get to bypass everything. Admin users cannot edit, create, or delete other users in their same role. Managers can only view data. Clients can only view their own data. \nAt this time I am accomplishing this by doing the following:\n```\n        $editAdminPermission = Permission::create(['name'=>'Edit Admin User']);\n        $deleteAdminPermission = Permission::create(['name'=>'Delete Admin User']);\n        $viewUserPermission = Permission::create(['name'=>'View User']);\n        $editUserPermission = Permission::create(['name'=>'Edit User']);\n        $deleteUserPermission = Permission::create(['name'=>'Delete User']);\n        $createUserPermission = Permission::create(['name'=>'Create User']);\n    $editAdminPropertyPermission = Permission::create(['name'=>'Edit Admin Property']);\n    $deleteAdminPropertyPermission = Permission::create(['name'=>'Delete Admin Property']);\n    $createPropertyPermission = Permission::create(['name'=>'Create Property']);\n    $editPropertyPermission = Permission::create(['name'=>'Edit Property']);\n    $deletePropertyPermission = Permission::create(['name'=>'Delete Property']);\n    $viewPropertyPermission = Permission::create(['name'=>'View Property']);\n\n    $siteAdminPermissions = [\n        $editAdminPermission,\n        $deleteAdminPermission,\n        $editAdminPropertyPermission,\n        $deleteAdminPropertyPermission,\n    ];\n\n    $adminPermissions = [\n        $deleteUserPermission\n        $editUserPermission,\n        $createUserPermission,\n        $createPropertyPermission,\n        $editPropertyPermission,\n        $deletePropertyPermission,\n    ];\n\n    $managerPermissions = [\n        $viewUserPermission,\n        $viewPropertyPermission,\n    ];\n\n    $siteAdminRole = Role::create(['name'=>'Site Admin']);\n    $siteAdminRole->syncPermissions($siteAdminPermissions);\n\n    $adminRole = Role::create(['name'=>'Admin']);\n    $adminRole->syncPermissions($adminPermissions);\n\n    $managerRole = Role::create(['name'=>'Manager']);\n    $managerRole->syncPermissions($managerPermissions);\n\n    $clientRole = Role::create(['name'=>'Client']);\n\n    $user = User::whereEmail(\"site@example.com\")->first();\n    $user->assignRole('Site Admin', 'Admin', 'Manager');\n\n    $adminUser = User::whereEmail(\"admin@example.com\")->first();\n    $adminUser->assignRole('Admin', 'Manager');\n\n    $managerUser = User::whereEmail(\"manager@example.com\")->first();\n    $managerUser->assignRole('Manager');\n\n```\nHowever, during role management, I don't want to have to have to display that the user is assigned to multiple roles. I also feel that moving forward if I make one permission I could have to add it to all three roles. \nAm I approaching this from the wrong direction?\nNote: Even though site admin is set to true for many items, I still have the permissions attached for testing purposes.. So initially I had thought about this in the sense of having parent-child relations where it would have to recursively step into each permission that has a parent id of the one you are looking at. I knew this could be slow an inefficient. I recently came to mind that it might be better to do the following.\nSet a role to \"observe\" another role. When that second role is updated it will broadcast that it has changed and the watching roles will update based on what was broadcast.\nTo implement this I would suggest the following using observer pattern:\nObserver Table; observe_id (int(11), AI, NOT NULL), observer: int (relates to Role id), observable: int (relates to another Role id)\n```\n$observer = new Role(\"Admin\");\n$observable = new Role(\"Manager\");\n// This terminology is slightly backwards to the pattern, but I think it makes sense if you think about calling watch is registering with the parameter being passed.\n$observer->watch($observable);\nclass Role\n{\n...\n    public function watch(Role $observable)\n    {\n        // add connection in the database.\n    }\n// called when a permission is added, deleted, or updated in any way. In this case it would need to be adding a role.\npublic function updateRole($action, $permission)\n{\n    // call db to look for roles watching this observable\n    $observers = $db->getObservables($this->id);\n    foreach($observers as $observer){\n        $observer->addPermission($permission);\n    }\n}\n\n...\n}\n```\nThis would allow you to not have to perform any recursive look ups to see if a permission is within any children or grand-children. As a permission is added, removed, or updated it just adds it to the parent. The only real issue I could see doing it this way is that you might want to make a source field on the role_permissions table so that if the permission had been added to the parent and the child, and the permission gets removed from the child it is not removed from the parent as well.\nPlease let me know what your thoughts are on this, and if this would give you any more reason to add it to v3.\nThank you for considering this atleast.. ",
    "jmfederico": "It has none set.\n```php\nuse App\\User;\n$user = new User();\n$user->guard_name;\nnull\n```\n$user->assignRole('name'); is taking the one that comes first in the guards array. I changed the order in the array to api first, and it then uses the api guard.. @drbyte May I ask if this was fixed? Or, if not, why is the issue closed?\nThanks. ",
    "zakiullahbarakzai": "@drbyte  I am seeding the permission table by help of Larvel seeder which means I have predefined permissions in my system as well as roles I have attached my permission table which  looks at the first time when I am seeding it like below that the guard_name is web.\n\nbut manually I am changing theguard_name field to api which my permission table became like this.\n. ",
    "gregoriochiko": "I have a similliar problem.\nWhat I want to achieve is in case I have two permissions, one belongs to api guard and the other to web guard, then I want to give the User both permissions, how can I achieve that?. I've fixed this by creating another model that extends User model, so that new model can have api guard while User still have the default guard (web).. ",
    "ayrasys": "i m also facing this problem that it works web guard but not with api so  help us how to fix this by api guard too \nThanks. ",
    "joveice": "Hm, maby. I'll see if I can make that work \ud83d\ude04 . I don't know.\nI had a role which I didn't add a permission to so I added a permission using the artisan command. used the database to link it to the role and cache clear.\nTried to check if the user in the role had permission > false. the items where correctly linked in the database, so I had no idea.\nDeleted the link and the permission then cache clear.\nAnd tried to add it using the code way, \"permission already exists\".\nI hope you understand what I wrote.\nEDIT:\nI only tried with can and hasPermission. I havn't used the middleware yet. I \"solved\" it by wiping the database and wiping the project and re cloning it (was only testing) and my script created the roles and permissions (no fails or erros) and I where able to use the can on myself on the last broken permission. Some cache have gone wrong here for sure.. Awesome, then I have a good idea how I can solve my permission updating on new updates for my app.. ",
    "lemonjp": "I got same issue.\nbut when I put 'sudo' on the clear command, now everything its ok.\n$ sudo php artisan cache:clear\n$ sudo php artisan config:clear\n$ sudo php artisan route:clear\n$ sudo php artisan view:clear. ",
    "jclee100": "@drbyte I must admit am not very familiar with the concept of guards even though I have read a little about them but the routes are within the api.php file. My config for auth are as follows:\n```\n    'defaults' => [\n        'guard' => 'api',\n        'passwords' => 'users',\n    ],\n'guards' => [\n    'web' => [\n        'driver' => 'session',\n        'provider' => 'users',\n    ],\n\n    'api' => [\n        'driver' => 'jwt',\n        'provider' => 'users',\n    ],\n],\n\n```\nThe routes are also wrapped in a jwt.auth middleware if that matters. Should I be setting something differently?. ",
    "peterson-umoke": "been trying to assign roles but it is not reflecting in the column?. ",
    "haught": "Hey @drbyte I am having the same problem that @komirad is having. When checking a role from the middleware, it works, but checking a permission from the middleware fails. After playing around with it for a bit I have found that a permission assigned to a model works, but when they are assigned to a role (like all of mine) they are not looked up. The can() function used in PermissionMiddleware.php seems to fail to look at assigned roles for associated permissions. Am I missing something?. I ended up putting in a fresh migration of the database schema and after importing my data - everything works.... Is seems that if I don't set protected $guard_name = 'api';\nin my User model, it reverts back to looking for a web guard and fails even though I have set the default guard to api in the config/auth.php. ",
    "jonaselan": "For anyone looking for another way to do this:\nUser::whereHas(\"roles\", function($q){ $q->where(\"name\", \"Member\"); })->get(). ",
    "bitbirddev": "Thanks for your answer! Understood. Looking forward to see this functionality in V3! Keep up the good work!. ",
    "hafael": "A gambiarra come solta...\n`\ntrait HasTeamRoles\n{\n    use HasRoles;\npublic function hasRole($roles): bool\n{\n\n    $teamRoles = $this->teams->map(function($team){\n        return $team->roles;\n    })->collapse();\n\n    if (is_string($roles) && false !== strpos($roles, '|')) {\n        $roles = $this->convertPipeToArray($roles);\n    }\n    if (is_string($roles)) {\n        return $teamRoles->contains('name', $roles);\n    }\n    if ($roles instanceof Role) {\n        return $teamRoles->contains('id', $roles->id);\n    }\n    if (is_array($roles)) {\n        foreach ($roles as $role) {\n            if ($this->hasRole($role)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return $roles->intersect($teamRoles)->isNotEmpty();\n}\n\n}\n`\nprovisionally works for me. ",
    "robov": "Let me join in this conversation. I am searching for a package with role inheritance.\nSomething that allows me to define a base set of permissions and then when the user progresses to a higher role/membership, additional permissions are added.\ngold member\n-- silver member\n---- bronze member\nThe only way i could create a supermember GOLD to have a bronze, silver and gold membership.. with inheritance I could just give them GOLD role and then the silver and bronze are inherited. This seems more natural and easy to understand.\nAre you planning on inheriting roles? or am I overlooking something (inheritance is bad  and you choise not to implement ?)\n. ",
    "bmichotte": "@drbyte Since you tagged this issue for v3, I guess that's mean this will be implemented for v3 right ?\nDo you have some approximative ETA on v3 ?. All right. Thanks for the clarification @drbyte. ",
    "lucas-quinn-guru": "I was also looking for this exact same thing.  I find it so much more intuitive.  If you assign a RoleB to RoleA, RoleA would adopt RoleB's permissions.. ",
    "ereztdev": "Hi, I am also looking for hierarchy / inheritance.\nSo if an associate level has an array of $permissions or designated $role = associate, then manager of associate would inherit all associate permissions relieving a lot of 'assigning clutter' for every depth in the hierarchy.\nI would like to see this in V3 and would be more than happy to know how close would be V3 release.\nthanks!. @drbyte  - I am I looking to register multiple guard types on User model, would that be even possible?\nSo if I create protected $guard_name on User, there can be only 1 guard_name, yet I was asking about implementing multiple guards on 1 model (User).\nTo reiterate what I was asking before: \nI am looking to have permissions rely on 2 conditions role and group, I thought I could somehow use guard_name as a group.\nLet me know, thx. Re the code sorry in advance but we can't share our repo or part of it.\nWhat I can tell you in general terms that this is an enterprise level system with a large number of roles, groups and an even larger number of permissions middleware/UI (blade).\nImplementation would be on middleware for restricted views, in most cases be groups that have nothing to do with this route, and for roles exclusions of access would be given in blade for UI elements (usually CRUD elements).\nWe saw guard_name appearing as a key in a few tables in spatie so we just\nthought of utilizing it as a conditional to differentiate same roles that\nwould have differebt group policies, or vice versa i.e. a sales manager and\na sales associate would have different roles yet share much of the common\npermissions, on the flipside you can have a compliance associate and a\nsales manager that have different roles yet could also share many common permissions on a group level (C-level execs to that same example). \nThis would give us a minor amount of exclusions, another  intersection level that would make non-common roles share a common group policy and provide more clarity, less code writing and clutter.. @drbyte edited my answer to better reflect your question.. @drbyte - did not abandon thread, waiting for decisions to be made if we will use groups or not.\nIn the meantime, can you be kind to share a few links of examples on how Roles is extended? \nI went over Spatie\\Permission\\Models\\Role and it's Contract , (plz don't link the git readme :) ) if you know of some sort of fork or other source that I would be able to understand how far my options can go re extending roles / permissions would be greatly appreciated.\nMany thanks.. @drbyte well sorta.\nWe let go of groups and just went with roles and permissions, yet I've extended how I base my permissions with segmenting the name of the permission (i.e. route-), looping over those substrings can provide a great substitution for grouping, as you can pick them up into an array and then sync them with diff. users or roles that you wish.. Solved.\nI needed to create a Role model for a full CRUD and controller, so I'm guessing it went straight to my model and not to Spatie's original vendor Role.\nIf anyone has this issue, just add:\npublic function permissions(){\n        return $this->belongsToMany(config('permission.models.permission'), config('permission.table_names.role_has_permissions')\n        );\n    }\n. ",
    "ntraykov": "This would be very valuable functionality. ",
    "Phunky": "ultraware/roles (fork of romanbican/roles) handles this by giving each role a level value, permissions are then assigned provided based on those available to their highest role level.\nThe downside is this currently it is not possible to revoke a inherited role.\nAnother option is to just ensure you can apply many roles to a user and manage it that way, which I actually think is better as your being more explicit with whats being assigned. . ",
    "echobool": "Why I add to User Model\nProtected $guard_name ='api';\nJust fine\n\nauth.php \n'defaults' => [\n'guard' => 'api',\n'passwords' => 'users',\n], \uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\n. ",
    "SzymonLisowiec": "Problem\nOP means, that HasRoles doesn't use default guard from config/auth.php.\nI have in config/auth.php:\nphp\n'defaults' => [\n     'guard' => 'api',\n     'passwords' => 'users',\n]\nand seeder:\n$role = Role::create(['name' => 'super-admin']);\n$role->givePermissionTo(Permission::all());\nThe seeder will add \"super-admin\" role to api guard.\nWhile using $user->assignRole('super-admin'); is throwed error:\n\nThere is no role named super-admin\n\nand need add protected $guard_name = 'api'; to model, to fix it.\nReason\nhttps://github.com/spatie/laravel-permission/blob/master/src/Guard.php#L49\nstatic::getNames($class)->first() returns \"web\" despite default guard set on \"api\". Probably User model have guard defaults set on 'web'.. ",
    "canvural": "I had the same issue. Spent 1 hour wondering why it wouldn't find the role.\nLike written, defining guard_name on model solves it. But this shouldn't be necessary. . ",
    "Mutahhar": "@drbyte oh sorry I forgot to upload code of my App\\Security\\Role class\nHere is my code in App\\Security\\Role\n```\n<?php\nnamespace App\\Security;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Spatie\\Permission\\Traits\\HasPermissions;\nuse Spatie\\Permission\\Exceptions\\RoleDoesNotExist;\nuse Spatie\\Permission\\Exceptions\\GuardDoesNotMatch;\nuse Spatie\\Permission\\Exceptions\\RoleAlreadyExists;\nuse Spatie\\Permission\\Contracts\\Role as RoleContract;\nuse Spatie\\Permission\\Traits\\RefreshesPermissionCache;\nuse Illuminate\\Database\\Eloquent\\Relations\\MorphToMany;\nuse Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany;\nclass Role extends Model implements RoleContract\n{\n    use HasPermissions;\n    use RefreshesPermissionCache;\npublic $guarded = ['id'];\n\npublic function __construct(array $attributes = [])\n{\n    $attributes['guard_name'] = $attributes['guard_name'] ?? config('auth.defaults.guard');\n\n    parent::__construct($attributes);\n\n    $this->setTable(config('permission.table_names.roles'));\n}\n\npublic static function create(array $attributes = [])\n{\n    $attributes['guard_name'] = $attributes['guard_name'] ?? config('auth.defaults.guard');\n\n    if (static::where('name', $attributes['name'])->where('guard_name', $attributes['guard_name'])->first()) {\n        throw RoleAlreadyExists::create($attributes['name'], $attributes['guard_name']);\n    }\n\n    if (isNotLumen() && app()::VERSION < '5.4') {\n        return parent::create($attributes);\n    }\n\n    return static::query()->create($attributes);\n}\n\n/**\n * A role may be given various permissions.\n */\npublic function permissions(): BelongsToMany\n{\n    return $this->belongsToMany(\n        config('permission.models.permission'),\n        config('permission.table_names.role_has_permissions')\n    );\n}\n\n/**\n * A role belongs to some users of the model associated with its guard.\n */\npublic function users(): MorphToMany\n{\n    return $this->morphedByMany(\n        getModelForGuard($this->attributes['guard_name']),\n        'model',\n        config('permission.table_names.model_has_roles'),\n        'role_id',\n        'model_id'\n    );\n}\n\n/**\n * Find a role by its name and guard name.\n *\n * @param string $name\n * @param string|null $guardName\n *\n * @return \\Spatie\\Permission\\Contracts\\Role|\\Spatie\\Permission\\Models\\Role\n *\n * @throws \\Spatie\\Permission\\Exceptions\\RoleDoesNotExist\n */\npublic static function findByName(string $name, $guardName = null): RoleContract\n{\n    $guardName = $guardName ?? config('auth.defaults.guard');\n\n    $role = static::where('name', $name)->where('guard_name', $guardName)->first();\n\n    if (! $role) {\n        throw RoleDoesNotExist::named($name);\n    }\n\n    return $role;\n}\n\npublic static function findById(int $id, $guardName): RoleContract\n{\n    $guardName = $guardName ?? config('auth.defaults.guard');\n\n    $role = static::where('id', $id)->where('guard_name', $guardName)->first();\n\n    if (! $role) {\n        throw RoleDoesNotExist::withId($id);\n    }\n\n    return $role;\n}\n\n/**\n * Determine if the user may perform the given permission.\n *\n * @param string|Permission $permission\n *\n * @return bool\n *\n * @throws \\Spatie\\Permission\\Exceptions\\GuardDoesNotMatch\n */\npublic function hasPermissionTo($permission): bool\n{\n    if (is_string($permission)) {\n        $permission = app(Permission::class)->findByName($permission, $this->getDefaultGuardName());\n    }\n\n    if (! $this->getGuardNames()->contains($permission->guard_name)) {\n        throw GuardDoesNotMatch::create($permission->guard_name, $this->getGuardNames());\n    }\n\n    return $this->permissions->contains('id', $permission->id);\n}\n\n}\n```. @drbyte \n\nWhat was the reason for copying it in the first place?\n\nI was thinking that too... turns out that in the past many developers were working on the project and one of the developers copied the file under the app directory.\nI've removed the file and the software is working fine. \nBTW thanks for getting me in the right direction . @drbyte\nnope. for the workaroud I am using $role->hasPermissionTo('PermissionName') for now.. ",
    "elghobaty": "Well @drbyte, I think what @mr-mmmmore is trying to say is that the package always assumes that the model which is being assigned roles/permissions (e.g. User) implements the Authenticatable contract. This is not always the case. For example, imagine a system where you have user groups, a user group is not necessarily Authenticatable, but it can be Authorizable, and we might need to use the package to assign a group certain permissions. Even Laravel itself adds its authorization method, i.e. can to the Authorizable trait, and not Authenticatable.\nWe are facing the same issue btw, so, in short, I believe that you might need to consider using Authorizable instead of Authenticatable.\nhttps://github.com/spatie/laravel-permission/blob/b48ff36ef047475327ec6ebcc383f38194cfb592/src/PermissionRegistrar.php#L31. You are more than welcome :). ",
    "patogalarzar": "Hi thank you for answering.\n\n\nTables in postgres connection pgsql (main): users, permissions, roles, clients, suppliers, offices, etc.\ngammu connection (secundria only for sending sms): inbox, outbox, sentitems, phones.\nThe mysql connection is to extract information from a previous system which is in process of migration but for workflows it is necessary to access this information.\n\n\nThe main connection is to postgres with the name pgsql.\n\n\nYes for test purposes, I specify the  connection property protected $connection = 'pgsql'; to the vendor/Spatie/Permission/src/Models/Permission.php and Role.php models and it worked, I could read and write in the database.\n\n\nYes, there are going to be other models using this package, I only put users as an example because there I realized that I had to specify the connection in the model.\n\n\nHaving connections of postgres and mysql did not give me problems in the past, the problem started when I added the database of sms that is also in postgres.\nI hope I have been able to answer all your questions so you can help me. Thank you for your help, I will apply your recommendation.. Thank you for your help, sorry I have been busy for work and I have not been able to answer, I will apply your recommendation.. ",
    "kevinp1005": "@AlexVanderbist \n\nYou can always copy those models to your own codebase and update the permissions.php config file to use those models instead.\n\nHi, I have tried using this method and it can only get the data without relationship. \nThese codes below works : \nphp\nMyCustomApp\\Models\\Permission:all();\nMyCustomApp\\Modesl\\Role:all();\nUser class\n```php\nclass User extends Authenticatable\n{\n    use Notifiable;\n    use HasRoles;\n    use HasApiTokens;\n. . .\n\n}\n```\nBut this doesn't : \n```php\nAuth::user()->permissions;\nAuth::user()->roles;\n```\nI tried to look into the code and its using morphToMany to get the permissions, so I'm not sure if its an issue with laravel or with the library, I haven't tested morphToMany relationship with multiple connections. \n. ",
    "sheixt": "Thanks for the prompt response.\nI've update the initial post to replace the config reference to avoid any confusion. Sorry about that.\nAs far as I'm aware the laravel-permission package permission middleware is the only thing being called for that route.\nThe application is currently in development mode as I'm in the process of building this locally. \nIs there anything I can do to clarify the source of the exception as the stack doesn't appear to be offering any to clarify this.. I think I've wasted you time... After removing the permissions middleware the exception persists so I'm inclined to this the problem lies elsewhere! Thanks for your help and quick response.\nSorry for the inconvenience!. ",
    "MickaelViaud": "I've made the same things (I think !) with L5.5 and Spatie 2.8.1 and it's working.\nHere's all the process : \n1 - Creating manager guard on config/auth.php\n```php\nreturn [\n'defaults' => [\n    'guard' => 'web',\n    'passwords' => 'users',\n],\n\n'guards' => [\n    'web' => [\n        'driver' => 'session',\n        'provider' => 'users',\n    ],\n\n    'manager' => [\n        'driver' => 'session',\n        'provider' => 'manager',\n    ],\n\n    'api' => [\n        'driver' => 'token',\n        'provider' => 'users',\n    ],\n],\n\n'providers' => [\n    'users' => [\n        'driver' => 'eloquent',\n        'model' => App\\User::class,\n    ],\n\n    'manager' => [\n        'driver' => 'eloquent',\n        'model' => App\\User::class,\n    ],\n\n    // 'users' => [\n    //     'driver' => 'database',\n    //     'table' => 'users',\n    // ],\n],\n\n'passwords' => [\n    'users' => [\n        'provider' => 'users',\n        'table' => 'password_resets',\n        'expire' => 60,\n    ],\n],\n\n];\n```\n2- Seed user, role and permissions\n```php\napp()['cache']->forget('spatie.permission.cache');\n// Create roles\n$admin = \\Spatie\\Permission\\Models\\Role::create(['name'=>User::ROLE_ADMIN, 'guard_name'=>'manager']);\n$writer = \\Spatie\\Permission\\Models\\Role::create(['name'=>User::ROLE_WRITER, 'guard_name'=>'manager']);\n$moderator = \\Spatie\\Permission\\Models\\Role::create(['name'=>User::ROLE_MODERATOR, 'guard_name'=>'manager']);\n// Creating permissions\n$handleUsers = Permission::create(['name'=>User::PERMISSION_USER, 'guard_name'=>'manager']);\n$handleForum = Permission::create(['name'=>User::PERMISSION_FORUM, 'guard_name'=>'manager']);\n$handleContent = Permission::create(['name'=>User::PERMISSION_CONTENT, 'guard_name'=>'manager']);\n$admin->givePermissionTo(\n    $handleUsers,\n    $handleForum,\n    $handleContent\n);\n$writer->givePermissionTo(\n    $handleContent\n);\n$moderator->givePermissionTo(\n    $handleForum\n);\n// Assign default super-admin account to super-admin role\n$userSuperAdmin = User::where(\"email\", \"admin@site.com\")->first();\nif (!empty($userSuperAdmin)) {\n    $userSuperAdmin->syncRoles($admin);\n}\n3- Make guard manager to route groupphp\nRoute::group([\n    'middleware' => ['manager', 'auth:manager'],\n    'namespace'  => $this->namespace,\n], function ($router) {\n    require module_path('manager', 'Routes/manager.php');\n});\nNote : \"manager\" middleware is exactly the same package as the \"web\" middleware, it's just a try\n4- Auth work\n![Auth](https://i.imgur.com/CZtusIs.png)\n5- In a controller behind guardphp\ndd(\n    'user()->permissions',\n    Auth::guard('manager')->user()->permissions,\n    'user()->getAllPermissions()',\n    Auth::guard('manager')->user()->getAllPermissions(),\n    'can '.User::PERMISSION_USER,\n    Auth::guard('manager')->user()->can(User::PERMISSION_USER, 'manager'),\n    'user()->hasPermissionTo(\\''.User::PERMISSION_USER.'\\')',\n    Auth::guard('manager')->user()->hasPermissionTo(User::PERMISSION_USER, 'manager')\n);\n```\nWhich give the screen posted before :( (Note : hasPermissionTo works !)\nThanks !\n[EDIT 20:32] Ok, it's driving me crazy, if a change the guard name for the permission by putting \"web\" guard, the can function works, as well as getAllPermissions(). But permissions still not work and hasPermissionTo throw exception (which is correct).. Hi @drbyte !\nIt's working with your PR but I don't know if it's really satisfying. In my other project, I don't need to pass guard in parameter and it's work. How can I be sure that is a regression ?\nWith my other project : \nphp\ndd(\n    'user()->permissions',\n    Auth::guard('manager')->user()->permissions,\n    'user()->getAllPermissions()',\n    Auth::guard('manager')->user()->getAllPermissions(),\n    'can '.Employee::PERMISSION_ASSIGN_FOLDER,\n    Auth::guard('manager')->user()->can(Employee::PERMISSION_ASSIGN_FOLDER),\n    'user()->hasPermissionTo(\\''.Employee::PERMISSION_ASSIGN_FOLDER.'\\')',\n    Auth::guard('manager')->user()->hasPermissionTo(Employee::PERMISSION_ASSIGN_FOLDER)\n);\nGive : \n. Ok, \nSo I update my other project to L5.6 with the latest version of laravel-permission and it' still working ! So the problem come to my code :( \nThe only difference, I think, with my other project is that my guard manager use other entity and table than the web guard. I'll make a try.. @drbyte Found it !\nWhen two guards use the same Model class, can() don't work. Maybe he is trying to fetch the first registered guard with the class ?\nDid I open another issue @AlexVanderbist ?. FYI : \nGuard::getDefaultName() return the first provider which correspond to the Model name. That's why he didn't take the right guard.\nOne workaround is to create two Model for 1 table, one per guard.\nI keep the issue open. Close it if necessary.. ",
    "k3vin023": "I just figured out that I put the wrong foreign key to my model_has_roles and to my users table. . Because I have roles and users table before and altered it for some functionalities needed in my project. Because I never thought of using this package before. I just only rely on user role_id. A huge thanks for spatie for making this easy. > Yes, in that case you'd need to customize the migrations to match up to your existing table.\nCorrect. I just realized that it's a must to match the migrations. ",
    "zong0828": "@drbyte  LOL  \nI didn't notice this. Thank you! But this function name also called getSutdentdata. Therefore, i think it is not the reason to cause assign role error.\n. @drbyte  I have a idea.  Will I get the error message if I use Insert to create data in the table of model_has_roles? Does there has anything else setting in the assignRole function?. > \"SQLSTATE[HY000]: General error: 1364 Field 's_id' doesn't have a default value (SQL: insert intousers(updated_at,created_at) values (2018-04-12 00:16:58, 2018-04-12 00:16:58))\nIf i use User::create([array $data]), it will show this error message.. ",
    "NiDo0o": "Can Anyone share the link...I am new to laravel and want to use spatie(laravel-permission) in my project and I just install it...I dont have any idea how to do it now So I want to watch a video But i not find a single video on youtube..\nKindly Help me. Thankyou Soo Much @drbyte \nI am following what you have done...It's a great effort And will start the new issue If i am getting problems. ",
    "perffy": "Unfortunately i havent tried anymore.\nNow i have installed the https://github.com/rappasoft/laravel-5-boilerplate, in which is included the Spatie/Permission package and there i have tried the same thing and i get the same error.. By using the browser. ",
    "gamevnlc": "Same issue like this. \nDo you have any idea how to fix it ?. nvm I found the problem. There is some config in request file. it cause the problem\n@perffy check laravel5-boilerplate has authorized in request, So you have to modify in request file  . @SBeausoleil \nI fixed it without plugin.  My issue is that I don't specific the role in the authorize method in my custom request. This issue happen in Laravel5-bolierplate. ",
    "SBeausoleil": "I have the same problem. @gamevnlc Did you fix this by installing the laravel5-boilerplate or did you fix it without that plugin?\nAlso in my case, I keep having this problem even with the route outside of any middleware groups and with no directly attached middleware.. ",
    "c4sti3l": "Thanks!. ",
    "opqclick": "After Extending Models Role And Permission it showing that \"Base table or view not found: 1146 Table 'database_name.role_users' doesn't exist (SQL: insert into role_users (role_id, user_id) values (1, 1))\n\". Yes but that is solved but facing new issues.\n$permissions = Permission::where('status', 1)\n            ->pluck('name','name');\nwhen i amtrying this $role->givePermissionTo($request->permissions);\n\"Integrity constraint violation: 1048 Column 'role_id' cannot be null (SQL: insert into role_has_permissions (permission_id, role_id) values (1, ))\"\n. ",
    "lvruizheng": "$this->app->configure('permission');\nAfter the execution of this command, it will be possible. ",
    "fsavina": "No worries, thanks!. I'm afraid I can't because it's an internal project under development and I haven't been told yet if it's gonna be release as open source or not.\nAnyways, the problem is caused by a resource controller and model policy developed according to the standard docs.\nAny action in the controller receives a model instance on which we call the authorize method as shown above and as indicated here.\nI'm quite confident that you should be able to reproduce the error simply by following the examples in the Laravel auth docs page. Let me know if you need more info.. ",
    "daguilarm": "Same error... my Controller:\nGate::denies('create plot', Plot $plot);\nI'm back to 2.11.0 and no problems. ",
    "gitBC": "@drbyte Was just looking at a similar problem. I wanted to propose that you also read the config value instead from the config/permission.php file first as opposed to the Laravel defaults so that it can be overridden \n```\npublic static function getDefaultName($class): string\n    {\n        //$default = config('auth.defaults.guard');\n       $default = isset( config('permission.default_guard') ) ? config('permission.default_guard' : config('auth.defaults.guard') ;\n    return static::getNames($class)->first() ?: $default;\n}\n\n```. ",
    "ssheduardo": "Yes\n\n. Some help?. I made a mistake,\nIs not role is can\n@can('view_orders', 'admin')\n    My string\n@endcan\nIf apply the befor code , return false but \n@if(auth('admin')->user()->can('view_orders'))\n    Hi, It's demo\n@endif\nReturn true.\n. ",
    "leopado": "Hi, thank for your review.\nInitially I sure wanted to rely on events fired by Eloquent and for creating/updating and deleting roles or permissions.  \nBut when a role or a permission is assigned to someone I wasn't able to listen on Eloquent events and\nmy recent projects need to log these actions also to be compliant with the recent GDPR privacy law.\nIf you know a best way to do it using the native events of Eloquent I'll be happy to use them instead of forking your package :)\nIf you need more info or to be more well documented in my PR I'm here.\nThanks a lot.. ",
    "ChrisSFR": "Just a short question. The events for syncing models is something I am currently facing. Precisely because nova came out and I want to call some actions, when a role gets assigned.\nMaybe a possible solution: creating a MorphPivot Model. Then package users could observe the Pivot create/delete actions and fire events using the built in Eloquent events like @freekmurze suggested.\nBut that requires to add withPivot methods to the HasRoles trait and the Role Model. Furthermore creating the pivot models.\nI don't know if its possible, but I'll try it out. Any doubts about this?\n. >  I don't know if its possible, but I'll try it out. Any doubts about this?\nOk it seems laravel doesn't trigger sync and attach actions on pivot model events. So my suggestion will not work.. ",
    "Monsterhulk": "Sorry again,\ni think i have to elaborate this a little bit. With permissions i could do somethin like\n$role->permissions()->detach();\n        $role->permissions()->attach($permissions);\nWith users i have to do it like \nforeach($users as $user){\n            $user=User::find($user);\n            if($user!= null){\n                $user->roles()->sync($role->id);\n            }\n        }\nand even forth. This seems to be inconvenient cause i have to validate a lot (not even if user is null) for this operation. Is there an other way to achieve the same?\nSorry for this dumb question . ",
    "ddzobov": "$this->cache->flush();\nWhy flush? This probably resets all cache.. ",
    "klincheg": "thanks. Will fix it till monday - it will flush only spatie cache. . @drbyte thanks for your comment.  Will try to explain my changes. \n1. I can't revert it because in my PR code selects only needed data. In previous version it was \"select all and after that filter\" But in old version i have a time problem if there are more than 150 permissions in the table (old code in some cases worked more than 2-3 secs, and after my changes time was reduced to 300-500ms) \n2. PR title changed to more relative. . > I'd like to open this as a separate PR, if that's ok? It will still contain the great work from @klincheg and the alterations from @drbyte, but with the additional model-permission caching.\nit will be cool ) thanks \nPS sorry. Was offline during long time. If I can help you just let me know ) . ",
    "fullstackfool": "Tested this locally on a large SaaS product and the speed increase was dramatic.\nWould it be possible to get a very rough estimate of when this will be merged in?\nIs there further work needed? If so I would be willing to help if needed.. So far we've tried this with a subset of our users, ~400, with ~500 permissions. Everything is role-based for the moment (one of the main reasons for us experimenting with this package is to allow direct user->permission association). This gives a user/role combination of slightly over 1200. Roles/permissions is over 2100. Quick query shows we have a user/permission count of ~43000.\nPermission checks are spread between blade @can for what they can see and middleware checks for almost almost every single route. @can permission checks vary between 150 to 200 depending on the page loaded.\nThere's another specific set of users, ~500, who are mostly associated with another subset of permissions, which we are considering new ways of handling. This set of 'permissions' is more along the lines of a can do b when c.d.e. This leads to a possible permission list of >400,000. Of course, we're not sure whether this should be treated as a set of permissions yet - we may be trying to fit a square peg in a round hole, but your proposed alterations certainly give more felixibility to the system.\nI'll have a test with the above code see how far I can push it before flames erupt from my rig.. Sorry for the late response, hectic here.\nWith the section below, are we not overwriting each result with the next permission call?\nreturn $this->cache\n            ->remember($this->cacheKey, config('permission.cache_expiration_time'), function () use ($params, $permissionClass) {\n                return $permissionClass->where($params)->with('roles')->get();\n            });\n~~Imagine you meant:~~ EDIT: Ignore that, we wouldn't be able to clear the cache if they were all unique\n~~$key = $this->cacheKey . ($params ? '.' . implode('.', array_values($params)) : '');~~\nStill, with the proposed non-tagging changes, this returns incorrect results for me as it just fetches the last cached entry, irrelevant of new params passed.\nI think the only way to cache the results without tagging is to cache the whole lot then filter them as before?\nThe tests so far look good, 100 roles, 250 users, assigned 1-4 roles, assigned 30-500 permissions each.\nI'm also playing with caching the user-permission result further up the chain. This improves the speed even further, for example one set of tests went from 76 seconds to 4!\nedit2: With some improved checks for stability it's now 8.5 seconds. But that is still 32250 calls to hasPermissionTo(), spread across 250 users, in under 10 seconds!. Hopefully the below isn't too hideous. As stated above, this results in speed increases over an order of magnitude faster.\nNot shown below but PermissionRegistrar has also been made a singleton.\nCaching the result of a permission check directly against the model instance also would allow users to clear cache for a single model, as opposed to the entire permissions cache.\n```php\n    /\n     * Determine if the model may perform the given permission.\n     \n     * @param string|int|\\Spatie\\Permission\\Contracts\\Permission $permission\n     * @param string|null                                        $guardName\n     \n     * @return bool\n     */\n    public function hasPermissionTo($permission, $guardName = null): bool\n    {\n        if (PermissionRegistrar::$cacheIsTaggable) {\n            $config = config('permission');\n        return cache()\n            ->tags($this->getCacheTags($config, $permission))\n            ->remember($this->getCacheKey($config, $permission), $config['cache_expiration_time'],\n                function () use ($permission, $guardName) {\n                    return $this->checkHasPermissionTo($permission, $guardName);\n                });\n    }\n\n    return $this->checkHasPermissionTo($permission, $guardName);\n}\n\n/**\n * Check the uncached permissions for the user.\n *\n * @param      $permission\n * @param null $guardName\n *\n * @return bool\n */\npublic function checkHasPermissionTo($permission, $guardName = null)\n{\n    $permissionClass = $this->getPermissionClass();\n\n    if (is_string($permission)) {\n        $permission = $permissionClass->findByName(\n            $permission,\n            $guardName ?? $this->getDefaultGuardName()\n        );\n    }\n\n    if (is_int($permission)) {\n        $permission = $permissionClass->findById(\n            $permission,\n            $guardName ?? $this->getDefaultGuardName()\n        );\n    }\n\n    if (!$permission instanceof Permission) {\n        throw new PermissionDoesNotExist;\n    }\n\n    return $this->hasDirectPermission($permission) || $this->hasPermissionViaRole($permission);\n}\n\n/**\n * Construct the key for the cache entry.\n *\n * @param array $config\n * @param       $permission\n *\n * @return string\n */\nprivate function getCacheKey(array $config, $permission)\n{\n    $permission = $this->getPermissionKey($config, $permission);\n\n    return implode('.', [\n        $config['cache_key'],\n        get_class($this),\n        $this->getKey(),\n        $config['models']['permission'],\n        $permission,\n    ]);\n}\n\n/**\n * Construct the tags for the cache entry.\n *\n * @param array $config\n * @param       $permission\n *\n * @return string\n */\nprivate function getCacheTags(array $config, $permission)\n{\n    $permission = $this->getPermissionKey($config, $permission);\n\n    return [\n        $config['cache_key'],\n        $config['models']['permission'] . '.' . $permission,\n        get_class($this) . '.' . $this->getKey(),\n    ];\n}\n\n/**\n * Get the configured key to cache the model by.\n *\n * @param array $config\n * @param       $permission\n *\n * @return mixed\n */\nprivate function getPermissionKey(array $config, $permission)\n{\n    if ($permission instanceof $config['models']['permission']) {\n        $permission = $permission[$config['cache_attribute']];\n    }\n\n    return $permission;\n}\n\n```. I'd like to open this as a separate PR, if that's ok? It will still contain the great work from @klincheg and the alterations from @drbyte, but with the additional model-permission caching.. > Should the duplication of code for caching be consolidated somehow?\nIndeed. I've attempted to tidy up a little in PermissionsRegistrar - what do you think about the below?\n```php\n<?php\nnamespace Spatie\\Permission;\nuse Illuminate\\Support\\Collection;\nuse Spatie\\Permission\\Contracts\\Role;\nuse Illuminate\\Contracts\\Auth\\Access\\Gate;\nuse Illuminate\\Contracts\\Cache\\Repository;\nuse Spatie\\Permission\\Contracts\\Permission;\nuse Illuminate\\Contracts\\Auth\\Access\\Authorizable;\nuse Spatie\\Permission\\Exceptions\\PermissionDoesNotExist;\nclass PermissionRegistrar\n{\n    /* @var \\Illuminate\\Contracts\\Auth\\Access\\Gate /\n    protected $gate;\n/** @var \\Illuminate\\Contracts\\Cache\\Repository */\nprotected $cache;\n\n/** @var string */\nprotected $permissionClass;\n\n/** @var string */\nprotected $roleClass;\n\n/** @var string */\nprotected $cacheKey;\n\n/** @var int */\nprotected $cacheMinutes;\n\n/** @var bool */\npublic static $cacheIsTaggable = false;\n\n\n/**\n * PermissionRegistrar constructor.\n *\n * @param \\Illuminate\\Contracts\\Auth\\Access\\Gate $gate\n * @param \\Illuminate\\Contracts\\Cache\\Repository $cache\n */\npublic function __construct(Gate $gate, Repository $cache)\n{\n    $this->gate = $gate;\n    $this->cacheKey = config('permission.cache.key');\n    $this->roleClass = config('permission.models.role');\n    $this->permissionClass = config('permission.models.permission');\n    $this->cacheMinutes = config('permission.cache.expiration_time');\n\n    self::$cacheIsTaggable = ($cache->getStore() instanceof \\Illuminate\\Cache\\TaggableStore);\n    $this->cache = self::$cacheIsTaggable ? $cache->tags(config('permission.cache.key')) : $cache;\n}\n\n/**\n * Register the permission check method on the gate.\n *\n * @return bool\n */\npublic function registerPermissions(): bool\n{\n    $this->gate->before(function (Authorizable $user, string $ability) {\n        try {\n            if (method_exists($user, 'hasPermissionTo')) {\n                return $user->hasPermissionTo($ability) ?: null;\n            }\n        } catch (PermissionDoesNotExist $e) {\n        }\n    });\n\n    return true;\n}\n\n/**\n * Flush the cache.\n *\n * @return bool\n */\npublic function forgetCachedPermissions(): bool\n{\n    return self::$cacheIsTaggable ? $this->cache->flush() : $this->cache->forget($this->cacheKey);\n}\n\n/**\n * Get the permissions based on the passed params.\n *\n * @param array $params\n *\n * @return \\Illuminate\\Support\\Collection\n */\npublic function getPermissions(array $params = []): Collection\n{\n    $permissions = $this->cache->remember($this->getKey($params), $this->cacheMinutes, function () use ($params) {\n        return self::$cacheIsTaggable ? $this->getTaggedPermissions($params) : $this->getUntaggedPermissions();\n    });\n\n    if (!self::$cacheIsTaggable) {\n        foreach ($params as $attr => $value) {\n            $permissions = $permissions->where($attr, $value);\n        }\n    }\n\n    return\n    $permissions;\n}\n\n/**\n * Get the permissions for a taggable cache.\n *\n * @param array $params\n *\n * @return \\Illuminate\\Support\\Collection\n */\npublic function getTaggedPermissions(array $params): Collection\n{\n    return $this->getPermissionClass()\n        ->when($params, function ($query) use ($params) {\n            return $query->where($params);\n        })\n        ->with('roles')\n        ->get();\n}\n\n/**\n * Get the permissions for a non-taggable cache.\n *\n * @return \\Illuminate\\Support\\Collection\n */\npublic function getUntaggedPermissions(): Collection\n{\n    return $this->getPermissionClass()->with('roles')->get();\n}\n\n\n/**\n * Get the key for caching.\n * \n * @param $params\n *\n * @return string\n */\npublic function getKey(array $params): string\n{\n    if ($params && self::$cacheIsTaggable) {\n        return $this->cacheKey . '.' . implode('.', array_values($params));\n    }\n\n    return $this->cacheKey;\n}\n\n/**\n * Get and instance of the permission class.\n *\n * @return \\Spatie\\Permission\\Contracts\\Permission\n */\npublic function getPermissionClass(): Permission\n{\n    return app($this->permissionClass);\n}\n\n/**\n * Get and instance of the role class.\n *\n * @return \\Spatie\\Permission\\Contracts\\Role\n */\npublic function getRoleClass(): Role\n{\n    return app($this->roleClass);\n}\n\n}\n```. > getTaggedPermissions vs getUntaggedPermissions ... if $params is null, aren't they identical (ie: the when would be skipped, thus leaving them the same)? Couldn't there be just one version of this? It wouldn't need to be a separate method then either.\nWell, that's embarrassing...\n\nIn your revised forgetCachedPermissions(), you removed the ->tags() call in the flush. Was that intentional? is that because of your changed declaration of $this->cache in the constructor?\nreturn self::$cacheIsTaggable ? $this->cache->flush() : $this->cache->forget($this->cacheKey);\n\nThats the idea - do you think it's too confusing a way of doing it?. > > The naming of checkHasPermissionTo() inside HasPermissions could be confused with the newly added method checkPermissionTo()\n\nI wonder if renaming the new checkHasPermissionTo to uncachedHasPermissionTo would suit. It's more explicit on its intent so doesn't require documenting.\n\nForgot to show the changes for that, came up with hasUncachedPermissionTo - either will do I think \ud83d\ude04 . > Ya, my eye is on the many added cache-related helper methods in the HasPermissions trait. I find myself itching for a separate class for cache handling, but wonder if they fit in the Registrar just as well. Unfortunately since they're all context-relevant to Permissions, they do also fit equally well there in the trait ... it's just that it's getting so big ...\nIt is. And it would get even bigger once we consider adding permission/model specific cache-busting methods. And there is also role/model caching, which could also be added. Ok, so maybe this all needs to be extracted then. . Cheers for the pointers, and the config suggestion is a good first step.\nSigning off for the night, so I'll sort the changes tomorrow and if you're happy with the revised changes I'll pull them into this branch for the pr. \nThanks for your help so far!. > Can't return bool here. Returns void.\nIlluminate\\Contracts\\Cache\\Store and Illuminate\\Contracts\\Cache\\Repository, as well as all the cache drivers have the return type set as bool  for the forget() and flush() methods - are you sure we can't add the return type here?. I'll revert the change.\nThe package tests, project tests and manually playing around with it manually works fine and returns consistent results. I don't doubt your own findings, I'm actually concerned about my own testing.. Happy for me to pull changes into this PR?\n```php\nclass PermissionRegistrar\n{\n    //\n/**\n * PermissionRegistrar constructor.\n *\n * @param \\Illuminate\\Contracts\\Auth\\Access\\Gate $gate\n * @param \\Illuminate\\Contracts\\Cache\\Repository $cache\n */\npublic function __construct(Gate $gate, Repository $cache)\n{\n    $this->gate = $gate;\n    $this->cacheKey = config('permission.cache_key');\n    $this->roleClass = config('permission.models.role');\n    $this->permissionClass = config('permission.models.permission');\n    $this->cacheMinutes = config('permission.cache_expiration_time');\n\n    self::$cacheIsTaggable = ($cache->getStore() instanceof \\Illuminate\\Cache\\TaggableStore);\n    $this->cache = self::$cacheIsTaggable ? $cache->tags(config('permission.cache_key')) : $cache;\n}\n\n//\n\n/**\n * Flush the cache.\n */\npublic function forgetCachedPermissions()\n{\n    self::$cacheIsTaggable ? $this->cache->flush() : $this->cache->forget($this->cacheKey);\n}\n\n/**\n * Get the permissions based on the passed params.\n *\n * @param array $params\n *\n * @return \\Illuminate\\Support\\Collection\n */\npublic function getPermissions(array $params = []): Collection\n{\n    $permissions = $this->cache->remember($this->getKey($params), $this->cacheMinutes, function () use ($params) {\n        return $this->getPermissionClass()\n            ->when(($params && self::$cacheIsTaggable), function ($query) use ($params) {\n                return $query->where($params);\n            })\n            ->with('roles')\n            ->get();\n    });\n\n    if (!self::$cacheIsTaggable) {\n        foreach ($params as $attr => $value) {\n            $permissions = $permissions->where($attr, $value);\n        }\n    }\n\n    return $permissions;\n}\n\n/**\n * Get the key for caching.\n *\n * @param $params\n *\n * @return string\n */\npublic function getKey(array $params): string\n{\n    if ($params && self::$cacheIsTaggable) {\n        return $this->cacheKey . '.' . implode('.', array_values($params));\n    }\n\n    return $this->cacheKey;\n}\n\n/**\n * Get an instance of the permission class.\n *\n * @return \\Spatie\\Permission\\Contracts\\Permission\n */\npublic function getPermissionClass(): Permission\n{\n    return app($this->permissionClass);\n}\n\n/**\n * Get an instance of the role class.\n *\n * @return \\Spatie\\Permission\\Contracts\\Role\n */\npublic function getRoleClass(): Role\n{\n    return app($this->roleClass);\n}\n\n}\n```\nconfig:\n```php\nreturn [\n//\n\n/*\n * By default all permissions will be cached for 24 hours unless a permission or\n * role is updated. Then the cache will be flushed immediately.\n */\n\n'cache_expiration_time' => 60 * 24,\n\n/*\n * The key to use when tagging and prefixing entries in the cache.\n */\n\n'cache_key' => 'spatie.permission.cache',\n\n/*\n * When checking for a permission by passing a Permission instance,\n * this key determines what attribute on the Permissions model is\n * used to cache against.\n *\n * Ideally, this should match your preferred way of checking permissions, eg:\n * `$user->can('view-posts')` would be 'name'.\n */\n\n'cache_default_model_attribute' => 'name',\n\n];\n```. @cbernard73 Your argument makes perfects sense, and the solution you suggested is the purpose of this PR. If you take a look through the above conversation, especially the first comment, you can see the plan is to cache the model/permission combination, under tagged keys.\nLet me know if you have any idea/questions. > In the end I stumbled on a great discovery:\n\nlaravel-permission/src/PermissionServiceProvider.php\n\nA nice solution. The only catch I can find is that it uses array_merge, so only merges one level deep. Anyone declaring the cache key in a local permissions config will need to ensure they declare all the sub-keys, for instance:\nphp\n'cache' => [\n    'expiration_time' => 60 * 24,\n],\nwill generate errors. It would need to be:\nphp\n'cache' => [\n    'expiration_time' => 60 * 24,\n    'key' => 'spatie.permission.cache',\n    'default_model_attribute' => 'name',\n],\nI feel this is acceptable as it is a caveat in any package using mergeConfigFrom().\nI will update the PR with the agreed changes so we can have a final check-over.. The usages of $config  in HasPermissions, are we reverting those to config() calls? I'd like to keep the optimised (however small an optimisation it may actually be) array version, but if we are concerned about fallbacks then they'll need to be changed.. Had the same thought, the use of statics has cleaned up all the $config I was passing around in HasPermissions\nI've noticed that in ServiceProvider we are registering the config twice? Once in boot and once in register\n```php\n    public function boot(PermissionRegistrar $permissionLoader)\n    {\n        if (isNotLumen()) {\n            $this->publishes([\n                DIR . '/../config/permission.php' => config_path('permission.php'),\n            ], 'config');\n        //\n        }\n        //\n    }\npublic function register()\n{\n    if (isNotLumen()) {\n        $this->mergeConfigFrom(\n            __DIR__.'/../config/permission.php',\n            'permission'\n        );\n    }\n\n    $this->registerBladeExtensions();\n}\n\n``\nI can't find any reason to have it twice and [the docs](https://laravel.com/docs/5.7/packages#configuration) advise registering the config inregister. If removed fromregisterthe tests fail, and nothing happens if removed fromboot()`. So I'm pretty sure the config was already being merged \ud83d\ude04 \n. > @fullstackfool thanks for your confirmation. I've read back through the whole conversation now that I have a slightly better understanding, and I have one question about the approach being taken.\n\nIf you use package.model.permission as they cache key, won't you end up with 1:1 relationship between the Model_has_Permission table and the cache? Would it better to limit the key to just cache.model?\n\nDo you mean cache all the permissions for each model, under one key? We could, but then we would still have to loop over them again and check each one against the assertion. My thinking is that the indexing/searching of the cache store will be more efficient than doing it ourselves? \nI can certainly give it a test and compare the testing times, if you wish?. > Yes, I mean cache all permissions for each model under one key. I know it adds more work to the application layer (and I'll admit that I don't know the consequences of that right now), but if you use model.permission as the key, you are leaving the work at the database layer, in which case it seems to me like you're just moving the problem from the Model_Has_Permissions table to the Cache table.\nThe problem isn't so much the database structure, it's the repeated database connections and the parsing of large sets or permissions to find a specific key. Ultimately what we are interested in is can a do b? A single 1-to-1 relationship with a boolean result.\nAs it stands there are a lot of loops in the current structure, especially if the call to hasPermissionTo is made using a permission name/id, instead of an instance.\nThe structure you suggested is certainly possible, but I feel there is a couple of issues: \n1) It would require a fair amount of jigging around inside HasPermissions to make it work, so might be more appropriate for a major release? This PR is intended to be as non-disruptive as possible, to enable a minor release, with a mind to review the caching as a whole and release a more designed system later on.\n2) Memcached and Redis, which I imagine have the lions share of Laravel caching, are both perfectly suited to handling hundreds of millions of rows efficiently, I'm not sure about moving that processing to php because we want to save a few tens of thousand rows from entering the cache? Although there are still the calls to the cache to consider.\n\nIn my application, the dashboard screen is the heaviest user of the permissions system. There are around 50 @can calls, but they're all for the same user. If we store all of a user's permissions in one single cache entry, then I'd get the permissions in one request to the cache. \n\nSimiliar situation on my test project, although the permission checks breach 200 on the dashboard. \nYou're right that you'd get all the permissions in one go, and could loop them and check. This could  be quicker than multiple calls to the cache, but on projects with larger sets of permissions and pages with less checks the efficiancy of this method decreases, as it could have been accomplished in few calls to the cache. Ultimately some side-by-side tests would be good, are you interested in forking and seeing what you can come up with? I'm unlikely to have time to do it in the next week.\n\nYou mentioned in your first post that during your tests the queries to the database went from 1800+ to 0. What are you using for your cache in those tests?\n\nTested with memcached, redis, array and file, although the last 2 are largely pointless. Both memcached and redis gained a ~9x speed increase, and cut the calls to the database to 0 for permission checks.\n. @drbyte The config changes are in the PR now. Still feels a bit weird to be passing around the PermissionRegistrar like a party favor, but HasPermissions is much cleaner now, and ultimately, as you said, we can come back to this for a proper look at caching in a dedicated handler.\nWould you mind taking another look when you are able?. I'll have a go at squashing the commits now, although a bleary-eyed attempt at the weekend somehow removed one of your commits too. . Got it there in the end! Because the original commits from @klincheg were so long ago I had to pull in master, but that meant there were a ton of commits splitting his and mine when squashing.\nGot it down to 4 though, would this be ok?. Fantastic! Thanks to @klincheg for laying the groundworks, and @carlcassar for some pointers along the way.\nPing me if you are at all interested in collaborating on a larger caching structure for the next release\nThanks for your patience. @ShahinSorkh Are you able to give any more information as to the environment/lead-up to this issue, so we can attempt to reproduce it?\nGiven your initial comment was several days ago, this won't be linked to the very recent caching changes - have you tried updating to the latest version and testing again? The caching strategy is now quite different, so you may get different results. If the same issues are occurring, it sounds more likely there's an issue with the caching environment you are using?. @drbyte #940 looks like a nice and simple solution!. @NizarBlond Having trouble replicating the issue, I'm able to assign/revoke roles with no issues on Lumen.\nWould you be able to provide an example of where you are assigning the role, as well as your permissions.php config file? \nCheers. Can I ask if what version of lumen you are on, and are you caching the config in any way?. I'm sorry, @NizarBlond, I'm having no luck replicating this. \nPerhaps @drbyte might have better luck?\nAlso, if the repo in question is private, are you able to reproduce the issue yourself in a public repo, that we can then inspect?. @jafar690, what version of Laravel/Lumen are you using?\nDoes composer clearcache help at all?. Can you try app(Spatie\\Permission\\PermissionRegistrar::class)->forgetCachedPermissions()?. Apologies, incorrect repo. \ud83d\ude28 . Apologies - tried very hard not to press my auto-format shortcut while doing this, apparently, I failed. . Good spot, thank you.. ",
    "milo526": "I think there is limited use to add this functionality to this package since for most people permissions will be more of an internal thing.\nPerhaps try using laravel's build in translation methods.\nhttps://laravel.com/docs/5.6/localization\nYou could use the English translations as the keys for other languages.. ",
    "enricouniurb": "Hi @drbyte,\nthank you for your kindly response. I respond below each question.\nIn your example you listed 2 roles, but\nAre you wanting the user to choose 1 role from 2-5 options, and have only the rights associated with that 1 role? Where would you want them to choose that?\nYes I would like to choose after login 1 role, if the user has multiple roles, and have only the rights associated with that 1 role.\nAlso when I use the blade directive like @role I would like that verify if the logged user has only the chosen role. \nOr are you specifically wanting to treat \"admin\" different from \"everything else\"?\nThis option could be a case of the previous point.\nThe approaches for each may be different. I'd like to understand your need better.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub https://github.com/spatie/laravel-permission/issues/738#issuecomment-389159444 , or mute the thread https://github.com/notifications/unsubscribe-auth/Ak3aOyhySDTP-230xFQUE-GoAq1bAsE_ks5tytLVgaJpZM4T_XxS .  https://github.com/notifications/beacon/Ak3aOwkSp_RpMlOX3obkvToLyDFIVnjlks5tytLVgaJpZM4T_XxS.gif \n. ",
    "SamuelNitsche": "Wow, my bad. I forgot to use \"hasRoles\" in the user model.. Thanks for the fast response!\nWhat I need to do is for example hide a button if a user does not have the permission to do 3 different actions. Of course I could simply use an if statement like \nif (auth()->user()->hasPermissionTo('create accounts') && auth()->user()->hasPermissionTo('edit accounts') && auth()->user()->hasPermissionTo('delete accounts')) {\n    //\n} \nbut I think a simple hasAllPermissions method would be way easier and better to maintain.\nThen I could do something like\nif (auth()->user()->hasAllPermissions('create accounts|edit accounts|delete accounts')) {\n    //\n}. I understand. This is definitely a way to solve this problem, but I still think that this method would be very helpful and would fit well into the overall system. Is there anything I could do to support you? Should I implement this functionality and open a pull request?. ",
    "pxpm": "Sure .. That was the problem. \nThanks @drbyte . ",
    "bilfeldt": "@drbyte Thank you for a detailed explanation. I apologise for this. The issue was caused by the fact that we used an older version of the package, where this functionality was not yet implemented.. ",
    "fake-fur": "thanks for the response and sorry for my awkward question phrasing\ni meant multi-tennant essentially, where a user has a different set of permissions per tennant they have access to\n. thanks again but it's a multi-tennant single database so i think this is difficult to do with this package no?\ni think my requirement is not so usual\n. well there are approx 800 tennants (growing to 1000+) and each can have several users that will need to have permissions on each tennant they can access :/\npermissions would be say 100 total across the app\n. >Context question: can you explain \"why\" these users have permissions on other tenants?\n\n(I don't know for certain, are they \"administrators\"? are they employees of multiple tenants? Are >they IT support techs who need certain access across tenants? Are they traveling professors >who need certain permissions at multiple places where they teach?)\n\na user may work at different sites in different roles (here i use role to mean a set of permissions), and so will need a separate set of permissions for each \"tennant\"\n\nWill the permissions across tenants be \"identical\"? ie: will user A have exactly same permissions >in company X and company Y? Will user B also have exact same permissions as user A, just >maybe with company Z and X?\n\nthere would be a system-wide set of permissions for the app (which would grow as more functionality is added) that roles are made from, so yes global set of available permissions but no a given user can have (in theory) completely different permissions in one tennant from another tennant\nagain thanks very much for taking time to respond to me\n:)\n. a user can belong to many tenants. they are currently all in individual databases. the old system is many single tenant databases - the new system in a single multi-tenant database. yes but it got really messy trying to maintain a 3 way join table and get lazy loading working in a way that didn't mangle my brain\nthanks so much for your thoughts and input - it really is invaluable\n:). ",
    "lloy0076": "It has nothing do do with caching - the underlying table(s) have:\nINSERT INTO `model_has_roles` (`role_id`, `model_id`, `model_type`) VALUES\n    (13, 194, 'App\\\\User'),\nThe SQL which is not cached is not looking for App\\\\EmailOnlyUser - it is looking for App\\\\User (i.e. no, it's not cached).\nI also have tried with:\n% php artisan cache:clear. This is almost certainly the issue:\nhttps://github.com/spatie/laravel-permission/blob/master/src/Traits/HasRoles.php#L28\n/**\n     * A model may have multiple roles.\n     */\n    public function roles(): MorphToMany\n    {\n        return $this->morphToMany(\n            config('permission.models.role'),\n            'model',\n            config('permission.table_names.model_has_roles'),\n            'model_id',\n            'role_id'\n        );\n    }\nIf I've got this correct - caveat polymorphic many-to-many is not something I'm an expert at - there may be various solutions:\n\nOn role creation, create a relation-type for all parent clases as well;\nChange the way that this method, roles() works however if anything expects it to return a Builder as opposed to a Collection then this could become tricky for compatibility (they often behave the same but not always and this is a public function so it's a compatibility issue too);\nDeclare this as expected behaviour; or \nAdd something to hasRole(...) (a few lines down) to handle sub-classes that doesn't need $this->roles() (because that only works for the current class);\nSomething else.\n\nThree (3) is obviously the easiest path but I'm not sure it is expected behaviour.\nOne (1) has issues if the code changes.\nTwo (2) or Four (4) seem to be relevant candidates.\nBut I don't always think of the most appropriate or fancy solution - if I could do that all the time, I'd have solved the world's problems already and ended war forever (\ud83c\udf37). . ",
    "mvatansever": "Just add a new Permission entity and extend the \"Spatie\\Permission\\Models\\Permission\" class. Then add the new Permission entity to configuration file:\nconfiguration.php file:\n'models' => [\n\n    /*\n     * When using the \"HasRoles\" trait from this package, we need to know which\n     * Eloquent model should be used to retrieve your permissions. Of course, it\n     * is often just the \"Permission\" model but you may use whatever you like.\n     *\n     * The model you want to use as a Permission model needs to implement the\n     * `Spatie\\Permission\\Contracts\\Permission` contract.\n     */\n\n    'permission' => App\\Models\\Permission::class,\n\n...\nIn the new Permission entity you should add the new columns and you should create a new migration to add this columns. . ",
    "volkankurt2": "Thank you @mvatansever but It did not work. ",
    "scottybo": "brilliant, thank you! . ",
    "masterix21": "Thank you. Thank you @robjbrain . ",
    "D34DlyM4N": "i figure it out\ni changed the RolesModel to extends Model\nchanged my code to \n$role = Role::findOrFail($request->id);\n $role->delete()\nand now it's work perfectly . ",
    "rameshmakos": "$permissions = Permission::get()->pluck('name'). ",
    "mahefooz": "@drbyte thanks for the nice response with perfect example. One thing missing is the middleman (Manager). The example clearly outlines the Admin and User roles. Can you throw some light, if Manager comes in between, what need to be done?. @drbyte Maybe this question doesn't belong here, but I'm taking the liberty to ask. Based on your suggestion, I've gone through the 'Has Many Through' relationship and it will perfectly suit the requirement. But it has support only for one intermediary. What if there are multiple intermediaries (managers), what is the best possible way?. ",
    "samanzamani": "I find problem.\nI add this Gate for check superadmin in AuthServiceProvider:\npublic function boot() {\n        $this->registerPolicies();\n        Gate::before(function($user, $ability) {\n            if($user->can('SUPERADMIN_ACCESS')) {\n                return true;\n            }\n        });\n    }\nand somehow can cause problem. i change can to hasPermissionTo and problem solved.. ",
    "mailnike": "@williamoliveira I am facing exact same problem. I have more than 200 permissions and SaaS solution. with only 50+ users, my permission_role table has already crossed 4000 entries. I applied your solution but it didn't reduce the memory usage ( at the moment more than 70mb :( ) \nI was able to update the code you mentioned in the \"vendor >> spatie >> laravel-permission >> src >> PermissionRegistrar.php\" file. \nHowever, what file I need to modify to register permissionregistrar class as singleton? sorry, basically I didn't understand this line. \nregistered as a singleton\n$this->app->singleton(PermissionRegistrar::class);\nAny help would be appreciated. My page load should not take more than 2 seconds, but now it takes on an average 10 sec. \n . @williamoliveira thanks for the quick reply. I updated 'AppServiceProvider' > 'register' method with '$this->app->singleton(PermissionRegistrar::class);' ... however, it doesn't seem to have much difference. question, do I need to resync these permissions? or some step I might be missing?. @Nowi5  Thanks for your reply. Are you saying that I should first modify the table 'role_has_permissions'? adding a field 'tenant_id'? then add where condition in the TRAIT: HasPermissions.php (Vendor >> Spatie)? Let me know if this makes sense. Also, if you think you can fix this, please let me know. I will be more than happy to hire you (freelance work).. I moved to Bouncer due to memory issue. Otherwise Spatie was wonderful but it was taking 15+ seconds to load simple pages. Bouncer is very similar, took less than hour to migrate. . ",
    "kamov": "Why this library don't use json fields for cache roles and permissions?\nOr even for remove pivot table so it have roles and permissions table and then those models that need to use roles and permissions like users add field roles_json and permissions_json. I am posting the same here regarding the performance issue:\nWhy this library don't use json fields for cache roles and permissions?\nOr even for remove pivot table so it have roles and permissions table and then those models that need to use roles and permissions like users add field roles_json and permissions_json. I may be wrong but why all this tables for roles and permissions, why it could not just be:\n\nrole table with id, name and permission_json (text or json field)\nusers table with role_id (foreign key) and permissions_json (as text or json field) - or any other table that require roles/permissions)\n\nThen we can just check if in_array($permission, $user->permission_json) \nand $user_permission_json can be an array which merge custom user permissions with role permission after fetching.\nSince the check will be done only on current user, so there is just 1 user.\n. I see Bouncer, but I didn't want use it since they seem have the same issue with performance, see here https://github.com/JosephSilber/bouncer/issues/345. I guess why they use gate::before and not define.\nI think that gate::before is called each time can() is called or any other check if ability.. Thanks for your reply.\nI got your point, and yes I understand that it can work also a global namespace for all guard.\nI am implementing this because there is this feature.\nI think that is also nice to have it, since many permissions for admin side like for example manage settings is not required for frontend.\nBut is also true that some are shared, like for example create articles is shared on admin and frontend.\nWould be good that if guard_name is null, then it can be shared between guard, and if specified, then is only per guard.\nBut I didn't yet understand regarding my first question, if we specify the guard_name in model, then how it can be shared between all guard?\n. Thanks for information regarding future change.\nI don't see the point to have separated model per guard, since it will be just the exact same copy with just different variable value.\nNot sure also why remove it, since is there, could be just possible to disable, as I understand, by keeping guard_name = null, am I right?\nOr instead of single guard_name, could be an array of guard like guard_name = ['api', 'admin', 'web'];\nI spent already weekend integrating the guard, by making also seed script with all my permissions per guard. I am not sure now if keep them or refactor without guard.\n. I have even tested by not adding guard_name in user model, with HasRoles trait, and there is not any error generated... so I am even more confused now ... oh You are right... thank you!\nso even more quick Permission::whereGuardName('admin')->get();. Seem my mistake is missing guard_name.\nIf I do this check in controller work fine:\nif(auth()->user()->hasPermissionTo('manage permission', 'admin')) {\ndie('you are allowed');\n}\nHowever, I am not sure how to check via middleware route with guard_name, I try this but not work:\nRoute::group(['middleware' => ['permission:manage permission', 'admin']], function () {\n    //\n});\nIs missing in doc example with guard_name on middleware route.\nI see in doc something like this:\nRoute::group(['middleware' => ['role:super-admin','permission:publish articles']], function () {\n    //\n});\nBut why check permission and roles together and how this is handle by library?\nI mean a role have already a set of permission, so why add also check by permission?\n. Thanks I see after posting this issue...\nBut this way seem that have other issue in performance, see \nhttps://github.com/spatie/laravel-permission/issues/804\n. I see someone are using controller callAction() by overriding it like:\n```\npublic function callAction($method, $parameters)\n    {\n        if( $ability = $this->getAbility($method) ) {\n            $this->authorize($ability);\n        }\n    return parent::callAction($method, $parameters);\n}\n\n```\nWhat do you think to define here the permissions?. > Doesn't callAction() have to be registered in the controller itself? That feels like the wrong direction for a package to go.\nYes right... But you could create a Trait that can be added to a BaseController, that then other extend or add to each controllers.. Not sure if this is acceptable.. . ",
    "vcastro-overall": "\n. ",
    "JPT62089": "Thank you, @drbyte! I completely missed the Global Admin role in the wiki. I will look into that as that's essentially what I was trying to accomplish :D. ",
    "dimitvassilev": "I am dynamically deducing the permission name against which to check in my models policies, based on the CRUD action and a language attribute. The language comes from the client data for 'create' action, so it is unreliable which made me look into the code to see what I should expect in case the persmission I check against doesn't exist. I should, of course, pass the language through validation first, so there will be no problem, however I thought that somenone might encounter such in some other scenario of dynamically deducing the permission name where wrong names/ids, nulls or unexpected object types might be produced. These would be probably quite rare occasions but still possible, I guess.. ",
    "TaylorFoster90": "@drbyte i went the route of extracting roles and perms and re-assign after the upgrade. However, I finished the setup and added back in the roles and perms and assigned them to users but now whenever I ask for $user->roles or $user->permissions i just get an empty collections even tho there are values in the pivot table in the DB.. @drbyte figured out my issue. Closing.. ",
    "FrittenKeeZ": "I just created a migration script for those only using roles, which also works with rollbacks.\nI'm pretty sure it can be modified to handle permissions as well.. ",
    "lapswr": "@drbyte not sure how the route model binding have been implemented but this makes no sense,\nroutes should first be checked for the permissions with the middleware and then lookout the input data if they are correct.. ",
    "TimMDeveloper": "The problem is solved. It was my fault. In my composer.json I once had a \"laravel / framework\": \"5.5. \", Put instead of \"laravel / framework\": \"5.6. \",\nSorry for the inconvenience. This issue may be closed.. ",
    "nickbasile": "I was able to solve this by changing my User's guard_name to api like suggested in #289. Hope this helps someone!. ",
    "WidurangaJayawickrama": "ok thz.. ",
    "dbarrington": "\nI fixed it.\nI added Laravel passport to the application.\nSee: https://laravel.com/docs/5.6/passport and also pay attention to the Javascript API section https://laravel.com/docs/5.6/passport#consuming-your-api-with-javascript\nOnce done I added a group in my api routes with 2 middlewares; auth:api and role:manager.\nDone! :)\nPassport with javascript support creates a cookie that it sends with every request.\nLaravel is able to validate that cookie for authentication on the user that is performing the request. Once that user is known the role or permission can be checked by Spatie's laravel-permission package.\nActually quite cool \ud83e\udd47\nThis is how my route group looks like in api.php\nRoute::group(['middleware' => ['auth:api', 'role:manager']], function() { // Routes here });\n\n@jurgenbosch Thanks for this info, it was a big help.. Thanks! That works great. . ",
    "aBuder": "I use an custom guard and would like to create an new user with guard \u201aweb\u2018 There is my current problem.. ",
    "programmermarvin": "Can i use both api and web guard??\n. ",
    "Nvservicing": "Hello, i have the same problem, how do you define a user's guard?\n`        //Create a new user object\n        $user = User::create([\n            'name' => $data['name'],\n            'email' => $data['email'],\n            'password' => Hash::make($data['password']),\n            'guard_name' => 'api',\n        ]);\n    $role = Role::create(['name' => 'administrator', 'guard_name' => 'api']);\n    $permission = Permission::create(['name' => 'administration', 'guard_name' => 'api']);\n\n    $user->assignRole('administrator');\n    $user->save();`\n\nThere is my code, i got this message:  There is no role named administrator.\nPlease help me\n. ",
    "arunmisra2273": "Thank you for your time @drbyte \nThere is definitely something conflicting. As per my example above, a 'prime' user is not able to access the update method.. ",
    "xdasty": "I solved\nusing a third-party package\nI had to edit the file:\nconfig/auth.php. @pankajsanam I use a third-party package that invokes: spatie / laravel-permission\nI solved by editing the config file.\nAs written above. ",
    "pankajsanam": "How did you solve it? I am facing the same problem.. ",
    "zgldh": "Modify your Permission model\nAdd\nprotected $casts = [\n        'roles'      => 'array'\n    ];. I should update my Permission model with:\nprotected $casts = [\n        'roles'      => 'array'\n    ];. ",
    "Lzxe92": "thanks! it helps! . ",
    "r94ever": "Exactly what I need. Thanks so much \u263a\ufe0f. Below is my method to get the list of employees with filter and pagination\n```\npublic function mDatatable(EmployeesListRequest $request, array $columns = ['*'])\n{\n        //== Convert query string to array\n        $query = [];\n        if (isset($request->query('query')['undefined'])) {\n            parse_str($request->query('query')['undefined'], $query);\n        }\n    //== setup page limit, default is 10 records per page\n    $perPage = $request->query('pagination')['perpage'] ?? option('default_perpage');\n\n    //== setup the page number of result set, default is page 1\n    $page = $request->query('pagination')['page'] ?? 1;\n\n    //== setup order of result set\n    $orderBy = $request->query('sort')['field'] ?? 'id';\n    $order   = $request->query('sort')['sort'] ?? 'asc';\n\n    //== Setup the main query\n    $data = $this->with(['branch' => function ($q) use ($orderBy, $order) {\n        if ($order === 'branch') {\n            $q->select('id', 'name')->orderBy($orderBy, $order);\n        }\n    }, 'roles' => function ($q) use ($query) {\n        //== setup the employee role conditional\n        if (isset($query['role']) && is_numeric($query['role'])) {\n            $q->where('id', $query['role']);\n        }\n    }]);\n\n    //== setup the employee gender conditional\n    if (isset($query['gender']) && in_array($query['gender'], ['male', 'female'])) {\n        $data = $data->where('gender', $query['gender']);\n    }\n\n    //== setup the employee status conditional\n    if (isset($query['status']) && in_array($query['status'], ['activated', 'resigned'])) {\n        $data = $data->where('status', $query['status']);\n    }\n\n    //== setup the employee branch conditional\n    if (isset($query['branch']) && is_numeric($query['branch'])) {\n        $data = $data->where('branch', $query['branch']);\n    }\n\n    //== setup the keywords\n    if (isset($query['keyword']) && is_string($query['keyword']) && strlen($query['keyword']) > 0) {\n\n        $keyword = explode(\" \", trim($query['keyword']));\n\n        foreach ($keyword as $k) {\n            $data = $data->where(function($q) use ($k) {\n                $q->orWhere('username',  'LIKE', \"%$k%\");\n                $q->orWhere('firstName',  'LIKE', \"%$k%\");\n                $q->orWhere('lastName',  'LIKE', \"%$k%\");\n                $q->orWhere('email',        'LIKE', \"%$k%\");\n                $q->orWhere('code',         'LIKE', \"%$k%\");\n                $q->orWhere('website',     'LIKE', \"%$k%\");\n                $q->orWhere('mobile',     'LIKE', \"%$k%\");\n                $q->orWhere('phone',      'LIKE', \"%$k%\");\n                $q->orWhere('tax',           'LIKE', \"%$k%\");\n                $q->orWhere('address',   'LIKE', \"%$k%\");\n            });\n        }\n    }\n\n    return $data->orderBy($orderBy, $order)->paginate($perPage, $columns, 'page', $page);\n\n}\n```\nI would like to build an employee table with a filter panel, which able to help user filter some conditions like branch, role, gender... \nEverything work fine except the role filter. Check the database query with laravel debug, I saw this:\n`select `b1h5p6_roles`.*, `b1h5p6_model_has_roles`.`model_id` as `pivot_model_id`, `b1h5p6_model_has_roles`.`role_id` as `pivot_role_id`, `b1h5p6_model_has_roles`.`model_type` as `pivot_model_type` from `b1h5p6_roles` inner join `b1h5p6_model_has_roles` on `b1h5p6_roles`.`id` = `b1h5p6_model_has_roles`.`role_id` where `b1h5p6_model_has_roles`.`model_id` in ('1', '71', '77') and `b1h5p6_model_has_roles`.`model_type` = 'App\\Employees' and `id` = '1'\nOf course, this query will has no result because Mysql could not find exactly if the where condition contains slash character. (Try with App\\\\\\Employees instead of App\\Employees will return correct result). It worked like a charm. Thanks for your solution. I haven't ever heard about this.\nThanks. ",
    "markandrewkato": "I'm doing the assignRole on Referral model like so:\n$agent = Agent::create($data)->assignRole('agent');\nCan I make the assignRole use App\\User instead of App\\Agent when using the assignRole on Agent model?. I apologise for the confusion, it was a mistake on my part. What I mean is when I try to get all the users with 'agent' role, it doesn't show up. The reason I think is because I used the Agent model when I did the assignRole method.. ",
    "enniosousa": "Thanks @drbyte . ",
    "iranpak": "Hello and thanks.\nhow about @can in blade files? can't we use it with permission id?\nthe problem is where we edit a permission name @can phrase no more works. What should i do?. I solved it with using @if(auth()->user()->hasPermissionTo($permission_id)) instead of @can($permission_name). ",
    "MikeMnD": "Shouldn't this be closed! :). ",
    "Satendra-SR": "Thanks, @drbyte. I have already usedauthorizeResource in my controller. but I want one more level of security. for that, I was trying to implement authorization in route and want to make sure that the unauthorized person will not able to even enter into the controller.. ",
    "nishanthii2w": "Where i have to fix this if you know the file name please mention that where i have to fix this bug. ",
    "ifty-rahman": "That make sense. There is no reason for a checking method to throw exception. If the record doesn't exists in database, it should return false.\nI faced the same issue today and until it's getting resolved, I decided to use my custom function to handle that exception.\n// declaration\nfunction hasPermission( $user, $permission ){\n    try{\n        return $user->hasPermissionTo( $permission  );\n    } catch ( Exception $e ){\n        return false;\n    }\n}\n// uses\nif( hasPermission(Auth::user(), \"create_post\") ){\n    // do stuff\n}\n. ",
    "lkreher": "Why can't we combine both approaches like this? \n```\n    protected $permissionsLoaded = false;\n/**\n * Register the permission check method on the gate.\n *\n * @return bool\n */\npublic function registerPermissions(): bool\n{\n    $this->gate->before(function () {\n        if (!$this->permissionsLoaded) {\n            $this->loadPermissionsToGate();\n            $this->permissionsLoaded = true;\n        }\n    });\n\n    return true;\n}\n\n/**\n * Load the permissions to the gate.\n *\n * @return bool\n */\npublic function loadPermissionsToGate(): bool\n{\n    $this->getPermissions()->map(function ($permission) {\n        $this->gate->define($permission->name, function (Authorizable $user) use ($permission) {\n            try {\n                if (method_exists($user, 'hasPermissionTo')) {\n                    return $user->hasPermissionTo($permission);\n                }\n            } catch (PermissionDoesNotExist $e) {\n            }\n        });\n    });\n\n    return true;\n}\n\n```\nWe don't want to call getPermissions() on register, because that action requires a DB-connection. But also we don't want to call getPermissions() before every gate check, since it introduces a significant performance hit (in my testing environment about 6ms per can()) \nThis combination avoids both problems and shouldn't break anything.. > @lkreher wanna help debug the failing tests that this introduces? Basically all the can() calls fail.\nI'd love to, but I'm new to package development, can you give me a quickstart-link on how to setup a dev version of this package?\nI think the problem might be the very first can() call per script not being handled correctly, since the gates are only just being defined at that moment. . ",
    "Sti3bas": "I've also got a project with 50 permissions and I also had this problem.\nWhen creating permissions with Permission::create() it executes an SQL query for each permission, so that's N+1 problem. I've solved it by batch inserting all permissions in seeder:\n```php\nprivate function createPermissions()\n{\n    $permissions = collect($this->permissions)->map(function ($permission) {\n        return ['name' => $permission, 'guard_name' => 'web'];\n    });\nPermission::insert($permissions->toArray());\n\n}\n```\nMy each test now runs 3 times faster (was ~1.2s, now ~350ms).. ",
    "newtekDev": "@MadMikeyB Did you ever find a solution for this?. ",
    "mohamedsharaf": "i see that role_has_permissions is not required\nRole is model we can save role <---> permission relation in \nmodel_has_permissions. ",
    "vagifrzada": "Yes it is. . ",
    "Te7a-Houdini": "@drbyte i think no we don't need this PR anymore , unless we need to remove the behavior of throwing exceptions from hasPermissionTo from the package , other wise the alias solution seems good and supports backward compatibility without breaking changes.. @drbyte actually i thought about a method that encapsulates the logic of (is_string & is_int ) in HasPermission trait .\nand while i was thinking, i found that the logic is, wither to find a permission by  name in case the passed $permission parameter is string , or find a permission by id in case the  passed $permission parameter is integer.\nso i named the method with findByNameOrId.\nexample of is_string then calling findByName and is_int then calling findById\nif you have a better suggestion or a better approach i would appreciate it .. @drbyte , for  the contract i think it should be required , and for naming am not quite sure , but i think we can make something like this : \n```php\npublic static function findByColumn($permission, $guardName = null, $column = null)\n {\n    if (!$column) {\n        $column = is_string($permission) ? 'name' : 'id';\n     }\n return static::filterPermissionsBy($column, $permission, $guardName)->first();\n\n}\n```\nand also change\n```php\nprotected static function filterPermissionsBy(string $key, $value, string $guardName)\n//instead of $key to be $column\nprotected static function filterPermissionsBy(string $column, $value, string $guardName)\n```. ",
    "itsmekps": "no i am not doing it via tinker i have just written that code in the controller function and hitting the corresponding route for that function in browser...\nso now what .............. do i have a hope or not ??. @drbyte i really appreciate the support provided by you but \"giving permission\" and \"checking permission\" i am doing these two things in two different requests.\nAnd yes i am doing the both things giving and checking in the very same controller but not in same method.\n```\npublic function index()\n{         \n    $user = User::where('ref_id', '=', 112)->first();\n    $user->givePermissionTo('add student');\n}\npublic function student()  \n{     \n    $user = User::where('id', '=', Auth::user()->id)->first();\n    if($user->hasPermissionTo('add student'))\n    {\n        return view('admin.student');\n    }\n    else\n    {\n        abort(404);\n    }\n}\n```\nabove both methods are in the same controller.. sorry @drbyte , i am really sorry that was totally my fault the route i was hitting  was filtered by role admin,\nonce again i m really sorry for your precious time. ",
    "Al-Kaiser": "my routers file\nRoute::group(['middleware' => ['auth','permission::browse admin']], function () {\n    Route::get('/admin', 'AdminController@index')->name('admin');\n   }\n);\nmy admincontroller\n```<?php\nnamespace App\\Http\\Controllers;\nuse Illuminate\\Http\\Request;\nuse Spatie\\Permission\\Models\\Role;\nuse Spatie\\Permission\\Models\\Permission;\nuse App\\User;\nuse Auth;\nclass AdminController extends Controller\n{\npublic function __construct()\n{\n    $this->middleware('auth');\n}\n\npublic function index()\n{\n    echo \"Welcome To Admin Dashboard :)\";\n}\n\n\n// public function perm()\n// {\n//  $role = Role::create(['name' => 'admin']);\n//  $permission = Permission::create(['name' => 'browse admin']);\n//  $permission->assignRole($role);\n//  $user = User::find(1);\n\n//        $role = Role::where('name', 'admin')->get()->first();\n //        $user->assignRole($role);\n    // }\n}\n```. you are right i delete 1 colon but still nothing changed . thank you i try your way it's work\none last question\ni want to throw error with redirect how i can do it?. thank you \ud83d\udc4d . ",
    "diogogomeswww": "Is your user stored on the DB?\nWhat does this show:\ndd($user->getKey());. ",
    "FabrizioCafolla": "@diogogomeswwwt  sorry my error, user doesn't exist! thanks. . ",
    "ikidnapmyself": "@drbyte thanks for your attention. You are totally right to do it. It was my mistake to request. I am seeing that User model may does not exist in a project. So I had to request model's name in command-line which will be ugly and pretty long to use for cli.\nIf I ever have a better thing to add / contribute, I will be more careful.\nCheers!. ",
    "angelformica": "Thank you for your quick response. Well, I am not an expert, so I am a\nlittle confused here.\nNormally I would define a scope with a where(is_Admin,true)\nbut in this case, this is a relationship, and I can't seem to find a way to\ndo it with a relationship, I tried whereHas, but that also did not work.\nMay be you could put me in the right direction here.\nThanks for your help\nOn Sat, Aug 11, 2018 at 3:37 PM Chris Brown notifications@github.com\nwrote:\n\nI'm not sure I understand the question.\nThis package doesn't provide a User model. That's part of your app.\nSo you would extend the User model the same way you would extend any other\nmodel:\nclass foo extends bar\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/spatie/laravel-permission/issues/825#issuecomment-412300101,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AMZv2luzqWYmuw17o62MDgKKE8_njzwbks5uP0ClgaJpZM4V5TAW\n.\n. ok, thank you.\n. \n",
    "xJoeyv": "@drbyte Hi and thanks for your response.\nWhat I meant is if the visitor of the website is not authenticated that means he has a guest role when his IP is not blacklisted. Followingup he is not authorized to visit page_x. \nOnly visitors that are authenticated and are now users with a role that contain permissions are allowed to visit that page_x and if the have the right role they are authorized .\nSo mine question is can I add permissions to a guest. So I can authorize and de-authorize them from doing things or viewing things.. @drbyte Thanks for your Reply.\nAlright then I know that about the policy etc I need to take a look then how I go and resolve this. But thanks for explaining this. I hope I will get there. ",
    "gabrieljo": "HI Chris\nsorry about that it is mistake, I closed it.\n2018-08-14 14:06 GMT+12:00 Chris Brown notifications@github.com:\n\nHi @gabrieljo https://github.com/gabrieljo\nDid you intend to post an empty issue?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/spatie/laravel-permission/issues/828#issuecomment-412729076,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AI4u7SO0YG8YzAl1PmxgP-fObEJ1OlVdks5uQjC7gaJpZM4V7qJC\n.\n. \n",
    "deadmouse": "Problem solved.\nFirst, I have installed a fresh laravel installation on Ubuntu 16.04 and this problem hasn't happened.\nLater, I have tried uninstalling and installing again the package in my project where it was giving me the problem (Windows). The problem has been solved after reinstalling the package.\nShould have tried first second option :P\nDon't know if you \"contributors\" can think about the original problem :/. ",
    "George2215": "my User model would be like this:\npublic function roles()\n{\n    return $this->belongsToMany(Role::class);\n}\nThis error message is generated:\nSQLSTATE[42S02]: Base table or view not found: 1146 Table 'appconsultorio.role_user' doesn't exist (SQL: selectroles.*,role_user.user_idaspivot_user_id,role_user.role_idaspivot_role_idfromrolesinner joinrole_useronroles.id=role_user.role_idwhererole_user.user_id= 1)\nI do not understand why it's naming the table like  appconsultorio.role_user. ok understood, already delete the method. but it is showing the error message\nCall to undefined method Illuminate\\Database\\Query\\Builder::all(). @drbyte Thank you very much for your time, solved it\n$users = User::with('roles')->get(); . it doesn't work\n\n. solved.\nclass Permission extends \\Spatie\\Permission\\Models\\Permission\n{\n    protected $hidden = ['pivot'];\n}. ",
    "aquib-jawed04": "Thanks for replying, I've built a website using this permission package, where admin can create a user and I want to generate a random password while creating a user, after submitting the create-user form.. also, I want to send that randomly generated string to the registered email.\nPlease help me,  I'm a very beginner.. ",
    "paulcanning": "This doesn't work for me.\n```\n       $user = User::find($id);\n    dd($user->roles);\n\n```\nthe dump is empty, despite the user having an assigned role.. ",
    "cloudwales": "Ah brilliant, I'll give that a shot and see how I get on. If not I'll have to keep it on v2 and just suck it up lol... \nMany thanks for the reply.. ",
    "laxsmi": "Is there another way of achieving what @cloudwales described, other than reverting to v1 of the package?\nAny help would be greatly appreciated. From what I've read, I'm not the only one looking for a workarround to this issue.. I don't know that there is a high demand but I believe that #292 this fork for instance aims at something that could be achieved easily by extending a model, and scoping the new model based on roles or permissions.\nMy scenario is this one: I have different models (e.g. Student and Teacher) extending User. I was planning to restrict the scope of these new models to the users who have been assigned these roles (using Laravel global scopes). From these models, I would then be call Student::all() and all other methods without the need to re-write code like \\App\\User::role('admin')->get(); for every method within the model.\nHowever, since the roles are assigned to the User model, I am not able to retrieve the users from another model.... This is exactly what I was talking about. Thank you @drbyte for suggesting to reverting to the v1 of the package - I wasn't aware that it was still maintained, but this can be a viable solution. Since my project is also using Backpack, though, this doesn't work for me: the permissions module of Backpack requires the v2.\nSo I reverted to using the User model only, with local scopes:\npublic function scopeTeacher($query)\n    {\n        return User::role('teacher');\n    }\nwhich allows me to do stuff like User::teacher()->get() whenever I need to perform operations on what would have been my Teacher model.\nThis isn't as clean as I'd like to be, but it works.\n. ",
    "ricardovigatti": "I'm facing this issue within similar use cases. I have users and admins.\nAdmin is a model who extends User. User is the main model, predefined by Laravel.\n```php\nclass Admin extends User\n{\n    /\n     * The \"booting\" method of the model.\n     \n     * @return void\n     /\n    protected static function boot()\n    {\n        parent::boot();\n    static::addGlobalScope('admin', function (Builder $builder) {\n        $builder->whereHas('roles', function ($query) {\n            $query->where('guard_name', 'admin');\n            $query->where('name', 'admin');\n        });\n    });\n}\n\n}\n```\nphp\nclass User extends Authenticatable implements CanBeOwner. @laxsmi , your solution is better than you think. I'll refactor my code to be more like yours. Thank you.. ",
    "dreamerson": "@laxsmi thanks, We have the same query \"Teacher\" hahaha. ",
    "enbermudas": "$roles->makeHidden(['pivot']);. Wait, i didn't see that structure. It would be like this:\n$roles->permissions->makeHidden(['pivot']);. ",
    "chescos": "@drbyte the key value length isn't an issue, and the value column type is text which has an unlimited length in PostgreSQL (see here).\nIt looks like it has something to do with the value of the second parameter of the SQL query. The value that ends up being stored in the value column is:\nO:39:\"Illuminate\\Database\\Eloquent\\Collection\":1:{s:8:\"\nIf you look at the SQL query, the value seems to be cut off at the first '.. @drbyte Yeah, I think you are right. I just opened a Laravel bug report here. I'll close this issue.. ",
    "BrekiTomasson": "Yes and no. A user can be either a guest or standard or premium, but that can change - but always just one of them. Same with a post, it can be considered guest, standard or premium - but that can also change over time. However, it can not be two different things at the same time.\nAlso, it's not so much the writing user's permission that decides the level of the post; think of this more as a blog written by one author to multiple audiences - an author who can post it to just the premium crowd, to the premium and standard crowd or \"public\" (guest, standard and premium).. Yeah; that's what I was thinking; I'm just not sure what kind of field to use in the Posts model. I can't use the word 'premium', because it doesn't map 1:1 to the permission name, and I don't want to fill every controller with a series of if ($post->entry_level === 'premium' && $user->can('read premium blog posts') etc...\nStill; I can't think of a better way to do it than that. :/. ",
    "zhiyong80": "What is your version of Laravel and laravel-permission?\nWith Laravel 5.5.43 & laravel-permission 2.17.1, I get the following:\n{\n    \"withTimestamps\": false\n}. @drbyte thanks. This works. Please close the issue.. ",
    "erss400": "Thanks. I have resolve the issue.. ",
    "diesel437": "\nHi, I have the same issue.. what did you do to fix it @Shadomax ??\n\nTurns out it was getting overwritten by protected $appends = ['roles', 'perms'];\nSorry guys!!. ",
    "futzlarson": "In my case it would actually be:\n@unless(auth()->user()->hasRole('production-only'))\nWhich is a little less elegant so yeah, seems worth adding to me.. ",
    "musman92": "id INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,\nhow I match model_id?. the value is \n'model_morph_key' => 'model_id',\ndo i need to change it to \"id\"? right?\n. below is the my user model`<?php\nnamespace App;\nuse Illuminate\\Notifications\\Notifiable;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nuse Spatie\\Permission\\Traits\\HasRoles;\nclass User extends Authenticatable\n{\n  use Notifiable, HasRoles;\n/\n   * The attributes that are mass assignable.\n   \n   * @var array\n   /\n  protected $fillable = [\n    'name', 'email', 'password',\n  ];\n/\n   * The attributes that should be hidden for arrays.\n   \n   * @var array\n   /\n  protected $hidden = [\n    'password', 'remember_token',\n  ];\n}\n.   $user = new \\App\\User();\n    $user->name = 'dev';\n    $user->email = '';\n    $user->password = bcrypt('');\n    $user->syncRoles(['role']);\n    $user->assignRole('role');\n    $user->save();`\nits in seeds \nthis is how i create roles in seed\n$role = Role::create(['name' => 'admin']);. @drbyte  thank you it works. but it should send a proper message. thank you anyway. ",
    "4unkur": "I faced the same issue. The problem was: I put\n'role' => \\Spatie\\Permission\\Middlewares\\RoleMiddleware::class\nin protected $middleware\nand not in protected $routeMiddleware\n. @zcwilt Thanks dude.\n@drbyte are you that Chris Brown who is rapper? ). ",
    "antweny": "\nI faced the same issue. The problem was: I put\n'role' => \\Spatie\\Permission\\Middlewares\\RoleMiddleware::class\nin protected $middleware\nand not in protected $routeMiddleware\n\nThank you very much for reply but already figured it out. . this issue has been solved by someelse in stackoverflow platform\nThe link to the solution is Link to solution. ",
    "jegjessing": "Fixed with: https://github.com/spatie/laravel-permission/issues/590#issuecomment-352651486. My bad mentioning two problems in one.\nIt does not fix the Trait problem but it does fix the permission does not exist which was the main problem. Closing.\nMaybe I've not looked good enough, but the linked solution might be part of the documentation ?\nClosing the issue. ",
    "gregorise": "I was stuck on this for a while, so for good measure I tried a fresh install, composer update and it seems to be behaving correctly now (both role and permission checks).. ",
    "jperdomo95": "Good evening, I have  problem with laravel backpack API when I try to preview users, roles and permissions.\nWhenever I try to use the preview action I get a custom 403 error page made by me.\nLaravel debug bar shows the following message:\n\n. I actually managed to figure out the problem, I'm not sure if it's because of my local configuration but I found out the following:\nSomehow the 'show' method is disabled by default, so I had to add $this->crud->allowAccess('show'); to the vendor/backpack/permissionmanager/src/app/Http/Controllers/UserCrudController.php to make it work.. ",
    "vchampanery": "\nsame error php version. i have question , how to add company_id into roles table ? or how to add company_id into permissions table?. cool thanks . Any alternative for givePermissionTo()  i means how to do manually\nuse for assign permission to role\ngivePermissionTo () taking to much time for i want to add manually for the role\n. Following is works for me :\n$role = $userobj->roles->first()->name;\n$userobj->removeRole($role);. ",
    "hamid80386": "Yes @freekmurze \nI used:\nuse Spatie\\Permission\\Models\\Role;. Also error has come out of : \nvendor\\laravel\\framework\\src\\Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships.php. And in Laravel 5.6.38 everything are ok, but in 5.4 we have error. Thank you @drbyte \nBut this is better to discuss about this problem more, because in many cases we can't rebuild new Laravel project and this may has very times to do.\nI have to different results in 2 computer of same repository of git with this package, in my home's computer when i use: use Spatie\\Permission\\Models\\Role; , i have a message that shows the class never used, and in my office's computer use Spatie\\Permission\\Models\\Role; shows class used.\nSo this is show that in home's computer class not introduced to Laravel, in other hand because two computers has same git repository of project, so we conclude that the problem is anythings that is in .gitignore\nIt may be an vendor package, a setting that are in .gitignore, any setting in .env ,etc.\n@freekmurze I think we must reopen this issue until get a proper result.. it seem if a permission does not exist in database , we'll get this error.. I checked bootstrap\\cache\\packages.php file and found below code is missing:\n'spatie/laravel-permission' => \n  array (\n    'providers' => \n    array (\n      0 => 'Spatie\\\\Permission\\\\PermissionServiceProvider',\n    ),\n  ),\nWhen i return this code to the packages.php , spatie-permission work without error\nI added PermissionServiceProvider in config/app.php , It seems PermissionServiceProvider not registering properly!. > not an issue with this package\nYes, I guess too, but strange matter is that i found the only thing that remove from packages.php is spatie-permission, i found it after check gitk!\nand problem is show itself after every composer update!. Finally I found the problem, spatie/laravel-permission has an Interference with  area17/twill package\nWhen this package load before spatie in bootstrap/cache/packages.php App\\Rule not found will be occur\nSo we need to remove twill. or use of any way to load twill after loading the spatie in packages.php, i don't  know how load that after spatie\nso i removed twill. ",
    "josepostiga": "@drbyte this issue is still open. Is there anyting missing?. @ujackson can you confirm that all those permissions (not the roles) exist on your database and that you're including the RoleOrPermissionMiddleware on your http/kernel.php file?\nI tested with many roles and permissions (although the tests only have one role and/or one permission, but I can update that if needed) and I concluded that the only way that won't work is if any of those permissions don't exist on the database, and that's because of the behaviour described on #802.. @drbyte I was actually looking at this when you pinged me. I did confuse myself on the operator used and your understanding is correct: it should, indeed, be a &&.\nHowever, when I tried to update the middleware to use the correct operator, I encounter the problem described on #802, via the hasAnyPermission. Probably gonna need to work around that while #814 is not merged.. Yeah and that's because of the (dirty) try-catch block I added to the middleware, to avoid getting the PermissionDoesNotExist exception.\nI'm actually working on a solution, right now.. I thought it was pretty clever at the time but then I tried to use this middleware on a project I'm working on and it breaks the logic if a permission is not yet created when being checked. It's a very edgy case, but it can happen.\nI think that a good way of working around the issue, while #814 is not merged, is to create an alias of hasPermissionTo() where the try-catch will be, ensuring that the return is only true/false.\nI'm about to create a PR to handle this and we can discuss this further, if needed, there. It's really a small change to the HasPermissions trait that I think keeps things under control, for now.... It should return a 403.. ",
    "dennis1502": "I have the same issue as @georgecpacheco, but instead of different roles per company, I need different permissions per company. For example:\nUser X - company A - permissions [1, 2, 3]\nUser X - company B - permissions [1, 3]\nI was thinking that adding a column named company_id to the model_has_permissions will solve the problem, but I think it wil or break the whole code or I have to edit all the package files to support the new column.\nMaybe you have a suggestion which files need to be modified to get the desired result?. @vchampanery just publish the migration with the follow command: \nphp artisan vendor:publish --provider=\"Spatie\\Permission\\PermissionServiceProvider\" --tag=\"migrations\" and add a column to it and execute php artisan migrate. @drbyte I ended up editing the HasPermissions Trait, I want to add a column named 'restaurant_id' to the model_has_permissions. Now when I want to add a new permission to a user (model), it works fine, but of course the new column restaurant_id leaves empty. I saw that the model_has_permissions is updated by a sync() function using the permissions(): MorphToMany function. \nHow can I update the permissions() function so it will also update the restaurant_id column. Now it only updates the default columns.. @drbyte Hi, \nNo I had to made another solution for this problem: I generate a unique role for every user now. So when a user is connected to multiple companies, I'll create a role for the user_company like: role_[user_id]_[company_id]. When the user is connected to 3 companies, he will be assigned to 3 unique roles so you can change permissions on every role. It is a kind of hack-around, but I had no other solution, unless I would build the whole permission logic by myself, but there is not enough time (and knowledge).. @nicolaspennesi that's indeed what I did. It is not the best solution, but it works for now. I have to refactor it anyway ^^. ",
    "elivnjak": "So is there no out of the box way to add another column to the roles table so you can have company specific roles? If there isn't can i get some guidance on how to extend the package code to implement this? I can't use polymorphic users because i want a user to have multiple roles for one company.. ",
    "nicolaspennesi": "Hi! I think you can create a pivot table \"company_table\", then make a model \"CompanyUser\", and use that model to assign specific roles to each company-user relationships. . ",
    "msyadav88": "Thanks Chris,\nIs there any package available which have integrated laravel permission and\njwt together?\nOn Thu 4 Oct, 2018, 2:40 AM Chris Brown, notifications@github.com wrote:\n\nI haven't. But I don't see why you couldn't.\nKeep in mind: this laravel-permission package provides authorization\nresources, in conjunction with Laravel's own authorization Gate\ninfrastructure.\nThe jwt-auth package provides authorization, which is different.\nThey should be able to co-exist fine.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/spatie/laravel-permission/issues/891#issuecomment-426804564,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ANktJADMHKcF1Z3znbOfs1sPlZzfc4TSks5uhSfVgaJpZM4XGjid\n.\n. \n",
    "hulkur": "It's a query builder\nPermission::where('guard_name', 'admin')->get(). try $request->user()->load('roles');. Will have PR ready in an hour.. What is the use-case for needing that?. with fresh you need to know which relations were loaded and load them again. You still need extra db queries as you need to pull the roles that are assigned from db. It needs a more thorough analysis to eliminate some of the queries.. ",
    "mstaroste": "\nFollowing is works for me :\n$role = $userobj->roles->first()->name;\n$userobj->removeRole($role);\n\nYes you\u00b4re right. $user->removeRole($user->roles->first());works. ",
    "ujackson": "Thanks @josepostiga for the update. Can I check multiple roles or permissions? Doesn't seem to work. \npublic function __construct()\n{\n    $this->middleware(['role_or_permission:admin|doctor|create patients|delete patients|update patients|read patients']);\n}. ",
    "bart-heideman": "Hi ujackson,\nI think you should use a comma to separate the roles and or permissions if they are multiple.. ",
    "urukalo": "same for lumen 5.6 . ",
    "stefanvanherwijnen": "I am having the same issue with Lumen 5.6 and laravel-permission 2.22.0. Version 2.17.0 works fine.\nProbably related to this commit:\nhttps://github.com/spatie/laravel-permission/commit/69fba17fe864da9cb2e9b03e7d97bb7fced75595. ",
    "zcwilt": "Fortunately I just did this recently.\nIn app/Exceptions/Handler.php,  I added this to the render method.\nif ($exception instanceof UnauthorizedException) {\n     //  ...handle the exception here\n    // e.g. return response()->view('errors.403', [], 403);\n}\n\nDon't forget to add\nuse Spatie\\Permission\\Exceptions\\UnauthorizedException;\n\nto the other use statements.. ",
    "RocoClothing": "Thank you, I hadn't realised that I had set it to 200. That seems to be the problem.. ",
    "yespbs": "Thanks for the pointer\nI have two other projects upgraded to 5.7 and did not see the issue. I will revisit all the packages.\n. Package htmlmin/htmlmin was causing issue with blade optimization.. ",
    "SPQRInc": "Thanks :-) . ",
    "deviouspk": "Can you do the same for removing roles & assigning/removing permissions please. ",
    "swerwajod": "@drbyte \nThank for responding. I'm using guards in two ways.  One is the intended way, with an auth guard for corporate employees, off-site employees, and sub-contract users.  So that all access is segmented by the user's authentication guard and sub-contractors never have access to the other segments.  With that, each guard has roles per guard in the DB. So the same named Role may exist for different guards with different functions.  but if role name is unique then I'll deal with it. However, I don't think what you asked about 'altered by end user' is needed. I plan that access for guards and roles would be coded. But I may misunderstand what that question is asking, sorry.\nSecondly, Since guard designation is in the role table, they can be used as a label of roles types even if not truly using auth guards. Also the guards allow different types of roles to be attached to different models as well as attaching these other Roles to the user. I may be stretching the use a bit but this module does allow for other models to have roles.\nSo with the team guard, I'm able to create a list of teams (roles with a team name as the role) that are attached to a team model through the guard. I can also add the team/role to the user as in any other role.  So that was the main driver for asking about getRoleName() to have a gaurd_name parameter since roles were already identified with different guards. I can then get what roles a user has in the team guard to get a list of their teams and then produce any information for those team in the application including the roles in the team model.\nHope I explained what you were looking for. Thanks\n. Yes, Talk about seeing the forest for the trees.  Was looking at all the methods and forgot about the capabilities of the model itself.. ",
    "dburucu": "yes I could, but than I have a second permission check function. \nIt would be better, when I could use $auth()->user()->can('my-permission').\nExplaination:\nI have regular users. They have permissions, roles, .... Users logging in with login-form.\nIn addition I have other users -> surveyusers. This are in another table than users. Surveyusers are preponderantly independent from the rest of the system. They are changing very often. I dont want to insert the relations in the model_to_roles or model_to_permissions table. I want to assign a permission or role when they are logged in with an url with token.\nIt can be usefull to have the functions to add/remove a role or permission only for the session.\nThese can also be used for certain events in the system to add or remove certain rights or roles for the current user.\n. ",
    "cbernard73": "I've only just started using this package so I don't know the details as well as either of you, but I thought I'd give my opinion on the caching strategy.\nIt seems that the current strategy is to cache the entire permissions table under a single cache key. I haven't read through the code in detail, but I came to that conclusion by looking at the cache table after multiple users login. I think that is sub-optimal, and I will tell you why.\nI would guess that in most use cases, you are checking the permissions for a single user (i.e. a user wants to run a report, a user wants to edit a resource). I think you will rarely want to check the permissions for multiple users at the same time. In fact, the only situation I can think of is on a user management screen.\nTherefore I think there should be a cache entry for each users' set of permissions. I think this would be relatively simple to implement and it would make a massive improvement to performance. \nThe other issue with the current strategy is that you need to bust the cache whenever any users permissions change, or even, when a new user is created. \nIs my argument make sense, or have I misunderstood how the system is working today?. @fullstackfool thanks for your confirmation. I've read back through the whole conversation now that I have a slightly better understanding, and I have one question about the approach being taken. \nIf you use package.model.permission as they cache key, won't you end up with 1:1 relationship between the Model_has_Permission table and the cache? Would it better to limit the key to just cache.model? . Yes, I mean cache all permissions for each model under one key. I know it\nadds more work to the application layer (and I'll admit that I don't know\nthe consequences of that right now), but if you use model.permission as the\nkey, you are leaving the work at the database layer, in which case it seems\nto me like you're just moving the problem from the Model_Has_Permissions\ntable to the Cache table.\nIn my application, the dashboard screen is the heaviest user of the\npermissions system. There are around 50 @can calls, but they're all for the\nsame user. If we store all of a user's permissions in one single cache\nentry, then I'd get the permissions in one request to the cache.\nYou mentioned in your first post that during your tests the queries to the\ndatabase went from 1800+ to 0. What are you using for your cache in those\ntests?. Yes, I figured it would cause significant changes to hasPermissionTo. I think your decision is correct. . ",
    "universenl": "Not sure thats the problem, everyday this happends again so i need to overwrite the file to get the admin permissions back.It seems like everyday that file to created again, and when that happened i lost admin permissions.. Its seems like something on the production server, becouse the development still runs without any errors. Same version of the application only not in production build.\nIt seems like when we save a permission this error occurs right away, so if i save the permission All on the adminpanel we get locked out and the cache file is changed.\nThe wierd thing about this story, we did run the backend in production mode for like 6 weeks without this error occurs once. But like i sad, the development version still runs string and even there we can save the All permissions and the website still works.. This is composer.json\n{\n    \"name\": \"laravel/laravel\",\n    \"description\": \"The Laravel Framework.\",\n    \"keywords\": [\"framework\", \"laravel\"],\n    \"license\": \"MIT\",\n    \"type\": \"project\",\n    \"require\": {\n        \"php\": \"^7.1.3\",\n        \"barryvdh/laravel-dompdf\": \"^0.8.2\",\n        \"dennobaby/autodns-api-2\": \"dev-master\",\n        \"fideloper/proxy\": \"^4.0\",\n        \"gtk/flash-message\": \"^1.3\",\n        \"imtigger/laravel-job-status\": \"^0.1.14\",\n        \"itelmenko/laravel-mysql-logger\": \"^0.1.8\",\n        \"laravel/framework\": \"5.7.*\",\n        \"laravel/tinker\": \"^1.0\",\n        \"laravelcollective/html\": \"^5.6\",\n        \"laravelcollective/remote\": \"^5.6\",\n        \"mariuzzo/laravel-js-localization\": \"^1.4\",\n        \"mollie/laravel-mollie\": \"^2.0\",\n        \"nyholm/psr7\": \"^1.0\",\n        \"propaganistas/laravel-phone\": \"^4.0\",\n        \"pusher/pusher-php-server\": \"~3.0\",\n        \"spatie/laravel-newsletter\": \"^4.2\",\n        \"spatie/laravel-permission\": \"^2.12\",\n        \"unisharp/laravel-filemanager\": \"~1.8\",\n        \"yajra/laravel-datatables-oracle\": \"~8.0\"\n    },\n    \"require-dev\": {\n        \"barryvdh/laravel-debugbar\": \"^3.1\",\n        \"filp/whoops\": \"^2.0\",\n        \"fzaninotto/faker\": \"^1.4\",\n        \"mockery/mockery\": \"^1.0\",\n        \"nunomaduro/collision\": \"^2.0\",\n        \"phpunit/phpunit\": \"^7.0\"\n    },\n    \"autoload\": {\n        \"classmap\": [\n            \"database/seeds\",\n            \"database/factories\"\n        ],\n        \"psr-4\": {\n            \"App\\\\\": \"app/\"\n        },\n        \"files\": [\n            \"app/Helpers/cdn.php\",\n            \"app/Helpers/functions.php\",\n            \"app/Helpers/formatting.php\",\n            \"app/Helpers/user.php\"\n        ]\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Tests\\\\\": \"tests/\"\n        }\n    },\n    \"extra\": {\n        \"laravel\": {\n            \"dont-discover\": [\n            ]\n        }\n    },\n    \"scripts\": {\n        \"post-root-package-install\": [\n            \"@php -r \\\"file_exists('.env') || copy('.env.example', '.env');\\\"\"\n        ],\n        \"post-create-project-cmd\": [\n            \"@php artisan key:generate\"\n        ],\n        \"post-autoload-dump\": [\n            \"Illuminate\\\\Foundation\\\\ComposerScripts::postAutoloadDump\",\n            \"@php artisan package:discover\"\n        ]\n    },\n    \"config\": {\n        \"preferred-install\": \"dist\",\n        \"sort-packages\": true,\n        \"optimize-autoloader\": true\n    },\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": true\n}. This is fixed, wrong id in mysql was the problem.. ",
    "mathewparet": "I am using Laravel 5.7. I found the scenario where this is occurring. I got a clue from your execution where you used php artisan migrate:fresh\nWhen I did it, it worked! \nBut after that, I created a user account so that the users table is populated and then tried adding more roles and permissions it throws the same error. Somehow, it is working only when the users table is empty.\nMy users table has only 1 extra field - suspended which stores 1 or 0 to indicate whether the account is suspended. I also use the email verification feature provided by Laravel 5.7, so the email_verified_at field was also populated.. It might sound weared. After trying the same thing a couple of times it is working fine now. I can't explain how or why. Thanks anyways.. ",
    "mgsmus": "@drbyte I think I found something. My laravel-permission version was 2.23.0 and I've updated to 2.24.0 a few days ago. It seems there is a new config entry in config/permission.php:\n'column_names' => [\n        /*\n         * Change this if you want to name the related model primary key other than\n         * `model_id`.\n         *\n         * For example, this would be nice if your primary keys are all UUIDs. In\n         * that case, name this `model_uuid`.\n         */\n        'model_morph_key' => 'model_id',\n    ],\nI belive there is nothing wrong with assignRole().. The config entry was missing in my config/permission.php. ~~I don't know how exactly morphToMany works but $parentKey was always null at this line because of the missing entry and no default provided.~~ (Sorry, I didn't get auto-merging part in your reply first)\nI updated to latest release and republished the config file. I started to run tests again. I can't tell if it will work ~~but it seems related.~~. I did not encounter any problems after updating the package. I couldn't find the cause of the previous problem. I believe it's solved, so I'm closing the issue.. ",
    "3ubeen3": "how ?i want to put limt = 5 in instead of string and i want to update this value.. ",
    "ShahinSorkh": "\n\nThe issue with the package is that for some reasons (I did not dig into the package yet) it doesn't recognize cache has been flushed and returns 403 for all requests after some time when using memcached, it's ok with redis tho. I'm sure the session exists in both cases. Likely cache is flushing partially I will check this\n\n\nThat's what I need exactly! Thank you. I will test and let you know if it has any problem. > Are you able to give any more information as to the environment/lead-up to this issue, so we can attempt to reproduce it?\n\n\nThe problem is with memcached, I have tried local and external server. My environment is quite simple; running ubuntu 16.04 on all servers and memcached with it's default configurations, I just made it to listen on 0.0.0.0 so that I can connect to it through the network.\nI did not spend much time with this issue as I switched to redis server for cache driver after few tries.\nMaybe useful env things: php 7.0, php-memcached 3.0, laravel 5.5, postgres 9.5, memcached 1.4\nThe application is a dashboard in private network area, uses AJAX for exactly everything, For every single request the user makes, needs to have the proper permission; after seeding the db, everything works fine as it should, after like an hour it returns 403 in response of all requests, I re-seeded the db and it got to work again! And fall in almost an hour and 403s again. An infinite loop..\n\nGiven your initial comment was several days ago, this won't be linked to the very recent caching changes - have you tried updating to the latest version and testing again? The caching strategy is now quite different, so you may get different results.\n\nNot yet, however I'm using v2.20 and as I just checked you have released v2.26. I will try to update and see if it changes anything.\n\nIf the same issues are occurring, it sounds more likely there's an issue with the caching environment you are using?\n\nActually other packages and the application itself work pretty ok it's just this package having issue with caching. I'm using memcached for sessions too so if the memcached is the problem I should have problems with session system as well but it's quite fine.. ",
    "NizarBlond": "sure.\npermissions.php\n```\nphp\n\n<preturn [\n'models' => [\n\n    /*\n     * When using the \"HasRoles\" trait from this package, we need to know which\n     * Eloquent model should be used to retrieve your permissions. Of course, it\n     * is often just the \"Permission\" model but you may use whatever you like.\n     *\n     * The model you want to use as a Permission model needs to implement the\n     * `Spatie\\Permission\\Contracts\\Permission` contract.\n     */\n\n    'permission' => App\\Models\\Permission::class,\n\n    /*\n     * When using the \"HasRoles\" trait from this package, we need to know which\n     * Eloquent model should be used to retrieve your roles. Of course, it\n     * is often just the \"Role\" model but you may use whatever you like.\n     *\n     * The model you want to use as a Role model needs to implement the\n     * `Spatie\\Permission\\Contracts\\Role` contract.\n     */\n\n    'role' => App\\Models\\Role::class,\n\n],\n\n'table_names' => [\n\n    /*\n     * When using the \"HasRoles\" trait from this package, we need to know which\n     * table should be used to retrieve your roles. We have chosen a basic\n     * default value but you may easily change it to any table you like.\n     */\n\n    'roles' => 'roles',\n\n    /*\n     * When using the \"HasRoles\" trait from this package, we need to know which\n     * table should be used to retrieve your permissions. We have chosen a basic\n     * default value but you may easily change it to any table you like.\n     */\n\n    'permissions' => 'permissions',\n\n    /*\n     * When using the \"HasRoles\" trait from this package, we need to know which\n     * table should be used to retrieve your models permissions. We have chosen a\n     * basic default value but you may easily change it to any table you like.\n     */\n\n    'model_has_permissions' => 'model_has_permissions',\n\n    /*\n     * When using the \"HasRoles\" trait from this package, we need to know which\n     * table should be used to retrieve your models roles. We have chosen a\n     * basic default value but you may easily change it to any table you like.\n     */\n\n    'model_has_roles' => 'model_has_roles',\n\n    /*\n     * When using the \"HasRoles\" trait from this package, we need to know which\n     * table should be used to retrieve your roles permissions. We have chosen a\n     * basic default value but you may easily change it to any table you like.\n     */\n\n    'role_has_permissions' => 'role_has_permissions',\n],\n\n'column_names' => [\n\n    /*\n     * Change this if you want to name the related model primary key other than\n     * `model_id`.\n     *\n     * For example, this would be nice if your primary keys are all UUIDs. In\n     * that case, name this `model_uuid`.\n     */\n    'model_morph_key' => 'model_id',\n],\n\n/*\n * By default all permissions will be cached for 24 hours unless a permission or\n * role is updated. Then the cache will be flushed immediately.\n */\n\n'cache_expiration_time' => 60 * 24,\n\n/*\n * When set to true, the required permission/role names are added to the exception\n * message. This could be considered an information leak in some contexts, so\n * the default setting is false here for optimum safety.\n */\n\n'display_permission_in_exception' => false,\n\n'cache' => [\n\n    /*\n     * By default all permissions will be cached for 24 hours unless a permission or\n     * role is updated. Then the cache will be flushed immediately.\n     */\n\n    'expiration_time' => 60 * 24,\n\n    /*\n     * The key to use when tagging and prefixing entries in the cache.\n     */\n\n    'key' => 'spatie.permission.cache',\n\n    /*\n     * When checking for a permission against a model by passing a Permission\n     * instance to the check, this key determines what attribute on the\n     * Permissions model is used to cache against.\n     *\n     * Ideally, this should match your preferred way of checking permissions, eg:\n     * `$user->can('view-posts')` would be 'name'.\n     */\n\n    'model_key' => 'name',\n],\n\n];\n```\nMy model code:\n```\n<?php\nnamespace App\\Models;\nuse Spatie\\Permission\\Models\\Role as SpatieRole;\nclass Role extends SpatieRole\n{\n    //\n}\n```\nThen it is just normal assignment\n// Attach user to role\n$role = Role::findByName($params['role']);\n$user->assignRole($role);\nAlso note that the app() function definition is inside vendor/laravel/lumen-framework/src/helpers.php - but this is part of lumen\n```\nif (! function_exists('app')) {\n    /\n     * Get the available container instance.\n     \n     * @param  string  $make\n     * @return mixed|\\Laravel\\Lumen\\Application\n     /\n    function app($make = null)\n    {\n        if (is_null($make)) {\n            return Container::getInstance();\n        }\n    return Container::getInstance()->make($make);\n}\n\n}\n```. Not at all.\nOn Thu, 22 Nov 2018, 18:03 Karl Davies <notifications@github.com wrote:\n\nAre you caching the config in any way?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/spatie/laravel-permission/issues/944#issuecomment-441086026,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ACR1tEYC8mwkxyG2MPbyupk4Al161lh9ks5uxtjygaJpZM4Yq60Z\n.\n. Hi,\n\nI'll try to prepare a reproduction case soon and re-open the issue if you\nfeel like closing it.\nThanks.\nOn Mon, Nov 26, 2018 at 11:23 AM Karl Davies notifications@github.com\nwrote:\n\nI'm sorry, @NizarBlond https://github.com/NizarBlond, I'm having no\nluck replicating this.\nPerhaps @drbyte https://github.com/drbyte might have better luck?\nAlso, if the repo in question is private, are you able to reproduce the\nissue yourself in a public repo, that we can then inspect?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/spatie/laravel-permission/issues/944#issuecomment-441589239,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ACR1tP8DgMQVUr_evWGVoQLwf7IMZToSks5uy8EhgaJpZM4Yq60Z\n.\n\n\n-- \n~NizarA();\nSoftware Developer\n. ",
    "jafar690": "@fullstackfool i solved this by clearing my composer cache and using an old version of this package.\ncomposer clear-cache. ",
    "jag-obviux": "Thanks. Works for me now\nOn Nov 20 2018, at 4:08 pm, Chris Brown notifications@github.com wrote:\n\nYa, that or I've seen some prefer this format:\napp()[\\Spatie\\Permission\\PermissionRegistrar::class]->forgetCachedPermissions();\nApologies for the copy/paste error in the readme - it's been updated.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub (https://link.getmailspring.com/link/1542786007.local-f71c350d-8eb3-v1.5.2-31660462@getmailspring.com/0?redirect=https%3A%2F%2Fgithub.com%2Fspatie%2Flaravel-permission%2Fissues%2F946%23issuecomment-440306258&recipient=cmVwbHkrMDI4ZjI3ZTBlNmE3NWU1MGQ1M2FjMmNjMjMxZmE1NzUxNWU0ZmM0ZWJiYTJlNzJkOTJjZjAwMDAwMDAxMTgwYmU1N2Q5MmExNjljZTE2Y2ViMThiQHJlcGx5LmdpdGh1Yi5jb20%3D), or mute the thread (https://link.getmailspring.com/link/1542786007.local-f71c350d-8eb3-v1.5.2-31660462@getmailspring.com/1?redirect=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAo8n4EEutwdQ31wh-uSh2QIEASpATJCSks5uxBr9gaJpZM4YrBMb&recipient=cmVwbHkrMDI4ZjI3ZTBlNmE3NWU1MGQ1M2FjMmNjMjMxZmE1NzUxNWU0ZmM0ZWJiYTJlNzJkOTJjZjAwMDAwMDAxMTgwYmU1N2Q5MmExNjljZTE2Y2ViMThiQHJlcGx5LmdpdGh1Yi5jb20%3D).\n\n. ",
    "warmansuganda": "Hi, i was try implementing UUID on this package at Laravel 5.7 and worked.\nMy migration:\n```php\npublic function up()\n    {\n        $tableNames = config('permission.table_names');\n        $columnNames = config('permission.column_names');\n    if (!Schema::hasTable($tableNames['permissions'])) {\n        Schema::create($tableNames['permissions'], function (Blueprint $table) {\n            $table->uuid('id')->primary();\n            $table->string('name');\n            $table->string('guard_name');\n            $table->timestamps();\n        });\n    }\n\n    if (!Schema::hasTable($tableNames['roles'])) {\n        Schema::create($tableNames['roles'], function (Blueprint $table) {\n            $table->uuid('id')->primary();\n            $table->string('name');\n            $table->string('guard_name');\n            $table->timestamps();\n        });\n    }\n\n    if (!Schema::hasTable($tableNames['model_has_permissions'])) {\n        Schema::create($tableNames['model_has_permissions'], function (Blueprint $table) use ($tableNames, $columnNames) {\n            $table->uuid('permission_id');\n\n            $table->string('model_type');\n            $table->uuid($columnNames['model_morph_key']);\n            $table->index([$columnNames['model_morph_key'], 'model_type']);\n\n            $table->foreign('permission_id')\n                ->references('id')\n                ->on($tableNames['permissions'])\n                ->onDelete('cascade');\n\n            $table->primary(['permission_id', $columnNames['model_morph_key'], 'model_type'],\n                    'model_has_permissions_permission_model_type_primary');\n        });\n    }\n\n    if (!Schema::hasTable($tableNames['model_has_roles'])) {\n        Schema::create($tableNames['model_has_roles'], function (Blueprint $table) use ($tableNames, $columnNames) {\n            $table->uuid('role_id');\n\n            $table->string('model_type');\n            $table->uuid($columnNames['model_morph_key']);\n            $table->index([$columnNames['model_morph_key'], 'model_type', ]);\n\n            $table->foreign('role_id')\n                ->references('id')\n                ->on($tableNames['roles'])\n                ->onDelete('cascade');\n\n            $table->primary(['role_id', $columnNames['model_morph_key'], 'model_type'],\n                    'model_has_roles_role_model_type_primary');\n        });\n    }\n\n    if (!Schema::hasTable($tableNames['role_has_permissions'])) {\n        Schema::create($tableNames['role_has_permissions'], function (Blueprint $table) use ($tableNames) {\n            $table->uuid('permission_id');\n            $table->uuid('role_id');\n\n            $table->foreign('permission_id')\n                ->references('id')\n                ->on($tableNames['permissions'])\n                ->onDelete('cascade');\n\n            $table->foreign('role_id')\n                ->references('id')\n                ->on($tableNames['roles'])\n                ->onDelete('cascade');\n\n            $table->primary(['permission_id', 'role_id']);\n\n            app('cache')\n                ->store(config('permission.cache.store') != 'default' ? config('permission.cache.store') : null)\n                ->forget(config('permission.cache.key'));\n        });\n    }\n}\n\n```\nMy AppServiceProvider.php : \n```php\n...\nuse Illuminate\\Support\\ServiceProvider;\nuse Spatie\\Permission\\Models\\Permission;\nuse Spatie\\Permission\\Models\\Role;\nuse Ramsey\\Uuid\\Uuid;\nclass AppServiceProvider extends ServiceProvider\n{\n    /\n     * Bootstrap any application services.\n     \n     * @return void\n     /\n    public function boot()\n    {\n    /* Begin : UUID Adjustment */\n    Permission::retrieved(function (Permission $permission) {\n        $permission->incrementing = false;\n    });\n\n    Permission::creating(function (Permission $permission) {\n        $permission->incrementing = false;\n        $permission->id = Uuid::uuid4()->toString();\n    });\n\n    Role::retrieved(function (Role $role) {\n        $role->incrementing = false;\n    });\n\n    Role::creating(function (Role $role) {\n        $role->incrementing = false;\n        $role->id = Uuid::uuid4()->toString();\n    });\n    /* End : UUID Adjustment */\n\n    ...\n\n}\n\n...\n\n}\n```. ",
    "winter-ice": "I mean tree structure.. ",
    "rehanaslam328": "ok\nOn Thu, Nov 29, 2018 at 2:15 AM Chris Brown notifications@github.com\nwrote:\n\nClosed #957 https://github.com/spatie/laravel-permission/issues/957.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/spatie/laravel-permission/issues/957#event-1993608809,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AjBR_D9m7De3_UAu5Ij2RbtJoejXUYXyks5uzvzggaJpZM4Y38Ha\n.\n. > This package doesn't touch login credentials.\nI think your problem is somewhere else in your app.\nIf you believe there is a problem with this package, please post all your code so I can set up the same situation here to recreate the problem.\n\n\nI have used Hasrole in AuthenticatesUsers trait and user which is going to login are redirected to different direction on the basis of role. ",
    "Livijn": "This is actually an issue from Nova\u2019s side. Thanks.. ",
    "avblink": "I can confirm that $user->removeRole('admin') is not working.\nThe sql deletes by role name instead of role id.\ndelete from `model_has_roles` where `model_id` = '15' and `model_type` = 'App\\Models\\User' and `role_id` in ('admin')\nwhere it should be\ndelete from `model_has_roles` where `model_id` = '15' and `model_type` = 'App\\Models\\User' and `role_id` in (1,2,3)\nUnless documentation has a mistake. At the moment example tells to use role name, not id.. ",
    "mustorze": "i've forget about that, i resolved by doing the query manually, sorry!\nWhat @avblink said i'ts what happening with me, it's a perfect example about the issue.\n@avblink thanks!. ",
    "Arkanius": "Had the same problem here. As @avblink said, looks like sometimes the query tries to remove by role name and not by role id. ",
    "pmochine": "@drbyte I'm pretty sure my thinking is wrong :P However, when I'm doing phpunit testing, I'm refreshing the database with each test. Because I know that I have specific roles in my DB, I have an extra migration file that DB inserts the initial default role values.. @drbyte thanks chris!. ",
    "mobayen": "@drbyte is it possible? I mean does laravel-permission support passport?. @jeraldpunx \nbesides the route naming and redirection url dont match:\nphp\nreturn redirect('/home');\nand\nphp\nRoute::group(['middleware' => ['role:member']], function () {\n    Route::get('/', 'HomeController@index')->name('home');\n});. ",
    "jamelwa": "yes, i want to retrieve all the documents associated with all user with specified role. but i think i can figure it out myself.\nso sorry if it's out of topic,\ni just want to ask how do i create basic pivot model between role model and user model, based on this package's migration table?. ",
    "scheMeZa": "Yes Sir,\nI'm following principles of DDD - a manager via API or WEB should be able to do identical actions - just different mediums, thus is why I end up having to duplicate Roles and Permissions over guards.. I hope v3 releases soon \ud83d\ude04 . ",
    "ahinkle": "I have a use case for this causing the code to be a bit ugly.. not sure why this was closed or not linked to a different issue.. ",
    "kylebarney": "It sounds like I need the guard handling logic coming in v3. What's the timeline for release? (Happy to help out if I can.). ",
    "sscots": "+1. ",
    "nomayonnaise": "From version 2.28.1 I get the following error in Lumen 5.7.6\nBindingResolutionException\nUnresolvable dependency resolving [Parameter #0 [ <required> $app ]] in class Illuminate\\Cache\\CacheManager\nTo resolve this error I have to add the following to bootstrap/app.php\n$app->alias('cache', \\Illuminate\\Cache\\CacheManager::class);\nI don't know if this is an issue with laravel/lumen-framework, illuminate/cache or spatie/laravel-permission. I think it might be a problem with this package now using \\Illuminate\\Cache\\CacheManager in PermissionRegistrar::__construct() and type-hinting...\nhttps://github.com/spatie/laravel-permission/blob/7f308806ca051fca42685e4a97a282139a6a7982/src/PermissionRegistrar.php#L42-L56\nIf I change it to the following, it stops the error\n/**\n     * PermissionRegistrar constructor.\n     *\n     * @param \\Illuminate\\Contracts\\Auth\\Access\\Gate $gate\n     */\n    public function __construct(Gate $gate)\n    {\n        $this->gate = $gate;\n        $this->permissionClass = config('permission.models.permission');\n        $this->roleClass = config('permission.models.role');\n        $this->cacheManager = app('cache');\n        $this->initializeCache();\n    }\n. ",
    "newbie78": "\nFrom version 2.28.1 I get the following error in Lumen 5.7.6\nBindingResolutionException\nUnresolvable dependency resolving [Parameter #0 [ <required> $app ]] in class Illuminate\\Cache\\CacheManager\nTo resolve this error I have to add the following to bootstrap/app.php\n$app->alias('cache', \\Illuminate\\Cache\\CacheManager::class);\nI don't know if this is an issue with laravel/lumen-framework, illuminate/cache or spatie/laravel-permission\n\nThank you very much!!\napparently this does not apply to this package, but it would be nice if the authors will cover this point in the documentation (it describes how to integrate the package in lumen). ",
    "ksangabriel": "\nThanks for posting this.\nI believe it is a bug, introduced in v2.20.0 with #874.\nWorkaround: If you call $user->save() before calling $user->assignRole() then this bug will not be triggered.\n\nThe workaround works. Thank you!. ",
    "horaceho": "After a while ...\n````\n\n\n\n$user->hasPermissionTo('list-locations');\n=> true\n````. \n\n\n",
    "helmut": "Happy to submit a pull request for this if you are still interested? I also came across this where having multiple logged in users from different guards gave unexpected access.. On further thought it does seem to be that Laravel relies heavily on the (changing) default guard throughout the code. For example the @can blade directives and the can middleware completely rely on the default guard because they fetch the default user from auth.\nPerhaps this is not something that should be added to the middleware for this package after all. I'm coming to the conclusion that adding guards to the middleware adds more problems than it solves.. No problems. Happy to help! Well sort of... haha!. ",
    "Rux77": "I was hoping that v3 would be released soon..\nAlso I didn't know that v1 support latest version of laravel..\nSince my question was answered, closing.. \nthank you,. ",
    "jeraldpunx": "What's the difference between these two though? It seems still go the same result though.\n\n. nevermind, figure it out\n```\npublic function getUsers()\n    {\n        $users = User::select(['id', 'name', 'email', 'phone', 'created_at'])->with('roles');\n    return Datatables::of($users)\n        ->editColumn('created_at', function ($user) {\n            return $user->created_at->format('Y/m/d');\n        })\n        ->filterColumn('created_at', function ($query, $keyword) {\n            $query->whereRaw(\"DATE_FORMAT(created_at,'%Y/%m/%d') like ?\", [\"%$keyword%\"]);\n        })\n        ->addColumn('role', function ($user) {\n            return '<a class=\"btn btn-primary\" href=\"#\">'. ucfirst($user->roles->first()->name) .'</a>';\n        })\n        ->addColumn('action', function ($user) {\n            return '<a href=\"'.route('admin.users.edit', $user->id).'\" class=\"btn btn-xs btn-primary\"><i class=\"fa fa-edit\"></i> Edit</a>\n            <a href=\"'.route('admin.users.destroy', $user->id).'\" class=\"btn btn-xs btn-danger\"><i class=\"fa fa-trash\"></i> Delete</a>';\n        })\n        ->editColumn('id', 'ID: {{$id}}')\n        ->make(true);\n}\n\n``. does$user->assignRole($request->role);` role remove recent role and overwrite it?\nfor example: I have admin then I choose to member, and when I execute $user->assignRole(\"role_name\");, does admin removed and changed to member right? \ncause when I try it, it added new.\n\n. Thanks this is what I did, \n$user->syncRoles($role);. ",
    "ycancc": "\nThis package is registered as stable, so it seems your problem is something related to either the composer command you entered, or other limitations by other packages already in your app.\nThe correct installation instructions are listed in the README.\n\nSeems to be in conflict with some packages? I tried to modify me command, but it all failed.. ",
    "hackerunet": "already found the answer, User::with('roles')->get();. ",
    "ramzan15596": "I Have tried this but this is not working. But when i try with this\n@can('writer|admin')\n    Permission\n@else\n    I have none of these permission...\n@endcan\nIts Works. ok thank u. i have another issue.  Gives exception while using \nRoute::get('/orders/create', 'OrderController@create')->middleware('role:manager');\nand this error comes \nClass Spatie\\Permission\\Middlewares\\RoleMiddleware does not exist. I have slash in the beginning of  \\Spatie\\Permission\\Middlewares\\RoleMiddleware::class, but still getting this error\n. I Installed the spatie permission as it is in documentation. but how can i get v2 of this package. . Yes i have an old version  \"spatie/laravel-permission\": \"^1.17\", but when i run this command composer require spatie/laravel-permission to upgrade to be in the stable version. it can not upgrade. This old version remain the same.. Thank u soo much chris. It works.  but i can't check two specific roles in web.php\nRoute::group(['middleware' => ['role:manager|super-admin,manager']], function () {\nwhen i try this with single role, without pipe\nRoute::group(['middleware' => ['role:manager,manager']], function () {\nI works with single role.\nThis is my db roles and permissions which i have created\nUsers table\n\nroles table\n\npermission table\n\nrole_has_permissions table\n\nuser_has_permissions table\n\nuser_has_roles table\n\nThank u\n. I put this code in my RoleMiddleware.php \n$roles = is_array($role) ? $role : explode('|', $role);\n        if (! $request->user()->hasAnyRole($roles)) {\n            abort(403);\n        }\nbut still getting the same error that i can't check two specific roles in web.php. ",
    "jnbn": "oh. my bad. Didn't see that it already exists. Thanks @drbyte . ",
    "PoZel": "Fantastic, thank you!\nCan see in DebugBar that it has constructed the database queries all nicely for me.\nJust what I was hoping was possible, and so clean and obvious when you know how. Thank you for the help.. So clever. Laravel makes it so clean. Thanks for the learning opportunity!. ",
    "svelu2002": "I'm using it in API layer of my application and I use it to point out the\ninconsistency.  But I feel it is good to have the exception thrown instead\nof removing this feature altogether.  Since we are hard-coding the\npermissions in the logic and somebody removes the permission (when not\nassigned to any role) from the db, we don't know what to expect.  When we\nhave this exception thrown, we can decide in the logic whether to treat it\nas true or false.  As of now we can live with the issue because we can use\nthe hasPermissionTo with || instead of using hasAnyPermission.  May be good\nto note it in the documentation.\nThanks.\nVelu\nOn Wed, Jan 9, 2019 at 10:23 PM Chris Brown notifications@github.com\nwrote:\n\nIt's in a state of flux, moving towards removing the exception altogether.\nFixing either is a breaking change.\nQuestion:\nAre you \"wanting\" the exception to be thrown because you \"need\" it for\nyour app?\nOr are you simply pointing out an inconsistency caused by the fact that\nhasPermissionTo throws it and thus your app is forced to do something\nwith the exception?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/spatie/laravel-permission/issues/994#issuecomment-452758705,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AMmfaN2aKtI5op_X-5SDKC3iJMWVhOPLks5vBh6dgaJpZM4Z3vwa\n.\n\n\n-- \nRegards,\nVelu\n. ",
    "mrajabtech": "I'm using https://laravel-tenancy.com and having the same issue. I even tried setting the config permission and role values runtime but no luck\nconfig(['permission.models.role' => This\\Is\\Second\\Role::class]);\n@bastien-phi did you find a way to fix this?. ",
    "azeos": "I'm facing the same problem with the same package.\nI created a middlware where I set the config with my own models. But PermissionRegistar is called before the middleware:\nphp\nconfig([\n    'permission.models.permission' => Permission::class,\n    'permission.models.role'       => Role::class,\n]);\nAlso tried to override the config from the tenant folder, but again, PermissionRegistar is called before the override happens.\nI can only think in 2 possible solutions:\n\nCreate a ServiceProvider that runs before PermissionServiceProvider and change the config there. But I change the config conditionally according to the route, and I'm not sure if I can access route params within a Service Provider.\nJust use one model and specify the DB connection within the __construct() some how.\n\nDid you find any solution?\nEDIT:\nI might have a solution, possibly not for all cases.\npermission.php with custom models:\nphp\n'models' => [\n    'permission' => App\\Permission::class,\n    'role'       => App\\Role::class,\n],\nThose models used to have the UsesTenantConnection trait as the guide suggests. That trait just overrides the getConnectionName() method. So instead of using the trait, I build my own:\nApp\\Role & App\\Permission:\n```php\nuse Hyn\\Tenancy\\Database\\Connection;\nuse Spatie\\Permission\\Models\\Role as SpatieRole;\nclass Role extends SpatieRole\n{\n    public function getConnectionName()\n    {\n        if (str_contains(request()->getHost(), 'admin.')) {\n            return app(Connection::class)->systemName();\n        }\n    return app(Connection::class)->tenantName();\n}\n\n}\n```\nI have an admin domain in my routes and that's where I need to use the system connection. Of course you should use your own logic.\nJust in case I leave the config override in my two middlewares (one for the tenants and one for the backend/admin):\nBackend middleware:\nphp\nconfig([\n    'permission.models.permission' => Spatie\\Permission\\Models\\Permission::class,\n    'permission.models.role'       => Spatie\\Permission\\Models\\Role::class,\n]);\nTenant middleware:\nphp\nconfig([\n    'permission.models.permission' => Permission::class,\n    'permission.models.role'       => Role::class,\n]);\nEDIT2:\nI had to prepend the current host to the cache key. If not, the same cache is used by all the domains and the wrong permissions gets loaded.\nI also moved the getConnectionName() logic to the config file (and removed it from the models).\npermission.php:\n```php\nif (str_contains(request()->getHost(), 'admin.')) {\n    $permission = Spatie\\Permission\\Models\\Permission::class;\n    $role = Spatie\\Permission\\Models\\Role::class;\n} else {\n    $permission = App\\Permission::class;\n    $role = App\\Role::class;\n}\nreturn [\n    'models' => [\n        'permission' => $permission,\n        'role'       => $role,\n    ],\n    'cache' => [\n        'key' => request()->getHost() . '.spatie.permission.cache',\n    ],\n];\n``\nI don't change the config file from the middlewares anymore and Role & Permission are usingUsesTenantConnection` again.\nThe only problem I'm facing is that I don't have a subdomain for each tenant, so the cache problem stills there. For now I'll just disable it.. ",
    "bastien-phi": "I found a solution but it is not a good one.\nI override a lot of the package (PermissionRegistrar, PermissionServiceProvider, HasRoles, ...) and do not use permission.models configs.\nIn a few words : \n- override PermissionRegistrar to tweak getPermissions and forgetCachedPermissions\n- override PermissionServiceProvider (and remove auto-registration of genuine PermissionServiceProvider) to swap PermissionRegistrar to yours\n- in your CustomPermission class, override getPermissions with :\nphp\nprotected static function getPermissions($params = null): \\Illuminate\\Support\\Collection\n{\n    return app(PermissionRegistrar::class)\n                     ->getPermissions(array_merge($params, ['class' => static::class]));\n}\nor something like that. The idea is to pass an extra parameter to the permission registrar to let it know which class it has to fetch.\nThere will be other methods to override (but honestly, I can't remember which ones...)\nNot sure this is the best way to do this. (I just cried when I updated from 2.30 to 2.36...)\nIt would imply a lot of changes to support this feature natively.... ",
    "marcelo2605": "Hey @drbyte, I'm trying to find out the error. \nI can confirm that I added use HasRoles; on my User.php as explained on README file. And my Laravel installation is almost fresh. This is the only package I added.\nAlso, I can get $user->permissions. The problem is with $user->getAllPermissions(). Fixed! It was a silly error. I was trying to store all permissions inside a permissions key. Like that:\n```\n$users = User::select('id', 'name', 'email')->get();\nforeach ($users as $user) {\n    $user->roles = $user->getRoleNames();\n    $user->permissions = $user->getAllPermissions();\n}\n```\nJust change the key to another string and the problem is fixed. Thanks for the great support ;-). Nice! I figure out this few minutes ago.. ",
    "sokeno": "Steps to recreate\n1.Did a fresh laravel install, configured the guards\n'guards' => [\n            'employee' => [\n            'driver' => 'session',\n            'provider' => 'employees',\n        ],\n]\n\n2.configured model \nnamespace App\\Company;\n//use Eloquent as Model;\nuse Spatie\\Permission\\Traits\\HasRoles;\nuse Illuminate\\Notifications\\Notifiable;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nuse Illuminate\\Database\\Eloquent\\SoftDeletes;\nclass Employee extends Authenticatable\n{\n    use HasRoles;\n    use SoftDeletes;\n    use Notifiable;\npublic $table = 'employees';\n\nconst CREATED_AT = 'created_at';\nconst UPDATED_AT = 'updated_at';\n\n\nprotected $dates = ['deleted_at'];\nprotected $guard_name = 'employee';\n\n3.After creating employee , I assign role \n if ($employee==true) {\n        $employee->assignRole($role);\n    }\n\n4.I create role and assign permissions\n$role = Role::create(['guard_name' => 'employee', 'name' => $request->role_name])\n$role->syncPermissions($request->permissions)\n\nI use artisan to create permissions\n\nphp artisan permission:create-permission \"manage_parameters\" employee\n\nOn my blade file, I check for permission        @can('manage_parameters','employee')\n        <li class=\"pcoded-hasmenu \">\n\n        </li>\n        @endcan. Thanks @drbyte for your input, I actually got the fix for it, The fix was to get rid of any defined relationships on my Employee model and add protected $guard_name = 'employee'; , Thanks.\n\n\n",
    "lbenevenuto": "I forgot to rename the file, sorry. I will correct.. ",
    "jthorpe-marco": "It appears to only be SQL Server. I just created a fresh application and a fresh MySQL database and was able to run the migration without any issues.\nEdit - I also tried a fresh SQL Server database and fresh application to ensure that it wasn't something to do with my existing application. It still looks like it's only when creating the foreign keys. I suppose this would be more of a Laravel issue than one with this package. If you agree then I'll open a ticket on that repo instead.. I forgot to mention that the new app I tested it on was Laravel 5.7. I'll make a ticket over there. Thanks for your help.. ",
    "asinan007": "no error was given off, i am just running as it is in this tutorial.\npermission table was created in the migration, but other tables weren't.. ",
    "kjjdion": "This is simply so I can group said permissions together in the UI with loops.. ",
    "spaceemotion": "@drbyte     Sorry for the late response, and thanks for the wonderful example!\nI asked around in the Laravel Slack channel and eventually resolved the issue as your example showed that it should work properly.\nWhile I still don't know how it happened, I know that the following \"fixes\" I've tried did not work as intended:\n- php artisan permission:cache-reset\n  I even got the \"Permission cache flushed.\" message, but no success.\n- app(PermissionRegistrar::class)->forgetCachedPermissions();\n  calling this via code in the Migration - where I've added the permission I wanted to check against - also did not properly flush the cache.\n- Setting the cache time to zero in the config file\nCompletely deleting the storage/framework/cache directory finally did the trick\u2026. ",
    "jica0725": "thanks. I really worked. ",
    "juancrescente": "probably something with my db, I deleted it and run again with no errors. oh ok, so I should add the permissions creation in a Migration, so it is executed only once. Sorry for the little understanding I have even of Laravel. ",
    "DelightedD0D": "@drbyte Yeah, it's just the guard_name column and the pivot tables.  Fair enough, I had a feeling that might be the consensus. . ",
    "mo7amed-3bdalla7": "\n@mo7amed-3bdalla7 Thanks for this.\nWhere in your app are you using this? Is it in controlling access to things, or is it in a UI where you are assigning/removing roles to users? or something else?\n\nI use when i want to get roles of specific guard name. ",
    "JTD420": "Thank you very much that solution worked perfectly!. I dont understand it. \nDoing a fresh install of Laravel on my server = working\nTesting my project locally = working\nUploading my project on my server = 500 error saying errors about it being unable to find different traits such as HasRoles...\nWhat could possibly be causing this conflict? :(. Do you have any recommendations for a potential fix? I've tried reinstalling composer and re-transferring my files. I'm about to buy a whole new server this is becoming a big enough issue! \nThanks,. Thanks,\nI tried this with Forge but it made it so permissions stopped working and only roles worked lol... I just removed the permission from my code and am only using roles now...\nAlso having issues because I need access to the db outside of localhost which is locked out by forge currently . Could the issue be with the fact I pushed my entire laravel folder to git and then that's what Forge used to deploy?\nWas I supposed to only upload certain files/folders so that composer would auto-install the dependencies?\nThanks. Where would the caching config be and what would I be looking for?\nI haven't created/used any seeders besides from the default ones that come with laravel and/or any dependencies of my project such as this one...\nI used Forge to provision and deploy the server automatically for me and then I used mysql workbench to import all of the SQL data from my development server to the production server (so should skip the need for any migrations and should be identical to my development machine, or so I thought?)\nThanks for your advice so far! :)\nIt's not the most important thing in the world as I've now removed it from my code and I'm just not using permissions and can rely on roles if necessary but I am curious as to what's at fault here tbh... \ud83e\udd37\u200d\u2642\ufe0f . ",
    "faradie": "I just found solution like this.\n\nprotected $primaryKey =\"yourKey\";\npublic $incrementing = false;\n\nand thats work fine for me.. ",
    "sumit22": "After creation of permission, cache doesn't gets updated, and this check you mentioned is done from cache. as a result duplicate permission will be generated.. ",
    "eNzyOfficial": "The default guards are web and api in the config, and as it takes the first it's not possible to chose which 'first' returns, right? Despite using an API route and thus setting api as the default guard, it on retrieving the role because ->first() always returns web. Am I missing something?\nWhat would you suggest would be the best way to remedy this? I don't really like the idea of hard coding the guard name into the model, but I guess this is the only way because getting to the default guard is basically not possible?\nI do understand the reasoning behind the decisions you outlined though and they are definitely justified, it's just a pain in the ass ahaha.. Awesome, I'll see what I can cobble together with the above. Thanks for the swift and helpful responses!. ",
    "narges70": "thank you @drbyte \ni create admin role and assign permissions, so make user and assign role for its.\nhow to fix this problem...?!\ndoes not work @can, @role, and can() function!. ",
    "Zolak94": "Awesome, thank you a lot.. One more thing, I use a lot of @can (66 in total) in my navbar and I manage to get the time of loading and its 300+ms before it was only 20-30ms.. \n\nGiven that #1031 suggests there may be an issue with caching for certain drivers, a couple questions:\n\nWhat cache driver are you using?\nDoes downgrading to version 2.25.0 improve the performance issue? (the caching logic was changed in 2.26.0)\n\n\n\nI'm using default one which is file 'default' => env('CACHE_DRIVER', 'file'),\nI don't know how to downgrade (can you help me with that?).\n\nCurrent version is  2.32.0. @drbyte unfortunately after downgrading to 2.25.0 it's still taking a long time to load pages, up to 5 seconds.. ",
    "ahmedkandel": "It's in the app code.\nI do an Artisan call as I am using Laravel Nova with command runner to give the admin the ability to do some cache related tasks, one of them is resting the permissions cache. I do have a middleware to do this whenever permission is assigned so it is optional to give a better user experience.\nas a solution, I have registered the command manually on the kernel and it is working. But regardless of Nova or the approach if I create a simple route with a closure to call the command using Artisan it fails.\n. Hello @drbyte \ndebugbar:clear from laravel-debugbar\nbackup:clean from laravel-backup. ",
    "JinalSomaiya": "i have also same issue more query listed in laravel-debugbar. so, what to do?. i am using\n1. CACHE_DRIVER=array\n2.  \"spatie/laravel-permission\": \"^2.15\",. ",
    "matthewgoslett": "I've noticed the same huge performance drop after updating to the latest version (which has the caching tweaks & optimisations).\nAs an example, we have a page which displays a table of data.  For each row in the table, we check against various permissions.  In this particular sample, we land up doing 1740 synchronous calls (387ms) to a memcached server.\n\n. > > ... after updating to the latest version ...\n\nWhat version were you using before you \"updated\"?\n\nWe were on 2.21. The getPermissionCacheKey in the HasPermissions trait is also affected by this.  I haven't dug too deeply yet, so not sure if there any other areas in the code which touch the cache.. I'm busy testing a WIP fork here - https://github.com/spatie/laravel-permission/compare/master...MasterStart:master\nIn addition to this, and whilst a separate issue, but checking for the same permission multiple times, when the cache driver is memcached, will have a significant impact on performance.\nie: If you have a page which spits out a table of users, and for each row in the table, you want to check that the user can View User, can Edit User, can Change User Password, etc.  200 rows of data * 3 permissions = 600 memcached calls.  A solution previously suggested is to also implement an in-memory object cache.. > @matthewgoslett Thanks for this.\n\nI've been reviewing and testing a bit.\nCurious: in your testing, while you said you observed time improvements, what's the RAM impact? Granted it probably requires a larger dataset to compare outcomes.\n\nI'm yet to roll this out on production as I've been pretty swamped at work.  I'll try do some profiling with New Relic late this week / early next week.. I'm running this on production and am getting some horrific read time to memcached.\n\n\nI'm trying to re-produce locally.\n\nIf I repl and try read the cache key, I just get this\n```\n\n\n\n\\Cache::get('spatie.permission.cache');\n=> null\n``\nThe value is always null, and\\Cache::has` returns false, yet DebugBar shows a cache hit, so I'm not exactly sure what's going on here.\n. Ah re the value always being null, I didn't realise that the cache store is decorated by a TaggedCache.. Here are the latest results from my production tests:\n\n\n\n\n\n. Hey All\nHave any changes been made into master since this release?\nI switched from my fork to latest release here, and I'm back to original perf issues again.. @drbyte I can confirm something iffy must've made it's way into master.\nHere's my results from this morning:\n\nEDIT\nThe \"switch to cache driver\" annotation should read \"switch from memcached to file cache driver\"\n. I've pushed a new commit now where I've removed use of tags (since we use a single cache key).\nI'm pushing a 2nd commit now to remove the redundant code, getPermissionCacheKey, getClassCacheString and getPermissionCacheString.. ",
    "nickparker39": "I believe I have the same issue. My app uses spaces in permission names as well.\nWhen checking the permission on the role, it will return true. Checking on the user will return false.\n```php\n$role = Role::find(1);\n$role->hasPermissionTo('view plans'); // true\n$user = User::find(1);\n$user->roles; // has same role as above\n$user->hasPermissionTo('view plans'); // false\n$user->roles()->first()->hasPermissionTo('view plans'); // true\n```\nRunning php artisan cache:clear is a temporary fix, but I've been trying to figure this out for a couple weeks now. I'll take a look at the code, but I'm also not quite as familiar.. ",
    "dudedigital": "I also face this issue with spaces in my permissions. I'm running Vagrant Homestead with Laravel 5.7 locally. I have an API call that checks 200+ permissions against the user to build the navigation. It was taking 80 seconds to complete with the file cache driver.\nSwitching to memcached reduced it to 6.8 seconds and with @matthewgoslett changes, file and memcached both drop to 2.9 seconds. I'm curious if anything else can be done to further reduce the overhead as each navigation item checks $user->hasAllPermissions().. ",
    "kossa": "@drbyte alright thank you, I need this for feature testing.. ",
    "zhengwhizz": "i'm using  redis  for cache. i know why, the cache key only using spatie....App.User.id , not has guard.\nI changed the logic from \n$u->hasPermissionTo(\"revoke permission\",'super') or $u->hasPermissionTo(\"revoke permission\",'default') ;\nto:\n$guard='default';\nif($u->isSuperman()){\n$guard='super';\n}\n$u->hasPermissionTo(\"revoke permission\",$guard)\nit can avoid this problem.\nmy user case is like this:  I have a company(super guard) to manager many compaines(default guard) in my system. and every compay has diffrent roles, I added a company_id to the role's table, it's barely can use, but some funcation like findByName can not use, i dont know how to rewirte it to fit the company.. ",
    "rajdipchauhan": "Hello,\nHere is the code snippets of Model, Controllers\nUser.php (Model File)\n```\nnamespace App\\Models;\nuse Carbon\\Carbon;\nuse Illuminate\\Notifications\\Notifiable;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nuse Illuminate\\Database\\Eloquent\\SoftDeletes;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Spatie\\Permission\\Traits\\HasRoles;\nuse Spatie\\Permission\\Models\\Role;\nuse Spatie\\Permission\\Models\\Permission;\nclass User extends Authenticatable\n{\n    use Notifiable;\n    use SoftDeletes;\n    use HasRoles;\n    protected $guard_name = 'api';\n}\n````\nMemberController.php (Controller file)\n```\nnamespace App\\Http\\Controllers\\Api\\Admin;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Models\\User;\n//use App\\Models\\Role;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Hash;\nuse Validator;\nuse Config;\nuse Spatie\\Permission\\Models\\Role;\nuse Spatie\\Permission\\Models\\Permission;\nclass MemberController extends Controller\n{\n    public function createMember(Request $request)\n    {\n     $user->assignRole('Admin');\n    }\n}\n```\nI have added this path in route Middleware\nprotected $routeMiddleware = [\n    // ...\n    'role' => \\Spatie\\Permission\\Middlewares\\RoleMiddleware::class,\n    'permission' => \\Spatie\\Permission\\Middlewares\\PermissionMiddleware::class,\n    'role_or_permission' => \\Spatie\\Permission\\Middlewares\\RoleOrPermissionMiddleware::class,\n];\nNow When I'm adding middleware for Role Authentication its give me error,\nRoute::group(['middleware' => ['role:Admin']], function () {\n}. Yes I already did that, I have written this above routes in Admin.php route file and imported this route file in Api.php in which I had check Auth middleware.\nLook at snippets of it.\nRoute::middleware(['auth:api', 'cors'])->group(function () {\n   require base_path() . '/routes/admin.php';\n}\nIn Admin.php route file\nRoute::group(['middleware' => ['role:Admin']], function () {\n        // Member Route\n        Route::post('/create-member', 'Api\\Admin\\MemberController@createMember');\n        Route::post('/edit-member', 'Api\\Admin\\MemberController@editMember');\n        Route::get('/view-member/{id}', 'Api\\Admin\\MemberController@viewMember');\n        Route::get('/delete-member/{id}', 'Api\\Admin\\MemberController@deleteMember');\n        Route::post('/members', 'Api\\Admin\\MemberController@getMembers');\n    });. I didn't use it separately but when I'm using\nRoute::group(['middleware' => ['role:Admin']], function () {\n}\n in admin routes it goes on below path where its check  hasAnyRole()\n/vendor/spatie/laravel-permission/src/Traits/HasRoles.php. ",
    "NHuebner1983": "yeh it looks like it only happens on force-delete, which is right. Sorry to bug you :). ",
    "highstrike": "Yeah, that's actually what inspired me to pursue extending the trait.\nBut traits are like copy / paste code and whatever is in the class will overwrite them, in my case extending the class as well, the trait takes precedent.\nSo my trait looks exactly like what @robjbrain wrote in #754 \nBut what I tried to explain here:\n\nApparently the permissions function defined in the original trait is overwritten in the original role model class (because the function is defined there, therefore it overwrites the trait).\nSo extending the class and using my own trait (while not having the function defined because i was expecting it from the parent) will use the function from the trait instead, resulting in the above error.\n\nThis is the underlying problem, I don't think it's a problem with the code of this repository, but with the architecture of PHP.\nMy question was if there was a better way to achieve what i wanted, without defining this function in my class\npublic function permissions(): BelongsToMany {\n    return parent::permissions();\n}. okay, thanks anyway :). ",
    "vkarampinis": "Some benchmarks:\nwith master branch it takes ~1000ms to find the proper permission in a list with 350 permissions and 350 calls.\nwith this patch with the same list and same calls:\nif the looking permission is in the first place of the list, it needs ~33ms\nif the looking permission is in the last position of the list (worst case scenario), it takes ~360ms\n\nPlaying around I came up with another solution\n```\npublic function getPermissions(array $params = []): Collection\n{\n    if ($this->permissions === null) {\n        $this->permissions = $this->cache->remember(self::$cacheKey, self::$cacheExpirationTime, function () {\n            return $this->getPermissionClass()\n                ->with('roles')\n                ->get();\n        })->reduce(function($carry, $item){\n            $carry[$item->id . '.' . $item->guard_name] = $item;\n            $carry[$item->name . '.' . $item->guard_name] = $item;\n            return $carry;\n        }, collect());\n    }\n$key = implode('.', $params);\nreturn collect([$this->permissions[$key] ?? null]);\n\n}\n``\nwith this approach it takes29msfor the same checks, without care if the looking item is in the first or the last place.\nOf course, this solution is a bit ugly and has the cons that the$paramsshould always have the (idorname) andguard_name` attributes.\nAlso, the permission list consumes twice memory than before.\nI don't believe this solution is so elegant.\nIn my situation, I will gain an average of 150ms (assuming that some permissions are in first places and others are at the last) but I don't like the cons I mentioned above.\n\nAny thoughts or suggestions are welcome.. I only gain ~20ms overall but this is because the object that gets from Redis is much smaller and deserialization is faster. This is logical.\nBut we can't remove ->with('roles') as a lot of tests are failing.. Hello,\nwe can't have any performance boost in findByName or in findById, because getPermissions() always returns one item. So the first() is happening almost instant.. ",
    "beard7": "@drbyte thanks for the suggstion re. using 2.35.0: the symptoms are dramatically different, i.e. it fixes my issues. I'll see if I can figure out what's changed, but I'm happy to stick with 2.35.0 for now.. There are a coupke of things that springs to mind.\nFirstly, I'm using the adldap2/adldap2-laravel package for authenticating against our AD server. The guard is still web, the only real difference in the config/auth.php is in the providers array:\n'providers' => [\n        'users' => [\n            'driver' => 'ldap',\n            'model' => App\\User::class,\n        ],\n    ],\nthe driver is ldap rather than eloquent.\nSecondly, I'm using my own Role and Permission models (but I can't remember why). I'll try reverting to the package supplied models.\nI don't know if that helps.. Using the supplied Role and Permission models has solved the issue (apologies, it was a bit stupid of me to forget I'd done that).\nI think the only reason I'd used my own models was that I added an extra descripion field, but that doesn't require different models.\nThanks for your quick response.. ",
    "abdhannan": "I have found solutions.\nJust make a new column in users table called \"type\", after users success register and logged in (on first logged in the controller) and assign the roles based on Auth users \"type\" column.\n. ",
    "shifatbuet": "Just try to get 10000 user\n row in index blade of user.\n(User view blade has datatable)\nThanks for your quick reply\n. That's what I am talking about.\nI don't want to fetch 100000 at a time ....\nI want first 100, then on click next 100 something like this.\n..... Okay. I will try that.\nThanks for your suggestions\nAnd also for this amazing project.\nI will  keep in touch with you \nCoz I am using your project. \ud83d\ude0a. ",
    "josegus": "Check how many request are dispatched by DataTable. For me, this was because i forgot to initialize datatable only in #my-table, datatable was initializing on every table (i had $('table') instead of $('#table'))\n\n. ",
    "waw3": "permissions table as follows\nid, name, guard_name, created_at, updated_at. \nreal world example\nauth()->user()->hasAnyPermission(['product.update', 'product.create']) returns false\nauth()->user()->can('product.update') return true\nauth()->user()->can('product.create') return true. yes\n. INSERT INTO permissions (id, name, guard_name, created_at, updated_at)\nVALUES\n    (30, 'product.update', 'web', '2019-03-11 02:45:16', NULL);\n. if you or someone else cant reproduce then no worries.. i got something screwy. also \nauth()->user()->hasAllPermissions(['product.update', 'product.create']) return false\nauth()->user()->hasPermissionTo('product.update') return false. does auth()->user()->hasAnyPermission tie into\nGate::before(function ($user, $ability) { });\nBasically in my AuthServiceProvider im setting a global Role to allow for ALL permissions\nGate::before(function ($user, $ability) {\n            if ($user->hasRole('Admin#' . $user->business_id)) {\n                 return true;\n            }\n        });\nPer This:\nhttps://github.com/spatie/laravel-permission/wiki/Global-%22Admin%22-role. Gate::before(function ($user, $ability) {\n            return $user->hasRole('Admin#' . $user->business_id) ? true : null;\n        });\nthis does return true;. > Only thing I can think of in your case, is that it's looking for a permission under a different guard\n\nare all your guards on 'web'? and in your config/auth.php defaults => guard = web?\n\nyes all guard names are web. config/auth.php\n'defaults' => [\n        'guard' => 'web',\n        'passwords' => 'users',\n    ],. ok so My role Admin#1 does not have any permission set in the table role_has_permissions\nreason is because i have this defined in my AuthServiceProvider:\nPer Wiki: https://github.com/spatie/laravel-permission/wiki/Global-%22Admin%22-role\nGate::before(function ($user, $ability) {\n    return $user->hasRole('Admin#' . $user->business_id) ? true : null;\n});\nThis works when you use for Admin#1:\nauth()->user()->can('product.create')\nauth()->user()->can('product.update')\nbut NOT when you use:\nauth()->user()->hasAnyPermission(['product.update', 'product.create'])\nauth()->user()->hasAllPermissions(['product.update', 'product.create']) \nauth()->user()->hasPermissionTo('product.update')\nauth()->user()->hasPermissionTo('product.create')\nafter adding the permissions to role_has_permissions this works as it should\nQuestions then is:\nPer Wiki: https://github.com/spatie/laravel-permission/wiki/Global-%22Admin%22-role\nShould adding the this:\nGate::before(function ($user, $ability) {\n    return $user->hasRole('Admin#' . $user->business_id) ? true : null;\n});\nAllow me not to have to add all permissions for Role Admin#1?\n. yes what your say is true\ni was assuming with the Gate::before, i didnt have to add permission for a user with Role Admin#1. It would act like a Super Admin per the wiki:\nhttps://github.com/spatie/laravel-permission/wiki/Global-%22Admin%22-role\nIt states:\nIf you want an \"Admin\" role to respond true to all permissions, without needing to assign all those permissions to a role, you can use Laravel's\nWhich makes that wiki page wrong or am i missing something?\nMy implementation is a helper function: \nusage \nuserCan('product.update') \nuserCan(['product.update', 'product.create']) // allow multiple perm\nif (! function_exists('userCan')) {\n    function userCan($permission = ''){\n        if(is_array($permission)) {\n          /  return auth()->user()->hasAnyPermission($permission); /\n            foreach ($permission as $perm) {\n                if (!auth()->user()->can($perm)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return auth()->user()->can($permission);\n    }\n}\nthis works as i need with Gate::before so i dont have to add permissions for a user with Role Admin#BUSINESS_ID (Super Admin)\n. > So in your example:\n\nauth()->user()->hasAnyPermission(['some.permission']) returns false because the user is probably not associated with this permission in any way\nauth()->user()->can('some.permissions') returns true because the user has been granted access via the Gate::before because he has the role Admin#BUSINESS_ID\n\nIs it true to say that the wiki https://github.com/spatie/laravel-permission/wiki/Global-%22Admin%22-role is miss leading or wrong\nWhy would they say:\nIf you want an \"Admin\" role to respond true to all permissions, without needing to assign all those permissions to a role, you can use Laravel's Gate::before() method.\nif it does NOT work with any laravel-permission methods and ONLY works with Laravels Native\nauth()->user()->can('some.permissions')\n. ",
    "milroyfraser": "@freekmurze @mathieutu in master branch still this is not update. It's just a method not an accessors getPermissionsViaRoles . + getAllPermissions. ",
    "wfeller": "Ooh... that's right, my bad /cry\nSorry about that and tyvm :). ",
    "maxxscho": "I haven\u2018t it tested yet, but if you use the before method, you can\u2018t use it for example in the AuthServiceProvider like demonstrated here #384 for a super user. The before method in this example doesn\u2018t get called.. @hackel I've tested it yesterday. I had a Gate::before() method in AuthServiceProvider to give all Permissions to a \"SuperUser\", similar to the example on #384 . The before method didn't get invoked.\nSetup of Laravel Permission was with Standard-User class of Laravel and anything Auth-related was as described as in the Readme. I was looking for a mistake on my App-Code, but everything looks well und works perfectly, except the Gate::before()-method.. @stevenyangecho thanks for the hint. I took a look at the Gate class, but it seems not close enough \ud83d\ude04 . ",
    "hackel": "@maxxscho The before method isn't a single-use hook, it adds the closure to a list of closures to run before the gate is checked.  If you haven't tested it yet, you should.  I can't think of any reason  other before calls shouldn't also work.. ",
    "stevenyangecho": "This seems indeed has issue.via  this laravel gate before() callback invoke code\nhttps://github.com/laravel/framework/blob/ac7eee2a13beb53b4806d1fb830f49dbf40df30c/src/Illuminate/Auth/Access/Gate.php#L290\nit means although  the  added closure is a list of closures.but onces ths closure return not null value ,just like return true or false,it will immediately return the result and ignore the other closures.\nand I looked the order regist of Gate::before().this  spatie/laravel-permission alwasy before my App\\Providers\\AuthServiceProvider so the Gate::before() in AuthServiceProvider will not be invoked\n. @maxxscho  because I have the same problem :) and dont know how to solve it .. ",
    "arakash92": "Like this, perhaps?\nreturn is_numeric($role)\n        ? app(Role::class)->findById($role, $this->getDefaultGuardName())\n        : app(Role::class)->findByName($role, $this->getDefaultGuardName());.\n",
    "d-lamers": "You are right, it's an oversight. I'll change it in this PR. "
}