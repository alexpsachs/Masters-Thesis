{
    "josh": "Just realized I didn't even have a link back to the project. Added one in 03b0a192c3329e76171bc8d2ed5c922f961d2027. I think if people have questions they can see the more detailed readme. Thanks.\n. Pretty neat!\nI'm still not sure what direction a CLI client go in. It could get complicated. I mostly use the cssExplain api for aggregating styles on full stylesheet bundles. Finding the top selectors w/ high specificity, in the universal category. And also doing things like grouping selectors by category and graphing their index key. The use cases are pretty unlimited. It seems like everyone else is going to want something different out of the CLI.\nI kinda think the score feature is pretty naive. Mostly added it for the bar on the demo page.\nThough, I think something simple would be helpful even if I need to reject other requests.\nI think I'd prefer to have a pretty dumb but parseable output. Either a comma or tab separate list. Then you can open that in Numbers or Excel and do some actually useful analysis with the data.\n. If you're interested in a reporting tool, checkout my other project dom-prof. Thats actually designed have a CLI tool (needs some love). It uses css explain itself.\nI'd kinda like to keep this lib simple and build other report tools around it.\n. > just tried a quick run of dom-prof... getting all kinds of exceptions\nheh, my help screen is totally broken / non-existent\n\n(and issues disabled on project??)\n\nd'oh, re-enabled.\n. I think I like that it uses a real browser environment to parse the stylesheets. This works a little better when your using sass/scss to compile your stylesheets. Just point it at your local app and get a profile report. Right now its only a dumb json output, I think this could be improved.\n. @igrigorik real wish for phantomjs, if it exposed the window.performance api so we could automate isolated frontend perf timings.\n. Heh, thanks!\n. Looks lovely!\n. :D http://josh.github.io/css-explain/\n. Ah, yuck. Theres definitely no strong reason for keeping the meter element.\n. ",
    "jonrohan": "Bad ass!\n. ",
    "parkr": "Hey @josh, I wasn't sure how you wanted to test this (if at all), so I didn't write any tests. Let me know how/if you want tests written and I'll write 'em up.\n. @jonrohan Thanks!\n. Dumb output could definitely make sense for computer programs/raw data analysis, but It'd be sweet to have more human-readable output as well. What about:\nbash\n$ css-explain style.css style2.css -t [type] # type = one of {human,csv,json}\nThat way, it's dumb but also useful to both people looking at the output and computers parsing it.\n. Ok, implemented a -t switch to specify type.\n```\n$ ./css-explain home.css screen.css -t csv\nSelector,Parts,Category,Key,Specificity,Score,Messages\ncontent   #body   .section-type   .stuff   p[class=bio] > a,#content,#body,.section-type,.stuff,p[class=bio],>,a,tag,a,2,3,2,7,Uses a child selector with a rightmost tag selector\ncontent   #body   .section-type   .stuff   .photo   .caption::after,#content,#body,.section-type,.stuff,.photo,.caption::after,class,caption,2,4,1,6,Uses a descendant selector with a rightmost class selector\nbody,body,tag,body,0,0,1,3,\ncontent   #body,#content,#body,id,body,2,0,0,2,ID is overly qualified by a descendant selector\ncontent:after,#content:after,id,content,1,0,1,1,\n.post-list > a,.post-list,>,a,tag,a,0,1,1,7,Uses a child selector with a rightmost tag selector\ncontent   #body   .section-type   .stuff   .photo   .caption,#content,#body,.section-type,.stuff,.photo,.caption,class,caption,2,4,0,6,Uses a descendant selector with a rightmost class selector\nform,form,tag,form,0,0,1,3,\nheader#main-header,header#main-header,id,main-header,1,0,1,2,ID is overly qualified by a tag name\npage-outer,#page-outer,id,page-outer,1,0,0,1,\n```\nBut if I want human-readable output, I can still get it:\n```\n$ ./css-explain home.css screen.css\nResults for home.css:\n    Results with score of 7:\n        header#main-header div a, header#main-header div a:hover, #content #body \n        header, #content nav, #content #body .section-type .stuff p[class=bio], \n        #content #body .section-type .stuff span, #content nav a, #content #body \n        .section-type .stuff .photo img\nResults with score of 6:\n    #content #body .section-type .stuff p[class=bio] > a:hover\n\nResults with score of 3:\n    #content #body .section-type .stuff .photo .caption, #content #body \n    .section-type, #content #body .section-type a.person, #content #body \n    .section-type .stuff, #content #body .section-type a.person \n    span.name:hover, #content #body .section-type a.person span.name, \n    #content #body .section-type a.person:hover, #content #body \n    .section-type .stuff .photo\n\nResults with score of 2:\n    header#main-header div#features-link, body:after, a:hover, a, \n    header#main-header div#leacocks-logo, header#main-header \n    div#photos-link, html\n\nResults with score of 1:\n    span.namehovered, span.current-bio, header#main-header, #content #body \n    #landing, .current, .current:hover\n\nResults for screen.css:\n    Results with score of 7:\n        ol li, header#main-header div, header#main-header div a, \n        header#main-header div a:hover, #content #body header, #content #body \n        .section-type .stuff .photo img, #content #body .section-type .stuff \n        p[class=bio], .content p, #content #body .section-type .stuff span, \n        #content nav a, #content nav\nResults with score of 6:\n    #content #body .section-type .stuff p[class=bio] > a, #content #body \n    .section-type .stuff p[class=bio] > a:hover\n\nResults with score of 3:\n    #content #body .section-type, #content #body .section-type a.person, \n    #content #body .section-type .stuff, #content #body .section-type \n    a.person span.name:hover, #content #body .section-type a.person \n    span.name, #content #body .section-type a.person:hover, #content #body \n    .section-type .stuff .photo, #content #body .section-type .stuff .photo \n    .caption::after\n\nResults with score of 2:\n    h1, summary, section, nav, menu, hgroup, header, footer, figure, \n    figcaption, details, aside, article, h5, blockquote:after, \n    blockquote:before, q:after, q:before, blockquote, q, td, th, caption, \n    table, ul, ol, html, video, audio, mark, time, summary, section, ruby, \n    output, nav, menu, hgroup, header, footer, figcaption, figure, embed, \n    details, canvas, aside, article, td, th, tr, thead, tfoot, tbody, \n    caption, table, legend, label, a:hover, fieldset, li, a, ol, dd, dt, dl, \n    center, i, u, b, var, tt, sup, sub, strong, strike, small, samp, s, q, \n    kbd, ins, img, em, dfn, del, code, cite, big, address, acronym, abbr, a, \n    pre, blockquote, p, h6, h5, h4, h3, h2, h1, iframe, object, applet, \n    span, div, body, html, h6, h1, h2, h3, h4, h5, h6, html, \n    header#main-header div#leacocks-logo, a, a:hover, header, \n    header#main-header div#photos-link, html, footer, ul, pre, code, em, \n    blockquote, ol, body, header#main-header div#campuspot-link, \n    header#main-header div#about-us-link, header#main-header \n    div#features-link, body:after\n\nResults with score of 1:\n    .current, .current:hover, .line-break, .site-description, .date, \n    #content #body, span.namehovered, span.current-bio, #content #body \n    #landing\n\n```\nWasn't sure how you wanted to proceed with human output. I still think human output is useful if you're analyzing just one file, but I guess the \"score\" is the only useful piece that humans can understand easily without processing stuff by a computer.\nI'd be happy to just do TSV, CSV, JSON support instead if you think the human-readable output is useless.\n. For this output, do you want to just print to STDOUT or do you think a -f option would be at all valuable to write to files?\n. Ok, so I should close this? Or just refactor to CSV/TSV-only CLI output? Lemme know.\n. ",
    "igrigorik": "Awesome, looking forward to playing with this!\n. @josh just tried a quick run of dom-prof... getting all kinds of exceptions (and issues disabled on project??)\n/Users/igrigorik/Desktop/test/dom-prof/index.js:105\n        report.jquery.find = aggregateCallLog(report.calls.jquery.find, 'selec\n                                                                 ^\nTypeError: Cannot read property 'find' of undefined\n    at ChildProcess.exports.profile (/Users/igrigorik/Desktop/test/dom-prof/index.js:105:66)\n. @josh this has been requested a number of times. AFAIK, that's an uphill battle, since it's based on QT port, which is lagging (far) behind. /cc @ariya\nInstead, perhaps leveraging something like this could do the trick: https://github.com/cyrus-and/chrome-har-capturer. M25 will have resource timing support as well, which gives you all the timing data on per-resource level.\n. ",
    "ariya": "@igrigorik @josh While it's the case, it's not actually not as bad as an uphill battle. I just don't have the time to complete the refresh (probably better tracked/discussed in http://code.google.com/p/phantomjs/issues/detail?id=31).\n. ",
    "tobiasahlin": ":D :boom::sparkles::sparkles:\n. Should maybe move away from  using the meter element at this point? Ton of weird selectors to style this properly.\n. "
}