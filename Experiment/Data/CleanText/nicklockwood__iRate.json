{
    "nicklockwood": "Any particular reason? (other than avoiding noise in the change logs)\n. OK, I'll make a mental note to remove them for the next update. Glad you like iRate!\n. Yes, it's designed to clear out all the settings if it detects that the version number has changed.\n. Hi dlinsin,\nI actually made a conscious decision not to include NSLocalizedString() within the library itself, the reason being that if I ever changed the default text strings in a future version, your localised string names would be wrong.\nThe recommended approach is to use the setters for the strings from within your app, and localise those, so for example, in your config you could say:\n- (void)initialize\n{\n    [iRate sharedInstance].messageTitle = NSLocalizedString(@\"Rate MyApp\", @\"iRate title\");\n    [iRate sharedInstance].message = NSLocalizedString(@\"If you enjoy using MyApp, please rate it\", @\"iRate message\");\n    [iRate sharedInstance].cancelButtonLabel = NSLocalizedString(@\"No, Thanks\", @\"iRate cancel button\");\n    ... etc\n}\nThis is slightly more work, but more flexible.\n. Hi Rutger,\nTo localize the strings in iRate, first set the message strings in your application initialize method, like this:\n\n- (void)initialize\n  {\n      [iRate sharedInstance].appStoreID = 355313284;\n  [iRate sharedInstance].messageTitle = NSLocalizedString(@\"Rate MyApp\", @\"iRate message title\");\n      [iRate sharedInstance].message = NSLocalizedString(@\"If you like MyApp, please take the time, etc\", @\"iRate message\");\n      [iRate sharedInstance].cancelButtonLabel = NSLocalizedString(@\"No, Thanks\", @\"iRate decline button\");\n      [iRate sharedInstance].remindButtonLabel = NSLocalizedString(@\"Remind Me Later\", @\"iRate remind button\");\n      [iRate sharedInstance].rateButtonLabel = NSLocalizedString(@\"Rate It Now\", @\"iRate accept button\");\n  }\n  \nYou can now use the standard Apple localization mechanism, which is to run the genstrings command line tool to extract the localizable strings above into a separate .strings file, which you can then translate into the different supported languages.\nDoes that answer you question?\n. Apparently the CFBundleDisplayName isn't always defined and doesn't always work, and oddly there's no constant for it, which seems a bit odd.\nAny idea where I can find a definitive Apple document stating which I should use under which circumstances?\n. I guess using BundleDisplayName and then falling back to BundleName if it's nil should be safe enough. I'll look at incorporating that in the next build.\n. Fixed in version 1.2.3\n. The problem I have with this approach is that in principle any method that does UI work could crash if called from the background thread. There are several other methods in the library that would crash if you called them from the background, so I'm not sure why this one should be singled out.\nI think it's generally good practice to assume that no method is thread safe unless it specifies otherwise. Nothing in the iRate documentation says that it's a good idea to call promptForRating from the background.\nIf you need to call it from a background thread, just use performSelectorOnMainThread from your own code.\n. That's actually already possible. Check the advanced example for details, but basically set enabled to NO in initialize and then call the following when you're ready to prompt the user.\nif ([[iRate sharedInstance] shouldPromptForRating])\n{\n    [[iRate sharedInstance] promptIfNetworkAvailable];\n}\n. I'm not seeing this warning, I think you must have some non-standard project settings.\n. Yes, you are correct of course. Seems to just be wrong in the header file though.\n. Fixed.\n. That's a good idea. In the meantime you can achieve this by using the existing delegate methods to intercept the rating alert and substitute your own. It's simple enough to create the alert (it's just a UIAlertView) and you can then insert your own logging. You can replicate the effect of the standard alert's buttons by calling the equivalent methods yourself (look under the \"advanced methods\" section in the documentation.\nNick\nOn 1 Dec 2011, at 10:06, Duane Fields wrote:\n\nThanks, great tool. Replaced my homebrew version with this... One feature suggestion. Can you add methods to the delegate that indicate what the user's action was, such as \"said yes\" and \"said no\", \"said later\", etc... This would be very useful for metrics, for example I can use Flurry to record the number of times prompts were shown, vs how many yes/no/later's I got to understand if people actually USE the rating helper, or if they always press no, in which case it might just be annoying.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/nicklockwood/iRate/issues/9\n. I've added three new delegate methods that fire when the user selects an option in the rating prompt. Let me know if that's sufficient for your requirements.\n. Hi Mic,\n\nIt shouldn't impact it, but maybe a better idea would be to use the significant event count feature instead. You could log a significant event each time the app launches, and use that to trigger the rating dialog instead.\nAs I said, it shouldn't be a problem to disable the notification, but you're better off not modifying the library unless you have to because that way you won't have to re-apply your change every time I do a new release.\nNick\n(Sent from my iPhone)\nOn 14 Dec 2011, at 10:51, Mic Pringle reply@reply.github.com wrote:\n\nHey Nick,\nWould it cause iRate any issues if I remove the support for the above notification ?\nMy iOS app is a music player which will naturally spend most of its time running in the background, only being brought to the foreground by the user when they wish to change the track or album etc. Therefore I don't think that using this notification to increment the use count really suits this scenario, and as such I would only like this to happen on app launch.\nAs far as I can I only need to remove the observer and the subsequent selector but before I do this I just wanted to make sure nothing else, that Iv'e missed, relies on this particular notification.\nMic\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/nicklockwood/iRate/issues/10\n. Hi Mic,\n\nHere's how I see it:\nMy aim with the library is to make it as useful as possible to a wide audience, but avoid adding features that only apply to one user, or where it will improve the library for a few users at the cost of the majority.\nYour aim should be to use the main fork if possible, or persuade me to make changes to the library to support your needs if it doesn't already do so, and only as a last resort should you fork it because even with github's excellent merging, that's still making more work for yourself, risking introducing bugs, and losing the benefits of me supporting issues you have in future.\nIt doesn't sound like your problem is particularly unique, but the solution of disabling the foreground event is obviously not something I could ever merge into the trunk. A better solution might be to do as you suggest and add a flag to ignore foreground events, which could then be a feature I could merge back in, but before doing that, let's just analyse your problem at bit more:\nThere are three way to trigger a prompt at the moment: 1) number of launches/foreground events, 2) number of days, 3) number of user-defined events.\nCriteria 1 and 2 must both be met to trigger a prompt. Criterion 3 is independent (it will trigger a prompt even if 1 and 2 have not been met).\nThe aim of these options is to defer the prompt until the user has used your app for a long enough time to have developed an informed an opinion about it (preferably a positive one). For a typical app like a game, this period is about 10 days assuming they use it at least once a day, which is why the uses and days both default to 10.\nThe reason why I treat foreground events as a use is because app launches are a very poor metric for interaction on modern iPhones because an app may stay running for days at a time but be opened and closed multiple times during that period. This is equally true for your app - cold launches tell you nothing about how much users are interacting with your app.\nOn the other hand, foreground events are quite a good metric for how much people are using your app. A user who installs the app, runs it a few times but then never really interacts with it won't generate any foreground events. A user who does use it properly will presumably frequently change tracks and so generate a lot of foreground events - more than most users of most apps.\nSo it seems to me that the best option is to do exactly what you said in option 2; Leave the days parameter at the default of 10, and set the uses parameter to something much higher than normal, say 100. That way users will only be prompted if they have had the app installed for at least 10 days and have used it a reasonable amount during that time.\nAlternatively you could ignore the days and uses completely (by setting them both to a very high number) and log an event whenever the user plays a track, or whatever other metric makes sense for your app, and then prompt the user after they've played 100 tracks (or whatever).\nNick\n. Yes, exactly.\nNote however that this must be called on the main thread.\n. The logic above is to check if the shouldPromptForRating function should return NO, in other words:\n\"if too few uses AND too few events then DO NOT prompt\"\nThis is consistent with the documentation, because the implication here is that if either the uses or the events thresholds are met then then above condition will fail and it will prompt.\n. Yes, so (using your example) the documentation says that the prompt will show if 3 < 3 or 3 < 16, and that's what's happening. What you are now saying is that you only want it to show if 3 < 3 and 3 < 16, contrary to the documentation.\nArguably I guess that may be more useful, so I might consider changing this behaviour, but it's technically correct as documented.\nTo override the prompt logic, without modifying the library (which is a bad idea for future compatibility), you can implement the iRateDelegate and supply your own logic in the iRate:shouldPromptForRating: delegate method.\n. I looked into changing the way it works, but it would be too likely to introduce bugs in existing projects due to the defaults. Since both useCount and eventCount default to 10, and both are optional, if I made them mandatory, users would have to remember to set eventCount to zero if they weren't using it, otherwise the rating would never appear. I think it's best just to leave it as it is.\n. Good catch. I'll fix it.\n. Fixed.\n. iRate 1.4 now has English, French, German, Spanish, Italian and Japanese. I did it in a different way using bundles, which is a bit more complex but simpler to integrate into projects.\n. You don't have to use ARC, but you do need to be using Apple LLVM compiler 3 or higher, otherwise it won't compile.\n. Try doing a clean from the Product menu. If that doesn't work, send your project to support at charcoaldesign dot co dot uk and I'll figure out what's going on.\n. I normally just set the remind button to nil for landscape-only games.\nYou can implement the above logic using the iRateDelegate to implement your own dialog. That involves duplicating quite a lot of logic though.\nI'll have a think about how easy it would be to implement something like this as part of the core library.\n. Thanks for the suggestion.\nI've modified the code so that it doesn't rely on hard-coded sizes, and added some logic to handle rotation so that it will be reapplied if the phone is rotated from portrait to landscape.\nI've included this in version 1.4.1.\n. Thanks!\n. I don't really understand the purpose of either of these changes. Neither of these lines generate warnings in the example project.\n. Yeah, that's intentional, and is covered in the documentation.\nXcode normally converts .strings files to binary plists at build time, but for some reason it didn't seem to work when I used strings files in a standalone bundle, so I pre-converted them\nYou can edit the files by right-clicking in Xcode and selecting open as property list.\n. Good point, and this does need a fix of some kind. I might think a little more though about the name for the setting though before I merge this (once I add something to the public API, it's hard to change).\n. Okay, I can't think of anything better - I'll merge it!\n. Are you sure?\nBy default, if debug is disabled iRate will only prompt if the following are all true:\n1) The version of the app you are running matches the latest version on iTunes\n2) 10 days have passed since the current version was installed\n3) The app has been opened 10 times or more since it was installed\nThose are quite hard criteria to recreate during testing, but if you set your configuration to:\n[iRate sharedInstance].onlyPromptIfLatestVersion = NO;\n[iRate sharedInstance].daysUntilPrompt = 0;\n[iRate sharedInstance].usesUntilPrompt = 0;\nThen you should see the alert. if you don't, maybe your bundle ID is wrong, or there's some other issue?\nIf you are trying to test with a brand new, never released before app then don't worry as iRate only works with apps that are on the store already. You can try setting the appStoreID or applicationBundleID to an app you know is on the store if you'd like to double check.\n. Can you tell me your app's bundle ID and paste the code you are usingo to configure iRate, and I'll try to reproduce this at my end.\n. Okay, I understand the issue. I use the device locale for the app store country by default because the vast majority of users use the app in the same country they bought it, and there's no way to find out the actual app store country programmatically.\nYour app is not available to buy in Australia, so it's reasonable to assume that the number of users with your app in Australia is essentially zero (other than yourself, obviously, but you're the developer).\nI don't really see this as a problem because when the app is released it won't cause a significant number of missed ratings, however if it bothers you, you can set the following code:\n[iRate sharedInstance].appStoreCountry = @\"PK\";\nWhich will force the app to always check the Pakistan app store.\nNick\n. The English, Italian, French, Spanish, Chinese, Turkish and (now) German have been checked or contributed by humans. Not sure about the others.\n. When you say the alert looks \"off\" if the text is too long, can you clarify? For example, are you referring to the German text? And do you mean in portrait or landscape? Which OS version did you test on? Can you provide a link to a screenshot of the problem?\n. French, Italian and Spanish have all been verified by native speakers. Chinese and Turkish were donated by github users, so I don't know if they are accurate but I'm assuming they are. The rest are machine translations.\nI don't have the list of names to hand although you can deduce them by studying the pull history for the project if you wish. I fail to see what difference the names would make. I'm not pretending they are human-translated when they are machine translations - why would I? \nIf you are unhappy with that, you are free to source your own replacement translations from a professional translation service (I recommend icanlocalize.com), or use the ones from Appirater instead. If you would like to contribute better translations back to the project then they would be gratefully received.\nI am however curious about the layout issue you reported. If you can give me reproduction steps, I will fix it.\n. I'm not seeing what you're seeing. Here's a screenshot from iOS 5.1:\nhttp://charcoaldesign.co.uk/images/screenshots.irate.2.png\nCan you send me a shot of what you are seeing?\n. Update to the latest iRate version and see if you're still seeing the issue. Was your screenshot taken on the simulator or the device?\n. I believe I fixed it. Unfortunately I had to use some \"magic numbers\" for the layout because I couldn't identify the logic that iOS uses to position the labels, so you may find it doesn't work for every possible text combination.\n. I just got the German text professionally retranslated. The text they've produced is:\nWenn Sie %@ m\u00f6gen, w\u00fcrden Sie es bitte bewerten? Dies wird nicht l\u00e4nger als eine Minute dauern. Danke f\u00fcr Ihre Unterst\u00fctzung!\nDo you have any opinion about this? How does it compare to the text you provided? It seems shorter, so I'll probably use it unless you say it's bad.\n. Please do.\n. Thanks, will do. Wish you'd mentioned it a couple of hours earlier - I just had Polish professionally retranslated! I'll use your version though.\n. It turns out that I was setting the lastReminded property after calling the delegate method, so your setting it to nil had no effect. I've fixed this bug, however in this particular case it probably makes more sense just to set the reminder period to zero.\nYou bug is fixed in version 1.4.7, and I've also added an \"Events Demo\" example, which shows how best to implement this behaviour.\n. NSInteger has a maximum value of 2147483647, which is a pretty big number. If your app generated an event every second it would take 68 years to reach that number.\nIn the unlikely event it did get to that point, it wouldn't crash, it would just wrap around to -2147483648 and keep counting, so in another 68 years it might pop up the rating dialog again.\nSo in conclusion, it's probably not worth worrying about ;-)\n. I just checked and I'm actually using NSUInteger for the event count, so the maximum value is actually 4294967295 and it would take 136 years to wrap around. Apart from that, everything else I said still stands.\n. It's probably a good idea in retrospect, but it's not backward compatible with apps that are already using iRate, so I can't really add it or I'd annoy a lot of users\n. Sorry ;-)\n. Darn. Probably the best bet is to use a more generic app store URL on iOS 6 for now and just open the app page until someone figures out the new direct path.\n. Yeah, the app store in iOS6 seems to be a completely new app. The old one was a web-app and this one appears to be native code, and quite buggy as you point out. I'm seeing all the prices in $ in the UK for example.\nHopefully there will still be a URL-based deep-linking mechanism in the final release, but we'll have to wait and see what happens over the course of the beta development.\n. I see they've fixed the currency issue in beta 2. Deep links are still broken though.\n. No fix yet. There's a few months left for Apple to decide to support the old URL scheme, but ultimately if we get to GM and there's still no deep linking to the ratings page in iOS6, I'll just have to make it point at the app page instead.\n. I've fixed this in version 1.5. It may require another update if I do find a way to link directly to the ratings page on iOS6, or if they restore this feature before it's released, but at least for now it will take users to the correct page instead of an error.\nI've used itms-apps://ax.itunes.apple.com/app/id123456789 because it launches the app store directly instead of first opening Safari.\n. Great news! I'll restore the original links.\nI think we were right to be cautious though. I would have hated to get 1000 support requests today from people whose apps had stopped working ;-)\n. Yes, Apple decided to change the link sometime in the last few days (independently of the iOS6 release).\nI released an update to iRate yesterday that fixes them again.\n. It might be worth me giving a clearer error message in this situation - a more specific error like \"Bundle ID not found on app store\" would probably cause less confusion.\n. I've seen the same issue with apps containing some of my other libraries on iOS 4.x. I believe that Apple has changed something in Xcode 4.4 that is breaking ARC code that previously worked.\nI don't have a Snow Leopard machine to test on any more. Can you do a couple of experiments for me?\n1) Try building your app with Xcode 4.3.3 or earlier, and see if it works correctly on 10.6.8\n2) Try building the app using progressively earlier versions of iRate until you find one that works. You can get all the previous releases of iRate from the tags page.\nHopefully from the results of those tests I'll be able to work out what's causing the issue and fix it.\n. I've fixed the problem for iOS 4.3, which I'm assuming will also fix it for Mac OS 10.6 as they both use ARCLite.\nThe issue was that the + (void)load method was apparently firing before the ARCLite library had fully loaded.\nI've deferred the class setup until the main runloop has started, and that seems to have solved the problem. The fix is included in iRate version 1.5.1.\n. I'm sorry you lost many hours to debugging this, but I'm not sure what I could have done beyond fixing the issue when I found it, which I did, a week ago.\n. @pilot34 Sorry for the snappy answer. I do appreciate bug reports, and I do try to fix issues when they arise. If you check the release notes you will see that this issue was fixed a while ago, but I appreciate it's easy to miss that. For what it's worth, this bug was introduced by Apple in Xcode 4.4 and did not happen under Xcode 4.3, so I fixed it as soon as I could have - it wasn't a case of the previous release of the library not working with ARC under iOS 4 and me simply not bothering to test it or mention it in the docs. Unfortunately I have no way to notify users of bugs or updates.\n@Tibbs Thanks for the support, I appreciate it.\n. The issue is that the +(void)load method fires before the main thread has started, and whilst this wasn't a problem previously, as of Xcode 4.4 it seems that ARCLite (the library that implements ARC support on iOS4) isn't properly initialised until then. performSelectorOnMainThread delays the code from executing until the main thread has started, by which point ARC is working properly.\n. I see that you've closed the issue - did you figure out what the problem was?\n. Yes, that's correct. It will work once the app is live, but not prior to submission.\nIf you set [iRate sharedInstance].debug = YES; then you can test what the behaviour will be once live (remember to remove that again before you submit).\n. It's an interesting idea, but the only purpose I can think of would be for me to test that the library works correctly (which I can do by running it using a live app ID, as I do in the example projects). I don't see that an end user would get much benefit from it versus the existing debug mode option.\nThe valueForKey:inJSON method is purely to support iOS 4. I will eventually replace it with NSJSONSerialisation when I drop support for iOS 4, but there's no reason to do that now. I'm aware that it's a horrible hack, but I don't want to force people to use an arbitrary JSON library, and supporting all known JSON libraries (like AFNetworking does) requires a lot more, much nastier code.\nIf you do want to add a simulation mode for some reason, why not just use sample JSON data for simulation instead of a dictionary? Seems like it would make life easier.\n. Option one is a good idea, I'll look at adding it.\nOption two is already implemented. Just set promptAtLaunch to NO.\n. I understand that you'd like iRate to save this preference automatically (so if you set the disabled option, it would remain disabled even after you relaunch the app, until you set it to false again). I'll think about it, but my first instinct is that this is outside the scope of iRate itself.\nThis is very easy to implement yourself however. The simplest way is probably to add something like this to your AppDelegate:\n- (BOOL)iRateShouldPromptForRating\n{\n    return [[NSUserDefaults standardUserDefaults] boolForKey:@\"RatingPromptEnabled\"];\n}\n. I've added the option to stop prompting the user after they've rated the app, even if a new version is installed.\n. What is the benefit of this as opposed to putting either of the following in the AppDegelate:\n+(void)initialize\n{\n    [iRate sharedInstance].promptAtLaunch = IRATE_AUTOLOAD_ENABLED;\n}\nOr\n- (BOOL)iRateShouldPromptForRating\n{\n    return IRATE_AUTOLOAD_ENABLED;\n}\n?\n. Thanks. Now fixed.\n. OK, I figured out which bits I needed and I've included them in version 1.5.4. Thanks.\n. Nice idea. I'll include it in the next release. Thanks.\n. I've renamed the property to something a little clearer, but this feature is now included in version 1.5.4\n. Yep, well spotted.\nIt only happens if your deployment target is set to iOS6. It's harmless, but I'll fix it in the next release anyway.\n. This is now fixed in version 1.6\n. Yes, that should work. It should be sufficient to set [iRate sharedInstance].applicationBundleID to the bundle ID of your live app.\nUnfortunately by removing the actual IDs from your bug report it's a bit hard for me to follow exactly what the issue is. I take it that in the console when iRate reports that \"iRate found that the application bundle ID (com.domain.appID)\" the ID is the ID of your ad-hoc app, and not the ID you set?\nWhere in your code are you setting the [iRate sharedInstance].applicationBundleID? Is it possible that it's being set after iRate has already made the app store request?\n. Is your app actually live already?\n. Can you post the exact setup code that you're using, including the correct bundle/appIDs so I can try it and see if I can work out why it's not working?\nI can understand if you don't want to post them here (although it is public information anyway) so email it to support at charcoaldesign dot co dot uk if you prefer.\n. This works for me if I paste it into the iPhone Demo app included with iRate:\n```\n+ (void)initialize\n{\ndefine TARGET_NAME_Doddle 1 //also works if I use TARGET_NAME_DoddlePro\n[iRate sharedInstance].previewMode = YES; // also works if set to NO - make sure it's NO for release\n//[iRate sharedInstance].promptAtLaunch = NO; // demo app doesn't work if this is NO\n[iRate sharedInstance].onlyPromptIfLatestVersion = NO; // you should set this to YES for release\n//[iRate sharedInstance].promptAgainForEachNewVersion = YES; // this is the default anyway\n//[iRate sharedInstance].verboseLogging = NO; // this is the default for non-debug builds\n[iRate sharedInstance].daysUntilPrompt = 1;\n[iRate sharedInstance].usesUntilPrompt = 3;\n[iRate sharedInstance].eventsUntilPrompt = 4;\n[iRate sharedInstance].remindPeriod = 5.0;\n\nNSString *bundleID = nil;\nNSString *appTitle = nil;\n\nif defined TARGET_NAME_Doddle\nbundleID = @\"com.doddleme.Doddle\";\nappTitle = @\"Doddle\";\n\nelif defined TARGET_NAME_DoddlePro\nappTitle = @\"DoddlePro\";\nbundleID = @\"com.doddleme.DoddlePro\";\n\nendif\n[iRate sharedInstance].applicationName = appTitle; // used in default message\n[iRate sharedInstance].applicationBundleID = bundleID; // if you set this you don't need to set appID\n[iRate sharedInstance].message = nil; //this doesn't work - if you want to clear the message use @\"\"\n[iRate sharedInstance].messageTitle = [NSString stringWithFormat:@\"Please Rate %@\", appTitle];\n[iRate sharedInstance].cancelButtonLabel = @\"No, thanks\"; //this is the default anyway\n[iRate sharedInstance].rateButtonLabel = @\"Yes\";\n[iRate sharedInstance].remindButtonLabel = @\"Remind Me Later\"; //this is the default anyway\n\n}\n```\nI don't think I've made any significant changes from what you posted, except to remove redundant code (I've also put in some comments for code that you should look at more closely).\nDoes the code above work for you?\n. iRate normally gets the bundle ID from the plist. You only need to set it if you want something different from the plist (e.g. for an ad hoc build that uses a different bundle ID).\n. This is behaving as expected. From the documentation for the eventsUntilPrompt property:\n\"once the day threshold is reached, the prompt will appear if either the event threshold OR uses threshold is reached. This defaults to 10 events.\"\nSo if you are not using the usesUntilPrompt value, you should set it to INT_MAX instead of setting it to 1, then it won't factor into the equation.\n. Sorry, I didn't see your update. I've moved it to the bottom of your post so it's clearer for anyone else who is reading.\n. Thanks! It was actually professionally translated, but I guess you never know what you're getting.\n. Have you added a Localizable.strings file to your project and made sure that Portuguese is selected as a supported language in Project > Info?\nIf so, try doing a clean build from the Product menu - it may just be that you have a previously cached strings file from the old version.\n. It used to be the case that iRate would be localised to all supported languages even if your project was not, but this is not what most people would want. Is it really the case that you have no text in your app that needs to be localised apart from iRate?\nHere is a tutorial that includes screenshots of how to add new languages: http://www.aboveground.com/blog/xcode-4-4-and-localizable-strings-no-way-to-add-language\nNote that this is the Info tab under Project, not under Targets.\n. The reasoning was that it's a bit odd to have mixed content in an app. If the rest of the app is in English, one particular modal should not be displayed in Russian, or whatever.\n. It is true that iTunes will display all the languages you've added, but the idea is that you should only add support for the languages that you intend to localise your whole app for, and ignore the other ones that iRate supports.\n. I may be able to add it back as an option. I'll think about it.\nThe previous solution was a pretty nasty hack, requiring me to basically bypass the standard localisation mechanism, pre-compile strings into binary plists, etc. The new solution is much cleaner and more compatible with how Apple intends it to work.\n. OK, I have a solution that should work. Give me a little while.\n. OK, check out version 1.5.5. I think I've found a solution that should suit everyone.\n. FYI, I've renamed 1.5.5 to 1.6, but it's the same code, in case you were wondering.\n. Why would you want to build on Xcode < 4.5?\n. I suggest you revert to iRate 1.6 until you've upgraded your CI server. You can get iRate 1.6 from the tags page in github.\n. Sorry, I meant 1.5.3.\n. The App Store under iOS6 can be a little bit flakey. Can you paste the URL that iRate is attempting to open and I'll see if it looks correct (it would help if you don't obfuscate your app ID - it's public information anyway).\n. It seems Apple changed the format of the URL slightly. That was nice of them.\nI've fixed it in 1.6.2.\n. Sorry for not responding earlier - I now have so many projects it's hard to keep track of them all!\nThis seems like a good feature suggestion, although if it can't take you directly to the ratings page then it should probably be optional. I'll investigate.\n. That's a clever solution, but it would mean localising that extra text, which at this point would be a nightmare. I think it's fine as it is, if people can't find the review tab when it's right in front of them then you probably don't want them writing a review :-)\nAnyway, this feature is now included in version 1.7.\n. Yes, remind period can only be set in terms of days.\nYou can implement this easily enough using the delegate by setting usesCount back to zero after they ask to be reminded.\n. The error is because iRate now requires the StoreKit framework to be included in your project.\n. The deprecation warning is fixed in 1.7.1\n. I've incorporated @nonamelive's fix into 1.7.2\n. So you're saying that [SKStoreProductViewController class] returns a non-nil object on iOS5 if you build an app using XCode 4.6 DP3?\nThat's very strange. It sounds like a bug in XCode, but it's worrying nonetheless. Can you log the value of [SKStoreProductViewController class] and see what it says?\n. I haven't changed anything. If it's not happening now then it's presumably because Apple fixed something.\n. When I say zero config, I mean zero :-)\n. It sounds like your iRate.m file hasn't been added to your app target for some reason. In the right hand sidebar, check the correct target is checked for that file.\n. You need to add the StoreKit framework (it's mentioned in the 1.5 README under installation instructions).\n. Thanks for the tip. I'll take it under advisement.\n. Upon further reflection, you were right. But you're still a ... challenging individual.\n. Comments are closed for this post.\n. It's not really a good idea to subclass iRate. This might work, but only by coincidence. iRate loads itself by calling the sharedInstance method automatically. If you call sharedInstance on your subclass before iRate has loaded it will override the static variable and so the instance that gets created will be your class, but if iRate loads before you call sharedInstance on your subclass then your subclass's sharedInstance method will return the iRate instance that's already been created.\nBasically, subclassing singletons is a bad idea.\nWhat is it you are trying to do with your subclass? Can it be done using the iRate delegate instead?\n. Yeah, I guessed that's why it was working, but it's not something you want rely on. I might change the way loading works in a future release and end up swapping the order.\nThe shouldPromptForRating method is exposed so that you can call it from your own code.\n. Heh. If you look at the codebase for 1.6.2 and earlier, I already had this exact feature.\nI made a policy decision in 1.7 to remove support for manual memory management, for the following reasons:\n1) It's very easy to selectively enable ARC for a single file in a non-ARC project (see README).\n2) I don't want to encourage or endorse the use of manual memory management - I think it's crazy.\n. Hi Alberto,\nAs per my first point, you can use iRate in a project that does not use ARC by setting the -fobjc-arc flag on the iRate.m file without needing to upgrade your project to ARC.\nIf you are including iRate inside a library then if you apply the -fobject-arc flag the iRate.m within the library project, end users need not be aware of it at all.\n. Sorry, it's not possible as far as I know. I haven't personally found that it's an issue, even though my game is played by kids quite a bit. Out of hundreds of reviews I've only had a handful of 1 or 2 star reviews, and only one or two where the text was incongruous (i.e. they said they loved it but rated it 1 star).\n. I'm not sure I fully understand the question.\nIf you want to show iRate after a specific number of custom-defined events then you can do that by calling the logEvent method, but iRate doesn't let you specify multiple types of event.\nIf you need to do that you can do it by keeping track of the events yourself and then returning YES or NO in the iRate shouldPromptForRating delegate method if your custom event threshold has been reached, or by just bypassing iRate's logic entirely and calling promptForRating when you determine that you need to.\n. iRate doesn't have any text input code, it just calls the StoreKit API to show the rating panel. If the keyboard isn't appearing in the in-app rating view then that's an Apple bug and you should file a radar with them.\nThat said, as a workaround you can disable in-app-ratings by setting disaplyAppUsingStorekitifAvailable = NO, then it will take people to the app store instead.\n. @stuffmc - thanks, this has been fixed.\n@fredericcormier sorry, are you saying it should have the \"le\", or that that is wrong? (apologies but the copy has been updated since and I'm not sure which version you commented on).\n. Thanks. This is fixed in latest beta.\n. That's weird. Is it happening on the device or only the simulator?\nI don't really have any control over the display of the StoreKit modal, so if it's not working correctly there's not much you can do except disable the StoreKit feature.\n. 1) Can you be more specific about the display issue?\n2) What iOS version are you running?\n3) What happens when you run the iPhone example included with the iRate library in your iPad?\n. I think someone else reported a similar issue, but they said it was ok on the device. Must've just been an xcode bug. \n. Sorry, I've not decided if I want to add this feature or not. I can see that it's potentially useful, but it would open the flood gate to basically duplicating all of iRate's fir notification scheduling functionality for reminders as well, and that doesn't seem reasonable. I'm therefore considering whether a different approach would be better, but as yet can't think of one.\n. I use a global gitignore file to avoid adding noise to my individual libraries, so no need for this.\n. I would encourage them to also use global .gitignore files.\n. By enabling preview mode you are telling iRate to pop up every time the app opens. Preview mode is only supposed to be used for debugging purposes.\nAlso, you shouldn't perform configuration in your button action because it's misleading. iRate is a singleton, so any configuration you perform has a global effect. Do all your configuration in the initialize method.\n. Unfortunately SKStoreKit doesn't have a method to go directly to the reviews page. If you want to use the direct link you can disable storeKit and iRate will launch the App Store instead.\n. Yes, I'll do that \u2013 it was an oversight.\n. Thanks, I'll merge it now.\n. This makes sense logically, but I don't love the increasing clutter in the public interface caused by these customisation methods. I'll think about this for a while. Perhaps there's an alternative approach.\n. The former, unfortunately. You can disable StoreKit if you prefer and it will open the correct tab in the App Store app instead.\n. Are you using the latest version? Can you post a stack trace, and if possible use breakpoints to identify the line where it happens?\n. Those are delegate methods - you don't override them, you define them in your app delegate.\nBut you don't need to do that to disable StoreKit - you just set \n[iRate sharedInstance].displayAppUsingStorekitIfAvailable = NO;\nIn your app delegate.\n. Can you give an example of a scenario where this would be necessary?\n. This is no longer relevant since Apple now no longer allows apps to be rated using the in-app store page\n. iRate already passes -Wall - what settings are you using? \n. You're preaching to the choir with respect to warnings, but if you turn on an arbitrary set of warnings then any code will fail at least some of them. I test against -Wall, which represents the complete set of recommended clang warnings (recommended because they don't generate a lot of false positives, as opposed to, say -Wextra, or -Weverything).\nUnless you have an argument and/or supporting evidence for why the specific warning settings you have chosen to enable  in your project are important, I'm not sure why I should worry about them.\nIt's not that I don't consider warnings important in general, it's just that I prefer to follow a consistent set of coding standards across all of my projects, based on well-defined criteria, and currently I code against -Wall.\n. Some context for why I use -Wall:\nhttp://programmers.stackexchange.com/questions/122608/clang-warning-flags-for-objective-c-development\n. I would use -Wextra, but it flags up stuff like unused arguments in delegate methods, which makes it palpably useless. It also doesn't catch loss-of-precision afaik.\nI don't have an opinion on loss of precision particularly. Which flag enables it? Maybe I'll give it a try as an addition to -Wall.\nAs to your immediate problem, I suggest maybe building iRate as a static lib, or using CocoaPods. That way you can use it in your project without incurring warnings or having to maintain a fork with your fixes\n. As of version 1.8 beta, iRate is now fully -Wextra compliant. That will probably still have warnings for the settings yo use however.\n. Hi Mark,\nYou've set promptAtLaunch to NO, meaning that iRate won't display a prompt unless you specifically tell it to somewhere in your code.\nJust remove that setting and it should work fine.\nNick\nOn 9 May 2013, at 21:08, Mark Paul Keefe notifications@github.com wrote:\n\nHi Nick,\nI have no idea what I'm doing wrong, but for the life of me, I have never had iRate work except in preview mode. With previewMode on, it works fine every time. With previewMode off, I've never seen it work, and I've had it installed in my app for months. Do you have any suggestions, before I give up and try something else?\nHere is my setup code, from my App Delegate class implementation:\n- (void)initialize\n  {\n  if ([self class] == [MBAppDelegate class]) {\n      [self setupPreferences];\n  }\n//configure iRate\n  [iRate sharedInstance].daysUntilPrompt = 3;\n  [iRate sharedInstance].usesUntilPrompt = 5;\n  [iRate sharedInstance].remindPeriod = 2;\n  [iRate sharedInstance].promptAtLaunch = NO;\n  [iRate sharedInstance].previewMode = NO;\n  //    [iRate sharedInstance].previewMode = YES;   // In production, this should be NO.\n  ...\n  }\n  \u2014\n  Reply to this email directly or view it on GitHub.\n. Hi Mark,\n\nIf you do that it will always prompt, regardless of the settings you've specified, or whether there is a network connection.\nYou probably want to use:\nif ([[iRate sharedInstance] shouldPromptForRating])\n{\n    [[iRate sharedInstance] promptIfNetworkAvailable];\n}\nNick\n. Yes. If the prompt is already visible on screen then it won't display another prompt, and if the user dismisses the prompt then shouldPromptForRating should return NO until the rules are re-satisfied.\n. Which OS version is this on? In-app reviews are only supported on iOS6+\n. Curious. I don't control the experience inside the StoreKit window though. Is this happening on a live app in the store, or just in testing mode? It may be because you haven't bought the app, etc.\n. Does this happen for you in the sample app included with iRate? If not, what happens if you change the bundle ID to match your app?\n. I think this may be a change in iOS 6.1.3. It's not something that I can control.\n. Yes. I may remove the option since it seems that it's no longer useful.\n. As of iOS 7 it does not seem to be possible to go direct to review page anymore. StoreKit is now disabled by default, but you can re-enabled it if you want.\n. Yes, this is a feature not a bug. It's actually documented in the README file in the openRatingsPageImAppStore method description.\n. See the documentation for that method.\n. That's a good idea actually. I can do that.\n. Just an update - I've partially implemented this, in that the bundleID is saved in settings. I've not implemented prefetching of the bundle ID on first launch though.\n. This is now fully implemented in 1.8.1\n. This may be a silly question, but is your app live yet?\n. OK, @andy380743909, your app worked with iRate when I tried it (the bundle ID is com.livestation.lualuaar, correct?) - if it's not working for you, can you check the console log (you may need to enable verbose logging) and paste it here?\n@therauli iRate will work fine with your app once it is in the store, but it won't work until it's live. You can fix that by setting the app ID explicitly, but that isn't necessary. Enable preview mode if you'd like to see what it will look like before you submit.\n. Make sure you are using the latest version of iRate by the way - Apple changed the URLs for iOS 6.1, so if you have a version that's a few months old, that may be why it doesn't work.\n. You don't need to set the appstore ID manually - iRate gets your bundle ID from the info.plist automatically. To test it, set previewMode = YES.\n. To actually verify that the event-based logic you've implemented works, the simplest way is to set the bundle ID in your plist to another app that's already on the store (you can use the rainbowblocks bundle I included in the example) and then change the date on the device or simulator to however many days in the future your logic is set to trigger.\n. iRate checks the iTunes JSON feed, so it won't work until the app is actually live. If it gets as far as showing that error though, everything is working fine.\n. You should not build apps using SDK version 5 - apple won't accept them. If you wish to support iOS 5, build using SDK 6 but set the minimum deployment target to iOS 5.\n. Detection of the iOS version has to be done at runtime, it an't be done at compile time. iRate will correctly detect that it is running on iOS 5 and disable the StoreKit functionality, but it has to be built using SDK 6 or the compiler won't recognise the StoreKit symbols.\n. Thanks. I've incorporate these fixes into the latest beta.\n. Yeah, I'll keep an eye on it, but as @ddaddy says, it makes sense to wait for GM before changing anything.\n. Are you seeing anything in the logs?\n. That sounds like it's unrelated to iOS 7. Did it work for you on iOS 6?\n. Yeah, I've made the same change in the later beta. It's not ideal because it doesn't take you to the actual ratings page, but it's better than nothing.\n. Yes. Still doesn't work.\nI've pushed a new beta that just points to the app page on iOS7 for now.\nHopefully they'll either fix it by the final release, or an alternative link will present itself.\nNick\n. Fixed in 1.8 beta 2\n. You drag and drop the iRate class (iRate.h + iRate.m).  that comes with the library into your project. You do not need to create any classes or write any code. You do need to add the StoreKit framework as well though (google how to add built in frameworks in Xcode, if you're not sure).\n. CocoaPods is a useful tool, but it doesn't relate directly to your problem. From the sounds of it, you've probably just made a simple error when importing the iRate files or the framework.\nTrying to use pods at this point will probably cause more confusion. Trying to run before you can walk, so to speak.\n. What were the compile errors you were getting? Can you paste the console output into your question?\n. Can you add the files back in, then zip up your project (with errors) and email it to support at charcoal design dot co dot uk. I'll take a look.\n. I'm really sorry to hear that - it must be a new rule. StoreKit isn't critical to iRate's functionality. I'll release a patch ASAP.\n. I've pushed version 1.8 beta that disabled StoreKit by default, and no longer requires that you link against the framework.\n. Fixed in 1.8 beta 4\n. Don't worry, it's not a private API. It's just that to get the root view controller, iRate tries various checks including looking to see if your AppDelegate has a property called viewController. If it doesn't, you get this warning. I'll update iRate with a fix tonight, but if you can't wait then it's safe to either remove that code or ignore the warning.\n. This is fixed in beta 3\n. Yep - this is fixed in the latest beta.\n. Soon, I expect. Once I'm confident that it's doesn't have any issues.\nIf you need to launch now I'd advise just linking it straight into your app.\n. The property was removed because it existed only in case of possible conflicts with future iOS versions - I was under the impression it worked fine for all cases on iOS 6. I'll see if I can tweak its behaviour to work correctly in your case. \n. OK, this is fixed in beta 6\n. I actually quite like this idea, but it is regarded as a sleazy trick, apparently:\nhttp://www.zumsteg.net/2013/12/13/how-skimming-reviews-makes-apps-twice-as-slimy/\n. I've already added support for the new format in the 1.8 beta. Are you having problems with the latest version?\n. I don't think it's explicitly documented, but it will continue to be called every time the app is opened until the user explicitly declines it.\nYou can also trigger it manually whenever you want by saying if(shouldPromptForRating) promptForRating.\n. Yep.\n. I normally use a common base class for all my controllers. Makes it easy to do something like that.\n. No, there's no way to tell if the user rated the app.\n. I'm actually not sure what the correct solution is here. I've tried to replicate the iOS lookup behaviour in iRate, and I assumed that iOS would use the next item in your language list if it didn't find the first, but maybe it should just default straight to US english instead?\n. To be clear though - this definitely doesn't affect all (or even most users) as I'm pretty sure that anyone who hasn't been swapping languages for testing purposes will have US english as the second item in their languages list, not French (I do).\n. Adding an en-GB localisation is clearly the simplest fix. Just not sure if it's the correct one.\n. This is fixed in 1.8.1\n. That is true, but it was unnecessary in this case because iRate is a singleton.\nCan you give an example of how this causes a problem in other language bindings? (I assume you mean something like RubyMotion or Xamarin, but I'm not very familiar with these tools).\n. You don't need to define appStoreIS to test an app that isn't on the store. Preview mode will let you test and it will pick up the ID automatically when the app is released.\n. Very true. I'll investigate what's going on there.\n. Fixed in 1.8.1\n. Yes, Apple seem to have disabled the button on iOS 7. I suggest you don't use that feature (I'll probably remove it in the next version unless Apple decide to reinstate support for it).\n. I've removed Storekit support in 1.8.1 as I don't think Apple are going to put this feature back :-(\n. I'm not sure. It didn't work for me when I tried it previously, but maybe they changed their minds again.\n. Is the bundle ID of the version you are testing the same as the bundle ID of the live version?\n. Actually, what method are you using to open the App Store from your button? iRate looks up the app ID automatically when it's running in the default mode (rating after a specific number of uses), but if you implement your own button you need to trigger that lookup manually, or set the app ID explicitly.\n. The method you should use for a \"rate this app\" button is:\n- (void)promptIfNetworkAvailable;\nIf you call\n- (void)promptForRating;\nInstead, it will only work if you've set the appStoreID explicitly (which normally isn't necessary).\n. I see the problem. It's not your fault, maybe I need to be clearer in the documentation.\nCurrently though, to use this method, you need to set the [iRate sharedInstance].appStoreID explicitly. You can get your appStoreID from your iTunes connect page (or it's just the numeric part of the iTunes URL for your app).\nI'll see if I can make this work more intuitively in the next release.\n. The better way is to do this, but it's bit more complex:\n```\n@implementation MyViewController\n\n\n(IBAction)promptForRating:(id)sender;\n{\n    //perform manual check\n    [iRate sharedInstance].delegate = (id)self;\n    [[iRate sharedInstance] promptIfNetworkAvailable];\n//you might want to disable the button and show a spinner here\n}\n\n\n(void)iRateCouldNotConnectToAppStore:(NSError *)error\n{\n    //restore delegate\n    [iRate sharedInstance].delegate = (id)[UIApplication sharedApplication].delegate;\n//hide spinner and display error\n}\n\n\n(BOOL)iRateShouldPromptForRating\n{\n    //don't show prompt, just open app store\n    [[iRate sharedInstance] openRatingsPageInAppStore];\n//restore delegate\n[iRate sharedInstance].delegate = (id)[UIApplication sharedApplication].delegate;\n//hide spinner\nreturn NO;\n}\n\n\n@end\n```\n. That's fine. The rating button should still work OK.\nThis approach disables the automatic rating popup though - it will only let you rate by pressing the button.\n. To be clear, it's an either/or thing. Either set the numeric appStoreID, or use the code I specified. You don't need to do both.\n. OK, I've updated the code sample above so it won't stop the normal notification from working.\nThe rating won't work in the simulator because there's no App Store app for it to open. It should work fine if you run it on a device.\n. It shouldn't be, unless your app isn't live. Are you sure you're using the latest version? What error did you get?\n. Sorry about that, but in version 1.8, the documentation did state that the openRatingsPageInAppStore method required the ID - it was only the automatic rating prompt that did not.\nAs of the latest version, that method does not require it either.\n. Oops. Well spotted. Thanks!\n. I've enabled -Weverything in the warning settings and I'm still not seeing the issues you mention. Any idea what compiler settings you might be using to generate these?\n. I've fixed these in 1.8.3.\n. iRate runs automatically, you don't need to add any code to your app to make it run.\nTo disable iRate, either add [iRate sharedInstance].promptAtLaunch = NO; to your app delegate initialize method, or just remove the iRate pod from your project.\n. +(void)load;\n. This method has been removed in the latest version of iRate anyway because iOS7 no longer allows you to rate apps via the StoreKit modal.\n. Way ahead of you.\nhttps://github.com/nicklockwood/iRate/blob/master/RELEASE%20NOTES.md\n. I understand this point of view, but I honestly can't imagine that the amount of users who write multiple reviews for the same app is worth the negative PR of having this feature.\nIn retrospect I wish that I had implemented a (less radical) reduction in this functionality earlier so that things didn't come to the extreme that they did, but ultimately it's not worth the damage to my reputation to put this back in, so I won't.\nIt's possible (though not especially easy) to implement this yourself using iRate's delegate system, or you could fork the library and put it back, but I'd urge you to reconsider doing so, at least until you've shipped a few updates and verified that the lack of this feature is actually having a negative impact on the reviews you are receiving.\n. I'll think about it.\n. This is implemented in version 1.10.\n. This seems more like an issue with how the iOS localisation system works than something that should be fixed in iRate. \nYou can use the Slovenian strings when the device is in English by copying the Slovenian iRate strings into your apps en localisable.strings file. Then they'll override the en strings in the iRate bundle.\n. Fixed in 1.9.1.\n. Wow, that's a lot of locales. Thanks!\n. Can you check which version of iRate you are using? (it's in the header file)\n. OK, well I can't reproduce this. If you have more info or steps to reproduce, please reopen.\n. I haven't forgotten about it, but since it's not fixing any bugs or adding any critical new features, and I don't want to risk introducing bugs by merging it without testing it properly, I'd prefer to wait and include it in the next planned release, which may be a little while away.\n. Done. But can you clarify what you mean by a dev ID that's not public?\n. No, you would have to implement a completely custom alert, which you can do using the delegate.\n. Sorry, closed by accident!\n. If you have verbose logging enabled, you should be able to see exactly why it isn't showing from the logs. You can extract these from the settings on the device in a production build.\nthe promptIfNetworkAvailable method should only work after app has launched, so that's normal.\n. Makes sure [iRate sharedInstance].verboseLogging = YES, then have a look at what iRate logs to the console - it should give detailed feedback about why it has or hasn't prompted for feedback.\n. Actually sorry, I take that back. This makes testing certain custom functionality more difficult. E.g. the advanced Mac example project included with the library.\n. I've added a comment to this effect in the previewMode documentation.\n. Cool, I'll check it out. Thanks!\n. This is implemented in version 1.10\n. That's because it's a calculated property. If you set\ndeclinedThisVersion = NO;\nIt will have the effect of resetting declinedAnyVersion to NO as well (which in retrospect is a bit weird, but never mind).\n. Which version did you ship in production? I found a bug in 1.10 that would account for this, but it was only released a couple of days ago.\n. No problem. Sorry about that!\n. I've added this fix to 1.10.1\n. This is fixed in 1.10.1\n. If firstUsed was nil (due to the user having installed an app running version iRate 1.10, and not previously having used an earlier version) then there is no possible way to know when the app was actually first used, so assuming that the first use date is now is the best we can do.\n. You're right that this is a bug, but wrong about the effect. The iRateLastVersionUsedKey isn't used in the onlyPromptIfLatestVersion check.\nThe effect of the bug is that if you update the app, every time it opens it will move the self.firstUsed date forward by one day, with the effect that it will never display the rating prompt, regardless of the settings.\n. OK, I think this is fixed in 1.10.2. Let me know if you see any other issues.\n. Hi, you're partly right. Th problem with your patch was that you never reset the logic once the app is updated, which meant that the promptForNewVersionIfUserRated would always prompt the day after they install the new version, which isn't what I wanted.\nMy fix didn't work correctly, but that's what it was trying to achieve.\nI believe I've now implemented this correctly. To be honest I need some unit tests around this because it's way too complex to test manually, but it's not really structured in a way that makes it easy to automate.\nAnyway, to address a couple of your points:\n3) Why do you use +1 in the if condition? I don't quite understand. The if should be the same like the one checking whether it's time to rate now. If it's not time to rate now, no problem.\nIf the user had installed the app daysUntilPrompt -  1 second ago, then your logic wouldn't reset the time, so potentially they might still be notified the same day (e.g. if the closed and reopened the app and the time was now daysUntilPrompt + a few seconds). By subtracting an extra day, I avoid that issue.\n5) Just one minor thing I have noticed is that since you update defaults in any case now, [defaults synchronize] should be moved out of the else block behind it. But this really isn't a big problem - you could actually skip the synchronize calls completely as iOS calls synchronize for you automatically (it's useful just in the case the app crashes before).\nThe firstUsed setter method calls synchronise automatically, so this is not actually a bug.\n. Ha ha, whoops. I thought I'd fixed that.\n. Er, yes, you're right about the ratedVersion:lastUsedVersion thing too. Man, I am not on my game today.\n. Yeah. Let's not do this again :-)\n. Does your app only support portrait? Have you implemented any code for - (BOOL)shouldAutorotate, etc?\n. This isn't actually a bug, but a design decision. Arguably it was a bad decision, but applying this fix as it stands actually breaks the default functionality, since usesUntilPrompt defaults to 10, so any app that doesn't log any events will never present the notification.\nIf you want to prevent notifications unless both use count AND event count have been reached, you can add this additional check using the iRate delegate.\n. I'll leave this open for now - I may consider changing this behaviour at some point but it will need some other changes to be made as well.\n. I have no objection in principle, but it seems a little redundant since you can just broadcasts a notification yourself from the app delegate if needed.\n. No problem. Sorry for the oversight.\n. The best option is to disable iRate in the +initialize method using\n[Shades sharedInstance].promptAtLaunch = NO;\nThen, once you have downloaded your configuration file and configured shades, call\nif ([Shades sharedInstance].shouldPromptForRating)\n{\n    [[Shades sharedInstance] promptIfNetworkAvailable];\n}\n(Or just wait until the next time the app launches, and don't disable Shades if the config file has already been downloaded).\n. Well spotted - I totally agree.\n. Thanks!\n. This is included in 1.11.\n. Goog to know - thanks!\n. Looks good. I've merged it into 1.11\n. That isn't a bug, that's telling you that iRate is working correctly but that it can't open the ratings page on the simulator because it doesn't exist (you have to test on a device).\n. DEBUG is a standard macro set by Apple for debug builds. You may have removed it or not set it in your project, but that shouldn't cause any problems.\n. Which is...?\n. I don't understand the question.\n. Oh, I see. Will you be putting your app in the store eventually?\n. Just put the library in your program and it will work automatically when you submit to the app store.\n. These two issues are unrelated.\nThe Cocoa.h not found bug was due to the #import <TargetConditionals.h> being missing from iRate.h - I've fixed that for the next release.\nThe country detection is working correctly for me, but it is based on the locale of your system. If your device (or the simulator) is set to US locale then it will use that - I expect that's why it wasn't working correctly for you.\nIf you want to hard-code the locale however, you can do so by putting the following in your App Delegate - there's no need to modify the iRate library:\n+ (void)initialize\n{\n    [iRate sharedInstance].appStoreCountry = @\"gb\";\n}\n. Have you looked at the iPhone Custom UI Demo included with the example projects?\n. Hmm. This is problematic, but UIAlertView is deprecated, so not supporting UIAlertController isn't really a long-term solution. I guess I can add an option to not use UIAlertController for now, but at some point it will probably become mandatory.\n. OK, I've added a property \"useUIAlertControllerIfAvailable\", and set it to NO by default.\n. I can imagine this will cause some pain in future, but it should solve the problem for now.\n. Sorry about that. It was a bug in 1.11 that was fixed in 1.11.2. The only solution is to upgrade to latest and re-release the app.\n. It should work AFAIK, but you can test it yourself by setting previewMode = YES (remember to set it back to NO before release)\n. The code is correct. It used to be the current version but the behaviour has since changed and the documentation is now incorrect.\n. Hmm, I thought that I was registering \"No, Thanks\" as the cancel button, so it's curious that it would behave differently from other apps. I'll take a look.\n. In stacked layout, the cancel button always appears at the bottom, regardless of whether you add it first. Seems odd that side-by-side layout works differently.\n(Not doubting you, just confused by the inconsistency)\n. If your [UIApplication sharedApplication].delegate doesn't have a window property, that means it doesn'f conform to UIApplicationDelegat protocol, which sounds like a pretty serious bug in your app. I'm not too familiar with what consitutes normal for a cocos2D app though.\n. Yes, it's possible by using the delegate. But have you looked at my iPrompt and iNotify libraries? They might be better suited for what you're trying to do.\n. If you add this to your app delegate, iRate will never prompt automatically:\n+ (void)initialize\n{\n    [iRate sharedInstance].promptAtLaunch = NO;\n}\n. Well, you know what they say: naming things is the hardest problem in computer science \u00af_(\u30c4)_/\u00af \n. Based on the stack trace, the crash is related to some GPU/OpenGL library, not part of iRate. Some Googling suggests that it's part of Apple's MapView implementation?\nI suspect what it happening is that iRate is appearing in front of your MapView or OpenGL-based view, and that view is crashing due to a bug. Perhaps it doesn't like being paused or put into the background?\nThe best way to replicate it is probably to try showing an alert at random times after startup in your app and seeing what happens and/or to report this bug to Apple and see what they say (although they'll probably need a simple project that reproduces the issue to be able to do anything - as would I)\n. If you can't find or reproduce the problem, your best option is probably to disable the automatic display of iRate on launch by adding this to AppDelegate\n- (void)initialize {\n    [iRate sharedInstance].promptAtLaunch  = NO;\n}\nThen, when you get to a safe point in the app, call\n[[iRate sharedInstance] promptIfAllCriteriaMet];\nWhich will show the rating dialog, but only if all the criteria you've set have been met (number of days installed, etc).\n. Just set [iRate sharedInstance].promptAtLaunch = NO; in AppDelegate +initialize method, then add a button which calls [iRate sharedInstance] promptIfNetworkAvailable];\n. AFAIK that isn't possible with a standard alert. You can build your own alert and tell irate to use it though, by using the delegate functions.\n. Gah, more despicable app review bullshit. Try appealing it, since it's clearly not in violation - that check is only there so developers using iRate aren't confused when they try to run in on a simulator.\nMeanwhile, I'll add a fix to remove that code and replace it with #if TARGET_IPHONE_SIMULATOR which will do the same job.\n. OK, thanks!\n. There's no way to know, unfortunately.\n. They are used by the macOS target. That code is compiled out on iOS using #ifdef statements.. I have another library called iVersion that does exactly what you're asking for. You can use it together with iRate in the same project.\n. I use +load to support zero config (no need to reference iRate in code - it just works).\nIf you want to disable iRate with a feature flag, you can do so by setting [iRate sharedInstance].promptAtLaunch = NO; in your app delegate.. I'd guess this is fixed now? I don't use Carthage though, so please confirm.\n. Thanks for bringing this to my attention. Fixed in 1.11.6\n. Hi Seb,\nMake sure that the iRate.bundle has been included in your project, and that it is included in your app target.\nIf it is, try looking inside the app bundle of your built app and verify that the iRate.bundle is in there.\n. @iLandes SwiftyiRate appears to be an uncredited copy of iRate. I have nothing to do with that project, and I'd encourage you to use this one instead, as I cannot vouch for the other one.. As far as I know, there are no issues.. Should be fixed in 1.11.7. Thanks!. iRate sets the bundle ID automatically using\n[[NSBundle mainBundle] bundleIdentifier]\n\nWhich is equivalent to the code you pasted. You only need to set it manually yourself if you want to override it for some reason.. If you ask for a rating after the 3 requests, nothing will happen. If you want to have \"request review\" button in the app, you should not use SKStoreReviewController (and iRate doesn't, if you call the promptForRating method manually).. Fixed in 1.12. Implemented in 1.12. Well, iRate now uses the official API on iOS 10.3 and above, so it should be OK.. Yes, this is a bug. It sounds like not using SKStoreReviewControllerIfAvailable may be prohibited on iOS 11 anyway, so I may just remove the option.. AFAIK, Apple is now rejecting apps that don't use SKStoreReviewControllerIfAvailable, so this seems like a low priority to fix.. You shouldn't need to call [[iRate sharedInstance] promptForRating]; at all. It will automatically display the prompt once all criteria are met. The promptForRating method is only needed if you want to have a \"rate now\" button in your settings or something.. If you use -[[iRate sharedInstance] logEvent: YES] the prompt will show immediately after you've called iteventsUntilPrompt times, provided that the other criteria have also been met.. It's intentional. Apple says that you should never show SKStoreReviewController using a user-facing button because it's not guaranteed to appear.. Yes, it's because initialize is only called the first time you reference the class, and I want it to be executed even if you don't have any references to iRate in your code (zero-config mode).. I have no control over that dialog, but it makes sense that Apple would disable the button in debug builds, or in cases where you aren't permitted to submit a review (e.g. Because you haven't bought the app, or it's not been released yet). Is this using the latest version of iRate? The URL changed recently.. @zapjonny you can override the URL without forking iRate by adding this to your setup code:\n [iRate sharedInstance].ratingsURL = ...\n\n. That's not really related functionality. I already have another lib called iVersion for that purpose.. Did you look in the console logs in Xcode? iRate should tell you why it didn't appear.\nYou might need to set iRate.sharedInstance().verboseLogging = true though.. SKStoreReviewController implements its own throttling, so it won't keep prompting aftet the user rates the app.. I'm not sure how that's measured. I'm assuming that a) it won't prompt the user to rate a version they've already rated, and b) a request to rate that doesn't display anything won't count against the 3 prompt limit.\nAFAIK, there's no way to detect whether the user actually rated the app, which is why I don't set the ratedThisVersion flag.. Any particular reason? (other than avoiding noise in the change logs)\n. OK, I'll make a mental note to remove them for the next update. Glad you like iRate!\n. Yes, it's designed to clear out all the settings if it detects that the version number has changed.\n. Hi dlinsin,\nI actually made a conscious decision not to include NSLocalizedString() within the library itself, the reason being that if I ever changed the default text strings in a future version, your localised string names would be wrong.\nThe recommended approach is to use the setters for the strings from within your app, and localise those, so for example, in your config you could say:\n- (void)initialize\n{\n    [iRate sharedInstance].messageTitle = NSLocalizedString(@\"Rate MyApp\", @\"iRate title\");\n    [iRate sharedInstance].message = NSLocalizedString(@\"If you enjoy using MyApp, please rate it\", @\"iRate message\");\n    [iRate sharedInstance].cancelButtonLabel = NSLocalizedString(@\"No, Thanks\", @\"iRate cancel button\");\n    ... etc\n}\nThis is slightly more work, but more flexible.\n. Hi Rutger,\nTo localize the strings in iRate, first set the message strings in your application initialize method, like this:\n\n- (void)initialize\n  {\n      [iRate sharedInstance].appStoreID = 355313284;\n  [iRate sharedInstance].messageTitle = NSLocalizedString(@\"Rate MyApp\", @\"iRate message title\");\n      [iRate sharedInstance].message = NSLocalizedString(@\"If you like MyApp, please take the time, etc\", @\"iRate message\");\n      [iRate sharedInstance].cancelButtonLabel = NSLocalizedString(@\"No, Thanks\", @\"iRate decline button\");\n      [iRate sharedInstance].remindButtonLabel = NSLocalizedString(@\"Remind Me Later\", @\"iRate remind button\");\n      [iRate sharedInstance].rateButtonLabel = NSLocalizedString(@\"Rate It Now\", @\"iRate accept button\");\n  }\n  \nYou can now use the standard Apple localization mechanism, which is to run the genstrings command line tool to extract the localizable strings above into a separate .strings file, which you can then translate into the different supported languages.\nDoes that answer you question?\n. Apparently the CFBundleDisplayName isn't always defined and doesn't always work, and oddly there's no constant for it, which seems a bit odd.\nAny idea where I can find a definitive Apple document stating which I should use under which circumstances?\n. I guess using BundleDisplayName and then falling back to BundleName if it's nil should be safe enough. I'll look at incorporating that in the next build.\n. Fixed in version 1.2.3\n. The problem I have with this approach is that in principle any method that does UI work could crash if called from the background thread. There are several other methods in the library that would crash if you called them from the background, so I'm not sure why this one should be singled out.\nI think it's generally good practice to assume that no method is thread safe unless it specifies otherwise. Nothing in the iRate documentation says that it's a good idea to call promptForRating from the background.\nIf you need to call it from a background thread, just use performSelectorOnMainThread from your own code.\n. That's actually already possible. Check the advanced example for details, but basically set enabled to NO in initialize and then call the following when you're ready to prompt the user.\nif ([[iRate sharedInstance] shouldPromptForRating])\n{\n    [[iRate sharedInstance] promptIfNetworkAvailable];\n}\n. I'm not seeing this warning, I think you must have some non-standard project settings.\n. Yes, you are correct of course. Seems to just be wrong in the header file though.\n. Fixed.\n. That's a good idea. In the meantime you can achieve this by using the existing delegate methods to intercept the rating alert and substitute your own. It's simple enough to create the alert (it's just a UIAlertView) and you can then insert your own logging. You can replicate the effect of the standard alert's buttons by calling the equivalent methods yourself (look under the \"advanced methods\" section in the documentation.\nNick\nOn 1 Dec 2011, at 10:06, Duane Fields wrote:\n\nThanks, great tool. Replaced my homebrew version with this... One feature suggestion. Can you add methods to the delegate that indicate what the user's action was, such as \"said yes\" and \"said no\", \"said later\", etc... This would be very useful for metrics, for example I can use Flurry to record the number of times prompts were shown, vs how many yes/no/later's I got to understand if people actually USE the rating helper, or if they always press no, in which case it might just be annoying.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/nicklockwood/iRate/issues/9\n. I've added three new delegate methods that fire when the user selects an option in the rating prompt. Let me know if that's sufficient for your requirements.\n. Hi Mic,\n\nIt shouldn't impact it, but maybe a better idea would be to use the significant event count feature instead. You could log a significant event each time the app launches, and use that to trigger the rating dialog instead.\nAs I said, it shouldn't be a problem to disable the notification, but you're better off not modifying the library unless you have to because that way you won't have to re-apply your change every time I do a new release.\nNick\n(Sent from my iPhone)\nOn 14 Dec 2011, at 10:51, Mic Pringle reply@reply.github.com wrote:\n\nHey Nick,\nWould it cause iRate any issues if I remove the support for the above notification ?\nMy iOS app is a music player which will naturally spend most of its time running in the background, only being brought to the foreground by the user when they wish to change the track or album etc. Therefore I don't think that using this notification to increment the use count really suits this scenario, and as such I would only like this to happen on app launch.\nAs far as I can I only need to remove the observer and the subsequent selector but before I do this I just wanted to make sure nothing else, that Iv'e missed, relies on this particular notification.\nMic\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/nicklockwood/iRate/issues/10\n. Hi Mic,\n\nHere's how I see it:\nMy aim with the library is to make it as useful as possible to a wide audience, but avoid adding features that only apply to one user, or where it will improve the library for a few users at the cost of the majority.\nYour aim should be to use the main fork if possible, or persuade me to make changes to the library to support your needs if it doesn't already do so, and only as a last resort should you fork it because even with github's excellent merging, that's still making more work for yourself, risking introducing bugs, and losing the benefits of me supporting issues you have in future.\nIt doesn't sound like your problem is particularly unique, but the solution of disabling the foreground event is obviously not something I could ever merge into the trunk. A better solution might be to do as you suggest and add a flag to ignore foreground events, which could then be a feature I could merge back in, but before doing that, let's just analyse your problem at bit more:\nThere are three way to trigger a prompt at the moment: 1) number of launches/foreground events, 2) number of days, 3) number of user-defined events.\nCriteria 1 and 2 must both be met to trigger a prompt. Criterion 3 is independent (it will trigger a prompt even if 1 and 2 have not been met).\nThe aim of these options is to defer the prompt until the user has used your app for a long enough time to have developed an informed an opinion about it (preferably a positive one). For a typical app like a game, this period is about 10 days assuming they use it at least once a day, which is why the uses and days both default to 10.\nThe reason why I treat foreground events as a use is because app launches are a very poor metric for interaction on modern iPhones because an app may stay running for days at a time but be opened and closed multiple times during that period. This is equally true for your app - cold launches tell you nothing about how much users are interacting with your app.\nOn the other hand, foreground events are quite a good metric for how much people are using your app. A user who installs the app, runs it a few times but then never really interacts with it won't generate any foreground events. A user who does use it properly will presumably frequently change tracks and so generate a lot of foreground events - more than most users of most apps.\nSo it seems to me that the best option is to do exactly what you said in option 2; Leave the days parameter at the default of 10, and set the uses parameter to something much higher than normal, say 100. That way users will only be prompted if they have had the app installed for at least 10 days and have used it a reasonable amount during that time.\nAlternatively you could ignore the days and uses completely (by setting them both to a very high number) and log an event whenever the user plays a track, or whatever other metric makes sense for your app, and then prompt the user after they've played 100 tracks (or whatever).\nNick\n. Yes, exactly.\nNote however that this must be called on the main thread.\n. The logic above is to check if the shouldPromptForRating function should return NO, in other words:\n\"if too few uses AND too few events then DO NOT prompt\"\nThis is consistent with the documentation, because the implication here is that if either the uses or the events thresholds are met then then above condition will fail and it will prompt.\n. Yes, so (using your example) the documentation says that the prompt will show if 3 < 3 or 3 < 16, and that's what's happening. What you are now saying is that you only want it to show if 3 < 3 and 3 < 16, contrary to the documentation.\nArguably I guess that may be more useful, so I might consider changing this behaviour, but it's technically correct as documented.\nTo override the prompt logic, without modifying the library (which is a bad idea for future compatibility), you can implement the iRateDelegate and supply your own logic in the iRate:shouldPromptForRating: delegate method.\n. I looked into changing the way it works, but it would be too likely to introduce bugs in existing projects due to the defaults. Since both useCount and eventCount default to 10, and both are optional, if I made them mandatory, users would have to remember to set eventCount to zero if they weren't using it, otherwise the rating would never appear. I think it's best just to leave it as it is.\n. Good catch. I'll fix it.\n. Fixed.\n. iRate 1.4 now has English, French, German, Spanish, Italian and Japanese. I did it in a different way using bundles, which is a bit more complex but simpler to integrate into projects.\n. You don't have to use ARC, but you do need to be using Apple LLVM compiler 3 or higher, otherwise it won't compile.\n. Try doing a clean from the Product menu. If that doesn't work, send your project to support at charcoaldesign dot co dot uk and I'll figure out what's going on.\n. I normally just set the remind button to nil for landscape-only games.\nYou can implement the above logic using the iRateDelegate to implement your own dialog. That involves duplicating quite a lot of logic though.\nI'll have a think about how easy it would be to implement something like this as part of the core library.\n. Thanks for the suggestion.\nI've modified the code so that it doesn't rely on hard-coded sizes, and added some logic to handle rotation so that it will be reapplied if the phone is rotated from portrait to landscape.\nI've included this in version 1.4.1.\n. Thanks!\n. I don't really understand the purpose of either of these changes. Neither of these lines generate warnings in the example project.\n. Yeah, that's intentional, and is covered in the documentation.\nXcode normally converts .strings files to binary plists at build time, but for some reason it didn't seem to work when I used strings files in a standalone bundle, so I pre-converted them\nYou can edit the files by right-clicking in Xcode and selecting open as property list.\n. Good point, and this does need a fix of some kind. I might think a little more though about the name for the setting though before I merge this (once I add something to the public API, it's hard to change).\n. Okay, I can't think of anything better - I'll merge it!\n. Are you sure?\nBy default, if debug is disabled iRate will only prompt if the following are all true:\n1) The version of the app you are running matches the latest version on iTunes\n2) 10 days have passed since the current version was installed\n3) The app has been opened 10 times or more since it was installed\nThose are quite hard criteria to recreate during testing, but if you set your configuration to:\n[iRate sharedInstance].onlyPromptIfLatestVersion = NO;\n[iRate sharedInstance].daysUntilPrompt = 0;\n[iRate sharedInstance].usesUntilPrompt = 0;\nThen you should see the alert. if you don't, maybe your bundle ID is wrong, or there's some other issue?\nIf you are trying to test with a brand new, never released before app then don't worry as iRate only works with apps that are on the store already. You can try setting the appStoreID or applicationBundleID to an app you know is on the store if you'd like to double check.\n. Can you tell me your app's bundle ID and paste the code you are usingo to configure iRate, and I'll try to reproduce this at my end.\n. Okay, I understand the issue. I use the device locale for the app store country by default because the vast majority of users use the app in the same country they bought it, and there's no way to find out the actual app store country programmatically.\nYour app is not available to buy in Australia, so it's reasonable to assume that the number of users with your app in Australia is essentially zero (other than yourself, obviously, but you're the developer).\nI don't really see this as a problem because when the app is released it won't cause a significant number of missed ratings, however if it bothers you, you can set the following code:\n[iRate sharedInstance].appStoreCountry = @\"PK\";\nWhich will force the app to always check the Pakistan app store.\nNick\n. The English, Italian, French, Spanish, Chinese, Turkish and (now) German have been checked or contributed by humans. Not sure about the others.\n. When you say the alert looks \"off\" if the text is too long, can you clarify? For example, are you referring to the German text? And do you mean in portrait or landscape? Which OS version did you test on? Can you provide a link to a screenshot of the problem?\n. French, Italian and Spanish have all been verified by native speakers. Chinese and Turkish were donated by github users, so I don't know if they are accurate but I'm assuming they are. The rest are machine translations.\nI don't have the list of names to hand although you can deduce them by studying the pull history for the project if you wish. I fail to see what difference the names would make. I'm not pretending they are human-translated when they are machine translations - why would I? \nIf you are unhappy with that, you are free to source your own replacement translations from a professional translation service (I recommend icanlocalize.com), or use the ones from Appirater instead. If you would like to contribute better translations back to the project then they would be gratefully received.\nI am however curious about the layout issue you reported. If you can give me reproduction steps, I will fix it.\n. I'm not seeing what you're seeing. Here's a screenshot from iOS 5.1:\nhttp://charcoaldesign.co.uk/images/screenshots.irate.2.png\nCan you send me a shot of what you are seeing?\n. Update to the latest iRate version and see if you're still seeing the issue. Was your screenshot taken on the simulator or the device?\n. I believe I fixed it. Unfortunately I had to use some \"magic numbers\" for the layout because I couldn't identify the logic that iOS uses to position the labels, so you may find it doesn't work for every possible text combination.\n. I just got the German text professionally retranslated. The text they've produced is:\nWenn Sie %@ m\u00f6gen, w\u00fcrden Sie es bitte bewerten? Dies wird nicht l\u00e4nger als eine Minute dauern. Danke f\u00fcr Ihre Unterst\u00fctzung!\nDo you have any opinion about this? How does it compare to the text you provided? It seems shorter, so I'll probably use it unless you say it's bad.\n. Please do.\n. Thanks, will do. Wish you'd mentioned it a couple of hours earlier - I just had Polish professionally retranslated! I'll use your version though.\n. It turns out that I was setting the lastReminded property after calling the delegate method, so your setting it to nil had no effect. I've fixed this bug, however in this particular case it probably makes more sense just to set the reminder period to zero.\nYou bug is fixed in version 1.4.7, and I've also added an \"Events Demo\" example, which shows how best to implement this behaviour.\n. NSInteger has a maximum value of 2147483647, which is a pretty big number. If your app generated an event every second it would take 68 years to reach that number.\nIn the unlikely event it did get to that point, it wouldn't crash, it would just wrap around to -2147483648 and keep counting, so in another 68 years it might pop up the rating dialog again.\nSo in conclusion, it's probably not worth worrying about ;-)\n. I just checked and I'm actually using NSUInteger for the event count, so the maximum value is actually 4294967295 and it would take 136 years to wrap around. Apart from that, everything else I said still stands.\n. It's probably a good idea in retrospect, but it's not backward compatible with apps that are already using iRate, so I can't really add it or I'd annoy a lot of users\n. Sorry ;-)\n. Darn. Probably the best bet is to use a more generic app store URL on iOS 6 for now and just open the app page until someone figures out the new direct path.\n. Yeah, the app store in iOS6 seems to be a completely new app. The old one was a web-app and this one appears to be native code, and quite buggy as you point out. I'm seeing all the prices in $ in the UK for example.\nHopefully there will still be a URL-based deep-linking mechanism in the final release, but we'll have to wait and see what happens over the course of the beta development.\n. I see they've fixed the currency issue in beta 2. Deep links are still broken though.\n. No fix yet. There's a few months left for Apple to decide to support the old URL scheme, but ultimately if we get to GM and there's still no deep linking to the ratings page in iOS6, I'll just have to make it point at the app page instead.\n. I've fixed this in version 1.5. It may require another update if I do find a way to link directly to the ratings page on iOS6, or if they restore this feature before it's released, but at least for now it will take users to the correct page instead of an error.\nI've used itms-apps://ax.itunes.apple.com/app/id123456789 because it launches the app store directly instead of first opening Safari.\n. Great news! I'll restore the original links.\nI think we were right to be cautious though. I would have hated to get 1000 support requests today from people whose apps had stopped working ;-)\n. Yes, Apple decided to change the link sometime in the last few days (independently of the iOS6 release).\nI released an update to iRate yesterday that fixes them again.\n. It might be worth me giving a clearer error message in this situation - a more specific error like \"Bundle ID not found on app store\" would probably cause less confusion.\n. I've seen the same issue with apps containing some of my other libraries on iOS 4.x. I believe that Apple has changed something in Xcode 4.4 that is breaking ARC code that previously worked.\nI don't have a Snow Leopard machine to test on any more. Can you do a couple of experiments for me?\n1) Try building your app with Xcode 4.3.3 or earlier, and see if it works correctly on 10.6.8\n2) Try building the app using progressively earlier versions of iRate until you find one that works. You can get all the previous releases of iRate from the tags page.\nHopefully from the results of those tests I'll be able to work out what's causing the issue and fix it.\n. I've fixed the problem for iOS 4.3, which I'm assuming will also fix it for Mac OS 10.6 as they both use ARCLite.\nThe issue was that the + (void)load method was apparently firing before the ARCLite library had fully loaded.\nI've deferred the class setup until the main runloop has started, and that seems to have solved the problem. The fix is included in iRate version 1.5.1.\n. I'm sorry you lost many hours to debugging this, but I'm not sure what I could have done beyond fixing the issue when I found it, which I did, a week ago.\n. @pilot34 Sorry for the snappy answer. I do appreciate bug reports, and I do try to fix issues when they arise. If you check the release notes you will see that this issue was fixed a while ago, but I appreciate it's easy to miss that. For what it's worth, this bug was introduced by Apple in Xcode 4.4 and did not happen under Xcode 4.3, so I fixed it as soon as I could have - it wasn't a case of the previous release of the library not working with ARC under iOS 4 and me simply not bothering to test it or mention it in the docs. Unfortunately I have no way to notify users of bugs or updates.\n@Tibbs Thanks for the support, I appreciate it.\n. The issue is that the +(void)load method fires before the main thread has started, and whilst this wasn't a problem previously, as of Xcode 4.4 it seems that ARCLite (the library that implements ARC support on iOS4) isn't properly initialised until then. performSelectorOnMainThread delays the code from executing until the main thread has started, by which point ARC is working properly.\n. I see that you've closed the issue - did you figure out what the problem was?\n. Yes, that's correct. It will work once the app is live, but not prior to submission.\nIf you set [iRate sharedInstance].debug = YES; then you can test what the behaviour will be once live (remember to remove that again before you submit).\n. It's an interesting idea, but the only purpose I can think of would be for me to test that the library works correctly (which I can do by running it using a live app ID, as I do in the example projects). I don't see that an end user would get much benefit from it versus the existing debug mode option.\nThe valueForKey:inJSON method is purely to support iOS 4. I will eventually replace it with NSJSONSerialisation when I drop support for iOS 4, but there's no reason to do that now. I'm aware that it's a horrible hack, but I don't want to force people to use an arbitrary JSON library, and supporting all known JSON libraries (like AFNetworking does) requires a lot more, much nastier code.\nIf you do want to add a simulation mode for some reason, why not just use sample JSON data for simulation instead of a dictionary? Seems like it would make life easier.\n. Option one is a good idea, I'll look at adding it.\nOption two is already implemented. Just set promptAtLaunch to NO.\n. I understand that you'd like iRate to save this preference automatically (so if you set the disabled option, it would remain disabled even after you relaunch the app, until you set it to false again). I'll think about it, but my first instinct is that this is outside the scope of iRate itself.\nThis is very easy to implement yourself however. The simplest way is probably to add something like this to your AppDelegate:\n- (BOOL)iRateShouldPromptForRating\n{\n    return [[NSUserDefaults standardUserDefaults] boolForKey:@\"RatingPromptEnabled\"];\n}\n. I've added the option to stop prompting the user after they've rated the app, even if a new version is installed.\n. What is the benefit of this as opposed to putting either of the following in the AppDegelate:\n+(void)initialize\n{\n    [iRate sharedInstance].promptAtLaunch = IRATE_AUTOLOAD_ENABLED;\n}\nOr\n- (BOOL)iRateShouldPromptForRating\n{\n    return IRATE_AUTOLOAD_ENABLED;\n}\n?\n. Thanks. Now fixed.\n. OK, I figured out which bits I needed and I've included them in version 1.5.4. Thanks.\n. Nice idea. I'll include it in the next release. Thanks.\n. I've renamed the property to something a little clearer, but this feature is now included in version 1.5.4\n. Yep, well spotted.\nIt only happens if your deployment target is set to iOS6. It's harmless, but I'll fix it in the next release anyway.\n. This is now fixed in version 1.6\n. Yes, that should work. It should be sufficient to set [iRate sharedInstance].applicationBundleID to the bundle ID of your live app.\nUnfortunately by removing the actual IDs from your bug report it's a bit hard for me to follow exactly what the issue is. I take it that in the console when iRate reports that \"iRate found that the application bundle ID (com.domain.appID)\" the ID is the ID of your ad-hoc app, and not the ID you set?\nWhere in your code are you setting the [iRate sharedInstance].applicationBundleID? Is it possible that it's being set after iRate has already made the app store request?\n. Is your app actually live already?\n. Can you post the exact setup code that you're using, including the correct bundle/appIDs so I can try it and see if I can work out why it's not working?\nI can understand if you don't want to post them here (although it is public information anyway) so email it to support at charcoaldesign dot co dot uk if you prefer.\n. This works for me if I paste it into the iPhone Demo app included with iRate:\n```\n+ (void)initialize\n{\ndefine TARGET_NAME_Doddle 1 //also works if I use TARGET_NAME_DoddlePro\n[iRate sharedInstance].previewMode = YES; // also works if set to NO - make sure it's NO for release\n//[iRate sharedInstance].promptAtLaunch = NO; // demo app doesn't work if this is NO\n[iRate sharedInstance].onlyPromptIfLatestVersion = NO; // you should set this to YES for release\n//[iRate sharedInstance].promptAgainForEachNewVersion = YES; // this is the default anyway\n//[iRate sharedInstance].verboseLogging = NO; // this is the default for non-debug builds\n[iRate sharedInstance].daysUntilPrompt = 1;\n[iRate sharedInstance].usesUntilPrompt = 3;\n[iRate sharedInstance].eventsUntilPrompt = 4;\n[iRate sharedInstance].remindPeriod = 5.0;\n\nNSString *bundleID = nil;\nNSString *appTitle = nil;\n\nif defined TARGET_NAME_Doddle\nbundleID = @\"com.doddleme.Doddle\";\nappTitle = @\"Doddle\";\n\nelif defined TARGET_NAME_DoddlePro\nappTitle = @\"DoddlePro\";\nbundleID = @\"com.doddleme.DoddlePro\";\n\nendif\n[iRate sharedInstance].applicationName = appTitle; // used in default message\n[iRate sharedInstance].applicationBundleID = bundleID; // if you set this you don't need to set appID\n[iRate sharedInstance].message = nil; //this doesn't work - if you want to clear the message use @\"\"\n[iRate sharedInstance].messageTitle = [NSString stringWithFormat:@\"Please Rate %@\", appTitle];\n[iRate sharedInstance].cancelButtonLabel = @\"No, thanks\"; //this is the default anyway\n[iRate sharedInstance].rateButtonLabel = @\"Yes\";\n[iRate sharedInstance].remindButtonLabel = @\"Remind Me Later\"; //this is the default anyway\n\n}\n```\nI don't think I've made any significant changes from what you posted, except to remove redundant code (I've also put in some comments for code that you should look at more closely).\nDoes the code above work for you?\n. iRate normally gets the bundle ID from the plist. You only need to set it if you want something different from the plist (e.g. for an ad hoc build that uses a different bundle ID).\n. This is behaving as expected. From the documentation for the eventsUntilPrompt property:\n\"once the day threshold is reached, the prompt will appear if either the event threshold OR uses threshold is reached. This defaults to 10 events.\"\nSo if you are not using the usesUntilPrompt value, you should set it to INT_MAX instead of setting it to 1, then it won't factor into the equation.\n. Sorry, I didn't see your update. I've moved it to the bottom of your post so it's clearer for anyone else who is reading.\n. Thanks! It was actually professionally translated, but I guess you never know what you're getting.\n. Have you added a Localizable.strings file to your project and made sure that Portuguese is selected as a supported language in Project > Info?\nIf so, try doing a clean build from the Product menu - it may just be that you have a previously cached strings file from the old version.\n. It used to be the case that iRate would be localised to all supported languages even if your project was not, but this is not what most people would want. Is it really the case that you have no text in your app that needs to be localised apart from iRate?\nHere is a tutorial that includes screenshots of how to add new languages: http://www.aboveground.com/blog/xcode-4-4-and-localizable-strings-no-way-to-add-language\nNote that this is the Info tab under Project, not under Targets.\n. The reasoning was that it's a bit odd to have mixed content in an app. If the rest of the app is in English, one particular modal should not be displayed in Russian, or whatever.\n. It is true that iTunes will display all the languages you've added, but the idea is that you should only add support for the languages that you intend to localise your whole app for, and ignore the other ones that iRate supports.\n. I may be able to add it back as an option. I'll think about it.\nThe previous solution was a pretty nasty hack, requiring me to basically bypass the standard localisation mechanism, pre-compile strings into binary plists, etc. The new solution is much cleaner and more compatible with how Apple intends it to work.\n. OK, I have a solution that should work. Give me a little while.\n. OK, check out version 1.5.5. I think I've found a solution that should suit everyone.\n. FYI, I've renamed 1.5.5 to 1.6, but it's the same code, in case you were wondering.\n. Why would you want to build on Xcode < 4.5?\n. I suggest you revert to iRate 1.6 until you've upgraded your CI server. You can get iRate 1.6 from the tags page in github.\n. Sorry, I meant 1.5.3.\n. The App Store under iOS6 can be a little bit flakey. Can you paste the URL that iRate is attempting to open and I'll see if it looks correct (it would help if you don't obfuscate your app ID - it's public information anyway).\n. It seems Apple changed the format of the URL slightly. That was nice of them.\nI've fixed it in 1.6.2.\n. Sorry for not responding earlier - I now have so many projects it's hard to keep track of them all!\nThis seems like a good feature suggestion, although if it can't take you directly to the ratings page then it should probably be optional. I'll investigate.\n. That's a clever solution, but it would mean localising that extra text, which at this point would be a nightmare. I think it's fine as it is, if people can't find the review tab when it's right in front of them then you probably don't want them writing a review :-)\nAnyway, this feature is now included in version 1.7.\n. Yes, remind period can only be set in terms of days.\nYou can implement this easily enough using the delegate by setting usesCount back to zero after they ask to be reminded.\n. The error is because iRate now requires the StoreKit framework to be included in your project.\n. The deprecation warning is fixed in 1.7.1\n. I've incorporated @nonamelive's fix into 1.7.2\n. So you're saying that [SKStoreProductViewController class] returns a non-nil object on iOS5 if you build an app using XCode 4.6 DP3?\nThat's very strange. It sounds like a bug in XCode, but it's worrying nonetheless. Can you log the value of [SKStoreProductViewController class] and see what it says?\n. I haven't changed anything. If it's not happening now then it's presumably because Apple fixed something.\n. When I say zero config, I mean zero :-)\n. It sounds like your iRate.m file hasn't been added to your app target for some reason. In the right hand sidebar, check the correct target is checked for that file.\n. You need to add the StoreKit framework (it's mentioned in the 1.5 README under installation instructions).\n. Thanks for the tip. I'll take it under advisement.\n. Upon further reflection, you were right. But you're still a ... challenging individual.\n. Comments are closed for this post.\n. It's not really a good idea to subclass iRate. This might work, but only by coincidence. iRate loads itself by calling the sharedInstance method automatically. If you call sharedInstance on your subclass before iRate has loaded it will override the static variable and so the instance that gets created will be your class, but if iRate loads before you call sharedInstance on your subclass then your subclass's sharedInstance method will return the iRate instance that's already been created.\nBasically, subclassing singletons is a bad idea.\nWhat is it you are trying to do with your subclass? Can it be done using the iRate delegate instead?\n. Yeah, I guessed that's why it was working, but it's not something you want rely on. I might change the way loading works in a future release and end up swapping the order.\nThe shouldPromptForRating method is exposed so that you can call it from your own code.\n. Heh. If you look at the codebase for 1.6.2 and earlier, I already had this exact feature.\nI made a policy decision in 1.7 to remove support for manual memory management, for the following reasons:\n1) It's very easy to selectively enable ARC for a single file in a non-ARC project (see README).\n2) I don't want to encourage or endorse the use of manual memory management - I think it's crazy.\n. Hi Alberto,\nAs per my first point, you can use iRate in a project that does not use ARC by setting the -fobjc-arc flag on the iRate.m file without needing to upgrade your project to ARC.\nIf you are including iRate inside a library then if you apply the -fobject-arc flag the iRate.m within the library project, end users need not be aware of it at all.\n. Sorry, it's not possible as far as I know. I haven't personally found that it's an issue, even though my game is played by kids quite a bit. Out of hundreds of reviews I've only had a handful of 1 or 2 star reviews, and only one or two where the text was incongruous (i.e. they said they loved it but rated it 1 star).\n. I'm not sure I fully understand the question.\nIf you want to show iRate after a specific number of custom-defined events then you can do that by calling the logEvent method, but iRate doesn't let you specify multiple types of event.\nIf you need to do that you can do it by keeping track of the events yourself and then returning YES or NO in the iRate shouldPromptForRating delegate method if your custom event threshold has been reached, or by just bypassing iRate's logic entirely and calling promptForRating when you determine that you need to.\n. iRate doesn't have any text input code, it just calls the StoreKit API to show the rating panel. If the keyboard isn't appearing in the in-app rating view then that's an Apple bug and you should file a radar with them.\nThat said, as a workaround you can disable in-app-ratings by setting disaplyAppUsingStorekitifAvailable = NO, then it will take people to the app store instead.\n. @stuffmc - thanks, this has been fixed.\n@fredericcormier sorry, are you saying it should have the \"le\", or that that is wrong? (apologies but the copy has been updated since and I'm not sure which version you commented on).\n. Thanks. This is fixed in latest beta.\n. That's weird. Is it happening on the device or only the simulator?\nI don't really have any control over the display of the StoreKit modal, so if it's not working correctly there's not much you can do except disable the StoreKit feature.\n. 1) Can you be more specific about the display issue?\n2) What iOS version are you running?\n3) What happens when you run the iPhone example included with the iRate library in your iPad?\n. I think someone else reported a similar issue, but they said it was ok on the device. Must've just been an xcode bug. \n. Sorry, I've not decided if I want to add this feature or not. I can see that it's potentially useful, but it would open the flood gate to basically duplicating all of iRate's fir notification scheduling functionality for reminders as well, and that doesn't seem reasonable. I'm therefore considering whether a different approach would be better, but as yet can't think of one.\n. I use a global gitignore file to avoid adding noise to my individual libraries, so no need for this.\n. I would encourage them to also use global .gitignore files.\n. By enabling preview mode you are telling iRate to pop up every time the app opens. Preview mode is only supposed to be used for debugging purposes.\nAlso, you shouldn't perform configuration in your button action because it's misleading. iRate is a singleton, so any configuration you perform has a global effect. Do all your configuration in the initialize method.\n. Unfortunately SKStoreKit doesn't have a method to go directly to the reviews page. If you want to use the direct link you can disable storeKit and iRate will launch the App Store instead.\n. Yes, I'll do that \u2013 it was an oversight.\n. Thanks, I'll merge it now.\n. This makes sense logically, but I don't love the increasing clutter in the public interface caused by these customisation methods. I'll think about this for a while. Perhaps there's an alternative approach.\n. The former, unfortunately. You can disable StoreKit if you prefer and it will open the correct tab in the App Store app instead.\n. Are you using the latest version? Can you post a stack trace, and if possible use breakpoints to identify the line where it happens?\n. Those are delegate methods - you don't override them, you define them in your app delegate.\nBut you don't need to do that to disable StoreKit - you just set \n[iRate sharedInstance].displayAppUsingStorekitIfAvailable = NO;\nIn your app delegate.\n. Can you give an example of a scenario where this would be necessary?\n. This is no longer relevant since Apple now no longer allows apps to be rated using the in-app store page\n. iRate already passes -Wall - what settings are you using? \n. You're preaching to the choir with respect to warnings, but if you turn on an arbitrary set of warnings then any code will fail at least some of them. I test against -Wall, which represents the complete set of recommended clang warnings (recommended because they don't generate a lot of false positives, as opposed to, say -Wextra, or -Weverything).\nUnless you have an argument and/or supporting evidence for why the specific warning settings you have chosen to enable  in your project are important, I'm not sure why I should worry about them.\nIt's not that I don't consider warnings important in general, it's just that I prefer to follow a consistent set of coding standards across all of my projects, based on well-defined criteria, and currently I code against -Wall.\n. Some context for why I use -Wall:\nhttp://programmers.stackexchange.com/questions/122608/clang-warning-flags-for-objective-c-development\n. I would use -Wextra, but it flags up stuff like unused arguments in delegate methods, which makes it palpably useless. It also doesn't catch loss-of-precision afaik.\nI don't have an opinion on loss of precision particularly. Which flag enables it? Maybe I'll give it a try as an addition to -Wall.\nAs to your immediate problem, I suggest maybe building iRate as a static lib, or using CocoaPods. That way you can use it in your project without incurring warnings or having to maintain a fork with your fixes\n. As of version 1.8 beta, iRate is now fully -Wextra compliant. That will probably still have warnings for the settings yo use however.\n. Hi Mark,\nYou've set promptAtLaunch to NO, meaning that iRate won't display a prompt unless you specifically tell it to somewhere in your code.\nJust remove that setting and it should work fine.\nNick\nOn 9 May 2013, at 21:08, Mark Paul Keefe notifications@github.com wrote:\n\nHi Nick,\nI have no idea what I'm doing wrong, but for the life of me, I have never had iRate work except in preview mode. With previewMode on, it works fine every time. With previewMode off, I've never seen it work, and I've had it installed in my app for months. Do you have any suggestions, before I give up and try something else?\nHere is my setup code, from my App Delegate class implementation:\n- (void)initialize\n  {\n  if ([self class] == [MBAppDelegate class]) {\n      [self setupPreferences];\n  }\n//configure iRate\n  [iRate sharedInstance].daysUntilPrompt = 3;\n  [iRate sharedInstance].usesUntilPrompt = 5;\n  [iRate sharedInstance].remindPeriod = 2;\n  [iRate sharedInstance].promptAtLaunch = NO;\n  [iRate sharedInstance].previewMode = NO;\n  //    [iRate sharedInstance].previewMode = YES;   // In production, this should be NO.\n  ...\n  }\n  \u2014\n  Reply to this email directly or view it on GitHub.\n. Hi Mark,\n\nIf you do that it will always prompt, regardless of the settings you've specified, or whether there is a network connection.\nYou probably want to use:\nif ([[iRate sharedInstance] shouldPromptForRating])\n{\n    [[iRate sharedInstance] promptIfNetworkAvailable];\n}\nNick\n. Yes. If the prompt is already visible on screen then it won't display another prompt, and if the user dismisses the prompt then shouldPromptForRating should return NO until the rules are re-satisfied.\n. Which OS version is this on? In-app reviews are only supported on iOS6+\n. Curious. I don't control the experience inside the StoreKit window though. Is this happening on a live app in the store, or just in testing mode? It may be because you haven't bought the app, etc.\n. Does this happen for you in the sample app included with iRate? If not, what happens if you change the bundle ID to match your app?\n. I think this may be a change in iOS 6.1.3. It's not something that I can control.\n. Yes. I may remove the option since it seems that it's no longer useful.\n. As of iOS 7 it does not seem to be possible to go direct to review page anymore. StoreKit is now disabled by default, but you can re-enabled it if you want.\n. Yes, this is a feature not a bug. It's actually documented in the README file in the openRatingsPageImAppStore method description.\n. See the documentation for that method.\n. That's a good idea actually. I can do that.\n. Just an update - I've partially implemented this, in that the bundleID is saved in settings. I've not implemented prefetching of the bundle ID on first launch though.\n. This is now fully implemented in 1.8.1\n. This may be a silly question, but is your app live yet?\n. OK, @andy380743909, your app worked with iRate when I tried it (the bundle ID is com.livestation.lualuaar, correct?) - if it's not working for you, can you check the console log (you may need to enable verbose logging) and paste it here?\n@therauli iRate will work fine with your app once it is in the store, but it won't work until it's live. You can fix that by setting the app ID explicitly, but that isn't necessary. Enable preview mode if you'd like to see what it will look like before you submit.\n. Make sure you are using the latest version of iRate by the way - Apple changed the URLs for iOS 6.1, so if you have a version that's a few months old, that may be why it doesn't work.\n. You don't need to set the appstore ID manually - iRate gets your bundle ID from the info.plist automatically. To test it, set previewMode = YES.\n. To actually verify that the event-based logic you've implemented works, the simplest way is to set the bundle ID in your plist to another app that's already on the store (you can use the rainbowblocks bundle I included in the example) and then change the date on the device or simulator to however many days in the future your logic is set to trigger.\n. iRate checks the iTunes JSON feed, so it won't work until the app is actually live. If it gets as far as showing that error though, everything is working fine.\n. You should not build apps using SDK version 5 - apple won't accept them. If you wish to support iOS 5, build using SDK 6 but set the minimum deployment target to iOS 5.\n. Detection of the iOS version has to be done at runtime, it an't be done at compile time. iRate will correctly detect that it is running on iOS 5 and disable the StoreKit functionality, but it has to be built using SDK 6 or the compiler won't recognise the StoreKit symbols.\n. Thanks. I've incorporate these fixes into the latest beta.\n. Yeah, I'll keep an eye on it, but as @ddaddy says, it makes sense to wait for GM before changing anything.\n. Are you seeing anything in the logs?\n. That sounds like it's unrelated to iOS 7. Did it work for you on iOS 6?\n. Yeah, I've made the same change in the later beta. It's not ideal because it doesn't take you to the actual ratings page, but it's better than nothing.\n. Yes. Still doesn't work.\nI've pushed a new beta that just points to the app page on iOS7 for now.\nHopefully they'll either fix it by the final release, or an alternative link will present itself.\nNick\n. Fixed in 1.8 beta 2\n. You drag and drop the iRate class (iRate.h + iRate.m).  that comes with the library into your project. You do not need to create any classes or write any code. You do need to add the StoreKit framework as well though (google how to add built in frameworks in Xcode, if you're not sure).\n. CocoaPods is a useful tool, but it doesn't relate directly to your problem. From the sounds of it, you've probably just made a simple error when importing the iRate files or the framework.\nTrying to use pods at this point will probably cause more confusion. Trying to run before you can walk, so to speak.\n. What were the compile errors you were getting? Can you paste the console output into your question?\n. Can you add the files back in, then zip up your project (with errors) and email it to support at charcoal design dot co dot uk. I'll take a look.\n. I'm really sorry to hear that - it must be a new rule. StoreKit isn't critical to iRate's functionality. I'll release a patch ASAP.\n. I've pushed version 1.8 beta that disabled StoreKit by default, and no longer requires that you link against the framework.\n. Fixed in 1.8 beta 4\n. Don't worry, it's not a private API. It's just that to get the root view controller, iRate tries various checks including looking to see if your AppDelegate has a property called viewController. If it doesn't, you get this warning. I'll update iRate with a fix tonight, but if you can't wait then it's safe to either remove that code or ignore the warning.\n. This is fixed in beta 3\n. Yep - this is fixed in the latest beta.\n. Soon, I expect. Once I'm confident that it's doesn't have any issues.\nIf you need to launch now I'd advise just linking it straight into your app.\n. The property was removed because it existed only in case of possible conflicts with future iOS versions - I was under the impression it worked fine for all cases on iOS 6. I'll see if I can tweak its behaviour to work correctly in your case. \n. OK, this is fixed in beta 6\n. I actually quite like this idea, but it is regarded as a sleazy trick, apparently:\nhttp://www.zumsteg.net/2013/12/13/how-skimming-reviews-makes-apps-twice-as-slimy/\n. I've already added support for the new format in the 1.8 beta. Are you having problems with the latest version?\n. I don't think it's explicitly documented, but it will continue to be called every time the app is opened until the user explicitly declines it.\nYou can also trigger it manually whenever you want by saying if(shouldPromptForRating) promptForRating.\n. Yep.\n. I normally use a common base class for all my controllers. Makes it easy to do something like that.\n. No, there's no way to tell if the user rated the app.\n. I'm actually not sure what the correct solution is here. I've tried to replicate the iOS lookup behaviour in iRate, and I assumed that iOS would use the next item in your language list if it didn't find the first, but maybe it should just default straight to US english instead?\n. To be clear though - this definitely doesn't affect all (or even most users) as I'm pretty sure that anyone who hasn't been swapping languages for testing purposes will have US english as the second item in their languages list, not French (I do).\n. Adding an en-GB localisation is clearly the simplest fix. Just not sure if it's the correct one.\n. This is fixed in 1.8.1\n. That is true, but it was unnecessary in this case because iRate is a singleton.\nCan you give an example of how this causes a problem in other language bindings? (I assume you mean something like RubyMotion or Xamarin, but I'm not very familiar with these tools).\n. You don't need to define appStoreIS to test an app that isn't on the store. Preview mode will let you test and it will pick up the ID automatically when the app is released.\n. Very true. I'll investigate what's going on there.\n. Fixed in 1.8.1\n. Yes, Apple seem to have disabled the button on iOS 7. I suggest you don't use that feature (I'll probably remove it in the next version unless Apple decide to reinstate support for it).\n. I've removed Storekit support in 1.8.1 as I don't think Apple are going to put this feature back :-(\n. I'm not sure. It didn't work for me when I tried it previously, but maybe they changed their minds again.\n. Is the bundle ID of the version you are testing the same as the bundle ID of the live version?\n. Actually, what method are you using to open the App Store from your button? iRate looks up the app ID automatically when it's running in the default mode (rating after a specific number of uses), but if you implement your own button you need to trigger that lookup manually, or set the app ID explicitly.\n. The method you should use for a \"rate this app\" button is:\n- (void)promptIfNetworkAvailable;\nIf you call\n- (void)promptForRating;\nInstead, it will only work if you've set the appStoreID explicitly (which normally isn't necessary).\n. I see the problem. It's not your fault, maybe I need to be clearer in the documentation.\nCurrently though, to use this method, you need to set the [iRate sharedInstance].appStoreID explicitly. You can get your appStoreID from your iTunes connect page (or it's just the numeric part of the iTunes URL for your app).\nI'll see if I can make this work more intuitively in the next release.\n. The better way is to do this, but it's bit more complex:\n```\n@implementation MyViewController\n\n\n(IBAction)promptForRating:(id)sender;\n{\n    //perform manual check\n    [iRate sharedInstance].delegate = (id)self;\n    [[iRate sharedInstance] promptIfNetworkAvailable];\n//you might want to disable the button and show a spinner here\n}\n\n\n(void)iRateCouldNotConnectToAppStore:(NSError *)error\n{\n    //restore delegate\n    [iRate sharedInstance].delegate = (id)[UIApplication sharedApplication].delegate;\n//hide spinner and display error\n}\n\n\n(BOOL)iRateShouldPromptForRating\n{\n    //don't show prompt, just open app store\n    [[iRate sharedInstance] openRatingsPageInAppStore];\n//restore delegate\n[iRate sharedInstance].delegate = (id)[UIApplication sharedApplication].delegate;\n//hide spinner\nreturn NO;\n}\n\n\n@end\n```\n. That's fine. The rating button should still work OK.\nThis approach disables the automatic rating popup though - it will only let you rate by pressing the button.\n. To be clear, it's an either/or thing. Either set the numeric appStoreID, or use the code I specified. You don't need to do both.\n. OK, I've updated the code sample above so it won't stop the normal notification from working.\nThe rating won't work in the simulator because there's no App Store app for it to open. It should work fine if you run it on a device.\n. It shouldn't be, unless your app isn't live. Are you sure you're using the latest version? What error did you get?\n. Sorry about that, but in version 1.8, the documentation did state that the openRatingsPageInAppStore method required the ID - it was only the automatic rating prompt that did not.\nAs of the latest version, that method does not require it either.\n. Oops. Well spotted. Thanks!\n. I've enabled -Weverything in the warning settings and I'm still not seeing the issues you mention. Any idea what compiler settings you might be using to generate these?\n. I've fixed these in 1.8.3.\n. iRate runs automatically, you don't need to add any code to your app to make it run.\nTo disable iRate, either add [iRate sharedInstance].promptAtLaunch = NO; to your app delegate initialize method, or just remove the iRate pod from your project.\n. +(void)load;\n. This method has been removed in the latest version of iRate anyway because iOS7 no longer allows you to rate apps via the StoreKit modal.\n. Way ahead of you.\nhttps://github.com/nicklockwood/iRate/blob/master/RELEASE%20NOTES.md\n. I understand this point of view, but I honestly can't imagine that the amount of users who write multiple reviews for the same app is worth the negative PR of having this feature.\nIn retrospect I wish that I had implemented a (less radical) reduction in this functionality earlier so that things didn't come to the extreme that they did, but ultimately it's not worth the damage to my reputation to put this back in, so I won't.\nIt's possible (though not especially easy) to implement this yourself using iRate's delegate system, or you could fork the library and put it back, but I'd urge you to reconsider doing so, at least until you've shipped a few updates and verified that the lack of this feature is actually having a negative impact on the reviews you are receiving.\n. I'll think about it.\n. This is implemented in version 1.10.\n. This seems more like an issue with how the iOS localisation system works than something that should be fixed in iRate. \nYou can use the Slovenian strings when the device is in English by copying the Slovenian iRate strings into your apps en localisable.strings file. Then they'll override the en strings in the iRate bundle.\n. Fixed in 1.9.1.\n. Wow, that's a lot of locales. Thanks!\n. Can you check which version of iRate you are using? (it's in the header file)\n. OK, well I can't reproduce this. If you have more info or steps to reproduce, please reopen.\n. I haven't forgotten about it, but since it's not fixing any bugs or adding any critical new features, and I don't want to risk introducing bugs by merging it without testing it properly, I'd prefer to wait and include it in the next planned release, which may be a little while away.\n. Done. But can you clarify what you mean by a dev ID that's not public?\n. No, you would have to implement a completely custom alert, which you can do using the delegate.\n. Sorry, closed by accident!\n. If you have verbose logging enabled, you should be able to see exactly why it isn't showing from the logs. You can extract these from the settings on the device in a production build.\nthe promptIfNetworkAvailable method should only work after app has launched, so that's normal.\n. Makes sure [iRate sharedInstance].verboseLogging = YES, then have a look at what iRate logs to the console - it should give detailed feedback about why it has or hasn't prompted for feedback.\n. Actually sorry, I take that back. This makes testing certain custom functionality more difficult. E.g. the advanced Mac example project included with the library.\n. I've added a comment to this effect in the previewMode documentation.\n. Cool, I'll check it out. Thanks!\n. This is implemented in version 1.10\n. That's because it's a calculated property. If you set\ndeclinedThisVersion = NO;\nIt will have the effect of resetting declinedAnyVersion to NO as well (which in retrospect is a bit weird, but never mind).\n. Which version did you ship in production? I found a bug in 1.10 that would account for this, but it was only released a couple of days ago.\n. No problem. Sorry about that!\n. I've added this fix to 1.10.1\n. This is fixed in 1.10.1\n. If firstUsed was nil (due to the user having installed an app running version iRate 1.10, and not previously having used an earlier version) then there is no possible way to know when the app was actually first used, so assuming that the first use date is now is the best we can do.\n. You're right that this is a bug, but wrong about the effect. The iRateLastVersionUsedKey isn't used in the onlyPromptIfLatestVersion check.\nThe effect of the bug is that if you update the app, every time it opens it will move the self.firstUsed date forward by one day, with the effect that it will never display the rating prompt, regardless of the settings.\n. OK, I think this is fixed in 1.10.2. Let me know if you see any other issues.\n. Hi, you're partly right. Th problem with your patch was that you never reset the logic once the app is updated, which meant that the promptForNewVersionIfUserRated would always prompt the day after they install the new version, which isn't what I wanted.\nMy fix didn't work correctly, but that's what it was trying to achieve.\nI believe I've now implemented this correctly. To be honest I need some unit tests around this because it's way too complex to test manually, but it's not really structured in a way that makes it easy to automate.\nAnyway, to address a couple of your points:\n3) Why do you use +1 in the if condition? I don't quite understand. The if should be the same like the one checking whether it's time to rate now. If it's not time to rate now, no problem.\nIf the user had installed the app daysUntilPrompt -  1 second ago, then your logic wouldn't reset the time, so potentially they might still be notified the same day (e.g. if the closed and reopened the app and the time was now daysUntilPrompt + a few seconds). By subtracting an extra day, I avoid that issue.\n5) Just one minor thing I have noticed is that since you update defaults in any case now, [defaults synchronize] should be moved out of the else block behind it. But this really isn't a big problem - you could actually skip the synchronize calls completely as iOS calls synchronize for you automatically (it's useful just in the case the app crashes before).\nThe firstUsed setter method calls synchronise automatically, so this is not actually a bug.\n. Ha ha, whoops. I thought I'd fixed that.\n. Er, yes, you're right about the ratedVersion:lastUsedVersion thing too. Man, I am not on my game today.\n. Yeah. Let's not do this again :-)\n. Does your app only support portrait? Have you implemented any code for - (BOOL)shouldAutorotate, etc?\n. This isn't actually a bug, but a design decision. Arguably it was a bad decision, but applying this fix as it stands actually breaks the default functionality, since usesUntilPrompt defaults to 10, so any app that doesn't log any events will never present the notification.\nIf you want to prevent notifications unless both use count AND event count have been reached, you can add this additional check using the iRate delegate.\n. I'll leave this open for now - I may consider changing this behaviour at some point but it will need some other changes to be made as well.\n. I have no objection in principle, but it seems a little redundant since you can just broadcasts a notification yourself from the app delegate if needed.\n. No problem. Sorry for the oversight.\n. The best option is to disable iRate in the +initialize method using\n[Shades sharedInstance].promptAtLaunch = NO;\nThen, once you have downloaded your configuration file and configured shades, call\nif ([Shades sharedInstance].shouldPromptForRating)\n{\n    [[Shades sharedInstance] promptIfNetworkAvailable];\n}\n(Or just wait until the next time the app launches, and don't disable Shades if the config file has already been downloaded).\n. Well spotted - I totally agree.\n. Thanks!\n. This is included in 1.11.\n. Goog to know - thanks!\n. Looks good. I've merged it into 1.11\n. That isn't a bug, that's telling you that iRate is working correctly but that it can't open the ratings page on the simulator because it doesn't exist (you have to test on a device).\n. DEBUG is a standard macro set by Apple for debug builds. You may have removed it or not set it in your project, but that shouldn't cause any problems.\n. Which is...?\n. I don't understand the question.\n. Oh, I see. Will you be putting your app in the store eventually?\n. Just put the library in your program and it will work automatically when you submit to the app store.\n. These two issues are unrelated.\nThe Cocoa.h not found bug was due to the #import <TargetConditionals.h> being missing from iRate.h - I've fixed that for the next release.\nThe country detection is working correctly for me, but it is based on the locale of your system. If your device (or the simulator) is set to US locale then it will use that - I expect that's why it wasn't working correctly for you.\nIf you want to hard-code the locale however, you can do so by putting the following in your App Delegate - there's no need to modify the iRate library:\n+ (void)initialize\n{\n    [iRate sharedInstance].appStoreCountry = @\"gb\";\n}\n. Have you looked at the iPhone Custom UI Demo included with the example projects?\n. Hmm. This is problematic, but UIAlertView is deprecated, so not supporting UIAlertController isn't really a long-term solution. I guess I can add an option to not use UIAlertController for now, but at some point it will probably become mandatory.\n. OK, I've added a property \"useUIAlertControllerIfAvailable\", and set it to NO by default.\n. I can imagine this will cause some pain in future, but it should solve the problem for now.\n. Sorry about that. It was a bug in 1.11 that was fixed in 1.11.2. The only solution is to upgrade to latest and re-release the app.\n. It should work AFAIK, but you can test it yourself by setting previewMode = YES (remember to set it back to NO before release)\n. The code is correct. It used to be the current version but the behaviour has since changed and the documentation is now incorrect.\n. Hmm, I thought that I was registering \"No, Thanks\" as the cancel button, so it's curious that it would behave differently from other apps. I'll take a look.\n. In stacked layout, the cancel button always appears at the bottom, regardless of whether you add it first. Seems odd that side-by-side layout works differently.\n(Not doubting you, just confused by the inconsistency)\n. If your [UIApplication sharedApplication].delegate doesn't have a window property, that means it doesn'f conform to UIApplicationDelegat protocol, which sounds like a pretty serious bug in your app. I'm not too familiar with what consitutes normal for a cocos2D app though.\n. Yes, it's possible by using the delegate. But have you looked at my iPrompt and iNotify libraries? They might be better suited for what you're trying to do.\n. If you add this to your app delegate, iRate will never prompt automatically:\n+ (void)initialize\n{\n    [iRate sharedInstance].promptAtLaunch = NO;\n}\n. Well, you know what they say: naming things is the hardest problem in computer science \u00af_(\u30c4)_/\u00af \n. Based on the stack trace, the crash is related to some GPU/OpenGL library, not part of iRate. Some Googling suggests that it's part of Apple's MapView implementation?\nI suspect what it happening is that iRate is appearing in front of your MapView or OpenGL-based view, and that view is crashing due to a bug. Perhaps it doesn't like being paused or put into the background?\nThe best way to replicate it is probably to try showing an alert at random times after startup in your app and seeing what happens and/or to report this bug to Apple and see what they say (although they'll probably need a simple project that reproduces the issue to be able to do anything - as would I)\n. If you can't find or reproduce the problem, your best option is probably to disable the automatic display of iRate on launch by adding this to AppDelegate\n- (void)initialize {\n    [iRate sharedInstance].promptAtLaunch  = NO;\n}\nThen, when you get to a safe point in the app, call\n[[iRate sharedInstance] promptIfAllCriteriaMet];\nWhich will show the rating dialog, but only if all the criteria you've set have been met (number of days installed, etc).\n. Just set [iRate sharedInstance].promptAtLaunch = NO; in AppDelegate +initialize method, then add a button which calls [iRate sharedInstance] promptIfNetworkAvailable];\n. AFAIK that isn't possible with a standard alert. You can build your own alert and tell irate to use it though, by using the delegate functions.\n. Gah, more despicable app review bullshit. Try appealing it, since it's clearly not in violation - that check is only there so developers using iRate aren't confused when they try to run in on a simulator.\nMeanwhile, I'll add a fix to remove that code and replace it with #if TARGET_IPHONE_SIMULATOR which will do the same job.\n. OK, thanks!\n. There's no way to know, unfortunately.\n. They are used by the macOS target. That code is compiled out on iOS using #ifdef statements.. I have another library called iVersion that does exactly what you're asking for. You can use it together with iRate in the same project.\n. I use +load to support zero config (no need to reference iRate in code - it just works).\nIf you want to disable iRate with a feature flag, you can do so by setting [iRate sharedInstance].promptAtLaunch = NO; in your app delegate.. I'd guess this is fixed now? I don't use Carthage though, so please confirm.\n. Thanks for bringing this to my attention. Fixed in 1.11.6\n. Hi Seb,\nMake sure that the iRate.bundle has been included in your project, and that it is included in your app target.\nIf it is, try looking inside the app bundle of your built app and verify that the iRate.bundle is in there.\n. @iLandes SwiftyiRate appears to be an uncredited copy of iRate. I have nothing to do with that project, and I'd encourage you to use this one instead, as I cannot vouch for the other one.. As far as I know, there are no issues.. Should be fixed in 1.11.7. Thanks!. iRate sets the bundle ID automatically using\n[[NSBundle mainBundle] bundleIdentifier]\n\nWhich is equivalent to the code you pasted. You only need to set it manually yourself if you want to override it for some reason.. If you ask for a rating after the 3 requests, nothing will happen. If you want to have \"request review\" button in the app, you should not use SKStoreReviewController (and iRate doesn't, if you call the promptForRating method manually).. Fixed in 1.12. Implemented in 1.12. Well, iRate now uses the official API on iOS 10.3 and above, so it should be OK.. Yes, this is a bug. It sounds like not using SKStoreReviewControllerIfAvailable may be prohibited on iOS 11 anyway, so I may just remove the option.. AFAIK, Apple is now rejecting apps that don't use SKStoreReviewControllerIfAvailable, so this seems like a low priority to fix.. You shouldn't need to call [[iRate sharedInstance] promptForRating]; at all. It will automatically display the prompt once all criteria are met. The promptForRating method is only needed if you want to have a \"rate now\" button in your settings or something.. If you use -[[iRate sharedInstance] logEvent: YES] the prompt will show immediately after you've called iteventsUntilPrompt times, provided that the other criteria have also been met.. It's intentional. Apple says that you should never show SKStoreReviewController using a user-facing button because it's not guaranteed to appear.. Yes, it's because initialize is only called the first time you reference the class, and I want it to be executed even if you don't have any references to iRate in your code (zero-config mode).. I have no control over that dialog, but it makes sense that Apple would disable the button in debug builds, or in cases where you aren't permitted to submit a review (e.g. Because you haven't bought the app, or it's not been released yet). Is this using the latest version of iRate? The URL changed recently.. @zapjonny you can override the URL without forking iRate by adding this to your setup code:\n [iRate sharedInstance].ratingsURL = ...\n\n. That's not really related functionality. I already have another lib called iVersion for that purpose.. Did you look in the console logs in Xcode? iRate should tell you why it didn't appear.\nYou might need to set iRate.sharedInstance().verboseLogging = true though.. SKStoreReviewController implements its own throttling, so it won't keep prompting aftet the user rates the app.. I'm not sure how that's measured. I'm assuming that a) it won't prompt the user to rate a version they've already rated, and b) a request to rate that doesn't display anything won't count against the 3 prompt limit.\nAFAIK, there's no way to detect whether the user actually rated the app, which is why I don't set the ratedThisVersion flag.. ",
    "steipete": "nah' just noise that doesn't need to be in there... otherwise i've nothing to report, iRate is really neat - just integrated it :)\n. Ah, one thing that's not entirely noted; does iRate restart it's values when the version is updated? Because new version = new reviews needed?\n. nah' just noise that doesn't need to be in there... otherwise i've nothing to report, iRate is really neat - just integrated it :)\n. Ah, one thing that's not entirely noted; does iRate restart it's values when the version is updated? Because new version = new reviews needed?\n. ",
    "dlinsin": "Makes sense, thx for pointing it out. \nwith kind regards,\nDavid Linsin\n\n// web: http://dlinsin.github.com\nOn 15.05.2011, at 00:00, demosthenesereply@reply.github.com wrote:\n\nHi dlinsin,\nI actually made a conscious decision not to include NSLocalizedString() within the library itself, the reason being that if I ever changed the default text stringsi n a future version, your localised string names would be wrong.\nThe recommended approach is to use the setters for the strings from within your app, and localise those, so for example, in your config you could say:\n- (void)initialize\n  {\n  [iRate sharedInstance].messageTitle = NSLocalizedString(@\"Rate MyApp\", @\"iRate title\");\n  [iRate sharedInstance].message = NSLocalizedString(@\"If you enjoy using MyApp, please rate it\", @\"iRate message\");\n  [iRate sharedInstance].cancelButtonLabel = NSLocalizedString(@\"No, Thanks\", @\"iRate cancel button\");\n  ... etc\n  }\nThis is slightly more work, but more flexible.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/demosthenese/iRate/pull/2#issuecomment-1163866\n. Makes sense, thx for pointing it out. \n\nwith kind regards,\nDavid Linsin\n\n// web: http://dlinsin.github.com\nOn 15.05.2011, at 00:00, demosthenesereply@reply.github.com wrote:\n\nHi dlinsin,\nI actually made a conscious decision not to include NSLocalizedString() within the library itself, the reason being that if I ever changed the default text stringsi n a future version, your localised string names would be wrong.\nThe recommended approach is to use the setters for the strings from within your app, and localise those, so for example, in your config you could say:\n- (void)initialize\n  {\n  [iRate sharedInstance].messageTitle = NSLocalizedString(@\"Rate MyApp\", @\"iRate title\");\n  [iRate sharedInstance].message = NSLocalizedString(@\"If you enjoy using MyApp, please rate it\", @\"iRate message\");\n  [iRate sharedInstance].cancelButtonLabel = NSLocalizedString(@\"No, Thanks\", @\"iRate cancel button\");\n  ... etc\n  }\nThis is slightly more work, but more flexible.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/demosthenese/iRate/pull/2#issuecomment-1163866\n. \n",
    "4marcus": "I found this document: http://developer.apple.com/library/mac/#documentation/MacOSX/Conceptual/BPInternational/Articles/LocalizingPathnames.html#//apple_ref/doc/uid/20002141-97582-BCIDCGHG \n\nLocalizing Your Application Name\nIf you have a bundled application, you can specify a localized display name for your application. The Finder displays localized bundle names based on the current language settings. Other applications can request your application\u2019s localized name as well and display it as appropriate.\nNote: Mac OS X does not support localized names for non-bundled applications.\nYou specify localized names for your application using the existing bundle localization mechanism. The Resources folder of your application bundle contains one or more language-specific resource directories. (See \u201cBundle Structures\u201d in Bundle Programming Guide for information about bundle resource directories.) In each of these language-specific directories, you can include an InfoPlist.strings file with a list of localized property-list keys. One of the keys you can include in this file is the CFBundleDisplayName key, whose value you can set to the localized name of your bundle.\nAt all times, Mac OS X prefers user-customized display names over the default and localized names you specify in your bundle. If the on-disk application name is different than the non-localized version of your bundle display name\u2014that is, the name associated with the CFBundleDisplayName key in your Info.plist file\u2014the system assumes the user made the change and returns the customized name. If at some later time, the user changes the application name back to the original name, the system reverts to using the localized values from your application bundle.\nImportant: If you want your localized display names to appear, you must include the LSHasLocalizedDisplayName key in your application\u2019s Info.plist file, set the type of its value to Boolean, and set the value to true. The functions that access localized display name information check for the existence of this key before retrieving the information.\n\nProbably checking LSHasLocalizedDisplayName for YES is an option before querying the BundleDisplayName. Or check if nil/empty and fall back to the BundleName.\n. I found this document: http://developer.apple.com/library/mac/#documentation/MacOSX/Conceptual/BPInternational/Articles/LocalizingPathnames.html#//apple_ref/doc/uid/20002141-97582-BCIDCGHG \n\nLocalizing Your Application Name\nIf you have a bundled application, you can specify a localized display name for your application. The Finder displays localized bundle names based on the current language settings. Other applications can request your application\u2019s localized name as well and display it as appropriate.\nNote: Mac OS X does not support localized names for non-bundled applications.\nYou specify localized names for your application using the existing bundle localization mechanism. The Resources folder of your application bundle contains one or more language-specific resource directories. (See \u201cBundle Structures\u201d in Bundle Programming Guide for information about bundle resource directories.) In each of these language-specific directories, you can include an InfoPlist.strings file with a list of localized property-list keys. One of the keys you can include in this file is the CFBundleDisplayName key, whose value you can set to the localized name of your bundle.\nAt all times, Mac OS X prefers user-customized display names over the default and localized names you specify in your bundle. If the on-disk application name is different than the non-localized version of your bundle display name\u2014that is, the name associated with the CFBundleDisplayName key in your Info.plist file\u2014the system assumes the user made the change and returns the customized name. If at some later time, the user changes the application name back to the original name, the system reverts to using the localized values from your application bundle.\nImportant: If you want your localized display names to appear, you must include the LSHasLocalizedDisplayName key in your application\u2019s Info.plist file, set the type of its value to Boolean, and set the value to true. The functions that access localized display name information check for the existence of this key before retrieving the information.\n\nProbably checking LSHasLocalizedDisplayName for YES is an option before querying the BundleDisplayName. Or check if nil/empty and fall back to the BundleName.\n. ",
    "dmrschmidt": "it's still referenced as -iRateShouldShouldPromptForRating in the Readme.\n. it's still referenced as -iRateShouldShouldPromptForRating in the Readme.\n. ",
    "duanefields": "looks good, I'll wire in event logging with our analytics\n. looks good, I'll wire in event logging with our analytics\n. ",
    "micpringle": "Hey Nick,\nIf I do go ahead and modify iRate I'd probably maintain my own branch so as not to end up in the situation you describe.\nI did think about using the significant event option but it seems incorrect to do so as application launches shouldn't be seen as an external significant event since support is already built right in.\nAt the moment I have three options ...\n1 - Modify the code to remove the UIApplicationWillEnterForegroundNotification observer\n2 - Set the usesUntilPrompt to a really high number\n3 - Use the - (void)logEvent:(BOOL)deferPrompt method to log each launch as a significant event\nPerhaps a better option would be to add a method/property to disable the UIApplicationWillEnterForegroundNotification support so the developer can continue to use iRate in the manner intended, without any workarounds, but the decision is put on the developer as to whether bringing the app to the foreground should be treated in the same manner as launching the app. \nLet me know your thoughts.\nMic\n. Thanks for the very comprehensive response Nick.\nI need to give this some more thought, especially your idea of ignoring uses and days altogether and instead using an app specific metric such as track plays which is something I'd not considered previously.\n. Hey Nick,\nIf I do go ahead and modify iRate I'd probably maintain my own branch so as not to end up in the situation you describe.\nI did think about using the significant event option but it seems incorrect to do so as application launches shouldn't be seen as an external significant event since support is already built right in.\nAt the moment I have three options ...\n1 - Modify the code to remove the UIApplicationWillEnterForegroundNotification observer\n2 - Set the usesUntilPrompt to a really high number\n3 - Use the - (void)logEvent:(BOOL)deferPrompt method to log each launch as a significant event\nPerhaps a better option would be to add a method/property to disable the UIApplicationWillEnterForegroundNotification support so the developer can continue to use iRate in the manner intended, without any workarounds, but the decision is put on the developer as to whether bringing the app to the foreground should be treated in the same manner as launching the app. \nLet me know your thoughts.\nMic\n. Thanks for the very comprehensive response Nick.\nI need to give this some more thought, especially your idea of ignoring uses and days altogether and instead using an app specific metric such as track plays which is something I'd not considered previously.\n. ",
    "robotron2084": "That logic is failing for me because the use count is being met but the events count isn't and it is NOT returning no . The implication it seems to me is that both conditions must be met, and if one is met, but the other isn't, then it will not return NO (sorry about that double negative. My situation:\nirate.usesUntilPrompt = 3;\nirate.eventsUntilPrompt = 16;\nI'll get 3 uses, and 3 events:\nif (3 < 3 /* false _/ && 3 < 16 /_true*))\n{\n// False and true do not equal true, so this will not occur, but I want it to. I do not want to show the prompt just yet.\n}\nI'm rushing out the door to get my wisdom teeth removed, so I hope I got this right. I won't be able to reply until the meds wear off. :D\nThanks for your fast reply!\n. Hi Nick,\nThanks for looking into this but you're correct to leave it as it is, and the documentation is correct. I was confused by the double negative, sorry about that! I do think that i will hack my copy tho to be OR instead of AND because for my purposes it makes more sense.\nThanks again,\nC\n. That logic is failing for me because the use count is being met but the events count isn't and it is NOT returning no . The implication it seems to me is that both conditions must be met, and if one is met, but the other isn't, then it will not return NO (sorry about that double negative. My situation:\nirate.usesUntilPrompt = 3;\nirate.eventsUntilPrompt = 16;\nI'll get 3 uses, and 3 events:\nif (3 < 3 /* false _/ && 3 < 16 /_true*))\n{\n// False and true do not equal true, so this will not occur, but I want it to. I do not want to show the prompt just yet.\n}\nI'm rushing out the door to get my wisdom teeth removed, so I hope I got this right. I won't be able to reply until the meds wear off. :D\nThanks for your fast reply!\n. Hi Nick,\nThanks for looking into this but you're correct to leave it as it is, and the documentation is correct. I was confused by the double negative, sorry about that! I do think that i will hack my copy tho to be OR instead of AND because for my purposes it makes more sense.\nThanks again,\nC\n. ",
    "psisquared": "I upgraded my project to Apple LLVM compiler 3.1, leaving Objective-C ARC set to NO, but I'm getting an error Apple Mach-O Linker Error, Undefined symbols for architecture i386: \"OBJC_CLASS_$_iRate\". I must be missing something silly because the installation looks like it's supposed to be so straight forward, but I'm just not getting it. Any help much appreciated\nOn Mar 23, 2012, at 1:26 PM, Nick Lockwood wrote:\n\nYou don't have to use ARC, but you do need to be using Apple LLVM compiler 3 or higher, otherwise it won't compile.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/nicklockwood/iRate/issues/19#issuecomment-4667241\n. Really appreciate the offer! I finally got it sorted, I think. I had to add iRate.m under Compile Sources of my Build Phases tab. I've never had to do that before and I'm not sure what led to that condition, but I found a reference on stackoverflow to this as a solution:\nhttp://stackoverflow.com/questions/6984368/undefined-symbols-for-architecture-i386-objc-class-skpsmtpmessage-refere\n\nOn Mar 23, 2012, at 3:28 PM, Nick Lockwood wrote:\n\nTry doing a clean from the Product menu. If that doesn't work, send your project to support at charcoaldesign dot co dot uk and I'll figure out what's going on.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/nicklockwood/iRate/issues/19#issuecomment-4669111\n. I upgraded my project to Apple LLVM compiler 3.1, leaving Objective-C ARC set to NO, but I'm getting an error Apple Mach-O Linker Error, Undefined symbols for architecture i386: \"OBJC_CLASS_$_iRate\". I must be missing something silly because the installation looks like it's supposed to be so straight forward, but I'm just not getting it. Any help much appreciated\n\nOn Mar 23, 2012, at 1:26 PM, Nick Lockwood wrote:\n\nYou don't have to use ARC, but you do need to be using Apple LLVM compiler 3 or higher, otherwise it won't compile.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/nicklockwood/iRate/issues/19#issuecomment-4667241\n. Really appreciate the offer! I finally got it sorted, I think. I had to add iRate.m under Compile Sources of my Build Phases tab. I've never had to do that before and I'm not sure what led to that condition, but I found a reference on stackoverflow to this as a solution:\nhttp://stackoverflow.com/questions/6984368/undefined-symbols-for-architecture-i386-objc-class-skpsmtpmessage-refere\n\nOn Mar 23, 2012, at 3:28 PM, Nick Lockwood wrote:\n\nTry doing a clean from the Product menu. If that doesn't work, send your project to support at charcoaldesign dot co dot uk and I'll figure out what's going on.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/nicklockwood/iRate/issues/19#issuecomment-4669111\n. \n",
    "twigbranch": "Nice! I'll check it out.\n. Nice! I'll check it out.\n. ",
    "jkubicek": "I have the following warnings turned on:\nMissing Newline at End of File\nStrict Selector Matching\nBased on this post and this script. It looks like Strict Selector Matching is no longer necessary though.\nOn Apr 4, 2012, at 12:23 PM, Nick Lockwood wrote:\n\nI don't really understand the purpose of either of these changes. Neither of these lines generate warnings in the example project.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/nicklockwood/iRate/pull/25#issuecomment-4960994\n. I have the following warnings turned on:\n\nMissing Newline at End of File\nStrict Selector Matching\nBased on this post and this script. It looks like Strict Selector Matching is no longer necessary though.\nOn Apr 4, 2012, at 12:23 PM, Nick Lockwood wrote:\n\nI don't really understand the purpose of either of these changes. Neither of these lines generate warnings in the example project.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/nicklockwood/iRate/pull/25#issuecomment-4960994\n. \n",
    "pkamb": "Yeah I tried to think of a better name too.... this works. Thanks for the merge.\niRate with onlyPromptIfMainWindowIsAvailable = NO is now active in my app\nReddit Notifier:\nhttp://itunes.apple.com/us/app/reddit-notifier/id468366517?mt=12\nJust (finally!) hit the minimum number of reviews for an \"average rating\" on the Mac App Store, many thanks for iRate!\n. Yeah I tried to think of a better name too.... this works. Thanks for the merge.\niRate with onlyPromptIfMainWindowIsAvailable = NO is now active in my app\nReddit Notifier:\nhttp://itunes.apple.com/us/app/reddit-notifier/id468366517?mt=12\nJust (finally!) hit the minimum number of reviews for an \"average rating\" on the Mac App Store, many thanks for iRate!\n. ",
    "joshuakarjala": "Sorry had missed the daysUntilPrompt default. So it works now :)\n. Sorry had missed the daysUntilPrompt default. So it works now :)\n. ",
    "mibrahim01": "2012-4-11 18:57:09 shouldPromptForRating:appStoreCountry=AU\n2012-4-11 18:57:09 shouldPromptForRating:appStoreID=502431430\n2012-4-11 18:57:09 shouldPromptForRating:ratedThisVersion=NO\n2012-4-11 18:57:09 shouldPromptForRating:declinedThisVersion=NO\n2012-4-11 18:57:09 shouldPromptForRating:firstUsed=2012-04-10 20:06:14 +0000\n2012-4-11 18:57:09 shouldPromptForRating:Date Diff (Current Value=64254.933416, Setting=863.999981)\n2012-4-11 18:57:09 shouldPromptForRating:usesCount=26\n2012-4-11 18:57:09 shouldPromptForRating:lastReminded=(null)\n2012-4-11 18:57:09 checkForConnectivityInBackground:iTunesServiceURL=http://itunes.apple.com/lookup?country=AU&id=502431430\n2012-4-11 18:57:09 Segment Count : 2\n2012-4-11 18:57:10 Segment Count : 2\n2012-4-11 18:57:10 Reachability Flag Status: -R ------- networkStatusForFlags\n2012-4-11 18:57:10 token ; 2662eb7f0ce7eb59e314f1a3df8cdc31e6cf4025d92e44f48fc2f5ec8bb9206c\n2012-4-11 18:57:10 iRateCouldNotConnectToAppStore: Error\n2012-4-11 18:57:10 Error Domain=iRate Code=2 \"Service bundleID and applicationBundleID did not match\" UserInfo=0x2bce30 {NSLocalizedDescription=Service bundleID and applicationBundleID did not match}\n. Bundle IDcom.gamezebo.wannaplay\nApple ID\n502431430\nThe Application is available in Pakistan, Canada and Indonesia. It's NOT available in US, Australia\n. Thanks for that Nick!\n. 2012-4-11 18:57:09 shouldPromptForRating:appStoreCountry=AU\n2012-4-11 18:57:09 shouldPromptForRating:appStoreID=502431430\n2012-4-11 18:57:09 shouldPromptForRating:ratedThisVersion=NO\n2012-4-11 18:57:09 shouldPromptForRating:declinedThisVersion=NO\n2012-4-11 18:57:09 shouldPromptForRating:firstUsed=2012-04-10 20:06:14 +0000\n2012-4-11 18:57:09 shouldPromptForRating:Date Diff (Current Value=64254.933416, Setting=863.999981)\n2012-4-11 18:57:09 shouldPromptForRating:usesCount=26\n2012-4-11 18:57:09 shouldPromptForRating:lastReminded=(null)\n2012-4-11 18:57:09 checkForConnectivityInBackground:iTunesServiceURL=http://itunes.apple.com/lookup?country=AU&id=502431430\n2012-4-11 18:57:09 Segment Count : 2\n2012-4-11 18:57:10 Segment Count : 2\n2012-4-11 18:57:10 Reachability Flag Status: -R ------- networkStatusForFlags\n2012-4-11 18:57:10 token ; 2662eb7f0ce7eb59e314f1a3df8cdc31e6cf4025d92e44f48fc2f5ec8bb9206c\n2012-4-11 18:57:10 iRateCouldNotConnectToAppStore: Error\n2012-4-11 18:57:10 Error Domain=iRate Code=2 \"Service bundleID and applicationBundleID did not match\" UserInfo=0x2bce30 {NSLocalizedDescription=Service bundleID and applicationBundleID did not match}\n. Bundle IDcom.gamezebo.wannaplay\nApple ID\n502431430\nThe Application is available in Pakistan, Canada and Indonesia. It's NOT available in US, Australia\n. Thanks for that Nick!\n. ",
    "yawarkhan": "FYI, \nIt is not happening on all our test devices. iRate popup is appeared on few devices. \nActually \"http://itunes.apple.com/lookup?country=AU&id=502431430\" gives empty set instead of valid JSON response. \nIt gives empty set because we haven't yet released the application in 'AU' region.\nThe problem is - why is it picking country 'AU' as aapStoreCountry (which is my local country but not App Store country)?\nHere are the configuration settings,\n[iRate sharedInstance].appStoreID = 502431430;\n[iRate sharedInstance].applicationBundleID = @\"com.gamezebo.wannaplay\";\n[iRate sharedInstance].daysUntilPrompt = 0.01;\n[iRate sharedInstance].usesUntilPrompt = 1;\n[iRate sharedInstance].eventsUntilPrompt = 0;\n[iRate sharedInstance].remindPeriod = 3;\n. FYI, \nIt is not happening on all our test devices. iRate popup is appeared on few devices. \nActually \"http://itunes.apple.com/lookup?country=AU&id=502431430\" gives empty set instead of valid JSON response. \nIt gives empty set because we haven't yet released the application in 'AU' region.\nThe problem is - why is it picking country 'AU' as aapStoreCountry (which is my local country but not App Store country)?\nHere are the configuration settings,\n[iRate sharedInstance].appStoreID = 502431430;\n[iRate sharedInstance].applicationBundleID = @\"com.gamezebo.wannaplay\";\n[iRate sharedInstance].daysUntilPrompt = 0.01;\n[iRate sharedInstance].usesUntilPrompt = 1;\n[iRate sharedInstance].eventsUntilPrompt = 0;\n[iRate sharedInstance].remindPeriod = 3;\n. ",
    "angerman": "Is there a list of persons, who contributed which translation? Or mark which translations are Google Translated or so? I'm afraid one has to verify each translation. For now using the iRate.bundle is going to be very embarrassing. The english text is fine. But after I saw the German text, I just removed the bundle as a whole.\nAlso there's a problem when the text is too long. The alert view looks very off then.\n. I'd really like a list of (initial translators) and possibly a list of verificators or contributors. That would really improve the trustworthiness. I like the German translation of Appirator actually a little better then the provided one. It just reads better/friendlier/more call to action like.\n\nMoritz Angermann\nOn Friday, April 20, 2012 at 10:26 PM, Nick Lockwood wrote:\n\nThe English, Italian, French, Spanish, Chinese, Turkish and (now) German have been checked or contributed by humans. Not sure about the others.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/nicklockwood/iRate/issues/31#issuecomment-5252394\n. The text is too long for the AlertView. there is some shadow of an embossed element behind the text (could that be a Scrollview?). The text runs from very close below the title straight down to very close over the buttons. That is in Portrait mode. Latest iOS: 5.1 \n\n\nMoritz Angermann\nOn Friday, April 20, 2012 at 10:29 PM, Nick Lockwood wrote:\n\nWhen you say the alert looks \"off\" if the text is too long, can you clarify? For example, are you referring to the German text? And do you mean in portrait or landscape? Which OS version did you test on? Can you provide a link to a screenshot of the problem?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/nicklockwood/iRate/issues/31#issuecomment-5252454\n. Don't get me wrong on this one. I just think it would be helpful to have a file detailing the localization.\n\nFor the layout issue, see https://skitch.com/angerman/8w2mr/ios-simulator\n(still old translations)\n\nMoritz Angermann\nOn Friday, April 20, 2012 at 10:55 PM, Nick Lockwood wrote:\n\nFrench, Italian and Spanish have all been verified by native speakers. Chinese and Turkish were donated by github users, so I don't know if they are accurate but I'm assuming they are. The rest are machine translations.\nI don't have the list of names to hand although you can deduce them by studying the pull history for the project if you wish. I fail to see what difference the names would make. I'm not pretending they are human-translated when they are machine translations - why would I? \nIf you are unhappy with that, you are free to source your own replacement translations from a professional translation service (I recommend icanlocalize.com (http://icanlocalize.com)), or use the ones from Appirater instead. If you would like to contribute better translations back to the project then they would be gratefully received.\nI am however curious about the layout issue you reported. If you can give me reproduction steps, I will fix it.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/nicklockwood/iRate/issues/31#issuecomment-5252943\n. That's with the new translations; you also don't have that strange emboss in the AlertView, I got.\n\n\nMoritz Angermann\nOn Friday, April 20, 2012 at 11:02 PM, Nick Lockwood wrote:\n\nI'm not seeing what you're seeing. Here's a screenshot from iOS 5.1:\nhttp://charcoaldesign.co.uk/images/screenshots.irate.2.png\nCan you send me a shot of what you are seeing?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/nicklockwood/iRate/issues/31#issuecomment-5253105\n. That was code as of earlier for today. Screenshot from Simulator; looked the same on the device.\n\nThe latest commit only contains the new language files. They hide be bug, because they shorten the text to an acceptable length. If you though have a longer App Title (as forged in the attached screenshot), you get the same layout issue. (This is with the update from the latest source. c.f. the new translation text) \nhttps://skitch.com/angerman/8w29u/ios-simulator \n\nMoritz Angermann\nOn Friday, April 20, 2012 at 11:09 PM, Nick Lockwood wrote:\n\nUpdate to the latest code base and see if you're still seeing the issue. Was your screenshot taken on the simulator or the device?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/nicklockwood/iRate/issues/31#issuecomment-5253264\n. Is there a list of persons, who contributed which translation? Or mark which translations are Google Translated or so? I'm afraid one has to verify each translation. For now using the iRate.bundle is going to be very embarrassing. The english text is fine. But after I saw the German text, I just removed the bundle as a whole.\n\nAlso there's a problem when the text is too long. The alert view looks very off then.\n. I'd really like a list of (initial translators) and possibly a list of verificators or contributors. That would really improve the trustworthiness. I like the German translation of Appirator actually a little better then the provided one. It just reads better/friendlier/more call to action like.\n\nMoritz Angermann\nOn Friday, April 20, 2012 at 10:26 PM, Nick Lockwood wrote:\n\nThe English, Italian, French, Spanish, Chinese, Turkish and (now) German have been checked or contributed by humans. Not sure about the others.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/nicklockwood/iRate/issues/31#issuecomment-5252394\n. The text is too long for the AlertView. there is some shadow of an embossed element behind the text (could that be a Scrollview?). The text runs from very close below the title straight down to very close over the buttons. That is in Portrait mode. Latest iOS: 5.1 \n\n\nMoritz Angermann\nOn Friday, April 20, 2012 at 10:29 PM, Nick Lockwood wrote:\n\nWhen you say the alert looks \"off\" if the text is too long, can you clarify? For example, are you referring to the German text? And do you mean in portrait or landscape? Which OS version did you test on? Can you provide a link to a screenshot of the problem?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/nicklockwood/iRate/issues/31#issuecomment-5252454\n. Don't get me wrong on this one. I just think it would be helpful to have a file detailing the localization.\n\nFor the layout issue, see https://skitch.com/angerman/8w2mr/ios-simulator\n(still old translations)\n\nMoritz Angermann\nOn Friday, April 20, 2012 at 10:55 PM, Nick Lockwood wrote:\n\nFrench, Italian and Spanish have all been verified by native speakers. Chinese and Turkish were donated by github users, so I don't know if they are accurate but I'm assuming they are. The rest are machine translations.\nI don't have the list of names to hand although you can deduce them by studying the pull history for the project if you wish. I fail to see what difference the names would make. I'm not pretending they are human-translated when they are machine translations - why would I? \nIf you are unhappy with that, you are free to source your own replacement translations from a professional translation service (I recommend icanlocalize.com (http://icanlocalize.com)), or use the ones from Appirater instead. If you would like to contribute better translations back to the project then they would be gratefully received.\nI am however curious about the layout issue you reported. If you can give me reproduction steps, I will fix it.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/nicklockwood/iRate/issues/31#issuecomment-5252943\n. That's with the new translations; you also don't have that strange emboss in the AlertView, I got.\n\n\nMoritz Angermann\nOn Friday, April 20, 2012 at 11:02 PM, Nick Lockwood wrote:\n\nI'm not seeing what you're seeing. Here's a screenshot from iOS 5.1:\nhttp://charcoaldesign.co.uk/images/screenshots.irate.2.png\nCan you send me a shot of what you are seeing?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/nicklockwood/iRate/issues/31#issuecomment-5253105\n. That was code as of earlier for today. Screenshot from Simulator; looked the same on the device.\n\nThe latest commit only contains the new language files. They hide be bug, because they shorten the text to an acceptable length. If you though have a longer App Title (as forged in the attached screenshot), you get the same layout issue. (This is with the update from the latest source. c.f. the new translation text) \nhttps://skitch.com/angerman/8w29u/ios-simulator \n\nMoritz Angermann\nOn Friday, April 20, 2012 at 11:09 PM, Nick Lockwood wrote:\n\nUpdate to the latest code base and see if you're still seeing the issue. Was your screenshot taken on the simulator or the device?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/nicklockwood/iRate/issues/31#issuecomment-5253264\n. \n",
    "honkmaster": "I have to say the german localization i very bad! Can i help to provide a better experience?\n. I have to say the german localization i very bad! Can i help to provide a better experience?\n. ",
    "ddaddy": "Funny enough, I have just figured this out and was going to write the same here.\nI can now just set eventCount=0 and it'll trigger after the same amount of events again.\nOne thing I have noticed while trying to figure this out, is that after you accept or reject to rate (not remind later), the eventCount will continue to count. Could this eventually reach a maximum number and cause a crash?\nI'm actually using the event on a main function in my app that's called a lot and will set eventsUntilPrompt=200 so this number could get very high indeed over time.\nMaybe it's worth checking if Rated or Declined has been called before increasing the event count?\n. Erm... I guess I'll be fine with 136 years! (Hangs head in shame).\nThanks for the good work, keep it up.\n. Forgot to mention, incase you didn't know the app store is a new layout in iOS 6.\n. It might just be app store bugs as I've ha trouble getting it to show me the right country store.\nAfter clicking an iRate link it left the app store unable to launch! I had to reboot.\nIs be interested to hear if anyone else has tried it.\n. Yes it's very buggy. I've filed radars for both the $ in UK and links not working. They where already aware of the links not working as it was a duplicate bug report, but have requested help with the $ in UK issue, so hopefully the next beta will have it fixed.\nLets wait and see.\n. I don't suppose anyone come up with a fix for this?\nIt's still broken on beta 3.\n. Thanks for the update.\nI've added this for now:\nif ([[[UIDevice currentDevice] systemVersion] floatValue] >= 6.0) {\n        [iRate sharedInstance].ratingsURL = [NSURL URLWithString:@\"http://itunes.apple.com/us/app/APPNAME/idAPPID?mt=8\"];\n    }\n. Thanks. I did log the URL calls on my router and got the URL called when clicking the App Store review page, however it didn't work as a direct link.\n. Someone today on Twitter mentioned that the review links are now working again on iOS6. I shall test this shortly and let you know.\n. Yes. The original links now work in iOS 6 :-)\n. It seems iRateCouldNotConnectToAppStore is being fired.\nWhat other reasons would trigger that to fire?\nI have changed the app ID with an app that is live on the app store.\nDoes it detect that it is a different app id?\n. Never mind. I'm having a bad day.\nThe error is that Bundle ID doesn't match App ID. Obviously because the app isn't live yet it won't be able to match them.\n. It might just be worth putting it in the readme that it won't work with non-live app id's.\nI'm sure I do this with every app I make. I test with debug mode, then before submitting I want to test in real time, but it obviously doesn't work because it must check that the app ID actually exists.\n. Wow, so your saying it doesn't even need instantiating?\nI always make sure I but at least 1 config line just to make sure it loaded.\n. Thanks, thats a new one for me.\nI'll have a play with that when I get time.\n. Looks like you dont have all the necessary files linked properly.\nThe easiest way is delete it from your project, then re-add it but make sure you tick the box in \"Add to target\"\n. Sorry, false alarm. It seems it's just in the simulator.\nIt works fine on device.\n. I remember this happening with iOS 6 beta's and turned out fine in GM. So i'd suggest maybe waiting until iOS 7 final is released before removing or changing anything.\n. Did anyone test with yesterdays new GM build?\n. \ud83d\udc4d\ud83c\udffc would like this too, to automatically default to the new behaviour when using 10.3. Funny enough, I have just figured this out and was going to write the same here.\nI can now just set eventCount=0 and it'll trigger after the same amount of events again.\nOne thing I have noticed while trying to figure this out, is that after you accept or reject to rate (not remind later), the eventCount will continue to count. Could this eventually reach a maximum number and cause a crash?\nI'm actually using the event on a main function in my app that's called a lot and will set eventsUntilPrompt=200 so this number could get very high indeed over time.\nMaybe it's worth checking if Rated or Declined has been called before increasing the event count?\n. Erm... I guess I'll be fine with 136 years! (Hangs head in shame).\nThanks for the good work, keep it up.\n. Forgot to mention, incase you didn't know the app store is a new layout in iOS 6.\n. It might just be app store bugs as I've ha trouble getting it to show me the right country store.\nAfter clicking an iRate link it left the app store unable to launch! I had to reboot.\nIs be interested to hear if anyone else has tried it.\n. Yes it's very buggy. I've filed radars for both the $ in UK and links not working. They where already aware of the links not working as it was a duplicate bug report, but have requested help with the $ in UK issue, so hopefully the next beta will have it fixed.\nLets wait and see.\n. I don't suppose anyone come up with a fix for this?\nIt's still broken on beta 3.\n. Thanks for the update.\nI've added this for now:\nif ([[[UIDevice currentDevice] systemVersion] floatValue] >= 6.0) {\n        [iRate sharedInstance].ratingsURL = [NSURL URLWithString:@\"http://itunes.apple.com/us/app/APPNAME/idAPPID?mt=8\"];\n    }\n. Thanks. I did log the URL calls on my router and got the URL called when clicking the App Store review page, however it didn't work as a direct link.\n. Someone today on Twitter mentioned that the review links are now working again on iOS6. I shall test this shortly and let you know.\n. Yes. The original links now work in iOS 6 :-)\n. It seems iRateCouldNotConnectToAppStore is being fired.\nWhat other reasons would trigger that to fire?\nI have changed the app ID with an app that is live on the app store.\nDoes it detect that it is a different app id?\n. Never mind. I'm having a bad day.\nThe error is that Bundle ID doesn't match App ID. Obviously because the app isn't live yet it won't be able to match them.\n. It might just be worth putting it in the readme that it won't work with non-live app id's.\nI'm sure I do this with every app I make. I test with debug mode, then before submitting I want to test in real time, but it obviously doesn't work because it must check that the app ID actually exists.\n. Wow, so your saying it doesn't even need instantiating?\nI always make sure I but at least 1 config line just to make sure it loaded.\n. Thanks, thats a new one for me.\nI'll have a play with that when I get time.\n. Looks like you dont have all the necessary files linked properly.\nThe easiest way is delete it from your project, then re-add it but make sure you tick the box in \"Add to target\"\n. Sorry, false alarm. It seems it's just in the simulator.\nIt works fine on device.\n. I remember this happening with iOS 6 beta's and turned out fine in GM. So i'd suggest maybe waiting until iOS 7 final is released before removing or changing anything.\n. Did anyone test with yesterdays new GM build?\n. \ud83d\udc4d\ud83c\udffc would like this too, to automatically default to the new behaviour when using 10.3. ",
    "HHuckebein": "Thx anyway for your quick reply.\n. Correct me if I am wrong but I guessed you can actually test \"real\" behavior only on an app which is already on the store\nand that's why your data object(ZeroConfig) contained more information than my own\nproject?!\nAm 28.08.2012 um 16:09 schrieb Nick Lockwood notifications@github.com:\n\nI see that you've closed the issue - did you figure out what the problem was?\n\u2014\nReply to this email directly or view it on GitHub.\n. Okay.\n\nThx for your quick reply.\nAm 28.08.2012 um 18:14 schrieb Nick Lockwood notifications@github.com:\n\nYes, that's correct. It will work once the app is live, but not prior to submission.\nIf you set [iRate sharedInstance].debug = YES; then you can test what the behaviour will be once live (remember to remove that again before you submit).\n\u2014\nReply to this email directly or view it on GitHub.\n. Me again,\n\nI was thinking about (instead of your debug option) to introduce a simulation mode.\nIf in simulation mode read the data we need from a prepared dictionary (values could be set automatically, e.g. bundleId or user defined).\nContinue with the data object as usual.\nI actually did that (see code below) but your method valueForKey:inJSON: failed.\nSo I was thinking about get rid of the method in favor of\nconverting the json data coming from iTunes into a dictionary and working with that,\nbut wanted to know if there was a special reason for writing that valueForKey:inJSON?\nOkay. To keep it simple (using NSJSONSerialization) would limit simulation mode for iOS version greater 5.\nWhat do you thing about that?\nKind regards\nBernd Rabe\n554  NSData data = self.simulate ? [self jsonDataInSimulationMode] :[NSData dataWithContentsOfURL:[NSURL URLWithString:iTunesServiceURL] options:NSDataReadingUncached error:&error];\n- (NSData )jsonDataInSimulationMode\n  {\n  NSDictionary *jsonDict = @{\n      @\"resultCount\" : @1,\n      @\"results\" :\n          @[ @{ @\"bundleId\" : @\"com.charcoaldesign.rainbowblocks\" },\n          @{ @\"primaryGenreName\" : @\"Games\" },\n          @{ @\"trackId\" : @355313284 },\n          @{ @\"version\" : @\"1.8.5\" }]\n  };\nNSError error = nil;\n  NSData jsonData = [NSJSONSerialization dataWithJSONObject:(id)jsonDict\n                                                     options:0\n                                                       error:&error];\n  NSAssert1(error == nil, @\"Failed to create json data object\", [error localizedDescription]);\nreturn jsonData;\n  }\nAm 28.08.2012 um 19:07 schrieb Rabe Bernd Bernd.Rabe@onlinehome.de:\n\nOkay.\nThx for your quick reply.\nAm 28.08.2012 um 18:14 schrieb Nick Lockwood notifications@github.com:\n\nYes, that's correct. It will work once the app is live, but not prior to submission.\nIf you set [iRate sharedInstance].debug = YES; then you can test what the behaviour will be once live (remember to remove that again before you submit).\n\u2014\nReply to this email directly or view it on GitHub.\n. Well, thats what I did actually and the only code I had to change was adding an iVar, add one method and replace on line of code.\nIf there wouldn't be the problem in this valueForKey:inJSON:\n\n\nI'll try to figure out what happens.\nAm 29.08.2012 um 09:59 schrieb Nick Lockwood notifications@github.com:\n\nIt's an interesting idea, but the only purpose I can think of would be for me to test that the library works correctly (which I can do by running it using a live app ID, as I do in the example projects). I don't see that an end user would get much benefit from it versus the existing debug mode option.\nThe valueForKey:inJSON method is purely to support iOS 4. I will eventually replace it with NSJSONSerialisation when I drop support for iOS 4, but there's no reason to do that now. I'm aware that it's a horrible hack, but I don't want to force people to use an arbitrary JSON library, and supporting all known JSON libraries (like AFNetworking does) requires a lot more, much nastier code.\nIf you do want to add a simulation mode for some reason, why not just use sample JSON data for simulation instead of a dictionary? Seems like it would make life easier.\n\u2014\nReply to this email directly or view it on GitHub.\n. My fault.\n\nhere is the corrected code.\nIt would give users the chance to test the whole iRate logic also for apps which are not on the store.\nI leave it to you how to continue. (Its still not working for iOS < 5.0)\nAnyway. Thanks for this peace of code. Couldn't find any better solution.\npragma mark - Simulate JSON Object\n\n(NSData )jsonDataInSimulationMode\n  {\n  NSDictionary jsonDict = @{\n      @\"resultCount\" : @1,\n      @\"results\" :\n          @[ @{ @\"bundleId\" : self.applicationBundleID,\n                @\"primaryGenreName\" : @\"Games\",\n                @\"trackId\" : @355313284,\n                @\"version\" : @\"1.8.5\" }]\n  };\n\nNSError error = nil;\n  NSData jsonData = [NSJSONSerialization dataWithJSONObject:(id)jsonDict\n                                                     options:0\n                                                       error:&error];\n  NSAssert1(error == nil, @\"Failed to create json data object\", [error localizedDescription]);\nreturn jsonData;\n  }\nAm 29.08.2012 um 09:59 schrieb Nick Lockwood notifications@github.com:\n\nIt's an interesting idea, but the only purpose I can think of would be for me to test that the library works correctly (which I can do by running it using a live app ID, as I do in the example projects). I don't see that an end user would get much benefit from it versus the existing debug mode option.\nThe valueForKey:inJSON method is purely to support iOS 4. I will eventually replace it with NSJSONSerialisation when I drop support for iOS 4, but there's no reason to do that now. I'm aware that it's a horrible hack, but I don't want to force people to use an arbitrary JSON library, and supporting all known JSON libraries (like AFNetworking does) requires a lot more, much nastier code.\nIf you do want to add a simulation mode for some reason, why not just use sample JSON data for simulation instead of a dictionary? Seems like it would make life easier.\n\u2014\nReply to this email directly or view it on GitHub.\n. Thx anyway for your quick reply.\n. Correct me if I am wrong but I guessed you can actually test \"real\" behavior only on an app which is already on the store\nand that's why your data object(ZeroConfig) contained more information than my own\nproject?!\n\nAm 28.08.2012 um 16:09 schrieb Nick Lockwood notifications@github.com:\n\nI see that you've closed the issue - did you figure out what the problem was?\n\u2014\nReply to this email directly or view it on GitHub.\n. Okay.\n\nThx for your quick reply.\nAm 28.08.2012 um 18:14 schrieb Nick Lockwood notifications@github.com:\n\nYes, that's correct. It will work once the app is live, but not prior to submission.\nIf you set [iRate sharedInstance].debug = YES; then you can test what the behaviour will be once live (remember to remove that again before you submit).\n\u2014\nReply to this email directly or view it on GitHub.\n. Me again,\n\nI was thinking about (instead of your debug option) to introduce a simulation mode.\nIf in simulation mode read the data we need from a prepared dictionary (values could be set automatically, e.g. bundleId or user defined).\nContinue with the data object as usual.\nI actually did that (see code below) but your method valueForKey:inJSON: failed.\nSo I was thinking about get rid of the method in favor of\nconverting the json data coming from iTunes into a dictionary and working with that,\nbut wanted to know if there was a special reason for writing that valueForKey:inJSON?\nOkay. To keep it simple (using NSJSONSerialization) would limit simulation mode for iOS version greater 5.\nWhat do you thing about that?\nKind regards\nBernd Rabe\n554  NSData data = self.simulate ? [self jsonDataInSimulationMode] :[NSData dataWithContentsOfURL:[NSURL URLWithString:iTunesServiceURL] options:NSDataReadingUncached error:&error];\n- (NSData )jsonDataInSimulationMode\n  {\n  NSDictionary *jsonDict = @{\n      @\"resultCount\" : @1,\n      @\"results\" :\n          @[ @{ @\"bundleId\" : @\"com.charcoaldesign.rainbowblocks\" },\n          @{ @\"primaryGenreName\" : @\"Games\" },\n          @{ @\"trackId\" : @355313284 },\n          @{ @\"version\" : @\"1.8.5\" }]\n  };\nNSError error = nil;\n  NSData jsonData = [NSJSONSerialization dataWithJSONObject:(id)jsonDict\n                                                     options:0\n                                                       error:&error];\n  NSAssert1(error == nil, @\"Failed to create json data object\", [error localizedDescription]);\nreturn jsonData;\n  }\nAm 28.08.2012 um 19:07 schrieb Rabe Bernd Bernd.Rabe@onlinehome.de:\n\nOkay.\nThx for your quick reply.\nAm 28.08.2012 um 18:14 schrieb Nick Lockwood notifications@github.com:\n\nYes, that's correct. It will work once the app is live, but not prior to submission.\nIf you set [iRate sharedInstance].debug = YES; then you can test what the behaviour will be once live (remember to remove that again before you submit).\n\u2014\nReply to this email directly or view it on GitHub.\n. Well, thats what I did actually and the only code I had to change was adding an iVar, add one method and replace on line of code.\nIf there wouldn't be the problem in this valueForKey:inJSON:\n\n\nI'll try to figure out what happens.\nAm 29.08.2012 um 09:59 schrieb Nick Lockwood notifications@github.com:\n\nIt's an interesting idea, but the only purpose I can think of would be for me to test that the library works correctly (which I can do by running it using a live app ID, as I do in the example projects). I don't see that an end user would get much benefit from it versus the existing debug mode option.\nThe valueForKey:inJSON method is purely to support iOS 4. I will eventually replace it with NSJSONSerialisation when I drop support for iOS 4, but there's no reason to do that now. I'm aware that it's a horrible hack, but I don't want to force people to use an arbitrary JSON library, and supporting all known JSON libraries (like AFNetworking does) requires a lot more, much nastier code.\nIf you do want to add a simulation mode for some reason, why not just use sample JSON data for simulation instead of a dictionary? Seems like it would make life easier.\n\u2014\nReply to this email directly or view it on GitHub.\n. My fault.\n\nhere is the corrected code.\nIt would give users the chance to test the whole iRate logic also for apps which are not on the store.\nI leave it to you how to continue. (Its still not working for iOS < 5.0)\nAnyway. Thanks for this peace of code. Couldn't find any better solution.\npragma mark - Simulate JSON Object\n\n(NSData )jsonDataInSimulationMode\n  {\n  NSDictionary jsonDict = @{\n      @\"resultCount\" : @1,\n      @\"results\" :\n          @[ @{ @\"bundleId\" : self.applicationBundleID,\n                @\"primaryGenreName\" : @\"Games\",\n                @\"trackId\" : @355313284,\n                @\"version\" : @\"1.8.5\" }]\n  };\n\nNSError error = nil;\n  NSData jsonData = [NSJSONSerialization dataWithJSONObject:(id)jsonDict\n                                                     options:0\n                                                       error:&error];\n  NSAssert1(error == nil, @\"Failed to create json data object\", [error localizedDescription]);\nreturn jsonData;\n  }\nAm 29.08.2012 um 09:59 schrieb Nick Lockwood notifications@github.com:\n\nIt's an interesting idea, but the only purpose I can think of would be for me to test that the library works correctly (which I can do by running it using a live app ID, as I do in the example projects). I don't see that an end user would get much benefit from it versus the existing debug mode option.\nThe valueForKey:inJSON method is purely to support iOS 4. I will eventually replace it with NSJSONSerialisation when I drop support for iOS 4, but there's no reason to do that now. I'm aware that it's a horrible hack, but I don't want to force people to use an arbitrary JSON library, and supporting all known JSON libraries (like AFNetworking does) requires a lot more, much nastier code.\nIf you do want to add a simulation mode for some reason, why not just use sample JSON data for simulation instead of a dictionary? Seems like it would make life easier.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "rizzow": "Hmm, unfortunately here the original links don't work (both on iPhone 4 running iOS6 and an iPad 2 running iOS 5). I'm using a Dutch app store.\n. Hmm, unfortunately here the original links don't work (both on iPhone 4 running iOS6 and an iPad 2 running iOS 5). I'm using a Dutch app store.\n. ",
    "ishuo": "Thanks for the fast reply! I did compile my binary with XCode 4.4. I'll do the experiments later next week as I'm going on a vacation for a couple of days :) . \nI did find a workaround though: if I set -fno-objc-arc compiler flag on the class, the resulting binary works on 10.6.8. Maybe its of interest for you!\n. iRate version 1.5.1 now \"just works\" with my app in OS X 10.6.8. Thank you!\n. Thanks for the fast reply! I did compile my binary with XCode 4.4. I'll do the experiments later next week as I'm going on a vacation for a couple of days :) . \nI did find a workaround though: if I set -fno-objc-arc compiler flag on the class, the resulting binary works on 10.6.8. Maybe its of interest for you!\n. iRate version 1.5.1 now \"just works\" with my app in OS X 10.6.8. Thank you!\n. ",
    "Tibbs": "@pilot34 iRate is a open source framework as everything else it has problems, I'm sure that if you had developed a similar solution from scratch it would have cost you several days of hard work.\nNick, you are doing a fantastic work with iRate, Thank you for that! \n. It is very strange, I updated about 10 Apps in the last week or so, all have storekit but only the free ones have IAP. No problem what so ever.\nIt must be only a bad reviewer.\nCould you send us what they wrote in their rejection message?  \nOn 28/08/2013, at 6:12 AM, haitaoli notifications@github.com wrote:\n\nThank you. Yes, it's probably new. We have other apps linking to the same libraries and they passed multiple reviews without issues.\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks! It sounds like an automatic message, so it must be a rule now. The funny thing they approved one of my apps with linked Storekit but without any IAPs a few minutes before your message.\n\nOn 28/08/2013, at 8:49 AM, haitaoli notifications@github.com wrote:\n\nRejection message:\nMissing IAPs\nWe are unable to complete the review of your app since one or more of your In App Purchases have not been submitted for review.\nIf you do not wish to use In App Purchases at this time, please remove the In App Purchases frameworks.\nPlease be sure to take action and submit your In App Purchases AND upload a new binary in iTunes Connect. Learn more about submitting In App Purchases for review in the iTunes Connect Developer Guide.\nOnce you've submitted your In App Purchases and uploaded a new binary, we can proceed with your review.Note: Apps that offer In-App Purchase products that must be restorable are required to include a \"Restore\" feature. The following In-App Purchase types must be restorable:\nnon-consumable products\nauto-renewing subscriptions\nfree subscriptions\nFor more information, please see the section, Restoring Transactions, in the In-App Purchase Programming Guide.\n\u2014\nReply to this email directly or view it on GitHub.\n. I totally agree. I think it was a very very important feature. If iRate never prompts a satisfied user again that is not good.\nIt would have been enough to make the default NO, or just leave it alone. \nWho cares what some random guy thinks? I will definitely add it back to my version.\n. I think it is very important feature. If it is missing it is a deal breaker for me and I will not update iRate beyond 1.8.3. I already looked at Appirater and apart from this issue iRate is far more advanced.\n\nI have thousands of ratings and reviews (the average is more than 4*) and I never seen a reviewer complaining about repeating review requests. It takes one tap to dismiss the request and it won\u2019t show up until the next update which could be in weeks or months. I would not call it as a great inconvenience. \nI have several reviewers who keep updating their reviews and star ratings \nThis switch could be made NO by default, so it would be totally up to the developer to opt in. So far I'm happy with 1.8.3. it still works great.\n. 1+\n. Any news on this?\n. @pilot34 iRate is a open source framework as everything else it has problems, I'm sure that if you had developed a similar solution from scratch it would have cost you several days of hard work.\nNick, you are doing a fantastic work with iRate, Thank you for that! \n. It is very strange, I updated about 10 Apps in the last week or so, all have storekit but only the free ones have IAP. No problem what so ever.\nIt must be only a bad reviewer.\nCould you send us what they wrote in their rejection message?  \nOn 28/08/2013, at 6:12 AM, haitaoli notifications@github.com wrote:\n\nThank you. Yes, it's probably new. We have other apps linking to the same libraries and they passed multiple reviews without issues.\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks! It sounds like an automatic message, so it must be a rule now. The funny thing they approved one of my apps with linked Storekit but without any IAPs a few minutes before your message.\n\nOn 28/08/2013, at 8:49 AM, haitaoli notifications@github.com wrote:\n\nRejection message:\nMissing IAPs\nWe are unable to complete the review of your app since one or more of your In App Purchases have not been submitted for review.\nIf you do not wish to use In App Purchases at this time, please remove the In App Purchases frameworks.\nPlease be sure to take action and submit your In App Purchases AND upload a new binary in iTunes Connect. Learn more about submitting In App Purchases for review in the iTunes Connect Developer Guide.\nOnce you've submitted your In App Purchases and uploaded a new binary, we can proceed with your review.Note: Apps that offer In-App Purchase products that must be restorable are required to include a \"Restore\" feature. The following In-App Purchase types must be restorable:\nnon-consumable products\nauto-renewing subscriptions\nfree subscriptions\nFor more information, please see the section, Restoring Transactions, in the In-App Purchase Programming Guide.\n\u2014\nReply to this email directly or view it on GitHub.\n. I totally agree. I think it was a very very important feature. If iRate never prompts a satisfied user again that is not good.\nIt would have been enough to make the default NO, or just leave it alone. \nWho cares what some random guy thinks? I will definitely add it back to my version.\n. I think it is very important feature. If it is missing it is a deal breaker for me and I will not update iRate beyond 1.8.3. I already looked at Appirater and apart from this issue iRate is far more advanced.\n\nI have thousands of ratings and reviews (the average is more than 4*) and I never seen a reviewer complaining about repeating review requests. It takes one tap to dismiss the request and it won\u2019t show up until the next update which could be in weeks or months. I would not call it as a great inconvenience. \nI have several reviewers who keep updating their reviews and star ratings \nThis switch could be made NO by default, so it would be totally up to the developer to opt in. So far I'm happy with 1.8.3. it still works great.\n. 1+\n. Any news on this?\n. ",
    "pilot34": "Oh, sorry! It's my fault. I found the problem, but didn't try to update my fork of iRate. I merge changes and it works without \"-fno-objc-arc\", thank you!\nBy the way, I can't really understand, how performSelectorOnMainThread can fix this problem. :)\nSorry, once more time. This lib has the best API among other same frameworks.\n. Oh, sorry! It's my fault. I found the problem, but didn't try to update my fork of iRate. I merge changes and it works without \"-fno-objc-arc\", thank you!\nBy the way, I can't really understand, how performSelectorOnMainThread can fix this problem. :)\nSorry, once more time. This lib has the best API among other same frameworks.\n. ",
    "theyonibomber": "+1\n. +1\n. ",
    "jostster": "I have promptAtLaunch set to NO but if I am not showing the prompt at launch then this won't work. I can do checking to see if the prompt should be displayed based on a setting but then I need to add that check everywhere I am wanting to display the prompt.\n. That should work.  Thanks\n. I think it depends on the reviewer, I have seen apps that ask users to rate it 5 stars so the developers feel loved enough to continue development.\n. I have promptAtLaunch set to NO but if I am not showing the prompt at launch then this won't work. I can do checking to see if the prompt should be displayed based on a setting but then I need to add that check everywhere I am wanting to display the prompt.\n. That should work.  Thanks\n. I think it depends on the reviewer, I have seen apps that ask users to rate it 5 stars so the developers feel loved enough to continue development.\n. ",
    "oleganza": "Oops, my bad. Did not notice that API.\n. Oops, my bad. Did not notice that API.\n. ",
    "jyap808": "Thanks mate!\n. Thanks mate!\n. ",
    "wkhatch": "Hi Nick,\nThe debug output was showing me the correct bundle and app id's, and the url it reports in the first debug line works if I run it in safari; I get the expected json back, etc. Confusing as to why it would then fail. \nYes, apps are in the app store.\nI did some more testing, and was eventually able to get it working by deriving the url, and setting that on the shared instance, and then NOT setting either the appID or the applicationBundleID. I'm doing all iRate customization in the app delegates' initialize method, as advised. I'm thinking I probably won't need to do any of this in the production build; I'm just trying to determine whether that's true or not. \nI didn't try using just the applicationID or the applicationBundleID; perhaps that would make a difference? Like I said, right now, using just the url works as expected. I'll try more permutations and get back to you with results. \nAlso, does the previewMode flag impact any of this? If so, how? It doesn't seem to using just the url; the only thing it does seem to affect is the count tracking; it'll present the prompt always, etc. \nThanks for getting back so quick. Your library's quite useful; thanks for sharing it with us. \n. Sure, no worries. Just habit to not post them, really. As the initialize method currently is:\n```\n+(void)initialize\n{\n    DLog(@\"Config rating, iRate\");\n[iRate sharedInstance].previewMode = NO;\n[iRate sharedInstance].promptAtLaunch = NO;\n[iRate sharedInstance].onlyPromptIfLatestVersion = YES;\n[iRate sharedInstance].promptAgainForEachNewVersion = YES;\n\n//    [iRate sharedInstance].verboseLogging = NO;\n    [iRate sharedInstance].daysUntilPrompt = 1;\n    [iRate sharedInstance].usesUntilPrompt = 3;\n    [iRate sharedInstance].eventsUntilPrompt = 4;\n    [iRate sharedInstance].remindPeriod = 5.0;\nint appID;\nNSString *bundleID = nil;\nNSString *ratingURL = nil;\nNSString *appTitle = nil;\n\nifdef TARGET_NAME_Doddle\nappID = 365398792;\nbundleID = @\"com.doddleme.Doddle\";\nappTitle = @\"Doddle\";\n//@\"itms-apps://ax.itunes.apple.com/WebObjects/MZStore.woa/wa/viewContentsUserReviews?type=Purple+Software&id=0\"\n//ratingURL = [NSString stringWithFormat:@\"https://userpub.itunes.apple.com/WebObjects/MZUserPublishing.woa/wa/addUserReview?id=%d&type=Purple+Software\", appID];\nratingURL = [NSString stringWithFormat:@\"itms-apps://ax.itunes.apple.com/WebObjects/MZStore.woa/wa/viewContentsUserReviews?type=Purple+Software&id=%d\", appID];\n\nendif\nifdef TARGET_NAME_DoddlePro\nappTitle = @\"DoddlePro\";\nappID = 414031608;\nbundleID = @\"com.doddleme.DoddlePro\";\n//ratingURL = [NSString stringWithFormat:@\"https://userpub.itunes.apple.com/WebObjects/MZUserPublishing.woa/wa/addUserReview?id=%d&type=Purple+Software\", appID];\nratingURL = [NSString stringWithFormat:@\"itms-apps://ax.itunes.apple.com/WebObjects/MZStore.woa/wa/viewContentsUserReviews?type=Purple+Software&id=%d\", appID];\n\nendif\n[iRate sharedInstance].ratingsURL = [NSURL URLWithString:ratingURL];\n//[iRate sharedInstance].applicationBundleID = bundleID;\n//[iRate sharedInstance].appStoreID = appID;\n[iRate sharedInstance].message = nil;\n[iRate sharedInstance].messageTitle = [NSString stringWithFormat:@\"Please Rate %@\", appTitle];\n[iRate sharedInstance].cancelButtonLabel = @\"No, thanks\";\n[iRate sharedInstance].rateButtonLabel = @\"Yes\";\n[iRate sharedInstance].remindButtonLabel = @\"Remind Me Later\";\n\n}\n```\n. ok, to distill, use appbundleid, by itself. Does that have to be set, or does it normally obtain it from the plist? I'm still setting it, even for release build. \nI don't need to use the url. \nYep, message can't be nil after all\nConfirmed this works after all changes\nThanks for the comments, too. \n. Sorry, hate to be such a pest, but I'm having issues with the usesUntilPrompt and eventsUntilPrompt. Current, relevant config lines:\n[iRate sharedInstance].daysUntilPrompt = 0.0;\n[iRate sharedInstance].usesUntilPrompt = 1;\n[iRate sharedInstance].eventsUntilPrompt = 2;\n[iRate sharedInstance].remindPeriod = 5.0;\nIndicating that I'd like iRate to prompt on first use, after having recorded two log events. Here's the code for that:\nif (!self.isFromCallSheet) {\n    DLog(@\"Prior to iRate logging event, we have %d number of recorded log events, and %d number of uses\", [iRate sharedInstance].eventCount, [iRate sharedInstance].usesCount);\n    [[iRate sharedInstance] logEvent:NO];\n    if ([[iRate sharedInstance] shouldPromptForRating]) {\n        DLog(@\"After recording one, and prior to prompt, we have %d number of recorded log events, and %d number of uses\", [iRate sharedInstance].eventCount, [iRate sharedInstance].usesCount);\n        [[iRate sharedInstance] promptIfNetworkAvailable];\n    }\n}\nIt prompts on the very first event, indicated by this log output:\n2012-10-05 10:46:01.001 DoddlePro[12579:907] -[ContactUnifiedViewController setupView] Prior to iRate logging event, we have 0 number of recorded log events, and 1 number of uses\n2012-10-05 10:46:01.150 DoddlePro[12579:907] -[ContactUnifiedViewController setupView] After recording one, and prior to prompt, we have 1 number of recorded log events, and 1 number of uses\nSo, the shouldPromptForRating is incorrectly returning YES\nUpdate: sorry for being so dense. I looked at the comments on the eventsUntilPrompt again, and now it makes sense. I changed my usesUntilPrompt to 2, and now I get the behavior I'm looking for. Thought I might leave this in in case it helps somebody else; I'll leave it to you to wack it if you feel it's not appropriate. Thanks again for all your assistance, Nick. \n. Hi Nick,\nThe debug output was showing me the correct bundle and app id's, and the url it reports in the first debug line works if I run it in safari; I get the expected json back, etc. Confusing as to why it would then fail. \nYes, apps are in the app store.\nI did some more testing, and was eventually able to get it working by deriving the url, and setting that on the shared instance, and then NOT setting either the appID or the applicationBundleID. I'm doing all iRate customization in the app delegates' initialize method, as advised. I'm thinking I probably won't need to do any of this in the production build; I'm just trying to determine whether that's true or not. \nI didn't try using just the applicationID or the applicationBundleID; perhaps that would make a difference? Like I said, right now, using just the url works as expected. I'll try more permutations and get back to you with results. \nAlso, does the previewMode flag impact any of this? If so, how? It doesn't seem to using just the url; the only thing it does seem to affect is the count tracking; it'll present the prompt always, etc. \nThanks for getting back so quick. Your library's quite useful; thanks for sharing it with us. \n. Sure, no worries. Just habit to not post them, really. As the initialize method currently is:\n```\n+(void)initialize\n{\n    DLog(@\"Config rating, iRate\");\n[iRate sharedInstance].previewMode = NO;\n[iRate sharedInstance].promptAtLaunch = NO;\n[iRate sharedInstance].onlyPromptIfLatestVersion = YES;\n[iRate sharedInstance].promptAgainForEachNewVersion = YES;\n\n//    [iRate sharedInstance].verboseLogging = NO;\n    [iRate sharedInstance].daysUntilPrompt = 1;\n    [iRate sharedInstance].usesUntilPrompt = 3;\n    [iRate sharedInstance].eventsUntilPrompt = 4;\n    [iRate sharedInstance].remindPeriod = 5.0;\nint appID;\nNSString *bundleID = nil;\nNSString *ratingURL = nil;\nNSString *appTitle = nil;\n\nifdef TARGET_NAME_Doddle\nappID = 365398792;\nbundleID = @\"com.doddleme.Doddle\";\nappTitle = @\"Doddle\";\n//@\"itms-apps://ax.itunes.apple.com/WebObjects/MZStore.woa/wa/viewContentsUserReviews?type=Purple+Software&id=0\"\n//ratingURL = [NSString stringWithFormat:@\"https://userpub.itunes.apple.com/WebObjects/MZUserPublishing.woa/wa/addUserReview?id=%d&type=Purple+Software\", appID];\nratingURL = [NSString stringWithFormat:@\"itms-apps://ax.itunes.apple.com/WebObjects/MZStore.woa/wa/viewContentsUserReviews?type=Purple+Software&id=%d\", appID];\n\nendif\nifdef TARGET_NAME_DoddlePro\nappTitle = @\"DoddlePro\";\nappID = 414031608;\nbundleID = @\"com.doddleme.DoddlePro\";\n//ratingURL = [NSString stringWithFormat:@\"https://userpub.itunes.apple.com/WebObjects/MZUserPublishing.woa/wa/addUserReview?id=%d&type=Purple+Software\", appID];\nratingURL = [NSString stringWithFormat:@\"itms-apps://ax.itunes.apple.com/WebObjects/MZStore.woa/wa/viewContentsUserReviews?type=Purple+Software&id=%d\", appID];\n\nendif\n[iRate sharedInstance].ratingsURL = [NSURL URLWithString:ratingURL];\n//[iRate sharedInstance].applicationBundleID = bundleID;\n//[iRate sharedInstance].appStoreID = appID;\n[iRate sharedInstance].message = nil;\n[iRate sharedInstance].messageTitle = [NSString stringWithFormat:@\"Please Rate %@\", appTitle];\n[iRate sharedInstance].cancelButtonLabel = @\"No, thanks\";\n[iRate sharedInstance].rateButtonLabel = @\"Yes\";\n[iRate sharedInstance].remindButtonLabel = @\"Remind Me Later\";\n\n}\n```\n. ok, to distill, use appbundleid, by itself. Does that have to be set, or does it normally obtain it from the plist? I'm still setting it, even for release build. \nI don't need to use the url. \nYep, message can't be nil after all\nConfirmed this works after all changes\nThanks for the comments, too. \n. Sorry, hate to be such a pest, but I'm having issues with the usesUntilPrompt and eventsUntilPrompt. Current, relevant config lines:\n[iRate sharedInstance].daysUntilPrompt = 0.0;\n[iRate sharedInstance].usesUntilPrompt = 1;\n[iRate sharedInstance].eventsUntilPrompt = 2;\n[iRate sharedInstance].remindPeriod = 5.0;\nIndicating that I'd like iRate to prompt on first use, after having recorded two log events. Here's the code for that:\nif (!self.isFromCallSheet) {\n    DLog(@\"Prior to iRate logging event, we have %d number of recorded log events, and %d number of uses\", [iRate sharedInstance].eventCount, [iRate sharedInstance].usesCount);\n    [[iRate sharedInstance] logEvent:NO];\n    if ([[iRate sharedInstance] shouldPromptForRating]) {\n        DLog(@\"After recording one, and prior to prompt, we have %d number of recorded log events, and %d number of uses\", [iRate sharedInstance].eventCount, [iRate sharedInstance].usesCount);\n        [[iRate sharedInstance] promptIfNetworkAvailable];\n    }\n}\nIt prompts on the very first event, indicated by this log output:\n2012-10-05 10:46:01.001 DoddlePro[12579:907] -[ContactUnifiedViewController setupView] Prior to iRate logging event, we have 0 number of recorded log events, and 1 number of uses\n2012-10-05 10:46:01.150 DoddlePro[12579:907] -[ContactUnifiedViewController setupView] After recording one, and prior to prompt, we have 1 number of recorded log events, and 1 number of uses\nSo, the shouldPromptForRating is incorrectly returning YES\nUpdate: sorry for being so dense. I looked at the comments on the eventsUntilPrompt again, and now it makes sense. I changed my usesUntilPrompt to 2, and now I get the behavior I'm looking for. Thought I might leave this in in case it helps somebody else; I'll leave it to you to wack it if you feel it's not appropriate. Thanks again for all your assistance, Nick. \n. ",
    "monchote": "Cool. I recently started using iRate in my app Achording Tabs and it's great but my friends and family from Spain and Argentina were a big thrown off by the message in Spanish so I edited and thought it would be good to share it back with you. Keep up the good work!\n. Cool. I recently started using iRate in my app Achording Tabs and it's great but my friends and family from Spain and Argentina were a big thrown off by the message in Spanish so I edited and thought it would be good to share it back with you. Keep up the good work!\n. ",
    "jvichub": "Forgot to mention, the iRate.bundle is in the 'copy resources' of the project.\n. just for testing, i replaced the current 'localizedStringForKey' method with this older implementation:\n``` objectivec\n- (NSString )localizedStringForKey:(NSString )key withDefault:(NSString )defaultString\n{\n    static NSBundle bundle = nil;\n    if (bundle == nil)\n    {\n        //get localisation bundle\n        NSString *bundlePath = [[NSBundle mainBundle] pathForResource:@\"iRate\" ofType:@\"bundle\"];\n        bundle = [NSBundle bundleWithPath:bundlePath] ?: [NSBundle mainBundle];\n    //get correct lproj folder as this doesn't always happen automatically\n    for (NSString *language in [NSLocale preferredLanguages])\n    {\n        if ([[bundle localizations] containsObject:language])\n        {\n            bundlePath = [bundle pathForResource:language ofType:@\"lproj\"];\n            bundle = [NSBundle bundleWithPath:bundlePath];\n            break;\n        }\n    }\n\n    //retain bundle\n    bundle = [bundle ah_retain];\n}\n\n//return localised string\nreturn [bundle localizedStringForKey:key value:nil table:nil];\n\n}\n```\nAnd it works, even though it's ignoring the defaultString.\nI suppose there's a bug somewhere in the current implementation, but i don't know where exactly.\n. I had not.\nI thought that was only required if i wanted to add/customize the localizations in the iRate bundle.\nI've now added an empty Localization.strings, but i can't find the place where i'm supposed to select the supported languages (and do i have to manually add each of the languages supported by iRate? that doesn't seem to make sense to me).\nIn the Project->Info i just get the info that's in the app bundle. Is it there that i should edit?\nI've read some people saying i should click on the Localization.strings, file inspector, and click on the \"+\" in the Localization, but there's no \"+\" in this version of Xcode (4.5). And it only let me add English as language.\n. Ah yes, just found the right Info tab and it's working. Thank you for your help.\nYes i would like to localize my project, but not now, and i certainly wouldn't be able to localize it now to the many languages iRate supports. I think it's a bit of a hassle that iRate depends on that, but that's just my opinion.\n. And i think, but i'm not sure, that iTunes will show to users that my project is localized to all those languages even though it's not, it's just iRate. But i'm not sure.\nI don't know, i'm thinking about keeping locally the old implementation.\n. Really? I don't think it's odd at all. But maybe i'm wrong, i'll think about it for while.\nFor me it's like: there's the app, and there's iRate. As if iRate was a separate thing, almost like a native iOS dialog. The app can be english-only, but iOS is localized, and that's how iRate presents itself. It even looks like a native dialog.\nAnd between connecting with the users in their own native language -- despite the app's english-only --, and being consistent about the language used, i think connecting with the users is more important.\n. I agree the old solution is more hack-ish. But what you get in the end is much better. I thought about it a little and i definitely think it was better before.\nThere are many examples of mixed languages in interfaces: if the app uses twitter/facebook sharing from iOS, it's going to appear localized. If it uses iOS stock buttons, they're going to appear localized. No matter what language the app is showing.\nSo basically, iRate should use whatever iOS is using. But i guess there's no API for that, and in that case, the old implementation at least gave the same results as if there was one API.\n. Sure. I must say the project, as it is, is really great.\nJust thought i'd give my 2 cents about this new localization thing.\n. That worked great. Thanks, man.\n. nevermind, i obviously made the stupid mistake of releasing a version with the debug flag set.\n. Forgot to mention, the iRate.bundle is in the 'copy resources' of the project.\n. just for testing, i replaced the current 'localizedStringForKey' method with this older implementation:\n``` objectivec\n- (NSString )localizedStringForKey:(NSString )key withDefault:(NSString )defaultString\n{\n    static NSBundle bundle = nil;\n    if (bundle == nil)\n    {\n        //get localisation bundle\n        NSString *bundlePath = [[NSBundle mainBundle] pathForResource:@\"iRate\" ofType:@\"bundle\"];\n        bundle = [NSBundle bundleWithPath:bundlePath] ?: [NSBundle mainBundle];\n    //get correct lproj folder as this doesn't always happen automatically\n    for (NSString *language in [NSLocale preferredLanguages])\n    {\n        if ([[bundle localizations] containsObject:language])\n        {\n            bundlePath = [bundle pathForResource:language ofType:@\"lproj\"];\n            bundle = [NSBundle bundleWithPath:bundlePath];\n            break;\n        }\n    }\n\n    //retain bundle\n    bundle = [bundle ah_retain];\n}\n\n//return localised string\nreturn [bundle localizedStringForKey:key value:nil table:nil];\n\n}\n```\nAnd it works, even though it's ignoring the defaultString.\nI suppose there's a bug somewhere in the current implementation, but i don't know where exactly.\n. I had not.\nI thought that was only required if i wanted to add/customize the localizations in the iRate bundle.\nI've now added an empty Localization.strings, but i can't find the place where i'm supposed to select the supported languages (and do i have to manually add each of the languages supported by iRate? that doesn't seem to make sense to me).\nIn the Project->Info i just get the info that's in the app bundle. Is it there that i should edit?\nI've read some people saying i should click on the Localization.strings, file inspector, and click on the \"+\" in the Localization, but there's no \"+\" in this version of Xcode (4.5). And it only let me add English as language.\n. Ah yes, just found the right Info tab and it's working. Thank you for your help.\nYes i would like to localize my project, but not now, and i certainly wouldn't be able to localize it now to the many languages iRate supports. I think it's a bit of a hassle that iRate depends on that, but that's just my opinion.\n. And i think, but i'm not sure, that iTunes will show to users that my project is localized to all those languages even though it's not, it's just iRate. But i'm not sure.\nI don't know, i'm thinking about keeping locally the old implementation.\n. Really? I don't think it's odd at all. But maybe i'm wrong, i'll think about it for while.\nFor me it's like: there's the app, and there's iRate. As if iRate was a separate thing, almost like a native iOS dialog. The app can be english-only, but iOS is localized, and that's how iRate presents itself. It even looks like a native dialog.\nAnd between connecting with the users in their own native language -- despite the app's english-only --, and being consistent about the language used, i think connecting with the users is more important.\n. I agree the old solution is more hack-ish. But what you get in the end is much better. I thought about it a little and i definitely think it was better before.\nThere are many examples of mixed languages in interfaces: if the app uses twitter/facebook sharing from iOS, it's going to appear localized. If it uses iOS stock buttons, they're going to appear localized. No matter what language the app is showing.\nSo basically, iRate should use whatever iOS is using. But i guess there's no API for that, and in that case, the old implementation at least gave the same results as if there was one API.\n. Sure. I must say the project, as it is, is really great.\nJust thought i'd give my 2 cents about this new localization thing.\n. That worked great. Thanks, man.\n. nevermind, i obviously made the stupid mistake of releasing a version with the debug flag set.\n. ",
    "dayjer": "Ahhh...\n\"however once the day threshold is reached, the prompt will appear if EITHER the event threshold OR uses threshold is reached.\"\n. Ahhh...\n\"however once the day threshold is reached, the prompt will appear if EITHER the event threshold OR uses threshold is reached.\"\n. ",
    "Koshyk": "Because in my env there is continuous integration server (Hudson) which still uses old version of Xcode (it will  be upgraded but now is older version)\n. ok, thanks\n. Because in my env there is continuous integration server (Hudson) which still uses old version of Xcode (it will  be upgraded but now is older version)\n. ok, thanks\n. ",
    "reydanro": "This is the irate console output:\niRate is checking http://itunes.apple.com/US/lookup?bundleId=com.niwali.breinst to retrieve the App Store details...\niRate found the app on iTunes. The App Store ID is 565103521\nAnd when I click on \"Rate Now\", I get:\niRate will open the App Store ratings page using the following URL: itms-apps://ax.itunes.apple.com/WebObjects/MZStore.woa/wa/viewContentsUserReviews?type=Purple+Software&id=565103521\n. :). Thanks. I will try this right now.\n. Fixed\n. This is the irate console output:\niRate is checking http://itunes.apple.com/US/lookup?bundleId=com.niwali.breinst to retrieve the App Store details...\niRate found the app on iTunes. The App Store ID is 565103521\nAnd when I click on \"Rate Now\", I get:\niRate will open the App Store ratings page using the following URL: itms-apps://ax.itunes.apple.com/WebObjects/MZStore.woa/wa/viewContentsUserReviews?type=Purple+Software&id=565103521\n. :). Thanks. I will try this right now.\n. Fixed\n. ",
    "x2on": "But you can't get directly to the review page, or?\n. I couldn't agree with your opinion.\nWe have some big apps here and do not have any negative impact with these feature.\nAnd we had many updates in the last time.\nWhy do not have this feature with a standard set to NO?\nAnd if is set to YES it shouldn't ask if the user has said \"No thanks\" in any version?\nBut if he rates ask him again in an new version.\nIf he doesn't like to rate again he could then say \"No thanks\".\n. Yes please add it again. At the moment we are stuck at 1.8.3\n. @nicklockwood did you think about it?\n. @nicklockwood could you please give us an update? thanks\n. Thats a good idea - i will try that :)\n. @adamdehaven The property is readonly :(\nobjective-c\n@property (nonatomic, readonly) BOOL declinedAnyVersion\n. @nicklockwood ah ok i didn't saw that. So i use this code now:\nobjective-c\n- (void)iRateDidDetectAppUpdate\n{\n    [iRate sharedInstance].declinedThisVersion = NO;\n}\nThanks for that hint.\n. @adamdehaven with the standard implementation the user is never asked again. That's why i reset the declinedThisVersion property in the delegate.\n. :+1: please update the spec!\n. Thanks for adding!\n. :+1: \n. But you can't get directly to the review page, or?\n. I couldn't agree with your opinion.\nWe have some big apps here and do not have any negative impact with these feature.\nAnd we had many updates in the last time.\nWhy do not have this feature with a standard set to NO?\nAnd if is set to YES it shouldn't ask if the user has said \"No thanks\" in any version?\nBut if he rates ask him again in an new version.\nIf he doesn't like to rate again he could then say \"No thanks\".\n. Yes please add it again. At the moment we are stuck at 1.8.3\n. @nicklockwood did you think about it?\n. @nicklockwood could you please give us an update? thanks\n. Thats a good idea - i will try that :)\n. @adamdehaven The property is readonly :(\nobjective-c\n@property (nonatomic, readonly) BOOL declinedAnyVersion\n. @nicklockwood ah ok i didn't saw that. So i use this code now:\nobjective-c\n- (void)iRateDidDetectAppUpdate\n{\n    [iRate sharedInstance].declinedThisVersion = NO;\n}\nThanks for that hint.\n. @adamdehaven with the standard implementation the user is never asked again. That's why i reset the declinedThisVersion property in the delegate.\n. :+1: please update the spec!\n. Thanks for adding!\n. :+1: \n. ",
    "tfonfara": "No, only the detail page is available I think...\n. Thank you! As workaround you could show an alertview in the presentViewController completion block like in \"Newsify\" app: http://imageshack.us/photo/my-images/72/img0441.png/\n. No, only the detail page is available I think...\n. Thank you! As workaround you could show an alertview in the presentViewController completion block like in \"Newsify\" app: http://imageshack.us/photo/my-images/72/img0441.png/\n. ",
    "R3TRI8UTI0N": "Did you make sure to add\n```\nimport \"iRate.h\"\n```\nto your AppDelegate.m?\nSo your AppDelegate.m should look similar to:\n```\nimport \"AppDelegate.h\"\nimport \"iRate.h\"\n@implementation AppDelegate\n\n(void)initialize\n{\n    //configure iRate\n    [iRate sharedInstance].daysUntilPrompt = 5;\n    [iRate sharedInstance].usesUntilPrompt = 15;\n    [iRate sharedInstance].previewMode = NO;\n}\n```\n. No I believe there is no setting for uses. However, this is the setting for days (in case you didn't know the setting), as you mentioned.\n\n[iRate sharedInstance].remindPeriod = 10;\nI suggest being able to remind after uses should be added as a new feature.\n. Did you make sure to add\n```\nimport \"iRate.h\"\n```\nto your AppDelegate.m?\nSo your AppDelegate.m should look similar to:\n```\nimport \"AppDelegate.h\"\nimport \"iRate.h\"\n@implementation AppDelegate\n\n(void)initialize\n{\n    //configure iRate\n    [iRate sharedInstance].daysUntilPrompt = 5;\n    [iRate sharedInstance].usesUntilPrompt = 15;\n    [iRate sharedInstance].previewMode = NO;\n}\n```\n. No I believe there is no setting for uses. However, this is the setting for days (in case you didn't know the setting), as you mentioned.\n\n[iRate sharedInstance].remindPeriod = 10;\nI suggest being able to remind after uses should be added as a new feature.\n. ",
    "espoirmsk": "Well, I'll have to try using delegate to achieve that then... \n. Well, I'll have to try using delegate to achieve that then... \n. ",
    "moleksyuk": "I had to use @nonamelive's fix which works fine for me in modal view. But it would be great to support iRate.openRatingsPageInAppStore from modal view.\n. @talyaniv the latest released via cocoapods is 1.7.5. It doesn't contain this fix.\nSo, if you are blocked on this. Remove iRate from your pod file and download the latest from trunk and integrate directly to your project.\n(I did this on Saturday to submit my app to review and didn't receive any warnings)\n. @nicklockwood I see thanks.\nWhen will you plan to release 1.8 via cocoapods?\n. What I've already done :smile: \n. @sammio2 I have similar issue with Tweetbot app and find way why it happens.\nLet's suppose you have app that supports en & fr localizations.\n1. Run app with en localization - app will use correct localization as it's supported.\n2. Switch iPhone language to fr - app will use correct localization as it's supported..\n3.Switch iPhone to any not supported language - app will use the last (in our example fr) used supported language.\nSo to get worked en localization for en-GB you should switch iPhone to en localization first and then switch to en-GB and you'll get english text.\nTry to check this scenario. If it's reproducible for your then it's not iRate bug, it's Apple's feature :smile: \n. I had to use @nonamelive's fix which works fine for me in modal view. But it would be great to support iRate.openRatingsPageInAppStore from modal view.\n. @talyaniv the latest released via cocoapods is 1.7.5. It doesn't contain this fix.\nSo, if you are blocked on this. Remove iRate from your pod file and download the latest from trunk and integrate directly to your project.\n(I did this on Saturday to submit my app to review and didn't receive any warnings)\n. @nicklockwood I see thanks.\nWhen will you plan to release 1.8 via cocoapods?\n. What I've already done :smile: \n. @sammio2 I have similar issue with Tweetbot app and find way why it happens.\nLet's suppose you have app that supports en & fr localizations.\n1. Run app with en localization - app will use correct localization as it's supported.\n2. Switch iPhone language to fr - app will use correct localization as it's supported..\n3.Switch iPhone to any not supported language - app will use the last (in our example fr) used supported language.\nSo to get worked en localization for en-GB you should switch iPhone to en localization first and then switch to en-GB and you'll get english text.\nTry to check this scenario. If it's reproducible for your then it's not iRate bug, it's Apple's feature :smile: \n. ",
    "RepublicOfAppsLLC": "It looks like this was fixed in iRate version 1.7 right?\n. It looks like this was fixed in iRate version 1.7 right?\n. ",
    "lono175": "Sorry didn't catch you earlier. Apple fixed it in XCode 4.6.\n. Sorry didn't catch you earlier. Apple fixed it in XCode 4.6.\n. ",
    "aaronbarsky": "I know, it's a bit scary. \nFrom the docs:\n\"[NSObject load] is called whenever a class is added to the Objective-C runtime\".\niRate's load function calls the [sharedInstance] method on the main thread and that's enough to set iRate in motion.  You don't even need to include iRate.h anywhere.  The iRate class is added to the runtime by compiling iRate.m into the project.\nThis is easily verified by setting a breakpoint in the iRate init code.\nBut maybe this is a bit fancy, and recommending [iRate sharedInstance].previewMode = NO as the minimal configuration would be a bit less nervewracking.\n. I know, it's a bit scary. \nFrom the docs:\n\"[NSObject load] is called whenever a class is added to the Objective-C runtime\".\niRate's load function calls the [sharedInstance] method on the main thread and that's enough to set iRate in motion.  You don't even need to include iRate.h anywhere.  The iRate class is added to the runtime by compiling iRate.m into the project.\nThis is easily verified by setting a breakpoint in the iRate init code.\nBut maybe this is a bit fancy, and recommending [iRate sharedInstance].previewMode = NO as the minimal configuration would be a bit less nervewracking.\n. ",
    "carlandrews": "I installed iRate into my App as in the example and get these 2 errors?  Thanks!\n\n(null): \"OBJC_CLASS$_iRate\", referenced from:\n(null): Linker command failed with exit code 1 (use -v to see invocation)\n. You were correct but now I have another 3 errors. Is this because I am using it on an AdHoc beta copy of an App update I am wiring on and not a release version?\n\n. Did that and just did it again now but same 3 errors and 1 warning:\nOn Jan 13, 2013, at 10:24 AM, ddaddy wrote:\n\nLooks like you dont have all the necessary files linked properly.\nThe easiest way is delete it from your project, then re-add it but make sure you tick the box in \"Add to target\"\n\u2014\nReply to this email directly or view it on GitHub.\n\n. BTW the previous version of iRate that I had, in this same app, was 1.4 and did not get these errors?\n\nOn Jan 13, 2013, at 10:24 AM, ddaddy wrote:\n\nLooks like you dont have all the necessary files linked properly.\nThe easiest way is delete it from your project, then re-add it but make sure you tick the box in \"Add to target\"\n\u2014\nReply to this email directly or view it on GitHub.\n. I just put 1.4.2 into my App and no errors tried again with the newest version and got the 3 errors?\n. That was it, thank you!\n. I installed iRate into my App as in the example and get these 2 errors?  Thanks!\n\n\n(null): \"OBJC_CLASS$_iRate\", referenced from:\n(null): Linker command failed with exit code 1 (use -v to see invocation)\n. You were correct but now I have another 3 errors. Is this because I am using it on an AdHoc beta copy of an App update I am wiring on and not a release version?\n\n. Did that and just did it again now but same 3 errors and 1 warning:\nOn Jan 13, 2013, at 10:24 AM, ddaddy wrote:\n\nLooks like you dont have all the necessary files linked properly.\nThe easiest way is delete it from your project, then re-add it but make sure you tick the box in \"Add to target\"\n\u2014\nReply to this email directly or view it on GitHub.\n\n. BTW the previous version of iRate that I had, in this same app, was 1.4 and did not get these errors?\n\nOn Jan 13, 2013, at 10:24 AM, ddaddy wrote:\n\nLooks like you dont have all the necessary files linked properly.\nThe easiest way is delete it from your project, then re-add it but make sure you tick the box in \"Add to target\"\n\u2014\nReply to this email directly or view it on GitHub.\n. I just put 1.4.2 into my App and no errors tried again with the newest version and got the 3 errors?\n. That was it, thank you!\n. \n",
    "schwa": "Says the spammer.\n. Says the spammer.\n. ",
    "baz": "Yeah my subclass just overrides shouldPromptForRating so it's entirely possible for me to use the delegate as an alternative.  Was just easier in this particular instance to subclass and I initially thought it was an option because I read the header and saw the comment \"manually control behaviour\" alongside the exposed method signatures.\nSo yeah I'll switch to using a delegate.\nAs an aside, here's what was happening.  iRate always loads before any subclass (from the docs: \"A class\u2019s +load method is called after all of its superclasses\u2019 +load methods\") and the call to performSelectorOnMainThread:withObject:waitUntilDone: was delaying iRate's creation of the sharedInstance until the end of the run loop.  It just so happens that I was calling sharedInstance of my subclass in +initialize of my app delegate and it was winning out everytime.  A perfect storm.\n. Yeah my subclass just overrides shouldPromptForRating so it's entirely possible for me to use the delegate as an alternative.  Was just easier in this particular instance to subclass and I initially thought it was an option because I read the header and saw the comment \"manually control behaviour\" alongside the exposed method signatures.\nSo yeah I'll switch to using a delegate.\nAs an aside, here's what was happening.  iRate always loads before any subclass (from the docs: \"A class\u2019s +load method is called after all of its superclasses\u2019 +load methods\") and the call to performSelectorOnMainThread:withObject:waitUntilDone: was delaying iRate's creation of the sharedInstance until the end of the run loop.  It just so happens that I was calling sharedInstance of my subclass in +initialize of my app delegate and it was winning out everytime.  A perfect storm.\n. ",
    "fiam": "Hi Nick,\nI understand your rationale, but please keep in mind that there are very valid reasons to support manual memory management (and saying it's crazy just shows a deep lack of understanding).\nIn our case, we're using iRate as part of our internal library which we use across all our applications. Since some of them haven't been ported to ARC yet (and some of them probably never will), enabling ARC for iRate.m in all of them would be a lot of work, because you have to do that manually for every target in every project. By adding support for building without ARC we can continue updating our internal library automatically without requiring manual changes to every project which uses it.\nI'm also sure that there are still lots of iRate users which haven't had the opportunity or the interest (porting a \"finished\" app which is only on maintenance mode to ARC requires significant work in exchange for, literally, zero benefits) to port their code to ARC, but would like to use newer versions of iRate. By removing support for non-ARC you're preventing those users from upgrading. In the case of complex code bases - where keeping the source code both ARC and non-ARC compatible requires lots of work -, I would understand dropping support for non-ARC, but iRate only requires 3 calls to release. It's not like the code is going to be \"less pure\" or \"dirty\" by doing manual memory management. In fact, there are already two calls to CFRelease() in a  very error-prone idiom in openAppPageWhenAppStoreLaunched() which could have been replaced by a bridge_transfer cast.\nIf would be nice if you could reconsider your decision to merge this patch.\nThanks,\nAlberto\n. Hi Nick,\nI understand your rationale, but please keep in mind that there are very valid reasons to support manual memory management (and saying it's crazy just shows a deep lack of understanding).\nIn our case, we're using iRate as part of our internal library which we use across all our applications. Since some of them haven't been ported to ARC yet (and some of them probably never will), enabling ARC for iRate.m in all of them would be a lot of work, because you have to do that manually for every target in every project. By adding support for building without ARC we can continue updating our internal library automatically without requiring manual changes to every project which uses it.\nI'm also sure that there are still lots of iRate users which haven't had the opportunity or the interest (porting a \"finished\" app which is only on maintenance mode to ARC requires significant work in exchange for, literally, zero benefits) to port their code to ARC, but would like to use newer versions of iRate. By removing support for non-ARC you're preventing those users from upgrading. In the case of complex code bases - where keeping the source code both ARC and non-ARC compatible requires lots of work -, I would understand dropping support for non-ARC, but iRate only requires 3 calls to release. It's not like the code is going to be \"less pure\" or \"dirty\" by doing manual memory management. In fact, there are already two calls to CFRelease() in a  very error-prone idiom in openAppPageWhenAppStoreLaunched() which could have been replaced by a bridge_transfer cast.\nIf would be nice if you could reconsider your decision to merge this patch.\nThanks,\nAlberto\n. ",
    "manirk": "I am new to using iRate in my app. I have few questions here\nI have to setup iRate on particular views after certain time user view results. Is there any such type of options are there .\nplease inform\n. I am new to using iRate in my app. I have few questions here\nI have to setup iRate on particular views after certain time user view results. Is there any such type of options are there .\nplease inform\n. ",
    "Drewsmits": "My app was rejected from the app store for mentioning that users should rate it 4 or 5 stars. Specifically, Apple believed a rating suggestion violates section 3.10 of Apple's App approval guidelines. So anything that actually inserts 5 stars will most certainly be rejected.\n. My app was rejected from the app store for mentioning that users should rate it 4 or 5 stars. Specifically, Apple believed a rating suggestion violates section 3.10 of Apple's App approval guidelines. So anything that actually inserts 5 stars will most certainly be rejected.\n. ",
    "fredericcormier": "Hum, also\n\"iRateRemindButton\" = \"Me le rappeler ult\u00e9rieurement\";\n. It should have the \"le\" added\n. Hum, also\n\"iRateRemindButton\" = \"Me le rappeler ult\u00e9rieurement\";\n. It should have the \"le\" added\n. ",
    "dalexsoto": "mmm... I dont think thats iRate fault since thats a native dialog\n. Just tested it on my 3gs/iphone 4 and it works ok\n. mmm... I dont think thats iRate fault since thats a native dialog\n. Just tested it on my 3gs/iphone 4 and it works ok\n. ",
    "mrblog": "FWIW, this still appears to be a problem on iPad (iOS 6.1.x on the device not just the simulator), but as noted, I guess it's an Apple problem and the work-around is to send the user to the App Store instead.\n. FWIW, this still appears to be a problem on iPad (iOS 6.1.x on the device not just the simulator), but as noted, I guess it's an Apple problem and the work-around is to send the user to the App Store instead.\n. ",
    "fashionprivate": "Excuse me! I just updated xcode to version 4.6.1 and now it's all right. I don't know why but before the iPad simulator displayed the app store with the size of iPhone. Now it's all right!\n. Excuse me! I just updated xcode to version 4.6.1 and now it's all right. I don't know why but before the iPad simulator displayed the app store with the size of iPhone. Now it's all right!\n. ",
    "IvanUshakov": "@nicklockwood, have you any news about this pull request?\n. But, this uncomfortable for other contributors.\n. You can see to #84 \n. @nicklockwood, have you any news about this pull request?\n. But, this uncomfortable for other contributors.\n. You can see to #84 \n. ",
    "yas375": "@nicklockwood and/or about other opened pull requests? ;) Thanks in advance.\n. @IvanUshakov thank for pointing me!\n@nicklockwood I think would be good at least to remove .DS_Store file from the repo...\n. @nicklockwood I've updated my commit and have force pushed it ;)\n. Hi @nicklockwood!\nSorry for disturbing, but any update on it?\nWhat do you think about merging in at least changes from m file? It only moves some logic into separate methods. So it makes code a little cleaner imo. And in this case I can just to make these methods public in my fork and not to worry each time on update of iRate if there were some updates in these parts :)\nPlease, let me know if you don't want change in h file here, but ok with changes in m file. I will update PR then.\nThanks in advance!\n. Have you tried to google particular errors you are getting? Usually it's not a problem. And answers to all the questions are easy to google ;)\nAlso I'd like to recommend you to use Cocoapods for adding libraries to your project. You can add iRate to your project with just one line in Podfile:\nruby\npod 'iRate'\nAnd then just rerun pod install.\n. And one more little note: please use more meaningful issue names in future ;) Thanks.\n. pod is not iPod. Please follow the link I've provided: http://cocoapods.org\n. @nicklockwood sorry for disturbing, but what to you think about the proposed code duplication cleanup? Maybe you would like to see other method names? Let me know and I'd be happy to rename them :)\nThanks.\n. @nicklockwood got it, thanks :)\n. @nicklockwood thank you!\n. @nicklockwood and/or about other opened pull requests? ;) Thanks in advance.\n. @IvanUshakov thank for pointing me!\n@nicklockwood I think would be good at least to remove .DS_Store file from the repo...\n. @nicklockwood I've updated my commit and have force pushed it ;)\n. Hi @nicklockwood!\nSorry for disturbing, but any update on it?\nWhat do you think about merging in at least changes from m file? It only moves some logic into separate methods. So it makes code a little cleaner imo. And in this case I can just to make these methods public in my fork and not to worry each time on update of iRate if there were some updates in these parts :)\nPlease, let me know if you don't want change in h file here, but ok with changes in m file. I will update PR then.\nThanks in advance!\n. Have you tried to google particular errors you are getting? Usually it's not a problem. And answers to all the questions are easy to google ;)\nAlso I'd like to recommend you to use Cocoapods for adding libraries to your project. You can add iRate to your project with just one line in Podfile:\nruby\npod 'iRate'\nAnd then just rerun pod install.\n. And one more little note: please use more meaningful issue names in future ;) Thanks.\n. pod is not iPod. Please follow the link I've provided: http://cocoapods.org\n. @nicklockwood sorry for disturbing, but what to you think about the proposed code duplication cleanup? Maybe you would like to see other method names? Let me know and I'd be happy to rename them :)\nThanks.\n. @nicklockwood got it, thanks :)\n. @nicklockwood thank you!\n. ",
    "GuyFran": "Oh yeah my bad.\nI set it up like this :\n[iRate sharedInstance].promptAtLaunch = NO;\n[iRate sharedInstance].onlyPromptIfLatestVersion = NO;\n[iRate sharedInstance].previewMode = NO;\nIt should be OK now I hope.\nThank you for the help\n. Oh yeah my bad.\nI set it up like this :\n[iRate sharedInstance].promptAtLaunch = NO;\n[iRate sharedInstance].onlyPromptIfLatestVersion = NO;\n[iRate sharedInstance].previewMode = NO;\nIt should be OK now I hope.\nThank you for the help\n. ",
    "Samback": "Thanks for such fast response.\n. Thanks for such fast response.\n. ",
    "aufflick": "Hi Nick, I replied directly to you on email to keep client project details out of the ticket.\n. Hi Nick, I replied directly to you on email to keep client project details out of the ticket.\n. ",
    "nickmalcolm": "I just imported the .m and .h files, so that wouldn't use your flags would it? The logic for this library is pretty simple, but still, ignoring warnings can lead to subtle bugs.\n. Oh, and I think these are the compile flags?\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -x objective-c -arch i386 -fmessage-length=0 -std=gnu99 -fobjc-arc -Wno-trigraphs -fpascal-strings -O0 -Werror -Werror=incompatible-pointer-types -Werror-implicit-function-declaration -Wmissing-field-initializers -Wmissing-prototypes -Wreturn-type -Wno-implicit-atomic-properties -Wno-receiver-is-weak -Wduplicate-method-match -Wformat -Wmissing-braces -Wparentheses -Wswitch -Wno-unused-function -Wno-unused-label -Wno-unused-parameter -Wunused-variable -Wunused-value -Wno-empty-body -Wuninitialized -Wunknown-pragmas -pedantic -Wshadow -Wno-four-char-constants -Wconversion -Wconstant-conversion -Wint-conversion -Wenum-conversion -Wshorten-64-to-32 -Wpointer-sign -Wno-newline-eof -Wno-selector -Wno-strict-selector-match -Wno-undeclared-selector -Wdeprecated-implementations -DDEBUG=1\n. Sure, if you're happy ignoring loss of precision and everything else that -Wall ignores, then close this request. Having to add casts because of a stricter compile flags might make for \"ugly\" code, but that is great, because it's smelly code. The real problem is calculating with floats and returning doubles, or whichever way around it is. Or returning an integer when your return type is a BOOL.\nThat link you provided suggests using -Wextra as well. Perhaps then you'd see some of the warnings above? Not sure.\nAnyway, feel free to close this request. It makes sense to choose something and stick to it. Besides, the code I submitted is by my own definition pretty smelly. Hopefully users who have the same issue will find this closed request in Google or something.\n. I just imported the .m and .h files, so that wouldn't use your flags would it? The logic for this library is pretty simple, but still, ignoring warnings can lead to subtle bugs.\n. Oh, and I think these are the compile flags?\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -x objective-c -arch i386 -fmessage-length=0 -std=gnu99 -fobjc-arc -Wno-trigraphs -fpascal-strings -O0 -Werror -Werror=incompatible-pointer-types -Werror-implicit-function-declaration -Wmissing-field-initializers -Wmissing-prototypes -Wreturn-type -Wno-implicit-atomic-properties -Wno-receiver-is-weak -Wduplicate-method-match -Wformat -Wmissing-braces -Wparentheses -Wswitch -Wno-unused-function -Wno-unused-label -Wno-unused-parameter -Wunused-variable -Wunused-value -Wno-empty-body -Wuninitialized -Wunknown-pragmas -pedantic -Wshadow -Wno-four-char-constants -Wconversion -Wconstant-conversion -Wint-conversion -Wenum-conversion -Wshorten-64-to-32 -Wpointer-sign -Wno-newline-eof -Wno-selector -Wno-strict-selector-match -Wno-undeclared-selector -Wdeprecated-implementations -DDEBUG=1\n. Sure, if you're happy ignoring loss of precision and everything else that -Wall ignores, then close this request. Having to add casts because of a stricter compile flags might make for \"ugly\" code, but that is great, because it's smelly code. The real problem is calculating with floats and returning doubles, or whichever way around it is. Or returning an integer when your return type is a BOOL.\nThat link you provided suggests using -Wextra as well. Perhaps then you'd see some of the warnings above? Not sure.\nAnyway, feel free to close this request. It makes sense to choose something and stick to it. Besides, the code I submitted is by my own definition pretty smelly. Hopefully users who have the same issue will find this closed request in Google or something.\n. ",
    "mpkeefe": "Oh boy, okay.   I had naively assumed it meant that it would automatically prompt at some point later.   I should have thought about that a little deeper I guess.\nSo, if I want to prompt explicitly from my own code, I should call [[iRate sharedInstance] promptForRating], right?\n- MpK -\nOn May 9, 2013, at 5:25 PM, Nick Lockwood notifications@github.com wrote:\n\nHi Mark, \nYou've set promptAtLaunch to NO, meaning that iRate won't display a prompt unless you specifically tell it to somewhere in your code. \nJust remove that setting and it should work fine. \nNick \nOn 9 May 2013, at 21:08, Mark Paul Keefe notifications@github.com wrote: \n\nHi Nick, \nI have no idea what I'm doing wrong, but for the life of me, I have never had iRate work except in preview mode. With previewMode on, it works fine every time. With previewMode off, I've never seen it work, and I've had it installed in my app for months. Do you have any suggestions, before I give up and try something else? \nHere is my setup code, from my App Delegate class implementation: \n- (void)initialize \n  { \n  if ([self class] == [MBAppDelegate class]) { \n  [self setupPreferences]; \n  } \n//configure iRate \n[iRate sharedInstance].daysUntilPrompt = 3; \n[iRate sharedInstance].usesUntilPrompt = 5; \n[iRate sharedInstance].remindPeriod = 2; \n[iRate sharedInstance].promptAtLaunch = NO; \n[iRate sharedInstance].previewMode = NO; \n// [iRate sharedInstance].previewMode = YES; // In production, this should be NO. \n... \n} \n\u0081\\ \nReply to this email directly or view it on GitHub. \n\u0081\\\nReply to this email directly or view it on GitHub.\n. Awesome, thanks Nick!\n. One more question.  If I were to add the code snippet above in multiple places, can I assume it will fire no more times than the settings specify.  In other words, it won't fire if it already has, since shouldPromptForRating should return NO.   Is that correct?\n. Oh boy, okay.   I had naively assumed it meant that it would automatically prompt at some point later.   I should have thought about that a little deeper I guess.\n\n\nSo, if I want to prompt explicitly from my own code, I should call [[iRate sharedInstance] promptForRating], right?\n- MpK -\nOn May 9, 2013, at 5:25 PM, Nick Lockwood notifications@github.com wrote:\n\nHi Mark, \nYou've set promptAtLaunch to NO, meaning that iRate won't display a prompt unless you specifically tell it to somewhere in your code. \nJust remove that setting and it should work fine. \nNick \nOn 9 May 2013, at 21:08, Mark Paul Keefe notifications@github.com wrote: \n\nHi Nick, \nI have no idea what I'm doing wrong, but for the life of me, I have never had iRate work except in preview mode. With previewMode on, it works fine every time. With previewMode off, I've never seen it work, and I've had it installed in my app for months. Do you have any suggestions, before I give up and try something else? \nHere is my setup code, from my App Delegate class implementation: \n- (void)initialize \n  { \n  if ([self class] == [MBAppDelegate class]) { \n  [self setupPreferences]; \n  } \n//configure iRate \n[iRate sharedInstance].daysUntilPrompt = 3; \n[iRate sharedInstance].usesUntilPrompt = 5; \n[iRate sharedInstance].remindPeriod = 2; \n[iRate sharedInstance].promptAtLaunch = NO; \n[iRate sharedInstance].previewMode = NO; \n// [iRate sharedInstance].previewMode = YES; // In production, this should be NO. \n... \n} \n\u0081\\ \nReply to this email directly or view it on GitHub. \n\u0081\\\nReply to this email directly or view it on GitHub.\n. Awesome, thanks Nick!\n. One more question.  If I were to add the code snippet above in multiple places, can I assume it will fire no more times than the settings specify.  In other words, it won't fire if it already has, since shouldPromptForRating should return NO.   Is that correct?\n. \n\n",
    "ghost": "The device is running on iOS6.1.3.\nIt is opening StoreKit as expected when I click on Yes, I want to rate when prompted. It is only when trying to write a review that it leaves the app to go to App Store. \n. It is happening in a live app. If it helps, the console log is telling me that iRateDidPromptForRating was fired when the \"Write A Review\" button in StoreKit was selected.\n. Same behavior happens with the sample app. It moves away from StoreKit to App Store upon selecting \"Write a Review\" or Developer Info. \n. ok. thank you!\n. @nicklockwood We're using iRate version 1.11.5, and still seeing NSURLConnection methods. Any ETA on removal of this deprecated method please?\n. The device is running on iOS6.1.3.\nIt is opening StoreKit as expected when I click on Yes, I want to rate when prompted. It is only when trying to write a review that it leaves the app to go to App Store. \n. It is happening in a live app. If it helps, the console log is telling me that iRateDidPromptForRating was fired when the \"Write A Review\" button in StoreKit was selected.\n. Same behavior happens with the sample app. It moves away from StoreKit to App Store upon selecting \"Write a Review\" or Developer Info. \n. ok. thank you!\n. @nicklockwood We're using iRate version 1.11.5, and still seeing NSURLConnection methods. Any ETA on removal of this deprecated method please?\n. ",
    "stanleyyyy": "The same here.. how to do it properly??\n. I have switched off the \"displayAppUsingStorekitIfAvailable\" property and now it goes directly to \"write review\" page. I guess for 6.1.3 this is the better option...\n. The same here.. how to do it properly??\n. I have switched off the \"displayAppUsingStorekitIfAvailable\" property and now it goes directly to \"write review\" page. I guess for 6.1.3 this is the better option...\n. ",
    "Diarrhio": "My apologies for not RTFM. Thanks for the prompt response\n. My apologies for not RTFM. Thanks for the prompt response\n. ",
    "cherpake": "Well i guess it's enhancement request rather than issue per se. I'm writing generic apps for different companies which makes setting appStoreID cumbersome for each and every one of them, and it's easily solved by fetching this id from the appstore.\nI guess i can fork this - and make the necessary changes, but i would like to suggest that iRate would pull this app id once and store it in the user defaults for further use.\nWould love to hear you thoughts on this .\n. Cool.\nThanks.\n. Nice ;-)\n-Evgeny\nSent from my iPhone\n\nOn 17 \u05d1\u05e1\u05e4\u05d8 2013, at 22:42, Nick Lockwood notifications@github.com wrote:\nJust an update - I've partially implemented this, in that the bundleID is saved in settings. I've not implemented prefetching of the bundle ID on first launch though.\n\u2014\nReply to this email directly or view it on GitHub.\n. Well i guess it's enhancement request rather than issue per se. I'm writing generic apps for different companies which makes setting appStoreID cumbersome for each and every one of them, and it's easily solved by fetching this id from the appstore.\n\nI guess i can fork this - and make the necessary changes, but i would like to suggest that iRate would pull this app id once and store it in the user defaults for further use.\nWould love to hear you thoughts on this .\n. Cool.\nThanks.\n. Nice ;-)\n-Evgeny\nSent from my iPhone\n\nOn 17 \u05d1\u05e1\u05e4\u05d8 2013, at 22:42, Nick Lockwood notifications@github.com wrote:\nJust an update - I've partially implemented this, in that the bundleID is saved in settings. I've not implemented prefetching of the bundle ID on first launch though.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "blackfrog": "Yes! I agree. I made this change locally and events now work. Here is a great repro since it will fail 100% of the time without the change above.\nThis is my init code:\n    [iRate sharedInstance].daysUntilPrompt = 0;\n    [iRate sharedInstance].usesUntilPrompt = 0;\n    [iRate sharedInstance].eventsUntilPrompt = 3;\n    [iRate sharedInstance].promptAtLaunch = false;\nThen I launch this manually or show a different message\n    [[iRate sharedInstance] logEvent:YES];\n    if ( [[iRate sharedInstance] shouldPromptForRating] )\n    {\n        [[iRate sharedInstance] promptIfNetworkAvailable];\n    }\n    else\n    {\n        // Show custom message instead of rate dialog\n    }\n. Yes! I agree. I made this change locally and events now work. Here is a great repro since it will fail 100% of the time without the change above.\nThis is my init code:\n    [iRate sharedInstance].daysUntilPrompt = 0;\n    [iRate sharedInstance].usesUntilPrompt = 0;\n    [iRate sharedInstance].eventsUntilPrompt = 3;\n    [iRate sharedInstance].promptAtLaunch = false;\nThen I launch this manually or show a different message\n    [[iRate sharedInstance] logEvent:YES];\n    if ( [[iRate sharedInstance] shouldPromptForRating] )\n    {\n        [[iRate sharedInstance] promptIfNetworkAvailable];\n    }\n    else\n    {\n        // Show custom message instead of rate dialog\n    }\n. ",
    "Neirys": "Yay, I was about to write an issue and a pull request about this :D \nBut it seems to be a normal behavior regarding what the documentation says.\nLet's see if we can have an answer from @nicklockwood here. \n. Yeah I understand. Maybe a hint on documentation could be nice then.\n. Yay, I was about to write an issue and a pull request about this :D \nBut it seems to be a normal behavior regarding what the documentation says.\nLet's see if we can have an answer from @nicklockwood here. \n. Yeah I understand. Maybe a hint on documentation could be nice then.\n. ",
    "andy380743909": "I had this issue ,too.\nAnd I have hardcode my appStoreID.\n. My app names LuaLu is still on the App Store.\nHere is the link:\nhttps://itunes.apple.com/us/app/lualu/id638219114?ls=1&mt=8\nand Promotion Code: PL6J49J3NTFY\nyou can type \"rate for lualu\", then the app will open the App Store, a few seconds later, show a error alert.\nthanks!\n. Hi,nick\nMy bundle ID is com.amadman.lualu\niRate works on iOS5.Maybe just as you said,it is because Apple has changed the iTunes web service API .\nThanks!\n\u00c0\u00b4\u00d7\u00d4andy\u00b5\u00c4ipod\n\u00d4\u00da 2 Jul, 2013\u00a3\u00ac10:38 PM\u00a3\u00acNick Lockwood notifications@github.com \u00d0\u00b4\u00b5\u00c0\u00a3\u00ba\n\nOK, @andy380743909, your app worked with iRate when I tried it (the bundle ID is com.livestation.lualuaar, correct?) - if it's not working for you, can you check the console log (you may need to enable verbose logging) and paste it here?\n@therauli iRate will work fine with your app once it is in the store, but it won't work until it's live. You can fix that by setting the app ID explicitly, but that isn't necessary. Enable preview mode if you'd like to see what it will look like before you submit.\n\u00a1\u00aa\nReply to this email directly or view it on GitHub.\n. I had this issue ,too.\n\nAnd I have hardcode my appStoreID.\n. My app names LuaLu is still on the App Store.\nHere is the link:\nhttps://itunes.apple.com/us/app/lualu/id638219114?ls=1&mt=8\nand Promotion Code: PL6J49J3NTFY\nyou can type \"rate for lualu\", then the app will open the App Store, a few seconds later, show a error alert.\nthanks!\n. Hi,nick\nMy bundle ID is com.amadman.lualu\niRate works on iOS5.Maybe just as you said,it is because Apple has changed the iTunes web service API .\nThanks!\n\u00c0\u00b4\u00d7\u00d4andy\u00b5\u00c4ipod\n\u00d4\u00da 2 Jul, 2013\u00a3\u00ac10:38 PM\u00a3\u00acNick Lockwood notifications@github.com \u00d0\u00b4\u00b5\u00c0\u00a3\u00ba\n\nOK, @andy380743909, your app worked with iRate when I tried it (the bundle ID is com.livestation.lualuaar, correct?) - if it's not working for you, can you check the console log (you may need to enable verbose logging) and paste it here?\n@therauli iRate will work fine with your app once it is in the store, but it won't work until it's live. You can fix that by setting the app ID explicitly, but that isn't necessary. Enable preview mode if you'd like to see what it will look like before you submit.\n\u00a1\u00aa\nReply to this email directly or view it on GitHub.\n. \n",
    "therauli": "I understand it completely. It's not live yet. I thought that iRate would\nwork with iRate. I read some thirdparty old iRate tutorial that gave me\nthat impression.\nOn 2 July 2013 15:36, Nick Lockwood notifications@github.com wrote:\n\nThis may be a silly question, but is your app live yet?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/nicklockwood/iRate/issues/106#issuecomment-20343080\n.\n. I'm a bit confused here. I have set the appstore ID se manually. I would\nlike test that my event based logic is sound before going live. Is there a\nway to test iRate before I submit the app to Apple?\n\nOn 2 July 2013 17:39, Nick Lockwood notifications@github.com wrote:\n\nMake sure you are using the latest version of iRate by the way - Apple\nchanged the URLs for iOS 6.1, so if you have a version that's a few months\nold, that may be why it doesn't work.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/nicklockwood/iRate/issues/106#issuecomment-20349524\n.\n. Ok. Thanks for the helpful replies!\n\nOn 2 July 2013 19:02, Nick Lockwood notifications@github.com wrote:\n\nYou don't need to set the appstore ID manually - iRate gets your bundle ID\nfrom the info.plist automatically. To test it, set previewMode = YES.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/nicklockwood/iRate/issues/106#issuecomment-20355589\n.\n. Ok. Thanks a lot! Will do that.\n\nOn 2 July 2013 19:08, Nick Lockwood notifications@github.com wrote:\n\nTo actually verify that the event-based logic you've implemented works,\nthe simplest way is to set the bundle ID in your plist to another app\nthat's already on the store (you can use the rainbowblocks bundle I\nincluded in the example) and then change the date on the device or\nsimulator to however many days in the future your logic is set to trigger.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/nicklockwood/iRate/issues/106#issuecomment-20356104\n.\n. I understand it completely. It's not live yet. I thought that iRate would\nwork with iRate. I read some thirdparty old iRate tutorial that gave me\nthat impression.\n\nOn 2 July 2013 15:36, Nick Lockwood notifications@github.com wrote:\n\nThis may be a silly question, but is your app live yet?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/nicklockwood/iRate/issues/106#issuecomment-20343080\n.\n. I'm a bit confused here. I have set the appstore ID se manually. I would\nlike test that my event based logic is sound before going live. Is there a\nway to test iRate before I submit the app to Apple?\n\nOn 2 July 2013 17:39, Nick Lockwood notifications@github.com wrote:\n\nMake sure you are using the latest version of iRate by the way - Apple\nchanged the URLs for iOS 6.1, so if you have a version that's a few months\nold, that may be why it doesn't work.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/nicklockwood/iRate/issues/106#issuecomment-20349524\n.\n. Ok. Thanks for the helpful replies!\n\nOn 2 July 2013 19:02, Nick Lockwood notifications@github.com wrote:\n\nYou don't need to set the appstore ID manually - iRate gets your bundle ID\nfrom the info.plist automatically. To test it, set previewMode = YES.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/nicklockwood/iRate/issues/106#issuecomment-20355589\n.\n. Ok. Thanks a lot! Will do that.\n\nOn 2 July 2013 19:08, Nick Lockwood notifications@github.com wrote:\n\nTo actually verify that the event-based logic you've implemented works,\nthe simplest way is to set the bundle ID in your plist to another app\nthat's already on the store (you can use the rainbowblocks bundle I\nincluded in the example) and then change the date on the device or\nsimulator to however many days in the future your logic is set to trigger.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/nicklockwood/iRate/issues/106#issuecomment-20356104\n.\n. \n",
    "SushilSharma12": "Hello Nick,\nMy app not live in app store but in itunes connect for test flight testing. I also have app id from itunes connect. iRate still gives error \" iRate rating process failed because: The application could not be found on the App Store. \"\nSo can I test the iRate or should I should for app release ?\n. hello @hermanccw , did you find any solution ?\n. Hello Nick,\nMy app not live in app store but in itunes connect for test flight testing. I also have app id from itunes connect. iRate still gives error \" iRate rating process failed because: The application could not be found on the App Store. \"\nSo can I test the iRate or should I should for app release ?\n. hello @hermanccw , did you find any solution ?\n. ",
    "mtripod": "Hi Nick,\nThanks so much for your answer it has been really helpful.\nRegards,-Matias.\nDate: Thu, 18 Jul 2013 00:14:56 -0700\nFrom: notifications@github.com\nTo: iRate@noreply.github.com\nCC: matitripo@hotmail.com\nSubject: Re: [iRate] Not possible to build iRate on iOS5 due to SKStoreProductViewController (#107)\nDetection of the iOS version has to be done at runtime, it an't be done at compile time. iRate will correctly detect that it is running on iOS 5 and disable the StoreKit functionality, but it has to be built using SDK 6 or the compiler won't recognise the StoreKit symbols.\n\u2014\nReply to this email directly or view it on GitHub.                  \n. Hi Nick,\nThanks so much for your answer it has been really helpful.\nRegards,-Matias.\nDate: Thu, 18 Jul 2013 00:14:56 -0700\nFrom: notifications@github.com\nTo: iRate@noreply.github.com\nCC: matitripo@hotmail.com\nSubject: Re: [iRate] Not possible to build iRate on iOS5 due to SKStoreProductViewController (#107)\nDetection of the iOS version has to be done at runtime, it an't be done at compile time. iRate will correctly detect that it is running on iOS 5 and disable the StoreKit functionality, but it has to be built using SDK 6 or the compiler won't recognise the StoreKit symbols.\n\u2014\nReply to this email directly or view it on GitHub.                  \n. ",
    "coffevei": "Yes,Same to me . \n. Ok,ddaddy ,Thanks.\n. Yes,Same to me . \n. Ok,ddaddy ,Thanks.\n. ",
    "sioz": "works fine for me on an iOS7 device compiling with 6.1, I think in the previous beta it did show a white screen.\nas stated before, I wouldn't worry about anything until the GM is release.\n. works fine for me on an iOS7 device compiling with 6.1, I think in the previous beta it did show a white screen.\nas stated before, I wouldn't worry about anything until the GM is release.\n. ",
    "dhanbhat": "irate not working at all on iOS 7 beta 6 version . I am not even getting a white screen like the others . What is the possible solution \n. the checkForConnectivityInbackground: call returns empty json \n. its unable to find the appstoreid \nthe log printed is \"iRate could not find your app on iTunes\"\n. irate not working at all on iOS 7 beta 6 version . I am not even getting a white screen like the others . What is the possible solution \n. the checkForConnectivityInbackground: call returns empty json \n. its unable to find the appstoreid \nthe log printed is \"iRate could not find your app on iTunes\"\n. ",
    "motocodeltd": "I also get the white screen.\nappirater works with ios7 beta6 with the following url:\nitms-apps://itunes.apple.com/LANGUAGE/app/idAPP_ID\nchanged irate to use\nitms-apps://itunes.apple.com/app/idAPP_ID\nand it works - no white screen.\n. I also get the white screen.\nappirater works with ios7 beta6 with the following url:\nitms-apps://itunes.apple.com/LANGUAGE/app/idAPP_ID\nchanged irate to use\nitms-apps://itunes.apple.com/app/idAPP_ID\nand it works - no white screen.\n. ",
    "CellTech10": "I added the StoreKit, I get a build fail. How do I fix it to use this code?\nSent from my iPad\nOn Aug 16, 2013, at 12:47 AM, Nick Lockwood notifications@github.com\nwrote:\nYou drag and drop the iRate class (iRate.h + iRate.m). that comes with the\nlibrary into your project. You do not need to create any classes or write\nany code. You do need to add the StoreKit framework as well though (google\nhow to add built in frameworks in Xcode, if you're not sure).\n\u2014\nReply to this email directly or view it on\nGitHubhttps://github.com/nicklockwood/iRate/issues/111#issuecomment-22750281\n.\n. My project is for an iPad, is this a problem, not a pod?\nSent from my iPad\nOn Aug 16, 2013, at 1:36 AM, Victor Ilyukevich notifications@github.com\nwrote:\nHave you tried to google particular errors you are getting? Usually it's\nnot a problem. And answers to all the questions are easy to google ;)\nAlso I'd like to recommend you to use Cocoapods http://cocoapods.org for\nadding libraries to your project. You can add iRate to your project with\njust one line in Podfile:\npod 'iRate'\nAnd then just rerun pod install.\n\u2014\nReply to this email directly or view it on\nGitHubhttps://github.com/nicklockwood/iRate/issues/111#issuecomment-22751886\n.\n. Thank You, that makes sense. I am new to this and just trying to figure it\nout.\nSent from my iPad\nOn Aug 16, 2013, at 1:44 AM, Victor Ilyukevich notifications@github.com\nwrote:\npod is not iPod. Please follow the link I've provided: http://cocoapods.org\n\u2014\nReply to this email directly or view it on\nGitHubhttps://github.com/nicklockwood/iRate/issues/111#issuecomment-22752200\n.\n. Mach link error, build failed. I put the .h and .m files in, and the\ncompiler would not link them in. I deleted the files and build is fine.\nThat is why I was wondering if I had to create a class file to paste the\ncode into so it would link correctly.\nSent from my iPad\nOn Aug 16, 2013, at 2:21 AM, Nick Lockwood notifications@github.com wrote:\nWhat were the compile errors you were getting? Can you paste the console\noutput into your question?\n\u2014\nReply to this email directly or view it on\nGitHubhttps://github.com/nicklockwood/iRate/issues/111#issuecomment-22753631\n.\n. I think the problem is the .h file has a #import , and I do\nnot know what this is. Is it in StoreKit? I do have StoreKit in the\nproject. What is Availability?\nSent from my iPad\nOn Aug 16, 2013, at 9:27 AM, Nick Lockwood notifications@github.com wrote:\nCan you add the files back in, then zip up your project (with errors) and\nemail it to support at charcoal design dot co dot uk. I'll take a look.\n\u2014\nReply to this email directly or view it on\nGitHubhttps://github.com/nicklockwood/iRate/issues/111#issuecomment-22773535\n.\n. Your help is greatly appreciated. As I said, I am new to this, still in\nCollege. I got your code to work, in the simulator, and to release it in my\napp soon.\nThank You.\nSent from my iPad\nOn Aug 16, 2013, at 9:27 AM, Nick Lockwood notifications@github.com wrote:\nCan you add the files back in, then zip up your project (with errors) and\nemail it to support at charcoal design dot co dot uk. I'll take a look.\n\u2014\nReply to this email directly or view it on\nGitHubhttps://github.com/nicklockwood/iRate/issues/111#issuecomment-22773535\n.\n. I added the StoreKit, I get a build fail. How do I fix it to use this code?\nSent from my iPad\nOn Aug 16, 2013, at 12:47 AM, Nick Lockwood notifications@github.com\nwrote:\nYou drag and drop the iRate class (iRate.h + iRate.m). that comes with the\nlibrary into your project. You do not need to create any classes or write\nany code. You do need to add the StoreKit framework as well though (google\nhow to add built in frameworks in Xcode, if you're not sure).\n\u2014\nReply to this email directly or view it on\nGitHubhttps://github.com/nicklockwood/iRate/issues/111#issuecomment-22750281\n.\n. My project is for an iPad, is this a problem, not a pod?\nSent from my iPad\nOn Aug 16, 2013, at 1:36 AM, Victor Ilyukevich notifications@github.com\nwrote:\nHave you tried to google particular errors you are getting? Usually it's\nnot a problem. And answers to all the questions are easy to google ;)\nAlso I'd like to recommend you to use Cocoapods http://cocoapods.org for\nadding libraries to your project. You can add iRate to your project with\njust one line in Podfile:\npod 'iRate'\nAnd then just rerun pod install.\n\u2014\nReply to this email directly or view it on\nGitHubhttps://github.com/nicklockwood/iRate/issues/111#issuecomment-22751886\n.\n. Thank You, that makes sense. I am new to this and just trying to figure it\nout.\nSent from my iPad\nOn Aug 16, 2013, at 1:44 AM, Victor Ilyukevich notifications@github.com\nwrote:\npod is not iPod. Please follow the link I've provided: http://cocoapods.org\n\u2014\nReply to this email directly or view it on\nGitHubhttps://github.com/nicklockwood/iRate/issues/111#issuecomment-22752200\n.\n. Mach link error, build failed. I put the .h and .m files in, and the\ncompiler would not link them in. I deleted the files and build is fine.\nThat is why I was wondering if I had to create a class file to paste the\ncode into so it would link correctly.\nSent from my iPad\nOn Aug 16, 2013, at 2:21 AM, Nick Lockwood notifications@github.com wrote:\nWhat were the compile errors you were getting? Can you paste the console\noutput into your question?\n\u2014\nReply to this email directly or view it on\nGitHubhttps://github.com/nicklockwood/iRate/issues/111#issuecomment-22753631\n.\n. I think the problem is the .h file has a #import , and I do\nnot know what this is. Is it in StoreKit? I do have StoreKit in the\nproject. What is Availability?\nSent from my iPad\nOn Aug 16, 2013, at 9:27 AM, Nick Lockwood notifications@github.com wrote:\nCan you add the files back in, then zip up your project (with errors) and\nemail it to support at charcoal design dot co dot uk. I'll take a look.\n\u2014\nReply to this email directly or view it on\nGitHubhttps://github.com/nicklockwood/iRate/issues/111#issuecomment-22773535\n.\n. Your help is greatly appreciated. As I said, I am new to this, still in\nCollege. I got your code to work, in the simulator, and to release it in my\napp soon.\nThank You.\nSent from my iPad\nOn Aug 16, 2013, at 9:27 AM, Nick Lockwood notifications@github.com wrote:\nCan you add the files back in, then zip up your project (with errors) and\nemail it to support at charcoal design dot co dot uk. I'll take a look.\n\u2014\nReply to this email directly or view it on\nGitHubhttps://github.com/nicklockwood/iRate/issues/111#issuecomment-22773535\n.\n. ",
    "haitaoli": "Thank you. Yes, it's probably new. We have other apps linking to the same libraries and they passed multiple reviews without issues.\n. Rejection message:\nMissing IAPs\nWe are unable to complete the review of your app since one or more of your In App Purchases have not been submitted for review.\nIf you do not wish to use In App Purchases at this time, please remove the In App Purchases frameworks. \nPlease be sure to take action and submit your In App Purchases AND upload a new binary in iTunes Connect. Learn more about submitting In App Purchases for review in the iTunes Connect Developer Guide.\nOnce you've submitted your In App Purchases and uploaded a new binary, we can proceed with your review.Note: Apps that offer In-App Purchase products that must be restorable are required to include a \"Restore\" feature. The following In-App Purchase types must be restorable:\n- non-consumable products\n- auto-renewing subscriptions\n- free subscriptions\nFor more information, please see the section, Restoring Transactions, in the In-App Purchase Programming Guide.\n. Thank you. Yes, it's probably new. We have other apps linking to the same libraries and they passed multiple reviews without issues.\n. Rejection message:\nMissing IAPs\nWe are unable to complete the review of your app since one or more of your In App Purchases have not been submitted for review.\nIf you do not wish to use In App Purchases at this time, please remove the In App Purchases frameworks. \nPlease be sure to take action and submit your In App Purchases AND upload a new binary in iTunes Connect. Learn more about submitting In App Purchases for review in the iTunes Connect Developer Guide.\nOnce you've submitted your In App Purchases and uploaded a new binary, we can proceed with your review.Note: Apps that offer In-App Purchase products that must be restorable are required to include a \"Restore\" feature. The following In-App Purchase types must be restorable:\n- non-consumable products\n- auto-renewing subscriptions\n- free subscriptions\nFor more information, please see the section, Restoring Transactions, in the In-App Purchase Programming Guide.\n. ",
    "dreese": "I believe this is in violation of the affiliate program's Terms and Conditions. See section 4.1 which includes the following:\n\"Any link used with any of the Required URLs by Publisher on its Publisher Property may not include any call to action other than for the purchase of one or more products on a Store. For example, a link may not include a call to action for the reading or composing of a product review on a Store.\"\nhttp://www.performancehorizon.com/docs/itunes/terms/en.pdf\n. Yeah. I wish it was otherwise. :)\n. I believe this is in violation of the affiliate program's Terms and Conditions. See section 4.1 which includes the following:\n\"Any link used with any of the Required URLs by Publisher on its Publisher Property may not include any call to action other than for the purchase of one or more products on a Store. For example, a link may not include a call to action for the reading or composing of a product review on a Store.\"\nhttp://www.performancehorizon.com/docs/itunes/terms/en.pdf\n. Yeah. I wish it was otherwise. :)\n. ",
    "hpique": "It would appear so. Best not to use this then. Thanks for letting me know.\n. It would appear so. Best not to use this then. Thanks for letting me know.\n. ",
    "lordkev": "I got a similar warning, though I also did not make good note of it at the time. In my case at least, it was due to a single locale that it was reporting as invalid. It didn't however prevent validation or submission, just a warning. Organizer reports \"Submitted with Validation Warnings\".\n. I got a similar warning, though I also did not make good note of it at the time. In my case at least, it was due to a single locale that it was reporting as invalid. It didn't however prevent validation or submission, just a warning. Organizer reports \"Submitted with Validation Warnings\".\n. ",
    "frankodwyer": "Same issue here - i got 'submitted with validation warnings'.\nRemoving the locales at.lproj and cz.lproj fixes the issue - for some reason it objects to these.\n. This is the same message I got...however if you go ahead and submit for review anyway you get a similar message but this time it is not truncated and includes the info about which directories it is complaining about (at.lproj and cz.lproj in my case). If I remember correctly it is the names it is complaining about, and it referred to the docs about locale naming.\n. You can also do the same thing in your Podfile like this:\npod 'iRate', :git => 'https://github.com/nicklockwood/iRate.git'\nThen update your pods and it will get iRate from the trunk.\n. Same issue here - i got 'submitted with validation warnings'.\nRemoving the locales at.lproj and cz.lproj fixes the issue - for some reason it objects to these.\n. This is the same message I got...however if you go ahead and submit for review anyway you get a similar message but this time it is not truncated and includes the info about which directories it is complaining about (at.lproj and cz.lproj in my case). If I remember correctly it is the names it is complaining about, and it referred to the docs about locale naming.\n. You can also do the same thing in your Podfile like this:\npod 'iRate', :git => 'https://github.com/nicklockwood/iRate.git'\nThen update your pods and it will get iRate from the trunk.\n. ",
    "gurgeous": "I dug up the exact validation warning from my frantic googling. Here it is, for posterity:\nunrecognized locale the directories located at\nYes, that's the entire message.\n. Thanks guys, much appreciated.\n. I dug up the exact validation warning from my frantic googling. Here it is, for posterity:\nunrecognized locale the directories located at\nYes, that's the entire message.\n. Thanks guys, much appreciated.\n. ",
    "talyaniv": "Hi, pulled latest, still getting this warning (though successfully submitted for review).\n\n. Thanks, appreciated!\n. Hi, pulled latest, still getting this warning (though successfully submitted for review).\n\n. Thanks, appreciated!\n. ",
    "rene-dohan": "I had also problems with validation, Locale and usage of no public selector \"viewController\" latest version is OK\nThank you for library !\n. I had also problems with validation, Locale and usage of no public selector \"viewController\" latest version is OK\nThank you for library !\n. ",
    "billykan": "I actually have a similar error - although it appears in a different way.\nMy app get compiled and ran in Xcode 5 without any issue. However when I prepared App Store submission and created an archive, a validation warning appears:\n\"This app references non--public selectors in Payload : viewController\"\nAfter searching for my source code, the only place where the selector \"viewController\" is used is in iRate.m in the - (void)openRatingsPageInAppStore method.\nid appDelegate = [[UIApplication sharedApplication] delegate];\n if ([appDelegate respondsToSelector:@selector(viewController)])\n {\n       rootViewController = [appDelegate valueForKey:@\"viewController\"];\n }\nI've searched for the selector \"viewController\" in UIApplicationDelegate documentation and there is no such method defined. It maybe a private API and so I got that warning. It may also be the reason why you get the Undeclared selector error. I did not have that warning issue in Xcode 4.x and iOS 6.x.\nI guess Apple may have changed something about it?\n. Thanks a lot Nick!\n. I actually have a similar error - although it appears in a different way.\nMy app get compiled and ran in Xcode 5 without any issue. However when I prepared App Store submission and created an archive, a validation warning appears:\n\"This app references non--public selectors in Payload : viewController\"\nAfter searching for my source code, the only place where the selector \"viewController\" is used is in iRate.m in the - (void)openRatingsPageInAppStore method.\nid appDelegate = [[UIApplication sharedApplication] delegate];\n if ([appDelegate respondsToSelector:@selector(viewController)])\n {\n       rootViewController = [appDelegate valueForKey:@\"viewController\"];\n }\nI've searched for the selector \"viewController\" in UIApplicationDelegate documentation and there is no such method defined. It maybe a private API and so I got that warning. It may also be the reason why you get the Undeclared selector error. I did not have that warning issue in Xcode 4.x and iOS 6.x.\nI guess Apple may have changed something about it?\n. Thanks a lot Nick!\n. ",
    "PlasmaSoftUK": "That's cool thanks for the prompt update Nick. I'll keep an eye out for the update, as I have some other slightly more major issues with my app which I need to get resolved so I can re-submit it to apple!\n. That's cool thanks for the prompt update Nick. I'll keep an eye out for the update, as I have some other slightly more major issues with my app which I need to get resolved so I can re-submit it to apple!\n. ",
    "efpies": "Thanks! It works :)\n. Thanks! It works :)\n. ",
    "shmidt": "Sad to hear that. \nI disagree with this article, because as of my experience \u2014 some users use negative AppStore reviews as a feedback. This feature could fix it.\nIn Google Play Market developers are able to answer them, but not at AppStore.\nOK, thanks anyway.\n. Sad to hear that. \nI disagree with this article, because as of my experience \u2014 some users use negative AppStore reviews as a feedback. This feature could fix it.\nIn Google Play Market developers are able to answer them, but not at AppStore.\nOK, thanks anyway.\n. ",
    "dyah10": "Oh ok I must not have the latest version. Thanks!\n. Oh ok I must not have the latest version. Thanks!\n. ",
    "dawgless": "Great, thanks. Then I can simply block it when I am in the root viewcontroller and count on the app opening from a different viewcontroller when coming out of the background at some point in the future.... or possibly a better strategy is to always block it and put the if-then suggested above into every view controller other than the ones I don't want.\n. Good suggestion, thanks.\n. Great, thanks. Then I can simply block it when I am in the root viewcontroller and count on the app opening from a different viewcontroller when coming out of the background at some point in the future.... or possibly a better strategy is to always block it and put the if-then suggested above into every view controller other than the ones I don't want.\n. Good suggestion, thanks.\n. ",
    "sammio2": "Well no, it is an iRate bug, as there is no localization for en-GB... I agree that iOS should really fall back to en-US rather than falling back to fr, but simply duplicating the en.lproj and renaming it to en-GB.lproj will fix this issue.\n. Well no, it is an iRate bug, as there is no localization for en-GB... I agree that iOS should really fall back to en-US rather than falling back to fr, but simply duplicating the en.lproj and renaming it to en-GB.lproj will fix this issue.\n. ",
    "bholmes": "This is a Xamarin request.  We maintain a binding for this library and I am working on an update here.\nhttps://github.com/mono/monotouch-bindings/tree/iRate-1-8\nIn C# the pattern is to convert obj-c delegates and protocols to C# events.  That is where the sender requirement comes in.  In the past we have faked the argument.  However this hack does not work with the static registrar.  It is more strict about the signatures matching.  \nFor the time being, I am using my fork of this library for a source to generate the binding.  I would like to delete that fork.\n. This is a Xamarin request.  We maintain a binding for this library and I am working on an update here.\nhttps://github.com/mono/monotouch-bindings/tree/iRate-1-8\nIn C# the pattern is to convert obj-c delegates and protocols to C# events.  That is where the sender requirement comes in.  In the past we have faked the argument.  However this hack does not work with the static registrar.  It is more strict about the signatures matching.  \nFor the time being, I am using my fork of this library for a source to generate the binding.  I would like to delete that fork.\n. ",
    "xinsight": "Yes, I realized that appStoreID isn't needed. Still, I don't think defining it should prevent previewMode from working.\n. Yes, I realized that appStoreID isn't needed. Still, I don't think defining it should prevent previewMode from working.\n. ",
    "talkboard-admin": "Sorry to resurrect this old thread but... I just tried my app on iPad / iOS 7 / Landscape mode, the StoreKit view controller DOES show the Review panel. Have they re-enabled it or am I missing something here?\n. Is there anyway you could check this behavior on your end? (I only have 1 kind of device and 1 app in the AppStore currently). If the StoreKit method is working again, do you think you could reenable it? This was a much better user experience IMHO.\n. I concur with x2on. IMHO, it's a matter of how often you ask. We've been lucky to mainly get 4 or 5 star reviews, which means we have almost no users who would give a bad rating. If users are happy, I don't see why they wouldn't agree to post another rating for a newer version as long as we're not asking too often. Just my 2 cents.\n. Sorry to resurrect this old thread but... I just tried my app on iPad / iOS 7 / Landscape mode, the StoreKit view controller DOES show the Review panel. Have they re-enabled it or am I missing something here?\n. Is there anyway you could check this behavior on your end? (I only have 1 kind of device and 1 app in the AppStore currently). If the StoreKit method is working again, do you think you could reenable it? This was a much better user experience IMHO.\n. I concur with x2on. IMHO, it's a matter of how often you ask. We've been lucky to mainly get 4 or 5 star reviews, which means we have almost no users who would give a bad rating. If users are happy, I don't see why they wouldn't agree to post another rating for a newer version as long as we're not asking too often. Just my 2 cents.\n. ",
    "K232": "Hi Nick,\nyes, the bundle id is the same in AppStore and in my App.\nThis is my code:\n- (IBAction)RateInAppStore:(UIButton *)sender {\n    [[iRate sharedInstance] openRatingsPageInAppStore];\n}\nSorry, probably it's a very silly mistake I made but I'm quite new to iOS development... Thanks a lot for your support!\n. Ah ok, I'll try that. Or is there a better way to rate it with a button click?\n. Hm, I've copied all the code from above into my app and now I get:\niRate did not display the rating prompt because the iRateShouldPromptForRating delegate method returned NO\n. But the computed URL seems to be correct. My numeric AppID is correct within the URL.\n. Yes, I just used the code above. It automatically gets the correct AppID. \nBut now I'm even more confused because I want both: I want the default function so that iRate asks the user after 10 days to rate. Additionally I want a button where the user could manually rate.\nAnd shouldn't the rating also work in the simulator? Currently it does not, even with the code you provided above.\n. Great Nick, thanks a lot!!\n. Hi Nick,\nyes, the bundle id is the same in AppStore and in my App.\nThis is my code:\n- (IBAction)RateInAppStore:(UIButton *)sender {\n    [[iRate sharedInstance] openRatingsPageInAppStore];\n}\nSorry, probably it's a very silly mistake I made but I'm quite new to iOS development... Thanks a lot for your support!\n. Ah ok, I'll try that. Or is there a better way to rate it with a button click?\n. Hm, I've copied all the code from above into my app and now I get:\niRate did not display the rating prompt because the iRateShouldPromptForRating delegate method returned NO\n. But the computed URL seems to be correct. My numeric AppID is correct within the URL.\n. Yes, I just used the code above. It automatically gets the correct AppID. \nBut now I'm even more confused because I want both: I want the default function so that iRate asks the user after 10 days to rate. Additionally I want a button where the user could manually rate.\nAnd shouldn't the rating also work in the simulator? Currently it does not, even with the code you provided above.\n. Great Nick, thanks a lot!!\n. ",
    "cprcrack": "I had the same issue. In my opinion openRatingsPageInAppStore should be better documented. By what it can be read now, it appears that explicitly setting appStoreID is not really needed, and at least in my case it was.\n. I'm using version 1.8. I was getting a 'iRate was unable to open the App Store because the app store ID is not set' error when my app wasn't live, which was expected behavior. But surprise, when Apple finally approved my app after one month the error persisted although the app was live for more than 2 days.\nI fixed it by manually specifying the appStoreID, but I had to upload a new binary just to fix this bug-or-bad-documentation-matter. I hope Apple doesn't take another month to review it.\n. I had the same issue. In my opinion openRatingsPageInAppStore should be better documented. By what it can be read now, it appears that explicitly setting appStoreID is not really needed, and at least in my case it was.\n. I'm using version 1.8. I was getting a 'iRate was unable to open the App Store because the app store ID is not set' error when my app wasn't live, which was expected behavior. But surprise, when Apple finally approved my app after one month the error persisted although the app was live for more than 2 days.\nI fixed it by manually specifying the appStoreID, but I had to upload a new binary just to fix this bug-or-bad-documentation-matter. I hope Apple doesn't take another month to review it.\n. ",
    "doriansgithub": "Found the issue, all is good.. Found the issue, all is good.. ",
    "hwaxxer": "Caused by this line, which eventually calls -checkForConnectivityInBackground on the main thread.\nhttps://github.com/nicklockwood/iRate/blob/master/iRate/iRate.m#L204\n. Thanks for the fast merge!\n. :+1: for this request. Let developers decide how aggressive they want to be.\n. Caused by this line, which eventually calls -checkForConnectivityInBackground on the main thread.\nhttps://github.com/nicklockwood/iRate/blob/master/iRate/iRate.m#L204\n. Thanks for the fast merge!\n. :+1: for this request. Let developers decide how aggressive they want to be.\n. ",
    "toddkramer": "For the sake of completeness, here is how the \"weak property unpredictably set to nil\" warning could be resolved.\n__strong id(iRateDelegate) delegate = [self delegate];\nif (delegate) {\n   [delegate iRateDidDetectAppUpdate];\n}\n*I had to replace the \"<\" and \">\" signs with parenthesis in __strong id iRateDelegate to avoid GitHub formatting.\nThis will work for the other instances of this warning as well.\n. Thanks for your quick reply.\nThe first compiler warning (weak property unpredictably set to nil) is controlled by the \"Sending messages to __weak pointers\" build setting under Apple LLVM 5.0 - Warnings - Objective C and ARC. This was a warning Apple added recently as an extra precaution to prevent edge cases where you're in a method and the object being sent the message is deallocated because nothing was pointing to it strongly. While in many cases you don't need to worry about this, Apple suggests implementing the pattern I included in the previous comment as a best practice.\nThe second compiler warning (multiple methods named 'length' found) is controlled by the \"Strict Selector Matching\" build setting under Apple LLVM 5.0 - Warnings - Objective C. For this one, the warning exists to make sure you are sending a given message to an instance of the right class. And if there are multiple classes that implement a method of the same name, the compiler may get confused when trying to find the correct method implementation. It's also helpful for code readability.\nThanks again for responding to this issue. Let me know if you have any other questions.\n. Thanks for resolving these issues.\n. For the sake of completeness, here is how the \"weak property unpredictably set to nil\" warning could be resolved.\n__strong id(iRateDelegate) delegate = [self delegate];\nif (delegate) {\n   [delegate iRateDidDetectAppUpdate];\n}\n*I had to replace the \"<\" and \">\" signs with parenthesis in __strong id iRateDelegate to avoid GitHub formatting.\nThis will work for the other instances of this warning as well.\n. Thanks for your quick reply.\nThe first compiler warning (weak property unpredictably set to nil) is controlled by the \"Sending messages to __weak pointers\" build setting under Apple LLVM 5.0 - Warnings - Objective C and ARC. This was a warning Apple added recently as an extra precaution to prevent edge cases where you're in a method and the object being sent the message is deallocated because nothing was pointing to it strongly. While in many cases you don't need to worry about this, Apple suggests implementing the pattern I included in the previous comment as a best practice.\nThe second compiler warning (multiple methods named 'length' found) is controlled by the \"Strict Selector Matching\" build setting under Apple LLVM 5.0 - Warnings - Objective C. For this one, the warning exists to make sure you are sending a given message to an instance of the right class. And if there are multiple classes that implement a method of the same name, the compiler may get confused when trying to find the correct method implementation. It's also helpful for code readability.\nThanks again for responding to this issue. Let me know if you have any other questions.\n. Thanks for resolving these issues.\n. ",
    "pjebs": "Hi Nick, how does iRate run automatically. Are you kind enough to share your secret?\n. Hi Nick, how does iRate run automatically. Are you kind enough to share your secret?\n. ",
    "vanbungkring": "nice +1 cc @nicklockwood \n. @prabhuNatarajan  not sure if i can :)\n. +1 i think\n. nice +1 cc @nicklockwood \n. @prabhuNatarajan  not sure if i can :)\n. +1 i think\n. ",
    "prabhuNatarajan": "is anyone working on Indonesia Locale, if yes means could you please add the Hindi Locale.\n. is anyone working on Indonesia Locale, if yes means could you please add the Hindi Locale.\n. ",
    "RSully": "Oh, awesome!\nI gave the code a quick read-through before posting this and based on the comments/vars it didn't look like it was addressed (specifically declinedThisVersion stood out). I should have glanced at the version history too. \nFor reference, fixed here: 6e2f54683ebf92fa4b709ad2d20eacd001af221e\n. Oh, awesome!\nI gave the code a quick read-through before posting this and based on the comments/vars it didn't look like it was addressed (specifically declinedThisVersion stood out). I should have glanced at the version history too. \nFor reference, fixed here: 6e2f54683ebf92fa4b709ad2d20eacd001af221e\n. ",
    "Thermometer91": "Wouldn't this be more something your app should handle, instead of iRate? I use iRate in combination with a \"Feedback\" form as a menu item in my app. This works great, because the user knows the feedback item is there whenever he/she wants to deliver feedback.\nApart from that, iRate is used to rate the app in the app store on general thoughts, and because the user knows of the feedback form from the beginning, they know to differentiate the two. \n. Version 1.9.3 is the one I used for production. Was the bug in there? \n. Ah I see your conversation with @techee about the \"daysUntilPrompt\" problem he/she was having. I was using the first pull request for my app, so I guess that was the problem. Glad to see it was fixed, thanks!\n. Wouldn't this be more something your app should handle, instead of iRate? I use iRate in combination with a \"Feedback\" form as a menu item in my app. This works great, because the user knows the feedback item is there whenever he/she wants to deliver feedback.\nApart from that, iRate is used to rate the app in the app store on general thoughts, and because the user knows of the feedback form from the beginning, they know to differentiate the two. \n. Version 1.9.3 is the one I used for production. Was the bug in there? \n. Ah I see your conversation with @techee about the \"daysUntilPrompt\" problem he/she was having. I was using the first pull request for my app, so I guess that was the problem. Glad to see it was fixed, thanks!\n. ",
    "banaslee": "That is also what I do. Every time the user declines to rate (because I ask the user if he likes the app) I present him with the feedback form so I know why they don't like the app.\nI see this as a way to balance the tendency that the App Store has to picture an app as worse as it actually is as usually a user don't go so much out of their way to rate when everything is fine, only when they are frustrated with something.\n. When I read the \"declinedThisVersion\" property I tend to think it means that the user will be asked in another version since it still didn't decline that version, only another version (that is what I think the \"this\" means).\nI think a new property like \"resetDeclinedOnAppUpdate\" or setting it as the default behaviour would be the best options.\n. @nicklockwood actually this thread contradicts the documentation where it is possible to read:\n\nThis flag indicates whether the user has declined to rate the current version (YES) or not (NO). This is not currently used by the iRate prompting logic, but may be useful for implementing your own logic.\n. Unfortunately it's not possible to implement like described in the article.\n\nYou cannot send a review to Apple in behalf of the user. The user has to do it from inside the App Store. You can only direct him there.\n. That is also what I do. Every time the user declines to rate (because I ask the user if he likes the app) I present him with the feedback form so I know why they don't like the app.\nI see this as a way to balance the tendency that the App Store has to picture an app as worse as it actually is as usually a user don't go so much out of their way to rate when everything is fine, only when they are frustrated with something.\n. When I read the \"declinedThisVersion\" property I tend to think it means that the user will be asked in another version since it still didn't decline that version, only another version (that is what I think the \"this\" means).\nI think a new property like \"resetDeclinedOnAppUpdate\" or setting it as the default behaviour would be the best options.\n. @nicklockwood actually this thread contradicts the documentation where it is possible to read:\n\nThis flag indicates whether the user has declined to rate the current version (YES) or not (NO). This is not currently used by the iRate prompting logic, but may be useful for implementing your own logic.\n. Unfortunately it's not possible to implement like described in the article.\n\nYou cannot send a review to Apple in behalf of the user. The user has to do it from inside the App Store. You can only direct him there.\n. ",
    "borut-t": "Copying other language strings into English one is a bit annoying and would need to be done on every iRate update. From my perspective this is not a solution but an ugly hack.\nI think there a many other languages that are not supported in iOS and would appreciate setting of this kind.\nPlease take a look at this plugin that made similar approach: https://github.com/ArtSabintsev/Harpy\n. Copying other language strings into English one is a bit annoying and would need to be done on every iRate update. From my perspective this is not a solution but an ugly hack.\nI think there a many other languages that are not supported in iOS and would appreciate setting of this kind.\nPlease take a look at this plugin that made similar approach: https://github.com/ArtSabintsev/Harpy\n. ",
    "mdpp": "Great! Thanks a lot.\n. Great! Thanks a lot.\n. ",
    "orta": "Sure, we have a bundle id that is x.y.z.dev whilst being built, then x.y.z.beta for betas and finally x.y.z for App Store.\nIt's mainly to deal with enterprise stuff and push notifications.\nSent from my iPhone\n\nOn 5 Feb 2014, at 04:33, Nick Lockwood notifications@github.com wrote:\nDone. But can you clarify what you mean by a dev ID that's not public?\n\u2014\nReply to this email directly or view it on GitHub.\n. Sure, we have a bundle id that is x.y.z.dev whilst being built, then x.y.z.beta for betas and finally x.y.z for App Store.\n\nIt's mainly to deal with enterprise stuff and push notifications.\nSent from my iPhone\n\nOn 5 Feb 2014, at 04:33, Nick Lockwood notifications@github.com wrote:\nDone. But can you clarify what you mean by a dev ID that's not public?\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "AnthonyUccello": "Nice response time. Thank you. Yes I had been looking more and I did some sloothing and I got it to work.\nApparently had already been rated, so I set that flag to false and it worked just fine.\nThank you!!!!\n. Nice response time. Thank you. Yes I had been looking more and I did some sloothing and I got it to work.\nApparently had already been rated, so I set that flag to false and it worked just fine.\nThank you!!!!\n. ",
    "adamdehaven": "@x2on Why not use the delegate method - (void)iRateDidDetectAppUpdate;, and then inside that, set the declinedAnyVersion property to 'NO', which then will prompt them to rate the new version once other parameters are met?\n. @nicklockwood - If a user declines to rate on version 1.0, and then the app is updated to version 1.1, will iRate prompt again? Or is it blocked from prompting because they previously declined in another version?\n. @x2on Why not use the delegate method - (void)iRateDidDetectAppUpdate;, and then inside that, set the declinedAnyVersion property to 'NO', which then will prompt them to rate the new version once other parameters are met?\n. @nicklockwood - If a user declines to rate on version 1.0, and then the app is updated to version 1.1, will iRate prompt again? Or is it blocked from prompting because they previously declined in another version?\n. ",
    "zhangjianjun056": "@x2on \uff0cHello, I would like to ask that I was written in accordance with you, but still can not. All the version is still no longer prompted, when the click \"no, thank you\" button after\n- (void)iRateDidDetectAppUpdate\n{\n    [iRate sharedInstance].declinedThisVersion = NO;\n}. @adamdehaven @nicklockwood  Hello, I would like to ask what I wrote, but still can not. All the version is still no longer prompted, when the click \"no, thank you\" button after. Do you have a good way?\n-(void)iRateDidDetectAppUpdate\n{\n[iRate sharedInstance].declinedThisVersion = NO;\n}. @x2on \uff0cHello, I would like to ask that I was written in accordance with you, but still can not. All the version is still no longer prompted, when the click \"no, thank you\" button after\n- (void)iRateDidDetectAppUpdate\n{\n    [iRate sharedInstance].declinedThisVersion = NO;\n}. @adamdehaven @nicklockwood  Hello, I would like to ask what I wrote, but still can not. All the version is still no longer prompted, when the click \"no, thank you\" button after. Do you have a good way?\n-(void)iRateDidDetectAppUpdate\n{\n[iRate sharedInstance].declinedThisVersion = NO;\n}. ",
    "mknippen": "Awesome, thanks!\u2014\nSent from my iPhone\nOn Sat, Apr 5, 2014 at 2:18 PM, Nick Lockwood notifications@github.com\nwrote:\n\nI've added this fix to 1.10.1\nReply to this email directly or view it on GitHub:\nhttps://github.com/nicklockwood/iRate/issues/164#issuecomment-39648158\n. I'm not sure this one should be closed yet. Since 3.1 now generates a warning for every user using iRate, we should probably come up with the solution that makes the most sense and update the documentation.. Awesome, thanks!\u2014\nSent from my iPhone\n\nOn Sat, Apr 5, 2014 at 2:18 PM, Nick Lockwood notifications@github.com\nwrote:\n\nI've added this fix to 1.10.1\nReply to this email directly or view it on GitHub:\nhttps://github.com/nicklockwood/iRate/issues/164#issuecomment-39648158\n. I'm not sure this one should be closed yet. Since 3.1 now generates a warning for every user using iRate, we should probably come up with the solution that makes the most sense and update the documentation.. \n",
    "techee": "Hello Nick, thanks. Your patch looks definitely cleaner, there's just one problem that the firstUsed variable isn't defined for existing users using older iRate version so on the next app update it will behave as if it was used for the first time, counters will be reset and there will be the same problem as I reported before.\nBut this will be just a one-time event so I guess it's alright...\n. And the above will happen only for new users who used the 1.10 release so it's actually not such a big problem because the variable will be defined for any previous release. So it's even less a problem.\n. Yeah, when I wrote the first comment, I was in some strange state of the mind thinking that firstUsed is a completely new variable not used before. Your patch is completely alright. \nThanks for your work and the library (I'm using XMLDictionary too)!\n. Argh. There is a serious problem in your patch:\n[defaults setObject:self.applicationVersion forKey:iRateLastVersionUsedKey];\nmust be set every time, not just the very first time (I had this one right in my second patch). This prevents ratings when onlyPromptIfLatestVersion is set. Looks like a new release will be needed.\nIn addition, \nself.firstUsed = [self.firstUsed dateByAddingTimeInterval:SECONDS_IN_A_DAY];\nisn't quite right - this adds one day to the first used day but when the user didn't use the app in the last say 20 days, this won't prevent the rating popup to appear. It's better to count the number of days from the current date as I did:\nNSDate *oneDayDelay = [NSDate dateWithTimeIntervalSinceNow:(self.daysUntilPrompt-1) * (-SECONDS_IN_A_DAY)];\n. Well, it doesn't look good to me, sorry. I believe the code should look this way:\nif (self.firstUsed)\n        {\n            if ([[NSDate date] timeIntervalSinceDate:self.firstUsed] >= self.daysUntilPrompt * SECONDS_IN_A_DAY))\n            {\n                //if was previously installed, but we haven't yet prompted for a rating\n                //don't reset, but make sure it won't rate for a day at least\n                self.firstUsed = [[NSDate date] dateByAddingTimeInterval:(self.daysUntilPrompt - 1) * -SECONDS_IN_A_DAY];\n            }\n        }\n        else\n        {\n            //reset defaults\n            [defaults setObject:[NSDate date] forKey:iRateFirstUsedKey];\n            [defaults setInteger:0 forKey:iRateUseCountKey];\n            [defaults setInteger:0 forKey:iRateEventCountKey];\n            [defaults setObject:nil forKey:iRateLastRemindedKey];\n        }\n        [defaults synchronize];\n1. The else is now executed even when the time check isn't satisfied, which is wrong. It should only be executed when first used (sorry, I haven't noticed this one before).\n2. You use < in the date check in the if but I believe it should be >. Are you sure about this? (It's 2AM here, I may be wrong, but this is also the way it was in my original patch.)\n3. Why do you use +1 in the if condition? I don't quite understand. The if should be the same like the one checking whether it's time to rate now. If it's not time to rate now, no problem.\n4. There should be -1 in the following, not +1 (you move back from now by one less day than daysUntilPrompt so the next day it will be daysUntilPrompt and the alert will pop up):\nself.firstUsed = [[NSDate date] dateByAddingTimeInterval:(self.daysUntilPrompt - 1) * -SECONDS_IN_A_DAY];\n5. Just one minor thing I have noticed is that since you update defaults in any case now, [defaults synchronize] should be moved out of the else block behind it. But this really isn't a big problem - you could actually skip the synchronize calls completely as iOS calls synchronize for you automatically (it's useful just in the case the app crashes before).\n. Hello Nick, thanks for the explanation, I wasn't aware of the promptForNewVersionIfUserRated knob (there are really lots of settings which can conflict with the code). Wouldn't it be safer to use [self ratedAnyVersion] for the reset check instead of [self ratedVersion:lastUsedVersion]?\nI understand what you mean why you added the +1, but there should be -1 I'm afraid. Have a look at the current code:\nelse if ([[NSDate date] timeIntervalSinceDate:self.firstUsed] > (self.daysUntilPrompt + 1) * SECONDS_IN_A_DAY)\n        {\n            //if was previously installed, but we haven't yet prompted for a rating\n            //don't reset, but make sure it won't rate for a day at least\n            self.firstUsed = [[NSDate date] dateByAddingTimeInterval:(self.daysUntilPrompt + 1) * -SECONDS_IN_A_DAY];\n        }\nThe else condition will be true one day after self.daysUntilPrompt and it won't prevent the rating window from appearing. Also if you set self.firstUsed with the +1 value, it will make the rating popup appear immediately because it's set to more than self.daysUntilPrompt days to the past.\n. I've seen it fixed in the previous commits but then you probably copy/pasted it from some older version.\nDon't worry, this is the kind of \"trivial\" patches that tend to break everything :-).\n. Just had a long look at master and it looks good to me now. But after the previous experience with this issue, don't trust me - the previous releases looked good to me before as well ;-).\n. Back to the [defaults synchronize] - I was actually referring to the \n[defaults setObject:self.applicationVersion forKey:iRateLastVersionUsedKey];\nset at the beginning and because it's possible that neither if or else are executed, then there's no synchronize.\nHopefully the last problem I've noticed, just going through the code before preparing my apps for release.\n. Hello Nick, thanks. Your patch looks definitely cleaner, there's just one problem that the firstUsed variable isn't defined for existing users using older iRate version so on the next app update it will behave as if it was used for the first time, counters will be reset and there will be the same problem as I reported before.\nBut this will be just a one-time event so I guess it's alright...\n. And the above will happen only for new users who used the 1.10 release so it's actually not such a big problem because the variable will be defined for any previous release. So it's even less a problem.\n. Yeah, when I wrote the first comment, I was in some strange state of the mind thinking that firstUsed is a completely new variable not used before. Your patch is completely alright. \nThanks for your work and the library (I'm using XMLDictionary too)!\n. Argh. There is a serious problem in your patch:\n[defaults setObject:self.applicationVersion forKey:iRateLastVersionUsedKey];\nmust be set every time, not just the very first time (I had this one right in my second patch). This prevents ratings when onlyPromptIfLatestVersion is set. Looks like a new release will be needed.\nIn addition, \nself.firstUsed = [self.firstUsed dateByAddingTimeInterval:SECONDS_IN_A_DAY];\nisn't quite right - this adds one day to the first used day but when the user didn't use the app in the last say 20 days, this won't prevent the rating popup to appear. It's better to count the number of days from the current date as I did:\nNSDate *oneDayDelay = [NSDate dateWithTimeIntervalSinceNow:(self.daysUntilPrompt-1) * (-SECONDS_IN_A_DAY)];\n. Well, it doesn't look good to me, sorry. I believe the code should look this way:\nif (self.firstUsed)\n        {\n            if ([[NSDate date] timeIntervalSinceDate:self.firstUsed] >= self.daysUntilPrompt * SECONDS_IN_A_DAY))\n            {\n                //if was previously installed, but we haven't yet prompted for a rating\n                //don't reset, but make sure it won't rate for a day at least\n                self.firstUsed = [[NSDate date] dateByAddingTimeInterval:(self.daysUntilPrompt - 1) * -SECONDS_IN_A_DAY];\n            }\n        }\n        else\n        {\n            //reset defaults\n            [defaults setObject:[NSDate date] forKey:iRateFirstUsedKey];\n            [defaults setInteger:0 forKey:iRateUseCountKey];\n            [defaults setInteger:0 forKey:iRateEventCountKey];\n            [defaults setObject:nil forKey:iRateLastRemindedKey];\n        }\n        [defaults synchronize];\n1. The else is now executed even when the time check isn't satisfied, which is wrong. It should only be executed when first used (sorry, I haven't noticed this one before).\n2. You use < in the date check in the if but I believe it should be >. Are you sure about this? (It's 2AM here, I may be wrong, but this is also the way it was in my original patch.)\n3. Why do you use +1 in the if condition? I don't quite understand. The if should be the same like the one checking whether it's time to rate now. If it's not time to rate now, no problem.\n4. There should be -1 in the following, not +1 (you move back from now by one less day than daysUntilPrompt so the next day it will be daysUntilPrompt and the alert will pop up):\nself.firstUsed = [[NSDate date] dateByAddingTimeInterval:(self.daysUntilPrompt - 1) * -SECONDS_IN_A_DAY];\n5. Just one minor thing I have noticed is that since you update defaults in any case now, [defaults synchronize] should be moved out of the else block behind it. But this really isn't a big problem - you could actually skip the synchronize calls completely as iOS calls synchronize for you automatically (it's useful just in the case the app crashes before).\n. Hello Nick, thanks for the explanation, I wasn't aware of the promptForNewVersionIfUserRated knob (there are really lots of settings which can conflict with the code). Wouldn't it be safer to use [self ratedAnyVersion] for the reset check instead of [self ratedVersion:lastUsedVersion]?\nI understand what you mean why you added the +1, but there should be -1 I'm afraid. Have a look at the current code:\nelse if ([[NSDate date] timeIntervalSinceDate:self.firstUsed] > (self.daysUntilPrompt + 1) * SECONDS_IN_A_DAY)\n        {\n            //if was previously installed, but we haven't yet prompted for a rating\n            //don't reset, but make sure it won't rate for a day at least\n            self.firstUsed = [[NSDate date] dateByAddingTimeInterval:(self.daysUntilPrompt + 1) * -SECONDS_IN_A_DAY];\n        }\nThe else condition will be true one day after self.daysUntilPrompt and it won't prevent the rating window from appearing. Also if you set self.firstUsed with the +1 value, it will make the rating popup appear immediately because it's set to more than self.daysUntilPrompt days to the past.\n. I've seen it fixed in the previous commits but then you probably copy/pasted it from some older version.\nDon't worry, this is the kind of \"trivial\" patches that tend to break everything :-).\n. Just had a long look at master and it looks good to me now. But after the previous experience with this issue, don't trust me - the previous releases looked good to me before as well ;-).\n. Back to the [defaults synchronize] - I was actually referring to the \n[defaults setObject:self.applicationVersion forKey:iRateLastVersionUsedKey];\nset at the beginning and because it's possible that neither if or else are executed, then there's no synchronize.\nHopefully the last problem I've noticed, just going through the code before preparing my apps for release.\n. ",
    "ryanwaggoner": "NOTE: I'm not the author and just discovered this library. He might love your feedback.\nWhile you might be right in theory, I think it's fine in this case. This is a self-contained library with no dependencies and being able to drop it in your project and just have it work is nice. The code quality is fine.\nRegardless, your comment seems very rude. Nick has put a LOT of time into all the open source stuff he releases and you're free to take it or leave it, but insulting it seems pretty lame.\nPlease don't behave this way; it discourages other developers from releasing code as open source for fear that some pompous nerd is going to come along and nitpick it.\nNick, thank you very much for this library, it's exactly what I needed!\n. NOTE: I'm not the author and just discovered this library. He might love your feedback.\nWhile you might be right in theory, I think it's fine in this case. This is a self-contained library with no dependencies and being able to drop it in your project and just have it work is nice. The code quality is fine.\nRegardless, your comment seems very rude. Nick has put a LOT of time into all the open source stuff he releases and you're free to take it or leave it, but insulting it seems pretty lame.\nPlease don't behave this way; it discourages other developers from releasing code as open source for fear that some pompous nerd is going to come along and nitpick it.\nNick, thank you very much for this library, it's exactly what I needed!\n. ",
    "robstott": "Well said, Ryan!\n\nOn 18 Apr 2014, at 16:14, Ryan Waggoner notifications@github.com wrote:\nNOTE: I'm not the author and just discovered this library. He might love your feedback.\nWhile you might be right in theory, I think it's fine in this case. This is a self-contained library with no dependencies and being able to drop it in your project and just have it work is nice. The code quality is fine.\nRegardless, your comment seems very rude. Nick has put a LOT of time into all the open source stuff he releases and you're free to take it or leave it, but insulting it seems pretty lame.\nPlease don't behave this way; it discourages other developers from releasing code as open source for fear that some pompous nerd is going to come along and nitpick it.\nNick, thank you very much for this library, it's exactly what I needed!\n\u2014\nReply to this email directly or view it on GitHub.\n. Well said, Ryan!\nOn 18 Apr 2014, at 16:14, Ryan Waggoner notifications@github.com wrote:\nNOTE: I'm not the author and just discovered this library. He might love your feedback.\nWhile you might be right in theory, I think it's fine in this case. This is a self-contained library with no dependencies and being able to drop it in your project and just have it work is nice. The code quality is fine.\nRegardless, your comment seems very rude. Nick has put a LOT of time into all the open source stuff he releases and you're free to take it or leave it, but insulting it seems pretty lame.\nPlease don't behave this way; it discourages other developers from releasing code as open source for fear that some pompous nerd is going to come along and nitpick it.\nNick, thank you very much for this library, it's exactly what I needed!\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "0xced": "I think you simply have to set the promptAtLaunch property to NO if you want to manually prompt when you want.\n. I think you simply have to set the promptAtLaunch property to NO if you want to manually prompt when you want.\n. ",
    "mhergon": "Solved!\nThanks!\n. Solved!\nThanks!\n. ",
    "OskarPeredo": "I just checked it on iOS 6, when I rotate the device while the rating alert view is opened, the text disappears. \n. I just checked it on iOS 6, when I rotate the device while the rating alert view is opened, the text disappears. \n. ",
    "dchohfi": "@nicklockwood hey, what you think about that?\n. @nicklockwood yah, you are def. right! But for me this a nice feature to have for developers who likes to use more NSNotificationCenter instead of a delegate on a singleton object, just a diff approach.\n. @nicklockwood hey, what you think about that?\n. @nicklockwood yah, you are def. right! But for me this a nice feature to have for developers who likes to use more NSNotificationCenter instead of a delegate on a singleton object, just a diff approach.\n. ",
    "StormFactory": "If you're looking for that type of functionality you show in the picture where users choose the stars before submitting the review, take a look at this project https://github.com/andrei200287/SARate\n. If you're looking for that type of functionality you show in the picture where users choose the stars before submitting the review, take a look at this project https://github.com/andrei200287/SARate\n. ",
    "inforeqd512": "Thank you for replying! this works... :-)\n. Thank you for replying! this works... :-)\n. ",
    "kajot": "I've prepared a demo of that issue:\nhttps://github.com/kajot/LocalizedStringsMergingFailure\ncheck out the test that passes/fails every other build:\nhttps://github.com/kajot/LocalizedStringsMergingFailure/blob/master/LocalizedStringsMergingFailureTests/LocalizedStringsMergingFailureTests.m\n. I've prepared a demo of that issue:\nhttps://github.com/kajot/LocalizedStringsMergingFailure\ncheck out the test that passes/fails every other build:\nhttps://github.com/kajot/LocalizedStringsMergingFailure/blob/master/LocalizedStringsMergingFailureTests/LocalizedStringsMergingFailureTests.m\n. ",
    "nikalra": "Support added #186 \n. @nicklockwood What do you think?\n. Support added #186 \n. @nicklockwood What do you think?\n. ",
    "Dhanam30": "Thanks it working @nicklockwood but i have one doubt?\n. Thanks How to put rate as my product?\n. My app is not in app store. how can I use your SDK in my app?\n. My app is not completed. how can i use?\n. Thanks Nicklockwood I try and update soon. thanks\n. Thanks it working @nicklockwood but i have one doubt?\n. Thanks How to put rate as my product?\n. My app is not in app store. how can I use your SDK in my app?\n. My app is not completed. how can i use?\n. Thanks Nicklockwood I try and update soon. thanks\n. ",
    "napolux": "Same issue for me... Cocoa.h not found. Of course my project is iOS.... Working on XCODE 6 (last version) and compiling for iOS7/8\nFixed by removing check in iRate.h.\n. Doesn't make any sense. You're rating an app you're already running...\n. Any news on this?\n. Any news on this? ;)\n. Same issue for me... Cocoa.h not found. Of course my project is iOS.... Working on XCODE 6 (last version) and compiling for iOS7/8\nFixed by removing check in iRate.h.\n. Doesn't make any sense. You're rating an app you're already running...\n. Any news on this?\n. Any news on this? ;)\n. ",
    "hixfield": "That escaped me, just looked at it and this is exactly what I meant.\nCase close, and thank you for pointing me to it!\n. I confirm I have the same issue on the iOS 11 GM seed. How can we fix this?. That escaped me, just looked at it and this is exactly what I meant.\nCase close, and thank you for pointing me to it!\n. I confirm I have the same issue on the iOS 11 GM seed. How can we fix this?. ",
    "aporat": "no doubt at some point UIAlertView will have to go. However, the issues with presenting a UIViewController instead of an UIAlertView on app launch might break logic in many apps, and the developers won't be even aware of these changes. \nI doubt developers will know they need to turn off a flag to prevent this issue from occurring. perhaps there's a way to auto dismiss iRate controller if another viewcontroller is trying to be presented?\n. thanks for the quick fix! the fact the flag is NO by default makes sense. \nI wonder if UIAlertViewController can be used safely within irate in the future, as presenting view controllers \"outside\" the app logic can be tricky.\n. no doubt at some point UIAlertView will have to go. However, the issues with presenting a UIViewController instead of an UIAlertView on app launch might break logic in many apps, and the developers won't be even aware of these changes. \nI doubt developers will know they need to turn off a flag to prevent this issue from occurring. perhaps there's a way to auto dismiss iRate controller if another viewcontroller is trying to be presented?\n. thanks for the quick fix! the fact the flag is NO by default makes sense. \nI wonder if UIAlertViewController can be used safely within irate in the future, as presenting view controllers \"outside\" the app logic can be tricky.\n. ",
    "Ramesh2589": "Thanks for Your timely support. Currently we using the version 1.11.3. Hope this version will also work for this. Can you please confirm, So that we can reupdate to app., store.\n. Thanks for Your timely support. Currently we using the version 1.11.3. Hope this version will also work for this. Can you please confirm, So that we can reupdate to app., store.\n. ",
    "allaire": "Note that I'm compiling my app using Xcode 6 with the 7.1 SDK because of a nasty bug with Autolayout in iOS 8. Could that cause some issues with the latest version?\n. Note that I'm compiling my app using Xcode 6 with the 7.1 SDK because of a nasty bug with Autolayout in iOS 8. Could that cause some issues with the latest version?\n. ",
    "dbgrandi": ":+1: to this.\nI've also started using a fork that disables the use of +load(). I wanted to defer the initialization until after my app has finished launching, but keeping it out of my testing environment is nice too.\n. :+1: to this.\nI've also started using a fork that disables the use of +load(). I wanted to defer the initialization until after my app has finished launching, but keeping it out of my testing environment is nice too.\n. ",
    "calebd": "You are, but the buttons are displayed in order they are added from left to right, or in the order they are added from top to bottom. Since you add the \"accept\" action first, it appears on the left.\n. You are, but the buttons are displayed in order they are added from left to right, or in the order they are added from top to bottom. Since you add the \"accept\" action first, it appears on the left.\n. ",
    "kyo9999": "ipad iOS8 + cocos2d-x error \n. i fix cocos2d-x problem\nAppController.h\n// ads AdViewControllerDelegate\n@interface AppController : NSObject {\n    //UIWindow window; // remove this\n    RootViewController    viewController;\n}\n@property (nonatomic, retain) UIWindow *window; // add this\nAppController.mm\n@implementation AppController\n@synthesize window; //add this\n. ipad iOS8 + cocos2d-x error \n. i fix cocos2d-x problem\nAppController.h\n// ads AdViewControllerDelegate\n@interface AppController : NSObject {\n    //UIWindow window; // remove this\n    RootViewController    viewController;\n}\n@property (nonatomic, retain) UIWindow *window; // add this\nAppController.mm\n@implementation AppController\n@synthesize window; //add this\n. ",
    "neonaleon": "@kyo9999 Thank you, I had the same problem and your solution worked for me. :+1: \n. @kyo9999 Thank you, I had the same problem and your solution worked for me. :+1: \n. ",
    "ni4": "I did quick and dirty fix in my fork, probably you'll find it usable: https://github.com/ni4/iRate\nHowever, beware - it shows blocking NSAlert\n. I did quick and dirty fix in my fork, probably you'll find it usable: https://github.com/ni4/iRate\nHowever, beware - it shows blocking NSAlert\n. ",
    "lazerwalker": "Awesome, thanks.\u00a0\nAs a casual README reader, I saw that but was a bit confused. Calling it \"promptAtLaunch\" implied to me that that prompt might be shown automatically at other times, and this is only to explicitly stop automatic prompts that happen when the app first loads.\u00a0\nThis is obviously only one data point, so feel free to disregard completely if you'd like :)\nThanks again for the quick response!\n. Awesome, thanks.\u00a0\nAs a casual README reader, I saw that but was a bit confused. Calling it \"promptAtLaunch\" implied to me that that prompt might be shown automatically at other times, and this is only to explicitly stop automatic prompts that happen when the app first loads.\u00a0\nThis is obviously only one data point, so feel free to disregard completely if you'd like :)\nThanks again for the quick response!\n. ",
    "Alex-Ozun": "From what i understand, the user is asked to rate the app, at the same time, the app crashes, then every subsequent launch of the application crashes. I will check the posts from users but it was only one or two and once the app starts crashing, they can't ever get the app to work again, at least based on what the comments say.\n. From what i understand, the user is asked to rate the app, at the same time, the app crashes, then every subsequent launch of the application crashes. I will check the posts from users but it was only one or two and once the app starts crashing, they can't ever get the app to work again, at least based on what the comments say.\n. ",
    "zspoelstra": "This appears to be an Apple bug that has been fixed in 8.3.  https://devforums.apple.com/message/1092306#1092306\n. That link is still valid if you have an Apple developer account. The referenced thread is not this exact issue but they are both because of the OpenGL context. Couple of notes from that thread.\n\nApple support confirmed with us that there is a bug on 32 bit devices running iOS 8.x that may cause a crash if a MapView (or other OpenGL context) is updated while the app is in the background.\n\nand from an Apple employee\n\nBut either way this is an Apple Bug to fix, the workaround itself is fairly heavyweight (assuming it works, which I'm not certain of).\n\nand then directly after that\n\nLooks like Apple has fixed the issue and I don't see it anymore in iOS 8.3\n. This appears to be an Apple bug that has been fixed in 8.3.  https://devforums.apple.com/message/1092306#1092306\n. That link is still valid if you have an Apple developer account. The referenced thread is not this exact issue but they are both because of the OpenGL context. Couple of notes from that thread.\nApple support confirmed with us that there is a bug on 32 bit devices running iOS 8.x that may cause a crash if a MapView (or other OpenGL context) is updated while the app is in the background.\n\nand from an Apple employee\n\nBut either way this is an Apple Bug to fix, the workaround itself is fairly heavyweight (assuming it works, which I'm not certain of).\n\nand then directly after that\n\nLooks like Apple has fixed the issue and I don't see it anymore in iOS 8.3\n. \n",
    "gulun": "@zspoelstra\nThe link is invalid.....\nI want to know more about the bug......\n. @zspoelstra\nThe link is invalid.....\nI want to know more about the bug......\n. ",
    "mrjotika": "thank you very much bro\ncan you show me detail! I'm beginer.\n. thank you very much bro\ncan you show me detail! I'm beginer.\n. ",
    "leofto": "I don't know what the app review team is up to. They have been rejecting my apps for some ridiculous reasons. I feel like they have a quota of rejections they need to meet.\nThanks for the quick reply. I will try to appeal\n. uhm, turns out it is not iRate related.\nI just got back a response for my appeal. They specifically said the class MCiHasApp is the culprit. I think it is the Mobile Core ad framework. \nSorry for the false alarm.\n. I don't know what the app review team is up to. They have been rejecting my apps for some ridiculous reasons. I feel like they have a quota of rejections they need to meet.\nThanks for the quick reply. I will try to appeal\n. uhm, turns out it is not iRate related.\nI just got back a response for my appeal. They specifically said the class MCiHasApp is the culprit. I think it is the Mobile Core ad framework. \nSorry for the false alarm.\n. ",
    "sfransen": "I agree my app was rejected 3 times in a row for stupid things\nTwo have them reasons have been there for three years now\nSent from my iPhone5\n\nOn May 4, 2015, at 3:02 PM, leofto notifications@github.com wrote:\nI don't know what the app review team is up to. They have been rejecting my apps for some ridiculous reasons. I feel like they have a quota of rejections they need to meet.\nThanks for the quick reply. I will try to appeal\n\u2014\nReply to this email directly or view it on GitHub.\n. I agree my app was rejected 3 times in a row for stupid things\n\nTwo have them reasons have been there for three years now\nSent from my iPhone5\n\nOn May 4, 2015, at 3:02 PM, leofto notifications@github.com wrote:\nI don't know what the app review team is up to. They have been rejecting my apps for some ridiculous reasons. I feel like they have a quota of rejections they need to meet.\nThanks for the quick reply. I will try to appeal\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "acegreen": "iRateDidOpenAppStore()\nCurrently not being called though. Not sure why. I'm using SARate \n. iRateDidOpenAppStore()\nCurrently not being called though. Not sure why. I'm using SARate \n. ",
    "gson1703": "I also ran into this issue.  My app generates no other network traffic, so an HTTPS request on every startup is a noticeable increase, and if a user were to ask me why this traffic is being generated, right now I wouldn't have a good answer.\n. I also ran into this issue.  My app generates no other network traffic, so an HTTPS request on every startup is a noticeable increase, and if a user were to ask me why this traffic is being generated, right now I wouldn't have a good answer.\n. ",
    "jparise": "See #218.\n. This was fixed #218.\n. @nicklockwood, would you consider merging this? It would be helpful to get this in place in advance of the public iOS 9 release.\n. See #218.\n. This was fixed #218.\n. @nicklockwood, would you consider merging this? It would be helpful to get this in place in advance of the public iOS 9 release.\n. ",
    "shoby": ":+1: \n. :+1: \n. ",
    "cutmail": ":+1: \n. :+1: \n. ",
    "ninjinkun": "+1\n. +1\n. ",
    "crossle": ":+1: \n. :+1: \n. ",
    "davidseek": "+1\n. +1\n. ",
    "dasmer": "Fixes #221 \n. Fixes #221 \n. ",
    "racer1988": "This doesnt work :(\nWhen cloning the project with carthage there is no pbxproj file in the checkout.\n\nDependency \"iRate\" has no shared framework schemes\nIf you believe this to be an error, please file an issue with the maintainers at https://github.com/nicklockwood/iRate/issues/new\n. This is because there is no tag after 1.11.4\n. *** Checking out iRate at \"1.11.6\"\nYep! Good Job! Thanks a lot for this :D\n. This doesnt work :(\nWhen cloning the project with carthage there is no pbxproj file in the checkout.\n\nDependency \"iRate\" has no shared framework schemes\nIf you believe this to be an error, please file an issue with the maintainers at https://github.com/nicklockwood/iRate/issues/new\n. This is because there is no tag after 1.11.4\n. *** Checking out iRate at \"1.11.6\"\nYep! Good Job! Thanks a lot for this :D\n. ",
    "aramusss": "Please :+1: \n. Please :+1: \n. ",
    "Legoless": "This is already fixed, just was not pushed to CocoaPods yet. @nicklockwood can you update?\n. This is already fixed, just was not pushed to CocoaPods yet. @nicklockwood can you update?\n. ",
    "amalmstedt": "Looking forward to this release as well!\n. Looking forward to this release as well!\n. ",
    "Tagalong": "was it updated on cocoapods?\n. was it updated on cocoapods?\n. ",
    "glentregoning": "Looks like this went out with 1.11.6 / 1.11.5\n. Looks like this went out with 1.11.6 / 1.11.5\n. ",
    "ogezue": "+1 The solution is working! (I'm using Swift and Cocoapods)\n. +1 The solution is working! (I'm using Swift and Cocoapods)\n. ",
    "appsunited": "+1 Thanks for solving this! Also using Swift with Cocoapods and version 1.11.4 is not translating. so it would be great to merge this solution.\n. +1 Thanks for solving this! Also using Swift with Cocoapods and version 1.11.4 is not translating. so it would be great to merge this solution.\n. ",
    "weakfl": "+1, please merge\n. +1, please merge\n. ",
    "bickster": "Please add this functionality.\n. Please add this functionality.\n. ",
    "cameronehrlich": "@napolux if you're iTunes affiliate code is included in the link to the store, you get a cut of anything they purchase within the next 24 hours.  So for small time indie devs like myself, i'll take whatever revenue I can get ;)\n. @napolux if you're iTunes affiliate code is included in the link to the store, you get a cut of anything they purchase within the next 24 hours.  So for small time indie devs like myself, i'll take whatever revenue I can get ;)\n. ",
    "delebedev": "It' looks like aforementioned non-recomended behaviour breaks when delegate is implemented in Swift.\n```\n0\nCrashed: com.apple.main-thread\nEXC_BAD_ACCESS KERN_INVALID_ADDRESS 0x000001a1a0435f18\n Raw\n0   libobjc.A.dylib \nlookUpImpOrForward + 80\n1   libobjc.A.dylib \n_objc_msgSend_uncached_impcache + 56\n2   SwiftGift \niRate.m line 657\n-[iRate connectionError:]\n3\nFoundation\n__NSThreadPerformPerform + 340\n9\nUIKit \nUIApplicationMain + 204\n10  SwiftGift \nmain.m line 14\nmain\n```\n@nicklockwood any chance to merge this? It looks like very appropriate change.\n. It' looks like aforementioned non-recomended behaviour breaks when delegate is implemented in Swift.\n```\n0\nCrashed: com.apple.main-thread\nEXC_BAD_ACCESS KERN_INVALID_ADDRESS 0x000001a1a0435f18\n Raw\n0   libobjc.A.dylib \nlookUpImpOrForward + 80\n1   libobjc.A.dylib \n_objc_msgSend_uncached_impcache + 56\n2   SwiftGift \niRate.m line 657\n-[iRate connectionError:]\n3\nFoundation\n__NSThreadPerformPerform + 340\n9\nUIKit \nUIApplicationMain + 204\n10  SwiftGift \nmain.m line 14\nmain\n```\n@nicklockwood any chance to merge this? It looks like very appropriate change.\n. ",
    "chadmoone": "@nicklockwood any updates? This is an actual intermittent crashing bug for any swift implementation (theoretically objc as well). The PR changes no API or functionality, but simply avoids using the recommended-against and dangerous technique. \nThis is currently the #2 crash in a popular production app. I think this library is great, but I'm going to have to fork this permanently or roll our own if we can't get this resolved. \n. @nicklockwood any updates? This is an actual intermittent crashing bug for any swift implementation (theoretically objc as well). The PR changes no API or functionality, but simply avoids using the recommended-against and dangerous technique. \nThis is currently the #2 crash in a popular production app. I think this library is great, but I'm going to have to fork this permanently or roll our own if we can't get this resolved. \n. ",
    "jigmelam": "Thank you!\n. good. Please check & merge soon.\nThanks so much!. Thank you!\n. good. Please check & merge soon.\nThanks so much!. ",
    "LukeDurrant": "Adds an optional and additional prompt before asking the user if they would like to rate on the app store\n\n. iOS support only :(\n. Adds an optional and additional prompt before asking the user if they would like to rate on the app store\n\n. iOS support only :(\n. ",
    "sirnacnud": "I would be interested in this functionality as well.. I would be interested in this functionality as well.. ",
    "raberm": "Sorry, was already fixed but pod version is not yet bumped\n. Sorry, was already fixed but pod version is not yet bumped\n. ",
    "n4jim": "same here. same here. ",
    "StainlessStlRat": "Did it work?\n. Did it work?\n. ",
    "iLandes": "I uses cocoapod to install iRate\niRate is in my xCode workspace and I can see all the localization files on Pods/iRate/Ressources/iRate.bundle\n. I just add irate.bundle in Targets/Build Phases/Copy Bundle Ressources\nIt's works fine but I not sure it's the best way to do. Feel free to tell me what is the good practice \nnote : I found https://github.com/PlayApple/SwiftyiRate. Is it a best library for swift developer ?\n. I uses cocoapod to install iRate\niRate is in my xCode workspace and I can see all the localization files on Pods/iRate/Ressources/iRate.bundle\n. I just add irate.bundle in Targets/Build Phases/Copy Bundle Ressources\nIt's works fine but I not sure it's the best way to do. Feel free to tell me what is the good practice \nnote : I found https://github.com/PlayApple/SwiftyiRate. Is it a best library for swift developer ?\n. ",
    "taher-mosbah": "Reading the code in details I think iRate alert is only displayed on app launch, is that correct ?\n. Reading the code in details I think iRate alert is only displayed on app launch, is that correct ?\n. ",
    "harrylevn": "Me too. Fixed: change [self.visibleAlert show] --> [(UIAlertView )self.visibleAlert show]. Me too. Fixed: change [self.visibleAlert show] --> [(UIAlertView )self.visibleAlert show]. ",
    "serialbandicoot": "OK - Figured it out \ud83d\udc4d \nhttps://github.com/nicklockwood/iRate/blob/master/Examples/iPhone%20Custom%20UI%20Demo/Classes/iRateAppDelegate.m. OK - Figured it out \ud83d\udc4d \nhttps://github.com/nicklockwood/iRate/blob/master/Examples/iPhone%20Custom%20UI%20Demo/Classes/iRateAppDelegate.m. ",
    "lewis-smith": "Adding support for this would be nice too:\n\nTo automatically open a page on which users can write a review in the App Store, append the query parameter action=write-review to your product URL.\n\nhttps://developer.apple.com/reference/storekit/skstorereviewcontroller/2851536-requestreview?language=objc. Adding support for this would be nice too:\n\nTo automatically open a page on which users can write a review in the App Store, append the query parameter action=write-review to your product URL.\n\nhttps://developer.apple.com/reference/storekit/skstorereviewcontroller/2851536-requestreview?language=objc. ",
    "DMAPro": "I'd prefer to have an option to turn it off because of Apple's limitations (since using it isn't mandatory for now).. I'd prefer to have an option to turn it off because of Apple's limitations (since using it isn't mandatory for now).. ",
    "EpicDraws": "Submitted https://github.com/nicklockwood/iRate/pull/283 to get this going.. Addresses #278 . Submitted https://github.com/nicklockwood/iRate/pull/283 to get this going.. Addresses #278 . ",
    "alexfoxy": "I was trying out @EpicDraws commit. Seems to work. \nDoes anyone know what happens if you ask for a rating on iOS 10.3 and you have already used up your allotted 3 requests?. any ideas if this is solid ?. I was trying out @EpicDraws commit. Seems to work. \nDoes anyone know what happens if you ask for a rating on iOS 10.3 and you have already used up your allotted 3 requests?. any ideas if this is solid ?. ",
    "ptsimpso": "I'm also wondering about the solution for this. This seems to be a possible option: http://stackoverflow.com/questions/24137212/initialize-class-method-for-classes-in-swift\nBut I'd love to hear from those more familiar with the project for a final implementation.. I'm also wondering about the solution for this. This seems to be a possible option: http://stackoverflow.com/questions/24137212/initialize-class-method-for-classes-in-swift\nBut I'd love to hear from those more familiar with the project for a final implementation.. ",
    "siberianisaev": "Yeah think can be override init method of app delegate  \u0441\u0441 @nicklockwood . Yeah think can be override init method of app delegate  \u0441\u0441 @nicklockwood . ",
    "weepy": "Is this working ? Quite interested in using it ! . Is this working ? Quite interested in using it ! . ",
    "cbess": "@nicklockwood Will this be merged into the codebase?. @nicklockwood Will this be merged into the codebase?. ",
    "Jules2010": "+1. Sorry I updated my question. I would like the rating dialog to display immediately after 5 significant events have occurred.. So do I need to use logEvent to increment and a condition of eventCount with PromptForRating ? But surely I need to reset the event count ? Actually I shouldn't really show it again afterwards.. Thanks, is there a method to show the dialog just based on reaching eventsUntilPrompt?\nIf not if I checked the eventCount and used PromptForRating, code I stop the rating being shown once other criteria was met? I don't want to ask them again once I've had 5 significant events and asked them.. +1. Sorry I updated my question. I would like the rating dialog to display immediately after 5 significant events have occurred.. So do I need to use logEvent to increment and a condition of eventCount with PromptForRating ? But surely I need to reset the event count ? Actually I shouldn't really show it again afterwards.. Thanks, is there a method to show the dialog just based on reaching eventsUntilPrompt?\nIf not if I checked the eventCount and used PromptForRating, code I stop the rating being shown once other criteria was met? I don't want to ask them again once I've had 5 significant events and asked them.. ",
    "hlung": "I got this for one user also. He seem to try many many times and got like 50+ crashes. But interestingly there's only one user affected. We are using iRate (1.11.7).. I got this for one user also. He seem to try many many times and got like 50+ crashes. But interestingly there's only one user affected. We are using iRate (1.11.7).. ",
    "akovalov": "useSKStoreReviewControllerIfAvailable has no effect in latest version 1.12.1, because property is not used in promptForRating function. useSKStoreReviewControllerIfAvailable has no effect in latest version 1.12.1, because property is not used in promptForRating function. ",
    "zapjonny": "iRate.sharedInstance().openRatingsPageInAppStore() opens AppStore allright, but fails to open the proper app store page for the app. All I get is \"App Store\u306b\u63a5\u7d9a\u3067\u304d\u307e\u305b\u3093\" = \"Cannot connect to App Store\"ish. Using app built with Xcode 8.x, on iOS 11 GM.. Will this repo be fixed soon?\nHow can we fix this in the meantime?. Update:\nFirst, sorry my bad, I had locked iRate below version 12 in my podfile.\nFixing that, I think I know what was going on. I probably locked iRate below 12 in order to avoid the iOS 10.3+ way of opening the in-app rate alert (I don't remember the reason for this, but hey).\nIn my app I had two cases where I used iRate.\n\nWhen you do an in-app action enough times, the alert \"wanna rate?\" popped up.\nIn the options menu, I had an extra option \"rate now\" which directed the user to the app store review page, so the user could rate easily at any time.\n\nNow, the iRate.sharedInstance().openRatingsPageInAppStore() is still broken for iOS 11.0 users.\nHowever iRate.sharedInstance().promptIfNetworkAvailable() will work, if we accept the 10.3 in our app. I guess that should be the proper way since iOS 10.3 anyway and we just have to live with it.\nSo at this point, I assume that for me, 1 should work if I use the latest iRate, and 2 will work if use iRate.sharedInstance().promptIfNetworkAvailable() instead of iRate.sharedInstance().openRatingsPageInAppStore() which won't work on iOS 11.0.. Okay, I guess even that's not the end of the story. I thought twice and thrice and I guess case 2 above is a no-go since iOS 11.0 (or probably also since 10.3, in a way).\nFirst, it doesn't make sense to prompt the user in the same way in 2 as I do in 1, I'd want to open the review page below 10.3 and open the in-app SKStoreReviewController from 10.3 and up. However with the current iRate there is no way to do that, unless possibly if we fix it so we can call [self promptForRating: NO];.\nBut the discussion doesn't end there because on iOS 10.3+ that would ultimately call https://developer.apple.com/documentation/storekit/skstorereviewcontroller/2851536-requestreview which, as is stated in the docs, might or might not open the review UI. Which is in terms with how Apple wants the review experience to work...\nI guess I will have to advocate to my director to remove case 2 and only use case 1 above - rate upon some rare user interaction.\nAlso in the long run I guess Apple is specifically wanting to shoot down iRate and similar libraries that show review popups.. ^ That one really works... so for a fast fix, I guess I could go with it if iRate was updated with this. Will iRate be updated or will I have to fork this? \ud83d\ude44. @nicklockwood Good one! It works \u270c\ufe0f\nI\u2019ll use this and go back to iRate below 12 for minimum code changes.. iRate.sharedInstance().openRatingsPageInAppStore() opens AppStore allright, but fails to open the proper app store page for the app. All I get is \"App Store\u306b\u63a5\u7d9a\u3067\u304d\u307e\u305b\u3093\" = \"Cannot connect to App Store\"ish. Using app built with Xcode 8.x, on iOS 11 GM.. Will this repo be fixed soon?\nHow can we fix this in the meantime?. Update:\nFirst, sorry my bad, I had locked iRate below version 12 in my podfile.\nFixing that, I think I know what was going on. I probably locked iRate below 12 in order to avoid the iOS 10.3+ way of opening the in-app rate alert (I don't remember the reason for this, but hey).\nIn my app I had two cases where I used iRate.\n\nWhen you do an in-app action enough times, the alert \"wanna rate?\" popped up.\nIn the options menu, I had an extra option \"rate now\" which directed the user to the app store review page, so the user could rate easily at any time.\n\nNow, the iRate.sharedInstance().openRatingsPageInAppStore() is still broken for iOS 11.0 users.\nHowever iRate.sharedInstance().promptIfNetworkAvailable() will work, if we accept the 10.3 in our app. I guess that should be the proper way since iOS 10.3 anyway and we just have to live with it.\nSo at this point, I assume that for me, 1 should work if I use the latest iRate, and 2 will work if use iRate.sharedInstance().promptIfNetworkAvailable() instead of iRate.sharedInstance().openRatingsPageInAppStore() which won't work on iOS 11.0.. Okay, I guess even that's not the end of the story. I thought twice and thrice and I guess case 2 above is a no-go since iOS 11.0 (or probably also since 10.3, in a way).\nFirst, it doesn't make sense to prompt the user in the same way in 2 as I do in 1, I'd want to open the review page below 10.3 and open the in-app SKStoreReviewController from 10.3 and up. However with the current iRate there is no way to do that, unless possibly if we fix it so we can call [self promptForRating: NO];.\nBut the discussion doesn't end there because on iOS 10.3+ that would ultimately call https://developer.apple.com/documentation/storekit/skstorereviewcontroller/2851536-requestreview which, as is stated in the docs, might or might not open the review UI. Which is in terms with how Apple wants the review experience to work...\nI guess I will have to advocate to my director to remove case 2 and only use case 1 above - rate upon some rare user interaction.\nAlso in the long run I guess Apple is specifically wanting to shoot down iRate and similar libraries that show review popups.. ^ That one really works... so for a fast fix, I guess I could go with it if iRate was updated with this. Will iRate be updated or will I have to fork this? \ud83d\ude44. @nicklockwood Good one! It works \u270c\ufe0f\nI\u2019ll use this and go back to iRate below 12 for minimum code changes.. ",
    "mTuran": "Bug confirmed. useSKStoreReviewControllerIfAvailable is ignored.. Yes, I heard this before but I submitted a lot of apps that does not use SKStoreReviewControllerIfAvailable and they approved without issues. . Bug confirmed. useSKStoreReviewControllerIfAvailable is ignored.. Yes, I heard this before but I submitted a lot of apps that does not use SKStoreReviewControllerIfAvailable and they approved without issues. . ",
    "djachenko": "Oh. I've overlooked some parts of interface designed for manual review requesting. I'm sorry for disturbance.. Oh. I've overlooked some parts of interface designed for manual review requesting. I'm sorry for disturbance.. ",
    "rahul-malik": "Do you think the most common usage is zero configuration though? The problem with +load is that we'll incur the pre-main cost past on every app load.\nWe previously had a fork of the project to handle this but I'd like to move us back on to main repository. \nWould you be open to a PR that uses a conditional #define to use an  +initialize method instead which could be used by consumers that know they are configuring irate?. Do you think the most common usage is zero configuration though? The problem with +load is that we'll incur the pre-main cost past on every app load.\nWe previously had a fork of the project to handle this but I'd like to move us back on to main repository. \nWould you be open to a PR that uses a conditional #define to use an  +initialize method instead which could be used by consumers that know they are configuring irate?. ",
    "bvirlet": "Hello,\nI also have another issue with the + load: if we want to subclass iRate to add some functionality, it's impossible to do because + load will instantiate a singleton of type iRate and not iRateSubclass. Then if we access [iRateSubclass shared].myNewProperty we will get a crash.\nI feel that load is a bit dangerous in that it's not a very common pattern.\nThanks!. The URL seems not to work anymore with the action=write-review parameter (I can reproduce the issue in Safari). Eg the App Store doesn't support opening (scrolling) to the new \"Ratings & Reviews\" section.. Maybe you can fork, and offer a pull request \ud83d\ude09 . We've seen a similar issue. While implementing the the + load in iRate make it \"magic\", it causes undefined behavior because there is no control as to when  +load is called. The proof of this undefined behavior is this bug affecting iOS 11. \nWe think that load should be removed as it causes these problems.. Hello,\nI also have another issue with the + load: if we want to subclass iRate to add some functionality, it's impossible to do because + load will instantiate a singleton of type iRate and not iRateSubclass. Then if we access [iRateSubclass shared].myNewProperty we will get a crash.\nI feel that load is a bit dangerous in that it's not a very common pattern.\nThanks!. The URL seems not to work anymore with the action=write-review parameter (I can reproduce the issue in Safari). Eg the App Store doesn't support opening (scrolling) to the new \"Ratings & Reviews\" section.. Maybe you can fork, and offer a pull request \ud83d\ude09 . We've seen a similar issue. While implementing the the + load in iRate make it \"magic\", it causes undefined behavior because there is no control as to when  +load is called. The proof of this undefined behavior is this bug affecting iOS 11. \nWe think that load should be removed as it causes these problems.. ",
    "Abhishek-NickelFox": "@nicklockwood\nSo we don't need to add a code ?\nSubmit button will works automatically when in distribution?\nHow i get to know it working perfectly without enabling submit?. @nicklockwood\nSo we don't need to add a code ?\nSubmit button will works automatically when in distribution?\nHow i get to know it working perfectly without enabling submit?. ",
    "janbjelicic-sunhill": "I tried it an hour ago, updated to the version 1.12.1 via Cocoapods. I tried it an hour ago, updated to the version 1.12.1 via Cocoapods. ",
    "EddyLB": "I use version 1.12.1 via Cocoapods and confirm.\nI get the message 'Cannot Connect to App Store' in the App Store app when calling [[iRate sharedInstance] openRatingsPageInAppStore];. Confirmed. Thanks. I use version 1.12.1 via Cocoapods and confirm.\nI get the message 'Cannot Connect to App Store' in the App Store app when calling [[iRate sharedInstance] openRatingsPageInAppStore];. Confirmed. Thanks. ",
    "vtourraine": "I confirm this is an issue. Even using the https-based URL (e.g. https://itunes.apple.com/app/blabla/idXXXXXX?action=write-review) fails to load.\nThe documentation is still suggesting to use action=write-review, so I think it\u2019s Radar time.\nIn the meantime, apps should not open the \u201cwrite review\u201d URL on iOS 11, just the basic App Store link.. I confirm this is an issue. Even using the https-based URL (e.g. https://itunes.apple.com/app/blabla/idXXXXXX?action=write-review) fails to load.\nThe documentation is still suggesting to use action=write-review, so I think it\u2019s Radar time.\nIn the meantime, apps should not open the \u201cwrite review\u201d URL on iOS 11, just the basic App Store link.. ",
    "neave": "A workaround is to include a two-letter country code and app name in the URL, such as this:\nhttps://itunes.apple.com/us/app/twitter/id333903271?mt=8&action=write-review\nor \nitms-apps://itunes.apple.com/us/app/twitter/id333903271?mt=8&action=write-review\nThe full URL for your app can be obtained from https://linkmaker.itunes.apple.com/\nThis successfully opens the \"write a review\" interface in the iOS 11 App Store. This workaround is not ideal however as changing the app title would also change its URL, thus breaking the workaround. Hopefully Apple will fix this soon for the shorter URL.\nSee rdar://34498138. A workaround is to include a two-letter country code and app name in the URL, such as this:\nhttps://itunes.apple.com/us/app/twitter/id333903271?mt=8&action=write-review\nor \nitms-apps://itunes.apple.com/us/app/twitter/id333903271?mt=8&action=write-review\nThe full URL for your app can be obtained from https://linkmaker.itunes.apple.com/\nThis successfully opens the \"write a review\" interface in the iOS 11 App Store. This workaround is not ideal however as changing the app title would also change its URL, thus breaking the workaround. Hopefully Apple will fix this soon for the shorter URL.\nSee rdar://34498138. ",
    "dpa99c": "The country code and app name must be present in the URL but are ignored - only the ID needs to change. Also mt=8 is not required. I.e. this works: \nitms-apps://itunes.apple.com/xy/app/foo/id{your_app_id}?acti\u200c\u200bon=write-review\n\nTested on iOS 11.0 (15A372).\n. The country code and app name must be present in the URL but are ignored - only the ID needs to change. Also mt=8 is not required. I.e. this works: \nitms-apps://itunes.apple.com/xy/app/foo/id{your_app_id}?acti\u200c\u200bon=write-review\n\nTested on iOS 11.0 (15A372).\n. ",
    "tirrorex": "Can confirm workaround to be working, thanks. Can confirm workaround to be working, thanks. ",
    "spookyhouse": "Thanks @neave. This works!. Thanks @neave. This works!. ",
    "alper": "OK. And this also works on iOS 10 I just tested.. OK. And this also works on iOS 10 I just tested.. ",
    "mstolin": "@dpa99c \nI fixed this issue for my app (im not using iRate) with using an url like tms-apps://itunes.apple.com/app/twitter/id333903271?mt=8&action=write-review. I didnt add a language code but mt=8 is still necessary. Without mt=8 the App Store app will show the Can't connect to App Store error message. I tested on iPhone 5s iOS 11.0.. @dpa99c \nI fixed this issue for my app (im not using iRate) with using an url like tms-apps://itunes.apple.com/app/twitter/id333903271?mt=8&action=write-review. I didnt add a language code but mt=8 is still necessary. Without mt=8 the App Store app will show the Can't connect to App Store error message. I tested on iPhone 5s iOS 11.0.. ",
    "parthjdabhi": "Yes, @nicklockwood I checked that.\nThis is to know What's new inside app when a user using the first time.\nBut as you are already iTunes API so i thought to add alert for the new app available in app store. \nIt's okay I will manage on my separate branch.. Yes, @nicklockwood I checked that.\nThis is to know What's new inside app when a user using the first time.\nBut as you are already iTunes API so i thought to add alert for the new app available in app store. \nIt's okay I will manage on my separate branch.. ",
    "garrettmoon": "I assume this will also pretty quickly use up the 3 requests per year restriction on SKStoreReviewController.. Feel free to close this out, I mainly wanted to make sure it was reported if it was unknown.\nOne other point, because the ratedThisVersion flag is not set, the promptForNewVersionIfUserRated option does not work?. I assume this will also pretty quickly use up the 3 requests per year restriction on SKStoreReviewController.. Feel free to close this out, I mainly wanted to make sure it was reported if it was unknown.\nOne other point, because the ratedThisVersion flag is not set, the promptForNewVersionIfUserRated option does not work?. ",
    "shutterzee": "I had some time to look into this further...since iRate implements + (void)load it actually is loaded before application:didFinishLaunchingWithOptions: is called and therefore ignores the changes we are making to the settings since it actually begins the startup prompt mechanism sooner than expected. A potential work-around in our app that I'm experimenting with is to implement + (void)load for our app delegate class. Initializing iRate in that method actually works - although I'm not sure of what crazy other side-effects that may cause.\nAdditionally, I now see that some of the example code uses +initialize to initialize iRate but the pod documentation talks about application:didFinishLaunchingWithOptions: - I think +initialize is another option but +load seems slightly safer in my case.. I had some time to look into this further...since iRate implements + (void)load it actually is loaded before application:didFinishLaunchingWithOptions: is called and therefore ignores the changes we are making to the settings since it actually begins the startup prompt mechanism sooner than expected. A potential work-around in our app that I'm experimenting with is to implement + (void)load for our app delegate class. Initializing iRate in that method actually works - although I'm not sure of what crazy other side-effects that may cause.\nAdditionally, I now see that some of the example code uses +initialize to initialize iRate but the pod documentation talks about application:didFinishLaunchingWithOptions: - I think +initialize is another option but +load seems slightly safer in my case.. ",
    "sitefeng": "In swift 4 iOS 11, the submit button is disabled when initializing from application:didFinishLaunchingWithOptions: or init functions from the AppDelegate. initialize and load function overrides are not permitted in Swift. In swift 4 iOS 11, the submit button is disabled when initializing from application:didFinishLaunchingWithOptions: or init functions from the AppDelegate. initialize and load function overrides are not permitted in Swift. "
}