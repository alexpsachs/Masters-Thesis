{
    "jeromegn": "Thanks! Pulled!\n. Interesting. Though \"url\" is not widely regarded as Universal Resource Location, so it might not work in some people's mind. jashkenas proposed \"url\" at first too... Mmm...\nLet me think about it ;)\n. After 2 years of thinking (not true, just stumbled on this now that I'm cleaning up the repo), maybe something like this could work:\njavascript\nvar Collection = Backbone.Collection.extend({\n  url: Backbone.LocalStorage(\"collectionStore\");\n});\nAnd then somehow override url on Backbone.Model to figure out if it's using Backbone.LocalStorage...\n. @masklinn so how does Backbone know to use the localStorage adapter if there's no mention of it anywhere?\nBackbone.localStorage is not replacing Backbone.sync anymore. It simply uses localSync if the model or collection has the localStorage property present.\n. Thanks for pointing that out. Pulled!\n. Interesting.\nI think ultimately this should be implemented as a cache mechanism: You use Backbone.sync normally, but then you can set a cache on each collection in localStorage with an expiration. Set it to 0 to never use the cache on specific collections...\nThoughts?\n. Right. I meant it to stay as it is at the moment, but add a localCache property on the collections/models that'll do the same as localStorage but in harmony with RESTful calls to the server :) It would act as a real cache.\nFor now your pull request seems to be too much of a change to the API... It would have to default to Backbone.localSync somehow.\n. I did not notice that. Pretty interesting.\nWish I had more free time. If anyone would like to send me a pull request with a solution, I'd be glad to merge it.\n. I agree with kmiyashiro.\nMost people are probably using the one in the DocumentCloud Backbone repository, but there's still 100 watchers here and a few forks.\nCurrently (at this line), we're checking for the localStorage property. Maybe we can simply call the original Backbone.Sync in the case where that property is undefined. Anyway if it isn't defined, the adapter won't work.\n. Thanks a bunch!\nUsing YUI compressor btw.\n. I guess we could keep a counter stored somewhere.\nAs I understand it though, it would only shave off a few bytes per entry.\nTruth be told, localStorage is not useful for large amounts of data. A better alternative would probably be IndexedDB. I haven't dug deep enough in those.\nIf you try it out and it yields significant space savings, then for sure supply a pull request :)\n. Would love to pull this. It's become stale since I pulled a few requests in. Could you fix it?\n. I was reluctant because of the change in API, but I think the changes are right.\nNow let's hope people read the docs and don't just copy the Todos example app's code.\n. Sorry about that, I pulled a few requests in and now this pull request cannot be automatically merged. Could you please fix it?\n. Backbone doesn't do this. I'm not going to support extra features.\n. I'll have to check this out.\n. Fixed from one of the latest pulls which tests against 0.5.3\n. How would this work? I'm interested too.\nBasically on the first fetch, use localSync and then lookup updates on the server? What would the API look like?\n. Well, that's easy. When the user is not registered, just set the localStorage property in your collection or model, as written in the README.\nFor that class, it'll use the localStorage adapter, but if it's not present then it'll use the normal Backbone.sync method.\n. Done.\n. Yea, that looks useful. Would you mind writing a test case for it?\n. It's all good Jay :)\n. Ah, that looks about right.\nSorry I didn't respond before, I was a bit confused about what this functionality brought in. I should've said so.\nWould you mind trying to fix the merge conflicts and committing again? Github says this can't be merged automatically.\n. Looking good.\n. Passed the tests and all, cool.\nhttp://travis-ci.org/#!/jeromegn/Backbone.localStorage\n. Is this still the case? Closing for now, feel free to reopen if the issue is still present.\n. Hopefully? :) That's a bad start for a pull request!\nThere must be a way to test it. Try writing a simple test. Have you tried it manually and it worked?\n. That's alright, we want to test against the latest stable. I think we might have been testing against outdated versions.\nSo do the tests pass?\n. Oh, I forgot to ask you to add the new backbone and underscore in there. I added them myself and the tests now pass.\n. Yes, please write some tests.\nAlso, looking a the code, I'm not sure it's going to work. I thought you had to do something like define(\"backbone.localStorage\", [\"underscore\", \"backbone\"], function(){})\n. My only concern is with backwards compatibility and tests passing. If both of those are ok, then I'll merge.\nI'll pull these changes down soon enough, but I'll take your word for it if you reply here before I have time to check them out!\n. You might want to modify this file: https://github.com/jeromegn/Backbone.localStorage/blob/master/tests/lib/load_phantom.js so that the tests are ran on Travis CI.\nYou can test them easily by installing phantomjs and running phantomjs tests/lib/load_phantom.js\n. If you don't feel like it, I don't mind doing it. Just might take a bit more time.\nI thought you'd like the practice and learning some PhantomJS :)\n. This wasn't originally intended to be used for models. Though it does make sense that it would work with them. I'm not sure how this was overseen. Probably because I don't personally use the project anymore.\nI'd like to take a day or so to get the tests right and the implementation complete. I'm lost on how well or unwell this is working right now since I haven't used it in years.\n. Awesome, going to look into it tomorrow. \n\nJerome Gravel-Niquet\nSent with Sparrow (http://www.sparrowmailapp.com/?sig)\nOn Tuesday, 19 June, 2012 at 10:58 PM, Thomas Stephens wrote:\n\nFixes #32.\nNot sure if there is any reason to duplicate any of the tests in test2.js.\nI looked at destroy(), but it doesn't call any methods on the model (just the success callback to sync, if one is passed in), so I left it alone.\nYou can merge this Pull Request by running:\ngit pull https://github.com/spiralman/Backbone.localStorage master\nOr you can view, comment on it, or merge it online at:\nhttps://github.com/jeromegn/Backbone.localStorage/pull/33\n-- Commit Summary --\n- Use serialized model as response to sync, instead of the model.\n-- File Changes --\nM backbone.localStorage-min.js (2)\nM backbone.localStorage.js (4)\nM tests/test.js (24)\n-- Patch Links --\nhttps://github.com/jeromegn/Backbone.localStorage/pull/33.patch\nhttps://github.com/jeromegn/Backbone.localStorage/pull/33.diff\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/jeromegn/Backbone.localStorage/pull/33\n. Why not return model? (real question, I've been out of the game a bit, not sure what's the advantage of fetching the model again)\n. Thanks for the heads up. Again, forgot about it.\n. Wow, I have no been receiving the email notifications of new issues. I'm sorry if that took a while.\n\nWould you mind submitting a pull request with that code? Maybe even write a test for it :)\n. @nerdgore If you'd like to submit that as a pull request, it'd be greatly appreciated.\n. Si tu l'as arrang\u00e9 localement, est-ce que tu pourrais m'envoyer un pull request avec les modifs?\nJ'ai document\u00e9 un mini-processus pour contribuer ici: http://documentup.com/jeromegn/backbone.localStorage#contributing\n. Apr\u00e8s investigation: C'est impossible d'avoir une entr\u00e9e sans id avec backbone.localStorage. Donc \u00e7a retournerait toujours true.\nDe retourner le mod\u00e8le (soit {} une fois d\u00e9truit) \u00e7a cause vraiment probl\u00e8me?\nJe ferme pour le moment.\n. I'm lazy, could you add the minified version aswell? Once the npm modules are installed via npm install, use make minified to minify the file.\nAll documented here: http://documentup.com/jeromegn/backbone.localStorage#contributing\n. Boom! Thanks.\n. @gsmaverick Yes, if it can be merged automatically. Which is not the case right now.\nPlease rebase master :)\n. @sontek Not really, except that I forgot about it.\n@marlun78 Would you mind minifying the file? Instructions are in the \"Contributing\" section of the readme.\n. How about calling options.error with the error when that error is caught?\nAlso, would you mind minifying it? I left instructions on how to do so here: http://documentup.com/jeromegn/backbone.localstorage#contributing\nIdeally, you'd create a test for this, basically stubbing localStorage with something that throws the error (temporarily) and test if it's caught and sent back the right way. I can see how this might be a bit much though ;)\n. Are we letting this go? Is this still an issue in more recent browser versions?\nHere's how a test would work: override window.localStorage temporarily to return the same value a browser in private browsing mode would return.\n. My pleasure.\n. Sounds like an issue with Chrome :( Closing this for now.\n. Someone's interested in cleaning up this project! :+1:\n. Can you write a test case where this happens?\nTo me this looks fine. If the model is not within a collection, then the second part of the conditional statement will not be evaluated.\n. The tests need to pass before I can merge this in.\n. Please describe how it does and doesn't work like Backbone. Ideally, write a test case to prove it. Else, I'll just fix it myself once I know what it doesn't do right.\n. Could you rebase with the latest (with 0.9.9 support)?\nAlso, if you wouldn't mind minifying the whole thing. Instructions are in the README.\n. Great work, thanks!\n. Thanks!\n. How are you accessing the page? Locally? (ie: \"file://\")\nIf you type window.localStorage in the browser's console, what do you get?\n. I haven't personally used it for that purpose, but according to this test, it does work :) https://github.com/jeromegn/Backbone.localStorage/blob/master/tests/test.js#L144\n. Does it work on a collection?\n. I don't think that's a scenario that usually does happen. Why do you need it?\nIf you we're using server-side storage instead, would you have a method to destroy the table / collection?\n. I think your initial solution of:\njavascript\nwindow.localStorage.removeItem(\"LibraryStore\");\nor maybe if you want to wipe everything, try:\njavascript\nwindow.localStorage.clear();\nI don't see this being a useful feature for Backbone.localStorage.\n. Good work.\nI'm just thinking the description in the issue would be nice to put in the README.md file. Create a section like \"AMD loader\" (but I feel like that's a poor title) as a sub-section \"Usage\".\nI think that would make it a \"complete\" feature :) It has a simple implementation, a test and now it would have documentation.\n. Alright.\nLooking forward to the final changes.\n. Looks good.\n. What @SBoudrias said :)\n. Can't be merged automatically. Could you rebase/merge master into your branch?\n. Never mind, I'll do it later this afternoon. I'm refactoring all tests and then some.\n. From my tests, this seems fine without your code. I did some logging in there and from the current test suite, the logging within your conditional never got called.\nCan you write a failing test case with what's currently in master to prove your point? I fail to see the case where it doesn't work. (maybe a change since you opened this pull request fixed it by magic)\n. I completely get that :)\nIf you'd explain in more details what's wrong, I should be able to do it myself. Up to you.\n. That's what I thought it was. If that was the case, then the tests concerning the model would fail, no?\nFor instance, this line would not update the model correctly: https://github.com/jeromegn/Backbone.localStorage/blob/master/spec/localStorage_spec.js#L204\nI ran those tests with your code, and the code under the conditional that checked for an Array was never called. Are you sure this is still an issue?\nThese are the models tests: https://github.com/jeromegn/Backbone.localStorage/blob/master/spec/localStorage_spec.js#L183-L238\n. I'm not testing set and get because those are handled by Backbone.  \nWe're not testing Backbone here. My library doesn't touch that part.\nI do a fetch so that my plugin is being used.\nI'll add some more tests and see if I can replicate the issue. It does look like you're the only one who reported this though.  \n\nJerome Gravel-Niquet\nSent with Sparrow (http://www.sparrowmailapp.com/?sig)\nOn Monday, 14 January, 2013 at 22:15, Justin Kruger wrote:\n\nthose tests only do a save/fetch pattern and test. your other tests had\nmore variations. what if you save/get? set/save/get? set/get?  \nyou shouldn't be required to do a save and fetch to use the Model. the\nmodel should always be in a valid state.  \nI traced through the code in my use. I also wrote a chrome.storage.sync\nadapter based on your work and the mod works there too.  \nSent from my mobile  \nOn Jan 14, 2013, at 6:43 PM, Jerome Gravel-Niquet notifications@github.com\nwrote:  \nThat's what I thought it was. If that was the case, then the tests\nconcerning the model would fail, no?  \nFor instance, this line would not update the model correctly:\nhttps://github.com/jeromegn/Backbone.localStorage/blob/master/spec/localStorage_spec.js#L204  \nI ran those tests with your code, and the code under the conditional that\nchecked for an Array was never called. Are you sure this is still an issue?  \nThese are the models tests:\nhttps://github.com/jeromegn/Backbone.localStorage/blob/master/spec/localStorage_spec.js#L183-L238  \n\u2014\nReply to this email directly or view it on\nGitHubhttps://github.com/jeromegn/Backbone.localStorage/pull/62#issuecomment-12251039.  \n\u2014\nReply to this email directly or view it on GitHub (https://github.com/jeromegn/Backbone.localStorage/pull/62#issuecomment-12251734).\n. The setup is a bit complicated, but you could just open the spec/runner.html in your browser. :) The require.js tests won't run, but the rest will.\n\nCheck your path, make sure your global and local node_modules are in there. For instance:\nshell\nPATH=\"./node_modules/.bin:/usr/local/bin:/usr/local/sbin:$PATH\"\nYou'll also need to install phantomjs. If you're on OS X, Homebrew is perfect for that.\n. Good catch.\nWhat about backwards compatibility, we can't expect everyone to upgrade to 0.9.10 rapidly. Hint: use Backbone.VERSION to figure it out and change the callback parameters accordingly.\nAlso, please add tests proving there was an issue at first and that it's solved now.\nThanks!\n. I would replace the vendored backbone.js file with the latest one and add legacy tests instead. We want to go forward :)\nSince you're checking for the Backbone.VERSION constant, you might want to just change it in the before callback of your test to see if your success callback is indeed called with only one parameter. Then in the after callback, you'll want to restore Backbone.VERSION to 0.9.9.\nWhat do you think?\n. How's this coming along?\n. Thanks for adding tests.\nI'd try to make them more compliant with the overall style of the other tests.\nPlease test for both a model and collection using Backbone.localStorage. Those two tests should each be nested within the relevant describe. Namely, the ones called \"Collection\" and \"Model\".\n. Looks like the jury's still out on the whole sync changes thing: https://github.com/documentcloud/backbone/pull/2173\n. Merged your stuff, removed the tests for now as I didn't think they were testing the right way.\nI don't think it's a big issue for this modification.\n. Yes exactly.\n63 is a work in progress. Hoping for a quick resolution.\n. Yes, I'll do that right away.\n. Try this: https://github.com/jeromegn/Backbone.localStorage/tree/1.1.0\n. Oops, my bad. Removed the tag and pushed a new one: https://github.com/jeromegn/Backbone.localStorage/tree/v1.1.0\n. Thanks.\nCould you please add tests for these features?\nAlso, could you minify the file as stated in the \"Contributing\" section of the docs\n. Awesome!\n. The last one was outdated?\n. When Backbone hits 1.0, we'll remove the conditional, we'll go with whatever Backbone decided.\nPeople using legacy versions will either have to upgrade or use this version, which is tagged 1.1.0. I'll put up a link in the README.\nAdding a semver implementation (even as simple as that) is overkill for this kind of project.\nThanks for the contribution though!\n. I'll need more information.\nThe new collection smart update? Point me to lines of code, a diff or at least a change log entry.\nAll tests pass using 0.9.10, so this must be a new feature I'm not aware of. Please explain it :)\n. @Krivega Yes, but some people could still be using 0.9.10... going to leave that for a little while.\n. @Krivega we don't follow master, we follow the stable releases.\n. @dlcerva Does it require anything different in the sync method? I don't see it right off the bat.\n. Would you mind writing a test for this? I will, but it might take some time before I get around doing it.\nOnce I have a failing test, the fix should be easy.\n. Good catch! Yep, not a big fan of adding coding for tests in the library either. Especially something so specific to tests.\nI think it would make sense to add a private _clear method to a Backbone.LocalStorage instance. Could be useful for other developers too. One caveat could be that people actually start using it and ask for special events triggering like \"clear\" or something.\nI'm not sure. I'm pretty sure that there's a better solution for the problem though :)\nWhat do you think?\n. Feel free to use a mock library (Sinon is def a good choice). I don't mind the added weight in tests.\n. Love it!\n. All in all, I think that's good. It's similar to how I did it for one of my other projects (private).\nI don't think you need a whole file for the Todo model. I think you need one file for both the model and the collection. \nAlso, since you're only instantiating one collection and one router, instead of returning the constructor for those in their respective modules, I'd just return an instance of each which you'll require and re-use elsewhere.\nAgain, for the views, I'd merge the list and the individual todos in a single file since you're not re-using these components anywhere else. The point of requirejs is drying up your code and making it reusable. It's not worth separating modules for things you're only using at one place. (I think)\nHope this helps.\n. It's pretty useful to return an instance of a router... like:\njavascript\ndefine([\"backbone\"], function(Backbone){\n  return new Backbone.Router()\n});\nAnd then you can use router.route() elsewhere in the app to add routes to your backbone app. Better separation in my opinion.\nAbout the collections, I don't see the point of not returning an instance unless you'll have many instances of the those collections or need to create it dynamically at a later time.\n. No brainer.\n. Maybe try adding a test for that? Could be useful.\n. @rsskga Cool, this is a perfect project for learning. Super simple.\n. It didn't work? I guess I was trigger-happy.\nPlease fix this asap. I might temporary revert that merge.\n. Published! https://npmjs.org/package/backbone.localstorage\n. Would love some tests for this.\n. Don't think it makes sense to use phantomjs for this one. Maybe add another file that's going to be run after the phantomjs tests. Should be pretty simple :)\n. Not sure this is right: https://travis-ci.org/jeromegn/Backbone.localStorage/builds/5747082#L274\n. Can you please remove the minified version? I'll do it myself. I recently changed the contribution guidelines: https://github.com/jeromegn/Backbone.localStorage#contributing\nApart from that, it looks good.\n. Reset :)\nAlso, maybe rebase with master. Made a few changes. Should be relatively easy to figure out the conflicts.\n. No need! Thanks.\n\u2014\nSent from Mailbox for iPhone\nOn Sun, May 12, 2013 at 1:32 PM, Andrey Popp notifications@github.com\nwrote:\n\nDone with rebasing and resetting changes to minified version. Do you want me to squash chnages into a single commit?\nReply to this email directly or view it on GitHub:\nhttps://github.com/jeromegn/Backbone.localStorage/pull/79#issuecomment-17781679\n. Thanks a bunch!\n\nFixed travis.yml so that it also tested that. Released a minor version.\n. Fixed in another pull request.\nI wanted to merge this one, but I realized having people submit minified code is potentially dangerous. So I'm just going to do it myself (or automatize it).\nThanks!\n. Fixed. Thanks, I found some bugs with v1.0!\n. Weird. Lodash is supposed to be a drop-in replacement.\n\u2014\nSent from Mailbox for iPhone\nOn Fri, Apr 12, 2013 at 6:52 PM, Imad notifications@github.com wrote:\n\nHello i've been working with lodash instead of underscore \nthe fetch() method on the collection didn't return anything\nbut with underscore it works fine\nReply to this email directly or view it on GitHub:\nhttps://github.com/jeromegn/Backbone.localStorage/issues/83\n. I'm away on a conference. But I could look into it soon.\n\nMaybe you can try and isolate the problem. When that's done a fix should be easier.\n\u2014\nSent from Mailbox for iPhone\nOn Sat, Apr 13, 2013 at 7:25 AM, Imad notifications@github.com wrote:\n\nAny workaround or fix ?\nReply to this email directly or view it on GitHub:\nhttps://github.com/jeromegn/Backbone.localStorage/issues/83#issuecomment-16332160\n. @zertosh I think since this looks like it's the only issue with lodash, you could just submit it without tests. Temporarily loading a different library just for this one thing...\n\nAs long as there's a comment above the line for something that says why this has to be done, then I'm cool with it. I'd be happy to get such a pull request from you :)\n. Been fixed by #87.\n. Oh. Good catch!\nI'm pretty busy these days but this will be a priority once I find the time.\nPlease try a pull request if you're up to it!\n\u2014\nSent from Mailbox for iPhone\nOn Mon, Apr 15, 2013 at 7:15 PM, Antonio Marrero notifications@github.com\nwrote:\n\nI'm using Backbone version 0.9.10:\njavascript\n Backbone.VERSION = '0.9.10';\nBut the options.success function uses only 1 parameter:\njavascript\noptions.success = function(resp) {\n    if (!model.set(model.parse(resp, options), options)) return false;\n    if (success) success(model, resp, options);\n    model.trigger('sync', model, resp, options);\n  };\nThen in Backbone.localStorage the model is never refreshed after a fetch. because of the code:\njavascript\nif (Backbone.VERSION === \"0.9.10\") {\n    options.success(model, resp, options);\n} else {\n    options.success(resp);\n}\nI've been checking backbone repository and it looks like at some point in March the modified options.success function without upgrading the version number.\nhttps://github.com/documentcloud/backbone/blob/83eb26f971e36e7e90e23a7f3bafc0a38b8bfdf1/backbone.js\nMy suggestion would be to replace the code above with something that could work in both cases:\njavascript\nif (Backbone.VERSION === \"0.9.10\") {\n    if (options.success.length==3){ //for the Backbone versions where option.success uses 3 params\n      options.success(model, resp, options);\n  }else{\n      options.success(resp);\n  }\n} else {\n    options.success(resp);\n}\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/jeromegn/Backbone.localStorage/issues/84\n. So this sounds like you're using an unstable version of backbone.\n\nMaybe you pulled master at some point before an official release?\nWe can't possibly start supporting Backbone's edge versions.  \nJerome\nhttp://jgn.me\nOn Monday, 15 April, 2013 at 9:21 PM, J\u00e9r\u00f4me Gravel-Niquet wrote:\n\nOh. Good catch!\nI'm pretty busy these days but this will be a priority once I find the time.\nPlease try a pull request if you're up to it!\n\u2014\nSent from Mailbox (https://bit.ly/SZvoJe) for iPhone\nOn Mon, Apr 15, 2013 at 7:15 PM, Antonio Marrero  wrote:\n\nI'm using Backbone version 0.9.10:\nBackbone.VERSION = '0.9.10';  \nBut the options.success function uses only 1 parameter:\noptions.success = function(resp) { if (!model.set(model.parse(resp, options), options)) return false; if (success) success(model, resp, options); model.trigger('sync', model, resp, options); };  \nThen in Backbone.localStorage the model is never refreshed after a fetch. because of the code:\nif (Backbone.VERSION === \"0.9.10\") { options.success(model, resp, options); } else { options.success(resp); }  \nI've been checking backbone repository and it looks like at some point in March the modified options.success function without upgrading the version number.\nhttps://github.com/documentcloud/backbone/blob/83eb26f971e36e7e90e23a7f3bafc0a38b8bfdf1/backbone.js\nMy suggestion would be to replace the code above with something that could work in both cases:\nif (Backbone.VERSION === \"0.9.10\") { if (options.success.length==3){ //for the Backbone versions where option.success uses 3 params options.success(model, resp, options); }else{ options.success(resp); } } else { options.success(resp); }  \n\u2014\nReply to this email directly or view it on GitHub (https://github.com/jeromegn/Backbone.localStorage/issues/84).\n. Do we even want it to fail gracefully? Maybe we want to throw an error so that an error reporter would catch it.\n\n\nWhat's the problem with it adding an error to the console's log?\n. @yakubori I like it.\n. Decided to go with #90 which makes more sense. I want it to fail loudly and quickly.\n. What happened? I was wondering about this... the goal was to make it more readable?\n. Without an id, Backbone.localStorage doesn't know how to find it.\nIf there's only going to be one user, maybe give it an id like: \"1\" or pretty much anything.\n. I don't believe it to be an error when a collection is simply empty. It's common to have an empty set of data for something within your app.\n. Can you remove the minified file? I'm handling those myself now.\n. Since this is a private method, I'm probably not going to make a release just yet.\nThanks!\n. Interesting. I'm surprised we didn't catch that before.\nIs that the default Backbone behaviour?\n. Wait, I don't think that's right.\nYour collection cannot be aware of a model if it wasn't instantiated with the collection. In the example you provide, the model is saved separately, in its own localStorage key, and is not aware of a collection.\nYou'll want to use something like collection.create(model) if you want it to be included in its models.\n. Ok I'll investigate further.\n. @marcofognog I'm pretty certain the backend handles storing stuff that way.\nIn backbone.localStorage, models can have a localStorage attribute so that you can store singleton models in localStorage. The collection is not aware of that. Also, the model is no longer aware of the collection.\nIf you want to make your examples work, you need to use collection.create(model) or collection.add(model) to add an existing model to a collection.\n@charlesbjohnson Your solution does not fix the problem. I tried it, the test still doesn't pass.\nThis issue is no longer valid in my opinion. Feel free to re-open if you don't think that's right.\nI suggest you use collection.create(model).\n. Did you set the idAttribute as explained in the Backbone documentation?\n. I like that.\nMind writing a few tests for it?\n. Thanks!\nPublished 1.1.7\n. Yes thanks!\nFixed.\n. Rebase with master and I'll think about it.\nSounds like a decent idea. I'm all for removing dependencies, especially if it only adds a few lines of code.\n. If it passes tests and is up to date with master, I'll merge.\nSorry, I wasn't being clear.\n. Any progress? I'm cleaning up the issues on this repo.\n. Please make a pull request for those kinds of changes. It's pretty easy!\n. Yes, documentation about that is in the readme.\nThanks!\n\u2014\nSent from Mailbox for iPhone\nOn Sat, Nov 2, 2013 at 11:38 AM, loicshub notifications@github.com\nwrote:\n\nI haven't done this yet in github but I know this is easy.\nI'll try to push a pull request by this week.\nIs there a test suite to replay ?\n\nLe 31 oct. 2013 \u00e0 06:07 PM, Jerome Gravel-Niquet notifications@github.com a \u00e9crit :\nPlease make a pull request for those kinds of changes. It's pretty easy!\n\u2014\nReply to this email directly or view it on GitHub.\nReply to this email directly or view it on GitHub:\nhttps://github.com/jeromegn/Backbone.localStorage/issues/111#issuecomment-27624408\n. Why does that matter?\n. Please update with the latest, I'll merge at that moment :)\n. Should be supported. Any evidence it isn't?\n. Might want to also change\n\n\njavascript\ndefine(\"someCollection\", [\"localstorage\"], function() {\nand this\njavascript\nrequire([\"someCollection\"], function(someCollection) {\n  // ready to use someCollection\n});\n. It's just the someCollection usually would be about an \"instance\" of SomeCollection. But since we're returning the class, the constructor in the new definition, then we should also update the other someCollection to SomeCollection\n. I didn't see that in my code.\n. Ok, I'll look into this shortly.\n. @tomconroy tell me if that helps 2e6d192\n(made a bunch of other changes, hoping to fix the CI)\n. We could use _.result(this, 'localStorage') to get the value. Feel free to create a PR :)\n. Let me know if this still happens with 1.1.16.\n. Makes sense. Thanks for the PR.\n. Yes, seems old and fixed.\n. Hey, this looks good :)\nPlease remove the minified version and I'll merge. I can't inspect a minified source for potentially bad stuff.\n. Yea, I'll uglify this beautiful code and bump the version, thanks for reminding me :)\n. Ok, version 1.1.9 is out (I f***** up 1.1.8)\n. Sounds about right.\n. Underscore is not needed anymore. I ended up doing this myself.\n. What's that {async: true} in the collection fetch method?\nCan you add tests to this project to show me how this is failing?\n. You're right. We did miss that little guy.\nI still maintain the project. However, I don't have as much time to dedicate to it as I would like to. Have a lot going on ;)\n. Oh ok. That's odd.\nI just released 1.1.10 btw.\nHow are you requiring it? Bower, component, npm/browserify or plain old ",
    "jasondavies": "For comparison, the CouchDB backend doesn't really treat it as a URL, it just uses it to name the collection. Perhaps Backbone should use a more descriptive name.\n. ",
    "meecect": "I'd like to see this as well.  I'm currently working on a project that will initially use localstorage but will eventually migrate to a REST interface.  Having a smooth upgrade path would be very nice.\nAdditionally, I see lots of examples of apps and plugins that use the 'url' for functionality.  For example, backbone-relational uses url on a nested collection to return children models.  This has been very difficult for me to integrate with localstorage.\nOne approach I have been thinking about is perhaps the ability to override the behavior of store and fetch.  For example, I may want to use localstorage, but I want children objects to store by a foreign key and I want fetch to return only subsets while expanding child objects etc.  Do you have any advice on that?\n. ",
    "masklinn": "Having also encountered issues with this, the issue here is that it still requires altering the model to fit the storage backend, which I believe is the original complaint: it makes switching storage backend slightly harder (all models have to be edited), and it makes models reuse (across projects or models from third parties e.g. using existing backbone-based \"widgets\") significantly harder as potentially third-party or library code has to be edited to move to/from localStorage, it's not just a question of correctly setting up Backbone.sync.\nWhy not do something similar to the original sync but use the URL as a LocalStorage key rather than a URL?  (the URL would have to be munged slightly to remove the id for some methods, but that's about it).\nAnd maybe if mixed storage backend and routing across them is an important use case, provide a shim (maybe in an other project) mapping models or base URLs to storage backend functions?\n. > so how does Backbone know to use the localStorage adapter if there's no mention of it anywhere?\nBackbone does not, the adapter is installed by replacing Backbone.sync explicitly. If the developer wants to route all models to local he simply replaces Backbone.sync with localeSync (or whatever), otherwise he installs a custom Backbone.sync replacement which does the dispatching between localeSync and the original sync based on whatever criteria.\nThis way, the model & collection implementations and the synchronization/persistence strategy are decoupled and independent.\n. ",
    "andriijas": "I think I like this solution...\n. Nice but feels like this generalizes a bit to much.\n. With the release of 0.9.9 and the upcoming 1.0 perhaps its time to drop backwards compatibility with Backbone <= 0.3.3\n. Fixed in #53\n. thanks for your efforts @phoey \n. You guys are making a too big of an issue of this one! \nNo -  everyone doesnt use the latest backbone - an older tagged version of backbone.localStorage could be linked in the readme for these guys. \n. Can you paste some more details? perhaps the stack trace from google chrome developer tools?\n. If you can, try to migrate to Backbone 1.0\n. ",
    "davidsulc": "Hi,\nContext: I'm writing a book on Backbone.Marionette.js (https://leanpub.com/marionette-gentle-introduction) and I wanted to use local storage to avoid explaining all the server back ends. But at the same time, I wanted the \"footprint\" of using localStorage to be minimal (i.e. have the app's code look \"normal\").\nMy solution can been seen here: https://github.com/davidsulc/marionette-gentle-introduction/blob/3b441c9355ac49348eebb3eca27c06ec79b9f64d/assets/js/apps/config/storage/localstorage.js\nIt defines a mixin that reuses the url or urlRoot value (as appropriate) as the storage key and configures localSotrage on the model/collection's prototype. To use it in the app, we just need to call it like this:\nEntities.configureStorage(Entities.ContactCollection);\n(e.g. see line 14 here: https://github.com/davidsulc/marionette-gentle-introduction/blob/bcb16d45876c321e071624319bf87c8a9cf1d656/assets/js/entities/contact.js#L14 )\nThoughts ?\n. ",
    "stefl": "This is for a model that isn't represented at all via Rest. Let's say I have a bunch of events listed on a REST API, and I want to attend some of them. So I create an Event model and a Attending model. I can't expect the third party service to implement this feature, but I want the Attending instances to persist each time I use the app. So I want to store the Attending instances I create locally and do things with the associated events - list them and so on.\nTherefore I want one model that syncs via REST and another one that syncs via local storage. \n. ",
    "peterchappell": "Hi Jerome and Stef,\nThanks for the backbone extension Jerome.\nI've been having a similar issue to Stef. I'm working on an app where I have a few different types of models and collections. I wish to use the localStorage for only one section of the app.\nI'm no expert at this stuff but for now I've just reverted back to the original Backbone sync method if the local storage property is undefined for a model or collection:\n```\n// keep the old backbone sync method handy\nvar oldBackboneSync = Backbone.sync;\nBackbone.sync = function(method, model, options, error) {\n    var useLocalStore = false;\n    if (!.isUndefined(model.collection)){\n        if (!.isUndefined(model.collection.localStorage)) {\n           useLocalStore = true;\n        }\n    }\n    if (!_.isUndefined(model.localStorage)) {\n        useLocalStore = true;\n    }\n    if (!useLocalStore) {\n        return oldBackboneSync(method, model, options, error);\n    } else {\n    // the rest of the localStorage override of Backbone sync\n\n}\n\n}\n```\nIt feels a bit messy but it's getting me by for now... Maybe there's a cleaner way to do this that would suit your extension?\n. ",
    "weblivz": "Backbone now allows you to set the persistence provider on a per model basis.\nAs fas as i can see, this provider overwrites the global Backbone.sync method. Be neat to make this optional ... or give is another name so that we can use the Backbone default ... by default .... and override on a per model basis. eg\nvar aModel = Backbone.Model.extend({\n  sync: LocalPersistence\n});\n. @kmiyashiro for example, check line 288 at https://github.com/documentcloud/backbone/blob/master/backbone.js\n. As the sync can be set on a per model or per collection basis, i do exactly that :\nsync: supports_local_storage() ? Backbone.syncLocal : Backbone.sync,\nlocalStorage: new Store(\"Account\")\nIn line 76 of Backbone.localStorage i just define a the function name to be Backbone.syncLocal \nI don't have any backwards compatibility to maintain right enough.\n. ",
    "kmiyashiro": "@weblivz Where do you see that? I don't see it in any recent commits to backbone.\n. That shouldn't be too hard, the question is whether or not it will be backwards compatible. We could define a Backbone.localSync so that you can assign it to model.sync, also assign Backbone.sync to Backbone.localSync by default for backwards compatibility, but save a reference to the original Backbone.sync as Backbone.defaultSync?\n. Yes, that would work on a case-by-case basis. But making a change to the \"official\" adapter, we shouldn't break current implementations if they decide to update (or have it hotlinked for some reason).\nBTW, there are quite a few localStorage polyfills, so if you wanted behavior to be consistent across all browsers you could use one of those. You also wouldn't have to do those checks. https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills\n. @jeromegn You mean if it is undefined, the adapter won't work? I think that's the simplest solution. Essentially it would be using a required prop of for the adapter as a proxy for setting the sync prop. It's not in line with the current Backbone method of setting sync per model/collection, but on the other hand it's kind of silly to require setting localStorage and sync. It's a little bit of sugar, but not too much IMO.\n. ",
    "rgarcia": "@jeromegn giving this a bump. What if you added an option \"cache\" that if set to true used localstorage, and if set to false used regular Backbone.sync?\nSo, for example, you could first try fetch({cache:True}), and if that yields no results, do a plain fetch().\n. ",
    "peterp": "I've got the same implementation problems as above. I need to update via a REST api, but need to cache locally in case the device is offline.\n. ",
    "serenecloud": "I'm a bit late on this, but I'm using localStorage with Backbone 0.5.1 and it's working for me in Firefox 5\nBecause I wanted to do some server side stuff to I modified Backbone.sync, but I had no issues at any time with stuff vanishing.\n. ",
    "ravicious": "Hmm... So I might be doing something wrong... idk, I'll just close this issue.\n. ",
    "hugomrdias": "var aModel = Backbone.Model.extend({\nsync: ajaxSync\n});\nsorry for noobiness but with this i can on a per model base override the localStorage with the original sync ?\n. yes ofc :D thx for the reply \n. ",
    "tlray": "Try this: sync: Backbone.ajaxSync\n. ",
    "paulmillr": "not needed anymore\n. @jeromegn would be super awesome if this was reviewed fast, just want to include new BB.ls in todomvc app without underscore dep.\n. What do you mean \u201cyou think\u201d? So will you merge it or not? What's the point of me rebasing it if you won't merge?\n. no problem then! \n. Done.\n. also fixed this bug. this.save was called all the time.\n. ",
    "dwt": "I've since reworked the test suite and fixed two bugs. So hows it, would you pull from me here?\n. That should fix it.\nSome remarks: I tried to stay away from defining global objects or extending objects that I don't own more than necessary (i.e. I would prefer Backbone.LocalStorage.sync instead of Backbone.localSync). That way it is much clearer where the function comes from when examining things in the debugger.\n. Hey, how is it, can you merge it now? I would hate to have this sit for another month and then to rework the thing again to make it fit your code.\n. Hey, how is it, can you merge it now? I would hate to have this sit for another month and then to rework the thing again to make it fit your code.\n. ",
    "elf-pavlik": "@jeromegn do you plan to merge this one?\n. ",
    "andreif": "You still need to add copyright info, see http://opensource.org/licenses/mit-license\n. ",
    "natflow": "If the style changes are opposed to some style guide I missed, I can submit another pull request without them.\n. gartz: Does your comment apply to just 9bf43ff? Or to the pull request as a whole?\nIf it's just to that one commit, I don't agree, but I'm not dedicated to separate methods.\nIf it's the whole request, then I kind of agree that some cleanup is possible. After trying to merge in some of the open pull requests, it occurred to me that I should be striving for the smallest changeset possible in situations like these. But do you agree that my solution of saving the changed IDs instantly, rather than some special-cased cleanup in a8a422ea04 is a better, more correct way?\n. I'll clean this up and re-submit.\n. ",
    "karlwestin": "Hi there!\nI found your post because i was having a similar problem. In the end i came up with a solution that i think was pretty good, without any additional parse function. I wrote a blog post about it here\nSo, if I understood this problem right, Backbone.LocalStorage already supports this, and this issue can be closed. \nCheers :)\n. ",
    "jeff-h": "For anyone who's interested, the post mentioned above is no longer available. You can still see it here:\nhttps://web.archive.org/web/20130327070208/http://karlwestin.posterous.com/nested-modelscollections-and-storage-with-bac\n. ",
    "bartvandendriessche": "I think backbone.sync does this by virtue of using jquery ajax calls. Not sure about zepto.\n. ",
    "jockster": "Correction:\nI've entered the tests folder of localStorage and ran the qUnit tests with the current backbone.js from the test folder (version Backbone.js 0.5.0-pre) and all tests passed.\nWhen I replaced it with the newest backbone.js - that's Backbone.js 0.5.3, the following occurs:\n2 tests of 10 passed, 8 failed.\n. Thanks a lot for your support!\n. ",
    "lorensr": "Nevermind, I didn't realize Underscore's .each isn't mutation-safe.\n. ",
    "jDavidnet": "I am also interested in this.\n. I'll have to look at this in the next few days.  It's working for me right now.\nThere is another problem with destroy on Backbone.Modal\n. I have been using this for months without issue.  If you don't use this patch then you can only use this adapter on a collection, and it does not work on a model.\n. FIX #49, #48: correctly fetch() content for Backbone.Model Objects\n. Jerome, I will try to find the time to learn your testing frame work, but I\nam busy at a startup trying to launch a product.\nThe case is this, if you have a model by it self it was not correctly\nreading itself from local storage.\nif you have a model as part of a collection, it would read it just fine.\nFor me to get back around to this will be a few days or longer if I have to\ndeal with fires at work as we are launching soon.\nOn Sun, Jan 13, 2013 at 2:00 PM, Jerome Gravel-Niquet \nnotifications@github.com wrote:\n\nFrom my tests, this seems fine without your code. I did some logging in\nthere and from the current test suite, the logging within your conditional\nnever got called.\nCan you write a failing test case with what's currently in master to prove\nyour point? I fail to see the case where it doesn't work. (maybe a change\nsince you opened this pull request fixed it by magic)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/jeromegn/Backbone.localStorage/pull/62#issuecomment-12201099.\n\n\n\n\nJustin Kruger\nSocial Media Software Engineer -\nSan Francisco, CA\n\nhttp://jDavid.net\nhttp://twitter.com/jdavid\nhttp://www.linkedin.com/in/jdavid\n\njDavid.net@gmail.com\n. In your documentation you provide an example to make a Backbone.Collection\nobject as provided at the bottom of this email.  You need a few tests based\non Backbone.Model.  The Backbone.Collection works because it assumes the\ndata is an array, but for Backbone.Model Object when the object is not a\nCollection, but a singleton Model, it was not working, it was locating the\nwrong record in localStorage or not at all.\nI hope that makes more sense.\nImagine the usage.\nwindow.SomeModel = Backbone.Model.extend({\nlocalStorage: new Backbone.LocalStorage(\"SomeCollection\"), // Unique\nname within your app.\n// ... everything else is normal.\n});\nThis is the code I am using.\nAppSettings = Backbone.Model.extend({\n    defaults: {\n        notify: true,\n        notify_close_delay: 10, //seconds\n        notify_last_check: 0,    //timestamp\n        notify_last_check2: 0    //timestamp\n    },\n    initialize:function(){\n        var that = this;\n        try{\n//        that.storageSync = new Backbone.StorageSync(\"AppSettings\", that);\n            that.localStorage = new Backbone.LocalStorage(\"AppSettings\",\nthat);\nthat.on('change', function(){\n            console.log('AppSettings - LOADED2', that, arguments);\n        });\n    }catch(e){\n        console.log('Failed to init AppSettings.  LocalStorage Failed,\nUsing Defaults?')\n        }\n    }\n});\nhttps://github.com/jeromegn/Backbone.localStorage\nUsage\nInclude Backbone.localStorage after having included Backbone.js:\n\n\nCreate your collections like so:\nwindow.SomeCollection = Backbone.Collection.extend({\nlocalStorage: new Backbone.LocalStorage(\"SomeCollection\"), // Unique\nname within your app.\n// ... everything else is normal.\n});\nOn Mon, Jan 14, 2013 at 6:21 PM, Jerome Gravel-Niquet \nnotifications@github.com wrote:\n\nI completely get that :)\nIf you'd explain in more details what's wrong, I should be able to do it\nmyself. Up to you.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/jeromegn/Backbone.localStorage/pull/62#issuecomment-12250584.\n\n\n\n\nJustin Kruger\nSocial Media Software Engineer -\nSan Francisco, CA\n\nhttp://jDavid.net\nhttp://twitter.com/jdavid\nhttp://www.linkedin.com/in/jdavid\n\njDavid.net@gmail.com\n. those tests only do a save/fetch pattern and test. your other tests had\nmore variations.  what if you save/get? set/save/get?  set/get?\nyou shouldn't be required to do a save and fetch to use the Model.  the\nmodel should always be in a valid state.\nI traced through the code in my use.  I also wrote a chrome.storage.sync\nadapter based on your work and the mod works there too.\nSent from my mobile\nOn Jan 14, 2013, at 6:43 PM, Jerome Gravel-Niquet notifications@github.com\nwrote:\nThat's what I thought it was. If that was the case, then the tests\nconcerning the model would fail, no?\nFor instance, this line would not update the model correctly:\nhttps://github.com/jeromegn/Backbone.localStorage/blob/master/spec/localStorage_spec.js#L204\nI ran those tests with your code, and the code under the conditional that\nchecked for an Array was never called. Are you sure this is still an issue?\nThese are the models tests:\nhttps://github.com/jeromegn/Backbone.localStorage/blob/master/spec/localStorage_spec.js#L183-L238\n\u2014\nReply to this email directly or view it on\nGitHubhttps://github.com/jeromegn/Backbone.localStorage/pull/62#issuecomment-12251039.\n. how do i set up the new test environment\ni have node installed, and i did the npm install for the two modules\nglobally, but i they won't work on the command line.\ni have mac osx, could you point me to someplace to help me get this set up?\nOn Mon, Jan 14, 2013 at 7:37 PM, Jerome Gravel-Niquet \nnotifications@github.com wrote:\n\nI'm not testing set and get because those are handled by Backbone.\nWe're not testing Backbone here. My library doesn't touch that part.\nI do a fetch so that my plugin is being used.\nI'll add some more tests and see if I can replicate the issue. It does\nlook like you're the only one who reported this though.\n\nJerome Gravel-Niquet\nSent with Sparrow (http://www.sparrowmailapp.com/?sig)\nOn Monday, 14 January, 2013 at 22:15, Justin Kruger wrote:\n\nthose tests only do a save/fetch pattern and test. your other tests had\nmore variations. what if you save/get? set/save/get? set/get?\nyou shouldn't be required to do a save and fetch to use the Model. the\nmodel should always be in a valid state.\nI traced through the code in my use. I also wrote a chrome.storage.sync\nadapter based on your work and the mod works there too.\nSent from my mobile\nOn Jan 14, 2013, at 6:43 PM, Jerome Gravel-Niquet \nnotifications@github.com\nwrote:\nThat's what I thought it was. If that was the case, then the tests\nconcerning the model would fail, no?\nFor instance, this line would not update the model correctly:\nhttps://github.com/jeromegn/Backbone.localStorage/blob/master/spec/localStorage_spec.js#L204\nI ran those tests with your code, and the code under the conditional\nthat\nchecked for an Array was never called. Are you sure this is still an\nissue?\nThese are the models tests:\nhttps://github.com/jeromegn/Backbone.localStorage/blob/master/spec/localStorage_spec.js#L183-L238\n\u2014\nReply to this email directly or view it on\nGitHub<\nhttps://github.com/jeromegn/Backbone.localStorage/pull/62#issuecomment-12251039>.\n\u2014\nReply to this email directly or view it on GitHub (\nhttps://github.com/jeromegn/Backbone.localStorage/pull/62#issuecomment-12251734).\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/jeromegn/Backbone.localStorage/pull/62#issuecomment-12252160.\n\n\n\n\nJustin Kruger\nSocial Media Software Engineer -\nSan Francisco, CA\n\nhttp://jDavid.net\nhttp://twitter.com/jdavid\nhttp://www.linkedin.com/in/jdavid\n\njDavid.net@gmail.com\n. which browser?  phantom_js?\nOn Wed, Apr 24, 2013 at 2:49 PM, Nicolas RAIBAUD\nnotifications@github.comwrote:\n\nYou save my day, i have the same problem ...\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/jeromegn/Backbone.localStorage/issues/83#issuecomment-16970307\n.\n\n\n\n\nJustin Kruger\nSocial Media Software Engineer -\nSan Francisco, CA\n\nhttp://jDavid.net\nhttp://twitter.com/jdavid\nhttp://www.linkedin.com/in/jdavid\n\njDavid.net@gmail.com\n. Where you using Underscore 1.0 or an earlier version before?\nEarlier versions of Underscore did not operate exactly like the reference\nfunctions, but i think in v1.0 they fixed a lot of that, at least that's\nwhat I remember from the app.net hackathon.\nLowdash ops to do a number of things in for/ while loops that would\notherwise be operated on by the browser by a native function.  Underscore\npolyfils in functions based on the reference functions and sometimes i\nfound that underscore could actually take different code paths in different\nbrowsers because of this.  Again, they may have fixed this, but this might\nbe at the crux of the problem.\nCan you illuminate an example that has this bug?\nCan you test it in IE as well?  ( it might use unique code paths as well )\nOn Wed, Apr 24, 2013 at 3:34 PM, Nicolas RAIBAUD\nnotifications@github.comwrote:\n\nChrome 26.0.1410.65 and Firefox 20.\nBackbone Version 1.0.0\nLodash Version 1.1.1\nLocalStorage version : 1.1.0\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/jeromegn/Backbone.localStorage/issues/83#issuecomment-16975897\n.\n\n\n\n\nJustin Kruger\nSocial Media Software Engineer -\nSan Francisco, CA\n\nhttp://jDavid.net\nhttp://twitter.com/jdavid\nhttp://www.linkedin.com/in/jdavid\n\njDavid.net@gmail.com\n. ",
    "surjikal": "+1\n. Maybe it would help if I post my use case for this. I want to let both unregistered and registered users use my app. If the user is registered/logged-in, then use server sync. Otherwise, sync to local storage.\n. ",
    "yanickrochon": "I am interested in this question too. You say \"Well, that's easy\", but you're not answering the question directly. \nIn our project, we need to create server bound collections, but a way to make it local temporarily, then make change it to a remote collection. The expected behaviour is that that local collection would sync itself with the server. See it like a local transaction, that is committed to the server.\n. ",
    "jayproulx": "Done\n. sigh I wish I could edit that last comment :P\n. ",
    "erichmenge": "An example (please excuse the CoffeeScript):\nBefore:\ncoffeescript\ndfd = []\ncollection.each (bulletin) ->\n    dfd.push bulletin.get('rsvp').fetch()\n$.when(dfd...).then ->\n    # This code will be executed after all of the fetch()s complete\nAfter localStorage is included:\ncoffeescript\ndfd = []\ncollection.each (bulletin) ->\n    dfd.push bulletin.get('rsvp').fetch()\n$.when(dfd...).then ->\n    # This code gets executed right away, because dfd is an array of undefineds.\nThis code works as expected with the default Backbone.js, but after localStorage is dropped in, the code is broken.\n@jeromegn If there is something wrong with my code that prevents you from merging it, please let me know.\n. I guess that merge commit is kinda ugly.  If you want me to submit a new pull request that's fine too.\n. ",
    "Dremora": "All right, bad wording :) Well, it works in my code, but I haven't written a test yet. Can do it though, shouldn't be hard.\n. The bug actually occurs only when using latest versions of Backbone and Underscore. I've tried replacing the libraries and running tests \u2014 none of them fail except this one (before applying the fix). So I guess it's safe to update libraries as well.\n. They do, both against latest stable and git head versions of Backbone and Underscore.\n. ",
    "kzahel": "Wow. I also wasted an hour or two because of this very problem. Thanks for the fix!\n. ",
    "jvah": "Ignore that for now, I just noticed that Underscore.js is also referenced in update and findAll for instance. Would also need a reference to Underscore.js for this to work. Should write tests for it as well.\n. ",
    "juhovh": "Will do, next request will be with proper tests. :)\nIt would be nice to define it like that, but problem is that one has to hardcode the strings \"underscore\" and \"backbone\" which is not nice at all.\nRequireJS runs each define (including its requirements) in its own namespace, so a workaround for now would be not to use any objects from a global namespace and load the libraries in correct order using RequireJS's order plugin. That's what I did and it works just fine, I had time to run it on my test site for some time today. It will probably be more clear after I send a sample test.\n. I added some tests that hopefully explain my problem better than I do verbally. I totally forgot to mention the very important fact that I'm using noConflict() on both Underscore.js and Backbone.js in order not to pollute the global namespace, because in RequireJS the global namespace should not be used in general. However the change should be very small and not break anything. And if you check the Backbone.js source they are doing similar references to the global objects in their code.\n. There should be no issues with backwards compatibility or tests passing as far as I know. The change only keeps a load-time reference to the global objects, which makes it possible to do the following:\n- Load Underscore.js\n- Load Backbone.js\n- Load Backbone.localStorage\n- Call _.noConflict()\n- Call Backbone.noConflict()\n- (possibly load another version of Backbone here for compatibility with other libraries)\n. Yeah I know, it just took 5 minutes. I got sick last weekend and was busy writing C code and reinstalling Ubuntu. Added to the pull request now. Please check that it looks sane.\n. ",
    "omarshal": "The workaround to this issue is to specify a constant ID for each instance of the model. This way you can save and fetch it properly\n. ",
    "tomconroy": "This is broken again, caused by #125.\n. I landed here after scratching my head about why my model.parse was being called with true instead of response data. Please revert this commit.\n. Thank you @jeromegn !\n. ",
    "kjaebker": "From what I understand update/create/read sync methods all get their response passed to the parse method. This method expects (based on the documentation) the raw response from the server. So the change I put in here standardizes those responses.\nThe reason I found this is because I have a collection as an attribute for a model. When this model gets written to local storage the json stringfy converts the collection into an array. When I retrieve that model again I need to parse the result and re-create that collection.\nThis could be done by calling stringify on the model like when it saves, but I figured just calling find to get would suffice.\n. ",
    "gsmaverick": "Are you accessing these pages from a local drive with file: at the beginning of the url or are these pages being served off of a web server?\n. @orizens  Aside from the localStorage being reset on each page refresh you have a problem with your code.  Here is the snippet that handles a read/fetch in Backbone.localStorage (I've adjusted it slightly for readability):\n``` javascript\ncase \"read\":\n    var resp;\n    if (model.id != undefined){\n        resp = store.find(model);\n    } else {\n        resp = store.findAll();\n    }\nbreak;\n\n```\nSo in your case what Backbone.localStorage is doing is first checking if you've set an id on the model.  From your example it appears you haven't set an id on either instance of the model.  So even if you tried to fetch the model again in the same session you would get garbage data back.  So the first solution is to have an id set on both instances of the model.\nNow to address the localStorage erasing issue, are you perhaps running this off a local file (ie: your url starts with file:/// instead of http://)?  If this is the case then yes, the intended behavior is that window.localStorage is erased on each page refresh.  In order for window.localStorage to persist you must be serving off of http(s)://.\n. @orizens I'm not entirely sure how this solves the problem.  If someone calls this twice: Backbone.Safe.create('historyPlaylist', this); then how do you distinguish?  You could just fix this problem with Backbone.localStorage by setting the same id each time you initialize it.\n. Any chance this pull request could be merged?\n. What's wrong with the solution proposed here: https://github.com/marcuswestin/store.js/issues/42#issuecomment-4849403?\nI think the author's comments there apply in this case as well.  It should not be the library's responsibility to detect this issue.  Your fix hides the actual issue (localStorage isn't available) and so instead it appears as though it's just a regular error.\n. I don't think there is a workaround for this issue as you're including a script from another domain.\n. @LeeGDavis there isn't a trick for local filesystem it just doesn't work.  For localstorage to work you must be loading the page off of a server.\n. You need to have an ID on the model otherwise how does Backbone.localstorage know which data to load into the model from localstorage.\n. Assign it an ID:\nApp.User = new UserModel({id: 1});\nApp.User.fetch();\nThen when you refresh the page or whatever you give your model an ID of 1 and you will get that model's saved data back.\n. Did you set an ID attribute on your model?\n. Can you post an isolated test case that works with underscore but now with lodash?\n. Can you post the rest of your model it's a little difficult to debug your issue seeing just a few isolated lines of code.  I think what you want in your create function though is this:\nmodel.set(model.idAttribute, model.id, {silent: true});\nThis will suppress Backbone from firing another change event which is what I assume you want.\n. ",
    "ghost": "@gsmaverick, sorry, I have deleted my comments, I have sovled the problem and Backbone.localStorage is ok.\nI have two different localStorage  store instances for Backbone model and collection, change to use one single instance sovled this problem.\n. I get this error every time as well when calling sync() on a collection. Has a solution been found?\n. ",
    "sontek": "Looks like this can be closed, its no longer a bug.\n. any reason this hasn't been merged in yet?\n. ",
    "garrettlangley": "confirming this is a bug as well.\n. ",
    "jferguson": "Same here. Fix from Sergeyshall resolved the issue for me.\n. ",
    "fiznool": "My two cents - I've come across this problem before too, but my suggested approach would be to duck-punch JSON.parse. This way we don't need to add the same null checks every time we are parsing JSON. Pull Request #41 only fixes the case of JSON.parse within this library - what if I need to do JSON.parse in my own code?\nFor example:\nhttps://github.com/brianleroux/lawnchair/issues/48#issuecomment-4964254\n. ",
    "nerdgore": "We've come across this issue as well. In our own code it's trivial to implement a null check like value && JSON.parse(value);. To keep the fixing code separate we added jsonData().\n``` javascript\nfind: function(model) {\n  // call to this.jsonData instead of JSON.parse\n  return this.jsonData(this.localStorage().getItem(this.name+\"-\"+model.id));\n}\nfindAll: function() {\n  return _(this.records).chain()\n    .map(function(id){\n      return this.jsonData(this.localStorage().getItem(this.name+\"-\"+id));\n    }, this)\n    .compact()\n    .value();\n}\n```\nand as above the actual handling is simple\njavascript\njsonData: function (data) {\n  return data && JSON.parse(data);\n}\n. This was fixed with Pull request #60.\n. #166 implemented the option {ajaxSync: true}\n. ",
    "fingerproof": "I solved my problem, the trick was just to pass {  wait: true } (http://backbonejs.org/#Model-save).\nSo I think this issue can be closed.\n. ",
    "richardscarrott": "Should this still not be considered a bug because upon saving a new model when not using the localStorage adapter the change events aren't fired regardless of whether you pass in { wait: true }? I'd have thought passing in { silent: true } when the model.idAttribute is set would indeed make sense here?\n. ",
    "rhrn": "mb missed comma, after defaults object\nyou can see error in console\n. ",
    "orizens": "hi rhrn.\nIndeed a comma is missing (i edited the code so it will be the simplest example)- \nbut still the plugin doesn't work as expected.\n- i fixed the code in my post - so you can run a clean test. \n. Hi @gsmaverick.\nThanks for the reply.\nI did see that using the plugin requires setting an id to my model.\nAnyway, this led me to write a new plugin for using the local storage 'anonymously' without the need for an id for each model.\nBackbone.Safe - https://github.com/orizens/Backbone.Safe\nMy assumption is a new Safe has to have a unique name and also the storage will reload its data, if exist, on creation.\nThanks. \n. @gsmaverick I don't distinguish between calls. setting an id or a name for a storage key is, imo, the same. so, i prefer to work a unique storage key only - and not with a pair of id + key (which again could be set as a unique key to Safe).\nI mean, by the solution of id, this code should work:\n``` javascript\nvar MediaSearch = Backbone.Model.extend({\n    defaults: {\n        query: 'pink floyd'\n    },\n    id: 'some-uid',\n    localStorage: new Backbone.LocalStorage('MediaSearchModel')\n});\nvar search = new MediaSearch();\nsearch.save('query', 'live shows');\n// some where in the application life cycle \nsearch.fetch(); // should have 'live shows' value in it\n```\nso i prefer to have the this:\njavascript\nvar MediaSearch = Backbone.Model.extend({\n    defaults: {\n        query: 'pink floyd'\n    },\n    localStorage: new Backbone.LocalStorage('MediaSearchModel' + some-uid)\n});\nrather than setting an id for each.\nit's another solution - coming from another perspective - however - it works well for me.\n. ",
    "JSteunou": "Nan d\u00e9sol\u00e9 je n'ai rien corrig\u00e9 sur BB.localStorage. Je ne prend juste pas en compte le retour de la fonction et je consid\u00e8re que la requ\u00eate est pass\u00e9e, et je retire le mod\u00e8le de la collection dans la foul\u00e9e.\nQuand je passerai en prod je repasserai derri\u00e8re mes .destroy pour regarder le xhr retourn\u00e9 ou false, et agir en cons\u00e9quence.\n. ",
    "dy": "Here you are\n. ",
    "sebastien-p": "That was just a quick fix that we can improve for sure.\n@jeromegn Yes, calling option.error passing the actual error is better. I'll try to complete this pull request when I have time.\n@gsmaverick Correct me if I'm wrong but the original Backbone.sync implementation will call options.error whenever a model failed to save on the server. I think this pretty much emulates this kind of behavior.\n. @jeromegn I'm not sure how to write a test which would cover this edge case.\n. @jeromegn thanks a lot! Now I see how I should have done this, sorry.\n. ",
    "75lb": "it's only an issue in Chrome, it works fine in all other browsers.. it's a show-stopper if you're building a Facebook Canvas app (which loads your app in an iFrame).. atm, if you're building a Canvas app you must abandon localStorage.\nwas just praying someone here knew a workaround.. \n. ",
    "zanedev": "maybe im off from what you are describing but i was having this problem until I added the localStorage property to the model as well as the collection like so:\nlocalStorage: new Backbone.LocalStorage(\"MyStorageCollection\")\nI was actually getting the \"url\" is missing error from backbone sync until I did this..\n. ",
    "spenoir": "so is adding the localStorage key to models recommended? It does work but it seems wrong\n. But localStorage should be used for throw away temporary data IMO. It shouldn't block your whole application from loading if decide to turn it off. If you are building a javascript web app and localStorage is the only storage you have then you should be warning your users that the app will not work with data disabled\n. I don't understand why you won't merge this. It only improves it by not breaking your javascript layer when website data is turned off\n. Understood mate, sorry for hassling you. I see why its not a major version, cheers\n. ",
    "LeeGDavis": "Yes, locally... Just fired it up on my server and worked just fine.  Is there a trick to getting this working locally off the filesystem and what is the issue? \nwindow.localStorage:\n- local (file://): undefined\n- Server (http://): object storage\nCheers\nLee\n.  No worries, thanks guys.  Appreciate the help with this one!\n. ",
    "fabnoe": "That's what I have. The values are stored. But how to i \"reimport\" the model. Maybe 'new' is wrong, since I only want one unique model? \nApp.User = new UserModel();\nApp.User.fetch();\n```\ndefine(['backbone', 'lib/backbone-localStorage'], function (Backbone) {\n    'use strict';\nreturn Backbone.Model.extend({\n\n    localStorage:new Backbone.LocalStorage('user-backbone'),\n\n    defaults:{\n        uid:null,\n        car:null,\n        activities:null,\n        firstName:null,\n        lastName:null\n    },\n\n    initialize:function () {\n        console.log(\"UserModel initialized\")\n    }\n});\n\n});\n```\n. Yes, it does work on a collection\u2026\n. @gsmaverick That make sense. So how do I create the model (only once) and load the saved model (on the second time)?\n. @gsmaverick Thank you!\n. ",
    "lidasong": "backbone.localstorage has the create function to produce the 'id' if no one offered,so you need not give one id\n. ",
    "lka": "I have an application that is designed to use local storage for some weeks. If the user decides to throw all data away and never use it again (he has finished his work) I want to clean up all used space, as if it was never installed.\nIf I would use this application with server-side storage, I would destroy only the content of this user - the problem of destroying the table / collection would be a server-side problem - what should be done if no more user is there?\n. ",
    "nekman": "Jerome: I need to fix another issue with my code that I didn't discovered until now...By mistake, I used the Backbone and Underscore AMD forks (https://github.com/amdjs/backbone) for my example. I have fixed this now, but I think that it is best to close this merge request until everything is fixed and re-committed. I will also update the README.md in my next merge request.\n. Yes, of course. That should be removed. Fixed!\n. ",
    "SBoudrias": "You should use require.config map option. Checkout Backbone-Boilerplate example: https://github.com/tbranyen/backbone-boilerplate/blob/master/app/config.js#L15-L20\nThis is really the way to go if you want to use a drop-in replacement. (Also, be sure to use lodash.underscore build to minimize compatibility issue)\n. ",
    "joemcelroy": "What should I do about tests, have ideas of how we can manage two versions of backbone in the specrunner? I was thinking of using AMD to require backbone 0.9.10 within the test and test fetching works on the newer version of backbone.\nOr any better ideas?\n. Sure, I can do that @jeromegn \n. @jeromegn commited the tests. Sorry for the delay!\n. dammit travis is failing cause it shows a different exception error. Let me fix.\n. sure i can move it into that style\n. I tried that first but results in an exception before it gets to fetch\n. I added this test to show that there was an issue with the old version of backbone localstorage. Was to show an exception happens when backbone.localstorage called success and error methods with just the response argument\n. ",
    "SargoDarya": "Thanks for doing this phoey. Is this the reason\n\"TypeError: Cannot call method 'sync' of undefined\"\nhappens?\n. ",
    "vip32": "fixed in #63\n. ",
    "ryankirkman": "@jeromegn Champion, thanks mate!\n. ",
    "fredgalvao": "The version in it was. No actual code changes though.\n. ",
    "WillsB3": "Oops.\nAfter checking out the example and tracing through the same steps, I realise that it wasn't the collection/model reference causing the problem!\nI had inadvertently set one of the attributes of my Point model to be a Google map - no wonder I was having issues!\nApologies!\n. ",
    "beldar": "Sorry my bad, I assigned an id on the constructor and break it all.\n. ",
    "dlferro": "Sure. \nhttp://backbonejs.org/#Collection-update.\nIt could be possible that I'm completely misunderstanding the functionality.\n. With the official reason of 1.0 will there be any plans to support http://backbonejs.org/#Collection-set to sync LocalStorage?\n. ",
    "Krivega": "I do not have access to commit to the repository, but the latest version of Backbone requires the following changes:\njavascript\n     if (options && options.success)\n-      if (Backbone.VERSION === \"0.9.10\") {\n-        options.success(model, resp, options);\n-      } else {\n-        options.success(resp);\n-      }\n+      options.success(resp);\n. Yes, but if use https://github.com/documentcloud/backbone/blob/master/backbone.js (general change in commit https://github.com/documentcloud/backbone/commit/e4c046cd4d4f22010a201197f7780408ac6ba119 )\n. it would be good for this purpose set a new version of Backbone(0.9.11)\n. you really need tests?\n. ",
    "marsch": "@jeromegn any progress on this?\n. ",
    "jwilm": "@jeromegn weighing in that I too am interested in this. Thanks!\nIn the meantime, I have extended my local storage collection with a save method. My use case is simplified since all of the models are updated and never deleted from the collection.\njavascript\nBackbone.Collection.extend({\n  // localStorage, model, etc\n  save: function() {\n    this.each( function(model) {\n      Backbone.localSync(\"update\", model)\n    })\n  }\n})\nI just call it manually after set, but listening for add/change/remove events and proxying to save should work for more complicated use cases. You would of course need to add an optional argument which is a model and sync action to alter behavior.\n. ",
    "suprMax": "Entire model if that helps http://pastebin.com/R5B4Hfvy\n. Ooops my apologies, that was that\n. My bad. Weird I didnt see that before.\n. ",
    "ryan-roemer": "I think _clear sounds good.  And, I can move the clearStorage method to the lib as _clear if you'd like.\nThe issue I don't have a good solution for is the \"private browsing\" error code which needs window.localStorage.length === 0 in the library to be caught, which I can't figure out how to easily mock in the tests (without using an actual mock lib like Sinon). Do you have any ideas?\n. Sure!\n. Updates:\n- Added _clear method to library, so a model or collection can call directly.\n- Also added _storageSize method to library (just wraps window.localStorage.length). Unfortunately, after hacking at Sinon for a while, I still couldn't get it to patch the native window.localStorage.length property. So, I took the \"best of bad options\" and wrote a small wrapper in the library that is much more easily patchable in the tests. The upsides of this are: (1) there is no explicit test detection, and (2) it can be patched. The downsides are: (1) we now have an extra _storageSize method that isn't strictly necessary.\nI think this is the best compromise to keep the tests from completely wiping localStorage without having explicit test detection in the library.  And, I decided not to use Sinon as it didn't buy me anything extra here.\nAt any rate, let me know how you feel about the pull request in its current state and if there is a better approach to the window.localStorage.length thing...\n. Try with an upper-case \"L\". E.g., new Backbone.LocalStorage()\n. As one of the folks who originally suggested the AMD change that precipitated this issue in #100, I say +1 for this PR. /cc @jeromegn \n. This is my two cents, but I prefer dependency-less bower.json files. Particularly here if I want to use lodash, etc. instead -- much, much easier without specified deps in bower.json.\n. Small note -- this doesn't appear to be used...\n. ",
    "alanhamlett": "Here's the annotated source code and an example:\nhttp://ahamlett.com/Backbone.localStorage/\n. I agree, and I've totally removed the model from the example in favor of using the auto-created one returned after a sync.\nBy returning an instance of the router and collection, do you mean calling new on the returned Backbone constructors before returning them? For consistency, I prefer to never return an instantiated Backbone object and instead always call new outside the router or collection definition.\n. ",
    "rsskga": "I'd be happy to. I'm rather new to testing, so I'll just need a little time to familiarize myself properly. More soon...\n. @jeromegn Sounds good.\nI'll also need to figure out why bower isn't picking up on the \"main\" file designation as expected. Figuring that out is probably outside the scope of the unit test.\nOnce I take care of these things, I'll properly register the package as:\nbower register Backbone.localStorage git://github.com/jeromegn/Backbone.localStorage\n. Btw... the \"main\" designation is meaningful when running useful commands like:\nbower list --map\nbower list --path\nThat's why it matters.\n. It does work. It will install and uninstall the package. It simply won't output the path of the \"main\" file when using the list command.\n. Different feature sets are to be expected depending on package type, so I think it's totally ok to leave this as-is. We can support more features over time.\n. ",
    "andreypopp": "Oh, it would be hard to test it with phantomjs... will try my best.\n. Already sorted out things with phantomjs, expect the pull request being updated in a minutes. :-)\n. Please, consider also issue #78 as related.\n. Yeah, forgot to remove CommonJS spec from test-globals-amd spec. Fixed now.\n. Remove the file or just reset the changes made?\n\u2014\nAndrey Popp\nOn Sun, May 12, 2013 at 8:50 PM, Jerome Gravel-Niquet\nnotifications@github.com wrote:\n\nCan you please remove the minified version? I'll do it myself. I recently changed the contribution guidelines: https://github.com/jeromegn/Backbone.localStorage#contributing\nApart from that, it looks good.\nReply to this email directly or view it on GitHub:\nhttps://github.com/jeromegn/Backbone.localStorage/pull/79#issuecomment-17780918\n. Ok, though I think after rebase GitHub will require me to open a new pull request \u2014 will see.\n. Done with rebasing and resetting changes to minified version. Do you want me to squash chnages into a single commit?\n. @jeromegn cool, thanks\n\ncan we have it now on npm? #78 \n. ",
    "popeindustries": "It would be a good idea to add a main attribute to package.json as well:\njson\n\"main\": \"./backbone.localStorage.js\"\n. ",
    "stoplion": "Big L did it. :)\n. ",
    "ImadBoumzaoued": "Any workaround or fix ?\n. Ok i will try i'm not an expert in js :P\n. ",
    "nraibaud": "You save my day, i have the same problem ...\n. Chrome 26.0.1410.65 and Firefox 20.\nBackbone Version 1.0.0\nLodash Version 1.1.1\nLocalStorage version : 1.1.0\n. I will try, but never used underscore before.\nDirectly lodash... Spent 4 hours reading documentation of localstorage, refactoring myde code... make me crazy !\nI was looking for the problem and find this issue...\n.  for exemple this simple code does not work with lodash :\nvar c = new Backbone.Collection();\n c.localStorage = new Backbone.LocalStorage(\"favorites\");\nc.fetch();\n. ",
    "zertosh": "I was having a similar problem because of Backbone.localStoage's dependency on  _#chain. Starting with Lodash v1.0.0-rc.1, _#chain was removed in favor of  _(...), i.e., chaining by passing the value directly to the lodash function. A solution is to use the Backbone or Underscore custom build of lodash- those include a  _#chain but lack other lodash-only functions. This patch takes care of whether  _#chain exists or not. I wanted to submit a pull request, but I'm really struggling with modifying the test spec so that you first test against underscore and then against lodash. Any ideas on how to test against both libraries?\njavascript\n  findAll: function() {\n    return (_.chain || _)(this.records)\n      .map(function(id){\n        return this.jsonData(this.localStorage().getItem(this.name+\"-\"+id));\n      }, this)\n      .compact()\n      .value();\n  },\n  // ...\n  _clear: function() {\n    // ....\n    (_.chain || _)(local).keys()\n      .filter(function (k) { return itemRe.test(k); })\n      .each(function (k) { local.removeItem(k); });\n  },\nEDIT: In case it's ok to submit a pull request without the tests, zertosh/Backbone.localStorage@98e7c6d62046b36a867bf0bdd7dcd20693b61a82\n. @jeromegn awesome! see pr #87 \n. ",
    "antonio-marrero": "What Jerome says makes sense, probably I pulled an edge version. Then issue can be close without pulling any fix.\n@andriijas , good to know version 1.0 is out, these are good news. I'll plan to move asap, thanks\n. ",
    "yakubori": "There is nothing wrong, imho, with throwing something like the following, and leaving it to the user to decide whether to wrap their call in a try/catch.\njavascript\nBackbone.LocalStorage = window.Store = function(name) {\n  if( !this.localStorage ) {\n    throw \"Backbone.localStorage: Environment does not support localStorage.\"\n  }\n  this.name = name;\n  var store = this.localStorage().getItem(this.name);\n  this.records = (store && store.split(\",\")) || [];\n};\n. Sorry. I didn't properly branch for each of the two commits I wanted pulled... ya, the S4() change was just for readability, there was no functional issue with the code that was already in place. The second commit was regarding Issue #85 but my upstream merge also got included, since I was working on master.\n. ",
    "volkanunsal": "Awesome. Thanks!\n. ",
    "baklinger": "I think it's a general issue but I'm newbie and probably I'm doing something wrong:\nI would like to save my whole model to the localstore when \"change\" is made on it, so:\n1. I added \"change\" callback inside model \"initialize\" function:\ninitialize  : function() {\n            this.on('change', this.saveProfile);\n        },\n2. I provided the simple callback:\n        saveProfile: function() {\n            console.log(\"Profile saved.\");\n            this.save();\n        },\nOn the console I see doubled \"Profile saved\" log. \nI think it's happen because inside the Backbone.localstorage \"create\" function the \"set\" is called (only first time when the model hasn't id yet). I'm not a commiter for the Backbone.localstorage master branch but if the \"{silent: true}\" will help it should be added to the master branch.\nThis same issue is described on Stack Overflow:\nhttp://stackoverflow.com/questions/10228267/backbone-js-fires-render-twice-on-collection-add \n. ",
    "loicraux": "I fear this is a bug in Backbone.localStorage.create.\nYou cannot modify the model passed as argument, its up to Model.save, the method calling Model.sync to call set() on the model, this is done in the options.success callback in Model.save impl.\n(remember we're implementing a backend, we're not meant to be passed and manipulating a Backbone.Model object but rather a hash of attributes :)\nSo, the implementation of Backbone.localStorage.create should rather be :\n(IMHO the options hash coming from save() should also probably be passed?) :\njavascript\n  create: function(model, options) {\n    var idAttr, id;\n    idAttr = model.idAttribute; // don't know if this is really necessary,\n                                    // depends on the general behavior\n                                    // of Backbone.localStorage w.r.t. the name\n                                    // of the identifying attribute (is it set\n                                    // by the client side Model or forced to be 'id' by\n                                    // Backbone.localStorage?\n    model = model.toJSON(options); // dereference the original passed model,\n                                   // actually this should be factorized in\n                                   // Backbone.localStorage.sync (in this case idAttr\n                                   // should also be retrieved by \n                                   // Backbone.localStorage.sync ! )\n    model[idAttr] = id = guid(); // (*) even if the model already had an ID attribute,\n                            // overwrite it, isNew was already checked in Model.save() !\n    this.localStorage().setItem(this.name+\"-\"+id, JSON.stringify(model));\n    this.records.push(id.toString()); // now with (*) we can safely push it into\n                                           // the records! With the previous code,\n                                           // this lead to potential duplicated IDs in the\n                                           // records.\n    // the rest of the impl remains the same :\n    this.save();\n    return this.find(id); // means that find() signature must be modified...\n  }\nLet me know what you think about this proposal ... \n. I haven't done this yet in github but I know this is easy.\nI'll try to push a pull request by this week.\nIs there a test suite to replay ?\n\nLe 31 oct. 2013 \u00e0 06:07 PM, Jerome Gravel-Niquet notifications@github.com a \u00e9crit :\nPlease make a pull request for those kinds of changes. It's pretty easy!\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "almirfilho": "Any update about this issue?\n. ",
    "runk": "@jeromegn, it's removed.\n. ",
    "eastridge": "@jeromegn updated based on feedback.\n. Thanks Jerome!\n. ",
    "bdimcheff": "ha, ok I just saw this pull request.  I think you need to basically not check root.  require is defined in a closure (in browserify) or is just injected in node.  I don't think it's on root, except for in the node repl.\n. This is related to #100 btw\n. and the tests actually run/pass: https://travis-ci.org/jeromegn/Backbone.localStorage/builds/11598655#L465\n. ",
    "marcofognog": "Yes, thats expected behaviour. I stumbled upon it when writing this line https://github.com/thomasdavis/backbonetutorials/blob/gh-pages/videos/beginner/index.html#L119\nfrom the video-tutorial. It should save and redirect to the userListView, and the saved model should be in the list of users. Than I switched to using the server, it worked, switched back to localStorage, it didn't.\n. Thats what I thought at first, and it makes sense, but here's an example:\nhttps://gist.github.com/marcofognog/6207154\nIf you run it without localStorage, you'll see that the number of instances of the model is always incremented after user.save(), even if it is instantiated separately.\nIf you uncomment the localStorage line, the number of instances remain the same. \nWell, all I can say is that localStorage is not behaving like Backbone behaves.\n. ",
    "jiixing": "I had the same problem since I have localStorage key in both my model and collection. I need it in my model so I can go to the model detail page directly. With a localStorage key in the model, when the model is saved, the collection.localStorage.records is not updated\nso unless do refresh from the browsers, the collection.localStorage.records is of the older values when it is created.\nMy solution is to always recreate this.records in findAll\n```\n    findAll: function() {\n        // recreate this.records from localStorage\n        var store = this.localStorage().getItem(this.name);\n        this.records = (store && store.split(\",\")) || [];\n    // Lodash removed _#chain in v1.0.0-rc.1\n    return (_.chain || _)(this.records)\n        .map(function(id){\n            return this.jsonData(this.localStorage().getItem(this.name+\"-\"+id));\n        }, this)\n        .compact()\n        .value();\n},\n\n```\n. the model doesn't know the collection, you need to put the same localStorage key in the model definition, but read issue #101  and my fix to the problem\n. ",
    "charlesbjohnson": "I, too, am running into the exact same issue as @jiixing.  records is still populated with older values even after using create on my collection to add a new model.  Only on a page refresh is records updated.  Is there any reason that it isn't updated dynamically?\n. ",
    "valerianrossigneux": "Yes. I also set urlRoot attribute as per the documentation (at least to my understanding).\n. ",
    "MeoMix": ":+1:  I just tried to patch an object and got very odd results.\n. ",
    "sindresorhus": ":+1: \n. ",
    "davidluthiers": "I have exactly the same issue, did you find any solution?\n. Okay I learned by pain that you cannot say to the collection wich model class is going to store, because when it tries to fetch it (at least with requireJS, probably context issue) backbone.localStorage just chokes with it.\n. ",
    "fluxusfrequency": "@jeromegn Here you go.\n. Thanks!\n. ",
    "subzerodigital": "I know I can fetch the whole collection first then get the model by id:\nvar jobs = new JobCol();\njobs.fetch();\njob = jobs.get(id);\nbut, do we have a way to fetch the model directly instead fetch the collection every time?\nThanks very much!\n. ",
    "toddbranch": "Where?  I don't see any references to cdnjs just grepping\n. Sorry, new to all this - can you be a little more specific?\n. I'm not very sharp with require\n. thanks for the direction - think this should do it\n. ",
    "guilherme-santos": "http://cdnjs.com/libraries/backbone-localstorage.js/\nI thought you added, but I read https://github.com/cdnjs/cdnjs and anyone can do it!\n. ",
    "marcelklehr": "Thank you!\n. ",
    "kriswill": "I just noticed that you changed this, and it was causing a bug in my code.  I have a model that I'm saving and it seems to ignore {parse: false} in the save options.  The localStorage sync is always setting response to a boolean on create/update, it calls the model.parse(true) on Line 481, in Backbone.js save().  \nI think the implied behavior is that when you save a model, the API should return the current state of the model, i.e., a new ID for example in the response, and it's attempting to feed that sync'd data back into the model.  For instance, having sub-models/collections that are instrumented during the parse breaks.  This change seems to disrupt the default save behavior of Backbone.  I think the previous behavior was correct.\nIf this is breaking Backbone-relational, it's probable their save has non-standard expectations.\n. ",
    "lukealbao": "The jsonData function has been deprecated, and that reference should've been removed. You can look at a pull request I submitted a couple weeks ago and find the line you need to delete. \n. ",
    "gadikotamohan": "yeah, thank you.\n. ",
    "snrbrnjna": "OK. thanks. I solved it by initializing the LocalStorage in the constructor of the collection.\n. ",
    "ademeter": "Could that be the reason for my problem? #131 \nAny suggestion to solve this?\n. Here is the output after logging each track to console (toJSON()):\n\ntrack no.1 and track no.2 are parsed from localStorage. Track no.3 is the latest track after saving (without parsing again).\n. ",
    "begizi": "+1\n. ",
    "scott-w": "I think this code has been removed so I'm going to close this issue.. Hi @coire1, do you happen to have the Backbone version for this? I've synchronised nested collections to the server in Backbone 1.3+ and it's all serialized correctly. If it's fixed upstream, I'll close this ticket.. Hi @coire1 thanks very much for that. I believe Backbone has resolved the issue since then so I'll close this and let anyone comment if they feel it needs to be looked at again.\nBest regards,\nScott. This is correct behaviour in-line with Backbone's standard behaviour.. I'm inclined to think that this is correct behaviour - model.destroy() is supposed to synchronise with the server/localstorage so I'd expect fetch to return nothing.. I'm closing this as the PR has been open for nearly 3 years. If we still have an issue around Bower, please submit a new one against the updated branch.. Hi @spenoir, thanks for contributing this. I think it's important that this library fails hard if Local Storage isn't supported in the user's browser.\nAs an alternative, I'd support providing an option that handles the lack of support to give the developer a choice on exactly how they'd like to handle it.\nHope this helps\nScott. Hi @spenoir, please see my comment on the related issue. As this has been open for over 2 year, I'm going to close it.\nFeel free to re-open an issue and I'll be more than happy to have a discussion.\nBest regards,\nScott. Hi @ihor-sviziev, I think that the issue is in Safari and the only thing this library can do is report an error.\nThe correct behaviour should be an error getting thrown at the very start, so we know that the issue is localStorage not being supported as early as possible.. @dbrugne I'm going to close this PR as I've updated the code-base for ES6, creating merge conflicts.\nI'd really like to discuss improvements in this area so I'd love for you to open a new PR against the updated code.. Hi @spenoir - is this referring to doing model.destroy() when the model comes from a collection with localStorage set?. So if I'm understanding it correctly, every time you run fetch(), the in-memory model should update with whatever's in the localStorage, overwriting the data in the model/collection. I'll pull a test together to see if I can verify this behaviour.. I'm removing the 2.0 milestone until I can understand what needs to happen here. I'm thinking it might be a bug but I'm not sure.. Hi @Chris136 - is the local storage being updated in multiple places? e.g. are there two models referencing the local storage record?. Thanks for the information @Chris136 If I understand this correctly, what's happening is:\n\nFetch all events from localStorage\nAdd new event\nMove away from view\nMove back to view\nStep 1. fires again but the newly added item in localStorage isn't in your view\n\nBasically, once there's a list of records in the collection, fetch is just returning that list instead of checking the localStorage again.\nI can have a look at this over the weekend and try to re-create the issue in a test environment.. Hi @Chris136 \nWould it be possible for you to check the version of Backbone.localStorage that you're using? I've been trying to recreate this in tests and the output seems to be acting the way I'd expect in version 2.0.0.. Thanks @Chris136, is the issue still present?. HI @Chris136 \nThat'll be awesome, thanks \ud83d\udc4d . Hi @TotempaaltJ, thanks for this.\nWhile I'm closing this because of #207 - I'd be interested if you were to open a ticket to focus on this using options and documentation.. Hi @Flimm and @mateuszwrobel, thanks for contributing this.\nI agree that we don't need to document this in this case - a similar issue can happen with server-side APIs so developers should generally be aware of these possibilities.\nI would definitely support adding support for events firing from localStorage, however, as this could greatly enhance the usability of this library.. Hi @Flimm - it's common in other libraries because being thread-safe or not is a well understood statement that is usually important to know in the context of the library. People generally need to understand the effect on memory during execution of a program as the standard assumption is that it's not affected by other parts of the program.\nThe localStorage is more like writing to disk (and like synchronising over a network) - you don't assume that it'll remain totally in sync without doing something. If anything, I'd be more inclined to merge #174 and put efforts into improving the ability of the system to remain in sync with your local disk.. Good spot on this @hendiko. The localStorage adapter should map onto Collection's expected functionality of maintaining ID uniqueness.. Hi guys,\nThanks for contributing this. I'll be updating the code to ES6 + modules soon which should make the implementation a little more obvious.\nRegards,\nScott. Hi @panych, I'd rather lock the supported Backbone version at 1.3.3. I'm closing this for now.. Hi @hugohenrique, while I like the suggestion I think keeping this focused on the localStorage implementation is the right way forward for now, given the limited resources available to the project.. Thanks for this @adictovirtual. I'm going to close this in favour of #207. Hi @typhonrt, thanks for this, however I'm going to close it in favour of #207. Hi @ismnoiet - please see my comment in the related issue.\nCheers,\nScott. Thanks for this, however I'm closing this in favour of #207 . I'm not convinced this is the best way forward. I think it should be incumbent on the developer to do this themselves.\nMy reasoning for this stems from the idea that I wouldn't expect changing the ID to delete my model on the server without a load of manual work on the side of the developer.\nThanks for the contribution, however.. Thanks @zobidafly for your suggestion. I'm working on a version that will be doing exactly this.\nRegards, Scott. Thanks for the answer on this @Lemmmy . Thanks for this addition, it's much appreciated!. Hi @jeromegn, I appreciate you've likely been busy and haven't had a chance to reply.\nFor the benefit of others reading this, I've created a separate repository at https://github.com/scott-w/backbone.localstorage and I'm publishing an updated version of this (in ES6) to NPM as backbone.local.\nI'm more than happy for anyone to open issues or Pull Requests to help get the project in a stable position for production use and I'll do my best to help anyone wanting to get involved.\nI'd really like to hear from you to see if you're interested in taking any changes I make back into the mainline repository to continue publishing from the original name. I really appreciate all the work you've done over the years to maintain this project and would love to keep it going.\nBest regards,\nScott. Hi @jeromegn,\nGreat to hear from you! I totally agree that re-using the existing repo + NPM package is the preferable option.\nRegarding forking, that's totally fine, I can easily setup my git remote again to point at a newly forked repo \ud83d\udc4d \nI'll leave the new package up for now, it's letting me test the changes I'm making to update the package before I can put them back into this repo.\nIf you can give me access rights to both this repo and the NPM repo I'm happy to maintain everything as-is.\nThanks again,\nScott. This is a great addition but I'm going to close in favour of #207 . Awesome cheers \ud83d\udc4d . Thanks for this, I'll roll an Alpha 2 when #209 is merged.. Good work @natalan thanks for this :+1: . Thanks for pointing this out @Bartosz-D3V - I've published Alpha 3 without the logging calls \ud83d\udc4d . Hi @chill117, thanks for reporting this. I've marked this as a bug to be resolved before v2.0 can go out.\nIt seems Webpack is building an output file that assumes the module global exists, which isn't the case in a browser environment.. Hi @chill117 - this should be resolved in the latest .rc2 and the downloaded build should now work.. No worries @chill117 - let me know if you find anything else :). Hi guys, I've closed this ticket and published v2.0.1 to NPM. Thanks for your patience and to the guys who published fixed outputs to (hopefully) keep people's builds working in the meantime \ud83d\udc4d . Hi @scavassa91 - thanks for this, I'll reopen the issue \ud83d\udc4d . @scavassa91 I've sorted this and published a new build to NPM @2.0.2. Thanks for the quick spot!. Hi @tpict, thanks for reporting this. Do you know if the issue occurs under Firefox?\nDo you have some sample code that can replicate the issue?. Hi @Liero \nThis might be because Backbone doesn't have good support for being treated as an ES6 class. Try the following:\n```js\nimport { Model } from 'backbone';\nimport { LocalStorage } from 'backbone.localstorage';\nconst UserModel = Model.extend({\n  localStorage = new LocalStorage('api/Account'),\nurl: '/api/Account',\nfromServer() {\n    return this.fetch({\n      crossDomain: true,\n      xhrFields: {\n        withCredentials: true\n     },\n     ajaxSync: true\n    });\n  }\n})\n```\nThen, instead of calling fetch, you call fromServer so you have the option to retrieve your credentials from Local Storage elsewhere in your app from the model.. Hi @lica-mobilu that's excellent work! Can you open a PR with this change and I'll be able to put a new release in.. Can you change this to either:\njs\nmodel.id.toString()\nor \njs\n`${model.id}`\nplease?. ",
    "lfilho": "Having the same trouble. How did you solve it? Thank you\n. I don't remember well but I had to all include the localStorage in the model, not only the collection.\n. Collection.remove does only removes it from the collection, it doesn't persist the state of the collection.\nI think you either do like you said (destroying a model) or calling collection.sync()\n. ",
    "zachwolf": "Similar issue, any fix on this?\n. ",
    "joelcollinsdc": "I got this error because i was trying to call save/sync on the collection, not the individual model\n. ",
    "ashishsajwan": "now it shows Cannot read property 'collection' of undefined @jeromegn \n. ",
    "coire1": "I've encountered the same problem.\nThe nested collection turns into a blank Javascript Array when localStorage serializes the model, calling JSON.stringify(model).\nAccording to the manual:\n\nIf an object being stringified has a property named toJSON whose value is a function, then the toJSON() method customizes JSON stringification behavior: instead of the object being serialized, the value returned by the toJSON() method when called will be serialized.\n\nSo when localStorage serializes the model, it calls model.toJSON(), the default Backbone toJSON, that it simply clones the model's attributes, excluding the nested collection.\nA simple solution would be to change the behavior of the model toJSON() to include the nested collection.\nI hope this can help you and future readers. :smile: \n. Hi, it is really an old project but I found the piece of code you need.\nIn the model that contains the nested collection you have to redefine and override the toJSON method.\nThe new method has to initialize a new collection and copy the models in it.\ntoJSON: function() {\n  /* Get the array as model attribute */\n  var tempNestedModels = this.get('nestedCollection');\n  if (!tempNestedModels) {\n    /* if are present nested models initialize a new collection */\n    nestedModels = new NestedCollection();\n  }\n  /* for each model in collection copy/filter the attributes needed */\n  _.each(nestedModels.models, function(model) {\n    model.attributes = _.pick(model.attributes, 'id', 'exampleAttr');\n  });\n  /* return the original model, filtering out unuseful attributes and adding\n  the new collection instead of the original array */\n  return _.merge(_.pick(this.attributes, 'id', 'modelAttr'), {\n    nestedCollection: nestedModels\n  });\n}. Hello @scott-w, the issue for me happened with Backbone `1.1.2`.\n\nIt is an old project and I can't test it with the newer version. Hope this helps anyway.\nLet me know if I can do anything else.. ",
    "baoqger": "@coire1, I can understand the issue. but can't fix yet. Can you help on this. I meet the same issue on my project\nregards\nBao jingjing. ",
    "flexoid": "Done\n. ",
    "akre54": "Thanks. Can we get a version bump on this so I can use it in my package.json?\n. Thanks!\nOn Jun 27, 2014 10:28 AM, \"Jerome Gravel-Niquet\" notifications@github.com\nwrote:\n\nYea, I'll uglify this beautiful code and bump the version, thanks for\nreminding me :)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jeromegn/Backbone.localStorage/pull/137#issuecomment-47351324\n.\n. Lol thanks. Bumping now\n. \n",
    "qkhhimkfrgw": "Here is the full source of one test.\nhtml\n<body>\n    <script src=\"js/vendor/jquery-1.11.0.min.js\"></script>\n    <script src=\"js/vendor/underscore.js\"></script>\n    <script src=\"js/vendor/backbone.js\"></script>\n    <script src=\"js/vendor/backbone.localStorage.js\"></script>\n    <script>\n        var TestModel = Backbone.Model.extend({\n            defaults: {\n                field: ''\n            },\n            localStorage: new Backbone.LocalStorage('tests-backbone')\n        });\n        var TestCollection = Backbone.Collection.extend({\n            model: TestModel,\n            localStorage: new Backbone.LocalStorage('tests-backbone')\n        });\n        window.localStorage.clear();\n        var collection = new TestCollection();\n        collection.create({field: '1'});\n        collection.fetch();\n        if (collection.size() > 0) {\n            collection.invoke('destroy');\n            alert('data found');\n        }\n        else {\n            alert('data not found');\n        }\n    </script>    \n</body>\nIt shows me 'data not found' in the real chrome browser, \nbut 'data found' in the jsfiddle(http://jsfiddle.net/qkhhimkfrgw/c32uL/5/).\nIf I change the TestModel definition like this:\njavascript\nvar TestModel = Backbone.Model.extend({\n            defaults: {\n                field: ''\n            },\n           var TestModel = Backbone.Model.extend({\n            defaults: {\n                field: ''\n            }//,\n           // localStorage: new Backbone.LocalStorage('tests-backbone')\n        });\n});\nIt runs without any problems.\nMaybe the localStorage of TestModel is the problem,\nbut I can not comment out the localStorage of TestModel.\nSometimes I use new TestModel ({...}).save(), and sometimes I will use TestCollection.create(...).\n. ",
    "gaearon": "@jeromegn \nIs the project no longer maintained?\nI'm not bitching but noting this in README would be helpful.\n. Got it. Thanks!\n. ",
    "danielbraun": "npm/browserify\n. So I checked up on my open issue. Seems like it's been fixed in 1.1.10 somehow.\nClosing.\n. ",
    "micros123": "Same problem here on two different computers (OSX and Win8.1): bower install is broken for all versions of Backbone.localStorage. Some extra info:\n``````\nbower backbone.localstorage#~1.1.7      EMALFORMED Failed to read /var/folders/w2/ctf6s2xn26z_421c3hrfxgbh0000gn/T/michiel/bower/backbone.localstorage-3409-XBkDgn/bower.json\nAdditional error details:\nUnexpected string```\n``````\n. ",
    "massimopalmieri": "thanks\n. ",
    "msemenistyi": "cool, thanks\n. ",
    "Ahrengot": "So just to clarify, the period in the folder name makes some servers think the folder is a file with the name backbone.localStorage/backbone.localStorage.js\n. ",
    "tohashi": "Sorry, I removed them.\nthis.localStorage is function, and it was not called.\nSo this expression always returns false.\n. ",
    "malept": "I rebased this change against master today (and the tests pass).\nFWIW, I've been using this change successfully for several months, with Backbone 1.1.2.\n. ",
    "davidspiess": "What's the point for a underscore-free codebase? Why not use it if it's available?\n. ",
    "nbergseng": "@jeromegn np, updated.\n. ",
    "t1st3": "Travis errored on NPM install.\nFailure from Travis doesn't seem to be linked to this PR.\nMaybe the build at https://travis-ci.org/jeromegn/Backbone.localStorage/builds/36493930 can be relaunched?\n. fixed in #165\n. ",
    "vinnymac": "It was merged, you should close this issue, as the latest version now supports a function.\n. ",
    "killtheliterate": "I just ran into this problem as well, though I cannot track down where multiple calls to destroy are happening. I have a remove listener set up on a collection which calls the destroy method on the removed model, and then everything goes crazy and I have a stack overflow.\n. Resolved this issue by using the following:\njavascript\n_destroy: function(model) {\n    this.localStorage.destroy(model);\n}\n. ",
    "danascheider": "My actual page does have a HEAD tag, but it didn't make any difference in the error so I took it out to keep the example short.\n. So I never did figure out exactly what caused this, but it turned out I was using an older version of Backbone.localStorage and updating made it go away.\n. ",
    "BogdanTudosie": "I have a similar problem with the latest backbone.localStorage  on line 4\n. ",
    "dottodot": "OK I've found that if I set an id rather than using the guid it works as it should, sometimes i.e about 50%\n. ",
    "nddery": "Having the same problem, this seems to be random, sometimes, the full collection is returned, some other time, just a part of it. The full collection is in local storage. As dotdotdot mentionned, reloading the page the full collection is returned.\n. ",
    "munvier": "Same here, i've a collection. I add a model in it. Seems good on the View, I switch to an another view, fetch the collection, new models are missing. But if i refresh the page, my new models are here ....\nEDIT : the remove works properly, but new items are missing. I must be doing wrong the add method...\n. ",
    "yahuarkuntur": "Looks like is the same as #177 . Any updates on this issue? or is there any workaround?\nCheers!. ",
    "eush77": "Yeah, I forgot to put backbone in devDependencies. Now it seems to work.\n. ",
    "andym2009": "I misunderstood the options on save\n. ",
    "udhaya10": "col.localStorage.create(col); worked for me!\n. ",
    "adamterlson": "Ah, my mistake, I totally looked for and missed the tests folder.  More than happy to, will update in a few minutes here.\n. @jeromegn So a test that is missing and perhaps nice to have is something that goes end-to-end, that is, passing {ajaxSync:true} to a backbone AJAX function and affecting which sync function is actually called.  Although it'd be trivial with something like sinon, I didn't see any examples of anything like this in the current suite and didn't want to add the dependency.  Anyway, hope it's all looking good now!\n. ",
    "dbrugne": "Related: http://stackoverflow.com/questions/17096469/newly-saved-backbone-model-does-not-appear-in-collection-after-fetch\n. I reverted backbone.localStorage-min.js with the last one on your master branch.\nFYI if I minified with your own Makefile. :)\n. ",
    "Chris136": "I have the same problem.\nIf I replace \"this.records\" in the function \"findAll\" with \"localStorage.getItem(this.name).split(',')\" everything is working.\nmodel.LocalStorage and the browser localStorage seem to be out of sync.. No, just one model. I use it to save calendar events created via drag and drop. I noticed newly created events were missing when I switched a week back and forth. But after a complete site reload, the events were back where they were created.\nAfter this little fix I mentioned before, everything worked as intended.. @scott-w according to the changelog I use version 1.1.16 (January 22, 2015).\nI installed it via NPM @2.x and it said version 2.0.0. @scott-w yes, that is the version where I noticed the problem.. I try to make a minimal test case if I find the time this week.. ",
    "blikblum": "I fixed this in my backbone fork.\nLook at the following commits:\nhttps://github.com/blikblum/backbone/commit/8054cdd740eb7d62489185ffb055ab9f97e0a7a1\nhttps://github.com/blikblum/backbone/commit/e183cce5dc262ca91559c94230134db03ad40de2\nShould not be hard to make a PR. Currently i'm on a slow internet connection so cannot do it myself. ",
    "ahwitz": "For what it's worth, if anyone's having trouble using LocalStorage with ECMAScript 6/System.js/jspm, using jspm install github:jeromegn/Backbone.localStorage instead of jspm install npm:backbone-localstorage solved a related issue.\n. ",
    "kdoran": "@seyade it looks like it's because bower is installing an entirely differentl library for backbone localstorage: https://github.com/robmoorman/backbone-localstorage\n. ",
    "remmel": "The library you want is here : https://github.com/jeromegn/Backbone.localStorage (different with https://github.com/robmoorman/backbone-localstorage)\nadd in bower.json dependencies : \"backbone.localStorage\": null\nand run  \"bower update\"\n. ",
    "AlahmadiQ8": "Had the same issue with jspm. @ahwitz 's suggestion solved it. Thank you!\n. ",
    "mateuszwrobel": "You should do sync between tabs by yourself. Library like this should not do it for you (it just provide interface to use LocalStorage).\nStorage feature provides event that you can listen to, and update your models. Example: http://html5demos.com/storage-events. ",
    "Flimm": "What would it hurt to warn developers about this?\nIntelligent and well-educated developers who already know about this race condition get a friendly reminder. Not so intelligent or well-educated developers like me who make bad assumptions about being able to use a library in multiple tabs get their faulty assumptions corrected.\nI don't see a downside.\nIn general, server-side libraries in many languages frequently point out if there are thread-safe or not (although that isn't relevant in Node), so I don't think it would be at all unusual for a library's documentation to point out that the code is not \"tab-safe\".. ",
    "fishenal": "there is a model has wrong require soure name\n. ",
    "ismnoiet": "A good question, me too i was looking for the an answer, and after a little bit of tweaking i found out this:\n``` javascript\n// Let's say the name of the localStorage item is myData inside the collection \n// localStorage attribute.\nvar Collection = Backbone.Collection.extend({\n    model:Model,      \n    localStorage: new Backbone.LocalStorage(\"myData\")\n});\n// now you have access  to myData localStorage item \nconsole.log(localStorage.getItem('myData');\n// Now what you get from the previous instruction is an array of IDs representing\n// the IDs of models inside the myData collection\n//Now the key for each model inside the local storage is :\n// collectionName + '-' + id(an element of the array localStorage.getItem('myData'))\n// all models are stored in the one string joined by ','\nvar firstModel = localStorage.getItem('myData-'+localStorage.getItem('myData').split(',')[0]);\nconsole.log(firstModel); // now you get the first model logged out to the screen \n// Note here that each Model id is the same one stored inside\n// the array localStorage.getItem('myData')\n// Here is a simple example without too much talking :\nvar LOCALSTORAGE_NAME = 'myData';\nvar collectionOfIDs = localStorage.getItem(LOCALSTORAGE_NAME);\n    collectionOfIDs = collectionOfIDs.split(',') // because ',' is used to join model IDs in a single string stored in the variable collectionOfIDs \nvar models = collectionOfIDs.map(function(modelID){\n    return localStorage.getItem(LOCALSTORAGE_NAME + '-' + modelID);\n});\nconsole.log('models stored under the collection myData are : ',models);\nHope this helps and have a nice day :)\n```\n. You can check my fork for the Real world example as it is not yet an accepted PR \nhttps://github.com/ismnoiet/Backbone.localStorage\nin the README file \n. Thank you @absolux for the direct answer, but if you want really to know how collection items are stored in the localStorage then my solution is here to show you how they are exactly stored in the there, you can also play around with it and see what you get :)\n. @absolux  Good question, my answer is for curious people who want to learn how things are stored, otherwise your answer  is the direct one and should be used for real world usage.\nBecause sometimes you need to implement something like backbone collection with your own javascript framework or even just with your javascript code. for short use my solution to learn about real world implementation and your solution if you just need to use it and that's it :).\nHope this is a clear answer.\n. ",
    "absolux": "As simple as\njavascript\nvar Collection = Backbone.Collection.extend({ localStorage: new LocalStorage('todos') })\nvar todos = new Collection\ntodos.fetch()\n. Thanks @ismnoiet for reply.\nBut, why should we direct access localStorage global object instead of the Backbone collection ?\n. ",
    "9kl": "Sorry, forgot to perform fetch operations\u3002\n. ",
    "typhonrt": "Oh no worries..  Sounds good. At the time I didn't know what I do now. Back then I just rewrote local storage in ES6; I see #207 does this... Now I just use babel-plugin-add-module-exports with my ES6 modules especially everything released on NPM. . ",
    "hugohenrique": ":+1: \n. ",
    "Firnis": "Duplicate of https://github.com/jeromegn/Backbone.localStorage/pull/174.\nDidn't noticed the pullrequest earlier...\n. ",
    "Lemmmy": "localStorage: new Backbone.LocalStorage('article-collection')\ntry putting this in your model too, it worked for me\n. ",
    "glenpike": "Please note, this is not a \"true\" patch, which would merge existing attributes on the model with those being saved...\n. ",
    "woosungchu": "don't merge it.........  I also found It needs more code to sync with the others\n. ",
    "coveralls": "\nChanges Unknown when pulling 8ad3f326d5ec2fa38f0eabe44584badcb2bf30f7 on scott-w:master into  on jeromegn:master.\n. \n\nChanges Unknown when pulling 7ef391cf18b1c2189a95aaafbad91975d4d89670 on scott-w:master into  on jeromegn:master.\n. \n\nChanges Unknown when pulling 0d7dfa18a52821939155fb38991796bc3cfe539e on scott-w:master into  on jeromegn:master.\n. \n\nChanges Unknown when pulling efd8a3f6f0cc6ce7e47fa4dc23a85d319ea29226 on scott-w:master into  on jeromegn:master.\n. \n\nChanges Unknown when pulling e7271c99bd334e2c73fd44ede12a0246bf34259c on scott-w:master into  on jeromegn:master.\n. \n\nChanges Unknown when pulling fa42a554ccb3d847d2e55a7f5e27bc2f97d64af0 on scott-w:master into  on jeromegn:master.\n. \n\nChanges Unknown when pulling abbbd03b58302c3d9ce692238aeb9ef413c72daa on scott-w:master into  on jeromegn:master.\n. \n\nCoverage increased (+6.6%) to 89.683% when pulling 13a9e7bafeff654c2843d93bbc482695be4f1c78 on scott-w:master into 9edd1e74723baa4decc100ac9e5e347a6f0733ba on jeromegn:master.\n. \n\nCoverage remained the same at 83.077% when pulling 2909c57b87219b538174607c33a6f69b07f07d37 on natalan:master into 9edd1e74723baa4decc100ac9e5e347a6f0733ba on jeromegn:master.\n. \n\nCoverage remained the same at 89.683% when pulling dfa79b9a48dce7daad0db6d317cf55b0c3880ef5 on scott-w:master into 01f7b80080d67e16f64fe0d40e9bbe97284494e7 on jeromegn:master.\n. \n\nCoverage remained the same at 89.683% when pulling 624214eb5c8b28c2556e40570dcd1c9e1ffe39a2 on scott-w:master into fc2b547a22dec46f4695be8a64c8e991bdc51533 on jeromegn:master.\n. \n\nCoverage remained the same at 89.683% when pulling d067d33dbd879dedbcb027465c58aee5d76a0f56 on scott-w:master into b65301267921bd019625a3ecf37637dd3f6970af on jeromegn:master.\n. \n\nCoverage remained the same at 89.683% when pulling c4269b7817da94f6b40f510354777fc90c9a37af on scott-w:master into 305d8678fe91e59601318938db77399130b9795b on jeromegn:master.\n. \n\nCoverage remained the same at 89.683% when pulling c6d6fe740d5fedc09fdaaeb2bfa8ba0378018b87 on scott-w:master into e3ccc911b57c1421fc3d6b4d3b8dd81763911335 on jeromegn:master.\n. \n\nCoverage remained the same at 89.683% when pulling c6d6fe740d5fedc09fdaaeb2bfa8ba0378018b87 on scott-w:master into e3ccc911b57c1421fc3d6b4d3b8dd81763911335 on jeromegn:master.\n. \n\nCoverage remained the same at 89.683% when pulling 4476eba230083d1f759c8e5583d7fbec4ef62583 on scott-w:master into c95f192cc8c1afb5a7de2bf7c9af4f52e9f63bd8 on jeromegn:master.\n. \n\nCoverage remained the same at 89.683% when pulling 086ee0bd2dac69d6941aa133dd4b291af611a459 on scott-w:master into bc7ec82f28d081c17c324b1ea116c63992d3aae6 on jeromegn:master.\n. \n\nCoverage remained the same at 89.683% when pulling 743089c16d6b0e640f8005f07ca07773baa1ef23 on scott-w:master into b2548421f42f58a9126a4ca269d0b8e99cfe3a19 on jeromegn:master.\n. \n\nCoverage remained the same at 89.683% when pulling 743089c16d6b0e640f8005f07ca07773baa1ef23 on scott-w:master into b2548421f42f58a9126a4ca269d0b8e99cfe3a19 on jeromegn:master.\n. \n\nCoverage remained the same at 89.683% when pulling 55b558a66a2eba31fda106535434ac4a8afb2da0 on scott-w:master into b2548421f42f58a9126a4ca269d0b8e99cfe3a19 on jeromegn:master.\n. \n\nCoverage remained the same at 89.683% when pulling 9a0beafd9d88971309664809c8174466bbff6ea1 on johnhelmuth:feature/remove-bug-fix into 560df91a82630e491cc225cb2c7e68ec77ef697e on jeromegn:master.\n. ",
    "chill117": "@scott-w Thank you for your efforts with this!. ",
    "scavassa91": "To fix this problem I've done this.\nelse if(typeof define === 'function' && define.amd)\n    define(['underscore', 'backbone'], factory);. Hello @scott-w, I've tested the solution but i noticed that underscore is named as backbone and this cause another problem.\n\nWould you like that I make a pull request to fix this issue?. ",
    "tpict": "I see it under Firefox too. I haven't figured out a consistent reproduction method.. ",
    "johnhelmuth": "Opened a PR to address this issue.. ",
    "qivhou": "I'm just thinking that we don't need the hasLocalStorage(), since it's easy to know if the window.localStorage supported or not by following code\n``` javascript\nif(window.localStorage){\n...//it's supported by current browser\n}\n```\nsince we already get the reference of window.localStorage by  Backbone.localStorage()\nso just added following and remove the code added by @remmons\njavascript\nBackbone.LocalStorage = window.Store = function(name) {\n  this.name = name;\n  //Check if window.localStorage supported\n  if (this.localStorage()) {\n    var store = this.localStorage().getItem(this.name);\n    this.records = (store && store.split(\",\")) || [];\n  }\n};\n. ",
    "evanmuller": "this.localStorage is a function, that condition will always be false because the variable this.localStorage is defined to be a function.  I think you are trying to evaluate whether the value that this.localStorage() returns is available.  That function returns window.localStorage.\nFYI I came across this because I overrode that function to return sessionStorage.\n. "
}